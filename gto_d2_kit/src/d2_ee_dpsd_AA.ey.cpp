/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_dpsd_AA.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_2102_11(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C91700 = 0 * ae;
    const double C91699 = ae * be;
    const double C91698 = 0 * be;
    const double C91697 = xA - xB;
    const double C91696 = ae + be;
    const double C91695 = 0 * be;
    const double C91760 = yA - yB;
    const double C91763 = zA - zB;
    const double C91813 = 0 * be;
    const double C91844 = 0 * ae;
    const double C91840 = 0 * be;
    const double C91883 = 0 * be;
    const double C91910 = 0 * ae;
    const double C91906 = 0 * be;
    const double C92007 = p + q;
    const double C92006 = p * q;
    const double C92012 = xP - xQ;
    const double C92011 = bs[2];
    const double C92019 = std::pow(ae, 2);
    const double C92017 = bs[3];
    const double C92030 = bs[4];
    const double C92051 = bs[5];
    const double C92084 = bs[6];
    const double C92127 = yP - yQ;
    const double C92170 = zP - zQ;
    const double C108 = bs[0];
    const double C93608 = ce + de;
    const double C93607 = ce * de;
    const double C93606 = xC - xD;
    const double C93620 = yC - yD;
    const double C93634 = zC - zD;
    const double C91706 = 2 * C91699;
    const double C91703 = -2 * C91698;
    const double C91705 = C91699 * C91697;
    const double C91704 = C91697 * C91698;
    const double C93581 = C91697 * be;
    const double C93580 = C91697 * ae;
    const double C93579 = std::pow(C91697, 2);
    const double C91707 = C91700 / C91696;
    const double C91702 = 2 * C91696;
    const double C91701 = std::pow(C91696, 2);
    const double C91785 = C91699 * C91760;
    const double C93676 = std::pow(C91760, 2);
    const double C93690 = C91760 * be;
    const double C93689 = C91760 * ae;
    const double C91797 = C91699 * C91763;
    const double C93702 = std::pow(C91763, 2);
    const double C93714 = C91763 * be;
    const double C93713 = C91763 * ae;
    const double C91841 = C91760 * C91813;
    const double C91866 = -2 * C91813;
    const double C91849 = C91844 / C91696;
    const double C91907 = C91763 * C91883;
    const double C91932 = -2 * C91883;
    const double C91915 = C91910 / C91696;
    const double C92008 = 2 * C92006;
    const double C92020 = C92012 * ae;
    const double C92016 = std::pow(C92012, 2);
    const double C92130 = C92127 * ae;
    const double C92129 = C92012 * C92127;
    const double C92214 = C92127 * C92012;
    const double C92235 = std::pow(C92127, 2);
    const double C92173 = C92170 * ae;
    const double C92172 = C92012 * C92170;
    const double C92256 = C92127 * C92170;
    const double C92272 = C92170 * C92012;
    const double C92293 = C92170 * C92127;
    const double C92309 = std::pow(C92170, 2);
    const double C93824 = 2 * C93608;
    const double C93823 = std::pow(C93608, 2);
    const double C93609 = std::pow(C93606, 2);
    const double C93822 = C93606 * ce;
    const double C93621 = std::pow(C93620, 2);
    const double C93825 = C93620 * ce;
    const double C93635 = std::pow(C93634, 2);
    const double C93826 = C93634 * ce;
    const double C91709 = ae * C91703;
    const double C91710 = C91704 / C91696;
    const double C93582 = C93579 * C91699;
    const double C93589 = std::pow(C91702, -1);
    const double C93827 = std::pow(C91702, -2);
    const double C91711 = 2 * C91701;
    const double C91708 = C91701 * C91702;
    const double C93821 = 4 * C91701;
    const double C93677 = C93676 * C91699;
    const double C93703 = C93702 * C91699;
    const double C91846 = C91841 / C91696;
    const double C91869 = ae * C91866;
    const double C91912 = C91907 / C91696;
    const double C91935 = ae * C91932;
    const double C92010 = C92008 / C92007;
    const double C120 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C92008 / C92007, 2) -
          (bs[1] * C92008) / C92007) *
         std::pow(ae, 2)) /
        C91701;
    const double C109 = -(C92012 * bs[1] * C92008) / C92007;
    const double C807 = -(C92127 * bs[1] * C92008) / C92007;
    const double C1388 = -(C92170 * bs[1] * C92008) / C92007;
    const double C92022 = C92017 * C92020;
    const double C92033 = C92030 * C92020;
    const double C92056 = C92051 * C92020;
    const double C92092 = C92084 * C92020;
    const double C114 = (-(bs[1] * C92020 * C92008) / C92007) / C91696;
    const double C92032 = C92016 * C92030;
    const double C92055 = C92016 * C92051;
    const double C92091 = C92016 * C92084;
    const double C92132 = C92017 * C92130;
    const double C92136 = C92030 * C92130;
    const double C92143 = C92051 * C92130;
    const double C92154 = C92084 * C92130;
    const double C189 = (-(bs[1] * C92130 * C92008) / C92007) / C91696;
    const double C92131 = C92129 * C92019;
    const double C92215 = C92214 * C92019;
    const double C92237 = C92235 * C92030;
    const double C92242 = C92235 * C92051;
    const double C92247 = C92235 * C92084;
    const double C92175 = C92017 * C92173;
    const double C92179 = C92030 * C92173;
    const double C92186 = C92051 * C92173;
    const double C92197 = C92084 * C92173;
    const double C276 = (-(bs[1] * C92173 * C92008) / C92007) / C91696;
    const double C92174 = C92172 * C92019;
    const double C92257 = C92256 * C92019;
    const double C92273 = C92272 * C92019;
    const double C92294 = C92293 * C92019;
    const double C92311 = C92309 * C92030;
    const double C92316 = C92309 * C92051;
    const double C92321 = C92309 * C92084;
    const double C93845 = std::pow(C93824, -2);
    const double C93843 = std::pow(C93824, -1);
    const double C93610 = C93609 * C93607;
    const double C93622 = C93621 * C93607;
    const double C93636 = C93635 * C93607;
    const double C91713 = 0 - C91710;
    const double C93583 = C93582 / C91696;
    const double C91717 = C91698 / C91711;
    const double C91714 = C91695 / C91711;
    const double C91843 = C91813 / C91711;
    const double C91847 = C91840 / C91711;
    const double C91909 = C91883 / C91711;
    const double C91913 = C91906 / C91711;
    const double C93678 = C93677 / C91696;
    const double C93704 = C93703 / C91696;
    const double C91850 = 0 - C91846;
    const double C91916 = 0 - C91912;
    const double C92013 = std::pow(C92010, 2);
    const double C92018 = -C92010;
    const double C92031 = std::pow(C92010, 4);
    const double C92085 = std::pow(C92010, 6);
    const double C92135 = C92030 * C92131;
    const double C92142 = C92051 * C92131;
    const double C92153 = C92084 * C92131;
    const double C92217 = C92030 * C92215;
    const double C92220 = C92051 * C92215;
    const double C92226 = C92084 * C92215;
    const double C92178 = C92030 * C92174;
    const double C92185 = C92051 * C92174;
    const double C92196 = C92084 * C92174;
    const double C92259 = C92030 * C92257;
    const double C92262 = C92051 * C92257;
    const double C92265 = C92084 * C92257;
    const double C92275 = C92030 * C92273;
    const double C92278 = C92051 * C92273;
    const double C92284 = C92084 * C92273;
    const double C92296 = C92030 * C92294;
    const double C92299 = C92051 * C92294;
    const double C92302 = C92084 * C92294;
    const double C93611 = C93610 / C93608;
    const double C93623 = C93622 / C93608;
    const double C93637 = C93636 / C93608;
    const double C91719 = C91713 * ae;
    const double C93584 = -C93583;
    const double C93679 = -C93678;
    const double C93705 = -C93704;
    const double C91853 = C91850 * ae;
    const double C91919 = C91916 * ae;
    const double C92015 = C92011 * C92013;
    const double C121 = (2 * ae * C92013 * C92011 * C92012 * ae +
                         C92012 *
                             (C92011 * C92013 + std::pow(C92012, 2) * bs[3] *
                                                    std::pow(-C92010, 3)) *
                             std::pow(ae, 2)) /
                        C91701;
    const double C195 =
        (C92013 * C92011 * C92012 * (yP - yQ) * C92019) / C91701;
    const double C282 =
        (C92013 * C92011 * C92012 * (zP - zQ) * C92019) / C91701;
    const double C362 = (C92013 * C92011 * C92127 * C92012 * C92019) / C91701;
    const double C419 =
        ((std::pow(C92127, 2) * C92011 * C92013 - (bs[1] * C92008) / C92007) *
         C92019) /
        C91701;
    const double C501 = (C92013 * C92011 * C92127 * C92170 * C92019) / C91701;
    const double C579 = (C92013 * C92011 * C92170 * C92012 * C92019) / C91701;
    const double C635 = (C92013 * C92011 * C92170 * C92127 * C92019) / C91701;
    const double C714 =
        ((std::pow(C92170, 2) * C92011 * C92013 - (bs[1] * C92008) / C92007) *
         C92019) /
        C91701;
    const double C115 = (C92012 * C92013 * C92011 * C92020) / C91696 -
                        (ae * bs[1] * C92008) / (C92007 * C91696);
    const double C190 = (C92012 * C92013 * C92011 * C92130) / C91696;
    const double C277 = (C92012 * C92013 * C92011 * C92173) / C91696;
    const double C815 = (C92127 * C92013 * C92011 * C92020) / C91696;
    const double C889 = (C92127 * C92013 * C92011 * C92130) / C91696 -
                        (ae * bs[1] * C92008) / (C92007 * C91696);
    const double C955 = (C92127 * C92013 * C92011 * C92173) / C91696;
    const double C1396 = (C92170 * C92013 * C92011 * C92020) / C91696;
    const double C1470 = (C92170 * C92013 * C92011 * C92130) / C91696;
    const double C1536 = (C92170 * C92013 * C92011 * C92173) / C91696 -
                         (ae * bs[1] * C92008) / (C92007 * C91696);
    const double C92021 = std::pow(C92018, 3);
    const double C92052 = std::pow(C92018, 5);
    const double C92037 = C92031 * C92033;
    const double C92036 = C92032 * C92031;
    const double C92050 = C92030 * C92031;
    const double C92138 = C92031 * C92136;
    const double C92181 = C92031 * C92179;
    const double C92238 = C92237 * C92031;
    const double C92312 = C92311 * C92031;
    const double C92097 = C92085 * C92092;
    const double C92096 = C92091 * C92085;
    const double C92158 = C92085 * C92154;
    const double C92201 = C92085 * C92197;
    const double C92248 = C92247 * C92085;
    const double C92322 = C92321 * C92085;
    const double C92137 = C92031 * C92135;
    const double C92156 = C92085 * C92153;
    const double C92218 = C92031 * C92217;
    const double C92227 = C92085 * C92226;
    const double C92180 = C92031 * C92178;
    const double C92199 = C92085 * C92196;
    const double C92260 = C92031 * C92259;
    const double C92266 = C92085 * C92265;
    const double C92276 = C92031 * C92275;
    const double C92285 = C92085 * C92284;
    const double C92297 = C92031 * C92296;
    const double C92303 = C92085 * C92302;
    const double C93612 = -C93611;
    const double C93624 = -C93623;
    const double C93638 = -C93637;
    const double C91723 = C91719 / C91696;
    const double C93585 = std::exp(C93584);
    const double C93680 = std::exp(C93679);
    const double C93706 = std::exp(C93705);
    const double C91854 = C91853 / C91696;
    const double C91920 = C91919 / C91696;
    const double C92023 = C92015 * ae;
    const double C110 = C92015 * C92016 - (bs[1] * C92008) / C92007;
    const double C806 = C92127 * C92012 * C92015;
    const double C808 = C92015 * C92235 - (bs[1] * C92008) / C92007;
    const double C1387 = C92170 * C92012 * C92015;
    const double C1389 = C92015 * C92309 - (bs[1] * C92008) / C92007;
    const double C3409 = C92170 * C92127 * C92015;
    const double C92024 = C92021 * C92022;
    const double C92029 = C92017 * C92021;
    const double C92133 = C92021 * C92132;
    const double C92176 = C92021 * C92175;
    const double C196 = (ae * C92013 * C92011 * C92127 * ae +
                         C92012 * C92021 * C92017 * C92012 * C92127 * C92019) /
                        C91701;
    const double C283 = (ae * C92013 * C92011 * C92170 * ae +
                         C92012 * C92021 * C92017 * C92012 * C92170 * C92019) /
                        C91701;
    const double C363 = (ae * C92013 * C92011 * C92130 +
                         C92012 * C92021 * C92017 * C92127 * C92012 * C92019) /
                        C91701;
    const double C420 =
        (C92012 * (C92015 + std::pow(C92127, 2) * C92017 * C92021) * C92019) /
        C91701;
    const double C502 =
        (C92012 * C92021 * C92017 * C92127 * C92170 * C92019) / C91701;
    const double C503 =
        (C92021 * C92017 * C92257 + C92031 * C92030 * C92257 * C92016) / C91701;
    const double C580 = (ae * C92013 * C92011 * C92173 +
                         C92012 * C92021 * C92017 * C92170 * C92012 * C92019) /
                        C91701;
    const double C636 =
        (C92012 * C92021 * C92017 * C92170 * C92127 * C92019) / C91701;
    const double C637 =
        (C92021 * C92017 * C92294 + C92031 * C92030 * C92294 * C92016) / C91701;
    const double C715 =
        (C92012 * (C92015 + std::pow(C92170, 2) * C92017 * C92021) * C92019) /
        C91701;
    const double C823 =
        (C92127 * (C92015 + C92016 * C92017 * C92021) * C92019) / C91701;
    const double C897 =
        (ae * C92013 * C92011 * C92020 + C92127 * C92021 * C92017 * C92131) /
        C91701;
    const double C963 = (C92127 * C92021 * C92017 * C92174) / C91701;
    const double C1021 =
        (ae * C92013 * C92011 * C92020 + C92127 * C92021 * C92017 * C92215) /
        C91701;
    const double C1079 =
        (2 * ae * C92013 * C92011 * C92130 +
         C92127 * (C92015 + C92235 * C92017 * C92021) * C92019) /
        C91701;
    const double C1145 =
        (ae * C92013 * C92011 * C92173 + C92127 * C92021 * C92017 * C92257) /
        C91701;
    const double C1203 = (C92127 * C92021 * C92017 * C92273) / C91701;
    const double C1261 =
        (ae * C92013 * C92011 * C92173 + C92127 * C92021 * C92017 * C92294) /
        C91701;
    const double C1319 =
        (C92127 * (C92015 + C92309 * C92017 * C92021) * C92019) / C91701;
    const double C1404 =
        (C92170 * (C92015 + C92016 * C92017 * C92021) * C92019) / C91701;
    const double C1478 = (C92170 * C92021 * C92017 * C92131) / C91701;
    const double C1544 =
        (ae * C92013 * C92011 * C92020 + C92170 * C92021 * C92017 * C92174) /
        C91701;
    const double C1602 = (C92170 * C92021 * C92017 * C92215) / C91701;
    const double C1660 =
        (C92170 * (C92015 + C92235 * C92017 * C92021) * C92019) / C91701;
    const double C1726 =
        (ae * C92013 * C92011 * C92130 + C92170 * C92021 * C92017 * C92257) /
        C91701;
    const double C1784 =
        (ae * C92013 * C92011 * C92020 + C92170 * C92021 * C92017 * C92273) /
        C91701;
    const double C1842 =
        (ae * C92013 * C92011 * C92130 + C92170 * C92021 * C92017 * C92294) /
        C91701;
    const double C1900 =
        (2 * ae * C92013 * C92011 * C92173 +
         C92170 * (C92015 + C92309 * C92017 * C92021) * C92019) /
        C91701;
    const double C92061 = C92052 * C92056;
    const double C92060 = C92055 * C92052;
    const double C92083 = C92051 * C92052;
    const double C92145 = C92052 * C92143;
    const double C92144 = C92052 * C92142;
    const double C92188 = C92052 * C92186;
    const double C92187 = C92052 * C92185;
    const double C92221 = C92052 * C92220;
    const double C92243 = C92242 * C92052;
    const double C92263 = C92052 * C92262;
    const double C92279 = C92052 * C92278;
    const double C92300 = C92052 * C92299;
    const double C92317 = C92316 * C92052;
    const double C92040 = C92012 * C92037;
    const double C92049 = ae * C92037;
    const double C92688 = C92127 * C92037;
    const double C93148 = C92170 * C92037;
    const double C92059 = C92050 * C92016;
    const double C92058 = C92012 * C92050;
    const double C92057 = C92050 * ae;
    const double C92838 = C92050 * C92235;
    const double C92837 = C92127 * C92050;
    const double C93186 = C92050 * C92309;
    const double C93185 = C92170 * C92050;
    const double C92141 = ae * C92138;
    const double C92140 = C92012 * C92138;
    const double C92633 = C92127 * C92138;
    const double C93161 = C92170 * C92138;
    const double C92184 = ae * C92181;
    const double C92183 = C92012 * C92181;
    const double C92707 = C92127 * C92181;
    const double C92785 = C92170 * C92181;
    const double C92101 = C92012 * C92097;
    const double C92969 = C92097 * C92235;
    const double C93246 = C92127 * C92097;
    const double C93296 = C92097 * C92309;
    const double C92161 = C92158 * C92016;
    const double C92857 = C92012 * C92158;
    const double C92991 = C92127 * C92158;
    const double C93255 = C92158 * C92309;
    const double C92204 = C92201 * C92016;
    const double C92883 = C92012 * C92201;
    const double C93022 = C92201 * C92235;
    const double C93269 = C92127 * C92201;
    const double C93327 = C92170 * C92201;
    const double C1479 = (C92021 * C92017 * C92131 + C92137 * C92309) / C91701;
    const double C92160 = C92012 * C92156;
    const double C92967 = C92127 * C92156;
    const double C93290 = C92156 * C92309;
    const double C1603 = (C92021 * C92017 * C92215 + C92218 * C92309) / C91701;
    const double C92228 = C92012 * C92227;
    const double C92981 = C92127 * C92227;
    const double C93048 = C92227 * C92309;
    const double C93077 = C92170 * C92227;
    const double C964 = (C92021 * C92017 * C92174 + C92180 * C92235) / C91701;
    const double C92203 = C92012 * C92199;
    const double C92977 = C92199 * C92235;
    const double C93245 = C92127 * C92199;
    const double C93294 = C92170 * C92199;
    const double C504 =
        (2 * C92012 * C92260 +
         C92012 * (C92260 + C92052 * C92051 * C92257 * C92016)) /
        C91701;
    const double C92267 = C92266 * C92016;
    const double C92882 = C92012 * C92266;
    const double C93021 = C92127 * C92266;
    const double C93061 = C92170 * C92266;
    const double C1204 = (C92021 * C92017 * C92273 + C92276 * C92235) / C91701;
    const double C92286 = C92012 * C92285;
    const double C93033 = C92285 * C92235;
    const double C93259 = C92127 * C92285;
    const double C93311 = C92170 * C92285;
    const double C638 =
        (2 * C92012 * C92297 +
         C92012 * (C92297 + C92052 * C92051 * C92294 * C92016)) /
        C91701;
    const double C92304 = C92303 * C92016;
    const double C92894 = C92012 * C92303;
    const double C93037 = C92127 * C92303;
    const double C93317 = C92170 * C92303;
    const double C93613 = std::exp(C93612);
    const double C93625 = std::exp(C93624);
    const double C93639 = std::exp(C93638);
    const double C91725 = C91723 - C91714;
    const double C20734 = C93585 * C815;
    const double C25300 = C93585 * C1396;
    const double C91712 = C91705 * C93585;
    const double C93586 = C93585 * C93580;
    const double C93590 = C93589 * C93585;
    const double C93817 = C93585 / C91702;
    const double C93816 = C93585 * C93581;
    const double C4077 = C93827 * C93585;
    const double C203 = C93680 * C190;
    const double C11088 = C93680 * C1470;
    const double C91786 = C91785 * C93680;
    const double C188 = -(2 * C91699 * (yA - yB) * C93680) / C91696;
    const double C418 =
        -((C93680 - (C91760 * 2 * C91699 * C91760 * C93680) / C91696) *
          C91706) /
        C91696;
    const double C4178 =
        ((C93680 - (C91760 * 2 * C91699 * C91760 * C93680) / C91696) * ae) /
            C91696 -
        (0 * be) / C91711;
    const double C4179 =
        (0 * ae) / C91696 - (C91699 * C91760 * C93680) / C91701;
    const double C93691 = C93680 * C93689;
    const double C93694 = C93589 * C93680;
    const double C93831 = C93680 * C93690;
    const double C93830 = C93680 / C91702;
    const double C14741 = C93827 * C93680;
    const double C290 = C93706 * C277;
    const double C5104 = C93706 * C955;
    const double C91798 = C91797 * C93706;
    const double C275 = -(2 * C91699 * (zA - zB) * C93706) / C91696;
    const double C713 =
        -((C93706 - (C91763 * 2 * C91699 * C91763 * C93706) / C91696) *
          C91706) /
        C91696;
    const double C9644 =
        ((C93706 - (C91763 * 2 * C91699 * C91763 * C93706) / C91696) * ae) /
            C91696 -
        (0 * be) / C91711;
    const double C9645 =
        (0 * ae) / C91696 - (C91699 * C91763 * C93706) / C91701;
    const double C93715 = C93706 * C93713;
    const double C93718 = C93589 * C93706;
    const double C93836 = C93706 * C93714;
    const double C93835 = C93706 / C91702;
    const double C28721 = C93827 * C93706;
    const double C91855 = C91854 - C91847;
    const double C91921 = C91920 - C91913;
    const double C92025 = C92012 * C92024;
    const double C898 = (C92021 * C92017 * C92131 + ae * C92127 * C92024 +
                         C92127 * (ae * C92024 + C92127 * C92137)) /
                        C91701;
    const double C1022 = (C92021 * C92017 * C92215 + ae * C92127 * C92024 +
                          C92127 * (ae * C92024 + C92127 * C92218)) /
                         C91701;
    const double C1545 = (C92021 * C92017 * C92174 + ae * C92170 * C92024 +
                          C92170 * (ae * C92024 + C92170 * C92180)) /
                         C91701;
    const double C1785 = (C92021 * C92017 * C92273 + ae * C92170 * C92024 +
                          C92170 * (ae * C92024 + C92170 * C92276)) /
                         C91701;
    const double C3495 = (C92170 * (ae * C92024 + C92127 * C92137)) / C91701;
    const double C3569 =
        (ae * C92127 * C92024 + C92170 * C92127 * C92180) / C91701;
    const double C3639 =
        (ae * C92170 * C92024 + C92127 * C92170 * C92218) / C91701;
    const double C3853 =
        (ae * C92127 * C92024 + C92170 * C92127 * C92276) / C91701;
    const double C816 = (C92013 * C92011 * C92020 + C92024 * C92235) / C91696;
    const double C1397 = (C92013 * C92011 * C92020 + C92024 * C92309) / C91696;
    const double C3413 = (C92170 * C92127 * C92024) / C91696;
    const double C4900 =
        (2 * C92127 * C92024 + C92127 * (C92024 + C92037 * C92235)) / C91696;
    const double C8523 = (C92170 * (C92024 + C92037 * C92235)) / C91696;
    const double C10967 =
        (2 * C92170 * C92024 + C92170 * (C92024 + C92037 * C92309)) / C91696;
    const double C92035 = C92012 * C92029;
    const double C92034 = C92029 * ae;
    const double C92039 = C92029 + C92036;
    const double C92239 = C92029 + C92238;
    const double C92313 = C92029 + C92312;
    const double C92634 = C92127 * C92029;
    const double C92786 = C92170 * C92029;
    const double C421 =
        ((C92015 + C92235 * C92017 * C92021) * C92019 +
         (C92029 + C92235 * C92030 * C92031) * C92019 * C92016) /
        C91701;
    const double C716 =
        ((C92015 + C92309 * C92017 * C92021) * C92019 +
         (C92029 + C92309 * C92030 * C92031) * C92019 * C92016) /
        C91701;
    const double C111 =
        2 * C92012 * C92015 + C92012 * (C92015 + C92029 * C92016);
    const double C805 = C92127 * (C92015 + C92029 * C92016);
    const double C1386 = C92170 * (C92015 + C92029 * C92016);
    const double C4897 =
        2 * C92127 * C92015 + C92127 * (C92015 + C92029 * C92235);
    const double C8520 = C92170 * (C92015 + C92029 * C92235);
    const double C10964 =
        2 * C92170 * C92015 + C92170 * (C92015 + C92029 * C92309);
    const double C92382 = C92127 * C92133;
    const double C197 =
        (C92021 * C92017 * C92131 + ae * C92012 * C92133 +
         C92012 * (ae * C92133 + C92012 * C92031 * C92030 * C92131)) /
        C91701;
    const double C198 =
        (2 * (ae * C92133 + C92012 * C92137) + ae * (C92133 + C92138 * C92016) +
         C92012 *
             (C92137 + ae * C92012 * C92138 +
              C92012 * (ae * C92138 + C92012 * C92052 * C92051 * C92131))) /
        C91701;
    const double C364 =
        (C92021 * C92017 * C92215 + ae * C92012 * C92133 +
         C92012 * (ae * C92133 + C92012 * C92031 * C92030 * C92215)) /
        C91701;
    const double C1477 = (C92170 * (ae * C92133 + C92012 * C92137)) / C91701;
    const double C1601 = (C92170 * (ae * C92133 + C92012 * C92218)) / C91701;
    const double C1725 =
        (ae * C92012 * C92133 + C92170 * C92012 * C92260) / C91701;
    const double C1727 = (C92021 * C92017 * C92257 + ae * C92170 * C92133 +
                          C92170 * (ae * C92133 + C92170 * C92260)) /
                         C91701;
    const double C1841 =
        (ae * C92012 * C92133 + C92170 * C92012 * C92297) / C91701;
    const double C1843 = (C92021 * C92017 * C92294 + ae * C92170 * C92133 +
                          C92170 * (ae * C92133 + C92170 * C92297)) /
                         C91701;
    const double C191 = (C92013 * C92011 * C92130 + C92133 * C92016) / C91696;
    const double C192 =
        (2 * C92012 * C92133 + C92012 * (C92133 + C92138 * C92016)) / C91696;
    const double C887 = (C92127 * (C92133 + C92138 * C92016) +
                         (C92015 + C92029 * C92016) * ae) /
                        C91696;
    const double C888 =
        (C92127 * C92012 * C92133 + C92012 * C92015 * ae) / C91696;
    const double C1468 = (C92170 * (C92133 + C92138 * C92016)) / C91696;
    const double C1469 = (C92170 * C92012 * C92133) / C91696;
    const double C1471 = (C92013 * C92011 * C92130 + C92133 * C92309) / C91696;
    const double C11080 =
        (2 * C92170 * C92133 + C92170 * (C92133 + C92138 * C92309)) / C91696;
    const double C92516 = C92170 * C92176;
    const double C284 =
        (C92021 * C92017 * C92174 + ae * C92012 * C92176 +
         C92012 * (ae * C92176 + C92012 * C92031 * C92030 * C92174)) /
        C91701;
    const double C285 =
        (2 * (ae * C92176 + C92012 * C92180) + ae * (C92176 + C92181 * C92016) +
         C92012 *
             (C92180 + ae * C92012 * C92181 +
              C92012 * (ae * C92181 + C92012 * C92052 * C92051 * C92174))) /
        C91701;
    const double C581 =
        (C92021 * C92017 * C92273 + ae * C92012 * C92176 +
         C92012 * (ae * C92176 + C92012 * C92031 * C92030 * C92273)) /
        C91701;
    const double C962 = (C92127 * (ae * C92176 + C92012 * C92180)) / C91701;
    const double C1144 =
        (ae * C92012 * C92176 + C92127 * C92012 * C92260) / C91701;
    const double C1146 = (C92021 * C92017 * C92257 + ae * C92127 * C92176 +
                          C92127 * (ae * C92176 + C92127 * C92260)) /
                         C91701;
    const double C1202 = (C92127 * (ae * C92176 + C92012 * C92276)) / C91701;
    const double C1260 =
        (ae * C92012 * C92176 + C92127 * C92012 * C92297) / C91701;
    const double C1262 = (C92021 * C92017 * C92294 + ae * C92127 * C92176 +
                          C92127 * (ae * C92176 + C92127 * C92297)) /
                         C91701;
    const double C278 = (C92013 * C92011 * C92173 + C92176 * C92016) / C91696;
    const double C279 =
        (2 * C92012 * C92176 + C92012 * (C92176 + C92181 * C92016)) / C91696;
    const double C953 = (C92127 * (C92176 + C92181 * C92016)) / C91696;
    const double C954 = (C92127 * C92012 * C92176) / C91696;
    const double C956 = (C92013 * C92011 * C92173 + C92176 * C92235) / C91696;
    const double C1534 = (C92170 * (C92176 + C92181 * C92016) +
                          (C92015 + C92029 * C92016) * ae) /
                         C91696;
    const double C1535 =
        (C92170 * C92012 * C92176 + C92012 * C92015 * ae) / C91696;
    const double C3565 =
        (C92170 * C92127 * C92176 + C92127 * C92015 * ae) / C91696;
    const double C5096 =
        (2 * C92127 * C92176 + C92127 * (C92176 + C92181 * C92235)) / C91696;
    const double C8749 = (C92170 * (C92176 + C92181 * C92235) +
                          (C92015 + C92029 * C92235) * ae) /
                         C91696;
    const double C205 = C93680 * C196;
    const double C292 = C93706 * C283;
    const double C429 = C93680 * C420;
    const double C510 = C93706 * C502;
    const double C513 = C93706 * C503;
    const double C644 = C93680 * C636;
    const double C647 = C93680 * C637;
    const double C724 = C93706 * C715;
    const double C20537 = C93585 * C823;
    const double C5106 = C93706 * C963;
    const double C20736 = C93585 * C1021;
    const double C5419 = C93706 * C1145;
    const double C20923 = C93585 * C1203;
    const double C5680 = C93706 * C1319;
    const double C25009 = C93585 * C1404;
    const double C11090 = C93680 * C1478;
    const double C25302 = C93585 * C1602;
    const double C11394 = C93680 * C1660;
    const double C25597 = C93585 * C1784;
    const double C11672 = C93680 * C1842;
    const double C92065 = C92012 * C92061;
    const double C92082 = ae * C92061;
    const double C92532 = C92127 * C92061;
    const double C92553 = C92170 * C92061;
    const double C92818 = C92061 * C92235;
    const double C93150 = C92061 * C92309;
    const double C92064 = C92050 + C92060;
    const double C92095 = C92083 * C92016;
    const double C92094 = C92012 * C92083;
    const double C92093 = C92083 * ae;
    const double C92100 = C92083 + C92096;
    const double C92249 = C92083 + C92248;
    const double C92323 = C92083 + C92322;
    const double C92993 = C92083 * C92235;
    const double C92992 = C92127 * C92083;
    const double C93254 = C92083 * C92309;
    const double C93328 = C92170 * C92083;
    const double C92147 = C92145 * C92016;
    const double C92152 = ae * C92145;
    const double C92151 = C92012 * C92145;
    const double C92836 = C92127 * C92145;
    const double C93060 = C92170 * C92145;
    const double C93162 = C92145 * C92309;
    const double C92146 = C92012 * C92144;
    const double C92817 = C92127 * C92144;
    const double C11083 =
        (2 * C92170 * C92137 + C92170 * (C92137 + C92144 * C92309)) / C91701;
    const double C30305 =
        (3 * (C92137 + C92144 * C92309) +
         C92170 * (2 * C92170 * C92144 + C92170 * (C92144 + C92156 * C92309))) /
        C91701;
    const double C92190 = C92188 * C92016;
    const double C92195 = ae * C92188;
    const double C92194 = C92012 * C92188;
    const double C92878 = C92188 * C92235;
    const double C93020 = C92127 * C92188;
    const double C93092 = C92170 * C92188;
    const double C92189 = C92012 * C92187;
    const double C93105 = C92127 * C92187;
    const double C93149 = C92170 * C92187;
    const double C5099 =
        (2 * C92127 * C92180 + C92127 * (C92180 + C92187 * C92235)) / C91701;
    const double C8752 = (ae * (C92024 + C92037 * C92235) +
                          C92170 * (C92180 + C92187 * C92235)) /
                         C91701;
    const double C15746 =
        (3 * (C92180 + C92187 * C92235) +
         C92127 * (2 * C92127 * C92187 + C92127 * (C92187 + C92199 * C92235))) /
        C91701;
    const double C92222 = C92012 * C92221;
    const double C92827 = C92127 * C92221;
    const double C92937 = C92170 * C92221;
    const double C6030 = (ae * (C92024 + C92037 * C92309) +
                          C92127 * (C92218 + C92221 * C92309)) /
                         C91701;
    const double C11276 =
        (2 * C92170 * C92218 + C92170 * (C92218 + C92221 * C92309)) / C91701;
    const double C92244 = C92050 + C92243;
    const double C92665 = C92012 * C92263;
    const double C92877 = C92127 * C92263;
    const double C92953 = C92170 * C92263;
    const double C505 =
        (3 * (C92260 + C92263 * C92016) +
         C92012 * (2 * C92012 * C92263 +
                   C92012 * (C92263 + C92085 * C92084 * C92257 * C92016))) /
        C91701;
    const double C1143 = (ae * (C92176 + C92181 * C92016) +
                          C92127 * (C92260 + C92263 * C92016)) /
                         C91701;
    const double C1724 = (ae * (C92133 + C92138 * C92016) +
                          C92170 * (C92260 + C92263 * C92016)) /
                         C91701;
    const double C92280 = C92012 * C92279;
    const double C93118 = C92127 * C92279;
    const double C93169 = C92170 * C92279;
    const double C5503 =
        (2 * C92127 * C92276 + C92127 * (C92276 + C92279 * C92235)) / C91701;
    const double C9195 = (ae * (C92024 + C92037 * C92235) +
                          C92170 * (C92276 + C92279 * C92235)) /
                         C91701;
    const double C16133 =
        (3 * (C92276 + C92279 * C92235) +
         C92127 * (2 * C92127 * C92279 + C92127 * (C92279 + C92285 * C92235))) /
        C91701;
    const double C92672 = C92012 * C92300;
    const double C92891 = C92127 * C92300;
    const double C93175 = C92170 * C92300;
    const double C639 =
        (3 * (C92297 + C92300 * C92016) +
         C92012 * (2 * C92012 * C92300 +
                   C92012 * (C92300 + C92085 * C92084 * C92294 * C92016))) /
        C91701;
    const double C1259 = (ae * (C92176 + C92181 * C92016) +
                          C92127 * (C92297 + C92300 * C92016)) /
                         C91701;
    const double C1840 = (ae * (C92133 + C92138 * C92016) +
                          C92170 * (C92297 + C92300 * C92016)) /
                         C91701;
    const double C92318 = C92050 + C92317;
    const double C92054 = 2 * C92049;
    const double C5019 =
        (2 * (ae * C92024 + C92127 * C92137) + ae * (C92024 + C92037 * C92235) +
         C92127 * (C92137 + ae * C92127 * C92037 +
                   C92127 * (C92049 + C92127 * C92144))) /
        C91701;
    const double C5212 =
        (2 * (ae * C92024 + C92127 * C92218) + ae * (C92024 + C92037 * C92235) +
         C92127 * (C92218 + ae * C92127 * C92037 +
                   C92127 * (C92049 + C92127 * C92221))) /
        C91701;
    const double C5873 =
        (ae * C92024 + C92127 * C92137 + (C92049 + C92127 * C92144) * C92309) /
        C91701;
    const double C11199 =
        (2 * (ae * C92024 + C92170 * C92180) + ae * (C92024 + C92037 * C92309) +
         C92170 * (C92180 + ae * C92170 * C92037 +
                   C92170 * (C92049 + C92170 * C92187))) /
        C91701;
    const double C11572 =
        (2 * (ae * C92024 + C92170 * C92276) + ae * (C92024 + C92037 * C92309) +
         C92170 * (C92276 + ae * C92170 * C92037 +
                   C92170 * (C92049 + C92170 * C92279))) /
        C91701;
    const double C5953 = (C92127 * C92180 + ae * C92170 * C92688 +
                          C92170 * (ae * C92688 + C92170 * C92127 * C92187)) /
                         C91701;
    const double C6273 = (C92127 * C92276 + ae * C92170 * C92688 +
                          C92170 * (ae * C92688 + C92170 * C92127 * C92279)) /
                         C91701;
    const double C8648 = (C92170 * (C92137 + ae * C92688 +
                                    C92127 * (C92049 + C92127 * C92144))) /
                         C91701;
    const double C8865 =
        (C92170 * C92218 + ae * C92170 * C92688 +
         C92127 * (ae * C92170 * C92037 + C92127 * C92170 * C92221)) /
        C91701;
    const double C5778 = (C92127 * C92024 + C92688 * C92309) / C91696;
    const double C92063 = C92029 + C92059;
    const double C92062 = C92058 * ae;
    const double C92088 = 2 * C92058;
    const double C92645 = C92127 * C92058;
    const double C92796 = C92170 * C92058;
    const double C92842 = C92029 + C92838;
    const double C92841 = C92837 * ae;
    const double C92994 = 2 * C92837;
    const double C93125 = C92170 * C92837;
    const double C93190 = C92029 + C93186;
    const double C93189 = C93185 * ae;
    const double C93330 = 2 * C93185;
    const double C92833 = 2 * C92141;
    const double C11495 =
        (2 * (ae * C92133 + C92170 * C92260) + ae * (C92133 + C92138 * C92309) +
         C92170 * (C92260 + ae * C92170 * C92138 +
                   C92170 * (C92141 + C92170 * C92263))) /
        C91701;
    const double C11667 =
        (2 * (ae * C92133 + C92170 * C92297) + ae * (C92133 + C92138 * C92309) +
         C92170 * (C92297 + ae * C92170 * C92138 +
                   C92170 * (C92141 + C92170 * C92300))) /
        C91701;
    const double C92386 = C92127 * C92140;
    const double C365 =
        (2 * (ae * C92133 + C92012 * C92218) + ae * (C92133 + C92138 * C92016) +
         C92012 * (C92218 + ae * C92140 +
                   C92012 * (C92141 + C92012 * C92052 * C92051 * C92215))) /
        C91701;
    const double C1728 = (C92012 * C92260 + ae * C92170 * C92140 +
                          C92170 * (ae * C92140 + C92170 * C92012 * C92263)) /
                         C91701;
    const double C1844 = (C92012 * C92297 + ae * C92170 * C92140 +
                          C92170 * (ae * C92140 + C92170 * C92012 * C92300)) /
                         C91701;
    const double C1472 = (C92012 * C92133 + C92140 * C92309) / C91696;
    const double C93181 = 2 * C92184;
    const double C5414 =
        (2 * (ae * C92176 + C92127 * C92260) + ae * (C92176 + C92181 * C92235) +
         C92127 * (C92260 + ae * C92127 * C92181 +
                   C92127 * (C92184 + C92127 * C92263))) /
        C91701;
    const double C5598 =
        (2 * (ae * C92176 + C92127 * C92297) + ae * (C92176 + C92181 * C92235) +
         C92127 * (C92297 + ae * C92127 * C92181 +
                   C92127 * (C92184 + C92127 * C92300))) /
        C91701;
    const double C92520 = C92170 * C92183;
    const double C582 =
        (2 * (ae * C92176 + C92012 * C92276) + ae * (C92176 + C92181 * C92016) +
         C92012 * (C92276 + ae * C92183 +
                   C92012 * (C92184 + C92012 * C92052 * C92051 * C92273))) /
        C91701;
    const double C1147 = (C92012 * C92260 + ae * C92127 * C92183 +
                          C92127 * (ae * C92183 + C92127 * C92012 * C92263)) /
                         C91701;
    const double C1263 = (C92012 * C92297 + ae * C92127 * C92183 +
                          C92127 * (ae * C92183 + C92127 * C92012 * C92300)) /
                         C91701;
    const double C957 = (C92012 * C92176 + C92183 * C92235) / C91696;
    const double C92708 = C92170 * C92707;
    const double C92971 = C92061 + C92969;
    const double C93248 = C93246 * C92309;
    const double C93298 = C92061 + C93296;
    const double C92163 = C92145 + C92161;
    const double C92861 = C92127 * C92857;
    const double C93166 = C92857 * C92309;
    const double C93257 = C92145 + C93255;
    const double C92206 = C92188 + C92204;
    const double C92885 = C92883 * C92235;
    const double C93202 = C92170 * C92883;
    const double C93231 = C92127 * C92883;
    const double C93026 = C92188 + C93022;
    const double C93273 = C92170 * C93269;
    const double C11104 = C93680 * C1479;
    const double C93291 = C92144 + C93290;
    const double C25316 = C93585 * C1603;
    const double C93049 = C92221 + C93048;
    const double C93078 = C92127 * C93077;
    const double C5120 = C93706 * C964;
    const double C92978 = C92187 + C92977;
    const double C93247 = C92170 * C93245;
    const double C516 = C93706 * C504;
    const double C92268 = C92263 + C92267;
    const double C92884 = C92127 * C92882;
    const double C92956 = C92170 * C92882;
    const double C20926 = C93585 * C1204;
    const double C93034 = C92279 + C93033;
    const double C93260 = C92170 * C93259;
    const double C650 = C93680 * C638;
    const double C92305 = C92300 + C92304;
    const double C92895 = C92127 * C92894;
    const double C93178 = C92170 * C92894;
    const double C93844 = C93613 * C93822;
    const double C97 =
        (C93613 * std::pow(C93822, 2)) / C93823 + C93613 / C93824;
    const double C99 = C93845 * C93613;
    const double C1982 = C93843 * C93613;
    const double C93846 = C93625 * C93825;
    const double C800 =
        (C93625 * std::pow(C93825, 2)) / C93823 + C93625 / C93824;
    const double C802 = C93845 * C93625;
    const double C1980 = C93843 * C93625;
    const double C93847 = C93639 * C93826;
    const double C1382 =
        (C93639 * std::pow(C93826, 2)) / C93823 + C93639 / C93824;
    const double C1384 = C93845 * C93639;
    const double C2696 = C93843 * C93639;
    const double C91718 = C91712 / C91701;
    const double C91716 = 2 * C91712;
    const double C91715 = -4 * C91712;
    const double C93819 = C93586 / C91711;
    const double C93818 = C93586 * C93581;
    const double C93815 = C93586 / C91696;
    const double C93593 = C93590 * C93581;
    const double C92 = C93590 / C93821;
    const double C42378 = C93590 / C91702;
    const double C4075 = (C93585 * std::pow(C93581, 2)) / C91701 + C93817;
    const double C93840 = C93816 / C91696;
    const double C4076 = (-2 * C93589 * C93816) / C91696;
    const double C91814 = 2 * C91786;
    const double C91845 = C91786 / C91701;
    const double C91867 = -4 * C91786;
    const double C4440 =
        (((-4 * C91786) / C91696 -
          (C91760 * (C93680 - (C91760 * 2 * C91786) / C91696) * C91706) /
              C91696) *
         ae) /
        C91696;
    const double C4441 =
        (-((C93680 - (C91760 * 2 * C91786) / C91696) * C91706) / C91696) /
        C91702;
    const double C206 = C188 * C110;
    const double C204 = C188 * C115;
    const double C202 = C188 * C109;
    const double C428 = C188 * C190;
    const double C426 = C188 * C189;
    const double C643 = C188 * C277;
    const double C1088 = C188 * C889;
    const double C1669 = C188 * C1470;
    const double C2069 = C188 * C806;
    const double C2783 = C188 * C1387;
    const double C11105 = C188 * C1389;
    const double C11089 = C188 * C1396;
    const double C11087 = C188 * C1388;
    const double C11671 = C188 * C1536;
    const double C13946 = C188 * C3409;
    const double C430 = C418 * C110;
    const double C427 = C418 * C109;
    const double C2301 = C418 * C806;
    const double C3015 = C418 * C1387;
    const double C11401 = C418 * C1389;
    const double C11393 = C418 * C1388;
    const double C14252 = C418 * C3409;
    const double C4189 = C4178 * C110;
    const double C4185 = C4178 * C115;
    const double C4181 = C4178 * C109;
    const double C4446 = C4178 * C190;
    const double C4443 = C4178 * C189;
    const double C4721 = C4178 * C277;
    const double C5334 = C4178 * C889;
    const double C6116 = C4178 * C1470;
    const double C6662 = C4178 * C806;
    const double C7653 = C4178 * C1387;
    const double C35495 = C4178 * C1389;
    const double C35491 = C4178 * C1396;
    const double C35487 = C4178 * C1388;
    const double C36048 = C4178 * C1536;
    const double C38187 = C4178 * C3409;
    const double C4183 = C4179 * C806;
    const double C4444 = C4179 * C889;
    const double C35489 = C4179 * C3409;
    const double C93833 = C93691 / C91711;
    const double C93832 = C93691 * C93690;
    const double C93828 = C93691 / C91696;
    const double C93697 = C93694 * C93690;
    const double C20047 = C93694 / C93821;
    const double C47572 = C93694 / C91702;
    const double C93848 = C93831 / C91696;
    const double C14740 = (-2 * C93589 * C93831) / C91696;
    const double C14739 = (C93680 * std::pow(C93690, 2)) / C91701 + C93830;
    const double C91884 = 2 * C91798;
    const double C91911 = C91798 / C91701;
    const double C91933 = -4 * C91798;
    const double C10165 =
        (((-4 * C91798) / C91696 -
          (C91763 * (C93706 - (C91763 * 2 * C91798) / C91696) * C91706) /
              C91696) *
         ae) /
        C91696;
    const double C10166 =
        (-((C93706 - (C91763 * 2 * C91798) / C91696) * C91706) / C91696) /
        C91702;
    const double C293 = C275 * C110;
    const double C291 = C275 * C115;
    const double C289 = C275 * C109;
    const double C509 = C275 * C190;
    const double C723 = C275 * C277;
    const double C721 = C275 * C276;
    const double C1328 = C275 * C955;
    const double C1909 = C275 * C1536;
    const double C2155 = C275 * C806;
    const double C2869 = C275 * C1387;
    const double C5121 = C275 * C808;
    const double C5105 = C275 * C815;
    const double C5103 = C275 * C807;
    const double C5418 = C275 * C889;
    const double C8762 = C275 * C3409;
    const double C725 = C713 * C110;
    const double C722 = C713 * C109;
    const double C2615 = C713 * C806;
    const double C3329 = C713 * C1387;
    const double C5685 = C713 * C808;
    const double C5679 = C713 * C807;
    const double C9410 = C713 * C3409;
    const double C9655 = C9644 * C110;
    const double C9651 = C9644 * C115;
    const double C9647 = C9644 * C109;
    const double C9907 = C9644 * C190;
    const double C10171 = C9644 * C277;
    const double C10168 = C9644 * C276;
    const double C10884 = C9644 * C955;
    const double C11765 = C9644 * C1536;
    const double C12092 = C9644 * C806;
    const double C13080 = C9644 * C1387;
    const double C24379 = C9644 * C808;
    const double C24375 = C9644 * C815;
    const double C24371 = C9644 * C807;
    const double C24637 = C9644 * C889;
    const double C27973 = C9644 * C3409;
    const double C9649 = C9645 * C1387;
    const double C10169 = C9645 * C1536;
    const double C24373 = C9645 * C3409;
    const double C93838 = C93715 / C91711;
    const double C93837 = C93715 * C93714;
    const double C93829 = C93715 / C91696;
    const double C93721 = C93718 * C93714;
    const double C39042 = C93718 / C93821;
    const double C70728 = C93718 / C91702;
    const double C93851 = C93836 / C91696;
    const double C28720 = (-2 * C93589 * C93836) / C91696;
    const double C28719 = (C93706 * std::pow(C93714, 2)) / C91701 + C93835;
    const double C92026 = C92025 + C92023;
    const double C20740 = C93585 * C1022;
    const double C25603 = C93585 * C1785;
    const double C13949 = C93680 * C3495;
    const double C35494 = C93694 * C3495;
    const double C54694 = C93694 * C3495;
    const double C8761 = C93706 * C3569;
    const double C24378 = C93718 * C3569;
    const double C65482 = C93718 * C3569;
    const double C23101 = C93585 * C3639;
    const double C23325 = C93585 * C3853;
    const double C5119 = C275 * C816;
    const double C20738 = C93585 * C816;
    const double C24383 = C9644 * C816;
    const double C11103 = C188 * C1397;
    const double C25318 = C93585 * C1397;
    const double C35499 = C4178 * C1397;
    const double C8760 = C275 * C3413;
    const double C13948 = C188 * C3413;
    const double C23103 = C93585 * C3413;
    const double C24377 = C9645 * C3413;
    const double C27969 = C9644 * C3413;
    const double C35493 = C4179 * C3413;
    const double C38191 = C4178 * C3413;
    const double C15761 = C275 * C4900;
    const double C20742 = C93585 * C4900;
    const double C24389 = C9644 * C4900;
    const double C19330 = C275 * C8523;
    const double C23099 = C93585 * C8523;
    const double C24385 = C9645 * C8523;
    const double C27961 = C9644 * C8523;
    const double C38193 = C4179 * C8523;
    const double C30320 = C188 * C10967;
    const double C35505 = C4178 * C10967;
    const double C35694 = C93585 * C10967;
    const double C92038 = C92035 * ae;
    const double C3566 =
        (C92170 * C92127 * C92183 + C92127 * C92035 * ae) / C91696;
    const double C809 = C92012 * C92015 + C92035 * C92235;
    const double C1390 = C92012 * C92015 + C92035 * C92309;
    const double C3410 = C92170 * C92127 * C92035;
    const double C4898 =
        2 * C92127 * C92035 + C92127 * (C92035 + C92058 * C92235);
    const double C8521 = C92170 * (C92035 + C92058 * C92235);
    const double C10965 =
        2 * C92170 * C92035 + C92170 * (C92035 + C92058 * C92309);
    const double C92042 = C92040 + C92034;
    const double C92635 = C92633 + C92034;
    const double C92787 = C92785 + C92034;
    const double C6196 = (ae * (C92176 + C92170 * (C92170 * C92181 + C92034) +
                                C92170 * C92029 * ae) +
                          C92127 * (C92260 + ae * C92170 * C92138 +
                                    C92170 * (C92141 + C92170 * C92263))) /
                         C91701;
    const double C92041 = C92039 * C92019;
    const double C92240 = C92239 * C92019;
    const double C92314 = C92313 * C92019;
    const double C92636 = C92634 * ae;
    const double C5775 = C92127 * C92015 + C92634 * C92309;
    const double C25001 =
        2 * C92170 * C92634 + C92170 * (C92634 + C92837 * C92309);
    const double C92788 = C92786 * ae;
    const double C432 = C93680 * C421;
    const double C727 = C93706 * C716;
    const double C210 = C188 * C111;
    const double C297 = C275 * C111;
    const double C433 = C418 * C111;
    const double C728 = C713 * C111;
    const double C4203 = C4178 * C111;
    const double C9669 = C9644 * C111;
    const double C2065 = C188 * C805;
    const double C2151 = C275 * C805;
    const double C2299 = C418 * C805;
    const double C2613 = C713 * C805;
    const double C4191 = C4179 * C805;
    const double C6654 = C4178 * C805;
    const double C12084 = C9644 * C805;
    const double C2779 = C188 * C1386;
    const double C2865 = C275 * C1386;
    const double C3013 = C418 * C1386;
    const double C3327 = C713 * C1386;
    const double C7645 = C4178 * C1386;
    const double C9657 = C9645 * C1386;
    const double C13072 = C9644 * C1386;
    const double C15763 = C275 * C4897;
    const double C16312 = C713 * C4897;
    const double C24393 = C9644 * C4897;
    const double C19332 = C275 * C8520;
    const double C19987 = C713 * C8520;
    const double C24381 = C9645 * C8520;
    const double C27965 = C9644 * C8520;
    const double C38189 = C4179 * C8520;
    const double C30322 = C188 * C10964;
    const double C30612 = C418 * C10964;
    const double C35509 = C4178 * C10964;
    const double C92383 = C92382 + C92023;
    const double C209 = C93680 * C197;
    const double C213 = C93680 * C198;
    const double C2782 = C93680 * C1477;
    const double C27139 = C93585 * C1601;
    const double C30496 = C93590 * C1601;
    const double C54926 = C93590 * C1601;
    const double C3101 = C93706 * C1725;
    const double C9910 = C93718 * C1725;
    const double C59691 = C93718 * C1725;
    const double C3250 = C93680 * C1841;
    const double C11678 = C93680 * C1843;
    const double C207 = C93680 * C191;
    const double C431 = C188 * C191;
    const double C512 = C275 * C191;
    const double C4452 = C4178 * C191;
    const double C9912 = C9644 * C191;
    const double C211 = C93680 * C192;
    const double C434 = C188 * C192;
    const double C515 = C275 * C192;
    const double C4461 = C4178 * C192;
    const double C9918 = C9644 * C192;
    const double C1086 = C188 * C887;
    const double C2066 = C93680 * C887;
    const double C2383 = C275 * C887;
    const double C4192 = C93694 * C887;
    const double C4455 = C4179 * C887;
    const double C5330 = C4178 * C887;
    const double C12408 = C9644 * C887;
    const double C42493 = C93694 * C887;
    const double C1087 = C188 * C888;
    const double C2070 = C93680 * C888;
    const double C2386 = C275 * C888;
    const double C4184 = C93694 * C888;
    const double C4449 = C4179 * C888;
    const double C5332 = C4178 * C888;
    const double C12412 = C9644 * C888;
    const double C42485 = C93694 * C888;
    const double C1667 = C188 * C1468;
    const double C2780 = C93680 * C1468;
    const double C3097 = C275 * C1468;
    const double C6112 = C4178 * C1468;
    const double C9914 = C9645 * C1468;
    const double C13407 = C9644 * C1468;
    const double C1668 = C188 * C1469;
    const double C2784 = C93680 * C1469;
    const double C3100 = C275 * C1469;
    const double C6114 = C4178 * C1469;
    const double C9909 = C9645 * C1469;
    const double C13411 = C9644 * C1469;
    const double C1670 = C188 * C1471;
    const double C6117 = C4178 * C1471;
    const double C11106 = C93680 * C1471;
    const double C11403 = C188 * C11080;
    const double C30323 = C93680 * C11080;
    const double C35793 = C4178 * C11080;
    const double C92517 = C92516 + C92023;
    const double C296 = C93706 * C284;
    const double C300 = C93706 * C285;
    const double C2154 = C93706 * C962;
    const double C2387 = C93706 * C1144;
    const double C5425 = C93706 * C1146;
    const double C16139 = C93590 * C1202;
    const double C22042 = C93585 * C1202;
    const double C48930 = C93590 * C1202;
    const double C2536 = C93680 * C1260;
    const double C4724 = C93694 * C1260;
    const double C43025 = C93694 * C1260;
    const double C294 = C93706 * C278;
    const double C646 = C188 * C278;
    const double C726 = C275 * C278;
    const double C4726 = C4178 * C278;
    const double C10177 = C9644 * C278;
    const double C298 = C93706 * C279;
    const double C649 = C188 * C279;
    const double C729 = C275 * C279;
    const double C4732 = C4178 * C279;
    const double C10186 = C9644 * C279;
    const double C1326 = C275 * C953;
    const double C2152 = C93706 * C953;
    const double C2532 = C188 * C953;
    const double C4728 = C4179 * C953;
    const double C7325 = C4178 * C953;
    const double C10880 = C9644 * C953;
    const double C1327 = C275 * C954;
    const double C2156 = C93706 * C954;
    const double C2535 = C188 * C954;
    const double C4723 = C4179 * C954;
    const double C7329 = C4178 * C954;
    const double C10882 = C9644 * C954;
    const double C1329 = C275 * C956;
    const double C5122 = C93706 * C956;
    const double C10885 = C9644 * C956;
    const double C1907 = C275 * C1534;
    const double C2866 = C93706 * C1534;
    const double C3246 = C188 * C1534;
    const double C8301 = C4178 * C1534;
    const double C9658 = C93718 * C1534;
    const double C10180 = C9645 * C1534;
    const double C11761 = C9644 * C1534;
    const double C59439 = C93718 * C1534;
    const double C1908 = C275 * C1535;
    const double C2870 = C93706 * C1535;
    const double C3249 = C188 * C1535;
    const double C8305 = C4178 * C1535;
    const double C9650 = C93718 * C1535;
    const double C10174 = C9645 * C1535;
    const double C11763 = C9644 * C1535;
    const double C59431 = C93718 * C1535;
    const double C3998 = C275 * C3565;
    const double C8763 = C93706 * C3565;
    const double C10883 = C9645 * C3565;
    const double C14557 = C188 * C3565;
    const double C14658 = C9644 * C3565;
    const double C24374 = C93718 * C3565;
    const double C36050 = C4179 * C3565;
    const double C38862 = C4178 * C3565;
    const double C65478 = C93718 * C3565;
    const double C5687 = C275 * C5096;
    const double C15764 = C93706 * C5096;
    const double C24905 = C9644 * C5096;
    const double C9412 = C275 * C8749;
    const double C10886 = C9645 * C8749;
    const double C19333 = C93706 * C8749;
    const double C24382 = C93718 * C8749;
    const double C25779 = C9644 * C8749;
    const double C38864 = C4179 * C8749;
    const double C65496 = C93718 * C8749;
    const double C92068 = C92065 + C92057;
    const double C92090 = 2 * C92082;
    const double C92970 = C92082 + C92967;
    const double C92982 = C92082 + C92981;
    const double C93297 = C92082 + C93294;
    const double C93312 = C92082 + C93311;
    const double C92537 = ae * C92532;
    const double C92968 = 2 * C92532;
    const double C93244 = C92170 * C92532;
    const double C16643 =
        (C92218 + C92221 * C92309 + ae * (C92688 + C92532 * C92309) +
         C92127 * (ae * (C92037 + C92061 * C92309) +
                   C92127 * (C92221 + C92227 * C92309))) /
        C91701;
    const double C25003 =
        (2 * C92170 * C92688 + C92170 * (C92688 + C92532 * C92309)) / C91696;
    const double C92558 = ae * C92553;
    const double C93295 = 2 * C92553;
    const double C92820 = C92037 + C92818;
    const double C93152 = C92037 + C93150;
    const double C92067 = C92064 * C92019;
    const double C92099 = C92050 + C92095;
    const double C92098 = C92094 * ae;
    const double C92859 = C92094 * C92235;
    const double C92858 = C92127 * C92094;
    const double C93204 = C92094 * C92309;
    const double C93203 = C92170 * C92094;
    const double C92105 = C92101 + C92093;
    const double C92997 = C92991 + C92093;
    const double C93334 = C93327 + C92093;
    const double C92104 = C92100 * C92019;
    const double C92250 = C92249 * C92019;
    const double C92324 = C92323 * C92019;
    const double C92999 = C92050 + C92993;
    const double C92998 = C92992 * ae;
    const double C93271 = C92992 * C92309;
    const double C93270 = C92170 * C92992;
    const double C93256 = C92050 + C93254;
    const double C93335 = C93328 * ae;
    const double C92149 = C92138 + C92147;
    const double C92162 = C92152 + C92160;
    const double C92229 = C92152 + C92228;
    const double C92987 = 2 * C92152;
    const double C93063 = C92152 + C93061;
    const double C93318 = C92152 + C93317;
    const double C92157 = 2 * C92151;
    const double C92155 = ae * C92151;
    const double C92644 = C92127 * C92151;
    const double C93165 = C92170 * C92151;
    const double C11081 =
        (2 * C92170 * C92140 + C92170 * (C92140 + C92151 * C92309)) / C91696;
    const double C92840 = C92836 + C92057;
    const double C93062 = ae * C93060;
    const double C93306 = 2 * C93060;
    const double C93163 = C92138 + C93162;
    const double C92148 = C92141 + C92146;
    const double C92819 = C92049 + C92817;
    const double C30321 = C93680 * C11083;
    const double C40042 = C93680 * C30305;
    const double C92192 = C92181 + C92190;
    const double C92205 = C92195 + C92203;
    const double C92287 = C92195 + C92286;
    const double C93024 = C92195 + C93021;
    const double C93038 = C92195 + C93037;
    const double C93323 = 2 * C92195;
    const double C92200 = 2 * C92194;
    const double C92198 = ae * C92194;
    const double C92712 = C92127 * C92194;
    const double C92795 = C92170 * C92194;
    const double C5097 =
        (2 * C92127 * C92183 + C92127 * (C92183 + C92194 * C92235)) / C91696;
    const double C8750 = (C92170 * (C92183 + C92194 * C92235) +
                          (C92035 + C92058 * C92235) * ae) /
                         C91696;
    const double C92880 = C92181 + C92878;
    const double C93025 = 2 * C93020;
    const double C93023 = ae * C93020;
    const double C93124 = C92170 * C93020;
    const double C93094 = C93092 + C92057;
    const double C92191 = C92184 + C92189;
    const double C93151 = C92049 + C93149;
    const double C15762 = C93706 * C5099;
    const double C19331 = C93706 * C8752;
    const double C24386 = C93718 * C8752;
    const double C65492 = C93718 * C8752;
    const double C20673 = C93706 * C15746;
    const double C92223 = C92141 + C92222;
    const double C92828 = C92049 + C92827;
    const double C25312 = C93585 * C6030;
    const double C35692 = C93585 * C11276;
    const double C92245 = C92244 * C92019;
    const double C92879 = C92184 + C92877;
    const double C92954 = C92141 + C92953;
    const double C518 = C93706 * C505;
    const double C2384 = C93706 * C1143;
    const double C3098 = C93706 * C1724;
    const double C9915 = C93718 * C1724;
    const double C59696 = C93718 * C1724;
    const double C92281 = C92184 + C92280;
    const double C93170 = C92049 + C93169;
    const double C20929 = C93585 * C5503;
    const double C23322 = C93585 * C9195;
    const double C20931 = C93585 * C16133;
    const double C92892 = C92184 + C92891;
    const double C93176 = C92141 + C93175;
    const double C652 = C93680 * C639;
    const double C2533 = C93680 * C1259;
    const double C4729 = C93694 * C1259;
    const double C43030 = C93694 * C1259;
    const double C3247 = C93680 * C1840;
    const double C92319 = C92318 * C92019;
    const double C20744 = C93585 * C5212;
    const double C33138 = C93680 * C5873;
    const double C35502 = C93694 * C5873;
    const double C54704 = C93694 * C5873;
    const double C35970 = C93585 * C11572;
    const double C27968 = C93718 * C5953;
    const double C34784 = C28721 * C5953;
    const double C69842 = C93718 * C5953;
    const double C25601 = C93585 * C6273;
    const double C25120 = C14741 * C8648;
    const double C38194 = C93694 * C8648;
    const double C58258 = C93694 * C8648;
    const double C23097 = C93585 * C8865;
    const double C25314 = C93585 * C5778;
    const double C27967 = C9645 * C5778;
    const double C33137 = C188 * C5778;
    const double C35501 = C4179 * C5778;
    const double C38199 = C4178 * C5778;
    const double C92066 = C92063 * ae;
    const double C112 = 3 * (C92015 + C92029 * C92016) +
                        C92012 * (2 * C92035 + C92012 * C92063);
    const double C804 = C92127 * (2 * C92035 + C92012 * C92063);
    const double C810 = C92015 + C92029 * C92016 + C92063 * C92235;
    const double C1385 = C92170 * (2 * C92035 + C92012 * C92063);
    const double C1391 = C92015 + C92029 * C92016 + C92063 * C92309;
    const double C3411 = C92170 * C92127 * C92063;
    const double C92647 = C92645 * ae;
    const double C5776 = C92127 * C92035 + C92645 * C92309;
    const double C92798 = C92796 * ae;
    const double C92844 = C92842 * ae;
    const double C15550 = 3 * (C92015 + C92029 * C92235) +
                          C92127 * (2 * C92634 + C92127 * C92842);
    const double C16395 = C92015 + C92029 * C92235 + C92842 * C92309;
    const double C19095 = C92170 * (2 * C92634 + C92127 * C92842);
    const double C16807 =
        (C92260 + ae * C92170 * C92138 + C92170 * (C92141 + C92170 * C92263) +
         ae * (C92707 + C92170 * (C92170 * C92127 * C92188 + C92841) +
               C92170 * C92837 * ae) +
         C92127 * (ae * (C92181 + C92170 * (C92170 * C92188 + C92057) +
                         C92170 * C92050 * ae) +
                   C92127 * (C92263 + ae * C92170 * C92145 +
                             C92170 * (C92152 + C92170 * C92266)))) /
        C91701;
    const double C93127 = C93125 * ae;
    const double C93192 = C93190 * ae;
    const double C30188 = 3 * (C92015 + C92029 * C92309) +
                          C92170 * (2 * C92786 + C92170 * C93190);
    const double C30875 = C93680 * C11667;
    const double C13410 = C93718 * C1728;
    const double C29143 = C28721 * C1728;
    const double C63062 = C93718 * C1728;
    const double C11676 = C93680 * C1844;
    const double C1671 = C188 * C1472;
    const double C6119 = C4178 * C1472;
    const double C11102 = C93680 * C1472;
    const double C13409 = C9645 * C1472;
    const double C16057 = C93706 * C5414;
    const double C5423 = C93706 * C1147;
    const double C7328 = C93694 * C1263;
    const double C15384 = C14741 * C1263;
    const double C45489 = C93694 * C1263;
    const double C1330 = C275 * C957;
    const double C5118 = C93706 * C957;
    const double C7327 = C4179 * C957;
    const double C10887 = C9644 * C957;
    const double C92973 = C92127 * C92971;
    const double C93250 = C92532 + C93248;
    const double C93300 = C92170 * C93298;
    const double C92165 = C92012 * C92163;
    const double C92654 = C92127 * C92163;
    const double C93167 = C92151 + C93166;
    const double C93307 = C92170 * C93257;
    const double C92208 = C92012 * C92206;
    const double C92717 = C92127 * C92206;
    const double C92805 = C92170 * C92206;
    const double C92887 = C92194 + C92885;
    const double C93233 = C92170 * C93231;
    const double C93029 = C92127 * C93026;
    const double C93134 = C92170 * C93026;
    const double C40033 =
        (4 * (2 * C92170 * C92144 + C92170 * C93291) +
         C92170 * (3 * C93291 +
                   C92170 * (2 * C92170 * C92156 +
                             C92170 * (C92156 + std::pow(C92018, 7) * bs[7] *
                                                    C92131 * C92309)))) /
        C91701;
    const double C25296 =
        (ae * (2 * C92170 * C92037 + C92170 * (C92037 + C92061 * C92309)) +
         C92127 * (2 * C92937 + C92170 * C93049)) /
        C91701;
    const double C25297 =
        (2 * C92937 + C92170 * C93049 +
         ae * (2 * C92170 * C92532 +
               C92170 * (C92532 + C92127 * C92097 * C92309)) +
         C92127 * (ae * (2 * C92553 + C92170 * (C92061 + C92097 * C92309)) +
                   C92127 * (2 * C93077 +
                             C92170 * (C92227 + std::pow(C92018, 7) * bs[7] *
                                                    C92215 * C92309)))) /
        C91701;
    const double C30486 = (3 * (C92218 + C92221 * C92309) +
                           C92170 * (2 * C92937 + C92170 * C93049)) /
                          C91701;
    const double C40152 =
        (4 * (2 * C92937 + C92170 * C93049) +
         C92170 * (3 * C93049 +
                   C92170 * (2 * C93077 +
                             C92170 * (C92227 + std::pow(C92018, 7) * bs[7] *
                                                    C92215 * C92309)))) /
        C91701;
    const double C20664 =
        (4 * (2 * C92127 * C92187 + C92127 * C92978) +
         C92127 * (3 * C92978 +
                   C92127 * (2 * C92127 * C92199 +
                             C92127 * (C92199 + std::pow(C92018, 7) * bs[7] *
                                                    C92174 * C92235)))) /
        C91701;
    const double C506 =
        (4 * (2 * C92012 * C92263 + C92012 * C92268) +
         C92012 * (3 * C92268 +
                   C92012 * (2 * C92012 * C92266 +
                             C92012 * (C92266 + std::pow(C92018, 7) * bs[7] *
                                                    C92257 * C92016)))) /
        C91701;
    const double C20919 =
        (4 * (2 * C92127 * C92279 + C92127 * C93034) +
         C92127 * (3 * C93034 +
                   C92127 * (2 * C92127 * C92285 +
                             C92127 * (C92285 + std::pow(C92018, 7) * bs[7] *
                                                    C92273 * C92235)))) /
        C91701;
    const double C640 =
        (4 * (2 * C92012 * C92300 + C92012 * C92305) +
         C92012 * (3 * C92305 +
                   C92012 * (2 * C92012 * C92303 +
                             C92012 * (C92303 + std::pow(C92018, 7) * bs[7] *
                                                    C92294 * C92016)))) /
        C91701;
    const double C98 = (2 * C93843 * C93844) / C93608;
    const double C1981 = C93844 / C93608;
    const double C801 = (2 * C93843 * C93846) / C93608;
    const double C1979 = C93846 / C93608;
    const double C1383 = (2 * C93843 * C93847) / C93608;
    const double C2695 = C93847 / C93608;
    const double C91722 = C91707 - C91718;
    const double C91721 = C91697 * C91716;
    const double C4085 =
        ((-C91716 / C91696) / C91702 - (0 * be) / C91696) / C91702 -
        (0 * be) / C91696;
    const double C20049 = -C91716 / C91696;
    const double C47576 = (-C91716 / C91696) / C91702 - (0 * be) / C91696;
    const double C91720 = C91715 / C91696;
    const double C93841 = C93818 / C91701;
    const double C15558 = C93815 * C823;
    const double C15875 = C93815 * C4900;
    const double C15871 = C93815 * C5212;
    const double C15865 = C93815 * C1022;
    const double C15861 = C93815 * C816;
    const double C15857 = C93815 * C1021;
    const double C15853 = C93815 * C815;
    const double C16148 = C93815 * C5503;
    const double C16142 = C93815 * C1204;
    const double C16137 = C93815 * C1203;
    const double C17823 = C93815 * C1202;
    const double C19457 = C93815 * C3413;
    const double C19453 = C93815 * C3639;
    const double C19449 = C93815 * C8523;
    const double C19445 = C93815 * C8865;
    const double C19782 = C93815 * C3853;
    const double C19778 = C93815 * C9195;
    const double C30196 = C93815 * C1404;
    const double C30512 = C93815 * C10967;
    const double C30508 = C93815 * C11276;
    const double C30502 = C93815 * C1603;
    const double C30498 = C93815 * C1397;
    const double C30494 = C93815 * C1602;
    const double C30490 = C93815 * C1396;
    const double C30788 = C93815 * C11572;
    const double C30782 = C93815 * C1785;
    const double C30778 = C93815 * C1784;
    const double C32360 = C93815 * C1601;
    const double C33349 = C93815 * C6030;
    const double C33345 = C93815 * C5778;
    const double C33665 = C93815 * C6273;
    const double C93820 = C93593 / C91696;
    const double C4908 = C4075 * C823;
    const double C5239 = C4075 * C816;
    const double C5233 = C4075 * C1022;
    const double C5223 = C4075 * C1021;
    const double C5217 = C4075 * C815;
    const double C5518 = C4075 * C1204;
    const double C5508 = C4075 * C1203;
    const double C7217 = C4075 * C1202;
    const double C8880 = C4075 * C3413;
    const double C8874 = C4075 * C3639;
    const double C9204 = C4075 * C3853;
    const double C10975 = C4075 * C1404;
    const double C11303 = C4075 * C1397;
    const double C11297 = C4075 * C1603;
    const double C11287 = C4075 * C1602;
    const double C11281 = C4075 * C1396;
    const double C11587 = C4075 * C1785;
    const double C11577 = C4075 * C1784;
    const double C13195 = C4075 * C1601;
    const double C47568 = -C93840;
    const double C5510 = C4076 * C1202;
    const double C11289 = C4076 * C1601;
    const double C91822 = C91760 * C91814;
    const double C14839 =
        ((-C91813 / C91696) / C91702 -
         ((C93680 - (C91760 * C91814) / C91696) * be) / C91696) /
            C91702 -
        ((C91760 * ((-C91814 / C91696) / C91702 - (0 * be) / C91696) + C93694) *
         be) /
            C91696;
    const double C14840 =
        ((-C91814 / C91696) / C91702 - (0 * be) / C91696) / C91702 -
        (0 * be) / C91696;
    const double C42480 = (-C91814 / C91696) / C91702 - (0 * be) / C91696;
    const double C91852 = C91849 - C91845;
    const double C91870 = C91867 / C91696;
    const double C4460 = C4440 * C111;
    const double C4451 = C4440 * C110;
    const double C4445 = C4440 * C109;
    const double C6996 = C4440 * C806;
    const double C6992 = C4440 * C805;
    const double C7975 = C4440 * C1387;
    const double C7971 = C4440 * C1386;
    const double C35792 = C4440 * C10964;
    const double C35785 = C4440 * C1389;
    const double C35781 = C4440 * C1388;
    const double C38531 = C4440 * C3409;
    const double C4454 = C4441 * C805;
    const double C4448 = C4441 * C806;
    const double C35783 = C4441 * C3409;
    const double C38533 = C4441 * C8520;
    const double C219 = C204 + C205;
    const double C218 = C202 + C203;
    const double C654 = C643 + C644;
    const double C11108 = C11089 + C11090;
    const double C11107 = C11087 + C11088;
    const double C11679 = C11671 + C11672;
    const double C440 = C427 + C428;
    const double C11406 = C11393 + C1669;
    const double C93849 = C93832 / C91701;
    const double C4204 = C93828 * C192;
    const double C4200 = C93828 * C198;
    const double C4194 = C93828 * C197;
    const double C4190 = C93828 * C191;
    const double C4186 = C93828 * C196;
    const double C4182 = C93828 * C190;
    const double C4453 = C93828 * C421;
    const double C4447 = C93828 * C420;
    const double C4733 = C93828 * C638;
    const double C4727 = C93828 * C637;
    const double C4722 = C93828 * C636;
    const double C6663 = C93828 * C888;
    const double C6655 = C93828 * C887;
    const double C7330 = C93828 * C1260;
    const double C7326 = C93828 * C1259;
    const double C7654 = C93828 * C1469;
    const double C7650 = C93828 * C1477;
    const double C7646 = C93828 * C1468;
    const double C8306 = C93828 * C1841;
    const double C8302 = C93828 * C1840;
    const double C35510 = C93828 * C11080;
    const double C35506 = C93828 * C11083;
    const double C35500 = C93828 * C1479;
    const double C35496 = C93828 * C1471;
    const double C35492 = C93828 * C1478;
    const double C35488 = C93828 * C1470;
    const double C35782 = C93828 * C1660;
    const double C36059 = C93828 * C11667;
    const double C36053 = C93828 * C1843;
    const double C36049 = C93828 * C1842;
    const double C37256 = C93828 * C1472;
    const double C37885 = C93828 * C1844;
    const double C38200 = C93828 * C5873;
    const double C38192 = C93828 * C3495;
    const double C93834 = C93697 / C91696;
    const double C48215 = C47572 * C1263;
    const double C83408 = C47572 * C8648;
    const double C42379 = -C93848;
    const double C14863 = C14740 * C887;
    const double C14845 = C14740 * C888;
    const double C15388 = C14740 * C1259;
    const double C15382 = C14740 * C1260;
    const double C17935 = C14740 * C1263;
    const double C25124 = C14740 * C5873;
    const double C25118 = C14740 * C3495;
    const double C27852 = C14740 * C8648;
    const double C14865 = C14739 * C191;
    const double C14859 = C14739 * C197;
    const double C14849 = C14739 * C196;
    const double C14843 = C14739 * C190;
    const double C15123 = C14739 * C421;
    const double C15108 = C14739 * C420;
    const double C15390 = C14739 * C637;
    const double C15380 = C14739 * C636;
    const double C17269 = C14739 * C888;
    const double C17937 = C14739 * C1260;
    const double C18255 = C14739 * C1469;
    const double C18249 = C14739 * C1477;
    const double C18888 = C14739 * C1841;
    const double C25132 = C14739 * C1471;
    const double C25126 = C14739 * C1479;
    const double C25116 = C14739 * C1478;
    const double C25110 = C14739 * C1470;
    const double C25412 = C14739 * C1660;
    const double C25695 = C14739 * C1843;
    const double C25685 = C14739 * C1842;
    const double C27850 = C14739 * C3495;
    const double C91892 = C91763 * C91884;
    const double C28877 =
        ((-C91883 / C91696) / C91702 -
         ((C93706 - (C91763 * C91884) / C91696) * be) / C91696) /
            C91702 -
        ((C91763 * ((-C91884 / C91696) / C91702 - (0 * be) / C91696) + C93718) *
         be) /
            C91696;
    const double C28878 =
        ((-C91884 / C91696) / C91702 - (0 * be) / C91696) / C91702 -
        (0 * be) / C91696;
    const double C59426 = (-C91884 / C91696) / C91702 - (0 * be) / C91696;
    const double C91918 = C91915 - C91911;
    const double C91936 = C91933 / C91696;
    const double C10185 = C10165 * C111;
    const double C10176 = C10165 * C110;
    const double C10170 = C10165 * C109;
    const double C12732 = C10165 * C806;
    const double C12728 = C10165 * C805;
    const double C13734 = C10165 * C1387;
    const double C13730 = C10165 * C1386;
    const double C24904 = C10165 * C4897;
    const double C24897 = C10165 * C808;
    const double C24893 = C10165 * C807;
    const double C28630 = C10165 * C3409;
    const double C28626 = C10165 * C8520;
    const double C10179 = C10166 * C1386;
    const double C10173 = C10166 * C1387;
    const double C24899 = C10166 * C8520;
    const double C24895 = C10166 * C3409;
    const double C306 = C291 + C292;
    const double C305 = C289 + C290;
    const double C520 = C509 + C510;
    const double C5124 = C5105 + C5106;
    const double C5123 = C5103 + C5104;
    const double C5426 = C5418 + C5419;
    const double C735 = C722 + C723;
    const double C5690 = C5679 + C1328;
    const double C93852 = C93837 / C91701;
    const double C9670 = C93829 * C279;
    const double C9666 = C93829 * C285;
    const double C9660 = C93829 * C284;
    const double C9656 = C93829 * C278;
    const double C9652 = C93829 * C283;
    const double C9648 = C93829 * C277;
    const double C9919 = C93829 * C504;
    const double C9913 = C93829 * C503;
    const double C9908 = C93829 * C502;
    const double C10178 = C93829 * C716;
    const double C10172 = C93829 * C715;
    const double C12093 = C93829 * C954;
    const double C12089 = C93829 * C962;
    const double C12085 = C93829 * C953;
    const double C12413 = C93829 * C1144;
    const double C12409 = C93829 * C1143;
    const double C13081 = C93829 * C1535;
    const double C13073 = C93829 * C1534;
    const double C13412 = C93829 * C1725;
    const double C13408 = C93829 * C1724;
    const double C24394 = C93829 * C5096;
    const double C24390 = C93829 * C5099;
    const double C24384 = C93829 * C964;
    const double C24380 = C93829 * C956;
    const double C24376 = C93829 * C963;
    const double C24372 = C93829 * C955;
    const double C24648 = C93829 * C5414;
    const double C24642 = C93829 * C1146;
    const double C24638 = C93829 * C1145;
    const double C24894 = C93829 * C1319;
    const double C26093 = C93829 * C957;
    const double C26411 = C93829 * C1147;
    const double C27974 = C93829 * C3565;
    const double C27970 = C93829 * C3569;
    const double C27966 = C93829 * C8749;
    const double C27962 = C93829 * C8752;
    const double C93839 = C93721 / C91696;
    const double C71146 = C70728 * C1728;
    const double C87678 = C70728 * C5953;
    const double C59272 = -C93851;
    const double C28901 = C28720 * C1534;
    const double C28883 = C28720 * C1535;
    const double C29147 = C28720 * C1724;
    const double C29141 = C28720 * C1725;
    const double C32582 = C28720 * C1728;
    const double C34794 = C28720 * C8749;
    const double C34788 = C28720 * C8752;
    const double C34782 = C28720 * C3569;
    const double C34776 = C28720 * C3565;
    const double C38312 = C28720 * C5953;
    const double C28903 = C28719 * C278;
    const double C28897 = C28719 * C284;
    const double C28887 = C28719 * C283;
    const double C28881 = C28719 * C277;
    const double C29149 = C28719 * C503;
    const double C29139 = C28719 * C502;
    const double C29413 = C28719 * C716;
    const double C29398 = C28719 * C715;
    const double C31279 = C28719 * C954;
    const double C31273 = C28719 * C962;
    const double C31590 = C28719 * C1144;
    const double C32250 = C28719 * C1535;
    const double C32584 = C28719 * C1725;
    const double C34796 = C28719 * C956;
    const double C34790 = C28719 * C964;
    const double C34780 = C28719 * C963;
    const double C34774 = C28719 * C955;
    const double C35048 = C28719 * C1146;
    const double C35038 = C28719 * C1145;
    const double C35290 = C28719 * C1319;
    const double C38320 = C28719 * C3565;
    const double C38314 = C28719 * C3569;
    const double C92027 = ae * C92026;
    const double C116 =
        (C92013 * C92011 * C92020 + C92012 * C92026 + C92012 * C92015 * ae) /
        C91696;
    const double C814 = (C92127 * C92026) / C91696;
    const double C1395 = (C92170 * C92026) / C91696;
    const double C5129 = C5119 + C5120;
    const double C11113 = C11103 + C11104;
    const double C8764 = C8760 + C8761;
    const double C13955 = C13948 + C13949;
    const double C24398 = C24377 + C24378;
    const double C35514 = C35493 + C35494;
    const double C92387 = C92386 + C92038;
    const double C92521 = C92520 + C92038;
    const double C3999 = C275 * C3566;
    const double C7768 = C93706 * C3566;
    const double C8303 = C4179 * C3566;
    const double C10881 = C9645 * C3566;
    const double C12091 = C93718 * C3566;
    const double C12619 = C188 * C3566;
    const double C14660 = C9644 * C3566;
    const double C31277 = C28720 * C3566;
    const double C57166 = C93829 * C3566;
    const double C61759 = C93718 * C3566;
    const double C68109 = C4178 * C3566;
    const double C5117 = C275 * C809;
    const double C5683 = C713 * C809;
    const double C6660 = C4179 * C809;
    const double C6994 = C4441 * C809;
    const double C26092 = C9644 * C809;
    const double C26724 = C10165 * C809;
    const double C11101 = C188 * C1390;
    const double C11399 = C418 * C1390;
    const double C13078 = C9645 * C1390;
    const double C13732 = C10166 * C1390;
    const double C37255 = C4178 * C1390;
    const double C37575 = C4440 * C1390;
    const double C7651 = C4179 * C3410;
    const double C7767 = C275 * C3410;
    const double C7973 = C4441 * C3410;
    const double C8412 = C713 * C3410;
    const double C11974 = C188 * C3410;
    const double C12090 = C9645 * C3410;
    const double C12300 = C418 * C3410;
    const double C12730 = C10166 * C3410;
    const double C57165 = C9644 * C3410;
    const double C57981 = C10165 * C3410;
    const double C67305 = C4178 * C3410;
    const double C67707 = C4440 * C3410;
    const double C15759 = C275 * C4898;
    const double C16310 = C713 * C4898;
    const double C18362 = C275 * C8521;
    const double C18990 = C713 * C8521;
    const double C26094 = C9645 * C8521;
    const double C26726 = C10166 * C8521;
    const double C67303 = C4179 * C8521;
    const double C67705 = C4441 * C8521;
    const double C30318 = C188 * C10965;
    const double C30610 = C418 * C10965;
    const double C92044 = ae * C92042;
    const double C92043 = C92012 * C92042;
    const double C92053 = 2 * C92042;
    const double C92334 = C92127 * C92042;
    const double C92436 = C92170 * C92042;
    const double C817 = (C92026 + C92042 * C92235) / C91696;
    const double C1398 = (C92026 + C92042 * C92309) / C91696;
    const double C92638 = ae * C92635;
    const double C92637 = C92127 * C92635;
    const double C92736 = C92170 * C92635;
    const double C92835 = 2 * C92635;
    const double C92790 = ae * C92787;
    const double C92789 = C92170 * C92787;
    const double C93183 = 2 * C92787;
    const double C28306 = C93718 * C6196;
    const double C35042 = C28721 * C6196;
    const double C38654 = C28720 * C6196;
    const double C70244 = C93718 * C6196;
    const double C87932 = C70728 * C6196;
    const double C822 =
        (2 * ae * C92127 * C92024 + C92012 * C92127 * C92041) / C91701;
    const double C824 =
        ((C92015 + C92016 * C92017 * C92021) * C92019 + C92041 * C92235) /
        C91701;
    const double C1403 =
        (2 * ae * C92170 * C92024 + C92012 * C92170 * C92041) / C91701;
    const double C1405 =
        ((C92015 + C92016 * C92017 * C92021) * C92019 + C92041 * C92309) /
        C91701;
    const double C3417 = (C92170 * C92127 * C92041) / C91701;
    const double C422 =
        (2 * C92012 * C92240 +
         C92012 *
             (C92240 + (C92050 + C92235 * C92051 * C92052) * C92019 * C92016)) /
        C91701;
    const double C1078 =
        (2 * ae * C92012 * C92133 + C92127 * C92012 * C92240) / C91701;
    const double C1659 = (C92170 * C92012 * C92240) / C91701;
    const double C1661 =
        ((C92015 + C92235 * C92017 * C92021) * C92019 + C92240 * C92309) /
        C91701;
    const double C3709 =
        (2 * ae * C92170 * C92133 + C92127 * C92170 * C92240) / C91701;
    const double C717 =
        (2 * C92012 * C92314 +
         C92012 *
             (C92314 + (C92050 + C92309 * C92051 * C92052) * C92019 * C92016)) /
        C91701;
    const double C1318 = (C92127 * C92012 * C92314) / C91701;
    const double C1320 =
        ((C92015 + C92309 * C92017 * C92021) * C92019 + C92314 * C92235) /
        C91701;
    const double C1899 =
        (2 * ae * C92012 * C92176 + C92170 * C92012 * C92314) / C91701;
    const double C3993 =
        (2 * ae * C92127 * C92176 + C92170 * C92127 * C92314) / C91701;
    const double C92709 = C92708 + C92636;
    const double C27971 = C9645 * C5775;
    const double C28628 = C10166 * C5775;
    const double C33135 = C188 * C5775;
    const double C33457 = C418 * C5775;
    const double C35497 = C4179 * C5775;
    const double C35787 = C4441 * C5775;
    const double C38195 = C4178 * C5775;
    const double C38535 = C4440 * C5775;
    const double C35507 = C4179 * C25001;
    const double C35789 = C4441 * C25001;
    const double C41811 = C188 * C25001;
    const double C42025 = C418 * C25001;
    const double C92384 = ae * C92383;
    const double C890 =
        (C92013 * C92011 * C92130 + C92127 * C92383 + C92127 * C92015 * ae) /
        C91696;
    const double C3491 = (C92170 * C92383) / C91696;
    const double C5870 = (C92383 + C92635 * C92309) / C91696;
    const double C220 = C206 + C207;
    const double C441 = C430 + C431;
    const double C521 = C512 + C513;
    const double C222 = C210 + C211;
    const double C442 = C433 + C434;
    const double C522 = C515 + C516;
    const double C2305 = C2299 + C1086;
    const double C2074 = C2065 + C2066;
    const double C4210 = C4191 + C4192;
    const double C2306 = C2301 + C1087;
    const double C2076 = C2069 + C2070;
    const double C4206 = C4183 + C4184;
    const double C3019 = C3013 + C1667;
    const double C2788 = C2779 + C2780;
    const double C3020 = C3015 + C1668;
    const double C2790 = C2783 + C2784;
    const double C3105 = C3100 + C3101;
    const double C9921 = C9909 + C9910;
    const double C11409 = C11401 + C1670;
    const double C11114 = C11105 + C11106;
    const double C30618 = C30612 + C11403;
    const double C30328 = C30322 + C30323;
    const double C92518 = ae * C92517;
    const double C1537 =
        (C92013 * C92011 * C92173 + C92170 * C92517 + C92170 * C92015 * ae) /
        C91696;
    const double C2391 = C2386 + C2387;
    const double C307 = C293 + C294;
    const double C655 = C646 + C647;
    const double C736 = C725 + C726;
    const double C309 = C297 + C298;
    const double C656 = C649 + C650;
    const double C737 = C728 + C729;
    const double C2619 = C2613 + C1326;
    const double C2160 = C2151 + C2152;
    const double C2620 = C2615 + C1327;
    const double C2162 = C2155 + C2156;
    const double C2540 = C2535 + C2536;
    const double C4735 = C4723 + C4724;
    const double C5693 = C5685 + C1329;
    const double C5130 = C5121 + C5122;
    const double C3333 = C3327 + C1907;
    const double C2874 = C2865 + C2866;
    const double C9676 = C9657 + C9658;
    const double C3334 = C3329 + C1908;
    const double C2876 = C2869 + C2870;
    const double C3254 = C3249 + C3250;
    const double C9672 = C9649 + C9650;
    const double C9415 = C9410 + C3998;
    const double C8765 = C8762 + C8763;
    const double C24396 = C24373 + C24374;
    const double C16317 = C16312 + C5687;
    const double C15769 = C15763 + C15764;
    const double C19991 = C19987 + C9412;
    const double C19339 = C19332 + C19333;
    const double C24400 = C24381 + C24382;
    const double C92071 = ae * C92068;
    const double C92070 = C92012 * C92068;
    const double C92087 = 2 * C92068;
    const double C92330 = C92127 * C92068;
    const double C92341 = C92068 * C92235;
    const double C92432 = C92170 * C92068;
    const double C92443 = C92068 * C92309;
    const double C92972 = C92127 * C92970;
    const double C92983 = C92127 * C92982;
    const double C93299 = C92170 * C93297;
    const double C93313 = C92170 * C93312;
    const double C92542 = 2 * C92537;
    const double C92966 = C92144 + C92537;
    const double C92980 = C92221 + C92537;
    const double C93249 = C92537 + C93247;
    const double C93261 = C92537 + C93260;
    const double C25220 =
        (2 * (ae * C92688 + C92170 * C93105) + ae * (C92688 + C92532 * C92309) +
         C92170 * (C93105 + ae * C92170 * C92532 +
                   C92170 * (C92537 + C92170 * C92127 * C92199))) /
        C91701;
    const double C25593 =
        (2 * (ae * C92688 + C92170 * C93118) + ae * (C92688 + C92532 * C92309) +
         C92170 * (C93118 + ae * C92170 * C92532 +
                   C92170 * (C92537 + C92170 * C92127 * C92285))) /
        C91701;
    const double C25308 = C93585 * C16643;
    const double C35503 = C4179 * C25003;
    const double C35690 = C93585 * C25003;
    const double C41813 = C188 * C25003;
    const double C92563 = 2 * C92558;
    const double C93079 = C92558 + C93078;
    const double C93293 = C92187 + C92558;
    const double C93310 = C92279 + C92558;
    const double C16567 =
        (C92180 + C92187 * C92235 + ae * C92170 * C92820 +
         C92170 * (ae * C92820 + C92170 * (C92187 + C92199 * C92235))) /
        C91701;
    const double C16883 =
        (C92276 + C92279 * C92235 + ae * C92170 * C92820 +
         C92170 * (ae * C92820 + C92170 * (C92279 + C92285 * C92235))) /
        C91701;
    const double C19325 =
        (ae * (2 * C92688 + C92127 * C92820) +
         C92170 * (2 * C92127 * C92187 + C92127 * (C92187 + C92199 * C92235))) /
        C91701;
    const double C19439 =
        (2 * (ae * C92170 * C92037 + C92127 * C92937) + ae * C92170 * C92820 +
         C92127 * (C92937 + ae * C92170 * C92532 +
                   C92127 * (C92558 + C92127 * C92170 * C92227))) /
        C91701;
    const double C19772 =
        (ae * (2 * C92688 + C92127 * C92820) +
         C92170 * (2 * C92127 * C92279 + C92127 * (C92279 + C92285 * C92235))) /
        C91701;
    const double C21265 =
        (2 * (ae * (C92037 + C92061 * C92309) + C92127 * C93049) +
         ae * (C92820 + C92971 * C92309) +
         C92127 * (C93049 + ae * (C92532 + C92127 * C92097 * C92309) +
                   C92127 * (ae * (C92061 + C92097 * C92309) +
                             C92127 * (C92227 + std::pow(C92018, 7) * bs[7] *
                                                    C92215 * C92309)))) /
        C91701;
    const double C25221 =
        (2 * (ae * C92820 + C92170 * C92978) + ae * (C92820 + C92971 * C92309) +
         C92170 * (C92978 + ae * C92170 * C92971 +
                   C92170 * (ae * C92971 +
                             C92170 * (C92199 + std::pow(C92018, 7) * bs[7] *
                                                    C92174 * C92235)))) /
        C91701;
    const double C25594 =
        (2 * (ae * C92820 + C92170 * C93034) + ae * (C92820 + C92971 * C92309) +
         C92170 * (C93034 + ae * C92170 * C92971 +
                   C92170 * (ae * C92971 +
                             C92170 * (C92285 + std::pow(C92018, 7) * bs[7] *
                                                    C92273 * C92235)))) /
        C91701;
    const double C15552 = (3 * (C92024 + C92037 * C92235) +
                           C92127 * (2 * C92688 + C92127 * C92820)) /
                          C91696;
    const double C16397 = (C92024 + C92037 * C92235 + C92820 * C92309) / C91696;
    const double C19097 = (C92170 * (2 * C92688 + C92127 * C92820)) / C91696;
    const double C25004 =
        (2 * C92170 * C92820 + C92170 * (C92820 + C92971 * C92309)) / C91696;
    const double C35677 =
        (ae * (3 * C93152 +
               C92170 * (2 * C92553 + C92170 * (C92061 + C92097 * C92309))) +
         C92127 * (3 * C93049 +
                   C92170 * (2 * C93077 +
                             C92170 * (C92227 + std::pow(C92018, 7) * bs[7] *
                                                    C92215 * C92309)))) /
        C91701;
    const double C30190 = (3 * (C92024 + C92037 * C92309) +
                           C92170 * (2 * C93148 + C92170 * C93152)) /
                          C91696;
    const double C92069 = C92012 * C92067;
    const double C92328 = C92127 * C92067;
    const double C92430 = C92170 * C92067;
    const double C825 = (2 * ae * (C92024 + C92037 * C92235) +
                         C92012 * (C92041 + C92067 * C92235)) /
                        C91701;
    const double C1406 = (2 * ae * (C92024 + C92037 * C92309) +
                          C92012 * (C92041 + C92067 * C92309)) /
                         C91701;
    const double C4903 =
        (2 * C92127 * C92041 + C92127 * (C92041 + C92067 * C92235)) / C91701;
    const double C8526 = (C92170 * (C92041 + C92067 * C92235)) / C91701;
    const double C10970 =
        (2 * C92170 * C92041 + C92170 * (C92041 + C92067 * C92309)) / C91701;
    const double C92103 = C92012 * C92099;
    const double C92102 = C92099 * ae;
    const double C92655 = C92127 * C92099;
    const double C92806 = C92170 * C92099;
    const double C4899 =
        2 * C92127 * C92063 + C92127 * (C92063 + C92099 * C92235);
    const double C8522 = C92170 * (C92063 + C92099 * C92235);
    const double C10966 =
        2 * C92170 * C92063 + C92170 * (C92063 + C92099 * C92309);
    const double C92865 = C92861 + C92098;
    const double C93206 = C93202 + C92098;
    const double C92863 = C92058 + C92859;
    const double C92862 = C92858 * ae;
    const double C93232 = C92170 * C92858;
    const double C33015 =
        2 * C92170 * C92645 + C92170 * (C92645 + C92858 * C92309);
    const double C93208 = C92058 + C93204;
    const double C93207 = C93203 * ae;
    const double C92110 = ae * C92105;
    const double C92108 = C92012 * C92105;
    const double C92347 = C92105 * C92235;
    const double C92449 = C92105 * C92309;
    const double C92536 = C92127 * C92105;
    const double C92557 = C92170 * C92105;
    const double C93004 = ae * C92997;
    const double C93001 = C92127 * C92997;
    const double C93053 = C92997 * C92309;
    const double C93085 = C92170 * C92997;
    const double C93340 = ae * C93334;
    const double C93338 = C92170 * C93334;
    const double C92107 = C92012 * C92104;
    const double C92345 = C92104 * C92235;
    const double C92447 = C92104 * C92309;
    const double C92533 = C92127 * C92104;
    const double C92554 = C92170 * C92104;
    const double C92251 = C92250 * C92016;
    const double C92855 = C92012 * C92250;
    const double C92988 = C92127 * C92250;
    const double C93051 = C92250 * C92309;
    const double C93082 = C92170 * C92250;
    const double C92325 = C92324 * C92016;
    const double C92899 = C92012 * C92324;
    const double C93042 = C92324 * C92235;
    const double C93267 = C92127 * C92324;
    const double C93324 = C92170 * C92324;
    const double C93003 = C92127 * C92999;
    const double C93002 = C92999 * ae;
    const double C93135 = C92170 * C92999;
    const double C25002 =
        2 * C92170 * C92842 + C92170 * (C92842 + C92999 * C92309);
    const double C93277 = C93273 + C92998;
    const double C93275 = C92837 + C93271;
    const double C93274 = C93270 * ae;
    const double C93331 = C92170 * C93256;
    const double C93329 = C93256 * ae;
    const double C92390 = C92127 * C92149;
    const double C1723 = (ae * (2 * C92140 + C92012 * C92149) +
                          C92170 * (2 * C92012 * C92263 + C92012 * C92268)) /
                         C91701;
    const double C1729 = (C92260 + C92263 * C92016 + ae * C92170 * C92149 +
                          C92170 * (ae * C92149 + C92170 * C92268)) /
                         C91701;
    const double C1839 = (ae * (2 * C92140 + C92012 * C92149) +
                          C92170 * (2 * C92012 * C92300 + C92012 * C92305)) /
                         C91701;
    const double C1845 = (C92297 + C92300 * C92016 + ae * C92170 * C92149 +
                          C92170 * (ae * C92149 + C92170 * C92305)) /
                         C91701;
    const double C11497 =
        (2 * (ae * C92149 + C92170 * C92268) + ae * (C92149 + C92163 * C92309) +
         C92170 * (C92268 + ae * C92170 * C92163 +
                   C92170 * (ae * C92163 +
                             C92170 * (C92266 + std::pow(C92018, 7) * bs[7] *
                                                    C92257 * C92016)))) /
        C91701;
    const double C11669 =
        (2 * (ae * C92149 + C92170 * C92305) + ae * (C92149 + C92163 * C92309) +
         C92170 * (C92305 + ae * C92170 * C92163 +
                   C92170 * (ae * C92163 +
                             C92170 * (C92303 + std::pow(C92018, 7) * bs[7] *
                                                    C92294 * C92016)))) /
        C91701;
    const double C193 = (3 * (C92133 + C92138 * C92016) +
                         C92012 * (2 * C92140 + C92012 * C92149)) /
                        C91696;
    const double C886 = (C92127 * (2 * C92140 + C92012 * C92149) +
                         (2 * C92035 + C92012 * C92063) * ae) /
                        C91696;
    const double C1467 = (C92170 * (2 * C92140 + C92012 * C92149)) / C91696;
    const double C1473 = (C92133 + C92138 * C92016 + C92149 * C92309) / C91696;
    const double C11082 =
        (2 * C92170 * C92149 + C92170 * (C92149 + C92163 * C92309)) / C91696;
    const double C92164 = C92012 * C92162;
    const double C92822 = C92127 * C92162;
    const double C92230 = C92012 * C92229;
    const double C92830 = C92127 * C92229;
    const double C92939 = C92170 * C92229;
    const double C93065 = C92170 * C93063;
    const double C93093 = C92127 * C93063;
    const double C93319 = C92170 * C93318;
    const double C92159 = C92144 + C92155;
    const double C92225 = C92221 + C92155;
    const double C92854 = 2 * C92155;
    const double C92957 = C92155 + C92956;
    const double C93179 = C92155 + C93178;
    const double C6197 =
        (ae * (C92183 + C92170 * (C92170 * C92194 + C92062) +
               C92170 * C92058 * ae) +
         C92127 * (C92665 + ae * C92170 * C92151 +
                   C92170 * (C92155 + C92170 * C92012 * C92266))) /
        C91701;
    const double C11496 =
        (2 * (ae * C92140 + C92170 * C92665) + ae * (C92140 + C92151 * C92309) +
         C92170 * (C92665 + ae * C92170 * C92151 +
                   C92170 * (C92155 + C92170 * C92012 * C92266))) /
        C91701;
    const double C11668 =
        (2 * (ae * C92140 + C92170 * C92672) + ae * (C92140 + C92151 * C92309) +
         C92170 * (C92672 + ae * C92170 * C92151 +
                   C92170 * (C92155 + C92170 * C92012 * C92303))) /
        C91701;
    const double C92646 = C92644 + C92062;
    const double C11404 = C188 * C11081;
    const double C30319 = C93680 * C11081;
    const double C37579 = C4178 * C11081;
    const double C92845 = ae * C92840;
    const double C92843 = C92127 * C92840;
    const double C92909 = C92840 * C92309;
    const double C92943 = C92170 * C92840;
    const double C92990 = 2 * C92840;
    const double C93064 = C92263 + C93062;
    const double C93081 = 2 * C93062;
    const double C93316 = C92300 + C93062;
    const double C30303 = (3 * (C92133 + C92138 * C92309) +
                           C92170 * (2 * C93161 + C92170 * C93163)) /
                          C91696;
    const double C199 =
        (3 * (C92137 + ae * C92140 + C92012 * C92148) +
         ae * (2 * C92140 + C92012 * C92149) +
         C92012 * (2 * C92148 + ae * C92149 +
                   C92012 * (C92144 + ae * C92012 * C92145 +
                             C92012 * (ae * C92145 +
                                       C92012 * C92085 * C92084 * C92131)))) /
        C91701;
    const double C1476 =
        (C92170 * (C92137 + ae * C92140 + C92012 * C92148)) / C91701;
    const double C1480 =
        (ae * C92133 + C92012 * C92137 + C92148 * C92309) / C91701;
    const double C11084 =
        (2 * C92170 * C92148 + C92170 * (C92148 + C92162 * C92309)) / C91701;
    const double C30306 =
        (3 * (C92148 + C92162 * C92309) +
         C92170 *
             (2 * C92170 * C92162 +
              C92170 * (C92162 + (ae * C92158 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92131) *
                                     C92309))) /
        C91701;
    const double C15668 =
        (3 * (C92137 + ae * C92688 + C92127 * C92819) +
         ae * (2 * C92688 + C92127 * C92820) +
         C92127 * (2 * C92819 + ae * C92820 +
                   C92127 * (C92144 + C92537 +
                             C92127 * (C92082 + C92127 * C92156)))) /
        C91701;
    const double C16489 =
        (C92137 + ae * C92688 + C92127 * C92819 +
         (C92144 + C92537 + C92127 * (C92082 + C92127 * C92156)) * C92309) /
        C91701;
    const double C19223 =
        (C92170 *
         (2 * C92819 + ae * C92820 +
          C92127 * (C92144 + C92537 + C92127 * (C92082 + C92127 * C92156)))) /
        C91701;
    const double C25106 =
        (2 * C92170 * C92819 + C92170 * (C92819 + C92970 * C92309)) / C91701;
    const double C35485 =
        (3 * (C92819 + C92970 * C92309) +
         C92170 *
             (2 * C92170 * C92970 +
              C92170 * (C92970 + (ae * C92097 + C92127 * std::pow(C92018, 7) *
                                                    bs[7] * C92131) *
                                     C92309))) /
        C91701;
    const double C30327 = C30320 + C30321;
    const double C92524 = C92170 * C92192;
    const double C1142 = (ae * (2 * C92183 + C92012 * C92192) +
                          C92127 * (2 * C92012 * C92263 + C92012 * C92268)) /
                         C91701;
    const double C1148 = (C92260 + C92263 * C92016 + ae * C92127 * C92192 +
                          C92127 * (ae * C92192 + C92127 * C92268)) /
                         C91701;
    const double C1258 = (ae * (2 * C92183 + C92012 * C92192) +
                          C92127 * (2 * C92012 * C92300 + C92012 * C92305)) /
                         C91701;
    const double C1264 = (C92297 + C92300 * C92016 + ae * C92127 * C92192 +
                          C92127 * (ae * C92192 + C92127 * C92305)) /
                         C91701;
    const double C5416 =
        (2 * (ae * C92192 + C92127 * C92268) + ae * (C92192 + C92206 * C92235) +
         C92127 * (C92268 + ae * C92127 * C92206 +
                   C92127 * (ae * C92206 +
                             C92127 * (C92266 + std::pow(C92018, 7) * bs[7] *
                                                    C92257 * C92016)))) /
        C91701;
    const double C5600 =
        (2 * (ae * C92192 + C92127 * C92305) + ae * (C92192 + C92206 * C92235) +
         C92127 * (C92305 + ae * C92127 * C92206 +
                   C92127 * (ae * C92206 +
                             C92127 * (C92303 + std::pow(C92018, 7) * bs[7] *
                                                    C92294 * C92016)))) /
        C91701;
    const double C280 = (3 * (C92176 + C92181 * C92016) +
                         C92012 * (2 * C92183 + C92012 * C92192)) /
                        C91696;
    const double C952 = (C92127 * (2 * C92183 + C92012 * C92192)) / C91696;
    const double C958 = (C92176 + C92181 * C92016 + C92192 * C92235) / C91696;
    const double C1533 = (C92170 * (2 * C92183 + C92012 * C92192) +
                          (2 * C92035 + C92012 * C92063) * ae) /
                         C91696;
    const double C3567 =
        (C92170 * C92127 * C92192 + C92127 * C92063 * ae) / C91696;
    const double C5098 =
        (2 * C92127 * C92192 + C92127 * (C92192 + C92206 * C92235)) / C91696;
    const double C8751 = (C92170 * (C92192 + C92206 * C92235) +
                          (C92063 + C92099 * C92235) * ae) /
                         C91696;
    const double C92207 = C92012 * C92205;
    const double C93154 = C92170 * C92205;
    const double C93222 = C92127 * C92205;
    const double C92288 = C92012 * C92287;
    const double C93172 = C92170 * C92287;
    const double C93227 = C92127 * C92287;
    const double C93028 = C92127 * C93024;
    const double C93039 = C92127 * C93038;
    const double C93263 = C92170 * C93038;
    const double C92202 = C92187 + C92198;
    const double C92283 = C92279 + C92198;
    const double C92886 = C92198 + C92884;
    const double C92896 = C92198 + C92895;
    const double C93199 = 2 * C92198;
    const double C5415 =
        (2 * (ae * C92183 + C92127 * C92665) + ae * (C92183 + C92194 * C92235) +
         C92127 * (C92665 + ae * C92127 * C92194 +
                   C92127 * (C92198 + C92127 * C92012 * C92266))) /
        C91701;
    const double C5599 =
        (2 * (ae * C92183 + C92127 * C92672) + ae * (C92183 + C92194 * C92235) +
         C92127 * (C92672 + ae * C92127 * C92194 +
                   C92127 * (C92198 + C92127 * C92012 * C92303))) /
        C91701;
    const double C92713 = C92170 * C92712;
    const double C92797 = C92795 + C92062;
    const double C5688 = C275 * C5097;
    const double C15760 = C93706 * C5097;
    const double C26728 = C9644 * C5097;
    const double C9413 = C275 * C8750;
    const double C10888 = C9645 * C8750;
    const double C18363 = C93706 * C8750;
    const double C26095 = C93718 * C8750;
    const double C27641 = C9644 * C8750;
    const double C65488 = C93718 * C8750;
    const double C68107 = C4179 * C8750;
    const double C92923 = C92170 * C92880;
    const double C15744 = (3 * (C92176 + C92181 * C92235) +
                           C92127 * (2 * C92707 + C92127 * C92880)) /
                          C91696;
    const double C19323 = (C92170 * (2 * C92707 + C92127 * C92880) +
                           (2 * C92634 + C92127 * C92842) * ae) /
                          C91696;
    const double C93027 = C92263 + C93023;
    const double C93036 = C92300 + C93023;
    const double C93266 = 2 * C93023;
    const double C93126 = C93124 + C92841;
    const double C93095 = ae * C93094;
    const double C93184 = C92170 * C93094;
    const double C93326 = 2 * C93094;
    const double C286 =
        (3 * (C92180 + ae * C92183 + C92012 * C92191) +
         ae * (2 * C92183 + C92012 * C92192) +
         C92012 * (2 * C92191 + ae * C92192 +
                   C92012 * (C92187 + ae * C92012 * C92188 +
                             C92012 * (ae * C92188 +
                                       C92012 * C92085 * C92084 * C92174)))) /
        C91701;
    const double C961 =
        (C92127 * (C92180 + ae * C92183 + C92012 * C92191)) / C91701;
    const double C965 =
        (ae * C92176 + C92012 * C92180 + C92191 * C92235) / C91701;
    const double C5100 =
        (2 * C92127 * C92191 + C92127 * (C92191 + C92205 * C92235)) / C91701;
    const double C15747 =
        (3 * (C92191 + C92205 * C92235) +
         C92127 *
             (2 * C92127 * C92205 +
              C92127 * (C92205 + (ae * C92201 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92174) *
                                     C92235))) /
        C91701;
    const double C30410 =
        (3 * (C92180 + ae * C93148 + C92170 * C93151) +
         ae * (2 * C93148 + C92170 * C93152) +
         C92170 * (2 * C93151 + ae * C93152 +
                   C92170 * (C92187 + C92558 +
                             C92170 * (C92082 + C92170 * C92199)))) /
        C91701;
    const double C15768 = C15761 + C15762;
    const double C19338 = C19330 + C19331;
    const double C24402 = C24385 + C24386;
    const double C366 =
        (3 * (C92218 + ae * C92140 + C92012 * C92223) +
         ae * (2 * C92140 + C92012 * C92149) +
         C92012 * (2 * C92223 + ae * C92149 +
                   C92012 * (C92221 + C92155 +
                             C92012 * (C92152 +
                                       C92012 * C92085 * C92084 * C92215)))) /
        C91701;
    const double C1600 =
        (C92170 * (C92218 + ae * C92140 + C92012 * C92223)) / C91701;
    const double C1604 =
        (ae * C92133 + C92012 * C92218 + C92223 * C92309) / C91701;
    const double C11277 =
        (2 * C92170 * C92223 + C92170 * (C92223 + C92229 * C92309)) / C91701;
    const double C15849 =
        (3 * (C92218 + ae * C92688 + C92127 * C92828) +
         ae * (2 * C92688 + C92127 * C92820) +
         C92127 * (2 * C92828 + ae * C92820 +
                   C92127 * (C92221 + C92537 +
                             C92127 * (C92082 + C92127 * C92227)))) /
        C91701;
    const double C92643 = C92012 * C92245;
    const double C92834 = C92127 * C92245;
    const double C92941 = C92170 * C92245;
    const double C423 =
        (3 * (C92240 + C92245 * C92016) +
         C92012 * (2 * C92012 * C92245 +
                   C92012 * (C92245 + (C92083 + C92235 * C92084 * C92085) *
                                          C92019 * C92016))) /
        C91701;
    const double C1077 = (2 * ae * (C92133 + C92138 * C92016) +
                          C92127 * (C92240 + C92245 * C92016)) /
                         C91701;
    const double C1658 = (C92170 * (C92240 + C92245 * C92016)) / C91701;
    const double C1662 = (C92012 * C92240 + C92012 * C92245 * C92309) / C91701;
    const double C3710 =
        (2 * ae * C92170 * C92140 + C92127 * C92170 * C92012 * C92245) / C91701;
    const double C6107 = (2 * ae * (C92133 + C92138 * C92309) +
                          C92127 * (C92240 + C92245 * C92309)) /
                         C91701;
    const double C11389 =
        (2 * C92170 * C92240 + C92170 * (C92240 + C92245 * C92309)) / C91701;
    const double C16051 =
        (3 * (C92260 + ae * C92707 + C92127 * C92879) +
         ae * (2 * C92707 + C92127 * C92880) +
         C92127 * (2 * C92879 + ae * C92880 +
                   C92127 * (C92263 + ae * C92127 * C92188 +
                             C92127 * (C92195 + C92127 * C92266)))) /
        C91701;
    const double C2390 = C2383 + C2384;
    const double C3104 = C3097 + C3098;
    const double C9923 = C9914 + C9915;
    const double C583 =
        (3 * (C92276 + ae * C92183 + C92012 * C92281) +
         ae * (2 * C92183 + C92012 * C92192) +
         C92012 * (2 * C92281 + ae * C92192 +
                   C92012 * (C92279 + C92198 +
                             C92012 * (C92195 +
                                       C92012 * C92085 * C92084 * C92273)))) /
        C91701;
    const double C1201 =
        (C92127 * (C92276 + ae * C92183 + C92012 * C92281)) / C91701;
    const double C1205 =
        (ae * C92176 + C92012 * C92276 + C92281 * C92235) / C91701;
    const double C5504 =
        (2 * C92127 * C92281 + C92127 * (C92281 + C92287 * C92235)) / C91701;
    const double C16134 =
        (3 * (C92281 + C92287 * C92235) +
         C92127 *
             (2 * C92127 * C92287 +
              C92127 * (C92287 + (ae * C92201 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92273) *
                                     C92235))) /
        C91701;
    const double C30774 =
        (3 * (C92276 + ae * C93148 + C92170 * C93170) +
         ae * (2 * C93148 + C92170 * C93152) +
         C92170 * (2 * C93170 + ae * C93152 +
                   C92170 * (C92279 + C92558 +
                             C92170 * (C92082 + C92170 * C92285)))) /
        C91701;
    const double C16231 =
        (3 * (C92297 + ae * C92707 + C92127 * C92892) +
         ae * (2 * C92707 + C92127 * C92880) +
         C92127 * (2 * C92892 + ae * C92880 +
                   C92127 * (C92300 + ae * C92127 * C92188 +
                             C92127 * (C92195 + C92127 * C92303)))) /
        C91701;
    const double C30869 =
        (3 * (C92297 + ae * C93161 + C92170 * C93176) +
         ae * (2 * C93161 + C92170 * C93163) +
         C92170 * (2 * C93176 + ae * C93163 +
                   C92170 * (C92300 + C93062 +
                             C92170 * (C92152 + C92170 * C92303)))) /
        C91701;
    const double C2539 = C2532 + C2533;
    const double C4737 = C4728 + C4729;
    const double C3253 = C3246 + C3247;
    const double C92676 = C92012 * C92319;
    const double C93123 = C92127 * C92319;
    const double C93182 = C92170 * C92319;
    const double C718 =
        (3 * (C92314 + C92319 * C92016) +
         C92012 * (2 * C92012 * C92319 +
                   C92012 * (C92319 + (C92083 + C92309 * C92084 * C92085) *
                                          C92019 * C92016))) /
        C91701;
    const double C1317 = (C92127 * (C92314 + C92319 * C92016)) / C91701;
    const double C1321 = (C92012 * C92314 + C92012 * C92319 * C92235) / C91701;
    const double C1898 = (2 * ae * (C92176 + C92181 * C92016) +
                          C92170 * (C92314 + C92319 * C92016)) /
                         C91701;
    const double C3994 =
        (2 * ae * C92127 * C92183 + C92170 * C92127 * C92012 * C92319) / C91701;
    const double C5675 =
        (2 * C92127 * C92314 + C92127 * (C92314 + C92319 * C92235)) / C91701;
    const double C9406 = (2 * ae * (C92176 + C92181 * C92235) +
                          C92170 * (C92314 + C92319 * C92235)) /
                         C91701;
    const double C16307 =
        (3 * (C92314 + C92319 * C92235) +
         C92127 * (2 * C92127 * C92319 + C92127 * (C92319 + C92324 * C92235))) /
        C91701;
    const double C19984 =
        (2 * ae * (2 * C92707 + C92127 * C92880) +
         C92170 * (2 * C92127 * C92319 + C92127 * (C92319 + C92324 * C92235))) /
        C91701;
    const double C38206 = C38193 + C38194;
    const double C27979 = C27967 + C27968;
    const double C33142 = C33137 + C33138;
    const double C35518 = C35501 + C35502;
    const double C216 = C188 * C112;
    const double C303 = C275 * C112;
    const double C436 = C418 * C112;
    const double C731 = C713 * C112;
    const double C2061 = C188 * C804;
    const double C2147 = C275 * C804;
    const double C2297 = C418 * C804;
    const double C2611 = C713 * C804;
    const double C4201 = C4179 * C804;
    const double C4457 = C4441 * C804;
    const double C5113 = C275 * C810;
    const double C5681 = C713 * C810;
    const double C6652 = C4179 * C810;
    const double C6990 = C4441 * C810;
    const double C2775 = C188 * C1385;
    const double C2861 = C275 * C1385;
    const double C3011 = C418 * C1385;
    const double C3325 = C713 * C1385;
    const double C9667 = C9645 * C1385;
    const double C10182 = C10166 * C1385;
    const double C11097 = C188 * C1391;
    const double C11397 = C418 * C1391;
    const double C13070 = C9645 * C1391;
    const double C13728 = C10166 * C1391;
    const double C7643 = C4179 * C3411;
    const double C7763 = C275 * C3411;
    const double C7969 = C4441 * C3411;
    const double C8409 = C713 * C3411;
    const double C11970 = C188 * C3411;
    const double C12082 = C9645 * C3411;
    const double C12298 = C418 * C3411;
    const double C12726 = C10166 * C3411;
    const double C31166 = C188 * C5776;
    const double C31482 = C418 * C5776;
    const double C37257 = C4179 * C5776;
    const double C37577 = C4441 * C5776;
    const double C57163 = C9645 * C5776;
    const double C57979 = C10166 * C5776;
    const double C20674 = C275 * C15550;
    const double C21045 = C713 * C15550;
    const double C27963 = C9645 * C16395;
    const double C28624 = C10166 * C16395;
    const double C38197 = C4179 * C16395;
    const double C38537 = C4441 * C16395;
    const double C23015 = C275 * C19095;
    const double C23467 = C713 * C19095;
    const double C24391 = C9645 * C19095;
    const double C24901 = C10166 * C19095;
    const double C28302 = C93718 * C16807;
    const double C35044 = C28721 * C16807;
    const double C86445 = C93718 * C16807;
    const double C87934 = C70728 * C16807;
    const double C40043 = C188 * C30188;
    const double C40224 = C418 * C30188;
    const double C13415 = C13409 + C13410;
    const double C7333 = C7327 + C7328;
    const double C92975 = C92968 + C92973;
    const double C35396 = (3 * (C92688 + C92532 * C92309) +
                           C92170 * (2 * C93244 + C92170 * C93250)) /
                          C91696;
    const double C93302 = C93295 + C93300;
    const double C92167 = C92157 + C92165;
    const double C30304 = (3 * (C92140 + C92151 * C92309) +
                           C92170 * (2 * C93165 + C92170 * C93167)) /
                          C91696;
    const double C93308 = C93306 + C93307;
    const double C92210 = C92200 + C92208;
    const double C92718 = C92170 * C92717;
    const double C92927 = C92170 * C92887;
    const double C15745 = (3 * (C92183 + C92194 * C92235) +
                           C92127 * (2 * C92712 + C92127 * C92887)) /
                          C91696;
    const double C93031 = C93025 + C93029;
    const double C35688 = C93585 * C25296;
    const double C40161 = C93585 * C30486;
    const double C14748 = C91722 * C115;
    const double C15872 = C91722 * C4898;
    const double C15862 = C91722 * C809;
    const double C15858 = C91722 * C888;
    const double C15854 = C91722 * C806;
    const double C16145 = C91722 * C5097;
    const double C16143 = C91722 * C957;
    const double C16138 = C91722 * C954;
    const double C17490 = C91722 * C810;
    const double C17486 = C91722 * C887;
    const double C17482 = C91722 * C805;
    const double C17824 = C91722 * C953;
    const double C19454 = C91722 * C3410;
    const double C19446 = C91722 * C8521;
    const double C19779 = C91722 * C3566;
    const double C19775 = C91722 * C8750;
    const double C30509 = C91722 * C10965;
    const double C30505 = C91722 * C11081;
    const double C30503 = C91722 * C1472;
    const double C30499 = C91722 * C1390;
    const double C30495 = C91722 * C1469;
    const double C30491 = C91722 * C1387;
    const double C30779 = C91722 * C1535;
    const double C32365 = C91722 * C1391;
    const double C32361 = C91722 * C1468;
    const double C32357 = C91722 * C1386;
    const double C32688 = C91722 * C1534;
    const double C33346 = C91722 * C5776;
    const double C78841 = C91722 * C3411;
    const double C107 =
        (C91722 / C91702 - (0 * be) / C91696) / C91702 - (0 * be) / C91696;
    const double C42386 = C91722 / C91702 - (0 * be) / C91696;
    const double C91724 = C91721 / C91696;
    const double C5234 = C4085 * C810;
    const double C5226 = C4085 * C887;
    const double C5220 = C4085 * C805;
    const double C5511 = C4085 * C953;
    const double C6878 = C4085 * C804;
    const double C8875 = C4085 * C3411;
    const double C11298 = C4085 * C1391;
    const double C11290 = C4085 * C1468;
    const double C11284 = C4085 * C1386;
    const double C11580 = C4085 * C1534;
    const double C13192 = C4085 * C1385;
    const double C20058 = C20049 * C115;
    const double C20054 = C20049 * C4900;
    const double C20053 = C20049 * C816;
    const double C20052 = C20049 * C815;
    const double C20051 = C20049 * C114;
    const double C20747 = C20049 * C15550;
    const double C20741 = C20049 * C4897;
    const double C20737 = C20049 * C808;
    const double C20735 = C20049 * C889;
    const double C20733 = C20049 * C807;
    const double C20928 = C20049 * C5096;
    const double C20925 = C20049 * C956;
    const double C20922 = C20049 * C955;
    const double C21109 = C20049 * C5778;
    const double C21108 = C20049 * C1397;
    const double C21107 = C20049 * C1396;
    const double C21106 = C20049 * C3413;
    const double C21105 = C20049 * C8523;
    const double C21828 = C20049 * C4898;
    const double C21824 = C20049 * C809;
    const double C21822 = C20049 * C888;
    const double C21820 = C20049 * C806;
    const double C22047 = C20049 * C5097;
    const double C22044 = C20049 * C957;
    const double C22041 = C20049 * C954;
    const double C23102 = C20049 * C3409;
    const double C23098 = C20049 * C8520;
    const double C23094 = C20049 * C19095;
    const double C23324 = C20049 * C3565;
    const double C23321 = C20049 * C8749;
    const double C25017 = C20049 * C25003;
    const double C25016 = C20049 * C10967;
    const double C25317 = C20049 * C1389;
    const double C25315 = C20049 * C1471;
    const double C25313 = C20049 * C5775;
    const double C25309 = C20049 * C16395;
    const double C25301 = C20049 * C1470;
    const double C25299 = C20049 * C1388;
    const double C25596 = C20049 * C1536;
    const double C26206 = C20049 * C8521;
    const double C26202 = C20049 * C3410;
    const double C26522 = C20049 * C8750;
    const double C26517 = C20049 * C3566;
    const double C27138 = C20049 * C1469;
    const double C27136 = C20049 * C1387;
    const double C27442 = C20049 * C1535;
    const double C35693 = C20049 * C10964;
    const double C35691 = C20049 * C11080;
    const double C35689 = C20049 * C25001;
    const double C36545 = C20049 * C5776;
    const double C37469 = C20049 * C1472;
    const double C37467 = C20049 * C1390;
    const double C40162 = C20049 * C30188;
    const double C41329 = C20049 * C11081;
    const double C41327 = C20049 * C10965;
    const double C47579 = C47576 * C115;
    const double C48675 = C47576 * C4898;
    const double C48665 = C47576 * C809;
    const double C48661 = C47576 * C888;
    const double C48657 = C47576 * C806;
    const double C48936 = C47576 * C5097;
    const double C48934 = C47576 * C957;
    const double C48929 = C47576 * C954;
    const double C50237 = C47576 * C810;
    const double C50233 = C47576 * C887;
    const double C50229 = C47576 * C805;
    const double C50571 = C47576 * C953;
    const double C52165 = C47576 * C3410;
    const double C52157 = C47576 * C8521;
    const double C52481 = C47576 * C3566;
    const double C52477 = C47576 * C8750;
    const double C54939 = C47576 * C1390;
    const double C54935 = C47576 * C1472;
    const double C54931 = C47576 * C5776;
    const double C54925 = C47576 * C1469;
    const double C54921 = C47576 * C1387;
    const double C55285 = C47576 * C1535;
    const double C56065 = C47576 * C3411;
    const double C57307 = C47576 * C1468;
    const double C57303 = C47576 * C1386;
    const double C57713 = C47576 * C1534;
    const double C72446 = C47576 * C10965;
    const double C72442 = C47576 * C11081;
    const double C74218 = C47576 * C1391;
    const double C93854 = C93817 - C93841;
    const double C93842 = C93819 - C93820;
    const double C48383 = C47568 * C823;
    const double C48678 = C47568 * C4900;
    const double C48674 = C47568 * C5212;
    const double C48668 = C47568 * C1022;
    const double C48664 = C47568 * C816;
    const double C48660 = C47568 * C1021;
    const double C48656 = C47568 * C815;
    const double C48939 = C47568 * C5503;
    const double C48933 = C47568 * C1204;
    const double C48928 = C47568 * C1203;
    const double C50570 = C47568 * C1202;
    const double C52168 = C47568 * C3413;
    const double C52164 = C47568 * C3639;
    const double C52160 = C47568 * C8523;
    const double C52156 = C47568 * C8865;
    const double C52484 = C47568 * C3853;
    const double C52480 = C47568 * C9195;
    const double C54556 = C47568 * C1404;
    const double C54942 = C47568 * C1397;
    const double C54938 = C47568 * C1603;
    const double C54934 = C47568 * C5778;
    const double C54930 = C47568 * C6030;
    const double C54924 = C47568 * C1602;
    const double C54920 = C47568 * C1396;
    const double C55294 = C47568 * C1785;
    const double C55290 = C47568 * C6273;
    const double C55284 = C47568 * C1784;
    const double C57306 = C47568 * C1601;
    const double C72449 = C47568 * C10967;
    const double C72445 = C47568 * C11276;
    const double C72690 = C47568 * C11572;
    const double C91823 = C91822 / C91696;
    const double C14862 = C14839 * C805;
    const double C14844 = C14839 * C806;
    const double C15119 = C14839 * C887;
    const double C15110 = C14839 * C888;
    const double C15104 = C14839 * C889;
    const double C15387 = C14839 * C953;
    const double C15381 = C14839 * C954;
    const double C17266 = C14839 * C809;
    const double C17934 = C14839 * C957;
    const double C18252 = C14839 * C3410;
    const double C18885 = C14839 * C3566;
    const double C25129 = C14839 * C5775;
    const double C25123 = C14839 * C5778;
    const double C25117 = C14839 * C3413;
    const double C25111 = C14839 * C3409;
    const double C25686 = C14839 * C3565;
    const double C27851 = C14839 * C8523;
    const double C27845 = C14839 * C8520;
    const double C28519 = C14839 * C8749;
    const double C14860 = C14840 * C810;
    const double C14846 = C14840 * C809;
    const double C15383 = C14840 * C957;
    const double C17264 = C14840 * C4898;
    const double C17932 = C14840 * C5097;
    const double C18250 = C14840 * C8521;
    const double C18883 = C14840 * C8750;
    const double C25127 = C14840 * C16395;
    const double C25119 = C14840 * C8523;
    const double C25113 = C14840 * C8520;
    const double C25688 = C14840 * C8749;
    const double C27847 = C14840 * C19095;
    const double C42502 = C42480 * C804;
    const double C42492 = C42480 * C805;
    const double C42484 = C42480 * C806;
    const double C42756 = C42480 * C887;
    const double C42750 = C42480 * C888;
    const double C42745 = C42480 * C889;
    const double C43029 = C42480 * C953;
    const double C43024 = C42480 * C954;
    const double C44821 = C42480 * C809;
    const double C44813 = C42480 * C810;
    const double C45488 = C42480 * C957;
    const double C45812 = C42480 * C3410;
    const double C45804 = C42480 * C3411;
    const double C46446 = C42480 * C3566;
    const double C54707 = C42480 * C5775;
    const double C54703 = C42480 * C5778;
    const double C54699 = C42480 * C5776;
    const double C54693 = C42480 * C3413;
    const double C54689 = C42480 * C3409;
    const double C55401 = C42480 * C3565;
    const double C55791 = C42480 * C8521;
    const double C56613 = C42480 * C8750;
    const double C58257 = C42480 * C8523;
    const double C58253 = C42480 * C8520;
    const double C59065 = C42480 * C8749;
    const double C88366 = C42480 * C25001;
    const double C88362 = C42480 * C25003;
    const double C90916 = C42480 * C16395;
    const double C20115 =
        (C91852 / C91702 - (0 * be) / C91696) / C91702 - (0 * be) / C91696;
    const double C47671 = C91852 / C91702 - (0 * be) / C91696;
    const double C4470 = C4460 + C4461;
    const double C4467 = C4451 + C4452;
    const double C4465 = C4445 + C4446;
    const double C7003 = C6996 + C5332;
    const double C7001 = C6992 + C5330;
    const double C7982 = C7975 + C6114;
    const double C7980 = C7971 + C6112;
    const double C35802 = C35792 + C35793;
    const double C35799 = C35785 + C6117;
    const double C35797 = C35781 + C6116;
    const double C4468 = C4454 + C4455;
    const double C4466 = C4448 + C4449;
    const double C642 = C218 * C275;
    const double C10077 = C218 * C9644;
    const double C658 = C654 * C93706;
    const double C10078 = C654 * C93829;
    const double C29305 = C654 * C28719;
    const double C11116 = C11108 * C4075;
    const double C30309 = C11108 * C93815;
    const double C40036 = C11108 * C93585;
    const double C72278 = C11108 * C47568;
    const double C40035 = C11107 * C20049;
    const double C444 = C440 + C428;
    const double C11410 = C11406 + C1669;
    const double C93855 = C93830 - C93849;
    const double C4216 = C4203 + C4204;
    const double C4209 = C4189 + C4190;
    const double C4207 = C4185 + C4186;
    const double C4205 = C4181 + C4182;
    const double C4739 = C4732 + C4733;
    const double C4736 = C4726 + C4727;
    const double C4734 = C4721 + C4722;
    const double C6671 = C6662 + C6663;
    const double C6667 = C6654 + C6655;
    const double C7334 = C7329 + C7330;
    const double C7332 = C7325 + C7326;
    const double C7662 = C7653 + C7654;
    const double C7658 = C7645 + C7646;
    const double C8310 = C8305 + C8306;
    const double C8308 = C8301 + C8302;
    const double C35522 = C35509 + C35510;
    const double C35520 = C35505 + C35506;
    const double C35517 = C35499 + C35500;
    const double C35515 = C35495 + C35496;
    const double C35513 = C35491 + C35492;
    const double C35511 = C35487 + C35488;
    const double C36060 = C36048 + C36049;
    const double C38209 = C38199 + C38200;
    const double C38205 = C38191 + C38192;
    const double C93850 = C93833 - C93834;
    const double C42505 = C42379 * C192;
    const double C42501 = C42379 * C198;
    const double C42495 = C42379 * C197;
    const double C42491 = C42379 * C191;
    const double C42487 = C42379 * C196;
    const double C42483 = C42379 * C190;
    const double C42754 = C42379 * C421;
    const double C42748 = C42379 * C420;
    const double C43034 = C42379 * C638;
    const double C43028 = C42379 * C637;
    const double C43023 = C42379 * C636;
    const double C44824 = C42379 * C888;
    const double C44816 = C42379 * C887;
    const double C45491 = C42379 * C1260;
    const double C45487 = C42379 * C1259;
    const double C45815 = C42379 * C1469;
    const double C45811 = C42379 * C1477;
    const double C45807 = C42379 * C1468;
    const double C46449 = C42379 * C1841;
    const double C46445 = C42379 * C1840;
    const double C54710 = C42379 * C1471;
    const double C54706 = C42379 * C1479;
    const double C54702 = C42379 * C1472;
    const double C54692 = C42379 * C1478;
    const double C54688 = C42379 * C1470;
    const double C55054 = C42379 * C1660;
    const double C55410 = C42379 * C1843;
    const double C55406 = C42379 * C1844;
    const double C55400 = C42379 * C1842;
    const double C58256 = C42379 * C3495;
    const double C88369 = C42379 * C11080;
    const double C88365 = C42379 * C11083;
    const double C88854 = C42379 * C11667;
    const double C90919 = C42379 * C5873;
    const double C14838 =
        ((-(0 * be) / C91696) / C91702 -
         ((0 - (C91760 * C91813) / C91696) * be) / C91696) /
            C91702 -
        ((C91760 * ((-C91813 / C91696) / C91702 -
                    ((C93680 - (C91760 * C91814) / C91696) * be) / C91696) +
          C42379) *
         be) /
            C91696 +
        (-C91814 / C91696) / C91702 - (0 * be) / C91696;
    const double C91893 = C91892 / C91696;
    const double C28900 = C28877 * C1386;
    const double C28882 = C28877 * C1387;
    const double C29146 = C28877 * C1468;
    const double C29140 = C28877 * C1469;
    const double C29409 = C28877 * C1534;
    const double C29400 = C28877 * C1535;
    const double C29394 = C28877 * C1536;
    const double C30113 = C28877 * C8750;
    const double C30110 = C28877 * C8749;
    const double C30107 = C28877 * C3565;
    const double C30104 = C28877 * C3566;
    const double C31276 = C28877 * C3410;
    const double C32247 = C28877 * C1390;
    const double C32581 = C28877 * C1472;
    const double C34793 = C28877 * C8520;
    const double C34787 = C28877 * C8523;
    const double C34781 = C28877 * C3413;
    const double C34775 = C28877 * C3409;
    const double C38317 = C28877 * C5775;
    const double C38311 = C28877 * C5778;
    const double C28898 = C28878 * C1391;
    const double C28884 = C28878 * C1390;
    const double C29142 = C28878 * C1472;
    const double C31274 = C28878 * C5776;
    const double C32245 = C28878 * C10965;
    const double C32579 = C28878 * C11081;
    const double C34791 = C28878 * C16395;
    const double C34783 = C28878 * C5778;
    const double C34777 = C28878 * C5775;
    const double C38315 = C28878 * C25001;
    const double C38309 = C28878 * C25003;
    const double C59448 = C59426 * C1385;
    const double C59438 = C59426 * C1386;
    const double C59430 = C59426 * C1387;
    const double C59695 = C59426 * C1468;
    const double C59690 = C59426 * C1469;
    const double C59961 = C59426 * C1534;
    const double C59955 = C59426 * C1535;
    const double C59950 = C59426 * C1536;
    const double C60666 = C59426 * C8750;
    const double C60664 = C59426 * C8749;
    const double C60661 = C59426 * C3565;
    const double C60659 = C59426 * C3566;
    const double C61758 = C59426 * C3410;
    const double C61750 = C59426 * C3411;
    const double C62730 = C59426 * C1390;
    const double C62722 = C59426 * C1391;
    const double C63061 = C59426 * C1472;
    const double C65495 = C59426 * C8520;
    const double C65491 = C59426 * C8523;
    const double C65487 = C59426 * C8521;
    const double C65481 = C59426 * C3413;
    const double C65477 = C59426 * C3409;
    const double C68643 = C59426 * C5776;
    const double C69845 = C59426 * C5775;
    const double C69841 = C59426 * C5778;
    const double C82756 = C59426 * C19095;
    const double C86118 = C59426 * C16395;
    const double C39147 =
        (C91918 / C91702 - (0 * be) / C91696) / C91702 - (0 * be) / C91696;
    const double C70881 = C91918 / C91702 - (0 * be) / C91696;
    const double C10195 = C10185 + C10186;
    const double C10192 = C10176 + C10177;
    const double C10190 = C10170 + C10171;
    const double C12739 = C12732 + C10882;
    const double C12737 = C12728 + C10880;
    const double C13741 = C13734 + C11763;
    const double C13739 = C13730 + C11761;
    const double C24914 = C24904 + C24905;
    const double C24911 = C24897 + C10885;
    const double C24909 = C24893 + C10884;
    const double C28637 = C28630 + C14658;
    const double C28635 = C28626 + C25779;
    const double C10193 = C10179 + C10180;
    const double C10191 = C10173 + C10174;
    const double C24912 = C24899 + C10886;
    const double C24910 = C24895 + C10883;
    const double C508 = C305 * C188;
    const double C4558 = C305 * C4178;
    const double C524 = C520 * C93680;
    const double C4559 = C520 * C93828;
    const double C15220 = C520 * C14739;
    const double C42860 = C520 * C42379;
    const double C5132 = C5124 * C4075;
    const double C15750 = C5124 * C93815;
    const double C20667 = C5124 * C93585;
    const double C48567 = C5124 * C47568;
    const double C20666 = C5123 * C20049;
    const double C739 = C735 + C723;
    const double C5694 = C5690 + C1328;
    const double C93856 = C93835 - C93852;
    const double C9682 = C9669 + C9670;
    const double C9675 = C9655 + C9656;
    const double C9673 = C9651 + C9652;
    const double C9671 = C9647 + C9648;
    const double C9925 = C9918 + C9919;
    const double C9922 = C9912 + C9913;
    const double C9920 = C9907 + C9908;
    const double C12101 = C12092 + C12093;
    const double C12097 = C12084 + C12085;
    const double C12417 = C12412 + C12413;
    const double C12415 = C12408 + C12409;
    const double C13089 = C13080 + C13081;
    const double C13085 = C13072 + C13073;
    const double C13416 = C13411 + C13412;
    const double C13414 = C13407 + C13408;
    const double C24406 = C24393 + C24394;
    const double C24404 = C24389 + C24390;
    const double C24401 = C24383 + C24384;
    const double C24399 = C24379 + C24380;
    const double C24397 = C24375 + C24376;
    const double C24395 = C24371 + C24372;
    const double C24649 = C24637 + C24638;
    const double C27982 = C27973 + C27974;
    const double C27980 = C27969 + C27970;
    const double C27978 = C27965 + C27966;
    const double C27976 = C27961 + C27962;
    const double C93853 = C93838 - C93839;
    const double C59451 = C59272 * C279;
    const double C59447 = C59272 * C285;
    const double C59441 = C59272 * C284;
    const double C59437 = C59272 * C278;
    const double C59433 = C59272 * C283;
    const double C59429 = C59272 * C277;
    const double C59700 = C59272 * C504;
    const double C59694 = C59272 * C503;
    const double C59689 = C59272 * C502;
    const double C59859 = C654 * C59272;
    const double C59959 = C59272 * C716;
    const double C59953 = C59272 * C715;
    const double C61761 = C59272 * C954;
    const double C61757 = C59272 * C962;
    const double C61753 = C59272 * C953;
    const double C62071 = C59272 * C1144;
    const double C62067 = C59272 * C1143;
    const double C62733 = C59272 * C1535;
    const double C62725 = C59272 * C1534;
    const double C63064 = C59272 * C1725;
    const double C63060 = C59272 * C1724;
    const double C65498 = C59272 * C956;
    const double C65494 = C59272 * C964;
    const double C65490 = C59272 * C957;
    const double C65480 = C59272 * C963;
    const double C65476 = C59272 * C955;
    const double C65818 = C59272 * C1146;
    const double C65814 = C59272 * C1147;
    const double C65808 = C59272 * C1145;
    const double C66120 = C59272 * C1319;
    const double C68646 = C59272 * C3566;
    const double C69848 = C59272 * C3565;
    const double C69844 = C59272 * C3569;
    const double C82759 = C59272 * C5096;
    const double C82755 = C59272 * C5099;
    const double C82996 = C59272 * C5414;
    const double C86121 = C59272 * C8749;
    const double C86117 = C59272 * C8752;
    const double C28876 =
        ((-(0 * be) / C91696) / C91702 -
         ((0 - (C91763 * C91883) / C91696) * be) / C91696) /
            C91702 -
        ((C91763 * ((-C91883 / C91696) / C91702 -
                    ((C93706 - (C91763 * C91884) / C91696) * be) / C91696) +
          C59272) *
         be) /
            C91696 +
        (-C91884 / C91696) / C91702 - (0 * be) / C91696;
    const double C122 =
        ((C92015 + C92016 * C92017 * C92021) * C92019 + C92027 + C92027 +
         C92012 *
             (2 * ae * C92024 +
              C92012 *
                  (C92017 * C92021 + C92016 * bs[4] * std::pow(C92010, 4)) *
                  C92019)) /
        C91701;
    const double C896 =
        (C92027 + C92127 * (ae * C92133 + C92012 * C92137)) / C91701;
    const double C1020 =
        (C92027 + C92127 * (ae * C92133 + C92012 * C92218)) / C91701;
    const double C1543 =
        (C92027 + C92170 * (ae * C92176 + C92012 * C92180)) / C91701;
    const double C1783 =
        (C92027 + C92170 * (ae * C92176 + C92012 * C92276)) / C91701;
    const double C208 = C188 * C116;
    const double C295 = C275 * C116;
    const double C4089 = C4085 * C116;
    const double C4193 = C4178 * C116;
    const double C9659 = C9644 * C116;
    const double C14757 = C91722 * C116;
    const double C20059 = C20049 * C116;
    const double C47588 = C47576 * C116;
    const double C2067 = C188 * C814;
    const double C2153 = C275 * C814;
    const double C4187 = C4179 * C814;
    const double C5219 = C4076 * C814;
    const double C6658 = C4178 * C814;
    const double C6875 = C4075 * C814;
    const double C12088 = C9644 * C814;
    const double C14750 = C91722 * C814;
    const double C14850 = C14839 * C814;
    const double C15855 = C93590 * C814;
    const double C17481 = C93815 * C814;
    const double C20057 = C20049 * C814;
    const double C21821 = C93585 * C814;
    const double C42488 = C42480 * C814;
    const double C47581 = C47576 * C814;
    const double C48658 = C93590 * C814;
    const double C50228 = C47568 * C814;
    const double C2781 = C188 * C1395;
    const double C2867 = C275 * C1395;
    const double C7649 = C4178 * C1395;
    const double C9653 = C9645 * C1395;
    const double C11283 = C4076 * C1395;
    const double C13076 = C9644 * C1395;
    const double C13189 = C4075 * C1395;
    const double C16406 = C91722 * C1395;
    const double C22253 = C20049 * C1395;
    const double C27137 = C93585 * C1395;
    const double C28888 = C28877 * C1395;
    const double C30492 = C93590 * C1395;
    const double C32356 = C93815 * C1395;
    const double C49175 = C47576 * C1395;
    const double C54922 = C93590 * C1395;
    const double C57302 = C47568 * C1395;
    const double C59434 = C59426 * C1395;
    const double C5137 = C5129 * C4075;
    const double C15754 = C5129 * C93815;
    const double C20669 = C5129 * C93585;
    const double C48571 = C5129 * C47568;
    const double C11121 = C11113 * C4075;
    const double C30313 = C11113 * C93815;
    const double C40038 = C11113 * C93585;
    const double C72282 = C11113 * C47568;
    const double C8766 = C8764 * C4075;
    const double C19336 = C8764 * C93815;
    const double C23019 = C8764 * C93585;
    const double C52053 = C8764 * C47568;
    const double C13957 = C13955 * C4075;
    const double C33132 = C13955 * C93815;
    const double C41808 = C13955 * C93585;
    const double C74958 = C13955 * C47568;
    const double C92388 = ae * C92387;
    const double C891 =
        (C92012 * C92133 + C92127 * C92387 + C92127 * C92035 * ae) / C91696;
    const double C3492 = (C92170 * C92387) / C91696;
    const double C92522 = ae * C92521;
    const double C1538 =
        (C92012 * C92176 + C92170 * C92521 + C92170 * C92035 * ae) / C91696;
    const double C5128 = C5117 + C5118;
    const double C5692 = C5683 + C1330;
    const double C26100 = C26092 + C26093;
    const double C26730 = C26724 + C10887;
    const double C11112 = C11101 + C11102;
    const double C11408 = C11399 + C1671;
    const double C37263 = C37255 + C37256;
    const double C37581 = C37575 + C6119;
    const double C7772 = C7767 + C7768;
    const double C8416 = C8412 + C3999;
    const double C12100 = C12090 + C12091;
    const double C12738 = C12730 + C10881;
    const double C57170 = C57165 + C57166;
    const double C57984 = C57981 + C14660;
    const double C3496 = (C92170 * (C92044 + C92127 * C92148)) / C91701;
    const double C92045 = C92024 + C92043;
    const double C92335 = ae * C92334;
    const double C3414 = (C92170 * C92334) / C91696;
    const double C92437 = ae * C92436;
    const double C5115 = C275 * C817;
    const double C5237 = C4076 * C817;
    const double C6656 = C4179 * C817;
    const double C14752 = C91722 * C817;
    const double C14852 = C14840 * C817;
    const double C15863 = C93590 * C817;
    const double C17260 = C14839 * C817;
    const double C17489 = C93815 * C817;
    const double C20056 = C20049 * C817;
    const double C21825 = C93585 * C817;
    const double C26096 = C9644 * C817;
    const double C44817 = C42480 * C817;
    const double C47583 = C47576 * C817;
    const double C48666 = C93590 * C817;
    const double C50236 = C47568 * C817;
    const double C11099 = C188 * C1398;
    const double C11301 = C4076 * C1398;
    const double C13074 = C9645 * C1398;
    const double C16409 = C91722 * C1398;
    const double C26836 = C20049 * C1398;
    const double C28890 = C28878 * C1398;
    const double C30500 = C93590 * C1398;
    const double C32241 = C28877 * C1398;
    const double C32364 = C93815 * C1398;
    const double C37259 = C4178 * C1398;
    const double C37468 = C93585 * C1398;
    const double C49178 = C47576 * C1398;
    const double C54940 = C93590 * C1398;
    const double C62726 = C59426 * C1398;
    const double C74217 = C47568 * C1398;
    const double C6350 =
        (ae * C92176 + C92127 * C92297 + ae * C92170 * C92635 +
         C92170 * (C92638 + C92170 * (C92184 + C92127 * C92300))) /
        C91701;
    const double C92639 = C92133 + C92637;
    const double C92737 = ae * C92736;
    const double C92791 = C92176 + C92789;
    const double C4910 = C4076 * C822;
    const double C6533 = C4075 * C822;
    const double C15560 = C93590 * C822;
    const double C17139 = C93815 * C822;
    const double C21598 = C93585 * C822;
    const double C48385 = C93590 * C822;
    const double C49886 = C47568 * C822;
    const double C4921 = C4075 * C824;
    const double C15562 = C93815 * C824;
    const double C20539 = C93585 * C824;
    const double C48387 = C47568 * C824;
    const double C10977 = C4076 * C1403;
    const double C12847 = C4075 * C1403;
    const double C26835 = C93585 * C1403;
    const double C30198 = C93590 * C1403;
    const double C32014 = C93815 * C1403;
    const double C54558 = C93590 * C1403;
    const double C56882 = C47568 * C1403;
    const double C10985 = C4075 * C1405;
    const double C25015 = C93585 * C1405;
    const double C30200 = C93815 * C1405;
    const double C54566 = C47568 * C1405;
    const double C8535 = C4075 * C3417;
    const double C19109 = C93815 * C3417;
    const double C22863 = C93585 * C3417;
    const double C51836 = C47568 * C3417;
    const double C435 = C93680 * C422;
    const double C4462 = C93828 * C422;
    const double C42763 = C42379 * C422;
    const double C2302 = C93680 * C1078;
    const double C4450 = C93694 * C1078;
    const double C6997 = C93828 * C1078;
    const double C15111 = C14740 * C1078;
    const double C17607 = C14739 * C1078;
    const double C42751 = C93694 * C1078;
    const double C45158 = C42379 * C1078;
    const double C3016 = C93680 * C1659;
    const double C7976 = C93828 * C1659;
    const double C18567 = C14739 * C1659;
    const double C46125 = C42379 * C1659;
    const double C11402 = C93680 * C1661;
    const double C25422 = C14739 * C1661;
    const double C35786 = C93828 * C1661;
    const double C55064 = C42379 * C1661;
    const double C14253 = C93680 * C3709;
    const double C25414 = C14740 * C3709;
    const double C28186 = C14739 * C3709;
    const double C35784 = C93694 * C3709;
    const double C38532 = C93828 * C3709;
    const double C55056 = C93694 * C3709;
    const double C58658 = C42379 * C3709;
    const double C730 = C93706 * C717;
    const double C10187 = C93829 * C717;
    const double C59968 = C59272 * C717;
    const double C2616 = C93706 * C1318;
    const double C12733 = C93829 * C1318;
    const double C31902 = C28719 * C1318;
    const double C62385 = C59272 * C1318;
    const double C5686 = C93706 * C1320;
    const double C24898 = C93829 * C1320;
    const double C35300 = C28719 * C1320;
    const double C66130 = C59272 * C1320;
    const double C3330 = C93706 * C1899;
    const double C10175 = C93718 * C1899;
    const double C13735 = C93829 * C1899;
    const double C29401 = C28720 * C1899;
    const double C32905 = C28719 * C1899;
    const double C59956 = C93718 * C1899;
    const double C63387 = C59272 * C1899;
    const double C9411 = C93706 * C3993;
    const double C24896 = C93718 * C3993;
    const double C28631 = C93829 * C3993;
    const double C35292 = C28720 * C3993;
    const double C38977 = C28719 * C3993;
    const double C66122 = C93718 * C3993;
    const double C70642 = C59272 * C3993;
    const double C92710 = ae * C92709;
    const double C5950 =
        (C92127 * C92176 + C92170 * C92709 + C92170 * C92634 * ae) / C91696;
    const double C1080 =
        ((C92015 + C92235 * C92017 * C92021) * C92019 + C92384 + C92384 +
         C92127 * (2 * ae * C92133 + C92127 * C92240)) /
        C91701;
    const double C3923 =
        (C92384 + C92170 * (ae * C92176 + C92127 * C92297)) / C91701;
    const double C1089 = C188 * C890;
    const double C5335 = C4178 * C890;
    const double C5333 = C4179 * C890;
    const double C5424 = C275 * C890;
    const double C15105 = C14840 * C890;
    const double C15970 = C14839 * C890;
    const double C20739 = C20049 * C890;
    const double C24641 = C9644 * C890;
    const double C43583 = C42480 * C890;
    const double C3714 = C188 * C3491;
    const double C6115 = C4179 * C3491;
    const double C8988 = C4178 * C3491;
    const double C9095 = C275 * C3491;
    const double C13947 = C93680 * C3491;
    const double C16726 = C14839 * C3491;
    const double C23100 = C20049 * C3491;
    const double C24639 = C9645 * C3491;
    const double C25112 = C14740 * C3491;
    const double C27844 = C14739 * C3491;
    const double C28307 = C9644 * C3491;
    const double C35039 = C28877 * C3491;
    const double C35490 = C93694 * C3491;
    const double C38188 = C93828 * C3491;
    const double C44291 = C42480 * C3491;
    const double C54690 = C93694 * C3491;
    const double C58252 = C42379 * C3491;
    const double C65809 = C59426 * C3491;
    const double C6118 = C4179 * C5870;
    const double C14256 = C188 * C5870;
    const double C16729 = C14839 * C5870;
    const double C25130 = C14740 * C5870;
    const double C25311 = C20049 * C5870;
    const double C28305 = C9645 * C5870;
    const double C33136 = C93680 * C5870;
    const double C34958 = C4178 * C5870;
    const double C35041 = C28878 * C5870;
    const double C35498 = C93694 * C5870;
    const double C38196 = C93828 * C5870;
    const double C38653 = C28877 * C5870;
    const double C44294 = C42480 * C5870;
    const double C54708 = C93694 * C5870;
    const double C70243 = C59426 * C5870;
    const double C90915 = C42379 * C5870;
    const double C645 = C220 * C275;
    const double C10081 = C220 * C9644;
    const double C445 = C441 + C431;
    const double C525 = C521 * C93680;
    const double C4563 = C521 * C93828;
    const double C15229 = C521 * C14739;
    const double C42864 = C521 * C42379;
    const double C648 = C222 * C275;
    const double C10088 = C222 * C9644;
    const double C446 = C442 + C434;
    const double C526 = C522 * C93680;
    const double C4568 = C522 * C93828;
    const double C42869 = C522 * C42379;
    const double C2308 = C2305 + C1086;
    const double C2534 = C2074 * C275;
    const double C12618 = C2074 * C9644;
    const double C2309 = C2306 + C1087;
    const double C2537 = C2076 * C275;
    const double C12623 = C2076 * C9644;
    const double C3022 = C3019 + C1667;
    const double C3248 = C2788 * C275;
    const double C10083 = C2788 * C9645;
    const double C11093 = C2788 * C4085;
    const double C13625 = C2788 * C9644;
    const double C29313 = C2788 * C28877;
    const double C32135 = C2788 * C91722;
    const double C59864 = C2788 * C59426;
    const double C73996 = C2788 * C47576;
    const double C3023 = C3020 + C1668;
    const double C3251 = C2790 * C275;
    const double C10079 = C2790 * C9645;
    const double C13629 = C2790 * C9644;
    const double C29306 = C2790 * C28877;
    const double C30310 = C2790 * C91722;
    const double C41185 = C2790 * C20049;
    const double C59860 = C2790 * C59426;
    const double C72279 = C2790 * C47576;
    const double C3108 = C3105 * C93680;
    const double C8097 = C3105 * C93828;
    const double C18683 = C3105 * C14739;
    const double C46244 = C3105 * C42379;
    const double C11413 = C11409 + C1670;
    const double C40037 = C11114 * C20049;
    const double C30620 = C30618 + C11403;
    const double C40039 = C30328 * C20049;
    const double C1901 =
        ((C92015 + C92309 * C92017 * C92021) * C92019 + C92518 + C92518 +
         C92170 * (2 * ae * C92176 + C92170 * C92314)) /
        C91701;
    const double C3783 =
        (C92518 + C92127 * (ae * C92133 + C92170 * C92260)) / C91701;
    const double C1910 = C275 * C1537;
    const double C11677 = C188 * C1537;
    const double C11766 = C9644 * C1537;
    const double C11764 = C9645 * C1537;
    const double C25602 = C20049 * C1537;
    const double C29395 = C28878 * C1537;
    const double C30958 = C28877 * C1537;
    const double C36052 = C4178 * C1537;
    const double C61444 = C59426 * C1537;
    const double C2394 = C2391 * C93680;
    const double C4561 = C2391 * C93694;
    const double C7116 = C2391 * C93828;
    const double C15222 = C2391 * C14740;
    const double C17722 = C2391 * C14739;
    const double C42862 = C2391 * C93694;
    const double C45277 = C2391 * C42379;
    const double C511 = C307 * C188;
    const double C4562 = C307 * C4178;
    const double C659 = C655 * C93706;
    const double C10082 = C655 * C93829;
    const double C29314 = C655 * C28719;
    const double C59863 = C655 * C59272;
    const double C740 = C736 + C726;
    const double C514 = C309 * C188;
    const double C4569 = C309 * C4178;
    const double C660 = C656 * C93706;
    const double C10087 = C656 * C93829;
    const double C59868 = C656 * C59272;
    const double C741 = C737 + C729;
    const double C2622 = C2619 + C1326;
    const double C2385 = C2160 * C188;
    const double C4564 = C2160 * C4179;
    const double C5109 = C2160 * C4085;
    const double C7113 = C2160 * C4178;
    const double C15228 = C2160 * C14839;
    const double C17376 = C2160 * C91722;
    const double C42865 = C2160 * C42480;
    const double C50123 = C2160 * C47576;
    const double C2623 = C2620 + C1327;
    const double C2388 = C2162 * C188;
    const double C4560 = C2162 * C4179;
    const double C7117 = C2162 * C4178;
    const double C15221 = C2162 * C14839;
    const double C15751 = C2162 * C91722;
    const double C21748 = C2162 * C20049;
    const double C42861 = C2162 * C42480;
    const double C48568 = C2162 * C47576;
    const double C2543 = C2540 * C93706;
    const double C12622 = C2540 * C93829;
    const double C31795 = C2540 * C28719;
    const double C62278 = C2540 * C59272;
    const double C5697 = C5693 + C1329;
    const double C20668 = C5130 * C20049;
    const double C3336 = C3333 + C1907;
    const double C3099 = C2874 * C188;
    const double C8093 = C2874 * C4178;
    const double C3337 = C3334 + C1908;
    const double C3102 = C2876 * C188;
    const double C8098 = C2876 * C4178;
    const double C3257 = C3254 * C93706;
    const double C10080 = C3254 * C93718;
    const double C13628 = C3254 * C93829;
    const double C29307 = C3254 * C28720;
    const double C32800 = C3254 * C28719;
    const double C59861 = C3254 * C93718;
    const double C63280 = C3254 * C59272;
    const double C9416 = C9415 + C3998;
    const double C23020 = C8765 * C20049;
    const double C16319 = C16317 + C5687;
    const double C20670 = C15769 * C20049;
    const double C19992 = C19991 + C9412;
    const double C23018 = C19339 * C20049;
    const double C92081 = C92067 + C92071;
    const double C5874 =
        (C92044 + C92127 * C92148 + (C92071 + C92127 * C92162) * C92309) /
        C91701;
    const double C92073 = C92037 + C92070;
    const double C92332 = ae * C92330;
    const double C92576 = C92170 * C92330;
    const double C92619 = 2 * C92330;
    const double C5779 = (C92334 + C92330 * C92309) / C91696;
    const double C92342 = C92042 + C92341;
    const double C92434 = ae * C92432;
    const double C92759 = 2 * C92432;
    const double C92444 = C92042 + C92443;
    const double C92974 = C92966 + C92972;
    const double C92984 = C92980 + C92983;
    const double C35602 =
        (3 * (C93105 + ae * C93244 + C92170 * C93249) +
         ae * (2 * C93244 + C92170 * C93250) +
         C92170 * (2 * C93249 + ae * C93250 +
                   C92170 * (C93245 + ae * C92170 * C93246 +
                             C92170 * (ae * C93246 + C92170 * C92127 *
                                                         std::pow(C92018, 7) *
                                                         bs[7] * C92174)))) /
        C91701;
    const double C35965 =
        (3 * (C93118 + ae * C93244 + C92170 * C93261) +
         ae * (2 * C93244 + C92170 * C93250) +
         C92170 * (2 * C93261 + ae * C93250 +
                   C92170 * (C93259 + ae * C92170 * C93246 +
                             C92170 * (ae * C93246 + C92170 * C92127 *
                                                         std::pow(C92018, 7) *
                                                         bs[7] * C92273)))) /
        C91701;
    const double C38310 = C28721 * C25220;
    const double C91025 = C70728 * C25220;
    const double C35968 = C93585 * C25593;
    const double C93301 = C93293 + C93299;
    const double C93314 = C93310 + C93313;
    const double C27960 = C93718 * C16567;
    const double C34786 = C28721 * C16567;
    const double C86115 = C93718 * C16567;
    const double C87680 = C70728 * C16567;
    const double C25599 = C93585 * C16883;
    const double C23014 = C93706 * C19325;
    const double C24388 = C93718 * C19325;
    const double C82753 = C93718 * C19325;
    const double C23093 = C93585 * C19439;
    const double C23319 = C93585 * C19772;
    const double C20543 = C20049 * C15552;
    const double C20672 = C275 * C15552;
    const double C20748 = C93585 * C15552;
    const double C21110 = C20049 * C16397;
    const double C25121 = C14840 * C16397;
    const double C25310 = C93585 * C16397;
    const double C27959 = C9645 * C16397;
    const double C34785 = C28878 * C16397;
    const double C38201 = C4179 * C16397;
    const double C86114 = C59426 * C16397;
    const double C90920 = C42480 * C16397;
    const double C21104 = C20049 * C19097;
    const double C23013 = C275 * C19097;
    const double C23095 = C93585 * C19097;
    const double C24387 = C9645 * C19097;
    const double C27853 = C14840 * C19097;
    const double C82752 = C59426 * C19097;
    const double C25018 = C20049 * C25004;
    const double C35403 = C20049 * C30190;
    const double C40041 = C188 * C30190;
    const double C40163 = C93585 * C30190;
    const double C92072 = C92054 + C92069;
    const double C3418 =
        (2 * ae * C92170 * C92127 * C92037 + C92012 * C92170 * C92328) / C91701;
    const double C5781 = (C92127 * C92041 + C92328 * C92309) / C91701;
    const double C4918 = C4076 * C825;
    const double C15564 = C93590 * C825;
    const double C17143 = C93815 * C825;
    const double C21600 = C93585 * C825;
    const double C48389 = C93590 * C825;
    const double C49890 = C47568 * C825;
    const double C10983 = C4076 * C1406;
    const double C30202 = C93590 * C1406;
    const double C32018 = C93815 * C1406;
    const double C37151 = C93585 * C1406;
    const double C54564 = C93590 * C1406;
    const double C73885 = C47568 * C1406;
    const double C15570 = C93815 * C4903;
    const double C20541 = C93585 * C4903;
    const double C48395 = C47568 * C4903;
    const double C19105 = C93815 * C8526;
    const double C22861 = C93585 * C8526;
    const double C51832 = C47568 * C8526;
    const double C30208 = C93815 * C10970;
    const double C35402 = C93585 * C10970;
    const double C72194 = C47568 * C10970;
    const double C92106 = C92088 + C92103;
    const double C92656 = C92654 + C92102;
    const double C92807 = C92805 + C92102;
    const double C6198 =
        (ae * (C92192 + C92170 * (C92170 * C92206 + C92102) +
               C92170 * C92099 * ae) +
         C92127 * (C92268 + ae * C92170 * C92163 +
                   C92170 * (ae * C92163 +
                             C92170 * (C92266 + std::pow(C92018, 7) * bs[7] *
                                                    C92257 * C92016)))) /
        C91701;
    const double C92657 = C92655 * ae;
    const double C5777 = C92127 * C92063 + C92655 * C92309;
    const double C92808 = C92806 * ae;
    const double C92868 = ae * C92865;
    const double C92867 = C92127 * C92865;
    const double C92913 = C92865 * C92309;
    const double C92949 = C92170 * C92865;
    const double C93211 = ae * C93206;
    const double C93209 = C92170 * C93206;
    const double C92866 = C92863 * ae;
    const double C19324 = (C92170 * (2 * C92712 + C92127 * C92887) +
                           (2 * C92645 + C92127 * C92863) * ae) /
                          C91696;
    const double C15551 = 3 * (C92035 + C92058 * C92235) +
                          C92127 * (2 * C92645 + C92127 * C92863);
    const double C16396 = C92035 + C92058 * C92235 + C92863 * C92309;
    const double C19096 = C92170 * (2 * C92645 + C92127 * C92863);
    const double C93235 = C93233 + C92862;
    const double C16808 =
        (C92665 + ae * C92170 * C92151 + C92170 * (C92155 + C92170 * C92882) +
         ae * (C92712 + C92170 * (C92170 * C92127 * C92883 + C92862) +
               C92170 * C92858 * ae) +
         C92127 * (ae * (C92194 + C92170 * (C92170 * C92883 + C92098) +
                         C92170 * C92094 * ae) +
                   C92127 * (C92882 + ae * C92170 * C92857 +
                             C92170 * (ae * C92857 + C92170 * C92012 *
                                                         std::pow(C92018, 7) *
                                                         bs[7] * C92257)))) /
        C91701;
    const double C93234 = C93232 * ae;
    const double C93210 = C93208 * ae;
    const double C30189 = 3 * (C92035 + C92058 * C92309) +
                          C92170 * (2 * C92796 + C92170 * C93208);
    const double C92112 = C92061 + C92108;
    const double C92350 = C92068 + C92347;
    const double C92452 = C92068 + C92449;
    const double C92541 = ae * C92536;
    const double C92581 = C92170 * C92536;
    const double C92681 = C92536 * C92309;
    const double C92562 = ae * C92557;
    const double C93006 = C92145 + C93001;
    const double C93056 = C92840 + C93053;
    const double C93089 = ae * C93085;
    const double C93342 = C92188 + C93338;
    const double C92111 = C92090 + C92107;
    const double C92348 = C92067 + C92345;
    const double C92450 = C92067 + C92447;
    const double C92538 = C92012 * C92533;
    const double C92579 = C92170 * C92533;
    const double C5782 = (2 * ae * (C92127 * C92037 + C92532 * C92309) +
                          C92012 * (C92328 + C92533 * C92309)) /
                         C91701;
    const double C19100 =
        (2 * ae * C92170 * (2 * C92532 + C92127 * (C92061 + C92097 * C92235)) +
         C92012 * C92170 *
             (2 * C92533 +
              C92127 * (C92104 + (C92084 * C92085 +
                                  C92016 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92235))) /
        C91701;
    const double C25005 =
        (2 * C92170 * C92328 + C92170 * (C92328 + C92533 * C92309)) / C91701;
    const double C92559 = C92012 * C92554;
    const double C92252 = C92245 + C92251;
    const double C92860 = C92127 * C92855;
    const double C92947 = C92170 * C92855;
    const double C92996 = C92987 + C92988;
    const double C93054 = C92245 + C93051;
    const double C93086 = C92127 * C93082;
    const double C92326 = C92319 + C92325;
    const double C93200 = C92170 * C92899;
    const double C93230 = C92127 * C92899;
    const double C19985 =
        (2 * ae * (2 * C92712 + C92127 * C92887) +
         C92170 *
             (2 * C92127 * C92899 +
              C92127 * (C92899 + C92012 *
                                     (C92084 * C92085 +
                                      C92309 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92235))) /
        C91701;
    const double C93043 = C92319 + C93042;
    const double C93272 = C92170 * C93267;
    const double C93333 = C93323 + C93324;
    const double C93007 = C92994 + C93003;
    const double C93136 = C93134 + C93002;
    const double C93137 = C93135 * ae;
    const double C93280 = ae * C93277;
    const double C93279 = C92170 * C93277;
    const double C93278 = C93275 * ae;
    const double C35395 = 3 * (C92634 + C92837 * C92309) +
                          C92170 * (2 * C93125 + C92170 * C93275);
    const double C93336 = C93330 + C93331;
    const double C92391 = C92390 + C92066;
    const double C3095 = C93706 * C1723;
    const double C9917 = C93718 * C1723;
    const double C59698 = C93718 * C1723;
    const double C13406 = C93718 * C1729;
    const double C29145 = C28721 * C1729;
    const double C63058 = C93718 * C1729;
    const double C71148 = C70728 * C1729;
    const double C3244 = C93680 * C1839;
    const double C11674 = C93680 * C1845;
    const double C217 = C93680 * C193;
    const double C437 = C188 * C193;
    const double C517 = C275 * C193;
    const double C4463 = C4178 * C193;
    const double C1085 = C188 * C886;
    const double C2062 = C93680 * C886;
    const double C2380 = C275 * C886;
    const double C4202 = C93694 * C886;
    const double C4458 = C4179 * C886;
    const double C6884 = C4085 * C886;
    const double C6998 = C4178 * C886;
    const double C15125 = C14839 * C886;
    const double C42503 = C93694 * C886;
    const double C42759 = C42480 * C886;
    const double C1666 = C188 * C1467;
    const double C2776 = C93680 * C1467;
    const double C3094 = C275 * C1467;
    const double C7977 = C4178 * C1467;
    const double C9916 = C9645 * C1467;
    const double C13198 = C4085 * C1467;
    const double C59697 = C59426 * C1467;
    const double C1672 = C188 * C1473;
    const double C6121 = C4178 * C1473;
    const double C11098 = C93680 * C1473;
    const double C11292 = C4085 * C1473;
    const double C13405 = C9645 * C1473;
    const double C29144 = C28878 * C1473;
    const double C32369 = C91722 * C1473;
    const double C63057 = C59426 * C1473;
    const double C74222 = C47576 * C1473;
    const double C11405 = C188 * C11082;
    const double C92823 = C92071 + C92822;
    const double C92831 = C92071 + C92830;
    const double C30487 =
        (3 * (C92223 + C92229 * C92309) +
         C92170 *
             (2 * C92939 +
              C92170 * (C92229 + (ae * C92158 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92215) *
                                     C92309))) /
        C91701;
    const double C92166 = C92159 + C92164;
    const double C92231 = C92225 + C92230;
    const double C30699 =
        (3 * (C92665 + ae * C93165 + C92170 * C92957) +
         ae * (2 * C93165 + C92170 * C93167) +
         C92170 * (2 * C92957 + ae * C93167 +
                   C92170 * (C92882 + ae * C92170 * C92857 +
                             C92170 * (ae * C92857 + C92170 * C92012 *
                                                         std::pow(C92018, 7) *
                                                         bs[7] * C92257)))) /
        C91701;
    const double C30870 =
        (3 * (C92672 + ae * C93165 + C92170 * C93179) +
         ae * (2 * C93165 + C92170 * C93167) +
         C92170 * (2 * C93179 + ae * C93167 +
                   C92170 * (C92894 + ae * C92170 * C92857 +
                             C92170 * (ae * C92857 + C92170 * C92012 *
                                                         std::pow(C92018, 7) *
                                                         bs[7] * C92294)))) /
        C91701;
    const double C31586 = C28721 * C6197;
    const double C57576 = C93718 * C6197;
    const double C69044 = C93718 * C6197;
    const double C73460 = C70728 * C6197;
    const double C32580 = C28721 * C11496;
    const double C74429 = C70728 * C11496;
    const double C30873 = C93680 * C11668;
    const double C92649 = ae * C92646;
    const double C92648 = C92127 * C92646;
    const double C92739 = C92170 * C92646;
    const double C92856 = 2 * C92646;
    const double C5871 = (C92387 + C92646 * C92309) / C91696;
    const double C30617 = C30610 + C11404;
    const double C30326 = C30318 + C30319;
    const double C92986 = C92245 + C92845;
    const double C92846 = C92138 + C92843;
    const double C92910 = C92635 + C92909;
    const double C92945 = ae * C92943;
    const double C93111 = 2 * C92943;
    const double C93066 = C93064 + C93065;
    const double C93320 = C93316 + C93319;
    const double C30614 = C188 * C30303;
    const double C35795 = C4178 * C30303;
    const double C40044 = C93680 * C30303;
    const double C40160 = C20049 * C30303;
    const double C215 = C93680 * C199;
    const double C2778 = C93680 * C1476;
    const double C7642 = C93828 * C1476;
    const double C45803 = C42379 * C1476;
    const double C11100 = C93680 * C1480;
    const double C37260 = C93828 * C1480;
    const double C54698 = C42379 * C1480;
    const double C30317 = C93680 * C11084;
    const double C25122 = C14741 * C16489;
    const double C38202 = C93694 * C16489;
    const double C83410 = C47572 * C16489;
    const double C90921 = C93694 * C16489;
    const double C27854 = C14741 * C19223;
    const double C86009 = C47572 * C19223;
    const double C35504 = C93694 * C25106;
    const double C41814 = C93680 * C25106;
    const double C88363 = C93694 * C25106;
    const double C30332 = C30327 * C93815;
    const double C40040 = C30327 * C93585;
    const double C72287 = C30327 * C47568;
    const double C92525 = C92524 + C92066;
    const double C2381 = C93706 * C1142;
    const double C5421 = C93706 * C1148;
    const double C2530 = C93680 * C1258;
    const double C4731 = C93694 * C1258;
    const double C43032 = C93694 * C1258;
    const double C7324 = C93694 * C1264;
    const double C15386 = C14741 * C1264;
    const double C45485 = C93694 * C1264;
    const double C48217 = C47572 * C1264;
    const double C304 = C93706 * C280;
    const double C651 = C188 * C280;
    const double C732 = C275 * C280;
    const double C10188 = C9644 * C280;
    const double C1325 = C275 * C952;
    const double C2148 = C93706 * C952;
    const double C2529 = C188 * C952;
    const double C4730 = C4179 * C952;
    const double C7220 = C4085 * C952;
    const double C12734 = C9644 * C952;
    const double C43031 = C42480 * C952;
    const double C1331 = C275 * C958;
    const double C5114 = C93706 * C958;
    const double C5513 = C4085 * C958;
    const double C7323 = C4179 * C958;
    const double C10889 = C9644 * C958;
    const double C15385 = C14840 * C958;
    const double C17828 = C91722 * C958;
    const double C45484 = C42480 * C958;
    const double C50575 = C47576 * C958;
    const double C1906 = C275 * C1533;
    const double C2862 = C93706 * C1533;
    const double C3243 = C188 * C1533;
    const double C9668 = C93718 * C1533;
    const double C10183 = C9645 * C1533;
    const double C13519 = C4085 * C1533;
    const double C13736 = C9644 * C1533;
    const double C29415 = C28877 * C1533;
    const double C59449 = C93718 * C1533;
    const double C59964 = C59426 * C1533;
    const double C4000 = C275 * C3567;
    const double C7764 = C93706 * C3567;
    const double C8299 = C4179 * C3567;
    const double C9199 = C4085 * C3567;
    const double C10879 = C9645 * C3567;
    const double C12083 = C93718 * C3567;
    const double C12614 = C188 * C3567;
    const double C14662 = C9644 * C3567;
    const double C31904 = C28877 * C3567;
    const double C46442 = C42480 * C3567;
    const double C56479 = C47576 * C3567;
    const double C60657 = C59426 * C3567;
    const double C61751 = C93718 * C3567;
    const double C79243 = C91722 * C3567;
    const double C5689 = C275 * C5098;
    const double C9414 = C275 * C8751;
    const double C10890 = C9645 * C8751;
    const double C60668 = C59426 * C8751;
    const double C93155 = C92071 + C93154;
    const double C93173 = C92071 + C93172;
    const double C93264 = C92845 + C93263;
    const double C92209 = C92202 + C92207;
    const double C92289 = C92283 + C92288;
    const double C16052 =
        (3 * (C92665 + ae * C92712 + C92127 * C92886) +
         ae * (2 * C92712 + C92127 * C92887) +
         C92127 * (2 * C92886 + ae * C92887 +
                   C92127 * (C92882 + ae * C92127 * C92883 +
                             C92127 * (ae * C92883 + C92127 * C92012 *
                                                         std::pow(C92018, 7) *
                                                         bs[7] * C92257)))) /
        C91701;
    const double C16232 =
        (3 * (C92672 + ae * C92712 + C92127 * C92896) +
         ae * (2 * C92712 + C92127 * C92887) +
         C92127 * (2 * C92896 + ae * C92887 +
                   C92127 * (C92894 + ae * C92127 * C92883 +
                             C92127 * (ae * C92883 + C92127 * C92012 *
                                                         std::pow(C92018, 7) *
                                                         bs[7] * C92294)))) /
        C91701;
    const double C16055 = C93706 * C5415;
    const double C17933 = C14741 * C5599;
    const double C50680 = C47572 * C5599;
    const double C92714 = C92713 + C92647;
    const double C92800 = ae * C92797;
    const double C92799 = C92170 * C92797;
    const double C93201 = 2 * C92797;
    const double C16316 = C16310 + C5688;
    const double C15767 = C15759 + C15760;
    const double C18994 = C18990 + C9413;
    const double C26731 = C26726 + C10888;
    const double C18365 = C18362 + C18363;
    const double C26101 = C26094 + C26095;
    const double C92924 = C92923 + C92844;
    const double C16314 = C275 * C15744;
    const double C20675 = C93706 * C15744;
    const double C20930 = C20049 * C15744;
    const double C24907 = C9644 * C15744;
    const double C19989 = C275 * C19323;
    const double C23016 = C93706 * C19323;
    const double C23318 = C20049 * C19323;
    const double C24392 = C93718 * C19323;
    const double C24902 = C9645 * C19323;
    const double C28521 = C14840 * C19323;
    const double C28632 = C9644 * C19323;
    const double C35302 = C28877 * C19323;
    const double C66132 = C59426 * C19323;
    const double C82757 = C93718 * C19323;
    const double C93030 = C93027 + C93028;
    const double C93040 = C93036 + C93039;
    const double C93129 = ae * C93126;
    const double C93128 = C92170 * C93126;
    const double C93268 = 2 * C93126;
    const double C93096 = C93095 + C93093;
    const double C93322 = C92319 + C93095;
    const double C93188 = C92181 + C93184;
    const double C302 = C93706 * C286;
    const double C2150 = C93706 * C961;
    const double C12081 = C93829 * C961;
    const double C61749 = C59272 * C961;
    const double C5116 = C93706 * C965;
    const double C26097 = C93829 * C965;
    const double C65486 = C59272 * C965;
    const double C15758 = C93706 * C5100;
    const double C15773 = C15768 * C93815;
    const double C20671 = C15768 * C93585;
    const double C48576 = C15768 * C47568;
    const double C19340 = C19338 * C93815;
    const double C23017 = C19338 * C93585;
    const double C52049 = C19338 * C47568;
    const double C11291 = C4077 * C1600;
    const double C13197 = C4076 * C1600;
    const double C32362 = C93590 * C1600;
    const double C57308 = C93590 * C1600;
    const double C61021 = C42378 * C1600;
    const double C11295 = C4076 * C1604;
    const double C30504 = C93590 * C1604;
    const double C32368 = C93815 * C1604;
    const double C37470 = C93585 * C1604;
    const double C54936 = C93590 * C1604;
    const double C74221 = C47568 * C1604;
    const double C30506 = C93590 * C11277;
    const double C41330 = C93585 * C11277;
    const double C72443 = C93590 * C11277;
    const double C20746 = C93585 * C15849;
    const double C6108 = (2 * ae * (C92140 + C92151 * C92309) +
                          C92127 * (C92643 + C92012 * C92250 * C92309)) /
                         C91701;
    const double C11390 =
        (2 * C92170 * C92643 + C92170 * (C92643 + C92012 * C92250 * C92309)) /
        C91701;
    const double C92839 = C92833 + C92834;
    const double C438 = C93680 * C423;
    const double C2300 = C93680 * C1077;
    const double C4456 = C93694 * C1077;
    const double C6993 = C93828 * C1077;
    const double C15120 = C14740 * C1077;
    const double C42757 = C93694 * C1077;
    const double C45154 = C42379 * C1077;
    const double C3014 = C93680 * C1658;
    const double C7972 = C93828 * C1658;
    const double C46121 = C42379 * C1658;
    const double C11400 = C93680 * C1662;
    const double C37576 = C93828 * C1662;
    const double C55060 = C42379 * C1662;
    const double C7974 = C93694 * C3710;
    const double C12301 = C93680 * C3710;
    const double C18565 = C14740 * C3710;
    const double C46123 = C93694 * C3710;
    const double C56208 = C42379 * C3710;
    const double C67708 = C93828 * C3710;
    const double C25420 = C14740 * C6107;
    const double C33458 = C93680 * C6107;
    const double C35788 = C93694 * C6107;
    const double C38536 = C93828 * C6107;
    const double C55062 = C93694 * C6107;
    const double C91247 = C42379 * C6107;
    const double C30613 = C93680 * C11389;
    const double C35794 = C93828 * C11389;
    const double C88618 = C42379 * C11389;
    const double C20868 = C93706 * C16051;
    const double C2393 = C2390 * C93680;
    const double C4565 = C2390 * C93694;
    const double C7112 = C2390 * C93828;
    const double C15227 = C2390 * C14740;
    const double C42866 = C2390 * C93694;
    const double C45273 = C2390 * C42379;
    const double C3107 = C3104 * C93680;
    const double C8092 = C3104 * C93828;
    const double C46240 = C3104 * C42379;
    const double C5512 = C4077 * C1201;
    const double C7219 = C4076 * C1201;
    const double C17825 = C93590 * C1201;
    const double C43744 = C42378 * C1201;
    const double C50572 = C93590 * C1201;
    const double C5516 = C4076 * C1205;
    const double C16144 = C93590 * C1205;
    const double C17827 = C93815 * C1205;
    const double C22045 = C93585 * C1205;
    const double C48935 = C93590 * C1205;
    const double C50574 = C47568 * C1205;
    const double C16146 = C93590 * C5504;
    const double C22048 = C93585 * C5504;
    const double C48937 = C93590 * C5504;
    const double C40334 = C93585 * C30774;
    const double C40388 = C93680 * C30869;
    const double C2542 = C2539 * C93706;
    const double C12617 = C2539 * C93829;
    const double C62274 = C2539 * C59272;
    const double C3256 = C3253 * C93706;
    const double C10084 = C3253 * C93718;
    const double C13624 = C3253 * C93829;
    const double C29312 = C3253 * C28720;
    const double C59865 = C3253 * C93718;
    const double C63276 = C3253 * C59272;
    const double C5676 =
        (2 * C92127 * C92676 + C92127 * (C92676 + C92012 * C92324 * C92235)) /
        C91701;
    const double C9407 = (2 * ae * (C92183 + C92194 * C92235) +
                          C92170 * (C92676 + C92012 * C92324 * C92235)) /
                         C91701;
    const double C16308 =
        (3 * (C92676 + C92899 * C92235) +
         C92127 *
             (2 * C92127 * C92899 +
              C92127 * (C92899 + C92012 *
                                     (C92084 * C92085 +
                                      C92309 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92235))) /
        C91701;
    const double C93187 = C93181 + C93182;
    const double C733 = C93706 * C718;
    const double C2614 = C93706 * C1317;
    const double C12729 = C93829 * C1317;
    const double C62381 = C59272 * C1317;
    const double C5684 = C93706 * C1321;
    const double C26725 = C93829 * C1321;
    const double C66126 = C59272 * C1321;
    const double C3328 = C93706 * C1898;
    const double C10181 = C93718 * C1898;
    const double C13731 = C93829 * C1898;
    const double C29410 = C28720 * C1898;
    const double C59962 = C93718 * C1898;
    const double C63383 = C59272 * C1898;
    const double C8413 = C93706 * C3994;
    const double C12731 = C93718 * C3994;
    const double C31900 = C28720 * C3994;
    const double C57982 = C93829 * C3994;
    const double C62383 = C93718 * C3994;
    const double C69444 = C59272 * C3994;
    const double C16313 = C93706 * C5675;
    const double C24906 = C93829 * C5675;
    const double C83240 = C59272 * C5675;
    const double C19988 = C93706 * C9406;
    const double C24900 = C93718 * C9406;
    const double C28627 = C93829 * C9406;
    const double C35298 = C28720 * C9406;
    const double C66128 = C93718 * C9406;
    const double C86764 = C59272 * C9406;
    const double C21046 = C93706 * C16307;
    const double C23468 = C93706 * C19984;
    const double C24903 = C93718 * C19984;
    const double C83238 = C93718 * C19984;
    const double C33144 = C33142 * C93815;
    const double C41810 = C33142 * C93585;
    const double C74962 = C33142 * C47568;
    const double C21214 =
        (2 * C92127 * C92187 + C92127 * C92978 + ae * C92170 * C92975 +
         C92170 * (ae * C92975 +
                   C92170 * (2 * C92127 * C92199 +
                             C92127 * (C92199 + std::pow(C92018, 7) * bs[7] *
                                                    C92174 * C92235)))) /
        C91701;
    const double C21426 =
        (2 * C92127 * C92279 + C92127 * C93034 + ae * C92170 * C92975 +
         C92170 * (ae * C92975 +
                   C92170 * (2 * C92127 * C92285 +
                             C92127 * (C92285 + std::pow(C92018, 7) * bs[7] *
                                                    C92273 * C92235)))) /
        C91701;
    const double C23011 =
        (ae * (3 * C92820 + C92127 * C92975) +
         C92170 * (3 * C92978 +
                   C92127 * (2 * C92127 * C92199 +
                             C92127 * (C92199 + std::pow(C92018, 7) * bs[7] *
                                                    C92174 * C92235)))) /
        C91701;
    const double C23090 =
        (3 * (C92937 + ae * C92170 * C92532 + C92127 * C93079) +
         ae * C92170 * C92975 +
         C92127 * (2 * C93079 + ae * C92170 * C92971 +
                   C92127 * (C93077 + ae * C92170 * C92127 * C92097 +
                             C92127 * (ae * C92170 * C92097 +
                                       C92127 * C92170 * std::pow(C92018, 7) *
                                           bs[7] * C92215)))) /
        C91701;
    const double C23316 =
        (ae * (3 * C92820 + C92127 * C92975) +
         C92170 * (3 * C93034 +
                   C92127 * (2 * C92127 * C92285 +
                             C92127 * (C92285 + std::pow(C92018, 7) * bs[7] *
                                                    C92273 * C92235)))) /
        C91701;
    const double C20533 = (4 * (2 * C92688 + C92127 * C92820) +
                           C92127 * (3 * C92820 + C92127 * C92975)) /
                          C91696;
    const double C21101 =
        (2 * C92688 + C92127 * C92820 + C92975 * C92309) / C91696;
    const double C22855 = (C92170 * (3 * C92820 + C92127 * C92975)) / C91696;
    const double C35404 = C20049 * C35396;
    const double C39974 = (4 * (2 * C93148 + C92170 * C93152) +
                           C92170 * (3 * C93152 + C92170 * C93302)) /
                          C91696;
    const double C92394 = C92127 * C92167;
    const double C1730 =
        (2 * C92012 * C92263 + C92012 * C92268 + ae * C92170 * C92167 +
         C92170 * (ae * C92167 +
                   C92170 * (2 * C92012 * C92266 +
                             C92012 * (C92266 + std::pow(C92018, 7) * bs[7] *
                                                    C92257 * C92016)))) /
        C91701;
    const double C1846 =
        (2 * C92012 * C92300 + C92012 * C92305 + ae * C92170 * C92167 +
         C92170 * (ae * C92167 +
                   C92170 * (2 * C92012 * C92303 +
                             C92012 * (C92303 + std::pow(C92018, 7) * bs[7] *
                                                    C92294 * C92016)))) /
        C91701;
    const double C3092 =
        (ae * (3 * C92149 + C92012 * C92167) +
         C92170 * (3 * C92268 +
                   C92012 * (2 * C92012 * C92266 +
                             C92012 * (C92266 + std::pow(C92018, 7) * bs[7] *
                                                    C92257 * C92016)))) /
        C91701;
    const double C3241 =
        (ae * (3 * C92149 + C92012 * C92167) +
         C92170 * (3 * C92305 +
                   C92012 * (2 * C92012 * C92303 +
                             C92012 * (C92303 + std::pow(C92018, 7) * bs[7] *
                                                    C92294 * C92016)))) /
        C91701;
    const double C3712 =
        (2 * ae * C92170 * C92167 +
         C92127 * C92170 *
             (2 * C92012 * C92250 +
              C92012 * (C92250 + (C92084 * C92085 +
                                  C92235 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92016))) /
        C91701;
    const double C194 = (4 * (2 * C92140 + C92012 * C92149) +
                         C92012 * (3 * C92149 + C92012 * C92167)) /
                        C91696;
    const double C1474 =
        (2 * C92140 + C92012 * C92149 + C92167 * C92309) / C91696;
    const double C2770 = (C92170 * (3 * C92149 + C92012 * C92167)) / C91696;
    const double C30615 = C188 * C30304;
    const double C40032 = (4 * (2 * C93161 + C92170 * C93163) +
                           C92170 * (3 * C93163 + C92170 * C93308)) /
                          C91696;
    const double C92528 = C92170 * C92210;
    const double C1149 =
        (2 * C92012 * C92263 + C92012 * C92268 + ae * C92127 * C92210 +
         C92127 * (ae * C92210 +
                   C92127 * (2 * C92012 * C92266 +
                             C92012 * (C92266 + std::pow(C92018, 7) * bs[7] *
                                                    C92257 * C92016)))) /
        C91701;
    const double C1265 =
        (2 * C92012 * C92300 + C92012 * C92305 + ae * C92127 * C92210 +
         C92127 * (ae * C92210 +
                   C92127 * (2 * C92012 * C92303 +
                             C92012 * (C92303 + std::pow(C92018, 7) * bs[7] *
                                                    C92294 * C92016)))) /
        C91701;
    const double C2378 =
        (ae * (3 * C92192 + C92012 * C92210) +
         C92127 * (3 * C92268 +
                   C92012 * (2 * C92012 * C92266 +
                             C92012 * (C92266 + std::pow(C92018, 7) * bs[7] *
                                                    C92257 * C92016)))) /
        C91701;
    const double C2527 =
        (ae * (3 * C92192 + C92012 * C92210) +
         C92127 * (3 * C92305 +
                   C92012 * (2 * C92012 * C92303 +
                             C92012 * (C92303 + std::pow(C92018, 7) * bs[7] *
                                                    C92294 * C92016)))) /
        C91701;
    const double C3996 =
        (2 * ae * C92127 * C92210 +
         C92170 * C92127 *
             (2 * C92012 * C92324 +
              C92012 * (C92324 + (C92084 * C92085 +
                                  C92309 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92016))) /
        C91701;
    const double C281 = (4 * (2 * C92183 + C92012 * C92192) +
                         C92012 * (3 * C92192 + C92012 * C92210)) /
                        C91696;
    const double C959 =
        (2 * C92183 + C92012 * C92192 + C92210 * C92235) / C91696;
    const double C2142 = (C92127 * (3 * C92192 + C92012 * C92210)) / C91696;
    const double C16315 = C275 * C15745;
    const double C93070 = C92170 * C93031;
    const double C20663 = (4 * (2 * C92707 + C92127 * C92880) +
                           C92127 * (3 * C92880 + C92127 * C93031)) /
                          C91696;
    const double C16150 = C16138 + C16139;
    const double C30516 = C30495 + C30496;
    const double C42390 = C42386 * C116;
    const double C43387 = C2160 * C42386;
    const double C43487 = C42386 * C810;
    const double C43479 = C42386 * C887;
    const double C43473 = C42386 * C805;
    const double C43745 = C42386 * C958;
    const double C43743 = C42386 * C953;
    const double C45045 = C42386 * C886;
    const double C45039 = C42386 * C804;
    const double C45381 = C42386 * C952;
    const double C46978 = C42386 * C3411;
    const double C47290 = C42386 * C3567;
    const double C60854 = C2788 * C42386;
    const double C61028 = C42386 * C1391;
    const double C61022 = C42386 * C1473;
    const double C61020 = C42386 * C1468;
    const double C61014 = C42386 * C1386;
    const double C61278 = C42386 * C1534;
    const double C62850 = C42386 * C1467;
    const double C62844 = C42386 * C1385;
    const double C63171 = C42386 * C1533;
    const double C91726 = C93585 - C91724;
    const double C20753 = C20741 + C20742;
    const double C20751 = C20737 + C20738;
    const double C20750 = C20735 + C20736;
    const double C20749 = C20733 + C20734;
    const double C20935 = C20928 + C20929;
    const double C20934 = C20925 + C20926;
    const double C20933 = C20922 + C20923;
    const double C22049 = C22041 + C22042;
    const double C23109 = C23102 + C23103;
    const double C23107 = C23098 + C23099;
    const double C23329 = C23324 + C23325;
    const double C23328 = C23321 + C23322;
    const double C25326 = C25317 + C25318;
    const double C25325 = C25315 + C25316;
    const double C25324 = C25313 + C25314;
    const double C25320 = C25301 + C25302;
    const double C25319 = C25299 + C25300;
    const double C25604 = C25596 + C25597;
    const double C27145 = C27138 + C27139;
    const double C35699 = C35693 + C35694;
    const double C35698 = C35691 + C35692;
    const double C35697 = C35689 + C35690;
    const double C48941 = C48929 + C48930;
    const double C54946 = C54925 + C54926;
    const double C43213 = C93854 * C824;
    const double C43200 = C93854 * C823;
    const double C43393 = C5129 * C93854;
    const double C43384 = C5124 * C93854;
    const double C43492 = C93854 * C816;
    const double C43486 = C93854 * C1022;
    const double C43476 = C93854 * C1021;
    const double C43470 = C93854 * C815;
    const double C43750 = C93854 * C1204;
    const double C43740 = C93854 * C1203;
    const double C44694 = C93854 * C822;
    const double C45036 = C93854 * C814;
    const double C45378 = C93854 * C1202;
    const double C46659 = C93854 * C3417;
    const double C46872 = C8764 * C93854;
    const double C46983 = C93854 * C3413;
    const double C46977 = C93854 * C3639;
    const double C47295 = C93854 * C3853;
    const double C60754 = C93854 * C1405;
    const double C60744 = C93854 * C1404;
    const double C60860 = C11113 * C93854;
    const double C60851 = C11108 * C93854;
    const double C61033 = C93854 * C1397;
    const double C61027 = C93854 * C1603;
    const double C61017 = C93854 * C1602;
    const double C61011 = C93854 * C1396;
    const double C61285 = C93854 * C1785;
    const double C61275 = C93854 * C1784;
    const double C62499 = C93854 * C1403;
    const double C62847 = C93854 * C1601;
    const double C62841 = C93854 * C1395;
    const double C63599 = C13955 * C93854;
    const double C89 = (C93815 - C93840) / C91702 - (C93854 * C93581) / C91696;
    const double C43210 = C93842 * C825;
    const double C43202 = C93842 * C822;
    const double C43490 = C93842 * C817;
    const double C43472 = C93842 * C814;
    const double C43748 = C93842 * C1205;
    const double C43742 = C93842 * C1202;
    const double C45380 = C93842 * C1201;
    const double C60752 = C93842 * C1406;
    const double C60746 = C93842 * C1403;
    const double C61031 = C93842 * C1398;
    const double C61025 = C93842 * C1604;
    const double C61019 = C93842 * C1601;
    const double C61013 = C93842 * C1395;
    const double C62849 = C93842 * C1600;
    const double C90 =
        (2 * C93590 + C93854) / C91702 - (C93842 * C93581) / C91696;
    const double C91 = C93842 / C91702 - C93593 / C91711;
    const double C91824 = C93680 - C91823;
    const double C14876 = C14862 + C14863;
    const double C14867 = C14844 + C14845;
    const double C15395 = C15387 + C15388;
    const double C15392 = C15381 + C15382;
    const double C17939 = C17934 + C17935;
    const double C25140 = C25123 + C25124;
    const double C25137 = C25117 + C25118;
    const double C27859 = C27851 + C27852;
    const double C15393 = C15383 + C15384;
    const double C25138 = C25119 + C25120;
    const double C42511 = C42492 + C42493;
    const double C42507 = C42484 + C42485;
    const double C43038 = C43029 + C43030;
    const double C43036 = C43024 + C43025;
    const double C45494 = C45488 + C45489;
    const double C54719 = C54703 + C54704;
    const double C54714 = C54693 + C54694;
    const double C58262 = C58257 + C58258;
    const double C47691 = C47671 * C810;
    const double C47683 = C47671 * C817;
    const double C47677 = C47671 * C809;
    const double C47936 = C47671 * C890;
    const double C48216 = C47671 * C958;
    const double C48214 = C47671 * C957;
    const double C50011 = C47671 * C4898;
    const double C50679 = C47671 * C5097;
    const double C50997 = C47671 * C8521;
    const double C51621 = C47671 * C8750;
    const double C83415 = C47671 * C16395;
    const double C83409 = C47671 * C16397;
    const double C83407 = C47671 * C8523;
    const double C83401 = C47671 * C8520;
    const double C83926 = C47671 * C8749;
    const double C86008 = C47671 * C19097;
    const double C86002 = C47671 * C19095;
    const double C86658 = C47671 * C19323;
    const double C4476 = C4470 + C4461;
    const double C4473 = C4467 + C4452;
    const double C4471 = C4465 + C4446;
    const double C7007 = C7003 + C5332;
    const double C7005 = C7001 + C5330;
    const double C7986 = C7982 + C6114;
    const double C7984 = C7980 + C6112;
    const double C35808 = C35802 + C35793;
    const double C35805 = C35799 + C6117;
    const double C35803 = C35797 + C6116;
    const double C4474 = C4468 + C4455;
    const double C4472 = C4466 + C4449;
    const double C448 = C444 + C429;
    const double C11414 = C11410 + C11394;
    const double C47696 = C93855 * C191;
    const double C47690 = C93855 * C197;
    const double C47680 = C93855 * C196;
    const double C47674 = C93855 * C190;
    const double C47954 = C93855 * C421;
    const double C47939 = C93855 * C420;
    const double C48060 = C521 * C93855;
    const double C48051 = C520 * C93855;
    const double C48221 = C93855 * C637;
    const double C48211 = C93855 * C636;
    const double C50016 = C93855 * C888;
    const double C50354 = C93855 * C1078;
    const double C50469 = C2391 * C93855;
    const double C50684 = C93855 * C1260;
    const double C51002 = C93855 * C1469;
    const double C50996 = C93855 * C1477;
    const double C51308 = C93855 * C1659;
    const double C51423 = C3105 * C93855;
    const double C51626 = C93855 * C1841;
    const double C83420 = C93855 * C1471;
    const double C83414 = C93855 * C1479;
    const double C83404 = C93855 * C1478;
    const double C83398 = C93855 * C1470;
    const double C83678 = C93855 * C1661;
    const double C83668 = C93855 * C1660;
    const double C83933 = C93855 * C1843;
    const double C83923 = C93855 * C1842;
    const double C86005 = C93855 * C3495;
    const double C85999 = C93855 * C3491;
    const double C86329 = C93855 * C3709;
    const double C20044 =
        (C93828 - C93848) / C91702 - (C93855 * C93690) / C91696;
    const double C4217 = C4209 + C4210;
    const double C4740 = C4736 + C4737;
    const double C35524 = C35517 + C35518;
    const double C47694 = C93850 * C887;
    const double C47676 = C93850 * C888;
    const double C47951 = C93850 * C1077;
    const double C47942 = C93850 * C1078;
    const double C48058 = C2390 * C93850;
    const double C48053 = C2391 * C93850;
    const double C48219 = C93850 * C1259;
    const double C48213 = C93850 * C1260;
    const double C50682 = C93850 * C1263;
    const double C51306 = C93850 * C3710;
    const double C83418 = C93850 * C5870;
    const double C83412 = C93850 * C5873;
    const double C83406 = C93850 * C3495;
    const double C83400 = C93850 * C3491;
    const double C83676 = C93850 * C6107;
    const double C83670 = C93850 * C3709;
    const double C86007 = C93850 * C8648;
    const double C20045 =
        (2 * C93694 + C93855) / C91702 - (C93850 * C93690) / C91696;
    const double C20046 = C93850 / C91702 - C93697 / C91711;
    const double C14864 = C14838 * C110;
    const double C14858 = C14838 * C116;
    const double C14848 = C14838 * C115;
    const double C14842 = C14838 * C109;
    const double C15124 = C14838 * C192;
    const double C15122 = C14838 * C191;
    const double C15107 = C14838 * C190;
    const double C15103 = C14838 * C189;
    const double C15230 = C307 * C14838;
    const double C15219 = C305 * C14838;
    const double C15389 = C14838 * C278;
    const double C15379 = C14838 * C277;
    const double C15972 = C14838 * C890;
    const double C15971 = C14838 * C889;
    const double C15968 = C14838 * C888;
    const double C16731 = C14838 * C1472;
    const double C16728 = C14838 * C1471;
    const double C16727 = C14838 * C1470;
    const double C16724 = C14838 * C1469;
    const double C17268 = C14838 * C806;
    const double C17262 = C14838 * C814;
    const double C17608 = C14838 * C887;
    const double C17723 = C2162 * C14838;
    const double C17936 = C14838 * C954;
    const double C18254 = C14838 * C1387;
    const double C18248 = C14838 * C1395;
    const double C18568 = C14838 * C1468;
    const double C18684 = C2876 * C14838;
    const double C18887 = C14838 * C1535;
    const double C19566 = C14838 * C3491;
    const double C25131 = C14838 * C1389;
    const double C25125 = C14838 * C1397;
    const double C25115 = C14838 * C1396;
    const double C25109 = C14838 * C1388;
    const double C25423 = C14838 * C11080;
    const double C25694 = C14838 * C1537;
    const double C25684 = C14838 * C1536;
    const double C27849 = C14838 * C3413;
    const double C27843 = C14838 * C3409;
    const double C28191 = C14838 * C5870;
    const double C28517 = C14838 * C3565;
    const double C91894 = C93706 - C91893;
    const double C28914 = C28900 + C28901;
    const double C28905 = C28882 + C28883;
    const double C29154 = C29146 + C29147;
    const double C29151 = C29140 + C29141;
    const double C31284 = C31276 + C31277;
    const double C32586 = C32581 + C32582;
    const double C34807 = C34793 + C34794;
    const double C34804 = C34787 + C34788;
    const double C34801 = C34781 + C34782;
    const double C34798 = C34775 + C34776;
    const double C38322 = C38311 + C38312;
    const double C29152 = C29142 + C29143;
    const double C34802 = C34783 + C34784;
    const double C59457 = C59438 + C59439;
    const double C59453 = C59430 + C59431;
    const double C59704 = C59695 + C59696;
    const double C59702 = C59690 + C59691;
    const double C61768 = C61758 + C61759;
    const double C63067 = C63061 + C63062;
    const double C65509 = C65495 + C65496;
    const double C65507 = C65491 + C65492;
    const double C65505 = C65487 + C65488;
    const double C65502 = C65481 + C65482;
    const double C65500 = C65477 + C65478;
    const double C69849 = C69841 + C69842;
    const double C70901 = C70881 * C1391;
    const double C70893 = C70881 * C1398;
    const double C70887 = C70881 * C1390;
    const double C71147 = C70881 * C1473;
    const double C71145 = C70881 * C1472;
    const double C71398 = C70881 * C1537;
    const double C73153 = C70881 * C5776;
    const double C74106 = C70881 * C10965;
    const double C74428 = C70881 * C11081;
    const double C87685 = C70881 * C16395;
    const double C87679 = C70881 * C16397;
    const double C87677 = C70881 * C5778;
    const double C87671 = C70881 * C5775;
    const double C87931 = C70881 * C5870;
    const double C91030 = C70881 * C25001;
    const double C91024 = C70881 * C25003;
    const double C10201 = C10195 + C10186;
    const double C10198 = C10192 + C10177;
    const double C10196 = C10190 + C10171;
    const double C12743 = C12739 + C10882;
    const double C12741 = C12737 + C10880;
    const double C13745 = C13741 + C11763;
    const double C13743 = C13739 + C11761;
    const double C24920 = C24914 + C24905;
    const double C24917 = C24911 + C10885;
    const double C24915 = C24909 + C10884;
    const double C28641 = C28637 + C14658;
    const double C28639 = C28635 + C25779;
    const double C10199 = C10193 + C10180;
    const double C10197 = C10191 + C10174;
    const double C24918 = C24912 + C10886;
    const double C24916 = C24910 + C10883;
    const double C743 = C739 + C724;
    const double C5698 = C5694 + C5680;
    const double C70906 = C93856 * C278;
    const double C70900 = C93856 * C284;
    const double C70890 = C93856 * C283;
    const double C70884 = C93856 * C277;
    const double C71152 = C93856 * C503;
    const double C71142 = C93856 * C502;
    const double C71317 = C655 * C93856;
    const double C71308 = C654 * C93856;
    const double C71416 = C93856 * C716;
    const double C71401 = C93856 * C715;
    const double C73158 = C93856 * C954;
    const double C73152 = C93856 * C962;
    const double C73464 = C93856 * C1144;
    const double C73668 = C2540 * C93856;
    const double C73773 = C93856 * C1318;
    const double C74111 = C93856 * C1535;
    const double C74433 = C93856 * C1725;
    const double C74643 = C3254 * C93856;
    const double C74748 = C93856 * C1899;
    const double C87690 = C93856 * C956;
    const double C87684 = C93856 * C964;
    const double C87674 = C93856 * C963;
    const double C87668 = C93856 * C955;
    const double C87938 = C93856 * C1146;
    const double C87928 = C93856 * C1145;
    const double C88190 = C93856 * C1320;
    const double C88180 = C93856 * C1319;
    const double C91035 = C93856 * C3565;
    const double C91029 = C93856 * C3569;
    const double C91676 = C93856 * C3993;
    const double C39039 =
        (C93829 - C93851) / C91702 - (C93856 * C93714) / C91696;
    const double C9683 = C9675 + C9676;
    const double C9926 = C9922 + C9923;
    const double C24408 = C24401 + C24402;
    const double C24407 = C24399 + C24400;
    const double C70904 = C93853 * C1534;
    const double C70886 = C93853 * C1535;
    const double C71150 = C93853 * C1724;
    const double C71144 = C93853 * C1725;
    const double C71315 = C3253 * C93853;
    const double C71310 = C3254 * C93853;
    const double C71413 = C93853 * C1898;
    const double C71404 = C93853 * C1899;
    const double C73156 = C93853 * C3566;
    const double C73771 = C93853 * C3994;
    const double C74431 = C93853 * C1728;
    const double C87688 = C93853 * C8749;
    const double C87682 = C93853 * C8752;
    const double C87676 = C93853 * C3569;
    const double C87670 = C93853 * C3565;
    const double C88188 = C93853 * C9406;
    const double C88182 = C93853 * C3993;
    const double C91027 = C93853 * C5953;
    const double C91359 = C93853 * C6196;
    const double C39040 =
        (2 * C93718 + C93856) / C91702 - (C93853 * C93714) / C91696;
    const double C39041 = C93853 / C91702 - C93721 / C91711;
    const double C28902 = C28876 * C110;
    const double C28896 = C28876 * C116;
    const double C28886 = C28876 * C115;
    const double C28880 = C28876 * C109;
    const double C29148 = C28876 * C191;
    const double C29138 = C28876 * C190;
    const double C29315 = C220 * C28876;
    const double C29304 = C218 * C28876;
    const double C29414 = C28876 * C279;
    const double C29412 = C28876 * C278;
    const double C29397 = C28876 * C277;
    const double C29393 = C28876 * C276;
    const double C30112 = C28876 * C957;
    const double C30109 = C28876 * C956;
    const double C30108 = C28876 * C955;
    const double C30105 = C28876 * C954;
    const double C30960 = C28876 * C1537;
    const double C30959 = C28876 * C1536;
    const double C30956 = C28876 * C1535;
    const double C31278 = C28876 * C806;
    const double C31272 = C28876 * C814;
    const double C31589 = C28876 * C888;
    const double C31796 = C2076 * C28876;
    const double C31903 = C28876 * C953;
    const double C32249 = C28876 * C1387;
    const double C32243 = C28876 * C1395;
    const double C32583 = C28876 * C1469;
    const double C32801 = C2790 * C28876;
    const double C32906 = C28876 * C1534;
    const double C33874 = C28876 * C3566;
    const double C33871 = C28876 * C3565;
    const double C34795 = C28876 * C808;
    const double C34789 = C28876 * C816;
    const double C34779 = C28876 * C815;
    const double C34773 = C28876 * C807;
    const double C35047 = C28876 * C890;
    const double C35037 = C28876 * C889;
    const double C35301 = C28876 * C5096;
    const double C38319 = C28876 * C3409;
    const double C38313 = C28876 * C3413;
    const double C38655 = C28876 * C3491;
    const double C38978 = C28876 * C8749;
    const double C2068 = C93680 * C896;
    const double C4188 = C93694 * C896;
    const double C6659 = C93828 * C896;
    const double C14851 = C14740 * C896;
    const double C17263 = C14739 * C896;
    const double C42489 = C93694 * C896;
    const double C44820 = C42379 * C896;
    const double C47682 = C93850 * C896;
    const double C50010 = C93855 * C896;
    const double C5225 = C4076 * C1020;
    const double C6881 = C4075 * C1020;
    const double C15859 = C93590 * C1020;
    const double C17485 = C93815 * C1020;
    const double C21823 = C93585 * C1020;
    const double C43478 = C93842 * C1020;
    const double C45042 = C93854 * C1020;
    const double C48662 = C93590 * C1020;
    const double C50232 = C47568 * C1020;
    const double C2868 = C93706 * C1543;
    const double C9654 = C93718 * C1543;
    const double C13077 = C93829 * C1543;
    const double C28889 = C28720 * C1543;
    const double C32244 = C28719 * C1543;
    const double C59435 = C93718 * C1543;
    const double C62729 = C59272 * C1543;
    const double C70892 = C93853 * C1543;
    const double C74105 = C93856 * C1543;
    const double C11579 = C4076 * C1783;
    const double C13516 = C4075 * C1783;
    const double C27443 = C93585 * C1783;
    const double C30780 = C93590 * C1783;
    const double C32687 = C93815 * C1783;
    const double C55286 = C93590 * C1783;
    const double C57712 = C47568 * C1783;
    const double C61277 = C93842 * C1783;
    const double C63168 = C93854 * C1783;
    const double C221 = C208 + C209;
    const double C308 = C295 + C296;
    const double C4211 = C4193 + C4194;
    const double C9677 = C9659 + C9660;
    const double C2161 = C2153 + C2154;
    const double C12099 = C12088 + C12089;
    const double C15877 = C15854 + C15855;
    const double C21832 = C21820 + C21821;
    const double C48680 = C48657 + C48658;
    const double C2789 = C2781 + C2782;
    const double C7660 = C7649 + C7650;
    const double C27144 = C27136 + C27137;
    const double C30514 = C30491 + C30492;
    const double C54944 = C54921 + C54922;
    const double C1081 =
        (C92012 * C92240 + C92388 + C92388 +
         C92127 * (2 * ae * C92140 + C92127 * C92012 * C92245)) /
        C91701;
    const double C3924 =
        (C92388 + C92170 * (ae * C92183 + C92127 * C92012 * C92300)) / C91701;
    const double C1090 = C188 * C891;
    const double C5337 = C4178 * C891;
    const double C5331 = C4179 * C891;
    const double C5422 = C275 * C891;
    const double C6661 = C93694 * C891;
    const double C14847 = C14741 * C891;
    const double C15113 = C14840 * C891;
    const double C15866 = C91722 * C891;
    const double C15975 = C14838 * C891;
    const double C15967 = C14839 * C891;
    const double C17267 = C14740 * C891;
    const double C21826 = C20049 * C891;
    const double C26410 = C9644 * C891;
    const double C43581 = C42480 * C891;
    const double C44822 = C93694 * C891;
    const double C47678 = C47572 * C891;
    const double C47944 = C47671 * C891;
    const double C48669 = C47576 * C891;
    const double C50014 = C93850 * C891;
    const double C3715 = C188 * C3492;
    const double C6113 = C4179 * C3492;
    const double C7652 = C93694 * C3492;
    const double C8094 = C275 * C3492;
    const double C8990 = C4178 * C3492;
    const double C11975 = C93680 * C3492;
    const double C12410 = C9645 * C3492;
    const double C16723 = C14839 * C3492;
    const double C18253 = C14740 * C3492;
    const double C19450 = C91722 * C3492;
    const double C19569 = C14838 * C3492;
    const double C26204 = C20049 * C3492;
    const double C31587 = C28877 * C3492;
    const double C44289 = C42480 * C3492;
    const double C45813 = C93694 * C3492;
    const double C51000 = C93850 * C3492;
    const double C52161 = C47576 * C3492;
    const double C55794 = C42379 * C3492;
    const double C57577 = C9644 * C3492;
    const double C62068 = C59426 * C3492;
    const double C67306 = C93828 * C3492;
    const double C1902 =
        (C92012 * C92314 + C92522 + C92522 +
         C92170 * (2 * ae * C92183 + C92170 * C92012 * C92319)) /
        C91701;
    const double C3784 =
        (C92522 + C92127 * (ae * C92140 + C92170 * C92012 * C92263)) / C91701;
    const double C1911 = C275 * C1538;
    const double C11675 = C188 * C1538;
    const double C11768 = C9644 * C1538;
    const double C11762 = C9645 * C1538;
    const double C13079 = C93718 * C1538;
    const double C28885 = C28721 * C1538;
    const double C29403 = C28878 * C1538;
    const double C30783 = C91722 * C1538;
    const double C30963 = C28876 * C1538;
    const double C30955 = C28877 * C1538;
    const double C32248 = C28720 * C1538;
    const double C37783 = C20049 * C1538;
    const double C37884 = C4178 * C1538;
    const double C55291 = C47576 * C1538;
    const double C61442 = C59426 * C1538;
    const double C62731 = C93718 * C1538;
    const double C70888 = C70728 * C1538;
    const double C71406 = C70881 * C1538;
    const double C74109 = C93853 * C1538;
    const double C7115 = C5128 * C4179;
    const double C15223 = C5128 * C14840;
    const double C15755 = C5128 * C91722;
    const double C17721 = C5128 * C14839;
    const double C21750 = C5128 * C20049;
    const double C45276 = C5128 * C42480;
    const double C48054 = C5128 * C47671;
    const double C48572 = C5128 * C47576;
    const double C5696 = C5692 + C1330;
    const double C26732 = C26730 + C10887;
    const double C13627 = C11112 * C9645;
    const double C29308 = C11112 * C28878;
    const double C30314 = C11112 * C91722;
    const double C32799 = C11112 * C28877;
    const double C41187 = C11112 * C20049;
    const double C63279 = C11112 * C59426;
    const double C71311 = C11112 * C70881;
    const double C72283 = C11112 * C47576;
    const double C11412 = C11408 + C1671;
    const double C37583 = C37581 + C6119;
    const double C8096 = C7772 * C4179;
    const double C18682 = C7772 * C14839;
    const double C19335 = C7772 * C91722;
    const double C46243 = C7772 * C42480;
    const double C52052 = C7772 * C47576;
    const double C8418 = C8416 + C3999;
    const double C55932 = C12100 + C12101;
    const double C55929 = C12101 + C12100;
    const double C12742 = C12738 + C10881;
    const double C57986 = C57984 + C14660;
    const double C7648 = C93694 * C3496;
    const double C11973 = C93680 * C3496;
    const double C18247 = C14740 * C3496;
    const double C45809 = C93694 * C3496;
    const double C50994 = C93850 * C3496;
    const double C55790 = C42379 * C3496;
    const double C67302 = C93828 * C3496;
    const double C92046 = C92045 + C92038;
    const double C821 =
        (C92127 * C92041 + C92335 + C92335 +
         C92012 * (2 * ae * C92127 * C92037 + C92012 * C92328)) /
        C91701;
    const double C899 = (ae * C92133 + C92012 * C92137 + C92335 +
                         C92127 * (C92044 + C92127 * C92148)) /
                        C91701;
    const double C1023 = (ae * C92133 + C92012 * C92218 + C92335 +
                          C92127 * (C92044 + C92127 * C92223)) /
                         C91701;
    const double C3570 = (C92335 + C92170 * C92127 * C92191) / C91701;
    const double C3854 = (C92335 + C92170 * C92127 * C92281) / C91701;
    const double C7647 = C4179 * C3414;
    const double C7765 = C275 * C3414;
    const double C8878 = C4076 * C3414;
    const double C11972 = C188 * C3414;
    const double C12086 = C9645 * C3414;
    const double C16404 = C91722 * C3414;
    const double C18246 = C14839 * C3414;
    const double C19455 = C93590 * C3414;
    const double C22254 = C20049 * C3414;
    const double C26203 = C93585 * C3414;
    const double C31270 = C28877 * C3414;
    const double C45808 = C42480 * C3414;
    const double C46981 = C93842 * C3414;
    const double C49173 = C47576 * C3414;
    const double C52166 = C93590 * C3414;
    const double C56064 = C47568 * C3414;
    const double C57161 = C9644 * C3414;
    const double C61754 = C59426 * C3414;
    const double C67301 = C4178 * C3414;
    const double C78840 = C93815 * C3414;
    const double C1402 =
        (C92170 * C92041 + C92437 + C92437 +
         C92012 * (2 * ae * C92170 * C92037 + C92012 * C92430)) /
        C91701;
    const double C1546 = (ae * C92176 + C92012 * C92180 + C92437 +
                          C92170 * (C92044 + C92170 * C92191)) /
                         C91701;
    const double C1786 = (ae * C92176 + C92012 * C92276 + C92437 +
                          C92170 * (C92044 + C92170 * C92281)) /
                         C91701;
    const double C3640 = (C92437 + C92127 * C92170 * C92223) / C91701;
    const double C15881 = C15862 + C15863;
    const double C21834 = C21824 + C21825;
    const double C48684 = C48665 + C48666;
    const double C30518 = C30499 + C30500;
    const double C37473 = C37467 + C37468;
    const double C54953 = C54939 + C54940;
    const double C25693 = C14740 * C6350;
    const double C33770 = C93680 * C6350;
    const double C36055 = C93694 * C6350;
    const double C38867 = C93828 * C6350;
    const double C55408 = C93694 * C6350;
    const double C83931 = C93850 * C6350;
    const double C91568 = C42379 * C6350;
    const double C92640 = C92639 + C92636;
    const double C8984 =
        (C92170 * C92240 + C92737 + C92737 +
         C92127 * (2 * ae * C92170 * C92138 + C92127 * C92170 * C92245)) /
        C91701;
    const double C92792 = C92791 + C92788;
    const double C6427 =
        (C92127 * C92314 + C92710 + C92710 +
         C92170 * (2 * ae * C92707 + C92170 * C92127 * C92319)) /
        C91701;
    const double C9091 = (ae * C92133 + C92170 * C92260 + C92710 +
                          C92127 * (ae * (C92170 * C92181 + C92034) +
                                    C92127 * (C92141 + C92170 * C92263))) /
                         C91701;
    const double C6431 = C275 * C5950;
    const double C14659 = C9645 * C5950;
    const double C25600 = C20049 * C5950;
    const double C25692 = C14839 * C5950;
    const double C25780 = C9644 * C5950;
    const double C27972 = C93718 * C5950;
    const double C30106 = C28878 * C5950;
    const double C33769 = C188 * C5950;
    const double C33872 = C28877 * C5950;
    const double C34778 = C28721 * C5950;
    const double C36054 = C4179 * C5950;
    const double C36142 = C28876 * C5950;
    const double C38318 = C28720 * C5950;
    const double C38866 = C4178 * C5950;
    const double C55407 = C42480 * C5950;
    const double C64294 = C59426 * C5950;
    const double C69846 = C93718 * C5950;
    const double C72107 = C70881 * C5950;
    const double C87672 = C70728 * C5950;
    const double C91033 = C93853 * C5950;
    const double C14558 = C93680 * C3923;
    const double C25687 = C14740 * C3923;
    const double C28518 = C14739 * C3923;
    const double C36051 = C93694 * C3923;
    const double C38863 = C93828 * C3923;
    const double C55402 = C93694 * C3923;
    const double C59064 = C42379 * C3923;
    const double C83925 = C93850 * C3923;
    const double C86655 = C93855 * C3923;
    const double C5429 = C5424 + C5425;
    const double C20752 = C20739 + C20740;
    const double C24651 = C24641 + C24642;
    const double C14259 = C14252 + C3714;
    const double C35798 = C35783 + C6115;
    const double C38541 = C38531 + C8988;
    const double C13954 = C13946 + C13947;
    const double C23108 = C23100 + C23101;
    const double C25134 = C25111 + C25112;
    const double C35512 = C35489 + C35490;
    const double C38203 = C38187 + C38188;
    const double C54712 = C54689 + C54690;
    const double C35800 = C35787 + C6118;
    const double C33462 = C33457 + C14256;
    const double C25143 = C25129 + C25130;
    const double C25323 = C25311 + C25312;
    const double C28311 = C28305 + C28306;
    const double C33141 = C33135 + C33136;
    const double C38543 = C38535 + C34958;
    const double C35051 = C35041 + C35042;
    const double C35516 = C35497 + C35498;
    const double C38207 = C38195 + C38196;
    const double C38658 = C38653 + C38654;
    const double C54721 = C54707 + C54708;
    const double C70247 = C70243 + C70244;
    const double C449 = C445 + C432;
    const double C450 = C446 + C435;
    const double C2312 = C2309 + C2302;
    const double C3026 = C3023 + C3016;
    const double C11417 = C11413 + C11402;
    const double C40045 = C40037 + C40038;
    const double C9096 = C93706 * C3783;
    const double C24640 = C93718 * C3783;
    const double C28308 = C93829 * C3783;
    const double C35040 = C28720 * C3783;
    const double C38656 = C28719 * C3783;
    const double C65810 = C93718 * C3783;
    const double C70246 = C59272 * C3783;
    const double C87930 = C93853 * C3783;
    const double C91361 = C93856 * C3783;
    const double C11682 = C11677 + C11678;
    const double C25607 = C25602 + C25603;
    const double C36062 = C36052 + C36053;
    const double C528 = C511 + C525;
    const double C4570 = C4562 + C4563;
    const double C662 = C645 + C659;
    const double C10089 = C10081 + C10082;
    const double C744 = C740 + C727;
    const double C529 = C514 + C526;
    const double C663 = C648 + C660;
    const double C745 = C741 + C730;
    const double C2626 = C2623 + C2616;
    const double C5701 = C5697 + C5686;
    const double C20676 = C20668 + C20669;
    const double C3340 = C3337 + C3330;
    const double C9417 = C9416 + C9411;
    const double C92089 = C92081 + C92071;
    const double C31165 = C93680 * C5874;
    const double C37262 = C93694 * C5874;
    const double C54696 = C93694 * C5874;
    const double C92074 = C92073 + C92062;
    const double C8649 =
        (C92170 * (C92148 + C92332 + C92127 * (C92071 + C92127 * C92162))) /
        C91701;
    const double C92577 = ae * C92576;
    const double C16411 = C91722 * C5779;
    const double C26837 = C20049 * C5779;
    const double C31164 = C188 * C5779;
    const double C31268 = C28878 * C5779;
    const double C33347 = C93590 * C5779;
    const double C36546 = C93585 * C5779;
    const double C37261 = C4179 * C5779;
    const double C49180 = C47576 * C5779;
    const double C54695 = C42480 * C5779;
    const double C54932 = C93590 * C5779;
    const double C57159 = C9645 * C5779;
    const double C68639 = C59426 * C5779;
    const double C73147 = C70881 * C5779;
    const double C92343 = ae * C92342;
    const double C4901 = (2 * C92334 + C92127 * C92342) / C91696;
    const double C8524 = (C92170 * C92342) / C91696;
    const double C92445 = ae * C92444;
    const double C10968 = (2 * C92436 + C92170 * C92444) / C91696;
    const double C20612 =
        (4 * (2 * C92819 + ae * C92820 + C92127 * C92974) +
         ae * (3 * C92820 + C92127 * C92975) +
         C92127 * (3 * C92974 + ae * C92975 +
                   C92127 * (2 * C92970 + ae * C92971 +
                             C92127 * (C92156 + ae * C92127 * C92097 +
                                       C92127 * (ae * C92097 +
                                                 C92127 * std::pow(C92018, 7) *
                                                     bs[7] * C92131))))) /
        C91701;
    const double C21162 =
        (2 * C92819 + ae * C92820 + C92127 * C92974 +
         (2 * C92970 + ae * C92971 +
          C92127 * (C92156 + ae * C92127 * C92097 +
                    C92127 * (ae * C92097 +
                              C92127 * std::pow(C92018, 7) * bs[7] * C92131))) *
             C92309) /
        C91701;
    const double C22943 =
        (C92170 * (3 * C92974 + ae * C92975 +
                   C92127 * (2 * C92970 + ae * C92971 +
                             C92127 * (C92156 + ae * C92127 * C92097 +
                                       C92127 * (ae * C92097 +
                                                 C92127 * std::pow(C92018, 7) *
                                                     bs[7] * C92131))))) /
        C91701;
    const double C25107 =
        (2 * C92170 * C92974 +
         C92170 *
             (C92974 + (C92156 + ae * C92127 * C92097 +
                        C92127 * (ae * C92097 + C92127 * std::pow(C92018, 7) *
                                                    bs[7] * C92131)) *
                           C92309)) /
        C91701;
    const double C20731 =
        (4 * (2 * C92828 + ae * C92820 + C92127 * C92984) +
         ae * (3 * C92820 + C92127 * C92975) +
         C92127 * (3 * C92984 + ae * C92975 +
                   C92127 * (2 * C92982 + ae * C92971 +
                             C92127 * (C92227 + ae * C92127 * C92097 +
                                       C92127 * (ae * C92097 +
                                                 C92127 * std::pow(C92018, 7) *
                                                     bs[7] * C92215))))) /
        C91701;
    const double C38321 = C38309 + C38310;
    const double C40101 =
        (4 * (2 * C93151 + ae * C93152 + C92170 * C93301) +
         ae * (3 * C93152 + C92170 * C93302) +
         C92170 * (3 * C93301 + ae * C93302 +
                   C92170 * (2 * C93297 + ae * C93298 +
                             C92170 * (C92199 + ae * C92170 * C92097 +
                                       C92170 * (ae * C92097 +
                                                 C92170 * std::pow(C92018, 7) *
                                                     bs[7] * C92174))))) /
        C91701;
    const double C40331 =
        (4 * (2 * C93170 + ae * C93152 + C92170 * C93314) +
         ae * (3 * C93152 + C92170 * C93302) +
         C92170 * (3 * C93314 + ae * C93302 +
                   C92170 * (2 * C93312 + ae * C93298 +
                             C92170 * (C92285 + ae * C92170 * C92097 +
                                       C92170 * (ae * C92097 +
                                                 C92170 * std::pow(C92018, 7) *
                                                     bs[7] * C92273))))) /
        C91701;
    const double C20678 = C20672 + C20673;
    const double C20756 = C20747 + C20748;
    const double C25322 = C25309 + C25310;
    const double C27975 = C27959 + C27960;
    const double C34803 = C34785 + C34786;
    const double C86122 = C86114 + C86115;
    const double C23021 = C23013 + C23014;
    const double C23105 = C23094 + C23095;
    const double C24403 = C24387 + C24388;
    const double C82762 = C82752 + C82753;
    const double C40047 = C40041 + C40042;
    const double C40167 = C40162 + C40163;
    const double C8533 = C4076 * C3418;
    const double C19107 = C93590 * C3418;
    const double C25884 = C93585 * C3418;
    const double C46657 = C93842 * C3418;
    const double C51834 = C93590 * C3418;
    const double C55648 = C47568 * C3418;
    const double C78440 = C93815 * C3418;
    const double C25013 = C93585 * C5781;
    const double C33020 = C93815 * C5781;
    const double C54562 = C47568 * C5781;
    const double C92109 = C92106 * ae;
    const double C2056 = (C92127 * (3 * C92149 + C92012 * C92167) +
                          (3 * C92063 + C92012 * C92106) * ae) /
                         C91696;
    const double C2856 = (C92170 * (3 * C92192 + C92012 * C92210) +
                          (3 * C92063 + C92012 * C92106) * ae) /
                         C91696;
    const double C3568 =
        (C92170 * C92127 * C92210 + C92127 * C92106 * ae) / C91696;
    const double C113 = 4 * (2 * C92035 + C92012 * C92063) +
                        C92012 * (3 * C92063 + C92012 * C92106);
    const double C811 = 2 * C92035 + C92012 * C92063 + C92106 * C92235;
    const double C1392 = 2 * C92035 + C92012 * C92063 + C92106 * C92309;
    const double C1983 = C92127 * (3 * C92063 + C92012 * C92106);
    const double C2697 = C92170 * (3 * C92063 + C92012 * C92106);
    const double C3412 = C92170 * C92127 * C92106;
    const double C92659 = ae * C92656;
    const double C92658 = C92127 * C92656;
    const double C92742 = C92170 * C92656;
    const double C92810 = ae * C92807;
    const double C92809 = C92170 * C92807;
    const double C92719 = C92718 + C92657;
    const double C92869 = C92151 + C92867;
    const double C92914 = C92646 + C92913;
    const double C92951 = ae * C92949;
    const double C93212 = C92194 + C93209;
    const double C92928 = C92927 + C92866;
    const double C19990 = C275 * C19324;
    const double C26729 = C9645 * C19324;
    const double C66134 = C59426 * C19324;
    const double C93237 = ae * C93235;
    const double C93236 = C92170 * C93235;
    const double C92114 = C92112 + C92098;
    const double C92352 = ae * C92350;
    const double C92620 = C92127 * C92350;
    const double C92724 = C92170 * C92350;
    const double C16398 = (C92342 + C92350 * C92309) / C91696;
    const double C92454 = ae * C92452;
    const double C92760 = C92170 * C92452;
    const double C92583 = ae * C92581;
    const double C92682 = C92330 + C92681;
    const double C93008 = C93006 + C92998;
    const double C93058 = ae * C93056;
    const double C93112 = C92170 * C93056;
    const double C93343 = C93342 + C93335;
    const double C92113 = C92012 * C92111;
    const double C4904 =
        (2 * ae * (2 * C92127 * C92037 + C92127 * (C92037 + C92061 * C92235)) +
         C92012 * (2 * C92328 + C92127 * C92348)) /
        C91701;
    const double C8527 = (2 * ae * C92170 * (C92037 + C92061 * C92235) +
                          C92012 * C92170 * C92348) /
                         C91701;
    const double C15554 = (3 * (C92041 + C92067 * C92235) +
                           C92127 * (2 * C92328 + C92127 * C92348)) /
                          C91701;
    const double C15555 =
        (2 * ae *
             (3 * (C92037 + C92061 * C92235) +
              C92127 * (2 * C92532 + C92127 * (C92061 + C92097 * C92235))) +
         C92012 * (3 * C92348 +
                   C92127 * (2 * C92533 +
                             C92127 * (C92104 +
                                       (C92084 * C92085 +
                                        C92016 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92235)))) /
        C91701;
    const double C16399 = (C92041 + C92067 * C92235 + C92348 * C92309) / C91701;
    const double C16400 =
        (2 * ae * (C92820 + (C92061 + C92097 * C92235) * C92309) +
         C92012 * (C92348 + (C92104 + (C92084 * C92085 +
                                       C92016 * bs[7] * std::pow(C92018, 7)) *
                                          C92019 * C92235) *
                                C92309)) /
        C91701;
    const double C19099 = (C92170 * (2 * C92328 + C92127 * C92348)) / C91701;
    const double C20534 =
        (4 * (2 * C92328 + C92127 * C92348) +
         C92127 * (3 * C92348 +
                   C92127 * (2 * C92533 +
                             C92127 * (C92104 +
                                       (C92084 * C92085 +
                                        C92016 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92235)))) /
        C91701;
    const double C21102 =
        (2 * C92328 + C92127 * C92348 +
         (2 * C92533 +
          C92127 * (C92104 +
                    (C92084 * C92085 + C92016 * bs[7] * std::pow(C92018, 7)) *
                        C92019 * C92235)) *
             C92309) /
        C91701;
    const double C22856 =
        (C92170 *
         (3 * C92348 +
          C92127 * (2 * C92533 +
                    C92127 * (C92104 + (C92084 * C92085 +
                                        C92016 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92235)))) /
        C91701;
    const double C25006 =
        (2 * C92170 * C92348 +
         C92170 * (C92348 + (C92104 + (C92084 * C92085 +
                                       C92016 * bs[7] * std::pow(C92018, 7)) *
                                          C92019 * C92235) *
                                C92309)) /
        C91701;
    const double C10971 =
        (2 * ae * (2 * C92170 * C92037 + C92170 * (C92037 + C92061 * C92309)) +
         C92012 * (2 * C92430 + C92170 * C92450)) /
        C91701;
    const double C30192 = (3 * (C92041 + C92067 * C92309) +
                           C92170 * (2 * C92430 + C92170 * C92450)) /
                          C91701;
    const double C30193 =
        (2 * ae *
             (3 * (C92037 + C92061 * C92309) +
              C92170 * (2 * C92553 + C92170 * (C92061 + C92097 * C92309))) +
         C92012 * (3 * C92450 +
                   C92170 * (2 * C92554 +
                             C92170 * (C92104 +
                                       (C92084 * C92085 +
                                        C92016 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92309)))) /
        C91701;
    const double C39975 =
        (4 * (2 * C92430 + C92170 * C92450) +
         C92170 * (3 * C92450 +
                   C92170 * (2 * C92554 +
                             C92170 * (C92104 +
                                       (C92084 * C92085 +
                                        C92016 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92309)))) /
        C91701;
    const double C92543 = C92542 + C92538;
    const double C33017 =
        (2 * ae *
             (2 * C92170 * C92532 +
              C92170 * (C92532 + C92127 * C92097 * C92309)) +
         C92012 *
             (2 * C92579 +
              C92170 * (C92533 + C92127 *
                                     (C92084 * C92085 +
                                      C92016 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92309))) /
        C91701;
    const double C35397 =
        (3 * (C92328 + C92533 * C92309) +
         C92170 *
             (2 * C92579 +
              C92170 * (C92533 + C92127 *
                                     (C92084 * C92085 +
                                      C92016 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92309))) /
        C91701;
    const double C33022 = C93590 * C5782;
    const double C36246 = C93585 * C5782;
    const double C54560 = C93590 * C5782;
    const double C35400 = C93585 * C25005;
    const double C92564 = C92563 + C92559;
    const double C424 =
        (4 * (2 * C92012 * C92245 + C92012 * C92252) +
         C92012 * (3 * C92252 +
                   C92012 * (2 * C92012 * C92250 +
                             C92012 * (C92250 +
                                       (C92084 * C92085 +
                                        C92235 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92016)))) /
        C91701;
    const double C1076 = (2 * ae * (2 * C92140 + C92012 * C92149) +
                          C92127 * (2 * C92012 * C92245 + C92012 * C92252)) /
                         C91701;
    const double C1657 =
        (C92170 * (2 * C92012 * C92245 + C92012 * C92252)) / C91701;
    const double C1663 = (C92240 + C92245 * C92016 + C92252 * C92309) / C91701;
    const double C1664 =
        (2 * C92012 * C92245 + C92012 * C92252 +
         (2 * C92012 * C92250 +
          C92012 * (C92250 +
                    (C92084 * C92085 + C92235 * bs[7] * std::pow(C92018, 7)) *
                        C92019 * C92016)) *
             C92309) /
        C91701;
    const double C2295 =
        (2 * ae * (3 * C92149 + C92012 * C92167) +
         C92127 * (3 * C92252 +
                   C92012 * (2 * C92012 * C92250 +
                             C92012 * (C92250 +
                                       (C92084 * C92085 +
                                        C92235 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92016)))) /
        C91701;
    const double C3009 =
        (C92170 *
         (3 * C92252 +
          C92012 * (2 * C92012 * C92250 +
                    C92012 * (C92250 + (C92084 * C92085 +
                                        C92235 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92016)))) /
        C91701;
    const double C3711 =
        (2 * ae * C92170 * C92149 + C92127 * C92170 * C92252) / C91701;
    const double C6109 =
        (2 * ae * (C92149 + C92163 * C92309) +
         C92127 * (C92252 + (C92250 + (C92084 * C92085 +
                                       C92235 * bs[7] * std::pow(C92018, 7)) *
                                          C92019 * C92016) *
                                C92309)) /
        C91701;
    const double C11391 =
        (2 * C92170 * C92252 +
         C92170 * (C92252 + (C92250 + (C92084 * C92085 +
                                       C92235 * bs[7] * std::pow(C92018, 7)) *
                                          C92019 * C92016) *
                                C92309)) /
        C91701;
    const double C92864 = C92854 + C92860;
    const double C30604 =
        (3 * (C92643 + C92855 * C92309) +
         C92170 *
             (2 * C92947 +
              C92170 * (C92855 + C92012 *
                                     (C92084 * C92085 +
                                      C92235 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92309))) /
        C91701;
    const double C33453 =
        (2 * ae * (2 * C93165 + C92170 * C93167) +
         C92127 *
             (2 * C92947 +
              C92170 * (C92855 + C92012 *
                                     (C92084 * C92085 +
                                      C92235 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92309))) /
        C91701;
    const double C93000 = C92127 * C92996;
    const double C25408 =
        (2 * ae * (2 * C92170 * C92138 + C92170 * (C92138 + C92145 * C92309)) +
         C92127 * (2 * C92941 + C92170 * C93054)) /
        C91701;
    const double C30603 = (3 * (C92240 + C92245 * C92309) +
                           C92170 * (2 * C92941 + C92170 * C93054)) /
                          C91701;
    const double C35779 =
        (2 * ae *
             (3 * C93163 +
              C92170 * (2 * C93060 + C92170 * (C92145 + C92158 * C92309))) +
         C92127 * (3 * C93054 +
                   C92170 * (2 * C93082 +
                             C92170 * (C92250 +
                                       (C92084 * C92085 +
                                        C92235 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92309)))) /
        C91701;
    const double C40219 =
        (4 * (2 * C92941 + C92170 * C93054) +
         C92170 * (3 * C93054 +
                   C92170 * (2 * C93082 +
                             C92170 * (C92250 +
                                       (C92084 * C92085 +
                                        C92235 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92309)))) /
        C91701;
    const double C93090 = C93081 + C93086;
    const double C719 =
        (4 * (2 * C92012 * C92319 + C92012 * C92326) +
         C92012 * (3 * C92326 +
                   C92012 * (2 * C92012 * C92324 +
                             C92012 * (C92324 +
                                       (C92084 * C92085 +
                                        C92309 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92016)))) /
        C91701;
    const double C1316 =
        (C92127 * (2 * C92012 * C92319 + C92012 * C92326)) / C91701;
    const double C1322 = (C92314 + C92319 * C92016 + C92326 * C92235) / C91701;
    const double C1323 =
        (2 * C92012 * C92319 + C92012 * C92326 +
         (2 * C92012 * C92324 +
          C92012 * (C92324 +
                    (C92084 * C92085 + C92309 * bs[7] * std::pow(C92018, 7)) *
                        C92019 * C92016)) *
             C92235) /
        C91701;
    const double C1897 = (2 * ae * (2 * C92183 + C92012 * C92192) +
                          C92170 * (2 * C92012 * C92319 + C92012 * C92326)) /
                         C91701;
    const double C2609 =
        (C92127 *
         (3 * C92326 +
          C92012 * (2 * C92012 * C92324 +
                    C92012 * (C92324 + (C92084 * C92085 +
                                        C92309 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92016)))) /
        C91701;
    const double C3323 =
        (2 * ae * (3 * C92192 + C92012 * C92210) +
         C92170 * (3 * C92326 +
                   C92012 * (2 * C92012 * C92324 +
                             C92012 * (C92324 +
                                       (C92084 * C92085 +
                                        C92309 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92016)))) /
        C91701;
    const double C3995 =
        (2 * ae * C92127 * C92192 + C92170 * C92127 * C92326) / C91701;
    const double C5677 =
        (2 * C92127 * C92326 +
         C92127 * (C92326 + (C92324 + (C92084 * C92085 +
                                       C92309 * bs[7] * std::pow(C92018, 7)) *
                                          C92019 * C92016) *
                                C92235)) /
        C91701;
    const double C9408 =
        (2 * ae * (C92192 + C92206 * C92235) +
         C92170 * (C92326 + (C92324 + (C92084 * C92085 +
                                       C92309 * bs[7] * std::pow(C92018, 7)) *
                                          C92019 * C92016) *
                                C92235)) /
        C91701;
    const double C93205 = C93199 + C93200;
    const double C21043 =
        (4 * (2 * C92127 * C92319 + C92127 * C93043) +
         C92127 * (3 * C93043 +
                   C92127 * (2 * C92127 * C92324 +
                             C92127 * (C92324 +
                                       (C92084 * C92085 +
                                        C92309 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92235)))) /
        C91701;
    const double C23465 =
        (2 * ae * (3 * C92880 + C92127 * C93031) +
         C92170 * (3 * C93043 +
                   C92127 * (2 * C92127 * C92324 +
                             C92127 * (C92324 +
                                       (C92084 * C92085 +
                                        C92309 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92235)))) /
        C91701;
    const double C93276 = C93266 + C93272;
    const double C93337 = C92170 * C93333;
    const double C93009 = C93007 * ae;
    const double C23010 = (C92170 * (3 * C92880 + C92127 * C93031) +
                           (3 * C92842 + C92127 * C93007) * ae) /
                          C91696;
    const double C20532 = 4 * (2 * C92634 + C92127 * C92842) +
                          C92127 * (3 * C92842 + C92127 * C93007);
    const double C21100 = 2 * C92634 + C92127 * C92842 + C93007 * C92309;
    const double C22854 = C92170 * (3 * C92842 + C92127 * C93007);
    const double C93139 = ae * C93136;
    const double C93138 = C92170 * C93136;
    const double C93281 = C93020 + C93279;
    const double C93339 = C93336 * ae;
    const double C39973 = 4 * (2 * C92786 + C92170 * C93190) +
                          C92170 * (3 * C93190 + C92170 * C93336);
    const double C92392 = ae * C92391;
    const double C892 =
        (C92133 + C92138 * C92016 + C92127 * C92391 + C92127 * C92063 * ae) /
        C91696;
    const double C3493 = (C92170 * C92391) / C91696;
    const double C5872 = (C92391 + C92656 * C92309) / C91696;
    const double C225 = C216 + C217;
    const double C443 = C436 + C437;
    const double C523 = C517 + C518;
    const double C2304 = C2297 + C1085;
    const double C2072 = C2061 + C2062;
    const double C4215 = C4201 + C4202;
    const double C4469 = C4457 + C4458;
    const double C42516 = C42502 + C42503;
    const double C3018 = C3011 + C1666;
    const double C2786 = C2775 + C2776;
    const double C3103 = C3094 + C3095;
    const double C9924 = C9916 + C9917;
    const double C59705 = C59697 + C59698;
    const double C11407 = C11397 + C1672;
    const double C11110 = C11097 + C11098;
    const double C13413 = C13405 + C13406;
    const double C29153 = C29144 + C29145;
    const double C63065 = C63057 + C63058;
    const double C16490 =
        (C92148 + C92332 + C92127 * C92823 +
         (C92162 + C92541 +
          C92127 *
              (C92110 + C92127 * (ae * C92158 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92131))) *
             C92309) /
        C91701;
    const double C33129 =
        (2 * C92170 * C92823 +
         C92170 * (C92823 + (C92110 + C92127 * (ae * C92158 +
                                                C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92131)) *
                                C92309)) /
        C91701;
    const double C200 =
        (4 * (2 * C92148 + ae * C92149 + C92012 * C92166) +
         ae * (3 * C92149 + C92012 * C92167) +
         C92012 * (3 * C92166 + ae * C92167 +
                   C92012 * (2 * C92162 + ae * C92163 +
                             C92012 * (C92156 + ae * C92012 * C92158 +
                                       C92012 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92131))))) /
        C91701;
    const double C1475 =
        (C92170 * (2 * C92148 + ae * C92149 + C92012 * C92166)) / C91701;
    const double C1481 =
        (C92137 + ae * C92140 + C92012 * C92148 + C92166 * C92309) / C91701;
    const double C1482 =
        (2 * C92148 + ae * C92149 + C92012 * C92166 +
         (2 * C92162 + ae * C92163 +
          C92012 * (C92156 + ae * C92012 * C92158 +
                    C92012 * (ae * C92158 +
                              C92012 * std::pow(C92018, 7) * bs[7] * C92131))) *
             C92309) /
        C91701;
    const double C2771 =
        (C92170 * (3 * C92166 + ae * C92167 +
                   C92012 * (2 * C92162 + ae * C92163 +
                             C92012 * (C92156 + ae * C92012 * C92158 +
                                       C92012 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92131))))) /
        C91701;
    const double C11085 =
        (2 * C92170 * C92166 +
         C92170 *
             (C92166 + (C92156 + ae * C92012 * C92158 +
                        C92012 * (ae * C92158 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92131)) *
                           C92309)) /
        C91701;
    const double C367 =
        (4 * (2 * C92223 + ae * C92149 + C92012 * C92231) +
         ae * (3 * C92149 + C92012 * C92167) +
         C92012 * (3 * C92231 + ae * C92167 +
                   C92012 * (2 * C92229 + ae * C92163 +
                             C92012 * (C92227 + ae * C92012 * C92158 +
                                       C92012 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92215))))) /
        C91701;
    const double C1599 =
        (C92170 * (2 * C92223 + ae * C92149 + C92012 * C92231)) / C91701;
    const double C1605 =
        (C92218 + ae * C92140 + C92012 * C92223 + C92231 * C92309) / C91701;
    const double C1606 =
        (2 * C92223 + ae * C92149 + C92012 * C92231 +
         (2 * C92229 + ae * C92163 +
          C92012 * (C92227 + ae * C92012 * C92158 +
                    C92012 * (ae * C92158 +
                              C92012 * std::pow(C92018, 7) * bs[7] * C92215))) *
             C92309) /
        C91701;
    const double C2942 =
        (C92170 * (3 * C92231 + ae * C92167 +
                   C92012 * (2 * C92229 + ae * C92163 +
                             C92012 * (C92227 + ae * C92012 * C92158 +
                                       C92012 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92215))))) /
        C91701;
    const double C11278 =
        (2 * C92170 * C92231 +
         C92170 *
             (C92231 + (C92227 + ae * C92012 * C92158 +
                        C92012 * (ae * C92158 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92215)) *
                           C92309)) /
        C91701;
    const double C32585 = C32579 + C32580;
    const double C6351 =
        (ae * C92183 + C92127 * C92672 + ae * C92170 * C92646 +
         C92170 * (C92649 + C92170 * (C92198 + C92127 * C92012 * C92303))) /
        C91701;
    const double C92650 = C92140 + C92648;
    const double C92740 = ae * C92739;
    const double C6120 = C4179 * C5871;
    const double C14257 = C188 * C5871;
    const double C16732 = C14839 * C5871;
    const double C31167 = C93680 * C5871;
    const double C31585 = C28878 * C5871;
    const double C33350 = C91722 * C5871;
    const double C36547 = C20049 * C5871;
    const double C36649 = C4178 * C5871;
    const double C37258 = C93694 * C5871;
    const double C44296 = C42480 * C5871;
    const double C54700 = C93694 * C5871;
    const double C54927 = C47576 * C5871;
    const double C57575 = C9645 * C5871;
    const double C69043 = C59426 * C5871;
    const double C73459 = C70881 * C5871;
    const double C30619 = C30617 + C11404;
    const double C30331 = C30326 * C91722;
    const double C32797 = C30326 * C28878;
    const double C41189 = C30326 * C20049;
    const double C72286 = C30326 * C47576;
    const double C74640 = C30326 * C70881;
    const double C92995 = C92986 + C92845;
    const double C92847 = C92846 + C92841;
    const double C92911 = ae * C92910;
    const double C25104 = (2 * C92736 + C92170 * C92910) / C91696;
    const double C21375 =
        (2 * (ae * (C92181 + C92170 * (C92170 * C92188 + C92057) +
                    C92170 * C92050 * ae) +
              C92127 * C93066) +
         ae * (C92880 + C92170 * (C92170 * C93026 + C93002) +
               C92170 * C92999 * ae) +
         C92127 *
             (C93066 +
              ae * (C93020 + C92170 * (C92170 * C92127 * C92201 + C92998) +
                    C92170 * C92992 * ae) +
              C92127 * (ae * (C92188 + C92170 * (C92170 * C92201 + C92093) +
                              C92170 * C92083 * ae) +
                        C92127 * (C92266 + ae * C92170 * C92158 +
                                  C92170 * (ae * C92158 +
                                            C92170 * std::pow(C92018, 7) *
                                                bs[7] * C92257))))) /
        C91701;
    const double C25517 =
        (ae * (2 * C92787 +
               C92170 * (C92181 + C92170 * C93094 + C92170 * C92050 * ae) +
               (C92029 + C92050 * C92309) * ae) +
         C92127 *
             (2 * C92954 + ae * (C92138 + C92145 * C92309) + C92170 * C93066)) /
        C91701;
    const double C25518 =
        (2 * C92954 + ae * (C92138 + C92145 * C92309) + C92170 * C93066 +
         ae * (2 * (C92170 * C93020 + C92841) +
               C92170 * (C93020 + C92170 * (C92170 * C92127 * C92201 + C92998) +
                         C92170 * C92992 * ae) +
               (C92837 + C92992 * C92309) * ae) +
         C92127 *
             (ae * (2 * C93094 +
                    C92170 * (C92188 + C92170 * (C92170 * C92201 + C92093) +
                              C92170 * C92083 * ae) +
                    (C92050 + C92083 * C92309) * ae) +
              C92127 * (2 * C93063 + ae * (C92145 + C92158 * C92309) +
                        C92170 * (C92266 + ae * C92170 * C92158 +
                                  C92170 * (ae * C92158 +
                                            C92170 * std::pow(C92018, 7) *
                                                bs[7] * C92257))))) /
        C91701;
    const double C30698 =
        (3 * (C92260 + ae * C93161 + C92170 * C92954) +
         ae * (2 * C93161 + C92170 * C93163) +
         C92170 * (2 * C92954 + ae * C93163 + C92170 * C93066)) /
        C91701;
    const double C40280 =
        (4 * (2 * C92954 + ae * C93163 + C92170 * C93066) +
         ae * (3 * C93163 + C92170 * C93308) +
         C92170 * (3 * C93066 + ae * C93308 +
                   C92170 * (2 * C93063 + ae * C93257 +
                             C92170 * (C92266 + ae * C92170 * C92158 +
                                       C92170 * (ae * C92158 +
                                                 C92170 * std::pow(C92018, 7) *
                                                     bs[7] * C92257))))) /
        C91701;
    const double C40385 =
        (4 * (2 * C93176 + ae * C93163 + C92170 * C93320) +
         ae * (3 * C93163 + C92170 * C93308) +
         C92170 * (3 * C93320 + ae * C93308 +
                   C92170 * (2 * C93318 + ae * C93257 +
                             C92170 * (C92303 + ae * C92170 * C92158 +
                                       C92170 * (ae * C92158 +
                                                 C92170 * std::pow(C92018, 7) *
                                                     bs[7] * C92294))))) /
        C91701;
    const double C40227 = C40224 + C30614;
    const double C40048 = C40043 + C40044;
    const double C40166 = C40160 + C40161;
    const double C11111 = C11099 + C11100;
    const double C37265 = C37259 + C37260;
    const double C25139 = C25121 + C25122;
    const double C38210 = C38201 + C38202;
    const double C90925 = C90920 + C90921;
    const double C27860 = C27853 + C27854;
    const double C35519 = C35503 + C35504;
    const double C41816 = C41813 + C41814;
    const double C88372 = C88362 + C88363;
    const double C40046 = C40039 + C40040;
    const double C92526 = ae * C92525;
    const double C1539 =
        (C92176 + C92181 * C92016 + C92170 * C92525 + C92170 * C92063 * ae) /
        C91696;
    const double C2389 = C2380 + C2381;
    const double C312 = C303 + C304;
    const double C657 = C651 + C652;
    const double C738 = C731 + C732;
    const double C2618 = C2611 + C1325;
    const double C2158 = C2147 + C2148;
    const double C2538 = C2529 + C2530;
    const double C4738 = C4730 + C4731;
    const double C43039 = C43031 + C43032;
    const double C5691 = C5681 + C1331;
    const double C5126 = C5113 + C5114;
    const double C7331 = C7323 + C7324;
    const double C15394 = C15385 + C15386;
    const double C45492 = C45484 + C45485;
    const double C3332 = C3325 + C1906;
    const double C2872 = C2861 + C2862;
    const double C3252 = C3243 + C3244;
    const double C9681 = C9667 + C9668;
    const double C10194 = C10182 + C10183;
    const double C59462 = C59448 + C59449;
    const double C8415 = C8409 + C4000;
    const double C7770 = C7763 + C7764;
    const double C12736 = C12726 + C10879;
    const double C12096 = C12082 + C12083;
    const double C61764 = C61750 + C61751;
    const double C287 =
        (4 * (2 * C92191 + ae * C92192 + C92012 * C92209) +
         ae * (3 * C92192 + C92012 * C92210) +
         C92012 * (3 * C92209 + ae * C92210 +
                   C92012 * (2 * C92205 + ae * C92206 +
                             C92012 * (C92199 + ae * C92012 * C92201 +
                                       C92012 * (ae * C92201 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92174))))) /
        C91701;
    const double C960 =
        (C92127 * (2 * C92191 + ae * C92192 + C92012 * C92209)) / C91701;
    const double C966 =
        (C92180 + ae * C92183 + C92012 * C92191 + C92209 * C92235) / C91701;
    const double C967 =
        (2 * C92191 + ae * C92192 + C92012 * C92209 +
         (2 * C92205 + ae * C92206 +
          C92012 * (C92199 + ae * C92012 * C92201 +
                    C92012 * (ae * C92201 +
                              C92012 * std::pow(C92018, 7) * bs[7] * C92174))) *
             C92235) /
        C91701;
    const double C2143 =
        (C92127 * (3 * C92209 + ae * C92210 +
                   C92012 * (2 * C92205 + ae * C92206 +
                             C92012 * (C92199 + ae * C92012 * C92201 +
                                       C92012 * (ae * C92201 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92174))))) /
        C91701;
    const double C5101 =
        (2 * C92127 * C92209 +
         C92127 *
             (C92209 + (C92199 + ae * C92012 * C92201 +
                        C92012 * (ae * C92201 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92174)) *
                           C92235)) /
        C91701;
    const double C584 =
        (4 * (2 * C92281 + ae * C92192 + C92012 * C92289) +
         ae * (3 * C92192 + C92012 * C92210) +
         C92012 * (3 * C92289 + ae * C92210 +
                   C92012 * (2 * C92287 + ae * C92206 +
                             C92012 * (C92285 + ae * C92012 * C92201 +
                                       C92012 * (ae * C92201 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92273))))) /
        C91701;
    const double C1200 =
        (C92127 * (2 * C92281 + ae * C92192 + C92012 * C92289)) / C91701;
    const double C1206 =
        (C92276 + ae * C92183 + C92012 * C92281 + C92289 * C92235) / C91701;
    const double C1207 =
        (2 * C92281 + ae * C92192 + C92012 * C92289 +
         (2 * C92287 + ae * C92206 +
          C92012 * (C92285 + ae * C92012 * C92201 +
                    C92012 * (ae * C92201 +
                              C92012 * std::pow(C92018, 7) * bs[7] * C92273))) *
             C92235) /
        C91701;
    const double C2460 =
        (C92127 * (3 * C92289 + ae * C92210 +
                   C92012 * (2 * C92287 + ae * C92206 +
                             C92012 * (C92285 + ae * C92012 * C92201 +
                                       C92012 * (ae * C92201 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92273))))) /
        C91701;
    const double C5505 =
        (2 * C92127 * C92289 +
         C92127 *
             (C92289 + (C92285 + ae * C92012 * C92201 +
                        C92012 * (ae * C92201 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92273)) *
                           C92235)) /
        C91701;
    const double C17938 = C17932 + C17933;
    const double C92715 = ae * C92714;
    const double C5951 =
        (C92127 * C92183 + C92170 * C92714 + C92170 * C92645 * ae) / C91696;
    const double C92801 = C92183 + C92799;
    const double C16318 = C16316 + C5688;
    const double C15772 = C15767 * C91722;
    const double C17719 = C15767 * C14840;
    const double C21752 = C15767 * C20049;
    const double C48575 = C15767 * C47576;
    const double C50466 = C15767 * C47671;
    const double C18995 = C18994 + C9413;
    const double C26733 = C26731 + C10888;
    const double C18680 = C18365 * C14840;
    const double C19329 = C18365 * C91722;
    const double C51420 = C18365 * C47671;
    const double C52048 = C18365 * C47576;
    const double C92925 = ae * C92924;
    const double C16565 =
        (C92176 + C92181 * C92235 + C92170 * C92924 + C92170 * C92842 * ae) /
        C91696;
    const double C21048 = C21045 + C16314;
    const double C20679 = C20674 + C20675;
    const double C20936 = C20930 + C20931;
    const double C23470 = C23467 + C19989;
    const double C23022 = C23015 + C23016;
    const double C23327 = C23318 + C23319;
    const double C24405 = C24391 + C24392;
    const double C24913 = C24901 + C24902;
    const double C82764 = C82756 + C82757;
    const double C20865 =
        (4 * (2 * C92879 + ae * C92880 + C92127 * C93030) +
         ae * (3 * C92880 + C92127 * C93031) +
         C92127 * (3 * C93030 + ae * C93031 +
                   C92127 * (2 * C93024 + ae * C93026 +
                             C92127 * (C92266 + ae * C92127 * C92201 +
                                       C92127 * (ae * C92201 +
                                                 C92127 * std::pow(C92018, 7) *
                                                     bs[7] * C92257))))) /
        C91701;
    const double C20992 =
        (4 * (2 * C92892 + ae * C92880 + C92127 * C93040) +
         ae * (3 * C92880 + C92127 * C93031) +
         C92127 * (3 * C93040 + ae * C93031 +
                   C92127 * (2 * C93038 + ae * C93026 +
                             C92127 * (C92303 + ae * C92127 * C92201 +
                                       C92127 * (ae * C92201 +
                                                 C92127 * std::pow(C92018, 7) *
                                                     bs[7] * C92294))))) /
        C91701;
    const double C93130 = C92707 + C93128;
    const double C93332 = C93322 + C93095;
    const double C93191 = C93188 + C93189;
    const double C5127 = C5115 + C5116;
    const double C26102 = C26096 + C26097;
    const double C20677 = C20670 + C20671;
    const double C11309 = C11290 + C11291;
    const double C32374 = C32361 + C32362;
    const double C57312 = C57307 + C57308;
    const double C30520 = C30503 + C30504;
    const double C37474 = C37469 + C37470;
    const double C54951 = C54935 + C54936;
    const double C30521 = C30505 + C30506;
    const double C41332 = C41329 + C41330;
    const double C72452 = C72442 + C72443;
    const double C31483 = C93680 * C6108;
    const double C37578 = C93694 * C6108;
    const double C55058 = C93694 * C6108;
    const double C30611 = C93680 * C11390;
    const double C2311 = C2308 + C2300;
    const double C3025 = C3022 + C3014;
    const double C30622 = C30620 + C30613;
    const double C5521 = C5511 + C5512;
    const double C17831 = C17824 + C17825;
    const double C50578 = C50571 + C50572;
    const double C16152 = C16143 + C16144;
    const double C22050 = C22044 + C22045;
    const double C48943 = C48934 + C48935;
    const double C16153 = C16145 + C16146;
    const double C22051 = C22047 + C22048;
    const double C48944 = C48936 + C48937;
    const double C16311 = C93706 * C5676;
    const double C18991 = C93706 * C9407;
    const double C26727 = C93718 * C9407;
    const double C66124 = C93718 * C9407;
    const double C2625 = C2622 + C2614;
    const double C3339 = C3336 + C3328;
    const double C16321 = C16319 + C16313;
    const double C19993 = C19992 + C19988;
    const double C20545 = C20049 * C20533;
    const double C21111 = C20049 * C21101;
    const double C22864 = C20049 * C22855;
    const double C39979 = C20049 * C39974;
    const double C439 = C188 * C194;
    const double C1673 = C188 * C1474;
    const double C3017 = C188 * C2770;
    const double C40226 = C188 * C40032;
    const double C734 = C275 * C281;
    const double C1332 = C275 * C959;
    const double C2617 = C275 * C2142;
    const double C21047 = C275 * C20663;
    const double C43753 = C43743 + C43744;
    const double C61039 = C61020 + C61021;
    const double C91728 = C91726 * ae;
    const double C91727 = C91726 * C91706;
    const double C4081 =
        ((-C91695 / C91696) / C91702 - (C91713 * be) / C91696) / C91702 -
        ((C91697 * ((-C91698 / C91696) / C91702 - (C91726 * be) / C91696) +
          C47568) *
         be) /
            C91696 +
        (-C91716 / C91696) / C91702 - (0 * be) / C91696;
    const double C4083 =
        ((-C91698 / C91696) / C91702 - (C91726 * be) / C91696) / C91702 -
        ((C91697 * ((-C91716 / C91696) / C91702 - (0 * be) / C91696) + C93590) *
         be) /
            C91696;
    const double C47574 = (-C91698 / C91696) / C91702 - (C91726 * be) / C91696;
    const double C20927 = C20753 * C275;
    const double C24741 = C20753 * C9644;
    const double C20924 = C20751 * C275;
    const double C24734 = C20751 * C9644;
    const double C35140 = C20751 * C28876;
    const double C20921 = C20749 * C275;
    const double C24730 = C20749 * C9644;
    const double C35129 = C20749 * C28876;
    const double C20939 = C20935 * C93706;
    const double C24740 = C20935 * C93829;
    const double C83083 = C20935 * C59272;
    const double C20938 = C20934 * C93706;
    const double C24735 = C20934 * C93829;
    const double C35139 = C20934 * C28719;
    const double C83078 = C20934 * C59272;
    const double C88029 = C20934 * C93856;
    const double C20937 = C20933 * C93706;
    const double C24731 = C20933 * C93829;
    const double C35130 = C20933 * C28719;
    const double C83074 = C20933 * C59272;
    const double C88020 = C20933 * C93856;
    const double C22052 = C22049 * C93706;
    const double C26515 = C22049 * C93829;
    const double C36848 = C22049 * C28719;
    const double C84707 = C22049 * C59272;
    const double C89624 = C22049 * C93856;
    const double C23326 = C23109 * C275;
    const double C24732 = C23109 * C9645;
    const double C25303 = C23109 * C14839;
    const double C28081 = C23109 * C14838;
    const double C28418 = C23109 * C9644;
    const double C35131 = C23109 * C28877;
    const double C35681 = C23109 * C4179;
    const double C38425 = C23109 * C4178;
    const double C38763 = C23109 * C28876;
    const double C41951 = C23109 * C188;
    const double C83075 = C23109 * C59426;
    const double C88527 = C23109 * C42480;
    const double C23323 = C23107 * C275;
    const double C24736 = C23107 * C9645;
    const double C25305 = C23107 * C14840;
    const double C28083 = C23107 * C14839;
    const double C28414 = C23107 * C9644;
    const double C35138 = C23107 * C28877;
    const double C38427 = C23107 * C4179;
    const double C83079 = C23107 * C59426;
    const double C83585 = C23107 * C47671;
    const double C91142 = C23107 * C42480;
    const double C23332 = C23329 * C93706;
    const double C24733 = C23329 * C93718;
    const double C28417 = C23329 * C93829;
    const double C35132 = C23329 * C28720;
    const double C38762 = C23329 * C28719;
    const double C83076 = C23329 * C93718;
    const double C86554 = C23329 * C59272;
    const double C88022 = C23329 * C93853;
    const double C91467 = C23329 * C93856;
    const double C23331 = C23328 * C93706;
    const double C24737 = C23328 * C93718;
    const double C28413 = C23328 * C93829;
    const double C35137 = C23328 * C28720;
    const double C83080 = C23328 * C93718;
    const double C86550 = C23328 * C59272;
    const double C88027 = C23328 * C93853;
    const double C25334 = C25326 * C14838;
    const double C35683 = C25326 * C4178;
    const double C40156 = C25326 * C188;
    const double C25333 = C25325 * C14739;
    const double C35684 = C25325 * C93828;
    const double C40157 = C25325 * C93680;
    const double C83591 = C25325 * C93855;
    const double C88530 = C25325 * C42379;
    const double C25332 = C25324 * C14839;
    const double C28416 = C25324 * C9645;
    const double C35133 = C25324 * C28878;
    const double C35685 = C25324 * C4179;
    const double C38429 = C25324 * C4178;
    const double C38761 = C25324 * C28877;
    const double C41953 = C25324 * C188;
    const double C86553 = C25324 * C59426;
    const double C88023 = C25324 * C70881;
    const double C88531 = C25324 * C42480;
    const double C25328 = C25320 * C14739;
    const double C35680 = C25320 * C93828;
    const double C40155 = C25320 * C93680;
    const double C83582 = C25320 * C93855;
    const double C88526 = C25320 * C42379;
    const double C25327 = C25319 * C14838;
    const double C35679 = C25319 * C4178;
    const double C40154 = C25319 * C188;
    const double C27147 = C27145 * C14739;
    const double C37464 = C27145 * C93828;
    const double C41324 = C27145 * C93680;
    const double C85303 = C27145 * C93855;
    const double C90218 = C27145 * C42379;
    const double C35704 = C35699 * C4178;
    const double C40158 = C35699 * C188;
    const double C35703 = C35698 * C93828;
    const double C40159 = C35698 * C93680;
    const double C88535 = C35698 * C42379;
    const double C35702 = C35697 * C4179;
    const double C38759 = C35697 * C28878;
    const double C41955 = C35697 * C188;
    const double C88534 = C35697 * C42480;
    const double C91464 = C35697 * C70881;
    const double C91825 = C91824 * C91706;
    const double C91842 = C91824 * ae;
    const double C42479 = (-C91813 / C91696) / C91702 - (C91824 * be) / C91696;
    const double C48225 = C48216 + C48217;
    const double C48224 = C48214 + C48215;
    const double C50685 = C50679 + C50680;
    const double C83427 = C83409 + C83410;
    const double C83426 = C83407 + C83408;
    const double C86015 = C86008 + C86009;
    const double C4482 = C4476 + C4462;
    const double C4479 = C4473 + C4453;
    const double C4477 = C4471 + C4447;
    const double C7011 = C7007 + C6997;
    const double C7009 = C7005 + C6993;
    const double C7990 = C7986 + C7976;
    const double C7988 = C7984 + C7972;
    const double C35814 = C35808 + C35794;
    const double C35811 = C35805 + C35786;
    const double C35809 = C35803 + C35782;
    const double C4480 = C4474 + C4456;
    const double C4478 = C4472 + C4450;
    const double C11418 = C11414 * C4075;
    const double C30606 = C11414 * C93815;
    const double C40221 = C11414 * C93585;
    const double C61120 = C11414 * C93854;
    const double C72531 = C11414 * C47568;
    const double C4725 = C4217 * C275;
    const double C4741 = C4740 * C93706;
    const double C35526 = C35524 * C93585;
    const double C14877 = C14864 + C14865;
    const double C14874 = C14858 + C14859;
    const double C14869 = C14848 + C14849;
    const double C14866 = C14842 + C14843;
    const double C15396 = C15389 + C15390;
    const double C15391 = C15379 + C15380;
    const double C17275 = C17268 + C17269;
    const double C17940 = C17936 + C17937;
    const double C18261 = C18254 + C18255;
    const double C18258 = C18248 + C18249;
    const double C18891 = C18887 + C18888;
    const double C25144 = C25131 + C25132;
    const double C25141 = C25125 + C25126;
    const double C25136 = C25115 + C25116;
    const double C25133 = C25109 + C25110;
    const double C25701 = C25694 + C25695;
    const double C25696 = C25684 + C25685;
    const double C27858 = C27849 + C27850;
    const double C27855 = C27843 + C27844;
    const double C91895 = C91894 * C91706;
    const double C91908 = C91894 * ae;
    const double C59425 = (-C91883 / C91696) / C91702 - (C91894 * be) / C91696;
    const double C71156 = C71147 + C71148;
    const double C71155 = C71145 + C71146;
    const double C74434 = C74428 + C74429;
    const double C87697 = C87679 + C87680;
    const double C87696 = C87677 + C87678;
    const double C87941 = C87931 + C87932;
    const double C91036 = C91024 + C91025;
    const double C10207 = C10201 + C10187;
    const double C10204 = C10198 + C10178;
    const double C10202 = C10196 + C10172;
    const double C12747 = C12743 + C12733;
    const double C12745 = C12741 + C12729;
    const double C13749 = C13745 + C13735;
    const double C13747 = C13743 + C13731;
    const double C24926 = C24920 + C24906;
    const double C24923 = C24917 + C24898;
    const double C24921 = C24915 + C24894;
    const double C28645 = C28641 + C28631;
    const double C28643 = C28639 + C28627;
    const double C10205 = C10199 + C10181;
    const double C10203 = C10197 + C10175;
    const double C24924 = C24918 + C24900;
    const double C24922 = C24916 + C24896;
    const double C747 = C743 * C93680;
    const double C4817 = C743 * C93828;
    const double C15471 = C743 * C14739;
    const double C43118 = C743 * C42379;
    const double C48302 = C743 * C93855;
    const double C9911 = C9683 * C188;
    const double C9927 = C9926 * C93680;
    const double C24410 = C24408 * C93585;
    const double C24409 = C24407 * C20049;
    const double C28915 = C28902 + C28903;
    const double C28912 = C28896 + C28897;
    const double C28907 = C28886 + C28887;
    const double C28904 = C28880 + C28881;
    const double C29155 = C29148 + C29149;
    const double C29150 = C29138 + C29139;
    const double C31285 = C31278 + C31279;
    const double C31282 = C31272 + C31273;
    const double C31593 = C31589 + C31590;
    const double C32256 = C32249 + C32250;
    const double C32587 = C32583 + C32584;
    const double C34808 = C34795 + C34796;
    const double C34805 = C34789 + C34790;
    const double C34800 = C34779 + C34780;
    const double C34797 = C34773 + C34774;
    const double C35054 = C35047 + C35048;
    const double C35049 = C35037 + C35038;
    const double C38326 = C38319 + C38320;
    const double C38323 = C38313 + C38314;
    const double C2075 = C2067 + C2068;
    const double C4208 = C4187 + C4188;
    const double C6669 = C6658 + C6659;
    const double C14870 = C14850 + C14851;
    const double C17272 = C17262 + C17263;
    const double C42509 = C42488 + C42489;
    const double C15879 = C15858 + C15859;
    const double C21833 = C21822 + C21823;
    const double C48682 = C48661 + C48662;
    const double C2875 = C2867 + C2868;
    const double C9674 = C9653 + C9654;
    const double C13087 = C13076 + C13077;
    const double C28908 = C28888 + C28889;
    const double C32253 = C32243 + C32244;
    const double C59455 = C59434 + C59435;
    const double C27444 = C27442 + C27443;
    const double C30790 = C30779 + C30780;
    const double C55296 = C55285 + C55286;
    const double C5108 = C2161 * C4076;
    const double C6771 = C2161 * C4075;
    const double C15752 = C2161 * C93590;
    const double C17375 = C2161 * C93815;
    const double C21749 = C2161 * C93585;
    const double C43386 = C2161 * C93842;
    const double C44932 = C2161 * C93854;
    const double C48569 = C2161 * C93590;
    const double C50122 = C2161 * C47568;
    const double C22040 = C21832 * C275;
    const double C26514 = C21832 * C9644;
    const double C36847 = C21832 * C28876;
    const double C11092 = C2789 * C4076;
    const double C12963 = C2789 * C4075;
    const double C30311 = C2789 * C93590;
    const double C32134 = C2789 * C93815;
    const double C41186 = C2789 * C93585;
    const double C60853 = C2789 * C93842;
    const double C62615 = C2789 * C93854;
    const double C72280 = C2789 * C93590;
    const double C73995 = C2789 * C47568;
    const double C27146 = C27144 * C14838;
    const double C37463 = C27144 * C4178;
    const double C41323 = C27144 * C188;
    const double C6995 = C93694 * C1081;
    const double C15114 = C14741 * C1081;
    const double C17605 = C14740 * C1081;
    const double C45156 = C93694 * C1081;
    const double C47945 = C47572 * C1081;
    const double C50352 = C93850 * C1081;
    const double C8304 = C93694 * C3924;
    const double C12620 = C93680 * C3924;
    const double C18886 = C14740 * C3924;
    const double C46447 = C93694 * C3924;
    const double C51624 = C93850 * C3924;
    const double C56616 = C42379 * C3924;
    const double C68110 = C93828 * C3924;
    const double C7002 = C6994 + C5331;
    const double C5428 = C5422 + C5423;
    const double C6670 = C6660 + C6661;
    const double C14868 = C14846 + C14847;
    const double C17274 = C17266 + C17267;
    const double C26414 = C26410 + C26411;
    const double C44831 = C44821 + C44822;
    const double C47699 = C47677 + C47678;
    const double C12303 = C12300 + C3715;
    const double C7981 = C7973 + C6113;
    const double C7661 = C7651 + C7652;
    const double C67710 = C67707 + C8990;
    const double C11979 = C11974 + C11975;
    const double C18260 = C18252 + C18253;
    const double C45822 = C45812 + C45813;
    const double C67310 = C67305 + C67306;
    const double C13733 = C93718 * C1902;
    const double C29404 = C28721 * C1902;
    const double C32903 = C28720 * C1902;
    const double C63385 = C93718 * C1902;
    const double C71407 = C70728 * C1902;
    const double C74746 = C93853 * C1902;
    const double C8095 = C93706 * C3784;
    const double C12411 = C93718 * C3784;
    const double C31588 = C28720 * C3784;
    const double C57578 = C93829 * C3784;
    const double C62069 = C93718 * C3784;
    const double C69046 = C59272 * C3784;
    const double C73462 = C93853 * C3784;
    const double C11681 = C11675 + C11676;
    const double C13740 = C13732 + C11762;
    const double C13088 = C13078 + C13079;
    const double C28906 = C28884 + C28885;
    const double C32255 = C32247 + C32248;
    const double C37888 = C37884 + C37885;
    const double C62740 = C62730 + C62731;
    const double C70909 = C70887 + C70888;
    const double C5700 = C5696 + C5684;
    const double C26734 = C26732 + C26725;
    const double C11416 = C11412 + C11400;
    const double C37585 = C37583 + C37576;
    const double C8420 = C8418 + C8413;
    const double C12746 = C12742 + C12731;
    const double C57988 = C57986 + C57982;
    const double C92047 = ae * C92046;
    const double C117 =
        (2 * C92026 + C92012 * C92046 + (C92015 + C92029 * C92016) * ae) /
        C91696;
    const double C813 = (C92127 * C92046) / C91696;
    const double C1394 = (C92170 * C92046) / C91696;
    const double C4912 = C4077 * C821;
    const double C6535 = C4076 * C821;
    const double C17141 = C93590 * C821;
    const double C43204 = C42378 * C821;
    const double C44696 = C93842 * C821;
    const double C49888 = C93590 * C821;
    const double C6657 = C93694 * C899;
    const double C14853 = C14741 * C899;
    const double C17261 = C14740 * C899;
    const double C44818 = C93694 * C899;
    const double C47684 = C47572 * C899;
    const double C50008 = C93850 * C899;
    const double C5231 = C4076 * C1023;
    const double C15867 = C93590 * C1023;
    const double C17493 = C93815 * C1023;
    const double C21827 = C93585 * C1023;
    const double C43484 = C93842 * C1023;
    const double C48670 = C93590 * C1023;
    const double C50240 = C47568 * C1023;
    const double C7766 = C93706 * C3570;
    const double C12087 = C93718 * C3570;
    const double C31271 = C28720 * C3570;
    const double C57162 = C93829 * C3570;
    const double C61755 = C93718 * C3570;
    const double C68642 = C59272 * C3570;
    const double C73150 = C93853 * C3570;
    const double C9202 = C4076 * C3854;
    const double C19780 = C93590 * C3854;
    const double C26518 = C93585 * C3854;
    const double C47293 = C93842 * C3854;
    const double C52482 = C93590 * C3854;
    const double C56478 = C47568 * C3854;
    const double C79242 = C93815 * C3854;
    const double C7659 = C7647 + C7648;
    const double C11978 = C11972 + C11973;
    const double C18257 = C18246 + C18247;
    const double C19464 = C19454 + C19455;
    const double C26210 = C26202 + C26203;
    const double C45820 = C45808 + C45809;
    const double C52175 = C52165 + C52166;
    const double C67308 = C67301 + C67302;
    const double C10979 = C4077 * C1402;
    const double C12849 = C4076 * C1402;
    const double C32016 = C93590 * C1402;
    const double C56884 = C93590 * C1402;
    const double C60748 = C42378 * C1402;
    const double C62501 = C93842 * C1402;
    const double C13075 = C93718 * C1546;
    const double C28891 = C28721 * C1546;
    const double C32242 = C28720 * C1546;
    const double C62727 = C93718 * C1546;
    const double C70894 = C70728 * C1546;
    const double C74103 = C93853 * C1546;
    const double C11585 = C4076 * C1786;
    const double C30784 = C93590 * C1786;
    const double C32691 = C93815 * C1786;
    const double C37784 = C93585 * C1786;
    const double C55292 = C93590 * C1786;
    const double C61283 = C93842 * C1786;
    const double C74536 = C47568 * C1786;
    const double C8872 = C4076 * C3640;
    const double C19451 = C93590 * C3640;
    const double C26205 = C93585 * C3640;
    const double C46975 = C93842 * C3640;
    const double C52162 = C93590 * C3640;
    const double C56068 = C47568 * C3640;
    const double C78844 = C93815 * C3640;
    const double C22043 = C21834 * C275;
    const double C26519 = C21834 * C9644;
    const double C37475 = C37473 * C4178;
    const double C41325 = C37473 * C188;
    const double C92641 = ae * C92640;
    const double C5016 =
        (2 * C92383 + C92127 * C92640 + (C92015 + C92029 * C92235) * ae) /
        C91696;
    const double C8645 = (C92170 * C92640) / C91696;
    const double C25416 = C14741 * C8984;
    const double C28188 = C14740 * C8984;
    const double C38534 = C93694 * C8984;
    const double C58660 = C93694 * C8984;
    const double C83672 = C47572 * C8984;
    const double C86331 = C93850 * C8984;
    const double C92793 = ae * C92792;
    const double C11196 =
        (2 * C92517 + C92170 * C92792 + (C92015 + C92029 * C92309) * ae) /
        C91696;
    const double C28629 = C93718 * C6427;
    const double C35294 = C28721 * C6427;
    const double C38975 = C28720 * C6427;
    const double C70640 = C93718 * C6427;
    const double C88184 = C70728 * C6427;
    const double C91674 = C93853 * C6427;
    const double C19673 = C93706 * C9091;
    const double C24644 = C93718 * C9091;
    const double C28304 = C93829 * C9091;
    const double C35046 = C28720 * C9091;
    const double C65816 = C93718 * C9091;
    const double C86447 = C59272 * C9091;
    const double C87936 = C93853 * C9091;
    const double C28636 = C28628 + C14659;
    const double C25606 = C25600 + C25601;
    const double C25700 = C25692 + C25693;
    const double C27981 = C27971 + C27972;
    const double C33771 = C33769 + C33770;
    const double C34799 = C34777 + C34778;
    const double C36063 = C36054 + C36055;
    const double C38325 = C38317 + C38318;
    const double C38872 = C38866 + C38867;
    const double C55415 = C55407 + C55408;
    const double C69851 = C69845 + C69846;
    const double C87693 = C87671 + C87672;
    const double C14559 = C14557 + C14558;
    const double C25697 = C25686 + C25687;
    const double C28523 = C28517 + C28518;
    const double C36061 = C36050 + C36051;
    const double C38870 = C38862 + C38863;
    const double C55412 = C55401 + C55402;
    const double C14260 = C14259 + C3714;
    const double C35804 = C35798 + C6115;
    const double C38545 = C38541 + C8988;
    const double C41807 = C13954 * C20049;
    const double C25304 = C23108 * C14740;
    const double C28082 = C23108 * C14739;
    const double C35682 = C23108 * C93694;
    const double C38426 = C23108 * C93828;
    const double C41952 = C23108 * C93680;
    const double C83584 = C23108 * C93850;
    const double C86225 = C23108 * C93855;
    const double C88528 = C23108 * C93694;
    const double C91141 = C23108 * C42379;
    const double C35806 = C35800 + C6118;
    const double C33463 = C33462 + C14256;
    const double C25331 = C25323 * C14740;
    const double C35686 = C25323 * C93694;
    const double C38430 = C25323 * C93828;
    const double C41954 = C25323 * C93680;
    const double C83589 = C25323 * C93850;
    const double C88532 = C25323 * C93694;
    const double C91145 = C25323 * C42379;
    const double C41809 = C33141 * C20049;
    const double C38547 = C38543 + C34958;
    const double C35523 = C35515 + C35516;
    const double C11395 = C3026 * C4076;
    const double C13304 = C3026 * C4075;
    const double C30607 = C3026 * C93590;
    const double C32477 = C3026 * C93815;
    const double C41401 = C3026 * C93585;
    const double C61121 = C3026 * C93842;
    const double C62956 = C3026 * C93854;
    const double C72532 = C3026 * C93590;
    const double C74326 = C3026 * C47568;
    const double C11421 = C11417 * C4075;
    const double C30608 = C11417 * C93815;
    const double C40222 = C11417 * C93585;
    const double C61125 = C11417 * C93854;
    const double C72533 = C11417 * C47568;
    const double C9097 = C9095 + C9096;
    const double C24650 = C24639 + C24640;
    const double C28312 = C28307 + C28308;
    const double C35050 = C35039 + C35040;
    const double C38659 = C38655 + C38656;
    const double C65820 = C65809 + C65810;
    const double C4571 = C4570 + C4564;
    const double C10090 = C10089 + C10083;
    const double C748 = C744 * C93680;
    const double C4819 = C744 * C93828;
    const double C15476 = C744 * C14739;
    const double C43120 = C744 * C42379;
    const double C48307 = C744 * C93855;
    const double C749 = C745 * C93680;
    const double C4822 = C745 * C93828;
    const double C43123 = C745 * C42379;
    const double C2629 = C2626 * C93680;
    const double C4818 = C2626 * C93694;
    const double C7436 = C2626 * C93828;
    const double C15472 = C2626 * C14740;
    const double C18041 = C2626 * C14739;
    const double C43119 = C2626 * C93694;
    const double C45597 = C2626 * C42379;
    const double C48303 = C2626 * C93850;
    const double C50788 = C2626 * C93855;
    const double C3343 = C3340 * C93680;
    const double C8414 = C3340 * C93828;
    const double C18993 = C3340 * C14739;
    const double C46555 = C3340 * C42379;
    const double C51730 = C3340 * C93855;
    const double C92076 = ae * C92074;
    const double C92075 = C92012 * C92074;
    const double C92086 = 3 * C92074;
    const double C92329 = C92127 * C92074;
    const double C92431 = C92170 * C92074;
    const double C818 = (C92046 + C92074 * C92235) / C91696;
    const double C1399 = (C92046 + C92074 * C92309) / C91696;
    const double C18245 = C14741 * C8649;
    const double C50992 = C47572 * C8649;
    const double C55788 = C93694 * C8649;
    const double C67300 = C93694 * C8649;
    const double C3419 =
        (C92170 * C92328 + C92577 + C92577 +
         C92012 * (2 * ae * C92170 * C92532 + C92012 * C92170 * C92533)) /
        C91701;
    const double C5954 = (C92127 * C92191 + C92577 +
                          C92170 * (C92332 + C92170 * C92127 * C92205)) /
                         C91701;
    const double C6274 = (C92127 * C92281 + C92577 +
                          C92170 * (C92332 + C92170 * C92127 * C92287)) /
                         C91701;
    const double C8866 = (C92170 * C92223 + C92577 +
                          C92127 * (C92434 + C92127 * C92170 * C92229)) /
                         C91701;
    const double C31168 = C31164 + C31165;
    const double C33353 = C33346 + C33347;
    const double C36549 = C36545 + C36546;
    const double C37266 = C37261 + C37262;
    const double C54715 = C54695 + C54696;
    const double C54949 = C54931 + C54932;
    const double C826 = (C92041 + C92067 * C92235 + C92343 + C92343 +
                         C92012 * (2 * ae * (C92037 + C92061 * C92235) +
                                   C92012 * (C92067 + C92104 * C92235))) /
                        C91701;
    const double C5020 =
        (2 * (C92044 + C92127 * C92148) + C92343 +
         C92127 * (C92148 + C92332 + C92127 * (C92071 + C92127 * C92162))) /
        C91701;
    const double C5213 =
        (2 * (C92044 + C92127 * C92223) + C92343 +
         C92127 * (C92223 + C92332 + C92127 * (C92071 + C92127 * C92229))) /
        C91701;
    const double C8753 =
        (C92343 + C92170 * (C92191 + C92205 * C92235)) / C91701;
    const double C9196 =
        (C92343 + C92170 * (C92281 + C92287 * C92235)) / C91701;
    const double C15566 = C91722 * C4901;
    const double C15757 = C275 * C4901;
    const double C15873 = C93590 * C4901;
    const double C17258 = C14840 * C4901;
    const double C20055 = C20049 * C4901;
    const double C21829 = C93585 * C4901;
    const double C48391 = C47576 * C4901;
    const double C48676 = C93590 * C4901;
    const double C50005 = C47671 * C4901;
    const double C16402 = C91722 * C8524;
    const double C18244 = C14840 * C8524;
    const double C18360 = C275 * C8524;
    const double C19447 = C93590 * C8524;
    const double C22255 = C20049 * C8524;
    const double C26098 = C9645 * C8524;
    const double C26207 = C93585 * C8524;
    const double C49171 = C47576 * C8524;
    const double C50991 = C47671 * C8524;
    const double C52158 = C93590 * C8524;
    const double C55787 = C42480 * C8524;
    const double C65483 = C59426 * C8524;
    const double C67299 = C4179 * C8524;
    const double C1407 = (C92041 + C92067 * C92309 + C92445 + C92445 +
                          C92012 * (2 * ae * (C92037 + C92061 * C92309) +
                                    C92012 * (C92067 + C92104 * C92309))) /
                         C91701;
    const double C6031 =
        (C92445 + C92127 * (C92223 + C92229 * C92309)) / C91701;
    const double C11200 =
        (2 * (C92044 + C92170 * C92191) + C92445 +
         C92170 * (C92191 + C92434 + C92170 * (C92071 + C92170 * C92205))) /
        C91701;
    const double C11573 =
        (2 * (C92044 + C92170 * C92281) + C92445 +
         C92170 * (C92281 + C92434 + C92170 * (C92071 + C92170 * C92287))) /
        C91701;
    const double C30204 = C91722 * C10968;
    const double C30316 = C188 * C10968;
    const double C30510 = C93590 * C10968;
    const double C32239 = C28878 * C10968;
    const double C37152 = C20049 * C10968;
    const double C41328 = C93585 * C10968;
    const double C54568 = C47576 * C10968;
    const double C72447 = C93590 * C10968;
    const double C74100 = C70881 * C10968;
    const double C20680 = C20678 * C93585;
    const double C20932 = C20756 * C275;
    const double C25330 = C25322 * C14840;
    const double C28412 = C25322 * C9645;
    const double C35136 = C25322 * C28878;
    const double C38431 = C25322 * C4179;
    const double C83588 = C25322 * C47671;
    const double C86549 = C25322 * C59426;
    const double C88026 = C25322 * C70881;
    const double C91146 = C25322 * C42480;
    const double C23023 = C23021 * C93585;
    const double C23320 = C23105 * C275;
    const double C24739 = C23105 * C9645;
    const double C28085 = C23105 * C14840;
    const double C83082 = C23105 * C59426;
    const double C86228 = C23105 * C47671;
    const double C40049 = C40047 * C93585;
    const double C40169 = C40167 * C188;
    const double C92395 = C92394 + C92109;
    const double C92529 = C92528 + C92109;
    const double C2303 = C188 * C2056;
    const double C4464 = C4179 * C2056;
    const double C42765 = C42480 * C2056;
    const double C3331 = C275 * C2856;
    const double C10189 = C9645 * C2856;
    const double C59970 = C59426 * C2856;
    const double C4001 = C275 * C3568;
    const double C12735 = C9645 * C3568;
    const double C62387 = C59426 * C3568;
    const double C6352 =
        (ae * C92192 + C92127 * C92305 + ae * C92170 * C92656 +
         C92170 * (C92659 +
                   C92170 * (ae * C92206 +
                             C92127 * (C92303 + std::pow(C92018, 7) * bs[7] *
                                                    C92294 * C92016)))) /
        C91701;
    const double C92660 = C92149 + C92658;
    const double C92743 = ae * C92742;
    const double C92811 = C92192 + C92809;
    const double C92720 = ae * C92719;
    const double C5952 =
        (C92127 * C92192 + C92170 * C92719 + C92170 * C92655 * ae) / C91696;
    const double C92870 = C92869 + C92862;
    const double C92915 = ae * C92914;
    const double C33128 = (2 * C92739 + C92170 * C92914) / C91696;
    const double C93213 = C93212 + C93207;
    const double C92929 = ae * C92928;
    const double C16566 =
        (C92183 + C92194 * C92235 + C92170 * C92928 + C92170 * C92863 * ae) /
        C91696;
    const double C93238 = C92712 + C93236;
    const double C92117 = ae * C92114;
    const double C92116 = C92012 * C92114;
    const double C92346 = C92114 * C92235;
    const double C92448 = C92114 * C92309;
    const double C92535 = C92127 * C92114;
    const double C92556 = C92170 * C92114;
    const double C19224 =
        (C92170 *
         (2 * C92823 + C92352 +
          C92127 * (C92162 + C92541 +
                    C92127 * (C92110 + C92127 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92131))))) /
        C91701;
    const double C92621 = C92619 + C92620;
    const double C92725 = ae * C92724;
    const double C16413 = C91722 * C16398;
    const double C26838 = C20049 * C16398;
    const double C49182 = C47576 * C16398;
    const double C92761 = C92759 + C92760;
    const double C92683 = ae * C92682;
    const double C33016 = (2 * C92576 + C92170 * C92682) / C91696;
    const double C93011 = ae * C93008;
    const double C93010 = C92127 * C93008;
    const double C93052 = C93008 * C92309;
    const double C93084 = C92170 * C93008;
    const double C93113 = C93111 + C93112;
    const double C93345 = ae * C93343;
    const double C93344 = C92170 * C93343;
    const double C92115 = C92089 + C92113;
    const double C15567 = C93590 * C4904;
    const double C21602 = C93585 * C4904;
    const double C48392 = C93590 * C4904;
    const double C19103 = C93590 * C8527;
    const double C25887 = C93585 * C8527;
    const double C51830 = C93590 * C8527;
    const double C20544 = C93585 * C15554;
    const double C25011 = C93585 * C16399;
    const double C22859 = C93585 * C19099;
    const double C30205 = C93590 * C10971;
    const double C41114 = C93585 * C10971;
    const double C72192 = C93590 * C10971;
    const double C39978 = C93585 * C30192;
    const double C2298 = C93680 * C1076;
    const double C4459 = C93694 * C1076;
    const double C42760 = C93694 * C1076;
    const double C3012 = C93680 * C1657;
    const double C11398 = C93680 * C1663;
    const double C7970 = C93694 * C3711;
    const double C12299 = C93680 * C3711;
    const double C46119 = C93694 * C3711;
    const double C35791 = C93694 * C25408;
    const double C42026 = C93680 * C25408;
    const double C88616 = C93694 * C25408;
    const double C40225 = C93680 * C30603;
    const double C2612 = C93706 * C1316;
    const double C5682 = C93706 * C1322;
    const double C3326 = C93706 * C1897;
    const double C10184 = C93718 * C1897;
    const double C59965 = C93718 * C1897;
    const double C8410 = C93706 * C3995;
    const double C12727 = C93718 * C3995;
    const double C62379 = C93718 * C3995;
    const double C93071 = C93070 + C93009;
    const double C23469 = C275 * C23010;
    const double C24908 = C9645 * C23010;
    const double C83242 = C59426 * C23010;
    const double C93140 = C92880 + C93138;
    const double C93282 = C93281 + C93274;
    const double C1082 = (C92240 + C92245 * C92016 + C92392 + C92392 +
                          C92127 * (2 * ae * C92149 + C92127 * C92252)) /
                         C91701;
    const double C3925 =
        (C92392 + C92170 * (ae * C92192 + C92127 * C92305)) / C91701;
    const double C1091 = C188 * C892;
    const double C5228 = C4085 * C892;
    const double C5339 = C4178 * C892;
    const double C5329 = C4179 * C892;
    const double C5420 = C275 * C892;
    const double C6653 = C93694 * C892;
    const double C14861 = C14741 * C892;
    const double C15116 = C14840 * C892;
    const double C17494 = C91722 * C892;
    const double C17609 = C14839 * C892;
    const double C43481 = C42386 * C892;
    const double C43579 = C42480 * C892;
    const double C44814 = C93694 * C892;
    const double C47692 = C47572 * C892;
    const double C47947 = C47671 * C892;
    const double C50241 = C47576 * C892;
    const double C3716 = C188 * C3493;
    const double C6111 = C4179 * C3493;
    const double C7644 = C93694 * C3493;
    const double C8089 = C275 * C3493;
    const double C8869 = C4085 * C3493;
    const double C8992 = C4178 * C3493;
    const double C11971 = C93680 * C3493;
    const double C12406 = C9645 * C3493;
    const double C18569 = C14839 * C3493;
    const double C44287 = C42480 * C3493;
    const double C45805 = C93694 * C3493;
    const double C46972 = C42386 * C3493;
    const double C56069 = C47576 * C3493;
    const double C62064 = C59426 * C3493;
    const double C78845 = C91722 * C3493;
    const double C6122 = C4179 * C5872;
    const double C14258 = C188 * C5872;
    const double C44298 = C42480 * C5872;
    const double C653 = C225 * C275;
    const double C447 = C443 + C437;
    const double C527 = C523 * C93680;
    const double C2307 = C2304 + C1085;
    const double C2531 = C2072 * C275;
    const double C4475 = C4469 + C4458;
    const double C3021 = C3018 + C1666;
    const double C3245 = C2786 * C275;
    const double C10086 = C2786 * C9645;
    const double C12966 = C2786 * C4085;
    const double C59867 = C2786 * C59426;
    const double C62618 = C2786 * C42386;
    const double C3106 = C3103 * C93680;
    const double C11411 = C11407 + C1672;
    const double C11118 = C11110 * C4085;
    const double C13623 = C11110 * C9645;
    const double C29311 = C11110 * C28878;
    const double C32139 = C11110 * C91722;
    const double C60857 = C11110 * C42386;
    const double C63275 = C11110 * C59426;
    const double C71314 = C11110 * C70881;
    const double C74000 = C11110 * C47576;
    const double C2774 = C93680 * C1475;
    const double C11096 = C93680 * C1481;
    const double C13199 = C4077 * C1599;
    const double C62851 = C42378 * C1599;
    const double C11293 = C4077 * C1605;
    const double C32370 = C93590 * C1605;
    const double C61023 = C42378 * C1605;
    const double C74223 = C93590 * C1605;
    const double C31791 = C93680 * C6351;
    const double C37887 = C93694 * C6351;
    const double C55404 = C93694 * C6351;
    const double C92651 = C92650 + C92647;
    const double C8985 = (C92170 * C92643 + C92740 + C92740 +
                          C92127 * (2 * ae * C92170 * C92151 +
                                    C92127 * C92170 * C92012 * C92250)) /
                         C91701;
    const double C37582 = C37577 + C6120;
    const double C31484 = C31482 + C14257;
    const double C31169 = C31166 + C31167;
    const double C31591 = C31585 + C31586;
    const double C37264 = C37257 + C37258;
    const double C54717 = C54699 + C54700;
    const double C57579 = C57575 + C57576;
    const double C69047 = C69043 + C69044;
    const double C73465 = C73459 + C73460;
    const double C93005 = C92995 + C93000;
    const double C92849 = ae * C92847;
    const double C92848 = C92127 * C92847;
    const double C92942 = C92170 * C92847;
    const double C92989 = 3 * C92847;
    const double C16487 = (C92640 + C92847 * C92309) / C91696;
    const double C16719 = (C92240 + C92245 * C92309 + C92911 + C92911 +
                           C92127 * (2 * ae * (C92138 + C92145 * C92309) +
                                     C92127 * (C92245 + C92250 * C92309))) /
                          C91701;
    const double C25681 =
        (2 * (C92638 + C92170 * C92892) + C92911 +
         C92170 * (C92892 + C92945 + C92170 * (C92845 + C92170 * C93038))) /
        C91701;
    const double C25424 = C14839 * C25104;
    const double C33460 = C188 * C25104;
    const double C35508 = C93694 * C25104;
    const double C35687 = C20049 * C25104;
    const double C35790 = C4179 * C25104;
    const double C38539 = C4178 * C25104;
    const double C38651 = C28878 * C25104;
    const double C41812 = C93680 * C25104;
    const double C55066 = C42480 * C25104;
    const double C88367 = C93694 * C25104;
    const double C91356 = C70881 * C25104;
    const double C38652 = C28721 * C25517;
    const double C91357 = C70728 * C25517;
    const double C40228 = C40227 + C30614;
    const double C40050 = C40048 * C20049;
    const double C40168 = C40166 * C93680;
    const double C11119 = C11111 * C4076;
    const double C30315 = C11111 * C93590;
    const double C32138 = C11111 * C93815;
    const double C41188 = C11111 * C93585;
    const double C60858 = C11111 * C93842;
    const double C72284 = C11111 * C93590;
    const double C73999 = C11111 * C47568;
    const double C41818 = C41816 * C93585;
    const double C1903 = (C92314 + C92319 * C92016 + C92526 + C92526 +
                          C92170 * (2 * ae * C92192 + C92170 * C92326)) /
                         C91701;
    const double C3785 =
        (C92526 + C92127 * (ae * C92149 + C92170 * C92268)) / C91701;
    const double C1912 = C275 * C1539;
    const double C11582 = C4085 * C1539;
    const double C11673 = C188 * C1539;
    const double C11770 = C9644 * C1539;
    const double C11760 = C9645 * C1539;
    const double C13071 = C93718 * C1539;
    const double C28899 = C28721 * C1539;
    const double C29406 = C28878 * C1539;
    const double C32692 = C91722 * C1539;
    const double C32907 = C28877 * C1539;
    const double C61280 = C42386 * C1539;
    const double C61440 = C59426 * C1539;
    const double C62723 = C93718 * C1539;
    const double C70902 = C70728 * C1539;
    const double C71409 = C70881 * C1539;
    const double C74537 = C47576 * C1539;
    const double C2392 = C2389 * C93680;
    const double C4566 = C2389 * C93694;
    const double C42867 = C2389 * C93694;
    const double C519 = C312 * C188;
    const double C661 = C657 * C93706;
    const double C742 = C738 + C732;
    const double C2621 = C2618 + C1325;
    const double C2382 = C2158 * C188;
    const double C4567 = C2158 * C4179;
    const double C6774 = C2158 * C4085;
    const double C42868 = C2158 * C42480;
    const double C44935 = C2158 * C42386;
    const double C2541 = C2538 * C93706;
    const double C5695 = C5691 + C1331;
    const double C5134 = C5126 * C4085;
    const double C7111 = C5126 * C4179;
    const double C15226 = C5126 * C14840;
    const double C17380 = C5126 * C91722;
    const double C43390 = C5126 * C42386;
    const double C45272 = C5126 * C42480;
    const double C48057 = C5126 * C47671;
    const double C50127 = C5126 * C47576;
    const double C3335 = C3332 + C1906;
    const double C3096 = C2872 * C188;
    const double C3255 = C3252 * C93706;
    const double C10085 = C3252 * C93718;
    const double C59866 = C3252 * C93718;
    const double C10200 = C10194 + C10183;
    const double C8417 = C8415 + C4000;
    const double C8091 = C7770 * C4179;
    const double C8757 = C7770 * C4085;
    const double C46239 = C7770 * C42480;
    const double C46869 = C7770 * C42386;
    const double C12740 = C12736 + C10879;
    const double C2146 = C93706 * C960;
    const double C5112 = C93706 * C966;
    const double C7221 = C4077 * C1200;
    const double C45382 = C42378 * C1200;
    const double C5514 = C4077 * C1206;
    const double C17829 = C93590 * C1206;
    const double C43746 = C42378 * C1206;
    const double C50576 = C93590 * C1206;
    const double C6428 =
        (C92127 * C92676 + C92715 + C92715 +
         C92170 * (2 * ae * C92712 + C92170 * C92127 * C92012 * C92324)) /
        C91701;
    const double C9092 =
        (ae * C92140 + C92170 * C92665 + C92715 +
         C92127 * (ae * (C92170 * C92194 + C92062) +
                   C92127 * (C92155 + C92170 * C92012 * C92266))) /
        C91701;
    const double C6432 = C275 * C5951;
    const double C14661 = C9645 * C5951;
    const double C30103 = C28878 * C5951;
    const double C31275 = C28721 * C5951;
    const double C31790 = C188 * C5951;
    const double C33666 = C91722 * C5951;
    const double C33875 = C28877 * C5951;
    const double C36852 = C20049 * C5951;
    const double C37886 = C4179 * C5951;
    const double C55287 = C47576 * C5951;
    const double C55403 = C42480 * C5951;
    const double C55515 = C9644 * C5951;
    const double C57164 = C93718 * C5951;
    const double C64296 = C59426 * C5951;
    const double C68644 = C93718 * C5951;
    const double C72104 = C70881 * C5951;
    const double C73154 = C70728 * C5951;
    const double C92802 = C92801 + C92798;
    const double C17035 =
        (C92314 + C92319 * C92235 + C92925 + C92925 +
         C92170 * (2 * ae * C92880 + C92170 * (C92319 + C92324 * C92235))) /
        C91701;
    const double C19669 =
        (2 * (C92790 + C92127 * C92954) + C92925 +
         C92127 * (C92954 + ae * (C92170 * C92127 * C92188 + C92841) +
                   C92127 * (ae * (C92170 * C92188 + C92057) +
                             C92127 * (C92152 + C92170 * C92266)))) /
        C91701;
    const double C17038 = C275 * C16565;
    const double C25598 = C20049 * C16565;
    const double C25690 = C14840 * C16565;
    const double C25782 = C9644 * C16565;
    const double C25778 = C9645 * C16565;
    const double C27964 = C93718 * C16565;
    const double C30111 = C28878 * C16565;
    const double C34792 = C28721 * C16565;
    const double C38868 = C4179 * C16565;
    const double C38979 = C28877 * C16565;
    const double C70644 = C59426 * C16565;
    const double C72112 = C70881 * C16565;
    const double C83928 = C47671 * C16565;
    const double C86119 = C93718 * C16565;
    const double C87686 = C70728 * C16565;
    const double C91569 = C42480 * C16565;
    const double C21049 = C21048 + C16314;
    const double C20681 = C20679 * C20049;
    const double C20940 = C20936 * C93706;
    const double C23471 = C23470 + C19989;
    const double C23024 = C23022 * C20049;
    const double C23330 = C23327 * C93706;
    const double C24738 = C23327 * C93718;
    const double C83081 = C23327 * C93718;
    const double C24919 = C24913 + C24902;
    const double C93131 = C93130 + C93127;
    const double C93341 = C93332 + C93337;
    const double C93194 = ae * C93191;
    const double C93193 = C92170 * C93191;
    const double C93325 = 3 * C93191;
    const double C35890 =
        (ae *
             (3 * C93191 +
              C92170 * (2 * C93094 +
                        C92170 * (C92188 + C92170 * (C92170 * C92201 + C92093) +
                                  C92170 * C92083 * ae) +
                        C93256 * ae) +
              (2 * C93185 + C92170 * C93256) * ae) +
         C92127 * (3 * C93066 + ae * (2 * C93060 + C92170 * C93257) +
                   C92170 * (2 * C93063 + ae * C93257 +
                             C92170 * (C92266 + ae * C92170 * C92158 +
                                       C92170 * (ae * C92158 +
                                                 C92170 * std::pow(C92018, 7) *
                                                     bs[7] * C92257))))) /
        C91701;
    const double C5135 = C5127 * C4076;
    const double C15756 = C5127 * C93590;
    const double C17379 = C5127 * C93815;
    const double C21751 = C5127 * C93585;
    const double C43391 = C5127 * C93842;
    const double C48573 = C5127 * C93590;
    const double C50126 = C5127 * C47568;
    const double C37476 = C37474 * C93828;
    const double C41326 = C37474 * C93680;
    const double C90222 = C37474 * C42379;
    const double C41334 = C41332 * C93680;
    const double C30621 = C30619 + C30611;
    const double C11396 = C3025 * C4077;
    const double C13305 = C3025 * C4076;
    const double C32478 = C3025 * C93590;
    const double C61122 = C3025 * C42378;
    const double C62957 = C3025 * C93842;
    const double C74327 = C3025 * C93590;
    const double C30624 = C30622 * C93815;
    const double C40223 = C30622 * C93585;
    const double C72536 = C30622 * C47568;
    const double C22053 = C22050 * C93706;
    const double C26520 = C22050 * C93829;
    const double C84711 = C22050 * C59272;
    const double C22054 = C22051 * C93706;
    const double C16320 = C16318 + C16311;
    const double C18996 = C18995 + C18991;
    const double C26735 = C26733 + C26727;
    const double C2628 = C2625 * C93680;
    const double C4820 = C2625 * C93694;
    const double C7434 = C2625 * C93828;
    const double C15475 = C2625 * C14740;
    const double C43121 = C2625 * C93694;
    const double C45595 = C2625 * C42379;
    const double C48306 = C2625 * C93850;
    const double C3342 = C3339 * C93680;
    const double C8411 = C3339 * C93828;
    const double C46553 = C3339 * C42379;
    const double C91730 = C91728 / C91696;
    const double C91729 = C91697 * C91727;
    const double C106 = (-C91727 / C91696) / (4 * C91708);
    const double C4084 = (-C91727 / C91696) / (4 * C91701);
    const double C14744 = (-C91727 / C91696) / C91702;
    const double C20048 = -C91727 / C91696;
    const double C42385 = (-C91727 / C91696) / (4 * C91701);
    const double C47575 = (-C91727 / C91696) / C91702;
    const double C4099 = C4081 * C116;
    const double C4098 = C4081 * C115;
    const double C4095 = C4081 * C814;
    const double C4090 = C4081 * C815;
    const double C4087 = C4081 * C114;
    const double C4922 = C4081 * C4900;
    const double C4920 = C4081 * C816;
    const double C5138 = C5130 * C4081;
    const double C5131 = C5123 * C4081;
    const double C5238 = C4081 * C808;
    const double C5232 = C4081 * C890;
    const double C5222 = C4081 * C889;
    const double C5216 = C4081 * C807;
    const double C5517 = C4081 * C956;
    const double C5507 = C4081 * C955;
    const double C5794 = C4081 * C5778;
    const double C5791 = C4081 * C1397;
    const double C5790 = C4081 * C1396;
    const double C5787 = C4081 * C3413;
    const double C6538 = C4081 * C817;
    const double C6770 = C2162 * C4081;
    const double C6880 = C4081 * C888;
    const double C6874 = C4081 * C806;
    const double C7216 = C4081 * C954;
    const double C7538 = C4081 * C3414;
    const double C7535 = C4081 * C1395;
    const double C8536 = C4081 * C8523;
    const double C8767 = C8765 * C4081;
    const double C8879 = C4081 * C3409;
    const double C8873 = C4081 * C3491;
    const double C9203 = C4081 * C3565;
    const double C10986 = C4081 * C10967;
    const double C11122 = C11114 * C4081;
    const double C11115 = C11107 * C4081;
    const double C11302 = C4081 * C1389;
    const double C11296 = C4081 * C1471;
    const double C11286 = C4081 * C1470;
    const double C11280 = C4081 * C1388;
    const double C11586 = C4081 * C1537;
    const double C11576 = C4081 * C1536;
    const double C12852 = C4081 * C1398;
    const double C12962 = C2790 * C4081;
    const double C13194 = C4081 * C1469;
    const double C13188 = C4081 * C1387;
    const double C13515 = C4081 * C1535;
    const double C13956 = C13954 * C4081;
    const double C4097 = C4083 * C116;
    const double C4091 = C4083 * C814;
    const double C4088 = C4083 * C115;
    const double C4923 = C4083 * C4901;
    const double C4917 = C4083 * C817;
    const double C5107 = C2162 * C4083;
    const double C5136 = C5128 * C4083;
    const double C5236 = C4083 * C809;
    const double C5230 = C4083 * C891;
    const double C5224 = C4083 * C888;
    const double C5218 = C4083 * C806;
    const double C5515 = C4083 * C957;
    const double C5509 = C4083 * C954;
    const double C5795 = C4083 * C5779;
    const double C5792 = C4083 * C1398;
    const double C5789 = C4083 * C1395;
    const double C5786 = C4083 * C3414;
    const double C6772 = C2160 * C4083;
    const double C6882 = C4083 * C887;
    const double C6876 = C4083 * C805;
    const double C7218 = C4083 * C953;
    const double C8537 = C4083 * C8524;
    const double C8759 = C7772 * C4083;
    const double C8877 = C4083 * C3410;
    const double C8871 = C4083 * C3492;
    const double C9201 = C4083 * C3566;
    const double C10987 = C4083 * C10968;
    const double C11091 = C2790 * C4083;
    const double C11120 = C11112 * C4083;
    const double C11300 = C4083 * C1390;
    const double C11294 = C4083 * C1472;
    const double C11288 = C4083 * C1469;
    const double C11282 = C4083 * C1387;
    const double C11584 = C4083 * C1538;
    const double C11578 = C4083 * C1535;
    const double C12964 = C2788 * C4083;
    const double C13196 = C4083 * C1468;
    const double C13190 = C4083 * C1386;
    const double C13517 = C4083 * C1534;
    const double C47590 = C47574 * C116;
    const double C47589 = C47574 * C115;
    const double C47587 = C47574 * C814;
    const double C47585 = C47574 * C817;
    const double C47582 = C47574 * C816;
    const double C47580 = C47574 * C815;
    const double C47578 = C47574 * C114;
    const double C48396 = C47574 * C15552;
    const double C48394 = C47574 * C4900;
    const double C48577 = C15769 * C47574;
    const double C48570 = C5130 * C47574;
    const double C48566 = C5123 * C47574;
    const double C48677 = C47574 * C4897;
    const double C48667 = C47574 * C890;
    const double C48663 = C47574 * C808;
    const double C48659 = C47574 * C889;
    const double C48655 = C47574 * C807;
    const double C48938 = C47574 * C5096;
    const double C48932 = C47574 * C956;
    const double C48927 = C47574 * C955;
    const double C49181 = C47574 * C16397;
    const double C49179 = C47574 * C5778;
    const double C49177 = C47574 * C1397;
    const double C49176 = C47574 * C1396;
    const double C49174 = C47574 * C3413;
    const double C49172 = C47574 * C8523;
    const double C49893 = C47574 * C4901;
    const double C50125 = C5128 * C47574;
    const double C50121 = C2162 * C47574;
    const double C50239 = C47574 * C891;
    const double C50235 = C47574 * C809;
    const double C50231 = C47574 * C888;
    const double C50227 = C47574 * C806;
    const double C50573 = C47574 * C957;
    const double C50569 = C47574 * C954;
    const double C50891 = C47574 * C8524;
    const double C50889 = C47574 * C3414;
    const double C50887 = C47574 * C1395;
    const double C51837 = C47574 * C19097;
    const double C52054 = C8765 * C47574;
    const double C52050 = C19339 * C47574;
    const double C52167 = C47574 * C3409;
    const double C52163 = C47574 * C3491;
    const double C52159 = C47574 * C8520;
    const double C52483 = C47574 * C3565;
    const double C52479 = C47574 * C8749;
    const double C54569 = C47574 * C25003;
    const double C54567 = C47574 * C10967;
    const double C54941 = C47574 * C1389;
    const double C54937 = C47574 * C1471;
    const double C54933 = C47574 * C5775;
    const double C54929 = C47574 * C5870;
    const double C54923 = C47574 * C1470;
    const double C54919 = C47574 * C1388;
    const double C55293 = C47574 * C1537;
    const double C55289 = C47574 * C5950;
    const double C55283 = C47574 * C1536;
    const double C56067 = C47574 * C3492;
    const double C56063 = C47574 * C3410;
    const double C56477 = C47574 * C3566;
    const double C56887 = C47574 * C5779;
    const double C56885 = C47574 * C1398;
    const double C57305 = C47574 * C1469;
    const double C57301 = C47574 * C1387;
    const double C57711 = C47574 * C1535;
    const double C72195 = C47574 * C30190;
    const double C72288 = C30328 * C47574;
    const double C72281 = C11114 * C47574;
    const double C72277 = C11107 * C47574;
    const double C72448 = C47574 * C10964;
    const double C72444 = C47574 * C11080;
    const double C73888 = C47574 * C10968;
    const double C73998 = C11112 * C47574;
    const double C73994 = C2790 * C47574;
    const double C74220 = C47574 * C1472;
    const double C74216 = C47574 * C1390;
    const double C74535 = C47574 * C1538;
    const double C74961 = C33141 * C47574;
    const double C74957 = C13954 * C47574;
    const double C20942 = C20927 + C20939;
    const double C20941 = C20924 + C20938;
    const double C24742 = C24734 + C24735;
    const double C35695 = C35683 + C35684;
    const double C40164 = C40156 + C40157;
    const double C40165 = C40158 + C40159;
    const double C91828 = C91760 * C91825;
    const double C15099 =
        (-(be * -2 * C91813) / C91701) / C91702 -
        ((2 * ((-C91813 / C91696) / C91702 - (C91824 * be) / C91696) -
          (C91760 * ((-4 * C91786) / C91696 - (C91760 * C91825) / C91696) *
           be) /
              C91696) *
         be) /
            C91696 -
        C91825 / C91711;
    const double C15101 = (-C91825 / C91696) / (4 * C91701);
    const double C20269 = (-C91825 / C91696) / (4 * C91708);
    const double C42742 = (-C91825 / C91696) / C91702;
    const double C47932 = (-C91825 / C91696) / (4 * C91701);
    const double C91848 = C91842 / C91696;
    const double C42504 = C42479 * C111;
    const double C42494 = C42479 * C116;
    const double C42490 = C42479 * C110;
    const double C42486 = C42479 * C115;
    const double C42482 = C42479 * C109;
    const double C42764 = C42479 * C193;
    const double C42762 = C42479 * C192;
    const double C42753 = C42479 * C191;
    const double C42747 = C42479 * C190;
    const double C42744 = C42479 * C189;
    const double C42870 = C309 * C42479;
    const double C42863 = C307 * C42479;
    const double C42859 = C305 * C42479;
    const double C43033 = C42479 * C279;
    const double C43027 = C42479 * C278;
    const double C43022 = C42479 * C277;
    const double C43589 = C42479 * C892;
    const double C43587 = C42479 * C891;
    const double C43585 = C42479 * C890;
    const double C43584 = C42479 * C889;
    const double C43582 = C42479 * C888;
    const double C43580 = C42479 * C887;
    const double C44297 = C42479 * C1473;
    const double C44295 = C42479 * C1472;
    const double C44293 = C42479 * C1471;
    const double C44292 = C42479 * C1470;
    const double C44290 = C42479 * C1469;
    const double C44288 = C42479 * C1468;
    const double C44823 = C42479 * C806;
    const double C44819 = C42479 * C814;
    const double C44815 = C42479 * C805;
    const double C45159 = C42479 * C886;
    const double C45278 = C2162 * C42479;
    const double C45274 = C2160 * C42479;
    const double C45490 = C42479 * C954;
    const double C45486 = C42479 * C953;
    const double C45814 = C42479 * C1387;
    const double C45810 = C42479 * C1395;
    const double C45806 = C42479 * C1386;
    const double C46126 = C42479 * C1467;
    const double C46245 = C2876 * C42479;
    const double C46241 = C2874 * C42479;
    const double C46448 = C42479 * C1535;
    const double C46444 = C42479 * C1534;
    const double C47092 = C42479 * C3493;
    const double C47090 = C42479 * C3492;
    const double C47088 = C42479 * C3491;
    const double C54709 = C42479 * C1389;
    const double C54705 = C42479 * C1397;
    const double C54701 = C42479 * C1390;
    const double C54697 = C42479 * C1398;
    const double C54691 = C42479 * C1396;
    const double C54687 = C42479 * C1388;
    const double C55067 = C42479 * C11081;
    const double C55065 = C42479 * C11080;
    const double C55409 = C42479 * C1537;
    const double C55405 = C42479 * C1538;
    const double C55399 = C42479 * C1536;
    const double C55793 = C42479 * C3410;
    const double C55789 = C42479 * C3414;
    const double C56615 = C42479 * C3566;
    const double C58255 = C42479 * C3413;
    const double C58251 = C42479 * C3409;
    const double C58663 = C42479 * C5871;
    const double C58661 = C42479 * C5870;
    const double C59063 = C42479 * C3565;
    const double C88368 = C42479 * C10964;
    const double C88364 = C42479 * C10967;
    const double C88536 = C35699 * C42479;
    const double C88529 = C25326 * C42479;
    const double C88525 = C25319 * C42479;
    const double C88619 = C42479 * C30303;
    const double C90221 = C37473 * C42479;
    const double C90217 = C27144 * C42479;
    const double C90918 = C42479 * C5778;
    const double C90914 = C42479 * C5775;
    const double C91144 = C25324 * C42479;
    const double C91140 = C23109 * C42479;
    const double C91250 = C42479 * C25104;
    const double C91567 = C42479 * C5950;
    const double C4483 = C4479 + C4480;
    const double C4742 = C4725 + C4741;
    const double C91898 = C91763 * C91895;
    const double C29389 =
        (-(be * -2 * C91883) / C91701) / C91702 -
        ((2 * ((-C91883 / C91696) / C91702 - (C91894 * be) / C91696) -
          (C91763 * ((-4 * C91798) / C91696 - (C91763 * C91895) / C91696) *
           be) /
              C91696) *
         be) /
            C91696 -
        C91895 / C91711;
    const double C29391 = (-C91895 / C91696) / (4 * C91701);
    const double C39451 = (-C91895 / C91696) / (4 * C91708);
    const double C59947 = (-C91895 / C91696) / C91702;
    const double C71394 = (-C91895 / C91696) / (4 * C91701);
    const double C91914 = C91908 / C91696;
    const double C59450 = C59425 * C111;
    const double C59440 = C59425 * C116;
    const double C59436 = C59425 * C110;
    const double C59432 = C59425 * C115;
    const double C59428 = C59425 * C109;
    const double C59699 = C59425 * C192;
    const double C59693 = C59425 * C191;
    const double C59688 = C59425 * C190;
    const double C59869 = C222 * C59425;
    const double C59862 = C220 * C59425;
    const double C59858 = C218 * C59425;
    const double C59969 = C59425 * C280;
    const double C59967 = C59425 * C279;
    const double C59958 = C59425 * C278;
    const double C59952 = C59425 * C277;
    const double C59949 = C59425 * C276;
    const double C60667 = C59425 * C958;
    const double C60665 = C59425 * C957;
    const double C60663 = C59425 * C956;
    const double C60662 = C59425 * C955;
    const double C60660 = C59425 * C954;
    const double C60658 = C59425 * C953;
    const double C61450 = C59425 * C1539;
    const double C61448 = C59425 * C1538;
    const double C61446 = C59425 * C1537;
    const double C61445 = C59425 * C1536;
    const double C61443 = C59425 * C1535;
    const double C61441 = C59425 * C1534;
    const double C61760 = C59425 * C806;
    const double C61756 = C59425 * C814;
    const double C61752 = C59425 * C805;
    const double C62070 = C59425 * C888;
    const double C62066 = C59425 * C887;
    const double C62279 = C2076 * C59425;
    const double C62275 = C2074 * C59425;
    const double C62386 = C59425 * C952;
    const double C62732 = C59425 * C1387;
    const double C62728 = C59425 * C1395;
    const double C62724 = C59425 * C1386;
    const double C63063 = C59425 * C1469;
    const double C63059 = C59425 * C1468;
    const double C63281 = C2790 * C59425;
    const double C63277 = C2788 * C59425;
    const double C63388 = C59425 * C1533;
    const double C64297 = C59425 * C3567;
    const double C64295 = C59425 * C3566;
    const double C64293 = C59425 * C3565;
    const double C65497 = C59425 * C808;
    const double C65493 = C59425 * C816;
    const double C65489 = C59425 * C809;
    const double C65485 = C59425 * C817;
    const double C65479 = C59425 * C815;
    const double C65475 = C59425 * C807;
    const double C65817 = C59425 * C890;
    const double C65813 = C59425 * C891;
    const double C65807 = C59425 * C889;
    const double C66133 = C59425 * C5097;
    const double C66131 = C59425 * C5096;
    const double C67037 = C59425 * C5951;
    const double C67035 = C59425 * C5950;
    const double C68645 = C59425 * C3410;
    const double C68641 = C59425 * C3414;
    const double C69045 = C59425 * C3492;
    const double C69847 = C59425 * C3409;
    const double C69843 = C59425 * C3413;
    const double C70245 = C59425 * C3491;
    const double C70645 = C59425 * C8750;
    const double C70643 = C59425 * C8749;
    const double C82758 = C59425 * C4897;
    const double C82754 = C59425 * C4900;
    const double C83084 = C20753 * C59425;
    const double C83077 = C20751 * C59425;
    const double C83073 = C20749 * C59425;
    const double C83241 = C59425 * C15744;
    const double C84014 = C59425 * C16565;
    const double C84710 = C21834 * C59425;
    const double C84706 = C21832 * C59425;
    const double C86120 = C59425 * C8520;
    const double C86116 = C59425 * C8523;
    const double C86555 = C23109 * C59425;
    const double C86551 = C23107 * C59425;
    const double C86765 = C59425 * C19323;
    const double C10208 = C10204 + C10205;
    const double C24927 = C24923 + C24924;
    const double C9928 = C9911 + C9927;
    const double C24411 = C24409 + C24410;
    const double C8309 = C8303 + C8304;
    const double C12625 = C12619 + C12620;
    const double C18890 = C18885 + C18886;
    const double C46452 = C46446 + C46447;
    const double C68112 = C68109 + C68110;
    const double C7006 = C7002 + C5331;
    const double C7114 = C5428 * C93694;
    const double C15224 = C5428 * C14741;
    const double C17720 = C5428 * C14740;
    const double C45275 = C5428 * C93694;
    const double C48055 = C5428 * C47572;
    const double C50467 = C5428 * C93850;
    const double C12305 = C12303 + C3715;
    const double C7985 = C7981 + C6113;
    const double C68508 = C7661 + C7662;
    const double C68505 = C7662 + C7661;
    const double C67712 = C67710 + C8990;
    const double C12621 = C11979 * C9645;
    const double C13950 = C11979 * C4083;
    const double C31794 = C11979 * C28877;
    const double C33133 = C11979 * C91722;
    const double C62277 = C11979 * C59426;
    const double C74959 = C11979 * C47576;
    const double C8100 = C8094 + C8095;
    const double C12416 = C12410 + C12411;
    const double C31592 = C31587 + C31588;
    const double C57580 = C57577 + C57578;
    const double C62074 = C62068 + C62069;
    const double C13626 = C11681 * C93718;
    const double C29309 = C11681 * C28721;
    const double C32798 = C11681 * C28720;
    const double C63278 = C11681 * C93718;
    const double C71312 = C11681 * C70728;
    const double C74641 = C11681 * C93853;
    const double C13744 = C13740 + C11762;
    const double C7435 = C5700 * C93694;
    const double C15473 = C5700 * C14741;
    const double C18040 = C5700 * C14740;
    const double C45596 = C5700 * C93694;
    const double C48304 = C5700 * C47572;
    const double C50787 = C5700 * C93850;
    const double C11420 = C11416 * C4076;
    const double C30609 = C11416 * C93590;
    const double C32479 = C11416 * C93815;
    const double C41402 = C11416 * C93585;
    const double C61124 = C11416 * C93842;
    const double C72534 = C11416 * C93590;
    const double C74328 = C11416 * C47568;
    const double C8422 = C8420 * C93694;
    const double C18992 = C8420 * C14740;
    const double C46554 = C8420 * C93694;
    const double C51729 = C8420 * C93850;
    const double C56750 = C12746 + C12747;
    const double C56749 = C12747 + C12746;
    const double C123 =
        (2 * (2 * ae * C92024 + C92012 * C92041) + C92047 + C92047 +
         C92012 * (C92041 + C92044 + C92044 +
                   C92012 * (2 * ae * C92037 +
                             C92012 *
                                 (C92030 * C92031 +
                                  C92016 * bs[5] * std::pow(C92018, 5)) *
                                 C92019))) /
        C91701;
    const double C895 =
        (C92047 + C92127 * (C92137 + ae * C92140 + C92012 * C92148)) / C91701;
    const double C1019 =
        (C92047 + C92127 * (C92218 + ae * C92140 + C92012 * C92223)) / C91701;
    const double C1542 =
        (C92047 + C92170 * (C92180 + ae * C92183 + C92012 * C92191)) / C91701;
    const double C1782 =
        (C92047 + C92170 * (C92276 + ae * C92183 + C92012 * C92281)) / C91701;
    const double C130 = C107 * C117;
    const double C212 = C188 * C117;
    const double C299 = C275 * C117;
    const double C4100 = C4083 * C117;
    const double C4096 = C4085 * C117;
    const double C4199 = C4178 * C117;
    const double C9665 = C9644 * C117;
    const double C14760 = C91722 * C117;
    const double C42397 = C42386 * C117;
    const double C42500 = C42479 * C117;
    const double C47591 = C47576 * C117;
    const double C59446 = C59425 * C117;
    const double C2063 = C188 * C813;
    const double C2149 = C275 * C813;
    const double C4102 = C4081 * C813;
    const double C4094 = C4083 * C813;
    const double C4092 = C4085 * C813;
    const double C4195 = C4179 * C813;
    const double C5221 = C4077 * C813;
    const double C6650 = C4178 * C813;
    const double C6877 = C4076 * C813;
    const double C12080 = C9644 * C813;
    const double C14755 = C91722 * C813;
    const double C14856 = C14839 * C813;
    const double C17483 = C93590 * C813;
    const double C20060 = C20049 * C813;
    const double C42393 = C42386 * C813;
    const double C42496 = C42480 * C813;
    const double C43474 = C42378 * C813;
    const double C44811 = C42479 * C813;
    const double C45038 = C93842 * C813;
    const double C47592 = C47574 * C813;
    const double C47586 = C47576 * C813;
    const double C50230 = C93590 * C813;
    const double C61748 = C59425 * C813;
    const double C2777 = C188 * C1394;
    const double C2863 = C275 * C1394;
    const double C5788 = C4085 * C1394;
    const double C7536 = C4083 * C1394;
    const double C7641 = C4178 * C1394;
    const double C9494 = C4081 * C1394;
    const double C9661 = C9645 * C1394;
    const double C11285 = C4077 * C1394;
    const double C13068 = C9644 * C1394;
    const double C13191 = C4076 * C1394;
    const double C18141 = C91722 * C1394;
    const double C23547 = C20049 * C1394;
    const double C28894 = C28877 * C1394;
    const double C32358 = C93590 * C1394;
    const double C43982 = C42386 * C1394;
    const double C45802 = C42479 * C1394;
    const double C50888 = C47576 * C1394;
    const double C52783 = C47574 * C1394;
    const double C57304 = C93590 * C1394;
    const double C59442 = C59426 * C1394;
    const double C61015 = C42378 * C1394;
    const double C62720 = C59425 * C1394;
    const double C62843 = C93842 * C1394;
    const double C6668 = C6656 + C6657;
    const double C14871 = C14852 + C14853;
    const double C17271 = C17260 + C17261;
    const double C44829 = C44817 + C44818;
    const double C47702 = C47683 + C47684;
    const double C15883 = C15866 + C15867;
    const double C21835 = C21826 + C21827;
    const double C48686 = C48669 + C48670;
    const double C7771 = C7765 + C7766;
    const double C12098 = C12086 + C12087;
    const double C31281 = C31270 + C31271;
    const double C57168 = C57161 + C57162;
    const double C61766 = C61754 + C61755;
    const double C19785 = C19779 + C19780;
    const double C26524 = C26517 + C26518;
    const double C52487 = C52481 + C52482;
    const double C68507 = C7659 + C7660;
    const double C68506 = C7660 + C7659;
    const double C13951 = C11978 * C4076;
    const double C33134 = C11978 * C93590;
    const double C63601 = C11978 * C93842;
    const double C74960 = C11978 * C93590;
    const double C26516 = C26210 * C9645;
    const double C27140 = C26210 * C14839;
    const double C36849 = C26210 * C28877;
    const double C37465 = C26210 * C4179;
    const double C84708 = C26210 * C59426;
    const double C90219 = C26210 * C42480;
    const double C13086 = C13074 + C13075;
    const double C28909 = C28890 + C28891;
    const double C32252 = C32241 + C32242;
    const double C62738 = C62726 + C62727;
    const double C70912 = C70893 + C70894;
    const double C30792 = C30783 + C30784;
    const double C37785 = C37783 + C37784;
    const double C55299 = C55291 + C55292;
    const double C19462 = C19450 + C19451;
    const double C26211 = C26204 + C26205;
    const double C52173 = C52161 + C52162;
    const double C5325 =
        (2 * (2 * ae * C92133 + C92127 * C92240) + C92641 + C92641 +
         C92127 * (C92240 + C92638 + C92638 +
                   C92127 * (2 * C92141 + C92127 * C92245))) /
        C91701;
    const double C9305 =
        (C92641 + C92170 * (C92297 + ae * C92707 +
                            C92127 * (C92184 + C92127 * C92300))) /
        C91701;
    const double C5336 = C4179 * C5016;
    const double C15973 = C14839 * C5016;
    const double C15969 = C14840 * C5016;
    const double C16056 = C275 * C5016;
    const double C20274 = C20115 * C5016;
    const double C20743 = C20049 * C5016;
    const double C24647 = C9644 * C5016;
    const double C43586 = C42480 * C5016;
    const double C48673 = C47574 * C5016;
    const double C48770 = C47671 * C5016;
    const double C82995 = C59425 * C5016;
    const double C8989 = C4179 * C8645;
    const double C10580 = C188 * C8645;
    const double C16725 = C14840 * C8645;
    const double C19567 = C14839 * C8645;
    const double C19672 = C275 * C8645;
    const double C23096 = C20049 * C8645;
    const double C24560 = C14838 * C8645;
    const double C24643 = C9645 * C8645;
    const double C25114 = C14741 * C8645;
    const double C27846 = C14740 * C8645;
    const double C28303 = C9644 * C8645;
    const double C34959 = C4178 * C8645;
    const double C35045 = C28877 * C8645;
    const double C38190 = C93694 * C8645;
    const double C47089 = C42480 * C8645;
    const double C49482 = C47671 * C8645;
    const double C52155 = C47574 * C8645;
    const double C54061 = C42479 * C8645;
    const double C58254 = C93694 * C8645;
    const double C65815 = C59426 * C8645;
    const double C83402 = C47572 * C8645;
    const double C86001 = C93850 * C8645;
    const double C86446 = C59425 * C8645;
    const double C11756 =
        (2 * (2 * ae * C92176 + C92170 * C92314) + C92793 + C92793 +
         C92170 * (C92314 + C92790 + C92790 +
                   C92170 * (2 * C92184 + C92170 * C92319))) /
        C91701;
    const double C11767 = C9645 * C11196;
    const double C30874 = C188 * C11196;
    const double C30961 = C28877 * C11196;
    const double C30957 = C28878 * C11196;
    const double C35969 = C20049 * C11196;
    const double C36058 = C4178 * C11196;
    const double C39456 = C39147 * C11196;
    const double C61447 = C59426 * C11196;
    const double C72689 = C47574 * C11196;
    const double C72844 = C70881 * C11196;
    const double C88853 = C42479 * C11196;
    const double C28640 = C28636 + C14659;
    const double C28415 = C25606 * C93718;
    const double C35134 = C25606 * C28721;
    const double C38760 = C25606 * C28720;
    const double C86552 = C25606 * C93718;
    const double C88024 = C25606 * C70728;
    const double C91465 = C25606 * C93853;
    const double C36066 = C36062 + C36063;
    const double C14261 = C14260 + C14253;
    const double C35810 = C35804 + C35784;
    const double C38549 = C38545 + C38532;
    const double C35812 = C35806 + C35788;
    const double C33464 = C33463 + C33458;
    const double C38551 = C38547 + C38536;
    const double C35525 = C35523 * C20049;
    const double C4572 = C4571 + C4565;
    const double C10091 = C10090 + C10084;
    const double C3497 = (C92170 * (C92076 + C92127 * C92166)) / C91701;
    const double C92077 = C92053 + C92075;
    const double C92331 = ae * C92329;
    const double C3415 = (C92170 * C92329) / C91696;
    const double C92433 = ae * C92431;
    const double C4914 = C4085 * C818;
    const double C5111 = C275 * C818;
    const double C5235 = C4077 * C818;
    const double C6539 = C4083 * C818;
    const double C6648 = C4179 * C818;
    const double C14753 = C91722 * C818;
    const double C14854 = C14840 * C818;
    const double C17491 = C93590 * C818;
    const double C20061 = C20049 * C818;
    const double C43206 = C42386 * C818;
    const double C43488 = C42378 * C818;
    const double C44809 = C42480 * C818;
    const double C47594 = C47574 * C818;
    const double C47584 = C47576 * C818;
    const double C47685 = C47671 * C818;
    const double C50238 = C93590 * C818;
    const double C5793 = C4085 * C1399;
    const double C11095 = C188 * C1399;
    const double C11299 = C4077 * C1399;
    const double C12853 = C4083 * C1399;
    const double C13066 = C9645 * C1399;
    const double C28723 = C91722 * C1399;
    const double C28892 = C28878 * C1399;
    const double C32366 = C93590 * C1399;
    const double C33951 = C20049 * C1399;
    const double C43987 = C42386 * C1399;
    const double C56886 = C47576 * C1399;
    const double C61029 = C42378 * C1399;
    const double C62718 = C59426 * C1399;
    const double C70730 = C47574 * C1399;
    const double C70895 = C70881 * C1399;
    const double C74219 = C93590 * C1399;
    const double C8531 = C4077 * C3419;
    const double C46655 = C42378 * C3419;
    const double C55650 = C93590 * C3419;
    const double C78442 = C93590 * C3419;
    const double C31269 = C28721 * C5954;
    const double C57160 = C93718 * C5954;
    const double C68640 = C93718 * C5954;
    const double C73148 = C70728 * C5954;
    const double C33667 = C93590 * C6274;
    const double C36853 = C93585 * C6274;
    const double C55288 = C93590 * C6274;
    const double C19443 = C93590 * C8866;
    const double C26209 = C93585 * C8866;
    const double C52154 = C93590 * C8866;
    const double C33140 = C31168 * C93590;
    const double C74964 = C31168 * C93590;
    const double C36851 = C36549 * C28878;
    const double C37471 = C36549 * C4179;
    const double C89627 = C36549 * C70881;
    const double C90223 = C36549 * C42480;
    const double C4915 = C4077 * C826;
    const double C17145 = C93590 * C826;
    const double C43207 = C42378 * C826;
    const double C49892 = C93590 * C826;
    const double C17259 = C14741 * C5020;
    const double C50006 = C47572 * C5020;
    const double C15869 = C93590 * C5213;
    const double C21831 = C93585 * C5213;
    const double C48672 = C93590 * C5213;
    const double C18361 = C93706 * C8753;
    const double C26099 = C93718 * C8753;
    const double C65484 = C93718 * C8753;
    const double C19776 = C93590 * C9196;
    const double C26523 = C93585 * C9196;
    const double C52478 = C93590 * C9196;
    const double C15766 = C15757 + C15758;
    const double C15886 = C15872 + C15873;
    const double C21836 = C21828 + C21829;
    const double C48689 = C48675 + C48676;
    const double C18256 = C18244 + C18245;
    const double C19460 = C19446 + C19447;
    const double C26212 = C26206 + C26207;
    const double C51003 = C50991 + C50992;
    const double C52171 = C52157 + C52158;
    const double C55795 = C55787 + C55788;
    const double C67307 = C67299 + C67300;
    const double C10981 = C4077 * C1407;
    const double C32020 = C93590 * C1407;
    const double C60750 = C42378 * C1407;
    const double C73887 = C93590 * C1407;
    const double C33351 = C93590 * C6031;
    const double C36548 = C93585 * C6031;
    const double C54928 = C93590 * C6031;
    const double C32240 = C28721 * C11200;
    const double C74101 = C70728 * C11200;
    const double C30786 = C93590 * C11573;
    const double C41537 = C93585 * C11573;
    const double C72688 = C93590 * C11573;
    const double C30325 = C30316 + C30317;
    const double C30523 = C30509 + C30510;
    const double C41331 = C41327 + C41328;
    const double C72454 = C72446 + C72447;
    const double C92396 = ae * C92395;
    const double C893 = (2 * C92140 + C92012 * C92149 + C92127 * C92395 +
                         C92127 * C92106 * ae) /
                        C91696;
    const double C3494 = (C92170 * C92395) / C91696;
    const double C92530 = ae * C92529;
    const double C1540 = (2 * C92183 + C92012 * C92192 + C92170 * C92529 +
                          C92170 * C92106 * ae) /
                         C91696;
    const double C92661 = C92660 + C92657;
    const double C8986 =
        (C92170 * C92252 + C92743 + C92743 +
         C92127 * (2 * ae * C92170 * C92163 +
                   C92127 * C92170 *
                       (C92250 + (C92084 * C92085 +
                                  C92235 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92016))) /
        C91701;
    const double C92812 = C92811 + C92808;
    const double C6429 =
        (C92127 * C92326 + C92720 + C92720 +
         C92170 * (2 * ae * C92717 +
                   C92170 * C92127 *
                       (C92324 + (C92084 * C92085 +
                                  C92309 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92016))) /
        C91701;
    const double C9093 =
        (ae * C92149 + C92170 * C92268 + C92720 +
         C92127 * (ae * (C92170 * C92206 + C92102) +
                   C92127 * (ae * C92163 +
                             C92170 * (C92266 + std::pow(C92018, 7) * bs[7] *
                                                    C92257 * C92016)))) /
        C91701;
    const double C6433 = C275 * C5952;
    const double C14663 = C9645 * C5952;
    const double C31905 = C28878 * C5952;
    const double C64298 = C59426 * C5952;
    const double C73776 = C70881 * C5952;
    const double C92872 = ae * C92870;
    const double C92871 = C92127 * C92870;
    const double C92948 = C92170 * C92870;
    const double C16720 =
        (C92643 + C92855 * C92309 + C92915 + C92915 +
         C92127 *
             (2 * ae * (C92151 + C92857 * C92309) +
              C92127 * (C92855 + C92012 *
                                     (C92084 * C92085 +
                                      C92235 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92309))) /
        C91701;
    const double C33767 =
        (2 * (C92649 + C92170 * C92896) + C92915 +
         C92170 * (C92896 + C92951 +
                   C92170 * (C92868 +
                             C92170 * (ae * C92883 + C92127 * C92012 *
                                                         std::pow(C92018, 7) *
                                                         bs[7] * C92294)))) /
        C91701;
    const double C33461 = C188 * C33128;
    const double C37580 = C4179 * C33128;
    const double C55068 = C42480 * C33128;
    const double C93215 = ae * C93213;
    const double C93214 = C92170 * C93213;
    const double C17036 =
        (C92676 + C92899 * C92235 + C92929 + C92929 +
         C92170 *
             (2 * ae * C92887 +
              C92170 * (C92899 + C92012 *
                                     (C92084 * C92085 +
                                      C92309 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92235))) /
        C91701;
    const double C19670 =
        (2 * (C92800 + C92127 * C92957) + C92929 +
         C92127 * (C92957 + ae * (C92170 * C92127 * C92883 + C92862) +
                   C92127 * (ae * (C92170 * C92883 + C92098) +
                             C92127 * (ae * C92857 + C92170 * C92012 *
                                                         std::pow(C92018, 7) *
                                                         bs[7] * C92257)))) /
        C91701;
    const double C17039 = C275 * C16566;
    const double C27642 = C9645 * C16566;
    const double C30114 = C28878 * C16566;
    const double C70646 = C59426 * C16566;
    const double C72115 = C70881 * C16566;
    const double C93239 = C93238 + C93234;
    const double C5875 =
        (C92076 + C92127 * C92166 +
         (C92117 +
          C92127 * (C92156 + ae * C92012 * C92158 +
                    C92012 * (ae * C92158 +
                              C92012 * std::pow(C92018, 7) * bs[7] * C92131))) *
             C92309) /
        C91701;
    const double C92118 = C92087 + C92116;
    const double C92349 = C92074 + C92346;
    const double C92451 = C92074 + C92448;
    const double C92540 = ae * C92535;
    const double C92580 = C92170 * C92535;
    const double C5780 = (C92329 + C92535 * C92309) / C91696;
    const double C92561 = ae * C92556;
    const double C92622 = ae * C92621;
    const double C15553 = (3 * C92342 + C92127 * C92621) / C91696;
    const double C19098 = (C92170 * C92621) / C91696;
    const double C8528 =
        (C92170 * C92348 + C92725 + C92725 +
         C92012 * (2 * ae * C92170 * (C92061 + C92097 * C92235) +
                   C92012 * C92170 *
                       (C92104 + (C92084 * C92085 +
                                  C92016 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92235))) /
        C91701;
    const double C16568 =
        (C92191 + C92205 * C92235 + C92725 +
         C92170 * (C92352 + C92170 * (C92205 + (ae * C92201 +
                                                C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92174) *
                                                   C92235))) /
        C91701;
    const double C16884 =
        (C92281 + C92287 * C92235 + C92725 +
         C92170 * (C92352 + C92170 * (C92287 + (ae * C92201 +
                                                C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92273) *
                                                   C92235))) /
        C91701;
    const double C19440 =
        (2 * (C92434 + C92127 * C92939) + C92725 +
         C92127 * (C92939 + C92583 +
                   C92127 * (C92562 +
                             C92127 * C92170 *
                                 (ae * C92158 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92215)))) /
        C91701;
    const double C92762 = ae * C92761;
    const double C30191 = (3 * C92444 + C92170 * C92761) / C91696;
    const double C5783 =
        (C92328 + C92533 * C92309 + C92683 + C92683 +
         C92012 *
             (2 * ae * (C92532 + C92127 * C92097 * C92309) +
              C92012 * (C92533 + C92127 *
                                     (C92084 * C92085 +
                                      C92016 * bs[7] * std::pow(C92018, 7)) *
                                     C92019 * C92309))) /
        C91701;
    const double C16644 =
        (C92223 + C92229 * C92309 + C92683 +
         C92127 * (C92454 + C92127 * (C92229 + (ae * C92158 +
                                                C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92215) *
                                                   C92309))) /
        C91701;
    const double C33243 =
        (2 * (C92332 + C92170 * C93222) + C92683 +
         C92170 * (C93222 + C92583 +
                   C92170 * (C92541 +
                             C92170 * C92127 *
                                 (ae * C92201 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92174)))) /
        C91701;
    const double C33662 =
        (2 * (C92332 + C92170 * C93227) + C92683 +
         C92170 * (C93227 + C92583 +
                   C92170 * (C92541 +
                             C92170 * C92127 *
                                 (ae * C92201 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92273)))) /
        C91701;
    const double C33024 = C91722 * C33016;
    const double C37153 = C20049 * C33016;
    const double C54570 = C47576 * C33016;
    const double C93012 = C92990 + C93010;
    const double C93055 = C92847 + C93052;
    const double C93088 = ae * C93084;
    const double C93114 = ae * C93113;
    const double C35484 = (3 * C92910 + C92170 * C93113) / C91696;
    const double C93346 = C93326 + C93344;
    const double C93072 = ae * C93071;
    const double C21213 = (2 * C92707 + C92127 * C92880 + C92170 * C93071 +
                           C92170 * C93007 * ae) /
                          C91696;
    const double C93141 = C93140 + C93137;
    const double C93284 = ae * C93282;
    const double C93283 = C92170 * C93282;
    const double C6991 = C93694 * C1082;
    const double C15117 = C14741 * C1082;
    const double C45152 = C93694 * C1082;
    const double C47948 = C47572 * C1082;
    const double C8300 = C93694 * C3925;
    const double C12615 = C93680 * C3925;
    const double C46443 = C93694 * C3925;
    const double C7000 = C6990 + C5329;
    const double C5427 = C5420 + C5421;
    const double C6666 = C6652 + C6653;
    const double C14875 = C14860 + C14861;
    const double C44827 = C44813 + C44814;
    const double C47706 = C47691 + C47692;
    const double C12302 = C12298 + C3716;
    const double C7979 = C7969 + C6111;
    const double C7657 = C7643 + C7644;
    const double C11977 = C11970 + C11971;
    const double C45818 = C45804 + C45805;
    const double C451 = C447 + C438;
    const double C2310 = C2307 + C2298;
    const double C4481 = C4475 + C4459;
    const double C3024 = C3021 + C3012;
    const double C11415 = C11411 + C11398;
    const double C13205 = C13198 + C13199;
    const double C62857 = C62850 + C62851;
    const double C11310 = C11292 + C11293;
    const double C32378 = C32369 + C32370;
    const double C61040 = C61022 + C61023;
    const double C74227 = C74222 + C74223;
    const double C92652 = ae * C92651;
    const double C5017 =
        (2 * C92387 + C92127 * C92651 + (C92035 + C92058 * C92235) * ae) /
        C91696;
    const double C8646 = (C92170 * C92651) / C91696;
    const double C16488 = (C92651 + C92870 * C92309) / C91696;
    const double C18563 = C14741 * C8985;
    const double C51304 = C47572 * C8985;
    const double C56206 = C93694 * C8985;
    const double C67706 = C93694 * C8985;
    const double C37584 = C37582 + C6120;
    const double C31485 = C31484 + C14257;
    const double C31792 = C31169 * C28878;
    const double C33139 = C31169 * C91722;
    const double C73665 = C31169 * C70881;
    const double C74963 = C31169 * C47576;
    const double C16959 =
        (C92297 + ae * C92707 + C92127 * C92892 + ae * C92170 * C92847 +
         C92170 * (C92849 + C92170 * (C92300 + ae * C92127 * C92188 +
                                      C92127 * (C92195 + C92127 * C92303)))) /
        C91701;
    const double C92850 = C92835 + C92848;
    const double C92944 = ae * C92942;
    const double C16730 = C14840 * C16487;
    const double C25128 = C14741 * C16487;
    const double C25307 = C20049 * C16487;
    const double C28192 = C14839 * C16487;
    const double C28301 = C9645 * C16487;
    const double C29805 = C188 * C16487;
    const double C34961 = C4178 * C16487;
    const double C34957 = C4179 * C16487;
    const double C35043 = C28878 * C16487;
    const double C38198 = C93694 * C16487;
    const double C49487 = C47671 * C16487;
    const double C58662 = C42480 * C16487;
    const double C83416 = C47572 * C16487;
    const double C86444 = C59426 * C16487;
    const double C87851 = C42479 * C16487;
    const double C87933 = C70881 * C16487;
    const double C90917 = C93694 * C16487;
    const double C25418 = C14741 * C16719;
    const double C38538 = C93694 * C16719;
    const double C83674 = C47572 * C16719;
    const double C91249 = C93694 * C16719;
    const double C36057 = C93694 * C25681;
    const double C42231 = C93680 * C25681;
    const double C88852 = C93694 * C25681;
    const double C42028 = C42025 + C33460;
    const double C35521 = C35507 + C35508;
    const double C35696 = C35687 + C35688;
    const double C35801 = C35789 + C35790;
    const double C41815 = C41811 + C41812;
    const double C88374 = C88366 + C88367;
    const double C38657 = C38651 + C38652;
    const double C91362 = C91356 + C91357;
    const double C40229 = C40228 + C40225;
    const double C13729 = C93718 * C1903;
    const double C29407 = C28721 * C1903;
    const double C63381 = C93718 * C1903;
    const double C71410 = C70728 * C1903;
    const double C8090 = C93706 * C3785;
    const double C12407 = C93718 * C3785;
    const double C62065 = C93718 * C3785;
    const double C11680 = C11673 + C11674;
    const double C13738 = C13728 + C11760;
    const double C13084 = C13070 + C13071;
    const double C28913 = C28898 + C28899;
    const double C62736 = C62722 + C62723;
    const double C70916 = C70901 + C70902;
    const double C746 = C742 + C733;
    const double C2624 = C2621 + C2612;
    const double C5699 = C5695 + C5682;
    const double C3338 = C3335 + C3326;
    const double C10206 = C10200 + C10184;
    const double C8419 = C8417 + C8410;
    const double C12744 = C12740 + C12727;
    const double C7224 = C7220 + C7221;
    const double C45385 = C45381 + C45382;
    const double C5522 = C5513 + C5514;
    const double C17833 = C17828 + C17829;
    const double C43754 = C43745 + C43746;
    const double C50580 = C50575 + C50576;
    const double C31898 = C28721 * C6428;
    const double C57980 = C93718 * C6428;
    const double C69442 = C93718 * C6428;
    const double C73769 = C70728 * C6428;
    const double C18679 = C93706 * C9092;
    const double C26413 = C93718 * C9092;
    const double C65812 = C93718 * C9092;
    const double C57983 = C57979 + C14661;
    const double C31283 = C31274 + C31275;
    const double C31797 = C31790 + C31791;
    const double C37889 = C37886 + C37887;
    const double C55413 = C55403 + C55404;
    const double C57169 = C57163 + C57164;
    const double C68649 = C68643 + C68644;
    const double C73162 = C73153 + C73154;
    const double C92803 = ae * C92802;
    const double C11197 =
        (2 * C92521 + C92170 * C92802 + (C92035 + C92058 * C92309) * ae) /
        C91696;
    const double C28625 = C93718 * C17035;
    const double C35296 = C28721 * C17035;
    const double C86762 = C93718 * C17035;
    const double C88186 = C70728 * C17035;
    const double C23249 = C93706 * C19669;
    const double C24646 = C93718 * C19669;
    const double C82994 = C93718 * C19669;
    const double C25605 = C25598 + C25599;
    const double C28634 = C28624 + C25778;
    const double C27977 = C27963 + C27964;
    const double C34806 = C34791 + C34792;
    const double C86124 = C86118 + C86119;
    const double C87700 = C87685 + C87686;
    const double C21050 = C21049 + C21046;
    const double C23472 = C23471 + C23468;
    const double C24925 = C24919 + C24903;
    const double C93132 = ae * C93131;
    const double C25218 =
        (2 * C92709 + C92170 * C93131 + (C92634 + C92837 * C92309) * ae) /
        C91696;
    const double C93195 = C93183 + C93193;
    const double C30623 = C30621 * C93590;
    const double C41403 = C30621 * C93585;
    const double C72535 = C30621 * C93590;
    const double C18039 = C16320 * C14741;
    const double C50786 = C16320 * C47572;
    const double C18997 = C18996 * C14741;
    const double C51728 = C18996 * C47572;
    const double C4823 = C4819 + C4820;
    const double C43124 = C43120 + C43121;
    const double C91732 = C91730 - C91717;
    const double C91731 = C91729 / C91696;
    const double C4913 = C4084 * C810;
    const double C4911 = C4084 * C805;
    const double C6536 = C4084 * C804;
    const double C8530 = C4084 * C3411;
    const double C10980 = C4084 * C1391;
    const double C10978 = C4084 * C1386;
    const double C12850 = C4084 * C1385;
    const double C15565 = C14744 * C4898;
    const double C15563 = C14744 * C809;
    const double C15559 = C14744 * C806;
    const double C17144 = C14744 * C810;
    const double C17140 = C14744 * C805;
    const double C19106 = C14744 * C3410;
    const double C19102 = C14744 * C8521;
    const double C30203 = C14744 * C10965;
    const double C30201 = C14744 * C1390;
    const double C30197 = C14744 * C1387;
    const double C32019 = C14744 * C1391;
    const double C32015 = C14744 * C1386;
    const double C33021 = C14744 * C5776;
    const double C78441 = C14744 * C3411;
    const double C20542 = C20048 * C15550;
    const double C20540 = C20048 * C4897;
    const double C20538 = C20048 * C808;
    const double C20536 = C20048 * C807;
    const double C21601 = C20048 * C4898;
    const double C21599 = C20048 * C809;
    const double C21597 = C20048 * C806;
    const double C22862 = C20048 * C3409;
    const double C22860 = C20048 * C8520;
    const double C22858 = C20048 * C19095;
    const double C25014 = C20048 * C1389;
    const double C25012 = C20048 * C5775;
    const double C25010 = C20048 * C16395;
    const double C25008 = C20048 * C1388;
    const double C25886 = C20048 * C8521;
    const double C25883 = C20048 * C3410;
    const double C26834 = C20048 * C1387;
    const double C35401 = C20048 * C10964;
    const double C35399 = C20048 * C25001;
    const double C36245 = C20048 * C5776;
    const double C37150 = C20048 * C1390;
    const double C39977 = C20048 * C30188;
    const double C41113 = C20048 * C10965;
    const double C43205 = C42385 * C810;
    const double C43203 = C42385 * C805;
    const double C44697 = C42385 * C804;
    const double C46654 = C42385 * C3411;
    const double C60749 = C42385 * C1391;
    const double C60747 = C42385 * C1386;
    const double C62502 = C42385 * C1385;
    const double C48390 = C47575 * C4898;
    const double C48388 = C47575 * C809;
    const double C48384 = C47575 * C806;
    const double C49891 = C47575 * C810;
    const double C49887 = C47575 * C805;
    const double C51833 = C47575 * C3410;
    const double C51829 = C47575 * C8521;
    const double C54563 = C47575 * C1390;
    const double C54559 = C47575 * C5776;
    const double C54557 = C47575 * C1387;
    const double C55649 = C47575 * C3411;
    const double C56883 = C47575 * C1386;
    const double C72191 = C47575 * C10965;
    const double C73886 = C47575 * C1391;
    const double C5251 = C5238 + C5239;
    const double C5248 = C5232 + C5233;
    const double C5243 = C5222 + C5223;
    const double C5240 = C5216 + C5217;
    const double C5524 = C5517 + C5518;
    const double C5519 = C5507 + C5508;
    const double C6889 = C6880 + C6881;
    const double C6886 = C6874 + C6875;
    const double C7222 = C7216 + C7217;
    const double C8886 = C8879 + C8880;
    const double C8883 = C8873 + C8874;
    const double C9207 = C9203 + C9204;
    const double C11315 = C11302 + C11303;
    const double C11312 = C11296 + C11297;
    const double C11307 = C11286 + C11287;
    const double C11304 = C11280 + C11281;
    const double C11593 = C11586 + C11587;
    const double C11588 = C11576 + C11577;
    const double C13203 = C13194 + C13195;
    const double C13200 = C13188 + C13189;
    const double C13521 = C13515 + C13516;
    const double C5250 = C5236 + C5237;
    const double C5247 = C5230 + C5231;
    const double C5244 = C5224 + C5225;
    const double C5241 = C5218 + C5219;
    const double C5523 = C5515 + C5516;
    const double C5520 = C5509 + C5510;
    const double C7223 = C7218 + C7219;
    const double C8885 = C8877 + C8878;
    const double C8882 = C8871 + C8872;
    const double C9206 = C9201 + C9202;
    const double C11314 = C11300 + C11301;
    const double C11311 = C11294 + C11295;
    const double C11308 = C11288 + C11289;
    const double C11305 = C11282 + C11283;
    const double C11592 = C11584 + C11585;
    const double C11589 = C11578 + C11579;
    const double C13204 = C13196 + C13197;
    const double C48578 = C48570 + C48571;
    const double C48690 = C48677 + C48678;
    const double C48685 = C48667 + C48668;
    const double C48683 = C48663 + C48664;
    const double C48681 = C48659 + C48660;
    const double C48679 = C48655 + C48656;
    const double C48945 = C48938 + C48939;
    const double C48942 = C48932 + C48933;
    const double C48940 = C48927 + C48928;
    const double C50249 = C50239 + C50240;
    const double C50247 = C50235 + C50236;
    const double C50245 = C50231 + C50232;
    const double C50243 = C50227 + C50228;
    const double C50579 = C50573 + C50574;
    const double C50577 = C50569 + C50570;
    const double C52176 = C52167 + C52168;
    const double C52174 = C52163 + C52164;
    const double C52172 = C52159 + C52160;
    const double C52488 = C52483 + C52484;
    const double C52486 = C52479 + C52480;
    const double C54954 = C54941 + C54942;
    const double C54952 = C54937 + C54938;
    const double C54950 = C54933 + C54934;
    const double C54948 = C54929 + C54930;
    const double C54945 = C54923 + C54924;
    const double C54943 = C54919 + C54920;
    const double C55300 = C55293 + C55294;
    const double C55298 = C55289 + C55290;
    const double C55295 = C55283 + C55284;
    const double C56073 = C56067 + C56068;
    const double C56071 = C56063 + C56064;
    const double C56481 = C56477 + C56478;
    const double C57311 = C57305 + C57306;
    const double C57309 = C57301 + C57302;
    const double C57715 = C57711 + C57712;
    const double C72289 = C72281 + C72282;
    const double C72455 = C72448 + C72449;
    const double C72453 = C72444 + C72445;
    const double C74226 = C74220 + C74221;
    const double C74224 = C74216 + C74217;
    const double C74539 = C74535 + C74536;
    const double C24743 = C24742 + C24736;
    const double C35700 = C35695 + C35685;
    const double C91868 = C91828 / C91696;
    const double C15100 =
        (-(((-4 * C91786) / C91696 - C91828 / C91696) * be) / C91696) / C91702 -
        ((2 * ((-C91814 / C91696) / C91702 - (0 * be) / C91696) -
          C91828 / C91711) *
         be) /
            C91696;
    const double C15121 = C15099 * C110;
    const double C15106 = C15099 * C109;
    const double C17606 = C15099 * C806;
    const double C18566 = C15099 * C1387;
    const double C25421 = C15099 * C1389;
    const double C25411 = C15099 * C1388;
    const double C28185 = C15099 * C3409;
    const double C15115 = C15101 * C810;
    const double C15112 = C15101 * C809;
    const double C17602 = C15101 * C4898;
    const double C18562 = C15101 * C8521;
    const double C25417 = C15101 * C16395;
    const double C25415 = C15101 * C8520;
    const double C28189 = C15101 * C19095;
    const double C42758 = C42742 * C804;
    const double C42755 = C42742 * C805;
    const double C42749 = C42742 * C806;
    const double C45155 = C42742 * C809;
    const double C45151 = C42742 * C810;
    const double C46122 = C42742 * C3410;
    const double C46118 = C42742 * C3411;
    const double C55061 = C42742 * C5775;
    const double C55057 = C42742 * C5776;
    const double C55055 = C42742 * C3409;
    const double C56205 = C42742 * C8521;
    const double C58659 = C42742 * C8520;
    const double C88615 = C42742 * C25001;
    const double C91248 = C42742 * C16395;
    const double C47946 = C47932 * C810;
    const double C47943 = C47932 * C809;
    const double C50349 = C47932 * C4898;
    const double C51303 = C47932 * C8521;
    const double C83673 = C47932 * C16395;
    const double C83671 = C47932 * C8520;
    const double C86332 = C47932 * C19095;
    const double C91851 = C91848 - C91843;
    const double C42517 = C42504 + C42505;
    const double C42512 = C42494 + C42495;
    const double C42510 = C42490 + C42491;
    const double C42508 = C42486 + C42487;
    const double C42506 = C42482 + C42483;
    const double C42871 = C42863 + C42864;
    const double C43040 = C43033 + C43034;
    const double C43037 = C43027 + C43028;
    const double C43035 = C43022 + C43023;
    const double C44832 = C44823 + C44824;
    const double C44830 = C44819 + C44820;
    const double C44828 = C44815 + C44816;
    const double C45495 = C45490 + C45491;
    const double C45493 = C45486 + C45487;
    const double C45823 = C45814 + C45815;
    const double C45821 = C45810 + C45811;
    const double C45819 = C45806 + C45807;
    const double C46453 = C46448 + C46449;
    const double C46451 = C46444 + C46445;
    const double C54722 = C54709 + C54710;
    const double C54720 = C54705 + C54706;
    const double C54718 = C54701 + C54702;
    const double C54716 = C54697 + C54698;
    const double C54713 = C54691 + C54692;
    const double C54711 = C54687 + C54688;
    const double C55416 = C55409 + C55410;
    const double C55414 = C55405 + C55406;
    const double C55411 = C55399 + C55400;
    const double C55798 = C55793 + C55794;
    const double C55796 = C55789 + C55790;
    const double C56618 = C56615 + C56616;
    const double C58261 = C58255 + C58256;
    const double C58259 = C58251 + C58252;
    const double C59067 = C59063 + C59064;
    const double C88375 = C88368 + C88369;
    const double C88373 = C88364 + C88365;
    const double C88537 = C88529 + C88530;
    const double C90924 = C90918 + C90919;
    const double C90922 = C90914 + C90915;
    const double C91571 = C91567 + C91568;
    const double C91934 = C91898 / C91696;
    const double C29390 =
        (-(((-4 * C91798) / C91696 - C91898 / C91696) * be) / C91696) / C91702 -
        ((2 * ((-C91884 / C91696) / C91702 - (0 * be) / C91696) -
          C91898 / C91711) *
         be) /
            C91696;
    const double C29411 = C29389 * C110;
    const double C29396 = C29389 * C109;
    const double C31901 = C29389 * C806;
    const double C32904 = C29389 * C1387;
    const double C35299 = C29389 * C808;
    const double C35289 = C29389 * C807;
    const double C38976 = C29389 * C3409;
    const double C29405 = C29391 * C1391;
    const double C29402 = C29391 * C1390;
    const double C31897 = C29391 * C5776;
    const double C32900 = C29391 * C10965;
    const double C35295 = C29391 * C16395;
    const double C35293 = C29391 * C5775;
    const double C38972 = C29391 * C25001;
    const double C59963 = C59947 * C1385;
    const double C59960 = C59947 * C1386;
    const double C59954 = C59947 * C1387;
    const double C62382 = C59947 * C3410;
    const double C62378 = C59947 * C3411;
    const double C63384 = C59947 * C1390;
    const double C63380 = C59947 * C1391;
    const double C66127 = C59947 * C8520;
    const double C66123 = C59947 * C8521;
    const double C66121 = C59947 * C3409;
    const double C69441 = C59947 * C5776;
    const double C70639 = C59947 * C5775;
    const double C83237 = C59947 * C19095;
    const double C86761 = C59947 * C16395;
    const double C71408 = C71394 * C1391;
    const double C71405 = C71394 * C1390;
    const double C73768 = C71394 * C5776;
    const double C74743 = C71394 * C10965;
    const double C88185 = C71394 * C16395;
    const double C88183 = C71394 * C5775;
    const double C91671 = C71394 * C25001;
    const double C91917 = C91914 - C91909;
    const double C59463 = C59450 + C59451;
    const double C59458 = C59440 + C59441;
    const double C59456 = C59436 + C59437;
    const double C59454 = C59432 + C59433;
    const double C59452 = C59428 + C59429;
    const double C59706 = C59699 + C59700;
    const double C59703 = C59693 + C59694;
    const double C59701 = C59688 + C59689;
    const double C59870 = C59862 + C59863;
    const double C61769 = C61760 + C61761;
    const double C61767 = C61756 + C61757;
    const double C61765 = C61752 + C61753;
    const double C62075 = C62070 + C62071;
    const double C62073 = C62066 + C62067;
    const double C62741 = C62732 + C62733;
    const double C62739 = C62728 + C62729;
    const double C62737 = C62724 + C62725;
    const double C63068 = C63063 + C63064;
    const double C63066 = C63059 + C63060;
    const double C65510 = C65497 + C65498;
    const double C65508 = C65493 + C65494;
    const double C65506 = C65489 + C65490;
    const double C65504 = C65485 + C65486;
    const double C65501 = C65479 + C65480;
    const double C65499 = C65475 + C65476;
    const double C65824 = C65817 + C65818;
    const double C65822 = C65813 + C65814;
    const double C65819 = C65807 + C65808;
    const double C68650 = C68645 + C68646;
    const double C68648 = C68641 + C68642;
    const double C69048 = C69045 + C69046;
    const double C69852 = C69847 + C69848;
    const double C69850 = C69843 + C69844;
    const double C70248 = C70245 + C70246;
    const double C82765 = C82758 + C82759;
    const double C82763 = C82754 + C82755;
    const double C83085 = C83077 + C83078;
    const double C86125 = C86120 + C86121;
    const double C86123 = C86116 + C86117;
    const double C10209 = C10208 * C93680;
    const double C69310 = C8309 + C8310;
    const double C69309 = C8310 + C8309;
    const double C12627 = C12625 * C93718;
    const double C31793 = C12625 * C28720;
    const double C62276 = C12625 * C93718;
    const double C73666 = C12625 * C93853;
    const double C7010 = C7006 + C6995;
    const double C12307 = C12305 + C12301;
    const double C7989 = C7985 + C7974;
    const double C67714 = C67712 + C67708;
    const double C8102 = C8100 * C93694;
    const double C18681 = C8100 * C14740;
    const double C46242 = C8100 * C93694;
    const double C51421 = C8100 * C93850;
    const double C56346 = C12416 + C12417;
    const double C56345 = C12417 + C12416;
    const double C13748 = C13744 + C13733;
    const double C30616 = C30608 + C30609;
    const double C72537 = C72533 + C72534;
    const double C2064 = C93680 * C895;
    const double C4196 = C93694 * C895;
    const double C6651 = C93828 * C895;
    const double C14857 = C14740 * C895;
    const double C42497 = C93694 * C895;
    const double C44812 = C42379 * C895;
    const double C47688 = C93850 * C895;
    const double C5227 = C4077 * C1019;
    const double C6883 = C4076 * C1019;
    const double C17487 = C93590 * C1019;
    const double C43480 = C42378 * C1019;
    const double C45044 = C93842 * C1019;
    const double C50234 = C93590 * C1019;
    const double C2864 = C93706 * C1542;
    const double C9662 = C93718 * C1542;
    const double C13069 = C93829 * C1542;
    const double C28895 = C28720 * C1542;
    const double C59443 = C93718 * C1542;
    const double C62721 = C59272 * C1542;
    const double C70898 = C93853 * C1542;
    const double C11581 = C4077 * C1782;
    const double C13518 = C4076 * C1782;
    const double C32689 = C93590 * C1782;
    const double C57714 = C93590 * C1782;
    const double C61279 = C42378 * C1782;
    const double C63170 = C93842 * C1782;
    const double C223 = C212 + C213;
    const double C310 = C299 + C300;
    const double C4214 = C4199 + C4200;
    const double C9680 = C9665 + C9666;
    const double C42515 = C42500 + C42501;
    const double C59461 = C59446 + C59447;
    const double C2159 = C2149 + C2150;
    const double C5242 = C5220 + C5221;
    const double C6887 = C6876 + C6877;
    const double C12095 = C12080 + C12081;
    const double C17497 = C17482 + C17483;
    const double C43495 = C43473 + C43474;
    const double C50244 = C50229 + C50230;
    const double C61763 = C61748 + C61749;
    const double C2787 = C2777 + C2778;
    const double C7656 = C7641 + C7642;
    const double C11306 = C11284 + C11285;
    const double C13201 = C13190 + C13191;
    const double C32372 = C32357 + C32358;
    const double C45817 = C45802 + C45803;
    const double C57310 = C57303 + C57304;
    const double C61036 = C61014 + C61015;
    const double C8758 = C7771 * C4076;
    const double C19334 = C7771 * C93590;
    const double C46870 = C7771 * C93842;
    const double C52051 = C7771 * C93590;
    const double C55931 = C12098 + C12099;
    const double C55930 = C12099 + C12098;
    const double C26526 = C26524 * C93718;
    const double C36850 = C26524 * C28720;
    const double C84709 = C26524 * C93718;
    const double C89626 = C26524 * C93853;
    const double C27141 = C26211 * C14740;
    const double C37466 = C26211 * C93694;
    const double C85305 = C26211 * C93850;
    const double C90220 = C26211 * C93694;
    const double C25689 = C14741 * C9305;
    const double C28520 = C14740 * C9305;
    const double C38865 = C93694 * C9305;
    const double C59066 = C93694 * C9305;
    const double C83927 = C47572 * C9305;
    const double C86657 = C93850 * C9305;
    const double C16059 = C16056 + C16057;
    const double C20754 = C20743 + C20744;
    const double C24654 = C24647 + C24648;
    const double C48688 = C48673 + C48674;
    const double C82998 = C82995 + C82996;
    const double C38542 = C38533 + C8989;
    const double C19674 = C19672 + C19673;
    const double C23106 = C23096 + C23097;
    const double C24652 = C24643 + C24644;
    const double C25135 = C25113 + C25114;
    const double C27856 = C27845 + C27846;
    const double C28310 = C28303 + C28304;
    const double C35053 = C35045 + C35046;
    const double C38204 = C38189 + C38190;
    const double C52170 = C52155 + C52156;
    const double C58260 = C58253 + C58254;
    const double C65823 = C65815 + C65816;
    const double C83423 = C83401 + C83402;
    const double C86449 = C86446 + C86447;
    const double C30877 = C30874 + C30875;
    const double C35972 = C35969 + C35970;
    const double C36065 = C36058 + C36059;
    const double C72692 = C72689 + C72690;
    const double C88856 = C88853 + C88854;
    const double C28644 = C28640 + C28629;
    const double C14262 = C14261 * C4075;
    const double C33455 = C14261 * C93815;
    const double C42023 = C14261 * C93585;
    const double C63898 = C14261 * C93854;
    const double C75259 = C14261 * C47568;
    const double C35815 = C35811 + C35812;
    const double C33465 = C33464 * C93815;
    const double C42024 = C33464 * C93585;
    const double C75261 = C33464 * C47568;
    const double C35527 = C35525 + C35526;
    const double C7640 = C93694 * C3497;
    const double C11969 = C93680 * C3497;
    const double C45801 = C93694 * C3497;
    const double C92078 = C92077 + C92066;
    const double C820 =
        (2 * (2 * ae * C92127 * C92037 + C92012 * C92328) + C92331 + C92331 +
         C92012 *
             (C92328 + C92332 + C92332 +
              C92012 * (2 * ae * C92127 * C92061 + C92012 * C92127 * C92104))) /
        C91701;
    const double C900 = (C92137 + ae * C92140 + C92012 * C92148 + C92331 +
                         C92127 * (C92076 + C92127 * C92166)) /
                        C91701;
    const double C1024 = (C92218 + ae * C92140 + C92012 * C92223 + C92331 +
                          C92127 * (C92076 + C92127 * C92231)) /
                         C91701;
    const double C3571 = (C92331 + C92170 * C92127 * C92209) / C91701;
    const double C3855 = (C92331 + C92170 * C92127 * C92289) / C91701;
    const double C5785 = C4085 * C3415;
    const double C7539 = C4083 * C3415;
    const double C7639 = C4179 * C3415;
    const double C7761 = C275 * C3415;
    const double C8876 = C4077 * C3415;
    const double C11968 = C188 * C3415;
    const double C12078 = C9645 * C3415;
    const double C18143 = C91722 * C3415;
    const double C23548 = C20049 * C3415;
    const double C43979 = C42386 * C3415;
    const double C45800 = C42480 * C3415;
    const double C46979 = C42378 * C3415;
    const double C50890 = C47576 * C3415;
    const double C52785 = C47574 * C3415;
    const double C56066 = C93590 * C3415;
    const double C61746 = C59426 * C3415;
    const double C78842 = C93590 * C3415;
    const double C1401 =
        (2 * (2 * ae * C92170 * C92037 + C92012 * C92430) + C92433 + C92433 +
         C92012 *
             (C92430 + C92434 + C92434 +
              C92012 * (2 * ae * C92170 * C92061 + C92012 * C92170 * C92104))) /
        C91701;
    const double C1547 = (C92180 + ae * C92183 + C92012 * C92191 + C92433 +
                          C92170 * (C92076 + C92170 * C92209)) /
                         C91701;
    const double C1787 = (C92276 + ae * C92183 + C92012 * C92281 + C92433 +
                          C92170 * (C92076 + C92170 * C92289)) /
                         C91701;
    const double C3641 = (C92433 + C92127 * C92170 * C92231) / C91701;
    const double C5125 = C5111 + C5112;
    const double C5249 = C5234 + C5235;
    const double C17501 = C17490 + C17491;
    const double C43502 = C43487 + C43488;
    const double C50248 = C50237 + C50238;
    const double C11109 = C11095 + C11096;
    const double C11313 = C11298 + C11299;
    const double C32376 = C32365 + C32366;
    const double C61043 = C61028 + C61029;
    const double C74225 = C74218 + C74219;
    const double C31280 = C31268 + C31269;
    const double C57167 = C57159 + C57160;
    const double C68647 = C68639 + C68640;
    const double C73159 = C73147 + C73148;
    const double C33669 = C33666 + C33667;
    const double C36854 = C36852 + C36853;
    const double C55297 = C55287 + C55288;
    const double C17270 = C17258 + C17259;
    const double C50017 = C50005 + C50006;
    const double C18364 = C18360 + C18361;
    const double C26103 = C26098 + C26099;
    const double C65503 = C65483 + C65484;
    const double C19783 = C19775 + C19776;
    const double C26525 = C26522 + C26523;
    const double C52485 = C52477 + C52478;
    const double C15771 = C15766 * C93590;
    const double C21753 = C15766 * C93585;
    const double C48574 = C15766 * C93590;
    const double C22046 = C21836 * C275;
    const double C26521 = C26212 * C9645;
    const double C27142 = C26212 * C14840;
    const double C84712 = C26212 * C59426;
    const double C85306 = C26212 * C47671;
    const double C33355 = C33350 + C33351;
    const double C36550 = C36547 + C36548;
    const double C54947 = C54927 + C54928;
    const double C32251 = C32239 + C32240;
    const double C74112 = C74100 + C74101;
    const double C30330 = C30325 * C93590;
    const double C41190 = C30325 * C93585;
    const double C72285 = C30325 * C93590;
    const double C41333 = C41331 * C188;
    const double C1083 =
        (2 * C92012 * C92245 + C92012 * C92252 + C92396 + C92396 +
         C92127 * (2 * ae * C92167 +
                   C92127 * (2 * C92012 * C92250 +
                             C92012 * (C92250 +
                                       (C92084 * C92085 +
                                        C92235 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92016)))) /
        C91701;
    const double C3926 =
        (C92396 +
         C92170 * (ae * C92210 +
                   C92127 * (2 * C92012 * C92303 +
                             C92012 * (C92303 + std::pow(C92018, 7) * bs[7] *
                                                    C92294 * C92016)))) /
        C91701;
    const double C1092 = C188 * C893;
    const double C6999 = C4179 * C893;
    const double C15126 = C14840 * C893;
    const double C45160 = C42480 * C893;
    const double C47957 = C47671 * C893;
    const double C3717 = C188 * C3494;
    const double C7978 = C4179 * C3494;
    const double C46127 = C42480 * C3494;
    const double C1904 =
        (2 * C92012 * C92319 + C92012 * C92326 + C92530 + C92530 +
         C92170 * (2 * ae * C92210 +
                   C92170 * (2 * C92012 * C92324 +
                             C92012 * (C92324 +
                                       (C92084 * C92085 +
                                        C92309 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92016)))) /
        C91701;
    const double C3786 =
        (C92530 +
         C92127 * (ae * C92167 +
                   C92170 * (2 * C92012 * C92266 +
                             C92012 * (C92266 + std::pow(C92018, 7) * bs[7] *
                                                    C92257 * C92016)))) /
        C91701;
    const double C1913 = C275 * C1540;
    const double C13737 = C9645 * C1540;
    const double C29416 = C28878 * C1540;
    const double C63389 = C59426 * C1540;
    const double C71419 = C70881 * C1540;
    const double C92662 = ae * C92661;
    const double C5018 =
        (2 * C92391 + C92127 * C92661 + (C92063 + C92099 * C92235) * ae) /
        C91696;
    const double C8647 = (C92170 * C92661) / C91696;
    const double C92813 = ae * C92812;
    const double C11198 =
        (2 * C92525 + C92170 * C92812 + (C92063 + C92099 * C92309) * ae) /
        C91696;
    const double C16960 =
        (C92672 + ae * C92712 + C92127 * C92896 + ae * C92170 * C92870 +
         C92170 * (C92872 +
                   C92170 * (C92894 + ae * C92127 * C92883 +
                             C92127 * (ae * C92883 + C92127 * C92012 *
                                                         std::pow(C92018, 7) *
                                                         bs[7] * C92294)))) /
        C91701;
    const double C92873 = C92856 + C92871;
    const double C92950 = ae * C92948;
    const double C93216 = C93201 + C93214;
    const double C93240 = ae * C93239;
    const double C33242 =
        (2 * C92714 + C92170 * C93239 + (C92645 + C92858 * C92309) * ae) /
        C91696;
    const double C92119 = C92118 + C92102;
    const double C92351 = ae * C92349;
    const double C4902 = (2 * C92329 + C92127 * C92349) / C91696;
    const double C8525 = (C92170 * C92349) / C91696;
    const double C92453 = ae * C92451;
    const double C10969 = (2 * C92431 + C92170 * C92451) / C91696;
    const double C8650 =
        (C92170 *
         (C92166 + C92540 +
          C92127 * (C92117 + C92127 * (C92156 + ae * C92012 * C92158 +
                                       C92012 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92131))))) /
        C91701;
    const double C92582 = ae * C92580;
    const double C5796 = C4085 * C5780;
    const double C31065 = C91722 * C5780;
    const double C33952 = C20049 * C5780;
    const double C43990 = C42386 * C5780;
    const double C56888 = C47576 * C5780;
    const double C4905 =
        (2 * C92328 + C92127 * C92348 + C92622 + C92622 +
         C92012 * (2 * ae * (2 * C92532 + C92127 * (C92061 + C92097 * C92235)) +
                   C92012 * (2 * C92533 +
                             C92127 * (C92104 +
                                       (C92084 * C92085 +
                                        C92016 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92235)))) /
        C91701;
    const double C15669 =
        (3 * (C92148 + C92332 + C92127 * C92823) + C92622 +
         C92127 * (2 * C92823 + C92352 +
                   C92127 * (C92162 + C92541 +
                             C92127 * (C92110 +
                                       C92127 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92131))))) /
        C91701;
    const double C15850 =
        (3 * (C92223 + C92332 + C92127 * C92831) + C92622 +
         C92127 * (2 * C92831 + C92352 +
                   C92127 * (C92229 + C92541 +
                             C92127 * (C92110 +
                                       C92127 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92215))))) /
        C91701;
    const double C19326 =
        (C92622 + C92170 * (2 * C92127 * C92205 +
                            C92127 * (C92205 + (ae * C92201 +
                                                C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92174) *
                                                   C92235))) /
        C91701;
    const double C19773 =
        (C92622 + C92170 * (2 * C92127 * C92287 +
                            C92127 * (C92287 + (ae * C92201 +
                                                C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92273) *
                                                   C92235))) /
        C91701;
    const double C15572 = C91722 * C15553;
    const double C21603 = C20049 * C15553;
    const double C48397 = C47576 * C15553;
    const double C19111 = C91722 * C19098;
    const double C22256 = C20049 * C19098;
    const double C51838 = C47576 * C19098;
    const double C10972 =
        (2 * C92430 + C92170 * C92450 + C92762 + C92762 +
         C92012 * (2 * ae * (2 * C92553 + C92170 * (C92061 + C92097 * C92309)) +
                   C92012 * (2 * C92554 +
                             C92170 * (C92104 +
                                       (C92084 * C92085 +
                                        C92016 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92309)))) /
        C91701;
    const double C30411 =
        (3 * (C92191 + C92434 + C92170 * C93155) + C92762 +
         C92170 * (2 * C93155 + C92454 +
                   C92170 * (C92205 + C92562 +
                             C92170 * (C92110 +
                                       C92170 * (ae * C92201 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92174))))) /
        C91701;
    const double C30775 =
        (3 * (C92281 + C92434 + C92170 * C93173) + C92762 +
         C92170 * (2 * C93173 + C92454 +
                   C92170 * (C92287 + C92562 +
                             C92170 * (C92110 +
                                       C92170 * (ae * C92201 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92273))))) /
        C91701;
    const double C33342 =
        (C92762 + C92127 * (2 * C92939 +
                            C92170 * (C92229 + (ae * C92158 +
                                                C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92215) *
                                                   C92309))) /
        C91701;
    const double C30210 = C91722 * C30191;
    const double C41115 = C20049 * C30191;
    const double C72196 = C47576 * C30191;
    const double C93013 = C93012 + C93002;
    const double C93057 = ae * C93055;
    const double C25105 = (2 * C92942 + C92170 * C93055) / C91696;
    const double C25409 =
        (2 * C92941 + C92170 * C93054 + C93114 + C93114 +
         C92127 * (2 * ae * (2 * C93060 + C92170 * (C92145 + C92158 * C92309)) +
                   C92127 * (2 * C93082 +
                             C92170 * (C92250 +
                                       (C92084 * C92085 +
                                        C92235 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92309)))) /
        C91701;
    const double C36046 =
        (3 * (C92892 + C92945 + C92170 * C93264) + C93114 +
         C92170 * (2 * C93264 + C93058 +
                   C92170 * (C93038 + C93089 +
                             C92170 * (C93004 +
                                       C92170 * (ae * C92201 +
                                                 C92127 * std::pow(C92018, 7) *
                                                     bs[7] * C92294))))) /
        C91701;
    const double C35796 = C4179 * C35484;
    const double C42027 = C188 * C35484;
    const double C88620 = C42480 * C35484;
    const double C93347 = C93346 + C93329;
    const double C21528 =
        (2 * C92127 * C92319 + C92127 * C93043 + C93072 + C93072 +
         C92170 * (2 * ae * C93031 +
                   C92170 * (2 * C92127 * C92324 +
                             C92127 * (C92324 +
                                       (C92084 * C92085 +
                                        C92309 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92235)))) /
        C91701;
    const double C23246 =
        (3 * (C92954 + ae * (C92170 * C93020 + C92841) + C92127 * C93096) +
         C93072 +
         C92127 * (2 * C93096 + ae * (C92170 * C93026 + C93002) +
                   C92127 * (C93063 + ae * (C92170 * C92127 * C92201 + C92998) +
                             C92127 * (ae * (C92170 * C92201 + C92093) +
                                       C92127 * (ae * C92158 +
                                                 C92170 * std::pow(C92018, 7) *
                                                     bs[7] * C92257))))) /
        C91701;
    const double C21530 = C275 * C21213;
    const double C28633 = C9645 * C21213;
    const double C35303 = C28878 * C21213;
    const double C86766 = C59426 * C21213;
    const double C88193 = C70881 * C21213;
    const double C93142 = ae * C93141;
    const double C25219 =
        (2 * C92924 + C92170 * C93141 + (C92842 + C92999 * C92309) * ae) /
        C91696;
    const double C93285 = C93268 + C93283;
    const double C8307 = C8299 + C8300;
    const double C12624 = C12614 + C12615;
    const double C46450 = C46442 + C46443;
    const double C7004 = C7000 + C5329;
    const double C7110 = C5427 * C93694;
    const double C15225 = C5427 * C14741;
    const double C45271 = C5427 * C93694;
    const double C48056 = C5427 * C47572;
    const double C12304 = C12302 + C3716;
    const double C7983 = C7979 + C6111;
    const double C12616 = C11977 * C9645;
    const double C13952 = C11977 * C4085;
    const double C62273 = C11977 * C59426;
    const double C63602 = C11977 * C42386;
    const double C13306 = C3024 * C4077;
    const double C62958 = C3024 * C42378;
    const double C11419 = C11415 * C4077;
    const double C32480 = C11415 * C93590;
    const double C61123 = C11415 * C42378;
    const double C74329 = C11415 * C93590;
    const double C5326 =
        (2 * (2 * ae * C92140 + C92127 * C92643) + C92652 + C92652 +
         C92127 * (C92643 + C92649 + C92649 +
                   C92127 * (2 * C92155 + C92127 * C92012 * C92250))) /
        C91701;
    const double C9306 =
        (C92652 + C92170 * (C92672 + ae * C92712 +
                            C92127 * (C92198 + C92127 * C92012 * C92303))) /
        C91701;
    const double C5338 = C4179 * C5017;
    const double C15868 = C91722 * C5017;
    const double C15976 = C14839 * C5017;
    const double C15966 = C14840 * C5017;
    const double C16054 = C275 * C5017;
    const double C17265 = C14741 * C5017;
    const double C20275 = C20115 * C5017;
    const double C21830 = C20049 * C5017;
    const double C43588 = C42480 * C5017;
    const double C48671 = C47576 * C5017;
    const double C48767 = C47671 * C5017;
    const double C50012 = C47572 * C5017;
    const double C8991 = C4179 * C8646;
    const double C10581 = C188 * C8646;
    const double C16722 = C14840 * C8646;
    const double C18251 = C14741 * C8646;
    const double C18678 = C275 * C8646;
    const double C19442 = C91722 * C8646;
    const double C19570 = C14839 * C8646;
    const double C26208 = C20049 * C8646;
    const double C26412 = C9645 * C8646;
    const double C47091 = C42480 * C8646;
    const double C49479 = C47671 * C8646;
    const double C50998 = C47572 * C8646;
    const double C52153 = C47576 * C8646;
    const double C54063 = C42479 * C8646;
    const double C55792 = C93694 * C8646;
    const double C65707 = C4178 * C8646;
    const double C65811 = C59426 * C8646;
    const double C67304 = C93694 * C8646;
    const double C16733 = C14840 * C16488;
    const double C29806 = C188 * C16488;
    const double C36650 = C4179 * C16488;
    const double C49490 = C47671 * C16488;
    const double C58664 = C42480 * C16488;
    const double C37586 = C37584 + C37578;
    const double C31486 = C31485 + C31483;
    const double C25691 = C14741 * C16959;
    const double C38869 = C93694 * C16959;
    const double C83929 = C47572 * C16959;
    const double C91570 = C93694 * C16959;
    const double C92851 = C92850 + C92844;
    const double C19563 =
        (2 * (2 * ae * C92170 * C92138 + C92127 * C92941) + C92944 + C92944 +
         C92127 *
             (C92941 + C92945 + C92945 +
              C92127 * (2 * ae * C92170 * C92145 + C92127 * C92170 * C92250))) /
        C91701;
    const double C25142 = C25127 + C25128;
    const double C25321 = C25307 + C25308;
    const double C28309 = C28301 + C28302;
    const double C38544 = C38537 + C34957;
    const double C35052 = C35043 + C35044;
    const double C38208 = C38197 + C38198;
    const double C83430 = C83415 + C83416;
    const double C86448 = C86444 + C86445;
    const double C87942 = C87933 + C87934;
    const double C90923 = C90916 + C90917;
    const double C42029 = C42028 + C33460;
    const double C35701 = C35696 * C93694;
    const double C41956 = C35696 * C93680;
    const double C88533 = C35696 * C93694;
    const double C35807 = C35801 + C35790;
    const double C41817 = C41815 * C20049;
    const double C40230 = C40229 * C93585;
    const double C8099 = C8089 + C8090;
    const double C12414 = C12406 + C12407;
    const double C62072 = C62064 + C62065;
    const double C13622 = C11680 * C93718;
    const double C29310 = C11680 * C28721;
    const double C63274 = C11680 * C93718;
    const double C71313 = C11680 * C70728;
    const double C13742 = C13738 + C11760;
    const double C750 = C746 * C93680;
    const double C2627 = C2624 * C93680;
    const double C4821 = C2624 * C93694;
    const double C43122 = C2624 * C93694;
    const double C7433 = C5699 * C93694;
    const double C15474 = C5699 * C14741;
    const double C45594 = C5699 * C93694;
    const double C48305 = C5699 * C47572;
    const double C3341 = C3338 * C93680;
    const double C8421 = C8419 * C93694;
    const double C46552 = C8419 * C93694;
    const double C57985 = C57983 + C14661;
    const double C31798 = C31797 * C28721;
    const double C73664 = C31797 * C70728;
    const double C11757 =
        (2 * (2 * ae * C92183 + C92170 * C92676) + C92803 + C92803 +
         C92170 * (C92676 + C92800 + C92800 +
                   C92170 * (2 * C92198 + C92170 * C92012 * C92324))) /
        C91701;
    const double C11769 = C9645 * C11197;
    const double C30785 = C91722 * C11197;
    const double C30872 = C188 * C11197;
    const double C30964 = C28877 * C11197;
    const double C30954 = C28878 * C11197;
    const double C32246 = C28721 * C11197;
    const double C39457 = C39147 * C11197;
    const double C41536 = C20049 * C11197;
    const double C61449 = C59426 * C11197;
    const double C72687 = C47576 * C11197;
    const double C72841 = C70881 * C11197;
    const double C74107 = C70728 * C11197;
    const double C28411 = C25605 * C93718;
    const double C35135 = C25605 * C28721;
    const double C86548 = C25605 * C93718;
    const double C88025 = C25605 * C70728;
    const double C28638 = C28634 + C25778;
    const double C25775 =
        (2 * (2 * ae * C92707 + C92170 * C93123) + C93132 + C93132 +
         C92170 * (C93123 + C93129 + C93129 +
                   C92170 * (2 * C93023 + C92170 * C92127 * C92324))) /
        C91701;
    const double C25781 = C9645 * C25218;
    const double C33873 = C28878 * C25218;
    const double C35967 = C20049 * C25218;
    const double C36056 = C4179 * C25218;
    const double C36143 = C28877 * C25218;
    const double C38316 = C28721 * C25218;
    const double C39916 = C39147 * C25218;
    const double C42230 = C188 * C25218;
    const double C67036 = C59426 * C25218;
    const double C75657 = C70881 * C25218;
    const double C88851 = C42480 * C25218;
    const double C91031 = C70728 * C25218;
    const double C93196 = C93195 + C93192;
    const double C14763 = C91732 * C818;
    const double C14761 = C91732 * C813;
    const double C14759 = C91732 * C116;
    const double C14758 = C91732 * C115;
    const double C14756 = C91732 * C814;
    const double C14754 = C91732 * C817;
    const double C14751 = C91732 * C816;
    const double C14749 = C91732 * C815;
    const double C14747 = C91732 * C114;
    const double C15571 = C91732 * C15552;
    const double C15569 = C91732 * C4900;
    const double C15753 = C5130 * C91732;
    const double C15749 = C5123 * C91732;
    const double C15774 = C15769 * C91732;
    const double C15874 = C91732 * C4897;
    const double C15870 = C91732 * C5016;
    const double C15864 = C91732 * C890;
    const double C15860 = C91732 * C808;
    const double C15856 = C91732 * C889;
    const double C15852 = C91732 * C807;
    const double C16147 = C91732 * C5096;
    const double C16141 = C91732 * C956;
    const double C16136 = C91732 * C955;
    const double C16412 = C91732 * C16397;
    const double C16410 = C91732 * C5778;
    const double C16408 = C91732 * C1397;
    const double C16407 = C91732 * C1396;
    const double C16405 = C91732 * C3413;
    const double C16403 = C91732 * C8523;
    const double C17146 = C91732 * C4901;
    const double C17378 = C5128 * C91732;
    const double C17374 = C2162 * C91732;
    const double C17492 = C91732 * C891;
    const double C17488 = C91732 * C809;
    const double C17484 = C91732 * C888;
    const double C17480 = C91732 * C806;
    const double C17826 = C91732 * C957;
    const double C17822 = C91732 * C954;
    const double C18144 = C91732 * C8524;
    const double C18142 = C91732 * C3414;
    const double C18140 = C91732 * C1395;
    const double C19110 = C91732 * C19097;
    const double C19337 = C8765 * C91732;
    const double C19341 = C19339 * C91732;
    const double C19456 = C91732 * C3409;
    const double C19452 = C91732 * C3491;
    const double C19448 = C91732 * C8520;
    const double C19444 = C91732 * C8645;
    const double C19781 = C91732 * C3565;
    const double C19777 = C91732 * C8749;
    const double C28727 = C91732 * C1399;
    const double C28725 = C91732 * C1394;
    const double C28724 = C91732 * C1398;
    const double C30209 = C91732 * C30190;
    const double C30207 = C91732 * C10967;
    const double C30312 = C11114 * C91732;
    const double C30308 = C11107 * C91732;
    const double C30333 = C30328 * C91732;
    const double C30511 = C91732 * C10964;
    const double C30507 = C91732 * C11080;
    const double C30501 = C91732 * C1471;
    const double C30497 = C91732 * C1389;
    const double C30493 = C91732 * C1470;
    const double C30489 = C91732 * C1388;
    const double C30787 = C91732 * C11196;
    const double C30781 = C91732 * C1537;
    const double C30777 = C91732 * C1536;
    const double C31064 = C91732 * C5779;
    const double C32021 = C91732 * C10968;
    const double C32137 = C11112 * C91732;
    const double C32133 = C2790 * C91732;
    const double C32367 = C91732 * C1472;
    const double C32363 = C91732 * C1390;
    const double C32359 = C91732 * C1469;
    const double C32355 = C91732 * C1387;
    const double C32690 = C91732 * C1538;
    const double C32686 = C91732 * C1535;
    const double C33023 = C91732 * C25003;
    const double C33131 = C13954 * C91732;
    const double C33143 = C33141 * C91732;
    const double C33348 = C91732 * C5870;
    const double C33344 = C91732 * C5775;
    const double C33664 = C91732 * C5950;
    const double C75759 = C91732 * C3415;
    const double C78843 = C91732 * C3492;
    const double C78839 = C91732 * C3410;
    const double C79241 = C91732 * C3566;
    const double C101 =
        ((((0 - (C91697 * C91695) / C91696) * ae) / C91696 - (0 * be) / C91711 +
          C91698 / C91696) /
             C91702 -
         ((C91697 * C91725 + 0) * be) / C91696) /
            C91702 -
        ((C91697 * (C91725 / C91702 -
                    ((C91697 * C91732 + C93815) * be) / C91696 + C91722) +
          C93854) *
         be) /
            C91696 +
        C91732 / C91702 - ((C91697 * C91722 + C93590) * be) / C91696;
    const double C103 =
        (C91725 / C91702 - ((C91697 * C91732 + C93815) * be) / C91696 +
         C91722) /
            C91702 -
        ((C91697 *
              (C91732 / C91702 - ((C91697 * C91722 + C93590) * be) / C91696) +
          C93842) *
         be) /
            C91696 +
        2 * (C91722 / C91702 - (0 * be) / C91696);
    const double C105 =
        (C91732 / C91702 - ((C91697 * C91722 + C93590) * be) / C91696) /
            C91702 -
        ((C91697 * (C91722 / C91702 - (0 * be) / C91696) + C42378) * be) /
            C91696;
    const double C42382 =
        C91725 / C91702 - ((C91697 * C91732 + C93815) * be) / C91696 + C91722;
    const double C42384 =
        C91732 / C91702 - ((C91697 * C91722 + C93590) * be) / C91696;
    const double C91733 = C91720 - C91731;
    const double C4928 = C4913 + C4914;
    const double C4927 = C4911 + C4092;
    const double C10992 = C10980 + C5793;
    const double C10991 = C10978 + C5788;
    const double C15577 = C15565 + C15566;
    const double C15576 = C15563 + C14752;
    const double C15574 = C15559 + C14750;
    const double C17151 = C17144 + C14753;
    const double C17149 = C17140 + C14755;
    const double C19114 = C19106 + C16404;
    const double C19112 = C19102 + C16402;
    const double C30215 = C30203 + C30204;
    const double C30214 = C30201 + C16409;
    const double C30212 = C30197 + C16406;
    const double C32026 = C32019 + C28723;
    const double C32024 = C32015 + C18141;
    const double C33026 = C33021 + C16411;
    const double C20549 = C20542 + C20543;
    const double C20548 = C20540 + C20054;
    const double C20547 = C20538 + C20053;
    const double C20546 = C20536 + C20052;
    const double C21606 = C21601 + C20055;
    const double C21605 = C21599 + C20056;
    const double C21604 = C21597 + C20057;
    const double C22867 = C22862 + C21106;
    const double C22866 = C22860 + C21105;
    const double C22865 = C22858 + C21104;
    const double C25022 = C25014 + C21108;
    const double C25021 = C25012 + C21109;
    const double C25020 = C25010 + C21110;
    const double C25019 = C25008 + C21107;
    const double C25889 = C25886 + C22255;
    const double C25888 = C25883 + C22254;
    const double C26839 = C26834 + C22253;
    const double C35406 = C35401 + C25016;
    const double C35405 = C35399 + C25017;
    const double C36247 = C36245 + C26837;
    const double C37154 = C37150 + C26836;
    const double C39980 = C39977 + C35403;
    const double C41116 = C41113 + C37152;
    const double C43220 = C43205 + C43206;
    const double C43219 = C43203 + C42393;
    const double C60761 = C60749 + C43987;
    const double C60760 = C60747 + C43982;
    const double C48402 = C48390 + C48391;
    const double C48401 = C48388 + C47583;
    const double C48399 = C48384 + C47581;
    const double C49898 = C49891 + C47584;
    const double C49896 = C49887 + C47586;
    const double C51841 = C51833 + C49173;
    const double C51839 = C51829 + C49171;
    const double C54575 = C54563 + C49178;
    const double C54573 = C54559 + C49180;
    const double C54572 = C54557 + C49175;
    const double C56890 = C56883 + C50888;
    const double C72197 = C72191 + C54568;
    const double C73891 = C73886 + C56886;
    const double C48579 = C48578 + C48572;
    const double C48692 = C48685 + C48686;
    const double C48691 = C48683 + C48684;
    const double C48946 = C48942 + C48943;
    const double C58526 = C52175 + C52176;
    const double C58523 = C52176 + C52175;
    const double C58525 = C52173 + C52174;
    const double C58524 = C52174 + C52173;
    const double C58932 = C52487 + C52488;
    const double C58931 = C52488 + C52487;
    const double C72440 = C54954 + C54953;
    const double C72441 = C54952 + C54951;
    const double C72686 = C55300 + C55299;
    const double C72290 = C72289 + C72283;
    const double C24744 = C24743 + C24737;
    const double C35705 = C35700 + C35686;
    const double C91871 = C91870 - C91868;
    const double C15118 = C15100 * C805;
    const double C15109 = C15100 * C806;
    const double C17604 = C15100 * C809;
    const double C18564 = C15100 * C3410;
    const double C25419 = C15100 * C5775;
    const double C25413 = C15100 * C3409;
    const double C28187 = C15100 * C8520;
    const double C15132 = C15121 + C15122;
    const double C15127 = C15106 + C15107;
    const double C17613 = C17606 + C15968;
    const double C18573 = C18566 + C16724;
    const double C25431 = C25421 + C16728;
    const double C25426 = C25411 + C16727;
    const double C28194 = C28185 + C19566;
    const double C15130 = C15115 + C15116;
    const double C15129 = C15112 + C15113;
    const double C25429 = C25417 + C16730;
    const double C25428 = C25415 + C16725;
    const double C42770 = C42758 + C42759;
    const double C42769 = C42755 + C42756;
    const double C42767 = C42749 + C42750;
    const double C45163 = C45155 + C43581;
    const double C45161 = C45151 + C43579;
    const double C46130 = C46122 + C44289;
    const double C46128 = C46118 + C44287;
    const double C55073 = C55061 + C44294;
    const double C55071 = C55057 + C44296;
    const double C55070 = C55055 + C44291;
    const double C58666 = C58659 + C47089;
    const double C88622 = C88615 + C55066;
    const double C91253 = C91248 + C58662;
    const double C47961 = C47946 + C47947;
    const double C47960 = C47943 + C47944;
    const double C83685 = C83673 + C49487;
    const double C83684 = C83671 + C49482;
    const double C20112 =
        ((((0 - (C91760 * C91840) / C91696) * ae) / C91696 - (0 * be) / C91711 +
          C91813 / C91696) /
             C91702 -
         ((C91760 * C91855 + 0) * be) / C91696) /
            C91702 -
        ((C91760 * (C91855 / C91702 -
                    ((C91760 * C91851 + C93828) * be) / C91696 + C91852) +
          C93855) *
         be) /
            C91696 +
        C91851 / C91702 - ((C91760 * C91852 + C93694) * be) / C91696;
    const double C20113 =
        (C91855 / C91702 - ((C91760 * C91851 + C93828) * be) / C91696 +
         C91852) /
            C91702 -
        ((C91760 *
              (C91851 / C91702 - ((C91760 * C91852 + C93694) * be) / C91696) +
          C93850) *
         be) /
            C91696 +
        2 * (C91852 / C91702 - (0 * be) / C91696);
    const double C20114 =
        (C91851 / C91702 - ((C91760 * C91852 + C93694) * be) / C91696) /
            C91702 -
        ((C91760 * (C91852 / C91702 - (0 * be) / C91696) + C47572) * be) /
            C91696;
    const double C47669 =
        C91855 / C91702 - ((C91760 * C91851 + C93828) * be) / C91696 + C91852;
    const double C47670 =
        C91851 / C91702 - ((C91760 * C91852 + C93694) * be) / C91696;
    const double C42518 = C42510 + C42511;
    const double C42872 = C42871 + C42865;
    const double C43041 = C43037 + C43038;
    const double C57028 = C45822 + C45823;
    const double C57025 = C45823 + C45822;
    const double C57027 = C45820 + C45821;
    const double C57026 = C45821 + C45820;
    const double C57848 = C46452 + C46453;
    const double C57847 = C46453 + C46452;
    const double C88360 = C54722 + C54721;
    const double C88361 = C54720 + C54719;
    const double C88850 = C55416 + C55415;
    const double C88538 = C88537 + C88531;
    const double C91937 = C91936 - C91934;
    const double C29408 = C29390 * C1386;
    const double C29399 = C29390 * C1387;
    const double C31899 = C29390 * C3410;
    const double C32902 = C29390 * C1390;
    const double C35297 = C29390 * C8520;
    const double C35291 = C29390 * C3409;
    const double C38974 = C29390 * C5775;
    const double C29422 = C29411 + C29412;
    const double C29417 = C29396 + C29397;
    const double C31908 = C31901 + C30105;
    const double C32911 = C32904 + C30956;
    const double C35309 = C35299 + C30109;
    const double C35304 = C35289 + C30108;
    const double C38983 = C38976 + C33871;
    const double C29420 = C29405 + C29406;
    const double C29419 = C29402 + C29403;
    const double C31906 = C31897 + C30103;
    const double C35307 = C35295 + C30111;
    const double C35306 = C35293 + C30106;
    const double C59975 = C59963 + C59964;
    const double C59974 = C59960 + C59961;
    const double C59972 = C59954 + C59955;
    const double C62390 = C62382 + C60659;
    const double C62388 = C62378 + C60657;
    const double C63392 = C63384 + C61442;
    const double C63390 = C63380 + C61440;
    const double C66139 = C66127 + C60664;
    const double C66137 = C66123 + C60666;
    const double C66136 = C66121 + C60661;
    const double C69445 = C69441 + C64296;
    const double C70647 = C70639 + C64294;
    const double C83243 = C83237 + C66132;
    const double C86767 = C86761 + C70644;
    const double C71423 = C71408 + C71409;
    const double C71422 = C71405 + C71406;
    const double C73777 = C73768 + C72104;
    const double C88197 = C88185 + C72112;
    const double C88196 = C88183 + C72107;
    const double C39144 =
        ((((0 - (C91763 * C91906) / C91696) * ae) / C91696 - (0 * be) / C91711 +
          C91883 / C91696) /
             C91702 -
         ((C91763 * C91921 + 0) * be) / C91696) /
            C91702 -
        ((C91763 * (C91921 / C91702 -
                    ((C91763 * C91917 + C93829) * be) / C91696 + C91918) +
          C93856) *
         be) /
            C91696 +
        C91917 / C91702 - ((C91763 * C91918 + C93718) * be) / C91696;
    const double C39145 =
        (C91921 / C91702 - ((C91763 * C91917 + C93829) * be) / C91696 +
         C91918) /
            C91702 -
        ((C91763 *
              (C91917 / C91702 - ((C91763 * C91918 + C93718) * be) / C91696) +
          C93853) *
         be) /
            C91696 +
        2 * (C91918 / C91702 - (0 * be) / C91696);
    const double C39146 =
        (C91917 / C91702 - ((C91763 * C91918 + C93718) * be) / C91696) /
            C91702 -
        ((C91763 * (C91918 / C91702 - (0 * be) / C91696) + C70728) * be) /
            C91696;
    const double C70879 =
        C91921 / C91702 - ((C91763 * C91917 + C93829) * be) / C91696 + C91918;
    const double C70880 =
        C91917 / C91702 - ((C91763 * C91918 + C93718) * be) / C91696;
    const double C59464 = C59456 + C59457;
    const double C59707 = C59703 + C59704;
    const double C59871 = C59870 + C59864;
    const double C67444 = C61768 + C61769;
    const double C67441 = C61769 + C61768;
    const double C67443 = C61766 + C61767;
    const double C67442 = C61767 + C61766;
    const double C67846 = C62074 + C62075;
    const double C67845 = C62075 + C62074;
    const double C82750 = C65510 + C65509;
    const double C82751 = C65508 + C65507;
    const double C83086 = C83085 + C83079;
    const double C14254 = C12307 * C4076;
    const double C33456 = C12307 * C93590;
    const double C63899 = C12307 * C93842;
    const double C75260 = C12307 * C93590;
    const double C68912 = C7989 + C7990;
    const double C68911 = C7990 + C7989;
    const double C2073 = C2063 + C2064;
    const double C4212 = C4195 + C4196;
    const double C6665 = C6650 + C6651;
    const double C14873 = C14856 + C14857;
    const double C42513 = C42496 + C42497;
    const double C44826 = C44811 + C44812;
    const double C5245 = C5226 + C5227;
    const double C6890 = C6882 + C6883;
    const double C17499 = C17486 + C17487;
    const double C43498 = C43479 + C43480;
    const double C50246 = C50233 + C50234;
    const double C2873 = C2863 + C2864;
    const double C9678 = C9661 + C9662;
    const double C13083 = C13068 + C13069;
    const double C28911 = C28894 + C28895;
    const double C59459 = C59442 + C59443;
    const double C62735 = C62720 + C62721;
    const double C11590 = C11580 + C11581;
    const double C13522 = C13517 + C13518;
    const double C32695 = C32688 + C32689;
    const double C57716 = C57713 + C57714;
    const double C61288 = C61278 + C61279;
    const double C5110 = C2159 * C4077;
    const double C6773 = C2159 * C4076;
    const double C17377 = C2159 * C93590;
    const double C43388 = C2159 * C42378;
    const double C44934 = C2159 * C93842;
    const double C50124 = C2159 * C93590;
    const double C11094 = C2787 * C4077;
    const double C12965 = C2787 * C4076;
    const double C32136 = C2787 * C93590;
    const double C60855 = C2787 * C42378;
    const double C62617 = C2787 * C93842;
    const double C73997 = C2787 * C93590;
    const double C25698 = C25688 + C25689;
    const double C28524 = C28519 + C28520;
    const double C38871 = C38864 + C38865;
    const double C59068 = C59065 + C59066;
    const double C83936 = C83926 + C83927;
    const double C38546 = C38542 + C8989;
    const double C25306 = C23106 * C14741;
    const double C28084 = C23106 * C14740;
    const double C38428 = C23106 * C93694;
    const double C83586 = C23106 * C47572;
    const double C86227 = C23106 * C93850;
    const double C91143 = C23106 * C93694;
    const double C24655 = C24651 + C24652;
    const double C82992 = C65824 + C65823;
    const double C35816 = C35815 * C93585;
    const double C92079 = ae * C92078;
    const double C118 =
        (3 * C92046 + C92012 * C92078 + (2 * C92035 + C92012 * C92063) * ae) /
        C91696;
    const double C812 = (C92127 * C92078) / C91696;
    const double C1393 = (C92170 * C92078) / C91696;
    const double C6537 = C4077 * C820;
    const double C44698 = C42378 * C820;
    const double C6649 = C93694 * C900;
    const double C14855 = C14741 * C900;
    const double C44810 = C93694 * C900;
    const double C47686 = C47572 * C900;
    const double C5229 = C4077 * C1024;
    const double C17495 = C93590 * C1024;
    const double C43482 = C42378 * C1024;
    const double C50242 = C93590 * C1024;
    const double C7762 = C93706 * C3571;
    const double C12079 = C93718 * C3571;
    const double C61747 = C93718 * C3571;
    const double C9200 = C4077 * C3855;
    const double C47291 = C42378 * C3855;
    const double C56480 = C93590 * C3855;
    const double C79244 = C93590 * C3855;
    const double C8539 = C8530 + C5785;
    const double C7655 = C7639 + C7640;
    const double C8884 = C8875 + C8876;
    const double C11976 = C11968 + C11969;
    const double C78444 = C78441 + C18143;
    const double C46663 = C46654 + C43979;
    const double C45816 = C45800 + C45801;
    const double C46987 = C46978 + C46979;
    const double C55652 = C55649 + C50890;
    const double C56072 = C56065 + C56066;
    const double C78848 = C78841 + C78842;
    const double C12851 = C4077 * C1401;
    const double C62503 = C42378 * C1401;
    const double C13067 = C93718 * C1547;
    const double C28893 = C28721 * C1547;
    const double C62719 = C93718 * C1547;
    const double C70896 = C70728 * C1547;
    const double C11583 = C4077 * C1787;
    const double C32693 = C93590 * C1787;
    const double C61281 = C42378 * C1787;
    const double C74538 = C93590 * C1787;
    const double C8870 = C4077 * C3641;
    const double C46973 = C42378 * C3641;
    const double C56070 = C93590 * C3641;
    const double C78846 = C93590 * C3641;
    const double C5133 = C5125 * C4077;
    const double C17381 = C5125 * C93590;
    const double C43389 = C5125 * C42378;
    const double C50128 = C5125 * C93590;
    const double C11117 = C11109 * C4077;
    const double C32140 = C11109 * C93590;
    const double C60856 = C11109 * C42378;
    const double C74001 = C11109 * C93590;
    const double C36855 = C36854 * C28721;
    const double C89628 = C36854 * C70728;
    const double C19328 = C18364 * C93590;
    const double C52047 = C18364 * C93590;
    const double C26527 = C26525 * C93718;
    const double C84713 = C26525 * C93718;
    const double C37472 = C36550 * C93694;
    const double C90224 = C36550 * C93694;
    const double C5327 =
        (2 * (2 * ae * C92149 + C92127 * C92252) + C92662 + C92662 +
         C92127 * (C92252 + C92659 + C92659 +
                   C92127 * (2 * ae * C92163 +
                             C92127 * (C92250 +
                                       (C92084 * C92085 +
                                        C92235 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92016)))) /
        C91701;
    const double C9307 =
        (C92662 +
         C92170 * (C92305 + ae * C92717 +
                   C92127 * (ae * C92206 +
                             C92127 * (C92303 + std::pow(C92018, 7) * bs[7] *
                                                    C92294 * C92016)))) /
        C91701;
    const double C5340 = C4179 * C5018;
    const double C17610 = C14840 * C5018;
    const double C20282 = C20115 * C5018;
    const double C43590 = C42480 * C5018;
    const double C50357 = C47671 * C5018;
    const double C8993 = C4179 * C8647;
    const double C10582 = C188 * C8647;
    const double C18570 = C14840 * C8647;
    const double C47093 = C42480 * C8647;
    const double C51311 = C47671 * C8647;
    const double C11758 =
        (2 * (2 * ae * C92192 + C92170 * C92326) + C92813 + C92813 +
         C92170 * (C92326 + C92810 + C92810 +
                   C92170 * (2 * ae * C92206 +
                             C92170 * (C92324 +
                                       (C92084 * C92085 +
                                        C92309 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92016)))) /
        C91701;
    const double C11771 = C9645 * C11198;
    const double C32908 = C28878 * C11198;
    const double C39464 = C39147 * C11198;
    const double C61451 = C59426 * C11198;
    const double C74751 = C70881 * C11198;
    const double C92874 = C92873 + C92866;
    const double C19564 =
        (2 * (2 * ae * C92170 * C92151 + C92127 * C92947) + C92950 + C92950 +
         C92127 * (C92947 + C92951 + C92951 +
                   C92127 * (2 * ae * C92170 * C92857 +
                             C92127 * C92170 * C92012 *
                                 (C92084 * C92085 +
                                  C92235 * bs[7] * std::pow(C92018, 7)) *
                                 C92019))) /
        C91701;
    const double C93217 = C93216 + C93210;
    const double C33869 =
        (2 * (2 * ae * C92712 + C92170 * C93230) + C93240 + C93240 +
         C92170 * (C93230 + C93237 + C93237 +
                   C92170 * (2 * ae * C93231 +
                             C92170 * C92127 * C92012 *
                                 (C92084 * C92085 +
                                  C92309 * bs[7] * std::pow(C92018, 7)) *
                                 C92019))) /
        C91701;
    const double C33876 = C28878 * C33242;
    const double C41046 = C39147 * C33242;
    const double C55516 = C9645 * C33242;
    const double C67038 = C59426 * C33242;
    const double C75660 = C70881 * C33242;
    const double C92121 = ae * C92119;
    const double C92120 = C92012 * C92119;
    const double C92534 = C92127 * C92119;
    const double C92555 = C92170 * C92119;
    const double C819 = (C92078 + C92119 * C92235) / C91696;
    const double C1400 = (C92078 + C92119 * C92309) / C91696;
    const double C827 =
        (2 * (2 * ae * (C92037 + C92061 * C92235) + C92012 * C92348) + C92351 +
         C92351 +
         C92012 * (C92348 + C92352 + C92352 +
                   C92012 * (2 * ae * (C92061 + C92097 * C92235) +
                             C92012 * (C92104 +
                                       (C92084 * C92085 +
                                        C92016 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92235)))) /
        C91701;
    const double C5021 =
        (2 * (C92076 + C92127 * C92166) + C92351 +
         C92127 * (C92166 + C92540 +
                   C92127 * (C92117 +
                             C92127 * (C92156 + ae * C92012 * C92158 +
                                       C92012 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92131))))) /
        C91701;
    const double C5214 =
        (2 * (C92076 + C92127 * C92231) + C92351 +
         C92127 * (C92231 + C92540 +
                   C92127 * (C92117 +
                             C92127 * (C92227 + ae * C92012 * C92158 +
                                       C92012 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92215))))) /
        C91701;
    const double C8754 =
        (C92351 + C92170 * (C92209 + (C92199 + ae * C92012 * C92201 +
                                      C92012 * (ae * C92201 +
                                                C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92174)) *
                                         C92235)) /
        C91701;
    const double C9197 =
        (C92351 + C92170 * (C92289 + (C92285 + ae * C92012 * C92201 +
                                      C92012 * (ae * C92201 +
                                                C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92273)) *
                                         C92235)) /
        C91701;
    const double C4924 = C4085 * C4902;
    const double C17147 = C91722 * C4902;
    const double C20062 = C20049 * C4902;
    const double C43216 = C42386 * C4902;
    const double C49894 = C47576 * C4902;
    const double C8538 = C4085 * C8525;
    const double C18145 = C91722 * C8525;
    const double C23549 = C20049 * C8525;
    const double C46662 = C42386 * C8525;
    const double C50892 = C47576 * C8525;
    const double C1408 =
        (2 * (2 * ae * (C92037 + C92061 * C92309) + C92012 * C92450) + C92453 +
         C92453 +
         C92012 * (C92450 + C92454 + C92454 +
                   C92012 * (2 * ae * (C92061 + C92097 * C92309) +
                             C92012 * (C92104 +
                                       (C92084 * C92085 +
                                        C92016 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92309)))) /
        C91701;
    const double C6032 =
        (C92453 + C92127 * (C92231 + (C92227 + ae * C92012 * C92158 +
                                      C92012 * (ae * C92158 +
                                                C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92215)) *
                                         C92309)) /
        C91701;
    const double C11201 =
        (2 * (C92076 + C92170 * C92209) + C92453 +
         C92170 * (C92209 + C92561 +
                   C92170 * (C92117 +
                             C92170 * (C92199 + ae * C92012 * C92201 +
                                       C92012 * (ae * C92201 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92174))))) /
        C91701;
    const double C11574 =
        (2 * (C92076 + C92170 * C92289) + C92453 +
         C92170 * (C92289 + C92561 +
                   C92170 * (C92117 +
                             C92170 * (C92285 + ae * C92012 * C92201 +
                                       C92012 * (ae * C92201 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92273))))) /
        C91701;
    const double C10988 = C4085 * C10969;
    const double C32022 = C91722 * C10969;
    const double C39044 = C20049 * C10969;
    const double C60757 = C42386 * C10969;
    const double C73889 = C47576 * C10969;
    const double C3420 =
        (2 * (2 * ae * C92170 * C92532 + C92012 * C92579) + C92582 + C92582 +
         C92012 * (C92579 + C92583 + C92583 +
                   C92012 * (2 * ae * C92170 * C92127 * C92097 +
                             C92012 * C92170 * C92127 *
                                 (C92084 * C92085 +
                                  C92016 * bs[7] * std::pow(C92018, 7)) *
                                 C92019))) /
        C91701;
    const double C5955 =
        (C92127 * C92209 + C92582 +
         C92170 * (C92540 +
                   C92170 * C92127 *
                       (C92199 + ae * C92012 * C92201 +
                        C92012 * (ae * C92201 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92174)))) /
        C91701;
    const double C6275 =
        (C92127 * C92289 + C92582 +
         C92170 * (C92540 +
                   C92170 * C92127 *
                       (C92285 + ae * C92012 * C92201 +
                        C92012 * (ae * C92201 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92273)))) /
        C91701;
    const double C8867 =
        (C92170 * C92231 + C92582 +
         C92127 * (C92561 +
                   C92127 * C92170 *
                       (C92227 + ae * C92012 * C92158 +
                        C92012 * (ae * C92158 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92215)))) /
        C91701;
    const double C93015 = ae * C93013;
    const double C93014 = C92127 * C93013;
    const double C93083 = C92170 * C93013;
    const double C21316 =
        (2 * (2 * ae * (C92138 + C92145 * C92309) + C92127 * C93054) + C93057 +
         C93057 +
         C92127 * (C93054 + C93058 + C93058 +
                   C92127 * (2 * ae * (C92145 + C92158 * C92309) +
                             C92127 * (C92250 +
                                       (C92084 * C92085 +
                                        C92235 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92309)))) /
        C91701;
    const double C25682 =
        (2 * (C92849 + C92170 * C93040) + C93057 +
         C92170 * (C93040 + C93088 +
                   C92170 * (C93011 +
                             C92170 * (C92303 + ae * C92127 * C92201 +
                                       C92127 * (ae * C92201 +
                                                 C92127 * std::pow(C92018, 7) *
                                                     bs[7] * C92294))))) /
        C91701;
    const double C25425 = C14840 * C25105;
    const double C38540 = C4179 * C25105;
    const double C39715 = C188 * C25105;
    const double C83681 = C47671 * C25105;
    const double C91251 = C42480 * C25105;
    const double C93349 = ae * C93347;
    const double C93348 = C92170 * C93347;
    const double C25776 =
        (2 * (2 * ae * C92880 + C92170 * C93043) + C93142 + C93142 +
         C92170 * (C93043 + C93139 + C93139 +
                   C92170 * (2 * ae * C93026 +
                             C92170 * (C92324 +
                                       (C92084 * C92085 +
                                        C92309 * bs[7] * std::pow(C92018, 7)) *
                                           C92019 * C92235)))) /
        C91701;
    const double C25783 = C9645 * C25219;
    const double C38980 = C28878 * C25219;
    const double C39923 = C39147 * C25219;
    const double C84015 = C59426 * C25219;
    const double C91679 = C70881 * C25219;
    const double C93286 = C93285 + C93278;
    const double C12626 = C12624 * C93718;
    const double C62272 = C12624 * C93718;
    const double C7008 = C7004 + C6991;
    const double C12306 = C12304 + C12299;
    const double C7987 = C7983 + C7970;
    const double C17603 = C14741 * C5326;
    const double C50350 = C47572 * C5326;
    const double C18884 = C14741 * C9306;
    const double C51622 = C47572 * C9306;
    const double C56614 = C93694 * C9306;
    const double C68108 = C93694 * C9306;
    const double C15884 = C15868 + C15869;
    const double C17611 = C17602 + C15966;
    const double C16058 = C16054 + C16055;
    const double C17273 = C17264 + C17265;
    const double C21837 = C21830 + C21831;
    const double C48687 = C48671 + C48672;
    const double C50358 = C50349 + C48767;
    const double C50020 = C50011 + C50012;
    const double C67709 = C67705 + C8991;
    const double C18571 = C18562 + C16722;
    const double C18259 = C18250 + C18251;
    const double C18685 = C18678 + C18679;
    const double C19458 = C19442 + C19443;
    const double C26213 = C26208 + C26209;
    const double C26415 = C26412 + C26413;
    const double C56209 = C56205 + C47091;
    const double C51312 = C51303 + C49479;
    const double C51006 = C50997 + C50998;
    const double C52169 = C52153 + C52154;
    const double C55797 = C55791 + C55792;
    const double C65821 = C65811 + C65812;
    const double C67309 = C67303 + C67304;
    const double C33459 = C31486 * C93590;
    const double C75262 = C31486 * C93590;
    const double C25699 = C25690 + C25691;
    const double C38873 = C38868 + C38869;
    const double C83937 = C83928 + C83929;
    const double C91572 = C91569 + C91570;
    const double C92852 = ae * C92851;
    const double C15666 =
        (3 * C92640 + C92127 * C92851 + (2 * C92634 + C92127 * C92842) * ae) /
        C91696;
    const double C19221 = (C92170 * C92851) / C91696;
    const double C21161 = (C92851 + C93013 * C92309) / C91696;
    const double C28190 = C14741 * C19563;
    const double C86333 = C47572 * C19563;
    const double C25329 = C25321 * C14741;
    const double C38432 = C25321 * C93694;
    const double C83587 = C25321 * C47572;
    const double C91147 = C25321 * C93694;
    const double C38548 = C38544 + C34957;
    const double C42030 = C42029 + C42026;
    const double C35813 = C35807 + C35791;
    const double C8101 = C8099 * C93694;
    const double C46238 = C8099 * C93694;
    const double C13746 = C13742 + C13729;
    const double C57987 = C57985 + C57980;
    const double C32901 = C28721 * C11757;
    const double C74744 = C70728 * C11757;
    const double C30793 = C30785 + C30786;
    const double C30876 = C30872 + C30873;
    const double C32909 = C32900 + C30954;
    const double C32254 = C32245 + C32246;
    const double C41538 = C41536 + C41537;
    const double C72691 = C72687 + C72688;
    const double C74752 = C74743 + C72841;
    const double C74115 = C74106 + C74107;
    const double C28642 = C28638 + C28625;
    const double C38973 = C28721 * C25775;
    const double C91672 = C70728 * C25775;
    const double C38981 = C38972 + C33873;
    const double C35971 = C35967 + C35968;
    const double C36064 = C36056 + C36057;
    const double C38324 = C38315 + C38316;
    const double C42232 = C42230 + C42231;
    const double C91680 = C91671 + C75657;
    const double C88855 = C88851 + C88852;
    const double C91039 = C91030 + C91031;
    const double C93197 = ae * C93196;
    const double C30408 =
        (3 * C92792 + C92170 * C93196 + (2 * C92786 + C92170 * C93190) * ae) /
        C91696;
    const double C15765 = C15753 + C15754;
    const double C15887 = C15874 + C15875;
    const double C15885 = C15870 + C15871;
    const double C15882 = C15864 + C15865;
    const double C15880 = C15860 + C15861;
    const double C15878 = C15856 + C15857;
    const double C15876 = C15852 + C15853;
    const double C16154 = C16147 + C16148;
    const double C16151 = C16141 + C16142;
    const double C16149 = C16136 + C16137;
    const double C17502 = C17492 + C17493;
    const double C17500 = C17488 + C17489;
    const double C17498 = C17484 + C17485;
    const double C17496 = C17480 + C17481;
    const double C17832 = C17826 + C17827;
    const double C17830 = C17822 + C17823;
    const double C19465 = C19456 + C19457;
    const double C19463 = C19452 + C19453;
    const double C19461 = C19448 + C19449;
    const double C19459 = C19444 + C19445;
    const double C19786 = C19781 + C19782;
    const double C19784 = C19777 + C19778;
    const double C30324 = C30312 + C30313;
    const double C30524 = C30511 + C30512;
    const double C30522 = C30507 + C30508;
    const double C30519 = C30501 + C30502;
    const double C30517 = C30497 + C30498;
    const double C30515 = C30493 + C30494;
    const double C30513 = C30489 + C30490;
    const double C30794 = C30787 + C30788;
    const double C30791 = C30781 + C30782;
    const double C30789 = C30777 + C30778;
    const double C32377 = C32367 + C32368;
    const double C32375 = C32363 + C32364;
    const double C32373 = C32359 + C32360;
    const double C32371 = C32355 + C32356;
    const double C32696 = C32690 + C32691;
    const double C32694 = C32686 + C32687;
    const double C33354 = C33348 + C33349;
    const double C33352 = C33344 + C33345;
    const double C33668 = C33664 + C33665;
    const double C78849 = C78843 + C78844;
    const double C78847 = C78839 + C78840;
    const double C79245 = C79241 + C79242;
    const double C135 = C101 * C116;
    const double C134 = C101 * C115;
    const double C127 = C101 * C114;
    const double C833 = C101 * C816;
    const double C832 = C101 * C815;
    const double C1414 = C101 * C1397;
    const double C1413 = C101 * C1396;
    const double C1987 = C101 * C814;
    const double C2701 = C101 * C1395;
    const double C3422 = C101 * C3413;
    const double C136 = C103 * C117;
    const double C133 = C103 * C116;
    const double C128 = C103 * C115;
    const double C834 = C103 * C817;
    const double C831 = C103 * C814;
    const double C1415 = C103 * C1398;
    const double C1412 = C103 * C1395;
    const double C1988 = C103 * C813;
    const double C2702 = C103 * C1394;
    const double C3423 = C103 * C3414;
    const double C132 = C105 * C117;
    const double C129 = C105 * C116;
    const double C835 = C105 * C818;
    const double C830 = C105 * C813;
    const double C1416 = C105 * C1399;
    const double C1411 = C105 * C1394;
    const double C3424 = C105 * C3415;
    const double C42403 = C42382 * C813;
    const double C42400 = C42382 * C116;
    const double C42399 = C42382 * C115;
    const double C42396 = C42382 * C814;
    const double C42391 = C42382 * C815;
    const double C42388 = C42382 * C114;
    const double C43214 = C42382 * C4900;
    const double C43212 = C42382 * C816;
    const double C43394 = C5130 * C42382;
    const double C43383 = C5123 * C42382;
    const double C43491 = C42382 * C808;
    const double C43485 = C42382 * C890;
    const double C43475 = C42382 * C889;
    const double C43469 = C42382 * C807;
    const double C43749 = C42382 * C956;
    const double C43739 = C42382 * C955;
    const double C43988 = C42382 * C5778;
    const double C43985 = C42382 * C1397;
    const double C43984 = C42382 * C1396;
    const double C43981 = C42382 * C3413;
    const double C44699 = C42382 * C817;
    const double C44931 = C2162 * C42382;
    const double C45041 = C42382 * C888;
    const double C45035 = C42382 * C806;
    const double C45377 = C42382 * C954;
    const double C45699 = C42382 * C3414;
    const double C45696 = C42382 * C1395;
    const double C46660 = C42382 * C8523;
    const double C46873 = C8765 * C42382;
    const double C46982 = C42382 * C3409;
    const double C46976 = C42382 * C3491;
    const double C47294 = C42382 * C3565;
    const double C59275 = C42382 * C1394;
    const double C60755 = C42382 * C10967;
    const double C60861 = C11114 * C42382;
    const double C60850 = C11107 * C42382;
    const double C61032 = C42382 * C1389;
    const double C61026 = C42382 * C1471;
    const double C61016 = C42382 * C1470;
    const double C61010 = C42382 * C1388;
    const double C61284 = C42382 * C1537;
    const double C61274 = C42382 * C1536;
    const double C62504 = C42382 * C1398;
    const double C62614 = C2790 * C42382;
    const double C62846 = C42382 * C1469;
    const double C62840 = C42382 * C1387;
    const double C63167 = C42382 * C1535;
    const double C63598 = C13954 * C42382;
    const double C42401 = C42384 * C117;
    const double C42398 = C42384 * C116;
    const double C42395 = C42384 * C813;
    const double C42392 = C42384 * C814;
    const double C42389 = C42384 * C115;
    const double C43215 = C42384 * C4901;
    const double C43209 = C42384 * C817;
    const double C43392 = C5128 * C42384;
    const double C43385 = C2162 * C42384;
    const double C43489 = C42384 * C809;
    const double C43483 = C42384 * C891;
    const double C43477 = C42384 * C888;
    const double C43471 = C42384 * C806;
    const double C43747 = C42384 * C957;
    const double C43741 = C42384 * C954;
    const double C43989 = C42384 * C5779;
    const double C43986 = C42384 * C1398;
    const double C43983 = C42384 * C1395;
    const double C43980 = C42384 * C3414;
    const double C44700 = C42384 * C818;
    const double C44933 = C2160 * C42384;
    const double C45043 = C42384 * C887;
    const double C45037 = C42384 * C805;
    const double C45379 = C42384 * C953;
    const double C45700 = C42384 * C3415;
    const double C45697 = C42384 * C1394;
    const double C46661 = C42384 * C8524;
    const double C46871 = C7772 * C42384;
    const double C46980 = C42384 * C3410;
    const double C46974 = C42384 * C3492;
    const double C47292 = C42384 * C3566;
    const double C60756 = C42384 * C10968;
    const double C60859 = C11112 * C42384;
    const double C60852 = C2790 * C42384;
    const double C61030 = C42384 * C1390;
    const double C61024 = C42384 * C1472;
    const double C61018 = C42384 * C1469;
    const double C61012 = C42384 * C1387;
    const double C61282 = C42384 * C1538;
    const double C61276 = C42384 * C1535;
    const double C62505 = C42384 * C1399;
    const double C62616 = C2788 * C42384;
    const double C62848 = C42384 * C1468;
    const double C62842 = C42384 * C1386;
    const double C63169 = C42384 * C1534;
    const double C63600 = C11979 * C42384;
    const double C91734 = C91733 * ae;
    const double C4080 =
        (-(be * C91703) / C91701) / C91702 -
        ((2 * ((-C91698 / C91696) / C91702 - (C91726 * be) / C91696) -
          (C91697 * C91733 * be) / C91696) *
         be) /
            C91696 -
        C91727 / C91711;
    const double C4082 =
        (-(C91733 * be) / C91696) / C91702 -
        ((2 * ((-C91716 / C91696) / C91702 - (0 * be) / C91696) -
          C91729 / C91711) *
         be) /
            C91696;
    const double C47573 = -(C91733 * be) / C91696;
    const double C4934 = C4928 + C4914;
    const double C4933 = C4927 + C4092;
    const double C10998 = C10992 + C5793;
    const double C10997 = C10991 + C5788;
    const double C15583 = C15577 + C15566;
    const double C15582 = C15576 + C14752;
    const double C15580 = C15574 + C14750;
    const double C17155 = C17151 + C14753;
    const double C17153 = C17149 + C14755;
    const double C19118 = C19114 + C16404;
    const double C19116 = C19112 + C16402;
    const double C30221 = C30215 + C30204;
    const double C30220 = C30214 + C16409;
    const double C30218 = C30212 + C16406;
    const double C32030 = C32026 + C28723;
    const double C32028 = C32024 + C18141;
    const double C33028 = C33026 + C16411;
    const double C20553 = C20549 + C20543;
    const double C20552 = C20548 + C20054;
    const double C20551 = C20547 + C20053;
    const double C20550 = C20546 + C20052;
    const double C21609 = C21606 + C20055;
    const double C21608 = C21605 + C20056;
    const double C21607 = C21604 + C20057;
    const double C22870 = C22867 + C21106;
    const double C22869 = C22866 + C21105;
    const double C22868 = C22865 + C21104;
    const double C25026 = C25022 + C21108;
    const double C25025 = C25021 + C21109;
    const double C25024 = C25020 + C21110;
    const double C25023 = C25019 + C21107;
    const double C25891 = C25889 + C22255;
    const double C25890 = C25888 + C22254;
    const double C26840 = C26839 + C22253;
    const double C35408 = C35406 + C25016;
    const double C35407 = C35405 + C25017;
    const double C36248 = C36247 + C26837;
    const double C37155 = C37154 + C26836;
    const double C39981 = C39980 + C35403;
    const double C41117 = C41116 + C37152;
    const double C43226 = C43220 + C43206;
    const double C43225 = C43219 + C42393;
    const double C60767 = C60761 + C43987;
    const double C60766 = C60760 + C43982;
    const double C48408 = C48402 + C48391;
    const double C48407 = C48401 + C47583;
    const double C48405 = C48399 + C47581;
    const double C49902 = C49898 + C47584;
    const double C49900 = C49896 + C47586;
    const double C51845 = C51841 + C49173;
    const double C51843 = C51839 + C49171;
    const double C54581 = C54575 + C49178;
    const double C54579 = C54573 + C49180;
    const double C54578 = C54572 + C49175;
    const double C56892 = C56890 + C50888;
    const double C72199 = C72197 + C54568;
    const double C73893 = C73891 + C56886;
    const double C48580 = C48579 + C48573;
    const double C48931 = C48691 * C275;
    const double C48947 = C48946 * C93706;
    const double C72450 = C72440 * C188;
    const double C72451 = C72441 * C93680;
    const double C72291 = C72290 + C72284;
    const double C91872 = C91871 * ae;
    const double C42741 = -(C91871 * be) / C91696;
    const double C15131 = C15118 + C15119;
    const double C15128 = C15109 + C15110;
    const double C17612 = C17604 + C15967;
    const double C18572 = C18564 + C16723;
    const double C25430 = C25419 + C16729;
    const double C25427 = C25413 + C16726;
    const double C28195 = C28187 + C19567;
    const double C15138 = C15132 + C15122;
    const double C15133 = C15127 + C15107;
    const double C17616 = C17613 + C15968;
    const double C18576 = C18573 + C16724;
    const double C25437 = C25431 + C16728;
    const double C25432 = C25426 + C16727;
    const double C28197 = C28194 + C19566;
    const double C15136 = C15130 + C15116;
    const double C15135 = C15129 + C15113;
    const double C25435 = C25429 + C16730;
    const double C25434 = C25428 + C16725;
    const double C42776 = C42770 + C42759;
    const double C42775 = C42769 + C42756;
    const double C42773 = C42767 + C42750;
    const double C45167 = C45163 + C43581;
    const double C45165 = C45161 + C43579;
    const double C46134 = C46130 + C44289;
    const double C46132 = C46128 + C44287;
    const double C55079 = C55073 + C44294;
    const double C55077 = C55071 + C44296;
    const double C55076 = C55070 + C44291;
    const double C58668 = C58666 + C47089;
    const double C88624 = C88622 + C55066;
    const double C91255 = C91253 + C58662;
    const double C47967 = C47961 + C47947;
    const double C47966 = C47960 + C47944;
    const double C83691 = C83685 + C49487;
    const double C83690 = C83684 + C49482;
    const double C20279 = C20112 * C191;
    const double C20278 = C20112 * C190;
    const double C20271 = C20112 * C189;
    const double C20812 = C20112 * C890;
    const double C20811 = C20112 * C889;
    const double C21322 = C20112 * C1471;
    const double C21321 = C20112 * C1470;
    const double C21904 = C20112 * C888;
    const double C22521 = C20112 * C1469;
    const double C23177 = C20112 * C3491;
    const double C20280 = C20113 * C887;
    const double C20277 = C20113 * C888;
    const double C20272 = C20113 * C889;
    const double C20813 = C20113 * C5016;
    const double C20810 = C20113 * C890;
    const double C21323 = C20113 * C5870;
    const double C21320 = C20113 * C3491;
    const double C21905 = C20113 * C891;
    const double C22522 = C20113 * C3492;
    const double C23178 = C20113 * C8645;
    const double C20281 = C20114 * C892;
    const double C20276 = C20114 * C891;
    const double C20273 = C20114 * C890;
    const double C20809 = C20114 * C5016;
    const double C21324 = C20114 * C16487;
    const double C21319 = C20114 * C8645;
    const double C21906 = C20114 * C5017;
    const double C22523 = C20114 * C8646;
    const double C47695 = C47669 * C110;
    const double C47689 = C47669 * C116;
    const double C47679 = C47669 * C115;
    const double C47673 = C47669 * C109;
    const double C47955 = C47669 * C192;
    const double C47953 = C47669 * C191;
    const double C47938 = C47669 * C190;
    const double C47934 = C47669 * C189;
    const double C48061 = C307 * C47669;
    const double C48050 = C305 * C47669;
    const double C48220 = C47669 * C278;
    const double C48210 = C47669 * C277;
    const double C48776 = C47669 * C891;
    const double C48773 = C47669 * C890;
    const double C48772 = C47669 * C889;
    const double C48769 = C47669 * C888;
    const double C49488 = C47669 * C1472;
    const double C49485 = C47669 * C1471;
    const double C49484 = C47669 * C1470;
    const double C49481 = C47669 * C1469;
    const double C50015 = C47669 * C806;
    const double C50009 = C47669 * C814;
    const double C50355 = C47669 * C887;
    const double C50470 = C2162 * C47669;
    const double C50683 = C47669 * C954;
    const double C51001 = C47669 * C1387;
    const double C50995 = C47669 * C1395;
    const double C51309 = C47669 * C1468;
    const double C51424 = C2876 * C47669;
    const double C51625 = C47669 * C1535;
    const double C52278 = C47669 * C3492;
    const double C52275 = C47669 * C3491;
    const double C82915 = C47669 * C8645;
    const double C83419 = C47669 * C1389;
    const double C83413 = C47669 * C1397;
    const double C83403 = C47669 * C1396;
    const double C83397 = C47669 * C1388;
    const double C83592 = C25326 * C47669;
    const double C83581 = C25319 * C47669;
    const double C83679 = C47669 * C11080;
    const double C83932 = C47669 * C1537;
    const double C83922 = C47669 * C1536;
    const double C85302 = C27144 * C47669;
    const double C86004 = C47669 * C3413;
    const double C85998 = C47669 * C3409;
    const double C86224 = C23109 * C47669;
    const double C86334 = C47669 * C5870;
    const double C86654 = C47669 * C3565;
    const double C47693 = C47670 * C805;
    const double C47687 = C47670 * C813;
    const double C47681 = C47670 * C814;
    const double C47675 = C47670 * C806;
    const double C47956 = C47670 * C886;
    const double C47950 = C47670 * C887;
    const double C47941 = C47670 * C888;
    const double C47935 = C47670 * C889;
    const double C48059 = C2160 * C47670;
    const double C48052 = C2162 * C47670;
    const double C48218 = C47670 * C953;
    const double C48212 = C47670 * C954;
    const double C48777 = C47670 * C5017;
    const double C48774 = C47670 * C5016;
    const double C48771 = C47670 * C890;
    const double C48768 = C47670 * C891;
    const double C49489 = C47670 * C5871;
    const double C49486 = C47670 * C5870;
    const double C49483 = C47670 * C3491;
    const double C49480 = C47670 * C3492;
    const double C50013 = C47670 * C809;
    const double C50007 = C47670 * C817;
    const double C50356 = C47670 * C892;
    const double C50468 = C5128 * C47670;
    const double C50681 = C47670 * C957;
    const double C50999 = C47670 * C3410;
    const double C50993 = C47670 * C3414;
    const double C51310 = C47670 * C3493;
    const double C51422 = C7772 * C47670;
    const double C51623 = C47670 * C3566;
    const double C52279 = C47670 * C8646;
    const double C52276 = C47670 * C8645;
    const double C83417 = C47670 * C5775;
    const double C83411 = C47670 * C5778;
    const double C83405 = C47670 * C3413;
    const double C83399 = C47670 * C3409;
    const double C83590 = C25324 * C47670;
    const double C83583 = C23109 * C47670;
    const double C83680 = C47670 * C25104;
    const double C83930 = C47670 * C5950;
    const double C83924 = C47670 * C3565;
    const double C85304 = C26210 * C47670;
    const double C86006 = C47670 * C8523;
    const double C86000 = C47670 * C8520;
    const double C86226 = C23107 * C47670;
    const double C86335 = C47670 * C16487;
    const double C86656 = C47670 * C8749;
    const double C43026 = C42518 * C275;
    const double C42873 = C42872 + C42866;
    const double C43042 = C43041 * C93706;
    const double C88370 = C88360 * C20049;
    const double C88371 = C88361 * C93585;
    const double C88539 = C88538 + C88532;
    const double C91938 = C91937 * ae;
    const double C59946 = -(C91937 * be) / C91696;
    const double C29421 = C29408 + C29409;
    const double C29418 = C29399 + C29400;
    const double C31907 = C31899 + C30104;
    const double C32910 = C32902 + C30955;
    const double C35308 = C35297 + C30110;
    const double C35305 = C35291 + C30107;
    const double C38982 = C38974 + C33872;
    const double C29428 = C29422 + C29412;
    const double C29423 = C29417 + C29397;
    const double C31911 = C31908 + C30105;
    const double C32914 = C32911 + C30956;
    const double C35315 = C35309 + C30109;
    const double C35310 = C35304 + C30108;
    const double C38986 = C38983 + C33871;
    const double C29426 = C29420 + C29406;
    const double C29425 = C29419 + C29403;
    const double C31909 = C31906 + C30103;
    const double C35313 = C35307 + C30111;
    const double C35312 = C35306 + C30106;
    const double C59981 = C59975 + C59964;
    const double C59980 = C59974 + C59961;
    const double C59978 = C59972 + C59955;
    const double C62394 = C62390 + C60659;
    const double C62392 = C62388 + C60657;
    const double C63396 = C63392 + C61442;
    const double C63394 = C63390 + C61440;
    const double C66145 = C66139 + C60664;
    const double C66143 = C66137 + C60666;
    const double C66142 = C66136 + C60661;
    const double C69447 = C69445 + C64296;
    const double C70649 = C70647 + C64294;
    const double C83245 = C83243 + C66132;
    const double C86769 = C86767 + C70644;
    const double C71429 = C71423 + C71409;
    const double C71428 = C71422 + C71406;
    const double C73780 = C73777 + C72104;
    const double C88203 = C88197 + C72112;
    const double C88202 = C88196 + C72107;
    const double C39461 = C39144 * C278;
    const double C39460 = C39144 * C277;
    const double C39453 = C39144 * C276;
    const double C39920 = C39144 * C956;
    const double C39919 = C39144 * C955;
    const double C40445 = C39144 * C1537;
    const double C40444 = C39144 * C1536;
    const double C41043 = C39144 * C954;
    const double C41671 = C39144 * C1535;
    const double C42299 = C39144 * C3565;
    const double C39462 = C39145 * C1534;
    const double C39459 = C39145 * C1535;
    const double C39454 = C39145 * C1536;
    const double C39921 = C39145 * C8749;
    const double C39918 = C39145 * C3565;
    const double C40446 = C39145 * C11196;
    const double C40443 = C39145 * C1537;
    const double C41044 = C39145 * C3566;
    const double C41672 = C39145 * C1538;
    const double C42300 = C39145 * C5950;
    const double C39463 = C39146 * C1539;
    const double C39458 = C39146 * C1538;
    const double C39455 = C39146 * C1537;
    const double C39922 = C39146 * C16565;
    const double C39917 = C39146 * C5950;
    const double C40442 = C39146 * C11196;
    const double C41045 = C39146 * C5951;
    const double C41673 = C39146 * C11197;
    const double C42301 = C39146 * C25218;
    const double C70905 = C70879 * C110;
    const double C70899 = C70879 * C116;
    const double C70889 = C70879 * C115;
    const double C70883 = C70879 * C109;
    const double C71151 = C70879 * C191;
    const double C71141 = C70879 * C190;
    const double C71318 = C220 * C70879;
    const double C71307 = C218 * C70879;
    const double C71417 = C70879 * C279;
    const double C71415 = C70879 * C278;
    const double C71400 = C70879 * C277;
    const double C71396 = C70879 * C276;
    const double C72113 = C70879 * C957;
    const double C72110 = C70879 * C956;
    const double C72109 = C70879 * C955;
    const double C72106 = C70879 * C954;
    const double C72850 = C70879 * C1538;
    const double C72847 = C70879 * C1537;
    const double C72846 = C70879 * C1536;
    const double C72843 = C70879 * C1535;
    const double C73157 = C70879 * C806;
    const double C73151 = C70879 * C814;
    const double C73463 = C70879 * C888;
    const double C73669 = C2076 * C70879;
    const double C73774 = C70879 * C953;
    const double C74110 = C70879 * C1387;
    const double C74104 = C70879 * C1395;
    const double C74432 = C70879 * C1469;
    const double C74644 = C2790 * C70879;
    const double C74749 = C70879 * C1534;
    const double C75658 = C70879 * C3566;
    const double C75655 = C70879 * C3565;
    const double C87689 = C70879 * C808;
    const double C87683 = C70879 * C816;
    const double C87673 = C70879 * C815;
    const double C87667 = C70879 * C807;
    const double C87937 = C70879 * C890;
    const double C87927 = C70879 * C889;
    const double C88030 = C20751 * C70879;
    const double C88019 = C20749 * C70879;
    const double C88191 = C70879 * C5096;
    const double C88931 = C70879 * C5950;
    const double C89623 = C21832 * C70879;
    const double C91034 = C70879 * C3409;
    const double C91028 = C70879 * C3413;
    const double C91360 = C70879 * C3491;
    const double C91468 = C23109 * C70879;
    const double C91677 = C70879 * C8749;
    const double C70903 = C70880 * C1386;
    const double C70897 = C70880 * C1394;
    const double C70891 = C70880 * C1395;
    const double C70885 = C70880 * C1387;
    const double C71149 = C70880 * C1468;
    const double C71143 = C70880 * C1469;
    const double C71316 = C2788 * C70880;
    const double C71309 = C2790 * C70880;
    const double C71418 = C70880 * C1533;
    const double C71412 = C70880 * C1534;
    const double C71403 = C70880 * C1535;
    const double C71397 = C70880 * C1536;
    const double C72114 = C70880 * C8750;
    const double C72111 = C70880 * C8749;
    const double C72108 = C70880 * C3565;
    const double C72105 = C70880 * C3566;
    const double C72851 = C70880 * C11197;
    const double C72848 = C70880 * C11196;
    const double C72845 = C70880 * C1537;
    const double C72842 = C70880 * C1538;
    const double C73155 = C70880 * C3410;
    const double C73149 = C70880 * C3414;
    const double C73461 = C70880 * C3492;
    const double C73667 = C11979 * C70880;
    const double C73775 = C70880 * C3567;
    const double C74108 = C70880 * C1390;
    const double C74102 = C70880 * C1398;
    const double C74430 = C70880 * C1472;
    const double C74642 = C11112 * C70880;
    const double C74750 = C70880 * C1539;
    const double C75659 = C70880 * C5951;
    const double C75656 = C70880 * C5950;
    const double C87687 = C70880 * C8520;
    const double C87681 = C70880 * C8523;
    const double C87675 = C70880 * C3413;
    const double C87669 = C70880 * C3409;
    const double C87935 = C70880 * C8645;
    const double C87929 = C70880 * C3491;
    const double C88028 = C23107 * C70880;
    const double C88021 = C23109 * C70880;
    const double C88192 = C70880 * C19323;
    const double C88932 = C70880 * C25218;
    const double C89625 = C26210 * C70880;
    const double C91032 = C70880 * C5775;
    const double C91026 = C70880 * C5778;
    const double C91358 = C70880 * C5870;
    const double C91466 = C25324 * C70880;
    const double C91678 = C70880 * C16565;
    const double C59692 = C59464 * C188;
    const double C59708 = C59707 * C93680;
    const double C59872 = C59871 + C59865;
    const double C82760 = C82750 * C20049;
    const double C82761 = C82751 * C93585;
    const double C83087 = C83086 + C83080;
    const double C4218 = C4211 + C4212;
    const double C42519 = C42512 + C42513;
    const double C9684 = C9677 + C9678;
    const double C59465 = C59458 + C59459;
    const double C38550 = C38546 + C38534;
    const double C124 =
        (3 * (C92041 + C92044 + C92044 + C92012 * C92072) + C92079 + C92079 +
         C92012 *
             (2 * C92072 + C92076 + C92076 +
              C92012 * (C92067 + C92071 + C92071 +
                        C92012 * (2 * ae * C92061 +
                                  C92012 *
                                      (C92051 * C92052 +
                                       C92016 * bs[6] * std::pow(C92010, 6)) *
                                      C92019)))) /
        C91701;
    const double C894 =
        (C92079 + C92127 * (2 * C92148 + ae * C92149 + C92012 * C92166)) /
        C91701;
    const double C1018 =
        (C92079 + C92127 * (2 * C92223 + ae * C92149 + C92012 * C92231)) /
        C91701;
    const double C1541 =
        (C92079 + C92170 * (2 * C92191 + ae * C92192 + C92012 * C92209)) /
        C91701;
    const double C1781 =
        (C92079 + C92170 * (2 * C92281 + ae * C92192 + C92012 * C92289)) /
        C91701;
    const double C137 = C105 * C118;
    const double C131 = C107 * C118;
    const double C214 = C188 * C118;
    const double C301 = C275 * C118;
    const double C4101 = C4085 * C118;
    const double C42402 = C42386 * C118;
    const double C829 = C107 * C812;
    const double C1989 = C105 * C812;
    const double C2059 = C188 * C812;
    const double C2145 = C275 * C812;
    const double C4103 = C4083 * C812;
    const double C4093 = C4085 * C812;
    const double C4197 = C4179 * C812;
    const double C6879 = C4077 * C812;
    const double C14762 = C91722 * C812;
    const double C42404 = C42384 * C812;
    const double C42394 = C42386 * C812;
    const double C42498 = C42480 * C812;
    const double C45040 = C42378 * C812;
    const double C47593 = C47576 * C812;
    const double C1410 = C107 * C1393;
    const double C2703 = C105 * C1393;
    const double C2773 = C188 * C1393;
    const double C2859 = C275 * C1393;
    const double C7537 = C4085 * C1393;
    const double C9495 = C4083 * C1393;
    const double C9663 = C9645 * C1393;
    const double C13193 = C4077 * C1393;
    const double C28726 = C91722 * C1393;
    const double C45698 = C42386 * C1393;
    const double C52784 = C47576 * C1393;
    const double C59276 = C42384 * C1393;
    const double C59444 = C59426 * C1393;
    const double C62845 = C42378 * C1393;
    const double C6664 = C6648 + C6649;
    const double C14872 = C14854 + C14855;
    const double C44825 = C44809 + C44810;
    const double C47703 = C47685 + C47686;
    const double C5246 = C5228 + C5229;
    const double C17503 = C17494 + C17495;
    const double C43499 = C43481 + C43482;
    const double C50250 = C50241 + C50242;
    const double C7769 = C7761 + C7762;
    const double C12094 = C12078 + C12079;
    const double C61762 = C61746 + C61747;
    const double C9205 = C9199 + C9200;
    const double C47296 = C47290 + C47291;
    const double C56482 = C56479 + C56480;
    const double C79246 = C79243 + C79244;
    const double C8542 = C8539 + C5785;
    const double C13953 = C11976 * C4077;
    const double C63603 = C11976 * C42378;
    const double C78446 = C78444 + C18143;
    const double C46666 = C46663 + C43979;
    const double C55654 = C55652 + C50890;
    const double C13082 = C13066 + C13067;
    const double C28910 = C28892 + C28893;
    const double C62734 = C62718 + C62719;
    const double C70913 = C70895 + C70896;
    const double C11591 = C11582 + C11583;
    const double C32697 = C32692 + C32693;
    const double C61289 = C61280 + C61281;
    const double C74540 = C74537 + C74538;
    const double C8881 = C8869 + C8870;
    const double C46984 = C46972 + C46973;
    const double C56074 = C56069 + C56070;
    const double C78850 = C78845 + C78846;
    const double C92875 = ae * C92874;
    const double C15667 =
        (3 * C92651 + C92127 * C92874 + (2 * C92645 + C92127 * C92863) * ae) /
        C91696;
    const double C19222 = (C92170 * C92874) / C91696;
    const double C93218 = ae * C93217;
    const double C30409 =
        (3 * C92802 + C92170 * C93217 + (2 * C92796 + C92170 * C93208) * ae) /
        C91696;
    const double C901 =
        (2 * C92148 + ae * C92149 + C92012 * C92166 + ae * C92127 * C92119 +
         C92127 * (C92121 +
                   C92127 * (2 * C92162 + ae * C92163 +
                             C92012 * (C92156 + ae * C92012 * C92158 +
                                       C92012 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92131))))) /
        C91701;
    const double C1025 =
        (2 * C92223 + ae * C92149 + C92012 * C92231 + ae * C92127 * C92119 +
         C92127 * (C92121 +
                   C92127 * (2 * C92229 + ae * C92163 +
                             C92012 * (C92227 + ae * C92012 * C92158 +
                                       C92012 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92215))))) /
        C91701;
    const double C1548 =
        (2 * C92191 + ae * C92192 + C92012 * C92209 + ae * C92170 * C92119 +
         C92170 * (C92121 +
                   C92170 * (2 * C92205 + ae * C92206 +
                             C92012 * (C92199 + ae * C92012 * C92201 +
                                       C92012 * (ae * C92201 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92174))))) /
        C91701;
    const double C1788 =
        (2 * C92281 + ae * C92192 + C92012 * C92289 + ae * C92170 * C92119 +
         C92170 * (C92121 +
                   C92170 * (2 * C92287 + ae * C92206 +
                             C92012 * (C92285 + ae * C92012 * C92201 +
                                       C92012 * (ae * C92201 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92273))))) /
        C91701;
    const double C3498 =
        (C92170 *
         (C92121 + C92127 * (2 * C92162 + ae * C92163 +
                             C92012 * (C92156 + ae * C92012 * C92158 +
                                       C92012 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92131))))) /
        C91701;
    const double C92122 = C92086 + C92120;
    const double C92539 = ae * C92534;
    const double C3416 = (C92170 * C92534) / C91696;
    const double C92560 = ae * C92555;
    const double C836 = C107 * C819;
    const double C6540 = C4085 * C819;
    const double C14764 = C91722 * C819;
    const double C44701 = C42386 * C819;
    const double C47595 = C47576 * C819;
    const double C1417 = C107 * C1400;
    const double C12854 = C4085 * C1400;
    const double C28728 = C91722 * C1400;
    const double C62506 = C42386 * C1400;
    const double C70731 = C47576 * C1400;
    const double C21477 =
        (2 * C92892 + ae * C92880 + C92127 * C93040 + ae * C92170 * C93013 +
         C92170 * (C93015 +
                   C92170 * (2 * C93038 + ae * C93026 +
                             C92127 * (C92303 + ae * C92127 * C92201 +
                                       C92127 * (ae * C92201 +
                                                 C92127 * std::pow(C92018, 7) *
                                                     bs[7] * C92294))))) /
        C91701;
    const double C93016 = C92989 + C93014;
    const double C93087 = ae * C93083;
    const double C93350 = C93325 + C93348;
    const double C93287 = ae * C93286;
    const double C35601 =
        (3 * C93131 + C92170 * C93286 + (2 * C93125 + C92170 * C93275) * ae) /
        C91696;
    const double C14255 = C12306 * C4077;
    const double C63900 = C12306 * C42378;
    const double C18889 = C18883 + C18884;
    const double C51627 = C51621 + C51622;
    const double C56617 = C56613 + C56614;
    const double C68111 = C68107 + C68108;
    const double C17614 = C17611 + C15966;
    const double C17718 = C16058 * C14741;
    const double C50465 = C16058 * C47572;
    const double C50361 = C50358 + C48767;
    const double C67711 = C67709 + C8991;
    const double C18574 = C18571 + C16722;
    const double C18686 = C18685 * C14741;
    const double C51419 = C18685 * C47572;
    const double C27143 = C26213 * C14741;
    const double C85307 = C26213 * C47572;
    const double C56211 = C56209 + C47091;
    const double C51315 = C51312 + C49479;
    const double C15963 =
        (3 * (C92240 + C92638 + C92638 + C92127 * C92839) + C92852 + C92852 +
         C92127 * (2 * C92839 + C92849 + C92849 +
                   C92127 * (C92245 + C92845 + C92845 +
                             C92127 * (2 * C92152 + C92127 * C92250)))) /
        C91701;
    const double C19884 =
        (C92852 + C92170 * (2 * C92892 + ae * C92880 +
                            C92127 * (C92300 + ae * C92127 * C92188 +
                                      C92127 * (C92195 + C92127 * C92303)))) /
        C91701;
    const double C15974 = C14840 * C15666;
    const double C20745 = C20049 * C15666;
    const double C20814 = C20114 * C15666;
    const double C20808 = C20115 * C15666;
    const double C20867 = C275 * C15666;
    const double C48775 = C47671 * C15666;
    const double C19568 = C14840 * C19221;
    const double C21318 = C20115 * C19221;
    const double C23092 = C20049 * C19221;
    const double C23179 = C20114 * C19221;
    const double C23248 = C275 * C19221;
    const double C24561 = C14839 * C19221;
    const double C24645 = C9645 * C19221;
    const double C27848 = C14741 * C19221;
    const double C34960 = C4179 * C19221;
    const double C52277 = C47671 * C19221;
    const double C54062 = C42480 * C19221;
    const double C82916 = C47670 * C19221;
    const double C82993 = C59426 * C19221;
    const double C86003 = C47572 * C19221;
    const double C21325 = C20115 * C21161;
    const double C28193 = C14840 * C21161;
    const double C34962 = C4179 * C21161;
    const double C86336 = C47671 * C21161;
    const double C87852 = C42480 * C21161;
    const double C38552 = C38548 + C38538;
    const double C42031 = C42030 * C93585;
    const double C32796 = C30876 * C28721;
    const double C74639 = C30876 * C70728;
    const double C32912 = C32909 + C30954;
    const double C74755 = C74752 + C72841;
    const double C38984 = C38981 + C33873;
    const double C38758 = C35971 * C28721;
    const double C91463 = C35971 * C70728;
    const double C91683 = C91680 + C75657;
    const double C30951 =
        (3 * (C92314 + C92790 + C92790 + C92170 * C93187) + C93197 + C93197 +
         C92170 * (2 * C93187 + C93194 + C93194 +
                   C92170 * (C92319 + C93095 + C93095 +
                             C92170 * (2 * C92195 + C92170 * C92324)))) /
        C91701;
    const double C30962 = C28878 * C30408;
    const double C40333 = C20049 * C30408;
    const double C40387 = C188 * C30408;
    const double C40447 = C39146 * C30408;
    const double C40441 = C39147 * C30408;
    const double C72849 = C70881 * C30408;
    const double C15770 = C15765 + C15755;
    const double C15889 = C15882 + C15883;
    const double C15888 = C15880 + C15881;
    const double C16155 = C16151 + C16152;
    const double C81202 = C19464 + C19465;
    const double C81199 = C19465 + C19464;
    const double C81201 = C19462 + C19463;
    const double C81200 = C19463 + C19462;
    const double C81594 = C19785 + C19786;
    const double C81593 = C19786 + C19785;
    const double C30329 = C30324 + C30314;
    const double C30526 = C30519 + C30520;
    const double C30525 = C30517 + C30518;
    const double C30795 = C30791 + C30792;
    const double C43504 = C43491 + C43492;
    const double C43501 = C43485 + C43486;
    const double C43496 = C43475 + C43476;
    const double C43493 = C43469 + C43470;
    const double C43756 = C43749 + C43750;
    const double C43751 = C43739 + C43740;
    const double C45050 = C45041 + C45042;
    const double C45047 = C45035 + C45036;
    const double C45383 = C45377 + C45378;
    const double C46989 = C46982 + C46983;
    const double C46986 = C46976 + C46977;
    const double C47298 = C47294 + C47295;
    const double C61045 = C61032 + C61033;
    const double C61042 = C61026 + C61027;
    const double C61037 = C61016 + C61017;
    const double C61034 = C61010 + C61011;
    const double C61291 = C61284 + C61285;
    const double C61286 = C61274 + C61275;
    const double C62855 = C62846 + C62847;
    const double C62852 = C62840 + C62841;
    const double C63173 = C63167 + C63168;
    const double C43503 = C43489 + C43490;
    const double C43500 = C43483 + C43484;
    const double C43497 = C43477 + C43478;
    const double C43494 = C43471 + C43472;
    const double C43755 = C43747 + C43748;
    const double C43752 = C43741 + C43742;
    const double C45051 = C45043 + C45044;
    const double C45048 = C45037 + C45038;
    const double C45384 = C45379 + C45380;
    const double C46988 = C46980 + C46981;
    const double C46985 = C46974 + C46975;
    const double C47297 = C47292 + C47293;
    const double C61044 = C61030 + C61031;
    const double C61041 = C61024 + C61025;
    const double C61038 = C61018 + C61019;
    const double C61035 = C61012 + C61013;
    const double C61290 = C61282 + C61283;
    const double C61287 = C61276 + C61277;
    const double C62856 = C62848 + C62849;
    const double C62853 = C62842 + C62843;
    const double C63174 = C63169 + C63170;
    const double C100 =
        ((ae * -2 * C91695) / C91708 -
         (((C91697 * C91709) / C91701 + 2 * C91725) * be) / C91696) /
            C91702 -
        ((C91697 * (C91709 / C91708 -
                    (((C91697 * C91734) / C91696 + 2 * C91732) * be) / C91696 -
                    C91727 / C91711) +
          2 * (C91725 / C91702 - ((C91697 * C91732 + C93815) * be) / C91696 +
               C91722)) *
         be) /
            C91696 +
        C91734 / C91711 - ((2 * C91722 - C91729 / C91711) * be) / C91696;
    const double C102 =
        (C91709 / C91708 -
         (((C91697 * C91734) / C91696 + 2 * C91732) * be) / C91696 -
         C91727 / C91711) /
            C91702 -
        ((C91697 * (C91734 / C91711 -
                    ((2 * C91722 - C91729 / C91711) * be) / C91696) +
          2 * (C91732 / C91702 - ((C91697 * C91722 + C93590) * be) / C91696)) *
         be) /
            C91696 +
        (-2 * C91727) / (C91696 * 4 * C91701);
    const double C104 =
        (C91734 / C91711 - ((2 * C91722 - C91729 / C91711) * be) / C91696) /
            C91702 -
        ((2 * (C91722 / C91702 - (0 * be) / C91696) -
          C91729 / (C91696 * 4 * C91701)) *
         be) /
            C91696;
    const double C14742 = C91734 / C91696;
    const double C42381 =
        C91709 / C91708 -
        (((C91697 * C91734) / C91696 + 2 * C91732) * be) / C91696 -
        C91727 / C91711;
    const double C42383 =
        C91734 / C91711 - ((2 * C91722 - C91729 / C91711) * be) / C91696;
    const double C4919 = C4080 * C808;
    const double C4907 = C4080 * C807;
    const double C6532 = C4080 * C806;
    const double C8534 = C4080 * C3409;
    const double C10984 = C4080 * C1389;
    const double C10974 = C4080 * C1388;
    const double C12846 = C4080 * C1387;
    const double C4916 = C4082 * C809;
    const double C4909 = C4082 * C806;
    const double C6534 = C4082 * C805;
    const double C8532 = C4082 * C3410;
    const double C10982 = C4082 * C1390;
    const double C10976 = C4082 * C1387;
    const double C12848 = C4082 * C1386;
    const double C48393 = C47573 * C4897;
    const double C48386 = C47573 * C808;
    const double C48382 = C47573 * C807;
    const double C49889 = C47573 * C809;
    const double C49885 = C47573 * C806;
    const double C51835 = C47573 * C3409;
    const double C51831 = C47573 * C8520;
    const double C54565 = C47573 * C1389;
    const double C54561 = C47573 * C5775;
    const double C54555 = C47573 * C1388;
    const double C55647 = C47573 * C3410;
    const double C56881 = C47573 * C1387;
    const double C72193 = C47573 * C10964;
    const double C73884 = C47573 * C1390;
    const double C4940 = C4934 + C4915;
    const double C4939 = C4933 + C4912;
    const double C11004 = C10998 + C10981;
    const double C11003 = C10997 + C10979;
    const double C15589 = C15583 + C15567;
    const double C15588 = C15582 + C15564;
    const double C15586 = C15580 + C15560;
    const double C17159 = C17155 + C17145;
    const double C17157 = C17153 + C17141;
    const double C19122 = C19118 + C19107;
    const double C19120 = C19116 + C19103;
    const double C30227 = C30221 + C30205;
    const double C30226 = C30220 + C30202;
    const double C30224 = C30218 + C30198;
    const double C32034 = C32030 + C32020;
    const double C32032 = C32028 + C32016;
    const double C33030 = C33028 + C33022;
    const double C20557 = C20553 + C20544;
    const double C20556 = C20552 + C20541;
    const double C20555 = C20551 + C20539;
    const double C20554 = C20550 + C20537;
    const double C21612 = C21609 + C21602;
    const double C21611 = C21608 + C21600;
    const double C21610 = C21607 + C21598;
    const double C22873 = C22870 + C22863;
    const double C22872 = C22869 + C22861;
    const double C22871 = C22868 + C22859;
    const double C25030 = C25026 + C25015;
    const double C25029 = C25025 + C25013;
    const double C25028 = C25024 + C25011;
    const double C25027 = C25023 + C25009;
    const double C25893 = C25891 + C25887;
    const double C25892 = C25890 + C25884;
    const double C26841 = C26840 + C26835;
    const double C35410 = C35408 + C35402;
    const double C35409 = C35407 + C35400;
    const double C36249 = C36248 + C36246;
    const double C37156 = C37155 + C37151;
    const double C39982 = C39981 + C39978;
    const double C41118 = C41117 + C41114;
    const double C43232 = C43226 + C43207;
    const double C43231 = C43225 + C43204;
    const double C60773 = C60767 + C60750;
    const double C60772 = C60766 + C60748;
    const double C48414 = C48408 + C48392;
    const double C48413 = C48407 + C48389;
    const double C48411 = C48405 + C48385;
    const double C49906 = C49902 + C49892;
    const double C49904 = C49900 + C49888;
    const double C51849 = C51845 + C51834;
    const double C51847 = C51843 + C51830;
    const double C54587 = C54581 + C54564;
    const double C54585 = C54579 + C54560;
    const double C54584 = C54578 + C54558;
    const double C56894 = C56892 + C56884;
    const double C72201 = C72199 + C72192;
    const double C73895 = C73893 + C73887;
    const double C48948 = C48931 + C48947;
    const double C72456 = C72450 + C72451;
    const double C20266 =
        ((ae * -2 * C91840) / C91708 -
         (((C91760 * C91869) / C91701 + 2 * C91855) * be) / C91696) /
            C91702 -
        ((C91760 * (C91869 / C91708 -
                    (((C91760 * C91872) / C91696 + 2 * C91851) * be) / C91696 -
                    C91825 / C91711) +
          2 * (C91855 / C91702 - ((C91760 * C91851 + C93828) * be) / C91696 +
               C91852)) *
         be) /
            C91696 +
        C91872 / C91711 - ((2 * C91852 - C91828 / C91711) * be) / C91696;
    const double C20267 =
        (C91869 / C91708 -
         (((C91760 * C91872) / C91696 + 2 * C91851) * be) / C91696 -
         C91825 / C91711) /
            C91702 -
        ((C91760 * (C91872 / C91711 -
                    ((2 * C91852 - C91828 / C91711) * be) / C91696) +
          2 * (C91851 / C91702 - ((C91760 * C91852 + C93694) * be) / C91696)) *
         be) /
            C91696 +
        (-2 * C91825) / (C91696 * 4 * C91701);
    const double C20268 =
        (C91872 / C91711 - ((2 * C91852 - C91828 / C91711) * be) / C91696) /
            C91702 -
        ((2 * (C91852 / C91702 - (0 * be) / C91696) -
          C91828 / (C91696 * 4 * C91701)) *
         be) /
            C91696;
    const double C47930 =
        C91869 / C91708 -
        (((C91760 * C91872) / C91696 + 2 * C91851) * be) / C91696 -
        C91825 / C91711;
    const double C47931 =
        C91872 / C91711 - ((2 * C91852 - C91828 / C91711) * be) / C91696;
    const double C42761 = C42741 * C111;
    const double C42752 = C42741 * C110;
    const double C42746 = C42741 * C109;
    const double C45157 = C42741 * C806;
    const double C45153 = C42741 * C805;
    const double C46124 = C42741 * C1387;
    const double C46120 = C42741 * C1386;
    const double C55063 = C42741 * C1389;
    const double C55059 = C42741 * C1390;
    const double C55053 = C42741 * C1388;
    const double C56207 = C42741 * C3410;
    const double C58657 = C42741 * C3409;
    const double C88617 = C42741 * C10964;
    const double C91246 = C42741 * C5775;
    const double C15137 = C15131 + C15119;
    const double C15134 = C15128 + C15110;
    const double C17615 = C17612 + C15967;
    const double C18575 = C18572 + C16723;
    const double C25436 = C25430 + C16729;
    const double C25433 = C25427 + C16726;
    const double C28198 = C28195 + C19567;
    const double C15144 = C15138 + C15123;
    const double C15139 = C15133 + C15108;
    const double C17619 = C17616 + C17607;
    const double C18579 = C18576 + C18567;
    const double C25443 = C25437 + C25422;
    const double C25438 = C25432 + C25412;
    const double C28200 = C28197 + C28186;
    const double C15142 = C15136 + C15117;
    const double C15141 = C15135 + C15114;
    const double C25441 = C25435 + C25418;
    const double C25440 = C25434 + C25416;
    const double C42782 = C42776 + C42760;
    const double C42781 = C42775 + C42757;
    const double C42779 = C42773 + C42751;
    const double C45171 = C45167 + C45156;
    const double C45169 = C45165 + C45152;
    const double C46138 = C46134 + C46123;
    const double C46136 = C46132 + C46119;
    const double C55085 = C55079 + C55062;
    const double C55083 = C55077 + C55058;
    const double C55082 = C55076 + C55056;
    const double C58670 = C58668 + C58660;
    const double C88626 = C88624 + C88616;
    const double C91257 = C91255 + C91249;
    const double C47973 = C47967 + C47948;
    const double C47972 = C47966 + C47945;
    const double C83697 = C83691 + C83674;
    const double C83696 = C83690 + C83672;
    const double C47708 = C47695 + C47696;
    const double C47705 = C47689 + C47690;
    const double C47700 = C47679 + C47680;
    const double C47697 = C47673 + C47674;
    const double C48227 = C48220 + C48221;
    const double C48222 = C48210 + C48211;
    const double C50022 = C50015 + C50016;
    const double C50019 = C50009 + C50010;
    const double C50687 = C50683 + C50684;
    const double C51008 = C51001 + C51002;
    const double C51005 = C50995 + C50996;
    const double C51629 = C51625 + C51626;
    const double C83432 = C83419 + C83420;
    const double C83429 = C83413 + C83414;
    const double C83424 = C83403 + C83404;
    const double C83421 = C83397 + C83398;
    const double C83939 = C83932 + C83933;
    const double C83934 = C83922 + C83923;
    const double C86013 = C86004 + C86005;
    const double C86010 = C85998 + C85999;
    const double C86660 = C86654 + C86655;
    const double C47707 = C47693 + C47694;
    const double C47704 = C47687 + C47688;
    const double C47701 = C47681 + C47682;
    const double C47698 = C47675 + C47676;
    const double C48226 = C48218 + C48219;
    const double C48223 = C48212 + C48213;
    const double C50021 = C50013 + C50014;
    const double C50018 = C50007 + C50008;
    const double C50686 = C50681 + C50682;
    const double C51007 = C50999 + C51000;
    const double C51004 = C50993 + C50994;
    const double C51628 = C51623 + C51624;
    const double C83431 = C83417 + C83418;
    const double C83428 = C83411 + C83412;
    const double C83425 = C83405 + C83406;
    const double C83422 = C83399 + C83400;
    const double C83938 = C83930 + C83931;
    const double C83935 = C83924 + C83925;
    const double C86014 = C86006 + C86007;
    const double C86011 = C86000 + C86001;
    const double C86661 = C86656 + C86657;
    const double C43043 = C43026 + C43042;
    const double C88376 = C88370 + C88371;
    const double C39448 =
        ((ae * -2 * C91906) / C91708 -
         (((C91763 * C91935) / C91701 + 2 * C91921) * be) / C91696) /
            C91702 -
        ((C91763 * (C91935 / C91708 -
                    (((C91763 * C91938) / C91696 + 2 * C91917) * be) / C91696 -
                    C91895 / C91711) +
          2 * (C91921 / C91702 - ((C91763 * C91917 + C93829) * be) / C91696 +
               C91918)) *
         be) /
            C91696 +
        C91938 / C91711 - ((2 * C91918 - C91898 / C91711) * be) / C91696;
    const double C39449 =
        (C91935 / C91708 -
         (((C91763 * C91938) / C91696 + 2 * C91917) * be) / C91696 -
         C91895 / C91711) /
            C91702 -
        ((C91763 * (C91938 / C91711 -
                    ((2 * C91918 - C91898 / C91711) * be) / C91696) +
          2 * (C91917 / C91702 - ((C91763 * C91918 + C93718) * be) / C91696)) *
         be) /
            C91696 +
        (-2 * C91895) / (C91696 * 4 * C91701);
    const double C39450 =
        (C91938 / C91711 - ((2 * C91918 - C91898 / C91711) * be) / C91696) /
            C91702 -
        ((2 * (C91918 / C91702 - (0 * be) / C91696) -
          C91898 / (C91696 * 4 * C91701)) *
         be) /
            C91696;
    const double C71392 =
        C91935 / C91708 -
        (((C91763 * C91938) / C91696 + 2 * C91917) * be) / C91696 -
        C91895 / C91711;
    const double C71393 =
        C91938 / C91711 - ((2 * C91918 - C91898 / C91711) * be) / C91696;
    const double C59966 = C59946 * C111;
    const double C59957 = C59946 * C110;
    const double C59951 = C59946 * C109;
    const double C62384 = C59946 * C806;
    const double C62380 = C59946 * C805;
    const double C63386 = C59946 * C1387;
    const double C63382 = C59946 * C1386;
    const double C66129 = C59946 * C808;
    const double C66125 = C59946 * C809;
    const double C66119 = C59946 * C807;
    const double C69443 = C59946 * C3410;
    const double C70641 = C59946 * C3409;
    const double C83239 = C59946 * C4897;
    const double C86763 = C59946 * C8520;
    const double C29427 = C29421 + C29409;
    const double C29424 = C29418 + C29400;
    const double C31910 = C31907 + C30104;
    const double C32913 = C32910 + C30955;
    const double C35314 = C35308 + C30110;
    const double C35311 = C35305 + C30107;
    const double C38985 = C38982 + C33872;
    const double C29434 = C29428 + C29413;
    const double C29429 = C29423 + C29398;
    const double C31914 = C31911 + C31902;
    const double C32917 = C32914 + C32905;
    const double C35321 = C35315 + C35300;
    const double C35316 = C35310 + C35290;
    const double C38989 = C38986 + C38977;
    const double C29432 = C29426 + C29407;
    const double C29431 = C29425 + C29404;
    const double C31912 = C31909 + C31898;
    const double C35319 = C35313 + C35296;
    const double C35318 = C35312 + C35294;
    const double C59987 = C59981 + C59965;
    const double C59986 = C59980 + C59962;
    const double C59984 = C59978 + C59956;
    const double C62398 = C62394 + C62383;
    const double C62396 = C62392 + C62379;
    const double C63400 = C63396 + C63385;
    const double C63398 = C63394 + C63381;
    const double C66151 = C66145 + C66128;
    const double C66149 = C66143 + C66124;
    const double C66148 = C66142 + C66122;
    const double C69449 = C69447 + C69442;
    const double C70651 = C70649 + C70640;
    const double C83247 = C83245 + C83238;
    const double C86771 = C86769 + C86762;
    const double C71435 = C71429 + C71410;
    const double C71434 = C71428 + C71407;
    const double C73783 = C73780 + C73769;
    const double C88209 = C88203 + C88186;
    const double C88208 = C88202 + C88184;
    const double C70918 = C70905 + C70906;
    const double C70915 = C70899 + C70900;
    const double C70910 = C70889 + C70890;
    const double C70907 = C70883 + C70884;
    const double C71158 = C71151 + C71152;
    const double C71153 = C71141 + C71142;
    const double C73164 = C73157 + C73158;
    const double C73161 = C73151 + C73152;
    const double C73467 = C73463 + C73464;
    const double C74117 = C74110 + C74111;
    const double C74114 = C74104 + C74105;
    const double C74436 = C74432 + C74433;
    const double C87702 = C87689 + C87690;
    const double C87699 = C87683 + C87684;
    const double C87694 = C87673 + C87674;
    const double C87691 = C87667 + C87668;
    const double C87944 = C87937 + C87938;
    const double C87939 = C87927 + C87928;
    const double C91041 = C91034 + C91035;
    const double C91038 = C91028 + C91029;
    const double C91364 = C91360 + C91361;
    const double C70917 = C70903 + C70904;
    const double C70914 = C70897 + C70898;
    const double C70911 = C70891 + C70892;
    const double C70908 = C70885 + C70886;
    const double C71157 = C71149 + C71150;
    const double C71154 = C71143 + C71144;
    const double C73163 = C73155 + C73156;
    const double C73160 = C73149 + C73150;
    const double C73466 = C73461 + C73462;
    const double C74116 = C74108 + C74109;
    const double C74113 = C74102 + C74103;
    const double C74435 = C74430 + C74431;
    const double C87701 = C87687 + C87688;
    const double C87698 = C87681 + C87682;
    const double C87695 = C87675 + C87676;
    const double C87692 = C87669 + C87670;
    const double C87943 = C87935 + C87936;
    const double C87940 = C87929 + C87930;
    const double C91040 = C91032 + C91033;
    const double C91037 = C91026 + C91027;
    const double C91363 = C91358 + C91359;
    const double C59709 = C59692 + C59708;
    const double C82766 = C82760 + C82761;
    const double C2060 = C93680 * C894;
    const double C4198 = C93694 * C894;
    const double C42499 = C93694 * C894;
    const double C6885 = C4077 * C1018;
    const double C45046 = C42378 * C1018;
    const double C2860 = C93706 * C1541;
    const double C9664 = C93718 * C1541;
    const double C59445 = C93718 * C1541;
    const double C13520 = C4077 * C1781;
    const double C63172 = C42378 * C1781;
    const double C224 = C214 + C215;
    const double C311 = C301 + C302;
    const double C2157 = C2145 + C2146;
    const double C6543 = C6536 + C4093;
    const double C6888 = C6878 + C6879;
    const double C44704 = C44697 + C42394;
    const double C45049 = C45039 + C45040;
    const double C2785 = C2773 + C2774;
    const double C12857 = C12850 + C7537;
    const double C13202 = C13192 + C13193;
    const double C62509 = C62502 + C45698;
    const double C62854 = C62844 + C62845;
    const double C8756 = C7769 * C4077;
    const double C46868 = C7769 * C42378;
    const double C8545 = C8542 + C8531;
    const double C78448 = C78446 + C78442;
    const double C46669 = C46666 + C46655;
    const double C55656 = C55654 + C55650;
    const double C15964 =
        (3 * (C92643 + C92649 + C92649 + C92127 * C92864) + C92875 + C92875 +
         C92127 *
             (2 * C92864 + C92872 + C92872 +
              C92127 * (C92855 + C92868 + C92868 +
                        C92127 * (2 * ae * C92857 +
                                  C92127 * C92012 *
                                      (C92084 * C92085 +
                                       C92235 * bs[7] * std::pow(C92018, 7)) *
                                      C92019)))) /
        C91701;
    const double C19885 =
        (C92875 +
         C92170 * (2 * C92896 + ae * C92887 +
                   C92127 * (C92894 + ae * C92127 * C92883 +
                             C92127 * (ae * C92883 + C92127 * C92012 *
                                                         std::pow(C92018, 7) *
                                                         bs[7] * C92294)))) /
        C91701;
    const double C15977 = C14840 * C15667;
    const double C21907 = C20115 * C15667;
    const double C48778 = C47671 * C15667;
    const double C19571 = C14840 * C19222;
    const double C22524 = C20115 * C19222;
    const double C52280 = C47671 * C19222;
    const double C54064 = C42480 * C19222;
    const double C65708 = C4179 * C19222;
    const double C30952 =
        (3 * (C92676 + C92800 + C92800 + C92170 * C93205) + C93218 + C93218 +
         C92170 *
             (2 * C93205 + C93215 + C93215 +
              C92170 * (C92899 + C93211 + C93211 +
                        C92170 * (2 * ae * C92883 +
                                  C92170 * C92012 *
                                      (C92084 * C92085 +
                                       C92309 * bs[7] * std::pow(C92018, 7)) *
                                      C92019)))) /
        C91701;
    const double C33563 =
        (C93218 +
         C92127 * (2 * C92957 + ae * C93167 +
                   C92170 * (C92882 + ae * C92170 * C92857 +
                             C92170 * (ae * C92857 + C92170 * C92012 *
                                                         std::pow(C92018, 7) *
                                                         bs[7] * C92257)))) /
        C91701;
    const double C30965 = C28878 * C30409;
    const double C41674 = C39147 * C30409;
    const double C72852 = C70881 * C30409;
    const double C92123 = C92122 + C92109;
    const double C1985 =
        (3 * (C92328 + C92332 + C92332 + C92012 * C92543) + C92539 + C92539 +
         C92012 *
             (2 * C92543 + C92540 + C92540 +
              C92012 * (C92533 + C92541 + C92541 +
                        C92012 * (2 * ae * C92127 * C92097 +
                                  C92012 * C92127 *
                                      (C92084 * C92085 +
                                       C92016 * bs[7] * std::pow(C92018, 7)) *
                                      C92019)))) /
        C91701;
    const double C3572 =
        (C92539 +
         C92170 * C92127 *
             (2 * C92205 + ae * C92206 +
              C92012 * (C92199 + ae * C92012 * C92201 +
                        C92012 * (ae * C92201 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92174)))) /
        C91701;
    const double C3856 =
        (C92539 +
         C92170 * C92127 *
             (2 * C92287 + ae * C92206 +
              C92012 * (C92285 + ae * C92012 * C92201 +
                        C92012 * (ae * C92201 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92273)))) /
        C91701;
    const double C3425 = C107 * C3416;
    const double C7540 = C4085 * C3416;
    const double C45701 = C42386 * C3416;
    const double C52786 = C47576 * C3416;
    const double C75760 = C91722 * C3416;
    const double C2699 =
        (3 * (C92430 + C92434 + C92434 + C92012 * C92564) + C92560 + C92560 +
         C92012 *
             (2 * C92564 + C92561 + C92561 +
              C92012 * (C92554 + C92562 + C92562 +
                        C92012 * (2 * ae * C92170 * C92097 +
                                  C92012 * C92170 *
                                      (C92084 * C92085 +
                                       C92016 * bs[7] * std::pow(C92018, 7)) *
                                      C92019)))) /
        C91701;
    const double C3642 =
        (C92560 +
         C92127 * C92170 *
             (2 * C92229 + ae * C92163 +
              C92012 * (C92227 + ae * C92012 * C92158 +
                        C92012 * (ae * C92158 + C92012 * std::pow(C92018, 7) *
                                                    bs[7] * C92215)))) /
        C91701;
    const double C93017 = C93016 + C93009;
    const double C23175 =
        (3 * (C92941 + C92945 + C92945 + C92127 * C93090) + C93087 + C93087 +
         C92127 *
             (2 * C93090 + C93088 + C93088 +
              C92127 * (C93082 + C93089 + C93089 +
                        C92127 * (2 * ae * C92170 * C92158 +
                                  C92127 * C92170 *
                                      (C92084 * C92085 +
                                       C92235 * bs[7] * std::pow(C92018, 7)) *
                                      C92019)))) /
        C91701;
    const double C93351 = C93350 + C93339;
    const double C36140 =
        (3 * (C93123 + C93129 + C93129 + C92170 * C93276) + C93287 + C93287 +
         C92170 *
             (2 * C93276 + C93284 + C93284 +
              C92170 * (C93267 + C93280 + C93280 +
                        C92170 * (2 * ae * C93269 +
                                  C92170 * C92127 *
                                      (C92084 * C92085 +
                                       C92309 * bs[7] * std::pow(C92018, 7)) *
                                      C92019)))) /
        C91701;
    const double C36144 = C28878 * C35601;
    const double C42302 = C39147 * C35601;
    const double C88933 = C70881 * C35601;
    const double C17617 = C17614 + C17603;
    const double C50364 = C50361 + C50350;
    const double C67713 = C67711 + C67706;
    const double C18577 = C18574 + C18563;
    const double C56213 = C56211 + C56206;
    const double C51318 = C51315 + C51304;
    const double C28522 = C14741 * C19884;
    const double C86659 = C47572 * C19884;
    const double C20755 = C20745 + C20746;
    const double C20869 = C20867 + C20868;
    const double C28196 = C28189 + C19568;
    const double C23104 = C23092 + C23093;
    const double C23250 = C23248 + C23249;
    const double C24653 = C24645 + C24646;
    const double C27857 = C27847 + C27848;
    const double C86339 = C86332 + C52277;
    const double C82997 = C82993 + C82994;
    const double C86012 = C86002 + C86003;
    const double C32915 = C32912 + C32901;
    const double C74758 = C74755 + C74744;
    const double C38987 = C38984 + C38973;
    const double C91686 = C91683 + C91672;
    const double C40335 = C40333 + C40334;
    const double C40389 = C40387 + C40388;
    const double C15775 = C15770 + C15756;
    const double C16140 = C15888 * C275;
    const double C16156 = C16155 * C93706;
    const double C30334 = C30329 + C30315;
    const double C30528 = C30526 * C93680;
    const double C30527 = C30525 * C188;
    const double C15568 = C14742 * C4897;
    const double C15561 = C14742 * C808;
    const double C15557 = C14742 * C807;
    const double C17142 = C14742 * C809;
    const double C17138 = C14742 * C806;
    const double C19108 = C14742 * C3409;
    const double C19104 = C14742 * C8520;
    const double C30206 = C14742 * C10964;
    const double C30199 = C14742 * C1389;
    const double C30195 = C14742 * C1388;
    const double C32017 = C14742 * C1390;
    const double C32013 = C14742 * C1387;
    const double C33019 = C14742 * C5775;
    const double C78439 = C14742 * C3410;
    const double C43211 = C42381 * C808;
    const double C43199 = C42381 * C807;
    const double C44693 = C42381 * C806;
    const double C46658 = C42381 * C3409;
    const double C60753 = C42381 * C1389;
    const double C60743 = C42381 * C1388;
    const double C62498 = C42381 * C1387;
    const double C43208 = C42383 * C809;
    const double C43201 = C42383 * C806;
    const double C44695 = C42383 * C805;
    const double C46656 = C42383 * C3410;
    const double C60751 = C42383 * C1390;
    const double C60745 = C42383 * C1387;
    const double C62500 = C42383 * C1386;
    const double C4930 = C4919 + C4920;
    const double C4925 = C4907 + C4090;
    const double C6541 = C6532 + C4095;
    const double C8541 = C8534 + C5787;
    const double C10994 = C10984 + C5791;
    const double C10989 = C10974 + C5790;
    const double C12855 = C12846 + C7535;
    const double C4929 = C4916 + C4917;
    const double C4926 = C4909 + C4091;
    const double C6542 = C6534 + C4094;
    const double C8540 = C8532 + C5786;
    const double C10993 = C10982 + C5792;
    const double C10990 = C10976 + C5789;
    const double C12856 = C12848 + C7536;
    const double C48403 = C48393 + C48394;
    const double C48400 = C48386 + C47582;
    const double C48398 = C48382 + C47580;
    const double C49897 = C49889 + C47585;
    const double C49895 = C49885 + C47587;
    const double C51842 = C51835 + C49174;
    const double C51840 = C51831 + C49172;
    const double C54576 = C54565 + C49177;
    const double C54574 = C54561 + C49179;
    const double C54571 = C54555 + C49176;
    const double C55651 = C55647 + C50889;
    const double C56889 = C56881 + C50887;
    const double C72198 = C72193 + C54567;
    const double C73890 = C73884 + C56885;
    const double C20561 = C20557 * C93706;
    const double C20560 = C20556 * C93706;
    const double C24221 = C20556 * C93829;
    const double C82600 = C20556 * C59272;
    const double C20559 = C20555 * C93706;
    const double C24218 = C20555 * C93829;
    const double C34624 = C20555 * C28719;
    const double C82597 = C20555 * C59272;
    const double C87518 = C20555 * C93856;
    const double C20558 = C20554 * C93706;
    const double C24216 = C20554 * C93829;
    const double C34619 = C20554 * C28719;
    const double C82595 = C20554 * C59272;
    const double C87513 = C20554 * C93856;
    const double C21615 = C21612 * C93706;
    const double C21614 = C21611 * C93706;
    const double C25885 = C21611 * C93829;
    const double C84116 = C21611 * C59272;
    const double C21613 = C21610 * C93706;
    const double C25882 = C21610 * C93829;
    const double C36243 = C21610 * C28719;
    const double C84114 = C21610 * C59272;
    const double C89032 = C21610 * C93856;
    const double C22876 = C22873 * C93706;
    const double C24217 = C22873 * C93718;
    const double C27744 = C22873 * C93829;
    const double C34620 = C22873 * C28720;
    const double C38088 = C22873 * C28719;
    const double C82596 = C22873 * C93718;
    const double C85899 = C22873 * C59272;
    const double C87514 = C22873 * C93853;
    const double C90815 = C22873 * C93856;
    const double C22875 = C22872 * C93706;
    const double C24219 = C22872 * C93718;
    const double C27742 = C22872 * C93829;
    const double C34623 = C22872 * C28720;
    const double C82598 = C22872 * C93718;
    const double C85897 = C22872 * C59272;
    const double C87517 = C22872 * C93853;
    const double C22874 = C22871 * C93706;
    const double C24220 = C22871 * C93718;
    const double C82599 = C22871 * C93718;
    const double C27743 = C25029 * C93718;
    const double C34621 = C25029 * C28721;
    const double C38087 = C25029 * C28720;
    const double C85898 = C25029 * C93718;
    const double C87515 = C25029 * C70728;
    const double C90814 = C25029 * C93853;
    const double C27741 = C25028 * C93718;
    const double C34622 = C25028 * C28721;
    const double C85896 = C25028 * C93718;
    const double C87516 = C25028 * C70728;
    const double C25895 = C25893 * C93718;
    const double C84117 = C25893 * C93718;
    const double C25894 = C25892 * C93718;
    const double C36244 = C25892 * C28720;
    const double C84115 = C25892 * C93718;
    const double C89033 = C25892 * C93853;
    const double C38086 = C35409 * C28721;
    const double C90813 = C35409 * C70728;
    const double C36250 = C36249 * C28721;
    const double C89034 = C36249 * C70728;
    const double C47952 = C47930 * C110;
    const double C47937 = C47930 * C109;
    const double C50353 = C47930 * C806;
    const double C51307 = C47930 * C1387;
    const double C83677 = C47930 * C1389;
    const double C83667 = C47930 * C1388;
    const double C86328 = C47930 * C3409;
    const double C47949 = C47931 * C805;
    const double C47940 = C47931 * C806;
    const double C50351 = C47931 * C809;
    const double C51305 = C47931 * C3410;
    const double C83675 = C47931 * C5775;
    const double C83669 = C47931 * C3409;
    const double C86330 = C47931 * C8520;
    const double C42771 = C42761 + C42762;
    const double C42768 = C42752 + C42753;
    const double C42766 = C42746 + C42747;
    const double C45164 = C45157 + C43582;
    const double C45162 = C45153 + C43580;
    const double C46131 = C46124 + C44290;
    const double C46129 = C46120 + C44288;
    const double C55074 = C55063 + C44293;
    const double C55072 = C55059 + C44295;
    const double C55069 = C55053 + C44292;
    const double C56210 = C56207 + C47090;
    const double C58665 = C58657 + C47088;
    const double C88623 = C88617 + C55065;
    const double C91252 = C91246 + C58661;
    const double C15143 = C15137 + C15120;
    const double C15140 = C15134 + C15111;
    const double C17618 = C17615 + C17605;
    const double C18578 = C18575 + C18565;
    const double C25442 = C25436 + C25420;
    const double C25439 = C25433 + C25414;
    const double C28201 = C28198 + C28188;
    const double C71414 = C71392 * C110;
    const double C71399 = C71392 * C109;
    const double C73772 = C71392 * C806;
    const double C74747 = C71392 * C1387;
    const double C88189 = C71392 * C808;
    const double C88179 = C71392 * C807;
    const double C91675 = C71392 * C3409;
    const double C71411 = C71393 * C1386;
    const double C71402 = C71393 * C1387;
    const double C73770 = C71393 * C3410;
    const double C74745 = C71393 * C1390;
    const double C88187 = C71393 * C8520;
    const double C88181 = C71393 * C3409;
    const double C91673 = C71393 * C5775;
    const double C59976 = C59966 + C59967;
    const double C59973 = C59957 + C59958;
    const double C59971 = C59951 + C59952;
    const double C62391 = C62384 + C60660;
    const double C62389 = C62380 + C60658;
    const double C63393 = C63386 + C61443;
    const double C63391 = C63382 + C61441;
    const double C66140 = C66129 + C60663;
    const double C66138 = C66125 + C60665;
    const double C66135 = C66119 + C60662;
    const double C69446 = C69443 + C64295;
    const double C70648 = C70641 + C64293;
    const double C83244 = C83239 + C66131;
    const double C86768 = C86763 + C70643;
    const double C29433 = C29427 + C29410;
    const double C29430 = C29424 + C29401;
    const double C31913 = C31910 + C31900;
    const double C32916 = C32913 + C32903;
    const double C35320 = C35314 + C35298;
    const double C35317 = C35311 + C35292;
    const double C38988 = C38985 + C38975;
    const double C2071 = C2059 + C2060;
    const double C4213 = C4197 + C4198;
    const double C42514 = C42498 + C42499;
    const double C6891 = C6884 + C6885;
    const double C45052 = C45045 + C45046;
    const double C2871 = C2859 + C2860;
    const double C9679 = C9663 + C9664;
    const double C59460 = C59444 + C59445;
    const double C13523 = C13519 + C13520;
    const double C63175 = C63171 + C63172;
    const double C6775 = C2157 * C4077;
    const double C44936 = C2157 * C42378;
    const double C6546 = C6543 + C4093;
    const double C44707 = C44704 + C42394;
    const double C12967 = C2785 * C4077;
    const double C62619 = C2785 * C42378;
    const double C12860 = C12857 + C7537;
    const double C62512 = C62509 + C45698;
    const double C92124 = ae * C92123;
    const double C119 =
        (4 * C92078 + C92012 * C92123 + (3 * C92063 + C92012 * C92106) * ae) /
        C91696;
    const double C1984 = (C92127 * C92123) / C91696;
    const double C2698 = (C92170 * C92123) / C91696;
    const double C93018 = ae * C93017;
    const double C20611 =
        (4 * C92851 + C92127 * C93017 + (3 * C92842 + C92127 * C93007) * ae) /
        C91696;
    const double C22942 = (C92170 * C93017) / C91696;
    const double C93352 = ae * C93351;
    const double C40100 =
        (4 * C93196 + C92170 * C93351 + (3 * C93190 + C92170 * C93336) * ae) /
        C91696;
    const double C28525 = C28521 + C28522;
    const double C86662 = C86658 + C86659;
    const double C28199 = C28196 + C19568;
    const double C28086 = C23104 * C14741;
    const double C86229 = C23104 * C47572;
    const double C86342 = C86339 + C52277;
    const double C16157 = C16140 + C16156;
    const double C30529 = C30527 + C30528;
    const double C15578 = C15568 + C15569;
    const double C15575 = C15561 + C14751;
    const double C15573 = C15557 + C14749;
    const double C17150 = C17142 + C14754;
    const double C17148 = C17138 + C14756;
    const double C19115 = C19108 + C16405;
    const double C19113 = C19104 + C16403;
    const double C30216 = C30206 + C30207;
    const double C30213 = C30199 + C16408;
    const double C30211 = C30195 + C16407;
    const double C32025 = C32017 + C28724;
    const double C32023 = C32013 + C18140;
    const double C33025 = C33019 + C16410;
    const double C78443 = C78439 + C18142;
    const double C43222 = C43211 + C43212;
    const double C43217 = C43199 + C42391;
    const double C44702 = C44693 + C42396;
    const double C46665 = C46658 + C43981;
    const double C60763 = C60753 + C43985;
    const double C60758 = C60743 + C43984;
    const double C62507 = C62498 + C45696;
    const double C43221 = C43208 + C43209;
    const double C43218 = C43201 + C42392;
    const double C44703 = C44695 + C42395;
    const double C46664 = C46656 + C43980;
    const double C60762 = C60751 + C43986;
    const double C60759 = C60745 + C43983;
    const double C62508 = C62500 + C45697;
    const double C4936 = C4930 + C4920;
    const double C4931 = C4925 + C4090;
    const double C6544 = C6541 + C4095;
    const double C8544 = C8541 + C5787;
    const double C11000 = C10994 + C5791;
    const double C10995 = C10989 + C5790;
    const double C12858 = C12855 + C7535;
    const double C4935 = C4929 + C4917;
    const double C4932 = C4926 + C4091;
    const double C6545 = C6542 + C4094;
    const double C8543 = C8540 + C5786;
    const double C10999 = C10993 + C5792;
    const double C10996 = C10990 + C5789;
    const double C12859 = C12856 + C7536;
    const double C48409 = C48403 + C48394;
    const double C48406 = C48400 + C47582;
    const double C48404 = C48398 + C47580;
    const double C49901 = C49897 + C47585;
    const double C49899 = C49895 + C47587;
    const double C51846 = C51842 + C49174;
    const double C51844 = C51840 + C49172;
    const double C54582 = C54576 + C49177;
    const double C54580 = C54574 + C49179;
    const double C54577 = C54571 + C49176;
    const double C55653 = C55651 + C50889;
    const double C56891 = C56889 + C50887;
    const double C72200 = C72198 + C54567;
    const double C73892 = C73890 + C56885;
    const double C24222 = C24218 + C24219;
    const double C82601 = C82597 + C82598;
    const double C47963 = C47952 + C47953;
    const double C47958 = C47937 + C47938;
    const double C50360 = C50353 + C48769;
    const double C51314 = C51307 + C49481;
    const double C83687 = C83677 + C49485;
    const double C83682 = C83667 + C49484;
    const double C86337 = C86328 + C52275;
    const double C47962 = C47949 + C47950;
    const double C47959 = C47940 + C47941;
    const double C50359 = C50351 + C48768;
    const double C51313 = C51305 + C49480;
    const double C83686 = C83675 + C49486;
    const double C83683 = C83669 + C49483;
    const double C86338 = C86330 + C52276;
    const double C42777 = C42771 + C42762;
    const double C42774 = C42768 + C42753;
    const double C42772 = C42766 + C42747;
    const double C45168 = C45164 + C43582;
    const double C45166 = C45162 + C43580;
    const double C46135 = C46131 + C44290;
    const double C46133 = C46129 + C44288;
    const double C55080 = C55074 + C44293;
    const double C55078 = C55072 + C44295;
    const double C55075 = C55069 + C44292;
    const double C56212 = C56210 + C47090;
    const double C58667 = C58665 + C47088;
    const double C88625 = C88623 + C55065;
    const double C91254 = C91252 + C58661;
    const double C71425 = C71414 + C71415;
    const double C71420 = C71399 + C71400;
    const double C73779 = C73772 + C72106;
    const double C74754 = C74747 + C72843;
    const double C88199 = C88189 + C72110;
    const double C88194 = C88179 + C72109;
    const double C91682 = C91675 + C75655;
    const double C71424 = C71411 + C71412;
    const double C71421 = C71402 + C71403;
    const double C73778 = C73770 + C72105;
    const double C74753 = C74745 + C72842;
    const double C88198 = C88187 + C72111;
    const double C88195 = C88181 + C72108;
    const double C91681 = C91673 + C75656;
    const double C59982 = C59976 + C59967;
    const double C59979 = C59973 + C59958;
    const double C59977 = C59971 + C59952;
    const double C62395 = C62391 + C60660;
    const double C62393 = C62389 + C60658;
    const double C63397 = C63393 + C61443;
    const double C63395 = C63391 + C61441;
    const double C66146 = C66140 + C60663;
    const double C66144 = C66138 + C60665;
    const double C66141 = C66135 + C60662;
    const double C69448 = C69446 + C64295;
    const double C70650 = C70648 + C64293;
    const double C83246 = C83244 + C66131;
    const double C86770 = C86768 + C70643;
    const double C6549 = C6546 + C6537;
    const double C44710 = C44707 + C44698;
    const double C12863 = C12860 + C12851;
    const double C62515 = C62512 + C62503;
    const double C125 =
        (4 * (2 * C92072 + C92076 + C92076 + C92012 * C92115) + C92124 +
         C92124 +
         C92012 * (3 * C92115 + C92121 + C92121 +
                   C92012 * (2 * C92111 + C92117 + C92117 +
                             C92012 * (C92104 + C92110 + C92110 +
                                       C92012 * (2 * ae * C92097 +
                                                 C92012 *
                                                     (C92084 * C92085 +
                                                      C92016 * bs[7] *
                                                          std::pow(C92018, 7)) *
                                                     C92019))))) /
        C91701;
    const double C2057 =
        (C92124 +
         C92127 * (3 * C92166 + ae * C92167 +
                   C92012 * (2 * C92162 + ae * C92163 +
                             C92012 * (C92156 + ae * C92012 * C92158 +
                                       C92012 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92131))))) /
        C91701;
    const double C2228 =
        (C92124 +
         C92127 * (3 * C92231 + ae * C92167 +
                   C92012 * (2 * C92229 + ae * C92163 +
                             C92012 * (C92227 + ae * C92012 * C92158 +
                                       C92012 * (ae * C92158 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92215))))) /
        C91701;
    const double C2857 =
        (C92124 +
         C92170 * (3 * C92209 + ae * C92210 +
                   C92012 * (2 * C92205 + ae * C92206 +
                             C92012 * (C92199 + ae * C92012 * C92201 +
                                       C92012 * (ae * C92201 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92174))))) /
        C91701;
    const double C3174 =
        (C92124 +
         C92170 * (3 * C92289 + ae * C92210 +
                   C92012 * (2 * C92287 + ae * C92206 +
                             C92012 * (C92285 + ae * C92012 * C92201 +
                                       C92012 * (ae * C92201 +
                                                 C92012 * std::pow(C92018, 7) *
                                                     bs[7] * C92273))))) /
        C91701;
    const double C138 = C107 * C119;
    const double C1990 = C107 * C1984;
    const double C4104 = C4085 * C1984;
    const double C42405 = C42386 * C1984;
    const double C2704 = C107 * C2698;
    const double C9496 = C4085 * C2698;
    const double C59277 = C42386 * C2698;
    const double C20806 =
        (4 * (2 * C92839 + C92849 + C92849 + C92127 * C93005) + C93018 +
         C93018 +
         C92127 * (3 * C93005 + C93015 + C93015 +
                   C92127 * (2 * C92996 + C93011 + C93011 +
                             C92127 * (C92250 + C93004 + C93004 +
                                       C92127 * (2 * ae * C92158 +
                                                 C92127 *
                                                     (C92084 * C92085 +
                                                      C92235 * bs[7] *
                                                          std::pow(C92018, 7)) *
                                                     C92019))))) /
        C91701;
    const double C23398 =
        (C93018 +
         C92170 * (3 * C93040 + ae * C93031 +
                   C92127 * (2 * C93038 + ae * C93026 +
                             C92127 * (C92303 + ae * C92127 * C92201 +
                                       C92127 * (ae * C92201 +
                                                 C92127 * std::pow(C92018, 7) *
                                                     bs[7] * C92294))))) /
        C91701;
    const double C20815 = C20115 * C20611;
    const double C23180 = C20115 * C22942;
    const double C24562 = C14840 * C22942;
    const double C82917 = C47671 * C22942;
    const double C40439 =
        (4 * (2 * C93187 + C93194 + C93194 + C92170 * C93341) + C93352 +
         C93352 +
         C92170 * (3 * C93341 + C93349 + C93349 +
                   C92170 * (2 * C93333 + C93345 + C93345 +
                             C92170 * (C92324 + C93340 + C93340 +
                                       C92170 * (2 * ae * C92201 +
                                                 C92170 *
                                                     (C92084 * C92085 +
                                                      C92309 * bs[7] *
                                                          std::pow(C92018, 7)) *
                                                     C92019))))) /
        C91701;
    const double C40448 = C39147 * C40100;
    const double C28202 = C28199 + C28190;
    const double C86345 = C86342 + C86333;
    const double C15584 = C15578 + C15569;
    const double C15581 = C15575 + C14751;
    const double C15579 = C15573 + C14749;
    const double C17154 = C17150 + C14754;
    const double C17152 = C17148 + C14756;
    const double C19119 = C19115 + C16405;
    const double C19117 = C19113 + C16403;
    const double C30222 = C30216 + C30207;
    const double C30219 = C30213 + C16408;
    const double C30217 = C30211 + C16407;
    const double C32029 = C32025 + C28724;
    const double C32027 = C32023 + C18140;
    const double C33027 = C33025 + C16410;
    const double C78445 = C78443 + C18142;
    const double C43228 = C43222 + C43212;
    const double C43223 = C43217 + C42391;
    const double C44705 = C44702 + C42396;
    const double C46668 = C46665 + C43981;
    const double C60769 = C60763 + C43985;
    const double C60764 = C60758 + C43984;
    const double C62510 = C62507 + C45696;
    const double C43227 = C43221 + C43209;
    const double C43224 = C43218 + C42392;
    const double C44706 = C44703 + C42395;
    const double C46667 = C46664 + C43980;
    const double C60768 = C60762 + C43986;
    const double C60765 = C60759 + C43983;
    const double C62511 = C62508 + C45697;
    const double C4942 = C4936 + C4921;
    const double C4937 = C4931 + C4908;
    const double C6547 = C6544 + C6533;
    const double C8547 = C8544 + C8535;
    const double C11006 = C11000 + C10985;
    const double C11001 = C10995 + C10975;
    const double C12861 = C12858 + C12847;
    const double C4941 = C4935 + C4918;
    const double C4938 = C4932 + C4910;
    const double C6548 = C6545 + C6535;
    const double C8546 = C8543 + C8533;
    const double C11005 = C10999 + C10983;
    const double C11002 = C10996 + C10977;
    const double C12862 = C12859 + C12849;
    const double C48415 = C48409 + C48395;
    const double C48412 = C48406 + C48387;
    const double C48410 = C48404 + C48383;
    const double C49905 = C49901 + C49890;
    const double C49903 = C49899 + C49886;
    const double C51850 = C51846 + C51836;
    const double C51848 = C51844 + C51832;
    const double C54588 = C54582 + C54566;
    const double C54586 = C54580 + C54562;
    const double C54583 = C54577 + C54556;
    const double C55655 = C55653 + C55648;
    const double C56893 = C56891 + C56882;
    const double C72202 = C72200 + C72194;
    const double C73894 = C73892 + C73885;
    const double C47969 = C47963 + C47953;
    const double C47964 = C47958 + C47938;
    const double C50363 = C50360 + C48769;
    const double C51317 = C51314 + C49481;
    const double C83693 = C83687 + C49485;
    const double C83688 = C83682 + C49484;
    const double C86340 = C86337 + C52275;
    const double C47968 = C47962 + C47950;
    const double C47965 = C47959 + C47941;
    const double C50362 = C50359 + C48768;
    const double C51316 = C51313 + C49480;
    const double C83692 = C83686 + C49486;
    const double C83689 = C83683 + C49483;
    const double C86341 = C86338 + C52276;
    const double C42783 = C42777 + C42763;
    const double C42780 = C42774 + C42754;
    const double C42778 = C42772 + C42748;
    const double C45172 = C45168 + C45158;
    const double C45170 = C45166 + C45154;
    const double C46139 = C46135 + C46125;
    const double C46137 = C46133 + C46121;
    const double C55086 = C55080 + C55064;
    const double C55084 = C55078 + C55060;
    const double C55081 = C55075 + C55054;
    const double C56214 = C56212 + C56208;
    const double C58669 = C58667 + C58658;
    const double C88627 = C88625 + C88618;
    const double C91256 = C91254 + C91247;
    const double C71431 = C71425 + C71415;
    const double C71426 = C71420 + C71400;
    const double C73782 = C73779 + C72106;
    const double C74757 = C74754 + C72843;
    const double C88205 = C88199 + C72110;
    const double C88200 = C88194 + C72109;
    const double C91685 = C91682 + C75655;
    const double C71430 = C71424 + C71412;
    const double C71427 = C71421 + C71403;
    const double C73781 = C73778 + C72105;
    const double C74756 = C74753 + C72842;
    const double C88204 = C88198 + C72111;
    const double C88201 = C88195 + C72108;
    const double C91684 = C91681 + C75656;
    const double C59988 = C59982 + C59968;
    const double C59985 = C59979 + C59959;
    const double C59983 = C59977 + C59953;
    const double C62399 = C62395 + C62385;
    const double C62397 = C62393 + C62381;
    const double C63401 = C63397 + C63387;
    const double C63399 = C63395 + C63383;
    const double C66152 = C66146 + C66130;
    const double C66150 = C66144 + C66126;
    const double C66147 = C66141 + C66120;
    const double C69450 = C69448 + C69444;
    const double C70652 = C70650 + C70642;
    const double C83248 = C83246 + C83240;
    const double C86772 = C86770 + C86764;
    const double C15590 = C15584 + C15570;
    const double C15587 = C15581 + C15562;
    const double C15585 = C15579 + C15558;
    const double C17158 = C17154 + C17143;
    const double C17156 = C17152 + C17139;
    const double C19123 = C19119 + C19109;
    const double C19121 = C19117 + C19105;
    const double C30228 = C30222 + C30208;
    const double C30225 = C30219 + C30200;
    const double C30223 = C30217 + C30196;
    const double C32033 = C32029 + C32018;
    const double C32031 = C32027 + C32014;
    const double C33029 = C33027 + C33020;
    const double C78447 = C78445 + C78440;
    const double C43234 = C43228 + C43213;
    const double C43229 = C43223 + C43200;
    const double C44708 = C44705 + C44694;
    const double C46671 = C46668 + C46659;
    const double C60775 = C60769 + C60754;
    const double C60770 = C60764 + C60744;
    const double C62513 = C62510 + C62499;
    const double C43233 = C43227 + C43210;
    const double C43230 = C43224 + C43202;
    const double C44709 = C44706 + C44696;
    const double C46670 = C46667 + C46657;
    const double C60774 = C60768 + C60752;
    const double C60771 = C60765 + C60746;
    const double C62514 = C62511 + C62501;
    const double C48416 = C48412 + C48413;
    const double C58120 = C51849 + C51850;
    const double C58119 = C51850 + C51849;
    const double C72190 = C54588 + C54587;
    const double C47975 = C47969 + C47954;
    const double C47970 = C47964 + C47939;
    const double C50366 = C50363 + C50354;
    const double C51320 = C51317 + C51308;
    const double C83699 = C83693 + C83678;
    const double C83694 = C83688 + C83668;
    const double C86343 = C86340 + C86329;
    const double C47974 = C47968 + C47951;
    const double C47971 = C47965 + C47942;
    const double C50365 = C50362 + C50352;
    const double C51319 = C51316 + C51306;
    const double C83698 = C83692 + C83676;
    const double C83695 = C83689 + C83670;
    const double C86344 = C86341 + C86331;
    const double C42784 = C42780 + C42781;
    const double C57444 = C46138 + C46139;
    const double C57443 = C46139 + C46138;
    const double C88614 = C55086 + C55085;
    const double C71437 = C71431 + C71416;
    const double C71432 = C71426 + C71401;
    const double C73785 = C73782 + C73773;
    const double C74760 = C74757 + C74748;
    const double C88211 = C88205 + C88190;
    const double C88206 = C88200 + C88180;
    const double C91688 = C91685 + C91676;
    const double C71436 = C71430 + C71413;
    const double C71433 = C71427 + C71404;
    const double C73784 = C73781 + C73771;
    const double C74759 = C74756 + C74746;
    const double C88210 = C88204 + C88188;
    const double C88207 = C88201 + C88182;
    const double C91687 = C91684 + C91674;
    const double C59989 = C59985 + C59986;
    const double C68244 = C62398 + C62399;
    const double C68243 = C62399 + C62398;
    const double C83236 = C66152 + C66151;
    const double C15591 = C15587 + C15588;
    const double C80808 = C19122 + C19123;
    const double C80807 = C19123 + C19122;
    const double C30229 = C30225 + C30226;
    const double C48417 = C48416 * C93706;
    const double C88621 = C88614 * C93585;
    const double C59990 = C59989 * C93680;
    const double C15592 = C15591 * C93706;
    d2eexx[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                      C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                      C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                         C93706 * C42379 +
                     (C43229 + C43230 + C43231) * C93706 * C93694) *
                        C93639 * C1979 -
                    ((C43232 + C43233 + C43234) * C93706 * C93694 +
                     (C43231 + C43230 + C43229) * C93706 * C42379) *
                        C93639 * C1980) *
                       C1981 +
                   (((C44708 + C44709 + C44710) * C93706 * C42379 +
                     (C42381 * C809 + C44699 + C44699 + C93854 * C825 +
                      C42383 * C810 + C44700 + C44700 + C93842 * C826 +
                      C42385 * C811 + C44701 + C44701 + C42378 * C827) *
                         C93706 * C93694) *
                        C93639 * C1980 -
                    ((C44710 + C44709 + C44708) * C93706 * C93694 +
                     (C42385 * C111 + C42397 + C42397 + C42378 * C123 +
                      C42383 * C110 + C42398 + C42398 + C93842 * C122 +
                      C42381 * C109 + C42399 + C42399 + C93854 * C121) *
                         C93706 * C42379) *
                        C93639 * C1979) *
                       C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C42382 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93854 +
            (C42506 + C42507) * C42384 + (C42508 + C42509) * C93842 +
            C42518 * C42386 + C42519 * C42378) *
               C93706 * C93639 * C1979 -
           ((C44825 + C44826) * C42378 + (C44827 + C44828) * C42386 +
            (C44829 + C44830) * C93842 + (C44831 + C44832) * C42384 +
            (C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                C93854 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C42382) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C44832 + C44831) * C42382 + (C44830 + C44829) * C93854 +
            (C44828 + C44827) * C42384 + (C44826 + C44825) * C93842 +
            (C42479 * C804 + C42379 * C886 + C42480 * C811 + C93694 * C893) *
                C42386 +
            (C42479 * C812 + C42379 * C894 + C42480 * C819 + C93694 * C901) *
                C42378) *
               C93706 * C93639 * C1980 -
           ((C42514 + C42515) * C42378 + (C42516 + C42517) * C42386 +
            (C42513 + C42512) * C93842 + (C42511 + C42510) * C42384 +
            (C42509 + C42508) * C93854 + (C42507 + C42506) * C42382) *
               C93706 * C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C42382 +
             (C275 * C114 + C93706 * C282) * C93854 + C305 * C42384 +
             C306 * C93842 + C307 * C42386 + C308 * C42378) *
                C42379 +
            (C43383 + C43384 + C43385 + C43386 + C43387 + C43388) * C93694) *
               C93639 * C1979 -
           ((C43389 + C43390 + C43391 + C43392 + C43393 + C43394) * C93694 +
            (C43388 + C43387 + C43386 + C43385 + C43384 + C43383) * C42379) *
               C93639 * C1980) *
              C1981 +
          (((C44931 + C44932 + C44933 + C44934 + C44935 + C44936) * C42379 +
            (C5128 * C42382 + C5127 * C93854 + C5126 * C42384 + C5125 * C93842 +
             (C275 * C811 + C93706 * C959) * C42386 +
             (C275 * C819 + C93706 * C967) * C42378) *
                C93694) *
               C93639 * C1980 -
           ((C44936 + C44935 + C44934 + C44933 + C44932 + C44931) * C93694 +
            (C310 * C42378 + C309 * C42386 + C308 * C93842 + C307 * C42384 +
             C306 * C93854 + C305 * C42382) *
                C42379) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C42479 +
                     (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                      C93842 * C363 + C42386 * C191 + C42378 * C364) *
                         C42379 +
                     (C43493 + C43494 + C43495) * C42480 +
                     (C43496 + C43497 + C43498) * C93694) *
                        C93706 * C93639 * C1979 -
                    ((C43499 + C43500 + C43501) * C93694 +
                     (C43502 + C43503 + C43504) * C42480 +
                     (C43498 + C43497 + C43496) * C42379 +
                     (C43495 + C43494 + C43493) * C42479) *
                        C93706 * C93639 * C1980) *
                       C1981 +
                   (((C45047 + C45048 + C45049) * C42479 +
                     (C45050 + C45051 + C45052) * C42379 +
                     (C42382 * C809 + C93854 * C817 + C42384 * C810 +
                      C93842 * C818 + C42386 * C811 + C42378 * C819) *
                         C42480 +
                     (C42382 * C891 + C93854 * C1023 + C42384 * C892 +
                      C93842 * C1024 + C42386 * C893 + C42378 * C1025) *
                         C93694) *
                        C93706 * C93639 * C1980 -
                    ((C45052 + C45051 + C45050) * C93694 +
                     (C45049 + C45048 + C45047) * C42480 +
                     (C42386 * C192 + C42378 * C365 + C42384 * C191 +
                      C93842 * C364 + C42382 * C190 + C93854 * C363) *
                         C42379 +
                     (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                      C93842 * C116 + C42382 * C109 + C93854 * C115) *
                         C42479) *
                        C93706 * C93639 * C1979) *
                       C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 +
                      C42742 * C807 + C42745 + C42745 + C93694 * C1079) *
                         C93854 +
                     (C42778 + C42779) * C93842 + C42784 * C42378) *
                        C93706 * C93639 * C1979 -
                    ((C45169 + C45170) * C42378 + (C45171 + C45172) * C93842 +
                     (C42742 * C808 + C43583 + C43583 + C93694 * C1080 +
                      C42741 * C807 + C43584 + C43584 + C42379 * C1079) *
                         C93854) *
                        C93706 * C93639 * C1980) *
                       C1981 +
                   (((C45172 + C45171) * C93854 + (C45170 + C45169) * C93842 +
                     (C42741 * C804 + C45159 + C45159 + C42379 * C1076 +
                      C42742 * C811 + C45160 + C45160 + C93694 * C1083) *
                         C42378) *
                        C93706 * C93639 * C1980 -
                    ((C42782 + C42783) * C42378 + (C42781 + C42780) * C93842 +
                     (C42779 + C42778) * C93854) *
                        C93706 * C93639 * C1979) *
                       C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C42479 +
             (C275 * C189 + C93706 * C501) * C42379 + C5123 * C42480 +
             C5426 * C93694) *
                C93854 +
            (C42859 + C42860 + C42861 + C42862) * C93842 + C42873 * C42378) *
               C93639 * C1979 -
           ((C45271 + C45272 + C45273 + C45274) * C42378 +
            (C45275 + C45276 + C45277 + C45278) * C93842 +
            (C5429 * C93694 + C5130 * C42480 + C5426 * C42379 +
             C5123 * C42479) *
                C93854) *
               C93639 * C1980) *
              C1981 +
          (((C45278 + C45277 + C45276 + C45275) * C93854 +
            (C45274 + C45273 + C45272 + C45271) * C93842 +
            (C2158 * C42479 + C2389 * C42379 +
             (C275 * C811 + C93706 * C959) * C42480 +
             (C275 * C893 + C93706 * C1149) * C93694) *
                C42378) *
               C93639 * C1980 -
           ((C42867 + C42868 + C42869 + C42870) * C42378 +
            (C42866 + C42865 + C42864 + C42863) * C93842 +
            (C42862 + C42861 + C42860 + C42859) * C93854) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                       C93842 * C115 + C42386 * C110 + C42378 * C116) *
                          C275 +
                      (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                       C93842 * C580 + C42386 * C278 + C42378 * C581) *
                          C93706) *
                         C42379 +
                     ((C43493 + C43494 + C43495) * C275 +
                      (C43751 + C43752 + C43753) * C93706) *
                         C93694) *
                        C93639 * C1979 -
                    (((C43754 + C43755 + C43756) * C93706 +
                      (C43502 + C43503 + C43504) * C275) *
                         C93694 +
                     ((C43753 + C43752 + C43751) * C93706 +
                      (C43495 + C43494 + C43493) * C275) *
                         C42379) *
                        C93639 * C1980) *
                       C1981 +
                   ((((C45047 + C45048 + C45049) * C275 +
                      (C45383 + C45384 + C45385) * C93706) *
                         C42379 +
                     ((C42382 * C809 + C93854 * C817 + C42384 * C810 +
                       C93842 * C818 + C42386 * C811 + C42378 * C819) *
                          C275 +
                      (C42382 * C957 + C93854 * C1205 + C42384 * C958 +
                       C93842 * C1206 + C42386 * C959 + C42378 * C1207) *
                          C93706) *
                         C93694) *
                        C93639 * C1980 -
                    (((C45385 + C45384 + C45383) * C93706 +
                      (C45049 + C45048 + C45047) * C275) *
                         C93694 +
                     ((C42386 * C279 + C42378 * C582 + C42384 * C278 +
                       C93842 * C581 + C42382 * C277 + C93854 * C580) *
                          C93706 +
                      (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                       C93842 * C116 + C42382 * C109 + C93854 * C115) *
                          C275) *
                         C42379) *
                        C93639 * C1979) *
                       C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C275 +
             (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                 C93706) *
                C93854 +
            ((C42506 + C42507) * C275 + (C43035 + C43036) * C93706) * C93842 +
            C43043 * C42378) *
               C93639 * C1979 -
           (((C45492 + C45493) * C93706 + (C44827 + C44828) * C275) * C42378 +
            ((C45494 + C45495) * C93706 + (C44831 + C44832) * C275) * C93842 +
            ((C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                 C93706 +
             (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                 C275) *
                C93854) *
               C93639 * C1980) *
              C1981 +
          ((((C44832 + C44831) * C275 + (C45495 + C45494) * C93706) * C93854 +
            ((C44828 + C44827) * C275 + (C45493 + C45492) * C93706) * C93842 +
            ((C42479 * C804 + C42379 * C886 + C42480 * C811 + C93694 * C893) *
                 C275 +
             (C42479 * C952 + C42379 * C1258 + C42480 * C959 + C93694 * C1265) *
                 C93706) *
                C42378) *
               C93639 * C1980 -
           (((C43039 + C43040) * C93706 + (C42516 + C42517) * C275) * C42378 +
            ((C43038 + C43037) * C93706 + (C42511 + C42510) * C275) * C93842 +
            ((C43036 + C43035) * C93706 + (C42507 + C42506) * C275) * C93854) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C713 * C108 + C721 + C721 + C93706 * C714) * C42379 +
                      C5698 * C93694) *
                         C93854 +
                     (C43118 + C43119) * C93842 + C43124 * C42378) *
                        C93639 * C1979 -
                    ((C45594 + C45595) * C42378 + (C45596 + C45597) * C93842 +
                     (C5701 * C93694 + C5698 * C42379) * C93854) *
                        C93639 * C1980) *
                       C1981 +
                   (((C45597 + C45596) * C93854 + (C45595 + C45594) * C93842 +
                     (C2624 * C42379 +
                      (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C93694) *
                         C42378) *
                        C93639 * C1980 -
                    ((C43122 + C43123) * C42378 + (C43121 + C43120) * C93842 +
                     (C43119 + C43118) * C93854) *
                        C93639 * C1979) *
                       C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                      C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                      C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                         C93706 * C42379 +
                     (C43229 + C43230 + C43231) * C93706 * C93694) *
                        C2695 -
                    ((C46669 + C46670 + C46671) * C93706 * C93694 +
                     (C42385 * C1386 + C43982 + C43982 + C42378 * C1402 +
                      C42383 * C1387 + C43983 + C43983 + C93842 * C1403 +
                      C42381 * C1388 + C43984 + C43984 + C93854 * C1404) *
                         C93706 * C42379) *
                        C2696) *
                       C1979 +
                   (((C46671 + C46670 + C46669) * C93706 * C42379 +
                     (C42381 * C8520 + C46660 + C46660 + C93854 * C8526 +
                      C42383 * C8521 + C46661 + C46661 + C93842 * C8527 +
                      C42385 * C8522 + C46662 + C46662 + C42378 * C8528) *
                         C93706 * C93694) *
                        C2696 -
                    ((C43232 + C43233 + C43234) * C93706 * C93694 +
                     (C43231 + C43230 + C43229) * C93706 * C42379) *
                        C2695) *
                       C1980) *
                  C93613) /
                 (p * q * std::sqrt(p + q));
    d2eexy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C42382 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93854 +
            (C42506 + C42507) * C42384 + (C42508 + C42509) * C93842 +
            C42518 * C42386 + C42519 * C42378) *
               C93706 * C2695 -
           ((C45816 + C45817) * C42378 + (C45818 + C45819) * C42386 +
            (C45820 + C45821) * C93842 + (C45822 + C45823) * C42384 +
            (C42480 * C3413 + C93694 * C3495 + C42479 * C1396 +
             C42379 * C1478) *
                C93854 +
            (C42480 * C3409 + C93694 * C3491 + C42479 * C1388 +
             C42379 * C1470) *
                C42382) *
               C93706 * C2696) *
              C1979 +
          (((C42479 * C3409 + C42379 * C3491 + C42480 * C8520 +
             C93694 * C8645) *
                C42382 +
            (C42479 * C3413 + C42379 * C3495 + C42480 * C8523 +
             C93694 * C8648) *
                C93854 +
            (C42479 * C3410 + C42379 * C3492 + C42480 * C8521 +
             C93694 * C8646) *
                C42384 +
            (C42479 * C3414 + C42379 * C3496 + C42480 * C8524 +
             C93694 * C8649) *
                C93842 +
            (C42479 * C3411 + C42379 * C3493 + C42480 * C8522 +
             C93694 * C8647) *
                C42386 +
            (C42479 * C3415 + C42379 * C3497 + C42480 * C8525 +
             C93694 * C8650) *
                C42378) *
               C93706 * C2696 -
           ((C44825 + C44826) * C42378 + (C44827 + C44828) * C42386 +
            (C44829 + C44830) * C93842 + (C44831 + C44832) * C42384 +
            (C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                C93854 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C42382) *
               C93706 * C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C42382 +
             (C275 * C114 + C93706 * C282) * C93854 + C305 * C42384 +
             C306 * C93842 + C307 * C42386 + C308 * C42378) *
                C42379 +
            (C43383 + C43384 + C43385 + C43386 + C43387 + C43388) * C93694) *
               C2695 -
           ((C46868 + C46869 + C46870 + C46871 + C46872 + C46873) * C93694 +
            (C2873 * C42378 + C2874 * C42386 + C2875 * C93842 + C2876 * C42384 +
             (C275 * C1396 + C93706 * C1544) * C93854 +
             (C275 * C1388 + C93706 * C1536) * C42382) *
                C42379) *
               C2696) *
              C1979 +
          (((C46873 + C46872 + C46871 + C46870 + C46869 + C46868) * C42379 +
            (C19339 * C42382 + C19338 * C93854 + C18365 * C42384 +
             C18364 * C93842 + (C275 * C8522 + C93706 * C8751) * C42386 +
             (C275 * C8525 + C93706 * C8754) * C42378) *
                C93694) *
               C2696 -
           ((C43389 + C43390 + C43391 + C43392 + C43393 + C43394) * C93694 +
            (C43388 + C43387 + C43386 + C43385 + C43384 + C43383) * C42379) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyx[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C42479 +
                     (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                      C93842 * C363 + C42386 * C191 + C42378 * C364) *
                         C42379 +
                     (C43493 + C43494 + C43495) * C42480 +
                     (C43496 + C43497 + C43498) * C93694) *
                        C93706 * C2695 -
                    ((C46984 + C46985 + C46986) * C93694 +
                     (C46987 + C46988 + C46989) * C42480 +
                     (C42386 * C1468 + C42378 * C1600 + C42384 * C1469 +
                      C93842 * C1601 + C42382 * C1470 + C93854 * C1602) *
                         C42379 +
                     (C42386 * C1386 + C42378 * C1394 + C42384 * C1387 +
                      C93842 * C1395 + C42382 * C1388 + C93854 * C1396) *
                         C42479) *
                        C93706 * C2696) *
                       C1979 +
                   (((C46989 + C46988 + C46987) * C42479 +
                     (C46986 + C46985 + C46984) * C42379 +
                     (C42382 * C8520 + C93854 * C8523 + C42384 * C8521 +
                      C93842 * C8524 + C42386 * C8522 + C42378 * C8525) *
                         C42480 +
                     (C42382 * C8645 + C93854 * C8865 + C42384 * C8646 +
                      C93842 * C8866 + C42386 * C8647 + C42378 * C8867) *
                         C93694) *
                        C93706 * C2696 -
                    ((C43499 + C43500 + C43501) * C93694 +
                     (C43502 + C43503 + C43504) * C42480 +
                     (C43498 + C43497 + C43496) * C42379 +
                     (C43495 + C43494 + C43493) * C42479) *
                        C93706 * C2695) *
                       C1980) *
                  C93613) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 +
                      C42742 * C807 + C42745 + C42745 + C93694 * C1079) *
                         C93854 +
                     (C42778 + C42779) * C93842 + C42784 * C42378) *
                        C93706 * C2695 -
                    ((C46136 + C46137) * C42378 + (C46138 + C46139) * C93842 +
                     (C42742 * C3409 + C44291 + C44291 + C93694 * C3709 +
                      C42741 * C1388 + C44292 + C44292 + C42379 * C1660) *
                         C93854) *
                        C93706 * C2696) *
                       C1979 +
                   (((C42741 * C3409 + C47088 + C47088 + C42379 * C3709 +
                      C42742 * C8520 + C47089 + C47089 + C93694 * C8984) *
                         C93854 +
                     (C42741 * C3410 + C47090 + C47090 + C42379 * C3710 +
                      C42742 * C8521 + C47091 + C47091 + C93694 * C8985) *
                         C93842 +
                     (C42741 * C3411 + C47092 + C47092 + C42379 * C3711 +
                      C42742 * C8522 + C47093 + C47093 + C93694 * C8986) *
                         C42378) *
                        C93706 * C2696 -
                    ((C45169 + C45170) * C42378 + (C45171 + C45172) * C93842 +
                     (C42742 * C808 + C43583 + C43583 + C93694 * C1080 +
                      C42741 * C807 + C43584 + C43584 + C42379 * C1079) *
                         C93854) *
                        C93706 * C2695) *
                       C1980) *
                  C93613) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C42479 +
             (C275 * C189 + C93706 * C501) * C42379 + C5123 * C42480 +
             C5426 * C93694) *
                C93854 +
            (C42859 + C42860 + C42861 + C42862) * C93842 + C42873 * C42378) *
               C2695 -
           ((C46238 + C46239 + C46240 + C46241) * C42378 +
            (C46242 + C46243 + C46244 + C46245) * C93842 +
            (C9097 * C93694 + C8765 * C42480 +
             (C275 * C1470 + C93706 * C1726) * C42379 +
             (C275 * C1388 + C93706 * C1536) * C42479) *
                C93854) *
               C2696) *
              C1979 +
          (((C8765 * C42479 + C9097 * C42379 + C19339 * C42480 +
             C19674 * C93694) *
                C93854 +
            (C7772 * C42479 + C8100 * C42379 + C18365 * C42480 +
             C18685 * C93694) *
                C93842 +
            (C7770 * C42479 + C8099 * C42379 +
             (C275 * C8522 + C93706 * C8751) * C42480 +
             (C275 * C8647 + C93706 * C9093) * C93694) *
                C42378) *
               C2696 -
           ((C45271 + C45272 + C45273 + C45274) * C42378 +
            (C45275 + C45276 + C45277 + C45278) * C93842 +
            (C5429 * C93694 + C5130 * C42480 + C5426 * C42379 +
             C5123 * C42479) *
                C93854) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezx[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                       C93842 * C115 + C42386 * C110 + C42378 * C116) *
                          C275 +
                      (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                       C93842 * C580 + C42386 * C278 + C42378 * C581) *
                          C93706) *
                         C42379 +
                     ((C43493 + C43494 + C43495) * C275 +
                      (C43751 + C43752 + C43753) * C93706) *
                         C93694) *
                        C2695 -
                    (((C47296 + C47297 + C47298) * C93706 +
                      (C46987 + C46988 + C46989) * C275) *
                         C93694 +
                     ((C42386 * C1534 + C42378 * C1782 + C42384 * C1535 +
                       C93842 * C1783 + C42382 * C1536 + C93854 * C1784) *
                          C93706 +
                      (C42386 * C1386 + C42378 * C1394 + C42384 * C1387 +
                       C93842 * C1395 + C42382 * C1388 + C93854 * C1396) *
                          C275) *
                         C42379) *
                        C2696) *
                       C1979 +
                   ((((C46989 + C46988 + C46987) * C275 +
                      (C47298 + C47297 + C47296) * C93706) *
                         C42379 +
                     ((C42382 * C8520 + C93854 * C8523 + C42384 * C8521 +
                       C93842 * C8524 + C42386 * C8522 + C42378 * C8525) *
                          C275 +
                      (C42382 * C8749 + C93854 * C9195 + C42384 * C8750 +
                       C93842 * C9196 + C42386 * C8751 + C42378 * C9197) *
                          C93706) *
                         C93694) *
                        C2696 -
                    (((C43754 + C43755 + C43756) * C93706 +
                      (C43502 + C43503 + C43504) * C275) *
                         C93694 +
                     ((C43753 + C43752 + C43751) * C93706 +
                      (C43495 + C43494 + C43493) * C275) *
                         C42379) *
                        C2695) *
                       C1980) *
                  C93613) /
                 (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C275 +
             (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                 C93706) *
                C93854 +
            ((C42506 + C42507) * C275 + (C43035 + C43036) * C93706) * C93842 +
            C43043 * C42378) *
               C2695 -
           (((C46450 + C46451) * C93706 + (C45818 + C45819) * C275) * C42378 +
            ((C46452 + C46453) * C93706 + (C45822 + C45823) * C275) * C93842 +
            ((C42480 * C3565 + C93694 * C3923 + C42479 * C1536 +
              C42379 * C1842) *
                 C93706 +
             (C42480 * C3409 + C93694 * C3491 + C42479 * C1388 +
              C42379 * C1470) *
                 C275) *
                C93854) *
               C2696) *
              C1979 +
          ((((C42479 * C3409 + C42379 * C3491 + C42480 * C8520 +
              C93694 * C8645) *
                 C275 +
             (C42479 * C3565 + C42379 * C3923 + C42480 * C8749 +
              C93694 * C9305) *
                 C93706) *
                C93854 +
            ((C42479 * C3410 + C42379 * C3492 + C42480 * C8521 +
              C93694 * C8646) *
                 C275 +
             (C42479 * C3566 + C42379 * C3924 + C42480 * C8750 +
              C93694 * C9306) *
                 C93706) *
                C93842 +
            ((C42479 * C3411 + C42379 * C3493 + C42480 * C8522 +
              C93694 * C8647) *
                 C275 +
             (C42479 * C3567 + C42379 * C3925 + C42480 * C8751 +
              C93694 * C9307) *
                 C93706) *
                C42378) *
               C2696 -
           (((C45492 + C45493) * C93706 + (C44827 + C44828) * C275) * C42378 +
            ((C45494 + C45495) * C93706 + (C44831 + C44832) * C275) * C93842 +
            ((C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                 C93706 +
             (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                 C275) *
                C93854) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C42379 +
             C5698 * C93694) *
                C93854 +
            (C43118 + C43119) * C93842 + C43124 * C42378) *
               C2695 -
           ((C46552 + C46553) * C42378 + (C46554 + C46555) * C93842 +
            (C9417 * C93694 +
             (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C42379) *
                C93854) *
               C2696) *
              C1979 +
          (((C9417 * C42379 + C19993 * C93694) * C93854 +
            (C8420 * C42379 + C18996 * C93694) * C93842 +
            (C8419 * C42379 +
             (C713 * C8522 + C9414 + C9414 + C93706 * C9408) * C93694) *
                C42378) *
               C2696 -
           ((C45594 + C45595) * C42378 + (C45596 + C45597) * C93842 +
            (C5701 * C93694 + C5698 * C42379) * C93854) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                     C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                     C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                        C93706 * C42379 +
                    (C43229 + C43230 + C43231) * C93706 * C93694) *
                       C93639 * C800 -
                   ((C43232 + C43233 + C43234) * C93706 * C93694 +
                    (C43231 + C43230 + C43229) * C93706 * C42379) *
                       C93639 * C801 +
                   ((C43234 + C43233 + C43232) * C93706 * C42379 +
                    (C42381 * C4897 + C43214 + C43214 + C93854 * C4903 +
                     C42383 * C4898 + C43215 + C43215 + C93842 * C4904 +
                     C42385 * C4899 + C43216 + C43216 + C42378 * C4905) *
                        C93706 * C93694) *
                       C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                     C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                     C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                        C93706 * C42379 +
                    (C42381 * C807 + C42391 + C42391 + C93854 * C823 +
                     C42383 * C806 + C42392 + C42392 + C93842 * C822 +
                     C42385 * C805 + C42393 + C42393 + C42378 * C821) *
                        C93706 * C93694) *
                       C93639 * C93625 * C97 -
                   ((C42385 * C804 + C42394 + C42394 + C42378 * C820 +
                     C42383 * C805 + C42395 + C42395 + C93842 * C821 +
                     C42381 * C806 + C42396 + C42396 + C93854 * C822) *
                        C93706 * C93694 +
                    (C42385 * C111 + C42397 + C42397 + C42378 * C123 +
                     C42383 * C110 + C42398 + C42398 + C93842 * C122 +
                     C42381 * C109 + C42399 + C42399 + C93854 * C121) *
                        C93706 * C42379) *
                       C93639 * C93625 * C98 +
                   ((C42381 * C110 + C42400 + C42400 + C93854 * C122 +
                     C42383 * C111 + C42401 + C42401 + C93842 * C123 +
                     C42385 * C112 + C42402 + C42402 + C42378 * C124) *
                        C93706 * C42379 +
                    (C42381 * C805 + C42403 + C42403 + C93854 * C821 +
                     C42383 * C804 + C42404 + C42404 + C93842 * C820 +
                     C42385 * C1983 + C42405 + C42405 + C42378 * C1985) *
                        C93706 * C93694) *
                       C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                     C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                     C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                        C93706 * C42379 +
                    (C43229 + C43230 + C43231) * C93706 * C93694) *
                       C1382 -
                   ((C42385 * C3411 + C43979 + C43979 + C42378 * C3419 +
                     C42383 * C3410 + C43980 + C43980 + C93842 * C3418 +
                     C42381 * C3409 + C43981 + C43981 + C93854 * C3417) *
                        C93706 * C93694 +
                    (C42385 * C1386 + C43982 + C43982 + C42378 * C1402 +
                     C42383 * C1387 + C43983 + C43983 + C93842 * C1403 +
                     C42381 * C1388 + C43984 + C43984 + C93854 * C1404) *
                        C93706 * C42379) *
                       C1383 +
                   ((C42381 * C1389 + C43985 + C43985 + C93854 * C1405 +
                     C42383 * C1390 + C43986 + C43986 + C93842 * C1406 +
                     C42385 * C1391 + C43987 + C43987 + C42378 * C1407) *
                        C93706 * C42379 +
                    (C42381 * C5775 + C43988 + C43988 + C93854 * C5781 +
                     C42383 * C5776 + C43989 + C43989 + C93842 * C5782 +
                     C42385 * C5777 + C43990 + C43990 + C42378 * C5783) *
                        C93706 * C93694) *
                       C1384) *
                  C93625 * C93613) /
                     (p * q * std::sqrt(p + q));
    d2eexy[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
               C42382 +
           (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
               C93854 +
           (C42506 + C42507) * C42384 + (C42508 + C42509) * C93842 +
           C42518 * C42386 + C42519 * C42378) *
              C93706 * C93639 * C800 -
          ((C42480 * C818 + C93694 * C900 + C42479 * C813 + C42379 * C895) *
               C42378 +
           (C42480 * C810 + C93694 * C892 + C42479 * C805 + C42379 * C887) *
               C42386 +
           (C42480 * C817 + C93694 * C899 + C42479 * C814 + C42379 * C896) *
               C93842 +
           (C42480 * C809 + C93694 * C891 + C42479 * C806 + C42379 * C888) *
               C42384 +
           (C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
               C93854 +
           (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
               C42382) *
              C93706 * C93639 * C801 +
          ((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
               C42382 +
           (C42479 * C816 + C42379 * C898 + C42480 * C4900 + C93694 * C5019) *
               C93854 +
           (C42479 * C809 + C42379 * C891 + C42480 * C4898 + C93694 * C5017) *
               C42384 +
           (C42479 * C817 + C42379 * C899 + C42480 * C4901 + C93694 * C5020) *
               C93842 +
           (C42479 * C810 + C42379 * C892 + C42480 * C4899 + C93694 * C5018) *
               C42386 +
           (C42479 * C818 + C42379 * C900 + C42480 * C4902 + C93694 * C5021) *
               C42378) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
               C42382 +
           (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
               C93854 +
           (C42506 + C42507) * C42384 + (C42508 + C42509) * C93842 +
           C42518 * C42386 + C42519 * C42378) *
              C93706 * C93639 * C93625 * C97 -
          ((C42514 + C42515) * C42378 + (C42516 + C42517) * C42386 +
           (C42513 + C42512) * C93842 + (C42511 + C42510) * C42384 +
           (C42509 + C42508) * C93854 + (C42507 + C42506) * C42382) *
              C93706 * C93639 * C93625 * C98 +
          (C42518 * C42382 + C42519 * C93854 + (C42517 + C42516) * C42384 +
           (C42515 + C42514) * C93842 +
           (C42479 * C112 + C42379 * C193 + C42480 * C1983 + C93694 * C2056) *
               C42386 +
           (C42479 * C118 + C42379 * C199 + C42480 * C1984 + C93694 * C2057) *
               C42378) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
               C42382 +
           (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
               C93854 +
           (C42506 + C42507) * C42384 + (C42508 + C42509) * C93842 +
           C42518 * C42386 + C42519 * C42378) *
              C93706 * C1382 -
          ((C42480 * C3415 + C93694 * C3497 + C42479 * C1394 + C42379 * C1476) *
               C42378 +
           (C42480 * C3411 + C93694 * C3493 + C42479 * C1386 + C42379 * C1468) *
               C42386 +
           (C42480 * C3414 + C93694 * C3496 + C42479 * C1395 + C42379 * C1477) *
               C93842 +
           (C42480 * C3410 + C93694 * C3492 + C42479 * C1387 + C42379 * C1469) *
               C42384 +
           (C42480 * C3413 + C93694 * C3495 + C42479 * C1396 + C42379 * C1478) *
               C93854 +
           (C42480 * C3409 + C93694 * C3491 + C42479 * C1388 + C42379 * C1470) *
               C42382) *
              C93706 * C1383 +
          ((C42479 * C1389 + C42379 * C1471 + C42480 * C5775 + C93694 * C5870) *
               C42382 +
           (C42479 * C1397 + C42379 * C1479 + C42480 * C5778 + C93694 * C5873) *
               C93854 +
           (C42479 * C1390 + C42379 * C1472 + C42480 * C5776 + C93694 * C5871) *
               C42384 +
           (C42479 * C1398 + C42379 * C1480 + C42480 * C5779 + C93694 * C5874) *
               C93842 +
           (C42479 * C1391 + C42379 * C1473 + C42480 * C5777 + C93694 * C5872) *
               C42386 +
           (C42479 * C1399 + C42379 * C1481 + C42480 * C5780 + C93694 * C5875) *
               C42378) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C42382 +
            (C275 * C114 + C93706 * C282) * C93854 + C305 * C42384 +
            C306 * C93842 + C307 * C42386 + C308 * C42378) *
               C42379 +
           (C43383 + C43384 + C43385 + C43386 + C43387 + C43388) * C93694) *
              C93639 * C800 -
          ((C43389 + C43390 + C43391 + C43392 + C43393 + C43394) * C93694 +
           (C43388 + C43387 + C43386 + C43385 + C43384 + C43383) * C42379) *
              C93639 * C801 +
          ((C43394 + C43393 + C43392 + C43391 + C43390 + C43389) * C42379 +
           (C15769 * C42382 + C15768 * C93854 + C15767 * C42384 +
            C15766 * C93842 + (C275 * C4899 + C93706 * C5098) * C42386 +
            (C275 * C4902 + C93706 * C5101) * C42378) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C42382 +
            (C275 * C114 + C93706 * C282) * C93854 + C305 * C42384 +
            C306 * C93842 + C307 * C42386 + C308 * C42378) *
               C42379 +
           (C5123 * C42382 + C5124 * C93854 + C2162 * C42384 + C2161 * C93842 +
            C2160 * C42386 + C2159 * C42378) *
               C93694) *
              C93639 * C93625 * C97 -
          ((C2157 * C42378 + C2158 * C42386 + C2159 * C93842 + C2160 * C42384 +
            C2161 * C93854 + C2162 * C42382) *
               C93694 +
           (C310 * C42378 + C309 * C42386 + C308 * C93842 + C307 * C42384 +
            C306 * C93854 + C305 * C42382) *
               C42379) *
              C93639 * C93625 * C98 +
          ((C307 * C42382 + C308 * C93854 + C309 * C42384 + C310 * C93842 +
            C312 * C42386 + C311 * C42378) *
               C42379 +
           (C2160 * C42382 + C2159 * C93854 + C2158 * C42384 + C2157 * C93842 +
            (C275 * C1983 + C93706 * C2142) * C42386 +
            (C275 * C1984 + C93706 * C2143) * C42378) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C42382 +
            (C275 * C114 + C93706 * C282) * C93854 + C305 * C42384 +
            C306 * C93842 + C307 * C42386 + C308 * C42378) *
               C42379 +
           (C43383 + C43384 + C43385 + C43386 + C43387 + C43388) * C93694) *
              C1382 -
          ((C7769 * C42378 + C7770 * C42386 + C7771 * C93842 + C7772 * C42384 +
            C8764 * C93854 + C8765 * C42382) *
               C93694 +
           (C2873 * C42378 + C2874 * C42386 + C2875 * C93842 + C2876 * C42384 +
            (C275 * C1396 + C93706 * C1544) * C93854 +
            (C275 * C1388 + C93706 * C1536) * C42382) *
               C42379) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C42382 +
            (C275 * C1397 + C93706 * C1545) * C93854 +
            (C275 * C1390 + C93706 * C1538) * C42384 +
            (C275 * C1398 + C93706 * C1546) * C93842 +
            (C275 * C1391 + C93706 * C1539) * C42386 +
            (C275 * C1399 + C93706 * C1547) * C42378) *
               C42379 +
           ((C275 * C5775 + C93706 * C5950) * C42382 +
            (C275 * C5778 + C93706 * C5953) * C93854 +
            (C275 * C5776 + C93706 * C5951) * C42384 +
            (C275 * C5779 + C93706 * C5954) * C93842 +
            (C275 * C5777 + C93706 * C5952) * C42386 +
            (C275 * C5780 + C93706 * C5955) * C42378) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                     C93842 * C115 + C42386 * C110 + C42378 * C116) *
                        C42479 +
                    (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                     C93842 * C363 + C42386 * C191 + C42378 * C364) *
                        C42379 +
                    (C43493 + C43494 + C43495) * C42480 +
                    (C43496 + C43497 + C43498) * C93694) *
                       C93706 * C93639 * C800 -
                   ((C43499 + C43500 + C43501) * C93694 +
                    (C43502 + C43503 + C43504) * C42480 +
                    (C43498 + C43497 + C43496) * C42379 +
                    (C43495 + C43494 + C43493) * C42479) *
                       C93706 * C93639 * C801 +
                   ((C43504 + C43503 + C43502) * C42479 +
                    (C43501 + C43500 + C43499) * C42379 +
                    (C42382 * C4897 + C93854 * C4900 + C42384 * C4898 +
                     C93842 * C4901 + C42386 * C4899 + C42378 * C4902) *
                        C42480 +
                    (C42382 * C5016 + C93854 * C5212 + C42384 * C5017 +
                     C93842 * C5213 + C42386 * C5018 + C42378 * C5214) *
                        C93694) *
                       C93706 * C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                     C93842 * C115 + C42386 * C110 + C42378 * C116) *
                        C42479 +
                    (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                     C93842 * C363 + C42386 * C191 + C42378 * C364) *
                        C42379 +
                    (C42382 * C807 + C93854 * C815 + C42384 * C806 +
                     C93842 * C814 + C42386 * C805 + C42378 * C813) *
                        C42480 +
                    (C42382 * C889 + C93854 * C1021 + C42384 * C888 +
                     C93842 * C1020 + C42386 * C887 + C42378 * C1019) *
                        C93694) *
                       C93706 * C93639 * C93625 * C97 -
                   ((C42386 * C886 + C42378 * C1018 + C42384 * C887 +
                     C93842 * C1019 + C42382 * C888 + C93854 * C1020) *
                        C93694 +
                    (C42386 * C804 + C42378 * C812 + C42384 * C805 +
                     C93842 * C813 + C42382 * C806 + C93854 * C814) *
                        C42480 +
                    (C42386 * C192 + C42378 * C365 + C42384 * C191 +
                     C93842 * C364 + C42382 * C190 + C93854 * C363) *
                        C42379 +
                    (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                     C93842 * C116 + C42382 * C109 + C93854 * C115) *
                        C42479) *
                       C93706 * C93639 * C93625 * C98 +
                   ((C42382 * C110 + C93854 * C116 + C42384 * C111 +
                     C93842 * C117 + C42386 * C112 + C42378 * C118) *
                        C42479 +
                    (C42382 * C191 + C93854 * C364 + C42384 * C192 +
                     C93842 * C365 + C42386 * C193 + C42378 * C366) *
                        C42379 +
                    (C42382 * C805 + C93854 * C813 + C42384 * C804 +
                     C93842 * C812 + C42386 * C1983 + C42378 * C1984) *
                        C42480 +
                    (C42382 * C887 + C93854 * C1019 + C42384 * C886 +
                     C93842 * C1018 + C42386 * C2056 + C42378 * C2228) *
                        C93694) *
                       C93706 * C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                     C93842 * C115 + C42386 * C110 + C42378 * C116) *
                        C42479 +
                    (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                     C93842 * C363 + C42386 * C191 + C42378 * C364) *
                        C42379 +
                    (C43493 + C43494 + C43495) * C42480 +
                    (C43496 + C43497 + C43498) * C93694) *
                       C93706 * C1382 -
                   ((C42386 * C3493 + C42378 * C3641 + C42384 * C3492 +
                     C93842 * C3640 + C42382 * C3491 + C93854 * C3639) *
                        C93694 +
                    (C42386 * C3411 + C42378 * C3415 + C42384 * C3410 +
                     C93842 * C3414 + C42382 * C3409 + C93854 * C3413) *
                        C42480 +
                    (C42386 * C1468 + C42378 * C1600 + C42384 * C1469 +
                     C93842 * C1601 + C42382 * C1470 + C93854 * C1602) *
                        C42379 +
                    (C42386 * C1386 + C42378 * C1394 + C42384 * C1387 +
                     C93842 * C1395 + C42382 * C1388 + C93854 * C1396) *
                        C42479) *
                       C93706 * C1383 +
                   ((C42382 * C1389 + C93854 * C1397 + C42384 * C1390 +
                     C93842 * C1398 + C42386 * C1391 + C42378 * C1399) *
                        C42479 +
                    (C42382 * C1471 + C93854 * C1603 + C42384 * C1472 +
                     C93842 * C1604 + C42386 * C1473 + C42378 * C1605) *
                        C42379 +
                    (C42382 * C5775 + C93854 * C5778 + C42384 * C5776 +
                     C93842 * C5779 + C42386 * C5777 + C42378 * C5780) *
                        C42480 +
                    (C42382 * C5870 + C93854 * C6030 + C42384 * C5871 +
                     C93842 * C6031 + C42386 * C5872 + C42378 * C6032) *
                        C93694) *
                       C93706 * C1384) *
                  C93625 * C93613) /
                     (p * q * std::sqrt(p + q));
    d2eeyy[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42741 * C108 + C42744 + C42744 + C42379 * C419 +
                     C42742 * C807 + C42745 + C42745 + C93694 * C1079) *
                        C93854 +
                    (C42778 + C42779) * C93842 + C42784 * C42378) *
                       C93706 * C93639 * C800 -
                   ((C42742 * C810 + C43579 + C43579 + C93694 * C1082 +
                     C42741 * C805 + C43580 + C43580 + C42379 * C1077) *
                        C42378 +
                    (C42742 * C809 + C43581 + C43581 + C93694 * C1081 +
                     C42741 * C806 + C43582 + C43582 + C42379 * C1078) *
                        C93842 +
                    (C42742 * C808 + C43583 + C43583 + C93694 * C1080 +
                     C42741 * C807 + C43584 + C43584 + C42379 * C1079) *
                        C93854) *
                       C93706 * C93639 * C801 +
                   ((C42741 * C808 + C43585 + C43585 + C42379 * C1080 +
                     C42742 * C4897 + C43586 + C43586 + C93694 * C5325) *
                        C93854 +
                    (C42741 * C809 + C43587 + C43587 + C42379 * C1081 +
                     C42742 * C4898 + C43588 + C43588 + C93694 * C5326) *
                        C93842 +
                    (C42741 * C810 + C43589 + C43589 + C42379 * C1082 +
                     C42742 * C4899 + C43590 + C43590 + C93694 * C5327) *
                        C42378) *
                       C93706 * C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42741 * C108 + C42744 + C42744 + C42379 * C419 +
                     C42742 * C807 + C42745 + C42745 + C93694 * C1079) *
                        C93854 +
                    (C42778 + C42779) * C93842 + C42784 * C42378) *
                       C93706 * C93639 * C93625 * C97 -
                   ((C42782 + C42783) * C42378 + (C42781 + C42780) * C93842 +
                    (C42779 + C42778) * C93854) *
                       C93706 * C93639 * C93625 * C98 +
                   (C42784 * C93854 + (C42783 + C42782) * C93842 +
                    (C42741 * C112 + C42764 + C42764 + C42379 * C423 +
                     C42742 * C1983 + C42765 + C42765 + C93694 * C2295) *
                        C42378) *
                       C93706 * C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C42741 * C108 + C42744 + C42744 + C42379 * C419 +
                     C42742 * C807 + C42745 + C42745 + C93694 * C1079) *
                        C93854 +
                    (C42778 + C42779) * C93842 + C42784 * C42378) *
                       C93706 * C1382 -
                   ((C42742 * C3411 + C44287 + C44287 + C93694 * C3711 +
                     C42741 * C1386 + C44288 + C44288 + C42379 * C1658) *
                        C42378 +
                    (C42742 * C3410 + C44289 + C44289 + C93694 * C3710 +
                     C42741 * C1387 + C44290 + C44290 + C42379 * C1659) *
                        C93842 +
                    (C42742 * C3409 + C44291 + C44291 + C93694 * C3709 +
                     C42741 * C1388 + C44292 + C44292 + C42379 * C1660) *
                        C93854) *
                       C93706 * C1383 +
                   ((C42741 * C1389 + C44293 + C44293 + C42379 * C1661 +
                     C42742 * C5775 + C44294 + C44294 + C93694 * C6107) *
                        C93854 +
                    (C42741 * C1390 + C44295 + C44295 + C42379 * C1662 +
                     C42742 * C5776 + C44296 + C44296 + C93694 * C6108) *
                        C93842 +
                    (C42741 * C1391 + C44297 + C44297 + C42379 * C1663 +
                     C42742 * C5777 + C44298 + C44298 + C93694 * C6109) *
                        C42378) *
                       C93706 * C1384) *
                  C93625 * C93613) /
                     (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C42479 +
            (C275 * C189 + C93706 * C501) * C42379 + C5123 * C42480 +
            C5426 * C93694) *
               C93854 +
           (C42859 + C42860 + C42861 + C42862) * C93842 + C42873 * C42378) *
              C93639 * C800 -
          ((C5427 * C93694 + C5126 * C42480 + C2390 * C42379 + C2160 * C42479) *
               C42378 +
           (C5428 * C93694 + C5128 * C42480 + C2391 * C42379 + C2162 * C42479) *
               C93842 +
           (C5429 * C93694 + C5130 * C42480 + C5426 * C42379 + C5123 * C42479) *
               C93854) *
              C93639 * C801 +
          ((C5130 * C42479 + C5429 * C42379 + C15769 * C42480 +
            C16059 * C93694) *
               C93854 +
           (C5128 * C42479 + C5428 * C42379 + C15767 * C42480 +
            C16058 * C93694) *
               C93842 +
           (C5126 * C42479 + C5427 * C42379 +
            (C275 * C4899 + C93706 * C5098) * C42480 +
            (C275 * C5018 + C93706 * C5416) * C93694) *
               C42378) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C42479 +
            (C275 * C189 + C93706 * C501) * C42379 + C5123 * C42480 +
            C5426 * C93694) *
               C93854 +
           (C42859 + C42860 + C42861 + C42862) * C93842 + C42873 * C42378) *
              C93639 * C93625 * C97 -
          ((C42867 + C42868 + C42869 + C42870) * C42378 +
           (C42866 + C42865 + C42864 + C42863) * C93842 +
           (C42862 + C42861 + C42860 + C42859) * C93854) *
              C93639 * C93625 * C98 +
          (C42873 * C93854 + (C42870 + C42869 + C42868 + C42867) * C93842 +
           (C312 * C42479 + C523 * C42379 +
            (C275 * C1983 + C93706 * C2142) * C42480 +
            (C275 * C2056 + C93706 * C2378) * C93694) *
               C42378) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C42479 +
            (C275 * C189 + C93706 * C501) * C42379 + C5123 * C42480 +
            C5426 * C93694) *
               C93854 +
           (C42859 + C42860 + C42861 + C42862) * C93842 + C42873 * C42378) *
              C1382 -
          ((C8099 * C93694 + C7770 * C42480 + C3104 * C42379 + C2874 * C42479) *
               C42378 +
           (C8100 * C93694 + C7772 * C42480 + C3105 * C42379 + C2876 * C42479) *
               C93842 +
           (C9097 * C93694 + C8765 * C42480 +
            (C275 * C1470 + C93706 * C1726) * C42379 +
            (C275 * C1388 + C93706 * C1536) * C42479) *
               C93854) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C42479 +
            (C275 * C1471 + C93706 * C1727) * C42379 +
            (C275 * C5775 + C93706 * C5950) * C42480 +
            (C275 * C5870 + C93706 * C6196) * C93694) *
               C93854 +
           ((C275 * C1390 + C93706 * C1538) * C42479 +
            (C275 * C1472 + C93706 * C1728) * C42379 +
            (C275 * C5776 + C93706 * C5951) * C42480 +
            (C275 * C5871 + C93706 * C6197) * C93694) *
               C93842 +
           ((C275 * C1391 + C93706 * C1539) * C42479 +
            (C275 * C1473 + C93706 * C1729) * C42379 +
            (C275 * C5777 + C93706 * C5952) * C42480 +
            (C275 * C5872 + C93706 * C6198) * C93694) *
               C42378) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C275 +
                     (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                      C93842 * C580 + C42386 * C278 + C42378 * C581) *
                         C93706) *
                        C42379 +
                    ((C43493 + C43494 + C43495) * C275 +
                     (C43751 + C43752 + C43753) * C93706) *
                        C93694) *
                       C93639 * C800 -
                   (((C43754 + C43755 + C43756) * C93706 +
                     (C43502 + C43503 + C43504) * C275) *
                        C93694 +
                    ((C43753 + C43752 + C43751) * C93706 +
                     (C43495 + C43494 + C43493) * C275) *
                        C42379) *
                       C93639 * C801 +
                   (((C43504 + C43503 + C43502) * C275 +
                     (C43756 + C43755 + C43754) * C93706) *
                        C42379 +
                    ((C42382 * C4897 + C93854 * C4900 + C42384 * C4898 +
                      C93842 * C4901 + C42386 * C4899 + C42378 * C4902) *
                         C275 +
                     (C42382 * C5096 + C93854 * C5503 + C42384 * C5097 +
                      C93842 * C5504 + C42386 * C5098 + C42378 * C5505) *
                         C93706) *
                        C93694) *
                       C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C275 +
                     (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                      C93842 * C580 + C42386 * C278 + C42378 * C581) *
                         C93706) *
                        C42379 +
                    ((C42382 * C807 + C93854 * C815 + C42384 * C806 +
                      C93842 * C814 + C42386 * C805 + C42378 * C813) *
                         C275 +
                     (C42382 * C955 + C93854 * C1203 + C42384 * C954 +
                      C93842 * C1202 + C42386 * C953 + C42378 * C1201) *
                         C93706) *
                        C93694) *
                       C93639 * C93625 * C97 -
                   (((C42386 * C952 + C42378 * C1200 + C42384 * C953 +
                      C93842 * C1201 + C42382 * C954 + C93854 * C1202) *
                         C93706 +
                     (C42386 * C804 + C42378 * C812 + C42384 * C805 +
                      C93842 * C813 + C42382 * C806 + C93854 * C814) *
                         C275) *
                        C93694 +
                    ((C42386 * C279 + C42378 * C582 + C42384 * C278 +
                      C93842 * C581 + C42382 * C277 + C93854 * C580) *
                         C93706 +
                     (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                      C93842 * C116 + C42382 * C109 + C93854 * C115) *
                         C275) *
                        C42379) *
                       C93639 * C93625 * C98 +
                   (((C42382 * C110 + C93854 * C116 + C42384 * C111 +
                      C93842 * C117 + C42386 * C112 + C42378 * C118) *
                         C275 +
                     (C42382 * C278 + C93854 * C581 + C42384 * C279 +
                      C93842 * C582 + C42386 * C280 + C42378 * C583) *
                         C93706) *
                        C42379 +
                    ((C42382 * C805 + C93854 * C813 + C42384 * C804 +
                      C93842 * C812 + C42386 * C1983 + C42378 * C1984) *
                         C275 +
                     (C42382 * C953 + C93854 * C1201 + C42384 * C952 +
                      C93842 * C1200 + C42386 * C2142 + C42378 * C2460) *
                         C93706) *
                        C93694) *
                       C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C275 +
                     (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                      C93842 * C580 + C42386 * C278 + C42378 * C581) *
                         C93706) *
                        C42379 +
                    ((C43493 + C43494 + C43495) * C275 +
                     (C43751 + C43752 + C43753) * C93706) *
                        C93694) *
                       C1382 -
                   (((C42386 * C3567 + C42378 * C3855 + C42384 * C3566 +
                      C93842 * C3854 + C42382 * C3565 + C93854 * C3853) *
                         C93706 +
                     (C42386 * C3411 + C42378 * C3415 + C42384 * C3410 +
                      C93842 * C3414 + C42382 * C3409 + C93854 * C3413) *
                         C275) *
                        C93694 +
                    ((C42386 * C1534 + C42378 * C1782 + C42384 * C1535 +
                      C93842 * C1783 + C42382 * C1536 + C93854 * C1784) *
                         C93706 +
                     (C42386 * C1386 + C42378 * C1394 + C42384 * C1387 +
                      C93842 * C1395 + C42382 * C1388 + C93854 * C1396) *
                         C275) *
                        C42379) *
                       C1383 +
                   (((C42382 * C1389 + C93854 * C1397 + C42384 * C1390 +
                      C93842 * C1398 + C42386 * C1391 + C42378 * C1399) *
                         C275 +
                     (C42382 * C1537 + C93854 * C1785 + C42384 * C1538 +
                      C93842 * C1786 + C42386 * C1539 + C42378 * C1787) *
                         C93706) *
                        C42379 +
                    ((C42382 * C5775 + C93854 * C5778 + C42384 * C5776 +
                      C93842 * C5779 + C42386 * C5777 + C42378 * C5780) *
                         C275 +
                     (C42382 * C5950 + C93854 * C6273 + C42384 * C5951 +
                      C93842 * C6274 + C42386 * C5952 + C42378 * C6275) *
                         C93706) *
                        C93694) *
                       C1384) *
                  C93625 * C93613) /
                     (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C275 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93706) *
               C93854 +
           ((C42506 + C42507) * C275 + (C43035 + C43036) * C93706) * C93842 +
           C43043 * C42378) *
              C93639 * C800 -
          (((C42480 * C958 + C93694 * C1264 + C42479 * C953 + C42379 * C1259) *
                C93706 +
            (C42480 * C810 + C93694 * C892 + C42479 * C805 + C42379 * C887) *
                C275) *
               C42378 +
           ((C42480 * C957 + C93694 * C1263 + C42479 * C954 + C42379 * C1260) *
                C93706 +
            (C42480 * C809 + C93694 * C891 + C42479 * C806 + C42379 * C888) *
                C275) *
               C93842 +
           ((C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                C93706 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C275) *
               C93854) *
              C93639 * C801 +
          (((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
                C275 +
            (C42479 * C956 + C42379 * C1262 + C42480 * C5096 + C93694 * C5598) *
                C93706) *
               C93854 +
           ((C42479 * C809 + C42379 * C891 + C42480 * C4898 + C93694 * C5017) *
                C275 +
            (C42479 * C957 + C42379 * C1263 + C42480 * C5097 + C93694 * C5599) *
                C93706) *
               C93842 +
           ((C42479 * C810 + C42379 * C892 + C42480 * C4899 + C93694 * C5018) *
                C275 +
            (C42479 * C958 + C42379 * C1264 + C42480 * C5098 + C93694 * C5600) *
                C93706) *
               C42378) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C275 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93706) *
               C93854 +
           ((C42506 + C42507) * C275 + (C43035 + C43036) * C93706) * C93842 +
           C43043 * C42378) *
              C93639 * C93625 * C97 -
          (((C43039 + C43040) * C93706 + (C42516 + C42517) * C275) * C42378 +
           ((C43038 + C43037) * C93706 + (C42511 + C42510) * C275) * C93842 +
           ((C43036 + C43035) * C93706 + (C42507 + C42506) * C275) * C93854) *
              C93639 * C93625 * C98 +
          (C43043 * C93854 +
           ((C42517 + C42516) * C275 + (C43040 + C43039) * C93706) * C93842 +
           ((C42479 * C112 + C42379 * C193 + C42480 * C1983 + C93694 * C2056) *
                C275 +
            (C42479 * C280 + C42379 * C639 + C42480 * C2142 + C93694 * C2527) *
                C93706) *
               C42378) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C275 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93706) *
               C93854 +
           ((C42506 + C42507) * C275 + (C43035 + C43036) * C93706) * C93842 +
           C43043 * C42378) *
              C1382 -
          (((C42480 * C3567 + C93694 * C3925 + C42479 * C1534 +
             C42379 * C1840) *
                C93706 +
            (C42480 * C3411 + C93694 * C3493 + C42479 * C1386 +
             C42379 * C1468) *
                C275) *
               C42378 +
           ((C42480 * C3566 + C93694 * C3924 + C42479 * C1535 +
             C42379 * C1841) *
                C93706 +
            (C42480 * C3410 + C93694 * C3492 + C42479 * C1387 +
             C42379 * C1469) *
                C275) *
               C93842 +
           ((C42480 * C3565 + C93694 * C3923 + C42479 * C1536 +
             C42379 * C1842) *
                C93706 +
            (C42480 * C3409 + C93694 * C3491 + C42479 * C1388 +
             C42379 * C1470) *
                C275) *
               C93854) *
              C1383 +
          (((C42479 * C1389 + C42379 * C1471 + C42480 * C5775 +
             C93694 * C5870) *
                C275 +
            (C42479 * C1537 + C42379 * C1843 + C42480 * C5950 +
             C93694 * C6350) *
                C93706) *
               C93854 +
           ((C42479 * C1390 + C42379 * C1472 + C42480 * C5776 +
             C93694 * C5871) *
                C275 +
            (C42479 * C1538 + C42379 * C1844 + C42480 * C5951 +
             C93694 * C6351) *
                C93706) *
               C93842 +
           ((C42479 * C1391 + C42379 * C1473 + C42480 * C5777 +
             C93694 * C5872) *
                C275 +
            (C42479 * C1539 + C42379 * C1845 + C42480 * C5952 +
             C93694 * C6352) *
                C93706) *
               C42378) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C713 * C108 + C721 + C721 + C93706 * C714) * C42379 +
                     C5698 * C93694) *
                        C93854 +
                    (C43118 + C43119) * C93842 + C43124 * C42378) *
                       C93639 * C800 -
                   ((C5699 * C93694 + C2625 * C42379) * C42378 +
                    (C5700 * C93694 + C2626 * C42379) * C93842 +
                    (C5701 * C93694 + C5698 * C42379) * C93854) *
                       C93639 * C801 +
                   ((C5701 * C42379 + C16321 * C93694) * C93854 +
                    (C5700 * C42379 + C16320 * C93694) * C93842 +
                    (C5699 * C42379 +
                     (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C93694) *
                        C42378) *
                       C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C713 * C108 + C721 + C721 + C93706 * C714) * C42379 +
                     C5698 * C93694) *
                        C93854 +
                    (C43118 + C43119) * C93842 + C43124 * C42378) *
                       C93639 * C93625 * C97 -
                   ((C43122 + C43123) * C42378 + (C43121 + C43120) * C93842 +
                    (C43119 + C43118) * C93854) *
                       C93639 * C93625 * C98 +
                   (C43124 * C93854 + (C43123 + C43122) * C93842 +
                    (C746 * C42379 +
                     (C713 * C1983 + C2617 + C2617 + C93706 * C2609) * C93694) *
                        C42378) *
                       C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C713 * C108 + C721 + C721 + C93706 * C714) * C42379 +
                     C5698 * C93694) *
                        C93854 +
                    (C43118 + C43119) * C93842 + C43124 * C42378) *
                       C1382 -
                   ((C8419 * C93694 + C3339 * C42379) * C42378 +
                    (C8420 * C93694 + C3340 * C42379) * C93842 +
                    (C9417 * C93694 +
                     (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C42379) *
                        C93854) *
                       C1383 +
                   (((C713 * C1389 + C1910 + C1910 + C93706 * C1901) * C42379 +
                     (C713 * C5775 + C6431 + C6431 + C93706 * C6427) * C93694) *
                        C93854 +
                    ((C713 * C1390 + C1911 + C1911 + C93706 * C1902) * C42379 +
                     (C713 * C5776 + C6432 + C6432 + C93706 * C6428) * C93694) *
                        C93842 +
                    ((C713 * C1391 + C1912 + C1912 + C93706 * C1903) * C42379 +
                     (C713 * C5777 + C6433 + C6433 + C93706 * C6429) * C93694) *
                        C42378) *
                       C1384) *
                  C93625 * C93613) /
                     (p * q * std::sqrt(p + q));
    d2eexx[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                      C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                      C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                         C93706 * C42379 +
                     (C43229 + C43230 + C43231) * C93706 * C93694) *
                        C2695 -
                    ((C42385 * C3411 + C43979 + C43979 + C42378 * C3419 +
                      C42383 * C3410 + C43980 + C43980 + C93842 * C3418 +
                      C42381 * C3409 + C43981 + C43981 + C93854 * C3417) *
                         C93706 * C93694 +
                     (C42385 * C1386 + C43982 + C43982 + C42378 * C1402 +
                      C42383 * C1387 + C43983 + C43983 + C93842 * C1403 +
                      C42381 * C1388 + C43984 + C43984 + C93854 * C1404) *
                         C93706 * C42379) *
                        C2696) *
                       C93625 * C1981 +
                   (((C42381 * C1387 + C45696 + C45696 + C93854 * C1403 +
                      C42383 * C1386 + C45697 + C45697 + C93842 * C1402 +
                      C42385 * C1385 + C45698 + C45698 + C42378 * C1401) *
                         C93706 * C42379 +
                     (C42381 * C3410 + C45699 + C45699 + C93854 * C3418 +
                      C42383 * C3411 + C45700 + C45700 + C93842 * C3419 +
                      C42385 * C3412 + C45701 + C45701 + C42378 * C3420) *
                         C93706 * C93694) *
                        C2696 -
                    ((C44710 + C44709 + C44708) * C93706 * C93694 +
                     (C42385 * C111 + C42397 + C42397 + C42378 * C123 +
                      C42383 * C110 + C42398 + C42398 + C93842 * C122 +
                      C42381 * C109 + C42399 + C42399 + C93854 * C121) *
                         C93706 * C42379) *
                        C2695) *
                       C93625 * C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C42382 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93854 +
            (C42506 + C42507) * C42384 + (C42508 + C42509) * C93842 +
            C42518 * C42386 + C42519 * C42378) *
               C93706 * C2695 -
           ((C45816 + C45817) * C42378 + (C45818 + C45819) * C42386 +
            (C45820 + C45821) * C93842 + (C45822 + C45823) * C42384 +
            (C42480 * C3413 + C93694 * C3495 + C42479 * C1396 +
             C42379 * C1478) *
                C93854 +
            (C42480 * C3409 + C93694 * C3491 + C42479 * C1388 +
             C42379 * C1470) *
                C42382) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C45823 + C45822) * C42382 + (C45821 + C45820) * C93854 +
            (C45819 + C45818) * C42384 + (C45817 + C45816) * C93842 +
            (C42479 * C1385 + C42379 * C1467 + C42480 * C3412 +
             C93694 * C3494) *
                C42386 +
            (C42479 * C1393 + C42379 * C1475 + C42480 * C3416 +
             C93694 * C3498) *
                C42378) *
               C93706 * C2696 -
           ((C42514 + C42515) * C42378 + (C42516 + C42517) * C42386 +
            (C42513 + C42512) * C93842 + (C42511 + C42510) * C42384 +
            (C42509 + C42508) * C93854 + (C42507 + C42506) * C42382) *
               C93706 * C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C42382 +
             (C275 * C114 + C93706 * C282) * C93854 + C305 * C42384 +
             C306 * C93842 + C307 * C42386 + C308 * C42378) *
                C42379 +
            (C43383 + C43384 + C43385 + C43386 + C43387 + C43388) * C93694) *
               C2695 -
           ((C7769 * C42378 + C7770 * C42386 + C7771 * C93842 + C7772 * C42384 +
             C8764 * C93854 + C8765 * C42382) *
                C93694 +
            (C2873 * C42378 + C2874 * C42386 + C2875 * C93842 + C2876 * C42384 +
             (C275 * C1396 + C93706 * C1544) * C93854 +
             (C275 * C1388 + C93706 * C1536) * C42382) *
                C42379) *
               C2696) *
              C93625 * C1981 +
          (((C2876 * C42382 + C2875 * C93854 + C2874 * C42384 + C2873 * C93842 +
             C2872 * C42386 + C2871 * C42378) *
                C42379 +
            (C7772 * C42382 + C7771 * C93854 + C7770 * C42384 + C7769 * C93842 +
             (C275 * C3412 + C93706 * C3568) * C42386 +
             (C275 * C3416 + C93706 * C3572) * C42378) *
                C93694) *
               C2696 -
           ((C44936 + C44935 + C44934 + C44933 + C44932 + C44931) * C93694 +
            (C310 * C42378 + C309 * C42386 + C308 * C93842 + C307 * C42384 +
             C306 * C93854 + C305 * C42382) *
                C42379) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C42479 +
                     (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                      C93842 * C363 + C42386 * C191 + C42378 * C364) *
                         C42379 +
                     (C43493 + C43494 + C43495) * C42480 +
                     (C43496 + C43497 + C43498) * C93694) *
                        C93706 * C2695 -
                    ((C42386 * C3493 + C42378 * C3641 + C42384 * C3492 +
                      C93842 * C3640 + C42382 * C3491 + C93854 * C3639) *
                         C93694 +
                     (C42386 * C3411 + C42378 * C3415 + C42384 * C3410 +
                      C93842 * C3414 + C42382 * C3409 + C93854 * C3413) *
                         C42480 +
                     (C42386 * C1468 + C42378 * C1600 + C42384 * C1469 +
                      C93842 * C1601 + C42382 * C1470 + C93854 * C1602) *
                         C42379 +
                     (C42386 * C1386 + C42378 * C1394 + C42384 * C1387 +
                      C93842 * C1395 + C42382 * C1388 + C93854 * C1396) *
                         C42479) *
                        C93706 * C2696) *
                       C93625 * C1981 +
                   (((C42382 * C1387 + C93854 * C1395 + C42384 * C1386 +
                      C93842 * C1394 + C42386 * C1385 + C42378 * C1393) *
                         C42479 +
                     (C42382 * C1469 + C93854 * C1601 + C42384 * C1468 +
                      C93842 * C1600 + C42386 * C1467 + C42378 * C1599) *
                         C42379 +
                     (C42382 * C3410 + C93854 * C3414 + C42384 * C3411 +
                      C93842 * C3415 + C42386 * C3412 + C42378 * C3416) *
                         C42480 +
                     (C42382 * C3492 + C93854 * C3640 + C42384 * C3493 +
                      C93842 * C3641 + C42386 * C3494 + C42378 * C3642) *
                         C93694) *
                        C93706 * C2696 -
                    ((C45052 + C45051 + C45050) * C93694 +
                     (C45049 + C45048 + C45047) * C42480 +
                     (C42386 * C192 + C42378 * C365 + C42384 * C191 +
                      C93842 * C364 + C42382 * C190 + C93854 * C363) *
                         C42379 +
                     (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                      C93842 * C116 + C42382 * C109 + C93854 * C115) *
                         C42479) *
                        C93706 * C2695) *
                       C93625 * C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 +
                      C42742 * C807 + C42745 + C42745 + C93694 * C1079) *
                         C93854 +
                     (C42778 + C42779) * C93842 + C42784 * C42378) *
                        C93706 * C2695 -
                    ((C46136 + C46137) * C42378 + (C46138 + C46139) * C93842 +
                     (C42742 * C3409 + C44291 + C44291 + C93694 * C3709 +
                      C42741 * C1388 + C44292 + C44292 + C42379 * C1660) *
                         C93854) *
                        C93706 * C2696) *
                       C93625 * C1981 +
                   (((C46139 + C46138) * C93854 + (C46137 + C46136) * C93842 +
                     (C42741 * C1385 + C46126 + C46126 + C42379 * C1657 +
                      C42742 * C3412 + C46127 + C46127 + C93694 * C3712) *
                         C42378) *
                        C93706 * C2696 -
                    ((C42782 + C42783) * C42378 + (C42781 + C42780) * C93842 +
                     (C42779 + C42778) * C93854) *
                        C93706 * C2695) *
                       C93625 * C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C42479 +
             (C275 * C189 + C93706 * C501) * C42379 + C5123 * C42480 +
             C5426 * C93694) *
                C93854 +
            (C42859 + C42860 + C42861 + C42862) * C93842 + C42873 * C42378) *
               C2695 -
           ((C46238 + C46239 + C46240 + C46241) * C42378 +
            (C46242 + C46243 + C46244 + C46245) * C93842 +
            (C9097 * C93694 + C8765 * C42480 +
             (C275 * C1470 + C93706 * C1726) * C42379 +
             (C275 * C1388 + C93706 * C1536) * C42479) *
                C93854) *
               C2696) *
              C93625 * C1981 +
          (((C46245 + C46244 + C46243 + C46242) * C93854 +
            (C46241 + C46240 + C46239 + C46238) * C93842 +
            (C2872 * C42479 + C3103 * C42379 +
             (C275 * C3412 + C93706 * C3568) * C42480 +
             (C275 * C3494 + C93706 * C3786) * C93694) *
                C42378) *
               C2696 -
           ((C42867 + C42868 + C42869 + C42870) * C42378 +
            (C42866 + C42865 + C42864 + C42863) * C93842 +
            (C42862 + C42861 + C42860 + C42859) * C93854) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                       C93842 * C115 + C42386 * C110 + C42378 * C116) *
                          C275 +
                      (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                       C93842 * C580 + C42386 * C278 + C42378 * C581) *
                          C93706) *
                         C42379 +
                     ((C43493 + C43494 + C43495) * C275 +
                      (C43751 + C43752 + C43753) * C93706) *
                         C93694) *
                        C2695 -
                    (((C42386 * C3567 + C42378 * C3855 + C42384 * C3566 +
                       C93842 * C3854 + C42382 * C3565 + C93854 * C3853) *
                          C93706 +
                      (C42386 * C3411 + C42378 * C3415 + C42384 * C3410 +
                       C93842 * C3414 + C42382 * C3409 + C93854 * C3413) *
                          C275) *
                         C93694 +
                     ((C42386 * C1534 + C42378 * C1782 + C42384 * C1535 +
                       C93842 * C1783 + C42382 * C1536 + C93854 * C1784) *
                          C93706 +
                      (C42386 * C1386 + C42378 * C1394 + C42384 * C1387 +
                       C93842 * C1395 + C42382 * C1388 + C93854 * C1396) *
                          C275) *
                         C42379) *
                        C2696) *
                       C93625 * C1981 +
                   ((((C42382 * C1387 + C93854 * C1395 + C42384 * C1386 +
                       C93842 * C1394 + C42386 * C1385 + C42378 * C1393) *
                          C275 +
                      (C42382 * C1535 + C93854 * C1783 + C42384 * C1534 +
                       C93842 * C1782 + C42386 * C1533 + C42378 * C1781) *
                          C93706) *
                         C42379 +
                     ((C42382 * C3410 + C93854 * C3414 + C42384 * C3411 +
                       C93842 * C3415 + C42386 * C3412 + C42378 * C3416) *
                          C275 +
                      (C42382 * C3566 + C93854 * C3854 + C42384 * C3567 +
                       C93842 * C3855 + C42386 * C3568 + C42378 * C3856) *
                          C93706) *
                         C93694) *
                        C2696 -
                    (((C45385 + C45384 + C45383) * C93706 +
                      (C45049 + C45048 + C45047) * C275) *
                         C93694 +
                     ((C42386 * C279 + C42378 * C582 + C42384 * C278 +
                       C93842 * C581 + C42382 * C277 + C93854 * C580) *
                          C93706 +
                      (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                       C93842 * C116 + C42382 * C109 + C93854 * C115) *
                          C275) *
                         C42379) *
                        C2695) *
                       C93625 * C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C275 +
             (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                 C93706) *
                C93854 +
            ((C42506 + C42507) * C275 + (C43035 + C43036) * C93706) * C93842 +
            C43043 * C42378) *
               C2695 -
           (((C46450 + C46451) * C93706 + (C45818 + C45819) * C275) * C42378 +
            ((C46452 + C46453) * C93706 + (C45822 + C45823) * C275) * C93842 +
            ((C42480 * C3565 + C93694 * C3923 + C42479 * C1536 +
              C42379 * C1842) *
                 C93706 +
             (C42480 * C3409 + C93694 * C3491 + C42479 * C1388 +
              C42379 * C1470) *
                 C275) *
                C93854) *
               C2696) *
              C93625 * C1981 +
          ((((C45823 + C45822) * C275 + (C46453 + C46452) * C93706) * C93854 +
            ((C45819 + C45818) * C275 + (C46451 + C46450) * C93706) * C93842 +
            ((C42479 * C1385 + C42379 * C1467 + C42480 * C3412 +
              C93694 * C3494) *
                 C275 +
             (C42479 * C1533 + C42379 * C1839 + C42480 * C3568 +
              C93694 * C3926) *
                 C93706) *
                C42378) *
               C2696 -
           (((C43039 + C43040) * C93706 + (C42516 + C42517) * C275) * C42378 +
            ((C43038 + C43037) * C93706 + (C42511 + C42510) * C275) * C93842 +
            ((C43036 + C43035) * C93706 + (C42507 + C42506) * C275) * C93854) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C42379 +
             C5698 * C93694) *
                C93854 +
            (C43118 + C43119) * C93842 + C43124 * C42378) *
               C2695 -
           ((C46552 + C46553) * C42378 + (C46554 + C46555) * C93842 +
            (C9417 * C93694 +
             (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C42379) *
                C93854) *
               C2696) *
              C93625 * C1981 +
          (((C46555 + C46554) * C93854 + (C46553 + C46552) * C93842 +
            (C3338 * C42379 +
             (C713 * C3412 + C4001 + C4001 + C93706 * C3996) * C93694) *
                C42378) *
               C2696 -
           ((C43122 + C43123) * C42378 + (C43121 + C43120) * C93842 +
            (C43119 + C43118) * C93854) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                     C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                     C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                        C93706 * C42379 +
                    (C42381 * C807 + C42391 + C42391 + C93854 * C823 +
                     C42383 * C806 + C42392 + C42392 + C93842 * C822 +
                     C42385 * C805 + C42393 + C42393 + C42378 * C821) *
                        C93706 * C93694) *
                       C93639 * C93625 * C97 -
                   ((C42385 * C804 + C42394 + C42394 + C42378 * C820 +
                     C42383 * C805 + C42395 + C42395 + C93842 * C821 +
                     C42381 * C806 + C42396 + C42396 + C93854 * C822) *
                        C93706 * C93694 +
                    (C42385 * C111 + C42397 + C42397 + C42378 * C123 +
                     C42383 * C110 + C42398 + C42398 + C93842 * C122 +
                     C42381 * C109 + C42399 + C42399 + C93854 * C121) *
                        C93706 * C42379) *
                       C93639 * C93625 * C98 +
                   ((C42381 * C110 + C42400 + C42400 + C93854 * C122 +
                     C42383 * C111 + C42401 + C42401 + C93842 * C123 +
                     C42385 * C112 + C42402 + C42402 + C42378 * C124) *
                        C93706 * C42379 +
                    (C42381 * C805 + C42403 + C42403 + C93854 * C821 +
                     C42383 * C804 + C42404 + C42404 + C93842 * C820 +
                     C42385 * C1983 + C42405 + C42405 + C42378 * C1985) *
                        C93706 * C93694) *
                       C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                     C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                     C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                        C93706 * C42379 +
                    (C43229 + C43230 + C43231) * C93706 * C93694) *
                       C93639 * C800 -
                   ((C43232 + C43233 + C43234) * C93706 * C93694 +
                    (C43231 + C43230 + C43229) * C93706 * C42379) *
                       C93639 * C801 +
                   ((C43234 + C43233 + C43232) * C93706 * C42379 +
                    (C42381 * C4897 + C43214 + C43214 + C93854 * C4903 +
                     C42383 * C4898 + C43215 + C43215 + C93842 * C4904 +
                     C42385 * C4899 + C43216 + C43216 + C42378 * C4905) *
                        C93706 * C93694) *
                       C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q));
    d2eexy[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
               C42382 +
           (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
               C93854 +
           (C42506 + C42507) * C42384 + (C42508 + C42509) * C93842 +
           C42518 * C42386 + C42519 * C42378) *
              C93706 * C93639 * C93625 * C97 -
          ((C42514 + C42515) * C42378 + (C42516 + C42517) * C42386 +
           (C42513 + C42512) * C93842 + (C42511 + C42510) * C42384 +
           (C42509 + C42508) * C93854 + (C42507 + C42506) * C42382) *
              C93706 * C93639 * C93625 * C98 +
          (C42518 * C42382 + C42519 * C93854 + (C42517 + C42516) * C42384 +
           (C42515 + C42514) * C93842 +
           (C42479 * C112 + C42379 * C193 + C42480 * C1983 + C93694 * C2056) *
               C42386 +
           (C42479 * C118 + C42379 * C199 + C42480 * C1984 + C93694 * C2057) *
               C42378) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
               C42382 +
           (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
               C93854 +
           (C42506 + C42507) * C42384 + (C42508 + C42509) * C93842 +
           C42518 * C42386 + C42519 * C42378) *
              C93706 * C93639 * C800 -
          ((C42480 * C818 + C93694 * C900 + C42479 * C813 + C42379 * C895) *
               C42378 +
           (C42480 * C810 + C93694 * C892 + C42479 * C805 + C42379 * C887) *
               C42386 +
           (C42480 * C817 + C93694 * C899 + C42479 * C814 + C42379 * C896) *
               C93842 +
           (C42480 * C809 + C93694 * C891 + C42479 * C806 + C42379 * C888) *
               C42384 +
           (C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
               C93854 +
           (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
               C42382) *
              C93706 * C93639 * C801 +
          ((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
               C42382 +
           (C42479 * C816 + C42379 * C898 + C42480 * C4900 + C93694 * C5019) *
               C93854 +
           (C42479 * C809 + C42379 * C891 + C42480 * C4898 + C93694 * C5017) *
               C42384 +
           (C42479 * C817 + C42379 * C899 + C42480 * C4901 + C93694 * C5020) *
               C93842 +
           (C42479 * C810 + C42379 * C892 + C42480 * C4899 + C93694 * C5018) *
               C42386 +
           (C42479 * C818 + C42379 * C900 + C42480 * C4902 + C93694 * C5021) *
               C42378) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C42382 +
            (C275 * C114 + C93706 * C282) * C93854 + C305 * C42384 +
            C306 * C93842 + C307 * C42386 + C308 * C42378) *
               C42379 +
           (C5123 * C42382 + C5124 * C93854 + C2162 * C42384 + C2161 * C93842 +
            C2160 * C42386 + C2159 * C42378) *
               C93694) *
              C93639 * C93625 * C97 -
          ((C2157 * C42378 + C2158 * C42386 + C2159 * C93842 + C2160 * C42384 +
            C2161 * C93854 + C2162 * C42382) *
               C93694 +
           (C310 * C42378 + C309 * C42386 + C308 * C93842 + C307 * C42384 +
            C306 * C93854 + C305 * C42382) *
               C42379) *
              C93639 * C93625 * C98 +
          ((C307 * C42382 + C308 * C93854 + C309 * C42384 + C310 * C93842 +
            C312 * C42386 + C311 * C42378) *
               C42379 +
           (C2160 * C42382 + C2159 * C93854 + C2158 * C42384 + C2157 * C93842 +
            (C275 * C1983 + C93706 * C2142) * C42386 +
            (C275 * C1984 + C93706 * C2143) * C42378) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C42382 +
            (C275 * C114 + C93706 * C282) * C93854 + C305 * C42384 +
            C306 * C93842 + C307 * C42386 + C308 * C42378) *
               C42379 +
           (C43383 + C43384 + C43385 + C43386 + C43387 + C43388) * C93694) *
              C93639 * C800 -
          ((C43389 + C43390 + C43391 + C43392 + C43393 + C43394) * C93694 +
           (C43388 + C43387 + C43386 + C43385 + C43384 + C43383) * C42379) *
              C93639 * C801 +
          ((C43394 + C43393 + C43392 + C43391 + C43390 + C43389) * C42379 +
           (C15769 * C42382 + C15768 * C93854 + C15767 * C42384 +
            C15766 * C93842 + (C275 * C4899 + C93706 * C5098) * C42386 +
            (C275 * C4902 + C93706 * C5101) * C42378) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                     C93842 * C115 + C42386 * C110 + C42378 * C116) *
                        C42479 +
                    (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                     C93842 * C363 + C42386 * C191 + C42378 * C364) *
                        C42379 +
                    (C42382 * C807 + C93854 * C815 + C42384 * C806 +
                     C93842 * C814 + C42386 * C805 + C42378 * C813) *
                        C42480 +
                    (C42382 * C889 + C93854 * C1021 + C42384 * C888 +
                     C93842 * C1020 + C42386 * C887 + C42378 * C1019) *
                        C93694) *
                       C93706 * C93639 * C93625 * C97 -
                   ((C42386 * C886 + C42378 * C1018 + C42384 * C887 +
                     C93842 * C1019 + C42382 * C888 + C93854 * C1020) *
                        C93694 +
                    (C42386 * C804 + C42378 * C812 + C42384 * C805 +
                     C93842 * C813 + C42382 * C806 + C93854 * C814) *
                        C42480 +
                    (C42386 * C192 + C42378 * C365 + C42384 * C191 +
                     C93842 * C364 + C42382 * C190 + C93854 * C363) *
                        C42379 +
                    (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                     C93842 * C116 + C42382 * C109 + C93854 * C115) *
                        C42479) *
                       C93706 * C93639 * C93625 * C98 +
                   ((C42382 * C110 + C93854 * C116 + C42384 * C111 +
                     C93842 * C117 + C42386 * C112 + C42378 * C118) *
                        C42479 +
                    (C42382 * C191 + C93854 * C364 + C42384 * C192 +
                     C93842 * C365 + C42386 * C193 + C42378 * C366) *
                        C42379 +
                    (C42382 * C805 + C93854 * C813 + C42384 * C804 +
                     C93842 * C812 + C42386 * C1983 + C42378 * C1984) *
                        C42480 +
                    (C42382 * C887 + C93854 * C1019 + C42384 * C886 +
                     C93842 * C1018 + C42386 * C2056 + C42378 * C2228) *
                        C93694) *
                       C93706 * C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                     C93842 * C115 + C42386 * C110 + C42378 * C116) *
                        C42479 +
                    (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                     C93842 * C363 + C42386 * C191 + C42378 * C364) *
                        C42379 +
                    (C43493 + C43494 + C43495) * C42480 +
                    (C43496 + C43497 + C43498) * C93694) *
                       C93706 * C93639 * C800 -
                   ((C43499 + C43500 + C43501) * C93694 +
                    (C43502 + C43503 + C43504) * C42480 +
                    (C43498 + C43497 + C43496) * C42379 +
                    (C43495 + C43494 + C43493) * C42479) *
                       C93706 * C93639 * C801 +
                   ((C43504 + C43503 + C43502) * C42479 +
                    (C43501 + C43500 + C43499) * C42379 +
                    (C42382 * C4897 + C93854 * C4900 + C42384 * C4898 +
                     C93842 * C4901 + C42386 * C4899 + C42378 * C4902) *
                        C42480 +
                    (C42382 * C5016 + C93854 * C5212 + C42384 * C5017 +
                     C93842 * C5213 + C42386 * C5018 + C42378 * C5214) *
                        C93694) *
                       C93706 * C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q));
    d2eeyy[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42741 * C108 + C42744 + C42744 + C42379 * C419 +
                     C42742 * C807 + C42745 + C42745 + C93694 * C1079) *
                        C93854 +
                    (C42778 + C42779) * C93842 + C42784 * C42378) *
                       C93706 * C93639 * C93625 * C97 -
                   ((C42782 + C42783) * C42378 + (C42781 + C42780) * C93842 +
                    (C42779 + C42778) * C93854) *
                       C93706 * C93639 * C93625 * C98 +
                   (C42784 * C93854 + (C42783 + C42782) * C93842 +
                    (C42741 * C112 + C42764 + C42764 + C42379 * C423 +
                     C42742 * C1983 + C42765 + C42765 + C93694 * C2295) *
                        C42378) *
                       C93706 * C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42741 * C108 + C42744 + C42744 + C42379 * C419 +
                     C42742 * C807 + C42745 + C42745 + C93694 * C1079) *
                        C93854 +
                    (C42778 + C42779) * C93842 + C42784 * C42378) *
                       C93706 * C93639 * C800 -
                   ((C42742 * C810 + C43579 + C43579 + C93694 * C1082 +
                     C42741 * C805 + C43580 + C43580 + C42379 * C1077) *
                        C42378 +
                    (C42742 * C809 + C43581 + C43581 + C93694 * C1081 +
                     C42741 * C806 + C43582 + C43582 + C42379 * C1078) *
                        C93842 +
                    (C42742 * C808 + C43583 + C43583 + C93694 * C1080 +
                     C42741 * C807 + C43584 + C43584 + C42379 * C1079) *
                        C93854) *
                       C93706 * C93639 * C801 +
                   ((C42741 * C808 + C43585 + C43585 + C42379 * C1080 +
                     C42742 * C4897 + C43586 + C43586 + C93694 * C5325) *
                        C93854 +
                    (C42741 * C809 + C43587 + C43587 + C42379 * C1081 +
                     C42742 * C4898 + C43588 + C43588 + C93694 * C5326) *
                        C93842 +
                    (C42741 * C810 + C43589 + C43589 + C42379 * C1082 +
                     C42742 * C4899 + C43590 + C43590 + C93694 * C5327) *
                        C42378) *
                       C93706 * C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C42479 +
            (C275 * C189 + C93706 * C501) * C42379 + C5123 * C42480 +
            C5426 * C93694) *
               C93854 +
           (C42859 + C42860 + C42861 + C42862) * C93842 + C42873 * C42378) *
              C93639 * C93625 * C97 -
          ((C42867 + C42868 + C42869 + C42870) * C42378 +
           (C42866 + C42865 + C42864 + C42863) * C93842 +
           (C42862 + C42861 + C42860 + C42859) * C93854) *
              C93639 * C93625 * C98 +
          (C42873 * C93854 + (C42870 + C42869 + C42868 + C42867) * C93842 +
           (C312 * C42479 + C523 * C42379 +
            (C275 * C1983 + C93706 * C2142) * C42480 +
            (C275 * C2056 + C93706 * C2378) * C93694) *
               C42378) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C42479 +
            (C275 * C189 + C93706 * C501) * C42379 + C5123 * C42480 +
            C5426 * C93694) *
               C93854 +
           (C42859 + C42860 + C42861 + C42862) * C93842 + C42873 * C42378) *
              C93639 * C800 -
          ((C5427 * C93694 + C5126 * C42480 + C2390 * C42379 + C2160 * C42479) *
               C42378 +
           (C5428 * C93694 + C5128 * C42480 + C2391 * C42379 + C2162 * C42479) *
               C93842 +
           (C5429 * C93694 + C5130 * C42480 + C5426 * C42379 + C5123 * C42479) *
               C93854) *
              C93639 * C801 +
          ((C5130 * C42479 + C5429 * C42379 + C15769 * C42480 +
            C16059 * C93694) *
               C93854 +
           (C5128 * C42479 + C5428 * C42379 + C15767 * C42480 +
            C16058 * C93694) *
               C93842 +
           (C5126 * C42479 + C5427 * C42379 +
            (C275 * C4899 + C93706 * C5098) * C42480 +
            (C275 * C5018 + C93706 * C5416) * C93694) *
               C42378) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C275 +
                     (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                      C93842 * C580 + C42386 * C278 + C42378 * C581) *
                         C93706) *
                        C42379 +
                    ((C42382 * C807 + C93854 * C815 + C42384 * C806 +
                      C93842 * C814 + C42386 * C805 + C42378 * C813) *
                         C275 +
                     (C42382 * C955 + C93854 * C1203 + C42384 * C954 +
                      C93842 * C1202 + C42386 * C953 + C42378 * C1201) *
                         C93706) *
                        C93694) *
                       C93639 * C93625 * C97 -
                   (((C42386 * C952 + C42378 * C1200 + C42384 * C953 +
                      C93842 * C1201 + C42382 * C954 + C93854 * C1202) *
                         C93706 +
                     (C42386 * C804 + C42378 * C812 + C42384 * C805 +
                      C93842 * C813 + C42382 * C806 + C93854 * C814) *
                         C275) *
                        C93694 +
                    ((C42386 * C279 + C42378 * C582 + C42384 * C278 +
                      C93842 * C581 + C42382 * C277 + C93854 * C580) *
                         C93706 +
                     (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                      C93842 * C116 + C42382 * C109 + C93854 * C115) *
                         C275) *
                        C42379) *
                       C93639 * C93625 * C98 +
                   (((C42382 * C110 + C93854 * C116 + C42384 * C111 +
                      C93842 * C117 + C42386 * C112 + C42378 * C118) *
                         C275 +
                     (C42382 * C278 + C93854 * C581 + C42384 * C279 +
                      C93842 * C582 + C42386 * C280 + C42378 * C583) *
                         C93706) *
                        C42379 +
                    ((C42382 * C805 + C93854 * C813 + C42384 * C804 +
                      C93842 * C812 + C42386 * C1983 + C42378 * C1984) *
                         C275 +
                     (C42382 * C953 + C93854 * C1201 + C42384 * C952 +
                      C93842 * C1200 + C42386 * C2142 + C42378 * C2460) *
                         C93706) *
                        C93694) *
                       C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C275 +
                     (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                      C93842 * C580 + C42386 * C278 + C42378 * C581) *
                         C93706) *
                        C42379 +
                    ((C43493 + C43494 + C43495) * C275 +
                     (C43751 + C43752 + C43753) * C93706) *
                        C93694) *
                       C93639 * C800 -
                   (((C43754 + C43755 + C43756) * C93706 +
                     (C43502 + C43503 + C43504) * C275) *
                        C93694 +
                    ((C43753 + C43752 + C43751) * C93706 +
                     (C43495 + C43494 + C43493) * C275) *
                        C42379) *
                       C93639 * C801 +
                   (((C43504 + C43503 + C43502) * C275 +
                     (C43756 + C43755 + C43754) * C93706) *
                        C42379 +
                    ((C42382 * C4897 + C93854 * C4900 + C42384 * C4898 +
                      C93842 * C4901 + C42386 * C4899 + C42378 * C4902) *
                         C275 +
                     (C42382 * C5096 + C93854 * C5503 + C42384 * C5097 +
                      C93842 * C5504 + C42386 * C5098 + C42378 * C5505) *
                         C93706) *
                        C93694) *
                       C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q));
    d2eezy[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C275 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93706) *
               C93854 +
           ((C42506 + C42507) * C275 + (C43035 + C43036) * C93706) * C93842 +
           C43043 * C42378) *
              C93639 * C93625 * C97 -
          (((C43039 + C43040) * C93706 + (C42516 + C42517) * C275) * C42378 +
           ((C43038 + C43037) * C93706 + (C42511 + C42510) * C275) * C93842 +
           ((C43036 + C43035) * C93706 + (C42507 + C42506) * C275) * C93854) *
              C93639 * C93625 * C98 +
          (C43043 * C93854 +
           ((C42517 + C42516) * C275 + (C43040 + C43039) * C93706) * C93842 +
           ((C42479 * C112 + C42379 * C193 + C42480 * C1983 + C93694 * C2056) *
                C275 +
            (C42479 * C280 + C42379 * C639 + C42480 * C2142 + C93694 * C2527) *
                C93706) *
               C42378) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C275 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93706) *
               C93854 +
           ((C42506 + C42507) * C275 + (C43035 + C43036) * C93706) * C93842 +
           C43043 * C42378) *
              C93639 * C800 -
          (((C42480 * C958 + C93694 * C1264 + C42479 * C953 + C42379 * C1259) *
                C93706 +
            (C42480 * C810 + C93694 * C892 + C42479 * C805 + C42379 * C887) *
                C275) *
               C42378 +
           ((C42480 * C957 + C93694 * C1263 + C42479 * C954 + C42379 * C1260) *
                C93706 +
            (C42480 * C809 + C93694 * C891 + C42479 * C806 + C42379 * C888) *
                C275) *
               C93842 +
           ((C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                C93706 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C275) *
               C93854) *
              C93639 * C801 +
          (((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
                C275 +
            (C42479 * C956 + C42379 * C1262 + C42480 * C5096 + C93694 * C5598) *
                C93706) *
               C93854 +
           ((C42479 * C809 + C42379 * C891 + C42480 * C4898 + C93694 * C5017) *
                C275 +
            (C42479 * C957 + C42379 * C1263 + C42480 * C5097 + C93694 * C5599) *
                C93706) *
               C93842 +
           ((C42479 * C810 + C42379 * C892 + C42480 * C4899 + C93694 * C5018) *
                C275 +
            (C42479 * C958 + C42379 * C1264 + C42480 * C5098 + C93694 * C5600) *
                C93706) *
               C42378) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C713 * C108 + C721 + C721 + C93706 * C714) * C42379 +
                     C5698 * C93694) *
                        C93854 +
                    (C43118 + C43119) * C93842 + C43124 * C42378) *
                       C93639 * C93625 * C97 -
                   ((C43122 + C43123) * C42378 + (C43121 + C43120) * C93842 +
                    (C43119 + C43118) * C93854) *
                       C93639 * C93625 * C98 +
                   (C43124 * C93854 + (C43123 + C43122) * C93842 +
                    (C746 * C42379 +
                     (C713 * C1983 + C2617 + C2617 + C93706 * C2609) * C93694) *
                        C42378) *
                       C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C713 * C108 + C721 + C721 + C93706 * C714) * C42379 +
                     C5698 * C93694) *
                        C93854 +
                    (C43118 + C43119) * C93842 + C43124 * C42378) *
                       C93639 * C800 -
                   ((C5699 * C93694 + C2625 * C42379) * C42378 +
                    (C5700 * C93694 + C2626 * C42379) * C93842 +
                    (C5701 * C93694 + C5698 * C42379) * C93854) *
                       C93639 * C801 +
                   ((C5701 * C42379 + C16321 * C93694) * C93854 +
                    (C5700 * C42379 + C16320 * C93694) * C93842 +
                    (C5699 * C42379 +
                     (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C93694) *
                        C42378) *
                       C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q));
    d2eexx[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                      C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                         C93706 * C93855 +
                     (C48410 + C48411) * C93706 * C93850 + C48417 * C47572) *
                        C93639 * C1979 -
                    ((C48414 + C48415) * C93706 * C47572 +
                     (C48413 + C48412) * C93706 * C93850 +
                     (C48411 + C48410) * C93706 * C93855) *
                        C93639 * C1980) *
                       C1981 +
                   (((C49903 + C49904) * C93706 * C93855 +
                     (C49905 + C49906) * C93706 * C93850 +
                     (C47573 * C4898 + C49893 + C49893 + C47568 * C4904 +
                      C47575 * C4899 + C49894 + C49894 + C93590 * C4905) *
                         C93706 * C47572) *
                        C93639 * C1980 -
                    ((C49906 + C49905) * C93706 * C47572 +
                     (C49904 + C49903) * C93706 * C93850 +
                     (C47575 * C110 + C47588 + C47588 + C93590 * C122 +
                      C47573 * C109 + C47589 + C47589 + C47568 * C121) *
                         C93706 * C93855) *
                        C93639 * C1979) *
                       C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C47574 +
                     (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                      C93850 * C897 + C47671 * C816 + C47572 * C898) *
                         C47568 +
                     (C47697 + C47698 + C47699) * C47576 +
                     (C47700 + C47701 + C47702) * C93590) *
                        C93706 * C93639 * C1979 -
                    ((C50017 + C50018 + C50019) * C93590 +
                     (C50020 + C50021 + C50022) * C47576 +
                     (C47671 * C4900 + C47572 * C5019 + C47670 * C816 +
                      C93850 * C898 + C47669 * C815 + C93855 * C897) *
                         C47568 +
                     (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                      C93850 * C890 + C47669 * C807 + C93855 * C889) *
                         C47574) *
                        C93706 * C93639 * C1980) *
                       C1981 +
                   (((C50022 + C50021 + C50020) * C47574 +
                     (C50019 + C50018 + C50017) * C47568 +
                     (C47669 * C805 + C93855 * C887 + C47670 * C810 +
                      C93850 * C892 + C47671 * C4899 + C47572 * C5018) *
                         C47576 +
                     (C47669 * C813 + C93855 * C895 + C47670 * C818 +
                      C93850 * C900 + C47671 * C4902 + C47572 * C5021) *
                         C93590) *
                        C93706 * C93639 * C1980 -
                    ((C47703 + C47704 + C47705) * C93590 +
                     (C47706 + C47707 + C47708) * C47576 +
                     (C47702 + C47701 + C47700) * C47568 +
                     (C47699 + C47698 + C47697) * C47574) *
                        C93706 * C93639 * C1979) *
                       C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C47574 +
             (C275 * C114 + C93706 * C282) * C47568 + C305 * C47576 +
             C306 * C93590) *
                C93855 +
            (C48566 + C48567 + C48568 + C48569) * C93850 + C48580 * C47572) *
               C93639 * C1979 -
           ((C48574 + C48575 + C48576 + C48577) * C47572 +
            (C48573 + C48572 + C48571 + C48570) * C93850 +
            (C48569 + C48568 + C48567 + C48566) * C93855) *
               C93639 * C1980) *
              C1981 +
          (((C50121 + C50122 + C50123 + C50124) * C93855 +
            (C50125 + C50126 + C50127 + C50128) * C93850 +
            (C15767 * C47574 + C15766 * C47568 +
             (C275 * C4899 + C93706 * C5098) * C47576 +
             (C275 * C4902 + C93706 * C5101) * C93590) *
                C47572) *
               C93639 * C1980 -
           ((C50128 + C50127 + C50126 + C50125) * C47572 +
            (C50124 + C50123 + C50122 + C50121) * C93850 +
            (C308 * C93590 + C307 * C47576 + C306 * C47568 + C305 * C47574) *
                C93855) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C47669 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93855 +
            (C48679 + C48680) * C47670 + (C48681 + C48682) * C93850 +
            C48691 * C47671 + C48692 * C47572) *
               C93706 * C93639 * C1979 -
           ((C48687 + C48688) * C47572 + (C48689 + C48690) * C47671 +
            (C48686 + C48685) * C93850 + (C48684 + C48683) * C47670 +
            (C48682 + C48681) * C93855 + (C48680 + C48679) * C47669) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C50243 + C50244) * C47669 + (C50245 + C50246) * C93855 +
            (C50247 + C50248) * C47670 + (C50249 + C50250) * C93850 +
            (C47574 * C4898 + C47568 * C4901 + C47576 * C4899 +
             C93590 * C4902) *
                C47671 +
            (C47574 * C5017 + C47568 * C5213 + C47576 * C5018 +
             C93590 * C5214) *
                C47572) *
               C93706 * C93639 * C1980 -
           ((C50250 + C50249) * C47572 + (C50248 + C50247) * C47671 +
            (C50246 + C50245) * C93850 + (C50244 + C50243) * C47670 +
            (C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                C93855 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C47669) *
               C93706 * C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                      C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                      C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                         C47568 +
                     (C47970 + C47971 + C47972) * C93590) *
                        C93706 * C93639 * C1979 -
                    ((C50364 + C50365 + C50366) * C93590 +
                     (C47932 * C4897 + C48770 + C48770 + C47572 * C5325 +
                      C47931 * C808 + C48771 + C48771 + C93850 * C1080 +
                      C47930 * C807 + C48772 + C48772 + C93855 * C1079) *
                         C47568) *
                        C93706 * C93639 * C1980) *
                       C1981 +
                   (((C50366 + C50365 + C50364) * C47568 +
                     (C47930 * C805 + C50355 + C50355 + C93855 * C1077 +
                      C47931 * C810 + C50356 + C50356 + C93850 * C1082 +
                      C47932 * C4899 + C50357 + C50357 + C47572 * C5327) *
                         C93590) *
                        C93706 * C93639 * C1980 -
                    ((C47973 + C47974 + C47975) * C93590 +
                     (C47972 + C47971 + C47970) * C47568) *
                        C93706 * C93639 * C1979) *
                       C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C47669 +
             (C275 * C189 + C93706 * C501) * C93855 + C5123 * C47670 +
             C5426 * C93850 + C5130 * C47671 + C5429 * C47572) *
                C47568 +
            (C48050 + C48051 + C48052 + C48053 + C48054 + C48055) * C93590) *
               C93639 * C1979 -
           ((C50465 + C50466 + C50467 + C50468 + C50469 + C50470) * C93590 +
            (C16059 * C47572 + C15769 * C47671 + C5429 * C93850 +
             C5130 * C47670 + C5426 * C93855 + C5123 * C47669) *
                C47568) *
               C93639 * C1980) *
              C1981 +
          (((C50470 + C50469 + C50468 + C50467 + C50466 + C50465) * C47568 +
            (C2160 * C47669 + C2390 * C93855 + C5126 * C47670 + C5427 * C93850 +
             (C275 * C4899 + C93706 * C5098) * C47671 +
             (C275 * C5018 + C93706 * C5416) * C47572) *
                C93590) *
               C93639 * C1980 -
           ((C48056 + C48057 + C48058 + C48059 + C48060 + C48061) * C93590 +
            (C48055 + C48054 + C48053 + C48052 + C48051 + C48050) * C47568) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C275 +
             (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                 C93706) *
                C93855 +
            ((C48679 + C48680) * C275 + (C48940 + C48941) * C93706) * C93850 +
            C48948 * C47572) *
               C93639 * C1979 -
           (((C48944 + C48945) * C93706 + (C48689 + C48690) * C275) * C47572 +
            ((C48943 + C48942) * C93706 + (C48684 + C48683) * C275) * C93850 +
            ((C48941 + C48940) * C93706 + (C48680 + C48679) * C275) * C93855) *
               C93639 * C1980) *
              C1981 +
          ((((C50243 + C50244) * C275 + (C50577 + C50578) * C93706) * C93855 +
            ((C50247 + C50248) * C275 + (C50579 + C50580) * C93706) * C93850 +
            ((C47574 * C4898 + C47568 * C4901 + C47576 * C4899 +
              C93590 * C4902) *
                 C275 +
             (C47574 * C5097 + C47568 * C5504 + C47576 * C5098 +
              C93590 * C5505) *
                 C93706) *
                C47572) *
               C93639 * C1980 -
           (((C50580 + C50579) * C93706 + (C50248 + C50247) * C275) * C47572 +
            ((C50578 + C50577) * C93706 + (C50244 + C50243) * C275) * C93850 +
            ((C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                 C93706 +
             (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                 C275) *
                C93855) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                       C93850 * C889 + C47671 * C808 + C47572 * C890) *
                          C275 +
                      (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                       C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                          C93706) *
                         C47568 +
                     ((C47697 + C47698 + C47699) * C275 +
                      (C48222 + C48223 + C48224) * C93706) *
                         C93590) *
                        C93639 * C1979 -
                    (((C50685 + C50686 + C50687) * C93706 +
                      (C50020 + C50021 + C50022) * C275) *
                         C93590 +
                     ((C47671 * C5096 + C47572 * C5598 + C47670 * C956 +
                       C93850 * C1262 + C47669 * C955 + C93855 * C1261) *
                          C93706 +
                      (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                       C93850 * C890 + C47669 * C807 + C93855 * C889) *
                          C275) *
                         C47568) *
                        C93639 * C1980) *
                       C1981 +
                   ((((C50022 + C50021 + C50020) * C275 +
                      (C50687 + C50686 + C50685) * C93706) *
                         C47568 +
                     ((C47669 * C805 + C93855 * C887 + C47670 * C810 +
                       C93850 * C892 + C47671 * C4899 + C47572 * C5018) *
                          C275 +
                      (C47669 * C953 + C93855 * C1259 + C47670 * C958 +
                       C93850 * C1264 + C47671 * C5098 + C47572 * C5600) *
                          C93706) *
                         C93590) *
                        C93639 * C1980 -
                    (((C48225 + C48226 + C48227) * C93706 +
                      (C47706 + C47707 + C47708) * C275) *
                         C93590 +
                     ((C48224 + C48223 + C48222) * C93706 +
                      (C47699 + C47698 + C47697) * C275) *
                         C47568) *
                        C93639 * C1979) *
                       C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C93855 +
             C5698 * C93850 + C5701 * C47572) *
                C47568 +
            (C48302 + C48303 + C48304) * C93590) *
               C93639 * C1979 -
           ((C50786 + C50787 + C50788) * C93590 +
            (C16321 * C47572 + C5701 * C93850 + C5698 * C93855) * C47568) *
               C93639 * C1980) *
              C1981 +
          (((C50788 + C50787 + C50786) * C47568 +
            (C2625 * C93855 + C5699 * C93850 +
             (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C47572) *
                C93590) *
               C93639 * C1980 -
           ((C48305 + C48306 + C48307) * C93590 +
            (C48304 + C48303 + C48302) * C47568) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                      C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                         C93706 * C93855 +
                     (C48410 + C48411) * C93706 * C93850 + C48417 * C47572) *
                        C2695 -
                    ((C51847 + C51848) * C93706 * C47572 +
                     (C51849 + C51850) * C93706 * C93850 +
                     (C47575 * C1387 + C49175 + C49175 + C93590 * C1403 +
                      C47573 * C1388 + C49176 + C49176 + C47568 * C1404) *
                         C93706 * C93855) *
                        C2696) *
                       C1979 +
                   (((C51850 + C51849) * C93706 * C93855 +
                     (C51848 + C51847) * C93706 * C93850 +
                     (C47573 * C19095 + C51837 + C51837 + C47568 * C19099 +
                      C47575 * C19096 + C51838 + C51838 + C93590 * C19100) *
                         C93706 * C47572) *
                        C2696 -
                    ((C48414 + C48415) * C93706 * C47572 +
                     (C48413 + C48412) * C93706 * C93850 +
                     (C48411 + C48410) * C93706 * C93855) *
                        C2695) *
                       C1980) *
                  C93613) /
                 (p * q * std::sqrt(p + q));
    d2eexy[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C47574 +
                     (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                      C93850 * C897 + C47671 * C816 + C47572 * C898) *
                         C47568 +
                     (C47697 + C47698 + C47699) * C47576 +
                     (C47700 + C47701 + C47702) * C93590) *
                        C93706 * C2695 -
                    ((C51003 + C51004 + C51005) * C93590 +
                     (C51006 + C51007 + C51008) * C47576 +
                     (C47671 * C8523 + C47572 * C8648 + C47670 * C3413 +
                      C93850 * C3495 + C47669 * C1396 + C93855 * C1478) *
                         C47568 +
                     (C47671 * C8520 + C47572 * C8645 + C47670 * C3409 +
                      C93850 * C3491 + C47669 * C1388 + C93855 * C1470) *
                         C47574) *
                        C93706 * C2696) *
                       C1979 +
                   (((C47669 * C3409 + C93855 * C3491 + C47670 * C8520 +
                      C93850 * C8645 + C47671 * C19095 + C47572 * C19221) *
                         C47574 +
                     (C47669 * C3413 + C93855 * C3495 + C47670 * C8523 +
                      C93850 * C8648 + C47671 * C19097 + C47572 * C19223) *
                         C47568 +
                     (C47669 * C3410 + C93855 * C3492 + C47670 * C8521 +
                      C93850 * C8646 + C47671 * C19096 + C47572 * C19222) *
                         C47576 +
                     (C47669 * C3414 + C93855 * C3496 + C47670 * C8524 +
                      C93850 * C8649 + C47671 * C19098 + C47572 * C19224) *
                         C93590) *
                        C93706 * C2696 -
                    ((C50017 + C50018 + C50019) * C93590 +
                     (C50020 + C50021 + C50022) * C47576 +
                     (C47671 * C4900 + C47572 * C5019 + C47670 * C816 +
                      C93850 * C898 + C47669 * C815 + C93855 * C897) *
                         C47568 +
                     (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                      C93850 * C890 + C47669 * C807 + C93855 * C889) *
                         C47574) *
                        C93706 * C2695) *
                       C1980) *
                  C93613) /
                 (p * q * std::sqrt(p + q));
    d2eexz[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C47574 +
             (C275 * C114 + C93706 * C282) * C47568 + C305 * C47576 +
             C306 * C93590) *
                C93855 +
            (C48566 + C48567 + C48568 + C48569) * C93850 + C48580 * C47572) *
               C2695 -
           ((C52047 + C52048 + C52049 + C52050) * C47572 +
            (C52051 + C52052 + C52053 + C52054) * C93850 +
            (C2875 * C93590 + C2876 * C47576 +
             (C275 * C1396 + C93706 * C1544) * C47568 +
             (C275 * C1388 + C93706 * C1536) * C47574) *
                C93855) *
               C2696) *
              C1979 +
          (((C52054 + C52053 + C52052 + C52051) * C93855 +
            (C52050 + C52049 + C52048 + C52047) * C93850 +
            (C23022 * C47574 + C23021 * C47568 +
             (C275 * C19096 + C93706 * C19324) * C47576 +
             (C275 * C19098 + C93706 * C19326) * C93590) *
                C47572) *
               C2696 -
           ((C48574 + C48575 + C48576 + C48577) * C47572 +
            (C48573 + C48572 + C48571 + C48570) * C93850 +
            (C48569 + C48568 + C48567 + C48566) * C93855) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyx[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C47669 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93855 +
            (C48679 + C48680) * C47670 + (C48681 + C48682) * C93850 +
            C48691 * C47671 + C48692 * C47572) *
               C93706 * C2695 -
           ((C52169 + C52170) * C47572 + (C52171 + C52172) * C47671 +
            (C52173 + C52174) * C93850 + (C52175 + C52176) * C47670 +
            (C47576 * C1469 + C93590 * C1601 + C47574 * C1470 +
             C47568 * C1602) *
                C93855 +
            (C47576 * C1387 + C93590 * C1395 + C47574 * C1388 +
             C47568 * C1396) *
                C47669) *
               C93706 * C2696) *
              C1979 +
          (((C52176 + C52175) * C47669 + (C52174 + C52173) * C93855 +
            (C52172 + C52171) * C47670 + (C52170 + C52169) * C93850 +
            (C47574 * C19095 + C47568 * C19097 + C47576 * C19096 +
             C93590 * C19098) *
                C47671 +
            (C47574 * C19221 + C47568 * C19439 + C47576 * C19222 +
             C93590 * C19440) *
                C47572) *
               C93706 * C2696 -
           ((C48687 + C48688) * C47572 + (C48689 + C48690) * C47671 +
            (C48686 + C48685) * C93850 + (C48684 + C48683) * C47670 +
            (C48682 + C48681) * C93855 + (C48680 + C48679) * C47669) *
               C93706 * C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyy[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                      C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                      C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                         C47568 +
                     (C47970 + C47971 + C47972) * C93590) *
                        C93706 * C2695 -
                    ((C51318 + C51319 + C51320) * C93590 +
                     (C47932 * C8520 + C49482 + C49482 + C47572 * C8984 +
                      C47931 * C3409 + C49483 + C49483 + C93850 * C3709 +
                      C47930 * C1388 + C49484 + C49484 + C93855 * C1660) *
                         C47568) *
                        C93706 * C2696) *
                       C1979 +
                   (((C47930 * C3409 + C52275 + C52275 + C93855 * C3709 +
                      C47931 * C8520 + C52276 + C52276 + C93850 * C8984 +
                      C47932 * C19095 + C52277 + C52277 + C47572 * C19563) *
                         C47568 +
                     (C47930 * C3410 + C52278 + C52278 + C93855 * C3710 +
                      C47931 * C8521 + C52279 + C52279 + C93850 * C8985 +
                      C47932 * C19096 + C52280 + C52280 + C47572 * C19564) *
                         C93590) *
                        C93706 * C2696 -
                    ((C50364 + C50365 + C50366) * C93590 +
                     (C47932 * C4897 + C48770 + C48770 + C47572 * C5325 +
                      C47931 * C808 + C48771 + C48771 + C93850 * C1080 +
                      C47930 * C807 + C48772 + C48772 + C93855 * C1079) *
                         C47568) *
                        C93706 * C2695) *
                       C1980) *
                  C93613) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C47669 +
             (C275 * C189 + C93706 * C501) * C93855 + C5123 * C47670 +
             C5426 * C93850 + C5130 * C47671 + C5429 * C47572) *
                C47568 +
            (C48050 + C48051 + C48052 + C48053 + C48054 + C48055) * C93590) *
               C2695 -
           ((C51419 + C51420 + C51421 + C51422 + C51423 + C51424) * C93590 +
            (C19674 * C47572 + C19339 * C47671 + C9097 * C93850 +
             C8765 * C47670 + (C275 * C1470 + C93706 * C1726) * C93855 +
             (C275 * C1388 + C93706 * C1536) * C47669) *
                C47568) *
               C2696) *
              C1979 +
          (((C8765 * C47669 + C9097 * C93855 + C19339 * C47670 +
             C19674 * C93850 + C23022 * C47671 + C23250 * C47572) *
                C47568 +
            (C7772 * C47669 + C8100 * C93855 + C18365 * C47670 +
             C18685 * C93850 + (C275 * C19096 + C93706 * C19324) * C47671 +
             (C275 * C19222 + C93706 * C19670) * C47572) *
                C93590) *
               C2696 -
           ((C50465 + C50466 + C50467 + C50468 + C50469 + C50470) * C93590 +
            (C16059 * C47572 + C15769 * C47671 + C5429 * C93850 +
             C5130 * C47670 + C5426 * C93855 + C5123 * C47669) *
                C47568) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezx[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C275 +
             (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                 C93706) *
                C93855 +
            ((C48679 + C48680) * C275 + (C48940 + C48941) * C93706) * C93850 +
            C48948 * C47572) *
               C2695 -
           (((C52485 + C52486) * C93706 + (C52171 + C52172) * C275) * C47572 +
            ((C52487 + C52488) * C93706 + (C52175 + C52176) * C275) * C93850 +
            ((C47576 * C1535 + C93590 * C1783 + C47574 * C1536 +
              C47568 * C1784) *
                 C93706 +
             (C47576 * C1387 + C93590 * C1395 + C47574 * C1388 +
              C47568 * C1396) *
                 C275) *
                C93855) *
               C2696) *
              C1979 +
          ((((C52176 + C52175) * C275 + (C52488 + C52487) * C93706) * C93855 +
            ((C52172 + C52171) * C275 + (C52486 + C52485) * C93706) * C93850 +
            ((C47574 * C19095 + C47568 * C19097 + C47576 * C19096 +
              C93590 * C19098) *
                 C275 +
             (C47574 * C19323 + C47568 * C19772 + C47576 * C19324 +
              C93590 * C19773) *
                 C93706) *
                C47572) *
               C2696 -
           (((C48944 + C48945) * C93706 + (C48689 + C48690) * C275) * C47572 +
            ((C48943 + C48942) * C93706 + (C48684 + C48683) * C275) * C93850 +
            ((C48941 + C48940) * C93706 + (C48680 + C48679) * C275) * C93855) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezy[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                       C93850 * C889 + C47671 * C808 + C47572 * C890) *
                          C275 +
                      (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                       C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                          C93706) *
                         C47568 +
                     ((C47697 + C47698 + C47699) * C275 +
                      (C48222 + C48223 + C48224) * C93706) *
                         C93590) *
                        C2695 -
                    (((C51627 + C51628 + C51629) * C93706 +
                      (C51006 + C51007 + C51008) * C275) *
                         C93590 +
                     ((C47671 * C8749 + C47572 * C9305 + C47670 * C3565 +
                       C93850 * C3923 + C47669 * C1536 + C93855 * C1842) *
                          C93706 +
                      (C47671 * C8520 + C47572 * C8645 + C47670 * C3409 +
                       C93850 * C3491 + C47669 * C1388 + C93855 * C1470) *
                          C275) *
                         C47568) *
                        C2696) *
                       C1979 +
                   ((((C47669 * C3409 + C93855 * C3491 + C47670 * C8520 +
                       C93850 * C8645 + C47671 * C19095 + C47572 * C19221) *
                          C275 +
                      (C47669 * C3565 + C93855 * C3923 + C47670 * C8749 +
                       C93850 * C9305 + C47671 * C19323 + C47572 * C19884) *
                          C93706) *
                         C47568 +
                     ((C47669 * C3410 + C93855 * C3492 + C47670 * C8521 +
                       C93850 * C8646 + C47671 * C19096 + C47572 * C19222) *
                          C275 +
                      (C47669 * C3566 + C93855 * C3924 + C47670 * C8750 +
                       C93850 * C9306 + C47671 * C19324 + C47572 * C19885) *
                          C93706) *
                         C93590) *
                        C2696 -
                    (((C50685 + C50686 + C50687) * C93706 +
                      (C50020 + C50021 + C50022) * C275) *
                         C93590 +
                     ((C47671 * C5096 + C47572 * C5598 + C47670 * C956 +
                       C93850 * C1262 + C47669 * C955 + C93855 * C1261) *
                          C93706 +
                      (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                       C93850 * C890 + C47669 * C807 + C93855 * C889) *
                          C275) *
                         C47568) *
                        C2695) *
                       C1980) *
                  C93613) /
                 (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C93855 +
             C5698 * C93850 + C5701 * C47572) *
                C47568 +
            (C48302 + C48303 + C48304) * C93590) *
               C2695 -
           ((C51728 + C51729 + C51730) * C93590 +
            (C19993 * C47572 + C9417 * C93850 +
             (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93855) *
                C47568) *
               C2696) *
              C1979 +
          (((C9417 * C93855 + C19993 * C93850 + C23472 * C47572) * C47568 +
            (C8420 * C93855 + C18996 * C93850 +
             (C713 * C19096 + C19990 + C19990 + C93706 * C19985) * C47572) *
                C93590) *
               C2696 -
           ((C50786 + C50787 + C50788) * C93590 +
            (C16321 * C47572 + C5701 * C93850 + C5698 * C93855) * C47568) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexx[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                     C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                        C93706 * C93855 +
                    (C48410 + C48411) * C93706 * C93850 + C48417 * C47572) *
                       C93639 * C800 -
                   ((C48414 + C48415) * C93706 * C47572 +
                    (C48413 + C48412) * C93706 * C93850 +
                    (C48411 + C48410) * C93706 * C93855) *
                       C93639 * C801 +
                   (C48417 * C93855 + (C48415 + C48414) * C93706 * C93850 +
                    (C47573 * C15550 + C48396 + C48396 + C47568 * C15554 +
                     C47575 * C15551 + C48397 + C48397 + C93590 * C15555) *
                        C93706 * C47572) *
                       C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                     C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                        C93706 * C93855 +
                    (C47573 * C807 + C47580 + C47580 + C47568 * C823 +
                     C47575 * C806 + C47581 + C47581 + C93590 * C822) *
                        C93706 * C93850 +
                    (C47573 * C808 + C47582 + C47582 + C47568 * C824 +
                     C47575 * C809 + C47583 + C47583 + C93590 * C825) *
                        C93706 * C47572) *
                       C93639 * C93625 * C97 -
                   ((C47575 * C810 + C47584 + C47584 + C93590 * C826 +
                     C47573 * C809 + C47585 + C47585 + C47568 * C825) *
                        C93706 * C47572 +
                    (C47575 * C805 + C47586 + C47586 + C93590 * C821 +
                     C47573 * C806 + C47587 + C47587 + C47568 * C822) *
                        C93706 * C93850 +
                    (C47575 * C110 + C47588 + C47588 + C93590 * C122 +
                     C47573 * C109 + C47589 + C47589 + C47568 * C121) *
                        C93706 * C93855) *
                       C93639 * C93625 * C98 +
                   ((C47573 * C110 + C47590 + C47590 + C47568 * C122 +
                     C47575 * C111 + C47591 + C47591 + C93590 * C123) *
                        C93706 * C93855 +
                    (C47573 * C805 + C47592 + C47592 + C47568 * C821 +
                     C47575 * C804 + C47593 + C47593 + C93590 * C820) *
                        C93706 * C93850 +
                    (C47573 * C810 + C47594 + C47594 + C47568 * C826 +
                     C47575 * C811 + C47595 + C47595 + C93590 * C827) *
                        C93706 * C47572) *
                       C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                     C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                        C93706 * C93855 +
                    (C48410 + C48411) * C93706 * C93850 + C48417 * C47572) *
                       C1382 -
                   ((C47575 * C8521 + C49171 + C49171 + C93590 * C8527 +
                     C47573 * C8520 + C49172 + C49172 + C47568 * C8526) *
                        C93706 * C47572 +
                    (C47575 * C3410 + C49173 + C49173 + C93590 * C3418 +
                     C47573 * C3409 + C49174 + C49174 + C47568 * C3417) *
                        C93706 * C93850 +
                    (C47575 * C1387 + C49175 + C49175 + C93590 * C1403 +
                     C47573 * C1388 + C49176 + C49176 + C47568 * C1404) *
                        C93706 * C93855) *
                       C1383 +
                   ((C47573 * C1389 + C49177 + C49177 + C47568 * C1405 +
                     C47575 * C1390 + C49178 + C49178 + C93590 * C1406) *
                        C93706 * C93855 +
                    (C47573 * C5775 + C49179 + C49179 + C47568 * C5781 +
                     C47575 * C5776 + C49180 + C49180 + C93590 * C5782) *
                        C93706 * C93850 +
                    (C47573 * C16395 + C49181 + C49181 + C47568 * C16399 +
                     C47575 * C16396 + C49182 + C49182 + C93590 * C16400) *
                        C93706 * C47572) *
                       C1384) *
                  C93625 * C93613) /
                     (p * q * std::sqrt(p + q));
    d2eexy[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                     C93850 * C889 + C47671 * C808 + C47572 * C890) *
                        C47574 +
                    (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                     C93850 * C897 + C47671 * C816 + C47572 * C898) *
                        C47568 +
                    (C47697 + C47698 + C47699) * C47576 +
                    (C47700 + C47701 + C47702) * C93590) *
                       C93706 * C93639 * C800 -
                   ((C47671 * C4901 + C47572 * C5020 + C47670 * C817 +
                     C93850 * C899 + C47669 * C814 + C93855 * C896) *
                        C93590 +
                    (C47671 * C4898 + C47572 * C5017 + C47670 * C809 +
                     C93850 * C891 + C47669 * C806 + C93855 * C888) *
                        C47576 +
                    (C47671 * C4900 + C47572 * C5019 + C47670 * C816 +
                     C93850 * C898 + C47669 * C815 + C93855 * C897) *
                        C47568 +
                    (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                     C93850 * C890 + C47669 * C807 + C93855 * C889) *
                        C47574) *
                       C93706 * C93639 * C801 +
                   ((C47669 * C808 + C93855 * C890 + C47670 * C4897 +
                     C93850 * C5016 + C47671 * C15550 + C47572 * C15666) *
                        C47574 +
                    (C47669 * C816 + C93855 * C898 + C47670 * C4900 +
                     C93850 * C5019 + C47671 * C15552 + C47572 * C15668) *
                        C47568 +
                    (C47669 * C809 + C93855 * C891 + C47670 * C4898 +
                     C93850 * C5017 + C47671 * C15551 + C47572 * C15667) *
                        C47576 +
                    (C47669 * C817 + C93855 * C899 + C47670 * C4901 +
                     C93850 * C5020 + C47671 * C15553 + C47572 * C15669) *
                        C93590) *
                       C93706 * C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                     C93850 * C889 + C47671 * C808 + C47572 * C890) *
                        C47574 +
                    (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                     C93850 * C897 + C47671 * C816 + C47572 * C898) *
                        C47568 +
                    (C47697 + C47698 + C47699) * C47576 +
                    (C47700 + C47701 + C47702) * C93590) *
                       C93706 * C93639 * C93625 * C97 -
                   ((C47703 + C47704 + C47705) * C93590 +
                    (C47706 + C47707 + C47708) * C47576 +
                    (C47702 + C47701 + C47700) * C47568 +
                    (C47699 + C47698 + C47697) * C47574) *
                       C93706 * C93639 * C93625 * C98 +
                   ((C47708 + C47707 + C47706) * C47574 +
                    (C47705 + C47704 + C47703) * C47568 +
                    (C47669 * C111 + C93855 * C192 + C47670 * C804 +
                     C93850 * C886 + C47671 * C811 + C47572 * C893) *
                        C47576 +
                    (C47669 * C117 + C93855 * C198 + C47670 * C812 +
                     C93850 * C894 + C47671 * C819 + C47572 * C901) *
                        C93590) *
                       C93706 * C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                     C93850 * C889 + C47671 * C808 + C47572 * C890) *
                        C47574 +
                    (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                     C93850 * C897 + C47671 * C816 + C47572 * C898) *
                        C47568 +
                    (C47697 + C47698 + C47699) * C47576 +
                    (C47700 + C47701 + C47702) * C93590) *
                       C93706 * C1382 -
                   ((C47671 * C8524 + C47572 * C8649 + C47670 * C3414 +
                     C93850 * C3496 + C47669 * C1395 + C93855 * C1477) *
                        C93590 +
                    (C47671 * C8521 + C47572 * C8646 + C47670 * C3410 +
                     C93850 * C3492 + C47669 * C1387 + C93855 * C1469) *
                        C47576 +
                    (C47671 * C8523 + C47572 * C8648 + C47670 * C3413 +
                     C93850 * C3495 + C47669 * C1396 + C93855 * C1478) *
                        C47568 +
                    (C47671 * C8520 + C47572 * C8645 + C47670 * C3409 +
                     C93850 * C3491 + C47669 * C1388 + C93855 * C1470) *
                        C47574) *
                       C93706 * C1383 +
                   ((C47669 * C1389 + C93855 * C1471 + C47670 * C5775 +
                     C93850 * C5870 + C47671 * C16395 + C47572 * C16487) *
                        C47574 +
                    (C47669 * C1397 + C93855 * C1479 + C47670 * C5778 +
                     C93850 * C5873 + C47671 * C16397 + C47572 * C16489) *
                        C47568 +
                    (C47669 * C1390 + C93855 * C1472 + C47670 * C5776 +
                     C93850 * C5871 + C47671 * C16396 + C47572 * C16488) *
                        C47576 +
                    (C47669 * C1398 + C93855 * C1480 + C47670 * C5779 +
                     C93850 * C5874 + C47671 * C16398 + C47572 * C16490) *
                        C93590) *
                       C93706 * C1384) *
                  C93625 * C93613) /
                     (p * q * std::sqrt(p + q));
    d2eexz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C47574 +
            (C275 * C114 + C93706 * C282) * C47568 + C305 * C47576 +
            C306 * C93590) *
               C93855 +
           (C48566 + C48567 + C48568 + C48569) * C93850 + C48580 * C47572) *
              C93639 * C800 -
          ((C48574 + C48575 + C48576 + C48577) * C47572 +
           (C48573 + C48572 + C48571 + C48570) * C93850 +
           (C48569 + C48568 + C48567 + C48566) * C93855) *
              C93639 * C801 +
          (C48580 * C93855 + (C48577 + C48576 + C48575 + C48574) * C93850 +
           (C20679 * C47574 + C20678 * C47568 +
            (C275 * C15551 + C93706 * C15745) * C47576 +
            (C275 * C15553 + C93706 * C15747) * C93590) *
               C47572) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C47574 +
            (C275 * C114 + C93706 * C282) * C47568 + C305 * C47576 +
            C306 * C93590) *
               C93855 +
           (C5123 * C47574 + C5124 * C47568 + C2162 * C47576 + C2161 * C93590) *
               C93850 +
           (C5130 * C47574 + C5129 * C47568 + C5128 * C47576 + C5127 * C93590) *
               C47572) *
              C93639 * C93625 * C97 -
          ((C5125 * C93590 + C5126 * C47576 + C5127 * C47568 + C5128 * C47574) *
               C47572 +
           (C2159 * C93590 + C2160 * C47576 + C2161 * C47568 + C2162 * C47574) *
               C93850 +
           (C308 * C93590 + C307 * C47576 + C306 * C47568 + C305 * C47574) *
               C93855) *
              C93639 * C93625 * C98 +
          ((C307 * C47574 + C308 * C47568 + C309 * C47576 + C310 * C93590) *
               C93855 +
           (C2160 * C47574 + C2159 * C47568 + C2158 * C47576 + C2157 * C93590) *
               C93850 +
           (C5126 * C47574 + C5125 * C47568 +
            (C275 * C811 + C93706 * C959) * C47576 +
            (C275 * C819 + C93706 * C967) * C93590) *
               C47572) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C47574 +
            (C275 * C114 + C93706 * C282) * C47568 + C305 * C47576 +
            C306 * C93590) *
               C93855 +
           (C48566 + C48567 + C48568 + C48569) * C93850 + C48580 * C47572) *
              C1382 -
          ((C18364 * C93590 + C18365 * C47576 + C19338 * C47568 +
            C19339 * C47574) *
               C47572 +
           (C7771 * C93590 + C7772 * C47576 + C8764 * C47568 + C8765 * C47574) *
               C93850 +
           (C2875 * C93590 + C2876 * C47576 +
            (C275 * C1396 + C93706 * C1544) * C47568 +
            (C275 * C1388 + C93706 * C1536) * C47574) *
               C93855) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C47574 +
            (C275 * C1397 + C93706 * C1545) * C47568 +
            (C275 * C1390 + C93706 * C1538) * C47576 +
            (C275 * C1398 + C93706 * C1546) * C93590) *
               C93855 +
           ((C275 * C5775 + C93706 * C5950) * C47574 +
            (C275 * C5778 + C93706 * C5953) * C47568 +
            (C275 * C5776 + C93706 * C5951) * C47576 +
            (C275 * C5779 + C93706 * C5954) * C93590) *
               C93850 +
           ((C275 * C16395 + C93706 * C16565) * C47574 +
            (C275 * C16397 + C93706 * C16567) * C47568 +
            (C275 * C16396 + C93706 * C16566) * C47576 +
            (C275 * C16398 + C93706 * C16568) * C93590) *
               C47572) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
               C47669 +
           (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
               C93855 +
           (C48679 + C48680) * C47670 + (C48681 + C48682) * C93850 +
           C48691 * C47671 + C48692 * C47572) *
              C93706 * C93639 * C800 -
          ((C48687 + C48688) * C47572 + (C48689 + C48690) * C47671 +
           (C48686 + C48685) * C93850 + (C48684 + C48683) * C47670 +
           (C48682 + C48681) * C93855 + (C48680 + C48679) * C47669) *
              C93706 * C93639 * C801 +
          (C48691 * C47669 + C48692 * C93855 + (C48690 + C48689) * C47670 +
           (C48688 + C48687) * C93850 +
           (C47574 * C15550 + C47568 * C15552 + C47576 * C15551 +
            C93590 * C15553) *
               C47671 +
           (C47574 * C15666 + C47568 * C15849 + C47576 * C15667 +
            C93590 * C15850) *
               C47572) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
               C47669 +
           (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
               C93855 +
           (C47574 * C807 + C47568 * C815 + C47576 * C806 + C93590 * C814) *
               C47670 +
           (C47574 * C889 + C47568 * C1021 + C47576 * C888 + C93590 * C1020) *
               C93850 +
           (C47574 * C808 + C47568 * C816 + C47576 * C809 + C93590 * C817) *
               C47671 +
           (C47574 * C890 + C47568 * C1022 + C47576 * C891 + C93590 * C1023) *
               C47572) *
              C93706 * C93639 * C93625 * C97 -
          ((C47576 * C892 + C93590 * C1024 + C47574 * C891 + C47568 * C1023) *
               C47572 +
           (C47576 * C810 + C93590 * C818 + C47574 * C809 + C47568 * C817) *
               C47671 +
           (C47576 * C887 + C93590 * C1019 + C47574 * C888 + C47568 * C1020) *
               C93850 +
           (C47576 * C805 + C93590 * C813 + C47574 * C806 + C47568 * C814) *
               C47670 +
           (C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
               C93855 +
           (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
               C47669) *
              C93706 * C93639 * C93625 * C98 +
          ((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
               C47669 +
           (C47574 * C191 + C47568 * C364 + C47576 * C192 + C93590 * C365) *
               C93855 +
           (C47574 * C805 + C47568 * C813 + C47576 * C804 + C93590 * C812) *
               C47670 +
           (C47574 * C887 + C47568 * C1019 + C47576 * C886 + C93590 * C1018) *
               C93850 +
           (C47574 * C810 + C47568 * C818 + C47576 * C811 + C93590 * C819) *
               C47671 +
           (C47574 * C892 + C47568 * C1024 + C47576 * C893 + C93590 * C1025) *
               C47572) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
               C47669 +
           (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
               C93855 +
           (C48679 + C48680) * C47670 + (C48681 + C48682) * C93850 +
           C48691 * C47671 + C48692 * C47572) *
              C93706 * C1382 -
          ((C47576 * C8646 + C93590 * C8866 + C47574 * C8645 + C47568 * C8865) *
               C47572 +
           (C47576 * C8521 + C93590 * C8524 + C47574 * C8520 + C47568 * C8523) *
               C47671 +
           (C47576 * C3492 + C93590 * C3640 + C47574 * C3491 + C47568 * C3639) *
               C93850 +
           (C47576 * C3410 + C93590 * C3414 + C47574 * C3409 + C47568 * C3413) *
               C47670 +
           (C47576 * C1469 + C93590 * C1601 + C47574 * C1470 + C47568 * C1602) *
               C93855 +
           (C47576 * C1387 + C93590 * C1395 + C47574 * C1388 + C47568 * C1396) *
               C47669) *
              C93706 * C1383 +
          ((C47574 * C1389 + C47568 * C1397 + C47576 * C1390 + C93590 * C1398) *
               C47669 +
           (C47574 * C1471 + C47568 * C1603 + C47576 * C1472 + C93590 * C1604) *
               C93855 +
           (C47574 * C5775 + C47568 * C5778 + C47576 * C5776 + C93590 * C5779) *
               C47670 +
           (C47574 * C5870 + C47568 * C6030 + C47576 * C5871 + C93590 * C6031) *
               C93850 +
           (C47574 * C16395 + C47568 * C16397 + C47576 * C16396 +
            C93590 * C16398) *
               C47671 +
           (C47574 * C16487 + C47568 * C16643 + C47576 * C16488 +
            C93590 * C16644) *
               C47572) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                     C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                     C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                        C47568 +
                    (C47970 + C47971 + C47972) * C93590) *
                       C93706 * C93639 * C800 -
                   ((C47932 * C4898 + C48767 + C48767 + C47572 * C5326 +
                     C47931 * C809 + C48768 + C48768 + C93850 * C1081 +
                     C47930 * C806 + C48769 + C48769 + C93855 * C1078) *
                        C93590 +
                    (C47932 * C4897 + C48770 + C48770 + C47572 * C5325 +
                     C47931 * C808 + C48771 + C48771 + C93850 * C1080 +
                     C47930 * C807 + C48772 + C48772 + C93855 * C1079) *
                        C47568) *
                       C93706 * C93639 * C801 +
                   ((C47930 * C808 + C48773 + C48773 + C93855 * C1080 +
                     C47931 * C4897 + C48774 + C48774 + C93850 * C5325 +
                     C47932 * C15550 + C48775 + C48775 + C47572 * C15963) *
                        C47568 +
                    (C47930 * C809 + C48776 + C48776 + C93855 * C1081 +
                     C47931 * C4898 + C48777 + C48777 + C93850 * C5326 +
                     C47932 * C15551 + C48778 + C48778 + C47572 * C15964) *
                        C93590) *
                       C93706 * C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                     C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                     C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                        C47568 +
                    (C47970 + C47971 + C47972) * C93590) *
                       C93706 * C93639 * C93625 * C97 -
                   ((C47973 + C47974 + C47975) * C93590 +
                    (C47972 + C47971 + C47970) * C47568) *
                       C93706 * C93639 * C93625 * C98 +
                   ((C47975 + C47974 + C47973) * C47568 +
                    (C47930 * C111 + C47955 + C47955 + C93855 * C422 +
                     C47931 * C804 + C47956 + C47956 + C93850 * C1076 +
                     C47932 * C811 + C47957 + C47957 + C47572 * C1083) *
                        C93590) *
                       C93706 * C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                     C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                     C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                        C47568 +
                    (C47970 + C47971 + C47972) * C93590) *
                       C93706 * C1382 -
                   ((C47932 * C8521 + C49479 + C49479 + C47572 * C8985 +
                     C47931 * C3410 + C49480 + C49480 + C93850 * C3710 +
                     C47930 * C1387 + C49481 + C49481 + C93855 * C1659) *
                        C93590 +
                    (C47932 * C8520 + C49482 + C49482 + C47572 * C8984 +
                     C47931 * C3409 + C49483 + C49483 + C93850 * C3709 +
                     C47930 * C1388 + C49484 + C49484 + C93855 * C1660) *
                        C47568) *
                       C93706 * C1383 +
                   ((C47930 * C1389 + C49485 + C49485 + C93855 * C1661 +
                     C47931 * C5775 + C49486 + C49486 + C93850 * C6107 +
                     C47932 * C16395 + C49487 + C49487 + C47572 * C16719) *
                        C47568 +
                    (C47930 * C1390 + C49488 + C49488 + C93855 * C1662 +
                     C47931 * C5776 + C49489 + C49489 + C93850 * C6108 +
                     C47932 * C16396 + C49490 + C49490 + C47572 * C16720) *
                        C93590) *
                       C93706 * C1384) *
                  C93625 * C93613) /
                     (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C47669 +
            (C275 * C189 + C93706 * C501) * C93855 + C5123 * C47670 +
            C5426 * C93850 + C5130 * C47671 + C5429 * C47572) *
               C47568 +
           (C48050 + C48051 + C48052 + C48053 + C48054 + C48055) * C93590) *
              C93639 * C800 -
          ((C16058 * C47572 + C15767 * C47671 + C5428 * C93850 +
            C5128 * C47670 + C2391 * C93855 + C2162 * C47669) *
               C93590 +
           (C16059 * C47572 + C15769 * C47671 + C5429 * C93850 +
            C5130 * C47670 + C5426 * C93855 + C5123 * C47669) *
               C47568) *
              C93639 * C801 +
          ((C5130 * C47669 + C5429 * C93855 + C15769 * C47670 +
            C16059 * C93850 + C20679 * C47671 + C20869 * C47572) *
               C47568 +
           (C5128 * C47669 + C5428 * C93855 + C15767 * C47670 +
            C16058 * C93850 + (C275 * C15551 + C93706 * C15745) * C47671 +
            (C275 * C15667 + C93706 * C16052) * C47572) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C47669 +
            (C275 * C189 + C93706 * C501) * C93855 + C5123 * C47670 +
            C5426 * C93850 + C5130 * C47671 + C5429 * C47572) *
               C47568 +
           (C48050 + C48051 + C48052 + C48053 + C48054 + C48055) * C93590) *
              C93639 * C93625 * C97 -
          ((C48056 + C48057 + C48058 + C48059 + C48060 + C48061) * C93590 +
           (C48055 + C48054 + C48053 + C48052 + C48051 + C48050) * C47568) *
              C93639 * C93625 * C98 +
          ((C48061 + C48060 + C48059 + C48058 + C48057 + C48056) * C47568 +
           (C309 * C47669 + C522 * C93855 + C2158 * C47670 + C2389 * C93850 +
            (C275 * C811 + C93706 * C959) * C47671 +
            (C275 * C893 + C93706 * C1149) * C47572) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C47669 +
            (C275 * C189 + C93706 * C501) * C93855 + C5123 * C47670 +
            C5426 * C93850 + C5130 * C47671 + C5429 * C47572) *
               C47568 +
           (C48050 + C48051 + C48052 + C48053 + C48054 + C48055) * C93590) *
              C1382 -
          ((C18685 * C47572 + C18365 * C47671 + C8100 * C93850 +
            C7772 * C47670 + C3105 * C93855 + C2876 * C47669) *
               C93590 +
           (C19674 * C47572 + C19339 * C47671 + C9097 * C93850 +
            C8765 * C47670 + (C275 * C1470 + C93706 * C1726) * C93855 +
            (C275 * C1388 + C93706 * C1536) * C47669) *
               C47568) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C47669 +
            (C275 * C1471 + C93706 * C1727) * C93855 +
            (C275 * C5775 + C93706 * C5950) * C47670 +
            (C275 * C5870 + C93706 * C6196) * C93850 +
            (C275 * C16395 + C93706 * C16565) * C47671 +
            (C275 * C16487 + C93706 * C16807) * C47572) *
               C47568 +
           ((C275 * C1390 + C93706 * C1538) * C47669 +
            (C275 * C1472 + C93706 * C1728) * C93855 +
            (C275 * C5776 + C93706 * C5951) * C47670 +
            (C275 * C5871 + C93706 * C6197) * C93850 +
            (C275 * C16396 + C93706 * C16566) * C47671 +
            (C275 * C16488 + C93706 * C16808) * C47572) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C275 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93706) *
               C93855 +
           ((C48679 + C48680) * C275 + (C48940 + C48941) * C93706) * C93850 +
           C48948 * C47572) *
              C93639 * C800 -
          (((C48944 + C48945) * C93706 + (C48689 + C48690) * C275) * C47572 +
           ((C48943 + C48942) * C93706 + (C48684 + C48683) * C275) * C93850 +
           ((C48941 + C48940) * C93706 + (C48680 + C48679) * C275) * C93855) *
              C93639 * C801 +
          (C48948 * C93855 +
           ((C48690 + C48689) * C275 + (C48945 + C48944) * C93706) * C93850 +
           ((C47574 * C15550 + C47568 * C15552 + C47576 * C15551 +
             C93590 * C15553) *
                C275 +
            (C47574 * C15744 + C47568 * C16133 + C47576 * C15745 +
             C93590 * C16134) *
                C93706) *
               C47572) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C275 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93706) *
               C93855 +
           ((C47574 * C807 + C47568 * C815 + C47576 * C806 + C93590 * C814) *
                C275 +
            (C47574 * C955 + C47568 * C1203 + C47576 * C954 + C93590 * C1202) *
                C93706) *
               C93850 +
           ((C47574 * C808 + C47568 * C816 + C47576 * C809 + C93590 * C817) *
                C275 +
            (C47574 * C956 + C47568 * C1204 + C47576 * C957 + C93590 * C1205) *
                C93706) *
               C47572) *
              C93639 * C93625 * C97 -
          (((C47576 * C958 + C93590 * C1206 + C47574 * C957 + C47568 * C1205) *
                C93706 +
            (C47576 * C810 + C93590 * C818 + C47574 * C809 + C47568 * C817) *
                C275) *
               C47572 +
           ((C47576 * C953 + C93590 * C1201 + C47574 * C954 + C47568 * C1202) *
                C93706 +
            (C47576 * C805 + C93590 * C813 + C47574 * C806 + C47568 * C814) *
                C275) *
               C93850 +
           ((C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                C93706 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C275) *
               C93855) *
              C93639 * C93625 * C98 +
          (((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
                C275 +
            (C47574 * C278 + C47568 * C581 + C47576 * C279 + C93590 * C582) *
                C93706) *
               C93855 +
           ((C47574 * C805 + C47568 * C813 + C47576 * C804 + C93590 * C812) *
                C275 +
            (C47574 * C953 + C47568 * C1201 + C47576 * C952 + C93590 * C1200) *
                C93706) *
               C93850 +
           ((C47574 * C810 + C47568 * C818 + C47576 * C811 + C93590 * C819) *
                C275 +
            (C47574 * C958 + C47568 * C1206 + C47576 * C959 + C93590 * C1207) *
                C93706) *
               C47572) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C275 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93706) *
               C93855 +
           ((C48679 + C48680) * C275 + (C48940 + C48941) * C93706) * C93850 +
           C48948 * C47572) *
              C1382 -
          (((C47576 * C8750 + C93590 * C9196 + C47574 * C8749 +
             C47568 * C9195) *
                C93706 +
            (C47576 * C8521 + C93590 * C8524 + C47574 * C8520 +
             C47568 * C8523) *
                C275) *
               C47572 +
           ((C47576 * C3566 + C93590 * C3854 + C47574 * C3565 +
             C47568 * C3853) *
                C93706 +
            (C47576 * C3410 + C93590 * C3414 + C47574 * C3409 +
             C47568 * C3413) *
                C275) *
               C93850 +
           ((C47576 * C1535 + C93590 * C1783 + C47574 * C1536 +
             C47568 * C1784) *
                C93706 +
            (C47576 * C1387 + C93590 * C1395 + C47574 * C1388 +
             C47568 * C1396) *
                C275) *
               C93855) *
              C1383 +
          (((C47574 * C1389 + C47568 * C1397 + C47576 * C1390 +
             C93590 * C1398) *
                C275 +
            (C47574 * C1537 + C47568 * C1785 + C47576 * C1538 +
             C93590 * C1786) *
                C93706) *
               C93855 +
           ((C47574 * C5775 + C47568 * C5778 + C47576 * C5776 +
             C93590 * C5779) *
                C275 +
            (C47574 * C5950 + C47568 * C6273 + C47576 * C5951 +
             C93590 * C6274) *
                C93706) *
               C93850 +
           ((C47574 * C16395 + C47568 * C16397 + C47576 * C16396 +
             C93590 * C16398) *
                C275 +
            (C47574 * C16565 + C47568 * C16883 + C47576 * C16566 +
             C93590 * C16884) *
                C93706) *
               C47572) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C275 +
                     (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                      C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                         C93706) *
                        C47568 +
                    ((C47697 + C47698 + C47699) * C275 +
                     (C48222 + C48223 + C48224) * C93706) *
                        C93590) *
                       C93639 * C800 -
                   (((C47671 * C5097 + C47572 * C5599 + C47670 * C957 +
                      C93850 * C1263 + C47669 * C954 + C93855 * C1260) *
                         C93706 +
                     (C47671 * C4898 + C47572 * C5017 + C47670 * C809 +
                      C93850 * C891 + C47669 * C806 + C93855 * C888) *
                         C275) *
                        C93590 +
                    ((C47671 * C5096 + C47572 * C5598 + C47670 * C956 +
                      C93850 * C1262 + C47669 * C955 + C93855 * C1261) *
                         C93706 +
                     (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                      C93850 * C890 + C47669 * C807 + C93855 * C889) *
                         C275) *
                        C47568) *
                       C93639 * C801 +
                   (((C47669 * C808 + C93855 * C890 + C47670 * C4897 +
                      C93850 * C5016 + C47671 * C15550 + C47572 * C15666) *
                         C275 +
                     (C47669 * C956 + C93855 * C1262 + C47670 * C5096 +
                      C93850 * C5598 + C47671 * C15744 + C47572 * C16231) *
                         C93706) *
                        C47568 +
                    ((C47669 * C809 + C93855 * C891 + C47670 * C4898 +
                      C93850 * C5017 + C47671 * C15551 + C47572 * C15667) *
                         C275 +
                     (C47669 * C957 + C93855 * C1263 + C47670 * C5097 +
                      C93850 * C5599 + C47671 * C15745 + C47572 * C16232) *
                         C93706) *
                        C93590) *
                       C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C275 +
                     (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                      C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                         C93706) *
                        C47568 +
                    ((C47697 + C47698 + C47699) * C275 +
                     (C48222 + C48223 + C48224) * C93706) *
                        C93590) *
                       C93639 * C93625 * C97 -
                   (((C48225 + C48226 + C48227) * C93706 +
                     (C47706 + C47707 + C47708) * C275) *
                        C93590 +
                    ((C48224 + C48223 + C48222) * C93706 +
                     (C47699 + C47698 + C47697) * C275) *
                        C47568) *
                       C93639 * C93625 * C98 +
                   (((C47708 + C47707 + C47706) * C275 +
                     (C48227 + C48226 + C48225) * C93706) *
                        C47568 +
                    ((C47669 * C111 + C93855 * C192 + C47670 * C804 +
                      C93850 * C886 + C47671 * C811 + C47572 * C893) *
                         C275 +
                     (C47669 * C279 + C93855 * C638 + C47670 * C952 +
                      C93850 * C1258 + C47671 * C959 + C47572 * C1265) *
                         C93706) *
                        C93590) *
                       C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C275 +
                     (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                      C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                         C93706) *
                        C47568 +
                    ((C47697 + C47698 + C47699) * C275 +
                     (C48222 + C48223 + C48224) * C93706) *
                        C93590) *
                       C1382 -
                   (((C47671 * C8750 + C47572 * C9306 + C47670 * C3566 +
                      C93850 * C3924 + C47669 * C1535 + C93855 * C1841) *
                         C93706 +
                     (C47671 * C8521 + C47572 * C8646 + C47670 * C3410 +
                      C93850 * C3492 + C47669 * C1387 + C93855 * C1469) *
                         C275) *
                        C93590 +
                    ((C47671 * C8749 + C47572 * C9305 + C47670 * C3565 +
                      C93850 * C3923 + C47669 * C1536 + C93855 * C1842) *
                         C93706 +
                     (C47671 * C8520 + C47572 * C8645 + C47670 * C3409 +
                      C93850 * C3491 + C47669 * C1388 + C93855 * C1470) *
                         C275) *
                        C47568) *
                       C1383 +
                   (((C47669 * C1389 + C93855 * C1471 + C47670 * C5775 +
                      C93850 * C5870 + C47671 * C16395 + C47572 * C16487) *
                         C275 +
                     (C47669 * C1537 + C93855 * C1843 + C47670 * C5950 +
                      C93850 * C6350 + C47671 * C16565 + C47572 * C16959) *
                         C93706) *
                        C47568 +
                    ((C47669 * C1390 + C93855 * C1472 + C47670 * C5776 +
                      C93850 * C5871 + C47671 * C16396 + C47572 * C16488) *
                         C275 +
                     (C47669 * C1538 + C93855 * C1844 + C47670 * C5951 +
                      C93850 * C6351 + C47671 * C16566 + C47572 * C16960) *
                         C93706) *
                        C93590) *
                       C1384) *
                  C93625 * C93613) /
                     (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93855 +
            C5698 * C93850 + C5701 * C47572) *
               C47568 +
           (C48302 + C48303 + C48304) * C93590) *
              C93639 * C800 -
          ((C16320 * C47572 + C5700 * C93850 + C2626 * C93855) * C93590 +
           (C16321 * C47572 + C5701 * C93850 + C5698 * C93855) * C47568) *
              C93639 * C801 +
          ((C5701 * C93855 + C16321 * C93850 + C21050 * C47572) * C47568 +
           (C5700 * C93855 + C16320 * C93850 +
            (C713 * C15551 + C16315 + C16315 + C93706 * C16308) * C47572) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93855 +
            C5698 * C93850 + C5701 * C47572) *
               C47568 +
           (C48302 + C48303 + C48304) * C93590) *
              C93639 * C93625 * C97 -
          ((C48305 + C48306 + C48307) * C93590 +
           (C48304 + C48303 + C48302) * C47568) *
              C93639 * C93625 * C98 +
          ((C48307 + C48306 + C48305) * C47568 +
           (C745 * C93855 + C2624 * C93850 +
            (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C47572) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93855 +
            C5698 * C93850 + C5701 * C47572) *
               C47568 +
           (C48302 + C48303 + C48304) * C93590) *
              C1382 -
          ((C18996 * C47572 + C8420 * C93850 + C3340 * C93855) * C93590 +
           (C19993 * C47572 + C9417 * C93850 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93855) *
               C47568) *
              C1383 +
          (((C713 * C1389 + C1910 + C1910 + C93706 * C1901) * C93855 +
            (C713 * C5775 + C6431 + C6431 + C93706 * C6427) * C93850 +
            (C713 * C16395 + C17038 + C17038 + C93706 * C17035) * C47572) *
               C47568 +
           ((C713 * C1390 + C1911 + C1911 + C93706 * C1902) * C93855 +
            (C713 * C5776 + C6432 + C6432 + C93706 * C6428) * C93850 +
            (C713 * C16396 + C17039 + C17039 + C93706 * C17036) * C47572) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                      C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                         C93706 * C93855 +
                     (C48410 + C48411) * C93706 * C93850 + C48417 * C47572) *
                        C2695 -
                    ((C47575 * C8521 + C49171 + C49171 + C93590 * C8527 +
                      C47573 * C8520 + C49172 + C49172 + C47568 * C8526) *
                         C93706 * C47572 +
                     (C47575 * C3410 + C49173 + C49173 + C93590 * C3418 +
                      C47573 * C3409 + C49174 + C49174 + C47568 * C3417) *
                         C93706 * C93850 +
                     (C47575 * C1387 + C49175 + C49175 + C93590 * C1403 +
                      C47573 * C1388 + C49176 + C49176 + C47568 * C1404) *
                         C93706 * C93855) *
                        C2696) *
                       C93625 * C1981 +
                   (((C47573 * C1387 + C50887 + C50887 + C47568 * C1403 +
                      C47575 * C1386 + C50888 + C50888 + C93590 * C1402) *
                         C93706 * C93855 +
                     (C47573 * C3410 + C50889 + C50889 + C47568 * C3418 +
                      C47575 * C3411 + C50890 + C50890 + C93590 * C3419) *
                         C93706 * C93850 +
                     (C47573 * C8521 + C50891 + C50891 + C47568 * C8527 +
                      C47575 * C8522 + C50892 + C50892 + C93590 * C8528) *
                         C93706 * C47572) *
                        C2696 -
                    ((C49906 + C49905) * C93706 * C47572 +
                     (C49904 + C49903) * C93706 * C93850 +
                     (C47575 * C110 + C47588 + C47588 + C93590 * C122 +
                      C47573 * C109 + C47589 + C47589 + C47568 * C121) *
                         C93706 * C93855) *
                        C2695) *
                       C93625 * C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C47574 +
                     (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                      C93850 * C897 + C47671 * C816 + C47572 * C898) *
                         C47568 +
                     (C47697 + C47698 + C47699) * C47576 +
                     (C47700 + C47701 + C47702) * C93590) *
                        C93706 * C2695 -
                    ((C51003 + C51004 + C51005) * C93590 +
                     (C51006 + C51007 + C51008) * C47576 +
                     (C47671 * C8523 + C47572 * C8648 + C47670 * C3413 +
                      C93850 * C3495 + C47669 * C1396 + C93855 * C1478) *
                         C47568 +
                     (C47671 * C8520 + C47572 * C8645 + C47670 * C3409 +
                      C93850 * C3491 + C47669 * C1388 + C93855 * C1470) *
                         C47574) *
                        C93706 * C2696) *
                       C93625 * C1981 +
                   (((C51008 + C51007 + C51006) * C47574 +
                     (C51005 + C51004 + C51003) * C47568 +
                     (C47669 * C1386 + C93855 * C1468 + C47670 * C3411 +
                      C93850 * C3493 + C47671 * C8522 + C47572 * C8647) *
                         C47576 +
                     (C47669 * C1394 + C93855 * C1476 + C47670 * C3415 +
                      C93850 * C3497 + C47671 * C8525 + C47572 * C8650) *
                         C93590) *
                        C93706 * C2696 -
                    ((C47703 + C47704 + C47705) * C93590 +
                     (C47706 + C47707 + C47708) * C47576 +
                     (C47702 + C47701 + C47700) * C47568 +
                     (C47699 + C47698 + C47697) * C47574) *
                        C93706 * C2695) *
                       C93625 * C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C47574 +
             (C275 * C114 + C93706 * C282) * C47568 + C305 * C47576 +
             C306 * C93590) *
                C93855 +
            (C48566 + C48567 + C48568 + C48569) * C93850 + C48580 * C47572) *
               C2695 -
           ((C18364 * C93590 + C18365 * C47576 + C19338 * C47568 +
             C19339 * C47574) *
                C47572 +
            (C7771 * C93590 + C7772 * C47576 + C8764 * C47568 +
             C8765 * C47574) *
                C93850 +
            (C2875 * C93590 + C2876 * C47576 +
             (C275 * C1396 + C93706 * C1544) * C47568 +
             (C275 * C1388 + C93706 * C1536) * C47574) *
                C93855) *
               C2696) *
              C93625 * C1981 +
          (((C2876 * C47574 + C2875 * C47568 + C2874 * C47576 +
             C2873 * C93590) *
                C93855 +
            (C7772 * C47574 + C7771 * C47568 + C7770 * C47576 +
             C7769 * C93590) *
                C93850 +
            (C18365 * C47574 + C18364 * C47568 +
             (C275 * C8522 + C93706 * C8751) * C47576 +
             (C275 * C8525 + C93706 * C8754) * C93590) *
                C47572) *
               C2696 -
           ((C50128 + C50127 + C50126 + C50125) * C47572 +
            (C50124 + C50123 + C50122 + C50121) * C93850 +
            (C308 * C93590 + C307 * C47576 + C306 * C47568 + C305 * C47574) *
                C93855) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C47669 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93855 +
            (C48679 + C48680) * C47670 + (C48681 + C48682) * C93850 +
            C48691 * C47671 + C48692 * C47572) *
               C93706 * C2695 -
           ((C47576 * C8646 + C93590 * C8866 + C47574 * C8645 +
             C47568 * C8865) *
                C47572 +
            (C47576 * C8521 + C93590 * C8524 + C47574 * C8520 +
             C47568 * C8523) *
                C47671 +
            (C47576 * C3492 + C93590 * C3640 + C47574 * C3491 +
             C47568 * C3639) *
                C93850 +
            (C47576 * C3410 + C93590 * C3414 + C47574 * C3409 +
             C47568 * C3413) *
                C47670 +
            (C47576 * C1469 + C93590 * C1601 + C47574 * C1470 +
             C47568 * C1602) *
                C93855 +
            (C47576 * C1387 + C93590 * C1395 + C47574 * C1388 +
             C47568 * C1396) *
                C47669) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C47574 * C1387 + C47568 * C1395 + C47576 * C1386 +
             C93590 * C1394) *
                C47669 +
            (C47574 * C1469 + C47568 * C1601 + C47576 * C1468 +
             C93590 * C1600) *
                C93855 +
            (C47574 * C3410 + C47568 * C3414 + C47576 * C3411 +
             C93590 * C3415) *
                C47670 +
            (C47574 * C3492 + C47568 * C3640 + C47576 * C3493 +
             C93590 * C3641) *
                C93850 +
            (C47574 * C8521 + C47568 * C8524 + C47576 * C8522 +
             C93590 * C8525) *
                C47671 +
            (C47574 * C8646 + C47568 * C8866 + C47576 * C8647 +
             C93590 * C8867) *
                C47572) *
               C93706 * C2696 -
           ((C50250 + C50249) * C47572 + (C50248 + C50247) * C47671 +
            (C50246 + C50245) * C93850 + (C50244 + C50243) * C47670 +
            (C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                C93855 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C47669) *
               C93706 * C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                      C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                      C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                         C47568 +
                     (C47970 + C47971 + C47972) * C93590) *
                        C93706 * C2695 -
                    ((C51318 + C51319 + C51320) * C93590 +
                     (C47932 * C8520 + C49482 + C49482 + C47572 * C8984 +
                      C47931 * C3409 + C49483 + C49483 + C93850 * C3709 +
                      C47930 * C1388 + C49484 + C49484 + C93855 * C1660) *
                         C47568) *
                        C93706 * C2696) *
                       C93625 * C1981 +
                   (((C51320 + C51319 + C51318) * C47568 +
                     (C47930 * C1386 + C51309 + C51309 + C93855 * C1658 +
                      C47931 * C3411 + C51310 + C51310 + C93850 * C3711 +
                      C47932 * C8522 + C51311 + C51311 + C47572 * C8986) *
                         C93590) *
                        C93706 * C2696 -
                    ((C47973 + C47974 + C47975) * C93590 +
                     (C47972 + C47971 + C47970) * C47568) *
                        C93706 * C2695) *
                       C93625 * C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C47669 +
             (C275 * C189 + C93706 * C501) * C93855 + C5123 * C47670 +
             C5426 * C93850 + C5130 * C47671 + C5429 * C47572) *
                C47568 +
            (C48050 + C48051 + C48052 + C48053 + C48054 + C48055) * C93590) *
               C2695 -
           ((C51419 + C51420 + C51421 + C51422 + C51423 + C51424) * C93590 +
            (C19674 * C47572 + C19339 * C47671 + C9097 * C93850 +
             C8765 * C47670 + (C275 * C1470 + C93706 * C1726) * C93855 +
             (C275 * C1388 + C93706 * C1536) * C47669) *
                C47568) *
               C2696) *
              C93625 * C1981 +
          (((C51424 + C51423 + C51422 + C51421 + C51420 + C51419) * C47568 +
            (C2874 * C47669 + C3104 * C93855 + C7770 * C47670 + C8099 * C93850 +
             (C275 * C8522 + C93706 * C8751) * C47671 +
             (C275 * C8647 + C93706 * C9093) * C47572) *
                C93590) *
               C2696 -
           ((C48056 + C48057 + C48058 + C48059 + C48060 + C48061) * C93590 +
            (C48055 + C48054 + C48053 + C48052 + C48051 + C48050) * C47568) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C275 +
             (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                 C93706) *
                C93855 +
            ((C48679 + C48680) * C275 + (C48940 + C48941) * C93706) * C93850 +
            C48948 * C47572) *
               C2695 -
           (((C47576 * C8750 + C93590 * C9196 + C47574 * C8749 +
              C47568 * C9195) *
                 C93706 +
             (C47576 * C8521 + C93590 * C8524 + C47574 * C8520 +
              C47568 * C8523) *
                 C275) *
                C47572 +
            ((C47576 * C3566 + C93590 * C3854 + C47574 * C3565 +
              C47568 * C3853) *
                 C93706 +
             (C47576 * C3410 + C93590 * C3414 + C47574 * C3409 +
              C47568 * C3413) *
                 C275) *
                C93850 +
            ((C47576 * C1535 + C93590 * C1783 + C47574 * C1536 +
              C47568 * C1784) *
                 C93706 +
             (C47576 * C1387 + C93590 * C1395 + C47574 * C1388 +
              C47568 * C1396) *
                 C275) *
                C93855) *
               C2696) *
              C93625 * C1981 +
          ((((C47574 * C1387 + C47568 * C1395 + C47576 * C1386 +
              C93590 * C1394) *
                 C275 +
             (C47574 * C1535 + C47568 * C1783 + C47576 * C1534 +
              C93590 * C1782) *
                 C93706) *
                C93855 +
            ((C47574 * C3410 + C47568 * C3414 + C47576 * C3411 +
              C93590 * C3415) *
                 C275 +
             (C47574 * C3566 + C47568 * C3854 + C47576 * C3567 +
              C93590 * C3855) *
                 C93706) *
                C93850 +
            ((C47574 * C8521 + C47568 * C8524 + C47576 * C8522 +
              C93590 * C8525) *
                 C275 +
             (C47574 * C8750 + C47568 * C9196 + C47576 * C8751 +
              C93590 * C9197) *
                 C93706) *
                C47572) *
               C2696 -
           (((C50580 + C50579) * C93706 + (C50248 + C50247) * C275) * C47572 +
            ((C50578 + C50577) * C93706 + (C50244 + C50243) * C275) * C93850 +
            ((C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                 C93706 +
             (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                 C275) *
                C93855) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                       C93850 * C889 + C47671 * C808 + C47572 * C890) *
                          C275 +
                      (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                       C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                          C93706) *
                         C47568 +
                     ((C47697 + C47698 + C47699) * C275 +
                      (C48222 + C48223 + C48224) * C93706) *
                         C93590) *
                        C2695 -
                    (((C51627 + C51628 + C51629) * C93706 +
                      (C51006 + C51007 + C51008) * C275) *
                         C93590 +
                     ((C47671 * C8749 + C47572 * C9305 + C47670 * C3565 +
                       C93850 * C3923 + C47669 * C1536 + C93855 * C1842) *
                          C93706 +
                      (C47671 * C8520 + C47572 * C8645 + C47670 * C3409 +
                       C93850 * C3491 + C47669 * C1388 + C93855 * C1470) *
                          C275) *
                         C47568) *
                        C2696) *
                       C93625 * C1981 +
                   ((((C51008 + C51007 + C51006) * C275 +
                      (C51629 + C51628 + C51627) * C93706) *
                         C47568 +
                     ((C47669 * C1386 + C93855 * C1468 + C47670 * C3411 +
                       C93850 * C3493 + C47671 * C8522 + C47572 * C8647) *
                          C275 +
                      (C47669 * C1534 + C93855 * C1840 + C47670 * C3567 +
                       C93850 * C3925 + C47671 * C8751 + C47572 * C9307) *
                          C93706) *
                         C93590) *
                        C2696 -
                    (((C48225 + C48226 + C48227) * C93706 +
                      (C47706 + C47707 + C47708) * C275) *
                         C93590 +
                     ((C48224 + C48223 + C48222) * C93706 +
                      (C47699 + C47698 + C47697) * C275) *
                         C47568) *
                        C2695) *
                       C93625 * C1982)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C93855 +
             C5698 * C93850 + C5701 * C47572) *
                C47568 +
            (C48302 + C48303 + C48304) * C93590) *
               C2695 -
           ((C51728 + C51729 + C51730) * C93590 +
            (C19993 * C47572 + C9417 * C93850 +
             (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93855) *
                C47568) *
               C2696) *
              C93625 * C1981 +
          (((C51730 + C51729 + C51728) * C47568 +
            (C3339 * C93855 + C8419 * C93850 +
             (C713 * C8522 + C9414 + C9414 + C93706 * C9408) * C47572) *
                C93590) *
               C2696 -
           ((C48305 + C48306 + C48307) * C93590 +
            (C48304 + C48303 + C48302) * C47568) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexx[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                     C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                        C93706 * C93855 +
                    (C47573 * C807 + C47580 + C47580 + C47568 * C823 +
                     C47575 * C806 + C47581 + C47581 + C93590 * C822) *
                        C93706 * C93850 +
                    (C47573 * C808 + C47582 + C47582 + C47568 * C824 +
                     C47575 * C809 + C47583 + C47583 + C93590 * C825) *
                        C93706 * C47572) *
                       C93639 * C93625 * C97 -
                   ((C47575 * C810 + C47584 + C47584 + C93590 * C826 +
                     C47573 * C809 + C47585 + C47585 + C47568 * C825) *
                        C93706 * C47572 +
                    (C47575 * C805 + C47586 + C47586 + C93590 * C821 +
                     C47573 * C806 + C47587 + C47587 + C47568 * C822) *
                        C93706 * C93850 +
                    (C47575 * C110 + C47588 + C47588 + C93590 * C122 +
                     C47573 * C109 + C47589 + C47589 + C47568 * C121) *
                        C93706 * C93855) *
                       C93639 * C93625 * C98 +
                   ((C47573 * C110 + C47590 + C47590 + C47568 * C122 +
                     C47575 * C111 + C47591 + C47591 + C93590 * C123) *
                        C93706 * C93855 +
                    (C47573 * C805 + C47592 + C47592 + C47568 * C821 +
                     C47575 * C804 + C47593 + C47593 + C93590 * C820) *
                        C93706 * C93850 +
                    (C47573 * C810 + C47594 + C47594 + C47568 * C826 +
                     C47575 * C811 + C47595 + C47595 + C93590 * C827) *
                        C93706 * C47572) *
                       C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                     C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                        C93706 * C93855 +
                    (C48410 + C48411) * C93706 * C93850 + C48417 * C47572) *
                       C93639 * C800 -
                   ((C48414 + C48415) * C93706 * C47572 +
                    (C48413 + C48412) * C93706 * C93850 +
                    (C48411 + C48410) * C93706 * C93855) *
                       C93639 * C801 +
                   (C48417 * C93855 + (C48415 + C48414) * C93706 * C93850 +
                    (C47573 * C15550 + C48396 + C48396 + C47568 * C15554 +
                     C47575 * C15551 + C48397 + C48397 + C93590 * C15555) *
                        C93706 * C47572) *
                       C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q));
    d2eexy[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                     C93850 * C889 + C47671 * C808 + C47572 * C890) *
                        C47574 +
                    (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                     C93850 * C897 + C47671 * C816 + C47572 * C898) *
                        C47568 +
                    (C47697 + C47698 + C47699) * C47576 +
                    (C47700 + C47701 + C47702) * C93590) *
                       C93706 * C93639 * C93625 * C97 -
                   ((C47703 + C47704 + C47705) * C93590 +
                    (C47706 + C47707 + C47708) * C47576 +
                    (C47702 + C47701 + C47700) * C47568 +
                    (C47699 + C47698 + C47697) * C47574) *
                       C93706 * C93639 * C93625 * C98 +
                   ((C47708 + C47707 + C47706) * C47574 +
                    (C47705 + C47704 + C47703) * C47568 +
                    (C47669 * C111 + C93855 * C192 + C47670 * C804 +
                     C93850 * C886 + C47671 * C811 + C47572 * C893) *
                        C47576 +
                    (C47669 * C117 + C93855 * C198 + C47670 * C812 +
                     C93850 * C894 + C47671 * C819 + C47572 * C901) *
                        C93590) *
                       C93706 * C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                     C93850 * C889 + C47671 * C808 + C47572 * C890) *
                        C47574 +
                    (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                     C93850 * C897 + C47671 * C816 + C47572 * C898) *
                        C47568 +
                    (C47697 + C47698 + C47699) * C47576 +
                    (C47700 + C47701 + C47702) * C93590) *
                       C93706 * C93639 * C800 -
                   ((C47671 * C4901 + C47572 * C5020 + C47670 * C817 +
                     C93850 * C899 + C47669 * C814 + C93855 * C896) *
                        C93590 +
                    (C47671 * C4898 + C47572 * C5017 + C47670 * C809 +
                     C93850 * C891 + C47669 * C806 + C93855 * C888) *
                        C47576 +
                    (C47671 * C4900 + C47572 * C5019 + C47670 * C816 +
                     C93850 * C898 + C47669 * C815 + C93855 * C897) *
                        C47568 +
                    (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                     C93850 * C890 + C47669 * C807 + C93855 * C889) *
                        C47574) *
                       C93706 * C93639 * C801 +
                   ((C47669 * C808 + C93855 * C890 + C47670 * C4897 +
                     C93850 * C5016 + C47671 * C15550 + C47572 * C15666) *
                        C47574 +
                    (C47669 * C816 + C93855 * C898 + C47670 * C4900 +
                     C93850 * C5019 + C47671 * C15552 + C47572 * C15668) *
                        C47568 +
                    (C47669 * C809 + C93855 * C891 + C47670 * C4898 +
                     C93850 * C5017 + C47671 * C15551 + C47572 * C15667) *
                        C47576 +
                    (C47669 * C817 + C93855 * C899 + C47670 * C4901 +
                     C93850 * C5020 + C47671 * C15553 + C47572 * C15669) *
                        C93590) *
                       C93706 * C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q));
    d2eexz[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C47574 +
            (C275 * C114 + C93706 * C282) * C47568 + C305 * C47576 +
            C306 * C93590) *
               C93855 +
           (C5123 * C47574 + C5124 * C47568 + C2162 * C47576 + C2161 * C93590) *
               C93850 +
           (C5130 * C47574 + C5129 * C47568 + C5128 * C47576 + C5127 * C93590) *
               C47572) *
              C93639 * C93625 * C97 -
          ((C5125 * C93590 + C5126 * C47576 + C5127 * C47568 + C5128 * C47574) *
               C47572 +
           (C2159 * C93590 + C2160 * C47576 + C2161 * C47568 + C2162 * C47574) *
               C93850 +
           (C308 * C93590 + C307 * C47576 + C306 * C47568 + C305 * C47574) *
               C93855) *
              C93639 * C93625 * C98 +
          ((C307 * C47574 + C308 * C47568 + C309 * C47576 + C310 * C93590) *
               C93855 +
           (C2160 * C47574 + C2159 * C47568 + C2158 * C47576 + C2157 * C93590) *
               C93850 +
           (C5126 * C47574 + C5125 * C47568 +
            (C275 * C811 + C93706 * C959) * C47576 +
            (C275 * C819 + C93706 * C967) * C93590) *
               C47572) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C47574 +
            (C275 * C114 + C93706 * C282) * C47568 + C305 * C47576 +
            C306 * C93590) *
               C93855 +
           (C48566 + C48567 + C48568 + C48569) * C93850 + C48580 * C47572) *
              C93639 * C800 -
          ((C48574 + C48575 + C48576 + C48577) * C47572 +
           (C48573 + C48572 + C48571 + C48570) * C93850 +
           (C48569 + C48568 + C48567 + C48566) * C93855) *
              C93639 * C801 +
          (C48580 * C93855 + (C48577 + C48576 + C48575 + C48574) * C93850 +
           (C20679 * C47574 + C20678 * C47568 +
            (C275 * C15551 + C93706 * C15745) * C47576 +
            (C275 * C15553 + C93706 * C15747) * C93590) *
               C47572) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
               C47669 +
           (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
               C93855 +
           (C47574 * C807 + C47568 * C815 + C47576 * C806 + C93590 * C814) *
               C47670 +
           (C47574 * C889 + C47568 * C1021 + C47576 * C888 + C93590 * C1020) *
               C93850 +
           (C47574 * C808 + C47568 * C816 + C47576 * C809 + C93590 * C817) *
               C47671 +
           (C47574 * C890 + C47568 * C1022 + C47576 * C891 + C93590 * C1023) *
               C47572) *
              C93706 * C93639 * C93625 * C97 -
          ((C47576 * C892 + C93590 * C1024 + C47574 * C891 + C47568 * C1023) *
               C47572 +
           (C47576 * C810 + C93590 * C818 + C47574 * C809 + C47568 * C817) *
               C47671 +
           (C47576 * C887 + C93590 * C1019 + C47574 * C888 + C47568 * C1020) *
               C93850 +
           (C47576 * C805 + C93590 * C813 + C47574 * C806 + C47568 * C814) *
               C47670 +
           (C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
               C93855 +
           (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
               C47669) *
              C93706 * C93639 * C93625 * C98 +
          ((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
               C47669 +
           (C47574 * C191 + C47568 * C364 + C47576 * C192 + C93590 * C365) *
               C93855 +
           (C47574 * C805 + C47568 * C813 + C47576 * C804 + C93590 * C812) *
               C47670 +
           (C47574 * C887 + C47568 * C1019 + C47576 * C886 + C93590 * C1018) *
               C93850 +
           (C47574 * C810 + C47568 * C818 + C47576 * C811 + C93590 * C819) *
               C47671 +
           (C47574 * C892 + C47568 * C1024 + C47576 * C893 + C93590 * C1025) *
               C47572) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
               C47669 +
           (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
               C93855 +
           (C48679 + C48680) * C47670 + (C48681 + C48682) * C93850 +
           C48691 * C47671 + C48692 * C47572) *
              C93706 * C93639 * C800 -
          ((C48687 + C48688) * C47572 + (C48689 + C48690) * C47671 +
           (C48686 + C48685) * C93850 + (C48684 + C48683) * C47670 +
           (C48682 + C48681) * C93855 + (C48680 + C48679) * C47669) *
              C93706 * C93639 * C801 +
          (C48691 * C47669 + C48692 * C93855 + (C48690 + C48689) * C47670 +
           (C48688 + C48687) * C93850 +
           (C47574 * C15550 + C47568 * C15552 + C47576 * C15551 +
            C93590 * C15553) *
               C47671 +
           (C47574 * C15666 + C47568 * C15849 + C47576 * C15667 +
            C93590 * C15850) *
               C47572) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                     C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                     C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                        C47568 +
                    (C47970 + C47971 + C47972) * C93590) *
                       C93706 * C93639 * C93625 * C97 -
                   ((C47973 + C47974 + C47975) * C93590 +
                    (C47972 + C47971 + C47970) * C47568) *
                       C93706 * C93639 * C93625 * C98 +
                   ((C47975 + C47974 + C47973) * C47568 +
                    (C47930 * C111 + C47955 + C47955 + C93855 * C422 +
                     C47931 * C804 + C47956 + C47956 + C93850 * C1076 +
                     C47932 * C811 + C47957 + C47957 + C47572 * C1083) *
                        C93590) *
                       C93706 * C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                     C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                     C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                        C47568 +
                    (C47970 + C47971 + C47972) * C93590) *
                       C93706 * C93639 * C800 -
                   ((C47932 * C4898 + C48767 + C48767 + C47572 * C5326 +
                     C47931 * C809 + C48768 + C48768 + C93850 * C1081 +
                     C47930 * C806 + C48769 + C48769 + C93855 * C1078) *
                        C93590 +
                    (C47932 * C4897 + C48770 + C48770 + C47572 * C5325 +
                     C47931 * C808 + C48771 + C48771 + C93850 * C1080 +
                     C47930 * C807 + C48772 + C48772 + C93855 * C1079) *
                        C47568) *
                       C93706 * C93639 * C801 +
                   ((C47930 * C808 + C48773 + C48773 + C93855 * C1080 +
                     C47931 * C4897 + C48774 + C48774 + C93850 * C5325 +
                     C47932 * C15550 + C48775 + C48775 + C47572 * C15963) *
                        C47568 +
                    (C47930 * C809 + C48776 + C48776 + C93855 * C1081 +
                     C47931 * C4898 + C48777 + C48777 + C93850 * C5326 +
                     C47932 * C15551 + C48778 + C48778 + C47572 * C15964) *
                        C93590) *
                       C93706 * C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q));
    d2eeyz[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C47669 +
            (C275 * C189 + C93706 * C501) * C93855 + C5123 * C47670 +
            C5426 * C93850 + C5130 * C47671 + C5429 * C47572) *
               C47568 +
           (C48050 + C48051 + C48052 + C48053 + C48054 + C48055) * C93590) *
              C93639 * C93625 * C97 -
          ((C48056 + C48057 + C48058 + C48059 + C48060 + C48061) * C93590 +
           (C48055 + C48054 + C48053 + C48052 + C48051 + C48050) * C47568) *
              C93639 * C93625 * C98 +
          ((C48061 + C48060 + C48059 + C48058 + C48057 + C48056) * C47568 +
           (C309 * C47669 + C522 * C93855 + C2158 * C47670 + C2389 * C93850 +
            (C275 * C811 + C93706 * C959) * C47671 +
            (C275 * C893 + C93706 * C1149) * C47572) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C47669 +
            (C275 * C189 + C93706 * C501) * C93855 + C5123 * C47670 +
            C5426 * C93850 + C5130 * C47671 + C5429 * C47572) *
               C47568 +
           (C48050 + C48051 + C48052 + C48053 + C48054 + C48055) * C93590) *
              C93639 * C800 -
          ((C16058 * C47572 + C15767 * C47671 + C5428 * C93850 +
            C5128 * C47670 + C2391 * C93855 + C2162 * C47669) *
               C93590 +
           (C16059 * C47572 + C15769 * C47671 + C5429 * C93850 +
            C5130 * C47670 + C5426 * C93855 + C5123 * C47669) *
               C47568) *
              C93639 * C801 +
          ((C5130 * C47669 + C5429 * C93855 + C15769 * C47670 +
            C16059 * C93850 + C20679 * C47671 + C20869 * C47572) *
               C47568 +
           (C5128 * C47669 + C5428 * C93855 + C15767 * C47670 +
            C16058 * C93850 + (C275 * C15551 + C93706 * C15745) * C47671 +
            (C275 * C15667 + C93706 * C16052) * C47572) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C275 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93706) *
               C93855 +
           ((C47574 * C807 + C47568 * C815 + C47576 * C806 + C93590 * C814) *
                C275 +
            (C47574 * C955 + C47568 * C1203 + C47576 * C954 + C93590 * C1202) *
                C93706) *
               C93850 +
           ((C47574 * C808 + C47568 * C816 + C47576 * C809 + C93590 * C817) *
                C275 +
            (C47574 * C956 + C47568 * C1204 + C47576 * C957 + C93590 * C1205) *
                C93706) *
               C47572) *
              C93639 * C93625 * C97 -
          (((C47576 * C958 + C93590 * C1206 + C47574 * C957 + C47568 * C1205) *
                C93706 +
            (C47576 * C810 + C93590 * C818 + C47574 * C809 + C47568 * C817) *
                C275) *
               C47572 +
           ((C47576 * C953 + C93590 * C1201 + C47574 * C954 + C47568 * C1202) *
                C93706 +
            (C47576 * C805 + C93590 * C813 + C47574 * C806 + C47568 * C814) *
                C275) *
               C93850 +
           ((C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                C93706 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C275) *
               C93855) *
              C93639 * C93625 * C98 +
          (((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
                C275 +
            (C47574 * C278 + C47568 * C581 + C47576 * C279 + C93590 * C582) *
                C93706) *
               C93855 +
           ((C47574 * C805 + C47568 * C813 + C47576 * C804 + C93590 * C812) *
                C275 +
            (C47574 * C953 + C47568 * C1201 + C47576 * C952 + C93590 * C1200) *
                C93706) *
               C93850 +
           ((C47574 * C810 + C47568 * C818 + C47576 * C811 + C93590 * C819) *
                C275 +
            (C47574 * C958 + C47568 * C1206 + C47576 * C959 + C93590 * C1207) *
                C93706) *
               C47572) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C275 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93706) *
               C93855 +
           ((C48679 + C48680) * C275 + (C48940 + C48941) * C93706) * C93850 +
           C48948 * C47572) *
              C93639 * C800 -
          (((C48944 + C48945) * C93706 + (C48689 + C48690) * C275) * C47572 +
           ((C48943 + C48942) * C93706 + (C48684 + C48683) * C275) * C93850 +
           ((C48941 + C48940) * C93706 + (C48680 + C48679) * C275) * C93855) *
              C93639 * C801 +
          (C48948 * C93855 +
           ((C48690 + C48689) * C275 + (C48945 + C48944) * C93706) * C93850 +
           ((C47574 * C15550 + C47568 * C15552 + C47576 * C15551 +
             C93590 * C15553) *
                C275 +
            (C47574 * C15744 + C47568 * C16133 + C47576 * C15745 +
             C93590 * C16134) *
                C93706) *
               C47572) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C275 +
                     (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                      C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                         C93706) *
                        C47568 +
                    ((C47697 + C47698 + C47699) * C275 +
                     (C48222 + C48223 + C48224) * C93706) *
                        C93590) *
                       C93639 * C93625 * C97 -
                   (((C48225 + C48226 + C48227) * C93706 +
                     (C47706 + C47707 + C47708) * C275) *
                        C93590 +
                    ((C48224 + C48223 + C48222) * C93706 +
                     (C47699 + C47698 + C47697) * C275) *
                        C47568) *
                       C93639 * C93625 * C98 +
                   (((C47708 + C47707 + C47706) * C275 +
                     (C48227 + C48226 + C48225) * C93706) *
                        C47568 +
                    ((C47669 * C111 + C93855 * C192 + C47670 * C804 +
                      C93850 * C886 + C47671 * C811 + C47572 * C893) *
                         C275 +
                     (C47669 * C279 + C93855 * C638 + C47670 * C952 +
                      C93850 * C1258 + C47671 * C959 + C47572 * C1265) *
                         C93706) *
                        C93590) *
                       C93639 * C93625 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C275 +
                     (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                      C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                         C93706) *
                        C47568 +
                    ((C47697 + C47698 + C47699) * C275 +
                     (C48222 + C48223 + C48224) * C93706) *
                        C93590) *
                       C93639 * C800 -
                   (((C47671 * C5097 + C47572 * C5599 + C47670 * C957 +
                      C93850 * C1263 + C47669 * C954 + C93855 * C1260) *
                         C93706 +
                     (C47671 * C4898 + C47572 * C5017 + C47670 * C809 +
                      C93850 * C891 + C47669 * C806 + C93855 * C888) *
                         C275) *
                        C93590 +
                    ((C47671 * C5096 + C47572 * C5598 + C47670 * C956 +
                      C93850 * C1262 + C47669 * C955 + C93855 * C1261) *
                         C93706 +
                     (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                      C93850 * C890 + C47669 * C807 + C93855 * C889) *
                         C275) *
                        C47568) *
                       C93639 * C801 +
                   (((C47669 * C808 + C93855 * C890 + C47670 * C4897 +
                      C93850 * C5016 + C47671 * C15550 + C47572 * C15666) *
                         C275 +
                     (C47669 * C956 + C93855 * C1262 + C47670 * C5096 +
                      C93850 * C5598 + C47671 * C15744 + C47572 * C16231) *
                         C93706) *
                        C47568 +
                    ((C47669 * C809 + C93855 * C891 + C47670 * C4898 +
                      C93850 * C5017 + C47671 * C15551 + C47572 * C15667) *
                         C275 +
                     (C47669 * C957 + C93855 * C1263 + C47670 * C5097 +
                      C93850 * C5599 + C47671 * C15745 + C47572 * C16232) *
                         C93706) *
                        C93590) *
                       C93639 * C802) *
                  C93613) /
                     (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93855 +
            C5698 * C93850 + C5701 * C47572) *
               C47568 +
           (C48302 + C48303 + C48304) * C93590) *
              C93639 * C93625 * C97 -
          ((C48305 + C48306 + C48307) * C93590 +
           (C48304 + C48303 + C48302) * C47568) *
              C93639 * C93625 * C98 +
          ((C48307 + C48306 + C48305) * C47568 +
           (C745 * C93855 + C2624 * C93850 +
            (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C47572) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93855 +
            C5698 * C93850 + C5701 * C47572) *
               C47568 +
           (C48302 + C48303 + C48304) * C93590) *
              C93639 * C800 -
          ((C16320 * C47572 + C5700 * C93850 + C2626 * C93855) * C93590 +
           (C16321 * C47572 + C5701 * C93850 + C5698 * C93855) * C47568) *
              C93639 * C801 +
          ((C5701 * C93855 + C16321 * C93850 + C21050 * C47572) * C47568 +
           (C5700 * C93855 + C16320 * C93850 +
            (C713 * C15551 + C16315 + C16315 + C93706 * C16308) * C47572) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
              C47579 + C47579 + C93590 * C121) *
                 C93829 +
             (C54583 + C54584) * C93718) *
                C42379 +
            ((C48410 + C48411) * C93829 + (C51850 + C51849) * C93718) *
                C93694) *
               C93639 * C1979 -
           (((C51847 + C51848) * C93718 + (C48413 + C48412) * C93829) * C93694 +
            ((C51849 + C51850) * C93718 + (C48411 + C48410) * C93829) *
                C42379) *
               C93639 * C1980) *
              C1981 +
          ((((C49903 + C49904) * C93829 + (C55655 + C55656) * C93718) * C42379 +
            ((C49905 + C49906) * C93829 +
             (C47573 * C8521 + C50891 + C50891 + C47568 * C8527 +
              C47575 * C8522 + C50892 + C50892 + C93590 * C8528) *
                 C93718) *
                C93694) *
               C93639 * C1980 -
           (((C55656 + C55655) * C93718 + (C49904 + C49903) * C93829) * C93694 +
            ((C47575 * C1386 + C50888 + C50888 + C93590 * C1402 +
              C47573 * C1387 + C50887 + C50887 + C47568 * C1403) *
                 C93718 +
             (C47575 * C110 + C47588 + C47588 + C93590 * C122 + C47573 * C109 +
              C47589 + C47589 + C47568 * C121) *
                 C93829) *
                C42379) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C47574 +
             (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                 C47568 +
             (C42506 + C42507) * C47576 + (C42508 + C42509) * C93590) *
                C93829 +
            ((C54711 + C54712) * C47574 + (C54713 + C54714) * C47568 +
             (C45823 + C45822) * C47576 + (C45821 + C45820) * C93590) *
                C93718) *
               C93639 * C1979 -
           (((C55795 + C55796) * C93590 + (C55797 + C55798) * C47576 +
             (C42480 * C8523 + C93694 * C8648 + C42479 * C3413 +
              C42379 * C3495) *
                 C47568 +
             (C42480 * C8520 + C93694 * C8645 + C42479 * C3409 +
              C42379 * C3491) *
                 C47574) *
                C93718 +
            ((C44829 + C44830) * C93590 + (C44831 + C44832) * C47576 +
             (C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                 C47568 +
             (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                 C47574) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          ((((C44832 + C44831) * C47574 + (C44830 + C44829) * C47568 +
             (C44828 + C44827) * C47576 + (C44826 + C44825) * C93590) *
                C93829 +
            ((C55798 + C55797) * C47574 + (C55796 + C55795) * C47568 +
             (C42479 * C3411 + C42379 * C3493 + C42480 * C8522 +
              C93694 * C8647) *
                 C47576 +
             (C42479 * C3415 + C42379 * C3497 + C42480 * C8525 +
              C93694 * C8650) *
                 C93590) *
                C93718) *
               C93639 * C1980 -
           (((C45816 + C45817) * C93590 + (C45818 + C45819) * C47576 +
             (C45820 + C45821) * C47568 + (C45822 + C45823) * C47574) *
                C93718 +
            ((C42513 + C42512) * C93590 + (C42511 + C42510) * C47576 +
             (C42509 + C42508) * C47568 + (C42507 + C42506) * C47574) *
                C93829) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C47574 +
             (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                 C47568 +
             (C9671 + C9672) * C47576 + (C9673 + C9674) * C93590) *
                C42379 +
            ((C24395 + C24396) * C47574 + (C24397 + C24398) * C47568 +
             C55929 * C47576 + C55930 * C93590) *
                C93694) *
               C93639 * C1979 -
           (((C26103 + C26102) * C93590 + (C26101 + C26100) * C47576 +
             (C24402 + C24401) * C47568 + (C24400 + C24399) * C47574) *
                C93694 +
            (C55931 * C93590 + C55932 * C47576 + (C24398 + C24397) * C47568 +
             (C24396 + C24395) * C47574) *
                C42379) *
               C93639 * C1980) *
              C1981 +
          (((C55929 * C47574 + C55930 * C47568 + (C12097 + C12096) * C47576 +
             (C12095 + C12094) * C93590) *
                C42379 +
            ((C26100 + C26101) * C47574 + (C26102 + C26103) * C47568 +
             (C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
                 C47576 +
             (C9644 * C818 + C93829 * C966 + C9645 * C8525 + C93718 * C8754) *
                 C93590) *
                C93694) *
               C93639 * C1980 -
           (((C12094 + C12095) * C93590 + (C12096 + C12097) * C47576 +
             C55931 * C47568 + C55932 * C47574) *
                C93694 +
            ((C9678 + C9677) * C93590 + (C9676 + C9675) * C47576 +
             (C9674 + C9673) * C47568 + (C9672 + C9671) * C47574) *
                C42379) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C42479 +
             (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                 C42379 +
             (C48679 + C48680) * C42480 + (C48681 + C48682) * C93694) *
                C93829 +
            ((C54943 + C54944) * C42479 + (C54945 + C54946) * C42379 +
             (C52176 + C52175) * C42480 + (C52174 + C52173) * C93694) *
                C93718) *
               C93639 * C1979 -
           (((C52169 + C52170) * C93694 + (C52171 + C52172) * C42480 +
             (C52173 + C52174) * C42379 + (C52175 + C52176) * C42479) *
                C93718 +
            ((C48686 + C48685) * C93694 + (C48684 + C48683) * C42480 +
             (C48682 + C48681) * C42379 + (C48680 + C48679) * C42479) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          ((((C50243 + C50244) * C42479 + (C50245 + C50246) * C42379 +
             (C50247 + C50248) * C42480 + (C50249 + C50250) * C93694) *
                C93829 +
            ((C56071 + C56072) * C42479 + (C56073 + C56074) * C42379 +
             (C47574 * C8521 + C47568 * C8524 + C47576 * C8522 +
              C93590 * C8525) *
                 C42480 +
             (C47574 * C8646 + C47568 * C8866 + C47576 * C8647 +
              C93590 * C8867) *
                 C93694) *
                C93718) *
               C93639 * C1980 -
           (((C56074 + C56073) * C93694 + (C56072 + C56071) * C42480 +
             (C47576 * C1468 + C93590 * C1600 + C47574 * C1469 +
              C47568 * C1601) *
                 C42379 +
             (C47576 * C1386 + C93590 * C1394 + C47574 * C1387 +
              C47568 * C1395) *
                 C42479) *
                C93718 +
            ((C50246 + C50245) * C93694 + (C50244 + C50243) * C42480 +
             (C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                 C42379 +
             (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                 C42479) *
                C93829) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
              C42745 + C42745 + C93694 * C1079) *
                 C47568 +
             (C42778 + C42779) * C93590) *
                C93829 +
            ((C55081 + C55082) * C47568 + (C46139 + C46138) * C93590) *
                C93718) *
               C93639 * C1979 -
           (((C56213 + C56214) * C93590 +
             (C42742 * C8520 + C47089 + C47089 + C93694 * C8984 +
              C42741 * C3409 + C47088 + C47088 + C42379 * C3709) *
                 C47568) *
                C93718 +
            ((C45171 + C45172) * C93590 +
             (C42742 * C808 + C43583 + C43583 + C93694 * C1080 + C42741 * C807 +
              C43584 + C43584 + C42379 * C1079) *
                 C47568) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          ((((C45172 + C45171) * C47568 + (C45170 + C45169) * C93590) * C93829 +
            ((C56214 + C56213) * C47568 +
             (C42741 * C3411 + C47092 + C47092 + C42379 * C3711 +
              C42742 * C8522 + C47093 + C47093 + C93694 * C8986) *
                 C93590) *
                C93718) *
               C93639 * C1980 -
           (((C46136 + C46137) * C93590 + (C46138 + C46139) * C47568) * C93718 +
            ((C42781 + C42780) * C93590 + (C42779 + C42778) * C47568) *
                C93829) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C42479 +
             (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                 C42379 +
             (C24395 + C24396) * C42480 + (C24649 + C24650) * C93694) *
                C47568 +
            ((C9671 + C9672) * C42479 + (C9920 + C9921) * C42379 +
             C55929 * C42480 + C56345 * C93694) *
                C93590) *
               C93639 * C1979 -
           (((C26415 + C26414) * C93694 + (C26101 + C26100) * C42480 +
             C56346 * C42379 + C55932 * C42479) *
                C93590 +
            ((C24652 + C24651) * C93694 + (C24400 + C24399) * C42480 +
             (C24650 + C24649) * C42379 + (C24396 + C24395) * C42479) *
                C47568) *
               C93639 * C1980) *
              C1981 +
          (((C55929 * C42479 + C56345 * C42379 + (C26100 + C26101) * C42480 +
             (C26414 + C26415) * C93694) *
                C47568 +
            ((C12097 + C12096) * C42479 + (C12415 + C12414) * C42379 +
             (C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
                 C42480 +
             (C9644 * C892 + C93829 * C1148 + C9645 * C8647 + C93718 * C9093) *
                 C93694) *
                C93590) *
               C93639 * C1980 -
           (((C12414 + C12415) * C93694 + (C12096 + C12097) * C42480 +
             (C9923 + C9922) * C42379 + (C9676 + C9675) * C42479) *
                C93590 +
            (C56346 * C93694 + C55932 * C42480 + (C9921 + C9920) * C42379 +
             (C9672 + C9671) * C42479) *
                C47568) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C9644 +
             (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                 C93829 +
             (C54943 + C54944) * C9645 + (C55295 + C55296) * C93718) *
                C42379 +
            ((C48679 + C48680) * C9644 + (C48940 + C48941) * C93829 +
             (C52176 + C52175) * C9645 + (C52488 + C52487) * C93718) *
                C93694) *
               C93639 * C1979 -
           (((C52485 + C52486) * C93718 + (C52171 + C52172) * C9645 +
             (C48943 + C48942) * C93829 + (C48684 + C48683) * C9644) *
                C93694 +
            ((C52487 + C52488) * C93718 + (C52175 + C52176) * C9645 +
             (C48941 + C48940) * C93829 + (C48680 + C48679) * C9644) *
                C42379) *
               C93639 * C1980) *
              C1981 +
          ((((C50243 + C50244) * C9644 + (C50577 + C50578) * C93829 +
             (C56071 + C56072) * C9645 + (C56481 + C56482) * C93718) *
                C42379 +
            ((C50247 + C50248) * C9644 + (C50579 + C50580) * C93829 +
             (C47574 * C8521 + C47568 * C8524 + C47576 * C8522 +
              C93590 * C8525) *
                 C9645 +
             (C47574 * C8750 + C47568 * C9196 + C47576 * C8751 +
              C93590 * C9197) *
                 C93718) *
                C93694) *
               C93639 * C1980 -
           (((C56482 + C56481) * C93718 + (C56072 + C56071) * C9645 +
             (C50578 + C50577) * C93829 + (C50244 + C50243) * C9644) *
                C93694 +
            ((C47576 * C1534 + C93590 * C1782 + C47574 * C1535 +
              C47568 * C1783) *
                 C93718 +
             (C47576 * C1386 + C93590 * C1394 + C47574 * C1387 +
              C47568 * C1395) *
                 C9645 +
             (C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                 C93829 +
             (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                 C9644) *
                C42379) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C9644 +
             (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                 C93829 +
             (C54711 + C54712) * C9645 + (C55411 + C55412) * C93718) *
                C47568 +
            ((C42506 + C42507) * C9644 + (C43035 + C43036) * C93829 +
             (C45823 + C45822) * C9645 + (C46453 + C46452) * C93718) *
                C93590) *
               C93639 * C1979 -
           (((C56617 + C56618) * C93718 + (C55797 + C55798) * C9645 +
             (C45494 + C45495) * C93829 + (C44831 + C44832) * C9644) *
                C93590 +
            ((C42480 * C8749 + C93694 * C9305 + C42479 * C3565 +
              C42379 * C3923) *
                 C93718 +
             (C42480 * C8520 + C93694 * C8645 + C42479 * C3409 +
              C42379 * C3491) *
                 C9645 +
             (C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                 C93829 +
             (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                 C9644) *
                C47568) *
               C93639 * C1980) *
              C1981 +
          ((((C44832 + C44831) * C9644 + (C45495 + C45494) * C93829 +
             (C55798 + C55797) * C9645 + (C56618 + C56617) * C93718) *
                C47568 +
            ((C44828 + C44827) * C9644 + (C45493 + C45492) * C93829 +
             (C42479 * C3411 + C42379 * C3493 + C42480 * C8522 +
              C93694 * C8647) *
                 C9645 +
             (C42479 * C3567 + C42379 * C3925 + C42480 * C8751 +
              C93694 * C9307) *
                 C93718) *
                C93590) *
               C93639 * C1980 -
           (((C46450 + C46451) * C93718 + (C45818 + C45819) * C9645 +
             (C43038 + C43037) * C93829 + (C42511 + C42510) * C9644) *
                C93590 +
            ((C46452 + C46453) * C93718 + (C45822 + C45823) * C9645 +
             (C43036 + C43035) * C93829 + (C42507 + C42506) * C9644) *
                C47568) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10165 * C108 + C10168 + C10168 + C93829 * C714 + C10166 * C1388 +
              C10169 + C10169 + C93718 * C1900) *
                 C42379 +
             (C24921 + C24922) * C93694) *
                C47568 +
            ((C10202 + C10203) * C42379 + C56749 * C93694) * C93590) *
               C93639 * C1979 -
           (((C26735 + C26734) * C93694 + C56750 * C42379) * C93590 +
            ((C24924 + C24923) * C93694 + (C24922 + C24921) * C42379) *
                C47568) *
               C93639 * C1980) *
              C1981 +
          (((C56749 * C42379 + (C26734 + C26735) * C93694) * C47568 +
            ((C12745 + C12744) * C42379 +
             (C10165 * C810 + C10889 + C10889 + C93829 * C1322 +
              C10166 * C8522 + C10890 + C10890 + C93718 * C9408) *
                 C93694) *
                C93590) *
               C93639 * C1980 -
           (((C12744 + C12745) * C93694 + (C10205 + C10204) * C42379) * C93590 +
            (C56750 * C93694 + (C10203 + C10202) * C42379) * C47568) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
              C47579 + C47579 + C93590 * C121) *
                 C93829 +
             (C54583 + C54584) * C93718) *
                C42379 +
            ((C48410 + C48411) * C93829 + C58119 * C93718) * C93694) *
               C2695 -
           (((C54585 + C54586) * C93718 + C58120 * C93829) * C93694 +
            ((C54587 + C54588) * C93718 + (C54584 + C54583) * C93829) *
                C42379) *
               C2696) *
              C1979 +
          (((C58119 * C93829 + (C54586 + C54585) * C93718) * C42379 +
            ((C51848 + C51847) * C93829 +
             (C47573 * C16395 + C49181 + C49181 + C47568 * C16399 +
              C47575 * C16396 + C49182 + C49182 + C93590 * C16400) *
                 C93718) *
                C93694) *
               C2696 -
           (((C51847 + C51848) * C93718 + (C48413 + C48412) * C93829) * C93694 +
            (C58120 * C93718 + (C48411 + C48410) * C93829) * C42379) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C47574 +
             (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                 C47568 +
             (C42506 + C42507) * C47576 + (C42508 + C42509) * C93590) *
                C93829 +
            ((C54711 + C54712) * C47574 + (C54713 + C54714) * C47568 +
             C57025 * C47576 + C57026 * C93590) *
                C93718) *
               C2695 -
           (((C54715 + C54716) * C93590 + (C54717 + C54718) * C47576 +
             (C54719 + C54720) * C47568 + (C54721 + C54722) * C47574) *
                C93718 +
            (C57027 * C93590 + C57028 * C47576 + (C54714 + C54713) * C47568 +
             (C54712 + C54711) * C47574) *
                C93829) *
               C2696) *
              C1979 +
          ((((C58259 + C58260) * C47574 + (C58261 + C58262) * C47568 +
             (C55798 + C55797) * C47576 + (C55796 + C55795) * C93590) *
                C93829 +
            ((C42479 * C5775 + C42379 * C5870 + C42480 * C16395 +
              C93694 * C16487) *
                 C47574 +
             (C42479 * C5778 + C42379 * C5873 + C42480 * C16397 +
              C93694 * C16489) *
                 C47568 +
             (C42479 * C5776 + C42379 * C5871 + C42480 * C16396 +
              C93694 * C16488) *
                 C47576 +
             (C42479 * C5779 + C42379 * C5874 + C42480 * C16398 +
              C93694 * C16490) *
                 C93590) *
                C93718) *
               C2696 -
           (((C55795 + C55796) * C93590 + (C55797 + C55798) * C47576 +
             (C58262 + C58261) * C47568 + (C58260 + C58259) * C47574) *
                C93718 +
            ((C44829 + C44830) * C93590 + (C44831 + C44832) * C47576 +
             (C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                 C47568 +
             (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                 C47574) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C47574 +
             (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                 C47568 +
             (C9671 + C9672) * C47576 + (C9673 + C9674) * C93590) *
                C42379 +
            ((C24395 + C24396) * C47574 + (C24397 + C24398) * C47568 +
             C55929 * C47576 + C55930 * C93590) *
                C93694) *
               C2695 -
           (((C57167 + C57168) * C93590 + (C57169 + C57170) * C47576 +
             (C27979 + C27980) * C47568 + (C27981 + C27982) * C47574) *
                C93694 +
            ((C13086 + C13087) * C93590 + (C13088 + C13089) * C47576 +
             (C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                 C47568 +
             (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                 C47574) *
                C42379) *
               C2696) *
              C1979 +
          ((((C27982 + C27981) * C47574 + (C27980 + C27979) * C47568 +
             (C57170 + C57169) * C47576 + (C57168 + C57167) * C93590) *
                C42379 +
            ((C27978 + C27977) * C47574 + (C27976 + C27975) * C47568 +
             (C9644 * C8521 + C93829 * C8750 + C9645 * C16396 +
              C93718 * C16566) *
                 C47576 +
             (C9644 * C8524 + C93829 * C8753 + C9645 * C16398 +
              C93718 * C16568) *
                 C93590) *
                C93694) *
               C2696 -
           (((C26103 + C26102) * C93590 + (C26101 + C26100) * C47576 +
             (C24402 + C24401) * C47568 + (C24400 + C24399) * C47574) *
                C93694 +
            (C55931 * C93590 + C55932 * C47576 + (C24398 + C24397) * C47568 +
             (C24396 + C24395) * C47574) *
                C42379) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C42479 +
             (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                 C42379 +
             (C48679 + C48680) * C42480 + (C48681 + C48682) * C93694) *
                C93829 +
            ((C54943 + C54944) * C42479 + (C54945 + C54946) * C42379 +
             C58523 * C42480 + C58524 * C93694) *
                C93718) *
               C2695 -
           (((C54947 + C54948) * C93694 + (C54949 + C54950) * C42480 +
             (C54951 + C54952) * C42379 + (C54953 + C54954) * C42479) *
                C93718 +
            (C58525 * C93694 + C58526 * C42480 + (C54946 + C54945) * C42379 +
             (C54944 + C54943) * C42479) *
                C93829) *
               C2696) *
              C1979 +
          (((C58523 * C42479 + C58524 * C42379 + (C52172 + C52171) * C42480 +
             (C52170 + C52169) * C93694) *
                C93829 +
            ((C54950 + C54949) * C42479 + (C54948 + C54947) * C42379 +
             (C47574 * C16395 + C47568 * C16397 + C47576 * C16396 +
              C93590 * C16398) *
                 C42480 +
             (C47574 * C16487 + C47568 * C16643 + C47576 * C16488 +
              C93590 * C16644) *
                 C93694) *
                C93718) *
               C2696 -
           (((C52169 + C52170) * C93694 + (C52171 + C52172) * C42480 +
             C58525 * C42379 + C58526 * C42479) *
                C93718 +
            ((C48686 + C48685) * C93694 + (C48684 + C48683) * C42480 +
             (C48682 + C48681) * C42379 + (C48680 + C48679) * C42479) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
              C42745 + C42745 + C93694 * C1079) *
                 C47568 +
             (C42778 + C42779) * C93590) *
                C93829 +
            ((C55081 + C55082) * C47568 + C57443 * C93590) * C93718) *
               C2695 -
           (((C55083 + C55084) * C93590 + (C55085 + C55086) * C47568) * C93718 +
            (C57444 * C93590 + (C55082 + C55081) * C47568) * C93829) *
               C2696) *
              C1979 +
          ((((C58669 + C58670) * C47568 + (C56214 + C56213) * C93590) * C93829 +
            ((C42741 * C5775 + C58661 + C58661 + C42379 * C6107 +
              C42742 * C16395 + C58662 + C58662 + C93694 * C16719) *
                 C47568 +
             (C42741 * C5776 + C58663 + C58663 + C42379 * C6108 +
              C42742 * C16396 + C58664 + C58664 + C93694 * C16720) *
                 C93590) *
                C93718) *
               C2696 -
           (((C56213 + C56214) * C93590 + (C58670 + C58669) * C47568) * C93718 +
            ((C45171 + C45172) * C93590 +
             (C42742 * C808 + C43583 + C43583 + C93694 * C1080 + C42741 * C807 +
              C43584 + C43584 + C42379 * C1079) *
                 C47568) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C42479 +
             (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                 C42379 +
             (C24395 + C24396) * C42480 + (C24649 + C24650) * C93694) *
                C47568 +
            ((C9671 + C9672) * C42479 + (C9920 + C9921) * C42379 +
             C55929 * C42480 + C56345 * C93694) *
                C93590) *
               C2695 -
           (((C57579 + C57580) * C93694 + (C57169 + C57170) * C42480 +
             (C13415 + C13416) * C42379 + (C13088 + C13089) * C42479) *
                C93590 +
            ((C28311 + C28312) * C93694 + (C27981 + C27982) * C42480 +
             (C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                 C42379 +
             (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                 C42479) *
                C47568) *
               C2696) *
              C1979 +
          ((((C27982 + C27981) * C42479 + (C28312 + C28311) * C42379 +
             (C27978 + C27977) * C42480 + (C28310 + C28309) * C93694) *
                C47568 +
            ((C57170 + C57169) * C42479 + (C57580 + C57579) * C42379 +
             (C9644 * C8521 + C93829 * C8750 + C9645 * C16396 +
              C93718 * C16566) *
                 C42480 +
             (C9644 * C8646 + C93829 * C9092 + C9645 * C16488 +
              C93718 * C16808) *
                 C93694) *
                C93590) *
               C2696 -
           (((C26415 + C26414) * C93694 + (C26101 + C26100) * C42480 +
             C56346 * C42379 + C55932 * C42479) *
                C93590 +
            ((C24652 + C24651) * C93694 + (C24400 + C24399) * C42480 +
             (C24650 + C24649) * C42379 + (C24396 + C24395) * C42479) *
                C47568) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C9644 +
             (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                 C93829 +
             (C54943 + C54944) * C9645 + (C55295 + C55296) * C93718) *
                C42379 +
            ((C48679 + C48680) * C9644 + (C48940 + C48941) * C93829 +
             C58523 * C9645 + C58931 * C93718) *
                C93694) *
               C2695 -
           (((C55297 + C55298) * C93718 + (C54949 + C54950) * C9645 +
             C58932 * C93829 + C58526 * C9644) *
                C93694 +
            ((C55299 + C55300) * C93718 + (C54953 + C54954) * C9645 +
             (C55296 + C55295) * C93829 + (C54944 + C54943) * C9644) *
                C42379) *
               C2696) *
              C1979 +
          (((C58523 * C9644 + C58931 * C93829 + (C54950 + C54949) * C9645 +
             (C55298 + C55297) * C93718) *
                C42379 +
            ((C52172 + C52171) * C9644 + (C52486 + C52485) * C93829 +
             (C47574 * C16395 + C47568 * C16397 + C47576 * C16396 +
              C93590 * C16398) *
                 C9645 +
             (C47574 * C16565 + C47568 * C16883 + C47576 * C16566 +
              C93590 * C16884) *
                 C93718) *
                C93694) *
               C2696 -
           (((C52485 + C52486) * C93718 + (C52171 + C52172) * C9645 +
             (C48943 + C48942) * C93829 + (C48684 + C48683) * C9644) *
                C93694 +
            (C58932 * C93718 + C58526 * C9645 + (C48941 + C48940) * C93829 +
             (C48680 + C48679) * C9644) *
                C42379) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C9644 +
             (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                 C93829 +
             (C54711 + C54712) * C9645 + (C55411 + C55412) * C93718) *
                C47568 +
            ((C42506 + C42507) * C9644 + (C43035 + C43036) * C93829 +
             C57025 * C9645 + C57847 * C93718) *
                C93590) *
               C2695 -
           (((C55413 + C55414) * C93718 + (C54717 + C54718) * C9645 +
             C57848 * C93829 + C57028 * C9644) *
                C93590 +
            ((C55415 + C55416) * C93718 + (C54721 + C54722) * C9645 +
             (C55412 + C55411) * C93829 + (C54712 + C54711) * C9644) *
                C47568) *
               C2696) *
              C1979 +
          ((((C58259 + C58260) * C9644 + (C59067 + C59068) * C93829 +
             (C42479 * C5775 + C42379 * C5870 + C42480 * C16395 +
              C93694 * C16487) *
                 C9645 +
             (C42479 * C5950 + C42379 * C6350 + C42480 * C16565 +
              C93694 * C16959) *
                 C93718) *
                C47568 +
            ((C55798 + C55797) * C9644 + (C56618 + C56617) * C93829 +
             (C42479 * C5776 + C42379 * C5871 + C42480 * C16396 +
              C93694 * C16488) *
                 C9645 +
             (C42479 * C5951 + C42379 * C6351 + C42480 * C16566 +
              C93694 * C16960) *
                 C93718) *
                C93590) *
               C2696 -
           (((C56617 + C56618) * C93718 + (C55797 + C55798) * C9645 +
             (C45494 + C45495) * C93829 + (C44831 + C44832) * C9644) *
                C93590 +
            ((C59068 + C59067) * C93718 + (C58260 + C58259) * C9645 +
             (C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                 C93829 +
             (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                 C9644) *
                C47568) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10165 * C108 + C10168 + C10168 + C93829 * C714 + C10166 * C1388 +
              C10169 + C10169 + C93718 * C1900) *
                 C42379 +
             (C24921 + C24922) * C93694) *
                C47568 +
            ((C10202 + C10203) * C42379 + C56749 * C93694) * C93590) *
               C2695 -
           (((C57987 + C57988) * C93694 + (C13748 + C13749) * C42379) * C93590 +
            ((C28644 + C28645) * C93694 +
             (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
              C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                 C42379) *
                C47568) *
               C2696) *
              C1979 +
          ((((C28645 + C28644) * C42379 + (C28643 + C28642) * C93694) * C47568 +
            ((C57988 + C57987) * C42379 +
             (C10165 * C8521 + C27641 + C27641 + C93829 * C9407 +
              C10166 * C16396 + C27642 + C27642 + C93718 * C17036) *
                 C93694) *
                C93590) *
               C2696 -
           (((C26735 + C26734) * C93694 + C56750 * C42379) * C93590 +
            ((C24924 + C24923) * C93694 + (C24922 + C24921) * C42379) *
                C47568) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
             C47579 + C47579 + C93590 * C121) *
                C93829 +
            (C47573 * C1388 + C49176 + C49176 + C47568 * C1404 +
             C47575 * C1387 + C49175 + C49175 + C93590 * C1403) *
                C93718) *
               C42379 +
           ((C48410 + C48411) * C93829 + (C51850 + C51849) * C93718) * C93694) *
              C93639 * C800 -
          (((C51847 + C51848) * C93718 + (C48413 + C48412) * C93829) * C93694 +
           ((C51849 + C51850) * C93718 + (C48411 + C48410) * C93829) * C42379) *
              C93639 * C801 +
          ((C48416 * C93829 + (C51848 + C51847) * C93718) * C42379 +
           ((C48415 + C48414) * C93829 +
            (C47573 * C19095 + C51837 + C51837 + C47568 * C19099 +
             C47575 * C19096 + C51838 + C51838 + C93590 * C19100) *
                C93718) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
             C47579 + C47579 + C93590 * C121) *
                C93829 +
            (C47573 * C1388 + C49176 + C49176 + C47568 * C1404 +
             C47575 * C1387 + C49175 + C49175 + C93590 * C1403) *
                C93718) *
               C42379 +
           ((C48410 + C48411) * C93829 + (C51850 + C51849) * C93718) * C93694) *
              C93639 * C93625 * C97 -
          (((C47575 * C3411 + C50890 + C50890 + C93590 * C3419 +
             C47573 * C3410 + C50889 + C50889 + C47568 * C3418) *
                C93718 +
            (C49904 + C49903) * C93829) *
               C93694 +
           ((C47575 * C1386 + C50888 + C50888 + C93590 * C1402 +
             C47573 * C1387 + C50887 + C50887 + C47568 * C1403) *
                C93718 +
            (C47575 * C110 + C47588 + C47588 + C93590 * C122 + C47573 * C109 +
             C47589 + C47589 + C47568 * C121) *
                C93829) *
               C42379) *
              C93639 * C93625 * C98 +
          (((C47573 * C110 + C47590 + C47590 + C47568 * C122 + C47575 * C111 +
             C47591 + C47591 + C93590 * C123) *
                C93829 +
            (C47573 * C1386 + C52783 + C52783 + C47568 * C1402 +
             C47575 * C1385 + C52784 + C52784 + C93590 * C1401) *
                C93718) *
               C42379 +
           ((C47573 * C805 + C47592 + C47592 + C47568 * C821 + C47575 * C804 +
             C47593 + C47593 + C93590 * C820) *
                C93829 +
            (C47573 * C3411 + C52785 + C52785 + C47568 * C3419 +
             C47575 * C3412 + C52786 + C52786 + C93590 * C3420) *
                C93718) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
             C47579 + C47579 + C93590 * C121) *
                C93829 +
            (C54583 + C54584) * C93718) *
               C42379 +
           ((C48410 + C48411) * C93829 + (C51850 + C51849) * C93718) * C93694) *
              C1382 -
          (((C54585 + C54586) * C93718 + (C51849 + C51850) * C93829) * C93694 +
           ((C54587 + C54588) * C93718 + (C54584 + C54583) * C93829) * C42379) *
              C1383 +
          (((C54588 + C54587) * C93829 +
            (C47573 * C10964 + C54567 + C54567 + C47568 * C10970 +
             C47575 * C10965 + C54568 + C54568 + C93590 * C10971) *
                C93718) *
               C42379 +
           ((C54586 + C54585) * C93829 +
            (C47573 * C25001 + C54569 + C54569 + C47568 * C25005 +
             C47575 * C33015 + C54570 + C54570 + C93590 * C33017) *
                C93718) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C47574 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C47568 +
            (C42506 + C42507) * C47576 + (C42508 + C42509) * C93590) *
               C93829 +
           ((C42479 * C1388 + C42379 * C1470 + C42480 * C3409 +
             C93694 * C3491) *
                C47574 +
            (C42479 * C1396 + C42379 * C1478 + C42480 * C3413 +
             C93694 * C3495) *
                C47568 +
            (C45823 + C45822) * C47576 + (C45821 + C45820) * C93590) *
               C93718) *
              C93639 * C800 -
          (((C42480 * C8524 + C93694 * C8649 + C42479 * C3414 +
             C42379 * C3496) *
                C93590 +
            (C42480 * C8521 + C93694 * C8646 + C42479 * C3410 +
             C42379 * C3492) *
                C47576 +
            (C42480 * C8523 + C93694 * C8648 + C42479 * C3413 +
             C42379 * C3495) *
                C47568 +
            (C42480 * C8520 + C93694 * C8645 + C42479 * C3409 +
             C42379 * C3491) *
                C47574) *
               C93718 +
           ((C44829 + C44830) * C93590 + (C44831 + C44832) * C47576 +
            (C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                C47568 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C47574) *
               C93829) *
              C93639 * C801 +
          (((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
                C47574 +
            (C42479 * C816 + C42379 * C898 + C42480 * C4900 + C93694 * C5019) *
                C47568 +
            (C42479 * C809 + C42379 * C891 + C42480 * C4898 + C93694 * C5017) *
                C47576 +
            (C42479 * C817 + C42379 * C899 + C42480 * C4901 + C93694 * C5020) *
                C93590) *
               C93829 +
           ((C42479 * C8520 + C42379 * C8645 + C42480 * C19095 +
             C93694 * C19221) *
                C47574 +
            (C42479 * C8523 + C42379 * C8648 + C42480 * C19097 +
             C93694 * C19223) *
                C47568 +
            (C42479 * C8521 + C42379 * C8646 + C42480 * C19096 +
             C93694 * C19222) *
                C47576 +
            (C42479 * C8524 + C42379 * C8649 + C42480 * C19098 +
             C93694 * C19224) *
                C93590) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C47574 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C47568 +
            (C42506 + C42507) * C47576 + (C42508 + C42509) * C93590) *
               C93829 +
           ((C42479 * C1388 + C42379 * C1470 + C42480 * C3409 +
             C93694 * C3491) *
                C47574 +
            (C42479 * C1396 + C42379 * C1478 + C42480 * C3413 +
             C93694 * C3495) *
                C47568 +
            (C45823 + C45822) * C47576 + (C45821 + C45820) * C93590) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C45816 + C45817) * C93590 + (C45818 + C45819) * C47576 +
            (C45820 + C45821) * C47568 + (C45822 + C45823) * C47574) *
               C93718 +
           ((C42513 + C42512) * C93590 + (C42511 + C42510) * C47576 +
            (C42509 + C42508) * C47568 + (C42507 + C42506) * C47574) *
               C93829) *
              C93639 * C93625 * C98 +
          ((C42518 * C47574 + C42519 * C47568 + (C42517 + C42516) * C47576 +
            (C42515 + C42514) * C93590) *
               C93829 +
           ((C45819 + C45818) * C47574 + (C45817 + C45816) * C47568 +
            (C42479 * C1385 + C42379 * C1467 + C42480 * C3412 +
             C93694 * C3494) *
                C47576 +
            (C42479 * C1393 + C42379 * C1475 + C42480 * C3416 +
             C93694 * C3498) *
                C93590) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C47574 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C47568 +
            (C42506 + C42507) * C47576 + (C42508 + C42509) * C93590) *
               C93829 +
           ((C54711 + C54712) * C47574 + (C54713 + C54714) * C47568 +
            (C45823 + C45822) * C47576 + (C45821 + C45820) * C93590) *
               C93718) *
              C1382 -
          (((C54715 + C54716) * C93590 + (C54717 + C54718) * C47576 +
            (C54719 + C54720) * C47568 + (C54721 + C54722) * C47574) *
               C93718 +
           ((C45820 + C45821) * C93590 + (C45822 + C45823) * C47576 +
            (C54714 + C54713) * C47568 + (C54712 + C54711) * C47574) *
               C93829) *
              C1383 +
          (((C54722 + C54721) * C47574 + (C54720 + C54719) * C47568 +
            (C54718 + C54717) * C47576 + (C54716 + C54715) * C93590) *
               C93829 +
           ((C42479 * C10964 + C42379 * C11080 + C42480 * C25001 +
             C93694 * C25104) *
                C47574 +
            (C42479 * C10967 + C42379 * C11083 + C42480 * C25003 +
             C93694 * C25106) *
                C47568 +
            (C42479 * C10965 + C42379 * C11081 + C42480 * C33015 +
             C93694 * C33128) *
                C47576 +
            (C42479 * C10968 + C42379 * C11084 + C42480 * C33016 +
             C93694 * C33129) *
                C93590) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C47574 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C47568 +
            (C9671 + C9672) * C47576 + (C9673 + C9674) * C93590) *
               C42379 +
           ((C24395 + C24396) * C47574 + (C24397 + C24398) * C47568 +
            (C12101 + C12100) * C47576 + (C12099 + C12098) * C93590) *
               C93694) *
              C93639 * C800 -
          (((C26103 + C26102) * C93590 + (C26101 + C26100) * C47576 +
            (C24402 + C24401) * C47568 + (C24400 + C24399) * C47574) *
               C93694 +
           ((C12098 + C12099) * C93590 + (C12100 + C12101) * C47576 +
            (C24398 + C24397) * C47568 + (C24396 + C24395) * C47574) *
               C42379) *
              C93639 * C801 +
          ((C24407 * C47574 + C24408 * C47568 + (C26100 + C26101) * C47576 +
            (C26102 + C26103) * C93590) *
               C42379 +
           ((C24406 + C24405) * C47574 + (C24404 + C24403) * C47568 +
            (C9644 * C4898 + C93829 * C5097 + C9645 * C19096 +
             C93718 * C19324) *
                C47576 +
            (C9644 * C4901 + C93829 * C5100 + C9645 * C19098 +
             C93718 * C19326) *
                C93590) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C47574 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C47568 +
            (C9671 + C9672) * C47576 + (C9673 + C9674) * C93590) *
               C42379 +
           ((C24395 + C24396) * C47574 + (C24397 + C24398) * C47568 +
            (C12101 + C12100) * C47576 + (C12099 + C12098) * C93590) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C12094 + C12095) * C93590 + (C12096 + C12097) * C47576 +
            (C12098 + C12099) * C47568 + (C12100 + C12101) * C47574) *
               C93694 +
           ((C9678 + C9677) * C93590 + (C9676 + C9675) * C47576 +
            (C9674 + C9673) * C47568 + (C9672 + C9671) * C47574) *
               C42379) *
              C93639 * C93625 * C98 +
          ((C9683 * C47574 + C9684 * C47568 + (C9682 + C9681) * C47576 +
            (C9680 + C9679) * C93590) *
               C42379 +
           ((C12097 + C12096) * C47574 + (C12095 + C12094) * C47568 +
            (C9644 * C804 + C93829 * C952 + C9645 * C3412 + C93718 * C3568) *
                C47576 +
            (C9644 * C812 + C93829 * C960 + C9645 * C3416 + C93718 * C3572) *
                C93590) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C47574 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C47568 +
            (C9671 + C9672) * C47576 + (C9673 + C9674) * C93590) *
               C42379 +
           ((C24395 + C24396) * C47574 + (C24397 + C24398) * C47568 +
            (C12101 + C12100) * C47576 + (C12099 + C12098) * C93590) *
               C93694) *
              C1382 -
          (((C9645 * C5779 + C93718 * C5954 + C9644 * C3414 + C93829 * C3570) *
                C93590 +
            (C9645 * C5776 + C93718 * C5951 + C9644 * C3410 + C93829 * C3566) *
                C47576 +
            (C27979 + C27980) * C47568 + (C27981 + C27982) * C47574) *
               C93694 +
           ((C13086 + C13087) * C93590 + (C13088 + C13089) * C47576 +
            (C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                C47568 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C47574) *
               C42379) *
              C1383 +
          (((C9644 * C1389 + C93829 * C1537 + C9645 * C10964 +
             C93718 * C11196) *
                C47574 +
            (C9644 * C1397 + C93829 * C1545 + C9645 * C10967 +
             C93718 * C11199) *
                C47568 +
            (C9644 * C1390 + C93829 * C1538 + C9645 * C10965 +
             C93718 * C11197) *
                C47576 +
            (C9644 * C1398 + C93829 * C1546 + C9645 * C10968 +
             C93718 * C11200) *
                C93590) *
               C42379 +
           ((C9644 * C5775 + C93829 * C5950 + C9645 * C25001 +
             C93718 * C25218) *
                C47574 +
            (C9644 * C5778 + C93829 * C5953 + C9645 * C25003 +
             C93718 * C25220) *
                C47568 +
            (C9644 * C5776 + C93829 * C5951 + C9645 * C33015 +
             C93718 * C33242) *
                C47576 +
            (C9644 * C5779 + C93829 * C5954 + C9645 * C33016 +
             C93718 * C33243) *
                C93590) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C42479 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C42379 +
            (C48679 + C48680) * C42480 + (C48681 + C48682) * C93694) *
               C93829 +
           ((C47574 * C1388 + C47568 * C1396 + C47576 * C1387 +
             C93590 * C1395) *
                C42479 +
            (C47574 * C1470 + C47568 * C1602 + C47576 * C1469 +
             C93590 * C1601) *
                C42379 +
            (C52176 + C52175) * C42480 + (C52174 + C52173) * C93694) *
               C93718) *
              C93639 * C800 -
          (((C52169 + C52170) * C93694 + (C52171 + C52172) * C42480 +
            (C52173 + C52174) * C42379 + (C52175 + C52176) * C42479) *
               C93718 +
           ((C48686 + C48685) * C93694 + (C48684 + C48683) * C42480 +
            (C48682 + C48681) * C42379 + (C48680 + C48679) * C42479) *
               C93829) *
              C93639 * C801 +
          ((C48691 * C42479 + C48692 * C42379 + (C48690 + C48689) * C42480 +
            (C48688 + C48687) * C93694) *
               C93829 +
           ((C52172 + C52171) * C42479 + (C52170 + C52169) * C42379 +
            (C47574 * C19095 + C47568 * C19097 + C47576 * C19096 +
             C93590 * C19098) *
                C42480 +
            (C47574 * C19221 + C47568 * C19439 + C47576 * C19222 +
             C93590 * C19440) *
                C93694) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C42479 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C42379 +
            (C48679 + C48680) * C42480 + (C48681 + C48682) * C93694) *
               C93829 +
           ((C47574 * C1388 + C47568 * C1396 + C47576 * C1387 +
             C93590 * C1395) *
                C42479 +
            (C47574 * C1470 + C47568 * C1602 + C47576 * C1469 +
             C93590 * C1601) *
                C42379 +
            (C52176 + C52175) * C42480 + (C52174 + C52173) * C93694) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C47576 * C3493 + C93590 * C3641 + C47574 * C3492 +
             C47568 * C3640) *
                C93694 +
            (C47576 * C3411 + C93590 * C3415 + C47574 * C3410 +
             C47568 * C3414) *
                C42480 +
            (C47576 * C1468 + C93590 * C1600 + C47574 * C1469 +
             C47568 * C1601) *
                C42379 +
            (C47576 * C1386 + C93590 * C1394 + C47574 * C1387 +
             C47568 * C1395) *
                C42479) *
               C93718 +
           ((C50246 + C50245) * C93694 + (C50244 + C50243) * C42480 +
            (C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                C42379 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C42479) *
               C93829) *
              C93639 * C93625 * C98 +
          (((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
                C42479 +
            (C47574 * C191 + C47568 * C364 + C47576 * C192 + C93590 * C365) *
                C42379 +
            (C47574 * C805 + C47568 * C813 + C47576 * C804 + C93590 * C812) *
                C42480 +
            (C47574 * C887 + C47568 * C1019 + C47576 * C886 + C93590 * C1018) *
                C93694) *
               C93829 +
           ((C47574 * C1386 + C47568 * C1394 + C47576 * C1385 +
             C93590 * C1393) *
                C42479 +
            (C47574 * C1468 + C47568 * C1600 + C47576 * C1467 +
             C93590 * C1599) *
                C42379 +
            (C47574 * C3411 + C47568 * C3415 + C47576 * C3412 +
             C93590 * C3416) *
                C42480 +
            (C47574 * C3493 + C47568 * C3641 + C47576 * C3494 +
             C93590 * C3642) *
                C93694) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C42479 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C42379 +
            (C48679 + C48680) * C42480 + (C48681 + C48682) * C93694) *
               C93829 +
           ((C54943 + C54944) * C42479 + (C54945 + C54946) * C42379 +
            (C52176 + C52175) * C42480 + (C52174 + C52173) * C93694) *
               C93718) *
              C1382 -
          (((C54947 + C54948) * C93694 + (C54949 + C54950) * C42480 +
            (C54951 + C54952) * C42379 + (C54953 + C54954) * C42479) *
               C93718 +
           ((C52173 + C52174) * C93694 + (C52175 + C52176) * C42480 +
            (C54946 + C54945) * C42379 + (C54944 + C54943) * C42479) *
               C93829) *
              C1383 +
          (((C54954 + C54953) * C42479 + (C54952 + C54951) * C42379 +
            (C54950 + C54949) * C42480 + (C54948 + C54947) * C93694) *
               C93829 +
           ((C47574 * C10964 + C47568 * C10967 + C47576 * C10965 +
             C93590 * C10968) *
                C42479 +
            (C47574 * C11080 + C47568 * C11276 + C47576 * C11081 +
             C93590 * C11277) *
                C42379 +
            (C47574 * C25001 + C47568 * C25003 + C47576 * C33015 +
             C93590 * C33016) *
                C42480 +
            (C47574 * C25104 + C47568 * C25296 + C47576 * C33128 +
             C93590 * C33342) *
                C93694) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
             C42745 + C42745 + C93694 * C1079) *
                C47568 +
            (C42778 + C42779) * C93590) *
               C93829 +
           ((C42741 * C1388 + C44292 + C44292 + C42379 * C1660 +
             C42742 * C3409 + C44291 + C44291 + C93694 * C3709) *
                C47568 +
            (C46139 + C46138) * C93590) *
               C93718) *
              C93639 * C800 -
          (((C42742 * C8521 + C47091 + C47091 + C93694 * C8985 +
             C42741 * C3410 + C47090 + C47090 + C42379 * C3710) *
                C93590 +
            (C42742 * C8520 + C47089 + C47089 + C93694 * C8984 +
             C42741 * C3409 + C47088 + C47088 + C42379 * C3709) *
                C47568) *
               C93718 +
           ((C45171 + C45172) * C93590 +
            (C42742 * C808 + C43583 + C43583 + C93694 * C1080 + C42741 * C807 +
             C43584 + C43584 + C42379 * C1079) *
                C47568) *
               C93829) *
              C93639 * C801 +
          (((C42741 * C808 + C43585 + C43585 + C42379 * C1080 + C42742 * C4897 +
             C43586 + C43586 + C93694 * C5325) *
                C47568 +
            (C42741 * C809 + C43587 + C43587 + C42379 * C1081 + C42742 * C4898 +
             C43588 + C43588 + C93694 * C5326) *
                C93590) *
               C93829 +
           ((C42741 * C8520 + C54061 + C54061 + C42379 * C8984 +
             C42742 * C19095 + C54062 + C54062 + C93694 * C19563) *
                C47568 +
            (C42741 * C8521 + C54063 + C54063 + C42379 * C8985 +
             C42742 * C19096 + C54064 + C54064 + C93694 * C19564) *
                C93590) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
             C42745 + C42745 + C93694 * C1079) *
                C47568 +
            (C42778 + C42779) * C93590) *
               C93829 +
           ((C42741 * C1388 + C44292 + C44292 + C42379 * C1660 +
             C42742 * C3409 + C44291 + C44291 + C93694 * C3709) *
                C47568 +
            (C46139 + C46138) * C93590) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C46136 + C46137) * C93590 + (C46138 + C46139) * C47568) * C93718 +
           ((C42781 + C42780) * C93590 + (C42779 + C42778) * C47568) * C93829) *
              C93639 * C93625 * C98 +
          ((C42784 * C47568 + (C42783 + C42782) * C93590) * C93829 +
           ((C46137 + C46136) * C47568 +
            (C42741 * C1385 + C46126 + C46126 + C42379 * C1657 +
             C42742 * C3412 + C46127 + C46127 + C93694 * C3712) *
                C93590) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
             C42745 + C42745 + C93694 * C1079) *
                C47568 +
            (C42778 + C42779) * C93590) *
               C93829 +
           ((C55081 + C55082) * C47568 + (C46139 + C46138) * C93590) * C93718) *
              C1382 -
          (((C55083 + C55084) * C93590 + (C55085 + C55086) * C47568) * C93718 +
           ((C46138 + C46139) * C93590 + (C55082 + C55081) * C47568) * C93829) *
              C1383 +
          (((C55086 + C55085) * C47568 + (C55084 + C55083) * C93590) * C93829 +
           ((C42741 * C10964 + C55065 + C55065 + C42379 * C11389 +
             C42742 * C25001 + C55066 + C55066 + C93694 * C25408) *
                C47568 +
            (C42741 * C10965 + C55067 + C55067 + C42379 * C11390 +
             C42742 * C33015 + C55068 + C55068 + C93694 * C33453) *
                C93590) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C42479 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C42379 +
            (C24395 + C24396) * C42480 + (C24649 + C24650) * C93694) *
               C47568 +
           ((C9671 + C9672) * C42479 + (C9920 + C9921) * C42379 +
            (C12101 + C12100) * C42480 + (C12417 + C12416) * C93694) *
               C93590) *
              C93639 * C800 -
          (((C26415 + C26414) * C93694 + (C26101 + C26100) * C42480 +
            (C12416 + C12417) * C42379 + (C12100 + C12101) * C42479) *
               C93590 +
           ((C24652 + C24651) * C93694 + (C24400 + C24399) * C42480 +
            (C24650 + C24649) * C42379 + (C24396 + C24395) * C42479) *
               C47568) *
              C93639 * C801 +
          ((C24407 * C42479 + C24655 * C42379 + (C24406 + C24405) * C42480 +
            (C24654 + C24653) * C93694) *
               C47568 +
           ((C26100 + C26101) * C42479 + (C26414 + C26415) * C42379 +
            (C9644 * C4898 + C93829 * C5097 + C9645 * C19096 +
             C93718 * C19324) *
                C42480 +
            (C9644 * C5017 + C93829 * C5415 + C9645 * C19222 +
             C93718 * C19670) *
                C93694) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C42479 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C42379 +
            (C24395 + C24396) * C42480 + (C24649 + C24650) * C93694) *
               C47568 +
           ((C9671 + C9672) * C42479 + (C9920 + C9921) * C42379 +
            (C12101 + C12100) * C42480 + (C12417 + C12416) * C93694) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C12414 + C12415) * C93694 + (C12096 + C12097) * C42480 +
            (C9923 + C9922) * C42379 + (C9676 + C9675) * C42479) *
               C93590 +
           ((C12416 + C12417) * C93694 + (C12100 + C12101) * C42480 +
            (C9921 + C9920) * C42379 + (C9672 + C9671) * C42479) *
               C47568) *
              C93639 * C93625 * C98 +
          ((C9683 * C42479 + C9926 * C42379 + (C12097 + C12096) * C42480 +
            (C12415 + C12414) * C93694) *
               C47568 +
           ((C9682 + C9681) * C42479 + (C9925 + C9924) * C42379 +
            (C9644 * C804 + C93829 * C952 + C9645 * C3412 + C93718 * C3568) *
                C42480 +
            (C9644 * C886 + C93829 * C1142 + C9645 * C3494 + C93718 * C3786) *
                C93694) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C42479 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C42379 +
            (C24395 + C24396) * C42480 + (C24649 + C24650) * C93694) *
               C47568 +
           ((C9671 + C9672) * C42479 + (C9920 + C9921) * C42379 +
            (C12101 + C12100) * C42480 + (C12417 + C12416) * C93694) *
               C93590) *
              C1382 -
          (((C9645 * C5871 + C93718 * C6197 + C9644 * C3492 + C93829 * C3784) *
                C93694 +
            (C9645 * C5776 + C93718 * C5951 + C9644 * C3410 + C93829 * C3566) *
                C42480 +
            (C13415 + C13416) * C42379 + (C13088 + C13089) * C42479) *
               C93590 +
           ((C28311 + C28312) * C93694 + (C27981 + C27982) * C42480 +
            (C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                C42379 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C42479) *
               C47568) *
              C1383 +
          (((C9644 * C1389 + C93829 * C1537 + C9645 * C10964 +
             C93718 * C11196) *
                C42479 +
            (C9644 * C1471 + C93829 * C1727 + C9645 * C11080 +
             C93718 * C11495) *
                C42379 +
            (C9644 * C5775 + C93829 * C5950 + C9645 * C25001 +
             C93718 * C25218) *
                C42480 +
            (C9644 * C5870 + C93829 * C6196 + C9645 * C25104 +
             C93718 * C25517) *
                C93694) *
               C47568 +
           ((C9644 * C1390 + C93829 * C1538 + C9645 * C10965 +
             C93718 * C11197) *
                C42479 +
            (C9644 * C1472 + C93829 * C1728 + C9645 * C11081 +
             C93718 * C11496) *
                C42379 +
            (C9644 * C5776 + C93829 * C5951 + C9645 * C33015 +
             C93718 * C33242) *
                C42480 +
            (C9644 * C5871 + C93829 * C6197 + C9645 * C33128 +
             C93718 * C33563) *
                C93694) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C9644 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93829 +
            (C47574 * C1388 + C47568 * C1396 + C47576 * C1387 +
             C93590 * C1395) *
                C9645 +
            (C47574 * C1536 + C47568 * C1784 + C47576 * C1535 +
             C93590 * C1783) *
                C93718) *
               C42379 +
           ((C48679 + C48680) * C9644 + (C48940 + C48941) * C93829 +
            (C52176 + C52175) * C9645 + (C52488 + C52487) * C93718) *
               C93694) *
              C93639 * C800 -
          (((C52485 + C52486) * C93718 + (C52171 + C52172) * C9645 +
            (C48943 + C48942) * C93829 + (C48684 + C48683) * C9644) *
               C93694 +
           ((C52487 + C52488) * C93718 + (C52175 + C52176) * C9645 +
            (C48941 + C48940) * C93829 + (C48680 + C48679) * C9644) *
               C42379) *
              C93639 * C801 +
          ((C48691 * C9644 + C48946 * C93829 + (C52172 + C52171) * C9645 +
            (C52486 + C52485) * C93718) *
               C42379 +
           ((C48690 + C48689) * C9644 + (C48945 + C48944) * C93829 +
            (C47574 * C19095 + C47568 * C19097 + C47576 * C19096 +
             C93590 * C19098) *
                C9645 +
            (C47574 * C19323 + C47568 * C19772 + C47576 * C19324 +
             C93590 * C19773) *
                C93718) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C9644 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93829 +
            (C47574 * C1388 + C47568 * C1396 + C47576 * C1387 +
             C93590 * C1395) *
                C9645 +
            (C47574 * C1536 + C47568 * C1784 + C47576 * C1535 +
             C93590 * C1783) *
                C93718) *
               C42379 +
           ((C48679 + C48680) * C9644 + (C48940 + C48941) * C93829 +
            (C52176 + C52175) * C9645 + (C52488 + C52487) * C93718) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C47576 * C3567 + C93590 * C3855 + C47574 * C3566 +
             C47568 * C3854) *
                C93718 +
            (C47576 * C3411 + C93590 * C3415 + C47574 * C3410 +
             C47568 * C3414) *
                C9645 +
            (C50578 + C50577) * C93829 + (C50244 + C50243) * C9644) *
               C93694 +
           ((C47576 * C1534 + C93590 * C1782 + C47574 * C1535 +
             C47568 * C1783) *
                C93718 +
            (C47576 * C1386 + C93590 * C1394 + C47574 * C1387 +
             C47568 * C1395) *
                C9645 +
            (C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                C93829 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C9644) *
               C42379) *
              C93639 * C93625 * C98 +
          (((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
                C9644 +
            (C47574 * C278 + C47568 * C581 + C47576 * C279 + C93590 * C582) *
                C93829 +
            (C47574 * C1386 + C47568 * C1394 + C47576 * C1385 +
             C93590 * C1393) *
                C9645 +
            (C47574 * C1534 + C47568 * C1782 + C47576 * C1533 +
             C93590 * C1781) *
                C93718) *
               C42379 +
           ((C47574 * C805 + C47568 * C813 + C47576 * C804 + C93590 * C812) *
                C9644 +
            (C47574 * C953 + C47568 * C1201 + C47576 * C952 + C93590 * C1200) *
                C93829 +
            (C47574 * C3411 + C47568 * C3415 + C47576 * C3412 +
             C93590 * C3416) *
                C9645 +
            (C47574 * C3567 + C47568 * C3855 + C47576 * C3568 +
             C93590 * C3856) *
                C93718) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C9644 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93829 +
            (C54943 + C54944) * C9645 + (C55295 + C55296) * C93718) *
               C42379 +
           ((C48679 + C48680) * C9644 + (C48940 + C48941) * C93829 +
            (C52176 + C52175) * C9645 + (C52488 + C52487) * C93718) *
               C93694) *
              C1382 -
          (((C55297 + C55298) * C93718 + (C54949 + C54950) * C9645 +
            (C52487 + C52488) * C93829 + (C52175 + C52176) * C9644) *
               C93694 +
           ((C55299 + C55300) * C93718 + (C54953 + C54954) * C9645 +
            (C55296 + C55295) * C93829 + (C54944 + C54943) * C9644) *
               C42379) *
              C1383 +
          (((C54954 + C54953) * C9644 + (C55300 + C55299) * C93829 +
            (C47574 * C10964 + C47568 * C10967 + C47576 * C10965 +
             C93590 * C10968) *
                C9645 +
            (C47574 * C11196 + C47568 * C11572 + C47576 * C11197 +
             C93590 * C11573) *
                C93718) *
               C42379 +
           ((C54950 + C54949) * C9644 + (C55298 + C55297) * C93829 +
            (C47574 * C25001 + C47568 * C25003 + C47576 * C33015 +
             C93590 * C33016) *
                C9645 +
            (C47574 * C25218 + C47568 * C25593 + C47576 * C33242 +
             C93590 * C33662) *
                C93718) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C9644 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93829 +
            (C42479 * C1388 + C42379 * C1470 + C42480 * C3409 +
             C93694 * C3491) *
                C9645 +
            (C42479 * C1536 + C42379 * C1842 + C42480 * C3565 +
             C93694 * C3923) *
                C93718) *
               C47568 +
           ((C42506 + C42507) * C9644 + (C43035 + C43036) * C93829 +
            (C45823 + C45822) * C9645 + (C46453 + C46452) * C93718) *
               C93590) *
              C93639 * C800 -
          (((C42480 * C8750 + C93694 * C9306 + C42479 * C3566 +
             C42379 * C3924) *
                C93718 +
            (C42480 * C8521 + C93694 * C8646 + C42479 * C3410 +
             C42379 * C3492) *
                C9645 +
            (C45494 + C45495) * C93829 + (C44831 + C44832) * C9644) *
               C93590 +
           ((C42480 * C8749 + C93694 * C9305 + C42479 * C3565 +
             C42379 * C3923) *
                C93718 +
            (C42480 * C8520 + C93694 * C8645 + C42479 * C3409 +
             C42379 * C3491) *
                C9645 +
            (C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                C93829 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C9644) *
               C47568) *
              C93639 * C801 +
          (((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
                C9644 +
            (C42479 * C956 + C42379 * C1262 + C42480 * C5096 + C93694 * C5598) *
                C93829 +
            (C42479 * C8520 + C42379 * C8645 + C42480 * C19095 +
             C93694 * C19221) *
                C9645 +
            (C42479 * C8749 + C42379 * C9305 + C42480 * C19323 +
             C93694 * C19884) *
                C93718) *
               C47568 +
           ((C42479 * C809 + C42379 * C891 + C42480 * C4898 + C93694 * C5017) *
                C9644 +
            (C42479 * C957 + C42379 * C1263 + C42480 * C5097 + C93694 * C5599) *
                C93829 +
            (C42479 * C8521 + C42379 * C8646 + C42480 * C19096 +
             C93694 * C19222) *
                C9645 +
            (C42479 * C8750 + C42379 * C9306 + C42480 * C19324 +
             C93694 * C19885) *
                C93718) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C9644 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93829 +
            (C42479 * C1388 + C42379 * C1470 + C42480 * C3409 +
             C93694 * C3491) *
                C9645 +
            (C42479 * C1536 + C42379 * C1842 + C42480 * C3565 +
             C93694 * C3923) *
                C93718) *
               C47568 +
           ((C42506 + C42507) * C9644 + (C43035 + C43036) * C93829 +
            (C45823 + C45822) * C9645 + (C46453 + C46452) * C93718) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C46450 + C46451) * C93718 + (C45818 + C45819) * C9645 +
            (C43038 + C43037) * C93829 + (C42511 + C42510) * C9644) *
               C93590 +
           ((C46452 + C46453) * C93718 + (C45822 + C45823) * C9645 +
            (C43036 + C43035) * C93829 + (C42507 + C42506) * C9644) *
               C47568) *
              C93639 * C93625 * C98 +
          ((C42518 * C9644 + C43041 * C93829 + (C45819 + C45818) * C9645 +
            (C46451 + C46450) * C93718) *
               C47568 +
           ((C42517 + C42516) * C9644 + (C43040 + C43039) * C93829 +
            (C42479 * C1385 + C42379 * C1467 + C42480 * C3412 +
             C93694 * C3494) *
                C9645 +
            (C42479 * C1533 + C42379 * C1839 + C42480 * C3568 +
             C93694 * C3926) *
                C93718) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C9644 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93829 +
            (C54711 + C54712) * C9645 + (C55411 + C55412) * C93718) *
               C47568 +
           ((C42506 + C42507) * C9644 + (C43035 + C43036) * C93829 +
            (C45823 + C45822) * C9645 + (C46453 + C46452) * C93718) *
               C93590) *
              C1382 -
          (((C55413 + C55414) * C93718 + (C54717 + C54718) * C9645 +
            (C46452 + C46453) * C93829 + (C45822 + C45823) * C9644) *
               C93590 +
           ((C55415 + C55416) * C93718 + (C54721 + C54722) * C9645 +
            (C55412 + C55411) * C93829 + (C54712 + C54711) * C9644) *
               C47568) *
              C1383 +
          (((C54722 + C54721) * C9644 + (C55416 + C55415) * C93829 +
            (C42479 * C10964 + C42379 * C11080 + C42480 * C25001 +
             C93694 * C25104) *
                C9645 +
            (C42479 * C11196 + C42379 * C11667 + C42480 * C25218 +
             C93694 * C25681) *
                C93718) *
               C47568 +
           ((C54718 + C54717) * C9644 + (C55414 + C55413) * C93829 +
            (C42479 * C10965 + C42379 * C11081 + C42480 * C33015 +
             C93694 * C33128) *
                C9645 +
            (C42479 * C11197 + C42379 * C11668 + C42480 * C33242 +
             C93694 * C33767) *
                C93718) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 + C10166 * C1388 +
             C10169 + C10169 + C93718 * C1900) *
                C42379 +
            (C24921 + C24922) * C93694) *
               C47568 +
           ((C10202 + C10203) * C42379 + (C12747 + C12746) * C93694) * C93590) *
              C93639 * C800 -
          (((C26735 + C26734) * C93694 + (C12746 + C12747) * C42379) * C93590 +
           ((C24924 + C24923) * C93694 + (C24922 + C24921) * C42379) * C47568) *
              C93639 * C801 +
          ((C24927 * C42379 + (C24926 + C24925) * C93694) * C47568 +
           ((C26734 + C26735) * C42379 +
            (C10165 * C4898 + C26728 + C26728 + C93829 * C5676 +
             C10166 * C19096 + C26729 + C26729 + C93718 * C19985) *
                C93694) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 + C10166 * C1388 +
             C10169 + C10169 + C93718 * C1900) *
                C42379 +
            (C24921 + C24922) * C93694) *
               C47568 +
           ((C10202 + C10203) * C42379 + (C12747 + C12746) * C93694) * C93590) *
              C93639 * C93625 * C97 -
          (((C12744 + C12745) * C93694 + (C10205 + C10204) * C42379) * C93590 +
           ((C12746 + C12747) * C93694 + (C10203 + C10202) * C42379) * C47568) *
              C93639 * C93625 * C98 +
          ((C10208 * C42379 + (C12745 + C12744) * C93694) * C47568 +
           ((C10207 + C10206) * C42379 +
            (C10165 * C804 + C12734 + C12734 + C93829 * C1316 + C10166 * C3412 +
             C12735 + C12735 + C93718 * C3996) *
                C93694) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 + C10166 * C1388 +
             C10169 + C10169 + C93718 * C1900) *
                C42379 +
            (C24921 + C24922) * C93694) *
               C47568 +
           ((C10202 + C10203) * C42379 + (C12747 + C12746) * C93694) * C93590) *
              C1382 -
          (((C10166 * C5776 + C14661 + C14661 + C93718 * C6428 +
             C10165 * C3410 + C14660 + C14660 + C93829 * C3994) *
                C93694 +
            (C13748 + C13749) * C42379) *
               C93590 +
           ((C28644 + C28645) * C93694 +
            (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
             C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                C42379) *
               C47568) *
              C1383 +
          (((C10165 * C1389 + C11766 + C11766 + C93829 * C1901 +
             C10166 * C10964 + C11767 + C11767 + C93718 * C11756) *
                C42379 +
            (C10165 * C5775 + C25780 + C25780 + C93829 * C6427 +
             C10166 * C25001 + C25781 + C25781 + C93718 * C25775) *
                C93694) *
               C47568 +
           ((C10165 * C1390 + C11768 + C11768 + C93829 * C1902 +
             C10166 * C10965 + C11769 + C11769 + C93718 * C11757) *
                C42379 +
            (C10165 * C5776 + C55515 + C55515 + C93829 * C6428 +
             C10166 * C33015 + C55516 + C55516 + C93718 * C33869) *
                C93694) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
              C47579 + C47579 + C93590 * C121) *
                 C93829 +
             (C54583 + C54584) * C93718) *
                C42379 +
            ((C48410 + C48411) * C93829 + (C51850 + C51849) * C93718) *
                C93694) *
               C2695 -
           (((C54585 + C54586) * C93718 + (C51849 + C51850) * C93829) * C93694 +
            ((C54587 + C54588) * C93718 + (C54584 + C54583) * C93829) *
                C42379) *
               C2696) *
              C93625 * C1981 +
          ((((C56893 + C56894) * C93829 +
             (C47573 * C1390 + C56885 + C56885 + C47568 * C1406 +
              C47575 * C1391 + C56886 + C56886 + C93590 * C1407) *
                 C93718) *
                C42379 +
            ((C55655 + C55656) * C93829 +
             (C47573 * C5776 + C56887 + C56887 + C47568 * C5782 +
              C47575 * C5777 + C56888 + C56888 + C93590 * C5783) *
                 C93718) *
                C93694) *
               C2696 -
           (((C55656 + C55655) * C93718 + (C49904 + C49903) * C93829) * C93694 +
            ((C56894 + C56893) * C93718 +
             (C47575 * C110 + C47588 + C47588 + C93590 * C122 + C47573 * C109 +
              C47589 + C47589 + C47568 * C121) *
                 C93829) *
                C42379) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexy[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C47574 +
             (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                 C47568 +
             (C42506 + C42507) * C47576 + (C42508 + C42509) * C93590) *
                C93829 +
            ((C54711 + C54712) * C47574 + (C54713 + C54714) * C47568 +
             C57025 * C47576 + C57026 * C93590) *
                C93718) *
               C2695 -
           (((C54715 + C54716) * C93590 + (C54717 + C54718) * C47576 +
             (C54719 + C54720) * C47568 + (C54721 + C54722) * C47574) *
                C93718 +
            (C57027 * C93590 + C57028 * C47576 + (C54714 + C54713) * C47568 +
             (C54712 + C54711) * C47574) *
                C93829) *
               C2696) *
              C93625 * C1981 +
          (((C57025 * C47574 + C57026 * C47568 + (C45819 + C45818) * C47576 +
             (C45817 + C45816) * C93590) *
                C93829 +
            ((C54718 + C54717) * C47574 + (C54716 + C54715) * C47568 +
             (C42479 * C1391 + C42379 * C1473 + C42480 * C5777 +
              C93694 * C5872) *
                 C47576 +
             (C42479 * C1399 + C42379 * C1481 + C42480 * C5780 +
              C93694 * C5875) *
                 C93590) *
                C93718) *
               C2696 -
           (((C45816 + C45817) * C93590 + (C45818 + C45819) * C47576 +
             C57027 * C47568 + C57028 * C47574) *
                C93718 +
            ((C42513 + C42512) * C93590 + (C42511 + C42510) * C47576 +
             (C42509 + C42508) * C47568 + (C42507 + C42506) * C47574) *
                C93829) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C47574 +
             (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                 C47568 +
             (C9671 + C9672) * C47576 + (C9673 + C9674) * C93590) *
                C42379 +
            ((C24395 + C24396) * C47574 + (C24397 + C24398) * C47568 +
             C55929 * C47576 + C55930 * C93590) *
                C93694) *
               C2695 -
           (((C57167 + C57168) * C93590 + (C57169 + C57170) * C47576 +
             (C27979 + C27980) * C47568 + (C27981 + C27982) * C47574) *
                C93694 +
            ((C13086 + C13087) * C93590 + (C13088 + C13089) * C47576 +
             (C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                 C47568 +
             (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                 C47574) *
                C42379) *
               C2696) *
              C93625 * C1981 +
          ((((C13089 + C13088) * C47574 + (C13087 + C13086) * C47568 +
             (C13085 + C13084) * C47576 + (C13083 + C13082) * C93590) *
                C42379 +
            ((C57170 + C57169) * C47574 + (C57168 + C57167) * C47568 +
             (C9644 * C3411 + C93829 * C3567 + C9645 * C5777 + C93718 * C5952) *
                 C47576 +
             (C9644 * C3415 + C93829 * C3571 + C9645 * C5780 + C93718 * C5955) *
                 C93590) *
                C93694) *
               C2696 -
           (((C12094 + C12095) * C93590 + (C12096 + C12097) * C47576 +
             C55931 * C47568 + C55932 * C47574) *
                C93694 +
            ((C9678 + C9677) * C93590 + (C9676 + C9675) * C47576 +
             (C9674 + C9673) * C47568 + (C9672 + C9671) * C47574) *
                C42379) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C42479 +
             (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                 C42379 +
             (C48679 + C48680) * C42480 + (C48681 + C48682) * C93694) *
                C93829 +
            ((C54943 + C54944) * C42479 + (C54945 + C54946) * C42379 +
             (C52176 + C52175) * C42480 + (C52174 + C52173) * C93694) *
                C93718) *
               C2695 -
           (((C54947 + C54948) * C93694 + (C54949 + C54950) * C42480 +
             (C54951 + C54952) * C42379 + (C54953 + C54954) * C42479) *
                C93718 +
            ((C52173 + C52174) * C93694 + (C52175 + C52176) * C42480 +
             (C54946 + C54945) * C42379 + (C54944 + C54943) * C42479) *
                C93829) *
               C2696) *
              C93625 * C1981 +
          ((((C57309 + C57310) * C42479 + (C57311 + C57312) * C42379 +
             (C56071 + C56072) * C42480 + (C56073 + C56074) * C93694) *
                C93829 +
            ((C47574 * C1390 + C47568 * C1398 + C47576 * C1391 +
              C93590 * C1399) *
                 C42479 +
             (C47574 * C1472 + C47568 * C1604 + C47576 * C1473 +
              C93590 * C1605) *
                 C42379 +
             (C47574 * C5776 + C47568 * C5779 + C47576 * C5777 +
              C93590 * C5780) *
                 C42480 +
             (C47574 * C5871 + C47568 * C6031 + C47576 * C5872 +
              C93590 * C6032) *
                 C93694) *
                C93718) *
               C2696 -
           (((C56074 + C56073) * C93694 + (C56072 + C56071) * C42480 +
             (C57312 + C57311) * C42379 + (C57310 + C57309) * C42479) *
                C93718 +
            ((C50246 + C50245) * C93694 + (C50244 + C50243) * C42480 +
             (C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                 C42379 +
             (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                 C42479) *
                C93829) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
              C42745 + C42745 + C93694 * C1079) *
                 C47568 +
             (C42778 + C42779) * C93590) *
                C93829 +
            ((C55081 + C55082) * C47568 + C57443 * C93590) * C93718) *
               C2695 -
           (((C55083 + C55084) * C93590 + (C55085 + C55086) * C47568) * C93718 +
            (C57444 * C93590 + (C55082 + C55081) * C47568) * C93829) *
               C2696) *
              C93625 * C1981 +
          (((C57443 * C47568 + (C46137 + C46136) * C93590) * C93829 +
            ((C55084 + C55083) * C47568 +
             (C42741 * C1391 + C44297 + C44297 + C42379 * C1663 +
              C42742 * C5777 + C44298 + C44298 + C93694 * C6109) *
                 C93590) *
                C93718) *
               C2696 -
           (((C46136 + C46137) * C93590 + C57444 * C47568) * C93718 +
            ((C42781 + C42780) * C93590 + (C42779 + C42778) * C47568) *
                C93829) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C42479 +
             (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                 C42379 +
             (C24395 + C24396) * C42480 + (C24649 + C24650) * C93694) *
                C47568 +
            ((C9671 + C9672) * C42479 + (C9920 + C9921) * C42379 +
             C55929 * C42480 + C56345 * C93694) *
                C93590) *
               C2695 -
           (((C57579 + C57580) * C93694 + (C57169 + C57170) * C42480 +
             (C13415 + C13416) * C42379 + (C13088 + C13089) * C42479) *
                C93590 +
            ((C28311 + C28312) * C93694 + (C27981 + C27982) * C42480 +
             (C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                 C42379 +
             (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                 C42479) *
                C47568) *
               C2696) *
              C93625 * C1981 +
          ((((C13089 + C13088) * C42479 + (C13416 + C13415) * C42379 +
             (C57170 + C57169) * C42480 + (C57580 + C57579) * C93694) *
                C47568 +
            ((C13085 + C13084) * C42479 + (C13414 + C13413) * C42379 +
             (C9644 * C3411 + C93829 * C3567 + C9645 * C5777 + C93718 * C5952) *
                 C42480 +
             (C9644 * C3493 + C93829 * C3785 + C9645 * C5872 + C93718 * C6198) *
                 C93694) *
                C93590) *
               C2696 -
           (((C12414 + C12415) * C93694 + (C12096 + C12097) * C42480 +
             (C9923 + C9922) * C42379 + (C9676 + C9675) * C42479) *
                C93590 +
            (C56346 * C93694 + C55932 * C42480 + (C9921 + C9920) * C42379 +
             (C9672 + C9671) * C42479) *
                C47568) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C9644 +
             (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                 C93829 +
             (C54943 + C54944) * C9645 + (C55295 + C55296) * C93718) *
                C42379 +
            ((C48679 + C48680) * C9644 + (C48940 + C48941) * C93829 +
             (C52176 + C52175) * C9645 + (C52488 + C52487) * C93718) *
                C93694) *
               C2695 -
           (((C55297 + C55298) * C93718 + (C54949 + C54950) * C9645 +
             (C52487 + C52488) * C93829 + (C52175 + C52176) * C9644) *
                C93694 +
            ((C55299 + C55300) * C93718 + (C54953 + C54954) * C9645 +
             (C55296 + C55295) * C93829 + (C54944 + C54943) * C9644) *
                C42379) *
               C2696) *
              C93625 * C1981 +
          ((((C57309 + C57310) * C9644 + (C57715 + C57716) * C93829 +
             (C47574 * C1390 + C47568 * C1398 + C47576 * C1391 +
              C93590 * C1399) *
                 C9645 +
             (C47574 * C1538 + C47568 * C1786 + C47576 * C1539 +
              C93590 * C1787) *
                 C93718) *
                C42379 +
            ((C56071 + C56072) * C9644 + (C56481 + C56482) * C93829 +
             (C47574 * C5776 + C47568 * C5779 + C47576 * C5777 +
              C93590 * C5780) *
                 C9645 +
             (C47574 * C5951 + C47568 * C6274 + C47576 * C5952 +
              C93590 * C6275) *
                 C93718) *
                C93694) *
               C2696 -
           (((C56482 + C56481) * C93718 + (C56072 + C56071) * C9645 +
             (C50578 + C50577) * C93829 + (C50244 + C50243) * C9644) *
                C93694 +
            ((C57716 + C57715) * C93718 + (C57310 + C57309) * C9645 +
             (C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                 C93829 +
             (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                 C9644) *
                C42379) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C9644 +
             (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                 C93829 +
             (C54711 + C54712) * C9645 + (C55411 + C55412) * C93718) *
                C47568 +
            ((C42506 + C42507) * C9644 + (C43035 + C43036) * C93829 +
             C57025 * C9645 + C57847 * C93718) *
                C93590) *
               C2695 -
           (((C55413 + C55414) * C93718 + (C54717 + C54718) * C9645 +
             C57848 * C93829 + C57028 * C9644) *
                C93590 +
            ((C55415 + C55416) * C93718 + (C54721 + C54722) * C9645 +
             (C55412 + C55411) * C93829 + (C54712 + C54711) * C9644) *
                C47568) *
               C2696) *
              C93625 * C1981 +
          (((C57025 * C9644 + C57847 * C93829 + (C54718 + C54717) * C9645 +
             (C55414 + C55413) * C93718) *
                C47568 +
            ((C45819 + C45818) * C9644 + (C46451 + C46450) * C93829 +
             (C42479 * C1391 + C42379 * C1473 + C42480 * C5777 +
              C93694 * C5872) *
                 C9645 +
             (C42479 * C1539 + C42379 * C1845 + C42480 * C5952 +
              C93694 * C6352) *
                 C93718) *
                C93590) *
               C2696 -
           (((C46450 + C46451) * C93718 + (C45818 + C45819) * C9645 +
             (C43038 + C43037) * C93829 + (C42511 + C42510) * C9644) *
                C93590 +
            (C57848 * C93718 + C57028 * C9645 + (C43036 + C43035) * C93829 +
             (C42507 + C42506) * C9644) *
                C47568) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10165 * C108 + C10168 + C10168 + C93829 * C714 + C10166 * C1388 +
              C10169 + C10169 + C93718 * C1900) *
                 C42379 +
             (C24921 + C24922) * C93694) *
                C47568 +
            ((C10202 + C10203) * C42379 + C56749 * C93694) * C93590) *
               C2695 -
           (((C57987 + C57988) * C93694 + (C13748 + C13749) * C42379) * C93590 +
            ((C28644 + C28645) * C93694 +
             (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
              C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                 C42379) *
                C47568) *
               C2696) *
              C93625 * C1981 +
          ((((C13749 + C13748) * C42379 + (C57988 + C57987) * C93694) * C47568 +
            ((C13747 + C13746) * C42379 +
             (C10165 * C3411 + C14662 + C14662 + C93829 * C3995 +
              C10166 * C5777 + C14663 + C14663 + C93718 * C6429) *
                 C93694) *
                C93590) *
               C2696 -
           (((C12744 + C12745) * C93694 + (C10205 + C10204) * C42379) * C93590 +
            (C56750 * C93694 + (C10203 + C10202) * C42379) * C47568) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
             C47579 + C47579 + C93590 * C121) *
                C93829 +
            (C47573 * C1388 + C49176 + C49176 + C47568 * C1404 +
             C47575 * C1387 + C49175 + C49175 + C93590 * C1403) *
                C93718) *
               C42379 +
           ((C48410 + C48411) * C93829 + (C51850 + C51849) * C93718) * C93694) *
              C93639 * C93625 * C97 -
          (((C47575 * C3411 + C50890 + C50890 + C93590 * C3419 +
             C47573 * C3410 + C50889 + C50889 + C47568 * C3418) *
                C93718 +
            (C49904 + C49903) * C93829) *
               C93694 +
           ((C47575 * C1386 + C50888 + C50888 + C93590 * C1402 +
             C47573 * C1387 + C50887 + C50887 + C47568 * C1403) *
                C93718 +
            (C47575 * C110 + C47588 + C47588 + C93590 * C122 + C47573 * C109 +
             C47589 + C47589 + C47568 * C121) *
                C93829) *
               C42379) *
              C93639 * C93625 * C98 +
          (((C47573 * C110 + C47590 + C47590 + C47568 * C122 + C47575 * C111 +
             C47591 + C47591 + C93590 * C123) *
                C93829 +
            (C47573 * C1386 + C52783 + C52783 + C47568 * C1402 +
             C47575 * C1385 + C52784 + C52784 + C93590 * C1401) *
                C93718) *
               C42379 +
           ((C47573 * C805 + C47592 + C47592 + C47568 * C821 + C47575 * C804 +
             C47593 + C47593 + C93590 * C820) *
                C93829 +
            (C47573 * C3411 + C52785 + C52785 + C47568 * C3419 +
             C47575 * C3412 + C52786 + C52786 + C93590 * C3420) *
                C93718) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
             C47579 + C47579 + C93590 * C121) *
                C93829 +
            (C47573 * C1388 + C49176 + C49176 + C47568 * C1404 +
             C47575 * C1387 + C49175 + C49175 + C93590 * C1403) *
                C93718) *
               C42379 +
           ((C48410 + C48411) * C93829 + (C51850 + C51849) * C93718) * C93694) *
              C93639 * C800 -
          (((C51847 + C51848) * C93718 + (C48413 + C48412) * C93829) * C93694 +
           ((C51849 + C51850) * C93718 + (C48411 + C48410) * C93829) * C42379) *
              C93639 * C801 +
          ((C48416 * C93829 + (C51848 + C51847) * C93718) * C42379 +
           ((C48415 + C48414) * C93829 +
            (C47573 * C19095 + C51837 + C51837 + C47568 * C19099 +
             C47575 * C19096 + C51838 + C51838 + C93590 * C19100) *
                C93718) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C47574 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C47568 +
            (C42506 + C42507) * C47576 + (C42508 + C42509) * C93590) *
               C93829 +
           ((C42479 * C1388 + C42379 * C1470 + C42480 * C3409 +
             C93694 * C3491) *
                C47574 +
            (C42479 * C1396 + C42379 * C1478 + C42480 * C3413 +
             C93694 * C3495) *
                C47568 +
            (C45823 + C45822) * C47576 + (C45821 + C45820) * C93590) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C45816 + C45817) * C93590 + (C45818 + C45819) * C47576 +
            (C45820 + C45821) * C47568 + (C45822 + C45823) * C47574) *
               C93718 +
           ((C42513 + C42512) * C93590 + (C42511 + C42510) * C47576 +
            (C42509 + C42508) * C47568 + (C42507 + C42506) * C47574) *
               C93829) *
              C93639 * C93625 * C98 +
          ((C42518 * C47574 + C42519 * C47568 + (C42517 + C42516) * C47576 +
            (C42515 + C42514) * C93590) *
               C93829 +
           ((C45819 + C45818) * C47574 + (C45817 + C45816) * C47568 +
            (C42479 * C1385 + C42379 * C1467 + C42480 * C3412 +
             C93694 * C3494) *
                C47576 +
            (C42479 * C1393 + C42379 * C1475 + C42480 * C3416 +
             C93694 * C3498) *
                C93590) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C47574 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C47568 +
            (C42506 + C42507) * C47576 + (C42508 + C42509) * C93590) *
               C93829 +
           ((C42479 * C1388 + C42379 * C1470 + C42480 * C3409 +
             C93694 * C3491) *
                C47574 +
            (C42479 * C1396 + C42379 * C1478 + C42480 * C3413 +
             C93694 * C3495) *
                C47568 +
            (C45823 + C45822) * C47576 + (C45821 + C45820) * C93590) *
               C93718) *
              C93639 * C800 -
          (((C42480 * C8524 + C93694 * C8649 + C42479 * C3414 +
             C42379 * C3496) *
                C93590 +
            (C42480 * C8521 + C93694 * C8646 + C42479 * C3410 +
             C42379 * C3492) *
                C47576 +
            (C42480 * C8523 + C93694 * C8648 + C42479 * C3413 +
             C42379 * C3495) *
                C47568 +
            (C42480 * C8520 + C93694 * C8645 + C42479 * C3409 +
             C42379 * C3491) *
                C47574) *
               C93718 +
           ((C44829 + C44830) * C93590 + (C44831 + C44832) * C47576 +
            (C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                C47568 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C47574) *
               C93829) *
              C93639 * C801 +
          (((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
                C47574 +
            (C42479 * C816 + C42379 * C898 + C42480 * C4900 + C93694 * C5019) *
                C47568 +
            (C42479 * C809 + C42379 * C891 + C42480 * C4898 + C93694 * C5017) *
                C47576 +
            (C42479 * C817 + C42379 * C899 + C42480 * C4901 + C93694 * C5020) *
                C93590) *
               C93829 +
           ((C42479 * C8520 + C42379 * C8645 + C42480 * C19095 +
             C93694 * C19221) *
                C47574 +
            (C42479 * C8523 + C42379 * C8648 + C42480 * C19097 +
             C93694 * C19223) *
                C47568 +
            (C42479 * C8521 + C42379 * C8646 + C42480 * C19096 +
             C93694 * C19222) *
                C47576 +
            (C42479 * C8524 + C42379 * C8649 + C42480 * C19098 +
             C93694 * C19224) *
                C93590) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C47574 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C47568 +
            (C9671 + C9672) * C47576 + (C9673 + C9674) * C93590) *
               C42379 +
           ((C24395 + C24396) * C47574 + (C24397 + C24398) * C47568 +
            (C12101 + C12100) * C47576 + (C12099 + C12098) * C93590) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C12094 + C12095) * C93590 + (C12096 + C12097) * C47576 +
            (C12098 + C12099) * C47568 + (C12100 + C12101) * C47574) *
               C93694 +
           ((C9678 + C9677) * C93590 + (C9676 + C9675) * C47576 +
            (C9674 + C9673) * C47568 + (C9672 + C9671) * C47574) *
               C42379) *
              C93639 * C93625 * C98 +
          ((C9683 * C47574 + C9684 * C47568 + (C9682 + C9681) * C47576 +
            (C9680 + C9679) * C93590) *
               C42379 +
           ((C12097 + C12096) * C47574 + (C12095 + C12094) * C47568 +
            (C9644 * C804 + C93829 * C952 + C9645 * C3412 + C93718 * C3568) *
                C47576 +
            (C9644 * C812 + C93829 * C960 + C9645 * C3416 + C93718 * C3572) *
                C93590) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C47574 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C47568 +
            (C9671 + C9672) * C47576 + (C9673 + C9674) * C93590) *
               C42379 +
           ((C24395 + C24396) * C47574 + (C24397 + C24398) * C47568 +
            (C12101 + C12100) * C47576 + (C12099 + C12098) * C93590) *
               C93694) *
              C93639 * C800 -
          (((C26103 + C26102) * C93590 + (C26101 + C26100) * C47576 +
            (C24402 + C24401) * C47568 + (C24400 + C24399) * C47574) *
               C93694 +
           ((C12098 + C12099) * C93590 + (C12100 + C12101) * C47576 +
            (C24398 + C24397) * C47568 + (C24396 + C24395) * C47574) *
               C42379) *
              C93639 * C801 +
          ((C24407 * C47574 + C24408 * C47568 + (C26100 + C26101) * C47576 +
            (C26102 + C26103) * C93590) *
               C42379 +
           ((C24406 + C24405) * C47574 + (C24404 + C24403) * C47568 +
            (C9644 * C4898 + C93829 * C5097 + C9645 * C19096 +
             C93718 * C19324) *
                C47576 +
            (C9644 * C4901 + C93829 * C5100 + C9645 * C19098 +
             C93718 * C19326) *
                C93590) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C42479 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C42379 +
            (C48679 + C48680) * C42480 + (C48681 + C48682) * C93694) *
               C93829 +
           ((C47574 * C1388 + C47568 * C1396 + C47576 * C1387 +
             C93590 * C1395) *
                C42479 +
            (C47574 * C1470 + C47568 * C1602 + C47576 * C1469 +
             C93590 * C1601) *
                C42379 +
            (C52176 + C52175) * C42480 + (C52174 + C52173) * C93694) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C47576 * C3493 + C93590 * C3641 + C47574 * C3492 +
             C47568 * C3640) *
                C93694 +
            (C47576 * C3411 + C93590 * C3415 + C47574 * C3410 +
             C47568 * C3414) *
                C42480 +
            (C47576 * C1468 + C93590 * C1600 + C47574 * C1469 +
             C47568 * C1601) *
                C42379 +
            (C47576 * C1386 + C93590 * C1394 + C47574 * C1387 +
             C47568 * C1395) *
                C42479) *
               C93718 +
           ((C50246 + C50245) * C93694 + (C50244 + C50243) * C42480 +
            (C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                C42379 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C42479) *
               C93829) *
              C93639 * C93625 * C98 +
          (((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
                C42479 +
            (C47574 * C191 + C47568 * C364 + C47576 * C192 + C93590 * C365) *
                C42379 +
            (C47574 * C805 + C47568 * C813 + C47576 * C804 + C93590 * C812) *
                C42480 +
            (C47574 * C887 + C47568 * C1019 + C47576 * C886 + C93590 * C1018) *
                C93694) *
               C93829 +
           ((C47574 * C1386 + C47568 * C1394 + C47576 * C1385 +
             C93590 * C1393) *
                C42479 +
            (C47574 * C1468 + C47568 * C1600 + C47576 * C1467 +
             C93590 * C1599) *
                C42379 +
            (C47574 * C3411 + C47568 * C3415 + C47576 * C3412 +
             C93590 * C3416) *
                C42480 +
            (C47574 * C3493 + C47568 * C3641 + C47576 * C3494 +
             C93590 * C3642) *
                C93694) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C42479 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C42379 +
            (C48679 + C48680) * C42480 + (C48681 + C48682) * C93694) *
               C93829 +
           ((C47574 * C1388 + C47568 * C1396 + C47576 * C1387 +
             C93590 * C1395) *
                C42479 +
            (C47574 * C1470 + C47568 * C1602 + C47576 * C1469 +
             C93590 * C1601) *
                C42379 +
            (C52176 + C52175) * C42480 + (C52174 + C52173) * C93694) *
               C93718) *
              C93639 * C800 -
          (((C52169 + C52170) * C93694 + (C52171 + C52172) * C42480 +
            (C52173 + C52174) * C42379 + (C52175 + C52176) * C42479) *
               C93718 +
           ((C48686 + C48685) * C93694 + (C48684 + C48683) * C42480 +
            (C48682 + C48681) * C42379 + (C48680 + C48679) * C42479) *
               C93829) *
              C93639 * C801 +
          ((C48691 * C42479 + C48692 * C42379 + (C48690 + C48689) * C42480 +
            (C48688 + C48687) * C93694) *
               C93829 +
           ((C52172 + C52171) * C42479 + (C52170 + C52169) * C42379 +
            (C47574 * C19095 + C47568 * C19097 + C47576 * C19096 +
             C93590 * C19098) *
                C42480 +
            (C47574 * C19221 + C47568 * C19439 + C47576 * C19222 +
             C93590 * C19440) *
                C93694) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
             C42745 + C42745 + C93694 * C1079) *
                C47568 +
            (C42778 + C42779) * C93590) *
               C93829 +
           ((C42741 * C1388 + C44292 + C44292 + C42379 * C1660 +
             C42742 * C3409 + C44291 + C44291 + C93694 * C3709) *
                C47568 +
            (C46139 + C46138) * C93590) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C46136 + C46137) * C93590 + (C46138 + C46139) * C47568) * C93718 +
           ((C42781 + C42780) * C93590 + (C42779 + C42778) * C47568) * C93829) *
              C93639 * C93625 * C98 +
          ((C42784 * C47568 + (C42783 + C42782) * C93590) * C93829 +
           ((C46137 + C46136) * C47568 +
            (C42741 * C1385 + C46126 + C46126 + C42379 * C1657 +
             C42742 * C3412 + C46127 + C46127 + C93694 * C3712) *
                C93590) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
             C42745 + C42745 + C93694 * C1079) *
                C47568 +
            (C42778 + C42779) * C93590) *
               C93829 +
           ((C42741 * C1388 + C44292 + C44292 + C42379 * C1660 +
             C42742 * C3409 + C44291 + C44291 + C93694 * C3709) *
                C47568 +
            (C46139 + C46138) * C93590) *
               C93718) *
              C93639 * C800 -
          (((C42742 * C8521 + C47091 + C47091 + C93694 * C8985 +
             C42741 * C3410 + C47090 + C47090 + C42379 * C3710) *
                C93590 +
            (C42742 * C8520 + C47089 + C47089 + C93694 * C8984 +
             C42741 * C3409 + C47088 + C47088 + C42379 * C3709) *
                C47568) *
               C93718 +
           ((C45171 + C45172) * C93590 +
            (C42742 * C808 + C43583 + C43583 + C93694 * C1080 + C42741 * C807 +
             C43584 + C43584 + C42379 * C1079) *
                C47568) *
               C93829) *
              C93639 * C801 +
          (((C42741 * C808 + C43585 + C43585 + C42379 * C1080 + C42742 * C4897 +
             C43586 + C43586 + C93694 * C5325) *
                C47568 +
            (C42741 * C809 + C43587 + C43587 + C42379 * C1081 + C42742 * C4898 +
             C43588 + C43588 + C93694 * C5326) *
                C93590) *
               C93829 +
           ((C42741 * C8520 + C54061 + C54061 + C42379 * C8984 +
             C42742 * C19095 + C54062 + C54062 + C93694 * C19563) *
                C47568 +
            (C42741 * C8521 + C54063 + C54063 + C42379 * C8985 +
             C42742 * C19096 + C54064 + C54064 + C93694 * C19564) *
                C93590) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C42479 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C42379 +
            (C24395 + C24396) * C42480 + (C24649 + C24650) * C93694) *
               C47568 +
           ((C9671 + C9672) * C42479 + (C9920 + C9921) * C42379 +
            (C12101 + C12100) * C42480 + (C12417 + C12416) * C93694) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C12414 + C12415) * C93694 + (C12096 + C12097) * C42480 +
            (C9923 + C9922) * C42379 + (C9676 + C9675) * C42479) *
               C93590 +
           ((C12416 + C12417) * C93694 + (C12100 + C12101) * C42480 +
            (C9921 + C9920) * C42379 + (C9672 + C9671) * C42479) *
               C47568) *
              C93639 * C93625 * C98 +
          ((C9683 * C42479 + C9926 * C42379 + (C12097 + C12096) * C42480 +
            (C12415 + C12414) * C93694) *
               C47568 +
           ((C9682 + C9681) * C42479 + (C9925 + C9924) * C42379 +
            (C9644 * C804 + C93829 * C952 + C9645 * C3412 + C93718 * C3568) *
                C42480 +
            (C9644 * C886 + C93829 * C1142 + C9645 * C3494 + C93718 * C3786) *
                C93694) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C42479 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C42379 +
            (C24395 + C24396) * C42480 + (C24649 + C24650) * C93694) *
               C47568 +
           ((C9671 + C9672) * C42479 + (C9920 + C9921) * C42379 +
            (C12101 + C12100) * C42480 + (C12417 + C12416) * C93694) *
               C93590) *
              C93639 * C800 -
          (((C26415 + C26414) * C93694 + (C26101 + C26100) * C42480 +
            (C12416 + C12417) * C42379 + (C12100 + C12101) * C42479) *
               C93590 +
           ((C24652 + C24651) * C93694 + (C24400 + C24399) * C42480 +
            (C24650 + C24649) * C42379 + (C24396 + C24395) * C42479) *
               C47568) *
              C93639 * C801 +
          ((C24407 * C42479 + C24655 * C42379 + (C24406 + C24405) * C42480 +
            (C24654 + C24653) * C93694) *
               C47568 +
           ((C26100 + C26101) * C42479 + (C26414 + C26415) * C42379 +
            (C9644 * C4898 + C93829 * C5097 + C9645 * C19096 +
             C93718 * C19324) *
                C42480 +
            (C9644 * C5017 + C93829 * C5415 + C9645 * C19222 +
             C93718 * C19670) *
                C93694) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C9644 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93829 +
            (C47574 * C1388 + C47568 * C1396 + C47576 * C1387 +
             C93590 * C1395) *
                C9645 +
            (C47574 * C1536 + C47568 * C1784 + C47576 * C1535 +
             C93590 * C1783) *
                C93718) *
               C42379 +
           ((C48679 + C48680) * C9644 + (C48940 + C48941) * C93829 +
            (C52176 + C52175) * C9645 + (C52488 + C52487) * C93718) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C47576 * C3567 + C93590 * C3855 + C47574 * C3566 +
             C47568 * C3854) *
                C93718 +
            (C47576 * C3411 + C93590 * C3415 + C47574 * C3410 +
             C47568 * C3414) *
                C9645 +
            (C50578 + C50577) * C93829 + (C50244 + C50243) * C9644) *
               C93694 +
           ((C47576 * C1534 + C93590 * C1782 + C47574 * C1535 +
             C47568 * C1783) *
                C93718 +
            (C47576 * C1386 + C93590 * C1394 + C47574 * C1387 +
             C47568 * C1395) *
                C9645 +
            (C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                C93829 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C9644) *
               C42379) *
              C93639 * C93625 * C98 +
          (((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
                C9644 +
            (C47574 * C278 + C47568 * C581 + C47576 * C279 + C93590 * C582) *
                C93829 +
            (C47574 * C1386 + C47568 * C1394 + C47576 * C1385 +
             C93590 * C1393) *
                C9645 +
            (C47574 * C1534 + C47568 * C1782 + C47576 * C1533 +
             C93590 * C1781) *
                C93718) *
               C42379 +
           ((C47574 * C805 + C47568 * C813 + C47576 * C804 + C93590 * C812) *
                C9644 +
            (C47574 * C953 + C47568 * C1201 + C47576 * C952 + C93590 * C1200) *
                C93829 +
            (C47574 * C3411 + C47568 * C3415 + C47576 * C3412 +
             C93590 * C3416) *
                C9645 +
            (C47574 * C3567 + C47568 * C3855 + C47576 * C3568 +
             C93590 * C3856) *
                C93718) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C9644 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93829 +
            (C47574 * C1388 + C47568 * C1396 + C47576 * C1387 +
             C93590 * C1395) *
                C9645 +
            (C47574 * C1536 + C47568 * C1784 + C47576 * C1535 +
             C93590 * C1783) *
                C93718) *
               C42379 +
           ((C48679 + C48680) * C9644 + (C48940 + C48941) * C93829 +
            (C52176 + C52175) * C9645 + (C52488 + C52487) * C93718) *
               C93694) *
              C93639 * C800 -
          (((C52485 + C52486) * C93718 + (C52171 + C52172) * C9645 +
            (C48943 + C48942) * C93829 + (C48684 + C48683) * C9644) *
               C93694 +
           ((C52487 + C52488) * C93718 + (C52175 + C52176) * C9645 +
            (C48941 + C48940) * C93829 + (C48680 + C48679) * C9644) *
               C42379) *
              C93639 * C801 +
          ((C48691 * C9644 + C48946 * C93829 + (C52172 + C52171) * C9645 +
            (C52486 + C52485) * C93718) *
               C42379 +
           ((C48690 + C48689) * C9644 + (C48945 + C48944) * C93829 +
            (C47574 * C19095 + C47568 * C19097 + C47576 * C19096 +
             C93590 * C19098) *
                C9645 +
            (C47574 * C19323 + C47568 * C19772 + C47576 * C19324 +
             C93590 * C19773) *
                C93718) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C9644 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93829 +
            (C42479 * C1388 + C42379 * C1470 + C42480 * C3409 +
             C93694 * C3491) *
                C9645 +
            (C42479 * C1536 + C42379 * C1842 + C42480 * C3565 +
             C93694 * C3923) *
                C93718) *
               C47568 +
           ((C42506 + C42507) * C9644 + (C43035 + C43036) * C93829 +
            (C45823 + C45822) * C9645 + (C46453 + C46452) * C93718) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C46450 + C46451) * C93718 + (C45818 + C45819) * C9645 +
            (C43038 + C43037) * C93829 + (C42511 + C42510) * C9644) *
               C93590 +
           ((C46452 + C46453) * C93718 + (C45822 + C45823) * C9645 +
            (C43036 + C43035) * C93829 + (C42507 + C42506) * C9644) *
               C47568) *
              C93639 * C93625 * C98 +
          ((C42518 * C9644 + C43041 * C93829 + (C45819 + C45818) * C9645 +
            (C46451 + C46450) * C93718) *
               C47568 +
           ((C42517 + C42516) * C9644 + (C43040 + C43039) * C93829 +
            (C42479 * C1385 + C42379 * C1467 + C42480 * C3412 +
             C93694 * C3494) *
                C9645 +
            (C42479 * C1533 + C42379 * C1839 + C42480 * C3568 +
             C93694 * C3926) *
                C93718) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C9644 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93829 +
            (C42479 * C1388 + C42379 * C1470 + C42480 * C3409 +
             C93694 * C3491) *
                C9645 +
            (C42479 * C1536 + C42379 * C1842 + C42480 * C3565 +
             C93694 * C3923) *
                C93718) *
               C47568 +
           ((C42506 + C42507) * C9644 + (C43035 + C43036) * C93829 +
            (C45823 + C45822) * C9645 + (C46453 + C46452) * C93718) *
               C93590) *
              C93639 * C800 -
          (((C42480 * C8750 + C93694 * C9306 + C42479 * C3566 +
             C42379 * C3924) *
                C93718 +
            (C42480 * C8521 + C93694 * C8646 + C42479 * C3410 +
             C42379 * C3492) *
                C9645 +
            (C45494 + C45495) * C93829 + (C44831 + C44832) * C9644) *
               C93590 +
           ((C42480 * C8749 + C93694 * C9305 + C42479 * C3565 +
             C42379 * C3923) *
                C93718 +
            (C42480 * C8520 + C93694 * C8645 + C42479 * C3409 +
             C42379 * C3491) *
                C9645 +
            (C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                C93829 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C9644) *
               C47568) *
              C93639 * C801 +
          (((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
                C9644 +
            (C42479 * C956 + C42379 * C1262 + C42480 * C5096 + C93694 * C5598) *
                C93829 +
            (C42479 * C8520 + C42379 * C8645 + C42480 * C19095 +
             C93694 * C19221) *
                C9645 +
            (C42479 * C8749 + C42379 * C9305 + C42480 * C19323 +
             C93694 * C19884) *
                C93718) *
               C47568 +
           ((C42479 * C809 + C42379 * C891 + C42480 * C4898 + C93694 * C5017) *
                C9644 +
            (C42479 * C957 + C42379 * C1263 + C42480 * C5097 + C93694 * C5599) *
                C93829 +
            (C42479 * C8521 + C42379 * C8646 + C42480 * C19096 +
             C93694 * C19222) *
                C9645 +
            (C42479 * C8750 + C42379 * C9306 + C42480 * C19324 +
             C93694 * C19885) *
                C93718) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 + C10166 * C1388 +
             C10169 + C10169 + C93718 * C1900) *
                C42379 +
            (C24921 + C24922) * C93694) *
               C47568 +
           ((C10202 + C10203) * C42379 + (C12747 + C12746) * C93694) * C93590) *
              C93639 * C93625 * C97 -
          (((C12744 + C12745) * C93694 + (C10205 + C10204) * C42379) * C93590 +
           ((C12746 + C12747) * C93694 + (C10203 + C10202) * C42379) * C47568) *
              C93639 * C93625 * C98 +
          ((C10208 * C42379 + (C12745 + C12744) * C93694) * C47568 +
           ((C10207 + C10206) * C42379 +
            (C10165 * C804 + C12734 + C12734 + C93829 * C1316 + C10166 * C3412 +
             C12735 + C12735 + C93718 * C3996) *
                C93694) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 + C10166 * C1388 +
             C10169 + C10169 + C93718 * C1900) *
                C42379 +
            (C24921 + C24922) * C93694) *
               C47568 +
           ((C10202 + C10203) * C42379 + (C12747 + C12746) * C93694) * C93590) *
              C93639 * C800 -
          (((C26735 + C26734) * C93694 + (C12746 + C12747) * C42379) * C93590 +
           ((C24924 + C24923) * C93694 + (C24922 + C24921) * C42379) * C47568) *
              C93639 * C801 +
          ((C24927 * C42379 + (C24926 + C24925) * C93694) * C47568 +
           ((C26734 + C26735) * C42379 +
            (C10165 * C4898 + C26728 + C26728 + C93829 * C5676 +
             C10166 * C19096 + C26729 + C26729 + C93718 * C19985) *
                C93694) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
              C14748 + C14748 + C93590 * C121) *
                 C59272 +
             (C30223 + C30224) * C93718) *
                C42379 +
            ((C15585 + C15586) * C59272 + (C19123 + C19122) * C93718) *
                C93694) *
               C93639 * C1979 -
           (((C19120 + C19121) * C93718 + (C15588 + C15587) * C59272) * C93694 +
            ((C19122 + C19123) * C93718 + (C15586 + C15585) * C59272) *
                C42379) *
               C93639 * C1980) *
              C1981 +
          ((((C17156 + C17157) * C59272 + (C78447 + C78448) * C93718) * C42379 +
            ((C17158 + C17159) * C59272 +
             (C14742 * C8521 + C18144 + C18144 + C93815 * C8527 +
              C14744 * C8522 + C18145 + C18145 + C93590 * C8528) *
                 C93718) *
                C93694) *
               C93639 * C1980 -
           (((C78448 + C78447) * C93718 + (C17157 + C17156) * C59272) * C93694 +
            ((C32032 + C32031) * C93718 +
             (C14744 * C110 + C14757 + C14757 + C93590 * C122 + C14742 * C109 +
              C14758 + C14758 + C93815 * C121) *
                 C59272) *
                C42379) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C91732 +
             (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                 C93815 +
             (C42506 + C42507) * C91722 + (C42508 + C42509) * C93590) *
                C59272 +
            ((C54711 + C54712) * C91732 + (C54713 + C54714) * C93815 +
             C57025 * C91722 + C57026 * C93590) *
                C93718) *
               C93639 * C1979 -
           (((C55795 + C55796) * C93590 + (C55797 + C55798) * C91722 +
             (C58262 + C58261) * C93815 + (C58260 + C58259) * C91732) *
                C93718 +
            ((C44829 + C44830) * C93590 + (C44831 + C44832) * C91722 +
             (C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                 C93815 +
             (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                 C91732) *
                C59272) *
               C93639 * C1980) *
              C1981 +
          ((((C44832 + C44831) * C91732 + (C44830 + C44829) * C93815 +
             (C44828 + C44827) * C91722 + (C44826 + C44825) * C93590) *
                C59272 +
            ((C55798 + C55797) * C91732 + (C55796 + C55795) * C93815 +
             (C42479 * C3411 + C42379 * C3493 + C42480 * C8522 +
              C93694 * C8647) *
                 C91722 +
             (C42479 * C3415 + C42379 * C3497 + C42480 * C8525 +
              C93694 * C8650) *
                 C93590) *
                C93718) *
               C93639 * C1980 -
           (((C45816 + C45817) * C93590 + (C45818 + C45819) * C91722 +
             C57027 * C93815 + C57028 * C91732) *
                C93718 +
            ((C42513 + C42512) * C93590 + (C42511 + C42510) * C91722 +
             (C42509 + C42508) * C93815 + (C42507 + C42506) * C91732) *
                C59272) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C91732 +
             (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                 C93815 +
             (C59452 + C59453) * C91722 + (C59454 + C59455) * C93590) *
                C42379 +
            ((C65499 + C65500) * C91732 + (C65501 + C65502) * C93815 +
             C67441 * C91722 + C67442 * C93590) *
                C93694) *
               C93639 * C1979 -
           (((C65503 + C65504) * C93590 + (C65505 + C65506) * C91722 +
             (C65507 + C65508) * C93815 + (C65509 + C65510) * C91732) *
                C93694 +
            (C67443 * C93590 + C67444 * C91722 + (C65502 + C65501) * C93815 +
             (C65500 + C65499) * C91732) *
                C42379) *
               C93639 * C1980) *
              C1981 +
          (((C67441 * C91732 + C67442 * C93815 + (C61765 + C61764) * C91722 +
             (C61763 + C61762) * C93590) *
                C42379 +
            ((C65506 + C65505) * C91732 + (C65504 + C65503) * C93815 +
             (C59425 * C810 + C59272 * C958 + C59426 * C8522 + C93718 * C8751) *
                 C91722 +
             (C59425 * C818 + C59272 * C966 + C59426 * C8525 + C93718 * C8754) *
                 C93590) *
                C93694) *
               C93639 * C1980 -
           (((C61762 + C61763) * C93590 + (C61764 + C61765) * C91722 +
             C67443 * C93815 + C67444 * C91732) *
                C93694 +
            ((C59459 + C59458) * C93590 + (C59457 + C59456) * C91722 +
             (C59455 + C59454) * C93815 + (C59453 + C59452) * C91732) *
                C42379) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C42479 +
             (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                 C42379 +
             (C15876 + C15877) * C42480 + (C15878 + C15879) * C93694) *
                C59272 +
            ((C30513 + C30514) * C42479 + (C30515 + C30516) * C42379 +
             (C19465 + C19464) * C42480 + (C19463 + C19462) * C93694) *
                C93718) *
               C93639 * C1979 -
           (((C19458 + C19459) * C93694 + (C19460 + C19461) * C42480 +
             (C19462 + C19463) * C42379 + (C19464 + C19465) * C42479) *
                C93718 +
            ((C15883 + C15882) * C93694 + (C15881 + C15880) * C42480 +
             (C15879 + C15878) * C42379 + (C15877 + C15876) * C42479) *
                C59272) *
               C93639 * C1980) *
              C1981 +
          ((((C17496 + C17497) * C42479 + (C17498 + C17499) * C42379 +
             (C17500 + C17501) * C42480 + (C17502 + C17503) * C93694) *
                C59272 +
            ((C78847 + C78848) * C42479 + (C78849 + C78850) * C42379 +
             (C91732 * C8521 + C93815 * C8524 + C91722 * C8522 +
              C93590 * C8525) *
                 C42480 +
             (C91732 * C8646 + C93815 * C8866 + C91722 * C8647 +
              C93590 * C8867) *
                 C93694) *
                C93718) *
               C93639 * C1980 -
           (((C78850 + C78849) * C93694 + (C78848 + C78847) * C42480 +
             (C32374 + C32373) * C42379 + (C32372 + C32371) * C42479) *
                C93718 +
            ((C17499 + C17498) * C93694 + (C17497 + C17496) * C42480 +
             (C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
                 C42379 +
             (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                 C42479) *
                C59272) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
              C42745 + C42745 + C93694 * C1079) *
                 C93815 +
             (C42778 + C42779) * C93590) *
                C59272 +
            ((C55081 + C55082) * C93815 + C57443 * C93590) * C93718) *
               C93639 * C1979 -
           (((C56213 + C56214) * C93590 + (C58670 + C58669) * C93815) * C93718 +
            ((C45171 + C45172) * C93590 +
             (C42742 * C808 + C43583 + C43583 + C93694 * C1080 + C42741 * C807 +
              C43584 + C43584 + C42379 * C1079) *
                 C93815) *
                C59272) *
               C93639 * C1980) *
              C1981 +
          ((((C45172 + C45171) * C93815 + (C45170 + C45169) * C93590) * C59272 +
            ((C56214 + C56213) * C93815 +
             (C42741 * C3411 + C47092 + C47092 + C42379 * C3711 +
              C42742 * C8522 + C47093 + C47093 + C93694 * C8986) *
                 C93590) *
                C93718) *
               C93639 * C1980 -
           (((C46136 + C46137) * C93590 + C57444 * C93815) * C93718 +
            ((C42781 + C42780) * C93590 + (C42779 + C42778) * C93815) *
                C59272) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C42479 +
             (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                 C42379 +
             (C65499 + C65500) * C42480 + (C65819 + C65820) * C93694) *
                C93815 +
            ((C59452 + C59453) * C42479 + (C59701 + C59702) * C42379 +
             C67441 * C42480 + C67845 * C93694) *
                C93590) *
               C93639 * C1979 -
           (((C65821 + C65822) * C93694 + (C65505 + C65506) * C42480 +
             C67846 * C42379 + C67444 * C42479) *
                C93590 +
            ((C65823 + C65824) * C93694 + (C65509 + C65510) * C42480 +
             (C65820 + C65819) * C42379 + (C65500 + C65499) * C42479) *
                C93815) *
               C93639 * C1980) *
              C1981 +
          (((C67441 * C42479 + C67845 * C42379 + (C65506 + C65505) * C42480 +
             (C65822 + C65821) * C93694) *
                C93815 +
            ((C61765 + C61764) * C42479 + (C62073 + C62072) * C42379 +
             (C59425 * C810 + C59272 * C958 + C59426 * C8522 + C93718 * C8751) *
                 C42480 +
             (C59425 * C892 + C59272 * C1148 + C59426 * C8647 +
              C93718 * C9093) *
                 C93694) *
                C93590) *
               C93639 * C1980 -
           (((C62072 + C62073) * C93694 + (C61764 + C61765) * C42480 +
             (C59704 + C59703) * C42379 + (C59457 + C59456) * C42479) *
                C93590 +
            (C67846 * C93694 + C67444 * C42480 + (C59702 + C59701) * C42379 +
             (C59453 + C59452) * C42479) *
                C93815) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C59425 +
             (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                 C59272 +
             (C30513 + C30514) * C59426 + (C30789 + C30790) * C93718) *
                C42379 +
            ((C15876 + C15877) * C59425 + (C16149 + C16150) * C59272 +
             (C19465 + C19464) * C59426 + (C19786 + C19785) * C93718) *
                C93694) *
               C93639 * C1979 -
           (((C19783 + C19784) * C93718 + (C19460 + C19461) * C59426 +
             (C16152 + C16151) * C59272 + (C15881 + C15880) * C59425) *
                C93694 +
            ((C19785 + C19786) * C93718 + (C19464 + C19465) * C59426 +
             (C16150 + C16149) * C59272 + (C15877 + C15876) * C59425) *
                C42379) *
               C93639 * C1980) *
              C1981 +
          ((((C17496 + C17497) * C59425 + (C17830 + C17831) * C59272 +
             (C78847 + C78848) * C59426 + (C79245 + C79246) * C93718) *
                C42379 +
            ((C17500 + C17501) * C59425 + (C17832 + C17833) * C59272 +
             (C91732 * C8521 + C93815 * C8524 + C91722 * C8522 +
              C93590 * C8525) *
                 C59426 +
             (C91732 * C8750 + C93815 * C9196 + C91722 * C8751 +
              C93590 * C9197) *
                 C93718) *
                C93694) *
               C93639 * C1980 -
           (((C79246 + C79245) * C93718 + (C78848 + C78847) * C59426 +
             (C17831 + C17830) * C59272 + (C17497 + C17496) * C59425) *
                C93694 +
            ((C32695 + C32694) * C93718 + (C32372 + C32371) * C59426 +
             (C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                 C59272 +
             (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                 C59425) *
                C42379) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C59425 +
             (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                 C59272 +
             (C54711 + C54712) * C59426 + (C55411 + C55412) * C93718) *
                C93815 +
            ((C42506 + C42507) * C59425 + (C43035 + C43036) * C59272 +
             C57025 * C59426 + C57847 * C93718) *
                C93590) *
               C93639 * C1979 -
           (((C56617 + C56618) * C93718 + (C55797 + C55798) * C59426 +
             (C45494 + C45495) * C59272 + (C44831 + C44832) * C59425) *
                C93590 +
            ((C59068 + C59067) * C93718 + (C58260 + C58259) * C59426 +
             (C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                 C59272 +
             (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                 C59425) *
                C93815) *
               C93639 * C1980) *
              C1981 +
          ((((C44832 + C44831) * C59425 + (C45495 + C45494) * C59272 +
             (C55798 + C55797) * C59426 + (C56618 + C56617) * C93718) *
                C93815 +
            ((C44828 + C44827) * C59425 + (C45493 + C45492) * C59272 +
             (C42479 * C3411 + C42379 * C3493 + C42480 * C8522 +
              C93694 * C8647) *
                 C59426 +
             (C42479 * C3567 + C42379 * C3925 + C42480 * C8751 +
              C93694 * C9307) *
                 C93718) *
                C93590) *
               C93639 * C1980 -
           (((C46450 + C46451) * C93718 + (C45818 + C45819) * C59426 +
             (C43038 + C43037) * C59272 + (C42511 + C42510) * C59425) *
                C93590 +
            (C57848 * C93718 + C57028 * C59426 + (C43036 + C43035) * C59272 +
             (C42507 + C42506) * C59425) *
                C93815) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
              C59950 + C59950 + C93718 * C1900) *
                 C42379 +
             (C66147 + C66148) * C93694) *
                C93815 +
            ((C59983 + C59984) * C42379 + C68243 * C93694) * C93590) *
               C93639 * C1979 -
           (((C66149 + C66150) * C93694 + C68244 * C42379) * C93590 +
            ((C66151 + C66152) * C93694 + (C66148 + C66147) * C42379) *
                C93815) *
               C93639 * C1980) *
              C1981 +
          (((C68243 * C42379 + (C66150 + C66149) * C93694) * C93815 +
            ((C62397 + C62396) * C42379 +
             (C59946 * C810 + C60667 + C60667 + C59272 * C1322 +
              C59947 * C8522 + C60668 + C60668 + C93718 * C9408) *
                 C93694) *
                C93590) *
               C93639 * C1980 -
           (((C62396 + C62397) * C93694 + (C59986 + C59985) * C42379) * C93590 +
            (C68244 * C93694 + (C59984 + C59983) * C42379) * C93815) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
              C14748 + C14748 + C93590 * C121) *
                 C59272 +
             (C30223 + C30224) * C93718) *
                C42379 +
            ((C15585 + C15586) * C59272 + C80807 * C93718) * C93694) *
               C2695 -
           (((C33030 + C33029) * C93718 + C80808 * C59272) * C93694 +
            ((C30226 + C30225) * C93718 + (C30224 + C30223) * C59272) *
                C42379) *
               C2696) *
              C1979 +
          (((C80807 * C59272 + (C33029 + C33030) * C93718) * C42379 +
            ((C19121 + C19120) * C59272 +
             (C14742 * C16395 + C16412 + C16412 + C93815 * C16399 +
              C14744 * C16396 + C16413 + C16413 + C93590 * C16400) *
                 C93718) *
                C93694) *
               C2696 -
           (((C19120 + C19121) * C93718 + (C15588 + C15587) * C59272) * C93694 +
            (C80808 * C93718 + (C15586 + C15585) * C59272) * C42379) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C91732 +
             (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                 C93815 +
             (C42506 + C42507) * C91722 + (C42508 + C42509) * C93590) *
                C59272 +
            ((C54711 + C54712) * C91732 + (C54713 + C54714) * C93815 +
             C57025 * C91722 + C57026 * C93590) *
                C93718) *
               C2695 -
           (((C54715 + C54716) * C93590 + (C54717 + C54718) * C91722 +
             (C54719 + C54720) * C93815 + (C54721 + C54722) * C91732) *
                C93718 +
            (C57027 * C93590 + C57028 * C91722 + (C54714 + C54713) * C93815 +
             (C54712 + C54711) * C91732) *
                C59272) *
               C2696) *
              C1979 +
          ((((C58259 + C58260) * C91732 + (C58261 + C58262) * C93815 +
             (C55798 + C55797) * C91722 + (C55796 + C55795) * C93590) *
                C59272 +
            ((C42479 * C5775 + C42379 * C5870 + C42480 * C16395 +
              C93694 * C16487) *
                 C91732 +
             (C42479 * C5778 + C42379 * C5873 + C42480 * C16397 +
              C93694 * C16489) *
                 C93815 +
             (C42479 * C5776 + C42379 * C5871 + C42480 * C16396 +
              C93694 * C16488) *
                 C91722 +
             (C42479 * C5779 + C42379 * C5874 + C42480 * C16398 +
              C93694 * C16490) *
                 C93590) *
                C93718) *
               C2696 -
           (((C55795 + C55796) * C93590 + (C55797 + C55798) * C91722 +
             (C58262 + C58261) * C93815 + (C58260 + C58259) * C91732) *
                C93718 +
            ((C44829 + C44830) * C93590 + (C44831 + C44832) * C91722 +
             (C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                 C93815 +
             (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                 C91732) *
                C59272) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C91732 +
             (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                 C93815 +
             (C59452 + C59453) * C91722 + (C59454 + C59455) * C93590) *
                C42379 +
            ((C65499 + C65500) * C91732 + (C65501 + C65502) * C93815 +
             C67441 * C91722 + C67442 * C93590) *
                C93694) *
               C2695 -
           (((C68647 + C68648) * C93590 + (C68649 + C68650) * C91722 +
             (C69849 + C69850) * C93815 + (C69851 + C69852) * C91732) *
                C93694 +
            ((C62738 + C62739) * C93590 + (C62740 + C62741) * C91722 +
             (C59426 * C1397 + C93718 * C1545 + C59425 * C1396 +
              C59272 * C1544) *
                 C93815 +
             (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
              C59272 * C1536) *
                 C91732) *
                C42379) *
               C2696) *
              C1979 +
          ((((C69852 + C69851) * C91732 + (C69850 + C69849) * C93815 +
             (C68650 + C68649) * C91722 + (C68648 + C68647) * C93590) *
                C42379 +
            ((C59425 * C8520 + C59272 * C8749 + C59426 * C16395 +
              C93718 * C16565) *
                 C91732 +
             (C59425 * C8523 + C59272 * C8752 + C59426 * C16397 +
              C93718 * C16567) *
                 C93815 +
             (C59425 * C8521 + C59272 * C8750 + C59426 * C16396 +
              C93718 * C16566) *
                 C91722 +
             (C59425 * C8524 + C59272 * C8753 + C59426 * C16398 +
              C93718 * C16568) *
                 C93590) *
                C93694) *
               C2696 -
           (((C65503 + C65504) * C93590 + (C65505 + C65506) * C91722 +
             (C65507 + C65508) * C93815 + (C65509 + C65510) * C91732) *
                C93694 +
            (C67443 * C93590 + C67444 * C91722 + (C65502 + C65501) * C93815 +
             (C65500 + C65499) * C91732) *
                C42379) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C42479 +
             (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                 C42379 +
             (C15876 + C15877) * C42480 + (C15878 + C15879) * C93694) *
                C59272 +
            ((C30513 + C30514) * C42479 + (C30515 + C30516) * C42379 +
             C81199 * C42480 + C81200 * C93694) *
                C93718) *
               C2695 -
           (((C33355 + C33354) * C93694 + (C33353 + C33352) * C42480 +
             (C30520 + C30519) * C42379 + (C30518 + C30517) * C42479) *
                C93718 +
            (C81201 * C93694 + C81202 * C42480 + (C30516 + C30515) * C42379 +
             (C30514 + C30513) * C42479) *
                C59272) *
               C2696) *
              C1979 +
          (((C81199 * C42479 + C81200 * C42379 + (C19461 + C19460) * C42480 +
             (C19459 + C19458) * C93694) *
                C59272 +
            ((C33352 + C33353) * C42479 + (C33354 + C33355) * C42379 +
             (C91732 * C16395 + C93815 * C16397 + C91722 * C16396 +
              C93590 * C16398) *
                 C42480 +
             (C91732 * C16487 + C93815 * C16643 + C91722 * C16488 +
              C93590 * C16644) *
                 C93694) *
                C93718) *
               C2696 -
           (((C19458 + C19459) * C93694 + (C19460 + C19461) * C42480 +
             C81201 * C42379 + C81202 * C42479) *
                C93718 +
            ((C15883 + C15882) * C93694 + (C15881 + C15880) * C42480 +
             (C15879 + C15878) * C42379 + (C15877 + C15876) * C42479) *
                C59272) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
              C42745 + C42745 + C93694 * C1079) *
                 C93815 +
             (C42778 + C42779) * C93590) *
                C59272 +
            ((C55081 + C55082) * C93815 + C57443 * C93590) * C93718) *
               C2695 -
           (((C55083 + C55084) * C93590 + (C55085 + C55086) * C93815) * C93718 +
            (C57444 * C93590 + (C55082 + C55081) * C93815) * C59272) *
               C2696) *
              C1979 +
          ((((C58669 + C58670) * C93815 + (C56214 + C56213) * C93590) * C59272 +
            ((C42741 * C5775 + C58661 + C58661 + C42379 * C6107 +
              C42742 * C16395 + C58662 + C58662 + C93694 * C16719) *
                 C93815 +
             (C42741 * C5776 + C58663 + C58663 + C42379 * C6108 +
              C42742 * C16396 + C58664 + C58664 + C93694 * C16720) *
                 C93590) *
                C93718) *
               C2696 -
           (((C56213 + C56214) * C93590 + (C58670 + C58669) * C93815) * C93718 +
            ((C45171 + C45172) * C93590 +
             (C42742 * C808 + C43583 + C43583 + C93694 * C1080 + C42741 * C807 +
              C43584 + C43584 + C42379 * C1079) *
                 C93815) *
                C59272) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C42479 +
             (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                 C42379 +
             (C65499 + C65500) * C42480 + (C65819 + C65820) * C93694) *
                C93815 +
            ((C59452 + C59453) * C42479 + (C59701 + C59702) * C42379 +
             C67441 * C42480 + C67845 * C93694) *
                C93590) *
               C2695 -
           (((C69047 + C69048) * C93694 + (C68649 + C68650) * C42480 +
             (C63067 + C63068) * C42379 + (C62740 + C62741) * C42479) *
                C93590 +
            ((C70247 + C70248) * C93694 + (C69851 + C69852) * C42480 +
             (C59426 * C1471 + C93718 * C1727 + C59425 * C1470 +
              C59272 * C1726) *
                 C42379 +
             (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
              C59272 * C1536) *
                 C42479) *
                C93815) *
               C2696) *
              C1979 +
          ((((C69852 + C69851) * C42479 + (C70248 + C70247) * C42379 +
             (C59425 * C8520 + C59272 * C8749 + C59426 * C16395 +
              C93718 * C16565) *
                 C42480 +
             (C59425 * C8645 + C59272 * C9091 + C59426 * C16487 +
              C93718 * C16807) *
                 C93694) *
                C93815 +
            ((C68650 + C68649) * C42479 + (C69048 + C69047) * C42379 +
             (C59425 * C8521 + C59272 * C8750 + C59426 * C16396 +
              C93718 * C16566) *
                 C42480 +
             (C59425 * C8646 + C59272 * C9092 + C59426 * C16488 +
              C93718 * C16808) *
                 C93694) *
                C93590) *
               C2696 -
           (((C65821 + C65822) * C93694 + (C65505 + C65506) * C42480 +
             C67846 * C42379 + C67444 * C42479) *
                C93590 +
            ((C65823 + C65824) * C93694 + (C65509 + C65510) * C42480 +
             (C65820 + C65819) * C42379 + (C65500 + C65499) * C42479) *
                C93815) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C59425 +
             (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                 C59272 +
             (C30513 + C30514) * C59426 + (C30789 + C30790) * C93718) *
                C42379 +
            ((C15876 + C15877) * C59425 + (C16149 + C16150) * C59272 +
             C81199 * C59426 + C81593 * C93718) *
                C93694) *
               C2695 -
           (((C33669 + C33668) * C93718 + (C33353 + C33352) * C59426 +
             C81594 * C59272 + C81202 * C59425) *
                C93694 +
            ((C30792 + C30791) * C93718 + (C30518 + C30517) * C59426 +
             (C30790 + C30789) * C59272 + (C30514 + C30513) * C59425) *
                C42379) *
               C2696) *
              C1979 +
          (((C81199 * C59425 + C81593 * C59272 + (C33352 + C33353) * C59426 +
             (C33668 + C33669) * C93718) *
                C42379 +
            ((C19461 + C19460) * C59425 + (C19784 + C19783) * C59272 +
             (C91732 * C16395 + C93815 * C16397 + C91722 * C16396 +
              C93590 * C16398) *
                 C59426 +
             (C91732 * C16565 + C93815 * C16883 + C91722 * C16566 +
              C93590 * C16884) *
                 C93718) *
                C93694) *
               C2696 -
           (((C19783 + C19784) * C93718 + (C19460 + C19461) * C59426 +
             (C16152 + C16151) * C59272 + (C15881 + C15880) * C59425) *
                C93694 +
            (C81594 * C93718 + C81202 * C59426 + (C16150 + C16149) * C59272 +
             (C15877 + C15876) * C59425) *
                C42379) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C59425 +
             (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                 C59272 +
             (C54711 + C54712) * C59426 + (C55411 + C55412) * C93718) *
                C93815 +
            ((C42506 + C42507) * C59425 + (C43035 + C43036) * C59272 +
             C57025 * C59426 + C57847 * C93718) *
                C93590) *
               C2695 -
           (((C55413 + C55414) * C93718 + (C54717 + C54718) * C59426 +
             C57848 * C59272 + C57028 * C59425) *
                C93590 +
            ((C55415 + C55416) * C93718 + (C54721 + C54722) * C59426 +
             (C55412 + C55411) * C59272 + (C54712 + C54711) * C59425) *
                C93815) *
               C2696) *
              C1979 +
          ((((C58259 + C58260) * C59425 + (C59067 + C59068) * C59272 +
             (C42479 * C5775 + C42379 * C5870 + C42480 * C16395 +
              C93694 * C16487) *
                 C59426 +
             (C42479 * C5950 + C42379 * C6350 + C42480 * C16565 +
              C93694 * C16959) *
                 C93718) *
                C93815 +
            ((C55798 + C55797) * C59425 + (C56618 + C56617) * C59272 +
             (C42479 * C5776 + C42379 * C5871 + C42480 * C16396 +
              C93694 * C16488) *
                 C59426 +
             (C42479 * C5951 + C42379 * C6351 + C42480 * C16566 +
              C93694 * C16960) *
                 C93718) *
                C93590) *
               C2696 -
           (((C56617 + C56618) * C93718 + (C55797 + C55798) * C59426 +
             (C45494 + C45495) * C59272 + (C44831 + C44832) * C59425) *
                C93590 +
            ((C59068 + C59067) * C93718 + (C58260 + C58259) * C59426 +
             (C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                 C59272 +
             (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                 C59425) *
                C93815) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
              C59950 + C59950 + C93718 * C1900) *
                 C42379 +
             (C66147 + C66148) * C93694) *
                C93815 +
            ((C59983 + C59984) * C42379 + C68243 * C93694) * C93590) *
               C2695 -
           (((C69449 + C69450) * C93694 + (C63400 + C63401) * C42379) * C93590 +
            ((C70651 + C70652) * C93694 +
             (C59947 * C1389 + C61444 + C61444 + C93718 * C1901 +
              C59946 * C1388 + C61445 + C61445 + C59272 * C1900) *
                 C42379) *
                C93815) *
               C2696) *
              C1979 +
          ((((C70652 + C70651) * C42379 +
             (C59946 * C8520 + C70643 + C70643 + C59272 * C9406 +
              C59947 * C16395 + C70644 + C70644 + C93718 * C17035) *
                 C93694) *
                C93815 +
            ((C69450 + C69449) * C42379 +
             (C59946 * C8521 + C70645 + C70645 + C59272 * C9407 +
              C59947 * C16396 + C70646 + C70646 + C93718 * C17036) *
                 C93694) *
                C93590) *
               C2696 -
           (((C66149 + C66150) * C93694 + C68244 * C42379) * C93590 +
            ((C66151 + C66152) * C93694 + (C66148 + C66147) * C42379) *
                C93815) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
             C14748 + C14748 + C93590 * C121) *
                C59272 +
            (C30223 + C30224) * C93718) *
               C42379 +
           ((C15585 + C15586) * C59272 + (C19123 + C19122) * C93718) * C93694) *
              C93639 * C800 -
          (((C19120 + C19121) * C93718 + (C15588 + C15587) * C59272) * C93694 +
           ((C19122 + C19123) * C93718 + (C15586 + C15585) * C59272) * C42379) *
              C93639 * C801 +
          ((C15591 * C59272 + (C19121 + C19120) * C93718) * C42379 +
           ((C15590 + C15589) * C59272 +
            (C14742 * C19095 + C19110 + C19110 + C93815 * C19099 +
             C14744 * C19096 + C19111 + C19111 + C93590 * C19100) *
                C93718) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
             C14748 + C14748 + C93590 * C121) *
                C59272 +
            (C30223 + C30224) * C93718) *
               C42379 +
           ((C15585 + C15586) * C59272 + (C19123 + C19122) * C93718) * C93694) *
              C93639 * C93625 * C97 -
          (((C14744 * C3411 + C18143 + C18143 + C93590 * C3419 +
             C14742 * C3410 + C18142 + C18142 + C93815 * C3418) *
                C93718 +
            (C17157 + C17156) * C59272) *
               C93694 +
           ((C32032 + C32031) * C93718 +
            (C14744 * C110 + C14757 + C14757 + C93590 * C122 + C14742 * C109 +
             C14758 + C14758 + C93815 * C121) *
                C59272) *
               C42379) *
              C93639 * C93625 * C98 +
          (((C14742 * C110 + C14759 + C14759 + C93815 * C122 + C14744 * C111 +
             C14760 + C14760 + C93590 * C123) *
                C59272 +
            (C14742 * C1386 + C28725 + C28725 + C93815 * C1402 +
             C14744 * C1385 + C28726 + C28726 + C93590 * C1401) *
                C93718) *
               C42379 +
           ((C14742 * C805 + C14761 + C14761 + C93815 * C821 + C14744 * C804 +
             C14762 + C14762 + C93590 * C820) *
                C59272 +
            (C14742 * C3411 + C75759 + C75759 + C93815 * C3419 +
             C14744 * C3412 + C75760 + C75760 + C93590 * C3420) *
                C93718) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
             C14748 + C14748 + C93590 * C121) *
                C59272 +
            (C30223 + C30224) * C93718) *
               C42379 +
           ((C15585 + C15586) * C59272 + (C19123 + C19122) * C93718) * C93694) *
              C1382 -
          (((C33030 + C33029) * C93718 + (C19122 + C19123) * C59272) * C93694 +
           ((C30226 + C30225) * C93718 + (C30224 + C30223) * C59272) * C42379) *
              C1383 +
          ((C30229 * C59272 + (C30228 + C30227) * C93718) * C42379 +
           ((C33029 + C33030) * C59272 +
            (C14742 * C25001 + C33023 + C33023 + C93815 * C25005 +
             C14744 * C33015 + C33024 + C33024 + C93590 * C33017) *
                C93718) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C91732 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93815 +
            (C42506 + C42507) * C91722 + (C42508 + C42509) * C93590) *
               C59272 +
           ((C54711 + C54712) * C91732 + (C54713 + C54714) * C93815 +
            C57025 * C91722 + C57026 * C93590) *
               C93718) *
              C93639 * C800 -
          (((C55795 + C55796) * C93590 + (C55797 + C55798) * C91722 +
            (C58262 + C58261) * C93815 + (C58260 + C58259) * C91732) *
               C93718 +
           ((C44829 + C44830) * C93590 + (C44831 + C44832) * C91722 +
            (C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                C93815 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C91732) *
               C59272) *
              C93639 * C801 +
          (((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
                C91732 +
            (C42479 * C816 + C42379 * C898 + C42480 * C4900 + C93694 * C5019) *
                C93815 +
            (C42479 * C809 + C42379 * C891 + C42480 * C4898 + C93694 * C5017) *
                C91722 +
            (C42479 * C817 + C42379 * C899 + C42480 * C4901 + C93694 * C5020) *
                C93590) *
               C59272 +
           ((C42479 * C8520 + C42379 * C8645 + C42480 * C19095 +
             C93694 * C19221) *
                C91732 +
            (C42479 * C8523 + C42379 * C8648 + C42480 * C19097 +
             C93694 * C19223) *
                C93815 +
            (C42479 * C8521 + C42379 * C8646 + C42480 * C19096 +
             C93694 * C19222) *
                C91722 +
            (C42479 * C8524 + C42379 * C8649 + C42480 * C19098 +
             C93694 * C19224) *
                C93590) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C91732 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93815 +
            (C42506 + C42507) * C91722 + (C42508 + C42509) * C93590) *
               C59272 +
           ((C54711 + C54712) * C91732 + (C54713 + C54714) * C93815 +
            C57025 * C91722 + C57026 * C93590) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C45816 + C45817) * C93590 + (C45818 + C45819) * C91722 +
            C57027 * C93815 + C57028 * C91732) *
               C93718 +
           ((C42513 + C42512) * C93590 + (C42511 + C42510) * C91722 +
            (C42509 + C42508) * C93815 + (C42507 + C42506) * C91732) *
               C59272) *
              C93639 * C93625 * C98 +
          ((C42518 * C91732 + C42519 * C93815 + (C42517 + C42516) * C91722 +
            (C42515 + C42514) * C93590) *
               C59272 +
           ((C45819 + C45818) * C91732 + (C45817 + C45816) * C93815 +
            (C42479 * C1385 + C42379 * C1467 + C42480 * C3412 +
             C93694 * C3494) *
                C91722 +
            (C42479 * C1393 + C42379 * C1475 + C42480 * C3416 +
             C93694 * C3498) *
                C93590) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C91732 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93815 +
            (C42506 + C42507) * C91722 + (C42508 + C42509) * C93590) *
               C59272 +
           ((C54711 + C54712) * C91732 + (C54713 + C54714) * C93815 +
            C57025 * C91722 + C57026 * C93590) *
               C93718) *
              C1382 -
          (((C54715 + C54716) * C93590 + (C54717 + C54718) * C91722 +
            (C54719 + C54720) * C93815 + (C54721 + C54722) * C91732) *
               C93718 +
           (C57027 * C93590 + C57028 * C91722 + (C54714 + C54713) * C93815 +
            (C54712 + C54711) * C91732) *
               C59272) *
              C1383 +
          (((C54722 + C54721) * C91732 + (C54720 + C54719) * C93815 +
            (C54718 + C54717) * C91722 + (C54716 + C54715) * C93590) *
               C59272 +
           ((C42479 * C10964 + C42379 * C11080 + C42480 * C25001 +
             C93694 * C25104) *
                C91732 +
            (C42479 * C10967 + C42379 * C11083 + C42480 * C25003 +
             C93694 * C25106) *
                C93815 +
            (C42479 * C10965 + C42379 * C11081 + C42480 * C33015 +
             C93694 * C33128) *
                C91722 +
            (C42479 * C10968 + C42379 * C11084 + C42480 * C33016 +
             C93694 * C33129) *
                C93590) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C91732 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93815 +
            (C59452 + C59453) * C91722 + (C59454 + C59455) * C93590) *
               C42379 +
           ((C65499 + C65500) * C91732 + (C65501 + C65502) * C93815 +
            C67441 * C91722 + C67442 * C93590) *
               C93694) *
              C93639 * C800 -
          (((C65503 + C65504) * C93590 + (C65505 + C65506) * C91722 +
            (C65507 + C65508) * C93815 + (C65509 + C65510) * C91732) *
               C93694 +
           (C67443 * C93590 + C67444 * C91722 + (C65502 + C65501) * C93815 +
            (C65500 + C65499) * C91732) *
               C42379) *
              C93639 * C801 +
          (((C65510 + C65509) * C91732 + (C65508 + C65507) * C93815 +
            (C65506 + C65505) * C91722 + (C65504 + C65503) * C93590) *
               C42379 +
           ((C59425 * C4897 + C59272 * C5096 + C59426 * C19095 +
             C93718 * C19323) *
                C91732 +
            (C59425 * C4900 + C59272 * C5099 + C59426 * C19097 +
             C93718 * C19325) *
                C93815 +
            (C59425 * C4898 + C59272 * C5097 + C59426 * C19096 +
             C93718 * C19324) *
                C91722 +
            (C59425 * C4901 + C59272 * C5100 + C59426 * C19098 +
             C93718 * C19326) *
                C93590) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C91732 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93815 +
            (C59452 + C59453) * C91722 + (C59454 + C59455) * C93590) *
               C42379 +
           ((C65499 + C65500) * C91732 + (C65501 + C65502) * C93815 +
            C67441 * C91722 + C67442 * C93590) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C61762 + C61763) * C93590 + (C61764 + C61765) * C91722 +
            C67443 * C93815 + C67444 * C91732) *
               C93694 +
           ((C59459 + C59458) * C93590 + (C59457 + C59456) * C91722 +
            (C59455 + C59454) * C93815 + (C59453 + C59452) * C91732) *
               C42379) *
              C93639 * C93625 * C98 +
          ((C59464 * C91732 + C59465 * C93815 + (C59463 + C59462) * C91722 +
            (C59461 + C59460) * C93590) *
               C42379 +
           ((C61765 + C61764) * C91732 + (C61763 + C61762) * C93815 +
            (C59425 * C804 + C59272 * C952 + C59426 * C3412 + C93718 * C3568) *
                C91722 +
            (C59425 * C812 + C59272 * C960 + C59426 * C3416 + C93718 * C3572) *
                C93590) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C91732 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93815 +
            (C59452 + C59453) * C91722 + (C59454 + C59455) * C93590) *
               C42379 +
           ((C65499 + C65500) * C91732 + (C65501 + C65502) * C93815 +
            C67441 * C91722 + C67442 * C93590) *
               C93694) *
              C1382 -
          (((C68647 + C68648) * C93590 + (C68649 + C68650) * C91722 +
            (C69849 + C69850) * C93815 + (C69851 + C69852) * C91732) *
               C93694 +
           ((C62738 + C62739) * C93590 + (C62740 + C62741) * C91722 +
            (C59426 * C1397 + C93718 * C1545 + C59425 * C1396 +
             C59272 * C1544) *
                C93815 +
            (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
             C59272 * C1536) *
                C91732) *
               C42379) *
              C1383 +
          (((C59425 * C1389 + C59272 * C1537 + C59426 * C10964 +
             C93718 * C11196) *
                C91732 +
            (C59425 * C1397 + C59272 * C1545 + C59426 * C10967 +
             C93718 * C11199) *
                C93815 +
            (C59425 * C1390 + C59272 * C1538 + C59426 * C10965 +
             C93718 * C11197) *
                C91722 +
            (C59425 * C1398 + C59272 * C1546 + C59426 * C10968 +
             C93718 * C11200) *
                C93590) *
               C42379 +
           ((C59425 * C5775 + C59272 * C5950 + C59426 * C25001 +
             C93718 * C25218) *
                C91732 +
            (C59425 * C5778 + C59272 * C5953 + C59426 * C25003 +
             C93718 * C25220) *
                C93815 +
            (C59425 * C5776 + C59272 * C5951 + C59426 * C33015 +
             C93718 * C33242) *
                C91722 +
            (C59425 * C5779 + C59272 * C5954 + C59426 * C33016 +
             C93718 * C33243) *
                C93590) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C42479 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C42379 +
            (C15876 + C15877) * C42480 + (C15878 + C15879) * C93694) *
               C59272 +
           ((C30513 + C30514) * C42479 + (C30515 + C30516) * C42379 +
            (C19465 + C19464) * C42480 + (C19463 + C19462) * C93694) *
               C93718) *
              C93639 * C800 -
          (((C19458 + C19459) * C93694 + (C19460 + C19461) * C42480 +
            (C19462 + C19463) * C42379 + (C19464 + C19465) * C42479) *
               C93718 +
           ((C15883 + C15882) * C93694 + (C15881 + C15880) * C42480 +
            (C15879 + C15878) * C42379 + (C15877 + C15876) * C42479) *
               C59272) *
              C93639 * C801 +
          ((C15888 * C42479 + C15889 * C42379 + (C15887 + C15886) * C42480 +
            (C15885 + C15884) * C93694) *
               C59272 +
           ((C19461 + C19460) * C42479 + (C19459 + C19458) * C42379 +
            (C91732 * C19095 + C93815 * C19097 + C91722 * C19096 +
             C93590 * C19098) *
                C42480 +
            (C91732 * C19221 + C93815 * C19439 + C91722 * C19222 +
             C93590 * C19440) *
                C93694) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C42479 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C42379 +
            (C15876 + C15877) * C42480 + (C15878 + C15879) * C93694) *
               C59272 +
           ((C30513 + C30514) * C42479 + (C30515 + C30516) * C42379 +
            (C19465 + C19464) * C42480 + (C19463 + C19462) * C93694) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C91722 * C3493 + C93590 * C3641 + C91732 * C3492 +
             C93815 * C3640) *
                C93694 +
            (C91722 * C3411 + C93590 * C3415 + C91732 * C3410 +
             C93815 * C3414) *
                C42480 +
            (C32374 + C32373) * C42379 + (C32372 + C32371) * C42479) *
               C93718 +
           ((C17499 + C17498) * C93694 + (C17497 + C17496) * C42480 +
            (C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
                C42379 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C42479) *
               C59272) *
              C93639 * C93625 * C98 +
          (((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
                C42479 +
            (C91732 * C191 + C93815 * C364 + C91722 * C192 + C93590 * C365) *
                C42379 +
            (C91732 * C805 + C93815 * C813 + C91722 * C804 + C93590 * C812) *
                C42480 +
            (C91732 * C887 + C93815 * C1019 + C91722 * C886 + C93590 * C1018) *
                C93694) *
               C59272 +
           ((C91732 * C1386 + C93815 * C1394 + C91722 * C1385 +
             C93590 * C1393) *
                C42479 +
            (C91732 * C1468 + C93815 * C1600 + C91722 * C1467 +
             C93590 * C1599) *
                C42379 +
            (C91732 * C3411 + C93815 * C3415 + C91722 * C3412 +
             C93590 * C3416) *
                C42480 +
            (C91732 * C3493 + C93815 * C3641 + C91722 * C3494 +
             C93590 * C3642) *
                C93694) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C42479 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C42379 +
            (C15876 + C15877) * C42480 + (C15878 + C15879) * C93694) *
               C59272 +
           ((C30513 + C30514) * C42479 + (C30515 + C30516) * C42379 +
            (C19465 + C19464) * C42480 + (C19463 + C19462) * C93694) *
               C93718) *
              C1382 -
          (((C33355 + C33354) * C93694 + (C33353 + C33352) * C42480 +
            (C30520 + C30519) * C42379 + (C30518 + C30517) * C42479) *
               C93718 +
           ((C19462 + C19463) * C93694 + (C19464 + C19465) * C42480 +
            (C30516 + C30515) * C42379 + (C30514 + C30513) * C42479) *
               C59272) *
              C1383 +
          ((C30525 * C42479 + C30526 * C42379 + (C33352 + C33353) * C42480 +
            (C33354 + C33355) * C93694) *
               C59272 +
           ((C30524 + C30523) * C42479 + (C30522 + C30521) * C42379 +
            (C91732 * C25001 + C93815 * C25003 + C91722 * C33015 +
             C93590 * C33016) *
                C42480 +
            (C91732 * C25104 + C93815 * C25296 + C91722 * C33128 +
             C93590 * C33342) *
                C93694) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
             C42745 + C42745 + C93694 * C1079) *
                C93815 +
            (C42778 + C42779) * C93590) *
               C59272 +
           ((C55081 + C55082) * C93815 + C57443 * C93590) * C93718) *
              C93639 * C800 -
          (((C56213 + C56214) * C93590 + (C58670 + C58669) * C93815) * C93718 +
           ((C45171 + C45172) * C93590 +
            (C42742 * C808 + C43583 + C43583 + C93694 * C1080 + C42741 * C807 +
             C43584 + C43584 + C42379 * C1079) *
                C93815) *
               C59272) *
              C93639 * C801 +
          (((C42741 * C808 + C43585 + C43585 + C42379 * C1080 + C42742 * C4897 +
             C43586 + C43586 + C93694 * C5325) *
                C93815 +
            (C42741 * C809 + C43587 + C43587 + C42379 * C1081 + C42742 * C4898 +
             C43588 + C43588 + C93694 * C5326) *
                C93590) *
               C59272 +
           ((C42741 * C8520 + C54061 + C54061 + C42379 * C8984 +
             C42742 * C19095 + C54062 + C54062 + C93694 * C19563) *
                C93815 +
            (C42741 * C8521 + C54063 + C54063 + C42379 * C8985 +
             C42742 * C19096 + C54064 + C54064 + C93694 * C19564) *
                C93590) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
             C42745 + C42745 + C93694 * C1079) *
                C93815 +
            (C42778 + C42779) * C93590) *
               C59272 +
           ((C55081 + C55082) * C93815 + C57443 * C93590) * C93718) *
              C93639 * C93625 * C97 -
          (((C46136 + C46137) * C93590 + C57444 * C93815) * C93718 +
           ((C42781 + C42780) * C93590 + (C42779 + C42778) * C93815) * C59272) *
              C93639 * C93625 * C98 +
          ((C42784 * C93815 + (C42783 + C42782) * C93590) * C59272 +
           ((C46137 + C46136) * C93815 +
            (C42741 * C1385 + C46126 + C46126 + C42379 * C1657 +
             C42742 * C3412 + C46127 + C46127 + C93694 * C3712) *
                C93590) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
             C42745 + C42745 + C93694 * C1079) *
                C93815 +
            (C42778 + C42779) * C93590) *
               C59272 +
           ((C55081 + C55082) * C93815 + C57443 * C93590) * C93718) *
              C1382 -
          (((C55083 + C55084) * C93590 + (C55085 + C55086) * C93815) * C93718 +
           (C57444 * C93590 + (C55082 + C55081) * C93815) * C59272) *
              C1383 +
          (((C55086 + C55085) * C93815 + (C55084 + C55083) * C93590) * C59272 +
           ((C42741 * C10964 + C55065 + C55065 + C42379 * C11389 +
             C42742 * C25001 + C55066 + C55066 + C93694 * C25408) *
                C93815 +
            (C42741 * C10965 + C55067 + C55067 + C42379 * C11390 +
             C42742 * C33015 + C55068 + C55068 + C93694 * C33453) *
                C93590) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C42479 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C42379 +
            (C65499 + C65500) * C42480 + (C65819 + C65820) * C93694) *
               C93815 +
           ((C59452 + C59453) * C42479 + (C59701 + C59702) * C42379 +
            C67441 * C42480 + C67845 * C93694) *
               C93590) *
              C93639 * C800 -
          (((C65821 + C65822) * C93694 + (C65505 + C65506) * C42480 +
            C67846 * C42379 + C67444 * C42479) *
               C93590 +
           ((C65823 + C65824) * C93694 + (C65509 + C65510) * C42480 +
            (C65820 + C65819) * C42379 + (C65500 + C65499) * C42479) *
               C93815) *
              C93639 * C801 +
          (((C65510 + C65509) * C42479 + (C65824 + C65823) * C42379 +
            (C59425 * C4897 + C59272 * C5096 + C59426 * C19095 +
             C93718 * C19323) *
                C42480 +
            (C59425 * C5016 + C59272 * C5414 + C59426 * C19221 +
             C93718 * C19669) *
                C93694) *
               C93815 +
           ((C65506 + C65505) * C42479 + (C65822 + C65821) * C42379 +
            (C59425 * C4898 + C59272 * C5097 + C59426 * C19096 +
             C93718 * C19324) *
                C42480 +
            (C59425 * C5017 + C59272 * C5415 + C59426 * C19222 +
             C93718 * C19670) *
                C93694) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C42479 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C42379 +
            (C65499 + C65500) * C42480 + (C65819 + C65820) * C93694) *
               C93815 +
           ((C59452 + C59453) * C42479 + (C59701 + C59702) * C42379 +
            C67441 * C42480 + C67845 * C93694) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C62072 + C62073) * C93694 + (C61764 + C61765) * C42480 +
            (C59704 + C59703) * C42379 + (C59457 + C59456) * C42479) *
               C93590 +
           (C67846 * C93694 + C67444 * C42480 + (C59702 + C59701) * C42379 +
            (C59453 + C59452) * C42479) *
               C93815) *
              C93639 * C93625 * C98 +
          ((C59464 * C42479 + C59707 * C42379 + (C61765 + C61764) * C42480 +
            (C62073 + C62072) * C93694) *
               C93815 +
           ((C59463 + C59462) * C42479 + (C59706 + C59705) * C42379 +
            (C59425 * C804 + C59272 * C952 + C59426 * C3412 + C93718 * C3568) *
                C42480 +
            (C59425 * C886 + C59272 * C1142 + C59426 * C3494 + C93718 * C3786) *
                C93694) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C42479 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C42379 +
            (C65499 + C65500) * C42480 + (C65819 + C65820) * C93694) *
               C93815 +
           ((C59452 + C59453) * C42479 + (C59701 + C59702) * C42379 +
            C67441 * C42480 + C67845 * C93694) *
               C93590) *
              C1382 -
          (((C69047 + C69048) * C93694 + (C68649 + C68650) * C42480 +
            (C63067 + C63068) * C42379 + (C62740 + C62741) * C42479) *
               C93590 +
           ((C70247 + C70248) * C93694 + (C69851 + C69852) * C42480 +
            (C59426 * C1471 + C93718 * C1727 + C59425 * C1470 +
             C59272 * C1726) *
                C42379 +
            (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
             C59272 * C1536) *
                C42479) *
               C93815) *
              C1383 +
          (((C59425 * C1389 + C59272 * C1537 + C59426 * C10964 +
             C93718 * C11196) *
                C42479 +
            (C59425 * C1471 + C59272 * C1727 + C59426 * C11080 +
             C93718 * C11495) *
                C42379 +
            (C59425 * C5775 + C59272 * C5950 + C59426 * C25001 +
             C93718 * C25218) *
                C42480 +
            (C59425 * C5870 + C59272 * C6196 + C59426 * C25104 +
             C93718 * C25517) *
                C93694) *
               C93815 +
           ((C59425 * C1390 + C59272 * C1538 + C59426 * C10965 +
             C93718 * C11197) *
                C42479 +
            (C59425 * C1472 + C59272 * C1728 + C59426 * C11081 +
             C93718 * C11496) *
                C42379 +
            (C59425 * C5776 + C59272 * C5951 + C59426 * C33015 +
             C93718 * C33242) *
                C42480 +
            (C59425 * C5871 + C59272 * C6197 + C59426 * C33128 +
             C93718 * C33563) *
                C93694) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C59425 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C59272 +
            (C30513 + C30514) * C59426 + (C30789 + C30790) * C93718) *
               C42379 +
           ((C15876 + C15877) * C59425 + (C16149 + C16150) * C59272 +
            (C19465 + C19464) * C59426 + (C19786 + C19785) * C93718) *
               C93694) *
              C93639 * C800 -
          (((C19783 + C19784) * C93718 + (C19460 + C19461) * C59426 +
            (C16152 + C16151) * C59272 + (C15881 + C15880) * C59425) *
               C93694 +
           ((C19785 + C19786) * C93718 + (C19464 + C19465) * C59426 +
            (C16150 + C16149) * C59272 + (C15877 + C15876) * C59425) *
               C42379) *
              C93639 * C801 +
          ((C15888 * C59425 + C16155 * C59272 + (C19461 + C19460) * C59426 +
            (C19784 + C19783) * C93718) *
               C42379 +
           ((C15887 + C15886) * C59425 + (C16154 + C16153) * C59272 +
            (C91732 * C19095 + C93815 * C19097 + C91722 * C19096 +
             C93590 * C19098) *
                C59426 +
            (C91732 * C19323 + C93815 * C19772 + C91722 * C19324 +
             C93590 * C19773) *
                C93718) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C59425 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C59272 +
            (C30513 + C30514) * C59426 + (C30789 + C30790) * C93718) *
               C42379 +
           ((C15876 + C15877) * C59425 + (C16149 + C16150) * C59272 +
            (C19465 + C19464) * C59426 + (C19786 + C19785) * C93718) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C91722 * C3567 + C93590 * C3855 + C91732 * C3566 +
             C93815 * C3854) *
                C93718 +
            (C91722 * C3411 + C93590 * C3415 + C91732 * C3410 +
             C93815 * C3414) *
                C59426 +
            (C17831 + C17830) * C59272 + (C17497 + C17496) * C59425) *
               C93694 +
           ((C32695 + C32694) * C93718 + (C32372 + C32371) * C59426 +
            (C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                C59272 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C59425) *
               C42379) *
              C93639 * C93625 * C98 +
          (((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
                C59425 +
            (C91732 * C278 + C93815 * C581 + C91722 * C279 + C93590 * C582) *
                C59272 +
            (C91732 * C1386 + C93815 * C1394 + C91722 * C1385 +
             C93590 * C1393) *
                C59426 +
            (C91732 * C1534 + C93815 * C1782 + C91722 * C1533 +
             C93590 * C1781) *
                C93718) *
               C42379 +
           ((C91732 * C805 + C93815 * C813 + C91722 * C804 + C93590 * C812) *
                C59425 +
            (C91732 * C953 + C93815 * C1201 + C91722 * C952 + C93590 * C1200) *
                C59272 +
            (C91732 * C3411 + C93815 * C3415 + C91722 * C3412 +
             C93590 * C3416) *
                C59426 +
            (C91732 * C3567 + C93815 * C3855 + C91722 * C3568 +
             C93590 * C3856) *
                C93718) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C59425 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C59272 +
            (C30513 + C30514) * C59426 + (C30789 + C30790) * C93718) *
               C42379 +
           ((C15876 + C15877) * C59425 + (C16149 + C16150) * C59272 +
            (C19465 + C19464) * C59426 + (C19786 + C19785) * C93718) *
               C93694) *
              C1382 -
          (((C33669 + C33668) * C93718 + (C33353 + C33352) * C59426 +
            (C19785 + C19786) * C59272 + (C19464 + C19465) * C59425) *
               C93694 +
           ((C30792 + C30791) * C93718 + (C30518 + C30517) * C59426 +
            (C30790 + C30789) * C59272 + (C30514 + C30513) * C59425) *
               C42379) *
              C1383 +
          ((C30525 * C59425 + C30795 * C59272 + (C30524 + C30523) * C59426 +
            (C30794 + C30793) * C93718) *
               C42379 +
           ((C33352 + C33353) * C59425 + (C33668 + C33669) * C59272 +
            (C91732 * C25001 + C93815 * C25003 + C91722 * C33015 +
             C93590 * C33016) *
                C59426 +
            (C91732 * C25218 + C93815 * C25593 + C91722 * C33242 +
             C93590 * C33662) *
                C93718) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C59425 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C59272 +
            (C54711 + C54712) * C59426 + (C55411 + C55412) * C93718) *
               C93815 +
           ((C42506 + C42507) * C59425 + (C43035 + C43036) * C59272 +
            C57025 * C59426 + C57847 * C93718) *
               C93590) *
              C93639 * C800 -
          (((C56617 + C56618) * C93718 + (C55797 + C55798) * C59426 +
            (C45494 + C45495) * C59272 + (C44831 + C44832) * C59425) *
               C93590 +
           ((C59068 + C59067) * C93718 + (C58260 + C58259) * C59426 +
            (C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                C59272 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C59425) *
               C93815) *
              C93639 * C801 +
          (((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
                C59425 +
            (C42479 * C956 + C42379 * C1262 + C42480 * C5096 + C93694 * C5598) *
                C59272 +
            (C42479 * C8520 + C42379 * C8645 + C42480 * C19095 +
             C93694 * C19221) *
                C59426 +
            (C42479 * C8749 + C42379 * C9305 + C42480 * C19323 +
             C93694 * C19884) *
                C93718) *
               C93815 +
           ((C42479 * C809 + C42379 * C891 + C42480 * C4898 + C93694 * C5017) *
                C59425 +
            (C42479 * C957 + C42379 * C1263 + C42480 * C5097 + C93694 * C5599) *
                C59272 +
            (C42479 * C8521 + C42379 * C8646 + C42480 * C19096 +
             C93694 * C19222) *
                C59426 +
            (C42479 * C8750 + C42379 * C9306 + C42480 * C19324 +
             C93694 * C19885) *
                C93718) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C59425 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C59272 +
            (C54711 + C54712) * C59426 + (C55411 + C55412) * C93718) *
               C93815 +
           ((C42506 + C42507) * C59425 + (C43035 + C43036) * C59272 +
            C57025 * C59426 + C57847 * C93718) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C46450 + C46451) * C93718 + (C45818 + C45819) * C59426 +
            (C43038 + C43037) * C59272 + (C42511 + C42510) * C59425) *
               C93590 +
           (C57848 * C93718 + C57028 * C59426 + (C43036 + C43035) * C59272 +
            (C42507 + C42506) * C59425) *
               C93815) *
              C93639 * C93625 * C98 +
          ((C42518 * C59425 + C43041 * C59272 + (C45819 + C45818) * C59426 +
            (C46451 + C46450) * C93718) *
               C93815 +
           ((C42517 + C42516) * C59425 + (C43040 + C43039) * C59272 +
            (C42479 * C1385 + C42379 * C1467 + C42480 * C3412 +
             C93694 * C3494) *
                C59426 +
            (C42479 * C1533 + C42379 * C1839 + C42480 * C3568 +
             C93694 * C3926) *
                C93718) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C59425 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C59272 +
            (C54711 + C54712) * C59426 + (C55411 + C55412) * C93718) *
               C93815 +
           ((C42506 + C42507) * C59425 + (C43035 + C43036) * C59272 +
            C57025 * C59426 + C57847 * C93718) *
               C93590) *
              C1382 -
          (((C55413 + C55414) * C93718 + (C54717 + C54718) * C59426 +
            C57848 * C59272 + C57028 * C59425) *
               C93590 +
           ((C55415 + C55416) * C93718 + (C54721 + C54722) * C59426 +
            (C55412 + C55411) * C59272 + (C54712 + C54711) * C59425) *
               C93815) *
              C1383 +
          (((C54722 + C54721) * C59425 + (C55416 + C55415) * C59272 +
            (C42479 * C10964 + C42379 * C11080 + C42480 * C25001 +
             C93694 * C25104) *
                C59426 +
            (C42479 * C11196 + C42379 * C11667 + C42480 * C25218 +
             C93694 * C25681) *
                C93718) *
               C93815 +
           ((C54718 + C54717) * C59425 + (C55414 + C55413) * C59272 +
            (C42479 * C10965 + C42379 * C11081 + C42480 * C33015 +
             C93694 * C33128) *
                C59426 +
            (C42479 * C11197 + C42379 * C11668 + C42480 * C33242 +
             C93694 * C33767) *
                C93718) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
             C59950 + C59950 + C93718 * C1900) *
                C42379 +
            (C66147 + C66148) * C93694) *
               C93815 +
           ((C59983 + C59984) * C42379 + C68243 * C93694) * C93590) *
              C93639 * C800 -
          (((C66149 + C66150) * C93694 + C68244 * C42379) * C93590 +
           ((C66151 + C66152) * C93694 + (C66148 + C66147) * C42379) * C93815) *
              C93639 * C801 +
          (((C66152 + C66151) * C42379 +
            (C59946 * C4897 + C66131 + C66131 + C59272 * C5675 +
             C59947 * C19095 + C66132 + C66132 + C93718 * C19984) *
                C93694) *
               C93815 +
           ((C66150 + C66149) * C42379 +
            (C59946 * C4898 + C66133 + C66133 + C59272 * C5676 +
             C59947 * C19096 + C66134 + C66134 + C93718 * C19985) *
                C93694) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
             C59950 + C59950 + C93718 * C1900) *
                C42379 +
            (C66147 + C66148) * C93694) *
               C93815 +
           ((C59983 + C59984) * C42379 + C68243 * C93694) * C93590) *
              C93639 * C93625 * C97 -
          (((C62396 + C62397) * C93694 + (C59986 + C59985) * C42379) * C93590 +
           (C68244 * C93694 + (C59984 + C59983) * C42379) * C93815) *
              C93639 * C93625 * C98 +
          ((C59989 * C42379 + (C62397 + C62396) * C93694) * C93815 +
           ((C59988 + C59987) * C42379 +
            (C59946 * C804 + C62386 + C62386 + C59272 * C1316 + C59947 * C3412 +
             C62387 + C62387 + C93718 * C3996) *
                C93694) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
             C59950 + C59950 + C93718 * C1900) *
                C42379 +
            (C66147 + C66148) * C93694) *
               C93815 +
           ((C59983 + C59984) * C42379 + C68243 * C93694) * C93590) *
              C1382 -
          (((C69449 + C69450) * C93694 + (C63400 + C63401) * C42379) * C93590 +
           ((C70651 + C70652) * C93694 +
            (C59947 * C1389 + C61444 + C61444 + C93718 * C1901 +
             C59946 * C1388 + C61445 + C61445 + C59272 * C1900) *
                C42379) *
               C93815) *
              C1383 +
          (((C59946 * C1389 + C61446 + C61446 + C59272 * C1901 +
             C59947 * C10964 + C61447 + C61447 + C93718 * C11756) *
                C42379 +
            (C59946 * C5775 + C67035 + C67035 + C59272 * C6427 +
             C59947 * C25001 + C67036 + C67036 + C93718 * C25775) *
                C93694) *
               C93815 +
           ((C59946 * C1390 + C61448 + C61448 + C59272 * C1902 +
             C59947 * C10965 + C61449 + C61449 + C93718 * C11757) *
                C42379 +
            (C59946 * C5776 + C67037 + C67037 + C59272 * C6428 +
             C59947 * C33015 + C67038 + C67038 + C93718 * C33869) *
                C93694) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
              C14748 + C14748 + C93590 * C121) *
                 C59272 +
             (C30223 + C30224) * C93718) *
                C42379 +
            ((C15585 + C15586) * C59272 + (C19123 + C19122) * C93718) *
                C93694) *
               C2695 -
           (((C33030 + C33029) * C93718 + (C19122 + C19123) * C59272) * C93694 +
            ((C30226 + C30225) * C93718 + (C30224 + C30223) * C59272) *
                C42379) *
               C2696) *
              C93625 * C1981 +
          ((((C32031 + C32032) * C59272 + (C32033 + C32034) * C93718) * C42379 +
            ((C78447 + C78448) * C59272 +
             (C14742 * C5776 + C31064 + C31064 + C93815 * C5782 +
              C14744 * C5777 + C31065 + C31065 + C93590 * C5783) *
                 C93718) *
                C93694) *
               C2696 -
           (((C78448 + C78447) * C93718 + (C17157 + C17156) * C59272) * C93694 +
            ((C32032 + C32031) * C93718 +
             (C14744 * C110 + C14757 + C14757 + C93590 * C122 + C14742 * C109 +
              C14758 + C14758 + C93815 * C121) *
                 C59272) *
                C42379) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C91732 +
             (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                 C93815 +
             (C42506 + C42507) * C91722 + (C42508 + C42509) * C93590) *
                C59272 +
            ((C54711 + C54712) * C91732 + (C54713 + C54714) * C93815 +
             C57025 * C91722 + C57026 * C93590) *
                C93718) *
               C2695 -
           (((C54715 + C54716) * C93590 + (C54717 + C54718) * C91722 +
             (C54719 + C54720) * C93815 + (C54721 + C54722) * C91732) *
                C93718 +
            (C57027 * C93590 + C57028 * C91722 + (C54714 + C54713) * C93815 +
             (C54712 + C54711) * C91732) *
                C59272) *
               C2696) *
              C93625 * C1981 +
          (((C57025 * C91732 + C57026 * C93815 + (C45819 + C45818) * C91722 +
             (C45817 + C45816) * C93590) *
                C59272 +
            ((C54718 + C54717) * C91732 + (C54716 + C54715) * C93815 +
             (C42479 * C1391 + C42379 * C1473 + C42480 * C5777 +
              C93694 * C5872) *
                 C91722 +
             (C42479 * C1399 + C42379 * C1481 + C42480 * C5780 +
              C93694 * C5875) *
                 C93590) *
                C93718) *
               C2696 -
           (((C45816 + C45817) * C93590 + (C45818 + C45819) * C91722 +
             C57027 * C93815 + C57028 * C91732) *
                C93718 +
            ((C42513 + C42512) * C93590 + (C42511 + C42510) * C91722 +
             (C42509 + C42508) * C93815 + (C42507 + C42506) * C91732) *
                C59272) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C91732 +
             (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                 C93815 +
             (C59452 + C59453) * C91722 + (C59454 + C59455) * C93590) *
                C42379 +
            ((C65499 + C65500) * C91732 + (C65501 + C65502) * C93815 +
             C67441 * C91722 + C67442 * C93590) *
                C93694) *
               C2695 -
           (((C68647 + C68648) * C93590 + (C68649 + C68650) * C91722 +
             (C69849 + C69850) * C93815 + (C69851 + C69852) * C91732) *
                C93694 +
            ((C62738 + C62739) * C93590 + (C62740 + C62741) * C91722 +
             (C59426 * C1397 + C93718 * C1545 + C59425 * C1396 +
              C59272 * C1544) *
                 C93815 +
             (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
              C59272 * C1536) *
                 C91732) *
                C42379) *
               C2696) *
              C93625 * C1981 +
          ((((C62741 + C62740) * C91732 + (C62739 + C62738) * C93815 +
             (C62737 + C62736) * C91722 + (C62735 + C62734) * C93590) *
                C42379 +
            ((C68650 + C68649) * C91732 + (C68648 + C68647) * C93815 +
             (C59425 * C3411 + C59272 * C3567 + C59426 * C5777 +
              C93718 * C5952) *
                 C91722 +
             (C59425 * C3415 + C59272 * C3571 + C59426 * C5780 +
              C93718 * C5955) *
                 C93590) *
                C93694) *
               C2696 -
           (((C61762 + C61763) * C93590 + (C61764 + C61765) * C91722 +
             C67443 * C93815 + C67444 * C91732) *
                C93694 +
            ((C59459 + C59458) * C93590 + (C59457 + C59456) * C91722 +
             (C59455 + C59454) * C93815 + (C59453 + C59452) * C91732) *
                C42379) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C42479 +
             (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                 C42379 +
             (C15876 + C15877) * C42480 + (C15878 + C15879) * C93694) *
                C59272 +
            ((C30513 + C30514) * C42479 + (C30515 + C30516) * C42379 +
             (C19465 + C19464) * C42480 + (C19463 + C19462) * C93694) *
                C93718) *
               C2695 -
           (((C33355 + C33354) * C93694 + (C33353 + C33352) * C42480 +
             (C30520 + C30519) * C42379 + (C30518 + C30517) * C42479) *
                C93718 +
            ((C19462 + C19463) * C93694 + (C19464 + C19465) * C42480 +
             (C30516 + C30515) * C42379 + (C30514 + C30513) * C42479) *
                C59272) *
               C2696) *
              C93625 * C1981 +
          ((((C32371 + C32372) * C42479 + (C32373 + C32374) * C42379 +
             (C78847 + C78848) * C42480 + (C78849 + C78850) * C93694) *
                C59272 +
            ((C32375 + C32376) * C42479 + (C32377 + C32378) * C42379 +
             (C91732 * C5776 + C93815 * C5779 + C91722 * C5777 +
              C93590 * C5780) *
                 C42480 +
             (C91732 * C5871 + C93815 * C6031 + C91722 * C5872 +
              C93590 * C6032) *
                 C93694) *
                C93718) *
               C2696 -
           (((C78850 + C78849) * C93694 + (C78848 + C78847) * C42480 +
             (C32374 + C32373) * C42379 + (C32372 + C32371) * C42479) *
                C93718 +
            ((C17499 + C17498) * C93694 + (C17497 + C17496) * C42480 +
             (C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
                 C42379 +
             (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                 C42479) *
                C59272) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
              C42745 + C42745 + C93694 * C1079) *
                 C93815 +
             (C42778 + C42779) * C93590) *
                C59272 +
            ((C55081 + C55082) * C93815 + C57443 * C93590) * C93718) *
               C2695 -
           (((C55083 + C55084) * C93590 + (C55085 + C55086) * C93815) * C93718 +
            (C57444 * C93590 + (C55082 + C55081) * C93815) * C59272) *
               C2696) *
              C93625 * C1981 +
          (((C57443 * C93815 + (C46137 + C46136) * C93590) * C59272 +
            ((C55084 + C55083) * C93815 +
             (C42741 * C1391 + C44297 + C44297 + C42379 * C1663 +
              C42742 * C5777 + C44298 + C44298 + C93694 * C6109) *
                 C93590) *
                C93718) *
               C2696 -
           (((C46136 + C46137) * C93590 + C57444 * C93815) * C93718 +
            ((C42781 + C42780) * C93590 + (C42779 + C42778) * C93815) *
                C59272) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C42479 +
             (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                 C42379 +
             (C65499 + C65500) * C42480 + (C65819 + C65820) * C93694) *
                C93815 +
            ((C59452 + C59453) * C42479 + (C59701 + C59702) * C42379 +
             C67441 * C42480 + C67845 * C93694) *
                C93590) *
               C2695 -
           (((C69047 + C69048) * C93694 + (C68649 + C68650) * C42480 +
             (C63067 + C63068) * C42379 + (C62740 + C62741) * C42479) *
                C93590 +
            ((C70247 + C70248) * C93694 + (C69851 + C69852) * C42480 +
             (C59426 * C1471 + C93718 * C1727 + C59425 * C1470 +
              C59272 * C1726) *
                 C42379 +
             (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
              C59272 * C1536) *
                 C42479) *
                C93815) *
               C2696) *
              C93625 * C1981 +
          ((((C62741 + C62740) * C42479 + (C63068 + C63067) * C42379 +
             (C68650 + C68649) * C42480 + (C69048 + C69047) * C93694) *
                C93815 +
            ((C62737 + C62736) * C42479 + (C63066 + C63065) * C42379 +
             (C59425 * C3411 + C59272 * C3567 + C59426 * C5777 +
              C93718 * C5952) *
                 C42480 +
             (C59425 * C3493 + C59272 * C3785 + C59426 * C5872 +
              C93718 * C6198) *
                 C93694) *
                C93590) *
               C2696 -
           (((C62072 + C62073) * C93694 + (C61764 + C61765) * C42480 +
             (C59704 + C59703) * C42379 + (C59457 + C59456) * C42479) *
                C93590 +
            (C67846 * C93694 + C67444 * C42480 + (C59702 + C59701) * C42379 +
             (C59453 + C59452) * C42479) *
                C93815) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C59425 +
             (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                 C59272 +
             (C30513 + C30514) * C59426 + (C30789 + C30790) * C93718) *
                C42379 +
            ((C15876 + C15877) * C59425 + (C16149 + C16150) * C59272 +
             (C19465 + C19464) * C59426 + (C19786 + C19785) * C93718) *
                C93694) *
               C2695 -
           (((C33669 + C33668) * C93718 + (C33353 + C33352) * C59426 +
             (C19785 + C19786) * C59272 + (C19464 + C19465) * C59425) *
                C93694 +
            ((C30792 + C30791) * C93718 + (C30518 + C30517) * C59426 +
             (C30790 + C30789) * C59272 + (C30514 + C30513) * C59425) *
                C42379) *
               C2696) *
              C93625 * C1981 +
          ((((C32371 + C32372) * C59425 + (C32694 + C32695) * C59272 +
             (C32375 + C32376) * C59426 + (C32696 + C32697) * C93718) *
                C42379 +
            ((C78847 + C78848) * C59425 + (C79245 + C79246) * C59272 +
             (C91732 * C5776 + C93815 * C5779 + C91722 * C5777 +
              C93590 * C5780) *
                 C59426 +
             (C91732 * C5951 + C93815 * C6274 + C91722 * C5952 +
              C93590 * C6275) *
                 C93718) *
                C93694) *
               C2696 -
           (((C79246 + C79245) * C93718 + (C78848 + C78847) * C59426 +
             (C17831 + C17830) * C59272 + (C17497 + C17496) * C59425) *
                C93694 +
            ((C32695 + C32694) * C93718 + (C32372 + C32371) * C59426 +
             (C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                 C59272 +
             (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                 C59425) *
                C42379) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C59425 +
             (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                 C59272 +
             (C54711 + C54712) * C59426 + (C55411 + C55412) * C93718) *
                C93815 +
            ((C42506 + C42507) * C59425 + (C43035 + C43036) * C59272 +
             C57025 * C59426 + C57847 * C93718) *
                C93590) *
               C2695 -
           (((C55413 + C55414) * C93718 + (C54717 + C54718) * C59426 +
             C57848 * C59272 + C57028 * C59425) *
                C93590 +
            ((C55415 + C55416) * C93718 + (C54721 + C54722) * C59426 +
             (C55412 + C55411) * C59272 + (C54712 + C54711) * C59425) *
                C93815) *
               C2696) *
              C93625 * C1981 +
          (((C57025 * C59425 + C57847 * C59272 + (C54718 + C54717) * C59426 +
             (C55414 + C55413) * C93718) *
                C93815 +
            ((C45819 + C45818) * C59425 + (C46451 + C46450) * C59272 +
             (C42479 * C1391 + C42379 * C1473 + C42480 * C5777 +
              C93694 * C5872) *
                 C59426 +
             (C42479 * C1539 + C42379 * C1845 + C42480 * C5952 +
              C93694 * C6352) *
                 C93718) *
                C93590) *
               C2696 -
           (((C46450 + C46451) * C93718 + (C45818 + C45819) * C59426 +
             (C43038 + C43037) * C59272 + (C42511 + C42510) * C59425) *
                C93590 +
            (C57848 * C93718 + C57028 * C59426 + (C43036 + C43035) * C59272 +
             (C42507 + C42506) * C59425) *
                C93815) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
              C59950 + C59950 + C93718 * C1900) *
                 C42379 +
             (C66147 + C66148) * C93694) *
                C93815 +
            ((C59983 + C59984) * C42379 + C68243 * C93694) * C93590) *
               C2695 -
           (((C69449 + C69450) * C93694 + (C63400 + C63401) * C42379) * C93590 +
            ((C70651 + C70652) * C93694 +
             (C59947 * C1389 + C61444 + C61444 + C93718 * C1901 +
              C59946 * C1388 + C61445 + C61445 + C59272 * C1900) *
                 C42379) *
                C93815) *
               C2696) *
              C93625 * C1981 +
          ((((C63401 + C63400) * C42379 + (C69450 + C69449) * C93694) * C93815 +
            ((C63399 + C63398) * C42379 +
             (C59946 * C3411 + C64297 + C64297 + C59272 * C3995 +
              C59947 * C5777 + C64298 + C64298 + C93718 * C6429) *
                 C93694) *
                C93590) *
               C2696 -
           (((C62396 + C62397) * C93694 + (C59986 + C59985) * C42379) * C93590 +
            (C68244 * C93694 + (C59984 + C59983) * C42379) * C93815) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
             C14748 + C14748 + C93590 * C121) *
                C59272 +
            (C30223 + C30224) * C93718) *
               C42379 +
           ((C15585 + C15586) * C59272 + (C19123 + C19122) * C93718) * C93694) *
              C93639 * C93625 * C97 -
          (((C14744 * C3411 + C18143 + C18143 + C93590 * C3419 +
             C14742 * C3410 + C18142 + C18142 + C93815 * C3418) *
                C93718 +
            (C17157 + C17156) * C59272) *
               C93694 +
           ((C32032 + C32031) * C93718 +
            (C14744 * C110 + C14757 + C14757 + C93590 * C122 + C14742 * C109 +
             C14758 + C14758 + C93815 * C121) *
                C59272) *
               C42379) *
              C93639 * C93625 * C98 +
          (((C14742 * C110 + C14759 + C14759 + C93815 * C122 + C14744 * C111 +
             C14760 + C14760 + C93590 * C123) *
                C59272 +
            (C14742 * C1386 + C28725 + C28725 + C93815 * C1402 +
             C14744 * C1385 + C28726 + C28726 + C93590 * C1401) *
                C93718) *
               C42379 +
           ((C14742 * C805 + C14761 + C14761 + C93815 * C821 + C14744 * C804 +
             C14762 + C14762 + C93590 * C820) *
                C59272 +
            (C14742 * C3411 + C75759 + C75759 + C93815 * C3419 +
             C14744 * C3412 + C75760 + C75760 + C93590 * C3420) *
                C93718) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
             C14748 + C14748 + C93590 * C121) *
                C59272 +
            (C30223 + C30224) * C93718) *
               C42379 +
           ((C15585 + C15586) * C59272 + (C19123 + C19122) * C93718) * C93694) *
              C93639 * C800 -
          (((C19120 + C19121) * C93718 + (C15588 + C15587) * C59272) * C93694 +
           ((C19122 + C19123) * C93718 + (C15586 + C15585) * C59272) * C42379) *
              C93639 * C801 +
          ((C15591 * C59272 + (C19121 + C19120) * C93718) * C42379 +
           ((C15590 + C15589) * C59272 +
            (C14742 * C19095 + C19110 + C19110 + C93815 * C19099 +
             C14744 * C19096 + C19111 + C19111 + C93590 * C19100) *
                C93718) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C91732 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93815 +
            (C42506 + C42507) * C91722 + (C42508 + C42509) * C93590) *
               C59272 +
           ((C54711 + C54712) * C91732 + (C54713 + C54714) * C93815 +
            C57025 * C91722 + C57026 * C93590) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C45816 + C45817) * C93590 + (C45818 + C45819) * C91722 +
            C57027 * C93815 + C57028 * C91732) *
               C93718 +
           ((C42513 + C42512) * C93590 + (C42511 + C42510) * C91722 +
            (C42509 + C42508) * C93815 + (C42507 + C42506) * C91732) *
               C59272) *
              C93639 * C93625 * C98 +
          ((C42518 * C91732 + C42519 * C93815 + (C42517 + C42516) * C91722 +
            (C42515 + C42514) * C93590) *
               C59272 +
           ((C45819 + C45818) * C91732 + (C45817 + C45816) * C93815 +
            (C42479 * C1385 + C42379 * C1467 + C42480 * C3412 +
             C93694 * C3494) *
                C91722 +
            (C42479 * C1393 + C42379 * C1475 + C42480 * C3416 +
             C93694 * C3498) *
                C93590) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C91732 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93815 +
            (C42506 + C42507) * C91722 + (C42508 + C42509) * C93590) *
               C59272 +
           ((C54711 + C54712) * C91732 + (C54713 + C54714) * C93815 +
            C57025 * C91722 + C57026 * C93590) *
               C93718) *
              C93639 * C800 -
          (((C55795 + C55796) * C93590 + (C55797 + C55798) * C91722 +
            (C58262 + C58261) * C93815 + (C58260 + C58259) * C91732) *
               C93718 +
           ((C44829 + C44830) * C93590 + (C44831 + C44832) * C91722 +
            (C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                C93815 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C91732) *
               C59272) *
              C93639 * C801 +
          (((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
                C91732 +
            (C42479 * C816 + C42379 * C898 + C42480 * C4900 + C93694 * C5019) *
                C93815 +
            (C42479 * C809 + C42379 * C891 + C42480 * C4898 + C93694 * C5017) *
                C91722 +
            (C42479 * C817 + C42379 * C899 + C42480 * C4901 + C93694 * C5020) *
                C93590) *
               C59272 +
           ((C42479 * C8520 + C42379 * C8645 + C42480 * C19095 +
             C93694 * C19221) *
                C91732 +
            (C42479 * C8523 + C42379 * C8648 + C42480 * C19097 +
             C93694 * C19223) *
                C93815 +
            (C42479 * C8521 + C42379 * C8646 + C42480 * C19096 +
             C93694 * C19222) *
                C91722 +
            (C42479 * C8524 + C42379 * C8649 + C42480 * C19098 +
             C93694 * C19224) *
                C93590) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C91732 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93815 +
            (C59452 + C59453) * C91722 + (C59454 + C59455) * C93590) *
               C42379 +
           ((C65499 + C65500) * C91732 + (C65501 + C65502) * C93815 +
            C67441 * C91722 + C67442 * C93590) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C61762 + C61763) * C93590 + (C61764 + C61765) * C91722 +
            C67443 * C93815 + C67444 * C91732) *
               C93694 +
           ((C59459 + C59458) * C93590 + (C59457 + C59456) * C91722 +
            (C59455 + C59454) * C93815 + (C59453 + C59452) * C91732) *
               C42379) *
              C93639 * C93625 * C98 +
          ((C59464 * C91732 + C59465 * C93815 + (C59463 + C59462) * C91722 +
            (C59461 + C59460) * C93590) *
               C42379 +
           ((C61765 + C61764) * C91732 + (C61763 + C61762) * C93815 +
            (C59425 * C804 + C59272 * C952 + C59426 * C3412 + C93718 * C3568) *
                C91722 +
            (C59425 * C812 + C59272 * C960 + C59426 * C3416 + C93718 * C3572) *
                C93590) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C91732 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93815 +
            (C59452 + C59453) * C91722 + (C59454 + C59455) * C93590) *
               C42379 +
           ((C65499 + C65500) * C91732 + (C65501 + C65502) * C93815 +
            C67441 * C91722 + C67442 * C93590) *
               C93694) *
              C93639 * C800 -
          (((C65503 + C65504) * C93590 + (C65505 + C65506) * C91722 +
            (C65507 + C65508) * C93815 + (C65509 + C65510) * C91732) *
               C93694 +
           (C67443 * C93590 + C67444 * C91722 + (C65502 + C65501) * C93815 +
            (C65500 + C65499) * C91732) *
               C42379) *
              C93639 * C801 +
          (((C65510 + C65509) * C91732 + (C65508 + C65507) * C93815 +
            (C65506 + C65505) * C91722 + (C65504 + C65503) * C93590) *
               C42379 +
           ((C59425 * C4897 + C59272 * C5096 + C59426 * C19095 +
             C93718 * C19323) *
                C91732 +
            (C59425 * C4900 + C59272 * C5099 + C59426 * C19097 +
             C93718 * C19325) *
                C93815 +
            (C59425 * C4898 + C59272 * C5097 + C59426 * C19096 +
             C93718 * C19324) *
                C91722 +
            (C59425 * C4901 + C59272 * C5100 + C59426 * C19098 +
             C93718 * C19326) *
                C93590) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C42479 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C42379 +
            (C15876 + C15877) * C42480 + (C15878 + C15879) * C93694) *
               C59272 +
           ((C30513 + C30514) * C42479 + (C30515 + C30516) * C42379 +
            (C19465 + C19464) * C42480 + (C19463 + C19462) * C93694) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C91722 * C3493 + C93590 * C3641 + C91732 * C3492 +
             C93815 * C3640) *
                C93694 +
            (C91722 * C3411 + C93590 * C3415 + C91732 * C3410 +
             C93815 * C3414) *
                C42480 +
            (C32374 + C32373) * C42379 + (C32372 + C32371) * C42479) *
               C93718 +
           ((C17499 + C17498) * C93694 + (C17497 + C17496) * C42480 +
            (C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
                C42379 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C42479) *
               C59272) *
              C93639 * C93625 * C98 +
          (((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
                C42479 +
            (C91732 * C191 + C93815 * C364 + C91722 * C192 + C93590 * C365) *
                C42379 +
            (C91732 * C805 + C93815 * C813 + C91722 * C804 + C93590 * C812) *
                C42480 +
            (C91732 * C887 + C93815 * C1019 + C91722 * C886 + C93590 * C1018) *
                C93694) *
               C59272 +
           ((C91732 * C1386 + C93815 * C1394 + C91722 * C1385 +
             C93590 * C1393) *
                C42479 +
            (C91732 * C1468 + C93815 * C1600 + C91722 * C1467 +
             C93590 * C1599) *
                C42379 +
            (C91732 * C3411 + C93815 * C3415 + C91722 * C3412 +
             C93590 * C3416) *
                C42480 +
            (C91732 * C3493 + C93815 * C3641 + C91722 * C3494 +
             C93590 * C3642) *
                C93694) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C42479 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C42379 +
            (C15876 + C15877) * C42480 + (C15878 + C15879) * C93694) *
               C59272 +
           ((C30513 + C30514) * C42479 + (C30515 + C30516) * C42379 +
            (C19465 + C19464) * C42480 + (C19463 + C19462) * C93694) *
               C93718) *
              C93639 * C800 -
          (((C19458 + C19459) * C93694 + (C19460 + C19461) * C42480 +
            (C19462 + C19463) * C42379 + (C19464 + C19465) * C42479) *
               C93718 +
           ((C15883 + C15882) * C93694 + (C15881 + C15880) * C42480 +
            (C15879 + C15878) * C42379 + (C15877 + C15876) * C42479) *
               C59272) *
              C93639 * C801 +
          ((C15888 * C42479 + C15889 * C42379 + (C15887 + C15886) * C42480 +
            (C15885 + C15884) * C93694) *
               C59272 +
           ((C19461 + C19460) * C42479 + (C19459 + C19458) * C42379 +
            (C91732 * C19095 + C93815 * C19097 + C91722 * C19096 +
             C93590 * C19098) *
                C42480 +
            (C91732 * C19221 + C93815 * C19439 + C91722 * C19222 +
             C93590 * C19440) *
                C93694) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
             C42745 + C42745 + C93694 * C1079) *
                C93815 +
            (C42778 + C42779) * C93590) *
               C59272 +
           ((C55081 + C55082) * C93815 + C57443 * C93590) * C93718) *
              C93639 * C93625 * C97 -
          (((C46136 + C46137) * C93590 + C57444 * C93815) * C93718 +
           ((C42781 + C42780) * C93590 + (C42779 + C42778) * C93815) * C59272) *
              C93639 * C93625 * C98 +
          ((C42784 * C93815 + (C42783 + C42782) * C93590) * C59272 +
           ((C46137 + C46136) * C93815 +
            (C42741 * C1385 + C46126 + C46126 + C42379 * C1657 +
             C42742 * C3412 + C46127 + C46127 + C93694 * C3712) *
                C93590) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
             C42745 + C42745 + C93694 * C1079) *
                C93815 +
            (C42778 + C42779) * C93590) *
               C59272 +
           ((C55081 + C55082) * C93815 + C57443 * C93590) * C93718) *
              C93639 * C800 -
          (((C56213 + C56214) * C93590 + (C58670 + C58669) * C93815) * C93718 +
           ((C45171 + C45172) * C93590 +
            (C42742 * C808 + C43583 + C43583 + C93694 * C1080 + C42741 * C807 +
             C43584 + C43584 + C42379 * C1079) *
                C93815) *
               C59272) *
              C93639 * C801 +
          (((C42741 * C808 + C43585 + C43585 + C42379 * C1080 + C42742 * C4897 +
             C43586 + C43586 + C93694 * C5325) *
                C93815 +
            (C42741 * C809 + C43587 + C43587 + C42379 * C1081 + C42742 * C4898 +
             C43588 + C43588 + C93694 * C5326) *
                C93590) *
               C59272 +
           ((C42741 * C8520 + C54061 + C54061 + C42379 * C8984 +
             C42742 * C19095 + C54062 + C54062 + C93694 * C19563) *
                C93815 +
            (C42741 * C8521 + C54063 + C54063 + C42379 * C8985 +
             C42742 * C19096 + C54064 + C54064 + C93694 * C19564) *
                C93590) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C42479 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C42379 +
            (C65499 + C65500) * C42480 + (C65819 + C65820) * C93694) *
               C93815 +
           ((C59452 + C59453) * C42479 + (C59701 + C59702) * C42379 +
            C67441 * C42480 + C67845 * C93694) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C62072 + C62073) * C93694 + (C61764 + C61765) * C42480 +
            (C59704 + C59703) * C42379 + (C59457 + C59456) * C42479) *
               C93590 +
           (C67846 * C93694 + C67444 * C42480 + (C59702 + C59701) * C42379 +
            (C59453 + C59452) * C42479) *
               C93815) *
              C93639 * C93625 * C98 +
          ((C59464 * C42479 + C59707 * C42379 + (C61765 + C61764) * C42480 +
            (C62073 + C62072) * C93694) *
               C93815 +
           ((C59463 + C59462) * C42479 + (C59706 + C59705) * C42379 +
            (C59425 * C804 + C59272 * C952 + C59426 * C3412 + C93718 * C3568) *
                C42480 +
            (C59425 * C886 + C59272 * C1142 + C59426 * C3494 + C93718 * C3786) *
                C93694) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C42479 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C42379 +
            (C65499 + C65500) * C42480 + (C65819 + C65820) * C93694) *
               C93815 +
           ((C59452 + C59453) * C42479 + (C59701 + C59702) * C42379 +
            C67441 * C42480 + C67845 * C93694) *
               C93590) *
              C93639 * C800 -
          (((C65821 + C65822) * C93694 + (C65505 + C65506) * C42480 +
            C67846 * C42379 + C67444 * C42479) *
               C93590 +
           ((C65823 + C65824) * C93694 + (C65509 + C65510) * C42480 +
            (C65820 + C65819) * C42379 + (C65500 + C65499) * C42479) *
               C93815) *
              C93639 * C801 +
          (((C65510 + C65509) * C42479 + (C65824 + C65823) * C42379 +
            (C59425 * C4897 + C59272 * C5096 + C59426 * C19095 +
             C93718 * C19323) *
                C42480 +
            (C59425 * C5016 + C59272 * C5414 + C59426 * C19221 +
             C93718 * C19669) *
                C93694) *
               C93815 +
           ((C65506 + C65505) * C42479 + (C65822 + C65821) * C42379 +
            (C59425 * C4898 + C59272 * C5097 + C59426 * C19096 +
             C93718 * C19324) *
                C42480 +
            (C59425 * C5017 + C59272 * C5415 + C59426 * C19222 +
             C93718 * C19670) *
                C93694) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C59425 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C59272 +
            (C30513 + C30514) * C59426 + (C30789 + C30790) * C93718) *
               C42379 +
           ((C15876 + C15877) * C59425 + (C16149 + C16150) * C59272 +
            (C19465 + C19464) * C59426 + (C19786 + C19785) * C93718) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C91722 * C3567 + C93590 * C3855 + C91732 * C3566 +
             C93815 * C3854) *
                C93718 +
            (C91722 * C3411 + C93590 * C3415 + C91732 * C3410 +
             C93815 * C3414) *
                C59426 +
            (C17831 + C17830) * C59272 + (C17497 + C17496) * C59425) *
               C93694 +
           ((C32695 + C32694) * C93718 + (C32372 + C32371) * C59426 +
            (C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                C59272 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C59425) *
               C42379) *
              C93639 * C93625 * C98 +
          (((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
                C59425 +
            (C91732 * C278 + C93815 * C581 + C91722 * C279 + C93590 * C582) *
                C59272 +
            (C91732 * C1386 + C93815 * C1394 + C91722 * C1385 +
             C93590 * C1393) *
                C59426 +
            (C91732 * C1534 + C93815 * C1782 + C91722 * C1533 +
             C93590 * C1781) *
                C93718) *
               C42379 +
           ((C91732 * C805 + C93815 * C813 + C91722 * C804 + C93590 * C812) *
                C59425 +
            (C91732 * C953 + C93815 * C1201 + C91722 * C952 + C93590 * C1200) *
                C59272 +
            (C91732 * C3411 + C93815 * C3415 + C91722 * C3412 +
             C93590 * C3416) *
                C59426 +
            (C91732 * C3567 + C93815 * C3855 + C91722 * C3568 +
             C93590 * C3856) *
                C93718) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C59425 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C59272 +
            (C30513 + C30514) * C59426 + (C30789 + C30790) * C93718) *
               C42379 +
           ((C15876 + C15877) * C59425 + (C16149 + C16150) * C59272 +
            (C19465 + C19464) * C59426 + (C19786 + C19785) * C93718) *
               C93694) *
              C93639 * C800 -
          (((C19783 + C19784) * C93718 + (C19460 + C19461) * C59426 +
            (C16152 + C16151) * C59272 + (C15881 + C15880) * C59425) *
               C93694 +
           ((C19785 + C19786) * C93718 + (C19464 + C19465) * C59426 +
            (C16150 + C16149) * C59272 + (C15877 + C15876) * C59425) *
               C42379) *
              C93639 * C801 +
          ((C15888 * C59425 + C16155 * C59272 + (C19461 + C19460) * C59426 +
            (C19784 + C19783) * C93718) *
               C42379 +
           ((C15887 + C15886) * C59425 + (C16154 + C16153) * C59272 +
            (C91732 * C19095 + C93815 * C19097 + C91722 * C19096 +
             C93590 * C19098) *
                C59426 +
            (C91732 * C19323 + C93815 * C19772 + C91722 * C19324 +
             C93590 * C19773) *
                C93718) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C59425 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C59272 +
            (C54711 + C54712) * C59426 + (C55411 + C55412) * C93718) *
               C93815 +
           ((C42506 + C42507) * C59425 + (C43035 + C43036) * C59272 +
            C57025 * C59426 + C57847 * C93718) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C46450 + C46451) * C93718 + (C45818 + C45819) * C59426 +
            (C43038 + C43037) * C59272 + (C42511 + C42510) * C59425) *
               C93590 +
           (C57848 * C93718 + C57028 * C59426 + (C43036 + C43035) * C59272 +
            (C42507 + C42506) * C59425) *
               C93815) *
              C93639 * C93625 * C98 +
          ((C42518 * C59425 + C43041 * C59272 + (C45819 + C45818) * C59426 +
            (C46451 + C46450) * C93718) *
               C93815 +
           ((C42517 + C42516) * C59425 + (C43040 + C43039) * C59272 +
            (C42479 * C1385 + C42379 * C1467 + C42480 * C3412 +
             C93694 * C3494) *
                C59426 +
            (C42479 * C1533 + C42379 * C1839 + C42480 * C3568 +
             C93694 * C3926) *
                C93718) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C59425 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C59272 +
            (C54711 + C54712) * C59426 + (C55411 + C55412) * C93718) *
               C93815 +
           ((C42506 + C42507) * C59425 + (C43035 + C43036) * C59272 +
            C57025 * C59426 + C57847 * C93718) *
               C93590) *
              C93639 * C800 -
          (((C56617 + C56618) * C93718 + (C55797 + C55798) * C59426 +
            (C45494 + C45495) * C59272 + (C44831 + C44832) * C59425) *
               C93590 +
           ((C59068 + C59067) * C93718 + (C58260 + C58259) * C59426 +
            (C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                C59272 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C59425) *
               C93815) *
              C93639 * C801 +
          (((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
                C59425 +
            (C42479 * C956 + C42379 * C1262 + C42480 * C5096 + C93694 * C5598) *
                C59272 +
            (C42479 * C8520 + C42379 * C8645 + C42480 * C19095 +
             C93694 * C19221) *
                C59426 +
            (C42479 * C8749 + C42379 * C9305 + C42480 * C19323 +
             C93694 * C19884) *
                C93718) *
               C93815 +
           ((C42479 * C809 + C42379 * C891 + C42480 * C4898 + C93694 * C5017) *
                C59425 +
            (C42479 * C957 + C42379 * C1263 + C42480 * C5097 + C93694 * C5599) *
                C59272 +
            (C42479 * C8521 + C42379 * C8646 + C42480 * C19096 +
             C93694 * C19222) *
                C59426 +
            (C42479 * C8750 + C42379 * C9306 + C42480 * C19324 +
             C93694 * C19885) *
                C93718) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
             C59950 + C59950 + C93718 * C1900) *
                C42379 +
            (C66147 + C66148) * C93694) *
               C93815 +
           ((C59983 + C59984) * C42379 + C68243 * C93694) * C93590) *
              C93639 * C93625 * C97 -
          (((C62396 + C62397) * C93694 + (C59986 + C59985) * C42379) * C93590 +
           (C68244 * C93694 + (C59984 + C59983) * C42379) * C93815) *
              C93639 * C93625 * C98 +
          ((C59989 * C42379 + (C62397 + C62396) * C93694) * C93815 +
           ((C59988 + C59987) * C42379 +
            (C59946 * C804 + C62386 + C62386 + C59272 * C1316 + C59947 * C3412 +
             C62387 + C62387 + C93718 * C3996) *
                C93694) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
             C59950 + C59950 + C93718 * C1900) *
                C42379 +
            (C66147 + C66148) * C93694) *
               C93815 +
           ((C59983 + C59984) * C42379 + C68243 * C93694) * C93590) *
              C93639 * C800 -
          (((C66149 + C66150) * C93694 + C68244 * C42379) * C93590 +
           ((C66151 + C66152) * C93694 + (C66148 + C66147) * C42379) * C93815) *
              C93639 * C801 +
          (((C66152 + C66151) * C42379 +
            (C59946 * C4897 + C66131 + C66131 + C59272 * C5675 +
             C59947 * C19095 + C66132 + C66132 + C93718 * C19984) *
                C93694) *
               C93815 +
           ((C66150 + C66149) * C42379 +
            (C59946 * C4898 + C66133 + C66133 + C59272 * C5676 +
             C59947 * C19096 + C66134 + C66134 + C93718 * C19985) *
                C93694) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C59272 +
             C25027 * C93718) *
                C93855 +
            (C82595 + C82596) * C93850 + C82601 * C47572) *
               C93639 * C1979 -
           ((C82599 + C82600) * C47572 + (C82598 + C82597) * C93850 +
            (C82596 + C82595) * C93855) *
               C93639 * C1980) *
              C1981 +
          (((C84114 + C84115) * C93855 + (C84116 + C84117) * C93850 +
            (C21612 * C59272 +
             (C20048 * C19096 + C22256 + C22256 + C93585 * C19100) * C93718) *
                C47572) *
               C93639 * C1980 -
           ((C84117 + C84116) * C47572 + (C84115 + C84114) * C93850 +
            (C26841 * C93718 +
             (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C59272) *
                C93855) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexy[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                        C93850 * C889 + C47671 * C808 + C47572 * C890) *
                           C20049 +
                       (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                        C93850 * C897 + C47671 * C816 + C47572 * C898) *
                           C93585) *
                          C59272 +
                      ((C83421 + C83422 + C83423) * C20049 +
                       (C83424 + C83425 + C83426) * C93585) *
                          C93718) *
                         C93639 * C1979 -
                     (((C47671 * C19097 + C47572 * C19223 + C47670 * C8523 +
                        C93850 * C8648 + C47669 * C3413 + C93855 * C3495) *
                           C93585 +
                       (C47671 * C19095 + C47572 * C19221 + C47670 * C8520 +
                        C93850 * C8645 + C47669 * C3409 + C93855 * C3491) *
                           C20049) *
                          C93718 +
                      ((C47671 * C4900 + C47572 * C5019 + C47670 * C816 +
                        C93850 * C898 + C47669 * C815 + C93855 * C897) *
                           C93585 +
                       (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                        C93850 * C890 + C47669 * C807 + C93855 * C889) *
                           C20049) *
                          C59272) *
                         C93639 * C1980) *
                        C1981 +
                    ((((C50022 + C50021 + C50020) * C20049 +
                       (C50019 + C50018 + C50017) * C93585) *
                          C59272 +
                      ((C47669 * C3410 + C93855 * C3492 + C47670 * C8521 +
                        C93850 * C8646 + C47671 * C19096 + C47572 * C19222) *
                           C20049 +
                       (C47669 * C3414 + C93855 * C3496 + C47670 * C8524 +
                        C93850 * C8649 + C47671 * C19098 + C47572 * C19224) *
                           C93585) *
                          C93718) *
                         C93639 * C1980 -
                     (((C51003 + C51004 + C51005) * C93585 +
                       (C51006 + C51007 + C51008) * C20049) *
                          C93718 +
                      ((C47702 + C47701 + C47700) * C93585 +
                       (C47699 + C47698 + C47697) * C20049) *
                          C59272) *
                         C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C20049 +
             (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                 C93585) *
                C93855 +
            ((C65499 + C65500) * C20049 + (C65501 + C65502) * C93585) * C93850 +
            C82766 * C47572) *
               C93639 * C1979 -
           (((C82762 + C82763) * C93585 + (C82764 + C82765) * C20049) * C47572 +
            ((C65507 + C65508) * C93585 + (C65509 + C65510) * C20049) * C93850 +
            ((C65502 + C65501) * C93585 + (C65500 + C65499) * C20049) *
                C93855) *
               C93639 * C1980) *
              C1981 +
          (((C67441 * C20049 + C67442 * C93585) * C93855 +
            ((C65506 + C65505) * C20049 + (C65504 + C65503) * C93585) * C93850 +
            ((C59425 * C4898 + C59272 * C5097 + C59426 * C19096 +
              C93718 * C19324) *
                 C20049 +
             (C59425 * C4901 + C59272 * C5100 + C59426 * C19098 +
              C93718 * C19326) *
                 C93585) *
                C47572) *
               C93639 * C1980 -
           (((C65503 + C65504) * C93585 + (C65505 + C65506) * C20049) * C47572 +
            (C67443 * C93585 + C67444 * C20049) * C93850 +
            ((C59455 + C59454) * C93585 + (C59453 + C59452) * C20049) *
                C93855) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C47669 +
             (C20049 * C189 + C93585 * C362) * C93855 + C20749 * C47670 +
             C20750 * C93850 + C20751 * C47671 + C20752 * C47572) *
                C59272 +
            (C83581 + C83582 + C83583 + C83584 + C83585 + C83586) * C93718) *
               C93639 * C1979 -
           ((C23104 * C47572 + C23105 * C47671 + C23106 * C93850 +
             C23107 * C47670 + C23108 * C93855 + C23109 * C47669) *
                C93718 +
            (C20754 * C47572 + C20753 * C47671 + C20752 * C93850 +
             C20751 * C47670 + C20750 * C93855 + C20749 * C47669) *
                C59272) *
               C93639 * C1980) *
              C1981 +
          (((C21832 * C47669 + C21833 * C93855 + C21834 * C47670 +
             C21835 * C93850 + C21836 * C47671 + C21837 * C47572) *
                C59272 +
            (C26210 * C47669 + C26211 * C93855 + C26212 * C47670 +
             C26213 * C93850 + (C20049 * C19096 + C93585 * C19098) * C47671 +
             (C20049 * C19222 + C93585 * C19440) * C47572) *
                C93718) *
               C93639 * C1980 -
           ((C26213 * C47572 + C26212 * C47671 + C26211 * C93850 +
             C26210 * C47670 + C27145 * C93855 + C27144 * C47669) *
                C93718 +
            (C21835 * C47572 + C21834 * C47671 + C21833 * C93850 +
             C21832 * C47670 + (C20049 * C190 + C93585 * C363) * C93855 +
             (C20049 * C109 + C93585 * C115) * C47669) *
                C59272) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                       C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                       C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                          C93585 * C59272 +
                      (C83694 + C83695 + C83696) * C93585 * C93718) *
                         C93639 * C1979 -
                     ((C47932 * C19095 + C52277 + C52277 + C47572 * C19563 +
                       C47931 * C8520 + C52276 + C52276 + C93850 * C8984 +
                       C47930 * C3409 + C52275 + C52275 + C93855 * C3709) *
                          C93585 * C93718 +
                      (C47932 * C4897 + C48770 + C48770 + C47572 * C5325 +
                       C47931 * C808 + C48771 + C48771 + C93850 * C1080 +
                       C47930 * C807 + C48772 + C48772 + C93855 * C1079) *
                          C93585 * C59272) *
                         C93639 * C1980) *
                        C1981 +
                    (((C50366 + C50365 + C50364) * C93585 * C59272 +
                      (C47930 * C3410 + C52278 + C52278 + C93855 * C3710 +
                       C47931 * C8521 + C52279 + C52279 + C93850 * C8985 +
                       C47932 * C19096 + C52280 + C52280 + C47572 * C19564) *
                          C93585 * C93718) *
                         C93639 * C1980 -
                     ((C51318 + C51319 + C51320) * C93585 * C93718 +
                      (C47972 + C47971 + C47970) * C93585 * C59272) *
                         C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C47669 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93855 +
            (C65499 + C65500) * C47670 + (C65819 + C65820) * C93850 +
            C82750 * C47671 + C82992 * C47572) *
               C93585 * C93639 * C1979 -
           ((C82997 + C82998) * C47572 + (C82764 + C82765) * C47671 +
            (C65823 + C65824) * C93850 + (C65509 + C65510) * C47670 +
            (C65820 + C65819) * C93855 + (C65500 + C65499) * C47669) *
               C93585 * C93639 * C1980) *
              C1981 +
          ((C67441 * C47669 + C67845 * C93855 + (C65506 + C65505) * C47670 +
            (C65822 + C65821) * C93850 +
            (C59425 * C4898 + C59272 * C5097 + C59426 * C19096 +
             C93718 * C19324) *
                C47671 +
            (C59425 * C5017 + C59272 * C5415 + C59426 * C19222 +
             C93718 * C19670) *
                C47572) *
               C93585 * C93639 * C1980 -
           ((C65821 + C65822) * C47572 + (C65505 + C65506) * C47671 +
            C67846 * C93850 + C67444 * C47670 + (C59702 + C59701) * C93855 +
            (C59453 + C59452) * C47669) *
               C93585 * C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C59425 +
             (C20049 * C276 + C93585 * C579) * C59272 + C25319 * C59426 +
             C25604 * C93718) *
                C93855 +
            (C83073 + C83074 + C83075 + C83076) * C93850 + C83087 * C47572) *
               C93639 * C1979 -
           ((C83081 + C83082 + C83083 + C83084) * C47572 +
            (C83080 + C83079 + C83078 + C83077) * C93850 +
            (C83076 + C83075 + C83074 + C83073) * C93855) *
               C93639 * C1980) *
              C1981 +
          (((C84706 + C84707 + C84708 + C84709) * C93855 +
            (C84710 + C84711 + C84712 + C84713) * C93850 +
            (C21836 * C59425 + C22051 * C59272 +
             (C20049 * C19096 + C93585 * C19098) * C59426 +
             (C20049 * C19324 + C93585 * C19773) * C93718) *
                C47572) *
               C93639 * C1980 -
           ((C84713 + C84712 + C84711 + C84710) * C47572 +
            (C84709 + C84708 + C84707 + C84706) * C93850 +
            (C27444 * C93718 + C27144 * C59426 +
             (C20049 * C277 + C93585 * C580) * C59272 +
             (C20049 * C109 + C93585 * C115) * C59425) *
                C93855) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                       C93850 * C889 + C47671 * C808 + C47572 * C890) *
                          C59425 +
                      (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                       C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                          C59272 +
                      (C83421 + C83422 + C83423) * C59426 +
                      (C83934 + C83935 + C83936) * C93718) *
                         C93585 * C93639 * C1979 -
                     ((C47671 * C19323 + C47572 * C19884 + C47670 * C8749 +
                       C93850 * C9305 + C47669 * C3565 + C93855 * C3923) *
                          C93718 +
                      (C47671 * C19095 + C47572 * C19221 + C47670 * C8520 +
                       C93850 * C8645 + C47669 * C3409 + C93855 * C3491) *
                          C59426 +
                      (C47671 * C5096 + C47572 * C5598 + C47670 * C956 +
                       C93850 * C1262 + C47669 * C955 + C93855 * C1261) *
                          C59272 +
                      (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                       C93850 * C890 + C47669 * C807 + C93855 * C889) *
                          C59425) *
                         C93585 * C93639 * C1980) *
                        C1981 +
                    (((C50022 + C50021 + C50020) * C59425 +
                      (C50687 + C50686 + C50685) * C59272 +
                      (C47669 * C3410 + C93855 * C3492 + C47670 * C8521 +
                       C93850 * C8646 + C47671 * C19096 + C47572 * C19222) *
                          C59426 +
                      (C47669 * C3566 + C93855 * C3924 + C47670 * C8750 +
                       C93850 * C9306 + C47671 * C19324 + C47572 * C19885) *
                          C93718) *
                         C93585 * C93639 * C1980 -
                     ((C51627 + C51628 + C51629) * C93718 +
                      (C51006 + C51007 + C51008) * C59426 +
                      (C48224 + C48223 + C48222) * C59272 +
                      (C47699 + C47698 + C47697) * C59425) *
                         C93585 * C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                       C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                          C93855 +
                      (C66147 + C66148) * C93850 + C83236 * C47572) *
                         C93585 * C93639 * C1979 -
                     ((C83247 + C83248) * C47572 + (C66151 + C66152) * C93850 +
                      (C66148 + C66147) * C93855) *
                         C93585 * C93639 * C1980) *
                        C1981 +
                    ((C68243 * C93855 + (C66150 + C66149) * C93850 +
                      (C59946 * C4898 + C66133 + C66133 + C59272 * C5676 +
                       C59947 * C19096 + C66134 + C66134 + C93718 * C19985) *
                          C47572) *
                         C93585 * C93639 * C1980 -
                     ((C66149 + C66150) * C47572 + C68244 * C93850 +
                      (C59984 + C59983) * C93855) *
                         C93585 * C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C59272 +
             C25027 * C93718) *
                C93855 +
            (C82595 + C82596) * C93850 + C82601 * C47572) *
               C2695 -
           ((C85896 + C85897) * C47572 + (C85898 + C85899) * C93850 +
            (C25030 * C93718 + C25027 * C59272) * C93855) *
               C2696) *
              C1979 +
          (((C85899 + C85898) * C93855 + (C85897 + C85896) * C93850 +
            (C22871 * C59272 +
             (C20048 * C21100 + C21111 + C21111 + C93585 * C21102) * C93718) *
                C47572) *
               C2696 -
           ((C82599 + C82600) * C47572 + (C82598 + C82597) * C93850 +
            (C82596 + C82595) * C93855) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexy[21] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                        C93850 * C889 + C47671 * C808 + C47572 * C890) *
                           C20049 +
                       (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                        C93850 * C897 + C47671 * C816 + C47572 * C898) *
                           C93585) *
                          C59272 +
                      ((C83421 + C83422 + C83423) * C20049 +
                       (C83424 + C83425 + C83426) * C93585) *
                          C93718) *
                         C2695 -
                     (((C83427 + C83428 + C83429) * C93585 +
                       (C83430 + C83431 + C83432) * C20049) *
                          C93718 +
                      ((C83426 + C83425 + C83424) * C93585 +
                       (C83423 + C83422 + C83421) * C20049) *
                          C59272) *
                         C2696) *
                        C1979 +
                    ((((C86010 + C86011 + C86012) * C20049 +
                       (C86013 + C86014 + C86015) * C93585) *
                          C59272 +
                      ((C47669 * C5775 + C93855 * C5870 + C47670 * C16395 +
                        C93850 * C16487 + C47671 * C21100 + C47572 * C21161) *
                           C20049 +
                       (C47669 * C5778 + C93855 * C5873 + C47670 * C16397 +
                        C93850 * C16489 + C47671 * C21101 + C47572 * C21162) *
                           C93585) *
                          C93718) *
                         C2696 -
                     (((C86015 + C86014 + C86013) * C93585 +
                       (C86012 + C86011 + C86010) * C20049) *
                          C93718 +
                      ((C47671 * C4900 + C47572 * C5019 + C47670 * C816 +
                        C93850 * C898 + C47669 * C815 + C93855 * C897) *
                           C93585 +
                       (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                        C93850 * C890 + C47669 * C807 + C93855 * C889) *
                           C20049) *
                          C59272) *
                         C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C20049 +
             (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                 C93585) *
                C93855 +
            ((C65499 + C65500) * C20049 + (C65501 + C65502) * C93585) * C93850 +
            C82766 * C47572) *
               C2695 -
           (((C86122 + C86123) * C93585 + (C86124 + C86125) * C20049) * C47572 +
            ((C69849 + C69850) * C93585 + (C69851 + C69852) * C20049) * C93850 +
            ((C59426 * C1397 + C93718 * C1545 + C59425 * C1396 +
              C59272 * C1544) *
                 C93585 +
             (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
              C59272 * C1536) *
                 C20049) *
                C93855) *
               C2696) *
              C1979 +
          ((((C69852 + C69851) * C20049 + (C69850 + C69849) * C93585) * C93855 +
            ((C86125 + C86124) * C20049 + (C86123 + C86122) * C93585) * C93850 +
            ((C59425 * C19095 + C59272 * C19323 + C59426 * C21100 +
              C93718 * C21213) *
                 C20049 +
             (C59425 * C19097 + C59272 * C19325 + C59426 * C21101 +
              C93718 * C21214) *
                 C93585) *
                C47572) *
               C2696 -
           (((C82762 + C82763) * C93585 + (C82764 + C82765) * C20049) * C47572 +
            ((C65507 + C65508) * C93585 + (C65509 + C65510) * C20049) * C93850 +
            ((C65502 + C65501) * C93585 + (C65500 + C65499) * C20049) *
                C93855) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C47669 +
             (C20049 * C189 + C93585 * C362) * C93855 + C20749 * C47670 +
             C20750 * C93850 + C20751 * C47671 + C20752 * C47572) *
                C59272 +
            (C83581 + C83582 + C83583 + C83584 + C83585 + C83586) * C93718) *
               C2695 -
           ((C83587 + C83588 + C83589 + C83590 + C83591 + C83592) * C93718 +
            (C83586 + C83585 + C83584 + C83583 + C83582 + C83581) * C59272) *
               C2696) *
              C1979 +
          (((C86224 + C86225 + C86226 + C86227 + C86228 + C86229) * C59272 +
            (C25324 * C47669 + C25323 * C93855 + C25322 * C47670 +
             C25321 * C93850 + (C20049 * C21100 + C93585 * C21101) * C47671 +
             (C20049 * C21161 + C93585 * C21265) * C47572) *
                C93718) *
               C2696 -
           ((C86229 + C86228 + C86227 + C86226 + C86225 + C86224) * C93718 +
            (C20754 * C47572 + C20753 * C47671 + C20752 * C93850 +
             C20751 * C47670 + C20750 * C93855 + C20749 * C47669) *
                C59272) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyy[21] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                       C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                       C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                          C93585 * C59272 +
                      (C83694 + C83695 + C83696) * C93585 * C93718) *
                         C2695 -
                     ((C83697 + C83698 + C83699) * C93585 * C93718 +
                      (C83696 + C83695 + C83694) * C93585 * C59272) *
                         C2696) *
                        C1979 +
                    (((C86343 + C86344 + C86345) * C93585 * C59272 +
                      (C47930 * C5775 + C86334 + C86334 + C93855 * C6107 +
                       C47931 * C16395 + C86335 + C86335 + C93850 * C16719 +
                       C47932 * C21100 + C86336 + C86336 + C47572 * C21316) *
                          C93585 * C93718) *
                         C2696 -
                     ((C86345 + C86344 + C86343) * C93585 * C93718 +
                      (C47932 * C4897 + C48770 + C48770 + C47572 * C5325 +
                       C47931 * C808 + C48771 + C48771 + C93850 * C1080 +
                       C47930 * C807 + C48772 + C48772 + C93855 * C1079) *
                          C93585 * C59272) *
                         C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C47669 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93855 +
            (C65499 + C65500) * C47670 + (C65819 + C65820) * C93850 +
            C82750 * C47671 + C82992 * C47572) *
               C93585 * C2695 -
           ((C86448 + C86449) * C47572 + (C86124 + C86125) * C47671 +
            (C70247 + C70248) * C93850 + (C69851 + C69852) * C47670 +
            (C59426 * C1471 + C93718 * C1727 + C59425 * C1470 +
             C59272 * C1726) *
                C93855 +
            (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
             C59272 * C1536) *
                C47669) *
               C93585 * C2696) *
              C1979 +
          (((C69852 + C69851) * C47669 + (C70248 + C70247) * C93855 +
            (C86125 + C86124) * C47670 + (C86449 + C86448) * C93850 +
            (C59425 * C19095 + C59272 * C19323 + C59426 * C21100 +
             C93718 * C21213) *
                C47671 +
            (C59425 * C19221 + C59272 * C19669 + C59426 * C21161 +
             C93718 * C21375) *
                C47572) *
               C93585 * C2696 -
           ((C82997 + C82998) * C47572 + (C82764 + C82765) * C47671 +
            (C65823 + C65824) * C93850 + (C65509 + C65510) * C47670 +
            (C65820 + C65819) * C93855 + (C65500 + C65499) * C47669) *
               C93585 * C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C59425 +
             (C20049 * C276 + C93585 * C579) * C59272 + C25319 * C59426 +
             C25604 * C93718) *
                C93855 +
            (C83073 + C83074 + C83075 + C83076) * C93850 + C83087 * C47572) *
               C2695 -
           ((C86548 + C86549 + C86550 + C86551) * C47572 +
            (C86552 + C86553 + C86554 + C86555) * C93850 +
            (C25607 * C93718 + C25326 * C59426 + C25604 * C59272 +
             C25319 * C59425) *
                C93855) *
               C2696) *
              C1979 +
          (((C86555 + C86554 + C86553 + C86552) * C93855 +
            (C86551 + C86550 + C86549 + C86548) * C93850 +
            (C23105 * C59425 + C23327 * C59272 +
             (C20049 * C21100 + C93585 * C21101) * C59426 +
             (C20049 * C21213 + C93585 * C21426) * C93718) *
                C47572) *
               C2696 -
           ((C83081 + C83082 + C83083 + C83084) * C47572 +
            (C83080 + C83079 + C83078 + C83077) * C93850 +
            (C83076 + C83075 + C83074 + C83073) * C93855) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezy[21] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                       C93850 * C889 + C47671 * C808 + C47572 * C890) *
                          C59425 +
                      (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                       C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                          C59272 +
                      (C83421 + C83422 + C83423) * C59426 +
                      (C83934 + C83935 + C83936) * C93718) *
                         C93585 * C2695 -
                     ((C83937 + C83938 + C83939) * C93718 +
                      (C83430 + C83431 + C83432) * C59426 +
                      (C83936 + C83935 + C83934) * C59272 +
                      (C83423 + C83422 + C83421) * C59425) *
                         C93585 * C2696) *
                        C1979 +
                    (((C86010 + C86011 + C86012) * C59425 +
                      (C86660 + C86661 + C86662) * C59272 +
                      (C47669 * C5775 + C93855 * C5870 + C47670 * C16395 +
                       C93850 * C16487 + C47671 * C21100 + C47572 * C21161) *
                          C59426 +
                      (C47669 * C5950 + C93855 * C6350 + C47670 * C16565 +
                       C93850 * C16959 + C47671 * C21213 + C47572 * C21477) *
                          C93718) *
                         C93585 * C2696 -
                     ((C86662 + C86661 + C86660) * C93718 +
                      (C86012 + C86011 + C86010) * C59426 +
                      (C47671 * C5096 + C47572 * C5598 + C47670 * C956 +
                       C93850 * C1262 + C47669 * C955 + C93855 * C1261) *
                          C59272 +
                      (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                       C93850 * C890 + C47669 * C807 + C93855 * C889) *
                          C59425) *
                         C93585 * C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eezz[21] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                       C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                          C93855 +
                      (C66147 + C66148) * C93850 + C83236 * C47572) *
                         C93585 * C2695 -
                     ((C86771 + C86772) * C47572 + (C70651 + C70652) * C93850 +
                      (C59947 * C1389 + C61444 + C61444 + C93718 * C1901 +
                       C59946 * C1388 + C61445 + C61445 + C59272 * C1900) *
                          C93855) *
                         C93585 * C2696) *
                        C1979 +
                    (((C70652 + C70651) * C93855 + (C86772 + C86771) * C93850 +
                      (C59946 * C19095 + C86765 + C86765 + C59272 * C19984 +
                       C59947 * C21100 + C86766 + C86766 + C93718 * C21528) *
                          C47572) *
                         C93585 * C2696 -
                     ((C83247 + C83248) * C47572 + (C66151 + C66152) * C93850 +
                      (C66148 + C66147) * C93855) *
                         C93585 * C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C59272 +
            C25027 * C93718) *
               C93855 +
           (C82595 + C82596) * C93850 + C82601 * C47572) *
              C93639 * C800 -
          ((C82599 + C82600) * C47572 + (C82598 + C82597) * C93850 +
           (C82596 + C82595) * C93855) *
              C93639 * C801 +
          (C82601 * C93855 + (C82600 + C82599) * C93850 +
           (C20557 * C59272 +
            (C20048 * C22854 + C22864 + C22864 + C93585 * C22856) * C93718) *
               C47572) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C59272 +
            C25027 * C93718) *
               C93855 +
           (C20554 * C59272 + C22873 * C93718) * C93850 +
           (C20555 * C59272 + C22872 * C93718) * C47572) *
              C93639 * C93625 * C97 -
          ((C25893 * C93718 + C21611 * C59272) * C47572 +
           (C25892 * C93718 + C21610 * C59272) * C93850 +
           (C26841 * C93718 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C59272) *
               C93855) *
              C93639 * C93625 * C98 +
          (((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C59272 +
            (C20048 * C1386 + C23547 + C23547 + C93585 * C1402) * C93718) *
               C93855 +
           ((C20048 * C805 + C20060 + C20060 + C93585 * C821) * C59272 +
            (C20048 * C3411 + C23548 + C23548 + C93585 * C3419) * C93718) *
               C93850 +
           ((C20048 * C810 + C20061 + C20061 + C93585 * C826) * C59272 +
            (C20048 * C8522 + C23549 + C23549 + C93585 * C8528) * C93718) *
               C47572) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C59272 +
            C25027 * C93718) *
               C93855 +
           (C82595 + C82596) * C93850 + C82601 * C47572) *
              C1382 -
          ((C25028 * C93718 + C22872 * C59272) * C47572 +
           (C25029 * C93718 + C22873 * C59272) * C93850 +
           (C25030 * C93718 + C25027 * C59272) * C93855) *
              C1383 +
          ((C25030 * C59272 + C35410 * C93718) * C93855 +
           (C25029 * C59272 + C35409 * C93718) * C93850 +
           (C25028 * C59272 +
            (C20048 * C25002 + C25018 + C25018 + C93585 * C25006) * C93718) *
               C47572) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[22] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                       C93850 * C889 + C47671 * C808 + C47572 * C890) *
                          C20049 +
                      (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                       C93850 * C897 + C47671 * C816 + C47572 * C898) *
                          C93585) *
                         C59272 +
                     ((C47669 * C1388 + C93855 * C1470 + C47670 * C3409 +
                       C93850 * C3491 + C47671 * C8520 + C47572 * C8645) *
                          C20049 +
                      (C47669 * C1396 + C93855 * C1478 + C47670 * C3413 +
                       C93850 * C3495 + C47671 * C8523 + C47572 * C8648) *
                          C93585) *
                         C93718) *
                        C93639 * C800 -
                    (((C47671 * C19097 + C47572 * C19223 + C47670 * C8523 +
                       C93850 * C8648 + C47669 * C3413 + C93855 * C3495) *
                          C93585 +
                      (C47671 * C19095 + C47572 * C19221 + C47670 * C8520 +
                       C93850 * C8645 + C47669 * C3409 + C93855 * C3491) *
                          C20049) *
                         C93718 +
                     ((C47671 * C4900 + C47572 * C5019 + C47670 * C816 +
                       C93850 * C898 + C47669 * C815 + C93855 * C897) *
                          C93585 +
                      (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                       C93850 * C890 + C47669 * C807 + C93855 * C889) *
                          C20049) *
                         C59272) *
                        C93639 * C801 +
                    (((C47669 * C808 + C93855 * C890 + C47670 * C4897 +
                       C93850 * C5016 + C47671 * C15550 + C47572 * C15666) *
                          C20049 +
                      (C47669 * C816 + C93855 * C898 + C47670 * C4900 +
                       C93850 * C5019 + C47671 * C15552 + C47572 * C15668) *
                          C93585) *
                         C59272 +
                     ((C47669 * C8520 + C93855 * C8645 + C47670 * C19095 +
                       C93850 * C19221 + C47671 * C22854 + C47572 * C22942) *
                          C20049 +
                      (C47669 * C8523 + C93855 * C8648 + C47670 * C19097 +
                       C93850 * C19223 + C47671 * C22855 + C47572 * C22943) *
                          C93585) *
                         C93718) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                       C93850 * C889 + C47671 * C808 + C47572 * C890) *
                          C20049 +
                      (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                       C93850 * C897 + C47671 * C816 + C47572 * C898) *
                          C93585) *
                         C59272 +
                     ((C47669 * C1388 + C93855 * C1470 + C47670 * C3409 +
                       C93850 * C3491 + C47671 * C8520 + C47572 * C8645) *
                          C20049 +
                      (C47669 * C1396 + C93855 * C1478 + C47670 * C3413 +
                       C93850 * C3495 + C47671 * C8523 + C47572 * C8648) *
                          C93585) *
                         C93718) *
                        C93639 * C93625 * C97 -
                    (((C51003 + C51004 + C51005) * C93585 +
                      (C51006 + C51007 + C51008) * C20049) *
                         C93718 +
                     ((C47702 + C47701 + C47700) * C93585 +
                      (C47699 + C47698 + C47697) * C20049) *
                         C59272) *
                        C93639 * C93625 * C98 +
                    (((C47708 + C47707 + C47706) * C20049 +
                      (C47705 + C47704 + C47703) * C93585) *
                         C59272 +
                     ((C47669 * C1386 + C93855 * C1468 + C47670 * C3411 +
                       C93850 * C3493 + C47671 * C8522 + C47572 * C8647) *
                          C20049 +
                      (C47669 * C1394 + C93855 * C1476 + C47670 * C3415 +
                       C93850 * C3497 + C47671 * C8525 + C47572 * C8650) *
                          C93585) *
                         C93718) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                       C93850 * C889 + C47671 * C808 + C47572 * C890) *
                          C20049 +
                      (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                       C93850 * C897 + C47671 * C816 + C47572 * C898) *
                          C93585) *
                         C59272 +
                     ((C83421 + C83422 + C83423) * C20049 +
                      (C83424 + C83425 + C83426) * C93585) *
                         C93718) *
                        C1382 -
                    (((C83427 + C83428 + C83429) * C93585 +
                      (C83430 + C83431 + C83432) * C20049) *
                         C93718 +
                     ((C83426 + C83425 + C83424) * C93585 +
                      (C83423 + C83422 + C83421) * C20049) *
                         C59272) *
                        C1383 +
                    (((C83432 + C83431 + C83430) * C20049 +
                      (C83429 + C83428 + C83427) * C93585) *
                         C59272 +
                     ((C47669 * C10964 + C93855 * C11080 + C47670 * C25001 +
                       C93850 * C25104 + C47671 * C25002 + C47572 * C25105) *
                          C20049 +
                      (C47669 * C10967 + C93855 * C11083 + C47670 * C25003 +
                       C93850 * C25106 + C47671 * C25004 + C47572 * C25107) *
                          C93585) *
                         C93718) *
                        C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C20049 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93585) *
               C93855 +
           ((C65499 + C65500) * C20049 + (C65501 + C65502) * C93585) * C93850 +
           C82766 * C47572) *
              C93639 * C800 -
          (((C82762 + C82763) * C93585 + (C82764 + C82765) * C20049) * C47572 +
           ((C65507 + C65508) * C93585 + (C65509 + C65510) * C20049) * C93850 +
           ((C65502 + C65501) * C93585 + (C65500 + C65499) * C20049) * C93855) *
              C93639 * C801 +
          (C82766 * C93855 +
           ((C82765 + C82764) * C20049 + (C82763 + C82762) * C93585) * C93850 +
           ((C59425 * C15550 + C59272 * C15744 + C59426 * C22854 +
             C93718 * C23010) *
                C20049 +
            (C59425 * C15552 + C59272 * C15746 + C59426 * C22855 +
             C93718 * C23011) *
                C93585) *
               C47572) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C20049 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93585) *
               C93855 +
           ((C65499 + C65500) * C20049 + (C65501 + C65502) * C93585) * C93850 +
           ((C65510 + C65509) * C20049 + (C65508 + C65507) * C93585) * C47572) *
              C93639 * C93625 * C97 -
          (((C65503 + C65504) * C93585 + (C65505 + C65506) * C20049) * C47572 +
           (C67443 * C93585 + C67444 * C20049) * C93850 +
           ((C59455 + C59454) * C93585 + (C59453 + C59452) * C20049) * C93855) *
              C93639 * C93625 * C98 +
          ((C59464 * C20049 + C59465 * C93585) * C93855 +
           ((C61765 + C61764) * C20049 + (C61763 + C61762) * C93585) * C93850 +
           ((C59425 * C810 + C59272 * C958 + C59426 * C8522 + C93718 * C8751) *
                C20049 +
            (C59425 * C818 + C59272 * C966 + C59426 * C8525 + C93718 * C8754) *
                C93585) *
               C47572) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C20049 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93585) *
               C93855 +
           ((C65499 + C65500) * C20049 + (C65501 + C65502) * C93585) * C93850 +
           C82766 * C47572) *
              C1382 -
          (((C59426 * C16397 + C93718 * C16567 + C59425 * C8523 +
             C59272 * C8752) *
                C93585 +
            (C59426 * C16395 + C93718 * C16565 + C59425 * C8520 +
             C59272 * C8749) *
                C20049) *
               C47572 +
           ((C69849 + C69850) * C93585 + (C69851 + C69852) * C20049) * C93850 +
           ((C59426 * C1397 + C93718 * C1545 + C59425 * C1396 +
             C59272 * C1544) *
                C93585 +
            (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
             C59272 * C1536) *
                C20049) *
               C93855) *
              C1383 +
          (((C59425 * C1389 + C59272 * C1537 + C59426 * C10964 +
             C93718 * C11196) *
                C20049 +
            (C59425 * C1397 + C59272 * C1545 + C59426 * C10967 +
             C93718 * C11199) *
                C93585) *
               C93855 +
           ((C59425 * C5775 + C59272 * C5950 + C59426 * C25001 +
             C93718 * C25218) *
                C20049 +
            (C59425 * C5778 + C59272 * C5953 + C59426 * C25003 +
             C93718 * C25220) *
                C93585) *
               C93850 +
           ((C59425 * C16395 + C59272 * C16565 + C59426 * C25002 +
             C93718 * C25219) *
                C20049 +
            (C59425 * C16397 + C59272 * C16567 + C59426 * C25004 +
             C93718 * C25221) *
                C93585) *
               C47572) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C47669 +
            (C20049 * C189 + C93585 * C362) * C93855 + C20749 * C47670 +
            C20750 * C93850 + C20751 * C47671 + C20752 * C47572) *
               C59272 +
           (C25319 * C47669 + C25320 * C93855 + C23109 * C47670 +
            C23108 * C93850 + C23107 * C47671 + C23106 * C47572) *
               C93718) *
              C93639 * C800 -
          ((C23104 * C47572 + C23105 * C47671 + C23106 * C93850 +
            C23107 * C47670 + C23108 * C93855 + C23109 * C47669) *
               C93718 +
           (C20754 * C47572 + C20753 * C47671 + C20752 * C93850 +
            C20751 * C47670 + C20750 * C93855 + C20749 * C47669) *
               C59272) *
              C93639 * C801 +
          ((C20751 * C47669 + C20752 * C93855 + C20753 * C47670 +
            C20754 * C93850 + C20756 * C47671 + C20755 * C47572) *
               C59272 +
           (C23107 * C47669 + C23106 * C93855 + C23105 * C47670 +
            C23104 * C93850 + (C20049 * C22854 + C93585 * C22855) * C47671 +
            (C20049 * C22942 + C93585 * C23090) * C47572) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C47669 +
            (C20049 * C189 + C93585 * C362) * C93855 + C20749 * C47670 +
            C20750 * C93850 + C20751 * C47671 + C20752 * C47572) *
               C59272 +
           (C25319 * C47669 + C25320 * C93855 + C23109 * C47670 +
            C23108 * C93850 + C23107 * C47671 + C23106 * C47572) *
               C93718) *
              C93639 * C93625 * C97 -
          ((C26213 * C47572 + C26212 * C47671 + C26211 * C93850 +
            C26210 * C47670 + C27145 * C93855 + C27144 * C47669) *
               C93718 +
           (C21835 * C47572 + C21834 * C47671 + C21833 * C93850 +
            C21832 * C47670 + (C20049 * C190 + C93585 * C363) * C93855 +
            (C20049 * C109 + C93585 * C115) * C47669) *
               C59272) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C47669 +
            (C20049 * C191 + C93585 * C364) * C93855 +
            (C20049 * C805 + C93585 * C813) * C47670 +
            (C20049 * C887 + C93585 * C1019) * C93850 +
            (C20049 * C810 + C93585 * C818) * C47671 +
            (C20049 * C892 + C93585 * C1024) * C47572) *
               C59272 +
           ((C20049 * C1386 + C93585 * C1394) * C47669 +
            (C20049 * C1468 + C93585 * C1600) * C93855 +
            (C20049 * C3411 + C93585 * C3415) * C47670 +
            (C20049 * C3493 + C93585 * C3641) * C93850 +
            (C20049 * C8522 + C93585 * C8525) * C47671 +
            (C20049 * C8647 + C93585 * C8867) * C47572) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C47669 +
            (C20049 * C189 + C93585 * C362) * C93855 + C20749 * C47670 +
            C20750 * C93850 + C20751 * C47671 + C20752 * C47572) *
               C59272 +
           (C83581 + C83582 + C83583 + C83584 + C83585 + C83586) * C93718) *
              C1382 -
          ((C83587 + C83588 + C83589 + C83590 + C83591 + C83592) * C93718 +
           (C83586 + C83585 + C83584 + C83583 + C83582 + C83581) * C59272) *
              C1383 +
          ((C83592 + C83591 + C83590 + C83589 + C83588 + C83587) * C59272 +
           (C35699 * C47669 + C35698 * C93855 + C35697 * C47670 +
            C35696 * C93850 + (C20049 * C25002 + C93585 * C25004) * C47671 +
            (C20049 * C25105 + C93585 * C25297) * C47572) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[22] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                      C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                      C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                         C93585 * C59272 +
                     (C47930 * C1388 + C49484 + C49484 + C93855 * C1660 +
                      C47931 * C3409 + C49483 + C49483 + C93850 * C3709 +
                      C47932 * C8520 + C49482 + C49482 + C47572 * C8984) *
                         C93585 * C93718) *
                        C93639 * C800 -
                    ((C47932 * C19095 + C52277 + C52277 + C47572 * C19563 +
                      C47931 * C8520 + C52276 + C52276 + C93850 * C8984 +
                      C47930 * C3409 + C52275 + C52275 + C93855 * C3709) *
                         C93585 * C93718 +
                     (C47932 * C4897 + C48770 + C48770 + C47572 * C5325 +
                      C47931 * C808 + C48771 + C48771 + C93850 * C1080 +
                      C47930 * C807 + C48772 + C48772 + C93855 * C1079) *
                         C93585 * C59272) *
                        C93639 * C801 +
                    ((C47930 * C808 + C48773 + C48773 + C93855 * C1080 +
                      C47931 * C4897 + C48774 + C48774 + C93850 * C5325 +
                      C47932 * C15550 + C48775 + C48775 + C47572 * C15963) *
                         C93585 * C59272 +
                     (C47930 * C8520 + C82915 + C82915 + C93855 * C8984 +
                      C47931 * C19095 + C82916 + C82916 + C93850 * C19563 +
                      C47932 * C22854 + C82917 + C82917 + C47572 * C23175) *
                         C93585 * C93718) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                      C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                      C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                         C93585 * C59272 +
                     (C47930 * C1388 + C49484 + C49484 + C93855 * C1660 +
                      C47931 * C3409 + C49483 + C49483 + C93850 * C3709 +
                      C47932 * C8520 + C49482 + C49482 + C47572 * C8984) *
                         C93585 * C93718) *
                        C93639 * C93625 * C97 -
                    ((C51318 + C51319 + C51320) * C93585 * C93718 +
                     (C47972 + C47971 + C47970) * C93585 * C59272) *
                        C93639 * C93625 * C98 +
                    ((C47975 + C47974 + C47973) * C93585 * C59272 +
                     (C47930 * C1386 + C51309 + C51309 + C93855 * C1658 +
                      C47931 * C3411 + C51310 + C51310 + C93850 * C3711 +
                      C47932 * C8522 + C51311 + C51311 + C47572 * C8986) *
                         C93585 * C93718) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                      C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                      C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                         C93585 * C59272 +
                     (C83694 + C83695 + C83696) * C93585 * C93718) *
                        C1382 -
                    ((C83697 + C83698 + C83699) * C93585 * C93718 +
                     (C83696 + C83695 + C83694) * C93585 * C59272) *
                        C1383 +
                    ((C83699 + C83698 + C83697) * C93585 * C59272 +
                     (C47930 * C10964 + C83679 + C83679 + C93855 * C11389 +
                      C47931 * C25001 + C83680 + C83680 + C93850 * C25408 +
                      C47932 * C25002 + C83681 + C83681 + C47572 * C25409) *
                         C93585 * C93718) *
                        C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
               C47669 +
           (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
               C93855 +
           (C65499 + C65500) * C47670 + (C65819 + C65820) * C93850 +
           C82750 * C47671 + C82992 * C47572) *
              C93585 * C93639 * C800 -
          ((C82997 + C82998) * C47572 + (C82764 + C82765) * C47671 +
           (C65823 + C65824) * C93850 + (C65509 + C65510) * C47670 +
           (C65820 + C65819) * C93855 + (C65500 + C65499) * C47669) *
              C93585 * C93639 * C801 +
          (C82750 * C47669 + C82992 * C93855 + (C82765 + C82764) * C47670 +
           (C82998 + C82997) * C93850 +
           (C59425 * C15550 + C59272 * C15744 + C59426 * C22854 +
            C93718 * C23010) *
               C47671 +
           (C59425 * C15666 + C59272 * C16051 + C59426 * C22942 +
            C93718 * C23246) *
               C47572) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
               C47669 +
           (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
               C93855 +
           (C65499 + C65500) * C47670 + (C65819 + C65820) * C93850 +
           (C65510 + C65509) * C47671 + (C65824 + C65823) * C47572) *
              C93585 * C93639 * C93625 * C97 -
          ((C65821 + C65822) * C47572 + (C65505 + C65506) * C47671 +
           C67846 * C93850 + C67444 * C47670 + (C59702 + C59701) * C93855 +
           (C59453 + C59452) * C47669) *
              C93585 * C93639 * C93625 * C98 +
          (C59464 * C47669 + C59707 * C93855 + (C61765 + C61764) * C47670 +
           (C62073 + C62072) * C93850 +
           (C59425 * C810 + C59272 * C958 + C59426 * C8522 + C93718 * C8751) *
               C47671 +
           (C59425 * C892 + C59272 * C1148 + C59426 * C8647 + C93718 * C9093) *
               C47572) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
               C47669 +
           (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
               C93855 +
           (C65499 + C65500) * C47670 + (C65819 + C65820) * C93850 +
           C82750 * C47671 + C82992 * C47572) *
              C93585 * C1382 -
          ((C59426 * C16487 + C93718 * C16807 + C59425 * C8645 +
            C59272 * C9091) *
               C47572 +
           (C59426 * C16395 + C93718 * C16565 + C59425 * C8520 +
            C59272 * C8749) *
               C47671 +
           (C70247 + C70248) * C93850 + (C69851 + C69852) * C47670 +
           (C59426 * C1471 + C93718 * C1727 + C59425 * C1470 + C59272 * C1726) *
               C93855 +
           (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 + C59272 * C1536) *
               C47669) *
              C93585 * C1383 +
          ((C59425 * C1389 + C59272 * C1537 + C59426 * C10964 +
            C93718 * C11196) *
               C47669 +
           (C59425 * C1471 + C59272 * C1727 + C59426 * C11080 +
            C93718 * C11495) *
               C93855 +
           (C59425 * C5775 + C59272 * C5950 + C59426 * C25001 +
            C93718 * C25218) *
               C47670 +
           (C59425 * C5870 + C59272 * C6196 + C59426 * C25104 +
            C93718 * C25517) *
               C93850 +
           (C59425 * C16395 + C59272 * C16565 + C59426 * C25002 +
            C93718 * C25219) *
               C47671 +
           (C59425 * C16487 + C59272 * C16807 + C59426 * C25105 +
            C93718 * C25518) *
               C47572) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C59425 +
            (C20049 * C276 + C93585 * C579) * C59272 + C25319 * C59426 +
            C25604 * C93718) *
               C93855 +
           (C83073 + C83074 + C83075 + C83076) * C93850 + C83087 * C47572) *
              C93639 * C800 -
          ((C83081 + C83082 + C83083 + C83084) * C47572 +
           (C83080 + C83079 + C83078 + C83077) * C93850 +
           (C83076 + C83075 + C83074 + C83073) * C93855) *
              C93639 * C801 +
          (C83087 * C93855 + (C83084 + C83083 + C83082 + C83081) * C93850 +
           (C20756 * C59425 + C20936 * C59272 +
            (C20049 * C22854 + C93585 * C22855) * C59426 +
            (C20049 * C23010 + C93585 * C23316) * C93718) *
               C47572) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C59425 +
            (C20049 * C276 + C93585 * C579) * C59272 + C25319 * C59426 +
            C25604 * C93718) *
               C93855 +
           (C20749 * C59425 + C20933 * C59272 + C23109 * C59426 +
            C23329 * C93718) *
               C93850 +
           (C20751 * C59425 + C20934 * C59272 + C23107 * C59426 +
            C23328 * C93718) *
               C47572) *
              C93639 * C93625 * C97 -
          ((C26525 * C93718 + C26212 * C59426 + C22050 * C59272 +
            C21834 * C59425) *
               C47572 +
           (C26524 * C93718 + C26210 * C59426 + C22049 * C59272 +
            C21832 * C59425) *
               C93850 +
           (C27444 * C93718 + C27144 * C59426 +
            (C20049 * C277 + C93585 * C580) * C59272 +
            (C20049 * C109 + C93585 * C115) * C59425) *
               C93855) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C59425 +
            (C20049 * C278 + C93585 * C581) * C59272 +
            (C20049 * C1386 + C93585 * C1394) * C59426 +
            (C20049 * C1534 + C93585 * C1782) * C93718) *
               C93855 +
           ((C20049 * C805 + C93585 * C813) * C59425 +
            (C20049 * C953 + C93585 * C1201) * C59272 +
            (C20049 * C3411 + C93585 * C3415) * C59426 +
            (C20049 * C3567 + C93585 * C3855) * C93718) *
               C93850 +
           ((C20049 * C810 + C93585 * C818) * C59425 +
            (C20049 * C958 + C93585 * C1206) * C59272 +
            (C20049 * C8522 + C93585 * C8525) * C59426 +
            (C20049 * C8751 + C93585 * C9197) * C93718) *
               C47572) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C59425 +
            (C20049 * C276 + C93585 * C579) * C59272 + C25319 * C59426 +
            C25604 * C93718) *
               C93855 +
           (C83073 + C83074 + C83075 + C83076) * C93850 + C83087 * C47572) *
              C1382 -
          ((C25605 * C93718 + C25322 * C59426 + C23328 * C59272 +
            C23107 * C59425) *
               C47572 +
           (C25606 * C93718 + C25324 * C59426 + C23329 * C59272 +
            C23109 * C59425) *
               C93850 +
           (C25607 * C93718 + C25326 * C59426 + C25604 * C59272 +
            C25319 * C59425) *
               C93855) *
              C1383 +
          ((C25326 * C59425 + C25607 * C59272 + C35699 * C59426 +
            C35972 * C93718) *
               C93855 +
           (C25324 * C59425 + C25606 * C59272 + C35697 * C59426 +
            C35971 * C93718) *
               C93850 +
           (C25322 * C59425 + C25605 * C59272 +
            (C20049 * C25002 + C93585 * C25004) * C59426 +
            (C20049 * C25219 + C93585 * C25594) * C93718) *
               C47572) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[22] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C59425 +
                     (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                      C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                         C59272 +
                     (C47669 * C1388 + C93855 * C1470 + C47670 * C3409 +
                      C93850 * C3491 + C47671 * C8520 + C47572 * C8645) *
                         C59426 +
                     (C47669 * C1536 + C93855 * C1842 + C47670 * C3565 +
                      C93850 * C3923 + C47671 * C8749 + C47572 * C9305) *
                         C93718) *
                        C93585 * C93639 * C800 -
                    ((C47671 * C19323 + C47572 * C19884 + C47670 * C8749 +
                      C93850 * C9305 + C47669 * C3565 + C93855 * C3923) *
                         C93718 +
                     (C47671 * C19095 + C47572 * C19221 + C47670 * C8520 +
                      C93850 * C8645 + C47669 * C3409 + C93855 * C3491) *
                         C59426 +
                     (C47671 * C5096 + C47572 * C5598 + C47670 * C956 +
                      C93850 * C1262 + C47669 * C955 + C93855 * C1261) *
                         C59272 +
                     (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                      C93850 * C890 + C47669 * C807 + C93855 * C889) *
                         C59425) *
                        C93585 * C93639 * C801 +
                    ((C47669 * C808 + C93855 * C890 + C47670 * C4897 +
                      C93850 * C5016 + C47671 * C15550 + C47572 * C15666) *
                         C59425 +
                     (C47669 * C956 + C93855 * C1262 + C47670 * C5096 +
                      C93850 * C5598 + C47671 * C15744 + C47572 * C16231) *
                         C59272 +
                     (C47669 * C8520 + C93855 * C8645 + C47670 * C19095 +
                      C93850 * C19221 + C47671 * C22854 + C47572 * C22942) *
                         C59426 +
                     (C47669 * C8749 + C93855 * C9305 + C47670 * C19323 +
                      C93850 * C19884 + C47671 * C23010 + C47572 * C23398) *
                         C93718) *
                        C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C59425 +
                     (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                      C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                         C59272 +
                     (C47669 * C1388 + C93855 * C1470 + C47670 * C3409 +
                      C93850 * C3491 + C47671 * C8520 + C47572 * C8645) *
                         C59426 +
                     (C47669 * C1536 + C93855 * C1842 + C47670 * C3565 +
                      C93850 * C3923 + C47671 * C8749 + C47572 * C9305) *
                         C93718) *
                        C93585 * C93639 * C93625 * C97 -
                    ((C51627 + C51628 + C51629) * C93718 +
                     (C51006 + C51007 + C51008) * C59426 +
                     (C48224 + C48223 + C48222) * C59272 +
                     (C47699 + C47698 + C47697) * C59425) *
                        C93585 * C93639 * C93625 * C98 +
                    ((C47708 + C47707 + C47706) * C59425 +
                     (C48227 + C48226 + C48225) * C59272 +
                     (C47669 * C1386 + C93855 * C1468 + C47670 * C3411 +
                      C93850 * C3493 + C47671 * C8522 + C47572 * C8647) *
                         C59426 +
                     (C47669 * C1534 + C93855 * C1840 + C47670 * C3567 +
                      C93850 * C3925 + C47671 * C8751 + C47572 * C9307) *
                         C93718) *
                        C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C59425 +
                     (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                      C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                         C59272 +
                     (C83421 + C83422 + C83423) * C59426 +
                     (C83934 + C83935 + C83936) * C93718) *
                        C93585 * C1382 -
                    ((C83937 + C83938 + C83939) * C93718 +
                     (C83430 + C83431 + C83432) * C59426 +
                     (C83936 + C83935 + C83934) * C59272 +
                     (C83423 + C83422 + C83421) * C59425) *
                        C93585 * C1383 +
                    ((C83432 + C83431 + C83430) * C59425 +
                     (C83939 + C83938 + C83937) * C59272 +
                     (C47669 * C10964 + C93855 * C11080 + C47670 * C25001 +
                      C93850 * C25104 + C47671 * C25002 + C47572 * C25105) *
                         C59426 +
                     (C47669 * C11196 + C93855 * C11667 + C47670 * C25218 +
                      C93850 * C25681 + C47671 * C25219 + C47572 * C25682) *
                         C93718) *
                        C93585 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eezz[22] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                      C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                         C93855 +
                     (C66147 + C66148) * C93850 + C83236 * C47572) *
                        C93585 * C93639 * C800 -
                    ((C83247 + C83248) * C47572 + (C66151 + C66152) * C93850 +
                     (C66148 + C66147) * C93855) *
                        C93585 * C93639 * C801 +
                    (C83236 * C93855 + (C83248 + C83247) * C93850 +
                     (C59946 * C15550 + C83241 + C83241 + C59272 * C16307 +
                      C59947 * C22854 + C83242 + C83242 + C93718 * C23465) *
                         C47572) *
                        C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                      C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                         C93855 +
                     (C66147 + C66148) * C93850 + (C66152 + C66151) * C47572) *
                        C93585 * C93639 * C93625 * C97 -
                    ((C66149 + C66150) * C47572 + C68244 * C93850 +
                     (C59984 + C59983) * C93855) *
                        C93585 * C93639 * C93625 * C98 +
                    (C59989 * C93855 + (C62397 + C62396) * C93850 +
                     (C59946 * C810 + C60667 + C60667 + C59272 * C1322 +
                      C59947 * C8522 + C60668 + C60668 + C93718 * C9408) *
                         C47572) *
                        C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                      C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                         C93855 +
                     (C66147 + C66148) * C93850 + C83236 * C47572) *
                        C93585 * C1382 -
                    ((C59947 * C16395 + C70644 + C70644 + C93718 * C17035 +
                      C59946 * C8520 + C70643 + C70643 + C59272 * C9406) *
                         C47572 +
                     (C70651 + C70652) * C93850 +
                     (C59947 * C1389 + C61444 + C61444 + C93718 * C1901 +
                      C59946 * C1388 + C61445 + C61445 + C59272 * C1900) *
                         C93855) *
                        C93585 * C1383 +
                    ((C59946 * C1389 + C61446 + C61446 + C59272 * C1901 +
                      C59947 * C10964 + C61447 + C61447 + C93718 * C11756) *
                         C93855 +
                     (C59946 * C5775 + C67035 + C67035 + C59272 * C6427 +
                      C59947 * C25001 + C67036 + C67036 + C93718 * C25775) *
                         C93850 +
                     (C59946 * C16395 + C84014 + C84014 + C59272 * C17035 +
                      C59947 * C25002 + C84015 + C84015 + C93718 * C25776) *
                         C47572) *
                        C93585 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C59272 +
             C25027 * C93718) *
                C93855 +
            (C82595 + C82596) * C93850 + C82601 * C47572) *
               C2695 -
           ((C25028 * C93718 + C22872 * C59272) * C47572 +
            (C25029 * C93718 + C22873 * C59272) * C93850 +
            (C25030 * C93718 + C25027 * C59272) * C93855) *
               C2696) *
              C93625 * C1981 +
          (((C26841 * C59272 + C37156 * C93718) * C93855 +
            (C25892 * C59272 + C36249 * C93718) * C93850 +
            (C25893 * C59272 +
             (C20048 * C16396 + C26838 + C26838 + C93585 * C16400) * C93718) *
                C47572) *
               C2696 -
           ((C84117 + C84116) * C47572 + (C84115 + C84114) * C93850 +
            (C26841 * C93718 +
             (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C59272) *
                C93855) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexy[23] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                        C93850 * C889 + C47671 * C808 + C47572 * C890) *
                           C20049 +
                       (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                        C93850 * C897 + C47671 * C816 + C47572 * C898) *
                           C93585) *
                          C59272 +
                      ((C83421 + C83422 + C83423) * C20049 +
                       (C83424 + C83425 + C83426) * C93585) *
                          C93718) *
                         C2695 -
                     (((C83427 + C83428 + C83429) * C93585 +
                       (C83430 + C83431 + C83432) * C20049) *
                          C93718 +
                      ((C83426 + C83425 + C83424) * C93585 +
                       (C83423 + C83422 + C83421) * C20049) *
                          C59272) *
                         C2696) *
                        C93625 * C1981 +
                    ((((C51008 + C51007 + C51006) * C20049 +
                       (C51005 + C51004 + C51003) * C93585) *
                          C59272 +
                      ((C47669 * C1390 + C93855 * C1472 + C47670 * C5776 +
                        C93850 * C5871 + C47671 * C16396 + C47572 * C16488) *
                           C20049 +
                       (C47669 * C1398 + C93855 * C1480 + C47670 * C5779 +
                        C93850 * C5874 + C47671 * C16398 + C47572 * C16490) *
                           C93585) *
                          C93718) *
                         C2696 -
                     (((C51003 + C51004 + C51005) * C93585 +
                       (C51006 + C51007 + C51008) * C20049) *
                          C93718 +
                      ((C47702 + C47701 + C47700) * C93585 +
                       (C47699 + C47698 + C47697) * C20049) *
                          C59272) *
                         C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C20049 +
             (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                 C93585) *
                C93855 +
            ((C65499 + C65500) * C20049 + (C65501 + C65502) * C93585) * C93850 +
            C82766 * C47572) *
               C2695 -
           (((C59426 * C16397 + C93718 * C16567 + C59425 * C8523 +
              C59272 * C8752) *
                 C93585 +
             (C59426 * C16395 + C93718 * C16565 + C59425 * C8520 +
              C59272 * C8749) *
                 C20049) *
                C47572 +
            ((C69849 + C69850) * C93585 + (C69851 + C69852) * C20049) * C93850 +
            ((C59426 * C1397 + C93718 * C1545 + C59425 * C1396 +
              C59272 * C1544) *
                 C93585 +
             (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
              C59272 * C1536) *
                 C20049) *
                C93855) *
               C2696) *
              C93625 * C1981 +
          ((((C62741 + C62740) * C20049 + (C62739 + C62738) * C93585) * C93855 +
            ((C68650 + C68649) * C20049 + (C68648 + C68647) * C93585) * C93850 +
            ((C59425 * C8521 + C59272 * C8750 + C59426 * C16396 +
              C93718 * C16566) *
                 C20049 +
             (C59425 * C8524 + C59272 * C8753 + C59426 * C16398 +
              C93718 * C16568) *
                 C93585) *
                C47572) *
               C2696 -
           (((C65503 + C65504) * C93585 + (C65505 + C65506) * C20049) * C47572 +
            (C67443 * C93585 + C67444 * C20049) * C93850 +
            ((C59455 + C59454) * C93585 + (C59453 + C59452) * C20049) *
                C93855) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C47669 +
             (C20049 * C189 + C93585 * C362) * C93855 + C20749 * C47670 +
             C20750 * C93850 + C20751 * C47671 + C20752 * C47572) *
                C59272 +
            (C83581 + C83582 + C83583 + C83584 + C83585 + C83586) * C93718) *
               C2695 -
           ((C83587 + C83588 + C83589 + C83590 + C83591 + C83592) * C93718 +
            (C83586 + C83585 + C83584 + C83583 + C83582 + C83581) * C59272) *
               C2696) *
              C93625 * C1981 +
          (((C85302 + C85303 + C85304 + C85305 + C85306 + C85307) * C59272 +
            (C37473 * C47669 + C37474 * C93855 + C36549 * C47670 +
             C36550 * C93850 + (C20049 * C16396 + C93585 * C16398) * C47671 +
             (C20049 * C16488 + C93585 * C16644) * C47572) *
                C93718) *
               C2696 -
           ((C85307 + C85306 + C85305 + C85304 + C85303 + C85302) * C93718 +
            (C21835 * C47572 + C21834 * C47671 + C21833 * C93850 +
             C21832 * C47670 + (C20049 * C190 + C93585 * C363) * C93855 +
             (C20049 * C109 + C93585 * C115) * C47669) *
                C59272) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[23] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                       C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                       C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                          C93585 * C59272 +
                      (C83694 + C83695 + C83696) * C93585 * C93718) *
                         C2695 -
                     ((C83697 + C83698 + C83699) * C93585 * C93718 +
                      (C83696 + C83695 + C83694) * C93585 * C59272) *
                         C2696) *
                        C93625 * C1981 +
                    (((C51320 + C51319 + C51318) * C93585 * C59272 +
                      (C47930 * C1390 + C49488 + C49488 + C93855 * C1662 +
                       C47931 * C5776 + C49489 + C49489 + C93850 * C6108 +
                       C47932 * C16396 + C49490 + C49490 + C47572 * C16720) *
                          C93585 * C93718) *
                         C2696 -
                     ((C51318 + C51319 + C51320) * C93585 * C93718 +
                      (C47972 + C47971 + C47970) * C93585 * C59272) *
                         C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C47669 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93855 +
            (C65499 + C65500) * C47670 + (C65819 + C65820) * C93850 +
            C82750 * C47671 + C82992 * C47572) *
               C93585 * C2695 -
           ((C59426 * C16487 + C93718 * C16807 + C59425 * C8645 +
             C59272 * C9091) *
                C47572 +
            (C59426 * C16395 + C93718 * C16565 + C59425 * C8520 +
             C59272 * C8749) *
                C47671 +
            (C70247 + C70248) * C93850 + (C69851 + C69852) * C47670 +
            (C59426 * C1471 + C93718 * C1727 + C59425 * C1470 +
             C59272 * C1726) *
                C93855 +
            (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
             C59272 * C1536) *
                C47669) *
               C93585 * C2696) *
              C93625 * C1981 +
          (((C62741 + C62740) * C47669 + (C63068 + C63067) * C93855 +
            (C68650 + C68649) * C47670 + (C69048 + C69047) * C93850 +
            (C59425 * C8521 + C59272 * C8750 + C59426 * C16396 +
             C93718 * C16566) *
                C47671 +
            (C59425 * C8646 + C59272 * C9092 + C59426 * C16488 +
             C93718 * C16808) *
                C47572) *
               C93585 * C2696 -
           ((C65821 + C65822) * C47572 + (C65505 + C65506) * C47671 +
            C67846 * C93850 + C67444 * C47670 + (C59702 + C59701) * C93855 +
            (C59453 + C59452) * C47669) *
               C93585 * C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C59425 +
             (C20049 * C276 + C93585 * C579) * C59272 + C25319 * C59426 +
             C25604 * C93718) *
                C93855 +
            (C83073 + C83074 + C83075 + C83076) * C93850 + C83087 * C47572) *
               C2695 -
           ((C25605 * C93718 + C25322 * C59426 + C23328 * C59272 +
             C23107 * C59425) *
                C47572 +
            (C25606 * C93718 + C25324 * C59426 + C23329 * C59272 +
             C23109 * C59425) *
                C93850 +
            (C25607 * C93718 + C25326 * C59426 + C25604 * C59272 +
             C25319 * C59425) *
                C93855) *
               C2696) *
              C93625 * C1981 +
          (((C27144 * C59425 + C27444 * C59272 + C37473 * C59426 +
             C37785 * C93718) *
                C93855 +
            (C26210 * C59425 + C26524 * C59272 + C36549 * C59426 +
             C36854 * C93718) *
                C93850 +
            (C26212 * C59425 + C26525 * C59272 +
             (C20049 * C16396 + C93585 * C16398) * C59426 +
             (C20049 * C16566 + C93585 * C16884) * C93718) *
                C47572) *
               C2696 -
           ((C84713 + C84712 + C84711 + C84710) * C47572 +
            (C84709 + C84708 + C84707 + C84706) * C93850 +
            (C27444 * C93718 + C27144 * C59426 +
             (C20049 * C277 + C93585 * C580) * C59272 +
             (C20049 * C109 + C93585 * C115) * C59425) *
                C93855) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[23] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                       C93850 * C889 + C47671 * C808 + C47572 * C890) *
                          C59425 +
                      (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                       C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                          C59272 +
                      (C83421 + C83422 + C83423) * C59426 +
                      (C83934 + C83935 + C83936) * C93718) *
                         C93585 * C2695 -
                     ((C83937 + C83938 + C83939) * C93718 +
                      (C83430 + C83431 + C83432) * C59426 +
                      (C83936 + C83935 + C83934) * C59272 +
                      (C83423 + C83422 + C83421) * C59425) *
                         C93585 * C2696) *
                        C93625 * C1981 +
                    (((C51008 + C51007 + C51006) * C59425 +
                      (C51629 + C51628 + C51627) * C59272 +
                      (C47669 * C1390 + C93855 * C1472 + C47670 * C5776 +
                       C93850 * C5871 + C47671 * C16396 + C47572 * C16488) *
                          C59426 +
                      (C47669 * C1538 + C93855 * C1844 + C47670 * C5951 +
                       C93850 * C6351 + C47671 * C16566 + C47572 * C16960) *
                          C93718) *
                         C93585 * C2696 -
                     ((C51627 + C51628 + C51629) * C93718 +
                      (C51006 + C51007 + C51008) * C59426 +
                      (C48224 + C48223 + C48222) * C59272 +
                      (C47699 + C47698 + C47697) * C59425) *
                         C93585 * C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[23] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                       C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                          C93855 +
                      (C66147 + C66148) * C93850 + C83236 * C47572) *
                         C93585 * C2695 -
                     ((C59947 * C16395 + C70644 + C70644 + C93718 * C17035 +
                       C59946 * C8520 + C70643 + C70643 + C59272 * C9406) *
                          C47572 +
                      (C70651 + C70652) * C93850 +
                      (C59947 * C1389 + C61444 + C61444 + C93718 * C1901 +
                       C59946 * C1388 + C61445 + C61445 + C59272 * C1900) *
                          C93855) *
                         C93585 * C2696) *
                        C93625 * C1981 +
                    (((C63401 + C63400) * C93855 + (C69450 + C69449) * C93850 +
                      (C59946 * C8521 + C70645 + C70645 + C59272 * C9407 +
                       C59947 * C16396 + C70646 + C70646 + C93718 * C17036) *
                          C47572) *
                         C93585 * C2696 -
                     ((C66149 + C66150) * C47572 + C68244 * C93850 +
                      (C59984 + C59983) * C93855) *
                         C93585 * C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C59272 +
            C25027 * C93718) *
               C93855 +
           (C20554 * C59272 + C22873 * C93718) * C93850 +
           (C20555 * C59272 + C22872 * C93718) * C47572) *
              C93639 * C93625 * C97 -
          ((C25893 * C93718 + C21611 * C59272) * C47572 +
           (C25892 * C93718 + C21610 * C59272) * C93850 +
           (C26841 * C93718 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C59272) *
               C93855) *
              C93639 * C93625 * C98 +
          (((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C59272 +
            (C20048 * C1386 + C23547 + C23547 + C93585 * C1402) * C93718) *
               C93855 +
           ((C20048 * C805 + C20060 + C20060 + C93585 * C821) * C59272 +
            (C20048 * C3411 + C23548 + C23548 + C93585 * C3419) * C93718) *
               C93850 +
           ((C20048 * C810 + C20061 + C20061 + C93585 * C826) * C59272 +
            (C20048 * C8522 + C23549 + C23549 + C93585 * C8528) * C93718) *
               C47572) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C59272 +
            C25027 * C93718) *
               C93855 +
           (C82595 + C82596) * C93850 + C82601 * C47572) *
              C93639 * C800 -
          ((C82599 + C82600) * C47572 + (C82598 + C82597) * C93850 +
           (C82596 + C82595) * C93855) *
              C93639 * C801 +
          (C82601 * C93855 + (C82600 + C82599) * C93850 +
           (C20557 * C59272 +
            (C20048 * C22854 + C22864 + C22864 + C93585 * C22856) * C93718) *
               C47572) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[24] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                       C93850 * C889 + C47671 * C808 + C47572 * C890) *
                          C20049 +
                      (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                       C93850 * C897 + C47671 * C816 + C47572 * C898) *
                          C93585) *
                         C59272 +
                     ((C47669 * C1388 + C93855 * C1470 + C47670 * C3409 +
                       C93850 * C3491 + C47671 * C8520 + C47572 * C8645) *
                          C20049 +
                      (C47669 * C1396 + C93855 * C1478 + C47670 * C3413 +
                       C93850 * C3495 + C47671 * C8523 + C47572 * C8648) *
                          C93585) *
                         C93718) *
                        C93639 * C93625 * C97 -
                    (((C51003 + C51004 + C51005) * C93585 +
                      (C51006 + C51007 + C51008) * C20049) *
                         C93718 +
                     ((C47702 + C47701 + C47700) * C93585 +
                      (C47699 + C47698 + C47697) * C20049) *
                         C59272) *
                        C93639 * C93625 * C98 +
                    (((C47708 + C47707 + C47706) * C20049 +
                      (C47705 + C47704 + C47703) * C93585) *
                         C59272 +
                     ((C47669 * C1386 + C93855 * C1468 + C47670 * C3411 +
                       C93850 * C3493 + C47671 * C8522 + C47572 * C8647) *
                          C20049 +
                      (C47669 * C1394 + C93855 * C1476 + C47670 * C3415 +
                       C93850 * C3497 + C47671 * C8525 + C47572 * C8650) *
                          C93585) *
                         C93718) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                       C93850 * C889 + C47671 * C808 + C47572 * C890) *
                          C20049 +
                      (C47669 * C114 + C93855 * C195 + C47670 * C815 +
                       C93850 * C897 + C47671 * C816 + C47572 * C898) *
                          C93585) *
                         C59272 +
                     ((C47669 * C1388 + C93855 * C1470 + C47670 * C3409 +
                       C93850 * C3491 + C47671 * C8520 + C47572 * C8645) *
                          C20049 +
                      (C47669 * C1396 + C93855 * C1478 + C47670 * C3413 +
                       C93850 * C3495 + C47671 * C8523 + C47572 * C8648) *
                          C93585) *
                         C93718) *
                        C93639 * C800 -
                    (((C47671 * C19097 + C47572 * C19223 + C47670 * C8523 +
                       C93850 * C8648 + C47669 * C3413 + C93855 * C3495) *
                          C93585 +
                      (C47671 * C19095 + C47572 * C19221 + C47670 * C8520 +
                       C93850 * C8645 + C47669 * C3409 + C93855 * C3491) *
                          C20049) *
                         C93718 +
                     ((C47671 * C4900 + C47572 * C5019 + C47670 * C816 +
                       C93850 * C898 + C47669 * C815 + C93855 * C897) *
                          C93585 +
                      (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                       C93850 * C890 + C47669 * C807 + C93855 * C889) *
                          C20049) *
                         C59272) *
                        C93639 * C801 +
                    (((C47669 * C808 + C93855 * C890 + C47670 * C4897 +
                       C93850 * C5016 + C47671 * C15550 + C47572 * C15666) *
                          C20049 +
                      (C47669 * C816 + C93855 * C898 + C47670 * C4900 +
                       C93850 * C5019 + C47671 * C15552 + C47572 * C15668) *
                          C93585) *
                         C59272 +
                     ((C47669 * C8520 + C93855 * C8645 + C47670 * C19095 +
                       C93850 * C19221 + C47671 * C22854 + C47572 * C22942) *
                          C20049 +
                      (C47669 * C8523 + C93855 * C8648 + C47670 * C19097 +
                       C93850 * C19223 + C47671 * C22855 + C47572 * C22943) *
                          C93585) *
                         C93718) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C20049 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93585) *
               C93855 +
           ((C65499 + C65500) * C20049 + (C65501 + C65502) * C93585) * C93850 +
           ((C65510 + C65509) * C20049 + (C65508 + C65507) * C93585) * C47572) *
              C93639 * C93625 * C97 -
          (((C65503 + C65504) * C93585 + (C65505 + C65506) * C20049) * C47572 +
           (C67443 * C93585 + C67444 * C20049) * C93850 +
           ((C59455 + C59454) * C93585 + (C59453 + C59452) * C20049) * C93855) *
              C93639 * C93625 * C98 +
          ((C59464 * C20049 + C59465 * C93585) * C93855 +
           ((C61765 + C61764) * C20049 + (C61763 + C61762) * C93585) * C93850 +
           ((C59425 * C810 + C59272 * C958 + C59426 * C8522 + C93718 * C8751) *
                C20049 +
            (C59425 * C818 + C59272 * C966 + C59426 * C8525 + C93718 * C8754) *
                C93585) *
               C47572) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C20049 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93585) *
               C93855 +
           ((C65499 + C65500) * C20049 + (C65501 + C65502) * C93585) * C93850 +
           C82766 * C47572) *
              C93639 * C800 -
          (((C82762 + C82763) * C93585 + (C82764 + C82765) * C20049) * C47572 +
           ((C65507 + C65508) * C93585 + (C65509 + C65510) * C20049) * C93850 +
           ((C65502 + C65501) * C93585 + (C65500 + C65499) * C20049) * C93855) *
              C93639 * C801 +
          (C82766 * C93855 +
           ((C82765 + C82764) * C20049 + (C82763 + C82762) * C93585) * C93850 +
           ((C59425 * C15550 + C59272 * C15744 + C59426 * C22854 +
             C93718 * C23010) *
                C20049 +
            (C59425 * C15552 + C59272 * C15746 + C59426 * C22855 +
             C93718 * C23011) *
                C93585) *
               C47572) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C47669 +
            (C20049 * C189 + C93585 * C362) * C93855 + C20749 * C47670 +
            C20750 * C93850 + C20751 * C47671 + C20752 * C47572) *
               C59272 +
           (C25319 * C47669 + C25320 * C93855 + C23109 * C47670 +
            C23108 * C93850 + C23107 * C47671 + C23106 * C47572) *
               C93718) *
              C93639 * C93625 * C97 -
          ((C26213 * C47572 + C26212 * C47671 + C26211 * C93850 +
            C26210 * C47670 + C27145 * C93855 + C27144 * C47669) *
               C93718 +
           (C21835 * C47572 + C21834 * C47671 + C21833 * C93850 +
            C21832 * C47670 + (C20049 * C190 + C93585 * C363) * C93855 +
            (C20049 * C109 + C93585 * C115) * C47669) *
               C59272) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C47669 +
            (C20049 * C191 + C93585 * C364) * C93855 +
            (C20049 * C805 + C93585 * C813) * C47670 +
            (C20049 * C887 + C93585 * C1019) * C93850 +
            (C20049 * C810 + C93585 * C818) * C47671 +
            (C20049 * C892 + C93585 * C1024) * C47572) *
               C59272 +
           ((C20049 * C1386 + C93585 * C1394) * C47669 +
            (C20049 * C1468 + C93585 * C1600) * C93855 +
            (C20049 * C3411 + C93585 * C3415) * C47670 +
            (C20049 * C3493 + C93585 * C3641) * C93850 +
            (C20049 * C8522 + C93585 * C8525) * C47671 +
            (C20049 * C8647 + C93585 * C8867) * C47572) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C47669 +
            (C20049 * C189 + C93585 * C362) * C93855 + C20749 * C47670 +
            C20750 * C93850 + C20751 * C47671 + C20752 * C47572) *
               C59272 +
           (C25319 * C47669 + C25320 * C93855 + C23109 * C47670 +
            C23108 * C93850 + C23107 * C47671 + C23106 * C47572) *
               C93718) *
              C93639 * C800 -
          ((C23104 * C47572 + C23105 * C47671 + C23106 * C93850 +
            C23107 * C47670 + C23108 * C93855 + C23109 * C47669) *
               C93718 +
           (C20754 * C47572 + C20753 * C47671 + C20752 * C93850 +
            C20751 * C47670 + C20750 * C93855 + C20749 * C47669) *
               C59272) *
              C93639 * C801 +
          ((C20751 * C47669 + C20752 * C93855 + C20753 * C47670 +
            C20754 * C93850 + C20756 * C47671 + C20755 * C47572) *
               C59272 +
           (C23107 * C47669 + C23106 * C93855 + C23105 * C47670 +
            C23104 * C93850 + (C20049 * C22854 + C93585 * C22855) * C47671 +
            (C20049 * C22942 + C93585 * C23090) * C47572) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[24] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                      C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                      C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                         C93585 * C59272 +
                     (C47930 * C1388 + C49484 + C49484 + C93855 * C1660 +
                      C47931 * C3409 + C49483 + C49483 + C93850 * C3709 +
                      C47932 * C8520 + C49482 + C49482 + C47572 * C8984) *
                         C93585 * C93718) *
                        C93639 * C93625 * C97 -
                    ((C51318 + C51319 + C51320) * C93585 * C93718 +
                     (C47972 + C47971 + C47970) * C93585 * C59272) *
                        C93639 * C93625 * C98 +
                    ((C47975 + C47974 + C47973) * C93585 * C59272 +
                     (C47930 * C1386 + C51309 + C51309 + C93855 * C1658 +
                      C47931 * C3411 + C51310 + C51310 + C93850 * C3711 +
                      C47932 * C8522 + C51311 + C51311 + C47572 * C8986) *
                         C93585 * C93718) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C47930 * C108 + C47934 + C47934 + C93855 * C419 +
                      C47931 * C807 + C47935 + C47935 + C93850 * C1079 +
                      C47932 * C808 + C47936 + C47936 + C47572 * C1080) *
                         C93585 * C59272 +
                     (C47930 * C1388 + C49484 + C49484 + C93855 * C1660 +
                      C47931 * C3409 + C49483 + C49483 + C93850 * C3709 +
                      C47932 * C8520 + C49482 + C49482 + C47572 * C8984) *
                         C93585 * C93718) *
                        C93639 * C800 -
                    ((C47932 * C19095 + C52277 + C52277 + C47572 * C19563 +
                      C47931 * C8520 + C52276 + C52276 + C93850 * C8984 +
                      C47930 * C3409 + C52275 + C52275 + C93855 * C3709) *
                         C93585 * C93718 +
                     (C47932 * C4897 + C48770 + C48770 + C47572 * C5325 +
                      C47931 * C808 + C48771 + C48771 + C93850 * C1080 +
                      C47930 * C807 + C48772 + C48772 + C93855 * C1079) *
                         C93585 * C59272) *
                        C93639 * C801 +
                    ((C47930 * C808 + C48773 + C48773 + C93855 * C1080 +
                      C47931 * C4897 + C48774 + C48774 + C93850 * C5325 +
                      C47932 * C15550 + C48775 + C48775 + C47572 * C15963) *
                         C93585 * C59272 +
                     (C47930 * C8520 + C82915 + C82915 + C93855 * C8984 +
                      C47931 * C19095 + C82916 + C82916 + C93850 * C19563 +
                      C47932 * C22854 + C82917 + C82917 + C47572 * C23175) *
                         C93585 * C93718) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
               C47669 +
           (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
               C93855 +
           (C65499 + C65500) * C47670 + (C65819 + C65820) * C93850 +
           (C65510 + C65509) * C47671 + (C65824 + C65823) * C47572) *
              C93585 * C93639 * C93625 * C97 -
          ((C65821 + C65822) * C47572 + (C65505 + C65506) * C47671 +
           C67846 * C93850 + C67444 * C47670 + (C59702 + C59701) * C93855 +
           (C59453 + C59452) * C47669) *
              C93585 * C93639 * C93625 * C98 +
          (C59464 * C47669 + C59707 * C93855 + (C61765 + C61764) * C47670 +
           (C62073 + C62072) * C93850 +
           (C59425 * C810 + C59272 * C958 + C59426 * C8522 + C93718 * C8751) *
               C47671 +
           (C59425 * C892 + C59272 * C1148 + C59426 * C8647 + C93718 * C9093) *
               C47572) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
               C47669 +
           (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
               C93855 +
           (C65499 + C65500) * C47670 + (C65819 + C65820) * C93850 +
           C82750 * C47671 + C82992 * C47572) *
              C93585 * C93639 * C800 -
          ((C82997 + C82998) * C47572 + (C82764 + C82765) * C47671 +
           (C65823 + C65824) * C93850 + (C65509 + C65510) * C47670 +
           (C65820 + C65819) * C93855 + (C65500 + C65499) * C47669) *
              C93585 * C93639 * C801 +
          (C82750 * C47669 + C82992 * C93855 + (C82765 + C82764) * C47670 +
           (C82998 + C82997) * C93850 +
           (C59425 * C15550 + C59272 * C15744 + C59426 * C22854 +
            C93718 * C23010) *
               C47671 +
           (C59425 * C15666 + C59272 * C16051 + C59426 * C22942 +
            C93718 * C23246) *
               C47572) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C59425 +
            (C20049 * C276 + C93585 * C579) * C59272 + C25319 * C59426 +
            C25604 * C93718) *
               C93855 +
           (C20749 * C59425 + C20933 * C59272 + C23109 * C59426 +
            C23329 * C93718) *
               C93850 +
           (C20751 * C59425 + C20934 * C59272 + C23107 * C59426 +
            C23328 * C93718) *
               C47572) *
              C93639 * C93625 * C97 -
          ((C26525 * C93718 + C26212 * C59426 + C22050 * C59272 +
            C21834 * C59425) *
               C47572 +
           (C26524 * C93718 + C26210 * C59426 + C22049 * C59272 +
            C21832 * C59425) *
               C93850 +
           (C27444 * C93718 + C27144 * C59426 +
            (C20049 * C277 + C93585 * C580) * C59272 +
            (C20049 * C109 + C93585 * C115) * C59425) *
               C93855) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C59425 +
            (C20049 * C278 + C93585 * C581) * C59272 +
            (C20049 * C1386 + C93585 * C1394) * C59426 +
            (C20049 * C1534 + C93585 * C1782) * C93718) *
               C93855 +
           ((C20049 * C805 + C93585 * C813) * C59425 +
            (C20049 * C953 + C93585 * C1201) * C59272 +
            (C20049 * C3411 + C93585 * C3415) * C59426 +
            (C20049 * C3567 + C93585 * C3855) * C93718) *
               C93850 +
           ((C20049 * C810 + C93585 * C818) * C59425 +
            (C20049 * C958 + C93585 * C1206) * C59272 +
            (C20049 * C8522 + C93585 * C8525) * C59426 +
            (C20049 * C8751 + C93585 * C9197) * C93718) *
               C47572) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C59425 +
            (C20049 * C276 + C93585 * C579) * C59272 + C25319 * C59426 +
            C25604 * C93718) *
               C93855 +
           (C83073 + C83074 + C83075 + C83076) * C93850 + C83087 * C47572) *
              C93639 * C800 -
          ((C83081 + C83082 + C83083 + C83084) * C47572 +
           (C83080 + C83079 + C83078 + C83077) * C93850 +
           (C83076 + C83075 + C83074 + C83073) * C93855) *
              C93639 * C801 +
          (C83087 * C93855 + (C83084 + C83083 + C83082 + C83081) * C93850 +
           (C20756 * C59425 + C20936 * C59272 +
            (C20049 * C22854 + C93585 * C22855) * C59426 +
            (C20049 * C23010 + C93585 * C23316) * C93718) *
               C47572) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[24] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C59425 +
                     (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                      C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                         C59272 +
                     (C47669 * C1388 + C93855 * C1470 + C47670 * C3409 +
                      C93850 * C3491 + C47671 * C8520 + C47572 * C8645) *
                         C59426 +
                     (C47669 * C1536 + C93855 * C1842 + C47670 * C3565 +
                      C93850 * C3923 + C47671 * C8749 + C47572 * C9305) *
                         C93718) *
                        C93585 * C93639 * C93625 * C97 -
                    ((C51627 + C51628 + C51629) * C93718 +
                     (C51006 + C51007 + C51008) * C59426 +
                     (C48224 + C48223 + C48222) * C59272 +
                     (C47699 + C47698 + C47697) * C59425) *
                        C93585 * C93639 * C93625 * C98 +
                    ((C47708 + C47707 + C47706) * C59425 +
                     (C48227 + C48226 + C48225) * C59272 +
                     (C47669 * C1386 + C93855 * C1468 + C47670 * C3411 +
                      C93850 * C3493 + C47671 * C8522 + C47572 * C8647) *
                         C59426 +
                     (C47669 * C1534 + C93855 * C1840 + C47670 * C3567 +
                      C93850 * C3925 + C47671 * C8751 + C47572 * C9307) *
                         C93718) *
                        C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C47669 * C108 + C93855 * C189 + C47670 * C807 +
                      C93850 * C889 + C47671 * C808 + C47572 * C890) *
                         C59425 +
                     (C47669 * C276 + C93855 * C635 + C47670 * C955 +
                      C93850 * C1261 + C47671 * C956 + C47572 * C1262) *
                         C59272 +
                     (C47669 * C1388 + C93855 * C1470 + C47670 * C3409 +
                      C93850 * C3491 + C47671 * C8520 + C47572 * C8645) *
                         C59426 +
                     (C47669 * C1536 + C93855 * C1842 + C47670 * C3565 +
                      C93850 * C3923 + C47671 * C8749 + C47572 * C9305) *
                         C93718) *
                        C93585 * C93639 * C800 -
                    ((C47671 * C19323 + C47572 * C19884 + C47670 * C8749 +
                      C93850 * C9305 + C47669 * C3565 + C93855 * C3923) *
                         C93718 +
                     (C47671 * C19095 + C47572 * C19221 + C47670 * C8520 +
                      C93850 * C8645 + C47669 * C3409 + C93855 * C3491) *
                         C59426 +
                     (C47671 * C5096 + C47572 * C5598 + C47670 * C956 +
                      C93850 * C1262 + C47669 * C955 + C93855 * C1261) *
                         C59272 +
                     (C47671 * C4897 + C47572 * C5016 + C47670 * C808 +
                      C93850 * C890 + C47669 * C807 + C93855 * C889) *
                         C59425) *
                        C93585 * C93639 * C801 +
                    ((C47669 * C808 + C93855 * C890 + C47670 * C4897 +
                      C93850 * C5016 + C47671 * C15550 + C47572 * C15666) *
                         C59425 +
                     (C47669 * C956 + C93855 * C1262 + C47670 * C5096 +
                      C93850 * C5598 + C47671 * C15744 + C47572 * C16231) *
                         C59272 +
                     (C47669 * C8520 + C93855 * C8645 + C47670 * C19095 +
                      C93850 * C19221 + C47671 * C22854 + C47572 * C22942) *
                         C59426 +
                     (C47669 * C8749 + C93855 * C9305 + C47670 * C19323 +
                      C93850 * C19884 + C47671 * C23010 + C47572 * C23398) *
                         C93718) *
                        C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eezz[24] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                      C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                         C93855 +
                     (C66147 + C66148) * C93850 + (C66152 + C66151) * C47572) *
                        C93585 * C93639 * C93625 * C97 -
                    ((C66149 + C66150) * C47572 + C68244 * C93850 +
                     (C59984 + C59983) * C93855) *
                        C93585 * C93639 * C93625 * C98 +
                    (C59989 * C93855 + (C62397 + C62396) * C93850 +
                     (C59946 * C810 + C60667 + C60667 + C59272 * C1322 +
                      C59947 * C8522 + C60668 + C60668 + C93718 * C9408) *
                         C47572) *
                        C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                      C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                         C93855 +
                     (C66147 + C66148) * C93850 + C83236 * C47572) *
                        C93585 * C93639 * C800 -
                    ((C83247 + C83248) * C47572 + (C66151 + C66152) * C93850 +
                     (C66148 + C66147) * C93855) *
                        C93585 * C93639 * C801 +
                    (C83236 * C93855 + (C83248 + C83247) * C93850 +
                     (C59946 * C15550 + C83241 + C83241 + C59272 * C16307 +
                      C59947 * C22854 + C83242 + C83242 + C93718 * C23465) *
                         C47572) *
                        C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93856 +
             C25027 * C93853 + C25030 * C70728) *
                C42379 +
            (C87513 + C87514 + C87515) * C93694) *
               C93639 * C1979 -
           ((C87516 + C87517 + C87518) * C93694 +
            (C87515 + C87514 + C87513) * C42379) *
               C93639 * C1980) *
              C1981 +
          (((C89032 + C89033 + C89034) * C42379 +
            (C21611 * C93856 + C25893 * C93853 +
             (C20048 * C16396 + C26838 + C26838 + C93585 * C16400) * C70728) *
                C93694) *
               C93639 * C1980 -
           ((C89034 + C89033 + C89032) * C93694 +
            (C37156 * C70728 + C26841 * C93853 +
             (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93856) *
                C42379) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C20049 +
             (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                 C93585) *
                C93856 +
            ((C54711 + C54712) * C20049 + (C54713 + C54714) * C93585) * C93853 +
            C88376 * C70728) *
               C93639 * C1979 -
           (((C42480 * C16397 + C93694 * C16489 + C42479 * C5778 +
              C42379 * C5873) *
                 C93585 +
             (C42480 * C16395 + C93694 * C16487 + C42479 * C5775 +
              C42379 * C5870) *
                 C20049) *
                C70728 +
            ((C58262 + C58261) * C93585 + (C58260 + C58259) * C20049) * C93853 +
            ((C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                 C93585 +
             (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                 C20049) *
                C93856) *
               C93639 * C1980) *
              C1981 +
          ((((C44832 + C44831) * C20049 + (C44830 + C44829) * C93585) * C93856 +
            ((C55798 + C55797) * C20049 + (C55796 + C55795) * C93585) * C93853 +
            ((C42479 * C5776 + C42379 * C5871 + C42480 * C16396 +
              C93694 * C16488) *
                 C20049 +
             (C42479 * C5779 + C42379 * C5874 + C42480 * C16398 +
              C93694 * C16490) *
                 C93585) *
                C70728) *
               C93639 * C1980 -
           (((C54715 + C54716) * C93585 + (C54717 + C54718) * C20049) * C70728 +
            (C57027 * C93585 + C57028 * C20049) * C93853 +
            ((C42509 + C42508) * C93585 + (C42507 + C42506) * C20049) *
                C93856) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                        C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                           C20049 +
                       (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                        C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                           C93585) *
                          C42379 +
                      ((C87691 + C87692 + C87693) * C20049 +
                       (C87694 + C87695 + C87696) * C93585) *
                          C93694) *
                         C93639 * C1979 -
                     (((C87697 + C87698 + C87699) * C93585 +
                       (C87700 + C87701 + C87702) * C20049) *
                          C93694 +
                      ((C87696 + C87695 + C87694) * C93585 +
                       (C87693 + C87692 + C87691) * C20049) *
                          C42379) *
                         C93639 * C1980) *
                        C1981 +
                    ((((C73164 + C73163 + C73162) * C20049 +
                       (C73161 + C73160 + C73159) * C93585) *
                          C42379 +
                      ((C70879 * C809 + C93856 * C957 + C70880 * C8521 +
                        C93853 * C8750 + C70881 * C16396 + C70728 * C16566) *
                           C20049 +
                       (C70879 * C817 + C93856 * C965 + C70880 * C8524 +
                        C93853 * C8753 + C70881 * C16398 + C70728 * C16568) *
                           C93585) *
                          C93694) *
                         C93639 * C1980 -
                     (((C73159 + C73160 + C73161) * C93585 +
                       (C73162 + C73163 + C73164) * C20049) *
                          C93694 +
                      ((C70912 + C70911 + C70910) * C93585 +
                       (C70909 + C70908 + C70907) * C20049) *
                          C42379) *
                         C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C42479 +
             (C20049 * C189 + C93585 * C362) * C42379 + C20749 * C42480 +
             C20750 * C93694) *
                C93856 +
            (C88525 + C88526 + C88527 + C88528) * C93853 + C88539 * C70728) *
               C93639 * C1979 -
           ((C25321 * C93694 + C25322 * C42480 + C25323 * C42379 +
             C25324 * C42479) *
                C70728 +
            (C23106 * C93694 + C23107 * C42480 + C23108 * C42379 +
             C23109 * C42479) *
                C93853 +
            (C20752 * C93694 + C20751 * C42480 + C20750 * C42379 +
             C20749 * C42479) *
                C93856) *
               C93639 * C1980) *
              C1981 +
          (((C21832 * C42479 + C21833 * C42379 + C21834 * C42480 +
             C21835 * C93694) *
                C93856 +
            (C26210 * C42479 + C26211 * C42379 + C26212 * C42480 +
             C26213 * C93694) *
                C93853 +
            (C36549 * C42479 + C36550 * C42379 +
             (C20049 * C16396 + C93585 * C16398) * C42480 +
             (C20049 * C16488 + C93585 * C16644) * C93694) *
                C70728) *
               C93639 * C1980 -
           ((C36550 * C93694 + C36549 * C42480 + C37474 * C42379 +
             C37473 * C42479) *
                C70728 +
            (C26211 * C93694 + C26210 * C42480 + C27145 * C42379 +
             C27144 * C42479) *
                C93853 +
            (C21833 * C93694 + C21832 * C42480 +
             (C20049 * C190 + C93585 * C363) * C42379 +
             (C20049 * C109 + C93585 * C115) * C42479) *
                C93856) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
             C42745 + C42745 + C93694 * C1079) *
                C93585 * C93856 +
            (C55081 + C55082) * C93585 * C93853 + C88621 * C70728) *
               C93639 * C1979 -
           ((C42742 * C16395 + C58662 + C58662 + C93694 * C16719 +
             C42741 * C5775 + C58661 + C58661 + C42379 * C6107) *
                C93585 * C70728 +
            (C58670 + C58669) * C93585 * C93853 +
            (C42742 * C808 + C43583 + C43583 + C93694 * C1080 + C42741 * C807 +
             C43584 + C43584 + C42379 * C1079) *
                C93585 * C93856) *
               C93639 * C1980) *
              C1981 +
          (((C45172 + C45171) * C93585 * C93856 +
            (C56214 + C56213) * C93585 * C93853 +
            (C42741 * C5776 + C58663 + C58663 + C42379 * C6108 +
             C42742 * C16396 + C58664 + C58664 + C93694 * C16720) *
                C93585 * C70728) *
               C93639 * C1980 -
           ((C55083 + C55084) * C93585 * C70728 + C57444 * C93585 * C93853 +
            (C42779 + C42778) * C93585 * C93856) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C42479 +
                      (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                       C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                          C42379 +
                      (C87691 + C87692 + C87693) * C42480 +
                      (C87939 + C87940 + C87941) * C93694) *
                         C93585 * C93639 * C1979 -
                     ((C87942 + C87943 + C87944) * C93694 +
                      (C87700 + C87701 + C87702) * C42480 +
                      (C87941 + C87940 + C87939) * C42379 +
                      (C87693 + C87692 + C87691) * C42479) *
                         C93585 * C93639 * C1980) *
                        C1981 +
                    (((C73164 + C73163 + C73162) * C42479 +
                      (C73467 + C73466 + C73465) * C42379 +
                      (C70879 * C809 + C93856 * C957 + C70880 * C8521 +
                       C93853 * C8750 + C70881 * C16396 + C70728 * C16566) *
                          C42480 +
                      (C70879 * C891 + C93856 * C1147 + C70880 * C8646 +
                       C93853 * C9092 + C70881 * C16488 + C70728 * C16808) *
                          C93694) *
                         C93585 * C93639 * C1980 -
                     ((C73465 + C73466 + C73467) * C93694 +
                      (C73162 + C73163 + C73164) * C42480 +
                      (C71155 + C71154 + C71153) * C42379 +
                      (C70909 + C70908 + C70907) * C42479) *
                         C93585 * C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C70879 +
             (C20049 * C276 + C93585 * C579) * C93856 + C25319 * C70880 +
             C25604 * C93853 + C25326 * C70881 + C25607 * C70728) *
                C42379 +
            (C88019 + C88020 + C88021 + C88022 + C88023 + C88024) * C93694) *
               C93639 * C1979 -
           ((C88025 + C88026 + C88027 + C88028 + C88029 + C88030) * C93694 +
            (C88024 + C88023 + C88022 + C88021 + C88020 + C88019) * C42379) *
               C93639 * C1980) *
              C1981 +
          (((C89623 + C89624 + C89625 + C89626 + C89627 + C89628) * C42379 +
            (C21834 * C70879 + C22050 * C93856 + C26212 * C70880 +
             C26525 * C93853 + (C20049 * C16396 + C93585 * C16398) * C70881 +
             (C20049 * C16566 + C93585 * C16884) * C70728) *
                C93694) *
               C93639 * C1980 -
           ((C89628 + C89627 + C89626 + C89625 + C89624 + C89623) * C93694 +
            (C37785 * C70728 + C37473 * C70881 + C27444 * C93853 +
             C27144 * C70880 + (C20049 * C277 + C93585 * C580) * C93856 +
             (C20049 * C109 + C93585 * C115) * C70879) *
                C42379) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C70879 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93856 +
            (C54711 + C54712) * C70880 + (C55411 + C55412) * C93853 +
            C88360 * C70881 + C88850 * C70728) *
               C93585 * C93639 * C1979 -
           ((C42480 * C16565 + C93694 * C16959 + C42479 * C5950 +
             C42379 * C6350) *
                C70728 +
            (C42480 * C16395 + C93694 * C16487 + C42479 * C5775 +
             C42379 * C5870) *
                C70881 +
            (C59068 + C59067) * C93853 + (C58260 + C58259) * C70880 +
            (C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                C93856 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C70879) *
               C93585 * C93639 * C1980) *
              C1981 +
          (((C44832 + C44831) * C70879 + (C45495 + C45494) * C93856 +
            (C55798 + C55797) * C70880 + (C56618 + C56617) * C93853 +
            (C42479 * C5776 + C42379 * C5871 + C42480 * C16396 +
             C93694 * C16488) *
                C70881 +
            (C42479 * C5951 + C42379 * C6351 + C42480 * C16566 +
             C93694 * C16960) *
                C70728) *
               C93585 * C93639 * C1980 -
           ((C55413 + C55414) * C70728 + (C54717 + C54718) * C70881 +
            C57848 * C93853 + C57028 * C70880 + (C43036 + C43035) * C93856 +
            (C42507 + C42506) * C70879) *
               C93585 * C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                       C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                       C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                          C42379 +
                      (C88206 + C88207 + C88208) * C93694) *
                         C93585 * C93639 * C1979 -
                     ((C88209 + C88210 + C88211) * C93694 +
                      (C88208 + C88207 + C88206) * C42379) *
                         C93585 * C93639 * C1980) *
                        C1981 +
                    (((C73785 + C73784 + C73783) * C42379 +
                      (C71392 * C809 + C72113 + C72113 + C93856 * C1321 +
                       C71393 * C8521 + C72114 + C72114 + C93853 * C9407 +
                       C71394 * C16396 + C72115 + C72115 + C70728 * C17036) *
                          C93694) *
                         C93585 * C93639 * C1980 -
                     ((C73783 + C73784 + C73785) * C93694 +
                      (C71434 + C71433 + C71432) * C42379) *
                         C93585 * C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93856 +
             C25027 * C93853 + C25030 * C70728) *
                C42379 +
            (C87513 + C87514 + C87515) * C93694) *
               C2695 -
           ((C90813 + C90814 + C90815) * C93694 +
            (C35410 * C70728 + C25030 * C93853 + C25027 * C93856) * C42379) *
               C2696) *
              C1979 +
          (((C90815 + C90814 + C90813) * C42379 +
            (C22872 * C93856 + C25028 * C93853 +
             (C20048 * C25002 + C25018 + C25018 + C93585 * C25006) * C70728) *
                C93694) *
               C2696 -
           ((C87516 + C87517 + C87518) * C93694 +
            (C87515 + C87514 + C87513) * C42379) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C20049 +
             (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                 C93585) *
                C93856 +
            ((C54711 + C54712) * C20049 + (C54713 + C54714) * C93585) * C93853 +
            C88376 * C70728) *
               C2695 -
           (((C88372 + C88373) * C93585 + (C88374 + C88375) * C20049) * C70728 +
            ((C54719 + C54720) * C93585 + (C54721 + C54722) * C20049) * C93853 +
            ((C54714 + C54713) * C93585 + (C54712 + C54711) * C20049) *
                C93856) *
               C2696) *
              C1979 +
          ((((C58259 + C58260) * C20049 + (C58261 + C58262) * C93585) * C93856 +
            ((C90922 + C90923) * C20049 + (C90924 + C90925) * C93585) * C93853 +
            ((C42479 * C25001 + C42379 * C25104 + C42480 * C25002 +
              C93694 * C25105) *
                 C20049 +
             (C42479 * C25003 + C42379 * C25106 + C42480 * C25004 +
              C93694 * C25107) *
                 C93585) *
                C70728) *
               C2696 -
           (((C90925 + C90924) * C93585 + (C90923 + C90922) * C20049) * C70728 +
            ((C58262 + C58261) * C93585 + (C58260 + C58259) * C20049) * C93853 +
            ((C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                 C93585 +
             (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                 C20049) *
                C93856) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                        C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                           C20049 +
                       (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                        C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                           C93585) *
                          C42379 +
                      ((C87691 + C87692 + C87693) * C20049 +
                       (C87694 + C87695 + C87696) * C93585) *
                          C93694) *
                         C2695 -
                     (((C91036 + C91037 + C91038) * C93585 +
                       (C91039 + C91040 + C91041) * C20049) *
                          C93694 +
                      ((C70881 * C10967 + C70728 * C11199 + C70880 * C1397 +
                        C93853 * C1545 + C70879 * C1396 + C93856 * C1544) *
                           C93585 +
                       (C70881 * C10964 + C70728 * C11196 + C70880 * C1389 +
                        C93853 * C1537 + C70879 * C1388 + C93856 * C1536) *
                           C20049) *
                          C42379) *
                         C2696) *
                        C1979 +
                    ((((C91041 + C91040 + C91039) * C20049 +
                       (C91038 + C91037 + C91036) * C93585) *
                          C42379 +
                      ((C70879 * C8520 + C93856 * C8749 + C70880 * C16395 +
                        C93853 * C16565 + C70881 * C25002 + C70728 * C25219) *
                           C20049 +
                       (C70879 * C8523 + C93856 * C8752 + C70880 * C16397 +
                        C93853 * C16567 + C70881 * C25004 + C70728 * C25221) *
                           C93585) *
                          C93694) *
                         C2696 -
                     (((C87697 + C87698 + C87699) * C93585 +
                       (C87700 + C87701 + C87702) * C20049) *
                          C93694 +
                      ((C87696 + C87695 + C87694) * C93585 +
                       (C87693 + C87692 + C87691) * C20049) *
                          C42379) *
                         C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C42479 +
             (C20049 * C189 + C93585 * C362) * C42379 + C20749 * C42480 +
             C20750 * C93694) *
                C93856 +
            (C88525 + C88526 + C88527 + C88528) * C93853 + C88539 * C70728) *
               C2695 -
           ((C88533 + C88534 + C88535 + C88536) * C70728 +
            (C88532 + C88531 + C88530 + C88529) * C93853 +
            (C88528 + C88527 + C88526 + C88525) * C93856) *
               C2696) *
              C1979 +
          (((C91140 + C91141 + C91142 + C91143) * C93856 +
            (C91144 + C91145 + C91146 + C91147) * C93853 +
            (C35697 * C42479 + C35696 * C42379 +
             (C20049 * C25002 + C93585 * C25004) * C42480 +
             (C20049 * C25105 + C93585 * C25297) * C93694) *
                C70728) *
               C2696 -
           ((C91147 + C91146 + C91145 + C91144) * C70728 +
            (C91143 + C91142 + C91141 + C91140) * C93853 +
            (C20752 * C93694 + C20751 * C42480 + C20750 * C42379 +
             C20749 * C42479) *
                C93856) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 +
                       C42742 * C807 + C42745 + C42745 + C93694 * C1079) *
                          C93585 * C93856 +
                      (C55081 + C55082) * C93585 * C93853 + C88621 * C70728) *
                         C2695 -
                     ((C88626 + C88627) * C93585 * C70728 +
                      (C55085 + C55086) * C93585 * C93853 +
                      (C55082 + C55081) * C93585 * C93856) *
                         C2696) *
                        C1979 +
                    (((C58669 + C58670) * C93585 * C93856 +
                      (C91256 + C91257) * C93585 * C93853 +
                      (C42741 * C25001 + C91250 + C91250 + C42379 * C25408 +
                       C42742 * C25002 + C91251 + C91251 + C93694 * C25409) *
                          C93585 * C70728) *
                         C2696 -
                     ((C91257 + C91256) * C93585 * C70728 +
                      (C58670 + C58669) * C93585 * C93853 +
                      (C42742 * C808 + C43583 + C43583 + C93694 * C1080 +
                       C42741 * C807 + C43584 + C43584 + C42379 * C1079) *
                          C93585 * C93856) *
                         C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C42479 +
                      (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                       C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                          C42379 +
                      (C87691 + C87692 + C87693) * C42480 +
                      (C87939 + C87940 + C87941) * C93694) *
                         C93585 * C2695 -
                     ((C91362 + C91363 + C91364) * C93694 +
                      (C91039 + C91040 + C91041) * C42480 +
                      (C70881 * C11080 + C70728 * C11495 + C70880 * C1471 +
                       C93853 * C1727 + C70879 * C1470 + C93856 * C1726) *
                          C42379 +
                      (C70881 * C10964 + C70728 * C11196 + C70880 * C1389 +
                       C93853 * C1537 + C70879 * C1388 + C93856 * C1536) *
                          C42479) *
                         C93585 * C2696) *
                        C1979 +
                    (((C91041 + C91040 + C91039) * C42479 +
                      (C91364 + C91363 + C91362) * C42379 +
                      (C70879 * C8520 + C93856 * C8749 + C70880 * C16395 +
                       C93853 * C16565 + C70881 * C25002 + C70728 * C25219) *
                          C42480 +
                      (C70879 * C8645 + C93856 * C9091 + C70880 * C16487 +
                       C93853 * C16807 + C70881 * C25105 + C70728 * C25518) *
                          C93694) *
                         C93585 * C2696 -
                     ((C87942 + C87943 + C87944) * C93694 +
                      (C87700 + C87701 + C87702) * C42480 +
                      (C87941 + C87940 + C87939) * C42379 +
                      (C87693 + C87692 + C87691) * C42479) *
                         C93585 * C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C70879 +
             (C20049 * C276 + C93585 * C579) * C93856 + C25319 * C70880 +
             C25604 * C93853 + C25326 * C70881 + C25607 * C70728) *
                C42379 +
            (C88019 + C88020 + C88021 + C88022 + C88023 + C88024) * C93694) *
               C2695 -
           ((C91463 + C91464 + C91465 + C91466 + C91467 + C91468) * C93694 +
            (C35972 * C70728 + C35699 * C70881 + C25607 * C93853 +
             C25326 * C70880 + C25604 * C93856 + C25319 * C70879) *
                C42379) *
               C2696) *
              C1979 +
          (((C91468 + C91467 + C91466 + C91465 + C91464 + C91463) * C42379 +
            (C23107 * C70879 + C23328 * C93856 + C25322 * C70880 +
             C25605 * C93853 + (C20049 * C25002 + C93585 * C25004) * C70881 +
             (C20049 * C25219 + C93585 * C25594) * C70728) *
                C93694) *
               C2696 -
           ((C88025 + C88026 + C88027 + C88028 + C88029 + C88030) * C93694 +
            (C88024 + C88023 + C88022 + C88021 + C88020 + C88019) * C42379) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C70879 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93856 +
            (C54711 + C54712) * C70880 + (C55411 + C55412) * C93853 +
            C88360 * C70881 + C88850 * C70728) *
               C93585 * C2695 -
           ((C88855 + C88856) * C70728 + (C88374 + C88375) * C70881 +
            (C55415 + C55416) * C93853 + (C54721 + C54722) * C70880 +
            (C55412 + C55411) * C93856 + (C54712 + C54711) * C70879) *
               C93585 * C2696) *
              C1979 +
          (((C58259 + C58260) * C70879 + (C59067 + C59068) * C93856 +
            (C90922 + C90923) * C70880 + (C91571 + C91572) * C93853 +
            (C42479 * C25001 + C42379 * C25104 + C42480 * C25002 +
             C93694 * C25105) *
                C70881 +
            (C42479 * C25218 + C42379 * C25681 + C42480 * C25219 +
             C93694 * C25682) *
                C70728) *
               C93585 * C2696 -
           ((C91572 + C91571) * C70728 + (C90923 + C90922) * C70881 +
            (C59068 + C59067) * C93853 + (C58260 + C58259) * C70880 +
            (C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
                C93856 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C70879) *
               C93585 * C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                       C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                       C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                          C42379 +
                      (C88206 + C88207 + C88208) * C93694) *
                         C93585 * C2695 -
                     ((C91686 + C91687 + C91688) * C93694 +
                      (C71394 * C10964 + C72844 + C72844 + C70728 * C11756 +
                       C71393 * C1389 + C72845 + C72845 + C93853 * C1901 +
                       C71392 * C1388 + C72846 + C72846 + C93856 * C1900) *
                          C42379) *
                         C93585 * C2696) *
                        C1979 +
                    (((C91688 + C91687 + C91686) * C42379 +
                      (C71392 * C8520 + C91677 + C91677 + C93856 * C9406 +
                       C71393 * C16395 + C91678 + C91678 + C93853 * C17035 +
                       C71394 * C25002 + C91679 + C91679 + C70728 * C25776) *
                          C93694) *
                         C93585 * C2696 -
                     ((C88209 + C88210 + C88211) * C93694 +
                      (C88208 + C88207 + C88206) * C42379) *
                         C93585 * C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93856 +
            C25027 * C93853 + C25030 * C70728) *
               C42379 +
           (C87513 + C87514 + C87515) * C93694) *
              C93639 * C800 -
          ((C87516 + C87517 + C87518) * C93694 +
           (C87515 + C87514 + C87513) * C42379) *
              C93639 * C801 +
          ((C87518 + C87517 + C87516) * C42379 +
           (C20556 * C93856 + C22871 * C93853 +
            (C20048 * C21100 + C21111 + C21111 + C93585 * C21102) * C70728) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93856 +
            C25027 * C93853 + C25030 * C70728) *
               C42379 +
           (C20554 * C93856 + C22873 * C93853 + C25029 * C70728) * C93694) *
              C93639 * C93625 * C97 -
          ((C36249 * C70728 + C25892 * C93853 + C21610 * C93856) * C93694 +
           (C37156 * C70728 + C26841 * C93853 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93856) *
               C42379) *
              C93639 * C93625 * C98 +
          (((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C93856 +
            (C20048 * C1386 + C23547 + C23547 + C93585 * C1402) * C93853 +
            (C20048 * C1391 + C33951 + C33951 + C93585 * C1407) * C70728) *
               C42379 +
           ((C20048 * C805 + C20060 + C20060 + C93585 * C821) * C93856 +
            (C20048 * C3411 + C23548 + C23548 + C93585 * C3419) * C93853 +
            (C20048 * C5777 + C33952 + C33952 + C93585 * C5783) * C70728) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93856 +
            C25027 * C93853 + C25030 * C70728) *
               C42379 +
           (C87513 + C87514 + C87515) * C93694) *
              C1382 -
          ((C35409 * C70728 + C25029 * C93853 + C22873 * C93856) * C93694 +
           (C35410 * C70728 + C25030 * C93853 + C25027 * C93856) * C42379) *
              C1383 +
          ((C25030 * C93856 + C35410 * C93853 + C39982 * C70728) * C42379 +
           (C25029 * C93856 + C35409 * C93853 +
            (C20048 * C35395 + C35404 + C35404 + C93585 * C35397) * C70728) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C20049 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93585) *
               C93856 +
           ((C54711 + C54712) * C20049 + (C54713 + C54714) * C93585) * C93853 +
           ((C54722 + C54721) * C20049 + (C54720 + C54719) * C93585) * C70728) *
              C93639 * C800 -
          (((C42480 * C16397 + C93694 * C16489 + C42479 * C5778 +
             C42379 * C5873) *
                C93585 +
            (C42480 * C16395 + C93694 * C16487 + C42479 * C5775 +
             C42379 * C5870) *
                C20049) *
               C70728 +
           ((C58262 + C58261) * C93585 + (C58260 + C58259) * C20049) * C93853 +
           ((C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                C93585 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C20049) *
               C93856) *
              C93639 * C801 +
          (((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
                C20049 +
            (C42479 * C816 + C42379 * C898 + C42480 * C4900 + C93694 * C5019) *
                C93585) *
               C93856 +
           ((C42479 * C8520 + C42379 * C8645 + C42480 * C19095 +
             C93694 * C19221) *
                C20049 +
            (C42479 * C8523 + C42379 * C8648 + C42480 * C19097 +
             C93694 * C19223) *
                C93585) *
               C93853 +
           ((C42479 * C16395 + C42379 * C16487 + C42480 * C21100 +
             C93694 * C21161) *
                C20049 +
            (C42479 * C16397 + C42379 * C16489 + C42480 * C21101 +
             C93694 * C21162) *
                C93585) *
               C70728) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C20049 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93585) *
               C93856 +
           ((C54711 + C54712) * C20049 + (C54713 + C54714) * C93585) * C93853 +
           ((C54722 + C54721) * C20049 + (C54720 + C54719) * C93585) * C70728) *
              C93639 * C93625 * C97 -
          (((C54715 + C54716) * C93585 + (C54717 + C54718) * C20049) * C70728 +
           (C57027 * C93585 + C57028 * C20049) * C93853 +
           ((C42509 + C42508) * C93585 + (C42507 + C42506) * C20049) * C93856) *
              C93639 * C93625 * C98 +
          ((C42518 * C20049 + C42519 * C93585) * C93856 +
           ((C45819 + C45818) * C20049 + (C45817 + C45816) * C93585) * C93853 +
           ((C42479 * C1391 + C42379 * C1473 + C42480 * C5777 +
             C93694 * C5872) *
                C20049 +
            (C42479 * C1399 + C42379 * C1481 + C42480 * C5780 +
             C93694 * C5875) *
                C93585) *
               C70728) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C20049 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93585) *
               C93856 +
           ((C54711 + C54712) * C20049 + (C54713 + C54714) * C93585) * C93853 +
           C88376 * C70728) *
              C1382 -
          (((C88372 + C88373) * C93585 + (C88374 + C88375) * C20049) * C70728 +
           ((C54719 + C54720) * C93585 + (C54721 + C54722) * C20049) * C93853 +
           ((C54714 + C54713) * C93585 + (C54712 + C54711) * C20049) * C93856) *
              C1383 +
          (C88376 * C93856 +
           ((C88375 + C88374) * C20049 + (C88373 + C88372) * C93585) * C93853 +
           ((C42479 * C30188 + C42379 * C30303 + C42480 * C35395 +
             C93694 * C35484) *
                C20049 +
            (C42479 * C30190 + C42379 * C30305 + C42480 * C35396 +
             C93694 * C35485) *
                C93585) *
               C70728) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[27] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C20049 +
                      (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                       C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                          C93585) *
                         C42379 +
                     ((C87691 + C87692 + C87693) * C20049 +
                      (C87694 + C87695 + C87696) * C93585) *
                         C93694) *
                        C93639 * C800 -
                    (((C87697 + C87698 + C87699) * C93585 +
                      (C87700 + C87701 + C87702) * C20049) *
                         C93694 +
                     ((C87696 + C87695 + C87694) * C93585 +
                      (C87693 + C87692 + C87691) * C20049) *
                         C42379) *
                        C93639 * C801 +
                    (((C87702 + C87701 + C87700) * C20049 +
                      (C87699 + C87698 + C87697) * C93585) *
                         C42379 +
                     ((C70879 * C4897 + C93856 * C5096 + C70880 * C19095 +
                       C93853 * C19323 + C70881 * C21100 + C70728 * C21213) *
                          C20049 +
                      (C70879 * C4900 + C93856 * C5099 + C70880 * C19097 +
                       C93853 * C19325 + C70881 * C21101 + C70728 * C21214) *
                          C93585) *
                         C93694) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C20049 +
                      (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                       C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                          C93585) *
                         C42379 +
                     ((C70879 * C807 + C93856 * C955 + C70880 * C3409 +
                       C93853 * C3565 + C70881 * C5775 + C70728 * C5950) *
                          C20049 +
                      (C70879 * C815 + C93856 * C963 + C70880 * C3413 +
                       C93853 * C3569 + C70881 * C5778 + C70728 * C5953) *
                          C93585) *
                         C93694) *
                        C93639 * C93625 * C97 -
                    (((C73159 + C73160 + C73161) * C93585 +
                      (C73162 + C73163 + C73164) * C20049) *
                         C93694 +
                     ((C70912 + C70911 + C70910) * C93585 +
                      (C70909 + C70908 + C70907) * C20049) *
                         C42379) *
                        C93639 * C93625 * C98 +
                    (((C70918 + C70917 + C70916) * C20049 +
                      (C70915 + C70914 + C70913) * C93585) *
                         C42379 +
                     ((C70879 * C805 + C93856 * C953 + C70880 * C3411 +
                       C93853 * C3567 + C70881 * C5777 + C70728 * C5952) *
                          C20049 +
                      (C70879 * C813 + C93856 * C961 + C70880 * C3415 +
                       C93853 * C3571 + C70881 * C5780 + C70728 * C5955) *
                          C93585) *
                         C93694) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C20049 +
                      (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                       C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                          C93585) *
                         C42379 +
                     ((C87691 + C87692 + C87693) * C20049 +
                      (C87694 + C87695 + C87696) * C93585) *
                         C93694) *
                        C1382 -
                    (((C70881 * C25003 + C70728 * C25220 + C70880 * C5778 +
                       C93853 * C5953 + C70879 * C3413 + C93856 * C3569) *
                          C93585 +
                      (C70881 * C25001 + C70728 * C25218 + C70880 * C5775 +
                       C93853 * C5950 + C70879 * C3409 + C93856 * C3565) *
                          C20049) *
                         C93694 +
                     ((C70881 * C10967 + C70728 * C11199 + C70880 * C1397 +
                       C93853 * C1545 + C70879 * C1396 + C93856 * C1544) *
                          C93585 +
                      (C70881 * C10964 + C70728 * C11196 + C70880 * C1389 +
                       C93853 * C1537 + C70879 * C1388 + C93856 * C1536) *
                          C20049) *
                         C42379) *
                        C1383 +
                    (((C70879 * C1389 + C93856 * C1537 + C70880 * C10964 +
                       C93853 * C11196 + C70881 * C30188 + C70728 * C30408) *
                          C20049 +
                      (C70879 * C1397 + C93856 * C1545 + C70880 * C10967 +
                       C93853 * C11199 + C70881 * C30190 + C70728 * C30410) *
                          C93585) *
                         C42379 +
                     ((C70879 * C5775 + C93856 * C5950 + C70880 * C25001 +
                       C93853 * C25218 + C70881 * C35395 + C70728 * C35601) *
                          C20049 +
                      (C70879 * C5778 + C93856 * C5953 + C70880 * C25003 +
                       C93853 * C25220 + C70881 * C35396 + C70728 * C35602) *
                          C93585) *
                         C93694) *
                        C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C42479 +
            (C20049 * C189 + C93585 * C362) * C42379 + C20749 * C42480 +
            C20750 * C93694) *
               C93856 +
           (C25319 * C42479 + C25320 * C42379 + C23109 * C42480 +
            C23108 * C93694) *
               C93853 +
           (C25326 * C42479 + C25325 * C42379 + C25324 * C42480 +
            C25323 * C93694) *
               C70728) *
              C93639 * C800 -
          ((C25321 * C93694 + C25322 * C42480 + C25323 * C42379 +
            C25324 * C42479) *
               C70728 +
           (C23106 * C93694 + C23107 * C42480 + C23108 * C42379 +
            C23109 * C42479) *
               C93853 +
           (C20752 * C93694 + C20751 * C42480 + C20750 * C42379 +
            C20749 * C42479) *
               C93856) *
              C93639 * C801 +
          ((C20751 * C42479 + C20752 * C42379 + C20753 * C42480 +
            C20754 * C93694) *
               C93856 +
           (C23107 * C42479 + C23106 * C42379 + C23105 * C42480 +
            C23104 * C93694) *
               C93853 +
           (C25322 * C42479 + C25321 * C42379 +
            (C20049 * C21100 + C93585 * C21101) * C42480 +
            (C20049 * C21161 + C93585 * C21265) * C93694) *
               C70728) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C42479 +
            (C20049 * C189 + C93585 * C362) * C42379 + C20749 * C42480 +
            C20750 * C93694) *
               C93856 +
           (C25319 * C42479 + C25320 * C42379 + C23109 * C42480 +
            C23108 * C93694) *
               C93853 +
           (C25326 * C42479 + C25325 * C42379 + C25324 * C42480 +
            C25323 * C93694) *
               C70728) *
              C93639 * C93625 * C97 -
          ((C36550 * C93694 + C36549 * C42480 + C37474 * C42379 +
            C37473 * C42479) *
               C70728 +
           (C26211 * C93694 + C26210 * C42480 + C27145 * C42379 +
            C27144 * C42479) *
               C93853 +
           (C21833 * C93694 + C21832 * C42480 +
            (C20049 * C190 + C93585 * C363) * C42379 +
            (C20049 * C109 + C93585 * C115) * C42479) *
               C93856) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C42479 +
            (C20049 * C191 + C93585 * C364) * C42379 +
            (C20049 * C805 + C93585 * C813) * C42480 +
            (C20049 * C887 + C93585 * C1019) * C93694) *
               C93856 +
           ((C20049 * C1386 + C93585 * C1394) * C42479 +
            (C20049 * C1468 + C93585 * C1600) * C42379 +
            (C20049 * C3411 + C93585 * C3415) * C42480 +
            (C20049 * C3493 + C93585 * C3641) * C93694) *
               C93853 +
           ((C20049 * C1391 + C93585 * C1399) * C42479 +
            (C20049 * C1473 + C93585 * C1605) * C42379 +
            (C20049 * C5777 + C93585 * C5780) * C42480 +
            (C20049 * C5872 + C93585 * C6032) * C93694) *
               C70728) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C42479 +
            (C20049 * C189 + C93585 * C362) * C42379 + C20749 * C42480 +
            C20750 * C93694) *
               C93856 +
           (C88525 + C88526 + C88527 + C88528) * C93853 + C88539 * C70728) *
              C1382 -
          ((C88533 + C88534 + C88535 + C88536) * C70728 +
           (C88532 + C88531 + C88530 + C88529) * C93853 +
           (C88528 + C88527 + C88526 + C88525) * C93856) *
              C1383 +
          (C88539 * C93856 + (C88536 + C88535 + C88534 + C88533) * C93853 +
           (C40167 * C42479 + C40166 * C42379 +
            (C20049 * C35395 + C93585 * C35396) * C42480 +
            (C20049 * C35484 + C93585 * C35677) * C93694) *
               C70728) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
            C42745 + C42745 + C93694 * C1079) *
               C93585 * C93856 +
           (C55081 + C55082) * C93585 * C93853 +
           (C55086 + C55085) * C93585 * C70728) *
              C93639 * C800 -
          ((C42742 * C16395 + C58662 + C58662 + C93694 * C16719 +
            C42741 * C5775 + C58661 + C58661 + C42379 * C6107) *
               C93585 * C70728 +
           (C58670 + C58669) * C93585 * C93853 +
           (C42742 * C808 + C43583 + C43583 + C93694 * C1080 + C42741 * C807 +
            C43584 + C43584 + C42379 * C1079) *
               C93585 * C93856) *
              C93639 * C801 +
          ((C42741 * C808 + C43585 + C43585 + C42379 * C1080 + C42742 * C4897 +
            C43586 + C43586 + C93694 * C5325) *
               C93585 * C93856 +
           (C42741 * C8520 + C54061 + C54061 + C42379 * C8984 +
            C42742 * C19095 + C54062 + C54062 + C93694 * C19563) *
               C93585 * C93853 +
           (C42741 * C16395 + C87851 + C87851 + C42379 * C16719 +
            C42742 * C21100 + C87852 + C87852 + C93694 * C21316) *
               C93585 * C70728) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
            C42745 + C42745 + C93694 * C1079) *
               C93585 * C93856 +
           (C55081 + C55082) * C93585 * C93853 +
           (C55086 + C55085) * C93585 * C70728) *
              C93639 * C93625 * C97 -
          ((C55083 + C55084) * C93585 * C70728 + C57444 * C93585 * C93853 +
           (C42779 + C42778) * C93585 * C93856) *
              C93639 * C93625 * C98 +
          (C42784 * C93585 * C93856 + (C46137 + C46136) * C93585 * C93853 +
           (C42741 * C1391 + C44297 + C44297 + C42379 * C1663 + C42742 * C5777 +
            C44298 + C44298 + C93694 * C6109) *
               C93585 * C70728) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
            C42745 + C42745 + C93694 * C1079) *
               C93585 * C93856 +
           (C55081 + C55082) * C93585 * C93853 + C88621 * C70728) *
              C1382 -
          ((C88626 + C88627) * C93585 * C70728 +
           (C55085 + C55086) * C93585 * C93853 +
           (C55082 + C55081) * C93585 * C93856) *
              C1383 +
          (C88621 * C93856 + (C88627 + C88626) * C93585 * C93853 +
           (C42741 * C30188 + C88619 + C88619 + C42379 * C30603 +
            C42742 * C35395 + C88620 + C88620 + C93694 * C35779) *
               C93585 * C70728) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[27] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                      C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                         C42479 +
                     (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                      C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                         C42379 +
                     (C87691 + C87692 + C87693) * C42480 +
                     (C87939 + C87940 + C87941) * C93694) *
                        C93585 * C93639 * C800 -
                    ((C87942 + C87943 + C87944) * C93694 +
                     (C87700 + C87701 + C87702) * C42480 +
                     (C87941 + C87940 + C87939) * C42379 +
                     (C87693 + C87692 + C87691) * C42479) *
                        C93585 * C93639 * C801 +
                    ((C87702 + C87701 + C87700) * C42479 +
                     (C87944 + C87943 + C87942) * C42379 +
                     (C70879 * C4897 + C93856 * C5096 + C70880 * C19095 +
                      C93853 * C19323 + C70881 * C21100 + C70728 * C21213) *
                         C42480 +
                     (C70879 * C5016 + C93856 * C5414 + C70880 * C19221 +
                      C93853 * C19669 + C70881 * C21161 + C70728 * C21375) *
                         C93694) *
                        C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                      C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                         C42479 +
                     (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                      C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                         C42379 +
                     (C70879 * C807 + C93856 * C955 + C70880 * C3409 +
                      C93853 * C3565 + C70881 * C5775 + C70728 * C5950) *
                         C42480 +
                     (C70879 * C889 + C93856 * C1145 + C70880 * C3491 +
                      C93853 * C3783 + C70881 * C5870 + C70728 * C6196) *
                         C93694) *
                        C93585 * C93639 * C93625 * C97 -
                    ((C73465 + C73466 + C73467) * C93694 +
                     (C73162 + C73163 + C73164) * C42480 +
                     (C71155 + C71154 + C71153) * C42379 +
                     (C70909 + C70908 + C70907) * C42479) *
                        C93585 * C93639 * C93625 * C98 +
                    ((C70918 + C70917 + C70916) * C42479 +
                     (C71158 + C71157 + C71156) * C42379 +
                     (C70879 * C805 + C93856 * C953 + C70880 * C3411 +
                      C93853 * C3567 + C70881 * C5777 + C70728 * C5952) *
                         C42480 +
                     (C70879 * C887 + C93856 * C1143 + C70880 * C3493 +
                      C93853 * C3785 + C70881 * C5872 + C70728 * C6198) *
                         C93694) *
                        C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                      C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                         C42479 +
                     (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                      C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                         C42379 +
                     (C87691 + C87692 + C87693) * C42480 +
                     (C87939 + C87940 + C87941) * C93694) *
                        C93585 * C1382 -
                    ((C70881 * C25104 + C70728 * C25517 + C70880 * C5870 +
                      C93853 * C6196 + C70879 * C3491 + C93856 * C3783) *
                         C93694 +
                     (C70881 * C25001 + C70728 * C25218 + C70880 * C5775 +
                      C93853 * C5950 + C70879 * C3409 + C93856 * C3565) *
                         C42480 +
                     (C70881 * C11080 + C70728 * C11495 + C70880 * C1471 +
                      C93853 * C1727 + C70879 * C1470 + C93856 * C1726) *
                         C42379 +
                     (C70881 * C10964 + C70728 * C11196 + C70880 * C1389 +
                      C93853 * C1537 + C70879 * C1388 + C93856 * C1536) *
                         C42479) *
                        C93585 * C1383 +
                    ((C70879 * C1389 + C93856 * C1537 + C70880 * C10964 +
                      C93853 * C11196 + C70881 * C30188 + C70728 * C30408) *
                         C42479 +
                     (C70879 * C1471 + C93856 * C1727 + C70880 * C11080 +
                      C93853 * C11495 + C70881 * C30303 + C70728 * C30698) *
                         C42379 +
                     (C70879 * C5775 + C93856 * C5950 + C70880 * C25001 +
                      C93853 * C25218 + C70881 * C35395 + C70728 * C35601) *
                         C42480 +
                     (C70879 * C5870 + C93856 * C6196 + C70880 * C25104 +
                      C93853 * C25517 + C70881 * C35484 + C70728 * C35890) *
                         C93694) *
                        C93585 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C70879 +
            (C20049 * C276 + C93585 * C579) * C93856 + C25319 * C70880 +
            C25604 * C93853 + C25326 * C70881 + C25607 * C70728) *
               C42379 +
           (C88019 + C88020 + C88021 + C88022 + C88023 + C88024) * C93694) *
              C93639 * C800 -
          ((C88025 + C88026 + C88027 + C88028 + C88029 + C88030) * C93694 +
           (C88024 + C88023 + C88022 + C88021 + C88020 + C88019) * C42379) *
              C93639 * C801 +
          ((C88030 + C88029 + C88028 + C88027 + C88026 + C88025) * C42379 +
           (C20753 * C70879 + C20935 * C93856 + C23105 * C70880 +
            C23327 * C93853 + (C20049 * C21100 + C93585 * C21101) * C70881 +
            (C20049 * C21213 + C93585 * C21426) * C70728) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C70879 +
            (C20049 * C276 + C93585 * C579) * C93856 + C25319 * C70880 +
            C25604 * C93853 + C25326 * C70881 + C25607 * C70728) *
               C42379 +
           (C20749 * C70879 + C20933 * C93856 + C23109 * C70880 +
            C23329 * C93853 + C25324 * C70881 + C25606 * C70728) *
               C93694) *
              C93639 * C93625 * C97 -
          ((C36854 * C70728 + C36549 * C70881 + C26524 * C93853 +
            C26210 * C70880 + C22049 * C93856 + C21832 * C70879) *
               C93694 +
           (C37785 * C70728 + C37473 * C70881 + C27444 * C93853 +
            C27144 * C70880 + (C20049 * C277 + C93585 * C580) * C93856 +
            (C20049 * C109 + C93585 * C115) * C70879) *
               C42379) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C70879 +
            (C20049 * C278 + C93585 * C581) * C93856 +
            (C20049 * C1386 + C93585 * C1394) * C70880 +
            (C20049 * C1534 + C93585 * C1782) * C93853 +
            (C20049 * C1391 + C93585 * C1399) * C70881 +
            (C20049 * C1539 + C93585 * C1787) * C70728) *
               C42379 +
           ((C20049 * C805 + C93585 * C813) * C70879 +
            (C20049 * C953 + C93585 * C1201) * C93856 +
            (C20049 * C3411 + C93585 * C3415) * C70880 +
            (C20049 * C3567 + C93585 * C3855) * C93853 +
            (C20049 * C5777 + C93585 * C5780) * C70881 +
            (C20049 * C5952 + C93585 * C6275) * C70728) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C70879 +
            (C20049 * C276 + C93585 * C579) * C93856 + C25319 * C70880 +
            C25604 * C93853 + C25326 * C70881 + C25607 * C70728) *
               C42379 +
           (C88019 + C88020 + C88021 + C88022 + C88023 + C88024) * C93694) *
              C1382 -
          ((C35971 * C70728 + C35697 * C70881 + C25606 * C93853 +
            C25324 * C70880 + C23329 * C93856 + C23109 * C70879) *
               C93694 +
           (C35972 * C70728 + C35699 * C70881 + C25607 * C93853 +
            C25326 * C70880 + C25604 * C93856 + C25319 * C70879) *
               C42379) *
              C1383 +
          ((C25326 * C70879 + C25607 * C93856 + C35699 * C70880 +
            C35972 * C93853 + C40167 * C70881 + C40335 * C70728) *
               C42379 +
           (C25324 * C70879 + C25606 * C93856 + C35697 * C70880 +
            C35971 * C93853 + (C20049 * C35395 + C93585 * C35396) * C70881 +
            (C20049 * C35601 + C93585 * C35965) * C70728) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
               C70879 +
           (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
               C93856 +
           (C54711 + C54712) * C70880 + (C55411 + C55412) * C93853 +
           (C54722 + C54721) * C70881 + (C55416 + C55415) * C70728) *
              C93585 * C93639 * C800 -
          ((C42480 * C16565 + C93694 * C16959 + C42479 * C5950 +
            C42379 * C6350) *
               C70728 +
           (C42480 * C16395 + C93694 * C16487 + C42479 * C5775 +
            C42379 * C5870) *
               C70881 +
           (C59068 + C59067) * C93853 + (C58260 + C58259) * C70880 +
           (C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
               C93856 +
           (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
               C70879) *
              C93585 * C93639 * C801 +
          ((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
               C70879 +
           (C42479 * C956 + C42379 * C1262 + C42480 * C5096 + C93694 * C5598) *
               C93856 +
           (C42479 * C8520 + C42379 * C8645 + C42480 * C19095 +
            C93694 * C19221) *
               C70880 +
           (C42479 * C8749 + C42379 * C9305 + C42480 * C19323 +
            C93694 * C19884) *
               C93853 +
           (C42479 * C16395 + C42379 * C16487 + C42480 * C21100 +
            C93694 * C21161) *
               C70881 +
           (C42479 * C16565 + C42379 * C16959 + C42480 * C21213 +
            C93694 * C21477) *
               C70728) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
               C70879 +
           (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
               C93856 +
           (C54711 + C54712) * C70880 + (C55411 + C55412) * C93853 +
           (C54722 + C54721) * C70881 + (C55416 + C55415) * C70728) *
              C93585 * C93639 * C93625 * C97 -
          ((C55413 + C55414) * C70728 + (C54717 + C54718) * C70881 +
           C57848 * C93853 + C57028 * C70880 + (C43036 + C43035) * C93856 +
           (C42507 + C42506) * C70879) *
              C93585 * C93639 * C93625 * C98 +
          (C42518 * C70879 + C43041 * C93856 + (C45819 + C45818) * C70880 +
           (C46451 + C46450) * C93853 +
           (C42479 * C1391 + C42379 * C1473 + C42480 * C5777 + C93694 * C5872) *
               C70881 +
           (C42479 * C1539 + C42379 * C1845 + C42480 * C5952 + C93694 * C6352) *
               C70728) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
               C70879 +
           (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
               C93856 +
           (C54711 + C54712) * C70880 + (C55411 + C55412) * C93853 +
           C88360 * C70881 + C88850 * C70728) *
              C93585 * C1382 -
          ((C88855 + C88856) * C70728 + (C88374 + C88375) * C70881 +
           (C55415 + C55416) * C93853 + (C54721 + C54722) * C70880 +
           (C55412 + C55411) * C93856 + (C54712 + C54711) * C70879) *
              C93585 * C1383 +
          (C88360 * C70879 + C88850 * C93856 + (C88375 + C88374) * C70880 +
           (C88856 + C88855) * C93853 +
           (C42479 * C30188 + C42379 * C30303 + C42480 * C35395 +
            C93694 * C35484) *
               C70881 +
           (C42479 * C30408 + C42379 * C30869 + C42480 * C35601 +
            C93694 * C36046) *
               C70728) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[27] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                      C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                      C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                         C42379 +
                     (C88206 + C88207 + C88208) * C93694) *
                        C93585 * C93639 * C800 -
                    ((C88209 + C88210 + C88211) * C93694 +
                     (C88208 + C88207 + C88206) * C42379) *
                        C93585 * C93639 * C801 +
                    ((C88211 + C88210 + C88209) * C42379 +
                     (C71392 * C4897 + C88191 + C88191 + C93856 * C5675 +
                      C71393 * C19095 + C88192 + C88192 + C93853 * C19984 +
                      C71394 * C21100 + C88193 + C88193 + C70728 * C21528) *
                         C93694) *
                        C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                      C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                      C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                         C42379 +
                     (C71392 * C807 + C72109 + C72109 + C93856 * C1319 +
                      C71393 * C3409 + C72108 + C72108 + C93853 * C3993 +
                      C71394 * C5775 + C72107 + C72107 + C70728 * C6427) *
                         C93694) *
                        C93585 * C93639 * C93625 * C97 -
                    ((C73783 + C73784 + C73785) * C93694 +
                     (C71434 + C71433 + C71432) * C42379) *
                        C93585 * C93639 * C93625 * C98 +
                    ((C71437 + C71436 + C71435) * C42379 +
                     (C71392 * C805 + C73774 + C73774 + C93856 * C1317 +
                      C71393 * C3411 + C73775 + C73775 + C93853 * C3995 +
                      C71394 * C5777 + C73776 + C73776 + C70728 * C6429) *
                         C93694) *
                        C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                      C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                      C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                         C42379 +
                     (C88206 + C88207 + C88208) * C93694) *
                        C93585 * C1382 -
                    ((C71394 * C25001 + C75657 + C75657 + C70728 * C25775 +
                      C71393 * C5775 + C75656 + C75656 + C93853 * C6427 +
                      C71392 * C3409 + C75655 + C75655 + C93856 * C3993) *
                         C93694 +
                     (C71394 * C10964 + C72844 + C72844 + C70728 * C11756 +
                      C71393 * C1389 + C72845 + C72845 + C93853 * C1901 +
                      C71392 * C1388 + C72846 + C72846 + C93856 * C1900) *
                         C42379) *
                        C93585 * C1383 +
                    ((C71392 * C1389 + C72847 + C72847 + C93856 * C1901 +
                      C71393 * C10964 + C72848 + C72848 + C93853 * C11756 +
                      C71394 * C30188 + C72849 + C72849 + C70728 * C30951) *
                         C42379 +
                     (C71392 * C5775 + C88931 + C88931 + C93856 * C6427 +
                      C71393 * C25001 + C88932 + C88932 + C93853 * C25775 +
                      C71394 * C35395 + C88933 + C88933 + C70728 * C36140) *
                         C93694) *
                        C93585 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93856 +
             C25027 * C93853 + C25030 * C70728) *
                C42379 +
            (C87513 + C87514 + C87515) * C93694) *
               C2695 -
           ((C35409 * C70728 + C25029 * C93853 + C22873 * C93856) * C93694 +
            (C35410 * C70728 + C25030 * C93853 + C25027 * C93856) * C42379) *
               C2696) *
              C93625 * C1981 +
          (((C26841 * C93856 + C37156 * C93853 + C41118 * C70728) * C42379 +
            (C25892 * C93856 + C36249 * C93853 +
             (C20048 * C33015 + C37153 + C37153 + C93585 * C33017) * C70728) *
                C93694) *
               C2696 -
           ((C89034 + C89033 + C89032) * C93694 +
            (C37156 * C70728 + C26841 * C93853 +
             (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93856) *
                C42379) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                 C20049 +
             (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                 C93585) *
                C93856 +
            ((C54711 + C54712) * C20049 + (C54713 + C54714) * C93585) * C93853 +
            C88376 * C70728) *
               C2695 -
           (((C88372 + C88373) * C93585 + (C88374 + C88375) * C20049) * C70728 +
            ((C54719 + C54720) * C93585 + (C54721 + C54722) * C20049) * C93853 +
            ((C54714 + C54713) * C93585 + (C54712 + C54711) * C20049) *
                C93856) *
               C2696) *
              C93625 * C1981 +
          (((C57025 * C20049 + C57026 * C93585) * C93856 +
            ((C54718 + C54717) * C20049 + (C54716 + C54715) * C93585) * C93853 +
            ((C42479 * C10965 + C42379 * C11081 + C42480 * C33015 +
              C93694 * C33128) *
                 C20049 +
             (C42479 * C10968 + C42379 * C11084 + C42480 * C33016 +
              C93694 * C33129) *
                 C93585) *
                C70728) *
               C2696 -
           (((C54715 + C54716) * C93585 + (C54717 + C54718) * C20049) * C70728 +
            (C57027 * C93585 + C57028 * C20049) * C93853 +
            ((C42509 + C42508) * C93585 + (C42507 + C42506) * C20049) *
                C93856) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                        C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                           C20049 +
                       (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                        C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                           C93585) *
                          C42379 +
                      ((C87691 + C87692 + C87693) * C20049 +
                       (C87694 + C87695 + C87696) * C93585) *
                          C93694) *
                         C2695 -
                     (((C70881 * C25003 + C70728 * C25220 + C70880 * C5778 +
                        C93853 * C5953 + C70879 * C3413 + C93856 * C3569) *
                           C93585 +
                       (C70881 * C25001 + C70728 * C25218 + C70880 * C5775 +
                        C93853 * C5950 + C70879 * C3409 + C93856 * C3565) *
                           C20049) *
                          C93694 +
                      ((C70881 * C10967 + C70728 * C11199 + C70880 * C1397 +
                        C93853 * C1545 + C70879 * C1396 + C93856 * C1544) *
                           C93585 +
                       (C70881 * C10964 + C70728 * C11196 + C70880 * C1389 +
                        C93853 * C1537 + C70879 * C1388 + C93856 * C1536) *
                           C20049) *
                          C42379) *
                         C2696) *
                        C93625 * C1981 +
                    ((((C74117 + C74116 + C74115) * C20049 +
                       (C74114 + C74113 + C74112) * C93585) *
                          C42379 +
                      ((C70879 * C3410 + C93856 * C3566 + C70880 * C5776 +
                        C93853 * C5951 + C70881 * C33015 + C70728 * C33242) *
                           C20049 +
                       (C70879 * C3414 + C93856 * C3570 + C70880 * C5779 +
                        C93853 * C5954 + C70881 * C33016 + C70728 * C33243) *
                           C93585) *
                          C93694) *
                         C2696 -
                     (((C73159 + C73160 + C73161) * C93585 +
                       (C73162 + C73163 + C73164) * C20049) *
                          C93694 +
                      ((C70912 + C70911 + C70910) * C93585 +
                       (C70909 + C70908 + C70907) * C20049) *
                          C42379) *
                         C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C42479 +
             (C20049 * C189 + C93585 * C362) * C42379 + C20749 * C42480 +
             C20750 * C93694) *
                C93856 +
            (C88525 + C88526 + C88527 + C88528) * C93853 + C88539 * C70728) *
               C2695 -
           ((C88533 + C88534 + C88535 + C88536) * C70728 +
            (C88532 + C88531 + C88530 + C88529) * C93853 +
            (C88528 + C88527 + C88526 + C88525) * C93856) *
               C2696) *
              C93625 * C1981 +
          (((C90217 + C90218 + C90219 + C90220) * C93856 +
            (C90221 + C90222 + C90223 + C90224) * C93853 +
            (C41331 * C42479 + C41332 * C42379 +
             (C20049 * C33015 + C93585 * C33016) * C42480 +
             (C20049 * C33128 + C93585 * C33342) * C93694) *
                C70728) *
               C2696 -
           ((C90224 + C90223 + C90222 + C90221) * C70728 +
            (C90220 + C90219 + C90218 + C90217) * C93853 +
            (C21833 * C93694 + C21832 * C42480 +
             (C20049 * C190 + C93585 * C363) * C42379 +
             (C20049 * C109 + C93585 * C115) * C42479) *
                C93856) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
             C42745 + C42745 + C93694 * C1079) *
                C93585 * C93856 +
            (C55081 + C55082) * C93585 * C93853 + C88621 * C70728) *
               C2695 -
           ((C88626 + C88627) * C93585 * C70728 +
            (C55085 + C55086) * C93585 * C93853 +
            (C55082 + C55081) * C93585 * C93856) *
               C2696) *
              C93625 * C1981 +
          ((C57443 * C93585 * C93856 + (C55084 + C55083) * C93585 * C93853 +
            (C42741 * C10965 + C55067 + C55067 + C42379 * C11390 +
             C42742 * C33015 + C55068 + C55068 + C93694 * C33453) *
                C93585 * C70728) *
               C2696 -
           ((C55083 + C55084) * C93585 * C70728 + C57444 * C93585 * C93853 +
            (C42779 + C42778) * C93585 * C93856) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C42479 +
                      (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                       C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                          C42379 +
                      (C87691 + C87692 + C87693) * C42480 +
                      (C87939 + C87940 + C87941) * C93694) *
                         C93585 * C2695 -
                     ((C70881 * C25104 + C70728 * C25517 + C70880 * C5870 +
                       C93853 * C6196 + C70879 * C3491 + C93856 * C3783) *
                          C93694 +
                      (C70881 * C25001 + C70728 * C25218 + C70880 * C5775 +
                       C93853 * C5950 + C70879 * C3409 + C93856 * C3565) *
                          C42480 +
                      (C70881 * C11080 + C70728 * C11495 + C70880 * C1471 +
                       C93853 * C1727 + C70879 * C1470 + C93856 * C1726) *
                          C42379 +
                      (C70881 * C10964 + C70728 * C11196 + C70880 * C1389 +
                       C93853 * C1537 + C70879 * C1388 + C93856 * C1536) *
                          C42479) *
                         C93585 * C2696) *
                        C93625 * C1981 +
                    (((C74117 + C74116 + C74115) * C42479 +
                      (C74436 + C74435 + C74434) * C42379 +
                      (C70879 * C3410 + C93856 * C3566 + C70880 * C5776 +
                       C93853 * C5951 + C70881 * C33015 + C70728 * C33242) *
                          C42480 +
                      (C70879 * C3492 + C93856 * C3784 + C70880 * C5871 +
                       C93853 * C6197 + C70881 * C33128 + C70728 * C33563) *
                          C93694) *
                         C93585 * C2696 -
                     ((C73465 + C73466 + C73467) * C93694 +
                      (C73162 + C73163 + C73164) * C42480 +
                      (C71155 + C71154 + C71153) * C42379 +
                      (C70909 + C70908 + C70907) * C42479) *
                         C93585 * C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C70879 +
             (C20049 * C276 + C93585 * C579) * C93856 + C25319 * C70880 +
             C25604 * C93853 + C25326 * C70881 + C25607 * C70728) *
                C42379 +
            (C88019 + C88020 + C88021 + C88022 + C88023 + C88024) * C93694) *
               C2695 -
           ((C35971 * C70728 + C35697 * C70881 + C25606 * C93853 +
             C25324 * C70880 + C23329 * C93856 + C23109 * C70879) *
                C93694 +
            (C35972 * C70728 + C35699 * C70881 + C25607 * C93853 +
             C25326 * C70880 + C25604 * C93856 + C25319 * C70879) *
                C42379) *
               C2696) *
              C93625 * C1981 +
          (((C27144 * C70879 + C27444 * C93856 + C37473 * C70880 +
             C37785 * C93853 + C41331 * C70881 + C41538 * C70728) *
                C42379 +
            (C26210 * C70879 + C26524 * C93856 + C36549 * C70880 +
             C36854 * C93853 + (C20049 * C33015 + C93585 * C33016) * C70881 +
             (C20049 * C33242 + C93585 * C33662) * C70728) *
                C93694) *
               C2696 -
           ((C89628 + C89627 + C89626 + C89625 + C89624 + C89623) * C93694 +
            (C37785 * C70728 + C37473 * C70881 + C27444 * C93853 +
             C27144 * C70880 + (C20049 * C277 + C93585 * C580) * C93856 +
             (C20049 * C109 + C93585 * C115) * C70879) *
                C42379) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C70879 +
            (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
                C93856 +
            (C54711 + C54712) * C70880 + (C55411 + C55412) * C93853 +
            C88360 * C70881 + C88850 * C70728) *
               C93585 * C2695 -
           ((C88855 + C88856) * C70728 + (C88374 + C88375) * C70881 +
            (C55415 + C55416) * C93853 + (C54721 + C54722) * C70880 +
            (C55412 + C55411) * C93856 + (C54712 + C54711) * C70879) *
               C93585 * C2696) *
              C93625 * C1981 +
          ((C57025 * C70879 + C57847 * C93856 + (C54718 + C54717) * C70880 +
            (C55414 + C55413) * C93853 +
            (C42479 * C10965 + C42379 * C11081 + C42480 * C33015 +
             C93694 * C33128) *
                C70881 +
            (C42479 * C11197 + C42379 * C11668 + C42480 * C33242 +
             C93694 * C33767) *
                C70728) *
               C93585 * C2696 -
           ((C55413 + C55414) * C70728 + (C54717 + C54718) * C70881 +
            C57848 * C93853 + C57028 * C70880 + (C43036 + C43035) * C93856 +
            (C42507 + C42506) * C70879) *
               C93585 * C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                       C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                       C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                          C42379 +
                      (C88206 + C88207 + C88208) * C93694) *
                         C93585 * C2695 -
                     ((C71394 * C25001 + C75657 + C75657 + C70728 * C25775 +
                       C71393 * C5775 + C75656 + C75656 + C93853 * C6427 +
                       C71392 * C3409 + C75655 + C75655 + C93856 * C3993) *
                          C93694 +
                      (C71394 * C10964 + C72844 + C72844 + C70728 * C11756 +
                       C71393 * C1389 + C72845 + C72845 + C93853 * C1901 +
                       C71392 * C1388 + C72846 + C72846 + C93856 * C1900) *
                          C42379) *
                         C93585 * C2696) *
                        C93625 * C1981 +
                    (((C74760 + C74759 + C74758) * C42379 +
                      (C71392 * C3410 + C75658 + C75658 + C93856 * C3994 +
                       C71393 * C5776 + C75659 + C75659 + C93853 * C6428 +
                       C71394 * C33015 + C75660 + C75660 + C70728 * C33869) *
                          C93694) *
                         C93585 * C2696 -
                     ((C73783 + C73784 + C73785) * C93694 +
                      (C71434 + C71433 + C71432) * C42379) *
                         C93585 * C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93856 +
            C25027 * C93853 + C25030 * C70728) *
               C42379 +
           (C20554 * C93856 + C22873 * C93853 + C25029 * C70728) * C93694) *
              C93639 * C93625 * C97 -
          ((C36249 * C70728 + C25892 * C93853 + C21610 * C93856) * C93694 +
           (C37156 * C70728 + C26841 * C93853 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93856) *
               C42379) *
              C93639 * C93625 * C98 +
          (((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C93856 +
            (C20048 * C1386 + C23547 + C23547 + C93585 * C1402) * C93853 +
            (C20048 * C1391 + C33951 + C33951 + C93585 * C1407) * C70728) *
               C42379 +
           ((C20048 * C805 + C20060 + C20060 + C93585 * C821) * C93856 +
            (C20048 * C3411 + C23548 + C23548 + C93585 * C3419) * C93853 +
            (C20048 * C5777 + C33952 + C33952 + C93585 * C5783) * C70728) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93856 +
            C25027 * C93853 + C25030 * C70728) *
               C42379 +
           (C87513 + C87514 + C87515) * C93694) *
              C93639 * C800 -
          ((C87516 + C87517 + C87518) * C93694 +
           (C87515 + C87514 + C87513) * C42379) *
              C93639 * C801 +
          ((C87518 + C87517 + C87516) * C42379 +
           (C20556 * C93856 + C22871 * C93853 +
            (C20048 * C21100 + C21111 + C21111 + C93585 * C21102) * C70728) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C20049 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93585) *
               C93856 +
           ((C54711 + C54712) * C20049 + (C54713 + C54714) * C93585) * C93853 +
           ((C54722 + C54721) * C20049 + (C54720 + C54719) * C93585) * C70728) *
              C93639 * C93625 * C97 -
          (((C54715 + C54716) * C93585 + (C54717 + C54718) * C20049) * C70728 +
           (C57027 * C93585 + C57028 * C20049) * C93853 +
           ((C42509 + C42508) * C93585 + (C42507 + C42506) * C20049) * C93856) *
              C93639 * C93625 * C98 +
          ((C42518 * C20049 + C42519 * C93585) * C93856 +
           ((C45819 + C45818) * C20049 + (C45817 + C45816) * C93585) * C93853 +
           ((C42479 * C1391 + C42379 * C1473 + C42480 * C5777 +
             C93694 * C5872) *
                C20049 +
            (C42479 * C1399 + C42379 * C1481 + C42480 * C5780 +
             C93694 * C5875) *
                C93585) *
               C70728) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
                C20049 +
            (C42479 * C114 + C42379 * C195 + C42480 * C815 + C93694 * C897) *
                C93585) *
               C93856 +
           ((C54711 + C54712) * C20049 + (C54713 + C54714) * C93585) * C93853 +
           ((C54722 + C54721) * C20049 + (C54720 + C54719) * C93585) * C70728) *
              C93639 * C800 -
          (((C42480 * C16397 + C93694 * C16489 + C42479 * C5778 +
             C42379 * C5873) *
                C93585 +
            (C42480 * C16395 + C93694 * C16487 + C42479 * C5775 +
             C42379 * C5870) *
                C20049) *
               C70728 +
           ((C58262 + C58261) * C93585 + (C58260 + C58259) * C20049) * C93853 +
           ((C42480 * C816 + C93694 * C898 + C42479 * C815 + C42379 * C897) *
                C93585 +
            (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
                C20049) *
               C93856) *
              C93639 * C801 +
          (((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
                C20049 +
            (C42479 * C816 + C42379 * C898 + C42480 * C4900 + C93694 * C5019) *
                C93585) *
               C93856 +
           ((C42479 * C8520 + C42379 * C8645 + C42480 * C19095 +
             C93694 * C19221) *
                C20049 +
            (C42479 * C8523 + C42379 * C8648 + C42480 * C19097 +
             C93694 * C19223) *
                C93585) *
               C93853 +
           ((C42479 * C16395 + C42379 * C16487 + C42480 * C21100 +
             C93694 * C21161) *
                C20049 +
            (C42479 * C16397 + C42379 * C16489 + C42480 * C21101 +
             C93694 * C21162) *
                C93585) *
               C70728) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C20049 +
                      (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                       C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                          C93585) *
                         C42379 +
                     ((C70879 * C807 + C93856 * C955 + C70880 * C3409 +
                       C93853 * C3565 + C70881 * C5775 + C70728 * C5950) *
                          C20049 +
                      (C70879 * C815 + C93856 * C963 + C70880 * C3413 +
                       C93853 * C3569 + C70881 * C5778 + C70728 * C5953) *
                          C93585) *
                         C93694) *
                        C93639 * C93625 * C97 -
                    (((C73159 + C73160 + C73161) * C93585 +
                      (C73162 + C73163 + C73164) * C20049) *
                         C93694 +
                     ((C70912 + C70911 + C70910) * C93585 +
                      (C70909 + C70908 + C70907) * C20049) *
                         C42379) *
                        C93639 * C93625 * C98 +
                    (((C70918 + C70917 + C70916) * C20049 +
                      (C70915 + C70914 + C70913) * C93585) *
                         C42379 +
                     ((C70879 * C805 + C93856 * C953 + C70880 * C3411 +
                       C93853 * C3567 + C70881 * C5777 + C70728 * C5952) *
                          C20049 +
                      (C70879 * C813 + C93856 * C961 + C70880 * C3415 +
                       C93853 * C3571 + C70881 * C5780 + C70728 * C5955) *
                          C93585) *
                         C93694) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C20049 +
                      (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                       C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                          C93585) *
                         C42379 +
                     ((C87691 + C87692 + C87693) * C20049 +
                      (C87694 + C87695 + C87696) * C93585) *
                         C93694) *
                        C93639 * C800 -
                    (((C87697 + C87698 + C87699) * C93585 +
                      (C87700 + C87701 + C87702) * C20049) *
                         C93694 +
                     ((C87696 + C87695 + C87694) * C93585 +
                      (C87693 + C87692 + C87691) * C20049) *
                         C42379) *
                        C93639 * C801 +
                    (((C87702 + C87701 + C87700) * C20049 +
                      (C87699 + C87698 + C87697) * C93585) *
                         C42379 +
                     ((C70879 * C4897 + C93856 * C5096 + C70880 * C19095 +
                       C93853 * C19323 + C70881 * C21100 + C70728 * C21213) *
                          C20049 +
                      (C70879 * C4900 + C93856 * C5099 + C70880 * C19097 +
                       C93853 * C19325 + C70881 * C21101 + C70728 * C21214) *
                          C93585) *
                         C93694) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C20049 * C108 + C93585 * C114) * C42479 +
                      (C20049 * C189 + C93585 * C362) * C42379 +
                      C20749 * C42480 + C20750 * C93694) *
                         C93856 +
                     (C25319 * C42479 + C25320 * C42379 + C23109 * C42480 +
                      C23108 * C93694) *
                         C93853 +
                     (C25326 * C42479 + C25325 * C42379 + C25324 * C42480 +
                      C25323 * C93694) *
                         C70728) *
                        C93639 * C93625 * C97 -
                    ((C36550 * C93694 + C36549 * C42480 + C37474 * C42379 +
                      C37473 * C42479) *
                         C70728 +
                     (C26211 * C93694 + C26210 * C42480 + C27145 * C42379 +
                      C27144 * C42479) *
                         C93853 +
                     (C21833 * C93694 + C21832 * C42480 +
                      (C20049 * C190 + C93585 * C363) * C42379 +
                      (C20049 * C109 + C93585 * C115) * C42479) *
                         C93856) *
                        C93639 * C93625 * C98 +
                    (((C20049 * C110 + C93585 * C116) * C42479 +
                      (C20049 * C191 + C93585 * C364) * C42379 +
                      (C20049 * C805 + C93585 * C813) * C42480 +
                      (C20049 * C887 + C93585 * C1019) * C93694) *
                         C93856 +
                     ((C20049 * C1386 + C93585 * C1394) * C42479 +
                      (C20049 * C1468 + C93585 * C1600) * C42379 +
                      (C20049 * C3411 + C93585 * C3415) * C42480 +
                      (C20049 * C3493 + C93585 * C3641) * C93694) *
                         C93853 +
                     ((C20049 * C1391 + C93585 * C1399) * C42479 +
                      (C20049 * C1473 + C93585 * C1605) * C42379 +
                      (C20049 * C5777 + C93585 * C5780) * C42480 +
                      (C20049 * C5872 + C93585 * C6032) * C93694) *
                         C70728) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C20049 * C108 + C93585 * C114) * C42479 +
                      (C20049 * C189 + C93585 * C362) * C42379 +
                      C20749 * C42480 + C20750 * C93694) *
                         C93856 +
                     (C25319 * C42479 + C25320 * C42379 + C23109 * C42480 +
                      C23108 * C93694) *
                         C93853 +
                     (C25326 * C42479 + C25325 * C42379 + C25324 * C42480 +
                      C25323 * C93694) *
                         C70728) *
                        C93639 * C800 -
                    ((C25321 * C93694 + C25322 * C42480 + C25323 * C42379 +
                      C25324 * C42479) *
                         C70728 +
                     (C23106 * C93694 + C23107 * C42480 + C23108 * C42379 +
                      C23109 * C42479) *
                         C93853 +
                     (C20752 * C93694 + C20751 * C42480 + C20750 * C42379 +
                      C20749 * C42479) *
                         C93856) *
                        C93639 * C801 +
                    ((C20751 * C42479 + C20752 * C42379 + C20753 * C42480 +
                      C20754 * C93694) *
                         C93856 +
                     (C23107 * C42479 + C23106 * C42379 + C23105 * C42480 +
                      C23104 * C93694) *
                         C93853 +
                     (C25322 * C42479 + C25321 * C42379 +
                      (C20049 * C21100 + C93585 * C21101) * C42480 +
                      (C20049 * C21161 + C93585 * C21265) * C93694) *
                         C70728) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
            C42745 + C42745 + C93694 * C1079) *
               C93585 * C93856 +
           (C55081 + C55082) * C93585 * C93853 +
           (C55086 + C55085) * C93585 * C70728) *
              C93639 * C93625 * C97 -
          ((C55083 + C55084) * C93585 * C70728 + C57444 * C93585 * C93853 +
           (C42779 + C42778) * C93585 * C93856) *
              C93639 * C93625 * C98 +
          (C42784 * C93585 * C93856 + (C46137 + C46136) * C93585 * C93853 +
           (C42741 * C1391 + C44297 + C44297 + C42379 * C1663 + C42742 * C5777 +
            C44298 + C44298 + C93694 * C6109) *
               C93585 * C70728) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42741 * C108 + C42744 + C42744 + C42379 * C419 + C42742 * C807 +
            C42745 + C42745 + C93694 * C1079) *
               C93585 * C93856 +
           (C55081 + C55082) * C93585 * C93853 +
           (C55086 + C55085) * C93585 * C70728) *
              C93639 * C800 -
          ((C42742 * C16395 + C58662 + C58662 + C93694 * C16719 +
            C42741 * C5775 + C58661 + C58661 + C42379 * C6107) *
               C93585 * C70728 +
           (C58670 + C58669) * C93585 * C93853 +
           (C42742 * C808 + C43583 + C43583 + C93694 * C1080 + C42741 * C807 +
            C43584 + C43584 + C42379 * C1079) *
               C93585 * C93856) *
              C93639 * C801 +
          ((C42741 * C808 + C43585 + C43585 + C42379 * C1080 + C42742 * C4897 +
            C43586 + C43586 + C93694 * C5325) *
               C93585 * C93856 +
           (C42741 * C8520 + C54061 + C54061 + C42379 * C8984 +
            C42742 * C19095 + C54062 + C54062 + C93694 * C19563) *
               C93585 * C93853 +
           (C42741 * C16395 + C87851 + C87851 + C42379 * C16719 +
            C42742 * C21100 + C87852 + C87852 + C93694 * C21316) *
               C93585 * C70728) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                      C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                         C42479 +
                     (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                      C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                         C42379 +
                     (C70879 * C807 + C93856 * C955 + C70880 * C3409 +
                      C93853 * C3565 + C70881 * C5775 + C70728 * C5950) *
                         C42480 +
                     (C70879 * C889 + C93856 * C1145 + C70880 * C3491 +
                      C93853 * C3783 + C70881 * C5870 + C70728 * C6196) *
                         C93694) *
                        C93585 * C93639 * C93625 * C97 -
                    ((C73465 + C73466 + C73467) * C93694 +
                     (C73162 + C73163 + C73164) * C42480 +
                     (C71155 + C71154 + C71153) * C42379 +
                     (C70909 + C70908 + C70907) * C42479) *
                        C93585 * C93639 * C93625 * C98 +
                    ((C70918 + C70917 + C70916) * C42479 +
                     (C71158 + C71157 + C71156) * C42379 +
                     (C70879 * C805 + C93856 * C953 + C70880 * C3411 +
                      C93853 * C3567 + C70881 * C5777 + C70728 * C5952) *
                         C42480 +
                     (C70879 * C887 + C93856 * C1143 + C70880 * C3493 +
                      C93853 * C3785 + C70881 * C5872 + C70728 * C6198) *
                         C93694) *
                        C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                      C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                         C42479 +
                     (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                      C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                         C42379 +
                     (C87691 + C87692 + C87693) * C42480 +
                     (C87939 + C87940 + C87941) * C93694) *
                        C93585 * C93639 * C800 -
                    ((C87942 + C87943 + C87944) * C93694 +
                     (C87700 + C87701 + C87702) * C42480 +
                     (C87941 + C87940 + C87939) * C42379 +
                     (C87693 + C87692 + C87691) * C42479) *
                        C93585 * C93639 * C801 +
                    ((C87702 + C87701 + C87700) * C42479 +
                     (C87944 + C87943 + C87942) * C42379 +
                     (C70879 * C4897 + C93856 * C5096 + C70880 * C19095 +
                      C93853 * C19323 + C70881 * C21100 + C70728 * C21213) *
                         C42480 +
                     (C70879 * C5016 + C93856 * C5414 + C70880 * C19221 +
                      C93853 * C19669 + C70881 * C21161 + C70728 * C21375) *
                         C93694) *
                        C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C70879 +
            (C20049 * C276 + C93585 * C579) * C93856 + C25319 * C70880 +
            C25604 * C93853 + C25326 * C70881 + C25607 * C70728) *
               C42379 +
           (C20749 * C70879 + C20933 * C93856 + C23109 * C70880 +
            C23329 * C93853 + C25324 * C70881 + C25606 * C70728) *
               C93694) *
              C93639 * C93625 * C97 -
          ((C36854 * C70728 + C36549 * C70881 + C26524 * C93853 +
            C26210 * C70880 + C22049 * C93856 + C21832 * C70879) *
               C93694 +
           (C37785 * C70728 + C37473 * C70881 + C27444 * C93853 +
            C27144 * C70880 + (C20049 * C277 + C93585 * C580) * C93856 +
            (C20049 * C109 + C93585 * C115) * C70879) *
               C42379) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C70879 +
            (C20049 * C278 + C93585 * C581) * C93856 +
            (C20049 * C1386 + C93585 * C1394) * C70880 +
            (C20049 * C1534 + C93585 * C1782) * C93853 +
            (C20049 * C1391 + C93585 * C1399) * C70881 +
            (C20049 * C1539 + C93585 * C1787) * C70728) *
               C42379 +
           ((C20049 * C805 + C93585 * C813) * C70879 +
            (C20049 * C953 + C93585 * C1201) * C93856 +
            (C20049 * C3411 + C93585 * C3415) * C70880 +
            (C20049 * C3567 + C93585 * C3855) * C93853 +
            (C20049 * C5777 + C93585 * C5780) * C70881 +
            (C20049 * C5952 + C93585 * C6275) * C70728) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C70879 +
            (C20049 * C276 + C93585 * C579) * C93856 + C25319 * C70880 +
            C25604 * C93853 + C25326 * C70881 + C25607 * C70728) *
               C42379 +
           (C88019 + C88020 + C88021 + C88022 + C88023 + C88024) * C93694) *
              C93639 * C800 -
          ((C88025 + C88026 + C88027 + C88028 + C88029 + C88030) * C93694 +
           (C88024 + C88023 + C88022 + C88021 + C88020 + C88019) * C42379) *
              C93639 * C801 +
          ((C88030 + C88029 + C88028 + C88027 + C88026 + C88025) * C42379 +
           (C20753 * C70879 + C20935 * C93856 + C23105 * C70880 +
            C23327 * C93853 + (C20049 * C21100 + C93585 * C21101) * C70881 +
            (C20049 * C21213 + C93585 * C21426) * C70728) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
               C70879 +
           (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
               C93856 +
           (C54711 + C54712) * C70880 + (C55411 + C55412) * C93853 +
           (C54722 + C54721) * C70881 + (C55416 + C55415) * C70728) *
              C93585 * C93639 * C93625 * C97 -
          ((C55413 + C55414) * C70728 + (C54717 + C54718) * C70881 +
           C57848 * C93853 + C57028 * C70880 + (C43036 + C43035) * C93856 +
           (C42507 + C42506) * C70879) *
              C93585 * C93639 * C93625 * C98 +
          (C42518 * C70879 + C43041 * C93856 + (C45819 + C45818) * C70880 +
           (C46451 + C46450) * C93853 +
           (C42479 * C1391 + C42379 * C1473 + C42480 * C5777 + C93694 * C5872) *
               C70881 +
           (C42479 * C1539 + C42379 * C1845 + C42480 * C5952 + C93694 * C6352) *
               C70728) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42479 * C108 + C42379 * C189 + C42480 * C807 + C93694 * C889) *
               C70879 +
           (C42479 * C276 + C42379 * C635 + C42480 * C955 + C93694 * C1261) *
               C93856 +
           (C54711 + C54712) * C70880 + (C55411 + C55412) * C93853 +
           (C54722 + C54721) * C70881 + (C55416 + C55415) * C70728) *
              C93585 * C93639 * C800 -
          ((C42480 * C16565 + C93694 * C16959 + C42479 * C5950 +
            C42379 * C6350) *
               C70728 +
           (C42480 * C16395 + C93694 * C16487 + C42479 * C5775 +
            C42379 * C5870) *
               C70881 +
           (C59068 + C59067) * C93853 + (C58260 + C58259) * C70880 +
           (C42480 * C956 + C93694 * C1262 + C42479 * C955 + C42379 * C1261) *
               C93856 +
           (C42480 * C808 + C93694 * C890 + C42479 * C807 + C42379 * C889) *
               C70879) *
              C93585 * C93639 * C801 +
          ((C42479 * C808 + C42379 * C890 + C42480 * C4897 + C93694 * C5016) *
               C70879 +
           (C42479 * C956 + C42379 * C1262 + C42480 * C5096 + C93694 * C5598) *
               C93856 +
           (C42479 * C8520 + C42379 * C8645 + C42480 * C19095 +
            C93694 * C19221) *
               C70880 +
           (C42479 * C8749 + C42379 * C9305 + C42480 * C19323 +
            C93694 * C19884) *
               C93853 +
           (C42479 * C16395 + C42379 * C16487 + C42480 * C21100 +
            C93694 * C21161) *
               C70881 +
           (C42479 * C16565 + C42379 * C16959 + C42480 * C21213 +
            C93694 * C21477) *
               C70728) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                      C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                      C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                         C42379 +
                     (C71392 * C807 + C72109 + C72109 + C93856 * C1319 +
                      C71393 * C3409 + C72108 + C72108 + C93853 * C3993 +
                      C71394 * C5775 + C72107 + C72107 + C70728 * C6427) *
                         C93694) *
                        C93585 * C93639 * C93625 * C97 -
                    ((C73783 + C73784 + C73785) * C93694 +
                     (C71434 + C71433 + C71432) * C42379) *
                        C93585 * C93639 * C93625 * C98 +
                    ((C71437 + C71436 + C71435) * C42379 +
                     (C71392 * C805 + C73774 + C73774 + C93856 * C1317 +
                      C71393 * C3411 + C73775 + C73775 + C93853 * C3995 +
                      C71394 * C5777 + C73776 + C73776 + C70728 * C6429) *
                         C93694) *
                        C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                      C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                      C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                         C42379 +
                     (C88206 + C88207 + C88208) * C93694) *
                        C93585 * C93639 * C800 -
                    ((C88209 + C88210 + C88211) * C93694 +
                     (C88208 + C88207 + C88206) * C42379) *
                        C93585 * C93639 * C801 +
                    ((C88211 + C88210 + C88209) * C42379 +
                     (C71392 * C4897 + C88191 + C88191 + C93856 * C5675 +
                      C71393 * C19095 + C88192 + C88192 + C93853 * C19984 +
                      C71394 * C21100 + C88193 + C88193 + C70728 * C21528) *
                         C93694) *
                        C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[30] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 +
                       C14744 * C109 + C14748 + C14748 + C93590 * C121) *
                          C93706 * C14739 +
                      (C15585 + C15586) * C93706 * C14740 + C15592 * C14741) *
                         C93639 * C1979 -
                     ((C15589 + C15590) * C93706 * C14741 +
                      (C15588 + C15587) * C93706 * C14740 +
                      (C15586 + C15585) * C93706 * C14739) *
                         C93639 * C1980) *
                        C1981 +
                    (((C17156 + C17157) * C93706 * C14739 +
                      (C17158 + C17159) * C93706 * C14740 +
                      (C14742 * C4898 + C17146 + C17146 + C93815 * C4904 +
                       C14744 * C4899 + C17147 + C17147 + C93590 * C4905) *
                          C93706 * C14741) *
                         C93639 * C1980 -
                     ((C17159 + C17158) * C93706 * C14741 +
                      (C17157 + C17156) * C93706 * C14740 +
                      (C14744 * C110 + C14757 + C14757 + C93590 * C122 +
                       C14742 * C109 + C14758 + C14758 + C93815 * C121) *
                          C93706 * C14739) *
                         C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                      C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                      C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                         C93706 * C93680 * C93639 * C1979 -
                     (C106 * C804 + C829 + C829 + C92 * C820 + C104 * C805 +
                      C830 + C830 + C91 * C821 + C102 * C806 + C831 + C831 +
                      C90 * C822 + C100 * C807 + C832 + C832 + C89 * C823) *
                         C93706 * C93680 * C93639 * C1980) *
                        C1981 +
                    ((C100 * C806 + C1987 + C1987 + C89 * C822 + C102 * C805 +
                      C1988 + C1988 + C90 * C821 + C104 * C804 + C1989 + C1989 +
                      C91 * C820 + C106 * C1983 + C1990 + C1990 + C92 * C1985) *
                         C93706 * C93680 * C93639 * C1980 -
                     (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                      C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                      C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                         C93706 * C93680 * C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 +
                       C14744 * C109 + C14748 + C14748 + C93590 * C121) *
                          C28719 +
                      (C30223 + C30224) * C28720 + C30229 * C28721) *
                         C93680 * C93639 * C1979 -
                     ((C14744 * C5776 + C16411 + C16411 + C93590 * C5782 +
                       C14742 * C5775 + C16410 + C16410 + C93815 * C5781) *
                          C28721 +
                      (C19122 + C19123) * C28720 + (C15586 + C15585) * C28719) *
                         C93680 * C93639 * C1980) *
                        C1981 +
                    (((C17156 + C17157) * C28719 +
                      (C14742 * C3410 + C18142 + C18142 + C93815 * C3418 +
                       C14744 * C3411 + C18143 + C18143 + C93590 * C3419) *
                          C28720 +
                      (C14742 * C5776 + C31064 + C31064 + C93815 * C5782 +
                       C14744 * C5777 + C31065 + C31065 + C93590 * C5783) *
                          C28721) *
                         C93680 * C93639 * C1980 -
                     ((C14744 * C1391 + C28723 + C28723 + C93590 * C1407 +
                       C14742 * C1390 + C28724 + C28724 + C93815 * C1406) *
                          C28721 +
                      (C14744 * C1386 + C18141 + C18141 + C93590 * C1402 +
                       C14742 * C1387 + C18140 + C18140 + C93815 * C1403) *
                          C28720 +
                      (C14744 * C110 + C14757 + C14757 + C93590 * C122 +
                       C14742 * C109 + C14758 + C14758 + C93815 * C121) *
                          C28719) *
                         C93680 * C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C91732 +
            (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
             C14840 * C816 + C14741 * C898) *
                C93815 +
            (C14866 + C14867 + C14868) * C91722 +
            (C14869 + C14870 + C14871) * C93590) *
               C93706 * C93639 * C1979 -
           ((C17270 + C17271 + C17272) * C93590 +
            (C17273 + C17274 + C17275) * C91722 +
            (C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
             C14838 * C815 + C14739 * C897) *
                C93815 +
            (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
             C14838 * C807 + C14739 * C889) *
                C91732) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C17275 + C17274 + C17273) * C91732 +
            (C17272 + C17271 + C17270) * C93815 +
            (C14838 * C805 + C14739 * C887 + C14839 * C810 + C14740 * C892 +
             C14840 * C4899 + C14741 * C5018) *
                C91722 +
            (C14838 * C813 + C14739 * C895 + C14839 * C818 + C14740 * C900 +
             C14840 * C4902 + C14741 * C5021) *
                C93590) *
               C93706 * C93639 * C1980 -
           ((C14872 + C14873 + C14874) * C93590 +
            (C14875 + C14876 + C14877) * C91722 +
            (C14871 + C14870 + C14869) * C93815 +
            (C14868 + C14867 + C14866) * C91732) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C101 +
            (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C93706 * C93639 * C1979 -
           (C2071 * C92 + C2072 * C107 + C2073 * C91 + C2074 * C105 +
            C2075 * C90 + C2076 * C103 + (C188 * C815 + C93680 * C897) * C89 +
            (C188 * C807 + C93680 * C889) * C101) *
               C93706 * C93639 * C1980) *
              C1981 +
          ((C2076 * C101 + C2075 * C89 + C2074 * C103 + C2073 * C90 +
            C2072 * C105 + C2071 * C91 +
            (C188 * C1983 + C93680 * C2056) * C107 +
            (C188 * C1984 + C93680 * C2057) * C92) *
               C93706 * C93639 * C1980 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C91732 +
             (C188 * C114 + C93680 * C195) * C93815 + C218 * C91722 +
             C219 * C93590) *
                C28719 +
            (C30308 + C30309 + C30310 + C30311) * C28720 + C30334 * C28721) *
               C93639 * C1979 -
           ((C31168 * C93590 + C31169 * C91722 +
             (C188 * C5778 + C93680 * C5873) * C93815 +
             (C188 * C5775 + C93680 * C5870) * C91732) *
                C28721 +
            (C11978 * C93590 + C11979 * C91722 + C13955 * C93815 +
             C13954 * C91732) *
                C28720 +
            (C2075 * C93590 + C2076 * C91722 +
             (C188 * C815 + C93680 * C897) * C93815 +
             (C188 * C807 + C93680 * C889) * C91732) *
                C28719) *
               C93639 * C1980) *
              C1981 +
          (((C2076 * C91732 + C2075 * C93815 + C2074 * C91722 +
             C2073 * C93590) *
                C28719 +
            (C11979 * C91732 + C11978 * C93815 + C11977 * C91722 +
             C11976 * C93590) *
                C28720 +
            (C31169 * C91732 + C31168 * C93815 +
             (C188 * C5777 + C93680 * C5872) * C91722 +
             (C188 * C5780 + C93680 * C5875) * C93590) *
                C28721) *
               C93639 * C1980 -
           ((C11109 * C93590 + C11110 * C91722 + C11111 * C93815 +
             C11112 * C91732) *
                C28721 +
            (C2787 * C93590 + C2788 * C91722 + C2789 * C93815 +
             C2790 * C91732) *
                C28720 +
            (C221 * C93590 + C220 * C91722 + C219 * C93815 + C218 * C91732) *
                C28719) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C91732 +
             (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
             C306 * C93590) *
                C14739 +
            (C15749 + C15750 + C15751 + C15752) * C14740 + C15775 * C14741) *
               C93639 * C1979 -
           ((C15771 + C15772 + C15773 + C15774) * C14741 +
            (C15756 + C15755 + C15754 + C15753) * C14740 +
            (C15752 + C15751 + C15750 + C15749) * C14739) *
               C93639 * C1980) *
              C1981 +
          (((C17374 + C17375 + C17376 + C17377) * C14739 +
            (C17378 + C17379 + C17380 + C17381) * C14740 +
            (C15767 * C91732 + C15766 * C93815 +
             (C275 * C4899 + C93706 * C5098) * C91722 +
             (C275 * C4902 + C93706 * C5101) * C93590) *
                C14741) *
               C93639 * C1980 -
           ((C17381 + C17380 + C17379 + C17378) * C14741 +
            (C17377 + C17376 + C17375 + C17374) * C14740 +
            (C308 * C93590 + C307 * C91722 + C306 * C93815 + C305 * C91732) *
                C14739) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C101 +
            (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C93680 * C93639 * C1979 -
           (C2157 * C92 + C2158 * C107 + C2159 * C91 + C2160 * C105 +
            C2161 * C90 + C2162 * C103 + (C275 * C815 + C93706 * C963) * C89 +
            (C275 * C807 + C93706 * C955) * C101) *
               C93680 * C93639 * C1980) *
              C1981 +
          ((C2162 * C101 + C2161 * C89 + C2160 * C103 + C2159 * C90 +
            C2158 * C105 + C2157 * C91 +
            (C275 * C1983 + C93706 * C2142) * C107 +
            (C275 * C1984 + C93706 * C2143) * C92) *
               C93680 * C93639 * C1980 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C91732 +
            (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
             C28878 * C1397 + C28721 * C1545) *
                C93815 +
            (C28904 + C28905 + C28906) * C91722 +
            (C28907 + C28908 + C28909) * C93590) *
               C93680 * C93639 * C1979 -
           ((C31280 + C31281 + C31282) * C93590 +
            (C31283 + C31284 + C31285) * C91722 +
            (C28878 * C5778 + C28721 * C5953 + C28877 * C3413 + C28720 * C3569 +
             C28876 * C815 + C28719 * C963) *
                C93815 +
            (C28878 * C5775 + C28721 * C5950 + C28877 * C3409 + C28720 * C3565 +
             C28876 * C807 + C28719 * C955) *
                C91732) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C31285 + C31284 + C31283) * C91732 +
            (C31282 + C31281 + C31280) * C93815 +
            (C28876 * C805 + C28719 * C953 + C28877 * C3411 + C28720 * C3567 +
             C28878 * C5777 + C28721 * C5952) *
                C91722 +
            (C28876 * C813 + C28719 * C961 + C28877 * C3415 + C28720 * C3571 +
             C28878 * C5780 + C28721 * C5955) *
                C93590) *
               C93680 * C93639 * C1980 -
           ((C28910 + C28911 + C28912) * C93590 +
            (C28913 + C28914 + C28915) * C91722 +
            (C28909 + C28908 + C28907) * C93815 +
            (C28906 + C28905 + C28904) * C91732) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C14838 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C14739 +
            (C15876 + C15877) * C14839 + (C15878 + C15879) * C14740 +
            C15888 * C14840 + C15889 * C14741) *
               C93706 * C93639 * C1979 -
           ((C15884 + C15885) * C14741 + (C15886 + C15887) * C14840 +
            (C15883 + C15882) * C14740 + (C15881 + C15880) * C14839 +
            (C15879 + C15878) * C14739 + (C15877 + C15876) * C14838) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C17496 + C17497) * C14838 + (C17498 + C17499) * C14739 +
            (C17500 + C17501) * C14839 + (C17502 + C17503) * C14740 +
            (C91732 * C4898 + C93815 * C4901 + C91722 * C4899 +
             C93590 * C4902) *
                C14840 +
            (C91732 * C5017 + C93815 * C5213 + C91722 * C5018 +
             C93590 * C5214) *
                C14741) *
               C93706 * C93639 * C1980 -
           ((C17503 + C17502) * C14741 + (C17501 + C17500) * C14840 +
            (C17499 + C17498) * C14740 + (C17497 + C17496) * C14839 +
            (C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
                C14739 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C14838) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C93680) *
               C93706 * C93639 * C1979 -
           ((C107 * C886 + C92 * C1018 + C105 * C887 + C91 * C1019 +
             C103 * C888 + C90 * C1020 + C101 * C889 + C89 * C1021) *
                C93680 +
            (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
             C90 * C814 + C101 * C807 + C89 * C815) *
                C188) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C101 * C806 + C89 * C814 + C103 * C805 + C90 * C813 + C105 * C804 +
             C91 * C812 + C107 * C1983 + C92 * C1984) *
                C188 +
            (C101 * C888 + C89 * C1020 + C103 * C887 + C90 * C1019 +
             C105 * C886 + C91 * C1018 + C107 * C2056 + C92 * C2228) *
                C93680) *
               C93706 * C93639 * C1980 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C93680 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C188 +
             (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                 C93680) *
                C28719 +
            ((C30513 + C30514) * C188 + (C30515 + C30516) * C93680) * C28720 +
            C30529 * C28721) *
               C93639 * C1979 -
           (((C91722 * C5871 + C93590 * C6031 + C91732 * C5870 +
              C93815 * C6030) *
                 C93680 +
             (C91722 * C5776 + C93590 * C5779 + C91732 * C5775 +
              C93815 * C5778) *
                 C188) *
                C28721 +
            ((C19462 + C19463) * C93680 + (C19464 + C19465) * C188) * C28720 +
            ((C15879 + C15878) * C93680 + (C15877 + C15876) * C188) * C28719) *
               C93639 * C1980) *
              C1981 +
          ((((C17496 + C17497) * C188 + (C17498 + C17499) * C93680) * C28719 +
            ((C91732 * C3410 + C93815 * C3414 + C91722 * C3411 +
              C93590 * C3415) *
                 C188 +
             (C91732 * C3492 + C93815 * C3640 + C91722 * C3493 +
              C93590 * C3641) *
                 C93680) *
                C28720 +
            ((C91732 * C5776 + C93815 * C5779 + C91722 * C5777 +
              C93590 * C5780) *
                 C188 +
             (C91732 * C5871 + C93815 * C6031 + C91722 * C5872 +
              C93590 * C6032) *
                 C93680) *
                C28721) *
               C93639 * C1980 -
           (((C91722 * C1473 + C93590 * C1605 + C91732 * C1472 +
              C93815 * C1604) *
                 C93680 +
             (C91722 * C1391 + C93590 * C1399 + C91732 * C1390 +
              C93815 * C1398) *
                 C188) *
                C28721 +
            ((C91722 * C1468 + C93590 * C1600 + C91732 * C1469 +
              C93815 * C1601) *
                 C93680 +
             (C91722 * C1386 + C93590 * C1394 + C91732 * C1387 +
              C93815 * C1395) *
                 C188) *
                C28720 +
            ((C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
                 C93680 +
             (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                 C188) *
                C28719) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
             C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 +
             C15105 + C14741 * C1080) *
                C93815 +
            (C15139 + C15140 + C15141) * C93590) *
               C93706 * C93639 * C1979 -
           ((C17617 + C17618 + C17619) * C93590 +
            (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 + C15100 * C808 +
             C15970 + C15970 + C14740 * C1080 + C15099 * C807 + C15971 +
             C15971 + C14739 * C1079) *
                C93815) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C17619 + C17618 + C17617) * C93815 +
            (C15099 * C805 + C17608 + C17608 + C14739 * C1077 + C15100 * C810 +
             C17609 + C17609 + C14740 * C1082 + C15101 * C4899 + C17610 +
             C17610 + C14741 * C5327) *
                C93590) *
               C93706 * C93639 * C1980 -
           ((C15142 + C15143 + C15144) * C93590 +
            (C15141 + C15140 + C15139) * C93815) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C93706 * C93639 * C1979 -
           (C2310 * C92 + C2311 * C91 + C2312 * C90 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C89) *
               C93706 * C93639 * C1980) *
              C1981 +
          ((C2312 * C89 + C2311 * C90 + C2310 * C91 +
            (C418 * C1983 + C2303 + C2303 + C93680 * C2295) * C92) *
               C93706 * C93639 * C1980 -
           (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C93706 *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C93815 +
             C448 * C93590) *
                C28719 +
            (C30606 + C30607) * C28720 + C30616 * C28721) *
               C93639 * C1979 -
           ((C31486 * C93590 +
             (C418 * C5775 + C14256 + C14256 + C93680 * C6107) * C93815) *
                C28721 +
            (C12307 * C93590 + C14261 * C93815) * C28720 +
            (C2312 * C93590 +
             (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C93815) *
                C28719) *
               C93639 * C1980) *
              C1981 +
          (((C2312 * C93815 + C2311 * C93590) * C28719 +
            (C12307 * C93815 + C12306 * C93590) * C28720 +
            (C31486 * C93815 +
             (C418 * C5777 + C14258 + C14258 + C93680 * C6109) * C93590) *
                C28721) *
               C93639 * C1980 -
           ((C11415 * C93590 + C11416 * C93815) * C28721 +
            (C3025 * C93590 + C3026 * C93815) * C28720 +
            (C449 * C93590 + C448 * C93815) * C28719) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C14838 +
             (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
             C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
                C93815 +
            (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
               C93639 * C1979 -
           ((C17718 + C17719 + C17720 + C17721 + C17722 + C17723) * C93590 +
            (C16059 * C14741 + C15769 * C14840 + C5429 * C14740 +
             C5130 * C14839 + C5426 * C14739 + C5123 * C14838) *
                C93815) *
               C93639 * C1980) *
              C1981 +
          (((C17723 + C17722 + C17721 + C17720 + C17719 + C17718) * C93815 +
            (C2160 * C14838 + C2390 * C14739 + C5126 * C14839 + C5427 * C14740 +
             (C275 * C4899 + C93706 * C5098) * C14840 +
             (C275 * C5018 + C93706 * C5416) * C14741) *
                C93590) *
               C93639 * C1980 -
           ((C15225 + C15226 + C15227 + C15228 + C15229 + C15230) * C93590 +
            (C15224 + C15223 + C15222 + C15221 + C15220 + C15219) * C93815) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C188 +
             (C275 * C189 + C93706 * C501) * C93680) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C93639 * C1979 -
           ((C2392 + C2382) * C92 + (C2393 + C2385) * C91 +
            (C2394 + C2388) * C90 +
            ((C275 * C889 + C93706 * C1145) * C93680 +
             (C275 * C807 + C93706 * C955) * C188) *
                C89) *
               C93639 * C1980) *
              C1981 +
          (((C2388 + C2394) * C89 + (C2385 + C2393) * C90 +
            (C2382 + C2392) * C91 +
            ((C275 * C1983 + C93706 * C2142) * C188 +
             (C275 * C2056 + C93706 * C2378) * C93680) *
                C92) *
               C93639 * C1980 -
           ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
            (C524 + C508) * C89) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
              C28878 * C1389 + C28721 * C1537) *
                 C188 +
             (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
              C28878 * C1471 + C28721 * C1727) *
                 C93680) *
                C93815 +
            ((C28904 + C28905 + C28906) * C188 +
             (C29150 + C29151 + C29152) * C93680) *
                C93590) *
               C93639 * C1979 -
           (((C31591 + C31592 + C31593) * C93680 +
             (C31283 + C31284 + C31285) * C188) *
                C93590 +
            ((C28878 * C5870 + C28721 * C6196 + C28877 * C3491 +
              C28720 * C3783 + C28876 * C889 + C28719 * C1145) *
                 C93680 +
             (C28878 * C5775 + C28721 * C5950 + C28877 * C3409 +
              C28720 * C3565 + C28876 * C807 + C28719 * C955) *
                 C188) *
                C93815) *
               C93639 * C1980) *
              C1981 +
          ((((C31285 + C31284 + C31283) * C188 +
             (C31593 + C31592 + C31591) * C93680) *
                C93815 +
            ((C28876 * C805 + C28719 * C953 + C28877 * C3411 + C28720 * C3567 +
              C28878 * C5777 + C28721 * C5952) *
                 C188 +
             (C28876 * C887 + C28719 * C1143 + C28877 * C3493 + C28720 * C3785 +
              C28878 * C5872 + C28721 * C6198) *
                 C93680) *
                C93590) *
               C93639 * C1980 -
           (((C29153 + C29154 + C29155) * C93680 +
             (C28913 + C28914 + C28915) * C188) *
                C93590 +
            ((C29152 + C29151 + C29150) * C93680 +
             (C28906 + C28905 + C28904) * C188) *
                C93815) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C275 +
             (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                 C93706) *
                C14739 +
            ((C15876 + C15877) * C275 + (C16149 + C16150) * C93706) * C14740 +
            C16157 * C14741) *
               C93639 * C1979 -
           (((C16153 + C16154) * C93706 + (C15886 + C15887) * C275) * C14741 +
            ((C16152 + C16151) * C93706 + (C15881 + C15880) * C275) * C14740 +
            ((C16150 + C16149) * C93706 + (C15877 + C15876) * C275) * C14739) *
               C93639 * C1980) *
              C1981 +
          ((((C17496 + C17497) * C275 + (C17830 + C17831) * C93706) * C14739 +
            ((C17500 + C17501) * C275 + (C17832 + C17833) * C93706) * C14740 +
            ((C91732 * C4898 + C93815 * C4901 + C91722 * C4899 +
              C93590 * C4902) *
                 C275 +
             (C91732 * C5097 + C93815 * C5504 + C91722 * C5098 +
              C93590 * C5505) *
                 C93706) *
                C14741) *
               C93639 * C1980 -
           (((C17833 + C17832) * C93706 + (C17501 + C17500) * C275) * C14741 +
            ((C17831 + C17830) * C93706 + (C17497 + C17496) * C275) * C14740 +
            ((C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                 C93706 +
             (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                 C275) *
                C14739) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C93706) *
               C93680 * C93639 * C1979 -
           ((C107 * C952 + C92 * C1200 + C105 * C953 + C91 * C1201 +
             C103 * C954 + C90 * C1202 + C101 * C955 + C89 * C1203) *
                C93706 +
            (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
             C90 * C814 + C101 * C807 + C89 * C815) *
                C275) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C101 * C806 + C89 * C814 + C103 * C805 + C90 * C813 + C105 * C804 +
             C91 * C812 + C107 * C1983 + C92 * C1984) *
                C275 +
            (C101 * C954 + C89 * C1202 + C103 * C953 + C90 * C1201 +
             C105 * C952 + C91 * C1200 + C107 * C2142 + C92 * C2460) *
                C93706) *
               C93680 * C93639 * C1980 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C93706 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C28876 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C28719 +
            (C30513 + C30514) * C28877 + (C30789 + C30790) * C28720 +
            C30525 * C28878 + C30795 * C28721) *
               C93680 * C93639 * C1979 -
           ((C91722 * C5951 + C93590 * C6274 + C91732 * C5950 +
             C93815 * C6273) *
                C28721 +
            (C91722 * C5776 + C93590 * C5779 + C91732 * C5775 +
             C93815 * C5778) *
                C28878 +
            (C19785 + C19786) * C28720 + (C19464 + C19465) * C28877 +
            (C16150 + C16149) * C28719 + (C15877 + C15876) * C28876) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C17496 + C17497) * C28876 + (C17830 + C17831) * C28719 +
            (C91732 * C3410 + C93815 * C3414 + C91722 * C3411 +
             C93590 * C3415) *
                C28877 +
            (C91732 * C3566 + C93815 * C3854 + C91722 * C3567 +
             C93590 * C3855) *
                C28720 +
            (C91732 * C5776 + C93815 * C5779 + C91722 * C5777 +
             C93590 * C5780) *
                C28878 +
            (C91732 * C5951 + C93815 * C6274 + C91722 * C5952 +
             C93590 * C6275) *
                C28721) *
               C93680 * C93639 * C1980 -
           ((C91722 * C1539 + C93590 * C1787 + C91732 * C1538 +
             C93815 * C1786) *
                C28721 +
            (C91722 * C1391 + C93590 * C1399 + C91732 * C1390 +
             C93815 * C1398) *
                C28878 +
            (C91722 * C1534 + C93590 * C1782 + C91732 * C1535 +
             C93815 * C1783) *
                C28720 +
            (C91722 * C1386 + C93590 * C1394 + C91732 * C1387 +
             C93815 * C1395) *
                C28877 +
            (C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                C28719 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C28876) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
              C14840 * C808 + C14741 * C890) *
                 C275 +
             (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
              C14840 * C956 + C14741 * C1262) *
                 C93706) *
                C93815 +
            ((C14866 + C14867 + C14868) * C275 +
             (C15391 + C15392 + C15393) * C93706) *
                C93590) *
               C93639 * C1979 -
           (((C17938 + C17939 + C17940) * C93706 +
             (C17273 + C17274 + C17275) * C275) *
                C93590 +
            ((C14840 * C5096 + C14741 * C5598 + C14839 * C956 + C14740 * C1262 +
              C14838 * C955 + C14739 * C1261) *
                 C93706 +
             (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
              C14838 * C807 + C14739 * C889) *
                 C275) *
                C93815) *
               C93639 * C1980) *
              C1981 +
          ((((C17275 + C17274 + C17273) * C275 +
             (C17940 + C17939 + C17938) * C93706) *
                C93815 +
            ((C14838 * C805 + C14739 * C887 + C14839 * C810 + C14740 * C892 +
              C14840 * C4899 + C14741 * C5018) *
                 C275 +
             (C14838 * C953 + C14739 * C1259 + C14839 * C958 + C14740 * C1264 +
              C14840 * C5098 + C14741 * C5600) *
                 C93706) *
                C93590) *
               C93639 * C1980 -
           (((C15394 + C15395 + C15396) * C93706 +
             (C14875 + C14876 + C14877) * C275) *
                C93590 +
            ((C15393 + C15392 + C15391) * C93706 +
             (C14868 + C14867 + C14866) * C275) *
                C93815) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C275 +
             (C188 * C276 + C93680 * C635) * C93706) *
                C89 +
            (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
               C93639 * C1979 -
           ((C2541 + C2531) * C92 + (C2542 + C2534) * C91 +
            (C2543 + C2537) * C90 +
            ((C188 * C955 + C93680 * C1261) * C93706 +
             (C188 * C807 + C93680 * C889) * C275) *
                C89) *
               C93639 * C1980) *
              C1981 +
          (((C2537 + C2543) * C89 + (C2534 + C2542) * C90 +
            (C2531 + C2541) * C91 +
            ((C188 * C1983 + C93680 * C2056) * C275 +
             (C188 * C2142 + C93680 * C2527) * C93706) *
                C92) *
               C93639 * C1980 -
           ((C661 + C653) * C92 + (C660 + C648) * C91 + (C659 + C645) * C90 +
            (C658 + C642) * C89) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C28876 +
             (C188 * C276 + C93680 * C635) * C28719 + C11107 * C28877 +
             C11679 * C28720 + C11114 * C28878 + C11682 * C28721) *
                C93815 +
            (C29304 + C29305 + C29306 + C29307 + C29308 + C29309) * C93590) *
               C93639 * C1979 -
           ((C31798 + C31792 + C31793 + C31794 + C31795 + C31796) * C93590 +
            ((C188 * C5950 + C93680 * C6350) * C28721 +
             (C188 * C5775 + C93680 * C5870) * C28878 + C14559 * C28720 +
             C13954 * C28877 + (C188 * C955 + C93680 * C1261) * C28719 +
             (C188 * C807 + C93680 * C889) * C28876) *
                C93815) *
               C93639 * C1980) *
              C1981 +
          (((C31796 + C31795 + C31794 + C31793 + C31792 + C31798) * C93815 +
            (C2074 * C28876 + C2539 * C28719 + C11977 * C28877 +
             C12624 * C28720 + (C188 * C5777 + C93680 * C5872) * C28878 +
             (C188 * C5952 + C93680 * C6352) * C28721) *
                C93590) *
               C93639 * C1980 -
           ((C29310 + C29311 + C29312 + C29313 + C29314 + C29315) * C93590 +
            (C29309 + C29308 + C29307 + C29306 + C29305 + C29304) * C93815) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezz[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
             C5698 * C14740 + C5701 * C14741) *
                C93815 +
            (C15471 + C15472 + C15473) * C93590) *
               C93639 * C1979 -
           ((C18039 + C18040 + C18041) * C93590 +
            (C16321 * C14741 + C5701 * C14740 + C5698 * C14739) * C93815) *
               C93639 * C1980) *
              C1981 +
          (((C18041 + C18040 + C18039) * C93815 +
            (C2625 * C14739 + C5699 * C14740 +
             (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C14741) *
                C93590) *
               C93639 * C1980 -
           ((C15474 + C15475 + C15476) * C93590 +
            (C15473 + C15472 + C15471) * C93815) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C93639 * C1979 -
           (C2627 * C92 + C2628 * C91 + C2629 * C90 +
            (C713 * C807 + C1328 + C1328 + C93706 * C1319) * C93680 * C89) *
               C93639 * C1980) *
              C1981 +
          ((C2629 * C89 + C2628 * C90 + C2627 * C91 +
            (C713 * C1983 + C2617 + C2617 + C93706 * C2609) * C93680 * C92) *
               C93639 * C1980 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C93639 *
               C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
             C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
             C29395 + C28721 * C1901) *
                C93680 * C93815 +
            (C29429 + C29430 + C29431) * C93680 * C93590) *
               C93639 * C1979 -
           ((C31912 + C31913 + C31914) * C93680 * C93590 +
            (C29391 * C5775 + C30106 + C30106 + C28721 * C6427 +
             C29390 * C3409 + C30107 + C30107 + C28720 * C3993 + C29389 * C807 +
             C30108 + C30108 + C28719 * C1319) *
                C93680 * C93815) *
               C93639 * C1980) *
              C1981 +
          (((C31914 + C31913 + C31912) * C93680 * C93815 +
            (C29389 * C805 + C31903 + C31903 + C28719 * C1317 + C29390 * C3411 +
             C31904 + C31904 + C28720 * C3995 + C29391 * C5777 + C31905 +
             C31905 + C28721 * C6429) *
                C93680 * C93590) *
               C93639 * C1980 -
           ((C29432 + C29433 + C29434) * C93680 * C93590 +
            (C29431 + C29430 + C29429) * C93680 * C93815) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
             C14748 + C14748 + C93590 * C121) *
                C93706 * C14739 +
            (C15585 + C15586) * C93706 * C14740 + C15592 * C14741) *
               C2695 -
           ((C19120 + C19121) * C93706 * C14741 +
            (C19122 + C19123) * C93706 * C14740 +
            (C14744 * C1387 + C16406 + C16406 + C93590 * C1403 +
             C14742 * C1388 + C16407 + C16407 + C93815 * C1404) *
                C93706 * C14739) *
               C2696) *
              C1979 +
          (((C19123 + C19122) * C93706 * C14739 +
            (C19121 + C19120) * C93706 * C14740 +
            (C14742 * C19095 + C19110 + C19110 + C93815 * C19099 +
             C14744 * C19096 + C19111 + C19111 + C93590 * C19100) *
                C93706 * C14741) *
               C2696 -
           ((C15589 + C15590) * C93706 * C14741 +
            (C15588 + C15587) * C93706 * C14740 +
            (C15586 + C15585) * C93706 * C14739) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C93706 * C93680 * C2695 -
           (C106 * C1385 + C1410 + C1410 + C92 * C1401 + C104 * C1386 + C1411 +
            C1411 + C91 * C1402 + C102 * C1387 + C1412 + C1412 + C90 * C1403 +
            C100 * C1388 + C1413 + C1413 + C89 * C1404) *
               C93706 * C93680 * C2696) *
              C1979 +
          ((C100 * C3409 + C3422 + C3422 + C89 * C3417 + C102 * C3410 + C3423 +
            C3423 + C90 * C3418 + C104 * C3411 + C3424 + C3424 + C91 * C3419 +
            C106 * C3412 + C3425 + C3425 + C92 * C3420) *
               C93706 * C93680 * C2696 -
           (C106 * C804 + C829 + C829 + C92 * C820 + C104 * C805 + C830 + C830 +
            C91 * C821 + C102 * C806 + C831 + C831 + C90 * C822 + C100 * C807 +
            C832 + C832 + C89 * C823) *
               C93706 * C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
             C14748 + C14748 + C93590 * C121) *
                C28719 +
            (C30223 + C30224) * C28720 + C30229 * C28721) *
               C93680 * C2695 -
           ((C30227 + C30228) * C28721 + (C30226 + C30225) * C28720 +
            (C30224 + C30223) * C28719) *
               C93680 * C2696) *
              C1979 +
          (((C19123 + C19122) * C28719 + (C33029 + C33030) * C28720 +
            (C14742 * C25001 + C33023 + C33023 + C93815 * C25005 +
             C14744 * C33015 + C33024 + C33024 + C93590 * C33017) *
                C28721) *
               C93680 * C2696 -
           ((C33030 + C33029) * C28721 + (C19122 + C19123) * C28720 +
            (C15586 + C15585) * C28719) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C91732 +
            (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
             C14840 * C816 + C14741 * C898) *
                C93815 +
            (C14866 + C14867 + C14868) * C91722 +
            (C14869 + C14870 + C14871) * C93590) *
               C93706 * C2695 -
           ((C18256 + C18257 + C18258) * C93590 +
            (C18259 + C18260 + C18261) * C91722 +
            (C14840 * C8523 + C14741 * C8648 + C14839 * C3413 + C14740 * C3495 +
             C14838 * C1396 + C14739 * C1478) *
                C93815 +
            (C14840 * C8520 + C14741 * C8645 + C14839 * C3409 + C14740 * C3491 +
             C14838 * C1388 + C14739 * C1470) *
                C91732) *
               C93706 * C2696) *
              C1979 +
          (((C14838 * C3409 + C14739 * C3491 + C14839 * C8520 + C14740 * C8645 +
             C14840 * C19095 + C14741 * C19221) *
                C91732 +
            (C14838 * C3413 + C14739 * C3495 + C14839 * C8523 + C14740 * C8648 +
             C14840 * C19097 + C14741 * C19223) *
                C93815 +
            (C14838 * C3410 + C14739 * C3492 + C14839 * C8521 + C14740 * C8646 +
             C14840 * C19096 + C14741 * C19222) *
                C91722 +
            (C14838 * C3414 + C14739 * C3496 + C14839 * C8524 + C14740 * C8649 +
             C14840 * C19098 + C14741 * C19224) *
                C93590) *
               C93706 * C2696 -
           ((C17270 + C17271 + C17272) * C93590 +
            (C17273 + C17274 + C17275) * C91722 +
            (C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
             C14838 * C815 + C14739 * C897) *
                C93815 +
            (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
             C14838 * C807 + C14739 * C889) *
                C91732) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C101 +
            (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C93706 * C2695 -
           (C2785 * C92 + C2786 * C107 + C2787 * C91 + C2788 * C105 +
            C2789 * C90 + C2790 * C103 + (C188 * C1396 + C93680 * C1478) * C89 +
            (C188 * C1388 + C93680 * C1470) * C101) *
               C93706 * C2696) *
              C1979 +
          (((C188 * C3409 + C93680 * C3491) * C101 +
            (C188 * C3413 + C93680 * C3495) * C89 +
            (C188 * C3410 + C93680 * C3492) * C103 +
            (C188 * C3414 + C93680 * C3496) * C90 +
            (C188 * C3411 + C93680 * C3493) * C105 +
            (C188 * C3415 + C93680 * C3497) * C91 +
            (C188 * C3412 + C93680 * C3494) * C107 +
            (C188 * C3416 + C93680 * C3498) * C92) *
               C93706 * C2696 -
           (C2071 * C92 + C2072 * C107 + C2073 * C91 + C2074 * C105 +
            C2075 * C90 + C2076 * C103 + (C188 * C815 + C93680 * C897) * C89 +
            (C188 * C807 + C93680 * C889) * C101) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C91732 +
             (C188 * C114 + C93680 * C195) * C93815 + C218 * C91722 +
             C219 * C93590) *
                C28719 +
            (C30308 + C30309 + C30310 + C30311) * C28720 + C30334 * C28721) *
               C2695 -
           ((C30330 + C30331 + C30332 + C30333) * C28721 +
            (C30315 + C30314 + C30313 + C30312) * C28720 +
            (C30311 + C30310 + C30309 + C30308) * C28719) *
               C2696) *
              C1979 +
          (((C33131 + C33132 + C33133 + C33134) * C28719 +
            (C33143 + C33144 + C33139 + C33140) * C28720 +
            ((C188 * C25001 + C93680 * C25104) * C91732 +
             (C188 * C25003 + C93680 * C25106) * C93815 +
             (C188 * C33015 + C93680 * C33128) * C91722 +
             (C188 * C33016 + C93680 * C33129) * C93590) *
                C28721) *
               C2696 -
           ((C33140 + C33139 + C33144 + C33143) * C28721 +
            (C33134 + C33133 + C33132 + C33131) * C28720 +
            (C2075 * C93590 + C2076 * C91722 +
             (C188 * C815 + C93680 * C897) * C93815 +
             (C188 * C807 + C93680 * C889) * C91732) *
                C28719) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C91732 +
             (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
             C306 * C93590) *
                C14739 +
            (C15749 + C15750 + C15751 + C15752) * C14740 + C15775 * C14741) *
               C2695 -
           ((C19328 + C19329 + C19340 + C19341) * C14741 +
            (C19334 + C19335 + C19336 + C19337) * C14740 +
            (C2875 * C93590 + C2876 * C91722 +
             (C275 * C1396 + C93706 * C1544) * C93815 +
             (C275 * C1388 + C93706 * C1536) * C91732) *
                C14739) *
               C2696) *
              C1979 +
          (((C19337 + C19336 + C19335 + C19334) * C14739 +
            (C19341 + C19340 + C19329 + C19328) * C14740 +
            ((C275 * C19095 + C93706 * C19323) * C91732 +
             (C275 * C19097 + C93706 * C19325) * C93815 +
             (C275 * C19096 + C93706 * C19324) * C91722 +
             (C275 * C19098 + C93706 * C19326) * C93590) *
                C14741) *
               C2696 -
           ((C15771 + C15772 + C15773 + C15774) * C14741 +
            (C15756 + C15755 + C15754 + C15753) * C14740 +
            (C15752 + C15751 + C15750 + C15749) * C14739) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C101 +
            (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C93680 * C2695 -
           (C2871 * C92 + C2872 * C107 + C2873 * C91 + C2874 * C105 +
            C2875 * C90 + C2876 * C103 + (C275 * C1396 + C93706 * C1544) * C89 +
            (C275 * C1388 + C93706 * C1536) * C101) *
               C93680 * C2696) *
              C1979 +
          (((C275 * C3409 + C93706 * C3565) * C101 +
            (C275 * C3413 + C93706 * C3569) * C89 +
            (C275 * C3410 + C93706 * C3566) * C103 +
            (C275 * C3414 + C93706 * C3570) * C90 +
            (C275 * C3411 + C93706 * C3567) * C105 +
            (C275 * C3415 + C93706 * C3571) * C91 +
            (C275 * C3412 + C93706 * C3568) * C107 +
            (C275 * C3416 + C93706 * C3572) * C92) *
               C93680 * C2696 -
           (C2157 * C92 + C2158 * C107 + C2159 * C91 + C2160 * C105 +
            C2161 * C90 + C2162 * C103 + (C275 * C815 + C93706 * C963) * C89 +
            (C275 * C807 + C93706 * C955) * C101) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C91732 +
            (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
             C28878 * C1397 + C28721 * C1545) *
                C93815 +
            (C28904 + C28905 + C28906) * C91722 +
            (C28907 + C28908 + C28909) * C93590) *
               C93680 * C2695 -
           ((C32251 + C32252 + C32253) * C93590 +
            (C32254 + C32255 + C32256) * C91722 +
            (C28878 * C10967 + C28721 * C11199 + C28877 * C1397 +
             C28720 * C1545 + C28876 * C1396 + C28719 * C1544) *
                C93815 +
            (C28878 * C10964 + C28721 * C11196 + C28877 * C1389 +
             C28720 * C1537 + C28876 * C1388 + C28719 * C1536) *
                C91732) *
               C93680 * C2696) *
              C1979 +
          (((C28876 * C3409 + C28719 * C3565 + C28877 * C5775 + C28720 * C5950 +
             C28878 * C25001 + C28721 * C25218) *
                C91732 +
            (C28876 * C3413 + C28719 * C3569 + C28877 * C5778 + C28720 * C5953 +
             C28878 * C25003 + C28721 * C25220) *
                C93815 +
            (C28876 * C3410 + C28719 * C3566 + C28877 * C5776 + C28720 * C5951 +
             C28878 * C33015 + C28721 * C33242) *
                C91722 +
            (C28876 * C3414 + C28719 * C3570 + C28877 * C5779 + C28720 * C5954 +
             C28878 * C33016 + C28721 * C33243) *
                C93590) *
               C93680 * C2696 -
           ((C31280 + C31281 + C31282) * C93590 +
            (C31283 + C31284 + C31285) * C91722 +
            (C28878 * C5778 + C28721 * C5953 + C28877 * C3413 + C28720 * C3569 +
             C28876 * C815 + C28719 * C963) *
                C93815 +
            (C28878 * C5775 + C28721 * C5950 + C28877 * C3409 + C28720 * C3565 +
             C28876 * C807 + C28719 * C955) *
                C91732) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C14838 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C14739 +
            (C15876 + C15877) * C14839 + (C15878 + C15879) * C14740 +
            C15888 * C14840 + C15889 * C14741) *
               C93706 * C2695 -
           ((C19458 + C19459) * C14741 + (C19460 + C19461) * C14840 +
            (C19462 + C19463) * C14740 + (C19464 + C19465) * C14839 +
            (C91722 * C1469 + C93590 * C1601 + C91732 * C1470 +
             C93815 * C1602) *
                C14739 +
            (C91722 * C1387 + C93590 * C1395 + C91732 * C1388 +
             C93815 * C1396) *
                C14838) *
               C93706 * C2696) *
              C1979 +
          (((C19465 + C19464) * C14838 + (C19463 + C19462) * C14739 +
            (C19461 + C19460) * C14839 + (C19459 + C19458) * C14740 +
            (C91732 * C19095 + C93815 * C19097 + C91722 * C19096 +
             C93590 * C19098) *
                C14840 +
            (C91732 * C19221 + C93815 * C19439 + C91722 * C19222 +
             C93590 * C19440) *
                C14741) *
               C93706 * C2696 -
           ((C15884 + C15885) * C14741 + (C15886 + C15887) * C14840 +
            (C15883 + C15882) * C14740 + (C15881 + C15880) * C14839 +
            (C15879 + C15878) * C14739 + (C15877 + C15876) * C14838) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C93680) *
               C93706 * C2695 -
           ((C107 * C1467 + C92 * C1599 + C105 * C1468 + C91 * C1600 +
             C103 * C1469 + C90 * C1601 + C101 * C1470 + C89 * C1602) *
                C93680 +
            (C107 * C1385 + C92 * C1393 + C105 * C1386 + C91 * C1394 +
             C103 * C1387 + C90 * C1395 + C101 * C1388 + C89 * C1396) *
                C188) *
               C93706 * C2696) *
              C1979 +
          (((C101 * C3409 + C89 * C3413 + C103 * C3410 + C90 * C3414 +
             C105 * C3411 + C91 * C3415 + C107 * C3412 + C92 * C3416) *
                C188 +
            (C101 * C3491 + C89 * C3639 + C103 * C3492 + C90 * C3640 +
             C105 * C3493 + C91 * C3641 + C107 * C3494 + C92 * C3642) *
                C93680) *
               C93706 * C2696 -
           ((C107 * C886 + C92 * C1018 + C105 * C887 + C91 * C1019 +
             C103 * C888 + C90 * C1020 + C101 * C889 + C89 * C1021) *
                C93680 +
            (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
             C90 * C814 + C101 * C807 + C89 * C815) *
                C188) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C188 +
             (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                 C93680) *
                C28719 +
            ((C30513 + C30514) * C188 + (C30515 + C30516) * C93680) * C28720 +
            C30529 * C28721) *
               C2695 -
           (((C30521 + C30522) * C93680 + (C30523 + C30524) * C188) * C28721 +
            ((C30520 + C30519) * C93680 + (C30518 + C30517) * C188) * C28720 +
            ((C30516 + C30515) * C93680 + (C30514 + C30513) * C188) * C28719) *
               C2696) *
              C1979 +
          ((((C19465 + C19464) * C188 + (C19463 + C19462) * C93680) * C28719 +
            ((C33352 + C33353) * C188 + (C33354 + C33355) * C93680) * C28720 +
            ((C91732 * C25001 + C93815 * C25003 + C91722 * C33015 +
              C93590 * C33016) *
                 C188 +
             (C91732 * C25104 + C93815 * C25296 + C91722 * C33128 +
              C93590 * C33342) *
                 C93680) *
                C28721) *
               C2696 -
           (((C33355 + C33354) * C93680 + (C33353 + C33352) * C188) * C28721 +
            ((C19462 + C19463) * C93680 + (C19464 + C19465) * C188) * C28720 +
            ((C15879 + C15878) * C93680 + (C15877 + C15876) * C188) * C28719) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
             C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 +
             C15105 + C14741 * C1080) *
                C93815 +
            (C15139 + C15140 + C15141) * C93590) *
               C93706 * C2695 -
           ((C18577 + C18578 + C18579) * C93590 +
            (C15101 * C8520 + C16725 + C16725 + C14741 * C8984 +
             C15100 * C3409 + C16726 + C16726 + C14740 * C3709 +
             C15099 * C1388 + C16727 + C16727 + C14739 * C1660) *
                C93815) *
               C93706 * C2696) *
              C1979 +
          (((C15099 * C3409 + C19566 + C19566 + C14739 * C3709 +
             C15100 * C8520 + C19567 + C19567 + C14740 * C8984 +
             C15101 * C19095 + C19568 + C19568 + C14741 * C19563) *
                C93815 +
            (C15099 * C3410 + C19569 + C19569 + C14739 * C3710 +
             C15100 * C8521 + C19570 + C19570 + C14740 * C8985 +
             C15101 * C19096 + C19571 + C19571 + C14741 * C19564) *
                C93590) *
               C93706 * C2696 -
           ((C17617 + C17618 + C17619) * C93590 +
            (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 + C15100 * C808 +
             C15970 + C15970 + C14740 * C1080 + C15099 * C807 + C15971 +
             C15971 + C14739 * C1079) *
                C93815) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C93706 * C2695 -
           (C3024 * C92 + C3025 * C91 + C3026 * C90 +
            (C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C89) *
               C93706 * C2696) *
              C1979 +
          (((C418 * C3409 + C3714 + C3714 + C93680 * C3709) * C89 +
            (C418 * C3410 + C3715 + C3715 + C93680 * C3710) * C90 +
            (C418 * C3411 + C3716 + C3716 + C93680 * C3711) * C91 +
            (C418 * C3412 + C3717 + C3717 + C93680 * C3712) * C92) *
               C93706 * C2696 -
           (C2310 * C92 + C2311 * C91 + C2312 * C90 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C89) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C93815 +
             C448 * C93590) *
                C28719 +
            (C30606 + C30607) * C28720 + C30616 * C28721) *
               C2695 -
           ((C30623 + C30624) * C28721 + (C30609 + C30608) * C28720 +
            (C30607 + C30606) * C28719) *
               C2696) *
              C1979 +
          (((C33455 + C33456) * C28719 + (C33465 + C33459) * C28720 +
            ((C418 * C25001 + C33460 + C33460 + C93680 * C25408) * C93815 +
             (C418 * C33015 + C33461 + C33461 + C93680 * C33453) * C93590) *
                C28721) *
               C2696 -
           ((C33459 + C33465) * C28721 + (C33456 + C33455) * C28720 +
            (C2312 * C93590 +
             (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C93815) *
                C28719) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C14838 +
             (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
             C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
                C93815 +
            (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
               C2695 -
           ((C18686 + C18680 + C18681 + C18682 + C18683 + C18684) * C93590 +
            (C19674 * C14741 + C19339 * C14840 + C9097 * C14740 +
             C8765 * C14839 + (C275 * C1470 + C93706 * C1726) * C14739 +
             (C275 * C1388 + C93706 * C1536) * C14838) *
                C93815) *
               C2696) *
              C1979 +
          (((C8765 * C14838 + C9097 * C14739 + C19339 * C14839 +
             C19674 * C14740 + (C275 * C19095 + C93706 * C19323) * C14840 +
             (C275 * C19221 + C93706 * C19669) * C14741) *
                C93815 +
            (C7772 * C14838 + C8100 * C14739 + C18365 * C14839 +
             C18685 * C14740 + (C275 * C19096 + C93706 * C19324) * C14840 +
             (C275 * C19222 + C93706 * C19670) * C14741) *
                C93590) *
               C2696 -
           ((C17718 + C17719 + C17720 + C17721 + C17722 + C17723) * C93590 +
            (C16059 * C14741 + C15769 * C14840 + C5429 * C14740 +
             C5130 * C14839 + C5426 * C14739 + C5123 * C14838) *
                C93815) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C188 +
             (C275 * C189 + C93706 * C501) * C93680) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C2695 -
           ((C3106 + C3096) * C92 + (C3107 + C3099) * C91 +
            (C3108 + C3102) * C90 +
            ((C275 * C1470 + C93706 * C1726) * C93680 +
             (C275 * C1388 + C93706 * C1536) * C188) *
                C89) *
               C2696) *
              C1979 +
          ((((C275 * C3409 + C93706 * C3565) * C188 +
             (C275 * C3491 + C93706 * C3783) * C93680) *
                C89 +
            ((C275 * C3410 + C93706 * C3566) * C188 +
             (C275 * C3492 + C93706 * C3784) * C93680) *
                C90 +
            ((C275 * C3411 + C93706 * C3567) * C188 +
             (C275 * C3493 + C93706 * C3785) * C93680) *
                C91 +
            ((C275 * C3412 + C93706 * C3568) * C188 +
             (C275 * C3494 + C93706 * C3786) * C93680) *
                C92) *
               C2696 -
           ((C2392 + C2382) * C92 + (C2393 + C2385) * C91 +
            (C2394 + C2388) * C90 +
            ((C275 * C889 + C93706 * C1145) * C93680 +
             (C275 * C807 + C93706 * C955) * C188) *
                C89) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
              C28878 * C1389 + C28721 * C1537) *
                 C188 +
             (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
              C28878 * C1471 + C28721 * C1727) *
                 C93680) *
                C93815 +
            ((C28904 + C28905 + C28906) * C188 +
             (C29150 + C29151 + C29152) * C93680) *
                C93590) *
               C2695 -
           (((C32585 + C32586 + C32587) * C93680 +
             (C32254 + C32255 + C32256) * C188) *
                C93590 +
            ((C28878 * C11080 + C28721 * C11495 + C28877 * C1471 +
              C28720 * C1727 + C28876 * C1470 + C28719 * C1726) *
                 C93680 +
             (C28878 * C10964 + C28721 * C11196 + C28877 * C1389 +
              C28720 * C1537 + C28876 * C1388 + C28719 * C1536) *
                 C188) *
                C93815) *
               C2696) *
              C1979 +
          ((((C28876 * C3409 + C28719 * C3565 + C28877 * C5775 +
              C28720 * C5950 + C28878 * C25001 + C28721 * C25218) *
                 C188 +
             (C28876 * C3491 + C28719 * C3783 + C28877 * C5870 +
              C28720 * C6196 + C28878 * C25104 + C28721 * C25517) *
                 C93680) *
                C93815 +
            ((C28876 * C3410 + C28719 * C3566 + C28877 * C5776 +
              C28720 * C5951 + C28878 * C33015 + C28721 * C33242) *
                 C188 +
             (C28876 * C3492 + C28719 * C3784 + C28877 * C5871 +
              C28720 * C6197 + C28878 * C33128 + C28721 * C33563) *
                 C93680) *
                C93590) *
               C2696 -
           (((C31591 + C31592 + C31593) * C93680 +
             (C31283 + C31284 + C31285) * C188) *
                C93590 +
            ((C28878 * C5870 + C28721 * C6196 + C28877 * C3491 +
              C28720 * C3783 + C28876 * C889 + C28719 * C1145) *
                 C93680 +
             (C28878 * C5775 + C28721 * C5950 + C28877 * C3409 +
              C28720 * C3565 + C28876 * C807 + C28719 * C955) *
                 C188) *
                C93815) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C275 +
             (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                 C93706) *
                C14739 +
            ((C15876 + C15877) * C275 + (C16149 + C16150) * C93706) * C14740 +
            C16157 * C14741) *
               C2695 -
           (((C19783 + C19784) * C93706 + (C19460 + C19461) * C275) * C14741 +
            ((C19785 + C19786) * C93706 + (C19464 + C19465) * C275) * C14740 +
            ((C91722 * C1535 + C93590 * C1783 + C91732 * C1536 +
              C93815 * C1784) *
                 C93706 +
             (C91722 * C1387 + C93590 * C1395 + C91732 * C1388 +
              C93815 * C1396) *
                 C275) *
                C14739) *
               C2696) *
              C1979 +
          ((((C19465 + C19464) * C275 + (C19786 + C19785) * C93706) * C14739 +
            ((C19461 + C19460) * C275 + (C19784 + C19783) * C93706) * C14740 +
            ((C91732 * C19095 + C93815 * C19097 + C91722 * C19096 +
              C93590 * C19098) *
                 C275 +
             (C91732 * C19323 + C93815 * C19772 + C91722 * C19324 +
              C93590 * C19773) *
                 C93706) *
                C14741) *
               C2696 -
           (((C16153 + C16154) * C93706 + (C15886 + C15887) * C275) * C14741 +
            ((C16152 + C16151) * C93706 + (C15881 + C15880) * C275) * C14740 +
            ((C16150 + C16149) * C93706 + (C15877 + C15876) * C275) * C14739) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C93706) *
               C93680 * C2695 -
           ((C107 * C1533 + C92 * C1781 + C105 * C1534 + C91 * C1782 +
             C103 * C1535 + C90 * C1783 + C101 * C1536 + C89 * C1784) *
                C93706 +
            (C107 * C1385 + C92 * C1393 + C105 * C1386 + C91 * C1394 +
             C103 * C1387 + C90 * C1395 + C101 * C1388 + C89 * C1396) *
                C275) *
               C93680 * C2696) *
              C1979 +
          (((C101 * C3409 + C89 * C3413 + C103 * C3410 + C90 * C3414 +
             C105 * C3411 + C91 * C3415 + C107 * C3412 + C92 * C3416) *
                C275 +
            (C101 * C3565 + C89 * C3853 + C103 * C3566 + C90 * C3854 +
             C105 * C3567 + C91 * C3855 + C107 * C3568 + C92 * C3856) *
                C93706) *
               C93680 * C2696 -
           ((C107 * C952 + C92 * C1200 + C105 * C953 + C91 * C1201 +
             C103 * C954 + C90 * C1202 + C101 * C955 + C89 * C1203) *
                C93706 +
            (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
             C90 * C814 + C101 * C807 + C89 * C815) *
                C275) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C28876 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C28719 +
            (C30513 + C30514) * C28877 + (C30789 + C30790) * C28720 +
            C30525 * C28878 + C30795 * C28721) *
               C93680 * C2695 -
           ((C30793 + C30794) * C28721 + (C30523 + C30524) * C28878 +
            (C30792 + C30791) * C28720 + (C30518 + C30517) * C28877 +
            (C30790 + C30789) * C28719 + (C30514 + C30513) * C28876) *
               C93680 * C2696) *
              C1979 +
          (((C19465 + C19464) * C28876 + (C19786 + C19785) * C28719 +
            (C33352 + C33353) * C28877 + (C33668 + C33669) * C28720 +
            (C91732 * C25001 + C93815 * C25003 + C91722 * C33015 +
             C93590 * C33016) *
                C28878 +
            (C91732 * C25218 + C93815 * C25593 + C91722 * C33242 +
             C93590 * C33662) *
                C28721) *
               C93680 * C2696 -
           ((C33669 + C33668) * C28721 + (C33353 + C33352) * C28878 +
            (C19785 + C19786) * C28720 + (C19464 + C19465) * C28877 +
            (C16150 + C16149) * C28719 + (C15877 + C15876) * C28876) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
              C14840 * C808 + C14741 * C890) *
                 C275 +
             (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
              C14840 * C956 + C14741 * C1262) *
                 C93706) *
                C93815 +
            ((C14866 + C14867 + C14868) * C275 +
             (C15391 + C15392 + C15393) * C93706) *
                C93590) *
               C2695 -
           (((C18889 + C18890 + C18891) * C93706 +
             (C18259 + C18260 + C18261) * C275) *
                C93590 +
            ((C14840 * C8749 + C14741 * C9305 + C14839 * C3565 +
              C14740 * C3923 + C14838 * C1536 + C14739 * C1842) *
                 C93706 +
             (C14840 * C8520 + C14741 * C8645 + C14839 * C3409 +
              C14740 * C3491 + C14838 * C1388 + C14739 * C1470) *
                 C275) *
                C93815) *
               C2696) *
              C1979 +
          ((((C14838 * C3409 + C14739 * C3491 + C14839 * C8520 +
              C14740 * C8645 + C14840 * C19095 + C14741 * C19221) *
                 C275 +
             (C14838 * C3565 + C14739 * C3923 + C14839 * C8749 +
              C14740 * C9305 + C14840 * C19323 + C14741 * C19884) *
                 C93706) *
                C93815 +
            ((C14838 * C3410 + C14739 * C3492 + C14839 * C8521 +
              C14740 * C8646 + C14840 * C19096 + C14741 * C19222) *
                 C275 +
             (C14838 * C3566 + C14739 * C3924 + C14839 * C8750 +
              C14740 * C9306 + C14840 * C19324 + C14741 * C19885) *
                 C93706) *
                C93590) *
               C2696 -
           (((C17938 + C17939 + C17940) * C93706 +
             (C17273 + C17274 + C17275) * C275) *
                C93590 +
            ((C14840 * C5096 + C14741 * C5598 + C14839 * C956 + C14740 * C1262 +
              C14838 * C955 + C14739 * C1261) *
                 C93706 +
             (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
              C14838 * C807 + C14739 * C889) *
                 C275) *
                C93815) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C275 +
             (C188 * C276 + C93680 * C635) * C93706) *
                C89 +
            (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
               C2695 -
           ((C3255 + C3245) * C92 + (C3256 + C3248) * C91 +
            (C3257 + C3251) * C90 +
            ((C188 * C1536 + C93680 * C1842) * C93706 +
             (C188 * C1388 + C93680 * C1470) * C275) *
                C89) *
               C2696) *
              C1979 +
          ((((C188 * C3409 + C93680 * C3491) * C275 +
             (C188 * C3565 + C93680 * C3923) * C93706) *
                C89 +
            ((C188 * C3410 + C93680 * C3492) * C275 +
             (C188 * C3566 + C93680 * C3924) * C93706) *
                C90 +
            ((C188 * C3411 + C93680 * C3493) * C275 +
             (C188 * C3567 + C93680 * C3925) * C93706) *
                C91 +
            ((C188 * C3412 + C93680 * C3494) * C275 +
             (C188 * C3568 + C93680 * C3926) * C93706) *
                C92) *
               C2696 -
           ((C2541 + C2531) * C92 + (C2542 + C2534) * C91 +
            (C2543 + C2537) * C90 +
            ((C188 * C955 + C93680 * C1261) * C93706 +
             (C188 * C807 + C93680 * C889) * C275) *
                C89) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C28876 +
             (C188 * C276 + C93680 * C635) * C28719 + C11107 * C28877 +
             C11679 * C28720 + C11114 * C28878 + C11682 * C28721) *
                C93815 +
            (C29304 + C29305 + C29306 + C29307 + C29308 + C29309) * C93590) *
               C2695 -
           ((C32796 + C32797 + C32798 + C32799 + C32800 + C32801) * C93590 +
            (C30877 * C28721 + C30328 * C28878 + C11682 * C28720 +
             C11114 * C28877 + C11679 * C28719 + C11107 * C28876) *
                C93815) *
               C2696) *
              C1979 +
          (((C13954 * C28876 + C14559 * C28719 + C33141 * C28877 +
             C33771 * C28720 + (C188 * C25001 + C93680 * C25104) * C28878 +
             (C188 * C25218 + C93680 * C25681) * C28721) *
                C93815 +
            (C11979 * C28876 + C12625 * C28719 + C31169 * C28877 +
             C31797 * C28720 + (C188 * C33015 + C93680 * C33128) * C28878 +
             (C188 * C33242 + C93680 * C33767) * C28721) *
                C93590) *
               C2696 -
           ((C31798 + C31792 + C31793 + C31794 + C31795 + C31796) * C93590 +
            (C33771 * C28721 + C33141 * C28878 + C14559 * C28720 +
             C13954 * C28877 + (C188 * C955 + C93680 * C1261) * C28719 +
             (C188 * C807 + C93680 * C889) * C28876) *
                C93815) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
             C5698 * C14740 + C5701 * C14741) *
                C93815 +
            (C15471 + C15472 + C15473) * C93590) *
               C2695 -
           ((C18997 + C18992 + C18993) * C93590 +
            (C19993 * C14741 + C9417 * C14740 +
             (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C14739) *
                C93815) *
               C2696) *
              C1979 +
          (((C9417 * C14739 + C19993 * C14740 +
             (C713 * C19095 + C19989 + C19989 + C93706 * C19984) * C14741) *
                C93815 +
            (C8420 * C14739 + C18996 * C14740 +
             (C713 * C19096 + C19990 + C19990 + C93706 * C19985) * C14741) *
                C93590) *
               C2696 -
           ((C18039 + C18040 + C18041) * C93590 +
            (C16321 * C14741 + C5701 * C14740 + C5698 * C14739) * C93815) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C2695 -
           (C3341 * C92 + C3342 * C91 + C3343 * C90 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93680 * C89) *
               C2696) *
              C1979 +
          (((C713 * C3409 + C3998 + C3998 + C93706 * C3993) * C93680 * C89 +
            (C713 * C3410 + C3999 + C3999 + C93706 * C3994) * C93680 * C90 +
            (C713 * C3411 + C4000 + C4000 + C93706 * C3995) * C93680 * C91 +
            (C713 * C3412 + C4001 + C4001 + C93706 * C3996) * C93680 * C92) *
               C2696 -
           (C2627 * C92 + C2628 * C91 + C2629 * C90 +
            (C713 * C807 + C1328 + C1328 + C93706 * C1319) * C93680 * C89) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
             C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
             C29395 + C28721 * C1901) *
                C93680 * C93815 +
            (C29429 + C29430 + C29431) * C93680 * C93590) *
               C2695 -
           ((C32915 + C32916 + C32917) * C93680 * C93590 +
            (C29391 * C10964 + C30957 + C30957 + C28721 * C11756 +
             C29390 * C1389 + C30958 + C30958 + C28720 * C1901 +
             C29389 * C1388 + C30959 + C30959 + C28719 * C1900) *
                C93680 * C93815) *
               C2696) *
              C1979 +
          (((C29389 * C3409 + C33871 + C33871 + C28719 * C3993 +
             C29390 * C5775 + C33872 + C33872 + C28720 * C6427 +
             C29391 * C25001 + C33873 + C33873 + C28721 * C25775) *
                C93680 * C93815 +
            (C29389 * C3410 + C33874 + C33874 + C28719 * C3994 +
             C29390 * C5776 + C33875 + C33875 + C28720 * C6428 +
             C29391 * C33015 + C33876 + C33876 + C28721 * C33869) *
                C93680 * C93590) *
               C2696 -
           ((C31912 + C31913 + C31914) * C93680 * C93590 +
            (C29391 * C5775 + C30106 + C30106 + C28721 * C6427 +
             C29390 * C3409 + C30107 + C30107 + C28720 * C3993 + C29389 * C807 +
             C30108 + C30108 + C28719 * C1319) *
                C93680 * C93815) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 +
               C128 + C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 +
               C106 * C111 + C130 + C130 + C92 * C123) *
                  C93706 * C93680 * C93639 * C93625 * C97 -
              (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 + C132 +
               C132 + C91 * C123 + C102 * C110 + C133 + C133 + C90 * C122 +
               C100 * C109 + C134 + C134 + C89 * C121) *
                  C93706 * C93680 * C93639 * C93625 * C98 +
              (C100 * C110 + C135 + C135 + C89 * C122 + C102 * C111 + C136 +
               C136 + C90 * C123 + C104 * C112 + C137 + C137 + C91 * C124 +
               C106 * C113 + C138 + C138 + C92 * C125) *
                  C93706 * C93680 * C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 +
               C128 + C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 +
               C106 * C111 + C130 + C130 + C92 * C123) *
                  C93706 * C93680 * C93639 * C800 -
              (C106 * C804 + C829 + C829 + C92 * C820 + C104 * C805 + C830 +
               C830 + C91 * C821 + C102 * C806 + C831 + C831 + C90 * C822 +
               C100 * C807 + C832 + C832 + C89 * C823) *
                  C93706 * C93680 * C93639 * C801 +
              (C100 * C808 + C833 + C833 + C89 * C824 + C102 * C809 + C834 +
               C834 + C90 * C825 + C104 * C810 + C835 + C835 + C91 * C826 +
               C106 * C811 + C836 + C836 + C92 * C827) *
                  C93706 * C93680 * C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
           C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
           C130 + C130 + C92 * C123) *
              C93706 * C93680 * C1382 -
          (C106 * C1385 + C1410 + C1410 + C92 * C1401 + C104 * C1386 + C1411 +
           C1411 + C91 * C1402 + C102 * C1387 + C1412 + C1412 + C90 * C1403 +
           C100 * C1388 + C1413 + C1413 + C89 * C1404) *
              C93706 * C93680 * C1383 +
          (C100 * C1389 + C1414 + C1414 + C89 * C1405 + C102 * C1390 + C1415 +
           C1415 + C90 * C1406 + C104 * C1391 + C1416 + C1416 + C91 * C1407 +
           C106 * C1392 + C1417 + C1417 + C92 * C1408) *
              C93706 * C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
            C14748 + C14748 + C93590 * C121) *
               C93706 * C14739 +
           (C14742 * C807 + C14749 + C14749 + C93815 * C823 + C14744 * C806 +
            C14750 + C14750 + C93590 * C822) *
               C93706 * C14740 +
           (C14742 * C808 + C14751 + C14751 + C93815 * C824 + C14744 * C809 +
            C14752 + C14752 + C93590 * C825) *
               C93706 * C14741) *
              C93639 * C93625 * C97 -
          ((C14744 * C810 + C14753 + C14753 + C93590 * C826 + C14742 * C809 +
            C14754 + C14754 + C93815 * C825) *
               C93706 * C14741 +
           (C14744 * C805 + C14755 + C14755 + C93590 * C821 + C14742 * C806 +
            C14756 + C14756 + C93815 * C822) *
               C93706 * C14740 +
           (C14744 * C110 + C14757 + C14757 + C93590 * C122 + C14742 * C109 +
            C14758 + C14758 + C93815 * C121) *
               C93706 * C14739) *
              C93639 * C93625 * C98 +
          ((C14742 * C110 + C14759 + C14759 + C93815 * C122 + C14744 * C111 +
            C14760 + C14760 + C93590 * C123) *
               C93706 * C14739 +
           (C14742 * C805 + C14761 + C14761 + C93815 * C821 + C14744 * C804 +
            C14762 + C14762 + C93590 * C820) *
               C93706 * C14740 +
           (C14742 * C810 + C14763 + C14763 + C93815 * C826 + C14744 * C811 +
            C14764 + C14764 + C93590 * C827) *
               C93706 * C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
            C14748 + C14748 + C93590 * C121) *
               C93706 * C14739 +
           (C15585 + C15586) * C93706 * C14740 + C15592 * C14741) *
              C93639 * C800 -
          ((C15589 + C15590) * C93706 * C14741 +
           (C15588 + C15587) * C93706 * C14740 +
           (C15586 + C15585) * C93706 * C14739) *
              C93639 * C801 +
          (C15592 * C14739 + (C15590 + C15589) * C93706 * C14740 +
           (C14742 * C15550 + C15571 + C15571 + C93815 * C15554 +
            C14744 * C15551 + C15572 + C15572 + C93590 * C15555) *
               C93706 * C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
            C14748 + C14748 + C93590 * C121) *
               C93706 * C14739 +
           (C15585 + C15586) * C93706 * C14740 + C15592 * C14741) *
              C1382 -
          ((C14744 * C8521 + C16402 + C16402 + C93590 * C8527 + C14742 * C8520 +
            C16403 + C16403 + C93815 * C8526) *
               C93706 * C14741 +
           (C14744 * C3410 + C16404 + C16404 + C93590 * C3418 + C14742 * C3409 +
            C16405 + C16405 + C93815 * C3417) *
               C93706 * C14740 +
           (C14744 * C1387 + C16406 + C16406 + C93590 * C1403 + C14742 * C1388 +
            C16407 + C16407 + C93815 * C1404) *
               C93706 * C14739) *
              C1383 +
          ((C14742 * C1389 + C16408 + C16408 + C93815 * C1405 + C14744 * C1390 +
            C16409 + C16409 + C93590 * C1406) *
               C93706 * C14739 +
           (C14742 * C5775 + C16410 + C16410 + C93815 * C5781 + C14744 * C5776 +
            C16411 + C16411 + C93590 * C5782) *
               C93706 * C14740 +
           (C14742 * C16395 + C16412 + C16412 + C93815 * C16399 +
            C14744 * C16396 + C16413 + C16413 + C93590 * C16400) *
               C93706 * C14741) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
            C14748 + C14748 + C93590 * C121) *
               C28719 +
           (C14742 * C1388 + C16407 + C16407 + C93815 * C1404 + C14744 * C1387 +
            C16406 + C16406 + C93590 * C1403) *
               C28720 +
           (C14742 * C1389 + C16408 + C16408 + C93815 * C1405 + C14744 * C1390 +
            C16409 + C16409 + C93590 * C1406) *
               C28721) *
              C93680 * C93639 * C93625 * C97 -
          ((C14744 * C1391 + C28723 + C28723 + C93590 * C1407 + C14742 * C1390 +
            C28724 + C28724 + C93815 * C1406) *
               C28721 +
           (C14744 * C1386 + C18141 + C18141 + C93590 * C1402 + C14742 * C1387 +
            C18140 + C18140 + C93815 * C1403) *
               C28720 +
           (C14744 * C110 + C14757 + C14757 + C93590 * C122 + C14742 * C109 +
            C14758 + C14758 + C93815 * C121) *
               C28719) *
              C93680 * C93639 * C93625 * C98 +
          ((C14742 * C110 + C14759 + C14759 + C93815 * C122 + C14744 * C111 +
            C14760 + C14760 + C93590 * C123) *
               C28719 +
           (C14742 * C1386 + C28725 + C28725 + C93815 * C1402 + C14744 * C1385 +
            C28726 + C28726 + C93590 * C1401) *
               C28720 +
           (C14742 * C1391 + C28727 + C28727 + C93815 * C1407 + C14744 * C1392 +
            C28728 + C28728 + C93590 * C1408) *
               C28721) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
            C14748 + C14748 + C93590 * C121) *
               C28719 +
           (C14742 * C1388 + C16407 + C16407 + C93815 * C1404 + C14744 * C1387 +
            C16406 + C16406 + C93590 * C1403) *
               C28720 +
           (C14742 * C1389 + C16408 + C16408 + C93815 * C1405 + C14744 * C1390 +
            C16409 + C16409 + C93590 * C1406) *
               C28721) *
              C93680 * C93639 * C800 -
          ((C14744 * C5776 + C16411 + C16411 + C93590 * C5782 + C14742 * C5775 +
            C16410 + C16410 + C93815 * C5781) *
               C28721 +
           (C19122 + C19123) * C28720 + (C15586 + C15585) * C28719) *
              C93680 * C93639 * C801 +
          (C15591 * C28719 + (C19121 + C19120) * C28720 +
           (C14742 * C16395 + C16412 + C16412 + C93815 * C16399 +
            C14744 * C16396 + C16413 + C16413 + C93590 * C16400) *
               C28721) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
            C14748 + C14748 + C93590 * C121) *
               C28719 +
           (C30223 + C30224) * C28720 + C30229 * C28721) *
              C93680 * C1382 -
          ((C30227 + C30228) * C28721 + (C30226 + C30225) * C28720 +
           (C30224 + C30223) * C28719) *
              C93680 * C1383 +
          (C30229 * C28719 + (C30228 + C30227) * C28720 +
           (C14742 * C30188 + C30209 + C30209 + C93815 * C30192 +
            C14744 * C30189 + C30210 + C30210 + C93590 * C30193) *
               C28721) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C188 * C108 + C93680 * C189) * C101 +
               (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
               C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
                  C93706 * C93639 * C93625 * C97 -
              (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 +
               C221 * C90 + C220 * C103 + C219 * C89 + C218 * C101) *
                  C93706 * C93639 * C93625 * C98 +
              (C220 * C101 + C221 * C89 + C222 * C103 + C223 * C90 +
               C225 * C105 + C224 * C91 + (C188 * C113 + C93680 * C194) * C107 +
               (C188 * C119 + C93680 * C200) * C92) *
                  C93706 * C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C188 * C108 + C93680 * C189) * C101 +
               (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
               C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
                  C93706 * C93639 * C800 -
              ((C188 * C812 + C93680 * C894) * C92 +
               (C188 * C804 + C93680 * C886) * C107 +
               (C188 * C813 + C93680 * C895) * C91 +
               (C188 * C805 + C93680 * C887) * C105 +
               (C188 * C814 + C93680 * C896) * C90 +
               (C188 * C806 + C93680 * C888) * C103 +
               (C188 * C815 + C93680 * C897) * C89 +
               (C188 * C807 + C93680 * C889) * C101) *
                  C93706 * C93639 * C801 +
              ((C188 * C808 + C93680 * C890) * C101 +
               (C188 * C816 + C93680 * C898) * C89 +
               (C188 * C809 + C93680 * C891) * C103 +
               (C188 * C817 + C93680 * C899) * C90 +
               (C188 * C810 + C93680 * C892) * C105 +
               (C188 * C818 + C93680 * C900) * C91 +
               (C188 * C811 + C93680 * C893) * C107 +
               (C188 * C819 + C93680 * C901) * C92) *
                  C93706 * C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C101 +
           (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C93706 * C1382 -
          ((C188 * C1393 + C93680 * C1475) * C92 +
           (C188 * C1385 + C93680 * C1467) * C107 +
           (C188 * C1394 + C93680 * C1476) * C91 +
           (C188 * C1386 + C93680 * C1468) * C105 +
           (C188 * C1395 + C93680 * C1477) * C90 +
           (C188 * C1387 + C93680 * C1469) * C103 +
           (C188 * C1396 + C93680 * C1478) * C89 +
           (C188 * C1388 + C93680 * C1470) * C101) *
              C93706 * C1383 +
          ((C188 * C1389 + C93680 * C1471) * C101 +
           (C188 * C1397 + C93680 * C1479) * C89 +
           (C188 * C1390 + C93680 * C1472) * C103 +
           (C188 * C1398 + C93680 * C1480) * C90 +
           (C188 * C1391 + C93680 * C1473) * C105 +
           (C188 * C1399 + C93680 * C1481) * C91 +
           (C188 * C1392 + C93680 * C1474) * C107 +
           (C188 * C1400 + C93680 * C1482) * C92) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C91732 +
           (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
            C14840 * C816 + C14741 * C898) *
               C93815 +
           (C14866 + C14867 + C14868) * C91722 +
           (C14869 + C14870 + C14871) * C93590) *
              C93706 * C93639 * C93625 * C97 -
          ((C14872 + C14873 + C14874) * C93590 +
           (C14875 + C14876 + C14877) * C91722 +
           (C14871 + C14870 + C14869) * C93815 +
           (C14868 + C14867 + C14866) * C91732) *
              C93706 * C93639 * C93625 * C98 +
          ((C14877 + C14876 + C14875) * C91732 +
           (C14874 + C14873 + C14872) * C93815 +
           (C14838 * C111 + C14739 * C192 + C14839 * C804 + C14740 * C886 +
            C14840 * C811 + C14741 * C893) *
               C91722 +
           (C14838 * C117 + C14739 * C198 + C14839 * C812 + C14740 * C894 +
            C14840 * C819 + C14741 * C901) *
               C93590) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C91732 +
           (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
            C14840 * C816 + C14741 * C898) *
               C93815 +
           (C14866 + C14867 + C14868) * C91722 +
           (C14869 + C14870 + C14871) * C93590) *
              C93706 * C93639 * C800 -
          ((C14840 * C4901 + C14741 * C5020 + C14839 * C817 + C14740 * C899 +
            C14838 * C814 + C14739 * C896) *
               C93590 +
           (C14840 * C4898 + C14741 * C5017 + C14839 * C809 + C14740 * C891 +
            C14838 * C806 + C14739 * C888) *
               C91722 +
           (C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
            C14838 * C815 + C14739 * C897) *
               C93815 +
           (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
            C14838 * C807 + C14739 * C889) *
               C91732) *
              C93706 * C93639 * C801 +
          ((C14838 * C808 + C14739 * C890 + C14839 * C4897 + C14740 * C5016 +
            C14840 * C15550 + C14741 * C15666) *
               C91732 +
           (C14838 * C816 + C14739 * C898 + C14839 * C4900 + C14740 * C5019 +
            C14840 * C15552 + C14741 * C15668) *
               C93815 +
           (C14838 * C809 + C14739 * C891 + C14839 * C4898 + C14740 * C5017 +
            C14840 * C15551 + C14741 * C15667) *
               C91722 +
           (C14838 * C817 + C14739 * C899 + C14839 * C4901 + C14740 * C5020 +
            C14840 * C15553 + C14741 * C15669) *
               C93590) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C91732 +
           (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
            C14840 * C816 + C14741 * C898) *
               C93815 +
           (C14866 + C14867 + C14868) * C91722 +
           (C14869 + C14870 + C14871) * C93590) *
              C93706 * C1382 -
          ((C14840 * C8524 + C14741 * C8649 + C14839 * C3414 + C14740 * C3496 +
            C14838 * C1395 + C14739 * C1477) *
               C93590 +
           (C14840 * C8521 + C14741 * C8646 + C14839 * C3410 + C14740 * C3492 +
            C14838 * C1387 + C14739 * C1469) *
               C91722 +
           (C14840 * C8523 + C14741 * C8648 + C14839 * C3413 + C14740 * C3495 +
            C14838 * C1396 + C14739 * C1478) *
               C93815 +
           (C14840 * C8520 + C14741 * C8645 + C14839 * C3409 + C14740 * C3491 +
            C14838 * C1388 + C14739 * C1470) *
               C91732) *
              C93706 * C1383 +
          ((C14838 * C1389 + C14739 * C1471 + C14839 * C5775 + C14740 * C5870 +
            C14840 * C16395 + C14741 * C16487) *
               C91732 +
           (C14838 * C1397 + C14739 * C1479 + C14839 * C5778 + C14740 * C5873 +
            C14840 * C16397 + C14741 * C16489) *
               C93815 +
           (C14838 * C1390 + C14739 * C1472 + C14839 * C5776 + C14740 * C5871 +
            C14840 * C16396 + C14741 * C16488) *
               C91722 +
           (C14838 * C1398 + C14739 * C1480 + C14839 * C5779 + C14740 * C5874 +
            C14840 * C16398 + C14741 * C16490) *
               C93590) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C91732 +
            (C188 * C114 + C93680 * C195) * C93815 + C218 * C91722 +
            C219 * C93590) *
               C28719 +
           (C11107 * C91732 + C11108 * C93815 + C2790 * C91722 +
            C2789 * C93590) *
               C28720 +
           (C11114 * C91732 + C11113 * C93815 + C11112 * C91722 +
            C11111 * C93590) *
               C28721) *
              C93639 * C93625 * C97 -
          ((C11109 * C93590 + C11110 * C91722 + C11111 * C93815 +
            C11112 * C91732) *
               C28721 +
           (C2787 * C93590 + C2788 * C91722 + C2789 * C93815 + C2790 * C91732) *
               C28720 +
           (C221 * C93590 + C220 * C91722 + C219 * C93815 + C218 * C91732) *
               C28719) *
              C93639 * C93625 * C98 +
          ((C220 * C91732 + C221 * C93815 + C222 * C91722 + C223 * C93590) *
               C28719 +
           (C2788 * C91732 + C2787 * C93815 + C2786 * C91722 + C2785 * C93590) *
               C28720 +
           (C11110 * C91732 + C11109 * C93815 +
            (C188 * C1392 + C93680 * C1474) * C91722 +
            (C188 * C1400 + C93680 * C1482) * C93590) *
               C28721) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C91732 +
            (C188 * C114 + C93680 * C195) * C93815 + C218 * C91722 +
            C219 * C93590) *
               C28719 +
           (C11107 * C91732 + C11108 * C93815 + C2790 * C91722 +
            C2789 * C93590) *
               C28720 +
           (C11114 * C91732 + C11113 * C93815 + C11112 * C91722 +
            C11111 * C93590) *
               C28721) *
              C93639 * C800 -
          (((C188 * C5779 + C93680 * C5874) * C93590 +
            (C188 * C5776 + C93680 * C5871) * C91722 +
            (C188 * C5778 + C93680 * C5873) * C93815 +
            (C188 * C5775 + C93680 * C5870) * C91732) *
               C28721 +
           (C11978 * C93590 + C11979 * C91722 + C13955 * C93815 +
            C13954 * C91732) *
               C28720 +
           (C2075 * C93590 + C2076 * C91722 +
            (C188 * C815 + C93680 * C897) * C93815 +
            (C188 * C807 + C93680 * C889) * C91732) *
               C28719) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C91732 +
            (C188 * C816 + C93680 * C898) * C93815 +
            (C188 * C809 + C93680 * C891) * C91722 +
            (C188 * C817 + C93680 * C899) * C93590) *
               C28719 +
           ((C188 * C8520 + C93680 * C8645) * C91732 +
            (C188 * C8523 + C93680 * C8648) * C93815 +
            (C188 * C8521 + C93680 * C8646) * C91722 +
            (C188 * C8524 + C93680 * C8649) * C93590) *
               C28720 +
           ((C188 * C16395 + C93680 * C16487) * C91732 +
            (C188 * C16397 + C93680 * C16489) * C93815 +
            (C188 * C16396 + C93680 * C16488) * C91722 +
            (C188 * C16398 + C93680 * C16490) * C93590) *
               C28721) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C91732 +
            (C188 * C114 + C93680 * C195) * C93815 + C218 * C91722 +
            C219 * C93590) *
               C28719 +
           (C30308 + C30309 + C30310 + C30311) * C28720 + C30334 * C28721) *
              C1382 -
          ((C30330 + C30331 + C30332 + C30333) * C28721 +
           (C30315 + C30314 + C30313 + C30312) * C28720 +
           (C30311 + C30310 + C30309 + C30308) * C28719) *
              C1383 +
          (C30334 * C28719 + (C30333 + C30332 + C30331 + C30330) * C28720 +
           ((C188 * C30188 + C93680 * C30303) * C91732 +
            (C188 * C30190 + C93680 * C30305) * C93815 +
            (C188 * C30189 + C93680 * C30304) * C91722 +
            (C188 * C30191 + C93680 * C30306) * C93590) *
               C28721) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C275 * C108 + C93706 * C276) * C101 +
               (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
               C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
                  C93680 * C93639 * C93625 * C97 -
              (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 +
               C308 * C90 + C307 * C103 + C306 * C89 + C305 * C101) *
                  C93680 * C93639 * C93625 * C98 +
              (C307 * C101 + C308 * C89 + C309 * C103 + C310 * C90 +
               C312 * C105 + C311 * C91 + (C275 * C113 + C93706 * C281) * C107 +
               (C275 * C119 + C93706 * C287) * C92) *
                  C93680 * C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C275 * C108 + C93706 * C276) * C101 +
               (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
               C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
                  C93680 * C93639 * C800 -
              ((C275 * C812 + C93706 * C960) * C92 +
               (C275 * C804 + C93706 * C952) * C107 +
               (C275 * C813 + C93706 * C961) * C91 +
               (C275 * C805 + C93706 * C953) * C105 +
               (C275 * C814 + C93706 * C962) * C90 +
               (C275 * C806 + C93706 * C954) * C103 +
               (C275 * C815 + C93706 * C963) * C89 +
               (C275 * C807 + C93706 * C955) * C101) *
                  C93680 * C93639 * C801 +
              ((C275 * C808 + C93706 * C956) * C101 +
               (C275 * C816 + C93706 * C964) * C89 +
               (C275 * C809 + C93706 * C957) * C103 +
               (C275 * C817 + C93706 * C965) * C90 +
               (C275 * C810 + C93706 * C958) * C105 +
               (C275 * C818 + C93706 * C966) * C91 +
               (C275 * C811 + C93706 * C959) * C107 +
               (C275 * C819 + C93706 * C967) * C92) *
                  C93680 * C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C101 +
           (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C93680 * C1382 -
          ((C275 * C1393 + C93706 * C1541) * C92 +
           (C275 * C1385 + C93706 * C1533) * C107 +
           (C275 * C1394 + C93706 * C1542) * C91 +
           (C275 * C1386 + C93706 * C1534) * C105 +
           (C275 * C1395 + C93706 * C1543) * C90 +
           (C275 * C1387 + C93706 * C1535) * C103 +
           (C275 * C1396 + C93706 * C1544) * C89 +
           (C275 * C1388 + C93706 * C1536) * C101) *
              C93680 * C1383 +
          ((C275 * C1389 + C93706 * C1537) * C101 +
           (C275 * C1397 + C93706 * C1545) * C89 +
           (C275 * C1390 + C93706 * C1538) * C103 +
           (C275 * C1398 + C93706 * C1546) * C90 +
           (C275 * C1391 + C93706 * C1539) * C105 +
           (C275 * C1399 + C93706 * C1547) * C91 +
           (C275 * C1392 + C93706 * C1540) * C107 +
           (C275 * C1400 + C93706 * C1548) * C92) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C91732 +
            (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
            C306 * C93590) *
               C14739 +
           (C5123 * C91732 + C5124 * C93815 + C2162 * C91722 + C2161 * C93590) *
               C14740 +
           (C5130 * C91732 + C5129 * C93815 + C5128 * C91722 + C5127 * C93590) *
               C14741) *
              C93639 * C93625 * C97 -
          ((C5125 * C93590 + C5126 * C91722 + C5127 * C93815 + C5128 * C91732) *
               C14741 +
           (C2159 * C93590 + C2160 * C91722 + C2161 * C93815 + C2162 * C91732) *
               C14740 +
           (C308 * C93590 + C307 * C91722 + C306 * C93815 + C305 * C91732) *
               C14739) *
              C93639 * C93625 * C98 +
          ((C307 * C91732 + C308 * C93815 + C309 * C91722 + C310 * C93590) *
               C14739 +
           (C2160 * C91732 + C2159 * C93815 + C2158 * C91722 + C2157 * C93590) *
               C14740 +
           (C5126 * C91732 + C5125 * C93815 +
            (C275 * C811 + C93706 * C959) * C91722 +
            (C275 * C819 + C93706 * C967) * C93590) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C91732 +
            (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
            C306 * C93590) *
               C14739 +
           (C15749 + C15750 + C15751 + C15752) * C14740 + C15775 * C14741) *
              C93639 * C800 -
          ((C15771 + C15772 + C15773 + C15774) * C14741 +
           (C15756 + C15755 + C15754 + C15753) * C14740 +
           (C15752 + C15751 + C15750 + C15749) * C14739) *
              C93639 * C801 +
          (C15775 * C14739 + (C15774 + C15773 + C15772 + C15771) * C14740 +
           ((C275 * C15550 + C93706 * C15744) * C91732 +
            (C275 * C15552 + C93706 * C15746) * C93815 +
            (C275 * C15551 + C93706 * C15745) * C91722 +
            (C275 * C15553 + C93706 * C15747) * C93590) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C91732 +
            (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
            C306 * C93590) *
               C14739 +
           (C15749 + C15750 + C15751 + C15752) * C14740 + C15775 * C14741) *
              C1382 -
          (((C275 * C8524 + C93706 * C8753) * C93590 +
            (C275 * C8521 + C93706 * C8750) * C91722 +
            (C275 * C8523 + C93706 * C8752) * C93815 +
            (C275 * C8520 + C93706 * C8749) * C91732) *
               C14741 +
           (C7771 * C93590 + C7772 * C91722 + C8764 * C93815 + C8765 * C91732) *
               C14740 +
           (C2875 * C93590 + C2876 * C91722 +
            (C275 * C1396 + C93706 * C1544) * C93815 +
            (C275 * C1388 + C93706 * C1536) * C91732) *
               C14739) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C91732 +
            (C275 * C1397 + C93706 * C1545) * C93815 +
            (C275 * C1390 + C93706 * C1538) * C91722 +
            (C275 * C1398 + C93706 * C1546) * C93590) *
               C14739 +
           ((C275 * C5775 + C93706 * C5950) * C91732 +
            (C275 * C5778 + C93706 * C5953) * C93815 +
            (C275 * C5776 + C93706 * C5951) * C91722 +
            (C275 * C5779 + C93706 * C5954) * C93590) *
               C14740 +
           ((C275 * C16395 + C93706 * C16565) * C91732 +
            (C275 * C16397 + C93706 * C16567) * C93815 +
            (C275 * C16396 + C93706 * C16566) * C91722 +
            (C275 * C16398 + C93706 * C16568) * C93590) *
               C14741) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
            C28878 * C1389 + C28721 * C1537) *
               C91732 +
           (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
            C28878 * C1397 + C28721 * C1545) *
               C93815 +
           (C28904 + C28905 + C28906) * C91722 +
           (C28907 + C28908 + C28909) * C93590) *
              C93680 * C93639 * C93625 * C97 -
          ((C28910 + C28911 + C28912) * C93590 +
           (C28913 + C28914 + C28915) * C91722 +
           (C28909 + C28908 + C28907) * C93815 +
           (C28906 + C28905 + C28904) * C91732) *
              C93680 * C93639 * C93625 * C98 +
          ((C28915 + C28914 + C28913) * C91732 +
           (C28912 + C28911 + C28910) * C93815 +
           (C28876 * C111 + C28719 * C279 + C28877 * C1385 + C28720 * C1533 +
            C28878 * C1392 + C28721 * C1540) *
               C91722 +
           (C28876 * C117 + C28719 * C285 + C28877 * C1393 + C28720 * C1541 +
            C28878 * C1400 + C28721 * C1548) *
               C93590) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
            C28878 * C1389 + C28721 * C1537) *
               C91732 +
           (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
            C28878 * C1397 + C28721 * C1545) *
               C93815 +
           (C28904 + C28905 + C28906) * C91722 +
           (C28907 + C28908 + C28909) * C93590) *
              C93680 * C93639 * C800 -
          ((C28878 * C5779 + C28721 * C5954 + C28877 * C3414 + C28720 * C3570 +
            C28876 * C814 + C28719 * C962) *
               C93590 +
           (C28878 * C5776 + C28721 * C5951 + C28877 * C3410 + C28720 * C3566 +
            C28876 * C806 + C28719 * C954) *
               C91722 +
           (C28878 * C5778 + C28721 * C5953 + C28877 * C3413 + C28720 * C3569 +
            C28876 * C815 + C28719 * C963) *
               C93815 +
           (C28878 * C5775 + C28721 * C5950 + C28877 * C3409 + C28720 * C3565 +
            C28876 * C807 + C28719 * C955) *
               C91732) *
              C93680 * C93639 * C801 +
          ((C28876 * C808 + C28719 * C956 + C28877 * C8520 + C28720 * C8749 +
            C28878 * C16395 + C28721 * C16565) *
               C91732 +
           (C28876 * C816 + C28719 * C964 + C28877 * C8523 + C28720 * C8752 +
            C28878 * C16397 + C28721 * C16567) *
               C93815 +
           (C28876 * C809 + C28719 * C957 + C28877 * C8521 + C28720 * C8750 +
            C28878 * C16396 + C28721 * C16566) *
               C91722 +
           (C28876 * C817 + C28719 * C965 + C28877 * C8524 + C28720 * C8753 +
            C28878 * C16398 + C28721 * C16568) *
               C93590) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
            C28878 * C1389 + C28721 * C1537) *
               C91732 +
           (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
            C28878 * C1397 + C28721 * C1545) *
               C93815 +
           (C28904 + C28905 + C28906) * C91722 +
           (C28907 + C28908 + C28909) * C93590) *
              C93680 * C1382 -
          ((C28878 * C10968 + C28721 * C11200 + C28877 * C1398 +
            C28720 * C1546 + C28876 * C1395 + C28719 * C1543) *
               C93590 +
           (C28878 * C10965 + C28721 * C11197 + C28877 * C1390 +
            C28720 * C1538 + C28876 * C1387 + C28719 * C1535) *
               C91722 +
           (C28878 * C10967 + C28721 * C11199 + C28877 * C1397 +
            C28720 * C1545 + C28876 * C1396 + C28719 * C1544) *
               C93815 +
           (C28878 * C10964 + C28721 * C11196 + C28877 * C1389 +
            C28720 * C1537 + C28876 * C1388 + C28719 * C1536) *
               C91732) *
              C93680 * C1383 +
          ((C28876 * C1389 + C28719 * C1537 + C28877 * C10964 +
            C28720 * C11196 + C28878 * C30188 + C28721 * C30408) *
               C91732 +
           (C28876 * C1397 + C28719 * C1545 + C28877 * C10967 +
            C28720 * C11199 + C28878 * C30190 + C28721 * C30410) *
               C93815 +
           (C28876 * C1390 + C28719 * C1538 + C28877 * C10965 +
            C28720 * C11197 + C28878 * C30189 + C28721 * C30409) *
               C91722 +
           (C28876 * C1398 + C28719 * C1546 + C28877 * C10968 +
            C28720 * C11200 + C28878 * C30191 + C28721 * C30411) *
               C93590) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                C105 * C110 + C91 * C116 + C107 * C111 + C92 * C117) *
                   C188 +
               (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 +
                C105 * C191 + C91 * C364 + C107 * C192 + C92 * C365) *
                   C93680) *
                  C93706 * C93639 * C93625 * C97 -
              ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 +
                C103 * C191 + C90 * C364 + C101 * C190 + C89 * C363) *
                   C93680 +
               (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 +
                C103 * C110 + C90 * C116 + C101 * C109 + C89 * C115) *
                   C188) *
                  C93706 * C93639 * C93625 * C98 +
              ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 +
                C105 * C112 + C91 * C118 + C107 * C113 + C92 * C119) *
                   C188 +
               (C101 * C191 + C89 * C364 + C103 * C192 + C90 * C365 +
                C105 * C193 + C91 * C366 + C107 * C194 + C92 * C367) *
                   C93680) *
                  C93706 * C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                C105 * C110 + C91 * C116 + C107 * C111 + C92 * C117) *
                   C188 +
               (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 +
                C105 * C191 + C91 * C364 + C107 * C192 + C92 * C365) *
                   C93680) *
                  C93706 * C93639 * C800 -
              ((C107 * C886 + C92 * C1018 + C105 * C887 + C91 * C1019 +
                C103 * C888 + C90 * C1020 + C101 * C889 + C89 * C1021) *
                   C93680 +
               (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 +
                C103 * C806 + C90 * C814 + C101 * C807 + C89 * C815) *
                   C188) *
                  C93706 * C93639 * C801 +
              ((C101 * C808 + C89 * C816 + C103 * C809 + C90 * C817 +
                C105 * C810 + C91 * C818 + C107 * C811 + C92 * C819) *
                   C188 +
               (C101 * C890 + C89 * C1022 + C103 * C891 + C90 * C1023 +
                C105 * C892 + C91 * C1024 + C107 * C893 + C92 * C1025) *
                   C93680) *
                  C93706 * C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C93680) *
              C93706 * C1382 -
          ((C107 * C1467 + C92 * C1599 + C105 * C1468 + C91 * C1600 +
            C103 * C1469 + C90 * C1601 + C101 * C1470 + C89 * C1602) *
               C93680 +
           (C107 * C1385 + C92 * C1393 + C105 * C1386 + C91 * C1394 +
            C103 * C1387 + C90 * C1395 + C101 * C1388 + C89 * C1396) *
               C188) *
              C93706 * C1383 +
          ((C101 * C1389 + C89 * C1397 + C103 * C1390 + C90 * C1398 +
            C105 * C1391 + C91 * C1399 + C107 * C1392 + C92 * C1400) *
               C188 +
           (C101 * C1471 + C89 * C1603 + C103 * C1472 + C90 * C1604 +
            C105 * C1473 + C91 * C1605 + C107 * C1474 + C92 * C1606) *
               C93680) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C14838 +
           (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
               C14739 +
           (C91732 * C807 + C93815 * C815 + C91722 * C806 + C93590 * C814) *
               C14839 +
           (C91732 * C889 + C93815 * C1021 + C91722 * C888 + C93590 * C1020) *
               C14740 +
           (C91732 * C808 + C93815 * C816 + C91722 * C809 + C93590 * C817) *
               C14840 +
           (C91732 * C890 + C93815 * C1022 + C91722 * C891 + C93590 * C1023) *
               C14741) *
              C93706 * C93639 * C93625 * C97 -
          ((C91722 * C892 + C93590 * C1024 + C91732 * C891 + C93815 * C1023) *
               C14741 +
           (C91722 * C810 + C93590 * C818 + C91732 * C809 + C93815 * C817) *
               C14840 +
           (C91722 * C887 + C93590 * C1019 + C91732 * C888 + C93815 * C1020) *
               C14740 +
           (C91722 * C805 + C93590 * C813 + C91732 * C806 + C93815 * C814) *
               C14839 +
           (C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
               C14739 +
           (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
               C14838) *
              C93706 * C93639 * C93625 * C98 +
          ((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
               C14838 +
           (C91732 * C191 + C93815 * C364 + C91722 * C192 + C93590 * C365) *
               C14739 +
           (C91732 * C805 + C93815 * C813 + C91722 * C804 + C93590 * C812) *
               C14839 +
           (C91732 * C887 + C93815 * C1019 + C91722 * C886 + C93590 * C1018) *
               C14740 +
           (C91732 * C810 + C93815 * C818 + C91722 * C811 + C93590 * C819) *
               C14840 +
           (C91732 * C892 + C93815 * C1024 + C91722 * C893 + C93590 * C1025) *
               C14741) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C14838 +
           (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
               C14739 +
           (C15876 + C15877) * C14839 + (C15878 + C15879) * C14740 +
           C15888 * C14840 + C15889 * C14741) *
              C93706 * C93639 * C800 -
          ((C15884 + C15885) * C14741 + (C15886 + C15887) * C14840 +
           (C15883 + C15882) * C14740 + (C15881 + C15880) * C14839 +
           (C15879 + C15878) * C14739 + (C15877 + C15876) * C14838) *
              C93706 * C93639 * C801 +
          (C15888 * C14838 + C15889 * C14739 + (C15887 + C15886) * C14839 +
           (C15885 + C15884) * C14740 +
           (C91732 * C15550 + C93815 * C15552 + C91722 * C15551 +
            C93590 * C15553) *
               C14840 +
           (C91732 * C15666 + C93815 * C15849 + C91722 * C15667 +
            C93590 * C15850) *
               C14741) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C14838 +
           (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
               C14739 +
           (C15876 + C15877) * C14839 + (C15878 + C15879) * C14740 +
           C15888 * C14840 + C15889 * C14741) *
              C93706 * C1382 -
          ((C91722 * C8646 + C93590 * C8866 + C91732 * C8645 + C93815 * C8865) *
               C14741 +
           (C91722 * C8521 + C93590 * C8524 + C91732 * C8520 + C93815 * C8523) *
               C14840 +
           (C91722 * C3492 + C93590 * C3640 + C91732 * C3491 + C93815 * C3639) *
               C14740 +
           (C91722 * C3410 + C93590 * C3414 + C91732 * C3409 + C93815 * C3413) *
               C14839 +
           (C91722 * C1469 + C93590 * C1601 + C91732 * C1470 + C93815 * C1602) *
               C14739 +
           (C91722 * C1387 + C93590 * C1395 + C91732 * C1388 + C93815 * C1396) *
               C14838) *
              C93706 * C1383 +
          ((C91732 * C1389 + C93815 * C1397 + C91722 * C1390 + C93590 * C1398) *
               C14838 +
           (C91732 * C1471 + C93815 * C1603 + C91722 * C1472 + C93590 * C1604) *
               C14739 +
           (C91732 * C5775 + C93815 * C5778 + C91722 * C5776 + C93590 * C5779) *
               C14839 +
           (C91732 * C5870 + C93815 * C6030 + C91722 * C5871 + C93590 * C6031) *
               C14740 +
           (C91732 * C16395 + C93815 * C16397 + C91722 * C16396 +
            C93590 * C16398) *
               C14840 +
           (C91732 * C16487 + C93815 * C16643 + C91722 * C16488 +
            C93590 * C16644) *
               C14741) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C188 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C93680) *
               C28719 +
           ((C91732 * C1388 + C93815 * C1396 + C91722 * C1387 +
             C93590 * C1395) *
                C188 +
            (C91732 * C1470 + C93815 * C1602 + C91722 * C1469 +
             C93590 * C1601) *
                C93680) *
               C28720 +
           ((C91732 * C1389 + C93815 * C1397 + C91722 * C1390 +
             C93590 * C1398) *
                C188 +
            (C91732 * C1471 + C93815 * C1603 + C91722 * C1472 +
             C93590 * C1604) *
                C93680) *
               C28721) *
              C93639 * C93625 * C97 -
          (((C91722 * C1473 + C93590 * C1605 + C91732 * C1472 +
             C93815 * C1604) *
                C93680 +
            (C91722 * C1391 + C93590 * C1399 + C91732 * C1390 +
             C93815 * C1398) *
                C188) *
               C28721 +
           ((C91722 * C1468 + C93590 * C1600 + C91732 * C1469 +
             C93815 * C1601) *
                C93680 +
            (C91722 * C1386 + C93590 * C1394 + C91732 * C1387 +
             C93815 * C1395) *
                C188) *
               C28720 +
           ((C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
                C93680 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C188) *
               C28719) *
              C93639 * C93625 * C98 +
          (((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
                C188 +
            (C91732 * C191 + C93815 * C364 + C91722 * C192 + C93590 * C365) *
                C93680) *
               C28719 +
           ((C91732 * C1386 + C93815 * C1394 + C91722 * C1385 +
             C93590 * C1393) *
                C188 +
            (C91732 * C1468 + C93815 * C1600 + C91722 * C1467 +
             C93590 * C1599) *
                C93680) *
               C28720 +
           ((C91732 * C1391 + C93815 * C1399 + C91722 * C1392 +
             C93590 * C1400) *
                C188 +
            (C91732 * C1473 + C93815 * C1605 + C91722 * C1474 +
             C93590 * C1606) *
                C93680) *
               C28721) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C188 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C93680) *
               C28719 +
           ((C91732 * C1388 + C93815 * C1396 + C91722 * C1387 +
             C93590 * C1395) *
                C188 +
            (C91732 * C1470 + C93815 * C1602 + C91722 * C1469 +
             C93590 * C1601) *
                C93680) *
               C28720 +
           ((C91732 * C1389 + C93815 * C1397 + C91722 * C1390 +
             C93590 * C1398) *
                C188 +
            (C91732 * C1471 + C93815 * C1603 + C91722 * C1472 +
             C93590 * C1604) *
                C93680) *
               C28721) *
              C93639 * C800 -
          (((C91722 * C5871 + C93590 * C6031 + C91732 * C5870 +
             C93815 * C6030) *
                C93680 +
            (C91722 * C5776 + C93590 * C5779 + C91732 * C5775 +
             C93815 * C5778) *
                C188) *
               C28721 +
           ((C19462 + C19463) * C93680 + (C19464 + C19465) * C188) * C28720 +
           ((C15879 + C15878) * C93680 + (C15877 + C15876) * C188) * C28719) *
              C93639 * C801 +
          ((C15888 * C188 + C15889 * C93680) * C28719 +
           ((C19461 + C19460) * C188 + (C19459 + C19458) * C93680) * C28720 +
           ((C91732 * C16395 + C93815 * C16397 + C91722 * C16396 +
             C93590 * C16398) *
                C188 +
            (C91732 * C16487 + C93815 * C16643 + C91722 * C16488 +
             C93590 * C16644) *
                C93680) *
               C28721) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C188 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C93680) *
               C28719 +
           ((C30513 + C30514) * C188 + (C30515 + C30516) * C93680) * C28720 +
           C30529 * C28721) *
              C1382 -
          (((C30521 + C30522) * C93680 + (C30523 + C30524) * C188) * C28721 +
           ((C30520 + C30519) * C93680 + (C30518 + C30517) * C188) * C28720 +
           ((C30516 + C30515) * C93680 + (C30514 + C30513) * C188) * C28719) *
              C1383 +
          (C30529 * C28719 +
           ((C30524 + C30523) * C188 + (C30522 + C30521) * C93680) * C28720 +
           ((C91732 * C30188 + C93815 * C30190 + C91722 * C30189 +
             C93590 * C30191) *
                C188 +
            (C91732 * C30303 + C93815 * C30486 + C91722 * C30304 +
             C93590 * C30487) *
                C93680) *
               C28721) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C418 * C108 + C426 + C426 + C93680 * C419) * C89 + C448 * C90 +
               C449 * C91 + C450 * C92) *
                  C93706 * C93639 * C93625 * C97 -
              (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C93706 *
                  C93639 * C93625 * C98 +
              (C449 * C89 + C450 * C90 + C451 * C91 +
               (C418 * C113 + C439 + C439 + C93680 * C424) * C92) *
                  C93706 * C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C418 * C108 + C426 + C426 + C93680 * C419) * C89 + C448 * C90 +
               C449 * C91 + C450 * C92) *
                  C93706 * C93639 * C800 -
              ((C418 * C804 + C1085 + C1085 + C93680 * C1076) * C92 +
               (C418 * C805 + C1086 + C1086 + C93680 * C1077) * C91 +
               (C418 * C806 + C1087 + C1087 + C93680 * C1078) * C90 +
               (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C89) *
                  C93706 * C93639 * C801 +
              ((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C89 +
               (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C90 +
               (C418 * C810 + C1091 + C1091 + C93680 * C1082) * C91 +
               (C418 * C811 + C1092 + C1092 + C93680 * C1083) * C92) *
                  C93706 * C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C93680 * C419) * C89 + C448 * C90 +
           C449 * C91 + C450 * C92) *
              C93706 * C1382 -
          ((C418 * C1385 + C1666 + C1666 + C93680 * C1657) * C92 +
           (C418 * C1386 + C1667 + C1667 + C93680 * C1658) * C91 +
           (C418 * C1387 + C1668 + C1668 + C93680 * C1659) * C90 +
           (C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C89) *
              C93706 * C1383 +
          ((C418 * C1389 + C1670 + C1670 + C93680 * C1661) * C89 +
           (C418 * C1390 + C1671 + C1671 + C93680 * C1662) * C90 +
           (C418 * C1391 + C1672 + C1672 + C93680 * C1663) * C91 +
           (C418 * C1392 + C1673 + C1673 + C93680 * C1664) * C92) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93815 +
           (C15139 + C15140 + C15141) * C93590) *
              C93706 * C93639 * C93625 * C97 -
          ((C15142 + C15143 + C15144) * C93590 +
           (C15141 + C15140 + C15139) * C93815) *
              C93706 * C93639 * C93625 * C98 +
          ((C15144 + C15143 + C15142) * C93815 +
           (C15099 * C111 + C15124 + C15124 + C14739 * C422 + C15100 * C804 +
            C15125 + C15125 + C14740 * C1076 + C15101 * C811 + C15126 + C15126 +
            C14741 * C1083) *
               C93590) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93815 +
           (C15139 + C15140 + C15141) * C93590) *
              C93706 * C93639 * C800 -
          ((C15101 * C4898 + C15966 + C15966 + C14741 * C5326 + C15100 * C809 +
            C15967 + C15967 + C14740 * C1081 + C15099 * C806 + C15968 + C15968 +
            C14739 * C1078) *
               C93590 +
           (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 + C15100 * C808 +
            C15970 + C15970 + C14740 * C1080 + C15099 * C807 + C15971 + C15971 +
            C14739 * C1079) *
               C93815) *
              C93706 * C93639 * C801 +
          ((C15099 * C808 + C15972 + C15972 + C14739 * C1080 + C15100 * C4897 +
            C15973 + C15973 + C14740 * C5325 + C15101 * C15550 + C15974 +
            C15974 + C14741 * C15963) *
               C93815 +
           (C15099 * C809 + C15975 + C15975 + C14739 * C1081 + C15100 * C4898 +
            C15976 + C15976 + C14740 * C5326 + C15101 * C15551 + C15977 +
            C15977 + C14741 * C15964) *
               C93590) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93815 +
           (C15139 + C15140 + C15141) * C93590) *
              C93706 * C1382 -
          ((C15101 * C8521 + C16722 + C16722 + C14741 * C8985 + C15100 * C3410 +
            C16723 + C16723 + C14740 * C3710 + C15099 * C1387 + C16724 +
            C16724 + C14739 * C1659) *
               C93590 +
           (C15101 * C8520 + C16725 + C16725 + C14741 * C8984 + C15100 * C3409 +
            C16726 + C16726 + C14740 * C3709 + C15099 * C1388 + C16727 +
            C16727 + C14739 * C1660) *
               C93815) *
              C93706 * C1383 +
          ((C15099 * C1389 + C16728 + C16728 + C14739 * C1661 + C15100 * C5775 +
            C16729 + C16729 + C14740 * C6107 + C15101 * C16395 + C16730 +
            C16730 + C14741 * C16719) *
               C93815 +
           (C15099 * C1390 + C16731 + C16731 + C14739 * C1662 + C15100 * C5776 +
            C16732 + C16732 + C14740 * C6108 + C15101 * C16396 + C16733 +
            C16733 + C14741 * C16720) *
               C93590) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93815 +
            C448 * C93590) *
               C28719 +
           (C11414 * C93815 + C3026 * C93590) * C28720 +
           (C11417 * C93815 + C11416 * C93590) * C28721) *
              C93639 * C93625 * C97 -
          ((C11415 * C93590 + C11416 * C93815) * C28721 +
           (C3025 * C93590 + C3026 * C93815) * C28720 +
           (C449 * C93590 + C448 * C93815) * C28719) *
              C93639 * C93625 * C98 +
          ((C449 * C93815 + C450 * C93590) * C28719 +
           (C3025 * C93815 + C3024 * C93590) * C28720 +
           (C11415 * C93815 +
            (C418 * C1392 + C1673 + C1673 + C93680 * C1664) * C93590) *
               C28721) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93815 +
            C448 * C93590) *
               C28719 +
           (C11414 * C93815 + C3026 * C93590) * C28720 +
           (C11417 * C93815 + C11416 * C93590) * C28721) *
              C93639 * C800 -
          (((C418 * C5776 + C14257 + C14257 + C93680 * C6108) * C93590 +
            (C418 * C5775 + C14256 + C14256 + C93680 * C6107) * C93815) *
               C28721 +
           (C12307 * C93590 + C14261 * C93815) * C28720 +
           (C2312 * C93590 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C93815) *
               C28719) *
              C93639 * C801 +
          (((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C93815 +
            (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C93590) *
               C28719 +
           ((C418 * C8520 + C10580 + C10580 + C93680 * C8984) * C93815 +
            (C418 * C8521 + C10581 + C10581 + C93680 * C8985) * C93590) *
               C28720 +
           ((C418 * C16395 + C29805 + C29805 + C93680 * C16719) * C93815 +
            (C418 * C16396 + C29806 + C29806 + C93680 * C16720) * C93590) *
               C28721) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93815 +
            C448 * C93590) *
               C28719 +
           (C30606 + C30607) * C28720 + C30616 * C28721) *
              C1382 -
          ((C30623 + C30624) * C28721 + (C30609 + C30608) * C28720 +
           (C30607 + C30606) * C28719) *
              C1383 +
          (C30616 * C28719 + (C30624 + C30623) * C28720 +
           ((C418 * C30188 + C30614 + C30614 + C93680 * C30603) * C93815 +
            (C418 * C30189 + C30615 + C30615 + C93680 * C30604) * C93590) *
               C28721) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C108 + C93706 * C276) * C188 +
                (C275 * C189 + C93706 * C501) * C93680) *
                   C89 +
               (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
                  C93639 * C93625 * C97 -
              ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
               (C524 + C508) * C89) *
                  C93639 * C93625 * C98 +
              (C528 * C89 + C529 * C90 + (C519 + C527) * C91 +
               ((C275 * C113 + C93706 * C281) * C188 +
                (C275 * C194 + C93706 * C506) * C93680) *
                   C92) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C108 + C93706 * C276) * C188 +
                (C275 * C189 + C93706 * C501) * C93680) *
                   C89 +
               (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
                  C93639 * C800 -
              (((C275 * C886 + C93706 * C1142) * C93680 +
                (C275 * C804 + C93706 * C952) * C188) *
                   C92 +
               ((C275 * C887 + C93706 * C1143) * C93680 +
                (C275 * C805 + C93706 * C953) * C188) *
                   C91 +
               ((C275 * C888 + C93706 * C1144) * C93680 +
                (C275 * C806 + C93706 * C954) * C188) *
                   C90 +
               ((C275 * C889 + C93706 * C1145) * C93680 +
                (C275 * C807 + C93706 * C955) * C188) *
                   C89) *
                  C93639 * C801 +
              (((C275 * C808 + C93706 * C956) * C188 +
                (C275 * C890 + C93706 * C1146) * C93680) *
                   C89 +
               ((C275 * C809 + C93706 * C957) * C188 +
                (C275 * C891 + C93706 * C1147) * C93680) *
                   C90 +
               ((C275 * C810 + C93706 * C958) * C188 +
                (C275 * C892 + C93706 * C1148) * C93680) *
                   C91 +
               ((C275 * C811 + C93706 * C959) * C188 +
                (C275 * C893 + C93706 * C1149) * C93680) *
                   C92) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C188 +
            (C275 * C189 + C93706 * C501) * C93680) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C1382 -
          (((C275 * C1467 + C93706 * C1723) * C93680 +
            (C275 * C1385 + C93706 * C1533) * C188) *
               C92 +
           ((C275 * C1468 + C93706 * C1724) * C93680 +
            (C275 * C1386 + C93706 * C1534) * C188) *
               C91 +
           ((C275 * C1469 + C93706 * C1725) * C93680 +
            (C275 * C1387 + C93706 * C1535) * C188) *
               C90 +
           ((C275 * C1470 + C93706 * C1726) * C93680 +
            (C275 * C1388 + C93706 * C1536) * C188) *
               C89) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C188 +
            (C275 * C1471 + C93706 * C1727) * C93680) *
               C89 +
           ((C275 * C1390 + C93706 * C1538) * C188 +
            (C275 * C1472 + C93706 * C1728) * C93680) *
               C90 +
           ((C275 * C1391 + C93706 * C1539) * C188 +
            (C275 * C1473 + C93706 * C1729) * C93680) *
               C91 +
           ((C275 * C1392 + C93706 * C1540) * C188 +
            (C275 * C1474 + C93706 * C1730) * C93680) *
               C92) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C14838 +
            (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
            C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
               C93815 +
           (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
              C93639 * C93625 * C97 -
          ((C15225 + C15226 + C15227 + C15228 + C15229 + C15230) * C93590 +
           (C15224 + C15223 + C15222 + C15221 + C15220 + C15219) * C93815) *
              C93639 * C93625 * C98 +
          ((C15230 + C15229 + C15228 + C15227 + C15226 + C15225) * C93815 +
           (C309 * C14838 + C522 * C14739 + C2158 * C14839 + C2389 * C14740 +
            (C275 * C811 + C93706 * C959) * C14840 +
            (C275 * C893 + C93706 * C1149) * C14741) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C14838 +
            (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
            C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
               C93815 +
           (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
              C93639 * C800 -
          ((C16058 * C14741 + C15767 * C14840 + C5428 * C14740 +
            C5128 * C14839 + C2391 * C14739 + C2162 * C14838) *
               C93590 +
           (C16059 * C14741 + C15769 * C14840 + C5429 * C14740 +
            C5130 * C14839 + C5426 * C14739 + C5123 * C14838) *
               C93815) *
              C93639 * C801 +
          ((C5130 * C14838 + C5429 * C14739 + C15769 * C14839 +
            C16059 * C14740 + (C275 * C15550 + C93706 * C15744) * C14840 +
            (C275 * C15666 + C93706 * C16051) * C14741) *
               C93815 +
           (C5128 * C14838 + C5428 * C14739 + C15767 * C14839 +
            C16058 * C14740 + (C275 * C15551 + C93706 * C15745) * C14840 +
            (C275 * C15667 + C93706 * C16052) * C14741) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C14838 +
            (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
            C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
               C93815 +
           (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
              C1382 -
          (((C275 * C8646 + C93706 * C9092) * C14741 +
            (C275 * C8521 + C93706 * C8750) * C14840 + C8100 * C14740 +
            C7772 * C14839 + C3105 * C14739 + C2876 * C14838) *
               C93590 +
           ((C275 * C8645 + C93706 * C9091) * C14741 +
            (C275 * C8520 + C93706 * C8749) * C14840 + C9097 * C14740 +
            C8765 * C14839 + (C275 * C1470 + C93706 * C1726) * C14739 +
            (C275 * C1388 + C93706 * C1536) * C14838) *
               C93815) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C14838 +
            (C275 * C1471 + C93706 * C1727) * C14739 +
            (C275 * C5775 + C93706 * C5950) * C14839 +
            (C275 * C5870 + C93706 * C6196) * C14740 +
            (C275 * C16395 + C93706 * C16565) * C14840 +
            (C275 * C16487 + C93706 * C16807) * C14741) *
               C93815 +
           ((C275 * C1390 + C93706 * C1538) * C14838 +
            (C275 * C1472 + C93706 * C1728) * C14739 +
            (C275 * C5776 + C93706 * C5951) * C14839 +
            (C275 * C5871 + C93706 * C6197) * C14740 +
            (C275 * C16396 + C93706 * C16566) * C14840 +
            (C275 * C16488 + C93706 * C16808) * C14741) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C188 +
            (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
             C28878 * C1471 + C28721 * C1727) *
                C93680) *
               C93815 +
           ((C28904 + C28905 + C28906) * C188 +
            (C29150 + C29151 + C29152) * C93680) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C29153 + C29154 + C29155) * C93680 +
            (C28913 + C28914 + C28915) * C188) *
               C93590 +
           ((C29152 + C29151 + C29150) * C93680 +
            (C28906 + C28905 + C28904) * C188) *
               C93815) *
              C93639 * C93625 * C98 +
          (((C28915 + C28914 + C28913) * C188 +
            (C29155 + C29154 + C29153) * C93680) *
               C93815 +
           ((C28876 * C111 + C28719 * C279 + C28877 * C1385 + C28720 * C1533 +
             C28878 * C1392 + C28721 * C1540) *
                C188 +
            (C28876 * C192 + C28719 * C504 + C28877 * C1467 + C28720 * C1723 +
             C28878 * C1474 + C28721 * C1730) *
                C93680) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C188 +
            (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
             C28878 * C1471 + C28721 * C1727) *
                C93680) *
               C93815 +
           ((C28904 + C28905 + C28906) * C188 +
            (C29150 + C29151 + C29152) * C93680) *
               C93590) *
              C93639 * C800 -
          (((C28878 * C5871 + C28721 * C6197 + C28877 * C3492 + C28720 * C3784 +
             C28876 * C888 + C28719 * C1144) *
                C93680 +
            (C28878 * C5776 + C28721 * C5951 + C28877 * C3410 + C28720 * C3566 +
             C28876 * C806 + C28719 * C954) *
                C188) *
               C93590 +
           ((C28878 * C5870 + C28721 * C6196 + C28877 * C3491 + C28720 * C3783 +
             C28876 * C889 + C28719 * C1145) *
                C93680 +
            (C28878 * C5775 + C28721 * C5950 + C28877 * C3409 + C28720 * C3565 +
             C28876 * C807 + C28719 * C955) *
                C188) *
               C93815) *
              C93639 * C801 +
          (((C28876 * C808 + C28719 * C956 + C28877 * C8520 + C28720 * C8749 +
             C28878 * C16395 + C28721 * C16565) *
                C188 +
            (C28876 * C890 + C28719 * C1146 + C28877 * C8645 + C28720 * C9091 +
             C28878 * C16487 + C28721 * C16807) *
                C93680) *
               C93815 +
           ((C28876 * C809 + C28719 * C957 + C28877 * C8521 + C28720 * C8750 +
             C28878 * C16396 + C28721 * C16566) *
                C188 +
            (C28876 * C891 + C28719 * C1147 + C28877 * C8646 + C28720 * C9092 +
             C28878 * C16488 + C28721 * C16808) *
                C93680) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C188 +
            (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
             C28878 * C1471 + C28721 * C1727) *
                C93680) *
               C93815 +
           ((C28904 + C28905 + C28906) * C188 +
            (C29150 + C29151 + C29152) * C93680) *
               C93590) *
              C1382 -
          (((C28878 * C11081 + C28721 * C11496 + C28877 * C1472 +
             C28720 * C1728 + C28876 * C1469 + C28719 * C1725) *
                C93680 +
            (C28878 * C10965 + C28721 * C11197 + C28877 * C1390 +
             C28720 * C1538 + C28876 * C1387 + C28719 * C1535) *
                C188) *
               C93590 +
           ((C28878 * C11080 + C28721 * C11495 + C28877 * C1471 +
             C28720 * C1727 + C28876 * C1470 + C28719 * C1726) *
                C93680 +
            (C28878 * C10964 + C28721 * C11196 + C28877 * C1389 +
             C28720 * C1537 + C28876 * C1388 + C28719 * C1536) *
                C188) *
               C93815) *
              C1383 +
          (((C28876 * C1389 + C28719 * C1537 + C28877 * C10964 +
             C28720 * C11196 + C28878 * C30188 + C28721 * C30408) *
                C188 +
            (C28876 * C1471 + C28719 * C1727 + C28877 * C11080 +
             C28720 * C11495 + C28878 * C30303 + C28721 * C30698) *
                C93680) *
               C93815 +
           ((C28876 * C1390 + C28719 * C1538 + C28877 * C10965 +
             C28720 * C11197 + C28878 * C30189 + C28721 * C30409) *
                C188 +
            (C28876 * C1472 + C28719 * C1728 + C28877 * C11081 +
             C28720 * C11496 + C28878 * C30304 + C28721 * C30699) *
                C93680) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                C105 * C110 + C91 * C116 + C107 * C111 + C92 * C117) *
                   C275 +
               (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 +
                C105 * C278 + C91 * C581 + C107 * C279 + C92 * C582) *
                   C93706) *
                  C93680 * C93639 * C93625 * C97 -
              ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 +
                C103 * C278 + C90 * C581 + C101 * C277 + C89 * C580) *
                   C93706 +
               (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 +
                C103 * C110 + C90 * C116 + C101 * C109 + C89 * C115) *
                   C275) *
                  C93680 * C93639 * C93625 * C98 +
              ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 +
                C105 * C112 + C91 * C118 + C107 * C113 + C92 * C119) *
                   C275 +
               (C101 * C278 + C89 * C581 + C103 * C279 + C90 * C582 +
                C105 * C280 + C91 * C583 + C107 * C281 + C92 * C584) *
                   C93706) *
                  C93680 * C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                C105 * C110 + C91 * C116 + C107 * C111 + C92 * C117) *
                   C275 +
               (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 +
                C105 * C278 + C91 * C581 + C107 * C279 + C92 * C582) *
                   C93706) *
                  C93680 * C93639 * C800 -
              ((C107 * C952 + C92 * C1200 + C105 * C953 + C91 * C1201 +
                C103 * C954 + C90 * C1202 + C101 * C955 + C89 * C1203) *
                   C93706 +
               (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 +
                C103 * C806 + C90 * C814 + C101 * C807 + C89 * C815) *
                   C275) *
                  C93680 * C93639 * C801 +
              ((C101 * C808 + C89 * C816 + C103 * C809 + C90 * C817 +
                C105 * C810 + C91 * C818 + C107 * C811 + C92 * C819) *
                   C275 +
               (C101 * C956 + C89 * C1204 + C103 * C957 + C90 * C1205 +
                C105 * C958 + C91 * C1206 + C107 * C959 + C92 * C1207) *
                   C93706) *
                  C93680 * C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C93706) *
              C93680 * C1382 -
          ((C107 * C1533 + C92 * C1781 + C105 * C1534 + C91 * C1782 +
            C103 * C1535 + C90 * C1783 + C101 * C1536 + C89 * C1784) *
               C93706 +
           (C107 * C1385 + C92 * C1393 + C105 * C1386 + C91 * C1394 +
            C103 * C1387 + C90 * C1395 + C101 * C1388 + C89 * C1396) *
               C275) *
              C93680 * C1383 +
          ((C101 * C1389 + C89 * C1397 + C103 * C1390 + C90 * C1398 +
            C105 * C1391 + C91 * C1399 + C107 * C1392 + C92 * C1400) *
               C275 +
           (C101 * C1537 + C89 * C1785 + C103 * C1538 + C90 * C1786 +
            C105 * C1539 + C91 * C1787 + C107 * C1540 + C92 * C1788) *
               C93706) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C275 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C93706) *
               C14739 +
           ((C91732 * C807 + C93815 * C815 + C91722 * C806 + C93590 * C814) *
                C275 +
            (C91732 * C955 + C93815 * C1203 + C91722 * C954 + C93590 * C1202) *
                C93706) *
               C14740 +
           ((C91732 * C808 + C93815 * C816 + C91722 * C809 + C93590 * C817) *
                C275 +
            (C91732 * C956 + C93815 * C1204 + C91722 * C957 + C93590 * C1205) *
                C93706) *
               C14741) *
              C93639 * C93625 * C97 -
          (((C91722 * C958 + C93590 * C1206 + C91732 * C957 + C93815 * C1205) *
                C93706 +
            (C91722 * C810 + C93590 * C818 + C91732 * C809 + C93815 * C817) *
                C275) *
               C14741 +
           ((C91722 * C953 + C93590 * C1201 + C91732 * C954 + C93815 * C1202) *
                C93706 +
            (C91722 * C805 + C93590 * C813 + C91732 * C806 + C93815 * C814) *
                C275) *
               C14740 +
           ((C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                C93706 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C275) *
               C14739) *
              C93639 * C93625 * C98 +
          (((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
                C275 +
            (C91732 * C278 + C93815 * C581 + C91722 * C279 + C93590 * C582) *
                C93706) *
               C14739 +
           ((C91732 * C805 + C93815 * C813 + C91722 * C804 + C93590 * C812) *
                C275 +
            (C91732 * C953 + C93815 * C1201 + C91722 * C952 + C93590 * C1200) *
                C93706) *
               C14740 +
           ((C91732 * C810 + C93815 * C818 + C91722 * C811 + C93590 * C819) *
                C275 +
            (C91732 * C958 + C93815 * C1206 + C91722 * C959 + C93590 * C1207) *
                C93706) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C275 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C93706) *
               C14739 +
           ((C15876 + C15877) * C275 + (C16149 + C16150) * C93706) * C14740 +
           C16157 * C14741) *
              C93639 * C800 -
          (((C16153 + C16154) * C93706 + (C15886 + C15887) * C275) * C14741 +
           ((C16152 + C16151) * C93706 + (C15881 + C15880) * C275) * C14740 +
           ((C16150 + C16149) * C93706 + (C15877 + C15876) * C275) * C14739) *
              C93639 * C801 +
          (C16157 * C14739 +
           ((C15887 + C15886) * C275 + (C16154 + C16153) * C93706) * C14740 +
           ((C91732 * C15550 + C93815 * C15552 + C91722 * C15551 +
             C93590 * C15553) *
                C275 +
            (C91732 * C15744 + C93815 * C16133 + C91722 * C15745 +
             C93590 * C16134) *
                C93706) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C275 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C93706) *
               C14739 +
           ((C15876 + C15877) * C275 + (C16149 + C16150) * C93706) * C14740 +
           C16157 * C14741) *
              C1382 -
          (((C91722 * C8750 + C93590 * C9196 + C91732 * C8749 +
             C93815 * C9195) *
                C93706 +
            (C91722 * C8521 + C93590 * C8524 + C91732 * C8520 +
             C93815 * C8523) *
                C275) *
               C14741 +
           ((C91722 * C3566 + C93590 * C3854 + C91732 * C3565 +
             C93815 * C3853) *
                C93706 +
            (C91722 * C3410 + C93590 * C3414 + C91732 * C3409 +
             C93815 * C3413) *
                C275) *
               C14740 +
           ((C91722 * C1535 + C93590 * C1783 + C91732 * C1536 +
             C93815 * C1784) *
                C93706 +
            (C91722 * C1387 + C93590 * C1395 + C91732 * C1388 +
             C93815 * C1396) *
                C275) *
               C14739) *
              C1383 +
          (((C91732 * C1389 + C93815 * C1397 + C91722 * C1390 +
             C93590 * C1398) *
                C275 +
            (C91732 * C1537 + C93815 * C1785 + C91722 * C1538 +
             C93590 * C1786) *
                C93706) *
               C14739 +
           ((C91732 * C5775 + C93815 * C5778 + C91722 * C5776 +
             C93590 * C5779) *
                C275 +
            (C91732 * C5950 + C93815 * C6273 + C91722 * C5951 +
             C93590 * C6274) *
                C93706) *
               C14740 +
           ((C91732 * C16395 + C93815 * C16397 + C91722 * C16396 +
             C93590 * C16398) *
                C275 +
            (C91732 * C16565 + C93815 * C16883 + C91722 * C16566 +
             C93590 * C16884) *
                C93706) *
               C14741) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C28876 +
           (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
               C28719 +
           (C91732 * C1388 + C93815 * C1396 + C91722 * C1387 + C93590 * C1395) *
               C28877 +
           (C91732 * C1536 + C93815 * C1784 + C91722 * C1535 + C93590 * C1783) *
               C28720 +
           (C91732 * C1389 + C93815 * C1397 + C91722 * C1390 + C93590 * C1398) *
               C28878 +
           (C91732 * C1537 + C93815 * C1785 + C91722 * C1538 + C93590 * C1786) *
               C28721) *
              C93680 * C93639 * C93625 * C97 -
          ((C91722 * C1539 + C93590 * C1787 + C91732 * C1538 + C93815 * C1786) *
               C28721 +
           (C91722 * C1391 + C93590 * C1399 + C91732 * C1390 + C93815 * C1398) *
               C28878 +
           (C91722 * C1534 + C93590 * C1782 + C91732 * C1535 + C93815 * C1783) *
               C28720 +
           (C91722 * C1386 + C93590 * C1394 + C91732 * C1387 + C93815 * C1395) *
               C28877 +
           (C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
               C28719 +
           (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
               C28876) *
              C93680 * C93639 * C93625 * C98 +
          ((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
               C28876 +
           (C91732 * C278 + C93815 * C581 + C91722 * C279 + C93590 * C582) *
               C28719 +
           (C91732 * C1386 + C93815 * C1394 + C91722 * C1385 + C93590 * C1393) *
               C28877 +
           (C91732 * C1534 + C93815 * C1782 + C91722 * C1533 + C93590 * C1781) *
               C28720 +
           (C91732 * C1391 + C93815 * C1399 + C91722 * C1392 + C93590 * C1400) *
               C28878 +
           (C91732 * C1539 + C93815 * C1787 + C91722 * C1540 + C93590 * C1788) *
               C28721) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C28876 +
           (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
               C28719 +
           (C91732 * C1388 + C93815 * C1396 + C91722 * C1387 + C93590 * C1395) *
               C28877 +
           (C91732 * C1536 + C93815 * C1784 + C91722 * C1535 + C93590 * C1783) *
               C28720 +
           (C91732 * C1389 + C93815 * C1397 + C91722 * C1390 + C93590 * C1398) *
               C28878 +
           (C91732 * C1537 + C93815 * C1785 + C91722 * C1538 + C93590 * C1786) *
               C28721) *
              C93680 * C93639 * C800 -
          ((C91722 * C5951 + C93590 * C6274 + C91732 * C5950 + C93815 * C6273) *
               C28721 +
           (C91722 * C5776 + C93590 * C5779 + C91732 * C5775 + C93815 * C5778) *
               C28878 +
           (C19785 + C19786) * C28720 + (C19464 + C19465) * C28877 +
           (C16150 + C16149) * C28719 + (C15877 + C15876) * C28876) *
              C93680 * C93639 * C801 +
          (C15888 * C28876 + C16155 * C28719 + (C19461 + C19460) * C28877 +
           (C19784 + C19783) * C28720 +
           (C91732 * C16395 + C93815 * C16397 + C91722 * C16396 +
            C93590 * C16398) *
               C28878 +
           (C91732 * C16565 + C93815 * C16883 + C91722 * C16566 +
            C93590 * C16884) *
               C28721) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C28876 +
           (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
               C28719 +
           (C30513 + C30514) * C28877 + (C30789 + C30790) * C28720 +
           C30525 * C28878 + C30795 * C28721) *
              C93680 * C1382 -
          ((C30793 + C30794) * C28721 + (C30523 + C30524) * C28878 +
           (C30792 + C30791) * C28720 + (C30518 + C30517) * C28877 +
           (C30790 + C30789) * C28719 + (C30514 + C30513) * C28876) *
              C93680 * C1383 +
          (C30525 * C28876 + C30795 * C28719 + (C30524 + C30523) * C28877 +
           (C30794 + C30793) * C28720 +
           (C91732 * C30188 + C93815 * C30190 + C91722 * C30189 +
            C93590 * C30191) *
               C28878 +
           (C91732 * C30408 + C93815 * C30774 + C91722 * C30409 +
            C93590 * C30775) *
               C28721) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C188 * C108 + C93680 * C189) * C275 +
                (C188 * C276 + C93680 * C635) * C93706) *
                   C89 +
               (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                  C93639 * C93625 * C97 -
              ((C661 + C653) * C92 + (C660 + C648) * C91 + (C659 + C645) * C90 +
               (C658 + C642) * C89) *
                  C93639 * C93625 * C98 +
              (C662 * C89 + C663 * C90 + (C653 + C661) * C91 +
               ((C188 * C113 + C93680 * C194) * C275 +
                (C188 * C281 + C93680 * C640) * C93706) *
                   C92) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C188 * C108 + C93680 * C189) * C275 +
                (C188 * C276 + C93680 * C635) * C93706) *
                   C89 +
               (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                  C93639 * C800 -
              (((C188 * C952 + C93680 * C1258) * C93706 +
                (C188 * C804 + C93680 * C886) * C275) *
                   C92 +
               ((C188 * C953 + C93680 * C1259) * C93706 +
                (C188 * C805 + C93680 * C887) * C275) *
                   C91 +
               ((C188 * C954 + C93680 * C1260) * C93706 +
                (C188 * C806 + C93680 * C888) * C275) *
                   C90 +
               ((C188 * C955 + C93680 * C1261) * C93706 +
                (C188 * C807 + C93680 * C889) * C275) *
                   C89) *
                  C93639 * C801 +
              (((C188 * C808 + C93680 * C890) * C275 +
                (C188 * C956 + C93680 * C1262) * C93706) *
                   C89 +
               ((C188 * C809 + C93680 * C891) * C275 +
                (C188 * C957 + C93680 * C1263) * C93706) *
                   C90 +
               ((C188 * C810 + C93680 * C892) * C275 +
                (C188 * C958 + C93680 * C1264) * C93706) *
                   C91 +
               ((C188 * C811 + C93680 * C893) * C275 +
                (C188 * C959 + C93680 * C1265) * C93706) *
                   C92) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C275 +
            (C188 * C276 + C93680 * C635) * C93706) *
               C89 +
           (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
              C1382 -
          (((C188 * C1533 + C93680 * C1839) * C93706 +
            (C188 * C1385 + C93680 * C1467) * C275) *
               C92 +
           ((C188 * C1534 + C93680 * C1840) * C93706 +
            (C188 * C1386 + C93680 * C1468) * C275) *
               C91 +
           ((C188 * C1535 + C93680 * C1841) * C93706 +
            (C188 * C1387 + C93680 * C1469) * C275) *
               C90 +
           ((C188 * C1536 + C93680 * C1842) * C93706 +
            (C188 * C1388 + C93680 * C1470) * C275) *
               C89) *
              C1383 +
          (((C188 * C1389 + C93680 * C1471) * C275 +
            (C188 * C1537 + C93680 * C1843) * C93706) *
               C89 +
           ((C188 * C1390 + C93680 * C1472) * C275 +
            (C188 * C1538 + C93680 * C1844) * C93706) *
               C90 +
           ((C188 * C1391 + C93680 * C1473) * C275 +
            (C188 * C1539 + C93680 * C1845) * C93706) *
               C91 +
           ((C188 * C1392 + C93680 * C1474) * C275 +
            (C188 * C1540 + C93680 * C1846) * C93706) *
               C92) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C275 +
            (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
             C14840 * C956 + C14741 * C1262) *
                C93706) *
               C93815 +
           ((C14866 + C14867 + C14868) * C275 +
            (C15391 + C15392 + C15393) * C93706) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C15394 + C15395 + C15396) * C93706 +
            (C14875 + C14876 + C14877) * C275) *
               C93590 +
           ((C15393 + C15392 + C15391) * C93706 +
            (C14868 + C14867 + C14866) * C275) *
               C93815) *
              C93639 * C93625 * C98 +
          (((C14877 + C14876 + C14875) * C275 +
            (C15396 + C15395 + C15394) * C93706) *
               C93815 +
           ((C14838 * C111 + C14739 * C192 + C14839 * C804 + C14740 * C886 +
             C14840 * C811 + C14741 * C893) *
                C275 +
            (C14838 * C279 + C14739 * C638 + C14839 * C952 + C14740 * C1258 +
             C14840 * C959 + C14741 * C1265) *
                C93706) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C275 +
            (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
             C14840 * C956 + C14741 * C1262) *
                C93706) *
               C93815 +
           ((C14866 + C14867 + C14868) * C275 +
            (C15391 + C15392 + C15393) * C93706) *
               C93590) *
              C93639 * C800 -
          (((C14840 * C5097 + C14741 * C5599 + C14839 * C957 + C14740 * C1263 +
             C14838 * C954 + C14739 * C1260) *
                C93706 +
            (C14840 * C4898 + C14741 * C5017 + C14839 * C809 + C14740 * C891 +
             C14838 * C806 + C14739 * C888) *
                C275) *
               C93590 +
           ((C14840 * C5096 + C14741 * C5598 + C14839 * C956 + C14740 * C1262 +
             C14838 * C955 + C14739 * C1261) *
                C93706 +
            (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
             C14838 * C807 + C14739 * C889) *
                C275) *
               C93815) *
              C93639 * C801 +
          (((C14838 * C808 + C14739 * C890 + C14839 * C4897 + C14740 * C5016 +
             C14840 * C15550 + C14741 * C15666) *
                C275 +
            (C14838 * C956 + C14739 * C1262 + C14839 * C5096 + C14740 * C5598 +
             C14840 * C15744 + C14741 * C16231) *
                C93706) *
               C93815 +
           ((C14838 * C809 + C14739 * C891 + C14839 * C4898 + C14740 * C5017 +
             C14840 * C15551 + C14741 * C15667) *
                C275 +
            (C14838 * C957 + C14739 * C1263 + C14839 * C5097 + C14740 * C5599 +
             C14840 * C15745 + C14741 * C16232) *
                C93706) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C275 +
            (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
             C14840 * C956 + C14741 * C1262) *
                C93706) *
               C93815 +
           ((C14866 + C14867 + C14868) * C275 +
            (C15391 + C15392 + C15393) * C93706) *
               C93590) *
              C1382 -
          (((C14840 * C8750 + C14741 * C9306 + C14839 * C3566 + C14740 * C3924 +
             C14838 * C1535 + C14739 * C1841) *
                C93706 +
            (C14840 * C8521 + C14741 * C8646 + C14839 * C3410 + C14740 * C3492 +
             C14838 * C1387 + C14739 * C1469) *
                C275) *
               C93590 +
           ((C14840 * C8749 + C14741 * C9305 + C14839 * C3565 + C14740 * C3923 +
             C14838 * C1536 + C14739 * C1842) *
                C93706 +
            (C14840 * C8520 + C14741 * C8645 + C14839 * C3409 + C14740 * C3491 +
             C14838 * C1388 + C14739 * C1470) *
                C275) *
               C93815) *
              C1383 +
          (((C14838 * C1389 + C14739 * C1471 + C14839 * C5775 + C14740 * C5870 +
             C14840 * C16395 + C14741 * C16487) *
                C275 +
            (C14838 * C1537 + C14739 * C1843 + C14839 * C5950 + C14740 * C6350 +
             C14840 * C16565 + C14741 * C16959) *
                C93706) *
               C93815 +
           ((C14838 * C1390 + C14739 * C1472 + C14839 * C5776 + C14740 * C5871 +
             C14840 * C16396 + C14741 * C16488) *
                C275 +
            (C14838 * C1538 + C14739 * C1844 + C14839 * C5951 + C14740 * C6351 +
             C14840 * C16566 + C14741 * C16960) *
                C93706) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C28876 +
            (C188 * C276 + C93680 * C635) * C28719 + C11107 * C28877 +
            C11679 * C28720 + C11114 * C28878 + C11682 * C28721) *
               C93815 +
           (C29304 + C29305 + C29306 + C29307 + C29308 + C29309) * C93590) *
              C93639 * C93625 * C97 -
          ((C29310 + C29311 + C29312 + C29313 + C29314 + C29315) * C93590 +
           (C29309 + C29308 + C29307 + C29306 + C29305 + C29304) * C93815) *
              C93639 * C93625 * C98 +
          ((C29315 + C29314 + C29313 + C29312 + C29311 + C29310) * C93815 +
           (C222 * C28876 + C656 * C28719 + C2786 * C28877 + C3252 * C28720 +
            (C188 * C1392 + C93680 * C1474) * C28878 +
            (C188 * C1540 + C93680 * C1846) * C28721) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C28876 +
            (C188 * C276 + C93680 * C635) * C28719 + C11107 * C28877 +
            C11679 * C28720 + C11114 * C28878 + C11682 * C28721) *
               C93815 +
           (C29304 + C29305 + C29306 + C29307 + C29308 + C29309) * C93590) *
              C93639 * C800 -
          (((C188 * C5951 + C93680 * C6351) * C28721 +
            (C188 * C5776 + C93680 * C5871) * C28878 + C12625 * C28720 +
            C11979 * C28877 + C2540 * C28719 + C2076 * C28876) *
               C93590 +
           ((C188 * C5950 + C93680 * C6350) * C28721 +
            (C188 * C5775 + C93680 * C5870) * C28878 + C14559 * C28720 +
            C13954 * C28877 + (C188 * C955 + C93680 * C1261) * C28719 +
            (C188 * C807 + C93680 * C889) * C28876) *
               C93815) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C28876 +
            (C188 * C956 + C93680 * C1262) * C28719 +
            (C188 * C8520 + C93680 * C8645) * C28877 +
            (C188 * C8749 + C93680 * C9305) * C28720 +
            (C188 * C16395 + C93680 * C16487) * C28878 +
            (C188 * C16565 + C93680 * C16959) * C28721) *
               C93815 +
           ((C188 * C809 + C93680 * C891) * C28876 +
            (C188 * C957 + C93680 * C1263) * C28719 +
            (C188 * C8521 + C93680 * C8646) * C28877 +
            (C188 * C8750 + C93680 * C9306) * C28720 +
            (C188 * C16396 + C93680 * C16488) * C28878 +
            (C188 * C16566 + C93680 * C16960) * C28721) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C28876 +
            (C188 * C276 + C93680 * C635) * C28719 + C11107 * C28877 +
            C11679 * C28720 + C11114 * C28878 + C11682 * C28721) *
               C93815 +
           (C29304 + C29305 + C29306 + C29307 + C29308 + C29309) * C93590) *
              C1382 -
          ((C30876 * C28721 + C30326 * C28878 + C11681 * C28720 +
            C11112 * C28877 + C3254 * C28719 + C2790 * C28876) *
               C93590 +
           (C30877 * C28721 + C30328 * C28878 + C11682 * C28720 +
            C11114 * C28877 + C11679 * C28719 + C11107 * C28876) *
               C93815) *
              C1383 +
          ((C11114 * C28876 + C11682 * C28719 + C30328 * C28877 +
            C30877 * C28720 + (C188 * C30188 + C93680 * C30303) * C28878 +
            (C188 * C30408 + C93680 * C30869) * C28721) *
               C93815 +
           (C11112 * C28876 + C11681 * C28719 + C30326 * C28877 +
            C30876 * C28720 + (C188 * C30189 + C93680 * C30304) * C28878 +
            (C188 * C30409 + C93680 * C30870) * C28721) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
               C747 * C90 + C748 * C91 + C749 * C92) *
                  C93639 * C93625 * C97 -
              (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C93639 *
                  C93625 * C98 +
              (C748 * C89 + C749 * C90 + C750 * C91 +
               (C713 * C113 + C734 + C734 + C93706 * C719) * C93680 * C92) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
               C747 * C90 + C748 * C91 + C749 * C92) *
                  C93639 * C800 -
              ((C713 * C804 + C1325 + C1325 + C93706 * C1316) * C93680 * C92 +
               (C713 * C805 + C1326 + C1326 + C93706 * C1317) * C93680 * C91 +
               (C713 * C806 + C1327 + C1327 + C93706 * C1318) * C93680 * C90 +
               (C713 * C807 + C1328 + C1328 + C93706 * C1319) * C93680 * C89) *
                  C93639 * C801 +
              ((C713 * C808 + C1329 + C1329 + C93706 * C1320) * C93680 * C89 +
               (C713 * C809 + C1330 + C1330 + C93706 * C1321) * C93680 * C90 +
               (C713 * C810 + C1331 + C1331 + C93706 * C1322) * C93680 * C91 +
               (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C93680 * C92) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C1382 -
          ((C713 * C1385 + C1906 + C1906 + C93706 * C1897) * C93680 * C92 +
           (C713 * C1386 + C1907 + C1907 + C93706 * C1898) * C93680 * C91 +
           (C713 * C1387 + C1908 + C1908 + C93706 * C1899) * C93680 * C90 +
           (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93680 * C89) *
              C1383 +
          ((C713 * C1389 + C1910 + C1910 + C93706 * C1901) * C93680 * C89 +
           (C713 * C1390 + C1911 + C1911 + C93706 * C1902) * C93680 * C90 +
           (C713 * C1391 + C1912 + C1912 + C93706 * C1903) * C93680 * C91 +
           (C713 * C1392 + C1913 + C1913 + C93706 * C1904) * C93680 * C92) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
            C5698 * C14740 + C5701 * C14741) *
               C93815 +
           (C15471 + C15472 + C15473) * C93590) *
              C93639 * C93625 * C97 -
          ((C15474 + C15475 + C15476) * C93590 +
           (C15473 + C15472 + C15471) * C93815) *
              C93639 * C93625 * C98 +
          ((C15476 + C15475 + C15474) * C93815 +
           (C745 * C14739 + C2624 * C14740 +
            (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C14741) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
            C5698 * C14740 + C5701 * C14741) *
               C93815 +
           (C15471 + C15472 + C15473) * C93590) *
              C93639 * C800 -
          ((C16320 * C14741 + C5700 * C14740 + C2626 * C14739) * C93590 +
           (C16321 * C14741 + C5701 * C14740 + C5698 * C14739) * C93815) *
              C93639 * C801 +
          ((C5701 * C14739 + C16321 * C14740 +
            (C713 * C15550 + C16314 + C16314 + C93706 * C16307) * C14741) *
               C93815 +
           (C5700 * C14739 + C16320 * C14740 +
            (C713 * C15551 + C16315 + C16315 + C93706 * C16308) * C14741) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
            C5698 * C14740 + C5701 * C14741) *
               C93815 +
           (C15471 + C15472 + C15473) * C93590) *
              C1382 -
          (((C713 * C8521 + C9413 + C9413 + C93706 * C9407) * C14741 +
            C8420 * C14740 + C3340 * C14739) *
               C93590 +
           ((C713 * C8520 + C9412 + C9412 + C93706 * C9406) * C14741 +
            C9417 * C14740 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C14739) *
               C93815) *
              C1383 +
          (((C713 * C1389 + C1910 + C1910 + C93706 * C1901) * C14739 +
            (C713 * C5775 + C6431 + C6431 + C93706 * C6427) * C14740 +
            (C713 * C16395 + C17038 + C17038 + C93706 * C17035) * C14741) *
               C93815 +
           ((C713 * C1390 + C1911 + C1911 + C93706 * C1902) * C14739 +
            (C713 * C5776 + C6432 + C6432 + C93706 * C6428) * C14740 +
            (C713 * C16396 + C17039 + C17039 + C93706 * C17036) * C14741) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
            C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
            C29395 + C28721 * C1901) *
               C93680 * C93815 +
           (C29429 + C29430 + C29431) * C93680 * C93590) *
              C93639 * C93625 * C97 -
          ((C29432 + C29433 + C29434) * C93680 * C93590 +
           (C29431 + C29430 + C29429) * C93680 * C93815) *
              C93639 * C93625 * C98 +
          ((C29434 + C29433 + C29432) * C93680 * C93815 +
           (C29389 * C111 + C29414 + C29414 + C28719 * C717 + C29390 * C1385 +
            C29415 + C29415 + C28720 * C1897 + C29391 * C1392 + C29416 +
            C29416 + C28721 * C1904) *
               C93680 * C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
            C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
            C29395 + C28721 * C1901) *
               C93680 * C93815 +
           (C29429 + C29430 + C29431) * C93680 * C93590) *
              C93639 * C800 -
          ((C29391 * C5776 + C30103 + C30103 + C28721 * C6428 + C29390 * C3410 +
            C30104 + C30104 + C28720 * C3994 + C29389 * C806 + C30105 + C30105 +
            C28719 * C1318) *
               C93680 * C93590 +
           (C29391 * C5775 + C30106 + C30106 + C28721 * C6427 + C29390 * C3409 +
            C30107 + C30107 + C28720 * C3993 + C29389 * C807 + C30108 + C30108 +
            C28719 * C1319) *
               C93680 * C93815) *
              C93639 * C801 +
          ((C29389 * C808 + C30109 + C30109 + C28719 * C1320 + C29390 * C8520 +
            C30110 + C30110 + C28720 * C9406 + C29391 * C16395 + C30111 +
            C30111 + C28721 * C17035) *
               C93680 * C93815 +
           (C29389 * C809 + C30112 + C30112 + C28719 * C1321 + C29390 * C8521 +
            C30113 + C30113 + C28720 * C9407 + C29391 * C16396 + C30114 +
            C30114 + C28721 * C17036) *
               C93680 * C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
            C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
            C29395 + C28721 * C1901) *
               C93680 * C93815 +
           (C29429 + C29430 + C29431) * C93680 * C93590) *
              C1382 -
          ((C29391 * C10965 + C30954 + C30954 + C28721 * C11757 +
            C29390 * C1390 + C30955 + C30955 + C28720 * C1902 + C29389 * C1387 +
            C30956 + C30956 + C28719 * C1899) *
               C93680 * C93590 +
           (C29391 * C10964 + C30957 + C30957 + C28721 * C11756 +
            C29390 * C1389 + C30958 + C30958 + C28720 * C1901 + C29389 * C1388 +
            C30959 + C30959 + C28719 * C1900) *
               C93680 * C93815) *
              C1383 +
          ((C29389 * C1389 + C30960 + C30960 + C28719 * C1901 +
            C29390 * C10964 + C30961 + C30961 + C28720 * C11756 +
            C29391 * C30188 + C30962 + C30962 + C28721 * C30951) *
               C93680 * C93815 +
           (C29389 * C1390 + C30963 + C30963 + C28719 * C1902 +
            C29390 * C10965 + C30964 + C30964 + C28720 * C11757 +
            C29391 * C30189 + C30965 + C30965 + C28721 * C30952) *
               C93680 * C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
             C14748 + C14748 + C93590 * C121) *
                C93706 * C14739 +
            (C15585 + C15586) * C93706 * C14740 + C15592 * C14741) *
               C2695 -
           ((C14744 * C8521 + C16402 + C16402 + C93590 * C8527 +
             C14742 * C8520 + C16403 + C16403 + C93815 * C8526) *
                C93706 * C14741 +
            (C14744 * C3410 + C16404 + C16404 + C93590 * C3418 +
             C14742 * C3409 + C16405 + C16405 + C93815 * C3417) *
                C93706 * C14740 +
            (C14744 * C1387 + C16406 + C16406 + C93590 * C1403 +
             C14742 * C1388 + C16407 + C16407 + C93815 * C1404) *
                C93706 * C14739) *
               C2696) *
              C93625 * C1981 +
          (((C14742 * C1387 + C18140 + C18140 + C93815 * C1403 +
             C14744 * C1386 + C18141 + C18141 + C93590 * C1402) *
                C93706 * C14739 +
            (C14742 * C3410 + C18142 + C18142 + C93815 * C3418 +
             C14744 * C3411 + C18143 + C18143 + C93590 * C3419) *
                C93706 * C14740 +
            (C14742 * C8521 + C18144 + C18144 + C93815 * C8527 +
             C14744 * C8522 + C18145 + C18145 + C93590 * C8528) *
                C93706 * C14741) *
               C2696 -
           ((C17159 + C17158) * C93706 * C14741 +
            (C17157 + C17156) * C93706 * C14740 +
            (C14744 * C110 + C14757 + C14757 + C93590 * C122 + C14742 * C109 +
             C14758 + C14758 + C93815 * C121) *
                C93706 * C14739) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C93706 * C93680 * C2695 -
           (C106 * C1385 + C1410 + C1410 + C92 * C1401 + C104 * C1386 + C1411 +
            C1411 + C91 * C1402 + C102 * C1387 + C1412 + C1412 + C90 * C1403 +
            C100 * C1388 + C1413 + C1413 + C89 * C1404) *
               C93706 * C93680 * C2696) *
              C93625 * C1981 +
          ((C100 * C1387 + C2701 + C2701 + C89 * C1403 + C102 * C1386 + C2702 +
            C2702 + C90 * C1402 + C104 * C1385 + C2703 + C2703 + C91 * C1401 +
            C106 * C2697 + C2704 + C2704 + C92 * C2699) *
               C93706 * C93680 * C2696 -
           (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 + C132 + C132 +
            C91 * C123 + C102 * C110 + C133 + C133 + C90 * C122 + C100 * C109 +
            C134 + C134 + C89 * C121) *
               C93706 * C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
             C14748 + C14748 + C93590 * C121) *
                C28719 +
            (C30223 + C30224) * C28720 + C30229 * C28721) *
               C93680 * C2695 -
           ((C30227 + C30228) * C28721 + (C30226 + C30225) * C28720 +
            (C30224 + C30223) * C28719) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C32031 + C32032) * C28719 + (C32033 + C32034) * C28720 +
            (C14742 * C10965 + C32021 + C32021 + C93815 * C10971 +
             C14744 * C10966 + C32022 + C32022 + C93590 * C10972) *
                C28721) *
               C93680 * C2696 -
           ((C32034 + C32033) * C28721 + (C32032 + C32031) * C28720 +
            (C14744 * C110 + C14757 + C14757 + C93590 * C122 + C14742 * C109 +
             C14758 + C14758 + C93815 * C121) *
                C28719) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C91732 +
            (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
             C14840 * C816 + C14741 * C898) *
                C93815 +
            (C14866 + C14867 + C14868) * C91722 +
            (C14869 + C14870 + C14871) * C93590) *
               C93706 * C2695 -
           ((C18256 + C18257 + C18258) * C93590 +
            (C18259 + C18260 + C18261) * C91722 +
            (C14840 * C8523 + C14741 * C8648 + C14839 * C3413 + C14740 * C3495 +
             C14838 * C1396 + C14739 * C1478) *
                C93815 +
            (C14840 * C8520 + C14741 * C8645 + C14839 * C3409 + C14740 * C3491 +
             C14838 * C1388 + C14739 * C1470) *
                C91732) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C18261 + C18260 + C18259) * C91732 +
            (C18258 + C18257 + C18256) * C93815 +
            (C14838 * C1386 + C14739 * C1468 + C14839 * C3411 + C14740 * C3493 +
             C14840 * C8522 + C14741 * C8647) *
                C91722 +
            (C14838 * C1394 + C14739 * C1476 + C14839 * C3415 + C14740 * C3497 +
             C14840 * C8525 + C14741 * C8650) *
                C93590) *
               C93706 * C2696 -
           ((C14872 + C14873 + C14874) * C93590 +
            (C14875 + C14876 + C14877) * C91722 +
            (C14871 + C14870 + C14869) * C93815 +
            (C14868 + C14867 + C14866) * C91732) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C101 +
            (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C93706 * C2695 -
           (C2785 * C92 + C2786 * C107 + C2787 * C91 + C2788 * C105 +
            C2789 * C90 + C2790 * C103 + (C188 * C1396 + C93680 * C1478) * C89 +
            (C188 * C1388 + C93680 * C1470) * C101) *
               C93706 * C2696) *
              C93625 * C1981 +
          ((C2790 * C101 + C2789 * C89 + C2788 * C103 + C2787 * C90 +
            C2786 * C105 + C2785 * C91 +
            (C188 * C2697 + C93680 * C2770) * C107 +
            (C188 * C2698 + C93680 * C2771) * C92) *
               C93706 * C2696 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C91732 +
             (C188 * C114 + C93680 * C195) * C93815 + C218 * C91722 +
             C219 * C93590) *
                C28719 +
            (C30308 + C30309 + C30310 + C30311) * C28720 + C30334 * C28721) *
               C2695 -
           ((C30330 + C30331 + C30332 + C30333) * C28721 +
            (C30315 + C30314 + C30313 + C30312) * C28720 +
            (C30311 + C30310 + C30309 + C30308) * C28719) *
               C2696) *
              C93625 * C1981 +
          (((C32133 + C32134 + C32135 + C32136) * C28719 +
            (C32137 + C32138 + C32139 + C32140) * C28720 +
            (C30326 * C91732 + C30325 * C93815 +
             (C188 * C10966 + C93680 * C11082) * C91722 +
             (C188 * C10969 + C93680 * C11085) * C93590) *
                C28721) *
               C2696 -
           ((C32140 + C32139 + C32138 + C32137) * C28721 +
            (C32136 + C32135 + C32134 + C32133) * C28720 +
            (C221 * C93590 + C220 * C91722 + C219 * C93815 + C218 * C91732) *
                C28719) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C91732 +
             (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
             C306 * C93590) *
                C14739 +
            (C15749 + C15750 + C15751 + C15752) * C14740 + C15775 * C14741) *
               C2695 -
           ((C18364 * C93590 + C18365 * C91722 +
             (C275 * C8523 + C93706 * C8752) * C93815 +
             (C275 * C8520 + C93706 * C8749) * C91732) *
                C14741 +
            (C7771 * C93590 + C7772 * C91722 + C8764 * C93815 +
             C8765 * C91732) *
                C14740 +
            (C2875 * C93590 + C2876 * C91722 +
             (C275 * C1396 + C93706 * C1544) * C93815 +
             (C275 * C1388 + C93706 * C1536) * C91732) *
                C14739) *
               C2696) *
              C93625 * C1981 +
          (((C2876 * C91732 + C2875 * C93815 + C2874 * C91722 +
             C2873 * C93590) *
                C14739 +
            (C7772 * C91732 + C7771 * C93815 + C7770 * C91722 +
             C7769 * C93590) *
                C14740 +
            (C18365 * C91732 + C18364 * C93815 +
             (C275 * C8522 + C93706 * C8751) * C91722 +
             (C275 * C8525 + C93706 * C8754) * C93590) *
                C14741) *
               C2696 -
           ((C17381 + C17380 + C17379 + C17378) * C14741 +
            (C17377 + C17376 + C17375 + C17374) * C14740 +
            (C308 * C93590 + C307 * C91722 + C306 * C93815 + C305 * C91732) *
                C14739) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C101 +
            (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C93680 * C2695 -
           (C2871 * C92 + C2872 * C107 + C2873 * C91 + C2874 * C105 +
            C2875 * C90 + C2876 * C103 + (C275 * C1396 + C93706 * C1544) * C89 +
            (C275 * C1388 + C93706 * C1536) * C101) *
               C93680 * C2696) *
              C93625 * C1981 +
          ((C2876 * C101 + C2875 * C89 + C2874 * C103 + C2873 * C90 +
            C2872 * C105 + C2871 * C91 +
            (C275 * C2697 + C93706 * C2856) * C107 +
            (C275 * C2698 + C93706 * C2857) * C92) *
               C93680 * C2696 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C91732 +
            (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
             C28878 * C1397 + C28721 * C1545) *
                C93815 +
            (C28904 + C28905 + C28906) * C91722 +
            (C28907 + C28908 + C28909) * C93590) *
               C93680 * C2695 -
           ((C32251 + C32252 + C32253) * C93590 +
            (C32254 + C32255 + C32256) * C91722 +
            (C28878 * C10967 + C28721 * C11199 + C28877 * C1397 +
             C28720 * C1545 + C28876 * C1396 + C28719 * C1544) *
                C93815 +
            (C28878 * C10964 + C28721 * C11196 + C28877 * C1389 +
             C28720 * C1537 + C28876 * C1388 + C28719 * C1536) *
                C91732) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C32256 + C32255 + C32254) * C91732 +
            (C32253 + C32252 + C32251) * C93815 +
            (C28876 * C1386 + C28719 * C1534 + C28877 * C1391 + C28720 * C1539 +
             C28878 * C10966 + C28721 * C11198) *
                C91722 +
            (C28876 * C1394 + C28719 * C1542 + C28877 * C1399 + C28720 * C1547 +
             C28878 * C10969 + C28721 * C11201) *
                C93590) *
               C93680 * C2696 -
           ((C28910 + C28911 + C28912) * C93590 +
            (C28913 + C28914 + C28915) * C91722 +
            (C28909 + C28908 + C28907) * C93815 +
            (C28906 + C28905 + C28904) * C91732) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C14838 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C14739 +
            (C15876 + C15877) * C14839 + (C15878 + C15879) * C14740 +
            C15888 * C14840 + C15889 * C14741) *
               C93706 * C2695 -
           ((C91722 * C8646 + C93590 * C8866 + C91732 * C8645 +
             C93815 * C8865) *
                C14741 +
            (C91722 * C8521 + C93590 * C8524 + C91732 * C8520 +
             C93815 * C8523) *
                C14840 +
            (C91722 * C3492 + C93590 * C3640 + C91732 * C3491 +
             C93815 * C3639) *
                C14740 +
            (C91722 * C3410 + C93590 * C3414 + C91732 * C3409 +
             C93815 * C3413) *
                C14839 +
            (C91722 * C1469 + C93590 * C1601 + C91732 * C1470 +
             C93815 * C1602) *
                C14739 +
            (C91722 * C1387 + C93590 * C1395 + C91732 * C1388 +
             C93815 * C1396) *
                C14838) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C91732 * C1387 + C93815 * C1395 + C91722 * C1386 +
             C93590 * C1394) *
                C14838 +
            (C91732 * C1469 + C93815 * C1601 + C91722 * C1468 +
             C93590 * C1600) *
                C14739 +
            (C91732 * C3410 + C93815 * C3414 + C91722 * C3411 +
             C93590 * C3415) *
                C14839 +
            (C91732 * C3492 + C93815 * C3640 + C91722 * C3493 +
             C93590 * C3641) *
                C14740 +
            (C91732 * C8521 + C93815 * C8524 + C91722 * C8522 +
             C93590 * C8525) *
                C14840 +
            (C91732 * C8646 + C93815 * C8866 + C91722 * C8647 +
             C93590 * C8867) *
                C14741) *
               C93706 * C2696 -
           ((C17503 + C17502) * C14741 + (C17501 + C17500) * C14840 +
            (C17499 + C17498) * C14740 + (C17497 + C17496) * C14839 +
            (C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
                C14739 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C14838) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C93680) *
               C93706 * C2695 -
           ((C107 * C1467 + C92 * C1599 + C105 * C1468 + C91 * C1600 +
             C103 * C1469 + C90 * C1601 + C101 * C1470 + C89 * C1602) *
                C93680 +
            (C107 * C1385 + C92 * C1393 + C105 * C1386 + C91 * C1394 +
             C103 * C1387 + C90 * C1395 + C101 * C1388 + C89 * C1396) *
                C188) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C101 * C1387 + C89 * C1395 + C103 * C1386 + C90 * C1394 +
             C105 * C1385 + C91 * C1393 + C107 * C2697 + C92 * C2698) *
                C188 +
            (C101 * C1469 + C89 * C1601 + C103 * C1468 + C90 * C1600 +
             C105 * C1467 + C91 * C1599 + C107 * C2770 + C92 * C2942) *
                C93680) *
               C93706 * C2696 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C93680 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C188 +
             (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                 C93680) *
                C28719 +
            ((C30513 + C30514) * C188 + (C30515 + C30516) * C93680) * C28720 +
            C30529 * C28721) *
               C2695 -
           (((C30521 + C30522) * C93680 + (C30523 + C30524) * C188) * C28721 +
            ((C30520 + C30519) * C93680 + (C30518 + C30517) * C188) * C28720 +
            ((C30516 + C30515) * C93680 + (C30514 + C30513) * C188) * C28719) *
               C2696) *
              C93625 * C1981 +
          ((((C32371 + C32372) * C188 + (C32373 + C32374) * C93680) * C28719 +
            ((C32375 + C32376) * C188 + (C32377 + C32378) * C93680) * C28720 +
            ((C91732 * C10965 + C93815 * C10968 + C91722 * C10966 +
              C93590 * C10969) *
                 C188 +
             (C91732 * C11081 + C93815 * C11277 + C91722 * C11082 +
              C93590 * C11278) *
                 C93680) *
                C28721) *
               C2696 -
           (((C32378 + C32377) * C93680 + (C32376 + C32375) * C188) * C28721 +
            ((C32374 + C32373) * C93680 + (C32372 + C32371) * C188) * C28720 +
            ((C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
                 C93680 +
             (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                 C188) *
                C28719) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
             C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 +
             C15105 + C14741 * C1080) *
                C93815 +
            (C15139 + C15140 + C15141) * C93590) *
               C93706 * C2695 -
           ((C18577 + C18578 + C18579) * C93590 +
            (C15101 * C8520 + C16725 + C16725 + C14741 * C8984 +
             C15100 * C3409 + C16726 + C16726 + C14740 * C3709 +
             C15099 * C1388 + C16727 + C16727 + C14739 * C1660) *
                C93815) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C18579 + C18578 + C18577) * C93815 +
            (C15099 * C1386 + C18568 + C18568 + C14739 * C1658 +
             C15100 * C3411 + C18569 + C18569 + C14740 * C3711 +
             C15101 * C8522 + C18570 + C18570 + C14741 * C8986) *
                C93590) *
               C93706 * C2696 -
           ((C15142 + C15143 + C15144) * C93590 +
            (C15141 + C15140 + C15139) * C93815) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C93706 * C2695 -
           (C3024 * C92 + C3025 * C91 + C3026 * C90 +
            (C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C89) *
               C93706 * C2696) *
              C93625 * C1981 +
          ((C3026 * C89 + C3025 * C90 + C3024 * C91 +
            (C418 * C2697 + C3017 + C3017 + C93680 * C3009) * C92) *
               C93706 * C2696 -
           (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C93706 *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C93815 +
             C448 * C93590) *
                C28719 +
            (C30606 + C30607) * C28720 + C30616 * C28721) *
               C2695 -
           ((C30623 + C30624) * C28721 + (C30609 + C30608) * C28720 +
            (C30607 + C30606) * C28719) *
               C2696) *
              C93625 * C1981 +
          (((C32477 + C32478) * C28719 + (C32479 + C32480) * C28720 +
            (C30621 * C93815 +
             (C418 * C10966 + C11405 + C11405 + C93680 * C11391) * C93590) *
                C28721) *
               C2696 -
           ((C32480 + C32479) * C28721 + (C32478 + C32477) * C28720 +
            (C449 * C93590 + C448 * C93815) * C28719) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C14838 +
             (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
             C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
                C93815 +
            (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
               C2695 -
           ((C18686 + C18680 + C18681 + C18682 + C18683 + C18684) * C93590 +
            ((C275 * C8645 + C93706 * C9091) * C14741 +
             (C275 * C8520 + C93706 * C8749) * C14840 + C9097 * C14740 +
             C8765 * C14839 + (C275 * C1470 + C93706 * C1726) * C14739 +
             (C275 * C1388 + C93706 * C1536) * C14838) *
                C93815) *
               C2696) *
              C93625 * C1981 +
          (((C18684 + C18683 + C18682 + C18681 + C18680 + C18686) * C93815 +
            (C2874 * C14838 + C3104 * C14739 + C7770 * C14839 + C8099 * C14740 +
             (C275 * C8522 + C93706 * C8751) * C14840 +
             (C275 * C8647 + C93706 * C9093) * C14741) *
                C93590) *
               C2696 -
           ((C15225 + C15226 + C15227 + C15228 + C15229 + C15230) * C93590 +
            (C15224 + C15223 + C15222 + C15221 + C15220 + C15219) * C93815) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C188 +
             (C275 * C189 + C93706 * C501) * C93680) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C2695 -
           ((C3106 + C3096) * C92 + (C3107 + C3099) * C91 +
            (C3108 + C3102) * C90 +
            ((C275 * C1470 + C93706 * C1726) * C93680 +
             (C275 * C1388 + C93706 * C1536) * C188) *
                C89) *
               C2696) *
              C93625 * C1981 +
          (((C3102 + C3108) * C89 + (C3099 + C3107) * C90 +
            (C3096 + C3106) * C91 +
            ((C275 * C2697 + C93706 * C2856) * C188 +
             (C275 * C2770 + C93706 * C3092) * C93680) *
                C92) *
               C2696 -
           ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
            (C524 + C508) * C89) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
              C28878 * C1389 + C28721 * C1537) *
                 C188 +
             (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
              C28878 * C1471 + C28721 * C1727) *
                 C93680) *
                C93815 +
            ((C28904 + C28905 + C28906) * C188 +
             (C29150 + C29151 + C29152) * C93680) *
                C93590) *
               C2695 -
           (((C32585 + C32586 + C32587) * C93680 +
             (C32254 + C32255 + C32256) * C188) *
                C93590 +
            ((C28878 * C11080 + C28721 * C11495 + C28877 * C1471 +
              C28720 * C1727 + C28876 * C1470 + C28719 * C1726) *
                 C93680 +
             (C28878 * C10964 + C28721 * C11196 + C28877 * C1389 +
              C28720 * C1537 + C28876 * C1388 + C28719 * C1536) *
                 C188) *
                C93815) *
               C2696) *
              C93625 * C1981 +
          ((((C32256 + C32255 + C32254) * C188 +
             (C32587 + C32586 + C32585) * C93680) *
                C93815 +
            ((C28876 * C1386 + C28719 * C1534 + C28877 * C1391 +
              C28720 * C1539 + C28878 * C10966 + C28721 * C11198) *
                 C188 +
             (C28876 * C1468 + C28719 * C1724 + C28877 * C1473 +
              C28720 * C1729 + C28878 * C11082 + C28721 * C11497) *
                 C93680) *
                C93590) *
               C2696 -
           (((C29153 + C29154 + C29155) * C93680 +
             (C28913 + C28914 + C28915) * C188) *
                C93590 +
            ((C29152 + C29151 + C29150) * C93680 +
             (C28906 + C28905 + C28904) * C188) *
                C93815) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C275 +
             (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                 C93706) *
                C14739 +
            ((C15876 + C15877) * C275 + (C16149 + C16150) * C93706) * C14740 +
            C16157 * C14741) *
               C2695 -
           (((C91722 * C8750 + C93590 * C9196 + C91732 * C8749 +
              C93815 * C9195) *
                 C93706 +
             (C91722 * C8521 + C93590 * C8524 + C91732 * C8520 +
              C93815 * C8523) *
                 C275) *
                C14741 +
            ((C91722 * C3566 + C93590 * C3854 + C91732 * C3565 +
              C93815 * C3853) *
                 C93706 +
             (C91722 * C3410 + C93590 * C3414 + C91732 * C3409 +
              C93815 * C3413) *
                 C275) *
                C14740 +
            ((C91722 * C1535 + C93590 * C1783 + C91732 * C1536 +
              C93815 * C1784) *
                 C93706 +
             (C91722 * C1387 + C93590 * C1395 + C91732 * C1388 +
              C93815 * C1396) *
                 C275) *
                C14739) *
               C2696) *
              C93625 * C1981 +
          ((((C91732 * C1387 + C93815 * C1395 + C91722 * C1386 +
              C93590 * C1394) *
                 C275 +
             (C91732 * C1535 + C93815 * C1783 + C91722 * C1534 +
              C93590 * C1782) *
                 C93706) *
                C14739 +
            ((C91732 * C3410 + C93815 * C3414 + C91722 * C3411 +
              C93590 * C3415) *
                 C275 +
             (C91732 * C3566 + C93815 * C3854 + C91722 * C3567 +
              C93590 * C3855) *
                 C93706) *
                C14740 +
            ((C91732 * C8521 + C93815 * C8524 + C91722 * C8522 +
              C93590 * C8525) *
                 C275 +
             (C91732 * C8750 + C93815 * C9196 + C91722 * C8751 +
              C93590 * C9197) *
                 C93706) *
                C14741) *
               C2696 -
           (((C17833 + C17832) * C93706 + (C17501 + C17500) * C275) * C14741 +
            ((C17831 + C17830) * C93706 + (C17497 + C17496) * C275) * C14740 +
            ((C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                 C93706 +
             (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                 C275) *
                C14739) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C93706) *
               C93680 * C2695 -
           ((C107 * C1533 + C92 * C1781 + C105 * C1534 + C91 * C1782 +
             C103 * C1535 + C90 * C1783 + C101 * C1536 + C89 * C1784) *
                C93706 +
            (C107 * C1385 + C92 * C1393 + C105 * C1386 + C91 * C1394 +
             C103 * C1387 + C90 * C1395 + C101 * C1388 + C89 * C1396) *
                C275) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C101 * C1387 + C89 * C1395 + C103 * C1386 + C90 * C1394 +
             C105 * C1385 + C91 * C1393 + C107 * C2697 + C92 * C2698) *
                C275 +
            (C101 * C1535 + C89 * C1783 + C103 * C1534 + C90 * C1782 +
             C105 * C1533 + C91 * C1781 + C107 * C2856 + C92 * C3174) *
                C93706) *
               C93680 * C2696 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C93706 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C28876 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C28719 +
            (C30513 + C30514) * C28877 + (C30789 + C30790) * C28720 +
            C30525 * C28878 + C30795 * C28721) *
               C93680 * C2695 -
           ((C30793 + C30794) * C28721 + (C30523 + C30524) * C28878 +
            (C30792 + C30791) * C28720 + (C30518 + C30517) * C28877 +
            (C30790 + C30789) * C28719 + (C30514 + C30513) * C28876) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C32371 + C32372) * C28876 + (C32694 + C32695) * C28719 +
            (C32375 + C32376) * C28877 + (C32696 + C32697) * C28720 +
            (C91732 * C10965 + C93815 * C10968 + C91722 * C10966 +
             C93590 * C10969) *
                C28878 +
            (C91732 * C11197 + C93815 * C11573 + C91722 * C11198 +
             C93590 * C11574) *
                C28721) *
               C93680 * C2696 -
           ((C32697 + C32696) * C28721 + (C32376 + C32375) * C28878 +
            (C32695 + C32694) * C28720 + (C32372 + C32371) * C28877 +
            (C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                C28719 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C28876) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
              C14840 * C808 + C14741 * C890) *
                 C275 +
             (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
              C14840 * C956 + C14741 * C1262) *
                 C93706) *
                C93815 +
            ((C14866 + C14867 + C14868) * C275 +
             (C15391 + C15392 + C15393) * C93706) *
                C93590) *
               C2695 -
           (((C18889 + C18890 + C18891) * C93706 +
             (C18259 + C18260 + C18261) * C275) *
                C93590 +
            ((C14840 * C8749 + C14741 * C9305 + C14839 * C3565 +
              C14740 * C3923 + C14838 * C1536 + C14739 * C1842) *
                 C93706 +
             (C14840 * C8520 + C14741 * C8645 + C14839 * C3409 +
              C14740 * C3491 + C14838 * C1388 + C14739 * C1470) *
                 C275) *
                C93815) *
               C2696) *
              C93625 * C1981 +
          ((((C18261 + C18260 + C18259) * C275 +
             (C18891 + C18890 + C18889) * C93706) *
                C93815 +
            ((C14838 * C1386 + C14739 * C1468 + C14839 * C3411 +
              C14740 * C3493 + C14840 * C8522 + C14741 * C8647) *
                 C275 +
             (C14838 * C1534 + C14739 * C1840 + C14839 * C3567 +
              C14740 * C3925 + C14840 * C8751 + C14741 * C9307) *
                 C93706) *
                C93590) *
               C2696 -
           (((C15394 + C15395 + C15396) * C93706 +
             (C14875 + C14876 + C14877) * C275) *
                C93590 +
            ((C15393 + C15392 + C15391) * C93706 +
             (C14868 + C14867 + C14866) * C275) *
                C93815) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C275 +
             (C188 * C276 + C93680 * C635) * C93706) *
                C89 +
            (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
               C2695 -
           ((C3255 + C3245) * C92 + (C3256 + C3248) * C91 +
            (C3257 + C3251) * C90 +
            ((C188 * C1536 + C93680 * C1842) * C93706 +
             (C188 * C1388 + C93680 * C1470) * C275) *
                C89) *
               C2696) *
              C93625 * C1981 +
          (((C3251 + C3257) * C89 + (C3248 + C3256) * C90 +
            (C3245 + C3255) * C91 +
            ((C188 * C2697 + C93680 * C2770) * C275 +
             (C188 * C2856 + C93680 * C3241) * C93706) *
                C92) *
               C2696 -
           ((C661 + C653) * C92 + (C660 + C648) * C91 + (C659 + C645) * C90 +
            (C658 + C642) * C89) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C28876 +
             (C188 * C276 + C93680 * C635) * C28719 + C11107 * C28877 +
             C11679 * C28720 + C11114 * C28878 + C11682 * C28721) *
                C93815 +
            (C29304 + C29305 + C29306 + C29307 + C29308 + C29309) * C93590) *
               C2695 -
           ((C32796 + C32797 + C32798 + C32799 + C32800 + C32801) * C93590 +
            (C30877 * C28721 + C30328 * C28878 + C11682 * C28720 +
             C11114 * C28877 + C11679 * C28719 + C11107 * C28876) *
                C93815) *
               C2696) *
              C93625 * C1981 +
          (((C32801 + C32800 + C32799 + C32798 + C32797 + C32796) * C93815 +
            (C2788 * C28876 + C3253 * C28719 + C11110 * C28877 +
             C11680 * C28720 + (C188 * C10966 + C93680 * C11082) * C28878 +
             (C188 * C11198 + C93680 * C11669) * C28721) *
                C93590) *
               C2696 -
           ((C29310 + C29311 + C29312 + C29313 + C29314 + C29315) * C93590 +
            (C29309 + C29308 + C29307 + C29306 + C29305 + C29304) * C93815) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
             C5698 * C14740 + C5701 * C14741) *
                C93815 +
            (C15471 + C15472 + C15473) * C93590) *
               C2695 -
           ((C18997 + C18992 + C18993) * C93590 +
            ((C713 * C8520 + C9412 + C9412 + C93706 * C9406) * C14741 +
             C9417 * C14740 +
             (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C14739) *
                C93815) *
               C2696) *
              C93625 * C1981 +
          (((C18993 + C18992 + C18997) * C93815 +
            (C3339 * C14739 + C8419 * C14740 +
             (C713 * C8522 + C9414 + C9414 + C93706 * C9408) * C14741) *
                C93590) *
               C2696 -
           ((C15474 + C15475 + C15476) * C93590 +
            (C15473 + C15472 + C15471) * C93815) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C2695 -
           (C3341 * C92 + C3342 * C91 + C3343 * C90 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93680 * C89) *
               C2696) *
              C93625 * C1981 +
          ((C3343 * C89 + C3342 * C90 + C3341 * C91 +
            (C713 * C2697 + C3331 + C3331 + C93706 * C3323) * C93680 * C92) *
               C2696 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
             C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
             C29395 + C28721 * C1901) *
                C93680 * C93815 +
            (C29429 + C29430 + C29431) * C93680 * C93590) *
               C2695 -
           ((C32915 + C32916 + C32917) * C93680 * C93590 +
            (C29391 * C10964 + C30957 + C30957 + C28721 * C11756 +
             C29390 * C1389 + C30958 + C30958 + C28720 * C1901 +
             C29389 * C1388 + C30959 + C30959 + C28719 * C1900) *
                C93680 * C93815) *
               C2696) *
              C93625 * C1981 +
          (((C32917 + C32916 + C32915) * C93680 * C93815 +
            (C29389 * C1386 + C32906 + C32906 + C28719 * C1898 +
             C29390 * C1391 + C32907 + C32907 + C28720 * C1903 +
             C29391 * C10966 + C32908 + C32908 + C28721 * C11758) *
                C93680 * C93590) *
               C2696 -
           ((C29432 + C29433 + C29434) * C93680 * C93590 +
            (C29431 + C29430 + C29429) * C93680 * C93815) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexx[34] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                     C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                     C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                        C93706 * C93680 * C93639 * C800 -
                    (C106 * C804 + C829 + C829 + C92 * C820 + C104 * C805 +
                     C830 + C830 + C91 * C821 + C102 * C806 + C831 + C831 +
                     C90 * C822 + C100 * C807 + C832 + C832 + C89 * C823) *
                        C93706 * C93680 * C93639 * C801 +
                    (C100 * C808 + C833 + C833 + C89 * C824 + C102 * C809 +
                     C834 + C834 + C90 * C825 + C104 * C810 + C835 + C835 +
                     C91 * C826 + C106 * C811 + C836 + C836 + C92 * C827) *
                        C93706 * C93680 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                     C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                     C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                        C93706 * C93680 * C93639 * C93625 * C97 -
                    (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                     C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                     C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                        C93706 * C93680 * C93639 * C93625 * C98 +
                    (C100 * C110 + C135 + C135 + C89 * C122 + C102 * C111 +
                     C136 + C136 + C90 * C123 + C104 * C112 + C137 + C137 +
                     C91 * C124 + C106 * C113 + C138 + C138 + C92 * C125) *
                        C93706 * C93680 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C14742 * C108 + C14747 + C14747 + C93815 * C120 +
                      C14744 * C109 + C14748 + C14748 + C93590 * C121) *
                         C93706 * C14739 +
                     (C14742 * C807 + C14749 + C14749 + C93815 * C823 +
                      C14744 * C806 + C14750 + C14750 + C93590 * C822) *
                         C93706 * C14740 +
                     (C14742 * C808 + C14751 + C14751 + C93815 * C824 +
                      C14744 * C809 + C14752 + C14752 + C93590 * C825) *
                         C93706 * C14741) *
                        C93639 * C93625 * C97 -
                    ((C14744 * C810 + C14753 + C14753 + C93590 * C826 +
                      C14742 * C809 + C14754 + C14754 + C93815 * C825) *
                         C93706 * C14741 +
                     (C14744 * C805 + C14755 + C14755 + C93590 * C821 +
                      C14742 * C806 + C14756 + C14756 + C93815 * C822) *
                         C93706 * C14740 +
                     (C14744 * C110 + C14757 + C14757 + C93590 * C122 +
                      C14742 * C109 + C14758 + C14758 + C93815 * C121) *
                         C93706 * C14739) *
                        C93639 * C93625 * C98 +
                    ((C14742 * C110 + C14759 + C14759 + C93815 * C122 +
                      C14744 * C111 + C14760 + C14760 + C93590 * C123) *
                         C93706 * C14739 +
                     (C14742 * C805 + C14761 + C14761 + C93815 * C821 +
                      C14744 * C804 + C14762 + C14762 + C93590 * C820) *
                         C93706 * C14740 +
                     (C14742 * C810 + C14763 + C14763 + C93815 * C826 +
                      C14744 * C811 + C14764 + C14764 + C93590 * C827) *
                         C93706 * C14741) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C14742 * C108 + C14747 + C14747 + C93815 * C120 +
                      C14744 * C109 + C14748 + C14748 + C93590 * C121) *
                         C93706 * C14739 +
                     (C15585 + C15586) * C93706 * C14740 + C15592 * C14741) *
                        C93639 * C800 -
                    ((C15589 + C15590) * C93706 * C14741 +
                     (C15588 + C15587) * C93706 * C14740 +
                     (C15586 + C15585) * C93706 * C14739) *
                        C93639 * C801 +
                    (C15592 * C14739 + (C15590 + C15589) * C93706 * C14740 +
                     (C14742 * C15550 + C15571 + C15571 + C93815 * C15554 +
                      C14744 * C15551 + C15572 + C15572 + C93590 * C15555) *
                         C93706 * C14741) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C14742 * C108 + C14747 + C14747 + C93815 * C120 +
                      C14744 * C109 + C14748 + C14748 + C93590 * C121) *
                         C28719 +
                     (C14742 * C1388 + C16407 + C16407 + C93815 * C1404 +
                      C14744 * C1387 + C16406 + C16406 + C93590 * C1403) *
                         C28720 +
                     (C14742 * C1389 + C16408 + C16408 + C93815 * C1405 +
                      C14744 * C1390 + C16409 + C16409 + C93590 * C1406) *
                         C28721) *
                        C93680 * C93639 * C93625 * C97 -
                    ((C14744 * C1391 + C28723 + C28723 + C93590 * C1407 +
                      C14742 * C1390 + C28724 + C28724 + C93815 * C1406) *
                         C28721 +
                     (C14744 * C1386 + C18141 + C18141 + C93590 * C1402 +
                      C14742 * C1387 + C18140 + C18140 + C93815 * C1403) *
                         C28720 +
                     (C14744 * C110 + C14757 + C14757 + C93590 * C122 +
                      C14742 * C109 + C14758 + C14758 + C93815 * C121) *
                         C28719) *
                        C93680 * C93639 * C93625 * C98 +
                    ((C14742 * C110 + C14759 + C14759 + C93815 * C122 +
                      C14744 * C111 + C14760 + C14760 + C93590 * C123) *
                         C28719 +
                     (C14742 * C1386 + C28725 + C28725 + C93815 * C1402 +
                      C14744 * C1385 + C28726 + C28726 + C93590 * C1401) *
                         C28720 +
                     (C14742 * C1391 + C28727 + C28727 + C93815 * C1407 +
                      C14744 * C1392 + C28728 + C28728 + C93590 * C1408) *
                         C28721) *
                        C93680 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C14742 * C108 + C14747 + C14747 + C93815 * C120 +
                      C14744 * C109 + C14748 + C14748 + C93590 * C121) *
                         C28719 +
                     (C14742 * C1388 + C16407 + C16407 + C93815 * C1404 +
                      C14744 * C1387 + C16406 + C16406 + C93590 * C1403) *
                         C28720 +
                     (C14742 * C1389 + C16408 + C16408 + C93815 * C1405 +
                      C14744 * C1390 + C16409 + C16409 + C93590 * C1406) *
                         C28721) *
                        C93680 * C93639 * C800 -
                    ((C14744 * C5776 + C16411 + C16411 + C93590 * C5782 +
                      C14742 * C5775 + C16410 + C16410 + C93815 * C5781) *
                         C28721 +
                     (C19122 + C19123) * C28720 + (C15586 + C15585) * C28719) *
                        C93680 * C93639 * C801 +
                    (C15591 * C28719 + (C19121 + C19120) * C28720 +
                     (C14742 * C16395 + C16412 + C16412 + C93815 * C16399 +
                      C14744 * C16396 + C16413 + C16413 + C93590 * C16400) *
                         C28721) *
                        C93680 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C101 +
           (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C93706 * C93639 * C800 -
          ((C188 * C812 + C93680 * C894) * C92 +
           (C188 * C804 + C93680 * C886) * C107 +
           (C188 * C813 + C93680 * C895) * C91 +
           (C188 * C805 + C93680 * C887) * C105 +
           (C188 * C814 + C93680 * C896) * C90 +
           (C188 * C806 + C93680 * C888) * C103 +
           (C188 * C815 + C93680 * C897) * C89 +
           (C188 * C807 + C93680 * C889) * C101) *
              C93706 * C93639 * C801 +
          ((C188 * C808 + C93680 * C890) * C101 +
           (C188 * C816 + C93680 * C898) * C89 +
           (C188 * C809 + C93680 * C891) * C103 +
           (C188 * C817 + C93680 * C899) * C90 +
           (C188 * C810 + C93680 * C892) * C105 +
           (C188 * C818 + C93680 * C900) * C91 +
           (C188 * C811 + C93680 * C893) * C107 +
           (C188 * C819 + C93680 * C901) * C92) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C101 +
           (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C93706 * C93639 * C93625 * C97 -
          (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
           C220 * C103 + C219 * C89 + C218 * C101) *
              C93706 * C93639 * C93625 * C98 +
          (C220 * C101 + C221 * C89 + C222 * C103 + C223 * C90 + C225 * C105 +
           C224 * C91 + (C188 * C113 + C93680 * C194) * C107 +
           (C188 * C119 + C93680 * C200) * C92) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C91732 +
           (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
            C14840 * C816 + C14741 * C898) *
               C93815 +
           (C14866 + C14867 + C14868) * C91722 +
           (C14869 + C14870 + C14871) * C93590) *
              C93706 * C93639 * C93625 * C97 -
          ((C14872 + C14873 + C14874) * C93590 +
           (C14875 + C14876 + C14877) * C91722 +
           (C14871 + C14870 + C14869) * C93815 +
           (C14868 + C14867 + C14866) * C91732) *
              C93706 * C93639 * C93625 * C98 +
          ((C14877 + C14876 + C14875) * C91732 +
           (C14874 + C14873 + C14872) * C93815 +
           (C14838 * C111 + C14739 * C192 + C14839 * C804 + C14740 * C886 +
            C14840 * C811 + C14741 * C893) *
               C91722 +
           (C14838 * C117 + C14739 * C198 + C14839 * C812 + C14740 * C894 +
            C14840 * C819 + C14741 * C901) *
               C93590) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C91732 +
           (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
            C14840 * C816 + C14741 * C898) *
               C93815 +
           (C14866 + C14867 + C14868) * C91722 +
           (C14869 + C14870 + C14871) * C93590) *
              C93706 * C93639 * C800 -
          ((C14840 * C4901 + C14741 * C5020 + C14839 * C817 + C14740 * C899 +
            C14838 * C814 + C14739 * C896) *
               C93590 +
           (C14840 * C4898 + C14741 * C5017 + C14839 * C809 + C14740 * C891 +
            C14838 * C806 + C14739 * C888) *
               C91722 +
           (C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
            C14838 * C815 + C14739 * C897) *
               C93815 +
           (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
            C14838 * C807 + C14739 * C889) *
               C91732) *
              C93706 * C93639 * C801 +
          ((C14838 * C808 + C14739 * C890 + C14839 * C4897 + C14740 * C5016 +
            C14840 * C15550 + C14741 * C15666) *
               C91732 +
           (C14838 * C816 + C14739 * C898 + C14839 * C4900 + C14740 * C5019 +
            C14840 * C15552 + C14741 * C15668) *
               C93815 +
           (C14838 * C809 + C14739 * C891 + C14839 * C4898 + C14740 * C5017 +
            C14840 * C15551 + C14741 * C15667) *
               C91722 +
           (C14838 * C817 + C14739 * C899 + C14839 * C4901 + C14740 * C5020 +
            C14840 * C15553 + C14741 * C15669) *
               C93590) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C91732 +
            (C188 * C114 + C93680 * C195) * C93815 + C218 * C91722 +
            C219 * C93590) *
               C28719 +
           (C11107 * C91732 + C11108 * C93815 + C2790 * C91722 +
            C2789 * C93590) *
               C28720 +
           (C11114 * C91732 + C11113 * C93815 + C11112 * C91722 +
            C11111 * C93590) *
               C28721) *
              C93639 * C93625 * C97 -
          ((C11109 * C93590 + C11110 * C91722 + C11111 * C93815 +
            C11112 * C91732) *
               C28721 +
           (C2787 * C93590 + C2788 * C91722 + C2789 * C93815 + C2790 * C91732) *
               C28720 +
           (C221 * C93590 + C220 * C91722 + C219 * C93815 + C218 * C91732) *
               C28719) *
              C93639 * C93625 * C98 +
          ((C220 * C91732 + C221 * C93815 + C222 * C91722 + C223 * C93590) *
               C28719 +
           (C2788 * C91732 + C2787 * C93815 + C2786 * C91722 + C2785 * C93590) *
               C28720 +
           (C11110 * C91732 + C11109 * C93815 +
            (C188 * C1392 + C93680 * C1474) * C91722 +
            (C188 * C1400 + C93680 * C1482) * C93590) *
               C28721) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C91732 +
            (C188 * C114 + C93680 * C195) * C93815 + C218 * C91722 +
            C219 * C93590) *
               C28719 +
           (C11107 * C91732 + C11108 * C93815 + C2790 * C91722 +
            C2789 * C93590) *
               C28720 +
           (C11114 * C91732 + C11113 * C93815 + C11112 * C91722 +
            C11111 * C93590) *
               C28721) *
              C93639 * C800 -
          (((C188 * C5779 + C93680 * C5874) * C93590 +
            (C188 * C5776 + C93680 * C5871) * C91722 +
            (C188 * C5778 + C93680 * C5873) * C93815 +
            (C188 * C5775 + C93680 * C5870) * C91732) *
               C28721 +
           (C11978 * C93590 + C11979 * C91722 + C13955 * C93815 +
            C13954 * C91732) *
               C28720 +
           (C2075 * C93590 + C2076 * C91722 +
            (C188 * C815 + C93680 * C897) * C93815 +
            (C188 * C807 + C93680 * C889) * C91732) *
               C28719) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C91732 +
            (C188 * C816 + C93680 * C898) * C93815 +
            (C188 * C809 + C93680 * C891) * C91722 +
            (C188 * C817 + C93680 * C899) * C93590) *
               C28719 +
           ((C188 * C8520 + C93680 * C8645) * C91732 +
            (C188 * C8523 + C93680 * C8648) * C93815 +
            (C188 * C8521 + C93680 * C8646) * C91722 +
            (C188 * C8524 + C93680 * C8649) * C93590) *
               C28720 +
           ((C188 * C16395 + C93680 * C16487) * C91732 +
            (C188 * C16397 + C93680 * C16489) * C93815 +
            (C188 * C16396 + C93680 * C16488) * C91722 +
            (C188 * C16398 + C93680 * C16490) * C93590) *
               C28721) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C101 +
           (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C93680 * C93639 * C800 -
          ((C275 * C812 + C93706 * C960) * C92 +
           (C275 * C804 + C93706 * C952) * C107 +
           (C275 * C813 + C93706 * C961) * C91 +
           (C275 * C805 + C93706 * C953) * C105 +
           (C275 * C814 + C93706 * C962) * C90 +
           (C275 * C806 + C93706 * C954) * C103 +
           (C275 * C815 + C93706 * C963) * C89 +
           (C275 * C807 + C93706 * C955) * C101) *
              C93680 * C93639 * C801 +
          ((C275 * C808 + C93706 * C956) * C101 +
           (C275 * C816 + C93706 * C964) * C89 +
           (C275 * C809 + C93706 * C957) * C103 +
           (C275 * C817 + C93706 * C965) * C90 +
           (C275 * C810 + C93706 * C958) * C105 +
           (C275 * C818 + C93706 * C966) * C91 +
           (C275 * C811 + C93706 * C959) * C107 +
           (C275 * C819 + C93706 * C967) * C92) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C101 +
           (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C93680 * C93639 * C93625 * C97 -
          (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
           C307 * C103 + C306 * C89 + C305 * C101) *
              C93680 * C93639 * C93625 * C98 +
          (C307 * C101 + C308 * C89 + C309 * C103 + C310 * C90 + C312 * C105 +
           C311 * C91 + (C275 * C113 + C93706 * C281) * C107 +
           (C275 * C119 + C93706 * C287) * C92) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C91732 +
            (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
            C306 * C93590) *
               C14739 +
           (C5123 * C91732 + C5124 * C93815 + C2162 * C91722 + C2161 * C93590) *
               C14740 +
           (C5130 * C91732 + C5129 * C93815 + C5128 * C91722 + C5127 * C93590) *
               C14741) *
              C93639 * C93625 * C97 -
          ((C5125 * C93590 + C5126 * C91722 + C5127 * C93815 + C5128 * C91732) *
               C14741 +
           (C2159 * C93590 + C2160 * C91722 + C2161 * C93815 + C2162 * C91732) *
               C14740 +
           (C308 * C93590 + C307 * C91722 + C306 * C93815 + C305 * C91732) *
               C14739) *
              C93639 * C93625 * C98 +
          ((C307 * C91732 + C308 * C93815 + C309 * C91722 + C310 * C93590) *
               C14739 +
           (C2160 * C91732 + C2159 * C93815 + C2158 * C91722 + C2157 * C93590) *
               C14740 +
           (C5126 * C91732 + C5125 * C93815 +
            (C275 * C811 + C93706 * C959) * C91722 +
            (C275 * C819 + C93706 * C967) * C93590) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C91732 +
            (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
            C306 * C93590) *
               C14739 +
           (C15749 + C15750 + C15751 + C15752) * C14740 + C15775 * C14741) *
              C93639 * C800 -
          ((C15771 + C15772 + C15773 + C15774) * C14741 +
           (C15756 + C15755 + C15754 + C15753) * C14740 +
           (C15752 + C15751 + C15750 + C15749) * C14739) *
              C93639 * C801 +
          (C15775 * C14739 + (C15774 + C15773 + C15772 + C15771) * C14740 +
           ((C275 * C15550 + C93706 * C15744) * C91732 +
            (C275 * C15552 + C93706 * C15746) * C93815 +
            (C275 * C15551 + C93706 * C15745) * C91722 +
            (C275 * C15553 + C93706 * C15747) * C93590) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
            C28878 * C1389 + C28721 * C1537) *
               C91732 +
           (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
            C28878 * C1397 + C28721 * C1545) *
               C93815 +
           (C28904 + C28905 + C28906) * C91722 +
           (C28907 + C28908 + C28909) * C93590) *
              C93680 * C93639 * C93625 * C97 -
          ((C28910 + C28911 + C28912) * C93590 +
           (C28913 + C28914 + C28915) * C91722 +
           (C28909 + C28908 + C28907) * C93815 +
           (C28906 + C28905 + C28904) * C91732) *
              C93680 * C93639 * C93625 * C98 +
          ((C28915 + C28914 + C28913) * C91732 +
           (C28912 + C28911 + C28910) * C93815 +
           (C28876 * C111 + C28719 * C279 + C28877 * C1385 + C28720 * C1533 +
            C28878 * C1392 + C28721 * C1540) *
               C91722 +
           (C28876 * C117 + C28719 * C285 + C28877 * C1393 + C28720 * C1541 +
            C28878 * C1400 + C28721 * C1548) *
               C93590) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
            C28878 * C1389 + C28721 * C1537) *
               C91732 +
           (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
            C28878 * C1397 + C28721 * C1545) *
               C93815 +
           (C28904 + C28905 + C28906) * C91722 +
           (C28907 + C28908 + C28909) * C93590) *
              C93680 * C93639 * C800 -
          ((C28878 * C5779 + C28721 * C5954 + C28877 * C3414 + C28720 * C3570 +
            C28876 * C814 + C28719 * C962) *
               C93590 +
           (C28878 * C5776 + C28721 * C5951 + C28877 * C3410 + C28720 * C3566 +
            C28876 * C806 + C28719 * C954) *
               C91722 +
           (C28878 * C5778 + C28721 * C5953 + C28877 * C3413 + C28720 * C3569 +
            C28876 * C815 + C28719 * C963) *
               C93815 +
           (C28878 * C5775 + C28721 * C5950 + C28877 * C3409 + C28720 * C3565 +
            C28876 * C807 + C28719 * C955) *
               C91732) *
              C93680 * C93639 * C801 +
          ((C28876 * C808 + C28719 * C956 + C28877 * C8520 + C28720 * C8749 +
            C28878 * C16395 + C28721 * C16565) *
               C91732 +
           (C28876 * C816 + C28719 * C964 + C28877 * C8523 + C28720 * C8752 +
            C28878 * C16397 + C28721 * C16567) *
               C93815 +
           (C28876 * C809 + C28719 * C957 + C28877 * C8521 + C28720 * C8750 +
            C28878 * C16396 + C28721 * C16566) *
               C91722 +
           (C28876 * C817 + C28719 * C965 + C28877 * C8524 + C28720 * C8753 +
            C28878 * C16398 + C28721 * C16568) *
               C93590) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C93680) *
              C93706 * C93639 * C800 -
          ((C107 * C886 + C92 * C1018 + C105 * C887 + C91 * C1019 +
            C103 * C888 + C90 * C1020 + C101 * C889 + C89 * C1021) *
               C93680 +
           (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
            C90 * C814 + C101 * C807 + C89 * C815) *
               C188) *
              C93706 * C93639 * C801 +
          ((C101 * C808 + C89 * C816 + C103 * C809 + C90 * C817 + C105 * C810 +
            C91 * C818 + C107 * C811 + C92 * C819) *
               C188 +
           (C101 * C890 + C89 * C1022 + C103 * C891 + C90 * C1023 +
            C105 * C892 + C91 * C1024 + C107 * C893 + C92 * C1025) *
               C93680) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C93680) *
              C93706 * C93639 * C93625 * C97 -
          ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
            C90 * C364 + C101 * C190 + C89 * C363) *
               C93680 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C188) *
              C93706 * C93639 * C93625 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C188 +
           (C101 * C191 + C89 * C364 + C103 * C192 + C90 * C365 + C105 * C193 +
            C91 * C366 + C107 * C194 + C92 * C367) *
               C93680) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C14838 +
           (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
               C14739 +
           (C91732 * C807 + C93815 * C815 + C91722 * C806 + C93590 * C814) *
               C14839 +
           (C91732 * C889 + C93815 * C1021 + C91722 * C888 + C93590 * C1020) *
               C14740 +
           (C91732 * C808 + C93815 * C816 + C91722 * C809 + C93590 * C817) *
               C14840 +
           (C91732 * C890 + C93815 * C1022 + C91722 * C891 + C93590 * C1023) *
               C14741) *
              C93706 * C93639 * C93625 * C97 -
          ((C91722 * C892 + C93590 * C1024 + C91732 * C891 + C93815 * C1023) *
               C14741 +
           (C91722 * C810 + C93590 * C818 + C91732 * C809 + C93815 * C817) *
               C14840 +
           (C91722 * C887 + C93590 * C1019 + C91732 * C888 + C93815 * C1020) *
               C14740 +
           (C91722 * C805 + C93590 * C813 + C91732 * C806 + C93815 * C814) *
               C14839 +
           (C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
               C14739 +
           (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
               C14838) *
              C93706 * C93639 * C93625 * C98 +
          ((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
               C14838 +
           (C91732 * C191 + C93815 * C364 + C91722 * C192 + C93590 * C365) *
               C14739 +
           (C91732 * C805 + C93815 * C813 + C91722 * C804 + C93590 * C812) *
               C14839 +
           (C91732 * C887 + C93815 * C1019 + C91722 * C886 + C93590 * C1018) *
               C14740 +
           (C91732 * C810 + C93815 * C818 + C91722 * C811 + C93590 * C819) *
               C14840 +
           (C91732 * C892 + C93815 * C1024 + C91722 * C893 + C93590 * C1025) *
               C14741) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C14838 +
           (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
               C14739 +
           (C15876 + C15877) * C14839 + (C15878 + C15879) * C14740 +
           C15888 * C14840 + C15889 * C14741) *
              C93706 * C93639 * C800 -
          ((C15884 + C15885) * C14741 + (C15886 + C15887) * C14840 +
           (C15883 + C15882) * C14740 + (C15881 + C15880) * C14839 +
           (C15879 + C15878) * C14739 + (C15877 + C15876) * C14838) *
              C93706 * C93639 * C801 +
          (C15888 * C14838 + C15889 * C14739 + (C15887 + C15886) * C14839 +
           (C15885 + C15884) * C14740 +
           (C91732 * C15550 + C93815 * C15552 + C91722 * C15551 +
            C93590 * C15553) *
               C14840 +
           (C91732 * C15666 + C93815 * C15849 + C91722 * C15667 +
            C93590 * C15850) *
               C14741) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C188 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C93680) *
               C28719 +
           ((C91732 * C1388 + C93815 * C1396 + C91722 * C1387 +
             C93590 * C1395) *
                C188 +
            (C91732 * C1470 + C93815 * C1602 + C91722 * C1469 +
             C93590 * C1601) *
                C93680) *
               C28720 +
           ((C91732 * C1389 + C93815 * C1397 + C91722 * C1390 +
             C93590 * C1398) *
                C188 +
            (C91732 * C1471 + C93815 * C1603 + C91722 * C1472 +
             C93590 * C1604) *
                C93680) *
               C28721) *
              C93639 * C93625 * C97 -
          (((C91722 * C1473 + C93590 * C1605 + C91732 * C1472 +
             C93815 * C1604) *
                C93680 +
            (C91722 * C1391 + C93590 * C1399 + C91732 * C1390 +
             C93815 * C1398) *
                C188) *
               C28721 +
           ((C91722 * C1468 + C93590 * C1600 + C91732 * C1469 +
             C93815 * C1601) *
                C93680 +
            (C91722 * C1386 + C93590 * C1394 + C91732 * C1387 +
             C93815 * C1395) *
                C188) *
               C28720 +
           ((C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
                C93680 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C188) *
               C28719) *
              C93639 * C93625 * C98 +
          (((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
                C188 +
            (C91732 * C191 + C93815 * C364 + C91722 * C192 + C93590 * C365) *
                C93680) *
               C28719 +
           ((C91732 * C1386 + C93815 * C1394 + C91722 * C1385 +
             C93590 * C1393) *
                C188 +
            (C91732 * C1468 + C93815 * C1600 + C91722 * C1467 +
             C93590 * C1599) *
                C93680) *
               C28720 +
           ((C91732 * C1391 + C93815 * C1399 + C91722 * C1392 +
             C93590 * C1400) *
                C188 +
            (C91732 * C1473 + C93815 * C1605 + C91722 * C1474 +
             C93590 * C1606) *
                C93680) *
               C28721) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C188 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C93680) *
               C28719 +
           ((C91732 * C1388 + C93815 * C1396 + C91722 * C1387 +
             C93590 * C1395) *
                C188 +
            (C91732 * C1470 + C93815 * C1602 + C91722 * C1469 +
             C93590 * C1601) *
                C93680) *
               C28720 +
           ((C91732 * C1389 + C93815 * C1397 + C91722 * C1390 +
             C93590 * C1398) *
                C188 +
            (C91732 * C1471 + C93815 * C1603 + C91722 * C1472 +
             C93590 * C1604) *
                C93680) *
               C28721) *
              C93639 * C800 -
          (((C91722 * C5871 + C93590 * C6031 + C91732 * C5870 +
             C93815 * C6030) *
                C93680 +
            (C91722 * C5776 + C93590 * C5779 + C91732 * C5775 +
             C93815 * C5778) *
                C188) *
               C28721 +
           ((C19462 + C19463) * C93680 + (C19464 + C19465) * C188) * C28720 +
           ((C15879 + C15878) * C93680 + (C15877 + C15876) * C188) * C28719) *
              C93639 * C801 +
          ((C15888 * C188 + C15889 * C93680) * C28719 +
           ((C19461 + C19460) * C188 + (C19459 + C19458) * C93680) * C28720 +
           ((C91732 * C16395 + C93815 * C16397 + C91722 * C16396 +
             C93590 * C16398) *
                C188 +
            (C91732 * C16487 + C93815 * C16643 + C91722 * C16488 +
             C93590 * C16644) *
                C93680) *
               C28721) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C93680 * C419) * C89 + C448 * C90 +
           C449 * C91 + C450 * C92) *
              C93706 * C93639 * C800 -
          ((C418 * C804 + C1085 + C1085 + C93680 * C1076) * C92 +
           (C418 * C805 + C1086 + C1086 + C93680 * C1077) * C91 +
           (C418 * C806 + C1087 + C1087 + C93680 * C1078) * C90 +
           (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C89) *
              C93706 * C93639 * C801 +
          ((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C89 +
           (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C90 +
           (C418 * C810 + C1091 + C1091 + C93680 * C1082) * C91 +
           (C418 * C811 + C1092 + C1092 + C93680 * C1083) * C92) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C93680 * C419) * C89 + C448 * C90 +
           C449 * C91 + C450 * C92) *
              C93706 * C93639 * C93625 * C97 -
          (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C93706 *
              C93639 * C93625 * C98 +
          (C449 * C89 + C450 * C90 + C451 * C91 +
           (C418 * C113 + C439 + C439 + C93680 * C424) * C92) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93815 +
           (C15139 + C15140 + C15141) * C93590) *
              C93706 * C93639 * C93625 * C97 -
          ((C15142 + C15143 + C15144) * C93590 +
           (C15141 + C15140 + C15139) * C93815) *
              C93706 * C93639 * C93625 * C98 +
          ((C15144 + C15143 + C15142) * C93815 +
           (C15099 * C111 + C15124 + C15124 + C14739 * C422 + C15100 * C804 +
            C15125 + C15125 + C14740 * C1076 + C15101 * C811 + C15126 + C15126 +
            C14741 * C1083) *
               C93590) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93815 +
           (C15139 + C15140 + C15141) * C93590) *
              C93706 * C93639 * C800 -
          ((C15101 * C4898 + C15966 + C15966 + C14741 * C5326 + C15100 * C809 +
            C15967 + C15967 + C14740 * C1081 + C15099 * C806 + C15968 + C15968 +
            C14739 * C1078) *
               C93590 +
           (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 + C15100 * C808 +
            C15970 + C15970 + C14740 * C1080 + C15099 * C807 + C15971 + C15971 +
            C14739 * C1079) *
               C93815) *
              C93706 * C93639 * C801 +
          ((C15099 * C808 + C15972 + C15972 + C14739 * C1080 + C15100 * C4897 +
            C15973 + C15973 + C14740 * C5325 + C15101 * C15550 + C15974 +
            C15974 + C14741 * C15963) *
               C93815 +
           (C15099 * C809 + C15975 + C15975 + C14739 * C1081 + C15100 * C4898 +
            C15976 + C15976 + C14740 * C5326 + C15101 * C15551 + C15977 +
            C15977 + C14741 * C15964) *
               C93590) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93815 +
            C448 * C93590) *
               C28719 +
           (C11414 * C93815 + C3026 * C93590) * C28720 +
           (C11417 * C93815 + C11416 * C93590) * C28721) *
              C93639 * C93625 * C97 -
          ((C11415 * C93590 + C11416 * C93815) * C28721 +
           (C3025 * C93590 + C3026 * C93815) * C28720 +
           (C449 * C93590 + C448 * C93815) * C28719) *
              C93639 * C93625 * C98 +
          ((C449 * C93815 + C450 * C93590) * C28719 +
           (C3025 * C93815 + C3024 * C93590) * C28720 +
           (C11415 * C93815 +
            (C418 * C1392 + C1673 + C1673 + C93680 * C1664) * C93590) *
               C28721) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93815 +
            C448 * C93590) *
               C28719 +
           (C11414 * C93815 + C3026 * C93590) * C28720 +
           (C11417 * C93815 + C11416 * C93590) * C28721) *
              C93639 * C800 -
          (((C418 * C5776 + C14257 + C14257 + C93680 * C6108) * C93590 +
            (C418 * C5775 + C14256 + C14256 + C93680 * C6107) * C93815) *
               C28721 +
           (C12307 * C93590 + C14261 * C93815) * C28720 +
           (C2312 * C93590 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C93815) *
               C28719) *
              C93639 * C801 +
          (((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C93815 +
            (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C93590) *
               C28719 +
           ((C418 * C8520 + C10580 + C10580 + C93680 * C8984) * C93815 +
            (C418 * C8521 + C10581 + C10581 + C93680 * C8985) * C93590) *
               C28720 +
           ((C418 * C16395 + C29805 + C29805 + C93680 * C16719) * C93815 +
            (C418 * C16396 + C29806 + C29806 + C93680 * C16720) * C93590) *
               C28721) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C188 +
            (C275 * C189 + C93706 * C501) * C93680) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C93639 * C800 -
          (((C275 * C886 + C93706 * C1142) * C93680 +
            (C275 * C804 + C93706 * C952) * C188) *
               C92 +
           ((C275 * C887 + C93706 * C1143) * C93680 +
            (C275 * C805 + C93706 * C953) * C188) *
               C91 +
           ((C275 * C888 + C93706 * C1144) * C93680 +
            (C275 * C806 + C93706 * C954) * C188) *
               C90 +
           ((C275 * C889 + C93706 * C1145) * C93680 +
            (C275 * C807 + C93706 * C955) * C188) *
               C89) *
              C93639 * C801 +
          (((C275 * C808 + C93706 * C956) * C188 +
            (C275 * C890 + C93706 * C1146) * C93680) *
               C89 +
           ((C275 * C809 + C93706 * C957) * C188 +
            (C275 * C891 + C93706 * C1147) * C93680) *
               C90 +
           ((C275 * C810 + C93706 * C958) * C188 +
            (C275 * C892 + C93706 * C1148) * C93680) *
               C91 +
           ((C275 * C811 + C93706 * C959) * C188 +
            (C275 * C893 + C93706 * C1149) * C93680) *
               C92) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C188 +
            (C275 * C189 + C93706 * C501) * C93680) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C93639 * C93625 * C97 -
          ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
           (C524 + C508) * C89) *
              C93639 * C93625 * C98 +
          (C528 * C89 + C529 * C90 + (C519 + C527) * C91 +
           ((C275 * C113 + C93706 * C281) * C188 +
            (C275 * C194 + C93706 * C506) * C93680) *
               C92) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C14838 +
            (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
            C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
               C93815 +
           (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
              C93639 * C93625 * C97 -
          ((C15225 + C15226 + C15227 + C15228 + C15229 + C15230) * C93590 +
           (C15224 + C15223 + C15222 + C15221 + C15220 + C15219) * C93815) *
              C93639 * C93625 * C98 +
          ((C15230 + C15229 + C15228 + C15227 + C15226 + C15225) * C93815 +
           (C309 * C14838 + C522 * C14739 + C2158 * C14839 + C2389 * C14740 +
            (C275 * C811 + C93706 * C959) * C14840 +
            (C275 * C893 + C93706 * C1149) * C14741) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C14838 +
            (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
            C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
               C93815 +
           (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
              C93639 * C800 -
          ((C16058 * C14741 + C15767 * C14840 + C5428 * C14740 +
            C5128 * C14839 + C2391 * C14739 + C2162 * C14838) *
               C93590 +
           (C16059 * C14741 + C15769 * C14840 + C5429 * C14740 +
            C5130 * C14839 + C5426 * C14739 + C5123 * C14838) *
               C93815) *
              C93639 * C801 +
          ((C5130 * C14838 + C5429 * C14739 + C15769 * C14839 +
            C16059 * C14740 + (C275 * C15550 + C93706 * C15744) * C14840 +
            (C275 * C15666 + C93706 * C16051) * C14741) *
               C93815 +
           (C5128 * C14838 + C5428 * C14739 + C15767 * C14839 +
            C16058 * C14740 + (C275 * C15551 + C93706 * C15745) * C14840 +
            (C275 * C15667 + C93706 * C16052) * C14741) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C188 +
            (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
             C28878 * C1471 + C28721 * C1727) *
                C93680) *
               C93815 +
           ((C28904 + C28905 + C28906) * C188 +
            (C29150 + C29151 + C29152) * C93680) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C29153 + C29154 + C29155) * C93680 +
            (C28913 + C28914 + C28915) * C188) *
               C93590 +
           ((C29152 + C29151 + C29150) * C93680 +
            (C28906 + C28905 + C28904) * C188) *
               C93815) *
              C93639 * C93625 * C98 +
          (((C28915 + C28914 + C28913) * C188 +
            (C29155 + C29154 + C29153) * C93680) *
               C93815 +
           ((C28876 * C111 + C28719 * C279 + C28877 * C1385 + C28720 * C1533 +
             C28878 * C1392 + C28721 * C1540) *
                C188 +
            (C28876 * C192 + C28719 * C504 + C28877 * C1467 + C28720 * C1723 +
             C28878 * C1474 + C28721 * C1730) *
                C93680) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C188 +
            (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
             C28878 * C1471 + C28721 * C1727) *
                C93680) *
               C93815 +
           ((C28904 + C28905 + C28906) * C188 +
            (C29150 + C29151 + C29152) * C93680) *
               C93590) *
              C93639 * C800 -
          (((C28878 * C5871 + C28721 * C6197 + C28877 * C3492 + C28720 * C3784 +
             C28876 * C888 + C28719 * C1144) *
                C93680 +
            (C28878 * C5776 + C28721 * C5951 + C28877 * C3410 + C28720 * C3566 +
             C28876 * C806 + C28719 * C954) *
                C188) *
               C93590 +
           ((C28878 * C5870 + C28721 * C6196 + C28877 * C3491 + C28720 * C3783 +
             C28876 * C889 + C28719 * C1145) *
                C93680 +
            (C28878 * C5775 + C28721 * C5950 + C28877 * C3409 + C28720 * C3565 +
             C28876 * C807 + C28719 * C955) *
                C188) *
               C93815) *
              C93639 * C801 +
          (((C28876 * C808 + C28719 * C956 + C28877 * C8520 + C28720 * C8749 +
             C28878 * C16395 + C28721 * C16565) *
                C188 +
            (C28876 * C890 + C28719 * C1146 + C28877 * C8645 + C28720 * C9091 +
             C28878 * C16487 + C28721 * C16807) *
                C93680) *
               C93815 +
           ((C28876 * C809 + C28719 * C957 + C28877 * C8521 + C28720 * C8750 +
             C28878 * C16396 + C28721 * C16566) *
                C188 +
            (C28876 * C891 + C28719 * C1147 + C28877 * C8646 + C28720 * C9092 +
             C28878 * C16488 + C28721 * C16808) *
                C93680) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C93706) *
              C93680 * C93639 * C800 -
          ((C107 * C952 + C92 * C1200 + C105 * C953 + C91 * C1201 +
            C103 * C954 + C90 * C1202 + C101 * C955 + C89 * C1203) *
               C93706 +
           (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
            C90 * C814 + C101 * C807 + C89 * C815) *
               C275) *
              C93680 * C93639 * C801 +
          ((C101 * C808 + C89 * C816 + C103 * C809 + C90 * C817 + C105 * C810 +
            C91 * C818 + C107 * C811 + C92 * C819) *
               C275 +
           (C101 * C956 + C89 * C1204 + C103 * C957 + C90 * C1205 +
            C105 * C958 + C91 * C1206 + C107 * C959 + C92 * C1207) *
               C93706) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C93706) *
              C93680 * C93639 * C93625 * C97 -
          ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
            C90 * C581 + C101 * C277 + C89 * C580) *
               C93706 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C275) *
              C93680 * C93639 * C93625 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C275 +
           (C101 * C278 + C89 * C581 + C103 * C279 + C90 * C582 + C105 * C280 +
            C91 * C583 + C107 * C281 + C92 * C584) *
               C93706) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C275 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C93706) *
               C14739 +
           ((C91732 * C807 + C93815 * C815 + C91722 * C806 + C93590 * C814) *
                C275 +
            (C91732 * C955 + C93815 * C1203 + C91722 * C954 + C93590 * C1202) *
                C93706) *
               C14740 +
           ((C91732 * C808 + C93815 * C816 + C91722 * C809 + C93590 * C817) *
                C275 +
            (C91732 * C956 + C93815 * C1204 + C91722 * C957 + C93590 * C1205) *
                C93706) *
               C14741) *
              C93639 * C93625 * C97 -
          (((C91722 * C958 + C93590 * C1206 + C91732 * C957 + C93815 * C1205) *
                C93706 +
            (C91722 * C810 + C93590 * C818 + C91732 * C809 + C93815 * C817) *
                C275) *
               C14741 +
           ((C91722 * C953 + C93590 * C1201 + C91732 * C954 + C93815 * C1202) *
                C93706 +
            (C91722 * C805 + C93590 * C813 + C91732 * C806 + C93815 * C814) *
                C275) *
               C14740 +
           ((C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                C93706 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C275) *
               C14739) *
              C93639 * C93625 * C98 +
          (((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
                C275 +
            (C91732 * C278 + C93815 * C581 + C91722 * C279 + C93590 * C582) *
                C93706) *
               C14739 +
           ((C91732 * C805 + C93815 * C813 + C91722 * C804 + C93590 * C812) *
                C275 +
            (C91732 * C953 + C93815 * C1201 + C91722 * C952 + C93590 * C1200) *
                C93706) *
               C14740 +
           ((C91732 * C810 + C93815 * C818 + C91722 * C811 + C93590 * C819) *
                C275 +
            (C91732 * C958 + C93815 * C1206 + C91722 * C959 + C93590 * C1207) *
                C93706) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C275 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C93706) *
               C14739 +
           ((C15876 + C15877) * C275 + (C16149 + C16150) * C93706) * C14740 +
           C16157 * C14741) *
              C93639 * C800 -
          (((C16153 + C16154) * C93706 + (C15886 + C15887) * C275) * C14741 +
           ((C16152 + C16151) * C93706 + (C15881 + C15880) * C275) * C14740 +
           ((C16150 + C16149) * C93706 + (C15877 + C15876) * C275) * C14739) *
              C93639 * C801 +
          (C16157 * C14739 +
           ((C15887 + C15886) * C275 + (C16154 + C16153) * C93706) * C14740 +
           ((C91732 * C15550 + C93815 * C15552 + C91722 * C15551 +
             C93590 * C15553) *
                C275 +
            (C91732 * C15744 + C93815 * C16133 + C91722 * C15745 +
             C93590 * C16134) *
                C93706) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C28876 +
           (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
               C28719 +
           (C91732 * C1388 + C93815 * C1396 + C91722 * C1387 + C93590 * C1395) *
               C28877 +
           (C91732 * C1536 + C93815 * C1784 + C91722 * C1535 + C93590 * C1783) *
               C28720 +
           (C91732 * C1389 + C93815 * C1397 + C91722 * C1390 + C93590 * C1398) *
               C28878 +
           (C91732 * C1537 + C93815 * C1785 + C91722 * C1538 + C93590 * C1786) *
               C28721) *
              C93680 * C93639 * C93625 * C97 -
          ((C91722 * C1539 + C93590 * C1787 + C91732 * C1538 + C93815 * C1786) *
               C28721 +
           (C91722 * C1391 + C93590 * C1399 + C91732 * C1390 + C93815 * C1398) *
               C28878 +
           (C91722 * C1534 + C93590 * C1782 + C91732 * C1535 + C93815 * C1783) *
               C28720 +
           (C91722 * C1386 + C93590 * C1394 + C91732 * C1387 + C93815 * C1395) *
               C28877 +
           (C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
               C28719 +
           (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
               C28876) *
              C93680 * C93639 * C93625 * C98 +
          ((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
               C28876 +
           (C91732 * C278 + C93815 * C581 + C91722 * C279 + C93590 * C582) *
               C28719 +
           (C91732 * C1386 + C93815 * C1394 + C91722 * C1385 + C93590 * C1393) *
               C28877 +
           (C91732 * C1534 + C93815 * C1782 + C91722 * C1533 + C93590 * C1781) *
               C28720 +
           (C91732 * C1391 + C93815 * C1399 + C91722 * C1392 + C93590 * C1400) *
               C28878 +
           (C91732 * C1539 + C93815 * C1787 + C91722 * C1540 + C93590 * C1788) *
               C28721) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C28876 +
           (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
               C28719 +
           (C91732 * C1388 + C93815 * C1396 + C91722 * C1387 + C93590 * C1395) *
               C28877 +
           (C91732 * C1536 + C93815 * C1784 + C91722 * C1535 + C93590 * C1783) *
               C28720 +
           (C91732 * C1389 + C93815 * C1397 + C91722 * C1390 + C93590 * C1398) *
               C28878 +
           (C91732 * C1537 + C93815 * C1785 + C91722 * C1538 + C93590 * C1786) *
               C28721) *
              C93680 * C93639 * C800 -
          ((C91722 * C5951 + C93590 * C6274 + C91732 * C5950 + C93815 * C6273) *
               C28721 +
           (C91722 * C5776 + C93590 * C5779 + C91732 * C5775 + C93815 * C5778) *
               C28878 +
           (C19785 + C19786) * C28720 + (C19464 + C19465) * C28877 +
           (C16150 + C16149) * C28719 + (C15877 + C15876) * C28876) *
              C93680 * C93639 * C801 +
          (C15888 * C28876 + C16155 * C28719 + (C19461 + C19460) * C28877 +
           (C19784 + C19783) * C28720 +
           (C91732 * C16395 + C93815 * C16397 + C91722 * C16396 +
            C93590 * C16398) *
               C28878 +
           (C91732 * C16565 + C93815 * C16883 + C91722 * C16566 +
            C93590 * C16884) *
               C28721) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C275 +
            (C188 * C276 + C93680 * C635) * C93706) *
               C89 +
           (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
              C93639 * C800 -
          (((C188 * C952 + C93680 * C1258) * C93706 +
            (C188 * C804 + C93680 * C886) * C275) *
               C92 +
           ((C188 * C953 + C93680 * C1259) * C93706 +
            (C188 * C805 + C93680 * C887) * C275) *
               C91 +
           ((C188 * C954 + C93680 * C1260) * C93706 +
            (C188 * C806 + C93680 * C888) * C275) *
               C90 +
           ((C188 * C955 + C93680 * C1261) * C93706 +
            (C188 * C807 + C93680 * C889) * C275) *
               C89) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C275 +
            (C188 * C956 + C93680 * C1262) * C93706) *
               C89 +
           ((C188 * C809 + C93680 * C891) * C275 +
            (C188 * C957 + C93680 * C1263) * C93706) *
               C90 +
           ((C188 * C810 + C93680 * C892) * C275 +
            (C188 * C958 + C93680 * C1264) * C93706) *
               C91 +
           ((C188 * C811 + C93680 * C893) * C275 +
            (C188 * C959 + C93680 * C1265) * C93706) *
               C92) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C275 +
            (C188 * C276 + C93680 * C635) * C93706) *
               C89 +
           (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
              C93639 * C93625 * C97 -
          ((C661 + C653) * C92 + (C660 + C648) * C91 + (C659 + C645) * C90 +
           (C658 + C642) * C89) *
              C93639 * C93625 * C98 +
          (C662 * C89 + C663 * C90 + (C653 + C661) * C91 +
           ((C188 * C113 + C93680 * C194) * C275 +
            (C188 * C281 + C93680 * C640) * C93706) *
               C92) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C275 +
            (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
             C14840 * C956 + C14741 * C1262) *
                C93706) *
               C93815 +
           ((C14866 + C14867 + C14868) * C275 +
            (C15391 + C15392 + C15393) * C93706) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C15394 + C15395 + C15396) * C93706 +
            (C14875 + C14876 + C14877) * C275) *
               C93590 +
           ((C15393 + C15392 + C15391) * C93706 +
            (C14868 + C14867 + C14866) * C275) *
               C93815) *
              C93639 * C93625 * C98 +
          (((C14877 + C14876 + C14875) * C275 +
            (C15396 + C15395 + C15394) * C93706) *
               C93815 +
           ((C14838 * C111 + C14739 * C192 + C14839 * C804 + C14740 * C886 +
             C14840 * C811 + C14741 * C893) *
                C275 +
            (C14838 * C279 + C14739 * C638 + C14839 * C952 + C14740 * C1258 +
             C14840 * C959 + C14741 * C1265) *
                C93706) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C275 +
            (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
             C14840 * C956 + C14741 * C1262) *
                C93706) *
               C93815 +
           ((C14866 + C14867 + C14868) * C275 +
            (C15391 + C15392 + C15393) * C93706) *
               C93590) *
              C93639 * C800 -
          (((C14840 * C5097 + C14741 * C5599 + C14839 * C957 + C14740 * C1263 +
             C14838 * C954 + C14739 * C1260) *
                C93706 +
            (C14840 * C4898 + C14741 * C5017 + C14839 * C809 + C14740 * C891 +
             C14838 * C806 + C14739 * C888) *
                C275) *
               C93590 +
           ((C14840 * C5096 + C14741 * C5598 + C14839 * C956 + C14740 * C1262 +
             C14838 * C955 + C14739 * C1261) *
                C93706 +
            (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
             C14838 * C807 + C14739 * C889) *
                C275) *
               C93815) *
              C93639 * C801 +
          (((C14838 * C808 + C14739 * C890 + C14839 * C4897 + C14740 * C5016 +
             C14840 * C15550 + C14741 * C15666) *
                C275 +
            (C14838 * C956 + C14739 * C1262 + C14839 * C5096 + C14740 * C5598 +
             C14840 * C15744 + C14741 * C16231) *
                C93706) *
               C93815 +
           ((C14838 * C809 + C14739 * C891 + C14839 * C4898 + C14740 * C5017 +
             C14840 * C15551 + C14741 * C15667) *
                C275 +
            (C14838 * C957 + C14739 * C1263 + C14839 * C5097 + C14740 * C5599 +
             C14840 * C15745 + C14741 * C16232) *
                C93706) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C28876 +
            (C188 * C276 + C93680 * C635) * C28719 + C11107 * C28877 +
            C11679 * C28720 + C11114 * C28878 + C11682 * C28721) *
               C93815 +
           (C29304 + C29305 + C29306 + C29307 + C29308 + C29309) * C93590) *
              C93639 * C93625 * C97 -
          ((C29310 + C29311 + C29312 + C29313 + C29314 + C29315) * C93590 +
           (C29309 + C29308 + C29307 + C29306 + C29305 + C29304) * C93815) *
              C93639 * C93625 * C98 +
          ((C29315 + C29314 + C29313 + C29312 + C29311 + C29310) * C93815 +
           (C222 * C28876 + C656 * C28719 + C2786 * C28877 + C3252 * C28720 +
            (C188 * C1392 + C93680 * C1474) * C28878 +
            (C188 * C1540 + C93680 * C1846) * C28721) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C28876 +
            (C188 * C276 + C93680 * C635) * C28719 + C11107 * C28877 +
            C11679 * C28720 + C11114 * C28878 + C11682 * C28721) *
               C93815 +
           (C29304 + C29305 + C29306 + C29307 + C29308 + C29309) * C93590) *
              C93639 * C800 -
          (((C188 * C5951 + C93680 * C6351) * C28721 +
            (C188 * C5776 + C93680 * C5871) * C28878 + C12625 * C28720 +
            C11979 * C28877 + C2540 * C28719 + C2076 * C28876) *
               C93590 +
           ((C188 * C5950 + C93680 * C6350) * C28721 +
            (C188 * C5775 + C93680 * C5870) * C28878 + C14559 * C28720 +
            C13954 * C28877 + (C188 * C955 + C93680 * C1261) * C28719 +
            (C188 * C807 + C93680 * C889) * C28876) *
               C93815) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C28876 +
            (C188 * C956 + C93680 * C1262) * C28719 +
            (C188 * C8520 + C93680 * C8645) * C28877 +
            (C188 * C8749 + C93680 * C9305) * C28720 +
            (C188 * C16395 + C93680 * C16487) * C28878 +
            (C188 * C16565 + C93680 * C16959) * C28721) *
               C93815 +
           ((C188 * C809 + C93680 * C891) * C28876 +
            (C188 * C957 + C93680 * C1263) * C28719 +
            (C188 * C8521 + C93680 * C8646) * C28877 +
            (C188 * C8750 + C93680 * C9306) * C28720 +
            (C188 * C16396 + C93680 * C16488) * C28878 +
            (C188 * C16566 + C93680 * C16960) * C28721) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C93639 * C800 -
          ((C713 * C804 + C1325 + C1325 + C93706 * C1316) * C93680 * C92 +
           (C713 * C805 + C1326 + C1326 + C93706 * C1317) * C93680 * C91 +
           (C713 * C806 + C1327 + C1327 + C93706 * C1318) * C93680 * C90 +
           (C713 * C807 + C1328 + C1328 + C93706 * C1319) * C93680 * C89) *
              C93639 * C801 +
          ((C713 * C808 + C1329 + C1329 + C93706 * C1320) * C93680 * C89 +
           (C713 * C809 + C1330 + C1330 + C93706 * C1321) * C93680 * C90 +
           (C713 * C810 + C1331 + C1331 + C93706 * C1322) * C93680 * C91 +
           (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C93680 * C92) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C93639 * C93625 * C97 -
          (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C93639 *
              C93625 * C98 +
          (C748 * C89 + C749 * C90 + C750 * C91 +
           (C713 * C113 + C734 + C734 + C93706 * C719) * C93680 * C92) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
            C5698 * C14740 + C5701 * C14741) *
               C93815 +
           (C15471 + C15472 + C15473) * C93590) *
              C93639 * C93625 * C97 -
          ((C15474 + C15475 + C15476) * C93590 +
           (C15473 + C15472 + C15471) * C93815) *
              C93639 * C93625 * C98 +
          ((C15476 + C15475 + C15474) * C93815 +
           (C745 * C14739 + C2624 * C14740 +
            (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C14741) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
            C5698 * C14740 + C5701 * C14741) *
               C93815 +
           (C15471 + C15472 + C15473) * C93590) *
              C93639 * C800 -
          ((C16320 * C14741 + C5700 * C14740 + C2626 * C14739) * C93590 +
           (C16321 * C14741 + C5701 * C14740 + C5698 * C14739) * C93815) *
              C93639 * C801 +
          ((C5701 * C14739 + C16321 * C14740 +
            (C713 * C15550 + C16314 + C16314 + C93706 * C16307) * C14741) *
               C93815 +
           (C5700 * C14739 + C16320 * C14740 +
            (C713 * C15551 + C16315 + C16315 + C93706 * C16308) * C14741) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
            C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
            C29395 + C28721 * C1901) *
               C93680 * C93815 +
           (C29429 + C29430 + C29431) * C93680 * C93590) *
              C93639 * C93625 * C97 -
          ((C29432 + C29433 + C29434) * C93680 * C93590 +
           (C29431 + C29430 + C29429) * C93680 * C93815) *
              C93639 * C93625 * C98 +
          ((C29434 + C29433 + C29432) * C93680 * C93815 +
           (C29389 * C111 + C29414 + C29414 + C28719 * C717 + C29390 * C1385 +
            C29415 + C29415 + C28720 * C1897 + C29391 * C1392 + C29416 +
            C29416 + C28721 * C1904) *
               C93680 * C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
            C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
            C29395 + C28721 * C1901) *
               C93680 * C93815 +
           (C29429 + C29430 + C29431) * C93680 * C93590) *
              C93639 * C800 -
          ((C29391 * C5776 + C30103 + C30103 + C28721 * C6428 + C29390 * C3410 +
            C30104 + C30104 + C28720 * C3994 + C29389 * C806 + C30105 + C30105 +
            C28719 * C1318) *
               C93680 * C93590 +
           (C29391 * C5775 + C30106 + C30106 + C28721 * C6427 + C29390 * C3409 +
            C30107 + C30107 + C28720 * C3993 + C29389 * C807 + C30108 + C30108 +
            C28719 * C1319) *
               C93680 * C93815) *
              C93639 * C801 +
          ((C29389 * C808 + C30109 + C30109 + C28719 * C1320 + C29390 * C8520 +
            C30110 + C30110 + C28720 * C9406 + C29391 * C16395 + C30111 +
            C30111 + C28721 * C17035) *
               C93680 * C93815 +
           (C29389 * C809 + C30112 + C30112 + C28719 * C1321 + C29390 * C8521 +
            C30113 + C30113 + C28720 * C9407 + C29391 * C16396 + C30114 +
            C30114 + C28721 * C17036) *
               C93680 * C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 *
                C20044 +
            C20558 * C20045 + C20559 * C20046 + C20560 * C20047) *
               C93639 * C1979 -
           (C20561 * C20047 + C20560 * C20046 + C20559 * C20045 +
            C20558 * C20044) *
               C93639 * C1980) *
              C1981 +
          ((C21613 * C20044 + C21614 * C20045 + C21615 * C20046 +
            (C20048 * C15551 + C21603 + C21603 + C93585 * C15555) * C93706 *
                C20047) *
               C93639 * C1980 -
           (C21615 * C20047 + C21614 * C20046 + C21613 * C20045 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93706 *
                C20044) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
             C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
             C4077 * C122) *
                C93706 * C93828 +
            (C4937 + C4938 + C4939) * C93706 * C93694) *
               C93639 * C1979 -
           ((C4940 + C4941 + C4942) * C93706 * C93694 +
            (C4939 + C4938 + C4937) * C93706 * C93828) *
               C93639 * C1980) *
              C1981 +
          (((C6547 + C6548 + C6549) * C93706 * C93828 +
            (C4080 * C809 + C6538 + C6538 + C4075 * C825 + C4082 * C810 +
             C6539 + C6539 + C4076 * C826 + C4084 * C811 + C6540 + C6540 +
             C4077 * C827) *
                C93706 * C93694) *
               C93639 * C1980 -
           ((C6549 + C6548 + C6547) * C93706 * C93694 +
            (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 +
             C4097 + C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
             C4075 * C121) *
                C93706 * C93828) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C28719 +
             C25027 * C28720 + C25030 * C28721) *
                C93828 +
            (C34619 + C34620 + C34621) * C93694) *
               C93639 * C1979 -
           ((C34622 + C34623 + C34624) * C93694 +
            (C34621 + C34620 + C34619) * C93828) *
               C93639 * C1980) *
              C1981 +
          (((C36243 + C36244 + C36250) * C93828 +
            (C21611 * C28719 + C25893 * C28720 +
             (C20048 * C16396 + C26838 + C26838 + C93585 * C16400) * C28721) *
                C93694) *
               C93639 * C1980 -
           ((C36250 + C36244 + C36243) * C93694 +
            ((C20048 * C1390 + C26836 + C26836 + C93585 * C1406) * C28721 +
             C26841 * C28720 +
             (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C28719) *
                C93828) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
             C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
                C20049 +
            (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
             C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
                C93585) *
               C93706 * C93639 * C1979 -
           ((C20115 * C15552 + C20047 * C15668 + C20114 * C4900 +
             C20046 * C5019 + C20113 * C816 + C20045 * C898 + C20112 * C815 +
             C20044 * C897) *
                C93585 +
            (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
             C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
             C20044 * C889) *
                C20049) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C20112 * C806 + C20044 * C888 + C20113 * C809 + C20045 * C891 +
             C20114 * C4898 + C20046 * C5017 + C20115 * C15551 +
             C20047 * C15667) *
                C20049 +
            (C20112 * C814 + C20044 * C896 + C20113 * C817 + C20045 * C899 +
             C20114 * C4901 + C20046 * C5020 + C20115 * C15553 +
             C20047 * C15669) *
                C93585) *
               C93706 * C93639 * C1980 -
           ((C20115 * C4901 + C20047 * C5020 + C20114 * C817 + C20046 * C899 +
             C20113 * C814 + C20045 * C896 + C20112 * C115 + C20044 * C196) *
                C93585 +
            (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
             C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
                C20049) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C4081 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C4075 +
            (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
            C4218 * C4077) *
               C93706 * C93639 * C1979 -
           ((C6664 + C6665) * C4077 + (C6666 + C6667) * C4085 +
            (C6668 + C6669) * C4076 + (C6670 + C6671) * C4083 +
            (C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                C4075 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C4081) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C6671 + C6670) * C4081 + (C6669 + C6668) * C4075 +
            (C6667 + C6666) * C4083 + (C6665 + C6664) * C4076 +
            (C4178 * C804 + C93828 * C886 + C4179 * C811 + C93694 * C893) *
                C4085 +
            (C4178 * C812 + C93828 * C894 + C4179 * C819 + C93694 * C901) *
                C4077) *
               C93706 * C93639 * C1980 -
           ((C4213 + C4214) * C4077 + (C4215 + C4216) * C4085 +
            (C4212 + C4211) * C4076 + (C4210 + C4209) * C4083 +
            (C4208 + C4207) * C4075 + (C4206 + C4205) * C4081) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C20049 +
             (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                 C93585) *
                C28719 +
            ((C35511 + C35512) * C20049 + (C35513 + C35514) * C93585) * C28720 +
            C35527 * C28721) *
               C93639 * C1979 -
           (((C4179 * C16397 + C93694 * C16489 + C4178 * C5778 +
              C93828 * C5873) *
                 C93585 +
             (C4179 * C16395 + C93694 * C16487 + C4178 * C5775 +
              C93828 * C5870) *
                 C20049) *
                C28721 +
            ((C4179 * C8523 + C93694 * C8648 + C4178 * C3413 + C93828 * C3495) *
                 C93585 +
             (C4179 * C8520 + C93694 * C8645 + C4178 * C3409 + C93828 * C3491) *
                 C20049) *
                C28720 +
            ((C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                 C93585 +
             (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                 C20049) *
                C28719) *
               C93639 * C1980) *
              C1981 +
          ((((C6671 + C6670) * C20049 + (C6669 + C6668) * C93585) * C28719 +
            ((C4178 * C3410 + C93828 * C3492 + C4179 * C8521 + C93694 * C8646) *
                 C20049 +
             (C4178 * C3414 + C93828 * C3496 + C4179 * C8524 + C93694 * C8649) *
                 C93585) *
                C28720 +
            ((C4178 * C5776 + C93828 * C5871 + C4179 * C16396 +
              C93694 * C16488) *
                 C20049 +
             (C4178 * C5779 + C93828 * C5874 + C4179 * C16398 +
              C93694 * C16490) *
                 C93585) *
                C28721) *
               C93639 * C1980 -
           (((C4179 * C5779 + C93694 * C5874 + C4178 * C1398 + C93828 * C1480) *
                 C93585 +
             (C4179 * C5776 + C93694 * C5871 + C4178 * C1390 + C93828 * C1472) *
                 C20049) *
                C28721 +
            ((C7659 + C7660) * C93585 + (C7661 + C7662) * C20049) * C28720 +
            ((C4208 + C4207) * C93585 + (C4206 + C4205) * C20049) * C28719) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C20049 +
             (C275 * C114 + C93706 * C282) * C93585) *
                C20044 +
            (C20666 + C20667) * C20045 + C20676 * C20046 + C20677 * C20047) *
               C93639 * C1979 -
           ((C20680 + C20681) * C20047 + (C20671 + C20670) * C20046 +
            (C20669 + C20668) * C20045 + (C20667 + C20666) * C20044) *
               C93639 * C1980) *
              C1981 +
          (((C21748 + C21749) * C20044 + (C21750 + C21751) * C20045 +
            (C21752 + C21753) * C20046 +
            ((C275 * C15551 + C93706 * C15745) * C20049 +
             (C275 * C15553 + C93706 * C15747) * C93585) *
                C20047) *
               C93639 * C1980 -
           ((C21753 + C21752) * C20047 + (C21751 + C21750) * C20046 +
            (C21749 + C21748) * C20045 +
            (C306 * C93585 + C305 * C20049) * C20044) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C4081 +
             (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
             C306 * C4076 + C307 * C4085 + C308 * C4077) *
                C93828 +
            (C5131 + C5132 + C5107 + C5108 + C5109 + C5110) * C93694) *
               C93639 * C1979 -
           ((C5133 + C5134 + C5135 + C5136 + C5137 + C5138) * C93694 +
            (C5110 + C5109 + C5108 + C5107 + C5132 + C5131) * C93828) *
               C93639 * C1980) *
              C1981 +
          (((C6770 + C6771 + C6772 + C6773 + C6774 + C6775) * C93828 +
            (C5128 * C4081 + C5127 * C4075 + C5126 * C4083 + C5125 * C4076 +
             (C275 * C811 + C93706 * C959) * C4085 +
             (C275 * C819 + C93706 * C967) * C4077) *
                C93694) *
               C93639 * C1980 -
           ((C6775 + C6774 + C6773 + C6772 + C6771 + C6770) * C93694 +
            (C310 * C4077 + C309 * C4085 + C308 * C4076 + C307 * C4083 +
             C306 * C4075 + C305 * C4081) *
                C93828) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
              C28878 * C1389 + C28721 * C1537) *
                 C20049 +
             (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
              C28878 * C1397 + C28721 * C1545) *
                 C93585) *
                C93828 +
            ((C34797 + C34798 + C34799) * C20049 +
             (C34800 + C34801 + C34802) * C93585) *
                C93694) *
               C93639 * C1979 -
           (((C34803 + C34804 + C34805) * C93585 +
             (C34806 + C34807 + C34808) * C20049) *
                C93694 +
            ((C34802 + C34801 + C34800) * C93585 +
             (C34799 + C34798 + C34797) * C20049) *
                C93828) *
               C93639 * C1980) *
              C1981 +
          ((((C31285 + C31284 + C31283) * C20049 +
             (C31282 + C31281 + C31280) * C93585) *
                C93828 +
            ((C28876 * C809 + C28719 * C957 + C28877 * C8521 + C28720 * C8750 +
              C28878 * C16396 + C28721 * C16566) *
                 C20049 +
             (C28876 * C817 + C28719 * C965 + C28877 * C8524 + C28720 * C8753 +
              C28878 * C16398 + C28721 * C16568) *
                 C93585) *
                C93694) *
               C93639 * C1980 -
           (((C31280 + C31281 + C31282) * C93585 +
             (C31283 + C31284 + C31285) * C20049) *
                C93694 +
            ((C28909 + C28908 + C28907) * C93585 +
             (C28906 + C28905 + C28904) * C20049) *
                C93828) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C20112 +
            (C20049 * C189 + C93585 * C362) * C20044 + C20749 * C20113 +
            C20750 * C20045 + C20751 * C20114 + C20752 * C20046 +
            C20753 * C20115 + C20754 * C20047) *
               C93706 * C93639 * C1979 -
           (C20755 * C20047 + C20756 * C20115 + C20754 * C20046 +
            C20753 * C20114 + C20752 * C20045 + C20751 * C20113 +
            C20750 * C20044 + C20749 * C20112) *
               C93706 * C93639 * C1980) *
              C1981 +
          ((C21832 * C20112 + C21833 * C20044 + C21834 * C20113 +
            C21835 * C20045 + C21836 * C20114 + C21837 * C20046 +
            (C20049 * C15551 + C93585 * C15553) * C20115 +
            (C20049 * C15667 + C93585 * C15850) * C20047) *
               C93706 * C93639 * C1980 -
           (C21837 * C20047 + C21836 * C20115 + C21835 * C20046 +
            C21834 * C20114 + C21833 * C20045 + C21832 * C20113 +
            (C20049 * C190 + C93585 * C363) * C20044 +
            (C20049 * C109 + C93585 * C115) * C20112) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C4178 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93828 +
            (C5240 + C5241 + C5242) * C4179 +
            (C5243 + C5244 + C5245) * C93694) *
               C93706 * C93639 * C1979 -
           ((C5246 + C5247 + C5248) * C93694 + (C5249 + C5250 + C5251) * C4179 +
            (C5245 + C5244 + C5243) * C93828 +
            (C5242 + C5241 + C5240) * C4178) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C6886 + C6887 + C6888) * C4178 + (C6889 + C6890 + C6891) * C93828 +
            (C4081 * C809 + C4075 * C817 + C4083 * C810 + C4076 * C818 +
             C4085 * C811 + C4077 * C819) *
                C4179 +
            (C4081 * C891 + C4075 * C1023 + C4083 * C892 + C4076 * C1024 +
             C4085 * C893 + C4077 * C1025) *
                C93694) *
               C93706 * C93639 * C1980 -
           ((C6891 + C6890 + C6889) * C93694 + (C6888 + C6887 + C6886) * C4179 +
            (C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
             C4081 * C190 + C4075 * C363) *
                C93828 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C4178) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C4178 +
             (C20049 * C189 + C93585 * C362) * C93828 + C20749 * C4179 +
             C20750 * C93694) *
                C28719 +
            (C35679 + C35680 + C35681 + C35682) * C28720 + C35705 * C28721) *
               C93639 * C1979 -
           ((C25321 * C93694 + C25322 * C4179 + C25323 * C93828 +
             C25324 * C4178) *
                C28721 +
            (C23106 * C93694 + C23107 * C4179 + C23108 * C93828 +
             C23109 * C4178) *
                C28720 +
            (C20752 * C93694 + C20751 * C4179 + C20750 * C93828 +
             C20749 * C4178) *
                C28719) *
               C93639 * C1980) *
              C1981 +
          (((C21832 * C4178 + C21833 * C93828 + C21834 * C4179 +
             C21835 * C93694) *
                C28719 +
            (C26210 * C4178 + C26211 * C93828 + C26212 * C4179 +
             C26213 * C93694) *
                C28720 +
            (C36549 * C4178 + C36550 * C93828 +
             (C20049 * C16396 + C93585 * C16398) * C4179 +
             (C20049 * C16488 + C93585 * C16644) * C93694) *
                C28721) *
               C93639 * C1980 -
           ((C36550 * C93694 + C36549 * C4179 +
             (C20049 * C1472 + C93585 * C1604) * C93828 +
             (C20049 * C1390 + C93585 * C1398) * C4178) *
                C28721 +
            (C26211 * C93694 + C26210 * C4179 + C27145 * C93828 +
             C27144 * C4178) *
                C28720 +
            (C21833 * C93694 + C21832 * C4179 +
             (C20049 * C190 + C93585 * C363) * C93828 +
             (C20049 * C109 + C93585 * C115) * C4178) *
                C28719) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
            C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
            C20046 * C1080 + C20269 * C4897 + C20274 + C20274 +
            C20047 * C5325) *
               C93585 * C93706 * C93639 * C1979 -
           (C20269 * C15550 + C20808 + C20808 + C20047 * C15963 +
            C20268 * C4897 + C20809 + C20809 + C20046 * C5325 + C20267 * C808 +
            C20810 + C20810 + C20045 * C1080 + C20266 * C807 + C20811 + C20811 +
            C20044 * C1079) *
               C93585 * C93706 * C93639 * C1980) *
              C1981 +
          ((C20266 * C806 + C21904 + C21904 + C20044 * C1078 + C20267 * C809 +
            C21905 + C21905 + C20045 * C1081 + C20268 * C4898 + C21906 +
            C21906 + C20046 * C5326 + C20269 * C15551 + C21907 + C21907 +
            C20047 * C15964) *
               C93585 * C93706 * C93639 * C1980 -
           (C20269 * C4898 + C20275 + C20275 + C20047 * C5326 + C20268 * C809 +
            C20276 + C20276 + C20046 * C1081 + C20267 * C806 + C20277 + C20277 +
            C20045 * C1078 + C20266 * C109 + C20278 + C20278 + C20044 * C420) *
               C93585 * C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
             C4444 + C4444 + C93694 * C1079) *
                C4075 +
            (C4477 + C4478) * C4076 + C4483 * C4077) *
               C93706 * C93639 * C1979 -
           ((C7008 + C7009) * C4077 + (C7010 + C7011) * C4076 +
            (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
             C5334 + C5334 + C93828 * C1079) *
                C4075) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C7011 + C7010) * C4075 + (C7009 + C7008) * C4076 +
            (C4440 * C804 + C6998 + C6998 + C93828 * C1076 + C4441 * C811 +
             C6999 + C6999 + C93694 * C1083) *
                C4077) *
               C93706 * C93639 * C1980 -
           ((C4481 + C4482) * C4077 + (C4480 + C4479) * C4076 +
            (C4478 + C4477) * C4075) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
             C4444 + C4444 + C93694 * C1079) *
                C93585 * C28719 +
            (C35809 + C35810) * C93585 * C28720 + C35816 * C28721) *
               C93639 * C1979 -
           ((C4441 * C16395 + C34957 + C34957 + C93694 * C16719 +
             C4440 * C5775 + C34958 + C34958 + C93828 * C6107) *
                C93585 * C28721 +
            (C4441 * C8520 + C8989 + C8989 + C93694 * C8984 + C4440 * C3409 +
             C8988 + C8988 + C93828 * C3709) *
                C93585 * C28720 +
            (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
             C5334 + C5334 + C93828 * C1079) *
                C93585 * C28719) *
               C93639 * C1980) *
              C1981 +
          (((C7011 + C7010) * C93585 * C28719 +
            (C4440 * C3410 + C8990 + C8990 + C93828 * C3710 + C4441 * C8521 +
             C8991 + C8991 + C93694 * C8985) *
                C93585 * C28720 +
            (C4440 * C5776 + C36649 + C36649 + C93828 * C6108 + C4441 * C16396 +
             C36650 + C36650 + C93694 * C16720) *
                C93585 * C28721) *
               C93639 * C1980 -
           ((C4441 * C5776 + C6120 + C6120 + C93694 * C6108 + C4440 * C1390 +
             C6119 + C6119 + C93828 * C1662) *
                C93585 * C28721 +
            (C7989 + C7990) * C93585 * C28720 +
            (C4478 + C4477) * C93585 * C28719) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20112 +
            (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
            C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
            C16059 * C20047) *
               C93585 * C93639 * C1979 -
           (C20869 * C20047 + C20679 * C20115 + C16059 * C20046 +
            C15769 * C20114 + C5429 * C20045 + C5130 * C20113 + C5426 * C20044 +
            C5123 * C20112) *
               C93585 * C93639 * C1980) *
              C1981 +
          ((C2162 * C20112 + C2391 * C20044 + C5128 * C20113 + C5428 * C20045 +
            C15767 * C20114 + C16058 * C20046 +
            (C275 * C15551 + C93706 * C15745) * C20115 +
            (C275 * C15667 + C93706 * C16052) * C20047) *
               C93585 * C93639 * C1980 -
           (C16058 * C20047 + C15767 * C20115 + C5428 * C20046 +
            C5128 * C20114 + C2391 * C20045 + C2162 * C20113 + C520 * C20044 +
            C305 * C20112) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C4178 +
             (C275 * C189 + C93706 * C501) * C93828 + C5123 * C4179 +
             C5426 * C93694) *
                C4075 +
            (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
               C93639 * C1979 -
           ((C7110 + C7111 + C7112 + C7113) * C4077 +
            (C7114 + C7115 + C7116 + C7117) * C4076 +
            (C5429 * C93694 + C5130 * C4179 + C5426 * C93828 + C5123 * C4178) *
                C4075) *
               C93639 * C1980) *
              C1981 +
          (((C7117 + C7116 + C7115 + C7114) * C4075 +
            (C7113 + C7112 + C7111 + C7110) * C4076 +
            (C2158 * C4178 + C2389 * C93828 +
             (C275 * C811 + C93706 * C959) * C4179 +
             (C275 * C893 + C93706 * C1149) * C93694) *
                C4077) *
               C93639 * C1980 -
           ((C4566 + C4567 + C4568 + C4569) * C4077 +
            (C4565 + C4564 + C4563 + C4562) * C4076 +
            (C4561 + C4560 + C4559 + C4558) * C4075) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C4178 +
            (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
             C28878 * C1471 + C28721 * C1727) *
                C93828 +
            (C34797 + C34798 + C34799) * C4179 +
            (C35049 + C35050 + C35051) * C93694) *
               C93585 * C93639 * C1979 -
           ((C35052 + C35053 + C35054) * C93694 +
            (C34806 + C34807 + C34808) * C4179 +
            (C35051 + C35050 + C35049) * C93828 +
            (C34799 + C34798 + C34797) * C4178) *
               C93585 * C93639 * C1980) *
              C1981 +
          (((C31285 + C31284 + C31283) * C4178 +
            (C31593 + C31592 + C31591) * C93828 +
            (C28876 * C809 + C28719 * C957 + C28877 * C8521 + C28720 * C8750 +
             C28878 * C16396 + C28721 * C16566) *
                C4179 +
            (C28876 * C891 + C28719 * C1147 + C28877 * C8646 + C28720 * C9092 +
             C28878 * C16488 + C28721 * C16808) *
                C93694) *
               C93585 * C93639 * C1980 -
           ((C31591 + C31592 + C31593) * C93694 +
            (C31283 + C31284 + C31285) * C4179 +
            (C29152 + C29151 + C29150) * C93828 +
            (C28906 + C28905 + C28904) * C4178) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C275 +
             (C20049 * C276 + C93585 * C579) * C93706) *
                C20044 +
            (C20921 + C20937) * C20045 + C20941 * C20046 + C20942 * C20047) *
               C93639 * C1979 -
           ((C20940 + C20932) * C20047 + (C20939 + C20927) * C20046 +
            (C20938 + C20924) * C20045 + (C20937 + C20921) * C20044) *
               C93639 * C1980) *
              C1981 +
          (((C22040 + C22052) * C20044 + (C22043 + C22053) * C20045 +
            (C22046 + C22054) * C20046 +
            ((C20049 * C15551 + C93585 * C15553) * C275 +
             (C20049 * C15745 + C93585 * C16134) * C93706) *
                C20047) *
               C93639 * C1980 -
           ((C22054 + C22046) * C20047 + (C22053 + C22043) * C20046 +
            (C22052 + C22040) * C20045 +
            ((C20049 * C277 + C93585 * C580) * C93706 +
             (C20049 * C109 + C93585 * C115) * C275) *
                C20044) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
              C4085 * C110 + C4077 * C116) *
                 C275 +
             (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
              C4085 * C278 + C4077 * C581) *
                 C93706) *
                C93828 +
            ((C5240 + C5241 + C5242) * C275 +
             (C5519 + C5520 + C5521) * C93706) *
                C93694) *
               C93639 * C1979 -
           (((C5522 + C5523 + C5524) * C93706 +
             (C5249 + C5250 + C5251) * C275) *
                C93694 +
            ((C5521 + C5520 + C5519) * C93706 +
             (C5242 + C5241 + C5240) * C275) *
                C93828) *
               C93639 * C1980) *
              C1981 +
          ((((C6886 + C6887 + C6888) * C275 +
             (C7222 + C7223 + C7224) * C93706) *
                C93828 +
            ((C4081 * C809 + C4075 * C817 + C4083 * C810 + C4076 * C818 +
              C4085 * C811 + C4077 * C819) *
                 C275 +
             (C4081 * C957 + C4075 * C1205 + C4083 * C958 + C4076 * C1206 +
              C4085 * C959 + C4077 * C1207) *
                 C93706) *
                C93694) *
               C93639 * C1980 -
           (((C7224 + C7223 + C7222) * C93706 +
             (C6888 + C6887 + C6886) * C275) *
                C93694 +
            ((C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
              C4081 * C277 + C4075 * C580) *
                 C93706 +
             (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
              C4081 * C109 + C4075 * C115) *
                 C275) *
                C93828) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C28876 +
             (C20049 * C276 + C93585 * C579) * C28719 + C25319 * C28877 +
             C25604 * C28720 + C25326 * C28878 + C25607 * C28721) *
                C93828 +
            (C35129 + C35130 + C35131 + C35132 + C35133 + C35134) * C93694) *
               C93639 * C1979 -
           ((C35135 + C35136 + C35137 + C35138 + C35139 + C35140) * C93694 +
            (C35134 + C35133 + C35132 + C35131 + C35130 + C35129) * C93828) *
               C93639 * C1980) *
              C1981 +
          (((C36847 + C36848 + C36849 + C36850 + C36851 + C36855) * C93828 +
            (C21834 * C28876 + C22050 * C28719 + C26212 * C28877 +
             C26525 * C28720 + (C20049 * C16396 + C93585 * C16398) * C28878 +
             (C20049 * C16566 + C93585 * C16884) * C28721) *
                C93694) *
               C93639 * C1980 -
           ((C36855 + C36851 + C36850 + C36849 + C36848 + C36847) * C93694 +
            ((C20049 * C1538 + C93585 * C1786) * C28721 +
             (C20049 * C1390 + C93585 * C1398) * C28878 + C27444 * C28720 +
             C27144 * C28877 + (C20049 * C277 + C93585 * C580) * C28719 +
             (C20049 * C109 + C93585 * C115) * C28876) *
                C93828) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
             C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
                C275 +
            (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
             C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
                C93706) *
               C93585 * C93639 * C1979 -
           ((C20115 * C15744 + C20047 * C16231 + C20114 * C5096 +
             C20046 * C5598 + C20113 * C956 + C20045 * C1262 + C20112 * C955 +
             C20044 * C1261) *
                C93706 +
            (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
             C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
             C20044 * C889) *
                C275) *
               C93585 * C93639 * C1980) *
              C1981 +
          (((C20112 * C806 + C20044 * C888 + C20113 * C809 + C20045 * C891 +
             C20114 * C4898 + C20046 * C5017 + C20115 * C15551 +
             C20047 * C15667) *
                C275 +
            (C20112 * C954 + C20044 * C1260 + C20113 * C957 + C20045 * C1263 +
             C20114 * C5097 + C20046 * C5599 + C20115 * C15745 +
             C20047 * C16232) *
                C93706) *
               C93585 * C93639 * C1980 -
           ((C20115 * C5097 + C20047 * C5599 + C20114 * C957 + C20046 * C1263 +
             C20113 * C954 + C20045 * C1260 + C20112 * C277 + C20044 * C636) *
                C93706 +
            (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
             C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
                C275) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C275 +
             (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                 C93706) *
                C4075 +
            ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
            C4742 * C4077) *
               C93639 * C1979 -
           (((C7331 + C7332) * C93706 + (C6666 + C6667) * C275) * C4077 +
            ((C7333 + C7334) * C93706 + (C6670 + C6671) * C275) * C4076 +
            ((C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                 C93706 +
             (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                 C275) *
                C4075) *
               C93639 * C1980) *
              C1981 +
          ((((C6671 + C6670) * C275 + (C7334 + C7333) * C93706) * C4075 +
            ((C6667 + C6666) * C275 + (C7332 + C7331) * C93706) * C4076 +
            ((C4178 * C804 + C93828 * C886 + C4179 * C811 + C93694 * C893) *
                 C275 +
             (C4178 * C952 + C93828 * C1258 + C4179 * C959 + C93694 * C1265) *
                 C93706) *
                C4077) *
               C93639 * C1980 -
           (((C4738 + C4739) * C93706 + (C4215 + C4216) * C275) * C4077 +
            ((C4737 + C4736) * C93706 + (C4210 + C4209) * C275) * C4076 +
            ((C4735 + C4734) * C93706 + (C4206 + C4205) * C275) * C4075) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C28876 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C28719 +
            (C35511 + C35512) * C28877 + (C36060 + C36061) * C28720 +
            C35523 * C28878 + C36066 * C28721) *
               C93585 * C93639 * C1979 -
           ((C4179 * C16565 + C93694 * C16959 + C4178 * C5950 +
             C93828 * C6350) *
                C28721 +
            (C4179 * C16395 + C93694 * C16487 + C4178 * C5775 +
             C93828 * C5870) *
                C28878 +
            (C4179 * C8749 + C93694 * C9305 + C4178 * C3565 + C93828 * C3923) *
                C28720 +
            (C4179 * C8520 + C93694 * C8645 + C4178 * C3409 + C93828 * C3491) *
                C28877 +
            (C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                C28719 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C28876) *
               C93585 * C93639 * C1980) *
              C1981 +
          (((C6671 + C6670) * C28876 + (C7334 + C7333) * C28719 +
            (C4178 * C3410 + C93828 * C3492 + C4179 * C8521 + C93694 * C8646) *
                C28877 +
            (C4178 * C3566 + C93828 * C3924 + C4179 * C8750 + C93694 * C9306) *
                C28720 +
            (C4178 * C5776 + C93828 * C5871 + C4179 * C16396 +
             C93694 * C16488) *
                C28878 +
            (C4178 * C5951 + C93828 * C6351 + C4179 * C16566 +
             C93694 * C16960) *
                C28721) *
               C93585 * C93639 * C1980 -
           ((C4179 * C5951 + C93694 * C6351 + C4178 * C1538 + C93828 * C1844) *
                C28721 +
            (C4179 * C5776 + C93694 * C5871 + C4178 * C1390 + C93828 * C1472) *
                C28878 +
            (C8309 + C8310) * C28720 + (C7661 + C7662) * C28877 +
            (C4735 + C4734) * C28719 + (C4206 + C4205) * C28876) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
            C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
               C93585 * C93639 * C1979 -
           (C21050 * C20047 + C16321 * C20046 + C5701 * C20045 +
            C5698 * C20044) *
               C93585 * C93639 * C1980) *
              C1981 +
          ((C2626 * C20044 + C5700 * C20045 + C16320 * C20046 +
            (C713 * C15551 + C16315 + C16315 + C93706 * C16308) * C20047) *
               C93585 * C93639 * C1980 -
           (C16320 * C20047 + C5700 * C20046 + C2626 * C20045 + C743 * C20044) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
             C5698 * C93694) *
                C4075 +
            (C4817 + C4818) * C4076 + C4823 * C4077) *
               C93639 * C1979 -
           ((C7433 + C7434) * C4077 + (C7435 + C7436) * C4076 +
            (C5701 * C93694 + C5698 * C93828) * C4075) *
               C93639 * C1980) *
              C1981 +
          (((C7436 + C7435) * C4075 + (C7434 + C7433) * C4076 +
            (C2624 * C93828 +
             (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C93694) *
                C4077) *
               C93639 * C1980 -
           ((C4821 + C4822) * C4077 + (C4820 + C4819) * C4076 +
            (C4818 + C4817) * C4075) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
             C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
             C29395 + C28721 * C1901) *
                C93828 +
            (C35316 + C35317 + C35318) * C93694) *
               C93585 * C93639 * C1979 -
           ((C35319 + C35320 + C35321) * C93694 +
            (C35318 + C35317 + C35316) * C93828) *
               C93585 * C93639 * C1980) *
              C1981 +
          (((C31914 + C31913 + C31912) * C93828 +
            (C29389 * C809 + C30112 + C30112 + C28719 * C1321 + C29390 * C8521 +
             C30113 + C30113 + C28720 * C9407 + C29391 * C16396 + C30114 +
             C30114 + C28721 * C17036) *
                C93694) *
               C93585 * C93639 * C1980 -
           ((C31912 + C31913 + C31914) * C93694 +
            (C29431 + C29430 + C29429) * C93828) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 *
                C20044 +
            C20558 * C20045 + C20559 * C20046 + C20560 * C20047) *
               C2695 -
           (C22874 * C20047 + C22875 * C20046 + C22876 * C20045 +
            (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) * C93706 *
                C20044) *
               C2696) *
              C1979 +
          ((C22876 * C20044 + C22875 * C20045 + C22874 * C20046 +
            (C20048 * C22854 + C22864 + C22864 + C93585 * C22856) * C93706 *
                C20047) *
               C2696 -
           (C20561 * C20047 + C20560 * C20046 + C20559 * C20045 +
            C20558 * C20044) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
             C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
             C4077 * C122) *
                C93706 * C93828 +
            (C4937 + C4938 + C4939) * C93706 * C93694) *
               C2695 -
           ((C8545 + C8546 + C8547) * C93706 * C93694 +
            (C4084 * C1386 + C5788 + C5788 + C4077 * C1402 + C4082 * C1387 +
             C5789 + C5789 + C4076 * C1403 + C4080 * C1388 + C5790 + C5790 +
             C4075 * C1404) *
                C93706 * C93828) *
               C2696) *
              C1979 +
          (((C8547 + C8546 + C8545) * C93706 * C93828 +
            (C4080 * C8520 + C8536 + C8536 + C4075 * C8526 + C4082 * C8521 +
             C8537 + C8537 + C4076 * C8527 + C4084 * C8522 + C8538 + C8538 +
             C4077 * C8528) *
                C93706 * C93694) *
               C2696 -
           ((C4940 + C4941 + C4942) * C93706 * C93694 +
            (C4939 + C4938 + C4937) * C93706 * C93828) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C28719 +
             C25027 * C28720 + C25030 * C28721) *
                C93828 +
            (C34619 + C34620 + C34621) * C93694) *
               C2695 -
           ((C38086 + C38087 + C38088) * C93694 +
            (C35410 * C28721 + C25030 * C28720 + C25027 * C28719) * C93828) *
               C2696) *
              C1979 +
          (((C38088 + C38087 + C38086) * C93828 +
            (C22872 * C28719 + C25028 * C28720 +
             (C20048 * C25002 + C25018 + C25018 + C93585 * C25006) * C28721) *
                C93694) *
               C2696 -
           ((C34622 + C34623 + C34624) * C93694 +
            (C34621 + C34620 + C34619) * C93828) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
             C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
                C20049 +
            (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
             C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
                C93585) *
               C93706 * C2695 -
           ((C20115 * C19097 + C20047 * C19223 + C20114 * C8523 +
             C20046 * C8648 + C20113 * C3413 + C20045 * C3495 + C20112 * C1396 +
             C20044 * C1478) *
                C93585 +
            (C20115 * C19095 + C20047 * C19221 + C20114 * C8520 +
             C20046 * C8645 + C20113 * C3409 + C20045 * C3491 + C20112 * C1388 +
             C20044 * C1470) *
                C20049) *
               C93706 * C2696) *
              C1979 +
          (((C20112 * C3409 + C20044 * C3491 + C20113 * C8520 + C20045 * C8645 +
             C20114 * C19095 + C20046 * C19221 + C20115 * C22854 +
             C20047 * C22942) *
                C20049 +
            (C20112 * C3413 + C20044 * C3495 + C20113 * C8523 + C20045 * C8648 +
             C20114 * C19097 + C20046 * C19223 + C20115 * C22855 +
             C20047 * C22943) *
                C93585) *
               C93706 * C2696 -
           ((C20115 * C15552 + C20047 * C15668 + C20114 * C4900 +
             C20046 * C5019 + C20113 * C816 + C20045 * C898 + C20112 * C815 +
             C20044 * C897) *
                C93585 +
            (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
             C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
             C20044 * C889) *
                C20049) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C4081 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C4075 +
            (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
            C4218 * C4077) *
               C93706 * C2695 -
           ((C7655 + C7656) * C4077 + (C7657 + C7658) * C4085 +
            (C7659 + C7660) * C4076 + (C7661 + C7662) * C4083 +
            (C4179 * C3413 + C93694 * C3495 + C4178 * C1396 + C93828 * C1478) *
                C4075 +
            (C4179 * C3409 + C93694 * C3491 + C4178 * C1388 + C93828 * C1470) *
                C4081) *
               C93706 * C2696) *
              C1979 +
          (((C4178 * C3409 + C93828 * C3491 + C4179 * C8520 + C93694 * C8645) *
                C4081 +
            (C4178 * C3413 + C93828 * C3495 + C4179 * C8523 + C93694 * C8648) *
                C4075 +
            (C4178 * C3410 + C93828 * C3492 + C4179 * C8521 + C93694 * C8646) *
                C4083 +
            (C4178 * C3414 + C93828 * C3496 + C4179 * C8524 + C93694 * C8649) *
                C4076 +
            (C4178 * C3411 + C93828 * C3493 + C4179 * C8522 + C93694 * C8647) *
                C4085 +
            (C4178 * C3415 + C93828 * C3497 + C4179 * C8525 + C93694 * C8650) *
                C4077) *
               C93706 * C2696 -
           ((C6664 + C6665) * C4077 + (C6666 + C6667) * C4085 +
            (C6668 + C6669) * C4076 + (C6670 + C6671) * C4083 +
            (C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                C4075 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C4081) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C20049 +
             (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                 C93585) *
                C28719 +
            ((C35511 + C35512) * C20049 + (C35513 + C35514) * C93585) * C28720 +
            C35527 * C28721) *
               C2695 -
           (((C35519 + C35520) * C93585 + (C35521 + C35522) * C20049) * C28721 +
            ((C35518 + C35517) * C93585 + (C35516 + C35515) * C20049) * C28720 +
            ((C35514 + C35513) * C93585 + (C35512 + C35511) * C20049) *
                C28719) *
               C2696) *
              C1979 +
          ((((C38203 + C38204) * C20049 + (C38205 + C38206) * C93585) * C28719 +
            ((C38207 + C38208) * C20049 + (C38209 + C38210) * C93585) * C28720 +
            ((C4178 * C25001 + C93828 * C25104 + C4179 * C25002 +
              C93694 * C25105) *
                 C20049 +
             (C4178 * C25003 + C93828 * C25106 + C4179 * C25004 +
              C93694 * C25107) *
                 C93585) *
                C28721) *
               C2696 -
           (((C38210 + C38209) * C93585 + (C38208 + C38207) * C20049) * C28721 +
            ((C38206 + C38205) * C93585 + (C38204 + C38203) * C20049) * C28720 +
            ((C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                 C93585 +
             (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                 C20049) *
                C28719) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C20049 +
             (C275 * C114 + C93706 * C282) * C93585) *
                C20044 +
            (C20666 + C20667) * C20045 + C20676 * C20046 + C20677 * C20047) *
               C2695 -
           ((C23023 + C23024) * C20047 + (C23017 + C23018) * C20046 +
            (C23019 + C23020) * C20045 +
            ((C275 * C1396 + C93706 * C1544) * C93585 +
             (C275 * C1388 + C93706 * C1536) * C20049) *
                C20044) *
               C2696) *
              C1979 +
          (((C23020 + C23019) * C20044 + (C23018 + C23017) * C20045 +
            (C23024 + C23023) * C20046 +
            ((C275 * C22854 + C93706 * C23010) * C20049 +
             (C275 * C22855 + C93706 * C23011) * C93585) *
                C20047) *
               C2696 -
           ((C20680 + C20681) * C20047 + (C20671 + C20670) * C20046 +
            (C20669 + C20668) * C20045 + (C20667 + C20666) * C20044) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C4081 +
             (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
             C306 * C4076 + C307 * C4085 + C308 * C4077) *
                C93828 +
            (C5131 + C5132 + C5107 + C5108 + C5109 + C5110) * C93694) *
               C2695 -
           ((C8756 + C8757 + C8758 + C8759 + C8766 + C8767) * C93694 +
            (C2873 * C4077 + C2874 * C4085 + C2875 * C4076 + C2876 * C4083 +
             (C275 * C1396 + C93706 * C1544) * C4075 +
             (C275 * C1388 + C93706 * C1536) * C4081) *
                C93828) *
               C2696) *
              C1979 +
          (((C8767 + C8766 + C8759 + C8758 + C8757 + C8756) * C93828 +
            ((C275 * C8520 + C93706 * C8749) * C4081 +
             (C275 * C8523 + C93706 * C8752) * C4075 +
             (C275 * C8521 + C93706 * C8750) * C4083 +
             (C275 * C8524 + C93706 * C8753) * C4076 +
             (C275 * C8522 + C93706 * C8751) * C4085 +
             (C275 * C8525 + C93706 * C8754) * C4077) *
                C93694) *
               C2696 -
           ((C5133 + C5134 + C5135 + C5136 + C5137 + C5138) * C93694 +
            (C5110 + C5109 + C5108 + C5107 + C5132 + C5131) * C93828) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
              C28878 * C1389 + C28721 * C1537) *
                 C20049 +
             (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
              C28878 * C1397 + C28721 * C1545) *
                 C93585) *
                C93828 +
            ((C34797 + C34798 + C34799) * C20049 +
             (C34800 + C34801 + C34802) * C93585) *
                C93694) *
               C2695 -
           (((C38321 + C38322 + C38323) * C93585 +
             (C38324 + C38325 + C38326) * C20049) *
                C93694 +
            ((C28878 * C10967 + C28721 * C11199 + C28877 * C1397 +
              C28720 * C1545 + C28876 * C1396 + C28719 * C1544) *
                 C93585 +
             (C28878 * C10964 + C28721 * C11196 + C28877 * C1389 +
              C28720 * C1537 + C28876 * C1388 + C28719 * C1536) *
                 C20049) *
                C93828) *
               C2696) *
              C1979 +
          ((((C38326 + C38325 + C38324) * C20049 +
             (C38323 + C38322 + C38321) * C93585) *
                C93828 +
            ((C28876 * C8520 + C28719 * C8749 + C28877 * C16395 +
              C28720 * C16565 + C28878 * C25002 + C28721 * C25219) *
                 C20049 +
             (C28876 * C8523 + C28719 * C8752 + C28877 * C16397 +
              C28720 * C16567 + C28878 * C25004 + C28721 * C25221) *
                 C93585) *
                C93694) *
               C2696 -
           (((C34803 + C34804 + C34805) * C93585 +
             (C34806 + C34807 + C34808) * C20049) *
                C93694 +
            ((C34802 + C34801 + C34800) * C93585 +
             (C34799 + C34798 + C34797) * C20049) *
                C93828) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C20112 +
            (C20049 * C189 + C93585 * C362) * C20044 + C20749 * C20113 +
            C20750 * C20045 + C20751 * C20114 + C20752 * C20046 +
            C20753 * C20115 + C20754 * C20047) *
               C93706 * C2695 -
           (C23104 * C20047 + C23105 * C20115 + C23106 * C20046 +
            C23107 * C20114 + C23108 * C20045 + C23109 * C20113 +
            (C20049 * C1470 + C93585 * C1602) * C20044 +
            (C20049 * C1388 + C93585 * C1396) * C20112) *
               C93706 * C2696) *
              C1979 +
          ((C23109 * C20112 + C23108 * C20044 + C23107 * C20113 +
            C23106 * C20045 + C23105 * C20114 + C23104 * C20046 +
            (C20049 * C22854 + C93585 * C22855) * C20115 +
            (C20049 * C22942 + C93585 * C23090) * C20047) *
               C93706 * C2696 -
           (C20755 * C20047 + C20756 * C20115 + C20754 * C20046 +
            C20753 * C20114 + C20752 * C20045 + C20751 * C20113 +
            C20750 * C20044 + C20749 * C20112) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C4178 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93828 +
            (C5240 + C5241 + C5242) * C4179 +
            (C5243 + C5244 + C5245) * C93694) *
               C93706 * C2695 -
           ((C8881 + C8882 + C8883) * C93694 + (C8884 + C8885 + C8886) * C4179 +
            (C4085 * C1468 + C4077 * C1600 + C4083 * C1469 + C4076 * C1601 +
             C4081 * C1470 + C4075 * C1602) *
                C93828 +
            (C4085 * C1386 + C4077 * C1394 + C4083 * C1387 + C4076 * C1395 +
             C4081 * C1388 + C4075 * C1396) *
                C4178) *
               C93706 * C2696) *
              C1979 +
          (((C8886 + C8885 + C8884) * C4178 + (C8883 + C8882 + C8881) * C93828 +
            (C4081 * C8520 + C4075 * C8523 + C4083 * C8521 + C4076 * C8524 +
             C4085 * C8522 + C4077 * C8525) *
                C4179 +
            (C4081 * C8645 + C4075 * C8865 + C4083 * C8646 + C4076 * C8866 +
             C4085 * C8647 + C4077 * C8867) *
                C93694) *
               C93706 * C2696 -
           ((C5246 + C5247 + C5248) * C93694 + (C5249 + C5250 + C5251) * C4179 +
            (C5245 + C5244 + C5243) * C93828 +
            (C5242 + C5241 + C5240) * C4178) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C4178 +
             (C20049 * C189 + C93585 * C362) * C93828 + C20749 * C4179 +
             C20750 * C93694) *
                C28719 +
            (C35679 + C35680 + C35681 + C35682) * C28720 + C35705 * C28721) *
               C2695 -
           ((C35701 + C35702 + C35703 + C35704) * C28721 +
            (C35686 + C35685 + C35684 + C35683) * C28720 +
            (C35682 + C35681 + C35680 + C35679) * C28719) *
               C2696) *
              C1979 +
          (((C38425 + C38426 + C38427 + C38428) * C28719 +
            (C38429 + C38430 + C38431 + C38432) * C28720 +
            (C35697 * C4178 + C35696 * C93828 +
             (C20049 * C25002 + C93585 * C25004) * C4179 +
             (C20049 * C25105 + C93585 * C25297) * C93694) *
                C28721) *
               C2696 -
           ((C38432 + C38431 + C38430 + C38429) * C28721 +
            (C38428 + C38427 + C38426 + C38425) * C28720 +
            (C20752 * C93694 + C20751 * C4179 + C20750 * C93828 +
             C20749 * C4178) *
                C28719) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[36] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C20266 * C108 + C20271 + C20271 + C20044 * C419 +
                      C20267 * C807 + C20272 + C20272 + C20045 * C1079 +
                      C20268 * C808 + C20273 + C20273 + C20046 * C1080 +
                      C20269 * C4897 + C20274 + C20274 + C20047 * C5325) *
                         C93585 * C93706 * C2695 -
                     (C20269 * C19095 + C21318 + C21318 + C20047 * C19563 +
                      C20268 * C8520 + C21319 + C21319 + C20046 * C8984 +
                      C20267 * C3409 + C21320 + C21320 + C20045 * C3709 +
                      C20266 * C1388 + C21321 + C21321 + C20044 * C1660) *
                         C93585 * C93706 * C2696) *
                        C1979 +
                    ((C20266 * C3409 + C23177 + C23177 + C20044 * C3709 +
                      C20267 * C8520 + C23178 + C23178 + C20045 * C8984 +
                      C20268 * C19095 + C23179 + C23179 + C20046 * C19563 +
                      C20269 * C22854 + C23180 + C23180 + C20047 * C23175) *
                         C93585 * C93706 * C2696 -
                     (C20269 * C15550 + C20808 + C20808 + C20047 * C15963 +
                      C20268 * C4897 + C20809 + C20809 + C20046 * C5325 +
                      C20267 * C808 + C20810 + C20810 + C20045 * C1080 +
                      C20266 * C807 + C20811 + C20811 + C20044 * C1079) *
                         C93585 * C93706 * C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 +
                       C4441 * C807 + C4444 + C4444 + C93694 * C1079) *
                          C4075 +
                      (C4477 + C4478) * C4076 + C4483 * C4077) *
                         C93706 * C2695 -
                     ((C7987 + C7988) * C4077 + (C7989 + C7990) * C4076 +
                      (C4441 * C3409 + C6115 + C6115 + C93694 * C3709 +
                       C4440 * C1388 + C6116 + C6116 + C93828 * C1660) *
                          C4075) *
                         C93706 * C2696) *
                        C1979 +
                    (((C4440 * C3409 + C8988 + C8988 + C93828 * C3709 +
                       C4441 * C8520 + C8989 + C8989 + C93694 * C8984) *
                          C4075 +
                      (C4440 * C3410 + C8990 + C8990 + C93828 * C3710 +
                       C4441 * C8521 + C8991 + C8991 + C93694 * C8985) *
                          C4076 +
                      (C4440 * C3411 + C8992 + C8992 + C93828 * C3711 +
                       C4441 * C8522 + C8993 + C8993 + C93694 * C8986) *
                          C4077) *
                         C93706 * C2696 -
                     ((C7008 + C7009) * C4077 + (C7010 + C7011) * C4076 +
                      (C4441 * C808 + C5333 + C5333 + C93694 * C1080 +
                       C4440 * C807 + C5334 + C5334 + C93828 * C1079) *
                          C4075) *
                         C93706 * C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 +
                       C4441 * C807 + C4444 + C4444 + C93694 * C1079) *
                          C93585 * C28719 +
                      (C35809 + C35810) * C93585 * C28720 + C35816 * C28721) *
                         C2695 -
                     ((C35813 + C35814) * C93585 * C28721 +
                      (C35812 + C35811) * C93585 * C28720 +
                      (C35810 + C35809) * C93585 * C28719) *
                         C2696) *
                        C1979 +
                    (((C38549 + C38550) * C93585 * C28719 +
                      (C38551 + C38552) * C93585 * C28720 +
                      (C4440 * C25001 + C38539 + C38539 + C93828 * C25408 +
                       C4441 * C25002 + C38540 + C38540 + C93694 * C25409) *
                          C93585 * C28721) *
                         C2696 -
                     ((C38552 + C38551) * C93585 * C28721 +
                      (C38550 + C38549) * C93585 * C28720 +
                      (C4441 * C808 + C5333 + C5333 + C93694 * C1080 +
                       C4440 * C807 + C5334 + C5334 + C93828 * C1079) *
                          C93585 * C28719) *
                         C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20112 +
            (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
            C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
            C16059 * C20047) *
               C93585 * C2695 -
           (C23250 * C20047 + C23022 * C20115 + C19674 * C20046 +
            C19339 * C20114 + C9097 * C20045 + C8765 * C20113 +
            (C275 * C1470 + C93706 * C1726) * C20044 +
            (C275 * C1388 + C93706 * C1536) * C20112) *
               C93585 * C2696) *
              C1979 +
          ((C8765 * C20112 + C9097 * C20044 + C19339 * C20113 +
            C19674 * C20045 + C23022 * C20114 + C23250 * C20046 +
            (C275 * C22854 + C93706 * C23010) * C20115 +
            (C275 * C22942 + C93706 * C23246) * C20047) *
               C93585 * C2696 -
           (C20869 * C20047 + C20679 * C20115 + C16059 * C20046 +
            C15769 * C20114 + C5429 * C20045 + C5130 * C20113 + C5426 * C20044 +
            C5123 * C20112) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C4178 +
             (C275 * C189 + C93706 * C501) * C93828 + C5123 * C4179 +
             C5426 * C93694) *
                C4075 +
            (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
               C2695 -
           ((C8101 + C8091 + C8092 + C8093) * C4077 +
            (C8102 + C8096 + C8097 + C8098) * C4076 +
            (C9097 * C93694 + C8765 * C4179 +
             (C275 * C1470 + C93706 * C1726) * C93828 +
             (C275 * C1388 + C93706 * C1536) * C4178) *
                C4075) *
               C2696) *
              C1979 +
          (((C8765 * C4178 + C9097 * C93828 +
             (C275 * C8520 + C93706 * C8749) * C4179 +
             (C275 * C8645 + C93706 * C9091) * C93694) *
                C4075 +
            (C7772 * C4178 + C8100 * C93828 +
             (C275 * C8521 + C93706 * C8750) * C4179 +
             (C275 * C8646 + C93706 * C9092) * C93694) *
                C4076 +
            (C7770 * C4178 + C8099 * C93828 +
             (C275 * C8522 + C93706 * C8751) * C4179 +
             (C275 * C8647 + C93706 * C9093) * C93694) *
                C4077) *
               C2696 -
           ((C7110 + C7111 + C7112 + C7113) * C4077 +
            (C7114 + C7115 + C7116 + C7117) * C4076 +
            (C5429 * C93694 + C5130 * C4179 + C5426 * C93828 + C5123 * C4178) *
                C4075) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C4178 +
            (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
             C28878 * C1471 + C28721 * C1727) *
                C93828 +
            (C34797 + C34798 + C34799) * C4179 +
            (C35049 + C35050 + C35051) * C93694) *
               C93585 * C2695 -
           ((C38657 + C38658 + C38659) * C93694 +
            (C38324 + C38325 + C38326) * C4179 +
            (C28878 * C11080 + C28721 * C11495 + C28877 * C1471 +
             C28720 * C1727 + C28876 * C1470 + C28719 * C1726) *
                C93828 +
            (C28878 * C10964 + C28721 * C11196 + C28877 * C1389 +
             C28720 * C1537 + C28876 * C1388 + C28719 * C1536) *
                C4178) *
               C93585 * C2696) *
              C1979 +
          (((C38326 + C38325 + C38324) * C4178 +
            (C38659 + C38658 + C38657) * C93828 +
            (C28876 * C8520 + C28719 * C8749 + C28877 * C16395 +
             C28720 * C16565 + C28878 * C25002 + C28721 * C25219) *
                C4179 +
            (C28876 * C8645 + C28719 * C9091 + C28877 * C16487 +
             C28720 * C16807 + C28878 * C25105 + C28721 * C25518) *
                C93694) *
               C93585 * C2696 -
           ((C35052 + C35053 + C35054) * C93694 +
            (C34806 + C34807 + C34808) * C4179 +
            (C35051 + C35050 + C35049) * C93828 +
            (C34799 + C34798 + C34797) * C4178) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C275 +
             (C20049 * C276 + C93585 * C579) * C93706) *
                C20044 +
            (C20921 + C20937) * C20045 + C20941 * C20046 + C20942 * C20047) *
               C2695 -
           ((C23330 + C23320) * C20047 + (C23331 + C23323) * C20046 +
            (C23332 + C23326) * C20045 +
            ((C20049 * C1536 + C93585 * C1784) * C93706 +
             (C20049 * C1388 + C93585 * C1396) * C275) *
                C20044) *
               C2696) *
              C1979 +
          (((C23326 + C23332) * C20044 + (C23323 + C23331) * C20045 +
            (C23320 + C23330) * C20046 +
            ((C20049 * C22854 + C93585 * C22855) * C275 +
             (C20049 * C23010 + C93585 * C23316) * C93706) *
                C20047) *
               C2696 -
           ((C20940 + C20932) * C20047 + (C20939 + C20927) * C20046 +
            (C20938 + C20924) * C20045 + (C20937 + C20921) * C20044) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
              C4085 * C110 + C4077 * C116) *
                 C275 +
             (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
              C4085 * C278 + C4077 * C581) *
                 C93706) *
                C93828 +
            ((C5240 + C5241 + C5242) * C275 +
             (C5519 + C5520 + C5521) * C93706) *
                C93694) *
               C2695 -
           (((C9205 + C9206 + C9207) * C93706 +
             (C8884 + C8885 + C8886) * C275) *
                C93694 +
            ((C4085 * C1534 + C4077 * C1782 + C4083 * C1535 + C4076 * C1783 +
              C4081 * C1536 + C4075 * C1784) *
                 C93706 +
             (C4085 * C1386 + C4077 * C1394 + C4083 * C1387 + C4076 * C1395 +
              C4081 * C1388 + C4075 * C1396) *
                 C275) *
                C93828) *
               C2696) *
              C1979 +
          ((((C8886 + C8885 + C8884) * C275 +
             (C9207 + C9206 + C9205) * C93706) *
                C93828 +
            ((C4081 * C8520 + C4075 * C8523 + C4083 * C8521 + C4076 * C8524 +
              C4085 * C8522 + C4077 * C8525) *
                 C275 +
             (C4081 * C8749 + C4075 * C9195 + C4083 * C8750 + C4076 * C9196 +
              C4085 * C8751 + C4077 * C9197) *
                 C93706) *
                C93694) *
               C2696 -
           (((C5522 + C5523 + C5524) * C93706 +
             (C5249 + C5250 + C5251) * C275) *
                C93694 +
            ((C5521 + C5520 + C5519) * C93706 +
             (C5242 + C5241 + C5240) * C275) *
                C93828) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C28876 +
             (C20049 * C276 + C93585 * C579) * C28719 + C25319 * C28877 +
             C25604 * C28720 + C25326 * C28878 + C25607 * C28721) *
                C93828 +
            (C35129 + C35130 + C35131 + C35132 + C35133 + C35134) * C93694) *
               C2695 -
           ((C38758 + C38759 + C38760 + C38761 + C38762 + C38763) * C93694 +
            (C35972 * C28721 + C35699 * C28878 + C25607 * C28720 +
             C25326 * C28877 + C25604 * C28719 + C25319 * C28876) *
                C93828) *
               C2696) *
              C1979 +
          (((C38763 + C38762 + C38761 + C38760 + C38759 + C38758) * C93828 +
            (C23107 * C28876 + C23328 * C28719 + C25322 * C28877 +
             C25605 * C28720 + (C20049 * C25002 + C93585 * C25004) * C28878 +
             (C20049 * C25219 + C93585 * C25594) * C28721) *
                C93694) *
               C2696 -
           ((C35135 + C35136 + C35137 + C35138 + C35139 + C35140) * C93694 +
            (C35134 + C35133 + C35132 + C35131 + C35130 + C35129) * C93828) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
             C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
                C275 +
            (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
             C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
                C93706) *
               C93585 * C2695 -
           ((C20115 * C19323 + C20047 * C19884 + C20114 * C8749 +
             C20046 * C9305 + C20113 * C3565 + C20045 * C3923 + C20112 * C1536 +
             C20044 * C1842) *
                C93706 +
            (C20115 * C19095 + C20047 * C19221 + C20114 * C8520 +
             C20046 * C8645 + C20113 * C3409 + C20045 * C3491 + C20112 * C1388 +
             C20044 * C1470) *
                C275) *
               C93585 * C2696) *
              C1979 +
          (((C20112 * C3409 + C20044 * C3491 + C20113 * C8520 + C20045 * C8645 +
             C20114 * C19095 + C20046 * C19221 + C20115 * C22854 +
             C20047 * C22942) *
                C275 +
            (C20112 * C3565 + C20044 * C3923 + C20113 * C8749 + C20045 * C9305 +
             C20114 * C19323 + C20046 * C19884 + C20115 * C23010 +
             C20047 * C23398) *
                C93706) *
               C93585 * C2696 -
           ((C20115 * C15744 + C20047 * C16231 + C20114 * C5096 +
             C20046 * C5598 + C20113 * C956 + C20045 * C1262 + C20112 * C955 +
             C20044 * C1261) *
                C93706 +
            (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
             C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
             C20044 * C889) *
                C275) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C275 +
             (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                 C93706) *
                C4075 +
            ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
            C4742 * C4077) *
               C2695 -
           (((C8307 + C8308) * C93706 + (C7657 + C7658) * C275) * C4077 +
            ((C8309 + C8310) * C93706 + (C7661 + C7662) * C275) * C4076 +
            ((C4179 * C3565 + C93694 * C3923 + C4178 * C1536 + C93828 * C1842) *
                 C93706 +
             (C4179 * C3409 + C93694 * C3491 + C4178 * C1388 + C93828 * C1470) *
                 C275) *
                C4075) *
               C2696) *
              C1979 +
          ((((C4178 * C3409 + C93828 * C3491 + C4179 * C8520 + C93694 * C8645) *
                 C275 +
             (C4178 * C3565 + C93828 * C3923 + C4179 * C8749 + C93694 * C9305) *
                 C93706) *
                C4075 +
            ((C4178 * C3410 + C93828 * C3492 + C4179 * C8521 + C93694 * C8646) *
                 C275 +
             (C4178 * C3566 + C93828 * C3924 + C4179 * C8750 + C93694 * C9306) *
                 C93706) *
                C4076 +
            ((C4178 * C3411 + C93828 * C3493 + C4179 * C8522 + C93694 * C8647) *
                 C275 +
             (C4178 * C3567 + C93828 * C3925 + C4179 * C8751 + C93694 * C9307) *
                 C93706) *
                C4077) *
               C2696 -
           (((C7331 + C7332) * C93706 + (C6666 + C6667) * C275) * C4077 +
            ((C7333 + C7334) * C93706 + (C6670 + C6671) * C275) * C4076 +
            ((C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                 C93706 +
             (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                 C275) *
                C4075) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C28876 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C28719 +
            (C35511 + C35512) * C28877 + (C36060 + C36061) * C28720 +
            C35523 * C28878 + C36066 * C28721) *
               C93585 * C2695 -
           ((C36064 + C36065) * C28721 + (C35521 + C35522) * C28878 +
            (C36063 + C36062) * C28720 + (C35516 + C35515) * C28877 +
            (C36061 + C36060) * C28719 + (C35512 + C35511) * C28876) *
               C93585 * C2696) *
              C1979 +
          (((C38203 + C38204) * C28876 + (C38870 + C38871) * C28719 +
            (C38207 + C38208) * C28877 + (C38872 + C38873) * C28720 +
            (C4178 * C25001 + C93828 * C25104 + C4179 * C25002 +
             C93694 * C25105) *
                C28878 +
            (C4178 * C25218 + C93828 * C25681 + C4179 * C25219 +
             C93694 * C25682) *
                C28721) *
               C93585 * C2696 -
           ((C38873 + C38872) * C28721 + (C38208 + C38207) * C28878 +
            (C38871 + C38870) * C28720 + (C38204 + C38203) * C28877 +
            (C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                C28719 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C28876) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
            C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
               C93585 * C2695 -
           (C23472 * C20047 + C19993 * C20046 + C9417 * C20045 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C20044) *
               C93585 * C2696) *
              C1979 +
          ((C9417 * C20044 + C19993 * C20045 + C23472 * C20046 +
            (C713 * C22854 + C23469 + C23469 + C93706 * C23465) * C20047) *
               C93585 * C2696 -
           (C21050 * C20047 + C16321 * C20046 + C5701 * C20045 +
            C5698 * C20044) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
             C5698 * C93694) *
                C4075 +
            (C4817 + C4818) * C4076 + C4823 * C4077) *
               C2695 -
           ((C8421 + C8411) * C4077 + (C8422 + C8414) * C4076 +
            (C9417 * C93694 +
             (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93828) *
                C4075) *
               C2696) *
              C1979 +
          (((C9417 * C93828 +
             (C713 * C8520 + C9412 + C9412 + C93706 * C9406) * C93694) *
                C4075 +
            (C8420 * C93828 +
             (C713 * C8521 + C9413 + C9413 + C93706 * C9407) * C93694) *
                C4076 +
            (C8419 * C93828 +
             (C713 * C8522 + C9414 + C9414 + C93706 * C9408) * C93694) *
                C4077) *
               C2696 -
           ((C7433 + C7434) * C4077 + (C7435 + C7436) * C4076 +
            (C5701 * C93694 + C5698 * C93828) * C4075) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
             C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
             C29395 + C28721 * C1901) *
                C93828 +
            (C35316 + C35317 + C35318) * C93694) *
               C93585 * C2695 -
           ((C38987 + C38988 + C38989) * C93694 +
            (C29391 * C10964 + C30957 + C30957 + C28721 * C11756 +
             C29390 * C1389 + C30958 + C30958 + C28720 * C1901 +
             C29389 * C1388 + C30959 + C30959 + C28719 * C1900) *
                C93828) *
               C93585 * C2696) *
              C1979 +
          (((C38989 + C38988 + C38987) * C93828 +
            (C29389 * C8520 + C38978 + C38978 + C28719 * C9406 +
             C29390 * C16395 + C38979 + C38979 + C28720 * C17035 +
             C29391 * C25002 + C38980 + C38980 + C28721 * C25776) *
                C93694) *
               C93585 * C2696 -
           ((C35319 + C35320 + C35321) * C93694 +
            (C35318 + C35317 + C35316) * C93828) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
                C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
                C4077 * C122) *
                   C93706 * C93828 +
               (C4080 * C807 + C4090 + C4090 + C4075 * C823 + C4082 * C806 +
                C4091 + C4091 + C4076 * C822 + C4084 * C805 + C4092 + C4092 +
                C4077 * C821) *
                   C93706 * C93694) *
                  C93639 * C93625 * C97 -
              ((C4084 * C804 + C4093 + C4093 + C4077 * C820 + C4082 * C805 +
                C4094 + C4094 + C4076 * C821 + C4080 * C806 + C4095 + C4095 +
                C4075 * C822) *
                   C93706 * C93694 +
               (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 +
                C4097 + C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
                C4075 * C121) *
                   C93706 * C93828) *
                  C93639 * C93625 * C98 +
              ((C4080 * C110 + C4099 + C4099 + C4075 * C122 + C4082 * C111 +
                C4100 + C4100 + C4076 * C123 + C4084 * C112 + C4101 + C4101 +
                C4077 * C124) *
                   C93706 * C93828 +
               (C4080 * C805 + C4102 + C4102 + C4075 * C821 + C4082 * C804 +
                C4103 + C4103 + C4076 * C820 + C4084 * C1983 + C4104 + C4104 +
                C4077 * C1985) *
                   C93706 * C93694) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
                C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
                C4077 * C122) *
                   C93706 * C93828 +
               (C4937 + C4938 + C4939) * C93706 * C93694) *
                  C93639 * C800 -
              ((C4940 + C4941 + C4942) * C93706 * C93694 +
               (C4939 + C4938 + C4937) * C93706 * C93828) *
                  C93639 * C801 +
              ((C4942 + C4941 + C4940) * C93706 * C93828 +
               (C4080 * C4897 + C4922 + C4922 + C4075 * C4903 + C4082 * C4898 +
                C4923 + C4923 + C4076 * C4904 + C4084 * C4899 + C4924 + C4924 +
                C4077 * C4905) *
                   C93706 * C93694) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93706 * C93828 +
           (C4937 + C4938 + C4939) * C93706 * C93694) *
              C1382 -
          ((C4084 * C3411 + C5785 + C5785 + C4077 * C3419 + C4082 * C3410 +
            C5786 + C5786 + C4076 * C3418 + C4080 * C3409 + C5787 + C5787 +
            C4075 * C3417) *
               C93706 * C93694 +
           (C4084 * C1386 + C5788 + C5788 + C4077 * C1402 + C4082 * C1387 +
            C5789 + C5789 + C4076 * C1403 + C4080 * C1388 + C5790 + C5790 +
            C4075 * C1404) *
               C93706 * C93828) *
              C1383 +
          ((C4080 * C1389 + C5791 + C5791 + C4075 * C1405 + C4082 * C1390 +
            C5792 + C5792 + C4076 * C1406 + C4084 * C1391 + C5793 + C5793 +
            C4077 * C1407) *
               C93706 * C93828 +
           (C4080 * C5775 + C5794 + C5794 + C4075 * C5781 + C4082 * C5776 +
            C5795 + C5795 + C4076 * C5782 + C4084 * C5777 + C5796 + C5796 +
            C4077 * C5783) *
               C93706 * C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 * C20044 +
           (C20048 * C807 + C20052 + C20052 + C93585 * C823) * C93706 * C20045 +
           (C20048 * C808 + C20053 + C20053 + C93585 * C824) * C93706 * C20046 +
           (C20048 * C4897 + C20054 + C20054 + C93585 * C4903) * C93706 *
               C20047) *
              C93639 * C93625 * C97 -
          ((C20048 * C4898 + C20055 + C20055 + C93585 * C4904) * C93706 *
               C20047 +
           (C20048 * C809 + C20056 + C20056 + C93585 * C825) * C93706 * C20046 +
           (C20048 * C806 + C20057 + C20057 + C93585 * C822) * C93706 * C20045 +
           (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93706 *
               C20044) *
              C93639 * C93625 * C98 +
          ((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C93706 * C20044 +
           (C20048 * C805 + C20060 + C20060 + C93585 * C821) * C93706 * C20045 +
           (C20048 * C810 + C20061 + C20061 + C93585 * C826) * C93706 * C20046 +
           (C20048 * C4899 + C20062 + C20062 + C93585 * C4905) * C93706 *
               C20047) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 * C20044 +
           C20558 * C20045 + C20559 * C20046 + C20560 * C20047) *
              C93639 * C800 -
          (C20561 * C20047 + C20560 * C20046 + C20559 * C20045 +
           C20558 * C20044) *
              C93639 * C801 +
          (C20559 * C20044 + C20560 * C20045 + C20561 * C20046 +
           (C20048 * C20532 + C20545 + C20545 + C93585 * C20534) * C93706 *
               C20047) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 * C20044 +
           C20558 * C20045 + C20559 * C20046 + C20560 * C20047) *
              C1382 -
          ((C20048 * C19095 + C21104 + C21104 + C93585 * C19099) * C93706 *
               C20047 +
           (C20048 * C8520 + C21105 + C21105 + C93585 * C8526) * C93706 *
               C20046 +
           (C20048 * C3409 + C21106 + C21106 + C93585 * C3417) * C93706 *
               C20045 +
           (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) * C93706 *
               C20044) *
              C1383 +
          ((C20048 * C1389 + C21108 + C21108 + C93585 * C1405) * C93706 *
               C20044 +
           (C20048 * C5775 + C21109 + C21109 + C93585 * C5781) * C93706 *
               C20045 +
           (C20048 * C16395 + C21110 + C21110 + C93585 * C16399) * C93706 *
               C20046 +
           (C20048 * C21100 + C21111 + C21111 + C93585 * C21102) * C93706 *
               C20047) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C28719 +
            C25027 * C28720 + C25030 * C28721) *
               C93828 +
           (C20554 * C28719 + C22873 * C28720 + C25029 * C28721) * C93694) *
              C93639 * C93625 * C97 -
          (((C20048 * C5776 + C26837 + C26837 + C93585 * C5782) * C28721 +
            C25892 * C28720 + C21610 * C28719) *
               C93694 +
           ((C20048 * C1390 + C26836 + C26836 + C93585 * C1406) * C28721 +
            C26841 * C28720 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C28719) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C28719 +
            (C20048 * C1386 + C23547 + C23547 + C93585 * C1402) * C28720 +
            (C20048 * C1391 + C33951 + C33951 + C93585 * C1407) * C28721) *
               C93828 +
           ((C20048 * C805 + C20060 + C20060 + C93585 * C821) * C28719 +
            (C20048 * C3411 + C23548 + C23548 + C93585 * C3419) * C28720 +
            (C20048 * C5777 + C33952 + C33952 + C93585 * C5783) * C28721) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C28719 +
            C25027 * C28720 + C25030 * C28721) *
               C93828 +
           (C34619 + C34620 + C34621) * C93694) *
              C93639 * C800 -
          ((C34622 + C34623 + C34624) * C93694 +
           (C34621 + C34620 + C34619) * C93828) *
              C93639 * C801 +
          ((C34624 + C34623 + C34622) * C93828 +
           (C20556 * C28719 + C22871 * C28720 +
            (C20048 * C21100 + C21111 + C21111 + C93585 * C21102) * C28721) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C28719 +
            C25027 * C28720 + C25030 * C28721) *
               C93828 +
           (C34619 + C34620 + C34621) * C93694) *
              C1382 -
          ((C35409 * C28721 + C25029 * C28720 + C22873 * C28719) * C93694 +
           (C35410 * C28721 + C25030 * C28720 + C25027 * C28719) * C93828) *
              C1383 +
          ((C25030 * C28719 + C35410 * C28720 +
            (C20048 * C30188 + C35403 + C35403 + C93585 * C30192) * C28721) *
               C93828 +
           (C25029 * C28719 + C35409 * C28720 +
            (C20048 * C35395 + C35404 + C35404 + C93585 * C35397) * C28721) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                   C4081 +
               (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                   C4075 +
               (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 +
               C4217 * C4085 + C4218 * C4077) *
                  C93706 * C93639 * C93625 * C97 -
              ((C4213 + C4214) * C4077 + (C4215 + C4216) * C4085 +
               (C4212 + C4211) * C4076 + (C4210 + C4209) * C4083 +
               (C4208 + C4207) * C4075 + (C4206 + C4205) * C4081) *
                  C93706 * C93639 * C93625 * C98 +
              (C4217 * C4081 + C4218 * C4075 + (C4216 + C4215) * C4083 +
               (C4214 + C4213) * C4076 +
               (C4178 * C112 + C93828 * C193 + C4179 * C1983 + C93694 * C2056) *
                   C4085 +
               (C4178 * C118 + C93828 * C199 + C4179 * C1984 + C93694 * C2057) *
                   C4077) *
                  C93706 * C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                   C4081 +
               (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                   C4075 +
               (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 +
               C4217 * C4085 + C4218 * C4077) *
                  C93706 * C93639 * C800 -
              ((C4179 * C818 + C93694 * C900 + C4178 * C813 + C93828 * C895) *
                   C4077 +
               (C4179 * C810 + C93694 * C892 + C4178 * C805 + C93828 * C887) *
                   C4085 +
               (C4179 * C817 + C93694 * C899 + C4178 * C814 + C93828 * C896) *
                   C4076 +
               (C4179 * C809 + C93694 * C891 + C4178 * C806 + C93828 * C888) *
                   C4083 +
               (C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                   C4075 +
               (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                   C4081) *
                  C93706 * C93639 * C801 +
              ((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
                   C4081 +
               (C4178 * C816 + C93828 * C898 + C4179 * C4900 + C93694 * C5019) *
                   C4075 +
               (C4178 * C809 + C93828 * C891 + C4179 * C4898 + C93694 * C5017) *
                   C4083 +
               (C4178 * C817 + C93828 * C899 + C4179 * C4901 + C93694 * C5020) *
                   C4076 +
               (C4178 * C810 + C93828 * C892 + C4179 * C4899 + C93694 * C5018) *
                   C4085 +
               (C4178 * C818 + C93828 * C900 + C4179 * C4902 + C93694 * C5021) *
                   C4077) *
                  C93706 * C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C4081 +
           (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
               C4075 +
           (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
           C4218 * C4077) *
              C93706 * C1382 -
          ((C4179 * C3415 + C93694 * C3497 + C4178 * C1394 + C93828 * C1476) *
               C4077 +
           (C4179 * C3411 + C93694 * C3493 + C4178 * C1386 + C93828 * C1468) *
               C4085 +
           (C4179 * C3414 + C93694 * C3496 + C4178 * C1395 + C93828 * C1477) *
               C4076 +
           (C4179 * C3410 + C93694 * C3492 + C4178 * C1387 + C93828 * C1469) *
               C4083 +
           (C4179 * C3413 + C93694 * C3495 + C4178 * C1396 + C93828 * C1478) *
               C4075 +
           (C4179 * C3409 + C93694 * C3491 + C4178 * C1388 + C93828 * C1470) *
               C4081) *
              C93706 * C1383 +
          ((C4178 * C1389 + C93828 * C1471 + C4179 * C5775 + C93694 * C5870) *
               C4081 +
           (C4178 * C1397 + C93828 * C1479 + C4179 * C5778 + C93694 * C5873) *
               C4075 +
           (C4178 * C1390 + C93828 * C1472 + C4179 * C5776 + C93694 * C5871) *
               C4083 +
           (C4178 * C1398 + C93828 * C1480 + C4179 * C5779 + C93694 * C5874) *
               C4076 +
           (C4178 * C1391 + C93828 * C1473 + C4179 * C5777 + C93694 * C5872) *
               C4085 +
           (C4178 * C1399 + C93828 * C1481 + C4179 * C5780 + C93694 * C5875) *
               C4077) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C20049 +
           (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
            C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
               C93585) *
              C93706 * C93639 * C93625 * C97 -
          ((C20115 * C4901 + C20047 * C5020 + C20114 * C817 + C20046 * C899 +
            C20113 * C814 + C20045 * C896 + C20112 * C115 + C20044 * C196) *
               C93585 +
           (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
            C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
               C20049) *
              C93706 * C93639 * C93625 * C98 +
          ((C20112 * C110 + C20044 * C191 + C20113 * C805 + C20045 * C887 +
            C20114 * C810 + C20046 * C892 + C20115 * C4899 + C20047 * C5018) *
               C20049 +
           (C20112 * C116 + C20044 * C197 + C20113 * C813 + C20045 * C895 +
            C20114 * C818 + C20046 * C900 + C20115 * C4902 + C20047 * C5021) *
               C93585) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C20049 +
           (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
            C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
               C93585) *
              C93706 * C93639 * C800 -
          ((C20115 * C15552 + C20047 * C15668 + C20114 * C4900 +
            C20046 * C5019 + C20113 * C816 + C20045 * C898 + C20112 * C815 +
            C20044 * C897) *
               C93585 +
           (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
            C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
            C20044 * C889) *
               C20049) *
              C93706 * C93639 * C801 +
          ((C20112 * C808 + C20044 * C890 + C20113 * C4897 + C20045 * C5016 +
            C20114 * C15550 + C20046 * C15666 + C20115 * C20532 +
            C20047 * C20611) *
               C20049 +
           (C20112 * C816 + C20044 * C898 + C20113 * C4900 + C20045 * C5019 +
            C20114 * C15552 + C20046 * C15668 + C20115 * C20533 +
            C20047 * C20612) *
               C93585) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C20049 +
           (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
            C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
               C93585) *
              C93706 * C1382 -
          ((C20115 * C19097 + C20047 * C19223 + C20114 * C8523 +
            C20046 * C8648 + C20113 * C3413 + C20045 * C3495 + C20112 * C1396 +
            C20044 * C1478) *
               C93585 +
           (C20115 * C19095 + C20047 * C19221 + C20114 * C8520 +
            C20046 * C8645 + C20113 * C3409 + C20045 * C3491 + C20112 * C1388 +
            C20044 * C1470) *
               C20049) *
              C93706 * C1383 +
          ((C20112 * C1389 + C20044 * C1471 + C20113 * C5775 + C20045 * C5870 +
            C20114 * C16395 + C20046 * C16487 + C20115 * C21100 +
            C20047 * C21161) *
               C20049 +
           (C20112 * C1397 + C20044 * C1479 + C20113 * C5778 + C20045 * C5873 +
            C20114 * C16397 + C20046 * C16489 + C20115 * C21101 +
            C20047 * C21162) *
               C93585) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C20049 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C93585) *
               C28719 +
           ((C4178 * C1388 + C93828 * C1470 + C4179 * C3409 + C93694 * C3491) *
                C20049 +
            (C4178 * C1396 + C93828 * C1478 + C4179 * C3413 + C93694 * C3495) *
                C93585) *
               C28720 +
           ((C4178 * C1389 + C93828 * C1471 + C4179 * C5775 + C93694 * C5870) *
                C20049 +
            (C4178 * C1397 + C93828 * C1479 + C4179 * C5778 + C93694 * C5873) *
                C93585) *
               C28721) *
              C93639 * C93625 * C97 -
          (((C4179 * C5779 + C93694 * C5874 + C4178 * C1398 + C93828 * C1480) *
                C93585 +
            (C4179 * C5776 + C93694 * C5871 + C4178 * C1390 + C93828 * C1472) *
                C20049) *
               C28721 +
           ((C7659 + C7660) * C93585 + (C7661 + C7662) * C20049) * C28720 +
           ((C4208 + C4207) * C93585 + (C4206 + C4205) * C20049) * C28719) *
              C93639 * C93625 * C98 +
          ((C4217 * C20049 + C4218 * C93585) * C28719 +
           ((C7658 + C7657) * C20049 + (C7656 + C7655) * C93585) * C28720 +
           ((C4178 * C1391 + C93828 * C1473 + C4179 * C5777 + C93694 * C5872) *
                C20049 +
            (C4178 * C1399 + C93828 * C1481 + C4179 * C5780 + C93694 * C5875) *
                C93585) *
               C28721) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C20049 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C93585) *
               C28719 +
           ((C4178 * C1388 + C93828 * C1470 + C4179 * C3409 + C93694 * C3491) *
                C20049 +
            (C4178 * C1396 + C93828 * C1478 + C4179 * C3413 + C93694 * C3495) *
                C93585) *
               C28720 +
           ((C4178 * C1389 + C93828 * C1471 + C4179 * C5775 + C93694 * C5870) *
                C20049 +
            (C4178 * C1397 + C93828 * C1479 + C4179 * C5778 + C93694 * C5873) *
                C93585) *
               C28721) *
              C93639 * C800 -
          (((C4179 * C16397 + C93694 * C16489 + C4178 * C5778 +
             C93828 * C5873) *
                C93585 +
            (C4179 * C16395 + C93694 * C16487 + C4178 * C5775 +
             C93828 * C5870) *
                C20049) *
               C28721 +
           ((C4179 * C8523 + C93694 * C8648 + C4178 * C3413 + C93828 * C3495) *
                C93585 +
            (C4179 * C8520 + C93694 * C8645 + C4178 * C3409 + C93828 * C3491) *
                C20049) *
               C28720 +
           ((C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                C93585 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C20049) *
               C28719) *
              C93639 * C801 +
          (((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
                C20049 +
            (C4178 * C816 + C93828 * C898 + C4179 * C4900 + C93694 * C5019) *
                C93585) *
               C28719 +
           ((C4178 * C8520 + C93828 * C8645 + C4179 * C19095 +
             C93694 * C19221) *
                C20049 +
            (C4178 * C8523 + C93828 * C8648 + C4179 * C19097 +
             C93694 * C19223) *
                C93585) *
               C28720 +
           ((C4178 * C16395 + C93828 * C16487 + C4179 * C21100 +
             C93694 * C21161) *
                C20049 +
            (C4178 * C16397 + C93828 * C16489 + C4179 * C21101 +
             C93694 * C21162) *
                C93585) *
               C28721) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C20049 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C93585) *
               C28719 +
           ((C35511 + C35512) * C20049 + (C35513 + C35514) * C93585) * C28720 +
           C35527 * C28721) *
              C1382 -
          (((C35519 + C35520) * C93585 + (C35521 + C35522) * C20049) * C28721 +
           ((C35518 + C35517) * C93585 + (C35516 + C35515) * C20049) * C28720 +
           ((C35514 + C35513) * C93585 + (C35512 + C35511) * C20049) * C28719) *
              C1383 +
          (C35527 * C28719 +
           ((C35522 + C35521) * C20049 + (C35520 + C35519) * C93585) * C28720 +
           ((C4178 * C30188 + C93828 * C30303 + C4179 * C35395 +
             C93694 * C35484) *
                C20049 +
            (C4178 * C30190 + C93828 * C30305 + C4179 * C35396 +
             C93694 * C35485) *
                C93585) *
               C28721) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C108 + C93706 * C276) * C4081 +
                (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
                C306 * C4076 + C307 * C4085 + C308 * C4077) *
                   C93828 +
               ((C275 * C807 + C93706 * C955) * C4081 +
                (C275 * C815 + C93706 * C963) * C4075 + C2162 * C4083 +
                C2161 * C4076 + C2160 * C4085 + C2159 * C4077) *
                   C93694) *
                  C93639 * C93625 * C97 -
              ((C2157 * C4077 + C2158 * C4085 + C2159 * C4076 + C2160 * C4083 +
                C2161 * C4075 + C2162 * C4081) *
                   C93694 +
               (C310 * C4077 + C309 * C4085 + C308 * C4076 + C307 * C4083 +
                C306 * C4075 + C305 * C4081) *
                   C93828) *
                  C93639 * C93625 * C98 +
              ((C307 * C4081 + C308 * C4075 + C309 * C4083 + C310 * C4076 +
                C312 * C4085 + C311 * C4077) *
                   C93828 +
               (C2160 * C4081 + C2159 * C4075 + C2158 * C4083 + C2157 * C4076 +
                (C275 * C1983 + C93706 * C2142) * C4085 +
                (C275 * C1984 + C93706 * C2143) * C4077) *
                   C93694) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C108 + C93706 * C276) * C4081 +
                (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
                C306 * C4076 + C307 * C4085 + C308 * C4077) *
                   C93828 +
               (C5131 + C5132 + C5107 + C5108 + C5109 + C5110) * C93694) *
                  C93639 * C800 -
              ((C5133 + C5134 + C5135 + C5136 + C5137 + C5138) * C93694 +
               (C5110 + C5109 + C5108 + C5107 + C5132 + C5131) * C93828) *
                  C93639 * C801 +
              ((C5138 + C5137 + C5136 + C5135 + C5134 + C5133) * C93828 +
               ((C275 * C4897 + C93706 * C5096) * C4081 +
                (C275 * C4900 + C93706 * C5099) * C4075 +
                (C275 * C4898 + C93706 * C5097) * C4083 +
                (C275 * C4901 + C93706 * C5100) * C4076 +
                (C275 * C4899 + C93706 * C5098) * C4085 +
                (C275 * C4902 + C93706 * C5101) * C4077) *
                   C93694) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4081 +
            (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
            C306 * C4076 + C307 * C4085 + C308 * C4077) *
               C93828 +
           (C5131 + C5132 + C5107 + C5108 + C5109 + C5110) * C93694) *
              C1382 -
          (((C275 * C3415 + C93706 * C3571) * C4077 +
            (C275 * C3411 + C93706 * C3567) * C4085 +
            (C275 * C3414 + C93706 * C3570) * C4076 +
            (C275 * C3410 + C93706 * C3566) * C4083 +
            (C275 * C3413 + C93706 * C3569) * C4075 +
            (C275 * C3409 + C93706 * C3565) * C4081) *
               C93694 +
           (C2873 * C4077 + C2874 * C4085 + C2875 * C4076 + C2876 * C4083 +
            (C275 * C1396 + C93706 * C1544) * C4075 +
            (C275 * C1388 + C93706 * C1536) * C4081) *
               C93828) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C4081 +
            (C275 * C1397 + C93706 * C1545) * C4075 +
            (C275 * C1390 + C93706 * C1538) * C4083 +
            (C275 * C1398 + C93706 * C1546) * C4076 +
            (C275 * C1391 + C93706 * C1539) * C4085 +
            (C275 * C1399 + C93706 * C1547) * C4077) *
               C93828 +
           ((C275 * C5775 + C93706 * C5950) * C4081 +
            (C275 * C5778 + C93706 * C5953) * C4075 +
            (C275 * C5776 + C93706 * C5951) * C4083 +
            (C275 * C5779 + C93706 * C5954) * C4076 +
            (C275 * C5777 + C93706 * C5952) * C4085 +
            (C275 * C5780 + C93706 * C5955) * C4077) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20049 +
            (C275 * C114 + C93706 * C282) * C93585) *
               C20044 +
           (C5123 * C20049 + C5124 * C93585) * C20045 +
           (C5130 * C20049 + C5129 * C93585) * C20046 +
           (C15769 * C20049 + C15768 * C93585) * C20047) *
              C93639 * C93625 * C97 -
          ((C15766 * C93585 + C15767 * C20049) * C20047 +
           (C5127 * C93585 + C5128 * C20049) * C20046 +
           (C2161 * C93585 + C2162 * C20049) * C20045 +
           (C306 * C93585 + C305 * C20049) * C20044) *
              C93639 * C93625 * C98 +
          ((C307 * C20049 + C308 * C93585) * C20044 +
           (C2160 * C20049 + C2159 * C93585) * C20045 +
           (C5126 * C20049 + C5125 * C93585) * C20046 +
           ((C275 * C4899 + C93706 * C5098) * C20049 +
            (C275 * C4902 + C93706 * C5101) * C93585) *
               C20047) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20049 +
            (C275 * C114 + C93706 * C282) * C93585) *
               C20044 +
           (C20666 + C20667) * C20045 + C20676 * C20046 + C20677 * C20047) *
              C93639 * C800 -
          ((C20680 + C20681) * C20047 + (C20671 + C20670) * C20046 +
           (C20669 + C20668) * C20045 + (C20667 + C20666) * C20044) *
              C93639 * C801 +
          (C20676 * C20044 + C20677 * C20045 + (C20681 + C20680) * C20046 +
           ((C275 * C20532 + C93706 * C20663) * C20049 +
            (C275 * C20533 + C93706 * C20664) * C93585) *
               C20047) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20049 +
            (C275 * C114 + C93706 * C282) * C93585) *
               C20044 +
           (C20666 + C20667) * C20045 + C20676 * C20046 + C20677 * C20047) *
              C1382 -
          (((C275 * C19097 + C93706 * C19325) * C93585 +
            (C275 * C19095 + C93706 * C19323) * C20049) *
               C20047 +
           (C19338 * C93585 + C19339 * C20049) * C20046 +
           (C8764 * C93585 + C8765 * C20049) * C20045 +
           ((C275 * C1396 + C93706 * C1544) * C93585 +
            (C275 * C1388 + C93706 * C1536) * C20049) *
               C20044) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C20049 +
            (C275 * C1397 + C93706 * C1545) * C93585) *
               C20044 +
           ((C275 * C5775 + C93706 * C5950) * C20049 +
            (C275 * C5778 + C93706 * C5953) * C93585) *
               C20045 +
           ((C275 * C16395 + C93706 * C16565) * C20049 +
            (C275 * C16397 + C93706 * C16567) * C93585) *
               C20046 +
           ((C275 * C21100 + C93706 * C21213) * C20049 +
            (C275 * C21101 + C93706 * C21214) * C93585) *
               C20047) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C20049 +
            (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
             C28878 * C1397 + C28721 * C1545) *
                C93585) *
               C93828 +
           ((C28876 * C807 + C28719 * C955 + C28877 * C3409 + C28720 * C3565 +
             C28878 * C5775 + C28721 * C5950) *
                C20049 +
            (C28876 * C815 + C28719 * C963 + C28877 * C3413 + C28720 * C3569 +
             C28878 * C5778 + C28721 * C5953) *
                C93585) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C31280 + C31281 + C31282) * C93585 +
            (C31283 + C31284 + C31285) * C20049) *
               C93694 +
           ((C28909 + C28908 + C28907) * C93585 +
            (C28906 + C28905 + C28904) * C20049) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C28915 + C28914 + C28913) * C20049 +
            (C28912 + C28911 + C28910) * C93585) *
               C93828 +
           ((C28876 * C805 + C28719 * C953 + C28877 * C3411 + C28720 * C3567 +
             C28878 * C5777 + C28721 * C5952) *
                C20049 +
            (C28876 * C813 + C28719 * C961 + C28877 * C3415 + C28720 * C3571 +
             C28878 * C5780 + C28721 * C5955) *
                C93585) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C20049 +
            (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
             C28878 * C1397 + C28721 * C1545) *
                C93585) *
               C93828 +
           ((C34797 + C34798 + C34799) * C20049 +
            (C34800 + C34801 + C34802) * C93585) *
               C93694) *
              C93639 * C800 -
          (((C34803 + C34804 + C34805) * C93585 +
            (C34806 + C34807 + C34808) * C20049) *
               C93694 +
           ((C34802 + C34801 + C34800) * C93585 +
            (C34799 + C34798 + C34797) * C20049) *
               C93828) *
              C93639 * C801 +
          (((C34808 + C34807 + C34806) * C20049 +
            (C34805 + C34804 + C34803) * C93585) *
               C93828 +
           ((C28876 * C4897 + C28719 * C5096 + C28877 * C19095 +
             C28720 * C19323 + C28878 * C21100 + C28721 * C21213) *
                C20049 +
            (C28876 * C4900 + C28719 * C5099 + C28877 * C19097 +
             C28720 * C19325 + C28878 * C21101 + C28721 * C21214) *
                C93585) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C20049 +
            (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
             C28878 * C1397 + C28721 * C1545) *
                C93585) *
               C93828 +
           ((C34797 + C34798 + C34799) * C20049 +
            (C34800 + C34801 + C34802) * C93585) *
               C93694) *
              C1382 -
          (((C28878 * C25003 + C28721 * C25220 + C28877 * C5778 +
             C28720 * C5953 + C28876 * C3413 + C28719 * C3569) *
                C93585 +
            (C28878 * C25001 + C28721 * C25218 + C28877 * C5775 +
             C28720 * C5950 + C28876 * C3409 + C28719 * C3565) *
                C20049) *
               C93694 +
           ((C28878 * C10967 + C28721 * C11199 + C28877 * C1397 +
             C28720 * C1545 + C28876 * C1396 + C28719 * C1544) *
                C93585 +
            (C28878 * C10964 + C28721 * C11196 + C28877 * C1389 +
             C28720 * C1537 + C28876 * C1388 + C28719 * C1536) *
                C20049) *
               C93828) *
              C1383 +
          (((C28876 * C1389 + C28719 * C1537 + C28877 * C10964 +
             C28720 * C11196 + C28878 * C30188 + C28721 * C30408) *
                C20049 +
            (C28876 * C1397 + C28719 * C1545 + C28877 * C10967 +
             C28720 * C11199 + C28878 * C30190 + C28721 * C30410) *
                C93585) *
               C93828 +
           ((C28876 * C5775 + C28719 * C5950 + C28877 * C25001 +
             C28720 * C25218 + C28878 * C35395 + C28721 * C35601) *
                C20049 +
            (C28876 * C5778 + C28719 * C5953 + C28877 * C25003 +
             C28720 * C25220 + C28878 * C35396 + C28721 * C35602) *
                C93585) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
                C4085 * C110 + C4077 * C116) *
                   C4178 +
               (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
                C4085 * C191 + C4077 * C364) *
                   C93828 +
               (C4081 * C807 + C4075 * C815 + C4083 * C806 + C4076 * C814 +
                C4085 * C805 + C4077 * C813) *
                   C4179 +
               (C4081 * C889 + C4075 * C1021 + C4083 * C888 + C4076 * C1020 +
                C4085 * C887 + C4077 * C1019) *
                   C93694) *
                  C93706 * C93639 * C93625 * C97 -
              ((C4085 * C886 + C4077 * C1018 + C4083 * C887 + C4076 * C1019 +
                C4081 * C888 + C4075 * C1020) *
                   C93694 +
               (C4085 * C804 + C4077 * C812 + C4083 * C805 + C4076 * C813 +
                C4081 * C806 + C4075 * C814) *
                   C4179 +
               (C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
                C4081 * C190 + C4075 * C363) *
                   C93828 +
               (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
                C4081 * C109 + C4075 * C115) *
                   C4178) *
                  C93706 * C93639 * C93625 * C98 +
              ((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
                C4085 * C112 + C4077 * C118) *
                   C4178 +
               (C4081 * C191 + C4075 * C364 + C4083 * C192 + C4076 * C365 +
                C4085 * C193 + C4077 * C366) *
                   C93828 +
               (C4081 * C805 + C4075 * C813 + C4083 * C804 + C4076 * C812 +
                C4085 * C1983 + C4077 * C1984) *
                   C4179 +
               (C4081 * C887 + C4075 * C1019 + C4083 * C886 + C4076 * C1018 +
                C4085 * C2056 + C4077 * C2228) *
                   C93694) *
                  C93706 * C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
                C4085 * C110 + C4077 * C116) *
                   C4178 +
               (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
                C4085 * C191 + C4077 * C364) *
                   C93828 +
               (C5240 + C5241 + C5242) * C4179 +
               (C5243 + C5244 + C5245) * C93694) *
                  C93706 * C93639 * C800 -
              ((C5246 + C5247 + C5248) * C93694 +
               (C5249 + C5250 + C5251) * C4179 +
               (C5245 + C5244 + C5243) * C93828 +
               (C5242 + C5241 + C5240) * C4178) *
                  C93706 * C93639 * C801 +
              ((C5251 + C5250 + C5249) * C4178 +
               (C5248 + C5247 + C5246) * C93828 +
               (C4081 * C4897 + C4075 * C4900 + C4083 * C4898 + C4076 * C4901 +
                C4085 * C4899 + C4077 * C4902) *
                   C4179 +
               (C4081 * C5016 + C4075 * C5212 + C4083 * C5017 + C4076 * C5213 +
                C4085 * C5018 + C4077 * C5214) *
                   C93694) *
                  C93706 * C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C4178 +
           (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
            C4085 * C191 + C4077 * C364) *
               C93828 +
           (C5240 + C5241 + C5242) * C4179 + (C5243 + C5244 + C5245) * C93694) *
              C93706 * C1382 -
          ((C4085 * C3493 + C4077 * C3641 + C4083 * C3492 + C4076 * C3640 +
            C4081 * C3491 + C4075 * C3639) *
               C93694 +
           (C4085 * C3411 + C4077 * C3415 + C4083 * C3410 + C4076 * C3414 +
            C4081 * C3409 + C4075 * C3413) *
               C4179 +
           (C4085 * C1468 + C4077 * C1600 + C4083 * C1469 + C4076 * C1601 +
            C4081 * C1470 + C4075 * C1602) *
               C93828 +
           (C4085 * C1386 + C4077 * C1394 + C4083 * C1387 + C4076 * C1395 +
            C4081 * C1388 + C4075 * C1396) *
               C4178) *
              C93706 * C1383 +
          ((C4081 * C1389 + C4075 * C1397 + C4083 * C1390 + C4076 * C1398 +
            C4085 * C1391 + C4077 * C1399) *
               C4178 +
           (C4081 * C1471 + C4075 * C1603 + C4083 * C1472 + C4076 * C1604 +
            C4085 * C1473 + C4077 * C1605) *
               C93828 +
           (C4081 * C5775 + C4075 * C5778 + C4083 * C5776 + C4076 * C5779 +
            C4085 * C5777 + C4077 * C5780) *
               C4179 +
           (C4081 * C5870 + C4075 * C6030 + C4083 * C5871 + C4076 * C6031 +
            C4085 * C5872 + C4077 * C6032) *
               C93694) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C20112 +
           (C20049 * C189 + C93585 * C362) * C20044 +
           (C20049 * C807 + C93585 * C815) * C20113 +
           (C20049 * C889 + C93585 * C1021) * C20045 +
           (C20049 * C808 + C93585 * C816) * C20114 +
           (C20049 * C890 + C93585 * C1022) * C20046 +
           (C20049 * C4897 + C93585 * C4900) * C20115 +
           (C20049 * C5016 + C93585 * C5212) * C20047) *
              C93706 * C93639 * C93625 * C97 -
          ((C20049 * C5017 + C93585 * C5213) * C20047 +
           (C20049 * C4898 + C93585 * C4901) * C20115 +
           (C20049 * C891 + C93585 * C1023) * C20046 +
           (C20049 * C809 + C93585 * C817) * C20114 +
           (C20049 * C888 + C93585 * C1020) * C20045 +
           (C20049 * C806 + C93585 * C814) * C20113 +
           (C20049 * C190 + C93585 * C363) * C20044 +
           (C20049 * C109 + C93585 * C115) * C20112) *
              C93706 * C93639 * C93625 * C98 +
          ((C20049 * C110 + C93585 * C116) * C20112 +
           (C20049 * C191 + C93585 * C364) * C20044 +
           (C20049 * C805 + C93585 * C813) * C20113 +
           (C20049 * C887 + C93585 * C1019) * C20045 +
           (C20049 * C810 + C93585 * C818) * C20114 +
           (C20049 * C892 + C93585 * C1024) * C20046 +
           (C20049 * C4899 + C93585 * C4902) * C20115 +
           (C20049 * C5018 + C93585 * C5214) * C20047) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C20112 +
           (C20049 * C189 + C93585 * C362) * C20044 + C20749 * C20113 +
           C20750 * C20045 + C20751 * C20114 + C20752 * C20046 +
           C20753 * C20115 + C20754 * C20047) *
              C93706 * C93639 * C800 -
          (C20755 * C20047 + C20756 * C20115 + C20754 * C20046 +
           C20753 * C20114 + C20752 * C20045 + C20751 * C20113 +
           C20750 * C20044 + C20749 * C20112) *
              C93706 * C93639 * C801 +
          (C20751 * C20112 + C20752 * C20044 + C20753 * C20113 +
           C20754 * C20045 + C20756 * C20114 + C20755 * C20046 +
           (C20049 * C20532 + C93585 * C20533) * C20115 +
           (C20049 * C20611 + C93585 * C20731) * C20047) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C20112 +
           (C20049 * C189 + C93585 * C362) * C20044 + C20749 * C20113 +
           C20750 * C20045 + C20751 * C20114 + C20752 * C20046 +
           C20753 * C20115 + C20754 * C20047) *
              C93706 * C1382 -
          ((C20049 * C19221 + C93585 * C19439) * C20047 +
           (C20049 * C19095 + C93585 * C19097) * C20115 +
           (C20049 * C8645 + C93585 * C8865) * C20046 +
           (C20049 * C8520 + C93585 * C8523) * C20114 +
           (C20049 * C3491 + C93585 * C3639) * C20045 +
           (C20049 * C3409 + C93585 * C3413) * C20113 +
           (C20049 * C1470 + C93585 * C1602) * C20044 +
           (C20049 * C1388 + C93585 * C1396) * C20112) *
              C93706 * C1383 +
          ((C20049 * C1389 + C93585 * C1397) * C20112 +
           (C20049 * C1471 + C93585 * C1603) * C20044 +
           (C20049 * C5775 + C93585 * C5778) * C20113 +
           (C20049 * C5870 + C93585 * C6030) * C20045 +
           (C20049 * C16395 + C93585 * C16397) * C20114 +
           (C20049 * C16487 + C93585 * C16643) * C20046 +
           (C20049 * C21100 + C93585 * C21101) * C20115 +
           (C20049 * C21161 + C93585 * C21265) * C20047) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C20049 * C108 + C93585 * C114) * C4178 +
                                (C20049 * C189 + C93585 * C362) * C93828 +
                                C20749 * C4179 + C20750 * C93694) *
                                   C28719 +
                               (C25319 * C4178 + C25320 * C93828 +
                                C23109 * C4179 + C23108 * C93694) *
                                   C28720 +
                               (C25326 * C4178 + C25325 * C93828 +
                                C25324 * C4179 + C25323 * C93694) *
                                   C28721) *
                                  C93639 * C93625 * C97 -
                              (((C20049 * C5871 + C93585 * C6031) * C93694 +
                                (C20049 * C5776 + C93585 * C5779) * C4179 +
                                (C20049 * C1472 + C93585 * C1604) * C93828 +
                                (C20049 * C1390 + C93585 * C1398) * C4178) *
                                   C28721 +
                               (C26211 * C93694 + C26210 * C4179 +
                                C27145 * C93828 + C27144 * C4178) *
                                   C28720 +
                               (C21833 * C93694 + C21832 * C4179 +
                                (C20049 * C190 + C93585 * C363) * C93828 +
                                (C20049 * C109 + C93585 * C115) * C4178) *
                                   C28719) *
                                  C93639 * C93625 * C98 +
                              (((C20049 * C110 + C93585 * C116) * C4178 +
                                (C20049 * C191 + C93585 * C364) * C93828 +
                                (C20049 * C805 + C93585 * C813) * C4179 +
                                (C20049 * C887 + C93585 * C1019) * C93694) *
                                   C28719 +
                               ((C20049 * C1386 + C93585 * C1394) * C4178 +
                                (C20049 * C1468 + C93585 * C1600) * C93828 +
                                (C20049 * C3411 + C93585 * C3415) * C4179 +
                                (C20049 * C3493 + C93585 * C3641) * C93694) *
                                   C28720 +
                               ((C20049 * C1391 + C93585 * C1399) * C4178 +
                                (C20049 * C1473 + C93585 * C1605) * C93828 +
                                (C20049 * C5777 + C93585 * C5780) * C4179 +
                                (C20049 * C5872 + C93585 * C6032) * C93694) *
                                   C28721) *
                                  C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C4178 +
            (C20049 * C189 + C93585 * C362) * C93828 + C20749 * C4179 +
            C20750 * C93694) *
               C28719 +
           (C25319 * C4178 + C25320 * C93828 + C23109 * C4179 +
            C23108 * C93694) *
               C28720 +
           (C25326 * C4178 + C25325 * C93828 + C25324 * C4179 +
            C25323 * C93694) *
               C28721) *
              C93639 * C800 -
          ((C25321 * C93694 + C25322 * C4179 + C25323 * C93828 +
            C25324 * C4178) *
               C28721 +
           (C23106 * C93694 + C23107 * C4179 + C23108 * C93828 +
            C23109 * C4178) *
               C28720 +
           (C20752 * C93694 + C20751 * C4179 + C20750 * C93828 +
            C20749 * C4178) *
               C28719) *
              C93639 * C801 +
          ((C20751 * C4178 + C20752 * C93828 + C20753 * C4179 +
            C20754 * C93694) *
               C28719 +
           (C23107 * C4178 + C23106 * C93828 + C23105 * C4179 +
            C23104 * C93694) *
               C28720 +
           (C25322 * C4178 + C25321 * C93828 +
            (C20049 * C21100 + C93585 * C21101) * C4179 +
            (C20049 * C21161 + C93585 * C21265) * C93694) *
               C28721) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C4178 +
            (C20049 * C189 + C93585 * C362) * C93828 + C20749 * C4179 +
            C20750 * C93694) *
               C28719 +
           (C35679 + C35680 + C35681 + C35682) * C28720 + C35705 * C28721) *
              C1382 -
          ((C35701 + C35702 + C35703 + C35704) * C28721 +
           (C35686 + C35685 + C35684 + C35683) * C28720 +
           (C35682 + C35681 + C35680 + C35679) * C28719) *
              C1383 +
          (C35705 * C28719 + (C35704 + C35703 + C35702 + C35701) * C28720 +
           ((C20049 * C30188 + C93585 * C30190) * C4178 +
            (C20049 * C30303 + C93585 * C30486) * C93828 +
            (C20049 * C35395 + C93585 * C35396) * C4179 +
            (C20049 * C35484 + C93585 * C35677) * C93694) *
               C28721) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
                C4444 + C4444 + C93694 * C1079) *
                   C4075 +
               (C4477 + C4478) * C4076 + C4483 * C4077) *
                  C93706 * C93639 * C93625 * C97 -
              ((C4481 + C4482) * C4077 + (C4480 + C4479) * C4076 +
               (C4478 + C4477) * C4075) *
                  C93706 * C93639 * C93625 * C98 +
              (C4483 * C4075 + (C4482 + C4481) * C4076 +
               (C4440 * C112 + C4463 + C4463 + C93828 * C423 + C4441 * C1983 +
                C4464 + C4464 + C93694 * C2295) *
                   C4077) *
                  C93706 * C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
                C4444 + C4444 + C93694 * C1079) *
                   C4075 +
               (C4477 + C4478) * C4076 + C4483 * C4077) *
                  C93706 * C93639 * C800 -
              ((C4441 * C810 + C5329 + C5329 + C93694 * C1082 + C4440 * C805 +
                C5330 + C5330 + C93828 * C1077) *
                   C4077 +
               (C4441 * C809 + C5331 + C5331 + C93694 * C1081 + C4440 * C806 +
                C5332 + C5332 + C93828 * C1078) *
                   C4076 +
               (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
                C5334 + C5334 + C93828 * C1079) *
                   C4075) *
                  C93706 * C93639 * C801 +
              ((C4440 * C808 + C5335 + C5335 + C93828 * C1080 + C4441 * C4897 +
                C5336 + C5336 + C93694 * C5325) *
                   C4075 +
               (C4440 * C809 + C5337 + C5337 + C93828 * C1081 + C4441 * C4898 +
                C5338 + C5338 + C93694 * C5326) *
                   C4076 +
               (C4440 * C810 + C5339 + C5339 + C93828 * C1082 + C4441 * C4899 +
                C5340 + C5340 + C93694 * C5327) *
                   C4077) *
                  C93706 * C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C4075 +
           (C4477 + C4478) * C4076 + C4483 * C4077) *
              C93706 * C1382 -
          ((C4441 * C3411 + C6111 + C6111 + C93694 * C3711 + C4440 * C1386 +
            C6112 + C6112 + C93828 * C1658) *
               C4077 +
           (C4441 * C3410 + C6113 + C6113 + C93694 * C3710 + C4440 * C1387 +
            C6114 + C6114 + C93828 * C1659) *
               C4076 +
           (C4441 * C3409 + C6115 + C6115 + C93694 * C3709 + C4440 * C1388 +
            C6116 + C6116 + C93828 * C1660) *
               C4075) *
              C93706 * C1383 +
          ((C4440 * C1389 + C6117 + C6117 + C93828 * C1661 + C4441 * C5775 +
            C6118 + C6118 + C93694 * C6107) *
               C4075 +
           (C4440 * C1390 + C6119 + C6119 + C93828 * C1662 + C4441 * C5776 +
            C6120 + C6120 + C93694 * C6108) *
               C4076 +
           (C4440 * C1391 + C6121 + C6121 + C93828 * C1663 + C4441 * C5777 +
            C6122 + C6122 + C93694 * C6109) *
               C4077) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
           C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
           C20046 * C1080 + C20269 * C4897 + C20274 + C20274 + C20047 * C5325) *
              C93585 * C93706 * C93639 * C93625 * C97 -
          (C20269 * C4898 + C20275 + C20275 + C20047 * C5326 + C20268 * C809 +
           C20276 + C20276 + C20046 * C1081 + C20267 * C806 + C20277 + C20277 +
           C20045 * C1078 + C20266 * C109 + C20278 + C20278 + C20044 * C420) *
              C93585 * C93706 * C93639 * C93625 * C98 +
          (C20266 * C110 + C20279 + C20279 + C20044 * C421 + C20267 * C805 +
           C20280 + C20280 + C20045 * C1077 + C20268 * C810 + C20281 + C20281 +
           C20046 * C1082 + C20269 * C4899 + C20282 + C20282 + C20047 * C5327) *
              C93585 * C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
           C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
           C20046 * C1080 + C20269 * C4897 + C20274 + C20274 + C20047 * C5325) *
              C93585 * C93706 * C93639 * C800 -
          (C20269 * C15550 + C20808 + C20808 + C20047 * C15963 +
           C20268 * C4897 + C20809 + C20809 + C20046 * C5325 + C20267 * C808 +
           C20810 + C20810 + C20045 * C1080 + C20266 * C807 + C20811 + C20811 +
           C20044 * C1079) *
              C93585 * C93706 * C93639 * C801 +
          (C20266 * C808 + C20812 + C20812 + C20044 * C1080 + C20267 * C4897 +
           C20813 + C20813 + C20045 * C5325 + C20268 * C15550 + C20814 +
           C20814 + C20046 * C15963 + C20269 * C20532 + C20815 + C20815 +
           C20047 * C20806) *
              C93585 * C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
           C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
           C20046 * C1080 + C20269 * C4897 + C20274 + C20274 + C20047 * C5325) *
              C93585 * C93706 * C1382 -
          (C20269 * C19095 + C21318 + C21318 + C20047 * C19563 +
           C20268 * C8520 + C21319 + C21319 + C20046 * C8984 + C20267 * C3409 +
           C21320 + C21320 + C20045 * C3709 + C20266 * C1388 + C21321 + C21321 +
           C20044 * C1660) *
              C93585 * C93706 * C1383 +
          (C20266 * C1389 + C21322 + C21322 + C20044 * C1661 + C20267 * C5775 +
           C21323 + C21323 + C20045 * C6107 + C20268 * C16395 + C21324 +
           C21324 + C20046 * C16719 + C20269 * C21100 + C21325 + C21325 +
           C20047 * C21316) *
              C93585 * C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C93585 * C28719 +
           (C4440 * C1388 + C6116 + C6116 + C93828 * C1660 + C4441 * C3409 +
            C6115 + C6115 + C93694 * C3709) *
               C93585 * C28720 +
           (C4440 * C1389 + C6117 + C6117 + C93828 * C1661 + C4441 * C5775 +
            C6118 + C6118 + C93694 * C6107) *
               C93585 * C28721) *
              C93639 * C93625 * C97 -
          ((C4441 * C5776 + C6120 + C6120 + C93694 * C6108 + C4440 * C1390 +
            C6119 + C6119 + C93828 * C1662) *
               C93585 * C28721 +
           (C7989 + C7990) * C93585 * C28720 +
           (C4478 + C4477) * C93585 * C28719) *
              C93639 * C93625 * C98 +
          (C4483 * C93585 * C28719 + (C7988 + C7987) * C93585 * C28720 +
           (C4440 * C1391 + C6121 + C6121 + C93828 * C1663 + C4441 * C5777 +
            C6122 + C6122 + C93694 * C6109) *
               C93585 * C28721) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C93585 * C28719 +
           (C4440 * C1388 + C6116 + C6116 + C93828 * C1660 + C4441 * C3409 +
            C6115 + C6115 + C93694 * C3709) *
               C93585 * C28720 +
           (C4440 * C1389 + C6117 + C6117 + C93828 * C1661 + C4441 * C5775 +
            C6118 + C6118 + C93694 * C6107) *
               C93585 * C28721) *
              C93639 * C800 -
          ((C4441 * C16395 + C34957 + C34957 + C93694 * C16719 + C4440 * C5775 +
            C34958 + C34958 + C93828 * C6107) *
               C93585 * C28721 +
           (C4441 * C8520 + C8989 + C8989 + C93694 * C8984 + C4440 * C3409 +
            C8988 + C8988 + C93828 * C3709) *
               C93585 * C28720 +
           (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
            C5334 + C5334 + C93828 * C1079) *
               C93585 * C28719) *
              C93639 * C801 +
          ((C4440 * C808 + C5335 + C5335 + C93828 * C1080 + C4441 * C4897 +
            C5336 + C5336 + C93694 * C5325) *
               C93585 * C28719 +
           (C4440 * C8520 + C34959 + C34959 + C93828 * C8984 + C4441 * C19095 +
            C34960 + C34960 + C93694 * C19563) *
               C93585 * C28720 +
           (C4440 * C16395 + C34961 + C34961 + C93828 * C16719 +
            C4441 * C21100 + C34962 + C34962 + C93694 * C21316) *
               C93585 * C28721) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C93585 * C28719 +
           (C35809 + C35810) * C93585 * C28720 + C35816 * C28721) *
              C1382 -
          ((C35813 + C35814) * C93585 * C28721 +
           (C35812 + C35811) * C93585 * C28720 +
           (C35810 + C35809) * C93585 * C28719) *
              C1383 +
          (C35816 * C28719 + (C35814 + C35813) * C93585 * C28720 +
           (C4440 * C30188 + C35795 + C35795 + C93828 * C30603 +
            C4441 * C35395 + C35796 + C35796 + C93694 * C35779) *
               C93585 * C28721) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C108 + C93706 * C276) * C4178 +
                (C275 * C189 + C93706 * C501) * C93828 +
                (C275 * C807 + C93706 * C955) * C4179 +
                (C275 * C889 + C93706 * C1145) * C93694) *
                   C4075 +
               (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
                  C93639 * C93625 * C97 -
              ((C4566 + C4567 + C4568 + C4569) * C4077 +
               (C4565 + C4564 + C4563 + C4562) * C4076 +
               (C4561 + C4560 + C4559 + C4558) * C4075) *
                  C93639 * C93625 * C98 +
              (C4572 * C4075 + (C4569 + C4568 + C4567 + C4566) * C4076 +
               (C312 * C4178 + C523 * C93828 +
                (C275 * C1983 + C93706 * C2142) * C4179 +
                (C275 * C2056 + C93706 * C2378) * C93694) *
                   C4077) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C275 * C108 + C93706 * C276) * C4178 +
                (C275 * C189 + C93706 * C501) * C93828 + C5123 * C4179 +
                C5426 * C93694) *
                   C4075 +
               (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
                  C93639 * C800 -
              ((C5427 * C93694 + C5126 * C4179 + C2390 * C93828 +
                C2160 * C4178) *
                   C4077 +
               (C5428 * C93694 + C5128 * C4179 + C2391 * C93828 +
                C2162 * C4178) *
                   C4076 +
               (C5429 * C93694 + C5130 * C4179 + C5426 * C93828 +
                C5123 * C4178) *
                   C4075) *
                  C93639 * C801 +
              ((C5130 * C4178 + C5429 * C93828 +
                (C275 * C4897 + C93706 * C5096) * C4179 +
                (C275 * C5016 + C93706 * C5414) * C93694) *
                   C4075 +
               (C5128 * C4178 + C5428 * C93828 +
                (C275 * C4898 + C93706 * C5097) * C4179 +
                (C275 * C5017 + C93706 * C5415) * C93694) *
                   C4076 +
               (C5126 * C4178 + C5427 * C93828 +
                (C275 * C4899 + C93706 * C5098) * C4179 +
                (C275 * C5018 + C93706 * C5416) * C93694) *
                   C4077) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4178 +
            (C275 * C189 + C93706 * C501) * C93828 + C5123 * C4179 +
            C5426 * C93694) *
               C4075 +
           (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
              C1382 -
          (((C275 * C3493 + C93706 * C3785) * C93694 +
            (C275 * C3411 + C93706 * C3567) * C4179 + C3104 * C93828 +
            C2874 * C4178) *
               C4077 +
           ((C275 * C3492 + C93706 * C3784) * C93694 +
            (C275 * C3410 + C93706 * C3566) * C4179 + C3105 * C93828 +
            C2876 * C4178) *
               C4076 +
           ((C275 * C3491 + C93706 * C3783) * C93694 +
            (C275 * C3409 + C93706 * C3565) * C4179 +
            (C275 * C1470 + C93706 * C1726) * C93828 +
            (C275 * C1388 + C93706 * C1536) * C4178) *
               C4075) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C4178 +
            (C275 * C1471 + C93706 * C1727) * C93828 +
            (C275 * C5775 + C93706 * C5950) * C4179 +
            (C275 * C5870 + C93706 * C6196) * C93694) *
               C4075 +
           ((C275 * C1390 + C93706 * C1538) * C4178 +
            (C275 * C1472 + C93706 * C1728) * C93828 +
            (C275 * C5776 + C93706 * C5951) * C4179 +
            (C275 * C5871 + C93706 * C6197) * C93694) *
               C4076 +
           ((C275 * C1391 + C93706 * C1539) * C4178 +
            (C275 * C1473 + C93706 * C1729) * C93828 +
            (C275 * C5777 + C93706 * C5952) * C4179 +
            (C275 * C5872 + C93706 * C6198) * C93694) *
               C4077) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C20112 +
           (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
           C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
           C16059 * C20047) *
              C93585 * C93639 * C93625 * C97 -
          (C16058 * C20047 + C15767 * C20115 + C5428 * C20046 + C5128 * C20114 +
           C2391 * C20045 + C2162 * C20113 + C520 * C20044 + C305 * C20112) *
              C93585 * C93639 * C93625 * C98 +
          (C307 * C20112 + C521 * C20044 + C2160 * C20113 + C2390 * C20045 +
           C5126 * C20114 + C5427 * C20046 +
           (C275 * C4899 + C93706 * C5098) * C20115 +
           (C275 * C5018 + C93706 * C5416) * C20047) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C20112 +
           (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
           C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
           C16059 * C20047) *
              C93585 * C93639 * C800 -
          (C20869 * C20047 + C20679 * C20115 + C16059 * C20046 +
           C15769 * C20114 + C5429 * C20045 + C5130 * C20113 + C5426 * C20044 +
           C5123 * C20112) *
              C93585 * C93639 * C801 +
          (C5130 * C20112 + C5429 * C20044 + C15769 * C20113 + C16059 * C20045 +
           C20679 * C20114 + C20869 * C20046 +
           (C275 * C20532 + C93706 * C20663) * C20115 +
           (C275 * C20611 + C93706 * C20865) * C20047) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C20112 +
           (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
           C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
           C16059 * C20047) *
              C93585 * C1382 -
          ((C275 * C19221 + C93706 * C19669) * C20047 +
           (C275 * C19095 + C93706 * C19323) * C20115 + C19674 * C20046 +
           C19339 * C20114 + C9097 * C20045 + C8765 * C20113 +
           (C275 * C1470 + C93706 * C1726) * C20044 +
           (C275 * C1388 + C93706 * C1536) * C20112) *
              C93585 * C1383 +
          ((C275 * C1389 + C93706 * C1537) * C20112 +
           (C275 * C1471 + C93706 * C1727) * C20044 +
           (C275 * C5775 + C93706 * C5950) * C20113 +
           (C275 * C5870 + C93706 * C6196) * C20045 +
           (C275 * C16395 + C93706 * C16565) * C20114 +
           (C275 * C16487 + C93706 * C16807) * C20046 +
           (C275 * C21100 + C93706 * C21213) * C20115 +
           (C275 * C21161 + C93706 * C21375) * C20047) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
            C28878 * C1389 + C28721 * C1537) *
               C4178 +
           (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
            C28878 * C1471 + C28721 * C1727) *
               C93828 +
           (C28876 * C807 + C28719 * C955 + C28877 * C3409 + C28720 * C3565 +
            C28878 * C5775 + C28721 * C5950) *
               C4179 +
           (C28876 * C889 + C28719 * C1145 + C28877 * C3491 + C28720 * C3783 +
            C28878 * C5870 + C28721 * C6196) *
               C93694) *
              C93585 * C93639 * C93625 * C97 -
          ((C31591 + C31592 + C31593) * C93694 +
           (C31283 + C31284 + C31285) * C4179 +
           (C29152 + C29151 + C29150) * C93828 +
           (C28906 + C28905 + C28904) * C4178) *
              C93585 * C93639 * C93625 * C98 +
          ((C28915 + C28914 + C28913) * C4178 +
           (C29155 + C29154 + C29153) * C93828 +
           (C28876 * C805 + C28719 * C953 + C28877 * C3411 + C28720 * C3567 +
            C28878 * C5777 + C28721 * C5952) *
               C4179 +
           (C28876 * C887 + C28719 * C1143 + C28877 * C3493 + C28720 * C3785 +
            C28878 * C5872 + C28721 * C6198) *
               C93694) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
            C28878 * C1389 + C28721 * C1537) *
               C4178 +
           (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
            C28878 * C1471 + C28721 * C1727) *
               C93828 +
           (C34797 + C34798 + C34799) * C4179 +
           (C35049 + C35050 + C35051) * C93694) *
              C93585 * C93639 * C800 -
          ((C35052 + C35053 + C35054) * C93694 +
           (C34806 + C34807 + C34808) * C4179 +
           (C35051 + C35050 + C35049) * C93828 +
           (C34799 + C34798 + C34797) * C4178) *
              C93585 * C93639 * C801 +
          ((C34808 + C34807 + C34806) * C4178 +
           (C35054 + C35053 + C35052) * C93828 +
           (C28876 * C4897 + C28719 * C5096 + C28877 * C19095 +
            C28720 * C19323 + C28878 * C21100 + C28721 * C21213) *
               C4179 +
           (C28876 * C5016 + C28719 * C5414 + C28877 * C19221 +
            C28720 * C19669 + C28878 * C21161 + C28721 * C21375) *
               C93694) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
            C28878 * C1389 + C28721 * C1537) *
               C4178 +
           (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
            C28878 * C1471 + C28721 * C1727) *
               C93828 +
           (C34797 + C34798 + C34799) * C4179 +
           (C35049 + C35050 + C35051) * C93694) *
              C93585 * C1382 -
          ((C28878 * C25104 + C28721 * C25517 + C28877 * C5870 +
            C28720 * C6196 + C28876 * C3491 + C28719 * C3783) *
               C93694 +
           (C28878 * C25001 + C28721 * C25218 + C28877 * C5775 +
            C28720 * C5950 + C28876 * C3409 + C28719 * C3565) *
               C4179 +
           (C28878 * C11080 + C28721 * C11495 + C28877 * C1471 +
            C28720 * C1727 + C28876 * C1470 + C28719 * C1726) *
               C93828 +
           (C28878 * C10964 + C28721 * C11196 + C28877 * C1389 +
            C28720 * C1537 + C28876 * C1388 + C28719 * C1536) *
               C4178) *
              C93585 * C1383 +
          ((C28876 * C1389 + C28719 * C1537 + C28877 * C10964 +
            C28720 * C11196 + C28878 * C30188 + C28721 * C30408) *
               C4178 +
           (C28876 * C1471 + C28719 * C1727 + C28877 * C11080 +
            C28720 * C11495 + C28878 * C30303 + C28721 * C30698) *
               C93828 +
           (C28876 * C5775 + C28719 * C5950 + C28877 * C25001 +
            C28720 * C25218 + C28878 * C35395 + C28721 * C35601) *
               C4179 +
           (C28876 * C5870 + C28719 * C6196 + C28877 * C25104 +
            C28720 * C25517 + C28878 * C35484 + C28721 * C35890) *
               C93694) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
                 C4085 * C110 + C4077 * C116) *
                    C275 +
                (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
                 C4085 * C278 + C4077 * C581) *
                    C93706) *
                   C93828 +
               ((C4081 * C807 + C4075 * C815 + C4083 * C806 + C4076 * C814 +
                 C4085 * C805 + C4077 * C813) *
                    C275 +
                (C4081 * C955 + C4075 * C1203 + C4083 * C954 + C4076 * C1202 +
                 C4085 * C953 + C4077 * C1201) *
                    C93706) *
                   C93694) *
                  C93639 * C93625 * C97 -
              (((C4085 * C952 + C4077 * C1200 + C4083 * C953 + C4076 * C1201 +
                 C4081 * C954 + C4075 * C1202) *
                    C93706 +
                (C4085 * C804 + C4077 * C812 + C4083 * C805 + C4076 * C813 +
                 C4081 * C806 + C4075 * C814) *
                    C275) *
                   C93694 +
               ((C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
                 C4081 * C277 + C4075 * C580) *
                    C93706 +
                (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
                 C4081 * C109 + C4075 * C115) *
                    C275) *
                   C93828) *
                  C93639 * C93625 * C98 +
              (((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
                 C4085 * C112 + C4077 * C118) *
                    C275 +
                (C4081 * C278 + C4075 * C581 + C4083 * C279 + C4076 * C582 +
                 C4085 * C280 + C4077 * C583) *
                    C93706) *
                   C93828 +
               ((C4081 * C805 + C4075 * C813 + C4083 * C804 + C4076 * C812 +
                 C4085 * C1983 + C4077 * C1984) *
                    C275 +
                (C4081 * C953 + C4075 * C1201 + C4083 * C952 + C4076 * C1200 +
                 C4085 * C2142 + C4077 * C2460) *
                    C93706) *
                   C93694) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
                 C4085 * C110 + C4077 * C116) *
                    C275 +
                (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
                 C4085 * C278 + C4077 * C581) *
                    C93706) *
                   C93828 +
               ((C5240 + C5241 + C5242) * C275 +
                (C5519 + C5520 + C5521) * C93706) *
                   C93694) *
                  C93639 * C800 -
              (((C5522 + C5523 + C5524) * C93706 +
                (C5249 + C5250 + C5251) * C275) *
                   C93694 +
               ((C5521 + C5520 + C5519) * C93706 +
                (C5242 + C5241 + C5240) * C275) *
                   C93828) *
                  C93639 * C801 +
              (((C5251 + C5250 + C5249) * C275 +
                (C5524 + C5523 + C5522) * C93706) *
                   C93828 +
               ((C4081 * C4897 + C4075 * C4900 + C4083 * C4898 + C4076 * C4901 +
                 C4085 * C4899 + C4077 * C4902) *
                    C275 +
                (C4081 * C5096 + C4075 * C5503 + C4083 * C5097 + C4076 * C5504 +
                 C4085 * C5098 + C4077 * C5505) *
                    C93706) *
                   C93694) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C275 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93706) *
               C93828 +
           ((C5240 + C5241 + C5242) * C275 + (C5519 + C5520 + C5521) * C93706) *
               C93694) *
              C1382 -
          (((C4085 * C3567 + C4077 * C3855 + C4083 * C3566 + C4076 * C3854 +
             C4081 * C3565 + C4075 * C3853) *
                C93706 +
            (C4085 * C3411 + C4077 * C3415 + C4083 * C3410 + C4076 * C3414 +
             C4081 * C3409 + C4075 * C3413) *
                C275) *
               C93694 +
           ((C4085 * C1534 + C4077 * C1782 + C4083 * C1535 + C4076 * C1783 +
             C4081 * C1536 + C4075 * C1784) *
                C93706 +
            (C4085 * C1386 + C4077 * C1394 + C4083 * C1387 + C4076 * C1395 +
             C4081 * C1388 + C4075 * C1396) *
                C275) *
               C93828) *
              C1383 +
          (((C4081 * C1389 + C4075 * C1397 + C4083 * C1390 + C4076 * C1398 +
             C4085 * C1391 + C4077 * C1399) *
                C275 +
            (C4081 * C1537 + C4075 * C1785 + C4083 * C1538 + C4076 * C1786 +
             C4085 * C1539 + C4077 * C1787) *
                C93706) *
               C93828 +
           ((C4081 * C5775 + C4075 * C5778 + C4083 * C5776 + C4076 * C5779 +
             C4085 * C5777 + C4077 * C5780) *
                C275 +
            (C4081 * C5950 + C4075 * C6273 + C4083 * C5951 + C4076 * C6274 +
             C4085 * C5952 + C4077 * C6275) *
                C93706) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C275 +
            (C20049 * C276 + C93585 * C579) * C93706) *
               C20044 +
           ((C20049 * C807 + C93585 * C815) * C275 +
            (C20049 * C955 + C93585 * C1203) * C93706) *
               C20045 +
           ((C20049 * C808 + C93585 * C816) * C275 +
            (C20049 * C956 + C93585 * C1204) * C93706) *
               C20046 +
           ((C20049 * C4897 + C93585 * C4900) * C275 +
            (C20049 * C5096 + C93585 * C5503) * C93706) *
               C20047) *
              C93639 * C93625 * C97 -
          (((C20049 * C5097 + C93585 * C5504) * C93706 +
            (C20049 * C4898 + C93585 * C4901) * C275) *
               C20047 +
           ((C20049 * C957 + C93585 * C1205) * C93706 +
            (C20049 * C809 + C93585 * C817) * C275) *
               C20046 +
           ((C20049 * C954 + C93585 * C1202) * C93706 +
            (C20049 * C806 + C93585 * C814) * C275) *
               C20045 +
           ((C20049 * C277 + C93585 * C580) * C93706 +
            (C20049 * C109 + C93585 * C115) * C275) *
               C20044) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C275 +
            (C20049 * C278 + C93585 * C581) * C93706) *
               C20044 +
           ((C20049 * C805 + C93585 * C813) * C275 +
            (C20049 * C953 + C93585 * C1201) * C93706) *
               C20045 +
           ((C20049 * C810 + C93585 * C818) * C275 +
            (C20049 * C958 + C93585 * C1206) * C93706) *
               C20046 +
           ((C20049 * C4899 + C93585 * C4902) * C275 +
            (C20049 * C5098 + C93585 * C5505) * C93706) *
               C20047) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C275 +
            (C20049 * C276 + C93585 * C579) * C93706) *
               C20044 +
           (C20921 + C20937) * C20045 + C20941 * C20046 + C20942 * C20047) *
              C93639 * C800 -
          ((C20940 + C20932) * C20047 + (C20939 + C20927) * C20046 +
           (C20938 + C20924) * C20045 + (C20937 + C20921) * C20044) *
              C93639 * C801 +
          (C20941 * C20044 + C20942 * C20045 + (C20932 + C20940) * C20046 +
           ((C20049 * C20532 + C93585 * C20533) * C275 +
            (C20049 * C20663 + C93585 * C20919) * C93706) *
               C20047) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C275 +
            (C20049 * C276 + C93585 * C579) * C93706) *
               C20044 +
           (C20921 + C20937) * C20045 + C20941 * C20046 + C20942 * C20047) *
              C1382 -
          (((C20049 * C19323 + C93585 * C19772) * C93706 +
            (C20049 * C19095 + C93585 * C19097) * C275) *
               C20047 +
           ((C20049 * C8749 + C93585 * C9195) * C93706 +
            (C20049 * C8520 + C93585 * C8523) * C275) *
               C20046 +
           ((C20049 * C3565 + C93585 * C3853) * C93706 +
            (C20049 * C3409 + C93585 * C3413) * C275) *
               C20045 +
           ((C20049 * C1536 + C93585 * C1784) * C93706 +
            (C20049 * C1388 + C93585 * C1396) * C275) *
               C20044) *
              C1383 +
          (((C20049 * C1389 + C93585 * C1397) * C275 +
            (C20049 * C1537 + C93585 * C1785) * C93706) *
               C20044 +
           ((C20049 * C5775 + C93585 * C5778) * C275 +
            (C20049 * C5950 + C93585 * C6273) * C93706) *
               C20045 +
           ((C20049 * C16395 + C93585 * C16397) * C275 +
            (C20049 * C16565 + C93585 * C16883) * C93706) *
               C20046 +
           ((C20049 * C21100 + C93585 * C21101) * C275 +
            (C20049 * C21213 + C93585 * C21426) * C93706) *
               C20047) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C28876 +
            (C20049 * C276 + C93585 * C579) * C28719 + C25319 * C28877 +
            C25604 * C28720 + C25326 * C28878 + C25607 * C28721) *
               C93828 +
           (C20749 * C28876 + C20933 * C28719 + C23109 * C28877 +
            C23329 * C28720 + C25324 * C28878 + C25606 * C28721) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C20049 * C5951 + C93585 * C6274) * C28721 +
            (C20049 * C5776 + C93585 * C5779) * C28878 + C26524 * C28720 +
            C26210 * C28877 + C22049 * C28719 + C21832 * C28876) *
               C93694 +
           ((C20049 * C1538 + C93585 * C1786) * C28721 +
            (C20049 * C1390 + C93585 * C1398) * C28878 + C27444 * C28720 +
            C27144 * C28877 + (C20049 * C277 + C93585 * C580) * C28719 +
            (C20049 * C109 + C93585 * C115) * C28876) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C28876 +
            (C20049 * C278 + C93585 * C581) * C28719 +
            (C20049 * C1386 + C93585 * C1394) * C28877 +
            (C20049 * C1534 + C93585 * C1782) * C28720 +
            (C20049 * C1391 + C93585 * C1399) * C28878 +
            (C20049 * C1539 + C93585 * C1787) * C28721) *
               C93828 +
           ((C20049 * C805 + C93585 * C813) * C28876 +
            (C20049 * C953 + C93585 * C1201) * C28719 +
            (C20049 * C3411 + C93585 * C3415) * C28877 +
            (C20049 * C3567 + C93585 * C3855) * C28720 +
            (C20049 * C5777 + C93585 * C5780) * C28878 +
            (C20049 * C5952 + C93585 * C6275) * C28721) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C28876 +
            (C20049 * C276 + C93585 * C579) * C28719 + C25319 * C28877 +
            C25604 * C28720 + C25326 * C28878 + C25607 * C28721) *
               C93828 +
           (C35129 + C35130 + C35131 + C35132 + C35133 + C35134) * C93694) *
              C93639 * C800 -
          ((C35135 + C35136 + C35137 + C35138 + C35139 + C35140) * C93694 +
           (C35134 + C35133 + C35132 + C35131 + C35130 + C35129) * C93828) *
              C93639 * C801 +
          ((C35140 + C35139 + C35138 + C35137 + C35136 + C35135) * C93828 +
           (C20753 * C28876 + C20935 * C28719 + C23105 * C28877 +
            C23327 * C28720 + (C20049 * C21100 + C93585 * C21101) * C28878 +
            (C20049 * C21213 + C93585 * C21426) * C28721) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C28876 +
            (C20049 * C276 + C93585 * C579) * C28719 + C25319 * C28877 +
            C25604 * C28720 + C25326 * C28878 + C25607 * C28721) *
               C93828 +
           (C35129 + C35130 + C35131 + C35132 + C35133 + C35134) * C93694) *
              C1382 -
          ((C35971 * C28721 + C35697 * C28878 + C25606 * C28720 +
            C25324 * C28877 + C23329 * C28719 + C23109 * C28876) *
               C93694 +
           (C35972 * C28721 + C35699 * C28878 + C25607 * C28720 +
            C25326 * C28877 + C25604 * C28719 + C25319 * C28876) *
               C93828) *
              C1383 +
          ((C25326 * C28876 + C25607 * C28719 + C35699 * C28877 +
            C35972 * C28720 + (C20049 * C30188 + C93585 * C30190) * C28878 +
            (C20049 * C30408 + C93585 * C30774) * C28721) *
               C93828 +
           (C25324 * C28876 + C25606 * C28719 + C35697 * C28877 +
            C35971 * C28720 + (C20049 * C35395 + C93585 * C35396) * C28878 +
            (C20049 * C35601 + C93585 * C35965) * C28721) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                    C275 +
                (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                    C93706) *
                   C4075 +
               ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
               C4742 * C4077) *
                  C93639 * C93625 * C97 -
              (((C4738 + C4739) * C93706 + (C4215 + C4216) * C275) * C4077 +
               ((C4737 + C4736) * C93706 + (C4210 + C4209) * C275) * C4076 +
               ((C4735 + C4734) * C93706 + (C4206 + C4205) * C275) * C4075) *
                  C93639 * C93625 * C98 +
              (C4742 * C4075 +
               ((C4216 + C4215) * C275 + (C4739 + C4738) * C93706) * C4076 +
               ((C4178 * C112 + C93828 * C193 + C4179 * C1983 +
                 C93694 * C2056) *
                    C275 +
                (C4178 * C280 + C93828 * C639 + C4179 * C2142 +
                 C93694 * C2527) *
                    C93706) *
                   C4077) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                    C275 +
                (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                    C93706) *
                   C4075 +
               ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
               C4742 * C4077) *
                  C93639 * C800 -
              (((C4179 * C958 + C93694 * C1264 + C4178 * C953 +
                 C93828 * C1259) *
                    C93706 +
                (C4179 * C810 + C93694 * C892 + C4178 * C805 + C93828 * C887) *
                    C275) *
                   C4077 +
               ((C4179 * C957 + C93694 * C1263 + C4178 * C954 +
                 C93828 * C1260) *
                    C93706 +
                (C4179 * C809 + C93694 * C891 + C4178 * C806 + C93828 * C888) *
                    C275) *
                   C4076 +
               ((C4179 * C956 + C93694 * C1262 + C4178 * C955 +
                 C93828 * C1261) *
                    C93706 +
                (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                    C275) *
                   C4075) *
                  C93639 * C801 +
              (((C4178 * C808 + C93828 * C890 + C4179 * C4897 +
                 C93694 * C5016) *
                    C275 +
                (C4178 * C956 + C93828 * C1262 + C4179 * C5096 +
                 C93694 * C5598) *
                    C93706) *
                   C4075 +
               ((C4178 * C809 + C93828 * C891 + C4179 * C4898 +
                 C93694 * C5017) *
                    C275 +
                (C4178 * C957 + C93828 * C1263 + C4179 * C5097 +
                 C93694 * C5599) *
                    C93706) *
                   C4076 +
               ((C4178 * C810 + C93828 * C892 + C4179 * C4899 +
                 C93694 * C5018) *
                    C275 +
                (C4178 * C958 + C93828 * C1264 + C4179 * C5098 +
                 C93694 * C5600) *
                    C93706) *
                   C4077) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C275 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C93706) *
               C4075 +
           ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
           C4742 * C4077) *
              C1382 -
          (((C4179 * C3567 + C93694 * C3925 + C4178 * C1534 + C93828 * C1840) *
                C93706 +
            (C4179 * C3411 + C93694 * C3493 + C4178 * C1386 + C93828 * C1468) *
                C275) *
               C4077 +
           ((C4179 * C3566 + C93694 * C3924 + C4178 * C1535 + C93828 * C1841) *
                C93706 +
            (C4179 * C3410 + C93694 * C3492 + C4178 * C1387 + C93828 * C1469) *
                C275) *
               C4076 +
           ((C4179 * C3565 + C93694 * C3923 + C4178 * C1536 + C93828 * C1842) *
                C93706 +
            (C4179 * C3409 + C93694 * C3491 + C4178 * C1388 + C93828 * C1470) *
                C275) *
               C4075) *
              C1383 +
          (((C4178 * C1389 + C93828 * C1471 + C4179 * C5775 + C93694 * C5870) *
                C275 +
            (C4178 * C1537 + C93828 * C1843 + C4179 * C5950 + C93694 * C6350) *
                C93706) *
               C4075 +
           ((C4178 * C1390 + C93828 * C1472 + C4179 * C5776 + C93694 * C5871) *
                C275 +
            (C4178 * C1538 + C93828 * C1844 + C4179 * C5951 + C93694 * C6351) *
                C93706) *
               C4076 +
           ((C4178 * C1391 + C93828 * C1473 + C4179 * C5777 + C93694 * C5872) *
                C275 +
            (C4178 * C1539 + C93828 * C1845 + C4179 * C5952 + C93694 * C6352) *
                C93706) *
               C4077) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C275 +
           (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
            C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
               C93706) *
              C93585 * C93639 * C93625 * C97 -
          ((C20115 * C5097 + C20047 * C5599 + C20114 * C957 + C20046 * C1263 +
            C20113 * C954 + C20045 * C1260 + C20112 * C277 + C20044 * C636) *
               C93706 +
           (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
            C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
               C275) *
              C93585 * C93639 * C93625 * C98 +
          ((C20112 * C110 + C20044 * C191 + C20113 * C805 + C20045 * C887 +
            C20114 * C810 + C20046 * C892 + C20115 * C4899 + C20047 * C5018) *
               C275 +
           (C20112 * C278 + C20044 * C637 + C20113 * C953 + C20045 * C1259 +
            C20114 * C958 + C20046 * C1264 + C20115 * C5098 + C20047 * C5600) *
               C93706) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C275 +
           (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
            C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
               C93706) *
              C93585 * C93639 * C800 -
          ((C20115 * C15744 + C20047 * C16231 + C20114 * C5096 +
            C20046 * C5598 + C20113 * C956 + C20045 * C1262 + C20112 * C955 +
            C20044 * C1261) *
               C93706 +
           (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
            C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
            C20044 * C889) *
               C275) *
              C93585 * C93639 * C801 +
          ((C20112 * C808 + C20044 * C890 + C20113 * C4897 + C20045 * C5016 +
            C20114 * C15550 + C20046 * C15666 + C20115 * C20532 +
            C20047 * C20611) *
               C275 +
           (C20112 * C956 + C20044 * C1262 + C20113 * C5096 + C20045 * C5598 +
            C20114 * C15744 + C20046 * C16231 + C20115 * C20663 +
            C20047 * C20992) *
               C93706) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C275 +
           (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
            C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
               C93706) *
              C93585 * C1382 -
          ((C20115 * C19323 + C20047 * C19884 + C20114 * C8749 +
            C20046 * C9305 + C20113 * C3565 + C20045 * C3923 + C20112 * C1536 +
            C20044 * C1842) *
               C93706 +
           (C20115 * C19095 + C20047 * C19221 + C20114 * C8520 +
            C20046 * C8645 + C20113 * C3409 + C20045 * C3491 + C20112 * C1388 +
            C20044 * C1470) *
               C275) *
              C93585 * C1383 +
          ((C20112 * C1389 + C20044 * C1471 + C20113 * C5775 + C20045 * C5870 +
            C20114 * C16395 + C20046 * C16487 + C20115 * C21100 +
            C20047 * C21161) *
               C275 +
           (C20112 * C1537 + C20044 * C1843 + C20113 * C5950 + C20045 * C6350 +
            C20114 * C16565 + C20046 * C16959 + C20115 * C21213 +
            C20047 * C21477) *
               C93706) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C28876 +
           (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
               C28719 +
           (C4178 * C1388 + C93828 * C1470 + C4179 * C3409 + C93694 * C3491) *
               C28877 +
           (C4178 * C1536 + C93828 * C1842 + C4179 * C3565 + C93694 * C3923) *
               C28720 +
           (C4178 * C1389 + C93828 * C1471 + C4179 * C5775 + C93694 * C5870) *
               C28878 +
           (C4178 * C1537 + C93828 * C1843 + C4179 * C5950 + C93694 * C6350) *
               C28721) *
              C93585 * C93639 * C93625 * C97 -
          ((C4179 * C5951 + C93694 * C6351 + C4178 * C1538 + C93828 * C1844) *
               C28721 +
           (C4179 * C5776 + C93694 * C5871 + C4178 * C1390 + C93828 * C1472) *
               C28878 +
           (C8309 + C8310) * C28720 + (C7661 + C7662) * C28877 +
           (C4735 + C4734) * C28719 + (C4206 + C4205) * C28876) *
              C93585 * C93639 * C93625 * C98 +
          (C4217 * C28876 + C4740 * C28719 + (C7658 + C7657) * C28877 +
           (C8308 + C8307) * C28720 +
           (C4178 * C1391 + C93828 * C1473 + C4179 * C5777 + C93694 * C5872) *
               C28878 +
           (C4178 * C1539 + C93828 * C1845 + C4179 * C5952 + C93694 * C6352) *
               C28721) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C28876 +
           (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
               C28719 +
           (C4178 * C1388 + C93828 * C1470 + C4179 * C3409 + C93694 * C3491) *
               C28877 +
           (C4178 * C1536 + C93828 * C1842 + C4179 * C3565 + C93694 * C3923) *
               C28720 +
           (C4178 * C1389 + C93828 * C1471 + C4179 * C5775 + C93694 * C5870) *
               C28878 +
           (C4178 * C1537 + C93828 * C1843 + C4179 * C5950 + C93694 * C6350) *
               C28721) *
              C93585 * C93639 * C800 -
          ((C4179 * C16565 + C93694 * C16959 + C4178 * C5950 + C93828 * C6350) *
               C28721 +
           (C4179 * C16395 + C93694 * C16487 + C4178 * C5775 + C93828 * C5870) *
               C28878 +
           (C4179 * C8749 + C93694 * C9305 + C4178 * C3565 + C93828 * C3923) *
               C28720 +
           (C4179 * C8520 + C93694 * C8645 + C4178 * C3409 + C93828 * C3491) *
               C28877 +
           (C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
               C28719 +
           (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
               C28876) *
              C93585 * C93639 * C801 +
          ((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
               C28876 +
           (C4178 * C956 + C93828 * C1262 + C4179 * C5096 + C93694 * C5598) *
               C28719 +
           (C4178 * C8520 + C93828 * C8645 + C4179 * C19095 + C93694 * C19221) *
               C28877 +
           (C4178 * C8749 + C93828 * C9305 + C4179 * C19323 + C93694 * C19884) *
               C28720 +
           (C4178 * C16395 + C93828 * C16487 + C4179 * C21100 +
            C93694 * C21161) *
               C28878 +
           (C4178 * C16565 + C93828 * C16959 + C4179 * C21213 +
            C93694 * C21477) *
               C28721) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C28876 +
           (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
               C28719 +
           (C35511 + C35512) * C28877 + (C36060 + C36061) * C28720 +
           C35523 * C28878 + C36066 * C28721) *
              C93585 * C1382 -
          ((C36064 + C36065) * C28721 + (C35521 + C35522) * C28878 +
           (C36063 + C36062) * C28720 + (C35516 + C35515) * C28877 +
           (C36061 + C36060) * C28719 + (C35512 + C35511) * C28876) *
              C93585 * C1383 +
          (C35523 * C28876 + C36066 * C28719 + (C35522 + C35521) * C28877 +
           (C36065 + C36064) * C28720 +
           (C4178 * C30188 + C93828 * C30303 + C4179 * C35395 +
            C93694 * C35484) *
               C28878 +
           (C4178 * C30408 + C93828 * C30869 + C4179 * C35601 +
            C93694 * C36046) *
               C28721) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
                (C713 * C807 + C1328 + C1328 + C93706 * C1319) * C93694) *
                   C4075 +
               (C4817 + C4818) * C4076 + C4823 * C4077) *
                  C93639 * C93625 * C97 -
              ((C4821 + C4822) * C4077 + (C4820 + C4819) * C4076 +
               (C4818 + C4817) * C4075) *
                  C93639 * C93625 * C98 +
              (C4823 * C4075 + (C4822 + C4821) * C4076 +
               (C746 * C93828 +
                (C713 * C1983 + C2617 + C2617 + C93706 * C2609) * C93694) *
                   C4077) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
                C5698 * C93694) *
                   C4075 +
               (C4817 + C4818) * C4076 + C4823 * C4077) *
                  C93639 * C800 -
              ((C5699 * C93694 + C2625 * C93828) * C4077 +
               (C5700 * C93694 + C2626 * C93828) * C4076 +
               (C5701 * C93694 + C5698 * C93828) * C4075) *
                  C93639 * C801 +
              ((C5701 * C93828 +
                (C713 * C4897 + C5687 + C5687 + C93706 * C5675) * C93694) *
                   C4075 +
               (C5700 * C93828 +
                (C713 * C4898 + C5688 + C5688 + C93706 * C5676) * C93694) *
                   C4076 +
               (C5699 * C93828 +
                (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C93694) *
                   C4077) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
            C5698 * C93694) *
               C4075 +
           (C4817 + C4818) * C4076 + C4823 * C4077) *
              C1382 -
          (((C713 * C3411 + C4000 + C4000 + C93706 * C3995) * C93694 +
            C3339 * C93828) *
               C4077 +
           ((C713 * C3410 + C3999 + C3999 + C93706 * C3994) * C93694 +
            C3340 * C93828) *
               C4076 +
           ((C713 * C3409 + C3998 + C3998 + C93706 * C3993) * C93694 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93828) *
               C4075) *
              C1383 +
          (((C713 * C1389 + C1910 + C1910 + C93706 * C1901) * C93828 +
            (C713 * C5775 + C6431 + C6431 + C93706 * C6427) * C93694) *
               C4075 +
           ((C713 * C1390 + C1911 + C1911 + C93706 * C1902) * C93828 +
            (C713 * C5776 + C6432 + C6432 + C93706 * C6428) * C93694) *
               C4076 +
           ((C713 * C1391 + C1912 + C1912 + C93706 * C1903) * C93828 +
            (C713 * C5777 + C6433 + C6433 + C93706 * C6429) * C93694) *
               C4077) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
           C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
              C93585 * C93639 * C93625 * C97 -
          (C16320 * C20047 + C5700 * C20046 + C2626 * C20045 + C743 * C20044) *
              C93585 * C93639 * C93625 * C98 +
          (C744 * C20044 + C2625 * C20045 + C5699 * C20046 +
           (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C20047) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
           C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
              C93585 * C93639 * C800 -
          (C21050 * C20047 + C16321 * C20046 + C5701 * C20045 +
           C5698 * C20044) *
              C93585 * C93639 * C801 +
          (C5701 * C20044 + C16321 * C20045 + C21050 * C20046 +
           (C713 * C20532 + C21047 + C21047 + C93706 * C21043) * C20047) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
           C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
              C93585 * C1382 -
          ((C713 * C19095 + C19989 + C19989 + C93706 * C19984) * C20047 +
           C19993 * C20046 + C9417 * C20045 +
           (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C20044) *
              C93585 * C1383 +
          ((C713 * C1389 + C1910 + C1910 + C93706 * C1901) * C20044 +
           (C713 * C5775 + C6431 + C6431 + C93706 * C6427) * C20045 +
           (C713 * C16395 + C17038 + C17038 + C93706 * C17035) * C20046 +
           (C713 * C21100 + C21530 + C21530 + C93706 * C21528) * C20047) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
            C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
            C29395 + C28721 * C1901) *
               C93828 +
           (C29389 * C807 + C30108 + C30108 + C28719 * C1319 + C29390 * C3409 +
            C30107 + C30107 + C28720 * C3993 + C29391 * C5775 + C30106 +
            C30106 + C28721 * C6427) *
               C93694) *
              C93585 * C93639 * C93625 * C97 -
          ((C31912 + C31913 + C31914) * C93694 +
           (C29431 + C29430 + C29429) * C93828) *
              C93585 * C93639 * C93625 * C98 +
          ((C29434 + C29433 + C29432) * C93828 +
           (C29389 * C805 + C31903 + C31903 + C28719 * C1317 + C29390 * C3411 +
            C31904 + C31904 + C28720 * C3995 + C29391 * C5777 + C31905 +
            C31905 + C28721 * C6429) *
               C93694) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
            C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
            C29395 + C28721 * C1901) *
               C93828 +
           (C35316 + C35317 + C35318) * C93694) *
              C93585 * C93639 * C800 -
          ((C35319 + C35320 + C35321) * C93694 +
           (C35318 + C35317 + C35316) * C93828) *
              C93585 * C93639 * C801 +
          ((C35321 + C35320 + C35319) * C93828 +
           (C29389 * C4897 + C35301 + C35301 + C28719 * C5675 +
            C29390 * C19095 + C35302 + C35302 + C28720 * C19984 +
            C29391 * C21100 + C35303 + C35303 + C28721 * C21528) *
               C93694) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
            C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
            C29395 + C28721 * C1901) *
               C93828 +
           (C35316 + C35317 + C35318) * C93694) *
              C93585 * C1382 -
          ((C29391 * C25001 + C33873 + C33873 + C28721 * C25775 +
            C29390 * C5775 + C33872 + C33872 + C28720 * C6427 + C29389 * C3409 +
            C33871 + C33871 + C28719 * C3993) *
               C93694 +
           (C29391 * C10964 + C30957 + C30957 + C28721 * C11756 +
            C29390 * C1389 + C30958 + C30958 + C28720 * C1901 + C29389 * C1388 +
            C30959 + C30959 + C28719 * C1900) *
               C93828) *
              C93585 * C1383 +
          ((C29389 * C1389 + C30960 + C30960 + C28719 * C1901 +
            C29390 * C10964 + C30961 + C30961 + C28720 * C11756 +
            C29391 * C30188 + C30962 + C30962 + C28721 * C30951) *
               C93828 +
           (C29389 * C5775 + C36142 + C36142 + C28719 * C6427 +
            C29390 * C25001 + C36143 + C36143 + C28720 * C25775 +
            C29391 * C35395 + C36144 + C36144 + C28721 * C36140) *
               C93694) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 *
                C20044 +
            C20558 * C20045 + C20559 * C20046 + C20560 * C20047) *
               C2695 -
           ((C20048 * C19095 + C21104 + C21104 + C93585 * C19099) * C93706 *
                C20047 +
            (C20048 * C8520 + C21105 + C21105 + C93585 * C8526) * C93706 *
                C20046 +
            (C20048 * C3409 + C21106 + C21106 + C93585 * C3417) * C93706 *
                C20045 +
            (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) * C93706 *
                C20044) *
               C2696) *
              C93625 * C1981 +
          (((C20048 * C1387 + C22253 + C22253 + C93585 * C1403) * C93706 *
                C20044 +
            (C20048 * C3410 + C22254 + C22254 + C93585 * C3418) * C93706 *
                C20045 +
            (C20048 * C8521 + C22255 + C22255 + C93585 * C8527) * C93706 *
                C20046 +
            (C20048 * C19096 + C22256 + C22256 + C93585 * C19100) * C93706 *
                C20047) *
               C2696 -
           (C21615 * C20047 + C21614 * C20046 + C21613 * C20045 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93706 *
                C20044) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
             C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
             C4077 * C122) *
                C93706 * C93828 +
            (C4937 + C4938 + C4939) * C93706 * C93694) *
               C2695 -
           ((C4084 * C3411 + C5785 + C5785 + C4077 * C3419 + C4082 * C3410 +
             C5786 + C5786 + C4076 * C3418 + C4080 * C3409 + C5787 + C5787 +
             C4075 * C3417) *
                C93706 * C93694 +
            (C4084 * C1386 + C5788 + C5788 + C4077 * C1402 + C4082 * C1387 +
             C5789 + C5789 + C4076 * C1403 + C4080 * C1388 + C5790 + C5790 +
             C4075 * C1404) *
                C93706 * C93828) *
               C2696) *
              C93625 * C1981 +
          (((C4080 * C1387 + C7535 + C7535 + C4075 * C1403 + C4082 * C1386 +
             C7536 + C7536 + C4076 * C1402 + C4084 * C1385 + C7537 + C7537 +
             C4077 * C1401) *
                C93706 * C93828 +
            (C4080 * C3410 + C7538 + C7538 + C4075 * C3418 + C4082 * C3411 +
             C7539 + C7539 + C4076 * C3419 + C4084 * C3412 + C7540 + C7540 +
             C4077 * C3420) *
                C93706 * C93694) *
               C2696 -
           ((C6549 + C6548 + C6547) * C93706 * C93694 +
            (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 +
             C4097 + C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
             C4075 * C121) *
                C93706 * C93828) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C28719 +
             C25027 * C28720 + C25030 * C28721) *
                C93828 +
            (C34619 + C34620 + C34621) * C93694) *
               C2695 -
           ((C35409 * C28721 + C25029 * C28720 + C22873 * C28719) * C93694 +
            (C35410 * C28721 + C25030 * C28720 + C25027 * C28719) * C93828) *
               C2696) *
              C93625 * C1981 +
          (((C26841 * C28719 + C37156 * C28720 +
             (C20048 * C10965 + C37152 + C37152 + C93585 * C10971) * C28721) *
                C93828 +
            (C25892 * C28719 + C36249 * C28720 +
             (C20048 * C33015 + C37153 + C37153 + C93585 * C33017) * C28721) *
                C93694) *
               C2696 -
           ((C36250 + C36244 + C36243) * C93694 +
            (C37156 * C28721 + C26841 * C28720 +
             (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C28719) *
                C93828) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
             C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
                C20049 +
            (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
             C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
                C93585) *
               C93706 * C2695 -
           ((C20115 * C19097 + C20047 * C19223 + C20114 * C8523 +
             C20046 * C8648 + C20113 * C3413 + C20045 * C3495 + C20112 * C1396 +
             C20044 * C1478) *
                C93585 +
            (C20115 * C19095 + C20047 * C19221 + C20114 * C8520 +
             C20046 * C8645 + C20113 * C3409 + C20045 * C3491 + C20112 * C1388 +
             C20044 * C1470) *
                C20049) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C20112 * C1387 + C20044 * C1469 + C20113 * C3410 + C20045 * C3492 +
             C20114 * C8521 + C20046 * C8646 + C20115 * C19096 +
             C20047 * C19222) *
                C20049 +
            (C20112 * C1395 + C20044 * C1477 + C20113 * C3414 + C20045 * C3496 +
             C20114 * C8524 + C20046 * C8649 + C20115 * C19098 +
             C20047 * C19224) *
                C93585) *
               C93706 * C2696 -
           ((C20115 * C4901 + C20047 * C5020 + C20114 * C817 + C20046 * C899 +
             C20113 * C814 + C20045 * C896 + C20112 * C115 + C20044 * C196) *
                C93585 +
            (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
             C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
                C20049) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C4081 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C4075 +
            (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
            C4218 * C4077) *
               C93706 * C2695 -
           ((C7655 + C7656) * C4077 + (C7657 + C7658) * C4085 +
            (C7659 + C7660) * C4076 + (C7661 + C7662) * C4083 +
            (C4179 * C3413 + C93694 * C3495 + C4178 * C1396 + C93828 * C1478) *
                C4075 +
            (C4179 * C3409 + C93694 * C3491 + C4178 * C1388 + C93828 * C1470) *
                C4081) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C7662 + C7661) * C4081 + (C7660 + C7659) * C4075 +
            (C7658 + C7657) * C4083 + (C7656 + C7655) * C4076 +
            (C4178 * C1385 + C93828 * C1467 + C4179 * C3412 + C93694 * C3494) *
                C4085 +
            (C4178 * C1393 + C93828 * C1475 + C4179 * C3416 + C93694 * C3498) *
                C4077) *
               C93706 * C2696 -
           ((C4213 + C4214) * C4077 + (C4215 + C4216) * C4085 +
            (C4212 + C4211) * C4076 + (C4210 + C4209) * C4083 +
            (C4208 + C4207) * C4075 + (C4206 + C4205) * C4081) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C20049 +
             (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                 C93585) *
                C28719 +
            ((C35511 + C35512) * C20049 + (C35513 + C35514) * C93585) * C28720 +
            C35527 * C28721) *
               C2695 -
           (((C35519 + C35520) * C93585 + (C35521 + C35522) * C20049) * C28721 +
            ((C35518 + C35517) * C93585 + (C35516 + C35515) * C20049) * C28720 +
            ((C35514 + C35513) * C93585 + (C35512 + C35511) * C20049) *
                C28719) *
               C2696) *
              C93625 * C1981 +
          ((((C7662 + C7661) * C20049 + (C7660 + C7659) * C93585) * C28719 +
            ((C37263 + C37264) * C20049 + (C37265 + C37266) * C93585) * C28720 +
            ((C4178 * C10965 + C93828 * C11081 + C4179 * C33015 +
              C93694 * C33128) *
                 C20049 +
             (C4178 * C10968 + C93828 * C11084 + C4179 * C33016 +
              C93694 * C33129) *
                 C93585) *
                C28721) *
               C2696 -
           (((C37266 + C37265) * C93585 + (C37264 + C37263) * C20049) * C28721 +
            ((C7659 + C7660) * C93585 + (C7661 + C7662) * C20049) * C28720 +
            ((C4208 + C4207) * C93585 + (C4206 + C4205) * C20049) * C28719) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C20049 +
             (C275 * C114 + C93706 * C282) * C93585) *
                C20044 +
            (C20666 + C20667) * C20045 + C20676 * C20046 + C20677 * C20047) *
               C2695 -
           (((C275 * C19097 + C93706 * C19325) * C93585 +
             (C275 * C19095 + C93706 * C19323) * C20049) *
                C20047 +
            (C19338 * C93585 + C19339 * C20049) * C20046 +
            (C8764 * C93585 + C8765 * C20049) * C20045 +
            ((C275 * C1396 + C93706 * C1544) * C93585 +
             (C275 * C1388 + C93706 * C1536) * C20049) *
                C20044) *
               C2696) *
              C93625 * C1981 +
          (((C2876 * C20049 + C2875 * C93585) * C20044 +
            (C7772 * C20049 + C7771 * C93585) * C20045 +
            (C18365 * C20049 + C18364 * C93585) * C20046 +
            ((C275 * C19096 + C93706 * C19324) * C20049 +
             (C275 * C19098 + C93706 * C19326) * C93585) *
                C20047) *
               C2696 -
           ((C21753 + C21752) * C20047 + (C21751 + C21750) * C20046 +
            (C21749 + C21748) * C20045 +
            (C306 * C93585 + C305 * C20049) * C20044) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C4081 +
             (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
             C306 * C4076 + C307 * C4085 + C308 * C4077) *
                C93828 +
            (C5131 + C5132 + C5107 + C5108 + C5109 + C5110) * C93694) *
               C2695 -
           ((C7769 * C4077 + C7770 * C4085 + C7771 * C4076 + C7772 * C4083 +
             (C275 * C3413 + C93706 * C3569) * C4075 +
             (C275 * C3409 + C93706 * C3565) * C4081) *
                C93694 +
            (C2873 * C4077 + C2874 * C4085 + C2875 * C4076 + C2876 * C4083 +
             (C275 * C1396 + C93706 * C1544) * C4075 +
             (C275 * C1388 + C93706 * C1536) * C4081) *
                C93828) *
               C2696) *
              C93625 * C1981 +
          (((C2876 * C4081 + C2875 * C4075 + C2874 * C4083 + C2873 * C4076 +
             C2872 * C4085 + C2871 * C4077) *
                C93828 +
            (C7772 * C4081 + C7771 * C4075 + C7770 * C4083 + C7769 * C4076 +
             (C275 * C3412 + C93706 * C3568) * C4085 +
             (C275 * C3416 + C93706 * C3572) * C4077) *
                C93694) *
               C2696 -
           ((C6775 + C6774 + C6773 + C6772 + C6771 + C6770) * C93694 +
            (C310 * C4077 + C309 * C4085 + C308 * C4076 + C307 * C4083 +
             C306 * C4075 + C305 * C4081) *
                C93828) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
              C28878 * C1389 + C28721 * C1537) *
                 C20049 +
             (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
              C28878 * C1397 + C28721 * C1545) *
                 C93585) *
                C93828 +
            ((C34797 + C34798 + C34799) * C20049 +
             (C34800 + C34801 + C34802) * C93585) *
                C93694) *
               C2695 -
           (((C28878 * C25003 + C28721 * C25220 + C28877 * C5778 +
              C28720 * C5953 + C28876 * C3413 + C28719 * C3569) *
                 C93585 +
             (C28878 * C25001 + C28721 * C25218 + C28877 * C5775 +
              C28720 * C5950 + C28876 * C3409 + C28719 * C3565) *
                 C20049) *
                C93694 +
            ((C28878 * C10967 + C28721 * C11199 + C28877 * C1397 +
              C28720 * C1545 + C28876 * C1396 + C28719 * C1544) *
                 C93585 +
             (C28878 * C10964 + C28721 * C11196 + C28877 * C1389 +
              C28720 * C1537 + C28876 * C1388 + C28719 * C1536) *
                 C20049) *
                C93828) *
               C2696) *
              C93625 * C1981 +
          ((((C32256 + C32255 + C32254) * C20049 +
             (C32253 + C32252 + C32251) * C93585) *
                C93828 +
            ((C28876 * C3410 + C28719 * C3566 + C28877 * C5776 +
              C28720 * C5951 + C28878 * C33015 + C28721 * C33242) *
                 C20049 +
             (C28876 * C3414 + C28719 * C3570 + C28877 * C5779 +
              C28720 * C5954 + C28878 * C33016 + C28721 * C33243) *
                 C93585) *
                C93694) *
               C2696 -
           (((C31280 + C31281 + C31282) * C93585 +
             (C31283 + C31284 + C31285) * C20049) *
                C93694 +
            ((C28909 + C28908 + C28907) * C93585 +
             (C28906 + C28905 + C28904) * C20049) *
                C93828) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C20112 +
            (C20049 * C189 + C93585 * C362) * C20044 + C20749 * C20113 +
            C20750 * C20045 + C20751 * C20114 + C20752 * C20046 +
            C20753 * C20115 + C20754 * C20047) *
               C93706 * C2695 -
           ((C20049 * C19221 + C93585 * C19439) * C20047 +
            (C20049 * C19095 + C93585 * C19097) * C20115 +
            (C20049 * C8645 + C93585 * C8865) * C20046 +
            (C20049 * C8520 + C93585 * C8523) * C20114 +
            (C20049 * C3491 + C93585 * C3639) * C20045 +
            (C20049 * C3409 + C93585 * C3413) * C20113 +
            (C20049 * C1470 + C93585 * C1602) * C20044 +
            (C20049 * C1388 + C93585 * C1396) * C20112) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C20049 * C1387 + C93585 * C1395) * C20112 +
            (C20049 * C1469 + C93585 * C1601) * C20044 +
            (C20049 * C3410 + C93585 * C3414) * C20113 +
            (C20049 * C3492 + C93585 * C3640) * C20045 +
            (C20049 * C8521 + C93585 * C8524) * C20114 +
            (C20049 * C8646 + C93585 * C8866) * C20046 +
            (C20049 * C19096 + C93585 * C19098) * C20115 +
            (C20049 * C19222 + C93585 * C19440) * C20047) *
               C93706 * C2696 -
           (C21837 * C20047 + C21836 * C20115 + C21835 * C20046 +
            C21834 * C20114 + C21833 * C20045 + C21832 * C20113 +
            (C20049 * C190 + C93585 * C363) * C20044 +
            (C20049 * C109 + C93585 * C115) * C20112) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C4178 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93828 +
            (C5240 + C5241 + C5242) * C4179 +
            (C5243 + C5244 + C5245) * C93694) *
               C93706 * C2695 -
           ((C4085 * C3493 + C4077 * C3641 + C4083 * C3492 + C4076 * C3640 +
             C4081 * C3491 + C4075 * C3639) *
                C93694 +
            (C4085 * C3411 + C4077 * C3415 + C4083 * C3410 + C4076 * C3414 +
             C4081 * C3409 + C4075 * C3413) *
                C4179 +
            (C4085 * C1468 + C4077 * C1600 + C4083 * C1469 + C4076 * C1601 +
             C4081 * C1470 + C4075 * C1602) *
                C93828 +
            (C4085 * C1386 + C4077 * C1394 + C4083 * C1387 + C4076 * C1395 +
             C4081 * C1388 + C4075 * C1396) *
                C4178) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C4081 * C1387 + C4075 * C1395 + C4083 * C1386 + C4076 * C1394 +
             C4085 * C1385 + C4077 * C1393) *
                C4178 +
            (C4081 * C1469 + C4075 * C1601 + C4083 * C1468 + C4076 * C1600 +
             C4085 * C1467 + C4077 * C1599) *
                C93828 +
            (C4081 * C3410 + C4075 * C3414 + C4083 * C3411 + C4076 * C3415 +
             C4085 * C3412 + C4077 * C3416) *
                C4179 +
            (C4081 * C3492 + C4075 * C3640 + C4083 * C3493 + C4076 * C3641 +
             C4085 * C3494 + C4077 * C3642) *
                C93694) *
               C93706 * C2696 -
           ((C6891 + C6890 + C6889) * C93694 + (C6888 + C6887 + C6886) * C4179 +
            (C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
             C4081 * C190 + C4075 * C363) *
                C93828 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C4178) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C4178 +
             (C20049 * C189 + C93585 * C362) * C93828 + C20749 * C4179 +
             C20750 * C93694) *
                C28719 +
            (C35679 + C35680 + C35681 + C35682) * C28720 + C35705 * C28721) *
               C2695 -
           ((C35701 + C35702 + C35703 + C35704) * C28721 +
            (C35686 + C35685 + C35684 + C35683) * C28720 +
            (C35682 + C35681 + C35680 + C35679) * C28719) *
               C2696) *
              C93625 * C1981 +
          (((C37463 + C37464 + C37465 + C37466) * C28719 +
            (C37475 + C37476 + C37471 + C37472) * C28720 +
            ((C20049 * C10965 + C93585 * C10968) * C4178 +
             (C20049 * C11081 + C93585 * C11277) * C93828 +
             (C20049 * C33015 + C93585 * C33016) * C4179 +
             (C20049 * C33128 + C93585 * C33342) * C93694) *
                C28721) *
               C2696 -
           ((C37472 + C37471 + C37476 + C37475) * C28721 +
            (C37466 + C37465 + C37464 + C37463) * C28720 +
            (C21833 * C93694 + C21832 * C4179 +
             (C20049 * C190 + C93585 * C363) * C93828 +
             (C20049 * C109 + C93585 * C115) * C4178) *
                C28719) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
            C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
            C20046 * C1080 + C20269 * C4897 + C20274 + C20274 +
            C20047 * C5325) *
               C93585 * C93706 * C2695 -
           (C20269 * C19095 + C21318 + C21318 + C20047 * C19563 +
            C20268 * C8520 + C21319 + C21319 + C20046 * C8984 + C20267 * C3409 +
            C21320 + C21320 + C20045 * C3709 + C20266 * C1388 + C21321 +
            C21321 + C20044 * C1660) *
               C93585 * C93706 * C2696) *
              C93625 * C1981 +
          ((C20266 * C1387 + C22521 + C22521 + C20044 * C1659 + C20267 * C3410 +
            C22522 + C22522 + C20045 * C3710 + C20268 * C8521 + C22523 +
            C22523 + C20046 * C8985 + C20269 * C19096 + C22524 + C22524 +
            C20047 * C19564) *
               C93585 * C93706 * C2696 -
           (C20269 * C4898 + C20275 + C20275 + C20047 * C5326 + C20268 * C809 +
            C20276 + C20276 + C20046 * C1081 + C20267 * C806 + C20277 + C20277 +
            C20045 * C1078 + C20266 * C109 + C20278 + C20278 + C20044 * C420) *
               C93585 * C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
             C4444 + C4444 + C93694 * C1079) *
                C4075 +
            (C4477 + C4478) * C4076 + C4483 * C4077) *
               C93706 * C2695 -
           ((C7987 + C7988) * C4077 + (C7989 + C7990) * C4076 +
            (C4441 * C3409 + C6115 + C6115 + C93694 * C3709 + C4440 * C1388 +
             C6116 + C6116 + C93828 * C1660) *
                C4075) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C7990 + C7989) * C4075 + (C7988 + C7987) * C4076 +
            (C4440 * C1385 + C7977 + C7977 + C93828 * C1657 + C4441 * C3412 +
             C7978 + C7978 + C93694 * C3712) *
                C4077) *
               C93706 * C2696 -
           ((C4481 + C4482) * C4077 + (C4480 + C4479) * C4076 +
            (C4478 + C4477) * C4075) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
             C4444 + C4444 + C93694 * C1079) *
                C93585 * C28719 +
            (C35809 + C35810) * C93585 * C28720 + C35816 * C28721) *
               C2695 -
           ((C35813 + C35814) * C93585 * C28721 +
            (C35812 + C35811) * C93585 * C28720 +
            (C35810 + C35809) * C93585 * C28719) *
               C2696) *
              C93625 * C1981 +
          (((C7990 + C7989) * C93585 * C28719 +
            (C37585 + C37586) * C93585 * C28720 +
            (C4440 * C10965 + C37579 + C37579 + C93828 * C11390 +
             C4441 * C33015 + C37580 + C37580 + C93694 * C33453) *
                C93585 * C28721) *
               C2696 -
           ((C37586 + C37585) * C93585 * C28721 +
            (C7989 + C7990) * C93585 * C28720 +
            (C4478 + C4477) * C93585 * C28719) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20112 +
            (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
            C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
            C16059 * C20047) *
               C93585 * C2695 -
           ((C275 * C19221 + C93706 * C19669) * C20047 +
            (C275 * C19095 + C93706 * C19323) * C20115 + C19674 * C20046 +
            C19339 * C20114 + C9097 * C20045 + C8765 * C20113 +
            (C275 * C1470 + C93706 * C1726) * C20044 +
            (C275 * C1388 + C93706 * C1536) * C20112) *
               C93585 * C2696) *
              C93625 * C1981 +
          ((C2876 * C20112 + C3105 * C20044 + C7772 * C20113 + C8100 * C20045 +
            C18365 * C20114 + C18685 * C20046 +
            (C275 * C19096 + C93706 * C19324) * C20115 +
            (C275 * C19222 + C93706 * C19670) * C20047) *
               C93585 * C2696 -
           (C16058 * C20047 + C15767 * C20115 + C5428 * C20046 +
            C5128 * C20114 + C2391 * C20045 + C2162 * C20113 + C520 * C20044 +
            C305 * C20112) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C4178 +
             (C275 * C189 + C93706 * C501) * C93828 + C5123 * C4179 +
             C5426 * C93694) *
                C4075 +
            (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
               C2695 -
           ((C8101 + C8091 + C8092 + C8093) * C4077 +
            (C8102 + C8096 + C8097 + C8098) * C4076 +
            ((C275 * C3491 + C93706 * C3783) * C93694 +
             (C275 * C3409 + C93706 * C3565) * C4179 +
             (C275 * C1470 + C93706 * C1726) * C93828 +
             (C275 * C1388 + C93706 * C1536) * C4178) *
                C4075) *
               C2696) *
              C93625 * C1981 +
          (((C8098 + C8097 + C8096 + C8102) * C4075 +
            (C8093 + C8092 + C8091 + C8101) * C4076 +
            (C2872 * C4178 + C3103 * C93828 +
             (C275 * C3412 + C93706 * C3568) * C4179 +
             (C275 * C3494 + C93706 * C3786) * C93694) *
                C4077) *
               C2696 -
           ((C4566 + C4567 + C4568 + C4569) * C4077 +
            (C4565 + C4564 + C4563 + C4562) * C4076 +
            (C4561 + C4560 + C4559 + C4558) * C4075) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C4178 +
            (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
             C28878 * C1471 + C28721 * C1727) *
                C93828 +
            (C34797 + C34798 + C34799) * C4179 +
            (C35049 + C35050 + C35051) * C93694) *
               C93585 * C2695 -
           ((C28878 * C25104 + C28721 * C25517 + C28877 * C5870 +
             C28720 * C6196 + C28876 * C3491 + C28719 * C3783) *
                C93694 +
            (C28878 * C25001 + C28721 * C25218 + C28877 * C5775 +
             C28720 * C5950 + C28876 * C3409 + C28719 * C3565) *
                C4179 +
            (C28878 * C11080 + C28721 * C11495 + C28877 * C1471 +
             C28720 * C1727 + C28876 * C1470 + C28719 * C1726) *
                C93828 +
            (C28878 * C10964 + C28721 * C11196 + C28877 * C1389 +
             C28720 * C1537 + C28876 * C1388 + C28719 * C1536) *
                C4178) *
               C93585 * C2696) *
              C93625 * C1981 +
          (((C32256 + C32255 + C32254) * C4178 +
            (C32587 + C32586 + C32585) * C93828 +
            (C28876 * C3410 + C28719 * C3566 + C28877 * C5776 + C28720 * C5951 +
             C28878 * C33015 + C28721 * C33242) *
                C4179 +
            (C28876 * C3492 + C28719 * C3784 + C28877 * C5871 + C28720 * C6197 +
             C28878 * C33128 + C28721 * C33563) *
                C93694) *
               C93585 * C2696 -
           ((C31591 + C31592 + C31593) * C93694 +
            (C31283 + C31284 + C31285) * C4179 +
            (C29152 + C29151 + C29150) * C93828 +
            (C28906 + C28905 + C28904) * C4178) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C275 +
             (C20049 * C276 + C93585 * C579) * C93706) *
                C20044 +
            (C20921 + C20937) * C20045 + C20941 * C20046 + C20942 * C20047) *
               C2695 -
           (((C20049 * C19323 + C93585 * C19772) * C93706 +
             (C20049 * C19095 + C93585 * C19097) * C275) *
                C20047 +
            ((C20049 * C8749 + C93585 * C9195) * C93706 +
             (C20049 * C8520 + C93585 * C8523) * C275) *
                C20046 +
            ((C20049 * C3565 + C93585 * C3853) * C93706 +
             (C20049 * C3409 + C93585 * C3413) * C275) *
                C20045 +
            ((C20049 * C1536 + C93585 * C1784) * C93706 +
             (C20049 * C1388 + C93585 * C1396) * C275) *
                C20044) *
               C2696) *
              C93625 * C1981 +
          ((((C20049 * C1387 + C93585 * C1395) * C275 +
             (C20049 * C1535 + C93585 * C1783) * C93706) *
                C20044 +
            ((C20049 * C3410 + C93585 * C3414) * C275 +
             (C20049 * C3566 + C93585 * C3854) * C93706) *
                C20045 +
            ((C20049 * C8521 + C93585 * C8524) * C275 +
             (C20049 * C8750 + C93585 * C9196) * C93706) *
                C20046 +
            ((C20049 * C19096 + C93585 * C19098) * C275 +
             (C20049 * C19324 + C93585 * C19773) * C93706) *
                C20047) *
               C2696 -
           ((C22054 + C22046) * C20047 + (C22053 + C22043) * C20046 +
            (C22052 + C22040) * C20045 +
            ((C20049 * C277 + C93585 * C580) * C93706 +
             (C20049 * C109 + C93585 * C115) * C275) *
                C20044) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
              C4085 * C110 + C4077 * C116) *
                 C275 +
             (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
              C4085 * C278 + C4077 * C581) *
                 C93706) *
                C93828 +
            ((C5240 + C5241 + C5242) * C275 +
             (C5519 + C5520 + C5521) * C93706) *
                C93694) *
               C2695 -
           (((C4085 * C3567 + C4077 * C3855 + C4083 * C3566 + C4076 * C3854 +
              C4081 * C3565 + C4075 * C3853) *
                 C93706 +
             (C4085 * C3411 + C4077 * C3415 + C4083 * C3410 + C4076 * C3414 +
              C4081 * C3409 + C4075 * C3413) *
                 C275) *
                C93694 +
            ((C4085 * C1534 + C4077 * C1782 + C4083 * C1535 + C4076 * C1783 +
              C4081 * C1536 + C4075 * C1784) *
                 C93706 +
             (C4085 * C1386 + C4077 * C1394 + C4083 * C1387 + C4076 * C1395 +
              C4081 * C1388 + C4075 * C1396) *
                 C275) *
                C93828) *
               C2696) *
              C93625 * C1981 +
          ((((C4081 * C1387 + C4075 * C1395 + C4083 * C1386 + C4076 * C1394 +
              C4085 * C1385 + C4077 * C1393) *
                 C275 +
             (C4081 * C1535 + C4075 * C1783 + C4083 * C1534 + C4076 * C1782 +
              C4085 * C1533 + C4077 * C1781) *
                 C93706) *
                C93828 +
            ((C4081 * C3410 + C4075 * C3414 + C4083 * C3411 + C4076 * C3415 +
              C4085 * C3412 + C4077 * C3416) *
                 C275 +
             (C4081 * C3566 + C4075 * C3854 + C4083 * C3567 + C4076 * C3855 +
              C4085 * C3568 + C4077 * C3856) *
                 C93706) *
                C93694) *
               C2696 -
           (((C7224 + C7223 + C7222) * C93706 +
             (C6888 + C6887 + C6886) * C275) *
                C93694 +
            ((C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
              C4081 * C277 + C4075 * C580) *
                 C93706 +
             (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
              C4081 * C109 + C4075 * C115) *
                 C275) *
                C93828) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C28876 +
             (C20049 * C276 + C93585 * C579) * C28719 + C25319 * C28877 +
             C25604 * C28720 + C25326 * C28878 + C25607 * C28721) *
                C93828 +
            (C35129 + C35130 + C35131 + C35132 + C35133 + C35134) * C93694) *
               C2695 -
           ((C35971 * C28721 + C35697 * C28878 + C25606 * C28720 +
             C25324 * C28877 + C23329 * C28719 + C23109 * C28876) *
                C93694 +
            (C35972 * C28721 + C35699 * C28878 + C25607 * C28720 +
             C25326 * C28877 + C25604 * C28719 + C25319 * C28876) *
                C93828) *
               C2696) *
              C93625 * C1981 +
          (((C27144 * C28876 + C27444 * C28719 + C37473 * C28877 +
             C37785 * C28720 + (C20049 * C10965 + C93585 * C10968) * C28878 +
             (C20049 * C11197 + C93585 * C11573) * C28721) *
                C93828 +
            (C26210 * C28876 + C26524 * C28719 + C36549 * C28877 +
             C36854 * C28720 + (C20049 * C33015 + C93585 * C33016) * C28878 +
             (C20049 * C33242 + C93585 * C33662) * C28721) *
                C93694) *
               C2696 -
           ((C36855 + C36851 + C36850 + C36849 + C36848 + C36847) * C93694 +
            (C37785 * C28721 + C37473 * C28878 + C27444 * C28720 +
             C27144 * C28877 + (C20049 * C277 + C93585 * C580) * C28719 +
             (C20049 * C109 + C93585 * C115) * C28876) *
                C93828) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
             C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
                C275 +
            (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
             C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
                C93706) *
               C93585 * C2695 -
           ((C20115 * C19323 + C20047 * C19884 + C20114 * C8749 +
             C20046 * C9305 + C20113 * C3565 + C20045 * C3923 + C20112 * C1536 +
             C20044 * C1842) *
                C93706 +
            (C20115 * C19095 + C20047 * C19221 + C20114 * C8520 +
             C20046 * C8645 + C20113 * C3409 + C20045 * C3491 + C20112 * C1388 +
             C20044 * C1470) *
                C275) *
               C93585 * C2696) *
              C93625 * C1981 +
          (((C20112 * C1387 + C20044 * C1469 + C20113 * C3410 + C20045 * C3492 +
             C20114 * C8521 + C20046 * C8646 + C20115 * C19096 +
             C20047 * C19222) *
                C275 +
            (C20112 * C1535 + C20044 * C1841 + C20113 * C3566 + C20045 * C3924 +
             C20114 * C8750 + C20046 * C9306 + C20115 * C19324 +
             C20047 * C19885) *
                C93706) *
               C93585 * C2696 -
           ((C20115 * C5097 + C20047 * C5599 + C20114 * C957 + C20046 * C1263 +
             C20113 * C954 + C20045 * C1260 + C20112 * C277 + C20044 * C636) *
                C93706 +
            (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
             C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
                C275) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C275 +
             (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                 C93706) *
                C4075 +
            ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
            C4742 * C4077) *
               C2695 -
           (((C8307 + C8308) * C93706 + (C7657 + C7658) * C275) * C4077 +
            ((C8309 + C8310) * C93706 + (C7661 + C7662) * C275) * C4076 +
            ((C4179 * C3565 + C93694 * C3923 + C4178 * C1536 + C93828 * C1842) *
                 C93706 +
             (C4179 * C3409 + C93694 * C3491 + C4178 * C1388 + C93828 * C1470) *
                 C275) *
                C4075) *
               C2696) *
              C93625 * C1981 +
          ((((C7662 + C7661) * C275 + (C8310 + C8309) * C93706) * C4075 +
            ((C7658 + C7657) * C275 + (C8308 + C8307) * C93706) * C4076 +
            ((C4178 * C1385 + C93828 * C1467 + C4179 * C3412 + C93694 * C3494) *
                 C275 +
             (C4178 * C1533 + C93828 * C1839 + C4179 * C3568 + C93694 * C3926) *
                 C93706) *
                C4077) *
               C2696 -
           (((C4738 + C4739) * C93706 + (C4215 + C4216) * C275) * C4077 +
            ((C4737 + C4736) * C93706 + (C4210 + C4209) * C275) * C4076 +
            ((C4735 + C4734) * C93706 + (C4206 + C4205) * C275) * C4075) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C28876 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C28719 +
            (C35511 + C35512) * C28877 + (C36060 + C36061) * C28720 +
            C35523 * C28878 + C36066 * C28721) *
               C93585 * C2695 -
           ((C36064 + C36065) * C28721 + (C35521 + C35522) * C28878 +
            (C36063 + C36062) * C28720 + (C35516 + C35515) * C28877 +
            (C36061 + C36060) * C28719 + (C35512 + C35511) * C28876) *
               C93585 * C2696) *
              C93625 * C1981 +
          (((C7662 + C7661) * C28876 + (C8310 + C8309) * C28719 +
            (C37263 + C37264) * C28877 + (C37888 + C37889) * C28720 +
            (C4178 * C10965 + C93828 * C11081 + C4179 * C33015 +
             C93694 * C33128) *
                C28878 +
            (C4178 * C11197 + C93828 * C11668 + C4179 * C33242 +
             C93694 * C33767) *
                C28721) *
               C93585 * C2696 -
           ((C37889 + C37888) * C28721 + (C37264 + C37263) * C28878 +
            (C8309 + C8310) * C28720 + (C7661 + C7662) * C28877 +
            (C4735 + C4734) * C28719 + (C4206 + C4205) * C28876) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
            C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
               C93585 * C2695 -
           ((C713 * C19095 + C19989 + C19989 + C93706 * C19984) * C20047 +
            C19993 * C20046 + C9417 * C20045 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C20044) *
               C93585 * C2696) *
              C93625 * C1981 +
          ((C3340 * C20044 + C8420 * C20045 + C18996 * C20046 +
            (C713 * C19096 + C19990 + C19990 + C93706 * C19985) * C20047) *
               C93585 * C2696 -
           (C16320 * C20047 + C5700 * C20046 + C2626 * C20045 + C743 * C20044) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
             C5698 * C93694) *
                C4075 +
            (C4817 + C4818) * C4076 + C4823 * C4077) *
               C2695 -
           ((C8421 + C8411) * C4077 + (C8422 + C8414) * C4076 +
            ((C713 * C3409 + C3998 + C3998 + C93706 * C3993) * C93694 +
             (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93828) *
                C4075) *
               C2696) *
              C93625 * C1981 +
          (((C8414 + C8422) * C4075 + (C8411 + C8421) * C4076 +
            (C3338 * C93828 +
             (C713 * C3412 + C4001 + C4001 + C93706 * C3996) * C93694) *
                C4077) *
               C2696 -
           ((C4821 + C4822) * C4077 + (C4820 + C4819) * C4076 +
            (C4818 + C4817) * C4075) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
             C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
             C29395 + C28721 * C1901) *
                C93828 +
            (C35316 + C35317 + C35318) * C93694) *
               C93585 * C2695 -
           ((C29391 * C25001 + C33873 + C33873 + C28721 * C25775 +
             C29390 * C5775 + C33872 + C33872 + C28720 * C6427 +
             C29389 * C3409 + C33871 + C33871 + C28719 * C3993) *
                C93694 +
            (C29391 * C10964 + C30957 + C30957 + C28721 * C11756 +
             C29390 * C1389 + C30958 + C30958 + C28720 * C1901 +
             C29389 * C1388 + C30959 + C30959 + C28719 * C1900) *
                C93828) *
               C93585 * C2696) *
              C93625 * C1981 +
          (((C32917 + C32916 + C32915) * C93828 +
            (C29389 * C3410 + C33874 + C33874 + C28719 * C3994 +
             C29390 * C5776 + C33875 + C33875 + C28720 * C6428 +
             C29391 * C33015 + C33876 + C33876 + C28721 * C33869) *
                C93694) *
               C93585 * C2696 -
           ((C31912 + C31913 + C31914) * C93694 +
            (C29431 + C29430 + C29429) * C93828) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93706 * C93828 +
           (C4937 + C4938 + C4939) * C93706 * C93694) *
              C93639 * C800 -
          ((C4940 + C4941 + C4942) * C93706 * C93694 +
           (C4939 + C4938 + C4937) * C93706 * C93828) *
              C93639 * C801 +
          ((C4942 + C4941 + C4940) * C93706 * C93828 +
           (C4080 * C4897 + C4922 + C4922 + C4075 * C4903 + C4082 * C4898 +
            C4923 + C4923 + C4076 * C4904 + C4084 * C4899 + C4924 + C4924 +
            C4077 * C4905) *
               C93706 * C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93706 * C93828 +
           (C4080 * C807 + C4090 + C4090 + C4075 * C823 + C4082 * C806 + C4091 +
            C4091 + C4076 * C822 + C4084 * C805 + C4092 + C4092 +
            C4077 * C821) *
               C93706 * C93694) *
              C93639 * C93625 * C97 -
          ((C4084 * C804 + C4093 + C4093 + C4077 * C820 + C4082 * C805 + C4094 +
            C4094 + C4076 * C821 + C4080 * C806 + C4095 + C4095 +
            C4075 * C822) *
               C93706 * C93694 +
           (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 + C4097 +
            C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
            C4075 * C121) *
               C93706 * C93828) *
              C93639 * C93625 * C98 +
          ((C4080 * C110 + C4099 + C4099 + C4075 * C122 + C4082 * C111 + C4100 +
            C4100 + C4076 * C123 + C4084 * C112 + C4101 + C4101 +
            C4077 * C124) *
               C93706 * C93828 +
           (C4080 * C805 + C4102 + C4102 + C4075 * C821 + C4082 * C804 + C4103 +
            C4103 + C4076 * C820 + C4084 * C1983 + C4104 + C4104 +
            C4077 * C1985) *
               C93706 * C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 * C20044 +
           (C20048 * C807 + C20052 + C20052 + C93585 * C823) * C93706 * C20045 +
           (C20048 * C808 + C20053 + C20053 + C93585 * C824) * C93706 * C20046 +
           (C20048 * C4897 + C20054 + C20054 + C93585 * C4903) * C93706 *
               C20047) *
              C93639 * C93625 * C97 -
          ((C20048 * C4898 + C20055 + C20055 + C93585 * C4904) * C93706 *
               C20047 +
           (C20048 * C809 + C20056 + C20056 + C93585 * C825) * C93706 * C20046 +
           (C20048 * C806 + C20057 + C20057 + C93585 * C822) * C93706 * C20045 +
           (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93706 *
               C20044) *
              C93639 * C93625 * C98 +
          ((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C93706 * C20044 +
           (C20048 * C805 + C20060 + C20060 + C93585 * C821) * C93706 * C20045 +
           (C20048 * C810 + C20061 + C20061 + C93585 * C826) * C93706 * C20046 +
           (C20048 * C4899 + C20062 + C20062 + C93585 * C4905) * C93706 *
               C20047) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 * C20044 +
           C20558 * C20045 + C20559 * C20046 + C20560 * C20047) *
              C93639 * C800 -
          (C20561 * C20047 + C20560 * C20046 + C20559 * C20045 +
           C20558 * C20044) *
              C93639 * C801 +
          (C20559 * C20044 + C20560 * C20045 + C20561 * C20046 +
           (C20048 * C20532 + C20545 + C20545 + C93585 * C20534) * C93706 *
               C20047) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C28719 +
            C25027 * C28720 + C25030 * C28721) *
               C93828 +
           (C20554 * C28719 + C22873 * C28720 + C25029 * C28721) * C93694) *
              C93639 * C93625 * C97 -
          (((C20048 * C5776 + C26837 + C26837 + C93585 * C5782) * C28721 +
            C25892 * C28720 + C21610 * C28719) *
               C93694 +
           ((C20048 * C1390 + C26836 + C26836 + C93585 * C1406) * C28721 +
            C26841 * C28720 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C28719) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C28719 +
            (C20048 * C1386 + C23547 + C23547 + C93585 * C1402) * C28720 +
            (C20048 * C1391 + C33951 + C33951 + C93585 * C1407) * C28721) *
               C93828 +
           ((C20048 * C805 + C20060 + C20060 + C93585 * C821) * C28719 +
            (C20048 * C3411 + C23548 + C23548 + C93585 * C3419) * C28720 +
            (C20048 * C5777 + C33952 + C33952 + C93585 * C5783) * C28721) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C28719 +
            C25027 * C28720 + C25030 * C28721) *
               C93828 +
           (C34619 + C34620 + C34621) * C93694) *
              C93639 * C800 -
          ((C34622 + C34623 + C34624) * C93694 +
           (C34621 + C34620 + C34619) * C93828) *
              C93639 * C801 +
          ((C34624 + C34623 + C34622) * C93828 +
           (C20556 * C28719 + C22871 * C28720 +
            (C20048 * C21100 + C21111 + C21111 + C93585 * C21102) * C28721) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C4081 +
           (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
               C4075 +
           (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
           C4218 * C4077) *
              C93706 * C93639 * C800 -
          ((C4179 * C818 + C93694 * C900 + C4178 * C813 + C93828 * C895) *
               C4077 +
           (C4179 * C810 + C93694 * C892 + C4178 * C805 + C93828 * C887) *
               C4085 +
           (C4179 * C817 + C93694 * C899 + C4178 * C814 + C93828 * C896) *
               C4076 +
           (C4179 * C809 + C93694 * C891 + C4178 * C806 + C93828 * C888) *
               C4083 +
           (C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
               C4075 +
           (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
               C4081) *
              C93706 * C93639 * C801 +
          ((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
               C4081 +
           (C4178 * C816 + C93828 * C898 + C4179 * C4900 + C93694 * C5019) *
               C4075 +
           (C4178 * C809 + C93828 * C891 + C4179 * C4898 + C93694 * C5017) *
               C4083 +
           (C4178 * C817 + C93828 * C899 + C4179 * C4901 + C93694 * C5020) *
               C4076 +
           (C4178 * C810 + C93828 * C892 + C4179 * C4899 + C93694 * C5018) *
               C4085 +
           (C4178 * C818 + C93828 * C900 + C4179 * C4902 + C93694 * C5021) *
               C4077) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C4081 +
           (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
               C4075 +
           (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
           C4218 * C4077) *
              C93706 * C93639 * C93625 * C97 -
          ((C4213 + C4214) * C4077 + (C4215 + C4216) * C4085 +
           (C4212 + C4211) * C4076 + (C4210 + C4209) * C4083 +
           (C4208 + C4207) * C4075 + (C4206 + C4205) * C4081) *
              C93706 * C93639 * C93625 * C98 +
          (C4217 * C4081 + C4218 * C4075 + (C4216 + C4215) * C4083 +
           (C4214 + C4213) * C4076 +
           (C4178 * C112 + C93828 * C193 + C4179 * C1983 + C93694 * C2056) *
               C4085 +
           (C4178 * C118 + C93828 * C199 + C4179 * C1984 + C93694 * C2057) *
               C4077) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C20049 +
           (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
            C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
               C93585) *
              C93706 * C93639 * C93625 * C97 -
          ((C20115 * C4901 + C20047 * C5020 + C20114 * C817 + C20046 * C899 +
            C20113 * C814 + C20045 * C896 + C20112 * C115 + C20044 * C196) *
               C93585 +
           (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
            C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
               C20049) *
              C93706 * C93639 * C93625 * C98 +
          ((C20112 * C110 + C20044 * C191 + C20113 * C805 + C20045 * C887 +
            C20114 * C810 + C20046 * C892 + C20115 * C4899 + C20047 * C5018) *
               C20049 +
           (C20112 * C116 + C20044 * C197 + C20113 * C813 + C20045 * C895 +
            C20114 * C818 + C20046 * C900 + C20115 * C4902 + C20047 * C5021) *
               C93585) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C20049 +
           (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
            C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
               C93585) *
              C93706 * C93639 * C800 -
          ((C20115 * C15552 + C20047 * C15668 + C20114 * C4900 +
            C20046 * C5019 + C20113 * C816 + C20045 * C898 + C20112 * C815 +
            C20044 * C897) *
               C93585 +
           (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
            C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
            C20044 * C889) *
               C20049) *
              C93706 * C93639 * C801 +
          ((C20112 * C808 + C20044 * C890 + C20113 * C4897 + C20045 * C5016 +
            C20114 * C15550 + C20046 * C15666 + C20115 * C20532 +
            C20047 * C20611) *
               C20049 +
           (C20112 * C816 + C20044 * C898 + C20113 * C4900 + C20045 * C5019 +
            C20114 * C15552 + C20046 * C15668 + C20115 * C20533 +
            C20047 * C20612) *
               C93585) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C20049 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C93585) *
               C28719 +
           ((C4178 * C1388 + C93828 * C1470 + C4179 * C3409 + C93694 * C3491) *
                C20049 +
            (C4178 * C1396 + C93828 * C1478 + C4179 * C3413 + C93694 * C3495) *
                C93585) *
               C28720 +
           ((C4178 * C1389 + C93828 * C1471 + C4179 * C5775 + C93694 * C5870) *
                C20049 +
            (C4178 * C1397 + C93828 * C1479 + C4179 * C5778 + C93694 * C5873) *
                C93585) *
               C28721) *
              C93639 * C93625 * C97 -
          (((C4179 * C5779 + C93694 * C5874 + C4178 * C1398 + C93828 * C1480) *
                C93585 +
            (C4179 * C5776 + C93694 * C5871 + C4178 * C1390 + C93828 * C1472) *
                C20049) *
               C28721 +
           ((C7659 + C7660) * C93585 + (C7661 + C7662) * C20049) * C28720 +
           ((C4208 + C4207) * C93585 + (C4206 + C4205) * C20049) * C28719) *
              C93639 * C93625 * C98 +
          ((C4217 * C20049 + C4218 * C93585) * C28719 +
           ((C7658 + C7657) * C20049 + (C7656 + C7655) * C93585) * C28720 +
           ((C4178 * C1391 + C93828 * C1473 + C4179 * C5777 + C93694 * C5872) *
                C20049 +
            (C4178 * C1399 + C93828 * C1481 + C4179 * C5780 + C93694 * C5875) *
                C93585) *
               C28721) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C20049 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C93585) *
               C28719 +
           ((C4178 * C1388 + C93828 * C1470 + C4179 * C3409 + C93694 * C3491) *
                C20049 +
            (C4178 * C1396 + C93828 * C1478 + C4179 * C3413 + C93694 * C3495) *
                C93585) *
               C28720 +
           ((C4178 * C1389 + C93828 * C1471 + C4179 * C5775 + C93694 * C5870) *
                C20049 +
            (C4178 * C1397 + C93828 * C1479 + C4179 * C5778 + C93694 * C5873) *
                C93585) *
               C28721) *
              C93639 * C800 -
          (((C4179 * C16397 + C93694 * C16489 + C4178 * C5778 +
             C93828 * C5873) *
                C93585 +
            (C4179 * C16395 + C93694 * C16487 + C4178 * C5775 +
             C93828 * C5870) *
                C20049) *
               C28721 +
           ((C4179 * C8523 + C93694 * C8648 + C4178 * C3413 + C93828 * C3495) *
                C93585 +
            (C4179 * C8520 + C93694 * C8645 + C4178 * C3409 + C93828 * C3491) *
                C20049) *
               C28720 +
           ((C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                C93585 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C20049) *
               C28719) *
              C93639 * C801 +
          (((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
                C20049 +
            (C4178 * C816 + C93828 * C898 + C4179 * C4900 + C93694 * C5019) *
                C93585) *
               C28719 +
           ((C4178 * C8520 + C93828 * C8645 + C4179 * C19095 +
             C93694 * C19221) *
                C20049 +
            (C4178 * C8523 + C93828 * C8648 + C4179 * C19097 +
             C93694 * C19223) *
                C93585) *
               C28720 +
           ((C4178 * C16395 + C93828 * C16487 + C4179 * C21100 +
             C93694 * C21161) *
                C20049 +
            (C4178 * C16397 + C93828 * C16489 + C4179 * C21101 +
             C93694 * C21162) *
                C93585) *
               C28721) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4081 +
            (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
            C306 * C4076 + C307 * C4085 + C308 * C4077) *
               C93828 +
           (C5131 + C5132 + C5107 + C5108 + C5109 + C5110) * C93694) *
              C93639 * C800 -
          ((C5133 + C5134 + C5135 + C5136 + C5137 + C5138) * C93694 +
           (C5110 + C5109 + C5108 + C5107 + C5132 + C5131) * C93828) *
              C93639 * C801 +
          ((C5138 + C5137 + C5136 + C5135 + C5134 + C5133) * C93828 +
           ((C275 * C4897 + C93706 * C5096) * C4081 +
            (C275 * C4900 + C93706 * C5099) * C4075 +
            (C275 * C4898 + C93706 * C5097) * C4083 +
            (C275 * C4901 + C93706 * C5100) * C4076 +
            (C275 * C4899 + C93706 * C5098) * C4085 +
            (C275 * C4902 + C93706 * C5101) * C4077) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4081 +
            (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
            C306 * C4076 + C307 * C4085 + C308 * C4077) *
               C93828 +
           ((C275 * C807 + C93706 * C955) * C4081 +
            (C275 * C815 + C93706 * C963) * C4075 + C2162 * C4083 +
            C2161 * C4076 + C2160 * C4085 + C2159 * C4077) *
               C93694) *
              C93639 * C93625 * C97 -
          ((C2157 * C4077 + C2158 * C4085 + C2159 * C4076 + C2160 * C4083 +
            C2161 * C4075 + C2162 * C4081) *
               C93694 +
           (C310 * C4077 + C309 * C4085 + C308 * C4076 + C307 * C4083 +
            C306 * C4075 + C305 * C4081) *
               C93828) *
              C93639 * C93625 * C98 +
          ((C307 * C4081 + C308 * C4075 + C309 * C4083 + C310 * C4076 +
            C312 * C4085 + C311 * C4077) *
               C93828 +
           (C2160 * C4081 + C2159 * C4075 + C2158 * C4083 + C2157 * C4076 +
            (C275 * C1983 + C93706 * C2142) * C4085 +
            (C275 * C1984 + C93706 * C2143) * C4077) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20049 +
            (C275 * C114 + C93706 * C282) * C93585) *
               C20044 +
           (C5123 * C20049 + C5124 * C93585) * C20045 +
           (C5130 * C20049 + C5129 * C93585) * C20046 +
           (C15769 * C20049 + C15768 * C93585) * C20047) *
              C93639 * C93625 * C97 -
          ((C15766 * C93585 + C15767 * C20049) * C20047 +
           (C5127 * C93585 + C5128 * C20049) * C20046 +
           (C2161 * C93585 + C2162 * C20049) * C20045 +
           (C306 * C93585 + C305 * C20049) * C20044) *
              C93639 * C93625 * C98 +
          ((C307 * C20049 + C308 * C93585) * C20044 +
           (C2160 * C20049 + C2159 * C93585) * C20045 +
           (C5126 * C20049 + C5125 * C93585) * C20046 +
           ((C275 * C4899 + C93706 * C5098) * C20049 +
            (C275 * C4902 + C93706 * C5101) * C93585) *
               C20047) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20049 +
            (C275 * C114 + C93706 * C282) * C93585) *
               C20044 +
           (C20666 + C20667) * C20045 + C20676 * C20046 + C20677 * C20047) *
              C93639 * C800 -
          ((C20680 + C20681) * C20047 + (C20671 + C20670) * C20046 +
           (C20669 + C20668) * C20045 + (C20667 + C20666) * C20044) *
              C93639 * C801 +
          (C20676 * C20044 + C20677 * C20045 + (C20681 + C20680) * C20046 +
           ((C275 * C20532 + C93706 * C20663) * C20049 +
            (C275 * C20533 + C93706 * C20664) * C93585) *
               C20047) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C20049 +
            (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
             C28878 * C1397 + C28721 * C1545) *
                C93585) *
               C93828 +
           ((C28876 * C807 + C28719 * C955 + C28877 * C3409 + C28720 * C3565 +
             C28878 * C5775 + C28721 * C5950) *
                C20049 +
            (C28876 * C815 + C28719 * C963 + C28877 * C3413 + C28720 * C3569 +
             C28878 * C5778 + C28721 * C5953) *
                C93585) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C31280 + C31281 + C31282) * C93585 +
            (C31283 + C31284 + C31285) * C20049) *
               C93694 +
           ((C28909 + C28908 + C28907) * C93585 +
            (C28906 + C28905 + C28904) * C20049) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C28915 + C28914 + C28913) * C20049 +
            (C28912 + C28911 + C28910) * C93585) *
               C93828 +
           ((C28876 * C805 + C28719 * C953 + C28877 * C3411 + C28720 * C3567 +
             C28878 * C5777 + C28721 * C5952) *
                C20049 +
            (C28876 * C813 + C28719 * C961 + C28877 * C3415 + C28720 * C3571 +
             C28878 * C5780 + C28721 * C5955) *
                C93585) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
             C28878 * C1389 + C28721 * C1537) *
                C20049 +
            (C28876 * C114 + C28719 * C282 + C28877 * C1396 + C28720 * C1544 +
             C28878 * C1397 + C28721 * C1545) *
                C93585) *
               C93828 +
           ((C34797 + C34798 + C34799) * C20049 +
            (C34800 + C34801 + C34802) * C93585) *
               C93694) *
              C93639 * C800 -
          (((C34803 + C34804 + C34805) * C93585 +
            (C34806 + C34807 + C34808) * C20049) *
               C93694 +
           ((C34802 + C34801 + C34800) * C93585 +
            (C34799 + C34798 + C34797) * C20049) *
               C93828) *
              C93639 * C801 +
          (((C34808 + C34807 + C34806) * C20049 +
            (C34805 + C34804 + C34803) * C93585) *
               C93828 +
           ((C28876 * C4897 + C28719 * C5096 + C28877 * C19095 +
             C28720 * C19323 + C28878 * C21100 + C28721 * C21213) *
                C20049 +
            (C28876 * C4900 + C28719 * C5099 + C28877 * C19097 +
             C28720 * C19325 + C28878 * C21101 + C28721 * C21214) *
                C93585) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C4178 +
           (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
            C4085 * C191 + C4077 * C364) *
               C93828 +
           (C5240 + C5241 + C5242) * C4179 + (C5243 + C5244 + C5245) * C93694) *
              C93706 * C93639 * C800 -
          ((C5246 + C5247 + C5248) * C93694 + (C5249 + C5250 + C5251) * C4179 +
           (C5245 + C5244 + C5243) * C93828 + (C5242 + C5241 + C5240) * C4178) *
              C93706 * C93639 * C801 +
          ((C5251 + C5250 + C5249) * C4178 + (C5248 + C5247 + C5246) * C93828 +
           (C4081 * C4897 + C4075 * C4900 + C4083 * C4898 + C4076 * C4901 +
            C4085 * C4899 + C4077 * C4902) *
               C4179 +
           (C4081 * C5016 + C4075 * C5212 + C4083 * C5017 + C4076 * C5213 +
            C4085 * C5018 + C4077 * C5214) *
               C93694) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C4178 +
           (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
            C4085 * C191 + C4077 * C364) *
               C93828 +
           (C4081 * C807 + C4075 * C815 + C4083 * C806 + C4076 * C814 +
            C4085 * C805 + C4077 * C813) *
               C4179 +
           (C4081 * C889 + C4075 * C1021 + C4083 * C888 + C4076 * C1020 +
            C4085 * C887 + C4077 * C1019) *
               C93694) *
              C93706 * C93639 * C93625 * C97 -
          ((C4085 * C886 + C4077 * C1018 + C4083 * C887 + C4076 * C1019 +
            C4081 * C888 + C4075 * C1020) *
               C93694 +
           (C4085 * C804 + C4077 * C812 + C4083 * C805 + C4076 * C813 +
            C4081 * C806 + C4075 * C814) *
               C4179 +
           (C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
            C4081 * C190 + C4075 * C363) *
               C93828 +
           (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
            C4081 * C109 + C4075 * C115) *
               C4178) *
              C93706 * C93639 * C93625 * C98 +
          ((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
            C4085 * C112 + C4077 * C118) *
               C4178 +
           (C4081 * C191 + C4075 * C364 + C4083 * C192 + C4076 * C365 +
            C4085 * C193 + C4077 * C366) *
               C93828 +
           (C4081 * C805 + C4075 * C813 + C4083 * C804 + C4076 * C812 +
            C4085 * C1983 + C4077 * C1984) *
               C4179 +
           (C4081 * C887 + C4075 * C1019 + C4083 * C886 + C4076 * C1018 +
            C4085 * C2056 + C4077 * C2228) *
               C93694) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C20112 +
           (C20049 * C189 + C93585 * C362) * C20044 +
           (C20049 * C807 + C93585 * C815) * C20113 +
           (C20049 * C889 + C93585 * C1021) * C20045 +
           (C20049 * C808 + C93585 * C816) * C20114 +
           (C20049 * C890 + C93585 * C1022) * C20046 +
           (C20049 * C4897 + C93585 * C4900) * C20115 +
           (C20049 * C5016 + C93585 * C5212) * C20047) *
              C93706 * C93639 * C93625 * C97 -
          ((C20049 * C5017 + C93585 * C5213) * C20047 +
           (C20049 * C4898 + C93585 * C4901) * C20115 +
           (C20049 * C891 + C93585 * C1023) * C20046 +
           (C20049 * C809 + C93585 * C817) * C20114 +
           (C20049 * C888 + C93585 * C1020) * C20045 +
           (C20049 * C806 + C93585 * C814) * C20113 +
           (C20049 * C190 + C93585 * C363) * C20044 +
           (C20049 * C109 + C93585 * C115) * C20112) *
              C93706 * C93639 * C93625 * C98 +
          ((C20049 * C110 + C93585 * C116) * C20112 +
           (C20049 * C191 + C93585 * C364) * C20044 +
           (C20049 * C805 + C93585 * C813) * C20113 +
           (C20049 * C887 + C93585 * C1019) * C20045 +
           (C20049 * C810 + C93585 * C818) * C20114 +
           (C20049 * C892 + C93585 * C1024) * C20046 +
           (C20049 * C4899 + C93585 * C4902) * C20115 +
           (C20049 * C5018 + C93585 * C5214) * C20047) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C20112 +
           (C20049 * C189 + C93585 * C362) * C20044 + C20749 * C20113 +
           C20750 * C20045 + C20751 * C20114 + C20752 * C20046 +
           C20753 * C20115 + C20754 * C20047) *
              C93706 * C93639 * C800 -
          (C20755 * C20047 + C20756 * C20115 + C20754 * C20046 +
           C20753 * C20114 + C20752 * C20045 + C20751 * C20113 +
           C20750 * C20044 + C20749 * C20112) *
              C93706 * C93639 * C801 +
          (C20751 * C20112 + C20752 * C20044 + C20753 * C20113 +
           C20754 * C20045 + C20756 * C20114 + C20755 * C20046 +
           (C20049 * C20532 + C93585 * C20533) * C20115 +
           (C20049 * C20611 + C93585 * C20731) * C20047) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C4178 +
            (C20049 * C189 + C93585 * C362) * C93828 + C20749 * C4179 +
            C20750 * C93694) *
               C28719 +
           (C25319 * C4178 + C25320 * C93828 + C23109 * C4179 +
            C23108 * C93694) *
               C28720 +
           (C25326 * C4178 + C25325 * C93828 + C25324 * C4179 +
            C25323 * C93694) *
               C28721) *
              C93639 * C93625 * C97 -
          (((C20049 * C5871 + C93585 * C6031) * C93694 +
            (C20049 * C5776 + C93585 * C5779) * C4179 +
            (C20049 * C1472 + C93585 * C1604) * C93828 +
            (C20049 * C1390 + C93585 * C1398) * C4178) *
               C28721 +
           (C26211 * C93694 + C26210 * C4179 + C27145 * C93828 +
            C27144 * C4178) *
               C28720 +
           (C21833 * C93694 + C21832 * C4179 +
            (C20049 * C190 + C93585 * C363) * C93828 +
            (C20049 * C109 + C93585 * C115) * C4178) *
               C28719) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C4178 +
            (C20049 * C191 + C93585 * C364) * C93828 +
            (C20049 * C805 + C93585 * C813) * C4179 +
            (C20049 * C887 + C93585 * C1019) * C93694) *
               C28719 +
           ((C20049 * C1386 + C93585 * C1394) * C4178 +
            (C20049 * C1468 + C93585 * C1600) * C93828 +
            (C20049 * C3411 + C93585 * C3415) * C4179 +
            (C20049 * C3493 + C93585 * C3641) * C93694) *
               C28720 +
           ((C20049 * C1391 + C93585 * C1399) * C4178 +
            (C20049 * C1473 + C93585 * C1605) * C93828 +
            (C20049 * C5777 + C93585 * C5780) * C4179 +
            (C20049 * C5872 + C93585 * C6032) * C93694) *
               C28721) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C4178 +
            (C20049 * C189 + C93585 * C362) * C93828 + C20749 * C4179 +
            C20750 * C93694) *
               C28719 +
           (C25319 * C4178 + C25320 * C93828 + C23109 * C4179 +
            C23108 * C93694) *
               C28720 +
           (C25326 * C4178 + C25325 * C93828 + C25324 * C4179 +
            C25323 * C93694) *
               C28721) *
              C93639 * C800 -
          ((C25321 * C93694 + C25322 * C4179 + C25323 * C93828 +
            C25324 * C4178) *
               C28721 +
           (C23106 * C93694 + C23107 * C4179 + C23108 * C93828 +
            C23109 * C4178) *
               C28720 +
           (C20752 * C93694 + C20751 * C4179 + C20750 * C93828 +
            C20749 * C4178) *
               C28719) *
              C93639 * C801 +
          ((C20751 * C4178 + C20752 * C93828 + C20753 * C4179 +
            C20754 * C93694) *
               C28719 +
           (C23107 * C4178 + C23106 * C93828 + C23105 * C4179 +
            C23104 * C93694) *
               C28720 +
           (C25322 * C4178 + C25321 * C93828 +
            (C20049 * C21100 + C93585 * C21101) * C4179 +
            (C20049 * C21161 + C93585 * C21265) * C93694) *
               C28721) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C4075 +
           (C4477 + C4478) * C4076 + C4483 * C4077) *
              C93706 * C93639 * C800 -
          ((C4441 * C810 + C5329 + C5329 + C93694 * C1082 + C4440 * C805 +
            C5330 + C5330 + C93828 * C1077) *
               C4077 +
           (C4441 * C809 + C5331 + C5331 + C93694 * C1081 + C4440 * C806 +
            C5332 + C5332 + C93828 * C1078) *
               C4076 +
           (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
            C5334 + C5334 + C93828 * C1079) *
               C4075) *
              C93706 * C93639 * C801 +
          ((C4440 * C808 + C5335 + C5335 + C93828 * C1080 + C4441 * C4897 +
            C5336 + C5336 + C93694 * C5325) *
               C4075 +
           (C4440 * C809 + C5337 + C5337 + C93828 * C1081 + C4441 * C4898 +
            C5338 + C5338 + C93694 * C5326) *
               C4076 +
           (C4440 * C810 + C5339 + C5339 + C93828 * C1082 + C4441 * C4899 +
            C5340 + C5340 + C93694 * C5327) *
               C4077) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C4075 +
           (C4477 + C4478) * C4076 + C4483 * C4077) *
              C93706 * C93639 * C93625 * C97 -
          ((C4481 + C4482) * C4077 + (C4480 + C4479) * C4076 +
           (C4478 + C4477) * C4075) *
              C93706 * C93639 * C93625 * C98 +
          (C4483 * C4075 + (C4482 + C4481) * C4076 +
           (C4440 * C112 + C4463 + C4463 + C93828 * C423 + C4441 * C1983 +
            C4464 + C4464 + C93694 * C2295) *
               C4077) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
           C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
           C20046 * C1080 + C20269 * C4897 + C20274 + C20274 + C20047 * C5325) *
              C93585 * C93706 * C93639 * C93625 * C97 -
          (C20269 * C4898 + C20275 + C20275 + C20047 * C5326 + C20268 * C809 +
           C20276 + C20276 + C20046 * C1081 + C20267 * C806 + C20277 + C20277 +
           C20045 * C1078 + C20266 * C109 + C20278 + C20278 + C20044 * C420) *
              C93585 * C93706 * C93639 * C93625 * C98 +
          (C20266 * C110 + C20279 + C20279 + C20044 * C421 + C20267 * C805 +
           C20280 + C20280 + C20045 * C1077 + C20268 * C810 + C20281 + C20281 +
           C20046 * C1082 + C20269 * C4899 + C20282 + C20282 + C20047 * C5327) *
              C93585 * C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
           C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
           C20046 * C1080 + C20269 * C4897 + C20274 + C20274 + C20047 * C5325) *
              C93585 * C93706 * C93639 * C800 -
          (C20269 * C15550 + C20808 + C20808 + C20047 * C15963 +
           C20268 * C4897 + C20809 + C20809 + C20046 * C5325 + C20267 * C808 +
           C20810 + C20810 + C20045 * C1080 + C20266 * C807 + C20811 + C20811 +
           C20044 * C1079) *
              C93585 * C93706 * C93639 * C801 +
          (C20266 * C808 + C20812 + C20812 + C20044 * C1080 + C20267 * C4897 +
           C20813 + C20813 + C20045 * C5325 + C20268 * C15550 + C20814 +
           C20814 + C20046 * C15963 + C20269 * C20532 + C20815 + C20815 +
           C20047 * C20806) *
              C93585 * C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C93585 * C28719 +
           (C4440 * C1388 + C6116 + C6116 + C93828 * C1660 + C4441 * C3409 +
            C6115 + C6115 + C93694 * C3709) *
               C93585 * C28720 +
           (C4440 * C1389 + C6117 + C6117 + C93828 * C1661 + C4441 * C5775 +
            C6118 + C6118 + C93694 * C6107) *
               C93585 * C28721) *
              C93639 * C93625 * C97 -
          ((C4441 * C5776 + C6120 + C6120 + C93694 * C6108 + C4440 * C1390 +
            C6119 + C6119 + C93828 * C1662) *
               C93585 * C28721 +
           (C7989 + C7990) * C93585 * C28720 +
           (C4478 + C4477) * C93585 * C28719) *
              C93639 * C93625 * C98 +
          (C4483 * C93585 * C28719 + (C7988 + C7987) * C93585 * C28720 +
           (C4440 * C1391 + C6121 + C6121 + C93828 * C1663 + C4441 * C5777 +
            C6122 + C6122 + C93694 * C6109) *
               C93585 * C28721) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C93585 * C28719 +
           (C4440 * C1388 + C6116 + C6116 + C93828 * C1660 + C4441 * C3409 +
            C6115 + C6115 + C93694 * C3709) *
               C93585 * C28720 +
           (C4440 * C1389 + C6117 + C6117 + C93828 * C1661 + C4441 * C5775 +
            C6118 + C6118 + C93694 * C6107) *
               C93585 * C28721) *
              C93639 * C800 -
          ((C4441 * C16395 + C34957 + C34957 + C93694 * C16719 + C4440 * C5775 +
            C34958 + C34958 + C93828 * C6107) *
               C93585 * C28721 +
           (C4441 * C8520 + C8989 + C8989 + C93694 * C8984 + C4440 * C3409 +
            C8988 + C8988 + C93828 * C3709) *
               C93585 * C28720 +
           (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
            C5334 + C5334 + C93828 * C1079) *
               C93585 * C28719) *
              C93639 * C801 +
          ((C4440 * C808 + C5335 + C5335 + C93828 * C1080 + C4441 * C4897 +
            C5336 + C5336 + C93694 * C5325) *
               C93585 * C28719 +
           (C4440 * C8520 + C34959 + C34959 + C93828 * C8984 + C4441 * C19095 +
            C34960 + C34960 + C93694 * C19563) *
               C93585 * C28720 +
           (C4440 * C16395 + C34961 + C34961 + C93828 * C16719 +
            C4441 * C21100 + C34962 + C34962 + C93694 * C21316) *
               C93585 * C28721) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4178 +
            (C275 * C189 + C93706 * C501) * C93828 + C5123 * C4179 +
            C5426 * C93694) *
               C4075 +
           (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
              C93639 * C800 -
          ((C5427 * C93694 + C5126 * C4179 + C2390 * C93828 + C2160 * C4178) *
               C4077 +
           (C5428 * C93694 + C5128 * C4179 + C2391 * C93828 + C2162 * C4178) *
               C4076 +
           (C5429 * C93694 + C5130 * C4179 + C5426 * C93828 + C5123 * C4178) *
               C4075) *
              C93639 * C801 +
          ((C5130 * C4178 + C5429 * C93828 +
            (C275 * C4897 + C93706 * C5096) * C4179 +
            (C275 * C5016 + C93706 * C5414) * C93694) *
               C4075 +
           (C5128 * C4178 + C5428 * C93828 +
            (C275 * C4898 + C93706 * C5097) * C4179 +
            (C275 * C5017 + C93706 * C5415) * C93694) *
               C4076 +
           (C5126 * C4178 + C5427 * C93828 +
            (C275 * C4899 + C93706 * C5098) * C4179 +
            (C275 * C5018 + C93706 * C5416) * C93694) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4178 +
            (C275 * C189 + C93706 * C501) * C93828 +
            (C275 * C807 + C93706 * C955) * C4179 +
            (C275 * C889 + C93706 * C1145) * C93694) *
               C4075 +
           (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
              C93639 * C93625 * C97 -
          ((C4566 + C4567 + C4568 + C4569) * C4077 +
           (C4565 + C4564 + C4563 + C4562) * C4076 +
           (C4561 + C4560 + C4559 + C4558) * C4075) *
              C93639 * C93625 * C98 +
          (C4572 * C4075 + (C4569 + C4568 + C4567 + C4566) * C4076 +
           (C312 * C4178 + C523 * C93828 +
            (C275 * C1983 + C93706 * C2142) * C4179 +
            (C275 * C2056 + C93706 * C2378) * C93694) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C20112 +
           (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
           C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
           C16059 * C20047) *
              C93585 * C93639 * C93625 * C97 -
          (C16058 * C20047 + C15767 * C20115 + C5428 * C20046 + C5128 * C20114 +
           C2391 * C20045 + C2162 * C20113 + C520 * C20044 + C305 * C20112) *
              C93585 * C93639 * C93625 * C98 +
          (C307 * C20112 + C521 * C20044 + C2160 * C20113 + C2390 * C20045 +
           C5126 * C20114 + C5427 * C20046 +
           (C275 * C4899 + C93706 * C5098) * C20115 +
           (C275 * C5018 + C93706 * C5416) * C20047) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C20112 +
           (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
           C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
           C16059 * C20047) *
              C93585 * C93639 * C800 -
          (C20869 * C20047 + C20679 * C20115 + C16059 * C20046 +
           C15769 * C20114 + C5429 * C20045 + C5130 * C20113 + C5426 * C20044 +
           C5123 * C20112) *
              C93585 * C93639 * C801 +
          (C5130 * C20112 + C5429 * C20044 + C15769 * C20113 + C16059 * C20045 +
           C20679 * C20114 + C20869 * C20046 +
           (C275 * C20532 + C93706 * C20663) * C20115 +
           (C275 * C20611 + C93706 * C20865) * C20047) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
            C28878 * C1389 + C28721 * C1537) *
               C4178 +
           (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
            C28878 * C1471 + C28721 * C1727) *
               C93828 +
           (C28876 * C807 + C28719 * C955 + C28877 * C3409 + C28720 * C3565 +
            C28878 * C5775 + C28721 * C5950) *
               C4179 +
           (C28876 * C889 + C28719 * C1145 + C28877 * C3491 + C28720 * C3783 +
            C28878 * C5870 + C28721 * C6196) *
               C93694) *
              C93585 * C93639 * C93625 * C97 -
          ((C31591 + C31592 + C31593) * C93694 +
           (C31283 + C31284 + C31285) * C4179 +
           (C29152 + C29151 + C29150) * C93828 +
           (C28906 + C28905 + C28904) * C4178) *
              C93585 * C93639 * C93625 * C98 +
          ((C28915 + C28914 + C28913) * C4178 +
           (C29155 + C29154 + C29153) * C93828 +
           (C28876 * C805 + C28719 * C953 + C28877 * C3411 + C28720 * C3567 +
            C28878 * C5777 + C28721 * C5952) *
               C4179 +
           (C28876 * C887 + C28719 * C1143 + C28877 * C3493 + C28720 * C3785 +
            C28878 * C5872 + C28721 * C6198) *
               C93694) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C28876 * C108 + C28719 * C276 + C28877 * C1388 + C28720 * C1536 +
            C28878 * C1389 + C28721 * C1537) *
               C4178 +
           (C28876 * C189 + C28719 * C501 + C28877 * C1470 + C28720 * C1726 +
            C28878 * C1471 + C28721 * C1727) *
               C93828 +
           (C34797 + C34798 + C34799) * C4179 +
           (C35049 + C35050 + C35051) * C93694) *
              C93585 * C93639 * C800 -
          ((C35052 + C35053 + C35054) * C93694 +
           (C34806 + C34807 + C34808) * C4179 +
           (C35051 + C35050 + C35049) * C93828 +
           (C34799 + C34798 + C34797) * C4178) *
              C93585 * C93639 * C801 +
          ((C34808 + C34807 + C34806) * C4178 +
           (C35054 + C35053 + C35052) * C93828 +
           (C28876 * C4897 + C28719 * C5096 + C28877 * C19095 +
            C28720 * C19323 + C28878 * C21100 + C28721 * C21213) *
               C4179 +
           (C28876 * C5016 + C28719 * C5414 + C28877 * C19221 +
            C28720 * C19669 + C28878 * C21161 + C28721 * C21375) *
               C93694) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C275 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93706) *
               C93828 +
           ((C5240 + C5241 + C5242) * C275 + (C5519 + C5520 + C5521) * C93706) *
               C93694) *
              C93639 * C800 -
          (((C5522 + C5523 + C5524) * C93706 + (C5249 + C5250 + C5251) * C275) *
               C93694 +
           ((C5521 + C5520 + C5519) * C93706 + (C5242 + C5241 + C5240) * C275) *
               C93828) *
              C93639 * C801 +
          (((C5251 + C5250 + C5249) * C275 + (C5524 + C5523 + C5522) * C93706) *
               C93828 +
           ((C4081 * C4897 + C4075 * C4900 + C4083 * C4898 + C4076 * C4901 +
             C4085 * C4899 + C4077 * C4902) *
                C275 +
            (C4081 * C5096 + C4075 * C5503 + C4083 * C5097 + C4076 * C5504 +
             C4085 * C5098 + C4077 * C5505) *
                C93706) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C275 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93706) *
               C93828 +
           ((C4081 * C807 + C4075 * C815 + C4083 * C806 + C4076 * C814 +
             C4085 * C805 + C4077 * C813) *
                C275 +
            (C4081 * C955 + C4075 * C1203 + C4083 * C954 + C4076 * C1202 +
             C4085 * C953 + C4077 * C1201) *
                C93706) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C4085 * C952 + C4077 * C1200 + C4083 * C953 + C4076 * C1201 +
             C4081 * C954 + C4075 * C1202) *
                C93706 +
            (C4085 * C804 + C4077 * C812 + C4083 * C805 + C4076 * C813 +
             C4081 * C806 + C4075 * C814) *
                C275) *
               C93694 +
           ((C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
             C4081 * C277 + C4075 * C580) *
                C93706 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C275) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
             C4085 * C112 + C4077 * C118) *
                C275 +
            (C4081 * C278 + C4075 * C581 + C4083 * C279 + C4076 * C582 +
             C4085 * C280 + C4077 * C583) *
                C93706) *
               C93828 +
           ((C4081 * C805 + C4075 * C813 + C4083 * C804 + C4076 * C812 +
             C4085 * C1983 + C4077 * C1984) *
                C275 +
            (C4081 * C953 + C4075 * C1201 + C4083 * C952 + C4076 * C1200 +
             C4085 * C2142 + C4077 * C2460) *
                C93706) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C275 +
            (C20049 * C276 + C93585 * C579) * C93706) *
               C20044 +
           ((C20049 * C807 + C93585 * C815) * C275 +
            (C20049 * C955 + C93585 * C1203) * C93706) *
               C20045 +
           ((C20049 * C808 + C93585 * C816) * C275 +
            (C20049 * C956 + C93585 * C1204) * C93706) *
               C20046 +
           ((C20049 * C4897 + C93585 * C4900) * C275 +
            (C20049 * C5096 + C93585 * C5503) * C93706) *
               C20047) *
              C93639 * C93625 * C97 -
          (((C20049 * C5097 + C93585 * C5504) * C93706 +
            (C20049 * C4898 + C93585 * C4901) * C275) *
               C20047 +
           ((C20049 * C957 + C93585 * C1205) * C93706 +
            (C20049 * C809 + C93585 * C817) * C275) *
               C20046 +
           ((C20049 * C954 + C93585 * C1202) * C93706 +
            (C20049 * C806 + C93585 * C814) * C275) *
               C20045 +
           ((C20049 * C277 + C93585 * C580) * C93706 +
            (C20049 * C109 + C93585 * C115) * C275) *
               C20044) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C275 +
            (C20049 * C278 + C93585 * C581) * C93706) *
               C20044 +
           ((C20049 * C805 + C93585 * C813) * C275 +
            (C20049 * C953 + C93585 * C1201) * C93706) *
               C20045 +
           ((C20049 * C810 + C93585 * C818) * C275 +
            (C20049 * C958 + C93585 * C1206) * C93706) *
               C20046 +
           ((C20049 * C4899 + C93585 * C4902) * C275 +
            (C20049 * C5098 + C93585 * C5505) * C93706) *
               C20047) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C275 +
            (C20049 * C276 + C93585 * C579) * C93706) *
               C20044 +
           (C20921 + C20937) * C20045 + C20941 * C20046 + C20942 * C20047) *
              C93639 * C800 -
          ((C20940 + C20932) * C20047 + (C20939 + C20927) * C20046 +
           (C20938 + C20924) * C20045 + (C20937 + C20921) * C20044) *
              C93639 * C801 +
          (C20941 * C20044 + C20942 * C20045 + (C20932 + C20940) * C20046 +
           ((C20049 * C20532 + C93585 * C20533) * C275 +
            (C20049 * C20663 + C93585 * C20919) * C93706) *
               C20047) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C28876 +
            (C20049 * C276 + C93585 * C579) * C28719 + C25319 * C28877 +
            C25604 * C28720 + C25326 * C28878 + C25607 * C28721) *
               C93828 +
           (C20749 * C28876 + C20933 * C28719 + C23109 * C28877 +
            C23329 * C28720 + C25324 * C28878 + C25606 * C28721) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C20049 * C5951 + C93585 * C6274) * C28721 +
            (C20049 * C5776 + C93585 * C5779) * C28878 + C26524 * C28720 +
            C26210 * C28877 + C22049 * C28719 + C21832 * C28876) *
               C93694 +
           ((C20049 * C1538 + C93585 * C1786) * C28721 +
            (C20049 * C1390 + C93585 * C1398) * C28878 + C27444 * C28720 +
            C27144 * C28877 + (C20049 * C277 + C93585 * C580) * C28719 +
            (C20049 * C109 + C93585 * C115) * C28876) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C28876 +
            (C20049 * C278 + C93585 * C581) * C28719 +
            (C20049 * C1386 + C93585 * C1394) * C28877 +
            (C20049 * C1534 + C93585 * C1782) * C28720 +
            (C20049 * C1391 + C93585 * C1399) * C28878 +
            (C20049 * C1539 + C93585 * C1787) * C28721) *
               C93828 +
           ((C20049 * C805 + C93585 * C813) * C28876 +
            (C20049 * C953 + C93585 * C1201) * C28719 +
            (C20049 * C3411 + C93585 * C3415) * C28877 +
            (C20049 * C3567 + C93585 * C3855) * C28720 +
            (C20049 * C5777 + C93585 * C5780) * C28878 +
            (C20049 * C5952 + C93585 * C6275) * C28721) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C28876 +
            (C20049 * C276 + C93585 * C579) * C28719 + C25319 * C28877 +
            C25604 * C28720 + C25326 * C28878 + C25607 * C28721) *
               C93828 +
           (C35129 + C35130 + C35131 + C35132 + C35133 + C35134) * C93694) *
              C93639 * C800 -
          ((C35135 + C35136 + C35137 + C35138 + C35139 + C35140) * C93694 +
           (C35134 + C35133 + C35132 + C35131 + C35130 + C35129) * C93828) *
              C93639 * C801 +
          ((C35140 + C35139 + C35138 + C35137 + C35136 + C35135) * C93828 +
           (C20753 * C28876 + C20935 * C28719 + C23105 * C28877 +
            C23327 * C28720 + (C20049 * C21100 + C93585 * C21101) * C28878 +
            (C20049 * C21213 + C93585 * C21426) * C28721) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C275 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C93706) *
               C4075 +
           ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
           C4742 * C4077) *
              C93639 * C800 -
          (((C4179 * C958 + C93694 * C1264 + C4178 * C953 + C93828 * C1259) *
                C93706 +
            (C4179 * C810 + C93694 * C892 + C4178 * C805 + C93828 * C887) *
                C275) *
               C4077 +
           ((C4179 * C957 + C93694 * C1263 + C4178 * C954 + C93828 * C1260) *
                C93706 +
            (C4179 * C809 + C93694 * C891 + C4178 * C806 + C93828 * C888) *
                C275) *
               C4076 +
           ((C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                C93706 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C275) *
               C4075) *
              C93639 * C801 +
          (((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
                C275 +
            (C4178 * C956 + C93828 * C1262 + C4179 * C5096 + C93694 * C5598) *
                C93706) *
               C4075 +
           ((C4178 * C809 + C93828 * C891 + C4179 * C4898 + C93694 * C5017) *
                C275 +
            (C4178 * C957 + C93828 * C1263 + C4179 * C5097 + C93694 * C5599) *
                C93706) *
               C4076 +
           ((C4178 * C810 + C93828 * C892 + C4179 * C4899 + C93694 * C5018) *
                C275 +
            (C4178 * C958 + C93828 * C1264 + C4179 * C5098 + C93694 * C5600) *
                C93706) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C275 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C93706) *
               C4075 +
           ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
           C4742 * C4077) *
              C93639 * C93625 * C97 -
          (((C4738 + C4739) * C93706 + (C4215 + C4216) * C275) * C4077 +
           ((C4737 + C4736) * C93706 + (C4210 + C4209) * C275) * C4076 +
           ((C4735 + C4734) * C93706 + (C4206 + C4205) * C275) * C4075) *
              C93639 * C93625 * C98 +
          (C4742 * C4075 +
           ((C4216 + C4215) * C275 + (C4739 + C4738) * C93706) * C4076 +
           ((C4178 * C112 + C93828 * C193 + C4179 * C1983 + C93694 * C2056) *
                C275 +
            (C4178 * C280 + C93828 * C639 + C4179 * C2142 + C93694 * C2527) *
                C93706) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C275 +
           (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
            C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
               C93706) *
              C93585 * C93639 * C93625 * C97 -
          ((C20115 * C5097 + C20047 * C5599 + C20114 * C957 + C20046 * C1263 +
            C20113 * C954 + C20045 * C1260 + C20112 * C277 + C20044 * C636) *
               C93706 +
           (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
            C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
               C275) *
              C93585 * C93639 * C93625 * C98 +
          ((C20112 * C110 + C20044 * C191 + C20113 * C805 + C20045 * C887 +
            C20114 * C810 + C20046 * C892 + C20115 * C4899 + C20047 * C5018) *
               C275 +
           (C20112 * C278 + C20044 * C637 + C20113 * C953 + C20045 * C1259 +
            C20114 * C958 + C20046 * C1264 + C20115 * C5098 + C20047 * C5600) *
               C93706) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C275 +
           (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
            C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
               C93706) *
              C93585 * C93639 * C800 -
          ((C20115 * C15744 + C20047 * C16231 + C20114 * C5096 +
            C20046 * C5598 + C20113 * C956 + C20045 * C1262 + C20112 * C955 +
            C20044 * C1261) *
               C93706 +
           (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
            C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
            C20044 * C889) *
               C275) *
              C93585 * C93639 * C801 +
          ((C20112 * C808 + C20044 * C890 + C20113 * C4897 + C20045 * C5016 +
            C20114 * C15550 + C20046 * C15666 + C20115 * C20532 +
            C20047 * C20611) *
               C275 +
           (C20112 * C956 + C20044 * C1262 + C20113 * C5096 + C20045 * C5598 +
            C20114 * C15744 + C20046 * C16231 + C20115 * C20663 +
            C20047 * C20992) *
               C93706) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C28876 +
           (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
               C28719 +
           (C4178 * C1388 + C93828 * C1470 + C4179 * C3409 + C93694 * C3491) *
               C28877 +
           (C4178 * C1536 + C93828 * C1842 + C4179 * C3565 + C93694 * C3923) *
               C28720 +
           (C4178 * C1389 + C93828 * C1471 + C4179 * C5775 + C93694 * C5870) *
               C28878 +
           (C4178 * C1537 + C93828 * C1843 + C4179 * C5950 + C93694 * C6350) *
               C28721) *
              C93585 * C93639 * C93625 * C97 -
          ((C4179 * C5951 + C93694 * C6351 + C4178 * C1538 + C93828 * C1844) *
               C28721 +
           (C4179 * C5776 + C93694 * C5871 + C4178 * C1390 + C93828 * C1472) *
               C28878 +
           (C8309 + C8310) * C28720 + (C7661 + C7662) * C28877 +
           (C4735 + C4734) * C28719 + (C4206 + C4205) * C28876) *
              C93585 * C93639 * C93625 * C98 +
          (C4217 * C28876 + C4740 * C28719 + (C7658 + C7657) * C28877 +
           (C8308 + C8307) * C28720 +
           (C4178 * C1391 + C93828 * C1473 + C4179 * C5777 + C93694 * C5872) *
               C28878 +
           (C4178 * C1539 + C93828 * C1845 + C4179 * C5952 + C93694 * C6352) *
               C28721) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C28876 +
           (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
               C28719 +
           (C4178 * C1388 + C93828 * C1470 + C4179 * C3409 + C93694 * C3491) *
               C28877 +
           (C4178 * C1536 + C93828 * C1842 + C4179 * C3565 + C93694 * C3923) *
               C28720 +
           (C4178 * C1389 + C93828 * C1471 + C4179 * C5775 + C93694 * C5870) *
               C28878 +
           (C4178 * C1537 + C93828 * C1843 + C4179 * C5950 + C93694 * C6350) *
               C28721) *
              C93585 * C93639 * C800 -
          ((C4179 * C16565 + C93694 * C16959 + C4178 * C5950 + C93828 * C6350) *
               C28721 +
           (C4179 * C16395 + C93694 * C16487 + C4178 * C5775 + C93828 * C5870) *
               C28878 +
           (C4179 * C8749 + C93694 * C9305 + C4178 * C3565 + C93828 * C3923) *
               C28720 +
           (C4179 * C8520 + C93694 * C8645 + C4178 * C3409 + C93828 * C3491) *
               C28877 +
           (C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
               C28719 +
           (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
               C28876) *
              C93585 * C93639 * C801 +
          ((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
               C28876 +
           (C4178 * C956 + C93828 * C1262 + C4179 * C5096 + C93694 * C5598) *
               C28719 +
           (C4178 * C8520 + C93828 * C8645 + C4179 * C19095 + C93694 * C19221) *
               C28877 +
           (C4178 * C8749 + C93828 * C9305 + C4179 * C19323 + C93694 * C19884) *
               C28720 +
           (C4178 * C16395 + C93828 * C16487 + C4179 * C21100 +
            C93694 * C21161) *
               C28878 +
           (C4178 * C16565 + C93828 * C16959 + C4179 * C21213 +
            C93694 * C21477) *
               C28721) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
            C5698 * C93694) *
               C4075 +
           (C4817 + C4818) * C4076 + C4823 * C4077) *
              C93639 * C800 -
          ((C5699 * C93694 + C2625 * C93828) * C4077 +
           (C5700 * C93694 + C2626 * C93828) * C4076 +
           (C5701 * C93694 + C5698 * C93828) * C4075) *
              C93639 * C801 +
          ((C5701 * C93828 +
            (C713 * C4897 + C5687 + C5687 + C93706 * C5675) * C93694) *
               C4075 +
           (C5700 * C93828 +
            (C713 * C4898 + C5688 + C5688 + C93706 * C5676) * C93694) *
               C4076 +
           (C5699 * C93828 +
            (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C93694) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
            (C713 * C807 + C1328 + C1328 + C93706 * C1319) * C93694) *
               C4075 +
           (C4817 + C4818) * C4076 + C4823 * C4077) *
              C93639 * C93625 * C97 -
          ((C4821 + C4822) * C4077 + (C4820 + C4819) * C4076 +
           (C4818 + C4817) * C4075) *
              C93639 * C93625 * C98 +
          (C4823 * C4075 + (C4822 + C4821) * C4076 +
           (C746 * C93828 +
            (C713 * C1983 + C2617 + C2617 + C93706 * C2609) * C93694) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
           C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
              C93585 * C93639 * C93625 * C97 -
          (C16320 * C20047 + C5700 * C20046 + C2626 * C20045 + C743 * C20044) *
              C93585 * C93639 * C93625 * C98 +
          (C744 * C20044 + C2625 * C20045 + C5699 * C20046 +
           (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C20047) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
           C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
              C93585 * C93639 * C800 -
          (C21050 * C20047 + C16321 * C20046 + C5701 * C20045 +
           C5698 * C20044) *
              C93585 * C93639 * C801 +
          (C5701 * C20044 + C16321 * C20045 + C21050 * C20046 +
           (C713 * C20532 + C21047 + C21047 + C93706 * C21043) * C20047) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
            C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
            C29395 + C28721 * C1901) *
               C93828 +
           (C29389 * C807 + C30108 + C30108 + C28719 * C1319 + C29390 * C3409 +
            C30107 + C30107 + C28720 * C3993 + C29391 * C5775 + C30106 +
            C30106 + C28721 * C6427) *
               C93694) *
              C93585 * C93639 * C93625 * C97 -
          ((C31912 + C31913 + C31914) * C93694 +
           (C29431 + C29430 + C29429) * C93828) *
              C93585 * C93639 * C93625 * C98 +
          ((C29434 + C29433 + C29432) * C93828 +
           (C29389 * C805 + C31903 + C31903 + C28719 * C1317 + C29390 * C3411 +
            C31904 + C31904 + C28720 * C3995 + C29391 * C5777 + C31905 +
            C31905 + C28721 * C6429) *
               C93694) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C29389 * C108 + C29393 + C29393 + C28719 * C714 + C29390 * C1388 +
            C29394 + C29394 + C28720 * C1900 + C29391 * C1389 + C29395 +
            C29395 + C28721 * C1901) *
               C93828 +
           (C35316 + C35317 + C35318) * C93694) *
              C93585 * C93639 * C800 -
          ((C35319 + C35320 + C35321) * C93694 +
           (C35318 + C35317 + C35316) * C93828) *
              C93585 * C93639 * C801 +
          ((C35321 + C35320 + C35319) * C93828 +
           (C29389 * C4897 + C35301 + C35301 + C28719 * C5675 +
            C29390 * C19095 + C35302 + C35302 + C28720 * C19984 +
            C29391 * C21100 + C35303 + C35303 + C28721 * C21528) *
               C93694) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
             C25027 * C93718) *
                C14739 +
            (C24216 + C24217) * C14740 + C24222 * C14741) *
               C93639 * C1979 -
           ((C24220 + C24221) * C14741 + (C24219 + C24218) * C14740 +
            (C24217 + C24216) * C14739) *
               C93639 * C1980) *
              C1981 +
          (((C25882 + C25894) * C14739 + (C25885 + C25895) * C14740 +
            (C21612 * C93829 +
             (C20048 * C19096 + C22256 + C22256 + C93585 * C19100) * C93718) *
                C14741) *
               C93639 * C1980 -
           ((C25895 + C25885) * C14741 + (C25894 + C25882) * C14740 +
            ((C20048 * C1387 + C22253 + C22253 + C93585 * C1403) * C93718 +
             (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93829) *
                C14739) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
             C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
             C4077 * C122) *
                C93829 +
            (C11001 + C11002 + C11003) * C93718) *
               C93680 * C93639 * C1979 -
           ((C8545 + C8546 + C8547) * C93718 +
            (C4939 + C4938 + C4937) * C93829) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C6547 + C6548 + C6549) * C93829 +
            (C4080 * C3410 + C7538 + C7538 + C4075 * C3418 + C4082 * C3411 +
             C7539 + C7539 + C4076 * C3419 + C4084 * C3412 + C7540 + C7540 +
             C4077 * C3420) *
                C93718) *
               C93680 * C93639 * C1980 -
           ((C4084 * C1385 + C7537 + C7537 + C4077 * C1401 + C4082 * C1386 +
             C7536 + C7536 + C4076 * C1402 + C4080 * C1387 + C7535 + C7535 +
             C4075 * C1403) *
                C93718 +
            (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 +
             C4097 + C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
             C4075 * C121) *
                C93829) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C39039 +
            C25027 * C39040 + C25030 * C39041 + C35410 * C39042) *
               C93680 * C93639 * C1979 -
           (C35409 * C39042 + C25029 * C39041 + C22873 * C39040 +
            C20554 * C39039) *
               C93680 * C93639 * C1980) *
              C1981 +
          ((C21610 * C39039 + C25892 * C39040 + C36249 * C39041 +
            (C20048 * C33015 + C37153 + C37153 + C93585 * C33017) * C39042) *
               C93680 * C93639 * C1980 -
           ((C20048 * C10965 + C37152 + C37152 + C93585 * C10971) * C39042 +
            C37156 * C39041 + C26841 * C39040 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C39039) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
              C14840 * C808 + C14741 * C890) *
                 C20049 +
             (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
              C14840 * C816 + C14741 * C898) *
                 C93585) *
                C93829 +
            ((C25133 + C25134 + C25135) * C20049 +
             (C25136 + C25137 + C25138) * C93585) *
                C93718) *
               C93639 * C1979 -
           (((C14840 * C19097 + C14741 * C19223 + C14839 * C8523 +
              C14740 * C8648 + C14838 * C3413 + C14739 * C3495) *
                 C93585 +
             (C14840 * C19095 + C14741 * C19221 + C14839 * C8520 +
              C14740 * C8645 + C14838 * C3409 + C14739 * C3491) *
                 C20049) *
                C93718 +
            ((C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
              C14838 * C815 + C14739 * C897) *
                 C93585 +
             (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
              C14838 * C807 + C14739 * C889) *
                 C20049) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          ((((C17275 + C17274 + C17273) * C20049 +
             (C17272 + C17271 + C17270) * C93585) *
                C93829 +
            ((C14838 * C3410 + C14739 * C3492 + C14839 * C8521 +
              C14740 * C8646 + C14840 * C19096 + C14741 * C19222) *
                 C20049 +
             (C14838 * C3414 + C14739 * C3496 + C14839 * C8524 +
              C14740 * C8649 + C14840 * C19098 + C14741 * C19224) *
                 C93585) *
                C93718) *
               C93639 * C1980 -
           (((C18256 + C18257 + C18258) * C93585 +
             (C18259 + C18260 + C18261) * C20049) *
                C93718 +
            ((C14871 + C14870 + C14869) * C93585 +
             (C14868 + C14867 + C14866) * C20049) *
                C93829) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C4081 +
             (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
             C219 * C4076 + C220 * C4085 + C221 * C4077) *
                C93829 +
            (C11115 + C11116 + C11091 + C11092 + C11093 + C11094) * C93718) *
               C93639 * C1979 -
           ((C11976 * C4077 + C11977 * C4085 + C11978 * C4076 + C11979 * C4083 +
             (C188 * C3413 + C93680 * C3495) * C4075 +
             (C188 * C3409 + C93680 * C3491) * C4081) *
                C93718 +
            (C2073 * C4077 + C2074 * C4085 + C2075 * C4076 + C2076 * C4083 +
             (C188 * C815 + C93680 * C897) * C4075 +
             (C188 * C807 + C93680 * C889) * C4081) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          (((C2076 * C4081 + C2075 * C4075 + C2074 * C4083 + C2073 * C4076 +
             C2072 * C4085 + C2071 * C4077) *
                C93829 +
            (C11979 * C4081 + C11978 * C4075 + C11977 * C4083 + C11976 * C4076 +
             (C188 * C3412 + C93680 * C3494) * C4085 +
             (C188 * C3416 + C93680 * C3498) * C4077) *
                C93718) *
               C93639 * C1980 -
           ((C2785 * C4077 + C2786 * C4085 + C2787 * C4076 + C2788 * C4083 +
             C2789 * C4075 + C2790 * C4081) *
                C93718 +
            (C223 * C4077 + C222 * C4085 + C221 * C4076 + C220 * C4083 +
             C219 * C4075 + C218 * C4081) *
                C93829) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C20049 +
             (C188 * C114 + C93680 * C195) * C93585) *
                C39039 +
            (C40035 + C40036) * C39040 + C40045 * C39041 + C40046 * C39042) *
               C93639 * C1979 -
           (((C188 * C25003 + C93680 * C25106) * C93585 +
             (C188 * C25001 + C93680 * C25104) * C20049) *
                C39042 +
            (C33142 * C93585 + C33141 * C20049) * C39041 +
            (C13955 * C93585 + C13954 * C20049) * C39040 +
            ((C188 * C815 + C93680 * C897) * C93585 +
             (C188 * C807 + C93680 * C889) * C20049) *
                C39039) *
               C93639 * C1980) *
              C1981 +
          (((C2076 * C20049 + C2075 * C93585) * C39039 +
            (C11979 * C20049 + C11978 * C93585) * C39040 +
            (C31169 * C20049 + C31168 * C93585) * C39041 +
            ((C188 * C33015 + C93680 * C33128) * C20049 +
             (C188 * C33016 + C93680 * C33129) * C93585) *
                C39042) *
               C93639 * C1980 -
           ((C30325 * C93585 + C30326 * C20049) * C39042 +
            (C11111 * C93585 + C11112 * C20049) * C39041 +
            (C2789 * C93585 + C2790 * C20049) * C39040 +
            (C219 * C93585 + C218 * C20049) * C39039) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C20049 +
             (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                 C93585) *
                C14739 +
            ((C24395 + C24396) * C20049 + (C24397 + C24398) * C93585) * C14740 +
            C24411 * C14741) *
               C93639 * C1979 -
           (((C24403 + C24404) * C93585 + (C24405 + C24406) * C20049) * C14741 +
            ((C24402 + C24401) * C93585 + (C24400 + C24399) * C20049) * C14740 +
            ((C24398 + C24397) * C93585 + (C24396 + C24395) * C20049) *
                C14739) *
               C93639 * C1980) *
              C1981 +
          ((((C12101 + C12100) * C20049 + (C12099 + C12098) * C93585) * C14739 +
            ((C26100 + C26101) * C20049 + (C26102 + C26103) * C93585) * C14740 +
            ((C9644 * C4898 + C93829 * C5097 + C9645 * C19096 +
              C93718 * C19324) *
                 C20049 +
             (C9644 * C4901 + C93829 * C5100 + C9645 * C19098 +
              C93718 * C19326) *
                 C93585) *
                C14741) *
               C93639 * C1980 -
           (((C26103 + C26102) * C93585 + (C26101 + C26100) * C20049) * C14741 +
            ((C12098 + C12099) * C93585 + (C12100 + C12101) * C20049) * C14740 +
            ((C9674 + C9673) * C93585 + (C9672 + C9671) * C20049) * C14739) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C4081 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C4075 +
            (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
            C9684 * C4077) *
               C93680 * C93639 * C1979 -
           ((C12094 + C12095) * C4077 + (C12096 + C12097) * C4085 +
            (C12098 + C12099) * C4076 + (C12100 + C12101) * C4083 +
            (C9645 * C3413 + C93718 * C3569 + C9644 * C815 + C93829 * C963) *
                C4075 +
            (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
                C4081) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C12101 + C12100) * C4081 + (C12099 + C12098) * C4075 +
            (C12097 + C12096) * C4083 + (C12095 + C12094) * C4076 +
            (C9644 * C804 + C93829 * C952 + C9645 * C3412 + C93718 * C3568) *
                C4085 +
            (C9644 * C812 + C93829 * C960 + C9645 * C3416 + C93718 * C3572) *
                C4077) *
               C93680 * C93639 * C1980 -
           ((C9679 + C9680) * C4077 + (C9681 + C9682) * C4085 +
            (C9678 + C9677) * C4076 + (C9676 + C9675) * C4083 +
            (C9674 + C9673) * C4075 + (C9672 + C9671) * C4081) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
             C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
             C39042 * C11196) *
                C20049 +
            (C39144 * C114 + C39039 * C282 + C39145 * C1396 + C39040 * C1544 +
             C39146 * C1397 + C39041 * C1545 + C39147 * C10967 +
             C39042 * C11199) *
                C93585) *
               C93680 * C93639 * C1979 -
           ((C39147 * C25003 + C39042 * C25220 + C39146 * C5778 +
             C39041 * C5953 + C39145 * C3413 + C39040 * C3569 + C39144 * C815 +
             C39039 * C963) *
                C93585 +
            (C39147 * C25001 + C39042 * C25218 + C39146 * C5775 +
             C39041 * C5950 + C39145 * C3409 + C39040 * C3565 + C39144 * C807 +
             C39039 * C955) *
                C20049) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C39144 * C806 + C39039 * C954 + C39145 * C3410 + C39040 * C3566 +
             C39146 * C5776 + C39041 * C5951 + C39147 * C33015 +
             C39042 * C33242) *
                C20049 +
            (C39144 * C814 + C39039 * C962 + C39145 * C3414 + C39040 * C3570 +
             C39146 * C5779 + C39041 * C5954 + C39147 * C33016 +
             C39042 * C33243) *
                C93585) *
               C93680 * C93639 * C1980 -
           ((C39147 * C10968 + C39042 * C11200 + C39146 * C1398 +
             C39041 * C1546 + C39145 * C1395 + C39040 * C1543 + C39144 * C115 +
             C39039 * C283) *
                C93585 +
            (C39147 * C10965 + C39042 * C11197 + C39146 * C1390 +
             C39041 * C1538 + C39145 * C1387 + C39040 * C1535 + C39144 * C109 +
             C39039 * C277) *
                C20049) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C14838 +
             (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
             C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
                C93829 +
            (C25327 + C25328 + C25303 + C25304 + C25305 + C25306) * C93718) *
               C93639 * C1979 -
           ((C23104 * C14741 + C23105 * C14840 + C23106 * C14740 +
             C23107 * C14839 + C23108 * C14739 + C23109 * C14838) *
                C93718 +
            (C20754 * C14741 + C20753 * C14840 + C20752 * C14740 +
             C20751 * C14839 + C20750 * C14739 + C20749 * C14838) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          (((C21832 * C14838 + C21833 * C14739 + C21834 * C14839 +
             C21835 * C14740 + C21836 * C14840 + C21837 * C14741) *
                C93829 +
            (C26210 * C14838 + C26211 * C14739 + C26212 * C14839 +
             C26213 * C14740 + (C20049 * C19096 + C93585 * C19098) * C14840 +
             (C20049 * C19222 + C93585 * C19440) * C14741) *
                C93718) *
               C93639 * C1980 -
           ((C26213 * C14741 + C26212 * C14840 + C26211 * C14740 +
             C26210 * C14839 + (C20049 * C1469 + C93585 * C1601) * C14739 +
             (C20049 * C1387 + C93585 * C1395) * C14838) *
                C93718 +
            (C21835 * C14741 + C21834 * C14840 + C21833 * C14740 +
             C21832 * C14839 + (C20049 * C190 + C93585 * C363) * C14739 +
             (C20049 * C109 + C93585 * C115) * C14838) *
                C93829) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
              C4085 * C110 + C4077 * C116) *
                 C188 +
             (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
              C4085 * C191 + C4077 * C364) *
                 C93680) *
                C93829 +
            ((C11304 + C11305 + C11306) * C188 +
             (C11307 + C11308 + C11309) * C93680) *
                C93718) *
               C93639 * C1979 -
           (((C8881 + C8882 + C8883) * C93680 +
             (C8884 + C8885 + C8886) * C188) *
                C93718 +
            ((C5245 + C5244 + C5243) * C93680 +
             (C5242 + C5241 + C5240) * C188) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          ((((C6886 + C6887 + C6888) * C188 +
             (C6889 + C6890 + C6891) * C93680) *
                C93829 +
            ((C4081 * C3410 + C4075 * C3414 + C4083 * C3411 + C4076 * C3415 +
              C4085 * C3412 + C4077 * C3416) *
                 C188 +
             (C4081 * C3492 + C4075 * C3640 + C4083 * C3493 + C4076 * C3641 +
              C4085 * C3494 + C4077 * C3642) *
                 C93680) *
                C93718) *
               C93639 * C1980 -
           (((C4085 * C1467 + C4077 * C1599 + C4083 * C1468 + C4076 * C1600 +
              C4081 * C1469 + C4075 * C1601) *
                 C93680 +
             (C4085 * C1385 + C4077 * C1393 + C4083 * C1386 + C4076 * C1394 +
              C4081 * C1387 + C4075 * C1395) *
                 C188) *
                C93718 +
            ((C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
              C4081 * C190 + C4075 * C363) *
                 C93680 +
             (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
              C4081 * C109 + C4075 * C115) *
                 C188) *
                C93829) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C188 +
             (C20049 * C189 + C93585 * C362) * C93680) *
                C39039 +
            (C40154 + C40155) * C39040 + C40164 * C39041 + C40165 * C39042) *
               C93639 * C1979 -
           ((C35696 * C93680 + C35697 * C188) * C39042 +
            (C25323 * C93680 + C25324 * C188) * C39041 +
            (C23108 * C93680 + C23109 * C188) * C39040 +
            (C20750 * C93680 + C20749 * C188) * C39039) *
               C93639 * C1980) *
              C1981 +
          (((C21832 * C188 + C21833 * C93680) * C39039 +
            (C26210 * C188 + C26211 * C93680) * C39040 +
            (C36549 * C188 + C36550 * C93680) * C39041 +
            ((C20049 * C33015 + C93585 * C33016) * C188 +
             (C20049 * C33128 + C93585 * C33342) * C93680) *
                C39042) *
               C93639 * C1980 -
           (((C20049 * C11081 + C93585 * C11277) * C93680 +
             (C20049 * C10965 + C93585 * C10968) * C188) *
                C39042 +
            (C37474 * C93680 + C37473 * C188) * C39041 +
            (C27145 * C93680 + C27144 * C188) * C39040 +
            ((C20049 * C190 + C93585 * C363) * C93680 +
             (C20049 * C109 + C93585 * C115) * C188) *
                C39039) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
             C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 +
             C15105 + C14741 * C1080) *
                C93585 * C93829 +
            (C25438 + C25439 + C25440) * C93585 * C93718) *
               C93639 * C1979 -
           ((C15101 * C19095 + C19568 + C19568 + C14741 * C19563 +
             C15100 * C8520 + C19567 + C19567 + C14740 * C8984 +
             C15099 * C3409 + C19566 + C19566 + C14739 * C3709) *
                C93585 * C93718 +
            (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 + C15100 * C808 +
             C15970 + C15970 + C14740 * C1080 + C15099 * C807 + C15971 +
             C15971 + C14739 * C1079) *
                C93585 * C93829) *
               C93639 * C1980) *
              C1981 +
          (((C17619 + C17618 + C17617) * C93585 * C93829 +
            (C15099 * C3410 + C19569 + C19569 + C14739 * C3710 +
             C15100 * C8521 + C19570 + C19570 + C14740 * C8985 +
             C15101 * C19096 + C19571 + C19571 + C14741 * C19564) *
                C93585 * C93718) *
               C93639 * C1980 -
           ((C18577 + C18578 + C18579) * C93585 * C93718 +
            (C15141 + C15140 + C15139) * C93585 * C93829) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 +
             C448 * C4076 + C449 * C4077) *
                C93829 +
            (C11418 + C11395 + C11396) * C93718) *
               C93639 * C1979 -
           ((C12306 * C4077 + C12307 * C4076 +
             (C418 * C3409 + C3714 + C3714 + C93680 * C3709) * C4075) *
                C93718 +
            (C2311 * C4077 + C2312 * C4076 +
             (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C4075) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          (((C2312 * C4075 + C2311 * C4076 + C2310 * C4077) * C93829 +
            (C12307 * C4075 + C12306 * C4076 +
             (C418 * C3412 + C3717 + C3717 + C93680 * C3712) * C4077) *
                C93718) *
               C93639 * C1980 -
           ((C3024 * C4077 + C3025 * C4076 + C3026 * C4075) * C93718 +
            (C450 * C4077 + C449 * C4076 + C448 * C4075) * C93829) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93585 * C39039 +
            C40221 * C39040 + C40222 * C39041 + C40223 * C39042) *
               C93639 * C1979 -
           ((C418 * C25001 + C33460 + C33460 + C93680 * C25408) * C93585 *
                C39042 +
            C33464 * C93585 * C39041 + C14261 * C93585 * C39040 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C93585 * C39039) *
               C93639 * C1980) *
              C1981 +
          ((C2312 * C93585 * C39039 + C12307 * C93585 * C39040 +
            C31486 * C93585 * C39041 +
            (C418 * C33015 + C33461 + C33461 + C93680 * C33453) * C93585 *
                C39042) *
               C93639 * C1980 -
           (C30621 * C93585 * C39042 + C11416 * C93585 * C39041 +
            C3026 * C93585 * C39040 + C448 * C93585 * C39039) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C14838 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C14739 +
            (C24395 + C24396) * C14839 + (C24649 + C24650) * C14740 +
            C24407 * C14840 + C24655 * C14741) *
               C93585 * C93639 * C1979 -
           ((C24653 + C24654) * C14741 + (C24405 + C24406) * C14840 +
            (C24652 + C24651) * C14740 + (C24400 + C24399) * C14839 +
            (C24650 + C24649) * C14739 + (C24396 + C24395) * C14838) *
               C93585 * C93639 * C1980) *
              C1981 +
          (((C12101 + C12100) * C14838 + (C12417 + C12416) * C14739 +
            (C26100 + C26101) * C14839 + (C26414 + C26415) * C14740 +
            (C9644 * C4898 + C93829 * C5097 + C9645 * C19096 +
             C93718 * C19324) *
                C14840 +
            (C9644 * C5017 + C93829 * C5415 + C9645 * C19222 +
             C93718 * C19670) *
                C14741) *
               C93585 * C93639 * C1980 -
           ((C26415 + C26414) * C14741 + (C26101 + C26100) * C14840 +
            (C12416 + C12417) * C14740 + (C12100 + C12101) * C14839 +
            (C9921 + C9920) * C14739 + (C9672 + C9671) * C14838) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C188 +
             (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                 C93680) *
                C4075 +
            ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
            C9928 * C4077) *
               C93639 * C1979 -
           (((C12414 + C12415) * C93680 + (C12096 + C12097) * C188) * C4077 +
            ((C12416 + C12417) * C93680 + (C12100 + C12101) * C188) * C4076 +
            ((C9645 * C3491 + C93718 * C3783 + C9644 * C889 + C93829 * C1145) *
                 C93680 +
             (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
                 C188) *
                C4075) *
               C93639 * C1980) *
              C1981 +
          ((((C12101 + C12100) * C188 + (C12417 + C12416) * C93680) * C4075 +
            ((C12097 + C12096) * C188 + (C12415 + C12414) * C93680) * C4076 +
            ((C9644 * C804 + C93829 * C952 + C9645 * C3412 + C93718 * C3568) *
                 C188 +
             (C9644 * C886 + C93829 * C1142 + C9645 * C3494 + C93718 * C3786) *
                 C93680) *
                C4077) *
               C93639 * C1980 -
           (((C9924 + C9925) * C93680 + (C9681 + C9682) * C188) * C4077 +
            ((C9923 + C9922) * C93680 + (C9676 + C9675) * C188) * C4076 +
            ((C9921 + C9920) * C93680 + (C9672 + C9671) * C188) * C4075) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
             C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
             C39042 * C11196) *
                C188 +
            (C39144 * C189 + C39039 * C501 + C39145 * C1470 + C39040 * C1726 +
             C39146 * C1471 + C39041 * C1727 + C39147 * C11080 +
             C39042 * C11495) *
                C93680) *
               C93585 * C93639 * C1979 -
           ((C39147 * C25104 + C39042 * C25517 + C39146 * C5870 +
             C39041 * C6196 + C39145 * C3491 + C39040 * C3783 + C39144 * C889 +
             C39039 * C1145) *
                C93680 +
            (C39147 * C25001 + C39042 * C25218 + C39146 * C5775 +
             C39041 * C5950 + C39145 * C3409 + C39040 * C3565 + C39144 * C807 +
             C39039 * C955) *
                C188) *
               C93585 * C93639 * C1980) *
              C1981 +
          (((C39144 * C806 + C39039 * C954 + C39145 * C3410 + C39040 * C3566 +
             C39146 * C5776 + C39041 * C5951 + C39147 * C33015 +
             C39042 * C33242) *
                C188 +
            (C39144 * C888 + C39039 * C1144 + C39145 * C3492 + C39040 * C3784 +
             C39146 * C5871 + C39041 * C6197 + C39147 * C33128 +
             C39042 * C33563) *
                C93680) *
               C93585 * C93639 * C1980 -
           ((C39147 * C11081 + C39042 * C11496 + C39146 * C1472 +
             C39041 * C1728 + C39145 * C1469 + C39040 * C1725 + C39144 * C190 +
             C39039 * C502) *
                C93680 +
            (C39147 * C10965 + C39042 * C11197 + C39146 * C1390 +
             C39041 * C1538 + C39145 * C1387 + C39040 * C1535 + C39144 * C109 +
             C39039 * C277) *
                C188) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C9644 +
             (C20049 * C276 + C93585 * C579) * C93829 + C25319 * C9645 +
             C25604 * C93718) *
                C14739 +
            (C24730 + C24731 + C24732 + C24733) * C14740 + C24744 * C14741) *
               C93639 * C1979 -
           ((C24738 + C24739 + C24740 + C24741) * C14741 +
            (C24737 + C24736 + C24735 + C24734) * C14740 +
            (C24733 + C24732 + C24731 + C24730) * C14739) *
               C93639 * C1980) *
              C1981 +
          (((C26514 + C26515 + C26516 + C26526) * C14739 +
            (C26519 + C26520 + C26521 + C26527) * C14740 +
            (C21836 * C9644 + C22051 * C93829 +
             (C20049 * C19096 + C93585 * C19098) * C9645 +
             (C20049 * C19324 + C93585 * C19773) * C93718) *
                C14741) *
               C93639 * C1980 -
           ((C26527 + C26521 + C26520 + C26519) * C14741 +
            (C26526 + C26516 + C26515 + C26514) * C14740 +
            ((C20049 * C1535 + C93585 * C1783) * C93718 +
             (C20049 * C1387 + C93585 * C1395) * C9645 +
             (C20049 * C277 + C93585 * C580) * C93829 +
             (C20049 * C109 + C93585 * C115) * C9644) *
                C14739) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C9644 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93829 +
            (C11304 + C11305 + C11306) * C9645 +
            (C11588 + C11589 + C11590) * C93718) *
               C93680 * C93639 * C1979 -
           ((C9205 + C9206 + C9207) * C93718 + (C8884 + C8885 + C8886) * C9645 +
            (C5521 + C5520 + C5519) * C93829 +
            (C5242 + C5241 + C5240) * C9644) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C6886 + C6887 + C6888) * C9644 + (C7222 + C7223 + C7224) * C93829 +
            (C4081 * C3410 + C4075 * C3414 + C4083 * C3411 + C4076 * C3415 +
             C4085 * C3412 + C4077 * C3416) *
                C9645 +
            (C4081 * C3566 + C4075 * C3854 + C4083 * C3567 + C4076 * C3855 +
             C4085 * C3568 + C4077 * C3856) *
                C93718) *
               C93680 * C93639 * C1980 -
           ((C4085 * C1533 + C4077 * C1781 + C4083 * C1534 + C4076 * C1782 +
             C4081 * C1535 + C4075 * C1783) *
                C93718 +
            (C4085 * C1385 + C4077 * C1393 + C4083 * C1386 + C4076 * C1394 +
             C4081 * C1387 + C4075 * C1395) *
                C9645 +
            (C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
             C4081 * C277 + C4075 * C580) *
                C93829 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C9644) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C39144 +
            (C20049 * C276 + C93585 * C579) * C39039 + C25319 * C39145 +
            C25604 * C39040 + C25326 * C39146 + C25607 * C39041 +
            C35699 * C39147 + C35972 * C39042) *
               C93680 * C93639 * C1979 -
           (C35971 * C39042 + C35697 * C39147 + C25606 * C39041 +
            C25324 * C39146 + C23329 * C39040 + C23109 * C39145 +
            C20933 * C39039 + C20749 * C39144) *
               C93680 * C93639 * C1980) *
              C1981 +
          ((C21832 * C39144 + C22049 * C39039 + C26210 * C39145 +
            C26524 * C39040 + C36549 * C39146 + C36854 * C39041 +
            (C20049 * C33015 + C93585 * C33016) * C39147 +
            (C20049 * C33242 + C93585 * C33662) * C39042) *
               C93680 * C93639 * C1980 -
           ((C20049 * C11197 + C93585 * C11573) * C39042 +
            (C20049 * C10965 + C93585 * C10968) * C39147 + C37785 * C39041 +
            C37473 * C39146 + C27444 * C39040 + C27144 * C39145 +
            (C20049 * C277 + C93585 * C580) * C39039 +
            (C20049 * C109 + C93585 * C115) * C39144) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C9644 +
            (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
             C14840 * C956 + C14741 * C1262) *
                C93829 +
            (C25133 + C25134 + C25135) * C9645 +
            (C25696 + C25697 + C25698) * C93718) *
               C93585 * C93639 * C1979 -
           ((C14840 * C19323 + C14741 * C19884 + C14839 * C8749 +
             C14740 * C9305 + C14838 * C3565 + C14739 * C3923) *
                C93718 +
            (C14840 * C19095 + C14741 * C19221 + C14839 * C8520 +
             C14740 * C8645 + C14838 * C3409 + C14739 * C3491) *
                C9645 +
            (C14840 * C5096 + C14741 * C5598 + C14839 * C956 + C14740 * C1262 +
             C14838 * C955 + C14739 * C1261) *
                C93829 +
            (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
             C14838 * C807 + C14739 * C889) *
                C9644) *
               C93585 * C93639 * C1980) *
              C1981 +
          (((C17275 + C17274 + C17273) * C9644 +
            (C17940 + C17939 + C17938) * C93829 +
            (C14838 * C3410 + C14739 * C3492 + C14839 * C8521 + C14740 * C8646 +
             C14840 * C19096 + C14741 * C19222) *
                C9645 +
            (C14838 * C3566 + C14739 * C3924 + C14839 * C8750 + C14740 * C9306 +
             C14840 * C19324 + C14741 * C19885) *
                C93718) *
               C93585 * C93639 * C1980 -
           ((C18889 + C18890 + C18891) * C93718 +
            (C18259 + C18260 + C18261) * C9645 +
            (C15393 + C15392 + C15391) * C93829 +
            (C14868 + C14867 + C14866) * C9644) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C9644 +
             (C188 * C276 + C93680 * C635) * C93829 + C11107 * C9645 +
             C11679 * C93718) *
                C4075 +
            (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
               C93639 * C1979 -
           ((C12626 + C12616 + C12617 + C12618) * C4077 +
            (C12627 + C12621 + C12622 + C12623) * C4076 +
            ((C188 * C3565 + C93680 * C3923) * C93718 +
             (C188 * C3409 + C93680 * C3491) * C9645 +
             (C188 * C955 + C93680 * C1261) * C93829 +
             (C188 * C807 + C93680 * C889) * C9644) *
                C4075) *
               C93639 * C1980) *
              C1981 +
          (((C12623 + C12622 + C12621 + C12627) * C4075 +
            (C12618 + C12617 + C12616 + C12626) * C4076 +
            (C2072 * C9644 + C2538 * C93829 +
             (C188 * C3412 + C93680 * C3494) * C9645 +
             (C188 * C3568 + C93680 * C3926) * C93718) *
                C4077) *
               C93639 * C1980 -
           ((C10085 + C10086 + C10087 + C10088) * C4077 +
            (C10084 + C10083 + C10082 + C10081) * C4076 +
            (C10080 + C10079 + C10078 + C10077) * C4075) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C39144 +
            (C188 * C276 + C93680 * C635) * C39039 + C11107 * C39145 +
            C11679 * C39040 + C11114 * C39146 + C11682 * C39041 +
            C30328 * C39147 + C30877 * C39042) *
               C93585 * C93639 * C1979 -
           ((C188 * C25218 + C93680 * C25681) * C39042 +
            (C188 * C25001 + C93680 * C25104) * C39147 + C33771 * C39041 +
            C33141 * C39146 + C14559 * C39040 + C13954 * C39145 +
            (C188 * C955 + C93680 * C1261) * C39039 +
            (C188 * C807 + C93680 * C889) * C39144) *
               C93585 * C93639 * C1980) *
              C1981 +
          ((C2076 * C39144 + C2540 * C39039 + C11979 * C39145 +
            C12625 * C39040 + C31169 * C39146 + C31797 * C39041 +
            (C188 * C33015 + C93680 * C33128) * C39147 +
            (C188 * C33242 + C93680 * C33767) * C39042) *
               C93585 * C93639 * C1980 -
           (C30876 * C39042 + C30326 * C39147 + C11681 * C39041 +
            C11112 * C39146 + C3254 * C39040 + C2790 * C39145 + C654 * C39039 +
            C218 * C39144) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezz[40] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                       C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                          C14739 +
                      (C24921 + C24922) * C14740 + C24927 * C14741) *
                         C93585 * C93639 * C1979 -
                     ((C24925 + C24926) * C14741 + (C24924 + C24923) * C14740 +
                      (C24922 + C24921) * C14739) *
                         C93585 * C93639 * C1980) *
                        C1981 +
                    (((C12747 + C12746) * C14739 + (C26734 + C26735) * C14740 +
                      (C10165 * C4898 + C26728 + C26728 + C93829 * C5676 +
                       C10166 * C19096 + C26729 + C26729 + C93718 * C19985) *
                          C14741) *
                         C93585 * C93639 * C1980 -
                     ((C26735 + C26734) * C14741 + (C12746 + C12747) * C14740 +
                      (C10203 + C10202) * C14739) *
                         C93585 * C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                       C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                          C93680 * C4075 +
                      (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                         C93639 * C1979 -
                     ((C12744 + C12745) * C93680 * C4077 +
                      (C12746 + C12747) * C93680 * C4076 +
                      (C10166 * C3409 + C10883 + C10883 + C93718 * C3993 +
                       C10165 * C807 + C10884 + C10884 + C93829 * C1319) *
                          C93680 * C4075) *
                         C93639 * C1980) *
                        C1981 +
                    (((C12747 + C12746) * C93680 * C4075 +
                      (C12745 + C12744) * C93680 * C4076 +
                      (C10165 * C804 + C12734 + C12734 + C93829 * C1316 +
                       C10166 * C3412 + C12735 + C12735 + C93718 * C3996) *
                          C93680 * C4077) *
                         C93639 * C1980 -
                     ((C10206 + C10207) * C93680 * C4077 +
                      (C10205 + C10204) * C93680 * C4076 +
                      (C10203 + C10202) * C93680 * C4075) *
                         C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C39448 * C108 + C39453 + C39453 + C39039 * C714 +
                      C39449 * C1388 + C39454 + C39454 + C39040 * C1900 +
                      C39450 * C1389 + C39455 + C39455 + C39041 * C1901 +
                      C39451 * C10964 + C39456 + C39456 + C39042 * C11756) *
                         C93680 * C93585 * C93639 * C1979 -
                     (C39451 * C25001 + C39916 + C39916 + C39042 * C25775 +
                      C39450 * C5775 + C39917 + C39917 + C39041 * C6427 +
                      C39449 * C3409 + C39918 + C39918 + C39040 * C3993 +
                      C39448 * C807 + C39919 + C39919 + C39039 * C1319) *
                         C93680 * C93585 * C93639 * C1980) *
                        C1981 +
                    ((C39448 * C806 + C41043 + C41043 + C39039 * C1318 +
                      C39449 * C3410 + C41044 + C41044 + C39040 * C3994 +
                      C39450 * C5776 + C41045 + C41045 + C39041 * C6428 +
                      C39451 * C33015 + C41046 + C41046 + C39042 * C33869) *
                         C93680 * C93585 * C93639 * C1980 -
                     (C39451 * C10965 + C39457 + C39457 + C39042 * C11757 +
                      C39450 * C1390 + C39458 + C39458 + C39041 * C1902 +
                      C39449 * C1387 + C39459 + C39459 + C39040 * C1899 +
                      C39448 * C109 + C39460 + C39460 + C39039 * C715) *
                         C93680 * C93585 * C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
             C25027 * C93718) *
                C14739 +
            (C24216 + C24217) * C14740 + C24222 * C14741) *
               C2695 -
           ((C27741 + C27742) * C14741 + (C27743 + C27744) * C14740 +
            (C25030 * C93718 + C25027 * C93829) * C14739) *
               C2696) *
              C1979 +
          (((C27744 + C27743) * C14739 + (C27742 + C27741) * C14740 +
            (C22871 * C93829 +
             (C20048 * C21100 + C21111 + C21111 + C93585 * C21102) * C93718) *
                C14741) *
               C2696 -
           ((C24220 + C24221) * C14741 + (C24219 + C24218) * C14740 +
            (C24217 + C24216) * C14739) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
             C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
             C4077 * C122) *
                C93829 +
            (C11001 + C11002 + C11003) * C93718) *
               C93680 * C2695 -
           ((C11004 + C11005 + C11006) * C93718 +
            (C11003 + C11002 + C11001) * C93829) *
               C93680 * C2696) *
              C1979 +
          (((C8547 + C8546 + C8545) * C93829 +
            (C4080 * C5775 + C5794 + C5794 + C4075 * C5781 + C4082 * C5776 +
             C5795 + C5795 + C4076 * C5782 + C4084 * C5777 + C5796 + C5796 +
             C4077 * C5783) *
                C93718) *
               C93680 * C2696 -
           ((C8545 + C8546 + C8547) * C93718 +
            (C4939 + C4938 + C4937) * C93829) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C39039 +
            C25027 * C39040 + C25030 * C39041 + C35410 * C39042) *
               C93680 * C2695 -
           (C39982 * C39042 + C35410 * C39041 + C25030 * C39040 +
            C25027 * C39039) *
               C93680 * C2696) *
              C1979 +
          ((C22873 * C39039 + C25029 * C39040 + C35409 * C39041 +
            (C20048 * C35395 + C35404 + C35404 + C93585 * C35397) * C39042) *
               C93680 * C2696 -
           (C35409 * C39042 + C25029 * C39041 + C22873 * C39040 +
            C20554 * C39039) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
              C14840 * C808 + C14741 * C890) *
                 C20049 +
             (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
              C14840 * C816 + C14741 * C898) *
                 C93585) *
                C93829 +
            ((C25133 + C25134 + C25135) * C20049 +
             (C25136 + C25137 + C25138) * C93585) *
                C93718) *
               C2695 -
           (((C25139 + C25140 + C25141) * C93585 +
             (C25142 + C25143 + C25144) * C20049) *
                C93718 +
            ((C25138 + C25137 + C25136) * C93585 +
             (C25135 + C25134 + C25133) * C20049) *
                C93829) *
               C2696) *
              C1979 +
          ((((C27855 + C27856 + C27857) * C20049 +
             (C27858 + C27859 + C27860) * C93585) *
                C93829 +
            ((C14838 * C5775 + C14739 * C5870 + C14839 * C16395 +
              C14740 * C16487 + C14840 * C21100 + C14741 * C21161) *
                 C20049 +
             (C14838 * C5778 + C14739 * C5873 + C14839 * C16397 +
              C14740 * C16489 + C14840 * C21101 + C14741 * C21162) *
                 C93585) *
                C93718) *
               C2696 -
           (((C27860 + C27859 + C27858) * C93585 +
             (C27857 + C27856 + C27855) * C20049) *
                C93718 +
            ((C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
              C14838 * C815 + C14739 * C897) *
                 C93585 +
             (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
              C14838 * C807 + C14739 * C889) *
                 C20049) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C4081 +
             (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
             C219 * C4076 + C220 * C4085 + C221 * C4077) *
                C93829 +
            (C11115 + C11116 + C11091 + C11092 + C11093 + C11094) * C93718) *
               C2695 -
           ((C11117 + C11118 + C11119 + C11120 + C11121 + C11122) * C93718 +
            (C11094 + C11093 + C11092 + C11091 + C11116 + C11115) * C93829) *
               C2696) *
              C1979 +
          (((C13956 + C13957 + C13950 + C13951 + C13952 + C13953) * C93829 +
            ((C188 * C5775 + C93680 * C5870) * C4081 +
             (C188 * C5778 + C93680 * C5873) * C4075 +
             (C188 * C5776 + C93680 * C5871) * C4083 +
             (C188 * C5779 + C93680 * C5874) * C4076 +
             (C188 * C5777 + C93680 * C5872) * C4085 +
             (C188 * C5780 + C93680 * C5875) * C4077) *
                C93718) *
               C2696 -
           ((C13953 + C13952 + C13951 + C13950 + C13957 + C13956) * C93718 +
            (C2073 * C4077 + C2074 * C4085 + C2075 * C4076 + C2076 * C4083 +
             (C188 * C815 + C93680 * C897) * C4075 +
             (C188 * C807 + C93680 * C889) * C4081) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C20049 +
             (C188 * C114 + C93680 * C195) * C93585) *
                C39039 +
            (C40035 + C40036) * C39040 + C40045 * C39041 + C40046 * C39042) *
               C2695 -
           ((C40049 + C40050) * C39042 + (C40040 + C40039) * C39041 +
            (C40038 + C40037) * C39040 + (C40036 + C40035) * C39039) *
               C2696) *
              C1979 +
          (((C41807 + C41808) * C39039 + (C41809 + C41810) * C39040 +
            (C41817 + C41818) * C39041 +
            ((C188 * C35395 + C93680 * C35484) * C20049 +
             (C188 * C35396 + C93680 * C35485) * C93585) *
                C39042) *
               C2696 -
           ((C41818 + C41817) * C39042 + (C41810 + C41809) * C39041 +
            (C41808 + C41807) * C39040 +
            ((C188 * C815 + C93680 * C897) * C93585 +
             (C188 * C807 + C93680 * C889) * C20049) *
                C39039) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C20049 +
             (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                 C93585) *
                C14739 +
            ((C24395 + C24396) * C20049 + (C24397 + C24398) * C93585) * C14740 +
            C24411 * C14741) *
               C2695 -
           (((C27975 + C27976) * C93585 + (C27977 + C27978) * C20049) * C14741 +
            ((C27979 + C27980) * C93585 + (C27981 + C27982) * C20049) * C14740 +
            ((C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                 C93585 +
             (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                 C20049) *
                C14739) *
               C2696) *
              C1979 +
          ((((C27982 + C27981) * C20049 + (C27980 + C27979) * C93585) * C14739 +
            ((C27978 + C27977) * C20049 + (C27976 + C27975) * C93585) * C14740 +
            ((C9644 * C19095 + C93829 * C19323 + C9645 * C21100 +
              C93718 * C21213) *
                 C20049 +
             (C9644 * C19097 + C93829 * C19325 + C9645 * C21101 +
              C93718 * C21214) *
                 C93585) *
                C14741) *
               C2696 -
           (((C24403 + C24404) * C93585 + (C24405 + C24406) * C20049) * C14741 +
            ((C24402 + C24401) * C93585 + (C24400 + C24399) * C20049) * C14740 +
            ((C24398 + C24397) * C93585 + (C24396 + C24395) * C20049) *
                C14739) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C4081 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C4075 +
            (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
            C9684 * C4077) *
               C93680 * C2695 -
           ((C13082 + C13083) * C4077 + (C13084 + C13085) * C4085 +
            (C13086 + C13087) * C4076 + (C13088 + C13089) * C4083 +
            (C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                C4075 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C4081) *
               C93680 * C2696) *
              C1979 +
          (((C9644 * C3409 + C93829 * C3565 + C9645 * C5775 + C93718 * C5950) *
                C4081 +
            (C9644 * C3413 + C93829 * C3569 + C9645 * C5778 + C93718 * C5953) *
                C4075 +
            (C9644 * C3410 + C93829 * C3566 + C9645 * C5776 + C93718 * C5951) *
                C4083 +
            (C9644 * C3414 + C93829 * C3570 + C9645 * C5779 + C93718 * C5954) *
                C4076 +
            (C9644 * C3411 + C93829 * C3567 + C9645 * C5777 + C93718 * C5952) *
                C4085 +
            (C9644 * C3415 + C93829 * C3571 + C9645 * C5780 + C93718 * C5955) *
                C4077) *
               C93680 * C2696 -
           ((C12094 + C12095) * C4077 + (C12096 + C12097) * C4085 +
            (C12098 + C12099) * C4076 + (C12100 + C12101) * C4083 +
            (C9645 * C3413 + C93718 * C3569 + C9644 * C815 + C93829 * C963) *
                C4075 +
            (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
                C4081) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
             C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
             C39042 * C11196) *
                C20049 +
            (C39144 * C114 + C39039 * C282 + C39145 * C1396 + C39040 * C1544 +
             C39146 * C1397 + C39041 * C1545 + C39147 * C10967 +
             C39042 * C11199) *
                C93585) *
               C93680 * C2695 -
           ((C39147 * C30190 + C39042 * C30410 + C39146 * C10967 +
             C39041 * C11199 + C39145 * C1397 + C39040 * C1545 +
             C39144 * C1396 + C39039 * C1544) *
                C93585 +
            (C39147 * C30188 + C39042 * C30408 + C39146 * C10964 +
             C39041 * C11196 + C39145 * C1389 + C39040 * C1537 +
             C39144 * C1388 + C39039 * C1536) *
                C20049) *
               C93680 * C2696) *
              C1979 +
          (((C39144 * C3409 + C39039 * C3565 + C39145 * C5775 + C39040 * C5950 +
             C39146 * C25001 + C39041 * C25218 + C39147 * C35395 +
             C39042 * C35601) *
                C20049 +
            (C39144 * C3413 + C39039 * C3569 + C39145 * C5778 + C39040 * C5953 +
             C39146 * C25003 + C39041 * C25220 + C39147 * C35396 +
             C39042 * C35602) *
                C93585) *
               C93680 * C2696 -
           ((C39147 * C25003 + C39042 * C25220 + C39146 * C5778 +
             C39041 * C5953 + C39145 * C3413 + C39040 * C3569 + C39144 * C815 +
             C39039 * C963) *
                C93585 +
            (C39147 * C25001 + C39042 * C25218 + C39146 * C5775 +
             C39041 * C5950 + C39145 * C3409 + C39040 * C3565 + C39144 * C807 +
             C39039 * C955) *
                C20049) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C14838 +
             (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
             C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
                C93829 +
            (C25327 + C25328 + C25303 + C25304 + C25305 + C25306) * C93718) *
               C2695 -
           ((C25329 + C25330 + C25331 + C25332 + C25333 + C25334) * C93718 +
            (C25306 + C25305 + C25304 + C25303 + C25328 + C25327) * C93829) *
               C2696) *
              C1979 +
          (((C28081 + C28082 + C28083 + C28084 + C28085 + C28086) * C93829 +
            (C25324 * C14838 + C25323 * C14739 + C25322 * C14839 +
             C25321 * C14740 + (C20049 * C21100 + C93585 * C21101) * C14840 +
             (C20049 * C21161 + C93585 * C21265) * C14741) *
                C93718) *
               C2696 -
           ((C28086 + C28085 + C28084 + C28083 + C28082 + C28081) * C93718 +
            (C20754 * C14741 + C20753 * C14840 + C20752 * C14740 +
             C20751 * C14839 + C20750 * C14739 + C20749 * C14838) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
              C4085 * C110 + C4077 * C116) *
                 C188 +
             (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
              C4085 * C191 + C4077 * C364) *
                 C93680) *
                C93829 +
            ((C11304 + C11305 + C11306) * C188 +
             (C11307 + C11308 + C11309) * C93680) *
                C93718) *
               C2695 -
           (((C11310 + C11311 + C11312) * C93680 +
             (C11313 + C11314 + C11315) * C188) *
                C93718 +
            ((C11309 + C11308 + C11307) * C93680 +
             (C11306 + C11305 + C11304) * C188) *
                C93829) *
               C2696) *
              C1979 +
          ((((C8886 + C8885 + C8884) * C188 +
             (C8883 + C8882 + C8881) * C93680) *
                C93829 +
            ((C4081 * C5775 + C4075 * C5778 + C4083 * C5776 + C4076 * C5779 +
              C4085 * C5777 + C4077 * C5780) *
                 C188 +
             (C4081 * C5870 + C4075 * C6030 + C4083 * C5871 + C4076 * C6031 +
              C4085 * C5872 + C4077 * C6032) *
                 C93680) *
                C93718) *
               C2696 -
           (((C8881 + C8882 + C8883) * C93680 +
             (C8884 + C8885 + C8886) * C188) *
                C93718 +
            ((C5245 + C5244 + C5243) * C93680 +
             (C5242 + C5241 + C5240) * C188) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C188 +
             (C20049 * C189 + C93585 * C362) * C93680) *
                C39039 +
            (C40154 + C40155) * C39040 + C40164 * C39041 + C40165 * C39042) *
               C2695 -
           ((C40168 + C40169) * C39042 + (C40159 + C40158) * C39041 +
            (C40157 + C40156) * C39040 + (C40155 + C40154) * C39039) *
               C2696) *
              C1979 +
          (((C41951 + C41952) * C39039 + (C41953 + C41954) * C39040 +
            (C41955 + C41956) * C39041 +
            ((C20049 * C35395 + C93585 * C35396) * C188 +
             (C20049 * C35484 + C93585 * C35677) * C93680) *
                C39042) *
               C2696 -
           ((C41956 + C41955) * C39042 + (C41954 + C41953) * C39041 +
            (C41952 + C41951) * C39040 +
            (C20750 * C93680 + C20749 * C188) * C39039) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
             C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 +
             C15105 + C14741 * C1080) *
                C93585 * C93829 +
            (C25438 + C25439 + C25440) * C93585 * C93718) *
               C2695 -
           ((C25441 + C25442 + C25443) * C93585 * C93718 +
            (C25440 + C25439 + C25438) * C93585 * C93829) *
               C2696) *
              C1979 +
          (((C28200 + C28201 + C28202) * C93585 * C93829 +
            (C15099 * C5775 + C28191 + C28191 + C14739 * C6107 +
             C15100 * C16395 + C28192 + C28192 + C14740 * C16719 +
             C15101 * C21100 + C28193 + C28193 + C14741 * C21316) *
                C93585 * C93718) *
               C2696 -
           ((C28202 + C28201 + C28200) * C93585 * C93718 +
            (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 + C15100 * C808 +
             C15970 + C15970 + C14740 * C1080 + C15099 * C807 + C15971 +
             C15971 + C14739 * C1079) *
                C93585 * C93829) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 +
             C448 * C4076 + C449 * C4077) *
                C93829 +
            (C11418 + C11395 + C11396) * C93718) *
               C2695 -
           ((C11419 + C11420 + C11421) * C93718 +
            (C11396 + C11395 + C11418) * C93829) *
               C2696) *
              C1979 +
          (((C14262 + C14254 + C14255) * C93829 +
            ((C418 * C5775 + C14256 + C14256 + C93680 * C6107) * C4075 +
             (C418 * C5776 + C14257 + C14257 + C93680 * C6108) * C4076 +
             (C418 * C5777 + C14258 + C14258 + C93680 * C6109) * C4077) *
                C93718) *
               C2696 -
           ((C14255 + C14254 + C14262) * C93718 +
            (C2311 * C4077 + C2312 * C4076 +
             (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C4075) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93585 * C39039 +
            C40221 * C39040 + C40222 * C39041 + C40223 * C39042) *
               C2695 -
           (C40230 * C39042 + C40223 * C39041 + C40222 * C39040 +
            C40221 * C39039) *
               C2696) *
              C1979 +
          ((C42023 * C39039 + C42024 * C39040 + C42031 * C39041 +
            (C418 * C35395 + C42027 + C42027 + C93680 * C35779) * C93585 *
                C39042) *
               C2696 -
           (C42031 * C39042 + C42024 * C39041 + C42023 * C39040 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C93585 * C39039) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C14838 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C14739 +
            (C24395 + C24396) * C14839 + (C24649 + C24650) * C14740 +
            C24407 * C14840 + C24655 * C14741) *
               C93585 * C2695 -
           ((C28309 + C28310) * C14741 + (C27977 + C27978) * C14840 +
            (C28311 + C28312) * C14740 + (C27981 + C27982) * C14839 +
            (C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                C14739 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C14838) *
               C93585 * C2696) *
              C1979 +
          (((C27982 + C27981) * C14838 + (C28312 + C28311) * C14739 +
            (C27978 + C27977) * C14839 + (C28310 + C28309) * C14740 +
            (C9644 * C19095 + C93829 * C19323 + C9645 * C21100 +
             C93718 * C21213) *
                C14840 +
            (C9644 * C19221 + C93829 * C19669 + C9645 * C21161 +
             C93718 * C21375) *
                C14741) *
               C93585 * C2696 -
           ((C24653 + C24654) * C14741 + (C24405 + C24406) * C14840 +
            (C24652 + C24651) * C14740 + (C24400 + C24399) * C14839 +
            (C24650 + C24649) * C14739 + (C24396 + C24395) * C14838) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C188 +
             (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                 C93680) *
                C4075 +
            ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
            C9928 * C4077) *
               C2695 -
           (((C13413 + C13414) * C93680 + (C13084 + C13085) * C188) * C4077 +
            ((C13415 + C13416) * C93680 + (C13088 + C13089) * C188) * C4076 +
            ((C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                 C93680 +
             (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                 C188) *
                C4075) *
               C2696) *
              C1979 +
          ((((C9644 * C3409 + C93829 * C3565 + C9645 * C5775 + C93718 * C5950) *
                 C188 +
             (C9644 * C3491 + C93829 * C3783 + C9645 * C5870 + C93718 * C6196) *
                 C93680) *
                C4075 +
            ((C9644 * C3410 + C93829 * C3566 + C9645 * C5776 + C93718 * C5951) *
                 C188 +
             (C9644 * C3492 + C93829 * C3784 + C9645 * C5871 + C93718 * C6197) *
                 C93680) *
                C4076 +
            ((C9644 * C3411 + C93829 * C3567 + C9645 * C5777 + C93718 * C5952) *
                 C188 +
             (C9644 * C3493 + C93829 * C3785 + C9645 * C5872 + C93718 * C6198) *
                 C93680) *
                C4077) *
               C2696 -
           (((C12414 + C12415) * C93680 + (C12096 + C12097) * C188) * C4077 +
            ((C12416 + C12417) * C93680 + (C12100 + C12101) * C188) * C4076 +
            ((C9645 * C3491 + C93718 * C3783 + C9644 * C889 + C93829 * C1145) *
                 C93680 +
             (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
                 C188) *
                C4075) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
             C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
             C39042 * C11196) *
                C188 +
            (C39144 * C189 + C39039 * C501 + C39145 * C1470 + C39040 * C1726 +
             C39146 * C1471 + C39041 * C1727 + C39147 * C11080 +
             C39042 * C11495) *
                C93680) *
               C93585 * C2695 -
           ((C39147 * C30303 + C39042 * C30698 + C39146 * C11080 +
             C39041 * C11495 + C39145 * C1471 + C39040 * C1727 +
             C39144 * C1470 + C39039 * C1726) *
                C93680 +
            (C39147 * C30188 + C39042 * C30408 + C39146 * C10964 +
             C39041 * C11196 + C39145 * C1389 + C39040 * C1537 +
             C39144 * C1388 + C39039 * C1536) *
                C188) *
               C93585 * C2696) *
              C1979 +
          (((C39144 * C3409 + C39039 * C3565 + C39145 * C5775 + C39040 * C5950 +
             C39146 * C25001 + C39041 * C25218 + C39147 * C35395 +
             C39042 * C35601) *
                C188 +
            (C39144 * C3491 + C39039 * C3783 + C39145 * C5870 + C39040 * C6196 +
             C39146 * C25104 + C39041 * C25517 + C39147 * C35484 +
             C39042 * C35890) *
                C93680) *
               C93585 * C2696 -
           ((C39147 * C25104 + C39042 * C25517 + C39146 * C5870 +
             C39041 * C6196 + C39145 * C3491 + C39040 * C3783 + C39144 * C889 +
             C39039 * C1145) *
                C93680 +
            (C39147 * C25001 + C39042 * C25218 + C39146 * C5775 +
             C39041 * C5950 + C39145 * C3409 + C39040 * C3565 + C39144 * C807 +
             C39039 * C955) *
                C188) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C9644 +
             (C20049 * C276 + C93585 * C579) * C93829 + C25319 * C9645 +
             C25604 * C93718) *
                C14739 +
            (C24730 + C24731 + C24732 + C24733) * C14740 + C24744 * C14741) *
               C2695 -
           ((C28411 + C28412 + C28413 + C28414) * C14741 +
            (C28415 + C28416 + C28417 + C28418) * C14740 +
            (C25607 * C93718 + C25326 * C9645 + C25604 * C93829 +
             C25319 * C9644) *
                C14739) *
               C2696) *
              C1979 +
          (((C28418 + C28417 + C28416 + C28415) * C14739 +
            (C28414 + C28413 + C28412 + C28411) * C14740 +
            (C23105 * C9644 + C23327 * C93829 +
             (C20049 * C21100 + C93585 * C21101) * C9645 +
             (C20049 * C21213 + C93585 * C21426) * C93718) *
                C14741) *
               C2696 -
           ((C24738 + C24739 + C24740 + C24741) * C14741 +
            (C24737 + C24736 + C24735 + C24734) * C14740 +
            (C24733 + C24732 + C24731 + C24730) * C14739) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C9644 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93829 +
            (C11304 + C11305 + C11306) * C9645 +
            (C11588 + C11589 + C11590) * C93718) *
               C93680 * C2695 -
           ((C11591 + C11592 + C11593) * C93718 +
            (C11313 + C11314 + C11315) * C9645 +
            (C11590 + C11589 + C11588) * C93829 +
            (C11306 + C11305 + C11304) * C9644) *
               C93680 * C2696) *
              C1979 +
          (((C8886 + C8885 + C8884) * C9644 + (C9207 + C9206 + C9205) * C93829 +
            (C4081 * C5775 + C4075 * C5778 + C4083 * C5776 + C4076 * C5779 +
             C4085 * C5777 + C4077 * C5780) *
                C9645 +
            (C4081 * C5950 + C4075 * C6273 + C4083 * C5951 + C4076 * C6274 +
             C4085 * C5952 + C4077 * C6275) *
                C93718) *
               C93680 * C2696 -
           ((C9205 + C9206 + C9207) * C93718 + (C8884 + C8885 + C8886) * C9645 +
            (C5521 + C5520 + C5519) * C93829 +
            (C5242 + C5241 + C5240) * C9644) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C39144 +
            (C20049 * C276 + C93585 * C579) * C39039 + C25319 * C39145 +
            C25604 * C39040 + C25326 * C39146 + C25607 * C39041 +
            C35699 * C39147 + C35972 * C39042) *
               C93680 * C2695 -
           (C40335 * C39042 + C40167 * C39147 + C35972 * C39041 +
            C35699 * C39146 + C25607 * C39040 + C25326 * C39145 +
            C25604 * C39039 + C25319 * C39144) *
               C93680 * C2696) *
              C1979 +
          ((C23109 * C39144 + C23329 * C39039 + C25324 * C39145 +
            C25606 * C39040 + C35697 * C39146 + C35971 * C39041 +
            (C20049 * C35395 + C93585 * C35396) * C39147 +
            (C20049 * C35601 + C93585 * C35965) * C39042) *
               C93680 * C2696 -
           (C35971 * C39042 + C35697 * C39147 + C25606 * C39041 +
            C25324 * C39146 + C23329 * C39040 + C23109 * C39145 +
            C20933 * C39039 + C20749 * C39144) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C9644 +
            (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
             C14840 * C956 + C14741 * C1262) *
                C93829 +
            (C25133 + C25134 + C25135) * C9645 +
            (C25696 + C25697 + C25698) * C93718) *
               C93585 * C2695 -
           ((C25699 + C25700 + C25701) * C93718 +
            (C25142 + C25143 + C25144) * C9645 +
            (C25698 + C25697 + C25696) * C93829 +
            (C25135 + C25134 + C25133) * C9644) *
               C93585 * C2696) *
              C1979 +
          (((C27855 + C27856 + C27857) * C9644 +
            (C28523 + C28524 + C28525) * C93829 +
            (C14838 * C5775 + C14739 * C5870 + C14839 * C16395 +
             C14740 * C16487 + C14840 * C21100 + C14741 * C21161) *
                C9645 +
            (C14838 * C5950 + C14739 * C6350 + C14839 * C16565 +
             C14740 * C16959 + C14840 * C21213 + C14741 * C21477) *
                C93718) *
               C93585 * C2696 -
           ((C28525 + C28524 + C28523) * C93718 +
            (C27857 + C27856 + C27855) * C9645 +
            (C14840 * C5096 + C14741 * C5598 + C14839 * C956 + C14740 * C1262 +
             C14838 * C955 + C14739 * C1261) *
                C93829 +
            (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
             C14838 * C807 + C14739 * C889) *
                C9644) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C9644 +
             (C188 * C276 + C93680 * C635) * C93829 + C11107 * C9645 +
             C11679 * C93718) *
                C4075 +
            (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
               C2695 -
           ((C13622 + C13623 + C13624 + C13625) * C4077 +
            (C13626 + C13627 + C13628 + C13629) * C4076 +
            (C11682 * C93718 + C11114 * C9645 + C11679 * C93829 +
             C11107 * C9644) *
                C4075) *
               C2696) *
              C1979 +
          (((C13954 * C9644 + C14559 * C93829 +
             (C188 * C5775 + C93680 * C5870) * C9645 +
             (C188 * C5950 + C93680 * C6350) * C93718) *
                C4075 +
            (C11979 * C9644 + C12625 * C93829 +
             (C188 * C5776 + C93680 * C5871) * C9645 +
             (C188 * C5951 + C93680 * C6351) * C93718) *
                C4076 +
            (C11977 * C9644 + C12624 * C93829 +
             (C188 * C5777 + C93680 * C5872) * C9645 +
             (C188 * C5952 + C93680 * C6352) * C93718) *
                C4077) *
               C2696 -
           ((C12626 + C12616 + C12617 + C12618) * C4077 +
            (C12627 + C12621 + C12622 + C12623) * C4076 +
            (C14559 * C93718 + C13954 * C9645 +
             (C188 * C955 + C93680 * C1261) * C93829 +
             (C188 * C807 + C93680 * C889) * C9644) *
                C4075) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C39144 +
            (C188 * C276 + C93680 * C635) * C39039 + C11107 * C39145 +
            C11679 * C39040 + C11114 * C39146 + C11682 * C39041 +
            C30328 * C39147 + C30877 * C39042) *
               C93585 * C2695 -
           (C40389 * C39042 + C40048 * C39147 + C30877 * C39041 +
            C30328 * C39146 + C11682 * C39040 + C11114 * C39145 +
            C11679 * C39039 + C11107 * C39144) *
               C93585 * C2696) *
              C1979 +
          ((C13954 * C39144 + C14559 * C39039 + C33141 * C39145 +
            C33771 * C39040 + C41815 * C39146 + C42232 * C39041 +
            (C188 * C35395 + C93680 * C35484) * C39147 +
            (C188 * C35601 + C93680 * C36046) * C39042) *
               C93585 * C2696 -
           (C42232 * C39042 + C41815 * C39147 + C33771 * C39041 +
            C33141 * C39146 + C14559 * C39040 + C13954 * C39145 +
            (C188 * C955 + C93680 * C1261) * C39039 +
            (C188 * C807 + C93680 * C889) * C39144) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[41] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                       C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                          C14739 +
                      (C24921 + C24922) * C14740 + C24927 * C14741) *
                         C93585 * C2695 -
                     ((C28642 + C28643) * C14741 + (C28644 + C28645) * C14740 +
                      (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
                       C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                          C14739) *
                         C93585 * C2696) *
                        C1979 +
                    (((C28645 + C28644) * C14739 + (C28643 + C28642) * C14740 +
                      (C10165 * C19095 + C28632 + C28632 + C93829 * C19984 +
                       C10166 * C21100 + C28633 + C28633 + C93718 * C21528) *
                          C14741) *
                         C93585 * C2696 -
                     ((C24925 + C24926) * C14741 + (C24924 + C24923) * C14740 +
                      (C24922 + C24921) * C14739) *
                         C93585 * C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                       C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                          C93680 * C4075 +
                      (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                         C2695 -
                     ((C13746 + C13747) * C93680 * C4077 +
                      (C13748 + C13749) * C93680 * C4076 +
                      (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
                       C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                          C93680 * C4075) *
                         C2696) *
                        C1979 +
                    (((C10165 * C3409 + C14658 + C14658 + C93829 * C3993 +
                       C10166 * C5775 + C14659 + C14659 + C93718 * C6427) *
                          C93680 * C4075 +
                      (C10165 * C3410 + C14660 + C14660 + C93829 * C3994 +
                       C10166 * C5776 + C14661 + C14661 + C93718 * C6428) *
                          C93680 * C4076 +
                      (C10165 * C3411 + C14662 + C14662 + C93829 * C3995 +
                       C10166 * C5777 + C14663 + C14663 + C93718 * C6429) *
                          C93680 * C4077) *
                         C2696 -
                     ((C12744 + C12745) * C93680 * C4077 +
                      (C12746 + C12747) * C93680 * C4076 +
                      (C10166 * C3409 + C10883 + C10883 + C93718 * C3993 +
                       C10165 * C807 + C10884 + C10884 + C93829 * C1319) *
                          C93680 * C4075) *
                         C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C39448 * C108 + C39453 + C39453 + C39039 * C714 +
                      C39449 * C1388 + C39454 + C39454 + C39040 * C1900 +
                      C39450 * C1389 + C39455 + C39455 + C39041 * C1901 +
                      C39451 * C10964 + C39456 + C39456 + C39042 * C11756) *
                         C93680 * C93585 * C2695 -
                     (C39451 * C30188 + C40441 + C40441 + C39042 * C30951 +
                      C39450 * C10964 + C40442 + C40442 + C39041 * C11756 +
                      C39449 * C1389 + C40443 + C40443 + C39040 * C1901 +
                      C39448 * C1388 + C40444 + C40444 + C39039 * C1900) *
                         C93680 * C93585 * C2696) *
                        C1979 +
                    ((C39448 * C3409 + C42299 + C42299 + C39039 * C3993 +
                      C39449 * C5775 + C42300 + C42300 + C39040 * C6427 +
                      C39450 * C25001 + C42301 + C42301 + C39041 * C25775 +
                      C39451 * C35395 + C42302 + C42302 + C39042 * C36140) *
                         C93680 * C93585 * C2696 -
                     (C39451 * C25001 + C39916 + C39916 + C39042 * C25775 +
                      C39450 * C5775 + C39917 + C39917 + C39041 * C6427 +
                      C39449 * C3409 + C39918 + C39918 + C39040 * C3993 +
                      C39448 * C807 + C39919 + C39919 + C39039 * C1319) *
                         C93680 * C93585 * C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
                C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
                C4077 * C122) *
                   C93829 +
               (C4080 * C1388 + C5790 + C5790 + C4075 * C1404 + C4082 * C1387 +
                C5789 + C5789 + C4076 * C1403 + C4084 * C1386 + C5788 + C5788 +
                C4077 * C1402) *
                   C93718) *
                  C93680 * C93639 * C93625 * C97 -
              ((C4084 * C1385 + C7537 + C7537 + C4077 * C1401 + C4082 * C1386 +
                C7536 + C7536 + C4076 * C1402 + C4080 * C1387 + C7535 + C7535 +
                C4075 * C1403) *
                   C93718 +
               (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 +
                C4097 + C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
                C4075 * C121) *
                   C93829) *
                  C93680 * C93639 * C93625 * C98 +
              ((C4080 * C110 + C4099 + C4099 + C4075 * C122 + C4082 * C111 +
                C4100 + C4100 + C4076 * C123 + C4084 * C112 + C4101 + C4101 +
                C4077 * C124) *
                   C93829 +
               (C4080 * C1386 + C9494 + C9494 + C4075 * C1402 + C4082 * C1385 +
                C9495 + C9495 + C4076 * C1401 + C4084 * C2697 + C9496 + C9496 +
                C4077 * C2699) *
                   C93718) *
                  C93680 * C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
                C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
                C4077 * C122) *
                   C93829 +
               (C4080 * C1388 + C5790 + C5790 + C4075 * C1404 + C4082 * C1387 +
                C5789 + C5789 + C4076 * C1403 + C4084 * C1386 + C5788 + C5788 +
                C4077 * C1402) *
                   C93718) *
                  C93680 * C93639 * C800 -
              ((C8545 + C8546 + C8547) * C93718 +
               (C4939 + C4938 + C4937) * C93829) *
                  C93680 * C93639 * C801 +
              ((C4942 + C4941 + C4940) * C93829 +
               (C4080 * C8520 + C8536 + C8536 + C4075 * C8526 + C4082 * C8521 +
                C8537 + C8537 + C4076 * C8527 + C4084 * C8522 + C8538 + C8538 +
                C4077 * C8528) *
                   C93718) *
                  C93680 * C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93829 +
           (C11001 + C11002 + C11003) * C93718) *
              C93680 * C1382 -
          ((C11004 + C11005 + C11006) * C93718 +
           (C11003 + C11002 + C11001) * C93829) *
              C93680 * C1383 +
          ((C11006 + C11005 + C11004) * C93829 +
           (C4080 * C10964 + C10986 + C10986 + C4075 * C10970 + C4082 * C10965 +
            C10987 + C10987 + C4076 * C10971 + C4084 * C10966 + C10988 +
            C10988 + C4077 * C10972) *
               C93718) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
            (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) * C93718) *
               C14739 +
           (C20554 * C93829 + C22873 * C93718) * C14740 +
           (C20555 * C93829 + C22872 * C93718) * C14741) *
              C93639 * C93625 * C97 -
          (((C20048 * C8521 + C22255 + C22255 + C93585 * C8527) * C93718 +
            C21611 * C93829) *
               C14741 +
           ((C20048 * C3410 + C22254 + C22254 + C93585 * C3418) * C93718 +
            C21610 * C93829) *
               C14740 +
           ((C20048 * C1387 + C22253 + C22253 + C93585 * C1403) * C93718 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93829) *
               C14739) *
              C93639 * C93625 * C98 +
          (((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C93829 +
            (C20048 * C1386 + C23547 + C23547 + C93585 * C1402) * C93718) *
               C14739 +
           ((C20048 * C805 + C20060 + C20060 + C93585 * C821) * C93829 +
            (C20048 * C3411 + C23548 + C23548 + C93585 * C3419) * C93718) *
               C14740 +
           ((C20048 * C810 + C20061 + C20061 + C93585 * C826) * C93829 +
            (C20048 * C8522 + C23549 + C23549 + C93585 * C8528) * C93718) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
            (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) * C93718) *
               C14739 +
           (C24216 + C24217) * C14740 + C24222 * C14741) *
              C93639 * C800 -
          ((C24220 + C24221) * C14741 + (C24219 + C24218) * C14740 +
           (C24217 + C24216) * C14739) *
              C93639 * C801 +
          (C24222 * C14739 + (C24221 + C24220) * C14740 +
           (C20557 * C93829 +
            (C20048 * C22854 + C22864 + C22864 + C93585 * C22856) * C93718) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
            C25027 * C93718) *
               C14739 +
           (C24216 + C24217) * C14740 + C24222 * C14741) *
              C1382 -
          ((C25028 * C93718 + C22872 * C93829) * C14741 +
           (C25029 * C93718 + C22873 * C93829) * C14740 +
           (C25030 * C93718 + C25027 * C93829) * C14739) *
              C1383 +
          ((C25030 * C93829 +
            (C20048 * C10964 + C25016 + C25016 + C93585 * C10970) * C93718) *
               C14739 +
           (C25029 * C93829 +
            (C20048 * C25001 + C25017 + C25017 + C93585 * C25005) * C93718) *
               C14740 +
           (C25028 * C93829 +
            (C20048 * C25002 + C25018 + C25018 + C93585 * C25006) * C93718) *
               C14741) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C39039 +
           C25027 * C39040 + C25030 * C39041 + C35410 * C39042) *
              C93680 * C93639 * C93625 * C97 -
          ((C20048 * C10965 + C37152 + C37152 + C93585 * C10971) * C39042 +
           C37156 * C39041 + C26841 * C39040 +
           (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C39039) *
              C93680 * C93639 * C93625 * C98 +
          ((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C39039 +
           (C20048 * C1386 + C23547 + C23547 + C93585 * C1402) * C39040 +
           (C20048 * C1391 + C33951 + C33951 + C93585 * C1407) * C39041 +
           (C20048 * C10966 + C39044 + C39044 + C93585 * C10972) * C39042) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C39039 +
           C25027 * C39040 + C25030 * C39041 + C35410 * C39042) *
              C93680 * C93639 * C800 -
          (C35409 * C39042 + C25029 * C39041 + C22873 * C39040 +
           C20554 * C39039) *
              C93680 * C93639 * C801 +
          (C20555 * C39039 + C22872 * C39040 + C25028 * C39041 +
           (C20048 * C25002 + C25018 + C25018 + C93585 * C25006) * C39042) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C39039 +
           C25027 * C39040 + C25030 * C39041 + C35410 * C39042) *
              C93680 * C1382 -
          (C39982 * C39042 + C35410 * C39041 + C25030 * C39040 +
           C25027 * C39039) *
              C93680 * C1383 +
          (C25030 * C39039 + C35410 * C39040 + C39982 * C39041 +
           (C20048 * C39973 + C39979 + C39979 + C93585 * C39975) * C39042) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C188 * C108 + C93680 * C189) * C4081 +
                (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
                C219 * C4076 + C220 * C4085 + C221 * C4077) *
                   C93829 +
               ((C188 * C1388 + C93680 * C1470) * C4081 +
                (C188 * C1396 + C93680 * C1478) * C4075 + C2790 * C4083 +
                C2789 * C4076 + C2788 * C4085 + C2787 * C4077) *
                   C93718) *
                  C93639 * C93625 * C97 -
              ((C2785 * C4077 + C2786 * C4085 + C2787 * C4076 + C2788 * C4083 +
                C2789 * C4075 + C2790 * C4081) *
                   C93718 +
               (C223 * C4077 + C222 * C4085 + C221 * C4076 + C220 * C4083 +
                C219 * C4075 + C218 * C4081) *
                   C93829) *
                  C93639 * C93625 * C98 +
              ((C220 * C4081 + C221 * C4075 + C222 * C4083 + C223 * C4076 +
                C225 * C4085 + C224 * C4077) *
                   C93829 +
               (C2788 * C4081 + C2787 * C4075 + C2786 * C4083 + C2785 * C4076 +
                (C188 * C2697 + C93680 * C2770) * C4085 +
                (C188 * C2698 + C93680 * C2771) * C4077) *
                   C93718) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C188 * C108 + C93680 * C189) * C4081 +
                (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
                C219 * C4076 + C220 * C4085 + C221 * C4077) *
                   C93829 +
               ((C188 * C1388 + C93680 * C1470) * C4081 +
                (C188 * C1396 + C93680 * C1478) * C4075 + C2790 * C4083 +
                C2789 * C4076 + C2788 * C4085 + C2787 * C4077) *
                   C93718) *
                  C93639 * C800 -
              (((C188 * C3415 + C93680 * C3497) * C4077 +
                (C188 * C3411 + C93680 * C3493) * C4085 +
                (C188 * C3414 + C93680 * C3496) * C4076 +
                (C188 * C3410 + C93680 * C3492) * C4083 +
                (C188 * C3413 + C93680 * C3495) * C4075 +
                (C188 * C3409 + C93680 * C3491) * C4081) *
                   C93718 +
               (C2073 * C4077 + C2074 * C4085 + C2075 * C4076 + C2076 * C4083 +
                (C188 * C815 + C93680 * C897) * C4075 +
                (C188 * C807 + C93680 * C889) * C4081) *
                   C93829) *
                  C93639 * C801 +
              (((C188 * C808 + C93680 * C890) * C4081 +
                (C188 * C816 + C93680 * C898) * C4075 +
                (C188 * C809 + C93680 * C891) * C4083 +
                (C188 * C817 + C93680 * C899) * C4076 +
                (C188 * C810 + C93680 * C892) * C4085 +
                (C188 * C818 + C93680 * C900) * C4077) *
                   C93829 +
               ((C188 * C8520 + C93680 * C8645) * C4081 +
                (C188 * C8523 + C93680 * C8648) * C4075 +
                (C188 * C8521 + C93680 * C8646) * C4083 +
                (C188 * C8524 + C93680 * C8649) * C4076 +
                (C188 * C8522 + C93680 * C8647) * C4085 +
                (C188 * C8525 + C93680 * C8650) * C4077) *
                   C93718) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C4081 +
            (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
            C219 * C4076 + C220 * C4085 + C221 * C4077) *
               C93829 +
           (C11115 + C11116 + C11091 + C11092 + C11093 + C11094) * C93718) *
              C1382 -
          ((C11117 + C11118 + C11119 + C11120 + C11121 + C11122) * C93718 +
           (C11094 + C11093 + C11092 + C11091 + C11116 + C11115) * C93829) *
              C1383 +
          ((C11122 + C11121 + C11120 + C11119 + C11118 + C11117) * C93829 +
           ((C188 * C10964 + C93680 * C11080) * C4081 +
            (C188 * C10967 + C93680 * C11083) * C4075 +
            (C188 * C10965 + C93680 * C11081) * C4083 +
            (C188 * C10968 + C93680 * C11084) * C4076 +
            (C188 * C10966 + C93680 * C11082) * C4085 +
            (C188 * C10969 + C93680 * C11085) * C4077) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C20049 +
            (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
             C14840 * C816 + C14741 * C898) *
                C93585) *
               C93829 +
           ((C14838 * C1388 + C14739 * C1470 + C14839 * C3409 + C14740 * C3491 +
             C14840 * C8520 + C14741 * C8645) *
                C20049 +
            (C14838 * C1396 + C14739 * C1478 + C14839 * C3413 + C14740 * C3495 +
             C14840 * C8523 + C14741 * C8648) *
                C93585) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C18256 + C18257 + C18258) * C93585 +
            (C18259 + C18260 + C18261) * C20049) *
               C93718 +
           ((C14871 + C14870 + C14869) * C93585 +
            (C14868 + C14867 + C14866) * C20049) *
               C93829) *
              C93639 * C93625 * C98 +
          (((C14877 + C14876 + C14875) * C20049 +
            (C14874 + C14873 + C14872) * C93585) *
               C93829 +
           ((C14838 * C1386 + C14739 * C1468 + C14839 * C3411 + C14740 * C3493 +
             C14840 * C8522 + C14741 * C8647) *
                C20049 +
            (C14838 * C1394 + C14739 * C1476 + C14839 * C3415 + C14740 * C3497 +
             C14840 * C8525 + C14741 * C8650) *
                C93585) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C20049 +
            (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
             C14840 * C816 + C14741 * C898) *
                C93585) *
               C93829 +
           ((C14838 * C1388 + C14739 * C1470 + C14839 * C3409 + C14740 * C3491 +
             C14840 * C8520 + C14741 * C8645) *
                C20049 +
            (C14838 * C1396 + C14739 * C1478 + C14839 * C3413 + C14740 * C3495 +
             C14840 * C8523 + C14741 * C8648) *
                C93585) *
               C93718) *
              C93639 * C800 -
          (((C14840 * C19097 + C14741 * C19223 + C14839 * C8523 +
             C14740 * C8648 + C14838 * C3413 + C14739 * C3495) *
                C93585 +
            (C14840 * C19095 + C14741 * C19221 + C14839 * C8520 +
             C14740 * C8645 + C14838 * C3409 + C14739 * C3491) *
                C20049) *
               C93718 +
           ((C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
             C14838 * C815 + C14739 * C897) *
                C93585 +
            (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
             C14838 * C807 + C14739 * C889) *
                C20049) *
               C93829) *
              C93639 * C801 +
          (((C14838 * C808 + C14739 * C890 + C14839 * C4897 + C14740 * C5016 +
             C14840 * C15550 + C14741 * C15666) *
                C20049 +
            (C14838 * C816 + C14739 * C898 + C14839 * C4900 + C14740 * C5019 +
             C14840 * C15552 + C14741 * C15668) *
                C93585) *
               C93829 +
           ((C14838 * C8520 + C14739 * C8645 + C14839 * C19095 +
             C14740 * C19221 + C14840 * C22854 + C14741 * C22942) *
                C20049 +
            (C14838 * C8523 + C14739 * C8648 + C14839 * C19097 +
             C14740 * C19223 + C14840 * C22855 + C14741 * C22943) *
                C93585) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C20049 +
            (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
             C14840 * C816 + C14741 * C898) *
                C93585) *
               C93829 +
           ((C25133 + C25134 + C25135) * C20049 +
            (C25136 + C25137 + C25138) * C93585) *
               C93718) *
              C1382 -
          (((C25139 + C25140 + C25141) * C93585 +
            (C25142 + C25143 + C25144) * C20049) *
               C93718 +
           ((C25138 + C25137 + C25136) * C93585 +
            (C25135 + C25134 + C25133) * C20049) *
               C93829) *
              C1383 +
          (((C25144 + C25143 + C25142) * C20049 +
            (C25141 + C25140 + C25139) * C93585) *
               C93829 +
           ((C14838 * C10964 + C14739 * C11080 + C14839 * C25001 +
             C14740 * C25104 + C14840 * C25002 + C14741 * C25105) *
                C20049 +
            (C14838 * C10967 + C14739 * C11083 + C14839 * C25003 +
             C14740 * C25106 + C14840 * C25004 + C14741 * C25107) *
                C93585) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C188 * C108 + C93680 * C189) * C20049 +
                                (C188 * C114 + C93680 * C195) * C93585) *
                                   C39039 +
                               (C11107 * C20049 + C11108 * C93585) * C39040 +
                               (C11114 * C20049 + C11113 * C93585) * C39041 +
                               (C30328 * C20049 + C30327 * C93585) * C39042) *
                                  C93639 * C93625 * C97 -
                              ((C30325 * C93585 + C30326 * C20049) * C39042 +
                               (C11111 * C93585 + C11112 * C20049) * C39041 +
                               (C2789 * C93585 + C2790 * C20049) * C39040 +
                               (C219 * C93585 + C218 * C20049) * C39039) *
                                  C93639 * C93625 * C98 +
                              ((C220 * C20049 + C221 * C93585) * C39039 +
                               (C2788 * C20049 + C2787 * C93585) * C39040 +
                               (C11110 * C20049 + C11109 * C93585) * C39041 +
                               ((C188 * C10966 + C93680 * C11082) * C20049 +
                                (C188 * C10969 + C93680 * C11085) * C93585) *
                                   C39042) *
                                  C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C20049 +
            (C188 * C114 + C93680 * C195) * C93585) *
               C39039 +
           (C11107 * C20049 + C11108 * C93585) * C39040 +
           (C11114 * C20049 + C11113 * C93585) * C39041 +
           (C30328 * C20049 + C30327 * C93585) * C39042) *
              C93639 * C800 -
          (((C188 * C25003 + C93680 * C25106) * C93585 +
            (C188 * C25001 + C93680 * C25104) * C20049) *
               C39042 +
           (C33142 * C93585 + C33141 * C20049) * C39041 +
           (C13955 * C93585 + C13954 * C20049) * C39040 +
           ((C188 * C815 + C93680 * C897) * C93585 +
            (C188 * C807 + C93680 * C889) * C20049) *
               C39039) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C20049 +
            (C188 * C816 + C93680 * C898) * C93585) *
               C39039 +
           ((C188 * C8520 + C93680 * C8645) * C20049 +
            (C188 * C8523 + C93680 * C8648) * C93585) *
               C39040 +
           ((C188 * C16395 + C93680 * C16487) * C20049 +
            (C188 * C16397 + C93680 * C16489) * C93585) *
               C39041 +
           ((C188 * C25002 + C93680 * C25105) * C20049 +
            (C188 * C25004 + C93680 * C25107) * C93585) *
               C39042) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C20049 +
            (C188 * C114 + C93680 * C195) * C93585) *
               C39039 +
           (C40035 + C40036) * C39040 + C40045 * C39041 + C40046 * C39042) *
              C1382 -
          ((C40049 + C40050) * C39042 + (C40040 + C40039) * C39041 +
           (C40038 + C40037) * C39040 + (C40036 + C40035) * C39039) *
              C1383 +
          (C40045 * C39039 + C40046 * C39040 + (C40050 + C40049) * C39041 +
           ((C188 * C39973 + C93680 * C40032) * C20049 +
            (C188 * C39974 + C93680 * C40033) * C93585) *
               C39042) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                   C4081 +
               (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                   C4075 +
               (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 +
               C9683 * C4085 + C9684 * C4077) *
                  C93680 * C93639 * C93625 * C97 -
              ((C9679 + C9680) * C4077 + (C9681 + C9682) * C4085 +
               (C9678 + C9677) * C4076 + (C9676 + C9675) * C4083 +
               (C9674 + C9673) * C4075 + (C9672 + C9671) * C4081) *
                  C93680 * C93639 * C93625 * C98 +
              (C9683 * C4081 + C9684 * C4075 + (C9682 + C9681) * C4083 +
               (C9680 + C9679) * C4076 +
               (C9644 * C112 + C93829 * C280 + C9645 * C2697 + C93718 * C2856) *
                   C4085 +
               (C9644 * C118 + C93829 * C286 + C9645 * C2698 + C93718 * C2857) *
                   C4077) *
                  C93680 * C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                   C4081 +
               (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                   C4075 +
               (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 +
               C9683 * C4085 + C9684 * C4077) *
                  C93680 * C93639 * C800 -
              ((C9645 * C3415 + C93718 * C3571 + C9644 * C813 + C93829 * C961) *
                   C4077 +
               (C9645 * C3411 + C93718 * C3567 + C9644 * C805 + C93829 * C953) *
                   C4085 +
               (C9645 * C3414 + C93718 * C3570 + C9644 * C814 + C93829 * C962) *
                   C4076 +
               (C9645 * C3410 + C93718 * C3566 + C9644 * C806 + C93829 * C954) *
                   C4083 +
               (C9645 * C3413 + C93718 * C3569 + C9644 * C815 + C93829 * C963) *
                   C4075 +
               (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
                   C4081) *
                  C93680 * C93639 * C801 +
              ((C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
                   C4081 +
               (C9644 * C816 + C93829 * C964 + C9645 * C8523 + C93718 * C8752) *
                   C4075 +
               (C9644 * C809 + C93829 * C957 + C9645 * C8521 + C93718 * C8750) *
                   C4083 +
               (C9644 * C817 + C93829 * C965 + C9645 * C8524 + C93718 * C8753) *
                   C4076 +
               (C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
                   C4085 +
               (C9644 * C818 + C93829 * C966 + C9645 * C8525 + C93718 * C8754) *
                   C4077) *
                  C93680 * C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C4081 +
           (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
               C4075 +
           (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
           C9684 * C4077) *
              C93680 * C1382 -
          ((C9645 * C1399 + C93718 * C1547 + C9644 * C1394 + C93829 * C1542) *
               C4077 +
           (C9645 * C1391 + C93718 * C1539 + C9644 * C1386 + C93829 * C1534) *
               C4085 +
           (C9645 * C1398 + C93718 * C1546 + C9644 * C1395 + C93829 * C1543) *
               C4076 +
           (C9645 * C1390 + C93718 * C1538 + C9644 * C1387 + C93829 * C1535) *
               C4083 +
           (C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
               C4075 +
           (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
               C4081) *
              C93680 * C1383 +
          ((C9644 * C1389 + C93829 * C1537 + C9645 * C10964 + C93718 * C11196) *
               C4081 +
           (C9644 * C1397 + C93829 * C1545 + C9645 * C10967 + C93718 * C11199) *
               C4075 +
           (C9644 * C1390 + C93829 * C1538 + C9645 * C10965 + C93718 * C11197) *
               C4083 +
           (C9644 * C1398 + C93829 * C1546 + C9645 * C10968 + C93718 * C11200) *
               C4076 +
           (C9644 * C1391 + C93829 * C1539 + C9645 * C10966 + C93718 * C11198) *
               C4085 +
           (C9644 * C1399 + C93829 * C1547 + C9645 * C10969 + C93718 * C11201) *
               C4077) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C20049 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C93585) *
               C14739 +
           ((C9644 * C807 + C93829 * C955 + C9645 * C3409 + C93718 * C3565) *
                C20049 +
            (C9644 * C815 + C93829 * C963 + C9645 * C3413 + C93718 * C3569) *
                C93585) *
               C14740 +
           ((C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
                C20049 +
            (C9644 * C816 + C93829 * C964 + C9645 * C8523 + C93718 * C8752) *
                C93585) *
               C14741) *
              C93639 * C93625 * C97 -
          (((C9645 * C8524 + C93718 * C8753 + C9644 * C817 + C93829 * C965) *
                C93585 +
            (C9645 * C8521 + C93718 * C8750 + C9644 * C809 + C93829 * C957) *
                C20049) *
               C14741 +
           ((C12098 + C12099) * C93585 + (C12100 + C12101) * C20049) * C14740 +
           ((C9674 + C9673) * C93585 + (C9672 + C9671) * C20049) * C14739) *
              C93639 * C93625 * C98 +
          ((C9683 * C20049 + C9684 * C93585) * C14739 +
           ((C12097 + C12096) * C20049 + (C12095 + C12094) * C93585) * C14740 +
           ((C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
                C20049 +
            (C9644 * C818 + C93829 * C966 + C9645 * C8525 + C93718 * C8754) *
                C93585) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C20049 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C93585) *
               C14739 +
           ((C24395 + C24396) * C20049 + (C24397 + C24398) * C93585) * C14740 +
           C24411 * C14741) *
              C93639 * C800 -
          (((C24403 + C24404) * C93585 + (C24405 + C24406) * C20049) * C14741 +
           ((C24402 + C24401) * C93585 + (C24400 + C24399) * C20049) * C14740 +
           ((C24398 + C24397) * C93585 + (C24396 + C24395) * C20049) * C14739) *
              C93639 * C801 +
          (C24411 * C14739 +
           ((C24406 + C24405) * C20049 + (C24404 + C24403) * C93585) * C14740 +
           ((C9644 * C15550 + C93829 * C15744 + C9645 * C22854 +
             C93718 * C23010) *
                C20049 +
            (C9644 * C15552 + C93829 * C15746 + C9645 * C22855 +
             C93718 * C23011) *
                C93585) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C20049 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C93585) *
               C14739 +
           ((C24395 + C24396) * C20049 + (C24397 + C24398) * C93585) * C14740 +
           C24411 * C14741) *
              C1382 -
          (((C9645 * C16397 + C93718 * C16567 + C9644 * C8523 +
             C93829 * C8752) *
                C93585 +
            (C9645 * C16395 + C93718 * C16565 + C9644 * C8520 +
             C93829 * C8749) *
                C20049) *
               C14741 +
           ((C9645 * C5778 + C93718 * C5953 + C9644 * C3413 + C93829 * C3569) *
                C93585 +
            (C9645 * C5775 + C93718 * C5950 + C9644 * C3409 + C93829 * C3565) *
                C20049) *
               C14740 +
           ((C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                C93585 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C20049) *
               C14739) *
              C1383 +
          (((C9644 * C1389 + C93829 * C1537 + C9645 * C10964 +
             C93718 * C11196) *
                C20049 +
            (C9644 * C1397 + C93829 * C1545 + C9645 * C10967 +
             C93718 * C11199) *
                C93585) *
               C14739 +
           ((C9644 * C5775 + C93829 * C5950 + C9645 * C25001 +
             C93718 * C25218) *
                C20049 +
            (C9644 * C5778 + C93829 * C5953 + C9645 * C25003 +
             C93718 * C25220) *
                C93585) *
               C14740 +
           ((C9644 * C16395 + C93829 * C16565 + C9645 * C25002 +
             C93718 * C25219) *
                C20049 +
            (C9644 * C16397 + C93829 * C16567 + C9645 * C25004 +
             C93718 * C25221) *
                C93585) *
               C14741) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
            C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
            C39042 * C11196) *
               C20049 +
           (C39144 * C114 + C39039 * C282 + C39145 * C1396 + C39040 * C1544 +
            C39146 * C1397 + C39041 * C1545 + C39147 * C10967 +
            C39042 * C11199) *
               C93585) *
              C93680 * C93639 * C93625 * C97 -
          ((C39147 * C10968 + C39042 * C11200 + C39146 * C1398 +
            C39041 * C1546 + C39145 * C1395 + C39040 * C1543 + C39144 * C115 +
            C39039 * C283) *
               C93585 +
           (C39147 * C10965 + C39042 * C11197 + C39146 * C1390 +
            C39041 * C1538 + C39145 * C1387 + C39040 * C1535 + C39144 * C109 +
            C39039 * C277) *
               C20049) *
              C93680 * C93639 * C93625 * C98 +
          ((C39144 * C110 + C39039 * C278 + C39145 * C1386 + C39040 * C1534 +
            C39146 * C1391 + C39041 * C1539 + C39147 * C10966 +
            C39042 * C11198) *
               C20049 +
           (C39144 * C116 + C39039 * C284 + C39145 * C1394 + C39040 * C1542 +
            C39146 * C1399 + C39041 * C1547 + C39147 * C10969 +
            C39042 * C11201) *
               C93585) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
            C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
            C39042 * C11196) *
               C20049 +
           (C39144 * C114 + C39039 * C282 + C39145 * C1396 + C39040 * C1544 +
            C39146 * C1397 + C39041 * C1545 + C39147 * C10967 +
            C39042 * C11199) *
               C93585) *
              C93680 * C93639 * C800 -
          ((C39147 * C25003 + C39042 * C25220 + C39146 * C5778 +
            C39041 * C5953 + C39145 * C3413 + C39040 * C3569 + C39144 * C815 +
            C39039 * C963) *
               C93585 +
           (C39147 * C25001 + C39042 * C25218 + C39146 * C5775 +
            C39041 * C5950 + C39145 * C3409 + C39040 * C3565 + C39144 * C807 +
            C39039 * C955) *
               C20049) *
              C93680 * C93639 * C801 +
          ((C39144 * C808 + C39039 * C956 + C39145 * C8520 + C39040 * C8749 +
            C39146 * C16395 + C39041 * C16565 + C39147 * C25002 +
            C39042 * C25219) *
               C20049 +
           (C39144 * C816 + C39039 * C964 + C39145 * C8523 + C39040 * C8752 +
            C39146 * C16397 + C39041 * C16567 + C39147 * C25004 +
            C39042 * C25221) *
               C93585) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
            C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
            C39042 * C11196) *
               C20049 +
           (C39144 * C114 + C39039 * C282 + C39145 * C1396 + C39040 * C1544 +
            C39146 * C1397 + C39041 * C1545 + C39147 * C10967 +
            C39042 * C11199) *
               C93585) *
              C93680 * C1382 -
          ((C39147 * C30190 + C39042 * C30410 + C39146 * C10967 +
            C39041 * C11199 + C39145 * C1397 + C39040 * C1545 + C39144 * C1396 +
            C39039 * C1544) *
               C93585 +
           (C39147 * C30188 + C39042 * C30408 + C39146 * C10964 +
            C39041 * C11196 + C39145 * C1389 + C39040 * C1537 + C39144 * C1388 +
            C39039 * C1536) *
               C20049) *
              C93680 * C1383 +
          ((C39144 * C1389 + C39039 * C1537 + C39145 * C10964 +
            C39040 * C11196 + C39146 * C30188 + C39041 * C30408 +
            C39147 * C39973 + C39042 * C40100) *
               C20049 +
           (C39144 * C1397 + C39039 * C1545 + C39145 * C10967 +
            C39040 * C11199 + C39146 * C30190 + C39041 * C30410 +
            C39147 * C39974 + C39042 * C40101) *
               C93585) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
                 C4085 * C110 + C4077 * C116) *
                    C188 +
                (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
                 C4085 * C191 + C4077 * C364) *
                    C93680) *
                   C93829 +
               ((C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
                 C4085 * C1386 + C4077 * C1394) *
                    C188 +
                (C4081 * C1470 + C4075 * C1602 + C4083 * C1469 + C4076 * C1601 +
                 C4085 * C1468 + C4077 * C1600) *
                    C93680) *
                   C93718) *
                  C93639 * C93625 * C97 -
              (((C4085 * C1467 + C4077 * C1599 + C4083 * C1468 + C4076 * C1600 +
                 C4081 * C1469 + C4075 * C1601) *
                    C93680 +
                (C4085 * C1385 + C4077 * C1393 + C4083 * C1386 + C4076 * C1394 +
                 C4081 * C1387 + C4075 * C1395) *
                    C188) *
                   C93718 +
               ((C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
                 C4081 * C190 + C4075 * C363) *
                    C93680 +
                (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
                 C4081 * C109 + C4075 * C115) *
                    C188) *
                   C93829) *
                  C93639 * C93625 * C98 +
              (((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
                 C4085 * C112 + C4077 * C118) *
                    C188 +
                (C4081 * C191 + C4075 * C364 + C4083 * C192 + C4076 * C365 +
                 C4085 * C193 + C4077 * C366) *
                    C93680) *
                   C93829 +
               ((C4081 * C1386 + C4075 * C1394 + C4083 * C1385 + C4076 * C1393 +
                 C4085 * C2697 + C4077 * C2698) *
                    C188 +
                (C4081 * C1468 + C4075 * C1600 + C4083 * C1467 + C4076 * C1599 +
                 C4085 * C2770 + C4077 * C2942) *
                    C93680) *
                   C93718) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
                 C4085 * C110 + C4077 * C116) *
                    C188 +
                (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
                 C4085 * C191 + C4077 * C364) *
                    C93680) *
                   C93829 +
               ((C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
                 C4085 * C1386 + C4077 * C1394) *
                    C188 +
                (C4081 * C1470 + C4075 * C1602 + C4083 * C1469 + C4076 * C1601 +
                 C4085 * C1468 + C4077 * C1600) *
                    C93680) *
                   C93718) *
                  C93639 * C800 -
              (((C8881 + C8882 + C8883) * C93680 +
                (C8884 + C8885 + C8886) * C188) *
                   C93718 +
               ((C5245 + C5244 + C5243) * C93680 +
                (C5242 + C5241 + C5240) * C188) *
                   C93829) *
                  C93639 * C801 +
              (((C5251 + C5250 + C5249) * C188 +
                (C5248 + C5247 + C5246) * C93680) *
                   C93829 +
               ((C4081 * C8520 + C4075 * C8523 + C4083 * C8521 + C4076 * C8524 +
                 C4085 * C8522 + C4077 * C8525) *
                    C188 +
                (C4081 * C8645 + C4075 * C8865 + C4083 * C8646 + C4076 * C8866 +
                 C4085 * C8647 + C4077 * C8867) *
                    C93680) *
                   C93718) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C188 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93680) *
               C93829 +
           ((C11304 + C11305 + C11306) * C188 +
            (C11307 + C11308 + C11309) * C93680) *
               C93718) *
              C1382 -
          (((C11310 + C11311 + C11312) * C93680 +
            (C11313 + C11314 + C11315) * C188) *
               C93718 +
           ((C11309 + C11308 + C11307) * C93680 +
            (C11306 + C11305 + C11304) * C188) *
               C93829) *
              C1383 +
          (((C11315 + C11314 + C11313) * C188 +
            (C11312 + C11311 + C11310) * C93680) *
               C93829 +
           ((C4081 * C10964 + C4075 * C10967 + C4083 * C10965 + C4076 * C10968 +
             C4085 * C10966 + C4077 * C10969) *
                C188 +
            (C4081 * C11080 + C4075 * C11276 + C4083 * C11081 + C4076 * C11277 +
             C4085 * C11082 + C4077 * C11278) *
                C93680) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C14838 +
            (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
            C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
               C93829 +
           ((C20049 * C1388 + C93585 * C1396) * C14838 +
            (C20049 * C1470 + C93585 * C1602) * C14739 + C23109 * C14839 +
            C23108 * C14740 + C23107 * C14840 + C23106 * C14741) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C20049 * C8646 + C93585 * C8866) * C14741 +
            (C20049 * C8521 + C93585 * C8524) * C14840 +
            (C20049 * C3492 + C93585 * C3640) * C14740 +
            (C20049 * C3410 + C93585 * C3414) * C14839 +
            (C20049 * C1469 + C93585 * C1601) * C14739 +
            (C20049 * C1387 + C93585 * C1395) * C14838) *
               C93718 +
           (C21835 * C14741 + C21834 * C14840 + C21833 * C14740 +
            C21832 * C14839 + (C20049 * C190 + C93585 * C363) * C14739 +
            (C20049 * C109 + C93585 * C115) * C14838) *
               C93829) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C14838 +
            (C20049 * C191 + C93585 * C364) * C14739 +
            (C20049 * C805 + C93585 * C813) * C14839 +
            (C20049 * C887 + C93585 * C1019) * C14740 +
            (C20049 * C810 + C93585 * C818) * C14840 +
            (C20049 * C892 + C93585 * C1024) * C14741) *
               C93829 +
           ((C20049 * C1386 + C93585 * C1394) * C14838 +
            (C20049 * C1468 + C93585 * C1600) * C14739 +
            (C20049 * C3411 + C93585 * C3415) * C14839 +
            (C20049 * C3493 + C93585 * C3641) * C14740 +
            (C20049 * C8522 + C93585 * C8525) * C14840 +
            (C20049 * C8647 + C93585 * C8867) * C14741) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C14838 +
            (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
            C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
               C93829 +
           ((C20049 * C1388 + C93585 * C1396) * C14838 +
            (C20049 * C1470 + C93585 * C1602) * C14739 + C23109 * C14839 +
            C23108 * C14740 + C23107 * C14840 + C23106 * C14741) *
               C93718) *
              C93639 * C800 -
          ((C23104 * C14741 + C23105 * C14840 + C23106 * C14740 +
            C23107 * C14839 + C23108 * C14739 + C23109 * C14838) *
               C93718 +
           (C20754 * C14741 + C20753 * C14840 + C20752 * C14740 +
            C20751 * C14839 + C20750 * C14739 + C20749 * C14838) *
               C93829) *
              C93639 * C801 +
          ((C20751 * C14838 + C20752 * C14739 + C20753 * C14839 +
            C20754 * C14740 + C20756 * C14840 + C20755 * C14741) *
               C93829 +
           (C23107 * C14838 + C23106 * C14739 + C23105 * C14839 +
            C23104 * C14740 + (C20049 * C22854 + C93585 * C22855) * C14840 +
            (C20049 * C22942 + C93585 * C23090) * C14741) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C14838 +
            (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
            C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
               C93829 +
           (C25327 + C25328 + C25303 + C25304 + C25305 + C25306) * C93718) *
              C1382 -
          ((C25329 + C25330 + C25331 + C25332 + C25333 + C25334) * C93718 +
           (C25306 + C25305 + C25304 + C25303 + C25328 + C25327) * C93829) *
              C1383 +
          ((C25334 + C25333 + C25332 + C25331 + C25330 + C25329) * C93829 +
           ((C20049 * C10964 + C93585 * C10967) * C14838 +
            (C20049 * C11080 + C93585 * C11276) * C14739 +
            (C20049 * C25001 + C93585 * C25003) * C14839 +
            (C20049 * C25104 + C93585 * C25296) * C14740 +
            (C20049 * C25002 + C93585 * C25004) * C14840 +
            (C20049 * C25105 + C93585 * C25297) * C14741) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C20049 * C108 + C93585 * C114) * C188 +
                                (C20049 * C189 + C93585 * C362) * C93680) *
                                   C39039 +
                               (C25319 * C188 + C25320 * C93680) * C39040 +
                               (C25326 * C188 + C25325 * C93680) * C39041 +
                               (C35699 * C188 + C35698 * C93680) * C39042) *
                                  C93639 * C93625 * C97 -
                              (((C20049 * C11081 + C93585 * C11277) * C93680 +
                                (C20049 * C10965 + C93585 * C10968) * C188) *
                                   C39042 +
                               (C37474 * C93680 + C37473 * C188) * C39041 +
                               (C27145 * C93680 + C27144 * C188) * C39040 +
                               ((C20049 * C190 + C93585 * C363) * C93680 +
                                (C20049 * C109 + C93585 * C115) * C188) *
                                   C39039) *
                                  C93639 * C93625 * C98 +
                              (((C20049 * C110 + C93585 * C116) * C188 +
                                (C20049 * C191 + C93585 * C364) * C93680) *
                                   C39039 +
                               ((C20049 * C1386 + C93585 * C1394) * C188 +
                                (C20049 * C1468 + C93585 * C1600) * C93680) *
                                   C39040 +
                               ((C20049 * C1391 + C93585 * C1399) * C188 +
                                (C20049 * C1473 + C93585 * C1605) * C93680) *
                                   C39041 +
                               ((C20049 * C10966 + C93585 * C10969) * C188 +
                                (C20049 * C11082 + C93585 * C11278) * C93680) *
                                   C39042) *
                                  C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C188 +
            (C20049 * C189 + C93585 * C362) * C93680) *
               C39039 +
           (C25319 * C188 + C25320 * C93680) * C39040 +
           (C25326 * C188 + C25325 * C93680) * C39041 +
           (C35699 * C188 + C35698 * C93680) * C39042) *
              C93639 * C800 -
          ((C35696 * C93680 + C35697 * C188) * C39042 +
           (C25323 * C93680 + C25324 * C188) * C39041 +
           (C23108 * C93680 + C23109 * C188) * C39040 +
           (C20750 * C93680 + C20749 * C188) * C39039) *
              C93639 * C801 +
          ((C20751 * C188 + C20752 * C93680) * C39039 +
           (C23107 * C188 + C23106 * C93680) * C39040 +
           (C25322 * C188 + C25321 * C93680) * C39041 +
           ((C20049 * C25002 + C93585 * C25004) * C188 +
            (C20049 * C25105 + C93585 * C25297) * C93680) *
               C39042) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C188 +
            (C20049 * C189 + C93585 * C362) * C93680) *
               C39039 +
           (C40154 + C40155) * C39040 + C40164 * C39041 + C40165 * C39042) *
              C1382 -
          ((C40168 + C40169) * C39042 + (C40159 + C40158) * C39041 +
           (C40157 + C40156) * C39040 + (C40155 + C40154) * C39039) *
              C1383 +
          (C40164 * C39039 + C40165 * C39040 + (C40169 + C40168) * C39041 +
           ((C20049 * C39973 + C93585 * C39974) * C188 +
            (C20049 * C40032 + C93585 * C40152) * C93680) *
               C39042) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 +
                C448 * C4076 + C449 * C4077) *
                   C93829 +
               ((C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C4075 +
                C3026 * C4076 + C3025 * C4077) *
                   C93718) *
                  C93639 * C93625 * C97 -
              ((C3024 * C4077 + C3025 * C4076 + C3026 * C4075) * C93718 +
               (C450 * C4077 + C449 * C4076 + C448 * C4075) * C93829) *
                  C93639 * C93625 * C98 +
              ((C449 * C4075 + C450 * C4076 + C451 * C4077) * C93829 +
               (C3025 * C4075 + C3024 * C4076 +
                (C418 * C2697 + C3017 + C3017 + C93680 * C3009) * C4077) *
                   C93718) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 +
                C448 * C4076 + C449 * C4077) *
                   C93829 +
               ((C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C4075 +
                C3026 * C4076 + C3025 * C4077) *
                   C93718) *
                  C93639 * C800 -
              (((C418 * C3411 + C3716 + C3716 + C93680 * C3711) * C4077 +
                (C418 * C3410 + C3715 + C3715 + C93680 * C3710) * C4076 +
                (C418 * C3409 + C3714 + C3714 + C93680 * C3709) * C4075) *
                   C93718 +
               (C2311 * C4077 + C2312 * C4076 +
                (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C4075) *
                   C93829) *
                  C93639 * C801 +
              (((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C4075 +
                (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C4076 +
                (C418 * C810 + C1091 + C1091 + C93680 * C1082) * C4077) *
                   C93829 +
               ((C418 * C8520 + C10580 + C10580 + C93680 * C8984) * C4075 +
                (C418 * C8521 + C10581 + C10581 + C93680 * C8985) * C4076 +
                (C418 * C8522 + C10582 + C10582 + C93680 * C8986) * C4077) *
                   C93718) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 + C448 * C4076 +
            C449 * C4077) *
               C93829 +
           (C11418 + C11395 + C11396) * C93718) *
              C1382 -
          ((C11419 + C11420 + C11421) * C93718 +
           (C11396 + C11395 + C11418) * C93829) *
              C1383 +
          ((C11421 + C11420 + C11419) * C93829 +
           ((C418 * C10964 + C11403 + C11403 + C93680 * C11389) * C4075 +
            (C418 * C10965 + C11404 + C11404 + C93680 * C11390) * C4076 +
            (C418 * C10966 + C11405 + C11405 + C93680 * C11391) * C4077) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93585 * C93829 +
           (C15099 * C1388 + C16727 + C16727 + C14739 * C1660 + C15100 * C3409 +
            C16726 + C16726 + C14740 * C3709 + C15101 * C8520 + C16725 +
            C16725 + C14741 * C8984) *
               C93585 * C93718) *
              C93639 * C93625 * C97 -
          ((C18577 + C18578 + C18579) * C93585 * C93718 +
           (C15141 + C15140 + C15139) * C93585 * C93829) *
              C93639 * C93625 * C98 +
          ((C15144 + C15143 + C15142) * C93585 * C93829 +
           (C15099 * C1386 + C18568 + C18568 + C14739 * C1658 + C15100 * C3411 +
            C18569 + C18569 + C14740 * C3711 + C15101 * C8522 + C18570 +
            C18570 + C14741 * C8986) *
               C93585 * C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93585 * C93829 +
           (C15099 * C1388 + C16727 + C16727 + C14739 * C1660 + C15100 * C3409 +
            C16726 + C16726 + C14740 * C3709 + C15101 * C8520 + C16725 +
            C16725 + C14741 * C8984) *
               C93585 * C93718) *
              C93639 * C800 -
          ((C15101 * C19095 + C19568 + C19568 + C14741 * C19563 +
            C15100 * C8520 + C19567 + C19567 + C14740 * C8984 + C15099 * C3409 +
            C19566 + C19566 + C14739 * C3709) *
               C93585 * C93718 +
           (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 + C15100 * C808 +
            C15970 + C15970 + C14740 * C1080 + C15099 * C807 + C15971 + C15971 +
            C14739 * C1079) *
               C93585 * C93829) *
              C93639 * C801 +
          ((C15099 * C808 + C15972 + C15972 + C14739 * C1080 + C15100 * C4897 +
            C15973 + C15973 + C14740 * C5325 + C15101 * C15550 + C15974 +
            C15974 + C14741 * C15963) *
               C93585 * C93829 +
           (C15099 * C8520 + C24560 + C24560 + C14739 * C8984 +
            C15100 * C19095 + C24561 + C24561 + C14740 * C19563 +
            C15101 * C22854 + C24562 + C24562 + C14741 * C23175) *
               C93585 * C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93585 * C93829 +
           (C25438 + C25439 + C25440) * C93585 * C93718) *
              C1382 -
          ((C25441 + C25442 + C25443) * C93585 * C93718 +
           (C25440 + C25439 + C25438) * C93585 * C93829) *
              C1383 +
          ((C25443 + C25442 + C25441) * C93585 * C93829 +
           (C15099 * C10964 + C25423 + C25423 + C14739 * C11389 +
            C15100 * C25001 + C25424 + C25424 + C14740 * C25408 +
            C15101 * C25002 + C25425 + C25425 + C14741 * C25409) *
               C93585 * C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C93680 * C419) * C93585 * C39039 +
           C11414 * C93585 * C39040 + C11417 * C93585 * C39041 +
           C30622 * C93585 * C39042) *
              C93639 * C93625 * C97 -
          (C30621 * C93585 * C39042 + C11416 * C93585 * C39041 +
           C3026 * C93585 * C39040 + C448 * C93585 * C39039) *
              C93639 * C93625 * C98 +
          (C449 * C93585 * C39039 + C3025 * C93585 * C39040 +
           C11415 * C93585 * C39041 +
           (C418 * C10966 + C11405 + C11405 + C93680 * C11391) * C93585 *
               C39042) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C93680 * C419) * C93585 * C39039 +
           C11414 * C93585 * C39040 + C11417 * C93585 * C39041 +
           C30622 * C93585 * C39042) *
              C93639 * C800 -
          ((C418 * C25001 + C33460 + C33460 + C93680 * C25408) * C93585 *
               C39042 +
           C33464 * C93585 * C39041 + C14261 * C93585 * C39040 +
           (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C93585 * C39039) *
              C93639 * C801 +
          ((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C93585 * C39039 +
           (C418 * C8520 + C10580 + C10580 + C93680 * C8984) * C93585 * C39040 +
           (C418 * C16395 + C29805 + C29805 + C93680 * C16719) * C93585 *
               C39041 +
           (C418 * C25002 + C39715 + C39715 + C93680 * C25409) * C93585 *
               C39042) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C93680 * C419) * C93585 * C39039 +
           C40221 * C39040 + C40222 * C39041 + C40223 * C39042) *
              C1382 -
          (C40230 * C39042 + C40223 * C39041 + C40222 * C39040 +
           C40221 * C39039) *
              C1383 +
          (C40222 * C39039 + C40223 * C39040 + C40230 * C39041 +
           (C418 * C39973 + C40226 + C40226 + C93680 * C40219) * C93585 *
               C39042) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 +
                 C93718 * C1536) *
                    C188 +
                (C9644 * C189 + C93829 * C501 + C9645 * C1470 +
                 C93718 * C1726) *
                    C93680) *
                   C4075 +
               ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
               C9928 * C4077) *
                  C93639 * C93625 * C97 -
              (((C9924 + C9925) * C93680 + (C9681 + C9682) * C188) * C4077 +
               ((C9923 + C9922) * C93680 + (C9676 + C9675) * C188) * C4076 +
               ((C9921 + C9920) * C93680 + (C9672 + C9671) * C188) * C4075) *
                  C93639 * C93625 * C98 +
              (C9928 * C4075 +
               ((C9682 + C9681) * C188 + (C9925 + C9924) * C93680) * C4076 +
               ((C9644 * C112 + C93829 * C280 + C9645 * C2697 +
                 C93718 * C2856) *
                    C188 +
                (C9644 * C193 + C93829 * C505 + C9645 * C2770 +
                 C93718 * C3092) *
                    C93680) *
                   C4077) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 +
                 C93718 * C1536) *
                    C188 +
                (C9644 * C189 + C93829 * C501 + C9645 * C1470 +
                 C93718 * C1726) *
                    C93680) *
                   C4075 +
               ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
               C9928 * C4077) *
                  C93639 * C800 -
              (((C9645 * C3493 + C93718 * C3785 + C9644 * C887 +
                 C93829 * C1143) *
                    C93680 +
                (C9645 * C3411 + C93718 * C3567 + C9644 * C805 +
                 C93829 * C953) *
                    C188) *
                   C4077 +
               ((C9645 * C3492 + C93718 * C3784 + C9644 * C888 +
                 C93829 * C1144) *
                    C93680 +
                (C9645 * C3410 + C93718 * C3566 + C9644 * C806 +
                 C93829 * C954) *
                    C188) *
                   C4076 +
               ((C9645 * C3491 + C93718 * C3783 + C9644 * C889 +
                 C93829 * C1145) *
                    C93680 +
                (C9645 * C3409 + C93718 * C3565 + C9644 * C807 +
                 C93829 * C955) *
                    C188) *
                   C4075) *
                  C93639 * C801 +
              (((C9644 * C808 + C93829 * C956 + C9645 * C8520 +
                 C93718 * C8749) *
                    C188 +
                (C9644 * C890 + C93829 * C1146 + C9645 * C8645 +
                 C93718 * C9091) *
                    C93680) *
                   C4075 +
               ((C9644 * C809 + C93829 * C957 + C9645 * C8521 +
                 C93718 * C8750) *
                    C188 +
                (C9644 * C891 + C93829 * C1147 + C9645 * C8646 +
                 C93718 * C9092) *
                    C93680) *
                   C4076 +
               ((C9644 * C810 + C93829 * C958 + C9645 * C8522 +
                 C93718 * C8751) *
                    C188 +
                (C9644 * C892 + C93829 * C1148 + C9645 * C8647 +
                 C93718 * C9093) *
                    C93680) *
                   C4077) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C188 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C93680) *
               C4075 +
           ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
           C9928 * C4077) *
              C1382 -
          (((C9645 * C1473 + C93718 * C1729 + C9644 * C1468 + C93829 * C1724) *
                C93680 +
            (C9645 * C1391 + C93718 * C1539 + C9644 * C1386 + C93829 * C1534) *
                C188) *
               C4077 +
           ((C9645 * C1472 + C93718 * C1728 + C9644 * C1469 + C93829 * C1725) *
                C93680 +
            (C9645 * C1390 + C93718 * C1538 + C9644 * C1387 + C93829 * C1535) *
                C188) *
               C4076 +
           ((C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                C93680 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C188) *
               C4075) *
              C1383 +
          (((C9644 * C1389 + C93829 * C1537 + C9645 * C10964 +
             C93718 * C11196) *
                C188 +
            (C9644 * C1471 + C93829 * C1727 + C9645 * C11080 +
             C93718 * C11495) *
                C93680) *
               C4075 +
           ((C9644 * C1390 + C93829 * C1538 + C9645 * C10965 +
             C93718 * C11197) *
                C188 +
            (C9644 * C1472 + C93829 * C1728 + C9645 * C11081 +
             C93718 * C11496) *
                C93680) *
               C4076 +
           ((C9644 * C1391 + C93829 * C1539 + C9645 * C10966 +
             C93718 * C11198) *
                C188 +
            (C9644 * C1473 + C93829 * C1729 + C9645 * C11082 +
             C93718 * C11497) *
                C93680) *
               C4077) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C14838 +
           (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
               C14739 +
           (C9644 * C807 + C93829 * C955 + C9645 * C3409 + C93718 * C3565) *
               C14839 +
           (C9644 * C889 + C93829 * C1145 + C9645 * C3491 + C93718 * C3783) *
               C14740 +
           (C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
               C14840 +
           (C9644 * C890 + C93829 * C1146 + C9645 * C8645 + C93718 * C9091) *
               C14741) *
              C93585 * C93639 * C93625 * C97 -
          ((C9645 * C8646 + C93718 * C9092 + C9644 * C891 + C93829 * C1147) *
               C14741 +
           (C9645 * C8521 + C93718 * C8750 + C9644 * C809 + C93829 * C957) *
               C14840 +
           (C12416 + C12417) * C14740 + (C12100 + C12101) * C14839 +
           (C9921 + C9920) * C14739 + (C9672 + C9671) * C14838) *
              C93585 * C93639 * C93625 * C98 +
          (C9683 * C14838 + C9926 * C14739 + (C12097 + C12096) * C14839 +
           (C12415 + C12414) * C14740 +
           (C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
               C14840 +
           (C9644 * C892 + C93829 * C1148 + C9645 * C8647 + C93718 * C9093) *
               C14741) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C14838 +
           (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
               C14739 +
           (C24395 + C24396) * C14839 + (C24649 + C24650) * C14740 +
           C24407 * C14840 + C24655 * C14741) *
              C93585 * C93639 * C800 -
          ((C24653 + C24654) * C14741 + (C24405 + C24406) * C14840 +
           (C24652 + C24651) * C14740 + (C24400 + C24399) * C14839 +
           (C24650 + C24649) * C14739 + (C24396 + C24395) * C14838) *
              C93585 * C93639 * C801 +
          (C24407 * C14838 + C24655 * C14739 + (C24406 + C24405) * C14839 +
           (C24654 + C24653) * C14740 +
           (C9644 * C15550 + C93829 * C15744 + C9645 * C22854 +
            C93718 * C23010) *
               C14840 +
           (C9644 * C15666 + C93829 * C16051 + C9645 * C22942 +
            C93718 * C23246) *
               C14741) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C14838 +
           (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
               C14739 +
           (C24395 + C24396) * C14839 + (C24649 + C24650) * C14740 +
           C24407 * C14840 + C24655 * C14741) *
              C93585 * C1382 -
          ((C9645 * C16487 + C93718 * C16807 + C9644 * C8645 + C93829 * C9091) *
               C14741 +
           (C9645 * C16395 + C93718 * C16565 + C9644 * C8520 + C93829 * C8749) *
               C14840 +
           (C9645 * C5870 + C93718 * C6196 + C9644 * C3491 + C93829 * C3783) *
               C14740 +
           (C9645 * C5775 + C93718 * C5950 + C9644 * C3409 + C93829 * C3565) *
               C14839 +
           (C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
               C14739 +
           (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
               C14838) *
              C93585 * C1383 +
          ((C9644 * C1389 + C93829 * C1537 + C9645 * C10964 + C93718 * C11196) *
               C14838 +
           (C9644 * C1471 + C93829 * C1727 + C9645 * C11080 + C93718 * C11495) *
               C14739 +
           (C9644 * C5775 + C93829 * C5950 + C9645 * C25001 + C93718 * C25218) *
               C14839 +
           (C9644 * C5870 + C93829 * C6196 + C9645 * C25104 + C93718 * C25517) *
               C14740 +
           (C9644 * C16395 + C93829 * C16565 + C9645 * C25002 +
            C93718 * C25219) *
               C14840 +
           (C9644 * C16487 + C93829 * C16807 + C9645 * C25105 +
            C93718 * C25518) *
               C14741) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
            C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
            C39042 * C11196) *
               C188 +
           (C39144 * C189 + C39039 * C501 + C39145 * C1470 + C39040 * C1726 +
            C39146 * C1471 + C39041 * C1727 + C39147 * C11080 +
            C39042 * C11495) *
               C93680) *
              C93585 * C93639 * C93625 * C97 -
          ((C39147 * C11081 + C39042 * C11496 + C39146 * C1472 +
            C39041 * C1728 + C39145 * C1469 + C39040 * C1725 + C39144 * C190 +
            C39039 * C502) *
               C93680 +
           (C39147 * C10965 + C39042 * C11197 + C39146 * C1390 +
            C39041 * C1538 + C39145 * C1387 + C39040 * C1535 + C39144 * C109 +
            C39039 * C277) *
               C188) *
              C93585 * C93639 * C93625 * C98 +
          ((C39144 * C110 + C39039 * C278 + C39145 * C1386 + C39040 * C1534 +
            C39146 * C1391 + C39041 * C1539 + C39147 * C10966 +
            C39042 * C11198) *
               C188 +
           (C39144 * C191 + C39039 * C503 + C39145 * C1468 + C39040 * C1724 +
            C39146 * C1473 + C39041 * C1729 + C39147 * C11082 +
            C39042 * C11497) *
               C93680) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
            C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
            C39042 * C11196) *
               C188 +
           (C39144 * C189 + C39039 * C501 + C39145 * C1470 + C39040 * C1726 +
            C39146 * C1471 + C39041 * C1727 + C39147 * C11080 +
            C39042 * C11495) *
               C93680) *
              C93585 * C93639 * C800 -
          ((C39147 * C25104 + C39042 * C25517 + C39146 * C5870 +
            C39041 * C6196 + C39145 * C3491 + C39040 * C3783 + C39144 * C889 +
            C39039 * C1145) *
               C93680 +
           (C39147 * C25001 + C39042 * C25218 + C39146 * C5775 +
            C39041 * C5950 + C39145 * C3409 + C39040 * C3565 + C39144 * C807 +
            C39039 * C955) *
               C188) *
              C93585 * C93639 * C801 +
          ((C39144 * C808 + C39039 * C956 + C39145 * C8520 + C39040 * C8749 +
            C39146 * C16395 + C39041 * C16565 + C39147 * C25002 +
            C39042 * C25219) *
               C188 +
           (C39144 * C890 + C39039 * C1146 + C39145 * C8645 + C39040 * C9091 +
            C39146 * C16487 + C39041 * C16807 + C39147 * C25105 +
            C39042 * C25518) *
               C93680) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
            C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
            C39042 * C11196) *
               C188 +
           (C39144 * C189 + C39039 * C501 + C39145 * C1470 + C39040 * C1726 +
            C39146 * C1471 + C39041 * C1727 + C39147 * C11080 +
            C39042 * C11495) *
               C93680) *
              C93585 * C1382 -
          ((C39147 * C30303 + C39042 * C30698 + C39146 * C11080 +
            C39041 * C11495 + C39145 * C1471 + C39040 * C1727 + C39144 * C1470 +
            C39039 * C1726) *
               C93680 +
           (C39147 * C30188 + C39042 * C30408 + C39146 * C10964 +
            C39041 * C11196 + C39145 * C1389 + C39040 * C1537 + C39144 * C1388 +
            C39039 * C1536) *
               C188) *
              C93585 * C1383 +
          ((C39144 * C1389 + C39039 * C1537 + C39145 * C10964 +
            C39040 * C11196 + C39146 * C30188 + C39041 * C30408 +
            C39147 * C39973 + C39042 * C40100) *
               C188 +
           (C39144 * C1471 + C39039 * C1727 + C39145 * C11080 +
            C39040 * C11495 + C39146 * C30303 + C39041 * C30698 +
            C39147 * C40032 + C39042 * C40280) *
               C93680) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
                C4085 * C110 + C4077 * C116) *
                   C9644 +
               (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
                C4085 * C278 + C4077 * C581) *
                   C93829 +
               (C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
                C4085 * C1386 + C4077 * C1394) *
                   C9645 +
               (C4081 * C1536 + C4075 * C1784 + C4083 * C1535 + C4076 * C1783 +
                C4085 * C1534 + C4077 * C1782) *
                   C93718) *
                  C93680 * C93639 * C93625 * C97 -
              ((C4085 * C1533 + C4077 * C1781 + C4083 * C1534 + C4076 * C1782 +
                C4081 * C1535 + C4075 * C1783) *
                   C93718 +
               (C4085 * C1385 + C4077 * C1393 + C4083 * C1386 + C4076 * C1394 +
                C4081 * C1387 + C4075 * C1395) *
                   C9645 +
               (C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
                C4081 * C277 + C4075 * C580) *
                   C93829 +
               (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
                C4081 * C109 + C4075 * C115) *
                   C9644) *
                  C93680 * C93639 * C93625 * C98 +
              ((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
                C4085 * C112 + C4077 * C118) *
                   C9644 +
               (C4081 * C278 + C4075 * C581 + C4083 * C279 + C4076 * C582 +
                C4085 * C280 + C4077 * C583) *
                   C93829 +
               (C4081 * C1386 + C4075 * C1394 + C4083 * C1385 + C4076 * C1393 +
                C4085 * C2697 + C4077 * C2698) *
                   C9645 +
               (C4081 * C1534 + C4075 * C1782 + C4083 * C1533 + C4076 * C1781 +
                C4085 * C2856 + C4077 * C3174) *
                   C93718) *
                  C93680 * C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
                C4085 * C110 + C4077 * C116) *
                   C9644 +
               (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
                C4085 * C278 + C4077 * C581) *
                   C93829 +
               (C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
                C4085 * C1386 + C4077 * C1394) *
                   C9645 +
               (C4081 * C1536 + C4075 * C1784 + C4083 * C1535 + C4076 * C1783 +
                C4085 * C1534 + C4077 * C1782) *
                   C93718) *
                  C93680 * C93639 * C800 -
              ((C9205 + C9206 + C9207) * C93718 +
               (C8884 + C8885 + C8886) * C9645 +
               (C5521 + C5520 + C5519) * C93829 +
               (C5242 + C5241 + C5240) * C9644) *
                  C93680 * C93639 * C801 +
              ((C5251 + C5250 + C5249) * C9644 +
               (C5524 + C5523 + C5522) * C93829 +
               (C4081 * C8520 + C4075 * C8523 + C4083 * C8521 + C4076 * C8524 +
                C4085 * C8522 + C4077 * C8525) *
                   C9645 +
               (C4081 * C8749 + C4075 * C9195 + C4083 * C8750 + C4076 * C9196 +
                C4085 * C8751 + C4077 * C9197) *
                   C93718) *
                  C93680 * C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C9644 +
           (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
            C4085 * C278 + C4077 * C581) *
               C93829 +
           (C11304 + C11305 + C11306) * C9645 +
           (C11588 + C11589 + C11590) * C93718) *
              C93680 * C1382 -
          ((C11591 + C11592 + C11593) * C93718 +
           (C11313 + C11314 + C11315) * C9645 +
           (C11590 + C11589 + C11588) * C93829 +
           (C11306 + C11305 + C11304) * C9644) *
              C93680 * C1383 +
          ((C11315 + C11314 + C11313) * C9644 +
           (C11593 + C11592 + C11591) * C93829 +
           (C4081 * C10964 + C4075 * C10967 + C4083 * C10965 + C4076 * C10968 +
            C4085 * C10966 + C4077 * C10969) *
               C9645 +
           (C4081 * C11196 + C4075 * C11572 + C4083 * C11197 + C4076 * C11573 +
            C4085 * C11198 + C4077 * C11574) *
               C93718) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C9644 +
            (C20049 * C276 + C93585 * C579) * C93829 +
            (C20049 * C1388 + C93585 * C1396) * C9645 +
            (C20049 * C1536 + C93585 * C1784) * C93718) *
               C14739 +
           (C20749 * C9644 + C20933 * C93829 + C23109 * C9645 +
            C23329 * C93718) *
               C14740 +
           (C20751 * C9644 + C20934 * C93829 + C23107 * C9645 +
            C23328 * C93718) *
               C14741) *
              C93639 * C93625 * C97 -
          (((C20049 * C8750 + C93585 * C9196) * C93718 +
            (C20049 * C8521 + C93585 * C8524) * C9645 + C22050 * C93829 +
            C21834 * C9644) *
               C14741 +
           ((C20049 * C3566 + C93585 * C3854) * C93718 +
            (C20049 * C3410 + C93585 * C3414) * C9645 + C22049 * C93829 +
            C21832 * C9644) *
               C14740 +
           ((C20049 * C1535 + C93585 * C1783) * C93718 +
            (C20049 * C1387 + C93585 * C1395) * C9645 +
            (C20049 * C277 + C93585 * C580) * C93829 +
            (C20049 * C109 + C93585 * C115) * C9644) *
               C14739) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C9644 +
            (C20049 * C278 + C93585 * C581) * C93829 +
            (C20049 * C1386 + C93585 * C1394) * C9645 +
            (C20049 * C1534 + C93585 * C1782) * C93718) *
               C14739 +
           ((C20049 * C805 + C93585 * C813) * C9644 +
            (C20049 * C953 + C93585 * C1201) * C93829 +
            (C20049 * C3411 + C93585 * C3415) * C9645 +
            (C20049 * C3567 + C93585 * C3855) * C93718) *
               C14740 +
           ((C20049 * C810 + C93585 * C818) * C9644 +
            (C20049 * C958 + C93585 * C1206) * C93829 +
            (C20049 * C8522 + C93585 * C8525) * C9645 +
            (C20049 * C8751 + C93585 * C9197) * C93718) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C9644 +
            (C20049 * C276 + C93585 * C579) * C93829 +
            (C20049 * C1388 + C93585 * C1396) * C9645 +
            (C20049 * C1536 + C93585 * C1784) * C93718) *
               C14739 +
           (C24730 + C24731 + C24732 + C24733) * C14740 + C24744 * C14741) *
              C93639 * C800 -
          ((C24738 + C24739 + C24740 + C24741) * C14741 +
           (C24737 + C24736 + C24735 + C24734) * C14740 +
           (C24733 + C24732 + C24731 + C24730) * C14739) *
              C93639 * C801 +
          (C24744 * C14739 + (C24741 + C24740 + C24739 + C24738) * C14740 +
           (C20756 * C9644 + C20936 * C93829 +
            (C20049 * C22854 + C93585 * C22855) * C9645 +
            (C20049 * C23010 + C93585 * C23316) * C93718) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C9644 +
            (C20049 * C276 + C93585 * C579) * C93829 + C25319 * C9645 +
            C25604 * C93718) *
               C14739 +
           (C24730 + C24731 + C24732 + C24733) * C14740 + C24744 * C14741) *
              C1382 -
          ((C25605 * C93718 + C25322 * C9645 + C23328 * C93829 +
            C23107 * C9644) *
               C14741 +
           (C25606 * C93718 + C25324 * C9645 + C23329 * C93829 +
            C23109 * C9644) *
               C14740 +
           (C25607 * C93718 + C25326 * C9645 + C25604 * C93829 +
            C25319 * C9644) *
               C14739) *
              C1383 +
          ((C25326 * C9644 + C25607 * C93829 +
            (C20049 * C10964 + C93585 * C10967) * C9645 +
            (C20049 * C11196 + C93585 * C11572) * C93718) *
               C14739 +
           (C25324 * C9644 + C25606 * C93829 +
            (C20049 * C25001 + C93585 * C25003) * C9645 +
            (C20049 * C25218 + C93585 * C25593) * C93718) *
               C14740 +
           (C25322 * C9644 + C25605 * C93829 +
            (C20049 * C25002 + C93585 * C25004) * C9645 +
            (C20049 * C25219 + C93585 * C25594) * C93718) *
               C14741) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C39144 +
           (C20049 * C276 + C93585 * C579) * C39039 + C25319 * C39145 +
           C25604 * C39040 + C25326 * C39146 + C25607 * C39041 +
           C35699 * C39147 + C35972 * C39042) *
              C93680 * C93639 * C93625 * C97 -
          ((C20049 * C11197 + C93585 * C11573) * C39042 +
           (C20049 * C10965 + C93585 * C10968) * C39147 + C37785 * C39041 +
           C37473 * C39146 + C27444 * C39040 + C27144 * C39145 +
           (C20049 * C277 + C93585 * C580) * C39039 +
           (C20049 * C109 + C93585 * C115) * C39144) *
              C93680 * C93639 * C93625 * C98 +
          ((C20049 * C110 + C93585 * C116) * C39144 +
           (C20049 * C278 + C93585 * C581) * C39039 +
           (C20049 * C1386 + C93585 * C1394) * C39145 +
           (C20049 * C1534 + C93585 * C1782) * C39040 +
           (C20049 * C1391 + C93585 * C1399) * C39146 +
           (C20049 * C1539 + C93585 * C1787) * C39041 +
           (C20049 * C10966 + C93585 * C10969) * C39147 +
           (C20049 * C11198 + C93585 * C11574) * C39042) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C39144 +
           (C20049 * C276 + C93585 * C579) * C39039 + C25319 * C39145 +
           C25604 * C39040 + C25326 * C39146 + C25607 * C39041 +
           C35699 * C39147 + C35972 * C39042) *
              C93680 * C93639 * C800 -
          (C35971 * C39042 + C35697 * C39147 + C25606 * C39041 +
           C25324 * C39146 + C23329 * C39040 + C23109 * C39145 +
           C20933 * C39039 + C20749 * C39144) *
              C93680 * C93639 * C801 +
          (C20751 * C39144 + C20934 * C39039 + C23107 * C39145 +
           C23328 * C39040 + C25322 * C39146 + C25605 * C39041 +
           (C20049 * C25002 + C93585 * C25004) * C39147 +
           (C20049 * C25219 + C93585 * C25594) * C39042) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C39144 +
           (C20049 * C276 + C93585 * C579) * C39039 + C25319 * C39145 +
           C25604 * C39040 + C25326 * C39146 + C25607 * C39041 +
           C35699 * C39147 + C35972 * C39042) *
              C93680 * C1382 -
          (C40335 * C39042 + C40167 * C39147 + C35972 * C39041 +
           C35699 * C39146 + C25607 * C39040 + C25326 * C39145 +
           C25604 * C39039 + C25319 * C39144) *
              C93680 * C1383 +
          (C25326 * C39144 + C25607 * C39039 + C35699 * C39145 +
           C35972 * C39040 + C40167 * C39146 + C40335 * C39041 +
           (C20049 * C39973 + C93585 * C39974) * C39147 +
           (C20049 * C40100 + C93585 * C40331) * C39042) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C188 * C108 + C93680 * C189) * C9644 +
                (C188 * C276 + C93680 * C635) * C93829 +
                (C188 * C1388 + C93680 * C1470) * C9645 +
                (C188 * C1536 + C93680 * C1842) * C93718) *
                   C4075 +
               (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
                  C93639 * C93625 * C97 -
              ((C10085 + C10086 + C10087 + C10088) * C4077 +
               (C10084 + C10083 + C10082 + C10081) * C4076 +
               (C10080 + C10079 + C10078 + C10077) * C4075) *
                  C93639 * C93625 * C98 +
              (C10091 * C4075 + (C10088 + C10087 + C10086 + C10085) * C4076 +
               (C225 * C9644 + C657 * C93829 +
                (C188 * C2697 + C93680 * C2770) * C9645 +
                (C188 * C2856 + C93680 * C3241) * C93718) *
                   C4077) *
                  C93639 * C93625 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C188 * C108 + C93680 * C189) * C9644 +
                (C188 * C276 + C93680 * C635) * C93829 +
                (C188 * C1388 + C93680 * C1470) * C9645 +
                (C188 * C1536 + C93680 * C1842) * C93718) *
                   C4075 +
               (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
                  C93639 * C800 -
              (((C188 * C3567 + C93680 * C3925) * C93718 +
                (C188 * C3411 + C93680 * C3493) * C9645 + C2539 * C93829 +
                C2074 * C9644) *
                   C4077 +
               ((C188 * C3566 + C93680 * C3924) * C93718 +
                (C188 * C3410 + C93680 * C3492) * C9645 + C2540 * C93829 +
                C2076 * C9644) *
                   C4076 +
               ((C188 * C3565 + C93680 * C3923) * C93718 +
                (C188 * C3409 + C93680 * C3491) * C9645 +
                (C188 * C955 + C93680 * C1261) * C93829 +
                (C188 * C807 + C93680 * C889) * C9644) *
                   C4075) *
                  C93639 * C801 +
              (((C188 * C808 + C93680 * C890) * C9644 +
                (C188 * C956 + C93680 * C1262) * C93829 +
                (C188 * C8520 + C93680 * C8645) * C9645 +
                (C188 * C8749 + C93680 * C9305) * C93718) *
                   C4075 +
               ((C188 * C809 + C93680 * C891) * C9644 +
                (C188 * C957 + C93680 * C1263) * C93829 +
                (C188 * C8521 + C93680 * C8646) * C9645 +
                (C188 * C8750 + C93680 * C9306) * C93718) *
                   C4076 +
               ((C188 * C810 + C93680 * C892) * C9644 +
                (C188 * C958 + C93680 * C1264) * C93829 +
                (C188 * C8522 + C93680 * C8647) * C9645 +
                (C188 * C8751 + C93680 * C9307) * C93718) *
                   C4077) *
                  C93639 * C802) *
             C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C9644 +
            (C188 * C276 + C93680 * C635) * C93829 + C11107 * C9645 +
            C11679 * C93718) *
               C4075 +
           (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
              C1382 -
          ((C11680 * C93718 + C11110 * C9645 + C3253 * C93829 + C2788 * C9644) *
               C4077 +
           (C11681 * C93718 + C11112 * C9645 + C3254 * C93829 + C2790 * C9644) *
               C4076 +
           (C11682 * C93718 + C11114 * C9645 + C11679 * C93829 +
            C11107 * C9644) *
               C4075) *
              C1383 +
          ((C11114 * C9644 + C11682 * C93829 +
            (C188 * C10964 + C93680 * C11080) * C9645 +
            (C188 * C11196 + C93680 * C11667) * C93718) *
               C4075 +
           (C11112 * C9644 + C11681 * C93829 +
            (C188 * C10965 + C93680 * C11081) * C9645 +
            (C188 * C11197 + C93680 * C11668) * C93718) *
               C4076 +
           (C11110 * C9644 + C11680 * C93829 +
            (C188 * C10966 + C93680 * C11082) * C9645 +
            (C188 * C11198 + C93680 * C11669) * C93718) *
               C4077) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C9644 +
           (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
            C14840 * C956 + C14741 * C1262) *
               C93829 +
           (C14838 * C1388 + C14739 * C1470 + C14839 * C3409 + C14740 * C3491 +
            C14840 * C8520 + C14741 * C8645) *
               C9645 +
           (C14838 * C1536 + C14739 * C1842 + C14839 * C3565 + C14740 * C3923 +
            C14840 * C8749 + C14741 * C9305) *
               C93718) *
              C93585 * C93639 * C93625 * C97 -
          ((C18889 + C18890 + C18891) * C93718 +
           (C18259 + C18260 + C18261) * C9645 +
           (C15393 + C15392 + C15391) * C93829 +
           (C14868 + C14867 + C14866) * C9644) *
              C93585 * C93639 * C93625 * C98 +
          ((C14877 + C14876 + C14875) * C9644 +
           (C15396 + C15395 + C15394) * C93829 +
           (C14838 * C1386 + C14739 * C1468 + C14839 * C3411 + C14740 * C3493 +
            C14840 * C8522 + C14741 * C8647) *
               C9645 +
           (C14838 * C1534 + C14739 * C1840 + C14839 * C3567 + C14740 * C3925 +
            C14840 * C8751 + C14741 * C9307) *
               C93718) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C9644 +
           (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
            C14840 * C956 + C14741 * C1262) *
               C93829 +
           (C14838 * C1388 + C14739 * C1470 + C14839 * C3409 + C14740 * C3491 +
            C14840 * C8520 + C14741 * C8645) *
               C9645 +
           (C14838 * C1536 + C14739 * C1842 + C14839 * C3565 + C14740 * C3923 +
            C14840 * C8749 + C14741 * C9305) *
               C93718) *
              C93585 * C93639 * C800 -
          ((C14840 * C19323 + C14741 * C19884 + C14839 * C8749 +
            C14740 * C9305 + C14838 * C3565 + C14739 * C3923) *
               C93718 +
           (C14840 * C19095 + C14741 * C19221 + C14839 * C8520 +
            C14740 * C8645 + C14838 * C3409 + C14739 * C3491) *
               C9645 +
           (C14840 * C5096 + C14741 * C5598 + C14839 * C956 + C14740 * C1262 +
            C14838 * C955 + C14739 * C1261) *
               C93829 +
           (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
            C14838 * C807 + C14739 * C889) *
               C9644) *
              C93585 * C93639 * C801 +
          ((C14838 * C808 + C14739 * C890 + C14839 * C4897 + C14740 * C5016 +
            C14840 * C15550 + C14741 * C15666) *
               C9644 +
           (C14838 * C956 + C14739 * C1262 + C14839 * C5096 + C14740 * C5598 +
            C14840 * C15744 + C14741 * C16231) *
               C93829 +
           (C14838 * C8520 + C14739 * C8645 + C14839 * C19095 +
            C14740 * C19221 + C14840 * C22854 + C14741 * C22942) *
               C9645 +
           (C14838 * C8749 + C14739 * C9305 + C14839 * C19323 +
            C14740 * C19884 + C14840 * C23010 + C14741 * C23398) *
               C93718) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C9644 +
           (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
            C14840 * C956 + C14741 * C1262) *
               C93829 +
           (C25133 + C25134 + C25135) * C9645 +
           (C25696 + C25697 + C25698) * C93718) *
              C93585 * C1382 -
          ((C25699 + C25700 + C25701) * C93718 +
           (C25142 + C25143 + C25144) * C9645 +
           (C25698 + C25697 + C25696) * C93829 +
           (C25135 + C25134 + C25133) * C9644) *
              C93585 * C1383 +
          ((C25144 + C25143 + C25142) * C9644 +
           (C25701 + C25700 + C25699) * C93829 +
           (C14838 * C10964 + C14739 * C11080 + C14839 * C25001 +
            C14740 * C25104 + C14840 * C25002 + C14741 * C25105) *
               C9645 +
           (C14838 * C11196 + C14739 * C11667 + C14839 * C25218 +
            C14740 * C25681 + C14840 * C25219 + C14741 * C25682) *
               C93718) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C39144 +
           (C188 * C276 + C93680 * C635) * C39039 + C11107 * C39145 +
           C11679 * C39040 + C11114 * C39146 + C11682 * C39041 +
           C30328 * C39147 + C30877 * C39042) *
              C93585 * C93639 * C93625 * C97 -
          (C30876 * C39042 + C30326 * C39147 + C11681 * C39041 +
           C11112 * C39146 + C3254 * C39040 + C2790 * C39145 + C654 * C39039 +
           C218 * C39144) *
              C93585 * C93639 * C93625 * C98 +
          (C220 * C39144 + C655 * C39039 + C2788 * C39145 + C3253 * C39040 +
           C11110 * C39146 + C11680 * C39041 +
           (C188 * C10966 + C93680 * C11082) * C39147 +
           (C188 * C11198 + C93680 * C11669) * C39042) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C39144 +
           (C188 * C276 + C93680 * C635) * C39039 + C11107 * C39145 +
           C11679 * C39040 + C11114 * C39146 + C11682 * C39041 +
           C30328 * C39147 + C30877 * C39042) *
              C93585 * C93639 * C800 -
          ((C188 * C25218 + C93680 * C25681) * C39042 +
           (C188 * C25001 + C93680 * C25104) * C39147 + C33771 * C39041 +
           C33141 * C39146 + C14559 * C39040 + C13954 * C39145 +
           (C188 * C955 + C93680 * C1261) * C39039 +
           (C188 * C807 + C93680 * C889) * C39144) *
              C93585 * C93639 * C801 +
          ((C188 * C808 + C93680 * C890) * C39144 +
           (C188 * C956 + C93680 * C1262) * C39039 +
           (C188 * C8520 + C93680 * C8645) * C39145 +
           (C188 * C8749 + C93680 * C9305) * C39040 +
           (C188 * C16395 + C93680 * C16487) * C39146 +
           (C188 * C16565 + C93680 * C16959) * C39041 +
           (C188 * C25002 + C93680 * C25105) * C39147 +
           (C188 * C25219 + C93680 * C25682) * C39042) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C39144 +
           (C188 * C276 + C93680 * C635) * C39039 + C11107 * C39145 +
           C11679 * C39040 + C11114 * C39146 + C11682 * C39041 +
           C30328 * C39147 + C30877 * C39042) *
              C93585 * C1382 -
          (C40389 * C39042 + C40048 * C39147 + C30877 * C39041 +
           C30328 * C39146 + C11682 * C39040 + C11114 * C39145 +
           C11679 * C39039 + C11107 * C39144) *
              C93585 * C1383 +
          (C11114 * C39144 + C11682 * C39039 + C30328 * C39145 +
           C30877 * C39040 + C40048 * C39146 + C40389 * C39041 +
           (C188 * C39973 + C93680 * C40032) * C39147 +
           (C188 * C40100 + C93680 * C40385) * C39042) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[42] += (0.5 * std::pow(Pi, 2.5) *
                       (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                          C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                             C93680 * C4075 +
                         (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                            C93639 * C93625 * C97 -
                        ((C10206 + C10207) * C93680 * C4077 +
                         (C10205 + C10204) * C93680 * C4076 +
                         (C10203 + C10202) * C93680 * C4075) *
                            C93639 * C93625 * C98 +
                        (C10209 * C4075 + (C10207 + C10206) * C93680 * C4076 +
                         (C10165 * C112 + C10188 + C10188 + C93829 * C718 +
                          C10166 * C2697 + C10189 + C10189 + C93718 * C3323) *
                             C93680 * C4077) *
                            C93639 * C93625 * C99) +
                   0.5 * std::pow(Pi, 2.5) *
                       (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                          C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                             C93680 * C4075 +
                         (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                            C93639 * C800 -
                        ((C10166 * C3411 + C10879 + C10879 + C93718 * C3995 +
                          C10165 * C805 + C10880 + C10880 + C93829 * C1317) *
                             C93680 * C4077 +
                         (C10166 * C3410 + C10881 + C10881 + C93718 * C3994 +
                          C10165 * C806 + C10882 + C10882 + C93829 * C1318) *
                             C93680 * C4076 +
                         (C10166 * C3409 + C10883 + C10883 + C93718 * C3993 +
                          C10165 * C807 + C10884 + C10884 + C93829 * C1319) *
                             C93680 * C4075) *
                            C93639 * C801 +
                        ((C10165 * C808 + C10885 + C10885 + C93829 * C1320 +
                          C10166 * C8520 + C10886 + C10886 + C93718 * C9406) *
                             C93680 * C4075 +
                         (C10165 * C809 + C10887 + C10887 + C93829 * C1321 +
                          C10166 * C8521 + C10888 + C10888 + C93718 * C9407) *
                             C93680 * C4076 +
                         (C10165 * C810 + C10889 + C10889 + C93829 * C1322 +
                          C10166 * C8522 + C10890 + C10890 + C93718 * C9408) *
                             C93680 * C4077) *
                            C93639 * C802) *
                       C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C93680 * C4075 +
                     (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                        C1382 -
                    ((C10166 * C1391 + C11760 + C11760 + C93718 * C1903 +
                      C10165 * C1386 + C11761 + C11761 + C93829 * C1898) *
                         C93680 * C4077 +
                     (C10166 * C1390 + C11762 + C11762 + C93718 * C1902 +
                      C10165 * C1387 + C11763 + C11763 + C93829 * C1899) *
                         C93680 * C4076 +
                     (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
                      C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                         C93680 * C4075) *
                        C1383 +
                    ((C10165 * C1389 + C11766 + C11766 + C93829 * C1901 +
                      C10166 * C10964 + C11767 + C11767 + C93718 * C11756) *
                         C93680 * C4075 +
                     (C10165 * C1390 + C11768 + C11768 + C93829 * C1902 +
                      C10166 * C10965 + C11769 + C11769 + C93718 * C11757) *
                         C93680 * C4076 +
                     (C10165 * C1391 + C11770 + C11770 + C93829 * C1903 +
                      C10166 * C10966 + C11771 + C11771 + C93718 * C11758) *
                         C93680 * C4077) *
                        C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q)) +
                  (0.5 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C14739 +
                     (C10165 * C807 + C10884 + C10884 + C93829 * C1319 +
                      C10166 * C3409 + C10883 + C10883 + C93718 * C3993) *
                         C14740 +
                     (C10165 * C808 + C10885 + C10885 + C93829 * C1320 +
                      C10166 * C8520 + C10886 + C10886 + C93718 * C9406) *
                         C14741) *
                        C93585 * C93639 * C93625 * C97 -
                    ((C10166 * C8521 + C10888 + C10888 + C93718 * C9407 +
                      C10165 * C809 + C10887 + C10887 + C93829 * C1321) *
                         C14741 +
                     (C12746 + C12747) * C14740 + (C10203 + C10202) * C14739) *
                        C93585 * C93639 * C93625 * C98 +
                    (C10208 * C14739 + (C12745 + C12744) * C14740 +
                     (C10165 * C810 + C10889 + C10889 + C93829 * C1322 +
                      C10166 * C8522 + C10890 + C10890 + C93718 * C9408) *
                         C14741) *
                        C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (0.5 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C14739 +
                     (C24921 + C24922) * C14740 + C24927 * C14741) *
                        C93585 * C93639 * C800 -
                    ((C24925 + C24926) * C14741 + (C24924 + C24923) * C14740 +
                     (C24922 + C24921) * C14739) *
                        C93585 * C93639 * C801 +
                    (C24927 * C14739 + (C24926 + C24925) * C14740 +
                     (C10165 * C15550 + C24907 + C24907 + C93829 * C16307 +
                      C10166 * C22854 + C24908 + C24908 + C93718 * C23465) *
                         C14741) *
                        C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C14739 +
                     (C24921 + C24922) * C14740 + C24927 * C14741) *
                        C93585 * C1382 -
                    ((C10166 * C16395 + C25778 + C25778 + C93718 * C17035 +
                      C10165 * C8520 + C25779 + C25779 + C93829 * C9406) *
                         C14741 +
                     (C10166 * C5775 + C14659 + C14659 + C93718 * C6427 +
                      C10165 * C3409 + C14658 + C14658 + C93829 * C3993) *
                         C14740 +
                     (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
                      C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                         C14739) *
                        C93585 * C1383 +
                    ((C10165 * C1389 + C11766 + C11766 + C93829 * C1901 +
                      C10166 * C10964 + C11767 + C11767 + C93718 * C11756) *
                         C14739 +
                     (C10165 * C5775 + C25780 + C25780 + C93829 * C6427 +
                      C10166 * C25001 + C25781 + C25781 + C93718 * C25775) *
                         C14740 +
                     (C10165 * C16395 + C25782 + C25782 + C93829 * C17035 +
                      C10166 * C25002 + C25783 + C25783 + C93718 * C25776) *
                         C14741) *
                        C93585 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((C39448 * C108 + C39453 + C39453 + C39039 * C714 +
                     C39449 * C1388 + C39454 + C39454 + C39040 * C1900 +
                     C39450 * C1389 + C39455 + C39455 + C39041 * C1901 +
                     C39451 * C10964 + C39456 + C39456 + C39042 * C11756) *
                        C93680 * C93585 * C93639 * C93625 * C97 -
                    (C39451 * C10965 + C39457 + C39457 + C39042 * C11757 +
                     C39450 * C1390 + C39458 + C39458 + C39041 * C1902 +
                     C39449 * C1387 + C39459 + C39459 + C39040 * C1899 +
                     C39448 * C109 + C39460 + C39460 + C39039 * C715) *
                        C93680 * C93585 * C93639 * C93625 * C98 +
                    (C39448 * C110 + C39461 + C39461 + C39039 * C716 +
                     C39449 * C1386 + C39462 + C39462 + C39040 * C1898 +
                     C39450 * C1391 + C39463 + C39463 + C39041 * C1903 +
                     C39451 * C10966 + C39464 + C39464 + C39042 * C11758) *
                        C93680 * C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((C39448 * C108 + C39453 + C39453 + C39039 * C714 +
                     C39449 * C1388 + C39454 + C39454 + C39040 * C1900 +
                     C39450 * C1389 + C39455 + C39455 + C39041 * C1901 +
                     C39451 * C10964 + C39456 + C39456 + C39042 * C11756) *
                        C93680 * C93585 * C93639 * C800 -
                    (C39451 * C25001 + C39916 + C39916 + C39042 * C25775 +
                     C39450 * C5775 + C39917 + C39917 + C39041 * C6427 +
                     C39449 * C3409 + C39918 + C39918 + C39040 * C3993 +
                     C39448 * C807 + C39919 + C39919 + C39039 * C1319) *
                        C93680 * C93585 * C93639 * C801 +
                    (C39448 * C808 + C39920 + C39920 + C39039 * C1320 +
                     C39449 * C8520 + C39921 + C39921 + C39040 * C9406 +
                     C39450 * C16395 + C39922 + C39922 + C39041 * C17035 +
                     C39451 * C25002 + C39923 + C39923 + C39042 * C25776) *
                        C93680 * C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((C39448 * C108 + C39453 + C39453 + C39039 * C714 +
                     C39449 * C1388 + C39454 + C39454 + C39040 * C1900 +
                     C39450 * C1389 + C39455 + C39455 + C39041 * C1901 +
                     C39451 * C10964 + C39456 + C39456 + C39042 * C11756) *
                        C93680 * C93585 * C1382 -
                    (C39451 * C30188 + C40441 + C40441 + C39042 * C30951 +
                     C39450 * C10964 + C40442 + C40442 + C39041 * C11756 +
                     C39449 * C1389 + C40443 + C40443 + C39040 * C1901 +
                     C39448 * C1388 + C40444 + C40444 + C39039 * C1900) *
                        C93680 * C93585 * C1383 +
                    (C39448 * C1389 + C40445 + C40445 + C39039 * C1901 +
                     C39449 * C10964 + C40446 + C40446 + C39040 * C11756 +
                     C39450 * C30188 + C40447 + C40447 + C39041 * C30951 +
                     C39451 * C39973 + C40448 + C40448 + C39042 * C40439) *
                        C93680 * C93585 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
             C25027 * C93718) *
                C14739 +
            (C24216 + C24217) * C14740 + C24222 * C14741) *
               C2695 -
           ((C25028 * C93718 + C22872 * C93829) * C14741 +
            (C25029 * C93718 + C22873 * C93829) * C14740 +
            (C25030 * C93718 + C25027 * C93829) * C14739) *
               C2696) *
              C93625 * C1981 +
          (((C26841 * C93829 +
             (C20048 * C1390 + C26836 + C26836 + C93585 * C1406) * C93718) *
                C14739 +
            (C25892 * C93829 +
             (C20048 * C5776 + C26837 + C26837 + C93585 * C5782) * C93718) *
                C14740 +
            (C25893 * C93829 +
             (C20048 * C16396 + C26838 + C26838 + C93585 * C16400) * C93718) *
                C14741) *
               C2696 -
           ((C25895 + C25885) * C14741 + (C25894 + C25882) * C14740 +
            (C26841 * C93718 +
             (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93829) *
                C14739) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
             C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
             C4077 * C122) *
                C93829 +
            (C11001 + C11002 + C11003) * C93718) *
               C93680 * C2695 -
           ((C11004 + C11005 + C11006) * C93718 +
            (C11003 + C11002 + C11001) * C93829) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C12861 + C12862 + C12863) * C93829 +
            (C4080 * C1390 + C12852 + C12852 + C4075 * C1406 + C4082 * C1391 +
             C12853 + C12853 + C4076 * C1407 + C4084 * C1392 + C12854 + C12854 +
             C4077 * C1408) *
                C93718) *
               C93680 * C2696 -
           ((C12863 + C12862 + C12861) * C93718 +
            (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 +
             C4097 + C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
             C4075 * C121) *
                C93829) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C39039 +
            C25027 * C39040 + C25030 * C39041 + C35410 * C39042) *
               C93680 * C2695 -
           (C39982 * C39042 + C35410 * C39041 + C25030 * C39040 +
            C25027 * C39039) *
               C93680 * C2696) *
              C93625 * C1981 +
          ((C26841 * C39039 + C37156 * C39040 + C41118 * C39041 +
            (C20048 * C30189 + C41115 + C41115 + C93585 * C30193) * C39042) *
               C93680 * C2696 -
           (C41118 * C39042 + C37156 * C39041 + C26841 * C39040 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C39039) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
              C14840 * C808 + C14741 * C890) *
                 C20049 +
             (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
              C14840 * C816 + C14741 * C898) *
                 C93585) *
                C93829 +
            ((C25133 + C25134 + C25135) * C20049 +
             (C25136 + C25137 + C25138) * C93585) *
                C93718) *
               C2695 -
           (((C25139 + C25140 + C25141) * C93585 +
             (C25142 + C25143 + C25144) * C20049) *
                C93718 +
            ((C25138 + C25137 + C25136) * C93585 +
             (C25135 + C25134 + C25133) * C20049) *
                C93829) *
               C2696) *
              C93625 * C1981 +
          ((((C18261 + C18260 + C18259) * C20049 +
             (C18258 + C18257 + C18256) * C93585) *
                C93829 +
            ((C14838 * C1390 + C14739 * C1472 + C14839 * C5776 +
              C14740 * C5871 + C14840 * C16396 + C14741 * C16488) *
                 C20049 +
             (C14838 * C1398 + C14739 * C1480 + C14839 * C5779 +
              C14740 * C5874 + C14840 * C16398 + C14741 * C16490) *
                 C93585) *
                C93718) *
               C2696 -
           (((C18256 + C18257 + C18258) * C93585 +
             (C18259 + C18260 + C18261) * C20049) *
                C93718 +
            ((C14871 + C14870 + C14869) * C93585 +
             (C14868 + C14867 + C14866) * C20049) *
                C93829) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C4081 +
             (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
             C219 * C4076 + C220 * C4085 + C221 * C4077) *
                C93829 +
            (C11115 + C11116 + C11091 + C11092 + C11093 + C11094) * C93718) *
               C2695 -
           ((C11117 + C11118 + C11119 + C11120 + C11121 + C11122) * C93718 +
            (C11094 + C11093 + C11092 + C11091 + C11116 + C11115) * C93829) *
               C2696) *
              C93625 * C1981 +
          (((C12962 + C12963 + C12964 + C12965 + C12966 + C12967) * C93829 +
            (C11112 * C4081 + C11111 * C4075 + C11110 * C4083 + C11109 * C4076 +
             (C188 * C1392 + C93680 * C1474) * C4085 +
             (C188 * C1400 + C93680 * C1482) * C4077) *
                C93718) *
               C2696 -
           ((C12967 + C12966 + C12965 + C12964 + C12963 + C12962) * C93718 +
            (C223 * C4077 + C222 * C4085 + C221 * C4076 + C220 * C4083 +
             C219 * C4075 + C218 * C4081) *
                C93829) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C20049 +
             (C188 * C114 + C93680 * C195) * C93585) *
                C39039 +
            (C40035 + C40036) * C39040 + C40045 * C39041 + C40046 * C39042) *
               C2695 -
           ((C40049 + C40050) * C39042 + (C40040 + C40039) * C39041 +
            (C40038 + C40037) * C39040 + (C40036 + C40035) * C39039) *
               C2696) *
              C93625 * C1981 +
          (((C41185 + C41186) * C39039 + (C41187 + C41188) * C39040 +
            (C41189 + C41190) * C39041 +
            ((C188 * C30189 + C93680 * C30304) * C20049 +
             (C188 * C30191 + C93680 * C30306) * C93585) *
                C39042) *
               C2696 -
           ((C41190 + C41189) * C39042 + (C41188 + C41187) * C39041 +
            (C41186 + C41185) * C39040 +
            (C219 * C93585 + C218 * C20049) * C39039) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C20049 +
             (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                 C93585) *
                C14739 +
            ((C24395 + C24396) * C20049 + (C24397 + C24398) * C93585) * C14740 +
            C24411 * C14741) *
               C2695 -
           (((C9645 * C16397 + C93718 * C16567 + C9644 * C8523 +
              C93829 * C8752) *
                 C93585 +
             (C9645 * C16395 + C93718 * C16565 + C9644 * C8520 +
              C93829 * C8749) *
                 C20049) *
                C14741 +
            ((C9645 * C5778 + C93718 * C5953 + C9644 * C3413 + C93829 * C3569) *
                 C93585 +
             (C9645 * C5775 + C93718 * C5950 + C9644 * C3409 + C93829 * C3565) *
                 C20049) *
                C14740 +
            ((C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                 C93585 +
             (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                 C20049) *
                C14739) *
               C2696) *
              C93625 * C1981 +
          ((((C13089 + C13088) * C20049 + (C13087 + C13086) * C93585) * C14739 +
            ((C9644 * C3410 + C93829 * C3566 + C9645 * C5776 + C93718 * C5951) *
                 C20049 +
             (C9644 * C3414 + C93829 * C3570 + C9645 * C5779 + C93718 * C5954) *
                 C93585) *
                C14740 +
            ((C9644 * C8521 + C93829 * C8750 + C9645 * C16396 +
              C93718 * C16566) *
                 C20049 +
             (C9644 * C8524 + C93829 * C8753 + C9645 * C16398 +
              C93718 * C16568) *
                 C93585) *
                C14741) *
               C2696 -
           (((C26103 + C26102) * C93585 + (C26101 + C26100) * C20049) * C14741 +
            ((C12098 + C12099) * C93585 + (C12100 + C12101) * C20049) * C14740 +
            ((C9674 + C9673) * C93585 + (C9672 + C9671) * C20049) * C14739) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C4081 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C4075 +
            (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
            C9684 * C4077) *
               C93680 * C2695 -
           ((C13082 + C13083) * C4077 + (C13084 + C13085) * C4085 +
            (C13086 + C13087) * C4076 + (C13088 + C13089) * C4083 +
            (C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                C4075 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C4081) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C13089 + C13088) * C4081 + (C13087 + C13086) * C4075 +
            (C13085 + C13084) * C4083 + (C13083 + C13082) * C4076 +
            (C9644 * C1385 + C93829 * C1533 + C9645 * C1392 + C93718 * C1540) *
                C4085 +
            (C9644 * C1393 + C93829 * C1541 + C9645 * C1400 + C93718 * C1548) *
                C4077) *
               C93680 * C2696 -
           ((C9679 + C9680) * C4077 + (C9681 + C9682) * C4085 +
            (C9678 + C9677) * C4076 + (C9676 + C9675) * C4083 +
            (C9674 + C9673) * C4075 + (C9672 + C9671) * C4081) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
             C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
             C39042 * C11196) *
                C20049 +
            (C39144 * C114 + C39039 * C282 + C39145 * C1396 + C39040 * C1544 +
             C39146 * C1397 + C39041 * C1545 + C39147 * C10967 +
             C39042 * C11199) *
                C93585) *
               C93680 * C2695 -
           ((C39147 * C30190 + C39042 * C30410 + C39146 * C10967 +
             C39041 * C11199 + C39145 * C1397 + C39040 * C1545 +
             C39144 * C1396 + C39039 * C1544) *
                C93585 +
            (C39147 * C30188 + C39042 * C30408 + C39146 * C10964 +
             C39041 * C11196 + C39145 * C1389 + C39040 * C1537 +
             C39144 * C1388 + C39039 * C1536) *
                C20049) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C39144 * C1387 + C39039 * C1535 + C39145 * C1390 + C39040 * C1538 +
             C39146 * C10965 + C39041 * C11197 + C39147 * C30189 +
             C39042 * C30409) *
                C20049 +
            (C39144 * C1395 + C39039 * C1543 + C39145 * C1398 + C39040 * C1546 +
             C39146 * C10968 + C39041 * C11200 + C39147 * C30191 +
             C39042 * C30411) *
                C93585) *
               C93680 * C2696 -
           ((C39147 * C10968 + C39042 * C11200 + C39146 * C1398 +
             C39041 * C1546 + C39145 * C1395 + C39040 * C1543 + C39144 * C115 +
             C39039 * C283) *
                C93585 +
            (C39147 * C10965 + C39042 * C11197 + C39146 * C1390 +
             C39041 * C1538 + C39145 * C1387 + C39040 * C1535 + C39144 * C109 +
             C39039 * C277) *
                C20049) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C14838 +
             (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
             C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
                C93829 +
            (C25327 + C25328 + C25303 + C25304 + C25305 + C25306) * C93718) *
               C2695 -
           ((C25329 + C25330 + C25331 + C25332 + C25333 + C25334) * C93718 +
            (C25306 + C25305 + C25304 + C25303 + C25328 + C25327) * C93829) *
               C2696) *
              C93625 * C1981 +
          (((C27146 + C27147 + C27140 + C27141 + C27142 + C27143) * C93829 +
            ((C20049 * C1390 + C93585 * C1398) * C14838 +
             (C20049 * C1472 + C93585 * C1604) * C14739 +
             (C20049 * C5776 + C93585 * C5779) * C14839 +
             (C20049 * C5871 + C93585 * C6031) * C14740 +
             (C20049 * C16396 + C93585 * C16398) * C14840 +
             (C20049 * C16488 + C93585 * C16644) * C14741) *
                C93718) *
               C2696 -
           ((C27143 + C27142 + C27141 + C27140 + C27147 + C27146) * C93718 +
            (C21835 * C14741 + C21834 * C14840 + C21833 * C14740 +
             C21832 * C14839 + (C20049 * C190 + C93585 * C363) * C14739 +
             (C20049 * C109 + C93585 * C115) * C14838) *
                C93829) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
              C4085 * C110 + C4077 * C116) *
                 C188 +
             (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
              C4085 * C191 + C4077 * C364) *
                 C93680) *
                C93829 +
            ((C11304 + C11305 + C11306) * C188 +
             (C11307 + C11308 + C11309) * C93680) *
                C93718) *
               C2695 -
           (((C11310 + C11311 + C11312) * C93680 +
             (C11313 + C11314 + C11315) * C188) *
                C93718 +
            ((C11309 + C11308 + C11307) * C93680 +
             (C11306 + C11305 + C11304) * C188) *
                C93829) *
               C2696) *
              C93625 * C1981 +
          ((((C13200 + C13201 + C13202) * C188 +
             (C13203 + C13204 + C13205) * C93680) *
                C93829 +
            ((C4081 * C1390 + C4075 * C1398 + C4083 * C1391 + C4076 * C1399 +
              C4085 * C1392 + C4077 * C1400) *
                 C188 +
             (C4081 * C1472 + C4075 * C1604 + C4083 * C1473 + C4076 * C1605 +
              C4085 * C1474 + C4077 * C1606) *
                 C93680) *
                C93718) *
               C2696 -
           (((C13205 + C13204 + C13203) * C93680 +
             (C13202 + C13201 + C13200) * C188) *
                C93718 +
            ((C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
              C4081 * C190 + C4075 * C363) *
                 C93680 +
             (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
              C4081 * C109 + C4075 * C115) *
                 C188) *
                C93829) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C188 +
             (C20049 * C189 + C93585 * C362) * C93680) *
                C39039 +
            (C40154 + C40155) * C39040 + C40164 * C39041 + C40165 * C39042) *
               C2695 -
           ((C40168 + C40169) * C39042 + (C40159 + C40158) * C39041 +
            (C40157 + C40156) * C39040 + (C40155 + C40154) * C39039) *
               C2696) *
              C93625 * C1981 +
          (((C41323 + C41324) * C39039 + (C41325 + C41326) * C39040 +
            (C41333 + C41334) * C39041 +
            ((C20049 * C30189 + C93585 * C30191) * C188 +
             (C20049 * C30304 + C93585 * C30487) * C93680) *
                C39042) *
               C2696 -
           ((C41334 + C41333) * C39042 + (C41326 + C41325) * C39041 +
            (C41324 + C41323) * C39040 +
            ((C20049 * C190 + C93585 * C363) * C93680 +
             (C20049 * C109 + C93585 * C115) * C188) *
                C39039) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
             C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 +
             C15105 + C14741 * C1080) *
                C93585 * C93829 +
            (C25438 + C25439 + C25440) * C93585 * C93718) *
               C2695 -
           ((C25441 + C25442 + C25443) * C93585 * C93718 +
            (C25440 + C25439 + C25438) * C93585 * C93829) *
               C2696) *
              C93625 * C1981 +
          (((C18579 + C18578 + C18577) * C93585 * C93829 +
            (C15099 * C1390 + C16731 + C16731 + C14739 * C1662 +
             C15100 * C5776 + C16732 + C16732 + C14740 * C6108 +
             C15101 * C16396 + C16733 + C16733 + C14741 * C16720) *
                C93585 * C93718) *
               C2696 -
           ((C18577 + C18578 + C18579) * C93585 * C93718 +
            (C15141 + C15140 + C15139) * C93585 * C93829) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 +
             C448 * C4076 + C449 * C4077) *
                C93829 +
            (C11418 + C11395 + C11396) * C93718) *
               C2695 -
           ((C11419 + C11420 + C11421) * C93718 +
            (C11396 + C11395 + C11418) * C93829) *
               C2696) *
              C93625 * C1981 +
          (((C13304 + C13305 + C13306) * C93829 +
            (C11416 * C4075 + C11415 * C4076 +
             (C418 * C1392 + C1673 + C1673 + C93680 * C1664) * C4077) *
                C93718) *
               C2696 -
           ((C13306 + C13305 + C13304) * C93718 +
            (C450 * C4077 + C449 * C4076 + C448 * C4075) * C93829) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93585 * C39039 +
            C40221 * C39040 + C40222 * C39041 + C40223 * C39042) *
               C2695 -
           (C40230 * C39042 + C40223 * C39041 + C40222 * C39040 +
            C40221 * C39039) *
               C2696) *
              C93625 * C1981 +
          ((C41401 * C39039 + C41402 * C39040 + C41403 * C39041 +
            (C418 * C30189 + C30615 + C30615 + C93680 * C30604) * C93585 *
                C39042) *
               C2696 -
           (C41403 * C39042 + C41402 * C39041 + C41401 * C39040 +
            C448 * C93585 * C39039) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C14838 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C14739 +
            (C24395 + C24396) * C14839 + (C24649 + C24650) * C14740 +
            C24407 * C14840 + C24655 * C14741) *
               C93585 * C2695 -
           ((C9645 * C16487 + C93718 * C16807 + C9644 * C8645 +
             C93829 * C9091) *
                C14741 +
            (C9645 * C16395 + C93718 * C16565 + C9644 * C8520 +
             C93829 * C8749) *
                C14840 +
            (C9645 * C5870 + C93718 * C6196 + C9644 * C3491 + C93829 * C3783) *
                C14740 +
            (C9645 * C5775 + C93718 * C5950 + C9644 * C3409 + C93829 * C3565) *
                C14839 +
            (C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                C14739 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C14838) *
               C93585 * C2696) *
              C93625 * C1981 +
          (((C13089 + C13088) * C14838 + (C13416 + C13415) * C14739 +
            (C9644 * C3410 + C93829 * C3566 + C9645 * C5776 + C93718 * C5951) *
                C14839 +
            (C9644 * C3492 + C93829 * C3784 + C9645 * C5871 + C93718 * C6197) *
                C14740 +
            (C9644 * C8521 + C93829 * C8750 + C9645 * C16396 +
             C93718 * C16566) *
                C14840 +
            (C9644 * C8646 + C93829 * C9092 + C9645 * C16488 +
             C93718 * C16808) *
                C14741) *
               C93585 * C2696 -
           ((C26415 + C26414) * C14741 + (C26101 + C26100) * C14840 +
            (C12416 + C12417) * C14740 + (C12100 + C12101) * C14839 +
            (C9921 + C9920) * C14739 + (C9672 + C9671) * C14838) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C188 +
             (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                 C93680) *
                C4075 +
            ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
            C9928 * C4077) *
               C2695 -
           (((C13413 + C13414) * C93680 + (C13084 + C13085) * C188) * C4077 +
            ((C13415 + C13416) * C93680 + (C13088 + C13089) * C188) * C4076 +
            ((C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                 C93680 +
             (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                 C188) *
                C4075) *
               C2696) *
              C93625 * C1981 +
          ((((C13089 + C13088) * C188 + (C13416 + C13415) * C93680) * C4075 +
            ((C13085 + C13084) * C188 + (C13414 + C13413) * C93680) * C4076 +
            ((C9644 * C1385 + C93829 * C1533 + C9645 * C1392 + C93718 * C1540) *
                 C188 +
             (C9644 * C1467 + C93829 * C1723 + C9645 * C1474 + C93718 * C1730) *
                 C93680) *
                C4077) *
               C2696 -
           (((C9924 + C9925) * C93680 + (C9681 + C9682) * C188) * C4077 +
            ((C9923 + C9922) * C93680 + (C9676 + C9675) * C188) * C4076 +
            ((C9921 + C9920) * C93680 + (C9672 + C9671) * C188) * C4075) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
             C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
             C39042 * C11196) *
                C188 +
            (C39144 * C189 + C39039 * C501 + C39145 * C1470 + C39040 * C1726 +
             C39146 * C1471 + C39041 * C1727 + C39147 * C11080 +
             C39042 * C11495) *
                C93680) *
               C93585 * C2695 -
           ((C39147 * C30303 + C39042 * C30698 + C39146 * C11080 +
             C39041 * C11495 + C39145 * C1471 + C39040 * C1727 +
             C39144 * C1470 + C39039 * C1726) *
                C93680 +
            (C39147 * C30188 + C39042 * C30408 + C39146 * C10964 +
             C39041 * C11196 + C39145 * C1389 + C39040 * C1537 +
             C39144 * C1388 + C39039 * C1536) *
                C188) *
               C93585 * C2696) *
              C93625 * C1981 +
          (((C39144 * C1387 + C39039 * C1535 + C39145 * C1390 + C39040 * C1538 +
             C39146 * C10965 + C39041 * C11197 + C39147 * C30189 +
             C39042 * C30409) *
                C188 +
            (C39144 * C1469 + C39039 * C1725 + C39145 * C1472 + C39040 * C1728 +
             C39146 * C11081 + C39041 * C11496 + C39147 * C30304 +
             C39042 * C30699) *
                C93680) *
               C93585 * C2696 -
           ((C39147 * C11081 + C39042 * C11496 + C39146 * C1472 +
             C39041 * C1728 + C39145 * C1469 + C39040 * C1725 + C39144 * C190 +
             C39039 * C502) *
                C93680 +
            (C39147 * C10965 + C39042 * C11197 + C39146 * C1390 +
             C39041 * C1538 + C39145 * C1387 + C39040 * C1535 + C39144 * C109 +
             C39039 * C277) *
                C188) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C9644 +
             (C20049 * C276 + C93585 * C579) * C93829 + C25319 * C9645 +
             C25604 * C93718) *
                C14739 +
            (C24730 + C24731 + C24732 + C24733) * C14740 + C24744 * C14741) *
               C2695 -
           ((C25605 * C93718 + C25322 * C9645 + C23328 * C93829 +
             C23107 * C9644) *
                C14741 +
            (C25606 * C93718 + C25324 * C9645 + C23329 * C93829 +
             C23109 * C9644) *
                C14740 +
            (C25607 * C93718 + C25326 * C9645 + C25604 * C93829 +
             C25319 * C9644) *
                C14739) *
               C2696) *
              C93625 * C1981 +
          (((C27144 * C9644 + C27444 * C93829 +
             (C20049 * C1390 + C93585 * C1398) * C9645 +
             (C20049 * C1538 + C93585 * C1786) * C93718) *
                C14739 +
            (C26210 * C9644 + C26524 * C93829 +
             (C20049 * C5776 + C93585 * C5779) * C9645 +
             (C20049 * C5951 + C93585 * C6274) * C93718) *
                C14740 +
            (C26212 * C9644 + C26525 * C93829 +
             (C20049 * C16396 + C93585 * C16398) * C9645 +
             (C20049 * C16566 + C93585 * C16884) * C93718) *
                C14741) *
               C2696 -
           ((C26527 + C26521 + C26520 + C26519) * C14741 +
            (C26526 + C26516 + C26515 + C26514) * C14740 +
            (C27444 * C93718 + C27144 * C9645 +
             (C20049 * C277 + C93585 * C580) * C93829 +
             (C20049 * C109 + C93585 * C115) * C9644) *
                C14739) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C9644 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93829 +
            (C11304 + C11305 + C11306) * C9645 +
            (C11588 + C11589 + C11590) * C93718) *
               C93680 * C2695 -
           ((C11591 + C11592 + C11593) * C93718 +
            (C11313 + C11314 + C11315) * C9645 +
            (C11590 + C11589 + C11588) * C93829 +
            (C11306 + C11305 + C11304) * C9644) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C13200 + C13201 + C13202) * C9644 +
            (C13521 + C13522 + C13523) * C93829 +
            (C4081 * C1390 + C4075 * C1398 + C4083 * C1391 + C4076 * C1399 +
             C4085 * C1392 + C4077 * C1400) *
                C9645 +
            (C4081 * C1538 + C4075 * C1786 + C4083 * C1539 + C4076 * C1787 +
             C4085 * C1540 + C4077 * C1788) *
                C93718) *
               C93680 * C2696 -
           ((C13523 + C13522 + C13521) * C93718 +
            (C13202 + C13201 + C13200) * C9645 +
            (C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
             C4081 * C277 + C4075 * C580) *
                C93829 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C9644) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C39144 +
            (C20049 * C276 + C93585 * C579) * C39039 + C25319 * C39145 +
            C25604 * C39040 + C25326 * C39146 + C25607 * C39041 +
            C35699 * C39147 + C35972 * C39042) *
               C93680 * C2695 -
           (C40335 * C39042 + C40167 * C39147 + C35972 * C39041 +
            C35699 * C39146 + C25607 * C39040 + C25326 * C39145 +
            C25604 * C39039 + C25319 * C39144) *
               C93680 * C2696) *
              C93625 * C1981 +
          ((C27144 * C39144 + C27444 * C39039 + C37473 * C39145 +
            C37785 * C39040 + C41331 * C39146 + C41538 * C39041 +
            (C20049 * C30189 + C93585 * C30191) * C39147 +
            (C20049 * C30409 + C93585 * C30775) * C39042) *
               C93680 * C2696 -
           (C41538 * C39042 + C41331 * C39147 + C37785 * C39041 +
            C37473 * C39146 + C27444 * C39040 + C27144 * C39145 +
            (C20049 * C277 + C93585 * C580) * C39039 +
            (C20049 * C109 + C93585 * C115) * C39144) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezy[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C9644 +
            (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
             C14840 * C956 + C14741 * C1262) *
                C93829 +
            (C25133 + C25134 + C25135) * C9645 +
            (C25696 + C25697 + C25698) * C93718) *
               C93585 * C2695 -
           ((C25699 + C25700 + C25701) * C93718 +
            (C25142 + C25143 + C25144) * C9645 +
            (C25698 + C25697 + C25696) * C93829 +
            (C25135 + C25134 + C25133) * C9644) *
               C93585 * C2696) *
              C93625 * C1981 +
          (((C18261 + C18260 + C18259) * C9644 +
            (C18891 + C18890 + C18889) * C93829 +
            (C14838 * C1390 + C14739 * C1472 + C14839 * C5776 + C14740 * C5871 +
             C14840 * C16396 + C14741 * C16488) *
                C9645 +
            (C14838 * C1538 + C14739 * C1844 + C14839 * C5951 + C14740 * C6351 +
             C14840 * C16566 + C14741 * C16960) *
                C93718) *
               C93585 * C2696 -
           ((C18889 + C18890 + C18891) * C93718 +
            (C18259 + C18260 + C18261) * C9645 +
            (C15393 + C15392 + C15391) * C93829 +
            (C14868 + C14867 + C14866) * C9644) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C9644 +
             (C188 * C276 + C93680 * C635) * C93829 + C11107 * C9645 +
             C11679 * C93718) *
                C4075 +
            (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
               C2695 -
           ((C13622 + C13623 + C13624 + C13625) * C4077 +
            (C13626 + C13627 + C13628 + C13629) * C4076 +
            (C11682 * C93718 + C11114 * C9645 + C11679 * C93829 +
             C11107 * C9644) *
                C4075) *
               C2696) *
              C93625 * C1981 +
          (((C13629 + C13628 + C13627 + C13626) * C4075 +
            (C13625 + C13624 + C13623 + C13622) * C4076 +
            (C2786 * C9644 + C3252 * C93829 +
             (C188 * C1392 + C93680 * C1474) * C9645 +
             (C188 * C1540 + C93680 * C1846) * C93718) *
                C4077) *
               C2696 -
           ((C10085 + C10086 + C10087 + C10088) * C4077 +
            (C10084 + C10083 + C10082 + C10081) * C4076 +
            (C10080 + C10079 + C10078 + C10077) * C4075) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C39144 +
            (C188 * C276 + C93680 * C635) * C39039 + C11107 * C39145 +
            C11679 * C39040 + C11114 * C39146 + C11682 * C39041 +
            C30328 * C39147 + C30877 * C39042) *
               C93585 * C2695 -
           (C40389 * C39042 + C40048 * C39147 + C30877 * C39041 +
            C30328 * C39146 + C11682 * C39040 + C11114 * C39145 +
            C11679 * C39039 + C11107 * C39144) *
               C93585 * C2696) *
              C93625 * C1981 +
          ((C2790 * C39144 + C3254 * C39039 + C11112 * C39145 +
            C11681 * C39040 + C30326 * C39146 + C30876 * C39041 +
            (C188 * C30189 + C93680 * C30304) * C39147 +
            (C188 * C30409 + C93680 * C30870) * C39042) *
               C93585 * C2696 -
           (C30876 * C39042 + C30326 * C39147 + C11681 * C39041 +
            C11112 * C39146 + C3254 * C39040 + C2790 * C39145 + C654 * C39039 +
            C218 * C39144) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezz[43] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                       C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                          C14739 +
                      (C24921 + C24922) * C14740 + C24927 * C14741) *
                         C93585 * C2695 -
                     ((C10166 * C16395 + C25778 + C25778 + C93718 * C17035 +
                       C10165 * C8520 + C25779 + C25779 + C93829 * C9406) *
                          C14741 +
                      (C10166 * C5775 + C14659 + C14659 + C93718 * C6427 +
                       C10165 * C3409 + C14658 + C14658 + C93829 * C3993) *
                          C14740 +
                      (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
                       C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                          C14739) *
                         C93585 * C2696) *
                        C93625 * C1981 +
                    (((C13749 + C13748) * C14739 +
                      (C10165 * C3410 + C14660 + C14660 + C93829 * C3994 +
                       C10166 * C5776 + C14661 + C14661 + C93718 * C6428) *
                          C14740 +
                      (C10165 * C8521 + C27641 + C27641 + C93829 * C9407 +
                       C10166 * C16396 + C27642 + C27642 + C93718 * C17036) *
                          C14741) *
                         C93585 * C2696 -
                     ((C26735 + C26734) * C14741 + (C12746 + C12747) * C14740 +
                      (C10203 + C10202) * C14739) *
                         C93585 * C2695) *
                        C93625 * C1982)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                       C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                          C93680 * C4075 +
                      (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                         C2695 -
                     ((C13746 + C13747) * C93680 * C4077 +
                      (C13748 + C13749) * C93680 * C4076 +
                      (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
                       C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                          C93680 * C4075) *
                         C2696) *
                        C93625 * C1981 +
                    (((C13749 + C13748) * C93680 * C4075 +
                      (C13747 + C13746) * C93680 * C4076 +
                      (C10165 * C1385 + C13736 + C13736 + C93829 * C1897 +
                       C10166 * C1392 + C13737 + C13737 + C93718 * C1904) *
                          C93680 * C4077) *
                         C2696 -
                     ((C10206 + C10207) * C93680 * C4077 +
                      (C10205 + C10204) * C93680 * C4076 +
                      (C10203 + C10202) * C93680 * C4075) *
                         C2695) *
                        C93625 * C1982)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C39448 * C108 + C39453 + C39453 + C39039 * C714 +
                      C39449 * C1388 + C39454 + C39454 + C39040 * C1900 +
                      C39450 * C1389 + C39455 + C39455 + C39041 * C1901 +
                      C39451 * C10964 + C39456 + C39456 + C39042 * C11756) *
                         C93680 * C93585 * C2695 -
                     (C39451 * C30188 + C40441 + C40441 + C39042 * C30951 +
                      C39450 * C10964 + C40442 + C40442 + C39041 * C11756 +
                      C39449 * C1389 + C40443 + C40443 + C39040 * C1901 +
                      C39448 * C1388 + C40444 + C40444 + C39039 * C1900) *
                         C93680 * C93585 * C2696) *
                        C93625 * C1981 +
                    ((C39448 * C1387 + C41671 + C41671 + C39039 * C1899 +
                      C39449 * C1390 + C41672 + C41672 + C39040 * C1902 +
                      C39450 * C10965 + C41673 + C41673 + C39041 * C11757 +
                      C39451 * C30189 + C41674 + C41674 + C39042 * C30952) *
                         C93680 * C93585 * C2696 -
                     (C39451 * C10965 + C39457 + C39457 + C39042 * C11757 +
                      C39450 * C1390 + C39458 + C39458 + C39041 * C1902 +
                      C39449 * C1387 + C39459 + C39459 + C39040 * C1899 +
                      C39448 * C109 + C39460 + C39460 + C39039 * C715) *
                         C93680 * C93585 * C2695) *
                        C93625 * C1982)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93829 +
           (C4080 * C1388 + C5790 + C5790 + C4075 * C1404 + C4082 * C1387 +
            C5789 + C5789 + C4076 * C1403 + C4084 * C1386 + C5788 + C5788 +
            C4077 * C1402) *
               C93718) *
              C93680 * C93639 * C800 -
          ((C8545 + C8546 + C8547) * C93718 +
           (C4939 + C4938 + C4937) * C93829) *
              C93680 * C93639 * C801 +
          ((C4942 + C4941 + C4940) * C93829 +
           (C4080 * C8520 + C8536 + C8536 + C4075 * C8526 + C4082 * C8521 +
            C8537 + C8537 + C4076 * C8527 + C4084 * C8522 + C8538 + C8538 +
            C4077 * C8528) *
               C93718) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93829 +
           (C4080 * C1388 + C5790 + C5790 + C4075 * C1404 + C4082 * C1387 +
            C5789 + C5789 + C4076 * C1403 + C4084 * C1386 + C5788 + C5788 +
            C4077 * C1402) *
               C93718) *
              C93680 * C93639 * C93625 * C97 -
          ((C4084 * C1385 + C7537 + C7537 + C4077 * C1401 + C4082 * C1386 +
            C7536 + C7536 + C4076 * C1402 + C4080 * C1387 + C7535 + C7535 +
            C4075 * C1403) *
               C93718 +
           (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 + C4097 +
            C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
            C4075 * C121) *
               C93829) *
              C93680 * C93639 * C93625 * C98 +
          ((C4080 * C110 + C4099 + C4099 + C4075 * C122 + C4082 * C111 + C4100 +
            C4100 + C4076 * C123 + C4084 * C112 + C4101 + C4101 +
            C4077 * C124) *
               C93829 +
           (C4080 * C1386 + C9494 + C9494 + C4075 * C1402 + C4082 * C1385 +
            C9495 + C9495 + C4076 * C1401 + C4084 * C2697 + C9496 + C9496 +
            C4077 * C2699) *
               C93718) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
            (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) * C93718) *
               C14739 +
           (C20554 * C93829 + C22873 * C93718) * C14740 +
           (C20555 * C93829 + C22872 * C93718) * C14741) *
              C93639 * C93625 * C97 -
          (((C20048 * C8521 + C22255 + C22255 + C93585 * C8527) * C93718 +
            C21611 * C93829) *
               C14741 +
           ((C20048 * C3410 + C22254 + C22254 + C93585 * C3418) * C93718 +
            C21610 * C93829) *
               C14740 +
           ((C20048 * C1387 + C22253 + C22253 + C93585 * C1403) * C93718 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93829) *
               C14739) *
              C93639 * C93625 * C98 +
          (((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C93829 +
            (C20048 * C1386 + C23547 + C23547 + C93585 * C1402) * C93718) *
               C14739 +
           ((C20048 * C805 + C20060 + C20060 + C93585 * C821) * C93829 +
            (C20048 * C3411 + C23548 + C23548 + C93585 * C3419) * C93718) *
               C14740 +
           ((C20048 * C810 + C20061 + C20061 + C93585 * C826) * C93829 +
            (C20048 * C8522 + C23549 + C23549 + C93585 * C8528) * C93718) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
            (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) * C93718) *
               C14739 +
           (C24216 + C24217) * C14740 + C24222 * C14741) *
              C93639 * C800 -
          ((C24220 + C24221) * C14741 + (C24219 + C24218) * C14740 +
           (C24217 + C24216) * C14739) *
              C93639 * C801 +
          (C24222 * C14739 + (C24221 + C24220) * C14740 +
           (C20557 * C93829 +
            (C20048 * C22854 + C22864 + C22864 + C93585 * C22856) * C93718) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C39039 +
           C25027 * C39040 + C25030 * C39041 + C35410 * C39042) *
              C93680 * C93639 * C93625 * C97 -
          ((C20048 * C10965 + C37152 + C37152 + C93585 * C10971) * C39042 +
           C37156 * C39041 + C26841 * C39040 +
           (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C39039) *
              C93680 * C93639 * C93625 * C98 +
          ((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C39039 +
           (C20048 * C1386 + C23547 + C23547 + C93585 * C1402) * C39040 +
           (C20048 * C1391 + C33951 + C33951 + C93585 * C1407) * C39041 +
           (C20048 * C10966 + C39044 + C39044 + C93585 * C10972) * C39042) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C39039 +
           C25027 * C39040 + C25030 * C39041 + C35410 * C39042) *
              C93680 * C93639 * C800 -
          (C35409 * C39042 + C25029 * C39041 + C22873 * C39040 +
           C20554 * C39039) *
              C93680 * C93639 * C801 +
          (C20555 * C39039 + C22872 * C39040 + C25028 * C39041 +
           (C20048 * C25002 + C25018 + C25018 + C93585 * C25006) * C39042) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C93680 * C189) * C4081 +
                      (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
                      C219 * C4076 + C220 * C4085 + C221 * C4077) *
                         C93829 +
                     ((C188 * C1388 + C93680 * C1470) * C4081 +
                      (C188 * C1396 + C93680 * C1478) * C4075 + C2790 * C4083 +
                      C2789 * C4076 + C2788 * C4085 + C2787 * C4077) *
                         C93718) *
                        C93639 * C800 -
                    (((C188 * C3415 + C93680 * C3497) * C4077 +
                      (C188 * C3411 + C93680 * C3493) * C4085 +
                      (C188 * C3414 + C93680 * C3496) * C4076 +
                      (C188 * C3410 + C93680 * C3492) * C4083 +
                      (C188 * C3413 + C93680 * C3495) * C4075 +
                      (C188 * C3409 + C93680 * C3491) * C4081) *
                         C93718 +
                     (C2073 * C4077 + C2074 * C4085 + C2075 * C4076 +
                      C2076 * C4083 + (C188 * C815 + C93680 * C897) * C4075 +
                      (C188 * C807 + C93680 * C889) * C4081) *
                         C93829) *
                        C93639 * C801 +
                    (((C188 * C808 + C93680 * C890) * C4081 +
                      (C188 * C816 + C93680 * C898) * C4075 +
                      (C188 * C809 + C93680 * C891) * C4083 +
                      (C188 * C817 + C93680 * C899) * C4076 +
                      (C188 * C810 + C93680 * C892) * C4085 +
                      (C188 * C818 + C93680 * C900) * C4077) *
                         C93829 +
                     ((C188 * C8520 + C93680 * C8645) * C4081 +
                      (C188 * C8523 + C93680 * C8648) * C4075 +
                      (C188 * C8521 + C93680 * C8646) * C4083 +
                      (C188 * C8524 + C93680 * C8649) * C4076 +
                      (C188 * C8522 + C93680 * C8647) * C4085 +
                      (C188 * C8525 + C93680 * C8650) * C4077) *
                         C93718) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C93680 * C189) * C4081 +
                      (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
                      C219 * C4076 + C220 * C4085 + C221 * C4077) *
                         C93829 +
                     ((C188 * C1388 + C93680 * C1470) * C4081 +
                      (C188 * C1396 + C93680 * C1478) * C4075 + C2790 * C4083 +
                      C2789 * C4076 + C2788 * C4085 + C2787 * C4077) *
                         C93718) *
                        C93639 * C93625 * C97 -
                    ((C2785 * C4077 + C2786 * C4085 + C2787 * C4076 +
                      C2788 * C4083 + C2789 * C4075 + C2790 * C4081) *
                         C93718 +
                     (C223 * C4077 + C222 * C4085 + C221 * C4076 +
                      C220 * C4083 + C219 * C4075 + C218 * C4081) *
                         C93829) *
                        C93639 * C93625 * C98 +
                    ((C220 * C4081 + C221 * C4075 + C222 * C4083 +
                      C223 * C4076 + C225 * C4085 + C224 * C4077) *
                         C93829 +
                     (C2788 * C4081 + C2787 * C4075 + C2786 * C4083 +
                      C2785 * C4076 + (C188 * C2697 + C93680 * C2770) * C4085 +
                      (C188 * C2698 + C93680 * C2771) * C4077) *
                         C93718) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C14838 * C108 + C14739 * C189 + C14839 * C807 +
                       C14740 * C889 + C14840 * C808 + C14741 * C890) *
                          C20049 +
                      (C14838 * C114 + C14739 * C195 + C14839 * C815 +
                       C14740 * C897 + C14840 * C816 + C14741 * C898) *
                          C93585) *
                         C93829 +
                     ((C14838 * C1388 + C14739 * C1470 + C14839 * C3409 +
                       C14740 * C3491 + C14840 * C8520 + C14741 * C8645) *
                          C20049 +
                      (C14838 * C1396 + C14739 * C1478 + C14839 * C3413 +
                       C14740 * C3495 + C14840 * C8523 + C14741 * C8648) *
                          C93585) *
                         C93718) *
                        C93639 * C93625 * C97 -
                    (((C18256 + C18257 + C18258) * C93585 +
                      (C18259 + C18260 + C18261) * C20049) *
                         C93718 +
                     ((C14871 + C14870 + C14869) * C93585 +
                      (C14868 + C14867 + C14866) * C20049) *
                         C93829) *
                        C93639 * C93625 * C98 +
                    (((C14877 + C14876 + C14875) * C20049 +
                      (C14874 + C14873 + C14872) * C93585) *
                         C93829 +
                     ((C14838 * C1386 + C14739 * C1468 + C14839 * C3411 +
                       C14740 * C3493 + C14840 * C8522 + C14741 * C8647) *
                          C20049 +
                      (C14838 * C1394 + C14739 * C1476 + C14839 * C3415 +
                       C14740 * C3497 + C14840 * C8525 + C14741 * C8650) *
                          C93585) *
                         C93718) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C14838 * C108 + C14739 * C189 + C14839 * C807 +
                       C14740 * C889 + C14840 * C808 + C14741 * C890) *
                          C20049 +
                      (C14838 * C114 + C14739 * C195 + C14839 * C815 +
                       C14740 * C897 + C14840 * C816 + C14741 * C898) *
                          C93585) *
                         C93829 +
                     ((C14838 * C1388 + C14739 * C1470 + C14839 * C3409 +
                       C14740 * C3491 + C14840 * C8520 + C14741 * C8645) *
                          C20049 +
                      (C14838 * C1396 + C14739 * C1478 + C14839 * C3413 +
                       C14740 * C3495 + C14840 * C8523 + C14741 * C8648) *
                          C93585) *
                         C93718) *
                        C93639 * C800 -
                    (((C14840 * C19097 + C14741 * C19223 + C14839 * C8523 +
                       C14740 * C8648 + C14838 * C3413 + C14739 * C3495) *
                          C93585 +
                      (C14840 * C19095 + C14741 * C19221 + C14839 * C8520 +
                       C14740 * C8645 + C14838 * C3409 + C14739 * C3491) *
                          C20049) *
                         C93718 +
                     ((C14840 * C4900 + C14741 * C5019 + C14839 * C816 +
                       C14740 * C898 + C14838 * C815 + C14739 * C897) *
                          C93585 +
                      (C14840 * C4897 + C14741 * C5016 + C14839 * C808 +
                       C14740 * C890 + C14838 * C807 + C14739 * C889) *
                          C20049) *
                         C93829) *
                        C93639 * C801 +
                    (((C14838 * C808 + C14739 * C890 + C14839 * C4897 +
                       C14740 * C5016 + C14840 * C15550 + C14741 * C15666) *
                          C20049 +
                      (C14838 * C816 + C14739 * C898 + C14839 * C4900 +
                       C14740 * C5019 + C14840 * C15552 + C14741 * C15668) *
                          C93585) *
                         C93829 +
                     ((C14838 * C8520 + C14739 * C8645 + C14839 * C19095 +
                       C14740 * C19221 + C14840 * C22854 + C14741 * C22942) *
                          C20049 +
                      (C14838 * C8523 + C14739 * C8648 + C14839 * C19097 +
                       C14740 * C19223 + C14840 * C22855 + C14741 * C22943) *
                          C93585) *
                         C93718) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C93680 * C189) * C20049 +
                      (C188 * C114 + C93680 * C195) * C93585) *
                         C39039 +
                     (C11107 * C20049 + C11108 * C93585) * C39040 +
                     (C11114 * C20049 + C11113 * C93585) * C39041 +
                     (C30328 * C20049 + C30327 * C93585) * C39042) *
                        C93639 * C93625 * C97 -
                    ((C30325 * C93585 + C30326 * C20049) * C39042 +
                     (C11111 * C93585 + C11112 * C20049) * C39041 +
                     (C2789 * C93585 + C2790 * C20049) * C39040 +
                     (C219 * C93585 + C218 * C20049) * C39039) *
                        C93639 * C93625 * C98 +
                    ((C220 * C20049 + C221 * C93585) * C39039 +
                     (C2788 * C20049 + C2787 * C93585) * C39040 +
                     (C11110 * C20049 + C11109 * C93585) * C39041 +
                     ((C188 * C10966 + C93680 * C11082) * C20049 +
                      (C188 * C10969 + C93680 * C11085) * C93585) *
                         C39042) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C93680 * C189) * C20049 +
                      (C188 * C114 + C93680 * C195) * C93585) *
                         C39039 +
                     (C11107 * C20049 + C11108 * C93585) * C39040 +
                     (C11114 * C20049 + C11113 * C93585) * C39041 +
                     (C30328 * C20049 + C30327 * C93585) * C39042) *
                        C93639 * C800 -
                    (((C188 * C25003 + C93680 * C25106) * C93585 +
                      (C188 * C25001 + C93680 * C25104) * C20049) *
                         C39042 +
                     (C33142 * C93585 + C33141 * C20049) * C39041 +
                     (C13955 * C93585 + C13954 * C20049) * C39040 +
                     ((C188 * C815 + C93680 * C897) * C93585 +
                      (C188 * C807 + C93680 * C889) * C20049) *
                         C39039) *
                        C93639 * C801 +
                    (((C188 * C808 + C93680 * C890) * C20049 +
                      (C188 * C816 + C93680 * C898) * C93585) *
                         C39039 +
                     ((C188 * C8520 + C93680 * C8645) * C20049 +
                      (C188 * C8523 + C93680 * C8648) * C93585) *
                         C39040 +
                     ((C188 * C16395 + C93680 * C16487) * C20049 +
                      (C188 * C16397 + C93680 * C16489) * C93585) *
                         C39041 +
                     ((C188 * C25002 + C93680 * C25105) * C20049 +
                      (C188 * C25004 + C93680 * C25107) * C93585) *
                         C39042) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C4081 +
           (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
               C4075 +
           (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
           C9684 * C4077) *
              C93680 * C93639 * C800 -
          ((C9645 * C3415 + C93718 * C3571 + C9644 * C813 + C93829 * C961) *
               C4077 +
           (C9645 * C3411 + C93718 * C3567 + C9644 * C805 + C93829 * C953) *
               C4085 +
           (C9645 * C3414 + C93718 * C3570 + C9644 * C814 + C93829 * C962) *
               C4076 +
           (C9645 * C3410 + C93718 * C3566 + C9644 * C806 + C93829 * C954) *
               C4083 +
           (C9645 * C3413 + C93718 * C3569 + C9644 * C815 + C93829 * C963) *
               C4075 +
           (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
               C4081) *
              C93680 * C93639 * C801 +
          ((C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
               C4081 +
           (C9644 * C816 + C93829 * C964 + C9645 * C8523 + C93718 * C8752) *
               C4075 +
           (C9644 * C809 + C93829 * C957 + C9645 * C8521 + C93718 * C8750) *
               C4083 +
           (C9644 * C817 + C93829 * C965 + C9645 * C8524 + C93718 * C8753) *
               C4076 +
           (C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
               C4085 +
           (C9644 * C818 + C93829 * C966 + C9645 * C8525 + C93718 * C8754) *
               C4077) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C4081 +
           (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
               C4075 +
           (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
           C9684 * C4077) *
              C93680 * C93639 * C93625 * C97 -
          ((C9679 + C9680) * C4077 + (C9681 + C9682) * C4085 +
           (C9678 + C9677) * C4076 + (C9676 + C9675) * C4083 +
           (C9674 + C9673) * C4075 + (C9672 + C9671) * C4081) *
              C93680 * C93639 * C93625 * C98 +
          (C9683 * C4081 + C9684 * C4075 + (C9682 + C9681) * C4083 +
           (C9680 + C9679) * C4076 +
           (C9644 * C112 + C93829 * C280 + C9645 * C2697 + C93718 * C2856) *
               C4085 +
           (C9644 * C118 + C93829 * C286 + C9645 * C2698 + C93718 * C2857) *
               C4077) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C20049 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C93585) *
               C14739 +
           ((C9644 * C807 + C93829 * C955 + C9645 * C3409 + C93718 * C3565) *
                C20049 +
            (C9644 * C815 + C93829 * C963 + C9645 * C3413 + C93718 * C3569) *
                C93585) *
               C14740 +
           ((C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
                C20049 +
            (C9644 * C816 + C93829 * C964 + C9645 * C8523 + C93718 * C8752) *
                C93585) *
               C14741) *
              C93639 * C93625 * C97 -
          (((C9645 * C8524 + C93718 * C8753 + C9644 * C817 + C93829 * C965) *
                C93585 +
            (C9645 * C8521 + C93718 * C8750 + C9644 * C809 + C93829 * C957) *
                C20049) *
               C14741 +
           ((C12098 + C12099) * C93585 + (C12100 + C12101) * C20049) * C14740 +
           ((C9674 + C9673) * C93585 + (C9672 + C9671) * C20049) * C14739) *
              C93639 * C93625 * C98 +
          ((C9683 * C20049 + C9684 * C93585) * C14739 +
           ((C12097 + C12096) * C20049 + (C12095 + C12094) * C93585) * C14740 +
           ((C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
                C20049 +
            (C9644 * C818 + C93829 * C966 + C9645 * C8525 + C93718 * C8754) *
                C93585) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C20049 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C93585) *
               C14739 +
           ((C24395 + C24396) * C20049 + (C24397 + C24398) * C93585) * C14740 +
           C24411 * C14741) *
              C93639 * C800 -
          (((C24403 + C24404) * C93585 + (C24405 + C24406) * C20049) * C14741 +
           ((C24402 + C24401) * C93585 + (C24400 + C24399) * C20049) * C14740 +
           ((C24398 + C24397) * C93585 + (C24396 + C24395) * C20049) * C14739) *
              C93639 * C801 +
          (C24411 * C14739 +
           ((C24406 + C24405) * C20049 + (C24404 + C24403) * C93585) * C14740 +
           ((C9644 * C15550 + C93829 * C15744 + C9645 * C22854 +
             C93718 * C23010) *
                C20049 +
            (C9644 * C15552 + C93829 * C15746 + C9645 * C22855 +
             C93718 * C23011) *
                C93585) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
            C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
            C39042 * C11196) *
               C20049 +
           (C39144 * C114 + C39039 * C282 + C39145 * C1396 + C39040 * C1544 +
            C39146 * C1397 + C39041 * C1545 + C39147 * C10967 +
            C39042 * C11199) *
               C93585) *
              C93680 * C93639 * C93625 * C97 -
          ((C39147 * C10968 + C39042 * C11200 + C39146 * C1398 +
            C39041 * C1546 + C39145 * C1395 + C39040 * C1543 + C39144 * C115 +
            C39039 * C283) *
               C93585 +
           (C39147 * C10965 + C39042 * C11197 + C39146 * C1390 +
            C39041 * C1538 + C39145 * C1387 + C39040 * C1535 + C39144 * C109 +
            C39039 * C277) *
               C20049) *
              C93680 * C93639 * C93625 * C98 +
          ((C39144 * C110 + C39039 * C278 + C39145 * C1386 + C39040 * C1534 +
            C39146 * C1391 + C39041 * C1539 + C39147 * C10966 +
            C39042 * C11198) *
               C20049 +
           (C39144 * C116 + C39039 * C284 + C39145 * C1394 + C39040 * C1542 +
            C39146 * C1399 + C39041 * C1547 + C39147 * C10969 +
            C39042 * C11201) *
               C93585) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
            C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
            C39042 * C11196) *
               C20049 +
           (C39144 * C114 + C39039 * C282 + C39145 * C1396 + C39040 * C1544 +
            C39146 * C1397 + C39041 * C1545 + C39147 * C10967 +
            C39042 * C11199) *
               C93585) *
              C93680 * C93639 * C800 -
          ((C39147 * C25003 + C39042 * C25220 + C39146 * C5778 +
            C39041 * C5953 + C39145 * C3413 + C39040 * C3569 + C39144 * C815 +
            C39039 * C963) *
               C93585 +
           (C39147 * C25001 + C39042 * C25218 + C39146 * C5775 +
            C39041 * C5950 + C39145 * C3409 + C39040 * C3565 + C39144 * C807 +
            C39039 * C955) *
               C20049) *
              C93680 * C93639 * C801 +
          ((C39144 * C808 + C39039 * C956 + C39145 * C8520 + C39040 * C8749 +
            C39146 * C16395 + C39041 * C16565 + C39147 * C25002 +
            C39042 * C25219) *
               C20049 +
           (C39144 * C816 + C39039 * C964 + C39145 * C8523 + C39040 * C8752 +
            C39146 * C16397 + C39041 * C16567 + C39147 * C25004 +
            C39042 * C25221) *
               C93585) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C188 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93680) *
               C93829 +
           ((C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
             C4085 * C1386 + C4077 * C1394) *
                C188 +
            (C4081 * C1470 + C4075 * C1602 + C4083 * C1469 + C4076 * C1601 +
             C4085 * C1468 + C4077 * C1600) *
                C93680) *
               C93718) *
              C93639 * C800 -
          (((C8881 + C8882 + C8883) * C93680 + (C8884 + C8885 + C8886) * C188) *
               C93718 +
           ((C5245 + C5244 + C5243) * C93680 + (C5242 + C5241 + C5240) * C188) *
               C93829) *
              C93639 * C801 +
          (((C5251 + C5250 + C5249) * C188 + (C5248 + C5247 + C5246) * C93680) *
               C93829 +
           ((C4081 * C8520 + C4075 * C8523 + C4083 * C8521 + C4076 * C8524 +
             C4085 * C8522 + C4077 * C8525) *
                C188 +
            (C4081 * C8645 + C4075 * C8865 + C4083 * C8646 + C4076 * C8866 +
             C4085 * C8647 + C4077 * C8867) *
                C93680) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C188 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93680) *
               C93829 +
           ((C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
             C4085 * C1386 + C4077 * C1394) *
                C188 +
            (C4081 * C1470 + C4075 * C1602 + C4083 * C1469 + C4076 * C1601 +
             C4085 * C1468 + C4077 * C1600) *
                C93680) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C4085 * C1467 + C4077 * C1599 + C4083 * C1468 + C4076 * C1600 +
             C4081 * C1469 + C4075 * C1601) *
                C93680 +
            (C4085 * C1385 + C4077 * C1393 + C4083 * C1386 + C4076 * C1394 +
             C4081 * C1387 + C4075 * C1395) *
                C188) *
               C93718 +
           ((C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
             C4081 * C190 + C4075 * C363) *
                C93680 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C188) *
               C93829) *
              C93639 * C93625 * C98 +
          (((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
             C4085 * C112 + C4077 * C118) *
                C188 +
            (C4081 * C191 + C4075 * C364 + C4083 * C192 + C4076 * C365 +
             C4085 * C193 + C4077 * C366) *
                C93680) *
               C93829 +
           ((C4081 * C1386 + C4075 * C1394 + C4083 * C1385 + C4076 * C1393 +
             C4085 * C2697 + C4077 * C2698) *
                C188 +
            (C4081 * C1468 + C4075 * C1600 + C4083 * C1467 + C4076 * C1599 +
             C4085 * C2770 + C4077 * C2942) *
                C93680) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C14838 +
            (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
            C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
               C93829 +
           ((C20049 * C1388 + C93585 * C1396) * C14838 +
            (C20049 * C1470 + C93585 * C1602) * C14739 + C23109 * C14839 +
            C23108 * C14740 + C23107 * C14840 + C23106 * C14741) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C20049 * C8646 + C93585 * C8866) * C14741 +
            (C20049 * C8521 + C93585 * C8524) * C14840 +
            (C20049 * C3492 + C93585 * C3640) * C14740 +
            (C20049 * C3410 + C93585 * C3414) * C14839 +
            (C20049 * C1469 + C93585 * C1601) * C14739 +
            (C20049 * C1387 + C93585 * C1395) * C14838) *
               C93718 +
           (C21835 * C14741 + C21834 * C14840 + C21833 * C14740 +
            C21832 * C14839 + (C20049 * C190 + C93585 * C363) * C14739 +
            (C20049 * C109 + C93585 * C115) * C14838) *
               C93829) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C14838 +
            (C20049 * C191 + C93585 * C364) * C14739 +
            (C20049 * C805 + C93585 * C813) * C14839 +
            (C20049 * C887 + C93585 * C1019) * C14740 +
            (C20049 * C810 + C93585 * C818) * C14840 +
            (C20049 * C892 + C93585 * C1024) * C14741) *
               C93829 +
           ((C20049 * C1386 + C93585 * C1394) * C14838 +
            (C20049 * C1468 + C93585 * C1600) * C14739 +
            (C20049 * C3411 + C93585 * C3415) * C14839 +
            (C20049 * C3493 + C93585 * C3641) * C14740 +
            (C20049 * C8522 + C93585 * C8525) * C14840 +
            (C20049 * C8647 + C93585 * C8867) * C14741) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C14838 +
            (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
            C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
               C93829 +
           ((C20049 * C1388 + C93585 * C1396) * C14838 +
            (C20049 * C1470 + C93585 * C1602) * C14739 + C23109 * C14839 +
            C23108 * C14740 + C23107 * C14840 + C23106 * C14741) *
               C93718) *
              C93639 * C800 -
          ((C23104 * C14741 + C23105 * C14840 + C23106 * C14740 +
            C23107 * C14839 + C23108 * C14739 + C23109 * C14838) *
               C93718 +
           (C20754 * C14741 + C20753 * C14840 + C20752 * C14740 +
            C20751 * C14839 + C20750 * C14739 + C20749 * C14838) *
               C93829) *
              C93639 * C801 +
          ((C20751 * C14838 + C20752 * C14739 + C20753 * C14839 +
            C20754 * C14740 + C20756 * C14840 + C20755 * C14741) *
               C93829 +
           (C23107 * C14838 + C23106 * C14739 + C23105 * C14839 +
            C23104 * C14740 + (C20049 * C22854 + C93585 * C22855) * C14840 +
            (C20049 * C22942 + C93585 * C23090) * C14741) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C188 +
            (C20049 * C189 + C93585 * C362) * C93680) *
               C39039 +
           (C25319 * C188 + C25320 * C93680) * C39040 +
           (C25326 * C188 + C25325 * C93680) * C39041 +
           (C35699 * C188 + C35698 * C93680) * C39042) *
              C93639 * C93625 * C97 -
          (((C20049 * C11081 + C93585 * C11277) * C93680 +
            (C20049 * C10965 + C93585 * C10968) * C188) *
               C39042 +
           (C37474 * C93680 + C37473 * C188) * C39041 +
           (C27145 * C93680 + C27144 * C188) * C39040 +
           ((C20049 * C190 + C93585 * C363) * C93680 +
            (C20049 * C109 + C93585 * C115) * C188) *
               C39039) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C188 +
            (C20049 * C191 + C93585 * C364) * C93680) *
               C39039 +
           ((C20049 * C1386 + C93585 * C1394) * C188 +
            (C20049 * C1468 + C93585 * C1600) * C93680) *
               C39040 +
           ((C20049 * C1391 + C93585 * C1399) * C188 +
            (C20049 * C1473 + C93585 * C1605) * C93680) *
               C39041 +
           ((C20049 * C10966 + C93585 * C10969) * C188 +
            (C20049 * C11082 + C93585 * C11278) * C93680) *
               C39042) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C188 +
            (C20049 * C189 + C93585 * C362) * C93680) *
               C39039 +
           (C25319 * C188 + C25320 * C93680) * C39040 +
           (C25326 * C188 + C25325 * C93680) * C39041 +
           (C35699 * C188 + C35698 * C93680) * C39042) *
              C93639 * C800 -
          ((C35696 * C93680 + C35697 * C188) * C39042 +
           (C25323 * C93680 + C25324 * C188) * C39041 +
           (C23108 * C93680 + C23109 * C188) * C39040 +
           (C20750 * C93680 + C20749 * C188) * C39039) *
              C93639 * C801 +
          ((C20751 * C188 + C20752 * C93680) * C39039 +
           (C23107 * C188 + C23106 * C93680) * C39040 +
           (C25322 * C188 + C25321 * C93680) * C39041 +
           ((C20049 * C25002 + C93585 * C25004) * C188 +
            (C20049 * C25105 + C93585 * C25297) * C93680) *
               C39042) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 + C448 * C4076 +
            C449 * C4077) *
               C93829 +
           ((C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C4075 +
            C3026 * C4076 + C3025 * C4077) *
               C93718) *
              C93639 * C800 -
          (((C418 * C3411 + C3716 + C3716 + C93680 * C3711) * C4077 +
            (C418 * C3410 + C3715 + C3715 + C93680 * C3710) * C4076 +
            (C418 * C3409 + C3714 + C3714 + C93680 * C3709) * C4075) *
               C93718 +
           (C2311 * C4077 + C2312 * C4076 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C4075) *
               C93829) *
              C93639 * C801 +
          (((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C4075 +
            (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C4076 +
            (C418 * C810 + C1091 + C1091 + C93680 * C1082) * C4077) *
               C93829 +
           ((C418 * C8520 + C10580 + C10580 + C93680 * C8984) * C4075 +
            (C418 * C8521 + C10581 + C10581 + C93680 * C8985) * C4076 +
            (C418 * C8522 + C10582 + C10582 + C93680 * C8986) * C4077) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 + C448 * C4076 +
            C449 * C4077) *
               C93829 +
           ((C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C4075 +
            C3026 * C4076 + C3025 * C4077) *
               C93718) *
              C93639 * C93625 * C97 -
          ((C3024 * C4077 + C3025 * C4076 + C3026 * C4075) * C93718 +
           (C450 * C4077 + C449 * C4076 + C448 * C4075) * C93829) *
              C93639 * C93625 * C98 +
          ((C449 * C4075 + C450 * C4076 + C451 * C4077) * C93829 +
           (C3025 * C4075 + C3024 * C4076 +
            (C418 * C2697 + C3017 + C3017 + C93680 * C3009) * C4077) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93585 * C93829 +
           (C15099 * C1388 + C16727 + C16727 + C14739 * C1660 + C15100 * C3409 +
            C16726 + C16726 + C14740 * C3709 + C15101 * C8520 + C16725 +
            C16725 + C14741 * C8984) *
               C93585 * C93718) *
              C93639 * C93625 * C97 -
          ((C18577 + C18578 + C18579) * C93585 * C93718 +
           (C15141 + C15140 + C15139) * C93585 * C93829) *
              C93639 * C93625 * C98 +
          ((C15144 + C15143 + C15142) * C93585 * C93829 +
           (C15099 * C1386 + C18568 + C18568 + C14739 * C1658 + C15100 * C3411 +
            C18569 + C18569 + C14740 * C3711 + C15101 * C8522 + C18570 +
            C18570 + C14741 * C8986) *
               C93585 * C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93585 * C93829 +
           (C15099 * C1388 + C16727 + C16727 + C14739 * C1660 + C15100 * C3409 +
            C16726 + C16726 + C14740 * C3709 + C15101 * C8520 + C16725 +
            C16725 + C14741 * C8984) *
               C93585 * C93718) *
              C93639 * C800 -
          ((C15101 * C19095 + C19568 + C19568 + C14741 * C19563 +
            C15100 * C8520 + C19567 + C19567 + C14740 * C8984 + C15099 * C3409 +
            C19566 + C19566 + C14739 * C3709) *
               C93585 * C93718 +
           (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 + C15100 * C808 +
            C15970 + C15970 + C14740 * C1080 + C15099 * C807 + C15971 + C15971 +
            C14739 * C1079) *
               C93585 * C93829) *
              C93639 * C801 +
          ((C15099 * C808 + C15972 + C15972 + C14739 * C1080 + C15100 * C4897 +
            C15973 + C15973 + C14740 * C5325 + C15101 * C15550 + C15974 +
            C15974 + C14741 * C15963) *
               C93585 * C93829 +
           (C15099 * C8520 + C24560 + C24560 + C14739 * C8984 +
            C15100 * C19095 + C24561 + C24561 + C14740 * C19563 +
            C15101 * C22854 + C24562 + C24562 + C14741 * C23175) *
               C93585 * C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C93680 * C419) * C93585 * C39039 +
           C11414 * C93585 * C39040 + C11417 * C93585 * C39041 +
           C30622 * C93585 * C39042) *
              C93639 * C93625 * C97 -
          (C30621 * C93585 * C39042 + C11416 * C93585 * C39041 +
           C3026 * C93585 * C39040 + C448 * C93585 * C39039) *
              C93639 * C93625 * C98 +
          (C449 * C93585 * C39039 + C3025 * C93585 * C39040 +
           C11415 * C93585 * C39041 +
           (C418 * C10966 + C11405 + C11405 + C93680 * C11391) * C93585 *
               C39042) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C93680 * C419) * C93585 * C39039 +
           C11414 * C93585 * C39040 + C11417 * C93585 * C39041 +
           C30622 * C93585 * C39042) *
              C93639 * C800 -
          ((C418 * C25001 + C33460 + C33460 + C93680 * C25408) * C93585 *
               C39042 +
           C33464 * C93585 * C39041 + C14261 * C93585 * C39040 +
           (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C93585 * C39039) *
              C93639 * C801 +
          ((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C93585 * C39039 +
           (C418 * C8520 + C10580 + C10580 + C93680 * C8984) * C93585 * C39040 +
           (C418 * C16395 + C29805 + C29805 + C93680 * C16719) * C93585 *
               C39041 +
           (C418 * C25002 + C39715 + C39715 + C93680 * C25409) * C93585 *
               C39042) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C188 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C93680) *
               C4075 +
           ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
           C9928 * C4077) *
              C93639 * C800 -
          (((C9645 * C3493 + C93718 * C3785 + C9644 * C887 + C93829 * C1143) *
                C93680 +
            (C9645 * C3411 + C93718 * C3567 + C9644 * C805 + C93829 * C953) *
                C188) *
               C4077 +
           ((C9645 * C3492 + C93718 * C3784 + C9644 * C888 + C93829 * C1144) *
                C93680 +
            (C9645 * C3410 + C93718 * C3566 + C9644 * C806 + C93829 * C954) *
                C188) *
               C4076 +
           ((C9645 * C3491 + C93718 * C3783 + C9644 * C889 + C93829 * C1145) *
                C93680 +
            (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
                C188) *
               C4075) *
              C93639 * C801 +
          (((C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
                C188 +
            (C9644 * C890 + C93829 * C1146 + C9645 * C8645 + C93718 * C9091) *
                C93680) *
               C4075 +
           ((C9644 * C809 + C93829 * C957 + C9645 * C8521 + C93718 * C8750) *
                C188 +
            (C9644 * C891 + C93829 * C1147 + C9645 * C8646 + C93718 * C9092) *
                C93680) *
               C4076 +
           ((C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
                C188 +
            (C9644 * C892 + C93829 * C1148 + C9645 * C8647 + C93718 * C9093) *
                C93680) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C188 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C93680) *
               C4075 +
           ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
           C9928 * C4077) *
              C93639 * C93625 * C97 -
          (((C9924 + C9925) * C93680 + (C9681 + C9682) * C188) * C4077 +
           ((C9923 + C9922) * C93680 + (C9676 + C9675) * C188) * C4076 +
           ((C9921 + C9920) * C93680 + (C9672 + C9671) * C188) * C4075) *
              C93639 * C93625 * C98 +
          (C9928 * C4075 +
           ((C9682 + C9681) * C188 + (C9925 + C9924) * C93680) * C4076 +
           ((C9644 * C112 + C93829 * C280 + C9645 * C2697 + C93718 * C2856) *
                C188 +
            (C9644 * C193 + C93829 * C505 + C9645 * C2770 + C93718 * C3092) *
                C93680) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C14838 +
           (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
               C14739 +
           (C9644 * C807 + C93829 * C955 + C9645 * C3409 + C93718 * C3565) *
               C14839 +
           (C9644 * C889 + C93829 * C1145 + C9645 * C3491 + C93718 * C3783) *
               C14740 +
           (C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
               C14840 +
           (C9644 * C890 + C93829 * C1146 + C9645 * C8645 + C93718 * C9091) *
               C14741) *
              C93585 * C93639 * C93625 * C97 -
          ((C9645 * C8646 + C93718 * C9092 + C9644 * C891 + C93829 * C1147) *
               C14741 +
           (C9645 * C8521 + C93718 * C8750 + C9644 * C809 + C93829 * C957) *
               C14840 +
           (C12416 + C12417) * C14740 + (C12100 + C12101) * C14839 +
           (C9921 + C9920) * C14739 + (C9672 + C9671) * C14838) *
              C93585 * C93639 * C93625 * C98 +
          (C9683 * C14838 + C9926 * C14739 + (C12097 + C12096) * C14839 +
           (C12415 + C12414) * C14740 +
           (C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
               C14840 +
           (C9644 * C892 + C93829 * C1148 + C9645 * C8647 + C93718 * C9093) *
               C14741) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C14838 +
           (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
               C14739 +
           (C24395 + C24396) * C14839 + (C24649 + C24650) * C14740 +
           C24407 * C14840 + C24655 * C14741) *
              C93585 * C93639 * C800 -
          ((C24653 + C24654) * C14741 + (C24405 + C24406) * C14840 +
           (C24652 + C24651) * C14740 + (C24400 + C24399) * C14839 +
           (C24650 + C24649) * C14739 + (C24396 + C24395) * C14838) *
              C93585 * C93639 * C801 +
          (C24407 * C14838 + C24655 * C14739 + (C24406 + C24405) * C14839 +
           (C24654 + C24653) * C14740 +
           (C9644 * C15550 + C93829 * C15744 + C9645 * C22854 +
            C93718 * C23010) *
               C14840 +
           (C9644 * C15666 + C93829 * C16051 + C9645 * C22942 +
            C93718 * C23246) *
               C14741) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
            C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
            C39042 * C11196) *
               C188 +
           (C39144 * C189 + C39039 * C501 + C39145 * C1470 + C39040 * C1726 +
            C39146 * C1471 + C39041 * C1727 + C39147 * C11080 +
            C39042 * C11495) *
               C93680) *
              C93585 * C93639 * C93625 * C97 -
          ((C39147 * C11081 + C39042 * C11496 + C39146 * C1472 +
            C39041 * C1728 + C39145 * C1469 + C39040 * C1725 + C39144 * C190 +
            C39039 * C502) *
               C93680 +
           (C39147 * C10965 + C39042 * C11197 + C39146 * C1390 +
            C39041 * C1538 + C39145 * C1387 + C39040 * C1535 + C39144 * C109 +
            C39039 * C277) *
               C188) *
              C93585 * C93639 * C93625 * C98 +
          ((C39144 * C110 + C39039 * C278 + C39145 * C1386 + C39040 * C1534 +
            C39146 * C1391 + C39041 * C1539 + C39147 * C10966 +
            C39042 * C11198) *
               C188 +
           (C39144 * C191 + C39039 * C503 + C39145 * C1468 + C39040 * C1724 +
            C39146 * C1473 + C39041 * C1729 + C39147 * C11082 +
            C39042 * C11497) *
               C93680) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39144 * C108 + C39039 * C276 + C39145 * C1388 + C39040 * C1536 +
            C39146 * C1389 + C39041 * C1537 + C39147 * C10964 +
            C39042 * C11196) *
               C188 +
           (C39144 * C189 + C39039 * C501 + C39145 * C1470 + C39040 * C1726 +
            C39146 * C1471 + C39041 * C1727 + C39147 * C11080 +
            C39042 * C11495) *
               C93680) *
              C93585 * C93639 * C800 -
          ((C39147 * C25104 + C39042 * C25517 + C39146 * C5870 +
            C39041 * C6196 + C39145 * C3491 + C39040 * C3783 + C39144 * C889 +
            C39039 * C1145) *
               C93680 +
           (C39147 * C25001 + C39042 * C25218 + C39146 * C5775 +
            C39041 * C5950 + C39145 * C3409 + C39040 * C3565 + C39144 * C807 +
            C39039 * C955) *
               C188) *
              C93585 * C93639 * C801 +
          ((C39144 * C808 + C39039 * C956 + C39145 * C8520 + C39040 * C8749 +
            C39146 * C16395 + C39041 * C16565 + C39147 * C25002 +
            C39042 * C25219) *
               C188 +
           (C39144 * C890 + C39039 * C1146 + C39145 * C8645 + C39040 * C9091 +
            C39146 * C16487 + C39041 * C16807 + C39147 * C25105 +
            C39042 * C25518) *
               C93680) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C9644 +
           (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
            C4085 * C278 + C4077 * C581) *
               C93829 +
           (C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
            C4085 * C1386 + C4077 * C1394) *
               C9645 +
           (C4081 * C1536 + C4075 * C1784 + C4083 * C1535 + C4076 * C1783 +
            C4085 * C1534 + C4077 * C1782) *
               C93718) *
              C93680 * C93639 * C800 -
          ((C9205 + C9206 + C9207) * C93718 + (C8884 + C8885 + C8886) * C9645 +
           (C5521 + C5520 + C5519) * C93829 + (C5242 + C5241 + C5240) * C9644) *
              C93680 * C93639 * C801 +
          ((C5251 + C5250 + C5249) * C9644 + (C5524 + C5523 + C5522) * C93829 +
           (C4081 * C8520 + C4075 * C8523 + C4083 * C8521 + C4076 * C8524 +
            C4085 * C8522 + C4077 * C8525) *
               C9645 +
           (C4081 * C8749 + C4075 * C9195 + C4083 * C8750 + C4076 * C9196 +
            C4085 * C8751 + C4077 * C9197) *
               C93718) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C9644 +
           (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
            C4085 * C278 + C4077 * C581) *
               C93829 +
           (C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
            C4085 * C1386 + C4077 * C1394) *
               C9645 +
           (C4081 * C1536 + C4075 * C1784 + C4083 * C1535 + C4076 * C1783 +
            C4085 * C1534 + C4077 * C1782) *
               C93718) *
              C93680 * C93639 * C93625 * C97 -
          ((C4085 * C1533 + C4077 * C1781 + C4083 * C1534 + C4076 * C1782 +
            C4081 * C1535 + C4075 * C1783) *
               C93718 +
           (C4085 * C1385 + C4077 * C1393 + C4083 * C1386 + C4076 * C1394 +
            C4081 * C1387 + C4075 * C1395) *
               C9645 +
           (C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
            C4081 * C277 + C4075 * C580) *
               C93829 +
           (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
            C4081 * C109 + C4075 * C115) *
               C9644) *
              C93680 * C93639 * C93625 * C98 +
          ((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
            C4085 * C112 + C4077 * C118) *
               C9644 +
           (C4081 * C278 + C4075 * C581 + C4083 * C279 + C4076 * C582 +
            C4085 * C280 + C4077 * C583) *
               C93829 +
           (C4081 * C1386 + C4075 * C1394 + C4083 * C1385 + C4076 * C1393 +
            C4085 * C2697 + C4077 * C2698) *
               C9645 +
           (C4081 * C1534 + C4075 * C1782 + C4083 * C1533 + C4076 * C1781 +
            C4085 * C2856 + C4077 * C3174) *
               C93718) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C9644 +
            (C20049 * C276 + C93585 * C579) * C93829 +
            (C20049 * C1388 + C93585 * C1396) * C9645 +
            (C20049 * C1536 + C93585 * C1784) * C93718) *
               C14739 +
           (C20749 * C9644 + C20933 * C93829 + C23109 * C9645 +
            C23329 * C93718) *
               C14740 +
           (C20751 * C9644 + C20934 * C93829 + C23107 * C9645 +
            C23328 * C93718) *
               C14741) *
              C93639 * C93625 * C97 -
          (((C20049 * C8750 + C93585 * C9196) * C93718 +
            (C20049 * C8521 + C93585 * C8524) * C9645 + C22050 * C93829 +
            C21834 * C9644) *
               C14741 +
           ((C20049 * C3566 + C93585 * C3854) * C93718 +
            (C20049 * C3410 + C93585 * C3414) * C9645 + C22049 * C93829 +
            C21832 * C9644) *
               C14740 +
           ((C20049 * C1535 + C93585 * C1783) * C93718 +
            (C20049 * C1387 + C93585 * C1395) * C9645 +
            (C20049 * C277 + C93585 * C580) * C93829 +
            (C20049 * C109 + C93585 * C115) * C9644) *
               C14739) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C9644 +
            (C20049 * C278 + C93585 * C581) * C93829 +
            (C20049 * C1386 + C93585 * C1394) * C9645 +
            (C20049 * C1534 + C93585 * C1782) * C93718) *
               C14739 +
           ((C20049 * C805 + C93585 * C813) * C9644 +
            (C20049 * C953 + C93585 * C1201) * C93829 +
            (C20049 * C3411 + C93585 * C3415) * C9645 +
            (C20049 * C3567 + C93585 * C3855) * C93718) *
               C14740 +
           ((C20049 * C810 + C93585 * C818) * C9644 +
            (C20049 * C958 + C93585 * C1206) * C93829 +
            (C20049 * C8522 + C93585 * C8525) * C9645 +
            (C20049 * C8751 + C93585 * C9197) * C93718) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C9644 +
            (C20049 * C276 + C93585 * C579) * C93829 +
            (C20049 * C1388 + C93585 * C1396) * C9645 +
            (C20049 * C1536 + C93585 * C1784) * C93718) *
               C14739 +
           (C24730 + C24731 + C24732 + C24733) * C14740 + C24744 * C14741) *
              C93639 * C800 -
          ((C24738 + C24739 + C24740 + C24741) * C14741 +
           (C24737 + C24736 + C24735 + C24734) * C14740 +
           (C24733 + C24732 + C24731 + C24730) * C14739) *
              C93639 * C801 +
          (C24744 * C14739 + (C24741 + C24740 + C24739 + C24738) * C14740 +
           (C20756 * C9644 + C20936 * C93829 +
            (C20049 * C22854 + C93585 * C22855) * C9645 +
            (C20049 * C23010 + C93585 * C23316) * C93718) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C39144 +
           (C20049 * C276 + C93585 * C579) * C39039 + C25319 * C39145 +
           C25604 * C39040 + C25326 * C39146 + C25607 * C39041 +
           C35699 * C39147 + C35972 * C39042) *
              C93680 * C93639 * C93625 * C97 -
          ((C20049 * C11197 + C93585 * C11573) * C39042 +
           (C20049 * C10965 + C93585 * C10968) * C39147 + C37785 * C39041 +
           C37473 * C39146 + C27444 * C39040 + C27144 * C39145 +
           (C20049 * C277 + C93585 * C580) * C39039 +
           (C20049 * C109 + C93585 * C115) * C39144) *
              C93680 * C93639 * C93625 * C98 +
          ((C20049 * C110 + C93585 * C116) * C39144 +
           (C20049 * C278 + C93585 * C581) * C39039 +
           (C20049 * C1386 + C93585 * C1394) * C39145 +
           (C20049 * C1534 + C93585 * C1782) * C39040 +
           (C20049 * C1391 + C93585 * C1399) * C39146 +
           (C20049 * C1539 + C93585 * C1787) * C39041 +
           (C20049 * C10966 + C93585 * C10969) * C39147 +
           (C20049 * C11198 + C93585 * C11574) * C39042) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C39144 +
           (C20049 * C276 + C93585 * C579) * C39039 + C25319 * C39145 +
           C25604 * C39040 + C25326 * C39146 + C25607 * C39041 +
           C35699 * C39147 + C35972 * C39042) *
              C93680 * C93639 * C800 -
          (C35971 * C39042 + C35697 * C39147 + C25606 * C39041 +
           C25324 * C39146 + C23329 * C39040 + C23109 * C39145 +
           C20933 * C39039 + C20749 * C39144) *
              C93680 * C93639 * C801 +
          (C20751 * C39144 + C20934 * C39039 + C23107 * C39145 +
           C23328 * C39040 + C25322 * C39146 + C25605 * C39041 +
           (C20049 * C25002 + C93585 * C25004) * C39147 +
           (C20049 * C25219 + C93585 * C25594) * C39042) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C9644 +
            (C188 * C276 + C93680 * C635) * C93829 +
            (C188 * C1388 + C93680 * C1470) * C9645 +
            (C188 * C1536 + C93680 * C1842) * C93718) *
               C4075 +
           (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
              C93639 * C800 -
          (((C188 * C3567 + C93680 * C3925) * C93718 +
            (C188 * C3411 + C93680 * C3493) * C9645 + C2539 * C93829 +
            C2074 * C9644) *
               C4077 +
           ((C188 * C3566 + C93680 * C3924) * C93718 +
            (C188 * C3410 + C93680 * C3492) * C9645 + C2540 * C93829 +
            C2076 * C9644) *
               C4076 +
           ((C188 * C3565 + C93680 * C3923) * C93718 +
            (C188 * C3409 + C93680 * C3491) * C9645 +
            (C188 * C955 + C93680 * C1261) * C93829 +
            (C188 * C807 + C93680 * C889) * C9644) *
               C4075) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C9644 +
            (C188 * C956 + C93680 * C1262) * C93829 +
            (C188 * C8520 + C93680 * C8645) * C9645 +
            (C188 * C8749 + C93680 * C9305) * C93718) *
               C4075 +
           ((C188 * C809 + C93680 * C891) * C9644 +
            (C188 * C957 + C93680 * C1263) * C93829 +
            (C188 * C8521 + C93680 * C8646) * C9645 +
            (C188 * C8750 + C93680 * C9306) * C93718) *
               C4076 +
           ((C188 * C810 + C93680 * C892) * C9644 +
            (C188 * C958 + C93680 * C1264) * C93829 +
            (C188 * C8522 + C93680 * C8647) * C9645 +
            (C188 * C8751 + C93680 * C9307) * C93718) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C9644 +
            (C188 * C276 + C93680 * C635) * C93829 +
            (C188 * C1388 + C93680 * C1470) * C9645 +
            (C188 * C1536 + C93680 * C1842) * C93718) *
               C4075 +
           (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
              C93639 * C93625 * C97 -
          ((C10085 + C10086 + C10087 + C10088) * C4077 +
           (C10084 + C10083 + C10082 + C10081) * C4076 +
           (C10080 + C10079 + C10078 + C10077) * C4075) *
              C93639 * C93625 * C98 +
          (C10091 * C4075 + (C10088 + C10087 + C10086 + C10085) * C4076 +
           (C225 * C9644 + C657 * C93829 +
            (C188 * C2697 + C93680 * C2770) * C9645 +
            (C188 * C2856 + C93680 * C3241) * C93718) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C9644 +
           (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
            C14840 * C956 + C14741 * C1262) *
               C93829 +
           (C14838 * C1388 + C14739 * C1470 + C14839 * C3409 + C14740 * C3491 +
            C14840 * C8520 + C14741 * C8645) *
               C9645 +
           (C14838 * C1536 + C14739 * C1842 + C14839 * C3565 + C14740 * C3923 +
            C14840 * C8749 + C14741 * C9305) *
               C93718) *
              C93585 * C93639 * C93625 * C97 -
          ((C18889 + C18890 + C18891) * C93718 +
           (C18259 + C18260 + C18261) * C9645 +
           (C15393 + C15392 + C15391) * C93829 +
           (C14868 + C14867 + C14866) * C9644) *
              C93585 * C93639 * C93625 * C98 +
          ((C14877 + C14876 + C14875) * C9644 +
           (C15396 + C15395 + C15394) * C93829 +
           (C14838 * C1386 + C14739 * C1468 + C14839 * C3411 + C14740 * C3493 +
            C14840 * C8522 + C14741 * C8647) *
               C9645 +
           (C14838 * C1534 + C14739 * C1840 + C14839 * C3567 + C14740 * C3925 +
            C14840 * C8751 + C14741 * C9307) *
               C93718) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C9644 +
           (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
            C14840 * C956 + C14741 * C1262) *
               C93829 +
           (C14838 * C1388 + C14739 * C1470 + C14839 * C3409 + C14740 * C3491 +
            C14840 * C8520 + C14741 * C8645) *
               C9645 +
           (C14838 * C1536 + C14739 * C1842 + C14839 * C3565 + C14740 * C3923 +
            C14840 * C8749 + C14741 * C9305) *
               C93718) *
              C93585 * C93639 * C800 -
          ((C14840 * C19323 + C14741 * C19884 + C14839 * C8749 +
            C14740 * C9305 + C14838 * C3565 + C14739 * C3923) *
               C93718 +
           (C14840 * C19095 + C14741 * C19221 + C14839 * C8520 +
            C14740 * C8645 + C14838 * C3409 + C14739 * C3491) *
               C9645 +
           (C14840 * C5096 + C14741 * C5598 + C14839 * C956 + C14740 * C1262 +
            C14838 * C955 + C14739 * C1261) *
               C93829 +
           (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
            C14838 * C807 + C14739 * C889) *
               C9644) *
              C93585 * C93639 * C801 +
          ((C14838 * C808 + C14739 * C890 + C14839 * C4897 + C14740 * C5016 +
            C14840 * C15550 + C14741 * C15666) *
               C9644 +
           (C14838 * C956 + C14739 * C1262 + C14839 * C5096 + C14740 * C5598 +
            C14840 * C15744 + C14741 * C16231) *
               C93829 +
           (C14838 * C8520 + C14739 * C8645 + C14839 * C19095 +
            C14740 * C19221 + C14840 * C22854 + C14741 * C22942) *
               C9645 +
           (C14838 * C8749 + C14739 * C9305 + C14839 * C19323 +
            C14740 * C19884 + C14840 * C23010 + C14741 * C23398) *
               C93718) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C39144 +
           (C188 * C276 + C93680 * C635) * C39039 + C11107 * C39145 +
           C11679 * C39040 + C11114 * C39146 + C11682 * C39041 +
           C30328 * C39147 + C30877 * C39042) *
              C93585 * C93639 * C93625 * C97 -
          (C30876 * C39042 + C30326 * C39147 + C11681 * C39041 +
           C11112 * C39146 + C3254 * C39040 + C2790 * C39145 + C654 * C39039 +
           C218 * C39144) *
              C93585 * C93639 * C93625 * C98 +
          (C220 * C39144 + C655 * C39039 + C2788 * C39145 + C3253 * C39040 +
           C11110 * C39146 + C11680 * C39041 +
           (C188 * C10966 + C93680 * C11082) * C39147 +
           (C188 * C11198 + C93680 * C11669) * C39042) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C39144 +
           (C188 * C276 + C93680 * C635) * C39039 + C11107 * C39145 +
           C11679 * C39040 + C11114 * C39146 + C11682 * C39041 +
           C30328 * C39147 + C30877 * C39042) *
              C93585 * C93639 * C800 -
          ((C188 * C25218 + C93680 * C25681) * C39042 +
           (C188 * C25001 + C93680 * C25104) * C39147 + C33771 * C39041 +
           C33141 * C39146 + C14559 * C39040 + C13954 * C39145 +
           (C188 * C955 + C93680 * C1261) * C39039 +
           (C188 * C807 + C93680 * C889) * C39144) *
              C93585 * C93639 * C801 +
          ((C188 * C808 + C93680 * C890) * C39144 +
           (C188 * C956 + C93680 * C1262) * C39039 +
           (C188 * C8520 + C93680 * C8645) * C39145 +
           (C188 * C8749 + C93680 * C9305) * C39040 +
           (C188 * C16395 + C93680 * C16487) * C39146 +
           (C188 * C16565 + C93680 * C16959) * C39041 +
           (C188 * C25002 + C93680 * C25105) * C39147 +
           (C188 * C25219 + C93680 * C25682) * C39042) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[44] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C93680 * C4075 +
                     (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                        C93639 * C800 -
                    ((C10166 * C3411 + C10879 + C10879 + C93718 * C3995 +
                      C10165 * C805 + C10880 + C10880 + C93829 * C1317) *
                         C93680 * C4077 +
                     (C10166 * C3410 + C10881 + C10881 + C93718 * C3994 +
                      C10165 * C806 + C10882 + C10882 + C93829 * C1318) *
                         C93680 * C4076 +
                     (C10166 * C3409 + C10883 + C10883 + C93718 * C3993 +
                      C10165 * C807 + C10884 + C10884 + C93829 * C1319) *
                         C93680 * C4075) *
                        C93639 * C801 +
                    ((C10165 * C808 + C10885 + C10885 + C93829 * C1320 +
                      C10166 * C8520 + C10886 + C10886 + C93718 * C9406) *
                         C93680 * C4075 +
                     (C10165 * C809 + C10887 + C10887 + C93829 * C1321 +
                      C10166 * C8521 + C10888 + C10888 + C93718 * C9407) *
                         C93680 * C4076 +
                     (C10165 * C810 + C10889 + C10889 + C93829 * C1322 +
                      C10166 * C8522 + C10890 + C10890 + C93718 * C9408) *
                         C93680 * C4077) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C93680 * C4075 +
                     (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                        C93639 * C93625 * C97 -
                    ((C10206 + C10207) * C93680 * C4077 +
                     (C10205 + C10204) * C93680 * C4076 +
                     (C10203 + C10202) * C93680 * C4075) *
                        C93639 * C93625 * C98 +
                    (C10209 * C4075 + (C10207 + C10206) * C93680 * C4076 +
                     (C10165 * C112 + C10188 + C10188 + C93829 * C718 +
                      C10166 * C2697 + C10189 + C10189 + C93718 * C3323) *
                         C93680 * C4077) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C14739 +
                     (C10165 * C807 + C10884 + C10884 + C93829 * C1319 +
                      C10166 * C3409 + C10883 + C10883 + C93718 * C3993) *
                         C14740 +
                     (C10165 * C808 + C10885 + C10885 + C93829 * C1320 +
                      C10166 * C8520 + C10886 + C10886 + C93718 * C9406) *
                         C14741) *
                        C93585 * C93639 * C93625 * C97 -
                    ((C10166 * C8521 + C10888 + C10888 + C93718 * C9407 +
                      C10165 * C809 + C10887 + C10887 + C93829 * C1321) *
                         C14741 +
                     (C12746 + C12747) * C14740 + (C10203 + C10202) * C14739) *
                        C93585 * C93639 * C93625 * C98 +
                    (C10208 * C14739 + (C12745 + C12744) * C14740 +
                     (C10165 * C810 + C10889 + C10889 + C93829 * C1322 +
                      C10166 * C8522 + C10890 + C10890 + C93718 * C9408) *
                         C14741) *
                        C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C14739 +
                     (C24921 + C24922) * C14740 + C24927 * C14741) *
                        C93585 * C93639 * C800 -
                    ((C24925 + C24926) * C14741 + (C24924 + C24923) * C14740 +
                     (C24922 + C24921) * C14739) *
                        C93585 * C93639 * C801 +
                    (C24927 * C14739 + (C24926 + C24925) * C14740 +
                     (C10165 * C15550 + C24907 + C24907 + C93829 * C16307 +
                      C10166 * C22854 + C24908 + C24908 + C93718 * C23465) *
                         C14741) *
                        C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((C39448 * C108 + C39453 + C39453 + C39039 * C714 +
                     C39449 * C1388 + C39454 + C39454 + C39040 * C1900 +
                     C39450 * C1389 + C39455 + C39455 + C39041 * C1901 +
                     C39451 * C10964 + C39456 + C39456 + C39042 * C11756) *
                        C93680 * C93585 * C93639 * C93625 * C97 -
                    (C39451 * C10965 + C39457 + C39457 + C39042 * C11757 +
                     C39450 * C1390 + C39458 + C39458 + C39041 * C1902 +
                     C39449 * C1387 + C39459 + C39459 + C39040 * C1899 +
                     C39448 * C109 + C39460 + C39460 + C39039 * C715) *
                        C93680 * C93585 * C93639 * C93625 * C98 +
                    (C39448 * C110 + C39461 + C39461 + C39039 * C716 +
                     C39449 * C1386 + C39462 + C39462 + C39040 * C1898 +
                     C39450 * C1391 + C39463 + C39463 + C39041 * C1903 +
                     C39451 * C10966 + C39464 + C39464 + C39042 * C11758) *
                        C93680 * C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((C39448 * C108 + C39453 + C39453 + C39039 * C714 +
                     C39449 * C1388 + C39454 + C39454 + C39040 * C1900 +
                     C39450 * C1389 + C39455 + C39455 + C39041 * C1901 +
                     C39451 * C10964 + C39456 + C39456 + C39042 * C11756) *
                        C93680 * C93585 * C93639 * C800 -
                    (C39451 * C25001 + C39916 + C39916 + C39042 * C25775 +
                     C39450 * C5775 + C39917 + C39917 + C39041 * C6427 +
                     C39449 * C3409 + C39918 + C39918 + C39040 * C3993 +
                     C39448 * C807 + C39919 + C39919 + C39039 * C1319) *
                        C93680 * C93585 * C93639 * C801 +
                    (C39448 * C808 + C39920 + C39920 + C39039 * C1320 +
                     C39449 * C8520 + C39921 + C39921 + C39040 * C9406 +
                     C39450 * C16395 + C39922 + C39922 + C39041 * C17035 +
                     C39451 * C25002 + C39923 + C39923 + C39042 * C25776) *
                        C93680 * C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                       C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                       C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                          C59272 +
                      (C60770 + C60771 + C60772) * C93718) *
                         C93680 * C93639 * C1979 -
                     ((C46669 + C46670 + C46671) * C93718 +
                      (C43231 + C43230 + C43229) * C59272) *
                         C93680 * C93639 * C1980) *
                        C1981 +
                    (((C44708 + C44709 + C44710) * C59272 +
                      (C42381 * C3410 + C45699 + C45699 + C93854 * C3418 +
                       C42383 * C3411 + C45700 + C45700 + C93842 * C3419 +
                       C42385 * C3412 + C45701 + C45701 + C42378 * C3420) *
                          C93718) *
                         C93680 * C93639 * C1980 -
                     ((C42385 * C1385 + C45698 + C45698 + C42378 * C1401 +
                       C42383 * C1386 + C45697 + C45697 + C93842 * C1402 +
                       C42381 * C1387 + C45696 + C45696 + C93854 * C1403) *
                          C93718 +
                      (C42385 * C111 + C42397 + C42397 + C42378 * C123 +
                       C42383 * C110 + C42398 + C42398 + C93842 * C122 +
                       C42381 * C109 + C42399 + C42399 + C93854 * C121) *
                          C59272) *
                         C93680 * C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C42382 +
             (C188 * C114 + C93680 * C195) * C93854 + C218 * C42384 +
             C219 * C93842 + C220 * C42386 + C221 * C42378) *
                C59272 +
            (C60850 + C60851 + C60852 + C60853 + C60854 + C60855) * C93718) *
               C93639 * C1979 -
           ((C11976 * C42378 + C11977 * C42386 + C11978 * C93842 +
             C11979 * C42384 + C13955 * C93854 + C13954 * C42382) *
                C93718 +
            (C2073 * C42378 + C2074 * C42386 + C2075 * C93842 + C2076 * C42384 +
             (C188 * C815 + C93680 * C897) * C93854 +
             (C188 * C807 + C93680 * C889) * C42382) *
                C59272) *
               C93639 * C1980) *
              C1981 +
          (((C2076 * C42382 + C2075 * C93854 + C2074 * C42384 + C2073 * C93842 +
             C2072 * C42386 + C2071 * C42378) *
                C59272 +
            (C11979 * C42382 + C11978 * C93854 + C11977 * C42384 +
             C11976 * C93842 + (C188 * C3412 + C93680 * C3494) * C42386 +
             (C188 * C3416 + C93680 * C3498) * C42378) *
                C93718) *
               C93639 * C1980 -
           ((C2785 * C42378 + C2786 * C42386 + C2787 * C93842 + C2788 * C42384 +
             C2789 * C93854 + C2790 * C42382) *
                C93718 +
            (C223 * C42378 + C222 * C42386 + C221 * C93842 + C220 * C42384 +
             C219 * C93854 + C218 * C42382) *
                C59272) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C42382 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93854 +
            (C59452 + C59453) * C42384 + (C59454 + C59455) * C93842 +
            C59464 * C42386 + C59465 * C42378) *
               C93680 * C93639 * C1979 -
           ((C61762 + C61763) * C42378 + (C61764 + C61765) * C42386 +
            (C61766 + C61767) * C93842 + (C61768 + C61769) * C42384 +
            (C59426 * C3413 + C93718 * C3569 + C59425 * C815 + C59272 * C963) *
                C93854 +
            (C59426 * C3409 + C93718 * C3565 + C59425 * C807 + C59272 * C955) *
                C42382) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C61769 + C61768) * C42382 + (C61767 + C61766) * C93854 +
            (C61765 + C61764) * C42384 + (C61763 + C61762) * C93842 +
            (C59425 * C804 + C59272 * C952 + C59426 * C3412 + C93718 * C3568) *
                C42386 +
            (C59425 * C812 + C59272 * C960 + C59426 * C3416 + C93718 * C3572) *
                C42378) *
               C93680 * C93639 * C1980 -
           ((C59460 + C59461) * C42378 + (C59462 + C59463) * C42386 +
            (C59459 + C59458) * C93842 + (C59457 + C59456) * C42384 +
            (C59455 + C59454) * C93854 + (C59453 + C59452) * C42382) *
               C93680 * C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                        C93842 * C115 + C42386 * C110 + C42378 * C116) *
                           C188 +
                       (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                        C93842 * C363 + C42386 * C191 + C42378 * C364) *
                           C93680) *
                          C59272 +
                      ((C61034 + C61035 + C61036) * C188 +
                       (C61037 + C61038 + C61039) * C93680) *
                          C93718) *
                         C93639 * C1979 -
                     (((C46984 + C46985 + C46986) * C93680 +
                       (C46987 + C46988 + C46989) * C188) *
                          C93718 +
                      ((C43498 + C43497 + C43496) * C93680 +
                       (C43495 + C43494 + C43493) * C188) *
                          C59272) *
                         C93639 * C1980) *
                        C1981 +
                    ((((C45047 + C45048 + C45049) * C188 +
                       (C45050 + C45051 + C45052) * C93680) *
                          C59272 +
                      ((C42382 * C3410 + C93854 * C3414 + C42384 * C3411 +
                        C93842 * C3415 + C42386 * C3412 + C42378 * C3416) *
                           C188 +
                       (C42382 * C3492 + C93854 * C3640 + C42384 * C3493 +
                        C93842 * C3641 + C42386 * C3494 + C42378 * C3642) *
                           C93680) *
                          C93718) *
                         C93639 * C1980 -
                     (((C42386 * C1467 + C42378 * C1599 + C42384 * C1468 +
                        C93842 * C1600 + C42382 * C1469 + C93854 * C1601) *
                           C93680 +
                       (C42386 * C1385 + C42378 * C1393 + C42384 * C1386 +
                        C93842 * C1394 + C42382 * C1387 + C93854 * C1395) *
                           C188) *
                          C93718 +
                      ((C42386 * C192 + C42378 * C365 + C42384 * C191 +
                        C93842 * C364 + C42382 * C190 + C93854 * C363) *
                           C93680 +
                       (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                        C93842 * C116 + C42382 * C109 + C93854 * C115) *
                           C188) *
                          C59272) *
                         C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C93854 +
             C448 * C93842 + C449 * C42378) *
                C59272 +
            (C61120 + C61121 + C61122) * C93718) *
               C93639 * C1979 -
           ((C12306 * C42378 + C12307 * C93842 + C14261 * C93854) * C93718 +
            (C2311 * C42378 + C2312 * C93842 +
             (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C93854) *
                C59272) *
               C93639 * C1980) *
              C1981 +
          (((C2312 * C93854 + C2311 * C93842 + C2310 * C42378) * C59272 +
            (C12307 * C93854 + C12306 * C93842 +
             (C418 * C3412 + C3717 + C3717 + C93680 * C3712) * C42378) *
                C93718) *
               C93639 * C1980 -
           ((C3024 * C42378 + C3025 * C93842 + C3026 * C93854) * C93718 +
            (C450 * C42378 + C449 * C93842 + C448 * C93854) * C59272) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C188 +
             (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                 C93680) *
                C93854 +
            ((C59452 + C59453) * C188 + (C59701 + C59702) * C93680) * C93842 +
            C59709 * C42378) *
               C93639 * C1979 -
           (((C62072 + C62073) * C93680 + (C61764 + C61765) * C188) * C42378 +
            ((C62074 + C62075) * C93680 + (C61768 + C61769) * C188) * C93842 +
            ((C59426 * C3491 + C93718 * C3783 + C59425 * C889 +
              C59272 * C1145) *
                 C93680 +
             (C59426 * C3409 + C93718 * C3565 + C59425 * C807 + C59272 * C955) *
                 C188) *
                C93854) *
               C93639 * C1980) *
              C1981 +
          ((((C61769 + C61768) * C188 + (C62075 + C62074) * C93680) * C93854 +
            ((C61765 + C61764) * C188 + (C62073 + C62072) * C93680) * C93842 +
            ((C59425 * C804 + C59272 * C952 + C59426 * C3412 + C93718 * C3568) *
                 C188 +
             (C59425 * C886 + C59272 * C1142 + C59426 * C3494 +
              C93718 * C3786) *
                 C93680) *
                C42378) *
               C93639 * C1980 -
           (((C59705 + C59706) * C93680 + (C59462 + C59463) * C188) * C42378 +
            ((C59704 + C59703) * C93680 + (C59457 + C59456) * C188) * C93842 +
            ((C59702 + C59701) * C93680 + (C59453 + C59452) * C188) * C93854) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                       C93842 * C115 + C42386 * C110 + C42378 * C116) *
                          C59425 +
                      (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                       C93842 * C580 + C42386 * C278 + C42378 * C581) *
                          C59272 +
                      (C61034 + C61035 + C61036) * C59426 +
                      (C61286 + C61287 + C61288) * C93718) *
                         C93680 * C93639 * C1979 -
                     ((C47296 + C47297 + C47298) * C93718 +
                      (C46987 + C46988 + C46989) * C59426 +
                      (C43753 + C43752 + C43751) * C59272 +
                      (C43495 + C43494 + C43493) * C59425) *
                         C93680 * C93639 * C1980) *
                        C1981 +
                    (((C45047 + C45048 + C45049) * C59425 +
                      (C45383 + C45384 + C45385) * C59272 +
                      (C42382 * C3410 + C93854 * C3414 + C42384 * C3411 +
                       C93842 * C3415 + C42386 * C3412 + C42378 * C3416) *
                          C59426 +
                      (C42382 * C3566 + C93854 * C3854 + C42384 * C3567 +
                       C93842 * C3855 + C42386 * C3568 + C42378 * C3856) *
                          C93718) *
                         C93680 * C93639 * C1980 -
                     ((C42386 * C1533 + C42378 * C1781 + C42384 * C1534 +
                       C93842 * C1782 + C42382 * C1535 + C93854 * C1783) *
                          C93718 +
                      (C42386 * C1385 + C42378 * C1393 + C42384 * C1386 +
                       C93842 * C1394 + C42382 * C1387 + C93854 * C1395) *
                          C59426 +
                      (C42386 * C279 + C42378 * C582 + C42384 * C278 +
                       C93842 * C581 + C42382 * C277 + C93854 * C580) *
                          C59272 +
                      (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                       C93842 * C116 + C42382 * C109 + C93854 * C115) *
                          C59425) *
                         C93680 * C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C59425 +
             (C188 * C276 + C93680 * C635) * C59272 + C11107 * C59426 +
             C11679 * C93718) *
                C93854 +
            (C59858 + C59859 + C59860 + C59861) * C93842 + C59872 * C42378) *
               C93639 * C1979 -
           ((C62272 + C62273 + C62274 + C62275) * C42378 +
            (C62276 + C62277 + C62278 + C62279) * C93842 +
            (C14559 * C93718 + C13954 * C59426 +
             (C188 * C955 + C93680 * C1261) * C59272 +
             (C188 * C807 + C93680 * C889) * C59425) *
                C93854) *
               C93639 * C1980) *
              C1981 +
          (((C62279 + C62278 + C62277 + C62276) * C93854 +
            (C62275 + C62274 + C62273 + C62272) * C93842 +
            (C2072 * C59425 + C2538 * C59272 +
             (C188 * C3412 + C93680 * C3494) * C59426 +
             (C188 * C3568 + C93680 * C3926) * C93718) *
                C42378) *
               C93639 * C1980 -
           ((C59866 + C59867 + C59868 + C59869) * C42378 +
            (C59865 + C59864 + C59863 + C59862) * C93842 +
            (C59861 + C59860 + C59859 + C59858) * C93854) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                       C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                          C93680 * C93854 +
                      (C59983 + C59984) * C93680 * C93842 + C59990 * C42378) *
                         C93639 * C1979 -
                     ((C62396 + C62397) * C93680 * C42378 +
                      (C62398 + C62399) * C93680 * C93842 +
                      (C59947 * C3409 + C60661 + C60661 + C93718 * C3993 +
                       C59946 * C807 + C60662 + C60662 + C59272 * C1319) *
                          C93680 * C93854) *
                         C93639 * C1980) *
                        C1981 +
                    (((C62399 + C62398) * C93680 * C93854 +
                      (C62397 + C62396) * C93680 * C93842 +
                      (C59946 * C804 + C62386 + C62386 + C59272 * C1316 +
                       C59947 * C3412 + C62387 + C62387 + C93718 * C3996) *
                          C93680 * C42378) *
                         C93639 * C1980 -
                     ((C59987 + C59988) * C93680 * C42378 +
                      (C59986 + C59985) * C93680 * C93842 +
                      (C59984 + C59983) * C93680 * C93854) *
                         C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                       C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                       C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                          C59272 +
                      (C60770 + C60771 + C60772) * C93718) *
                         C93680 * C2695 -
                     ((C60773 + C60774 + C60775) * C93718 +
                      (C60772 + C60771 + C60770) * C59272) *
                         C93680 * C2696) *
                        C1979 +
                    (((C46671 + C46670 + C46669) * C59272 +
                      (C42381 * C5775 + C43988 + C43988 + C93854 * C5781 +
                       C42383 * C5776 + C43989 + C43989 + C93842 * C5782 +
                       C42385 * C5777 + C43990 + C43990 + C42378 * C5783) *
                          C93718) *
                         C93680 * C2696 -
                     ((C46669 + C46670 + C46671) * C93718 +
                      (C43231 + C43230 + C43229) * C59272) *
                         C93680 * C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C42382 +
             (C188 * C114 + C93680 * C195) * C93854 + C218 * C42384 +
             C219 * C93842 + C220 * C42386 + C221 * C42378) *
                C59272 +
            (C60850 + C60851 + C60852 + C60853 + C60854 + C60855) * C93718) *
               C2695 -
           ((C60856 + C60857 + C60858 + C60859 + C60860 + C60861) * C93718 +
            (C60855 + C60854 + C60853 + C60852 + C60851 + C60850) * C59272) *
               C2696) *
              C1979 +
          (((C63598 + C63599 + C63600 + C63601 + C63602 + C63603) * C59272 +
            (C33141 * C42382 + C33142 * C93854 + C31169 * C42384 +
             C31168 * C93842 + (C188 * C5777 + C93680 * C5872) * C42386 +
             (C188 * C5780 + C93680 * C5875) * C42378) *
                C93718) *
               C2696 -
           ((C63603 + C63602 + C63601 + C63600 + C63599 + C63598) * C93718 +
            (C2073 * C42378 + C2074 * C42386 + C2075 * C93842 + C2076 * C42384 +
             (C188 * C815 + C93680 * C897) * C93854 +
             (C188 * C807 + C93680 * C889) * C42382) *
                C59272) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C42382 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93854 +
            (C59452 + C59453) * C42384 + (C59454 + C59455) * C93842 +
            C59464 * C42386 + C59465 * C42378) *
               C93680 * C2695 -
           ((C62734 + C62735) * C42378 + (C62736 + C62737) * C42386 +
            (C62738 + C62739) * C93842 + (C62740 + C62741) * C42384 +
            (C59426 * C1397 + C93718 * C1545 + C59425 * C1396 +
             C59272 * C1544) *
                C93854 +
            (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
             C59272 * C1536) *
                C42382) *
               C93680 * C2696) *
              C1979 +
          (((C59425 * C3409 + C59272 * C3565 + C59426 * C5775 +
             C93718 * C5950) *
                C42382 +
            (C59425 * C3413 + C59272 * C3569 + C59426 * C5778 +
             C93718 * C5953) *
                C93854 +
            (C59425 * C3410 + C59272 * C3566 + C59426 * C5776 +
             C93718 * C5951) *
                C42384 +
            (C59425 * C3414 + C59272 * C3570 + C59426 * C5779 +
             C93718 * C5954) *
                C93842 +
            (C59425 * C3411 + C59272 * C3567 + C59426 * C5777 +
             C93718 * C5952) *
                C42386 +
            (C59425 * C3415 + C59272 * C3571 + C59426 * C5780 +
             C93718 * C5955) *
                C42378) *
               C93680 * C2696 -
           ((C61762 + C61763) * C42378 + (C61764 + C61765) * C42386 +
            (C61766 + C61767) * C93842 + (C61768 + C61769) * C42384 +
            (C59426 * C3413 + C93718 * C3569 + C59425 * C815 + C59272 * C963) *
                C93854 +
            (C59426 * C3409 + C93718 * C3565 + C59425 * C807 + C59272 * C955) *
                C42382) *
               C93680 * C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyx[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                        C93842 * C115 + C42386 * C110 + C42378 * C116) *
                           C188 +
                       (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                        C93842 * C363 + C42386 * C191 + C42378 * C364) *
                           C93680) *
                          C59272 +
                      ((C61034 + C61035 + C61036) * C188 +
                       (C61037 + C61038 + C61039) * C93680) *
                          C93718) *
                         C2695 -
                     (((C61040 + C61041 + C61042) * C93680 +
                       (C61043 + C61044 + C61045) * C188) *
                          C93718 +
                      ((C61039 + C61038 + C61037) * C93680 +
                       (C61036 + C61035 + C61034) * C188) *
                          C59272) *
                         C2696) *
                        C1979 +
                    ((((C46989 + C46988 + C46987) * C188 +
                       (C46986 + C46985 + C46984) * C93680) *
                          C59272 +
                      ((C42382 * C5775 + C93854 * C5778 + C42384 * C5776 +
                        C93842 * C5779 + C42386 * C5777 + C42378 * C5780) *
                           C188 +
                       (C42382 * C5870 + C93854 * C6030 + C42384 * C5871 +
                        C93842 * C6031 + C42386 * C5872 + C42378 * C6032) *
                           C93680) *
                          C93718) *
                         C2696 -
                     (((C46984 + C46985 + C46986) * C93680 +
                       (C46987 + C46988 + C46989) * C188) *
                          C93718 +
                      ((C43498 + C43497 + C43496) * C93680 +
                       (C43495 + C43494 + C43493) * C188) *
                          C59272) *
                         C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C93854 +
             C448 * C93842 + C449 * C42378) *
                C59272 +
            (C61120 + C61121 + C61122) * C93718) *
               C2695 -
           ((C61123 + C61124 + C61125) * C93718 +
            (C61122 + C61121 + C61120) * C59272) *
               C2696) *
              C1979 +
          (((C63898 + C63899 + C63900) * C59272 +
            (C33464 * C93854 + C31486 * C93842 +
             (C418 * C5777 + C14258 + C14258 + C93680 * C6109) * C42378) *
                C93718) *
               C2696 -
           ((C63900 + C63899 + C63898) * C93718 +
            (C2311 * C42378 + C2312 * C93842 +
             (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C93854) *
                C59272) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C188 +
             (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                 C93680) *
                C93854 +
            ((C59452 + C59453) * C188 + (C59701 + C59702) * C93680) * C93842 +
            C59709 * C42378) *
               C2695 -
           (((C63065 + C63066) * C93680 + (C62736 + C62737) * C188) * C42378 +
            ((C63067 + C63068) * C93680 + (C62740 + C62741) * C188) * C93842 +
            ((C59426 * C1471 + C93718 * C1727 + C59425 * C1470 +
              C59272 * C1726) *
                 C93680 +
             (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
              C59272 * C1536) *
                 C188) *
                C93854) *
               C2696) *
              C1979 +
          ((((C59425 * C3409 + C59272 * C3565 + C59426 * C5775 +
              C93718 * C5950) *
                 C188 +
             (C59425 * C3491 + C59272 * C3783 + C59426 * C5870 +
              C93718 * C6196) *
                 C93680) *
                C93854 +
            ((C59425 * C3410 + C59272 * C3566 + C59426 * C5776 +
              C93718 * C5951) *
                 C188 +
             (C59425 * C3492 + C59272 * C3784 + C59426 * C5871 +
              C93718 * C6197) *
                 C93680) *
                C93842 +
            ((C59425 * C3411 + C59272 * C3567 + C59426 * C5777 +
              C93718 * C5952) *
                 C188 +
             (C59425 * C3493 + C59272 * C3785 + C59426 * C5872 +
              C93718 * C6198) *
                 C93680) *
                C42378) *
               C2696 -
           (((C62072 + C62073) * C93680 + (C61764 + C61765) * C188) * C42378 +
            ((C62074 + C62075) * C93680 + (C61768 + C61769) * C188) * C93842 +
            ((C59426 * C3491 + C93718 * C3783 + C59425 * C889 +
              C59272 * C1145) *
                 C93680 +
             (C59426 * C3409 + C93718 * C3565 + C59425 * C807 + C59272 * C955) *
                 C188) *
                C93854) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezx[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                       C93842 * C115 + C42386 * C110 + C42378 * C116) *
                          C59425 +
                      (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                       C93842 * C580 + C42386 * C278 + C42378 * C581) *
                          C59272 +
                      (C61034 + C61035 + C61036) * C59426 +
                      (C61286 + C61287 + C61288) * C93718) *
                         C93680 * C2695 -
                     ((C61289 + C61290 + C61291) * C93718 +
                      (C61043 + C61044 + C61045) * C59426 +
                      (C61288 + C61287 + C61286) * C59272 +
                      (C61036 + C61035 + C61034) * C59425) *
                         C93680 * C2696) *
                        C1979 +
                    (((C46989 + C46988 + C46987) * C59425 +
                      (C47298 + C47297 + C47296) * C59272 +
                      (C42382 * C5775 + C93854 * C5778 + C42384 * C5776 +
                       C93842 * C5779 + C42386 * C5777 + C42378 * C5780) *
                          C59426 +
                      (C42382 * C5950 + C93854 * C6273 + C42384 * C5951 +
                       C93842 * C6274 + C42386 * C5952 + C42378 * C6275) *
                          C93718) *
                         C93680 * C2696 -
                     ((C47296 + C47297 + C47298) * C93718 +
                      (C46987 + C46988 + C46989) * C59426 +
                      (C43753 + C43752 + C43751) * C59272 +
                      (C43495 + C43494 + C43493) * C59425) *
                         C93680 * C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C59425 +
             (C188 * C276 + C93680 * C635) * C59272 + C11107 * C59426 +
             C11679 * C93718) *
                C93854 +
            (C59858 + C59859 + C59860 + C59861) * C93842 + C59872 * C42378) *
               C2695 -
           ((C63274 + C63275 + C63276 + C63277) * C42378 +
            (C63278 + C63279 + C63280 + C63281) * C93842 +
            (C11682 * C93718 + C11114 * C59426 + C11679 * C59272 +
             C11107 * C59425) *
                C93854) *
               C2696) *
              C1979 +
          (((C13954 * C59425 + C14559 * C59272 + C33141 * C59426 +
             C33771 * C93718) *
                C93854 +
            (C11979 * C59425 + C12625 * C59272 + C31169 * C59426 +
             C31797 * C93718) *
                C93842 +
            (C11977 * C59425 + C12624 * C59272 +
             (C188 * C5777 + C93680 * C5872) * C59426 +
             (C188 * C5952 + C93680 * C6352) * C93718) *
                C42378) *
               C2696 -
           ((C62272 + C62273 + C62274 + C62275) * C42378 +
            (C62276 + C62277 + C62278 + C62279) * C93842 +
            (C14559 * C93718 + C13954 * C59426 +
             (C188 * C955 + C93680 * C1261) * C59272 +
             (C188 * C807 + C93680 * C889) * C59425) *
                C93854) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezz[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                       C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                          C93680 * C93854 +
                      (C59983 + C59984) * C93680 * C93842 + C59990 * C42378) *
                         C2695 -
                     ((C63398 + C63399) * C93680 * C42378 +
                      (C63400 + C63401) * C93680 * C93842 +
                      (C59947 * C1389 + C61444 + C61444 + C93718 * C1901 +
                       C59946 * C1388 + C61445 + C61445 + C59272 * C1900) *
                          C93680 * C93854) *
                         C2696) *
                        C1979 +
                    (((C59946 * C3409 + C64293 + C64293 + C59272 * C3993 +
                       C59947 * C5775 + C64294 + C64294 + C93718 * C6427) *
                          C93680 * C93854 +
                      (C59946 * C3410 + C64295 + C64295 + C59272 * C3994 +
                       C59947 * C5776 + C64296 + C64296 + C93718 * C6428) *
                          C93680 * C93842 +
                      (C59946 * C3411 + C64297 + C64297 + C59272 * C3995 +
                       C59947 * C5777 + C64298 + C64298 + C93718 * C6429) *
                          C93680 * C42378) *
                         C2696 -
                     ((C62396 + C62397) * C93680 * C42378 +
                      (C62398 + C62399) * C93680 * C93842 +
                      (C59947 * C3409 + C60661 + C60661 + C93718 * C3993 +
                       C59946 * C807 + C60662 + C60662 + C59272 * C1319) *
                          C93680 * C93854) *
                         C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eexx[47] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                      C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                      C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                         C59272 +
                     (C42381 * C1388 + C43984 + C43984 + C93854 * C1404 +
                      C42383 * C1387 + C43983 + C43983 + C93842 * C1403 +
                      C42385 * C1386 + C43982 + C43982 + C42378 * C1402) *
                         C93718) *
                        C93680 * C93639 * C800 -
                    ((C46669 + C46670 + C46671) * C93718 +
                     (C43231 + C43230 + C43229) * C59272) *
                        C93680 * C93639 * C801 +
                    ((C43234 + C43233 + C43232) * C59272 +
                     (C42381 * C8520 + C46660 + C46660 + C93854 * C8526 +
                      C42383 * C8521 + C46661 + C46661 + C93842 * C8527 +
                      C42385 * C8522 + C46662 + C46662 + C42378 * C8528) *
                         C93718) *
                        C93680 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                      C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                      C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                         C59272 +
                     (C42381 * C1388 + C43984 + C43984 + C93854 * C1404 +
                      C42383 * C1387 + C43983 + C43983 + C93842 * C1403 +
                      C42385 * C1386 + C43982 + C43982 + C42378 * C1402) *
                         C93718) *
                        C93680 * C93639 * C93625 * C97 -
                    ((C42385 * C1385 + C45698 + C45698 + C42378 * C1401 +
                      C42383 * C1386 + C45697 + C45697 + C93842 * C1402 +
                      C42381 * C1387 + C45696 + C45696 + C93854 * C1403) *
                         C93718 +
                     (C42385 * C111 + C42397 + C42397 + C42378 * C123 +
                      C42383 * C110 + C42398 + C42398 + C93842 * C122 +
                      C42381 * C109 + C42399 + C42399 + C93854 * C121) *
                         C59272) *
                        C93680 * C93639 * C93625 * C98 +
                    ((C42381 * C110 + C42400 + C42400 + C93854 * C122 +
                      C42383 * C111 + C42401 + C42401 + C93842 * C123 +
                      C42385 * C112 + C42402 + C42402 + C42378 * C124) *
                         C59272 +
                     (C42381 * C1386 + C59275 + C59275 + C93854 * C1402 +
                      C42383 * C1385 + C59276 + C59276 + C93842 * C1401 +
                      C42385 * C2697 + C59277 + C59277 + C42378 * C2699) *
                         C93718) *
                        C93680 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                      C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                      C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                         C59272 +
                     (C60770 + C60771 + C60772) * C93718) *
                        C93680 * C1382 -
                    ((C60773 + C60774 + C60775) * C93718 +
                     (C60772 + C60771 + C60770) * C59272) *
                        C93680 * C1383 +
                    ((C60775 + C60774 + C60773) * C59272 +
                     (C42381 * C10964 + C60755 + C60755 + C93854 * C10970 +
                      C42383 * C10965 + C60756 + C60756 + C93842 * C10971 +
                      C42385 * C10966 + C60757 + C60757 + C42378 * C10972) *
                         C93718) *
                        C93680 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C42382 +
            (C188 * C114 + C93680 * C195) * C93854 + C218 * C42384 +
            C219 * C93842 + C220 * C42386 + C221 * C42378) *
               C59272 +
           (C11107 * C42382 + C11108 * C93854 + C2790 * C42384 +
            C2789 * C93842 + C2788 * C42386 + C2787 * C42378) *
               C93718) *
              C93639 * C800 -
          ((C11976 * C42378 + C11977 * C42386 + C11978 * C93842 +
            C11979 * C42384 + C13955 * C93854 + C13954 * C42382) *
               C93718 +
           (C2073 * C42378 + C2074 * C42386 + C2075 * C93842 + C2076 * C42384 +
            (C188 * C815 + C93680 * C897) * C93854 +
            (C188 * C807 + C93680 * C889) * C42382) *
               C59272) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C42382 +
            (C188 * C816 + C93680 * C898) * C93854 +
            (C188 * C809 + C93680 * C891) * C42384 +
            (C188 * C817 + C93680 * C899) * C93842 +
            (C188 * C810 + C93680 * C892) * C42386 +
            (C188 * C818 + C93680 * C900) * C42378) *
               C59272 +
           ((C188 * C8520 + C93680 * C8645) * C42382 +
            (C188 * C8523 + C93680 * C8648) * C93854 +
            (C188 * C8521 + C93680 * C8646) * C42384 +
            (C188 * C8524 + C93680 * C8649) * C93842 +
            (C188 * C8522 + C93680 * C8647) * C42386 +
            (C188 * C8525 + C93680 * C8650) * C42378) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C42382 +
            (C188 * C114 + C93680 * C195) * C93854 + C218 * C42384 +
            C219 * C93842 + C220 * C42386 + C221 * C42378) *
               C59272 +
           (C11107 * C42382 + C11108 * C93854 + C2790 * C42384 +
            C2789 * C93842 + C2788 * C42386 + C2787 * C42378) *
               C93718) *
              C93639 * C93625 * C97 -
          ((C2785 * C42378 + C2786 * C42386 + C2787 * C93842 + C2788 * C42384 +
            C2789 * C93854 + C2790 * C42382) *
               C93718 +
           (C223 * C42378 + C222 * C42386 + C221 * C93842 + C220 * C42384 +
            C219 * C93854 + C218 * C42382) *
               C59272) *
              C93639 * C93625 * C98 +
          ((C220 * C42382 + C221 * C93854 + C222 * C42384 + C223 * C93842 +
            C225 * C42386 + C224 * C42378) *
               C59272 +
           (C2788 * C42382 + C2787 * C93854 + C2786 * C42384 + C2785 * C93842 +
            (C188 * C2697 + C93680 * C2770) * C42386 +
            (C188 * C2698 + C93680 * C2771) * C42378) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C42382 +
            (C188 * C114 + C93680 * C195) * C93854 + C218 * C42384 +
            C219 * C93842 + C220 * C42386 + C221 * C42378) *
               C59272 +
           (C60850 + C60851 + C60852 + C60853 + C60854 + C60855) * C93718) *
              C1382 -
          ((C60856 + C60857 + C60858 + C60859 + C60860 + C60861) * C93718 +
           (C60855 + C60854 + C60853 + C60852 + C60851 + C60850) * C59272) *
              C1383 +
          ((C60861 + C60860 + C60859 + C60858 + C60857 + C60856) * C59272 +
           (C30328 * C42382 + C30327 * C93854 + C30326 * C42384 +
            C30325 * C93842 + (C188 * C10966 + C93680 * C11082) * C42386 +
            (C188 * C10969 + C93680 * C11085) * C42378) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
               C42382 +
           (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
               C93854 +
           (C59452 + C59453) * C42384 + (C59454 + C59455) * C93842 +
           C59464 * C42386 + C59465 * C42378) *
              C93680 * C93639 * C800 -
          ((C59426 * C3415 + C93718 * C3571 + C59425 * C813 + C59272 * C961) *
               C42378 +
           (C59426 * C3411 + C93718 * C3567 + C59425 * C805 + C59272 * C953) *
               C42386 +
           (C59426 * C3414 + C93718 * C3570 + C59425 * C814 + C59272 * C962) *
               C93842 +
           (C59426 * C3410 + C93718 * C3566 + C59425 * C806 + C59272 * C954) *
               C42384 +
           (C59426 * C3413 + C93718 * C3569 + C59425 * C815 + C59272 * C963) *
               C93854 +
           (C59426 * C3409 + C93718 * C3565 + C59425 * C807 + C59272 * C955) *
               C42382) *
              C93680 * C93639 * C801 +
          ((C59425 * C808 + C59272 * C956 + C59426 * C8520 + C93718 * C8749) *
               C42382 +
           (C59425 * C816 + C59272 * C964 + C59426 * C8523 + C93718 * C8752) *
               C93854 +
           (C59425 * C809 + C59272 * C957 + C59426 * C8521 + C93718 * C8750) *
               C42384 +
           (C59425 * C817 + C59272 * C965 + C59426 * C8524 + C93718 * C8753) *
               C93842 +
           (C59425 * C810 + C59272 * C958 + C59426 * C8522 + C93718 * C8751) *
               C42386 +
           (C59425 * C818 + C59272 * C966 + C59426 * C8525 + C93718 * C8754) *
               C42378) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
               C42382 +
           (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
               C93854 +
           (C59452 + C59453) * C42384 + (C59454 + C59455) * C93842 +
           C59464 * C42386 + C59465 * C42378) *
              C93680 * C93639 * C93625 * C97 -
          ((C59460 + C59461) * C42378 + (C59462 + C59463) * C42386 +
           (C59459 + C59458) * C93842 + (C59457 + C59456) * C42384 +
           (C59455 + C59454) * C93854 + (C59453 + C59452) * C42382) *
              C93680 * C93639 * C93625 * C98 +
          (C59464 * C42382 + C59465 * C93854 + (C59463 + C59462) * C42384 +
           (C59461 + C59460) * C93842 +
           (C59425 * C112 + C59272 * C280 + C59426 * C2697 + C93718 * C2856) *
               C42386 +
           (C59425 * C118 + C59272 * C286 + C59426 * C2698 + C93718 * C2857) *
               C42378) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
               C42382 +
           (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
               C93854 +
           (C59452 + C59453) * C42384 + (C59454 + C59455) * C93842 +
           C59464 * C42386 + C59465 * C42378) *
              C93680 * C1382 -
          ((C59426 * C1399 + C93718 * C1547 + C59425 * C1394 + C59272 * C1542) *
               C42378 +
           (C59426 * C1391 + C93718 * C1539 + C59425 * C1386 + C59272 * C1534) *
               C42386 +
           (C59426 * C1398 + C93718 * C1546 + C59425 * C1395 + C59272 * C1543) *
               C93842 +
           (C59426 * C1390 + C93718 * C1538 + C59425 * C1387 + C59272 * C1535) *
               C42384 +
           (C59426 * C1397 + C93718 * C1545 + C59425 * C1396 + C59272 * C1544) *
               C93854 +
           (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 + C59272 * C1536) *
               C42382) *
              C93680 * C1383 +
          ((C59425 * C1389 + C59272 * C1537 + C59426 * C10964 +
            C93718 * C11196) *
               C42382 +
           (C59425 * C1397 + C59272 * C1545 + C59426 * C10967 +
            C93718 * C11199) *
               C93854 +
           (C59425 * C1390 + C59272 * C1538 + C59426 * C10965 +
            C93718 * C11197) *
               C42384 +
           (C59425 * C1398 + C59272 * C1546 + C59426 * C10968 +
            C93718 * C11200) *
               C93842 +
           (C59425 * C1391 + C59272 * C1539 + C59426 * C10966 +
            C93718 * C11198) *
               C42386 +
           (C59425 * C1399 + C59272 * C1547 + C59426 * C10969 +
            C93718 * C11201) *
               C42378) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[47] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                       C93842 * C115 + C42386 * C110 + C42378 * C116) *
                          C188 +
                      (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                       C93842 * C363 + C42386 * C191 + C42378 * C364) *
                          C93680) *
                         C59272 +
                     ((C42382 * C1388 + C93854 * C1396 + C42384 * C1387 +
                       C93842 * C1395 + C42386 * C1386 + C42378 * C1394) *
                          C188 +
                      (C42382 * C1470 + C93854 * C1602 + C42384 * C1469 +
                       C93842 * C1601 + C42386 * C1468 + C42378 * C1600) *
                          C93680) *
                         C93718) *
                        C93639 * C800 -
                    (((C46984 + C46985 + C46986) * C93680 +
                      (C46987 + C46988 + C46989) * C188) *
                         C93718 +
                     ((C43498 + C43497 + C43496) * C93680 +
                      (C43495 + C43494 + C43493) * C188) *
                         C59272) *
                        C93639 * C801 +
                    (((C43504 + C43503 + C43502) * C188 +
                      (C43501 + C43500 + C43499) * C93680) *
                         C59272 +
                     ((C42382 * C8520 + C93854 * C8523 + C42384 * C8521 +
                       C93842 * C8524 + C42386 * C8522 + C42378 * C8525) *
                          C188 +
                      (C42382 * C8645 + C93854 * C8865 + C42384 * C8646 +
                       C93842 * C8866 + C42386 * C8647 + C42378 * C8867) *
                          C93680) *
                         C93718) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                       C93842 * C115 + C42386 * C110 + C42378 * C116) *
                          C188 +
                      (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                       C93842 * C363 + C42386 * C191 + C42378 * C364) *
                          C93680) *
                         C59272 +
                     ((C42382 * C1388 + C93854 * C1396 + C42384 * C1387 +
                       C93842 * C1395 + C42386 * C1386 + C42378 * C1394) *
                          C188 +
                      (C42382 * C1470 + C93854 * C1602 + C42384 * C1469 +
                       C93842 * C1601 + C42386 * C1468 + C42378 * C1600) *
                          C93680) *
                         C93718) *
                        C93639 * C93625 * C97 -
                    (((C42386 * C1467 + C42378 * C1599 + C42384 * C1468 +
                       C93842 * C1600 + C42382 * C1469 + C93854 * C1601) *
                          C93680 +
                      (C42386 * C1385 + C42378 * C1393 + C42384 * C1386 +
                       C93842 * C1394 + C42382 * C1387 + C93854 * C1395) *
                          C188) *
                         C93718 +
                     ((C42386 * C192 + C42378 * C365 + C42384 * C191 +
                       C93842 * C364 + C42382 * C190 + C93854 * C363) *
                          C93680 +
                      (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                       C93842 * C116 + C42382 * C109 + C93854 * C115) *
                          C188) *
                         C59272) *
                        C93639 * C93625 * C98 +
                    (((C42382 * C110 + C93854 * C116 + C42384 * C111 +
                       C93842 * C117 + C42386 * C112 + C42378 * C118) *
                          C188 +
                      (C42382 * C191 + C93854 * C364 + C42384 * C192 +
                       C93842 * C365 + C42386 * C193 + C42378 * C366) *
                          C93680) *
                         C59272 +
                     ((C42382 * C1386 + C93854 * C1394 + C42384 * C1385 +
                       C93842 * C1393 + C42386 * C2697 + C42378 * C2698) *
                          C188 +
                      (C42382 * C1468 + C93854 * C1600 + C42384 * C1467 +
                       C93842 * C1599 + C42386 * C2770 + C42378 * C2942) *
                          C93680) *
                         C93718) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                       C93842 * C115 + C42386 * C110 + C42378 * C116) *
                          C188 +
                      (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                       C93842 * C363 + C42386 * C191 + C42378 * C364) *
                          C93680) *
                         C59272 +
                     ((C61034 + C61035 + C61036) * C188 +
                      (C61037 + C61038 + C61039) * C93680) *
                         C93718) *
                        C1382 -
                    (((C61040 + C61041 + C61042) * C93680 +
                      (C61043 + C61044 + C61045) * C188) *
                         C93718 +
                     ((C61039 + C61038 + C61037) * C93680 +
                      (C61036 + C61035 + C61034) * C188) *
                         C59272) *
                        C1383 +
                    (((C61045 + C61044 + C61043) * C188 +
                      (C61042 + C61041 + C61040) * C93680) *
                         C59272 +
                     ((C42382 * C10964 + C93854 * C10967 + C42384 * C10965 +
                       C93842 * C10968 + C42386 * C10966 + C42378 * C10969) *
                          C188 +
                      (C42382 * C11080 + C93854 * C11276 + C42384 * C11081 +
                       C93842 * C11277 + C42386 * C11082 + C42378 * C11278) *
                          C93680) *
                         C93718) *
                        C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93854 +
            C448 * C93842 + C449 * C42378) *
               C59272 +
           (C11414 * C93854 + C3026 * C93842 + C3025 * C42378) * C93718) *
              C93639 * C800 -
          ((C12306 * C42378 + C12307 * C93842 + C14261 * C93854) * C93718 +
           (C2311 * C42378 + C2312 * C93842 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C93854) *
               C59272) *
              C93639 * C801 +
          (((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C93854 +
            (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C93842 +
            (C418 * C810 + C1091 + C1091 + C93680 * C1082) * C42378) *
               C59272 +
           ((C418 * C8520 + C10580 + C10580 + C93680 * C8984) * C93854 +
            (C418 * C8521 + C10581 + C10581 + C93680 * C8985) * C93842 +
            (C418 * C8522 + C10582 + C10582 + C93680 * C8986) * C42378) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93854 +
            C448 * C93842 + C449 * C42378) *
               C59272 +
           (C11414 * C93854 + C3026 * C93842 + C3025 * C42378) * C93718) *
              C93639 * C93625 * C97 -
          ((C3024 * C42378 + C3025 * C93842 + C3026 * C93854) * C93718 +
           (C450 * C42378 + C449 * C93842 + C448 * C93854) * C59272) *
              C93639 * C93625 * C98 +
          ((C449 * C93854 + C450 * C93842 + C451 * C42378) * C59272 +
           (C3025 * C93854 + C3024 * C93842 +
            (C418 * C2697 + C3017 + C3017 + C93680 * C3009) * C42378) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93854 +
            C448 * C93842 + C449 * C42378) *
               C59272 +
           (C61120 + C61121 + C61122) * C93718) *
              C1382 -
          ((C61123 + C61124 + C61125) * C93718 +
           (C61122 + C61121 + C61120) * C59272) *
              C1383 +
          ((C61125 + C61124 + C61123) * C59272 +
           (C30622 * C93854 + C30621 * C93842 +
            (C418 * C10966 + C11405 + C11405 + C93680 * C11391) * C42378) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C188 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93680) *
               C93854 +
           ((C59452 + C59453) * C188 + (C59701 + C59702) * C93680) * C93842 +
           C59709 * C42378) *
              C93639 * C800 -
          (((C59426 * C3493 + C93718 * C3785 + C59425 * C887 + C59272 * C1143) *
                C93680 +
            (C59426 * C3411 + C93718 * C3567 + C59425 * C805 + C59272 * C953) *
                C188) *
               C42378 +
           ((C59426 * C3492 + C93718 * C3784 + C59425 * C888 + C59272 * C1144) *
                C93680 +
            (C59426 * C3410 + C93718 * C3566 + C59425 * C806 + C59272 * C954) *
                C188) *
               C93842 +
           ((C59426 * C3491 + C93718 * C3783 + C59425 * C889 + C59272 * C1145) *
                C93680 +
            (C59426 * C3409 + C93718 * C3565 + C59425 * C807 + C59272 * C955) *
                C188) *
               C93854) *
              C93639 * C801 +
          (((C59425 * C808 + C59272 * C956 + C59426 * C8520 + C93718 * C8749) *
                C188 +
            (C59425 * C890 + C59272 * C1146 + C59426 * C8645 + C93718 * C9091) *
                C93680) *
               C93854 +
           ((C59425 * C809 + C59272 * C957 + C59426 * C8521 + C93718 * C8750) *
                C188 +
            (C59425 * C891 + C59272 * C1147 + C59426 * C8646 + C93718 * C9092) *
                C93680) *
               C93842 +
           ((C59425 * C810 + C59272 * C958 + C59426 * C8522 + C93718 * C8751) *
                C188 +
            (C59425 * C892 + C59272 * C1148 + C59426 * C8647 + C93718 * C9093) *
                C93680) *
               C42378) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C188 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93680) *
               C93854 +
           ((C59452 + C59453) * C188 + (C59701 + C59702) * C93680) * C93842 +
           C59709 * C42378) *
              C93639 * C93625 * C97 -
          (((C59705 + C59706) * C93680 + (C59462 + C59463) * C188) * C42378 +
           ((C59704 + C59703) * C93680 + (C59457 + C59456) * C188) * C93842 +
           ((C59702 + C59701) * C93680 + (C59453 + C59452) * C188) * C93854) *
              C93639 * C93625 * C98 +
          (C59709 * C93854 +
           ((C59463 + C59462) * C188 + (C59706 + C59705) * C93680) * C93842 +
           ((C59425 * C112 + C59272 * C280 + C59426 * C2697 + C93718 * C2856) *
                C188 +
            (C59425 * C193 + C59272 * C505 + C59426 * C2770 + C93718 * C3092) *
                C93680) *
               C42378) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C188 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93680) *
               C93854 +
           ((C59452 + C59453) * C188 + (C59701 + C59702) * C93680) * C93842 +
           C59709 * C42378) *
              C1382 -
          (((C59426 * C1473 + C93718 * C1729 + C59425 * C1468 +
             C59272 * C1724) *
                C93680 +
            (C59426 * C1391 + C93718 * C1539 + C59425 * C1386 +
             C59272 * C1534) *
                C188) *
               C42378 +
           ((C59426 * C1472 + C93718 * C1728 + C59425 * C1469 +
             C59272 * C1725) *
                C93680 +
            (C59426 * C1390 + C93718 * C1538 + C59425 * C1387 +
             C59272 * C1535) *
                C188) *
               C93842 +
           ((C59426 * C1471 + C93718 * C1727 + C59425 * C1470 +
             C59272 * C1726) *
                C93680 +
            (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
             C59272 * C1536) *
                C188) *
               C93854) *
              C1383 +
          (((C59425 * C1389 + C59272 * C1537 + C59426 * C10964 +
             C93718 * C11196) *
                C188 +
            (C59425 * C1471 + C59272 * C1727 + C59426 * C11080 +
             C93718 * C11495) *
                C93680) *
               C93854 +
           ((C59425 * C1390 + C59272 * C1538 + C59426 * C10965 +
             C93718 * C11197) *
                C188 +
            (C59425 * C1472 + C59272 * C1728 + C59426 * C11081 +
             C93718 * C11496) *
                C93680) *
               C93842 +
           ((C59425 * C1391 + C59272 * C1539 + C59426 * C10966 +
             C93718 * C11198) *
                C188 +
            (C59425 * C1473 + C59272 * C1729 + C59426 * C11082 +
             C93718 * C11497) *
                C93680) *
               C42378) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[47] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C59425 +
                     (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                      C93842 * C580 + C42386 * C278 + C42378 * C581) *
                         C59272 +
                     (C42382 * C1388 + C93854 * C1396 + C42384 * C1387 +
                      C93842 * C1395 + C42386 * C1386 + C42378 * C1394) *
                         C59426 +
                     (C42382 * C1536 + C93854 * C1784 + C42384 * C1535 +
                      C93842 * C1783 + C42386 * C1534 + C42378 * C1782) *
                         C93718) *
                        C93680 * C93639 * C800 -
                    ((C47296 + C47297 + C47298) * C93718 +
                     (C46987 + C46988 + C46989) * C59426 +
                     (C43753 + C43752 + C43751) * C59272 +
                     (C43495 + C43494 + C43493) * C59425) *
                        C93680 * C93639 * C801 +
                    ((C43504 + C43503 + C43502) * C59425 +
                     (C43756 + C43755 + C43754) * C59272 +
                     (C42382 * C8520 + C93854 * C8523 + C42384 * C8521 +
                      C93842 * C8524 + C42386 * C8522 + C42378 * C8525) *
                         C59426 +
                     (C42382 * C8749 + C93854 * C9195 + C42384 * C8750 +
                      C93842 * C9196 + C42386 * C8751 + C42378 * C9197) *
                         C93718) *
                        C93680 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C59425 +
                     (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                      C93842 * C580 + C42386 * C278 + C42378 * C581) *
                         C59272 +
                     (C42382 * C1388 + C93854 * C1396 + C42384 * C1387 +
                      C93842 * C1395 + C42386 * C1386 + C42378 * C1394) *
                         C59426 +
                     (C42382 * C1536 + C93854 * C1784 + C42384 * C1535 +
                      C93842 * C1783 + C42386 * C1534 + C42378 * C1782) *
                         C93718) *
                        C93680 * C93639 * C93625 * C97 -
                    ((C42386 * C1533 + C42378 * C1781 + C42384 * C1534 +
                      C93842 * C1782 + C42382 * C1535 + C93854 * C1783) *
                         C93718 +
                     (C42386 * C1385 + C42378 * C1393 + C42384 * C1386 +
                      C93842 * C1394 + C42382 * C1387 + C93854 * C1395) *
                         C59426 +
                     (C42386 * C279 + C42378 * C582 + C42384 * C278 +
                      C93842 * C581 + C42382 * C277 + C93854 * C580) *
                         C59272 +
                     (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                      C93842 * C116 + C42382 * C109 + C93854 * C115) *
                         C59425) *
                        C93680 * C93639 * C93625 * C98 +
                    ((C42382 * C110 + C93854 * C116 + C42384 * C111 +
                      C93842 * C117 + C42386 * C112 + C42378 * C118) *
                         C59425 +
                     (C42382 * C278 + C93854 * C581 + C42384 * C279 +
                      C93842 * C582 + C42386 * C280 + C42378 * C583) *
                         C59272 +
                     (C42382 * C1386 + C93854 * C1394 + C42384 * C1385 +
                      C93842 * C1393 + C42386 * C2697 + C42378 * C2698) *
                         C59426 +
                     (C42382 * C1534 + C93854 * C1782 + C42384 * C1533 +
                      C93842 * C1781 + C42386 * C2856 + C42378 * C3174) *
                         C93718) *
                        C93680 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C59425 +
                     (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                      C93842 * C580 + C42386 * C278 + C42378 * C581) *
                         C59272 +
                     (C61034 + C61035 + C61036) * C59426 +
                     (C61286 + C61287 + C61288) * C93718) *
                        C93680 * C1382 -
                    ((C61289 + C61290 + C61291) * C93718 +
                     (C61043 + C61044 + C61045) * C59426 +
                     (C61288 + C61287 + C61286) * C59272 +
                     (C61036 + C61035 + C61034) * C59425) *
                        C93680 * C1383 +
                    ((C61045 + C61044 + C61043) * C59425 +
                     (C61291 + C61290 + C61289) * C59272 +
                     (C42382 * C10964 + C93854 * C10967 + C42384 * C10965 +
                      C93842 * C10968 + C42386 * C10966 + C42378 * C10969) *
                         C59426 +
                     (C42382 * C11196 + C93854 * C11572 + C42384 * C11197 +
                      C93842 * C11573 + C42386 * C11198 + C42378 * C11574) *
                         C93718) *
                        C93680 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C59425 +
            (C188 * C276 + C93680 * C635) * C59272 + C11107 * C59426 +
            C11679 * C93718) *
               C93854 +
           (C59858 + C59859 + C59860 + C59861) * C93842 + C59872 * C42378) *
              C93639 * C800 -
          ((C12624 * C93718 + C11977 * C59426 + C2539 * C59272 +
            C2074 * C59425) *
               C42378 +
           (C12625 * C93718 + C11979 * C59426 + C2540 * C59272 +
            C2076 * C59425) *
               C93842 +
           (C14559 * C93718 + C13954 * C59426 +
            (C188 * C955 + C93680 * C1261) * C59272 +
            (C188 * C807 + C93680 * C889) * C59425) *
               C93854) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C59425 +
            (C188 * C956 + C93680 * C1262) * C59272 +
            (C188 * C8520 + C93680 * C8645) * C59426 +
            (C188 * C8749 + C93680 * C9305) * C93718) *
               C93854 +
           ((C188 * C809 + C93680 * C891) * C59425 +
            (C188 * C957 + C93680 * C1263) * C59272 +
            (C188 * C8521 + C93680 * C8646) * C59426 +
            (C188 * C8750 + C93680 * C9306) * C93718) *
               C93842 +
           ((C188 * C810 + C93680 * C892) * C59425 +
            (C188 * C958 + C93680 * C1264) * C59272 +
            (C188 * C8522 + C93680 * C8647) * C59426 +
            (C188 * C8751 + C93680 * C9307) * C93718) *
               C42378) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C59425 +
            (C188 * C276 + C93680 * C635) * C59272 + C11107 * C59426 +
            C11679 * C93718) *
               C93854 +
           (C59858 + C59859 + C59860 + C59861) * C93842 + C59872 * C42378) *
              C93639 * C93625 * C97 -
          ((C59866 + C59867 + C59868 + C59869) * C42378 +
           (C59865 + C59864 + C59863 + C59862) * C93842 +
           (C59861 + C59860 + C59859 + C59858) * C93854) *
              C93639 * C93625 * C98 +
          (C59872 * C93854 + (C59869 + C59868 + C59867 + C59866) * C93842 +
           (C225 * C59425 + C657 * C59272 +
            (C188 * C2697 + C93680 * C2770) * C59426 +
            (C188 * C2856 + C93680 * C3241) * C93718) *
               C42378) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C59425 +
            (C188 * C276 + C93680 * C635) * C59272 + C11107 * C59426 +
            C11679 * C93718) *
               C93854 +
           (C59858 + C59859 + C59860 + C59861) * C93842 + C59872 * C42378) *
              C1382 -
          ((C11680 * C93718 + C11110 * C59426 + C3253 * C59272 +
            C2788 * C59425) *
               C42378 +
           (C11681 * C93718 + C11112 * C59426 + C3254 * C59272 +
            C2790 * C59425) *
               C93842 +
           (C11682 * C93718 + C11114 * C59426 + C11679 * C59272 +
            C11107 * C59425) *
               C93854) *
              C1383 +
          ((C11114 * C59425 + C11682 * C59272 + C30328 * C59426 +
            C30877 * C93718) *
               C93854 +
           (C11112 * C59425 + C11681 * C59272 + C30326 * C59426 +
            C30876 * C93718) *
               C93842 +
           (C11110 * C59425 + C11680 * C59272 +
            (C188 * C10966 + C93680 * C11082) * C59426 +
            (C188 * C11198 + C93680 * C11669) * C93718) *
               C42378) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[47] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                      C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                         C93680 * C93854 +
                     (C59983 + C59984) * C93680 * C93842 + C59990 * C42378) *
                        C93639 * C800 -
                    ((C59947 * C3411 + C60657 + C60657 + C93718 * C3995 +
                      C59946 * C805 + C60658 + C60658 + C59272 * C1317) *
                         C93680 * C42378 +
                     (C59947 * C3410 + C60659 + C60659 + C93718 * C3994 +
                      C59946 * C806 + C60660 + C60660 + C59272 * C1318) *
                         C93680 * C93842 +
                     (C59947 * C3409 + C60661 + C60661 + C93718 * C3993 +
                      C59946 * C807 + C60662 + C60662 + C59272 * C1319) *
                         C93680 * C93854) *
                        C93639 * C801 +
                    ((C59946 * C808 + C60663 + C60663 + C59272 * C1320 +
                      C59947 * C8520 + C60664 + C60664 + C93718 * C9406) *
                         C93680 * C93854 +
                     (C59946 * C809 + C60665 + C60665 + C59272 * C1321 +
                      C59947 * C8521 + C60666 + C60666 + C93718 * C9407) *
                         C93680 * C93842 +
                     (C59946 * C810 + C60667 + C60667 + C59272 * C1322 +
                      C59947 * C8522 + C60668 + C60668 + C93718 * C9408) *
                         C93680 * C42378) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                      C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                         C93680 * C93854 +
                     (C59983 + C59984) * C93680 * C93842 + C59990 * C42378) *
                        C93639 * C93625 * C97 -
                    ((C59987 + C59988) * C93680 * C42378 +
                     (C59986 + C59985) * C93680 * C93842 +
                     (C59984 + C59983) * C93680 * C93854) *
                        C93639 * C93625 * C98 +
                    (C59990 * C93854 + (C59988 + C59987) * C93680 * C93842 +
                     (C59946 * C112 + C59969 + C59969 + C59272 * C718 +
                      C59947 * C2697 + C59970 + C59970 + C93718 * C3323) *
                         C93680 * C42378) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                      C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                         C93680 * C93854 +
                     (C59983 + C59984) * C93680 * C93842 + C59990 * C42378) *
                        C1382 -
                    ((C59947 * C1391 + C61440 + C61440 + C93718 * C1903 +
                      C59946 * C1386 + C61441 + C61441 + C59272 * C1898) *
                         C93680 * C42378 +
                     (C59947 * C1390 + C61442 + C61442 + C93718 * C1902 +
                      C59946 * C1387 + C61443 + C61443 + C59272 * C1899) *
                         C93680 * C93842 +
                     (C59947 * C1389 + C61444 + C61444 + C93718 * C1901 +
                      C59946 * C1388 + C61445 + C61445 + C59272 * C1900) *
                         C93680 * C93854) *
                        C1383 +
                    ((C59946 * C1389 + C61446 + C61446 + C59272 * C1901 +
                      C59947 * C10964 + C61447 + C61447 + C93718 * C11756) *
                         C93680 * C93854 +
                     (C59946 * C1390 + C61448 + C61448 + C59272 * C1902 +
                      C59947 * C10965 + C61449 + C61449 + C93718 * C11757) *
                         C93680 * C93842 +
                     (C59946 * C1391 + C61450 + C61450 + C59272 * C1903 +
                      C59947 * C10966 + C61451 + C61451 + C93718 * C11758) *
                         C93680 * C42378) *
                        C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                       C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                       C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                          C59272 +
                      (C60770 + C60771 + C60772) * C93718) *
                         C93680 * C2695 -
                     ((C60773 + C60774 + C60775) * C93718 +
                      (C60772 + C60771 + C60770) * C59272) *
                         C93680 * C2696) *
                        C93625 * C1981 +
                    (((C62513 + C62514 + C62515) * C59272 +
                      (C42381 * C1390 + C62504 + C62504 + C93854 * C1406 +
                       C42383 * C1391 + C62505 + C62505 + C93842 * C1407 +
                       C42385 * C1392 + C62506 + C62506 + C42378 * C1408) *
                          C93718) *
                         C93680 * C2696 -
                     ((C62515 + C62514 + C62513) * C93718 +
                      (C42385 * C111 + C42397 + C42397 + C42378 * C123 +
                       C42383 * C110 + C42398 + C42398 + C93842 * C122 +
                       C42381 * C109 + C42399 + C42399 + C93854 * C121) *
                          C59272) *
                         C93680 * C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C42382 +
             (C188 * C114 + C93680 * C195) * C93854 + C218 * C42384 +
             C219 * C93842 + C220 * C42386 + C221 * C42378) *
                C59272 +
            (C60850 + C60851 + C60852 + C60853 + C60854 + C60855) * C93718) *
               C2695 -
           ((C60856 + C60857 + C60858 + C60859 + C60860 + C60861) * C93718 +
            (C60855 + C60854 + C60853 + C60852 + C60851 + C60850) * C59272) *
               C2696) *
              C93625 * C1981 +
          (((C62614 + C62615 + C62616 + C62617 + C62618 + C62619) * C59272 +
            (C11112 * C42382 + C11111 * C93854 + C11110 * C42384 +
             C11109 * C93842 + (C188 * C1392 + C93680 * C1474) * C42386 +
             (C188 * C1400 + C93680 * C1482) * C42378) *
                C93718) *
               C2696 -
           ((C62619 + C62618 + C62617 + C62616 + C62615 + C62614) * C93718 +
            (C223 * C42378 + C222 * C42386 + C221 * C93842 + C220 * C42384 +
             C219 * C93854 + C218 * C42382) *
                C59272) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C42382 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C93854 +
            (C59452 + C59453) * C42384 + (C59454 + C59455) * C93842 +
            C59464 * C42386 + C59465 * C42378) *
               C93680 * C2695 -
           ((C62734 + C62735) * C42378 + (C62736 + C62737) * C42386 +
            (C62738 + C62739) * C93842 + (C62740 + C62741) * C42384 +
            (C59426 * C1397 + C93718 * C1545 + C59425 * C1396 +
             C59272 * C1544) *
                C93854 +
            (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
             C59272 * C1536) *
                C42382) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C62741 + C62740) * C42382 + (C62739 + C62738) * C93854 +
            (C62737 + C62736) * C42384 + (C62735 + C62734) * C93842 +
            (C59425 * C1385 + C59272 * C1533 + C59426 * C1392 +
             C93718 * C1540) *
                C42386 +
            (C59425 * C1393 + C59272 * C1541 + C59426 * C1400 +
             C93718 * C1548) *
                C42378) *
               C93680 * C2696 -
           ((C59460 + C59461) * C42378 + (C59462 + C59463) * C42386 +
            (C59459 + C59458) * C93842 + (C59457 + C59456) * C42384 +
            (C59455 + C59454) * C93854 + (C59453 + C59452) * C42382) *
               C93680 * C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                        C93842 * C115 + C42386 * C110 + C42378 * C116) *
                           C188 +
                       (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                        C93842 * C363 + C42386 * C191 + C42378 * C364) *
                           C93680) *
                          C59272 +
                      ((C61034 + C61035 + C61036) * C188 +
                       (C61037 + C61038 + C61039) * C93680) *
                          C93718) *
                         C2695 -
                     (((C61040 + C61041 + C61042) * C93680 +
                       (C61043 + C61044 + C61045) * C188) *
                          C93718 +
                      ((C61039 + C61038 + C61037) * C93680 +
                       (C61036 + C61035 + C61034) * C188) *
                          C59272) *
                         C2696) *
                        C93625 * C1981 +
                    ((((C62852 + C62853 + C62854) * C188 +
                       (C62855 + C62856 + C62857) * C93680) *
                          C59272 +
                      ((C42382 * C1390 + C93854 * C1398 + C42384 * C1391 +
                        C93842 * C1399 + C42386 * C1392 + C42378 * C1400) *
                           C188 +
                       (C42382 * C1472 + C93854 * C1604 + C42384 * C1473 +
                        C93842 * C1605 + C42386 * C1474 + C42378 * C1606) *
                           C93680) *
                          C93718) *
                         C2696 -
                     (((C62857 + C62856 + C62855) * C93680 +
                       (C62854 + C62853 + C62852) * C188) *
                          C93718 +
                      ((C42386 * C192 + C42378 * C365 + C42384 * C191 +
                        C93842 * C364 + C42382 * C190 + C93854 * C363) *
                           C93680 +
                       (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                        C93842 * C116 + C42382 * C109 + C93854 * C115) *
                           C188) *
                          C59272) *
                         C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C93854 +
             C448 * C93842 + C449 * C42378) *
                C59272 +
            (C61120 + C61121 + C61122) * C93718) *
               C2695 -
           ((C61123 + C61124 + C61125) * C93718 +
            (C61122 + C61121 + C61120) * C59272) *
               C2696) *
              C93625 * C1981 +
          (((C62956 + C62957 + C62958) * C59272 +
            (C11416 * C93854 + C11415 * C93842 +
             (C418 * C1392 + C1673 + C1673 + C93680 * C1664) * C42378) *
                C93718) *
               C2696 -
           ((C62958 + C62957 + C62956) * C93718 +
            (C450 * C42378 + C449 * C93842 + C448 * C93854) * C59272) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C188 +
             (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                 C93680) *
                C93854 +
            ((C59452 + C59453) * C188 + (C59701 + C59702) * C93680) * C93842 +
            C59709 * C42378) *
               C2695 -
           (((C63065 + C63066) * C93680 + (C62736 + C62737) * C188) * C42378 +
            ((C63067 + C63068) * C93680 + (C62740 + C62741) * C188) * C93842 +
            ((C59426 * C1471 + C93718 * C1727 + C59425 * C1470 +
              C59272 * C1726) *
                 C93680 +
             (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
              C59272 * C1536) *
                 C188) *
                C93854) *
               C2696) *
              C93625 * C1981 +
          ((((C62741 + C62740) * C188 + (C63068 + C63067) * C93680) * C93854 +
            ((C62737 + C62736) * C188 + (C63066 + C63065) * C93680) * C93842 +
            ((C59425 * C1385 + C59272 * C1533 + C59426 * C1392 +
              C93718 * C1540) *
                 C188 +
             (C59425 * C1467 + C59272 * C1723 + C59426 * C1474 +
              C93718 * C1730) *
                 C93680) *
                C42378) *
               C2696 -
           (((C59705 + C59706) * C93680 + (C59462 + C59463) * C188) * C42378 +
            ((C59704 + C59703) * C93680 + (C59457 + C59456) * C188) * C93842 +
            ((C59702 + C59701) * C93680 + (C59453 + C59452) * C188) * C93854) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                       C93842 * C115 + C42386 * C110 + C42378 * C116) *
                          C59425 +
                      (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                       C93842 * C580 + C42386 * C278 + C42378 * C581) *
                          C59272 +
                      (C61034 + C61035 + C61036) * C59426 +
                      (C61286 + C61287 + C61288) * C93718) *
                         C93680 * C2695 -
                     ((C61289 + C61290 + C61291) * C93718 +
                      (C61043 + C61044 + C61045) * C59426 +
                      (C61288 + C61287 + C61286) * C59272 +
                      (C61036 + C61035 + C61034) * C59425) *
                         C93680 * C2696) *
                        C93625 * C1981 +
                    (((C62852 + C62853 + C62854) * C59425 +
                      (C63173 + C63174 + C63175) * C59272 +
                      (C42382 * C1390 + C93854 * C1398 + C42384 * C1391 +
                       C93842 * C1399 + C42386 * C1392 + C42378 * C1400) *
                          C59426 +
                      (C42382 * C1538 + C93854 * C1786 + C42384 * C1539 +
                       C93842 * C1787 + C42386 * C1540 + C42378 * C1788) *
                          C93718) *
                         C93680 * C2696 -
                     ((C63175 + C63174 + C63173) * C93718 +
                      (C62854 + C62853 + C62852) * C59426 +
                      (C42386 * C279 + C42378 * C582 + C42384 * C278 +
                       C93842 * C581 + C42382 * C277 + C93854 * C580) *
                          C59272 +
                      (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                       C93842 * C116 + C42382 * C109 + C93854 * C115) *
                          C59425) *
                         C93680 * C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C59425 +
             (C188 * C276 + C93680 * C635) * C59272 + C11107 * C59426 +
             C11679 * C93718) *
                C93854 +
            (C59858 + C59859 + C59860 + C59861) * C93842 + C59872 * C42378) *
               C2695 -
           ((C63274 + C63275 + C63276 + C63277) * C42378 +
            (C63278 + C63279 + C63280 + C63281) * C93842 +
            (C11682 * C93718 + C11114 * C59426 + C11679 * C59272 +
             C11107 * C59425) *
                C93854) *
               C2696) *
              C93625 * C1981 +
          (((C63281 + C63280 + C63279 + C63278) * C93854 +
            (C63277 + C63276 + C63275 + C63274) * C93842 +
            (C2786 * C59425 + C3252 * C59272 +
             (C188 * C1392 + C93680 * C1474) * C59426 +
             (C188 * C1540 + C93680 * C1846) * C93718) *
                C42378) *
               C2696 -
           ((C59866 + C59867 + C59868 + C59869) * C42378 +
            (C59865 + C59864 + C59863 + C59862) * C93842 +
            (C59861 + C59860 + C59859 + C59858) * C93854) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                       C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                          C93680 * C93854 +
                      (C59983 + C59984) * C93680 * C93842 + C59990 * C42378) *
                         C2695 -
                     ((C63398 + C63399) * C93680 * C42378 +
                      (C63400 + C63401) * C93680 * C93842 +
                      (C59947 * C1389 + C61444 + C61444 + C93718 * C1901 +
                       C59946 * C1388 + C61445 + C61445 + C59272 * C1900) *
                          C93680 * C93854) *
                         C2696) *
                        C93625 * C1981 +
                    (((C63401 + C63400) * C93680 * C93854 +
                      (C63399 + C63398) * C93680 * C93842 +
                      (C59946 * C1385 + C63388 + C63388 + C59272 * C1897 +
                       C59947 * C1392 + C63389 + C63389 + C93718 * C1904) *
                          C93680 * C42378) *
                         C2696 -
                     ((C59987 + C59988) * C93680 * C42378 +
                      (C59986 + C59985) * C93680 * C93842 +
                      (C59984 + C59983) * C93680 * C93854) *
                         C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[49] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                      C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                      C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                         C59272 +
                     (C42381 * C1388 + C43984 + C43984 + C93854 * C1404 +
                      C42383 * C1387 + C43983 + C43983 + C93842 * C1403 +
                      C42385 * C1386 + C43982 + C43982 + C42378 * C1402) *
                         C93718) *
                        C93680 * C93639 * C93625 * C97 -
                    ((C42385 * C1385 + C45698 + C45698 + C42378 * C1401 +
                      C42383 * C1386 + C45697 + C45697 + C93842 * C1402 +
                      C42381 * C1387 + C45696 + C45696 + C93854 * C1403) *
                         C93718 +
                     (C42385 * C111 + C42397 + C42397 + C42378 * C123 +
                      C42383 * C110 + C42398 + C42398 + C93842 * C122 +
                      C42381 * C109 + C42399 + C42399 + C93854 * C121) *
                         C59272) *
                        C93680 * C93639 * C93625 * C98 +
                    ((C42381 * C110 + C42400 + C42400 + C93854 * C122 +
                      C42383 * C111 + C42401 + C42401 + C93842 * C123 +
                      C42385 * C112 + C42402 + C42402 + C42378 * C124) *
                         C59272 +
                     (C42381 * C1386 + C59275 + C59275 + C93854 * C1402 +
                      C42383 * C1385 + C59276 + C59276 + C93842 * C1401 +
                      C42385 * C2697 + C59277 + C59277 + C42378 * C2699) *
                         C93718) *
                        C93680 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C42381 * C108 + C42388 + C42388 + C93854 * C120 +
                      C42383 * C109 + C42389 + C42389 + C93842 * C121 +
                      C42385 * C110 + C42390 + C42390 + C42378 * C122) *
                         C59272 +
                     (C42381 * C1388 + C43984 + C43984 + C93854 * C1404 +
                      C42383 * C1387 + C43983 + C43983 + C93842 * C1403 +
                      C42385 * C1386 + C43982 + C43982 + C42378 * C1402) *
                         C93718) *
                        C93680 * C93639 * C800 -
                    ((C46669 + C46670 + C46671) * C93718 +
                     (C43231 + C43230 + C43229) * C59272) *
                        C93680 * C93639 * C801 +
                    ((C43234 + C43233 + C43232) * C59272 +
                     (C42381 * C8520 + C46660 + C46660 + C93854 * C8526 +
                      C42383 * C8521 + C46661 + C46661 + C93842 * C8527 +
                      C42385 * C8522 + C46662 + C46662 + C42378 * C8528) *
                         C93718) *
                        C93680 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C42382 +
            (C188 * C114 + C93680 * C195) * C93854 + C218 * C42384 +
            C219 * C93842 + C220 * C42386 + C221 * C42378) *
               C59272 +
           (C11107 * C42382 + C11108 * C93854 + C2790 * C42384 +
            C2789 * C93842 + C2788 * C42386 + C2787 * C42378) *
               C93718) *
              C93639 * C93625 * C97 -
          ((C2785 * C42378 + C2786 * C42386 + C2787 * C93842 + C2788 * C42384 +
            C2789 * C93854 + C2790 * C42382) *
               C93718 +
           (C223 * C42378 + C222 * C42386 + C221 * C93842 + C220 * C42384 +
            C219 * C93854 + C218 * C42382) *
               C59272) *
              C93639 * C93625 * C98 +
          ((C220 * C42382 + C221 * C93854 + C222 * C42384 + C223 * C93842 +
            C225 * C42386 + C224 * C42378) *
               C59272 +
           (C2788 * C42382 + C2787 * C93854 + C2786 * C42384 + C2785 * C93842 +
            (C188 * C2697 + C93680 * C2770) * C42386 +
            (C188 * C2698 + C93680 * C2771) * C42378) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C42382 +
            (C188 * C114 + C93680 * C195) * C93854 + C218 * C42384 +
            C219 * C93842 + C220 * C42386 + C221 * C42378) *
               C59272 +
           (C11107 * C42382 + C11108 * C93854 + C2790 * C42384 +
            C2789 * C93842 + C2788 * C42386 + C2787 * C42378) *
               C93718) *
              C93639 * C800 -
          ((C11976 * C42378 + C11977 * C42386 + C11978 * C93842 +
            C11979 * C42384 + C13955 * C93854 + C13954 * C42382) *
               C93718 +
           (C2073 * C42378 + C2074 * C42386 + C2075 * C93842 + C2076 * C42384 +
            (C188 * C815 + C93680 * C897) * C93854 +
            (C188 * C807 + C93680 * C889) * C42382) *
               C59272) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C42382 +
            (C188 * C816 + C93680 * C898) * C93854 +
            (C188 * C809 + C93680 * C891) * C42384 +
            (C188 * C817 + C93680 * C899) * C93842 +
            (C188 * C810 + C93680 * C892) * C42386 +
            (C188 * C818 + C93680 * C900) * C42378) *
               C59272 +
           ((C188 * C8520 + C93680 * C8645) * C42382 +
            (C188 * C8523 + C93680 * C8648) * C93854 +
            (C188 * C8521 + C93680 * C8646) * C42384 +
            (C188 * C8524 + C93680 * C8649) * C93842 +
            (C188 * C8522 + C93680 * C8647) * C42386 +
            (C188 * C8525 + C93680 * C8650) * C42378) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
               C42382 +
           (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
               C93854 +
           (C59452 + C59453) * C42384 + (C59454 + C59455) * C93842 +
           C59464 * C42386 + C59465 * C42378) *
              C93680 * C93639 * C93625 * C97 -
          ((C59460 + C59461) * C42378 + (C59462 + C59463) * C42386 +
           (C59459 + C59458) * C93842 + (C59457 + C59456) * C42384 +
           (C59455 + C59454) * C93854 + (C59453 + C59452) * C42382) *
              C93680 * C93639 * C93625 * C98 +
          (C59464 * C42382 + C59465 * C93854 + (C59463 + C59462) * C42384 +
           (C59461 + C59460) * C93842 +
           (C59425 * C112 + C59272 * C280 + C59426 * C2697 + C93718 * C2856) *
               C42386 +
           (C59425 * C118 + C59272 * C286 + C59426 * C2698 + C93718 * C2857) *
               C42378) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
               C42382 +
           (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
               C93854 +
           (C59452 + C59453) * C42384 + (C59454 + C59455) * C93842 +
           C59464 * C42386 + C59465 * C42378) *
              C93680 * C93639 * C800 -
          ((C59426 * C3415 + C93718 * C3571 + C59425 * C813 + C59272 * C961) *
               C42378 +
           (C59426 * C3411 + C93718 * C3567 + C59425 * C805 + C59272 * C953) *
               C42386 +
           (C59426 * C3414 + C93718 * C3570 + C59425 * C814 + C59272 * C962) *
               C93842 +
           (C59426 * C3410 + C93718 * C3566 + C59425 * C806 + C59272 * C954) *
               C42384 +
           (C59426 * C3413 + C93718 * C3569 + C59425 * C815 + C59272 * C963) *
               C93854 +
           (C59426 * C3409 + C93718 * C3565 + C59425 * C807 + C59272 * C955) *
               C42382) *
              C93680 * C93639 * C801 +
          ((C59425 * C808 + C59272 * C956 + C59426 * C8520 + C93718 * C8749) *
               C42382 +
           (C59425 * C816 + C59272 * C964 + C59426 * C8523 + C93718 * C8752) *
               C93854 +
           (C59425 * C809 + C59272 * C957 + C59426 * C8521 + C93718 * C8750) *
               C42384 +
           (C59425 * C817 + C59272 * C965 + C59426 * C8524 + C93718 * C8753) *
               C93842 +
           (C59425 * C810 + C59272 * C958 + C59426 * C8522 + C93718 * C8751) *
               C42386 +
           (C59425 * C818 + C59272 * C966 + C59426 * C8525 + C93718 * C8754) *
               C42378) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[49] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                       C93842 * C115 + C42386 * C110 + C42378 * C116) *
                          C188 +
                      (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                       C93842 * C363 + C42386 * C191 + C42378 * C364) *
                          C93680) *
                         C59272 +
                     ((C42382 * C1388 + C93854 * C1396 + C42384 * C1387 +
                       C93842 * C1395 + C42386 * C1386 + C42378 * C1394) *
                          C188 +
                      (C42382 * C1470 + C93854 * C1602 + C42384 * C1469 +
                       C93842 * C1601 + C42386 * C1468 + C42378 * C1600) *
                          C93680) *
                         C93718) *
                        C93639 * C93625 * C97 -
                    (((C42386 * C1467 + C42378 * C1599 + C42384 * C1468 +
                       C93842 * C1600 + C42382 * C1469 + C93854 * C1601) *
                          C93680 +
                      (C42386 * C1385 + C42378 * C1393 + C42384 * C1386 +
                       C93842 * C1394 + C42382 * C1387 + C93854 * C1395) *
                          C188) *
                         C93718 +
                     ((C42386 * C192 + C42378 * C365 + C42384 * C191 +
                       C93842 * C364 + C42382 * C190 + C93854 * C363) *
                          C93680 +
                      (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                       C93842 * C116 + C42382 * C109 + C93854 * C115) *
                          C188) *
                         C59272) *
                        C93639 * C93625 * C98 +
                    (((C42382 * C110 + C93854 * C116 + C42384 * C111 +
                       C93842 * C117 + C42386 * C112 + C42378 * C118) *
                          C188 +
                      (C42382 * C191 + C93854 * C364 + C42384 * C192 +
                       C93842 * C365 + C42386 * C193 + C42378 * C366) *
                          C93680) *
                         C59272 +
                     ((C42382 * C1386 + C93854 * C1394 + C42384 * C1385 +
                       C93842 * C1393 + C42386 * C2697 + C42378 * C2698) *
                          C188 +
                      (C42382 * C1468 + C93854 * C1600 + C42384 * C1467 +
                       C93842 * C1599 + C42386 * C2770 + C42378 * C2942) *
                          C93680) *
                         C93718) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                       C93842 * C115 + C42386 * C110 + C42378 * C116) *
                          C188 +
                      (C42382 * C189 + C93854 * C362 + C42384 * C190 +
                       C93842 * C363 + C42386 * C191 + C42378 * C364) *
                          C93680) *
                         C59272 +
                     ((C42382 * C1388 + C93854 * C1396 + C42384 * C1387 +
                       C93842 * C1395 + C42386 * C1386 + C42378 * C1394) *
                          C188 +
                      (C42382 * C1470 + C93854 * C1602 + C42384 * C1469 +
                       C93842 * C1601 + C42386 * C1468 + C42378 * C1600) *
                          C93680) *
                         C93718) *
                        C93639 * C800 -
                    (((C46984 + C46985 + C46986) * C93680 +
                      (C46987 + C46988 + C46989) * C188) *
                         C93718 +
                     ((C43498 + C43497 + C43496) * C93680 +
                      (C43495 + C43494 + C43493) * C188) *
                         C59272) *
                        C93639 * C801 +
                    (((C43504 + C43503 + C43502) * C188 +
                      (C43501 + C43500 + C43499) * C93680) *
                         C59272 +
                     ((C42382 * C8520 + C93854 * C8523 + C42384 * C8521 +
                       C93842 * C8524 + C42386 * C8522 + C42378 * C8525) *
                          C188 +
                      (C42382 * C8645 + C93854 * C8865 + C42384 * C8646 +
                       C93842 * C8866 + C42386 * C8647 + C42378 * C8867) *
                          C93680) *
                         C93718) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93854 +
            C448 * C93842 + C449 * C42378) *
               C59272 +
           (C11414 * C93854 + C3026 * C93842 + C3025 * C42378) * C93718) *
              C93639 * C93625 * C97 -
          ((C3024 * C42378 + C3025 * C93842 + C3026 * C93854) * C93718 +
           (C450 * C42378 + C449 * C93842 + C448 * C93854) * C59272) *
              C93639 * C93625 * C98 +
          ((C449 * C93854 + C450 * C93842 + C451 * C42378) * C59272 +
           (C3025 * C93854 + C3024 * C93842 +
            (C418 * C2697 + C3017 + C3017 + C93680 * C3009) * C42378) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C93854 +
            C448 * C93842 + C449 * C42378) *
               C59272 +
           (C11414 * C93854 + C3026 * C93842 + C3025 * C42378) * C93718) *
              C93639 * C800 -
          ((C12306 * C42378 + C12307 * C93842 + C14261 * C93854) * C93718 +
           (C2311 * C42378 + C2312 * C93842 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C93854) *
               C59272) *
              C93639 * C801 +
          (((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C93854 +
            (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C93842 +
            (C418 * C810 + C1091 + C1091 + C93680 * C1082) * C42378) *
               C59272 +
           ((C418 * C8520 + C10580 + C10580 + C93680 * C8984) * C93854 +
            (C418 * C8521 + C10581 + C10581 + C93680 * C8985) * C93842 +
            (C418 * C8522 + C10582 + C10582 + C93680 * C8986) * C42378) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C188 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93680) *
               C93854 +
           ((C59452 + C59453) * C188 + (C59701 + C59702) * C93680) * C93842 +
           C59709 * C42378) *
              C93639 * C93625 * C97 -
          (((C59705 + C59706) * C93680 + (C59462 + C59463) * C188) * C42378 +
           ((C59704 + C59703) * C93680 + (C59457 + C59456) * C188) * C93842 +
           ((C59702 + C59701) * C93680 + (C59453 + C59452) * C188) * C93854) *
              C93639 * C93625 * C98 +
          (C59709 * C93854 +
           ((C59463 + C59462) * C188 + (C59706 + C59705) * C93680) * C93842 +
           ((C59425 * C112 + C59272 * C280 + C59426 * C2697 + C93718 * C2856) *
                C188 +
            (C59425 * C193 + C59272 * C505 + C59426 * C2770 + C93718 * C3092) *
                C93680) *
               C42378) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C188 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93680) *
               C93854 +
           ((C59452 + C59453) * C188 + (C59701 + C59702) * C93680) * C93842 +
           C59709 * C42378) *
              C93639 * C800 -
          (((C59426 * C3493 + C93718 * C3785 + C59425 * C887 + C59272 * C1143) *
                C93680 +
            (C59426 * C3411 + C93718 * C3567 + C59425 * C805 + C59272 * C953) *
                C188) *
               C42378 +
           ((C59426 * C3492 + C93718 * C3784 + C59425 * C888 + C59272 * C1144) *
                C93680 +
            (C59426 * C3410 + C93718 * C3566 + C59425 * C806 + C59272 * C954) *
                C188) *
               C93842 +
           ((C59426 * C3491 + C93718 * C3783 + C59425 * C889 + C59272 * C1145) *
                C93680 +
            (C59426 * C3409 + C93718 * C3565 + C59425 * C807 + C59272 * C955) *
                C188) *
               C93854) *
              C93639 * C801 +
          (((C59425 * C808 + C59272 * C956 + C59426 * C8520 + C93718 * C8749) *
                C188 +
            (C59425 * C890 + C59272 * C1146 + C59426 * C8645 + C93718 * C9091) *
                C93680) *
               C93854 +
           ((C59425 * C809 + C59272 * C957 + C59426 * C8521 + C93718 * C8750) *
                C188 +
            (C59425 * C891 + C59272 * C1147 + C59426 * C8646 + C93718 * C9092) *
                C93680) *
               C93842 +
           ((C59425 * C810 + C59272 * C958 + C59426 * C8522 + C93718 * C8751) *
                C188 +
            (C59425 * C892 + C59272 * C1148 + C59426 * C8647 + C93718 * C9093) *
                C93680) *
               C42378) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[49] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C59425 +
                     (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                      C93842 * C580 + C42386 * C278 + C42378 * C581) *
                         C59272 +
                     (C42382 * C1388 + C93854 * C1396 + C42384 * C1387 +
                      C93842 * C1395 + C42386 * C1386 + C42378 * C1394) *
                         C59426 +
                     (C42382 * C1536 + C93854 * C1784 + C42384 * C1535 +
                      C93842 * C1783 + C42386 * C1534 + C42378 * C1782) *
                         C93718) *
                        C93680 * C93639 * C93625 * C97 -
                    ((C42386 * C1533 + C42378 * C1781 + C42384 * C1534 +
                      C93842 * C1782 + C42382 * C1535 + C93854 * C1783) *
                         C93718 +
                     (C42386 * C1385 + C42378 * C1393 + C42384 * C1386 +
                      C93842 * C1394 + C42382 * C1387 + C93854 * C1395) *
                         C59426 +
                     (C42386 * C279 + C42378 * C582 + C42384 * C278 +
                      C93842 * C581 + C42382 * C277 + C93854 * C580) *
                         C59272 +
                     (C42386 * C111 + C42378 * C117 + C42384 * C110 +
                      C93842 * C116 + C42382 * C109 + C93854 * C115) *
                         C59425) *
                        C93680 * C93639 * C93625 * C98 +
                    ((C42382 * C110 + C93854 * C116 + C42384 * C111 +
                      C93842 * C117 + C42386 * C112 + C42378 * C118) *
                         C59425 +
                     (C42382 * C278 + C93854 * C581 + C42384 * C279 +
                      C93842 * C582 + C42386 * C280 + C42378 * C583) *
                         C59272 +
                     (C42382 * C1386 + C93854 * C1394 + C42384 * C1385 +
                      C93842 * C1393 + C42386 * C2697 + C42378 * C2698) *
                         C59426 +
                     (C42382 * C1534 + C93854 * C1782 + C42384 * C1533 +
                      C93842 * C1781 + C42386 * C2856 + C42378 * C3174) *
                         C93718) *
                        C93680 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C42382 * C108 + C93854 * C114 + C42384 * C109 +
                      C93842 * C115 + C42386 * C110 + C42378 * C116) *
                         C59425 +
                     (C42382 * C276 + C93854 * C579 + C42384 * C277 +
                      C93842 * C580 + C42386 * C278 + C42378 * C581) *
                         C59272 +
                     (C42382 * C1388 + C93854 * C1396 + C42384 * C1387 +
                      C93842 * C1395 + C42386 * C1386 + C42378 * C1394) *
                         C59426 +
                     (C42382 * C1536 + C93854 * C1784 + C42384 * C1535 +
                      C93842 * C1783 + C42386 * C1534 + C42378 * C1782) *
                         C93718) *
                        C93680 * C93639 * C800 -
                    ((C47296 + C47297 + C47298) * C93718 +
                     (C46987 + C46988 + C46989) * C59426 +
                     (C43753 + C43752 + C43751) * C59272 +
                     (C43495 + C43494 + C43493) * C59425) *
                        C93680 * C93639 * C801 +
                    ((C43504 + C43503 + C43502) * C59425 +
                     (C43756 + C43755 + C43754) * C59272 +
                     (C42382 * C8520 + C93854 * C8523 + C42384 * C8521 +
                      C93842 * C8524 + C42386 * C8522 + C42378 * C8525) *
                         C59426 +
                     (C42382 * C8749 + C93854 * C9195 + C42384 * C8750 +
                      C93842 * C9196 + C42386 * C8751 + C42378 * C9197) *
                         C93718) *
                        C93680 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C59425 +
            (C188 * C276 + C93680 * C635) * C59272 + C11107 * C59426 +
            C11679 * C93718) *
               C93854 +
           (C59858 + C59859 + C59860 + C59861) * C93842 + C59872 * C42378) *
              C93639 * C93625 * C97 -
          ((C59866 + C59867 + C59868 + C59869) * C42378 +
           (C59865 + C59864 + C59863 + C59862) * C93842 +
           (C59861 + C59860 + C59859 + C59858) * C93854) *
              C93639 * C93625 * C98 +
          (C59872 * C93854 + (C59869 + C59868 + C59867 + C59866) * C93842 +
           (C225 * C59425 + C657 * C59272 +
            (C188 * C2697 + C93680 * C2770) * C59426 +
            (C188 * C2856 + C93680 * C3241) * C93718) *
               C42378) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C59425 +
            (C188 * C276 + C93680 * C635) * C59272 + C11107 * C59426 +
            C11679 * C93718) *
               C93854 +
           (C59858 + C59859 + C59860 + C59861) * C93842 + C59872 * C42378) *
              C93639 * C800 -
          ((C12624 * C93718 + C11977 * C59426 + C2539 * C59272 +
            C2074 * C59425) *
               C42378 +
           (C12625 * C93718 + C11979 * C59426 + C2540 * C59272 +
            C2076 * C59425) *
               C93842 +
           (C14559 * C93718 + C13954 * C59426 +
            (C188 * C955 + C93680 * C1261) * C59272 +
            (C188 * C807 + C93680 * C889) * C59425) *
               C93854) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C59425 +
            (C188 * C956 + C93680 * C1262) * C59272 +
            (C188 * C8520 + C93680 * C8645) * C59426 +
            (C188 * C8749 + C93680 * C9305) * C93718) *
               C93854 +
           ((C188 * C809 + C93680 * C891) * C59425 +
            (C188 * C957 + C93680 * C1263) * C59272 +
            (C188 * C8521 + C93680 * C8646) * C59426 +
            (C188 * C8750 + C93680 * C9306) * C93718) *
               C93842 +
           ((C188 * C810 + C93680 * C892) * C59425 +
            (C188 * C958 + C93680 * C1264) * C59272 +
            (C188 * C8522 + C93680 * C8647) * C59426 +
            (C188 * C8751 + C93680 * C9307) * C93718) *
               C42378) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[49] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                      C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                         C93680 * C93854 +
                     (C59983 + C59984) * C93680 * C93842 + C59990 * C42378) *
                        C93639 * C93625 * C97 -
                    ((C59987 + C59988) * C93680 * C42378 +
                     (C59986 + C59985) * C93680 * C93842 +
                     (C59984 + C59983) * C93680 * C93854) *
                        C93639 * C93625 * C98 +
                    (C59990 * C93854 + (C59988 + C59987) * C93680 * C93842 +
                     (C59946 * C112 + C59969 + C59969 + C59272 * C718 +
                      C59947 * C2697 + C59970 + C59970 + C93718 * C3323) *
                         C93680 * C42378) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C59946 * C108 + C59949 + C59949 + C59272 * C714 +
                      C59947 * C1388 + C59950 + C59950 + C93718 * C1900) *
                         C93680 * C93854 +
                     (C59983 + C59984) * C93680 * C93842 + C59990 * C42378) *
                        C93639 * C800 -
                    ((C59947 * C3411 + C60657 + C60657 + C93718 * C3995 +
                      C59946 * C805 + C60658 + C60658 + C59272 * C1317) *
                         C93680 * C42378 +
                     (C59947 * C3410 + C60659 + C60659 + C93718 * C3994 +
                      C59946 * C806 + C60660 + C60660 + C59272 * C1318) *
                         C93680 * C93842 +
                     (C59947 * C3409 + C60661 + C60661 + C93718 * C3993 +
                      C59946 * C807 + C60662 + C60662 + C59272 * C1319) *
                         C93680 * C93854) *
                        C93639 * C801 +
                    ((C59946 * C808 + C60663 + C60663 + C59272 * C1320 +
                      C59947 * C8520 + C60664 + C60664 + C93718 * C9406) *
                         C93680 * C93854 +
                     (C59946 * C809 + C60665 + C60665 + C59272 * C1321 +
                      C59947 * C8521 + C60666 + C60666 + C93718 * C9407) *
                         C93680 * C93842 +
                     (C59946 * C810 + C60667 + C60667 + C59272 * C1322 +
                      C59947 * C8522 + C60668 + C60668 + C93718 * C9408) *
                         C93680 * C42378) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
              C47579 + C47579 + C93590 * C121) *
                 C59272 +
             (C54583 + C54584) * C93718) *
                C93828 +
            ((C48410 + C48411) * C59272 + C58119 * C93718) * C93694) *
               C93639 * C1979 -
           (((C51847 + C51848) * C93718 + (C48413 + C48412) * C59272) * C93694 +
            (C58120 * C93718 + (C48411 + C48410) * C59272) * C93828) *
               C93639 * C1980) *
              C1981 +
          ((((C49903 + C49904) * C59272 + (C55655 + C55656) * C93718) * C93828 +
            ((C49905 + C49906) * C59272 +
             (C47573 * C8521 + C50891 + C50891 + C47568 * C8527 +
              C47575 * C8522 + C50892 + C50892 + C93590 * C8528) *
                 C93718) *
                C93694) *
               C93639 * C1980 -
           (((C55656 + C55655) * C93718 + (C49904 + C49903) * C59272) * C93694 +
            ((C56894 + C56893) * C93718 +
             (C47575 * C110 + C47588 + C47588 + C93590 * C122 + C47573 * C109 +
              C47589 + C47589 + C47568 * C121) *
                 C59272) *
                C93828) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C47574 +
             (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                 C47568 +
             (C4205 + C4206) * C47576 + (C4207 + C4208) * C93590) *
                C59272 +
            ((C35511 + C35512) * C47574 + (C35513 + C35514) * C47568 +
             (C7662 + C7661) * C47576 + (C7660 + C7659) * C93590) *
                C93718) *
               C93639 * C1979 -
           (((C67307 + C67308) * C93590 + (C67309 + C67310) * C47576 +
             (C38206 + C38205) * C47568 + (C38204 + C38203) * C47574) *
                C93718 +
            ((C6668 + C6669) * C93590 + (C6670 + C6671) * C47576 +
             (C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                 C47568 +
             (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                 C47574) *
                C59272) *
               C93639 * C1980) *
              C1981 +
          ((((C6671 + C6670) * C47574 + (C6669 + C6668) * C47568 +
             (C6667 + C6666) * C47576 + (C6665 + C6664) * C93590) *
                C59272 +
            ((C67310 + C67309) * C47574 + (C67308 + C67307) * C47568 +
             (C4178 * C3411 + C93828 * C3493 + C4179 * C8522 + C93694 * C8647) *
                 C47576 +
             (C4178 * C3415 + C93828 * C3497 + C4179 * C8525 + C93694 * C8650) *
                 C93590) *
                C93718) *
               C93639 * C1980 -
           (((C7655 + C7656) * C93590 + (C7657 + C7658) * C47576 +
             (C7659 + C7660) * C47568 + (C7661 + C7662) * C47574) *
                C93718 +
            ((C4212 + C4211) * C93590 + (C4210 + C4209) * C47576 +
             (C4208 + C4207) * C47568 + (C4206 + C4205) * C47574) *
                C59272) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C47574 +
             (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                 C47568 +
             (C59452 + C59453) * C47576 + (C59454 + C59455) * C93590) *
                C93828 +
            ((C65499 + C65500) * C47574 + (C65501 + C65502) * C47568 +
             C67441 * C47576 + C67442 * C93590) *
                C93694) *
               C93639 * C1979 -
           (((C65503 + C65504) * C93590 + (C65505 + C65506) * C47576 +
             (C65507 + C65508) * C47568 + (C65509 + C65510) * C47574) *
                C93694 +
            (C67443 * C93590 + C67444 * C47576 + (C65502 + C65501) * C47568 +
             (C65500 + C65499) * C47574) *
                C93828) *
               C93639 * C1980) *
              C1981 +
          (((C67441 * C47574 + C67442 * C47568 + (C61765 + C61764) * C47576 +
             (C61763 + C61762) * C93590) *
                C93828 +
            ((C65506 + C65505) * C47574 + (C65504 + C65503) * C47568 +
             (C59425 * C810 + C59272 * C958 + C59426 * C8522 + C93718 * C8751) *
                 C47576 +
             (C59425 * C818 + C59272 * C966 + C59426 * C8525 + C93718 * C8754) *
                 C93590) *
                C93694) *
               C93639 * C1980 -
           (((C61762 + C61763) * C93590 + (C61764 + C61765) * C47576 +
             C67443 * C47568 + C67444 * C47574) *
                C93694 +
            ((C59459 + C59458) * C93590 + (C59457 + C59456) * C47576 +
             (C59455 + C59454) * C47568 + (C59453 + C59452) * C47574) *
                C93828) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C4178 +
             (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                 C93828 +
             (C48679 + C48680) * C4179 + (C48681 + C48682) * C93694) *
                C59272 +
            ((C54943 + C54944) * C4178 + (C54945 + C54946) * C93828 +
             C58523 * C4179 + C58524 * C93694) *
                C93718) *
               C93639 * C1979 -
           (((C52169 + C52170) * C93694 + (C52171 + C52172) * C4179 +
             C58525 * C93828 + C58526 * C4178) *
                C93718 +
            ((C48686 + C48685) * C93694 + (C48684 + C48683) * C4179 +
             (C48682 + C48681) * C93828 + (C48680 + C48679) * C4178) *
                C59272) *
               C93639 * C1980) *
              C1981 +
          ((((C50243 + C50244) * C4178 + (C50245 + C50246) * C93828 +
             (C50247 + C50248) * C4179 + (C50249 + C50250) * C93694) *
                C59272 +
            ((C56071 + C56072) * C4178 + (C56073 + C56074) * C93828 +
             (C47574 * C8521 + C47568 * C8524 + C47576 * C8522 +
              C93590 * C8525) *
                 C4179 +
             (C47574 * C8646 + C47568 * C8866 + C47576 * C8647 +
              C93590 * C8867) *
                 C93694) *
                C93718) *
               C93639 * C1980 -
           (((C56074 + C56073) * C93694 + (C56072 + C56071) * C4179 +
             (C57312 + C57311) * C93828 + (C57310 + C57309) * C4178) *
                C93718 +
            ((C50246 + C50245) * C93694 + (C50244 + C50243) * C4179 +
             (C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                 C93828 +
             (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                 C4178) *
                C59272) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
              C4444 + C4444 + C93694 * C1079) *
                 C47568 +
             (C4477 + C4478) * C93590) *
                C59272 +
            ((C35809 + C35810) * C47568 + (C7990 + C7989) * C93590) * C93718) *
               C93639 * C1979 -
           (((C67713 + C67714) * C93590 + (C38550 + C38549) * C47568) * C93718 +
            ((C7010 + C7011) * C93590 +
             (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
              C5334 + C5334 + C93828 * C1079) *
                 C47568) *
                C59272) *
               C93639 * C1980) *
              C1981 +
          ((((C7011 + C7010) * C47568 + (C7009 + C7008) * C93590) * C59272 +
            ((C67714 + C67713) * C47568 +
             (C4440 * C3411 + C8992 + C8992 + C93828 * C3711 + C4441 * C8522 +
              C8993 + C8993 + C93694 * C8986) *
                 C93590) *
                C93718) *
               C93639 * C1980 -
           (((C7987 + C7988) * C93590 + (C7989 + C7990) * C47568) * C93718 +
            ((C4480 + C4479) * C93590 + (C4478 + C4477) * C47568) * C59272) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C4178 +
             (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                 C93828 +
             (C65499 + C65500) * C4179 + (C65819 + C65820) * C93694) *
                C47568 +
            ((C59452 + C59453) * C4178 + (C59701 + C59702) * C93828 +
             C67441 * C4179 + C67845 * C93694) *
                C93590) *
               C93639 * C1979 -
           (((C65821 + C65822) * C93694 + (C65505 + C65506) * C4179 +
             C67846 * C93828 + C67444 * C4178) *
                C93590 +
            ((C65823 + C65824) * C93694 + (C65509 + C65510) * C4179 +
             (C65820 + C65819) * C93828 + (C65500 + C65499) * C4178) *
                C47568) *
               C93639 * C1980) *
              C1981 +
          (((C67441 * C4178 + C67845 * C93828 + (C65506 + C65505) * C4179 +
             (C65822 + C65821) * C93694) *
                C47568 +
            ((C61765 + C61764) * C4178 + (C62073 + C62072) * C93828 +
             (C59425 * C810 + C59272 * C958 + C59426 * C8522 + C93718 * C8751) *
                 C4179 +
             (C59425 * C892 + C59272 * C1148 + C59426 * C8647 +
              C93718 * C9093) *
                 C93694) *
                C93590) *
               C93639 * C1980 -
           (((C62072 + C62073) * C93694 + (C61764 + C61765) * C4179 +
             (C59704 + C59703) * C93828 + (C59457 + C59456) * C4178) *
                C93590 +
            (C67846 * C93694 + C67444 * C4179 + (C59702 + C59701) * C93828 +
             (C59453 + C59452) * C4178) *
                C47568) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C59425 +
             (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                 C59272 +
             (C54943 + C54944) * C59426 + (C55295 + C55296) * C93718) *
                C93828 +
            ((C48679 + C48680) * C59425 + (C48940 + C48941) * C59272 +
             C58523 * C59426 + C58931 * C93718) *
                C93694) *
               C93639 * C1979 -
           (((C52485 + C52486) * C93718 + (C52171 + C52172) * C59426 +
             (C48943 + C48942) * C59272 + (C48684 + C48683) * C59425) *
                C93694 +
            (C58932 * C93718 + C58526 * C59426 + (C48941 + C48940) * C59272 +
             (C48680 + C48679) * C59425) *
                C93828) *
               C93639 * C1980) *
              C1981 +
          ((((C50243 + C50244) * C59425 + (C50577 + C50578) * C59272 +
             (C56071 + C56072) * C59426 + (C56481 + C56482) * C93718) *
                C93828 +
            ((C50247 + C50248) * C59425 + (C50579 + C50580) * C59272 +
             (C47574 * C8521 + C47568 * C8524 + C47576 * C8522 +
              C93590 * C8525) *
                 C59426 +
             (C47574 * C8750 + C47568 * C9196 + C47576 * C8751 +
              C93590 * C9197) *
                 C93718) *
                C93694) *
               C93639 * C1980 -
           (((C56482 + C56481) * C93718 + (C56072 + C56071) * C59426 +
             (C50578 + C50577) * C59272 + (C50244 + C50243) * C59425) *
                C93694 +
            ((C57716 + C57715) * C93718 + (C57310 + C57309) * C59426 +
             (C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                 C59272 +
             (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                 C59425) *
                C93828) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C59425 +
             (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                 C59272 +
             (C35511 + C35512) * C59426 + (C36060 + C36061) * C93718) *
                C47568 +
            ((C4205 + C4206) * C59425 + (C4734 + C4735) * C59272 +
             (C7662 + C7661) * C59426 + (C8310 + C8309) * C93718) *
                C93590) *
               C93639 * C1979 -
           (((C68111 + C68112) * C93718 + (C67309 + C67310) * C59426 +
             (C7333 + C7334) * C59272 + (C6670 + C6671) * C59425) *
                C93590 +
            ((C38871 + C38870) * C93718 + (C38204 + C38203) * C59426 +
             (C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                 C59272 +
             (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                 C59425) *
                C47568) *
               C93639 * C1980) *
              C1981 +
          ((((C6671 + C6670) * C59425 + (C7334 + C7333) * C59272 +
             (C67310 + C67309) * C59426 + (C68112 + C68111) * C93718) *
                C47568 +
            ((C6667 + C6666) * C59425 + (C7332 + C7331) * C59272 +
             (C4178 * C3411 + C93828 * C3493 + C4179 * C8522 + C93694 * C8647) *
                 C59426 +
             (C4178 * C3567 + C93828 * C3925 + C4179 * C8751 + C93694 * C9307) *
                 C93718) *
                C93590) *
               C93639 * C1980 -
           (((C8307 + C8308) * C93718 + (C7657 + C7658) * C59426 +
             (C4737 + C4736) * C59272 + (C4210 + C4209) * C59425) *
                C93590 +
            ((C8309 + C8310) * C93718 + (C7661 + C7662) * C59426 +
             (C4735 + C4734) * C59272 + (C4206 + C4205) * C59425) *
                C47568) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
              C59950 + C59950 + C93718 * C1900) *
                 C93828 +
             (C66147 + C66148) * C93694) *
                C47568 +
            ((C59983 + C59984) * C93828 + C68243 * C93694) * C93590) *
               C93639 * C1979 -
           (((C66149 + C66150) * C93694 + C68244 * C93828) * C93590 +
            ((C66151 + C66152) * C93694 + (C66148 + C66147) * C93828) *
                C47568) *
               C93639 * C1980) *
              C1981 +
          (((C68243 * C93828 + (C66150 + C66149) * C93694) * C47568 +
            ((C62397 + C62396) * C93828 +
             (C59946 * C810 + C60667 + C60667 + C59272 * C1322 +
              C59947 * C8522 + C60668 + C60668 + C93718 * C9408) *
                 C93694) *
                C93590) *
               C93639 * C1980 -
           (((C62396 + C62397) * C93694 + (C59986 + C59985) * C93828) * C93590 +
            (C68244 * C93694 + (C59984 + C59983) * C93828) * C47568) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
              C47579 + C47579 + C93590 * C121) *
                 C59272 +
             (C54583 + C54584) * C93718) *
                C93828 +
            ((C48410 + C48411) * C59272 + C58119 * C93718) * C93694) *
               C2695 -
           (((C54585 + C54586) * C93718 + C58120 * C59272) * C93694 +
            ((C54587 + C54588) * C93718 + (C54584 + C54583) * C59272) *
                C93828) *
               C2696) *
              C1979 +
          (((C58119 * C59272 + (C54586 + C54585) * C93718) * C93828 +
            ((C51848 + C51847) * C59272 +
             (C47573 * C16395 + C49181 + C49181 + C47568 * C16399 +
              C47575 * C16396 + C49182 + C49182 + C93590 * C16400) *
                 C93718) *
                C93694) *
               C2696 -
           (((C51847 + C51848) * C93718 + (C48413 + C48412) * C59272) * C93694 +
            (C58120 * C93718 + (C48411 + C48410) * C59272) * C93828) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C47574 +
             (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                 C47568 +
             (C4205 + C4206) * C47576 + (C4207 + C4208) * C93590) *
                C59272 +
            ((C35511 + C35512) * C47574 + (C35513 + C35514) * C47568 +
             C68505 * C47576 + C68506 * C93590) *
                C93718) *
               C2695 -
           (((C37266 + C37265) * C93590 + (C37264 + C37263) * C47576 +
             (C35518 + C35517) * C47568 + (C35516 + C35515) * C47574) *
                C93718 +
            (C68507 * C93590 + C68508 * C47576 + (C35514 + C35513) * C47568 +
             (C35512 + C35511) * C47574) *
                C59272) *
               C2696) *
              C1979 +
          ((((C38203 + C38204) * C47574 + (C38205 + C38206) * C47568 +
             (C67310 + C67309) * C47576 + (C67308 + C67307) * C93590) *
                C59272 +
            ((C38207 + C38208) * C47574 + (C38209 + C38210) * C47568 +
             (C4178 * C5776 + C93828 * C5871 + C4179 * C16396 +
              C93694 * C16488) *
                 C47576 +
             (C4178 * C5779 + C93828 * C5874 + C4179 * C16398 +
              C93694 * C16490) *
                 C93590) *
                C93718) *
               C2696 -
           (((C67307 + C67308) * C93590 + (C67309 + C67310) * C47576 +
             (C38206 + C38205) * C47568 + (C38204 + C38203) * C47574) *
                C93718 +
            ((C6668 + C6669) * C93590 + (C6670 + C6671) * C47576 +
             (C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                 C47568 +
             (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                 C47574) *
                C59272) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C47574 +
             (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                 C47568 +
             (C59452 + C59453) * C47576 + (C59454 + C59455) * C93590) *
                C93828 +
            ((C65499 + C65500) * C47574 + (C65501 + C65502) * C47568 +
             C67441 * C47576 + C67442 * C93590) *
                C93694) *
               C2695 -
           (((C68647 + C68648) * C93590 + (C68649 + C68650) * C47576 +
             (C69849 + C69850) * C47568 + (C69851 + C69852) * C47574) *
                C93694 +
            ((C62738 + C62739) * C93590 + (C62740 + C62741) * C47576 +
             (C59426 * C1397 + C93718 * C1545 + C59425 * C1396 +
              C59272 * C1544) *
                 C47568 +
             (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
              C59272 * C1536) *
                 C47574) *
                C93828) *
               C2696) *
              C1979 +
          ((((C69852 + C69851) * C47574 + (C69850 + C69849) * C47568 +
             (C68650 + C68649) * C47576 + (C68648 + C68647) * C93590) *
                C93828 +
            ((C59425 * C8520 + C59272 * C8749 + C59426 * C16395 +
              C93718 * C16565) *
                 C47574 +
             (C59425 * C8523 + C59272 * C8752 + C59426 * C16397 +
              C93718 * C16567) *
                 C47568 +
             (C59425 * C8521 + C59272 * C8750 + C59426 * C16396 +
              C93718 * C16566) *
                 C47576 +
             (C59425 * C8524 + C59272 * C8753 + C59426 * C16398 +
              C93718 * C16568) *
                 C93590) *
                C93694) *
               C2696 -
           (((C65503 + C65504) * C93590 + (C65505 + C65506) * C47576 +
             (C65507 + C65508) * C47568 + (C65509 + C65510) * C47574) *
                C93694 +
            (C67443 * C93590 + C67444 * C47576 + (C65502 + C65501) * C47568 +
             (C65500 + C65499) * C47574) *
                C93828) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C4178 +
             (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                 C93828 +
             (C48679 + C48680) * C4179 + (C48681 + C48682) * C93694) *
                C59272 +
            ((C54943 + C54944) * C4178 + (C54945 + C54946) * C93828 +
             C58523 * C4179 + C58524 * C93694) *
                C93718) *
               C2695 -
           (((C54947 + C54948) * C93694 + (C54949 + C54950) * C4179 +
             (C54951 + C54952) * C93828 + (C54953 + C54954) * C4178) *
                C93718 +
            (C58525 * C93694 + C58526 * C4179 + (C54946 + C54945) * C93828 +
             (C54944 + C54943) * C4178) *
                C59272) *
               C2696) *
              C1979 +
          (((C58523 * C4178 + C58524 * C93828 + (C52172 + C52171) * C4179 +
             (C52170 + C52169) * C93694) *
                C59272 +
            ((C54950 + C54949) * C4178 + (C54948 + C54947) * C93828 +
             (C47574 * C16395 + C47568 * C16397 + C47576 * C16396 +
              C93590 * C16398) *
                 C4179 +
             (C47574 * C16487 + C47568 * C16643 + C47576 * C16488 +
              C93590 * C16644) *
                 C93694) *
                C93718) *
               C2696 -
           (((C52169 + C52170) * C93694 + (C52171 + C52172) * C4179 +
             C58525 * C93828 + C58526 * C4178) *
                C93718 +
            ((C48686 + C48685) * C93694 + (C48684 + C48683) * C4179 +
             (C48682 + C48681) * C93828 + (C48680 + C48679) * C4178) *
                C59272) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
              C4444 + C4444 + C93694 * C1079) *
                 C47568 +
             (C4477 + C4478) * C93590) *
                C59272 +
            ((C35809 + C35810) * C47568 + C68911 * C93590) * C93718) *
               C2695 -
           (((C37586 + C37585) * C93590 + (C35812 + C35811) * C47568) * C93718 +
            (C68912 * C93590 + (C35810 + C35809) * C47568) * C59272) *
               C2696) *
              C1979 +
          ((((C38549 + C38550) * C47568 + (C67714 + C67713) * C93590) * C59272 +
            ((C38551 + C38552) * C47568 +
             (C4440 * C5776 + C36649 + C36649 + C93828 * C6108 +
              C4441 * C16396 + C36650 + C36650 + C93694 * C16720) *
                 C93590) *
                C93718) *
               C2696 -
           (((C67713 + C67714) * C93590 + (C38550 + C38549) * C47568) * C93718 +
            ((C7010 + C7011) * C93590 +
             (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
              C5334 + C5334 + C93828 * C1079) *
                 C47568) *
                C59272) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C4178 +
             (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                 C93828 +
             (C65499 + C65500) * C4179 + (C65819 + C65820) * C93694) *
                C47568 +
            ((C59452 + C59453) * C4178 + (C59701 + C59702) * C93828 +
             C67441 * C4179 + C67845 * C93694) *
                C93590) *
               C2695 -
           (((C69047 + C69048) * C93694 + (C68649 + C68650) * C4179 +
             (C63067 + C63068) * C93828 + (C62740 + C62741) * C4178) *
                C93590 +
            ((C70247 + C70248) * C93694 + (C69851 + C69852) * C4179 +
             (C59426 * C1471 + C93718 * C1727 + C59425 * C1470 +
              C59272 * C1726) *
                 C93828 +
             (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
              C59272 * C1536) *
                 C4178) *
                C47568) *
               C2696) *
              C1979 +
          ((((C69852 + C69851) * C4178 + (C70248 + C70247) * C93828 +
             (C59425 * C8520 + C59272 * C8749 + C59426 * C16395 +
              C93718 * C16565) *
                 C4179 +
             (C59425 * C8645 + C59272 * C9091 + C59426 * C16487 +
              C93718 * C16807) *
                 C93694) *
                C47568 +
            ((C68650 + C68649) * C4178 + (C69048 + C69047) * C93828 +
             (C59425 * C8521 + C59272 * C8750 + C59426 * C16396 +
              C93718 * C16566) *
                 C4179 +
             (C59425 * C8646 + C59272 * C9092 + C59426 * C16488 +
              C93718 * C16808) *
                 C93694) *
                C93590) *
               C2696 -
           (((C65821 + C65822) * C93694 + (C65505 + C65506) * C4179 +
             C67846 * C93828 + C67444 * C4178) *
                C93590 +
            ((C65823 + C65824) * C93694 + (C65509 + C65510) * C4179 +
             (C65820 + C65819) * C93828 + (C65500 + C65499) * C4178) *
                C47568) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C59425 +
             (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                 C59272 +
             (C54943 + C54944) * C59426 + (C55295 + C55296) * C93718) *
                C93828 +
            ((C48679 + C48680) * C59425 + (C48940 + C48941) * C59272 +
             C58523 * C59426 + C58931 * C93718) *
                C93694) *
               C2695 -
           (((C55297 + C55298) * C93718 + (C54949 + C54950) * C59426 +
             C58932 * C59272 + C58526 * C59425) *
                C93694 +
            ((C55299 + C55300) * C93718 + (C54953 + C54954) * C59426 +
             (C55296 + C55295) * C59272 + (C54944 + C54943) * C59425) *
                C93828) *
               C2696) *
              C1979 +
          (((C58523 * C59425 + C58931 * C59272 + (C54950 + C54949) * C59426 +
             (C55298 + C55297) * C93718) *
                C93828 +
            ((C52172 + C52171) * C59425 + (C52486 + C52485) * C59272 +
             (C47574 * C16395 + C47568 * C16397 + C47576 * C16396 +
              C93590 * C16398) *
                 C59426 +
             (C47574 * C16565 + C47568 * C16883 + C47576 * C16566 +
              C93590 * C16884) *
                 C93718) *
                C93694) *
               C2696 -
           (((C52485 + C52486) * C93718 + (C52171 + C52172) * C59426 +
             (C48943 + C48942) * C59272 + (C48684 + C48683) * C59425) *
                C93694 +
            (C58932 * C93718 + C58526 * C59426 + (C48941 + C48940) * C59272 +
             (C48680 + C48679) * C59425) *
                C93828) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C59425 +
             (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                 C59272 +
             (C35511 + C35512) * C59426 + (C36060 + C36061) * C93718) *
                C47568 +
            ((C4205 + C4206) * C59425 + (C4734 + C4735) * C59272 +
             C68505 * C59426 + C69309 * C93718) *
                C93590) *
               C2695 -
           (((C37889 + C37888) * C93718 + (C37264 + C37263) * C59426 +
             C69310 * C59272 + C68508 * C59425) *
                C93590 +
            ((C36063 + C36062) * C93718 + (C35516 + C35515) * C59426 +
             (C36061 + C36060) * C59272 + (C35512 + C35511) * C59425) *
                C47568) *
               C2696) *
              C1979 +
          ((((C38203 + C38204) * C59425 + (C38870 + C38871) * C59272 +
             (C38207 + C38208) * C59426 + (C38872 + C38873) * C93718) *
                C47568 +
            ((C67310 + C67309) * C59425 + (C68112 + C68111) * C59272 +
             (C4178 * C5776 + C93828 * C5871 + C4179 * C16396 +
              C93694 * C16488) *
                 C59426 +
             (C4178 * C5951 + C93828 * C6351 + C4179 * C16566 +
              C93694 * C16960) *
                 C93718) *
                C93590) *
               C2696 -
           (((C68111 + C68112) * C93718 + (C67309 + C67310) * C59426 +
             (C7333 + C7334) * C59272 + (C6670 + C6671) * C59425) *
                C93590 +
            ((C38871 + C38870) * C93718 + (C38204 + C38203) * C59426 +
             (C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                 C59272 +
             (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                 C59425) *
                C47568) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
              C59950 + C59950 + C93718 * C1900) *
                 C93828 +
             (C66147 + C66148) * C93694) *
                C47568 +
            ((C59983 + C59984) * C93828 + C68243 * C93694) * C93590) *
               C2695 -
           (((C69449 + C69450) * C93694 + (C63400 + C63401) * C93828) * C93590 +
            ((C70651 + C70652) * C93694 +
             (C59947 * C1389 + C61444 + C61444 + C93718 * C1901 +
              C59946 * C1388 + C61445 + C61445 + C59272 * C1900) *
                 C93828) *
                C47568) *
               C2696) *
              C1979 +
          ((((C70652 + C70651) * C93828 +
             (C59946 * C8520 + C70643 + C70643 + C59272 * C9406 +
              C59947 * C16395 + C70644 + C70644 + C93718 * C17035) *
                 C93694) *
                C47568 +
            ((C69450 + C69449) * C93828 +
             (C59946 * C8521 + C70645 + C70645 + C59272 * C9407 +
              C59947 * C16396 + C70646 + C70646 + C93718 * C17036) *
                 C93694) *
                C93590) *
               C2696 -
           (((C66149 + C66150) * C93694 + C68244 * C93828) * C93590 +
            ((C66151 + C66152) * C93694 + (C66148 + C66147) * C93828) *
                C47568) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
             C47579 + C47579 + C93590 * C121) *
                C59272 +
            (C54583 + C54584) * C93718) *
               C93828 +
           ((C48410 + C48411) * C59272 + C58119 * C93718) * C93694) *
              C93639 * C800 -
          (((C51847 + C51848) * C93718 + (C48413 + C48412) * C59272) * C93694 +
           (C58120 * C93718 + (C48411 + C48410) * C59272) * C93828) *
              C93639 * C801 +
          ((C48416 * C59272 + (C51848 + C51847) * C93718) * C93828 +
           ((C48415 + C48414) * C59272 +
            (C47573 * C19095 + C51837 + C51837 + C47568 * C19099 +
             C47575 * C19096 + C51838 + C51838 + C93590 * C19100) *
                C93718) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
             C47579 + C47579 + C93590 * C121) *
                C59272 +
            (C54583 + C54584) * C93718) *
               C93828 +
           ((C48410 + C48411) * C59272 + C58119 * C93718) * C93694) *
              C93639 * C93625 * C97 -
          (((C55656 + C55655) * C93718 + (C49904 + C49903) * C59272) * C93694 +
           ((C56894 + C56893) * C93718 +
            (C47575 * C110 + C47588 + C47588 + C93590 * C122 + C47573 * C109 +
             C47589 + C47589 + C47568 * C121) *
                C59272) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C47573 * C110 + C47590 + C47590 + C47568 * C122 + C47575 * C111 +
             C47591 + C47591 + C93590 * C123) *
                C59272 +
            (C47573 * C1386 + C52783 + C52783 + C47568 * C1402 +
             C47575 * C1385 + C52784 + C52784 + C93590 * C1401) *
                C93718) *
               C93828 +
           ((C47573 * C805 + C47592 + C47592 + C47568 * C821 + C47575 * C804 +
             C47593 + C47593 + C93590 * C820) *
                C59272 +
            (C47573 * C3411 + C52785 + C52785 + C47568 * C3419 +
             C47575 * C3412 + C52786 + C52786 + C93590 * C3420) *
                C93718) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
             C47579 + C47579 + C93590 * C121) *
                C59272 +
            (C54583 + C54584) * C93718) *
               C93828 +
           ((C48410 + C48411) * C59272 + C58119 * C93718) * C93694) *
              C1382 -
          (((C54585 + C54586) * C93718 + C58120 * C59272) * C93694 +
           ((C54587 + C54588) * C93718 + (C54584 + C54583) * C59272) * C93828) *
              C1383 +
          (((C54588 + C54587) * C59272 +
            (C47573 * C10964 + C54567 + C54567 + C47568 * C10970 +
             C47575 * C10965 + C54568 + C54568 + C93590 * C10971) *
                C93718) *
               C93828 +
           ((C54586 + C54585) * C59272 +
            (C47573 * C25001 + C54569 + C54569 + C47568 * C25005 +
             C47575 * C33015 + C54570 + C54570 + C93590 * C33017) *
                C93718) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C47574 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C47568 +
            (C4205 + C4206) * C47576 + (C4207 + C4208) * C93590) *
               C59272 +
           ((C35511 + C35512) * C47574 + (C35513 + C35514) * C47568 +
            (C7662 + C7661) * C47576 + (C7660 + C7659) * C93590) *
               C93718) *
              C93639 * C800 -
          (((C4179 * C8524 + C93694 * C8649 + C4178 * C3414 + C93828 * C3496) *
                C93590 +
            (C4179 * C8521 + C93694 * C8646 + C4178 * C3410 + C93828 * C3492) *
                C47576 +
            (C38206 + C38205) * C47568 + (C38204 + C38203) * C47574) *
               C93718 +
           ((C6668 + C6669) * C93590 + (C6670 + C6671) * C47576 +
            (C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                C47568 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C47574) *
               C59272) *
              C93639 * C801 +
          (((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
                C47574 +
            (C4178 * C816 + C93828 * C898 + C4179 * C4900 + C93694 * C5019) *
                C47568 +
            (C4178 * C809 + C93828 * C891 + C4179 * C4898 + C93694 * C5017) *
                C47576 +
            (C4178 * C817 + C93828 * C899 + C4179 * C4901 + C93694 * C5020) *
                C93590) *
               C59272 +
           ((C4178 * C8520 + C93828 * C8645 + C4179 * C19095 +
             C93694 * C19221) *
                C47574 +
            (C4178 * C8523 + C93828 * C8648 + C4179 * C19097 +
             C93694 * C19223) *
                C47568 +
            (C4178 * C8521 + C93828 * C8646 + C4179 * C19096 +
             C93694 * C19222) *
                C47576 +
            (C4178 * C8524 + C93828 * C8649 + C4179 * C19098 +
             C93694 * C19224) *
                C93590) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C47574 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C47568 +
            (C4205 + C4206) * C47576 + (C4207 + C4208) * C93590) *
               C59272 +
           ((C35511 + C35512) * C47574 + (C35513 + C35514) * C47568 +
            (C7662 + C7661) * C47576 + (C7660 + C7659) * C93590) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C7655 + C7656) * C93590 + (C7657 + C7658) * C47576 +
            (C7659 + C7660) * C47568 + (C7661 + C7662) * C47574) *
               C93718 +
           ((C4212 + C4211) * C93590 + (C4210 + C4209) * C47576 +
            (C4208 + C4207) * C47568 + (C4206 + C4205) * C47574) *
               C59272) *
              C93639 * C93625 * C98 +
          ((C4217 * C47574 + C4218 * C47568 + (C4216 + C4215) * C47576 +
            (C4214 + C4213) * C93590) *
               C59272 +
           ((C7658 + C7657) * C47574 + (C7656 + C7655) * C47568 +
            (C4178 * C1385 + C93828 * C1467 + C4179 * C3412 + C93694 * C3494) *
                C47576 +
            (C4178 * C1393 + C93828 * C1475 + C4179 * C3416 + C93694 * C3498) *
                C93590) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C47574 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C47568 +
            (C4205 + C4206) * C47576 + (C4207 + C4208) * C93590) *
               C59272 +
           ((C35511 + C35512) * C47574 + (C35513 + C35514) * C47568 +
            (C7662 + C7661) * C47576 + (C7660 + C7659) * C93590) *
               C93718) *
              C1382 -
          (((C37266 + C37265) * C93590 + (C37264 + C37263) * C47576 +
            (C35518 + C35517) * C47568 + (C35516 + C35515) * C47574) *
               C93718 +
           ((C7659 + C7660) * C93590 + (C7661 + C7662) * C47576 +
            (C35514 + C35513) * C47568 + (C35512 + C35511) * C47574) *
               C59272) *
              C1383 +
          ((C35523 * C47574 + C35524 * C47568 + (C37263 + C37264) * C47576 +
            (C37265 + C37266) * C93590) *
               C59272 +
           ((C35522 + C35521) * C47574 + (C35520 + C35519) * C47568 +
            (C4178 * C10965 + C93828 * C11081 + C4179 * C33015 +
             C93694 * C33128) *
                C47576 +
            (C4178 * C10968 + C93828 * C11084 + C4179 * C33016 +
             C93694 * C33129) *
                C93590) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C47574 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C47568 +
            (C59452 + C59453) * C47576 + (C59454 + C59455) * C93590) *
               C93828 +
           ((C65499 + C65500) * C47574 + (C65501 + C65502) * C47568 +
            (C61769 + C61768) * C47576 + (C61767 + C61766) * C93590) *
               C93694) *
              C93639 * C800 -
          (((C65503 + C65504) * C93590 + (C65505 + C65506) * C47576 +
            (C65507 + C65508) * C47568 + (C65509 + C65510) * C47574) *
               C93694 +
           ((C61766 + C61767) * C93590 + (C61768 + C61769) * C47576 +
            (C65502 + C65501) * C47568 + (C65500 + C65499) * C47574) *
               C93828) *
              C93639 * C801 +
          (((C65510 + C65509) * C47574 + (C65508 + C65507) * C47568 +
            (C65506 + C65505) * C47576 + (C65504 + C65503) * C93590) *
               C93828 +
           ((C59425 * C4897 + C59272 * C5096 + C59426 * C19095 +
             C93718 * C19323) *
                C47574 +
            (C59425 * C4900 + C59272 * C5099 + C59426 * C19097 +
             C93718 * C19325) *
                C47568 +
            (C59425 * C4898 + C59272 * C5097 + C59426 * C19096 +
             C93718 * C19324) *
                C47576 +
            (C59425 * C4901 + C59272 * C5100 + C59426 * C19098 +
             C93718 * C19326) *
                C93590) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C47574 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C47568 +
            (C59452 + C59453) * C47576 + (C59454 + C59455) * C93590) *
               C93828 +
           ((C59425 * C807 + C59272 * C955 + C59426 * C3409 + C93718 * C3565) *
                C47574 +
            (C59425 * C815 + C59272 * C963 + C59426 * C3413 + C93718 * C3569) *
                C47568 +
            (C61769 + C61768) * C47576 + (C61767 + C61766) * C93590) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C61762 + C61763) * C93590 + (C61764 + C61765) * C47576 +
            (C61766 + C61767) * C47568 + (C61768 + C61769) * C47574) *
               C93694 +
           ((C59459 + C59458) * C93590 + (C59457 + C59456) * C47576 +
            (C59455 + C59454) * C47568 + (C59453 + C59452) * C47574) *
               C93828) *
              C93639 * C93625 * C98 +
          ((C59464 * C47574 + C59465 * C47568 + (C59463 + C59462) * C47576 +
            (C59461 + C59460) * C93590) *
               C93828 +
           ((C61765 + C61764) * C47574 + (C61763 + C61762) * C47568 +
            (C59425 * C804 + C59272 * C952 + C59426 * C3412 + C93718 * C3568) *
                C47576 +
            (C59425 * C812 + C59272 * C960 + C59426 * C3416 + C93718 * C3572) *
                C93590) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C47574 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C47568 +
            (C59452 + C59453) * C47576 + (C59454 + C59455) * C93590) *
               C93828 +
           ((C65499 + C65500) * C47574 + (C65501 + C65502) * C47568 +
            (C61769 + C61768) * C47576 + (C61767 + C61766) * C93590) *
               C93694) *
              C1382 -
          (((C59426 * C5779 + C93718 * C5954 + C59425 * C3414 +
             C59272 * C3570) *
                C93590 +
            (C59426 * C5776 + C93718 * C5951 + C59425 * C3410 +
             C59272 * C3566) *
                C47576 +
            (C59426 * C5778 + C93718 * C5953 + C59425 * C3413 +
             C59272 * C3569) *
                C47568 +
            (C59426 * C5775 + C93718 * C5950 + C59425 * C3409 +
             C59272 * C3565) *
                C47574) *
               C93694 +
           ((C62738 + C62739) * C93590 + (C62740 + C62741) * C47576 +
            (C59426 * C1397 + C93718 * C1545 + C59425 * C1396 +
             C59272 * C1544) *
                C47568 +
            (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
             C59272 * C1536) *
                C47574) *
               C93828) *
              C1383 +
          (((C59425 * C1389 + C59272 * C1537 + C59426 * C10964 +
             C93718 * C11196) *
                C47574 +
            (C59425 * C1397 + C59272 * C1545 + C59426 * C10967 +
             C93718 * C11199) *
                C47568 +
            (C59425 * C1390 + C59272 * C1538 + C59426 * C10965 +
             C93718 * C11197) *
                C47576 +
            (C59425 * C1398 + C59272 * C1546 + C59426 * C10968 +
             C93718 * C11200) *
                C93590) *
               C93828 +
           ((C59425 * C5775 + C59272 * C5950 + C59426 * C25001 +
             C93718 * C25218) *
                C47574 +
            (C59425 * C5778 + C59272 * C5953 + C59426 * C25003 +
             C93718 * C25220) *
                C47568 +
            (C59425 * C5776 + C59272 * C5951 + C59426 * C33015 +
             C93718 * C33242) *
                C47576 +
            (C59425 * C5779 + C59272 * C5954 + C59426 * C33016 +
             C93718 * C33243) *
                C93590) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C4178 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93828 +
            (C48679 + C48680) * C4179 + (C48681 + C48682) * C93694) *
               C59272 +
           ((C54943 + C54944) * C4178 + (C54945 + C54946) * C93828 +
            C58523 * C4179 + C58524 * C93694) *
               C93718) *
              C93639 * C800 -
          (((C52169 + C52170) * C93694 + (C52171 + C52172) * C4179 +
            C58525 * C93828 + C58526 * C4178) *
               C93718 +
           ((C48686 + C48685) * C93694 + (C48684 + C48683) * C4179 +
            (C48682 + C48681) * C93828 + (C48680 + C48679) * C4178) *
               C59272) *
              C93639 * C801 +
          ((C48691 * C4178 + C48692 * C93828 + (C48690 + C48689) * C4179 +
            (C48688 + C48687) * C93694) *
               C59272 +
           ((C52172 + C52171) * C4178 + (C52170 + C52169) * C93828 +
            (C47574 * C19095 + C47568 * C19097 + C47576 * C19096 +
             C93590 * C19098) *
                C4179 +
            (C47574 * C19221 + C47568 * C19439 + C47576 * C19222 +
             C93590 * C19440) *
                C93694) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C4178 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93828 +
            (C48679 + C48680) * C4179 + (C48681 + C48682) * C93694) *
               C59272 +
           ((C54943 + C54944) * C4178 + (C54945 + C54946) * C93828 +
            C58523 * C4179 + C58524 * C93694) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C56074 + C56073) * C93694 + (C56072 + C56071) * C4179 +
            (C57312 + C57311) * C93828 + (C57310 + C57309) * C4178) *
               C93718 +
           ((C50246 + C50245) * C93694 + (C50244 + C50243) * C4179 +
            (C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                C93828 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C4178) *
               C59272) *
              C93639 * C93625 * C98 +
          (((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
                C4178 +
            (C47574 * C191 + C47568 * C364 + C47576 * C192 + C93590 * C365) *
                C93828 +
            (C47574 * C805 + C47568 * C813 + C47576 * C804 + C93590 * C812) *
                C4179 +
            (C47574 * C887 + C47568 * C1019 + C47576 * C886 + C93590 * C1018) *
                C93694) *
               C59272 +
           ((C47574 * C1386 + C47568 * C1394 + C47576 * C1385 +
             C93590 * C1393) *
                C4178 +
            (C47574 * C1468 + C47568 * C1600 + C47576 * C1467 +
             C93590 * C1599) *
                C93828 +
            (C47574 * C3411 + C47568 * C3415 + C47576 * C3412 +
             C93590 * C3416) *
                C4179 +
            (C47574 * C3493 + C47568 * C3641 + C47576 * C3494 +
             C93590 * C3642) *
                C93694) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C4178 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93828 +
            (C48679 + C48680) * C4179 + (C48681 + C48682) * C93694) *
               C59272 +
           ((C54943 + C54944) * C4178 + (C54945 + C54946) * C93828 +
            C58523 * C4179 + C58524 * C93694) *
               C93718) *
              C1382 -
          (((C54947 + C54948) * C93694 + (C54949 + C54950) * C4179 +
            (C54951 + C54952) * C93828 + (C54953 + C54954) * C4178) *
               C93718 +
           (C58525 * C93694 + C58526 * C4179 + (C54946 + C54945) * C93828 +
            (C54944 + C54943) * C4178) *
               C59272) *
              C1383 +
          (((C54954 + C54953) * C4178 + (C54952 + C54951) * C93828 +
            (C54950 + C54949) * C4179 + (C54948 + C54947) * C93694) *
               C59272 +
           ((C47574 * C10964 + C47568 * C10967 + C47576 * C10965 +
             C93590 * C10968) *
                C4178 +
            (C47574 * C11080 + C47568 * C11276 + C47576 * C11081 +
             C93590 * C11277) *
                C93828 +
            (C47574 * C25001 + C47568 * C25003 + C47576 * C33015 +
             C93590 * C33016) *
                C4179 +
            (C47574 * C25104 + C47568 * C25296 + C47576 * C33128 +
             C93590 * C33342) *
                C93694) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
             C4444 + C4444 + C93694 * C1079) *
                C47568 +
            (C4477 + C4478) * C93590) *
               C59272 +
           ((C35809 + C35810) * C47568 + (C7990 + C7989) * C93590) * C93718) *
              C93639 * C800 -
          (((C4441 * C8521 + C8991 + C8991 + C93694 * C8985 + C4440 * C3410 +
             C8990 + C8990 + C93828 * C3710) *
                C93590 +
            (C38550 + C38549) * C47568) *
               C93718 +
           ((C7010 + C7011) * C93590 +
            (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
             C5334 + C5334 + C93828 * C1079) *
                C47568) *
               C59272) *
              C93639 * C801 +
          (((C4440 * C808 + C5335 + C5335 + C93828 * C1080 + C4441 * C4897 +
             C5336 + C5336 + C93694 * C5325) *
                C47568 +
            (C4440 * C809 + C5337 + C5337 + C93828 * C1081 + C4441 * C4898 +
             C5338 + C5338 + C93694 * C5326) *
                C93590) *
               C59272 +
           ((C4440 * C8520 + C34959 + C34959 + C93828 * C8984 + C4441 * C19095 +
             C34960 + C34960 + C93694 * C19563) *
                C47568 +
            (C4440 * C8521 + C65707 + C65707 + C93828 * C8985 + C4441 * C19096 +
             C65708 + C65708 + C93694 * C19564) *
                C93590) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
             C4444 + C4444 + C93694 * C1079) *
                C47568 +
            (C4477 + C4478) * C93590) *
               C59272 +
           ((C35809 + C35810) * C47568 + (C7990 + C7989) * C93590) * C93718) *
              C93639 * C93625 * C97 -
          (((C7987 + C7988) * C93590 + (C7989 + C7990) * C47568) * C93718 +
           ((C4480 + C4479) * C93590 + (C4478 + C4477) * C47568) * C59272) *
              C93639 * C93625 * C98 +
          ((C4483 * C47568 + (C4482 + C4481) * C93590) * C59272 +
           ((C7988 + C7987) * C47568 +
            (C4440 * C1385 + C7977 + C7977 + C93828 * C1657 + C4441 * C3412 +
             C7978 + C7978 + C93694 * C3712) *
                C93590) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
             C4444 + C4444 + C93694 * C1079) *
                C47568 +
            (C4477 + C4478) * C93590) *
               C59272 +
           ((C35809 + C35810) * C47568 + (C7990 + C7989) * C93590) * C93718) *
              C1382 -
          (((C37586 + C37585) * C93590 + (C35812 + C35811) * C47568) * C93718 +
           ((C7989 + C7990) * C93590 + (C35810 + C35809) * C47568) * C59272) *
              C1383 +
          ((C35815 * C47568 + (C37585 + C37586) * C93590) * C59272 +
           ((C35814 + C35813) * C47568 +
            (C4440 * C10965 + C37579 + C37579 + C93828 * C11390 +
             C4441 * C33015 + C37580 + C37580 + C93694 * C33453) *
                C93590) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C4178 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93828 +
            (C65499 + C65500) * C4179 + (C65819 + C65820) * C93694) *
               C47568 +
           ((C59452 + C59453) * C4178 + (C59701 + C59702) * C93828 +
            (C61769 + C61768) * C4179 + (C62075 + C62074) * C93694) *
               C93590) *
              C93639 * C800 -
          (((C65821 + C65822) * C93694 + (C65505 + C65506) * C4179 +
            (C62074 + C62075) * C93828 + (C61768 + C61769) * C4178) *
               C93590 +
           ((C65823 + C65824) * C93694 + (C65509 + C65510) * C4179 +
            (C65820 + C65819) * C93828 + (C65500 + C65499) * C4178) *
               C47568) *
              C93639 * C801 +
          (((C65510 + C65509) * C4178 + (C65824 + C65823) * C93828 +
            (C59425 * C4897 + C59272 * C5096 + C59426 * C19095 +
             C93718 * C19323) *
                C4179 +
            (C59425 * C5016 + C59272 * C5414 + C59426 * C19221 +
             C93718 * C19669) *
                C93694) *
               C47568 +
           ((C65506 + C65505) * C4178 + (C65822 + C65821) * C93828 +
            (C59425 * C4898 + C59272 * C5097 + C59426 * C19096 +
             C93718 * C19324) *
                C4179 +
            (C59425 * C5017 + C59272 * C5415 + C59426 * C19222 +
             C93718 * C19670) *
                C93694) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C4178 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93828 +
            (C59425 * C807 + C59272 * C955 + C59426 * C3409 + C93718 * C3565) *
                C4179 +
            (C59425 * C889 + C59272 * C1145 + C59426 * C3491 + C93718 * C3783) *
                C93694) *
               C47568 +
           ((C59452 + C59453) * C4178 + (C59701 + C59702) * C93828 +
            (C61769 + C61768) * C4179 + (C62075 + C62074) * C93694) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C62072 + C62073) * C93694 + (C61764 + C61765) * C4179 +
            (C59704 + C59703) * C93828 + (C59457 + C59456) * C4178) *
               C93590 +
           ((C62074 + C62075) * C93694 + (C61768 + C61769) * C4179 +
            (C59702 + C59701) * C93828 + (C59453 + C59452) * C4178) *
               C47568) *
              C93639 * C93625 * C98 +
          ((C59464 * C4178 + C59707 * C93828 + (C61765 + C61764) * C4179 +
            (C62073 + C62072) * C93694) *
               C47568 +
           ((C59463 + C59462) * C4178 + (C59706 + C59705) * C93828 +
            (C59425 * C804 + C59272 * C952 + C59426 * C3412 + C93718 * C3568) *
                C4179 +
            (C59425 * C886 + C59272 * C1142 + C59426 * C3494 + C93718 * C3786) *
                C93694) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C4178 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93828 +
            (C65499 + C65500) * C4179 + (C65819 + C65820) * C93694) *
               C47568 +
           ((C59452 + C59453) * C4178 + (C59701 + C59702) * C93828 +
            (C61769 + C61768) * C4179 + (C62075 + C62074) * C93694) *
               C93590) *
              C1382 -
          (((C59426 * C5871 + C93718 * C6197 + C59425 * C3492 +
             C59272 * C3784) *
                C93694 +
            (C59426 * C5776 + C93718 * C5951 + C59425 * C3410 +
             C59272 * C3566) *
                C4179 +
            (C63067 + C63068) * C93828 + (C62740 + C62741) * C4178) *
               C93590 +
           ((C59426 * C5870 + C93718 * C6196 + C59425 * C3491 +
             C59272 * C3783) *
                C93694 +
            (C59426 * C5775 + C93718 * C5950 + C59425 * C3409 +
             C59272 * C3565) *
                C4179 +
            (C59426 * C1471 + C93718 * C1727 + C59425 * C1470 +
             C59272 * C1726) *
                C93828 +
            (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
             C59272 * C1536) *
                C4178) *
               C47568) *
              C1383 +
          (((C59425 * C1389 + C59272 * C1537 + C59426 * C10964 +
             C93718 * C11196) *
                C4178 +
            (C59425 * C1471 + C59272 * C1727 + C59426 * C11080 +
             C93718 * C11495) *
                C93828 +
            (C59425 * C5775 + C59272 * C5950 + C59426 * C25001 +
             C93718 * C25218) *
                C4179 +
            (C59425 * C5870 + C59272 * C6196 + C59426 * C25104 +
             C93718 * C25517) *
                C93694) *
               C47568 +
           ((C59425 * C1390 + C59272 * C1538 + C59426 * C10965 +
             C93718 * C11197) *
                C4178 +
            (C59425 * C1472 + C59272 * C1728 + C59426 * C11081 +
             C93718 * C11496) *
                C93828 +
            (C59425 * C5776 + C59272 * C5951 + C59426 * C33015 +
             C93718 * C33242) *
                C4179 +
            (C59425 * C5871 + C59272 * C6197 + C59426 * C33128 +
             C93718 * C33563) *
                C93694) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C59425 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C59272 +
            (C54943 + C54944) * C59426 + (C55295 + C55296) * C93718) *
               C93828 +
           ((C48679 + C48680) * C59425 + (C48940 + C48941) * C59272 +
            C58523 * C59426 + C58931 * C93718) *
               C93694) *
              C93639 * C800 -
          (((C52485 + C52486) * C93718 + (C52171 + C52172) * C59426 +
            (C48943 + C48942) * C59272 + (C48684 + C48683) * C59425) *
               C93694 +
           (C58932 * C93718 + C58526 * C59426 + (C48941 + C48940) * C59272 +
            (C48680 + C48679) * C59425) *
               C93828) *
              C93639 * C801 +
          ((C48691 * C59425 + C48946 * C59272 + (C52172 + C52171) * C59426 +
            (C52486 + C52485) * C93718) *
               C93828 +
           ((C48690 + C48689) * C59425 + (C48945 + C48944) * C59272 +
            (C47574 * C19095 + C47568 * C19097 + C47576 * C19096 +
             C93590 * C19098) *
                C59426 +
            (C47574 * C19323 + C47568 * C19772 + C47576 * C19324 +
             C93590 * C19773) *
                C93718) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C59425 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C59272 +
            (C54943 + C54944) * C59426 + (C55295 + C55296) * C93718) *
               C93828 +
           ((C48679 + C48680) * C59425 + (C48940 + C48941) * C59272 +
            C58523 * C59426 + C58931 * C93718) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C56482 + C56481) * C93718 + (C56072 + C56071) * C59426 +
            (C50578 + C50577) * C59272 + (C50244 + C50243) * C59425) *
               C93694 +
           ((C57716 + C57715) * C93718 + (C57310 + C57309) * C59426 +
            (C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                C59272 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C59425) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
                C59425 +
            (C47574 * C278 + C47568 * C581 + C47576 * C279 + C93590 * C582) *
                C59272 +
            (C47574 * C1386 + C47568 * C1394 + C47576 * C1385 +
             C93590 * C1393) *
                C59426 +
            (C47574 * C1534 + C47568 * C1782 + C47576 * C1533 +
             C93590 * C1781) *
                C93718) *
               C93828 +
           ((C47574 * C805 + C47568 * C813 + C47576 * C804 + C93590 * C812) *
                C59425 +
            (C47574 * C953 + C47568 * C1201 + C47576 * C952 + C93590 * C1200) *
                C59272 +
            (C47574 * C3411 + C47568 * C3415 + C47576 * C3412 +
             C93590 * C3416) *
                C59426 +
            (C47574 * C3567 + C47568 * C3855 + C47576 * C3568 +
             C93590 * C3856) *
                C93718) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C59425 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C59272 +
            (C54943 + C54944) * C59426 + (C55295 + C55296) * C93718) *
               C93828 +
           ((C48679 + C48680) * C59425 + (C48940 + C48941) * C59272 +
            C58523 * C59426 + C58931 * C93718) *
               C93694) *
              C1382 -
          (((C55297 + C55298) * C93718 + (C54949 + C54950) * C59426 +
            C58932 * C59272 + C58526 * C59425) *
               C93694 +
           ((C55299 + C55300) * C93718 + (C54953 + C54954) * C59426 +
            (C55296 + C55295) * C59272 + (C54944 + C54943) * C59425) *
               C93828) *
              C1383 +
          (((C54954 + C54953) * C59425 + (C55300 + C55299) * C59272 +
            (C47574 * C10964 + C47568 * C10967 + C47576 * C10965 +
             C93590 * C10968) *
                C59426 +
            (C47574 * C11196 + C47568 * C11572 + C47576 * C11197 +
             C93590 * C11573) *
                C93718) *
               C93828 +
           ((C54950 + C54949) * C59425 + (C55298 + C55297) * C59272 +
            (C47574 * C25001 + C47568 * C25003 + C47576 * C33015 +
             C93590 * C33016) *
                C59426 +
            (C47574 * C25218 + C47568 * C25593 + C47576 * C33242 +
             C93590 * C33662) *
                C93718) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C59425 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C59272 +
            (C35511 + C35512) * C59426 + (C36060 + C36061) * C93718) *
               C47568 +
           ((C4205 + C4206) * C59425 + (C4734 + C4735) * C59272 +
            (C7662 + C7661) * C59426 + (C8310 + C8309) * C93718) *
               C93590) *
              C93639 * C800 -
          (((C4179 * C8750 + C93694 * C9306 + C4178 * C3566 + C93828 * C3924) *
                C93718 +
            (C4179 * C8521 + C93694 * C8646 + C4178 * C3410 + C93828 * C3492) *
                C59426 +
            (C7333 + C7334) * C59272 + (C6670 + C6671) * C59425) *
               C93590 +
           ((C38871 + C38870) * C93718 + (C38204 + C38203) * C59426 +
            (C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                C59272 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C59425) *
               C47568) *
              C93639 * C801 +
          (((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
                C59425 +
            (C4178 * C956 + C93828 * C1262 + C4179 * C5096 + C93694 * C5598) *
                C59272 +
            (C4178 * C8520 + C93828 * C8645 + C4179 * C19095 +
             C93694 * C19221) *
                C59426 +
            (C4178 * C8749 + C93828 * C9305 + C4179 * C19323 +
             C93694 * C19884) *
                C93718) *
               C47568 +
           ((C4178 * C809 + C93828 * C891 + C4179 * C4898 + C93694 * C5017) *
                C59425 +
            (C4178 * C957 + C93828 * C1263 + C4179 * C5097 + C93694 * C5599) *
                C59272 +
            (C4178 * C8521 + C93828 * C8646 + C4179 * C19096 +
             C93694 * C19222) *
                C59426 +
            (C4178 * C8750 + C93828 * C9306 + C4179 * C19324 +
             C93694 * C19885) *
                C93718) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C59425 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C59272 +
            (C35511 + C35512) * C59426 + (C36060 + C36061) * C93718) *
               C47568 +
           ((C4205 + C4206) * C59425 + (C4734 + C4735) * C59272 +
            (C7662 + C7661) * C59426 + (C8310 + C8309) * C93718) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C8307 + C8308) * C93718 + (C7657 + C7658) * C59426 +
            (C4737 + C4736) * C59272 + (C4210 + C4209) * C59425) *
               C93590 +
           ((C8309 + C8310) * C93718 + (C7661 + C7662) * C59426 +
            (C4735 + C4734) * C59272 + (C4206 + C4205) * C59425) *
               C47568) *
              C93639 * C93625 * C98 +
          ((C4217 * C59425 + C4740 * C59272 + (C7658 + C7657) * C59426 +
            (C8308 + C8307) * C93718) *
               C47568 +
           ((C4216 + C4215) * C59425 + (C4739 + C4738) * C59272 +
            (C4178 * C1385 + C93828 * C1467 + C4179 * C3412 + C93694 * C3494) *
                C59426 +
            (C4178 * C1533 + C93828 * C1839 + C4179 * C3568 + C93694 * C3926) *
                C93718) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C59425 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C59272 +
            (C35511 + C35512) * C59426 + (C36060 + C36061) * C93718) *
               C47568 +
           ((C4205 + C4206) * C59425 + (C4734 + C4735) * C59272 +
            (C7662 + C7661) * C59426 + (C8310 + C8309) * C93718) *
               C93590) *
              C1382 -
          (((C37889 + C37888) * C93718 + (C37264 + C37263) * C59426 +
            (C8309 + C8310) * C59272 + (C7661 + C7662) * C59425) *
               C93590 +
           ((C36063 + C36062) * C93718 + (C35516 + C35515) * C59426 +
            (C36061 + C36060) * C59272 + (C35512 + C35511) * C59425) *
               C47568) *
              C1383 +
          ((C35523 * C59425 + C36066 * C59272 + (C35522 + C35521) * C59426 +
            (C36065 + C36064) * C93718) *
               C47568 +
           ((C37263 + C37264) * C59425 + (C37888 + C37889) * C59272 +
            (C4178 * C10965 + C93828 * C11081 + C4179 * C33015 +
             C93694 * C33128) *
                C59426 +
            (C4178 * C11197 + C93828 * C11668 + C4179 * C33242 +
             C93694 * C33767) *
                C93718) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
             C59950 + C59950 + C93718 * C1900) *
                C93828 +
            (C66147 + C66148) * C93694) *
               C47568 +
           ((C59983 + C59984) * C93828 + (C62399 + C62398) * C93694) * C93590) *
              C93639 * C800 -
          (((C66149 + C66150) * C93694 + (C62398 + C62399) * C93828) * C93590 +
           ((C66151 + C66152) * C93694 + (C66148 + C66147) * C93828) * C47568) *
              C93639 * C801 +
          (((C66152 + C66151) * C93828 +
            (C59946 * C4897 + C66131 + C66131 + C59272 * C5675 +
             C59947 * C19095 + C66132 + C66132 + C93718 * C19984) *
                C93694) *
               C47568 +
           ((C66150 + C66149) * C93828 +
            (C59946 * C4898 + C66133 + C66133 + C59272 * C5676 +
             C59947 * C19096 + C66134 + C66134 + C93718 * C19985) *
                C93694) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
             C59950 + C59950 + C93718 * C1900) *
                C93828 +
            (C59946 * C807 + C60662 + C60662 + C59272 * C1319 + C59947 * C3409 +
             C60661 + C60661 + C93718 * C3993) *
                C93694) *
               C47568 +
           ((C59983 + C59984) * C93828 + (C62399 + C62398) * C93694) * C93590) *
              C93639 * C93625 * C97 -
          (((C62396 + C62397) * C93694 + (C59986 + C59985) * C93828) * C93590 +
           ((C62398 + C62399) * C93694 + (C59984 + C59983) * C93828) * C47568) *
              C93639 * C93625 * C98 +
          ((C59989 * C93828 + (C62397 + C62396) * C93694) * C47568 +
           ((C59988 + C59987) * C93828 +
            (C59946 * C804 + C62386 + C62386 + C59272 * C1316 + C59947 * C3412 +
             C62387 + C62387 + C93718 * C3996) *
                C93694) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
             C59950 + C59950 + C93718 * C1900) *
                C93828 +
            (C66147 + C66148) * C93694) *
               C47568 +
           ((C59983 + C59984) * C93828 + (C62399 + C62398) * C93694) * C93590) *
              C1382 -
          (((C59947 * C5776 + C64296 + C64296 + C93718 * C6428 +
             C59946 * C3410 + C64295 + C64295 + C59272 * C3994) *
                C93694 +
            (C63400 + C63401) * C93828) *
               C93590 +
           ((C59947 * C5775 + C64294 + C64294 + C93718 * C6427 +
             C59946 * C3409 + C64293 + C64293 + C59272 * C3993) *
                C93694 +
            (C59947 * C1389 + C61444 + C61444 + C93718 * C1901 +
             C59946 * C1388 + C61445 + C61445 + C59272 * C1900) *
                C93828) *
               C47568) *
              C1383 +
          (((C59946 * C1389 + C61446 + C61446 + C59272 * C1901 +
             C59947 * C10964 + C61447 + C61447 + C93718 * C11756) *
                C93828 +
            (C59946 * C5775 + C67035 + C67035 + C59272 * C6427 +
             C59947 * C25001 + C67036 + C67036 + C93718 * C25775) *
                C93694) *
               C47568 +
           ((C59946 * C1390 + C61448 + C61448 + C59272 * C1902 +
             C59947 * C10965 + C61449 + C61449 + C93718 * C11757) *
                C93828 +
            (C59946 * C5776 + C67037 + C67037 + C59272 * C6428 +
             C59947 * C33015 + C67038 + C67038 + C93718 * C33869) *
                C93694) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
              C47579 + C47579 + C93590 * C121) *
                 C59272 +
             (C54583 + C54584) * C93718) *
                C93828 +
            ((C48410 + C48411) * C59272 + C58119 * C93718) * C93694) *
               C2695 -
           (((C54585 + C54586) * C93718 + C58120 * C59272) * C93694 +
            ((C54587 + C54588) * C93718 + (C54584 + C54583) * C59272) *
                C93828) *
               C2696) *
              C93625 * C1981 +
          ((((C56893 + C56894) * C59272 +
             (C47573 * C1390 + C56885 + C56885 + C47568 * C1406 +
              C47575 * C1391 + C56886 + C56886 + C93590 * C1407) *
                 C93718) *
                C93828 +
            ((C55655 + C55656) * C59272 +
             (C47573 * C5776 + C56887 + C56887 + C47568 * C5782 +
              C47575 * C5777 + C56888 + C56888 + C93590 * C5783) *
                 C93718) *
                C93694) *
               C2696 -
           (((C55656 + C55655) * C93718 + (C49904 + C49903) * C59272) * C93694 +
            ((C56894 + C56893) * C93718 +
             (C47575 * C110 + C47588 + C47588 + C93590 * C122 + C47573 * C109 +
              C47589 + C47589 + C47568 * C121) *
                 C59272) *
                C93828) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C47574 +
             (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                 C47568 +
             (C4205 + C4206) * C47576 + (C4207 + C4208) * C93590) *
                C59272 +
            ((C35511 + C35512) * C47574 + (C35513 + C35514) * C47568 +
             C68505 * C47576 + C68506 * C93590) *
                C93718) *
               C2695 -
           (((C37266 + C37265) * C93590 + (C37264 + C37263) * C47576 +
             (C35518 + C35517) * C47568 + (C35516 + C35515) * C47574) *
                C93718 +
            (C68507 * C93590 + C68508 * C47576 + (C35514 + C35513) * C47568 +
             (C35512 + C35511) * C47574) *
                C59272) *
               C2696) *
              C93625 * C1981 +
          (((C68505 * C47574 + C68506 * C47568 + (C7658 + C7657) * C47576 +
             (C7656 + C7655) * C93590) *
                C59272 +
            ((C37263 + C37264) * C47574 + (C37265 + C37266) * C47568 +
             (C4178 * C1391 + C93828 * C1473 + C4179 * C5777 + C93694 * C5872) *
                 C47576 +
             (C4178 * C1399 + C93828 * C1481 + C4179 * C5780 + C93694 * C5875) *
                 C93590) *
                C93718) *
               C2696 -
           (((C7655 + C7656) * C93590 + (C7657 + C7658) * C47576 +
             C68507 * C47568 + C68508 * C47574) *
                C93718 +
            ((C4212 + C4211) * C93590 + (C4210 + C4209) * C47576 +
             (C4208 + C4207) * C47568 + (C4206 + C4205) * C47574) *
                C59272) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C47574 +
             (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                 C47568 +
             (C59452 + C59453) * C47576 + (C59454 + C59455) * C93590) *
                C93828 +
            ((C65499 + C65500) * C47574 + (C65501 + C65502) * C47568 +
             C67441 * C47576 + C67442 * C93590) *
                C93694) *
               C2695 -
           (((C68647 + C68648) * C93590 + (C68649 + C68650) * C47576 +
             (C59426 * C5778 + C93718 * C5953 + C59425 * C3413 +
              C59272 * C3569) *
                 C47568 +
             (C59426 * C5775 + C93718 * C5950 + C59425 * C3409 +
              C59272 * C3565) *
                 C47574) *
                C93694 +
            ((C62738 + C62739) * C93590 + (C62740 + C62741) * C47576 +
             (C59426 * C1397 + C93718 * C1545 + C59425 * C1396 +
              C59272 * C1544) *
                 C47568 +
             (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
              C59272 * C1536) *
                 C47574) *
                C93828) *
               C2696) *
              C93625 * C1981 +
          ((((C62741 + C62740) * C47574 + (C62739 + C62738) * C47568 +
             (C62737 + C62736) * C47576 + (C62735 + C62734) * C93590) *
                C93828 +
            ((C68650 + C68649) * C47574 + (C68648 + C68647) * C47568 +
             (C59425 * C3411 + C59272 * C3567 + C59426 * C5777 +
              C93718 * C5952) *
                 C47576 +
             (C59425 * C3415 + C59272 * C3571 + C59426 * C5780 +
              C93718 * C5955) *
                 C93590) *
                C93694) *
               C2696 -
           (((C61762 + C61763) * C93590 + (C61764 + C61765) * C47576 +
             C67443 * C47568 + C67444 * C47574) *
                C93694 +
            ((C59459 + C59458) * C93590 + (C59457 + C59456) * C47576 +
             (C59455 + C59454) * C47568 + (C59453 + C59452) * C47574) *
                C93828) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C4178 +
             (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                 C93828 +
             (C48679 + C48680) * C4179 + (C48681 + C48682) * C93694) *
                C59272 +
            ((C54943 + C54944) * C4178 + (C54945 + C54946) * C93828 +
             C58523 * C4179 + C58524 * C93694) *
                C93718) *
               C2695 -
           (((C54947 + C54948) * C93694 + (C54949 + C54950) * C4179 +
             (C54951 + C54952) * C93828 + (C54953 + C54954) * C4178) *
                C93718 +
            (C58525 * C93694 + C58526 * C4179 + (C54946 + C54945) * C93828 +
             (C54944 + C54943) * C4178) *
                C59272) *
               C2696) *
              C93625 * C1981 +
          ((((C57309 + C57310) * C4178 + (C57311 + C57312) * C93828 +
             (C56071 + C56072) * C4179 + (C56073 + C56074) * C93694) *
                C59272 +
            ((C47574 * C1390 + C47568 * C1398 + C47576 * C1391 +
              C93590 * C1399) *
                 C4178 +
             (C47574 * C1472 + C47568 * C1604 + C47576 * C1473 +
              C93590 * C1605) *
                 C93828 +
             (C47574 * C5776 + C47568 * C5779 + C47576 * C5777 +
              C93590 * C5780) *
                 C4179 +
             (C47574 * C5871 + C47568 * C6031 + C47576 * C5872 +
              C93590 * C6032) *
                 C93694) *
                C93718) *
               C2696 -
           (((C56074 + C56073) * C93694 + (C56072 + C56071) * C4179 +
             (C57312 + C57311) * C93828 + (C57310 + C57309) * C4178) *
                C93718 +
            ((C50246 + C50245) * C93694 + (C50244 + C50243) * C4179 +
             (C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                 C93828 +
             (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                 C4178) *
                C59272) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
              C4444 + C4444 + C93694 * C1079) *
                 C47568 +
             (C4477 + C4478) * C93590) *
                C59272 +
            ((C35809 + C35810) * C47568 + C68911 * C93590) * C93718) *
               C2695 -
           (((C37586 + C37585) * C93590 + (C35812 + C35811) * C47568) * C93718 +
            (C68912 * C93590 + (C35810 + C35809) * C47568) * C59272) *
               C2696) *
              C93625 * C1981 +
          (((C68911 * C47568 + (C7988 + C7987) * C93590) * C59272 +
            ((C37585 + C37586) * C47568 +
             (C4440 * C1391 + C6121 + C6121 + C93828 * C1663 + C4441 * C5777 +
              C6122 + C6122 + C93694 * C6109) *
                 C93590) *
                C93718) *
               C2696 -
           (((C7987 + C7988) * C93590 + C68912 * C47568) * C93718 +
            ((C4480 + C4479) * C93590 + (C4478 + C4477) * C47568) * C59272) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                 C4178 +
             (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                 C93828 +
             (C65499 + C65500) * C4179 + (C65819 + C65820) * C93694) *
                C47568 +
            ((C59452 + C59453) * C4178 + (C59701 + C59702) * C93828 +
             C67441 * C4179 + C67845 * C93694) *
                C93590) *
               C2695 -
           (((C69047 + C69048) * C93694 + (C68649 + C68650) * C4179 +
             (C63067 + C63068) * C93828 + (C62740 + C62741) * C4178) *
                C93590 +
            ((C59426 * C5870 + C93718 * C6196 + C59425 * C3491 +
              C59272 * C3783) *
                 C93694 +
             (C59426 * C5775 + C93718 * C5950 + C59425 * C3409 +
              C59272 * C3565) *
                 C4179 +
             (C59426 * C1471 + C93718 * C1727 + C59425 * C1470 +
              C59272 * C1726) *
                 C93828 +
             (C59426 * C1389 + C93718 * C1537 + C59425 * C1388 +
              C59272 * C1536) *
                 C4178) *
                C47568) *
               C2696) *
              C93625 * C1981 +
          ((((C62741 + C62740) * C4178 + (C63068 + C63067) * C93828 +
             (C68650 + C68649) * C4179 + (C69048 + C69047) * C93694) *
                C47568 +
            ((C62737 + C62736) * C4178 + (C63066 + C63065) * C93828 +
             (C59425 * C3411 + C59272 * C3567 + C59426 * C5777 +
              C93718 * C5952) *
                 C4179 +
             (C59425 * C3493 + C59272 * C3785 + C59426 * C5872 +
              C93718 * C6198) *
                 C93694) *
                C93590) *
               C2696 -
           (((C62072 + C62073) * C93694 + (C61764 + C61765) * C4179 +
             (C59704 + C59703) * C93828 + (C59457 + C59456) * C4178) *
                C93590 +
            (C67846 * C93694 + C67444 * C4179 + (C59702 + C59701) * C93828 +
             (C59453 + C59452) * C4178) *
                C47568) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C59425 +
             (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                 C59272 +
             (C54943 + C54944) * C59426 + (C55295 + C55296) * C93718) *
                C93828 +
            ((C48679 + C48680) * C59425 + (C48940 + C48941) * C59272 +
             C58523 * C59426 + C58931 * C93718) *
                C93694) *
               C2695 -
           (((C55297 + C55298) * C93718 + (C54949 + C54950) * C59426 +
             C58932 * C59272 + C58526 * C59425) *
                C93694 +
            ((C55299 + C55300) * C93718 + (C54953 + C54954) * C59426 +
             (C55296 + C55295) * C59272 + (C54944 + C54943) * C59425) *
                C93828) *
               C2696) *
              C93625 * C1981 +
          ((((C57309 + C57310) * C59425 + (C57715 + C57716) * C59272 +
             (C47574 * C1390 + C47568 * C1398 + C47576 * C1391 +
              C93590 * C1399) *
                 C59426 +
             (C47574 * C1538 + C47568 * C1786 + C47576 * C1539 +
              C93590 * C1787) *
                 C93718) *
                C93828 +
            ((C56071 + C56072) * C59425 + (C56481 + C56482) * C59272 +
             (C47574 * C5776 + C47568 * C5779 + C47576 * C5777 +
              C93590 * C5780) *
                 C59426 +
             (C47574 * C5951 + C47568 * C6274 + C47576 * C5952 +
              C93590 * C6275) *
                 C93718) *
                C93694) *
               C2696 -
           (((C56482 + C56481) * C93718 + (C56072 + C56071) * C59426 +
             (C50578 + C50577) * C59272 + (C50244 + C50243) * C59425) *
                C93694 +
            ((C57716 + C57715) * C93718 + (C57310 + C57309) * C59426 +
             (C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                 C59272 +
             (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                 C59425) *
                C93828) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C59425 +
             (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                 C59272 +
             (C35511 + C35512) * C59426 + (C36060 + C36061) * C93718) *
                C47568 +
            ((C4205 + C4206) * C59425 + (C4734 + C4735) * C59272 +
             C68505 * C59426 + C69309 * C93718) *
                C93590) *
               C2695 -
           (((C37889 + C37888) * C93718 + (C37264 + C37263) * C59426 +
             C69310 * C59272 + C68508 * C59425) *
                C93590 +
            ((C36063 + C36062) * C93718 + (C35516 + C35515) * C59426 +
             (C36061 + C36060) * C59272 + (C35512 + C35511) * C59425) *
                C47568) *
               C2696) *
              C93625 * C1981 +
          (((C68505 * C59425 + C69309 * C59272 + (C37263 + C37264) * C59426 +
             (C37888 + C37889) * C93718) *
                C47568 +
            ((C7658 + C7657) * C59425 + (C8308 + C8307) * C59272 +
             (C4178 * C1391 + C93828 * C1473 + C4179 * C5777 + C93694 * C5872) *
                 C59426 +
             (C4178 * C1539 + C93828 * C1845 + C4179 * C5952 + C93694 * C6352) *
                 C93718) *
                C93590) *
               C2696 -
           (((C8307 + C8308) * C93718 + (C7657 + C7658) * C59426 +
             (C4737 + C4736) * C59272 + (C4210 + C4209) * C59425) *
                C93590 +
            (C69310 * C93718 + C68508 * C59426 + (C4735 + C4734) * C59272 +
             (C4206 + C4205) * C59425) *
                C47568) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
              C59950 + C59950 + C93718 * C1900) *
                 C93828 +
             (C66147 + C66148) * C93694) *
                C47568 +
            ((C59983 + C59984) * C93828 + C68243 * C93694) * C93590) *
               C2695 -
           (((C69449 + C69450) * C93694 + (C63400 + C63401) * C93828) * C93590 +
            ((C59947 * C5775 + C64294 + C64294 + C93718 * C6427 +
              C59946 * C3409 + C64293 + C64293 + C59272 * C3993) *
                 C93694 +
             (C59947 * C1389 + C61444 + C61444 + C93718 * C1901 +
              C59946 * C1388 + C61445 + C61445 + C59272 * C1900) *
                 C93828) *
                C47568) *
               C2696) *
              C93625 * C1981 +
          ((((C63401 + C63400) * C93828 + (C69450 + C69449) * C93694) * C47568 +
            ((C63399 + C63398) * C93828 +
             (C59946 * C3411 + C64297 + C64297 + C59272 * C3995 +
              C59947 * C5777 + C64298 + C64298 + C93718 * C6429) *
                 C93694) *
                C93590) *
               C2696 -
           (((C62396 + C62397) * C93694 + (C59986 + C59985) * C93828) * C93590 +
            (C68244 * C93694 + (C59984 + C59983) * C93828) * C47568) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexx[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
             C47579 + C47579 + C93590 * C121) *
                C59272 +
            (C54583 + C54584) * C93718) *
               C93828 +
           ((C48410 + C48411) * C59272 + C58119 * C93718) * C93694) *
              C93639 * C93625 * C97 -
          (((C55656 + C55655) * C93718 + (C49904 + C49903) * C59272) * C93694 +
           ((C56894 + C56893) * C93718 +
            (C47575 * C110 + C47588 + C47588 + C93590 * C122 + C47573 * C109 +
             C47589 + C47589 + C47568 * C121) *
                C59272) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C47573 * C110 + C47590 + C47590 + C47568 * C122 + C47575 * C111 +
             C47591 + C47591 + C93590 * C123) *
                C59272 +
            (C47573 * C1386 + C52783 + C52783 + C47568 * C1402 +
             C47575 * C1385 + C52784 + C52784 + C93590 * C1401) *
                C93718) *
               C93828 +
           ((C47573 * C805 + C47592 + C47592 + C47568 * C821 + C47575 * C804 +
             C47593 + C47593 + C93590 * C820) *
                C59272 +
            (C47573 * C3411 + C52785 + C52785 + C47568 * C3419 +
             C47575 * C3412 + C52786 + C52786 + C93590 * C3420) *
                C93718) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 + C47575 * C109 +
             C47579 + C47579 + C93590 * C121) *
                C59272 +
            (C54583 + C54584) * C93718) *
               C93828 +
           ((C48410 + C48411) * C59272 + C58119 * C93718) * C93694) *
              C93639 * C800 -
          (((C51847 + C51848) * C93718 + (C48413 + C48412) * C59272) * C93694 +
           (C58120 * C93718 + (C48411 + C48410) * C59272) * C93828) *
              C93639 * C801 +
          ((C48416 * C59272 + (C51848 + C51847) * C93718) * C93828 +
           ((C48415 + C48414) * C59272 +
            (C47573 * C19095 + C51837 + C51837 + C47568 * C19099 +
             C47575 * C19096 + C51838 + C51838 + C93590 * C19100) *
                C93718) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C47574 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C47568 +
            (C4205 + C4206) * C47576 + (C4207 + C4208) * C93590) *
               C59272 +
           ((C35511 + C35512) * C47574 + (C35513 + C35514) * C47568 +
            (C7662 + C7661) * C47576 + (C7660 + C7659) * C93590) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C7655 + C7656) * C93590 + (C7657 + C7658) * C47576 +
            (C7659 + C7660) * C47568 + (C7661 + C7662) * C47574) *
               C93718 +
           ((C4212 + C4211) * C93590 + (C4210 + C4209) * C47576 +
            (C4208 + C4207) * C47568 + (C4206 + C4205) * C47574) *
               C59272) *
              C93639 * C93625 * C98 +
          ((C4217 * C47574 + C4218 * C47568 + (C4216 + C4215) * C47576 +
            (C4214 + C4213) * C93590) *
               C59272 +
           ((C7658 + C7657) * C47574 + (C7656 + C7655) * C47568 +
            (C4178 * C1385 + C93828 * C1467 + C4179 * C3412 + C93694 * C3494) *
                C47576 +
            (C4178 * C1393 + C93828 * C1475 + C4179 * C3416 + C93694 * C3498) *
                C93590) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C47574 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C47568 +
            (C4205 + C4206) * C47576 + (C4207 + C4208) * C93590) *
               C59272 +
           ((C35511 + C35512) * C47574 + (C35513 + C35514) * C47568 +
            (C7662 + C7661) * C47576 + (C7660 + C7659) * C93590) *
               C93718) *
              C93639 * C800 -
          (((C4179 * C8524 + C93694 * C8649 + C4178 * C3414 + C93828 * C3496) *
                C93590 +
            (C4179 * C8521 + C93694 * C8646 + C4178 * C3410 + C93828 * C3492) *
                C47576 +
            (C38206 + C38205) * C47568 + (C38204 + C38203) * C47574) *
               C93718 +
           ((C6668 + C6669) * C93590 + (C6670 + C6671) * C47576 +
            (C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                C47568 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C47574) *
               C59272) *
              C93639 * C801 +
          (((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
                C47574 +
            (C4178 * C816 + C93828 * C898 + C4179 * C4900 + C93694 * C5019) *
                C47568 +
            (C4178 * C809 + C93828 * C891 + C4179 * C4898 + C93694 * C5017) *
                C47576 +
            (C4178 * C817 + C93828 * C899 + C4179 * C4901 + C93694 * C5020) *
                C93590) *
               C59272 +
           ((C4178 * C8520 + C93828 * C8645 + C4179 * C19095 +
             C93694 * C19221) *
                C47574 +
            (C4178 * C8523 + C93828 * C8648 + C4179 * C19097 +
             C93694 * C19223) *
                C47568 +
            (C4178 * C8521 + C93828 * C8646 + C4179 * C19096 +
             C93694 * C19222) *
                C47576 +
            (C4178 * C8524 + C93828 * C8649 + C4179 * C19098 +
             C93694 * C19224) *
                C93590) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C47574 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C47568 +
            (C59452 + C59453) * C47576 + (C59454 + C59455) * C93590) *
               C93828 +
           ((C59425 * C807 + C59272 * C955 + C59426 * C3409 + C93718 * C3565) *
                C47574 +
            (C59425 * C815 + C59272 * C963 + C59426 * C3413 + C93718 * C3569) *
                C47568 +
            (C61769 + C61768) * C47576 + (C61767 + C61766) * C93590) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C61762 + C61763) * C93590 + (C61764 + C61765) * C47576 +
            (C61766 + C61767) * C47568 + (C61768 + C61769) * C47574) *
               C93694 +
           ((C59459 + C59458) * C93590 + (C59457 + C59456) * C47576 +
            (C59455 + C59454) * C47568 + (C59453 + C59452) * C47574) *
               C93828) *
              C93639 * C93625 * C98 +
          ((C59464 * C47574 + C59465 * C47568 + (C59463 + C59462) * C47576 +
            (C59461 + C59460) * C93590) *
               C93828 +
           ((C61765 + C61764) * C47574 + (C61763 + C61762) * C47568 +
            (C59425 * C804 + C59272 * C952 + C59426 * C3412 + C93718 * C3568) *
                C47576 +
            (C59425 * C812 + C59272 * C960 + C59426 * C3416 + C93718 * C3572) *
                C93590) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C47574 +
            (C59425 * C114 + C59272 * C282 + C59426 * C1396 + C93718 * C1544) *
                C47568 +
            (C59452 + C59453) * C47576 + (C59454 + C59455) * C93590) *
               C93828 +
           ((C65499 + C65500) * C47574 + (C65501 + C65502) * C47568 +
            (C61769 + C61768) * C47576 + (C61767 + C61766) * C93590) *
               C93694) *
              C93639 * C800 -
          (((C65503 + C65504) * C93590 + (C65505 + C65506) * C47576 +
            (C65507 + C65508) * C47568 + (C65509 + C65510) * C47574) *
               C93694 +
           ((C61766 + C61767) * C93590 + (C61768 + C61769) * C47576 +
            (C65502 + C65501) * C47568 + (C65500 + C65499) * C47574) *
               C93828) *
              C93639 * C801 +
          (((C65510 + C65509) * C47574 + (C65508 + C65507) * C47568 +
            (C65506 + C65505) * C47576 + (C65504 + C65503) * C93590) *
               C93828 +
           ((C59425 * C4897 + C59272 * C5096 + C59426 * C19095 +
             C93718 * C19323) *
                C47574 +
            (C59425 * C4900 + C59272 * C5099 + C59426 * C19097 +
             C93718 * C19325) *
                C47568 +
            (C59425 * C4898 + C59272 * C5097 + C59426 * C19096 +
             C93718 * C19324) *
                C47576 +
            (C59425 * C4901 + C59272 * C5100 + C59426 * C19098 +
             C93718 * C19326) *
                C93590) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C4178 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93828 +
            (C48679 + C48680) * C4179 + (C48681 + C48682) * C93694) *
               C59272 +
           ((C54943 + C54944) * C4178 + (C54945 + C54946) * C93828 +
            C58523 * C4179 + C58524 * C93694) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C56074 + C56073) * C93694 + (C56072 + C56071) * C4179 +
            (C57312 + C57311) * C93828 + (C57310 + C57309) * C4178) *
               C93718 +
           ((C50246 + C50245) * C93694 + (C50244 + C50243) * C4179 +
            (C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                C93828 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C4178) *
               C59272) *
              C93639 * C93625 * C98 +
          (((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
                C4178 +
            (C47574 * C191 + C47568 * C364 + C47576 * C192 + C93590 * C365) *
                C93828 +
            (C47574 * C805 + C47568 * C813 + C47576 * C804 + C93590 * C812) *
                C4179 +
            (C47574 * C887 + C47568 * C1019 + C47576 * C886 + C93590 * C1018) *
                C93694) *
               C59272 +
           ((C47574 * C1386 + C47568 * C1394 + C47576 * C1385 +
             C93590 * C1393) *
                C4178 +
            (C47574 * C1468 + C47568 * C1600 + C47576 * C1467 +
             C93590 * C1599) *
                C93828 +
            (C47574 * C3411 + C47568 * C3415 + C47576 * C3412 +
             C93590 * C3416) *
                C4179 +
            (C47574 * C3493 + C47568 * C3641 + C47576 * C3494 +
             C93590 * C3642) *
                C93694) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C4178 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93828 +
            (C48679 + C48680) * C4179 + (C48681 + C48682) * C93694) *
               C59272 +
           ((C54943 + C54944) * C4178 + (C54945 + C54946) * C93828 +
            C58523 * C4179 + C58524 * C93694) *
               C93718) *
              C93639 * C800 -
          (((C52169 + C52170) * C93694 + (C52171 + C52172) * C4179 +
            C58525 * C93828 + C58526 * C4178) *
               C93718 +
           ((C48686 + C48685) * C93694 + (C48684 + C48683) * C4179 +
            (C48682 + C48681) * C93828 + (C48680 + C48679) * C4178) *
               C59272) *
              C93639 * C801 +
          ((C48691 * C4178 + C48692 * C93828 + (C48690 + C48689) * C4179 +
            (C48688 + C48687) * C93694) *
               C59272 +
           ((C52172 + C52171) * C4178 + (C52170 + C52169) * C93828 +
            (C47574 * C19095 + C47568 * C19097 + C47576 * C19096 +
             C93590 * C19098) *
                C4179 +
            (C47574 * C19221 + C47568 * C19439 + C47576 * C19222 +
             C93590 * C19440) *
                C93694) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
             C4444 + C4444 + C93694 * C1079) *
                C47568 +
            (C4477 + C4478) * C93590) *
               C59272 +
           ((C35809 + C35810) * C47568 + (C7990 + C7989) * C93590) * C93718) *
              C93639 * C93625 * C97 -
          (((C7987 + C7988) * C93590 + (C7989 + C7990) * C47568) * C93718 +
           ((C4480 + C4479) * C93590 + (C4478 + C4477) * C47568) * C59272) *
              C93639 * C93625 * C98 +
          ((C4483 * C47568 + (C4482 + C4481) * C93590) * C59272 +
           ((C7988 + C7987) * C47568 +
            (C4440 * C1385 + C7977 + C7977 + C93828 * C1657 + C4441 * C3412 +
             C7978 + C7978 + C93694 * C3712) *
                C93590) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
             C4444 + C4444 + C93694 * C1079) *
                C47568 +
            (C4477 + C4478) * C93590) *
               C59272 +
           ((C35809 + C35810) * C47568 + (C7990 + C7989) * C93590) * C93718) *
              C93639 * C800 -
          (((C4441 * C8521 + C8991 + C8991 + C93694 * C8985 + C4440 * C3410 +
             C8990 + C8990 + C93828 * C3710) *
                C93590 +
            (C38550 + C38549) * C47568) *
               C93718 +
           ((C7010 + C7011) * C93590 +
            (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
             C5334 + C5334 + C93828 * C1079) *
                C47568) *
               C59272) *
              C93639 * C801 +
          (((C4440 * C808 + C5335 + C5335 + C93828 * C1080 + C4441 * C4897 +
             C5336 + C5336 + C93694 * C5325) *
                C47568 +
            (C4440 * C809 + C5337 + C5337 + C93828 * C1081 + C4441 * C4898 +
             C5338 + C5338 + C93694 * C5326) *
                C93590) *
               C59272 +
           ((C4440 * C8520 + C34959 + C34959 + C93828 * C8984 + C4441 * C19095 +
             C34960 + C34960 + C93694 * C19563) *
                C47568 +
            (C4440 * C8521 + C65707 + C65707 + C93828 * C8985 + C4441 * C19096 +
             C65708 + C65708 + C93694 * C19564) *
                C93590) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C4178 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93828 +
            (C59425 * C807 + C59272 * C955 + C59426 * C3409 + C93718 * C3565) *
                C4179 +
            (C59425 * C889 + C59272 * C1145 + C59426 * C3491 + C93718 * C3783) *
                C93694) *
               C47568 +
           ((C59452 + C59453) * C4178 + (C59701 + C59702) * C93828 +
            (C61769 + C61768) * C4179 + (C62075 + C62074) * C93694) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C62072 + C62073) * C93694 + (C61764 + C61765) * C4179 +
            (C59704 + C59703) * C93828 + (C59457 + C59456) * C4178) *
               C93590 +
           ((C62074 + C62075) * C93694 + (C61768 + C61769) * C4179 +
            (C59702 + C59701) * C93828 + (C59453 + C59452) * C4178) *
               C47568) *
              C93639 * C93625 * C98 +
          ((C59464 * C4178 + C59707 * C93828 + (C61765 + C61764) * C4179 +
            (C62073 + C62072) * C93694) *
               C47568 +
           ((C59463 + C59462) * C4178 + (C59706 + C59705) * C93828 +
            (C59425 * C804 + C59272 * C952 + C59426 * C3412 + C93718 * C3568) *
                C4179 +
            (C59425 * C886 + C59272 * C1142 + C59426 * C3494 + C93718 * C3786) *
                C93694) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59425 * C108 + C59272 * C276 + C59426 * C1388 + C93718 * C1536) *
                C4178 +
            (C59425 * C189 + C59272 * C501 + C59426 * C1470 + C93718 * C1726) *
                C93828 +
            (C65499 + C65500) * C4179 + (C65819 + C65820) * C93694) *
               C47568 +
           ((C59452 + C59453) * C4178 + (C59701 + C59702) * C93828 +
            (C61769 + C61768) * C4179 + (C62075 + C62074) * C93694) *
               C93590) *
              C93639 * C800 -
          (((C65821 + C65822) * C93694 + (C65505 + C65506) * C4179 +
            (C62074 + C62075) * C93828 + (C61768 + C61769) * C4178) *
               C93590 +
           ((C65823 + C65824) * C93694 + (C65509 + C65510) * C4179 +
            (C65820 + C65819) * C93828 + (C65500 + C65499) * C4178) *
               C47568) *
              C93639 * C801 +
          (((C65510 + C65509) * C4178 + (C65824 + C65823) * C93828 +
            (C59425 * C4897 + C59272 * C5096 + C59426 * C19095 +
             C93718 * C19323) *
                C4179 +
            (C59425 * C5016 + C59272 * C5414 + C59426 * C19221 +
             C93718 * C19669) *
                C93694) *
               C47568 +
           ((C65506 + C65505) * C4178 + (C65822 + C65821) * C93828 +
            (C59425 * C4898 + C59272 * C5097 + C59426 * C19096 +
             C93718 * C19324) *
                C4179 +
            (C59425 * C5017 + C59272 * C5415 + C59426 * C19222 +
             C93718 * C19670) *
                C93694) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C59425 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C59272 +
            (C54943 + C54944) * C59426 + (C55295 + C55296) * C93718) *
               C93828 +
           ((C48679 + C48680) * C59425 + (C48940 + C48941) * C59272 +
            C58523 * C59426 + C58931 * C93718) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C56482 + C56481) * C93718 + (C56072 + C56071) * C59426 +
            (C50578 + C50577) * C59272 + (C50244 + C50243) * C59425) *
               C93694 +
           ((C57716 + C57715) * C93718 + (C57310 + C57309) * C59426 +
            (C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                C59272 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C59425) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
                C59425 +
            (C47574 * C278 + C47568 * C581 + C47576 * C279 + C93590 * C582) *
                C59272 +
            (C47574 * C1386 + C47568 * C1394 + C47576 * C1385 +
             C93590 * C1393) *
                C59426 +
            (C47574 * C1534 + C47568 * C1782 + C47576 * C1533 +
             C93590 * C1781) *
                C93718) *
               C93828 +
           ((C47574 * C805 + C47568 * C813 + C47576 * C804 + C93590 * C812) *
                C59425 +
            (C47574 * C953 + C47568 * C1201 + C47576 * C952 + C93590 * C1200) *
                C59272 +
            (C47574 * C3411 + C47568 * C3415 + C47576 * C3412 +
             C93590 * C3416) *
                C59426 +
            (C47574 * C3567 + C47568 * C3855 + C47576 * C3568 +
             C93590 * C3856) *
                C93718) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C59425 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C59272 +
            (C54943 + C54944) * C59426 + (C55295 + C55296) * C93718) *
               C93828 +
           ((C48679 + C48680) * C59425 + (C48940 + C48941) * C59272 +
            C58523 * C59426 + C58931 * C93718) *
               C93694) *
              C93639 * C800 -
          (((C52485 + C52486) * C93718 + (C52171 + C52172) * C59426 +
            (C48943 + C48942) * C59272 + (C48684 + C48683) * C59425) *
               C93694 +
           (C58932 * C93718 + C58526 * C59426 + (C48941 + C48940) * C59272 +
            (C48680 + C48679) * C59425) *
               C93828) *
              C93639 * C801 +
          ((C48691 * C59425 + C48946 * C59272 + (C52172 + C52171) * C59426 +
            (C52486 + C52485) * C93718) *
               C93828 +
           ((C48690 + C48689) * C59425 + (C48945 + C48944) * C59272 +
            (C47574 * C19095 + C47568 * C19097 + C47576 * C19096 +
             C93590 * C19098) *
                C59426 +
            (C47574 * C19323 + C47568 * C19772 + C47576 * C19324 +
             C93590 * C19773) *
                C93718) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C59425 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C59272 +
            (C35511 + C35512) * C59426 + (C36060 + C36061) * C93718) *
               C47568 +
           ((C4205 + C4206) * C59425 + (C4734 + C4735) * C59272 +
            (C7662 + C7661) * C59426 + (C8310 + C8309) * C93718) *
               C93590) *
              C93639 * C93625 * C97 -
          (((C8307 + C8308) * C93718 + (C7657 + C7658) * C59426 +
            (C4737 + C4736) * C59272 + (C4210 + C4209) * C59425) *
               C93590 +
           ((C8309 + C8310) * C93718 + (C7661 + C7662) * C59426 +
            (C4735 + C4734) * C59272 + (C4206 + C4205) * C59425) *
               C47568) *
              C93639 * C93625 * C98 +
          ((C4217 * C59425 + C4740 * C59272 + (C7658 + C7657) * C59426 +
            (C8308 + C8307) * C93718) *
               C47568 +
           ((C4216 + C4215) * C59425 + (C4739 + C4738) * C59272 +
            (C4178 * C1385 + C93828 * C1467 + C4179 * C3412 + C93694 * C3494) *
                C59426 +
            (C4178 * C1533 + C93828 * C1839 + C4179 * C3568 + C93694 * C3926) *
                C93718) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C59425 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C59272 +
            (C35511 + C35512) * C59426 + (C36060 + C36061) * C93718) *
               C47568 +
           ((C4205 + C4206) * C59425 + (C4734 + C4735) * C59272 +
            (C7662 + C7661) * C59426 + (C8310 + C8309) * C93718) *
               C93590) *
              C93639 * C800 -
          (((C4179 * C8750 + C93694 * C9306 + C4178 * C3566 + C93828 * C3924) *
                C93718 +
            (C4179 * C8521 + C93694 * C8646 + C4178 * C3410 + C93828 * C3492) *
                C59426 +
            (C7333 + C7334) * C59272 + (C6670 + C6671) * C59425) *
               C93590 +
           ((C38871 + C38870) * C93718 + (C38204 + C38203) * C59426 +
            (C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                C59272 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C59425) *
               C47568) *
              C93639 * C801 +
          (((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
                C59425 +
            (C4178 * C956 + C93828 * C1262 + C4179 * C5096 + C93694 * C5598) *
                C59272 +
            (C4178 * C8520 + C93828 * C8645 + C4179 * C19095 +
             C93694 * C19221) *
                C59426 +
            (C4178 * C8749 + C93828 * C9305 + C4179 * C19323 +
             C93694 * C19884) *
                C93718) *
               C47568 +
           ((C4178 * C809 + C93828 * C891 + C4179 * C4898 + C93694 * C5017) *
                C59425 +
            (C4178 * C957 + C93828 * C1263 + C4179 * C5097 + C93694 * C5599) *
                C59272 +
            (C4178 * C8521 + C93828 * C8646 + C4179 * C19096 +
             C93694 * C19222) *
                C59426 +
            (C4178 * C8750 + C93828 * C9306 + C4179 * C19324 +
             C93694 * C19885) *
                C93718) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
             C59950 + C59950 + C93718 * C1900) *
                C93828 +
            (C59946 * C807 + C60662 + C60662 + C59272 * C1319 + C59947 * C3409 +
             C60661 + C60661 + C93718 * C3993) *
                C93694) *
               C47568 +
           ((C59983 + C59984) * C93828 + (C62399 + C62398) * C93694) * C93590) *
              C93639 * C93625 * C97 -
          (((C62396 + C62397) * C93694 + (C59986 + C59985) * C93828) * C93590 +
           ((C62398 + C62399) * C93694 + (C59984 + C59983) * C93828) * C47568) *
              C93639 * C93625 * C98 +
          ((C59989 * C93828 + (C62397 + C62396) * C93694) * C47568 +
           ((C59988 + C59987) * C93828 +
            (C59946 * C804 + C62386 + C62386 + C59272 * C1316 + C59947 * C3412 +
             C62387 + C62387 + C93718 * C3996) *
                C93694) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C59946 * C108 + C59949 + C59949 + C59272 * C714 + C59947 * C1388 +
             C59950 + C59950 + C93718 * C1900) *
                C93828 +
            (C66147 + C66148) * C93694) *
               C47568 +
           ((C59983 + C59984) * C93828 + (C62399 + C62398) * C93694) * C93590) *
              C93639 * C800 -
          (((C66149 + C66150) * C93694 + (C62398 + C62399) * C93828) * C93590 +
           ((C66151 + C66152) * C93694 + (C66148 + C66147) * C93828) * C47568) *
              C93639 * C801 +
          (((C66152 + C66151) * C93828 +
            (C59946 * C4897 + C66131 + C66131 + C59272 * C5675 +
             C59947 * C19095 + C66132 + C66132 + C93718 * C19984) *
                C93694) *
               C47568 +
           ((C66150 + C66149) * C93828 +
            (C59946 * C4898 + C66133 + C66133 + C59272 * C5676 +
             C59947 * C19096 + C66134 + C66134 + C93718 * C19985) *
                C93694) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                       C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                          C93856 +
                      (C54583 + C54584) * C93853 + C72190 * C70728) *
                         C93680 * C93639 * C1979 -
                     ((C54585 + C54586) * C70728 + C58120 * C93853 +
                      (C48411 + C48410) * C93856) *
                         C93680 * C93639 * C1980) *
                        C1981 +
                    (((C49903 + C49904) * C93856 + (C55655 + C55656) * C93853 +
                      (C47573 * C5776 + C56887 + C56887 + C47568 * C5782 +
                       C47575 * C5777 + C56888 + C56888 + C93590 * C5783) *
                          C70728) *
                         C93680 * C93639 * C1980 -
                     ((C47575 * C1391 + C56886 + C56886 + C93590 * C1407 +
                       C47573 * C1390 + C56885 + C56885 + C47568 * C1406) *
                          C70728 +
                      (C56894 + C56893) * C93853 +
                      (C47575 * C110 + C47588 + C47588 + C93590 * C122 +
                       C47573 * C109 + C47589 + C47589 + C47568 * C121) *
                          C93856) *
                         C93680 * C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C47574 +
             (C188 * C114 + C93680 * C195) * C47568 + C218 * C47576 +
             C219 * C93590) *
                C93856 +
            (C72277 + C72278 + C72279 + C72280) * C93853 + C72291 * C70728) *
               C93639 * C1979 -
           ((C31168 * C93590 + C31169 * C47576 + C33142 * C47568 +
             C33141 * C47574) *
                C70728 +
            (C11978 * C93590 + C11979 * C47576 + C13955 * C47568 +
             C13954 * C47574) *
                C93853 +
            (C2075 * C93590 + C2076 * C47576 +
             (C188 * C815 + C93680 * C897) * C47568 +
             (C188 * C807 + C93680 * C889) * C47574) *
                C93856) *
               C93639 * C1980) *
              C1981 +
          (((C2076 * C47574 + C2075 * C47568 + C2074 * C47576 +
             C2073 * C93590) *
                C93856 +
            (C11979 * C47574 + C11978 * C47568 + C11977 * C47576 +
             C11976 * C93590) *
                C93853 +
            (C31169 * C47574 + C31168 * C47568 +
             (C188 * C5777 + C93680 * C5872) * C47576 +
             (C188 * C5780 + C93680 * C5875) * C93590) *
                C70728) *
               C93639 * C1980 -
           ((C11109 * C93590 + C11110 * C47576 + C11111 * C47568 +
             C11112 * C47574) *
                C70728 +
            (C2787 * C93590 + C2788 * C47576 + C2789 * C47568 +
             C2790 * C47574) *
                C93853 +
            (C221 * C93590 + C220 * C47576 + C219 * C47568 + C218 * C47574) *
                C93856) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C47574 +
                      (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                       C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                          C47568 +
                      (C70907 + C70908 + C70909) * C47576 +
                      (C70910 + C70911 + C70912) * C93590) *
                         C93680 * C93639 * C1979 -
                     ((C73159 + C73160 + C73161) * C93590 +
                      (C73162 + C73163 + C73164) * C47576 +
                      (C70881 * C5778 + C70728 * C5953 + C70880 * C3413 +
                       C93853 * C3569 + C70879 * C815 + C93856 * C963) *
                          C47568 +
                      (C70881 * C5775 + C70728 * C5950 + C70880 * C3409 +
                       C93853 * C3565 + C70879 * C807 + C93856 * C955) *
                          C47574) *
                         C93680 * C93639 * C1980) *
                        C1981 +
                    (((C73164 + C73163 + C73162) * C47574 +
                      (C73161 + C73160 + C73159) * C47568 +
                      (C70879 * C805 + C93856 * C953 + C70880 * C3411 +
                       C93853 * C3567 + C70881 * C5777 + C70728 * C5952) *
                          C47576 +
                      (C70879 * C813 + C93856 * C961 + C70880 * C3415 +
                       C93853 * C3571 + C70881 * C5780 + C70728 * C5955) *
                          C93590) *
                         C93680 * C93639 * C1980 -
                     ((C70913 + C70914 + C70915) * C93590 +
                      (C70916 + C70917 + C70918) * C47576 +
                      (C70912 + C70911 + C70910) * C47568 +
                      (C70909 + C70908 + C70907) * C47574) *
                         C93680 * C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C188 +
             (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                 C93680) *
                C93856 +
            ((C54943 + C54944) * C188 + (C54945 + C54946) * C93680) * C93853 +
            C72456 * C70728) *
               C93639 * C1979 -
           (((C54947 + C54948) * C93680 + (C54949 + C54950) * C188) * C70728 +
            (C58525 * C93680 + C58526 * C188) * C93853 +
            ((C48682 + C48681) * C93680 + (C48680 + C48679) * C188) * C93856) *
               C93639 * C1980) *
              C1981 +
          ((((C50243 + C50244) * C188 + (C50245 + C50246) * C93680) * C93856 +
            ((C56071 + C56072) * C188 + (C56073 + C56074) * C93680) * C93853 +
            ((C47574 * C5776 + C47568 * C5779 + C47576 * C5777 +
              C93590 * C5780) *
                 C188 +
             (C47574 * C5871 + C47568 * C6031 + C47576 * C5872 +
              C93590 * C6032) *
                 C93680) *
                C70728) *
               C93639 * C1980 -
           (((C47576 * C1473 + C93590 * C1605 + C47574 * C1472 +
              C47568 * C1604) *
                 C93680 +
             (C47576 * C1391 + C93590 * C1399 + C47574 * C1390 +
              C47568 * C1398) *
                 C188) *
                C70728 +
            ((C57312 + C57311) * C93680 + (C57310 + C57309) * C188) * C93853 +
            ((C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                 C93680 +
             (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                 C188) *
                C93856) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C47568 +
             C448 * C93590) *
                C93856 +
            (C72531 + C72532) * C93853 + C72537 * C70728) *
               C93639 * C1979 -
           ((C31486 * C93590 + C33464 * C47568) * C70728 +
            (C12307 * C93590 + C14261 * C47568) * C93853 +
            (C2312 * C93590 +
             (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C47568) *
                C93856) *
               C93639 * C1980) *
              C1981 +
          (((C2312 * C47568 + C2311 * C93590) * C93856 +
            (C12307 * C47568 + C12306 * C93590) * C93853 +
            (C31486 * C47568 +
             (C418 * C5777 + C14258 + C14258 + C93680 * C6109) * C93590) *
                C70728) *
               C93639 * C1980 -
           ((C11415 * C93590 + C11416 * C47568) * C70728 +
            (C3025 * C93590 + C3026 * C47568) * C93853 +
            (C449 * C93590 + C448 * C47568) * C93856) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                        C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                           C188 +
                       (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                        C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                           C93680) *
                          C47568 +
                      ((C70907 + C70908 + C70909) * C188 +
                       (C71153 + C71154 + C71155) * C93680) *
                          C93590) *
                         C93639 * C1979 -
                     (((C73465 + C73466 + C73467) * C93680 +
                       (C73162 + C73163 + C73164) * C188) *
                          C93590 +
                      ((C70881 * C5870 + C70728 * C6196 + C70880 * C3491 +
                        C93853 * C3783 + C70879 * C889 + C93856 * C1145) *
                           C93680 +
                       (C70881 * C5775 + C70728 * C5950 + C70880 * C3409 +
                        C93853 * C3565 + C70879 * C807 + C93856 * C955) *
                           C188) *
                          C47568) *
                         C93639 * C1980) *
                        C1981 +
                    ((((C73164 + C73163 + C73162) * C188 +
                       (C73467 + C73466 + C73465) * C93680) *
                          C47568 +
                      ((C70879 * C805 + C93856 * C953 + C70880 * C3411 +
                        C93853 * C3567 + C70881 * C5777 + C70728 * C5952) *
                           C188 +
                       (C70879 * C887 + C93856 * C1143 + C70880 * C3493 +
                        C93853 * C3785 + C70881 * C5872 + C70728 * C6198) *
                           C93680) *
                          C93590) *
                         C93639 * C1980 -
                     (((C71156 + C71157 + C71158) * C93680 +
                       (C70916 + C70917 + C70918) * C188) *
                          C93590 +
                      ((C71155 + C71154 + C71153) * C93680 +
                       (C70909 + C70908 + C70907) * C188) *
                          C47568) *
                         C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C70879 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93856 +
            (C54943 + C54944) * C70880 + (C55295 + C55296) * C93853 +
            C72440 * C70881 + C72686 * C70728) *
               C93680 * C93639 * C1979 -
           ((C55297 + C55298) * C70728 + (C54949 + C54950) * C70881 +
            C58932 * C93853 + C58526 * C70880 + (C48941 + C48940) * C93856 +
            (C48680 + C48679) * C70879) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C50243 + C50244) * C70879 + (C50577 + C50578) * C93856 +
            (C56071 + C56072) * C70880 + (C56481 + C56482) * C93853 +
            (C47574 * C5776 + C47568 * C5779 + C47576 * C5777 +
             C93590 * C5780) *
                C70881 +
            (C47574 * C5951 + C47568 * C6274 + C47576 * C5952 +
             C93590 * C6275) *
                C70728) *
               C93680 * C93639 * C1980 -
           ((C47576 * C1539 + C93590 * C1787 + C47574 * C1538 +
             C47568 * C1786) *
                C70728 +
            (C47576 * C1391 + C93590 * C1399 + C47574 * C1390 +
             C47568 * C1398) *
                C70881 +
            (C57716 + C57715) * C93853 + (C57310 + C57309) * C70880 +
            (C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                C93856 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C70879) *
               C93680 * C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C70879 +
             (C188 * C276 + C93680 * C635) * C93856 + C11107 * C70880 +
             C11679 * C93853 + C11114 * C70881 + C11682 * C70728) *
                C47568 +
            (C71307 + C71308 + C71309 + C71310 + C71311 + C71312) * C93590) *
               C93639 * C1979 -
           ((C73664 + C73665 + C73666 + C73667 + C73668 + C73669) * C93590 +
            (C33771 * C70728 + C33141 * C70881 + C14559 * C93853 +
             C13954 * C70880 + (C188 * C955 + C93680 * C1261) * C93856 +
             (C188 * C807 + C93680 * C889) * C70879) *
                C47568) *
               C93639 * C1980) *
              C1981 +
          (((C73669 + C73668 + C73667 + C73666 + C73665 + C73664) * C47568 +
            (C2074 * C70879 + C2539 * C93856 + C11977 * C70880 +
             C12624 * C93853 + (C188 * C5777 + C93680 * C5872) * C70881 +
             (C188 * C5952 + C93680 * C6352) * C70728) *
                C93590) *
               C93639 * C1980 -
           ((C71313 + C71314 + C71315 + C71316 + C71317 + C71318) * C93590 +
            (C71312 + C71311 + C71310 + C71309 + C71308 + C71307) * C47568) *
               C93639 * C1979) *
              C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                       C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                       C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                          C93680 * C47568 +
                      (C71432 + C71433 + C71434) * C93680 * C93590) *
                         C93639 * C1979 -
                     ((C73783 + C73784 + C73785) * C93680 * C93590 +
                      (C71394 * C5775 + C72107 + C72107 + C70728 * C6427 +
                       C71393 * C3409 + C72108 + C72108 + C93853 * C3993 +
                       C71392 * C807 + C72109 + C72109 + C93856 * C1319) *
                          C93680 * C47568) *
                         C93639 * C1980) *
                        C1981 +
                    (((C73785 + C73784 + C73783) * C93680 * C47568 +
                      (C71392 * C805 + C73774 + C73774 + C93856 * C1317 +
                       C71393 * C3411 + C73775 + C73775 + C93853 * C3995 +
                       C71394 * C5777 + C73776 + C73776 + C70728 * C6429) *
                          C93680 * C93590) *
                         C93639 * C1980 -
                     ((C71435 + C71436 + C71437) * C93680 * C93590 +
                      (C71434 + C71433 + C71432) * C93680 * C47568) *
                         C93639 * C1979) *
                        C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                       C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                          C93856 +
                      (C54583 + C54584) * C93853 + C72190 * C70728) *
                         C93680 * C2695 -
                     ((C72201 + C72202) * C70728 + (C54587 + C54588) * C93853 +
                      (C54584 + C54583) * C93856) *
                         C93680 * C2696) *
                        C1979 +
                    ((C58119 * C93856 + (C54586 + C54585) * C93853 +
                      (C47573 * C25001 + C54569 + C54569 + C47568 * C25005 +
                       C47575 * C33015 + C54570 + C54570 + C93590 * C33017) *
                          C70728) *
                         C93680 * C2696 -
                     ((C54585 + C54586) * C70728 + C58120 * C93853 +
                      (C48411 + C48410) * C93856) *
                         C93680 * C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C47574 +
             (C188 * C114 + C93680 * C195) * C47568 + C218 * C47576 +
             C219 * C93590) *
                C93856 +
            (C72277 + C72278 + C72279 + C72280) * C93853 + C72291 * C70728) *
               C2695 -
           ((C72285 + C72286 + C72287 + C72288) * C70728 +
            (C72284 + C72283 + C72282 + C72281) * C93853 +
            (C72280 + C72279 + C72278 + C72277) * C93856) *
               C2696) *
              C1979 +
          (((C74957 + C74958 + C74959 + C74960) * C93856 +
            (C74961 + C74962 + C74963 + C74964) * C93853 +
            (C41815 * C47574 + C41816 * C47568 +
             (C188 * C33015 + C93680 * C33128) * C47576 +
             (C188 * C33016 + C93680 * C33129) * C93590) *
                C70728) *
               C2696 -
           ((C74964 + C74963 + C74962 + C74961) * C70728 +
            (C74960 + C74959 + C74958 + C74957) * C93853 +
            (C2075 * C93590 + C2076 * C47576 +
             (C188 * C815 + C93680 * C897) * C47568 +
             (C188 * C807 + C93680 * C889) * C47574) *
                C93856) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C47574 +
                      (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                       C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                          C47568 +
                      (C70907 + C70908 + C70909) * C47576 +
                      (C70910 + C70911 + C70912) * C93590) *
                         C93680 * C2695 -
                     ((C74112 + C74113 + C74114) * C93590 +
                      (C74115 + C74116 + C74117) * C47576 +
                      (C70881 * C10967 + C70728 * C11199 + C70880 * C1397 +
                       C93853 * C1545 + C70879 * C1396 + C93856 * C1544) *
                          C47568 +
                      (C70881 * C10964 + C70728 * C11196 + C70880 * C1389 +
                       C93853 * C1537 + C70879 * C1388 + C93856 * C1536) *
                          C47574) *
                         C93680 * C2696) *
                        C1979 +
                    (((C70879 * C3409 + C93856 * C3565 + C70880 * C5775 +
                       C93853 * C5950 + C70881 * C25001 + C70728 * C25218) *
                          C47574 +
                      (C70879 * C3413 + C93856 * C3569 + C70880 * C5778 +
                       C93853 * C5953 + C70881 * C25003 + C70728 * C25220) *
                          C47568 +
                      (C70879 * C3410 + C93856 * C3566 + C70880 * C5776 +
                       C93853 * C5951 + C70881 * C33015 + C70728 * C33242) *
                          C47576 +
                      (C70879 * C3414 + C93856 * C3570 + C70880 * C5779 +
                       C93853 * C5954 + C70881 * C33016 + C70728 * C33243) *
                          C93590) *
                         C93680 * C2696 -
                     ((C73159 + C73160 + C73161) * C93590 +
                      (C73162 + C73163 + C73164) * C47576 +
                      (C70881 * C5778 + C70728 * C5953 + C70880 * C3413 +
                       C93853 * C3569 + C70879 * C815 + C93856 * C963) *
                          C47568 +
                      (C70881 * C5775 + C70728 * C5950 + C70880 * C3409 +
                       C93853 * C3565 + C70879 * C807 + C93856 * C955) *
                          C47574) *
                         C93680 * C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C188 +
             (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                 C93680) *
                C93856 +
            ((C54943 + C54944) * C188 + (C54945 + C54946) * C93680) * C93853 +
            C72456 * C70728) *
               C2695 -
           (((C72452 + C72453) * C93680 + (C72454 + C72455) * C188) * C70728 +
            ((C54951 + C54952) * C93680 + (C54953 + C54954) * C188) * C93853 +
            ((C54946 + C54945) * C93680 + (C54944 + C54943) * C188) * C93856) *
               C2696) *
              C1979 +
          (((C58523 * C188 + C58524 * C93680) * C93856 +
            ((C54950 + C54949) * C188 + (C54948 + C54947) * C93680) * C93853 +
            ((C47574 * C25001 + C47568 * C25003 + C47576 * C33015 +
              C93590 * C33016) *
                 C188 +
             (C47574 * C25104 + C47568 * C25296 + C47576 * C33128 +
              C93590 * C33342) *
                 C93680) *
                C70728) *
               C2696 -
           (((C54947 + C54948) * C93680 + (C54949 + C54950) * C188) * C70728 +
            (C58525 * C93680 + C58526 * C188) * C93853 +
            ((C48682 + C48681) * C93680 + (C48680 + C48679) * C188) * C93856) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C47568 +
             C448 * C93590) *
                C93856 +
            (C72531 + C72532) * C93853 + C72537 * C70728) *
               C2695 -
           ((C72535 + C72536) * C70728 + (C72534 + C72533) * C93853 +
            (C72532 + C72531) * C93856) *
               C2696) *
              C1979 +
          (((C75259 + C75260) * C93856 + (C75261 + C75262) * C93853 +
            (C42030 * C47568 +
             (C418 * C33015 + C33461 + C33461 + C93680 * C33453) * C93590) *
                C70728) *
               C2696 -
           ((C75262 + C75261) * C70728 + (C75260 + C75259) * C93853 +
            (C2312 * C93590 +
             (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C47568) *
                C93856) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eeyz[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                        C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                           C188 +
                       (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                        C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                           C93680) *
                          C47568 +
                      ((C70907 + C70908 + C70909) * C188 +
                       (C71153 + C71154 + C71155) * C93680) *
                          C93590) *
                         C2695 -
                     (((C74434 + C74435 + C74436) * C93680 +
                       (C74115 + C74116 + C74117) * C188) *
                          C93590 +
                      ((C70881 * C11080 + C70728 * C11495 + C70880 * C1471 +
                        C93853 * C1727 + C70879 * C1470 + C93856 * C1726) *
                           C93680 +
                       (C70881 * C10964 + C70728 * C11196 + C70880 * C1389 +
                        C93853 * C1537 + C70879 * C1388 + C93856 * C1536) *
                           C188) *
                          C47568) *
                         C2696) *
                        C1979 +
                    ((((C70879 * C3409 + C93856 * C3565 + C70880 * C5775 +
                        C93853 * C5950 + C70881 * C25001 + C70728 * C25218) *
                           C188 +
                       (C70879 * C3491 + C93856 * C3783 + C70880 * C5870 +
                        C93853 * C6196 + C70881 * C25104 + C70728 * C25517) *
                           C93680) *
                          C47568 +
                      ((C70879 * C3410 + C93856 * C3566 + C70880 * C5776 +
                        C93853 * C5951 + C70881 * C33015 + C70728 * C33242) *
                           C188 +
                       (C70879 * C3492 + C93856 * C3784 + C70880 * C5871 +
                        C93853 * C6197 + C70881 * C33128 + C70728 * C33563) *
                           C93680) *
                          C93590) *
                         C2696 -
                     (((C73465 + C73466 + C73467) * C93680 +
                       (C73162 + C73163 + C73164) * C188) *
                          C93590 +
                      ((C70881 * C5870 + C70728 * C6196 + C70880 * C3491 +
                        C93853 * C3783 + C70879 * C889 + C93856 * C1145) *
                           C93680 +
                       (C70881 * C5775 + C70728 * C5950 + C70880 * C3409 +
                        C93853 * C3565 + C70879 * C807 + C93856 * C955) *
                           C188) *
                          C47568) *
                         C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C70879 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93856 +
            (C54943 + C54944) * C70880 + (C55295 + C55296) * C93853 +
            C72440 * C70881 + C72686 * C70728) *
               C93680 * C2695 -
           ((C72691 + C72692) * C70728 + (C72454 + C72455) * C70881 +
            (C55299 + C55300) * C93853 + (C54953 + C54954) * C70880 +
            (C55296 + C55295) * C93856 + (C54944 + C54943) * C70879) *
               C93680 * C2696) *
              C1979 +
          ((C58523 * C70879 + C58931 * C93856 + (C54950 + C54949) * C70880 +
            (C55298 + C55297) * C93853 +
            (C47574 * C25001 + C47568 * C25003 + C47576 * C33015 +
             C93590 * C33016) *
                C70881 +
            (C47574 * C25218 + C47568 * C25593 + C47576 * C33242 +
             C93590 * C33662) *
                C70728) *
               C93680 * C2696 -
           ((C55297 + C55298) * C70728 + (C54949 + C54950) * C70881 +
            C58932 * C93853 + C58526 * C70880 + (C48941 + C48940) * C93856 +
            (C48680 + C48679) * C70879) *
               C93680 * C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C70879 +
             (C188 * C276 + C93680 * C635) * C93856 + C11107 * C70880 +
             C11679 * C93853 + C11114 * C70881 + C11682 * C70728) *
                C47568 +
            (C71307 + C71308 + C71309 + C71310 + C71311 + C71312) * C93590) *
               C2695 -
           ((C74639 + C74640 + C74641 + C74642 + C74643 + C74644) * C93590 +
            (C30877 * C70728 + C30328 * C70881 + C11682 * C93853 +
             C11114 * C70880 + C11679 * C93856 + C11107 * C70879) *
                C47568) *
               C2696) *
              C1979 +
          (((C13954 * C70879 + C14559 * C93856 + C33141 * C70880 +
             C33771 * C93853 + C41815 * C70881 + C42232 * C70728) *
                C47568 +
            (C11979 * C70879 + C12625 * C93856 + C31169 * C70880 +
             C31797 * C93853 + (C188 * C33015 + C93680 * C33128) * C70881 +
             (C188 * C33242 + C93680 * C33767) * C70728) *
                C93590) *
               C2696 -
           ((C73664 + C73665 + C73666 + C73667 + C73668 + C73669) * C93590 +
            (C33771 * C70728 + C33141 * C70881 + C14559 * C93853 +
             C13954 * C70880 + (C188 * C955 + C93680 * C1261) * C93856 +
             (C188 * C807 + C93680 * C889) * C70879) *
                C47568) *
               C2695) *
              C1980) *
         C93613) /
        (p * q * std::sqrt(p + q));
    d2eezz[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                       C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                       C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                          C93680 * C47568 +
                      (C71432 + C71433 + C71434) * C93680 * C93590) *
                         C2695 -
                     ((C74758 + C74759 + C74760) * C93680 * C93590 +
                      (C71394 * C10964 + C72844 + C72844 + C70728 * C11756 +
                       C71393 * C1389 + C72845 + C72845 + C93853 * C1901 +
                       C71392 * C1388 + C72846 + C72846 + C93856 * C1900) *
                          C93680 * C47568) *
                         C2696) *
                        C1979 +
                    (((C71392 * C3409 + C75655 + C75655 + C93856 * C3993 +
                       C71393 * C5775 + C75656 + C75656 + C93853 * C6427 +
                       C71394 * C25001 + C75657 + C75657 + C70728 * C25775) *
                          C93680 * C47568 +
                      (C71392 * C3410 + C75658 + C75658 + C93856 * C3994 +
                       C71393 * C5776 + C75659 + C75659 + C93853 * C6428 +
                       C71394 * C33015 + C75660 + C75660 + C70728 * C33869) *
                          C93680 * C93590) *
                         C2696 -
                     ((C73783 + C73784 + C73785) * C93680 * C93590 +
                      (C71394 * C5775 + C72107 + C72107 + C70728 * C6427 +
                       C71393 * C3409 + C72108 + C72108 + C93853 * C3993 +
                       C71392 * C807 + C72109 + C72109 + C93856 * C1319) *
                          C93680 * C47568) *
                         C2695) *
                        C1980) *
                   C93613) /
                  (p * q * std::sqrt(p + q));
    d2eexx[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                      C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                         C93856 +
                     (C54583 + C54584) * C93853 + (C54588 + C54587) * C70728) *
                        C93680 * C93639 * C800 -
                    ((C54585 + C54586) * C70728 + C58120 * C93853 +
                     (C48411 + C48410) * C93856) *
                        C93680 * C93639 * C801 +
                    (C48416 * C93856 + (C51848 + C51847) * C93853 +
                     (C47573 * C16395 + C49181 + C49181 + C47568 * C16399 +
                      C47575 * C16396 + C49182 + C49182 + C93590 * C16400) *
                         C70728) *
                        C93680 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                      C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                         C93856 +
                     (C54583 + C54584) * C93853 + (C54588 + C54587) * C70728) *
                        C93680 * C93639 * C93625 * C97 -
                    ((C47575 * C1391 + C56886 + C56886 + C93590 * C1407 +
                      C47573 * C1390 + C56885 + C56885 + C47568 * C1406) *
                         C70728 +
                     (C56894 + C56893) * C93853 +
                     (C47575 * C110 + C47588 + C47588 + C93590 * C122 +
                      C47573 * C109 + C47589 + C47589 + C47568 * C121) *
                         C93856) *
                        C93680 * C93639 * C93625 * C98 +
                    ((C47573 * C110 + C47590 + C47590 + C47568 * C122 +
                      C47575 * C111 + C47591 + C47591 + C93590 * C123) *
                         C93856 +
                     (C47573 * C1386 + C52783 + C52783 + C47568 * C1402 +
                      C47575 * C1385 + C52784 + C52784 + C93590 * C1401) *
                         C93853 +
                     (C47573 * C1391 + C70730 + C70730 + C47568 * C1407 +
                      C47575 * C1392 + C70731 + C70731 + C93590 * C1408) *
                         C70728) *
                        C93680 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                      C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                         C93856 +
                     (C54583 + C54584) * C93853 + C72190 * C70728) *
                        C93680 * C1382 -
                    ((C72201 + C72202) * C70728 + (C54587 + C54588) * C93853 +
                     (C54584 + C54583) * C93856) *
                        C93680 * C1383 +
                    (C72190 * C93856 + (C72202 + C72201) * C93853 +
                     (C47573 * C30188 + C72195 + C72195 + C47568 * C30192 +
                      C47575 * C30189 + C72196 + C72196 + C93590 * C30193) *
                         C70728) *
                        C93680 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C47574 +
            (C188 * C114 + C93680 * C195) * C47568 + C218 * C47576 +
            C219 * C93590) *
               C93856 +
           (C11107 * C47574 + C11108 * C47568 + C2790 * C47576 +
            C2789 * C93590) *
               C93853 +
           (C11114 * C47574 + C11113 * C47568 + C11112 * C47576 +
            C11111 * C93590) *
               C70728) *
              C93639 * C800 -
          ((C31168 * C93590 + C31169 * C47576 + C33142 * C47568 +
            C33141 * C47574) *
               C70728 +
           (C11978 * C93590 + C11979 * C47576 + C13955 * C47568 +
            C13954 * C47574) *
               C93853 +
           (C2075 * C93590 + C2076 * C47576 +
            (C188 * C815 + C93680 * C897) * C47568 +
            (C188 * C807 + C93680 * C889) * C47574) *
               C93856) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C47574 +
            (C188 * C816 + C93680 * C898) * C47568 +
            (C188 * C809 + C93680 * C891) * C47576 +
            (C188 * C817 + C93680 * C899) * C93590) *
               C93856 +
           ((C188 * C8520 + C93680 * C8645) * C47574 +
            (C188 * C8523 + C93680 * C8648) * C47568 +
            (C188 * C8521 + C93680 * C8646) * C47576 +
            (C188 * C8524 + C93680 * C8649) * C93590) *
               C93853 +
           ((C188 * C16395 + C93680 * C16487) * C47574 +
            (C188 * C16397 + C93680 * C16489) * C47568 +
            (C188 * C16396 + C93680 * C16488) * C47576 +
            (C188 * C16398 + C93680 * C16490) * C93590) *
               C70728) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C47574 +
            (C188 * C114 + C93680 * C195) * C47568 + C218 * C47576 +
            C219 * C93590) *
               C93856 +
           (C11107 * C47574 + C11108 * C47568 + C2790 * C47576 +
            C2789 * C93590) *
               C93853 +
           (C11114 * C47574 + C11113 * C47568 + C11112 * C47576 +
            C11111 * C93590) *
               C70728) *
              C93639 * C93625 * C97 -
          ((C11109 * C93590 + C11110 * C47576 + C11111 * C47568 +
            C11112 * C47574) *
               C70728 +
           (C2787 * C93590 + C2788 * C47576 + C2789 * C47568 + C2790 * C47574) *
               C93853 +
           (C221 * C93590 + C220 * C47576 + C219 * C47568 + C218 * C47574) *
               C93856) *
              C93639 * C93625 * C98 +
          ((C220 * C47574 + C221 * C47568 + C222 * C47576 + C223 * C93590) *
               C93856 +
           (C2788 * C47574 + C2787 * C47568 + C2786 * C47576 + C2785 * C93590) *
               C93853 +
           (C11110 * C47574 + C11109 * C47568 +
            (C188 * C1392 + C93680 * C1474) * C47576 +
            (C188 * C1400 + C93680 * C1482) * C93590) *
               C70728) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C47574 +
            (C188 * C114 + C93680 * C195) * C47568 + C218 * C47576 +
            C219 * C93590) *
               C93856 +
           (C72277 + C72278 + C72279 + C72280) * C93853 + C72291 * C70728) *
              C1382 -
          ((C72285 + C72286 + C72287 + C72288) * C70728 +
           (C72284 + C72283 + C72282 + C72281) * C93853 +
           (C72280 + C72279 + C72278 + C72277) * C93856) *
              C1383 +
          (C72291 * C93856 + (C72288 + C72287 + C72286 + C72285) * C93853 +
           (C40048 * C47574 + C40047 * C47568 +
            (C188 * C30189 + C93680 * C30304) * C47576 +
            (C188 * C30191 + C93680 * C30306) * C93590) *
               C70728) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                      C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                         C47574 +
                     (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                      C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                         C47568 +
                     (C70907 + C70908 + C70909) * C47576 +
                     (C70910 + C70911 + C70912) * C93590) *
                        C93680 * C93639 * C800 -
                    ((C70881 * C5779 + C70728 * C5954 + C70880 * C3414 +
                      C93853 * C3570 + C70879 * C814 + C93856 * C962) *
                         C93590 +
                     (C70881 * C5776 + C70728 * C5951 + C70880 * C3410 +
                      C93853 * C3566 + C70879 * C806 + C93856 * C954) *
                         C47576 +
                     (C70881 * C5778 + C70728 * C5953 + C70880 * C3413 +
                      C93853 * C3569 + C70879 * C815 + C93856 * C963) *
                         C47568 +
                     (C70881 * C5775 + C70728 * C5950 + C70880 * C3409 +
                      C93853 * C3565 + C70879 * C807 + C93856 * C955) *
                         C47574) *
                        C93680 * C93639 * C801 +
                    ((C70879 * C808 + C93856 * C956 + C70880 * C8520 +
                      C93853 * C8749 + C70881 * C16395 + C70728 * C16565) *
                         C47574 +
                     (C70879 * C816 + C93856 * C964 + C70880 * C8523 +
                      C93853 * C8752 + C70881 * C16397 + C70728 * C16567) *
                         C47568 +
                     (C70879 * C809 + C93856 * C957 + C70880 * C8521 +
                      C93853 * C8750 + C70881 * C16396 + C70728 * C16566) *
                         C47576 +
                     (C70879 * C817 + C93856 * C965 + C70880 * C8524 +
                      C93853 * C8753 + C70881 * C16398 + C70728 * C16568) *
                         C93590) *
                        C93680 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                      C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                         C47574 +
                     (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                      C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                         C47568 +
                     (C70907 + C70908 + C70909) * C47576 +
                     (C70910 + C70911 + C70912) * C93590) *
                        C93680 * C93639 * C93625 * C97 -
                    ((C70913 + C70914 + C70915) * C93590 +
                     (C70916 + C70917 + C70918) * C47576 +
                     (C70912 + C70911 + C70910) * C47568 +
                     (C70909 + C70908 + C70907) * C47574) *
                        C93680 * C93639 * C93625 * C98 +
                    ((C70918 + C70917 + C70916) * C47574 +
                     (C70915 + C70914 + C70913) * C47568 +
                     (C70879 * C111 + C93856 * C279 + C70880 * C1385 +
                      C93853 * C1533 + C70881 * C1392 + C70728 * C1540) *
                         C47576 +
                     (C70879 * C117 + C93856 * C285 + C70880 * C1393 +
                      C93853 * C1541 + C70881 * C1400 + C70728 * C1548) *
                         C93590) *
                        C93680 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                      C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                         C47574 +
                     (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                      C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                         C47568 +
                     (C70907 + C70908 + C70909) * C47576 +
                     (C70910 + C70911 + C70912) * C93590) *
                        C93680 * C1382 -
                    ((C70881 * C10968 + C70728 * C11200 + C70880 * C1398 +
                      C93853 * C1546 + C70879 * C1395 + C93856 * C1543) *
                         C93590 +
                     (C70881 * C10965 + C70728 * C11197 + C70880 * C1390 +
                      C93853 * C1538 + C70879 * C1387 + C93856 * C1535) *
                         C47576 +
                     (C70881 * C10967 + C70728 * C11199 + C70880 * C1397 +
                      C93853 * C1545 + C70879 * C1396 + C93856 * C1544) *
                         C47568 +
                     (C70881 * C10964 + C70728 * C11196 + C70880 * C1389 +
                      C93853 * C1537 + C70879 * C1388 + C93856 * C1536) *
                         C47574) *
                        C93680 * C1383 +
                    ((C70879 * C1389 + C93856 * C1537 + C70880 * C10964 +
                      C93853 * C11196 + C70881 * C30188 + C70728 * C30408) *
                         C47574 +
                     (C70879 * C1397 + C93856 * C1545 + C70880 * C10967 +
                      C93853 * C11199 + C70881 * C30190 + C70728 * C30410) *
                         C47568 +
                     (C70879 * C1390 + C93856 * C1538 + C70880 * C10965 +
                      C93853 * C11197 + C70881 * C30189 + C70728 * C30409) *
                         C47576 +
                     (C70879 * C1398 + C93856 * C1546 + C70880 * C10968 +
                      C93853 * C11200 + C70881 * C30191 + C70728 * C30411) *
                         C93590) *
                        C93680 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C188 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93680) *
               C93856 +
           ((C54943 + C54944) * C188 + (C54945 + C54946) * C93680) * C93853 +
           ((C54954 + C54953) * C188 + (C54952 + C54951) * C93680) * C70728) *
              C93639 * C800 -
          (((C54947 + C54948) * C93680 + (C54949 + C54950) * C188) * C70728 +
           (C58525 * C93680 + C58526 * C188) * C93853 +
           ((C48682 + C48681) * C93680 + (C48680 + C48679) * C188) * C93856) *
              C93639 * C801 +
          ((C48691 * C188 + C48692 * C93680) * C93856 +
           ((C52172 + C52171) * C188 + (C52170 + C52169) * C93680) * C93853 +
           ((C47574 * C16395 + C47568 * C16397 + C47576 * C16396 +
             C93590 * C16398) *
                C188 +
            (C47574 * C16487 + C47568 * C16643 + C47576 * C16488 +
             C93590 * C16644) *
                C93680) *
               C70728) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C188 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93680) *
               C93856 +
           ((C54943 + C54944) * C188 + (C54945 + C54946) * C93680) * C93853 +
           ((C54954 + C54953) * C188 + (C54952 + C54951) * C93680) * C70728) *
              C93639 * C93625 * C97 -
          (((C47576 * C1473 + C93590 * C1605 + C47574 * C1472 +
             C47568 * C1604) *
                C93680 +
            (C47576 * C1391 + C93590 * C1399 + C47574 * C1390 +
             C47568 * C1398) *
                C188) *
               C70728 +
           ((C57312 + C57311) * C93680 + (C57310 + C57309) * C188) * C93853 +
           ((C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                C93680 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C188) *
               C93856) *
              C93639 * C93625 * C98 +
          (((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
                C188 +
            (C47574 * C191 + C47568 * C364 + C47576 * C192 + C93590 * C365) *
                C93680) *
               C93856 +
           ((C47574 * C1386 + C47568 * C1394 + C47576 * C1385 +
             C93590 * C1393) *
                C188 +
            (C47574 * C1468 + C47568 * C1600 + C47576 * C1467 +
             C93590 * C1599) *
                C93680) *
               C93853 +
           ((C47574 * C1391 + C47568 * C1399 + C47576 * C1392 +
             C93590 * C1400) *
                C188 +
            (C47574 * C1473 + C47568 * C1605 + C47576 * C1474 +
             C93590 * C1606) *
                C93680) *
               C70728) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C188 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93680) *
               C93856 +
           ((C54943 + C54944) * C188 + (C54945 + C54946) * C93680) * C93853 +
           C72456 * C70728) *
              C1382 -
          (((C72452 + C72453) * C93680 + (C72454 + C72455) * C188) * C70728 +
           ((C54951 + C54952) * C93680 + (C54953 + C54954) * C188) * C93853 +
           ((C54946 + C54945) * C93680 + (C54944 + C54943) * C188) * C93856) *
              C1383 +
          (C72456 * C93856 +
           ((C72455 + C72454) * C188 + (C72453 + C72452) * C93680) * C93853 +
           ((C47574 * C30188 + C47568 * C30190 + C47576 * C30189 +
             C93590 * C30191) *
                C188 +
            (C47574 * C30303 + C47568 * C30486 + C47576 * C30304 +
             C93590 * C30487) *
                C93680) *
               C70728) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C47568 +
            C448 * C93590) *
               C93856 +
           (C11414 * C47568 + C3026 * C93590) * C93853 +
           (C11417 * C47568 + C11416 * C93590) * C70728) *
              C93639 * C800 -
          ((C31486 * C93590 + C33464 * C47568) * C70728 +
           (C12307 * C93590 + C14261 * C47568) * C93853 +
           (C2312 * C93590 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C47568) *
               C93856) *
              C93639 * C801 +
          (((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C47568 +
            (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C93590) *
               C93856 +
           ((C418 * C8520 + C10580 + C10580 + C93680 * C8984) * C47568 +
            (C418 * C8521 + C10581 + C10581 + C93680 * C8985) * C93590) *
               C93853 +
           ((C418 * C16395 + C29805 + C29805 + C93680 * C16719) * C47568 +
            (C418 * C16396 + C29806 + C29806 + C93680 * C16720) * C93590) *
               C70728) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C47568 +
            C448 * C93590) *
               C93856 +
           (C11414 * C47568 + C3026 * C93590) * C93853 +
           (C11417 * C47568 + C11416 * C93590) * C70728) *
              C93639 * C93625 * C97 -
          ((C11415 * C93590 + C11416 * C47568) * C70728 +
           (C3025 * C93590 + C3026 * C47568) * C93853 +
           (C449 * C93590 + C448 * C47568) * C93856) *
              C93639 * C93625 * C98 +
          ((C449 * C47568 + C450 * C93590) * C93856 +
           (C3025 * C47568 + C3024 * C93590) * C93853 +
           (C11415 * C47568 +
            (C418 * C1392 + C1673 + C1673 + C93680 * C1664) * C93590) *
               C70728) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C47568 +
            C448 * C93590) *
               C93856 +
           (C72531 + C72532) * C93853 + C72537 * C70728) *
              C1382 -
          ((C72535 + C72536) * C70728 + (C72534 + C72533) * C93853 +
           (C72532 + C72531) * C93856) *
              C1383 +
          (C72537 * C93856 + (C72536 + C72535) * C93853 +
           (C40229 * C47568 +
            (C418 * C30189 + C30615 + C30615 + C93680 * C30604) * C93590) *
               C70728) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C188 +
                      (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                       C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                          C93680) *
                         C47568 +
                     ((C70907 + C70908 + C70909) * C188 +
                      (C71153 + C71154 + C71155) * C93680) *
                         C93590) *
                        C93639 * C800 -
                    (((C70881 * C5871 + C70728 * C6197 + C70880 * C3492 +
                       C93853 * C3784 + C70879 * C888 + C93856 * C1144) *
                          C93680 +
                      (C70881 * C5776 + C70728 * C5951 + C70880 * C3410 +
                       C93853 * C3566 + C70879 * C806 + C93856 * C954) *
                          C188) *
                         C93590 +
                     ((C70881 * C5870 + C70728 * C6196 + C70880 * C3491 +
                       C93853 * C3783 + C70879 * C889 + C93856 * C1145) *
                          C93680 +
                      (C70881 * C5775 + C70728 * C5950 + C70880 * C3409 +
                       C93853 * C3565 + C70879 * C807 + C93856 * C955) *
                          C188) *
                         C47568) *
                        C93639 * C801 +
                    (((C70879 * C808 + C93856 * C956 + C70880 * C8520 +
                       C93853 * C8749 + C70881 * C16395 + C70728 * C16565) *
                          C188 +
                      (C70879 * C890 + C93856 * C1146 + C70880 * C8645 +
                       C93853 * C9091 + C70881 * C16487 + C70728 * C16807) *
                          C93680) *
                         C47568 +
                     ((C70879 * C809 + C93856 * C957 + C70880 * C8521 +
                       C93853 * C8750 + C70881 * C16396 + C70728 * C16566) *
                          C188 +
                      (C70879 * C891 + C93856 * C1147 + C70880 * C8646 +
                       C93853 * C9092 + C70881 * C16488 + C70728 * C16808) *
                          C93680) *
                         C93590) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C188 +
                      (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                       C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                          C93680) *
                         C47568 +
                     ((C70907 + C70908 + C70909) * C188 +
                      (C71153 + C71154 + C71155) * C93680) *
                         C93590) *
                        C93639 * C93625 * C97 -
                    (((C71156 + C71157 + C71158) * C93680 +
                      (C70916 + C70917 + C70918) * C188) *
                         C93590 +
                     ((C71155 + C71154 + C71153) * C93680 +
                      (C70909 + C70908 + C70907) * C188) *
                         C47568) *
                        C93639 * C93625 * C98 +
                    (((C70918 + C70917 + C70916) * C188 +
                      (C71158 + C71157 + C71156) * C93680) *
                         C47568 +
                     ((C70879 * C111 + C93856 * C279 + C70880 * C1385 +
                       C93853 * C1533 + C70881 * C1392 + C70728 * C1540) *
                          C188 +
                      (C70879 * C192 + C93856 * C504 + C70880 * C1467 +
                       C93853 * C1723 + C70881 * C1474 + C70728 * C1730) *
                          C93680) *
                         C93590) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C188 +
                      (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                       C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                          C93680) *
                         C47568 +
                     ((C70907 + C70908 + C70909) * C188 +
                      (C71153 + C71154 + C71155) * C93680) *
                         C93590) *
                        C1382 -
                    (((C70881 * C11081 + C70728 * C11496 + C70880 * C1472 +
                       C93853 * C1728 + C70879 * C1469 + C93856 * C1725) *
                          C93680 +
                      (C70881 * C10965 + C70728 * C11197 + C70880 * C1390 +
                       C93853 * C1538 + C70879 * C1387 + C93856 * C1535) *
                          C188) *
                         C93590 +
                     ((C70881 * C11080 + C70728 * C11495 + C70880 * C1471 +
                       C93853 * C1727 + C70879 * C1470 + C93856 * C1726) *
                          C93680 +
                      (C70881 * C10964 + C70728 * C11196 + C70880 * C1389 +
                       C93853 * C1537 + C70879 * C1388 + C93856 * C1536) *
                          C188) *
                         C47568) *
                        C1383 +
                    (((C70879 * C1389 + C93856 * C1537 + C70880 * C10964 +
                       C93853 * C11196 + C70881 * C30188 + C70728 * C30408) *
                          C188 +
                      (C70879 * C1471 + C93856 * C1727 + C70880 * C11080 +
                       C93853 * C11495 + C70881 * C30303 + C70728 * C30698) *
                          C93680) *
                         C47568 +
                     ((C70879 * C1390 + C93856 * C1538 + C70880 * C10965 +
                       C93853 * C11197 + C70881 * C30189 + C70728 * C30409) *
                          C188 +
                      (C70879 * C1472 + C93856 * C1728 + C70880 * C11081 +
                       C93853 * C11496 + C70881 * C30304 + C70728 * C30699) *
                          C93680) *
                         C93590) *
                        C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
               C70879 +
           (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
               C93856 +
           (C54943 + C54944) * C70880 + (C55295 + C55296) * C93853 +
           (C54954 + C54953) * C70881 + (C55300 + C55299) * C70728) *
              C93680 * C93639 * C800 -
          ((C55297 + C55298) * C70728 + (C54949 + C54950) * C70881 +
           C58932 * C93853 + C58526 * C70880 + (C48941 + C48940) * C93856 +
           (C48680 + C48679) * C70879) *
              C93680 * C93639 * C801 +
          (C48691 * C70879 + C48946 * C93856 + (C52172 + C52171) * C70880 +
           (C52486 + C52485) * C93853 +
           (C47574 * C16395 + C47568 * C16397 + C47576 * C16396 +
            C93590 * C16398) *
               C70881 +
           (C47574 * C16565 + C47568 * C16883 + C47576 * C16566 +
            C93590 * C16884) *
               C70728) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
               C70879 +
           (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
               C93856 +
           (C54943 + C54944) * C70880 + (C55295 + C55296) * C93853 +
           (C54954 + C54953) * C70881 + (C55300 + C55299) * C70728) *
              C93680 * C93639 * C93625 * C97 -
          ((C47576 * C1539 + C93590 * C1787 + C47574 * C1538 + C47568 * C1786) *
               C70728 +
           (C47576 * C1391 + C93590 * C1399 + C47574 * C1390 + C47568 * C1398) *
               C70881 +
           (C57716 + C57715) * C93853 + (C57310 + C57309) * C70880 +
           (C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
               C93856 +
           (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
               C70879) *
              C93680 * C93639 * C93625 * C98 +
          ((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
               C70879 +
           (C47574 * C278 + C47568 * C581 + C47576 * C279 + C93590 * C582) *
               C93856 +
           (C47574 * C1386 + C47568 * C1394 + C47576 * C1385 + C93590 * C1393) *
               C70880 +
           (C47574 * C1534 + C47568 * C1782 + C47576 * C1533 + C93590 * C1781) *
               C93853 +
           (C47574 * C1391 + C47568 * C1399 + C47576 * C1392 + C93590 * C1400) *
               C70881 +
           (C47574 * C1539 + C47568 * C1787 + C47576 * C1540 + C93590 * C1788) *
               C70728) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
               C70879 +
           (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
               C93856 +
           (C54943 + C54944) * C70880 + (C55295 + C55296) * C93853 +
           C72440 * C70881 + C72686 * C70728) *
              C93680 * C1382 -
          ((C72691 + C72692) * C70728 + (C72454 + C72455) * C70881 +
           (C55299 + C55300) * C93853 + (C54953 + C54954) * C70880 +
           (C55296 + C55295) * C93856 + (C54944 + C54943) * C70879) *
              C93680 * C1383 +
          (C72440 * C70879 + C72686 * C93856 + (C72455 + C72454) * C70880 +
           (C72692 + C72691) * C93853 +
           (C47574 * C30188 + C47568 * C30190 + C47576 * C30189 +
            C93590 * C30191) *
               C70881 +
           (C47574 * C30408 + C47568 * C30774 + C47576 * C30409 +
            C93590 * C30775) *
               C70728) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C70879 +
            (C188 * C276 + C93680 * C635) * C93856 + C11107 * C70880 +
            C11679 * C93853 + C11114 * C70881 + C11682 * C70728) *
               C47568 +
           (C71307 + C71308 + C71309 + C71310 + C71311 + C71312) * C93590) *
              C93639 * C800 -
          ((C31797 * C70728 + C31169 * C70881 + C12625 * C93853 +
            C11979 * C70880 + C2540 * C93856 + C2076 * C70879) *
               C93590 +
           (C33771 * C70728 + C33141 * C70881 + C14559 * C93853 +
            C13954 * C70880 + (C188 * C955 + C93680 * C1261) * C93856 +
            (C188 * C807 + C93680 * C889) * C70879) *
               C47568) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C70879 +
            (C188 * C956 + C93680 * C1262) * C93856 +
            (C188 * C8520 + C93680 * C8645) * C70880 +
            (C188 * C8749 + C93680 * C9305) * C93853 +
            (C188 * C16395 + C93680 * C16487) * C70881 +
            (C188 * C16565 + C93680 * C16959) * C70728) *
               C47568 +
           ((C188 * C809 + C93680 * C891) * C70879 +
            (C188 * C957 + C93680 * C1263) * C93856 +
            (C188 * C8521 + C93680 * C8646) * C70880 +
            (C188 * C8750 + C93680 * C9306) * C93853 +
            (C188 * C16396 + C93680 * C16488) * C70881 +
            (C188 * C16566 + C93680 * C16960) * C70728) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C70879 +
            (C188 * C276 + C93680 * C635) * C93856 + C11107 * C70880 +
            C11679 * C93853 + C11114 * C70881 + C11682 * C70728) *
               C47568 +
           (C71307 + C71308 + C71309 + C71310 + C71311 + C71312) * C93590) *
              C93639 * C93625 * C97 -
          ((C71313 + C71314 + C71315 + C71316 + C71317 + C71318) * C93590 +
           (C71312 + C71311 + C71310 + C71309 + C71308 + C71307) * C47568) *
              C93639 * C93625 * C98 +
          ((C71318 + C71317 + C71316 + C71315 + C71314 + C71313) * C47568 +
           (C222 * C70879 + C656 * C93856 + C2786 * C70880 + C3252 * C93853 +
            (C188 * C1392 + C93680 * C1474) * C70881 +
            (C188 * C1540 + C93680 * C1846) * C70728) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C70879 +
            (C188 * C276 + C93680 * C635) * C93856 + C11107 * C70880 +
            C11679 * C93853 + C11114 * C70881 + C11682 * C70728) *
               C47568 +
           (C71307 + C71308 + C71309 + C71310 + C71311 + C71312) * C93590) *
              C1382 -
          ((C30876 * C70728 + C30326 * C70881 + C11681 * C93853 +
            C11112 * C70880 + C3254 * C93856 + C2790 * C70879) *
               C93590 +
           (C30877 * C70728 + C30328 * C70881 + C11682 * C93853 +
            C11114 * C70880 + C11679 * C93856 + C11107 * C70879) *
               C47568) *
              C1383 +
          ((C11114 * C70879 + C11682 * C93856 + C30328 * C70880 +
            C30877 * C93853 + C40048 * C70881 + C40389 * C70728) *
               C47568 +
           (C11112 * C70879 + C11681 * C93856 + C30326 * C70880 +
            C30876 * C93853 + (C188 * C30189 + C93680 * C30304) * C70881 +
            (C188 * C30409 + C93680 * C30870) * C70728) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                      C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                      C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                         C93680 * C47568 +
                     (C71432 + C71433 + C71434) * C93680 * C93590) *
                        C93639 * C800 -
                    ((C71394 * C5776 + C72104 + C72104 + C70728 * C6428 +
                      C71393 * C3410 + C72105 + C72105 + C93853 * C3994 +
                      C71392 * C806 + C72106 + C72106 + C93856 * C1318) *
                         C93680 * C93590 +
                     (C71394 * C5775 + C72107 + C72107 + C70728 * C6427 +
                      C71393 * C3409 + C72108 + C72108 + C93853 * C3993 +
                      C71392 * C807 + C72109 + C72109 + C93856 * C1319) *
                         C93680 * C47568) *
                        C93639 * C801 +
                    ((C71392 * C808 + C72110 + C72110 + C93856 * C1320 +
                      C71393 * C8520 + C72111 + C72111 + C93853 * C9406 +
                      C71394 * C16395 + C72112 + C72112 + C70728 * C17035) *
                         C93680 * C47568 +
                     (C71392 * C809 + C72113 + C72113 + C93856 * C1321 +
                      C71393 * C8521 + C72114 + C72114 + C93853 * C9407 +
                      C71394 * C16396 + C72115 + C72115 + C70728 * C17036) *
                         C93680 * C93590) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                      C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                      C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                         C93680 * C47568 +
                     (C71432 + C71433 + C71434) * C93680 * C93590) *
                        C93639 * C93625 * C97 -
                    ((C71435 + C71436 + C71437) * C93680 * C93590 +
                     (C71434 + C71433 + C71432) * C93680 * C47568) *
                        C93639 * C93625 * C98 +
                    ((C71437 + C71436 + C71435) * C93680 * C47568 +
                     (C71392 * C111 + C71417 + C71417 + C93856 * C717 +
                      C71393 * C1385 + C71418 + C71418 + C93853 * C1897 +
                      C71394 * C1392 + C71419 + C71419 + C70728 * C1904) *
                         C93680 * C93590) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                      C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                      C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                         C93680 * C47568 +
                     (C71432 + C71433 + C71434) * C93680 * C93590) *
                        C1382 -
                    ((C71394 * C10965 + C72841 + C72841 + C70728 * C11757 +
                      C71393 * C1390 + C72842 + C72842 + C93853 * C1902 +
                      C71392 * C1387 + C72843 + C72843 + C93856 * C1899) *
                         C93680 * C93590 +
                     (C71394 * C10964 + C72844 + C72844 + C70728 * C11756 +
                      C71393 * C1389 + C72845 + C72845 + C93853 * C1901 +
                      C71392 * C1388 + C72846 + C72846 + C93856 * C1900) *
                         C93680 * C47568) *
                        C1383 +
                    ((C71392 * C1389 + C72847 + C72847 + C93856 * C1901 +
                      C71393 * C10964 + C72848 + C72848 + C93853 * C11756 +
                      C71394 * C30188 + C72849 + C72849 + C70728 * C30951) *
                         C93680 * C47568 +
                     (C71392 * C1390 + C72850 + C72850 + C93856 * C1902 +
                      C71393 * C10965 + C72851 + C72851 + C93853 * C11757 +
                      C71394 * C30189 + C72852 + C72852 + C70728 * C30952) *
                         C93680 * C93590) *
                        C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                       C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                          C93856 +
                      (C54583 + C54584) * C93853 + C72190 * C70728) *
                         C93680 * C2695 -
                     ((C72201 + C72202) * C70728 + (C54587 + C54588) * C93853 +
                      (C54584 + C54583) * C93856) *
                         C93680 * C2696) *
                        C93625 * C1981 +
                    (((C56893 + C56894) * C93856 + (C73894 + C73895) * C93853 +
                      (C47573 * C10965 + C73888 + C73888 + C47568 * C10971 +
                       C47575 * C10966 + C73889 + C73889 + C93590 * C10972) *
                          C70728) *
                         C93680 * C2696 -
                     ((C73895 + C73894) * C70728 + (C56894 + C56893) * C93853 +
                      (C47575 * C110 + C47588 + C47588 + C93590 * C122 +
                       C47573 * C109 + C47589 + C47589 + C47568 * C121) *
                          C93856) *
                         C93680 * C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C47574 +
             (C188 * C114 + C93680 * C195) * C47568 + C218 * C47576 +
             C219 * C93590) *
                C93856 +
            (C72277 + C72278 + C72279 + C72280) * C93853 + C72291 * C70728) *
               C2695 -
           ((C72285 + C72286 + C72287 + C72288) * C70728 +
            (C72284 + C72283 + C72282 + C72281) * C93853 +
            (C72280 + C72279 + C72278 + C72277) * C93856) *
               C2696) *
              C93625 * C1981 +
          (((C73994 + C73995 + C73996 + C73997) * C93856 +
            (C73998 + C73999 + C74000 + C74001) * C93853 +
            (C30326 * C47574 + C30325 * C47568 +
             (C188 * C10966 + C93680 * C11082) * C47576 +
             (C188 * C10969 + C93680 * C11085) * C93590) *
                C70728) *
               C2696 -
           ((C74001 + C74000 + C73999 + C73998) * C70728 +
            (C73997 + C73996 + C73995 + C73994) * C93853 +
            (C221 * C93590 + C220 * C47576 + C219 * C47568 + C218 * C47574) *
                C93856) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eexz[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C47574 +
                      (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                       C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                          C47568 +
                      (C70907 + C70908 + C70909) * C47576 +
                      (C70910 + C70911 + C70912) * C93590) *
                         C93680 * C2695 -
                     ((C74112 + C74113 + C74114) * C93590 +
                      (C74115 + C74116 + C74117) * C47576 +
                      (C70881 * C10967 + C70728 * C11199 + C70880 * C1397 +
                       C93853 * C1545 + C70879 * C1396 + C93856 * C1544) *
                          C47568 +
                      (C70881 * C10964 + C70728 * C11196 + C70880 * C1389 +
                       C93853 * C1537 + C70879 * C1388 + C93856 * C1536) *
                          C47574) *
                         C93680 * C2696) *
                        C93625 * C1981 +
                    (((C74117 + C74116 + C74115) * C47574 +
                      (C74114 + C74113 + C74112) * C47568 +
                      (C70879 * C1386 + C93856 * C1534 + C70880 * C1391 +
                       C93853 * C1539 + C70881 * C10966 + C70728 * C11198) *
                          C47576 +
                      (C70879 * C1394 + C93856 * C1542 + C70880 * C1399 +
                       C93853 * C1547 + C70881 * C10969 + C70728 * C11201) *
                          C93590) *
                         C93680 * C2696 -
                     ((C70913 + C70914 + C70915) * C93590 +
                      (C70916 + C70917 + C70918) * C47576 +
                      (C70912 + C70911 + C70910) * C47568 +
                      (C70909 + C70908 + C70907) * C47574) *
                         C93680 * C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                 C188 +
             (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                 C93680) *
                C93856 +
            ((C54943 + C54944) * C188 + (C54945 + C54946) * C93680) * C93853 +
            C72456 * C70728) *
               C2695 -
           (((C72452 + C72453) * C93680 + (C72454 + C72455) * C188) * C70728 +
            ((C54951 + C54952) * C93680 + (C54953 + C54954) * C188) * C93853 +
            ((C54946 + C54945) * C93680 + (C54944 + C54943) * C188) * C93856) *
               C2696) *
              C93625 * C1981 +
          ((((C57309 + C57310) * C188 + (C57311 + C57312) * C93680) * C93856 +
            ((C74224 + C74225) * C188 + (C74226 + C74227) * C93680) * C93853 +
            ((C47574 * C10965 + C47568 * C10968 + C47576 * C10966 +
              C93590 * C10969) *
                 C188 +
             (C47574 * C11081 + C47568 * C11277 + C47576 * C11082 +
              C93590 * C11278) *
                 C93680) *
                C70728) *
               C2696 -
           (((C74227 + C74226) * C93680 + (C74225 + C74224) * C188) * C70728 +
            ((C57312 + C57311) * C93680 + (C57310 + C57309) * C188) * C93853 +
            ((C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                 C93680 +
             (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                 C188) *
                C93856) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C47568 +
             C448 * C93590) *
                C93856 +
            (C72531 + C72532) * C93853 + C72537 * C70728) *
               C2695 -
           ((C72535 + C72536) * C70728 + (C72534 + C72533) * C93853 +
            (C72532 + C72531) * C93856) *
               C2696) *
              C93625 * C1981 +
          (((C74326 + C74327) * C93856 + (C74328 + C74329) * C93853 +
            (C30621 * C47568 +
             (C418 * C10966 + C11405 + C11405 + C93680 * C11391) * C93590) *
                C70728) *
               C2696 -
           ((C74329 + C74328) * C70728 + (C74327 + C74326) * C93853 +
            (C449 * C93590 + C448 * C47568) * C93856) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                        C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                           C188 +
                       (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                        C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                           C93680) *
                          C47568 +
                      ((C70907 + C70908 + C70909) * C188 +
                       (C71153 + C71154 + C71155) * C93680) *
                          C93590) *
                         C2695 -
                     (((C74434 + C74435 + C74436) * C93680 +
                       (C74115 + C74116 + C74117) * C188) *
                          C93590 +
                      ((C70881 * C11080 + C70728 * C11495 + C70880 * C1471 +
                        C93853 * C1727 + C70879 * C1470 + C93856 * C1726) *
                           C93680 +
                       (C70881 * C10964 + C70728 * C11196 + C70880 * C1389 +
                        C93853 * C1537 + C70879 * C1388 + C93856 * C1536) *
                           C188) *
                          C47568) *
                         C2696) *
                        C93625 * C1981 +
                    ((((C74117 + C74116 + C74115) * C188 +
                       (C74436 + C74435 + C74434) * C93680) *
                          C47568 +
                      ((C70879 * C1386 + C93856 * C1534 + C70880 * C1391 +
                        C93853 * C1539 + C70881 * C10966 + C70728 * C11198) *
                           C188 +
                       (C70879 * C1468 + C93856 * C1724 + C70880 * C1473 +
                        C93853 * C1729 + C70881 * C11082 + C70728 * C11497) *
                           C93680) *
                          C93590) *
                         C2696 -
                     (((C71156 + C71157 + C71158) * C93680 +
                       (C70916 + C70917 + C70918) * C188) *
                          C93590 +
                      ((C71155 + C71154 + C71153) * C93680 +
                       (C70909 + C70908 + C70907) * C188) *
                          C47568) *
                         C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C70879 +
            (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
                C93856 +
            (C54943 + C54944) * C70880 + (C55295 + C55296) * C93853 +
            C72440 * C70881 + C72686 * C70728) *
               C93680 * C2695 -
           ((C72691 + C72692) * C70728 + (C72454 + C72455) * C70881 +
            (C55299 + C55300) * C93853 + (C54953 + C54954) * C70880 +
            (C55296 + C55295) * C93856 + (C54944 + C54943) * C70879) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C57309 + C57310) * C70879 + (C57715 + C57716) * C93856 +
            (C74224 + C74225) * C70880 + (C74539 + C74540) * C93853 +
            (C47574 * C10965 + C47568 * C10968 + C47576 * C10966 +
             C93590 * C10969) *
                C70881 +
            (C47574 * C11197 + C47568 * C11573 + C47576 * C11198 +
             C93590 * C11574) *
                C70728) *
               C93680 * C2696 -
           ((C74540 + C74539) * C70728 + (C74225 + C74224) * C70881 +
            (C57716 + C57715) * C93853 + (C57310 + C57309) * C70880 +
            (C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
                C93856 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C70879) *
               C93680 * C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C70879 +
             (C188 * C276 + C93680 * C635) * C93856 + C11107 * C70880 +
             C11679 * C93853 + C11114 * C70881 + C11682 * C70728) *
                C47568 +
            (C71307 + C71308 + C71309 + C71310 + C71311 + C71312) * C93590) *
               C2695 -
           ((C74639 + C74640 + C74641 + C74642 + C74643 + C74644) * C93590 +
            (C30877 * C70728 + C30328 * C70881 + C11682 * C93853 +
             C11114 * C70880 + C11679 * C93856 + C11107 * C70879) *
                C47568) *
               C2696) *
              C93625 * C1981 +
          (((C74644 + C74643 + C74642 + C74641 + C74640 + C74639) * C47568 +
            (C2788 * C70879 + C3253 * C93856 + C11110 * C70880 +
             C11680 * C93853 + (C188 * C10966 + C93680 * C11082) * C70881 +
             (C188 * C11198 + C93680 * C11669) * C70728) *
                C93590) *
               C2696 -
           ((C71313 + C71314 + C71315 + C71316 + C71317 + C71318) * C93590 +
            (C71312 + C71311 + C71310 + C71309 + C71308 + C71307) * C47568) *
               C2695) *
              C93625 * C1982)) /
        (p * q * std::sqrt(p + q));
    d2eezz[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                       C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                       C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                          C93680 * C47568 +
                      (C71432 + C71433 + C71434) * C93680 * C93590) *
                         C2695 -
                     ((C74758 + C74759 + C74760) * C93680 * C93590 +
                      (C71394 * C10964 + C72844 + C72844 + C70728 * C11756 +
                       C71393 * C1389 + C72845 + C72845 + C93853 * C1901 +
                       C71392 * C1388 + C72846 + C72846 + C93856 * C1900) *
                          C93680 * C47568) *
                         C2696) *
                        C93625 * C1981 +
                    (((C74760 + C74759 + C74758) * C93680 * C47568 +
                      (C71392 * C1386 + C74749 + C74749 + C93856 * C1898 +
                       C71393 * C1391 + C74750 + C74750 + C93853 * C1903 +
                       C71394 * C10966 + C74751 + C74751 + C70728 * C11758) *
                          C93680 * C93590) *
                         C2696 -
                     ((C71435 + C71436 + C71437) * C93680 * C93590 +
                      (C71434 + C71433 + C71432) * C93680 * C47568) *
                         C2695) *
                        C93625 * C1982)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                      C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                         C93856 +
                     (C54583 + C54584) * C93853 + (C54588 + C54587) * C70728) *
                        C93680 * C93639 * C93625 * C97 -
                    ((C47575 * C1391 + C56886 + C56886 + C93590 * C1407 +
                      C47573 * C1390 + C56885 + C56885 + C47568 * C1406) *
                         C70728 +
                     (C56894 + C56893) * C93853 +
                     (C47575 * C110 + C47588 + C47588 + C93590 * C122 +
                      C47573 * C109 + C47589 + C47589 + C47568 * C121) *
                         C93856) *
                        C93680 * C93639 * C93625 * C98 +
                    ((C47573 * C110 + C47590 + C47590 + C47568 * C122 +
                      C47575 * C111 + C47591 + C47591 + C93590 * C123) *
                         C93856 +
                     (C47573 * C1386 + C52783 + C52783 + C47568 * C1402 +
                      C47575 * C1385 + C52784 + C52784 + C93590 * C1401) *
                         C93853 +
                     (C47573 * C1391 + C70730 + C70730 + C47568 * C1407 +
                      C47575 * C1392 + C70731 + C70731 + C93590 * C1408) *
                         C70728) *
                        C93680 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C47573 * C108 + C47578 + C47578 + C47568 * C120 +
                      C47575 * C109 + C47579 + C47579 + C93590 * C121) *
                         C93856 +
                     (C54583 + C54584) * C93853 + (C54588 + C54587) * C70728) *
                        C93680 * C93639 * C800 -
                    ((C54585 + C54586) * C70728 + C58120 * C93853 +
                     (C48411 + C48410) * C93856) *
                        C93680 * C93639 * C801 +
                    (C48416 * C93856 + (C51848 + C51847) * C93853 +
                     (C47573 * C16395 + C49181 + C49181 + C47568 * C16399 +
                      C47575 * C16396 + C49182 + C49182 + C93590 * C16400) *
                         C70728) *
                        C93680 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C47574 +
            (C188 * C114 + C93680 * C195) * C47568 + C218 * C47576 +
            C219 * C93590) *
               C93856 +
           (C11107 * C47574 + C11108 * C47568 + C2790 * C47576 +
            C2789 * C93590) *
               C93853 +
           (C11114 * C47574 + C11113 * C47568 + C11112 * C47576 +
            C11111 * C93590) *
               C70728) *
              C93639 * C93625 * C97 -
          ((C11109 * C93590 + C11110 * C47576 + C11111 * C47568 +
            C11112 * C47574) *
               C70728 +
           (C2787 * C93590 + C2788 * C47576 + C2789 * C47568 + C2790 * C47574) *
               C93853 +
           (C221 * C93590 + C220 * C47576 + C219 * C47568 + C218 * C47574) *
               C93856) *
              C93639 * C93625 * C98 +
          ((C220 * C47574 + C221 * C47568 + C222 * C47576 + C223 * C93590) *
               C93856 +
           (C2788 * C47574 + C2787 * C47568 + C2786 * C47576 + C2785 * C93590) *
               C93853 +
           (C11110 * C47574 + C11109 * C47568 +
            (C188 * C1392 + C93680 * C1474) * C47576 +
            (C188 * C1400 + C93680 * C1482) * C93590) *
               C70728) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C47574 +
            (C188 * C114 + C93680 * C195) * C47568 + C218 * C47576 +
            C219 * C93590) *
               C93856 +
           (C11107 * C47574 + C11108 * C47568 + C2790 * C47576 +
            C2789 * C93590) *
               C93853 +
           (C11114 * C47574 + C11113 * C47568 + C11112 * C47576 +
            C11111 * C93590) *
               C70728) *
              C93639 * C800 -
          ((C31168 * C93590 + C31169 * C47576 + C33142 * C47568 +
            C33141 * C47574) *
               C70728 +
           (C11978 * C93590 + C11979 * C47576 + C13955 * C47568 +
            C13954 * C47574) *
               C93853 +
           (C2075 * C93590 + C2076 * C47576 +
            (C188 * C815 + C93680 * C897) * C47568 +
            (C188 * C807 + C93680 * C889) * C47574) *
               C93856) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C47574 +
            (C188 * C816 + C93680 * C898) * C47568 +
            (C188 * C809 + C93680 * C891) * C47576 +
            (C188 * C817 + C93680 * C899) * C93590) *
               C93856 +
           ((C188 * C8520 + C93680 * C8645) * C47574 +
            (C188 * C8523 + C93680 * C8648) * C47568 +
            (C188 * C8521 + C93680 * C8646) * C47576 +
            (C188 * C8524 + C93680 * C8649) * C93590) *
               C93853 +
           ((C188 * C16395 + C93680 * C16487) * C47574 +
            (C188 * C16397 + C93680 * C16489) * C47568 +
            (C188 * C16396 + C93680 * C16488) * C47576 +
            (C188 * C16398 + C93680 * C16490) * C93590) *
               C70728) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                      C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                         C47574 +
                     (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                      C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                         C47568 +
                     (C70907 + C70908 + C70909) * C47576 +
                     (C70910 + C70911 + C70912) * C93590) *
                        C93680 * C93639 * C93625 * C97 -
                    ((C70913 + C70914 + C70915) * C93590 +
                     (C70916 + C70917 + C70918) * C47576 +
                     (C70912 + C70911 + C70910) * C47568 +
                     (C70909 + C70908 + C70907) * C47574) *
                        C93680 * C93639 * C93625 * C98 +
                    ((C70918 + C70917 + C70916) * C47574 +
                     (C70915 + C70914 + C70913) * C47568 +
                     (C70879 * C111 + C93856 * C279 + C70880 * C1385 +
                      C93853 * C1533 + C70881 * C1392 + C70728 * C1540) *
                         C47576 +
                     (C70879 * C117 + C93856 * C285 + C70880 * C1393 +
                      C93853 * C1541 + C70881 * C1400 + C70728 * C1548) *
                         C93590) *
                        C93680 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                      C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                         C47574 +
                     (C70879 * C114 + C93856 * C282 + C70880 * C1396 +
                      C93853 * C1544 + C70881 * C1397 + C70728 * C1545) *
                         C47568 +
                     (C70907 + C70908 + C70909) * C47576 +
                     (C70910 + C70911 + C70912) * C93590) *
                        C93680 * C93639 * C800 -
                    ((C70881 * C5779 + C70728 * C5954 + C70880 * C3414 +
                      C93853 * C3570 + C70879 * C814 + C93856 * C962) *
                         C93590 +
                     (C70881 * C5776 + C70728 * C5951 + C70880 * C3410 +
                      C93853 * C3566 + C70879 * C806 + C93856 * C954) *
                         C47576 +
                     (C70881 * C5778 + C70728 * C5953 + C70880 * C3413 +
                      C93853 * C3569 + C70879 * C815 + C93856 * C963) *
                         C47568 +
                     (C70881 * C5775 + C70728 * C5950 + C70880 * C3409 +
                      C93853 * C3565 + C70879 * C807 + C93856 * C955) *
                         C47574) *
                        C93680 * C93639 * C801 +
                    ((C70879 * C808 + C93856 * C956 + C70880 * C8520 +
                      C93853 * C8749 + C70881 * C16395 + C70728 * C16565) *
                         C47574 +
                     (C70879 * C816 + C93856 * C964 + C70880 * C8523 +
                      C93853 * C8752 + C70881 * C16397 + C70728 * C16567) *
                         C47568 +
                     (C70879 * C809 + C93856 * C957 + C70880 * C8521 +
                      C93853 * C8750 + C70881 * C16396 + C70728 * C16566) *
                         C47576 +
                     (C70879 * C817 + C93856 * C965 + C70880 * C8524 +
                      C93853 * C8753 + C70881 * C16398 + C70728 * C16568) *
                         C93590) *
                        C93680 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C188 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93680) *
               C93856 +
           ((C54943 + C54944) * C188 + (C54945 + C54946) * C93680) * C93853 +
           ((C54954 + C54953) * C188 + (C54952 + C54951) * C93680) * C70728) *
              C93639 * C93625 * C97 -
          (((C47576 * C1473 + C93590 * C1605 + C47574 * C1472 +
             C47568 * C1604) *
                C93680 +
            (C47576 * C1391 + C93590 * C1399 + C47574 * C1390 +
             C47568 * C1398) *
                C188) *
               C70728 +
           ((C57312 + C57311) * C93680 + (C57310 + C57309) * C188) * C93853 +
           ((C47576 * C191 + C93590 * C364 + C47574 * C190 + C47568 * C363) *
                C93680 +
            (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
                C188) *
               C93856) *
              C93639 * C93625 * C98 +
          (((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
                C188 +
            (C47574 * C191 + C47568 * C364 + C47576 * C192 + C93590 * C365) *
                C93680) *
               C93856 +
           ((C47574 * C1386 + C47568 * C1394 + C47576 * C1385 +
             C93590 * C1393) *
                C188 +
            (C47574 * C1468 + C47568 * C1600 + C47576 * C1467 +
             C93590 * C1599) *
                C93680) *
               C93853 +
           ((C47574 * C1391 + C47568 * C1399 + C47576 * C1392 +
             C93590 * C1400) *
                C188 +
            (C47574 * C1473 + C47568 * C1605 + C47576 * C1474 +
             C93590 * C1606) *
                C93680) *
               C70728) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
                C188 +
            (C47574 * C189 + C47568 * C362 + C47576 * C190 + C93590 * C363) *
                C93680) *
               C93856 +
           ((C54943 + C54944) * C188 + (C54945 + C54946) * C93680) * C93853 +
           ((C54954 + C54953) * C188 + (C54952 + C54951) * C93680) * C70728) *
              C93639 * C800 -
          (((C54947 + C54948) * C93680 + (C54949 + C54950) * C188) * C70728 +
           (C58525 * C93680 + C58526 * C188) * C93853 +
           ((C48682 + C48681) * C93680 + (C48680 + C48679) * C188) * C93856) *
              C93639 * C801 +
          ((C48691 * C188 + C48692 * C93680) * C93856 +
           ((C52172 + C52171) * C188 + (C52170 + C52169) * C93680) * C93853 +
           ((C47574 * C16395 + C47568 * C16397 + C47576 * C16396 +
             C93590 * C16398) *
                C188 +
            (C47574 * C16487 + C47568 * C16643 + C47576 * C16488 +
             C93590 * C16644) *
                C93680) *
               C70728) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C47568 +
            C448 * C93590) *
               C93856 +
           (C11414 * C47568 + C3026 * C93590) * C93853 +
           (C11417 * C47568 + C11416 * C93590) * C70728) *
              C93639 * C93625 * C97 -
          ((C11415 * C93590 + C11416 * C47568) * C70728 +
           (C3025 * C93590 + C3026 * C47568) * C93853 +
           (C449 * C93590 + C448 * C47568) * C93856) *
              C93639 * C93625 * C98 +
          ((C449 * C47568 + C450 * C93590) * C93856 +
           (C3025 * C47568 + C3024 * C93590) * C93853 +
           (C11415 * C47568 +
            (C418 * C1392 + C1673 + C1673 + C93680 * C1664) * C93590) *
               C70728) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C47568 +
            C448 * C93590) *
               C93856 +
           (C11414 * C47568 + C3026 * C93590) * C93853 +
           (C11417 * C47568 + C11416 * C93590) * C70728) *
              C93639 * C800 -
          ((C31486 * C93590 + C33464 * C47568) * C70728 +
           (C12307 * C93590 + C14261 * C47568) * C93853 +
           (C2312 * C93590 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C47568) *
               C93856) *
              C93639 * C801 +
          (((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C47568 +
            (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C93590) *
               C93856 +
           ((C418 * C8520 + C10580 + C10580 + C93680 * C8984) * C47568 +
            (C418 * C8521 + C10581 + C10581 + C93680 * C8985) * C93590) *
               C93853 +
           ((C418 * C16395 + C29805 + C29805 + C93680 * C16719) * C47568 +
            (C418 * C16396 + C29806 + C29806 + C93680 * C16720) * C93590) *
               C70728) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C188 +
                      (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                       C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                          C93680) *
                         C47568 +
                     ((C70907 + C70908 + C70909) * C188 +
                      (C71153 + C71154 + C71155) * C93680) *
                         C93590) *
                        C93639 * C93625 * C97 -
                    (((C71156 + C71157 + C71158) * C93680 +
                      (C70916 + C70917 + C70918) * C188) *
                         C93590 +
                     ((C71155 + C71154 + C71153) * C93680 +
                      (C70909 + C70908 + C70907) * C188) *
                         C47568) *
                        C93639 * C93625 * C98 +
                    (((C70918 + C70917 + C70916) * C188 +
                      (C71158 + C71157 + C71156) * C93680) *
                         C47568 +
                     ((C70879 * C111 + C93856 * C279 + C70880 * C1385 +
                       C93853 * C1533 + C70881 * C1392 + C70728 * C1540) *
                          C188 +
                      (C70879 * C192 + C93856 * C504 + C70880 * C1467 +
                       C93853 * C1723 + C70881 * C1474 + C70728 * C1730) *
                          C93680) *
                         C93590) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C70879 * C108 + C93856 * C276 + C70880 * C1388 +
                       C93853 * C1536 + C70881 * C1389 + C70728 * C1537) *
                          C188 +
                      (C70879 * C189 + C93856 * C501 + C70880 * C1470 +
                       C93853 * C1726 + C70881 * C1471 + C70728 * C1727) *
                          C93680) *
                         C47568 +
                     ((C70907 + C70908 + C70909) * C188 +
                      (C71153 + C71154 + C71155) * C93680) *
                         C93590) *
                        C93639 * C800 -
                    (((C70881 * C5871 + C70728 * C6197 + C70880 * C3492 +
                       C93853 * C3784 + C70879 * C888 + C93856 * C1144) *
                          C93680 +
                      (C70881 * C5776 + C70728 * C5951 + C70880 * C3410 +
                       C93853 * C3566 + C70879 * C806 + C93856 * C954) *
                          C188) *
                         C93590 +
                     ((C70881 * C5870 + C70728 * C6196 + C70880 * C3491 +
                       C93853 * C3783 + C70879 * C889 + C93856 * C1145) *
                          C93680 +
                      (C70881 * C5775 + C70728 * C5950 + C70880 * C3409 +
                       C93853 * C3565 + C70879 * C807 + C93856 * C955) *
                          C188) *
                         C47568) *
                        C93639 * C801 +
                    (((C70879 * C808 + C93856 * C956 + C70880 * C8520 +
                       C93853 * C8749 + C70881 * C16395 + C70728 * C16565) *
                          C188 +
                      (C70879 * C890 + C93856 * C1146 + C70880 * C8645 +
                       C93853 * C9091 + C70881 * C16487 + C70728 * C16807) *
                          C93680) *
                         C47568 +
                     ((C70879 * C809 + C93856 * C957 + C70880 * C8521 +
                       C93853 * C8750 + C70881 * C16396 + C70728 * C16566) *
                          C188 +
                      (C70879 * C891 + C93856 * C1147 + C70880 * C8646 +
                       C93853 * C9092 + C70881 * C16488 + C70728 * C16808) *
                          C93680) *
                         C93590) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
               C70879 +
           (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
               C93856 +
           (C54943 + C54944) * C70880 + (C55295 + C55296) * C93853 +
           (C54954 + C54953) * C70881 + (C55300 + C55299) * C70728) *
              C93680 * C93639 * C93625 * C97 -
          ((C47576 * C1539 + C93590 * C1787 + C47574 * C1538 + C47568 * C1786) *
               C70728 +
           (C47576 * C1391 + C93590 * C1399 + C47574 * C1390 + C47568 * C1398) *
               C70881 +
           (C57716 + C57715) * C93853 + (C57310 + C57309) * C70880 +
           (C47576 * C278 + C93590 * C581 + C47574 * C277 + C47568 * C580) *
               C93856 +
           (C47576 * C110 + C93590 * C116 + C47574 * C109 + C47568 * C115) *
               C70879) *
              C93680 * C93639 * C93625 * C98 +
          ((C47574 * C110 + C47568 * C116 + C47576 * C111 + C93590 * C117) *
               C70879 +
           (C47574 * C278 + C47568 * C581 + C47576 * C279 + C93590 * C582) *
               C93856 +
           (C47574 * C1386 + C47568 * C1394 + C47576 * C1385 + C93590 * C1393) *
               C70880 +
           (C47574 * C1534 + C47568 * C1782 + C47576 * C1533 + C93590 * C1781) *
               C93853 +
           (C47574 * C1391 + C47568 * C1399 + C47576 * C1392 + C93590 * C1400) *
               C70881 +
           (C47574 * C1539 + C47568 * C1787 + C47576 * C1540 + C93590 * C1788) *
               C70728) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C47574 * C108 + C47568 * C114 + C47576 * C109 + C93590 * C115) *
               C70879 +
           (C47574 * C276 + C47568 * C579 + C47576 * C277 + C93590 * C580) *
               C93856 +
           (C54943 + C54944) * C70880 + (C55295 + C55296) * C93853 +
           (C54954 + C54953) * C70881 + (C55300 + C55299) * C70728) *
              C93680 * C93639 * C800 -
          ((C55297 + C55298) * C70728 + (C54949 + C54950) * C70881 +
           C58932 * C93853 + C58526 * C70880 + (C48941 + C48940) * C93856 +
           (C48680 + C48679) * C70879) *
              C93680 * C93639 * C801 +
          (C48691 * C70879 + C48946 * C93856 + (C52172 + C52171) * C70880 +
           (C52486 + C52485) * C93853 +
           (C47574 * C16395 + C47568 * C16397 + C47576 * C16396 +
            C93590 * C16398) *
               C70881 +
           (C47574 * C16565 + C47568 * C16883 + C47576 * C16566 +
            C93590 * C16884) *
               C70728) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C70879 +
            (C188 * C276 + C93680 * C635) * C93856 + C11107 * C70880 +
            C11679 * C93853 + C11114 * C70881 + C11682 * C70728) *
               C47568 +
           (C71307 + C71308 + C71309 + C71310 + C71311 + C71312) * C93590) *
              C93639 * C93625 * C97 -
          ((C71313 + C71314 + C71315 + C71316 + C71317 + C71318) * C93590 +
           (C71312 + C71311 + C71310 + C71309 + C71308 + C71307) * C47568) *
              C93639 * C93625 * C98 +
          ((C71318 + C71317 + C71316 + C71315 + C71314 + C71313) * C47568 +
           (C222 * C70879 + C656 * C93856 + C2786 * C70880 + C3252 * C93853 +
            (C188 * C1392 + C93680 * C1474) * C70881 +
            (C188 * C1540 + C93680 * C1846) * C70728) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C70879 +
            (C188 * C276 + C93680 * C635) * C93856 + C11107 * C70880 +
            C11679 * C93853 + C11114 * C70881 + C11682 * C70728) *
               C47568 +
           (C71307 + C71308 + C71309 + C71310 + C71311 + C71312) * C93590) *
              C93639 * C800 -
          ((C31797 * C70728 + C31169 * C70881 + C12625 * C93853 +
            C11979 * C70880 + C2540 * C93856 + C2076 * C70879) *
               C93590 +
           (C33771 * C70728 + C33141 * C70881 + C14559 * C93853 +
            C13954 * C70880 + (C188 * C955 + C93680 * C1261) * C93856 +
            (C188 * C807 + C93680 * C889) * C70879) *
               C47568) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C70879 +
            (C188 * C956 + C93680 * C1262) * C93856 +
            (C188 * C8520 + C93680 * C8645) * C70880 +
            (C188 * C8749 + C93680 * C9305) * C93853 +
            (C188 * C16395 + C93680 * C16487) * C70881 +
            (C188 * C16565 + C93680 * C16959) * C70728) *
               C47568 +
           ((C188 * C809 + C93680 * C891) * C70879 +
            (C188 * C957 + C93680 * C1263) * C93856 +
            (C188 * C8521 + C93680 * C8646) * C70880 +
            (C188 * C8750 + C93680 * C9306) * C93853 +
            (C188 * C16396 + C93680 * C16488) * C70881 +
            (C188 * C16566 + C93680 * C16960) * C70728) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                      C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                      C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                         C93680 * C47568 +
                     (C71432 + C71433 + C71434) * C93680 * C93590) *
                        C93639 * C93625 * C97 -
                    ((C71435 + C71436 + C71437) * C93680 * C93590 +
                     (C71434 + C71433 + C71432) * C93680 * C47568) *
                        C93639 * C93625 * C98 +
                    ((C71437 + C71436 + C71435) * C93680 * C47568 +
                     (C71392 * C111 + C71417 + C71417 + C93856 * C717 +
                      C71393 * C1385 + C71418 + C71418 + C93853 * C1897 +
                      C71394 * C1392 + C71419 + C71419 + C70728 * C1904) *
                         C93680 * C93590) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C71392 * C108 + C71396 + C71396 + C93856 * C714 +
                      C71393 * C1388 + C71397 + C71397 + C93853 * C1900 +
                      C71394 * C1389 + C71398 + C71398 + C70728 * C1901) *
                         C93680 * C47568 +
                     (C71432 + C71433 + C71434) * C93680 * C93590) *
                        C93639 * C800 -
                    ((C71394 * C5776 + C72104 + C72104 + C70728 * C6428 +
                      C71393 * C3410 + C72105 + C72105 + C93853 * C3994 +
                      C71392 * C806 + C72106 + C72106 + C93856 * C1318) *
                         C93680 * C93590 +
                     (C71394 * C5775 + C72107 + C72107 + C70728 * C6427 +
                      C71393 * C3409 + C72108 + C72108 + C93853 * C3993 +
                      C71392 * C807 + C72109 + C72109 + C93856 * C1319) *
                         C93680 * C47568) *
                        C93639 * C801 +
                    ((C71392 * C808 + C72110 + C72110 + C93856 * C1320 +
                      C71393 * C8520 + C72111 + C72111 + C93853 * C9406 +
                      C71394 * C16395 + C72112 + C72112 + C70728 * C17035) *
                         C93680 * C47568 +
                     (C71392 * C809 + C72113 + C72113 + C93856 * C1321 +
                      C71393 * C8521 + C72114 + C72114 + C93853 * C9407 +
                      C71394 * C16396 + C72115 + C72115 + C70728 * C17036) *
                         C93680 * C93590) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                      C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                      C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                         C93706 * C93680 * C93639 * C1979 -
                     (C106 * C804 + C829 + C829 + C92 * C820 + C104 * C805 +
                      C830 + C830 + C91 * C821 + C102 * C806 + C831 + C831 +
                      C90 * C822 + C100 * C807 + C832 + C832 + C89 * C823) *
                         C93706 * C93680 * C93639 * C1980) *
                        C1981 +
                    ((C100 * C806 + C1987 + C1987 + C89 * C822 + C102 * C805 +
                      C1988 + C1988 + C90 * C821 + C104 * C804 + C1989 + C1989 +
                      C91 * C820 + C106 * C1983 + C1990 + C1990 + C92 * C1985) *
                         C93706 * C93680 * C93639 * C1980 -
                     (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                      C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                      C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                         C93706 * C93680 * C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 +
                       C14744 * C109 + C14748 + C14748 + C93590 * C121) *
                          C93706 * C14739 +
                      (C15585 + C15586) * C93706 * C14740 + C15592 * C14741) *
                         C93639 * C1979 -
                     ((C15589 + C15590) * C93706 * C14741 +
                      (C15588 + C15587) * C93706 * C14740 +
                      (C15586 + C15585) * C93706 * C14739) *
                         C93639 * C1980) *
                        C1981 +
                    (((C17156 + C17157) * C93706 * C14739 +
                      (C17158 + C17159) * C93706 * C14740 +
                      (C14742 * C4898 + C17146 + C17146 + C93815 * C4904 +
                       C14744 * C4899 + C17147 + C17147 + C93590 * C4905) *
                          C93706 * C14741) *
                         C93639 * C1980 -
                     ((C17159 + C17158) * C93706 * C14741 +
                      (C17157 + C17156) * C93706 * C14740 +
                      (C14744 * C110 + C14757 + C14757 + C93590 * C122 +
                       C14742 * C109 + C14758 + C14758 + C93815 * C121) *
                          C93706 * C14739) *
                         C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C101 +
            (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C93706 * C93639 * C1979 -
           (C2071 * C92 + C2072 * C107 + C2073 * C91 + C2074 * C105 +
            C2075 * C90 + C2076 * C103 + (C188 * C815 + C93680 * C897) * C89 +
            (C188 * C807 + C93680 * C889) * C101) *
               C93706 * C93639 * C1980) *
              C1981 +
          ((C2076 * C101 + C2075 * C89 + C2074 * C103 + C2073 * C90 +
            C2072 * C105 + C2071 * C91 +
            (C188 * C1983 + C93680 * C2056) * C107 +
            (C188 * C1984 + C93680 * C2057) * C92) *
               C93706 * C93639 * C1980 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C91732 +
            (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
             C14840 * C816 + C14741 * C898) *
                C93815 +
            (C14866 + C14867 + C14868) * C91722 +
            (C14869 + C14870 + C14871) * C93590) *
               C93706 * C93639 * C1979 -
           ((C17270 + C17271 + C17272) * C93590 +
            (C17273 + C17274 + C17275) * C91722 +
            (C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
             C14838 * C815 + C14739 * C897) *
                C93815 +
            (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
             C14838 * C807 + C14739 * C889) *
                C91732) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C17275 + C17274 + C17273) * C91732 +
            (C17272 + C17271 + C17270) * C93815 +
            (C14838 * C805 + C14739 * C887 + C14839 * C810 + C14740 * C892 +
             C14840 * C4899 + C14741 * C5018) *
                C91722 +
            (C14838 * C813 + C14739 * C895 + C14839 * C818 + C14740 * C900 +
             C14840 * C4902 + C14741 * C5021) *
                C93590) *
               C93706 * C93639 * C1980 -
           ((C14872 + C14873 + C14874) * C93590 +
            (C14875 + C14876 + C14877) * C91722 +
            (C14871 + C14870 + C14869) * C93815 +
            (C14868 + C14867 + C14866) * C91732) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexz[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C101 +
            (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C93680 * C93639 * C1979 -
           (C2157 * C92 + C2158 * C107 + C2159 * C91 + C2160 * C105 +
            C2161 * C90 + C2162 * C103 + (C275 * C815 + C93706 * C963) * C89 +
            (C275 * C807 + C93706 * C955) * C101) *
               C93680 * C93639 * C1980) *
              C1981 +
          ((C2162 * C101 + C2161 * C89 + C2160 * C103 + C2159 * C90 +
            C2158 * C105 + C2157 * C91 +
            (C275 * C1983 + C93706 * C2142) * C107 +
            (C275 * C1984 + C93706 * C2143) * C92) *
               C93680 * C93639 * C1980 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C91732 +
             (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
             C306 * C93590) *
                C14739 +
            (C15749 + C15750 + C15751 + C15752) * C14740 + C15775 * C14741) *
               C93639 * C1979 -
           ((C15771 + C15772 + C15773 + C15774) * C14741 +
            (C15756 + C15755 + C15754 + C15753) * C14740 +
            (C15752 + C15751 + C15750 + C15749) * C14739) *
               C93639 * C1980) *
              C1981 +
          (((C17374 + C17375 + C17376 + C17377) * C14739 +
            (C17378 + C17379 + C17380 + C17381) * C14740 +
            (C15767 * C91732 + C15766 * C93815 +
             (C275 * C4899 + C93706 * C5098) * C91722 +
             (C275 * C4902 + C93706 * C5101) * C93590) *
                C14741) *
               C93639 * C1980 -
           ((C17381 + C17380 + C17379 + C17378) * C14741 +
            (C17377 + C17376 + C17375 + C17374) * C14740 +
            (C308 * C93590 + C307 * C91722 + C306 * C93815 + C305 * C91732) *
                C14739) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C93680) *
               C93706 * C93639 * C1979 -
           ((C107 * C886 + C92 * C1018 + C105 * C887 + C91 * C1019 +
             C103 * C888 + C90 * C1020 + C101 * C889 + C89 * C1021) *
                C93680 +
            (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
             C90 * C814 + C101 * C807 + C89 * C815) *
                C188) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C101 * C806 + C89 * C814 + C103 * C805 + C90 * C813 + C105 * C804 +
             C91 * C812 + C107 * C1983 + C92 * C1984) *
                C188 +
            (C101 * C888 + C89 * C1020 + C103 * C887 + C90 * C1019 +
             C105 * C886 + C91 * C1018 + C107 * C2056 + C92 * C2228) *
                C93680) *
               C93706 * C93639 * C1980 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C93680 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C14838 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C14739 +
            (C15876 + C15877) * C14839 + (C15878 + C15879) * C14740 +
            C15888 * C14840 + C15889 * C14741) *
               C93706 * C93639 * C1979 -
           ((C15884 + C15885) * C14741 + (C15886 + C15887) * C14840 +
            (C15883 + C15882) * C14740 + (C15881 + C15880) * C14839 +
            (C15879 + C15878) * C14739 + (C15877 + C15876) * C14838) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C17496 + C17497) * C14838 + (C17498 + C17499) * C14739 +
            (C17500 + C17501) * C14839 + (C17502 + C17503) * C14740 +
            (C91732 * C4898 + C93815 * C4901 + C91722 * C4899 +
             C93590 * C4902) *
                C14840 +
            (C91732 * C5017 + C93815 * C5213 + C91722 * C5018 +
             C93590 * C5214) *
                C14741) *
               C93706 * C93639 * C1980 -
           ((C17503 + C17502) * C14741 + (C17501 + C17500) * C14840 +
            (C17499 + C17498) * C14740 + (C17497 + C17496) * C14839 +
            (C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
                C14739 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C14838) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C418 * C108 + C426 + C426 + C93680 * C419) * C89 +
                      C448 * C90 + C449 * C91 + C450 * C92) *
                         C93706 * C93639 * C1979 -
                     (C2310 * C92 + C2311 * C91 + C2312 * C90 +
                      (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C89) *
                         C93706 * C93639 * C1980) *
                        C1981 +
                    ((C2312 * C89 + C2311 * C90 + C2310 * C91 +
                      (C418 * C1983 + C2303 + C2303 + C93680 * C2295) * C92) *
                         C93706 * C93639 * C1980 -
                     (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                         C93706 * C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C15099 * C108 + C15103 + C15103 + C14739 * C419 +
                       C15100 * C807 + C15104 + C15104 + C14740 * C1079 +
                       C15101 * C808 + C15105 + C15105 + C14741 * C1080) *
                          C93815 +
                      (C15139 + C15140 + C15141) * C93590) *
                         C93706 * C93639 * C1979 -
                     ((C17617 + C17618 + C17619) * C93590 +
                      (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 +
                       C15100 * C808 + C15970 + C15970 + C14740 * C1080 +
                       C15099 * C807 + C15971 + C15971 + C14739 * C1079) *
                          C93815) *
                         C93706 * C93639 * C1980) *
                        C1981 +
                    (((C17619 + C17618 + C17617) * C93815 +
                      (C15099 * C805 + C17608 + C17608 + C14739 * C1077 +
                       C15100 * C810 + C17609 + C17609 + C14740 * C1082 +
                       C15101 * C4899 + C17610 + C17610 + C14741 * C5327) *
                          C93590) *
                         C93706 * C93639 * C1980 -
                     ((C15142 + C15143 + C15144) * C93590 +
                      (C15141 + C15140 + C15139) * C93815) *
                         C93706 * C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C188 +
             (C275 * C189 + C93706 * C501) * C93680) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C93639 * C1979 -
           ((C2392 + C2382) * C92 + (C2393 + C2385) * C91 +
            (C2394 + C2388) * C90 +
            ((C275 * C889 + C93706 * C1145) * C93680 +
             (C275 * C807 + C93706 * C955) * C188) *
                C89) *
               C93639 * C1980) *
              C1981 +
          (((C2388 + C2394) * C89 + (C2385 + C2393) * C90 +
            (C2382 + C2392) * C91 +
            ((C275 * C1983 + C93706 * C2142) * C188 +
             (C275 * C2056 + C93706 * C2378) * C93680) *
                C92) *
               C93639 * C1980 -
           ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
            (C524 + C508) * C89) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C14838 +
             (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
             C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
                C93815 +
            (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
               C93639 * C1979 -
           ((C17718 + C17719 + C17720 + C17721 + C17722 + C17723) * C93590 +
            (C16059 * C14741 + C15769 * C14840 + C5429 * C14740 +
             C5130 * C14839 + C5426 * C14739 + C5123 * C14838) *
                C93815) *
               C93639 * C1980) *
              C1981 +
          (((C17723 + C17722 + C17721 + C17720 + C17719 + C17718) * C93815 +
            (C2160 * C14838 + C2390 * C14739 + C5126 * C14839 + C5427 * C14740 +
             (C275 * C4899 + C93706 * C5098) * C14840 +
             (C275 * C5018 + C93706 * C5416) * C14741) *
                C93590) *
               C93639 * C1980 -
           ((C15225 + C15226 + C15227 + C15228 + C15229 + C15230) * C93590 +
            (C15224 + C15223 + C15222 + C15221 + C15220 + C15219) * C93815) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C93706) *
               C93680 * C93639 * C1979 -
           ((C107 * C952 + C92 * C1200 + C105 * C953 + C91 * C1201 +
             C103 * C954 + C90 * C1202 + C101 * C955 + C89 * C1203) *
                C93706 +
            (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
             C90 * C814 + C101 * C807 + C89 * C815) *
                C275) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C101 * C806 + C89 * C814 + C103 * C805 + C90 * C813 + C105 * C804 +
             C91 * C812 + C107 * C1983 + C92 * C1984) *
                C275 +
            (C101 * C954 + C89 * C1202 + C103 * C953 + C90 * C1201 +
             C105 * C952 + C91 * C1200 + C107 * C2142 + C92 * C2460) *
                C93706) *
               C93680 * C93639 * C1980 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C93706 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C275 +
             (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                 C93706) *
                C14739 +
            ((C15876 + C15877) * C275 + (C16149 + C16150) * C93706) * C14740 +
            C16157 * C14741) *
               C93639 * C1979 -
           (((C16153 + C16154) * C93706 + (C15886 + C15887) * C275) * C14741 +
            ((C16152 + C16151) * C93706 + (C15881 + C15880) * C275) * C14740 +
            ((C16150 + C16149) * C93706 + (C15877 + C15876) * C275) * C14739) *
               C93639 * C1980) *
              C1981 +
          ((((C17496 + C17497) * C275 + (C17830 + C17831) * C93706) * C14739 +
            ((C17500 + C17501) * C275 + (C17832 + C17833) * C93706) * C14740 +
            ((C91732 * C4898 + C93815 * C4901 + C91722 * C4899 +
              C93590 * C4902) *
                 C275 +
             (C91732 * C5097 + C93815 * C5504 + C91722 * C5098 +
              C93590 * C5505) *
                 C93706) *
                C14741) *
               C93639 * C1980 -
           (((C17833 + C17832) * C93706 + (C17501 + C17500) * C275) * C14741 +
            ((C17831 + C17830) * C93706 + (C17497 + C17496) * C275) * C14740 +
            ((C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                 C93706 +
             (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                 C275) *
                C14739) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezy[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C188 * C108 + C93680 * C189) * C275 +
                       (C188 * C276 + C93680 * C635) * C93706) *
                          C89 +
                      (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                         C93639 * C1979 -
                     ((C2541 + C2531) * C92 + (C2542 + C2534) * C91 +
                      (C2543 + C2537) * C90 +
                      ((C188 * C955 + C93680 * C1261) * C93706 +
                       (C188 * C807 + C93680 * C889) * C275) *
                          C89) *
                         C93639 * C1980) *
                        C1981 +
                    (((C2537 + C2543) * C89 + (C2534 + C2542) * C90 +
                      (C2531 + C2541) * C91 +
                      ((C188 * C1983 + C93680 * C2056) * C275 +
                       (C188 * C2142 + C93680 * C2527) * C93706) *
                          C92) *
                         C93639 * C1980 -
                     ((C661 + C653) * C92 + (C660 + C648) * C91 +
                      (C659 + C645) * C90 + (C658 + C642) * C89) *
                         C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C14838 * C108 + C14739 * C189 + C14839 * C807 +
                        C14740 * C889 + C14840 * C808 + C14741 * C890) *
                           C275 +
                       (C14838 * C276 + C14739 * C635 + C14839 * C955 +
                        C14740 * C1261 + C14840 * C956 + C14741 * C1262) *
                           C93706) *
                          C93815 +
                      ((C14866 + C14867 + C14868) * C275 +
                       (C15391 + C15392 + C15393) * C93706) *
                          C93590) *
                         C93639 * C1979 -
                     (((C17938 + C17939 + C17940) * C93706 +
                       (C17273 + C17274 + C17275) * C275) *
                          C93590 +
                      ((C14840 * C5096 + C14741 * C5598 + C14839 * C956 +
                        C14740 * C1262 + C14838 * C955 + C14739 * C1261) *
                           C93706 +
                       (C14840 * C4897 + C14741 * C5016 + C14839 * C808 +
                        C14740 * C890 + C14838 * C807 + C14739 * C889) *
                           C275) *
                          C93815) *
                         C93639 * C1980) *
                        C1981 +
                    ((((C17275 + C17274 + C17273) * C275 +
                       (C17940 + C17939 + C17938) * C93706) *
                          C93815 +
                      ((C14838 * C805 + C14739 * C887 + C14839 * C810 +
                        C14740 * C892 + C14840 * C4899 + C14741 * C5018) *
                           C275 +
                       (C14838 * C953 + C14739 * C1259 + C14839 * C958 +
                        C14740 * C1264 + C14840 * C5098 + C14741 * C5600) *
                           C93706) *
                          C93590) *
                         C93639 * C1980 -
                     (((C15394 + C15395 + C15396) * C93706 +
                       (C14875 + C14876 + C14877) * C275) *
                          C93590 +
                      ((C15393 + C15392 + C15391) * C93706 +
                       (C14868 + C14867 + C14866) * C275) *
                          C93815) *
                         C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C93639 * C1979 -
           (C2627 * C92 + C2628 * C91 + C2629 * C90 +
            (C713 * C807 + C1328 + C1328 + C93706 * C1319) * C93680 * C89) *
               C93639 * C1980) *
              C1981 +
          ((C2629 * C89 + C2628 * C90 + C2627 * C91 +
            (C713 * C1983 + C2617 + C2617 + C93706 * C2609) * C93680 * C92) *
               C93639 * C1980 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C93639 *
               C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
             C5698 * C14740 + C5701 * C14741) *
                C93815 +
            (C15471 + C15472 + C15473) * C93590) *
               C93639 * C1979 -
           ((C18039 + C18040 + C18041) * C93590 +
            (C16321 * C14741 + C5701 * C14740 + C5698 * C14739) * C93815) *
               C93639 * C1980) *
              C1981 +
          (((C18041 + C18040 + C18039) * C93815 +
            (C2625 * C14739 + C5699 * C14740 +
             (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C14741) *
                C93590) *
               C93639 * C1980 -
           ((C15474 + C15475 + C15476) * C93590 +
            (C15473 + C15472 + C15471) * C93815) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C93706 * C93680 * C2695 -
           (C106 * C1385 + C1410 + C1410 + C92 * C1401 + C104 * C1386 + C1411 +
            C1411 + C91 * C1402 + C102 * C1387 + C1412 + C1412 + C90 * C1403 +
            C100 * C1388 + C1413 + C1413 + C89 * C1404) *
               C93706 * C93680 * C2696) *
              C1979 +
          ((C100 * C3409 + C3422 + C3422 + C89 * C3417 + C102 * C3410 + C3423 +
            C3423 + C90 * C3418 + C104 * C3411 + C3424 + C3424 + C91 * C3419 +
            C106 * C3412 + C3425 + C3425 + C92 * C3420) *
               C93706 * C93680 * C2696 -
           (C106 * C804 + C829 + C829 + C92 * C820 + C104 * C805 + C830 + C830 +
            C91 * C821 + C102 * C806 + C831 + C831 + C90 * C822 + C100 * C807 +
            C832 + C832 + C89 * C823) *
               C93706 * C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
             C14748 + C14748 + C93590 * C121) *
                C93706 * C14739 +
            (C15585 + C15586) * C93706 * C14740 + C15592 * C14741) *
               C2695 -
           ((C19120 + C19121) * C93706 * C14741 +
            (C19122 + C19123) * C93706 * C14740 +
            (C14744 * C1387 + C16406 + C16406 + C93590 * C1403 +
             C14742 * C1388 + C16407 + C16407 + C93815 * C1404) *
                C93706 * C14739) *
               C2696) *
              C1979 +
          (((C19123 + C19122) * C93706 * C14739 +
            (C19121 + C19120) * C93706 * C14740 +
            (C14742 * C19095 + C19110 + C19110 + C93815 * C19099 +
             C14744 * C19096 + C19111 + C19111 + C93590 * C19100) *
                C93706 * C14741) *
               C2696 -
           ((C15589 + C15590) * C93706 * C14741 +
            (C15588 + C15587) * C93706 * C14740 +
            (C15586 + C15585) * C93706 * C14739) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C101 +
            (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C93706 * C2695 -
           (C2785 * C92 + C2786 * C107 + C2787 * C91 + C2788 * C105 +
            C2789 * C90 + C2790 * C103 + (C188 * C1396 + C93680 * C1478) * C89 +
            (C188 * C1388 + C93680 * C1470) * C101) *
               C93706 * C2696) *
              C1979 +
          (((C188 * C3409 + C93680 * C3491) * C101 +
            (C188 * C3413 + C93680 * C3495) * C89 +
            (C188 * C3410 + C93680 * C3492) * C103 +
            (C188 * C3414 + C93680 * C3496) * C90 +
            (C188 * C3411 + C93680 * C3493) * C105 +
            (C188 * C3415 + C93680 * C3497) * C91 +
            (C188 * C3412 + C93680 * C3494) * C107 +
            (C188 * C3416 + C93680 * C3498) * C92) *
               C93706 * C2696 -
           (C2071 * C92 + C2072 * C107 + C2073 * C91 + C2074 * C105 +
            C2075 * C90 + C2076 * C103 + (C188 * C815 + C93680 * C897) * C89 +
            (C188 * C807 + C93680 * C889) * C101) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C91732 +
            (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
             C14840 * C816 + C14741 * C898) *
                C93815 +
            (C14866 + C14867 + C14868) * C91722 +
            (C14869 + C14870 + C14871) * C93590) *
               C93706 * C2695 -
           ((C18256 + C18257 + C18258) * C93590 +
            (C18259 + C18260 + C18261) * C91722 +
            (C14840 * C8523 + C14741 * C8648 + C14839 * C3413 + C14740 * C3495 +
             C14838 * C1396 + C14739 * C1478) *
                C93815 +
            (C14840 * C8520 + C14741 * C8645 + C14839 * C3409 + C14740 * C3491 +
             C14838 * C1388 + C14739 * C1470) *
                C91732) *
               C93706 * C2696) *
              C1979 +
          (((C14838 * C3409 + C14739 * C3491 + C14839 * C8520 + C14740 * C8645 +
             C14840 * C19095 + C14741 * C19221) *
                C91732 +
            (C14838 * C3413 + C14739 * C3495 + C14839 * C8523 + C14740 * C8648 +
             C14840 * C19097 + C14741 * C19223) *
                C93815 +
            (C14838 * C3410 + C14739 * C3492 + C14839 * C8521 + C14740 * C8646 +
             C14840 * C19096 + C14741 * C19222) *
                C91722 +
            (C14838 * C3414 + C14739 * C3496 + C14839 * C8524 + C14740 * C8649 +
             C14840 * C19098 + C14741 * C19224) *
                C93590) *
               C93706 * C2696 -
           ((C17270 + C17271 + C17272) * C93590 +
            (C17273 + C17274 + C17275) * C91722 +
            (C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
             C14838 * C815 + C14739 * C897) *
                C93815 +
            (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
             C14838 * C807 + C14739 * C889) *
                C91732) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C101 +
            (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C93680 * C2695 -
           (C2871 * C92 + C2872 * C107 + C2873 * C91 + C2874 * C105 +
            C2875 * C90 + C2876 * C103 + (C275 * C1396 + C93706 * C1544) * C89 +
            (C275 * C1388 + C93706 * C1536) * C101) *
               C93680 * C2696) *
              C1979 +
          (((C275 * C3409 + C93706 * C3565) * C101 +
            (C275 * C3413 + C93706 * C3569) * C89 +
            (C275 * C3410 + C93706 * C3566) * C103 +
            (C275 * C3414 + C93706 * C3570) * C90 +
            (C275 * C3411 + C93706 * C3567) * C105 +
            (C275 * C3415 + C93706 * C3571) * C91 +
            (C275 * C3412 + C93706 * C3568) * C107 +
            (C275 * C3416 + C93706 * C3572) * C92) *
               C93680 * C2696 -
           (C2157 * C92 + C2158 * C107 + C2159 * C91 + C2160 * C105 +
            C2161 * C90 + C2162 * C103 + (C275 * C815 + C93706 * C963) * C89 +
            (C275 * C807 + C93706 * C955) * C101) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C91732 +
             (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
             C306 * C93590) *
                C14739 +
            (C15749 + C15750 + C15751 + C15752) * C14740 + C15775 * C14741) *
               C2695 -
           ((C19328 + C19329 + C19340 + C19341) * C14741 +
            (C19334 + C19335 + C19336 + C19337) * C14740 +
            (C2875 * C93590 + C2876 * C91722 +
             (C275 * C1396 + C93706 * C1544) * C93815 +
             (C275 * C1388 + C93706 * C1536) * C91732) *
                C14739) *
               C2696) *
              C1979 +
          (((C19337 + C19336 + C19335 + C19334) * C14739 +
            (C19341 + C19340 + C19329 + C19328) * C14740 +
            ((C275 * C19095 + C93706 * C19323) * C91732 +
             (C275 * C19097 + C93706 * C19325) * C93815 +
             (C275 * C19096 + C93706 * C19324) * C91722 +
             (C275 * C19098 + C93706 * C19326) * C93590) *
                C14741) *
               C2696 -
           ((C15771 + C15772 + C15773 + C15774) * C14741 +
            (C15756 + C15755 + C15754 + C15753) * C14740 +
            (C15752 + C15751 + C15750 + C15749) * C14739) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C93680) *
               C93706 * C2695 -
           ((C107 * C1467 + C92 * C1599 + C105 * C1468 + C91 * C1600 +
             C103 * C1469 + C90 * C1601 + C101 * C1470 + C89 * C1602) *
                C93680 +
            (C107 * C1385 + C92 * C1393 + C105 * C1386 + C91 * C1394 +
             C103 * C1387 + C90 * C1395 + C101 * C1388 + C89 * C1396) *
                C188) *
               C93706 * C2696) *
              C1979 +
          (((C101 * C3409 + C89 * C3413 + C103 * C3410 + C90 * C3414 +
             C105 * C3411 + C91 * C3415 + C107 * C3412 + C92 * C3416) *
                C188 +
            (C101 * C3491 + C89 * C3639 + C103 * C3492 + C90 * C3640 +
             C105 * C3493 + C91 * C3641 + C107 * C3494 + C92 * C3642) *
                C93680) *
               C93706 * C2696 -
           ((C107 * C886 + C92 * C1018 + C105 * C887 + C91 * C1019 +
             C103 * C888 + C90 * C1020 + C101 * C889 + C89 * C1021) *
                C93680 +
            (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
             C90 * C814 + C101 * C807 + C89 * C815) *
                C188) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C14838 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C14739 +
            (C15876 + C15877) * C14839 + (C15878 + C15879) * C14740 +
            C15888 * C14840 + C15889 * C14741) *
               C93706 * C2695 -
           ((C19458 + C19459) * C14741 + (C19460 + C19461) * C14840 +
            (C19462 + C19463) * C14740 + (C19464 + C19465) * C14839 +
            (C91722 * C1469 + C93590 * C1601 + C91732 * C1470 +
             C93815 * C1602) *
                C14739 +
            (C91722 * C1387 + C93590 * C1395 + C91732 * C1388 +
             C93815 * C1396) *
                C14838) *
               C93706 * C2696) *
              C1979 +
          (((C19465 + C19464) * C14838 + (C19463 + C19462) * C14739 +
            (C19461 + C19460) * C14839 + (C19459 + C19458) * C14740 +
            (C91732 * C19095 + C93815 * C19097 + C91722 * C19096 +
             C93590 * C19098) *
                C14840 +
            (C91732 * C19221 + C93815 * C19439 + C91722 * C19222 +
             C93590 * C19440) *
                C14741) *
               C93706 * C2696 -
           ((C15884 + C15885) * C14741 + (C15886 + C15887) * C14840 +
            (C15883 + C15882) * C14740 + (C15881 + C15880) * C14839 +
            (C15879 + C15878) * C14739 + (C15877 + C15876) * C14838) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[61] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C418 * C108 + C426 + C426 + C93680 * C419) * C89 +
                      C448 * C90 + C449 * C91 + C450 * C92) *
                         C93706 * C2695 -
                     (C3024 * C92 + C3025 * C91 + C3026 * C90 +
                      (C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C89) *
                         C93706 * C2696) *
                        C1979 +
                    (((C418 * C3409 + C3714 + C3714 + C93680 * C3709) * C89 +
                      (C418 * C3410 + C3715 + C3715 + C93680 * C3710) * C90 +
                      (C418 * C3411 + C3716 + C3716 + C93680 * C3711) * C91 +
                      (C418 * C3412 + C3717 + C3717 + C93680 * C3712) * C92) *
                         C93706 * C2696 -
                     (C2310 * C92 + C2311 * C91 + C2312 * C90 +
                      (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C89) *
                         C93706 * C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C15099 * C108 + C15103 + C15103 + C14739 * C419 +
                       C15100 * C807 + C15104 + C15104 + C14740 * C1079 +
                       C15101 * C808 + C15105 + C15105 + C14741 * C1080) *
                          C93815 +
                      (C15139 + C15140 + C15141) * C93590) *
                         C93706 * C2695 -
                     ((C18577 + C18578 + C18579) * C93590 +
                      (C15101 * C8520 + C16725 + C16725 + C14741 * C8984 +
                       C15100 * C3409 + C16726 + C16726 + C14740 * C3709 +
                       C15099 * C1388 + C16727 + C16727 + C14739 * C1660) *
                          C93815) *
                         C93706 * C2696) *
                        C1979 +
                    (((C15099 * C3409 + C19566 + C19566 + C14739 * C3709 +
                       C15100 * C8520 + C19567 + C19567 + C14740 * C8984 +
                       C15101 * C19095 + C19568 + C19568 + C14741 * C19563) *
                          C93815 +
                      (C15099 * C3410 + C19569 + C19569 + C14739 * C3710 +
                       C15100 * C8521 + C19570 + C19570 + C14740 * C8985 +
                       C15101 * C19096 + C19571 + C19571 + C14741 * C19564) *
                          C93590) *
                         C93706 * C2696 -
                     ((C17617 + C17618 + C17619) * C93590 +
                      (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 +
                       C15100 * C808 + C15970 + C15970 + C14740 * C1080 +
                       C15099 * C807 + C15971 + C15971 + C14739 * C1079) *
                          C93815) *
                         C93706 * C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C188 +
             (C275 * C189 + C93706 * C501) * C93680) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C2695 -
           ((C3106 + C3096) * C92 + (C3107 + C3099) * C91 +
            (C3108 + C3102) * C90 +
            ((C275 * C1470 + C93706 * C1726) * C93680 +
             (C275 * C1388 + C93706 * C1536) * C188) *
                C89) *
               C2696) *
              C1979 +
          ((((C275 * C3409 + C93706 * C3565) * C188 +
             (C275 * C3491 + C93706 * C3783) * C93680) *
                C89 +
            ((C275 * C3410 + C93706 * C3566) * C188 +
             (C275 * C3492 + C93706 * C3784) * C93680) *
                C90 +
            ((C275 * C3411 + C93706 * C3567) * C188 +
             (C275 * C3493 + C93706 * C3785) * C93680) *
                C91 +
            ((C275 * C3412 + C93706 * C3568) * C188 +
             (C275 * C3494 + C93706 * C3786) * C93680) *
                C92) *
               C2696 -
           ((C2392 + C2382) * C92 + (C2393 + C2385) * C91 +
            (C2394 + C2388) * C90 +
            ((C275 * C889 + C93706 * C1145) * C93680 +
             (C275 * C807 + C93706 * C955) * C188) *
                C89) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C14838 +
             (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
             C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
                C93815 +
            (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
               C2695 -
           ((C18686 + C18680 + C18681 + C18682 + C18683 + C18684) * C93590 +
            (C19674 * C14741 + C19339 * C14840 + C9097 * C14740 +
             C8765 * C14839 + (C275 * C1470 + C93706 * C1726) * C14739 +
             (C275 * C1388 + C93706 * C1536) * C14838) *
                C93815) *
               C2696) *
              C1979 +
          (((C8765 * C14838 + C9097 * C14739 + C19339 * C14839 +
             C19674 * C14740 + (C275 * C19095 + C93706 * C19323) * C14840 +
             (C275 * C19221 + C93706 * C19669) * C14741) *
                C93815 +
            (C7772 * C14838 + C8100 * C14739 + C18365 * C14839 +
             C18685 * C14740 + (C275 * C19096 + C93706 * C19324) * C14840 +
             (C275 * C19222 + C93706 * C19670) * C14741) *
                C93590) *
               C2696 -
           ((C17718 + C17719 + C17720 + C17721 + C17722 + C17723) * C93590 +
            (C16059 * C14741 + C15769 * C14840 + C5429 * C14740 +
             C5130 * C14839 + C5426 * C14739 + C5123 * C14838) *
                C93815) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C93706) *
               C93680 * C2695 -
           ((C107 * C1533 + C92 * C1781 + C105 * C1534 + C91 * C1782 +
             C103 * C1535 + C90 * C1783 + C101 * C1536 + C89 * C1784) *
                C93706 +
            (C107 * C1385 + C92 * C1393 + C105 * C1386 + C91 * C1394 +
             C103 * C1387 + C90 * C1395 + C101 * C1388 + C89 * C1396) *
                C275) *
               C93680 * C2696) *
              C1979 +
          (((C101 * C3409 + C89 * C3413 + C103 * C3410 + C90 * C3414 +
             C105 * C3411 + C91 * C3415 + C107 * C3412 + C92 * C3416) *
                C275 +
            (C101 * C3565 + C89 * C3853 + C103 * C3566 + C90 * C3854 +
             C105 * C3567 + C91 * C3855 + C107 * C3568 + C92 * C3856) *
                C93706) *
               C93680 * C2696 -
           ((C107 * C952 + C92 * C1200 + C105 * C953 + C91 * C1201 +
             C103 * C954 + C90 * C1202 + C101 * C955 + C89 * C1203) *
                C93706 +
            (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
             C90 * C814 + C101 * C807 + C89 * C815) *
                C275) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C275 +
             (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                 C93706) *
                C14739 +
            ((C15876 + C15877) * C275 + (C16149 + C16150) * C93706) * C14740 +
            C16157 * C14741) *
               C2695 -
           (((C19783 + C19784) * C93706 + (C19460 + C19461) * C275) * C14741 +
            ((C19785 + C19786) * C93706 + (C19464 + C19465) * C275) * C14740 +
            ((C91722 * C1535 + C93590 * C1783 + C91732 * C1536 +
              C93815 * C1784) *
                 C93706 +
             (C91722 * C1387 + C93590 * C1395 + C91732 * C1388 +
              C93815 * C1396) *
                 C275) *
                C14739) *
               C2696) *
              C1979 +
          ((((C19465 + C19464) * C275 + (C19786 + C19785) * C93706) * C14739 +
            ((C19461 + C19460) * C275 + (C19784 + C19783) * C93706) * C14740 +
            ((C91732 * C19095 + C93815 * C19097 + C91722 * C19096 +
              C93590 * C19098) *
                 C275 +
             (C91732 * C19323 + C93815 * C19772 + C91722 * C19324 +
              C93590 * C19773) *
                 C93706) *
                C14741) *
               C2696 -
           (((C16153 + C16154) * C93706 + (C15886 + C15887) * C275) * C14741 +
            ((C16152 + C16151) * C93706 + (C15881 + C15880) * C275) * C14740 +
            ((C16150 + C16149) * C93706 + (C15877 + C15876) * C275) * C14739) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[61] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C188 * C108 + C93680 * C189) * C275 +
                       (C188 * C276 + C93680 * C635) * C93706) *
                          C89 +
                      (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                         C2695 -
                     ((C3255 + C3245) * C92 + (C3256 + C3248) * C91 +
                      (C3257 + C3251) * C90 +
                      ((C188 * C1536 + C93680 * C1842) * C93706 +
                       (C188 * C1388 + C93680 * C1470) * C275) *
                          C89) *
                         C2696) *
                        C1979 +
                    ((((C188 * C3409 + C93680 * C3491) * C275 +
                       (C188 * C3565 + C93680 * C3923) * C93706) *
                          C89 +
                      ((C188 * C3410 + C93680 * C3492) * C275 +
                       (C188 * C3566 + C93680 * C3924) * C93706) *
                          C90 +
                      ((C188 * C3411 + C93680 * C3493) * C275 +
                       (C188 * C3567 + C93680 * C3925) * C93706) *
                          C91 +
                      ((C188 * C3412 + C93680 * C3494) * C275 +
                       (C188 * C3568 + C93680 * C3926) * C93706) *
                          C92) *
                         C2696 -
                     ((C2541 + C2531) * C92 + (C2542 + C2534) * C91 +
                      (C2543 + C2537) * C90 +
                      ((C188 * C955 + C93680 * C1261) * C93706 +
                       (C188 * C807 + C93680 * C889) * C275) *
                          C89) *
                         C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C14838 * C108 + C14739 * C189 + C14839 * C807 +
                        C14740 * C889 + C14840 * C808 + C14741 * C890) *
                           C275 +
                       (C14838 * C276 + C14739 * C635 + C14839 * C955 +
                        C14740 * C1261 + C14840 * C956 + C14741 * C1262) *
                           C93706) *
                          C93815 +
                      ((C14866 + C14867 + C14868) * C275 +
                       (C15391 + C15392 + C15393) * C93706) *
                          C93590) *
                         C2695 -
                     (((C18889 + C18890 + C18891) * C93706 +
                       (C18259 + C18260 + C18261) * C275) *
                          C93590 +
                      ((C14840 * C8749 + C14741 * C9305 + C14839 * C3565 +
                        C14740 * C3923 + C14838 * C1536 + C14739 * C1842) *
                           C93706 +
                       (C14840 * C8520 + C14741 * C8645 + C14839 * C3409 +
                        C14740 * C3491 + C14838 * C1388 + C14739 * C1470) *
                           C275) *
                          C93815) *
                         C2696) *
                        C1979 +
                    ((((C14838 * C3409 + C14739 * C3491 + C14839 * C8520 +
                        C14740 * C8645 + C14840 * C19095 + C14741 * C19221) *
                           C275 +
                       (C14838 * C3565 + C14739 * C3923 + C14839 * C8749 +
                        C14740 * C9305 + C14840 * C19323 + C14741 * C19884) *
                           C93706) *
                          C93815 +
                      ((C14838 * C3410 + C14739 * C3492 + C14839 * C8521 +
                        C14740 * C8646 + C14840 * C19096 + C14741 * C19222) *
                           C275 +
                       (C14838 * C3566 + C14739 * C3924 + C14839 * C8750 +
                        C14740 * C9306 + C14840 * C19324 + C14741 * C19885) *
                           C93706) *
                          C93590) *
                         C2696 -
                     (((C17938 + C17939 + C17940) * C93706 +
                       (C17273 + C17274 + C17275) * C275) *
                          C93590 +
                      ((C14840 * C5096 + C14741 * C5598 + C14839 * C956 +
                        C14740 * C1262 + C14838 * C955 + C14739 * C1261) *
                           C93706 +
                       (C14840 * C4897 + C14741 * C5016 + C14839 * C808 +
                        C14740 * C890 + C14838 * C807 + C14739 * C889) *
                           C275) *
                          C93815) *
                         C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C2695 -
           (C3341 * C92 + C3342 * C91 + C3343 * C90 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93680 * C89) *
               C2696) *
              C1979 +
          (((C713 * C3409 + C3998 + C3998 + C93706 * C3993) * C93680 * C89 +
            (C713 * C3410 + C3999 + C3999 + C93706 * C3994) * C93680 * C90 +
            (C713 * C3411 + C4000 + C4000 + C93706 * C3995) * C93680 * C91 +
            (C713 * C3412 + C4001 + C4001 + C93706 * C3996) * C93680 * C92) *
               C2696 -
           (C2627 * C92 + C2628 * C91 + C2629 * C90 +
            (C713 * C807 + C1328 + C1328 + C93706 * C1319) * C93680 * C89) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
             C5698 * C14740 + C5701 * C14741) *
                C93815 +
            (C15471 + C15472 + C15473) * C93590) *
               C2695 -
           ((C18997 + C18992 + C18993) * C93590 +
            (C19993 * C14741 + C9417 * C14740 +
             (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C14739) *
                C93815) *
               C2696) *
              C1979 +
          (((C9417 * C14739 + C19993 * C14740 +
             (C713 * C19095 + C19989 + C19989 + C93706 * C19984) * C14741) *
                C93815 +
            (C8420 * C14739 + C18996 * C14740 +
             (C713 * C19096 + C19990 + C19990 + C93706 * C19985) * C14741) *
                C93590) *
               C2696 -
           ((C18039 + C18040 + C18041) * C93590 +
            (C16321 * C14741 + C5701 * C14740 + C5698 * C14739) * C93815) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
           C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
           C130 + C130 + C92 * C123) *
              C93706 * C93680 * C93639 * C800 -
          (C106 * C804 + C829 + C829 + C92 * C820 + C104 * C805 + C830 + C830 +
           C91 * C821 + C102 * C806 + C831 + C831 + C90 * C822 + C100 * C807 +
           C832 + C832 + C89 * C823) *
              C93706 * C93680 * C93639 * C801 +
          (C100 * C808 + C833 + C833 + C89 * C824 + C102 * C809 + C834 + C834 +
           C90 * C825 + C104 * C810 + C835 + C835 + C91 * C826 + C106 * C811 +
           C836 + C836 + C92 * C827) *
              C93706 * C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
           C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
           C130 + C130 + C92 * C123) *
              C93706 * C93680 * C93639 * C93625 * C97 -
          (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 + C132 + C132 +
           C91 * C123 + C102 * C110 + C133 + C133 + C90 * C122 + C100 * C109 +
           C134 + C134 + C89 * C121) *
              C93706 * C93680 * C93639 * C93625 * C98 +
          (C100 * C110 + C135 + C135 + C89 * C122 + C102 * C111 + C136 + C136 +
           C90 * C123 + C104 * C112 + C137 + C137 + C91 * C124 + C106 * C113 +
           C138 + C138 + C92 * C125) *
              C93706 * C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
           C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
           C130 + C130 + C92 * C123) *
              C93706 * C93680 * C1382 -
          (C106 * C1385 + C1410 + C1410 + C92 * C1401 + C104 * C1386 + C1411 +
           C1411 + C91 * C1402 + C102 * C1387 + C1412 + C1412 + C90 * C1403 +
           C100 * C1388 + C1413 + C1413 + C89 * C1404) *
              C93706 * C93680 * C1383 +
          (C100 * C1389 + C1414 + C1414 + C89 * C1405 + C102 * C1390 + C1415 +
           C1415 + C90 * C1406 + C104 * C1391 + C1416 + C1416 + C91 * C1407 +
           C106 * C1392 + C1417 + C1417 + C92 * C1408) *
              C93706 * C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
            C14748 + C14748 + C93590 * C121) *
               C93706 * C14739 +
           (C14742 * C807 + C14749 + C14749 + C93815 * C823 + C14744 * C806 +
            C14750 + C14750 + C93590 * C822) *
               C93706 * C14740 +
           (C14742 * C808 + C14751 + C14751 + C93815 * C824 + C14744 * C809 +
            C14752 + C14752 + C93590 * C825) *
               C93706 * C14741) *
              C93639 * C93625 * C97 -
          ((C14744 * C810 + C14753 + C14753 + C93590 * C826 + C14742 * C809 +
            C14754 + C14754 + C93815 * C825) *
               C93706 * C14741 +
           (C14744 * C805 + C14755 + C14755 + C93590 * C821 + C14742 * C806 +
            C14756 + C14756 + C93815 * C822) *
               C93706 * C14740 +
           (C14744 * C110 + C14757 + C14757 + C93590 * C122 + C14742 * C109 +
            C14758 + C14758 + C93815 * C121) *
               C93706 * C14739) *
              C93639 * C93625 * C98 +
          ((C14742 * C110 + C14759 + C14759 + C93815 * C122 + C14744 * C111 +
            C14760 + C14760 + C93590 * C123) *
               C93706 * C14739 +
           (C14742 * C805 + C14761 + C14761 + C93815 * C821 + C14744 * C804 +
            C14762 + C14762 + C93590 * C820) *
               C93706 * C14740 +
           (C14742 * C810 + C14763 + C14763 + C93815 * C826 + C14744 * C811 +
            C14764 + C14764 + C93590 * C827) *
               C93706 * C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
            C14748 + C14748 + C93590 * C121) *
               C93706 * C14739 +
           (C15585 + C15586) * C93706 * C14740 + C15592 * C14741) *
              C93639 * C800 -
          ((C15589 + C15590) * C93706 * C14741 +
           (C15588 + C15587) * C93706 * C14740 +
           (C15586 + C15585) * C93706 * C14739) *
              C93639 * C801 +
          (C15592 * C14739 + (C15590 + C15589) * C93706 * C14740 +
           (C14742 * C15550 + C15571 + C15571 + C93815 * C15554 +
            C14744 * C15551 + C15572 + C15572 + C93590 * C15555) *
               C93706 * C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
            C14748 + C14748 + C93590 * C121) *
               C93706 * C14739 +
           (C15585 + C15586) * C93706 * C14740 + C15592 * C14741) *
              C1382 -
          ((C14744 * C8521 + C16402 + C16402 + C93590 * C8527 + C14742 * C8520 +
            C16403 + C16403 + C93815 * C8526) *
               C93706 * C14741 +
           (C14744 * C3410 + C16404 + C16404 + C93590 * C3418 + C14742 * C3409 +
            C16405 + C16405 + C93815 * C3417) *
               C93706 * C14740 +
           (C14744 * C1387 + C16406 + C16406 + C93590 * C1403 + C14742 * C1388 +
            C16407 + C16407 + C93815 * C1404) *
               C93706 * C14739) *
              C1383 +
          ((C14742 * C1389 + C16408 + C16408 + C93815 * C1405 + C14744 * C1390 +
            C16409 + C16409 + C93590 * C1406) *
               C93706 * C14739 +
           (C14742 * C5775 + C16410 + C16410 + C93815 * C5781 + C14744 * C5776 +
            C16411 + C16411 + C93590 * C5782) *
               C93706 * C14740 +
           (C14742 * C16395 + C16412 + C16412 + C93815 * C16399 +
            C14744 * C16396 + C16413 + C16413 + C93590 * C16400) *
               C93706 * C14741) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C101 +
           (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C93706 * C93639 * C800 -
          ((C188 * C812 + C93680 * C894) * C92 +
           (C188 * C804 + C93680 * C886) * C107 +
           (C188 * C813 + C93680 * C895) * C91 +
           (C188 * C805 + C93680 * C887) * C105 +
           (C188 * C814 + C93680 * C896) * C90 +
           (C188 * C806 + C93680 * C888) * C103 +
           (C188 * C815 + C93680 * C897) * C89 +
           (C188 * C807 + C93680 * C889) * C101) *
              C93706 * C93639 * C801 +
          ((C188 * C808 + C93680 * C890) * C101 +
           (C188 * C816 + C93680 * C898) * C89 +
           (C188 * C809 + C93680 * C891) * C103 +
           (C188 * C817 + C93680 * C899) * C90 +
           (C188 * C810 + C93680 * C892) * C105 +
           (C188 * C818 + C93680 * C900) * C91 +
           (C188 * C811 + C93680 * C893) * C107 +
           (C188 * C819 + C93680 * C901) * C92) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C101 +
           (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C93706 * C93639 * C93625 * C97 -
          (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
           C220 * C103 + C219 * C89 + C218 * C101) *
              C93706 * C93639 * C93625 * C98 +
          (C220 * C101 + C221 * C89 + C222 * C103 + C223 * C90 + C225 * C105 +
           C224 * C91 + (C188 * C113 + C93680 * C194) * C107 +
           (C188 * C119 + C93680 * C200) * C92) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C101 +
           (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C93706 * C1382 -
          ((C188 * C1393 + C93680 * C1475) * C92 +
           (C188 * C1385 + C93680 * C1467) * C107 +
           (C188 * C1394 + C93680 * C1476) * C91 +
           (C188 * C1386 + C93680 * C1468) * C105 +
           (C188 * C1395 + C93680 * C1477) * C90 +
           (C188 * C1387 + C93680 * C1469) * C103 +
           (C188 * C1396 + C93680 * C1478) * C89 +
           (C188 * C1388 + C93680 * C1470) * C101) *
              C93706 * C1383 +
          ((C188 * C1389 + C93680 * C1471) * C101 +
           (C188 * C1397 + C93680 * C1479) * C89 +
           (C188 * C1390 + C93680 * C1472) * C103 +
           (C188 * C1398 + C93680 * C1480) * C90 +
           (C188 * C1391 + C93680 * C1473) * C105 +
           (C188 * C1399 + C93680 * C1481) * C91 +
           (C188 * C1392 + C93680 * C1474) * C107 +
           (C188 * C1400 + C93680 * C1482) * C92) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C91732 +
           (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
            C14840 * C816 + C14741 * C898) *
               C93815 +
           (C14866 + C14867 + C14868) * C91722 +
           (C14869 + C14870 + C14871) * C93590) *
              C93706 * C93639 * C93625 * C97 -
          ((C14872 + C14873 + C14874) * C93590 +
           (C14875 + C14876 + C14877) * C91722 +
           (C14871 + C14870 + C14869) * C93815 +
           (C14868 + C14867 + C14866) * C91732) *
              C93706 * C93639 * C93625 * C98 +
          ((C14877 + C14876 + C14875) * C91732 +
           (C14874 + C14873 + C14872) * C93815 +
           (C14838 * C111 + C14739 * C192 + C14839 * C804 + C14740 * C886 +
            C14840 * C811 + C14741 * C893) *
               C91722 +
           (C14838 * C117 + C14739 * C198 + C14839 * C812 + C14740 * C894 +
            C14840 * C819 + C14741 * C901) *
               C93590) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C91732 +
           (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
            C14840 * C816 + C14741 * C898) *
               C93815 +
           (C14866 + C14867 + C14868) * C91722 +
           (C14869 + C14870 + C14871) * C93590) *
              C93706 * C93639 * C800 -
          ((C14840 * C4901 + C14741 * C5020 + C14839 * C817 + C14740 * C899 +
            C14838 * C814 + C14739 * C896) *
               C93590 +
           (C14840 * C4898 + C14741 * C5017 + C14839 * C809 + C14740 * C891 +
            C14838 * C806 + C14739 * C888) *
               C91722 +
           (C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
            C14838 * C815 + C14739 * C897) *
               C93815 +
           (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
            C14838 * C807 + C14739 * C889) *
               C91732) *
              C93706 * C93639 * C801 +
          ((C14838 * C808 + C14739 * C890 + C14839 * C4897 + C14740 * C5016 +
            C14840 * C15550 + C14741 * C15666) *
               C91732 +
           (C14838 * C816 + C14739 * C898 + C14839 * C4900 + C14740 * C5019 +
            C14840 * C15552 + C14741 * C15668) *
               C93815 +
           (C14838 * C809 + C14739 * C891 + C14839 * C4898 + C14740 * C5017 +
            C14840 * C15551 + C14741 * C15667) *
               C91722 +
           (C14838 * C817 + C14739 * C899 + C14839 * C4901 + C14740 * C5020 +
            C14840 * C15553 + C14741 * C15669) *
               C93590) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C91732 +
           (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
            C14840 * C816 + C14741 * C898) *
               C93815 +
           (C14866 + C14867 + C14868) * C91722 +
           (C14869 + C14870 + C14871) * C93590) *
              C93706 * C1382 -
          ((C14840 * C8524 + C14741 * C8649 + C14839 * C3414 + C14740 * C3496 +
            C14838 * C1395 + C14739 * C1477) *
               C93590 +
           (C14840 * C8521 + C14741 * C8646 + C14839 * C3410 + C14740 * C3492 +
            C14838 * C1387 + C14739 * C1469) *
               C91722 +
           (C14840 * C8523 + C14741 * C8648 + C14839 * C3413 + C14740 * C3495 +
            C14838 * C1396 + C14739 * C1478) *
               C93815 +
           (C14840 * C8520 + C14741 * C8645 + C14839 * C3409 + C14740 * C3491 +
            C14838 * C1388 + C14739 * C1470) *
               C91732) *
              C93706 * C1383 +
          ((C14838 * C1389 + C14739 * C1471 + C14839 * C5775 + C14740 * C5870 +
            C14840 * C16395 + C14741 * C16487) *
               C91732 +
           (C14838 * C1397 + C14739 * C1479 + C14839 * C5778 + C14740 * C5873 +
            C14840 * C16397 + C14741 * C16489) *
               C93815 +
           (C14838 * C1390 + C14739 * C1472 + C14839 * C5776 + C14740 * C5871 +
            C14840 * C16396 + C14741 * C16488) *
               C91722 +
           (C14838 * C1398 + C14739 * C1480 + C14839 * C5779 + C14740 * C5874 +
            C14840 * C16398 + C14741 * C16490) *
               C93590) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C101 +
           (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C93680 * C93639 * C800 -
          ((C275 * C812 + C93706 * C960) * C92 +
           (C275 * C804 + C93706 * C952) * C107 +
           (C275 * C813 + C93706 * C961) * C91 +
           (C275 * C805 + C93706 * C953) * C105 +
           (C275 * C814 + C93706 * C962) * C90 +
           (C275 * C806 + C93706 * C954) * C103 +
           (C275 * C815 + C93706 * C963) * C89 +
           (C275 * C807 + C93706 * C955) * C101) *
              C93680 * C93639 * C801 +
          ((C275 * C808 + C93706 * C956) * C101 +
           (C275 * C816 + C93706 * C964) * C89 +
           (C275 * C809 + C93706 * C957) * C103 +
           (C275 * C817 + C93706 * C965) * C90 +
           (C275 * C810 + C93706 * C958) * C105 +
           (C275 * C818 + C93706 * C966) * C91 +
           (C275 * C811 + C93706 * C959) * C107 +
           (C275 * C819 + C93706 * C967) * C92) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C101 +
           (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C93680 * C93639 * C93625 * C97 -
          (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
           C307 * C103 + C306 * C89 + C305 * C101) *
              C93680 * C93639 * C93625 * C98 +
          (C307 * C101 + C308 * C89 + C309 * C103 + C310 * C90 + C312 * C105 +
           C311 * C91 + (C275 * C113 + C93706 * C281) * C107 +
           (C275 * C119 + C93706 * C287) * C92) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C101 +
           (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C93680 * C1382 -
          ((C275 * C1393 + C93706 * C1541) * C92 +
           (C275 * C1385 + C93706 * C1533) * C107 +
           (C275 * C1394 + C93706 * C1542) * C91 +
           (C275 * C1386 + C93706 * C1534) * C105 +
           (C275 * C1395 + C93706 * C1543) * C90 +
           (C275 * C1387 + C93706 * C1535) * C103 +
           (C275 * C1396 + C93706 * C1544) * C89 +
           (C275 * C1388 + C93706 * C1536) * C101) *
              C93680 * C1383 +
          ((C275 * C1389 + C93706 * C1537) * C101 +
           (C275 * C1397 + C93706 * C1545) * C89 +
           (C275 * C1390 + C93706 * C1538) * C103 +
           (C275 * C1398 + C93706 * C1546) * C90 +
           (C275 * C1391 + C93706 * C1539) * C105 +
           (C275 * C1399 + C93706 * C1547) * C91 +
           (C275 * C1392 + C93706 * C1540) * C107 +
           (C275 * C1400 + C93706 * C1548) * C92) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C91732 +
            (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
            C306 * C93590) *
               C14739 +
           (C5123 * C91732 + C5124 * C93815 + C2162 * C91722 + C2161 * C93590) *
               C14740 +
           (C5130 * C91732 + C5129 * C93815 + C5128 * C91722 + C5127 * C93590) *
               C14741) *
              C93639 * C93625 * C97 -
          ((C5125 * C93590 + C5126 * C91722 + C5127 * C93815 + C5128 * C91732) *
               C14741 +
           (C2159 * C93590 + C2160 * C91722 + C2161 * C93815 + C2162 * C91732) *
               C14740 +
           (C308 * C93590 + C307 * C91722 + C306 * C93815 + C305 * C91732) *
               C14739) *
              C93639 * C93625 * C98 +
          ((C307 * C91732 + C308 * C93815 + C309 * C91722 + C310 * C93590) *
               C14739 +
           (C2160 * C91732 + C2159 * C93815 + C2158 * C91722 + C2157 * C93590) *
               C14740 +
           (C5126 * C91732 + C5125 * C93815 +
            (C275 * C811 + C93706 * C959) * C91722 +
            (C275 * C819 + C93706 * C967) * C93590) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C91732 +
            (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
            C306 * C93590) *
               C14739 +
           (C15749 + C15750 + C15751 + C15752) * C14740 + C15775 * C14741) *
              C93639 * C800 -
          ((C15771 + C15772 + C15773 + C15774) * C14741 +
           (C15756 + C15755 + C15754 + C15753) * C14740 +
           (C15752 + C15751 + C15750 + C15749) * C14739) *
              C93639 * C801 +
          (C15775 * C14739 + (C15774 + C15773 + C15772 + C15771) * C14740 +
           ((C275 * C15550 + C93706 * C15744) * C91732 +
            (C275 * C15552 + C93706 * C15746) * C93815 +
            (C275 * C15551 + C93706 * C15745) * C91722 +
            (C275 * C15553 + C93706 * C15747) * C93590) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C91732 +
            (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
            C306 * C93590) *
               C14739 +
           (C15749 + C15750 + C15751 + C15752) * C14740 + C15775 * C14741) *
              C1382 -
          (((C275 * C8524 + C93706 * C8753) * C93590 +
            (C275 * C8521 + C93706 * C8750) * C91722 +
            (C275 * C8523 + C93706 * C8752) * C93815 +
            (C275 * C8520 + C93706 * C8749) * C91732) *
               C14741 +
           (C7771 * C93590 + C7772 * C91722 + C8764 * C93815 + C8765 * C91732) *
               C14740 +
           (C2875 * C93590 + C2876 * C91722 +
            (C275 * C1396 + C93706 * C1544) * C93815 +
            (C275 * C1388 + C93706 * C1536) * C91732) *
               C14739) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C91732 +
            (C275 * C1397 + C93706 * C1545) * C93815 +
            (C275 * C1390 + C93706 * C1538) * C91722 +
            (C275 * C1398 + C93706 * C1546) * C93590) *
               C14739 +
           ((C275 * C5775 + C93706 * C5950) * C91732 +
            (C275 * C5778 + C93706 * C5953) * C93815 +
            (C275 * C5776 + C93706 * C5951) * C91722 +
            (C275 * C5779 + C93706 * C5954) * C93590) *
               C14740 +
           ((C275 * C16395 + C93706 * C16565) * C91732 +
            (C275 * C16397 + C93706 * C16567) * C93815 +
            (C275 * C16396 + C93706 * C16566) * C91722 +
            (C275 * C16398 + C93706 * C16568) * C93590) *
               C14741) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C93680) *
              C93706 * C93639 * C800 -
          ((C107 * C886 + C92 * C1018 + C105 * C887 + C91 * C1019 +
            C103 * C888 + C90 * C1020 + C101 * C889 + C89 * C1021) *
               C93680 +
           (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
            C90 * C814 + C101 * C807 + C89 * C815) *
               C188) *
              C93706 * C93639 * C801 +
          ((C101 * C808 + C89 * C816 + C103 * C809 + C90 * C817 + C105 * C810 +
            C91 * C818 + C107 * C811 + C92 * C819) *
               C188 +
           (C101 * C890 + C89 * C1022 + C103 * C891 + C90 * C1023 +
            C105 * C892 + C91 * C1024 + C107 * C893 + C92 * C1025) *
               C93680) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C93680) *
              C93706 * C93639 * C93625 * C97 -
          ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
            C90 * C364 + C101 * C190 + C89 * C363) *
               C93680 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C188) *
              C93706 * C93639 * C93625 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C188 +
           (C101 * C191 + C89 * C364 + C103 * C192 + C90 * C365 + C105 * C193 +
            C91 * C366 + C107 * C194 + C92 * C367) *
               C93680) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C93680) *
              C93706 * C1382 -
          ((C107 * C1467 + C92 * C1599 + C105 * C1468 + C91 * C1600 +
            C103 * C1469 + C90 * C1601 + C101 * C1470 + C89 * C1602) *
               C93680 +
           (C107 * C1385 + C92 * C1393 + C105 * C1386 + C91 * C1394 +
            C103 * C1387 + C90 * C1395 + C101 * C1388 + C89 * C1396) *
               C188) *
              C93706 * C1383 +
          ((C101 * C1389 + C89 * C1397 + C103 * C1390 + C90 * C1398 +
            C105 * C1391 + C91 * C1399 + C107 * C1392 + C92 * C1400) *
               C188 +
           (C101 * C1471 + C89 * C1603 + C103 * C1472 + C90 * C1604 +
            C105 * C1473 + C91 * C1605 + C107 * C1474 + C92 * C1606) *
               C93680) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C14838 +
           (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
               C14739 +
           (C91732 * C807 + C93815 * C815 + C91722 * C806 + C93590 * C814) *
               C14839 +
           (C91732 * C889 + C93815 * C1021 + C91722 * C888 + C93590 * C1020) *
               C14740 +
           (C91732 * C808 + C93815 * C816 + C91722 * C809 + C93590 * C817) *
               C14840 +
           (C91732 * C890 + C93815 * C1022 + C91722 * C891 + C93590 * C1023) *
               C14741) *
              C93706 * C93639 * C93625 * C97 -
          ((C91722 * C892 + C93590 * C1024 + C91732 * C891 + C93815 * C1023) *
               C14741 +
           (C91722 * C810 + C93590 * C818 + C91732 * C809 + C93815 * C817) *
               C14840 +
           (C91722 * C887 + C93590 * C1019 + C91732 * C888 + C93815 * C1020) *
               C14740 +
           (C91722 * C805 + C93590 * C813 + C91732 * C806 + C93815 * C814) *
               C14839 +
           (C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
               C14739 +
           (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
               C14838) *
              C93706 * C93639 * C93625 * C98 +
          ((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
               C14838 +
           (C91732 * C191 + C93815 * C364 + C91722 * C192 + C93590 * C365) *
               C14739 +
           (C91732 * C805 + C93815 * C813 + C91722 * C804 + C93590 * C812) *
               C14839 +
           (C91732 * C887 + C93815 * C1019 + C91722 * C886 + C93590 * C1018) *
               C14740 +
           (C91732 * C810 + C93815 * C818 + C91722 * C811 + C93590 * C819) *
               C14840 +
           (C91732 * C892 + C93815 * C1024 + C91722 * C893 + C93590 * C1025) *
               C14741) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C14838 +
           (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
               C14739 +
           (C15876 + C15877) * C14839 + (C15878 + C15879) * C14740 +
           C15888 * C14840 + C15889 * C14741) *
              C93706 * C93639 * C800 -
          ((C15884 + C15885) * C14741 + (C15886 + C15887) * C14840 +
           (C15883 + C15882) * C14740 + (C15881 + C15880) * C14839 +
           (C15879 + C15878) * C14739 + (C15877 + C15876) * C14838) *
              C93706 * C93639 * C801 +
          (C15888 * C14838 + C15889 * C14739 + (C15887 + C15886) * C14839 +
           (C15885 + C15884) * C14740 +
           (C91732 * C15550 + C93815 * C15552 + C91722 * C15551 +
            C93590 * C15553) *
               C14840 +
           (C91732 * C15666 + C93815 * C15849 + C91722 * C15667 +
            C93590 * C15850) *
               C14741) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C14838 +
           (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
               C14739 +
           (C15876 + C15877) * C14839 + (C15878 + C15879) * C14740 +
           C15888 * C14840 + C15889 * C14741) *
              C93706 * C1382 -
          ((C91722 * C8646 + C93590 * C8866 + C91732 * C8645 + C93815 * C8865) *
               C14741 +
           (C91722 * C8521 + C93590 * C8524 + C91732 * C8520 + C93815 * C8523) *
               C14840 +
           (C91722 * C3492 + C93590 * C3640 + C91732 * C3491 + C93815 * C3639) *
               C14740 +
           (C91722 * C3410 + C93590 * C3414 + C91732 * C3409 + C93815 * C3413) *
               C14839 +
           (C91722 * C1469 + C93590 * C1601 + C91732 * C1470 + C93815 * C1602) *
               C14739 +
           (C91722 * C1387 + C93590 * C1395 + C91732 * C1388 + C93815 * C1396) *
               C14838) *
              C93706 * C1383 +
          ((C91732 * C1389 + C93815 * C1397 + C91722 * C1390 + C93590 * C1398) *
               C14838 +
           (C91732 * C1471 + C93815 * C1603 + C91722 * C1472 + C93590 * C1604) *
               C14739 +
           (C91732 * C5775 + C93815 * C5778 + C91722 * C5776 + C93590 * C5779) *
               C14839 +
           (C91732 * C5870 + C93815 * C6030 + C91722 * C5871 + C93590 * C6031) *
               C14740 +
           (C91732 * C16395 + C93815 * C16397 + C91722 * C16396 +
            C93590 * C16398) *
               C14840 +
           (C91732 * C16487 + C93815 * C16643 + C91722 * C16488 +
            C93590 * C16644) *
               C14741) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[62] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C418 * C108 + C426 + C426 + C93680 * C419) * C89 +
                     C448 * C90 + C449 * C91 + C450 * C92) *
                        C93706 * C93639 * C800 -
                    ((C418 * C804 + C1085 + C1085 + C93680 * C1076) * C92 +
                     (C418 * C805 + C1086 + C1086 + C93680 * C1077) * C91 +
                     (C418 * C806 + C1087 + C1087 + C93680 * C1078) * C90 +
                     (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C89) *
                        C93706 * C93639 * C801 +
                    ((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C89 +
                     (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C90 +
                     (C418 * C810 + C1091 + C1091 + C93680 * C1082) * C91 +
                     (C418 * C811 + C1092 + C1092 + C93680 * C1083) * C92) *
                        C93706 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C418 * C108 + C426 + C426 + C93680 * C419) * C89 +
                     C448 * C90 + C449 * C91 + C450 * C92) *
                        C93706 * C93639 * C93625 * C97 -
                    (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                        C93706 * C93639 * C93625 * C98 +
                    (C449 * C89 + C450 * C90 + C451 * C91 +
                     (C418 * C113 + C439 + C439 + C93680 * C424) * C92) *
                        C93706 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C418 * C108 + C426 + C426 + C93680 * C419) * C89 +
                     C448 * C90 + C449 * C91 + C450 * C92) *
                        C93706 * C1382 -
                    ((C418 * C1385 + C1666 + C1666 + C93680 * C1657) * C92 +
                     (C418 * C1386 + C1667 + C1667 + C93680 * C1658) * C91 +
                     (C418 * C1387 + C1668 + C1668 + C93680 * C1659) * C90 +
                     (C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C89) *
                        C93706 * C1383 +
                    ((C418 * C1389 + C1670 + C1670 + C93680 * C1661) * C89 +
                     (C418 * C1390 + C1671 + C1671 + C93680 * C1662) * C90 +
                     (C418 * C1391 + C1672 + C1672 + C93680 * C1663) * C91 +
                     (C418 * C1392 + C1673 + C1673 + C93680 * C1664) * C92) *
                        C93706 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C15099 * C108 + C15103 + C15103 + C14739 * C419 +
                      C15100 * C807 + C15104 + C15104 + C14740 * C1079 +
                      C15101 * C808 + C15105 + C15105 + C14741 * C1080) *
                         C93815 +
                     (C15139 + C15140 + C15141) * C93590) *
                        C93706 * C93639 * C93625 * C97 -
                    ((C15142 + C15143 + C15144) * C93590 +
                     (C15141 + C15140 + C15139) * C93815) *
                        C93706 * C93639 * C93625 * C98 +
                    ((C15144 + C15143 + C15142) * C93815 +
                     (C15099 * C111 + C15124 + C15124 + C14739 * C422 +
                      C15100 * C804 + C15125 + C15125 + C14740 * C1076 +
                      C15101 * C811 + C15126 + C15126 + C14741 * C1083) *
                         C93590) *
                        C93706 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C15099 * C108 + C15103 + C15103 + C14739 * C419 +
                      C15100 * C807 + C15104 + C15104 + C14740 * C1079 +
                      C15101 * C808 + C15105 + C15105 + C14741 * C1080) *
                         C93815 +
                     (C15139 + C15140 + C15141) * C93590) *
                        C93706 * C93639 * C800 -
                    ((C15101 * C4898 + C15966 + C15966 + C14741 * C5326 +
                      C15100 * C809 + C15967 + C15967 + C14740 * C1081 +
                      C15099 * C806 + C15968 + C15968 + C14739 * C1078) *
                         C93590 +
                     (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 +
                      C15100 * C808 + C15970 + C15970 + C14740 * C1080 +
                      C15099 * C807 + C15971 + C15971 + C14739 * C1079) *
                         C93815) *
                        C93706 * C93639 * C801 +
                    ((C15099 * C808 + C15972 + C15972 + C14739 * C1080 +
                      C15100 * C4897 + C15973 + C15973 + C14740 * C5325 +
                      C15101 * C15550 + C15974 + C15974 + C14741 * C15963) *
                         C93815 +
                     (C15099 * C809 + C15975 + C15975 + C14739 * C1081 +
                      C15100 * C4898 + C15976 + C15976 + C14740 * C5326 +
                      C15101 * C15551 + C15977 + C15977 + C14741 * C15964) *
                         C93590) *
                        C93706 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C15099 * C108 + C15103 + C15103 + C14739 * C419 +
                      C15100 * C807 + C15104 + C15104 + C14740 * C1079 +
                      C15101 * C808 + C15105 + C15105 + C14741 * C1080) *
                         C93815 +
                     (C15139 + C15140 + C15141) * C93590) *
                        C93706 * C1382 -
                    ((C15101 * C8521 + C16722 + C16722 + C14741 * C8985 +
                      C15100 * C3410 + C16723 + C16723 + C14740 * C3710 +
                      C15099 * C1387 + C16724 + C16724 + C14739 * C1659) *
                         C93590 +
                     (C15101 * C8520 + C16725 + C16725 + C14741 * C8984 +
                      C15100 * C3409 + C16726 + C16726 + C14740 * C3709 +
                      C15099 * C1388 + C16727 + C16727 + C14739 * C1660) *
                         C93815) *
                        C93706 * C1383 +
                    ((C15099 * C1389 + C16728 + C16728 + C14739 * C1661 +
                      C15100 * C5775 + C16729 + C16729 + C14740 * C6107 +
                      C15101 * C16395 + C16730 + C16730 + C14741 * C16719) *
                         C93815 +
                     (C15099 * C1390 + C16731 + C16731 + C14739 * C1662 +
                      C15100 * C5776 + C16732 + C16732 + C14740 * C6108 +
                      C15101 * C16396 + C16733 + C16733 + C14741 * C16720) *
                         C93590) *
                        C93706 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C188 +
            (C275 * C189 + C93706 * C501) * C93680) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C93639 * C800 -
          (((C275 * C886 + C93706 * C1142) * C93680 +
            (C275 * C804 + C93706 * C952) * C188) *
               C92 +
           ((C275 * C887 + C93706 * C1143) * C93680 +
            (C275 * C805 + C93706 * C953) * C188) *
               C91 +
           ((C275 * C888 + C93706 * C1144) * C93680 +
            (C275 * C806 + C93706 * C954) * C188) *
               C90 +
           ((C275 * C889 + C93706 * C1145) * C93680 +
            (C275 * C807 + C93706 * C955) * C188) *
               C89) *
              C93639 * C801 +
          (((C275 * C808 + C93706 * C956) * C188 +
            (C275 * C890 + C93706 * C1146) * C93680) *
               C89 +
           ((C275 * C809 + C93706 * C957) * C188 +
            (C275 * C891 + C93706 * C1147) * C93680) *
               C90 +
           ((C275 * C810 + C93706 * C958) * C188 +
            (C275 * C892 + C93706 * C1148) * C93680) *
               C91 +
           ((C275 * C811 + C93706 * C959) * C188 +
            (C275 * C893 + C93706 * C1149) * C93680) *
               C92) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C188 +
            (C275 * C189 + C93706 * C501) * C93680) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C93639 * C93625 * C97 -
          ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
           (C524 + C508) * C89) *
              C93639 * C93625 * C98 +
          (C528 * C89 + C529 * C90 + (C519 + C527) * C91 +
           ((C275 * C113 + C93706 * C281) * C188 +
            (C275 * C194 + C93706 * C506) * C93680) *
               C92) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C188 +
            (C275 * C189 + C93706 * C501) * C93680) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C1382 -
          (((C275 * C1467 + C93706 * C1723) * C93680 +
            (C275 * C1385 + C93706 * C1533) * C188) *
               C92 +
           ((C275 * C1468 + C93706 * C1724) * C93680 +
            (C275 * C1386 + C93706 * C1534) * C188) *
               C91 +
           ((C275 * C1469 + C93706 * C1725) * C93680 +
            (C275 * C1387 + C93706 * C1535) * C188) *
               C90 +
           ((C275 * C1470 + C93706 * C1726) * C93680 +
            (C275 * C1388 + C93706 * C1536) * C188) *
               C89) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C188 +
            (C275 * C1471 + C93706 * C1727) * C93680) *
               C89 +
           ((C275 * C1390 + C93706 * C1538) * C188 +
            (C275 * C1472 + C93706 * C1728) * C93680) *
               C90 +
           ((C275 * C1391 + C93706 * C1539) * C188 +
            (C275 * C1473 + C93706 * C1729) * C93680) *
               C91 +
           ((C275 * C1392 + C93706 * C1540) * C188 +
            (C275 * C1474 + C93706 * C1730) * C93680) *
               C92) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C14838 +
            (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
            C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
               C93815 +
           (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
              C93639 * C93625 * C97 -
          ((C15225 + C15226 + C15227 + C15228 + C15229 + C15230) * C93590 +
           (C15224 + C15223 + C15222 + C15221 + C15220 + C15219) * C93815) *
              C93639 * C93625 * C98 +
          ((C15230 + C15229 + C15228 + C15227 + C15226 + C15225) * C93815 +
           (C309 * C14838 + C522 * C14739 + C2158 * C14839 + C2389 * C14740 +
            (C275 * C811 + C93706 * C959) * C14840 +
            (C275 * C893 + C93706 * C1149) * C14741) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C14838 +
            (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
            C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
               C93815 +
           (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
              C93639 * C800 -
          ((C16058 * C14741 + C15767 * C14840 + C5428 * C14740 +
            C5128 * C14839 + C2391 * C14739 + C2162 * C14838) *
               C93590 +
           (C16059 * C14741 + C15769 * C14840 + C5429 * C14740 +
            C5130 * C14839 + C5426 * C14739 + C5123 * C14838) *
               C93815) *
              C93639 * C801 +
          ((C5130 * C14838 + C5429 * C14739 + C15769 * C14839 +
            C16059 * C14740 + (C275 * C15550 + C93706 * C15744) * C14840 +
            (C275 * C15666 + C93706 * C16051) * C14741) *
               C93815 +
           (C5128 * C14838 + C5428 * C14739 + C15767 * C14839 +
            C16058 * C14740 + (C275 * C15551 + C93706 * C15745) * C14840 +
            (C275 * C15667 + C93706 * C16052) * C14741) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C14838 +
            (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
            C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
               C93815 +
           (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
              C1382 -
          (((C275 * C8646 + C93706 * C9092) * C14741 +
            (C275 * C8521 + C93706 * C8750) * C14840 + C8100 * C14740 +
            C7772 * C14839 + C3105 * C14739 + C2876 * C14838) *
               C93590 +
           ((C275 * C8645 + C93706 * C9091) * C14741 +
            (C275 * C8520 + C93706 * C8749) * C14840 + C9097 * C14740 +
            C8765 * C14839 + (C275 * C1470 + C93706 * C1726) * C14739 +
            (C275 * C1388 + C93706 * C1536) * C14838) *
               C93815) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C14838 +
            (C275 * C1471 + C93706 * C1727) * C14739 +
            (C275 * C5775 + C93706 * C5950) * C14839 +
            (C275 * C5870 + C93706 * C6196) * C14740 +
            (C275 * C16395 + C93706 * C16565) * C14840 +
            (C275 * C16487 + C93706 * C16807) * C14741) *
               C93815 +
           ((C275 * C1390 + C93706 * C1538) * C14838 +
            (C275 * C1472 + C93706 * C1728) * C14739 +
            (C275 * C5776 + C93706 * C5951) * C14839 +
            (C275 * C5871 + C93706 * C6197) * C14740 +
            (C275 * C16396 + C93706 * C16566) * C14840 +
            (C275 * C16488 + C93706 * C16808) * C14741) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C93706) *
              C93680 * C93639 * C800 -
          ((C107 * C952 + C92 * C1200 + C105 * C953 + C91 * C1201 +
            C103 * C954 + C90 * C1202 + C101 * C955 + C89 * C1203) *
               C93706 +
           (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
            C90 * C814 + C101 * C807 + C89 * C815) *
               C275) *
              C93680 * C93639 * C801 +
          ((C101 * C808 + C89 * C816 + C103 * C809 + C90 * C817 + C105 * C810 +
            C91 * C818 + C107 * C811 + C92 * C819) *
               C275 +
           (C101 * C956 + C89 * C1204 + C103 * C957 + C90 * C1205 +
            C105 * C958 + C91 * C1206 + C107 * C959 + C92 * C1207) *
               C93706) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C93706) *
              C93680 * C93639 * C93625 * C97 -
          ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
            C90 * C581 + C101 * C277 + C89 * C580) *
               C93706 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C275) *
              C93680 * C93639 * C93625 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C275 +
           (C101 * C278 + C89 * C581 + C103 * C279 + C90 * C582 + C105 * C280 +
            C91 * C583 + C107 * C281 + C92 * C584) *
               C93706) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C93706) *
              C93680 * C1382 -
          ((C107 * C1533 + C92 * C1781 + C105 * C1534 + C91 * C1782 +
            C103 * C1535 + C90 * C1783 + C101 * C1536 + C89 * C1784) *
               C93706 +
           (C107 * C1385 + C92 * C1393 + C105 * C1386 + C91 * C1394 +
            C103 * C1387 + C90 * C1395 + C101 * C1388 + C89 * C1396) *
               C275) *
              C93680 * C1383 +
          ((C101 * C1389 + C89 * C1397 + C103 * C1390 + C90 * C1398 +
            C105 * C1391 + C91 * C1399 + C107 * C1392 + C92 * C1400) *
               C275 +
           (C101 * C1537 + C89 * C1785 + C103 * C1538 + C90 * C1786 +
            C105 * C1539 + C91 * C1787 + C107 * C1540 + C92 * C1788) *
               C93706) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C275 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C93706) *
               C14739 +
           ((C91732 * C807 + C93815 * C815 + C91722 * C806 + C93590 * C814) *
                C275 +
            (C91732 * C955 + C93815 * C1203 + C91722 * C954 + C93590 * C1202) *
                C93706) *
               C14740 +
           ((C91732 * C808 + C93815 * C816 + C91722 * C809 + C93590 * C817) *
                C275 +
            (C91732 * C956 + C93815 * C1204 + C91722 * C957 + C93590 * C1205) *
                C93706) *
               C14741) *
              C93639 * C93625 * C97 -
          (((C91722 * C958 + C93590 * C1206 + C91732 * C957 + C93815 * C1205) *
                C93706 +
            (C91722 * C810 + C93590 * C818 + C91732 * C809 + C93815 * C817) *
                C275) *
               C14741 +
           ((C91722 * C953 + C93590 * C1201 + C91732 * C954 + C93815 * C1202) *
                C93706 +
            (C91722 * C805 + C93590 * C813 + C91732 * C806 + C93815 * C814) *
                C275) *
               C14740 +
           ((C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                C93706 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C275) *
               C14739) *
              C93639 * C93625 * C98 +
          (((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
                C275 +
            (C91732 * C278 + C93815 * C581 + C91722 * C279 + C93590 * C582) *
                C93706) *
               C14739 +
           ((C91732 * C805 + C93815 * C813 + C91722 * C804 + C93590 * C812) *
                C275 +
            (C91732 * C953 + C93815 * C1201 + C91722 * C952 + C93590 * C1200) *
                C93706) *
               C14740 +
           ((C91732 * C810 + C93815 * C818 + C91722 * C811 + C93590 * C819) *
                C275 +
            (C91732 * C958 + C93815 * C1206 + C91722 * C959 + C93590 * C1207) *
                C93706) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C275 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C93706) *
               C14739 +
           ((C15876 + C15877) * C275 + (C16149 + C16150) * C93706) * C14740 +
           C16157 * C14741) *
              C93639 * C800 -
          (((C16153 + C16154) * C93706 + (C15886 + C15887) * C275) * C14741 +
           ((C16152 + C16151) * C93706 + (C15881 + C15880) * C275) * C14740 +
           ((C16150 + C16149) * C93706 + (C15877 + C15876) * C275) * C14739) *
              C93639 * C801 +
          (C16157 * C14739 +
           ((C15887 + C15886) * C275 + (C16154 + C16153) * C93706) * C14740 +
           ((C91732 * C15550 + C93815 * C15552 + C91722 * C15551 +
             C93590 * C15553) *
                C275 +
            (C91732 * C15744 + C93815 * C16133 + C91722 * C15745 +
             C93590 * C16134) *
                C93706) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C275 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C93706) *
               C14739 +
           ((C15876 + C15877) * C275 + (C16149 + C16150) * C93706) * C14740 +
           C16157 * C14741) *
              C1382 -
          (((C91722 * C8750 + C93590 * C9196 + C91732 * C8749 +
             C93815 * C9195) *
                C93706 +
            (C91722 * C8521 + C93590 * C8524 + C91732 * C8520 +
             C93815 * C8523) *
                C275) *
               C14741 +
           ((C91722 * C3566 + C93590 * C3854 + C91732 * C3565 +
             C93815 * C3853) *
                C93706 +
            (C91722 * C3410 + C93590 * C3414 + C91732 * C3409 +
             C93815 * C3413) *
                C275) *
               C14740 +
           ((C91722 * C1535 + C93590 * C1783 + C91732 * C1536 +
             C93815 * C1784) *
                C93706 +
            (C91722 * C1387 + C93590 * C1395 + C91732 * C1388 +
             C93815 * C1396) *
                C275) *
               C14739) *
              C1383 +
          (((C91732 * C1389 + C93815 * C1397 + C91722 * C1390 +
             C93590 * C1398) *
                C275 +
            (C91732 * C1537 + C93815 * C1785 + C91722 * C1538 +
             C93590 * C1786) *
                C93706) *
               C14739 +
           ((C91732 * C5775 + C93815 * C5778 + C91722 * C5776 +
             C93590 * C5779) *
                C275 +
            (C91732 * C5950 + C93815 * C6273 + C91722 * C5951 +
             C93590 * C6274) *
                C93706) *
               C14740 +
           ((C91732 * C16395 + C93815 * C16397 + C91722 * C16396 +
             C93590 * C16398) *
                C275 +
            (C91732 * C16565 + C93815 * C16883 + C91722 * C16566 +
             C93590 * C16884) *
                C93706) *
               C14741) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[62] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C93680 * C189) * C275 +
                      (C188 * C276 + C93680 * C635) * C93706) *
                         C89 +
                     (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                        C93639 * C800 -
                    (((C188 * C952 + C93680 * C1258) * C93706 +
                      (C188 * C804 + C93680 * C886) * C275) *
                         C92 +
                     ((C188 * C953 + C93680 * C1259) * C93706 +
                      (C188 * C805 + C93680 * C887) * C275) *
                         C91 +
                     ((C188 * C954 + C93680 * C1260) * C93706 +
                      (C188 * C806 + C93680 * C888) * C275) *
                         C90 +
                     ((C188 * C955 + C93680 * C1261) * C93706 +
                      (C188 * C807 + C93680 * C889) * C275) *
                         C89) *
                        C93639 * C801 +
                    (((C188 * C808 + C93680 * C890) * C275 +
                      (C188 * C956 + C93680 * C1262) * C93706) *
                         C89 +
                     ((C188 * C809 + C93680 * C891) * C275 +
                      (C188 * C957 + C93680 * C1263) * C93706) *
                         C90 +
                     ((C188 * C810 + C93680 * C892) * C275 +
                      (C188 * C958 + C93680 * C1264) * C93706) *
                         C91 +
                     ((C188 * C811 + C93680 * C893) * C275 +
                      (C188 * C959 + C93680 * C1265) * C93706) *
                         C92) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C93680 * C189) * C275 +
                      (C188 * C276 + C93680 * C635) * C93706) *
                         C89 +
                     (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                        C93639 * C93625 * C97 -
                    ((C661 + C653) * C92 + (C660 + C648) * C91 +
                     (C659 + C645) * C90 + (C658 + C642) * C89) *
                        C93639 * C93625 * C98 +
                    (C662 * C89 + C663 * C90 + (C653 + C661) * C91 +
                     ((C188 * C113 + C93680 * C194) * C275 +
                      (C188 * C281 + C93680 * C640) * C93706) *
                         C92) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C93680 * C189) * C275 +
                      (C188 * C276 + C93680 * C635) * C93706) *
                         C89 +
                     (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                        C1382 -
                    (((C188 * C1533 + C93680 * C1839) * C93706 +
                      (C188 * C1385 + C93680 * C1467) * C275) *
                         C92 +
                     ((C188 * C1534 + C93680 * C1840) * C93706 +
                      (C188 * C1386 + C93680 * C1468) * C275) *
                         C91 +
                     ((C188 * C1535 + C93680 * C1841) * C93706 +
                      (C188 * C1387 + C93680 * C1469) * C275) *
                         C90 +
                     ((C188 * C1536 + C93680 * C1842) * C93706 +
                      (C188 * C1388 + C93680 * C1470) * C275) *
                         C89) *
                        C1383 +
                    (((C188 * C1389 + C93680 * C1471) * C275 +
                      (C188 * C1537 + C93680 * C1843) * C93706) *
                         C89 +
                     ((C188 * C1390 + C93680 * C1472) * C275 +
                      (C188 * C1538 + C93680 * C1844) * C93706) *
                         C90 +
                     ((C188 * C1391 + C93680 * C1473) * C275 +
                      (C188 * C1539 + C93680 * C1845) * C93706) *
                         C91 +
                     ((C188 * C1392 + C93680 * C1474) * C275 +
                      (C188 * C1540 + C93680 * C1846) * C93706) *
                         C92) *
                        C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C14838 * C108 + C14739 * C189 + C14839 * C807 +
                       C14740 * C889 + C14840 * C808 + C14741 * C890) *
                          C275 +
                      (C14838 * C276 + C14739 * C635 + C14839 * C955 +
                       C14740 * C1261 + C14840 * C956 + C14741 * C1262) *
                          C93706) *
                         C93815 +
                     ((C14866 + C14867 + C14868) * C275 +
                      (C15391 + C15392 + C15393) * C93706) *
                         C93590) *
                        C93639 * C93625 * C97 -
                    (((C15394 + C15395 + C15396) * C93706 +
                      (C14875 + C14876 + C14877) * C275) *
                         C93590 +
                     ((C15393 + C15392 + C15391) * C93706 +
                      (C14868 + C14867 + C14866) * C275) *
                         C93815) *
                        C93639 * C93625 * C98 +
                    (((C14877 + C14876 + C14875) * C275 +
                      (C15396 + C15395 + C15394) * C93706) *
                         C93815 +
                     ((C14838 * C111 + C14739 * C192 + C14839 * C804 +
                       C14740 * C886 + C14840 * C811 + C14741 * C893) *
                          C275 +
                      (C14838 * C279 + C14739 * C638 + C14839 * C952 +
                       C14740 * C1258 + C14840 * C959 + C14741 * C1265) *
                          C93706) *
                         C93590) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C14838 * C108 + C14739 * C189 + C14839 * C807 +
                       C14740 * C889 + C14840 * C808 + C14741 * C890) *
                          C275 +
                      (C14838 * C276 + C14739 * C635 + C14839 * C955 +
                       C14740 * C1261 + C14840 * C956 + C14741 * C1262) *
                          C93706) *
                         C93815 +
                     ((C14866 + C14867 + C14868) * C275 +
                      (C15391 + C15392 + C15393) * C93706) *
                         C93590) *
                        C93639 * C800 -
                    (((C14840 * C5097 + C14741 * C5599 + C14839 * C957 +
                       C14740 * C1263 + C14838 * C954 + C14739 * C1260) *
                          C93706 +
                      (C14840 * C4898 + C14741 * C5017 + C14839 * C809 +
                       C14740 * C891 + C14838 * C806 + C14739 * C888) *
                          C275) *
                         C93590 +
                     ((C14840 * C5096 + C14741 * C5598 + C14839 * C956 +
                       C14740 * C1262 + C14838 * C955 + C14739 * C1261) *
                          C93706 +
                      (C14840 * C4897 + C14741 * C5016 + C14839 * C808 +
                       C14740 * C890 + C14838 * C807 + C14739 * C889) *
                          C275) *
                         C93815) *
                        C93639 * C801 +
                    (((C14838 * C808 + C14739 * C890 + C14839 * C4897 +
                       C14740 * C5016 + C14840 * C15550 + C14741 * C15666) *
                          C275 +
                      (C14838 * C956 + C14739 * C1262 + C14839 * C5096 +
                       C14740 * C5598 + C14840 * C15744 + C14741 * C16231) *
                          C93706) *
                         C93815 +
                     ((C14838 * C809 + C14739 * C891 + C14839 * C4898 +
                       C14740 * C5017 + C14840 * C15551 + C14741 * C15667) *
                          C275 +
                      (C14838 * C957 + C14739 * C1263 + C14839 * C5097 +
                       C14740 * C5599 + C14840 * C15745 + C14741 * C16232) *
                          C93706) *
                         C93590) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C14838 * C108 + C14739 * C189 + C14839 * C807 +
                       C14740 * C889 + C14840 * C808 + C14741 * C890) *
                          C275 +
                      (C14838 * C276 + C14739 * C635 + C14839 * C955 +
                       C14740 * C1261 + C14840 * C956 + C14741 * C1262) *
                          C93706) *
                         C93815 +
                     ((C14866 + C14867 + C14868) * C275 +
                      (C15391 + C15392 + C15393) * C93706) *
                         C93590) *
                        C1382 -
                    (((C14840 * C8750 + C14741 * C9306 + C14839 * C3566 +
                       C14740 * C3924 + C14838 * C1535 + C14739 * C1841) *
                          C93706 +
                      (C14840 * C8521 + C14741 * C8646 + C14839 * C3410 +
                       C14740 * C3492 + C14838 * C1387 + C14739 * C1469) *
                          C275) *
                         C93590 +
                     ((C14840 * C8749 + C14741 * C9305 + C14839 * C3565 +
                       C14740 * C3923 + C14838 * C1536 + C14739 * C1842) *
                          C93706 +
                      (C14840 * C8520 + C14741 * C8645 + C14839 * C3409 +
                       C14740 * C3491 + C14838 * C1388 + C14739 * C1470) *
                          C275) *
                         C93815) *
                        C1383 +
                    (((C14838 * C1389 + C14739 * C1471 + C14839 * C5775 +
                       C14740 * C5870 + C14840 * C16395 + C14741 * C16487) *
                          C275 +
                      (C14838 * C1537 + C14739 * C1843 + C14839 * C5950 +
                       C14740 * C6350 + C14840 * C16565 + C14741 * C16959) *
                          C93706) *
                         C93815 +
                     ((C14838 * C1390 + C14739 * C1472 + C14839 * C5776 +
                       C14740 * C5871 + C14840 * C16396 + C14741 * C16488) *
                          C275 +
                      (C14838 * C1538 + C14739 * C1844 + C14839 * C5951 +
                       C14740 * C6351 + C14840 * C16566 + C14741 * C16960) *
                          C93706) *
                         C93590) *
                        C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C93639 * C800 -
          ((C713 * C804 + C1325 + C1325 + C93706 * C1316) * C93680 * C92 +
           (C713 * C805 + C1326 + C1326 + C93706 * C1317) * C93680 * C91 +
           (C713 * C806 + C1327 + C1327 + C93706 * C1318) * C93680 * C90 +
           (C713 * C807 + C1328 + C1328 + C93706 * C1319) * C93680 * C89) *
              C93639 * C801 +
          ((C713 * C808 + C1329 + C1329 + C93706 * C1320) * C93680 * C89 +
           (C713 * C809 + C1330 + C1330 + C93706 * C1321) * C93680 * C90 +
           (C713 * C810 + C1331 + C1331 + C93706 * C1322) * C93680 * C91 +
           (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C93680 * C92) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C93639 * C93625 * C97 -
          (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C93639 *
              C93625 * C98 +
          (C748 * C89 + C749 * C90 + C750 * C91 +
           (C713 * C113 + C734 + C734 + C93706 * C719) * C93680 * C92) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C1382 -
          ((C713 * C1385 + C1906 + C1906 + C93706 * C1897) * C93680 * C92 +
           (C713 * C1386 + C1907 + C1907 + C93706 * C1898) * C93680 * C91 +
           (C713 * C1387 + C1908 + C1908 + C93706 * C1899) * C93680 * C90 +
           (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93680 * C89) *
              C1383 +
          ((C713 * C1389 + C1910 + C1910 + C93706 * C1901) * C93680 * C89 +
           (C713 * C1390 + C1911 + C1911 + C93706 * C1902) * C93680 * C90 +
           (C713 * C1391 + C1912 + C1912 + C93706 * C1903) * C93680 * C91 +
           (C713 * C1392 + C1913 + C1913 + C93706 * C1904) * C93680 * C92) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
            C5698 * C14740 + C5701 * C14741) *
               C93815 +
           (C15471 + C15472 + C15473) * C93590) *
              C93639 * C93625 * C97 -
          ((C15474 + C15475 + C15476) * C93590 +
           (C15473 + C15472 + C15471) * C93815) *
              C93639 * C93625 * C98 +
          ((C15476 + C15475 + C15474) * C93815 +
           (C745 * C14739 + C2624 * C14740 +
            (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C14741) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
            C5698 * C14740 + C5701 * C14741) *
               C93815 +
           (C15471 + C15472 + C15473) * C93590) *
              C93639 * C800 -
          ((C16320 * C14741 + C5700 * C14740 + C2626 * C14739) * C93590 +
           (C16321 * C14741 + C5701 * C14740 + C5698 * C14739) * C93815) *
              C93639 * C801 +
          ((C5701 * C14739 + C16321 * C14740 +
            (C713 * C15550 + C16314 + C16314 + C93706 * C16307) * C14741) *
               C93815 +
           (C5700 * C14739 + C16320 * C14740 +
            (C713 * C15551 + C16315 + C16315 + C93706 * C16308) * C14741) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
            C5698 * C14740 + C5701 * C14741) *
               C93815 +
           (C15471 + C15472 + C15473) * C93590) *
              C1382 -
          (((C713 * C8521 + C9413 + C9413 + C93706 * C9407) * C14741 +
            C8420 * C14740 + C3340 * C14739) *
               C93590 +
           ((C713 * C8520 + C9412 + C9412 + C93706 * C9406) * C14741 +
            C9417 * C14740 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C14739) *
               C93815) *
              C1383 +
          (((C713 * C1389 + C1910 + C1910 + C93706 * C1901) * C14739 +
            (C713 * C5775 + C6431 + C6431 + C93706 * C6427) * C14740 +
            (C713 * C16395 + C17038 + C17038 + C93706 * C17035) * C14741) *
               C93815 +
           ((C713 * C1390 + C1911 + C1911 + C93706 * C1902) * C14739 +
            (C713 * C5776 + C6432 + C6432 + C93706 * C6428) * C14740 +
            (C713 * C16396 + C17039 + C17039 + C93706 * C17036) * C14741) *
               C93590) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C93706 * C93680 * C2695 -
           (C106 * C1385 + C1410 + C1410 + C92 * C1401 + C104 * C1386 + C1411 +
            C1411 + C91 * C1402 + C102 * C1387 + C1412 + C1412 + C90 * C1403 +
            C100 * C1388 + C1413 + C1413 + C89 * C1404) *
               C93706 * C93680 * C2696) *
              C93625 * C1981 +
          ((C100 * C1387 + C2701 + C2701 + C89 * C1403 + C102 * C1386 + C2702 +
            C2702 + C90 * C1402 + C104 * C1385 + C2703 + C2703 + C91 * C1401 +
            C106 * C2697 + C2704 + C2704 + C92 * C2699) *
               C93706 * C93680 * C2696 -
           (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 + C132 + C132 +
            C91 * C123 + C102 * C110 + C133 + C133 + C90 * C122 + C100 * C109 +
            C134 + C134 + C89 * C121) *
               C93706 * C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14742 * C108 + C14747 + C14747 + C93815 * C120 + C14744 * C109 +
             C14748 + C14748 + C93590 * C121) *
                C93706 * C14739 +
            (C15585 + C15586) * C93706 * C14740 + C15592 * C14741) *
               C2695 -
           ((C14744 * C8521 + C16402 + C16402 + C93590 * C8527 +
             C14742 * C8520 + C16403 + C16403 + C93815 * C8526) *
                C93706 * C14741 +
            (C14744 * C3410 + C16404 + C16404 + C93590 * C3418 +
             C14742 * C3409 + C16405 + C16405 + C93815 * C3417) *
                C93706 * C14740 +
            (C14744 * C1387 + C16406 + C16406 + C93590 * C1403 +
             C14742 * C1388 + C16407 + C16407 + C93815 * C1404) *
                C93706 * C14739) *
               C2696) *
              C93625 * C1981 +
          (((C14742 * C1387 + C18140 + C18140 + C93815 * C1403 +
             C14744 * C1386 + C18141 + C18141 + C93590 * C1402) *
                C93706 * C14739 +
            (C14742 * C3410 + C18142 + C18142 + C93815 * C3418 +
             C14744 * C3411 + C18143 + C18143 + C93590 * C3419) *
                C93706 * C14740 +
            (C14742 * C8521 + C18144 + C18144 + C93815 * C8527 +
             C14744 * C8522 + C18145 + C18145 + C93590 * C8528) *
                C93706 * C14741) *
               C2696 -
           ((C17159 + C17158) * C93706 * C14741 +
            (C17157 + C17156) * C93706 * C14740 +
            (C14744 * C110 + C14757 + C14757 + C93590 * C122 + C14742 * C109 +
             C14758 + C14758 + C93815 * C121) *
                C93706 * C14739) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C101 +
            (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C93706 * C2695 -
           (C2785 * C92 + C2786 * C107 + C2787 * C91 + C2788 * C105 +
            C2789 * C90 + C2790 * C103 + (C188 * C1396 + C93680 * C1478) * C89 +
            (C188 * C1388 + C93680 * C1470) * C101) *
               C93706 * C2696) *
              C93625 * C1981 +
          ((C2790 * C101 + C2789 * C89 + C2788 * C103 + C2787 * C90 +
            C2786 * C105 + C2785 * C91 +
            (C188 * C2697 + C93680 * C2770) * C107 +
            (C188 * C2698 + C93680 * C2771) * C92) *
               C93706 * C2696 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C91732 +
            (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
             C14840 * C816 + C14741 * C898) *
                C93815 +
            (C14866 + C14867 + C14868) * C91722 +
            (C14869 + C14870 + C14871) * C93590) *
               C93706 * C2695 -
           ((C18256 + C18257 + C18258) * C93590 +
            (C18259 + C18260 + C18261) * C91722 +
            (C14840 * C8523 + C14741 * C8648 + C14839 * C3413 + C14740 * C3495 +
             C14838 * C1396 + C14739 * C1478) *
                C93815 +
            (C14840 * C8520 + C14741 * C8645 + C14839 * C3409 + C14740 * C3491 +
             C14838 * C1388 + C14739 * C1470) *
                C91732) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C18261 + C18260 + C18259) * C91732 +
            (C18258 + C18257 + C18256) * C93815 +
            (C14838 * C1386 + C14739 * C1468 + C14839 * C3411 + C14740 * C3493 +
             C14840 * C8522 + C14741 * C8647) *
                C91722 +
            (C14838 * C1394 + C14739 * C1476 + C14839 * C3415 + C14740 * C3497 +
             C14840 * C8525 + C14741 * C8650) *
                C93590) *
               C93706 * C2696 -
           ((C14872 + C14873 + C14874) * C93590 +
            (C14875 + C14876 + C14877) * C91722 +
            (C14871 + C14870 + C14869) * C93815 +
            (C14868 + C14867 + C14866) * C91732) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C101 +
            (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C93680 * C2695 -
           (C2871 * C92 + C2872 * C107 + C2873 * C91 + C2874 * C105 +
            C2875 * C90 + C2876 * C103 + (C275 * C1396 + C93706 * C1544) * C89 +
            (C275 * C1388 + C93706 * C1536) * C101) *
               C93680 * C2696) *
              C93625 * C1981 +
          ((C2876 * C101 + C2875 * C89 + C2874 * C103 + C2873 * C90 +
            C2872 * C105 + C2871 * C91 +
            (C275 * C2697 + C93706 * C2856) * C107 +
            (C275 * C2698 + C93706 * C2857) * C92) *
               C93680 * C2696 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C91732 +
             (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
             C306 * C93590) *
                C14739 +
            (C15749 + C15750 + C15751 + C15752) * C14740 + C15775 * C14741) *
               C2695 -
           ((C18364 * C93590 + C18365 * C91722 +
             (C275 * C8523 + C93706 * C8752) * C93815 +
             (C275 * C8520 + C93706 * C8749) * C91732) *
                C14741 +
            (C7771 * C93590 + C7772 * C91722 + C8764 * C93815 +
             C8765 * C91732) *
                C14740 +
            (C2875 * C93590 + C2876 * C91722 +
             (C275 * C1396 + C93706 * C1544) * C93815 +
             (C275 * C1388 + C93706 * C1536) * C91732) *
                C14739) *
               C2696) *
              C93625 * C1981 +
          (((C2876 * C91732 + C2875 * C93815 + C2874 * C91722 +
             C2873 * C93590) *
                C14739 +
            (C7772 * C91732 + C7771 * C93815 + C7770 * C91722 +
             C7769 * C93590) *
                C14740 +
            (C18365 * C91732 + C18364 * C93815 +
             (C275 * C8522 + C93706 * C8751) * C91722 +
             (C275 * C8525 + C93706 * C8754) * C93590) *
                C14741) *
               C2696 -
           ((C17381 + C17380 + C17379 + C17378) * C14741 +
            (C17377 + C17376 + C17375 + C17374) * C14740 +
            (C308 * C93590 + C307 * C91722 + C306 * C93815 + C305 * C91732) *
                C14739) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C93680) *
               C93706 * C2695 -
           ((C107 * C1467 + C92 * C1599 + C105 * C1468 + C91 * C1600 +
             C103 * C1469 + C90 * C1601 + C101 * C1470 + C89 * C1602) *
                C93680 +
            (C107 * C1385 + C92 * C1393 + C105 * C1386 + C91 * C1394 +
             C103 * C1387 + C90 * C1395 + C101 * C1388 + C89 * C1396) *
                C188) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C101 * C1387 + C89 * C1395 + C103 * C1386 + C90 * C1394 +
             C105 * C1385 + C91 * C1393 + C107 * C2697 + C92 * C2698) *
                C188 +
            (C101 * C1469 + C89 * C1601 + C103 * C1468 + C90 * C1600 +
             C105 * C1467 + C91 * C1599 + C107 * C2770 + C92 * C2942) *
                C93680) *
               C93706 * C2696 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C93680 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C14838 +
            (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
                C14739 +
            (C15876 + C15877) * C14839 + (C15878 + C15879) * C14740 +
            C15888 * C14840 + C15889 * C14741) *
               C93706 * C2695 -
           ((C91722 * C8646 + C93590 * C8866 + C91732 * C8645 +
             C93815 * C8865) *
                C14741 +
            (C91722 * C8521 + C93590 * C8524 + C91732 * C8520 +
             C93815 * C8523) *
                C14840 +
            (C91722 * C3492 + C93590 * C3640 + C91732 * C3491 +
             C93815 * C3639) *
                C14740 +
            (C91722 * C3410 + C93590 * C3414 + C91732 * C3409 +
             C93815 * C3413) *
                C14839 +
            (C91722 * C1469 + C93590 * C1601 + C91732 * C1470 +
             C93815 * C1602) *
                C14739 +
            (C91722 * C1387 + C93590 * C1395 + C91732 * C1388 +
             C93815 * C1396) *
                C14838) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C91732 * C1387 + C93815 * C1395 + C91722 * C1386 +
             C93590 * C1394) *
                C14838 +
            (C91732 * C1469 + C93815 * C1601 + C91722 * C1468 +
             C93590 * C1600) *
                C14739 +
            (C91732 * C3410 + C93815 * C3414 + C91722 * C3411 +
             C93590 * C3415) *
                C14839 +
            (C91732 * C3492 + C93815 * C3640 + C91722 * C3493 +
             C93590 * C3641) *
                C14740 +
            (C91732 * C8521 + C93815 * C8524 + C91722 * C8522 +
             C93590 * C8525) *
                C14840 +
            (C91732 * C8646 + C93815 * C8866 + C91722 * C8647 +
             C93590 * C8867) *
                C14741) *
               C93706 * C2696 -
           ((C17503 + C17502) * C14741 + (C17501 + C17500) * C14840 +
            (C17499 + C17498) * C14740 + (C17497 + C17496) * C14839 +
            (C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
                C14739 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C14838) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[63] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C418 * C108 + C426 + C426 + C93680 * C419) * C89 +
                      C448 * C90 + C449 * C91 + C450 * C92) *
                         C93706 * C2695 -
                     (C3024 * C92 + C3025 * C91 + C3026 * C90 +
                      (C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C89) *
                         C93706 * C2696) *
                        C93625 * C1981 +
                    ((C3026 * C89 + C3025 * C90 + C3024 * C91 +
                      (C418 * C2697 + C3017 + C3017 + C93680 * C3009) * C92) *
                         C93706 * C2696 -
                     (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                         C93706 * C2695) *
                        C93625 * C1982)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C15099 * C108 + C15103 + C15103 + C14739 * C419 +
                       C15100 * C807 + C15104 + C15104 + C14740 * C1079 +
                       C15101 * C808 + C15105 + C15105 + C14741 * C1080) *
                          C93815 +
                      (C15139 + C15140 + C15141) * C93590) *
                         C93706 * C2695 -
                     ((C18577 + C18578 + C18579) * C93590 +
                      (C15101 * C8520 + C16725 + C16725 + C14741 * C8984 +
                       C15100 * C3409 + C16726 + C16726 + C14740 * C3709 +
                       C15099 * C1388 + C16727 + C16727 + C14739 * C1660) *
                          C93815) *
                         C93706 * C2696) *
                        C93625 * C1981 +
                    (((C18579 + C18578 + C18577) * C93815 +
                      (C15099 * C1386 + C18568 + C18568 + C14739 * C1658 +
                       C15100 * C3411 + C18569 + C18569 + C14740 * C3711 +
                       C15101 * C8522 + C18570 + C18570 + C14741 * C8986) *
                          C93590) *
                         C93706 * C2696 -
                     ((C15142 + C15143 + C15144) * C93590 +
                      (C15141 + C15140 + C15139) * C93815) *
                         C93706 * C2695) *
                        C93625 * C1982)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C188 +
             (C275 * C189 + C93706 * C501) * C93680) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C2695 -
           ((C3106 + C3096) * C92 + (C3107 + C3099) * C91 +
            (C3108 + C3102) * C90 +
            ((C275 * C1470 + C93706 * C1726) * C93680 +
             (C275 * C1388 + C93706 * C1536) * C188) *
                C89) *
               C2696) *
              C93625 * C1981 +
          (((C3102 + C3108) * C89 + (C3099 + C3107) * C90 +
            (C3096 + C3106) * C91 +
            ((C275 * C2697 + C93706 * C2856) * C188 +
             (C275 * C2770 + C93706 * C3092) * C93680) *
                C92) *
               C2696 -
           ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
            (C524 + C508) * C89) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C14838 +
             (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
             C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
                C93815 +
            (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
               C2695 -
           ((C18686 + C18680 + C18681 + C18682 + C18683 + C18684) * C93590 +
            ((C275 * C8645 + C93706 * C9091) * C14741 +
             (C275 * C8520 + C93706 * C8749) * C14840 + C9097 * C14740 +
             C8765 * C14839 + (C275 * C1470 + C93706 * C1726) * C14739 +
             (C275 * C1388 + C93706 * C1536) * C14838) *
                C93815) *
               C2696) *
              C93625 * C1981 +
          (((C18684 + C18683 + C18682 + C18681 + C18680 + C18686) * C93815 +
            (C2874 * C14838 + C3104 * C14739 + C7770 * C14839 + C8099 * C14740 +
             (C275 * C8522 + C93706 * C8751) * C14840 +
             (C275 * C8647 + C93706 * C9093) * C14741) *
                C93590) *
               C2696 -
           ((C15225 + C15226 + C15227 + C15228 + C15229 + C15230) * C93590 +
            (C15224 + C15223 + C15222 + C15221 + C15220 + C15219) * C93815) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C93706) *
               C93680 * C2695 -
           ((C107 * C1533 + C92 * C1781 + C105 * C1534 + C91 * C1782 +
             C103 * C1535 + C90 * C1783 + C101 * C1536 + C89 * C1784) *
                C93706 +
            (C107 * C1385 + C92 * C1393 + C105 * C1386 + C91 * C1394 +
             C103 * C1387 + C90 * C1395 + C101 * C1388 + C89 * C1396) *
                C275) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C101 * C1387 + C89 * C1395 + C103 * C1386 + C90 * C1394 +
             C105 * C1385 + C91 * C1393 + C107 * C2697 + C92 * C2698) *
                C275 +
            (C101 * C1535 + C89 * C1783 + C103 * C1534 + C90 * C1782 +
             C105 * C1533 + C91 * C1781 + C107 * C2856 + C92 * C3174) *
                C93706) *
               C93680 * C2696 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C93706 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                 C275 +
             (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                 C93706) *
                C14739 +
            ((C15876 + C15877) * C275 + (C16149 + C16150) * C93706) * C14740 +
            C16157 * C14741) *
               C2695 -
           (((C91722 * C8750 + C93590 * C9196 + C91732 * C8749 +
              C93815 * C9195) *
                 C93706 +
             (C91722 * C8521 + C93590 * C8524 + C91732 * C8520 +
              C93815 * C8523) *
                 C275) *
                C14741 +
            ((C91722 * C3566 + C93590 * C3854 + C91732 * C3565 +
              C93815 * C3853) *
                 C93706 +
             (C91722 * C3410 + C93590 * C3414 + C91732 * C3409 +
              C93815 * C3413) *
                 C275) *
                C14740 +
            ((C91722 * C1535 + C93590 * C1783 + C91732 * C1536 +
              C93815 * C1784) *
                 C93706 +
             (C91722 * C1387 + C93590 * C1395 + C91732 * C1388 +
              C93815 * C1396) *
                 C275) *
                C14739) *
               C2696) *
              C93625 * C1981 +
          ((((C91732 * C1387 + C93815 * C1395 + C91722 * C1386 +
              C93590 * C1394) *
                 C275 +
             (C91732 * C1535 + C93815 * C1783 + C91722 * C1534 +
              C93590 * C1782) *
                 C93706) *
                C14739 +
            ((C91732 * C3410 + C93815 * C3414 + C91722 * C3411 +
              C93590 * C3415) *
                 C275 +
             (C91732 * C3566 + C93815 * C3854 + C91722 * C3567 +
              C93590 * C3855) *
                 C93706) *
                C14740 +
            ((C91732 * C8521 + C93815 * C8524 + C91722 * C8522 +
              C93590 * C8525) *
                 C275 +
             (C91732 * C8750 + C93815 * C9196 + C91722 * C8751 +
              C93590 * C9197) *
                 C93706) *
                C14741) *
               C2696 -
           (((C17833 + C17832) * C93706 + (C17501 + C17500) * C275) * C14741 +
            ((C17831 + C17830) * C93706 + (C17497 + C17496) * C275) * C14740 +
            ((C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                 C93706 +
             (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                 C275) *
                C14739) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezy[63] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C188 * C108 + C93680 * C189) * C275 +
                       (C188 * C276 + C93680 * C635) * C93706) *
                          C89 +
                      (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                         C2695 -
                     ((C3255 + C3245) * C92 + (C3256 + C3248) * C91 +
                      (C3257 + C3251) * C90 +
                      ((C188 * C1536 + C93680 * C1842) * C93706 +
                       (C188 * C1388 + C93680 * C1470) * C275) *
                          C89) *
                         C2696) *
                        C93625 * C1981 +
                    (((C3251 + C3257) * C89 + (C3248 + C3256) * C90 +
                      (C3245 + C3255) * C91 +
                      ((C188 * C2697 + C93680 * C2770) * C275 +
                       (C188 * C2856 + C93680 * C3241) * C93706) *
                          C92) *
                         C2696 -
                     ((C661 + C653) * C92 + (C660 + C648) * C91 +
                      (C659 + C645) * C90 + (C658 + C642) * C89) *
                         C2695) *
                        C93625 * C1982)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C14838 * C108 + C14739 * C189 + C14839 * C807 +
                        C14740 * C889 + C14840 * C808 + C14741 * C890) *
                           C275 +
                       (C14838 * C276 + C14739 * C635 + C14839 * C955 +
                        C14740 * C1261 + C14840 * C956 + C14741 * C1262) *
                           C93706) *
                          C93815 +
                      ((C14866 + C14867 + C14868) * C275 +
                       (C15391 + C15392 + C15393) * C93706) *
                          C93590) *
                         C2695 -
                     (((C18889 + C18890 + C18891) * C93706 +
                       (C18259 + C18260 + C18261) * C275) *
                          C93590 +
                      ((C14840 * C8749 + C14741 * C9305 + C14839 * C3565 +
                        C14740 * C3923 + C14838 * C1536 + C14739 * C1842) *
                           C93706 +
                       (C14840 * C8520 + C14741 * C8645 + C14839 * C3409 +
                        C14740 * C3491 + C14838 * C1388 + C14739 * C1470) *
                           C275) *
                          C93815) *
                         C2696) *
                        C93625 * C1981 +
                    ((((C18261 + C18260 + C18259) * C275 +
                       (C18891 + C18890 + C18889) * C93706) *
                          C93815 +
                      ((C14838 * C1386 + C14739 * C1468 + C14839 * C3411 +
                        C14740 * C3493 + C14840 * C8522 + C14741 * C8647) *
                           C275 +
                       (C14838 * C1534 + C14739 * C1840 + C14839 * C3567 +
                        C14740 * C3925 + C14840 * C8751 + C14741 * C9307) *
                           C93706) *
                          C93590) *
                         C2696 -
                     (((C15394 + C15395 + C15396) * C93706 +
                       (C14875 + C14876 + C14877) * C275) *
                          C93590 +
                      ((C15393 + C15392 + C15391) * C93706 +
                       (C14868 + C14867 + C14866) * C275) *
                          C93815) *
                         C2695) *
                        C93625 * C1982)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C2695 -
           (C3341 * C92 + C3342 * C91 + C3343 * C90 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93680 * C89) *
               C2696) *
              C93625 * C1981 +
          ((C3343 * C89 + C3342 * C90 + C3341 * C91 +
            (C713 * C2697 + C3331 + C3331 + C93706 * C3323) * C93680 * C92) *
               C2696 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
             C5698 * C14740 + C5701 * C14741) *
                C93815 +
            (C15471 + C15472 + C15473) * C93590) *
               C2695 -
           ((C18997 + C18992 + C18993) * C93590 +
            ((C713 * C8520 + C9412 + C9412 + C93706 * C9406) * C14741 +
             C9417 * C14740 +
             (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C14739) *
                C93815) *
               C2696) *
              C93625 * C1981 +
          (((C18993 + C18992 + C18997) * C93815 +
            (C3339 * C14739 + C8419 * C14740 +
             (C713 * C8522 + C9414 + C9414 + C93706 * C9408) * C14741) *
                C93590) *
               C2696 -
           ((C15474 + C15475 + C15476) * C93590 +
            (C15473 + C15472 + C15471) * C93815) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexx[64] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                     C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                     C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                        C93706 * C93680 * C93639 * C93625 * C97 -
                    (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                     C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                     C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                        C93706 * C93680 * C93639 * C93625 * C98 +
                    (C100 * C110 + C135 + C135 + C89 * C122 + C102 * C111 +
                     C136 + C136 + C90 * C123 + C104 * C112 + C137 + C137 +
                     C91 * C124 + C106 * C113 + C138 + C138 + C92 * C125) *
                        C93706 * C93680 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                     C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                     C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                        C93706 * C93680 * C93639 * C800 -
                    (C106 * C804 + C829 + C829 + C92 * C820 + C104 * C805 +
                     C830 + C830 + C91 * C821 + C102 * C806 + C831 + C831 +
                     C90 * C822 + C100 * C807 + C832 + C832 + C89 * C823) *
                        C93706 * C93680 * C93639 * C801 +
                    (C100 * C808 + C833 + C833 + C89 * C824 + C102 * C809 +
                     C834 + C834 + C90 * C825 + C104 * C810 + C835 + C835 +
                     C91 * C826 + C106 * C811 + C836 + C836 + C92 * C827) *
                        C93706 * C93680 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C14742 * C108 + C14747 + C14747 + C93815 * C120 +
                      C14744 * C109 + C14748 + C14748 + C93590 * C121) *
                         C93706 * C14739 +
                     (C14742 * C807 + C14749 + C14749 + C93815 * C823 +
                      C14744 * C806 + C14750 + C14750 + C93590 * C822) *
                         C93706 * C14740 +
                     (C14742 * C808 + C14751 + C14751 + C93815 * C824 +
                      C14744 * C809 + C14752 + C14752 + C93590 * C825) *
                         C93706 * C14741) *
                        C93639 * C93625 * C97 -
                    ((C14744 * C810 + C14753 + C14753 + C93590 * C826 +
                      C14742 * C809 + C14754 + C14754 + C93815 * C825) *
                         C93706 * C14741 +
                     (C14744 * C805 + C14755 + C14755 + C93590 * C821 +
                      C14742 * C806 + C14756 + C14756 + C93815 * C822) *
                         C93706 * C14740 +
                     (C14744 * C110 + C14757 + C14757 + C93590 * C122 +
                      C14742 * C109 + C14758 + C14758 + C93815 * C121) *
                         C93706 * C14739) *
                        C93639 * C93625 * C98 +
                    ((C14742 * C110 + C14759 + C14759 + C93815 * C122 +
                      C14744 * C111 + C14760 + C14760 + C93590 * C123) *
                         C93706 * C14739 +
                     (C14742 * C805 + C14761 + C14761 + C93815 * C821 +
                      C14744 * C804 + C14762 + C14762 + C93590 * C820) *
                         C93706 * C14740 +
                     (C14742 * C810 + C14763 + C14763 + C93815 * C826 +
                      C14744 * C811 + C14764 + C14764 + C93590 * C827) *
                         C93706 * C14741) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C14742 * C108 + C14747 + C14747 + C93815 * C120 +
                      C14744 * C109 + C14748 + C14748 + C93590 * C121) *
                         C93706 * C14739 +
                     (C15585 + C15586) * C93706 * C14740 + C15592 * C14741) *
                        C93639 * C800 -
                    ((C15589 + C15590) * C93706 * C14741 +
                     (C15588 + C15587) * C93706 * C14740 +
                     (C15586 + C15585) * C93706 * C14739) *
                        C93639 * C801 +
                    (C15592 * C14739 + (C15590 + C15589) * C93706 * C14740 +
                     (C14742 * C15550 + C15571 + C15571 + C93815 * C15554 +
                      C14744 * C15551 + C15572 + C15572 + C93590 * C15555) *
                         C93706 * C14741) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C101 +
           (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C93706 * C93639 * C93625 * C97 -
          (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
           C220 * C103 + C219 * C89 + C218 * C101) *
              C93706 * C93639 * C93625 * C98 +
          (C220 * C101 + C221 * C89 + C222 * C103 + C223 * C90 + C225 * C105 +
           C224 * C91 + (C188 * C113 + C93680 * C194) * C107 +
           (C188 * C119 + C93680 * C200) * C92) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C93680 * C189) * C101 +
           (C188 * C114 + C93680 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C93706 * C93639 * C800 -
          ((C188 * C812 + C93680 * C894) * C92 +
           (C188 * C804 + C93680 * C886) * C107 +
           (C188 * C813 + C93680 * C895) * C91 +
           (C188 * C805 + C93680 * C887) * C105 +
           (C188 * C814 + C93680 * C896) * C90 +
           (C188 * C806 + C93680 * C888) * C103 +
           (C188 * C815 + C93680 * C897) * C89 +
           (C188 * C807 + C93680 * C889) * C101) *
              C93706 * C93639 * C801 +
          ((C188 * C808 + C93680 * C890) * C101 +
           (C188 * C816 + C93680 * C898) * C89 +
           (C188 * C809 + C93680 * C891) * C103 +
           (C188 * C817 + C93680 * C899) * C90 +
           (C188 * C810 + C93680 * C892) * C105 +
           (C188 * C818 + C93680 * C900) * C91 +
           (C188 * C811 + C93680 * C893) * C107 +
           (C188 * C819 + C93680 * C901) * C92) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C91732 +
           (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
            C14840 * C816 + C14741 * C898) *
               C93815 +
           (C14866 + C14867 + C14868) * C91722 +
           (C14869 + C14870 + C14871) * C93590) *
              C93706 * C93639 * C93625 * C97 -
          ((C14872 + C14873 + C14874) * C93590 +
           (C14875 + C14876 + C14877) * C91722 +
           (C14871 + C14870 + C14869) * C93815 +
           (C14868 + C14867 + C14866) * C91732) *
              C93706 * C93639 * C93625 * C98 +
          ((C14877 + C14876 + C14875) * C91732 +
           (C14874 + C14873 + C14872) * C93815 +
           (C14838 * C111 + C14739 * C192 + C14839 * C804 + C14740 * C886 +
            C14840 * C811 + C14741 * C893) *
               C91722 +
           (C14838 * C117 + C14739 * C198 + C14839 * C812 + C14740 * C894 +
            C14840 * C819 + C14741 * C901) *
               C93590) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C91732 +
           (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
            C14840 * C816 + C14741 * C898) *
               C93815 +
           (C14866 + C14867 + C14868) * C91722 +
           (C14869 + C14870 + C14871) * C93590) *
              C93706 * C93639 * C800 -
          ((C14840 * C4901 + C14741 * C5020 + C14839 * C817 + C14740 * C899 +
            C14838 * C814 + C14739 * C896) *
               C93590 +
           (C14840 * C4898 + C14741 * C5017 + C14839 * C809 + C14740 * C891 +
            C14838 * C806 + C14739 * C888) *
               C91722 +
           (C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
            C14838 * C815 + C14739 * C897) *
               C93815 +
           (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
            C14838 * C807 + C14739 * C889) *
               C91732) *
              C93706 * C93639 * C801 +
          ((C14838 * C808 + C14739 * C890 + C14839 * C4897 + C14740 * C5016 +
            C14840 * C15550 + C14741 * C15666) *
               C91732 +
           (C14838 * C816 + C14739 * C898 + C14839 * C4900 + C14740 * C5019 +
            C14840 * C15552 + C14741 * C15668) *
               C93815 +
           (C14838 * C809 + C14739 * C891 + C14839 * C4898 + C14740 * C5017 +
            C14840 * C15551 + C14741 * C15667) *
               C91722 +
           (C14838 * C817 + C14739 * C899 + C14839 * C4901 + C14740 * C5020 +
            C14840 * C15553 + C14741 * C15669) *
               C93590) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C101 +
           (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C93680 * C93639 * C93625 * C97 -
          (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
           C307 * C103 + C306 * C89 + C305 * C101) *
              C93680 * C93639 * C93625 * C98 +
          (C307 * C101 + C308 * C89 + C309 * C103 + C310 * C90 + C312 * C105 +
           C311 * C91 + (C275 * C113 + C93706 * C281) * C107 +
           (C275 * C119 + C93706 * C287) * C92) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C101 +
           (C275 * C114 + C93706 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C93680 * C93639 * C800 -
          ((C275 * C812 + C93706 * C960) * C92 +
           (C275 * C804 + C93706 * C952) * C107 +
           (C275 * C813 + C93706 * C961) * C91 +
           (C275 * C805 + C93706 * C953) * C105 +
           (C275 * C814 + C93706 * C962) * C90 +
           (C275 * C806 + C93706 * C954) * C103 +
           (C275 * C815 + C93706 * C963) * C89 +
           (C275 * C807 + C93706 * C955) * C101) *
              C93680 * C93639 * C801 +
          ((C275 * C808 + C93706 * C956) * C101 +
           (C275 * C816 + C93706 * C964) * C89 +
           (C275 * C809 + C93706 * C957) * C103 +
           (C275 * C817 + C93706 * C965) * C90 +
           (C275 * C810 + C93706 * C958) * C105 +
           (C275 * C818 + C93706 * C966) * C91 +
           (C275 * C811 + C93706 * C959) * C107 +
           (C275 * C819 + C93706 * C967) * C92) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C91732 +
            (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
            C306 * C93590) *
               C14739 +
           (C5123 * C91732 + C5124 * C93815 + C2162 * C91722 + C2161 * C93590) *
               C14740 +
           (C5130 * C91732 + C5129 * C93815 + C5128 * C91722 + C5127 * C93590) *
               C14741) *
              C93639 * C93625 * C97 -
          ((C5125 * C93590 + C5126 * C91722 + C5127 * C93815 + C5128 * C91732) *
               C14741 +
           (C2159 * C93590 + C2160 * C91722 + C2161 * C93815 + C2162 * C91732) *
               C14740 +
           (C308 * C93590 + C307 * C91722 + C306 * C93815 + C305 * C91732) *
               C14739) *
              C93639 * C93625 * C98 +
          ((C307 * C91732 + C308 * C93815 + C309 * C91722 + C310 * C93590) *
               C14739 +
           (C2160 * C91732 + C2159 * C93815 + C2158 * C91722 + C2157 * C93590) *
               C14740 +
           (C5126 * C91732 + C5125 * C93815 +
            (C275 * C811 + C93706 * C959) * C91722 +
            (C275 * C819 + C93706 * C967) * C93590) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C91732 +
            (C275 * C114 + C93706 * C282) * C93815 + C305 * C91722 +
            C306 * C93590) *
               C14739 +
           (C15749 + C15750 + C15751 + C15752) * C14740 + C15775 * C14741) *
              C93639 * C800 -
          ((C15771 + C15772 + C15773 + C15774) * C14741 +
           (C15756 + C15755 + C15754 + C15753) * C14740 +
           (C15752 + C15751 + C15750 + C15749) * C14739) *
              C93639 * C801 +
          (C15775 * C14739 + (C15774 + C15773 + C15772 + C15771) * C14740 +
           ((C275 * C15550 + C93706 * C15744) * C91732 +
            (C275 * C15552 + C93706 * C15746) * C93815 +
            (C275 * C15551 + C93706 * C15745) * C91722 +
            (C275 * C15553 + C93706 * C15747) * C93590) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C93680) *
              C93706 * C93639 * C93625 * C97 -
          ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
            C90 * C364 + C101 * C190 + C89 * C363) *
               C93680 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C188) *
              C93706 * C93639 * C93625 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C188 +
           (C101 * C191 + C89 * C364 + C103 * C192 + C90 * C365 + C105 * C193 +
            C91 * C366 + C107 * C194 + C92 * C367) *
               C93680) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C93680) *
              C93706 * C93639 * C800 -
          ((C107 * C886 + C92 * C1018 + C105 * C887 + C91 * C1019 +
            C103 * C888 + C90 * C1020 + C101 * C889 + C89 * C1021) *
               C93680 +
           (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
            C90 * C814 + C101 * C807 + C89 * C815) *
               C188) *
              C93706 * C93639 * C801 +
          ((C101 * C808 + C89 * C816 + C103 * C809 + C90 * C817 + C105 * C810 +
            C91 * C818 + C107 * C811 + C92 * C819) *
               C188 +
           (C101 * C890 + C89 * C1022 + C103 * C891 + C90 * C1023 +
            C105 * C892 + C91 * C1024 + C107 * C893 + C92 * C1025) *
               C93680) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C14838 +
           (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
               C14739 +
           (C91732 * C807 + C93815 * C815 + C91722 * C806 + C93590 * C814) *
               C14839 +
           (C91732 * C889 + C93815 * C1021 + C91722 * C888 + C93590 * C1020) *
               C14740 +
           (C91732 * C808 + C93815 * C816 + C91722 * C809 + C93590 * C817) *
               C14840 +
           (C91732 * C890 + C93815 * C1022 + C91722 * C891 + C93590 * C1023) *
               C14741) *
              C93706 * C93639 * C93625 * C97 -
          ((C91722 * C892 + C93590 * C1024 + C91732 * C891 + C93815 * C1023) *
               C14741 +
           (C91722 * C810 + C93590 * C818 + C91732 * C809 + C93815 * C817) *
               C14840 +
           (C91722 * C887 + C93590 * C1019 + C91732 * C888 + C93815 * C1020) *
               C14740 +
           (C91722 * C805 + C93590 * C813 + C91732 * C806 + C93815 * C814) *
               C14839 +
           (C91722 * C191 + C93590 * C364 + C91732 * C190 + C93815 * C363) *
               C14739 +
           (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
               C14838) *
              C93706 * C93639 * C93625 * C98 +
          ((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
               C14838 +
           (C91732 * C191 + C93815 * C364 + C91722 * C192 + C93590 * C365) *
               C14739 +
           (C91732 * C805 + C93815 * C813 + C91722 * C804 + C93590 * C812) *
               C14839 +
           (C91732 * C887 + C93815 * C1019 + C91722 * C886 + C93590 * C1018) *
               C14740 +
           (C91732 * C810 + C93815 * C818 + C91722 * C811 + C93590 * C819) *
               C14840 +
           (C91732 * C892 + C93815 * C1024 + C91722 * C893 + C93590 * C1025) *
               C14741) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
               C14838 +
           (C91732 * C189 + C93815 * C362 + C91722 * C190 + C93590 * C363) *
               C14739 +
           (C15876 + C15877) * C14839 + (C15878 + C15879) * C14740 +
           C15888 * C14840 + C15889 * C14741) *
              C93706 * C93639 * C800 -
          ((C15884 + C15885) * C14741 + (C15886 + C15887) * C14840 +
           (C15883 + C15882) * C14740 + (C15881 + C15880) * C14839 +
           (C15879 + C15878) * C14739 + (C15877 + C15876) * C14838) *
              C93706 * C93639 * C801 +
          (C15888 * C14838 + C15889 * C14739 + (C15887 + C15886) * C14839 +
           (C15885 + C15884) * C14740 +
           (C91732 * C15550 + C93815 * C15552 + C91722 * C15551 +
            C93590 * C15553) *
               C14840 +
           (C91732 * C15666 + C93815 * C15849 + C91722 * C15667 +
            C93590 * C15850) *
               C14741) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[64] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C418 * C108 + C426 + C426 + C93680 * C419) * C89 +
                     C448 * C90 + C449 * C91 + C450 * C92) *
                        C93706 * C93639 * C93625 * C97 -
                    (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                        C93706 * C93639 * C93625 * C98 +
                    (C449 * C89 + C450 * C90 + C451 * C91 +
                     (C418 * C113 + C439 + C439 + C93680 * C424) * C92) *
                        C93706 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C418 * C108 + C426 + C426 + C93680 * C419) * C89 +
                     C448 * C90 + C449 * C91 + C450 * C92) *
                        C93706 * C93639 * C800 -
                    ((C418 * C804 + C1085 + C1085 + C93680 * C1076) * C92 +
                     (C418 * C805 + C1086 + C1086 + C93680 * C1077) * C91 +
                     (C418 * C806 + C1087 + C1087 + C93680 * C1078) * C90 +
                     (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C89) *
                        C93706 * C93639 * C801 +
                    ((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C89 +
                     (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C90 +
                     (C418 * C810 + C1091 + C1091 + C93680 * C1082) * C91 +
                     (C418 * C811 + C1092 + C1092 + C93680 * C1083) * C92) *
                        C93706 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C15099 * C108 + C15103 + C15103 + C14739 * C419 +
                      C15100 * C807 + C15104 + C15104 + C14740 * C1079 +
                      C15101 * C808 + C15105 + C15105 + C14741 * C1080) *
                         C93815 +
                     (C15139 + C15140 + C15141) * C93590) *
                        C93706 * C93639 * C93625 * C97 -
                    ((C15142 + C15143 + C15144) * C93590 +
                     (C15141 + C15140 + C15139) * C93815) *
                        C93706 * C93639 * C93625 * C98 +
                    ((C15144 + C15143 + C15142) * C93815 +
                     (C15099 * C111 + C15124 + C15124 + C14739 * C422 +
                      C15100 * C804 + C15125 + C15125 + C14740 * C1076 +
                      C15101 * C811 + C15126 + C15126 + C14741 * C1083) *
                         C93590) *
                        C93706 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C15099 * C108 + C15103 + C15103 + C14739 * C419 +
                      C15100 * C807 + C15104 + C15104 + C14740 * C1079 +
                      C15101 * C808 + C15105 + C15105 + C14741 * C1080) *
                         C93815 +
                     (C15139 + C15140 + C15141) * C93590) *
                        C93706 * C93639 * C800 -
                    ((C15101 * C4898 + C15966 + C15966 + C14741 * C5326 +
                      C15100 * C809 + C15967 + C15967 + C14740 * C1081 +
                      C15099 * C806 + C15968 + C15968 + C14739 * C1078) *
                         C93590 +
                     (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 +
                      C15100 * C808 + C15970 + C15970 + C14740 * C1080 +
                      C15099 * C807 + C15971 + C15971 + C14739 * C1079) *
                         C93815) *
                        C93706 * C93639 * C801 +
                    ((C15099 * C808 + C15972 + C15972 + C14739 * C1080 +
                      C15100 * C4897 + C15973 + C15973 + C14740 * C5325 +
                      C15101 * C15550 + C15974 + C15974 + C14741 * C15963) *
                         C93815 +
                     (C15099 * C809 + C15975 + C15975 + C14739 * C1081 +
                      C15100 * C4898 + C15976 + C15976 + C14740 * C5326 +
                      C15101 * C15551 + C15977 + C15977 + C14741 * C15964) *
                         C93590) *
                        C93706 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C188 +
            (C275 * C189 + C93706 * C501) * C93680) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C93639 * C93625 * C97 -
          ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
           (C524 + C508) * C89) *
              C93639 * C93625 * C98 +
          (C528 * C89 + C529 * C90 + (C519 + C527) * C91 +
           ((C275 * C113 + C93706 * C281) * C188 +
            (C275 * C194 + C93706 * C506) * C93680) *
               C92) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C188 +
            (C275 * C189 + C93706 * C501) * C93680) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C93639 * C800 -
          (((C275 * C886 + C93706 * C1142) * C93680 +
            (C275 * C804 + C93706 * C952) * C188) *
               C92 +
           ((C275 * C887 + C93706 * C1143) * C93680 +
            (C275 * C805 + C93706 * C953) * C188) *
               C91 +
           ((C275 * C888 + C93706 * C1144) * C93680 +
            (C275 * C806 + C93706 * C954) * C188) *
               C90 +
           ((C275 * C889 + C93706 * C1145) * C93680 +
            (C275 * C807 + C93706 * C955) * C188) *
               C89) *
              C93639 * C801 +
          (((C275 * C808 + C93706 * C956) * C188 +
            (C275 * C890 + C93706 * C1146) * C93680) *
               C89 +
           ((C275 * C809 + C93706 * C957) * C188 +
            (C275 * C891 + C93706 * C1147) * C93680) *
               C90 +
           ((C275 * C810 + C93706 * C958) * C188 +
            (C275 * C892 + C93706 * C1148) * C93680) *
               C91 +
           ((C275 * C811 + C93706 * C959) * C188 +
            (C275 * C893 + C93706 * C1149) * C93680) *
               C92) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C14838 +
            (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
            C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
               C93815 +
           (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
              C93639 * C93625 * C97 -
          ((C15225 + C15226 + C15227 + C15228 + C15229 + C15230) * C93590 +
           (C15224 + C15223 + C15222 + C15221 + C15220 + C15219) * C93815) *
              C93639 * C93625 * C98 +
          ((C15230 + C15229 + C15228 + C15227 + C15226 + C15225) * C93815 +
           (C309 * C14838 + C522 * C14739 + C2158 * C14839 + C2389 * C14740 +
            (C275 * C811 + C93706 * C959) * C14840 +
            (C275 * C893 + C93706 * C1149) * C14741) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C14838 +
            (C275 * C189 + C93706 * C501) * C14739 + C5123 * C14839 +
            C5426 * C14740 + C5130 * C14840 + C5429 * C14741) *
               C93815 +
           (C15219 + C15220 + C15221 + C15222 + C15223 + C15224) * C93590) *
              C93639 * C800 -
          ((C16058 * C14741 + C15767 * C14840 + C5428 * C14740 +
            C5128 * C14839 + C2391 * C14739 + C2162 * C14838) *
               C93590 +
           (C16059 * C14741 + C15769 * C14840 + C5429 * C14740 +
            C5130 * C14839 + C5426 * C14739 + C5123 * C14838) *
               C93815) *
              C93639 * C801 +
          ((C5130 * C14838 + C5429 * C14739 + C15769 * C14839 +
            C16059 * C14740 + (C275 * C15550 + C93706 * C15744) * C14840 +
            (C275 * C15666 + C93706 * C16051) * C14741) *
               C93815 +
           (C5128 * C14838 + C5428 * C14739 + C15767 * C14839 +
            C16058 * C14740 + (C275 * C15551 + C93706 * C15745) * C14840 +
            (C275 * C15667 + C93706 * C16052) * C14741) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C93706) *
              C93680 * C93639 * C93625 * C97 -
          ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
            C90 * C581 + C101 * C277 + C89 * C580) *
               C93706 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C275) *
              C93680 * C93639 * C93625 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C275 +
           (C101 * C278 + C89 * C581 + C103 * C279 + C90 * C582 + C105 * C280 +
            C91 * C583 + C107 * C281 + C92 * C584) *
               C93706) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C93706) *
              C93680 * C93639 * C800 -
          ((C107 * C952 + C92 * C1200 + C105 * C953 + C91 * C1201 +
            C103 * C954 + C90 * C1202 + C101 * C955 + C89 * C1203) *
               C93706 +
           (C107 * C804 + C92 * C812 + C105 * C805 + C91 * C813 + C103 * C806 +
            C90 * C814 + C101 * C807 + C89 * C815) *
               C275) *
              C93680 * C93639 * C801 +
          ((C101 * C808 + C89 * C816 + C103 * C809 + C90 * C817 + C105 * C810 +
            C91 * C818 + C107 * C811 + C92 * C819) *
               C275 +
           (C101 * C956 + C89 * C1204 + C103 * C957 + C90 * C1205 +
            C105 * C958 + C91 * C1206 + C107 * C959 + C92 * C1207) *
               C93706) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C275 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C93706) *
               C14739 +
           ((C91732 * C807 + C93815 * C815 + C91722 * C806 + C93590 * C814) *
                C275 +
            (C91732 * C955 + C93815 * C1203 + C91722 * C954 + C93590 * C1202) *
                C93706) *
               C14740 +
           ((C91732 * C808 + C93815 * C816 + C91722 * C809 + C93590 * C817) *
                C275 +
            (C91732 * C956 + C93815 * C1204 + C91722 * C957 + C93590 * C1205) *
                C93706) *
               C14741) *
              C93639 * C93625 * C97 -
          (((C91722 * C958 + C93590 * C1206 + C91732 * C957 + C93815 * C1205) *
                C93706 +
            (C91722 * C810 + C93590 * C818 + C91732 * C809 + C93815 * C817) *
                C275) *
               C14741 +
           ((C91722 * C953 + C93590 * C1201 + C91732 * C954 + C93815 * C1202) *
                C93706 +
            (C91722 * C805 + C93590 * C813 + C91732 * C806 + C93815 * C814) *
                C275) *
               C14740 +
           ((C91722 * C278 + C93590 * C581 + C91732 * C277 + C93815 * C580) *
                C93706 +
            (C91722 * C110 + C93590 * C116 + C91732 * C109 + C93815 * C115) *
                C275) *
               C14739) *
              C93639 * C93625 * C98 +
          (((C91732 * C110 + C93815 * C116 + C91722 * C111 + C93590 * C117) *
                C275 +
            (C91732 * C278 + C93815 * C581 + C91722 * C279 + C93590 * C582) *
                C93706) *
               C14739 +
           ((C91732 * C805 + C93815 * C813 + C91722 * C804 + C93590 * C812) *
                C275 +
            (C91732 * C953 + C93815 * C1201 + C91722 * C952 + C93590 * C1200) *
                C93706) *
               C14740 +
           ((C91732 * C810 + C93815 * C818 + C91722 * C811 + C93590 * C819) *
                C275 +
            (C91732 * C958 + C93815 * C1206 + C91722 * C959 + C93590 * C1207) *
                C93706) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C91732 * C108 + C93815 * C114 + C91722 * C109 + C93590 * C115) *
                C275 +
            (C91732 * C276 + C93815 * C579 + C91722 * C277 + C93590 * C580) *
                C93706) *
               C14739 +
           ((C15876 + C15877) * C275 + (C16149 + C16150) * C93706) * C14740 +
           C16157 * C14741) *
              C93639 * C800 -
          (((C16153 + C16154) * C93706 + (C15886 + C15887) * C275) * C14741 +
           ((C16152 + C16151) * C93706 + (C15881 + C15880) * C275) * C14740 +
           ((C16150 + C16149) * C93706 + (C15877 + C15876) * C275) * C14739) *
              C93639 * C801 +
          (C16157 * C14739 +
           ((C15887 + C15886) * C275 + (C16154 + C16153) * C93706) * C14740 +
           ((C91732 * C15550 + C93815 * C15552 + C91722 * C15551 +
             C93590 * C15553) *
                C275 +
            (C91732 * C15744 + C93815 * C16133 + C91722 * C15745 +
             C93590 * C16134) *
                C93706) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[64] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C93680 * C189) * C275 +
                      (C188 * C276 + C93680 * C635) * C93706) *
                         C89 +
                     (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                        C93639 * C93625 * C97 -
                    ((C661 + C653) * C92 + (C660 + C648) * C91 +
                     (C659 + C645) * C90 + (C658 + C642) * C89) *
                        C93639 * C93625 * C98 +
                    (C662 * C89 + C663 * C90 + (C653 + C661) * C91 +
                     ((C188 * C113 + C93680 * C194) * C275 +
                      (C188 * C281 + C93680 * C640) * C93706) *
                         C92) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C93680 * C189) * C275 +
                      (C188 * C276 + C93680 * C635) * C93706) *
                         C89 +
                     (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                        C93639 * C800 -
                    (((C188 * C952 + C93680 * C1258) * C93706 +
                      (C188 * C804 + C93680 * C886) * C275) *
                         C92 +
                     ((C188 * C953 + C93680 * C1259) * C93706 +
                      (C188 * C805 + C93680 * C887) * C275) *
                         C91 +
                     ((C188 * C954 + C93680 * C1260) * C93706 +
                      (C188 * C806 + C93680 * C888) * C275) *
                         C90 +
                     ((C188 * C955 + C93680 * C1261) * C93706 +
                      (C188 * C807 + C93680 * C889) * C275) *
                         C89) *
                        C93639 * C801 +
                    (((C188 * C808 + C93680 * C890) * C275 +
                      (C188 * C956 + C93680 * C1262) * C93706) *
                         C89 +
                     ((C188 * C809 + C93680 * C891) * C275 +
                      (C188 * C957 + C93680 * C1263) * C93706) *
                         C90 +
                     ((C188 * C810 + C93680 * C892) * C275 +
                      (C188 * C958 + C93680 * C1264) * C93706) *
                         C91 +
                     ((C188 * C811 + C93680 * C893) * C275 +
                      (C188 * C959 + C93680 * C1265) * C93706) *
                         C92) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C14838 * C108 + C14739 * C189 + C14839 * C807 +
                       C14740 * C889 + C14840 * C808 + C14741 * C890) *
                          C275 +
                      (C14838 * C276 + C14739 * C635 + C14839 * C955 +
                       C14740 * C1261 + C14840 * C956 + C14741 * C1262) *
                          C93706) *
                         C93815 +
                     ((C14866 + C14867 + C14868) * C275 +
                      (C15391 + C15392 + C15393) * C93706) *
                         C93590) *
                        C93639 * C93625 * C97 -
                    (((C15394 + C15395 + C15396) * C93706 +
                      (C14875 + C14876 + C14877) * C275) *
                         C93590 +
                     ((C15393 + C15392 + C15391) * C93706 +
                      (C14868 + C14867 + C14866) * C275) *
                         C93815) *
                        C93639 * C93625 * C98 +
                    (((C14877 + C14876 + C14875) * C275 +
                      (C15396 + C15395 + C15394) * C93706) *
                         C93815 +
                     ((C14838 * C111 + C14739 * C192 + C14839 * C804 +
                       C14740 * C886 + C14840 * C811 + C14741 * C893) *
                          C275 +
                      (C14838 * C279 + C14739 * C638 + C14839 * C952 +
                       C14740 * C1258 + C14840 * C959 + C14741 * C1265) *
                          C93706) *
                         C93590) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C14838 * C108 + C14739 * C189 + C14839 * C807 +
                       C14740 * C889 + C14840 * C808 + C14741 * C890) *
                          C275 +
                      (C14838 * C276 + C14739 * C635 + C14839 * C955 +
                       C14740 * C1261 + C14840 * C956 + C14741 * C1262) *
                          C93706) *
                         C93815 +
                     ((C14866 + C14867 + C14868) * C275 +
                      (C15391 + C15392 + C15393) * C93706) *
                         C93590) *
                        C93639 * C800 -
                    (((C14840 * C5097 + C14741 * C5599 + C14839 * C957 +
                       C14740 * C1263 + C14838 * C954 + C14739 * C1260) *
                          C93706 +
                      (C14840 * C4898 + C14741 * C5017 + C14839 * C809 +
                       C14740 * C891 + C14838 * C806 + C14739 * C888) *
                          C275) *
                         C93590 +
                     ((C14840 * C5096 + C14741 * C5598 + C14839 * C956 +
                       C14740 * C1262 + C14838 * C955 + C14739 * C1261) *
                          C93706 +
                      (C14840 * C4897 + C14741 * C5016 + C14839 * C808 +
                       C14740 * C890 + C14838 * C807 + C14739 * C889) *
                          C275) *
                         C93815) *
                        C93639 * C801 +
                    (((C14838 * C808 + C14739 * C890 + C14839 * C4897 +
                       C14740 * C5016 + C14840 * C15550 + C14741 * C15666) *
                          C275 +
                      (C14838 * C956 + C14739 * C1262 + C14839 * C5096 +
                       C14740 * C5598 + C14840 * C15744 + C14741 * C16231) *
                          C93706) *
                         C93815 +
                     ((C14838 * C809 + C14739 * C891 + C14839 * C4898 +
                       C14740 * C5017 + C14840 * C15551 + C14741 * C15667) *
                          C275 +
                      (C14838 * C957 + C14739 * C1263 + C14839 * C5097 +
                       C14740 * C5599 + C14840 * C15745 + C14741 * C16232) *
                          C93706) *
                         C93590) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C93639 * C93625 * C97 -
          (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C93639 *
              C93625 * C98 +
          (C748 * C89 + C749 * C90 + C750 * C91 +
           (C713 * C113 + C734 + C734 + C93706 * C719) * C93680 * C92) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C93680 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C93639 * C800 -
          ((C713 * C804 + C1325 + C1325 + C93706 * C1316) * C93680 * C92 +
           (C713 * C805 + C1326 + C1326 + C93706 * C1317) * C93680 * C91 +
           (C713 * C806 + C1327 + C1327 + C93706 * C1318) * C93680 * C90 +
           (C713 * C807 + C1328 + C1328 + C93706 * C1319) * C93680 * C89) *
              C93639 * C801 +
          ((C713 * C808 + C1329 + C1329 + C93706 * C1320) * C93680 * C89 +
           (C713 * C809 + C1330 + C1330 + C93706 * C1321) * C93680 * C90 +
           (C713 * C810 + C1331 + C1331 + C93706 * C1322) * C93680 * C91 +
           (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C93680 * C92) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
            C5698 * C14740 + C5701 * C14741) *
               C93815 +
           (C15471 + C15472 + C15473) * C93590) *
              C93639 * C93625 * C97 -
          ((C15474 + C15475 + C15476) * C93590 +
           (C15473 + C15472 + C15471) * C93815) *
              C93639 * C93625 * C98 +
          ((C15476 + C15475 + C15474) * C93815 +
           (C745 * C14739 + C2624 * C14740 +
            (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C14741) *
               C93590) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C14739 +
            C5698 * C14740 + C5701 * C14741) *
               C93815 +
           (C15471 + C15472 + C15473) * C93590) *
              C93639 * C800 -
          ((C16320 * C14741 + C5700 * C14740 + C2626 * C14739) * C93590 +
           (C16321 * C14741 + C5701 * C14740 + C5698 * C14739) * C93815) *
              C93639 * C801 +
          ((C5701 * C14739 + C16321 * C14740 +
            (C713 * C15550 + C16314 + C16314 + C93706 * C16307) * C14741) *
               C93815 +
           (C5700 * C14739 + C16320 * C14740 +
            (C713 * C15551 + C16315 + C16315 + C93706 * C16308) * C14741) *
               C93590) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[65] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C4080 * C108 + C4087 + C4087 + C4075 * C120 +
                       C4082 * C109 + C4088 + C4088 + C4076 * C121 +
                       C4084 * C110 + C4089 + C4089 + C4077 * C122) *
                          C93706 * C93828 +
                      (C4937 + C4938 + C4939) * C93706 * C93694) *
                         C93639 * C1979 -
                     ((C4940 + C4941 + C4942) * C93706 * C93694 +
                      (C4939 + C4938 + C4937) * C93706 * C93828) *
                         C93639 * C1980) *
                        C1981 +
                    (((C6547 + C6548 + C6549) * C93706 * C93828 +
                      (C4080 * C809 + C6538 + C6538 + C4075 * C825 +
                       C4082 * C810 + C6539 + C6539 + C4076 * C826 +
                       C4084 * C811 + C6540 + C6540 + C4077 * C827) *
                          C93706 * C93694) *
                         C93639 * C1980 -
                     ((C6549 + C6548 + C6547) * C93706 * C93694 +
                      (C4084 * C111 + C4096 + C4096 + C4077 * C123 +
                       C4082 * C110 + C4097 + C4097 + C4076 * C122 +
                       C4080 * C109 + C4098 + C4098 + C4075 * C121) *
                          C93706 * C93828) *
                         C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) *
                          C93706 * C20044 +
                      C20558 * C20045 + C20559 * C20046 + C20560 * C20047) *
                         C93639 * C1979 -
                     (C20561 * C20047 + C20560 * C20046 + C20559 * C20045 +
                      C20558 * C20044) *
                         C93639 * C1980) *
                        C1981 +
                    ((C21613 * C20044 + C21614 * C20045 + C21615 * C20046 +
                      (C20048 * C15551 + C21603 + C21603 + C93585 * C15555) *
                          C93706 * C20047) *
                         C93639 * C1980 -
                     (C21615 * C20047 + C21614 * C20046 + C21613 * C20045 +
                      (C20048 * C109 + C20058 + C20058 + C93585 * C121) *
                          C93706 * C20044) *
                         C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C4081 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C4075 +
            (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
            C4218 * C4077) *
               C93706 * C93639 * C1979 -
           ((C6664 + C6665) * C4077 + (C6666 + C6667) * C4085 +
            (C6668 + C6669) * C4076 + (C6670 + C6671) * C4083 +
            (C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                C4075 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C4081) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C6671 + C6670) * C4081 + (C6669 + C6668) * C4075 +
            (C6667 + C6666) * C4083 + (C6665 + C6664) * C4076 +
            (C4178 * C804 + C93828 * C886 + C4179 * C811 + C93694 * C893) *
                C4085 +
            (C4178 * C812 + C93828 * C894 + C4179 * C819 + C93694 * C901) *
                C4077) *
               C93706 * C93639 * C1980 -
           ((C4213 + C4214) * C4077 + (C4215 + C4216) * C4085 +
            (C4212 + C4211) * C4076 + (C4210 + C4209) * C4083 +
            (C4208 + C4207) * C4075 + (C4206 + C4205) * C4081) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
             C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
                C20049 +
            (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
             C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
                C93585) *
               C93706 * C93639 * C1979 -
           ((C20115 * C15552 + C20047 * C15668 + C20114 * C4900 +
             C20046 * C5019 + C20113 * C816 + C20045 * C898 + C20112 * C815 +
             C20044 * C897) *
                C93585 +
            (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
             C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
             C20044 * C889) *
                C20049) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C20112 * C806 + C20044 * C888 + C20113 * C809 + C20045 * C891 +
             C20114 * C4898 + C20046 * C5017 + C20115 * C15551 +
             C20047 * C15667) *
                C20049 +
            (C20112 * C814 + C20044 * C896 + C20113 * C817 + C20045 * C899 +
             C20114 * C4901 + C20046 * C5020 + C20115 * C15553 +
             C20047 * C15669) *
                C93585) *
               C93706 * C93639 * C1980 -
           ((C20115 * C4901 + C20047 * C5020 + C20114 * C817 + C20046 * C899 +
             C20113 * C814 + C20045 * C896 + C20112 * C115 + C20044 * C196) *
                C93585 +
            (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
             C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
                C20049) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C4081 +
             (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
             C306 * C4076 + C307 * C4085 + C308 * C4077) *
                C93828 +
            (C5131 + C5132 + C5107 + C5108 + C5109 + C5110) * C93694) *
               C93639 * C1979 -
           ((C5133 + C5134 + C5135 + C5136 + C5137 + C5138) * C93694 +
            (C5110 + C5109 + C5108 + C5107 + C5132 + C5131) * C93828) *
               C93639 * C1980) *
              C1981 +
          (((C6770 + C6771 + C6772 + C6773 + C6774 + C6775) * C93828 +
            (C5128 * C4081 + C5127 * C4075 + C5126 * C4083 + C5125 * C4076 +
             (C275 * C811 + C93706 * C959) * C4085 +
             (C275 * C819 + C93706 * C967) * C4077) *
                C93694) *
               C93639 * C1980 -
           ((C6775 + C6774 + C6773 + C6772 + C6771 + C6770) * C93694 +
            (C310 * C4077 + C309 * C4085 + C308 * C4076 + C307 * C4083 +
             C306 * C4075 + C305 * C4081) *
                C93828) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C20049 +
             (C275 * C114 + C93706 * C282) * C93585) *
                C20044 +
            (C20666 + C20667) * C20045 + C20676 * C20046 + C20677 * C20047) *
               C93639 * C1979 -
           ((C20680 + C20681) * C20047 + (C20671 + C20670) * C20046 +
            (C20669 + C20668) * C20045 + (C20667 + C20666) * C20044) *
               C93639 * C1980) *
              C1981 +
          (((C21748 + C21749) * C20044 + (C21750 + C21751) * C20045 +
            (C21752 + C21753) * C20046 +
            ((C275 * C15551 + C93706 * C15745) * C20049 +
             (C275 * C15553 + C93706 * C15747) * C93585) *
                C20047) *
               C93639 * C1980 -
           ((C21753 + C21752) * C20047 + (C21751 + C21750) * C20046 +
            (C21749 + C21748) * C20045 +
            (C306 * C93585 + C305 * C20049) * C20044) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C4178 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93828 +
            (C5240 + C5241 + C5242) * C4179 +
            (C5243 + C5244 + C5245) * C93694) *
               C93706 * C93639 * C1979 -
           ((C5246 + C5247 + C5248) * C93694 + (C5249 + C5250 + C5251) * C4179 +
            (C5245 + C5244 + C5243) * C93828 +
            (C5242 + C5241 + C5240) * C4178) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C6886 + C6887 + C6888) * C4178 + (C6889 + C6890 + C6891) * C93828 +
            (C4081 * C809 + C4075 * C817 + C4083 * C810 + C4076 * C818 +
             C4085 * C811 + C4077 * C819) *
                C4179 +
            (C4081 * C891 + C4075 * C1023 + C4083 * C892 + C4076 * C1024 +
             C4085 * C893 + C4077 * C1025) *
                C93694) *
               C93706 * C93639 * C1980 -
           ((C6891 + C6890 + C6889) * C93694 + (C6888 + C6887 + C6886) * C4179 +
            (C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
             C4081 * C190 + C4075 * C363) *
                C93828 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C4178) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C20112 +
            (C20049 * C189 + C93585 * C362) * C20044 + C20749 * C20113 +
            C20750 * C20045 + C20751 * C20114 + C20752 * C20046 +
            C20753 * C20115 + C20754 * C20047) *
               C93706 * C93639 * C1979 -
           (C20755 * C20047 + C20756 * C20115 + C20754 * C20046 +
            C20753 * C20114 + C20752 * C20045 + C20751 * C20113 +
            C20750 * C20044 + C20749 * C20112) *
               C93706 * C93639 * C1980) *
              C1981 +
          ((C21832 * C20112 + C21833 * C20044 + C21834 * C20113 +
            C21835 * C20045 + C21836 * C20114 + C21837 * C20046 +
            (C20049 * C15551 + C93585 * C15553) * C20115 +
            (C20049 * C15667 + C93585 * C15850) * C20047) *
               C93706 * C93639 * C1980 -
           (C21837 * C20047 + C21836 * C20115 + C21835 * C20046 +
            C21834 * C20114 + C21833 * C20045 + C21832 * C20113 +
            (C20049 * C190 + C93585 * C363) * C20044 +
            (C20049 * C109 + C93585 * C115) * C20112) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
             C4444 + C4444 + C93694 * C1079) *
                C4075 +
            (C4477 + C4478) * C4076 + C4483 * C4077) *
               C93706 * C93639 * C1979 -
           ((C7008 + C7009) * C4077 + (C7010 + C7011) * C4076 +
            (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
             C5334 + C5334 + C93828 * C1079) *
                C4075) *
               C93706 * C93639 * C1980) *
              C1981 +
          (((C7011 + C7010) * C4075 + (C7009 + C7008) * C4076 +
            (C4440 * C804 + C6998 + C6998 + C93828 * C1076 + C4441 * C811 +
             C6999 + C6999 + C93694 * C1083) *
                C4077) *
               C93706 * C93639 * C1980 -
           ((C4481 + C4482) * C4077 + (C4480 + C4479) * C4076 +
            (C4478 + C4477) * C4075) *
               C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
            C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
            C20046 * C1080 + C20269 * C4897 + C20274 + C20274 +
            C20047 * C5325) *
               C93585 * C93706 * C93639 * C1979 -
           (C20269 * C15550 + C20808 + C20808 + C20047 * C15963 +
            C20268 * C4897 + C20809 + C20809 + C20046 * C5325 + C20267 * C808 +
            C20810 + C20810 + C20045 * C1080 + C20266 * C807 + C20811 + C20811 +
            C20044 * C1079) *
               C93585 * C93706 * C93639 * C1980) *
              C1981 +
          ((C20266 * C806 + C21904 + C21904 + C20044 * C1078 + C20267 * C809 +
            C21905 + C21905 + C20045 * C1081 + C20268 * C4898 + C21906 +
            C21906 + C20046 * C5326 + C20269 * C15551 + C21907 + C21907 +
            C20047 * C15964) *
               C93585 * C93706 * C93639 * C1980 -
           (C20269 * C4898 + C20275 + C20275 + C20047 * C5326 + C20268 * C809 +
            C20276 + C20276 + C20046 * C1081 + C20267 * C806 + C20277 + C20277 +
            C20045 * C1078 + C20266 * C109 + C20278 + C20278 + C20044 * C420) *
               C93585 * C93706 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C4178 +
             (C275 * C189 + C93706 * C501) * C93828 + C5123 * C4179 +
             C5426 * C93694) *
                C4075 +
            (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
               C93639 * C1979 -
           ((C7110 + C7111 + C7112 + C7113) * C4077 +
            (C7114 + C7115 + C7116 + C7117) * C4076 +
            (C5429 * C93694 + C5130 * C4179 + C5426 * C93828 + C5123 * C4178) *
                C4075) *
               C93639 * C1980) *
              C1981 +
          (((C7117 + C7116 + C7115 + C7114) * C4075 +
            (C7113 + C7112 + C7111 + C7110) * C4076 +
            (C2158 * C4178 + C2389 * C93828 +
             (C275 * C811 + C93706 * C959) * C4179 +
             (C275 * C893 + C93706 * C1149) * C93694) *
                C4077) *
               C93639 * C1980 -
           ((C4566 + C4567 + C4568 + C4569) * C4077 +
            (C4565 + C4564 + C4563 + C4562) * C4076 +
            (C4561 + C4560 + C4559 + C4558) * C4075) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20112 +
            (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
            C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
            C16059 * C20047) *
               C93585 * C93639 * C1979 -
           (C20869 * C20047 + C20679 * C20115 + C16059 * C20046 +
            C15769 * C20114 + C5429 * C20045 + C5130 * C20113 + C5426 * C20044 +
            C5123 * C20112) *
               C93585 * C93639 * C1980) *
              C1981 +
          ((C2162 * C20112 + C2391 * C20044 + C5128 * C20113 + C5428 * C20045 +
            C15767 * C20114 + C16058 * C20046 +
            (C275 * C15551 + C93706 * C15745) * C20115 +
            (C275 * C15667 + C93706 * C16052) * C20047) *
               C93585 * C93639 * C1980 -
           (C16058 * C20047 + C15767 * C20115 + C5428 * C20046 +
            C5128 * C20114 + C2391 * C20045 + C2162 * C20113 + C520 * C20044 +
            C305 * C20112) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezx[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
              C4085 * C110 + C4077 * C116) *
                 C275 +
             (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
              C4085 * C278 + C4077 * C581) *
                 C93706) *
                C93828 +
            ((C5240 + C5241 + C5242) * C275 +
             (C5519 + C5520 + C5521) * C93706) *
                C93694) *
               C93639 * C1979 -
           (((C5522 + C5523 + C5524) * C93706 +
             (C5249 + C5250 + C5251) * C275) *
                C93694 +
            ((C5521 + C5520 + C5519) * C93706 +
             (C5242 + C5241 + C5240) * C275) *
                C93828) *
               C93639 * C1980) *
              C1981 +
          ((((C6886 + C6887 + C6888) * C275 +
             (C7222 + C7223 + C7224) * C93706) *
                C93828 +
            ((C4081 * C809 + C4075 * C817 + C4083 * C810 + C4076 * C818 +
              C4085 * C811 + C4077 * C819) *
                 C275 +
             (C4081 * C957 + C4075 * C1205 + C4083 * C958 + C4076 * C1206 +
              C4085 * C959 + C4077 * C1207) *
                 C93706) *
                C93694) *
               C93639 * C1980 -
           (((C7224 + C7223 + C7222) * C93706 +
             (C6888 + C6887 + C6886) * C275) *
                C93694 +
            ((C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
              C4081 * C277 + C4075 * C580) *
                 C93706 +
             (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
              C4081 * C109 + C4075 * C115) *
                 C275) *
                C93828) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C275 +
             (C20049 * C276 + C93585 * C579) * C93706) *
                C20044 +
            (C20921 + C20937) * C20045 + C20941 * C20046 + C20942 * C20047) *
               C93639 * C1979 -
           ((C20940 + C20932) * C20047 + (C20939 + C20927) * C20046 +
            (C20938 + C20924) * C20045 + (C20937 + C20921) * C20044) *
               C93639 * C1980) *
              C1981 +
          (((C22040 + C22052) * C20044 + (C22043 + C22053) * C20045 +
            (C22046 + C22054) * C20046 +
            ((C20049 * C15551 + C93585 * C15553) * C275 +
             (C20049 * C15745 + C93585 * C16134) * C93706) *
                C20047) *
               C93639 * C1980 -
           ((C22054 + C22046) * C20047 + (C22053 + C22043) * C20046 +
            (C22052 + C22040) * C20045 +
            ((C20049 * C277 + C93585 * C580) * C93706 +
             (C20049 * C109 + C93585 * C115) * C275) *
                C20044) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C275 +
             (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                 C93706) *
                C4075 +
            ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
            C4742 * C4077) *
               C93639 * C1979 -
           (((C7331 + C7332) * C93706 + (C6666 + C6667) * C275) * C4077 +
            ((C7333 + C7334) * C93706 + (C6670 + C6671) * C275) * C4076 +
            ((C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                 C93706 +
             (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                 C275) *
                C4075) *
               C93639 * C1980) *
              C1981 +
          ((((C6671 + C6670) * C275 + (C7334 + C7333) * C93706) * C4075 +
            ((C6667 + C6666) * C275 + (C7332 + C7331) * C93706) * C4076 +
            ((C4178 * C804 + C93828 * C886 + C4179 * C811 + C93694 * C893) *
                 C275 +
             (C4178 * C952 + C93828 * C1258 + C4179 * C959 + C93694 * C1265) *
                 C93706) *
                C4077) *
               C93639 * C1980 -
           (((C4738 + C4739) * C93706 + (C4215 + C4216) * C275) * C4077 +
            ((C4737 + C4736) * C93706 + (C4210 + C4209) * C275) * C4076 +
            ((C4735 + C4734) * C93706 + (C4206 + C4205) * C275) * C4075) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
             C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
                C275 +
            (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
             C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
                C93706) *
               C93585 * C93639 * C1979 -
           ((C20115 * C15744 + C20047 * C16231 + C20114 * C5096 +
             C20046 * C5598 + C20113 * C956 + C20045 * C1262 + C20112 * C955 +
             C20044 * C1261) *
                C93706 +
            (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
             C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
             C20044 * C889) *
                C275) *
               C93585 * C93639 * C1980) *
              C1981 +
          (((C20112 * C806 + C20044 * C888 + C20113 * C809 + C20045 * C891 +
             C20114 * C4898 + C20046 * C5017 + C20115 * C15551 +
             C20047 * C15667) *
                C275 +
            (C20112 * C954 + C20044 * C1260 + C20113 * C957 + C20045 * C1263 +
             C20114 * C5097 + C20046 * C5599 + C20115 * C15745 +
             C20047 * C16232) *
                C93706) *
               C93585 * C93639 * C1980 -
           ((C20115 * C5097 + C20047 * C5599 + C20114 * C957 + C20046 * C1263 +
             C20113 * C954 + C20045 * C1260 + C20112 * C277 + C20044 * C636) *
                C93706 +
            (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
             C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
                C275) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
             C5698 * C93694) *
                C4075 +
            (C4817 + C4818) * C4076 + C4823 * C4077) *
               C93639 * C1979 -
           ((C7433 + C7434) * C4077 + (C7435 + C7436) * C4076 +
            (C5701 * C93694 + C5698 * C93828) * C4075) *
               C93639 * C1980) *
              C1981 +
          (((C7436 + C7435) * C4075 + (C7434 + C7433) * C4076 +
            (C2624 * C93828 +
             (C713 * C811 + C1332 + C1332 + C93706 * C1323) * C93694) *
                C4077) *
               C93639 * C1980 -
           ((C4821 + C4822) * C4077 + (C4820 + C4819) * C4076 +
            (C4818 + C4817) * C4075) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
            C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
               C93585 * C93639 * C1979 -
           (C21050 * C20047 + C16321 * C20046 + C5701 * C20045 +
            C5698 * C20044) *
               C93585 * C93639 * C1980) *
              C1981 +
          ((C2626 * C20044 + C5700 * C20045 + C16320 * C20046 +
            (C713 * C15551 + C16315 + C16315 + C93706 * C16308) * C20047) *
               C93585 * C93639 * C1980 -
           (C16320 * C20047 + C5700 * C20046 + C2626 * C20045 + C743 * C20044) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexx[66] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C4080 * C108 + C4087 + C4087 + C4075 * C120 +
                       C4082 * C109 + C4088 + C4088 + C4076 * C121 +
                       C4084 * C110 + C4089 + C4089 + C4077 * C122) *
                          C93706 * C93828 +
                      (C4937 + C4938 + C4939) * C93706 * C93694) *
                         C2695 -
                     ((C8545 + C8546 + C8547) * C93706 * C93694 +
                      (C4084 * C1386 + C5788 + C5788 + C4077 * C1402 +
                       C4082 * C1387 + C5789 + C5789 + C4076 * C1403 +
                       C4080 * C1388 + C5790 + C5790 + C4075 * C1404) *
                          C93706 * C93828) *
                         C2696) *
                        C1979 +
                    (((C8547 + C8546 + C8545) * C93706 * C93828 +
                      (C4080 * C8520 + C8536 + C8536 + C4075 * C8526 +
                       C4082 * C8521 + C8537 + C8537 + C4076 * C8527 +
                       C4084 * C8522 + C8538 + C8538 + C4077 * C8528) *
                          C93706 * C93694) *
                         C2696 -
                     ((C4940 + C4941 + C4942) * C93706 * C93694 +
                      (C4939 + C4938 + C4937) * C93706 * C93828) *
                         C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) *
                          C93706 * C20044 +
                      C20558 * C20045 + C20559 * C20046 + C20560 * C20047) *
                         C2695 -
                     (C22874 * C20047 + C22875 * C20046 + C22876 * C20045 +
                      (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) *
                          C93706 * C20044) *
                         C2696) *
                        C1979 +
                    ((C22876 * C20044 + C22875 * C20045 + C22874 * C20046 +
                      (C20048 * C22854 + C22864 + C22864 + C93585 * C22856) *
                          C93706 * C20047) *
                         C2696 -
                     (C20561 * C20047 + C20560 * C20046 + C20559 * C20045 +
                      C20558 * C20044) *
                         C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C4081 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C4075 +
            (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
            C4218 * C4077) *
               C93706 * C2695 -
           ((C7655 + C7656) * C4077 + (C7657 + C7658) * C4085 +
            (C7659 + C7660) * C4076 + (C7661 + C7662) * C4083 +
            (C4179 * C3413 + C93694 * C3495 + C4178 * C1396 + C93828 * C1478) *
                C4075 +
            (C4179 * C3409 + C93694 * C3491 + C4178 * C1388 + C93828 * C1470) *
                C4081) *
               C93706 * C2696) *
              C1979 +
          (((C4178 * C3409 + C93828 * C3491 + C4179 * C8520 + C93694 * C8645) *
                C4081 +
            (C4178 * C3413 + C93828 * C3495 + C4179 * C8523 + C93694 * C8648) *
                C4075 +
            (C4178 * C3410 + C93828 * C3492 + C4179 * C8521 + C93694 * C8646) *
                C4083 +
            (C4178 * C3414 + C93828 * C3496 + C4179 * C8524 + C93694 * C8649) *
                C4076 +
            (C4178 * C3411 + C93828 * C3493 + C4179 * C8522 + C93694 * C8647) *
                C4085 +
            (C4178 * C3415 + C93828 * C3497 + C4179 * C8525 + C93694 * C8650) *
                C4077) *
               C93706 * C2696 -
           ((C6664 + C6665) * C4077 + (C6666 + C6667) * C4085 +
            (C6668 + C6669) * C4076 + (C6670 + C6671) * C4083 +
            (C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
                C4075 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C4081) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
             C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
                C20049 +
            (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
             C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
                C93585) *
               C93706 * C2695 -
           ((C20115 * C19097 + C20047 * C19223 + C20114 * C8523 +
             C20046 * C8648 + C20113 * C3413 + C20045 * C3495 + C20112 * C1396 +
             C20044 * C1478) *
                C93585 +
            (C20115 * C19095 + C20047 * C19221 + C20114 * C8520 +
             C20046 * C8645 + C20113 * C3409 + C20045 * C3491 + C20112 * C1388 +
             C20044 * C1470) *
                C20049) *
               C93706 * C2696) *
              C1979 +
          (((C20112 * C3409 + C20044 * C3491 + C20113 * C8520 + C20045 * C8645 +
             C20114 * C19095 + C20046 * C19221 + C20115 * C22854 +
             C20047 * C22942) *
                C20049 +
            (C20112 * C3413 + C20044 * C3495 + C20113 * C8523 + C20045 * C8648 +
             C20114 * C19097 + C20046 * C19223 + C20115 * C22855 +
             C20047 * C22943) *
                C93585) *
               C93706 * C2696 -
           ((C20115 * C15552 + C20047 * C15668 + C20114 * C4900 +
             C20046 * C5019 + C20113 * C816 + C20045 * C898 + C20112 * C815 +
             C20044 * C897) *
                C93585 +
            (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
             C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
             C20044 * C889) *
                C20049) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C4081 +
             (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
             C306 * C4076 + C307 * C4085 + C308 * C4077) *
                C93828 +
            (C5131 + C5132 + C5107 + C5108 + C5109 + C5110) * C93694) *
               C2695 -
           ((C8756 + C8757 + C8758 + C8759 + C8766 + C8767) * C93694 +
            (C2873 * C4077 + C2874 * C4085 + C2875 * C4076 + C2876 * C4083 +
             (C275 * C1396 + C93706 * C1544) * C4075 +
             (C275 * C1388 + C93706 * C1536) * C4081) *
                C93828) *
               C2696) *
              C1979 +
          (((C8767 + C8766 + C8759 + C8758 + C8757 + C8756) * C93828 +
            ((C275 * C8520 + C93706 * C8749) * C4081 +
             (C275 * C8523 + C93706 * C8752) * C4075 +
             (C275 * C8521 + C93706 * C8750) * C4083 +
             (C275 * C8524 + C93706 * C8753) * C4076 +
             (C275 * C8522 + C93706 * C8751) * C4085 +
             (C275 * C8525 + C93706 * C8754) * C4077) *
                C93694) *
               C2696 -
           ((C5133 + C5134 + C5135 + C5136 + C5137 + C5138) * C93694 +
            (C5110 + C5109 + C5108 + C5107 + C5132 + C5131) * C93828) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C20049 +
             (C275 * C114 + C93706 * C282) * C93585) *
                C20044 +
            (C20666 + C20667) * C20045 + C20676 * C20046 + C20677 * C20047) *
               C2695 -
           ((C23023 + C23024) * C20047 + (C23017 + C23018) * C20046 +
            (C23019 + C23020) * C20045 +
            ((C275 * C1396 + C93706 * C1544) * C93585 +
             (C275 * C1388 + C93706 * C1536) * C20049) *
                C20044) *
               C2696) *
              C1979 +
          (((C23020 + C23019) * C20044 + (C23018 + C23017) * C20045 +
            (C23024 + C23023) * C20046 +
            ((C275 * C22854 + C93706 * C23010) * C20049 +
             (C275 * C22855 + C93706 * C23011) * C93585) *
                C20047) *
               C2696 -
           ((C20680 + C20681) * C20047 + (C20671 + C20670) * C20046 +
            (C20669 + C20668) * C20045 + (C20667 + C20666) * C20044) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C4178 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93828 +
            (C5240 + C5241 + C5242) * C4179 +
            (C5243 + C5244 + C5245) * C93694) *
               C93706 * C2695 -
           ((C8881 + C8882 + C8883) * C93694 + (C8884 + C8885 + C8886) * C4179 +
            (C4085 * C1468 + C4077 * C1600 + C4083 * C1469 + C4076 * C1601 +
             C4081 * C1470 + C4075 * C1602) *
                C93828 +
            (C4085 * C1386 + C4077 * C1394 + C4083 * C1387 + C4076 * C1395 +
             C4081 * C1388 + C4075 * C1396) *
                C4178) *
               C93706 * C2696) *
              C1979 +
          (((C8886 + C8885 + C8884) * C4178 + (C8883 + C8882 + C8881) * C93828 +
            (C4081 * C8520 + C4075 * C8523 + C4083 * C8521 + C4076 * C8524 +
             C4085 * C8522 + C4077 * C8525) *
                C4179 +
            (C4081 * C8645 + C4075 * C8865 + C4083 * C8646 + C4076 * C8866 +
             C4085 * C8647 + C4077 * C8867) *
                C93694) *
               C93706 * C2696 -
           ((C5246 + C5247 + C5248) * C93694 + (C5249 + C5250 + C5251) * C4179 +
            (C5245 + C5244 + C5243) * C93828 +
            (C5242 + C5241 + C5240) * C4178) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C20112 +
            (C20049 * C189 + C93585 * C362) * C20044 + C20749 * C20113 +
            C20750 * C20045 + C20751 * C20114 + C20752 * C20046 +
            C20753 * C20115 + C20754 * C20047) *
               C93706 * C2695 -
           (C23104 * C20047 + C23105 * C20115 + C23106 * C20046 +
            C23107 * C20114 + C23108 * C20045 + C23109 * C20113 +
            (C20049 * C1470 + C93585 * C1602) * C20044 +
            (C20049 * C1388 + C93585 * C1396) * C20112) *
               C93706 * C2696) *
              C1979 +
          ((C23109 * C20112 + C23108 * C20044 + C23107 * C20113 +
            C23106 * C20045 + C23105 * C20114 + C23104 * C20046 +
            (C20049 * C22854 + C93585 * C22855) * C20115 +
            (C20049 * C22942 + C93585 * C23090) * C20047) *
               C93706 * C2696 -
           (C20755 * C20047 + C20756 * C20115 + C20754 * C20046 +
            C20753 * C20114 + C20752 * C20045 + C20751 * C20113 +
            C20750 * C20044 + C20749 * C20112) *
               C93706 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[66] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 +
                       C4441 * C807 + C4444 + C4444 + C93694 * C1079) *
                          C4075 +
                      (C4477 + C4478) * C4076 + C4483 * C4077) *
                         C93706 * C2695 -
                     ((C7987 + C7988) * C4077 + (C7989 + C7990) * C4076 +
                      (C4441 * C3409 + C6115 + C6115 + C93694 * C3709 +
                       C4440 * C1388 + C6116 + C6116 + C93828 * C1660) *
                          C4075) *
                         C93706 * C2696) *
                        C1979 +
                    (((C4440 * C3409 + C8988 + C8988 + C93828 * C3709 +
                       C4441 * C8520 + C8989 + C8989 + C93694 * C8984) *
                          C4075 +
                      (C4440 * C3410 + C8990 + C8990 + C93828 * C3710 +
                       C4441 * C8521 + C8991 + C8991 + C93694 * C8985) *
                          C4076 +
                      (C4440 * C3411 + C8992 + C8992 + C93828 * C3711 +
                       C4441 * C8522 + C8993 + C8993 + C93694 * C8986) *
                          C4077) *
                         C93706 * C2696 -
                     ((C7008 + C7009) * C4077 + (C7010 + C7011) * C4076 +
                      (C4441 * C808 + C5333 + C5333 + C93694 * C1080 +
                       C4440 * C807 + C5334 + C5334 + C93828 * C1079) *
                          C4075) *
                         C93706 * C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C20266 * C108 + C20271 + C20271 + C20044 * C419 +
                      C20267 * C807 + C20272 + C20272 + C20045 * C1079 +
                      C20268 * C808 + C20273 + C20273 + C20046 * C1080 +
                      C20269 * C4897 + C20274 + C20274 + C20047 * C5325) *
                         C93585 * C93706 * C2695 -
                     (C20269 * C19095 + C21318 + C21318 + C20047 * C19563 +
                      C20268 * C8520 + C21319 + C21319 + C20046 * C8984 +
                      C20267 * C3409 + C21320 + C21320 + C20045 * C3709 +
                      C20266 * C1388 + C21321 + C21321 + C20044 * C1660) *
                         C93585 * C93706 * C2696) *
                        C1979 +
                    ((C20266 * C3409 + C23177 + C23177 + C20044 * C3709 +
                      C20267 * C8520 + C23178 + C23178 + C20045 * C8984 +
                      C20268 * C19095 + C23179 + C23179 + C20046 * C19563 +
                      C20269 * C22854 + C23180 + C23180 + C20047 * C23175) *
                         C93585 * C93706 * C2696 -
                     (C20269 * C15550 + C20808 + C20808 + C20047 * C15963 +
                      C20268 * C4897 + C20809 + C20809 + C20046 * C5325 +
                      C20267 * C808 + C20810 + C20810 + C20045 * C1080 +
                      C20266 * C807 + C20811 + C20811 + C20044 * C1079) *
                         C93585 * C93706 * C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C4178 +
             (C275 * C189 + C93706 * C501) * C93828 + C5123 * C4179 +
             C5426 * C93694) *
                C4075 +
            (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
               C2695 -
           ((C8101 + C8091 + C8092 + C8093) * C4077 +
            (C8102 + C8096 + C8097 + C8098) * C4076 +
            (C9097 * C93694 + C8765 * C4179 +
             (C275 * C1470 + C93706 * C1726) * C93828 +
             (C275 * C1388 + C93706 * C1536) * C4178) *
                C4075) *
               C2696) *
              C1979 +
          (((C8765 * C4178 + C9097 * C93828 +
             (C275 * C8520 + C93706 * C8749) * C4179 +
             (C275 * C8645 + C93706 * C9091) * C93694) *
                C4075 +
            (C7772 * C4178 + C8100 * C93828 +
             (C275 * C8521 + C93706 * C8750) * C4179 +
             (C275 * C8646 + C93706 * C9092) * C93694) *
                C4076 +
            (C7770 * C4178 + C8099 * C93828 +
             (C275 * C8522 + C93706 * C8751) * C4179 +
             (C275 * C8647 + C93706 * C9093) * C93694) *
                C4077) *
               C2696 -
           ((C7110 + C7111 + C7112 + C7113) * C4077 +
            (C7114 + C7115 + C7116 + C7117) * C4076 +
            (C5429 * C93694 + C5130 * C4179 + C5426 * C93828 + C5123 * C4178) *
                C4075) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20112 +
            (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
            C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
            C16059 * C20047) *
               C93585 * C2695 -
           (C23250 * C20047 + C23022 * C20115 + C19674 * C20046 +
            C19339 * C20114 + C9097 * C20045 + C8765 * C20113 +
            (C275 * C1470 + C93706 * C1726) * C20044 +
            (C275 * C1388 + C93706 * C1536) * C20112) *
               C93585 * C2696) *
              C1979 +
          ((C8765 * C20112 + C9097 * C20044 + C19339 * C20113 +
            C19674 * C20045 + C23022 * C20114 + C23250 * C20046 +
            (C275 * C22854 + C93706 * C23010) * C20115 +
            (C275 * C22942 + C93706 * C23246) * C20047) *
               C93585 * C2696 -
           (C20869 * C20047 + C20679 * C20115 + C16059 * C20046 +
            C15769 * C20114 + C5429 * C20045 + C5130 * C20113 + C5426 * C20044 +
            C5123 * C20112) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
              C4085 * C110 + C4077 * C116) *
                 C275 +
             (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
              C4085 * C278 + C4077 * C581) *
                 C93706) *
                C93828 +
            ((C5240 + C5241 + C5242) * C275 +
             (C5519 + C5520 + C5521) * C93706) *
                C93694) *
               C2695 -
           (((C9205 + C9206 + C9207) * C93706 +
             (C8884 + C8885 + C8886) * C275) *
                C93694 +
            ((C4085 * C1534 + C4077 * C1782 + C4083 * C1535 + C4076 * C1783 +
              C4081 * C1536 + C4075 * C1784) *
                 C93706 +
             (C4085 * C1386 + C4077 * C1394 + C4083 * C1387 + C4076 * C1395 +
              C4081 * C1388 + C4075 * C1396) *
                 C275) *
                C93828) *
               C2696) *
              C1979 +
          ((((C8886 + C8885 + C8884) * C275 +
             (C9207 + C9206 + C9205) * C93706) *
                C93828 +
            ((C4081 * C8520 + C4075 * C8523 + C4083 * C8521 + C4076 * C8524 +
              C4085 * C8522 + C4077 * C8525) *
                 C275 +
             (C4081 * C8749 + C4075 * C9195 + C4083 * C8750 + C4076 * C9196 +
              C4085 * C8751 + C4077 * C9197) *
                 C93706) *
                C93694) *
               C2696 -
           (((C5522 + C5523 + C5524) * C93706 +
             (C5249 + C5250 + C5251) * C275) *
                C93694 +
            ((C5521 + C5520 + C5519) * C93706 +
             (C5242 + C5241 + C5240) * C275) *
                C93828) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C275 +
             (C20049 * C276 + C93585 * C579) * C93706) *
                C20044 +
            (C20921 + C20937) * C20045 + C20941 * C20046 + C20942 * C20047) *
               C2695 -
           ((C23330 + C23320) * C20047 + (C23331 + C23323) * C20046 +
            (C23332 + C23326) * C20045 +
            ((C20049 * C1536 + C93585 * C1784) * C93706 +
             (C20049 * C1388 + C93585 * C1396) * C275) *
                C20044) *
               C2696) *
              C1979 +
          (((C23326 + C23332) * C20044 + (C23323 + C23331) * C20045 +
            (C23320 + C23330) * C20046 +
            ((C20049 * C22854 + C93585 * C22855) * C275 +
             (C20049 * C23010 + C93585 * C23316) * C93706) *
                C20047) *
               C2696 -
           ((C20940 + C20932) * C20047 + (C20939 + C20927) * C20046 +
            (C20938 + C20924) * C20045 + (C20937 + C20921) * C20044) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C275 +
             (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                 C93706) *
                C4075 +
            ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
            C4742 * C4077) *
               C2695 -
           (((C8307 + C8308) * C93706 + (C7657 + C7658) * C275) * C4077 +
            ((C8309 + C8310) * C93706 + (C7661 + C7662) * C275) * C4076 +
            ((C4179 * C3565 + C93694 * C3923 + C4178 * C1536 + C93828 * C1842) *
                 C93706 +
             (C4179 * C3409 + C93694 * C3491 + C4178 * C1388 + C93828 * C1470) *
                 C275) *
                C4075) *
               C2696) *
              C1979 +
          ((((C4178 * C3409 + C93828 * C3491 + C4179 * C8520 + C93694 * C8645) *
                 C275 +
             (C4178 * C3565 + C93828 * C3923 + C4179 * C8749 + C93694 * C9305) *
                 C93706) *
                C4075 +
            ((C4178 * C3410 + C93828 * C3492 + C4179 * C8521 + C93694 * C8646) *
                 C275 +
             (C4178 * C3566 + C93828 * C3924 + C4179 * C8750 + C93694 * C9306) *
                 C93706) *
                C4076 +
            ((C4178 * C3411 + C93828 * C3493 + C4179 * C8522 + C93694 * C8647) *
                 C275 +
             (C4178 * C3567 + C93828 * C3925 + C4179 * C8751 + C93694 * C9307) *
                 C93706) *
                C4077) *
               C2696 -
           (((C7331 + C7332) * C93706 + (C6666 + C6667) * C275) * C4077 +
            ((C7333 + C7334) * C93706 + (C6670 + C6671) * C275) * C4076 +
            ((C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                 C93706 +
             (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                 C275) *
                C4075) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
             C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
                C275 +
            (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
             C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
                C93706) *
               C93585 * C2695 -
           ((C20115 * C19323 + C20047 * C19884 + C20114 * C8749 +
             C20046 * C9305 + C20113 * C3565 + C20045 * C3923 + C20112 * C1536 +
             C20044 * C1842) *
                C93706 +
            (C20115 * C19095 + C20047 * C19221 + C20114 * C8520 +
             C20046 * C8645 + C20113 * C3409 + C20045 * C3491 + C20112 * C1388 +
             C20044 * C1470) *
                C275) *
               C93585 * C2696) *
              C1979 +
          (((C20112 * C3409 + C20044 * C3491 + C20113 * C8520 + C20045 * C8645 +
             C20114 * C19095 + C20046 * C19221 + C20115 * C22854 +
             C20047 * C22942) *
                C275 +
            (C20112 * C3565 + C20044 * C3923 + C20113 * C8749 + C20045 * C9305 +
             C20114 * C19323 + C20046 * C19884 + C20115 * C23010 +
             C20047 * C23398) *
                C93706) *
               C93585 * C2696 -
           ((C20115 * C15744 + C20047 * C16231 + C20114 * C5096 +
             C20046 * C5598 + C20113 * C956 + C20045 * C1262 + C20112 * C955 +
             C20044 * C1261) *
                C93706 +
            (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
             C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
             C20044 * C889) *
                C275) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
             C5698 * C93694) *
                C4075 +
            (C4817 + C4818) * C4076 + C4823 * C4077) *
               C2695 -
           ((C8421 + C8411) * C4077 + (C8422 + C8414) * C4076 +
            (C9417 * C93694 +
             (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93828) *
                C4075) *
               C2696) *
              C1979 +
          (((C9417 * C93828 +
             (C713 * C8520 + C9412 + C9412 + C93706 * C9406) * C93694) *
                C4075 +
            (C8420 * C93828 +
             (C713 * C8521 + C9413 + C9413 + C93706 * C9407) * C93694) *
                C4076 +
            (C8419 * C93828 +
             (C713 * C8522 + C9414 + C9414 + C93706 * C9408) * C93694) *
                C4077) *
               C2696 -
           ((C7433 + C7434) * C4077 + (C7435 + C7436) * C4076 +
            (C5701 * C93694 + C5698 * C93828) * C4075) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
            C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
               C93585 * C2695 -
           (C23472 * C20047 + C19993 * C20046 + C9417 * C20045 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C20044) *
               C93585 * C2696) *
              C1979 +
          ((C9417 * C20044 + C19993 * C20045 + C23472 * C20046 +
            (C713 * C22854 + C23469 + C23469 + C93706 * C23465) * C20047) *
               C93585 * C2696 -
           (C21050 * C20047 + C16321 * C20046 + C5701 * C20045 +
            C5698 * C20044) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93706 * C93828 +
           (C4937 + C4938 + C4939) * C93706 * C93694) *
              C93639 * C800 -
          ((C4940 + C4941 + C4942) * C93706 * C93694 +
           (C4939 + C4938 + C4937) * C93706 * C93828) *
              C93639 * C801 +
          ((C4942 + C4941 + C4940) * C93706 * C93828 +
           (C4080 * C4897 + C4922 + C4922 + C4075 * C4903 + C4082 * C4898 +
            C4923 + C4923 + C4076 * C4904 + C4084 * C4899 + C4924 + C4924 +
            C4077 * C4905) *
               C93706 * C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93706 * C93828 +
           (C4080 * C807 + C4090 + C4090 + C4075 * C823 + C4082 * C806 + C4091 +
            C4091 + C4076 * C822 + C4084 * C805 + C4092 + C4092 +
            C4077 * C821) *
               C93706 * C93694) *
              C93639 * C93625 * C97 -
          ((C4084 * C804 + C4093 + C4093 + C4077 * C820 + C4082 * C805 + C4094 +
            C4094 + C4076 * C821 + C4080 * C806 + C4095 + C4095 +
            C4075 * C822) *
               C93706 * C93694 +
           (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 + C4097 +
            C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
            C4075 * C121) *
               C93706 * C93828) *
              C93639 * C93625 * C98 +
          ((C4080 * C110 + C4099 + C4099 + C4075 * C122 + C4082 * C111 + C4100 +
            C4100 + C4076 * C123 + C4084 * C112 + C4101 + C4101 +
            C4077 * C124) *
               C93706 * C93828 +
           (C4080 * C805 + C4102 + C4102 + C4075 * C821 + C4082 * C804 + C4103 +
            C4103 + C4076 * C820 + C4084 * C1983 + C4104 + C4104 +
            C4077 * C1985) *
               C93706 * C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93706 * C93828 +
           (C4937 + C4938 + C4939) * C93706 * C93694) *
              C1382 -
          ((C4084 * C3411 + C5785 + C5785 + C4077 * C3419 + C4082 * C3410 +
            C5786 + C5786 + C4076 * C3418 + C4080 * C3409 + C5787 + C5787 +
            C4075 * C3417) *
               C93706 * C93694 +
           (C4084 * C1386 + C5788 + C5788 + C4077 * C1402 + C4082 * C1387 +
            C5789 + C5789 + C4076 * C1403 + C4080 * C1388 + C5790 + C5790 +
            C4075 * C1404) *
               C93706 * C93828) *
              C1383 +
          ((C4080 * C1389 + C5791 + C5791 + C4075 * C1405 + C4082 * C1390 +
            C5792 + C5792 + C4076 * C1406 + C4084 * C1391 + C5793 + C5793 +
            C4077 * C1407) *
               C93706 * C93828 +
           (C4080 * C5775 + C5794 + C5794 + C4075 * C5781 + C4082 * C5776 +
            C5795 + C5795 + C4076 * C5782 + C4084 * C5777 + C5796 + C5796 +
            C4077 * C5783) *
               C93706 * C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 * C20044 +
           (C20048 * C807 + C20052 + C20052 + C93585 * C823) * C93706 * C20045 +
           (C20048 * C808 + C20053 + C20053 + C93585 * C824) * C93706 * C20046 +
           (C20048 * C4897 + C20054 + C20054 + C93585 * C4903) * C93706 *
               C20047) *
              C93639 * C93625 * C97 -
          ((C20048 * C4898 + C20055 + C20055 + C93585 * C4904) * C93706 *
               C20047 +
           (C20048 * C809 + C20056 + C20056 + C93585 * C825) * C93706 * C20046 +
           (C20048 * C806 + C20057 + C20057 + C93585 * C822) * C93706 * C20045 +
           (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93706 *
               C20044) *
              C93639 * C93625 * C98 +
          ((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C93706 * C20044 +
           (C20048 * C805 + C20060 + C20060 + C93585 * C821) * C93706 * C20045 +
           (C20048 * C810 + C20061 + C20061 + C93585 * C826) * C93706 * C20046 +
           (C20048 * C4899 + C20062 + C20062 + C93585 * C4905) * C93706 *
               C20047) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 * C20044 +
           C20558 * C20045 + C20559 * C20046 + C20560 * C20047) *
              C93639 * C800 -
          (C20561 * C20047 + C20560 * C20046 + C20559 * C20045 +
           C20558 * C20044) *
              C93639 * C801 +
          (C20559 * C20044 + C20560 * C20045 + C20561 * C20046 +
           (C20048 * C20532 + C20545 + C20545 + C93585 * C20534) * C93706 *
               C20047) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 * C20044 +
           C20558 * C20045 + C20559 * C20046 + C20560 * C20047) *
              C1382 -
          ((C20048 * C19095 + C21104 + C21104 + C93585 * C19099) * C93706 *
               C20047 +
           (C20048 * C8520 + C21105 + C21105 + C93585 * C8526) * C93706 *
               C20046 +
           (C20048 * C3409 + C21106 + C21106 + C93585 * C3417) * C93706 *
               C20045 +
           (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) * C93706 *
               C20044) *
              C1383 +
          ((C20048 * C1389 + C21108 + C21108 + C93585 * C1405) * C93706 *
               C20044 +
           (C20048 * C5775 + C21109 + C21109 + C93585 * C5781) * C93706 *
               C20045 +
           (C20048 * C16395 + C21110 + C21110 + C93585 * C16399) * C93706 *
               C20046 +
           (C20048 * C21100 + C21111 + C21111 + C93585 * C21102) * C93706 *
               C20047) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C4081 +
           (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
               C4075 +
           (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
           C4218 * C4077) *
              C93706 * C93639 * C800 -
          ((C4179 * C818 + C93694 * C900 + C4178 * C813 + C93828 * C895) *
               C4077 +
           (C4179 * C810 + C93694 * C892 + C4178 * C805 + C93828 * C887) *
               C4085 +
           (C4179 * C817 + C93694 * C899 + C4178 * C814 + C93828 * C896) *
               C4076 +
           (C4179 * C809 + C93694 * C891 + C4178 * C806 + C93828 * C888) *
               C4083 +
           (C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
               C4075 +
           (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
               C4081) *
              C93706 * C93639 * C801 +
          ((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
               C4081 +
           (C4178 * C816 + C93828 * C898 + C4179 * C4900 + C93694 * C5019) *
               C4075 +
           (C4178 * C809 + C93828 * C891 + C4179 * C4898 + C93694 * C5017) *
               C4083 +
           (C4178 * C817 + C93828 * C899 + C4179 * C4901 + C93694 * C5020) *
               C4076 +
           (C4178 * C810 + C93828 * C892 + C4179 * C4899 + C93694 * C5018) *
               C4085 +
           (C4178 * C818 + C93828 * C900 + C4179 * C4902 + C93694 * C5021) *
               C4077) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C4081 +
           (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
               C4075 +
           (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
           C4218 * C4077) *
              C93706 * C93639 * C93625 * C97 -
          ((C4213 + C4214) * C4077 + (C4215 + C4216) * C4085 +
           (C4212 + C4211) * C4076 + (C4210 + C4209) * C4083 +
           (C4208 + C4207) * C4075 + (C4206 + C4205) * C4081) *
              C93706 * C93639 * C93625 * C98 +
          (C4217 * C4081 + C4218 * C4075 + (C4216 + C4215) * C4083 +
           (C4214 + C4213) * C4076 +
           (C4178 * C112 + C93828 * C193 + C4179 * C1983 + C93694 * C2056) *
               C4085 +
           (C4178 * C118 + C93828 * C199 + C4179 * C1984 + C93694 * C2057) *
               C4077) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C4081 +
           (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
               C4075 +
           (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
           C4218 * C4077) *
              C93706 * C1382 -
          ((C4179 * C3415 + C93694 * C3497 + C4178 * C1394 + C93828 * C1476) *
               C4077 +
           (C4179 * C3411 + C93694 * C3493 + C4178 * C1386 + C93828 * C1468) *
               C4085 +
           (C4179 * C3414 + C93694 * C3496 + C4178 * C1395 + C93828 * C1477) *
               C4076 +
           (C4179 * C3410 + C93694 * C3492 + C4178 * C1387 + C93828 * C1469) *
               C4083 +
           (C4179 * C3413 + C93694 * C3495 + C4178 * C1396 + C93828 * C1478) *
               C4075 +
           (C4179 * C3409 + C93694 * C3491 + C4178 * C1388 + C93828 * C1470) *
               C4081) *
              C93706 * C1383 +
          ((C4178 * C1389 + C93828 * C1471 + C4179 * C5775 + C93694 * C5870) *
               C4081 +
           (C4178 * C1397 + C93828 * C1479 + C4179 * C5778 + C93694 * C5873) *
               C4075 +
           (C4178 * C1390 + C93828 * C1472 + C4179 * C5776 + C93694 * C5871) *
               C4083 +
           (C4178 * C1398 + C93828 * C1480 + C4179 * C5779 + C93694 * C5874) *
               C4076 +
           (C4178 * C1391 + C93828 * C1473 + C4179 * C5777 + C93694 * C5872) *
               C4085 +
           (C4178 * C1399 + C93828 * C1481 + C4179 * C5780 + C93694 * C5875) *
               C4077) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C20049 +
           (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
            C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
               C93585) *
              C93706 * C93639 * C93625 * C97 -
          ((C20115 * C4901 + C20047 * C5020 + C20114 * C817 + C20046 * C899 +
            C20113 * C814 + C20045 * C896 + C20112 * C115 + C20044 * C196) *
               C93585 +
           (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
            C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
               C20049) *
              C93706 * C93639 * C93625 * C98 +
          ((C20112 * C110 + C20044 * C191 + C20113 * C805 + C20045 * C887 +
            C20114 * C810 + C20046 * C892 + C20115 * C4899 + C20047 * C5018) *
               C20049 +
           (C20112 * C116 + C20044 * C197 + C20113 * C813 + C20045 * C895 +
            C20114 * C818 + C20046 * C900 + C20115 * C4902 + C20047 * C5021) *
               C93585) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C20049 +
           (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
            C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
               C93585) *
              C93706 * C93639 * C800 -
          ((C20115 * C15552 + C20047 * C15668 + C20114 * C4900 +
            C20046 * C5019 + C20113 * C816 + C20045 * C898 + C20112 * C815 +
            C20044 * C897) *
               C93585 +
           (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
            C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
            C20044 * C889) *
               C20049) *
              C93706 * C93639 * C801 +
          ((C20112 * C808 + C20044 * C890 + C20113 * C4897 + C20045 * C5016 +
            C20114 * C15550 + C20046 * C15666 + C20115 * C20532 +
            C20047 * C20611) *
               C20049 +
           (C20112 * C816 + C20044 * C898 + C20113 * C4900 + C20045 * C5019 +
            C20114 * C15552 + C20046 * C15668 + C20115 * C20533 +
            C20047 * C20612) *
               C93585) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C20049 +
           (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
            C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
               C93585) *
              C93706 * C1382 -
          ((C20115 * C19097 + C20047 * C19223 + C20114 * C8523 +
            C20046 * C8648 + C20113 * C3413 + C20045 * C3495 + C20112 * C1396 +
            C20044 * C1478) *
               C93585 +
           (C20115 * C19095 + C20047 * C19221 + C20114 * C8520 +
            C20046 * C8645 + C20113 * C3409 + C20045 * C3491 + C20112 * C1388 +
            C20044 * C1470) *
               C20049) *
              C93706 * C1383 +
          ((C20112 * C1389 + C20044 * C1471 + C20113 * C5775 + C20045 * C5870 +
            C20114 * C16395 + C20046 * C16487 + C20115 * C21100 +
            C20047 * C21161) *
               C20049 +
           (C20112 * C1397 + C20044 * C1479 + C20113 * C5778 + C20045 * C5873 +
            C20114 * C16397 + C20046 * C16489 + C20115 * C21101 +
            C20047 * C21162) *
               C93585) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4081 +
            (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
            C306 * C4076 + C307 * C4085 + C308 * C4077) *
               C93828 +
           (C5131 + C5132 + C5107 + C5108 + C5109 + C5110) * C93694) *
              C93639 * C800 -
          ((C5133 + C5134 + C5135 + C5136 + C5137 + C5138) * C93694 +
           (C5110 + C5109 + C5108 + C5107 + C5132 + C5131) * C93828) *
              C93639 * C801 +
          ((C5138 + C5137 + C5136 + C5135 + C5134 + C5133) * C93828 +
           ((C275 * C4897 + C93706 * C5096) * C4081 +
            (C275 * C4900 + C93706 * C5099) * C4075 +
            (C275 * C4898 + C93706 * C5097) * C4083 +
            (C275 * C4901 + C93706 * C5100) * C4076 +
            (C275 * C4899 + C93706 * C5098) * C4085 +
            (C275 * C4902 + C93706 * C5101) * C4077) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4081 +
            (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
            C306 * C4076 + C307 * C4085 + C308 * C4077) *
               C93828 +
           ((C275 * C807 + C93706 * C955) * C4081 +
            (C275 * C815 + C93706 * C963) * C4075 + C2162 * C4083 +
            C2161 * C4076 + C2160 * C4085 + C2159 * C4077) *
               C93694) *
              C93639 * C93625 * C97 -
          ((C2157 * C4077 + C2158 * C4085 + C2159 * C4076 + C2160 * C4083 +
            C2161 * C4075 + C2162 * C4081) *
               C93694 +
           (C310 * C4077 + C309 * C4085 + C308 * C4076 + C307 * C4083 +
            C306 * C4075 + C305 * C4081) *
               C93828) *
              C93639 * C93625 * C98 +
          ((C307 * C4081 + C308 * C4075 + C309 * C4083 + C310 * C4076 +
            C312 * C4085 + C311 * C4077) *
               C93828 +
           (C2160 * C4081 + C2159 * C4075 + C2158 * C4083 + C2157 * C4076 +
            (C275 * C1983 + C93706 * C2142) * C4085 +
            (C275 * C1984 + C93706 * C2143) * C4077) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4081 +
            (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
            C306 * C4076 + C307 * C4085 + C308 * C4077) *
               C93828 +
           (C5131 + C5132 + C5107 + C5108 + C5109 + C5110) * C93694) *
              C1382 -
          (((C275 * C3415 + C93706 * C3571) * C4077 +
            (C275 * C3411 + C93706 * C3567) * C4085 +
            (C275 * C3414 + C93706 * C3570) * C4076 +
            (C275 * C3410 + C93706 * C3566) * C4083 +
            (C275 * C3413 + C93706 * C3569) * C4075 +
            (C275 * C3409 + C93706 * C3565) * C4081) *
               C93694 +
           (C2873 * C4077 + C2874 * C4085 + C2875 * C4076 + C2876 * C4083 +
            (C275 * C1396 + C93706 * C1544) * C4075 +
            (C275 * C1388 + C93706 * C1536) * C4081) *
               C93828) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C4081 +
            (C275 * C1397 + C93706 * C1545) * C4075 +
            (C275 * C1390 + C93706 * C1538) * C4083 +
            (C275 * C1398 + C93706 * C1546) * C4076 +
            (C275 * C1391 + C93706 * C1539) * C4085 +
            (C275 * C1399 + C93706 * C1547) * C4077) *
               C93828 +
           ((C275 * C5775 + C93706 * C5950) * C4081 +
            (C275 * C5778 + C93706 * C5953) * C4075 +
            (C275 * C5776 + C93706 * C5951) * C4083 +
            (C275 * C5779 + C93706 * C5954) * C4076 +
            (C275 * C5777 + C93706 * C5952) * C4085 +
            (C275 * C5780 + C93706 * C5955) * C4077) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20049 +
            (C275 * C114 + C93706 * C282) * C93585) *
               C20044 +
           (C5123 * C20049 + C5124 * C93585) * C20045 +
           (C5130 * C20049 + C5129 * C93585) * C20046 +
           (C15769 * C20049 + C15768 * C93585) * C20047) *
              C93639 * C93625 * C97 -
          ((C15766 * C93585 + C15767 * C20049) * C20047 +
           (C5127 * C93585 + C5128 * C20049) * C20046 +
           (C2161 * C93585 + C2162 * C20049) * C20045 +
           (C306 * C93585 + C305 * C20049) * C20044) *
              C93639 * C93625 * C98 +
          ((C307 * C20049 + C308 * C93585) * C20044 +
           (C2160 * C20049 + C2159 * C93585) * C20045 +
           (C5126 * C20049 + C5125 * C93585) * C20046 +
           ((C275 * C4899 + C93706 * C5098) * C20049 +
            (C275 * C4902 + C93706 * C5101) * C93585) *
               C20047) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20049 +
            (C275 * C114 + C93706 * C282) * C93585) *
               C20044 +
           (C20666 + C20667) * C20045 + C20676 * C20046 + C20677 * C20047) *
              C93639 * C800 -
          ((C20680 + C20681) * C20047 + (C20671 + C20670) * C20046 +
           (C20669 + C20668) * C20045 + (C20667 + C20666) * C20044) *
              C93639 * C801 +
          (C20676 * C20044 + C20677 * C20045 + (C20681 + C20680) * C20046 +
           ((C275 * C20532 + C93706 * C20663) * C20049 +
            (C275 * C20533 + C93706 * C20664) * C93585) *
               C20047) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20049 +
            (C275 * C114 + C93706 * C282) * C93585) *
               C20044 +
           (C20666 + C20667) * C20045 + C20676 * C20046 + C20677 * C20047) *
              C1382 -
          (((C275 * C19097 + C93706 * C19325) * C93585 +
            (C275 * C19095 + C93706 * C19323) * C20049) *
               C20047 +
           (C19338 * C93585 + C19339 * C20049) * C20046 +
           (C8764 * C93585 + C8765 * C20049) * C20045 +
           ((C275 * C1396 + C93706 * C1544) * C93585 +
            (C275 * C1388 + C93706 * C1536) * C20049) *
               C20044) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C20049 +
            (C275 * C1397 + C93706 * C1545) * C93585) *
               C20044 +
           ((C275 * C5775 + C93706 * C5950) * C20049 +
            (C275 * C5778 + C93706 * C5953) * C93585) *
               C20045 +
           ((C275 * C16395 + C93706 * C16565) * C20049 +
            (C275 * C16397 + C93706 * C16567) * C93585) *
               C20046 +
           ((C275 * C21100 + C93706 * C21213) * C20049 +
            (C275 * C21101 + C93706 * C21214) * C93585) *
               C20047) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C4178 +
           (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
            C4085 * C191 + C4077 * C364) *
               C93828 +
           (C5240 + C5241 + C5242) * C4179 + (C5243 + C5244 + C5245) * C93694) *
              C93706 * C93639 * C800 -
          ((C5246 + C5247 + C5248) * C93694 + (C5249 + C5250 + C5251) * C4179 +
           (C5245 + C5244 + C5243) * C93828 + (C5242 + C5241 + C5240) * C4178) *
              C93706 * C93639 * C801 +
          ((C5251 + C5250 + C5249) * C4178 + (C5248 + C5247 + C5246) * C93828 +
           (C4081 * C4897 + C4075 * C4900 + C4083 * C4898 + C4076 * C4901 +
            C4085 * C4899 + C4077 * C4902) *
               C4179 +
           (C4081 * C5016 + C4075 * C5212 + C4083 * C5017 + C4076 * C5213 +
            C4085 * C5018 + C4077 * C5214) *
               C93694) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C4178 +
           (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
            C4085 * C191 + C4077 * C364) *
               C93828 +
           (C4081 * C807 + C4075 * C815 + C4083 * C806 + C4076 * C814 +
            C4085 * C805 + C4077 * C813) *
               C4179 +
           (C4081 * C889 + C4075 * C1021 + C4083 * C888 + C4076 * C1020 +
            C4085 * C887 + C4077 * C1019) *
               C93694) *
              C93706 * C93639 * C93625 * C97 -
          ((C4085 * C886 + C4077 * C1018 + C4083 * C887 + C4076 * C1019 +
            C4081 * C888 + C4075 * C1020) *
               C93694 +
           (C4085 * C804 + C4077 * C812 + C4083 * C805 + C4076 * C813 +
            C4081 * C806 + C4075 * C814) *
               C4179 +
           (C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
            C4081 * C190 + C4075 * C363) *
               C93828 +
           (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
            C4081 * C109 + C4075 * C115) *
               C4178) *
              C93706 * C93639 * C93625 * C98 +
          ((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
            C4085 * C112 + C4077 * C118) *
               C4178 +
           (C4081 * C191 + C4075 * C364 + C4083 * C192 + C4076 * C365 +
            C4085 * C193 + C4077 * C366) *
               C93828 +
           (C4081 * C805 + C4075 * C813 + C4083 * C804 + C4076 * C812 +
            C4085 * C1983 + C4077 * C1984) *
               C4179 +
           (C4081 * C887 + C4075 * C1019 + C4083 * C886 + C4076 * C1018 +
            C4085 * C2056 + C4077 * C2228) *
               C93694) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C4178 +
           (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
            C4085 * C191 + C4077 * C364) *
               C93828 +
           (C5240 + C5241 + C5242) * C4179 + (C5243 + C5244 + C5245) * C93694) *
              C93706 * C1382 -
          ((C4085 * C3493 + C4077 * C3641 + C4083 * C3492 + C4076 * C3640 +
            C4081 * C3491 + C4075 * C3639) *
               C93694 +
           (C4085 * C3411 + C4077 * C3415 + C4083 * C3410 + C4076 * C3414 +
            C4081 * C3409 + C4075 * C3413) *
               C4179 +
           (C4085 * C1468 + C4077 * C1600 + C4083 * C1469 + C4076 * C1601 +
            C4081 * C1470 + C4075 * C1602) *
               C93828 +
           (C4085 * C1386 + C4077 * C1394 + C4083 * C1387 + C4076 * C1395 +
            C4081 * C1388 + C4075 * C1396) *
               C4178) *
              C93706 * C1383 +
          ((C4081 * C1389 + C4075 * C1397 + C4083 * C1390 + C4076 * C1398 +
            C4085 * C1391 + C4077 * C1399) *
               C4178 +
           (C4081 * C1471 + C4075 * C1603 + C4083 * C1472 + C4076 * C1604 +
            C4085 * C1473 + C4077 * C1605) *
               C93828 +
           (C4081 * C5775 + C4075 * C5778 + C4083 * C5776 + C4076 * C5779 +
            C4085 * C5777 + C4077 * C5780) *
               C4179 +
           (C4081 * C5870 + C4075 * C6030 + C4083 * C5871 + C4076 * C6031 +
            C4085 * C5872 + C4077 * C6032) *
               C93694) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C20112 +
           (C20049 * C189 + C93585 * C362) * C20044 +
           (C20049 * C807 + C93585 * C815) * C20113 +
           (C20049 * C889 + C93585 * C1021) * C20045 +
           (C20049 * C808 + C93585 * C816) * C20114 +
           (C20049 * C890 + C93585 * C1022) * C20046 +
           (C20049 * C4897 + C93585 * C4900) * C20115 +
           (C20049 * C5016 + C93585 * C5212) * C20047) *
              C93706 * C93639 * C93625 * C97 -
          ((C20049 * C5017 + C93585 * C5213) * C20047 +
           (C20049 * C4898 + C93585 * C4901) * C20115 +
           (C20049 * C891 + C93585 * C1023) * C20046 +
           (C20049 * C809 + C93585 * C817) * C20114 +
           (C20049 * C888 + C93585 * C1020) * C20045 +
           (C20049 * C806 + C93585 * C814) * C20113 +
           (C20049 * C190 + C93585 * C363) * C20044 +
           (C20049 * C109 + C93585 * C115) * C20112) *
              C93706 * C93639 * C93625 * C98 +
          ((C20049 * C110 + C93585 * C116) * C20112 +
           (C20049 * C191 + C93585 * C364) * C20044 +
           (C20049 * C805 + C93585 * C813) * C20113 +
           (C20049 * C887 + C93585 * C1019) * C20045 +
           (C20049 * C810 + C93585 * C818) * C20114 +
           (C20049 * C892 + C93585 * C1024) * C20046 +
           (C20049 * C4899 + C93585 * C4902) * C20115 +
           (C20049 * C5018 + C93585 * C5214) * C20047) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C20112 +
           (C20049 * C189 + C93585 * C362) * C20044 + C20749 * C20113 +
           C20750 * C20045 + C20751 * C20114 + C20752 * C20046 +
           C20753 * C20115 + C20754 * C20047) *
              C93706 * C93639 * C800 -
          (C20755 * C20047 + C20756 * C20115 + C20754 * C20046 +
           C20753 * C20114 + C20752 * C20045 + C20751 * C20113 +
           C20750 * C20044 + C20749 * C20112) *
              C93706 * C93639 * C801 +
          (C20751 * C20112 + C20752 * C20044 + C20753 * C20113 +
           C20754 * C20045 + C20756 * C20114 + C20755 * C20046 +
           (C20049 * C20532 + C93585 * C20533) * C20115 +
           (C20049 * C20611 + C93585 * C20731) * C20047) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C20112 +
           (C20049 * C189 + C93585 * C362) * C20044 + C20749 * C20113 +
           C20750 * C20045 + C20751 * C20114 + C20752 * C20046 +
           C20753 * C20115 + C20754 * C20047) *
              C93706 * C1382 -
          ((C20049 * C19221 + C93585 * C19439) * C20047 +
           (C20049 * C19095 + C93585 * C19097) * C20115 +
           (C20049 * C8645 + C93585 * C8865) * C20046 +
           (C20049 * C8520 + C93585 * C8523) * C20114 +
           (C20049 * C3491 + C93585 * C3639) * C20045 +
           (C20049 * C3409 + C93585 * C3413) * C20113 +
           (C20049 * C1470 + C93585 * C1602) * C20044 +
           (C20049 * C1388 + C93585 * C1396) * C20112) *
              C93706 * C1383 +
          ((C20049 * C1389 + C93585 * C1397) * C20112 +
           (C20049 * C1471 + C93585 * C1603) * C20044 +
           (C20049 * C5775 + C93585 * C5778) * C20113 +
           (C20049 * C5870 + C93585 * C6030) * C20045 +
           (C20049 * C16395 + C93585 * C16397) * C20114 +
           (C20049 * C16487 + C93585 * C16643) * C20046 +
           (C20049 * C21100 + C93585 * C21101) * C20115 +
           (C20049 * C21161 + C93585 * C21265) * C20047) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C4075 +
           (C4477 + C4478) * C4076 + C4483 * C4077) *
              C93706 * C93639 * C800 -
          ((C4441 * C810 + C5329 + C5329 + C93694 * C1082 + C4440 * C805 +
            C5330 + C5330 + C93828 * C1077) *
               C4077 +
           (C4441 * C809 + C5331 + C5331 + C93694 * C1081 + C4440 * C806 +
            C5332 + C5332 + C93828 * C1078) *
               C4076 +
           (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
            C5334 + C5334 + C93828 * C1079) *
               C4075) *
              C93706 * C93639 * C801 +
          ((C4440 * C808 + C5335 + C5335 + C93828 * C1080 + C4441 * C4897 +
            C5336 + C5336 + C93694 * C5325) *
               C4075 +
           (C4440 * C809 + C5337 + C5337 + C93828 * C1081 + C4441 * C4898 +
            C5338 + C5338 + C93694 * C5326) *
               C4076 +
           (C4440 * C810 + C5339 + C5339 + C93828 * C1082 + C4441 * C4899 +
            C5340 + C5340 + C93694 * C5327) *
               C4077) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C4075 +
           (C4477 + C4478) * C4076 + C4483 * C4077) *
              C93706 * C93639 * C93625 * C97 -
          ((C4481 + C4482) * C4077 + (C4480 + C4479) * C4076 +
           (C4478 + C4477) * C4075) *
              C93706 * C93639 * C93625 * C98 +
          (C4483 * C4075 + (C4482 + C4481) * C4076 +
           (C4440 * C112 + C4463 + C4463 + C93828 * C423 + C4441 * C1983 +
            C4464 + C4464 + C93694 * C2295) *
               C4077) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C4075 +
           (C4477 + C4478) * C4076 + C4483 * C4077) *
              C93706 * C1382 -
          ((C4441 * C3411 + C6111 + C6111 + C93694 * C3711 + C4440 * C1386 +
            C6112 + C6112 + C93828 * C1658) *
               C4077 +
           (C4441 * C3410 + C6113 + C6113 + C93694 * C3710 + C4440 * C1387 +
            C6114 + C6114 + C93828 * C1659) *
               C4076 +
           (C4441 * C3409 + C6115 + C6115 + C93694 * C3709 + C4440 * C1388 +
            C6116 + C6116 + C93828 * C1660) *
               C4075) *
              C93706 * C1383 +
          ((C4440 * C1389 + C6117 + C6117 + C93828 * C1661 + C4441 * C5775 +
            C6118 + C6118 + C93694 * C6107) *
               C4075 +
           (C4440 * C1390 + C6119 + C6119 + C93828 * C1662 + C4441 * C5776 +
            C6120 + C6120 + C93694 * C6108) *
               C4076 +
           (C4440 * C1391 + C6121 + C6121 + C93828 * C1663 + C4441 * C5777 +
            C6122 + C6122 + C93694 * C6109) *
               C4077) *
              C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
           C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
           C20046 * C1080 + C20269 * C4897 + C20274 + C20274 + C20047 * C5325) *
              C93585 * C93706 * C93639 * C93625 * C97 -
          (C20269 * C4898 + C20275 + C20275 + C20047 * C5326 + C20268 * C809 +
           C20276 + C20276 + C20046 * C1081 + C20267 * C806 + C20277 + C20277 +
           C20045 * C1078 + C20266 * C109 + C20278 + C20278 + C20044 * C420) *
              C93585 * C93706 * C93639 * C93625 * C98 +
          (C20266 * C110 + C20279 + C20279 + C20044 * C421 + C20267 * C805 +
           C20280 + C20280 + C20045 * C1077 + C20268 * C810 + C20281 + C20281 +
           C20046 * C1082 + C20269 * C4899 + C20282 + C20282 + C20047 * C5327) *
              C93585 * C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
           C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
           C20046 * C1080 + C20269 * C4897 + C20274 + C20274 + C20047 * C5325) *
              C93585 * C93706 * C93639 * C800 -
          (C20269 * C15550 + C20808 + C20808 + C20047 * C15963 +
           C20268 * C4897 + C20809 + C20809 + C20046 * C5325 + C20267 * C808 +
           C20810 + C20810 + C20045 * C1080 + C20266 * C807 + C20811 + C20811 +
           C20044 * C1079) *
              C93585 * C93706 * C93639 * C801 +
          (C20266 * C808 + C20812 + C20812 + C20044 * C1080 + C20267 * C4897 +
           C20813 + C20813 + C20045 * C5325 + C20268 * C15550 + C20814 +
           C20814 + C20046 * C15963 + C20269 * C20532 + C20815 + C20815 +
           C20047 * C20806) *
              C93585 * C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
           C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
           C20046 * C1080 + C20269 * C4897 + C20274 + C20274 + C20047 * C5325) *
              C93585 * C93706 * C1382 -
          (C20269 * C19095 + C21318 + C21318 + C20047 * C19563 +
           C20268 * C8520 + C21319 + C21319 + C20046 * C8984 + C20267 * C3409 +
           C21320 + C21320 + C20045 * C3709 + C20266 * C1388 + C21321 + C21321 +
           C20044 * C1660) *
              C93585 * C93706 * C1383 +
          (C20266 * C1389 + C21322 + C21322 + C20044 * C1661 + C20267 * C5775 +
           C21323 + C21323 + C20045 * C6107 + C20268 * C16395 + C21324 +
           C21324 + C20046 * C16719 + C20269 * C21100 + C21325 + C21325 +
           C20047 * C21316) *
              C93585 * C93706 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4178 +
            (C275 * C189 + C93706 * C501) * C93828 + C5123 * C4179 +
            C5426 * C93694) *
               C4075 +
           (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
              C93639 * C800 -
          ((C5427 * C93694 + C5126 * C4179 + C2390 * C93828 + C2160 * C4178) *
               C4077 +
           (C5428 * C93694 + C5128 * C4179 + C2391 * C93828 + C2162 * C4178) *
               C4076 +
           (C5429 * C93694 + C5130 * C4179 + C5426 * C93828 + C5123 * C4178) *
               C4075) *
              C93639 * C801 +
          ((C5130 * C4178 + C5429 * C93828 +
            (C275 * C4897 + C93706 * C5096) * C4179 +
            (C275 * C5016 + C93706 * C5414) * C93694) *
               C4075 +
           (C5128 * C4178 + C5428 * C93828 +
            (C275 * C4898 + C93706 * C5097) * C4179 +
            (C275 * C5017 + C93706 * C5415) * C93694) *
               C4076 +
           (C5126 * C4178 + C5427 * C93828 +
            (C275 * C4899 + C93706 * C5098) * C4179 +
            (C275 * C5018 + C93706 * C5416) * C93694) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4178 +
            (C275 * C189 + C93706 * C501) * C93828 +
            (C275 * C807 + C93706 * C955) * C4179 +
            (C275 * C889 + C93706 * C1145) * C93694) *
               C4075 +
           (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
              C93639 * C93625 * C97 -
          ((C4566 + C4567 + C4568 + C4569) * C4077 +
           (C4565 + C4564 + C4563 + C4562) * C4076 +
           (C4561 + C4560 + C4559 + C4558) * C4075) *
              C93639 * C93625 * C98 +
          (C4572 * C4075 + (C4569 + C4568 + C4567 + C4566) * C4076 +
           (C312 * C4178 + C523 * C93828 +
            (C275 * C1983 + C93706 * C2142) * C4179 +
            (C275 * C2056 + C93706 * C2378) * C93694) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4178 +
            (C275 * C189 + C93706 * C501) * C93828 + C5123 * C4179 +
            C5426 * C93694) *
               C4075 +
           (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
              C1382 -
          (((C275 * C3493 + C93706 * C3785) * C93694 +
            (C275 * C3411 + C93706 * C3567) * C4179 + C3104 * C93828 +
            C2874 * C4178) *
               C4077 +
           ((C275 * C3492 + C93706 * C3784) * C93694 +
            (C275 * C3410 + C93706 * C3566) * C4179 + C3105 * C93828 +
            C2876 * C4178) *
               C4076 +
           ((C275 * C3491 + C93706 * C3783) * C93694 +
            (C275 * C3409 + C93706 * C3565) * C4179 +
            (C275 * C1470 + C93706 * C1726) * C93828 +
            (C275 * C1388 + C93706 * C1536) * C4178) *
               C4075) *
              C1383 +
          (((C275 * C1389 + C93706 * C1537) * C4178 +
            (C275 * C1471 + C93706 * C1727) * C93828 +
            (C275 * C5775 + C93706 * C5950) * C4179 +
            (C275 * C5870 + C93706 * C6196) * C93694) *
               C4075 +
           ((C275 * C1390 + C93706 * C1538) * C4178 +
            (C275 * C1472 + C93706 * C1728) * C93828 +
            (C275 * C5776 + C93706 * C5951) * C4179 +
            (C275 * C5871 + C93706 * C6197) * C93694) *
               C4076 +
           ((C275 * C1391 + C93706 * C1539) * C4178 +
            (C275 * C1473 + C93706 * C1729) * C93828 +
            (C275 * C5777 + C93706 * C5952) * C4179 +
            (C275 * C5872 + C93706 * C6198) * C93694) *
               C4077) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C20112 +
           (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
           C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
           C16059 * C20047) *
              C93585 * C93639 * C93625 * C97 -
          (C16058 * C20047 + C15767 * C20115 + C5428 * C20046 + C5128 * C20114 +
           C2391 * C20045 + C2162 * C20113 + C520 * C20044 + C305 * C20112) *
              C93585 * C93639 * C93625 * C98 +
          (C307 * C20112 + C521 * C20044 + C2160 * C20113 + C2390 * C20045 +
           C5126 * C20114 + C5427 * C20046 +
           (C275 * C4899 + C93706 * C5098) * C20115 +
           (C275 * C5018 + C93706 * C5416) * C20047) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C20112 +
           (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
           C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
           C16059 * C20047) *
              C93585 * C93639 * C800 -
          (C20869 * C20047 + C20679 * C20115 + C16059 * C20046 +
           C15769 * C20114 + C5429 * C20045 + C5130 * C20113 + C5426 * C20044 +
           C5123 * C20112) *
              C93585 * C93639 * C801 +
          (C5130 * C20112 + C5429 * C20044 + C15769 * C20113 + C16059 * C20045 +
           C20679 * C20114 + C20869 * C20046 +
           (C275 * C20532 + C93706 * C20663) * C20115 +
           (C275 * C20611 + C93706 * C20865) * C20047) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C20112 +
           (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
           C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
           C16059 * C20047) *
              C93585 * C1382 -
          ((C275 * C19221 + C93706 * C19669) * C20047 +
           (C275 * C19095 + C93706 * C19323) * C20115 + C19674 * C20046 +
           C19339 * C20114 + C9097 * C20045 + C8765 * C20113 +
           (C275 * C1470 + C93706 * C1726) * C20044 +
           (C275 * C1388 + C93706 * C1536) * C20112) *
              C93585 * C1383 +
          ((C275 * C1389 + C93706 * C1537) * C20112 +
           (C275 * C1471 + C93706 * C1727) * C20044 +
           (C275 * C5775 + C93706 * C5950) * C20113 +
           (C275 * C5870 + C93706 * C6196) * C20045 +
           (C275 * C16395 + C93706 * C16565) * C20114 +
           (C275 * C16487 + C93706 * C16807) * C20046 +
           (C275 * C21100 + C93706 * C21213) * C20115 +
           (C275 * C21161 + C93706 * C21375) * C20047) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C275 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93706) *
               C93828 +
           ((C5240 + C5241 + C5242) * C275 + (C5519 + C5520 + C5521) * C93706) *
               C93694) *
              C93639 * C800 -
          (((C5522 + C5523 + C5524) * C93706 + (C5249 + C5250 + C5251) * C275) *
               C93694 +
           ((C5521 + C5520 + C5519) * C93706 + (C5242 + C5241 + C5240) * C275) *
               C93828) *
              C93639 * C801 +
          (((C5251 + C5250 + C5249) * C275 + (C5524 + C5523 + C5522) * C93706) *
               C93828 +
           ((C4081 * C4897 + C4075 * C4900 + C4083 * C4898 + C4076 * C4901 +
             C4085 * C4899 + C4077 * C4902) *
                C275 +
            (C4081 * C5096 + C4075 * C5503 + C4083 * C5097 + C4076 * C5504 +
             C4085 * C5098 + C4077 * C5505) *
                C93706) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C275 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93706) *
               C93828 +
           ((C4081 * C807 + C4075 * C815 + C4083 * C806 + C4076 * C814 +
             C4085 * C805 + C4077 * C813) *
                C275 +
            (C4081 * C955 + C4075 * C1203 + C4083 * C954 + C4076 * C1202 +
             C4085 * C953 + C4077 * C1201) *
                C93706) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C4085 * C952 + C4077 * C1200 + C4083 * C953 + C4076 * C1201 +
             C4081 * C954 + C4075 * C1202) *
                C93706 +
            (C4085 * C804 + C4077 * C812 + C4083 * C805 + C4076 * C813 +
             C4081 * C806 + C4075 * C814) *
                C275) *
               C93694 +
           ((C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
             C4081 * C277 + C4075 * C580) *
                C93706 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C275) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
             C4085 * C112 + C4077 * C118) *
                C275 +
            (C4081 * C278 + C4075 * C581 + C4083 * C279 + C4076 * C582 +
             C4085 * C280 + C4077 * C583) *
                C93706) *
               C93828 +
           ((C4081 * C805 + C4075 * C813 + C4083 * C804 + C4076 * C812 +
             C4085 * C1983 + C4077 * C1984) *
                C275 +
            (C4081 * C953 + C4075 * C1201 + C4083 * C952 + C4076 * C1200 +
             C4085 * C2142 + C4077 * C2460) *
                C93706) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C275 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93706) *
               C93828 +
           ((C5240 + C5241 + C5242) * C275 + (C5519 + C5520 + C5521) * C93706) *
               C93694) *
              C1382 -
          (((C4085 * C3567 + C4077 * C3855 + C4083 * C3566 + C4076 * C3854 +
             C4081 * C3565 + C4075 * C3853) *
                C93706 +
            (C4085 * C3411 + C4077 * C3415 + C4083 * C3410 + C4076 * C3414 +
             C4081 * C3409 + C4075 * C3413) *
                C275) *
               C93694 +
           ((C4085 * C1534 + C4077 * C1782 + C4083 * C1535 + C4076 * C1783 +
             C4081 * C1536 + C4075 * C1784) *
                C93706 +
            (C4085 * C1386 + C4077 * C1394 + C4083 * C1387 + C4076 * C1395 +
             C4081 * C1388 + C4075 * C1396) *
                C275) *
               C93828) *
              C1383 +
          (((C4081 * C1389 + C4075 * C1397 + C4083 * C1390 + C4076 * C1398 +
             C4085 * C1391 + C4077 * C1399) *
                C275 +
            (C4081 * C1537 + C4075 * C1785 + C4083 * C1538 + C4076 * C1786 +
             C4085 * C1539 + C4077 * C1787) *
                C93706) *
               C93828 +
           ((C4081 * C5775 + C4075 * C5778 + C4083 * C5776 + C4076 * C5779 +
             C4085 * C5777 + C4077 * C5780) *
                C275 +
            (C4081 * C5950 + C4075 * C6273 + C4083 * C5951 + C4076 * C6274 +
             C4085 * C5952 + C4077 * C6275) *
                C93706) *
               C93694) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C275 +
            (C20049 * C276 + C93585 * C579) * C93706) *
               C20044 +
           ((C20049 * C807 + C93585 * C815) * C275 +
            (C20049 * C955 + C93585 * C1203) * C93706) *
               C20045 +
           ((C20049 * C808 + C93585 * C816) * C275 +
            (C20049 * C956 + C93585 * C1204) * C93706) *
               C20046 +
           ((C20049 * C4897 + C93585 * C4900) * C275 +
            (C20049 * C5096 + C93585 * C5503) * C93706) *
               C20047) *
              C93639 * C93625 * C97 -
          (((C20049 * C5097 + C93585 * C5504) * C93706 +
            (C20049 * C4898 + C93585 * C4901) * C275) *
               C20047 +
           ((C20049 * C957 + C93585 * C1205) * C93706 +
            (C20049 * C809 + C93585 * C817) * C275) *
               C20046 +
           ((C20049 * C954 + C93585 * C1202) * C93706 +
            (C20049 * C806 + C93585 * C814) * C275) *
               C20045 +
           ((C20049 * C277 + C93585 * C580) * C93706 +
            (C20049 * C109 + C93585 * C115) * C275) *
               C20044) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C275 +
            (C20049 * C278 + C93585 * C581) * C93706) *
               C20044 +
           ((C20049 * C805 + C93585 * C813) * C275 +
            (C20049 * C953 + C93585 * C1201) * C93706) *
               C20045 +
           ((C20049 * C810 + C93585 * C818) * C275 +
            (C20049 * C958 + C93585 * C1206) * C93706) *
               C20046 +
           ((C20049 * C4899 + C93585 * C4902) * C275 +
            (C20049 * C5098 + C93585 * C5505) * C93706) *
               C20047) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C275 +
            (C20049 * C276 + C93585 * C579) * C93706) *
               C20044 +
           (C20921 + C20937) * C20045 + C20941 * C20046 + C20942 * C20047) *
              C93639 * C800 -
          ((C20940 + C20932) * C20047 + (C20939 + C20927) * C20046 +
           (C20938 + C20924) * C20045 + (C20937 + C20921) * C20044) *
              C93639 * C801 +
          (C20941 * C20044 + C20942 * C20045 + (C20932 + C20940) * C20046 +
           ((C20049 * C20532 + C93585 * C20533) * C275 +
            (C20049 * C20663 + C93585 * C20919) * C93706) *
               C20047) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C275 +
            (C20049 * C276 + C93585 * C579) * C93706) *
               C20044 +
           (C20921 + C20937) * C20045 + C20941 * C20046 + C20942 * C20047) *
              C1382 -
          (((C20049 * C19323 + C93585 * C19772) * C93706 +
            (C20049 * C19095 + C93585 * C19097) * C275) *
               C20047 +
           ((C20049 * C8749 + C93585 * C9195) * C93706 +
            (C20049 * C8520 + C93585 * C8523) * C275) *
               C20046 +
           ((C20049 * C3565 + C93585 * C3853) * C93706 +
            (C20049 * C3409 + C93585 * C3413) * C275) *
               C20045 +
           ((C20049 * C1536 + C93585 * C1784) * C93706 +
            (C20049 * C1388 + C93585 * C1396) * C275) *
               C20044) *
              C1383 +
          (((C20049 * C1389 + C93585 * C1397) * C275 +
            (C20049 * C1537 + C93585 * C1785) * C93706) *
               C20044 +
           ((C20049 * C5775 + C93585 * C5778) * C275 +
            (C20049 * C5950 + C93585 * C6273) * C93706) *
               C20045 +
           ((C20049 * C16395 + C93585 * C16397) * C275 +
            (C20049 * C16565 + C93585 * C16883) * C93706) *
               C20046 +
           ((C20049 * C21100 + C93585 * C21101) * C275 +
            (C20049 * C21213 + C93585 * C21426) * C93706) *
               C20047) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C275 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C93706) *
               C4075 +
           ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
           C4742 * C4077) *
              C93639 * C800 -
          (((C4179 * C958 + C93694 * C1264 + C4178 * C953 + C93828 * C1259) *
                C93706 +
            (C4179 * C810 + C93694 * C892 + C4178 * C805 + C93828 * C887) *
                C275) *
               C4077 +
           ((C4179 * C957 + C93694 * C1263 + C4178 * C954 + C93828 * C1260) *
                C93706 +
            (C4179 * C809 + C93694 * C891 + C4178 * C806 + C93828 * C888) *
                C275) *
               C4076 +
           ((C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                C93706 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C275) *
               C4075) *
              C93639 * C801 +
          (((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
                C275 +
            (C4178 * C956 + C93828 * C1262 + C4179 * C5096 + C93694 * C5598) *
                C93706) *
               C4075 +
           ((C4178 * C809 + C93828 * C891 + C4179 * C4898 + C93694 * C5017) *
                C275 +
            (C4178 * C957 + C93828 * C1263 + C4179 * C5097 + C93694 * C5599) *
                C93706) *
               C4076 +
           ((C4178 * C810 + C93828 * C892 + C4179 * C4899 + C93694 * C5018) *
                C275 +
            (C4178 * C958 + C93828 * C1264 + C4179 * C5098 + C93694 * C5600) *
                C93706) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C275 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C93706) *
               C4075 +
           ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
           C4742 * C4077) *
              C93639 * C93625 * C97 -
          (((C4738 + C4739) * C93706 + (C4215 + C4216) * C275) * C4077 +
           ((C4737 + C4736) * C93706 + (C4210 + C4209) * C275) * C4076 +
           ((C4735 + C4734) * C93706 + (C4206 + C4205) * C275) * C4075) *
              C93639 * C93625 * C98 +
          (C4742 * C4075 +
           ((C4216 + C4215) * C275 + (C4739 + C4738) * C93706) * C4076 +
           ((C4178 * C112 + C93828 * C193 + C4179 * C1983 + C93694 * C2056) *
                C275 +
            (C4178 * C280 + C93828 * C639 + C4179 * C2142 + C93694 * C2527) *
                C93706) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C275 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C93706) *
               C4075 +
           ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
           C4742 * C4077) *
              C1382 -
          (((C4179 * C3567 + C93694 * C3925 + C4178 * C1534 + C93828 * C1840) *
                C93706 +
            (C4179 * C3411 + C93694 * C3493 + C4178 * C1386 + C93828 * C1468) *
                C275) *
               C4077 +
           ((C4179 * C3566 + C93694 * C3924 + C4178 * C1535 + C93828 * C1841) *
                C93706 +
            (C4179 * C3410 + C93694 * C3492 + C4178 * C1387 + C93828 * C1469) *
                C275) *
               C4076 +
           ((C4179 * C3565 + C93694 * C3923 + C4178 * C1536 + C93828 * C1842) *
                C93706 +
            (C4179 * C3409 + C93694 * C3491 + C4178 * C1388 + C93828 * C1470) *
                C275) *
               C4075) *
              C1383 +
          (((C4178 * C1389 + C93828 * C1471 + C4179 * C5775 + C93694 * C5870) *
                C275 +
            (C4178 * C1537 + C93828 * C1843 + C4179 * C5950 + C93694 * C6350) *
                C93706) *
               C4075 +
           ((C4178 * C1390 + C93828 * C1472 + C4179 * C5776 + C93694 * C5871) *
                C275 +
            (C4178 * C1538 + C93828 * C1844 + C4179 * C5951 + C93694 * C6351) *
                C93706) *
               C4076 +
           ((C4178 * C1391 + C93828 * C1473 + C4179 * C5777 + C93694 * C5872) *
                C275 +
            (C4178 * C1539 + C93828 * C1845 + C4179 * C5952 + C93694 * C6352) *
                C93706) *
               C4077) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C275 +
           (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
            C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
               C93706) *
              C93585 * C93639 * C93625 * C97 -
          ((C20115 * C5097 + C20047 * C5599 + C20114 * C957 + C20046 * C1263 +
            C20113 * C954 + C20045 * C1260 + C20112 * C277 + C20044 * C636) *
               C93706 +
           (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
            C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
               C275) *
              C93585 * C93639 * C93625 * C98 +
          ((C20112 * C110 + C20044 * C191 + C20113 * C805 + C20045 * C887 +
            C20114 * C810 + C20046 * C892 + C20115 * C4899 + C20047 * C5018) *
               C275 +
           (C20112 * C278 + C20044 * C637 + C20113 * C953 + C20045 * C1259 +
            C20114 * C958 + C20046 * C1264 + C20115 * C5098 + C20047 * C5600) *
               C93706) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C275 +
           (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
            C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
               C93706) *
              C93585 * C93639 * C800 -
          ((C20115 * C15744 + C20047 * C16231 + C20114 * C5096 +
            C20046 * C5598 + C20113 * C956 + C20045 * C1262 + C20112 * C955 +
            C20044 * C1261) *
               C93706 +
           (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
            C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
            C20044 * C889) *
               C275) *
              C93585 * C93639 * C801 +
          ((C20112 * C808 + C20044 * C890 + C20113 * C4897 + C20045 * C5016 +
            C20114 * C15550 + C20046 * C15666 + C20115 * C20532 +
            C20047 * C20611) *
               C275 +
           (C20112 * C956 + C20044 * C1262 + C20113 * C5096 + C20045 * C5598 +
            C20114 * C15744 + C20046 * C16231 + C20115 * C20663 +
            C20047 * C20992) *
               C93706) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C275 +
           (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
            C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
               C93706) *
              C93585 * C1382 -
          ((C20115 * C19323 + C20047 * C19884 + C20114 * C8749 +
            C20046 * C9305 + C20113 * C3565 + C20045 * C3923 + C20112 * C1536 +
            C20044 * C1842) *
               C93706 +
           (C20115 * C19095 + C20047 * C19221 + C20114 * C8520 +
            C20046 * C8645 + C20113 * C3409 + C20045 * C3491 + C20112 * C1388 +
            C20044 * C1470) *
               C275) *
              C93585 * C1383 +
          ((C20112 * C1389 + C20044 * C1471 + C20113 * C5775 + C20045 * C5870 +
            C20114 * C16395 + C20046 * C16487 + C20115 * C21100 +
            C20047 * C21161) *
               C275 +
           (C20112 * C1537 + C20044 * C1843 + C20113 * C5950 + C20045 * C6350 +
            C20114 * C16565 + C20046 * C16959 + C20115 * C21213 +
            C20047 * C21477) *
               C93706) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
            C5698 * C93694) *
               C4075 +
           (C4817 + C4818) * C4076 + C4823 * C4077) *
              C93639 * C800 -
          ((C5699 * C93694 + C2625 * C93828) * C4077 +
           (C5700 * C93694 + C2626 * C93828) * C4076 +
           (C5701 * C93694 + C5698 * C93828) * C4075) *
              C93639 * C801 +
          ((C5701 * C93828 +
            (C713 * C4897 + C5687 + C5687 + C93706 * C5675) * C93694) *
               C4075 +
           (C5700 * C93828 +
            (C713 * C4898 + C5688 + C5688 + C93706 * C5676) * C93694) *
               C4076 +
           (C5699 * C93828 +
            (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C93694) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
            (C713 * C807 + C1328 + C1328 + C93706 * C1319) * C93694) *
               C4075 +
           (C4817 + C4818) * C4076 + C4823 * C4077) *
              C93639 * C93625 * C97 -
          ((C4821 + C4822) * C4077 + (C4820 + C4819) * C4076 +
           (C4818 + C4817) * C4075) *
              C93639 * C93625 * C98 +
          (C4823 * C4075 + (C4822 + C4821) * C4076 +
           (C746 * C93828 +
            (C713 * C1983 + C2617 + C2617 + C93706 * C2609) * C93694) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
            C5698 * C93694) *
               C4075 +
           (C4817 + C4818) * C4076 + C4823 * C4077) *
              C1382 -
          (((C713 * C3411 + C4000 + C4000 + C93706 * C3995) * C93694 +
            C3339 * C93828) *
               C4077 +
           ((C713 * C3410 + C3999 + C3999 + C93706 * C3994) * C93694 +
            C3340 * C93828) *
               C4076 +
           ((C713 * C3409 + C3998 + C3998 + C93706 * C3993) * C93694 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93828) *
               C4075) *
              C1383 +
          (((C713 * C1389 + C1910 + C1910 + C93706 * C1901) * C93828 +
            (C713 * C5775 + C6431 + C6431 + C93706 * C6427) * C93694) *
               C4075 +
           ((C713 * C1390 + C1911 + C1911 + C93706 * C1902) * C93828 +
            (C713 * C5776 + C6432 + C6432 + C93706 * C6428) * C93694) *
               C4076 +
           ((C713 * C1391 + C1912 + C1912 + C93706 * C1903) * C93828 +
            (C713 * C5777 + C6433 + C6433 + C93706 * C6429) * C93694) *
               C4077) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
           C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
              C93585 * C93639 * C93625 * C97 -
          (C16320 * C20047 + C5700 * C20046 + C2626 * C20045 + C743 * C20044) *
              C93585 * C93639 * C93625 * C98 +
          (C744 * C20044 + C2625 * C20045 + C5699 * C20046 +
           (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C20047) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
           C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
              C93585 * C93639 * C800 -
          (C21050 * C20047 + C16321 * C20046 + C5701 * C20045 +
           C5698 * C20044) *
              C93585 * C93639 * C801 +
          (C5701 * C20044 + C16321 * C20045 + C21050 * C20046 +
           (C713 * C20532 + C21047 + C21047 + C93706 * C21043) * C20047) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
           C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
              C93585 * C1382 -
          ((C713 * C19095 + C19989 + C19989 + C93706 * C19984) * C20047 +
           C19993 * C20046 + C9417 * C20045 +
           (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C20044) *
              C93585 * C1383 +
          ((C713 * C1389 + C1910 + C1910 + C93706 * C1901) * C20044 +
           (C713 * C5775 + C6431 + C6431 + C93706 * C6427) * C20045 +
           (C713 * C16395 + C17038 + C17038 + C93706 * C17035) * C20046 +
           (C713 * C21100 + C21530 + C21530 + C93706 * C21528) * C20047) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C4080 * C108 + C4087 + C4087 + C4075 * C120 +
                       C4082 * C109 + C4088 + C4088 + C4076 * C121 +
                       C4084 * C110 + C4089 + C4089 + C4077 * C122) *
                          C93706 * C93828 +
                      (C4937 + C4938 + C4939) * C93706 * C93694) *
                         C2695 -
                     ((C4084 * C3411 + C5785 + C5785 + C4077 * C3419 +
                       C4082 * C3410 + C5786 + C5786 + C4076 * C3418 +
                       C4080 * C3409 + C5787 + C5787 + C4075 * C3417) *
                          C93706 * C93694 +
                      (C4084 * C1386 + C5788 + C5788 + C4077 * C1402 +
                       C4082 * C1387 + C5789 + C5789 + C4076 * C1403 +
                       C4080 * C1388 + C5790 + C5790 + C4075 * C1404) *
                          C93706 * C93828) *
                         C2696) *
                        C93625 * C1981 +
                    (((C4080 * C1387 + C7535 + C7535 + C4075 * C1403 +
                       C4082 * C1386 + C7536 + C7536 + C4076 * C1402 +
                       C4084 * C1385 + C7537 + C7537 + C4077 * C1401) *
                          C93706 * C93828 +
                      (C4080 * C3410 + C7538 + C7538 + C4075 * C3418 +
                       C4082 * C3411 + C7539 + C7539 + C4076 * C3419 +
                       C4084 * C3412 + C7540 + C7540 + C4077 * C3420) *
                          C93706 * C93694) *
                         C2696 -
                     ((C6549 + C6548 + C6547) * C93706 * C93694 +
                      (C4084 * C111 + C4096 + C4096 + C4077 * C123 +
                       C4082 * C110 + C4097 + C4097 + C4076 * C122 +
                       C4080 * C109 + C4098 + C4098 + C4075 * C121) *
                          C93706 * C93828) *
                         C2695) *
                        C93625 * C1982)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) *
                          C93706 * C20044 +
                      C20558 * C20045 + C20559 * C20046 + C20560 * C20047) *
                         C2695 -
                     ((C20048 * C19095 + C21104 + C21104 + C93585 * C19099) *
                          C93706 * C20047 +
                      (C20048 * C8520 + C21105 + C21105 + C93585 * C8526) *
                          C93706 * C20046 +
                      (C20048 * C3409 + C21106 + C21106 + C93585 * C3417) *
                          C93706 * C20045 +
                      (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) *
                          C93706 * C20044) *
                         C2696) *
                        C93625 * C1981 +
                    (((C20048 * C1387 + C22253 + C22253 + C93585 * C1403) *
                          C93706 * C20044 +
                      (C20048 * C3410 + C22254 + C22254 + C93585 * C3418) *
                          C93706 * C20045 +
                      (C20048 * C8521 + C22255 + C22255 + C93585 * C8527) *
                          C93706 * C20046 +
                      (C20048 * C19096 + C22256 + C22256 + C93585 * C19100) *
                          C93706 * C20047) *
                         C2696 -
                     (C21615 * C20047 + C21614 * C20046 + C21613 * C20045 +
                      (C20048 * C109 + C20058 + C20058 + C93585 * C121) *
                          C93706 * C20044) *
                         C2695) *
                        C93625 * C1982)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C4081 +
            (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
                C4075 +
            (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
            C4218 * C4077) *
               C93706 * C2695 -
           ((C7655 + C7656) * C4077 + (C7657 + C7658) * C4085 +
            (C7659 + C7660) * C4076 + (C7661 + C7662) * C4083 +
            (C4179 * C3413 + C93694 * C3495 + C4178 * C1396 + C93828 * C1478) *
                C4075 +
            (C4179 * C3409 + C93694 * C3491 + C4178 * C1388 + C93828 * C1470) *
                C4081) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C7662 + C7661) * C4081 + (C7660 + C7659) * C4075 +
            (C7658 + C7657) * C4083 + (C7656 + C7655) * C4076 +
            (C4178 * C1385 + C93828 * C1467 + C4179 * C3412 + C93694 * C3494) *
                C4085 +
            (C4178 * C1393 + C93828 * C1475 + C4179 * C3416 + C93694 * C3498) *
                C4077) *
               C93706 * C2696 -
           ((C4213 + C4214) * C4077 + (C4215 + C4216) * C4085 +
            (C4212 + C4211) * C4076 + (C4210 + C4209) * C4083 +
            (C4208 + C4207) * C4075 + (C4206 + C4205) * C4081) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
             C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
                C20049 +
            (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
             C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
                C93585) *
               C93706 * C2695 -
           ((C20115 * C19097 + C20047 * C19223 + C20114 * C8523 +
             C20046 * C8648 + C20113 * C3413 + C20045 * C3495 + C20112 * C1396 +
             C20044 * C1478) *
                C93585 +
            (C20115 * C19095 + C20047 * C19221 + C20114 * C8520 +
             C20046 * C8645 + C20113 * C3409 + C20045 * C3491 + C20112 * C1388 +
             C20044 * C1470) *
                C20049) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C20112 * C1387 + C20044 * C1469 + C20113 * C3410 + C20045 * C3492 +
             C20114 * C8521 + C20046 * C8646 + C20115 * C19096 +
             C20047 * C19222) *
                C20049 +
            (C20112 * C1395 + C20044 * C1477 + C20113 * C3414 + C20045 * C3496 +
             C20114 * C8524 + C20046 * C8649 + C20115 * C19098 +
             C20047 * C19224) *
                C93585) *
               C93706 * C2696 -
           ((C20115 * C4901 + C20047 * C5020 + C20114 * C817 + C20046 * C899 +
             C20113 * C814 + C20045 * C896 + C20112 * C115 + C20044 * C196) *
                C93585 +
            (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
             C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
                C20049) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C4081 +
             (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
             C306 * C4076 + C307 * C4085 + C308 * C4077) *
                C93828 +
            (C5131 + C5132 + C5107 + C5108 + C5109 + C5110) * C93694) *
               C2695 -
           ((C7769 * C4077 + C7770 * C4085 + C7771 * C4076 + C7772 * C4083 +
             (C275 * C3413 + C93706 * C3569) * C4075 +
             (C275 * C3409 + C93706 * C3565) * C4081) *
                C93694 +
            (C2873 * C4077 + C2874 * C4085 + C2875 * C4076 + C2876 * C4083 +
             (C275 * C1396 + C93706 * C1544) * C4075 +
             (C275 * C1388 + C93706 * C1536) * C4081) *
                C93828) *
               C2696) *
              C93625 * C1981 +
          (((C2876 * C4081 + C2875 * C4075 + C2874 * C4083 + C2873 * C4076 +
             C2872 * C4085 + C2871 * C4077) *
                C93828 +
            (C7772 * C4081 + C7771 * C4075 + C7770 * C4083 + C7769 * C4076 +
             (C275 * C3412 + C93706 * C3568) * C4085 +
             (C275 * C3416 + C93706 * C3572) * C4077) *
                C93694) *
               C2696 -
           ((C6775 + C6774 + C6773 + C6772 + C6771 + C6770) * C93694 +
            (C310 * C4077 + C309 * C4085 + C308 * C4076 + C307 * C4083 +
             C306 * C4075 + C305 * C4081) *
                C93828) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C20049 +
             (C275 * C114 + C93706 * C282) * C93585) *
                C20044 +
            (C20666 + C20667) * C20045 + C20676 * C20046 + C20677 * C20047) *
               C2695 -
           (((C275 * C19097 + C93706 * C19325) * C93585 +
             (C275 * C19095 + C93706 * C19323) * C20049) *
                C20047 +
            (C19338 * C93585 + C19339 * C20049) * C20046 +
            (C8764 * C93585 + C8765 * C20049) * C20045 +
            ((C275 * C1396 + C93706 * C1544) * C93585 +
             (C275 * C1388 + C93706 * C1536) * C20049) *
                C20044) *
               C2696) *
              C93625 * C1981 +
          (((C2876 * C20049 + C2875 * C93585) * C20044 +
            (C7772 * C20049 + C7771 * C93585) * C20045 +
            (C18365 * C20049 + C18364 * C93585) * C20046 +
            ((C275 * C19096 + C93706 * C19324) * C20049 +
             (C275 * C19098 + C93706 * C19326) * C93585) *
                C20047) *
               C2696 -
           ((C21753 + C21752) * C20047 + (C21751 + C21750) * C20046 +
            (C21749 + C21748) * C20045 +
            (C306 * C93585 + C305 * C20049) * C20044) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C4178 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93828 +
            (C5240 + C5241 + C5242) * C4179 +
            (C5243 + C5244 + C5245) * C93694) *
               C93706 * C2695 -
           ((C4085 * C3493 + C4077 * C3641 + C4083 * C3492 + C4076 * C3640 +
             C4081 * C3491 + C4075 * C3639) *
                C93694 +
            (C4085 * C3411 + C4077 * C3415 + C4083 * C3410 + C4076 * C3414 +
             C4081 * C3409 + C4075 * C3413) *
                C4179 +
            (C4085 * C1468 + C4077 * C1600 + C4083 * C1469 + C4076 * C1601 +
             C4081 * C1470 + C4075 * C1602) *
                C93828 +
            (C4085 * C1386 + C4077 * C1394 + C4083 * C1387 + C4076 * C1395 +
             C4081 * C1388 + C4075 * C1396) *
                C4178) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C4081 * C1387 + C4075 * C1395 + C4083 * C1386 + C4076 * C1394 +
             C4085 * C1385 + C4077 * C1393) *
                C4178 +
            (C4081 * C1469 + C4075 * C1601 + C4083 * C1468 + C4076 * C1600 +
             C4085 * C1467 + C4077 * C1599) *
                C93828 +
            (C4081 * C3410 + C4075 * C3414 + C4083 * C3411 + C4076 * C3415 +
             C4085 * C3412 + C4077 * C3416) *
                C4179 +
            (C4081 * C3492 + C4075 * C3640 + C4083 * C3493 + C4076 * C3641 +
             C4085 * C3494 + C4077 * C3642) *
                C93694) *
               C93706 * C2696 -
           ((C6891 + C6890 + C6889) * C93694 + (C6888 + C6887 + C6886) * C4179 +
            (C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
             C4081 * C190 + C4075 * C363) *
                C93828 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C4178) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C20112 +
            (C20049 * C189 + C93585 * C362) * C20044 + C20749 * C20113 +
            C20750 * C20045 + C20751 * C20114 + C20752 * C20046 +
            C20753 * C20115 + C20754 * C20047) *
               C93706 * C2695 -
           ((C20049 * C19221 + C93585 * C19439) * C20047 +
            (C20049 * C19095 + C93585 * C19097) * C20115 +
            (C20049 * C8645 + C93585 * C8865) * C20046 +
            (C20049 * C8520 + C93585 * C8523) * C20114 +
            (C20049 * C3491 + C93585 * C3639) * C20045 +
            (C20049 * C3409 + C93585 * C3413) * C20113 +
            (C20049 * C1470 + C93585 * C1602) * C20044 +
            (C20049 * C1388 + C93585 * C1396) * C20112) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C20049 * C1387 + C93585 * C1395) * C20112 +
            (C20049 * C1469 + C93585 * C1601) * C20044 +
            (C20049 * C3410 + C93585 * C3414) * C20113 +
            (C20049 * C3492 + C93585 * C3640) * C20045 +
            (C20049 * C8521 + C93585 * C8524) * C20114 +
            (C20049 * C8646 + C93585 * C8866) * C20046 +
            (C20049 * C19096 + C93585 * C19098) * C20115 +
            (C20049 * C19222 + C93585 * C19440) * C20047) *
               C93706 * C2696 -
           (C21837 * C20047 + C21836 * C20115 + C21835 * C20046 +
            C21834 * C20114 + C21833 * C20045 + C21832 * C20113 +
            (C20049 * C190 + C93585 * C363) * C20044 +
            (C20049 * C109 + C93585 * C115) * C20112) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
             C4444 + C4444 + C93694 * C1079) *
                C4075 +
            (C4477 + C4478) * C4076 + C4483 * C4077) *
               C93706 * C2695 -
           ((C7987 + C7988) * C4077 + (C7989 + C7990) * C4076 +
            (C4441 * C3409 + C6115 + C6115 + C93694 * C3709 + C4440 * C1388 +
             C6116 + C6116 + C93828 * C1660) *
                C4075) *
               C93706 * C2696) *
              C93625 * C1981 +
          (((C7990 + C7989) * C4075 + (C7988 + C7987) * C4076 +
            (C4440 * C1385 + C7977 + C7977 + C93828 * C1657 + C4441 * C3412 +
             C7978 + C7978 + C93694 * C3712) *
                C4077) *
               C93706 * C2696 -
           ((C4481 + C4482) * C4077 + (C4480 + C4479) * C4076 +
            (C4478 + C4477) * C4075) *
               C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
            C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
            C20046 * C1080 + C20269 * C4897 + C20274 + C20274 +
            C20047 * C5325) *
               C93585 * C93706 * C2695 -
           (C20269 * C19095 + C21318 + C21318 + C20047 * C19563 +
            C20268 * C8520 + C21319 + C21319 + C20046 * C8984 + C20267 * C3409 +
            C21320 + C21320 + C20045 * C3709 + C20266 * C1388 + C21321 +
            C21321 + C20044 * C1660) *
               C93585 * C93706 * C2696) *
              C93625 * C1981 +
          ((C20266 * C1387 + C22521 + C22521 + C20044 * C1659 + C20267 * C3410 +
            C22522 + C22522 + C20045 * C3710 + C20268 * C8521 + C22523 +
            C22523 + C20046 * C8985 + C20269 * C19096 + C22524 + C22524 +
            C20047 * C19564) *
               C93585 * C93706 * C2696 -
           (C20269 * C4898 + C20275 + C20275 + C20047 * C5326 + C20268 * C809 +
            C20276 + C20276 + C20046 * C1081 + C20267 * C806 + C20277 + C20277 +
            C20045 * C1078 + C20266 * C109 + C20278 + C20278 + C20044 * C420) *
               C93585 * C93706 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C93706 * C276) * C4178 +
             (C275 * C189 + C93706 * C501) * C93828 + C5123 * C4179 +
             C5426 * C93694) *
                C4075 +
            (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
               C2695 -
           ((C8101 + C8091 + C8092 + C8093) * C4077 +
            (C8102 + C8096 + C8097 + C8098) * C4076 +
            ((C275 * C3491 + C93706 * C3783) * C93694 +
             (C275 * C3409 + C93706 * C3565) * C4179 +
             (C275 * C1470 + C93706 * C1726) * C93828 +
             (C275 * C1388 + C93706 * C1536) * C4178) *
                C4075) *
               C2696) *
              C93625 * C1981 +
          (((C8098 + C8097 + C8096 + C8102) * C4075 +
            (C8093 + C8092 + C8091 + C8101) * C4076 +
            (C2872 * C4178 + C3103 * C93828 +
             (C275 * C3412 + C93706 * C3568) * C4179 +
             (C275 * C3494 + C93706 * C3786) * C93694) *
                C4077) *
               C2696 -
           ((C4566 + C4567 + C4568 + C4569) * C4077 +
            (C4565 + C4564 + C4563 + C4562) * C4076 +
            (C4561 + C4560 + C4559 + C4558) * C4075) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20112 +
            (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
            C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
            C16059 * C20047) *
               C93585 * C2695 -
           ((C275 * C19221 + C93706 * C19669) * C20047 +
            (C275 * C19095 + C93706 * C19323) * C20115 + C19674 * C20046 +
            C19339 * C20114 + C9097 * C20045 + C8765 * C20113 +
            (C275 * C1470 + C93706 * C1726) * C20044 +
            (C275 * C1388 + C93706 * C1536) * C20112) *
               C93585 * C2696) *
              C93625 * C1981 +
          ((C2876 * C20112 + C3105 * C20044 + C7772 * C20113 + C8100 * C20045 +
            C18365 * C20114 + C18685 * C20046 +
            (C275 * C19096 + C93706 * C19324) * C20115 +
            (C275 * C19222 + C93706 * C19670) * C20047) *
               C93585 * C2696 -
           (C16058 * C20047 + C15767 * C20115 + C5428 * C20046 +
            C5128 * C20114 + C2391 * C20045 + C2162 * C20113 + C520 * C20044 +
            C305 * C20112) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
              C4085 * C110 + C4077 * C116) *
                 C275 +
             (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
              C4085 * C278 + C4077 * C581) *
                 C93706) *
                C93828 +
            ((C5240 + C5241 + C5242) * C275 +
             (C5519 + C5520 + C5521) * C93706) *
                C93694) *
               C2695 -
           (((C4085 * C3567 + C4077 * C3855 + C4083 * C3566 + C4076 * C3854 +
              C4081 * C3565 + C4075 * C3853) *
                 C93706 +
             (C4085 * C3411 + C4077 * C3415 + C4083 * C3410 + C4076 * C3414 +
              C4081 * C3409 + C4075 * C3413) *
                 C275) *
                C93694 +
            ((C4085 * C1534 + C4077 * C1782 + C4083 * C1535 + C4076 * C1783 +
              C4081 * C1536 + C4075 * C1784) *
                 C93706 +
             (C4085 * C1386 + C4077 * C1394 + C4083 * C1387 + C4076 * C1395 +
              C4081 * C1388 + C4075 * C1396) *
                 C275) *
                C93828) *
               C2696) *
              C93625 * C1981 +
          ((((C4081 * C1387 + C4075 * C1395 + C4083 * C1386 + C4076 * C1394 +
              C4085 * C1385 + C4077 * C1393) *
                 C275 +
             (C4081 * C1535 + C4075 * C1783 + C4083 * C1534 + C4076 * C1782 +
              C4085 * C1533 + C4077 * C1781) *
                 C93706) *
                C93828 +
            ((C4081 * C3410 + C4075 * C3414 + C4083 * C3411 + C4076 * C3415 +
              C4085 * C3412 + C4077 * C3416) *
                 C275 +
             (C4081 * C3566 + C4075 * C3854 + C4083 * C3567 + C4076 * C3855 +
              C4085 * C3568 + C4077 * C3856) *
                 C93706) *
                C93694) *
               C2696 -
           (((C7224 + C7223 + C7222) * C93706 +
             (C6888 + C6887 + C6886) * C275) *
                C93694 +
            ((C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
              C4081 * C277 + C4075 * C580) *
                 C93706 +
             (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
              C4081 * C109 + C4075 * C115) *
                 C275) *
                C93828) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C275 +
             (C20049 * C276 + C93585 * C579) * C93706) *
                C20044 +
            (C20921 + C20937) * C20045 + C20941 * C20046 + C20942 * C20047) *
               C2695 -
           (((C20049 * C19323 + C93585 * C19772) * C93706 +
             (C20049 * C19095 + C93585 * C19097) * C275) *
                C20047 +
            ((C20049 * C8749 + C93585 * C9195) * C93706 +
             (C20049 * C8520 + C93585 * C8523) * C275) *
                C20046 +
            ((C20049 * C3565 + C93585 * C3853) * C93706 +
             (C20049 * C3409 + C93585 * C3413) * C275) *
                C20045 +
            ((C20049 * C1536 + C93585 * C1784) * C93706 +
             (C20049 * C1388 + C93585 * C1396) * C275) *
                C20044) *
               C2696) *
              C93625 * C1981 +
          ((((C20049 * C1387 + C93585 * C1395) * C275 +
             (C20049 * C1535 + C93585 * C1783) * C93706) *
                C20044 +
            ((C20049 * C3410 + C93585 * C3414) * C275 +
             (C20049 * C3566 + C93585 * C3854) * C93706) *
                C20045 +
            ((C20049 * C8521 + C93585 * C8524) * C275 +
             (C20049 * C8750 + C93585 * C9196) * C93706) *
                C20046 +
            ((C20049 * C19096 + C93585 * C19098) * C275 +
             (C20049 * C19324 + C93585 * C19773) * C93706) *
                C20047) *
               C2696 -
           ((C22054 + C22046) * C20047 + (C22053 + C22043) * C20046 +
            (C22052 + C22040) * C20045 +
            ((C20049 * C277 + C93585 * C580) * C93706 +
             (C20049 * C109 + C93585 * C115) * C275) *
                C20044) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                 C275 +
             (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                 C93706) *
                C4075 +
            ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
            C4742 * C4077) *
               C2695 -
           (((C8307 + C8308) * C93706 + (C7657 + C7658) * C275) * C4077 +
            ((C8309 + C8310) * C93706 + (C7661 + C7662) * C275) * C4076 +
            ((C4179 * C3565 + C93694 * C3923 + C4178 * C1536 + C93828 * C1842) *
                 C93706 +
             (C4179 * C3409 + C93694 * C3491 + C4178 * C1388 + C93828 * C1470) *
                 C275) *
                C4075) *
               C2696) *
              C93625 * C1981 +
          ((((C7662 + C7661) * C275 + (C8310 + C8309) * C93706) * C4075 +
            ((C7658 + C7657) * C275 + (C8308 + C8307) * C93706) * C4076 +
            ((C4178 * C1385 + C93828 * C1467 + C4179 * C3412 + C93694 * C3494) *
                 C275 +
             (C4178 * C1533 + C93828 * C1839 + C4179 * C3568 + C93694 * C3926) *
                 C93706) *
                C4077) *
               C2696 -
           (((C4738 + C4739) * C93706 + (C4215 + C4216) * C275) * C4077 +
            ((C4737 + C4736) * C93706 + (C4210 + C4209) * C275) * C4076 +
            ((C4735 + C4734) * C93706 + (C4206 + C4205) * C275) * C4075) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
             C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
                C275 +
            (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
             C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
                C93706) *
               C93585 * C2695 -
           ((C20115 * C19323 + C20047 * C19884 + C20114 * C8749 +
             C20046 * C9305 + C20113 * C3565 + C20045 * C3923 + C20112 * C1536 +
             C20044 * C1842) *
                C93706 +
            (C20115 * C19095 + C20047 * C19221 + C20114 * C8520 +
             C20046 * C8645 + C20113 * C3409 + C20045 * C3491 + C20112 * C1388 +
             C20044 * C1470) *
                C275) *
               C93585 * C2696) *
              C93625 * C1981 +
          (((C20112 * C1387 + C20044 * C1469 + C20113 * C3410 + C20045 * C3492 +
             C20114 * C8521 + C20046 * C8646 + C20115 * C19096 +
             C20047 * C19222) *
                C275 +
            (C20112 * C1535 + C20044 * C1841 + C20113 * C3566 + C20045 * C3924 +
             C20114 * C8750 + C20046 * C9306 + C20115 * C19324 +
             C20047 * C19885) *
                C93706) *
               C93585 * C2696 -
           ((C20115 * C5097 + C20047 * C5599 + C20114 * C957 + C20046 * C1263 +
             C20113 * C954 + C20045 * C1260 + C20112 * C277 + C20044 * C636) *
                C93706 +
            (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
             C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
                C275) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezz[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
             C5698 * C93694) *
                C4075 +
            (C4817 + C4818) * C4076 + C4823 * C4077) *
               C2695 -
           ((C8421 + C8411) * C4077 + (C8422 + C8414) * C4076 +
            ((C713 * C3409 + C3998 + C3998 + C93706 * C3993) * C93694 +
             (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C93828) *
                C4075) *
               C2696) *
              C93625 * C1981 +
          (((C8414 + C8422) * C4075 + (C8411 + C8421) * C4076 +
            (C3338 * C93828 +
             (C713 * C3412 + C4001 + C4001 + C93706 * C3996) * C93694) *
                C4077) *
               C2696 -
           ((C4821 + C4822) * C4077 + (C4820 + C4819) * C4076 +
            (C4818 + C4817) * C4075) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
            C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
               C93585 * C2695 -
           ((C713 * C19095 + C19989 + C19989 + C93706 * C19984) * C20047 +
            C19993 * C20046 + C9417 * C20045 +
            (C713 * C1388 + C1909 + C1909 + C93706 * C1900) * C20044) *
               C93585 * C2696) *
              C93625 * C1981 +
          ((C3340 * C20044 + C8420 * C20045 + C18996 * C20046 +
            (C713 * C19096 + C19990 + C19990 + C93706 * C19985) * C20047) *
               C93585 * C2696 -
           (C16320 * C20047 + C5700 * C20046 + C2626 * C20045 + C743 * C20044) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93706 * C93828 +
           (C4080 * C807 + C4090 + C4090 + C4075 * C823 + C4082 * C806 + C4091 +
            C4091 + C4076 * C822 + C4084 * C805 + C4092 + C4092 +
            C4077 * C821) *
               C93706 * C93694) *
              C93639 * C93625 * C97 -
          ((C4084 * C804 + C4093 + C4093 + C4077 * C820 + C4082 * C805 + C4094 +
            C4094 + C4076 * C821 + C4080 * C806 + C4095 + C4095 +
            C4075 * C822) *
               C93706 * C93694 +
           (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 + C4097 +
            C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
            C4075 * C121) *
               C93706 * C93828) *
              C93639 * C93625 * C98 +
          ((C4080 * C110 + C4099 + C4099 + C4075 * C122 + C4082 * C111 + C4100 +
            C4100 + C4076 * C123 + C4084 * C112 + C4101 + C4101 +
            C4077 * C124) *
               C93706 * C93828 +
           (C4080 * C805 + C4102 + C4102 + C4075 * C821 + C4082 * C804 + C4103 +
            C4103 + C4076 * C820 + C4084 * C1983 + C4104 + C4104 +
            C4077 * C1985) *
               C93706 * C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93706 * C93828 +
           (C4937 + C4938 + C4939) * C93706 * C93694) *
              C93639 * C800 -
          ((C4940 + C4941 + C4942) * C93706 * C93694 +
           (C4939 + C4938 + C4937) * C93706 * C93828) *
              C93639 * C801 +
          ((C4942 + C4941 + C4940) * C93706 * C93828 +
           (C4080 * C4897 + C4922 + C4922 + C4075 * C4903 + C4082 * C4898 +
            C4923 + C4923 + C4076 * C4904 + C4084 * C4899 + C4924 + C4924 +
            C4077 * C4905) *
               C93706 * C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 * C20044 +
           (C20048 * C807 + C20052 + C20052 + C93585 * C823) * C93706 * C20045 +
           (C20048 * C808 + C20053 + C20053 + C93585 * C824) * C93706 * C20046 +
           (C20048 * C4897 + C20054 + C20054 + C93585 * C4903) * C93706 *
               C20047) *
              C93639 * C93625 * C97 -
          ((C20048 * C4898 + C20055 + C20055 + C93585 * C4904) * C93706 *
               C20047 +
           (C20048 * C809 + C20056 + C20056 + C93585 * C825) * C93706 * C20046 +
           (C20048 * C806 + C20057 + C20057 + C93585 * C822) * C93706 * C20045 +
           (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93706 *
               C20044) *
              C93639 * C93625 * C98 +
          ((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C93706 * C20044 +
           (C20048 * C805 + C20060 + C20060 + C93585 * C821) * C93706 * C20045 +
           (C20048 * C810 + C20061 + C20061 + C93585 * C826) * C93706 * C20046 +
           (C20048 * C4899 + C20062 + C20062 + C93585 * C4905) * C93706 *
               C20047) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93706 * C20044 +
           C20558 * C20045 + C20559 * C20046 + C20560 * C20047) *
              C93639 * C800 -
          (C20561 * C20047 + C20560 * C20046 + C20559 * C20045 +
           C20558 * C20044) *
              C93639 * C801 +
          (C20559 * C20044 + C20560 * C20045 + C20561 * C20046 +
           (C20048 * C20532 + C20545 + C20545 + C93585 * C20534) * C93706 *
               C20047) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C4081 +
           (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
               C4075 +
           (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
           C4218 * C4077) *
              C93706 * C93639 * C93625 * C97 -
          ((C4213 + C4214) * C4077 + (C4215 + C4216) * C4085 +
           (C4212 + C4211) * C4076 + (C4210 + C4209) * C4083 +
           (C4208 + C4207) * C4075 + (C4206 + C4205) * C4081) *
              C93706 * C93639 * C93625 * C98 +
          (C4217 * C4081 + C4218 * C4075 + (C4216 + C4215) * C4083 +
           (C4214 + C4213) * C4076 +
           (C4178 * C112 + C93828 * C193 + C4179 * C1983 + C93694 * C2056) *
               C4085 +
           (C4178 * C118 + C93828 * C199 + C4179 * C1984 + C93694 * C2057) *
               C4077) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
               C4081 +
           (C4178 * C114 + C93828 * C195 + C4179 * C815 + C93694 * C897) *
               C4075 +
           (C4205 + C4206) * C4083 + (C4207 + C4208) * C4076 + C4217 * C4085 +
           C4218 * C4077) *
              C93706 * C93639 * C800 -
          ((C4179 * C818 + C93694 * C900 + C4178 * C813 + C93828 * C895) *
               C4077 +
           (C4179 * C810 + C93694 * C892 + C4178 * C805 + C93828 * C887) *
               C4085 +
           (C4179 * C817 + C93694 * C899 + C4178 * C814 + C93828 * C896) *
               C4076 +
           (C4179 * C809 + C93694 * C891 + C4178 * C806 + C93828 * C888) *
               C4083 +
           (C4179 * C816 + C93694 * C898 + C4178 * C815 + C93828 * C897) *
               C4075 +
           (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
               C4081) *
              C93706 * C93639 * C801 +
          ((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
               C4081 +
           (C4178 * C816 + C93828 * C898 + C4179 * C4900 + C93694 * C5019) *
               C4075 +
           (C4178 * C809 + C93828 * C891 + C4179 * C4898 + C93694 * C5017) *
               C4083 +
           (C4178 * C817 + C93828 * C899 + C4179 * C4901 + C93694 * C5020) *
               C4076 +
           (C4178 * C810 + C93828 * C892 + C4179 * C4899 + C93694 * C5018) *
               C4085 +
           (C4178 * C818 + C93828 * C900 + C4179 * C4902 + C93694 * C5021) *
               C4077) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C20049 +
           (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
            C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
               C93585) *
              C93706 * C93639 * C93625 * C97 -
          ((C20115 * C4901 + C20047 * C5020 + C20114 * C817 + C20046 * C899 +
            C20113 * C814 + C20045 * C896 + C20112 * C115 + C20044 * C196) *
               C93585 +
           (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
            C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
               C20049) *
              C93706 * C93639 * C93625 * C98 +
          ((C20112 * C110 + C20044 * C191 + C20113 * C805 + C20045 * C887 +
            C20114 * C810 + C20046 * C892 + C20115 * C4899 + C20047 * C5018) *
               C20049 +
           (C20112 * C116 + C20044 * C197 + C20113 * C813 + C20045 * C895 +
            C20114 * C818 + C20046 * C900 + C20115 * C4902 + C20047 * C5021) *
               C93585) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C20049 +
           (C20112 * C114 + C20044 * C195 + C20113 * C815 + C20045 * C897 +
            C20114 * C816 + C20046 * C898 + C20115 * C4900 + C20047 * C5019) *
               C93585) *
              C93706 * C93639 * C800 -
          ((C20115 * C15552 + C20047 * C15668 + C20114 * C4900 +
            C20046 * C5019 + C20113 * C816 + C20045 * C898 + C20112 * C815 +
            C20044 * C897) *
               C93585 +
           (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
            C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
            C20044 * C889) *
               C20049) *
              C93706 * C93639 * C801 +
          ((C20112 * C808 + C20044 * C890 + C20113 * C4897 + C20045 * C5016 +
            C20114 * C15550 + C20046 * C15666 + C20115 * C20532 +
            C20047 * C20611) *
               C20049 +
           (C20112 * C816 + C20044 * C898 + C20113 * C4900 + C20045 * C5019 +
            C20114 * C15552 + C20046 * C15668 + C20115 * C20533 +
            C20047 * C20612) *
               C93585) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4081 +
            (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
            C306 * C4076 + C307 * C4085 + C308 * C4077) *
               C93828 +
           ((C275 * C807 + C93706 * C955) * C4081 +
            (C275 * C815 + C93706 * C963) * C4075 + C2162 * C4083 +
            C2161 * C4076 + C2160 * C4085 + C2159 * C4077) *
               C93694) *
              C93639 * C93625 * C97 -
          ((C2157 * C4077 + C2158 * C4085 + C2159 * C4076 + C2160 * C4083 +
            C2161 * C4075 + C2162 * C4081) *
               C93694 +
           (C310 * C4077 + C309 * C4085 + C308 * C4076 + C307 * C4083 +
            C306 * C4075 + C305 * C4081) *
               C93828) *
              C93639 * C93625 * C98 +
          ((C307 * C4081 + C308 * C4075 + C309 * C4083 + C310 * C4076 +
            C312 * C4085 + C311 * C4077) *
               C93828 +
           (C2160 * C4081 + C2159 * C4075 + C2158 * C4083 + C2157 * C4076 +
            (C275 * C1983 + C93706 * C2142) * C4085 +
            (C275 * C1984 + C93706 * C2143) * C4077) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4081 +
            (C275 * C114 + C93706 * C282) * C4075 + C305 * C4083 +
            C306 * C4076 + C307 * C4085 + C308 * C4077) *
               C93828 +
           (C5131 + C5132 + C5107 + C5108 + C5109 + C5110) * C93694) *
              C93639 * C800 -
          ((C5133 + C5134 + C5135 + C5136 + C5137 + C5138) * C93694 +
           (C5110 + C5109 + C5108 + C5107 + C5132 + C5131) * C93828) *
              C93639 * C801 +
          ((C5138 + C5137 + C5136 + C5135 + C5134 + C5133) * C93828 +
           ((C275 * C4897 + C93706 * C5096) * C4081 +
            (C275 * C4900 + C93706 * C5099) * C4075 +
            (C275 * C4898 + C93706 * C5097) * C4083 +
            (C275 * C4901 + C93706 * C5100) * C4076 +
            (C275 * C4899 + C93706 * C5098) * C4085 +
            (C275 * C4902 + C93706 * C5101) * C4077) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20049 +
            (C275 * C114 + C93706 * C282) * C93585) *
               C20044 +
           (C5123 * C20049 + C5124 * C93585) * C20045 +
           (C5130 * C20049 + C5129 * C93585) * C20046 +
           (C15769 * C20049 + C15768 * C93585) * C20047) *
              C93639 * C93625 * C97 -
          ((C15766 * C93585 + C15767 * C20049) * C20047 +
           (C5127 * C93585 + C5128 * C20049) * C20046 +
           (C2161 * C93585 + C2162 * C20049) * C20045 +
           (C306 * C93585 + C305 * C20049) * C20044) *
              C93639 * C93625 * C98 +
          ((C307 * C20049 + C308 * C93585) * C20044 +
           (C2160 * C20049 + C2159 * C93585) * C20045 +
           (C5126 * C20049 + C5125 * C93585) * C20046 +
           ((C275 * C4899 + C93706 * C5098) * C20049 +
            (C275 * C4902 + C93706 * C5101) * C93585) *
               C20047) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C20049 +
            (C275 * C114 + C93706 * C282) * C93585) *
               C20044 +
           (C20666 + C20667) * C20045 + C20676 * C20046 + C20677 * C20047) *
              C93639 * C800 -
          ((C20680 + C20681) * C20047 + (C20671 + C20670) * C20046 +
           (C20669 + C20668) * C20045 + (C20667 + C20666) * C20044) *
              C93639 * C801 +
          (C20676 * C20044 + C20677 * C20045 + (C20681 + C20680) * C20046 +
           ((C275 * C20532 + C93706 * C20663) * C20049 +
            (C275 * C20533 + C93706 * C20664) * C93585) *
               C20047) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C4178 +
           (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
            C4085 * C191 + C4077 * C364) *
               C93828 +
           (C4081 * C807 + C4075 * C815 + C4083 * C806 + C4076 * C814 +
            C4085 * C805 + C4077 * C813) *
               C4179 +
           (C4081 * C889 + C4075 * C1021 + C4083 * C888 + C4076 * C1020 +
            C4085 * C887 + C4077 * C1019) *
               C93694) *
              C93706 * C93639 * C93625 * C97 -
          ((C4085 * C886 + C4077 * C1018 + C4083 * C887 + C4076 * C1019 +
            C4081 * C888 + C4075 * C1020) *
               C93694 +
           (C4085 * C804 + C4077 * C812 + C4083 * C805 + C4076 * C813 +
            C4081 * C806 + C4075 * C814) *
               C4179 +
           (C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
            C4081 * C190 + C4075 * C363) *
               C93828 +
           (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
            C4081 * C109 + C4075 * C115) *
               C4178) *
              C93706 * C93639 * C93625 * C98 +
          ((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
            C4085 * C112 + C4077 * C118) *
               C4178 +
           (C4081 * C191 + C4075 * C364 + C4083 * C192 + C4076 * C365 +
            C4085 * C193 + C4077 * C366) *
               C93828 +
           (C4081 * C805 + C4075 * C813 + C4083 * C804 + C4076 * C812 +
            C4085 * C1983 + C4077 * C1984) *
               C4179 +
           (C4081 * C887 + C4075 * C1019 + C4083 * C886 + C4076 * C1018 +
            C4085 * C2056 + C4077 * C2228) *
               C93694) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C4178 +
           (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
            C4085 * C191 + C4077 * C364) *
               C93828 +
           (C5240 + C5241 + C5242) * C4179 + (C5243 + C5244 + C5245) * C93694) *
              C93706 * C93639 * C800 -
          ((C5246 + C5247 + C5248) * C93694 + (C5249 + C5250 + C5251) * C4179 +
           (C5245 + C5244 + C5243) * C93828 + (C5242 + C5241 + C5240) * C4178) *
              C93706 * C93639 * C801 +
          ((C5251 + C5250 + C5249) * C4178 + (C5248 + C5247 + C5246) * C93828 +
           (C4081 * C4897 + C4075 * C4900 + C4083 * C4898 + C4076 * C4901 +
            C4085 * C4899 + C4077 * C4902) *
               C4179 +
           (C4081 * C5016 + C4075 * C5212 + C4083 * C5017 + C4076 * C5213 +
            C4085 * C5018 + C4077 * C5214) *
               C93694) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C20112 +
           (C20049 * C189 + C93585 * C362) * C20044 +
           (C20049 * C807 + C93585 * C815) * C20113 +
           (C20049 * C889 + C93585 * C1021) * C20045 +
           (C20049 * C808 + C93585 * C816) * C20114 +
           (C20049 * C890 + C93585 * C1022) * C20046 +
           (C20049 * C4897 + C93585 * C4900) * C20115 +
           (C20049 * C5016 + C93585 * C5212) * C20047) *
              C93706 * C93639 * C93625 * C97 -
          ((C20049 * C5017 + C93585 * C5213) * C20047 +
           (C20049 * C4898 + C93585 * C4901) * C20115 +
           (C20049 * C891 + C93585 * C1023) * C20046 +
           (C20049 * C809 + C93585 * C817) * C20114 +
           (C20049 * C888 + C93585 * C1020) * C20045 +
           (C20049 * C806 + C93585 * C814) * C20113 +
           (C20049 * C190 + C93585 * C363) * C20044 +
           (C20049 * C109 + C93585 * C115) * C20112) *
              C93706 * C93639 * C93625 * C98 +
          ((C20049 * C110 + C93585 * C116) * C20112 +
           (C20049 * C191 + C93585 * C364) * C20044 +
           (C20049 * C805 + C93585 * C813) * C20113 +
           (C20049 * C887 + C93585 * C1019) * C20045 +
           (C20049 * C810 + C93585 * C818) * C20114 +
           (C20049 * C892 + C93585 * C1024) * C20046 +
           (C20049 * C4899 + C93585 * C4902) * C20115 +
           (C20049 * C5018 + C93585 * C5214) * C20047) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20049 * C108 + C93585 * C114) * C20112 +
           (C20049 * C189 + C93585 * C362) * C20044 + C20749 * C20113 +
           C20750 * C20045 + C20751 * C20114 + C20752 * C20046 +
           C20753 * C20115 + C20754 * C20047) *
              C93706 * C93639 * C800 -
          (C20755 * C20047 + C20756 * C20115 + C20754 * C20046 +
           C20753 * C20114 + C20752 * C20045 + C20751 * C20113 +
           C20750 * C20044 + C20749 * C20112) *
              C93706 * C93639 * C801 +
          (C20751 * C20112 + C20752 * C20044 + C20753 * C20113 +
           C20754 * C20045 + C20756 * C20114 + C20755 * C20046 +
           (C20049 * C20532 + C93585 * C20533) * C20115 +
           (C20049 * C20611 + C93585 * C20731) * C20047) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C4075 +
           (C4477 + C4478) * C4076 + C4483 * C4077) *
              C93706 * C93639 * C93625 * C97 -
          ((C4481 + C4482) * C4077 + (C4480 + C4479) * C4076 +
           (C4478 + C4477) * C4075) *
              C93706 * C93639 * C93625 * C98 +
          (C4483 * C4075 + (C4482 + C4481) * C4076 +
           (C4440 * C112 + C4463 + C4463 + C93828 * C423 + C4441 * C1983 +
            C4464 + C4464 + C93694 * C2295) *
               C4077) *
              C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4440 * C108 + C4443 + C4443 + C93828 * C419 + C4441 * C807 +
            C4444 + C4444 + C93694 * C1079) *
               C4075 +
           (C4477 + C4478) * C4076 + C4483 * C4077) *
              C93706 * C93639 * C800 -
          ((C4441 * C810 + C5329 + C5329 + C93694 * C1082 + C4440 * C805 +
            C5330 + C5330 + C93828 * C1077) *
               C4077 +
           (C4441 * C809 + C5331 + C5331 + C93694 * C1081 + C4440 * C806 +
            C5332 + C5332 + C93828 * C1078) *
               C4076 +
           (C4441 * C808 + C5333 + C5333 + C93694 * C1080 + C4440 * C807 +
            C5334 + C5334 + C93828 * C1079) *
               C4075) *
              C93706 * C93639 * C801 +
          ((C4440 * C808 + C5335 + C5335 + C93828 * C1080 + C4441 * C4897 +
            C5336 + C5336 + C93694 * C5325) *
               C4075 +
           (C4440 * C809 + C5337 + C5337 + C93828 * C1081 + C4441 * C4898 +
            C5338 + C5338 + C93694 * C5326) *
               C4076 +
           (C4440 * C810 + C5339 + C5339 + C93828 * C1082 + C4441 * C4899 +
            C5340 + C5340 + C93694 * C5327) *
               C4077) *
              C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
           C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
           C20046 * C1080 + C20269 * C4897 + C20274 + C20274 + C20047 * C5325) *
              C93585 * C93706 * C93639 * C93625 * C97 -
          (C20269 * C4898 + C20275 + C20275 + C20047 * C5326 + C20268 * C809 +
           C20276 + C20276 + C20046 * C1081 + C20267 * C806 + C20277 + C20277 +
           C20045 * C1078 + C20266 * C109 + C20278 + C20278 + C20044 * C420) *
              C93585 * C93706 * C93639 * C93625 * C98 +
          (C20266 * C110 + C20279 + C20279 + C20044 * C421 + C20267 * C805 +
           C20280 + C20280 + C20045 * C1077 + C20268 * C810 + C20281 + C20281 +
           C20046 * C1082 + C20269 * C4899 + C20282 + C20282 + C20047 * C5327) *
              C93585 * C93706 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C20266 * C108 + C20271 + C20271 + C20044 * C419 + C20267 * C807 +
           C20272 + C20272 + C20045 * C1079 + C20268 * C808 + C20273 + C20273 +
           C20046 * C1080 + C20269 * C4897 + C20274 + C20274 + C20047 * C5325) *
              C93585 * C93706 * C93639 * C800 -
          (C20269 * C15550 + C20808 + C20808 + C20047 * C15963 +
           C20268 * C4897 + C20809 + C20809 + C20046 * C5325 + C20267 * C808 +
           C20810 + C20810 + C20045 * C1080 + C20266 * C807 + C20811 + C20811 +
           C20044 * C1079) *
              C93585 * C93706 * C93639 * C801 +
          (C20266 * C808 + C20812 + C20812 + C20044 * C1080 + C20267 * C4897 +
           C20813 + C20813 + C20045 * C5325 + C20268 * C15550 + C20814 +
           C20814 + C20046 * C15963 + C20269 * C20532 + C20815 + C20815 +
           C20047 * C20806) *
              C93585 * C93706 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4178 +
            (C275 * C189 + C93706 * C501) * C93828 +
            (C275 * C807 + C93706 * C955) * C4179 +
            (C275 * C889 + C93706 * C1145) * C93694) *
               C4075 +
           (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
              C93639 * C93625 * C97 -
          ((C4566 + C4567 + C4568 + C4569) * C4077 +
           (C4565 + C4564 + C4563 + C4562) * C4076 +
           (C4561 + C4560 + C4559 + C4558) * C4075) *
              C93639 * C93625 * C98 +
          (C4572 * C4075 + (C4569 + C4568 + C4567 + C4566) * C4076 +
           (C312 * C4178 + C523 * C93828 +
            (C275 * C1983 + C93706 * C2142) * C4179 +
            (C275 * C2056 + C93706 * C2378) * C93694) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C93706 * C276) * C4178 +
            (C275 * C189 + C93706 * C501) * C93828 + C5123 * C4179 +
            C5426 * C93694) *
               C4075 +
           (C4558 + C4559 + C4560 + C4561) * C4076 + C4572 * C4077) *
              C93639 * C800 -
          ((C5427 * C93694 + C5126 * C4179 + C2390 * C93828 + C2160 * C4178) *
               C4077 +
           (C5428 * C93694 + C5128 * C4179 + C2391 * C93828 + C2162 * C4178) *
               C4076 +
           (C5429 * C93694 + C5130 * C4179 + C5426 * C93828 + C5123 * C4178) *
               C4075) *
              C93639 * C801 +
          ((C5130 * C4178 + C5429 * C93828 +
            (C275 * C4897 + C93706 * C5096) * C4179 +
            (C275 * C5016 + C93706 * C5414) * C93694) *
               C4075 +
           (C5128 * C4178 + C5428 * C93828 +
            (C275 * C4898 + C93706 * C5097) * C4179 +
            (C275 * C5017 + C93706 * C5415) * C93694) *
               C4076 +
           (C5126 * C4178 + C5427 * C93828 +
            (C275 * C4899 + C93706 * C5098) * C4179 +
            (C275 * C5018 + C93706 * C5416) * C93694) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C20112 +
           (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
           C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
           C16059 * C20047) *
              C93585 * C93639 * C93625 * C97 -
          (C16058 * C20047 + C15767 * C20115 + C5428 * C20046 + C5128 * C20114 +
           C2391 * C20045 + C2162 * C20113 + C520 * C20044 + C305 * C20112) *
              C93585 * C93639 * C93625 * C98 +
          (C307 * C20112 + C521 * C20044 + C2160 * C20113 + C2390 * C20045 +
           C5126 * C20114 + C5427 * C20046 +
           (C275 * C4899 + C93706 * C5098) * C20115 +
           (C275 * C5018 + C93706 * C5416) * C20047) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C93706 * C276) * C20112 +
           (C275 * C189 + C93706 * C501) * C20044 + C5123 * C20113 +
           C5426 * C20045 + C5130 * C20114 + C5429 * C20046 + C15769 * C20115 +
           C16059 * C20047) *
              C93585 * C93639 * C800 -
          (C20869 * C20047 + C20679 * C20115 + C16059 * C20046 +
           C15769 * C20114 + C5429 * C20045 + C5130 * C20113 + C5426 * C20044 +
           C5123 * C20112) *
              C93585 * C93639 * C801 +
          (C5130 * C20112 + C5429 * C20044 + C15769 * C20113 + C16059 * C20045 +
           C20679 * C20114 + C20869 * C20046 +
           (C275 * C20532 + C93706 * C20663) * C20115 +
           (C275 * C20611 + C93706 * C20865) * C20047) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C275 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93706) *
               C93828 +
           ((C4081 * C807 + C4075 * C815 + C4083 * C806 + C4076 * C814 +
             C4085 * C805 + C4077 * C813) *
                C275 +
            (C4081 * C955 + C4075 * C1203 + C4083 * C954 + C4076 * C1202 +
             C4085 * C953 + C4077 * C1201) *
                C93706) *
               C93694) *
              C93639 * C93625 * C97 -
          (((C4085 * C952 + C4077 * C1200 + C4083 * C953 + C4076 * C1201 +
             C4081 * C954 + C4075 * C1202) *
                C93706 +
            (C4085 * C804 + C4077 * C812 + C4083 * C805 + C4076 * C813 +
             C4081 * C806 + C4075 * C814) *
                C275) *
               C93694 +
           ((C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
             C4081 * C277 + C4075 * C580) *
                C93706 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C275) *
               C93828) *
              C93639 * C93625 * C98 +
          (((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
             C4085 * C112 + C4077 * C118) *
                C275 +
            (C4081 * C278 + C4075 * C581 + C4083 * C279 + C4076 * C582 +
             C4085 * C280 + C4077 * C583) *
                C93706) *
               C93828 +
           ((C4081 * C805 + C4075 * C813 + C4083 * C804 + C4076 * C812 +
             C4085 * C1983 + C4077 * C1984) *
                C275 +
            (C4081 * C953 + C4075 * C1201 + C4083 * C952 + C4076 * C1200 +
             C4085 * C2142 + C4077 * C2460) *
                C93706) *
               C93694) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C275 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93706) *
               C93828 +
           ((C5240 + C5241 + C5242) * C275 + (C5519 + C5520 + C5521) * C93706) *
               C93694) *
              C93639 * C800 -
          (((C5522 + C5523 + C5524) * C93706 + (C5249 + C5250 + C5251) * C275) *
               C93694 +
           ((C5521 + C5520 + C5519) * C93706 + (C5242 + C5241 + C5240) * C275) *
               C93828) *
              C93639 * C801 +
          (((C5251 + C5250 + C5249) * C275 + (C5524 + C5523 + C5522) * C93706) *
               C93828 +
           ((C4081 * C4897 + C4075 * C4900 + C4083 * C4898 + C4076 * C4901 +
             C4085 * C4899 + C4077 * C4902) *
                C275 +
            (C4081 * C5096 + C4075 * C5503 + C4083 * C5097 + C4076 * C5504 +
             C4085 * C5098 + C4077 * C5505) *
                C93706) *
               C93694) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C275 +
            (C20049 * C276 + C93585 * C579) * C93706) *
               C20044 +
           ((C20049 * C807 + C93585 * C815) * C275 +
            (C20049 * C955 + C93585 * C1203) * C93706) *
               C20045 +
           ((C20049 * C808 + C93585 * C816) * C275 +
            (C20049 * C956 + C93585 * C1204) * C93706) *
               C20046 +
           ((C20049 * C4897 + C93585 * C4900) * C275 +
            (C20049 * C5096 + C93585 * C5503) * C93706) *
               C20047) *
              C93639 * C93625 * C97 -
          (((C20049 * C5097 + C93585 * C5504) * C93706 +
            (C20049 * C4898 + C93585 * C4901) * C275) *
               C20047 +
           ((C20049 * C957 + C93585 * C1205) * C93706 +
            (C20049 * C809 + C93585 * C817) * C275) *
               C20046 +
           ((C20049 * C954 + C93585 * C1202) * C93706 +
            (C20049 * C806 + C93585 * C814) * C275) *
               C20045 +
           ((C20049 * C277 + C93585 * C580) * C93706 +
            (C20049 * C109 + C93585 * C115) * C275) *
               C20044) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C275 +
            (C20049 * C278 + C93585 * C581) * C93706) *
               C20044 +
           ((C20049 * C805 + C93585 * C813) * C275 +
            (C20049 * C953 + C93585 * C1201) * C93706) *
               C20045 +
           ((C20049 * C810 + C93585 * C818) * C275 +
            (C20049 * C958 + C93585 * C1206) * C93706) *
               C20046 +
           ((C20049 * C4899 + C93585 * C4902) * C275 +
            (C20049 * C5098 + C93585 * C5505) * C93706) *
               C20047) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C275 +
            (C20049 * C276 + C93585 * C579) * C93706) *
               C20044 +
           (C20921 + C20937) * C20045 + C20941 * C20046 + C20942 * C20047) *
              C93639 * C800 -
          ((C20940 + C20932) * C20047 + (C20939 + C20927) * C20046 +
           (C20938 + C20924) * C20045 + (C20937 + C20921) * C20044) *
              C93639 * C801 +
          (C20941 * C20044 + C20942 * C20045 + (C20932 + C20940) * C20046 +
           ((C20049 * C20532 + C93585 * C20533) * C275 +
            (C20049 * C20663 + C93585 * C20919) * C93706) *
               C20047) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C275 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C93706) *
               C4075 +
           ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
           C4742 * C4077) *
              C93639 * C93625 * C97 -
          (((C4738 + C4739) * C93706 + (C4215 + C4216) * C275) * C4077 +
           ((C4737 + C4736) * C93706 + (C4210 + C4209) * C275) * C4076 +
           ((C4735 + C4734) * C93706 + (C4206 + C4205) * C275) * C4075) *
              C93639 * C93625 * C98 +
          (C4742 * C4075 +
           ((C4216 + C4215) * C275 + (C4739 + C4738) * C93706) * C4076 +
           ((C4178 * C112 + C93828 * C193 + C4179 * C1983 + C93694 * C2056) *
                C275 +
            (C4178 * C280 + C93828 * C639 + C4179 * C2142 + C93694 * C2527) *
                C93706) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4178 * C108 + C93828 * C189 + C4179 * C807 + C93694 * C889) *
                C275 +
            (C4178 * C276 + C93828 * C635 + C4179 * C955 + C93694 * C1261) *
                C93706) *
               C4075 +
           ((C4205 + C4206) * C275 + (C4734 + C4735) * C93706) * C4076 +
           C4742 * C4077) *
              C93639 * C800 -
          (((C4179 * C958 + C93694 * C1264 + C4178 * C953 + C93828 * C1259) *
                C93706 +
            (C4179 * C810 + C93694 * C892 + C4178 * C805 + C93828 * C887) *
                C275) *
               C4077 +
           ((C4179 * C957 + C93694 * C1263 + C4178 * C954 + C93828 * C1260) *
                C93706 +
            (C4179 * C809 + C93694 * C891 + C4178 * C806 + C93828 * C888) *
                C275) *
               C4076 +
           ((C4179 * C956 + C93694 * C1262 + C4178 * C955 + C93828 * C1261) *
                C93706 +
            (C4179 * C808 + C93694 * C890 + C4178 * C807 + C93828 * C889) *
                C275) *
               C4075) *
              C93639 * C801 +
          (((C4178 * C808 + C93828 * C890 + C4179 * C4897 + C93694 * C5016) *
                C275 +
            (C4178 * C956 + C93828 * C1262 + C4179 * C5096 + C93694 * C5598) *
                C93706) *
               C4075 +
           ((C4178 * C809 + C93828 * C891 + C4179 * C4898 + C93694 * C5017) *
                C275 +
            (C4178 * C957 + C93828 * C1263 + C4179 * C5097 + C93694 * C5599) *
                C93706) *
               C4076 +
           ((C4178 * C810 + C93828 * C892 + C4179 * C4899 + C93694 * C5018) *
                C275 +
            (C4178 * C958 + C93828 * C1264 + C4179 * C5098 + C93694 * C5600) *
                C93706) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C275 +
           (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
            C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
               C93706) *
              C93585 * C93639 * C93625 * C97 -
          ((C20115 * C5097 + C20047 * C5599 + C20114 * C957 + C20046 * C1263 +
            C20113 * C954 + C20045 * C1260 + C20112 * C277 + C20044 * C636) *
               C93706 +
           (C20115 * C4898 + C20047 * C5017 + C20114 * C809 + C20046 * C891 +
            C20113 * C806 + C20045 * C888 + C20112 * C109 + C20044 * C190) *
               C275) *
              C93585 * C93639 * C93625 * C98 +
          ((C20112 * C110 + C20044 * C191 + C20113 * C805 + C20045 * C887 +
            C20114 * C810 + C20046 * C892 + C20115 * C4899 + C20047 * C5018) *
               C275 +
           (C20112 * C278 + C20044 * C637 + C20113 * C953 + C20045 * C1259 +
            C20114 * C958 + C20046 * C1264 + C20115 * C5098 + C20047 * C5600) *
               C93706) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20112 * C108 + C20044 * C189 + C20113 * C807 + C20045 * C889 +
            C20114 * C808 + C20046 * C890 + C20115 * C4897 + C20047 * C5016) *
               C275 +
           (C20112 * C276 + C20044 * C635 + C20113 * C955 + C20045 * C1261 +
            C20114 * C956 + C20046 * C1262 + C20115 * C5096 + C20047 * C5598) *
               C93706) *
              C93585 * C93639 * C800 -
          ((C20115 * C15744 + C20047 * C16231 + C20114 * C5096 +
            C20046 * C5598 + C20113 * C956 + C20045 * C1262 + C20112 * C955 +
            C20044 * C1261) *
               C93706 +
           (C20115 * C15550 + C20047 * C15666 + C20114 * C4897 +
            C20046 * C5016 + C20113 * C808 + C20045 * C890 + C20112 * C807 +
            C20044 * C889) *
               C275) *
              C93585 * C93639 * C801 +
          ((C20112 * C808 + C20044 * C890 + C20113 * C4897 + C20045 * C5016 +
            C20114 * C15550 + C20046 * C15666 + C20115 * C20532 +
            C20047 * C20611) *
               C275 +
           (C20112 * C956 + C20044 * C1262 + C20113 * C5096 + C20045 * C5598 +
            C20114 * C15744 + C20046 * C16231 + C20115 * C20663 +
            C20047 * C20992) *
               C93706) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
            (C713 * C807 + C1328 + C1328 + C93706 * C1319) * C93694) *
               C4075 +
           (C4817 + C4818) * C4076 + C4823 * C4077) *
              C93639 * C93625 * C97 -
          ((C4821 + C4822) * C4077 + (C4820 + C4819) * C4076 +
           (C4818 + C4817) * C4075) *
              C93639 * C93625 * C98 +
          (C4823 * C4075 + (C4822 + C4821) * C4076 +
           (C746 * C93828 +
            (C713 * C1983 + C2617 + C2617 + C93706 * C2609) * C93694) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C93706 * C714) * C93828 +
            C5698 * C93694) *
               C4075 +
           (C4817 + C4818) * C4076 + C4823 * C4077) *
              C93639 * C800 -
          ((C5699 * C93694 + C2625 * C93828) * C4077 +
           (C5700 * C93694 + C2626 * C93828) * C4076 +
           (C5701 * C93694 + C5698 * C93828) * C4075) *
              C93639 * C801 +
          ((C5701 * C93828 +
            (C713 * C4897 + C5687 + C5687 + C93706 * C5675) * C93694) *
               C4075 +
           (C5700 * C93828 +
            (C713 * C4898 + C5688 + C5688 + C93706 * C5676) * C93694) *
               C4076 +
           (C5699 * C93828 +
            (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C93694) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
           C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
              C93585 * C93639 * C93625 * C97 -
          (C16320 * C20047 + C5700 * C20046 + C2626 * C20045 + C743 * C20044) *
              C93585 * C93639 * C93625 * C98 +
          (C744 * C20044 + C2625 * C20045 + C5699 * C20046 +
           (C713 * C4899 + C5689 + C5689 + C93706 * C5677) * C20047) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C93706 * C714) * C20044 +
           C5698 * C20045 + C5701 * C20046 + C16321 * C20047) *
              C93585 * C93639 * C800 -
          (C21050 * C20047 + C16321 * C20046 + C5701 * C20045 +
           C5698 * C20044) *
              C93585 * C93639 * C801 +
          (C5701 * C20044 + C16321 * C20045 + C21050 * C20046 +
           (C713 * C20532 + C21047 + C21047 + C93706 * C21043) * C20047) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
             C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
             C4077 * C122) *
                C93829 +
            (C11001 + C11002 + C11003) * C93718) *
               C93680 * C93639 * C1979 -
           ((C8545 + C8546 + C8547) * C93718 +
            (C4939 + C4938 + C4937) * C93829) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C6547 + C6548 + C6549) * C93829 +
            (C4080 * C3410 + C7538 + C7538 + C4075 * C3418 + C4082 * C3411 +
             C7539 + C7539 + C4076 * C3419 + C4084 * C3412 + C7540 + C7540 +
             C4077 * C3420) *
                C93718) *
               C93680 * C93639 * C1980 -
           ((C4084 * C1385 + C7537 + C7537 + C4077 * C1401 + C4082 * C1386 +
             C7536 + C7536 + C4076 * C1402 + C4080 * C1387 + C7535 + C7535 +
             C4075 * C1403) *
                C93718 +
            (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 +
             C4097 + C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
             C4075 * C121) *
                C93829) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
             C25027 * C93718) *
                C14739 +
            (C24216 + C24217) * C14740 + C24222 * C14741) *
               C93639 * C1979 -
           ((C24220 + C24221) * C14741 + (C24219 + C24218) * C14740 +
            (C24217 + C24216) * C14739) *
               C93639 * C1980) *
              C1981 +
          (((C25882 + C25894) * C14739 + (C25885 + C25895) * C14740 +
            (C21612 * C93829 +
             (C20048 * C19096 + C22256 + C22256 + C93585 * C19100) * C93718) *
                C14741) *
               C93639 * C1980 -
           ((C25895 + C25885) * C14741 + (C25894 + C25882) * C14740 +
            ((C20048 * C1387 + C22253 + C22253 + C93585 * C1403) * C93718 +
             (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93829) *
                C14739) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C4081 +
             (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
             C219 * C4076 + C220 * C4085 + C221 * C4077) *
                C93829 +
            (C11115 + C11116 + C11091 + C11092 + C11093 + C11094) * C93718) *
               C93639 * C1979 -
           ((C11976 * C4077 + C11977 * C4085 + C11978 * C4076 + C11979 * C4083 +
             (C188 * C3413 + C93680 * C3495) * C4075 +
             (C188 * C3409 + C93680 * C3491) * C4081) *
                C93718 +
            (C2073 * C4077 + C2074 * C4085 + C2075 * C4076 + C2076 * C4083 +
             (C188 * C815 + C93680 * C897) * C4075 +
             (C188 * C807 + C93680 * C889) * C4081) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          (((C2076 * C4081 + C2075 * C4075 + C2074 * C4083 + C2073 * C4076 +
             C2072 * C4085 + C2071 * C4077) *
                C93829 +
            (C11979 * C4081 + C11978 * C4075 + C11977 * C4083 + C11976 * C4076 +
             (C188 * C3412 + C93680 * C3494) * C4085 +
             (C188 * C3416 + C93680 * C3498) * C4077) *
                C93718) *
               C93639 * C1980 -
           ((C2785 * C4077 + C2786 * C4085 + C2787 * C4076 + C2788 * C4083 +
             C2789 * C4075 + C2790 * C4081) *
                C93718 +
            (C223 * C4077 + C222 * C4085 + C221 * C4076 + C220 * C4083 +
             C219 * C4075 + C218 * C4081) *
                C93829) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
              C14840 * C808 + C14741 * C890) *
                 C20049 +
             (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
              C14840 * C816 + C14741 * C898) *
                 C93585) *
                C93829 +
            ((C25133 + C25134 + C25135) * C20049 +
             (C25136 + C25137 + C25138) * C93585) *
                C93718) *
               C93639 * C1979 -
           (((C14840 * C19097 + C14741 * C19223 + C14839 * C8523 +
              C14740 * C8648 + C14838 * C3413 + C14739 * C3495) *
                 C93585 +
             (C14840 * C19095 + C14741 * C19221 + C14839 * C8520 +
              C14740 * C8645 + C14838 * C3409 + C14739 * C3491) *
                 C20049) *
                C93718 +
            ((C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
              C14838 * C815 + C14739 * C897) *
                 C93585 +
             (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
              C14838 * C807 + C14739 * C889) *
                 C20049) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          ((((C17275 + C17274 + C17273) * C20049 +
             (C17272 + C17271 + C17270) * C93585) *
                C93829 +
            ((C14838 * C3410 + C14739 * C3492 + C14839 * C8521 +
              C14740 * C8646 + C14840 * C19096 + C14741 * C19222) *
                 C20049 +
             (C14838 * C3414 + C14739 * C3496 + C14839 * C8524 +
              C14740 * C8649 + C14840 * C19098 + C14741 * C19224) *
                 C93585) *
                C93718) *
               C93639 * C1980 -
           (((C18256 + C18257 + C18258) * C93585 +
             (C18259 + C18260 + C18261) * C20049) *
                C93718 +
            ((C14871 + C14870 + C14869) * C93585 +
             (C14868 + C14867 + C14866) * C20049) *
                C93829) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C4081 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C4075 +
            (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
            C9684 * C4077) *
               C93680 * C93639 * C1979 -
           ((C12094 + C12095) * C4077 + (C12096 + C12097) * C4085 +
            (C12098 + C12099) * C4076 + (C12100 + C12101) * C4083 +
            (C9645 * C3413 + C93718 * C3569 + C9644 * C815 + C93829 * C963) *
                C4075 +
            (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
                C4081) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C12101 + C12100) * C4081 + (C12099 + C12098) * C4075 +
            (C12097 + C12096) * C4083 + (C12095 + C12094) * C4076 +
            (C9644 * C804 + C93829 * C952 + C9645 * C3412 + C93718 * C3568) *
                C4085 +
            (C9644 * C812 + C93829 * C960 + C9645 * C3416 + C93718 * C3572) *
                C4077) *
               C93680 * C93639 * C1980 -
           ((C9679 + C9680) * C4077 + (C9681 + C9682) * C4085 +
            (C9678 + C9677) * C4076 + (C9676 + C9675) * C4083 +
            (C9674 + C9673) * C4075 + (C9672 + C9671) * C4081) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C20049 +
             (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                 C93585) *
                C14739 +
            ((C24395 + C24396) * C20049 + (C24397 + C24398) * C93585) * C14740 +
            C24411 * C14741) *
               C93639 * C1979 -
           (((C24403 + C24404) * C93585 + (C24405 + C24406) * C20049) * C14741 +
            ((C24402 + C24401) * C93585 + (C24400 + C24399) * C20049) * C14740 +
            ((C24398 + C24397) * C93585 + (C24396 + C24395) * C20049) *
                C14739) *
               C93639 * C1980) *
              C1981 +
          ((((C12101 + C12100) * C20049 + (C12099 + C12098) * C93585) * C14739 +
            ((C26100 + C26101) * C20049 + (C26102 + C26103) * C93585) * C14740 +
            ((C9644 * C4898 + C93829 * C5097 + C9645 * C19096 +
              C93718 * C19324) *
                 C20049 +
             (C9644 * C4901 + C93829 * C5100 + C9645 * C19098 +
              C93718 * C19326) *
                 C93585) *
                C14741) *
               C93639 * C1980 -
           (((C26103 + C26102) * C93585 + (C26101 + C26100) * C20049) * C14741 +
            ((C12098 + C12099) * C93585 + (C12100 + C12101) * C20049) * C14740 +
            ((C9674 + C9673) * C93585 + (C9672 + C9671) * C20049) * C14739) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
              C4085 * C110 + C4077 * C116) *
                 C188 +
             (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
              C4085 * C191 + C4077 * C364) *
                 C93680) *
                C93829 +
            ((C11304 + C11305 + C11306) * C188 +
             (C11307 + C11308 + C11309) * C93680) *
                C93718) *
               C93639 * C1979 -
           (((C8881 + C8882 + C8883) * C93680 +
             (C8884 + C8885 + C8886) * C188) *
                C93718 +
            ((C5245 + C5244 + C5243) * C93680 +
             (C5242 + C5241 + C5240) * C188) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          ((((C6886 + C6887 + C6888) * C188 +
             (C6889 + C6890 + C6891) * C93680) *
                C93829 +
            ((C4081 * C3410 + C4075 * C3414 + C4083 * C3411 + C4076 * C3415 +
              C4085 * C3412 + C4077 * C3416) *
                 C188 +
             (C4081 * C3492 + C4075 * C3640 + C4083 * C3493 + C4076 * C3641 +
              C4085 * C3494 + C4077 * C3642) *
                 C93680) *
                C93718) *
               C93639 * C1980 -
           (((C4085 * C1467 + C4077 * C1599 + C4083 * C1468 + C4076 * C1600 +
              C4081 * C1469 + C4075 * C1601) *
                 C93680 +
             (C4085 * C1385 + C4077 * C1393 + C4083 * C1386 + C4076 * C1394 +
              C4081 * C1387 + C4075 * C1395) *
                 C188) *
                C93718 +
            ((C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
              C4081 * C190 + C4075 * C363) *
                 C93680 +
             (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
              C4081 * C109 + C4075 * C115) *
                 C188) *
                C93829) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C14838 +
             (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
             C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
                C93829 +
            (C25327 + C25328 + C25303 + C25304 + C25305 + C25306) * C93718) *
               C93639 * C1979 -
           ((C23104 * C14741 + C23105 * C14840 + C23106 * C14740 +
             C23107 * C14839 + C23108 * C14739 + C23109 * C14838) *
                C93718 +
            (C20754 * C14741 + C20753 * C14840 + C20752 * C14740 +
             C20751 * C14839 + C20750 * C14739 + C20749 * C14838) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          (((C21832 * C14838 + C21833 * C14739 + C21834 * C14839 +
             C21835 * C14740 + C21836 * C14840 + C21837 * C14741) *
                C93829 +
            (C26210 * C14838 + C26211 * C14739 + C26212 * C14839 +
             C26213 * C14740 + (C20049 * C19096 + C93585 * C19098) * C14840 +
             (C20049 * C19222 + C93585 * C19440) * C14741) *
                C93718) *
               C93639 * C1980 -
           ((C26213 * C14741 + C26212 * C14840 + C26211 * C14740 +
             C26210 * C14839 + (C20049 * C1469 + C93585 * C1601) * C14739 +
             (C20049 * C1387 + C93585 * C1395) * C14838) *
                C93718 +
            (C21835 * C14741 + C21834 * C14840 + C21833 * C14740 +
             C21832 * C14839 + (C20049 * C190 + C93585 * C363) * C14739 +
             (C20049 * C109 + C93585 * C115) * C14838) *
                C93829) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 +
             C448 * C4076 + C449 * C4077) *
                C93829 +
            (C11418 + C11395 + C11396) * C93718) *
               C93639 * C1979 -
           ((C12306 * C4077 + C12307 * C4076 +
             (C418 * C3409 + C3714 + C3714 + C93680 * C3709) * C4075) *
                C93718 +
            (C2311 * C4077 + C2312 * C4076 +
             (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C4075) *
                C93829) *
               C93639 * C1980) *
              C1981 +
          (((C2312 * C4075 + C2311 * C4076 + C2310 * C4077) * C93829 +
            (C12307 * C4075 + C12306 * C4076 +
             (C418 * C3412 + C3717 + C3717 + C93680 * C3712) * C4077) *
                C93718) *
               C93639 * C1980 -
           ((C3024 * C4077 + C3025 * C4076 + C3026 * C4075) * C93718 +
            (C450 * C4077 + C449 * C4076 + C448 * C4075) * C93829) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
             C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 +
             C15105 + C14741 * C1080) *
                C93585 * C93829 +
            (C25438 + C25439 + C25440) * C93585 * C93718) *
               C93639 * C1979 -
           ((C15101 * C19095 + C19568 + C19568 + C14741 * C19563 +
             C15100 * C8520 + C19567 + C19567 + C14740 * C8984 +
             C15099 * C3409 + C19566 + C19566 + C14739 * C3709) *
                C93585 * C93718 +
            (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 + C15100 * C808 +
             C15970 + C15970 + C14740 * C1080 + C15099 * C807 + C15971 +
             C15971 + C14739 * C1079) *
                C93585 * C93829) *
               C93639 * C1980) *
              C1981 +
          (((C17619 + C17618 + C17617) * C93585 * C93829 +
            (C15099 * C3410 + C19569 + C19569 + C14739 * C3710 +
             C15100 * C8521 + C19570 + C19570 + C14740 * C8985 +
             C15101 * C19096 + C19571 + C19571 + C14741 * C19564) *
                C93585 * C93718) *
               C93639 * C1980 -
           ((C18577 + C18578 + C18579) * C93585 * C93718 +
            (C15141 + C15140 + C15139) * C93585 * C93829) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C188 +
             (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                 C93680) *
                C4075 +
            ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
            C9928 * C4077) *
               C93639 * C1979 -
           (((C12414 + C12415) * C93680 + (C12096 + C12097) * C188) * C4077 +
            ((C12416 + C12417) * C93680 + (C12100 + C12101) * C188) * C4076 +
            ((C9645 * C3491 + C93718 * C3783 + C9644 * C889 + C93829 * C1145) *
                 C93680 +
             (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
                 C188) *
                C4075) *
               C93639 * C1980) *
              C1981 +
          ((((C12101 + C12100) * C188 + (C12417 + C12416) * C93680) * C4075 +
            ((C12097 + C12096) * C188 + (C12415 + C12414) * C93680) * C4076 +
            ((C9644 * C804 + C93829 * C952 + C9645 * C3412 + C93718 * C3568) *
                 C188 +
             (C9644 * C886 + C93829 * C1142 + C9645 * C3494 + C93718 * C3786) *
                 C93680) *
                C4077) *
               C93639 * C1980 -
           (((C9924 + C9925) * C93680 + (C9681 + C9682) * C188) * C4077 +
            ((C9923 + C9922) * C93680 + (C9676 + C9675) * C188) * C4076 +
            ((C9921 + C9920) * C93680 + (C9672 + C9671) * C188) * C4075) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C14838 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C14739 +
            (C24395 + C24396) * C14839 + (C24649 + C24650) * C14740 +
            C24407 * C14840 + C24655 * C14741) *
               C93585 * C93639 * C1979 -
           ((C24653 + C24654) * C14741 + (C24405 + C24406) * C14840 +
            (C24652 + C24651) * C14740 + (C24400 + C24399) * C14839 +
            (C24650 + C24649) * C14739 + (C24396 + C24395) * C14838) *
               C93585 * C93639 * C1980) *
              C1981 +
          (((C12101 + C12100) * C14838 + (C12417 + C12416) * C14739 +
            (C26100 + C26101) * C14839 + (C26414 + C26415) * C14740 +
            (C9644 * C4898 + C93829 * C5097 + C9645 * C19096 +
             C93718 * C19324) *
                C14840 +
            (C9644 * C5017 + C93829 * C5415 + C9645 * C19222 +
             C93718 * C19670) *
                C14741) *
               C93585 * C93639 * C1980 -
           ((C26415 + C26414) * C14741 + (C26101 + C26100) * C14840 +
            (C12416 + C12417) * C14740 + (C12100 + C12101) * C14839 +
            (C9921 + C9920) * C14739 + (C9672 + C9671) * C14838) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C9644 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93829 +
            (C11304 + C11305 + C11306) * C9645 +
            (C11588 + C11589 + C11590) * C93718) *
               C93680 * C93639 * C1979 -
           ((C9205 + C9206 + C9207) * C93718 + (C8884 + C8885 + C8886) * C9645 +
            (C5521 + C5520 + C5519) * C93829 +
            (C5242 + C5241 + C5240) * C9644) *
               C93680 * C93639 * C1980) *
              C1981 +
          (((C6886 + C6887 + C6888) * C9644 + (C7222 + C7223 + C7224) * C93829 +
            (C4081 * C3410 + C4075 * C3414 + C4083 * C3411 + C4076 * C3415 +
             C4085 * C3412 + C4077 * C3416) *
                C9645 +
            (C4081 * C3566 + C4075 * C3854 + C4083 * C3567 + C4076 * C3855 +
             C4085 * C3568 + C4077 * C3856) *
                C93718) *
               C93680 * C93639 * C1980 -
           ((C4085 * C1533 + C4077 * C1781 + C4083 * C1534 + C4076 * C1782 +
             C4081 * C1535 + C4075 * C1783) *
                C93718 +
            (C4085 * C1385 + C4077 * C1393 + C4083 * C1386 + C4076 * C1394 +
             C4081 * C1387 + C4075 * C1395) *
                C9645 +
            (C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
             C4081 * C277 + C4075 * C580) *
                C93829 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C9644) *
               C93680 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C9644 +
             (C20049 * C276 + C93585 * C579) * C93829 + C25319 * C9645 +
             C25604 * C93718) *
                C14739 +
            (C24730 + C24731 + C24732 + C24733) * C14740 + C24744 * C14741) *
               C93639 * C1979 -
           ((C24738 + C24739 + C24740 + C24741) * C14741 +
            (C24737 + C24736 + C24735 + C24734) * C14740 +
            (C24733 + C24732 + C24731 + C24730) * C14739) *
               C93639 * C1980) *
              C1981 +
          (((C26514 + C26515 + C26516 + C26526) * C14739 +
            (C26519 + C26520 + C26521 + C26527) * C14740 +
            (C21836 * C9644 + C22051 * C93829 +
             (C20049 * C19096 + C93585 * C19098) * C9645 +
             (C20049 * C19324 + C93585 * C19773) * C93718) *
                C14741) *
               C93639 * C1980 -
           ((C26527 + C26521 + C26520 + C26519) * C14741 +
            (C26526 + C26516 + C26515 + C26514) * C14740 +
            ((C20049 * C1535 + C93585 * C1783) * C93718 +
             (C20049 * C1387 + C93585 * C1395) * C9645 +
             (C20049 * C277 + C93585 * C580) * C93829 +
             (C20049 * C109 + C93585 * C115) * C9644) *
                C14739) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C9644 +
             (C188 * C276 + C93680 * C635) * C93829 + C11107 * C9645 +
             C11679 * C93718) *
                C4075 +
            (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
               C93639 * C1979 -
           ((C12626 + C12616 + C12617 + C12618) * C4077 +
            (C12627 + C12621 + C12622 + C12623) * C4076 +
            ((C188 * C3565 + C93680 * C3923) * C93718 +
             (C188 * C3409 + C93680 * C3491) * C9645 +
             (C188 * C955 + C93680 * C1261) * C93829 +
             (C188 * C807 + C93680 * C889) * C9644) *
                C4075) *
               C93639 * C1980) *
              C1981 +
          (((C12623 + C12622 + C12621 + C12627) * C4075 +
            (C12618 + C12617 + C12616 + C12626) * C4076 +
            (C2072 * C9644 + C2538 * C93829 +
             (C188 * C3412 + C93680 * C3494) * C9645 +
             (C188 * C3568 + C93680 * C3926) * C93718) *
                C4077) *
               C93639 * C1980 -
           ((C10085 + C10086 + C10087 + C10088) * C4077 +
            (C10084 + C10083 + C10082 + C10081) * C4076 +
            (C10080 + C10079 + C10078 + C10077) * C4075) *
               C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C9644 +
            (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
             C14840 * C956 + C14741 * C1262) *
                C93829 +
            (C25133 + C25134 + C25135) * C9645 +
            (C25696 + C25697 + C25698) * C93718) *
               C93585 * C93639 * C1979 -
           ((C14840 * C19323 + C14741 * C19884 + C14839 * C8749 +
             C14740 * C9305 + C14838 * C3565 + C14739 * C3923) *
                C93718 +
            (C14840 * C19095 + C14741 * C19221 + C14839 * C8520 +
             C14740 * C8645 + C14838 * C3409 + C14739 * C3491) *
                C9645 +
            (C14840 * C5096 + C14741 * C5598 + C14839 * C956 + C14740 * C1262 +
             C14838 * C955 + C14739 * C1261) *
                C93829 +
            (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
             C14838 * C807 + C14739 * C889) *
                C9644) *
               C93585 * C93639 * C1980) *
              C1981 +
          (((C17275 + C17274 + C17273) * C9644 +
            (C17940 + C17939 + C17938) * C93829 +
            (C14838 * C3410 + C14739 * C3492 + C14839 * C8521 + C14740 * C8646 +
             C14840 * C19096 + C14741 * C19222) *
                C9645 +
            (C14838 * C3566 + C14739 * C3924 + C14839 * C8750 + C14740 * C9306 +
             C14840 * C19324 + C14741 * C19885) *
                C93718) *
               C93585 * C93639 * C1980 -
           ((C18889 + C18890 + C18891) * C93718 +
            (C18259 + C18260 + C18261) * C9645 +
            (C15393 + C15392 + C15391) * C93829 +
            (C14868 + C14867 + C14866) * C9644) *
               C93585 * C93639 * C1979) *
              C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezz[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                       C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                          C93680 * C4075 +
                      (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                         C93639 * C1979 -
                     ((C12744 + C12745) * C93680 * C4077 +
                      (C12746 + C12747) * C93680 * C4076 +
                      (C10166 * C3409 + C10883 + C10883 + C93718 * C3993 +
                       C10165 * C807 + C10884 + C10884 + C93829 * C1319) *
                          C93680 * C4075) *
                         C93639 * C1980) *
                        C1981 +
                    (((C12747 + C12746) * C93680 * C4075 +
                      (C12745 + C12744) * C93680 * C4076 +
                      (C10165 * C804 + C12734 + C12734 + C93829 * C1316 +
                       C10166 * C3412 + C12735 + C12735 + C93718 * C3996) *
                          C93680 * C4077) *
                         C93639 * C1980 -
                     ((C10206 + C10207) * C93680 * C4077 +
                      (C10205 + C10204) * C93680 * C4076 +
                      (C10203 + C10202) * C93680 * C4075) *
                         C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                       C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                          C14739 +
                      (C24921 + C24922) * C14740 + C24927 * C14741) *
                         C93585 * C93639 * C1979 -
                     ((C24925 + C24926) * C14741 + (C24924 + C24923) * C14740 +
                      (C24922 + C24921) * C14739) *
                         C93585 * C93639 * C1980) *
                        C1981 +
                    (((C12747 + C12746) * C14739 + (C26734 + C26735) * C14740 +
                      (C10165 * C4898 + C26728 + C26728 + C93829 * C5676 +
                       C10166 * C19096 + C26729 + C26729 + C93718 * C19985) *
                          C14741) *
                         C93585 * C93639 * C1980 -
                     ((C26735 + C26734) * C14741 + (C12746 + C12747) * C14740 +
                      (C10203 + C10202) * C14739) *
                         C93585 * C93639 * C1979) *
                        C1982)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
             C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
             C4077 * C122) *
                C93829 +
            (C11001 + C11002 + C11003) * C93718) *
               C93680 * C2695 -
           ((C11004 + C11005 + C11006) * C93718 +
            (C11003 + C11002 + C11001) * C93829) *
               C93680 * C2696) *
              C1979 +
          (((C8547 + C8546 + C8545) * C93829 +
            (C4080 * C5775 + C5794 + C5794 + C4075 * C5781 + C4082 * C5776 +
             C5795 + C5795 + C4076 * C5782 + C4084 * C5777 + C5796 + C5796 +
             C4077 * C5783) *
                C93718) *
               C93680 * C2696 -
           ((C8545 + C8546 + C8547) * C93718 +
            (C4939 + C4938 + C4937) * C93829) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
             C25027 * C93718) *
                C14739 +
            (C24216 + C24217) * C14740 + C24222 * C14741) *
               C2695 -
           ((C27741 + C27742) * C14741 + (C27743 + C27744) * C14740 +
            (C25030 * C93718 + C25027 * C93829) * C14739) *
               C2696) *
              C1979 +
          (((C27744 + C27743) * C14739 + (C27742 + C27741) * C14740 +
            (C22871 * C93829 +
             (C20048 * C21100 + C21111 + C21111 + C93585 * C21102) * C93718) *
                C14741) *
               C2696 -
           ((C24220 + C24221) * C14741 + (C24219 + C24218) * C14740 +
            (C24217 + C24216) * C14739) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C4081 +
             (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
             C219 * C4076 + C220 * C4085 + C221 * C4077) *
                C93829 +
            (C11115 + C11116 + C11091 + C11092 + C11093 + C11094) * C93718) *
               C2695 -
           ((C11117 + C11118 + C11119 + C11120 + C11121 + C11122) * C93718 +
            (C11094 + C11093 + C11092 + C11091 + C11116 + C11115) * C93829) *
               C2696) *
              C1979 +
          (((C13956 + C13957 + C13950 + C13951 + C13952 + C13953) * C93829 +
            ((C188 * C5775 + C93680 * C5870) * C4081 +
             (C188 * C5778 + C93680 * C5873) * C4075 +
             (C188 * C5776 + C93680 * C5871) * C4083 +
             (C188 * C5779 + C93680 * C5874) * C4076 +
             (C188 * C5777 + C93680 * C5872) * C4085 +
             (C188 * C5780 + C93680 * C5875) * C4077) *
                C93718) *
               C2696 -
           ((C13953 + C13952 + C13951 + C13950 + C13957 + C13956) * C93718 +
            (C2073 * C4077 + C2074 * C4085 + C2075 * C4076 + C2076 * C4083 +
             (C188 * C815 + C93680 * C897) * C4075 +
             (C188 * C807 + C93680 * C889) * C4081) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
              C14840 * C808 + C14741 * C890) *
                 C20049 +
             (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
              C14840 * C816 + C14741 * C898) *
                 C93585) *
                C93829 +
            ((C25133 + C25134 + C25135) * C20049 +
             (C25136 + C25137 + C25138) * C93585) *
                C93718) *
               C2695 -
           (((C25139 + C25140 + C25141) * C93585 +
             (C25142 + C25143 + C25144) * C20049) *
                C93718 +
            ((C25138 + C25137 + C25136) * C93585 +
             (C25135 + C25134 + C25133) * C20049) *
                C93829) *
               C2696) *
              C1979 +
          ((((C27855 + C27856 + C27857) * C20049 +
             (C27858 + C27859 + C27860) * C93585) *
                C93829 +
            ((C14838 * C5775 + C14739 * C5870 + C14839 * C16395 +
              C14740 * C16487 + C14840 * C21100 + C14741 * C21161) *
                 C20049 +
             (C14838 * C5778 + C14739 * C5873 + C14839 * C16397 +
              C14740 * C16489 + C14840 * C21101 + C14741 * C21162) *
                 C93585) *
                C93718) *
               C2696 -
           (((C27860 + C27859 + C27858) * C93585 +
             (C27857 + C27856 + C27855) * C20049) *
                C93718 +
            ((C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
              C14838 * C815 + C14739 * C897) *
                 C93585 +
             (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
              C14838 * C807 + C14739 * C889) *
                 C20049) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C4081 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C4075 +
            (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
            C9684 * C4077) *
               C93680 * C2695 -
           ((C13082 + C13083) * C4077 + (C13084 + C13085) * C4085 +
            (C13086 + C13087) * C4076 + (C13088 + C13089) * C4083 +
            (C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                C4075 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C4081) *
               C93680 * C2696) *
              C1979 +
          (((C9644 * C3409 + C93829 * C3565 + C9645 * C5775 + C93718 * C5950) *
                C4081 +
            (C9644 * C3413 + C93829 * C3569 + C9645 * C5778 + C93718 * C5953) *
                C4075 +
            (C9644 * C3410 + C93829 * C3566 + C9645 * C5776 + C93718 * C5951) *
                C4083 +
            (C9644 * C3414 + C93829 * C3570 + C9645 * C5779 + C93718 * C5954) *
                C4076 +
            (C9644 * C3411 + C93829 * C3567 + C9645 * C5777 + C93718 * C5952) *
                C4085 +
            (C9644 * C3415 + C93829 * C3571 + C9645 * C5780 + C93718 * C5955) *
                C4077) *
               C93680 * C2696 -
           ((C12094 + C12095) * C4077 + (C12096 + C12097) * C4085 +
            (C12098 + C12099) * C4076 + (C12100 + C12101) * C4083 +
            (C9645 * C3413 + C93718 * C3569 + C9644 * C815 + C93829 * C963) *
                C4075 +
            (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
                C4081) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C20049 +
             (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                 C93585) *
                C14739 +
            ((C24395 + C24396) * C20049 + (C24397 + C24398) * C93585) * C14740 +
            C24411 * C14741) *
               C2695 -
           (((C27975 + C27976) * C93585 + (C27977 + C27978) * C20049) * C14741 +
            ((C27979 + C27980) * C93585 + (C27981 + C27982) * C20049) * C14740 +
            ((C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                 C93585 +
             (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                 C20049) *
                C14739) *
               C2696) *
              C1979 +
          ((((C27982 + C27981) * C20049 + (C27980 + C27979) * C93585) * C14739 +
            ((C27978 + C27977) * C20049 + (C27976 + C27975) * C93585) * C14740 +
            ((C9644 * C19095 + C93829 * C19323 + C9645 * C21100 +
              C93718 * C21213) *
                 C20049 +
             (C9644 * C19097 + C93829 * C19325 + C9645 * C21101 +
              C93718 * C21214) *
                 C93585) *
                C14741) *
               C2696 -
           (((C24403 + C24404) * C93585 + (C24405 + C24406) * C20049) * C14741 +
            ((C24402 + C24401) * C93585 + (C24400 + C24399) * C20049) * C14740 +
            ((C24398 + C24397) * C93585 + (C24396 + C24395) * C20049) *
                C14739) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
              C4085 * C110 + C4077 * C116) *
                 C188 +
             (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
              C4085 * C191 + C4077 * C364) *
                 C93680) *
                C93829 +
            ((C11304 + C11305 + C11306) * C188 +
             (C11307 + C11308 + C11309) * C93680) *
                C93718) *
               C2695 -
           (((C11310 + C11311 + C11312) * C93680 +
             (C11313 + C11314 + C11315) * C188) *
                C93718 +
            ((C11309 + C11308 + C11307) * C93680 +
             (C11306 + C11305 + C11304) * C188) *
                C93829) *
               C2696) *
              C1979 +
          ((((C8886 + C8885 + C8884) * C188 +
             (C8883 + C8882 + C8881) * C93680) *
                C93829 +
            ((C4081 * C5775 + C4075 * C5778 + C4083 * C5776 + C4076 * C5779 +
              C4085 * C5777 + C4077 * C5780) *
                 C188 +
             (C4081 * C5870 + C4075 * C6030 + C4083 * C5871 + C4076 * C6031 +
              C4085 * C5872 + C4077 * C6032) *
                 C93680) *
                C93718) *
               C2696 -
           (((C8881 + C8882 + C8883) * C93680 +
             (C8884 + C8885 + C8886) * C188) *
                C93718 +
            ((C5245 + C5244 + C5243) * C93680 +
             (C5242 + C5241 + C5240) * C188) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C14838 +
             (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
             C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
                C93829 +
            (C25327 + C25328 + C25303 + C25304 + C25305 + C25306) * C93718) *
               C2695 -
           ((C25329 + C25330 + C25331 + C25332 + C25333 + C25334) * C93718 +
            (C25306 + C25305 + C25304 + C25303 + C25328 + C25327) * C93829) *
               C2696) *
              C1979 +
          (((C28081 + C28082 + C28083 + C28084 + C28085 + C28086) * C93829 +
            (C25324 * C14838 + C25323 * C14739 + C25322 * C14839 +
             C25321 * C14740 + (C20049 * C21100 + C93585 * C21101) * C14840 +
             (C20049 * C21161 + C93585 * C21265) * C14741) *
                C93718) *
               C2696 -
           ((C28086 + C28085 + C28084 + C28083 + C28082 + C28081) * C93718 +
            (C20754 * C14741 + C20753 * C14840 + C20752 * C14740 +
             C20751 * C14839 + C20750 * C14739 + C20749 * C14838) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 +
             C448 * C4076 + C449 * C4077) *
                C93829 +
            (C11418 + C11395 + C11396) * C93718) *
               C2695 -
           ((C11419 + C11420 + C11421) * C93718 +
            (C11396 + C11395 + C11418) * C93829) *
               C2696) *
              C1979 +
          (((C14262 + C14254 + C14255) * C93829 +
            ((C418 * C5775 + C14256 + C14256 + C93680 * C6107) * C4075 +
             (C418 * C5776 + C14257 + C14257 + C93680 * C6108) * C4076 +
             (C418 * C5777 + C14258 + C14258 + C93680 * C6109) * C4077) *
                C93718) *
               C2696 -
           ((C14255 + C14254 + C14262) * C93718 +
            (C2311 * C4077 + C2312 * C4076 +
             (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C4075) *
                C93829) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
             C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 +
             C15105 + C14741 * C1080) *
                C93585 * C93829 +
            (C25438 + C25439 + C25440) * C93585 * C93718) *
               C2695 -
           ((C25441 + C25442 + C25443) * C93585 * C93718 +
            (C25440 + C25439 + C25438) * C93585 * C93829) *
               C2696) *
              C1979 +
          (((C28200 + C28201 + C28202) * C93585 * C93829 +
            (C15099 * C5775 + C28191 + C28191 + C14739 * C6107 +
             C15100 * C16395 + C28192 + C28192 + C14740 * C16719 +
             C15101 * C21100 + C28193 + C28193 + C14741 * C21316) *
                C93585 * C93718) *
               C2696 -
           ((C28202 + C28201 + C28200) * C93585 * C93718 +
            (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 + C15100 * C808 +
             C15970 + C15970 + C14740 * C1080 + C15099 * C807 + C15971 +
             C15971 + C14739 * C1079) *
                C93585 * C93829) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C188 +
             (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                 C93680) *
                C4075 +
            ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
            C9928 * C4077) *
               C2695 -
           (((C13413 + C13414) * C93680 + (C13084 + C13085) * C188) * C4077 +
            ((C13415 + C13416) * C93680 + (C13088 + C13089) * C188) * C4076 +
            ((C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                 C93680 +
             (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                 C188) *
                C4075) *
               C2696) *
              C1979 +
          ((((C9644 * C3409 + C93829 * C3565 + C9645 * C5775 + C93718 * C5950) *
                 C188 +
             (C9644 * C3491 + C93829 * C3783 + C9645 * C5870 + C93718 * C6196) *
                 C93680) *
                C4075 +
            ((C9644 * C3410 + C93829 * C3566 + C9645 * C5776 + C93718 * C5951) *
                 C188 +
             (C9644 * C3492 + C93829 * C3784 + C9645 * C5871 + C93718 * C6197) *
                 C93680) *
                C4076 +
            ((C9644 * C3411 + C93829 * C3567 + C9645 * C5777 + C93718 * C5952) *
                 C188 +
             (C9644 * C3493 + C93829 * C3785 + C9645 * C5872 + C93718 * C6198) *
                 C93680) *
                C4077) *
               C2696 -
           (((C12414 + C12415) * C93680 + (C12096 + C12097) * C188) * C4077 +
            ((C12416 + C12417) * C93680 + (C12100 + C12101) * C188) * C4076 +
            ((C9645 * C3491 + C93718 * C3783 + C9644 * C889 + C93829 * C1145) *
                 C93680 +
             (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
                 C188) *
                C4075) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C14838 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C14739 +
            (C24395 + C24396) * C14839 + (C24649 + C24650) * C14740 +
            C24407 * C14840 + C24655 * C14741) *
               C93585 * C2695 -
           ((C28309 + C28310) * C14741 + (C27977 + C27978) * C14840 +
            (C28311 + C28312) * C14740 + (C27981 + C27982) * C14839 +
            (C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                C14739 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C14838) *
               C93585 * C2696) *
              C1979 +
          (((C27982 + C27981) * C14838 + (C28312 + C28311) * C14739 +
            (C27978 + C27977) * C14839 + (C28310 + C28309) * C14740 +
            (C9644 * C19095 + C93829 * C19323 + C9645 * C21100 +
             C93718 * C21213) *
                C14840 +
            (C9644 * C19221 + C93829 * C19669 + C9645 * C21161 +
             C93718 * C21375) *
                C14741) *
               C93585 * C2696 -
           ((C24653 + C24654) * C14741 + (C24405 + C24406) * C14840 +
            (C24652 + C24651) * C14740 + (C24400 + C24399) * C14839 +
            (C24650 + C24649) * C14739 + (C24396 + C24395) * C14838) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C9644 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93829 +
            (C11304 + C11305 + C11306) * C9645 +
            (C11588 + C11589 + C11590) * C93718) *
               C93680 * C2695 -
           ((C11591 + C11592 + C11593) * C93718 +
            (C11313 + C11314 + C11315) * C9645 +
            (C11590 + C11589 + C11588) * C93829 +
            (C11306 + C11305 + C11304) * C9644) *
               C93680 * C2696) *
              C1979 +
          (((C8886 + C8885 + C8884) * C9644 + (C9207 + C9206 + C9205) * C93829 +
            (C4081 * C5775 + C4075 * C5778 + C4083 * C5776 + C4076 * C5779 +
             C4085 * C5777 + C4077 * C5780) *
                C9645 +
            (C4081 * C5950 + C4075 * C6273 + C4083 * C5951 + C4076 * C6274 +
             C4085 * C5952 + C4077 * C6275) *
                C93718) *
               C93680 * C2696 -
           ((C9205 + C9206 + C9207) * C93718 + (C8884 + C8885 + C8886) * C9645 +
            (C5521 + C5520 + C5519) * C93829 +
            (C5242 + C5241 + C5240) * C9644) *
               C93680 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C9644 +
             (C20049 * C276 + C93585 * C579) * C93829 + C25319 * C9645 +
             C25604 * C93718) *
                C14739 +
            (C24730 + C24731 + C24732 + C24733) * C14740 + C24744 * C14741) *
               C2695 -
           ((C28411 + C28412 + C28413 + C28414) * C14741 +
            (C28415 + C28416 + C28417 + C28418) * C14740 +
            (C25607 * C93718 + C25326 * C9645 + C25604 * C93829 +
             C25319 * C9644) *
                C14739) *
               C2696) *
              C1979 +
          (((C28418 + C28417 + C28416 + C28415) * C14739 +
            (C28414 + C28413 + C28412 + C28411) * C14740 +
            (C23105 * C9644 + C23327 * C93829 +
             (C20049 * C21100 + C93585 * C21101) * C9645 +
             (C20049 * C21213 + C93585 * C21426) * C93718) *
                C14741) *
               C2696 -
           ((C24738 + C24739 + C24740 + C24741) * C14741 +
            (C24737 + C24736 + C24735 + C24734) * C14740 +
            (C24733 + C24732 + C24731 + C24730) * C14739) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C9644 +
             (C188 * C276 + C93680 * C635) * C93829 + C11107 * C9645 +
             C11679 * C93718) *
                C4075 +
            (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
               C2695 -
           ((C13622 + C13623 + C13624 + C13625) * C4077 +
            (C13626 + C13627 + C13628 + C13629) * C4076 +
            (C11682 * C93718 + C11114 * C9645 + C11679 * C93829 +
             C11107 * C9644) *
                C4075) *
               C2696) *
              C1979 +
          (((C13954 * C9644 + C14559 * C93829 +
             (C188 * C5775 + C93680 * C5870) * C9645 +
             (C188 * C5950 + C93680 * C6350) * C93718) *
                C4075 +
            (C11979 * C9644 + C12625 * C93829 +
             (C188 * C5776 + C93680 * C5871) * C9645 +
             (C188 * C5951 + C93680 * C6351) * C93718) *
                C4076 +
            (C11977 * C9644 + C12624 * C93829 +
             (C188 * C5777 + C93680 * C5872) * C9645 +
             (C188 * C5952 + C93680 * C6352) * C93718) *
                C4077) *
               C2696 -
           ((C12626 + C12616 + C12617 + C12618) * C4077 +
            (C12627 + C12621 + C12622 + C12623) * C4076 +
            (C14559 * C93718 + C13954 * C9645 +
             (C188 * C955 + C93680 * C1261) * C93829 +
             (C188 * C807 + C93680 * C889) * C9644) *
                C4075) *
               C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C9644 +
            (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
             C14840 * C956 + C14741 * C1262) *
                C93829 +
            (C25133 + C25134 + C25135) * C9645 +
            (C25696 + C25697 + C25698) * C93718) *
               C93585 * C2695 -
           ((C25699 + C25700 + C25701) * C93718 +
            (C25142 + C25143 + C25144) * C9645 +
            (C25698 + C25697 + C25696) * C93829 +
            (C25135 + C25134 + C25133) * C9644) *
               C93585 * C2696) *
              C1979 +
          (((C27855 + C27856 + C27857) * C9644 +
            (C28523 + C28524 + C28525) * C93829 +
            (C14838 * C5775 + C14739 * C5870 + C14839 * C16395 +
             C14740 * C16487 + C14840 * C21100 + C14741 * C21161) *
                C9645 +
            (C14838 * C5950 + C14739 * C6350 + C14839 * C16565 +
             C14740 * C16959 + C14840 * C21213 + C14741 * C21477) *
                C93718) *
               C93585 * C2696 -
           ((C28525 + C28524 + C28523) * C93718 +
            (C27857 + C27856 + C27855) * C9645 +
            (C14840 * C5096 + C14741 * C5598 + C14839 * C956 + C14740 * C1262 +
             C14838 * C955 + C14739 * C1261) *
                C93829 +
            (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
             C14838 * C807 + C14739 * C889) *
                C9644) *
               C93585 * C2695) *
              C1980) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                       C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                          C93680 * C4075 +
                      (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                         C2695 -
                     ((C13746 + C13747) * C93680 * C4077 +
                      (C13748 + C13749) * C93680 * C4076 +
                      (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
                       C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                          C93680 * C4075) *
                         C2696) *
                        C1979 +
                    (((C10165 * C3409 + C14658 + C14658 + C93829 * C3993 +
                       C10166 * C5775 + C14659 + C14659 + C93718 * C6427) *
                          C93680 * C4075 +
                      (C10165 * C3410 + C14660 + C14660 + C93829 * C3994 +
                       C10166 * C5776 + C14661 + C14661 + C93718 * C6428) *
                          C93680 * C4076 +
                      (C10165 * C3411 + C14662 + C14662 + C93829 * C3995 +
                       C10166 * C5777 + C14663 + C14663 + C93718 * C6429) *
                          C93680 * C4077) *
                         C2696 -
                     ((C12744 + C12745) * C93680 * C4077 +
                      (C12746 + C12747) * C93680 * C4076 +
                      (C10166 * C3409 + C10883 + C10883 + C93718 * C3993 +
                       C10165 * C807 + C10884 + C10884 + C93829 * C1319) *
                          C93680 * C4075) *
                         C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                       C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                          C14739 +
                      (C24921 + C24922) * C14740 + C24927 * C14741) *
                         C93585 * C2695 -
                     ((C28642 + C28643) * C14741 + (C28644 + C28645) * C14740 +
                      (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
                       C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                          C14739) *
                         C93585 * C2696) *
                        C1979 +
                    (((C28645 + C28644) * C14739 + (C28643 + C28642) * C14740 +
                      (C10165 * C19095 + C28632 + C28632 + C93829 * C19984 +
                       C10166 * C21100 + C28633 + C28633 + C93718 * C21528) *
                          C14741) *
                         C93585 * C2696 -
                     ((C24925 + C24926) * C14741 + (C24924 + C24923) * C14740 +
                      (C24922 + C24921) * C14739) *
                         C93585 * C2695) *
                        C1980) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93829 +
           (C4080 * C1388 + C5790 + C5790 + C4075 * C1404 + C4082 * C1387 +
            C5789 + C5789 + C4076 * C1403 + C4084 * C1386 + C5788 + C5788 +
            C4077 * C1402) *
               C93718) *
              C93680 * C93639 * C800 -
          ((C8545 + C8546 + C8547) * C93718 +
           (C4939 + C4938 + C4937) * C93829) *
              C93680 * C93639 * C801 +
          ((C4942 + C4941 + C4940) * C93829 +
           (C4080 * C8520 + C8536 + C8536 + C4075 * C8526 + C4082 * C8521 +
            C8537 + C8537 + C4076 * C8527 + C4084 * C8522 + C8538 + C8538 +
            C4077 * C8528) *
               C93718) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93829 +
           (C4080 * C1388 + C5790 + C5790 + C4075 * C1404 + C4082 * C1387 +
            C5789 + C5789 + C4076 * C1403 + C4084 * C1386 + C5788 + C5788 +
            C4077 * C1402) *
               C93718) *
              C93680 * C93639 * C93625 * C97 -
          ((C4084 * C1385 + C7537 + C7537 + C4077 * C1401 + C4082 * C1386 +
            C7536 + C7536 + C4076 * C1402 + C4080 * C1387 + C7535 + C7535 +
            C4075 * C1403) *
               C93718 +
           (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 + C4097 +
            C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
            C4075 * C121) *
               C93829) *
              C93680 * C93639 * C93625 * C98 +
          ((C4080 * C110 + C4099 + C4099 + C4075 * C122 + C4082 * C111 + C4100 +
            C4100 + C4076 * C123 + C4084 * C112 + C4101 + C4101 +
            C4077 * C124) *
               C93829 +
           (C4080 * C1386 + C9494 + C9494 + C4075 * C1402 + C4082 * C1385 +
            C9495 + C9495 + C4076 * C1401 + C4084 * C2697 + C9496 + C9496 +
            C4077 * C2699) *
               C93718) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93829 +
           (C11001 + C11002 + C11003) * C93718) *
              C93680 * C1382 -
          ((C11004 + C11005 + C11006) * C93718 +
           (C11003 + C11002 + C11001) * C93829) *
              C93680 * C1383 +
          ((C11006 + C11005 + C11004) * C93829 +
           (C4080 * C10964 + C10986 + C10986 + C4075 * C10970 + C4082 * C10965 +
            C10987 + C10987 + C4076 * C10971 + C4084 * C10966 + C10988 +
            C10988 + C4077 * C10972) *
               C93718) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
            (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) * C93718) *
               C14739 +
           (C20554 * C93829 + C22873 * C93718) * C14740 +
           (C20555 * C93829 + C22872 * C93718) * C14741) *
              C93639 * C93625 * C97 -
          (((C20048 * C8521 + C22255 + C22255 + C93585 * C8527) * C93718 +
            C21611 * C93829) *
               C14741 +
           ((C20048 * C3410 + C22254 + C22254 + C93585 * C3418) * C93718 +
            C21610 * C93829) *
               C14740 +
           ((C20048 * C1387 + C22253 + C22253 + C93585 * C1403) * C93718 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93829) *
               C14739) *
              C93639 * C93625 * C98 +
          (((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C93829 +
            (C20048 * C1386 + C23547 + C23547 + C93585 * C1402) * C93718) *
               C14739 +
           ((C20048 * C805 + C20060 + C20060 + C93585 * C821) * C93829 +
            (C20048 * C3411 + C23548 + C23548 + C93585 * C3419) * C93718) *
               C14740 +
           ((C20048 * C810 + C20061 + C20061 + C93585 * C826) * C93829 +
            (C20048 * C8522 + C23549 + C23549 + C93585 * C8528) * C93718) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
            (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) * C93718) *
               C14739 +
           (C24216 + C24217) * C14740 + C24222 * C14741) *
              C93639 * C800 -
          ((C24220 + C24221) * C14741 + (C24219 + C24218) * C14740 +
           (C24217 + C24216) * C14739) *
              C93639 * C801 +
          (C24222 * C14739 + (C24221 + C24220) * C14740 +
           (C20557 * C93829 +
            (C20048 * C22854 + C22864 + C22864 + C93585 * C22856) * C93718) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
            C25027 * C93718) *
               C14739 +
           (C24216 + C24217) * C14740 + C24222 * C14741) *
              C1382 -
          ((C25028 * C93718 + C22872 * C93829) * C14741 +
           (C25029 * C93718 + C22873 * C93829) * C14740 +
           (C25030 * C93718 + C25027 * C93829) * C14739) *
              C1383 +
          ((C25030 * C93829 +
            (C20048 * C10964 + C25016 + C25016 + C93585 * C10970) * C93718) *
               C14739 +
           (C25029 * C93829 +
            (C20048 * C25001 + C25017 + C25017 + C93585 * C25005) * C93718) *
               C14740 +
           (C25028 * C93829 +
            (C20048 * C25002 + C25018 + C25018 + C93585 * C25006) * C93718) *
               C14741) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C4081 +
            (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
            C219 * C4076 + C220 * C4085 + C221 * C4077) *
               C93829 +
           ((C188 * C1388 + C93680 * C1470) * C4081 +
            (C188 * C1396 + C93680 * C1478) * C4075 + C2790 * C4083 +
            C2789 * C4076 + C2788 * C4085 + C2787 * C4077) *
               C93718) *
              C93639 * C800 -
          (((C188 * C3415 + C93680 * C3497) * C4077 +
            (C188 * C3411 + C93680 * C3493) * C4085 +
            (C188 * C3414 + C93680 * C3496) * C4076 +
            (C188 * C3410 + C93680 * C3492) * C4083 +
            (C188 * C3413 + C93680 * C3495) * C4075 +
            (C188 * C3409 + C93680 * C3491) * C4081) *
               C93718 +
           (C2073 * C4077 + C2074 * C4085 + C2075 * C4076 + C2076 * C4083 +
            (C188 * C815 + C93680 * C897) * C4075 +
            (C188 * C807 + C93680 * C889) * C4081) *
               C93829) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C4081 +
            (C188 * C816 + C93680 * C898) * C4075 +
            (C188 * C809 + C93680 * C891) * C4083 +
            (C188 * C817 + C93680 * C899) * C4076 +
            (C188 * C810 + C93680 * C892) * C4085 +
            (C188 * C818 + C93680 * C900) * C4077) *
               C93829 +
           ((C188 * C8520 + C93680 * C8645) * C4081 +
            (C188 * C8523 + C93680 * C8648) * C4075 +
            (C188 * C8521 + C93680 * C8646) * C4083 +
            (C188 * C8524 + C93680 * C8649) * C4076 +
            (C188 * C8522 + C93680 * C8647) * C4085 +
            (C188 * C8525 + C93680 * C8650) * C4077) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C4081 +
            (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
            C219 * C4076 + C220 * C4085 + C221 * C4077) *
               C93829 +
           ((C188 * C1388 + C93680 * C1470) * C4081 +
            (C188 * C1396 + C93680 * C1478) * C4075 + C2790 * C4083 +
            C2789 * C4076 + C2788 * C4085 + C2787 * C4077) *
               C93718) *
              C93639 * C93625 * C97 -
          ((C2785 * C4077 + C2786 * C4085 + C2787 * C4076 + C2788 * C4083 +
            C2789 * C4075 + C2790 * C4081) *
               C93718 +
           (C223 * C4077 + C222 * C4085 + C221 * C4076 + C220 * C4083 +
            C219 * C4075 + C218 * C4081) *
               C93829) *
              C93639 * C93625 * C98 +
          ((C220 * C4081 + C221 * C4075 + C222 * C4083 + C223 * C4076 +
            C225 * C4085 + C224 * C4077) *
               C93829 +
           (C2788 * C4081 + C2787 * C4075 + C2786 * C4083 + C2785 * C4076 +
            (C188 * C2697 + C93680 * C2770) * C4085 +
            (C188 * C2698 + C93680 * C2771) * C4077) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C4081 +
            (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
            C219 * C4076 + C220 * C4085 + C221 * C4077) *
               C93829 +
           (C11115 + C11116 + C11091 + C11092 + C11093 + C11094) * C93718) *
              C1382 -
          ((C11117 + C11118 + C11119 + C11120 + C11121 + C11122) * C93718 +
           (C11094 + C11093 + C11092 + C11091 + C11116 + C11115) * C93829) *
              C1383 +
          ((C11122 + C11121 + C11120 + C11119 + C11118 + C11117) * C93829 +
           ((C188 * C10964 + C93680 * C11080) * C4081 +
            (C188 * C10967 + C93680 * C11083) * C4075 +
            (C188 * C10965 + C93680 * C11081) * C4083 +
            (C188 * C10968 + C93680 * C11084) * C4076 +
            (C188 * C10966 + C93680 * C11082) * C4085 +
            (C188 * C10969 + C93680 * C11085) * C4077) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C20049 +
            (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
             C14840 * C816 + C14741 * C898) *
                C93585) *
               C93829 +
           ((C14838 * C1388 + C14739 * C1470 + C14839 * C3409 + C14740 * C3491 +
             C14840 * C8520 + C14741 * C8645) *
                C20049 +
            (C14838 * C1396 + C14739 * C1478 + C14839 * C3413 + C14740 * C3495 +
             C14840 * C8523 + C14741 * C8648) *
                C93585) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C18256 + C18257 + C18258) * C93585 +
            (C18259 + C18260 + C18261) * C20049) *
               C93718 +
           ((C14871 + C14870 + C14869) * C93585 +
            (C14868 + C14867 + C14866) * C20049) *
               C93829) *
              C93639 * C93625 * C98 +
          (((C14877 + C14876 + C14875) * C20049 +
            (C14874 + C14873 + C14872) * C93585) *
               C93829 +
           ((C14838 * C1386 + C14739 * C1468 + C14839 * C3411 + C14740 * C3493 +
             C14840 * C8522 + C14741 * C8647) *
                C20049 +
            (C14838 * C1394 + C14739 * C1476 + C14839 * C3415 + C14740 * C3497 +
             C14840 * C8525 + C14741 * C8650) *
                C93585) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C20049 +
            (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
             C14840 * C816 + C14741 * C898) *
                C93585) *
               C93829 +
           ((C14838 * C1388 + C14739 * C1470 + C14839 * C3409 + C14740 * C3491 +
             C14840 * C8520 + C14741 * C8645) *
                C20049 +
            (C14838 * C1396 + C14739 * C1478 + C14839 * C3413 + C14740 * C3495 +
             C14840 * C8523 + C14741 * C8648) *
                C93585) *
               C93718) *
              C93639 * C800 -
          (((C14840 * C19097 + C14741 * C19223 + C14839 * C8523 +
             C14740 * C8648 + C14838 * C3413 + C14739 * C3495) *
                C93585 +
            (C14840 * C19095 + C14741 * C19221 + C14839 * C8520 +
             C14740 * C8645 + C14838 * C3409 + C14739 * C3491) *
                C20049) *
               C93718 +
           ((C14840 * C4900 + C14741 * C5019 + C14839 * C816 + C14740 * C898 +
             C14838 * C815 + C14739 * C897) *
                C93585 +
            (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
             C14838 * C807 + C14739 * C889) *
                C20049) *
               C93829) *
              C93639 * C801 +
          (((C14838 * C808 + C14739 * C890 + C14839 * C4897 + C14740 * C5016 +
             C14840 * C15550 + C14741 * C15666) *
                C20049 +
            (C14838 * C816 + C14739 * C898 + C14839 * C4900 + C14740 * C5019 +
             C14840 * C15552 + C14741 * C15668) *
                C93585) *
               C93829 +
           ((C14838 * C8520 + C14739 * C8645 + C14839 * C19095 +
             C14740 * C19221 + C14840 * C22854 + C14741 * C22942) *
                C20049 +
            (C14838 * C8523 + C14739 * C8648 + C14839 * C19097 +
             C14740 * C19223 + C14840 * C22855 + C14741 * C22943) *
                C93585) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C20049 +
            (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
             C14840 * C816 + C14741 * C898) *
                C93585) *
               C93829 +
           ((C25133 + C25134 + C25135) * C20049 +
            (C25136 + C25137 + C25138) * C93585) *
               C93718) *
              C1382 -
          (((C25139 + C25140 + C25141) * C93585 +
            (C25142 + C25143 + C25144) * C20049) *
               C93718 +
           ((C25138 + C25137 + C25136) * C93585 +
            (C25135 + C25134 + C25133) * C20049) *
               C93829) *
              C1383 +
          (((C25144 + C25143 + C25142) * C20049 +
            (C25141 + C25140 + C25139) * C93585) *
               C93829 +
           ((C14838 * C10964 + C14739 * C11080 + C14839 * C25001 +
             C14740 * C25104 + C14840 * C25002 + C14741 * C25105) *
                C20049 +
            (C14838 * C10967 + C14739 * C11083 + C14839 * C25003 +
             C14740 * C25106 + C14840 * C25004 + C14741 * C25107) *
                C93585) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eexz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C4081 +
           (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
               C4075 +
           (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
           C9684 * C4077) *
              C93680 * C93639 * C800 -
          ((C9645 * C3415 + C93718 * C3571 + C9644 * C813 + C93829 * C961) *
               C4077 +
           (C9645 * C3411 + C93718 * C3567 + C9644 * C805 + C93829 * C953) *
               C4085 +
           (C9645 * C3414 + C93718 * C3570 + C9644 * C814 + C93829 * C962) *
               C4076 +
           (C9645 * C3410 + C93718 * C3566 + C9644 * C806 + C93829 * C954) *
               C4083 +
           (C9645 * C3413 + C93718 * C3569 + C9644 * C815 + C93829 * C963) *
               C4075 +
           (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
               C4081) *
              C93680 * C93639 * C801 +
          ((C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
               C4081 +
           (C9644 * C816 + C93829 * C964 + C9645 * C8523 + C93718 * C8752) *
               C4075 +
           (C9644 * C809 + C93829 * C957 + C9645 * C8521 + C93718 * C8750) *
               C4083 +
           (C9644 * C817 + C93829 * C965 + C9645 * C8524 + C93718 * C8753) *
               C4076 +
           (C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
               C4085 +
           (C9644 * C818 + C93829 * C966 + C9645 * C8525 + C93718 * C8754) *
               C4077) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C4081 +
           (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
               C4075 +
           (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
           C9684 * C4077) *
              C93680 * C93639 * C93625 * C97 -
          ((C9679 + C9680) * C4077 + (C9681 + C9682) * C4085 +
           (C9678 + C9677) * C4076 + (C9676 + C9675) * C4083 +
           (C9674 + C9673) * C4075 + (C9672 + C9671) * C4081) *
              C93680 * C93639 * C93625 * C98 +
          (C9683 * C4081 + C9684 * C4075 + (C9682 + C9681) * C4083 +
           (C9680 + C9679) * C4076 +
           (C9644 * C112 + C93829 * C280 + C9645 * C2697 + C93718 * C2856) *
               C4085 +
           (C9644 * C118 + C93829 * C286 + C9645 * C2698 + C93718 * C2857) *
               C4077) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C4081 +
           (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
               C4075 +
           (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
           C9684 * C4077) *
              C93680 * C1382 -
          ((C9645 * C1399 + C93718 * C1547 + C9644 * C1394 + C93829 * C1542) *
               C4077 +
           (C9645 * C1391 + C93718 * C1539 + C9644 * C1386 + C93829 * C1534) *
               C4085 +
           (C9645 * C1398 + C93718 * C1546 + C9644 * C1395 + C93829 * C1543) *
               C4076 +
           (C9645 * C1390 + C93718 * C1538 + C9644 * C1387 + C93829 * C1535) *
               C4083 +
           (C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
               C4075 +
           (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
               C4081) *
              C93680 * C1383 +
          ((C9644 * C1389 + C93829 * C1537 + C9645 * C10964 + C93718 * C11196) *
               C4081 +
           (C9644 * C1397 + C93829 * C1545 + C9645 * C10967 + C93718 * C11199) *
               C4075 +
           (C9644 * C1390 + C93829 * C1538 + C9645 * C10965 + C93718 * C11197) *
               C4083 +
           (C9644 * C1398 + C93829 * C1546 + C9645 * C10968 + C93718 * C11200) *
               C4076 +
           (C9644 * C1391 + C93829 * C1539 + C9645 * C10966 + C93718 * C11198) *
               C4085 +
           (C9644 * C1399 + C93829 * C1547 + C9645 * C10969 + C93718 * C11201) *
               C4077) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C20049 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C93585) *
               C14739 +
           ((C9644 * C807 + C93829 * C955 + C9645 * C3409 + C93718 * C3565) *
                C20049 +
            (C9644 * C815 + C93829 * C963 + C9645 * C3413 + C93718 * C3569) *
                C93585) *
               C14740 +
           ((C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
                C20049 +
            (C9644 * C816 + C93829 * C964 + C9645 * C8523 + C93718 * C8752) *
                C93585) *
               C14741) *
              C93639 * C93625 * C97 -
          (((C9645 * C8524 + C93718 * C8753 + C9644 * C817 + C93829 * C965) *
                C93585 +
            (C9645 * C8521 + C93718 * C8750 + C9644 * C809 + C93829 * C957) *
                C20049) *
               C14741 +
           ((C12098 + C12099) * C93585 + (C12100 + C12101) * C20049) * C14740 +
           ((C9674 + C9673) * C93585 + (C9672 + C9671) * C20049) * C14739) *
              C93639 * C93625 * C98 +
          ((C9683 * C20049 + C9684 * C93585) * C14739 +
           ((C12097 + C12096) * C20049 + (C12095 + C12094) * C93585) * C14740 +
           ((C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
                C20049 +
            (C9644 * C818 + C93829 * C966 + C9645 * C8525 + C93718 * C8754) *
                C93585) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C20049 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C93585) *
               C14739 +
           ((C24395 + C24396) * C20049 + (C24397 + C24398) * C93585) * C14740 +
           C24411 * C14741) *
              C93639 * C800 -
          (((C24403 + C24404) * C93585 + (C24405 + C24406) * C20049) * C14741 +
           ((C24402 + C24401) * C93585 + (C24400 + C24399) * C20049) * C14740 +
           ((C24398 + C24397) * C93585 + (C24396 + C24395) * C20049) * C14739) *
              C93639 * C801 +
          (C24411 * C14739 +
           ((C24406 + C24405) * C20049 + (C24404 + C24403) * C93585) * C14740 +
           ((C9644 * C15550 + C93829 * C15744 + C9645 * C22854 +
             C93718 * C23010) *
                C20049 +
            (C9644 * C15552 + C93829 * C15746 + C9645 * C22855 +
             C93718 * C23011) *
                C93585) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C20049 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C93585) *
               C14739 +
           ((C24395 + C24396) * C20049 + (C24397 + C24398) * C93585) * C14740 +
           C24411 * C14741) *
              C1382 -
          (((C9645 * C16397 + C93718 * C16567 + C9644 * C8523 +
             C93829 * C8752) *
                C93585 +
            (C9645 * C16395 + C93718 * C16565 + C9644 * C8520 +
             C93829 * C8749) *
                C20049) *
               C14741 +
           ((C9645 * C5778 + C93718 * C5953 + C9644 * C3413 + C93829 * C3569) *
                C93585 +
            (C9645 * C5775 + C93718 * C5950 + C9644 * C3409 + C93829 * C3565) *
                C20049) *
               C14740 +
           ((C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                C93585 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C20049) *
               C14739) *
              C1383 +
          (((C9644 * C1389 + C93829 * C1537 + C9645 * C10964 +
             C93718 * C11196) *
                C20049 +
            (C9644 * C1397 + C93829 * C1545 + C9645 * C10967 +
             C93718 * C11199) *
                C93585) *
               C14739 +
           ((C9644 * C5775 + C93829 * C5950 + C9645 * C25001 +
             C93718 * C25218) *
                C20049 +
            (C9644 * C5778 + C93829 * C5953 + C9645 * C25003 +
             C93718 * C25220) *
                C93585) *
               C14740 +
           ((C9644 * C16395 + C93829 * C16565 + C9645 * C25002 +
             C93718 * C25219) *
                C20049 +
            (C9644 * C16397 + C93829 * C16567 + C9645 * C25004 +
             C93718 * C25221) *
                C93585) *
               C14741) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C188 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93680) *
               C93829 +
           ((C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
             C4085 * C1386 + C4077 * C1394) *
                C188 +
            (C4081 * C1470 + C4075 * C1602 + C4083 * C1469 + C4076 * C1601 +
             C4085 * C1468 + C4077 * C1600) *
                C93680) *
               C93718) *
              C93639 * C800 -
          (((C8881 + C8882 + C8883) * C93680 + (C8884 + C8885 + C8886) * C188) *
               C93718 +
           ((C5245 + C5244 + C5243) * C93680 + (C5242 + C5241 + C5240) * C188) *
               C93829) *
              C93639 * C801 +
          (((C5251 + C5250 + C5249) * C188 + (C5248 + C5247 + C5246) * C93680) *
               C93829 +
           ((C4081 * C8520 + C4075 * C8523 + C4083 * C8521 + C4076 * C8524 +
             C4085 * C8522 + C4077 * C8525) *
                C188 +
            (C4081 * C8645 + C4075 * C8865 + C4083 * C8646 + C4076 * C8866 +
             C4085 * C8647 + C4077 * C8867) *
                C93680) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C188 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93680) *
               C93829 +
           ((C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
             C4085 * C1386 + C4077 * C1394) *
                C188 +
            (C4081 * C1470 + C4075 * C1602 + C4083 * C1469 + C4076 * C1601 +
             C4085 * C1468 + C4077 * C1600) *
                C93680) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C4085 * C1467 + C4077 * C1599 + C4083 * C1468 + C4076 * C1600 +
             C4081 * C1469 + C4075 * C1601) *
                C93680 +
            (C4085 * C1385 + C4077 * C1393 + C4083 * C1386 + C4076 * C1394 +
             C4081 * C1387 + C4075 * C1395) *
                C188) *
               C93718 +
           ((C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
             C4081 * C190 + C4075 * C363) *
                C93680 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C188) *
               C93829) *
              C93639 * C93625 * C98 +
          (((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
             C4085 * C112 + C4077 * C118) *
                C188 +
            (C4081 * C191 + C4075 * C364 + C4083 * C192 + C4076 * C365 +
             C4085 * C193 + C4077 * C366) *
                C93680) *
               C93829 +
           ((C4081 * C1386 + C4075 * C1394 + C4083 * C1385 + C4076 * C1393 +
             C4085 * C2697 + C4077 * C2698) *
                C188 +
            (C4081 * C1468 + C4075 * C1600 + C4083 * C1467 + C4076 * C1599 +
             C4085 * C2770 + C4077 * C2942) *
                C93680) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C188 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93680) *
               C93829 +
           ((C11304 + C11305 + C11306) * C188 +
            (C11307 + C11308 + C11309) * C93680) *
               C93718) *
              C1382 -
          (((C11310 + C11311 + C11312) * C93680 +
            (C11313 + C11314 + C11315) * C188) *
               C93718 +
           ((C11309 + C11308 + C11307) * C93680 +
            (C11306 + C11305 + C11304) * C188) *
               C93829) *
              C1383 +
          (((C11315 + C11314 + C11313) * C188 +
            (C11312 + C11311 + C11310) * C93680) *
               C93829 +
           ((C4081 * C10964 + C4075 * C10967 + C4083 * C10965 + C4076 * C10968 +
             C4085 * C10966 + C4077 * C10969) *
                C188 +
            (C4081 * C11080 + C4075 * C11276 + C4083 * C11081 + C4076 * C11277 +
             C4085 * C11082 + C4077 * C11278) *
                C93680) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C14838 +
            (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
            C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
               C93829 +
           ((C20049 * C1388 + C93585 * C1396) * C14838 +
            (C20049 * C1470 + C93585 * C1602) * C14739 + C23109 * C14839 +
            C23108 * C14740 + C23107 * C14840 + C23106 * C14741) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C20049 * C8646 + C93585 * C8866) * C14741 +
            (C20049 * C8521 + C93585 * C8524) * C14840 +
            (C20049 * C3492 + C93585 * C3640) * C14740 +
            (C20049 * C3410 + C93585 * C3414) * C14839 +
            (C20049 * C1469 + C93585 * C1601) * C14739 +
            (C20049 * C1387 + C93585 * C1395) * C14838) *
               C93718 +
           (C21835 * C14741 + C21834 * C14840 + C21833 * C14740 +
            C21832 * C14839 + (C20049 * C190 + C93585 * C363) * C14739 +
            (C20049 * C109 + C93585 * C115) * C14838) *
               C93829) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C14838 +
            (C20049 * C191 + C93585 * C364) * C14739 +
            (C20049 * C805 + C93585 * C813) * C14839 +
            (C20049 * C887 + C93585 * C1019) * C14740 +
            (C20049 * C810 + C93585 * C818) * C14840 +
            (C20049 * C892 + C93585 * C1024) * C14741) *
               C93829 +
           ((C20049 * C1386 + C93585 * C1394) * C14838 +
            (C20049 * C1468 + C93585 * C1600) * C14739 +
            (C20049 * C3411 + C93585 * C3415) * C14839 +
            (C20049 * C3493 + C93585 * C3641) * C14740 +
            (C20049 * C8522 + C93585 * C8525) * C14840 +
            (C20049 * C8647 + C93585 * C8867) * C14741) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C14838 +
            (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
            C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
               C93829 +
           ((C20049 * C1388 + C93585 * C1396) * C14838 +
            (C20049 * C1470 + C93585 * C1602) * C14739 + C23109 * C14839 +
            C23108 * C14740 + C23107 * C14840 + C23106 * C14741) *
               C93718) *
              C93639 * C800 -
          ((C23104 * C14741 + C23105 * C14840 + C23106 * C14740 +
            C23107 * C14839 + C23108 * C14739 + C23109 * C14838) *
               C93718 +
           (C20754 * C14741 + C20753 * C14840 + C20752 * C14740 +
            C20751 * C14839 + C20750 * C14739 + C20749 * C14838) *
               C93829) *
              C93639 * C801 +
          ((C20751 * C14838 + C20752 * C14739 + C20753 * C14839 +
            C20754 * C14740 + C20756 * C14840 + C20755 * C14741) *
               C93829 +
           (C23107 * C14838 + C23106 * C14739 + C23105 * C14839 +
            C23104 * C14740 + (C20049 * C22854 + C93585 * C22855) * C14840 +
            (C20049 * C22942 + C93585 * C23090) * C14741) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C14838 +
            (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
            C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
               C93829 +
           (C25327 + C25328 + C25303 + C25304 + C25305 + C25306) * C93718) *
              C1382 -
          ((C25329 + C25330 + C25331 + C25332 + C25333 + C25334) * C93718 +
           (C25306 + C25305 + C25304 + C25303 + C25328 + C25327) * C93829) *
              C1383 +
          ((C25334 + C25333 + C25332 + C25331 + C25330 + C25329) * C93829 +
           ((C20049 * C10964 + C93585 * C10967) * C14838 +
            (C20049 * C11080 + C93585 * C11276) * C14739 +
            (C20049 * C25001 + C93585 * C25003) * C14839 +
            (C20049 * C25104 + C93585 * C25296) * C14740 +
            (C20049 * C25002 + C93585 * C25004) * C14840 +
            (C20049 * C25105 + C93585 * C25297) * C14741) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 + C448 * C4076 +
            C449 * C4077) *
               C93829 +
           ((C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C4075 +
            C3026 * C4076 + C3025 * C4077) *
               C93718) *
              C93639 * C800 -
          (((C418 * C3411 + C3716 + C3716 + C93680 * C3711) * C4077 +
            (C418 * C3410 + C3715 + C3715 + C93680 * C3710) * C4076 +
            (C418 * C3409 + C3714 + C3714 + C93680 * C3709) * C4075) *
               C93718 +
           (C2311 * C4077 + C2312 * C4076 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C4075) *
               C93829) *
              C93639 * C801 +
          (((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C4075 +
            (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C4076 +
            (C418 * C810 + C1091 + C1091 + C93680 * C1082) * C4077) *
               C93829 +
           ((C418 * C8520 + C10580 + C10580 + C93680 * C8984) * C4075 +
            (C418 * C8521 + C10581 + C10581 + C93680 * C8985) * C4076 +
            (C418 * C8522 + C10582 + C10582 + C93680 * C8986) * C4077) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 + C448 * C4076 +
            C449 * C4077) *
               C93829 +
           ((C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C4075 +
            C3026 * C4076 + C3025 * C4077) *
               C93718) *
              C93639 * C93625 * C97 -
          ((C3024 * C4077 + C3025 * C4076 + C3026 * C4075) * C93718 +
           (C450 * C4077 + C449 * C4076 + C448 * C4075) * C93829) *
              C93639 * C93625 * C98 +
          ((C449 * C4075 + C450 * C4076 + C451 * C4077) * C93829 +
           (C3025 * C4075 + C3024 * C4076 +
            (C418 * C2697 + C3017 + C3017 + C93680 * C3009) * C4077) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 + C448 * C4076 +
            C449 * C4077) *
               C93829 +
           (C11418 + C11395 + C11396) * C93718) *
              C1382 -
          ((C11419 + C11420 + C11421) * C93718 +
           (C11396 + C11395 + C11418) * C93829) *
              C1383 +
          ((C11421 + C11420 + C11419) * C93829 +
           ((C418 * C10964 + C11403 + C11403 + C93680 * C11389) * C4075 +
            (C418 * C10965 + C11404 + C11404 + C93680 * C11390) * C4076 +
            (C418 * C10966 + C11405 + C11405 + C93680 * C11391) * C4077) *
               C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93585 * C93829 +
           (C15099 * C1388 + C16727 + C16727 + C14739 * C1660 + C15100 * C3409 +
            C16726 + C16726 + C14740 * C3709 + C15101 * C8520 + C16725 +
            C16725 + C14741 * C8984) *
               C93585 * C93718) *
              C93639 * C93625 * C97 -
          ((C18577 + C18578 + C18579) * C93585 * C93718 +
           (C15141 + C15140 + C15139) * C93585 * C93829) *
              C93639 * C93625 * C98 +
          ((C15144 + C15143 + C15142) * C93585 * C93829 +
           (C15099 * C1386 + C18568 + C18568 + C14739 * C1658 + C15100 * C3411 +
            C18569 + C18569 + C14740 * C3711 + C15101 * C8522 + C18570 +
            C18570 + C14741 * C8986) *
               C93585 * C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93585 * C93829 +
           (C15099 * C1388 + C16727 + C16727 + C14739 * C1660 + C15100 * C3409 +
            C16726 + C16726 + C14740 * C3709 + C15101 * C8520 + C16725 +
            C16725 + C14741 * C8984) *
               C93585 * C93718) *
              C93639 * C800 -
          ((C15101 * C19095 + C19568 + C19568 + C14741 * C19563 +
            C15100 * C8520 + C19567 + C19567 + C14740 * C8984 + C15099 * C3409 +
            C19566 + C19566 + C14739 * C3709) *
               C93585 * C93718 +
           (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 + C15100 * C808 +
            C15970 + C15970 + C14740 * C1080 + C15099 * C807 + C15971 + C15971 +
            C14739 * C1079) *
               C93585 * C93829) *
              C93639 * C801 +
          ((C15099 * C808 + C15972 + C15972 + C14739 * C1080 + C15100 * C4897 +
            C15973 + C15973 + C14740 * C5325 + C15101 * C15550 + C15974 +
            C15974 + C14741 * C15963) *
               C93585 * C93829 +
           (C15099 * C8520 + C24560 + C24560 + C14739 * C8984 +
            C15100 * C19095 + C24561 + C24561 + C14740 * C19563 +
            C15101 * C22854 + C24562 + C24562 + C14741 * C23175) *
               C93585 * C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93585 * C93829 +
           (C25438 + C25439 + C25440) * C93585 * C93718) *
              C1382 -
          ((C25441 + C25442 + C25443) * C93585 * C93718 +
           (C25440 + C25439 + C25438) * C93585 * C93829) *
              C1383 +
          ((C25443 + C25442 + C25441) * C93585 * C93829 +
           (C15099 * C10964 + C25423 + C25423 + C14739 * C11389 +
            C15100 * C25001 + C25424 + C25424 + C14740 * C25408 +
            C15101 * C25002 + C25425 + C25425 + C14741 * C25409) *
               C93585 * C93718) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C188 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C93680) *
               C4075 +
           ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
           C9928 * C4077) *
              C93639 * C800 -
          (((C9645 * C3493 + C93718 * C3785 + C9644 * C887 + C93829 * C1143) *
                C93680 +
            (C9645 * C3411 + C93718 * C3567 + C9644 * C805 + C93829 * C953) *
                C188) *
               C4077 +
           ((C9645 * C3492 + C93718 * C3784 + C9644 * C888 + C93829 * C1144) *
                C93680 +
            (C9645 * C3410 + C93718 * C3566 + C9644 * C806 + C93829 * C954) *
                C188) *
               C4076 +
           ((C9645 * C3491 + C93718 * C3783 + C9644 * C889 + C93829 * C1145) *
                C93680 +
            (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
                C188) *
               C4075) *
              C93639 * C801 +
          (((C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
                C188 +
            (C9644 * C890 + C93829 * C1146 + C9645 * C8645 + C93718 * C9091) *
                C93680) *
               C4075 +
           ((C9644 * C809 + C93829 * C957 + C9645 * C8521 + C93718 * C8750) *
                C188 +
            (C9644 * C891 + C93829 * C1147 + C9645 * C8646 + C93718 * C9092) *
                C93680) *
               C4076 +
           ((C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
                C188 +
            (C9644 * C892 + C93829 * C1148 + C9645 * C8647 + C93718 * C9093) *
                C93680) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C188 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C93680) *
               C4075 +
           ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
           C9928 * C4077) *
              C93639 * C93625 * C97 -
          (((C9924 + C9925) * C93680 + (C9681 + C9682) * C188) * C4077 +
           ((C9923 + C9922) * C93680 + (C9676 + C9675) * C188) * C4076 +
           ((C9921 + C9920) * C93680 + (C9672 + C9671) * C188) * C4075) *
              C93639 * C93625 * C98 +
          (C9928 * C4075 +
           ((C9682 + C9681) * C188 + (C9925 + C9924) * C93680) * C4076 +
           ((C9644 * C112 + C93829 * C280 + C9645 * C2697 + C93718 * C2856) *
                C188 +
            (C9644 * C193 + C93829 * C505 + C9645 * C2770 + C93718 * C3092) *
                C93680) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C188 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C93680) *
               C4075 +
           ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
           C9928 * C4077) *
              C1382 -
          (((C9645 * C1473 + C93718 * C1729 + C9644 * C1468 + C93829 * C1724) *
                C93680 +
            (C9645 * C1391 + C93718 * C1539 + C9644 * C1386 + C93829 * C1534) *
                C188) *
               C4077 +
           ((C9645 * C1472 + C93718 * C1728 + C9644 * C1469 + C93829 * C1725) *
                C93680 +
            (C9645 * C1390 + C93718 * C1538 + C9644 * C1387 + C93829 * C1535) *
                C188) *
               C4076 +
           ((C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                C93680 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C188) *
               C4075) *
              C1383 +
          (((C9644 * C1389 + C93829 * C1537 + C9645 * C10964 +
             C93718 * C11196) *
                C188 +
            (C9644 * C1471 + C93829 * C1727 + C9645 * C11080 +
             C93718 * C11495) *
                C93680) *
               C4075 +
           ((C9644 * C1390 + C93829 * C1538 + C9645 * C10965 +
             C93718 * C11197) *
                C188 +
            (C9644 * C1472 + C93829 * C1728 + C9645 * C11081 +
             C93718 * C11496) *
                C93680) *
               C4076 +
           ((C9644 * C1391 + C93829 * C1539 + C9645 * C10966 +
             C93718 * C11198) *
                C188 +
            (C9644 * C1473 + C93829 * C1729 + C9645 * C11082 +
             C93718 * C11497) *
                C93680) *
               C4077) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C14838 +
           (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
               C14739 +
           (C9644 * C807 + C93829 * C955 + C9645 * C3409 + C93718 * C3565) *
               C14839 +
           (C9644 * C889 + C93829 * C1145 + C9645 * C3491 + C93718 * C3783) *
               C14740 +
           (C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
               C14840 +
           (C9644 * C890 + C93829 * C1146 + C9645 * C8645 + C93718 * C9091) *
               C14741) *
              C93585 * C93639 * C93625 * C97 -
          ((C9645 * C8646 + C93718 * C9092 + C9644 * C891 + C93829 * C1147) *
               C14741 +
           (C9645 * C8521 + C93718 * C8750 + C9644 * C809 + C93829 * C957) *
               C14840 +
           (C12416 + C12417) * C14740 + (C12100 + C12101) * C14839 +
           (C9921 + C9920) * C14739 + (C9672 + C9671) * C14838) *
              C93585 * C93639 * C93625 * C98 +
          (C9683 * C14838 + C9926 * C14739 + (C12097 + C12096) * C14839 +
           (C12415 + C12414) * C14740 +
           (C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
               C14840 +
           (C9644 * C892 + C93829 * C1148 + C9645 * C8647 + C93718 * C9093) *
               C14741) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C14838 +
           (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
               C14739 +
           (C24395 + C24396) * C14839 + (C24649 + C24650) * C14740 +
           C24407 * C14840 + C24655 * C14741) *
              C93585 * C93639 * C800 -
          ((C24653 + C24654) * C14741 + (C24405 + C24406) * C14840 +
           (C24652 + C24651) * C14740 + (C24400 + C24399) * C14839 +
           (C24650 + C24649) * C14739 + (C24396 + C24395) * C14838) *
              C93585 * C93639 * C801 +
          (C24407 * C14838 + C24655 * C14739 + (C24406 + C24405) * C14839 +
           (C24654 + C24653) * C14740 +
           (C9644 * C15550 + C93829 * C15744 + C9645 * C22854 +
            C93718 * C23010) *
               C14840 +
           (C9644 * C15666 + C93829 * C16051 + C9645 * C22942 +
            C93718 * C23246) *
               C14741) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C14838 +
           (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
               C14739 +
           (C24395 + C24396) * C14839 + (C24649 + C24650) * C14740 +
           C24407 * C14840 + C24655 * C14741) *
              C93585 * C1382 -
          ((C9645 * C16487 + C93718 * C16807 + C9644 * C8645 + C93829 * C9091) *
               C14741 +
           (C9645 * C16395 + C93718 * C16565 + C9644 * C8520 + C93829 * C8749) *
               C14840 +
           (C9645 * C5870 + C93718 * C6196 + C9644 * C3491 + C93829 * C3783) *
               C14740 +
           (C9645 * C5775 + C93718 * C5950 + C9644 * C3409 + C93829 * C3565) *
               C14839 +
           (C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
               C14739 +
           (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
               C14838) *
              C93585 * C1383 +
          ((C9644 * C1389 + C93829 * C1537 + C9645 * C10964 + C93718 * C11196) *
               C14838 +
           (C9644 * C1471 + C93829 * C1727 + C9645 * C11080 + C93718 * C11495) *
               C14739 +
           (C9644 * C5775 + C93829 * C5950 + C9645 * C25001 + C93718 * C25218) *
               C14839 +
           (C9644 * C5870 + C93829 * C6196 + C9645 * C25104 + C93718 * C25517) *
               C14740 +
           (C9644 * C16395 + C93829 * C16565 + C9645 * C25002 +
            C93718 * C25219) *
               C14840 +
           (C9644 * C16487 + C93829 * C16807 + C9645 * C25105 +
            C93718 * C25518) *
               C14741) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C9644 +
           (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
            C4085 * C278 + C4077 * C581) *
               C93829 +
           (C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
            C4085 * C1386 + C4077 * C1394) *
               C9645 +
           (C4081 * C1536 + C4075 * C1784 + C4083 * C1535 + C4076 * C1783 +
            C4085 * C1534 + C4077 * C1782) *
               C93718) *
              C93680 * C93639 * C800 -
          ((C9205 + C9206 + C9207) * C93718 + (C8884 + C8885 + C8886) * C9645 +
           (C5521 + C5520 + C5519) * C93829 + (C5242 + C5241 + C5240) * C9644) *
              C93680 * C93639 * C801 +
          ((C5251 + C5250 + C5249) * C9644 + (C5524 + C5523 + C5522) * C93829 +
           (C4081 * C8520 + C4075 * C8523 + C4083 * C8521 + C4076 * C8524 +
            C4085 * C8522 + C4077 * C8525) *
               C9645 +
           (C4081 * C8749 + C4075 * C9195 + C4083 * C8750 + C4076 * C9196 +
            C4085 * C8751 + C4077 * C9197) *
               C93718) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C9644 +
           (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
            C4085 * C278 + C4077 * C581) *
               C93829 +
           (C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
            C4085 * C1386 + C4077 * C1394) *
               C9645 +
           (C4081 * C1536 + C4075 * C1784 + C4083 * C1535 + C4076 * C1783 +
            C4085 * C1534 + C4077 * C1782) *
               C93718) *
              C93680 * C93639 * C93625 * C97 -
          ((C4085 * C1533 + C4077 * C1781 + C4083 * C1534 + C4076 * C1782 +
            C4081 * C1535 + C4075 * C1783) *
               C93718 +
           (C4085 * C1385 + C4077 * C1393 + C4083 * C1386 + C4076 * C1394 +
            C4081 * C1387 + C4075 * C1395) *
               C9645 +
           (C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
            C4081 * C277 + C4075 * C580) *
               C93829 +
           (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
            C4081 * C109 + C4075 * C115) *
               C9644) *
              C93680 * C93639 * C93625 * C98 +
          ((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
            C4085 * C112 + C4077 * C118) *
               C9644 +
           (C4081 * C278 + C4075 * C581 + C4083 * C279 + C4076 * C582 +
            C4085 * C280 + C4077 * C583) *
               C93829 +
           (C4081 * C1386 + C4075 * C1394 + C4083 * C1385 + C4076 * C1393 +
            C4085 * C2697 + C4077 * C2698) *
               C9645 +
           (C4081 * C1534 + C4075 * C1782 + C4083 * C1533 + C4076 * C1781 +
            C4085 * C2856 + C4077 * C3174) *
               C93718) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C9644 +
           (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
            C4085 * C278 + C4077 * C581) *
               C93829 +
           (C11304 + C11305 + C11306) * C9645 +
           (C11588 + C11589 + C11590) * C93718) *
              C93680 * C1382 -
          ((C11591 + C11592 + C11593) * C93718 +
           (C11313 + C11314 + C11315) * C9645 +
           (C11590 + C11589 + C11588) * C93829 +
           (C11306 + C11305 + C11304) * C9644) *
              C93680 * C1383 +
          ((C11315 + C11314 + C11313) * C9644 +
           (C11593 + C11592 + C11591) * C93829 +
           (C4081 * C10964 + C4075 * C10967 + C4083 * C10965 + C4076 * C10968 +
            C4085 * C10966 + C4077 * C10969) *
               C9645 +
           (C4081 * C11196 + C4075 * C11572 + C4083 * C11197 + C4076 * C11573 +
            C4085 * C11198 + C4077 * C11574) *
               C93718) *
              C93680 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C9644 +
            (C20049 * C276 + C93585 * C579) * C93829 +
            (C20049 * C1388 + C93585 * C1396) * C9645 +
            (C20049 * C1536 + C93585 * C1784) * C93718) *
               C14739 +
           (C20749 * C9644 + C20933 * C93829 + C23109 * C9645 +
            C23329 * C93718) *
               C14740 +
           (C20751 * C9644 + C20934 * C93829 + C23107 * C9645 +
            C23328 * C93718) *
               C14741) *
              C93639 * C93625 * C97 -
          (((C20049 * C8750 + C93585 * C9196) * C93718 +
            (C20049 * C8521 + C93585 * C8524) * C9645 + C22050 * C93829 +
            C21834 * C9644) *
               C14741 +
           ((C20049 * C3566 + C93585 * C3854) * C93718 +
            (C20049 * C3410 + C93585 * C3414) * C9645 + C22049 * C93829 +
            C21832 * C9644) *
               C14740 +
           ((C20049 * C1535 + C93585 * C1783) * C93718 +
            (C20049 * C1387 + C93585 * C1395) * C9645 +
            (C20049 * C277 + C93585 * C580) * C93829 +
            (C20049 * C109 + C93585 * C115) * C9644) *
               C14739) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C9644 +
            (C20049 * C278 + C93585 * C581) * C93829 +
            (C20049 * C1386 + C93585 * C1394) * C9645 +
            (C20049 * C1534 + C93585 * C1782) * C93718) *
               C14739 +
           ((C20049 * C805 + C93585 * C813) * C9644 +
            (C20049 * C953 + C93585 * C1201) * C93829 +
            (C20049 * C3411 + C93585 * C3415) * C9645 +
            (C20049 * C3567 + C93585 * C3855) * C93718) *
               C14740 +
           ((C20049 * C810 + C93585 * C818) * C9644 +
            (C20049 * C958 + C93585 * C1206) * C93829 +
            (C20049 * C8522 + C93585 * C8525) * C9645 +
            (C20049 * C8751 + C93585 * C9197) * C93718) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C9644 +
            (C20049 * C276 + C93585 * C579) * C93829 +
            (C20049 * C1388 + C93585 * C1396) * C9645 +
            (C20049 * C1536 + C93585 * C1784) * C93718) *
               C14739 +
           (C24730 + C24731 + C24732 + C24733) * C14740 + C24744 * C14741) *
              C93639 * C800 -
          ((C24738 + C24739 + C24740 + C24741) * C14741 +
           (C24737 + C24736 + C24735 + C24734) * C14740 +
           (C24733 + C24732 + C24731 + C24730) * C14739) *
              C93639 * C801 +
          (C24744 * C14739 + (C24741 + C24740 + C24739 + C24738) * C14740 +
           (C20756 * C9644 + C20936 * C93829 +
            (C20049 * C22854 + C93585 * C22855) * C9645 +
            (C20049 * C23010 + C93585 * C23316) * C93718) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C9644 +
            (C20049 * C276 + C93585 * C579) * C93829 + C25319 * C9645 +
            C25604 * C93718) *
               C14739 +
           (C24730 + C24731 + C24732 + C24733) * C14740 + C24744 * C14741) *
              C1382 -
          ((C25605 * C93718 + C25322 * C9645 + C23328 * C93829 +
            C23107 * C9644) *
               C14741 +
           (C25606 * C93718 + C25324 * C9645 + C23329 * C93829 +
            C23109 * C9644) *
               C14740 +
           (C25607 * C93718 + C25326 * C9645 + C25604 * C93829 +
            C25319 * C9644) *
               C14739) *
              C1383 +
          ((C25326 * C9644 + C25607 * C93829 +
            (C20049 * C10964 + C93585 * C10967) * C9645 +
            (C20049 * C11196 + C93585 * C11572) * C93718) *
               C14739 +
           (C25324 * C9644 + C25606 * C93829 +
            (C20049 * C25001 + C93585 * C25003) * C9645 +
            (C20049 * C25218 + C93585 * C25593) * C93718) *
               C14740 +
           (C25322 * C9644 + C25605 * C93829 +
            (C20049 * C25002 + C93585 * C25004) * C9645 +
            (C20049 * C25219 + C93585 * C25594) * C93718) *
               C14741) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C9644 +
            (C188 * C276 + C93680 * C635) * C93829 +
            (C188 * C1388 + C93680 * C1470) * C9645 +
            (C188 * C1536 + C93680 * C1842) * C93718) *
               C4075 +
           (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
              C93639 * C800 -
          (((C188 * C3567 + C93680 * C3925) * C93718 +
            (C188 * C3411 + C93680 * C3493) * C9645 + C2539 * C93829 +
            C2074 * C9644) *
               C4077 +
           ((C188 * C3566 + C93680 * C3924) * C93718 +
            (C188 * C3410 + C93680 * C3492) * C9645 + C2540 * C93829 +
            C2076 * C9644) *
               C4076 +
           ((C188 * C3565 + C93680 * C3923) * C93718 +
            (C188 * C3409 + C93680 * C3491) * C9645 +
            (C188 * C955 + C93680 * C1261) * C93829 +
            (C188 * C807 + C93680 * C889) * C9644) *
               C4075) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C9644 +
            (C188 * C956 + C93680 * C1262) * C93829 +
            (C188 * C8520 + C93680 * C8645) * C9645 +
            (C188 * C8749 + C93680 * C9305) * C93718) *
               C4075 +
           ((C188 * C809 + C93680 * C891) * C9644 +
            (C188 * C957 + C93680 * C1263) * C93829 +
            (C188 * C8521 + C93680 * C8646) * C9645 +
            (C188 * C8750 + C93680 * C9306) * C93718) *
               C4076 +
           ((C188 * C810 + C93680 * C892) * C9644 +
            (C188 * C958 + C93680 * C1264) * C93829 +
            (C188 * C8522 + C93680 * C8647) * C9645 +
            (C188 * C8751 + C93680 * C9307) * C93718) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C9644 +
            (C188 * C276 + C93680 * C635) * C93829 +
            (C188 * C1388 + C93680 * C1470) * C9645 +
            (C188 * C1536 + C93680 * C1842) * C93718) *
               C4075 +
           (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
              C93639 * C93625 * C97 -
          ((C10085 + C10086 + C10087 + C10088) * C4077 +
           (C10084 + C10083 + C10082 + C10081) * C4076 +
           (C10080 + C10079 + C10078 + C10077) * C4075) *
              C93639 * C93625 * C98 +
          (C10091 * C4075 + (C10088 + C10087 + C10086 + C10085) * C4076 +
           (C225 * C9644 + C657 * C93829 +
            (C188 * C2697 + C93680 * C2770) * C9645 +
            (C188 * C2856 + C93680 * C3241) * C93718) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C9644 +
            (C188 * C276 + C93680 * C635) * C93829 + C11107 * C9645 +
            C11679 * C93718) *
               C4075 +
           (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
              C1382 -
          ((C11680 * C93718 + C11110 * C9645 + C3253 * C93829 + C2788 * C9644) *
               C4077 +
           (C11681 * C93718 + C11112 * C9645 + C3254 * C93829 + C2790 * C9644) *
               C4076 +
           (C11682 * C93718 + C11114 * C9645 + C11679 * C93829 +
            C11107 * C9644) *
               C4075) *
              C1383 +
          ((C11114 * C9644 + C11682 * C93829 +
            (C188 * C10964 + C93680 * C11080) * C9645 +
            (C188 * C11196 + C93680 * C11667) * C93718) *
               C4075 +
           (C11112 * C9644 + C11681 * C93829 +
            (C188 * C10965 + C93680 * C11081) * C9645 +
            (C188 * C11197 + C93680 * C11668) * C93718) *
               C4076 +
           (C11110 * C9644 + C11680 * C93829 +
            (C188 * C10966 + C93680 * C11082) * C9645 +
            (C188 * C11198 + C93680 * C11669) * C93718) *
               C4077) *
              C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C9644 +
           (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
            C14840 * C956 + C14741 * C1262) *
               C93829 +
           (C14838 * C1388 + C14739 * C1470 + C14839 * C3409 + C14740 * C3491 +
            C14840 * C8520 + C14741 * C8645) *
               C9645 +
           (C14838 * C1536 + C14739 * C1842 + C14839 * C3565 + C14740 * C3923 +
            C14840 * C8749 + C14741 * C9305) *
               C93718) *
              C93585 * C93639 * C93625 * C97 -
          ((C18889 + C18890 + C18891) * C93718 +
           (C18259 + C18260 + C18261) * C9645 +
           (C15393 + C15392 + C15391) * C93829 +
           (C14868 + C14867 + C14866) * C9644) *
              C93585 * C93639 * C93625 * C98 +
          ((C14877 + C14876 + C14875) * C9644 +
           (C15396 + C15395 + C15394) * C93829 +
           (C14838 * C1386 + C14739 * C1468 + C14839 * C3411 + C14740 * C3493 +
            C14840 * C8522 + C14741 * C8647) *
               C9645 +
           (C14838 * C1534 + C14739 * C1840 + C14839 * C3567 + C14740 * C3925 +
            C14840 * C8751 + C14741 * C9307) *
               C93718) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C9644 +
           (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
            C14840 * C956 + C14741 * C1262) *
               C93829 +
           (C14838 * C1388 + C14739 * C1470 + C14839 * C3409 + C14740 * C3491 +
            C14840 * C8520 + C14741 * C8645) *
               C9645 +
           (C14838 * C1536 + C14739 * C1842 + C14839 * C3565 + C14740 * C3923 +
            C14840 * C8749 + C14741 * C9305) *
               C93718) *
              C93585 * C93639 * C800 -
          ((C14840 * C19323 + C14741 * C19884 + C14839 * C8749 +
            C14740 * C9305 + C14838 * C3565 + C14739 * C3923) *
               C93718 +
           (C14840 * C19095 + C14741 * C19221 + C14839 * C8520 +
            C14740 * C8645 + C14838 * C3409 + C14739 * C3491) *
               C9645 +
           (C14840 * C5096 + C14741 * C5598 + C14839 * C956 + C14740 * C1262 +
            C14838 * C955 + C14739 * C1261) *
               C93829 +
           (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
            C14838 * C807 + C14739 * C889) *
               C9644) *
              C93585 * C93639 * C801 +
          ((C14838 * C808 + C14739 * C890 + C14839 * C4897 + C14740 * C5016 +
            C14840 * C15550 + C14741 * C15666) *
               C9644 +
           (C14838 * C956 + C14739 * C1262 + C14839 * C5096 + C14740 * C5598 +
            C14840 * C15744 + C14741 * C16231) *
               C93829 +
           (C14838 * C8520 + C14739 * C8645 + C14839 * C19095 +
            C14740 * C19221 + C14840 * C22854 + C14741 * C22942) *
               C9645 +
           (C14838 * C8749 + C14739 * C9305 + C14839 * C19323 +
            C14740 * C19884 + C14840 * C23010 + C14741 * C23398) *
               C93718) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C9644 +
           (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
            C14840 * C956 + C14741 * C1262) *
               C93829 +
           (C25133 + C25134 + C25135) * C9645 +
           (C25696 + C25697 + C25698) * C93718) *
              C93585 * C1382 -
          ((C25699 + C25700 + C25701) * C93718 +
           (C25142 + C25143 + C25144) * C9645 +
           (C25698 + C25697 + C25696) * C93829 +
           (C25135 + C25134 + C25133) * C9644) *
              C93585 * C1383 +
          ((C25144 + C25143 + C25142) * C9644 +
           (C25701 + C25700 + C25699) * C93829 +
           (C14838 * C10964 + C14739 * C11080 + C14839 * C25001 +
            C14740 * C25104 + C14840 * C25002 + C14741 * C25105) *
               C9645 +
           (C14838 * C11196 + C14739 * C11667 + C14839 * C25218 +
            C14740 * C25681 + C14840 * C25219 + C14741 * C25682) *
               C93718) *
              C93585 * C1384) *
         C93625 * C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[72] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C93680 * C4075 +
                     (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                        C93639 * C800 -
                    ((C10166 * C3411 + C10879 + C10879 + C93718 * C3995 +
                      C10165 * C805 + C10880 + C10880 + C93829 * C1317) *
                         C93680 * C4077 +
                     (C10166 * C3410 + C10881 + C10881 + C93718 * C3994 +
                      C10165 * C806 + C10882 + C10882 + C93829 * C1318) *
                         C93680 * C4076 +
                     (C10166 * C3409 + C10883 + C10883 + C93718 * C3993 +
                      C10165 * C807 + C10884 + C10884 + C93829 * C1319) *
                         C93680 * C4075) *
                        C93639 * C801 +
                    ((C10165 * C808 + C10885 + C10885 + C93829 * C1320 +
                      C10166 * C8520 + C10886 + C10886 + C93718 * C9406) *
                         C93680 * C4075 +
                     (C10165 * C809 + C10887 + C10887 + C93829 * C1321 +
                      C10166 * C8521 + C10888 + C10888 + C93718 * C9407) *
                         C93680 * C4076 +
                     (C10165 * C810 + C10889 + C10889 + C93829 * C1322 +
                      C10166 * C8522 + C10890 + C10890 + C93718 * C9408) *
                         C93680 * C4077) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C93680 * C4075 +
                     (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                        C93639 * C93625 * C97 -
                    ((C10206 + C10207) * C93680 * C4077 +
                     (C10205 + C10204) * C93680 * C4076 +
                     (C10203 + C10202) * C93680 * C4075) *
                        C93639 * C93625 * C98 +
                    (C10209 * C4075 + (C10207 + C10206) * C93680 * C4076 +
                     (C10165 * C112 + C10188 + C10188 + C93829 * C718 +
                      C10166 * C2697 + C10189 + C10189 + C93718 * C3323) *
                         C93680 * C4077) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C93680 * C4075 +
                     (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                        C1382 -
                    ((C10166 * C1391 + C11760 + C11760 + C93718 * C1903 +
                      C10165 * C1386 + C11761 + C11761 + C93829 * C1898) *
                         C93680 * C4077 +
                     (C10166 * C1390 + C11762 + C11762 + C93718 * C1902 +
                      C10165 * C1387 + C11763 + C11763 + C93829 * C1899) *
                         C93680 * C4076 +
                     (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
                      C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                         C93680 * C4075) *
                        C1383 +
                    ((C10165 * C1389 + C11766 + C11766 + C93829 * C1901 +
                      C10166 * C10964 + C11767 + C11767 + C93718 * C11756) *
                         C93680 * C4075 +
                     (C10165 * C1390 + C11768 + C11768 + C93829 * C1902 +
                      C10166 * C10965 + C11769 + C11769 + C93718 * C11757) *
                         C93680 * C4076 +
                     (C10165 * C1391 + C11770 + C11770 + C93829 * C1903 +
                      C10166 * C10966 + C11771 + C11771 + C93718 * C11758) *
                         C93680 * C4077) *
                        C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C14739 +
                     (C10165 * C807 + C10884 + C10884 + C93829 * C1319 +
                      C10166 * C3409 + C10883 + C10883 + C93718 * C3993) *
                         C14740 +
                     (C10165 * C808 + C10885 + C10885 + C93829 * C1320 +
                      C10166 * C8520 + C10886 + C10886 + C93718 * C9406) *
                         C14741) *
                        C93585 * C93639 * C93625 * C97 -
                    ((C10166 * C8521 + C10888 + C10888 + C93718 * C9407 +
                      C10165 * C809 + C10887 + C10887 + C93829 * C1321) *
                         C14741 +
                     (C12746 + C12747) * C14740 + (C10203 + C10202) * C14739) *
                        C93585 * C93639 * C93625 * C98 +
                    (C10208 * C14739 + (C12745 + C12744) * C14740 +
                     (C10165 * C810 + C10889 + C10889 + C93829 * C1322 +
                      C10166 * C8522 + C10890 + C10890 + C93718 * C9408) *
                         C14741) *
                        C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C14739 +
                     (C24921 + C24922) * C14740 + C24927 * C14741) *
                        C93585 * C93639 * C800 -
                    ((C24925 + C24926) * C14741 + (C24924 + C24923) * C14740 +
                     (C24922 + C24921) * C14739) *
                        C93585 * C93639 * C801 +
                    (C24927 * C14739 + (C24926 + C24925) * C14740 +
                     (C10165 * C15550 + C24907 + C24907 + C93829 * C16307 +
                      C10166 * C22854 + C24908 + C24908 + C93718 * C23465) *
                         C14741) *
                        C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C14739 +
                     (C24921 + C24922) * C14740 + C24927 * C14741) *
                        C93585 * C1382 -
                    ((C10166 * C16395 + C25778 + C25778 + C93718 * C17035 +
                      C10165 * C8520 + C25779 + C25779 + C93829 * C9406) *
                         C14741 +
                     (C10166 * C5775 + C14659 + C14659 + C93718 * C6427 +
                      C10165 * C3409 + C14658 + C14658 + C93829 * C3993) *
                         C14740 +
                     (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
                      C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                         C14739) *
                        C93585 * C1383 +
                    ((C10165 * C1389 + C11766 + C11766 + C93829 * C1901 +
                      C10166 * C10964 + C11767 + C11767 + C93718 * C11756) *
                         C14739 +
                     (C10165 * C5775 + C25780 + C25780 + C93829 * C6427 +
                      C10166 * C25001 + C25781 + C25781 + C93718 * C25775) *
                         C14740 +
                     (C10165 * C16395 + C25782 + C25782 + C93829 * C17035 +
                      C10166 * C25002 + C25783 + C25783 + C93718 * C25776) *
                         C14741) *
                        C93585 * C1384) *
                   C93625 * C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 +
             C4088 + C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
             C4077 * C122) *
                C93829 +
            (C11001 + C11002 + C11003) * C93718) *
               C93680 * C2695 -
           ((C11004 + C11005 + C11006) * C93718 +
            (C11003 + C11002 + C11001) * C93829) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C12861 + C12862 + C12863) * C93829 +
            (C4080 * C1390 + C12852 + C12852 + C4075 * C1406 + C4082 * C1391 +
             C12853 + C12853 + C4076 * C1407 + C4084 * C1392 + C12854 + C12854 +
             C4077 * C1408) *
                C93718) *
               C93680 * C2696 -
           ((C12863 + C12862 + C12861) * C93718 +
            (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 +
             C4097 + C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
             C4075 * C121) *
                C93829) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
             C25027 * C93718) *
                C14739 +
            (C24216 + C24217) * C14740 + C24222 * C14741) *
               C2695 -
           ((C25028 * C93718 + C22872 * C93829) * C14741 +
            (C25029 * C93718 + C22873 * C93829) * C14740 +
            (C25030 * C93718 + C25027 * C93829) * C14739) *
               C2696) *
              C93625 * C1981 +
          (((C26841 * C93829 +
             (C20048 * C1390 + C26836 + C26836 + C93585 * C1406) * C93718) *
                C14739 +
            (C25892 * C93829 +
             (C20048 * C5776 + C26837 + C26837 + C93585 * C5782) * C93718) *
                C14740 +
            (C25893 * C93829 +
             (C20048 * C16396 + C26838 + C26838 + C93585 * C16400) * C93718) *
                C14741) *
               C2696 -
           ((C25895 + C25885) * C14741 + (C25894 + C25882) * C14740 +
            (C26841 * C93718 +
             (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93829) *
                C14739) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C4081 +
             (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
             C219 * C4076 + C220 * C4085 + C221 * C4077) *
                C93829 +
            (C11115 + C11116 + C11091 + C11092 + C11093 + C11094) * C93718) *
               C2695 -
           ((C11117 + C11118 + C11119 + C11120 + C11121 + C11122) * C93718 +
            (C11094 + C11093 + C11092 + C11091 + C11116 + C11115) * C93829) *
               C2696) *
              C93625 * C1981 +
          (((C12962 + C12963 + C12964 + C12965 + C12966 + C12967) * C93829 +
            (C11112 * C4081 + C11111 * C4075 + C11110 * C4083 + C11109 * C4076 +
             (C188 * C1392 + C93680 * C1474) * C4085 +
             (C188 * C1400 + C93680 * C1482) * C4077) *
                C93718) *
               C2696 -
           ((C12967 + C12966 + C12965 + C12964 + C12963 + C12962) * C93718 +
            (C223 * C4077 + C222 * C4085 + C221 * C4076 + C220 * C4083 +
             C219 * C4075 + C218 * C4081) *
                C93829) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
              C14840 * C808 + C14741 * C890) *
                 C20049 +
             (C14838 * C114 + C14739 * C195 + C14839 * C815 + C14740 * C897 +
              C14840 * C816 + C14741 * C898) *
                 C93585) *
                C93829 +
            ((C25133 + C25134 + C25135) * C20049 +
             (C25136 + C25137 + C25138) * C93585) *
                C93718) *
               C2695 -
           (((C25139 + C25140 + C25141) * C93585 +
             (C25142 + C25143 + C25144) * C20049) *
                C93718 +
            ((C25138 + C25137 + C25136) * C93585 +
             (C25135 + C25134 + C25133) * C20049) *
                C93829) *
               C2696) *
              C93625 * C1981 +
          ((((C18261 + C18260 + C18259) * C20049 +
             (C18258 + C18257 + C18256) * C93585) *
                C93829 +
            ((C14838 * C1390 + C14739 * C1472 + C14839 * C5776 +
              C14740 * C5871 + C14840 * C16396 + C14741 * C16488) *
                 C20049 +
             (C14838 * C1398 + C14739 * C1480 + C14839 * C5779 +
              C14740 * C5874 + C14840 * C16398 + C14741 * C16490) *
                 C93585) *
                C93718) *
               C2696 -
           (((C18256 + C18257 + C18258) * C93585 +
             (C18259 + C18260 + C18261) * C20049) *
                C93718 +
            ((C14871 + C14870 + C14869) * C93585 +
             (C14868 + C14867 + C14866) * C20049) *
                C93829) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eexz[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C4081 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C4075 +
            (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
            C9684 * C4077) *
               C93680 * C2695 -
           ((C13082 + C13083) * C4077 + (C13084 + C13085) * C4085 +
            (C13086 + C13087) * C4076 + (C13088 + C13089) * C4083 +
            (C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                C4075 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C4081) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C13089 + C13088) * C4081 + (C13087 + C13086) * C4075 +
            (C13085 + C13084) * C4083 + (C13083 + C13082) * C4076 +
            (C9644 * C1385 + C93829 * C1533 + C9645 * C1392 + C93718 * C1540) *
                C4085 +
            (C9644 * C1393 + C93829 * C1541 + C9645 * C1400 + C93718 * C1548) *
                C4077) *
               C93680 * C2696 -
           ((C9679 + C9680) * C4077 + (C9681 + C9682) * C4085 +
            (C9678 + C9677) * C4076 + (C9676 + C9675) * C4083 +
            (C9674 + C9673) * C4075 + (C9672 + C9671) * C4081) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C20049 +
             (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                 C93585) *
                C14739 +
            ((C24395 + C24396) * C20049 + (C24397 + C24398) * C93585) * C14740 +
            C24411 * C14741) *
               C2695 -
           (((C9645 * C16397 + C93718 * C16567 + C9644 * C8523 +
              C93829 * C8752) *
                 C93585 +
             (C9645 * C16395 + C93718 * C16565 + C9644 * C8520 +
              C93829 * C8749) *
                 C20049) *
                C14741 +
            ((C9645 * C5778 + C93718 * C5953 + C9644 * C3413 + C93829 * C3569) *
                 C93585 +
             (C9645 * C5775 + C93718 * C5950 + C9644 * C3409 + C93829 * C3565) *
                 C20049) *
                C14740 +
            ((C9645 * C1397 + C93718 * C1545 + C9644 * C1396 + C93829 * C1544) *
                 C93585 +
             (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                 C20049) *
                C14739) *
               C2696) *
              C93625 * C1981 +
          ((((C13089 + C13088) * C20049 + (C13087 + C13086) * C93585) * C14739 +
            ((C9644 * C3410 + C93829 * C3566 + C9645 * C5776 + C93718 * C5951) *
                 C20049 +
             (C9644 * C3414 + C93829 * C3570 + C9645 * C5779 + C93718 * C5954) *
                 C93585) *
                C14740 +
            ((C9644 * C8521 + C93829 * C8750 + C9645 * C16396 +
              C93718 * C16566) *
                 C20049 +
             (C9644 * C8524 + C93829 * C8753 + C9645 * C16398 +
              C93718 * C16568) *
                 C93585) *
                C14741) *
               C2696 -
           (((C26103 + C26102) * C93585 + (C26101 + C26100) * C20049) * C14741 +
            ((C12098 + C12099) * C93585 + (C12100 + C12101) * C20049) * C14740 +
            ((C9674 + C9673) * C93585 + (C9672 + C9671) * C20049) * C14739) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
              C4085 * C110 + C4077 * C116) *
                 C188 +
             (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
              C4085 * C191 + C4077 * C364) *
                 C93680) *
                C93829 +
            ((C11304 + C11305 + C11306) * C188 +
             (C11307 + C11308 + C11309) * C93680) *
                C93718) *
               C2695 -
           (((C11310 + C11311 + C11312) * C93680 +
             (C11313 + C11314 + C11315) * C188) *
                C93718 +
            ((C11309 + C11308 + C11307) * C93680 +
             (C11306 + C11305 + C11304) * C188) *
                C93829) *
               C2696) *
              C93625 * C1981 +
          ((((C13200 + C13201 + C13202) * C188 +
             (C13203 + C13204 + C13205) * C93680) *
                C93829 +
            ((C4081 * C1390 + C4075 * C1398 + C4083 * C1391 + C4076 * C1399 +
              C4085 * C1392 + C4077 * C1400) *
                 C188 +
             (C4081 * C1472 + C4075 * C1604 + C4083 * C1473 + C4076 * C1605 +
              C4085 * C1474 + C4077 * C1606) *
                 C93680) *
                C93718) *
               C2696 -
           (((C13205 + C13204 + C13203) * C93680 +
             (C13202 + C13201 + C13200) * C188) *
                C93718 +
            ((C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
              C4081 * C190 + C4075 * C363) *
                 C93680 +
             (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
              C4081 * C109 + C4075 * C115) *
                 C188) *
                C93829) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C14838 +
             (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
             C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
                C93829 +
            (C25327 + C25328 + C25303 + C25304 + C25305 + C25306) * C93718) *
               C2695 -
           ((C25329 + C25330 + C25331 + C25332 + C25333 + C25334) * C93718 +
            (C25306 + C25305 + C25304 + C25303 + C25328 + C25327) * C93829) *
               C2696) *
              C93625 * C1981 +
          (((C27146 + C27147 + C27140 + C27141 + C27142 + C27143) * C93829 +
            ((C20049 * C1390 + C93585 * C1398) * C14838 +
             (C20049 * C1472 + C93585 * C1604) * C14739 +
             (C20049 * C5776 + C93585 * C5779) * C14839 +
             (C20049 * C5871 + C93585 * C6031) * C14740 +
             (C20049 * C16396 + C93585 * C16398) * C14840 +
             (C20049 * C16488 + C93585 * C16644) * C14741) *
                C93718) *
               C2696 -
           ((C27143 + C27142 + C27141 + C27140 + C27147 + C27146) * C93718 +
            (C21835 * C14741 + C21834 * C14840 + C21833 * C14740 +
             C21832 * C14839 + (C20049 * C190 + C93585 * C363) * C14739 +
             (C20049 * C109 + C93585 * C115) * C14838) *
                C93829) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 +
             C448 * C4076 + C449 * C4077) *
                C93829 +
            (C11418 + C11395 + C11396) * C93718) *
               C2695 -
           ((C11419 + C11420 + C11421) * C93718 +
            (C11396 + C11395 + C11418) * C93829) *
               C2696) *
              C93625 * C1981 +
          (((C13304 + C13305 + C13306) * C93829 +
            (C11416 * C4075 + C11415 * C4076 +
             (C418 * C1392 + C1673 + C1673 + C93680 * C1664) * C4077) *
                C93718) *
               C2696 -
           ((C13306 + C13305 + C13304) * C93718 +
            (C450 * C4077 + C449 * C4076 + C448 * C4075) * C93829) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
             C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 +
             C15105 + C14741 * C1080) *
                C93585 * C93829 +
            (C25438 + C25439 + C25440) * C93585 * C93718) *
               C2695 -
           ((C25441 + C25442 + C25443) * C93585 * C93718 +
            (C25440 + C25439 + C25438) * C93585 * C93829) *
               C2696) *
              C93625 * C1981 +
          (((C18579 + C18578 + C18577) * C93585 * C93829 +
            (C15099 * C1390 + C16731 + C16731 + C14739 * C1662 +
             C15100 * C5776 + C16732 + C16732 + C14740 * C6108 +
             C15101 * C16396 + C16733 + C16733 + C14741 * C16720) *
                C93585 * C93718) *
               C2696 -
           ((C18577 + C18578 + C18579) * C93585 * C93718 +
            (C15141 + C15140 + C15139) * C93585 * C93829) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                 C188 +
             (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                 C93680) *
                C4075 +
            ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
            C9928 * C4077) *
               C2695 -
           (((C13413 + C13414) * C93680 + (C13084 + C13085) * C188) * C4077 +
            ((C13415 + C13416) * C93680 + (C13088 + C13089) * C188) * C4076 +
            ((C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                 C93680 +
             (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                 C188) *
                C4075) *
               C2696) *
              C93625 * C1981 +
          ((((C13089 + C13088) * C188 + (C13416 + C13415) * C93680) * C4075 +
            ((C13085 + C13084) * C188 + (C13414 + C13413) * C93680) * C4076 +
            ((C9644 * C1385 + C93829 * C1533 + C9645 * C1392 + C93718 * C1540) *
                 C188 +
             (C9644 * C1467 + C93829 * C1723 + C9645 * C1474 + C93718 * C1730) *
                 C93680) *
                C4077) *
               C2696 -
           (((C9924 + C9925) * C93680 + (C9681 + C9682) * C188) * C4077 +
            ((C9923 + C9922) * C93680 + (C9676 + C9675) * C188) * C4076 +
            ((C9921 + C9920) * C93680 + (C9672 + C9671) * C188) * C4075) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C14838 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C14739 +
            (C24395 + C24396) * C14839 + (C24649 + C24650) * C14740 +
            C24407 * C14840 + C24655 * C14741) *
               C93585 * C2695 -
           ((C9645 * C16487 + C93718 * C16807 + C9644 * C8645 +
             C93829 * C9091) *
                C14741 +
            (C9645 * C16395 + C93718 * C16565 + C9644 * C8520 +
             C93829 * C8749) *
                C14840 +
            (C9645 * C5870 + C93718 * C6196 + C9644 * C3491 + C93829 * C3783) *
                C14740 +
            (C9645 * C5775 + C93718 * C5950 + C9644 * C3409 + C93829 * C3565) *
                C14839 +
            (C9645 * C1471 + C93718 * C1727 + C9644 * C1470 + C93829 * C1726) *
                C14739 +
            (C9645 * C1389 + C93718 * C1537 + C9644 * C1388 + C93829 * C1536) *
                C14838) *
               C93585 * C2696) *
              C93625 * C1981 +
          (((C13089 + C13088) * C14838 + (C13416 + C13415) * C14739 +
            (C9644 * C3410 + C93829 * C3566 + C9645 * C5776 + C93718 * C5951) *
                C14839 +
            (C9644 * C3492 + C93829 * C3784 + C9645 * C5871 + C93718 * C6197) *
                C14740 +
            (C9644 * C8521 + C93829 * C8750 + C9645 * C16396 +
             C93718 * C16566) *
                C14840 +
            (C9644 * C8646 + C93829 * C9092 + C9645 * C16488 +
             C93718 * C16808) *
                C14741) *
               C93585 * C2696 -
           ((C26415 + C26414) * C14741 + (C26101 + C26100) * C14840 +
            (C12416 + C12417) * C14740 + (C12100 + C12101) * C14839 +
            (C9921 + C9920) * C14739 + (C9672 + C9671) * C14838) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezx[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C9644 +
            (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
             C4085 * C278 + C4077 * C581) *
                C93829 +
            (C11304 + C11305 + C11306) * C9645 +
            (C11588 + C11589 + C11590) * C93718) *
               C93680 * C2695 -
           ((C11591 + C11592 + C11593) * C93718 +
            (C11313 + C11314 + C11315) * C9645 +
            (C11590 + C11589 + C11588) * C93829 +
            (C11306 + C11305 + C11304) * C9644) *
               C93680 * C2696) *
              C93625 * C1981 +
          (((C13200 + C13201 + C13202) * C9644 +
            (C13521 + C13522 + C13523) * C93829 +
            (C4081 * C1390 + C4075 * C1398 + C4083 * C1391 + C4076 * C1399 +
             C4085 * C1392 + C4077 * C1400) *
                C9645 +
            (C4081 * C1538 + C4075 * C1786 + C4083 * C1539 + C4076 * C1787 +
             C4085 * C1540 + C4077 * C1788) *
                C93718) *
               C93680 * C2696 -
           ((C13523 + C13522 + C13521) * C93718 +
            (C13202 + C13201 + C13200) * C9645 +
            (C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
             C4081 * C277 + C4075 * C580) *
                C93829 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C9644) *
               C93680 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20049 * C108 + C93585 * C114) * C9644 +
             (C20049 * C276 + C93585 * C579) * C93829 + C25319 * C9645 +
             C25604 * C93718) *
                C14739 +
            (C24730 + C24731 + C24732 + C24733) * C14740 + C24744 * C14741) *
               C2695 -
           ((C25605 * C93718 + C25322 * C9645 + C23328 * C93829 +
             C23107 * C9644) *
                C14741 +
            (C25606 * C93718 + C25324 * C9645 + C23329 * C93829 +
             C23109 * C9644) *
                C14740 +
            (C25607 * C93718 + C25326 * C9645 + C25604 * C93829 +
             C25319 * C9644) *
                C14739) *
               C2696) *
              C93625 * C1981 +
          (((C27144 * C9644 + C27444 * C93829 +
             (C20049 * C1390 + C93585 * C1398) * C9645 +
             (C20049 * C1538 + C93585 * C1786) * C93718) *
                C14739 +
            (C26210 * C9644 + C26524 * C93829 +
             (C20049 * C5776 + C93585 * C5779) * C9645 +
             (C20049 * C5951 + C93585 * C6274) * C93718) *
                C14740 +
            (C26212 * C9644 + C26525 * C93829 +
             (C20049 * C16396 + C93585 * C16398) * C9645 +
             (C20049 * C16566 + C93585 * C16884) * C93718) *
                C14741) *
               C2696 -
           ((C26527 + C26521 + C26520 + C26519) * C14741 +
            (C26526 + C26516 + C26515 + C26514) * C14740 +
            (C27444 * C93718 + C27144 * C9645 +
             (C20049 * C277 + C93585 * C580) * C93829 +
             (C20049 * C109 + C93585 * C115) * C9644) *
                C14739) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C93680 * C189) * C9644 +
             (C188 * C276 + C93680 * C635) * C93829 + C11107 * C9645 +
             C11679 * C93718) *
                C4075 +
            (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
               C2695 -
           ((C13622 + C13623 + C13624 + C13625) * C4077 +
            (C13626 + C13627 + C13628 + C13629) * C4076 +
            (C11682 * C93718 + C11114 * C9645 + C11679 * C93829 +
             C11107 * C9644) *
                C4075) *
               C2696) *
              C93625 * C1981 +
          (((C13629 + C13628 + C13627 + C13626) * C4075 +
            (C13625 + C13624 + C13623 + C13622) * C4076 +
            (C2786 * C9644 + C3252 * C93829 +
             (C188 * C1392 + C93680 * C1474) * C9645 +
             (C188 * C1540 + C93680 * C1846) * C93718) *
                C4077) *
               C2696 -
           ((C10085 + C10086 + C10087 + C10088) * C4077 +
            (C10084 + C10083 + C10082 + C10081) * C4076 +
            (C10080 + C10079 + C10078 + C10077) * C4075) *
               C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
             C14840 * C808 + C14741 * C890) *
                C9644 +
            (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
             C14840 * C956 + C14741 * C1262) *
                C93829 +
            (C25133 + C25134 + C25135) * C9645 +
            (C25696 + C25697 + C25698) * C93718) *
               C93585 * C2695 -
           ((C25699 + C25700 + C25701) * C93718 +
            (C25142 + C25143 + C25144) * C9645 +
            (C25698 + C25697 + C25696) * C93829 +
            (C25135 + C25134 + C25133) * C9644) *
               C93585 * C2696) *
              C93625 * C1981 +
          (((C18261 + C18260 + C18259) * C9644 +
            (C18891 + C18890 + C18889) * C93829 +
            (C14838 * C1390 + C14739 * C1472 + C14839 * C5776 + C14740 * C5871 +
             C14840 * C16396 + C14741 * C16488) *
                C9645 +
            (C14838 * C1538 + C14739 * C1844 + C14839 * C5951 + C14740 * C6351 +
             C14840 * C16566 + C14741 * C16960) *
                C93718) *
               C93585 * C2696 -
           ((C18889 + C18890 + C18891) * C93718 +
            (C18259 + C18260 + C18261) * C9645 +
            (C15393 + C15392 + C15391) * C93829 +
            (C14868 + C14867 + C14866) * C9644) *
               C93585 * C2695) *
              C93625 * C1982)) /
            (p * q * std::sqrt(p + q));
    d2eezz[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                       C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                          C93680 * C4075 +
                      (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                         C2695 -
                     ((C13746 + C13747) * C93680 * C4077 +
                      (C13748 + C13749) * C93680 * C4076 +
                      (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
                       C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                          C93680 * C4075) *
                         C2696) *
                        C93625 * C1981 +
                    (((C13749 + C13748) * C93680 * C4075 +
                      (C13747 + C13746) * C93680 * C4076 +
                      (C10165 * C1385 + C13736 + C13736 + C93829 * C1897 +
                       C10166 * C1392 + C13737 + C13737 + C93718 * C1904) *
                          C93680 * C4077) *
                         C2696 -
                     ((C10206 + C10207) * C93680 * C4077 +
                      (C10205 + C10204) * C93680 * C4076 +
                      (C10203 + C10202) * C93680 * C4075) *
                         C2695) *
                        C93625 * C1982)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                       C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                          C14739 +
                      (C24921 + C24922) * C14740 + C24927 * C14741) *
                         C93585 * C2695 -
                     ((C10166 * C16395 + C25778 + C25778 + C93718 * C17035 +
                       C10165 * C8520 + C25779 + C25779 + C93829 * C9406) *
                          C14741 +
                      (C10166 * C5775 + C14659 + C14659 + C93718 * C6427 +
                       C10165 * C3409 + C14658 + C14658 + C93829 * C3993) *
                          C14740 +
                      (C10166 * C1389 + C11764 + C11764 + C93718 * C1901 +
                       C10165 * C1388 + C11765 + C11765 + C93829 * C1900) *
                          C14739) *
                         C93585 * C2696) *
                        C93625 * C1981 +
                    (((C13749 + C13748) * C14739 +
                      (C10165 * C3410 + C14660 + C14660 + C93829 * C3994 +
                       C10166 * C5776 + C14661 + C14661 + C93718 * C6428) *
                          C14740 +
                      (C10165 * C8521 + C27641 + C27641 + C93829 * C9407 +
                       C10166 * C16396 + C27642 + C27642 + C93718 * C17036) *
                          C14741) *
                         C93585 * C2696 -
                     ((C26735 + C26734) * C14741 + (C12746 + C12747) * C14740 +
                      (C10203 + C10202) * C14739) *
                         C93585 * C2695) *
                        C93625 * C1982)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93829 +
           (C4080 * C1388 + C5790 + C5790 + C4075 * C1404 + C4082 * C1387 +
            C5789 + C5789 + C4076 * C1403 + C4084 * C1386 + C5788 + C5788 +
            C4077 * C1402) *
               C93718) *
              C93680 * C93639 * C93625 * C97 -
          ((C4084 * C1385 + C7537 + C7537 + C4077 * C1401 + C4082 * C1386 +
            C7536 + C7536 + C4076 * C1402 + C4080 * C1387 + C7535 + C7535 +
            C4075 * C1403) *
               C93718 +
           (C4084 * C111 + C4096 + C4096 + C4077 * C123 + C4082 * C110 + C4097 +
            C4097 + C4076 * C122 + C4080 * C109 + C4098 + C4098 +
            C4075 * C121) *
               C93829) *
              C93680 * C93639 * C93625 * C98 +
          ((C4080 * C110 + C4099 + C4099 + C4075 * C122 + C4082 * C111 + C4100 +
            C4100 + C4076 * C123 + C4084 * C112 + C4101 + C4101 +
            C4077 * C124) *
               C93829 +
           (C4080 * C1386 + C9494 + C9494 + C4075 * C1402 + C4082 * C1385 +
            C9495 + C9495 + C4076 * C1401 + C4084 * C2697 + C9496 + C9496 +
            C4077 * C2699) *
               C93718) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4080 * C108 + C4087 + C4087 + C4075 * C120 + C4082 * C109 + C4088 +
            C4088 + C4076 * C121 + C4084 * C110 + C4089 + C4089 +
            C4077 * C122) *
               C93829 +
           (C4080 * C1388 + C5790 + C5790 + C4075 * C1404 + C4082 * C1387 +
            C5789 + C5789 + C4076 * C1403 + C4084 * C1386 + C5788 + C5788 +
            C4077 * C1402) *
               C93718) *
              C93680 * C93639 * C800 -
          ((C8545 + C8546 + C8547) * C93718 +
           (C4939 + C4938 + C4937) * C93829) *
              C93680 * C93639 * C801 +
          ((C4942 + C4941 + C4940) * C93829 +
           (C4080 * C8520 + C8536 + C8536 + C4075 * C8526 + C4082 * C8521 +
            C8537 + C8537 + C4076 * C8527 + C4084 * C8522 + C8538 + C8538 +
            C4077 * C8528) *
               C93718) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
            (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) * C93718) *
               C14739 +
           (C20554 * C93829 + C22873 * C93718) * C14740 +
           (C20555 * C93829 + C22872 * C93718) * C14741) *
              C93639 * C93625 * C97 -
          (((C20048 * C8521 + C22255 + C22255 + C93585 * C8527) * C93718 +
            C21611 * C93829) *
               C14741 +
           ((C20048 * C3410 + C22254 + C22254 + C93585 * C3418) * C93718 +
            C21610 * C93829) *
               C14740 +
           ((C20048 * C1387 + C22253 + C22253 + C93585 * C1403) * C93718 +
            (C20048 * C109 + C20058 + C20058 + C93585 * C121) * C93829) *
               C14739) *
              C93639 * C93625 * C98 +
          (((C20048 * C110 + C20059 + C20059 + C93585 * C122) * C93829 +
            (C20048 * C1386 + C23547 + C23547 + C93585 * C1402) * C93718) *
               C14739 +
           ((C20048 * C805 + C20060 + C20060 + C93585 * C821) * C93829 +
            (C20048 * C3411 + C23548 + C23548 + C93585 * C3419) * C93718) *
               C14740 +
           ((C20048 * C810 + C20061 + C20061 + C93585 * C826) * C93829 +
            (C20048 * C8522 + C23549 + C23549 + C93585 * C8528) * C93718) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20048 * C108 + C20051 + C20051 + C93585 * C120) * C93829 +
            (C20048 * C1388 + C21107 + C21107 + C93585 * C1404) * C93718) *
               C14739 +
           (C24216 + C24217) * C14740 + C24222 * C14741) *
              C93639 * C800 -
          ((C24220 + C24221) * C14741 + (C24219 + C24218) * C14740 +
           (C24217 + C24216) * C14739) *
              C93639 * C801 +
          (C24222 * C14739 + (C24221 + C24220) * C14740 +
           (C20557 * C93829 +
            (C20048 * C22854 + C22864 + C22864 + C93585 * C22856) * C93718) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eexy[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C93680 * C189) * C4081 +
                      (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
                      C219 * C4076 + C220 * C4085 + C221 * C4077) *
                         C93829 +
                     ((C188 * C1388 + C93680 * C1470) * C4081 +
                      (C188 * C1396 + C93680 * C1478) * C4075 + C2790 * C4083 +
                      C2789 * C4076 + C2788 * C4085 + C2787 * C4077) *
                         C93718) *
                        C93639 * C93625 * C97 -
                    ((C2785 * C4077 + C2786 * C4085 + C2787 * C4076 +
                      C2788 * C4083 + C2789 * C4075 + C2790 * C4081) *
                         C93718 +
                     (C223 * C4077 + C222 * C4085 + C221 * C4076 +
                      C220 * C4083 + C219 * C4075 + C218 * C4081) *
                         C93829) *
                        C93639 * C93625 * C98 +
                    ((C220 * C4081 + C221 * C4075 + C222 * C4083 +
                      C223 * C4076 + C225 * C4085 + C224 * C4077) *
                         C93829 +
                     (C2788 * C4081 + C2787 * C4075 + C2786 * C4083 +
                      C2785 * C4076 + (C188 * C2697 + C93680 * C2770) * C4085 +
                      (C188 * C2698 + C93680 * C2771) * C4077) *
                         C93718) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C93680 * C189) * C4081 +
                      (C188 * C114 + C93680 * C195) * C4075 + C218 * C4083 +
                      C219 * C4076 + C220 * C4085 + C221 * C4077) *
                         C93829 +
                     ((C188 * C1388 + C93680 * C1470) * C4081 +
                      (C188 * C1396 + C93680 * C1478) * C4075 + C2790 * C4083 +
                      C2789 * C4076 + C2788 * C4085 + C2787 * C4077) *
                         C93718) *
                        C93639 * C800 -
                    (((C188 * C3415 + C93680 * C3497) * C4077 +
                      (C188 * C3411 + C93680 * C3493) * C4085 +
                      (C188 * C3414 + C93680 * C3496) * C4076 +
                      (C188 * C3410 + C93680 * C3492) * C4083 +
                      (C188 * C3413 + C93680 * C3495) * C4075 +
                      (C188 * C3409 + C93680 * C3491) * C4081) *
                         C93718 +
                     (C2073 * C4077 + C2074 * C4085 + C2075 * C4076 +
                      C2076 * C4083 + (C188 * C815 + C93680 * C897) * C4075 +
                      (C188 * C807 + C93680 * C889) * C4081) *
                         C93829) *
                        C93639 * C801 +
                    (((C188 * C808 + C93680 * C890) * C4081 +
                      (C188 * C816 + C93680 * C898) * C4075 +
                      (C188 * C809 + C93680 * C891) * C4083 +
                      (C188 * C817 + C93680 * C899) * C4076 +
                      (C188 * C810 + C93680 * C892) * C4085 +
                      (C188 * C818 + C93680 * C900) * C4077) *
                         C93829 +
                     ((C188 * C8520 + C93680 * C8645) * C4081 +
                      (C188 * C8523 + C93680 * C8648) * C4075 +
                      (C188 * C8521 + C93680 * C8646) * C4083 +
                      (C188 * C8524 + C93680 * C8649) * C4076 +
                      (C188 * C8522 + C93680 * C8647) * C4085 +
                      (C188 * C8525 + C93680 * C8650) * C4077) *
                         C93718) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C14838 * C108 + C14739 * C189 + C14839 * C807 +
                       C14740 * C889 + C14840 * C808 + C14741 * C890) *
                          C20049 +
                      (C14838 * C114 + C14739 * C195 + C14839 * C815 +
                       C14740 * C897 + C14840 * C816 + C14741 * C898) *
                          C93585) *
                         C93829 +
                     ((C14838 * C1388 + C14739 * C1470 + C14839 * C3409 +
                       C14740 * C3491 + C14840 * C8520 + C14741 * C8645) *
                          C20049 +
                      (C14838 * C1396 + C14739 * C1478 + C14839 * C3413 +
                       C14740 * C3495 + C14840 * C8523 + C14741 * C8648) *
                          C93585) *
                         C93718) *
                        C93639 * C93625 * C97 -
                    (((C18256 + C18257 + C18258) * C93585 +
                      (C18259 + C18260 + C18261) * C20049) *
                         C93718 +
                     ((C14871 + C14870 + C14869) * C93585 +
                      (C14868 + C14867 + C14866) * C20049) *
                         C93829) *
                        C93639 * C93625 * C98 +
                    (((C14877 + C14876 + C14875) * C20049 +
                      (C14874 + C14873 + C14872) * C93585) *
                         C93829 +
                     ((C14838 * C1386 + C14739 * C1468 + C14839 * C3411 +
                       C14740 * C3493 + C14840 * C8522 + C14741 * C8647) *
                          C20049 +
                      (C14838 * C1394 + C14739 * C1476 + C14839 * C3415 +
                       C14740 * C3497 + C14840 * C8525 + C14741 * C8650) *
                          C93585) *
                         C93718) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C14838 * C108 + C14739 * C189 + C14839 * C807 +
                       C14740 * C889 + C14840 * C808 + C14741 * C890) *
                          C20049 +
                      (C14838 * C114 + C14739 * C195 + C14839 * C815 +
                       C14740 * C897 + C14840 * C816 + C14741 * C898) *
                          C93585) *
                         C93829 +
                     ((C14838 * C1388 + C14739 * C1470 + C14839 * C3409 +
                       C14740 * C3491 + C14840 * C8520 + C14741 * C8645) *
                          C20049 +
                      (C14838 * C1396 + C14739 * C1478 + C14839 * C3413 +
                       C14740 * C3495 + C14840 * C8523 + C14741 * C8648) *
                          C93585) *
                         C93718) *
                        C93639 * C800 -
                    (((C14840 * C19097 + C14741 * C19223 + C14839 * C8523 +
                       C14740 * C8648 + C14838 * C3413 + C14739 * C3495) *
                          C93585 +
                      (C14840 * C19095 + C14741 * C19221 + C14839 * C8520 +
                       C14740 * C8645 + C14838 * C3409 + C14739 * C3491) *
                          C20049) *
                         C93718 +
                     ((C14840 * C4900 + C14741 * C5019 + C14839 * C816 +
                       C14740 * C898 + C14838 * C815 + C14739 * C897) *
                          C93585 +
                      (C14840 * C4897 + C14741 * C5016 + C14839 * C808 +
                       C14740 * C890 + C14838 * C807 + C14739 * C889) *
                          C20049) *
                         C93829) *
                        C93639 * C801 +
                    (((C14838 * C808 + C14739 * C890 + C14839 * C4897 +
                       C14740 * C5016 + C14840 * C15550 + C14741 * C15666) *
                          C20049 +
                      (C14838 * C816 + C14739 * C898 + C14839 * C4900 +
                       C14740 * C5019 + C14840 * C15552 + C14741 * C15668) *
                          C93585) *
                         C93829 +
                     ((C14838 * C8520 + C14739 * C8645 + C14839 * C19095 +
                       C14740 * C19221 + C14840 * C22854 + C14741 * C22942) *
                          C20049 +
                      (C14838 * C8523 + C14739 * C8648 + C14839 * C19097 +
                       C14740 * C19223 + C14840 * C22855 + C14741 * C22943) *
                          C93585) *
                         C93718) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
    d2eexz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C4081 +
           (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
               C4075 +
           (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
           C9684 * C4077) *
              C93680 * C93639 * C93625 * C97 -
          ((C9679 + C9680) * C4077 + (C9681 + C9682) * C4085 +
           (C9678 + C9677) * C4076 + (C9676 + C9675) * C4083 +
           (C9674 + C9673) * C4075 + (C9672 + C9671) * C4081) *
              C93680 * C93639 * C93625 * C98 +
          (C9683 * C4081 + C9684 * C4075 + (C9682 + C9681) * C4083 +
           (C9680 + C9679) * C4076 +
           (C9644 * C112 + C93829 * C280 + C9645 * C2697 + C93718 * C2856) *
               C4085 +
           (C9644 * C118 + C93829 * C286 + C9645 * C2698 + C93718 * C2857) *
               C4077) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C4081 +
           (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
               C4075 +
           (C9671 + C9672) * C4083 + (C9673 + C9674) * C4076 + C9683 * C4085 +
           C9684 * C4077) *
              C93680 * C93639 * C800 -
          ((C9645 * C3415 + C93718 * C3571 + C9644 * C813 + C93829 * C961) *
               C4077 +
           (C9645 * C3411 + C93718 * C3567 + C9644 * C805 + C93829 * C953) *
               C4085 +
           (C9645 * C3414 + C93718 * C3570 + C9644 * C814 + C93829 * C962) *
               C4076 +
           (C9645 * C3410 + C93718 * C3566 + C9644 * C806 + C93829 * C954) *
               C4083 +
           (C9645 * C3413 + C93718 * C3569 + C9644 * C815 + C93829 * C963) *
               C4075 +
           (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
               C4081) *
              C93680 * C93639 * C801 +
          ((C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
               C4081 +
           (C9644 * C816 + C93829 * C964 + C9645 * C8523 + C93718 * C8752) *
               C4075 +
           (C9644 * C809 + C93829 * C957 + C9645 * C8521 + C93718 * C8750) *
               C4083 +
           (C9644 * C817 + C93829 * C965 + C9645 * C8524 + C93718 * C8753) *
               C4076 +
           (C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
               C4085 +
           (C9644 * C818 + C93829 * C966 + C9645 * C8525 + C93718 * C8754) *
               C4077) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C20049 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C93585) *
               C14739 +
           ((C9644 * C807 + C93829 * C955 + C9645 * C3409 + C93718 * C3565) *
                C20049 +
            (C9644 * C815 + C93829 * C963 + C9645 * C3413 + C93718 * C3569) *
                C93585) *
               C14740 +
           ((C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
                C20049 +
            (C9644 * C816 + C93829 * C964 + C9645 * C8523 + C93718 * C8752) *
                C93585) *
               C14741) *
              C93639 * C93625 * C97 -
          (((C9645 * C8524 + C93718 * C8753 + C9644 * C817 + C93829 * C965) *
                C93585 +
            (C9645 * C8521 + C93718 * C8750 + C9644 * C809 + C93829 * C957) *
                C20049) *
               C14741 +
           ((C12098 + C12099) * C93585 + (C12100 + C12101) * C20049) * C14740 +
           ((C9674 + C9673) * C93585 + (C9672 + C9671) * C20049) * C14739) *
              C93639 * C93625 * C98 +
          ((C9683 * C20049 + C9684 * C93585) * C14739 +
           ((C12097 + C12096) * C20049 + (C12095 + C12094) * C93585) * C14740 +
           ((C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
                C20049 +
            (C9644 * C818 + C93829 * C966 + C9645 * C8525 + C93718 * C8754) *
                C93585) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C20049 +
            (C9644 * C114 + C93829 * C282 + C9645 * C1396 + C93718 * C1544) *
                C93585) *
               C14739 +
           ((C24395 + C24396) * C20049 + (C24397 + C24398) * C93585) * C14740 +
           C24411 * C14741) *
              C93639 * C800 -
          (((C24403 + C24404) * C93585 + (C24405 + C24406) * C20049) * C14741 +
           ((C24402 + C24401) * C93585 + (C24400 + C24399) * C20049) * C14740 +
           ((C24398 + C24397) * C93585 + (C24396 + C24395) * C20049) * C14739) *
              C93639 * C801 +
          (C24411 * C14739 +
           ((C24406 + C24405) * C20049 + (C24404 + C24403) * C93585) * C14740 +
           ((C9644 * C15550 + C93829 * C15744 + C9645 * C22854 +
             C93718 * C23010) *
                C20049 +
            (C9644 * C15552 + C93829 * C15746 + C9645 * C22855 +
             C93718 * C23011) *
                C93585) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C188 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93680) *
               C93829 +
           ((C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
             C4085 * C1386 + C4077 * C1394) *
                C188 +
            (C4081 * C1470 + C4075 * C1602 + C4083 * C1469 + C4076 * C1601 +
             C4085 * C1468 + C4077 * C1600) *
                C93680) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C4085 * C1467 + C4077 * C1599 + C4083 * C1468 + C4076 * C1600 +
             C4081 * C1469 + C4075 * C1601) *
                C93680 +
            (C4085 * C1385 + C4077 * C1393 + C4083 * C1386 + C4076 * C1394 +
             C4081 * C1387 + C4075 * C1395) *
                C188) *
               C93718 +
           ((C4085 * C192 + C4077 * C365 + C4083 * C191 + C4076 * C364 +
             C4081 * C190 + C4075 * C363) *
                C93680 +
            (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
             C4081 * C109 + C4075 * C115) *
                C188) *
               C93829) *
              C93639 * C93625 * C98 +
          (((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
             C4085 * C112 + C4077 * C118) *
                C188 +
            (C4081 * C191 + C4075 * C364 + C4083 * C192 + C4076 * C365 +
             C4085 * C193 + C4077 * C366) *
                C93680) *
               C93829 +
           ((C4081 * C1386 + C4075 * C1394 + C4083 * C1385 + C4076 * C1393 +
             C4085 * C2697 + C4077 * C2698) *
                C188 +
            (C4081 * C1468 + C4075 * C1600 + C4083 * C1467 + C4076 * C1599 +
             C4085 * C2770 + C4077 * C2942) *
                C93680) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
             C4085 * C110 + C4077 * C116) *
                C188 +
            (C4081 * C189 + C4075 * C362 + C4083 * C190 + C4076 * C363 +
             C4085 * C191 + C4077 * C364) *
                C93680) *
               C93829 +
           ((C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
             C4085 * C1386 + C4077 * C1394) *
                C188 +
            (C4081 * C1470 + C4075 * C1602 + C4083 * C1469 + C4076 * C1601 +
             C4085 * C1468 + C4077 * C1600) *
                C93680) *
               C93718) *
              C93639 * C800 -
          (((C8881 + C8882 + C8883) * C93680 + (C8884 + C8885 + C8886) * C188) *
               C93718 +
           ((C5245 + C5244 + C5243) * C93680 + (C5242 + C5241 + C5240) * C188) *
               C93829) *
              C93639 * C801 +
          (((C5251 + C5250 + C5249) * C188 + (C5248 + C5247 + C5246) * C93680) *
               C93829 +
           ((C4081 * C8520 + C4075 * C8523 + C4083 * C8521 + C4076 * C8524 +
             C4085 * C8522 + C4077 * C8525) *
                C188 +
            (C4081 * C8645 + C4075 * C8865 + C4083 * C8646 + C4076 * C8866 +
             C4085 * C8647 + C4077 * C8867) *
                C93680) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C14838 +
            (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
            C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
               C93829 +
           ((C20049 * C1388 + C93585 * C1396) * C14838 +
            (C20049 * C1470 + C93585 * C1602) * C14739 + C23109 * C14839 +
            C23108 * C14740 + C23107 * C14840 + C23106 * C14741) *
               C93718) *
              C93639 * C93625 * C97 -
          (((C20049 * C8646 + C93585 * C8866) * C14741 +
            (C20049 * C8521 + C93585 * C8524) * C14840 +
            (C20049 * C3492 + C93585 * C3640) * C14740 +
            (C20049 * C3410 + C93585 * C3414) * C14839 +
            (C20049 * C1469 + C93585 * C1601) * C14739 +
            (C20049 * C1387 + C93585 * C1395) * C14838) *
               C93718 +
           (C21835 * C14741 + C21834 * C14840 + C21833 * C14740 +
            C21832 * C14839 + (C20049 * C190 + C93585 * C363) * C14739 +
            (C20049 * C109 + C93585 * C115) * C14838) *
               C93829) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C14838 +
            (C20049 * C191 + C93585 * C364) * C14739 +
            (C20049 * C805 + C93585 * C813) * C14839 +
            (C20049 * C887 + C93585 * C1019) * C14740 +
            (C20049 * C810 + C93585 * C818) * C14840 +
            (C20049 * C892 + C93585 * C1024) * C14741) *
               C93829 +
           ((C20049 * C1386 + C93585 * C1394) * C14838 +
            (C20049 * C1468 + C93585 * C1600) * C14739 +
            (C20049 * C3411 + C93585 * C3415) * C14839 +
            (C20049 * C3493 + C93585 * C3641) * C14740 +
            (C20049 * C8522 + C93585 * C8525) * C14840 +
            (C20049 * C8647 + C93585 * C8867) * C14741) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C14838 +
            (C20049 * C189 + C93585 * C362) * C14739 + C20749 * C14839 +
            C20750 * C14740 + C20751 * C14840 + C20752 * C14741) *
               C93829 +
           ((C20049 * C1388 + C93585 * C1396) * C14838 +
            (C20049 * C1470 + C93585 * C1602) * C14739 + C23109 * C14839 +
            C23108 * C14740 + C23107 * C14840 + C23106 * C14741) *
               C93718) *
              C93639 * C800 -
          ((C23104 * C14741 + C23105 * C14840 + C23106 * C14740 +
            C23107 * C14839 + C23108 * C14739 + C23109 * C14838) *
               C93718 +
           (C20754 * C14741 + C20753 * C14840 + C20752 * C14740 +
            C20751 * C14839 + C20750 * C14739 + C20749 * C14838) *
               C93829) *
              C93639 * C801 +
          ((C20751 * C14838 + C20752 * C14739 + C20753 * C14839 +
            C20754 * C14740 + C20756 * C14840 + C20755 * C14741) *
               C93829 +
           (C23107 * C14838 + C23106 * C14739 + C23105 * C14839 +
            C23104 * C14740 + (C20049 * C22854 + C93585 * C22855) * C14840 +
            (C20049 * C22942 + C93585 * C23090) * C14741) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 + C448 * C4076 +
            C449 * C4077) *
               C93829 +
           ((C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C4075 +
            C3026 * C4076 + C3025 * C4077) *
               C93718) *
              C93639 * C93625 * C97 -
          ((C3024 * C4077 + C3025 * C4076 + C3026 * C4075) * C93718 +
           (C450 * C4077 + C449 * C4076 + C448 * C4075) * C93829) *
              C93639 * C93625 * C98 +
          ((C449 * C4075 + C450 * C4076 + C451 * C4077) * C93829 +
           (C3025 * C4075 + C3024 * C4076 +
            (C418 * C2697 + C3017 + C3017 + C93680 * C3009) * C4077) *
               C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C93680 * C419) * C4075 + C448 * C4076 +
            C449 * C4077) *
               C93829 +
           ((C418 * C1388 + C1669 + C1669 + C93680 * C1660) * C4075 +
            C3026 * C4076 + C3025 * C4077) *
               C93718) *
              C93639 * C800 -
          (((C418 * C3411 + C3716 + C3716 + C93680 * C3711) * C4077 +
            (C418 * C3410 + C3715 + C3715 + C93680 * C3710) * C4076 +
            (C418 * C3409 + C3714 + C3714 + C93680 * C3709) * C4075) *
               C93718 +
           (C2311 * C4077 + C2312 * C4076 +
            (C418 * C807 + C1088 + C1088 + C93680 * C1079) * C4075) *
               C93829) *
              C93639 * C801 +
          (((C418 * C808 + C1089 + C1089 + C93680 * C1080) * C4075 +
            (C418 * C809 + C1090 + C1090 + C93680 * C1081) * C4076 +
            (C418 * C810 + C1091 + C1091 + C93680 * C1082) * C4077) *
               C93829 +
           ((C418 * C8520 + C10580 + C10580 + C93680 * C8984) * C4075 +
            (C418 * C8521 + C10581 + C10581 + C93680 * C8985) * C4076 +
            (C418 * C8522 + C10582 + C10582 + C93680 * C8986) * C4077) *
               C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93585 * C93829 +
           (C15099 * C1388 + C16727 + C16727 + C14739 * C1660 + C15100 * C3409 +
            C16726 + C16726 + C14740 * C3709 + C15101 * C8520 + C16725 +
            C16725 + C14741 * C8984) *
               C93585 * C93718) *
              C93639 * C93625 * C97 -
          ((C18577 + C18578 + C18579) * C93585 * C93718 +
           (C15141 + C15140 + C15139) * C93585 * C93829) *
              C93639 * C93625 * C98 +
          ((C15144 + C15143 + C15142) * C93585 * C93829 +
           (C15099 * C1386 + C18568 + C18568 + C14739 * C1658 + C15100 * C3411 +
            C18569 + C18569 + C14740 * C3711 + C15101 * C8522 + C18570 +
            C18570 + C14741 * C8986) *
               C93585 * C93718) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15099 * C108 + C15103 + C15103 + C14739 * C419 + C15100 * C807 +
            C15104 + C15104 + C14740 * C1079 + C15101 * C808 + C15105 + C15105 +
            C14741 * C1080) *
               C93585 * C93829 +
           (C15099 * C1388 + C16727 + C16727 + C14739 * C1660 + C15100 * C3409 +
            C16726 + C16726 + C14740 * C3709 + C15101 * C8520 + C16725 +
            C16725 + C14741 * C8984) *
               C93585 * C93718) *
              C93639 * C800 -
          ((C15101 * C19095 + C19568 + C19568 + C14741 * C19563 +
            C15100 * C8520 + C19567 + C19567 + C14740 * C8984 + C15099 * C3409 +
            C19566 + C19566 + C14739 * C3709) *
               C93585 * C93718 +
           (C15101 * C4897 + C15969 + C15969 + C14741 * C5325 + C15100 * C808 +
            C15970 + C15970 + C14740 * C1080 + C15099 * C807 + C15971 + C15971 +
            C14739 * C1079) *
               C93585 * C93829) *
              C93639 * C801 +
          ((C15099 * C808 + C15972 + C15972 + C14739 * C1080 + C15100 * C4897 +
            C15973 + C15973 + C14740 * C5325 + C15101 * C15550 + C15974 +
            C15974 + C14741 * C15963) *
               C93585 * C93829 +
           (C15099 * C8520 + C24560 + C24560 + C14739 * C8984 +
            C15100 * C19095 + C24561 + C24561 + C14740 * C19563 +
            C15101 * C22854 + C24562 + C24562 + C14741 * C23175) *
               C93585 * C93718) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eeyz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C188 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C93680) *
               C4075 +
           ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
           C9928 * C4077) *
              C93639 * C93625 * C97 -
          (((C9924 + C9925) * C93680 + (C9681 + C9682) * C188) * C4077 +
           ((C9923 + C9922) * C93680 + (C9676 + C9675) * C188) * C4076 +
           ((C9921 + C9920) * C93680 + (C9672 + C9671) * C188) * C4075) *
              C93639 * C93625 * C98 +
          (C9928 * C4075 +
           ((C9682 + C9681) * C188 + (C9925 + C9924) * C93680) * C4076 +
           ((C9644 * C112 + C93829 * C280 + C9645 * C2697 + C93718 * C2856) *
                C188 +
            (C9644 * C193 + C93829 * C505 + C9645 * C2770 + C93718 * C3092) *
                C93680) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
                C188 +
            (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
                C93680) *
               C4075 +
           ((C9671 + C9672) * C188 + (C9920 + C9921) * C93680) * C4076 +
           C9928 * C4077) *
              C93639 * C800 -
          (((C9645 * C3493 + C93718 * C3785 + C9644 * C887 + C93829 * C1143) *
                C93680 +
            (C9645 * C3411 + C93718 * C3567 + C9644 * C805 + C93829 * C953) *
                C188) *
               C4077 +
           ((C9645 * C3492 + C93718 * C3784 + C9644 * C888 + C93829 * C1144) *
                C93680 +
            (C9645 * C3410 + C93718 * C3566 + C9644 * C806 + C93829 * C954) *
                C188) *
               C4076 +
           ((C9645 * C3491 + C93718 * C3783 + C9644 * C889 + C93829 * C1145) *
                C93680 +
            (C9645 * C3409 + C93718 * C3565 + C9644 * C807 + C93829 * C955) *
                C188) *
               C4075) *
              C93639 * C801 +
          (((C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
                C188 +
            (C9644 * C890 + C93829 * C1146 + C9645 * C8645 + C93718 * C9091) *
                C93680) *
               C4075 +
           ((C9644 * C809 + C93829 * C957 + C9645 * C8521 + C93718 * C8750) *
                C188 +
            (C9644 * C891 + C93829 * C1147 + C9645 * C8646 + C93718 * C9092) *
                C93680) *
               C4076 +
           ((C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
                C188 +
            (C9644 * C892 + C93829 * C1148 + C9645 * C8647 + C93718 * C9093) *
                C93680) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C14838 +
           (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
               C14739 +
           (C9644 * C807 + C93829 * C955 + C9645 * C3409 + C93718 * C3565) *
               C14839 +
           (C9644 * C889 + C93829 * C1145 + C9645 * C3491 + C93718 * C3783) *
               C14740 +
           (C9644 * C808 + C93829 * C956 + C9645 * C8520 + C93718 * C8749) *
               C14840 +
           (C9644 * C890 + C93829 * C1146 + C9645 * C8645 + C93718 * C9091) *
               C14741) *
              C93585 * C93639 * C93625 * C97 -
          ((C9645 * C8646 + C93718 * C9092 + C9644 * C891 + C93829 * C1147) *
               C14741 +
           (C9645 * C8521 + C93718 * C8750 + C9644 * C809 + C93829 * C957) *
               C14840 +
           (C12416 + C12417) * C14740 + (C12100 + C12101) * C14839 +
           (C9921 + C9920) * C14739 + (C9672 + C9671) * C14838) *
              C93585 * C93639 * C93625 * C98 +
          (C9683 * C14838 + C9926 * C14739 + (C12097 + C12096) * C14839 +
           (C12415 + C12414) * C14740 +
           (C9644 * C810 + C93829 * C958 + C9645 * C8522 + C93718 * C8751) *
               C14840 +
           (C9644 * C892 + C93829 * C1148 + C9645 * C8647 + C93718 * C9093) *
               C14741) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9644 * C108 + C93829 * C276 + C9645 * C1388 + C93718 * C1536) *
               C14838 +
           (C9644 * C189 + C93829 * C501 + C9645 * C1470 + C93718 * C1726) *
               C14739 +
           (C24395 + C24396) * C14839 + (C24649 + C24650) * C14740 +
           C24407 * C14840 + C24655 * C14741) *
              C93585 * C93639 * C800 -
          ((C24653 + C24654) * C14741 + (C24405 + C24406) * C14840 +
           (C24652 + C24651) * C14740 + (C24400 + C24399) * C14839 +
           (C24650 + C24649) * C14739 + (C24396 + C24395) * C14838) *
              C93585 * C93639 * C801 +
          (C24407 * C14838 + C24655 * C14739 + (C24406 + C24405) * C14839 +
           (C24654 + C24653) * C14740 +
           (C9644 * C15550 + C93829 * C15744 + C9645 * C22854 +
            C93718 * C23010) *
               C14840 +
           (C9644 * C15666 + C93829 * C16051 + C9645 * C22942 +
            C93718 * C23246) *
               C14741) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C9644 +
           (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
            C4085 * C278 + C4077 * C581) *
               C93829 +
           (C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
            C4085 * C1386 + C4077 * C1394) *
               C9645 +
           (C4081 * C1536 + C4075 * C1784 + C4083 * C1535 + C4076 * C1783 +
            C4085 * C1534 + C4077 * C1782) *
               C93718) *
              C93680 * C93639 * C93625 * C97 -
          ((C4085 * C1533 + C4077 * C1781 + C4083 * C1534 + C4076 * C1782 +
            C4081 * C1535 + C4075 * C1783) *
               C93718 +
           (C4085 * C1385 + C4077 * C1393 + C4083 * C1386 + C4076 * C1394 +
            C4081 * C1387 + C4075 * C1395) *
               C9645 +
           (C4085 * C279 + C4077 * C582 + C4083 * C278 + C4076 * C581 +
            C4081 * C277 + C4075 * C580) *
               C93829 +
           (C4085 * C111 + C4077 * C117 + C4083 * C110 + C4076 * C116 +
            C4081 * C109 + C4075 * C115) *
               C9644) *
              C93680 * C93639 * C93625 * C98 +
          ((C4081 * C110 + C4075 * C116 + C4083 * C111 + C4076 * C117 +
            C4085 * C112 + C4077 * C118) *
               C9644 +
           (C4081 * C278 + C4075 * C581 + C4083 * C279 + C4076 * C582 +
            C4085 * C280 + C4077 * C583) *
               C93829 +
           (C4081 * C1386 + C4075 * C1394 + C4083 * C1385 + C4076 * C1393 +
            C4085 * C2697 + C4077 * C2698) *
               C9645 +
           (C4081 * C1534 + C4075 * C1782 + C4083 * C1533 + C4076 * C1781 +
            C4085 * C2856 + C4077 * C3174) *
               C93718) *
              C93680 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4081 * C108 + C4075 * C114 + C4083 * C109 + C4076 * C115 +
            C4085 * C110 + C4077 * C116) *
               C9644 +
           (C4081 * C276 + C4075 * C579 + C4083 * C277 + C4076 * C580 +
            C4085 * C278 + C4077 * C581) *
               C93829 +
           (C4081 * C1388 + C4075 * C1396 + C4083 * C1387 + C4076 * C1395 +
            C4085 * C1386 + C4077 * C1394) *
               C9645 +
           (C4081 * C1536 + C4075 * C1784 + C4083 * C1535 + C4076 * C1783 +
            C4085 * C1534 + C4077 * C1782) *
               C93718) *
              C93680 * C93639 * C800 -
          ((C9205 + C9206 + C9207) * C93718 + (C8884 + C8885 + C8886) * C9645 +
           (C5521 + C5520 + C5519) * C93829 + (C5242 + C5241 + C5240) * C9644) *
              C93680 * C93639 * C801 +
          ((C5251 + C5250 + C5249) * C9644 + (C5524 + C5523 + C5522) * C93829 +
           (C4081 * C8520 + C4075 * C8523 + C4083 * C8521 + C4076 * C8524 +
            C4085 * C8522 + C4077 * C8525) *
               C9645 +
           (C4081 * C8749 + C4075 * C9195 + C4083 * C8750 + C4076 * C9196 +
            C4085 * C8751 + C4077 * C9197) *
               C93718) *
              C93680 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C9644 +
            (C20049 * C276 + C93585 * C579) * C93829 +
            (C20049 * C1388 + C93585 * C1396) * C9645 +
            (C20049 * C1536 + C93585 * C1784) * C93718) *
               C14739 +
           (C20749 * C9644 + C20933 * C93829 + C23109 * C9645 +
            C23329 * C93718) *
               C14740 +
           (C20751 * C9644 + C20934 * C93829 + C23107 * C9645 +
            C23328 * C93718) *
               C14741) *
              C93639 * C93625 * C97 -
          (((C20049 * C8750 + C93585 * C9196) * C93718 +
            (C20049 * C8521 + C93585 * C8524) * C9645 + C22050 * C93829 +
            C21834 * C9644) *
               C14741 +
           ((C20049 * C3566 + C93585 * C3854) * C93718 +
            (C20049 * C3410 + C93585 * C3414) * C9645 + C22049 * C93829 +
            C21832 * C9644) *
               C14740 +
           ((C20049 * C1535 + C93585 * C1783) * C93718 +
            (C20049 * C1387 + C93585 * C1395) * C9645 +
            (C20049 * C277 + C93585 * C580) * C93829 +
            (C20049 * C109 + C93585 * C115) * C9644) *
               C14739) *
              C93639 * C93625 * C98 +
          (((C20049 * C110 + C93585 * C116) * C9644 +
            (C20049 * C278 + C93585 * C581) * C93829 +
            (C20049 * C1386 + C93585 * C1394) * C9645 +
            (C20049 * C1534 + C93585 * C1782) * C93718) *
               C14739 +
           ((C20049 * C805 + C93585 * C813) * C9644 +
            (C20049 * C953 + C93585 * C1201) * C93829 +
            (C20049 * C3411 + C93585 * C3415) * C9645 +
            (C20049 * C3567 + C93585 * C3855) * C93718) *
               C14740 +
           ((C20049 * C810 + C93585 * C818) * C9644 +
            (C20049 * C958 + C93585 * C1206) * C93829 +
            (C20049 * C8522 + C93585 * C8525) * C9645 +
            (C20049 * C8751 + C93585 * C9197) * C93718) *
               C14741) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20049 * C108 + C93585 * C114) * C9644 +
            (C20049 * C276 + C93585 * C579) * C93829 +
            (C20049 * C1388 + C93585 * C1396) * C9645 +
            (C20049 * C1536 + C93585 * C1784) * C93718) *
               C14739 +
           (C24730 + C24731 + C24732 + C24733) * C14740 + C24744 * C14741) *
              C93639 * C800 -
          ((C24738 + C24739 + C24740 + C24741) * C14741 +
           (C24737 + C24736 + C24735 + C24734) * C14740 +
           (C24733 + C24732 + C24731 + C24730) * C14739) *
              C93639 * C801 +
          (C24744 * C14739 + (C24741 + C24740 + C24739 + C24738) * C14740 +
           (C20756 * C9644 + C20936 * C93829 +
            (C20049 * C22854 + C93585 * C22855) * C9645 +
            (C20049 * C23010 + C93585 * C23316) * C93718) *
               C14741) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C9644 +
            (C188 * C276 + C93680 * C635) * C93829 +
            (C188 * C1388 + C93680 * C1470) * C9645 +
            (C188 * C1536 + C93680 * C1842) * C93718) *
               C4075 +
           (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
              C93639 * C93625 * C97 -
          ((C10085 + C10086 + C10087 + C10088) * C4077 +
           (C10084 + C10083 + C10082 + C10081) * C4076 +
           (C10080 + C10079 + C10078 + C10077) * C4075) *
              C93639 * C93625 * C98 +
          (C10091 * C4075 + (C10088 + C10087 + C10086 + C10085) * C4076 +
           (C225 * C9644 + C657 * C93829 +
            (C188 * C2697 + C93680 * C2770) * C9645 +
            (C188 * C2856 + C93680 * C3241) * C93718) *
               C4077) *
              C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C93680 * C189) * C9644 +
            (C188 * C276 + C93680 * C635) * C93829 +
            (C188 * C1388 + C93680 * C1470) * C9645 +
            (C188 * C1536 + C93680 * C1842) * C93718) *
               C4075 +
           (C10077 + C10078 + C10079 + C10080) * C4076 + C10091 * C4077) *
              C93639 * C800 -
          (((C188 * C3567 + C93680 * C3925) * C93718 +
            (C188 * C3411 + C93680 * C3493) * C9645 + C2539 * C93829 +
            C2074 * C9644) *
               C4077 +
           ((C188 * C3566 + C93680 * C3924) * C93718 +
            (C188 * C3410 + C93680 * C3492) * C9645 + C2540 * C93829 +
            C2076 * C9644) *
               C4076 +
           ((C188 * C3565 + C93680 * C3923) * C93718 +
            (C188 * C3409 + C93680 * C3491) * C9645 +
            (C188 * C955 + C93680 * C1261) * C93829 +
            (C188 * C807 + C93680 * C889) * C9644) *
               C4075) *
              C93639 * C801 +
          (((C188 * C808 + C93680 * C890) * C9644 +
            (C188 * C956 + C93680 * C1262) * C93829 +
            (C188 * C8520 + C93680 * C8645) * C9645 +
            (C188 * C8749 + C93680 * C9305) * C93718) *
               C4075 +
           ((C188 * C809 + C93680 * C891) * C9644 +
            (C188 * C957 + C93680 * C1263) * C93829 +
            (C188 * C8521 + C93680 * C8646) * C9645 +
            (C188 * C8750 + C93680 * C9306) * C93718) *
               C4076 +
           ((C188 * C810 + C93680 * C892) * C9644 +
            (C188 * C958 + C93680 * C1264) * C93829 +
            (C188 * C8522 + C93680 * C8647) * C9645 +
            (C188 * C8751 + C93680 * C9307) * C93718) *
               C4077) *
              C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C9644 +
           (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
            C14840 * C956 + C14741 * C1262) *
               C93829 +
           (C14838 * C1388 + C14739 * C1470 + C14839 * C3409 + C14740 * C3491 +
            C14840 * C8520 + C14741 * C8645) *
               C9645 +
           (C14838 * C1536 + C14739 * C1842 + C14839 * C3565 + C14740 * C3923 +
            C14840 * C8749 + C14741 * C9305) *
               C93718) *
              C93585 * C93639 * C93625 * C97 -
          ((C18889 + C18890 + C18891) * C93718 +
           (C18259 + C18260 + C18261) * C9645 +
           (C15393 + C15392 + C15391) * C93829 +
           (C14868 + C14867 + C14866) * C9644) *
              C93585 * C93639 * C93625 * C98 +
          ((C14877 + C14876 + C14875) * C9644 +
           (C15396 + C15395 + C15394) * C93829 +
           (C14838 * C1386 + C14739 * C1468 + C14839 * C3411 + C14740 * C3493 +
            C14840 * C8522 + C14741 * C8647) *
               C9645 +
           (C14838 * C1534 + C14739 * C1840 + C14839 * C3567 + C14740 * C3925 +
            C14840 * C8751 + C14741 * C9307) *
               C93718) *
              C93585 * C93639 * C93625 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C14838 * C108 + C14739 * C189 + C14839 * C807 + C14740 * C889 +
            C14840 * C808 + C14741 * C890) *
               C9644 +
           (C14838 * C276 + C14739 * C635 + C14839 * C955 + C14740 * C1261 +
            C14840 * C956 + C14741 * C1262) *
               C93829 +
           (C14838 * C1388 + C14739 * C1470 + C14839 * C3409 + C14740 * C3491 +
            C14840 * C8520 + C14741 * C8645) *
               C9645 +
           (C14838 * C1536 + C14739 * C1842 + C14839 * C3565 + C14740 * C3923 +
            C14840 * C8749 + C14741 * C9305) *
               C93718) *
              C93585 * C93639 * C800 -
          ((C14840 * C19323 + C14741 * C19884 + C14839 * C8749 +
            C14740 * C9305 + C14838 * C3565 + C14739 * C3923) *
               C93718 +
           (C14840 * C19095 + C14741 * C19221 + C14839 * C8520 +
            C14740 * C8645 + C14838 * C3409 + C14739 * C3491) *
               C9645 +
           (C14840 * C5096 + C14741 * C5598 + C14839 * C956 + C14740 * C1262 +
            C14838 * C955 + C14739 * C1261) *
               C93829 +
           (C14840 * C4897 + C14741 * C5016 + C14839 * C808 + C14740 * C890 +
            C14838 * C807 + C14739 * C889) *
               C9644) *
              C93585 * C93639 * C801 +
          ((C14838 * C808 + C14739 * C890 + C14839 * C4897 + C14740 * C5016 +
            C14840 * C15550 + C14741 * C15666) *
               C9644 +
           (C14838 * C956 + C14739 * C1262 + C14839 * C5096 + C14740 * C5598 +
            C14840 * C15744 + C14741 * C16231) *
               C93829 +
           (C14838 * C8520 + C14739 * C8645 + C14839 * C19095 +
            C14740 * C19221 + C14840 * C22854 + C14741 * C22942) *
               C9645 +
           (C14838 * C8749 + C14739 * C9305 + C14839 * C19323 +
            C14740 * C19884 + C14840 * C23010 + C14741 * C23398) *
               C93718) *
              C93585 * C93639 * C802) *
         C93613) /
            (p * q * std::sqrt(p + q));
    d2eezz[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C93680 * C4075 +
                     (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                        C93639 * C93625 * C97 -
                    ((C10206 + C10207) * C93680 * C4077 +
                     (C10205 + C10204) * C93680 * C4076 +
                     (C10203 + C10202) * C93680 * C4075) *
                        C93639 * C93625 * C98 +
                    (C10209 * C4075 + (C10207 + C10206) * C93680 * C4076 +
                     (C10165 * C112 + C10188 + C10188 + C93829 * C718 +
                      C10166 * C2697 + C10189 + C10189 + C93718 * C3323) *
                         C93680 * C4077) *
                        C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C93680 * C4075 +
                     (C10202 + C10203) * C93680 * C4076 + C10209 * C4077) *
                        C93639 * C800 -
                    ((C10166 * C3411 + C10879 + C10879 + C93718 * C3995 +
                      C10165 * C805 + C10880 + C10880 + C93829 * C1317) *
                         C93680 * C4077 +
                     (C10166 * C3410 + C10881 + C10881 + C93718 * C3994 +
                      C10165 * C806 + C10882 + C10882 + C93829 * C1318) *
                         C93680 * C4076 +
                     (C10166 * C3409 + C10883 + C10883 + C93718 * C3993 +
                      C10165 * C807 + C10884 + C10884 + C93829 * C1319) *
                         C93680 * C4075) *
                        C93639 * C801 +
                    ((C10165 * C808 + C10885 + C10885 + C93829 * C1320 +
                      C10166 * C8520 + C10886 + C10886 + C93718 * C9406) *
                         C93680 * C4075 +
                     (C10165 * C809 + C10887 + C10887 + C93829 * C1321 +
                      C10166 * C8521 + C10888 + C10888 + C93718 * C9407) *
                         C93680 * C4076 +
                     (C10165 * C810 + C10889 + C10889 + C93829 * C1322 +
                      C10166 * C8522 + C10890 + C10890 + C93718 * C9408) *
                         C93680 * C4077) *
                        C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C14739 +
                     (C10165 * C807 + C10884 + C10884 + C93829 * C1319 +
                      C10166 * C3409 + C10883 + C10883 + C93718 * C3993) *
                         C14740 +
                     (C10165 * C808 + C10885 + C10885 + C93829 * C1320 +
                      C10166 * C8520 + C10886 + C10886 + C93718 * C9406) *
                         C14741) *
                        C93585 * C93639 * C93625 * C97 -
                    ((C10166 * C8521 + C10888 + C10888 + C93718 * C9407 +
                      C10165 * C809 + C10887 + C10887 + C93829 * C1321) *
                         C14741 +
                     (C12746 + C12747) * C14740 + (C10203 + C10202) * C14739) *
                        C93585 * C93639 * C93625 * C98 +
                    (C10208 * C14739 + (C12745 + C12744) * C14740 +
                     (C10165 * C810 + C10889 + C10889 + C93829 * C1322 +
                      C10166 * C8522 + C10890 + C10890 + C93718 * C9408) *
                         C14741) *
                        C93585 * C93639 * C93625 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C10165 * C108 + C10168 + C10168 + C93829 * C714 +
                      C10166 * C1388 + C10169 + C10169 + C93718 * C1900) *
                         C14739 +
                     (C24921 + C24922) * C14740 + C24927 * C14741) *
                        C93585 * C93639 * C800 -
                    ((C24925 + C24926) * C14741 + (C24924 + C24923) * C14740 +
                     (C24922 + C24921) * C14739) *
                        C93585 * C93639 * C801 +
                    (C24927 * C14739 + (C24926 + C24925) * C14740 +
                     (C10165 * C15550 + C24907 + C24907 + C93829 * C16307 +
                      C10166 * C22854 + C24908 + C24908 + C93718 * C23465) *
                         C14741) *
                        C93585 * C93639 * C802) *
                   C93613) /
                      (p * q * std::sqrt(p + q));
}
