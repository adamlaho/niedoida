/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_dsdd_AC_yx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2022_13_21(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C30233 = 0 * ce;
    const double C30232 = ce * de;
    const double C30231 = 0 * de;
    const double C30230 = 0 * de;
    const double C30229 = ce + de;
    const double C30228 = 0 * de;
    const double C30227 = xC - xD;
    const double C30288 = 0 * de;
    const double C30353 = ae * be;
    const double C30352 = 0 * be;
    const double C30351 = yA - yB;
    const double C30350 = ae + be;
    const double C30372 = yP - yQ;
    const double C30371 = p + q;
    const double C30370 = p * q;
    const double C30369 = xP - xQ;
    const double C30377 = bs[3];
    const double C30388 = bs[4];
    const double C30396 = bs[5];
    const double C30415 = bs[6];
    const double C30445 = bs[7];
    const double C30571 = zP - zQ;
    const double C30787 = bs[2];
    const double C119 = bs[0];
    const double C31179 = xA - xB;
    const double C31201 = yC - yD;
    const double C31213 = zC - zD;
    const double C31392 = zA - zB;
    const double C30240 = C30233 / C30229;
    const double C30237 = C30231 / C30229;
    const double C30235 = 2 * C30229;
    const double C30234 = std::pow(C30229, 2);
    const double C30239 = C30232 * C30227;
    const double C30238 = C30227 * C30231;
    const double C30236 = C30227 * C30230;
    const double C31151 = C30227 * de;
    const double C31150 = C30227 * ce;
    const double C31149 = std::pow(C30227, 2);
    const double C30289 = C30288 / C30229;
    const double C30355 = C30353 * C30351;
    const double C31379 = std::pow(C30351, 2);
    const double C31489 = C30351 * be;
    const double C30354 = 2 * C30350;
    const double C30380 = C30229 * C30350;
    const double C140 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (yP - yQ) * (xP - xQ) * ae * ce) /
                         C30229) /
                        C30350;
    const double C31468 = std::pow(C30350, 2);
    const double C30378 = C30372 * ae;
    const double C30583 = std::pow(C30372, 2);
    const double C30373 = 2 * C30370;
    const double C30379 = C30372 * C30369;
    const double C30398 = std::pow(C30369, 2);
    const double C30479 = C30369 * ce;
    const double C30608 = std::pow(C30571, 2);
    const double C31180 = std::pow(C31179, 2);
    const double C31467 = C31179 * be;
    const double C31202 = std::pow(C31201, 2);
    const double C31257 = C31201 * de;
    const double C31255 = C31201 * ce;
    const double C31214 = std::pow(C31213, 2);
    const double C31297 = C31213 * de;
    const double C31295 = C31213 * ce;
    const double C31393 = std::pow(C31392, 2);
    const double C31490 = C31392 * be;
    const double C31163 = std::pow(C30235, -1);
    const double C31462 = std::pow(C30235, -2);
    const double C30241 = 2 * C30234;
    const double C31466 = C30234 * C30235;
    const double C31465 = 4 * C30234;
    const double C30243 = C30238 / C30229;
    const double C30242 = C30236 / C30229;
    const double C31455 = std::pow(C31150, 2);
    const double C31152 = C31149 * C30232;
    const double C31380 = C31379 * C30353;
    const double C31470 = std::pow(C30354, -2);
    const double C31469 = std::pow(C30354, -1);
    const double C30382 = C30377 * C30378;
    const double C30390 = C30388 * C30378;
    const double C30401 = C30396 * C30378;
    const double C30421 = C30415 * C30378;
    const double C30453 = C30445 * C30378;
    const double C30374 = C30373 / C30371;
    const double C126 = (-(bs[1] * C30378 * C30373) / C30371) / C30350;
    const double C120 = -(C30369 * bs[1] * C30373) / C30371;
    const double C297 = -(C30372 * bs[1] * C30373) / C30371;
    const double C486 = -(C30571 * bs[1] * C30373) / C30371;
    const double C30383 = C30379 * ae;
    const double C30482 = C30388 * C30479;
    const double C30486 = C30396 * C30479;
    const double C30496 = C30377 * C30479;
    const double C30509 = C30415 * C30479;
    const double C30529 = C30445 * C30479;
    const double C127 = (bs[1] * C30479 * C30373) / (C30371 * C30229);
    const double C31181 = C31180 * C30353;
    const double C31203 = C31202 * C30232;
    const double C31471 = std::pow(C31255, 2);
    const double C31215 = C31214 * C30232;
    const double C31473 = std::pow(C31295, 2);
    const double C31394 = C31393 * C30353;
    const double C30250 = C30231 / C30241;
    const double C30247 = C30230 / C30241;
    const double C30246 = C30228 / C30241;
    const double C31500 = 4 * C31466;
    const double C31499 = C30229 * C31465;
    const double C30248 = 0 - C30243;
    const double C30245 = 0 - C30242;
    const double C31153 = C31152 / C30229;
    const double C31381 = C31380 / C30350;
    const double C30376 = -C30374;
    const double C30387 = std::pow(C30374, 4);
    const double C30414 = std::pow(C30374, 6);
    const double C141 =
        (-(C30369 * std::pow(-C30374, 3) * bs[3] * C30372 * C30369 * ae * ce) /
         C30229) /
            C30350 -
        (std::pow(C30374, 2) * bs[2] * C30372 * ae * ce) / (C30229 * C30350);
    const double C30788 = std::pow(C30374, 2);
    const double C128 =
        (C30369 * std::pow(C30374, 2) * bs[2] * C30378) / C30350;
    const double C129 =
        (ce * bs[1] * C30373) / (C30371 * C30229) -
        (C30369 * std::pow(C30374, 2) * bs[2] * C30479) / C30229;
    const double C30385 = C30383 * ce;
    const double C31182 = C31181 / C30350;
    const double C31204 = C31203 / C30229;
    const double C31216 = C31215 / C30229;
    const double C31395 = C31394 / C30350;
    const double C30253 = C30248 * ce;
    const double C30252 = C30245 * ce;
    const double C31154 = -C31153;
    const double C31382 = -C31381;
    const double C30381 = std::pow(C30376, 3);
    const double C30395 = std::pow(C30376, 5);
    const double C30444 = std::pow(C30376, 7);
    const double C30392 = C30387 * C30390;
    const double C30483 = C30388 * C30387;
    const double C30484 = C30387 * C30482;
    const double C30424 = C30414 * C30421;
    const double C30514 = C30414 * C30509;
    const double C30530 = C30415 * C30414;
    const double C30789 = C30787 * C30788;
    const double C307 = -(C30372 * C30788 * C30787 * C30479) / C30229;
    const double C308 = (C30372 * C30788 * C30787 * C30378) / C30350 -
                        (ae * bs[1] * C30373) / (C30371 * C30350);
    const double C496 = -(C30571 * C30788 * C30787 * C30479) / C30229;
    const double C497 = (C30571 * C30788 * C30787 * C30378) / C30350;
    const double C30389 = C30388 * C30385;
    const double C30399 = C30396 * C30385;
    const double C30418 = C30415 * C30385;
    const double C30450 = C30445 * C30385;
    const double C31183 = -C31182;
    const double C31205 = -C31204;
    const double C31217 = -C31216;
    const double C31396 = -C31395;
    const double C30257 = C30253 / C30229;
    const double C30256 = C30252 / C30229;
    const double C31155 = std::exp(C31154);
    const double C31383 = std::exp(C31382);
    const double C30384 = C30381 * C30382;
    const double C30480 = C30377 * C30381;
    const double C30497 = C30381 * C30496;
    const double C326 =
        (-(C30372 * C30381 * C30377 * C30385) / C30229) / C30350 -
        (ae * std::pow(C30374, 2) * bs[2] * C30369 * ce) / C30380;
    const double C515 =
        (-((zP - zQ) * C30381 * C30377 * C30385) / C30229) / C30350;
    const double C30403 = C30395 * C30401;
    const double C30489 = C30396 * C30395;
    const double C30490 = C30395 * C30486;
    const double C30457 = C30444 * C30453;
    const double C30534 = C30444 * C30529;
    const double C30397 = C30392 * ce;
    const double C30394 = C30369 * C30392;
    const double C30868 = C30372 * C30392;
    const double C30488 = C30369 * C30483;
    const double C30487 = C30483 * ce;
    const double C30795 = C30483 * C30398;
    const double C30871 = C30483 * C30583;
    const double C30945 = C30372 * C30483;
    const double C30944 = C30483 * ae;
    const double C31129 = C30483 * C30608;
    const double C31132 = C30571 * C30483;
    const double C30499 = C30369 * C30484;
    const double C30582 = ae * C30484;
    const double C30580 = C30372 * C30484;
    const double C30427 = C30424 * C30398;
    const double C30446 = C30424 * ce;
    const double C30442 = C30369 * C30424;
    const double C30958 = C30372 * C30424;
    const double C31024 = C30424 * C30608;
    const double C30517 = C30369 * C30514;
    const double C30640 = C30514 * C30583;
    const double C30664 = ae * C30514;
    const double C30662 = C30372 * C30514;
    const double C30710 = C30514 * C30608;
    const double C30749 = C30571 * C30514;
    const double C30537 = C30530 * C30398;
    const double C30536 = C30369 * C30530;
    const double C30535 = C30530 * ce;
    const double C30962 = C30530 * C30583;
    const double C121 = C30789 * C30398 - (bs[1] * C30373) / C30371;
    const double C296 = C30372 * C30369 * C30789;
    const double C301 = C30789 * C30583 - (bs[1] * C30373) / C30371;
    const double C485 = C30571 * C30369 * C30789;
    const double C490 = C30789 * C30608 - (bs[1] * C30373) / C30371;
    const double C935 = C30571 * C30372 * C30789;
    const double C30391 = C30387 * C30389;
    const double C30402 = C30395 * C30399;
    const double C30423 = C30414 * C30418;
    const double C30456 = C30444 * C30450;
    const double C31184 = std::exp(C31183);
    const double C31206 = std::exp(C31205);
    const double C31218 = std::exp(C31217);
    const double C31397 = std::exp(C31396);
    const double C30261 = C30257 - C30247;
    const double C30260 = C30256 - C30246;
    const double C30244 = C30239 * C31155;
    const double C31157 = C31155 * C31150;
    const double C31156 = C31155 / C30235;
    const double C31165 = C31163 * C31155;
    const double C31458 = C31155 * C31151;
    const double C31497 = C31462 * C31155;
    const double C31491 = C31155 * C31455;
    const double C151 = C31383 * C141;
    const double C149 = C31383 * C128;
    const double C9151 = C31383 * C497;
    const double C30356 = C30355 * C31383;
    const double C113 = -(2 * ae * be * (yA - yB) * C31383) / (ae + be);
    const double C31521 = C31383 * C31489;
    const double C4759 =
        (C31383 * std::pow(C31489, 2)) / C31468 + C31383 / C30354;
    const double C4761 = C31470 * C31383;
    const double C13437 = C31469 * C31383;
    const double C142 =
        (-(C30369 * C30384 * ce) / C30229) / C30350 -
        (C30381 * C30377 * C30385) / C30380 +
        C30369 * ((-(C30369 * std::pow(C30374, 4) * bs[4] * C30385) / C30229) /
                      C30350 -
                  (C30384 * ce) / C30380);
    const double C130 =
        (std::pow(C30374, 2) * bs[2] * C30378 + C30384 * C30398) / C30350;
    const double C132 =
        (2 * C30369 * C30384 + C30369 * (C30384 + C30392 * C30398)) / C30350;
    const double C306 =
        (C30372 * C30369 * C30384 + C30369 * C30789 * ae) / C30350;
    const double C316 =
        (C30788 * C30787 * C30378 + C30372 * (C30372 * C30384 + C30789 * ae) +
         C30372 * C30789 * ae) /
        C30350;
    const double C495 = (C30571 * C30369 * C30384) / C30350;
    const double C499 = (C30571 * (C30384 + C30392 * C30398)) / C30350;
    const double C505 = (C30788 * C30787 * C30378 + C30384 * C30608) / C30350;
    const double C940 = (C30571 * (C30372 * C30384 + C30789 * ae)) / C30350;
    const double C2026 =
        (2 * C30571 * C30384 + C30571 * (C30384 + C30392 * C30608)) / C30350;
    const double C30500 = C30480 * ce;
    const double C30794 = C30369 * C30480;
    const double C30870 = C30372 * C30480;
    const double C30869 = C30480 * ae;
    const double C310 = (C30372 * (C30384 + C30392 * C30398) +
                         (C30789 + C30480 * C30398) * ae) /
                        C30350;
    const double C1172 =
        (2 * (C30372 * C30384 + C30789 * ae) +
         C30372 * (C30384 + C30372 * (C30372 * C30392 + C30480 * ae) +
                   C30372 * C30480 * ae) +
         (C30789 + C30480 * C30583) * ae) /
        C30350;
    const double C122 =
        2 * C30369 * C30789 + C30369 * (C30789 + C30480 * C30398);
    const double C298 = C30372 * (C30789 + C30480 * C30398);
    const double C487 = C30571 * (C30789 + C30480 * C30398);
    const double C1163 =
        2 * C30372 * C30789 + C30372 * (C30789 + C30480 * C30583);
    const double C1300 = C30571 * (C30789 + C30480 * C30583);
    const double C2017 =
        2 * C30571 * C30789 + C30571 * (C30789 + C30480 * C30608);
    const double C2018 =
        3 * (C30789 + C30480 * C30608) +
        C30571 * (2 * C30571 * C30480 + C30571 * (C30480 + C30483 * C30608));
    const double C131 = -(C30369 * (C30369 * C30497 + C30789 * ce) +
                          C30788 * C30787 * C30479 + C30369 * C30789 * ce) /
                        C30229;
    const double C309 = -(C30372 * (C30369 * C30497 + C30789 * ce)) / C30229;
    const double C317 = -(C30497 * C30583 + C30788 * C30787 * C30479) / C30229;
    const double C498 = -(C30571 * (C30369 * C30497 + C30789 * ce)) / C30229;
    const double C506 = -(C30497 * C30608 + C30788 * C30787 * C30479) / C30229;
    const double C941 = -(C30571 * C30372 * C30497) / C30229;
    const double C1171 = (-2 * C30372 * C30497) / C30229 -
                         (C30372 * (C30484 * C30583 + C30497)) / C30229;
    const double C1314 = -(C30571 * (C30484 * C30583 + C30497)) / C30229;
    const double C2025 = (-2 * C30571 * C30497) / C30229 -
                         (C30571 * (C30484 * C30608 + C30497)) / C30229;
    const double C9153 = C31383 * C515;
    const double C30405 = C30403 * C30398;
    const double C30416 = C30403 * ce;
    const double C30412 = C30369 * C30403;
    const double C30943 = C30372 * C30403;
    const double C31020 = C30403 * C30608;
    const double C31023 = C30571 * C30403;
    const double C2027 =
        (3 * (C30384 + C30392 * C30608) +
         C30571 * (2 * C30571 * C30392 + C30571 * (C30392 + C30403 * C30608))) /
        C30350;
    const double C30491 = C30489 * C30398;
    const double C30511 = C30369 * C30489;
    const double C30510 = C30489 * ce;
    const double C30946 = C30489 * C30583;
    const double C30960 = C30372 * C30489;
    const double C30959 = C30489 * ae;
    const double C31133 = C30489 * C30608;
    const double C30492 = C30369 * C30490;
    const double C30586 = C30490 * C30583;
    const double C30639 = ae * C30490;
    const double C30637 = C30372 * C30490;
    const double C30700 = C30571 * C30490;
    const double C31017 = C30490 * C30608;
    const double C2028 =
        (-3 * (C30484 * C30608 + C30497)) / C30229 +
        C30571 * ((-2 * C30571 * C30484) / C30229 -
                  (C30571 * (C30490 * C30608 + C30484)) / C30229);
    const double C30460 = C30457 * C30398;
    const double C30538 = C30369 * C30534;
    const double C30666 = C30534 * C30583;
    const double C30400 = C30397 / C30380;
    const double C507 = (C30369 * C30384 + C30394 * C30608) / C30350;
    const double C30504 = C30488 * ce;
    const double C30799 = 2 * C30488;
    const double C30878 = C30372 * C30488;
    const double C30877 = C30488 * ae;
    const double C30796 = C30480 + C30795;
    const double C30873 = C30480 + C30871;
    const double C30950 = 2 * C30945;
    const double C30948 = C30945 * ae;
    const double C31130 = C30480 + C31129;
    const double C31134 = 2 * C31132;
    const double C30585 = C30582 / C30380;
    const double C1308 = -(C30580 * C30608 + C30372 * C30497) / C30229;
    const double C30430 = C30403 + C30427;
    const double C30451 = C30446 / C30380;
    const double C30452 = 2 * C30442;
    const double C30449 = C30442 * ce;
    const double C30986 = C30372 * C30442;
    const double C31038 = C30442 * C30608;
    const double C31026 = C30403 + C31024;
    const double C30645 = C30640 + C30490;
    const double C30670 = C30664 / C30380;
    const double C30672 = -2 * C30662;
    const double C30668 = ae * C30662;
    const double C30746 = C30571 * C30662;
    const double C31047 = C30662 * C30608;
    const double C30712 = C30710 + C30490;
    const double C30752 = ae * C30749;
    const double C30540 = C30489 + C30537;
    const double C30539 = C30536 * ce;
    const double C30989 = C30536 * C30583;
    const double C30966 = C30489 + C30962;
    const double C143 =
        2 * ((-(C30369 * C30391) / C30229) / C30350 - (C30384 * ce) / C30380) -
        ((C30384 + C30392 * std::pow(C30369, 2)) * ce) / C30380 +
        C30369 *
            ((-(C30369 * C30392 * ce) / C30229) / C30350 - C30391 / C30380 +
             C30369 *
                 ((-(C30369 * std::pow(C30376, 5) * bs[5] * C30385) / C30229) /
                      C30350 -
                  (C30392 * ce) / C30380));
    const double C327 = C30372 * ((-(C30369 * C30391) / C30229) / C30350 -
                                  (C30384 * ce) / C30380) -
                        (ae * (C30369 * C30381 * C30377 * C30369 * ce +
                               bs[2] * std::pow(C30374, 2) * ce)) /
                            C30380;
    const double C331 = (-(ae * C30372 * C30497) / C30229) / C30350 -
                        (C30381 * C30377 * C30385) / C30380 +
                        C30372 * ((-(C30372 * C30391) / C30229) / C30350 -
                                  (ae * C30497) / C30380);
    const double C516 = (zP - zQ) * ((-(C30369 * C30391) / C30229) / C30350 -
                                     (C30384 * ce) / C30380);
    const double C520 = (-(C30391 * std::pow(zP - zQ, 2)) / C30229) / C30350 -
                        (C30381 * C30377 * C30385) / C30380;
    const double C950 = (-(C30372 * C30571 * C30391) / C30229) / C30350 -
                        (ae * C30571 * C30497) / C30380;
    const double C30404 = C30369 * C30402;
    const double C30413 = C30402 / C30380;
    const double C30581 = C30372 * C30402;
    const double C30620 = C30571 * C30402;
    const double C1181 =
        2 * ((-(C30372 * C30391) / C30229) / C30350 - (ae * C30497) / C30380) -
        (ae * (C30484 * std::pow(C30372, 2) + C30497)) / C30380 +
        C30372 *
            ((-(ae * C30372 * C30484) / C30229) / C30350 - C30391 / C30380 +
             C30372 * ((-(C30372 * C30402) / C30229) / C30350 -
                       (ae * C30484) / C30380));
    const double C1324 =
        C30372 * ((-(C30402 * C30608) / C30229) / C30350 - C30391 / C30380) -
        (ae * (C30484 * C30608 + C30497)) / C30380;
    const double C1327 =
        (-(ae * C30571 * C30580) / C30229) / C30350 -
        (C30571 * C30391) / C30380 +
        C30372 * ((-(C30372 * C30571 * C30402) / C30229) / C30350 -
                  (ae * C30571 * C30484) / C30380);
    const double C2035 =
        (-2 * C30571 * C30391) / C30380 +
        C30571 * ((-(C30402 * C30608) / C30229) / C30350 - C30391 / C30380);
    const double C30426 = C30369 * C30423;
    const double C30443 = C30423 / C30380;
    const double C30638 = C30372 * C30423;
    const double C30693 = C30423 * C30608;
    const double C30699 = C30571 * C30423;
    const double C30459 = C30369 * C30456;
    const double C30663 = C30372 * C30456;
    const double C30709 = C30456 * C30608;
    const double C30748 = C30571 * C30456;
    const double C31501 = C31184 * C31467;
    const double C108 =
        (C31184 * std::pow(C31467, 2)) / C31468 + C31184 / C30354;
    const double C110 = C31470 * C31184;
    const double C13439 = C31469 * C31184;
    const double C31256 = C31206 / C30235;
    const double C31258 = C31206 * C31255;
    const double C31265 = C31163 * C31206;
    const double C31477 = C31206 * C31257;
    const double C31504 = C31462 * C31206;
    const double C31502 = C31206 * C31471;
    const double C31296 = C31218 / C30235;
    const double C31298 = C31218 * C31295;
    const double C31305 = C31163 * C31218;
    const double C31483 = C31218 * C31297;
    const double C31507 = C31462 * C31218;
    const double C31505 = C31218 * C31473;
    const double C31522 = C31397 * C31490;
    const double C8926 =
        (C31397 * std::pow(C31490, 2)) / C31468 + C31397 / C30354;
    const double C8928 = C31470 * C31397;
    const double C19131 = C31469 * C31397;
    const double C30266 = C30261 / C30235;
    const double C30265 = C30227 * C30261;
    const double C30264 = C30260 + C30237;
    const double C30251 = C30244 / C30234;
    const double C30249 = 2 * C30244;
    const double C31158 = C31157 * C31151;
    const double C31164 = C31157 / C30241;
    const double C31459 = C31163 * C31157;
    const double C31457 = C31157 / C30229;
    const double C287 = (C31155 * std::pow(C31151, 2)) / C30234 + C31156;
    const double C31166 = C31165 * C31151;
    const double C31463 = C31150 * C31165;
    const double C31461 = 2 * C31165;
    const double C31508 = C31165 / C31465;
    const double C106 = C31165 / C31500;
    const double C2901 = C31165 / C30235;
    const double C31493 = C31458 / C30229;
    const double C288 = (-2 * C31163 * C31458) / C30229;
    const double C31523 = C31491 / C30234;
    const double C30357 = 2 * C30356;
    const double C152 = C113 * C121;
    const double C150 = C113 * C129;
    const double C148 = C113 * C120;
    const double C337 = C113 * C296;
    const double C526 = C113 * C485;
    const double C9158 = C113 * C490;
    const double C9152 = C113 * C496;
    const double C9150 = C113 * C486;
    const double C9552 = C113 * C935;
    const double C4760 = (-2 * C31469 * C31521) / C30350;
    const double C13436 = -C31521 / C30350;
    const double C155 = C31383 * C142;
    const double C153 = C31383 * C130;
    const double C157 = C31383 * C132;
    const double C338 = C31383 * C306;
    const double C13444 = C13437 * C306;
    const double C527 = C31383 * C495;
    const double C531 = C31383 * C499;
    const double C9159 = C31383 * C505;
    const double C9553 = C31383 * C940;
    const double C25020 = C13437 * C940;
    const double C9170 = C31383 * C2026;
    const double C30501 = C30499 + C30500;
    const double C318 =
        (C30369 * C30384 + C30372 * (C30372 * C30394 + C30794 * ae) +
         C30372 * C30794 * ae) /
        C30350;
    const double C942 = (C30571 * (C30372 * C30394 + C30794 * ae)) / C30350;
    const double C302 = C30369 * C30789 + C30794 * C30583;
    const double C491 = C30369 * C30789 + C30794 * C30608;
    const double C936 = C30571 * C30372 * C30794;
    const double C1162 =
        2 * C30372 * C30794 + C30372 * (C30794 + C30488 * C30583);
    const double C1299 = C30571 * (C30794 + C30488 * C30583);
    const double C2016 =
        2 * C30571 * C30794 + C30571 * (C30794 + C30488 * C30608);
    const double C1297 = C30372 * C30789 + C30870 * C30608;
    const double C2417 =
        2 * C30571 * C30870 + C30571 * (C30870 + C30945 * C30608);
    const double C30872 = C30868 + C30869;
    const double C342 = C31383 * C310;
    const double C13454 = C13437 * C310;
    const double C156 = C113 * C122;
    const double C341 = C113 * C298;
    const double C530 = C113 * C487;
    const double C9869 = C113 * C1300;
    const double C9169 = C113 * C2017;
    const double C10602 = C113 * C2018;
    const double C154 = C113 * C131;
    const double C339 = C113 * C309;
    const double C528 = C113 * C498;
    const double C9160 = C113 * C506;
    const double C9550 = C113 * C941;
    const double C9871 = C113 * C1314;
    const double C9167 = C113 * C2025;
    const double C30407 = C30392 + C30405;
    const double C30419 = C30416 / C30380;
    const double C30420 = 2 * C30412;
    const double C30417 = C30412 * ce;
    const double C30876 = C30372 * C30412;
    const double C1170 =
        (2 * (C30372 * C30394 + C30794 * ae) +
         C30372 * (C30394 + C30372 * (C30372 * C30412 + C30488 * ae) +
                   C30372 * C30488 * ae) +
         (C30794 + C30488 * C30583) * ae) /
        C30350;
    const double C2024 =
        (2 * C30571 * C30394 + C30571 * (C30394 + C30412 * C30608)) / C30350;
    const double C2029 =
        (3 * (C30394 + C30412 * C30608) +
         C30571 * (2 * C30571 * C30412 + C30571 * (C30412 + C30442 * C30608))) /
        C30350;
    const double C30947 = C30943 + C30944;
    const double C31021 = C30392 + C31020;
    const double C31025 = 2 * C31023;
    const double C10603 = C31383 * C2027;
    const double C30493 = C30483 + C30491;
    const double C30515 = C30511 * ce;
    const double C30531 = 2 * C30511;
    const double C30879 = C30511 * C30583;
    const double C30988 = C30372 * C30511;
    const double C30987 = C30511 * ae;
    const double C31140 = C30511 * C30608;
    const double C2019 =
        3 * (C30794 + C30488 * C30608) +
        C30571 * (2 * C30571 * C30488 + C30571 * (C30488 + C30511 * C30608));
    const double C30518 = C30517 + C30510;
    const double C30949 = C30483 + C30946;
    const double C30967 = 2 * C30960;
    const double C30965 = C30960 * ae;
    const double C31143 = C30960 * C30608;
    const double C6267 =
        3 * (C30870 + C30945 * C30608) +
        C30571 * (2 * C30571 * C30945 + C30571 * (C30945 + C30960 * C30608));
    const double C30964 = C30958 + C30959;
    const double C31135 = C30483 + C31133;
    const double C30494 = C30492 + C30487;
    const double C30588 = C30586 + C30484;
    const double C30643 = C30639 / C30380;
    const double C30644 = -2 * C30637;
    const double C30641 = ae * C30637;
    const double C2421 = (-2 * C30571 * C30580) / C30229 -
                         (C30571 * (C30637 * C30608 + C30580)) / C30229;
    const double C6273 =
        (-3 * (C30637 * C30608 + C30580)) / C30229 +
        C30571 * ((-2 * C30571 * C30637) / C30229 -
                  (C30571 * (C30662 * C30608 + C30637)) / C30229);
    const double C30702 = ae * C30700;
    const double C31030 = -2 * C30700;
    const double C31018 = C31017 + C30484;
    const double C10604 = C113 * C2028;
    const double C30463 = C30424 + C30460;
    const double C30541 = C30538 + C30535;
    const double C30673 = C30666 + C30514;
    const double C539 = C31383 * C507;
    const double C1296 = C30372 * C30794 + C30878 * C30608;
    const double C123 = 3 * (C30789 + C30480 * C30398) +
                        C30369 * (2 * C30794 + C30369 * C30796);
    const double C299 = C30372 * (2 * C30794 + C30369 * C30796);
    const double C303 = C30789 + C30480 * C30398 + C30796 * C30583;
    const double C488 = C30571 * (2 * C30794 + C30369 * C30796);
    const double C492 = C30789 + C30480 * C30398 + C30796 * C30608;
    const double C937 = C30571 * C30372 * C30796;
    const double C1164 = 3 * (C30789 + C30480 * C30583) +
                         C30372 * (2 * C30870 + C30372 * C30873);
    const double C1301 = C30789 + C30480 * C30583 + C30873 * C30608;
    const double C1713 = C30571 * (2 * C30870 + C30372 * C30873);
    const double C10592 =
        4 * (2 * C30571 * C30480 + C30571 * C31130) +
        C30571 * (3 * C31130 + C30571 * (2 * C30571 * C30483 +
                                         C30571 * (C30483 + C30489 * C30608)));
    const double C9558 = C113 * C1308;
    const double C30433 = C30369 * C30430;
    const double C30447 = 3 * C30430;
    const double C30441 = C30430 * ce;
    const double C30884 = C30372 * C30430;
    const double C30455 = C30449 / C30229;
    const double C31039 = C30412 + C31038;
    const double C31027 = C30571 * C31026;
    const double C30649 = C30372 * C30645;
    const double C30665 = -3 * C30645;
    const double C30661 = ae * C30645;
    const double C30677 = C30672 / C30229;
    const double C30675 = C30668 / C30229;
    const double C30750 = ae * C30746;
    const double C31048 = C31047 + C30637;
    const double C30714 = ae * C30712;
    const double C31031 = C30571 * C30712;
    const double C30755 = C30752 / C30380;
    const double C30543 = C30369 * C30540;
    const double C30542 = C30540 * ce;
    const double C30887 = C30540 * C30583;
    const double C30992 = C30511 + C30989;
    const double C30969 = C30372 * C30966;
    const double C159 = C31383 * C143;
    const double C340 = C31383 * C327;
    const double C13448 = C13437 * C327;
    const double C529 = C31383 * C516;
    const double C9161 = C31383 * C520;
    const double C9551 = C31383 * C950;
    const double C25024 = C13437 * C950;
    const double C30406 = C30404 / C30229;
    const double C1328 =
        (-(C30402 * C30608) / C30229) / C30350 - C30391 / C30380 -
        (ae * (C30372 * C30490 * C30608 + C30580)) / C30380 +
        C30372 * (C30372 * ((-(C30423 * C30608) / C30229) / C30350 - C30413) -
                  (ae * (C30490 * C30608 + C30484)) / C30380);
    const double C30584 = C30581 / C30229;
    const double C2036 =
        3 * ((-(C30402 * C30608) / C30229) / C30350 - C30391 / C30380) +
        C30571 * ((-2 * C30620) / C30380 +
                  C30571 * ((-(C30423 * C30608) / C30229) / C30350 - C30413));
    const double C2426 =
        (((-2 * C30571 * C30484) / C30229 -
          (C30571 * (C30490 * C30608 + C30484)) / C30229) *
         ae) /
            C30350 +
        C30372 * ((-2 * C30620) / C30380 +
                  C30571 * ((-(C30423 * C30608) / C30229) / C30350 - C30413));
    const double C9559 = C31383 * C1324;
    const double C25026 = C13437 * C1324;
    const double C9872 = C31383 * C1327;
    const double C25496 = C13437 * C1327;
    const double C9168 = C31383 * C2035;
    const double C30429 = C30426 / C30229;
    const double C30642 = C30638 / C30229;
    const double C30694 = C30693 / C30229;
    const double C30701 = C30372 * C30699;
    const double C30747 = C30699 / C30380;
    const double C30772 = -2 * C30699;
    const double C30462 = C30459 / C30229;
    const double C30669 = C30663 / C30229;
    const double C30711 = C30709 / C30229;
    const double C30751 = C30372 * C30748;
    const double C109 = (-2 * C31469 * C31501) / C30350;
    const double C13438 = -C31501 / C30350;
    const double C1086 = (C31206 * std::pow(C31257, 2)) / C30234 + C31256;
    const double C31259 = C31258 * C31257;
    const double C31264 = C31258 / C30241;
    const double C31475 = C31258 / C30229;
    const double C31472 = C31163 * C31258;
    const double C31266 = C31265 * C31257;
    const double C31481 = C31255 * C31265;
    const double C31480 = 2 * C31265;
    const double C31514 = C31265 / C31465;
    const double C1159 = C31265 / C31500;
    const double C2904 = C31265 / C30235;
    const double C31510 = C31477 / C30229;
    const double C1087 = (-2 * C31163 * C31477) / C30229;
    const double C31528 = C31502 / C30234;
    const double C1835 = (C31218 * std::pow(C31297, 2)) / C30234 + C31296;
    const double C31299 = C31298 * C31297;
    const double C31304 = C31298 / C30241;
    const double C31476 = C31298 / C30229;
    const double C31474 = C31163 * C31298;
    const double C31306 = C31305 * C31297;
    const double C31487 = C31295 * C31305;
    const double C31486 = 2 * C31305;
    const double C31520 = C31305 / C31465;
    const double C2014 = C31305 / C31500;
    const double C3806 = C31305 / C30235;
    const double C31516 = C31483 / C30229;
    const double C1836 = (-2 * C31163 * C31483) / C30229;
    const double C31530 = C31505 / C30234;
    const double C8927 = (-2 * C31469 * C31522) / C30350;
    const double C19130 = -C31522 / C30350;
    const double C30270 = C30265 + 0;
    const double C30269 = C30264 / C30235;
    const double C30255 = C30240 - C30251;
    const double C30254 = C30227 * C30249;
    const double C295 =
        ((-C30249 / C30229) / C30235 - (0 * de) / C30229) / C30235 -
        (0 * de) / C30229;
    const double C1160 = -C30249 / C30229;
    const double C2642 = (-C30249 / C30229) / C30235 - (0 * de) / C30229;
    const double C31159 = C31158 / C30234;
    const double C31494 = 2 * C31459;
    const double C31167 = C31166 / C30229;
    const double C31498 = C31463 / C30241;
    const double C31524 = C31457 - C31493;
    const double C2635 = -C31493;
    const double C31538 = C31523 + C31156;
    const double C4764 =
        ((-C30352 / C30350) / C30354 -
         ((C31383 - (C30351 * C30357) / C30350) * be) / C30350) /
            C30354 -
        ((C30351 * ((-C30357 / C30350) / C30354 - (0 * be) / C30350) + C13437) *
         be) /
            C30350;
    const double C4765 =
        ((-C30357 / C30350) / C30354 - (0 * be) / C30350) / C30354 -
        (0 * be) / C30350;
    const double C13440 = (-C30352 / C30350) / C30354 -
                          ((C31383 - (C30351 * C30357) / C30350) * be) / C30350;
    const double C13441 = (-C30357 / C30350) / C30354 - (0 * be) / C30350;
    const double C169 = C150 + C151;
    const double C168 = C148 + C149;
    const double C9175 = C9152 + C9153;
    const double C9174 = C9150 + C9151;
    const double C13466 = C13436 * C143;
    const double C13462 = C13436 * C132;
    const double C13456 = C13436 * C142;
    const double C13452 = C13436 * C130;
    const double C13450 = C13436 * C141;
    const double C13446 = C13436 * C128;
    const double C13648 = C13436 * C310;
    const double C13642 = C13436 * C327;
    const double C13638 = C13436 * C306;
    const double C13850 = C13436 * C507;
    const double C13842 = C13436 * C499;
    const double C13836 = C13436 * C516;
    const double C13832 = C13436 * C495;
    const double C25032 = C13436 * C505;
    const double C25028 = C13436 * C520;
    const double C25022 = C13436 * C515;
    const double C25018 = C13436 * C497;
    const double C25502 = C13436 * C940;
    const double C25498 = C13436 * C950;
    const double C25894 = C13436 * C1327;
    const double C25886 = C13436 * C1324;
    const double C26772 = C13436 * C2027;
    const double C26762 = C13436 * C2035;
    const double C26758 = C13436 * C2026;
    const double C4763 =
        ((-(0 * be) / C30350) / C30354 -
         ((0 - (C30351 * C30352) / C30350) * be) / C30350) /
            C30354 -
        ((C30351 * ((-C30352 / C30350) / C30354 -
                    ((C31383 - (C30351 * C30357) / C30350) * be) / C30350) +
          C13436) *
         be) /
            C30350 +
        (-C30357 / C30350) / C30354 - (0 * be) / C30350;
    const double C170 = C152 + C153;
    const double C361 = C337 + C338;
    const double C550 = C526 + C527;
    const double C9176 = C9158 + C9159;
    const double C9566 = C9552 + C9553;
    const double C133 =
        (-2 * (C30369 * C30497 + C30789 * ce)) / C30229 -
        (C30369 * (C30369 * C30501 + C30497 + C30369 * C30480 * ce)) / C30229 -
        ((C30789 + C30480 * C30398) * ce) / C30229;
    const double C311 =
        -(C30372 * (C30369 * C30501 + C30497 + C30794 * ce)) / C30229;
    const double C319 =
        -(C30501 * C30583 + C30369 * C30497 + C30789 * ce) / C30229;
    const double C500 =
        -(C30571 * (C30369 * C30501 + C30497 + C30794 * ce)) / C30229;
    const double C508 =
        -(C30501 * C30608 + C30369 * C30497 + C30789 * ce) / C30229;
    const double C943 = -(C30571 * C30372 * C30501) / C30229;
    const double C350 = C31383 * C318;
    const double C13656 = C13436 * C318;
    const double C13640 = C13437 * C318;
    const double C957 = C31383 * C942;
    const double C13834 = C13437 * C942;
    const double C14360 = C13436 * C942;
    const double C349 = C113 * C302;
    const double C538 = C113 * C491;
    const double C956 = C113 * C936;
    const double C1442 = C113 * C1162;
    const double C1604 = C113 * C1299;
    const double C2308 = C113 * C2016;
    const double C9560 = C113 * C1297;
    const double C9865 = C113 * C2417;
    const double C1173 =
        (3 * (C30384 + C30372 * C30872 + C30870 * ae) +
         C30372 * (2 * C30872 +
                   C30372 * (C30392 + C30372 * (C30372 * C30403 + C30483 * ae) +
                             C30372 * C30483 * ae) +
                   C30873 * ae) +
         (2 * C30870 + C30372 * C30873) * ae) /
        C30350;
    const double C1309 =
        (C30372 * C30384 + C30789 * ae + C30872 * C30608) / C30350;
    const double C1315 =
        (C30571 * (C30384 + C30372 * C30872 + C30870 * ae)) / C30350;
    const double C1316 = (C30384 + C30372 * C30872 + C30870 * ae +
                          (C30392 + C30372 * (C30372 * C30403 + C30483 * ae) +
                           C30372 * C30483 * ae) *
                              C30608) /
                         C30350;
    const double C1716 =
        (C30571 * (2 * C30872 +
                   C30372 * (C30392 + C30372 * (C30372 * C30403 + C30483 * ae) +
                             C30372 * C30483 * ae) +
                   C30873 * ae)) /
        C30350;
    const double C2420 =
        (2 * C30571 * C30872 +
         C30571 * (C30872 + (C30372 * C30403 + C30483 * ae) * C30608)) /
        C30350;
    const double C172 = C156 + C157;
    const double C363 = C341 + C342;
    const double C552 = C530 + C531;
    const double C9179 = C9169 + C9170;
    const double C171 = C154 + C155;
    const double C134 = (3 * (C30384 + C30392 * C30398) +
                         C30369 * (2 * C30394 + C30369 * C30407)) /
                        C30350;
    const double C312 = (C30372 * (2 * C30394 + C30369 * C30407) +
                         (2 * C30794 + C30369 * C30796) * ae) /
                        C30350;
    const double C320 =
        (C30384 + C30392 * C30398 + C30372 * (C30372 * C30407 + C30796 * ae) +
         C30372 * C30796 * ae) /
        C30350;
    const double C501 = (C30571 * (2 * C30394 + C30369 * C30407)) / C30350;
    const double C509 = (C30384 + C30392 * C30398 + C30407 * C30608) / C30350;
    const double C944 = (C30571 * (C30372 * C30407 + C30796 * ae)) / C30350;
    const double C2022 =
        (2 * C30571 * C30407 + C30571 * (C30407 + C30430 * C30608)) / C30350;
    const double C30422 = C30417 / C30229;
    const double C30880 = C30876 + C30877;
    const double C1443 = C31383 * C1170;
    const double C13654 = C13437 * C1170;
    const double C14886 = C13436 * C1170;
    const double C2309 = C31383 * C2024;
    const double C15944 = C13436 * C2024;
    const double C10895 = C31383 * C2029;
    const double C30951 = C30372 * C30947;
    const double C30957 = 2 * C30947;
    const double C10595 =
        (4 * (2 * C30571 * C30392 + C30571 * C31021) +
         C30571 *
             (3 * C31021 + C30571 * (2 * C30571 * C30403 +
                                     C30571 * (C30403 + C30424 * C30608)))) /
        C30350;
    const double C10610 = C10602 + C10603;
    const double C30512 = C30493 * ce;
    const double C30800 = C30369 * C30493;
    const double C30804 = 3 * C30493;
    const double C30886 = C30372 * C30493;
    const double C30885 = C30493 * ae;
    const double C1168 =
        (2 * (C30372 * C30407 + C30796 * ae) +
         C30372 * (C30407 + C30372 * (C30372 * C30430 + C30493 * ae) +
                   C30372 * C30493 * ae) +
         (C30796 + C30493 * C30583) * ae) /
        C30350;
    const double C1161 =
        2 * C30372 * C30796 + C30372 * (C30796 + C30493 * C30583);
    const double C1298 = C30571 * (C30796 + C30493 * C30583);
    const double C2015 =
        2 * C30571 * C30796 + C30571 * (C30796 + C30493 * C30608);
    const double C2020 =
        3 * (C30796 + C30493 * C30608) +
        C30571 * (2 * C30571 * C30493 + C30571 * (C30493 + C30540 * C30608));
    const double C30881 = C30488 + C30879;
    const double C30993 = 2 * C30988;
    const double C30991 = C30988 * ae;
    const double C2418 =
        2 * C30571 * C30878 + C30571 * (C30878 + C30988 * C30608);
    const double C10764 =
        3 * (C30878 + C30988 * C30608) +
        C30571 * (2 * C30571 * C30988 +
                  C30571 * (C30988 + C30372 * C30536 * C30608));
    const double C30990 = C30986 + C30987;
    const double C31141 = C30488 + C31140;
    const double C10894 = C113 * C2019;
    const double C30519 = C30369 * C30518;
    const double C30528 = -2 * C30518;
    const double C30595 = C30518 * C30583;
    const double C30723 = ae * C30518;
    const double C30721 = C30372 * C30518;
    const double C30740 = C30571 * C30518;
    const double C31041 = C30518 * C30608;
    const double C30952 = C30372 * C30949;
    const double C30963 = 3 * C30949;
    const double C30961 = C30949 * ae;
    const double C6266 =
        2 * C30571 * C30873 + C30571 * (C30873 + C30949 * C30608);
    const double C6268 =
        3 * (C30873 + C30949 * C30608) +
        C30571 * (2 * C30571 * C30949 + C30571 * (C30949 + C30966 * C30608));
    const double C31144 = C30945 + C31143;
    const double C11009 = C113 * C6267;
    const double C30968 = C30372 * C30964;
    const double C31044 = C30964 * C30608;
    const double C6271 =
        (3 * (C30872 + C30947 * C30608) +
         C30571 * (2 * C30571 * C30947 + C30571 * (C30947 + C30964 * C30608))) /
        C30350;
    const double C31136 = C30571 * C31135;
    const double C30503 = C30369 * C30494;
    const double C30508 = -2 * C30494;
    const double C30594 = ae * C30494;
    const double C30592 = C30372 * C30494;
    const double C1169 = (-2 * C30372 * C30501) / C30229 -
                         (C30372 * (C30494 * C30583 + C30501)) / C30229;
    const double C1312 = -(C30571 * (C30494 * C30583 + C30501)) / C30229;
    const double C2023 = (-2 * C30571 * C30501) / C30229 -
                         (C30571 * (C30494 * C30608 + C30501)) / C30229;
    const double C2030 =
        (-3 * (C30494 * C30608 + C30501)) / C30229 +
        C30571 * ((-2 * C30571 * C30494) / C30229 -
                  (C30571 * (C30518 * C30608 + C30494)) / C30229);
    const double C1722 =
        2 * ((-(C30372 * C30620) / C30229) / C30350 -
             (ae * C30571 * C30484) / C30380) -
        (ae * C30571 * C30588) / C30380 +
        C30372 * ((-(ae * C30571 * C30372 * C30490) / C30229) / C30350 -
                  C30620 / C30380 +
                  C30372 * ((-(C30372 * C30571 * C30423) / C30229) / C30350 -
                            (ae * C30571 * C30490) / C30380));
    const double C1174 =
        (-3 * (C30484 * C30583 + C30497)) / C30229 +
        C30372 * ((-2 * C30580) / C30229 - (C30372 * C30588) / C30229);
    const double C1317 = -(C30588 * C30608 + C30484 * C30583 + C30497) / C30229;
    const double C1717 =
        C30571 * ((-2 * C30580) / C30229 - (C30372 * C30588) / C30229);
    const double C6269 = (-2 * C30571 * C30588) / C30229 -
                         (C30571 * (C30645 * C30608 + C30588)) / C30229;
    const double C30648 = C30644 / C30229;
    const double C30646 = C30641 / C30229;
    const double C9867 = C113 * C2421;
    const double C11007 = C113 * C6273;
    const double C30704 = C30702 / C30380;
    const double C31032 = C31030 / C30229;
    const double C10594 =
        4 * ((-2 * C30571 * C30484) / C30229 - (C30571 * C31018) / C30229) +
        C30571 *
            ((-3 * C31018) / C30229 +
             C30571 * ((-2 * C30700) / C30229 - (C30571 * C30712) / C30229));
    const double C30466 = C30369 * C30463;
    const double C2031 =
        (3 * (C30407 + C30430 * C30608) +
         C30571 * (2 * C30571 * C30430 + C30571 * (C30430 + C30463 * C30608))) /
        C30350;
    const double C30544 = C30369 * C30541;
    const double C30724 = C30541 * C30583;
    const double C30678 = C30372 * C30673;
    const double C6274 =
        (-3 * (C30645 * C30608 + C30588)) / C30229 +
        C30571 * ((-2 * C30571 * C30645) / C30229 -
                  (C30571 * (C30673 * C30608 + C30645)) / C30229);
    const double C2190 = C113 * C1296;
    const double C160 = C113 * C123;
    const double C345 = C113 * C299;
    const double C353 = C113 * C303;
    const double C534 = C113 * C488;
    const double C542 = C113 * C492;
    const double C960 = C113 * C937;
    const double C9873 = C113 * C1301;
    const double C10272 = C113 * C1713;
    const double C10608 = C113 * C10592;
    const double C30435 = C30420 + C30433;
    const double C30448 = C30441 / C30380;
    const double C30458 = -C30455;
    const double C10887 =
        (4 * (2 * C30571 * C30412 + C30571 * C31039) +
         C30571 * (3 * C31039 +
                   C30571 * (2 * C30571 * C30442 +
                             C30571 * (C30442 + C30369 * C30457 * C30608)))) /
        C30350;
    const double C31028 = C31025 + C31027;
    const double C30652 = C30649 / C30229;
    const double C30671 = C30665 / C30229;
    const double C30667 = C30661 / C30380;
    const double C30679 = -C30675;
    const double C30753 = C30750 / C30229;
    const double C11003 =
        4 * ((-2 * C30571 * C30637) / C30229 - (C30571 * C31048) / C30229) +
        C30571 * ((-3 * C31048) / C30229 +
                  C30571 * ((-2 * C30746) / C30229 -
                            (C30571 * (C30372 * C30534 * C30608 + C30662)) /
                                C30229));
    const double C30716 = C30714 / C30380;
    const double C31033 = C31031 / C30229;
    const double C30546 = C30531 + C30543;
    const double C30545 = C30542 / C30229;
    const double C30889 = C30493 + C30887;
    const double C30995 = C30372 * C30992;
    const double C30971 = C30967 + C30969;
    const double C362 = C339 + C340;
    const double C551 = C528 + C529;
    const double C9177 = C9160 + C9161;
    const double C9565 = C9550 + C9551;
    const double C30408 = -C30406;
    const double C9876 = C31383 * C1328;
    const double C25900 = C13436 * C1328;
    const double C25888 = C13437 * C1328;
    const double C30587 = -C30584;
    const double C10605 = C31383 * C2036;
    const double C26768 = C13436 * C2036;
    const double C9868 = C31383 * C2426;
    const double C26764 = C13437 * C2426;
    const double C27238 = C13436 * C2426;
    const double C9567 = C9558 + C9559;
    const double C9886 = C9871 + C9872;
    const double C9178 = C9167 + C9168;
    const double C30432 = -C30429;
    const double C30647 = -C30642;
    const double C30695 = -C30694;
    const double C30703 = C30701 / C30229;
    const double C30774 = C30772 / C30380;
    const double C30465 = -C30462;
    const double C30676 = -C30669;
    const double C30713 = -C30711;
    const double C30754 = C30751 / C30229;
    const double C31260 = C31259 / C30234;
    const double C31503 = 2 * C31472;
    const double C31267 = C31266 / C30229;
    const double C31513 = C31481 / C30241;
    const double C31532 = C31475 - C31510;
    const double C2531 = -C31510;
    const double C31541 = C31528 + C31256;
    const double C31300 = C31299 / C30234;
    const double C31506 = 2 * C31474;
    const double C31307 = C31306 / C30229;
    const double C31519 = C31487 / C30241;
    const double C31535 = C31476 - C31516;
    const double C3298 = -C31516;
    const double C31542 = C31530 + C31296;
    const double C30273 = C30270 * de;
    const double C30259 = C30227 * C30255;
    const double C30287 = C30255 / C30235;
    const double C30258 = C30254 / C30229;
    const double C31160 = C31156 - C31159;
    const double C31525 = C31494 / C30229;
    const double C31168 = C31164 - C31167;
    const double C31539 = C31524 / C30235;
    const double C13467 = C13440 * C123;
    const double C13461 = C13440 * C122;
    const double C13455 = C13440 * C131;
    const double C13451 = C13440 * C121;
    const double C13449 = C13440 * C129;
    const double C13445 = C13440 * C120;
    const double C13661 = C13440 * C303;
    const double C13655 = C13440 * C302;
    const double C13647 = C13440 * C298;
    const double C13641 = C13440 * C309;
    const double C13637 = C13440 * C296;
    const double C13855 = C13440 * C492;
    const double C13849 = C13440 * C491;
    const double C13841 = C13440 * C487;
    const double C13835 = C13440 * C498;
    const double C13831 = C13440 * C485;
    const double C14009 = C13440 * C299;
    const double C14151 = C13440 * C488;
    const double C14365 = C13440 * C937;
    const double C14359 = C13440 * C936;
    const double C14885 = C13440 * C1162;
    const double C15091 = C13440 * C1299;
    const double C15801 = C13440 * C1296;
    const double C15943 = C13440 * C2016;
    const double C25031 = C13440 * C490;
    const double C25027 = C13440 * C506;
    const double C25021 = C13440 * C496;
    const double C25017 = C13440 * C486;
    const double C25501 = C13440 * C935;
    const double C25497 = C13440 * C941;
    const double C25903 = C13440 * C1301;
    const double C25893 = C13440 * C1314;
    const double C25889 = C13440 * C1300;
    const double C25885 = C13440 * C1308;
    const double C25881 = C13440 * C1297;
    const double C26371 = C13440 * C1713;
    const double C26771 = C13440 * C2018;
    const double C26767 = C13440 * C2028;
    const double C26761 = C13440 * C2025;
    const double C26757 = C13440 * C2017;
    const double C27241 = C13440 * C2417;
    const double C27237 = C13440 * C2421;
    const double C13459 = C13441 * C299;
    const double C13453 = C13441 * C298;
    const double C13447 = C13441 * C309;
    const double C13443 = C13441 * C296;
    const double C13653 = C13441 * C1162;
    const double C13645 = C13441 * C303;
    const double C13639 = C13441 * C302;
    const double C13847 = C13441 * C1296;
    const double C13839 = C13441 * C937;
    const double C13833 = C13441 * C936;
    const double C14357 = C13441 * C1299;
    const double C25029 = C13441 * C1297;
    const double C25025 = C13441 * C1308;
    const double C25023 = C13441 * C941;
    const double C25019 = C13441 * C935;
    const double C25499 = C13441 * C1300;
    const double C25495 = C13441 * C1314;
    const double C25891 = C13441 * C1713;
    const double C25883 = C13441 * C1301;
    const double C26769 = C13441 * C6267;
    const double C26765 = C13441 * C6273;
    const double C26763 = C13441 * C2421;
    const double C26759 = C13441 * C2417;
    const double C9181 = C9175 * C287;
    const double C9856 = C9175 * C31155;
    const double C10145 = C9175 * C31457;
    const double C10399 = C9175 * C31538;
    const double C11358 = C9175 * C2635;
    const double C9855 = C9174 * C1160;
    const double C10146 = C550 * C30255;
    const double C11359 = C550 * C2642;
    const double C20279 = C550 * C1160;
    const double C9857 = C9176 * C1160;
    const double C9861 = C9566 * C1160;
    const double C158 = C113 * C133;
    const double C13465 = C13440 * C133;
    const double C343 = C113 * C311;
    const double C13457 = C13441 * C311;
    const double C13651 = C13440 * C311;
    const double C351 = C113 * C319;
    const double C13659 = C13440 * C319;
    const double C13643 = C13441 * C319;
    const double C532 = C113 * C500;
    const double C13845 = C13440 * C500;
    const double C540 = C113 * C508;
    const double C13853 = C13440 * C508;
    const double C958 = C113 * C943;
    const double C13837 = C13441 * C943;
    const double C14363 = C13440 * C943;
    const double C367 = C349 + C350;
    const double C556 = C538 + C539;
    const double C968 = C956 + C957;
    const double C9561 = C31383 * C1309;
    const double C25030 = C13437 * C1309;
    const double C25882 = C13436 * C1309;
    const double C9870 = C31383 * C1315;
    const double C25500 = C13437 * C1315;
    const double C25890 = C13436 * C1315;
    const double C9874 = C31383 * C1316;
    const double C25904 = C13436 * C1316;
    const double C25884 = C13437 * C1316;
    const double C10273 = C31383 * C1716;
    const double C25892 = C13437 * C1716;
    const double C26372 = C13436 * C1716;
    const double C9866 = C31383 * C2420;
    const double C26760 = C13437 * C2420;
    const double C27242 = C13436 * C2420;
    const double C9156 = C552 * C295;
    const double C20623 = C552 * C30255;
    const double C22079 = C552 * C2642;
    const double C9860 = C9179 * C1160;
    const double C161 = C31383 * C134;
    const double C13468 = C13436 * C134;
    const double C346 = C31383 * C312;
    const double C13460 = C13437 * C312;
    const double C14010 = C13436 * C312;
    const double C354 = C31383 * C320;
    const double C13662 = C13436 * C320;
    const double C13646 = C13437 * C320;
    const double C535 = C31383 * C501;
    const double C14152 = C13436 * C501;
    const double C543 = C31383 * C509;
    const double C13856 = C13436 * C509;
    const double C961 = C31383 * C944;
    const double C13840 = C13437 * C944;
    const double C14366 = C13436 * C944;
    const double C2313 = C31383 * C2022;
    const double C30425 = -C30422;
    const double C1307 =
        (C30372 * C30394 + C30794 * ae + C30880 * C30608) / C30350;
    const double C1313 =
        (C30571 * (C30394 + C30372 * C30880 + C30878 * ae)) / C30350;
    const double C1318 = (C30394 + C30372 * C30880 + C30878 * ae +
                          (C30412 + C30372 * (C30372 * C30442 + C30511 * ae) +
                           C30372 * C30511 * ae) *
                              C30608) /
                         C30350;
    const double C2422 =
        (2 * C30571 * C30880 +
         C30571 * (C30880 + (C30372 * C30442 + C30511 * ae) * C30608)) /
        C30350;
    const double C1450 = C1442 + C1443;
    const double C2316 = C2308 + C2309;
    const double C30953 = C30392 + C30951;
    const double C10609 = C31383 * C10595;
    const double C10614 = C10610 * C1160;
    const double C30516 = C30512 / C30229;
    const double C30801 = C30799 + C30800;
    const double C1295 = C30372 * C30796 + C30886 * C30608;
    const double C2419 =
        2 * C30571 * C30886 + C30571 * (C30886 + C30372 * C30540 * C30608);
    const double C30888 = C30884 + C30885;
    const double C1447 = C31383 * C1168;
    const double C13664 = C13437 * C1168;
    const double C1446 = C113 * C1161;
    const double C13663 = C13441 * C1161;
    const double C1608 = C113 * C1298;
    const double C14367 = C13441 * C1298;
    const double C2312 = C113 * C2015;
    const double C1175 =
        (3 * (C30394 + C30372 * C30880 + C30878 * ae) +
         C30372 * (2 * C30880 +
                   C30372 * (C30412 + C30372 * (C30372 * C30442 + C30511 * ae) +
                             C30372 * C30511 * ae) +
                   C30881 * ae) +
         (2 * C30878 + C30372 * C30881) * ae) /
        C30350;
    const double C1718 =
        (C30571 * (2 * C30880 +
                   C30372 * (C30412 + C30372 * (C30372 * C30442 + C30511 * ae) +
                             C30372 * C30511 * ae) +
                   C30881 * ae)) /
        C30350;
    const double C1165 = 3 * (C30794 + C30488 * C30583) +
                         C30372 * (2 * C30878 + C30372 * C30881);
    const double C1302 = C30794 + C30488 * C30583 + C30881 * C30608;
    const double C1714 = C30571 * (2 * C30878 + C30372 * C30881);
    const double C6526 =
        2 * C30571 * C30881 + C30571 * (C30881 + C30992 * C30608);
    const double C10777 = C113 * C2418;
    const double C15945 = C13441 * C2418;
    const double C30994 = C30372 * C30990;
    const double C10765 =
        (3 * (C30880 + C30990 * C30608) +
         C30571 * (2 * C30571 * C30990 +
                   C30571 * (C30990 + (C30372 * C30369 * C30457 + C30536 * ae) *
                                          C30608))) /
        C30350;
    const double C10886 =
        4 * (2 * C30571 * C30488 + C30571 * C31141) +
        C30571 * (3 * C31141 + C30571 * (2 * C30571 * C30511 +
                                         C30571 * (C30511 + C30536 * C30608)));
    const double C10899 = C10894 + C10895;
    const double C30520 = C30519 + C30490;
    const double C30533 = C30528 / C30229;
    const double C30597 = C30595 + C30494;
    const double C30726 = C30723 / C30380;
    const double C30727 = -2 * C30721;
    const double C30725 = ae * C30721;
    const double C30742 = ae * C30740;
    const double C31042 = C31041 + C30494;
    const double C30954 = C30950 + C30952;
    const double C9879 = C113 * C6266;
    const double C27239 = C13441 * C6266;
    const double C11001 =
        4 * (2 * C30571 * C30945 + C30571 * C31144) +
        C30571 * (3 * C31144 +
                  C30571 * (2 * C30571 * C30960 +
                            C30571 * (C30960 + C30372 * C30530 * C30608)));
    const double C30970 = C30403 + C30968;
    const double C31045 = C30947 + C31044;
    const double C11010 = C31383 * C6271;
    const double C26770 = C13437 * C6271;
    const double C31137 = C31134 + C31136;
    const double C30505 = C30503 + C30484;
    const double C30513 = C30508 / C30229;
    const double C30596 = C30594 / C30380;
    const double C1306 = -(C30592 * C30608 + C30372 * C30501) / C30229;
    const double C2423 = (-2 * C30571 * C30592) / C30229 -
                         (C30571 * (C30721 * C30608 + C30592)) / C30229;
    const double C10766 =
        (-3 * (C30721 * C30608 + C30592)) / C30229 +
        C30571 * ((-2 * C30571 * C30721) / C30229 -
                  (C30571 * (C30372 * C30541 * C30608 + C30721)) / C30229);
    const double C1444 = C113 * C1169;
    const double C13657 = C13441 * C1169;
    const double C14889 = C13440 * C1169;
    const double C1606 = C113 * C1312;
    const double C14361 = C13441 * C1312;
    const double C15095 = C13440 * C1312;
    const double C2310 = C113 * C2023;
    const double C15947 = C13440 * C2023;
    const double C10896 = C113 * C2030;
    const double C10275 = C31383 * C1722;
    const double C25896 = C13437 * C1722;
    const double C26376 = C13436 * C1722;
    const double C9875 = C113 * C1317;
    const double C25899 = C13440 * C1317;
    const double C25887 = C13441 * C1317;
    const double C10274 = C113 * C1717;
    const double C25895 = C13441 * C1717;
    const double C26375 = C13440 * C1717;
    const double C9877 = C113 * C6269;
    const double C27235 = C13441 * C6269;
    const double C30650 = -C30646;
    const double C10606 = C113 * C10594;
    const double C30468 = C30452 + C30466;
    const double C30547 = C30544 + C30514;
    const double C30728 = C30724 + C30518;
    const double C30681 = C30678 / C30229;
    const double C136 = (4 * (2 * C30394 + C30369 * C30407) +
                         C30369 * (3 * C30407 + C30369 * C30435)) /
                        C30350;
    const double C503 = (C30571 * (3 * C30407 + C30369 * C30435)) / C30350;
    const double C511 =
        (2 * C30394 + C30369 * C30407 + C30435 * C30608) / C30350;
    const double C30461 = C30458 / C30350;
    const double C10596 =
        (5 * (3 * C31021 + C30571 * C31028) +
         C30571 * (4 * C31028 +
                   C30571 * (3 * C31026 +
                             C30571 * (2 * C30571 * C30424 +
                                       C30571 * (C30424 + C30457 * C30608))))) /
        C30350;
    const double C30655 = C30648 - C30652;
    const double C30682 = C30679 / C30350;
    const double C30756 = -C30753;
    const double C31034 = C31032 - C31033;
    const double C30548 = C30546 * ce;
    const double C30805 = C30369 * C30546;
    const double C1166 = 3 * (C30796 + C30493 * C30583) +
                         C30372 * (2 * C30886 + C30372 * C30889);
    const double C1303 = C30796 + C30493 * C30583 + C30889 * C30608;
    const double C1715 = C30571 * (2 * C30886 + C30372 * C30889);
    const double C30997 = C30993 + C30995;
    const double C30973 = C30372 * C30971;
    const double C9155 = C551 * C288;
    const double C10147 = C551 * C31165;
    const double C11360 = C551 * C31165;
    const double C19426 = C551 * C287;
    const double C20280 = C551 * C31155;
    const double C20622 = C551 * C31457;
    const double C20912 = C551 * C31538;
    const double C22078 = C551 * C2635;
    const double C9183 = C9177 * C287;
    const double C9858 = C9177 * C31155;
    const double C10149 = C9177 * C31457;
    const double C10405 = C9177 * C31538;
    const double C11362 = C9177 * C2635;
    const double C9569 = C9565 * C287;
    const double C9862 = C9565 * C31155;
    const double C10153 = C9565 * C31457;
    const double C11370 = C9565 * C2635;
    const double C12746 = C9565 * C31538;
    const double C30409 = C30408 / C30350;
    const double C30589 = C30587 / C30350;
    const double C10611 = C10604 + C10605;
    const double C9883 = C9867 + C9868;
    const double C9571 = C9567 * C287;
    const double C9864 = C9567 * C31155;
    const double C10157 = C9567 * C31457;
    const double C11374 = C9567 * C2635;
    const double C12752 = C9567 * C31538;
    const double C9894 = C9886 * C31155;
    const double C10161 = C9886 * C31457;
    const double C11814 = C9886 * C2635;
    const double C9184 = C9178 * C287;
    const double C9859 = C9178 * C31155;
    const double C10411 = C9178 * C31538;
    const double C10771 = C9178 * C31457;
    const double C11366 = C9178 * C2635;
    const double C30434 = C30432 / C30350;
    const double C30651 = C30647 / C30350;
    const double C30696 = C30695 / C30350;
    const double C30705 = -C30703;
    const double C30467 = C30465 / C30350;
    const double C30680 = C30676 / C30350;
    const double C30715 = C30713 / C30350;
    const double C30757 = -C30754;
    const double C31261 = C31256 - C31260;
    const double C31529 = C31503 / C30229;
    const double C31268 = C31264 - C31267;
    const double C31543 = C31532 / C30235;
    const double C31301 = C31296 - C31300;
    const double C31531 = C31506 / C30229;
    const double C31308 = C31304 - C31307;
    const double C31545 = C31535 / C30235;
    const double C30275 = C30273 / C30229;
    const double C30263 = C30259 + C31165;
    const double C30290 = C30287 - C30289;
    const double C1091 = C30287 + (0 * ce) / C30229;
    const double C30262 = C31155 - C30258;
    const double C11662 = C9567 * C31160;
    const double C11656 = C9565 * C31160;
    const double C11650 = C9177 * C31160;
    const double C11644 = C9175 * C31160;
    const double C12444 = C9178 * C31160;
    const double C22434 = C551 * C31160;
    const double C31456 = C31160 * C31150;
    const double C31496 = C31461 + C31160;
    const double C10401 = C551 * C31525;
    const double C11646 = C551 * C31168;
    const double C31464 = C31168 / C30235;
    const double C31460 = C31168 * C31150;
    const double C659 = C31539 - (C31160 * C31151) / C30229;
    const double C13484 = C13461 + C13462;
    const double C13481 = C13455 + C13456;
    const double C13479 = C13451 + C13452;
    const double C13478 = C13449 + C13450;
    const double C13476 = C13445 + C13446;
    const double C13678 = C13655 + C13656;
    const double C13674 = C13647 + C13648;
    const double C13671 = C13641 + C13642;
    const double C13669 = C13637 + C13638;
    const double C13872 = C13849 + C13850;
    const double C13868 = C13841 + C13842;
    const double C13865 = C13835 + C13836;
    const double C13863 = C13831 + C13832;
    const double C14374 = C14359 + C14360;
    const double C14893 = C14885 + C14886;
    const double C15951 = C15943 + C15944;
    const double C25040 = C25031 + C25032;
    const double C25038 = C25027 + C25028;
    const double C25035 = C25021 + C25022;
    const double C25033 = C25017 + C25018;
    const double C25506 = C25501 + C25502;
    const double C25504 = C25497 + C25498;
    const double C25911 = C25893 + C25894;
    const double C25907 = C25885 + C25886;
    const double C26780 = C26771 + C26772;
    const double C26778 = C26767 + C26768;
    const double C26775 = C26761 + C26762;
    const double C26773 = C26757 + C26758;
    const double C27244 = C27237 + C27238;
    const double C13480 = C13453 + C13454;
    const double C13477 = C13447 + C13448;
    const double C13475 = C13443 + C13444;
    const double C13677 = C13653 + C13654;
    const double C13670 = C13639 + C13640;
    const double C13864 = C13833 + C13834;
    const double C25037 = C25025 + C25026;
    const double C25036 = C25023 + C25024;
    const double C25034 = C25019 + C25020;
    const double C25503 = C25495 + C25496;
    const double C26776 = C26763 + C26764;
    const double C173 = C158 + C159;
    const double C13486 = C13465 + C13466;
    const double C10150 = C556 * C30255;
    const double C11363 = C556 * C2642;
    const double C20282 = C556 * C1160;
    const double C10152 = C968 * C30255;
    const double C11369 = C968 * C2642;
    const double C20283 = C968 * C1160;
    const double C9568 = C9560 + C9561;
    const double C25039 = C25029 + C25030;
    const double C25905 = C25881 + C25882;
    const double C9885 = C9869 + C9870;
    const double C25505 = C25499 + C25500;
    const double C25909 = C25889 + C25890;
    const double C9887 = C9873 + C9874;
    const double C25916 = C25903 + C25904;
    const double C25906 = C25883 + C25884;
    const double C10280 = C10272 + C10273;
    const double C25910 = C25891 + C25892;
    const double C26379 = C26371 + C26372;
    const double C9882 = C9865 + C9866;
    const double C26774 = C26759 + C26760;
    const double C27246 = C27241 + C27242;
    const double C174 = C160 + C161;
    const double C13487 = C13467 + C13468;
    const double C365 = C345 + C346;
    const double C13483 = C13459 + C13460;
    const double C14017 = C14009 + C14010;
    const double C369 = C353 + C354;
    const double C13681 = C13661 + C13662;
    const double C13673 = C13645 + C13646;
    const double C554 = C534 + C535;
    const double C14159 = C14151 + C14152;
    const double C558 = C542 + C543;
    const double C13875 = C13855 + C13856;
    const double C970 = C960 + C961;
    const double C13867 = C13839 + C13840;
    const double C14377 = C14365 + C14366;
    const double C30428 = C30425 / C30350;
    const double C2191 = C31383 * C1307;
    const double C13848 = C13437 * C1307;
    const double C15802 = C13436 * C1307;
    const double C1605 = C31383 * C1313;
    const double C14358 = C13437 * C1313;
    const double C15092 = C13436 * C1313;
    const double C10167 = C31383 * C1318;
    const double C15804 = C13437 * C1318;
    const double C10778 = C31383 * C2422;
    const double C15946 = C13437 * C2422;
    const double C10770 = C2316 * C30255;
    const double C11365 = C2316 * C2642;
    const double C21151 = C2316 * C1160;
    const double C30955 = C30953 + C30948;
    const double C10613 = C10608 + C10609;
    const double C314 = (C30372 * (3 * C30407 + C30369 * C30435) +
                         (3 * C30796 + C30369 * C30801) * ae) /
                        C30350;
    const double C322 =
        (2 * C30394 + C30369 * C30407 +
         C30372 * (C30372 * C30435 + C30801 * ae) + C30372 * C30801 * ae) /
        C30350;
    const double C946 = (C30571 * (C30372 * C30435 + C30801 * ae)) / C30350;
    const double C124 = 4 * (2 * C30794 + C30369 * C30796) +
                        C30369 * (3 * C30796 + C30369 * C30801);
    const double C300 = C30372 * (3 * C30796 + C30369 * C30801);
    const double C304 = 2 * C30794 + C30369 * C30796 + C30801 * C30583;
    const double C489 = C30571 * (3 * C30796 + C30369 * C30801);
    const double C493 = 2 * C30794 + C30369 * C30796 + C30801 * C30608;
    const double C938 = C30571 * C30372 * C30801;
    const double C1437 =
        2 * C30372 * C30801 + C30372 * (C30801 + C30546 * C30583);
    const double C1599 = C30571 * (C30801 + C30546 * C30583);
    const double C2185 = C30372 * C30801 + C30372 * C30546 * C30608;
    const double C2303 =
        2 * C30571 * C30801 + C30571 * (C30801 + C30546 * C30608);
    const double C2194 = C113 * C1295;
    const double C13857 = C13441 * C1295;
    const double C1177 =
        (3 * (C30407 + C30372 * C30888 + C30886 * ae) +
         C30372 * (2 * C30888 +
                   C30372 * (C30430 + C30372 * (C30372 * C30463 + C30540 * ae) +
                             C30372 * C30540 * ae) +
                   C30889 * ae) +
         (2 * C30886 + C30372 * C30889) * ae) /
        C30350;
    const double C1305 =
        (C30372 * C30407 + C30796 * ae + C30888 * C30608) / C30350;
    const double C1311 =
        (C30571 * (C30407 + C30372 * C30888 + C30886 * ae)) / C30350;
    const double C1320 = (C30407 + C30372 * C30888 + C30886 * ae +
                          (C30430 + C30372 * (C30372 * C30463 + C30540 * ae) +
                           C30372 * C30540 * ae) *
                              C30608) /
                         C30350;
    const double C1720 =
        (C30571 * (2 * C30888 +
                   C30372 * (C30430 + C30372 * (C30372 * C30463 + C30540 * ae) +
                             C30372 * C30540 * ae) +
                   C30889 * ae)) /
        C30350;
    const double C2424 =
        (2 * C30571 * C30888 +
         C30571 * (C30888 + (C30372 * C30463 + C30540 * ae) * C30608)) /
        C30350;
    const double C1452 = C1446 + C1447;
    const double C13682 = C13663 + C13664;
    const double C2318 = C2312 + C2313;
    const double C14888 = C13437 * C1175;
    const double C15094 = C13437 * C1718;
    const double C20422 = C31383 * C1718;
    const double C14887 = C13441 * C1165;
    const double C10166 = C113 * C1302;
    const double C15803 = C13441 * C1302;
    const double C15093 = C13441 * C1714;
    const double C20421 = C113 * C1714;
    const double C30996 = C30412 + C30994;
    const double C10902 = C10899 * C30255;
    const double C12182 = C10899 * C2642;
    const double C21154 = C10899 * C1160;
    const double C30521 = C30520 + C30515;
    const double C1176 =
        (-3 * (C30494 * C30583 + C30501)) / C30229 +
        C30372 * ((-2 * C30592) / C30229 - (C30372 * C30597) / C30229);
    const double C1319 = -(C30597 * C30608 + C30494 * C30583 + C30501) / C30229;
    const double C1719 =
        C30571 * ((-2 * C30592) / C30229 - (C30372 * C30597) / C30229);
    const double C30731 = C30727 / C30229;
    const double C30729 = C30725 / C30380;
    const double C30743 = C30742 / C30380;
    const double C10888 =
        4 * ((-2 * C30571 * C30494) / C30229 - (C30571 * C31042) / C30229) +
        C30571 * ((-3 * C31042) / C30229 +
                  C30571 * ((-2 * C30740) / C30229 -
                            (C30571 * (C30541 * C30608 + C30518)) / C30229));
    const double C5500 = 4 * (2 * C30870 + C30372 * C30873) +
                         C30372 * (3 * C30873 + C30372 * C30954);
    const double C5618 = 2 * C30870 + C30372 * C30873 + C30954 * C30608;
    const double C5619 = C30571 * (3 * C30873 + C30372 * C30954);
    const double C6628 =
        2 * C30571 * C30954 + C30571 * (C30954 + C30971 * C30608);
    const double C30972 = C30970 + C30965;
    const double C11002 =
        (4 * (2 * C30571 * C30947 + C30571 * C31045) +
         C30571 * (3 * C31045 + C30571 * (2 * C30571 * C30964 +
                                          C30571 * (C30964 + (C30372 * C30457 +
                                                              C30530 * ae) *
                                                                 C30608)))) /
        C30350;
    const double C11012 = C11009 + C11010;
    const double C26779 = C26769 + C26770;
    const double C10593 =
        5 * (3 * C31130 + C30571 * C31137) +
        C30571 * (4 * C31137 +
                  C30571 * (3 * C31135 +
                            C30571 * (2 * C30571 * C30489 +
                                      C30571 * (C30489 + C30530 * C30608))));
    const double C30506 = C30505 + C30504;
    const double C2192 = C113 * C1306;
    const double C13851 = C13441 * C1306;
    const double C15805 = C13440 * C1306;
    const double C10779 = C113 * C2423;
    const double C15949 = C13441 * C2423;
    const double C9888 = C9875 + C9876;
    const double C25914 = C25899 + C25900;
    const double C25908 = C25887 + C25888;
    const double C10281 = C10274 + C10275;
    const double C25912 = C25895 + C25896;
    const double C26381 = C26375 + C26376;
    const double C30653 = C30650 / C30350;
    const double C30470 = C30369 * C30468;
    const double C1438 =
        (2 * (C30372 * C30435 + C30801 * ae) +
         C30372 * (C30435 + C30372 * (C30372 * C30468 + C30546 * ae) +
                   C30372 * C30546 * ae) +
         (C30801 + C30546 * C30583) * ae) /
        C30350;
    const double C1600 =
        (C30571 * (C30435 + C30372 * (C30372 * C30468 + C30546 * ae) +
                   C30372 * C30546 * ae)) /
        C30350;
    const double C2186 = (C30372 * C30435 + C30801 * ae +
                          (C30372 * C30468 + C30546 * ae) * C30608) /
                         C30350;
    const double C2304 =
        (2 * C30571 * C30435 + C30571 * (C30435 + C30468 * C30608)) / C30350;
    const double C30549 = C30547 + C30539;
    const double C30732 = C30372 * C30728;
    const double C6528 = (-2 * C30571 * C30597) / C30229 -
                         (C30571 * (C30728 * C30608 + C30597)) / C30229;
    const double C30684 = C30677 - C30681;
    const double C165 = C31383 * C136;
    const double C785 = C31383 * C503;
    const double C547 = C31383 * C511;
    const double C30464 = C30461 - C30443;
    const double C5502 =
        4 * ((-2 * C30580) / C30229 - (C30372 * C30588) / C30229) +
        C30372 * ((-3 * C30588) / C30229 + C30372 * C30655);
    const double C5621 =
        (-2 * C30580) / C30229 - (C30372 * C30588) / C30229 + C30655 * C30608;
    const double C5623 = C30571 * ((-3 * C30588) / C30229 + C30372 * C30655);
    const double C30685 = C30682 - C30443;
    const double C30758 = C30756 / C30350;
    const double C10597 =
        5 * ((-3 * C31018) / C30229 + C30571 * C31034) +
        C30571 * (4 * C31034 +
                  C30571 * ((-3 * C30712) / C30229 +
                            C30571 * ((-2 * C30749) / C30229 -
                                      (C30571 * (C30534 * C30608 + C30514)) /
                                          C30229)));
    const double C30550 = C30548 / C30229;
    const double C30806 = C30804 + C30805;
    const double C5728 = 4 * (2 * C30878 + C30372 * C30881) +
                         C30372 * (3 * C30881 + C30372 * C30997);
    const double C5878 = C30571 * (3 * C30881 + C30372 * C30997);
    const double C6424 = 2 * C30878 + C30372 * C30881 + C30997 * C30608;
    const double C30975 = C30963 + C30973;
    const double C9881 = C9857 + C9858;
    const double C30410 = C30409 - C30400;
    const double C30590 = C30589 - C30585;
    const double C10615 = C10611 * C31155;
    const double C10893 = C10611 * C31457;
    const double C12181 = C10611 * C2635;
    const double C9892 = C9883 * C31155;
    const double C10776 = C9883 * C31457;
    const double C11378 = C9883 * C2635;
    const double C10601 = C9859 + C9860;
    const double C30436 = C30434 - C30419;
    const double C30654 = C30651 - C30643;
    const double C30697 = C30696 - C30413;
    const double C30706 = C30705 / C30350;
    const double C30469 = C30467 - C30451;
    const double C30683 = C30680 - C30670;
    const double C30717 = C30715 - C30443;
    const double C30759 = C30757 / C30350;
    const double C31478 = C31261 * C31255;
    const double C31512 = C31480 + C31261;
    const double C31482 = C31268 / C30235;
    const double C31479 = C31268 * C31255;
    const double C1431 = C31543 - (C31261 * C31257) / C30229;
    const double C31484 = C31301 * C31295;
    const double C31518 = C31486 + C31301;
    const double C31488 = C31308 / C30235;
    const double C31485 = C31308 * C31295;
    const double C2299 = C31545 - (C31301 * C31297) / C30229;
    const double C30278 = C30269 - C30275;
    const double C30268 = C30263 * de;
    const double C11647 = C552 * C30290;
    const double C118 =
        (C30290 / C30235 + (0 * ce) / C30229) / C30235 - (0 * de) / C30229;
    const double C668 = C30290 / C30235 - (0 * de) / C30229;
    const double C2536 = C30290 / C30235 + (0 * ce) / C30229;
    const double C10402 = C552 * C1091;
    const double C30267 = C30262 * ce;
    const double C293 =
        ((-C30230 / C30229) / C30235 - (C30248 * de) / C30229) / C30235 -
        ((C30227 * ((-C30237) / C30235 - (C30262 * de) / C30229) + C2635) *
         de) /
            C30229 +
        (-C30249 / C30229) / C30235 - (0 * de) / C30229;
    const double C294 =
        ((-C30237) / C30235 - (C30262 * de) / C30229) / C30235 -
        ((C30227 * ((-C30249 / C30229) / C30235 - (0 * de) / C30229) + C31165) *
         de) /
            C30229;
    const double C2641 = (-C30237) / C30235 - (C30262 * de) / C30229;
    const double C31492 = C31456 / C30229;
    const double C31526 = C31496 / C30235;
    const double C31527 = C31498 + C31464;
    const double C661 = C31464 - C31166 / C30241;
    const double C31495 = C31460 / C30229;
    const double C9396 = C9177 * C659;
    const double C9388 = C9175 * C659;
    const double C19698 = C551 * C659;
    const double C9863 = C9568 * C1160;
    const double C9893 = C9885 * C1160;
    const double C9895 = C9887 * C1160;
    const double C10284 = C10280 * C1160;
    const double C9891 = C9882 * C1160;
    const double C19429 = C554 * C295;
    const double C20915 = C554 * C1091;
    const double C22437 = C554 * C30290;
    const double C9164 = C558 * C295;
    const double C10408 = C558 * C1091;
    const double C11653 = C558 * C30290;
    const double C21349 = C558 * C30255;
    const double C22081 = C558 * C2642;
    const double C9555 = C970 * C295;
    const double C11659 = C970 * C30290;
    const double C12749 = C970 * C1091;
    const double C20625 = C970 * C30255;
    const double C22085 = C970 * C2642;
    const double C30431 = C30428 - C30413;
    const double C2198 = C2190 + C2191;
    const double C13871 = C13847 + C13848;
    const double C15809 = C15801 + C15802;
    const double C1612 = C1604 + C1605;
    const double C14373 = C14357 + C14358;
    const double C15099 = C15091 + C15092;
    const double C10783 = C10777 + C10778;
    const double C15952 = C15945 + C15946;
    const double C5503 =
        (4 * (2 * C30872 + C30372 * C30955 + C30873 * ae) +
         C30372 *
             (3 * C30955 +
              C30372 *
                  (2 * C30947 +
                   C30372 * (C30403 + C30372 * (C30372 * C30424 + C30489 * ae) +
                             C30372 * C30489 * ae) +
                   C30949 * ae) +
              C30954 * ae) +
         (3 * C30873 + C30372 * C30954) * ae) /
        C30350;
    const double C10617 = C10613 * C1160;
    const double C675 = C31383 * C314;
    const double C13470 = C13437 * C314;
    const double C358 = C31383 * C322;
    const double C14012 = C13437 * C322;
    const double C965 = C31383 * C946;
    const double C14154 = C13437 * C946;
    const double C164 = C113 * C124;
    const double C674 = C113 * C300;
    const double C13469 = C13441 * C300;
    const double C357 = C113 * C304;
    const double C14011 = C13441 * C304;
    const double C784 = C113 * C489;
    const double C546 = C113 * C493;
    const double C964 = C113 * C938;
    const double C14153 = C13441 * C938;
    const double C2195 = C31383 * C1305;
    const double C13858 = C13437 * C1305;
    const double C1609 = C31383 * C1311;
    const double C14368 = C13437 * C1311;
    const double C9172 = C2318 * C295;
    const double C10414 = C2318 * C1091;
    const double C12447 = C2318 * C30290;
    const double C21489 = C2318 * C30255;
    const double C23107 = C2318 * C2642;
    const double C14894 = C14887 + C14888;
    const double C10170 = C10166 + C10167;
    const double C15810 = C15803 + C15804;
    const double C15100 = C15093 + C15094;
    const double C20425 = C20421 + C20422;
    const double C30998 = C30996 + C30991;
    const double C30522 = C30369 * C30521;
    const double C30527 = -3 * C30521;
    const double C30602 = ae * C30521;
    const double C30600 = C30372 * C30521;
    const double C14891 = C13441 * C1176;
    const double C10168 = C113 * C1319;
    const double C15807 = C13441 * C1319;
    const double C15097 = C13441 * C1719;
    const double C20423 = C113 * C1719;
    const double C10276 = C113 * C5618;
    const double C25901 = C13441 * C5618;
    const double C26373 = C13441 * C5619;
    const double C30974 = C30372 * C30972;
    const double C6270 =
        (2 * C30571 * C30955 + C30571 * (C30955 + C30972 * C30608)) / C30350;
    const double C6272 =
        (3 * (C30955 + C30972 * C30608) +
         C30571 *
             (2 * C30571 * C30972 +
              C30571 *
                  (C30972 + (C30424 + C30372 * (C30372 * C30457 + C30530 * ae) +
                             C30372 * C30530 * ae) *
                                C30608))) /
        C30350;
    const double C11014 = C11012 * C1160;
    const double C135 =
        (-3 * (C30369 * C30501 + C30497 + C30794 * ce)) / C30229 +
        C30369 * ((-2 * C30501) / C30229 - (C30369 * C30506) / C30229 -
                  (C30796 * ce) / C30229) -
        ((2 * C30794 + C30369 * C30796) * ce) / C30229;
    const double C313 =
        C30372 * ((-2 * C30501) / C30229 - (C30369 * C30506) / C30229 -
                  (C30796 * ce) / C30229);
    const double C321 =
        -(C30506 * C30583 + C30369 * C30501 + C30497 + C30794 * ce) / C30229;
    const double C502 =
        C30571 * ((-2 * C30501) / C30229 - (C30369 * C30506) / C30229 -
                  (C30796 * ce) / C30229);
    const double C510 =
        -(C30506 * C30608 + C30369 * C30501 + C30497 + C30794 * ce) / C30229;
    const double C945 = -(C30571 * C30372 * C30506) / C30229;
    const double C1167 = (-2 * C30372 * C30506) / C30229 -
                         (C30372 * (C30521 * C30583 + C30506)) / C30229;
    const double C1310 = -(C30571 * (C30521 * C30583 + C30506)) / C30229;
    const double C2021 = (-2 * C30571 * C30506) / C30229 -
                         (C30571 * (C30521 * C30608 + C30506)) / C30229;
    const double C9896 = C9888 * C31155;
    const double C10165 = C9888 * C31457;
    const double C11818 = C9888 * C2635;
    const double C10285 = C10281 * C31155;
    const double C30656 = C30653 - C30413;
    const double C30472 = C30447 + C30470;
    const double C30551 = C30369 * C30549;
    const double C30603 = C30549 * C30583;
    const double C2032 =
        (-3 * (C30521 * C30608 + C30506)) / C30229 +
        C30571 * ((-2 * C30571 * C30521) / C30229 -
                  (C30571 * (C30549 * C30608 + C30521)) / C30229);
    const double C30735 = C30732 / C30229;
    const double C30687 = C30372 * C30684;
    const double C6630 =
        2 * C30571 * C30655 + C30571 * (C30655 + C30684 * C30608);
    const double C10278 = C113 * C5621;
    const double C25897 = C13441 * C5621;
    const double C26377 = C13441 * C5623;
    const double C30760 = C30758 - C30747;
    const double C125 = 5 * (3 * C30796 + C30369 * C30801) +
                        C30369 * (4 * C30801 + C30369 * C30806);
    const double C305 = 3 * C30796 + C30369 * C30801 + C30806 * C30583;
    const double C494 = 3 * C30796 + C30369 * C30801 + C30806 * C30608;
    const double C669 = C30372 * (4 * C30801 + C30369 * C30806);
    const double C779 = C30571 * (4 * C30801 + C30369 * C30806);
    const double C939 = C30571 * C30372 * C30806;
    const double C5501 = 5 * (3 * C30873 + C30372 * C30954) +
                         C30372 * (4 * C30954 + C30372 * C30975);
    const double C5620 = 3 * C30873 + C30372 * C30954 + C30975 * C30608;
    const double C5980 = C30571 * (4 * C30954 + C30372 * C30975);
    const double C144 =
        3 * ((-(C30394 * ce) / C30229) / C30350 - C30391 / C30380 +
             C30369 * C30410) -
        ((2 * C30394 + C30369 * C30407) * ce) / C30380 +
        C30369 *
            (2 * C30410 - (C30407 * ce) / C30380 +
             C30369 *
                 ((-(C30369 * C30403 * ce) / C30229) / C30350 -
                  C30402 / C30380 +
                  C30369 * ((-(C30369 * std::pow(C30374, 6) * bs[6] * C30385) /
                             C30229) /
                                C30350 -
                            (C30403 * ce) / C30380)));
    const double C328 =
        C30372 * ((-(C30394 * ce) / C30229) / C30350 - C30391 / C30380 +
                  C30369 * C30410) -
        (ae * (C30369 * (C30369 * C30387 * C30388 * C30479 + C30480 * ce) +
               C30381 * C30377 * C30479 + C30369 * C30480 * ce)) /
            C30380;
    const double C332 = (-(C30369 * C30391) / C30229) / C30350 -
                        (C30384 * ce) / C30380 -
                        (ae * C30372 * C30501) / C30380 +
                        C30372 * (C30372 * C30410 - (ae * C30501) / C30380);
    const double C517 = (zP - zQ) * ((-(C30394 * ce) / C30229) / C30350 -
                                     C30391 / C30380 + C30369 * C30410);
    const double C521 = (-(C30369 * C30391) / C30229) / C30350 -
                        (C30384 * ce) / C30380 + C30410 * std::pow(zP - zQ, 2);
    const double C951 =
        C30372 * C30571 * C30410 - (ae * C30571 * C30501) / C30380;
    const double C1182 =
        3 * ((-(ae * C30580) / C30229) / C30350 - C30391 / C30380 +
             C30372 * C30590) +
        (((-2 * C30580) / C30229 - (C30372 * C30588) / C30229) * ae) / C30350 +
        C30372 *
            (2 * C30590 - (ae * C30588) / C30380 +
             C30372 * ((-(ae * C30372 * C30490) / C30229) / C30350 - C30413 +
                       C30372 * ((-(C30372 * C30423) / C30229) / C30350 -
                                 (ae * C30490) / C30380)));
    const double C10618 = C10614 + C10615;
    const double C30437 = C30369 * C30436;
    const double C30440 = 2 * C30436;
    const double C30593 = C30372 * C30436;
    const double C30622 = C30571 * C30436;
    const double C30733 = C30436 - C30729;
    const double C1180 =
        2 * (C30372 * C30410 - (ae * C30501) / C30380) -
        (ae * (C30494 * std::pow(C30372, 2) + C30501)) / C30380 +
        C30372 * (C30410 - (ae * C30372 * C30494) / C30380 +
                  C30372 * (C30372 * C30436 - (ae * C30494) / C30380));
    const double C1323 = C30372 * (C30410 + C30436 * C30608) -
                         (ae * (C30494 * C30608 + C30501)) / C30380;
    const double C1326 =
        C30571 * C30410 - (ae * C30571 * C30592) / C30380 +
        C30372 * (C30372 * C30571 * C30436 - (ae * C30571 * C30494) / C30380);
    const double C2034 =
        2 * C30571 * C30410 + C30571 * (C30410 + C30436 * C30608);
    const double C30657 = C30372 * C30654;
    const double C30660 = 2 * C30654;
    const double C5627 =
        2 * (C30372 * C30697 - (ae * (C30490 * C30608 + C30484)) / C30380) -
        (ae * (C30645 * C30608 + C30588)) / C30380 +
        C30372 * (C30697 - (ae * (C30662 * C30608 + C30637)) / C30380 +
                  C30372 * (C30372 * ((-(C30456 * C30608) / C30229) / C30350 -
                                      C30443) -
                            (ae * (C30514 * C30608 + C30490)) / C30380));
    const double C30707 = C30706 - C30704;
    const double C30471 = C30369 * C30469;
    const double C30722 = C30372 * C30469;
    const double C30739 = C30571 * C30469;
    const double C30768 = C30469 * C30608;
    const double C1329 = C30410 + C30436 * C30608 -
                         (ae * (C30372 * C30518 * C30608 + C30592)) / C30380 +
                         C30372 * (C30372 * (C30436 + C30469 * C30608) -
                                   (ae * (C30518 * C30608 + C30494)) / C30380);
    const double C30686 = C30372 * C30683;
    const double C30718 = C30372 * C30717;
    const double C30773 = C30571 * C30717;
    const double C6275 =
        (-2 * C30620) / C30380 + C30571 * C30697 +
        (((-2 * C30571 * C30637) / C30229 -
          (C30571 * (C30662 * C30608 + C30637)) / C30229) *
         ae) /
            C30350 +
        C30372 * ((((-2 * C30700) / C30229 - (C30571 * C30712) / C30229) * ae) /
                      C30350 +
                  C30372 * ((-2 * C30699) / C30380 + C30571 * C30717));
    const double C6276 =
        (((-3 * (C30490 * C30608 + C30484)) / C30229 +
          C30571 * ((-2 * C30700) / C30229 - (C30571 * C30712) / C30229)) *
         ae) /
            C30350 +
        C30372 *
            (3 * C30697 + C30571 * ((-2 * C30699) / C30380 + C30571 * C30717));
    const double C6277 =
        3 * C30697 + C30571 * ((-2 * C30699) / C30380 + C30571 * C30717) +
        (((-3 * (C30662 * C30608 + C30637)) / C30229 +
          C30571 * ((-2 * C30746) / C30229 -
                    (C30571 * (C30372 * C30534 * C30608 + C30662)) / C30229)) *
         ae) /
            C30350 +
        C30372 * ((((-3 * C30712) / C30229 +
                    C30571 * ((-2 * C30749) / C30229 -
                              (C30571 * (C30534 * C30608 + C30514)) / C30229)) *
                   ae) /
                      C30350 +
                  C30372 * (3 * C30717 +
                            C30571 * ((-2 * C30748) / C30380 +
                                      C30571 * ((-(std::pow(C30374, 8) * bs[8] *
                                                   C30385 * C30608) /
                                                 C30229) /
                                                    C30350 -
                                                C30456 / C30380))));
    const double C30761 = C30759 - C30755;
    const double C31509 = C31478 / C30229;
    const double C31533 = C31512 / C30235;
    const double C31534 = C31513 + C31482;
    const double C1433 = C31482 - C31266 / C30241;
    const double C31511 = C31479 / C30229;
    const double C31515 = C31484 / C30229;
    const double C31536 = C31518 / C30235;
    const double C31537 = C31519 + C31488;
    const double C2301 = C31488 - C31306 / C30241;
    const double C31517 = C31485 / C30229;
    const double C30272 = C30268 / C30229;
    const double C9393 = C554 * C668;
    const double C11925 = C554 * C2536;
    const double C30271 = C30267 / C30229;
    const double C9185 = C9179 * C293;
    const double C9182 = C9176 * C293;
    const double C9180 = C9174 * C293;
    const double C9572 = C9568 * C293;
    const double C9570 = C9566 * C293;
    const double C19433 = C556 * C293;
    const double C19425 = C550 * C293;
    const double C19901 = C968 * C293;
    const double C9166 = C2316 * C294;
    const double C9162 = C556 * C294;
    const double C9154 = C550 * C294;
    const double C9549 = C968 * C294;
    const double C19431 = C558 * C294;
    const double C19427 = C552 * C294;
    const double C19899 = C970 * C294;
    const double C11377 = C9882 * C2641;
    const double C11375 = C9568 * C2641;
    const double C11371 = C9566 * C2641;
    const double C11367 = C9179 * C2641;
    const double C11361 = C9176 * C2641;
    const double C11357 = C9174 * C2641;
    const double C11817 = C9887 * C2641;
    const double C11813 = C9885 * C2641;
    const double C12180 = C10610 * C2641;
    const double C22087 = C968 * C2641;
    const double C22083 = C556 * C2641;
    const double C22077 = C550 * C2641;
    const double C23105 = C2316 * C2641;
    const double C31547 = C31492 + C31539;
    const double C660 = C31526 - (C31168 * C31151) / C30229;
    const double C105 = C31527 / C30235 - C31166 / C31499;
    const double C31540 = C31495 + C31526;
    const double C9884 = C9864 + C9863;
    const double C11006 = C9891 + C9892;
    const double C9557 = C2198 * C294;
    const double C10156 = C2198 * C30255;
    const double C11373 = C2198 * C2642;
    const double C20285 = C2198 * C1160;
    const double C22089 = C2198 * C2641;
    const double C10162 = C1612 * C30255;
    const double C11815 = C1612 * C2642;
    const double C20287 = C1612 * C1160;
    const double C22639 = C1612 * C2641;
    const double C10787 = C10783 * C30255;
    const double C11379 = C10783 * C2642;
    const double C21622 = C10783 * C1160;
    const double C176 = C164 + C165;
    const double C678 = C674 + C675;
    const double C13488 = C13469 + C13470;
    const double C371 = C357 + C358;
    const double C14018 = C14011 + C14012;
    const double C788 = C784 + C785;
    const double C560 = C546 + C547;
    const double C972 = C964 + C965;
    const double C14160 = C14153 + C14154;
    const double C2200 = C2194 + C2195;
    const double C13876 = C13857 + C13858;
    const double C1614 = C1608 + C1609;
    const double C14378 = C14367 + C14368;
    const double C10172 = C10170 * C30255;
    const double C11819 = C10170 * C2642;
    const double C20290 = C10170 * C1160;
    const double C20763 = C20425 * C1160;
    const double C5729 =
        (4 * (2 * C30880 + C30372 * C30998 + C30881 * ae) +
         C30372 * (3 * C30998 +
                   C30372 * (2 * C30990 +
                             C30372 * (C30442 +
                                       C30372 * (C30372 * C30369 * C30457 +
                                                 C30536 * ae) +
                                       C30372 * C30536 * ae) +
                             C30992 * ae) +
                   C30997 * ae) +
         (3 * C30881 + C30372 * C30997) * ae) /
        C30350;
    const double C5879 =
        (C30571 * (3 * C30998 +
                   C30372 * (2 * C30990 +
                             C30372 * (C30442 +
                                       C30372 * (C30372 * C30369 * C30457 +
                                                 C30536 * ae) +
                                       C30372 * C30536 * ae) +
                             C30992 * ae) +
                   C30997 * ae)) /
        C30350;
    const double C6425 =
        (2 * C30880 + C30372 * C30998 + C30881 * ae +
         (2 * C30990 +
          C30372 * (C30442 + C30372 * (C30372 * C30369 * C30457 + C30536 * ae) +
                    C30372 * C30536 * ae) +
          C30992 * ae) *
             C30608) /
        C30350;
    const double C6527 =
        (2 * C30571 * C30998 +
         C30571 * (C30998 +
                   (C30442 + C30372 * (C30372 * C30369 * C30457 + C30536 * ae) +
                    C30372 * C30536 * ae) *
                       C30608)) /
        C30350;
    const double C30523 = C30522 / C30229;
    const double C30532 = C30527 / C30229;
    const double C30604 = C30602 / C30380;
    const double C1304 = -(C30600 * C30608 + C30372 * C30506) / C30229;
    const double C2425 =
        (-2 * C30571 * C30600) / C30229 -
        (C30571 * (C30372 * C30549 * C30608 + C30600)) / C30229;
    const double C30976 = C30957 + C30974;
    const double C9880 = C31383 * C6270;
    const double C27240 = C13437 * C6270;
    const double C162 = C113 * C135;
    const double C13471 = C13440 * C135;
    const double C347 = C113 * C313;
    const double C13463 = C13441 * C313;
    const double C14013 = C13440 * C313;
    const double C355 = C113 * C321;
    const double C13665 = C13440 * C321;
    const double C13649 = C13441 * C321;
    const double C536 = C113 * C502;
    const double C14155 = C13440 * C502;
    const double C544 = C113 * C510;
    const double C13859 = C13440 * C510;
    const double C962 = C113 * C945;
    const double C13843 = C13441 * C945;
    const double C14369 = C13440 * C945;
    const double C1448 = C113 * C1167;
    const double C13667 = C13441 * C1167;
    const double C1610 = C113 * C1310;
    const double C14371 = C13441 * C1310;
    const double C2314 = C113 * C2021;
    const double C9899 = C9895 + C9896;
    const double C138 = (5 * (3 * C30407 + C30369 * C30435) +
                         C30369 * (4 * C30435 + C30369 * C30472)) /
                        C30350;
    const double C324 =
        (3 * C30407 + C30369 * C30435 +
         C30372 * (C30372 * C30472 + C30806 * ae) + C30372 * C30806 * ae) /
        C30350;
    const double C513 =
        (3 * C30407 + C30369 * C30435 + C30472 * C30608) / C30350;
    const double C670 = (C30372 * (4 * C30435 + C30369 * C30472) +
                         (4 * C30801 + C30369 * C30806) * ae) /
                        C30350;
    const double C780 = (C30571 * (4 * C30435 + C30369 * C30472)) / C30350;
    const double C948 = (C30571 * (C30372 * C30472 + C30806 * ae)) / C30350;
    const double C30552 = C30551 / C30229;
    const double C30605 = C30603 + C30521;
    const double C30737 = C30731 - C30735;
    const double C30689 = C30671 + C30687;
    const double C163 = C31383 * C144;
    const double C13472 = C13436 * C144;
    const double C344 = C31383 * C328;
    const double C13458 = C13437 * C328;
    const double C13652 = C13436 * C328;
    const double C352 = C31383 * C332;
    const double C13660 = C13436 * C332;
    const double C13644 = C13437 * C332;
    const double C533 = C31383 * C517;
    const double C13846 = C13436 * C517;
    const double C541 = C31383 * C521;
    const double C13854 = C13436 * C521;
    const double C959 = C31383 * C951;
    const double C13838 = C13437 * C951;
    const double C14364 = C13436 * C951;
    const double C30438 = C30431 + C30437;
    const double C30454 = C30440 - C30448;
    const double C30598 = C30593 - C30596;
    const double C1723 =
        2 * (C30372 * C30622 - (ae * C30571 * C30494) / C30380) -
        (ae * C30571 * C30597) / C30380 +
        C30372 * (C30622 - (ae * C30571 * C30372 * C30518) / C30380 +
                  C30372 * (C30372 * C30571 * C30469 -
                            (ae * C30571 * C30518) / C30380));
    const double C2037 =
        3 * (C30410 + C30436 * C30608) +
        C30571 * (2 * C30622 + C30571 * (C30436 + C30469 * C30608));
    const double C2427 =
        (((-2 * C30571 * C30494) / C30229 -
          (C30571 * (C30518 * C30608 + C30494)) / C30229) *
         ae) /
            C30350 +
        C30372 * (2 * C30622 + C30571 * (C30436 + C30469 * C30608));
    const double C1445 = C31383 * C1180;
    const double C13658 = C13437 * C1180;
    const double C14890 = C13436 * C1180;
    const double C2193 = C31383 * C1323;
    const double C13852 = C13437 * C1323;
    const double C15806 = C13436 * C1323;
    const double C1607 = C31383 * C1326;
    const double C14362 = C13437 * C1326;
    const double C15096 = C13436 * C1326;
    const double C2311 = C31383 * C2034;
    const double C15948 = C13436 * C2034;
    const double C30658 = C30656 + C30657;
    const double C30674 = C30660 - C30667;
    const double C10279 = C31383 * C5627;
    const double C25898 = C13437 * C5627;
    const double C5628 =
        3 * ((-(ae * C30571 * C30637) / C30229) / C30350 - C30620 / C30380 +
             C30372 * C30707) +
        (C30571 * C30655 * ae) / C30350 +
        C30372 * (2 * C30707 - (ae * C30571 * C30645) / C30380 +
                  C30372 * ((-(ae * C30571 * C30662) / C30229) / C30350 -
                            C30699 / C30380 +
                            C30372 * ((-(C30372 * C30571 * C30456) / C30229) /
                                          C30350 -
                                      (ae * C30571 * C30514) / C30380)));
    const double C30473 = C30464 + C30471;
    const double C30730 = C30722 - C30726;
    const double C30741 = C30372 * C30739;
    const double C30769 = C30436 + C30768;
    const double C10169 = C31383 * C1329;
    const double C15808 = C13437 * C1329;
    const double C30688 = C30685 + C30686;
    const double C30719 = C30718 - C30716;
    const double C30775 = C30774 + C30773;
    const double C9878 = C31383 * C6275;
    const double C27236 = C13437 * C6275;
    const double C11008 = C31383 * C6276;
    const double C26766 = C13437 * C6276;
    const double C30762 = C30372 * C30761;
    const double C31548 = C31509 + C31543;
    const double C1432 = C31533 - (C31268 * C31257) / C30229;
    const double C1158 = C31534 / C30235 - C31266 / C31499;
    const double C31544 = C31511 + C31533;
    const double C31549 = C31515 + C31545;
    const double C2300 = C31536 - (C31308 * C31297) / C30229;
    const double C2013 = C31537 / C30235 - C31306 / C31499;
    const double C31546 = C31517 + C31536;
    const double C30274 = C30271 - C30250;
    const double C9186 = C9182 + C9183;
    const double C11382 = C11374 + C11375;
    const double C12179 = C11366 + C11367;
    const double C11381 = C11361 + C11362;
    const double C11928 = C9177 * C31547;
    const double C11920 = C9175 * C31547;
    const double C22774 = C551 * C31547;
    const double C102 =
        (C31538 + 2 * C31160) / C30235 - (C31547 * C31151) / C30229;
    const double C9390 = C551 * C660;
    const double C11922 = C551 * C31540;
    const double C103 =
        (C31525 + 2 * C31168 + C31547) / C30235 - (C31540 * C31151) / C30229;
    const double C104 = (C31497 + C31165 / C30229 + C31540) / C30235 -
                        (C31527 * C31151) / C30229;
    const double C19703 = C788 * C668;
    const double C22779 = C788 * C2536;
    const double C9401 = C560 * C668;
    const double C11933 = C560 * C2536;
    const double C19435 = C560 * C295;
    const double C20921 = C560 * C1091;
    const double C23453 = C560 * C30290;
    const double C19903 = C972 * C295;
    const double C22443 = C972 * C30290;
    const double C23847 = C972 * C1091;
    const double C9563 = C2200 * C295;
    const double C11665 = C2200 * C30290;
    const double C12755 = C2200 * C1091;
    const double C21355 = C2200 * C30255;
    const double C22091 = C2200 * C2642;
    const double C20631 = C1614 * C30255;
    const double C22641 = C1614 * C2642;
    const double C30524 = C30513 - C30523;
    const double C2196 = C113 * C1304;
    const double C13861 = C13441 * C1304;
    const double C30977 = C30976 + C30961;
    const double C9890 = C9879 + C9880;
    const double C27245 = C27239 + C27240;
    const double C30553 = C30533 - C30552;
    const double C1178 =
        (-3 * (C30521 * C30583 + C30506)) / C30229 +
        C30372 * ((-2 * C30600) / C30229 - (C30372 * C30605) / C30229);
    const double C1321 = -(C30605 * C30608 + C30521 * C30583 + C30506) / C30229;
    const double C1721 =
        C30571 * ((-2 * C30600) / C30229 - (C30372 * C30605) / C30229);
    const double C5730 =
        4 * ((-2 * C30592) / C30229 - (C30372 * C30597) / C30229) +
        C30372 * ((-3 * C30597) / C30229 + C30372 * C30737);
    const double C5880 = C30571 * ((-3 * C30597) / C30229 + C30372 * C30737);
    const double C6426 =
        (-2 * C30592) / C30229 - (C30372 * C30597) / C30229 + C30737 * C30608;
    const double C5505 = 5 * ((-3 * C30588) / C30229 + C30372 * C30655) +
                         C30372 * (4 * C30655 + C30372 * C30689);
    const double C5626 =
        (-3 * C30588) / C30229 + C30372 * C30655 + C30689 * C30608;
    const double C5982 = C30571 * (4 * C30655 + C30372 * C30689);
    const double C175 = C162 + C163;
    const double C13489 = C13471 + C13472;
    const double C364 = C343 + C344;
    const double C13482 = C13457 + C13458;
    const double C13676 = C13651 + C13652;
    const double C368 = C351 + C352;
    const double C13680 = C13659 + C13660;
    const double C13672 = C13643 + C13644;
    const double C553 = C532 + C533;
    const double C13870 = C13845 + C13846;
    const double C557 = C540 + C541;
    const double C13874 = C13853 + C13854;
    const double C969 = C958 + C959;
    const double C13866 = C13837 + C13838;
    const double C14376 = C14363 + C14364;
    const double C145 =
        4 * (2 * C30410 - (C30407 * ce) / C30380 + C30369 * C30438) -
        ((3 * C30407 + C30369 * C30435) * ce) / C30380 +
        C30369 *
            (3 * C30438 - (C30435 * ce) / C30380 +
             C30369 * (2 * C30436 - (C30430 * ce) / C30380 +
                       C30369 * ((-(C30369 * C30424 * ce) / C30229) / C30350 -
                                 C30423 / C30380 +
                                 C30369 * ((-(C30369 * std::pow(C30376, 7) *
                                              bs[7] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30424 * ce) / C30380))));
    const double C329 =
        (((-2 * (C30369 * C30484 + C30480 * ce)) / C30229 -
          (C30369 *
           (C30369 * (C30369 * C30395 * C30396 * C30479 + C30483 * ce) +
            C30484 + C30369 * C30483 * ce)) /
              C30229 -
          ((C30480 + C30483 * C30398) * ce) / C30229) *
         ae) /
            C30350 +
        C30372 * (2 * C30410 - (C30407 * ce) / C30380 + C30369 * C30438);
    const double C333 = (-(C30394 * ce) / C30229) / C30350 - C30391 / C30380 +
                        C30369 * C30410 - (ae * C30372 * C30506) / C30380 +
                        C30372 * (C30372 * C30438 - (ae * C30506) / C30380);
    const double C518 =
        (zP - zQ) * (2 * C30410 - (C30407 * ce) / C30380 + C30369 * C30438);
    const double C522 = (-(C30394 * ce) / C30229) / C30350 - C30391 / C30380 +
                        C30369 * C30410 + C30438 * std::pow(zP - zQ, 2);
    const double C952 =
        C30372 * C30571 * C30438 - (ae * C30571 * C30506) / C30380;
    const double C1183 =
        3 * (C30410 - (ae * C30592) / C30380 + C30372 * C30598) +
        (((-2 * C30592) / C30229 - (C30372 * C30597) / C30229) * ae) / C30350 +
        C30372 *
            (2 * C30598 - (ae * C30597) / C30380 +
             C30372 * (C30436 - (ae * C30372 * C30518) / C30380 +
                       C30372 * (C30372 * C30469 - (ae * C30518) / C30380)));
    const double C15098 = C13437 * C1723;
    const double C20424 = C31383 * C1723;
    const double C10897 = C31383 * C2037;
    const double C10780 = C31383 * C2427;
    const double C15950 = C13437 * C2427;
    const double C1451 = C1444 + C1445;
    const double C13679 = C13657 + C13658;
    const double C14895 = C14889 + C14890;
    const double C2199 = C2192 + C2193;
    const double C13873 = C13851 + C13852;
    const double C15811 = C15805 + C15806;
    const double C1613 = C1606 + C1607;
    const double C14375 = C14361 + C14362;
    const double C15101 = C15095 + C15096;
    const double C2317 = C2310 + C2311;
    const double C15953 = C15947 + C15948;
    const double C5506 =
        4 * (2 * C30590 - (ae * C30588) / C30380 + C30372 * C30658) +
        (((-3 * C30588) / C30229 + C30372 * C30655) * ae) / C30350 +
        C30372 *
            (3 * C30658 + (C30655 * ae) / C30350 +
             C30372 *
                 (2 * C30654 - (ae * C30645) / C30380 +
                  C30372 *
                      ((-(ae * C30372 * C30514) / C30229) / C30350 - C30443 +
                       C30372 * ((-(C30372 * C30456) / C30229) / C30350 -
                                 (ae * C30514) / C30380))));
    const double C10283 = C10278 + C10279;
    const double C25913 = C25897 + C25898;
    const double C26378 = C13437 * C5628;
    const double C30474 = C30369 * C30473;
    const double C30601 = C30372 * C30473;
    const double C30624 = C30571 * C30473;
    const double C1179 =
        2 * (C30372 * C30438 - (ae * C30506) / C30380) -
        (ae * (C30521 * std::pow(C30372, 2) + C30506)) / C30380 +
        C30372 * (C30438 - (ae * C30372 * C30521) / C30380 +
                  C30372 * (C30372 * C30473 - (ae * C30521) / C30380));
    const double C1322 = C30372 * (C30438 + C30473 * C30608) -
                         (ae * (C30521 * C30608 + C30506)) / C30380;
    const double C1325 =
        C30571 * C30438 - (ae * C30571 * C30600) / C30380 +
        C30372 * (C30372 * C30571 * C30473 - (ae * C30571 * C30521) / C30380);
    const double C1330 =
        C30438 + C30473 * C30608 -
        (ae * (C30372 * C30549 * C30608 + C30600)) / C30380 +
        C30372 *
            (C30372 *
                 (C30473 +
                  ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                   C30456 / C30380 +
                   C30369 * ((-(C30369 * std::pow(C30374, 8) * bs[8] * C30385) /
                              C30229) /
                                 C30350 -
                             (C30457 * ce) / C30380)) *
                      C30608) -
             (ae * (C30549 * C30608 + C30521)) / C30380);
    const double C2033 =
        2 * C30571 * C30438 + C30571 * (C30438 + C30473 * C30608);
    const double C30734 = C30372 * C30730;
    const double C30744 = C30741 - C30743;
    const double C6427 =
        2 * (C30372 * C30769 - (ae * (C30518 * C30608 + C30494)) / C30380) -
        (ae * (C30728 * C30608 + C30597)) / C30380 +
        C30372 *
            (C30769 - (ae * (C30372 * C30541 * C30608 + C30721)) / C30380 +
             C30372 * (C30372 * (C30469 + ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380) *
                                              C30608) -
                       (ae * (C30541 * C30608 + C30518)) / C30380));
    const double C6529 =
        2 * C30622 + C30571 * C30769 +
        (((-2 * C30571 * C30721) / C30229 -
          (C30571 * (C30372 * C30541 * C30608 + C30721)) / C30229) *
         ae) /
            C30350 +
        C30372 *
            ((((-2 * C30740) / C30229 -
               (C30571 * (C30541 * C30608 + C30518)) / C30229) *
              ae) /
                 C30350 +
             C30372 * (2 * C30739 +
                       C30571 * (C30469 + ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380) *
                                              C30608)));
    const double C10767 =
        (((-3 * (C30518 * C30608 + C30494)) / C30229 +
          C30571 * ((-2 * C30740) / C30229 -
                    (C30571 * (C30541 * C30608 + C30518)) / C30229)) *
         ae) /
            C30350 +
        C30372 *
            (3 * C30769 +
             C30571 * (2 * C30739 +
                       C30571 * (C30469 + ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380) *
                                              C30608)));
    const double C10889 =
        4 * (2 * C30622 + C30571 * C30769) +
        C30571 *
            (3 * C30769 +
             C30571 * (2 * C30739 +
                       C30571 * (C30469 + ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380) *
                                              C30608)));
    const double C10171 = C10168 + C10169;
    const double C15812 = C15807 + C15808;
    const double C30690 = C30372 * C30688;
    const double C5629 =
        3 * (C30697 - (ae * (C30662 * C30608 + C30637)) / C30380 +
             C30372 * C30719) +
        ((C30655 + C30684 * C30608) * ae) / C30350 +
        C30372 *
            (2 * C30719 - (ae * (C30673 * C30608 + C30645)) / C30380 +
             C30372 *
                 (C30717 - (ae * (C30372 * C30534 * C30608 + C30662)) / C30380 +
                  C30372 * (C30372 * ((-(std::pow(C30374, 8) * bs[8] * C30385 *
                                         C30608) /
                                       C30229) /
                                          C30350 -
                                      C30456 / C30380) -
                            (ae * (C30534 * C30608 + C30514)) / C30380)));
    const double C6631 =
        2 * ((((-2 * C30700) / C30229 - (C30571 * C30712) / C30229) * ae) /
                 C30350 +
             C30372 * C30775) +
        (((-2 * C30571 * C30645) / C30229 -
          (C30571 * (C30673 * C30608 + C30645)) / C30229) *
         ae) /
            C30350 +
        C30372 * (C30775 +
                  (((-2 * C30746) / C30229 -
                    (C30571 * (C30372 * C30534 * C30608 + C30662)) / C30229) *
                   ae) /
                      C30350 +
                  C30372 * ((((-2 * C30749) / C30229 -
                              (C30571 * (C30534 * C30608 + C30514)) / C30229) *
                             ae) /
                                C30350 +
                            C30372 * ((-2 * C30748) / C30380 +
                                      C30571 * ((-(std::pow(C30374, 8) * bs[8] *
                                                   C30385 * C30608) /
                                                 C30229) /
                                                    C30350 -
                                                C30456 / C30380))));
    const double C10598 = 4 * ((-2 * C30620) / C30380 + C30571 * C30697) +
                          C30571 * (3 * C30697 + C30571 * C30775);
    const double C10599 =
        5 * (3 * C30697 + C30571 * C30775) +
        C30571 * (4 * C30775 +
                  C30571 * (3 * C30717 +
                            C30571 * ((-2 * C30748) / C30380 +
                                      C30571 * ((-(std::pow(C30374, 8) * bs[8] *
                                                   C30385 * C30608) /
                                                 C30229) /
                                                    C30350 -
                                                C30456 / C30380))));
    const double C11004 =
        ((4 * ((-2 * C30700) / C30229 - (C30571 * C30712) / C30229) +
          C30571 *
              ((-3 * C30712) / C30229 +
               C30571 * ((-2 * C30749) / C30229 -
                         (C30571 * (C30534 * C30608 + C30514)) / C30229))) *
         ae) /
            C30350 +
        C30372 * (4 * C30775 +
                  C30571 * (3 * C30717 +
                            C30571 * ((-2 * C30748) / C30380 +
                                      C30571 * ((-(std::pow(C30374, 8) * bs[8] *
                                                   C30385 * C30608) /
                                                 C30229) /
                                                    C30350 -
                                                C30456 / C30380))));
    const double C9889 = C9877 + C9878;
    const double C27243 = C27235 + C27236;
    const double C11011 = C11007 + C11008;
    const double C26777 = C26765 + C26766;
    const double C30763 = C30760 + C30762;
    const double C1155 =
        (C31541 + 2 * C31261) / C30235 - (C31548 * C31257) / C30229;
    const double C1156 =
        (C31529 + 2 * C31268 + C31548) / C30235 - (C31544 * C31257) / C30229;
    const double C1157 = (C31504 + C31265 / C30229 + C31544) / C30235 -
                         (C31534 * C31257) / C30229;
    const double C2010 =
        (C31542 + 2 * C31301) / C30235 - (C31549 * C31297) / C30229;
    const double C2011 =
        (C31531 + 2 * C31308 + C31549) / C30235 - (C31546 * C31297) / C30229;
    const double C2012 = (C31507 + C31305 / C30229 + C31546) / C30235 -
                         (C31537 * C31297) / C30229;
    const double C10164 = C9887 * C30274;
    const double C10160 = C9885 * C30274;
    const double C10158 = C9568 * C30274;
    const double C10154 = C9566 * C30274;
    const double C10148 = C9176 * C30274;
    const double C10144 = C9174 * C30274;
    const double C10775 = C9882 * C30274;
    const double C10772 = C9179 * C30274;
    const double C10892 = C10610 * C30274;
    const double C20629 = C1612 * C30274;
    const double C20627 = C968 * C30274;
    const double C20621 = C550 * C30274;
    const double C21353 = C2198 * C30274;
    const double C21351 = C556 * C30274;
    const double C21487 = C2316 * C30274;
    const double C30277 = C30274 / C30235;
    const double C30276 = C30227 * C30274;
    const double C9187 = C9186 - C9162;
    const double C11384 = C11373 - C11382;
    const double C12184 = C11365 - C12179;
    const double C11383 = C11381 - C11363;
    const double C30525 = C30524 - C30516;
    const double C5504 =
        (5 * (3 * C30955 + C30372 * C30977 + C30954 * ae) +
         C30372 * (4 * C30977 +
                   C30372 * (3 * C30972 +
                             C30372 * (2 * C30964 +
                                       C30372 * (C30424 +
                                                 C30372 * (C30372 * C30457 +
                                                           C30530 * ae) +
                                                 C30372 * C30530 * ae) +
                                       C30966 * ae) +
                             C30971 * ae) +
                   C30975 * ae) +
         (4 * C30954 + C30372 * C30975) * ae) /
        C30350;
    const double C5622 =
        (2 * C30872 + C30372 * C30955 + C30873 * ae + C30977 * C30608) / C30350;
    const double C5624 =
        (C30571 * (3 * C30955 + C30372 * C30977 + C30954 * ae)) / C30350;
    const double C5625 =
        (3 * C30955 + C30372 * C30977 + C30954 * ae +
         (3 * C30972 +
          C30372 *
              (2 * C30964 +
               C30372 * (C30424 + C30372 * (C30372 * C30457 + C30530 * ae) +
                         C30372 * C30530 * ae) +
               C30966 * ae) +
          C30971 * ae) *
             C30608) /
        C30350;
    const double C5981 =
        (C30571 *
         (4 * C30977 +
          C30372 *
              (3 * C30972 +
               C30372 * (2 * C30964 +
                         C30372 * (C30424 +
                                   C30372 * (C30372 * C30457 + C30530 * ae) +
                                   C30372 * C30530 * ae) +
                         C30966 * ae) +
               C30971 * ae) +
          C30975 * ae)) /
        C30350;
    const double C6629 =
        (2 * C30571 * C30977 +
         C30571 *
             (C30977 +
              (2 * C30964 +
               C30372 * (C30424 + C30372 * (C30372 * C30457 + C30530 * ae) +
                         C30372 * C30530 * ae) +
               C30966 * ae) *
                  C30608)) /
        C30350;
    const double C9898 = C9890 * C1160;
    const double C30554 = C30553 - C30545;
    const double C9157 = C553 * C31497;
    const double C9392 = C553 * C661;
    const double C10403 = C553 * C31497;
    const double C11648 = C553 * C2901;
    const double C11924 = C553 * C31527;
    const double C19428 = C553 * C288;
    const double C19700 = C553 * C660;
    const double C20624 = C553 * C31165;
    const double C20914 = C553 * C31525;
    const double C22080 = C553 * C31165;
    const double C22436 = C553 * C31168;
    const double C22776 = C553 * C31540;
    const double C9163 = C557 * C288;
    const double C9398 = C557 * C660;
    const double C10151 = C557 * C31165;
    const double C10407 = C557 * C31525;
    const double C11364 = C557 * C31165;
    const double C11652 = C557 * C31168;
    const double C11930 = C557 * C31540;
    const double C19432 = C557 * C287;
    const double C20281 = C557 * C31155;
    const double C20918 = C557 * C31538;
    const double C21350 = C557 * C31457;
    const double C22082 = C557 * C2635;
    const double C23450 = C557 * C31160;
    const double C9554 = C969 * C288;
    const double C10155 = C969 * C31165;
    const double C11372 = C969 * C31165;
    const double C11658 = C969 * C31168;
    const double C12748 = C969 * C31525;
    const double C19900 = C969 * C287;
    const double C20284 = C969 * C31155;
    const double C20626 = C969 * C31457;
    const double C22086 = C969 * C2635;
    const double C22440 = C969 * C31160;
    const double C23844 = C969 * C31538;
    const double C167 = C31383 * C145;
    const double C348 = C31383 * C329;
    const double C13464 = C13437 * C329;
    const double C14014 = C13436 * C329;
    const double C356 = C31383 * C333;
    const double C13666 = C13436 * C333;
    const double C13650 = C13437 * C333;
    const double C537 = C31383 * C518;
    const double C14156 = C13436 * C518;
    const double C545 = C31383 * C522;
    const double C13860 = C13436 * C522;
    const double C963 = C31383 * C952;
    const double C13844 = C13437 * C952;
    const double C14370 = C13436 * C952;
    const double C14892 = C13437 * C1183;
    const double C15102 = C15097 + C15098;
    const double C20426 = C20423 + C20424;
    const double C10900 = C10896 + C10897;
    const double C10784 = C10779 + C10780;
    const double C15954 = C15949 + C15950;
    const double C9562 = C2199 * C288;
    const double C10159 = C2199 * C31165;
    const double C11376 = C2199 * C31165;
    const double C11664 = C2199 * C31168;
    const double C12754 = C2199 * C31525;
    const double C20286 = C2199 * C31155;
    const double C21354 = C2199 * C31457;
    const double C22090 = C2199 * C2635;
    const double C10163 = C1613 * C31165;
    const double C11816 = C1613 * C31165;
    const double C20288 = C1613 * C31155;
    const double C20630 = C1613 * C31457;
    const double C22640 = C1613 * C2635;
    const double C9171 = C2317 * C288;
    const double C10413 = C2317 * C31525;
    const double C10773 = C2317 * C31165;
    const double C11368 = C2317 * C31165;
    const double C12446 = C2317 * C31168;
    const double C21152 = C2317 * C31155;
    const double C21488 = C2317 * C31457;
    const double C23106 = C2317 * C2635;
    const double C10287 = C10283 * C31155;
    const double C26382 = C26377 + C26378;
    const double C30475 = C30454 + C30474;
    const double C30606 = C30601 - C30604;
    const double C1724 =
        2 * (C30372 * C30624 - (ae * C30571 * C30521) / C30380) -
        (ae * C30571 * C30605) / C30380 +
        C30372 * (C30624 - (ae * C30571 * C30372 * C30549) / C30380 +
                  C30372 * (C30372 * C30571 *
                                ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                                 C30456 / C30380 +
                                 C30369 * ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380)) -
                            (ae * C30571 * C30549) / C30380));
    const double C2038 =
        3 * (C30438 + C30473 * C30608) +
        C30571 *
            (2 * C30624 +
             C30571 *
                 (C30473 +
                  ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                   C30456 / C30380 +
                   C30369 * ((-(C30369 * std::pow(C30374, 8) * bs[8] * C30385) /
                              C30229) /
                                 C30350 -
                             (C30457 * ce) / C30380)) *
                      C30608));
    const double C2428 =
        (((-2 * C30571 * C30521) / C30229 -
          (C30571 * (C30549 * C30608 + C30521)) / C30229) *
         ae) /
            C30350 +
        C30372 *
            (2 * C30624 +
             C30571 *
                 (C30473 +
                  ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                   C30456 / C30380 +
                   C30369 * ((-(C30369 * std::pow(C30374, 8) * bs[8] * C30385) /
                              C30229) /
                                 C30350 -
                             (C30457 * ce) / C30380)) *
                      C30608));
    const double C1449 = C31383 * C1179;
    const double C13668 = C13437 * C1179;
    const double C2197 = C31383 * C1322;
    const double C13862 = C13437 * C1322;
    const double C1611 = C31383 * C1325;
    const double C14372 = C13437 * C1325;
    const double C2315 = C31383 * C2033;
    const double C30736 = C30733 + C30734;
    const double C5881 =
        3 * (C30622 - (ae * C30571 * C30721) / C30380 + C30372 * C30744) +
        (C30571 * C30737 * ae) / C30350 +
        C30372 * (2 * C30744 - (ae * C30571 * C30728) / C30380 +
                  C30372 * (C30739 - (ae * C30571 * C30372 * C30541) / C30380 +
                            C30372 * (C30372 * C30571 *
                                          ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380) -
                                      (ae * C30571 * C30541) / C30380)));
    const double C10173 = C10171 * C31165;
    const double C11820 = C10171 * C31165;
    const double C20289 = C10171 * C31155;
    const double C30691 = C30674 + C30690;
    const double C10607 = C31383 * C10598;
    const double C9897 = C9889 * C31155;
    const double C11013 = C11011 * C31155;
    const double C5983 =
        4 * (2 * C30707 - (ae * C30571 * C30645) / C30380 + C30372 * C30763) +
        (C30571 * C30689 * ae) / C30350 +
        C30372 *
            (3 * C30763 + (C30571 * C30684 * ae) / C30350 +
             C30372 *
                 (2 * C30761 - (ae * C30571 * C30673) / C30380 +
                  C30372 *
                      ((-(ae * C30571 * C30372 * C30534) / C30229) / C30350 -
                       C30748 / C30380 +
                       C30372 * ((-(C30372 * C30571 * std::pow(C30374, 8) *
                                    bs[8] * C30385) /
                                  C30229) /
                                     C30350 -
                                 (ae * C30571 * C30534) / C30380))));
    const double C10774 = C10157 + C10158;
    const double C10769 = C10148 + C10149;
    const double C10891 = C10771 + C10772;
    const double C30280 = C30277 - C30272;
    const double C1090 = C30277 + (C30263 * ce) / C30229;
    const double C30279 = C30276 + C31457;
    const double C137 =
        4 * ((-2 * C30501) / C30229 - (C30369 * C30506) / C30229 -
             (C30796 * ce) / C30229) +
        C30369 * ((-3 * C30506) / C30229 + C30369 * C30525 -
                  (C30801 * ce) / C30229) -
        ((3 * C30796 + C30369 * C30801) * ce) / C30229;
    const double C315 = C30372 * ((-3 * C30506) / C30229 + C30369 * C30525 -
                                  (C30801 * ce) / C30229);
    const double C323 = (-2 * C30501) / C30229 - (C30369 * C30506) / C30229 -
                        (C30796 * ce) / C30229 + C30525 * C30583;
    const double C504 = C30571 * ((-3 * C30506) / C30229 + C30369 * C30525 -
                                  (C30801 * ce) / C30229);
    const double C512 = (-2 * C30501) / C30229 - (C30369 * C30506) / C30229 -
                        (C30796 * ce) / C30229 + C30525 * C30608;
    const double C947 = C30571 * C30372 * C30525;
    const double C10277 = C31383 * C5622;
    const double C25902 = C13437 * C5622;
    const double C26374 = C13437 * C5624;
    const double C30555 = C30369 * C30554;
    const double C1439 =
        2 * C30372 * C30525 + C30372 * (C30525 + C30554 * C30583);
    const double C1601 = C30571 * (C30525 + C30554 * C30583);
    const double C2187 = C30372 * C30525 + C30372 * C30554 * C30608;
    const double C2305 =
        2 * C30571 * C30525 + C30571 * (C30525 + C30554 * C30608);
    const double C9188 = C9187 - C9163;
    const double C11385 = C11383 - C11364;
    const double C366 = C347 + C348;
    const double C13485 = C13463 + C13464;
    const double C14019 = C14013 + C14014;
    const double C370 = C355 + C356;
    const double C13683 = C13665 + C13666;
    const double C13675 = C13649 + C13650;
    const double C555 = C536 + C537;
    const double C14161 = C14155 + C14156;
    const double C559 = C544 + C545;
    const double C13877 = C13859 + C13860;
    const double C971 = C962 + C963;
    const double C13869 = C13843 + C13844;
    const double C14379 = C14369 + C14370;
    const double C14896 = C14891 + C14892;
    const double C20764 = C20426 * C31155;
    const double C10903 = C10900 * C31165;
    const double C12183 = C10900 * C31165;
    const double C21153 = C10900 * C31155;
    const double C10788 = C10784 * C31165;
    const double C11380 = C10784 * C31165;
    const double C21621 = C10784 * C31155;
    const double C11386 = C11384 + C11376;
    const double C12185 = C12184 + C11368;
    const double C146 =
        5 * (3 * C30438 - (C30435 * ce) / C30380 + C30369 * C30475) -
        ((4 * C30435 + C30369 * C30472) * ce) / C30380 +
        C30369 *
            (4 * C30475 - (C30472 * ce) / C30380 +
             C30369 *
                 (3 * C30473 - (C30468 * ce) / C30380 +
                  C30369 *
                      (2 * C30469 - (C30463 * ce) / C30380 +
                       C30369 * ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                                 C30456 / C30380 +
                                 C30369 * ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380)))));
    const double C330 =
        (((-3 * (C30369 * C30494 + C30484 + C30488 * ce)) / C30229 +
          C30369 * ((-2 * C30494) / C30229 -
                    (C30369 * (C30369 * (C30369 * C30414 * C30415 * C30479 +
                                         C30489 * ce) +
                               C30490 + C30369 * C30489 * ce)) /
                        C30229 -
                    (C30493 * ce) / C30229) -
          ((2 * C30488 + C30369 * C30493) * ce) / C30229) *
         ae) /
            C30350 +
        C30372 * (3 * C30438 - (C30435 * ce) / C30380 + C30369 * C30475);
    const double C334 = 2 * C30410 - (C30407 * ce) / C30380 + C30369 * C30438 +
                        (C30372 * C30525 * ae) / C30350 +
                        C30372 * ((C30525 * ae) / C30350 + C30372 * C30475);
    const double C519 =
        (zP - zQ) * (3 * C30438 - (C30435 * ce) / C30380 + C30369 * C30475);
    const double C523 = 2 * C30410 - (C30407 * ce) / C30380 + C30369 * C30438 +
                        C30475 * std::pow(zP - zQ, 2);
    const double C524 =
        3 * C30438 - (C30435 * ce) / C30380 + C30369 * C30475 +
        (3 * C30473 - (C30468 * ce) / C30380 +
         C30369 *
             (2 * C30469 - (C30463 * ce) / C30380 +
              C30369 *
                  ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                   C30456 / C30380 +
                   C30369 * ((-(C30369 * std::pow(C30374, 8) * bs[8] * C30385) /
                              C30229) /
                                 C30350 -
                             (C30457 * ce) / C30380)))) *
            std::pow(zP - zQ, 2);
    const double C782 =
        (zP - zQ) *
        (4 * C30475 - (C30472 * ce) / C30380 +
         C30369 *
             (3 * C30473 - (C30468 * ce) / C30380 +
              C30369 * (2 * C30469 - (C30463 * ce) / C30380 +
                        C30369 * ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                                  C30456 / C30380 +
                                  C30369 * ((-(C30369 * std::pow(C30374, 8) *
                                               bs[8] * C30385) /
                                             C30229) /
                                                C30350 -
                                            (C30457 * ce) / C30380)))));
    const double C953 =
        (C30571 * C30525 * ae) / C30350 + C30372 * C30571 * C30475;
    const double C1440 =
        2 * ((C30525 * ae) / C30350 + C30372 * C30475) +
        ((C30525 + C30554 * C30583) * ae) / C30350 +
        C30372 *
            (C30475 + (C30372 * C30554 * ae) / C30350 +
             C30372 *
                 ((C30554 * ae) / C30350 +
                  C30372 *
                      (2 * C30469 - (C30463 * ce) / C30380 +
                       C30369 * ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                                 C30456 / C30380 +
                                 C30369 * ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380)))));
    const double C1602 =
        C30571 * C30475 + (C30571 * C30372 * C30554 * ae) / C30350 +
        C30372 * ((C30571 * C30554 * ae) / C30350 +
                  C30372 * C30571 *
                      (2 * C30469 - (C30463 * ce) / C30380 +
                       C30369 * ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                                 C30456 / C30380 +
                                 C30369 * ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380))));
    const double C2188 =
        ((C30525 + C30554 * C30608) * ae) / C30350 +
        C30372 *
            (C30475 +
             (2 * C30469 - (C30463 * ce) / C30380 +
              C30369 *
                  ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                   C30456 / C30380 +
                   C30369 * ((-(C30369 * std::pow(C30374, 8) * bs[8] * C30385) /
                              C30229) /
                                 C30350 -
                             (C30457 * ce) / C30380))) *
                 C30608);
    const double C2306 =
        2 * C30571 * C30475 +
        C30571 *
            (C30475 +
             (2 * C30469 - (C30463 * ce) / C30380 +
              C30369 *
                  ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                   C30456 / C30380 +
                   C30369 * ((-(C30369 * std::pow(C30374, 8) * bs[8] * C30385) /
                              C30229) /
                                 C30350 -
                             (C30457 * ce) / C30380))) *
                 C30608);
    const double C1184 =
        3 * (C30438 - (ae * C30600) / C30380 + C30372 * C30606) +
        (((-2 * C30600) / C30229 - (C30372 * C30605) / C30229) * ae) / C30350 +
        C30372 *
            (2 * C30606 - (ae * C30605) / C30380 +
             C30372 *
                 (C30473 - (ae * C30372 * C30549) / C30380 +
                  C30372 *
                      (C30372 * ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                                 C30456 / C30380 +
                                 C30369 * ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380)) -
                       (ae * C30549) / C30380)));
    const double C1453 = C1448 + C1449;
    const double C13684 = C13667 + C13668;
    const double C2201 = C2196 + C2197;
    const double C13878 = C13861 + C13862;
    const double C1615 = C1610 + C1611;
    const double C14380 = C14371 + C14372;
    const double C2319 = C2314 + C2315;
    const double C5731 =
        4 * (2 * C30598 - (ae * C30597) / C30380 + C30372 * C30736) +
        (((-3 * C30597) / C30229 + C30372 * C30737) * ae) / C30350 +
        C30372 *
            (3 * C30736 + (C30737 * ae) / C30350 +
             C30372 *
                 (2 * C30730 - (ae * C30728) / C30380 +
                  C30372 *
                      (C30469 - (ae * C30372 * C30541) / C30380 +
                       C30372 * (C30372 * ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380) -
                                 (ae * C30541) / C30380))));
    const double C5507 =
        5 * (3 * C30658 + (C30655 * ae) / C30350 + C30372 * C30691) +
        ((4 * C30655 + C30372 * C30689) * ae) / C30350 +
        C30372 *
            (4 * C30691 + (C30689 * ae) / C30350 +
             C30372 *
                 (3 * C30688 + (C30684 * ae) / C30350 +
                  C30372 *
                      (2 * C30683 - (ae * C30673) / C30380 +
                       C30372 * ((-(ae * C30372 * C30534) / C30229) / C30350 -
                                 C30456 / C30380 +
                                 C30372 * ((-(C30372 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (ae * C30534) / C30380)))));
    const double C10612 = C10606 + C10607;
    const double C10782 = C10156 - C10774;
    const double C10781 = C10769 - C10150;
    const double C10898 = C10770 - C10891;
    const double C11661 = C2198 * C30280;
    const double C11655 = C968 * C30280;
    const double C11651 = C556 * C30280;
    const double C11645 = C550 * C30280;
    const double C12443 = C2316 * C30280;
    const double C22439 = C970 * C30280;
    const double C22435 = C552 * C30280;
    const double C23449 = C558 * C30280;
    const double C117 =
        (C30280 / C30235 + ((C30227 * C30290 + C2901) * ce) / C30229) / C30235 -
        ((C30227 * (C30290 / C30235 + (0 * ce) / C30229) + C31508) * de) /
            C30229;
    const double C667 =
        C30280 / C30235 - ((C30227 * C30290 + C2901) * de) / C30229;
    const double C2535 =
        C30280 / C30235 + ((C30227 * C30290 + C2901) * ce) / C30229;
    const double C10410 = C2316 * C1090;
    const double C10406 = C556 * C1090;
    const double C10400 = C550 * C1090;
    const double C12751 = C2198 * C1090;
    const double C12745 = C968 * C1090;
    const double C20917 = C558 * C1090;
    const double C20913 = C552 * C1090;
    const double C23843 = C970 * C1090;
    const double C30281 = C30279 * de;
    const double C1089 = C30266 + (C30279 * ce) / C30229 + C30255;
    const double C166 = C113 * C137;
    const double C676 = C113 * C315;
    const double C13473 = C13441 * C315;
    const double C359 = C113 * C323;
    const double C14015 = C13441 * C323;
    const double C786 = C113 * C504;
    const double C548 = C113 * C512;
    const double C966 = C113 * C947;
    const double C14157 = C13441 * C947;
    const double C10282 = C10276 + C10277;
    const double C25915 = C25901 + C25902;
    const double C26380 = C26373 + C26374;
    const double C30556 = C30532 + C30555;
    const double C9189 = C9188 + C9164;
    const double C9394 = C555 * C31508;
    const double C11926 = C555 * C31508;
    const double C19430 = C555 * C31497;
    const double C19702 = C555 * C661;
    const double C20916 = C555 * C31497;
    const double C22438 = C555 * C2901;
    const double C22778 = C555 * C31527;
    const double C9165 = C559 * C31497;
    const double C9400 = C559 * C661;
    const double C10409 = C559 * C31497;
    const double C11654 = C559 * C2901;
    const double C11932 = C559 * C31527;
    const double C19434 = C559 * C288;
    const double C20920 = C559 * C31525;
    const double C21352 = C559 * C31165;
    const double C22084 = C559 * C31165;
    const double C23452 = C559 * C31168;
    const double C9556 = C971 * C31497;
    const double C11660 = C971 * C2901;
    const double C12750 = C971 * C31497;
    const double C19902 = C971 * C288;
    const double C20628 = C971 * C31165;
    const double C22088 = C971 * C31165;
    const double C22442 = C971 * C31168;
    const double C23846 = C971 * C31525;
    const double C677 = C31383 * C330;
    const double C13474 = C13437 * C330;
    const double C360 = C31383 * C334;
    const double C14016 = C13437 * C334;
    const double C787 = C31383 * C519;
    const double C549 = C31383 * C523;
    const double C967 = C31383 * C953;
    const double C14158 = C13437 * C953;
    const double C9564 = C2201 * C31497;
    const double C11666 = C2201 * C2901;
    const double C12756 = C2201 * C31497;
    const double C21356 = C2201 * C31165;
    const double C22092 = C2201 * C31165;
    const double C20632 = C1615 * C31165;
    const double C22642 = C1615 * C31165;
    const double C9173 = C2319 * C31497;
    const double C10415 = C2319 * C31497;
    const double C12448 = C2319 * C2901;
    const double C21490 = C2319 * C31165;
    const double C23108 = C2319 * C31165;
    const double C10616 = C10612 * C31155;
    const double C10786 = C10782 + C10159;
    const double C10785 = C10781 - C10151;
    const double C10901 = C10898 + C10773;
    const double C9399 = C558 * C667;
    const double C9391 = C552 * C667;
    const double C19701 = C554 * C667;
    const double C11931 = C558 * C2535;
    const double C11923 = C552 * C2535;
    const double C22777 = C554 * C2535;
    const double C30282 = C30281 / C30229;
    const double C10412 = C9179 * C1089;
    const double C10404 = C9176 * C1089;
    const double C10398 = C9174 * C1089;
    const double C12753 = C9568 * C1089;
    const double C12747 = C9566 * C1089;
    const double C20919 = C556 * C1089;
    const double C20911 = C550 * C1089;
    const double C23845 = C968 * C1089;
    const double C177 = C166 + C167;
    const double C10286 = C10282 * C1160;
    const double C30557 = C30556 - C30550;
    const double C9190 = C9189 + C9165;
    const double C679 = C676 + C677;
    const double C13490 = C13473 + C13474;
    const double C372 = C359 + C360;
    const double C14020 = C14015 + C14016;
    const double C789 = C786 + C787;
    const double C561 = C548 + C549;
    const double C973 = C966 + C967;
    const double C14162 = C14157 + C14158;
    const double C30283 = C30266 - C30282;
    const double C10416 = C10404 + C10405;
    const double C335 =
        3 * C30438 - (C30435 * ce) / C30380 + C30369 * C30475 +
        (C30372 * C30557 * ae) / C30350 +
        C30372 *
            ((C30557 * ae) / C30350 +
             C30372 *
                 (3 * C30473 - (C30468 * ce) / C30380 +
                  C30369 *
                      (2 * C30469 - (C30463 * ce) / C30380 +
                       C30369 * ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                                 C30456 / C30380 +
                                 C30369 * ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380)))));
    const double C672 =
        ((4 * C30525 + C30369 * C30557 -
          ((3 * C30493 + C30369 * C30546) * ce) / C30229) *
         ae) /
            C30350 +
        C30372 *
            (4 * C30475 - (C30472 * ce) / C30380 +
             C30369 *
                 (3 * C30473 - (C30468 * ce) / C30380 +
                  C30369 *
                      (2 * C30469 - (C30463 * ce) / C30380 +
                       C30369 * ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                                 C30456 / C30380 +
                                 C30369 * ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380)))));
    const double C954 =
        (C30571 * C30557 * ae) / C30350 +
        C30372 * C30571 *
            (3 * C30473 - (C30468 * ce) / C30380 +
             C30369 * (2 * C30469 - (C30463 * ce) / C30380 +
                       C30369 * ((-(C30369 * C30457 * ce) / C30229) / C30350 -
                                 C30456 / C30380 +
                                 C30369 * ((-(C30369 * std::pow(C30374, 8) *
                                              bs[8] * C30385) /
                                            C30229) /
                                               C30350 -
                                           (C30457 * ce) / C30380))));
    const double C139 =
        5 * ((-3 * C30506) / C30229 + C30369 * C30525 -
             (C30801 * ce) / C30229) +
        C30369 * (4 * C30525 + C30369 * C30557 - (C30806 * ce) / C30229) -
        ((4 * C30801 + C30369 * C30806) * ce) / C30229;
    const double C325 = (-3 * C30506) / C30229 + C30369 * C30525 -
                        (C30801 * ce) / C30229 + C30557 * C30583;
    const double C514 = (-3 * C30506) / C30229 + C30369 * C30525 -
                        (C30801 * ce) / C30229 + C30557 * C30608;
    const double C671 =
        C30372 * (4 * C30525 + C30369 * C30557 - (C30806 * ce) / C30229);
    const double C781 =
        C30571 * (4 * C30525 + C30369 * C30557 - (C30806 * ce) / C30229);
    const double C949 = C30571 * C30372 * C30557;
    const double C19704 = C789 * C31508;
    const double C22780 = C789 * C31508;
    const double C9402 = C561 * C31508;
    const double C11934 = C561 * C31508;
    const double C19436 = C561 * C31497;
    const double C20922 = C561 * C31497;
    const double C23454 = C561 * C2901;
    const double C19904 = C973 * C31497;
    const double C22444 = C973 * C2901;
    const double C23848 = C973 * C31497;
    const double C30284 = C30283 + C30255;
    const double C10417 = C10416 - C10406;
    const double C11663 = C9568 * C30284;
    const double C11657 = C9566 * C30284;
    const double C11649 = C9176 * C30284;
    const double C11643 = C9174 * C30284;
    const double C12445 = C9179 * C30284;
    const double C22441 = C968 * C30284;
    const double C22433 = C550 * C30284;
    const double C23451 = C556 * C30284;
    const double C114 =
        (((((0 - (C30227 * C30228) / C30229) * ce) / C30229 -
           (0 * de) / C30241 + (2 * C30230) / C30229) /
              C30235 -
          ((C30227 * C30264 + 0) * de) / C30229 + C30247 - C30257) /
             C30235 +
         ((C30227 * C30278 + 0) * ce) / C30229) /
            C30235 -
        ((C30227 * (C30278 / C30235 +
                    ((C30227 * C30284 + C31160) * ce) / C30229 + C30280) +
          C31547) *
         de) /
            C30229 +
        C30284 / C30235 + ((C30227 * C30280 + C31168) * ce) / C30229 +
        2 * (C30255 / C30235 - (0 * de) / C30229);
    const double C115 =
        (C30278 / C30235 + ((C30227 * C30284 + C31160) * ce) / C30229 +
         C30280) /
            C30235 -
        ((C30227 * (C30284 / C30235 +
                    ((C30227 * C30280 + C31168) * ce) / C30229 + 2 * C30290) +
          C31540) *
         de) /
            C30229 +
        2 * (C30280 / C30235 + ((C30227 * C30290 + C2901) * ce) / C30229);
    const double C116 =
        (C30284 / C30235 + ((C30227 * C30280 + C31168) * ce) / C30229 +
         2 * C30290) /
            C30235 -
        ((C30227 *
              (C30280 / C30235 + ((C30227 * C30290 + C2901) * ce) / C30229) +
          C31527) *
         de) /
            C30229 +
        3 * (C30290 / C30235 + (0 * ce) / C30229);
    const double C665 =
        C30278 / C30235 - ((C30227 * C30284 + C31160) * de) / C30229 + C30280;
    const double C666 = C30284 / C30235 -
                        ((C30227 * C30280 + C31168) * de) / C30229 + 2 * C30290;
    const double C2533 =
        C30278 / C30235 + ((C30227 * C30284 + C31160) * ce) / C30229 + C30280;
    const double C2534 = C30284 / C30235 +
                         ((C30227 * C30280 + C31168) * ce) / C30229 +
                         2 * C30290;
    const double C10418 = C10417 - C10407;
    const double C12442 = C11649 + C11650;
    const double C9395 = C9176 * C665;
    const double C9387 = C9174 * C665;
    const double C19697 = C550 * C665;
    const double C9397 = C556 * C666;
    const double C9389 = C550 * C666;
    const double C19699 = C552 * C666;
    const double C11927 = C9176 * C2533;
    const double C11919 = C9174 * C2533;
    const double C22773 = C550 * C2533;
    const double C11929 = C556 * C2534;
    const double C11921 = C550 * C2534;
    const double C22775 = C552 * C2534;
    const double C10419 = C10418 + C10408;
    const double C12449 = C12442 - C11651;
    const double C10420 = C10419 + C10409;
    const double C12450 = C12449 - C11652;
    const double C12451 = C12450 + C11653;
    const double C12452 = C12451 + C11654;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C30284 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31160 -
            (C13475 + C13476) * C30280 - (C13477 + C13478) * C31168 +
            (C13479 + C13480) * C30290 + (C13481 + C13482) * C2901) *
               C31397 * C13438 +
           ((C13476 + C13475) * C30284 + (C13478 + C13477) * C31160 -
            (C13480 + C13479) * C30280 - (C13482 + C13481) * C31168 +
            (C13484 + C13483) * C30290 + (C13486 + C13485) * C2901) *
               C31397 * C13439) *
              C31218 * C31261 +
          (((C13669 + C13670) * C30280 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31160 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C30284) +
            (C13671 + C13672) * C31168 - (C13673 + C13674) * C30290 -
            (C13675 + C13676) * C2901) *
               C31397 * C13438 +
           ((C13674 + C13673) * C30280 -
            ((C13672 + C13671) * C31160 + (C13670 + C13669) * C30284) +
            (C13676 + C13675) * C31168 - (C14018 + C14017) * C30290 -
            (C14020 + C14019) * C2901) *
               C31397 * C13439) *
              C31218 * C31268 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C30284 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31160 -
            (C13677 + C13678) * C30280 - (C13679 + C13680) * C31168 +
            (C13681 + C13682) * C30290 + (C13683 + C13684) * C2901) *
               C31397 * C13438 +
           ((C13678 + C13677) * C30284 + (C13680 + C13679) * C31160 -
            (C13682 + C13681) * C30280 - (C13684 + C13683) * C31168 +
            (C13440 * C304 + C13436 * C322 + C13441 * C1437 + C13437 * C1438) *
                C30290 +
            (C13440 * C323 + C13436 * C334 + C13441 * C1439 + C13437 * C1440) *
                C2901) *
               C31397 * C13439) *
              C31218 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C2641 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C2635 -
             (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
                C31397 * C13438 +
            ((C13476 + C13475) * C2641 + (C13478 + C13477) * C2635 -
             (C13480 + C13479) * C2642 - (C13482 + C13481) * C31165) *
                C31397 * C13439) *
               C31476 +
           (((C13863 + C13864) * C2642 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C2635 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C2641) +
             (C13865 + C13866) * C31165) *
                C31397 * C13438 +
            ((C13868 + C13867) * C2642 -
             ((C13866 + C13865) * C2635 + (C13864 + C13863) * C2641) +
             (C13870 + C13869) * C31165) *
                C31397 * C13439) *
               C31305) *
              C31261 +
          ((((C13669 + C13670) * C2642 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C2635 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C2641) +
             (C13671 + C13672) * C31165) *
                C31397 * C13438 +
            ((C13674 + C13673) * C2642 -
             ((C13672 + C13671) * C2635 + (C13670 + C13669) * C2641) +
             (C13676 + C13675) * C31165) *
                C31397 * C13439) *
               C31476 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C2641 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C2635 -
             (C14373 + C14374) * C2642 - (C14375 + C14376) * C31165) *
                C31397 * C13438 +
            ((C14374 + C14373) * C2641 + (C14376 + C14375) * C2635 -
             (C14378 + C14377) * C2642 - (C14380 + C14379) * C31165) *
                C31397 * C13439) *
               C31305) *
              C31268 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C2641 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C2635 -
             (C13677 + C13678) * C2642 - (C13679 + C13680) * C31165) *
                C31397 * C13438 +
            ((C13678 + C13677) * C2641 + (C13680 + C13679) * C2635 -
             (C13682 + C13681) * C2642 - (C13684 + C13683) * C31165) *
                C31397 * C13439) *
               C31476 +
           (((C15099 + C15100) * C2642 -
             ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
               C13436 * C1327) *
                  C2635 +
              (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
               C13436 * C1315) *
                  C2641) +
             (C15101 + C15102) * C31165) *
                C31397 * C13438 +
            ((C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
              C13437 * C1720) *
                 C2642 -
             ((C15102 + C15101) * C2635 + (C15100 + C15099) * C2641) +
             (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
              C13437 * C1724) *
                 C31165) *
                C31397 * C13439) *
               C31305) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2641 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C2635 -
            (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
               C31397 * C13438 +
           ((C13476 + C13475) * C2641 + (C13478 + C13477) * C2635 -
            (C13480 + C13479) * C2642 - (C13482 + C13481) * C31165) *
               C31397 * C13439) *
              C31218 * C31548 +
          (((C13669 + C13670) * C2642 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C2635 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C2641) +
            (C13671 + C13672) * C31165) *
               C31397 * C13438 +
           ((C13674 + C13673) * C2642 -
            ((C13672 + C13671) * C2635 + (C13670 + C13669) * C2641) +
            (C13676 + C13675) * C31165) *
               C31397 * C13439) *
              C31218 * C31544 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C2641 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C2635 -
            (C13677 + C13678) * C2642 - (C13679 + C13680) * C31165) *
               C31397 * C13438 +
           ((C13678 + C13677) * C2641 + (C13680 + C13679) * C2635 -
            (C13682 + C13681) * C2642 - (C13684 + C13683) * C31165) *
               C31397 * C13439) *
              C31218 * C31534 +
          (((C14893 + C14894) * C2642 -
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C2635 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C2641) +
            (C14895 + C14896) * C31165) *
               C31397 * C13438 +
           ((C13440 * C1161 + C13436 * C1168 + C13441 * C1166 +
             C13437 * C1177) *
                C2642 -
            ((C14896 + C14895) * C2635 + (C14894 + C14893) * C2641) +
            (C13440 * C1167 + C13436 * C1179 + C13441 * C1178 +
             C13437 * C1184) *
                C31165) *
               C31397 * C13439) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2533 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31547 -
            (C13475 + C13476) * C2534 - (C13477 + C13478) * C31540 +
            (C13479 + C13480) * C2535 + (C13481 + C13482) * C31527 -
            (C13483 + C13484) * C2536 - (C13485 + C13486) * C31508) *
               C31397 * C13438 +
           ((C13476 + C13475) * C2533 + (C13478 + C13477) * C31547 -
            (C13480 + C13479) * C2534 - (C13482 + C13481) * C31540 +
            (C13484 + C13483) * C2535 + (C13486 + C13485) * C31527 -
            (C13488 + C13487) * C2536 - (C13490 + C13489) * C31508) *
               C31397 * C13439) *
              C31218 * C2531 +
          (((C13669 + C13670) * C2534 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31547 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C2533) +
            (C13671 + C13672) * C31540 - (C13673 + C13674) * C2535 -
            (C13675 + C13676) * C31527 + (C14017 + C14018) * C2536 +
            (C14019 + C14020) * C31508) *
               C31397 * C13438 +
           ((C13674 + C13673) * C2534 -
            ((C13672 + C13671) * C31547 + (C13670 + C13669) * C2533) +
            (C13676 + C13675) * C31540 - (C14018 + C14017) * C2535 -
            (C14020 + C14019) * C31527 +
            (C13440 * C300 + C13436 * C314 + C13441 * C305 + C13437 * C324) *
                C2536 +
            (C13440 * C315 + C13436 * C330 + C13441 * C325 + C13437 * C335) *
                C31508) *
               C31397 * C13439) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C2641 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C2635 -
             (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
                C31397 * C13438 +
            ((C13476 + C13475) * C2641 + (C13478 + C13477) * C2635 -
             (C13480 + C13479) * C2642 - (C13482 + C13481) * C31165) *
                C31397 * C13439) *
               C31542 +
           (((C13863 + C13864) * C2642 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C2635 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C2641) +
             (C13865 + C13866) * C31165) *
                C31397 * C13438 +
            ((C13868 + C13867) * C2642 -
             ((C13866 + C13865) * C2635 + (C13864 + C13863) * C2641) +
             (C13870 + C13869) * C31165) *
                C31397 * C13439) *
               C31531 +
           (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                 C2641 +
             (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                 C2635 -
             (C13871 + C13872) * C2642 - (C13873 + C13874) * C31165) *
                C31397 * C13438 +
            ((C13872 + C13871) * C2641 + (C13874 + C13873) * C2635 -
             (C13876 + C13875) * C2642 - (C13878 + C13877) * C31165) *
                C31397 * C13439) *
               C31507) *
              C2531 +
          ((((C13669 + C13670) * C2642 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C2635 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C2641) +
             (C13671 + C13672) * C31165) *
                C31397 * C13438 +
            ((C13674 + C13673) * C2642 -
             ((C13672 + C13671) * C2635 + (C13670 + C13669) * C2641) +
             (C13676 + C13675) * C31165) *
                C31397 * C13439) *
               C31542 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C2641 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C2635 -
             (C14373 + C14374) * C2642 - (C14375 + C14376) * C31165) *
                C31397 * C13438 +
            ((C14374 + C14373) * C2641 + (C14376 + C14375) * C2635 -
             (C14378 + C14377) * C2642 - (C14380 + C14379) * C31165) *
                C31397 * C13439) *
               C31531 +
           (((C15809 + C15810) * C2642 -
             ((C13441 * C1317 + C13437 * C1328 + C13440 * C1308 +
               C13436 * C1324) *
                  C2635 +
              (C13441 * C1301 + C13437 * C1316 + C13440 * C1297 +
               C13436 * C1309) *
                  C2641) +
             (C15811 + C15812) * C31165) *
                C31397 * C13438 +
            ((C13440 * C1295 + C13436 * C1305 + C13441 * C1303 +
              C13437 * C1320) *
                 C2642 -
             ((C15812 + C15811) * C2635 + (C15810 + C15809) * C2641) +
             (C13440 * C1304 + C13436 * C1322 + C13441 * C1321 +
              C13437 * C1330) *
                 C31165) *
                C31397 * C13439) *
               C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30284 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31160 -
             (C13475 + C13476) * C30280 - (C13477 + C13478) * C31168 +
             (C13479 + C13480) * C30290 + (C13481 + C13482) * C2901) *
                C31397 * C13438 +
            ((C13476 + C13475) * C30284 + (C13478 + C13477) * C31160 -
             (C13480 + C13479) * C30280 - (C13482 + C13481) * C31168 +
             (C13484 + C13483) * C30290 + (C13486 + C13485) * C2901) *
                C31397 * C13439) *
               C31476 +
           (((C13863 + C13864) * C30280 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C31160 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C30284) +
             (C13865 + C13866) * C31168 - (C13867 + C13868) * C30290 -
             (C13869 + C13870) * C2901) *
                C31397 * C13438 +
            ((C13868 + C13867) * C30280 -
             ((C13866 + C13865) * C31160 + (C13864 + C13863) * C30284) +
             (C13870 + C13869) * C31168 - (C14160 + C14159) * C30290 -
             (C14162 + C14161) * C2901) *
                C31397 * C13439) *
               C31305) *
              C2531 +
          ((((C13669 + C13670) * C30280 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31160 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30284) +
             (C13671 + C13672) * C31168 - (C13673 + C13674) * C30290 -
             (C13675 + C13676) * C2901) *
                C31397 * C13438 +
            ((C13674 + C13673) * C30280 -
             ((C13672 + C13671) * C31160 + (C13670 + C13669) * C30284) +
             (C13676 + C13675) * C31168 - (C14018 + C14017) * C30290 -
             (C14020 + C14019) * C2901) *
                C31397 * C13439) *
               C31476 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C30284 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31160 -
             (C14373 + C14374) * C30280 - (C14375 + C14376) * C31168 +
             (C14377 + C14378) * C30290 + (C14379 + C14380) * C2901) *
                C31397 * C13438 +
            ((C14374 + C14373) * C30284 + (C14376 + C14375) * C31160 -
             (C14378 + C14377) * C30280 - (C14380 + C14379) * C31168 +
             (C13440 * C938 + C13436 * C946 + C13441 * C1599 + C13437 * C1600) *
                 C30290 +
             (C13440 * C947 + C13436 * C953 + C13441 * C1601 + C13437 * C1602) *
                 C2901) *
                C31397 * C13439) *
               C31305) *
              C31265)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2533 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31547 -
            (C13475 + C13476) * C2534 - (C13477 + C13478) * C31540 +
            (C13479 + C13480) * C2535 + (C13481 + C13482) * C31527 -
            (C13483 + C13484) * C2536 - (C13485 + C13486) * C31508) *
               C31397 * C13438 +
           ((C13476 + C13475) * C2533 + (C13478 + C13477) * C31547 -
            (C13480 + C13479) * C2534 - (C13482 + C13481) * C31540 +
            (C13484 + C13483) * C2535 + (C13486 + C13485) * C31527 -
            (C13488 + C13487) * C2536 - (C13490 + C13489) * C31508) *
               C31397 * C13439) *
              C31218 * C2531 +
          (((C13669 + C13670) * C2534 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31547 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C2533) +
            (C13671 + C13672) * C31540 - (C13673 + C13674) * C2535 -
            (C13675 + C13676) * C31527 + (C14017 + C14018) * C2536 +
            (C14019 + C14020) * C31508) *
               C31397 * C13438 +
           ((C13674 + C13673) * C2534 -
            ((C13672 + C13671) * C31547 + (C13670 + C13669) * C2533) +
            (C13676 + C13675) * C31540 - (C14018 + C14017) * C2535 -
            (C14020 + C14019) * C31527 +
            (C13440 * C300 + C13436 * C314 + C13441 * C305 + C13437 * C324) *
                C2536 +
            (C13440 * C315 + C13436 * C330 + C13441 * C325 + C13437 * C335) *
                C31508) *
               C31397 * C13439) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2641 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C2635 -
            (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
               C31397 * C13438 +
           ((C13476 + C13475) * C2641 + (C13478 + C13477) * C2635 -
            (C13480 + C13479) * C2642 - (C13482 + C13481) * C31165) *
               C31397 * C13439) *
              C31218 * C31548 +
          (((C13669 + C13670) * C2642 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C2635 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C2641) +
            (C13671 + C13672) * C31165) *
               C31397 * C13438 +
           ((C13674 + C13673) * C2642 -
            ((C13672 + C13671) * C2635 + (C13670 + C13669) * C2641) +
            (C13676 + C13675) * C31165) *
               C31397 * C13439) *
              C31218 * C31544 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C2641 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C2635 -
            (C13677 + C13678) * C2642 - (C13679 + C13680) * C31165) *
               C31397 * C13438 +
           ((C13678 + C13677) * C2641 + (C13680 + C13679) * C2635 -
            (C13682 + C13681) * C2642 - (C13684 + C13683) * C31165) *
               C31397 * C13439) *
              C31218 * C31534 +
          (((C14893 + C14894) * C2642 -
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C2635 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C2641) +
            (C14895 + C14896) * C31165) *
               C31397 * C13438 +
           ((C13440 * C1161 + C13436 * C1168 + C13441 * C1166 +
             C13437 * C1177) *
                C2642 -
            ((C14896 + C14895) * C2635 + (C14894 + C14893) * C2641) +
            (C13440 * C1167 + C13436 * C1179 + C13441 * C1178 +
             C13437 * C1184) *
                C31165) *
               C31397 * C13439) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30274 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31457 -
             (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
                C31397 * C13438 +
            ((C13476 + C13475) * C30274 + (C13478 + C13477) * C31457 -
             (C13480 + C13479) * C30255 - (C13482 + C13481) * C31165) *
                C31397 * C13439) *
               C3298 +
           (((C13863 + C13864) * C30255 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C31457 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C30274) +
             (C13865 + C13866) * C31165) *
                C31397 * C13438 +
            ((C13868 + C13867) * C30255 -
             ((C13866 + C13865) * C31457 + (C13864 + C13863) * C30274) +
             (C13870 + C13869) * C31165) *
                C31397 * C13439) *
               C31305) *
              C31261 +
          ((((C13669 + C13670) * C30255 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31457 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30274) +
             (C13671 + C13672) * C31165) *
                C31397 * C13438 +
            ((C13674 + C13673) * C30255 -
             ((C13672 + C13671) * C31457 + (C13670 + C13669) * C30274) +
             (C13676 + C13675) * C31165) *
                C31397 * C13439) *
               C3298 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C30274 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31457 -
             (C14373 + C14374) * C30255 - (C14375 + C14376) * C31165) *
                C31397 * C13438 +
            ((C14374 + C14373) * C30274 + (C14376 + C14375) * C31457 -
             (C14378 + C14377) * C30255 - (C14380 + C14379) * C31165) *
                C31397 * C13439) *
               C31305) *
              C31268 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C30274 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31457 -
             (C13677 + C13678) * C30255 - (C13679 + C13680) * C31165) *
                C31397 * C13438 +
            ((C13678 + C13677) * C30274 + (C13680 + C13679) * C31457 -
             (C13682 + C13681) * C30255 - (C13684 + C13683) * C31165) *
                C31397 * C13439) *
               C3298 +
           (((C15099 + C15100) * C30255 -
             ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
               C13436 * C1327) *
                  C31457 +
              (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
               C13436 * C1315) *
                  C30274) +
             (C15101 + C15102) * C31165) *
                C31397 * C13438 +
            ((C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
              C13437 * C1720) *
                 C30255 -
             ((C15102 + C15101) * C31457 + (C15100 + C15099) * C30274) +
             (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
              C13437 * C1724) *
                 C31165) *
                C31397 * C13439) *
               C31305) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
                C13439) *
               C31301 -
           (((C13866 + C13865) * C31155 + (C13864 + C13863) * C1160) * C31397 *
                C13439 +
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31155 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1160) *
                C31397 * C13438) *
               C31308 +
           (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                 C1160 +
             (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                 C31155) *
                C31397 * C13438 +
            ((C13872 + C13871) * C1160 + (C13874 + C13873) * C31155) * C31397 *
                C13439) *
               C3806) *
              C31261 +
          ((((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1160 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31155) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1160 + (C14376 + C14375) * C31155) * C31397 *
                C13439) *
               C31308 -
           (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
                C13439 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C31397 * C13438) *
               C31301 -
           (((C15812 + C15811) * C31155 + (C15810 + C15809) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1317 + C13437 * C1328 + C13440 * C1308 +
              C13436 * C1324) *
                 C31155 +
             (C13441 * C1301 + C13437 * C1316 + C13440 * C1297 +
              C13436 * C1309) *
                 C1160) *
                C31397 * C13438) *
               C3806) *
              C31268 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C31397 * C13438 +
            ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
                C13439) *
               C31301 -
           (((C15102 + C15101) * C31155 + (C15100 + C15099) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
              C13436 * C1327) *
                 C31155 +
             (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
              C13436 * C1315) *
                 C1160) *
                C31397 * C13438) *
               C31308 +
           (((C13440 * C1301 + C13436 * C1316 + C13441 * C5618 +
              C13437 * C5622) *
                 C1160 +
             (C13440 * C1317 + C13436 * C1328 + C13441 * C5621 +
              C13437 * C5627) *
                 C31155) *
                C31397 * C13438 +
            ((C13440 * C1302 + C13436 * C1318 + C13441 * C6424 +
              C13437 * C6425) *
                 C1160 +
             (C13440 * C1319 + C13436 * C1329 + C13441 * C6426 +
              C13437 * C6427) *
                 C31155) *
                C31397 * C13439) *
               C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
                C13439) *
               C3298 -
           (((C13866 + C13865) * C31155 + (C13864 + C13863) * C1160) * C31397 *
                C13439 +
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31155 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1160) *
                C31397 * C13438) *
               C31305) *
              C31548 +
          ((((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1160 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31155) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1160 + (C14376 + C14375) * C31155) * C31397 *
                C13439) *
               C31305 -
           (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
                C13439 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C31397 * C13438) *
               C3298) *
              C31544 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C31397 * C13438 +
            ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
                C13439) *
               C3298 -
           (((C15102 + C15101) * C31155 + (C15100 + C15099) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
              C13436 * C1327) *
                 C31155 +
             (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
              C13436 * C1315) *
                 C1160) *
                C31397 * C13438) *
               C31305) *
              C31534 +
          ((((C13440 * C1713 + C13436 * C1716 + C13441 * C5619 +
              C13437 * C5624) *
                 C1160 +
             (C13440 * C1717 + C13436 * C1722 + C13441 * C5623 +
              C13437 * C5628) *
                 C31155) *
                C31397 * C13438 +
            ((C13440 * C1714 + C13436 * C1718 + C13441 * C5878 +
              C13437 * C5879) *
                 C1160 +
             (C13440 * C1719 + C13436 * C1723 + C13441 * C5880 +
              C13437 * C5881) *
                 C31155) *
                C31397 * C13439) *
               C31305 -
           (((C14896 + C14895) * C31155 + (C14894 + C14893) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C31155 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C1160) *
                C31397 * C13438) *
               C3298) *
              C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1089 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31538 -
             (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
             (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1089 + (C13478 + C13477) * C31538 -
             (C13480 + C13479) * C1090 - (C13482 + C13481) * C31525 +
             (C13484 + C13483) * C1091 + (C13486 + C13485) * C31497) *
                C31397 * C13439) *
               C3298 +
           (((C13863 + C13864) * C1090 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C31538 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C1089) +
             (C13865 + C13866) * C31525 - (C13867 + C13868) * C1091 -
             (C13869 + C13870) * C31497) *
                C31397 * C13438 +
            ((C13868 + C13867) * C1090 -
             ((C13866 + C13865) * C31538 + (C13864 + C13863) * C1089) +
             (C13870 + C13869) * C31525 - (C14160 + C14159) * C1091 -
             (C14162 + C14161) * C31497) *
                C31397 * C13439) *
               C31305) *
              C2531 +
          ((((C13669 + C13670) * C1090 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31538 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C1089) +
             (C13671 + C13672) * C31525 - (C13673 + C13674) * C1091 -
             (C13675 + C13676) * C31497) *
                C31397 * C13438 +
            ((C13674 + C13673) * C1090 -
             ((C13672 + C13671) * C31538 + (C13670 + C13669) * C1089) +
             (C13676 + C13675) * C31525 - (C14018 + C14017) * C1091 -
             (C14020 + C14019) * C31497) *
                C31397 * C13439) *
               C3298 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1089 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31538 -
             (C14373 + C14374) * C1090 - (C14375 + C14376) * C31525 +
             (C14377 + C14378) * C1091 + (C14379 + C14380) * C31497) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1089 + (C14376 + C14375) * C31538 -
             (C14378 + C14377) * C1090 - (C14380 + C14379) * C31525 +
             (C13440 * C938 + C13436 * C946 + C13441 * C1599 + C13437 * C1600) *
                 C1091 +
             (C13440 * C947 + C13436 * C953 + C13441 * C1601 + C13437 * C1602) *
                 C31497) *
                C31397 * C13439) *
               C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
                C13439) *
               C31549 -
           (((C13866 + C13865) * C31155 + (C13864 + C13863) * C1160) * C31397 *
                C13439 +
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31155 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1160) *
                C31397 * C13438) *
               C31546 +
           (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                 C1160 +
             (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                 C31155) *
                C31397 * C13438 +
            ((C13872 + C13871) * C1160 + (C13874 + C13873) * C31155) * C31397 *
                C13439) *
               C31537 -
           (((C15954 + C15953) * C31155 + (C15952 + C15951) * C1160) * C31397 *
                C13439 +
            ((C13441 * C2421 + C13437 * C2426 + C13440 * C2025 +
              C13436 * C2035) *
                 C31155 +
             (C13441 * C2417 + C13437 * C2420 + C13440 * C2017 +
              C13436 * C2026) *
                 C1160) *
                C31397 * C13438) *
               C31520) *
              C2531 +
          ((((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1160 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31155) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1160 + (C14376 + C14375) * C31155) * C31397 *
                C13439) *
               C31546 -
           (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
                C13439 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C31397 * C13438) *
               C31549 -
           (((C15812 + C15811) * C31155 + (C15810 + C15809) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1317 + C13437 * C1328 + C13440 * C1308 +
              C13436 * C1324) *
                 C31155 +
             (C13441 * C1301 + C13437 * C1316 + C13440 * C1297 +
              C13436 * C1309) *
                 C1160) *
                C31397 * C13438) *
               C31537 +
           (((C13440 * C2417 + C13436 * C2420 + C13441 * C6266 +
              C13437 * C6270) *
                 C1160 +
             (C13440 * C2421 + C13436 * C2426 + C13441 * C6269 +
              C13437 * C6275) *
                 C31155) *
                C31397 * C13438 +
            ((C13440 * C2418 + C13436 * C2422 + C13441 * C6526 +
              C13437 * C6527) *
                 C1160 +
             (C13440 * C2423 + C13436 * C2427 + C13441 * C6528 +
              C13437 * C6529) *
                 C31155) *
                C31397 * C13439) *
               C31520) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30274 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31457 -
             (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
                C31397 * C13438 +
            ((C13476 + C13475) * C30274 + (C13478 + C13477) * C31457 -
             (C13480 + C13479) * C30255 - (C13482 + C13481) * C31165) *
                C31397 * C13439) *
               C31301 +
           (((C13863 + C13864) * C30255 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C31457 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C30274) +
             (C13865 + C13866) * C31165) *
                C31397 * C13438 +
            ((C13868 + C13867) * C30255 -
             ((C13866 + C13865) * C31457 + (C13864 + C13863) * C30274) +
             (C13870 + C13869) * C31165) *
                C31397 * C13439) *
               C31308 +
           (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                 C30274 +
             (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                 C31457 -
             (C13871 + C13872) * C30255 - (C13873 + C13874) * C31165) *
                C31397 * C13438 +
            ((C13872 + C13871) * C30274 + (C13874 + C13873) * C31457 -
             (C13876 + C13875) * C30255 - (C13878 + C13877) * C31165) *
                C31397 * C13439) *
               C3806) *
              C2531 +
          ((((C13669 + C13670) * C30255 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31457 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30274) +
             (C13671 + C13672) * C31165) *
                C31397 * C13438 +
            ((C13674 + C13673) * C30255 -
             ((C13672 + C13671) * C31457 + (C13670 + C13669) * C30274) +
             (C13676 + C13675) * C31165) *
                C31397 * C13439) *
               C31301 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C30274 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31457 -
             (C14373 + C14374) * C30255 - (C14375 + C14376) * C31165) *
                C31397 * C13438 +
            ((C14374 + C14373) * C30274 + (C14376 + C14375) * C31457 -
             (C14378 + C14377) * C30255 - (C14380 + C14379) * C31165) *
                C31397 * C13439) *
               C31308 +
           (((C15809 + C15810) * C30255 -
             ((C13441 * C1317 + C13437 * C1328 + C13440 * C1308 +
               C13436 * C1324) *
                  C31457 +
              (C13441 * C1301 + C13437 * C1316 + C13440 * C1297 +
               C13436 * C1309) *
                  C30274) +
             (C15811 + C15812) * C31165) *
                C31397 * C13438 +
            ((C13440 * C1295 + C13436 * C1305 + C13441 * C1303 +
              C13437 * C1320) *
                 C30255 -
             ((C15812 + C15811) * C31457 + (C15810 + C15809) * C30274) +
             (C13440 * C1304 + C13436 * C1322 + C13441 * C1321 +
              C13437 * C1330) *
                 C31165) *
                C31397 * C13439) *
               C3806) *
              C31265)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1089 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31538 -
             (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
             (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1089 + (C13478 + C13477) * C31538 -
             (C13480 + C13479) * C1090 - (C13482 + C13481) * C31525 +
             (C13484 + C13483) * C1091 + (C13486 + C13485) * C31497) *
                C31397 * C13439) *
               C3298 +
           (((C13863 + C13864) * C1090 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C31538 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C1089) +
             (C13865 + C13866) * C31525 - (C13867 + C13868) * C1091 -
             (C13869 + C13870) * C31497) *
                C31397 * C13438 +
            ((C13868 + C13867) * C1090 -
             ((C13866 + C13865) * C31538 + (C13864 + C13863) * C1089) +
             (C13870 + C13869) * C31525 - (C14160 + C14159) * C1091 -
             (C14162 + C14161) * C31497) *
                C31397 * C13439) *
               C31305) *
              C2531 +
          ((((C13669 + C13670) * C1090 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31538 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C1089) +
             (C13671 + C13672) * C31525 - (C13673 + C13674) * C1091 -
             (C13675 + C13676) * C31497) *
                C31397 * C13438 +
            ((C13674 + C13673) * C1090 -
             ((C13672 + C13671) * C31538 + (C13670 + C13669) * C1089) +
             (C13676 + C13675) * C31525 - (C14018 + C14017) * C1091 -
             (C14020 + C14019) * C31497) *
                C31397 * C13439) *
               C3298 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1089 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31538 -
             (C14373 + C14374) * C1090 - (C14375 + C14376) * C31525 +
             (C14377 + C14378) * C1091 + (C14379 + C14380) * C31497) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1089 + (C14376 + C14375) * C31538 -
             (C14378 + C14377) * C1090 - (C14380 + C14379) * C31525 +
             (C13440 * C938 + C13436 * C946 + C13441 * C1599 + C13437 * C1600) *
                 C1091 +
             (C13440 * C947 + C13436 * C953 + C13441 * C1601 + C13437 * C1602) *
                 C31497) *
                C31397 * C13439) *
               C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
                C13439) *
               C3298 -
           (((C13866 + C13865) * C31155 + (C13864 + C13863) * C1160) * C31397 *
                C13439 +
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31155 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1160) *
                C31397 * C13438) *
               C31305) *
              C31548 +
          ((((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1160 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31155) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1160 + (C14376 + C14375) * C31155) * C31397 *
                C13439) *
               C31305 -
           (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
                C13439 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C31397 * C13438) *
               C3298) *
              C31544 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C31397 * C13438 +
            ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
                C13439) *
               C3298 -
           (((C15102 + C15101) * C31155 + (C15100 + C15099) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
              C13436 * C1327) *
                 C31155 +
             (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
              C13436 * C1315) *
                 C1160) *
                C31397 * C13438) *
               C31305) *
              C31534 +
          ((((C13440 * C1713 + C13436 * C1716 + C13441 * C5619 +
              C13437 * C5624) *
                 C1160 +
             (C13440 * C1717 + C13436 * C1722 + C13441 * C5623 +
              C13437 * C5628) *
                 C31155) *
                C31397 * C13438 +
            ((C13440 * C1714 + C13436 * C1718 + C13441 * C5878 +
              C13437 * C5879) *
                 C1160 +
             (C13440 * C1719 + C13436 * C1723 + C13441 * C5880 +
              C13437 * C5881) *
                 C31155) *
                C31397 * C13439) *
               C31305 -
           (((C14896 + C14895) * C31155 + (C14894 + C14893) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C31155 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C1160) *
                C31397 * C13438) *
               C3298) *
              C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C30274 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31457 -
            (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
               C31397 * C13438 +
           ((C13476 + C13475) * C30274 + (C13478 + C13477) * C31457 -
            (C13480 + C13479) * C30255 - (C13482 + C13481) * C31165) *
               C31397 * C13439) *
              C31218 * C1431 +
          (((C13669 + C13670) * C30255 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31457 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C30274) +
            (C13671 + C13672) * C31165) *
               C31397 * C13438 +
           ((C13674 + C13673) * C30255 -
            ((C13672 + C13671) * C31457 + (C13670 + C13669) * C30274) +
            (C13676 + C13675) * C31165) *
               C31397 * C13439) *
              C31218 * C1432 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C30274 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31457 -
            (C13677 + C13678) * C30255 - (C13679 + C13680) * C31165) *
               C31397 * C13438 +
           ((C13678 + C13677) * C30274 + (C13680 + C13679) * C31457 -
            (C13682 + C13681) * C30255 - (C13684 + C13683) * C31165) *
               C31397 * C13439) *
              C31218 * C1433 +
          (((C14893 + C14894) * C30255 -
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C31457 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C30274) +
            (C14895 + C14896) * C31165) *
               C31397 * C13438 +
           ((C13440 * C1161 + C13436 * C1168 + C13441 * C1166 +
             C13437 * C1177) *
                C30255 -
            ((C14896 + C14895) * C31457 + (C14894 + C14893) * C30274) +
            (C13440 * C1167 + C13436 * C1179 + C13441 * C1178 +
             C13437 * C1184) *
                C31165) *
               C31397 * C13439) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C665 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C659 -
            (C13475 + C13476) * C666 - (C13477 + C13478) * C660 +
            (C13479 + C13480) * C667 + (C13481 + C13482) * C661 -
            (C13483 + C13484) * C668 - (C13485 + C13486) * C31508) *
               C31397 * C13438 +
           ((C13476 + C13475) * C665 + (C13478 + C13477) * C659 -
            (C13480 + C13479) * C666 - (C13482 + C13481) * C660 +
            (C13484 + C13483) * C667 + (C13486 + C13485) * C661 -
            (C13488 + C13487) * C668 - (C13490 + C13489) * C31508) *
               C31397 * C13439) *
              C31218 * C31475 +
          (((C13669 + C13670) * C666 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C659 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C665) +
            (C13671 + C13672) * C660 - (C13673 + C13674) * C667 -
            (C13675 + C13676) * C661 + (C14017 + C14018) * C668 +
            (C14019 + C14020) * C31508) *
               C31397 * C13438 +
           ((C13674 + C13673) * C666 -
            ((C13672 + C13671) * C659 + (C13670 + C13669) * C665) +
            (C13676 + C13675) * C660 - (C14018 + C14017) * C667 -
            (C14020 + C14019) * C661 +
            (C13440 * C300 + C13436 * C314 + C13441 * C305 + C13437 * C324) *
                C668 +
            (C13440 * C315 + C13436 * C330 + C13441 * C325 + C13437 * C335) *
                C31508) *
               C31397 * C13439) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30274 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31457 -
             (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
                C31397 * C13438 +
            ((C13476 + C13475) * C30274 + (C13478 + C13477) * C31457 -
             (C13480 + C13479) * C30255 - (C13482 + C13481) * C31165) *
                C31397 * C13439) *
               C1835 +
           (((C13863 + C13864) * C30255 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C31457 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C30274) +
             (C13865 + C13866) * C31165) *
                C31397 * C13438 +
            ((C13868 + C13867) * C30255 -
             ((C13866 + C13865) * C31457 + (C13864 + C13863) * C30274) +
             (C13870 + C13869) * C31165) *
                C31397 * C13439) *
               C1836 +
           (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                 C30274 +
             (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                 C31457 -
             (C13871 + C13872) * C30255 - (C13873 + C13874) * C31165) *
                C31397 * C13438 +
            ((C13872 + C13871) * C30274 + (C13874 + C13873) * C31457 -
             (C13876 + C13875) * C30255 - (C13878 + C13877) * C31165) *
                C31397 * C13439) *
               C31507) *
              C31475 +
          ((((C13669 + C13670) * C30255 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31457 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30274) +
             (C13671 + C13672) * C31165) *
                C31397 * C13438 +
            ((C13674 + C13673) * C30255 -
             ((C13672 + C13671) * C31457 + (C13670 + C13669) * C30274) +
             (C13676 + C13675) * C31165) *
                C31397 * C13439) *
               C1835 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C30274 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31457 -
             (C14373 + C14374) * C30255 - (C14375 + C14376) * C31165) *
                C31397 * C13438 +
            ((C14374 + C14373) * C30274 + (C14376 + C14375) * C31457 -
             (C14378 + C14377) * C30255 - (C14380 + C14379) * C31165) *
                C31397 * C13439) *
               C1836 +
           (((C15809 + C15810) * C30255 -
             ((C13441 * C1317 + C13437 * C1328 + C13440 * C1308 +
               C13436 * C1324) *
                  C31457 +
              (C13441 * C1301 + C13437 * C1316 + C13440 * C1297 +
               C13436 * C1309) *
                  C30274) +
             (C15811 + C15812) * C31165) *
                C31397 * C13438 +
            ((C13440 * C1295 + C13436 * C1305 + C13441 * C1303 +
              C13437 * C1320) *
                 C30255 -
             ((C15812 + C15811) * C31457 + (C15810 + C15809) * C30274) +
             (C13440 * C1304 + C13436 * C1322 + C13441 * C1321 +
              C13437 * C1330) *
                 C31165) *
                C31397 * C13439) *
               C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
                C13439) *
               C31476 -
           (((C13866 + C13865) * C31155 + (C13864 + C13863) * C1160) * C31397 *
                C13439 +
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31155 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1160) *
                C31397 * C13438) *
               C31305) *
              C1431 +
          ((((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1160 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31155) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1160 + (C14376 + C14375) * C31155) * C31397 *
                C13439) *
               C31305 -
           (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
                C13439 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C31397 * C13438) *
               C31476) *
              C1432 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C31397 * C13438 +
            ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
                C13439) *
               C31476 -
           (((C15102 + C15101) * C31155 + (C15100 + C15099) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
              C13436 * C1327) *
                 C31155 +
             (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
              C13436 * C1315) *
                 C1160) *
                C31397 * C13438) *
               C31305) *
              C1433 +
          ((((C13440 * C1713 + C13436 * C1716 + C13441 * C5619 +
              C13437 * C5624) *
                 C1160 +
             (C13440 * C1717 + C13436 * C1722 + C13441 * C5623 +
              C13437 * C5628) *
                 C31155) *
                C31397 * C13438 +
            ((C13440 * C1714 + C13436 * C1718 + C13441 * C5878 +
              C13437 * C5879) *
                 C1160 +
             (C13440 * C1719 + C13436 * C1723 + C13441 * C5880 +
              C13437 * C5881) *
                 C31155) *
                C31397 * C13439) *
               C31305 -
           (((C14896 + C14895) * C31155 + (C14894 + C14893) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C31155 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C1160) *
                C31397 * C13438) *
               C31476) *
              C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C293 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C287 -
             (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
             (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
                C31397 * C13438 +
            ((C13476 + C13475) * C293 + (C13478 + C13477) * C287 -
             (C13480 + C13479) * C294 - (C13482 + C13481) * C288 +
             (C13484 + C13483) * C295 + (C13486 + C13485) * C31497) *
                C31397 * C13439) *
               C31476 +
           (((C13863 + C13864) * C294 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C287 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C293) +
             (C13865 + C13866) * C288 - (C13867 + C13868) * C295 -
             (C13869 + C13870) * C31497) *
                C31397 * C13438 +
            ((C13868 + C13867) * C294 -
             ((C13866 + C13865) * C287 + (C13864 + C13863) * C293) +
             (C13870 + C13869) * C288 - (C14160 + C14159) * C295 -
             (C14162 + C14161) * C31497) *
                C31397 * C13439) *
               C31305) *
              C31475 +
          ((((C13669 + C13670) * C294 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C287 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C293) +
             (C13671 + C13672) * C288 - (C13673 + C13674) * C295 -
             (C13675 + C13676) * C31497) *
                C31397 * C13438 +
            ((C13674 + C13673) * C294 -
             ((C13672 + C13671) * C287 + (C13670 + C13669) * C293) +
             (C13676 + C13675) * C288 - (C14018 + C14017) * C295 -
             (C14020 + C14019) * C31497) *
                C31397 * C13439) *
               C31476 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C293 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C287 -
             (C14373 + C14374) * C294 - (C14375 + C14376) * C288 +
             (C14377 + C14378) * C295 + (C14379 + C14380) * C31497) *
                C31397 * C13438 +
            ((C14374 + C14373) * C293 + (C14376 + C14375) * C287 -
             (C14378 + C14377) * C294 - (C14380 + C14379) * C288 +
             (C13440 * C938 + C13436 * C946 + C13441 * C1599 + C13437 * C1600) *
                 C295 +
             (C13440 * C947 + C13436 * C953 + C13441 * C1601 + C13437 * C1602) *
                 C31497) *
                C31397 * C13439) *
               C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
                C13439) *
               C2299 -
           (((C13866 + C13865) * C31155 + (C13864 + C13863) * C1160) * C31397 *
                C13439 +
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31155 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1160) *
                C31397 * C13438) *
               C2300 +
           (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                 C1160 +
             (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                 C31155) *
                C31397 * C13438 +
            ((C13872 + C13871) * C1160 + (C13874 + C13873) * C31155) * C31397 *
                C13439) *
               C2301 -
           (((C15954 + C15953) * C31155 + (C15952 + C15951) * C1160) * C31397 *
                C13439 +
            ((C13441 * C2421 + C13437 * C2426 + C13440 * C2025 +
              C13436 * C2035) *
                 C31155 +
             (C13441 * C2417 + C13437 * C2420 + C13440 * C2017 +
              C13436 * C2026) *
                 C1160) *
                C31397 * C13438) *
               C31520) *
              C31475 +
          ((((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1160 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31155) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1160 + (C14376 + C14375) * C31155) * C31397 *
                C13439) *
               C2300 -
           (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
                C13439 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C31397 * C13438) *
               C2299 -
           (((C15812 + C15811) * C31155 + (C15810 + C15809) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1317 + C13437 * C1328 + C13440 * C1308 +
              C13436 * C1324) *
                 C31155 +
             (C13441 * C1301 + C13437 * C1316 + C13440 * C1297 +
              C13436 * C1309) *
                 C1160) *
                C31397 * C13438) *
               C2301 +
           (((C13440 * C2417 + C13436 * C2420 + C13441 * C6266 +
              C13437 * C6270) *
                 C1160 +
             (C13440 * C2421 + C13436 * C2426 + C13441 * C6269 +
              C13437 * C6275) *
                 C31155) *
                C31397 * C13438 +
            ((C13440 * C2418 + C13436 * C2422 + C13441 * C6526 +
              C13437 * C6527) *
                 C1160 +
             (C13440 * C2423 + C13436 * C2427 + C13441 * C6528 +
              C13437 * C6529) *
                 C31155) *
                C31397 * C13439) *
               C31520) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                   C114 +
               (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                   C102 -
               (C13475 + C13476) * C115 - (C13477 + C13478) * C103 +
               (C13479 + C13480) * C116 + (C13481 + C13482) * C104 -
               (C13483 + C13484) * C117 - (C13485 + C13486) * C105 +
               (C13487 + C13488) * C118 + (C13489 + C13490) * C106) *
                  C31397 * C13438 +
              ((C13476 + C13475) * C114 + (C13478 + C13477) * C102 -
               (C13480 + C13479) * C115 - (C13482 + C13481) * C103 +
               (C13484 + C13483) * C116 + (C13486 + C13485) * C104 -
               (C13488 + C13487) * C117 - (C13490 + C13489) * C105 +
               (C13440 * C124 + C13436 * C136 + C13441 * C669 + C13437 * C670) *
                   C118 +
               (C13440 * C137 + C13436 * C145 + C13441 * C671 + C13437 * C672) *
                   C106) *
                  C31397 * C13439) *
             C31218 * C31206 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13440 * C119 + C13436 * C126 + C13441 * C297 +
                 C13437 * C308) *
                    C293 +
                (C13440 * C127 + C13436 * C140 + C13441 * C307 +
                 C13437 * C326) *
                    C287 -
                (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
                (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
                   C31397 * C13438 +
               ((C13476 + C13475) * C293 + (C13478 + C13477) * C287 -
                (C13480 + C13479) * C294 - (C13482 + C13481) * C288 +
                (C13484 + C13483) * C295 + (C13486 + C13485) * C31497) *
                   C31397 * C13439) *
                  C31218 * C31541 +
              (((C13669 + C13670) * C294 -
                ((C13441 * C317 + C13437 * C331 + C13440 * C307 +
                  C13436 * C326) *
                     C287 +
                 (C13441 * C301 + C13437 * C316 + C13440 * C297 +
                  C13436 * C308) *
                     C293) +
                (C13671 + C13672) * C288 - (C13673 + C13674) * C295 -
                (C13675 + C13676) * C31497) *
                   C31397 * C13438 +
               ((C13674 + C13673) * C294 -
                ((C13672 + C13671) * C287 + (C13670 + C13669) * C293) +
                (C13676 + C13675) * C288 -
                (C13441 * C304 + C13437 * C322 + C13440 * C299 +
                 C13436 * C312) *
                    C295 -
                (C13441 * C323 + C13437 * C334 + C13440 * C313 +
                 C13436 * C329) *
                    C31497) *
                   C31397 * C13439) *
                  C31218 * C31529 +
              (((C13440 * C301 + C13436 * C316 + C13441 * C1163 +
                 C13437 * C1172) *
                    C293 +
                (C13440 * C317 + C13436 * C331 + C13441 * C1171 +
                 C13437 * C1181) *
                    C287 -
                (C13677 + C13678) * C294 - (C13679 + C13680) * C288 +
                (C13681 + C13682) * C295 + (C13683 + C13684) * C31497) *
                   C31397 * C13438 +
               ((C13678 + C13677) * C293 + (C13680 + C13679) * C287 -
                (C13682 + C13681) * C294 - (C13684 + C13683) * C288 +
                (C13440 * C304 + C13436 * C322 + C13441 * C1437 +
                 C13437 * C1438) *
                    C295 +
                (C13440 * C323 + C13436 * C334 + C13441 * C1439 +
                 C13437 * C1440) *
                    C31497) *
                   C31397 * C13439) *
                  C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C293 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C287 -
            (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
            (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
               C31397 * C13438 +
           ((C13476 + C13475) * C293 + (C13478 + C13477) * C287 -
            (C13480 + C13479) * C294 - (C13482 + C13481) * C288 +
            (C13484 + C13483) * C295 + (C13486 + C13485) * C31497) *
               C31397 * C13439) *
              C31542 +
          (((C13863 + C13864) * C294 -
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C287 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C293) +
            (C13865 + C13866) * C288 - (C13867 + C13868) * C295 -
            (C13869 + C13870) * C31497) *
               C31397 * C13438 +
           ((C13868 + C13867) * C294 -
            ((C13866 + C13865) * C287 + (C13864 + C13863) * C293) +
            (C13870 + C13869) * C288 -
            (C13441 * C938 + C13437 * C946 + C13440 * C488 + C13436 * C501) *
                C295 -
            (C13441 * C947 + C13437 * C953 + C13440 * C502 + C13436 * C518) *
                C31497) *
               C31397 * C13439) *
              C31531 +
          (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                C293 +
            (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                C287 -
            (C13871 + C13872) * C294 - (C13873 + C13874) * C288 +
            (C13875 + C13876) * C295 + (C13877 + C13878) * C31497) *
               C31397 * C13438 +
           ((C13872 + C13871) * C293 + (C13874 + C13873) * C287 -
            (C13876 + C13875) * C294 - (C13878 + C13877) * C288 +
            (C13440 * C493 + C13436 * C511 + C13441 * C2185 + C13437 * C2186) *
                C295 +
            (C13440 * C512 + C13436 * C523 + C13441 * C2187 + C13437 * C2188) *
                C31497) *
               C31397 * C13439) *
              C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1089 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31538 -
            (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
            (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
               C31397 * C13438 +
           ((C13476 + C13475) * C1089 + (C13478 + C13477) * C31538 -
            (C13480 + C13479) * C1090 - (C13482 + C13481) * C31525 +
            (C13484 + C13483) * C1091 + (C13486 + C13485) * C31497) *
               C31397 * C13439) *
              C31218 * C1086 +
          (((C13669 + C13670) * C1090 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31538 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1089) +
            (C13671 + C13672) * C31525 - (C13673 + C13674) * C1091 -
            (C13675 + C13676) * C31497) *
               C31397 * C13438 +
           ((C13674 + C13673) * C1090 -
            ((C13672 + C13671) * C31538 + (C13670 + C13669) * C1089) +
            (C13676 + C13675) * C31525 - (C14018 + C14017) * C1091 -
            (C14020 + C14019) * C31497) *
               C31397 * C13439) *
              C31218 * C1087 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1089 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31538 -
            (C13677 + C13678) * C1090 - (C13679 + C13680) * C31525 +
            (C13681 + C13682) * C1091 + (C13683 + C13684) * C31497) *
               C31397 * C13438 +
           ((C13678 + C13677) * C1089 + (C13680 + C13679) * C31538 -
            (C13682 + C13681) * C1090 - (C13684 + C13683) * C31525 +
            (C13440 * C304 + C13436 * C322 + C13441 * C1437 + C13437 * C1438) *
                C1091 +
            (C13440 * C323 + C13436 * C334 + C13441 * C1439 + C13437 * C1440) *
                C31497) *
               C31397 * C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1160 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31155) *
               C31397 * C13438 +
           ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
               C13439) *
              C31218 * C1155 -
          (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
               C13439 +
           ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                C31155 +
            (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                C1160) *
               C31397 * C13438) *
              C31218 * C1156 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1160 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31155) *
               C31397 * C13438 +
           ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
               C13439) *
              C31218 * C1157 -
          (((C13441 * C1176 + C13437 * C1183 + C13440 * C1169 +
             C13436 * C1180) *
                C31155 +
            (C13441 * C1165 + C13437 * C1175 + C13440 * C1162 +
             C13436 * C1170) *
                C1160) *
               C31397 * C13439 +
           ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
             C13436 * C1181) *
                C31155 +
            (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
             C13436 * C1172) *
                C1160) *
               C31397 * C13438) *
              C31218 * C1158 +
          (((C13440 * C1164 + C13436 * C1173 + C13441 * C5500 +
             C13437 * C5503) *
                C1160 +
            (C13440 * C1174 + C13436 * C1182 + C13441 * C5502 +
             C13437 * C5506) *
                C31155) *
               C31397 * C13438 +
           ((C13440 * C1165 + C13436 * C1175 + C13441 * C5728 +
             C13437 * C5729) *
                C1160 +
            (C13440 * C1176 + C13436 * C1183 + C13441 * C5730 +
             C13437 * C5731) *
                C31155) *
               C31397 * C13439) *
              C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
                C13439) *
               C31542 -
           (((C13866 + C13865) * C31155 + (C13864 + C13863) * C1160) * C31397 *
                C13439 +
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31155 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1160) *
                C31397 * C13438) *
               C31531 +
           (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                 C1160 +
             (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                 C31155) *
                C31397 * C13438 +
            ((C13872 + C13871) * C1160 + (C13874 + C13873) * C31155) * C31397 *
                C13439) *
               C31507) *
              C1086 +
          ((((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1160 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31155) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1160 + (C14376 + C14375) * C31155) * C31397 *
                C13439) *
               C31531 -
           (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
                C13439 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C31397 * C13438) *
               C31542 -
           (((C13441 * C1319 + C13437 * C1329 + C13440 * C1306 +
              C13436 * C1323) *
                 C31155 +
             (C13441 * C1302 + C13437 * C1318 + C13440 * C1296 +
              C13436 * C1307) *
                 C1160) *
                C31397 * C13439 +
            ((C13441 * C1317 + C13437 * C1328 + C13440 * C1308 +
              C13436 * C1324) *
                 C31155 +
             (C13441 * C1301 + C13437 * C1316 + C13440 * C1297 +
              C13436 * C1309) *
                 C1160) *
                C31397 * C13438) *
               C31507) *
              C1087 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C31397 * C13438 +
            ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
                C13439) *
               C31542 -
           (((C13441 * C1719 + C13437 * C1723 + C13440 * C1312 +
              C13436 * C1326) *
                 C31155 +
             (C13441 * C1714 + C13437 * C1718 + C13440 * C1299 +
              C13436 * C1313) *
                 C1160) *
                C31397 * C13439 +
            ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
              C13436 * C1327) *
                 C31155 +
             (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
              C13436 * C1315) *
                 C1160) *
                C31397 * C13438) *
               C31531 +
           (((C13440 * C1301 + C13436 * C1316 + C13441 * C5618 +
              C13437 * C5622) *
                 C1160 +
             (C13440 * C1317 + C13436 * C1328 + C13441 * C5621 +
              C13437 * C5627) *
                 C31155) *
                C31397 * C13438 +
            ((C13440 * C1302 + C13436 * C1318 + C13441 * C6424 +
              C13437 * C6425) *
                 C1160 +
             (C13440 * C1319 + C13436 * C1329 + C13441 * C6426 +
              C13437 * C6427) *
                 C31155) *
                C31397 * C13439) *
               C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1089 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31538 -
            (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
            (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
               C31397 * C13438 +
           ((C13476 + C13475) * C1089 + (C13478 + C13477) * C31538 -
            (C13480 + C13479) * C1090 - (C13482 + C13481) * C31525 +
            (C13484 + C13483) * C1091 + (C13486 + C13485) * C31497) *
               C31397 * C13439) *
              C1835 +
          (((C13863 + C13864) * C1090 -
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31538 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1089) +
            (C13865 + C13866) * C31525 - (C13867 + C13868) * C1091 -
            (C13869 + C13870) * C31497) *
               C31397 * C13438 +
           ((C13868 + C13867) * C1090 -
            ((C13866 + C13865) * C31538 + (C13864 + C13863) * C1089) +
            (C13870 + C13869) * C31525 - (C14160 + C14159) * C1091 -
            (C14162 + C14161) * C31497) *
               C31397 * C13439) *
              C1836 +
          (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                C1089 +
            (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                C31538 -
            (C13871 + C13872) * C1090 - (C13873 + C13874) * C31525 +
            (C13875 + C13876) * C1091 + (C13877 + C13878) * C31497) *
               C31397 * C13438 +
           ((C13872 + C13871) * C1089 + (C13874 + C13873) * C31538 -
            (C13876 + C13875) * C1090 - (C13878 + C13877) * C31525 +
            (C13440 * C493 + C13436 * C511 + C13441 * C2185 + C13437 * C2186) *
                C1091 +
            (C13440 * C512 + C13436 * C523 + C13441 * C2187 + C13437 * C2188) *
                C31497) *
               C31397 * C13439) *
              C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
                C13439) *
               C1835 -
           (((C13866 + C13865) * C31155 + (C13864 + C13863) * C1160) * C31397 *
                C13439 +
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31155 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1160) *
                C31397 * C13438) *
               C1836 +
           (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                 C1160 +
             (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                 C31155) *
                C31397 * C13438 +
            ((C13872 + C13871) * C1160 + (C13874 + C13873) * C31155) * C31397 *
                C13439) *
               C31507) *
              C31541 +
          ((((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1160 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31155) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1160 + (C14376 + C14375) * C31155) * C31397 *
                C13439) *
               C1836 -
           (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
                C13439 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C31397 * C13438) *
               C1835 -
           (((C13441 * C1319 + C13437 * C1329 + C13440 * C1306 +
              C13436 * C1323) *
                 C31155 +
             (C13441 * C1302 + C13437 * C1318 + C13440 * C1296 +
              C13436 * C1307) *
                 C1160) *
                C31397 * C13439 +
            ((C13441 * C1317 + C13437 * C1328 + C13440 * C1308 +
              C13436 * C1324) *
                 C31155 +
             (C13441 * C1301 + C13437 * C1316 + C13440 * C1297 +
              C13436 * C1309) *
                 C1160) *
                C31397 * C13438) *
               C31507) *
              C31529 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C31397 * C13438 +
            ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
                C13439) *
               C1835 -
           (((C15102 + C15101) * C31155 + (C15100 + C15099) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
              C13436 * C1327) *
                 C31155 +
             (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
              C13436 * C1315) *
                 C1160) *
                C31397 * C13438) *
               C1836 +
           (((C13440 * C1301 + C13436 * C1316 + C13441 * C5618 +
              C13437 * C5622) *
                 C1160 +
             (C13440 * C1317 + C13436 * C1328 + C13441 * C5621 +
              C13437 * C5627) *
                 C31155) *
                C31397 * C13438 +
            ((C13440 * C1302 + C13436 * C1318 + C13441 * C6424 +
              C13437 * C6425) *
                 C1160 +
             (C13440 * C1319 + C13436 * C1329 + C13441 * C6426 +
              C13437 * C6427) *
                 C31155) *
                C31397 * C13439) *
               C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1160 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31155) *
               C31397 * C13438 +
           ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
               C13439) *
              C2010 -
          (((C13866 + C13865) * C31155 + (C13864 + C13863) * C1160) * C31397 *
               C13439 +
           ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                C31155 +
            (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                C1160) *
               C31397 * C13438) *
              C2011 +
          (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                C1160 +
            (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                C31155) *
               C31397 * C13438 +
           ((C13872 + C13871) * C1160 + (C13874 + C13873) * C31155) * C31397 *
               C13439) *
              C2012 -
          (((C13441 * C2423 + C13437 * C2427 + C13440 * C2023 +
             C13436 * C2034) *
                C31155 +
            (C13441 * C2418 + C13437 * C2422 + C13440 * C2016 +
             C13436 * C2024) *
                C1160) *
               C31397 * C13439 +
           ((C13441 * C2421 + C13437 * C2426 + C13440 * C2025 +
             C13436 * C2035) *
                C31155 +
            (C13441 * C2417 + C13437 * C2420 + C13440 * C2017 +
             C13436 * C2026) *
                C1160) *
               C31397 * C13438) *
              C2013 +
          (((C13440 * C2018 + C13436 * C2027 + C13441 * C6267 +
             C13437 * C6271) *
                C1160 +
            (C13440 * C2028 + C13436 * C2036 + C13441 * C6273 +
             C13437 * C6276) *
                C31155) *
               C31397 * C13438 +
           ((C13440 * C2019 + C13436 * C2029 + C13441 * C10764 +
             C13437 * C10765) *
                C1160 +
            (C13440 * C2030 + C13436 * C2037 + C13441 * C10766 +
             C13437 * C10767) *
                C31155) *
               C31397 * C13439) *
              C2014) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30274 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31457 -
             (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
                C31397 * C13438 +
            ((C13476 + C13475) * C30274 + (C13478 + C13477) * C31457 -
             (C13480 + C13479) * C30255 - (C13482 + C13481) * C31165) *
                C31397 * C13439) *
               C31476 +
           (((C13863 + C13864) * C30255 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C31457 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C30274) +
             (C13865 + C13866) * C31165) *
                C31397 * C13438 +
            ((C13868 + C13867) * C30255 -
             ((C13866 + C13865) * C31457 + (C13864 + C13863) * C30274) +
             (C13870 + C13869) * C31165) *
                C31397 * C13439) *
               C31305) *
              C1086 +
          ((((C13669 + C13670) * C30255 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31457 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30274) +
             (C13671 + C13672) * C31165) *
                C31397 * C13438 +
            ((C13674 + C13673) * C30255 -
             ((C13672 + C13671) * C31457 + (C13670 + C13669) * C30274) +
             (C13676 + C13675) * C31165) *
                C31397 * C13439) *
               C31476 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C30274 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31457 -
             (C14373 + C14374) * C30255 - (C14375 + C14376) * C31165) *
                C31397 * C13438 +
            ((C14374 + C14373) * C30274 + (C14376 + C14375) * C31457 -
             (C14378 + C14377) * C30255 - (C14380 + C14379) * C31165) *
                C31397 * C13439) *
               C31305) *
              C1087 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C30274 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31457 -
             (C13677 + C13678) * C30255 - (C13679 + C13680) * C31165) *
                C31397 * C13438 +
            ((C13678 + C13677) * C30274 + (C13680 + C13679) * C31457 -
             (C13682 + C13681) * C30255 - (C13684 + C13683) * C31165) *
                C31397 * C13439) *
               C31476 +
           (((C15099 + C15100) * C30255 -
             ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
               C13436 * C1327) *
                  C31457 +
              (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
               C13436 * C1315) *
                  C30274) +
             (C15101 + C15102) * C31165) *
                C31397 * C13438 +
            ((C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
              C13437 * C1720) *
                 C30255 -
             ((C15102 + C15101) * C31457 + (C15100 + C15099) * C30274) +
             (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
              C13437 * C1724) *
                 C31165) *
                C31397 * C13439) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C665 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C659 -
            (C13475 + C13476) * C666 - (C13477 + C13478) * C660 +
            (C13479 + C13480) * C667 + (C13481 + C13482) * C661 -
            (C13483 + C13484) * C668 - (C13485 + C13486) * C31508) *
               C31397 * C13438 +
           ((C13476 + C13475) * C665 + (C13478 + C13477) * C659 -
            (C13480 + C13479) * C666 - (C13482 + C13481) * C660 +
            (C13484 + C13483) * C667 + (C13486 + C13485) * C661 -
            (C13488 + C13487) * C668 - (C13490 + C13489) * C31508) *
               C31397 * C13439) *
              C31476 +
          (((C13863 + C13864) * C666 -
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C659 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C665) +
            (C13865 + C13866) * C660 - (C13867 + C13868) * C667 -
            (C13869 + C13870) * C661 + (C14159 + C14160) * C668 +
            (C14161 + C14162) * C31508) *
               C31397 * C13438 +
           ((C13868 + C13867) * C666 -
            ((C13866 + C13865) * C659 + (C13864 + C13863) * C665) +
            (C13870 + C13869) * C660 - (C14160 + C14159) * C667 -
            (C14162 + C14161) * C661 +
            (C13440 * C489 + C13436 * C503 + C13441 * C939 + C13437 * C948) *
                C668 +
            (C13440 * C504 + C13436 * C519 + C13441 * C949 + C13437 * C954) *
                C31508) *
               C31397 * C13439) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C30274 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31457 -
            (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
               C31397 * C13438 +
           ((C13476 + C13475) * C30274 + (C13478 + C13477) * C31457 -
            (C13480 + C13479) * C30255 - (C13482 + C13481) * C31165) *
               C31397 * C13439) *
              C2299 +
          (((C13863 + C13864) * C30255 -
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31457 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C30274) +
            (C13865 + C13866) * C31165) *
               C31397 * C13438 +
           ((C13868 + C13867) * C30255 -
            ((C13866 + C13865) * C31457 + (C13864 + C13863) * C30274) +
            (C13870 + C13869) * C31165) *
               C31397 * C13439) *
              C2300 +
          (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                C30274 +
            (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                C31457 -
            (C13871 + C13872) * C30255 - (C13873 + C13874) * C31165) *
               C31397 * C13438 +
           ((C13872 + C13871) * C30274 + (C13874 + C13873) * C31457 -
            (C13876 + C13875) * C30255 - (C13878 + C13877) * C31165) *
               C31397 * C13439) *
              C2301 +
          (((C15951 + C15952) * C30255 -
            ((C13441 * C2421 + C13437 * C2426 + C13440 * C2025 +
              C13436 * C2035) *
                 C31457 +
             (C13441 * C2417 + C13437 * C2420 + C13440 * C2017 +
              C13436 * C2026) *
                 C30274) +
            (C15953 + C15954) * C31165) *
               C31397 * C13438 +
           ((C13440 * C2015 + C13436 * C2022 + C13441 * C2419 +
             C13437 * C2424) *
                C30255 -
            ((C15954 + C15953) * C31457 + (C15952 + C15951) * C30274) +
            (C13440 * C2021 + C13436 * C2033 + C13441 * C2425 +
             C13437 * C2428) *
                C31165) *
               C31397 * C13439) *
              C31520) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C293 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C287 -
            (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
            (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
               C31397 * C13438 +
           ((C13476 + C13475) * C293 + (C13478 + C13477) * C287 -
            (C13480 + C13479) * C294 - (C13482 + C13481) * C288 +
            (C13484 + C13483) * C295 + (C13486 + C13485) * C31497) *
               C31397 * C13439) *
              C31218 * C31541 +
          (((C13669 + C13670) * C294 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C287 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C293) +
            (C13671 + C13672) * C288 - (C13673 + C13674) * C295 -
            (C13675 + C13676) * C31497) *
               C31397 * C13438 +
           ((C13674 + C13673) * C294 -
            ((C13672 + C13671) * C287 + (C13670 + C13669) * C293) +
            (C13676 + C13675) * C288 -
            (C13441 * C304 + C13437 * C322 + C13440 * C299 + C13436 * C312) *
                C295 -
            (C13441 * C323 + C13437 * C334 + C13440 * C313 + C13436 * C329) *
                C31497) *
               C31397 * C13439) *
              C31218 * C31529 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C293 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C287 -
            (C13677 + C13678) * C294 - (C13679 + C13680) * C288 +
            (C13681 + C13682) * C295 + (C13683 + C13684) * C31497) *
               C31397 * C13438 +
           ((C13678 + C13677) * C293 + (C13680 + C13679) * C287 -
            (C13682 + C13681) * C294 - (C13684 + C13683) * C288 +
            (C13440 * C304 + C13436 * C322 + C13441 * C1437 + C13437 * C1438) *
                C295 +
            (C13440 * C323 + C13436 * C334 + C13441 * C1439 + C13437 * C1440) *
                C31497) *
               C31397 * C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
               C114 +
           (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
               C102 -
           (C13475 + C13476) * C115 - (C13477 + C13478) * C103 +
           (C13479 + C13480) * C116 + (C13481 + C13482) * C104 -
           (C13483 + C13484) * C117 - (C13485 + C13486) * C105 +
           (C13487 + C13488) * C118 + (C13489 + C13490) * C106) *
              C31397 * C13438 +
          ((C13476 + C13475) * C114 + (C13478 + C13477) * C102 -
           (C13480 + C13479) * C115 - (C13482 + C13481) * C103 +
           (C13484 + C13483) * C116 + (C13486 + C13485) * C104 -
           (C13488 + C13487) * C117 - (C13490 + C13489) * C105 +
           (C13440 * C124 + C13436 * C136 + C13441 * C669 + C13437 * C670) *
               C118 +
           (C13440 * C137 + C13436 * C145 + C13441 * C671 + C13437 * C672) *
               C106) *
              C31397 * C13439) *
         C31218 * C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1089 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31538 -
            (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
            (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
               C31397 * C13438 +
           ((C13476 + C13475) * C1089 + (C13478 + C13477) * C31538 -
            (C13480 + C13479) * C1090 - (C13482 + C13481) * C31525 +
            (C13484 + C13483) * C1091 + (C13486 + C13485) * C31497) *
               C31397 * C13439) *
              C31218 * C1086 +
          (((C13669 + C13670) * C1090 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31538 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1089) +
            (C13671 + C13672) * C31525 - (C13673 + C13674) * C1091 -
            (C13675 + C13676) * C31497) *
               C31397 * C13438 +
           ((C13674 + C13673) * C1090 -
            ((C13672 + C13671) * C31538 + (C13670 + C13669) * C1089) +
            (C13676 + C13675) * C31525 - (C14018 + C14017) * C1091 -
            (C14020 + C14019) * C31497) *
               C31397 * C13439) *
              C31218 * C1087 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1089 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31538 -
            (C13677 + C13678) * C1090 - (C13679 + C13680) * C31525 +
            (C13681 + C13682) * C1091 + (C13683 + C13684) * C31497) *
               C31397 * C13438 +
           ((C13678 + C13677) * C1089 + (C13680 + C13679) * C31538 -
            (C13682 + C13681) * C1090 - (C13684 + C13683) * C31525 +
            (C13440 * C304 + C13436 * C322 + C13441 * C1437 + C13437 * C1438) *
                C1091 +
            (C13440 * C323 + C13436 * C334 + C13441 * C1439 + C13437 * C1440) *
                C31497) *
               C31397 * C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1160 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31155) *
               C31397 * C13438 +
           ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
               C13439) *
              C31218 * C1155 -
          (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
               C13439 +
           ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                C31155 +
            (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                C1160) *
               C31397 * C13438) *
              C31218 * C1156 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1160 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31155) *
               C31397 * C13438 +
           ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
               C13439) *
              C31218 * C1157 -
          (((C13441 * C1176 + C13437 * C1183 + C13440 * C1169 +
             C13436 * C1180) *
                C31155 +
            (C13441 * C1165 + C13437 * C1175 + C13440 * C1162 +
             C13436 * C1170) *
                C1160) *
               C31397 * C13439 +
           ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
             C13436 * C1181) *
                C31155 +
            (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
             C13436 * C1172) *
                C1160) *
               C31397 * C13438) *
              C31218 * C1158 +
          (((C13440 * C1164 + C13436 * C1173 + C13441 * C5500 +
             C13437 * C5503) *
                C1160 +
            (C13440 * C1174 + C13436 * C1182 + C13441 * C5502 +
             C13437 * C5506) *
                C31155) *
               C31397 * C13438 +
           ((C13440 * C1165 + C13436 * C1175 + C13441 * C5728 +
             C13437 * C5729) *
                C1160 +
            (C13440 * C1176 + C13436 * C1183 + C13441 * C5730 +
             C13437 * C5731) *
                C31155) *
               C31397 * C13439) *
              C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1089 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31538 -
            (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
            (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
               C31397 * C13438 +
           ((C13476 + C13475) * C1089 + (C13478 + C13477) * C31538 -
            (C13480 + C13479) * C1090 - (C13482 + C13481) * C31525 +
            (C13484 + C13483) * C1091 + (C13486 + C13485) * C31497) *
               C31397 * C13439) *
              C1835 +
          (((C13863 + C13864) * C1090 -
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31538 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1089) +
            (C13865 + C13866) * C31525 - (C13867 + C13868) * C1091 -
            (C13869 + C13870) * C31497) *
               C31397 * C13438 +
           ((C13868 + C13867) * C1090 -
            ((C13866 + C13865) * C31538 + (C13864 + C13863) * C1089) +
            (C13870 + C13869) * C31525 - (C14160 + C14159) * C1091 -
            (C14162 + C14161) * C31497) *
               C31397 * C13439) *
              C1836 +
          (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                C1089 +
            (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                C31538 -
            (C13871 + C13872) * C1090 - (C13873 + C13874) * C31525 +
            (C13875 + C13876) * C1091 + (C13877 + C13878) * C31497) *
               C31397 * C13438 +
           ((C13872 + C13871) * C1089 + (C13874 + C13873) * C31538 -
            (C13876 + C13875) * C1090 - (C13878 + C13877) * C31525 +
            (C13440 * C493 + C13436 * C511 + C13441 * C2185 + C13437 * C2186) *
                C1091 +
            (C13440 * C512 + C13436 * C523 + C13441 * C2187 + C13437 * C2188) *
                C31497) *
               C31397 * C13439) *
              C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
                C13439) *
               C1835 -
           (((C13866 + C13865) * C31155 + (C13864 + C13863) * C1160) * C31397 *
                C13439 +
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31155 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1160) *
                C31397 * C13438) *
               C1836 +
           (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                 C1160 +
             (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                 C31155) *
                C31397 * C13438 +
            ((C13872 + C13871) * C1160 + (C13874 + C13873) * C31155) * C31397 *
                C13439) *
               C31507) *
              C31541 +
          ((((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1160 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31155) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1160 + (C14376 + C14375) * C31155) * C31397 *
                C13439) *
               C1836 -
           (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
                C13439 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C31397 * C13438) *
               C1835 -
           (((C13441 * C1319 + C13437 * C1329 + C13440 * C1306 +
              C13436 * C1323) *
                 C31155 +
             (C13441 * C1302 + C13437 * C1318 + C13440 * C1296 +
              C13436 * C1307) *
                 C1160) *
                C31397 * C13439 +
            ((C13441 * C1317 + C13437 * C1328 + C13440 * C1308 +
              C13436 * C1324) *
                 C31155 +
             (C13441 * C1301 + C13437 * C1316 + C13440 * C1297 +
              C13436 * C1309) *
                 C1160) *
                C31397 * C13438) *
               C31507) *
              C31529 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C31397 * C13438 +
            ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
                C13439) *
               C1835 -
           (((C15102 + C15101) * C31155 + (C15100 + C15099) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
              C13436 * C1327) *
                 C31155 +
             (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
              C13436 * C1315) *
                 C1160) *
                C31397 * C13438) *
               C1836 +
           (((C13440 * C1301 + C13436 * C1316 + C13441 * C5618 +
              C13437 * C5622) *
                 C1160 +
             (C13440 * C1317 + C13436 * C1328 + C13441 * C5621 +
              C13437 * C5627) *
                 C31155) *
                C31397 * C13438 +
            ((C13440 * C1302 + C13436 * C1318 + C13441 * C6424 +
              C13437 * C6425) *
                 C1160 +
             (C13440 * C1319 + C13436 * C1329 + C13441 * C6426 +
              C13437 * C6427) *
                 C31155) *
                C31397 * C13439) *
               C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30284 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31160 -
             (C13475 + C13476) * C30280 - (C13477 + C13478) * C31168 +
             (C13479 + C13480) * C30290 + (C13481 + C13482) * C2901) *
                C31397 * C13438 +
            ((C13476 + C13475) * C30284 + (C13478 + C13477) * C31160 -
             (C13480 + C13479) * C30280 - (C13482 + C13481) * C31168 +
             (C13484 + C13483) * C30290 + (C13486 + C13485) * C2901) *
                C31397 * C13439) *
               C3298 +
           (((C13863 + C13864) * C30280 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C31160 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C30284) +
             (C13865 + C13866) * C31168 - (C13867 + C13868) * C30290 -
             (C13869 + C13870) * C2901) *
                C31397 * C13438 +
            ((C13868 + C13867) * C30280 -
             ((C13866 + C13865) * C31160 + (C13864 + C13863) * C30284) +
             (C13870 + C13869) * C31168 - (C14160 + C14159) * C30290 -
             (C14162 + C14161) * C2901) *
                C31397 * C13439) *
               C31305) *
              C31475 +
          ((((C13669 + C13670) * C30280 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31160 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30284) +
             (C13671 + C13672) * C31168 - (C13673 + C13674) * C30290 -
             (C13675 + C13676) * C2901) *
                C31397 * C13438 +
            ((C13674 + C13673) * C30280 -
             ((C13672 + C13671) * C31160 + (C13670 + C13669) * C30284) +
             (C13676 + C13675) * C31168 - (C14018 + C14017) * C30290 -
             (C14020 + C14019) * C2901) *
                C31397 * C13439) *
               C3298 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C30284 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31160 -
             (C14373 + C14374) * C30280 - (C14375 + C14376) * C31168 +
             (C14377 + C14378) * C30290 + (C14379 + C14380) * C2901) *
                C31397 * C13438 +
            ((C14374 + C14373) * C30284 + (C14376 + C14375) * C31160 -
             (C14378 + C14377) * C30280 - (C14380 + C14379) * C31168 +
             (C13440 * C938 + C13436 * C946 + C13441 * C1599 + C13437 * C1600) *
                 C30290 +
             (C13440 * C947 + C13436 * C953 + C13441 * C1601 + C13437 * C1602) *
                 C2901) *
                C31397 * C13439) *
               C31305) *
              C31265)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C2641 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C2635 -
             (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
                C31397 * C13438 +
            ((C13476 + C13475) * C2641 + (C13478 + C13477) * C2635 -
             (C13480 + C13479) * C2642 - (C13482 + C13481) * C31165) *
                C31397 * C13439) *
               C31301 +
           (((C13863 + C13864) * C2642 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C2635 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C2641) +
             (C13865 + C13866) * C31165) *
                C31397 * C13438 +
            ((C13868 + C13867) * C2642 -
             ((C13866 + C13865) * C2635 + (C13864 + C13863) * C2641) +
             (C13870 + C13869) * C31165) *
                C31397 * C13439) *
               C31308 +
           (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                 C2641 +
             (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                 C2635 -
             (C13871 + C13872) * C2642 - (C13873 + C13874) * C31165) *
                C31397 * C13438 +
            ((C13872 + C13871) * C2641 + (C13874 + C13873) * C2635 -
             (C13876 + C13875) * C2642 - (C13878 + C13877) * C31165) *
                C31397 * C13439) *
               C3806) *
              C31475 +
          ((((C13669 + C13670) * C2642 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C2635 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C2641) +
             (C13671 + C13672) * C31165) *
                C31397 * C13438 +
            ((C13674 + C13673) * C2642 -
             ((C13672 + C13671) * C2635 + (C13670 + C13669) * C2641) +
             (C13676 + C13675) * C31165) *
                C31397 * C13439) *
               C31301 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C2641 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C2635 -
             (C14373 + C14374) * C2642 - (C14375 + C14376) * C31165) *
                C31397 * C13438 +
            ((C14374 + C14373) * C2641 + (C14376 + C14375) * C2635 -
             (C14378 + C14377) * C2642 - (C14380 + C14379) * C31165) *
                C31397 * C13439) *
               C31308 +
           (((C15809 + C15810) * C2642 -
             ((C13441 * C1317 + C13437 * C1328 + C13440 * C1308 +
               C13436 * C1324) *
                  C2635 +
              (C13441 * C1301 + C13437 * C1316 + C13440 * C1297 +
               C13436 * C1309) *
                  C2641) +
             (C15811 + C15812) * C31165) *
                C31397 * C13438 +
            ((C13440 * C1295 + C13436 * C1305 + C13441 * C1303 +
              C13437 * C1320) *
                 C2642 -
             ((C15812 + C15811) * C2635 + (C15810 + C15809) * C2641) +
             (C13440 * C1304 + C13436 * C1322 + C13441 * C1321 +
              C13437 * C1330) *
                 C31165) *
                C31397 * C13439) *
               C3806) *
              C31265)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C2641 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C2635 -
             (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
                C31397 * C13438 +
            ((C13476 + C13475) * C2641 + (C13478 + C13477) * C2635 -
             (C13480 + C13479) * C2642 - (C13482 + C13481) * C31165) *
                C31397 * C13439) *
               C3298 +
           (((C13863 + C13864) * C2642 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C2635 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C2641) +
             (C13865 + C13866) * C31165) *
                C31397 * C13438 +
            ((C13868 + C13867) * C2642 -
             ((C13866 + C13865) * C2635 + (C13864 + C13863) * C2641) +
             (C13870 + C13869) * C31165) *
                C31397 * C13439) *
               C31305) *
              C31541 +
          ((((C13669 + C13670) * C2642 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C2635 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C2641) +
             (C13671 + C13672) * C31165) *
                C31397 * C13438 +
            ((C13674 + C13673) * C2642 -
             ((C13672 + C13671) * C2635 + (C13670 + C13669) * C2641) +
             (C13676 + C13675) * C31165) *
                C31397 * C13439) *
               C3298 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C2641 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C2635 -
             (C14373 + C14374) * C2642 - (C14375 + C14376) * C31165) *
                C31397 * C13438 +
            ((C14374 + C14373) * C2641 + (C14376 + C14375) * C2635 -
             (C14378 + C14377) * C2642 - (C14380 + C14379) * C31165) *
                C31397 * C13439) *
               C31305) *
              C31529 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C2641 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C2635 -
             (C13677 + C13678) * C2642 - (C13679 + C13680) * C31165) *
                C31397 * C13438 +
            ((C13678 + C13677) * C2641 + (C13680 + C13679) * C2635 -
             (C13682 + C13681) * C2642 - (C13684 + C13683) * C31165) *
                C31397 * C13439) *
               C3298 +
           (((C15099 + C15100) * C2642 -
             ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
               C13436 * C1327) *
                  C2635 +
              (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
               C13436 * C1315) *
                  C2641) +
             (C15101 + C15102) * C31165) *
                C31397 * C13438 +
            ((C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
              C13437 * C1720) *
                 C2642 -
             ((C15102 + C15101) * C2635 + (C15100 + C15099) * C2641) +
             (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
              C13437 * C1724) *
                 C31165) *
                C31397 * C13439) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2533 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31547 -
            (C13475 + C13476) * C2534 - (C13477 + C13478) * C31540 +
            (C13479 + C13480) * C2535 + (C13481 + C13482) * C31527 -
            (C13483 + C13484) * C2536 - (C13485 + C13486) * C31508) *
               C31397 * C13438 +
           ((C13476 + C13475) * C2533 + (C13478 + C13477) * C31547 -
            (C13480 + C13479) * C2534 - (C13482 + C13481) * C31540 +
            (C13484 + C13483) * C2535 + (C13486 + C13485) * C31527 -
            (C13488 + C13487) * C2536 - (C13490 + C13489) * C31508) *
               C31397 * C13439) *
              C3298 +
          (((C13863 + C13864) * C2534 -
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31547 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C2533) +
            (C13865 + C13866) * C31540 - (C13867 + C13868) * C2535 -
            (C13869 + C13870) * C31527 + (C14159 + C14160) * C2536 +
            (C14161 + C14162) * C31508) *
               C31397 * C13438 +
           ((C13868 + C13867) * C2534 -
            ((C13866 + C13865) * C31547 + (C13864 + C13863) * C2533) +
            (C13870 + C13869) * C31540 - (C14160 + C14159) * C2535 -
            (C14162 + C14161) * C31527 +
            (C13440 * C489 + C13436 * C503 + C13441 * C939 + C13437 * C948) *
                C2536 +
            (C13440 * C504 + C13436 * C519 + C13441 * C949 + C13437 * C954) *
                C31508) *
               C31397 * C13439) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2641 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C2635 -
            (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
               C31397 * C13438 +
           ((C13476 + C13475) * C2641 + (C13478 + C13477) * C2635 -
            (C13480 + C13479) * C2642 - (C13482 + C13481) * C31165) *
               C31397 * C13439) *
              C31549 +
          (((C13863 + C13864) * C2642 -
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C2635 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C2641) +
            (C13865 + C13866) * C31165) *
               C31397 * C13438 +
           ((C13868 + C13867) * C2642 -
            ((C13866 + C13865) * C2635 + (C13864 + C13863) * C2641) +
            (C13870 + C13869) * C31165) *
               C31397 * C13439) *
              C31546 +
          (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                C2641 +
            (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                C2635 -
            (C13871 + C13872) * C2642 - (C13873 + C13874) * C31165) *
               C31397 * C13438 +
           ((C13872 + C13871) * C2641 + (C13874 + C13873) * C2635 -
            (C13876 + C13875) * C2642 - (C13878 + C13877) * C31165) *
               C31397 * C13439) *
              C31537 +
          (((C15951 + C15952) * C2642 -
            ((C13441 * C2421 + C13437 * C2426 + C13440 * C2025 +
              C13436 * C2035) *
                 C2635 +
             (C13441 * C2417 + C13437 * C2420 + C13440 * C2017 +
              C13436 * C2026) *
                 C2641) +
            (C15953 + C15954) * C31165) *
               C31397 * C13438 +
           ((C13440 * C2015 + C13436 * C2022 + C13441 * C2419 +
             C13437 * C2424) *
                C2642 -
            ((C15954 + C15953) * C2635 + (C15952 + C15951) * C2641) +
            (C13440 * C2021 + C13436 * C2033 + C13441 * C2425 +
             C13437 * C2428) *
                C31165) *
               C31397 * C13439) *
              C31520) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C30284 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31160 -
            (C13475 + C13476) * C30280 - (C13477 + C13478) * C31168 +
            (C13479 + C13480) * C30290 + (C13481 + C13482) * C2901) *
               C31397 * C13438 +
           ((C13476 + C13475) * C30284 + (C13478 + C13477) * C31160 -
            (C13480 + C13479) * C30280 - (C13482 + C13481) * C31168 +
            (C13484 + C13483) * C30290 + (C13486 + C13485) * C2901) *
               C31397 * C13439) *
              C31301 +
          (((C13863 + C13864) * C30280 -
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31160 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C30284) +
            (C13865 + C13866) * C31168 - (C13867 + C13868) * C30290 -
            (C13869 + C13870) * C2901) *
               C31397 * C13438 +
           ((C13868 + C13867) * C30280 -
            ((C13866 + C13865) * C31160 + (C13864 + C13863) * C30284) +
            (C13870 + C13869) * C31168 - (C14160 + C14159) * C30290 -
            (C14162 + C14161) * C2901) *
               C31397 * C13439) *
              C31308 +
          (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                C30284 +
            (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                C31160 -
            (C13871 + C13872) * C30280 - (C13873 + C13874) * C31168 +
            (C13875 + C13876) * C30290 + (C13877 + C13878) * C2901) *
               C31397 * C13438 +
           ((C13872 + C13871) * C30284 + (C13874 + C13873) * C31160 -
            (C13876 + C13875) * C30280 - (C13878 + C13877) * C31168 +
            (C13440 * C493 + C13436 * C511 + C13441 * C2185 + C13437 * C2186) *
                C30290 +
            (C13440 * C512 + C13436 * C523 + C13441 * C2187 + C13437 * C2188) *
                C2901) *
               C31397 * C13439) *
              C3806) *
         C31206) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2533 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31547 -
            (C13475 + C13476) * C2534 - (C13477 + C13478) * C31540 +
            (C13479 + C13480) * C2535 + (C13481 + C13482) * C31527 -
            (C13483 + C13484) * C2536 - (C13485 + C13486) * C31508) *
               C31397 * C13438 +
           ((C13476 + C13475) * C2533 + (C13478 + C13477) * C31547 -
            (C13480 + C13479) * C2534 - (C13482 + C13481) * C31540 +
            (C13484 + C13483) * C2535 + (C13486 + C13485) * C31527 -
            (C13488 + C13487) * C2536 - (C13490 + C13489) * C31508) *
               C31397 * C13439) *
              C3298 +
          (((C13863 + C13864) * C2534 -
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31547 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C2533) +
            (C13865 + C13866) * C31540 - (C13867 + C13868) * C2535 -
            (C13869 + C13870) * C31527 + (C14159 + C14160) * C2536 +
            (C14161 + C14162) * C31508) *
               C31397 * C13438 +
           ((C13868 + C13867) * C2534 -
            ((C13866 + C13865) * C31547 + (C13864 + C13863) * C2533) +
            (C13870 + C13869) * C31540 - (C14160 + C14159) * C2535 -
            (C14162 + C14161) * C31527 +
            (C13440 * C489 + C13436 * C503 + C13441 * C939 + C13437 * C948) *
                C2536 +
            (C13440 * C504 + C13436 * C519 + C13441 * C949 + C13437 * C954) *
                C31508) *
               C31397 * C13439) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C2641 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C2635 -
             (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
                C31397 * C13438 +
            ((C13476 + C13475) * C2641 + (C13478 + C13477) * C2635 -
             (C13480 + C13479) * C2642 - (C13482 + C13481) * C31165) *
                C31397 * C13439) *
               C3298 +
           (((C13863 + C13864) * C2642 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C2635 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C2641) +
             (C13865 + C13866) * C31165) *
                C31397 * C13438 +
            ((C13868 + C13867) * C2642 -
             ((C13866 + C13865) * C2635 + (C13864 + C13863) * C2641) +
             (C13870 + C13869) * C31165) *
                C31397 * C13439) *
               C31305) *
              C31541 +
          ((((C13669 + C13670) * C2642 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C2635 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C2641) +
             (C13671 + C13672) * C31165) *
                C31397 * C13438 +
            ((C13674 + C13673) * C2642 -
             ((C13672 + C13671) * C2635 + (C13670 + C13669) * C2641) +
             (C13676 + C13675) * C31165) *
                C31397 * C13439) *
               C3298 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C2641 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C2635 -
             (C14373 + C14374) * C2642 - (C14375 + C14376) * C31165) *
                C31397 * C13438 +
            ((C14374 + C14373) * C2641 + (C14376 + C14375) * C2635 -
             (C14378 + C14377) * C2642 - (C14380 + C14379) * C31165) *
                C31397 * C13439) *
               C31305) *
              C31529 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C2641 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C2635 -
             (C13677 + C13678) * C2642 - (C13679 + C13680) * C31165) *
                C31397 * C13438 +
            ((C13678 + C13677) * C2641 + (C13680 + C13679) * C2635 -
             (C13682 + C13681) * C2642 - (C13684 + C13683) * C31165) *
                C31397 * C13439) *
               C3298 +
           (((C15099 + C15100) * C2642 -
             ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
               C13436 * C1327) *
                  C2635 +
              (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
               C13436 * C1315) *
                  C2641) +
             (C15101 + C15102) * C31165) *
                C31397 * C13438 +
            ((C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
              C13437 * C1720) *
                 C2642 -
             ((C15102 + C15101) * C2635 + (C15100 + C15099) * C2641) +
             (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
              C13437 * C1724) *
                 C31165) *
                C31397 * C13439) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C665 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C659 -
            (C13475 + C13476) * C666 - (C13477 + C13478) * C660 +
            (C13479 + C13480) * C667 + (C13481 + C13482) * C661 -
            (C13483 + C13484) * C668 - (C13485 + C13486) * C31508) *
               C31397 * C13438 +
           ((C13476 + C13475) * C665 + (C13478 + C13477) * C659 -
            (C13480 + C13479) * C666 - (C13482 + C13481) * C660 +
            (C13484 + C13483) * C667 + (C13486 + C13485) * C661 -
            (C13488 + C13487) * C668 - (C13490 + C13489) * C31508) *
               C31397 * C13439) *
              C31218 * C31475 +
          (((C13669 + C13670) * C666 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C659 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C665) +
            (C13671 + C13672) * C660 - (C13673 + C13674) * C667 -
            (C13675 + C13676) * C661 + (C14017 + C14018) * C668 +
            (C14019 + C14020) * C31508) *
               C31397 * C13438 +
           ((C13674 + C13673) * C666 -
            ((C13672 + C13671) * C659 + (C13670 + C13669) * C665) +
            (C13676 + C13675) * C660 - (C14018 + C14017) * C667 -
            (C14020 + C14019) * C661 +
            (C13440 * C300 + C13436 * C314 + C13441 * C305 + C13437 * C324) *
                C668 +
            (C13440 * C315 + C13436 * C330 + C13441 * C325 + C13437 * C335) *
                C31508) *
               C31397 * C13439) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C30274 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31457 -
            (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
               C31397 * C13438 +
           ((C13476 + C13475) * C30274 + (C13478 + C13477) * C31457 -
            (C13480 + C13479) * C30255 - (C13482 + C13481) * C31165) *
               C31397 * C13439) *
              C31218 * C1431 +
          (((C13669 + C13670) * C30255 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31457 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C30274) +
            (C13671 + C13672) * C31165) *
               C31397 * C13438 +
           ((C13674 + C13673) * C30255 -
            ((C13672 + C13671) * C31457 + (C13670 + C13669) * C30274) +
            (C13676 + C13675) * C31165) *
               C31397 * C13439) *
              C31218 * C1432 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C30274 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31457 -
            (C13677 + C13678) * C30255 - (C13679 + C13680) * C31165) *
               C31397 * C13438 +
           ((C13678 + C13677) * C30274 + (C13680 + C13679) * C31457 -
            (C13682 + C13681) * C30255 - (C13684 + C13683) * C31165) *
               C31397 * C13439) *
              C31218 * C1433 +
          (((C14893 + C14894) * C30255 -
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C31457 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C30274) +
            (C14895 + C14896) * C31165) *
               C31397 * C13438 +
           ((C13440 * C1161 + C13436 * C1168 + C13441 * C1166 +
             C13437 * C1177) *
                C30255 -
            ((C14896 + C14895) * C31457 + (C14894 + C14893) * C30274) +
            (C13440 * C1167 + C13436 * C1179 + C13441 * C1178 +
             C13437 * C1184) *
                C31165) *
               C31397 * C13439) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C293 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C287 -
             (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
             (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
                C31397 * C13438 +
            ((C13476 + C13475) * C293 + (C13478 + C13477) * C287 -
             (C13480 + C13479) * C294 - (C13482 + C13481) * C288 +
             (C13484 + C13483) * C295 + (C13486 + C13485) * C31497) *
                C31397 * C13439) *
               C31476 +
           (((C13863 + C13864) * C294 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C287 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C293) +
             (C13865 + C13866) * C288 - (C13867 + C13868) * C295 -
             (C13869 + C13870) * C31497) *
                C31397 * C13438 +
            ((C13868 + C13867) * C294 -
             ((C13866 + C13865) * C287 + (C13864 + C13863) * C293) +
             (C13870 + C13869) * C288 - (C14160 + C14159) * C295 -
             (C14162 + C14161) * C31497) *
                C31397 * C13439) *
               C31305) *
              C31475 +
          ((((C13669 + C13670) * C294 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C287 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C293) +
             (C13671 + C13672) * C288 - (C13673 + C13674) * C295 -
             (C13675 + C13676) * C31497) *
                C31397 * C13438 +
            ((C13674 + C13673) * C294 -
             ((C13672 + C13671) * C287 + (C13670 + C13669) * C293) +
             (C13676 + C13675) * C288 - (C14018 + C14017) * C295 -
             (C14020 + C14019) * C31497) *
                C31397 * C13439) *
               C31476 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C293 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C287 -
             (C14373 + C14374) * C294 - (C14375 + C14376) * C288 +
             (C14377 + C14378) * C295 + (C14379 + C14380) * C31497) *
                C31397 * C13438 +
            ((C14374 + C14373) * C293 + (C14376 + C14375) * C287 -
             (C14378 + C14377) * C294 - (C14380 + C14379) * C288 +
             (C13440 * C938 + C13436 * C946 + C13441 * C1599 + C13437 * C1600) *
                 C295 +
             (C13440 * C947 + C13436 * C953 + C13441 * C1601 + C13437 * C1602) *
                 C31497) *
                C31397 * C13439) *
               C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
                C13439) *
               C31476 -
           (((C13866 + C13865) * C31155 + (C13864 + C13863) * C1160) * C31397 *
                C13439 +
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31155 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1160) *
                C31397 * C13438) *
               C31305) *
              C1431 +
          ((((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1160 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31155) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1160 + (C14376 + C14375) * C31155) * C31397 *
                C13439) *
               C31305 -
           (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
                C13439 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C31397 * C13438) *
               C31476) *
              C1432 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C31397 * C13438 +
            ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
                C13439) *
               C31476 -
           (((C15102 + C15101) * C31155 + (C15100 + C15099) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
              C13436 * C1327) *
                 C31155 +
             (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
              C13436 * C1315) *
                 C1160) *
                C31397 * C13438) *
               C31305) *
              C1433 +
          ((((C13440 * C1713 + C13436 * C1716 + C13441 * C5619 +
              C13437 * C5624) *
                 C1160 +
             (C13440 * C1717 + C13436 * C1722 + C13441 * C5623 +
              C13437 * C5628) *
                 C31155) *
                C31397 * C13438 +
            ((C13440 * C1714 + C13436 * C1718 + C13441 * C5878 +
              C13437 * C5879) *
                 C1160 +
             (C13440 * C1719 + C13436 * C1723 + C13441 * C5880 +
              C13437 * C5881) *
                 C31155) *
                C31397 * C13439) *
               C31305 -
           (((C14896 + C14895) * C31155 + (C14894 + C14893) * C1160) * C31397 *
                C13439 +
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C31155 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C1160) *
                C31397 * C13438) *
               C31476) *
              C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C293 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C287 -
            (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
            (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
               C31397 * C13438 +
           ((C13476 + C13475) * C293 + (C13478 + C13477) * C287 -
            (C13480 + C13479) * C294 - (C13482 + C13481) * C288 +
            (C13484 + C13483) * C295 + (C13486 + C13485) * C31497) *
               C31397 * C13439) *
              C31218 * C31541 +
          (((C13669 + C13670) * C294 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C287 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C293) +
            (C13671 + C13672) * C288 - (C13673 + C13674) * C295 -
            (C13675 + C13676) * C31497) *
               C31397 * C13438 +
           ((C13674 + C13673) * C294 -
            ((C13672 + C13671) * C287 + (C13670 + C13669) * C293) +
            (C13676 + C13675) * C288 -
            (C13441 * C304 + C13437 * C322 + C13440 * C299 + C13436 * C312) *
                C295 -
            (C13441 * C323 + C13437 * C334 + C13440 * C313 + C13436 * C329) *
                C31497) *
               C31397 * C13439) *
              C31218 * C31529 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C293 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C287 -
            (C13677 + C13678) * C294 - (C13679 + C13680) * C288 +
            (C13681 + C13682) * C295 + (C13683 + C13684) * C31497) *
               C31397 * C13438 +
           ((C13678 + C13677) * C293 + (C13680 + C13679) * C287 -
            (C13682 + C13681) * C294 - (C13684 + C13683) * C288 +
            (C13440 * C304 + C13436 * C322 + C13441 * C1437 + C13437 * C1438) *
                C295 +
            (C13440 * C323 + C13436 * C334 + C13441 * C1439 + C13437 * C1440) *
                C31497) *
               C31397 * C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
               C114 +
           (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
               C102 -
           (C13475 + C13476) * C115 - (C13477 + C13478) * C103 +
           (C13479 + C13480) * C116 + (C13481 + C13482) * C104 -
           (C13483 + C13484) * C117 - (C13485 + C13486) * C105 +
           (C13487 + C13488) * C118 + (C13489 + C13490) * C106) *
              C31397 * C13438 +
          ((C13476 + C13475) * C114 + (C13478 + C13477) * C102 -
           (C13480 + C13479) * C115 - (C13482 + C13481) * C103 +
           (C13484 + C13483) * C116 + (C13486 + C13485) * C104 -
           (C13488 + C13487) * C117 - (C13490 + C13489) * C105 +
           (C13440 * C124 + C13436 * C136 + C13441 * C669 + C13437 * C670) *
               C118 +
           (C13440 * C137 + C13436 * C145 + C13441 * C671 + C13437 * C672) *
               C106) *
              C31397 * C13439) *
         C31218 * C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C293 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C287 -
            (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
            (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
               C31397 * C13438 +
           ((C13476 + C13475) * C293 + (C13478 + C13477) * C287 -
            (C13480 + C13479) * C294 - (C13482 + C13481) * C288 +
            (C13484 + C13483) * C295 + (C13486 + C13485) * C31497) *
               C31397 * C13439) *
              C31542 +
          (((C13863 + C13864) * C294 -
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C287 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C293) +
            (C13865 + C13866) * C288 - (C13867 + C13868) * C295 -
            (C13869 + C13870) * C31497) *
               C31397 * C13438 +
           ((C13868 + C13867) * C294 -
            ((C13866 + C13865) * C287 + (C13864 + C13863) * C293) +
            (C13870 + C13869) * C288 -
            (C13441 * C938 + C13437 * C946 + C13440 * C488 + C13436 * C501) *
                C295 -
            (C13441 * C947 + C13437 * C953 + C13440 * C502 + C13436 * C518) *
                C31497) *
               C31397 * C13439) *
              C31531 +
          (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                C293 +
            (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                C287 -
            (C13871 + C13872) * C294 - (C13873 + C13874) * C288 +
            (C13875 + C13876) * C295 + (C13877 + C13878) * C31497) *
               C31397 * C13438 +
           ((C13872 + C13871) * C293 + (C13874 + C13873) * C287 -
            (C13876 + C13875) * C294 - (C13878 + C13877) * C288 +
            (C13440 * C493 + C13436 * C511 + C13441 * C2185 + C13437 * C2186) *
                C295 +
            (C13440 * C512 + C13436 * C523 + C13441 * C2187 + C13437 * C2188) *
                C31497) *
               C31397 * C13439) *
              C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1089 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31538 -
            (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
            (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
               C31397 * C13438 +
           ((C13476 + C13475) * C1089 + (C13478 + C13477) * C31538 -
            (C13480 + C13479) * C1090 - (C13482 + C13481) * C31525 +
            (C13484 + C13483) * C1091 + (C13486 + C13485) * C31497) *
               C31397 * C13439) *
              C31218 * C1086 +
          (((C13669 + C13670) * C1090 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31538 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1089) +
            (C13671 + C13672) * C31525 - (C13673 + C13674) * C1091 -
            (C13675 + C13676) * C31497) *
               C31397 * C13438 +
           ((C13674 + C13673) * C1090 -
            ((C13672 + C13671) * C31538 + (C13670 + C13669) * C1089) +
            (C13676 + C13675) * C31525 - (C14018 + C14017) * C1091 -
            (C14020 + C14019) * C31497) *
               C31397 * C13439) *
              C31218 * C1087 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1089 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31538 -
            (C13677 + C13678) * C1090 - (C13679 + C13680) * C31525 +
            (C13681 + C13682) * C1091 + (C13683 + C13684) * C31497) *
               C31397 * C13438 +
           ((C13678 + C13677) * C1089 + (C13680 + C13679) * C31538 -
            (C13682 + C13681) * C1090 - (C13684 + C13683) * C31525 +
            (C13440 * C304 + C13436 * C322 + C13441 * C1437 + C13437 * C1438) *
                C1091 +
            (C13440 * C323 + C13436 * C334 + C13441 * C1439 + C13437 * C1440) *
                C31497) *
               C31397 * C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1160 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31155) *
               C31397 * C13438 +
           ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
               C13439) *
              C31218 * C1155 -
          (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
               C13439 +
           ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                C31155 +
            (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                C1160) *
               C31397 * C13438) *
              C31218 * C1156 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1160 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31155) *
               C31397 * C13438 +
           ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
               C13439) *
              C31218 * C1157 -
          (((C13441 * C1176 + C13437 * C1183 + C13440 * C1169 +
             C13436 * C1180) *
                C31155 +
            (C13441 * C1165 + C13437 * C1175 + C13440 * C1162 +
             C13436 * C1170) *
                C1160) *
               C31397 * C13439 +
           ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
             C13436 * C1181) *
                C31155 +
            (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
             C13436 * C1172) *
                C1160) *
               C31397 * C13438) *
              C31218 * C1158 +
          (((C13440 * C1164 + C13436 * C1173 + C13441 * C5500 +
             C13437 * C5503) *
                C1160 +
            (C13440 * C1174 + C13436 * C1182 + C13441 * C5502 +
             C13437 * C5506) *
                C31155) *
               C31397 * C13438 +
           ((C13440 * C1165 + C13436 * C1175 + C13441 * C5728 +
             C13437 * C5729) *
                C1160 +
            (C13440 * C1176 + C13436 * C1183 + C13441 * C5730 +
             C13437 * C5731) *
                C31155) *
               C31397 * C13439) *
              C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C31397 * C13438 +
            ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
                C13439) *
               C31542 -
           (((C13866 + C13865) * C31155 + (C13864 + C13863) * C1160) * C31397 *
                C13439 +
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C31155 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C1160) *
                C31397 * C13438) *
               C31531 +
           (((C13440 * C490 + C13436 * C505 + C13441 * C1297 + C13437 * C1309) *
                 C1160 +
             (C13440 * C506 + C13436 * C520 + C13441 * C1308 + C13437 * C1324) *
                 C31155) *
                C31397 * C13438 +
            ((C13872 + C13871) * C1160 + (C13874 + C13873) * C31155) * C31397 *
                C13439) *
               C31507) *
              C1086 +
          ((((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C1160 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31155) *
                C31397 * C13438 +
            ((C14374 + C14373) * C1160 + (C14376 + C14375) * C31155) * C31397 *
                C13439) *
               C31531 -
           (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
                C13439 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C31397 * C13438) *
               C31542 -
           (((C13441 * C1319 + C13437 * C1329 + C13440 * C1306 +
              C13436 * C1323) *
                 C31155 +
             (C13441 * C1302 + C13437 * C1318 + C13440 * C1296 +
              C13436 * C1307) *
                 C1160) *
                C31397 * C13439 +
            ((C13441 * C1317 + C13437 * C1328 + C13440 * C1308 +
              C13436 * C1324) *
                 C31155 +
             (C13441 * C1301 + C13437 * C1316 + C13440 * C1297 +
              C13436 * C1309) *
                 C1160) *
                C31397 * C13438) *
               C31507) *
              C1087 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C31397 * C13438 +
            ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
                C13439) *
               C31542 -
           (((C13441 * C1719 + C13437 * C1723 + C13440 * C1312 +
              C13436 * C1326) *
                 C31155 +
             (C13441 * C1714 + C13437 * C1718 + C13440 * C1299 +
              C13436 * C1313) *
                 C1160) *
                C31397 * C13439 +
            ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
              C13436 * C1327) *
                 C31155 +
             (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
              C13436 * C1315) *
                 C1160) *
                C31397 * C13438) *
               C31531 +
           (((C13440 * C1301 + C13436 * C1316 + C13441 * C5618 +
              C13437 * C5622) *
                 C1160 +
             (C13440 * C1317 + C13436 * C1328 + C13441 * C5621 +
              C13437 * C5627) *
                 C31155) *
                C31397 * C13438 +
            ((C13440 * C1302 + C13436 * C1318 + C13441 * C6424 +
              C13437 * C6425) *
                 C1160 +
             (C13440 * C1319 + C13436 * C1329 + C13441 * C6426 +
              C13437 * C6427) *
                 C31155) *
                C31397 * C13439) *
               C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C665 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C659 -
            (C13475 + C13476) * C666 - (C13477 + C13478) * C660 +
            (C13479 + C13480) * C667 + (C13481 + C13482) * C661 -
            (C13483 + C13484) * C668 - (C13485 + C13486) * C31508) *
               C31397 * C13438 +
           ((C13476 + C13475) * C665 + (C13478 + C13477) * C659 -
            (C13480 + C13479) * C666 - (C13482 + C13481) * C660 +
            (C13484 + C13483) * C667 + (C13486 + C13485) * C661 -
            (C13488 + C13487) * C668 - (C13490 + C13489) * C31508) *
               C31397 * C13439) *
              C31476 +
          (((C13863 + C13864) * C666 -
            ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                 C659 +
             (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                 C665) +
            (C13865 + C13866) * C660 - (C13867 + C13868) * C667 -
            (C13869 + C13870) * C661 + (C14159 + C14160) * C668 +
            (C14161 + C14162) * C31508) *
               C31397 * C13438 +
           ((C13868 + C13867) * C666 -
            ((C13866 + C13865) * C659 + (C13864 + C13863) * C665) +
            (C13870 + C13869) * C660 - (C14160 + C14159) * C667 -
            (C14162 + C14161) * C661 +
            (C13440 * C489 + C13436 * C503 + C13441 * C939 + C13437 * C948) *
                C668 +
            (C13440 * C504 + C13436 * C519 + C13441 * C949 + C13437 * C954) *
                C31508) *
               C31397 * C13439) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30274 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31457 -
             (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
                C31397 * C13438 +
            ((C13476 + C13475) * C30274 + (C13478 + C13477) * C31457 -
             (C13480 + C13479) * C30255 - (C13482 + C13481) * C31165) *
                C31397 * C13439) *
               C31476 +
           (((C13863 + C13864) * C30255 -
             ((C13441 * C941 + C13437 * C950 + C13440 * C496 + C13436 * C515) *
                  C31457 +
              (C13441 * C935 + C13437 * C940 + C13440 * C486 + C13436 * C497) *
                  C30274) +
             (C13865 + C13866) * C31165) *
                C31397 * C13438 +
            ((C13868 + C13867) * C30255 -
             ((C13866 + C13865) * C31457 + (C13864 + C13863) * C30274) +
             (C13870 + C13869) * C31165) *
                C31397 * C13439) *
               C31305) *
              C1086 +
          ((((C13669 + C13670) * C30255 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31457 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30274) +
             (C13671 + C13672) * C31165) *
                C31397 * C13438 +
            ((C13674 + C13673) * C30255 -
             ((C13672 + C13671) * C31457 + (C13670 + C13669) * C30274) +
             (C13676 + C13675) * C31165) *
                C31397 * C13439) *
               C31476 +
           (((C13440 * C935 + C13436 * C940 + C13441 * C1300 + C13437 * C1315) *
                 C30274 +
             (C13440 * C941 + C13436 * C950 + C13441 * C1314 + C13437 * C1327) *
                 C31457 -
             (C14373 + C14374) * C30255 - (C14375 + C14376) * C31165) *
                C31397 * C13438 +
            ((C14374 + C14373) * C30274 + (C14376 + C14375) * C31457 -
             (C14378 + C14377) * C30255 - (C14380 + C14379) * C31165) *
                C31397 * C13439) *
               C31305) *
              C1087 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C30274 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31457 -
             (C13677 + C13678) * C30255 - (C13679 + C13680) * C31165) *
                C31397 * C13438 +
            ((C13678 + C13677) * C30274 + (C13680 + C13679) * C31457 -
             (C13682 + C13681) * C30255 - (C13684 + C13683) * C31165) *
                C31397 * C13439) *
               C31476 +
           (((C15099 + C15100) * C30255 -
             ((C13441 * C1717 + C13437 * C1722 + C13440 * C1314 +
               C13436 * C1327) *
                  C31457 +
              (C13441 * C1713 + C13437 * C1716 + C13440 * C1300 +
               C13436 * C1315) *
                  C30274) +
             (C15101 + C15102) * C31165) *
                C31397 * C13438 +
            ((C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
              C13437 * C1720) *
                 C30255 -
             ((C15102 + C15101) * C31457 + (C15100 + C15099) * C30274) +
             (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
              C13437 * C1724) *
                 C31165) *
                C31397 * C13439) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
               C114 +
           (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
               C102 -
           (C13475 + C13476) * C115 - (C13477 + C13478) * C103 +
           (C13479 + C13480) * C116 + (C13481 + C13482) * C104 -
           (C13483 + C13484) * C117 - (C13485 + C13486) * C105 +
           (C13487 + C13488) * C118 + (C13489 + C13490) * C106) *
              C31397 * C13438 +
          ((C13476 + C13475) * C114 + (C13478 + C13477) * C102 -
           (C13480 + C13479) * C115 - (C13482 + C13481) * C103 +
           (C13484 + C13483) * C116 + (C13486 + C13485) * C104 -
           (C13488 + C13487) * C117 - (C13490 + C13489) * C105 +
           (C13440 * C124 + C13436 * C136 + C13441 * C669 + C13437 * C670) *
               C118 +
           (C13440 * C137 + C13436 * C145 + C13441 * C671 + C13437 * C672) *
               C106) *
              C31397 * C13439) *
         C31218 * C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C293 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C287 -
            (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
            (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
               C31397 * C13438 +
           ((C13476 + C13475) * C293 + (C13478 + C13477) * C287 -
            (C13480 + C13479) * C294 - (C13482 + C13481) * C288 +
            (C13484 + C13483) * C295 + (C13486 + C13485) * C31497) *
               C31397 * C13439) *
              C31218 * C31541 +
          (((C13669 + C13670) * C294 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C287 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C293) +
            (C13671 + C13672) * C288 - (C13673 + C13674) * C295 -
            (C13675 + C13676) * C31497) *
               C31397 * C13438 +
           ((C13674 + C13673) * C294 -
            ((C13672 + C13671) * C287 + (C13670 + C13669) * C293) +
            (C13676 + C13675) * C288 -
            (C13441 * C304 + C13437 * C322 + C13440 * C299 + C13436 * C312) *
                C295 -
            (C13441 * C323 + C13437 * C334 + C13440 * C313 + C13436 * C329) *
                C31497) *
               C31397 * C13439) *
              C31218 * C31529 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C293 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C287 -
            (C13677 + C13678) * C294 - (C13679 + C13680) * C288 +
            (C13681 + C13682) * C295 + (C13683 + C13684) * C31497) *
               C31397 * C13438 +
           ((C13678 + C13677) * C293 + (C13680 + C13679) * C287 -
            (C13682 + C13681) * C294 - (C13684 + C13683) * C288 +
            (C13440 * C304 + C13436 * C322 + C13441 * C1437 + C13437 * C1438) *
                C295 +
            (C13440 * C323 + C13436 * C334 + C13441 * C1439 + C13437 * C1440) *
                C31497) *
               C31397 * C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1089 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31538 -
            (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
            (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
               C31397 * C13438 +
           ((C13476 + C13475) * C1089 + (C13478 + C13477) * C31538 -
            (C13480 + C13479) * C1090 - (C13482 + C13481) * C31525 +
            (C13484 + C13483) * C1091 + (C13486 + C13485) * C31497) *
               C31397 * C13439) *
              C31218 * C1086 +
          (((C13669 + C13670) * C1090 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31538 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1089) +
            (C13671 + C13672) * C31525 - (C13673 + C13674) * C1091 -
            (C13675 + C13676) * C31497) *
               C31397 * C13438 +
           ((C13674 + C13673) * C1090 -
            ((C13672 + C13671) * C31538 + (C13670 + C13669) * C1089) +
            (C13676 + C13675) * C31525 - (C14018 + C14017) * C1091 -
            (C14020 + C14019) * C31497) *
               C31397 * C13439) *
              C31218 * C1087 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1089 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31538 -
            (C13677 + C13678) * C1090 - (C13679 + C13680) * C31525 +
            (C13681 + C13682) * C1091 + (C13683 + C13684) * C31497) *
               C31397 * C13438 +
           ((C13678 + C13677) * C1089 + (C13680 + C13679) * C31538 -
            (C13682 + C13681) * C1090 - (C13684 + C13683) * C31525 +
            (C13440 * C304 + C13436 * C322 + C13441 * C1437 + C13437 * C1438) *
                C1091 +
            (C13440 * C323 + C13436 * C334 + C13441 * C1439 + C13437 * C1440) *
                C31497) *
               C31397 * C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1160 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31155) *
               C31397 * C13438 +
           ((C13476 + C13475) * C1160 + (C13478 + C13477) * C31155) * C31397 *
               C13439) *
              C31218 * C1155 -
          (((C13672 + C13671) * C31155 + (C13670 + C13669) * C1160) * C31397 *
               C13439 +
           ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                C31155 +
            (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                C1160) *
               C31397 * C13438) *
              C31218 * C1156 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1160 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31155) *
               C31397 * C13438 +
           ((C13678 + C13677) * C1160 + (C13680 + C13679) * C31155) * C31397 *
               C13439) *
              C31218 * C1157 -
          (((C13441 * C1176 + C13437 * C1183 + C13440 * C1169 +
             C13436 * C1180) *
                C31155 +
            (C13441 * C1165 + C13437 * C1175 + C13440 * C1162 +
             C13436 * C1170) *
                C1160) *
               C31397 * C13439 +
           ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
             C13436 * C1181) *
                C31155 +
            (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
             C13436 * C1172) *
                C1160) *
               C31397 * C13438) *
              C31218 * C1158 +
          (((C13440 * C1164 + C13436 * C1173 + C13441 * C5500 +
             C13437 * C5503) *
                C1160 +
            (C13440 * C1174 + C13436 * C1182 + C13441 * C5502 +
             C13437 * C5506) *
                C31155) *
               C31397 * C13438 +
           ((C13440 * C1165 + C13436 * C1175 + C13441 * C5728 +
             C13437 * C5729) *
                C1160 +
            (C13440 * C1176 + C13436 * C1183 + C13441 * C5730 +
             C13437 * C5731) *
                C31155) *
               C31397 * C13439) *
              C31218 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C30284 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31160 -
            (C13475 + C13476) * C30280 - (C13477 + C13478) * C31168 +
            (C13479 + C13480) * C30290 + (C13481 + C13482) * C2901) *
               C19130 +
           ((C25033 + C25034) * C30284 + (C25035 + C25036) * C31160 -
            (C13864 + C13863) * C30280 - (C13866 + C13865) * C31168 +
            (C13868 + C13867) * C30290 + (C13870 + C13869) * C2901) *
               C19131) *
              C31184 * C31218 * C31261 +
          (((C13669 + C13670) * C30280 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31160 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C30284) +
            (C13671 + C13672) * C31168 - (C13673 + C13674) * C30290 -
            (C13675 + C13676) * C2901) *
               C19130 +
           ((C14374 + C14373) * C30280 -
            ((C25503 + C25504) * C31160 + (C25505 + C25506) * C30284) +
            (C14376 + C14375) * C31168 - (C14378 + C14377) * C30290 -
            (C14380 + C14379) * C2901) *
               C19131) *
              C31184 * C31218 * C31268 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C30284 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31160 -
            (C13677 + C13678) * C30280 - (C13679 + C13680) * C31168 +
            (C13681 + C13682) * C30290 + (C13683 + C13684) * C2901) *
               C19130 +
           ((C25909 + C25910) * C30284 + (C25911 + C25912) * C31160 -
            (C15100 + C15099) * C30280 - (C15102 + C15101) * C31168 +
            (C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
             C13437 * C1720) *
                C30290 +
            (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
             C13437 * C1724) *
                C2901) *
               C19131) *
              C31184 * C31218 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C2641 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C2635 -
             (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
                C19130 +
            ((C25033 + C25034) * C2641 + (C25035 + C25036) * C2635 -
             (C13864 + C13863) * C2642 - (C13866 + C13865) * C31165) *
                C19131) *
               C31184 * C31476 +
           (((C13863 + C13864) * C2642 -
             ((C25036 + C25035) * C2635 + (C25034 + C25033) * C2641) +
             (C13865 + C13866) * C31165) *
                C19130 +
            ((C13872 + C13871) * C2642 -
             ((C25037 + C25038) * C2635 + (C25039 + C25040) * C2641) +
             (C13874 + C13873) * C31165) *
                C19131) *
               C31184 * C31305) *
              C31261 +
          ((((C13669 + C13670) * C2642 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C2635 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C2641) +
             (C13671 + C13672) * C31165) *
                C19130 +
            ((C14374 + C14373) * C2642 -
             ((C25503 + C25504) * C2635 + (C25505 + C25506) * C2641) +
             (C14376 + C14375) * C31165) *
                C19131) *
               C31184 * C31476 +
           (((C25506 + C25505) * C2641 + (C25504 + C25503) * C2635 -
             (C14373 + C14374) * C2642 - (C14375 + C14376) * C31165) *
                C19130 +
            ((C25905 + C25906) * C2641 + (C25907 + C25908) * C2635 -
             (C15810 + C15809) * C2642 - (C15812 + C15811) * C31165) *
                C19131) *
               C31184 * C31305) *
              C31268 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C2641 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C2635 -
             (C13677 + C13678) * C2642 - (C13679 + C13680) * C31165) *
                C19130 +
            ((C25909 + C25910) * C2641 + (C25911 + C25912) * C2635 -
             (C15100 + C15099) * C2642 - (C15102 + C15101) * C31165) *
                C19131) *
               C31184 * C31476 +
           (((C15099 + C15100) * C2642 -
             ((C25912 + C25911) * C2635 + (C25910 + C25909) * C2641) +
             (C15101 + C15102) * C31165) *
                C19130 +
            ((C13440 * C1302 + C13436 * C1318 + C13441 * C6424 +
              C13437 * C6425) *
                 C2642 -
             ((C25913 + C25914) * C2635 + (C25915 + C25916) * C2641) +
             (C13440 * C1319 + C13436 * C1329 + C13441 * C6426 +
              C13437 * C6427) *
                 C31165) *
                C19131) *
               C31184 * C31305) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2641 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C2635 -
            (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
               C19130 +
           ((C25033 + C25034) * C2641 + (C25035 + C25036) * C2635 -
            (C13864 + C13863) * C2642 - (C13866 + C13865) * C31165) *
               C19131) *
              C31184 * C31218 * C31548 +
          (((C13669 + C13670) * C2642 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C2635 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C2641) +
            (C13671 + C13672) * C31165) *
               C19130 +
           ((C14374 + C14373) * C2642 -
            ((C25503 + C25504) * C2635 + (C25505 + C25506) * C2641) +
            (C14376 + C14375) * C31165) *
               C19131) *
              C31184 * C31218 * C31544 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C2641 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C2635 -
            (C13677 + C13678) * C2642 - (C13679 + C13680) * C31165) *
               C19130 +
           ((C25909 + C25910) * C2641 + (C25911 + C25912) * C2635 -
            (C15100 + C15099) * C2642 - (C15102 + C15101) * C31165) *
               C19131) *
              C31184 * C31218 * C31534 +
          (((C14893 + C14894) * C2642 -
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C2635 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C2641) +
            (C14895 + C14896) * C31165) *
               C19130 +
           ((C13440 * C1714 + C13436 * C1718 + C13441 * C5878 +
             C13437 * C5879) *
                C2642 -
            ((C26382 + C26381) * C2635 + (C26380 + C26379) * C2641) +
            (C13440 * C1719 + C13436 * C1723 + C13441 * C5880 +
             C13437 * C5881) *
                C31165) *
               C19131) *
              C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2533 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31547 -
            (C13475 + C13476) * C2534 - (C13477 + C13478) * C31540 +
            (C13479 + C13480) * C2535 + (C13481 + C13482) * C31527 -
            (C13483 + C13484) * C2536 - (C13485 + C13486) * C31508) *
               C19130 +
           ((C25033 + C25034) * C2533 + (C25035 + C25036) * C31547 -
            (C13864 + C13863) * C2534 - (C13866 + C13865) * C31540 +
            (C13868 + C13867) * C2535 + (C13870 + C13869) * C31527 -
            (C14160 + C14159) * C2536 - (C14162 + C14161) * C31508) *
               C19131) *
              C31184 * C31218 * C2531 +
          (((C13669 + C13670) * C2534 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31547 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C2533) +
            (C13671 + C13672) * C31540 - (C13673 + C13674) * C2535 -
            (C13675 + C13676) * C31527 + (C14017 + C14018) * C2536 +
            (C14019 + C14020) * C31508) *
               C19130 +
           ((C14374 + C14373) * C2534 -
            ((C25503 + C25504) * C31547 + (C25505 + C25506) * C2533) +
            (C14376 + C14375) * C31540 - (C14378 + C14377) * C2535 -
            (C14380 + C14379) * C31527 +
            (C13440 * C938 + C13436 * C946 + C13441 * C1599 + C13437 * C1600) *
                C2536 +
            (C13440 * C947 + C13436 * C953 + C13441 * C1601 + C13437 * C1602) *
                C31508) *
               C19131) *
              C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C2641 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C2635 -
             (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
                C19130 +
            ((C25033 + C25034) * C2641 + (C25035 + C25036) * C2635 -
             (C13864 + C13863) * C2642 - (C13866 + C13865) * C31165) *
                C19131) *
               C31184 * C31542 +
           (((C13863 + C13864) * C2642 -
             ((C25036 + C25035) * C2635 + (C25034 + C25033) * C2641) +
             (C13865 + C13866) * C31165) *
                C19130 +
            ((C13872 + C13871) * C2642 -
             ((C25037 + C25038) * C2635 + (C25039 + C25040) * C2641) +
             (C13874 + C13873) * C31165) *
                C19131) *
               C31184 * C31531 +
           (((C25040 + C25039) * C2641 + (C25038 + C25037) * C2635 -
             (C13871 + C13872) * C2642 - (C13873 + C13874) * C31165) *
                C19130 +
            ((C26773 + C26774) * C2641 + (C26775 + C26776) * C2635 -
             (C15952 + C15951) * C2642 - (C15954 + C15953) * C31165) *
                C19131) *
               C31184 * C31507) *
              C2531 +
          ((((C13669 + C13670) * C2642 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C2635 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C2641) +
             (C13671 + C13672) * C31165) *
                C19130 +
            ((C14374 + C14373) * C2642 -
             ((C25503 + C25504) * C2635 + (C25505 + C25506) * C2641) +
             (C14376 + C14375) * C31165) *
                C19131) *
               C31184 * C31542 +
           (((C25506 + C25505) * C2641 + (C25504 + C25503) * C2635 -
             (C14373 + C14374) * C2642 - (C14375 + C14376) * C31165) *
                C19130 +
            ((C25905 + C25906) * C2641 + (C25907 + C25908) * C2635 -
             (C15810 + C15809) * C2642 - (C15812 + C15811) * C31165) *
                C19131) *
               C31184 * C31531 +
           (((C15809 + C15810) * C2642 -
             ((C25908 + C25907) * C2635 + (C25906 + C25905) * C2641) +
             (C15811 + C15812) * C31165) *
                C19130 +
            ((C13440 * C2418 + C13436 * C2422 + C13441 * C6526 +
              C13437 * C6527) *
                 C2642 -
             ((C27243 + C27244) * C2635 + (C27245 + C27246) * C2641) +
             (C13440 * C2423 + C13436 * C2427 + C13441 * C6528 +
              C13437 * C6529) *
                 C31165) *
                C19131) *
               C31184 * C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30284 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31160 -
             (C13475 + C13476) * C30280 - (C13477 + C13478) * C31168 +
             (C13479 + C13480) * C30290 + (C13481 + C13482) * C2901) *
                C19130 +
            ((C25033 + C25034) * C30284 + (C25035 + C25036) * C31160 -
             (C13864 + C13863) * C30280 - (C13866 + C13865) * C31168 +
             (C13868 + C13867) * C30290 + (C13870 + C13869) * C2901) *
                C19131) *
               C31184 * C31476 +
           (((C13863 + C13864) * C30280 -
             ((C25036 + C25035) * C31160 + (C25034 + C25033) * C30284) +
             (C13865 + C13866) * C31168 - (C13867 + C13868) * C30290 -
             (C13869 + C13870) * C2901) *
                C19130 +
            ((C13872 + C13871) * C30280 -
             ((C25037 + C25038) * C31160 + (C25039 + C25040) * C30284) +
             (C13874 + C13873) * C31168 - (C13876 + C13875) * C30290 -
             (C13878 + C13877) * C2901) *
                C19131) *
               C31184 * C31305) *
              C2531 +
          ((((C13669 + C13670) * C30280 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31160 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30284) +
             (C13671 + C13672) * C31168 - (C13673 + C13674) * C30290 -
             (C13675 + C13676) * C2901) *
                C19130 +
            ((C14374 + C14373) * C30280 -
             ((C25503 + C25504) * C31160 + (C25505 + C25506) * C30284) +
             (C14376 + C14375) * C31168 - (C14378 + C14377) * C30290 -
             (C14380 + C14379) * C2901) *
                C19131) *
               C31184 * C31476 +
           (((C25506 + C25505) * C30284 + (C25504 + C25503) * C31160 -
             (C14373 + C14374) * C30280 - (C14375 + C14376) * C31168 +
             (C14377 + C14378) * C30290 + (C14379 + C14380) * C2901) *
                C19130 +
            ((C25905 + C25906) * C30284 + (C25907 + C25908) * C31160 -
             (C15810 + C15809) * C30280 - (C15812 + C15811) * C31168 +
             (C13440 * C1295 + C13436 * C1305 + C13441 * C1303 +
              C13437 * C1320) *
                 C30290 +
             (C13440 * C1304 + C13436 * C1322 + C13441 * C1321 +
              C13437 * C1330) *
                 C2901) *
                C19131) *
               C31184 * C31305) *
              C31265)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2533 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31547 -
            (C13475 + C13476) * C2534 - (C13477 + C13478) * C31540 +
            (C13479 + C13480) * C2535 + (C13481 + C13482) * C31527 -
            (C13483 + C13484) * C2536 - (C13485 + C13486) * C31508) *
               C19130 +
           ((C25033 + C25034) * C2533 + (C25035 + C25036) * C31547 -
            (C13864 + C13863) * C2534 - (C13866 + C13865) * C31540 +
            (C13868 + C13867) * C2535 + (C13870 + C13869) * C31527 -
            (C14160 + C14159) * C2536 - (C14162 + C14161) * C31508) *
               C19131) *
              C31184 * C31218 * C2531 +
          (((C13669 + C13670) * C2534 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31547 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C2533) +
            (C13671 + C13672) * C31540 - (C13673 + C13674) * C2535 -
            (C13675 + C13676) * C31527 + (C14017 + C14018) * C2536 +
            (C14019 + C14020) * C31508) *
               C19130 +
           ((C14374 + C14373) * C2534 -
            ((C25503 + C25504) * C31547 + (C25505 + C25506) * C2533) +
            (C14376 + C14375) * C31540 - (C14378 + C14377) * C2535 -
            (C14380 + C14379) * C31527 +
            (C13440 * C938 + C13436 * C946 + C13441 * C1599 + C13437 * C1600) *
                C2536 +
            (C13440 * C947 + C13436 * C953 + C13441 * C1601 + C13437 * C1602) *
                C31508) *
               C19131) *
              C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2641 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C2635 -
            (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
               C19130 +
           ((C25033 + C25034) * C2641 + (C25035 + C25036) * C2635 -
            (C13864 + C13863) * C2642 - (C13866 + C13865) * C31165) *
               C19131) *
              C31184 * C31218 * C31548 +
          (((C13669 + C13670) * C2642 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C2635 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C2641) +
            (C13671 + C13672) * C31165) *
               C19130 +
           ((C14374 + C14373) * C2642 -
            ((C25503 + C25504) * C2635 + (C25505 + C25506) * C2641) +
            (C14376 + C14375) * C31165) *
               C19131) *
              C31184 * C31218 * C31544 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C2641 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C2635 -
            (C13677 + C13678) * C2642 - (C13679 + C13680) * C31165) *
               C19130 +
           ((C25909 + C25910) * C2641 + (C25911 + C25912) * C2635 -
            (C15100 + C15099) * C2642 - (C15102 + C15101) * C31165) *
               C19131) *
              C31184 * C31218 * C31534 +
          (((C14893 + C14894) * C2642 -
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C2635 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C2641) +
            (C14895 + C14896) * C31165) *
               C19130 +
           ((C13440 * C1714 + C13436 * C1718 + C13441 * C5878 +
             C13437 * C5879) *
                C2642 -
            ((C26382 + C26381) * C2635 + (C26380 + C26379) * C2641) +
            (C13440 * C1719 + C13436 * C1723 + C13441 * C5880 +
             C13437 * C5881) *
                C31165) *
               C19131) *
              C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30274 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31457 -
             (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
                C19130 +
            ((C25033 + C25034) * C30274 + (C25035 + C25036) * C31457 -
             (C13864 + C13863) * C30255 - (C13866 + C13865) * C31165) *
                C19131) *
               C31184 * C3298 +
           (((C13863 + C13864) * C30255 -
             ((C25036 + C25035) * C31457 + (C25034 + C25033) * C30274) +
             (C13865 + C13866) * C31165) *
                C19130 +
            ((C13872 + C13871) * C30255 -
             ((C25037 + C25038) * C31457 + (C25039 + C25040) * C30274) +
             (C13874 + C13873) * C31165) *
                C19131) *
               C31184 * C31305) *
              C31261 +
          ((((C13669 + C13670) * C30255 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31457 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30274) +
             (C13671 + C13672) * C31165) *
                C19130 +
            ((C14374 + C14373) * C30255 -
             ((C25503 + C25504) * C31457 + (C25505 + C25506) * C30274) +
             (C14376 + C14375) * C31165) *
                C19131) *
               C31184 * C3298 +
           (((C25506 + C25505) * C30274 + (C25504 + C25503) * C31457 -
             (C14373 + C14374) * C30255 - (C14375 + C14376) * C31165) *
                C19130 +
            ((C25905 + C25906) * C30274 + (C25907 + C25908) * C31457 -
             (C15810 + C15809) * C30255 - (C15812 + C15811) * C31165) *
                C19131) *
               C31184 * C31305) *
              C31268 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C30274 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31457 -
             (C13677 + C13678) * C30255 - (C13679 + C13680) * C31165) *
                C19130 +
            ((C25909 + C25910) * C30274 + (C25911 + C25912) * C31457 -
             (C15100 + C15099) * C30255 - (C15102 + C15101) * C31165) *
                C19131) *
               C31184 * C3298 +
           (((C15099 + C15100) * C30255 -
             ((C25912 + C25911) * C31457 + (C25910 + C25909) * C30274) +
             (C15101 + C15102) * C31165) *
                C19130 +
            ((C13440 * C1302 + C13436 * C1318 + C13441 * C6424 +
              C13437 * C6425) *
                 C30255 -
             ((C25913 + C25914) * C31457 + (C25915 + C25916) * C30274) +
             (C13440 * C1319 + C13436 * C1329 + C13441 * C6426 +
              C13437 * C6427) *
                 C31165) *
                C19131) *
               C31184 * C31305) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C19130 +
            ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
               C31184 * C31301 -
           (((C25037 + C25038) * C31155 + (C25039 + C25040) * C1160) * C19131 +
            ((C25036 + C25035) * C31155 + (C25034 + C25033) * C1160) * C19130) *
               C31184 * C31308 +
           (((C25040 + C25039) * C1160 + (C25038 + C25037) * C31155) * C19130 +
            ((C26773 + C26774) * C1160 + (C26775 + C26776) * C31155) * C19131) *
               C31184 * C3806) *
              C31261 +
          ((((C25506 + C25505) * C1160 + (C25504 + C25503) * C31155) * C19130 +
            ((C25905 + C25906) * C1160 + (C25907 + C25908) * C31155) * C19131) *
               C31184 * C31308 -
           (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C19130) *
               C31184 * C31301 -
           (((C27243 + C27244) * C31155 + (C27245 + C27246) * C1160) * C19131 +
            ((C25908 + C25907) * C31155 + (C25906 + C25905) * C1160) * C19130) *
               C31184 * C3806) *
              C31268 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C19130 +
            ((C25909 + C25910) * C1160 + (C25911 + C25912) * C31155) * C19131) *
               C31184 * C31301 -
           (((C25913 + C25914) * C31155 + (C25915 + C25916) * C1160) * C19131 +
            ((C25912 + C25911) * C31155 + (C25910 + C25909) * C1160) * C19130) *
               C31184 * C31308 +
           (((C25916 + C25915) * C1160 + (C25914 + C25913) * C31155) * C19130 +
            ((C13440 * C6266 + C13436 * C6270 + C13441 * C6628 +
              C13437 * C6629) *
                 C1160 +
             (C13440 * C6269 + C13436 * C6275 + C13441 * C6630 +
              C13437 * C6631) *
                 C31155) *
                C19131) *
               C31184 * C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C19130 +
            ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
               C31184 * C3298 -
           (((C25037 + C25038) * C31155 + (C25039 + C25040) * C1160) * C19131 +
            ((C25036 + C25035) * C31155 + (C25034 + C25033) * C1160) * C19130) *
               C31184 * C31305) *
              C31548 +
          ((((C25506 + C25505) * C1160 + (C25504 + C25503) * C31155) * C19130 +
            ((C25905 + C25906) * C1160 + (C25907 + C25908) * C31155) * C19131) *
               C31184 * C31305 -
           (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C19130) *
               C31184 * C3298) *
              C31544 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C19130 +
            ((C25909 + C25910) * C1160 + (C25911 + C25912) * C31155) * C19131) *
               C31184 * C3298 -
           (((C25913 + C25914) * C31155 + (C25915 + C25916) * C1160) * C19131 +
            ((C25912 + C25911) * C31155 + (C25910 + C25909) * C1160) * C19130) *
               C31184 * C31305) *
              C31534 +
          ((((C26379 + C26380) * C1160 + (C26381 + C26382) * C31155) * C19130 +
            ((C13440 * C5618 + C13436 * C5622 + C13441 * C5620 +
              C13437 * C5625) *
                 C1160 +
             (C13440 * C5621 + C13436 * C5627 + C13441 * C5626 +
              C13437 * C5629) *
                 C31155) *
                C19131) *
               C31184 * C31305 -
           (((C26382 + C26381) * C31155 + (C26380 + C26379) * C1160) * C19131 +
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C31155 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C1160) *
                C19130) *
               C31184 * C3298) *
              C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1089 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31538 -
             (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
             (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
                C19130 +
            ((C25033 + C25034) * C1089 + (C25035 + C25036) * C31538 -
             (C13864 + C13863) * C1090 - (C13866 + C13865) * C31525 +
             (C13868 + C13867) * C1091 + (C13870 + C13869) * C31497) *
                C19131) *
               C31184 * C3298 +
           (((C13863 + C13864) * C1090 -
             ((C25036 + C25035) * C31538 + (C25034 + C25033) * C1089) +
             (C13865 + C13866) * C31525 - (C13867 + C13868) * C1091 -
             (C13869 + C13870) * C31497) *
                C19130 +
            ((C13872 + C13871) * C1090 -
             ((C25037 + C25038) * C31538 + (C25039 + C25040) * C1089) +
             (C13874 + C13873) * C31525 - (C13876 + C13875) * C1091 -
             (C13878 + C13877) * C31497) *
                C19131) *
               C31184 * C31305) *
              C2531 +
          ((((C13669 + C13670) * C1090 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31538 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C1089) +
             (C13671 + C13672) * C31525 - (C13673 + C13674) * C1091 -
             (C13675 + C13676) * C31497) *
                C19130 +
            ((C14374 + C14373) * C1090 -
             ((C25503 + C25504) * C31538 + (C25505 + C25506) * C1089) +
             (C14376 + C14375) * C31525 - (C14378 + C14377) * C1091 -
             (C14380 + C14379) * C31497) *
                C19131) *
               C31184 * C3298 +
           (((C25506 + C25505) * C1089 + (C25504 + C25503) * C31538 -
             (C14373 + C14374) * C1090 - (C14375 + C14376) * C31525 +
             (C14377 + C14378) * C1091 + (C14379 + C14380) * C31497) *
                C19130 +
            ((C25905 + C25906) * C1089 + (C25907 + C25908) * C31538 -
             (C15810 + C15809) * C1090 - (C15812 + C15811) * C31525 +
             (C13440 * C1295 + C13436 * C1305 + C13441 * C1303 +
              C13437 * C1320) *
                 C1091 +
             (C13440 * C1304 + C13436 * C1322 + C13441 * C1321 +
              C13437 * C1330) *
                 C31497) *
                C19131) *
               C31184 * C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C19130 +
            ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
               C31184 * C31549 -
           (((C25037 + C25038) * C31155 + (C25039 + C25040) * C1160) * C19131 +
            ((C25036 + C25035) * C31155 + (C25034 + C25033) * C1160) * C19130) *
               C31184 * C31546 +
           (((C25040 + C25039) * C1160 + (C25038 + C25037) * C31155) * C19130 +
            ((C26773 + C26774) * C1160 + (C26775 + C26776) * C31155) * C19131) *
               C31184 * C31537 -
           (((C26777 + C26778) * C31155 + (C26779 + C26780) * C1160) * C19131 +
            ((C26776 + C26775) * C31155 + (C26774 + C26773) * C1160) * C19130) *
               C31184 * C31520) *
              C2531 +
          ((((C25506 + C25505) * C1160 + (C25504 + C25503) * C31155) * C19130 +
            ((C25905 + C25906) * C1160 + (C25907 + C25908) * C31155) * C19131) *
               C31184 * C31546 -
           (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C19130) *
               C31184 * C31549 -
           (((C27243 + C27244) * C31155 + (C27245 + C27246) * C1160) * C19131 +
            ((C25908 + C25907) * C31155 + (C25906 + C25905) * C1160) * C19130) *
               C31184 * C31537 +
           (((C27246 + C27245) * C1160 + (C27244 + C27243) * C31155) * C19130 +
            ((C13440 * C6267 + C13436 * C6271 + C13441 * C6268 +
              C13437 * C6272) *
                 C1160 +
             (C13440 * C6273 + C13436 * C6276 + C13441 * C6274 +
              C13437 * C6277) *
                 C31155) *
                C19131) *
               C31184 * C31520) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30274 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31457 -
             (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
                C19130 +
            ((C25033 + C25034) * C30274 + (C25035 + C25036) * C31457 -
             (C13864 + C13863) * C30255 - (C13866 + C13865) * C31165) *
                C19131) *
               C31184 * C31301 +
           (((C13863 + C13864) * C30255 -
             ((C25036 + C25035) * C31457 + (C25034 + C25033) * C30274) +
             (C13865 + C13866) * C31165) *
                C19130 +
            ((C13872 + C13871) * C30255 -
             ((C25037 + C25038) * C31457 + (C25039 + C25040) * C30274) +
             (C13874 + C13873) * C31165) *
                C19131) *
               C31184 * C31308 +
           (((C25040 + C25039) * C30274 + (C25038 + C25037) * C31457 -
             (C13871 + C13872) * C30255 - (C13873 + C13874) * C31165) *
                C19130 +
            ((C26773 + C26774) * C30274 + (C26775 + C26776) * C31457 -
             (C15952 + C15951) * C30255 - (C15954 + C15953) * C31165) *
                C19131) *
               C31184 * C3806) *
              C2531 +
          ((((C13669 + C13670) * C30255 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31457 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30274) +
             (C13671 + C13672) * C31165) *
                C19130 +
            ((C14374 + C14373) * C30255 -
             ((C25503 + C25504) * C31457 + (C25505 + C25506) * C30274) +
             (C14376 + C14375) * C31165) *
                C19131) *
               C31184 * C31301 +
           (((C25506 + C25505) * C30274 + (C25504 + C25503) * C31457 -
             (C14373 + C14374) * C30255 - (C14375 + C14376) * C31165) *
                C19130 +
            ((C25905 + C25906) * C30274 + (C25907 + C25908) * C31457 -
             (C15810 + C15809) * C30255 - (C15812 + C15811) * C31165) *
                C19131) *
               C31184 * C31308 +
           (((C15809 + C15810) * C30255 -
             ((C25908 + C25907) * C31457 + (C25906 + C25905) * C30274) +
             (C15811 + C15812) * C31165) *
                C19130 +
            ((C13440 * C2418 + C13436 * C2422 + C13441 * C6526 +
              C13437 * C6527) *
                 C30255 -
             ((C27243 + C27244) * C31457 + (C27245 + C27246) * C30274) +
             (C13440 * C2423 + C13436 * C2427 + C13441 * C6528 +
              C13437 * C6529) *
                 C31165) *
                C19131) *
               C31184 * C3806) *
              C31265)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1089 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31538 -
             (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
             (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
                C19130 +
            ((C25033 + C25034) * C1089 + (C25035 + C25036) * C31538 -
             (C13864 + C13863) * C1090 - (C13866 + C13865) * C31525 +
             (C13868 + C13867) * C1091 + (C13870 + C13869) * C31497) *
                C19131) *
               C31184 * C3298 +
           (((C13863 + C13864) * C1090 -
             ((C25036 + C25035) * C31538 + (C25034 + C25033) * C1089) +
             (C13865 + C13866) * C31525 - (C13867 + C13868) * C1091 -
             (C13869 + C13870) * C31497) *
                C19130 +
            ((C13872 + C13871) * C1090 -
             ((C25037 + C25038) * C31538 + (C25039 + C25040) * C1089) +
             (C13874 + C13873) * C31525 - (C13876 + C13875) * C1091 -
             (C13878 + C13877) * C31497) *
                C19131) *
               C31184 * C31305) *
              C2531 +
          ((((C13669 + C13670) * C1090 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31538 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C1089) +
             (C13671 + C13672) * C31525 - (C13673 + C13674) * C1091 -
             (C13675 + C13676) * C31497) *
                C19130 +
            ((C14374 + C14373) * C1090 -
             ((C25503 + C25504) * C31538 + (C25505 + C25506) * C1089) +
             (C14376 + C14375) * C31525 - (C14378 + C14377) * C1091 -
             (C14380 + C14379) * C31497) *
                C19131) *
               C31184 * C3298 +
           (((C25506 + C25505) * C1089 + (C25504 + C25503) * C31538 -
             (C14373 + C14374) * C1090 - (C14375 + C14376) * C31525 +
             (C14377 + C14378) * C1091 + (C14379 + C14380) * C31497) *
                C19130 +
            ((C25905 + C25906) * C1089 + (C25907 + C25908) * C31538 -
             (C15810 + C15809) * C1090 - (C15812 + C15811) * C31525 +
             (C13440 * C1295 + C13436 * C1305 + C13441 * C1303 +
              C13437 * C1320) *
                 C1091 +
             (C13440 * C1304 + C13436 * C1322 + C13441 * C1321 +
              C13437 * C1330) *
                 C31497) *
                C19131) *
               C31184 * C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C19130 +
            ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
               C31184 * C3298 -
           (((C25037 + C25038) * C31155 + (C25039 + C25040) * C1160) * C19131 +
            ((C25036 + C25035) * C31155 + (C25034 + C25033) * C1160) * C19130) *
               C31184 * C31305) *
              C31548 +
          ((((C25506 + C25505) * C1160 + (C25504 + C25503) * C31155) * C19130 +
            ((C25905 + C25906) * C1160 + (C25907 + C25908) * C31155) * C19131) *
               C31184 * C31305 -
           (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C19130) *
               C31184 * C3298) *
              C31544 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C19130 +
            ((C25909 + C25910) * C1160 + (C25911 + C25912) * C31155) * C19131) *
               C31184 * C3298 -
           (((C25913 + C25914) * C31155 + (C25915 + C25916) * C1160) * C19131 +
            ((C25912 + C25911) * C31155 + (C25910 + C25909) * C1160) * C19130) *
               C31184 * C31305) *
              C31534 +
          ((((C26379 + C26380) * C1160 + (C26381 + C26382) * C31155) * C19130 +
            ((C13440 * C5618 + C13436 * C5622 + C13441 * C5620 +
              C13437 * C5625) *
                 C1160 +
             (C13440 * C5621 + C13436 * C5627 + C13441 * C5626 +
              C13437 * C5629) *
                 C31155) *
                C19131) *
               C31184 * C31305 -
           (((C26382 + C26381) * C31155 + (C26380 + C26379) * C1160) * C19131 +
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C31155 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C1160) *
                C19130) *
               C31184 * C3298) *
              C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C30274 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31457 -
            (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
               C19130 +
           ((C25033 + C25034) * C30274 + (C25035 + C25036) * C31457 -
            (C13864 + C13863) * C30255 - (C13866 + C13865) * C31165) *
               C19131) *
              C31184 * C31218 * C1431 +
          (((C13669 + C13670) * C30255 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31457 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C30274) +
            (C13671 + C13672) * C31165) *
               C19130 +
           ((C14374 + C14373) * C30255 -
            ((C25503 + C25504) * C31457 + (C25505 + C25506) * C30274) +
            (C14376 + C14375) * C31165) *
               C19131) *
              C31184 * C31218 * C1432 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C30274 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31457 -
            (C13677 + C13678) * C30255 - (C13679 + C13680) * C31165) *
               C19130 +
           ((C25909 + C25910) * C30274 + (C25911 + C25912) * C31457 -
            (C15100 + C15099) * C30255 - (C15102 + C15101) * C31165) *
               C19131) *
              C31184 * C31218 * C1433 +
          (((C14893 + C14894) * C30255 -
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C31457 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C30274) +
            (C14895 + C14896) * C31165) *
               C19130 +
           ((C13440 * C1714 + C13436 * C1718 + C13441 * C5878 +
             C13437 * C5879) *
                C30255 -
            ((C13441 * C5623 + C13437 * C5628 + C13440 * C1717 +
              C13436 * C1722) *
                 C31457 +
             (C13441 * C5619 + C13437 * C5624 + C13440 * C1713 +
              C13436 * C1716) *
                 C30274) +
            (C13440 * C1719 + C13436 * C1723 + C13441 * C5880 +
             C13437 * C5881) *
                C31165) *
               C19131) *
              C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C665 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C659 -
            (C13475 + C13476) * C666 - (C13477 + C13478) * C660 +
            (C13479 + C13480) * C667 + (C13481 + C13482) * C661 -
            (C13483 + C13484) * C668 - (C13485 + C13486) * C31508) *
               C19130 +
           ((C25033 + C25034) * C665 + (C25035 + C25036) * C659 -
            (C13864 + C13863) * C666 - (C13866 + C13865) * C660 +
            (C13868 + C13867) * C667 + (C13870 + C13869) * C661 -
            (C14160 + C14159) * C668 - (C14162 + C14161) * C31508) *
               C19131) *
              C31184 * C31218 * C31475 +
          (((C13669 + C13670) * C666 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C659 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C665) +
            (C13671 + C13672) * C660 - (C13673 + C13674) * C667 -
            (C13675 + C13676) * C661 + (C14017 + C14018) * C668 +
            (C14019 + C14020) * C31508) *
               C19130 +
           ((C14374 + C14373) * C666 -
            ((C13441 * C1314 + C13437 * C1327 + C13440 * C941 + C13436 * C950) *
                 C659 +
             (C13441 * C1300 + C13437 * C1315 + C13440 * C935 + C13436 * C940) *
                 C665) +
            (C14376 + C14375) * C660 - (C14378 + C14377) * C667 -
            (C14380 + C14379) * C661 +
            (C13440 * C938 + C13436 * C946 + C13441 * C1599 + C13437 * C1600) *
                C668 +
            (C13440 * C947 + C13436 * C953 + C13441 * C1601 + C13437 * C1602) *
                C31508) *
               C19131) *
              C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30274 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31457 -
             (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
                C19130 +
            ((C25033 + C25034) * C30274 + (C25035 + C25036) * C31457 -
             (C13864 + C13863) * C30255 - (C13866 + C13865) * C31165) *
                C19131) *
               C31184 * C1835 +
           (((C13863 + C13864) * C30255 -
             ((C25036 + C25035) * C31457 + (C25034 + C25033) * C30274) +
             (C13865 + C13866) * C31165) *
                C19130 +
            ((C13872 + C13871) * C30255 -
             ((C25037 + C25038) * C31457 + (C25039 + C25040) * C30274) +
             (C13874 + C13873) * C31165) *
                C19131) *
               C31184 * C1836 +
           (((C25040 + C25039) * C30274 + (C25038 + C25037) * C31457 -
             (C13871 + C13872) * C30255 - (C13873 + C13874) * C31165) *
                C19130 +
            ((C26773 + C26774) * C30274 + (C26775 + C26776) * C31457 -
             (C15952 + C15951) * C30255 - (C15954 + C15953) * C31165) *
                C19131) *
               C31184 * C31507) *
              C31475 +
          ((((C13669 + C13670) * C30255 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31457 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30274) +
             (C13671 + C13672) * C31165) *
                C19130 +
            ((C14374 + C14373) * C30255 -
             ((C25503 + C25504) * C31457 + (C25505 + C25506) * C30274) +
             (C14376 + C14375) * C31165) *
                C19131) *
               C31184 * C1835 +
           (((C25506 + C25505) * C30274 + (C25504 + C25503) * C31457 -
             (C14373 + C14374) * C30255 - (C14375 + C14376) * C31165) *
                C19130 +
            ((C25905 + C25906) * C30274 + (C25907 + C25908) * C31457 -
             (C15810 + C15809) * C30255 - (C15812 + C15811) * C31165) *
                C19131) *
               C31184 * C1836 +
           (((C15809 + C15810) * C30255 -
             ((C25908 + C25907) * C31457 + (C25906 + C25905) * C30274) +
             (C15811 + C15812) * C31165) *
                C19130 +
            ((C13440 * C2418 + C13436 * C2422 + C13441 * C6526 +
              C13437 * C6527) *
                 C30255 -
             ((C13441 * C6269 + C13437 * C6275 + C13440 * C2421 +
               C13436 * C2426) *
                  C31457 +
              (C13441 * C6266 + C13437 * C6270 + C13440 * C2417 +
               C13436 * C2420) *
                  C30274) +
             (C13440 * C2423 + C13436 * C2427 + C13441 * C6528 +
              C13437 * C6529) *
                 C31165) *
                C19131) *
               C31184 * C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C19130 +
            ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
               C31184 * C31476 -
           (((C25037 + C25038) * C31155 + (C25039 + C25040) * C1160) * C19131 +
            ((C25036 + C25035) * C31155 + (C25034 + C25033) * C1160) * C19130) *
               C31184 * C31305) *
              C1431 +
          ((((C25506 + C25505) * C1160 + (C25504 + C25503) * C31155) * C19130 +
            ((C25905 + C25906) * C1160 + (C25907 + C25908) * C31155) * C19131) *
               C31184 * C31305 -
           (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C19130) *
               C31184 * C31476) *
              C1432 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C19130 +
            ((C25909 + C25910) * C1160 + (C25911 + C25912) * C31155) * C19131) *
               C31184 * C31476 -
           (((C25913 + C25914) * C31155 + (C25915 + C25916) * C1160) * C19131 +
            ((C25912 + C25911) * C31155 + (C25910 + C25909) * C1160) * C19130) *
               C31184 * C31305) *
              C1433 +
          ((((C26379 + C26380) * C1160 + (C26381 + C26382) * C31155) * C19130 +
            ((C13440 * C5618 + C13436 * C5622 + C13441 * C5620 +
              C13437 * C5625) *
                 C1160 +
             (C13440 * C5621 + C13436 * C5627 + C13441 * C5626 +
              C13437 * C5629) *
                 C31155) *
                C19131) *
               C31184 * C31305 -
           (((C26382 + C26381) * C31155 + (C26380 + C26379) * C1160) * C19131 +
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C31155 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C1160) *
                C19130) *
               C31184 * C31476) *
              C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C293 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C287 -
             (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
             (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
                C19130 +
            ((C25033 + C25034) * C293 + (C25035 + C25036) * C287 -
             (C13864 + C13863) * C294 - (C13866 + C13865) * C288 +
             (C13868 + C13867) * C295 + (C13870 + C13869) * C31497) *
                C19131) *
               C31184 * C31476 +
           (((C13863 + C13864) * C294 -
             ((C25036 + C25035) * C287 + (C25034 + C25033) * C293) +
             (C13865 + C13866) * C288 - (C13867 + C13868) * C295 -
             (C13869 + C13870) * C31497) *
                C19130 +
            ((C13872 + C13871) * C294 -
             ((C25037 + C25038) * C287 + (C25039 + C25040) * C293) +
             (C13874 + C13873) * C288 - (C13876 + C13875) * C295 -
             (C13878 + C13877) * C31497) *
                C19131) *
               C31184 * C31305) *
              C31475 +
          ((((C13669 + C13670) * C294 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C287 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C293) +
             (C13671 + C13672) * C288 - (C13673 + C13674) * C295 -
             (C13675 + C13676) * C31497) *
                C19130 +
            ((C14374 + C14373) * C294 -
             ((C25503 + C25504) * C287 + (C25505 + C25506) * C293) +
             (C14376 + C14375) * C288 - (C14378 + C14377) * C295 -
             (C14380 + C14379) * C31497) *
                C19131) *
               C31184 * C31476 +
           (((C25506 + C25505) * C293 + (C25504 + C25503) * C287 -
             (C14373 + C14374) * C294 - (C14375 + C14376) * C288 +
             (C14377 + C14378) * C295 + (C14379 + C14380) * C31497) *
                C19130 +
            ((C13440 * C1297 + C13436 * C1309 + C13441 * C1301 +
              C13437 * C1316) *
                 C293 +
             (C13440 * C1308 + C13436 * C1324 + C13441 * C1317 +
              C13437 * C1328) *
                 C287 -
             (C15810 + C15809) * C294 - (C15812 + C15811) * C288 +
             (C13440 * C1295 + C13436 * C1305 + C13441 * C1303 +
              C13437 * C1320) *
                 C295 +
             (C13440 * C1304 + C13436 * C1322 + C13441 * C1321 +
              C13437 * C1330) *
                 C31497) *
                C19131) *
               C31184 * C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C19130 +
            ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
               C31184 * C2299 -
           (((C25037 + C25038) * C31155 + (C25039 + C25040) * C1160) * C19131 +
            ((C25036 + C25035) * C31155 + (C25034 + C25033) * C1160) * C19130) *
               C31184 * C2300 +
           (((C25040 + C25039) * C1160 + (C25038 + C25037) * C31155) * C19130 +
            ((C26773 + C26774) * C1160 + (C26775 + C26776) * C31155) * C19131) *
               C31184 * C2301 -
           (((C26777 + C26778) * C31155 + (C26779 + C26780) * C1160) * C19131 +
            ((C26776 + C26775) * C31155 + (C26774 + C26773) * C1160) * C19130) *
               C31184 * C31520) *
              C31475 +
          ((((C25506 + C25505) * C1160 + (C25504 + C25503) * C31155) * C19130 +
            ((C25905 + C25906) * C1160 + (C25907 + C25908) * C31155) * C19131) *
               C31184 * C2300 -
           (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C19130) *
               C31184 * C2299 -
           (((C27243 + C27244) * C31155 + (C27245 + C27246) * C1160) * C19131 +
            ((C25908 + C25907) * C31155 + (C25906 + C25905) * C1160) * C19130) *
               C31184 * C2301 +
           (((C27246 + C27245) * C1160 + (C27244 + C27243) * C31155) * C19130 +
            ((C13440 * C6267 + C13436 * C6271 + C13441 * C6268 +
              C13437 * C6272) *
                 C1160 +
             (C13440 * C6273 + C13436 * C6276 + C13441 * C6274 +
              C13437 * C6277) *
                 C31155) *
                C19131) *
               C31184 * C31520) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                   C114 +
               (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                   C102 -
               (C13475 + C13476) * C115 - (C13477 + C13478) * C103 +
               (C13479 + C13480) * C116 + (C13481 + C13482) * C104 -
               (C13483 + C13484) * C117 - (C13485 + C13486) * C105 +
               (C13487 + C13488) * C118 + (C13489 + C13490) * C106) *
                  C19130 +
              ((C13440 * C486 + C13436 * C497 + C13441 * C935 + C13437 * C940) *
                   C114 +
               (C13440 * C496 + C13436 * C515 + C13441 * C941 + C13437 * C950) *
                   C102 -
               (C13864 + C13863) * C115 - (C13866 + C13865) * C103 +
               (C13868 + C13867) * C116 + (C13870 + C13869) * C104 -
               (C14160 + C14159) * C117 - (C14162 + C14161) * C105 +
               (C13440 * C489 + C13436 * C503 + C13441 * C939 + C13437 * C948) *
                   C118 +
               (C13440 * C504 + C13436 * C519 + C13441 * C949 + C13437 * C954) *
                   C106) *
                  C19131) *
             C31184 * C31218 * C31206 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13440 * C119 + C13436 * C126 + C13441 * C297 +
                 C13437 * C308) *
                    C293 +
                (C13440 * C127 + C13436 * C140 + C13441 * C307 +
                 C13437 * C326) *
                    C287 -
                (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
                (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
                   C19130 +
               ((C13440 * C486 + C13436 * C497 + C13441 * C935 +
                 C13437 * C940) *
                    C293 +
                (C13440 * C496 + C13436 * C515 + C13441 * C941 +
                 C13437 * C950) *
                    C287 -
                (C13864 + C13863) * C294 - (C13866 + C13865) * C288 +
                (C13868 + C13867) * C295 + (C13870 + C13869) * C31497) *
                   C19131) *
                  C31184 * C31218 * C31541 +
              (((C13669 + C13670) * C294 -
                ((C13441 * C317 + C13437 * C331 + C13440 * C307 +
                  C13436 * C326) *
                     C287 +
                 (C13441 * C301 + C13437 * C316 + C13440 * C297 +
                  C13436 * C308) *
                     C293) +
                (C13671 + C13672) * C288 - (C13673 + C13674) * C295 -
                (C13675 + C13676) * C31497) *
                   C19130 +
               ((C14374 + C14373) * C294 -
                ((C13441 * C1314 + C13437 * C1327 + C13440 * C941 +
                  C13436 * C950) *
                     C287 +
                 (C13441 * C1300 + C13437 * C1315 + C13440 * C935 +
                  C13436 * C940) *
                     C293) +
                (C14376 + C14375) * C288 - (C14378 + C14377) * C295 -
                (C14380 + C14379) * C31497) *
                   C19131) *
                  C31184 * C31218 * C31529 +
              (((C13440 * C301 + C13436 * C316 + C13441 * C1163 +
                 C13437 * C1172) *
                    C293 +
                (C13440 * C317 + C13436 * C331 + C13441 * C1171 +
                 C13437 * C1181) *
                    C287 -
                (C13677 + C13678) * C294 - (C13679 + C13680) * C288 +
                (C13681 + C13682) * C295 + (C13683 + C13684) * C31497) *
                   C19130 +
               ((C13440 * C1300 + C13436 * C1315 + C13441 * C1713 +
                 C13437 * C1716) *
                    C293 +
                (C13440 * C1314 + C13436 * C1327 + C13441 * C1717 +
                 C13437 * C1722) *
                    C287 -
                (C15100 + C15099) * C294 - (C15102 + C15101) * C288 +
                (C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
                 C13437 * C1720) *
                    C295 +
                (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
                 C13437 * C1724) *
                    C31497) *
                   C19131) *
                  C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C293 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C287 -
            (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
            (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
               C19130 +
           ((C25033 + C25034) * C293 + (C25035 + C25036) * C287 -
            (C13864 + C13863) * C294 - (C13866 + C13865) * C288 +
            (C13868 + C13867) * C295 + (C13870 + C13869) * C31497) *
               C19131) *
              C31184 * C31542 +
          (((C13863 + C13864) * C294 -
            ((C25036 + C25035) * C287 + (C25034 + C25033) * C293) +
            (C13865 + C13866) * C288 - (C13867 + C13868) * C295 -
            (C13869 + C13870) * C31497) *
               C19130 +
           ((C13872 + C13871) * C294 -
            ((C25037 + C25038) * C287 + (C25039 + C25040) * C293) +
            (C13874 + C13873) * C288 - (C13876 + C13875) * C295 -
            (C13878 + C13877) * C31497) *
               C19131) *
              C31184 * C31531 +
          (((C25040 + C25039) * C293 + (C25038 + C25037) * C287 -
            (C13871 + C13872) * C294 - (C13873 + C13874) * C288 +
            (C13875 + C13876) * C295 + (C13877 + C13878) * C31497) *
               C19130 +
           ((C13440 * C2017 + C13436 * C2026 + C13441 * C2417 +
             C13437 * C2420) *
                C293 +
            (C13440 * C2025 + C13436 * C2035 + C13441 * C2421 +
             C13437 * C2426) *
                C287 -
            (C15952 + C15951) * C294 - (C15954 + C15953) * C288 +
            (C13440 * C2015 + C13436 * C2022 + C13441 * C2419 +
             C13437 * C2424) *
                C295 +
            (C13440 * C2021 + C13436 * C2033 + C13441 * C2425 +
             C13437 * C2428) *
                C31497) *
               C19131) *
              C31184 * C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1089 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31538 -
            (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
            (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
               C19130 +
           ((C25033 + C25034) * C1089 + (C25035 + C25036) * C31538 -
            (C13864 + C13863) * C1090 - (C13866 + C13865) * C31525 +
            (C13868 + C13867) * C1091 + (C13870 + C13869) * C31497) *
               C19131) *
              C31184 * C31218 * C1086 +
          (((C13669 + C13670) * C1090 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31538 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1089) +
            (C13671 + C13672) * C31525 - (C13673 + C13674) * C1091 -
            (C13675 + C13676) * C31497) *
               C19130 +
           ((C14374 + C14373) * C1090 -
            ((C25503 + C25504) * C31538 + (C25505 + C25506) * C1089) +
            (C14376 + C14375) * C31525 - (C14378 + C14377) * C1091 -
            (C14380 + C14379) * C31497) *
               C19131) *
              C31184 * C31218 * C1087 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1089 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31538 -
            (C13677 + C13678) * C1090 - (C13679 + C13680) * C31525 +
            (C13681 + C13682) * C1091 + (C13683 + C13684) * C31497) *
               C19130 +
           ((C13440 * C1300 + C13436 * C1315 + C13441 * C1713 +
             C13437 * C1716) *
                C1089 +
            (C13440 * C1314 + C13436 * C1327 + C13441 * C1717 +
             C13437 * C1722) *
                C31538 -
            (C15100 + C15099) * C1090 - (C15102 + C15101) * C31525 +
            (C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
             C13437 * C1720) *
                C1091 +
            (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
             C13437 * C1724) *
                C31497) *
               C19131) *
              C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1160 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31155) *
               C19130 +
           ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
              C31184 * C31218 * C1155 -
          (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
           ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                C31155 +
            (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                C1160) *
               C19130) *
              C31184 * C31218 * C1156 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1160 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31155) *
               C19130 +
           ((C13440 * C1300 + C13436 * C1315 + C13441 * C1713 +
             C13437 * C1716) *
                C1160 +
            (C13440 * C1314 + C13436 * C1327 + C13441 * C1717 +
             C13437 * C1722) *
                C31155) *
               C19131) *
              C31184 * C31218 * C1157 -
          (((C13441 * C5623 + C13437 * C5628 + C13440 * C1717 +
             C13436 * C1722) *
                C31155 +
            (C13441 * C5619 + C13437 * C5624 + C13440 * C1713 +
             C13436 * C1716) *
                C1160) *
               C19131 +
           ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
             C13436 * C1181) *
                C31155 +
            (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
             C13436 * C1172) *
                C1160) *
               C19130) *
              C31184 * C31218 * C1158 +
          (((C13440 * C1164 + C13436 * C1173 + C13441 * C5500 +
             C13437 * C5503) *
                C1160 +
            (C13440 * C1174 + C13436 * C1182 + C13441 * C5502 +
             C13437 * C5506) *
                C31155) *
               C19130 +
           ((C13440 * C5619 + C13436 * C5624 + C13441 * C5980 +
             C13437 * C5981) *
                C1160 +
            (C13440 * C5623 + C13436 * C5628 + C13441 * C5982 +
             C13437 * C5983) *
                C31155) *
               C19131) *
              C31184 * C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C19130 +
            ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
               C31184 * C31542 -
           (((C25037 + C25038) * C31155 + (C25039 + C25040) * C1160) * C19131 +
            ((C25036 + C25035) * C31155 + (C25034 + C25033) * C1160) * C19130) *
               C31184 * C31531 +
           (((C25040 + C25039) * C1160 + (C25038 + C25037) * C31155) * C19130 +
            ((C13440 * C2017 + C13436 * C2026 + C13441 * C2417 +
              C13437 * C2420) *
                 C1160 +
             (C13440 * C2025 + C13436 * C2035 + C13441 * C2421 +
              C13437 * C2426) *
                 C31155) *
                C19131) *
               C31184 * C31507) *
              C1086 +
          ((((C25506 + C25505) * C1160 + (C25504 + C25503) * C31155) * C19130 +
            ((C25905 + C25906) * C1160 + (C25907 + C25908) * C31155) * C19131) *
               C31184 * C31531 -
           (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C19130) *
               C31184 * C31542 -
           (((C13441 * C6269 + C13437 * C6275 + C13440 * C2421 +
              C13436 * C2426) *
                 C31155 +
             (C13441 * C6266 + C13437 * C6270 + C13440 * C2417 +
              C13436 * C2420) *
                 C1160) *
                C19131 +
            ((C25908 + C25907) * C31155 + (C25906 + C25905) * C1160) * C19130) *
               C31184 * C31507) *
              C1087 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C19130 +
            ((C25909 + C25910) * C1160 + (C25911 + C25912) * C31155) * C19131) *
               C31184 * C31542 -
           (((C25913 + C25914) * C31155 + (C25915 + C25916) * C1160) * C19131 +
            ((C25912 + C25911) * C31155 + (C25910 + C25909) * C1160) * C19130) *
               C31184 * C31531 +
           (((C25916 + C25915) * C1160 + (C25914 + C25913) * C31155) * C19130 +
            ((C13440 * C6266 + C13436 * C6270 + C13441 * C6628 +
              C13437 * C6629) *
                 C1160 +
             (C13440 * C6269 + C13436 * C6275 + C13441 * C6630 +
              C13437 * C6631) *
                 C31155) *
                C19131) *
               C31184 * C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1089 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31538 -
            (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
            (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
               C19130 +
           ((C25033 + C25034) * C1089 + (C25035 + C25036) * C31538 -
            (C13864 + C13863) * C1090 - (C13866 + C13865) * C31525 +
            (C13868 + C13867) * C1091 + (C13870 + C13869) * C31497) *
               C19131) *
              C31184 * C1835 +
          (((C13863 + C13864) * C1090 -
            ((C25036 + C25035) * C31538 + (C25034 + C25033) * C1089) +
            (C13865 + C13866) * C31525 - (C13867 + C13868) * C1091 -
            (C13869 + C13870) * C31497) *
               C19130 +
           ((C13872 + C13871) * C1090 -
            ((C25037 + C25038) * C31538 + (C25039 + C25040) * C1089) +
            (C13874 + C13873) * C31525 - (C13876 + C13875) * C1091 -
            (C13878 + C13877) * C31497) *
               C19131) *
              C31184 * C1836 +
          (((C25040 + C25039) * C1089 + (C25038 + C25037) * C31538 -
            (C13871 + C13872) * C1090 - (C13873 + C13874) * C31525 +
            (C13875 + C13876) * C1091 + (C13877 + C13878) * C31497) *
               C19130 +
           ((C13440 * C2017 + C13436 * C2026 + C13441 * C2417 +
             C13437 * C2420) *
                C1089 +
            (C13440 * C2025 + C13436 * C2035 + C13441 * C2421 +
             C13437 * C2426) *
                C31538 -
            (C15952 + C15951) * C1090 - (C15954 + C15953) * C31525 +
            (C13440 * C2015 + C13436 * C2022 + C13441 * C2419 +
             C13437 * C2424) *
                C1091 +
            (C13440 * C2021 + C13436 * C2033 + C13441 * C2425 +
             C13437 * C2428) *
                C31497) *
               C19131) *
              C31184 * C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C19130 +
            ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
               C31184 * C1835 -
           (((C25037 + C25038) * C31155 + (C25039 + C25040) * C1160) * C19131 +
            ((C25036 + C25035) * C31155 + (C25034 + C25033) * C1160) * C19130) *
               C31184 * C1836 +
           (((C25040 + C25039) * C1160 + (C25038 + C25037) * C31155) * C19130 +
            ((C13440 * C2017 + C13436 * C2026 + C13441 * C2417 +
              C13437 * C2420) *
                 C1160 +
             (C13440 * C2025 + C13436 * C2035 + C13441 * C2421 +
              C13437 * C2426) *
                 C31155) *
                C19131) *
               C31184 * C31507) *
              C31541 +
          ((((C25506 + C25505) * C1160 + (C25504 + C25503) * C31155) * C19130 +
            ((C25905 + C25906) * C1160 + (C25907 + C25908) * C31155) * C19131) *
               C31184 * C1836 -
           (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C19130) *
               C31184 * C1835 -
           (((C13441 * C6269 + C13437 * C6275 + C13440 * C2421 +
              C13436 * C2426) *
                 C31155 +
             (C13441 * C6266 + C13437 * C6270 + C13440 * C2417 +
              C13436 * C2420) *
                 C1160) *
                C19131 +
            ((C25908 + C25907) * C31155 + (C25906 + C25905) * C1160) * C19130) *
               C31184 * C31507) *
              C31529 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C19130 +
            ((C25909 + C25910) * C1160 + (C25911 + C25912) * C31155) * C19131) *
               C31184 * C1835 -
           (((C25913 + C25914) * C31155 + (C25915 + C25916) * C1160) * C19131 +
            ((C25912 + C25911) * C31155 + (C25910 + C25909) * C1160) * C19130) *
               C31184 * C1836 +
           (((C25916 + C25915) * C1160 + (C25914 + C25913) * C31155) * C19130 +
            ((C13440 * C6266 + C13436 * C6270 + C13441 * C6628 +
              C13437 * C6629) *
                 C1160 +
             (C13440 * C6269 + C13436 * C6275 + C13441 * C6630 +
              C13437 * C6631) *
                 C31155) *
                C19131) *
               C31184 * C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1160 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31155) *
               C19130 +
           ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
              C31184 * C2010 -
          (((C25037 + C25038) * C31155 + (C25039 + C25040) * C1160) * C19131 +
           ((C25036 + C25035) * C31155 + (C25034 + C25033) * C1160) * C19130) *
              C31184 * C2011 +
          (((C25040 + C25039) * C1160 + (C25038 + C25037) * C31155) * C19130 +
           ((C26773 + C26774) * C1160 + (C26775 + C26776) * C31155) * C19131) *
              C31184 * C2012 -
          (((C26777 + C26778) * C31155 + (C26779 + C26780) * C1160) * C19131 +
           ((C26776 + C26775) * C31155 + (C26774 + C26773) * C1160) * C19130) *
              C31184 * C2013 +
          (((C26780 + C26779) * C1160 + (C26778 + C26777) * C31155) * C19130 +
           ((C13440 * C10592 + C13436 * C10595 + C13441 * C11001 +
             C13437 * C11002) *
                C1160 +
            (C13440 * C10594 + C13436 * C10598 + C13441 * C11003 +
             C13437 * C11004) *
                C31155) *
               C19131) *
              C31184 * C2014) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30274 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31457 -
             (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
                C19130 +
            ((C25033 + C25034) * C30274 + (C25035 + C25036) * C31457 -
             (C13864 + C13863) * C30255 - (C13866 + C13865) * C31165) *
                C19131) *
               C31184 * C31476 +
           (((C13863 + C13864) * C30255 -
             ((C25036 + C25035) * C31457 + (C25034 + C25033) * C30274) +
             (C13865 + C13866) * C31165) *
                C19130 +
            ((C13872 + C13871) * C30255 -
             ((C25037 + C25038) * C31457 + (C25039 + C25040) * C30274) +
             (C13874 + C13873) * C31165) *
                C19131) *
               C31184 * C31305) *
              C1086 +
          ((((C13669 + C13670) * C30255 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31457 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30274) +
             (C13671 + C13672) * C31165) *
                C19130 +
            ((C14374 + C14373) * C30255 -
             ((C25503 + C25504) * C31457 + (C25505 + C25506) * C30274) +
             (C14376 + C14375) * C31165) *
                C19131) *
               C31184 * C31476 +
           (((C25506 + C25505) * C30274 + (C25504 + C25503) * C31457 -
             (C14373 + C14374) * C30255 - (C14375 + C14376) * C31165) *
                C19130 +
            ((C25905 + C25906) * C30274 + (C25907 + C25908) * C31457 -
             (C15810 + C15809) * C30255 - (C15812 + C15811) * C31165) *
                C19131) *
               C31184 * C31305) *
              C1087 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C30274 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31457 -
             (C13677 + C13678) * C30255 - (C13679 + C13680) * C31165) *
                C19130 +
            ((C25909 + C25910) * C30274 + (C25911 + C25912) * C31457 -
             (C15100 + C15099) * C30255 - (C15102 + C15101) * C31165) *
                C19131) *
               C31184 * C31476 +
           (((C15099 + C15100) * C30255 -
             ((C25912 + C25911) * C31457 + (C25910 + C25909) * C30274) +
             (C15101 + C15102) * C31165) *
                C19130 +
            ((C13440 * C1302 + C13436 * C1318 + C13441 * C6424 +
              C13437 * C6425) *
                 C30255 -
             ((C25913 + C25914) * C31457 + (C25915 + C25916) * C30274) +
             (C13440 * C1319 + C13436 * C1329 + C13441 * C6426 +
              C13437 * C6427) *
                 C31165) *
                C19131) *
               C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C665 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C659 -
            (C13475 + C13476) * C666 - (C13477 + C13478) * C660 +
            (C13479 + C13480) * C667 + (C13481 + C13482) * C661 -
            (C13483 + C13484) * C668 - (C13485 + C13486) * C31508) *
               C19130 +
           ((C25033 + C25034) * C665 + (C25035 + C25036) * C659 -
            (C13864 + C13863) * C666 - (C13866 + C13865) * C660 +
            (C13868 + C13867) * C667 + (C13870 + C13869) * C661 -
            (C14160 + C14159) * C668 - (C14162 + C14161) * C31508) *
               C19131) *
              C31184 * C31476 +
          (((C13863 + C13864) * C666 -
            ((C25036 + C25035) * C659 + (C25034 + C25033) * C665) +
            (C13865 + C13866) * C660 - (C13867 + C13868) * C667 -
            (C13869 + C13870) * C661 + (C14159 + C14160) * C668 +
            (C14161 + C14162) * C31508) *
               C19130 +
           ((C13872 + C13871) * C666 -
            ((C25037 + C25038) * C659 + (C25039 + C25040) * C665) +
            (C13874 + C13873) * C660 - (C13876 + C13875) * C667 -
            (C13878 + C13877) * C661 +
            (C13440 * C493 + C13436 * C511 + C13441 * C2185 + C13437 * C2186) *
                C668 +
            (C13440 * C512 + C13436 * C523 + C13441 * C2187 + C13437 * C2188) *
                C31508) *
               C19131) *
              C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C30274 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31457 -
            (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
               C19130 +
           ((C25033 + C25034) * C30274 + (C25035 + C25036) * C31457 -
            (C13864 + C13863) * C30255 - (C13866 + C13865) * C31165) *
               C19131) *
              C31184 * C2299 +
          (((C13863 + C13864) * C30255 -
            ((C25036 + C25035) * C31457 + (C25034 + C25033) * C30274) +
            (C13865 + C13866) * C31165) *
               C19130 +
           ((C13872 + C13871) * C30255 -
            ((C25037 + C25038) * C31457 + (C25039 + C25040) * C30274) +
            (C13874 + C13873) * C31165) *
               C19131) *
              C31184 * C2300 +
          (((C25040 + C25039) * C30274 + (C25038 + C25037) * C31457 -
            (C13871 + C13872) * C30255 - (C13873 + C13874) * C31165) *
               C19130 +
           ((C26773 + C26774) * C30274 + (C26775 + C26776) * C31457 -
            (C15952 + C15951) * C30255 - (C15954 + C15953) * C31165) *
               C19131) *
              C31184 * C2301 +
          (((C15951 + C15952) * C30255 -
            ((C26776 + C26775) * C31457 + (C26774 + C26773) * C30274) +
            (C15953 + C15954) * C31165) *
               C19130 +
           ((C13440 * C2019 + C13436 * C2029 + C13441 * C10764 +
             C13437 * C10765) *
                C30255 -
            ((C26777 + C26778) * C31457 + (C26779 + C26780) * C30274) +
            (C13440 * C2030 + C13436 * C2037 + C13441 * C10766 +
             C13437 * C10767) *
                C31165) *
               C19131) *
              C31184 * C31520) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C293 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C287 -
            (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
            (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
               C19130 +
           ((C13440 * C486 + C13436 * C497 + C13441 * C935 + C13437 * C940) *
                C293 +
            (C13440 * C496 + C13436 * C515 + C13441 * C941 + C13437 * C950) *
                C287 -
            (C13864 + C13863) * C294 - (C13866 + C13865) * C288 +
            (C13868 + C13867) * C295 + (C13870 + C13869) * C31497) *
               C19131) *
              C31184 * C31218 * C31541 +
          (((C13669 + C13670) * C294 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C287 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C293) +
            (C13671 + C13672) * C288 - (C13673 + C13674) * C295 -
            (C13675 + C13676) * C31497) *
               C19130 +
           ((C14374 + C14373) * C294 -
            ((C13441 * C1314 + C13437 * C1327 + C13440 * C941 + C13436 * C950) *
                 C287 +
             (C13441 * C1300 + C13437 * C1315 + C13440 * C935 + C13436 * C940) *
                 C293) +
            (C14376 + C14375) * C288 - (C14378 + C14377) * C295 -
            (C14380 + C14379) * C31497) *
               C19131) *
              C31184 * C31218 * C31529 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C293 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C287 -
            (C13677 + C13678) * C294 - (C13679 + C13680) * C288 +
            (C13681 + C13682) * C295 + (C13683 + C13684) * C31497) *
               C19130 +
           ((C13440 * C1300 + C13436 * C1315 + C13441 * C1713 +
             C13437 * C1716) *
                C293 +
            (C13440 * C1314 + C13436 * C1327 + C13441 * C1717 +
             C13437 * C1722) *
                C287 -
            (C15100 + C15099) * C294 - (C15102 + C15101) * C288 +
            (C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
             C13437 * C1720) *
                C295 +
            (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
             C13437 * C1724) *
                C31497) *
               C19131) *
              C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
               C114 +
           (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
               C102 -
           (C13475 + C13476) * C115 - (C13477 + C13478) * C103 +
           (C13479 + C13480) * C116 + (C13481 + C13482) * C104 -
           (C13483 + C13484) * C117 - (C13485 + C13486) * C105 +
           (C13487 + C13488) * C118 + (C13489 + C13490) * C106) *
              C19130 +
          ((C13440 * C486 + C13436 * C497 + C13441 * C935 + C13437 * C940) *
               C114 +
           (C13440 * C496 + C13436 * C515 + C13441 * C941 + C13437 * C950) *
               C102 -
           (C13864 + C13863) * C115 - (C13866 + C13865) * C103 +
           (C13868 + C13867) * C116 + (C13870 + C13869) * C104 -
           (C14160 + C14159) * C117 - (C14162 + C14161) * C105 +
           (C13440 * C489 + C13436 * C503 + C13441 * C939 + C13437 * C948) *
               C118 +
           (C13440 * C504 + C13436 * C519 + C13441 * C949 + C13437 * C954) *
               C106) *
              C19131) *
         C31184 * C31218 * C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1089 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31538 -
            (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
            (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
               C19130 +
           ((C25033 + C25034) * C1089 + (C25035 + C25036) * C31538 -
            (C13864 + C13863) * C1090 - (C13866 + C13865) * C31525 +
            (C13868 + C13867) * C1091 + (C13870 + C13869) * C31497) *
               C19131) *
              C31184 * C31218 * C1086 +
          (((C13669 + C13670) * C1090 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31538 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1089) +
            (C13671 + C13672) * C31525 - (C13673 + C13674) * C1091 -
            (C13675 + C13676) * C31497) *
               C19130 +
           ((C14374 + C14373) * C1090 -
            ((C25503 + C25504) * C31538 + (C25505 + C25506) * C1089) +
            (C14376 + C14375) * C31525 - (C14378 + C14377) * C1091 -
            (C14380 + C14379) * C31497) *
               C19131) *
              C31184 * C31218 * C1087 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1089 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31538 -
            (C13677 + C13678) * C1090 - (C13679 + C13680) * C31525 +
            (C13681 + C13682) * C1091 + (C13683 + C13684) * C31497) *
               C19130 +
           ((C13440 * C1300 + C13436 * C1315 + C13441 * C1713 +
             C13437 * C1716) *
                C1089 +
            (C13440 * C1314 + C13436 * C1327 + C13441 * C1717 +
             C13437 * C1722) *
                C31538 -
            (C15100 + C15099) * C1090 - (C15102 + C15101) * C31525 +
            (C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
             C13437 * C1720) *
                C1091 +
            (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
             C13437 * C1724) *
                C31497) *
               C19131) *
              C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1160 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31155) *
               C19130 +
           ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
              C31184 * C31218 * C1155 -
          (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
           ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                C31155 +
            (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                C1160) *
               C19130) *
              C31184 * C31218 * C1156 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1160 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31155) *
               C19130 +
           ((C13440 * C1300 + C13436 * C1315 + C13441 * C1713 +
             C13437 * C1716) *
                C1160 +
            (C13440 * C1314 + C13436 * C1327 + C13441 * C1717 +
             C13437 * C1722) *
                C31155) *
               C19131) *
              C31184 * C31218 * C1157 -
          (((C13441 * C5623 + C13437 * C5628 + C13440 * C1717 +
             C13436 * C1722) *
                C31155 +
            (C13441 * C5619 + C13437 * C5624 + C13440 * C1713 +
             C13436 * C1716) *
                C1160) *
               C19131 +
           ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
             C13436 * C1181) *
                C31155 +
            (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
             C13436 * C1172) *
                C1160) *
               C19130) *
              C31184 * C31218 * C1158 +
          (((C13440 * C1164 + C13436 * C1173 + C13441 * C5500 +
             C13437 * C5503) *
                C1160 +
            (C13440 * C1174 + C13436 * C1182 + C13441 * C5502 +
             C13437 * C5506) *
                C31155) *
               C19130 +
           ((C13440 * C5619 + C13436 * C5624 + C13441 * C5980 +
             C13437 * C5981) *
                C1160 +
            (C13440 * C5623 + C13436 * C5628 + C13441 * C5982 +
             C13437 * C5983) *
                C31155) *
               C19131) *
              C31184 * C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1089 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31538 -
            (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
            (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
               C19130 +
           ((C25033 + C25034) * C1089 + (C25035 + C25036) * C31538 -
            (C13864 + C13863) * C1090 - (C13866 + C13865) * C31525 +
            (C13868 + C13867) * C1091 + (C13870 + C13869) * C31497) *
               C19131) *
              C31184 * C1835 +
          (((C13863 + C13864) * C1090 -
            ((C25036 + C25035) * C31538 + (C25034 + C25033) * C1089) +
            (C13865 + C13866) * C31525 - (C13867 + C13868) * C1091 -
            (C13869 + C13870) * C31497) *
               C19130 +
           ((C13872 + C13871) * C1090 -
            ((C25037 + C25038) * C31538 + (C25039 + C25040) * C1089) +
            (C13874 + C13873) * C31525 - (C13876 + C13875) * C1091 -
            (C13878 + C13877) * C31497) *
               C19131) *
              C31184 * C1836 +
          (((C25040 + C25039) * C1089 + (C25038 + C25037) * C31538 -
            (C13871 + C13872) * C1090 - (C13873 + C13874) * C31525 +
            (C13875 + C13876) * C1091 + (C13877 + C13878) * C31497) *
               C19130 +
           ((C13440 * C2017 + C13436 * C2026 + C13441 * C2417 +
             C13437 * C2420) *
                C1089 +
            (C13440 * C2025 + C13436 * C2035 + C13441 * C2421 +
             C13437 * C2426) *
                C31538 -
            (C15952 + C15951) * C1090 - (C15954 + C15953) * C31525 +
            (C13440 * C2015 + C13436 * C2022 + C13441 * C2419 +
             C13437 * C2424) *
                C1091 +
            (C13440 * C2021 + C13436 * C2033 + C13441 * C2425 +
             C13437 * C2428) *
                C31497) *
               C19131) *
              C31184 * C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C19130 +
            ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
               C31184 * C1835 -
           (((C25037 + C25038) * C31155 + (C25039 + C25040) * C1160) * C19131 +
            ((C25036 + C25035) * C31155 + (C25034 + C25033) * C1160) * C19130) *
               C31184 * C1836 +
           (((C25040 + C25039) * C1160 + (C25038 + C25037) * C31155) * C19130 +
            ((C13440 * C2017 + C13436 * C2026 + C13441 * C2417 +
              C13437 * C2420) *
                 C1160 +
             (C13440 * C2025 + C13436 * C2035 + C13441 * C2421 +
              C13437 * C2426) *
                 C31155) *
                C19131) *
               C31184 * C31507) *
              C31541 +
          ((((C25506 + C25505) * C1160 + (C25504 + C25503) * C31155) * C19130 +
            ((C25905 + C25906) * C1160 + (C25907 + C25908) * C31155) * C19131) *
               C31184 * C1836 -
           (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C19130) *
               C31184 * C1835 -
           (((C13441 * C6269 + C13437 * C6275 + C13440 * C2421 +
              C13436 * C2426) *
                 C31155 +
             (C13441 * C6266 + C13437 * C6270 + C13440 * C2417 +
              C13436 * C2420) *
                 C1160) *
                C19131 +
            ((C25908 + C25907) * C31155 + (C25906 + C25905) * C1160) * C19130) *
               C31184 * C31507) *
              C31529 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C19130 +
            ((C25909 + C25910) * C1160 + (C25911 + C25912) * C31155) * C19131) *
               C31184 * C1835 -
           (((C25913 + C25914) * C31155 + (C25915 + C25916) * C1160) * C19131 +
            ((C25912 + C25911) * C31155 + (C25910 + C25909) * C1160) * C19130) *
               C31184 * C1836 +
           (((C25916 + C25915) * C1160 + (C25914 + C25913) * C31155) * C19130 +
            ((C13440 * C6266 + C13436 * C6270 + C13441 * C6628 +
              C13437 * C6629) *
                 C1160 +
             (C13440 * C6269 + C13436 * C6275 + C13441 * C6630 +
              C13437 * C6631) *
                 C31155) *
                C19131) *
               C31184 * C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30284 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31160 -
             (C13475 + C13476) * C30280 - (C13477 + C13478) * C31168 +
             (C13479 + C13480) * C30290 + (C13481 + C13482) * C2901) *
                C19130 +
            ((C25033 + C25034) * C30284 + (C25035 + C25036) * C31160 -
             (C13864 + C13863) * C30280 - (C13866 + C13865) * C31168 +
             (C13868 + C13867) * C30290 + (C13870 + C13869) * C2901) *
                C19131) *
               C31184 * C3298 +
           (((C13863 + C13864) * C30280 -
             ((C25036 + C25035) * C31160 + (C25034 + C25033) * C30284) +
             (C13865 + C13866) * C31168 - (C13867 + C13868) * C30290 -
             (C13869 + C13870) * C2901) *
                C19130 +
            ((C13872 + C13871) * C30280 -
             ((C25037 + C25038) * C31160 + (C25039 + C25040) * C30284) +
             (C13874 + C13873) * C31168 - (C13876 + C13875) * C30290 -
             (C13878 + C13877) * C2901) *
                C19131) *
               C31184 * C31305) *
              C31475 +
          ((((C13669 + C13670) * C30280 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31160 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30284) +
             (C13671 + C13672) * C31168 - (C13673 + C13674) * C30290 -
             (C13675 + C13676) * C2901) *
                C19130 +
            ((C14374 + C14373) * C30280 -
             ((C25503 + C25504) * C31160 + (C25505 + C25506) * C30284) +
             (C14376 + C14375) * C31168 - (C14378 + C14377) * C30290 -
             (C14380 + C14379) * C2901) *
                C19131) *
               C31184 * C3298 +
           (((C25506 + C25505) * C30284 + (C25504 + C25503) * C31160 -
             (C14373 + C14374) * C30280 - (C14375 + C14376) * C31168 +
             (C14377 + C14378) * C30290 + (C14379 + C14380) * C2901) *
                C19130 +
            ((C25905 + C25906) * C30284 + (C25907 + C25908) * C31160 -
             (C15810 + C15809) * C30280 - (C15812 + C15811) * C31168 +
             (C13440 * C1295 + C13436 * C1305 + C13441 * C1303 +
              C13437 * C1320) *
                 C30290 +
             (C13440 * C1304 + C13436 * C1322 + C13441 * C1321 +
              C13437 * C1330) *
                 C2901) *
                C19131) *
               C31184 * C31305) *
              C31265)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C2641 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C2635 -
             (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
                C19130 +
            ((C25033 + C25034) * C2641 + (C25035 + C25036) * C2635 -
             (C13864 + C13863) * C2642 - (C13866 + C13865) * C31165) *
                C19131) *
               C31184 * C31301 +
           (((C13863 + C13864) * C2642 -
             ((C25036 + C25035) * C2635 + (C25034 + C25033) * C2641) +
             (C13865 + C13866) * C31165) *
                C19130 +
            ((C13872 + C13871) * C2642 -
             ((C25037 + C25038) * C2635 + (C25039 + C25040) * C2641) +
             (C13874 + C13873) * C31165) *
                C19131) *
               C31184 * C31308 +
           (((C25040 + C25039) * C2641 + (C25038 + C25037) * C2635 -
             (C13871 + C13872) * C2642 - (C13873 + C13874) * C31165) *
                C19130 +
            ((C26773 + C26774) * C2641 + (C26775 + C26776) * C2635 -
             (C15952 + C15951) * C2642 - (C15954 + C15953) * C31165) *
                C19131) *
               C31184 * C3806) *
              C31475 +
          ((((C13669 + C13670) * C2642 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C2635 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C2641) +
             (C13671 + C13672) * C31165) *
                C19130 +
            ((C14374 + C14373) * C2642 -
             ((C25503 + C25504) * C2635 + (C25505 + C25506) * C2641) +
             (C14376 + C14375) * C31165) *
                C19131) *
               C31184 * C31301 +
           (((C25506 + C25505) * C2641 + (C25504 + C25503) * C2635 -
             (C14373 + C14374) * C2642 - (C14375 + C14376) * C31165) *
                C19130 +
            ((C25905 + C25906) * C2641 + (C25907 + C25908) * C2635 -
             (C15810 + C15809) * C2642 - (C15812 + C15811) * C31165) *
                C19131) *
               C31184 * C31308 +
           (((C15809 + C15810) * C2642 -
             ((C25908 + C25907) * C2635 + (C25906 + C25905) * C2641) +
             (C15811 + C15812) * C31165) *
                C19130 +
            ((C13440 * C2418 + C13436 * C2422 + C13441 * C6526 +
              C13437 * C6527) *
                 C2642 -
             ((C27243 + C27244) * C2635 + (C27245 + C27246) * C2641) +
             (C13440 * C2423 + C13436 * C2427 + C13441 * C6528 +
              C13437 * C6529) *
                 C31165) *
                C19131) *
               C31184 * C3806) *
              C31265)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C2641 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C2635 -
             (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
                C19130 +
            ((C25033 + C25034) * C2641 + (C25035 + C25036) * C2635 -
             (C13864 + C13863) * C2642 - (C13866 + C13865) * C31165) *
                C19131) *
               C31184 * C3298 +
           (((C13863 + C13864) * C2642 -
             ((C25036 + C25035) * C2635 + (C25034 + C25033) * C2641) +
             (C13865 + C13866) * C31165) *
                C19130 +
            ((C13872 + C13871) * C2642 -
             ((C25037 + C25038) * C2635 + (C25039 + C25040) * C2641) +
             (C13874 + C13873) * C31165) *
                C19131) *
               C31184 * C31305) *
              C31541 +
          ((((C13669 + C13670) * C2642 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C2635 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C2641) +
             (C13671 + C13672) * C31165) *
                C19130 +
            ((C14374 + C14373) * C2642 -
             ((C25503 + C25504) * C2635 + (C25505 + C25506) * C2641) +
             (C14376 + C14375) * C31165) *
                C19131) *
               C31184 * C3298 +
           (((C25506 + C25505) * C2641 + (C25504 + C25503) * C2635 -
             (C14373 + C14374) * C2642 - (C14375 + C14376) * C31165) *
                C19130 +
            ((C25905 + C25906) * C2641 + (C25907 + C25908) * C2635 -
             (C15810 + C15809) * C2642 - (C15812 + C15811) * C31165) *
                C19131) *
               C31184 * C31305) *
              C31529 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C2641 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C2635 -
             (C13677 + C13678) * C2642 - (C13679 + C13680) * C31165) *
                C19130 +
            ((C25909 + C25910) * C2641 + (C25911 + C25912) * C2635 -
             (C15100 + C15099) * C2642 - (C15102 + C15101) * C31165) *
                C19131) *
               C31184 * C3298 +
           (((C15099 + C15100) * C2642 -
             ((C25912 + C25911) * C2635 + (C25910 + C25909) * C2641) +
             (C15101 + C15102) * C31165) *
                C19130 +
            ((C13440 * C1302 + C13436 * C1318 + C13441 * C6424 +
              C13437 * C6425) *
                 C2642 -
             ((C25913 + C25914) * C2635 + (C25915 + C25916) * C2641) +
             (C13440 * C1319 + C13436 * C1329 + C13441 * C6426 +
              C13437 * C6427) *
                 C31165) *
                C19131) *
               C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2533 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31547 -
            (C13475 + C13476) * C2534 - (C13477 + C13478) * C31540 +
            (C13479 + C13480) * C2535 + (C13481 + C13482) * C31527 -
            (C13483 + C13484) * C2536 - (C13485 + C13486) * C31508) *
               C19130 +
           ((C25033 + C25034) * C2533 + (C25035 + C25036) * C31547 -
            (C13864 + C13863) * C2534 - (C13866 + C13865) * C31540 +
            (C13868 + C13867) * C2535 + (C13870 + C13869) * C31527 -
            (C14160 + C14159) * C2536 - (C14162 + C14161) * C31508) *
               C19131) *
              C31184 * C3298 +
          (((C13863 + C13864) * C2534 -
            ((C25036 + C25035) * C31547 + (C25034 + C25033) * C2533) +
            (C13865 + C13866) * C31540 - (C13867 + C13868) * C2535 -
            (C13869 + C13870) * C31527 + (C14159 + C14160) * C2536 +
            (C14161 + C14162) * C31508) *
               C19130 +
           ((C13872 + C13871) * C2534 -
            ((C25037 + C25038) * C31547 + (C25039 + C25040) * C2533) +
            (C13874 + C13873) * C31540 - (C13876 + C13875) * C2535 -
            (C13878 + C13877) * C31527 +
            (C13440 * C493 + C13436 * C511 + C13441 * C2185 + C13437 * C2186) *
                C2536 +
            (C13440 * C512 + C13436 * C523 + C13441 * C2187 + C13437 * C2188) *
                C31508) *
               C19131) *
              C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2641 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C2635 -
            (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
               C19130 +
           ((C25033 + C25034) * C2641 + (C25035 + C25036) * C2635 -
            (C13864 + C13863) * C2642 - (C13866 + C13865) * C31165) *
               C19131) *
              C31184 * C31549 +
          (((C13863 + C13864) * C2642 -
            ((C25036 + C25035) * C2635 + (C25034 + C25033) * C2641) +
            (C13865 + C13866) * C31165) *
               C19130 +
           ((C13872 + C13871) * C2642 -
            ((C25037 + C25038) * C2635 + (C25039 + C25040) * C2641) +
            (C13874 + C13873) * C31165) *
               C19131) *
              C31184 * C31546 +
          (((C25040 + C25039) * C2641 + (C25038 + C25037) * C2635 -
            (C13871 + C13872) * C2642 - (C13873 + C13874) * C31165) *
               C19130 +
           ((C26773 + C26774) * C2641 + (C26775 + C26776) * C2635 -
            (C15952 + C15951) * C2642 - (C15954 + C15953) * C31165) *
               C19131) *
              C31184 * C31537 +
          (((C15951 + C15952) * C2642 -
            ((C26776 + C26775) * C2635 + (C26774 + C26773) * C2641) +
            (C15953 + C15954) * C31165) *
               C19130 +
           ((C13440 * C2019 + C13436 * C2029 + C13441 * C10764 +
             C13437 * C10765) *
                C2642 -
            ((C26777 + C26778) * C2635 + (C26779 + C26780) * C2641) +
            (C13440 * C2030 + C13436 * C2037 + C13441 * C10766 +
             C13437 * C10767) *
                C31165) *
               C19131) *
              C31184 * C31520) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C30284 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31160 -
            (C13475 + C13476) * C30280 - (C13477 + C13478) * C31168 +
            (C13479 + C13480) * C30290 + (C13481 + C13482) * C2901) *
               C19130 +
           ((C25033 + C25034) * C30284 + (C25035 + C25036) * C31160 -
            (C13864 + C13863) * C30280 - (C13866 + C13865) * C31168 +
            (C13868 + C13867) * C30290 + (C13870 + C13869) * C2901) *
               C19131) *
              C31184 * C31301 +
          (((C13863 + C13864) * C30280 -
            ((C25036 + C25035) * C31160 + (C25034 + C25033) * C30284) +
            (C13865 + C13866) * C31168 - (C13867 + C13868) * C30290 -
            (C13869 + C13870) * C2901) *
               C19130 +
           ((C13872 + C13871) * C30280 -
            ((C25037 + C25038) * C31160 + (C25039 + C25040) * C30284) +
            (C13874 + C13873) * C31168 - (C13876 + C13875) * C30290 -
            (C13878 + C13877) * C2901) *
               C19131) *
              C31184 * C31308 +
          (((C25040 + C25039) * C30284 + (C25038 + C25037) * C31160 -
            (C13871 + C13872) * C30280 - (C13873 + C13874) * C31168 +
            (C13875 + C13876) * C30290 + (C13877 + C13878) * C2901) *
               C19130 +
           ((C26773 + C26774) * C30284 + (C26775 + C26776) * C31160 -
            (C15952 + C15951) * C30280 - (C15954 + C15953) * C31168 +
            (C13440 * C2015 + C13436 * C2022 + C13441 * C2419 +
             C13437 * C2424) *
                C30290 +
            (C13440 * C2021 + C13436 * C2033 + C13441 * C2425 +
             C13437 * C2428) *
                C2901) *
               C19131) *
              C31184 * C3806) *
         C31206) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C2533 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31547 -
            (C13475 + C13476) * C2534 - (C13477 + C13478) * C31540 +
            (C13479 + C13480) * C2535 + (C13481 + C13482) * C31527 -
            (C13483 + C13484) * C2536 - (C13485 + C13486) * C31508) *
               C19130 +
           ((C25033 + C25034) * C2533 + (C25035 + C25036) * C31547 -
            (C13864 + C13863) * C2534 - (C13866 + C13865) * C31540 +
            (C13868 + C13867) * C2535 + (C13870 + C13869) * C31527 -
            (C14160 + C14159) * C2536 - (C14162 + C14161) * C31508) *
               C19131) *
              C31184 * C3298 +
          (((C13863 + C13864) * C2534 -
            ((C25036 + C25035) * C31547 + (C25034 + C25033) * C2533) +
            (C13865 + C13866) * C31540 - (C13867 + C13868) * C2535 -
            (C13869 + C13870) * C31527 + (C14159 + C14160) * C2536 +
            (C14161 + C14162) * C31508) *
               C19130 +
           ((C13872 + C13871) * C2534 -
            ((C25037 + C25038) * C31547 + (C25039 + C25040) * C2533) +
            (C13874 + C13873) * C31540 - (C13876 + C13875) * C2535 -
            (C13878 + C13877) * C31527 +
            (C13440 * C493 + C13436 * C511 + C13441 * C2185 + C13437 * C2186) *
                C2536 +
            (C13440 * C512 + C13436 * C523 + C13441 * C2187 + C13437 * C2188) *
                C31508) *
               C19131) *
              C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C2641 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C2635 -
             (C13475 + C13476) * C2642 - (C13477 + C13478) * C31165) *
                C19130 +
            ((C25033 + C25034) * C2641 + (C25035 + C25036) * C2635 -
             (C13864 + C13863) * C2642 - (C13866 + C13865) * C31165) *
                C19131) *
               C31184 * C3298 +
           (((C13863 + C13864) * C2642 -
             ((C25036 + C25035) * C2635 + (C25034 + C25033) * C2641) +
             (C13865 + C13866) * C31165) *
                C19130 +
            ((C13872 + C13871) * C2642 -
             ((C25037 + C25038) * C2635 + (C25039 + C25040) * C2641) +
             (C13874 + C13873) * C31165) *
                C19131) *
               C31184 * C31305) *
              C31541 +
          ((((C13669 + C13670) * C2642 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C2635 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C2641) +
             (C13671 + C13672) * C31165) *
                C19130 +
            ((C14374 + C14373) * C2642 -
             ((C25503 + C25504) * C2635 + (C25505 + C25506) * C2641) +
             (C14376 + C14375) * C31165) *
                C19131) *
               C31184 * C3298 +
           (((C25506 + C25505) * C2641 + (C25504 + C25503) * C2635 -
             (C14373 + C14374) * C2642 - (C14375 + C14376) * C31165) *
                C19130 +
            ((C25905 + C25906) * C2641 + (C25907 + C25908) * C2635 -
             (C15810 + C15809) * C2642 - (C15812 + C15811) * C31165) *
                C19131) *
               C31184 * C31305) *
              C31529 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C2641 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C2635 -
             (C13677 + C13678) * C2642 - (C13679 + C13680) * C31165) *
                C19130 +
            ((C25909 + C25910) * C2641 + (C25911 + C25912) * C2635 -
             (C15100 + C15099) * C2642 - (C15102 + C15101) * C31165) *
                C19131) *
               C31184 * C3298 +
           (((C15099 + C15100) * C2642 -
             ((C25912 + C25911) * C2635 + (C25910 + C25909) * C2641) +
             (C15101 + C15102) * C31165) *
                C19130 +
            ((C13440 * C1302 + C13436 * C1318 + C13441 * C6424 +
              C13437 * C6425) *
                 C2642 -
             ((C25913 + C25914) * C2635 + (C25915 + C25916) * C2641) +
             (C13440 * C1319 + C13436 * C1329 + C13441 * C6426 +
              C13437 * C6427) *
                 C31165) *
                C19131) *
               C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C665 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C659 -
            (C13475 + C13476) * C666 - (C13477 + C13478) * C660 +
            (C13479 + C13480) * C667 + (C13481 + C13482) * C661 -
            (C13483 + C13484) * C668 - (C13485 + C13486) * C31508) *
               C19130 +
           ((C25033 + C25034) * C665 + (C25035 + C25036) * C659 -
            (C13864 + C13863) * C666 - (C13866 + C13865) * C660 +
            (C13868 + C13867) * C667 + (C13870 + C13869) * C661 -
            (C14160 + C14159) * C668 - (C14162 + C14161) * C31508) *
               C19131) *
              C31184 * C31218 * C31475 +
          (((C13669 + C13670) * C666 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C659 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C665) +
            (C13671 + C13672) * C660 - (C13673 + C13674) * C667 -
            (C13675 + C13676) * C661 + (C14017 + C14018) * C668 +
            (C14019 + C14020) * C31508) *
               C19130 +
           ((C14374 + C14373) * C666 -
            ((C13441 * C1314 + C13437 * C1327 + C13440 * C941 + C13436 * C950) *
                 C659 +
             (C13441 * C1300 + C13437 * C1315 + C13440 * C935 + C13436 * C940) *
                 C665) +
            (C14376 + C14375) * C660 - (C14378 + C14377) * C667 -
            (C14380 + C14379) * C661 +
            (C13440 * C938 + C13436 * C946 + C13441 * C1599 + C13437 * C1600) *
                C668 +
            (C13440 * C947 + C13436 * C953 + C13441 * C1601 + C13437 * C1602) *
                C31508) *
               C19131) *
              C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C30274 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31457 -
            (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
               C19130 +
           ((C25033 + C25034) * C30274 + (C25035 + C25036) * C31457 -
            (C13864 + C13863) * C30255 - (C13866 + C13865) * C31165) *
               C19131) *
              C31184 * C31218 * C1431 +
          (((C13669 + C13670) * C30255 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31457 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C30274) +
            (C13671 + C13672) * C31165) *
               C19130 +
           ((C14374 + C14373) * C30255 -
            ((C25503 + C25504) * C31457 + (C25505 + C25506) * C30274) +
            (C14376 + C14375) * C31165) *
               C19131) *
              C31184 * C31218 * C1432 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C30274 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31457 -
            (C13677 + C13678) * C30255 - (C13679 + C13680) * C31165) *
               C19130 +
           ((C25909 + C25910) * C30274 + (C25911 + C25912) * C31457 -
            (C15100 + C15099) * C30255 - (C15102 + C15101) * C31165) *
               C19131) *
              C31184 * C31218 * C1433 +
          (((C14893 + C14894) * C30255 -
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C31457 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C30274) +
            (C14895 + C14896) * C31165) *
               C19130 +
           ((C13440 * C1714 + C13436 * C1718 + C13441 * C5878 +
             C13437 * C5879) *
                C30255 -
            ((C13441 * C5623 + C13437 * C5628 + C13440 * C1717 +
              C13436 * C1722) *
                 C31457 +
             (C13441 * C5619 + C13437 * C5624 + C13440 * C1713 +
              C13436 * C1716) *
                 C30274) +
            (C13440 * C1719 + C13436 * C1723 + C13441 * C5880 +
             C13437 * C5881) *
                C31165) *
               C19131) *
              C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C293 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C287 -
             (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
             (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
                C19130 +
            ((C25033 + C25034) * C293 + (C25035 + C25036) * C287 -
             (C13864 + C13863) * C294 - (C13866 + C13865) * C288 +
             (C13868 + C13867) * C295 + (C13870 + C13869) * C31497) *
                C19131) *
               C31184 * C31476 +
           (((C13863 + C13864) * C294 -
             ((C25036 + C25035) * C287 + (C25034 + C25033) * C293) +
             (C13865 + C13866) * C288 - (C13867 + C13868) * C295 -
             (C13869 + C13870) * C31497) *
                C19130 +
            ((C13872 + C13871) * C294 -
             ((C25037 + C25038) * C287 + (C25039 + C25040) * C293) +
             (C13874 + C13873) * C288 - (C13876 + C13875) * C295 -
             (C13878 + C13877) * C31497) *
                C19131) *
               C31184 * C31305) *
              C31475 +
          ((((C13669 + C13670) * C294 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C287 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C293) +
             (C13671 + C13672) * C288 - (C13673 + C13674) * C295 -
             (C13675 + C13676) * C31497) *
                C19130 +
            ((C14374 + C14373) * C294 -
             ((C25503 + C25504) * C287 + (C25505 + C25506) * C293) +
             (C14376 + C14375) * C288 - (C14378 + C14377) * C295 -
             (C14380 + C14379) * C31497) *
                C19131) *
               C31184 * C31476 +
           (((C25506 + C25505) * C293 + (C25504 + C25503) * C287 -
             (C14373 + C14374) * C294 - (C14375 + C14376) * C288 +
             (C14377 + C14378) * C295 + (C14379 + C14380) * C31497) *
                C19130 +
            ((C13440 * C1297 + C13436 * C1309 + C13441 * C1301 +
              C13437 * C1316) *
                 C293 +
             (C13440 * C1308 + C13436 * C1324 + C13441 * C1317 +
              C13437 * C1328) *
                 C287 -
             (C15810 + C15809) * C294 - (C15812 + C15811) * C288 +
             (C13440 * C1295 + C13436 * C1305 + C13441 * C1303 +
              C13437 * C1320) *
                 C295 +
             (C13440 * C1304 + C13436 * C1322 + C13441 * C1321 +
              C13437 * C1330) *
                 C31497) *
                C19131) *
               C31184 * C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C19130 +
            ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
               C31184 * C31476 -
           (((C25037 + C25038) * C31155 + (C25039 + C25040) * C1160) * C19131 +
            ((C25036 + C25035) * C31155 + (C25034 + C25033) * C1160) * C19130) *
               C31184 * C31305) *
              C1431 +
          ((((C25506 + C25505) * C1160 + (C25504 + C25503) * C31155) * C19130 +
            ((C25905 + C25906) * C1160 + (C25907 + C25908) * C31155) * C19131) *
               C31184 * C31305 -
           (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C19130) *
               C31184 * C31476) *
              C1432 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C19130 +
            ((C25909 + C25910) * C1160 + (C25911 + C25912) * C31155) * C19131) *
               C31184 * C31476 -
           (((C25913 + C25914) * C31155 + (C25915 + C25916) * C1160) * C19131 +
            ((C25912 + C25911) * C31155 + (C25910 + C25909) * C1160) * C19130) *
               C31184 * C31305) *
              C1433 +
          ((((C26379 + C26380) * C1160 + (C26381 + C26382) * C31155) * C19130 +
            ((C13440 * C5618 + C13436 * C5622 + C13441 * C5620 +
              C13437 * C5625) *
                 C1160 +
             (C13440 * C5621 + C13436 * C5627 + C13441 * C5626 +
              C13437 * C5629) *
                 C31155) *
                C19131) *
               C31184 * C31305 -
           (((C26382 + C26381) * C31155 + (C26380 + C26379) * C1160) * C19131 +
            ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
              C13436 * C1181) *
                 C31155 +
             (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
              C13436 * C1172) *
                 C1160) *
                C19130) *
               C31184 * C31476) *
              C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C293 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C287 -
            (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
            (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
               C19130 +
           ((C13440 * C486 + C13436 * C497 + C13441 * C935 + C13437 * C940) *
                C293 +
            (C13440 * C496 + C13436 * C515 + C13441 * C941 + C13437 * C950) *
                C287 -
            (C13864 + C13863) * C294 - (C13866 + C13865) * C288 +
            (C13868 + C13867) * C295 + (C13870 + C13869) * C31497) *
               C19131) *
              C31184 * C31218 * C31541 +
          (((C13669 + C13670) * C294 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C287 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C293) +
            (C13671 + C13672) * C288 - (C13673 + C13674) * C295 -
            (C13675 + C13676) * C31497) *
               C19130 +
           ((C14374 + C14373) * C294 -
            ((C13441 * C1314 + C13437 * C1327 + C13440 * C941 + C13436 * C950) *
                 C287 +
             (C13441 * C1300 + C13437 * C1315 + C13440 * C935 + C13436 * C940) *
                 C293) +
            (C14376 + C14375) * C288 - (C14378 + C14377) * C295 -
            (C14380 + C14379) * C31497) *
               C19131) *
              C31184 * C31218 * C31529 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C293 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C287 -
            (C13677 + C13678) * C294 - (C13679 + C13680) * C288 +
            (C13681 + C13682) * C295 + (C13683 + C13684) * C31497) *
               C19130 +
           ((C13440 * C1300 + C13436 * C1315 + C13441 * C1713 +
             C13437 * C1716) *
                C293 +
            (C13440 * C1314 + C13436 * C1327 + C13441 * C1717 +
             C13437 * C1722) *
                C287 -
            (C15100 + C15099) * C294 - (C15102 + C15101) * C288 +
            (C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
             C13437 * C1720) *
                C295 +
            (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
             C13437 * C1724) *
                C31497) *
               C19131) *
              C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
               C114 +
           (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
               C102 -
           (C13475 + C13476) * C115 - (C13477 + C13478) * C103 +
           (C13479 + C13480) * C116 + (C13481 + C13482) * C104 -
           (C13483 + C13484) * C117 - (C13485 + C13486) * C105 +
           (C13487 + C13488) * C118 + (C13489 + C13490) * C106) *
              C19130 +
          ((C13440 * C486 + C13436 * C497 + C13441 * C935 + C13437 * C940) *
               C114 +
           (C13440 * C496 + C13436 * C515 + C13441 * C941 + C13437 * C950) *
               C102 -
           (C13864 + C13863) * C115 - (C13866 + C13865) * C103 +
           (C13868 + C13867) * C116 + (C13870 + C13869) * C104 -
           (C14160 + C14159) * C117 - (C14162 + C14161) * C105 +
           (C13440 * C489 + C13436 * C503 + C13441 * C939 + C13437 * C948) *
               C118 +
           (C13440 * C504 + C13436 * C519 + C13441 * C949 + C13437 * C954) *
               C106) *
              C19131) *
         C31184 * C31218 * C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C293 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C287 -
            (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
            (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
               C19130 +
           ((C25033 + C25034) * C293 + (C25035 + C25036) * C287 -
            (C13864 + C13863) * C294 - (C13866 + C13865) * C288 +
            (C13868 + C13867) * C295 + (C13870 + C13869) * C31497) *
               C19131) *
              C31184 * C31542 +
          (((C13863 + C13864) * C294 -
            ((C25036 + C25035) * C287 + (C25034 + C25033) * C293) +
            (C13865 + C13866) * C288 - (C13867 + C13868) * C295 -
            (C13869 + C13870) * C31497) *
               C19130 +
           ((C13872 + C13871) * C294 -
            ((C25037 + C25038) * C287 + (C25039 + C25040) * C293) +
            (C13874 + C13873) * C288 - (C13876 + C13875) * C295 -
            (C13878 + C13877) * C31497) *
               C19131) *
              C31184 * C31531 +
          (((C25040 + C25039) * C293 + (C25038 + C25037) * C287 -
            (C13871 + C13872) * C294 - (C13873 + C13874) * C288 +
            (C13875 + C13876) * C295 + (C13877 + C13878) * C31497) *
               C19130 +
           ((C13440 * C2017 + C13436 * C2026 + C13441 * C2417 +
             C13437 * C2420) *
                C293 +
            (C13440 * C2025 + C13436 * C2035 + C13441 * C2421 +
             C13437 * C2426) *
                C287 -
            (C15952 + C15951) * C294 - (C15954 + C15953) * C288 +
            (C13440 * C2015 + C13436 * C2022 + C13441 * C2419 +
             C13437 * C2424) *
                C295 +
            (C13440 * C2021 + C13436 * C2033 + C13441 * C2425 +
             C13437 * C2428) *
                C31497) *
               C19131) *
              C31184 * C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1089 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31538 -
            (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
            (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
               C19130 +
           ((C25033 + C25034) * C1089 + (C25035 + C25036) * C31538 -
            (C13864 + C13863) * C1090 - (C13866 + C13865) * C31525 +
            (C13868 + C13867) * C1091 + (C13870 + C13869) * C31497) *
               C19131) *
              C31184 * C31218 * C1086 +
          (((C13669 + C13670) * C1090 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31538 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1089) +
            (C13671 + C13672) * C31525 - (C13673 + C13674) * C1091 -
            (C13675 + C13676) * C31497) *
               C19130 +
           ((C14374 + C14373) * C1090 -
            ((C25503 + C25504) * C31538 + (C25505 + C25506) * C1089) +
            (C14376 + C14375) * C31525 - (C14378 + C14377) * C1091 -
            (C14380 + C14379) * C31497) *
               C19131) *
              C31184 * C31218 * C1087 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1089 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31538 -
            (C13677 + C13678) * C1090 - (C13679 + C13680) * C31525 +
            (C13681 + C13682) * C1091 + (C13683 + C13684) * C31497) *
               C19130 +
           ((C13440 * C1300 + C13436 * C1315 + C13441 * C1713 +
             C13437 * C1716) *
                C1089 +
            (C13440 * C1314 + C13436 * C1327 + C13441 * C1717 +
             C13437 * C1722) *
                C31538 -
            (C15100 + C15099) * C1090 - (C15102 + C15101) * C31525 +
            (C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
             C13437 * C1720) *
                C1091 +
            (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
             C13437 * C1724) *
                C31497) *
               C19131) *
              C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1160 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31155) *
               C19130 +
           ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
              C31184 * C31218 * C1155 -
          (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
           ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                C31155 +
            (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                C1160) *
               C19130) *
              C31184 * C31218 * C1156 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1160 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31155) *
               C19130 +
           ((C13440 * C1300 + C13436 * C1315 + C13441 * C1713 +
             C13437 * C1716) *
                C1160 +
            (C13440 * C1314 + C13436 * C1327 + C13441 * C1717 +
             C13437 * C1722) *
                C31155) *
               C19131) *
              C31184 * C31218 * C1157 -
          (((C13441 * C5623 + C13437 * C5628 + C13440 * C1717 +
             C13436 * C1722) *
                C31155 +
            (C13441 * C5619 + C13437 * C5624 + C13440 * C1713 +
             C13436 * C1716) *
                C1160) *
               C19131 +
           ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
             C13436 * C1181) *
                C31155 +
            (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
             C13436 * C1172) *
                C1160) *
               C19130) *
              C31184 * C31218 * C1158 +
          (((C13440 * C1164 + C13436 * C1173 + C13441 * C5500 +
             C13437 * C5503) *
                C1160 +
            (C13440 * C1174 + C13436 * C1182 + C13441 * C5502 +
             C13437 * C5506) *
                C31155) *
               C19130 +
           ((C13440 * C5619 + C13436 * C5624 + C13441 * C5980 +
             C13437 * C5981) *
                C1160 +
            (C13440 * C5623 + C13436 * C5628 + C13441 * C5982 +
             C13437 * C5983) *
                C31155) *
               C19131) *
              C31184 * C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C1160 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31155) *
                C19130 +
            ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
               C31184 * C31542 -
           (((C25037 + C25038) * C31155 + (C25039 + C25040) * C1160) * C19131 +
            ((C25036 + C25035) * C31155 + (C25034 + C25033) * C1160) * C19130) *
               C31184 * C31531 +
           (((C25040 + C25039) * C1160 + (C25038 + C25037) * C31155) * C19130 +
            ((C13440 * C2017 + C13436 * C2026 + C13441 * C2417 +
              C13437 * C2420) *
                 C1160 +
             (C13440 * C2025 + C13436 * C2035 + C13441 * C2421 +
              C13437 * C2426) *
                 C31155) *
                C19131) *
               C31184 * C31507) *
              C1086 +
          ((((C25506 + C25505) * C1160 + (C25504 + C25503) * C31155) * C19130 +
            ((C25905 + C25906) * C1160 + (C25907 + C25908) * C31155) * C19131) *
               C31184 * C31531 -
           (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31155 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1160) *
                C19130) *
               C31184 * C31542 -
           (((C13441 * C6269 + C13437 * C6275 + C13440 * C2421 +
              C13436 * C2426) *
                 C31155 +
             (C13441 * C6266 + C13437 * C6270 + C13440 * C2417 +
              C13436 * C2420) *
                 C1160) *
                C19131 +
            ((C25908 + C25907) * C31155 + (C25906 + C25905) * C1160) * C19130) *
               C31184 * C31507) *
              C1087 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C1160 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31155) *
                C19130 +
            ((C25909 + C25910) * C1160 + (C25911 + C25912) * C31155) * C19131) *
               C31184 * C31542 -
           (((C25913 + C25914) * C31155 + (C25915 + C25916) * C1160) * C19131 +
            ((C25912 + C25911) * C31155 + (C25910 + C25909) * C1160) * C19130) *
               C31184 * C31531 +
           (((C25916 + C25915) * C1160 + (C25914 + C25913) * C31155) * C19130 +
            ((C13440 * C6266 + C13436 * C6270 + C13441 * C6628 +
              C13437 * C6629) *
                 C1160 +
             (C13440 * C6269 + C13436 * C6275 + C13441 * C6630 +
              C13437 * C6631) *
                 C31155) *
                C19131) *
               C31184 * C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C665 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C659 -
            (C13475 + C13476) * C666 - (C13477 + C13478) * C660 +
            (C13479 + C13480) * C667 + (C13481 + C13482) * C661 -
            (C13483 + C13484) * C668 - (C13485 + C13486) * C31508) *
               C19130 +
           ((C25033 + C25034) * C665 + (C25035 + C25036) * C659 -
            (C13864 + C13863) * C666 - (C13866 + C13865) * C660 +
            (C13868 + C13867) * C667 + (C13870 + C13869) * C661 -
            (C14160 + C14159) * C668 - (C14162 + C14161) * C31508) *
               C19131) *
              C31184 * C31476 +
          (((C13863 + C13864) * C666 -
            ((C25036 + C25035) * C659 + (C25034 + C25033) * C665) +
            (C13865 + C13866) * C660 - (C13867 + C13868) * C667 -
            (C13869 + C13870) * C661 + (C14159 + C14160) * C668 +
            (C14161 + C14162) * C31508) *
               C19130 +
           ((C13872 + C13871) * C666 -
            ((C25037 + C25038) * C659 + (C25039 + C25040) * C665) +
            (C13874 + C13873) * C660 - (C13876 + C13875) * C667 -
            (C13878 + C13877) * C661 +
            (C13440 * C493 + C13436 * C511 + C13441 * C2185 + C13437 * C2186) *
                C668 +
            (C13440 * C512 + C13436 * C523 + C13441 * C2187 + C13437 * C2188) *
                C31508) *
               C19131) *
              C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                 C30274 +
             (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                 C31457 -
             (C13475 + C13476) * C30255 - (C13477 + C13478) * C31165) *
                C19130 +
            ((C25033 + C25034) * C30274 + (C25035 + C25036) * C31457 -
             (C13864 + C13863) * C30255 - (C13866 + C13865) * C31165) *
                C19131) *
               C31184 * C31476 +
           (((C13863 + C13864) * C30255 -
             ((C25036 + C25035) * C31457 + (C25034 + C25033) * C30274) +
             (C13865 + C13866) * C31165) *
                C19130 +
            ((C13872 + C13871) * C30255 -
             ((C25037 + C25038) * C31457 + (C25039 + C25040) * C30274) +
             (C13874 + C13873) * C31165) *
                C19131) *
               C31184 * C31305) *
              C1086 +
          ((((C13669 + C13670) * C30255 -
             ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                  C31457 +
              (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                  C30274) +
             (C13671 + C13672) * C31165) *
                C19130 +
            ((C14374 + C14373) * C30255 -
             ((C25503 + C25504) * C31457 + (C25505 + C25506) * C30274) +
             (C14376 + C14375) * C31165) *
                C19131) *
               C31184 * C31476 +
           (((C25506 + C25505) * C30274 + (C25504 + C25503) * C31457 -
             (C14373 + C14374) * C30255 - (C14375 + C14376) * C31165) *
                C19130 +
            ((C25905 + C25906) * C30274 + (C25907 + C25908) * C31457 -
             (C15810 + C15809) * C30255 - (C15812 + C15811) * C31165) *
                C19131) *
               C31184 * C31305) *
              C1087 +
          ((((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                 C30274 +
             (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                 C31457 -
             (C13677 + C13678) * C30255 - (C13679 + C13680) * C31165) *
                C19130 +
            ((C25909 + C25910) * C30274 + (C25911 + C25912) * C31457 -
             (C15100 + C15099) * C30255 - (C15102 + C15101) * C31165) *
                C19131) *
               C31184 * C31476 +
           (((C15099 + C15100) * C30255 -
             ((C25912 + C25911) * C31457 + (C25910 + C25909) * C30274) +
             (C15101 + C15102) * C31165) *
                C19130 +
            ((C13440 * C1302 + C13436 * C1318 + C13441 * C6424 +
              C13437 * C6425) *
                 C30255 -
             ((C25913 + C25914) * C31457 + (C25915 + C25916) * C30274) +
             (C13440 * C1319 + C13436 * C1329 + C13441 * C6426 +
              C13437 * C6427) *
                 C31165) *
                C19131) *
               C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
               C114 +
           (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
               C102 -
           (C13475 + C13476) * C115 - (C13477 + C13478) * C103 +
           (C13479 + C13480) * C116 + (C13481 + C13482) * C104 -
           (C13483 + C13484) * C117 - (C13485 + C13486) * C105 +
           (C13487 + C13488) * C118 + (C13489 + C13490) * C106) *
              C19130 +
          ((C13440 * C486 + C13436 * C497 + C13441 * C935 + C13437 * C940) *
               C114 +
           (C13440 * C496 + C13436 * C515 + C13441 * C941 + C13437 * C950) *
               C102 -
           (C13864 + C13863) * C115 - (C13866 + C13865) * C103 +
           (C13868 + C13867) * C116 + (C13870 + C13869) * C104 -
           (C14160 + C14159) * C117 - (C14162 + C14161) * C105 +
           (C13440 * C489 + C13436 * C503 + C13441 * C939 + C13437 * C948) *
               C118 +
           (C13440 * C504 + C13436 * C519 + C13441 * C949 + C13437 * C954) *
               C106) *
              C19131) *
         C31184 * C31218 * C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C293 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C287 -
            (C13475 + C13476) * C294 - (C13477 + C13478) * C288 +
            (C13479 + C13480) * C295 + (C13481 + C13482) * C31497) *
               C19130 +
           ((C13440 * C486 + C13436 * C497 + C13441 * C935 + C13437 * C940) *
                C293 +
            (C13440 * C496 + C13436 * C515 + C13441 * C941 + C13437 * C950) *
                C287 -
            (C13864 + C13863) * C294 - (C13866 + C13865) * C288 +
            (C13868 + C13867) * C295 + (C13870 + C13869) * C31497) *
               C19131) *
              C31184 * C31218 * C31541 +
          (((C13669 + C13670) * C294 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C287 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C293) +
            (C13671 + C13672) * C288 - (C13673 + C13674) * C295 -
            (C13675 + C13676) * C31497) *
               C19130 +
           ((C14374 + C14373) * C294 -
            ((C13441 * C1314 + C13437 * C1327 + C13440 * C941 + C13436 * C950) *
                 C287 +
             (C13441 * C1300 + C13437 * C1315 + C13440 * C935 + C13436 * C940) *
                 C293) +
            (C14376 + C14375) * C288 - (C14378 + C14377) * C295 -
            (C14380 + C14379) * C31497) *
               C19131) *
              C31184 * C31218 * C31529 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C293 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C287 -
            (C13677 + C13678) * C294 - (C13679 + C13680) * C288 +
            (C13681 + C13682) * C295 + (C13683 + C13684) * C31497) *
               C19130 +
           ((C13440 * C1300 + C13436 * C1315 + C13441 * C1713 +
             C13437 * C1716) *
                C293 +
            (C13440 * C1314 + C13436 * C1327 + C13441 * C1717 +
             C13437 * C1722) *
                C287 -
            (C15100 + C15099) * C294 - (C15102 + C15101) * C288 +
            (C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
             C13437 * C1720) *
                C295 +
            (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
             C13437 * C1724) *
                C31497) *
               C19131) *
              C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1089 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31538 -
            (C13475 + C13476) * C1090 - (C13477 + C13478) * C31525 +
            (C13479 + C13480) * C1091 + (C13481 + C13482) * C31497) *
               C19130 +
           ((C25033 + C25034) * C1089 + (C25035 + C25036) * C31538 -
            (C13864 + C13863) * C1090 - (C13866 + C13865) * C31525 +
            (C13868 + C13867) * C1091 + (C13870 + C13869) * C31497) *
               C19131) *
              C31184 * C31218 * C1086 +
          (((C13669 + C13670) * C1090 -
            ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                 C31538 +
             (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                 C1089) +
            (C13671 + C13672) * C31525 - (C13673 + C13674) * C1091 -
            (C13675 + C13676) * C31497) *
               C19130 +
           ((C14374 + C14373) * C1090 -
            ((C25503 + C25504) * C31538 + (C25505 + C25506) * C1089) +
            (C14376 + C14375) * C31525 - (C14378 + C14377) * C1091 -
            (C14380 + C14379) * C31497) *
               C19131) *
              C31184 * C31218 * C1087 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1089 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31538 -
            (C13677 + C13678) * C1090 - (C13679 + C13680) * C31525 +
            (C13681 + C13682) * C1091 + (C13683 + C13684) * C31497) *
               C19130 +
           ((C13440 * C1300 + C13436 * C1315 + C13441 * C1713 +
             C13437 * C1716) *
                C1089 +
            (C13440 * C1314 + C13436 * C1327 + C13441 * C1717 +
             C13437 * C1722) *
                C31538 -
            (C15100 + C15099) * C1090 - (C15102 + C15101) * C31525 +
            (C13440 * C1298 + C13436 * C1311 + C13441 * C1715 +
             C13437 * C1720) *
                C1091 +
            (C13440 * C1310 + C13436 * C1325 + C13441 * C1721 +
             C13437 * C1724) *
                C31497) *
               C19131) *
              C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13440 * C119 + C13436 * C126 + C13441 * C297 + C13437 * C308) *
                C1160 +
            (C13440 * C127 + C13436 * C140 + C13441 * C307 + C13437 * C326) *
                C31155) *
               C19130 +
           ((C25033 + C25034) * C1160 + (C25035 + C25036) * C31155) * C19131) *
              C31184 * C31218 * C1155 -
          (((C25503 + C25504) * C31155 + (C25505 + C25506) * C1160) * C19131 +
           ((C13441 * C317 + C13437 * C331 + C13440 * C307 + C13436 * C326) *
                C31155 +
            (C13441 * C301 + C13437 * C316 + C13440 * C297 + C13436 * C308) *
                C1160) *
               C19130) *
              C31184 * C31218 * C1156 +
          (((C13440 * C301 + C13436 * C316 + C13441 * C1163 + C13437 * C1172) *
                C1160 +
            (C13440 * C317 + C13436 * C331 + C13441 * C1171 + C13437 * C1181) *
                C31155) *
               C19130 +
           ((C13440 * C1300 + C13436 * C1315 + C13441 * C1713 +
             C13437 * C1716) *
                C1160 +
            (C13440 * C1314 + C13436 * C1327 + C13441 * C1717 +
             C13437 * C1722) *
                C31155) *
               C19131) *
              C31184 * C31218 * C1157 -
          (((C13441 * C5623 + C13437 * C5628 + C13440 * C1717 +
             C13436 * C1722) *
                C31155 +
            (C13441 * C5619 + C13437 * C5624 + C13440 * C1713 +
             C13436 * C1716) *
                C1160) *
               C19131 +
           ((C13441 * C1174 + C13437 * C1182 + C13440 * C1171 +
             C13436 * C1181) *
                C31155 +
            (C13441 * C1164 + C13437 * C1173 + C13440 * C1163 +
             C13436 * C1172) *
                C1160) *
               C19130) *
              C31184 * C31218 * C1158 +
          (((C13440 * C1164 + C13436 * C1173 + C13441 * C5500 +
             C13437 * C5503) *
                C1160 +
            (C13440 * C1174 + C13436 * C1182 + C13441 * C5502 +
             C13437 * C5506) *
                C31155) *
               C19130 +
           ((C13440 * C5619 + C13436 * C5624 + C13441 * C5980 +
             C13437 * C5981) *
                C1160 +
            (C13440 * C5623 + C13436 * C5628 + C13441 * C5982 +
             C13437 * C5983) *
                C31155) *
               C19131) *
              C31184 * C31218 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[50] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                    C4765 * C301 + C4761 * C316) *
                       C30284 +
                   (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                    C4765 * C317 + C4761 * C331) *
                       C31160 -
                   (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                    C4763 * C120 + C4759 * C128) *
                       C30280 -
                   (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                    C4763 * C129 + C4759 * C141) *
                       C31168 +
                   (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                    C4765 * C303 + C4761 * C320) *
                       C30290 +
                   (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                    C4765 * C321 + C4761 * C333) *
                       C2901) *
                      C31397 * C31184 * C31218 * C31261 +
                  ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                    C4765 * C1162 + C4761 * C1170) *
                       C30280 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C31160 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C30284) +
                   (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                    C4765 * C1169 + C4761 * C1180) *
                       C31168 -
                   (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                    C4760 * C320 + C4763 * C298 + C4759 * C310) *
                       C30290 -
                   (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                    C4760 * C333 + C4763 * C311 + C4759 * C328) *
                       C2901) *
                      C31397 * C31184 * C31218 * C31268 +
                  ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                    C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                       C30284 +
                   (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                    C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                       C31160 -
                   (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                    C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                       C30280 -
                   (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                    C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                       C31168 +
                   (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                    C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                       C30290 +
                   (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                    C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                       C2901) *
                      C31397 * C31184 * C31218 * C2904)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C30284 +
                    (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
                    C169 * C31168 + C170 * C30290 + C171 * C2901) *
                       C31397 * C108 +
                   (C168 * C30284 + C169 * C31160 - C170 * C30280 -
                    C171 * C31168 + C172 * C30290 + C173 * C2901) *
                       C31397 * C109 +
                   (C170 * C30284 + C171 * C31160 - C172 * C30280 -
                    C173 * C31168 + C174 * C30290 + C175 * C2901) *
                       C31397 * C110) *
                      C31218 * C31261 +
                  ((C361 * C30280 -
                    ((C113 * C307 + C31383 * C326) * C31160 +
                     (C113 * C297 + C31383 * C308) * C30284) +
                    C362 * C31168 - C363 * C30290 - C364 * C2901) *
                       C31397 * C108 +
                   (C363 * C30280 - (C362 * C31160 + C361 * C30284) +
                    C364 * C31168 - C365 * C30290 - C366 * C2901) *
                       C31397 * C109 +
                   (C365 * C30280 - (C364 * C31160 + C363 * C30284) +
                    C366 * C31168 - C678 * C30290 - C679 * C2901) *
                       C31397 * C110) *
                      C31218 * C31268 +
                  (((C113 * C301 + C31383 * C316) * C30284 +
                    (C113 * C317 + C31383 * C331) * C31160 - C367 * C30280 -
                    C368 * C31168 + C369 * C30290 + C370 * C2901) *
                       C31397 * C108 +
                   (C367 * C30284 + C368 * C31160 - C369 * C30280 -
                    C370 * C31168 + C371 * C30290 + C372 * C2901) *
                       C31397 * C109 +
                   (C369 * C30284 + C370 * C31160 - C371 * C30280 -
                    C372 * C31168 + (C113 * C305 + C31383 * C324) * C30290 +
                    (C113 * C325 + C31383 * C335) * C2901) *
                       C31397 * C110) *
                      C31218 * C2904)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C30284 +
                    (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
                    C169 * C31168 + C170 * C30290 + C171 * C2901) *
                       C8926 +
                   (C9174 * C30284 + C9175 * C31160 - C550 * C30280 -
                    C551 * C31168 + C552 * C30290 + C553 * C2901) *
                       C8927 +
                   (C9176 * C30284 + C9177 * C31160 - C556 * C30280 -
                    C557 * C31168 + C558 * C30290 + C559 * C2901) *
                       C8928) *
                      C31184 * C31218 * C31261 +
                  ((C361 * C30280 -
                    ((C113 * C307 + C31383 * C326) * C31160 +
                     (C113 * C297 + C31383 * C308) * C30284) +
                    C362 * C31168 - C363 * C30290 - C364 * C2901) *
                       C8926 +
                   (C968 * C30280 - (C9565 * C31160 + C9566 * C30284) +
                    C969 * C31168 - C970 * C30290 - C971 * C2901) *
                       C8927 +
                   (C2198 * C30280 - (C9567 * C31160 + C9568 * C30284) +
                    C2199 * C31168 - C2200 * C30290 - C2201 * C2901) *
                       C8928) *
                      C31184 * C31218 * C31268 +
                  (((C113 * C301 + C31383 * C316) * C30284 +
                    (C113 * C317 + C31383 * C331) * C31160 - C367 * C30280 -
                    C368 * C31168 + C369 * C30290 + C370 * C2901) *
                       C8926 +
                   (C9885 * C30284 + C9886 * C31160 - C1612 * C30280 -
                    C1613 * C31168 + C1614 * C30290 + C1615 * C2901) *
                       C8927 +
                   (C9887 * C30284 + C9888 * C31160 - C10170 * C30280 -
                    C10171 * C31168 + (C113 * C1303 + C31383 * C1320) * C30290 +
                    (C113 * C1321 + C31383 * C1330) * C2901) *
                       C8928) *
                      C31184 * C31218 * C2904)) /
                    (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C2641 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C2635 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C2642 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C2642 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C2635 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C2641) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31261 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C2642 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C2635 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C2641) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C2641 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C2635 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C2642 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31268 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C2641 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C2635 -
            (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
             C4763 * C302 + C4759 * C318) *
                C2642 -
            (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
             C4763 * C319 + C4759 * C332) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C1299 + C4759 * C1313 + C4764 * C1714 + C4760 * C1718 +
             C4765 * C5878 + C4761 * C5879) *
                C2642 -
            ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
              C4763 * C1314 + C4759 * C1327) *
                 C2635 +
             (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
              C4763 * C1300 + C4759 * C1315) *
                 C2641) +
            (C4763 * C1312 + C4759 * C1326 + C4764 * C1719 + C4760 * C1723 +
             C4765 * C5880 + C4761 * C5881) *
                C31165) *
               C31397 * C31184 * C31305) *
              C2904)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
                C31397 * C110) *
               C31476 +
           ((C550 * C2642 -
             ((C113 * C496 + C31383 * C515) * C2635 +
              (C113 * C486 + C31383 * C497) * C2641) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31165) *
                C31397 * C110) *
               C31305) *
              C31261 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
                C31397 * C110) *
               C31476 +
           (((C113 * C935 + C31383 * C940) * C2641 +
             (C113 * C941 + C31383 * C950) * C2635 - C968 * C2642 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31165) *
                C31397 * C110) *
               C31305) *
              C31268 +
          ((((C113 * C301 + C31383 * C316) * C2641 +
             (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
             C368 * C31165) *
                C31397 * C108 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
                C31397 * C109 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31165) *
                C31397 * C110) *
               C31476 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C31383 * C1327) * C2635 +
              (C113 * C1300 + C31383 * C1315) * C2641) +
             C1613 * C31165) *
                C31397 * C108 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C31165) *
                C31397 * C109 +
            ((C113 * C1599 + C31383 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C31383 * C1602) * C31165) *
                C31397 * C110) *
               C31305) *
              C2904)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C8926 +
            (C11357 + C11358 - C11359 - C11360) * C8927 + C11385 * C8928) *
               C31184 * C31476 +
           ((C11359 - (C11358 + C11357) + C11360) * C8926 +
            (C11363 - (C11362 + C11361) + C11364) * C8927 +
            (C11365 - (C11366 + C11367) + C11368) * C8928) *
               C31184 * C31305) *
              C31261 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C8926 +
            (C11369 - (C11370 + C11371) + C11372) * C8927 + C11386 * C8928) *
               C31184 * C31476 +
           ((C11371 + C11370 - C11369 - C11372) * C8926 +
            (C11375 + C11374 - C11373 - C11376) * C8927 +
            (C11377 + C11378 - C11379 - C11380) * C8928) *
               C31184 * C31305) *
              C31268 +
          ((((C113 * C301 + C31383 * C316) * C2641 +
             (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
             C368 * C31165) *
                C8926 +
            (C11813 + C11814 - C11815 - C11816) * C8927 +
            (C11817 + C11818 - C11819 - C11820) * C8928) *
               C31184 * C31476 +
           ((C11815 - (C11814 + C11813) + C11816) * C8926 +
            (C11819 - (C11818 + C11817) + C11820) * C8927 +
            ((C113 * C6526 + C31383 * C6527) * C2642 -
             (C9889 * C2635 + C9890 * C2641) +
             (C113 * C6528 + C31383 * C6529) * C31165) *
                C8928) *
               C31184 * C31305) *
              C2904)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31383 * C126) * C2533 +
                (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
                C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
                C173 * C31508) *
                   C31397 * C108 +
               (C168 * C2533 + C169 * C31547 - C170 * C2534 - C171 * C31540 +
                C172 * C2535 + C173 * C31527 - C174 * C2536 - C175 * C31508) *
                   C31397 * C109 +
               (C170 * C2533 + C171 * C31547 - C172 * C2534 - C173 * C31540 +
                C174 * C2535 + C175 * C31527 - C176 * C2536 - C177 * C31508) *
                   C31397 * C110) *
                  C31218 * C2531 +
              ((C361 * C2534 -
                ((C113 * C307 + C31383 * C326) * C31547 +
                 (C113 * C297 + C31383 * C308) * C2533) +
                C362 * C31540 - C363 * C2535 - C364 * C31527 + C365 * C2536 +
                C366 * C31508) *
                   C31397 * C108 +
               (C363 * C2534 - (C362 * C31547 + C361 * C2533) + C364 * C31540 -
                C365 * C2535 - C366 * C31527 + C678 * C2536 + C679 * C31508) *
                   C31397 * C109 +
               (C365 * C2534 - (C364 * C31547 + C363 * C2533) + C366 * C31540 -
                C678 * C2535 - C679 * C31527 +
                (C113 * C669 + C31383 * C670) * C2536 +
                (C113 * C671 + C31383 * C672) * C31508) *
                   C31397 * C110) *
                  C31218 * C31265) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31383 * C126) * C2641 +
                (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
                C169 * C31165) *
                   C31397 * C108 +
               (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                   C31397 * C109 +
               (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
                   C31397 * C110) *
                  C31218 * C31548 +
              ((C361 * C2642 -
                ((C113 * C307 + C31383 * C326) * C2635 +
                 (C113 * C297 + C31383 * C308) * C2641) +
                C362 * C31165) *
                   C31397 * C108 +
               (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                   C31397 * C109 +
               (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
                   C31397 * C110) *
                  C31218 * C31544 +
              (((C113 * C301 + C31383 * C316) * C2641 +
                (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
                C368 * C31165) *
                   C31397 * C108 +
               (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
                   C31397 * C109 +
               (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31165) *
                   C31397 * C110) *
                  C31218 * C31534 +
              ((C1450 * C2642 -
                ((C113 * C1171 + C31383 * C1181) * C2635 +
                 (C113 * C1163 + C31383 * C1172) * C2641) +
                C1451 * C31165) *
                   C31397 * C108 +
               (C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) +
                C1453 * C31165) *
                   C31397 * C109 +
               ((C113 * C1437 + C31383 * C1438) * C2642 -
                (C1453 * C2635 + C1452 * C2641) +
                (C113 * C1439 + C31383 * C1440) * C31165) *
                   C31397 * C110) *
                  C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
                C31397 * C110) *
               C31542 +
           ((C550 * C2642 -
             ((C113 * C496 + C31383 * C515) * C2635 +
              (C113 * C486 + C31383 * C497) * C2641) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31165) *
                C31397 * C110) *
               C31531 +
           (((C113 * C490 + C31383 * C505) * C2641 +
             (C113 * C506 + C31383 * C520) * C2635 - C556 * C2642 -
             C557 * C31165) *
                C31397 * C108 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31165) *
                C31397 * C109 +
            (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C31165) *
                C31397 * C110) *
               C31507) *
              C2531 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
                C31397 * C110) *
               C31542 +
           (((C113 * C935 + C31383 * C940) * C2641 +
             (C113 * C941 + C31383 * C950) * C2635 - C968 * C2642 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31165) *
                C31397 * C110) *
               C31531 +
           ((C2198 * C2642 -
             ((C113 * C1308 + C31383 * C1324) * C2635 +
              (C113 * C1297 + C31383 * C1309) * C2641) +
             C2199 * C31165) *
                C31397 * C108 +
            (C2200 * C2642 - (C2199 * C2635 + C2198 * C2641) + C2201 * C31165) *
                C31397 * C109 +
            ((C113 * C2185 + C31383 * C2186) * C2642 -
             (C2201 * C2635 + C2200 * C2641) +
             (C113 * C2187 + C31383 * C2188) * C31165) *
                C31397 * C110) *
               C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2533 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31547 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2534 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31540 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C2535 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31527 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C2536 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C31218 * C2531 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C2534 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31547 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C2533) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31540 -
           (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
            C4763 * C298 + C4759 * C310) *
               C2535 -
           (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
            C4763 * C311 + C4759 * C328) *
               C31527 +
           (C4763 * C299 + C4759 * C312 + C4764 * C304 + C4760 * C322 +
            C4765 * C1437 + C4761 * C1438) *
               C2536 +
           (C4763 * C313 + C4759 * C329 + C4764 * C323 + C4760 * C334 +
            C4765 * C1439 + C4761 * C1440) *
               C31508) *
              C31397 * C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2641 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C2635 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2642 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31165) *
              C31397 * C31184 * C31218 * C31548 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C2642 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C2635 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C2641) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31165) *
              C31397 * C31184 * C31218 * C31544 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C2641 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C2635 -
           (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
            C4763 * C302 + C4759 * C318) *
               C2642 -
           (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
            C4763 * C319 + C4759 * C332) *
               C31165) *
              C31397 * C31184 * C31218 * C31534 +
          ((C4763 * C1162 + C4759 * C1170 + C4764 * C1165 + C4760 * C1175 +
            C4765 * C5728 + C4761 * C5729) *
               C2642 -
           ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 + C4760 * C1182 +
             C4763 * C1171 + C4759 * C1181) *
                C2635 +
            (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 + C4760 * C1173 +
             C4763 * C1163 + C4759 * C1172) *
                C2641) +
           (C4763 * C1169 + C4759 * C1180 + C4764 * C1176 + C4760 * C1183 +
            C4765 * C5730 + C4761 * C5731) *
               C31165) *
              C31397 * C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C2641 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C2635 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C2642 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C31542 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C2642 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C2635 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C2641) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31531 +
           ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
             C4765 * C1301 + C4761 * C1316) *
                C2641 +
            (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
             C4765 * C1317 + C4761 * C1328) *
                C2635 -
            (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
             C4763 * C491 + C4759 * C507) *
                C2642 -
            (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
             C4763 * C508 + C4759 * C521) *
                C31165) *
               C31397 * C31184 * C31507) *
              C2531 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C2642 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C2635 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C2641) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C31542 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C2641 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C2635 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C2642 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31531 +
           ((C4763 * C1296 + C4759 * C1307 + C4764 * C1302 + C4760 * C1318 +
             C4765 * C6424 + C4761 * C6425) *
                C2642 -
            ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 + C4760 * C1328 +
              C4763 * C1308 + C4759 * C1324) *
                 C2635 +
             (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 + C4760 * C1316 +
              C4763 * C1297 + C4759 * C1309) *
                 C2641) +
            (C4763 * C1306 + C4759 * C1323 + C4764 * C1319 + C4760 * C1329 +
             C4765 * C6426 + C4761 * C6427) *
                C31165) *
               C31397 * C31184 * C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2533 +
            (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
            C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
            C173 * C31508) *
               C8926 +
           (C9174 * C2533 + C9175 * C31547 - C550 * C2534 - C551 * C31540 +
            C552 * C2535 + C553 * C31527 - C554 * C2536 - C555 * C31508) *
               C8927 +
           (C9176 * C2533 + C9177 * C31547 - C556 * C2534 - C557 * C31540 +
            C558 * C2535 + C559 * C31527 - C560 * C2536 - C561 * C31508) *
               C8928) *
              C31184 * C31218 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C31383 * C326) * C31547 +
             (C113 * C297 + C31383 * C308) * C2533) +
            C362 * C31540 - C363 * C2535 - C364 * C31527 + C365 * C2536 +
            C366 * C31508) *
               C8926 +
           (C968 * C2534 - (C9565 * C31547 + C9566 * C2533) + C969 * C31540 -
            C970 * C2535 - C971 * C31527 + C972 * C2536 + C973 * C31508) *
               C8927 +
           (C2198 * C2534 - (C9567 * C31547 + C9568 * C2533) + C2199 * C31540 -
            C2200 * C2535 - C2201 * C31527 +
            (C113 * C2185 + C31383 * C2186) * C2536 +
            (C113 * C2187 + C31383 * C2188) * C31508) *
               C8928) *
              C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2641 +
            (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
            C169 * C31165) *
               C8926 +
           (C9174 * C2641 + C9175 * C2635 - C550 * C2642 - C551 * C31165) *
               C8927 +
           (C9176 * C2641 + C9177 * C2635 - C556 * C2642 - C557 * C31165) *
               C8928) *
              C31184 * C31218 * C31548 +
          ((C361 * C2642 -
            ((C113 * C307 + C31383 * C326) * C2635 +
             (C113 * C297 + C31383 * C308) * C2641) +
            C362 * C31165) *
               C8926 +
           (C968 * C2642 - (C9565 * C2635 + C9566 * C2641) + C969 * C31165) *
               C8927 +
           (C2198 * C2642 - (C9567 * C2635 + C9568 * C2641) + C2199 * C31165) *
               C8928) *
              C31184 * C31218 * C31544 +
          (((C113 * C301 + C31383 * C316) * C2641 +
            (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
            C368 * C31165) *
               C8926 +
           (C9885 * C2641 + C9886 * C2635 - C1612 * C2642 - C1613 * C31165) *
               C8927 +
           (C9887 * C2641 + C9888 * C2635 - C10170 * C2642 - C10171 * C31165) *
               C8928) *
              C31184 * C31218 * C31534 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C31383 * C1181) * C2635 +
             (C113 * C1163 + C31383 * C1172) * C2641) +
            C1451 * C31165) *
               C8926 +
           ((C113 * C1714 + C31383 * C1718) * C2642 -
            (C10281 * C2635 + C10280 * C2641) +
            (C113 * C1719 + C31383 * C1723) * C31165) *
               C8927 +
           ((C113 * C6424 + C31383 * C6425) * C2642 -
            (C10283 * C2635 + C10282 * C2641) +
            (C113 * C6426 + C31383 * C6427) * C31165) *
               C8928) *
              C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C8926 +
            (C11357 + C11358 - C11359 - C11360) * C8927 + C11385 * C8928) *
               C31184 * C31542 +
           ((C11359 - (C11358 + C11357) + C11360) * C8926 +
            (C11363 - (C11362 + C11361) + C11364) * C8927 +
            (C11365 - (C11366 + C11367) + C11368) * C8928) *
               C31184 * C31531 +
           (C11385 * C8926 + (C11367 + C11366 - C11365 - C11368) * C8927 +
            (C10610 * C2641 + C10611 * C2635 - C10899 * C2642 -
             C10900 * C31165) *
                C8928) *
               C31184 * C31507) *
              C2531 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C8926 +
            (C11369 - (C11370 + C11371) + C11372) * C8927 + C11386 * C8928) *
               C31184 * C31542 +
           ((C11371 + C11370 - C11369 - C11372) * C8926 +
            (C11375 + C11374 - C11373 - C11376) * C8927 +
            (C11377 + C11378 - C11379 - C11380) * C8928) *
               C31184 * C31531 +
           (C11386 * C8926 + (C11379 - (C11378 + C11377) + C11380) * C8927 +
            ((C113 * C10764 + C31383 * C10765) * C2642 -
             (C11011 * C2635 + C11012 * C2641) +
             (C113 * C10766 + C31383 * C10767) * C31165) *
                C8928) *
               C31184 * C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C30284 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31160 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C30280 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31168 +
            (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
             C4765 * C303 + C4761 * C320) *
                C30290 +
            (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
             C4765 * C321 + C4761 * C333) *
                C2901) *
               C31397 * C31184 * C31476 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C30280 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31160 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C30284) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31168 -
            (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
             C4763 * C487 + C4759 * C499) *
                C30290 -
            (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
             C4763 * C500 + C4759 * C517) *
                C2901) *
               C31397 * C31184 * C31305) *
              C2531 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C30280 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31160 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C30284) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31168 -
            (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
             C4763 * C298 + C4759 * C310) *
                C30290 -
            (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
             C4763 * C311 + C4759 * C328) *
                C2901) *
               C31397 * C31184 * C31476 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C30284 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31160 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C30280 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31168 +
            (C4763 * C937 + C4759 * C944 + C4764 * C1298 + C4760 * C1311 +
             C4765 * C1715 + C4761 * C1720) *
                C30290 +
            (C4763 * C945 + C4759 * C952 + C4764 * C1310 + C4760 * C1325 +
             C4765 * C1721 + C4761 * C1724) *
                C2901) *
               C31397 * C31184 * C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30284 +
             (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
             C169 * C31168 + C170 * C30290 + C171 * C2901) *
                C31397 * C108 +
            (C168 * C30284 + C169 * C31160 - C170 * C30280 - C171 * C31168 +
             C172 * C30290 + C173 * C2901) *
                C31397 * C109 +
            (C170 * C30284 + C171 * C31160 - C172 * C30280 - C173 * C31168 +
             C174 * C30290 + C175 * C2901) *
                C31397 * C110) *
               C31476 +
           ((C550 * C30280 -
             ((C113 * C496 + C31383 * C515) * C31160 +
              (C113 * C486 + C31383 * C497) * C30284) +
             C551 * C31168 - C552 * C30290 - C553 * C2901) *
                C31397 * C108 +
            (C552 * C30280 - (C551 * C31160 + C550 * C30284) + C553 * C31168 -
             C554 * C30290 - C555 * C2901) *
                C31397 * C109 +
            (C554 * C30280 - (C553 * C31160 + C552 * C30284) + C555 * C31168 -
             C788 * C30290 - C789 * C2901) *
                C31397 * C110) *
               C31305) *
              C2531 +
          (((C361 * C30280 -
             ((C113 * C307 + C31383 * C326) * C31160 +
              (C113 * C297 + C31383 * C308) * C30284) +
             C362 * C31168 - C363 * C30290 - C364 * C2901) *
                C31397 * C108 +
            (C363 * C30280 - (C362 * C31160 + C361 * C30284) + C364 * C31168 -
             C365 * C30290 - C366 * C2901) *
                C31397 * C109 +
            (C365 * C30280 - (C364 * C31160 + C363 * C30284) + C366 * C31168 -
             C678 * C30290 - C679 * C2901) *
                C31397 * C110) *
               C31476 +
           (((C113 * C935 + C31383 * C940) * C30284 +
             (C113 * C941 + C31383 * C950) * C31160 - C968 * C30280 -
             C969 * C31168 + C970 * C30290 + C971 * C2901) *
                C31397 * C108 +
            (C968 * C30284 + C969 * C31160 - C970 * C30280 - C971 * C31168 +
             C972 * C30290 + C973 * C2901) *
                C31397 * C109 +
            (C970 * C30284 + C971 * C31160 - C972 * C30280 - C973 * C31168 +
             (C113 * C939 + C31383 * C948) * C30290 +
             (C113 * C949 + C31383 * C954) * C2901) *
                C31397 * C110) *
               C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30284 +
             (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
             C169 * C31168 + C170 * C30290 + C171 * C2901) *
                C8926 +
            (C11643 + C11644 - C11645 - C11646 + C11647 + C11648) * C8927 +
            (C11649 + C11650 - C11651 - C11652 + C11653 + C11654) * C8928) *
               C31184 * C31476 +
           ((C11645 - (C11644 + C11643) + C11646 - C11647 - C11648) * C8926 +
            (C11651 - (C11650 + C11649) + C11652 - C11653 - C11654) * C8927 +
            (C2316 * C30280 - (C9178 * C31160 + C9179 * C30284) +
             C2317 * C31168 - C2318 * C30290 - C2319 * C2901) *
                C8928) *
               C31184 * C31305) *
              C2531 +
          (((C361 * C30280 -
             ((C113 * C307 + C31383 * C326) * C31160 +
              (C113 * C297 + C31383 * C308) * C30284) +
             C362 * C31168 - C363 * C30290 - C364 * C2901) *
                C8926 +
            (C11655 - (C11656 + C11657) + C11658 - C11659 - C11660) * C8927 +
            (C11661 - (C11662 + C11663) + C11664 - C11665 - C11666) * C8928) *
               C31184 * C31476 +
           ((C11657 + C11656 - C11655 - C11658 + C11659 + C11660) * C8926 +
            (C11663 + C11662 - C11661 - C11664 + C11665 + C11666) * C8927 +
            (C9882 * C30284 + C9883 * C31160 - C10783 * C30280 -
             C10784 * C31168 + (C113 * C2419 + C31383 * C2424) * C30290 +
             (C113 * C2425 + C31383 * C2428) * C2901) *
                C8928) *
               C31184 * C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2641 +
            (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
            C169 * C31165) *
               C31397 * C108 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
               C31397 * C109 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
               C31397 * C110) *
              C31218 * C31548 +
          ((C361 * C2642 -
            ((C113 * C307 + C31383 * C326) * C2635 +
             (C113 * C297 + C31383 * C308) * C2641) +
            C362 * C31165) *
               C31397 * C108 +
           (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
               C31397 * C109 +
           (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
               C31397 * C110) *
              C31218 * C31544 +
          (((C113 * C301 + C31383 * C316) * C2641 +
            (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
            C368 * C31165) *
               C31397 * C108 +
           (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
               C31397 * C109 +
           (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31165) *
               C31397 * C110) *
              C31218 * C31534 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C31383 * C1181) * C2635 +
             (C113 * C1163 + C31383 * C1172) * C2641) +
            C1451 * C31165) *
               C31397 * C108 +
           (C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C31165) *
               C31397 * C109 +
           ((C113 * C1437 + C31383 * C1438) * C2642 -
            (C1453 * C2635 + C1452 * C2641) +
            (C113 * C1439 + C31383 * C1440) * C31165) *
               C31397 * C110) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2533 +
            (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
            C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
            C173 * C31508) *
               C31397 * C108 +
           (C168 * C2533 + C169 * C31547 - C170 * C2534 - C171 * C31540 +
            C172 * C2535 + C173 * C31527 - C174 * C2536 - C175 * C31508) *
               C31397 * C109 +
           (C170 * C2533 + C171 * C31547 - C172 * C2534 - C173 * C31540 +
            C174 * C2535 + C175 * C31527 - C176 * C2536 - C177 * C31508) *
               C31397 * C110) *
              C31218 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C31383 * C326) * C31547 +
             (C113 * C297 + C31383 * C308) * C2533) +
            C362 * C31540 - C363 * C2535 - C364 * C31527 + C365 * C2536 +
            C366 * C31508) *
               C31397 * C108 +
           (C363 * C2534 - (C362 * C31547 + C361 * C2533) + C364 * C31540 -
            C365 * C2535 - C366 * C31527 + C678 * C2536 + C679 * C31508) *
               C31397 * C109 +
           (C365 * C2534 - (C364 * C31547 + C363 * C2533) + C366 * C31540 -
            C678 * C2535 - C679 * C31527 +
            (C113 * C669 + C31383 * C670) * C2536 +
            (C113 * C671 + C31383 * C672) * C31508) *
               C31397 * C110) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2533 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31547 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2534 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31540 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C2535 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31527 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C2536 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C31218 * C2531 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C2534 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31547 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C2533) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31540 -
           (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
            C4763 * C298 + C4759 * C310) *
               C2535 -
           (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
            C4763 * C311 + C4759 * C328) *
               C31527 +
           (C4763 * C299 + C4759 * C312 + C4764 * C304 + C4760 * C322 +
            C4765 * C1437 + C4761 * C1438) *
               C2536 +
           (C4763 * C313 + C4759 * C329 + C4764 * C323 + C4760 * C334 +
            C4765 * C1439 + C4761 * C1440) *
               C31508) *
              C31397 * C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2641 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C2635 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2642 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31165) *
              C31397 * C31184 * C31218 * C31548 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C2642 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C2635 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C2641) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31165) *
              C31397 * C31184 * C31218 * C31544 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C2641 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C2635 -
           (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
            C4763 * C302 + C4759 * C318) *
               C2642 -
           (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
            C4763 * C319 + C4759 * C332) *
               C31165) *
              C31397 * C31184 * C31218 * C31534 +
          ((C4763 * C1162 + C4759 * C1170 + C4764 * C1165 + C4760 * C1175 +
            C4765 * C5728 + C4761 * C5729) *
               C2642 -
           ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 + C4760 * C1182 +
             C4763 * C1171 + C4759 * C1181) *
                C2635 +
            (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 + C4760 * C1173 +
             C4763 * C1163 + C4759 * C1172) *
                C2641) +
           (C4763 * C1169 + C4759 * C1180 + C4764 * C1176 + C4760 * C1183 +
            C4765 * C5730 + C4761 * C5731) *
               C31165) *
              C31397 * C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2533 +
            (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
            C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
            C173 * C31508) *
               C8926 +
           (C9174 * C2533 + C9175 * C31547 - C550 * C2534 - C551 * C31540 +
            C552 * C2535 + C553 * C31527 - C554 * C2536 - C555 * C31508) *
               C8927 +
           (C9176 * C2533 + C9177 * C31547 - C556 * C2534 - C557 * C31540 +
            C558 * C2535 + C559 * C31527 - C560 * C2536 - C561 * C31508) *
               C8928) *
              C31184 * C31218 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C31383 * C326) * C31547 +
             (C113 * C297 + C31383 * C308) * C2533) +
            C362 * C31540 - C363 * C2535 - C364 * C31527 + C365 * C2536 +
            C366 * C31508) *
               C8926 +
           (C968 * C2534 - (C9565 * C31547 + C9566 * C2533) + C969 * C31540 -
            C970 * C2535 - C971 * C31527 + C972 * C2536 + C973 * C31508) *
               C8927 +
           (C2198 * C2534 - (C9567 * C31547 + C9568 * C2533) + C2199 * C31540 -
            C2200 * C2535 - C2201 * C31527 +
            (C113 * C2185 + C31383 * C2186) * C2536 +
            (C113 * C2187 + C31383 * C2188) * C31508) *
               C8928) *
              C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2641 +
            (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
            C169 * C31165) *
               C8926 +
           (C9174 * C2641 + C9175 * C2635 - C550 * C2642 - C551 * C31165) *
               C8927 +
           (C9176 * C2641 + C9177 * C2635 - C556 * C2642 - C557 * C31165) *
               C8928) *
              C31184 * C31218 * C31548 +
          ((C361 * C2642 -
            ((C113 * C307 + C31383 * C326) * C2635 +
             (C113 * C297 + C31383 * C308) * C2641) +
            C362 * C31165) *
               C8926 +
           (C968 * C2642 - (C9565 * C2635 + C9566 * C2641) + C969 * C31165) *
               C8927 +
           (C2198 * C2642 - (C9567 * C2635 + C9568 * C2641) + C2199 * C31165) *
               C8928) *
              C31184 * C31218 * C31544 +
          (((C113 * C301 + C31383 * C316) * C2641 +
            (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
            C368 * C31165) *
               C8926 +
           (C9885 * C2641 + C9886 * C2635 - C1612 * C2642 - C1613 * C31165) *
               C8927 +
           (C9887 * C2641 + C9888 * C2635 - C10170 * C2642 - C10171 * C31165) *
               C8928) *
              C31184 * C31218 * C31534 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C31383 * C1181) * C2635 +
             (C113 * C1163 + C31383 * C1172) * C2641) +
            C1451 * C31165) *
               C8926 +
           ((C113 * C1714 + C31383 * C1718) * C2642 -
            (C10281 * C2635 + C10280 * C2641) +
            (C113 * C1719 + C31383 * C1723) * C31165) *
               C8927 +
           ((C113 * C6424 + C31383 * C6425) * C2642 -
            (C10283 * C2635 + C10282 * C2641) +
            (C113 * C6426 + C31383 * C6427) * C31165) *
               C8928) *
              C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C30274 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31457 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C30255 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C30255 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31457 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C30274) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31261 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C30255 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31457 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C30274) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C30274 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31457 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C30255 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31268 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C30274 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C31457 -
            (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
             C4763 * C302 + C4759 * C318) *
                C30255 -
            (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
             C4763 * C319 + C4759 * C332) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C1299 + C4759 * C1313 + C4764 * C1714 + C4760 * C1718 +
             C4765 * C5878 + C4761 * C5879) *
                C30255 -
            ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
              C4763 * C1314 + C4759 * C1327) *
                 C31457 +
             (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
              C4763 * C1300 + C4759 * C1315) *
                 C30274) +
            (C4763 * C1312 + C4759 * C1326 + C4764 * C1719 + C4760 * C1723 +
             C4765 * C5880 + C4761 * C5881) *
                C31165) *
               C31397 * C31184 * C31305) *
              C2904)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
                C31397 * C110) *
               C3298 +
           ((C550 * C30255 -
             ((C113 * C496 + C31383 * C515) * C31457 +
              (C113 * C486 + C31383 * C497) * C30274) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C30255 - (C551 * C31457 + C550 * C30274) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C30255 - (C553 * C31457 + C552 * C30274) + C555 * C31165) *
                C31397 * C110) *
               C31305) *
              C31261 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C30255 - (C364 * C31457 + C363 * C30274) + C366 * C31165) *
                C31397 * C110) *
               C3298 +
           (((C113 * C935 + C31383 * C940) * C30274 +
             (C113 * C941 + C31383 * C950) * C31457 - C968 * C30255 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C30274 + C969 * C31457 - C970 * C30255 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C30274 + C971 * C31457 - C972 * C30255 - C973 * C31165) *
                C31397 * C110) *
               C31305) *
              C31268 +
          ((((C113 * C301 + C31383 * C316) * C30274 +
             (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
             C368 * C31165) *
                C31397 * C108 +
            (C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
                C31397 * C109 +
            (C369 * C30274 + C370 * C31457 - C371 * C30255 - C372 * C31165) *
                C31397 * C110) *
               C3298 +
           ((C1612 * C30255 -
             ((C113 * C1314 + C31383 * C1327) * C31457 +
              (C113 * C1300 + C31383 * C1315) * C30274) +
             C1613 * C31165) *
                C31397 * C108 +
            (C1614 * C30255 - (C1613 * C31457 + C1612 * C30274) +
             C1615 * C31165) *
                C31397 * C109 +
            ((C113 * C1599 + C31383 * C1600) * C30255 -
             (C1615 * C31457 + C1614 * C30274) +
             (C113 * C1601 + C31383 * C1602) * C31165) *
                C31397 * C110) *
               C31305) *
              C2904)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C8926 +
            (C10144 + C10145 - C10146 - C10147) * C8927 + C10785 * C8928) *
               C31184 * C3298 +
           ((C10146 - (C10145 + C10144) + C10147) * C8926 +
            (C10150 - (C10149 + C10148) + C10151) * C8927 + C10901 * C8928) *
               C31184 * C31305) *
              C31261 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C8926 +
            (C10152 - (C10153 + C10154) + C10155) * C8927 + C10786 * C8928) *
               C31184 * C3298 +
           ((C10154 + C10153 - C10152 - C10155) * C8926 +
            (C10158 + C10157 - C10156 - C10159) * C8927 +
            (C10775 + C10776 - C10787 - C10788) * C8928) *
               C31184 * C31305) *
              C31268 +
          ((((C113 * C301 + C31383 * C316) * C30274 +
             (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
             C368 * C31165) *
                C8926 +
            (C10160 + C10161 - C10162 - C10163) * C8927 +
            (C10164 + C10165 - C10172 - C10173) * C8928) *
               C31184 * C3298 +
           ((C10162 - (C10161 + C10160) + C10163) * C8926 +
            (C10172 - (C10165 + C10164) + C10173) * C8927 +
            ((C113 * C6526 + C31383 * C6527) * C30255 -
             (C9889 * C31457 + C9890 * C30274) +
             (C113 * C6528 + C31383 * C6529) * C31165) *
                C8928) *
               C31184 * C31305) *
              C2904)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1160 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31155) *
                       C31397 * C31184 * C31301 -
                   ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                     C4760 * C950 + C4763 * C496 + C4759 * C515) *
                        C31155 +
                    (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                     C4760 * C940 + C4763 * C486 + C4759 * C497) *
                        C1160) *
                       C31397 * C31184 * C31308 +
                   ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                     C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                        C1160 +
                    (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                     C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                        C31155) *
                       C31397 * C31184 * C3806) *
                      C31261 +
                  (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                     C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                        C1160 +
                    (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                     C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                        C31155) *
                       C31397 * C31184 * C31308 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C31155 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C1160) *
                       C31397 * C31184 * C31301 -
                   ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 +
                     C4760 * C1328 + C4763 * C1308 + C4759 * C1324) *
                        C31155 +
                    (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 +
                     C4760 * C1316 + C4763 * C1297 + C4759 * C1309) *
                        C1160) *
                       C31397 * C31184 * C3806) *
                      C31268 +
                  (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C1160 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31155) *
                       C31397 * C31184 * C31301 -
                   ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                     C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                        C31155 +
                    (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                     C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                        C1160) *
                       C31397 * C31184 * C31308 +
                   ((C4763 * C1301 + C4759 * C1316 + C4764 * C5618 +
                     C4760 * C5622 + C4765 * C5620 + C4761 * C5625) *
                        C1160 +
                    (C4763 * C1317 + C4759 * C1328 + C4764 * C5621 +
                     C4760 * C5627 + C4765 * C5626 + C4761 * C5629) *
                        C31155) *
                       C31397 * C31184 * C3806) *
                      C2904)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C31397 * C108 +
                    (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                    (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                       C31301 -
                   ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                    (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                    ((C113 * C496 + C31383 * C515) * C31155 +
                     (C113 * C486 + C31383 * C497) * C1160) *
                        C31397 * C108) *
                       C31308 +
                   (((C113 * C490 + C31383 * C505) * C1160 +
                     (C113 * C506 + C31383 * C520) * C31155) *
                        C31397 * C108 +
                    (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                    (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                       C3806) *
                      C31261 +
                  ((((C113 * C935 + C31383 * C940) * C1160 +
                     (C113 * C941 + C31383 * C950) * C31155) *
                        C31397 * C108 +
                    (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                    (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                       C31308 -
                   ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                    (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C31397 * C108) *
                       C31301 -
                   ((C2201 * C31155 + C2200 * C1160) * C31397 * C110 +
                    (C2199 * C31155 + C2198 * C1160) * C31397 * C109 +
                    ((C113 * C1308 + C31383 * C1324) * C31155 +
                     (C113 * C1297 + C31383 * C1309) * C1160) *
                        C31397 * C108) *
                       C3806) *
                      C31268 +
                  ((((C113 * C301 + C31383 * C316) * C1160 +
                     (C113 * C317 + C31383 * C331) * C31155) *
                        C31397 * C108 +
                    (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                    (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                       C31301 -
                   ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
                    (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
                    ((C113 * C1314 + C31383 * C1327) * C31155 +
                     (C113 * C1300 + C31383 * C1315) * C1160) *
                        C31397 * C108) *
                       C31308 +
                   (((C113 * C1301 + C31383 * C1316) * C1160 +
                     (C113 * C1317 + C31383 * C1328) * C31155) *
                        C31397 * C108 +
                    ((C113 * C1302 + C31383 * C1318) * C1160 +
                     (C113 * C1319 + C31383 * C1329) * C31155) *
                        C31397 * C109 +
                    ((C113 * C1303 + C31383 * C1320) * C1160 +
                     (C113 * C1321 + C31383 * C1330) * C31155) *
                        C31397 * C110) *
                       C3806) *
                      C2904)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C8926 +
                    (C9855 + C9856) * C8927 + C9881 * C8928) *
                       C31184 * C31301 -
                   (C10601 * C8928 + (C9858 + C9857) * C8927 +
                    (C9856 + C9855) * C8926) *
                       C31184 * C31308 +
                   (C9881 * C8926 + (C9860 + C9859) * C8927 + C10618 * C8928) *
                       C31184 * C3806) *
                      C31261 +
                  (((C9861 + C9862) * C8926 + (C9863 + C9864) * C8927 +
                    C11006 * C8928) *
                       C31184 * C31308 -
                   (C9884 * C8928 + (C9862 + C9861) * C8927 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C8926) *
                       C31184 * C31301 -
                   ((C11013 + C11014) * C8928 + (C9892 + C9891) * C8927 +
                    C9884 * C8926) *
                       C31184 * C3806) *
                      C31268 +
                  ((((C113 * C301 + C31383 * C316) * C1160 +
                     (C113 * C317 + C31383 * C331) * C31155) *
                        C8926 +
                    (C9893 + C9894) * C8927 + C9899 * C8928) *
                       C31184 * C31301 -
                   ((C9897 + C9898) * C8928 + (C9896 + C9895) * C8927 +
                    (C9894 + C9893) * C8926) *
                       C31184 * C31308 +
                   (C9899 * C8926 + (C9898 + C9897) * C8927 +
                    ((C113 * C6268 + C31383 * C6272) * C1160 +
                     (C113 * C6274 + C31383 * C6277) * C31155) *
                        C8928) *
                       C31184 * C3806) *
                      C2904)) /
                    (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31383 * C126) * C1089 +
                 (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                 C169 * C31525 + C170 * C1091 + C171 * C31497) *
                    C31397 * C108 +
                (C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
                 C172 * C1091 + C173 * C31497) *
                    C31397 * C109 +
                (C170 * C1089 + C171 * C31538 - C172 * C1090 - C173 * C31525 +
                 C174 * C1091 + C175 * C31497) *
                    C31397 * C110) *
                   C3298 +
               ((C550 * C1090 -
                 ((C113 * C496 + C31383 * C515) * C31538 +
                  (C113 * C486 + C31383 * C497) * C1089) +
                 C551 * C31525 - C552 * C1091 - C553 * C31497) *
                    C31397 * C108 +
                (C552 * C1090 - (C551 * C31538 + C550 * C1089) + C553 * C31525 -
                 C554 * C1091 - C555 * C31497) *
                    C31397 * C109 +
                (C554 * C1090 - (C553 * C31538 + C552 * C1089) + C555 * C31525 -
                 C788 * C1091 - C789 * C31497) *
                    C31397 * C110) *
                   C31305) *
                  C2531 +
              (((C361 * C1090 -
                 ((C113 * C307 + C31383 * C326) * C31538 +
                  (C113 * C297 + C31383 * C308) * C1089) +
                 C362 * C31525 - C363 * C1091 - C364 * C31497) *
                    C31397 * C108 +
                (C363 * C1090 - (C362 * C31538 + C361 * C1089) + C364 * C31525 -
                 C365 * C1091 - C366 * C31497) *
                    C31397 * C109 +
                (C365 * C1090 - (C364 * C31538 + C363 * C1089) + C366 * C31525 -
                 C678 * C1091 - C679 * C31497) *
                    C31397 * C110) *
                   C3298 +
               (((C113 * C935 + C31383 * C940) * C1089 +
                 (C113 * C941 + C31383 * C950) * C31538 - C968 * C1090 -
                 C969 * C31525 + C970 * C1091 + C971 * C31497) *
                    C31397 * C108 +
                (C968 * C1089 + C969 * C31538 - C970 * C1090 - C971 * C31525 +
                 C972 * C1091 + C973 * C31497) *
                    C31397 * C109 +
                (C970 * C1089 + C971 * C31538 - C972 * C1090 - C973 * C31525 +
                 (C113 * C939 + C31383 * C948) * C1091 +
                 (C113 * C949 + C31383 * C954) * C31497) *
                    C31397 * C110) *
                   C31305) *
                  C31265) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31383 * C126) * C1160 +
                 (C113 * C127 + C31383 * C140) * C31155) *
                    C31397 * C108 +
                (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                   C3298 -
               ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                ((C113 * C496 + C31383 * C515) * C31155 +
                 (C113 * C486 + C31383 * C497) * C1160) *
                    C31397 * C108) *
                   C31305) *
                  C31548 +
              ((((C113 * C935 + C31383 * C940) * C1160 +
                 (C113 * C941 + C31383 * C950) * C31155) *
                    C31397 * C108 +
                (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                   C31305 -
               ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                ((C113 * C307 + C31383 * C326) * C31155 +
                 (C113 * C297 + C31383 * C308) * C1160) *
                    C31397 * C108) *
                   C3298) *
                  C31544 +
              ((((C113 * C301 + C31383 * C316) * C1160 +
                 (C113 * C317 + C31383 * C331) * C31155) *
                    C31397 * C108 +
                (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                   C3298 -
               ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
                (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
                ((C113 * C1314 + C31383 * C1327) * C31155 +
                 (C113 * C1300 + C31383 * C1315) * C1160) *
                    C31397 * C108) *
                   C31305) *
                  C31534 +
              ((((C113 * C1713 + C31383 * C1716) * C1160 +
                 (C113 * C1717 + C31383 * C1722) * C31155) *
                    C31397 * C108 +
                ((C113 * C1714 + C31383 * C1718) * C1160 +
                 (C113 * C1719 + C31383 * C1723) * C31155) *
                    C31397 * C109 +
                ((C113 * C1715 + C31383 * C1720) * C1160 +
                 (C113 * C1721 + C31383 * C1724) * C31155) *
                    C31397 * C110) *
                   C31305 -
               ((C1453 * C31155 + C1452 * C1160) * C31397 * C110 +
                (C1451 * C31155 + C1450 * C1160) * C31397 * C109 +
                ((C113 * C1171 + C31383 * C1181) * C31155 +
                 (C113 * C1163 + C31383 * C1172) * C1160) *
                    C31397 * C108) *
                   C3298) *
                  C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C31397 * C108 +
            (C168 * C1160 + C169 * C31155) * C31397 * C109 +
            (C170 * C1160 + C171 * C31155) * C31397 * C110) *
               C31549 -
           ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
            (C551 * C31155 + C550 * C1160) * C31397 * C109 +
            ((C113 * C496 + C31383 * C515) * C31155 +
             (C113 * C486 + C31383 * C497) * C1160) *
                C31397 * C108) *
               C31546 +
           (((C113 * C490 + C31383 * C505) * C1160 +
             (C113 * C506 + C31383 * C520) * C31155) *
                C31397 * C108 +
            (C556 * C1160 + C557 * C31155) * C31397 * C109 +
            (C558 * C1160 + C559 * C31155) * C31397 * C110) *
               C31537 -
           ((C2319 * C31155 + C2318 * C1160) * C31397 * C110 +
            (C2317 * C31155 + C2316 * C1160) * C31397 * C109 +
            ((C113 * C2025 + C31383 * C2035) * C31155 +
             (C113 * C2017 + C31383 * C2026) * C1160) *
                C31397 * C108) *
               C31520) *
              C2531 +
          ((((C113 * C935 + C31383 * C940) * C1160 +
             (C113 * C941 + C31383 * C950) * C31155) *
                C31397 * C108 +
            (C968 * C1160 + C969 * C31155) * C31397 * C109 +
            (C970 * C1160 + C971 * C31155) * C31397 * C110) *
               C31546 -
           ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
            (C362 * C31155 + C361 * C1160) * C31397 * C109 +
            ((C113 * C307 + C31383 * C326) * C31155 +
             (C113 * C297 + C31383 * C308) * C1160) *
                C31397 * C108) *
               C31549 -
           ((C2201 * C31155 + C2200 * C1160) * C31397 * C110 +
            (C2199 * C31155 + C2198 * C1160) * C31397 * C109 +
            ((C113 * C1308 + C31383 * C1324) * C31155 +
             (C113 * C1297 + C31383 * C1309) * C1160) *
                C31397 * C108) *
               C31537 +
           (((C113 * C2417 + C31383 * C2420) * C1160 +
             (C113 * C2421 + C31383 * C2426) * C31155) *
                C31397 * C108 +
            ((C113 * C2418 + C31383 * C2422) * C1160 +
             (C113 * C2423 + C31383 * C2427) * C31155) *
                C31397 * C109 +
            ((C113 * C2419 + C31383 * C2424) * C1160 +
             (C113 * C2425 + C31383 * C2428) * C31155) *
                C31397 * C110) *
               C31520) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C1089 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31538 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C1090 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31525 +
            (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
             C4765 * C303 + C4761 * C320) *
                C1091 +
            (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
             C4765 * C321 + C4761 * C333) *
                C31497) *
               C31397 * C31184 * C3298 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C1090 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31538 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C1089) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31525 -
            (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
             C4763 * C487 + C4759 * C499) *
                C1091 -
            (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
             C4763 * C500 + C4759 * C517) *
                C31497) *
               C31397 * C31184 * C31305) *
              C2531 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C1090 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31538 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C1089) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31525 -
            (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
             C4763 * C298 + C4759 * C310) *
                C1091 -
            (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
             C4763 * C311 + C4759 * C328) *
                C31497) *
               C31397 * C31184 * C3298 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C1089 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31538 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C1090 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31525 +
            (C4763 * C937 + C4759 * C944 + C4764 * C1298 + C4760 * C1311 +
             C4765 * C1715 + C4761 * C1720) *
                C1091 +
            (C4763 * C945 + C4759 * C952 + C4764 * C1310 + C4760 * C1325 +
             C4765 * C1721 + C4761 * C1724) *
                C31497) *
               C31397 * C31184 * C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C1160 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31155) *
               C31397 * C31184 * C3298 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31155 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C1160) *
               C31397 * C31184 * C31305) *
              C31548 +
          (((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C1160 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31155) *
               C31397 * C31184 * C31305 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31155 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C1160) *
               C31397 * C31184 * C3298) *
              C31544 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C1160 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C31155) *
               C31397 * C31184 * C3298 -
           ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
             C4763 * C1314 + C4759 * C1327) *
                C31155 +
            (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
             C4763 * C1300 + C4759 * C1315) *
                C1160) *
               C31397 * C31184 * C31305) *
              C31534 +
          (((C4763 * C1713 + C4759 * C1716 + C4764 * C5619 + C4760 * C5624 +
             C4765 * C5980 + C4761 * C5981) *
                C1160 +
            (C4763 * C1717 + C4759 * C1722 + C4764 * C5623 + C4760 * C5628 +
             C4765 * C5982 + C4761 * C5983) *
                C31155) *
               C31397 * C31184 * C31305 -
           ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 + C4760 * C1182 +
             C4763 * C1171 + C4759 * C1181) *
                C31155 +
            (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 + C4760 * C1173 +
             C4763 * C1163 + C4759 * C1172) *
                C1160) *
               C31397 * C31184 * C3298) *
              C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C1160 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31155) *
               C31397 * C31184 * C31549 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31155 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C1160) *
               C31397 * C31184 * C31546 +
           ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
             C4765 * C1301 + C4761 * C1316) *
                C1160 +
            (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
             C4765 * C1317 + C4761 * C1328) *
                C31155) *
               C31397 * C31184 * C31537 -
           ((C4765 * C6269 + C4761 * C6275 + C4764 * C2421 + C4760 * C2426 +
             C4763 * C2025 + C4759 * C2035) *
                C31155 +
            (C4765 * C6266 + C4761 * C6270 + C4764 * C2417 + C4760 * C2420 +
             C4763 * C2017 + C4759 * C2026) *
                C1160) *
               C31397 * C31184 * C31520) *
              C2531 +
          (((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C1160 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31155) *
               C31397 * C31184 * C31546 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31155 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C1160) *
               C31397 * C31184 * C31549 -
           ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 + C4760 * C1328 +
             C4763 * C1308 + C4759 * C1324) *
                C31155 +
            (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 + C4760 * C1316 +
             C4763 * C1297 + C4759 * C1309) *
                C1160) *
               C31397 * C31184 * C31537 +
           ((C4763 * C2417 + C4759 * C2420 + C4764 * C6266 + C4760 * C6270 +
             C4765 * C6628 + C4761 * C6629) *
                C1160 +
            (C4763 * C2421 + C4759 * C2426 + C4764 * C6269 + C4760 * C6275 +
             C4765 * C6630 + C4761 * C6631) *
                C31155) *
               C31397 * C31184 * C31520) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1089 +
             (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
             C169 * C31525 + C170 * C1091 + C171 * C31497) *
                C8926 +
            (C10398 + C10399 - C10400 - C10401 + C10402 + C10403) * C8927 +
            C10420 * C8928) *
               C31184 * C3298 +
           ((C10400 - (C10399 + C10398) + C10401 - C10402 - C10403) * C8926 +
            (C10406 - (C10405 + C10404) + C10407 - C10408 - C10409) * C8927 +
            (C10410 - (C10411 + C10412) + C10413 - C10414 - C10415) * C8928) *
               C31184 * C31305) *
              C2531 +
          (((C361 * C1090 -
             ((C113 * C307 + C31383 * C326) * C31538 +
              (C113 * C297 + C31383 * C308) * C1089) +
             C362 * C31525 - C363 * C1091 - C364 * C31497) *
                C8926 +
            (C12745 - (C12746 + C12747) + C12748 - C12749 - C12750) * C8927 +
            (C12751 - (C12752 + C12753) + C12754 - C12755 - C12756) * C8928) *
               C31184 * C3298 +
           ((C12747 + C12746 - C12745 - C12748 + C12749 + C12750) * C8926 +
            (C12753 + C12752 - C12751 - C12754 + C12755 + C12756) * C8927 +
            (C9882 * C1089 + C9883 * C31538 - C10783 * C1090 - C10784 * C31525 +
             (C113 * C2419 + C31383 * C2424) * C1091 +
             (C113 * C2425 + C31383 * C2428) * C31497) *
                C8928) *
               C31184 * C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C8926 +
            (C9855 + C9856) * C8927 + C9881 * C8928) *
               C31184 * C3298 -
           (C10601 * C8928 + (C9858 + C9857) * C8927 +
            (C9856 + C9855) * C8926) *
               C31184 * C31305) *
              C31548 +
          (((C9861 + C9862) * C8926 + (C9863 + C9864) * C8927 +
            C11006 * C8928) *
               C31184 * C31305 -
           (C9884 * C8928 + (C9862 + C9861) * C8927 +
            ((C113 * C307 + C31383 * C326) * C31155 +
             (C113 * C297 + C31383 * C308) * C1160) *
                C8926) *
               C31184 * C3298) *
              C31544 +
          ((((C113 * C301 + C31383 * C316) * C1160 +
             (C113 * C317 + C31383 * C331) * C31155) *
                C8926 +
            (C9893 + C9894) * C8927 + C9899 * C8928) *
               C31184 * C3298 -
           ((C9897 + C9898) * C8928 + (C9896 + C9895) * C8927 +
            (C9894 + C9893) * C8926) *
               C31184 * C31305) *
              C31534 +
          (((C10284 + C10285) * C8926 + (C10286 + C10287) * C8927 +
            ((C113 * C6628 + C31383 * C6629) * C1160 +
             (C113 * C6630 + C31383 * C6631) * C31155) *
                C8928) *
               C31184 * C31305 -
           ((C10287 + C10286) * C8928 + (C10285 + C10284) * C8927 +
            ((C113 * C1171 + C31383 * C1181) * C31155 +
             (C113 * C1163 + C31383 * C1172) * C1160) *
                C8926) *
               C31184 * C3298) *
              C31514)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C8926 +
            (C9855 + C9856) * C8927 + C9881 * C8928) *
               C31184 * C31549 -
           (C10601 * C8928 + (C9858 + C9857) * C8927 +
            (C9856 + C9855) * C8926) *
               C31184 * C31546 +
           (C9881 * C8926 + (C9860 + C9859) * C8927 + C10618 * C8928) * C31184 *
               C31537 -
           ((C10616 + C10617) * C8928 + (C10615 + C10614) * C8927 +
            C10601 * C8926) *
               C31184 * C31520) *
              C2531 +
          (((C9861 + C9862) * C8926 + (C9863 + C9864) * C8927 +
            C11006 * C8928) *
               C31184 * C31546 -
           (C9884 * C8928 + (C9862 + C9861) * C8927 +
            ((C113 * C307 + C31383 * C326) * C31155 +
             (C113 * C297 + C31383 * C308) * C1160) *
                C8926) *
               C31184 * C31549 -
           ((C11013 + C11014) * C8928 + (C9892 + C9891) * C8927 +
            C9884 * C8926) *
               C31184 * C31537 +
           (C11006 * C8926 + (C11014 + C11013) * C8927 +
            ((C113 * C11001 + C31383 * C11002) * C1160 +
             (C113 * C11003 + C31383 * C11004) * C31155) *
                C8928) *
               C31184 * C31520) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C30274 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31457 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C30255 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C31301 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C30255 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31457 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C30274) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31308 +
           ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
             C4765 * C1301 + C4761 * C1316) *
                C30274 +
            (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
             C4765 * C1317 + C4761 * C1328) *
                C31457 -
            (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
             C4763 * C491 + C4759 * C507) *
                C30255 -
            (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
             C4763 * C508 + C4759 * C521) *
                C31165) *
               C31397 * C31184 * C3806) *
              C2531 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C30255 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31457 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C30274) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C31301 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C30274 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31457 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C30255 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31308 +
           ((C4763 * C1296 + C4759 * C1307 + C4764 * C1302 + C4760 * C1318 +
             C4765 * C6424 + C4761 * C6425) *
                C30255 -
            ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 + C4760 * C1328 +
              C4763 * C1308 + C4759 * C1324) *
                 C31457 +
             (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 + C4760 * C1316 +
              C4763 * C1297 + C4759 * C1309) *
                 C30274) +
            (C4763 * C1306 + C4759 * C1323 + C4764 * C1319 + C4760 * C1329 +
             C4765 * C6426 + C4761 * C6427) *
                C31165) *
               C31397 * C31184 * C3806) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
                C31397 * C110) *
               C31301 +
           ((C550 * C30255 -
             ((C113 * C496 + C31383 * C515) * C31457 +
              (C113 * C486 + C31383 * C497) * C30274) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C30255 - (C551 * C31457 + C550 * C30274) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C30255 - (C553 * C31457 + C552 * C30274) + C555 * C31165) *
                C31397 * C110) *
               C31308 +
           (((C113 * C490 + C31383 * C505) * C30274 +
             (C113 * C506 + C31383 * C520) * C31457 - C556 * C30255 -
             C557 * C31165) *
                C31397 * C108 +
            (C556 * C30274 + C557 * C31457 - C558 * C30255 - C559 * C31165) *
                C31397 * C109 +
            (C558 * C30274 + C559 * C31457 - C560 * C30255 - C561 * C31165) *
                C31397 * C110) *
               C3806) *
              C2531 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C30255 - (C364 * C31457 + C363 * C30274) + C366 * C31165) *
                C31397 * C110) *
               C31301 +
           (((C113 * C935 + C31383 * C940) * C30274 +
             (C113 * C941 + C31383 * C950) * C31457 - C968 * C30255 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C30274 + C969 * C31457 - C970 * C30255 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C30274 + C971 * C31457 - C972 * C30255 - C973 * C31165) *
                C31397 * C110) *
               C31308 +
           ((C2198 * C30255 -
             ((C113 * C1308 + C31383 * C1324) * C31457 +
              (C113 * C1297 + C31383 * C1309) * C30274) +
             C2199 * C31165) *
                C31397 * C108 +
            (C2200 * C30255 - (C2199 * C31457 + C2198 * C30274) +
             C2201 * C31165) *
                C31397 * C109 +
            ((C113 * C2185 + C31383 * C2186) * C30255 -
             (C2201 * C31457 + C2200 * C30274) +
             (C113 * C2187 + C31383 * C2188) * C31165) *
                C31397 * C110) *
               C3806) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C8926 +
            (C10144 + C10145 - C10146 - C10147) * C8927 + C10785 * C8928) *
               C31184 * C31301 +
           ((C10146 - (C10145 + C10144) + C10147) * C8926 +
            (C10150 - (C10149 + C10148) + C10151) * C8927 + C10901 * C8928) *
               C31184 * C31308 +
           (C10785 * C8926 + (C10772 + C10771 - C10770 - C10773) * C8927 +
            (C10892 + C10893 - C10902 - C10903) * C8928) *
               C31184 * C3806) *
              C2531 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C8926 +
            (C10152 - (C10153 + C10154) + C10155) * C8927 + C10786 * C8928) *
               C31184 * C31301 +
           ((C10154 + C10153 - C10152 - C10155) * C8926 +
            (C10158 + C10157 - C10156 - C10159) * C8927 +
            (C10775 + C10776 - C10787 - C10788) * C8928) *
               C31184 * C31308 +
           (C10786 * C8926 + (C10787 - (C10776 + C10775) + C10788) * C8927 +
            ((C113 * C10764 + C31383 * C10765) * C30255 -
             (C11011 * C31457 + C11012 * C30274) +
             (C113 * C10766 + C31383 * C10767) * C31165) *
                C8928) *
               C31184 * C3806) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C31397 * C108 +
            (C168 * C1160 + C169 * C31155) * C31397 * C109 +
            (C170 * C1160 + C171 * C31155) * C31397 * C110) *
               C3298 -
           ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
            (C551 * C31155 + C550 * C1160) * C31397 * C109 +
            ((C113 * C496 + C31383 * C515) * C31155 +
             (C113 * C486 + C31383 * C497) * C1160) *
                C31397 * C108) *
               C31305) *
              C31548 +
          ((((C113 * C935 + C31383 * C940) * C1160 +
             (C113 * C941 + C31383 * C950) * C31155) *
                C31397 * C108 +
            (C968 * C1160 + C969 * C31155) * C31397 * C109 +
            (C970 * C1160 + C971 * C31155) * C31397 * C110) *
               C31305 -
           ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
            (C362 * C31155 + C361 * C1160) * C31397 * C109 +
            ((C113 * C307 + C31383 * C326) * C31155 +
             (C113 * C297 + C31383 * C308) * C1160) *
                C31397 * C108) *
               C3298) *
              C31544 +
          ((((C113 * C301 + C31383 * C316) * C1160 +
             (C113 * C317 + C31383 * C331) * C31155) *
                C31397 * C108 +
            (C367 * C1160 + C368 * C31155) * C31397 * C109 +
            (C369 * C1160 + C370 * C31155) * C31397 * C110) *
               C3298 -
           ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
            (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
            ((C113 * C1314 + C31383 * C1327) * C31155 +
             (C113 * C1300 + C31383 * C1315) * C1160) *
                C31397 * C108) *
               C31305) *
              C31534 +
          ((((C113 * C1713 + C31383 * C1716) * C1160 +
             (C113 * C1717 + C31383 * C1722) * C31155) *
                C31397 * C108 +
            ((C113 * C1714 + C31383 * C1718) * C1160 +
             (C113 * C1719 + C31383 * C1723) * C31155) *
                C31397 * C109 +
            ((C113 * C1715 + C31383 * C1720) * C1160 +
             (C113 * C1721 + C31383 * C1724) * C31155) *
                C31397 * C110) *
               C31305 -
           ((C1453 * C31155 + C1452 * C1160) * C31397 * C110 +
            (C1451 * C31155 + C1450 * C1160) * C31397 * C109 +
            ((C113 * C1171 + C31383 * C1181) * C31155 +
             (C113 * C1163 + C31383 * C1172) * C1160) *
                C31397 * C108) *
               C3298) *
              C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1089 +
             (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
             C169 * C31525 + C170 * C1091 + C171 * C31497) *
                C31397 * C108 +
            (C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
             C172 * C1091 + C173 * C31497) *
                C31397 * C109 +
            (C170 * C1089 + C171 * C31538 - C172 * C1090 - C173 * C31525 +
             C174 * C1091 + C175 * C31497) *
                C31397 * C110) *
               C3298 +
           ((C550 * C1090 -
             ((C113 * C496 + C31383 * C515) * C31538 +
              (C113 * C486 + C31383 * C497) * C1089) +
             C551 * C31525 - C552 * C1091 - C553 * C31497) *
                C31397 * C108 +
            (C552 * C1090 - (C551 * C31538 + C550 * C1089) + C553 * C31525 -
             C554 * C1091 - C555 * C31497) *
                C31397 * C109 +
            (C554 * C1090 - (C553 * C31538 + C552 * C1089) + C555 * C31525 -
             C788 * C1091 - C789 * C31497) *
                C31397 * C110) *
               C31305) *
              C2531 +
          (((C361 * C1090 -
             ((C113 * C307 + C31383 * C326) * C31538 +
              (C113 * C297 + C31383 * C308) * C1089) +
             C362 * C31525 - C363 * C1091 - C364 * C31497) *
                C31397 * C108 +
            (C363 * C1090 - (C362 * C31538 + C361 * C1089) + C364 * C31525 -
             C365 * C1091 - C366 * C31497) *
                C31397 * C109 +
            (C365 * C1090 - (C364 * C31538 + C363 * C1089) + C366 * C31525 -
             C678 * C1091 - C679 * C31497) *
                C31397 * C110) *
               C3298 +
           (((C113 * C935 + C31383 * C940) * C1089 +
             (C113 * C941 + C31383 * C950) * C31538 - C968 * C1090 -
             C969 * C31525 + C970 * C1091 + C971 * C31497) *
                C31397 * C108 +
            (C968 * C1089 + C969 * C31538 - C970 * C1090 - C971 * C31525 +
             C972 * C1091 + C973 * C31497) *
                C31397 * C109 +
            (C970 * C1089 + C971 * C31538 - C972 * C1090 - C973 * C31525 +
             (C113 * C939 + C31383 * C948) * C1091 +
             (C113 * C949 + C31383 * C954) * C31497) *
                C31397 * C110) *
               C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C1089 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31538 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C1090 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31525 +
            (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
             C4765 * C303 + C4761 * C320) *
                C1091 +
            (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
             C4765 * C321 + C4761 * C333) *
                C31497) *
               C31397 * C31184 * C3298 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C1090 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31538 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C1089) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31525 -
            (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
             C4763 * C487 + C4759 * C499) *
                C1091 -
            (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
             C4763 * C500 + C4759 * C517) *
                C31497) *
               C31397 * C31184 * C31305) *
              C2531 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C1090 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31538 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C1089) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31525 -
            (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
             C4763 * C298 + C4759 * C310) *
                C1091 -
            (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
             C4763 * C311 + C4759 * C328) *
                C31497) *
               C31397 * C31184 * C3298 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C1089 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31538 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C1090 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31525 +
            (C4763 * C937 + C4759 * C944 + C4764 * C1298 + C4760 * C1311 +
             C4765 * C1715 + C4761 * C1720) *
                C1091 +
            (C4763 * C945 + C4759 * C952 + C4764 * C1310 + C4760 * C1325 +
             C4765 * C1721 + C4761 * C1724) *
                C31497) *
               C31397 * C31184 * C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C1160 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31155) *
               C31397 * C31184 * C3298 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31155 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C1160) *
               C31397 * C31184 * C31305) *
              C31548 +
          (((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C1160 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31155) *
               C31397 * C31184 * C31305 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31155 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C1160) *
               C31397 * C31184 * C3298) *
              C31544 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C1160 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C31155) *
               C31397 * C31184 * C3298 -
           ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
             C4763 * C1314 + C4759 * C1327) *
                C31155 +
            (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
             C4763 * C1300 + C4759 * C1315) *
                C1160) *
               C31397 * C31184 * C31305) *
              C31534 +
          (((C4763 * C1713 + C4759 * C1716 + C4764 * C5619 + C4760 * C5624 +
             C4765 * C5980 + C4761 * C5981) *
                C1160 +
            (C4763 * C1717 + C4759 * C1722 + C4764 * C5623 + C4760 * C5628 +
             C4765 * C5982 + C4761 * C5983) *
                C31155) *
               C31397 * C31184 * C31305 -
           ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 + C4760 * C1182 +
             C4763 * C1171 + C4759 * C1181) *
                C31155 +
            (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 + C4760 * C1173 +
             C4763 * C1163 + C4759 * C1172) *
                C1160) *
               C31397 * C31184 * C3298) *
              C31514)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1089 +
             (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
             C169 * C31525 + C170 * C1091 + C171 * C31497) *
                C8926 +
            (C10398 + C10399 - C10400 - C10401 + C10402 + C10403) * C8927 +
            C10420 * C8928) *
               C31184 * C3298 +
           ((C10400 - (C10399 + C10398) + C10401 - C10402 - C10403) * C8926 +
            (C10406 - (C10405 + C10404) + C10407 - C10408 - C10409) * C8927 +
            (C10410 - (C10411 + C10412) + C10413 - C10414 - C10415) * C8928) *
               C31184 * C31305) *
              C2531 +
          (((C361 * C1090 -
             ((C113 * C307 + C31383 * C326) * C31538 +
              (C113 * C297 + C31383 * C308) * C1089) +
             C362 * C31525 - C363 * C1091 - C364 * C31497) *
                C8926 +
            (C12745 - (C12746 + C12747) + C12748 - C12749 - C12750) * C8927 +
            (C12751 - (C12752 + C12753) + C12754 - C12755 - C12756) * C8928) *
               C31184 * C3298 +
           ((C12747 + C12746 - C12745 - C12748 + C12749 + C12750) * C8926 +
            (C12753 + C12752 - C12751 - C12754 + C12755 + C12756) * C8927 +
            (C9882 * C1089 + C9883 * C31538 - C10783 * C1090 - C10784 * C31525 +
             (C113 * C2419 + C31383 * C2424) * C1091 +
             (C113 * C2425 + C31383 * C2428) * C31497) *
                C8928) *
               C31184 * C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C8926 +
            (C9855 + C9856) * C8927 + C9881 * C8928) *
               C31184 * C3298 -
           (C10601 * C8928 + (C9858 + C9857) * C8927 +
            (C9856 + C9855) * C8926) *
               C31184 * C31305) *
              C31548 +
          (((C9861 + C9862) * C8926 + (C9863 + C9864) * C8927 +
            C11006 * C8928) *
               C31184 * C31305 -
           (C9884 * C8928 + (C9862 + C9861) * C8927 +
            ((C113 * C307 + C31383 * C326) * C31155 +
             (C113 * C297 + C31383 * C308) * C1160) *
                C8926) *
               C31184 * C3298) *
              C31544 +
          ((((C113 * C301 + C31383 * C316) * C1160 +
             (C113 * C317 + C31383 * C331) * C31155) *
                C8926 +
            (C9893 + C9894) * C8927 + C9899 * C8928) *
               C31184 * C3298 -
           ((C9897 + C9898) * C8928 + (C9896 + C9895) * C8927 +
            (C9894 + C9893) * C8926) *
               C31184 * C31305) *
              C31534 +
          (((C10284 + C10285) * C8926 + (C10286 + C10287) * C8927 +
            ((C113 * C6628 + C31383 * C6629) * C1160 +
             (C113 * C6630 + C31383 * C6631) * C31155) *
                C8928) *
               C31184 * C31305 -
           ((C10287 + C10286) * C8928 + (C10285 + C10284) * C8927 +
            ((C113 * C1171 + C31383 * C1181) * C31155 +
             (C113 * C1163 + C31383 * C1172) * C1160) *
                C8926) *
               C31184 * C3298) *
              C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31383 * C126) * C665 +
                (C113 * C127 + C31383 * C140) * C659 - C168 * C666 -
                C169 * C660 + C170 * C667 + C171 * C661 - C172 * C668 -
                C173 * C31508) *
                   C31397 * C108 +
               (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
                C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31508) *
                   C31397 * C109 +
               (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
                C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31508) *
                   C31397 * C110) *
                  C31218 * C31475 +
              ((C361 * C666 -
                ((C113 * C307 + C31383 * C326) * C659 +
                 (C113 * C297 + C31383 * C308) * C665) +
                C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
                C366 * C31508) *
                   C31397 * C108 +
               (C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
                C365 * C667 - C366 * C661 + C678 * C668 + C679 * C31508) *
                   C31397 * C109 +
               (C365 * C666 - (C364 * C659 + C363 * C665) + C366 * C660 -
                C678 * C667 - C679 * C661 +
                (C113 * C669 + C31383 * C670) * C668 +
                (C113 * C671 + C31383 * C672) * C31508) *
                   C31397 * C110) *
                  C31218 * C31265) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31383 * C126) * C30274 +
                (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
                C169 * C31165) *
                   C31397 * C108 +
               (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                   C31397 * C109 +
               (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
                   C31397 * C110) *
                  C31218 * C1431 +
              ((C361 * C30255 -
                ((C113 * C307 + C31383 * C326) * C31457 +
                 (C113 * C297 + C31383 * C308) * C30274) +
                C362 * C31165) *
                   C31397 * C108 +
               (C363 * C30255 - (C362 * C31457 + C361 * C30274) +
                C364 * C31165) *
                   C31397 * C109 +
               (C365 * C30255 - (C364 * C31457 + C363 * C30274) +
                C366 * C31165) *
                   C31397 * C110) *
                  C31218 * C1432 +
              (((C113 * C301 + C31383 * C316) * C30274 +
                (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
                C368 * C31165) *
                   C31397 * C108 +
               (C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
                   C31397 * C109 +
               (C369 * C30274 + C370 * C31457 - C371 * C30255 - C372 * C31165) *
                   C31397 * C110) *
                  C31218 * C1433 +
              ((C1450 * C30255 -
                ((C113 * C1171 + C31383 * C1181) * C31457 +
                 (C113 * C1163 + C31383 * C1172) * C30274) +
                C1451 * C31165) *
                   C31397 * C108 +
               (C1452 * C30255 - (C1451 * C31457 + C1450 * C30274) +
                C1453 * C31165) *
                   C31397 * C109 +
               ((C113 * C1437 + C31383 * C1438) * C30255 -
                (C1453 * C31457 + C1452 * C30274) +
                (C113 * C1439 + C31383 * C1440) * C31165) *
                   C31397 * C110) *
                  C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
                C31397 * C110) *
               C1835 +
           ((C550 * C30255 -
             ((C113 * C496 + C31383 * C515) * C31457 +
              (C113 * C486 + C31383 * C497) * C30274) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C30255 - (C551 * C31457 + C550 * C30274) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C30255 - (C553 * C31457 + C552 * C30274) + C555 * C31165) *
                C31397 * C110) *
               C1836 +
           (((C113 * C490 + C31383 * C505) * C30274 +
             (C113 * C506 + C31383 * C520) * C31457 - C556 * C30255 -
             C557 * C31165) *
                C31397 * C108 +
            (C556 * C30274 + C557 * C31457 - C558 * C30255 - C559 * C31165) *
                C31397 * C109 +
            (C558 * C30274 + C559 * C31457 - C560 * C30255 - C561 * C31165) *
                C31397 * C110) *
               C31507) *
              C31475 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C30255 - (C364 * C31457 + C363 * C30274) + C366 * C31165) *
                C31397 * C110) *
               C1835 +
           (((C113 * C935 + C31383 * C940) * C30274 +
             (C113 * C941 + C31383 * C950) * C31457 - C968 * C30255 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C30274 + C969 * C31457 - C970 * C30255 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C30274 + C971 * C31457 - C972 * C30255 - C973 * C31165) *
                C31397 * C110) *
               C1836 +
           ((C2198 * C30255 -
             ((C113 * C1308 + C31383 * C1324) * C31457 +
              (C113 * C1297 + C31383 * C1309) * C30274) +
             C2199 * C31165) *
                C31397 * C108 +
            (C2200 * C30255 - (C2199 * C31457 + C2198 * C30274) +
             C2201 * C31165) *
                C31397 * C109 +
            ((C113 * C2185 + C31383 * C2186) * C30255 -
             (C2201 * C31457 + C2200 * C30274) +
             (C113 * C2187 + C31383 * C2188) * C31165) *
                C31397 * C110) *
               C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C665 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C659 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C666 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C660 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C667 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C661 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C668 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C31218 * C31475 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C666 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C659 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C665) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C660 -
           (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
            C4763 * C298 + C4759 * C310) *
               C667 -
           (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
            C4763 * C311 + C4759 * C328) *
               C661 +
           (C4763 * C299 + C4759 * C312 + C4764 * C304 + C4760 * C322 +
            C4765 * C1437 + C4761 * C1438) *
               C668 +
           (C4763 * C313 + C4759 * C329 + C4764 * C323 + C4760 * C334 +
            C4765 * C1439 + C4761 * C1440) *
               C31508) *
              C31397 * C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C30274 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31457 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C30255 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31165) *
              C31397 * C31184 * C31218 * C1431 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C30255 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31457 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C30274) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31165) *
              C31397 * C31184 * C31218 * C1432 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C30274 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C31457 -
           (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
            C4763 * C302 + C4759 * C318) *
               C30255 -
           (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
            C4763 * C319 + C4759 * C332) *
               C31165) *
              C31397 * C31184 * C31218 * C1433 +
          ((C4763 * C1162 + C4759 * C1170 + C4764 * C1165 + C4760 * C1175 +
            C4765 * C5728 + C4761 * C5729) *
               C30255 -
           ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 + C4760 * C1182 +
             C4763 * C1171 + C4759 * C1181) *
                C31457 +
            (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 + C4760 * C1173 +
             C4763 * C1163 + C4759 * C1172) *
                C30274) +
           (C4763 * C1169 + C4759 * C1180 + C4764 * C1176 + C4760 * C1183 +
            C4765 * C5730 + C4761 * C5731) *
               C31165) *
              C31397 * C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C30274 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31457 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C30255 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C1835 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C30255 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31457 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C30274) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C1836 +
           ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
             C4765 * C1301 + C4761 * C1316) *
                C30274 +
            (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
             C4765 * C1317 + C4761 * C1328) *
                C31457 -
            (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
             C4763 * C491 + C4759 * C507) *
                C30255 -
            (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
             C4763 * C508 + C4759 * C521) *
                C31165) *
               C31397 * C31184 * C31507) *
              C31475 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C30255 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31457 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C30274) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C1835 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C30274 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31457 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C30255 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C1836 +
           ((C4763 * C1296 + C4759 * C1307 + C4764 * C1302 + C4760 * C1318 +
             C4765 * C6424 + C4761 * C6425) *
                C30255 -
            ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 + C4760 * C1328 +
              C4763 * C1308 + C4759 * C1324) *
                 C31457 +
             (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 + C4760 * C1316 +
              C4763 * C1297 + C4759 * C1309) *
                 C30274) +
            (C4763 * C1306 + C4759 * C1323 + C4764 * C1319 + C4760 * C1329 +
             C4765 * C6426 + C4761 * C6427) *
                C31165) *
               C31397 * C31184 * C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C665 +
            (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
               C8926 +
           (C9174 * C665 + C9175 * C659 - C550 * C666 - C551 * C660 +
            C552 * C667 + C553 * C661 - C554 * C668 - C555 * C31508) *
               C8927 +
           (C9176 * C665 + C9177 * C659 - C556 * C666 - C557 * C660 +
            C558 * C667 + C559 * C661 - C560 * C668 - C561 * C31508) *
               C8928) *
              C31184 * C31218 * C31475 +
          ((C361 * C666 -
            ((C113 * C307 + C31383 * C326) * C659 +
             (C113 * C297 + C31383 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C31508) *
               C8926 +
           (C968 * C666 -
            ((C113 * C941 + C31383 * C950) * C659 +
             (C113 * C935 + C31383 * C940) * C665) +
            C969 * C660 - C970 * C667 - C971 * C661 + C972 * C668 +
            C973 * C31508) *
               C8927 +
           (C2198 * C666 -
            ((C113 * C1308 + C31383 * C1324) * C659 +
             (C113 * C1297 + C31383 * C1309) * C665) +
            C2199 * C660 - C2200 * C667 - C2201 * C661 +
            (C113 * C2185 + C31383 * C2186) * C668 +
            (C113 * C2187 + C31383 * C2188) * C31508) *
               C8928) *
              C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C30274 +
            (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
            C169 * C31165) *
               C8926 +
           (C9174 * C30274 + C9175 * C31457 - C550 * C30255 - C551 * C31165) *
               C8927 +
           (C9176 * C30274 + C9177 * C31457 - C556 * C30255 - C557 * C31165) *
               C8928) *
              C31184 * C31218 * C1431 +
          ((C361 * C30255 -
            ((C113 * C307 + C31383 * C326) * C31457 +
             (C113 * C297 + C31383 * C308) * C30274) +
            C362 * C31165) *
               C8926 +
           (C968 * C30255 - (C9565 * C31457 + C9566 * C30274) + C969 * C31165) *
               C8927 +
           (C2198 * C30255 - (C9567 * C31457 + C9568 * C30274) +
            C2199 * C31165) *
               C8928) *
              C31184 * C31218 * C1432 +
          (((C113 * C301 + C31383 * C316) * C30274 +
            (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
            C368 * C31165) *
               C8926 +
           (C9885 * C30274 + C9886 * C31457 - C1612 * C30255 - C1613 * C31165) *
               C8927 +
           (C9887 * C30274 + C9888 * C31457 -
            (C113 * C1302 + C31383 * C1318) * C30255 -
            (C113 * C1319 + C31383 * C1329) * C31165) *
               C8928) *
              C31184 * C31218 * C1433 +
          ((C1450 * C30255 -
            ((C113 * C1171 + C31383 * C1181) * C31457 +
             (C113 * C1163 + C31383 * C1172) * C30274) +
            C1451 * C31165) *
               C8926 +
           ((C113 * C1714 + C31383 * C1718) * C30255 -
            ((C113 * C1717 + C31383 * C1722) * C31457 +
             (C113 * C1713 + C31383 * C1716) * C30274) +
            (C113 * C1719 + C31383 * C1723) * C31165) *
               C8927 +
           ((C113 * C6424 + C31383 * C6425) * C30255 -
            ((C113 * C5621 + C31383 * C5627) * C31457 +
             (C113 * C5618 + C31383 * C5622) * C30274) +
            (C113 * C6426 + C31383 * C6427) * C31165) *
               C8928) *
              C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C8926 +
            (C10144 + C10145 - C10146 - C10147) * C8927 + C10785 * C8928) *
               C31184 * C1835 +
           ((C10146 - (C10145 + C10144) + C10147) * C8926 +
            (C10150 - (C10149 + C10148) + C10151) * C8927 +
            (C10770 - (C10771 + C10772) + C10773) * C8928) *
               C31184 * C1836 +
           (C10785 * C8926 + (C10772 + C10771 - C10770 - C10773) * C8927 +
            (C10610 * C30274 + C10611 * C31457 -
             (C113 * C2019 + C31383 * C2029) * C30255 -
             (C113 * C2030 + C31383 * C2037) * C31165) *
                C8928) *
               C31184 * C31507) *
              C31475 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C8926 +
            (C10152 - (C10153 + C10154) + C10155) * C8927 + C10786 * C8928) *
               C31184 * C1835 +
           ((C10154 + C10153 - C10152 - C10155) * C8926 +
            (C10158 + C10157 - C10156 - C10159) * C8927 +
            (C10775 + C10776 - C10787 - C10788) * C8928) *
               C31184 * C1836 +
           (C10786 * C8926 + (C10787 - (C10776 + C10775) + C10788) * C8927 +
            ((C113 * C10764 + C31383 * C10765) * C30255 -
             ((C113 * C6273 + C31383 * C6276) * C31457 +
              (C113 * C6267 + C31383 * C6271) * C30274) +
             (C113 * C10766 + C31383 * C10767) * C31165) *
                C8928) *
               C31184 * C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     (((((C113 * C119 + C31383 * C126) * C293 +
                         (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                         C169 * C288 + C170 * C295 + C171 * C31497) *
                            C31397 * C108 +
                        (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                         C172 * C295 + C173 * C31497) *
                            C31397 * C109 +
                        (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                         C174 * C295 + C175 * C31497) *
                            C31397 * C110) *
                           C31476 +
                       ((C550 * C294 -
                         ((C113 * C496 + C31383 * C515) * C287 +
                          (C113 * C486 + C31383 * C497) * C293) +
                         C551 * C288 - C552 * C295 - C553 * C31497) *
                            C31397 * C108 +
                        (C552 * C294 - (C551 * C287 + C550 * C293) +
                         C553 * C288 - C554 * C295 - C555 * C31497) *
                            C31397 * C109 +
                        (C554 * C294 - (C553 * C287 + C552 * C293) +
                         C555 * C288 - C788 * C295 - C789 * C31497) *
                            C31397 * C110) *
                           C31305) *
                          C31475 +
                      (((C361 * C294 -
                         ((C113 * C307 + C31383 * C326) * C287 +
                          (C113 * C297 + C31383 * C308) * C293) +
                         C362 * C288 - C363 * C295 - C364 * C31497) *
                            C31397 * C108 +
                        (C363 * C294 - (C362 * C287 + C361 * C293) +
                         C364 * C288 - C365 * C295 - C366 * C31497) *
                            C31397 * C109 +
                        (C365 * C294 - (C364 * C287 + C363 * C293) +
                         C366 * C288 - C678 * C295 - C679 * C31497) *
                            C31397 * C110) *
                           C31476 +
                       (((C113 * C935 + C31383 * C940) * C293 +
                         (C113 * C941 + C31383 * C950) * C287 - C968 * C294 -
                         C969 * C288 + C970 * C295 + C971 * C31497) *
                            C31397 * C108 +
                        (C968 * C293 + C969 * C287 - C970 * C294 - C971 * C288 +
                         C972 * C295 + C973 * C31497) *
                            C31397 * C109 +
                        (C970 * C293 + C971 * C287 - C972 * C294 - C973 * C288 +
                         (C113 * C939 + C31383 * C948) * C295 +
                         (C113 * C949 + C31383 * C954) * C31497) *
                            C31397 * C110) *
                           C31305) *
                          C31265) +
                 std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     (((((C113 * C119 + C31383 * C126) * C1160 +
                         (C113 * C127 + C31383 * C140) * C31155) *
                            C31397 * C108 +
                        (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                        (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                           C31476 -
                       ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                        (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                        ((C113 * C496 + C31383 * C515) * C31155 +
                         (C113 * C486 + C31383 * C497) * C1160) *
                            C31397 * C108) *
                           C31305) *
                          C1431 +
                      ((((C113 * C935 + C31383 * C940) * C1160 +
                         (C113 * C941 + C31383 * C950) * C31155) *
                            C31397 * C108 +
                        (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                        (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                           C31305 -
                       ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                        (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                        ((C113 * C307 + C31383 * C326) * C31155 +
                         (C113 * C297 + C31383 * C308) * C1160) *
                            C31397 * C108) *
                           C31476) *
                          C1432 +
                      ((((C113 * C301 + C31383 * C316) * C1160 +
                         (C113 * C317 + C31383 * C331) * C31155) *
                            C31397 * C108 +
                        (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                        (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                           C31476 -
                       ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
                        (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
                        ((C113 * C1314 + C31383 * C1327) * C31155 +
                         (C113 * C1300 + C31383 * C1315) * C1160) *
                            C31397 * C108) *
                           C31305) *
                          C1433 +
                      ((((C113 * C1713 + C31383 * C1716) * C1160 +
                         (C113 * C1717 + C31383 * C1722) * C31155) *
                            C31397 * C108 +
                        ((C113 * C1714 + C31383 * C1718) * C1160 +
                         (C113 * C1719 + C31383 * C1723) * C31155) *
                            C31397 * C109 +
                        ((C113 * C1715 + C31383 * C1720) * C1160 +
                         (C113 * C1721 + C31383 * C1724) * C31155) *
                            C31397 * C110) *
                           C31305 -
                       ((C1453 * C31155 + C1452 * C1160) * C31397 * C110 +
                        (C1451 * C31155 + C1450 * C1160) * C31397 * C109 +
                        ((C113 * C1171 + C31383 * C1181) * C31155 +
                         (C113 * C1163 + C31383 * C1172) * C1160) *
                            C31397 * C108) *
                           C31476) *
                          C31514)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C31397 * C108 +
                    (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                    (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                       C2299 -
                   ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                    (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                    ((C113 * C496 + C31383 * C515) * C31155 +
                     (C113 * C486 + C31383 * C497) * C1160) *
                        C31397 * C108) *
                       C2300 +
                   (((C113 * C490 + C31383 * C505) * C1160 +
                     (C113 * C506 + C31383 * C520) * C31155) *
                        C31397 * C108 +
                    (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                    (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                       C2301 -
                   ((C2319 * C31155 + C2318 * C1160) * C31397 * C110 +
                    (C2317 * C31155 + C2316 * C1160) * C31397 * C109 +
                    ((C113 * C2025 + C31383 * C2035) * C31155 +
                     (C113 * C2017 + C31383 * C2026) * C1160) *
                        C31397 * C108) *
                       C31520) *
                      C31475 +
                  ((((C113 * C935 + C31383 * C940) * C1160 +
                     (C113 * C941 + C31383 * C950) * C31155) *
                        C31397 * C108 +
                    (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                    (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                       C2300 -
                   ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                    (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C31397 * C108) *
                       C2299 -
                   ((C2201 * C31155 + C2200 * C1160) * C31397 * C110 +
                    (C2199 * C31155 + C2198 * C1160) * C31397 * C109 +
                    ((C113 * C1308 + C31383 * C1324) * C31155 +
                     (C113 * C1297 + C31383 * C1309) * C1160) *
                        C31397 * C108) *
                       C2301 +
                   (((C113 * C2417 + C31383 * C2420) * C1160 +
                     (C113 * C2421 + C31383 * C2426) * C31155) *
                        C31397 * C108 +
                    ((C113 * C2418 + C31383 * C2422) * C1160 +
                     (C113 * C2423 + C31383 * C2427) * C31155) *
                        C31397 * C109 +
                    ((C113 * C2419 + C31383 * C2424) * C1160 +
                     (C113 * C2425 + C31383 * C2428) * C31155) *
                        C31397 * C110) *
                       C31520) *
                      C31265)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C293 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C287 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C294 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C288 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C295 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C31476 +
                   ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
                     C4765 * C1299 + C4761 * C1313) *
                        C294 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C287 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C293) +
                    (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
                     C4765 * C1312 + C4761 * C1326) *
                        C288 -
                    (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                     C4760 * C944 + C4763 * C487 + C4759 * C499) *
                        C295 -
                    (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                     C4760 * C952 + C4763 * C500 + C4759 * C517) *
                        C31497) *
                       C31397 * C31184 * C31305) *
                      C31475 +
                  (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                     C4765 * C1162 + C4761 * C1170) *
                        C294 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C287 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C293) +
                    (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                     C4765 * C1169 + C4761 * C1180) *
                        C288 -
                    (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                     C4760 * C320 + C4763 * C298 + C4759 * C310) *
                        C295 -
                    (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                     C4760 * C333 + C4763 * C311 + C4759 * C328) *
                        C31497) *
                       C31397 * C31184 * C31476 +
                   ((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                     C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                        C293 +
                    (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                     C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                        C287 -
                    (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 +
                     C4760 * C1313 + C4763 * C936 + C4759 * C942) *
                        C294 -
                    (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 +
                     C4760 * C1326 + C4763 * C943 + C4759 * C951) *
                        C288 +
                    (C4763 * C937 + C4759 * C944 + C4764 * C1298 +
                     C4760 * C1311 + C4765 * C1715 + C4761 * C1720) *
                        C295 +
                    (C4763 * C945 + C4759 * C952 + C4764 * C1310 +
                     C4760 * C1325 + C4765 * C1721 + C4761 * C1724) *
                        C31497) *
                       C31397 * C31184 * C31305) *
                      C31265)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1160 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31155) *
                       C31397 * C31184 * C31476 -
                   ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                     C4760 * C950 + C4763 * C496 + C4759 * C515) *
                        C31155 +
                    (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                     C4760 * C940 + C4763 * C486 + C4759 * C497) *
                        C1160) *
                       C31397 * C31184 * C31305) *
                      C1431 +
                  (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                     C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                        C1160 +
                    (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                     C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                        C31155) *
                       C31397 * C31184 * C31305 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C31155 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C1160) *
                       C31397 * C31184 * C31476) *
                      C1432 +
                  (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C1160 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31155) *
                       C31397 * C31184 * C31476 -
                   ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                     C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                        C31155 +
                    (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                     C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                        C1160) *
                       C31397 * C31184 * C31305) *
                      C1433 +
                  (((C4763 * C1713 + C4759 * C1716 + C4764 * C5619 +
                     C4760 * C5624 + C4765 * C5980 + C4761 * C5981) *
                        C1160 +
                    (C4763 * C1717 + C4759 * C1722 + C4764 * C5623 +
                     C4760 * C5628 + C4765 * C5982 + C4761 * C5983) *
                        C31155) *
                       C31397 * C31184 * C31305 -
                   ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 +
                     C4760 * C1182 + C4763 * C1171 + C4759 * C1181) *
                        C31155 +
                    (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 +
                     C4760 * C1173 + C4763 * C1163 + C4759 * C1172) *
                        C1160) *
                       C31397 * C31184 * C31476) *
                      C31514)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1160 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31155) *
                       C31397 * C31184 * C2299 -
                   ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                     C4760 * C950 + C4763 * C496 + C4759 * C515) *
                        C31155 +
                    (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                     C4760 * C940 + C4763 * C486 + C4759 * C497) *
                        C1160) *
                       C31397 * C31184 * C2300 +
                   ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                     C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                        C1160 +
                    (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                     C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                        C31155) *
                       C31397 * C31184 * C2301 -
                   ((C4765 * C6269 + C4761 * C6275 + C4764 * C2421 +
                     C4760 * C2426 + C4763 * C2025 + C4759 * C2035) *
                        C31155 +
                    (C4765 * C6266 + C4761 * C6270 + C4764 * C2417 +
                     C4760 * C2420 + C4763 * C2017 + C4759 * C2026) *
                        C1160) *
                       C31397 * C31184 * C31520) *
                      C31475 +
                  (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                     C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                        C1160 +
                    (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                     C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                        C31155) *
                       C31397 * C31184 * C2300 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C31155 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C1160) *
                       C31397 * C31184 * C2299 -
                   ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 +
                     C4760 * C1328 + C4763 * C1308 + C4759 * C1324) *
                        C31155 +
                    (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 +
                     C4760 * C1316 + C4763 * C1297 + C4759 * C1309) *
                        C1160) *
                       C31397 * C31184 * C2301 +
                   ((C4763 * C2417 + C4759 * C2420 + C4764 * C6266 +
                     C4760 * C6270 + C4765 * C6628 + C4761 * C6629) *
                        C1160 +
                    (C4763 * C2421 + C4759 * C2426 + C4764 * C6269 +
                     C4760 * C6275 + C4765 * C6630 + C4761 * C6631) *
                        C31155) *
                       C31397 * C31184 * C31520) *
                      C31265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C31383 * C126) * C293 +
                     (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C31497) *
                        C8926 +
                    (C9180 + C9181 - C9154 - C9155 + C9156 + C9157) * C8927 +
                    C9190 * C8928) *
                       C31184 * C31476 +
                   ((C9154 - (C9181 + C9180) + C9155 - C9156 - C9157) * C8926 +
                    (C9162 - (C9183 + C9182) + C9163 - C9164 - C9165) * C8927 +
                    (C9166 - (C9184 + C9185) + C9171 - C9172 - C9173) * C8928) *
                       C31184 * C31305) *
                      C31475 +
                  (((C361 * C294 -
                     ((C113 * C307 + C31383 * C326) * C287 +
                      (C113 * C297 + C31383 * C308) * C293) +
                     C362 * C288 - C363 * C295 - C364 * C31497) *
                        C8926 +
                    (C9549 - (C9569 + C9570) + C9554 - C9555 - C9556) * C8927 +
                    (C9557 - (C9571 + C9572) + C9562 - C9563 - C9564) * C8928) *
                       C31184 * C31476 +
                   ((C9570 + C9569 - C9549 - C9554 + C9555 + C9556) * C8926 +
                    (C9572 + C9571 - C9557 - C9562 + C9563 + C9564) * C8927 +
                    ((C113 * C2417 + C31383 * C2420) * C293 +
                     (C113 * C2421 + C31383 * C2426) * C287 -
                     (C113 * C2418 + C31383 * C2422) * C294 -
                     (C113 * C2423 + C31383 * C2427) * C288 +
                     (C113 * C2419 + C31383 * C2424) * C295 +
                     (C113 * C2425 + C31383 * C2428) * C31497) *
                        C8928) *
                       C31184 * C31305) *
                      C31265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C8926 +
                    (C9855 + C9856) * C8927 + C9881 * C8928) *
                       C31184 * C31476 -
                   ((C9859 + C9860) * C8928 + (C9858 + C9857) * C8927 +
                    (C9856 + C9855) * C8926) *
                       C31184 * C31305) *
                      C1431 +
                  (((C9861 + C9862) * C8926 + (C9863 + C9864) * C8927 +
                    (C9891 + C9892) * C8928) *
                       C31184 * C31305 -
                   (C9884 * C8928 + (C9862 + C9861) * C8927 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C8926) *
                       C31184 * C31476) *
                      C1432 +
                  ((((C113 * C301 + C31383 * C316) * C1160 +
                     (C113 * C317 + C31383 * C331) * C31155) *
                        C8926 +
                    (C9893 + C9894) * C8927 + C9899 * C8928) *
                       C31184 * C31476 -
                   ((C9897 + C9898) * C8928 + (C9896 + C9895) * C8927 +
                    (C9894 + C9893) * C8926) *
                       C31184 * C31305) *
                      C1433 +
                  (((C10284 + C10285) * C8926 + (C10286 + C10287) * C8927 +
                    ((C113 * C6628 + C31383 * C6629) * C1160 +
                     (C113 * C6630 + C31383 * C6631) * C31155) *
                        C8928) *
                       C31184 * C31305 -
                   ((C10287 + C10286) * C8928 + (C10285 + C10284) * C8927 +
                    ((C113 * C1171 + C31383 * C1181) * C31155 +
                     (C113 * C1163 + C31383 * C1172) * C1160) *
                        C8926) *
                       C31184 * C31476) *
                      C31514)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C8926 +
                    (C9855 + C9856) * C8927 + C9881 * C8928) *
                       C31184 * C2299 -
                   (C10601 * C8928 + (C9858 + C9857) * C8927 +
                    (C9856 + C9855) * C8926) *
                       C31184 * C2300 +
                   (C9881 * C8926 + (C9860 + C9859) * C8927 + C10618 * C8928) *
                       C31184 * C2301 -
                   ((C10616 + C10617) * C8928 + (C10615 + C10614) * C8927 +
                    C10601 * C8926) *
                       C31184 * C31520) *
                      C31475 +
                  (((C9861 + C9862) * C8926 + (C9863 + C9864) * C8927 +
                    C11006 * C8928) *
                       C31184 * C2300 -
                   (C9884 * C8928 + (C9862 + C9861) * C8927 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C8926) *
                       C31184 * C2299 -
                   ((C11013 + C11014) * C8928 + (C9892 + C9891) * C8927 +
                    C9884 * C8926) *
                       C31184 * C2301 +
                   (C11006 * C8926 + (C11014 + C11013) * C8927 +
                    ((C113 * C11001 + C31383 * C11002) * C1160 +
                     (C113 * C11003 + C31383 * C11004) * C31155) *
                        C8928) *
                       C31184 * C31520) *
                      C31265)) /
                    (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C31383 * C126) * C114 +
               (C113 * C127 + C31383 * C140) * C102 - C168 * C115 -
               C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C31397 * C108 +
              (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
               C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
               C176 * C118 + C177 * C106) *
                  C31397 * C109 +
              (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
               C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
               (C113 * C125 + C31383 * C138) * C118 +
               (C113 * C139 + C31383 * C146) * C106) *
                  C31397 * C110) *
             C31218 * C31206 -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31383 * C126) * C293 +
                (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                C169 * C288 + C170 * C295 + C171 * C31497) *
                   C31397 * C108 +
               (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                C172 * C295 + C173 * C31497) *
                   C31397 * C109 +
               (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                C174 * C295 + C175 * C31497) *
                   C31397 * C110) *
                  C31218 * C31541 +
              ((C361 * C294 -
                ((C113 * C307 + C31383 * C326) * C287 +
                 (C113 * C297 + C31383 * C308) * C293) +
                C362 * C288 - C363 * C295 - C364 * C31497) *
                   C31397 * C108 +
               (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                C365 * C295 - C366 * C31497) *
                   C31397 * C109 +
               (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                (C113 * C300 + C31383 * C314) * C295 -
                (C113 * C315 + C31383 * C330) * C31497) *
                   C31397 * C110) *
                  C31218 * C31529 +
              (((C113 * C301 + C31383 * C316) * C293 +
                (C113 * C317 + C31383 * C331) * C287 - C367 * C294 -
                C368 * C288 + C369 * C295 + C370 * C31497) *
                   C31397 * C108 +
               (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                C371 * C295 + C372 * C31497) *
                   C31397 * C109 +
               (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                (C113 * C305 + C31383 * C324) * C295 +
                (C113 * C325 + C31383 * C335) * C31497) *
                   C31397 * C110) *
                  C31218 * C31504) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31383 * C126) * C293 +
                (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                C169 * C288 + C170 * C295 + C171 * C31497) *
                   C31397 * C108 +
               (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                C172 * C295 + C173 * C31497) *
                   C31397 * C109 +
               (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                C174 * C295 + C175 * C31497) *
                   C31397 * C110) *
                  C31542 +
              ((C550 * C294 -
                ((C113 * C496 + C31383 * C515) * C287 +
                 (C113 * C486 + C31383 * C497) * C293) +
                C551 * C288 - C552 * C295 - C553 * C31497) *
                   C31397 * C108 +
               (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                C554 * C295 - C555 * C31497) *
                   C31397 * C109 +
               (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                (C113 * C489 + C31383 * C503) * C295 -
                (C113 * C504 + C31383 * C519) * C31497) *
                   C31397 * C110) *
                  C31531 +
              (((C113 * C490 + C31383 * C505) * C293 +
                (C113 * C506 + C31383 * C520) * C287 - C556 * C294 -
                C557 * C288 + C558 * C295 + C559 * C31497) *
                   C31397 * C108 +
               (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
                C560 * C295 + C561 * C31497) *
                   C31397 * C109 +
               (C558 * C293 + C559 * C287 - C560 * C294 - C561 * C288 +
                (C113 * C494 + C31383 * C513) * C295 +
                (C113 * C514 + C31383 * C524) * C31497) *
                   C31397 * C110) *
                  C31507) *
             C31206 -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31383 * C126) * C1089 +
                (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                C169 * C31525 + C170 * C1091 + C171 * C31497) *
                   C31397 * C108 +
               (C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
                C172 * C1091 + C173 * C31497) *
                   C31397 * C109 +
               (C170 * C1089 + C171 * C31538 - C172 * C1090 - C173 * C31525 +
                C174 * C1091 + C175 * C31497) *
                   C31397 * C110) *
                  C31218 * C1086 +
              ((C361 * C1090 -
                ((C113 * C307 + C31383 * C326) * C31538 +
                 (C113 * C297 + C31383 * C308) * C1089) +
                C362 * C31525 - C363 * C1091 - C364 * C31497) *
                   C31397 * C108 +
               (C363 * C1090 - (C362 * C31538 + C361 * C1089) + C364 * C31525 -
                C365 * C1091 - C366 * C31497) *
                   C31397 * C109 +
               (C365 * C1090 - (C364 * C31538 + C363 * C1089) + C366 * C31525 -
                C678 * C1091 - C679 * C31497) *
                   C31397 * C110) *
                  C31218 * C1087 +
              (((C113 * C301 + C31383 * C316) * C1089 +
                (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
                C368 * C31525 + C369 * C1091 + C370 * C31497) *
                   C31397 * C108 +
               (C367 * C1089 + C368 * C31538 - C369 * C1090 - C370 * C31525 +
                C371 * C1091 + C372 * C31497) *
                   C31397 * C109 +
               (C369 * C1089 + C370 * C31538 - C371 * C1090 - C372 * C31525 +
                (C113 * C305 + C31383 * C324) * C1091 +
                (C113 * C325 + C31383 * C335) * C31497) *
                   C31397 * C110) *
                  C31218 * C31504) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31383 * C126) * C1160 +
                (C113 * C127 + C31383 * C140) * C31155) *
                   C31397 * C108 +
               (C168 * C1160 + C169 * C31155) * C31397 * C109 +
               (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                  C31218 * C1155 -
              ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
               (C362 * C31155 + C361 * C1160) * C31397 * C109 +
               ((C113 * C307 + C31383 * C326) * C31155 +
                (C113 * C297 + C31383 * C308) * C1160) *
                   C31397 * C108) *
                  C31218 * C1156 +
              (((C113 * C301 + C31383 * C316) * C1160 +
                (C113 * C317 + C31383 * C331) * C31155) *
                   C31397 * C108 +
               (C367 * C1160 + C368 * C31155) * C31397 * C109 +
               (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                  C31218 * C1157 -
              (((C113 * C1167 + C31383 * C1179) * C31155 +
                (C113 * C1161 + C31383 * C1168) * C1160) *
                   C31397 * C110 +
               ((C113 * C1169 + C31383 * C1180) * C31155 +
                (C113 * C1162 + C31383 * C1170) * C1160) *
                   C31397 * C109 +
               ((C113 * C1171 + C31383 * C1181) * C31155 +
                (C113 * C1163 + C31383 * C1172) * C1160) *
                   C31397 * C108) *
                  C31218 * C1158 +
              (((C113 * C1164 + C31383 * C1173) * C1160 +
                (C113 * C1174 + C31383 * C1182) * C31155) *
                   C31397 * C108 +
               ((C113 * C1165 + C31383 * C1175) * C1160 +
                (C113 * C1176 + C31383 * C1183) * C31155) *
                   C31397 * C109 +
               ((C113 * C1166 + C31383 * C1177) * C1160 +
                (C113 * C1178 + C31383 * C1184) * C31155) *
                   C31397 * C110) *
                  C31218 * C1159) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31383 * C126) * C1160 +
                 (C113 * C127 + C31383 * C140) * C31155) *
                    C31397 * C108 +
                (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                   C31542 -
               ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                ((C113 * C496 + C31383 * C515) * C31155 +
                 (C113 * C486 + C31383 * C497) * C1160) *
                    C31397 * C108) *
                   C31531 +
               (((C113 * C490 + C31383 * C505) * C1160 +
                 (C113 * C506 + C31383 * C520) * C31155) *
                    C31397 * C108 +
                (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                   C31507) *
                  C1086 +
              ((((C113 * C935 + C31383 * C940) * C1160 +
                 (C113 * C941 + C31383 * C950) * C31155) *
                    C31397 * C108 +
                (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                   C31531 -
               ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                ((C113 * C307 + C31383 * C326) * C31155 +
                 (C113 * C297 + C31383 * C308) * C1160) *
                    C31397 * C108) *
                   C31542 -
               (((C113 * C1304 + C31383 * C1322) * C31155 +
                 (C113 * C1295 + C31383 * C1305) * C1160) *
                    C31397 * C110 +
                ((C113 * C1306 + C31383 * C1323) * C31155 +
                 (C113 * C1296 + C31383 * C1307) * C1160) *
                    C31397 * C109 +
                ((C113 * C1308 + C31383 * C1324) * C31155 +
                 (C113 * C1297 + C31383 * C1309) * C1160) *
                    C31397 * C108) *
                   C31507) *
                  C1087 +
              ((((C113 * C301 + C31383 * C316) * C1160 +
                 (C113 * C317 + C31383 * C331) * C31155) *
                    C31397 * C108 +
                (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                   C31542 -
               (((C113 * C1310 + C31383 * C1325) * C31155 +
                 (C113 * C1298 + C31383 * C1311) * C1160) *
                    C31397 * C110 +
                ((C113 * C1312 + C31383 * C1326) * C31155 +
                 (C113 * C1299 + C31383 * C1313) * C1160) *
                    C31397 * C109 +
                ((C113 * C1314 + C31383 * C1327) * C31155 +
                 (C113 * C1300 + C31383 * C1315) * C1160) *
                    C31397 * C108) *
                   C31531 +
               (((C113 * C1301 + C31383 * C1316) * C1160 +
                 (C113 * C1317 + C31383 * C1328) * C31155) *
                    C31397 * C108 +
                ((C113 * C1302 + C31383 * C1318) * C1160 +
                 (C113 * C1319 + C31383 * C1329) * C31155) *
                    C31397 * C109 +
                ((C113 * C1303 + C31383 * C1320) * C1160 +
                 (C113 * C1321 + C31383 * C1330) * C31155) *
                    C31397 * C110) *
                   C31507) *
                  C31504) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31383 * C126) * C1089 +
                (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                C169 * C31525 + C170 * C1091 + C171 * C31497) *
                   C31397 * C108 +
               (C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
                C172 * C1091 + C173 * C31497) *
                   C31397 * C109 +
               (C170 * C1089 + C171 * C31538 - C172 * C1090 - C173 * C31525 +
                C174 * C1091 + C175 * C31497) *
                   C31397 * C110) *
                  C1835 +
              ((C550 * C1090 -
                ((C113 * C496 + C31383 * C515) * C31538 +
                 (C113 * C486 + C31383 * C497) * C1089) +
                C551 * C31525 - C552 * C1091 - C553 * C31497) *
                   C31397 * C108 +
               (C552 * C1090 - (C551 * C31538 + C550 * C1089) + C553 * C31525 -
                C554 * C1091 - C555 * C31497) *
                   C31397 * C109 +
               (C554 * C1090 - (C553 * C31538 + C552 * C1089) + C555 * C31525 -
                C788 * C1091 - C789 * C31497) *
                   C31397 * C110) *
                  C1836 +
              (((C113 * C490 + C31383 * C505) * C1089 +
                (C113 * C506 + C31383 * C520) * C31538 - C556 * C1090 -
                C557 * C31525 + C558 * C1091 + C559 * C31497) *
                   C31397 * C108 +
               (C556 * C1089 + C557 * C31538 - C558 * C1090 - C559 * C31525 +
                C560 * C1091 + C561 * C31497) *
                   C31397 * C109 +
               (C558 * C1089 + C559 * C31538 - C560 * C1090 - C561 * C31525 +
                (C113 * C494 + C31383 * C513) * C1091 +
                (C113 * C514 + C31383 * C524) * C31497) *
                   C31397 * C110) *
                  C31507) *
             C31206 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31383 * C126) * C1160 +
                 (C113 * C127 + C31383 * C140) * C31155) *
                    C31397 * C108 +
                (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                   C1835 -
               ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                ((C113 * C496 + C31383 * C515) * C31155 +
                 (C113 * C486 + C31383 * C497) * C1160) *
                    C31397 * C108) *
                   C1836 +
               (((C113 * C490 + C31383 * C505) * C1160 +
                 (C113 * C506 + C31383 * C520) * C31155) *
                    C31397 * C108 +
                (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                   C31507) *
                  C31541 +
              ((((C113 * C935 + C31383 * C940) * C1160 +
                 (C113 * C941 + C31383 * C950) * C31155) *
                    C31397 * C108 +
                (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                   C1836 -
               ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                ((C113 * C307 + C31383 * C326) * C31155 +
                 (C113 * C297 + C31383 * C308) * C1160) *
                    C31397 * C108) *
                   C1835 -
               (((C113 * C1304 + C31383 * C1322) * C31155 +
                 (C113 * C1295 + C31383 * C1305) * C1160) *
                    C31397 * C110 +
                ((C113 * C1306 + C31383 * C1323) * C31155 +
                 (C113 * C1296 + C31383 * C1307) * C1160) *
                    C31397 * C109 +
                ((C113 * C1308 + C31383 * C1324) * C31155 +
                 (C113 * C1297 + C31383 * C1309) * C1160) *
                    C31397 * C108) *
                   C31507) *
                  C31529 +
              ((((C113 * C301 + C31383 * C316) * C1160 +
                 (C113 * C317 + C31383 * C331) * C31155) *
                    C31397 * C108 +
                (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                   C1835 -
               ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
                (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
                ((C113 * C1314 + C31383 * C1327) * C31155 +
                 (C113 * C1300 + C31383 * C1315) * C1160) *
                    C31397 * C108) *
                   C1836 +
               (((C113 * C1301 + C31383 * C1316) * C1160 +
                 (C113 * C1317 + C31383 * C1328) * C31155) *
                    C31397 * C108 +
                ((C113 * C1302 + C31383 * C1318) * C1160 +
                 (C113 * C1319 + C31383 * C1329) * C31155) *
                    C31397 * C109 +
                ((C113 * C1303 + C31383 * C1320) * C1160 +
                 (C113 * C1321 + C31383 * C1330) * C31155) *
                    C31397 * C110) *
                   C31507) *
                  C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C1160 +
            (C113 * C127 + C31383 * C140) * C31155) *
               C31397 * C108 +
           (C168 * C1160 + C169 * C31155) * C31397 * C109 +
           (C170 * C1160 + C171 * C31155) * C31397 * C110) *
              C2010 -
          ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
           (C551 * C31155 + C550 * C1160) * C31397 * C109 +
           ((C113 * C496 + C31383 * C515) * C31155 +
            (C113 * C486 + C31383 * C497) * C1160) *
               C31397 * C108) *
              C2011 +
          (((C113 * C490 + C31383 * C505) * C1160 +
            (C113 * C506 + C31383 * C520) * C31155) *
               C31397 * C108 +
           (C556 * C1160 + C557 * C31155) * C31397 * C109 +
           (C558 * C1160 + C559 * C31155) * C31397 * C110) *
              C2012 -
          (((C113 * C2021 + C31383 * C2033) * C31155 +
            (C113 * C2015 + C31383 * C2022) * C1160) *
               C31397 * C110 +
           ((C113 * C2023 + C31383 * C2034) * C31155 +
            (C113 * C2016 + C31383 * C2024) * C1160) *
               C31397 * C109 +
           ((C113 * C2025 + C31383 * C2035) * C31155 +
            (C113 * C2017 + C31383 * C2026) * C1160) *
               C31397 * C108) *
              C2013 +
          (((C113 * C2018 + C31383 * C2027) * C1160 +
            (C113 * C2028 + C31383 * C2036) * C31155) *
               C31397 * C108 +
           ((C113 * C2019 + C31383 * C2029) * C1160 +
            (C113 * C2030 + C31383 * C2037) * C31155) *
               C31397 * C109 +
           ((C113 * C2020 + C31383 * C2031) * C1160 +
            (C113 * C2032 + C31383 * C2038) * C31155) *
               C31397 * C110) *
              C2014) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
           C4765 * C301 + C4761 * C316) *
              C114 +
          (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
           C4765 * C317 + C4761 * C331) *
              C102 -
          (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
           C4763 * C120 + C4759 * C128) *
              C115 -
          (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
           C4763 * C129 + C4759 * C141) *
              C103 +
          (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
           C4765 * C303 + C4761 * C320) *
              C116 +
          (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
           C4765 * C321 + C4761 * C333) *
              C104 -
          (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
           C4763 * C122 + C4759 * C132) *
              C117 -
          (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
           C4763 * C133 + C4759 * C143) *
              C105 +
          (C4763 * C123 + C4759 * C134 + C4764 * C300 + C4760 * C314 +
           C4765 * C305 + C4761 * C324) *
              C118 +
          (C4763 * C135 + C4759 * C144 + C4764 * C315 + C4760 * C330 +
           C4765 * C325 + C4761 * C335) *
              C106) *
         C31397 * C31184 * C31218 * C31206) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C293 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C287 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C294 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C288 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C295 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31497) *
              C31397 * C31184 * C31218 * C31541 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C294 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C287 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C293) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C288 -
           (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
            C4763 * C298 + C4759 * C310) *
               C295 -
           (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
            C4763 * C311 + C4759 * C328) *
               C31497) *
              C31397 * C31184 * C31218 * C31529 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C293 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C287 -
           (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
            C4763 * C302 + C4759 * C318) *
               C294 -
           (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
            C4763 * C319 + C4759 * C332) *
               C288 +
           (C4763 * C303 + C4759 * C320 + C4764 * C1161 + C4760 * C1168 +
            C4765 * C1166 + C4761 * C1177) *
               C295 +
           (C4763 * C321 + C4759 * C333 + C4764 * C1167 + C4760 * C1179 +
            C4765 * C1178 + C4761 * C1184) *
               C31497) *
              C31397 * C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C293 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C287 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C294 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C288 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C295 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31497) *
              C31397 * C31184 * C31542 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C294 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C287 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C293) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C288 -
           (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
            C4763 * C487 + C4759 * C499) *
               C295 -
           (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
            C4763 * C500 + C4759 * C517) *
               C31497) *
              C31397 * C31184 * C31531 +
          ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
            C4765 * C1301 + C4761 * C1316) *
               C293 +
           (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
            C4765 * C1317 + C4761 * C1328) *
               C287 -
           (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
            C4763 * C491 + C4759 * C507) *
               C294 -
           (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
            C4763 * C508 + C4759 * C521) *
               C288 +
           (C4763 * C492 + C4759 * C509 + C4764 * C1295 + C4760 * C1305 +
            C4765 * C1303 + C4761 * C1320) *
               C295 +
           (C4763 * C510 + C4759 * C522 + C4764 * C1304 + C4760 * C1322 +
            C4765 * C1321 + C4761 * C1330) *
               C31497) *
              C31397 * C31184 * C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C1089 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31538 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C1090 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31525 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C1091 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31497) *
              C31397 * C31184 * C31218 * C1086 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C1090 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31538 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C1089) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31525 -
           (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
            C4763 * C298 + C4759 * C310) *
               C1091 -
           (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
            C4763 * C311 + C4759 * C328) *
               C31497) *
              C31397 * C31184 * C31218 * C1087 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C1089 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C31538 -
           (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
            C4763 * C302 + C4759 * C318) *
               C1090 -
           (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
            C4763 * C319 + C4759 * C332) *
               C31525 +
           (C4763 * C303 + C4759 * C320 + C4764 * C1161 + C4760 * C1168 +
            C4765 * C1166 + C4761 * C1177) *
               C1091 +
           (C4763 * C321 + C4759 * C333 + C4764 * C1167 + C4760 * C1179 +
            C4765 * C1178 + C4761 * C1184) *
               C31497) *
              C31397 * C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C1160 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31155) *
              C31397 * C31184 * C31218 * C1155 -
          ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
            C4763 * C307 + C4759 * C326) *
               C31155 +
           (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
            C4763 * C297 + C4759 * C308) *
               C1160) *
              C31397 * C31184 * C31218 * C1156 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C1160 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C31155) *
              C31397 * C31184 * C31218 * C1157 -
          ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 + C4760 * C1182 +
            C4763 * C1171 + C4759 * C1181) *
               C31155 +
           (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 + C4760 * C1173 +
            C4763 * C1163 + C4759 * C1172) *
               C1160) *
              C31397 * C31184 * C31218 * C1158 +
          ((C4763 * C1164 + C4759 * C1173 + C4764 * C5500 + C4760 * C5503 +
            C4765 * C5501 + C4761 * C5504) *
               C1160 +
           (C4763 * C1174 + C4759 * C1182 + C4764 * C5502 + C4760 * C5506 +
            C4765 * C5505 + C4761 * C5507) *
               C31155) *
              C31397 * C31184 * C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C1160 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31155) *
               C31397 * C31184 * C31542 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31155 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C1160) *
               C31397 * C31184 * C31531 +
           ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
             C4765 * C1301 + C4761 * C1316) *
                C1160 +
            (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
             C4765 * C1317 + C4761 * C1328) *
                C31155) *
               C31397 * C31184 * C31507) *
              C1086 +
          (((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C1160 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31155) *
               C31397 * C31184 * C31531 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31155 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C1160) *
               C31397 * C31184 * C31542 -
           ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 + C4760 * C1328 +
             C4763 * C1308 + C4759 * C1324) *
                C31155 +
            (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 + C4760 * C1316 +
             C4763 * C1297 + C4759 * C1309) *
                C1160) *
               C31397 * C31184 * C31507) *
              C1087 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C1160 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C31155) *
               C31397 * C31184 * C31542 -
           ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
             C4763 * C1314 + C4759 * C1327) *
                C31155 +
            (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
             C4763 * C1300 + C4759 * C1315) *
                C1160) *
               C31397 * C31184 * C31531 +
           ((C4763 * C1301 + C4759 * C1316 + C4764 * C5618 + C4760 * C5622 +
             C4765 * C5620 + C4761 * C5625) *
                C1160 +
            (C4763 * C1317 + C4759 * C1328 + C4764 * C5621 + C4760 * C5627 +
             C4765 * C5626 + C4761 * C5629) *
                C31155) *
               C31397 * C31184 * C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C1089 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31538 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C1090 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31525 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C1091 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31497) *
              C31397 * C31184 * C1835 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C1090 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31538 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C1089) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C31525 -
           (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
            C4763 * C487 + C4759 * C499) *
               C1091 -
           (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
            C4763 * C500 + C4759 * C517) *
               C31497) *
              C31397 * C31184 * C1836 +
          ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
            C4765 * C1301 + C4761 * C1316) *
               C1089 +
           (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
            C4765 * C1317 + C4761 * C1328) *
               C31538 -
           (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
            C4763 * C491 + C4759 * C507) *
               C1090 -
           (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
            C4763 * C508 + C4759 * C521) *
               C31525 +
           (C4763 * C492 + C4759 * C509 + C4764 * C1295 + C4760 * C1305 +
            C4765 * C1303 + C4761 * C1320) *
               C1091 +
           (C4763 * C510 + C4759 * C522 + C4764 * C1304 + C4760 * C1322 +
            C4765 * C1321 + C4761 * C1330) *
               C31497) *
              C31397 * C31184 * C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C1160 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31155) *
               C31397 * C31184 * C1835 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31155 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C1160) *
               C31397 * C31184 * C1836 +
           ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
             C4765 * C1301 + C4761 * C1316) *
                C1160 +
            (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
             C4765 * C1317 + C4761 * C1328) *
                C31155) *
               C31397 * C31184 * C31507) *
              C31541 +
          (((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C1160 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31155) *
               C31397 * C31184 * C1836 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31155 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C1160) *
               C31397 * C31184 * C1835 -
           ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 + C4760 * C1328 +
             C4763 * C1308 + C4759 * C1324) *
                C31155 +
            (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 + C4760 * C1316 +
             C4763 * C1297 + C4759 * C1309) *
                C1160) *
               C31397 * C31184 * C31507) *
              C31529 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C1160 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C31155) *
               C31397 * C31184 * C1835 -
           ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
             C4763 * C1314 + C4759 * C1327) *
                C31155 +
            (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
             C4763 * C1300 + C4759 * C1315) *
                C1160) *
               C31397 * C31184 * C1836 +
           ((C4763 * C1301 + C4759 * C1316 + C4764 * C5618 + C4760 * C5622 +
             C4765 * C5620 + C4761 * C5625) *
                C1160 +
            (C4763 * C1317 + C4759 * C1328 + C4764 * C5621 + C4760 * C5627 +
             C4765 * C5626 + C4761 * C5629) *
                C31155) *
               C31397 * C31184 * C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C1160 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31155) *
              C31397 * C31184 * C2010 -
          ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
            C4763 * C496 + C4759 * C515) *
               C31155 +
           (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
            C4763 * C486 + C4759 * C497) *
               C1160) *
              C31397 * C31184 * C2011 +
          ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
            C4765 * C1301 + C4761 * C1316) *
               C1160 +
           (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
            C4765 * C1317 + C4761 * C1328) *
               C31155) *
              C31397 * C31184 * C2012 -
          ((C4765 * C6269 + C4761 * C6275 + C4764 * C2421 + C4760 * C2426 +
            C4763 * C2025 + C4759 * C2035) *
               C31155 +
           (C4765 * C6266 + C4761 * C6270 + C4764 * C2417 + C4760 * C2420 +
            C4763 * C2017 + C4759 * C2026) *
               C1160) *
              C31397 * C31184 * C2013 +
          ((C4763 * C2018 + C4759 * C2027 + C4764 * C6267 + C4760 * C6271 +
            C4765 * C6268 + C4761 * C6272) *
               C1160 +
           (C4763 * C2028 + C4759 * C2036 + C4764 * C6273 + C4760 * C6276 +
            C4765 * C6274 + C4761 * C6277) *
               C31155) *
              C31397 * C31184 * C2014) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31383 * C126) * C114 +
           (C113 * C127 + C31383 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C8926 +
          ((C113 * C486 + C31383 * C497) * C114 +
           (C113 * C496 + C31383 * C515) * C102 - C550 * C115 - C551 * C103 +
           C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 + C788 * C118 +
           C789 * C106) *
              C8927 +
          ((C113 * C490 + C31383 * C505) * C114 +
           (C113 * C506 + C31383 * C520) * C102 - C556 * C115 - C557 * C103 +
           C558 * C116 + C559 * C104 - C560 * C117 - C561 * C105 +
           (C113 * C494 + C31383 * C513) * C118 +
           (C113 * C514 + C31383 * C524) * C106) *
              C8928) *
         C31184 * C31218 * C31206) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C293 +
            (C113 * C127 + C31383 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31497) *
               C8926 +
           ((C113 * C486 + C31383 * C497) * C293 +
            (C113 * C496 + C31383 * C515) * C287 - C550 * C294 - C551 * C288 +
            C552 * C295 + C553 * C31497) *
               C8927 +
           ((C113 * C490 + C31383 * C505) * C293 +
            (C113 * C506 + C31383 * C520) * C287 - C556 * C294 - C557 * C288 +
            C558 * C295 + C559 * C31497) *
               C8928) *
              C31184 * C31218 * C31541 +
          ((C361 * C294 -
            ((C113 * C307 + C31383 * C326) * C287 +
             (C113 * C297 + C31383 * C308) * C293) +
            C362 * C288 - C363 * C295 - C364 * C31497) *
               C8926 +
           (C968 * C294 -
            ((C113 * C941 + C31383 * C950) * C287 +
             (C113 * C935 + C31383 * C940) * C293) +
            C969 * C288 - C970 * C295 - C971 * C31497) *
               C8927 +
           (C2198 * C294 -
            ((C113 * C1308 + C31383 * C1324) * C287 +
             (C113 * C1297 + C31383 * C1309) * C293) +
            C2199 * C288 - C2200 * C295 - C2201 * C31497) *
               C8928) *
              C31184 * C31218 * C31529 +
          (((C113 * C301 + C31383 * C316) * C293 +
            (C113 * C317 + C31383 * C331) * C287 - C367 * C294 - C368 * C288 +
            C369 * C295 + C370 * C31497) *
               C8926 +
           ((C113 * C1300 + C31383 * C1315) * C293 +
            (C113 * C1314 + C31383 * C1327) * C287 - C1612 * C294 -
            C1613 * C288 + C1614 * C295 + C1615 * C31497) *
               C8927 +
           ((C113 * C1301 + C31383 * C1316) * C293 +
            (C113 * C1317 + C31383 * C1328) * C287 -
            (C113 * C1302 + C31383 * C1318) * C294 -
            (C113 * C1319 + C31383 * C1329) * C288 +
            (C113 * C1303 + C31383 * C1320) * C295 +
            (C113 * C1321 + C31383 * C1330) * C31497) *
               C8928) *
              C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C293 +
            (C113 * C127 + C31383 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31497) *
               C8926 +
           (C9180 + C9181 - C9154 - C9155 + C9156 + C9157) * C8927 +
           C9190 * C8928) *
              C31184 * C31542 +
          ((C9154 - (C9181 + C9180) + C9155 - C9156 - C9157) * C8926 +
           (C9162 - (C9183 + C9182) + C9163 - C9164 - C9165) * C8927 +
           (C9166 - (C9184 + C9185) + C9171 - C9172 - C9173) * C8928) *
              C31184 * C31531 +
          (C9190 * C8926 +
           (C9185 + C9184 - C9166 - C9171 + C9172 + C9173) * C8927 +
           ((C113 * C2018 + C31383 * C2027) * C293 +
            (C113 * C2028 + C31383 * C2036) * C287 -
            (C113 * C2019 + C31383 * C2029) * C294 -
            (C113 * C2030 + C31383 * C2037) * C288 +
            (C113 * C2020 + C31383 * C2031) * C295 +
            (C113 * C2032 + C31383 * C2038) * C31497) *
               C8928) *
              C31184 * C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C1089 +
            (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
            C169 * C31525 + C170 * C1091 + C171 * C31497) *
               C8926 +
           (C9174 * C1089 + C9175 * C31538 - C550 * C1090 - C551 * C31525 +
            C552 * C1091 + C553 * C31497) *
               C8927 +
           (C9176 * C1089 + C9177 * C31538 - C556 * C1090 - C557 * C31525 +
            C558 * C1091 + C559 * C31497) *
               C8928) *
              C31184 * C31218 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C31383 * C326) * C31538 +
             (C113 * C297 + C31383 * C308) * C1089) +
            C362 * C31525 - C363 * C1091 - C364 * C31497) *
               C8926 +
           (C968 * C1090 - (C9565 * C31538 + C9566 * C1089) + C969 * C31525 -
            C970 * C1091 - C971 * C31497) *
               C8927 +
           (C2198 * C1090 - (C9567 * C31538 + C9568 * C1089) + C2199 * C31525 -
            C2200 * C1091 - C2201 * C31497) *
               C8928) *
              C31184 * C31218 * C1087 +
          (((C113 * C301 + C31383 * C316) * C1089 +
            (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
            C368 * C31525 + C369 * C1091 + C370 * C31497) *
               C8926 +
           ((C113 * C1300 + C31383 * C1315) * C1089 +
            (C113 * C1314 + C31383 * C1327) * C31538 - C1612 * C1090 -
            C1613 * C31525 + C1614 * C1091 + C1615 * C31497) *
               C8927 +
           ((C113 * C1301 + C31383 * C1316) * C1089 +
            (C113 * C1317 + C31383 * C1328) * C31538 -
            (C113 * C1302 + C31383 * C1318) * C1090 -
            (C113 * C1319 + C31383 * C1329) * C31525 +
            (C113 * C1303 + C31383 * C1320) * C1091 +
            (C113 * C1321 + C31383 * C1330) * C31497) *
               C8928) *
              C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C1160 +
            (C113 * C127 + C31383 * C140) * C31155) *
               C8926 +
           (C9174 * C1160 + C9175 * C31155) * C8927 +
           (C9176 * C1160 + C9177 * C31155) * C8928) *
              C31184 * C31218 * C1155 -
          ((C9567 * C31155 + C9568 * C1160) * C8928 +
           (C9565 * C31155 + C9566 * C1160) * C8927 +
           ((C113 * C307 + C31383 * C326) * C31155 +
            (C113 * C297 + C31383 * C308) * C1160) *
               C8926) *
              C31184 * C31218 * C1156 +
          (((C113 * C301 + C31383 * C316) * C1160 +
            (C113 * C317 + C31383 * C331) * C31155) *
               C8926 +
           ((C113 * C1300 + C31383 * C1315) * C1160 +
            (C113 * C1314 + C31383 * C1327) * C31155) *
               C8927 +
           ((C113 * C1301 + C31383 * C1316) * C1160 +
            (C113 * C1317 + C31383 * C1328) * C31155) *
               C8928) *
              C31184 * C31218 * C1157 -
          (((C113 * C5621 + C31383 * C5627) * C31155 +
            (C113 * C5618 + C31383 * C5622) * C1160) *
               C8928 +
           ((C113 * C1717 + C31383 * C1722) * C31155 +
            (C113 * C1713 + C31383 * C1716) * C1160) *
               C8927 +
           ((C113 * C1171 + C31383 * C1181) * C31155 +
            (C113 * C1163 + C31383 * C1172) * C1160) *
               C8926) *
              C31184 * C31218 * C1158 +
          (((C113 * C1164 + C31383 * C1173) * C1160 +
            (C113 * C1174 + C31383 * C1182) * C31155) *
               C8926 +
           ((C113 * C5619 + C31383 * C5624) * C1160 +
            (C113 * C5623 + C31383 * C5628) * C31155) *
               C8927 +
           ((C113 * C5620 + C31383 * C5625) * C1160 +
            (C113 * C5626 + C31383 * C5629) * C31155) *
               C8928) *
              C31184 * C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C8926 +
            (C9855 + C9856) * C8927 + C9881 * C8928) *
               C31184 * C31542 -
           ((C9859 + C9860) * C8928 + (C9858 + C9857) * C8927 +
            (C9856 + C9855) * C8926) *
               C31184 * C31531 +
           (C9881 * C8926 + (C9860 + C9859) * C8927 +
            ((C113 * C2018 + C31383 * C2027) * C1160 +
             (C113 * C2028 + C31383 * C2036) * C31155) *
                C8928) *
               C31184 * C31507) *
              C1086 +
          (((C9861 + C9862) * C8926 + (C9863 + C9864) * C8927 +
            (C9891 + C9892) * C8928) *
               C31184 * C31531 -
           (C9884 * C8928 + (C9862 + C9861) * C8927 +
            ((C113 * C307 + C31383 * C326) * C31155 +
             (C113 * C297 + C31383 * C308) * C1160) *
                C8926) *
               C31184 * C31542 -
           (((C113 * C6273 + C31383 * C6276) * C31155 +
             (C113 * C6267 + C31383 * C6271) * C1160) *
                C8928 +
            (C9892 + C9891) * C8927 + C9884 * C8926) *
               C31184 * C31507) *
              C1087 +
          ((((C113 * C301 + C31383 * C316) * C1160 +
             (C113 * C317 + C31383 * C331) * C31155) *
                C8926 +
            (C9893 + C9894) * C8927 + C9899 * C8928) *
               C31184 * C31542 -
           ((C9897 + C9898) * C8928 + (C9896 + C9895) * C8927 +
            (C9894 + C9893) * C8926) *
               C31184 * C31531 +
           (C9899 * C8926 + (C9898 + C9897) * C8927 +
            ((C113 * C6268 + C31383 * C6272) * C1160 +
             (C113 * C6274 + C31383 * C6277) * C31155) *
                C8928) *
               C31184 * C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C1089 +
            (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
            C169 * C31525 + C170 * C1091 + C171 * C31497) *
               C8926 +
           (C10398 + C10399 - C10400 - C10401 + C10402 + C10403) * C8927 +
           C10420 * C8928) *
              C31184 * C1835 +
          ((C10400 - (C10399 + C10398) + C10401 - C10402 - C10403) * C8926 +
           (C10406 - (C10405 + C10404) + C10407 - C10408 - C10409) * C8927 +
           (C10410 - (C10411 + C10412) + C10413 - C10414 - C10415) * C8928) *
              C31184 * C1836 +
          (C10420 * C8926 +
           (C10412 + C10411 - C10410 - C10413 + C10414 + C10415) * C8927 +
           ((C113 * C2018 + C31383 * C2027) * C1089 +
            (C113 * C2028 + C31383 * C2036) * C31538 -
            (C113 * C2019 + C31383 * C2029) * C1090 -
            (C113 * C2030 + C31383 * C2037) * C31525 +
            (C113 * C2020 + C31383 * C2031) * C1091 +
            (C113 * C2032 + C31383 * C2038) * C31497) *
               C8928) *
              C31184 * C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C8926 +
            (C9855 + C9856) * C8927 + C9881 * C8928) *
               C31184 * C1835 -
           ((C9859 + C9860) * C8928 + (C9858 + C9857) * C8927 +
            (C9856 + C9855) * C8926) *
               C31184 * C1836 +
           (C9881 * C8926 + (C9860 + C9859) * C8927 +
            ((C113 * C2018 + C31383 * C2027) * C1160 +
             (C113 * C2028 + C31383 * C2036) * C31155) *
                C8928) *
               C31184 * C31507) *
              C31541 +
          (((C9861 + C9862) * C8926 + (C9863 + C9864) * C8927 +
            (C9891 + C9892) * C8928) *
               C31184 * C1836 -
           (C9884 * C8928 + (C9862 + C9861) * C8927 +
            ((C113 * C307 + C31383 * C326) * C31155 +
             (C113 * C297 + C31383 * C308) * C1160) *
                C8926) *
               C31184 * C1835 -
           (((C113 * C6273 + C31383 * C6276) * C31155 +
             (C113 * C6267 + C31383 * C6271) * C1160) *
                C8928 +
            (C9892 + C9891) * C8927 + C9884 * C8926) *
               C31184 * C31507) *
              C31529 +
          ((((C113 * C301 + C31383 * C316) * C1160 +
             (C113 * C317 + C31383 * C331) * C31155) *
                C8926 +
            (C9893 + C9894) * C8927 + C9899 * C8928) *
               C31184 * C1835 -
           ((C9897 + C9898) * C8928 + (C9896 + C9895) * C8927 +
            (C9894 + C9893) * C8926) *
               C31184 * C1836 +
           (C9899 * C8926 + (C9898 + C9897) * C8927 +
            ((C113 * C6268 + C31383 * C6272) * C1160 +
             (C113 * C6274 + C31383 * C6277) * C31155) *
                C8928) *
               C31184 * C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C1160 +
            (C113 * C127 + C31383 * C140) * C31155) *
               C8926 +
           (C9855 + C9856) * C8927 + C9881 * C8928) *
              C31184 * C2010 -
          (C10601 * C8928 + (C9858 + C9857) * C8927 + (C9856 + C9855) * C8926) *
              C31184 * C2011 +
          (C9881 * C8926 + (C9860 + C9859) * C8927 + C10618 * C8928) * C31184 *
              C2012 -
          ((C10616 + C10617) * C8928 + (C10615 + C10614) * C8927 +
           C10601 * C8926) *
              C31184 * C2013 +
          (C10618 * C8926 + (C10617 + C10616) * C8927 +
           ((C113 * C10593 + C31383 * C10596) * C1160 +
            (C113 * C10597 + C31383 * C10599) * C31155) *
               C8928) *
              C31184 * C2014) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31383 * C126) * C665 +
                (C113 * C127 + C31383 * C140) * C659 - C168 * C666 -
                C169 * C660 + C170 * C667 + C171 * C661 - C172 * C668 -
                C173 * C31508) *
                   C31397 * C108 +
               (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
                C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31508) *
                   C31397 * C109 +
               (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
                C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31508) *
                   C31397 * C110) *
                  C31476 +
              ((C550 * C666 -
                ((C113 * C496 + C31383 * C515) * C659 +
                 (C113 * C486 + C31383 * C497) * C665) +
                C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
                C555 * C31508) *
                   C31397 * C108 +
               (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
                C554 * C667 - C555 * C661 + C788 * C668 + C789 * C31508) *
                   C31397 * C109 +
               (C554 * C666 - (C553 * C659 + C552 * C665) + C555 * C660 -
                C788 * C667 - C789 * C661 +
                (C113 * C779 + C31383 * C780) * C668 +
                (C113 * C781 + C31383 * C782) * C31508) *
                   C31397 * C110) *
                  C31305) *
             C31206 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31383 * C126) * C30274 +
                 (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
                 C169 * C31165) *
                    C31397 * C108 +
                (C168 * C30274 + C169 * C31457 - C170 * C30255 -
                 C171 * C31165) *
                    C31397 * C109 +
                (C170 * C30274 + C171 * C31457 - C172 * C30255 -
                 C173 * C31165) *
                    C31397 * C110) *
                   C31476 +
               ((C550 * C30255 -
                 ((C113 * C496 + C31383 * C515) * C31457 +
                  (C113 * C486 + C31383 * C497) * C30274) +
                 C551 * C31165) *
                    C31397 * C108 +
                (C552 * C30255 - (C551 * C31457 + C550 * C30274) +
                 C553 * C31165) *
                    C31397 * C109 +
                (C554 * C30255 - (C553 * C31457 + C552 * C30274) +
                 C555 * C31165) *
                    C31397 * C110) *
                   C31305) *
                  C1086 +
              (((C361 * C30255 -
                 ((C113 * C307 + C31383 * C326) * C31457 +
                  (C113 * C297 + C31383 * C308) * C30274) +
                 C362 * C31165) *
                    C31397 * C108 +
                (C363 * C30255 - (C362 * C31457 + C361 * C30274) +
                 C364 * C31165) *
                    C31397 * C109 +
                (C365 * C30255 - (C364 * C31457 + C363 * C30274) +
                 C366 * C31165) *
                    C31397 * C110) *
                   C31476 +
               (((C113 * C935 + C31383 * C940) * C30274 +
                 (C113 * C941 + C31383 * C950) * C31457 - C968 * C30255 -
                 C969 * C31165) *
                    C31397 * C108 +
                (C968 * C30274 + C969 * C31457 - C970 * C30255 -
                 C971 * C31165) *
                    C31397 * C109 +
                (C970 * C30274 + C971 * C31457 - C972 * C30255 -
                 C973 * C31165) *
                    C31397 * C110) *
                   C31305) *
                  C1087 +
              ((((C113 * C301 + C31383 * C316) * C30274 +
                 (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
                 C368 * C31165) *
                    C31397 * C108 +
                (C367 * C30274 + C368 * C31457 - C369 * C30255 -
                 C370 * C31165) *
                    C31397 * C109 +
                (C369 * C30274 + C370 * C31457 - C371 * C30255 -
                 C372 * C31165) *
                    C31397 * C110) *
                   C31476 +
               ((C1612 * C30255 -
                 ((C113 * C1314 + C31383 * C1327) * C31457 +
                  (C113 * C1300 + C31383 * C1315) * C30274) +
                 C1613 * C31165) *
                    C31397 * C108 +
                (C1614 * C30255 - (C1613 * C31457 + C1612 * C30274) +
                 C1615 * C31165) *
                    C31397 * C109 +
                ((C113 * C1599 + C31383 * C1600) * C30255 -
                 (C1615 * C31457 + C1614 * C30274) +
                 (C113 * C1601 + C31383 * C1602) * C31165) *
                    C31397 * C110) *
                   C31305) *
                  C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C30274 +
            (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
            C169 * C31165) *
               C31397 * C108 +
           (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
               C31397 * C109 +
           (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
               C31397 * C110) *
              C2299 +
          ((C550 * C30255 -
            ((C113 * C496 + C31383 * C515) * C31457 +
             (C113 * C486 + C31383 * C497) * C30274) +
            C551 * C31165) *
               C31397 * C108 +
           (C552 * C30255 - (C551 * C31457 + C550 * C30274) + C553 * C31165) *
               C31397 * C109 +
           (C554 * C30255 - (C553 * C31457 + C552 * C30274) + C555 * C31165) *
               C31397 * C110) *
              C2300 +
          (((C113 * C490 + C31383 * C505) * C30274 +
            (C113 * C506 + C31383 * C520) * C31457 - C556 * C30255 -
            C557 * C31165) *
               C31397 * C108 +
           (C556 * C30274 + C557 * C31457 - C558 * C30255 - C559 * C31165) *
               C31397 * C109 +
           (C558 * C30274 + C559 * C31457 - C560 * C30255 - C561 * C31165) *
               C31397 * C110) *
              C2301 +
          ((C2316 * C30255 -
            ((C113 * C2025 + C31383 * C2035) * C31457 +
             (C113 * C2017 + C31383 * C2026) * C30274) +
            C2317 * C31165) *
               C31397 * C108 +
           (C2318 * C30255 - (C2317 * C31457 + C2316 * C30274) +
            C2319 * C31165) *
               C31397 * C109 +
           ((C113 * C2303 + C31383 * C2304) * C30255 -
            (C2319 * C31457 + C2318 * C30274) +
            (C113 * C2305 + C31383 * C2306) * C31165) *
               C31397 * C110) *
              C31520) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C665 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C659 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C666 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C660 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C667 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C661 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C668 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C31476 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C666 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C659 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C665) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C660 -
           (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
            C4763 * C487 + C4759 * C499) *
               C667 -
           (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
            C4763 * C500 + C4759 * C517) *
               C661 +
           (C4763 * C488 + C4759 * C501 + C4764 * C938 + C4760 * C946 +
            C4765 * C1599 + C4761 * C1600) *
               C668 +
           (C4763 * C502 + C4759 * C518 + C4764 * C947 + C4760 * C953 +
            C4765 * C1601 + C4761 * C1602) *
               C31508) *
              C31397 * C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C30274 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31457 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C30255 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C30255 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31457 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C30274) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31305) *
              C1086 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C30255 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31457 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C30274) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C30274 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31457 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C30255 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31305) *
              C1087 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C30274 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C31457 -
            (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
             C4763 * C302 + C4759 * C318) *
                C30255 -
            (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
             C4763 * C319 + C4759 * C332) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C1299 + C4759 * C1313 + C4764 * C1714 + C4760 * C1718 +
             C4765 * C5878 + C4761 * C5879) *
                C30255 -
            ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
              C4763 * C1314 + C4759 * C1327) *
                 C31457 +
             (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
              C4763 * C1300 + C4759 * C1315) *
                 C30274) +
            (C4763 * C1312 + C4759 * C1326 + C4764 * C1719 + C4760 * C1723 +
             C4765 * C5880 + C4761 * C5881) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C30274 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31457 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C30255 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31165) *
              C31397 * C31184 * C2299 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C30255 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31457 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C30274) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C31165) *
              C31397 * C31184 * C2300 +
          ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
            C4765 * C1301 + C4761 * C1316) *
               C30274 +
           (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
            C4765 * C1317 + C4761 * C1328) *
               C31457 -
           (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
            C4763 * C491 + C4759 * C507) *
               C30255 -
           (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
            C4763 * C508 + C4759 * C521) *
               C31165) *
              C31397 * C31184 * C2301 +
          ((C4763 * C2016 + C4759 * C2024 + C4764 * C2418 + C4760 * C2422 +
            C4765 * C6526 + C4761 * C6527) *
               C30255 -
           ((C4765 * C6269 + C4761 * C6275 + C4764 * C2421 + C4760 * C2426 +
             C4763 * C2025 + C4759 * C2035) *
                C31457 +
            (C4765 * C6266 + C4761 * C6270 + C4764 * C2417 + C4760 * C2420 +
             C4763 * C2017 + C4759 * C2026) *
                C30274) +
           (C4763 * C2023 + C4759 * C2034 + C4764 * C2423 + C4760 * C2427 +
            C4765 * C6528 + C4761 * C6529) *
               C31165) *
              C31397 * C31184 * C31520) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C665 +
            (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
               C8926 +
           (C9387 + C9388 - C9389 - C9390 + C9391 + C9392 - C9393 - C9394) *
               C8927 +
           (C9395 + C9396 - C9397 - C9398 + C9399 + C9400 - C9401 - C9402) *
               C8928) *
              C31184 * C31476 +
          ((C9389 - (C9388 + C9387) + C9390 - C9391 - C9392 + C9393 + C9394) *
               C8926 +
           (C9397 - (C9396 + C9395) + C9398 - C9399 - C9400 + C9401 + C9402) *
               C8927 +
           (C2316 * C666 - (C9178 * C659 + C9179 * C665) + C2317 * C660 -
            C2318 * C667 - C2319 * C661 +
            (C113 * C2303 + C31383 * C2304) * C668 +
            (C113 * C2305 + C31383 * C2306) * C31508) *
               C8928) *
              C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C8926 +
            (C10144 + C10145 - C10146 - C10147) * C8927 +
            (C10148 + C10149 - C10150 - C10151) * C8928) *
               C31184 * C31476 +
           ((C10146 - (C10145 + C10144) + C10147) * C8926 +
            (C10150 - (C10149 + C10148) + C10151) * C8927 +
            (C2316 * C30255 - (C9178 * C31457 + C9179 * C30274) +
             C2317 * C31165) *
                C8928) *
               C31184 * C31305) *
              C1086 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C8926 +
            (C10152 - (C10153 + C10154) + C10155) * C8927 +
            (C10156 - (C10157 + C10158) + C10159) * C8928) *
               C31184 * C31476 +
           ((C10154 + C10153 - C10152 - C10155) * C8926 +
            (C10158 + C10157 - C10156 - C10159) * C8927 +
            (C9882 * C30274 + C9883 * C31457 -
             (C113 * C2418 + C31383 * C2422) * C30255 -
             (C113 * C2423 + C31383 * C2427) * C31165) *
                C8928) *
               C31184 * C31305) *
              C1087 +
          ((((C113 * C301 + C31383 * C316) * C30274 +
             (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
             C368 * C31165) *
                C8926 +
            (C10160 + C10161 - C10162 - C10163) * C8927 +
            (C10164 + C10165 - C10172 - C10173) * C8928) *
               C31184 * C31476 +
           ((C10162 - (C10161 + C10160) + C10163) * C8926 +
            (C10172 - (C10165 + C10164) + C10173) * C8927 +
            ((C113 * C6526 + C31383 * C6527) * C30255 -
             (C9889 * C31457 + C9890 * C30274) +
             (C113 * C6528 + C31383 * C6529) * C31165) *
                C8928) *
               C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C30274 +
            (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
            C169 * C31165) *
               C8926 +
           (C10144 + C10145 - C10146 - C10147) * C8927 + C10785 * C8928) *
              C31184 * C2299 +
          ((C10146 - (C10145 + C10144) + C10147) * C8926 +
           (C10150 - (C10149 + C10148) + C10151) * C8927 + C10901 * C8928) *
              C31184 * C2300 +
          (C10785 * C8926 + (C10772 + C10771 - C10770 - C10773) * C8927 +
           (C10892 + C10893 - C10902 - C10903) * C8928) *
              C31184 * C2301 +
          (C10901 * C8926 + (C10902 - (C10893 + C10892) + C10903) * C8927 +
           ((C113 * C10886 + C31383 * C10887) * C30255 -
            (C10612 * C31457 + C10613 * C30274) +
            (C113 * C10888 + C31383 * C10889) * C31165) *
               C8928) *
              C31184 * C31520) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31383 * C126) * C114 +
           (C113 * C127 + C31383 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C31397 * C108 +
          (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 + C172 * C116 +
           C173 * C104 - C174 * C117 - C175 * C105 + C176 * C118 +
           C177 * C106) *
              C31397 * C109 +
          (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 + C174 * C116 +
           C175 * C104 - C176 * C117 - C177 * C105 +
           (C113 * C125 + C31383 * C138) * C118 +
           (C113 * C139 + C31383 * C146) * C106) *
              C31397 * C110) *
         C31218 * C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C293 +
            (C113 * C127 + C31383 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31497) *
               C31397 * C108 +
           (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
            C172 * C295 + C173 * C31497) *
               C31397 * C109 +
           (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
            C174 * C295 + C175 * C31497) *
               C31397 * C110) *
              C31218 * C31541 +
          ((C361 * C294 -
            ((C113 * C307 + C31383 * C326) * C287 +
             (C113 * C297 + C31383 * C308) * C293) +
            C362 * C288 - C363 * C295 - C364 * C31497) *
               C31397 * C108 +
           (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
            C365 * C295 - C366 * C31497) *
               C31397 * C109 +
           (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
            (C113 * C300 + C31383 * C314) * C295 -
            (C113 * C315 + C31383 * C330) * C31497) *
               C31397 * C110) *
              C31218 * C31529 +
          (((C113 * C301 + C31383 * C316) * C293 +
            (C113 * C317 + C31383 * C331) * C287 - C367 * C294 - C368 * C288 +
            C369 * C295 + C370 * C31497) *
               C31397 * C108 +
           (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
            C371 * C295 + C372 * C31497) *
               C31397 * C109 +
           (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
            (C113 * C305 + C31383 * C324) * C295 +
            (C113 * C325 + C31383 * C335) * C31497) *
               C31397 * C110) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C1089 +
            (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
            C169 * C31525 + C170 * C1091 + C171 * C31497) *
               C31397 * C108 +
           (C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
            C172 * C1091 + C173 * C31497) *
               C31397 * C109 +
           (C170 * C1089 + C171 * C31538 - C172 * C1090 - C173 * C31525 +
            C174 * C1091 + C175 * C31497) *
               C31397 * C110) *
              C31218 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C31383 * C326) * C31538 +
             (C113 * C297 + C31383 * C308) * C1089) +
            C362 * C31525 - C363 * C1091 - C364 * C31497) *
               C31397 * C108 +
           (C363 * C1090 - (C362 * C31538 + C361 * C1089) + C364 * C31525 -
            C365 * C1091 - C366 * C31497) *
               C31397 * C109 +
           (C365 * C1090 - (C364 * C31538 + C363 * C1089) + C366 * C31525 -
            C678 * C1091 - C679 * C31497) *
               C31397 * C110) *
              C31218 * C1087 +
          (((C113 * C301 + C31383 * C316) * C1089 +
            (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
            C368 * C31525 + C369 * C1091 + C370 * C31497) *
               C31397 * C108 +
           (C367 * C1089 + C368 * C31538 - C369 * C1090 - C370 * C31525 +
            C371 * C1091 + C372 * C31497) *
               C31397 * C109 +
           (C369 * C1089 + C370 * C31538 - C371 * C1090 - C372 * C31525 +
            (C113 * C305 + C31383 * C324) * C1091 +
            (C113 * C325 + C31383 * C335) * C31497) *
               C31397 * C110) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C1160 +
            (C113 * C127 + C31383 * C140) * C31155) *
               C31397 * C108 +
           (C168 * C1160 + C169 * C31155) * C31397 * C109 +
           (C170 * C1160 + C171 * C31155) * C31397 * C110) *
              C31218 * C1155 -
          ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
           (C362 * C31155 + C361 * C1160) * C31397 * C109 +
           ((C113 * C307 + C31383 * C326) * C31155 +
            (C113 * C297 + C31383 * C308) * C1160) *
               C31397 * C108) *
              C31218 * C1156 +
          (((C113 * C301 + C31383 * C316) * C1160 +
            (C113 * C317 + C31383 * C331) * C31155) *
               C31397 * C108 +
           (C367 * C1160 + C368 * C31155) * C31397 * C109 +
           (C369 * C1160 + C370 * C31155) * C31397 * C110) *
              C31218 * C1157 -
          (((C113 * C1167 + C31383 * C1179) * C31155 +
            (C113 * C1161 + C31383 * C1168) * C1160) *
               C31397 * C110 +
           ((C113 * C1169 + C31383 * C1180) * C31155 +
            (C113 * C1162 + C31383 * C1170) * C1160) *
               C31397 * C109 +
           ((C113 * C1171 + C31383 * C1181) * C31155 +
            (C113 * C1163 + C31383 * C1172) * C1160) *
               C31397 * C108) *
              C31218 * C1158 +
          (((C113 * C1164 + C31383 * C1173) * C1160 +
            (C113 * C1174 + C31383 * C1182) * C31155) *
               C31397 * C108 +
           ((C113 * C1165 + C31383 * C1175) * C1160 +
            (C113 * C1176 + C31383 * C1183) * C31155) *
               C31397 * C109 +
           ((C113 * C1166 + C31383 * C1177) * C1160 +
            (C113 * C1178 + C31383 * C1184) * C31155) *
               C31397 * C110) *
              C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C1089 +
            (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
            C169 * C31525 + C170 * C1091 + C171 * C31497) *
               C31397 * C108 +
           (C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
            C172 * C1091 + C173 * C31497) *
               C31397 * C109 +
           (C170 * C1089 + C171 * C31538 - C172 * C1090 - C173 * C31525 +
            C174 * C1091 + C175 * C31497) *
               C31397 * C110) *
              C1835 +
          ((C550 * C1090 -
            ((C113 * C496 + C31383 * C515) * C31538 +
             (C113 * C486 + C31383 * C497) * C1089) +
            C551 * C31525 - C552 * C1091 - C553 * C31497) *
               C31397 * C108 +
           (C552 * C1090 - (C551 * C31538 + C550 * C1089) + C553 * C31525 -
            C554 * C1091 - C555 * C31497) *
               C31397 * C109 +
           (C554 * C1090 - (C553 * C31538 + C552 * C1089) + C555 * C31525 -
            C788 * C1091 - C789 * C31497) *
               C31397 * C110) *
              C1836 +
          (((C113 * C490 + C31383 * C505) * C1089 +
            (C113 * C506 + C31383 * C520) * C31538 - C556 * C1090 -
            C557 * C31525 + C558 * C1091 + C559 * C31497) *
               C31397 * C108 +
           (C556 * C1089 + C557 * C31538 - C558 * C1090 - C559 * C31525 +
            C560 * C1091 + C561 * C31497) *
               C31397 * C109 +
           (C558 * C1089 + C559 * C31538 - C560 * C1090 - C561 * C31525 +
            (C113 * C494 + C31383 * C513) * C1091 +
            (C113 * C514 + C31383 * C524) * C31497) *
               C31397 * C110) *
              C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C31397 * C108 +
            (C168 * C1160 + C169 * C31155) * C31397 * C109 +
            (C170 * C1160 + C171 * C31155) * C31397 * C110) *
               C1835 -
           ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
            (C551 * C31155 + C550 * C1160) * C31397 * C109 +
            ((C113 * C496 + C31383 * C515) * C31155 +
             (C113 * C486 + C31383 * C497) * C1160) *
                C31397 * C108) *
               C1836 +
           (((C113 * C490 + C31383 * C505) * C1160 +
             (C113 * C506 + C31383 * C520) * C31155) *
                C31397 * C108 +
            (C556 * C1160 + C557 * C31155) * C31397 * C109 +
            (C558 * C1160 + C559 * C31155) * C31397 * C110) *
               C31507) *
              C31541 +
          ((((C113 * C935 + C31383 * C940) * C1160 +
             (C113 * C941 + C31383 * C950) * C31155) *
                C31397 * C108 +
            (C968 * C1160 + C969 * C31155) * C31397 * C109 +
            (C970 * C1160 + C971 * C31155) * C31397 * C110) *
               C1836 -
           ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
            (C362 * C31155 + C361 * C1160) * C31397 * C109 +
            ((C113 * C307 + C31383 * C326) * C31155 +
             (C113 * C297 + C31383 * C308) * C1160) *
                C31397 * C108) *
               C1835 -
           (((C113 * C1304 + C31383 * C1322) * C31155 +
             (C113 * C1295 + C31383 * C1305) * C1160) *
                C31397 * C110 +
            ((C113 * C1306 + C31383 * C1323) * C31155 +
             (C113 * C1296 + C31383 * C1307) * C1160) *
                C31397 * C109 +
            ((C113 * C1308 + C31383 * C1324) * C31155 +
             (C113 * C1297 + C31383 * C1309) * C1160) *
                C31397 * C108) *
               C31507) *
              C31529 +
          ((((C113 * C301 + C31383 * C316) * C1160 +
             (C113 * C317 + C31383 * C331) * C31155) *
                C31397 * C108 +
            (C367 * C1160 + C368 * C31155) * C31397 * C109 +
            (C369 * C1160 + C370 * C31155) * C31397 * C110) *
               C1835 -
           ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
            (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
            ((C113 * C1314 + C31383 * C1327) * C31155 +
             (C113 * C1300 + C31383 * C1315) * C1160) *
                C31397 * C108) *
               C1836 +
           (((C113 * C1301 + C31383 * C1316) * C1160 +
             (C113 * C1317 + C31383 * C1328) * C31155) *
                C31397 * C108 +
            ((C113 * C1302 + C31383 * C1318) * C1160 +
             (C113 * C1319 + C31383 * C1329) * C31155) *
                C31397 * C109 +
            ((C113 * C1303 + C31383 * C1320) * C1160 +
             (C113 * C1321 + C31383 * C1330) * C31155) *
                C31397 * C110) *
               C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
           C4765 * C301 + C4761 * C316) *
              C114 +
          (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
           C4765 * C317 + C4761 * C331) *
              C102 -
          (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
           C4763 * C120 + C4759 * C128) *
              C115 -
          (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
           C4763 * C129 + C4759 * C141) *
              C103 +
          (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
           C4765 * C303 + C4761 * C320) *
              C116 +
          (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
           C4765 * C321 + C4761 * C333) *
              C104 -
          (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
           C4763 * C122 + C4759 * C132) *
              C117 -
          (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
           C4763 * C133 + C4759 * C143) *
              C105 +
          (C4763 * C123 + C4759 * C134 + C4764 * C300 + C4760 * C314 +
           C4765 * C305 + C4761 * C324) *
              C118 +
          (C4763 * C135 + C4759 * C144 + C4764 * C315 + C4760 * C330 +
           C4765 * C325 + C4761 * C335) *
              C106) *
         C31397 * C31184 * C31218 * C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C293 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C287 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C294 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C288 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C295 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31497) *
              C31397 * C31184 * C31218 * C31541 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C294 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C287 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C293) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C288 -
           (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
            C4763 * C298 + C4759 * C310) *
               C295 -
           (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
            C4763 * C311 + C4759 * C328) *
               C31497) *
              C31397 * C31184 * C31218 * C31529 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C293 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C287 -
           (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
            C4763 * C302 + C4759 * C318) *
               C294 -
           (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
            C4763 * C319 + C4759 * C332) *
               C288 +
           (C4763 * C303 + C4759 * C320 + C4764 * C1161 + C4760 * C1168 +
            C4765 * C1166 + C4761 * C1177) *
               C295 +
           (C4763 * C321 + C4759 * C333 + C4764 * C1167 + C4760 * C1179 +
            C4765 * C1178 + C4761 * C1184) *
               C31497) *
              C31397 * C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C1089 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31538 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C1090 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31525 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C1091 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31497) *
              C31397 * C31184 * C31218 * C1086 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C1090 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31538 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C1089) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31525 -
           (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
            C4763 * C298 + C4759 * C310) *
               C1091 -
           (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
            C4763 * C311 + C4759 * C328) *
               C31497) *
              C31397 * C31184 * C31218 * C1087 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C1089 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C31538 -
           (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
            C4763 * C302 + C4759 * C318) *
               C1090 -
           (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
            C4763 * C319 + C4759 * C332) *
               C31525 +
           (C4763 * C303 + C4759 * C320 + C4764 * C1161 + C4760 * C1168 +
            C4765 * C1166 + C4761 * C1177) *
               C1091 +
           (C4763 * C321 + C4759 * C333 + C4764 * C1167 + C4760 * C1179 +
            C4765 * C1178 + C4761 * C1184) *
               C31497) *
              C31397 * C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C1160 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31155) *
              C31397 * C31184 * C31218 * C1155 -
          ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
            C4763 * C307 + C4759 * C326) *
               C31155 +
           (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
            C4763 * C297 + C4759 * C308) *
               C1160) *
              C31397 * C31184 * C31218 * C1156 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C1160 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C31155) *
              C31397 * C31184 * C31218 * C1157 -
          ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 + C4760 * C1182 +
            C4763 * C1171 + C4759 * C1181) *
               C31155 +
           (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 + C4760 * C1173 +
            C4763 * C1163 + C4759 * C1172) *
               C1160) *
              C31397 * C31184 * C31218 * C1158 +
          ((C4763 * C1164 + C4759 * C1173 + C4764 * C5500 + C4760 * C5503 +
            C4765 * C5501 + C4761 * C5504) *
               C1160 +
           (C4763 * C1174 + C4759 * C1182 + C4764 * C5502 + C4760 * C5506 +
            C4765 * C5505 + C4761 * C5507) *
               C31155) *
              C31397 * C31184 * C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C1089 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31538 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C1090 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31525 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C1091 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31497) *
              C31397 * C31184 * C1835 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C1090 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31538 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C1089) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C31525 -
           (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
            C4763 * C487 + C4759 * C499) *
               C1091 -
           (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
            C4763 * C500 + C4759 * C517) *
               C31497) *
              C31397 * C31184 * C1836 +
          ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
            C4765 * C1301 + C4761 * C1316) *
               C1089 +
           (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
            C4765 * C1317 + C4761 * C1328) *
               C31538 -
           (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
            C4763 * C491 + C4759 * C507) *
               C1090 -
           (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
            C4763 * C508 + C4759 * C521) *
               C31525 +
           (C4763 * C492 + C4759 * C509 + C4764 * C1295 + C4760 * C1305 +
            C4765 * C1303 + C4761 * C1320) *
               C1091 +
           (C4763 * C510 + C4759 * C522 + C4764 * C1304 + C4760 * C1322 +
            C4765 * C1321 + C4761 * C1330) *
               C31497) *
              C31397 * C31184 * C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C1160 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31155) *
               C31397 * C31184 * C1835 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31155 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C1160) *
               C31397 * C31184 * C1836 +
           ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
             C4765 * C1301 + C4761 * C1316) *
                C1160 +
            (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
             C4765 * C1317 + C4761 * C1328) *
                C31155) *
               C31397 * C31184 * C31507) *
              C31541 +
          (((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C1160 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31155) *
               C31397 * C31184 * C1836 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31155 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C1160) *
               C31397 * C31184 * C1835 -
           ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 + C4760 * C1328 +
             C4763 * C1308 + C4759 * C1324) *
                C31155 +
            (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 + C4760 * C1316 +
             C4763 * C1297 + C4759 * C1309) *
                C1160) *
               C31397 * C31184 * C31507) *
              C31529 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C1160 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C31155) *
               C31397 * C31184 * C1835 -
           ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
             C4763 * C1314 + C4759 * C1327) *
                C31155 +
            (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
             C4763 * C1300 + C4759 * C1315) *
                C1160) *
               C31397 * C31184 * C1836 +
           ((C4763 * C1301 + C4759 * C1316 + C4764 * C5618 + C4760 * C5622 +
             C4765 * C5620 + C4761 * C5625) *
                C1160 +
            (C4763 * C1317 + C4759 * C1328 + C4764 * C5621 + C4760 * C5627 +
             C4765 * C5626 + C4761 * C5629) *
                C31155) *
               C31397 * C31184 * C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31383 * C126) * C114 +
           (C113 * C127 + C31383 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C8926 +
          ((C113 * C486 + C31383 * C497) * C114 +
           (C113 * C496 + C31383 * C515) * C102 - C550 * C115 - C551 * C103 +
           C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 + C788 * C118 +
           C789 * C106) *
              C8927 +
          ((C113 * C490 + C31383 * C505) * C114 +
           (C113 * C506 + C31383 * C520) * C102 - C556 * C115 - C557 * C103 +
           C558 * C116 + C559 * C104 - C560 * C117 - C561 * C105 +
           (C113 * C494 + C31383 * C513) * C118 +
           (C113 * C514 + C31383 * C524) * C106) *
              C8928) *
         C31184 * C31218 * C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C293 +
            (C113 * C127 + C31383 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31497) *
               C8926 +
           ((C113 * C486 + C31383 * C497) * C293 +
            (C113 * C496 + C31383 * C515) * C287 - C550 * C294 - C551 * C288 +
            C552 * C295 + C553 * C31497) *
               C8927 +
           ((C113 * C490 + C31383 * C505) * C293 +
            (C113 * C506 + C31383 * C520) * C287 - C556 * C294 - C557 * C288 +
            C558 * C295 + C559 * C31497) *
               C8928) *
              C31184 * C31218 * C31541 +
          ((C361 * C294 -
            ((C113 * C307 + C31383 * C326) * C287 +
             (C113 * C297 + C31383 * C308) * C293) +
            C362 * C288 - C363 * C295 - C364 * C31497) *
               C8926 +
           (C968 * C294 -
            ((C113 * C941 + C31383 * C950) * C287 +
             (C113 * C935 + C31383 * C940) * C293) +
            C969 * C288 - C970 * C295 - C971 * C31497) *
               C8927 +
           (C2198 * C294 -
            ((C113 * C1308 + C31383 * C1324) * C287 +
             (C113 * C1297 + C31383 * C1309) * C293) +
            C2199 * C288 - C2200 * C295 - C2201 * C31497) *
               C8928) *
              C31184 * C31218 * C31529 +
          (((C113 * C301 + C31383 * C316) * C293 +
            (C113 * C317 + C31383 * C331) * C287 - C367 * C294 - C368 * C288 +
            C369 * C295 + C370 * C31497) *
               C8926 +
           ((C113 * C1300 + C31383 * C1315) * C293 +
            (C113 * C1314 + C31383 * C1327) * C287 - C1612 * C294 -
            C1613 * C288 + C1614 * C295 + C1615 * C31497) *
               C8927 +
           ((C113 * C1301 + C31383 * C1316) * C293 +
            (C113 * C1317 + C31383 * C1328) * C287 -
            (C113 * C1302 + C31383 * C1318) * C294 -
            (C113 * C1319 + C31383 * C1329) * C288 +
            (C113 * C1303 + C31383 * C1320) * C295 +
            (C113 * C1321 + C31383 * C1330) * C31497) *
               C8928) *
              C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C1089 +
            (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
            C169 * C31525 + C170 * C1091 + C171 * C31497) *
               C8926 +
           (C9174 * C1089 + C9175 * C31538 - C550 * C1090 - C551 * C31525 +
            C552 * C1091 + C553 * C31497) *
               C8927 +
           (C9176 * C1089 + C9177 * C31538 - C556 * C1090 - C557 * C31525 +
            C558 * C1091 + C559 * C31497) *
               C8928) *
              C31184 * C31218 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C31383 * C326) * C31538 +
             (C113 * C297 + C31383 * C308) * C1089) +
            C362 * C31525 - C363 * C1091 - C364 * C31497) *
               C8926 +
           (C968 * C1090 - (C9565 * C31538 + C9566 * C1089) + C969 * C31525 -
            C970 * C1091 - C971 * C31497) *
               C8927 +
           (C2198 * C1090 - (C9567 * C31538 + C9568 * C1089) + C2199 * C31525 -
            C2200 * C1091 - C2201 * C31497) *
               C8928) *
              C31184 * C31218 * C1087 +
          (((C113 * C301 + C31383 * C316) * C1089 +
            (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
            C368 * C31525 + C369 * C1091 + C370 * C31497) *
               C8926 +
           ((C113 * C1300 + C31383 * C1315) * C1089 +
            (C113 * C1314 + C31383 * C1327) * C31538 - C1612 * C1090 -
            C1613 * C31525 + C1614 * C1091 + C1615 * C31497) *
               C8927 +
           ((C113 * C1301 + C31383 * C1316) * C1089 +
            (C113 * C1317 + C31383 * C1328) * C31538 -
            (C113 * C1302 + C31383 * C1318) * C1090 -
            (C113 * C1319 + C31383 * C1329) * C31525 +
            (C113 * C1303 + C31383 * C1320) * C1091 +
            (C113 * C1321 + C31383 * C1330) * C31497) *
               C8928) *
              C31184 * C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C1160 +
            (C113 * C127 + C31383 * C140) * C31155) *
               C8926 +
           (C9174 * C1160 + C9175 * C31155) * C8927 +
           (C9176 * C1160 + C9177 * C31155) * C8928) *
              C31184 * C31218 * C1155 -
          ((C9567 * C31155 + C9568 * C1160) * C8928 +
           (C9565 * C31155 + C9566 * C1160) * C8927 +
           ((C113 * C307 + C31383 * C326) * C31155 +
            (C113 * C297 + C31383 * C308) * C1160) *
               C8926) *
              C31184 * C31218 * C1156 +
          (((C113 * C301 + C31383 * C316) * C1160 +
            (C113 * C317 + C31383 * C331) * C31155) *
               C8926 +
           ((C113 * C1300 + C31383 * C1315) * C1160 +
            (C113 * C1314 + C31383 * C1327) * C31155) *
               C8927 +
           ((C113 * C1301 + C31383 * C1316) * C1160 +
            (C113 * C1317 + C31383 * C1328) * C31155) *
               C8928) *
              C31184 * C31218 * C1157 -
          (((C113 * C5621 + C31383 * C5627) * C31155 +
            (C113 * C5618 + C31383 * C5622) * C1160) *
               C8928 +
           ((C113 * C1717 + C31383 * C1722) * C31155 +
            (C113 * C1713 + C31383 * C1716) * C1160) *
               C8927 +
           ((C113 * C1171 + C31383 * C1181) * C31155 +
            (C113 * C1163 + C31383 * C1172) * C1160) *
               C8926) *
              C31184 * C31218 * C1158 +
          (((C113 * C1164 + C31383 * C1173) * C1160 +
            (C113 * C1174 + C31383 * C1182) * C31155) *
               C8926 +
           ((C113 * C5619 + C31383 * C5624) * C1160 +
            (C113 * C5623 + C31383 * C5628) * C31155) *
               C8927 +
           ((C113 * C5620 + C31383 * C5625) * C1160 +
            (C113 * C5626 + C31383 * C5629) * C31155) *
               C8928) *
              C31184 * C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C1089 +
            (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
            C169 * C31525 + C170 * C1091 + C171 * C31497) *
               C8926 +
           (C10398 + C10399 - C10400 - C10401 + C10402 + C10403) * C8927 +
           C10420 * C8928) *
              C31184 * C1835 +
          ((C10400 - (C10399 + C10398) + C10401 - C10402 - C10403) * C8926 +
           (C10406 - (C10405 + C10404) + C10407 - C10408 - C10409) * C8927 +
           (C10410 - (C10411 + C10412) + C10413 - C10414 - C10415) * C8928) *
              C31184 * C1836 +
          (C10420 * C8926 +
           (C10412 + C10411 - C10410 - C10413 + C10414 + C10415) * C8927 +
           ((C113 * C2018 + C31383 * C2027) * C1089 +
            (C113 * C2028 + C31383 * C2036) * C31538 -
            (C113 * C2019 + C31383 * C2029) * C1090 -
            (C113 * C2030 + C31383 * C2037) * C31525 +
            (C113 * C2020 + C31383 * C2031) * C1091 +
            (C113 * C2032 + C31383 * C2038) * C31497) *
               C8928) *
              C31184 * C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C8926 +
            (C9855 + C9856) * C8927 + C9881 * C8928) *
               C31184 * C1835 -
           ((C9859 + C9860) * C8928 + (C9858 + C9857) * C8927 +
            (C9856 + C9855) * C8926) *
               C31184 * C1836 +
           (C9881 * C8926 + (C9860 + C9859) * C8927 +
            ((C113 * C2018 + C31383 * C2027) * C1160 +
             (C113 * C2028 + C31383 * C2036) * C31155) *
                C8928) *
               C31184 * C31507) *
              C31541 +
          (((C9861 + C9862) * C8926 + (C9863 + C9864) * C8927 +
            (C9891 + C9892) * C8928) *
               C31184 * C1836 -
           (C9884 * C8928 + (C9862 + C9861) * C8927 +
            ((C113 * C307 + C31383 * C326) * C31155 +
             (C113 * C297 + C31383 * C308) * C1160) *
                C8926) *
               C31184 * C1835 -
           (((C113 * C6273 + C31383 * C6276) * C31155 +
             (C113 * C6267 + C31383 * C6271) * C1160) *
                C8928 +
            (C9892 + C9891) * C8927 + C9884 * C8926) *
               C31184 * C31507) *
              C31529 +
          ((((C113 * C301 + C31383 * C316) * C1160 +
             (C113 * C317 + C31383 * C331) * C31155) *
                C8926 +
            (C9893 + C9894) * C8927 + C9899 * C8928) *
               C31184 * C1835 -
           ((C9897 + C9898) * C8928 + (C9896 + C9895) * C8927 +
            (C9894 + C9893) * C8926) *
               C31184 * C1836 +
           (C9899 * C8926 + (C9898 + C9897) * C8927 +
            ((C113 * C6268 + C31383 * C6272) * C1160 +
             (C113 * C6274 + C31383 * C6277) * C31155) *
                C8928) *
               C31184 * C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C30284 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31160 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C30280 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31168 +
            (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
             C4765 * C303 + C4761 * C320) *
                C30290 +
            (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
             C4765 * C321 + C4761 * C333) *
                C2901) *
               C31397 * C31184 * C3298 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C30280 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31160 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C30284) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31168 -
            (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
             C4763 * C487 + C4759 * C499) *
                C30290 -
            (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
             C4763 * C500 + C4759 * C517) *
                C2901) *
               C31397 * C31184 * C31305) *
              C31475 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C30280 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31160 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C30284) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31168 -
            (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
             C4763 * C298 + C4759 * C310) *
                C30290 -
            (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
             C4763 * C311 + C4759 * C328) *
                C2901) *
               C31397 * C31184 * C3298 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C30284 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31160 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C30280 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31168 +
            (C4763 * C937 + C4759 * C944 + C4764 * C1298 + C4760 * C1311 +
             C4765 * C1715 + C4761 * C1720) *
                C30290 +
            (C4763 * C945 + C4759 * C952 + C4764 * C1310 + C4760 * C1325 +
             C4765 * C1721 + C4761 * C1724) *
                C2901) *
               C31397 * C31184 * C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30284 +
             (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
             C169 * C31168 + C170 * C30290 + C171 * C2901) *
                C31397 * C108 +
            (C168 * C30284 + C169 * C31160 - C170 * C30280 - C171 * C31168 +
             C172 * C30290 + C173 * C2901) *
                C31397 * C109 +
            (C170 * C30284 + C171 * C31160 - C172 * C30280 - C173 * C31168 +
             C174 * C30290 + C175 * C2901) *
                C31397 * C110) *
               C3298 +
           ((C550 * C30280 -
             ((C113 * C496 + C31383 * C515) * C31160 +
              (C113 * C486 + C31383 * C497) * C30284) +
             C551 * C31168 - C552 * C30290 - C553 * C2901) *
                C31397 * C108 +
            (C552 * C30280 - (C551 * C31160 + C550 * C30284) + C553 * C31168 -
             C554 * C30290 - C555 * C2901) *
                C31397 * C109 +
            (C554 * C30280 - (C553 * C31160 + C552 * C30284) + C555 * C31168 -
             C788 * C30290 - C789 * C2901) *
                C31397 * C110) *
               C31305) *
              C31475 +
          (((C361 * C30280 -
             ((C113 * C307 + C31383 * C326) * C31160 +
              (C113 * C297 + C31383 * C308) * C30284) +
             C362 * C31168 - C363 * C30290 - C364 * C2901) *
                C31397 * C108 +
            (C363 * C30280 - (C362 * C31160 + C361 * C30284) + C364 * C31168 -
             C365 * C30290 - C366 * C2901) *
                C31397 * C109 +
            (C365 * C30280 - (C364 * C31160 + C363 * C30284) + C366 * C31168 -
             C678 * C30290 - C679 * C2901) *
                C31397 * C110) *
               C3298 +
           (((C113 * C935 + C31383 * C940) * C30284 +
             (C113 * C941 + C31383 * C950) * C31160 - C968 * C30280 -
             C969 * C31168 + C970 * C30290 + C971 * C2901) *
                C31397 * C108 +
            (C968 * C30284 + C969 * C31160 - C970 * C30280 - C971 * C31168 +
             C972 * C30290 + C973 * C2901) *
                C31397 * C109 +
            (C970 * C30284 + C971 * C31160 - C972 * C30280 - C973 * C31168 +
             (C113 * C939 + C31383 * C948) * C30290 +
             (C113 * C949 + C31383 * C954) * C2901) *
                C31397 * C110) *
               C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30284 +
             (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
             C169 * C31168 + C170 * C30290 + C171 * C2901) *
                C8926 +
            (C11643 + C11644 - C11645 - C11646 + C11647 + C11648) * C8927 +
            (C11649 + C11650 - C11651 - C11652 + C11653 + C11654) * C8928) *
               C31184 * C3298 +
           ((C11645 - (C11644 + C11643) + C11646 - C11647 - C11648) * C8926 +
            (C11651 - (C11650 + C11649) + C11652 - C11653 - C11654) * C8927 +
            (C2316 * C30280 - (C9178 * C31160 + C9179 * C30284) +
             C2317 * C31168 - C2318 * C30290 - C2319 * C2901) *
                C8928) *
               C31184 * C31305) *
              C31475 +
          (((C361 * C30280 -
             ((C113 * C307 + C31383 * C326) * C31160 +
              (C113 * C297 + C31383 * C308) * C30284) +
             C362 * C31168 - C363 * C30290 - C364 * C2901) *
                C8926 +
            (C11655 - (C11656 + C11657) + C11658 - C11659 - C11660) * C8927 +
            (C11661 - (C11662 + C11663) + C11664 - C11665 - C11666) * C8928) *
               C31184 * C3298 +
           ((C11657 + C11656 - C11655 - C11658 + C11659 + C11660) * C8926 +
            (C11663 + C11662 - C11661 - C11664 + C11665 + C11666) * C8927 +
            (C9882 * C30284 + C9883 * C31160 - C10783 * C30280 -
             C10784 * C31168 + (C113 * C2419 + C31383 * C2424) * C30290 +
             (C113 * C2425 + C31383 * C2428) * C2901) *
                C8928) *
               C31184 * C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C2641 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C2635 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C2642 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C31301 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C2642 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C2635 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C2641) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31308 +
           ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
             C4765 * C1301 + C4761 * C1316) *
                C2641 +
            (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
             C4765 * C1317 + C4761 * C1328) *
                C2635 -
            (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
             C4763 * C491 + C4759 * C507) *
                C2642 -
            (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
             C4763 * C508 + C4759 * C521) *
                C31165) *
               C31397 * C31184 * C3806) *
              C31475 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C2642 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C2635 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C2641) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C31301 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C2641 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C2635 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C2642 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31308 +
           ((C4763 * C1296 + C4759 * C1307 + C4764 * C1302 + C4760 * C1318 +
             C4765 * C6424 + C4761 * C6425) *
                C2642 -
            ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 + C4760 * C1328 +
              C4763 * C1308 + C4759 * C1324) *
                 C2635 +
             (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 + C4760 * C1316 +
              C4763 * C1297 + C4759 * C1309) *
                 C2641) +
            (C4763 * C1306 + C4759 * C1323 + C4764 * C1319 + C4760 * C1329 +
             C4765 * C6426 + C4761 * C6427) *
                C31165) *
               C31397 * C31184 * C3806) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
                C31397 * C110) *
               C31301 +
           ((C550 * C2642 -
             ((C113 * C496 + C31383 * C515) * C2635 +
              (C113 * C486 + C31383 * C497) * C2641) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31165) *
                C31397 * C110) *
               C31308 +
           (((C113 * C490 + C31383 * C505) * C2641 +
             (C113 * C506 + C31383 * C520) * C2635 - C556 * C2642 -
             C557 * C31165) *
                C31397 * C108 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31165) *
                C31397 * C109 +
            (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C31165) *
                C31397 * C110) *
               C3806) *
              C31475 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
                C31397 * C110) *
               C31301 +
           (((C113 * C935 + C31383 * C940) * C2641 +
             (C113 * C941 + C31383 * C950) * C2635 - C968 * C2642 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31165) *
                C31397 * C110) *
               C31308 +
           ((C2198 * C2642 -
             ((C113 * C1308 + C31383 * C1324) * C2635 +
              (C113 * C1297 + C31383 * C1309) * C2641) +
             C2199 * C31165) *
                C31397 * C108 +
            (C2200 * C2642 - (C2199 * C2635 + C2198 * C2641) + C2201 * C31165) *
                C31397 * C109 +
            ((C113 * C2185 + C31383 * C2186) * C2642 -
             (C2201 * C2635 + C2200 * C2641) +
             (C113 * C2187 + C31383 * C2188) * C31165) *
                C31397 * C110) *
               C3806) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C8926 +
            (C11357 + C11358 - C11359 - C11360) * C8927 + C11385 * C8928) *
               C31184 * C31301 +
           ((C11359 - (C11358 + C11357) + C11360) * C8926 +
            (C11363 - (C11362 + C11361) + C11364) * C8927 + C12185 * C8928) *
               C31184 * C31308 +
           (C11385 * C8926 + (C11367 + C11366 - C11365 - C11368) * C8927 +
            (C12180 + C12181 - C12182 - C12183) * C8928) *
               C31184 * C3806) *
              C31475 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C8926 +
            (C11369 - (C11370 + C11371) + C11372) * C8927 + C11386 * C8928) *
               C31184 * C31301 +
           ((C11371 + C11370 - C11369 - C11372) * C8926 +
            (C11375 + C11374 - C11373 - C11376) * C8927 +
            (C11377 + C11378 - C11379 - C11380) * C8928) *
               C31184 * C31308 +
           (C11386 * C8926 + (C11379 - (C11378 + C11377) + C11380) * C8927 +
            ((C113 * C10764 + C31383 * C10765) * C2642 -
             (C11011 * C2635 + C11012 * C2641) +
             (C113 * C10766 + C31383 * C10767) * C31165) *
                C8928) *
               C31184 * C3806) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31383 * C126) * C2533 +
                (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
                C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
                C173 * C31508) *
                   C31397 * C108 +
               (C168 * C2533 + C169 * C31547 - C170 * C2534 - C171 * C31540 +
                C172 * C2535 + C173 * C31527 - C174 * C2536 - C175 * C31508) *
                   C31397 * C109 +
               (C170 * C2533 + C171 * C31547 - C172 * C2534 - C173 * C31540 +
                C174 * C2535 + C175 * C31527 - C176 * C2536 - C177 * C31508) *
                   C31397 * C110) *
                  C3298 +
              ((C550 * C2534 -
                ((C113 * C496 + C31383 * C515) * C31547 +
                 (C113 * C486 + C31383 * C497) * C2533) +
                C551 * C31540 - C552 * C2535 - C553 * C31527 + C554 * C2536 +
                C555 * C31508) *
                   C31397 * C108 +
               (C552 * C2534 - (C551 * C31547 + C550 * C2533) + C553 * C31540 -
                C554 * C2535 - C555 * C31527 + C788 * C2536 + C789 * C31508) *
                   C31397 * C109 +
               (C554 * C2534 - (C553 * C31547 + C552 * C2533) + C555 * C31540 -
                C788 * C2535 - C789 * C31527 +
                (C113 * C779 + C31383 * C780) * C2536 +
                (C113 * C781 + C31383 * C782) * C31508) *
                   C31397 * C110) *
                  C31305) *
             C31206 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31383 * C126) * C2641 +
                 (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
                 C169 * C31165) *
                    C31397 * C108 +
                (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                    C31397 * C109 +
                (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
                    C31397 * C110) *
                   C3298 +
               ((C550 * C2642 -
                 ((C113 * C496 + C31383 * C515) * C2635 +
                  (C113 * C486 + C31383 * C497) * C2641) +
                 C551 * C31165) *
                    C31397 * C108 +
                (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31165) *
                    C31397 * C109 +
                (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31165) *
                    C31397 * C110) *
                   C31305) *
                  C31541 +
              (((C361 * C2642 -
                 ((C113 * C307 + C31383 * C326) * C2635 +
                  (C113 * C297 + C31383 * C308) * C2641) +
                 C362 * C31165) *
                    C31397 * C108 +
                (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                    C31397 * C109 +
                (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
                    C31397 * C110) *
                   C3298 +
               (((C113 * C935 + C31383 * C940) * C2641 +
                 (C113 * C941 + C31383 * C950) * C2635 - C968 * C2642 -
                 C969 * C31165) *
                    C31397 * C108 +
                (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31165) *
                    C31397 * C109 +
                (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31165) *
                    C31397 * C110) *
                   C31305) *
                  C31529 +
              ((((C113 * C301 + C31383 * C316) * C2641 +
                 (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
                 C368 * C31165) *
                    C31397 * C108 +
                (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
                    C31397 * C109 +
                (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31165) *
                    C31397 * C110) *
                   C3298 +
               ((C1612 * C2642 -
                 ((C113 * C1314 + C31383 * C1327) * C2635 +
                  (C113 * C1300 + C31383 * C1315) * C2641) +
                 C1613 * C31165) *
                    C31397 * C108 +
                (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) +
                 C1615 * C31165) *
                    C31397 * C109 +
                ((C113 * C1599 + C31383 * C1600) * C2642 -
                 (C1615 * C2635 + C1614 * C2641) +
                 (C113 * C1601 + C31383 * C1602) * C31165) *
                    C31397 * C110) *
                   C31305) *
                  C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2641 +
            (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
            C169 * C31165) *
               C31397 * C108 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
               C31397 * C109 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
               C31397 * C110) *
              C31549 +
          ((C550 * C2642 -
            ((C113 * C496 + C31383 * C515) * C2635 +
             (C113 * C486 + C31383 * C497) * C2641) +
            C551 * C31165) *
               C31397 * C108 +
           (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31165) *
               C31397 * C109 +
           (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31165) *
               C31397 * C110) *
              C31546 +
          (((C113 * C490 + C31383 * C505) * C2641 +
            (C113 * C506 + C31383 * C520) * C2635 - C556 * C2642 -
            C557 * C31165) *
               C31397 * C108 +
           (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31165) *
               C31397 * C109 +
           (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C31165) *
               C31397 * C110) *
              C31537 +
          ((C2316 * C2642 -
            ((C113 * C2025 + C31383 * C2035) * C2635 +
             (C113 * C2017 + C31383 * C2026) * C2641) +
            C2317 * C31165) *
               C31397 * C108 +
           (C2318 * C2642 - (C2317 * C2635 + C2316 * C2641) + C2319 * C31165) *
               C31397 * C109 +
           ((C113 * C2303 + C31383 * C2304) * C2642 -
            (C2319 * C2635 + C2318 * C2641) +
            (C113 * C2305 + C31383 * C2306) * C31165) *
               C31397 * C110) *
              C31520) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2533 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31547 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2534 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31540 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C2535 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31527 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C2536 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C3298 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C2534 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31547 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C2533) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C31540 -
           (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
            C4763 * C487 + C4759 * C499) *
               C2535 -
           (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
            C4763 * C500 + C4759 * C517) *
               C31527 +
           (C4763 * C488 + C4759 * C501 + C4764 * C938 + C4760 * C946 +
            C4765 * C1599 + C4761 * C1600) *
               C2536 +
           (C4763 * C502 + C4759 * C518 + C4764 * C947 + C4760 * C953 +
            C4765 * C1601 + C4761 * C1602) *
               C31508) *
              C31397 * C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C2641 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C2635 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C2642 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C2642 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C2635 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C2641) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31541 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C2642 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C2635 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C2641) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C2641 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C2635 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C2642 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31529 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C2641 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C2635 -
            (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
             C4763 * C302 + C4759 * C318) *
                C2642 -
            (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
             C4763 * C319 + C4759 * C332) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C1299 + C4759 * C1313 + C4764 * C1714 + C4760 * C1718 +
             C4765 * C5878 + C4761 * C5879) *
                C2642 -
            ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
              C4763 * C1314 + C4759 * C1327) *
                 C2635 +
             (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
              C4763 * C1300 + C4759 * C1315) *
                 C2641) +
            (C4763 * C1312 + C4759 * C1326 + C4764 * C1719 + C4760 * C1723 +
             C4765 * C5880 + C4761 * C5881) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2641 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C2635 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2642 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31165) *
              C31397 * C31184 * C31549 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C2642 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C2635 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C2641) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C31165) *
              C31397 * C31184 * C31546 +
          ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
            C4765 * C1301 + C4761 * C1316) *
               C2641 +
           (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
            C4765 * C1317 + C4761 * C1328) *
               C2635 -
           (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
            C4763 * C491 + C4759 * C507) *
               C2642 -
           (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
            C4763 * C508 + C4759 * C521) *
               C31165) *
              C31397 * C31184 * C31537 +
          ((C4763 * C2016 + C4759 * C2024 + C4764 * C2418 + C4760 * C2422 +
            C4765 * C6526 + C4761 * C6527) *
               C2642 -
           ((C4765 * C6269 + C4761 * C6275 + C4764 * C2421 + C4760 * C2426 +
             C4763 * C2025 + C4759 * C2035) *
                C2635 +
            (C4765 * C6266 + C4761 * C6270 + C4764 * C2417 + C4760 * C2420 +
             C4763 * C2017 + C4759 * C2026) *
                C2641) +
           (C4763 * C2023 + C4759 * C2034 + C4764 * C2423 + C4760 * C2427 +
            C4765 * C6528 + C4761 * C6529) *
               C31165) *
              C31397 * C31184 * C31520) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2533 +
            (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
            C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
            C173 * C31508) *
               C8926 +
           (C11919 + C11920 - C11921 - C11922 + C11923 + C11924 - C11925 -
            C11926) *
               C8927 +
           (C11927 + C11928 - C11929 - C11930 + C11931 + C11932 - C11933 -
            C11934) *
               C8928) *
              C31184 * C3298 +
          ((C11921 - (C11920 + C11919) + C11922 - C11923 - C11924 + C11925 +
            C11926) *
               C8926 +
           (C11929 - (C11928 + C11927) + C11930 - C11931 - C11932 + C11933 +
            C11934) *
               C8927 +
           (C2316 * C2534 - (C9178 * C31547 + C9179 * C2533) + C2317 * C31540 -
            C2318 * C2535 - C2319 * C31527 +
            (C113 * C2303 + C31383 * C2304) * C2536 +
            (C113 * C2305 + C31383 * C2306) * C31508) *
               C8928) *
              C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C8926 +
            (C11357 + C11358 - C11359 - C11360) * C8927 + C11385 * C8928) *
               C31184 * C3298 +
           ((C11359 - (C11358 + C11357) + C11360) * C8926 +
            (C11363 - (C11362 + C11361) + C11364) * C8927 +
            (C11365 - (C11366 + C11367) + C11368) * C8928) *
               C31184 * C31305) *
              C31541 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C8926 +
            (C11369 - (C11370 + C11371) + C11372) * C8927 + C11386 * C8928) *
               C31184 * C3298 +
           ((C11371 + C11370 - C11369 - C11372) * C8926 +
            (C11375 + C11374 - C11373 - C11376) * C8927 +
            (C11377 + C11378 - C11379 - C11380) * C8928) *
               C31184 * C31305) *
              C31529 +
          ((((C113 * C301 + C31383 * C316) * C2641 +
             (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
             C368 * C31165) *
                C8926 +
            (C11813 + C11814 - C11815 - C11816) * C8927 +
            (C11817 + C11818 - C11819 - C11820) * C8928) *
               C31184 * C3298 +
           ((C11815 - (C11814 + C11813) + C11816) * C8926 +
            (C11819 - (C11818 + C11817) + C11820) * C8927 +
            ((C113 * C6526 + C31383 * C6527) * C2642 -
             (C9889 * C2635 + C9890 * C2641) +
             (C113 * C6528 + C31383 * C6529) * C31165) *
                C8928) *
               C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2641 +
            (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
            C169 * C31165) *
               C8926 +
           (C11357 + C11358 - C11359 - C11360) * C8927 + C11385 * C8928) *
              C31184 * C31549 +
          ((C11359 - (C11358 + C11357) + C11360) * C8926 +
           (C11363 - (C11362 + C11361) + C11364) * C8927 + C12185 * C8928) *
              C31184 * C31546 +
          (C11385 * C8926 + (C11367 + C11366 - C11365 - C11368) * C8927 +
           (C12180 + C12181 - C12182 - C12183) * C8928) *
              C31184 * C31537 +
          (C12185 * C8926 + (C12182 - (C12181 + C12180) + C12183) * C8927 +
           ((C113 * C10886 + C31383 * C10887) * C2642 -
            (C10612 * C2635 + C10613 * C2641) +
            (C113 * C10888 + C31383 * C10889) * C31165) *
               C8928) *
              C31184 * C31520) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C30284 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31160 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C30280 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31168 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C30290 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C2901) *
              C31397 * C31184 * C31301 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C30280 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31160 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C30284) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C31168 -
           (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
            C4763 * C487 + C4759 * C499) *
               C30290 -
           (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
            C4763 * C500 + C4759 * C517) *
               C2901) *
              C31397 * C31184 * C31308 +
          ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
            C4765 * C1301 + C4761 * C1316) *
               C30284 +
           (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
            C4765 * C1317 + C4761 * C1328) *
               C31160 -
           (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
            C4763 * C491 + C4759 * C507) *
               C30280 -
           (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
            C4763 * C508 + C4759 * C521) *
               C31168 +
           (C4763 * C492 + C4759 * C509 + C4764 * C1295 + C4760 * C1305 +
            C4765 * C1303 + C4761 * C1320) *
               C30290 +
           (C4763 * C510 + C4759 * C522 + C4764 * C1304 + C4760 * C1322 +
            C4765 * C1321 + C4761 * C1330) *
               C2901) *
              C31397 * C31184 * C3806) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C30284 +
            (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
            C169 * C31168 + C170 * C30290 + C171 * C2901) *
               C31397 * C108 +
           (C168 * C30284 + C169 * C31160 - C170 * C30280 - C171 * C31168 +
            C172 * C30290 + C173 * C2901) *
               C31397 * C109 +
           (C170 * C30284 + C171 * C31160 - C172 * C30280 - C173 * C31168 +
            C174 * C30290 + C175 * C2901) *
               C31397 * C110) *
              C31301 +
          ((C550 * C30280 -
            ((C113 * C496 + C31383 * C515) * C31160 +
             (C113 * C486 + C31383 * C497) * C30284) +
            C551 * C31168 - C552 * C30290 - C553 * C2901) *
               C31397 * C108 +
           (C552 * C30280 - (C551 * C31160 + C550 * C30284) + C553 * C31168 -
            C554 * C30290 - C555 * C2901) *
               C31397 * C109 +
           (C554 * C30280 - (C553 * C31160 + C552 * C30284) + C555 * C31168 -
            C788 * C30290 - C789 * C2901) *
               C31397 * C110) *
              C31308 +
          (((C113 * C490 + C31383 * C505) * C30284 +
            (C113 * C506 + C31383 * C520) * C31160 - C556 * C30280 -
            C557 * C31168 + C558 * C30290 + C559 * C2901) *
               C31397 * C108 +
           (C556 * C30284 + C557 * C31160 - C558 * C30280 - C559 * C31168 +
            C560 * C30290 + C561 * C2901) *
               C31397 * C109 +
           (C558 * C30284 + C559 * C31160 - C560 * C30280 - C561 * C31168 +
            (C113 * C494 + C31383 * C513) * C30290 +
            (C113 * C514 + C31383 * C524) * C2901) *
               C31397 * C110) *
              C3806) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C30284 +
            (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
            C169 * C31168 + C170 * C30290 + C171 * C2901) *
               C8926 +
           (C11643 + C11644 - C11645 - C11646 + C11647 + C11648) * C8927 +
           C12452 * C8928) *
              C31184 * C31301 +
          ((C11645 - (C11644 + C11643) + C11646 - C11647 - C11648) * C8926 +
           (C11651 - (C11650 + C11649) + C11652 - C11653 - C11654) * C8927 +
           (C12443 - (C12444 + C12445) + C12446 - C12447 - C12448) * C8928) *
              C31184 * C31308 +
          (C12452 * C8926 +
           (C12445 + C12444 - C12443 - C12446 + C12447 + C12448) * C8927 +
           (C10610 * C30284 + C10611 * C31160 - C10899 * C30280 -
            C10900 * C31168 + (C113 * C2020 + C31383 * C2031) * C30290 +
            (C113 * C2032 + C31383 * C2038) * C2901) *
               C8928) *
              C31184 * C3806) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
                C31397 * C110) *
               C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C31383 * C515) * C2635 +
              (C113 * C486 + C31383 * C497) * C2641) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31165) *
                C31397 * C110) *
               C31305) *
              C31541 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
                C31397 * C110) *
               C3298 +
           (((C113 * C935 + C31383 * C940) * C2641 +
             (C113 * C941 + C31383 * C950) * C2635 - C968 * C2642 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31165) *
                C31397 * C110) *
               C31305) *
              C31529 +
          ((((C113 * C301 + C31383 * C316) * C2641 +
             (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
             C368 * C31165) *
                C31397 * C108 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
                C31397 * C109 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31165) *
                C31397 * C110) *
               C3298 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C31383 * C1327) * C2635 +
              (C113 * C1300 + C31383 * C1315) * C2641) +
             C1613 * C31165) *
                C31397 * C108 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C31165) *
                C31397 * C109 +
            ((C113 * C1599 + C31383 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C31383 * C1602) * C31165) *
                C31397 * C110) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2533 +
            (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
            C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
            C173 * C31508) *
               C31397 * C108 +
           (C168 * C2533 + C169 * C31547 - C170 * C2534 - C171 * C31540 +
            C172 * C2535 + C173 * C31527 - C174 * C2536 - C175 * C31508) *
               C31397 * C109 +
           (C170 * C2533 + C171 * C31547 - C172 * C2534 - C173 * C31540 +
            C174 * C2535 + C175 * C31527 - C176 * C2536 - C177 * C31508) *
               C31397 * C110) *
              C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C31383 * C515) * C31547 +
             (C113 * C486 + C31383 * C497) * C2533) +
            C551 * C31540 - C552 * C2535 - C553 * C31527 + C554 * C2536 +
            C555 * C31508) *
               C31397 * C108 +
           (C552 * C2534 - (C551 * C31547 + C550 * C2533) + C553 * C31540 -
            C554 * C2535 - C555 * C31527 + C788 * C2536 + C789 * C31508) *
               C31397 * C109 +
           (C554 * C2534 - (C553 * C31547 + C552 * C2533) + C555 * C31540 -
            C788 * C2535 - C789 * C31527 +
            (C113 * C779 + C31383 * C780) * C2536 +
            (C113 * C781 + C31383 * C782) * C31508) *
               C31397 * C110) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2533 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31547 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2534 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31540 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C2535 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31527 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C2536 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C3298 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C2534 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31547 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C2533) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C31540 -
           (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
            C4763 * C487 + C4759 * C499) *
               C2535 -
           (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
            C4763 * C500 + C4759 * C517) *
               C31527 +
           (C4763 * C488 + C4759 * C501 + C4764 * C938 + C4760 * C946 +
            C4765 * C1599 + C4761 * C1600) *
               C2536 +
           (C4763 * C502 + C4759 * C518 + C4764 * C947 + C4760 * C953 +
            C4765 * C1601 + C4761 * C1602) *
               C31508) *
              C31397 * C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C2641 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C2635 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C2642 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C2642 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C2635 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C2641) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31541 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C2642 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C2635 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C2641) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C2641 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C2635 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C2642 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31529 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C2641 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C2635 -
            (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
             C4763 * C302 + C4759 * C318) *
                C2642 -
            (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
             C4763 * C319 + C4759 * C332) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C1299 + C4759 * C1313 + C4764 * C1714 + C4760 * C1718 +
             C4765 * C5878 + C4761 * C5879) *
                C2642 -
            ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
              C4763 * C1314 + C4759 * C1327) *
                 C2635 +
             (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
              C4763 * C1300 + C4759 * C1315) *
                 C2641) +
            (C4763 * C1312 + C4759 * C1326 + C4764 * C1719 + C4760 * C1723 +
             C4765 * C5880 + C4761 * C5881) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2533 +
            (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
            C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
            C173 * C31508) *
               C8926 +
           (C11919 + C11920 - C11921 - C11922 + C11923 + C11924 - C11925 -
            C11926) *
               C8927 +
           (C11927 + C11928 - C11929 - C11930 + C11931 + C11932 - C11933 -
            C11934) *
               C8928) *
              C31184 * C3298 +
          ((C11921 - (C11920 + C11919) + C11922 - C11923 - C11924 + C11925 +
            C11926) *
               C8926 +
           (C11929 - (C11928 + C11927) + C11930 - C11931 - C11932 + C11933 +
            C11934) *
               C8927 +
           (C2316 * C2534 - (C9178 * C31547 + C9179 * C2533) + C2317 * C31540 -
            C2318 * C2535 - C2319 * C31527 +
            (C113 * C2303 + C31383 * C2304) * C2536 +
            (C113 * C2305 + C31383 * C2306) * C31508) *
               C8928) *
              C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C8926 +
            (C11357 + C11358 - C11359 - C11360) * C8927 + C11385 * C8928) *
               C31184 * C3298 +
           ((C11359 - (C11358 + C11357) + C11360) * C8926 +
            (C11363 - (C11362 + C11361) + C11364) * C8927 +
            (C11365 - (C11366 + C11367) + C11368) * C8928) *
               C31184 * C31305) *
              C31541 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C8926 +
            (C11369 - (C11370 + C11371) + C11372) * C8927 + C11386 * C8928) *
               C31184 * C3298 +
           ((C11371 + C11370 - C11369 - C11372) * C8926 +
            (C11375 + C11374 - C11373 - C11376) * C8927 +
            (C11377 + C11378 - C11379 - C11380) * C8928) *
               C31184 * C31305) *
              C31529 +
          ((((C113 * C301 + C31383 * C316) * C2641 +
             (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
             C368 * C31165) *
                C8926 +
            (C11813 + C11814 - C11815 - C11816) * C8927 +
            (C11817 + C11818 - C11819 - C11820) * C8928) *
               C31184 * C3298 +
           ((C11815 - (C11814 + C11813) + C11816) * C8926 +
            (C11819 - (C11818 + C11817) + C11820) * C8927 +
            ((C113 * C6526 + C31383 * C6527) * C2642 -
             (C9889 * C2635 + C9890 * C2641) +
             (C113 * C6528 + C31383 * C6529) * C31165) *
                C8928) *
               C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C30274 +
            (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
            C169 * C31165) *
               C31397 * C108 +
           (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
               C31397 * C109 +
           (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
               C31397 * C110) *
              C31218 * C1431 +
          ((C361 * C30255 -
            ((C113 * C307 + C31383 * C326) * C31457 +
             (C113 * C297 + C31383 * C308) * C30274) +
            C362 * C31165) *
               C31397 * C108 +
           (C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
               C31397 * C109 +
           (C365 * C30255 - (C364 * C31457 + C363 * C30274) + C366 * C31165) *
               C31397 * C110) *
              C31218 * C1432 +
          (((C113 * C301 + C31383 * C316) * C30274 +
            (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
            C368 * C31165) *
               C31397 * C108 +
           (C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
               C31397 * C109 +
           (C369 * C30274 + C370 * C31457 - C371 * C30255 - C372 * C31165) *
               C31397 * C110) *
              C31218 * C1433 +
          ((C1450 * C30255 -
            ((C113 * C1171 + C31383 * C1181) * C31457 +
             (C113 * C1163 + C31383 * C1172) * C30274) +
            C1451 * C31165) *
               C31397 * C108 +
           (C1452 * C30255 - (C1451 * C31457 + C1450 * C30274) +
            C1453 * C31165) *
               C31397 * C109 +
           ((C113 * C1437 + C31383 * C1438) * C30255 -
            (C1453 * C31457 + C1452 * C30274) +
            (C113 * C1439 + C31383 * C1440) * C31165) *
               C31397 * C110) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C665 +
            (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
               C31397 * C108 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31508) *
               C31397 * C109 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31508) *
               C31397 * C110) *
              C31218 * C31475 +
          ((C361 * C666 -
            ((C113 * C307 + C31383 * C326) * C659 +
             (C113 * C297 + C31383 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C31508) *
               C31397 * C108 +
           (C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
            C365 * C667 - C366 * C661 + C678 * C668 + C679 * C31508) *
               C31397 * C109 +
           (C365 * C666 - (C364 * C659 + C363 * C665) + C366 * C660 -
            C678 * C667 - C679 * C661 + (C113 * C669 + C31383 * C670) * C668 +
            (C113 * C671 + C31383 * C672) * C31508) *
               C31397 * C110) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C665 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C659 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C666 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C660 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C667 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C661 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C668 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C31218 * C31475 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C666 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C659 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C665) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C660 -
           (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
            C4763 * C298 + C4759 * C310) *
               C667 -
           (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
            C4763 * C311 + C4759 * C328) *
               C661 +
           (C4763 * C299 + C4759 * C312 + C4764 * C304 + C4760 * C322 +
            C4765 * C1437 + C4761 * C1438) *
               C668 +
           (C4763 * C313 + C4759 * C329 + C4764 * C323 + C4760 * C334 +
            C4765 * C1439 + C4761 * C1440) *
               C31508) *
              C31397 * C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C30274 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31457 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C30255 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31165) *
              C31397 * C31184 * C31218 * C1431 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C30255 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31457 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C30274) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31165) *
              C31397 * C31184 * C31218 * C1432 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C30274 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C31457 -
           (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
            C4763 * C302 + C4759 * C318) *
               C30255 -
           (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
            C4763 * C319 + C4759 * C332) *
               C31165) *
              C31397 * C31184 * C31218 * C1433 +
          ((C4763 * C1162 + C4759 * C1170 + C4764 * C1165 + C4760 * C1175 +
            C4765 * C5728 + C4761 * C5729) *
               C30255 -
           ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 + C4760 * C1182 +
             C4763 * C1171 + C4759 * C1181) *
                C31457 +
            (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 + C4760 * C1173 +
             C4763 * C1163 + C4759 * C1172) *
                C30274) +
           (C4763 * C1169 + C4759 * C1180 + C4764 * C1176 + C4760 * C1183 +
            C4765 * C5730 + C4761 * C5731) *
               C31165) *
              C31397 * C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C665 +
            (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
               C8926 +
           (C9174 * C665 + C9175 * C659 - C550 * C666 - C551 * C660 +
            C552 * C667 + C553 * C661 - C554 * C668 - C555 * C31508) *
               C8927 +
           (C9176 * C665 + C9177 * C659 - C556 * C666 - C557 * C660 +
            C558 * C667 + C559 * C661 - C560 * C668 - C561 * C31508) *
               C8928) *
              C31184 * C31218 * C31475 +
          ((C361 * C666 -
            ((C113 * C307 + C31383 * C326) * C659 +
             (C113 * C297 + C31383 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C31508) *
               C8926 +
           (C968 * C666 -
            ((C113 * C941 + C31383 * C950) * C659 +
             (C113 * C935 + C31383 * C940) * C665) +
            C969 * C660 - C970 * C667 - C971 * C661 + C972 * C668 +
            C973 * C31508) *
               C8927 +
           (C2198 * C666 -
            ((C113 * C1308 + C31383 * C1324) * C659 +
             (C113 * C1297 + C31383 * C1309) * C665) +
            C2199 * C660 - C2200 * C667 - C2201 * C661 +
            (C113 * C2185 + C31383 * C2186) * C668 +
            (C113 * C2187 + C31383 * C2188) * C31508) *
               C8928) *
              C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C30274 +
            (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
            C169 * C31165) *
               C8926 +
           (C9174 * C30274 + C9175 * C31457 - C550 * C30255 - C551 * C31165) *
               C8927 +
           (C9176 * C30274 + C9177 * C31457 - C556 * C30255 - C557 * C31165) *
               C8928) *
              C31184 * C31218 * C1431 +
          ((C361 * C30255 -
            ((C113 * C307 + C31383 * C326) * C31457 +
             (C113 * C297 + C31383 * C308) * C30274) +
            C362 * C31165) *
               C8926 +
           (C968 * C30255 - (C9565 * C31457 + C9566 * C30274) + C969 * C31165) *
               C8927 +
           (C2198 * C30255 - (C9567 * C31457 + C9568 * C30274) +
            C2199 * C31165) *
               C8928) *
              C31184 * C31218 * C1432 +
          (((C113 * C301 + C31383 * C316) * C30274 +
            (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
            C368 * C31165) *
               C8926 +
           (C9885 * C30274 + C9886 * C31457 - C1612 * C30255 - C1613 * C31165) *
               C8927 +
           (C9887 * C30274 + C9888 * C31457 -
            (C113 * C1302 + C31383 * C1318) * C30255 -
            (C113 * C1319 + C31383 * C1329) * C31165) *
               C8928) *
              C31184 * C31218 * C1433 +
          ((C1450 * C30255 -
            ((C113 * C1171 + C31383 * C1181) * C31457 +
             (C113 * C1163 + C31383 * C1172) * C30274) +
            C1451 * C31165) *
               C8926 +
           ((C113 * C1714 + C31383 * C1718) * C30255 -
            ((C113 * C1717 + C31383 * C1722) * C31457 +
             (C113 * C1713 + C31383 * C1716) * C30274) +
            (C113 * C1719 + C31383 * C1723) * C31165) *
               C8927 +
           ((C113 * C6424 + C31383 * C6425) * C30255 -
            ((C113 * C5621 + C31383 * C5627) * C31457 +
             (C113 * C5618 + C31383 * C5622) * C30274) +
            (C113 * C6426 + C31383 * C6427) * C31165) *
               C8928) *
              C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C31397 * C108 +
                    (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                    (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                       C31476 -
                   ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                    (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                    ((C113 * C496 + C31383 * C515) * C31155 +
                     (C113 * C486 + C31383 * C497) * C1160) *
                        C31397 * C108) *
                       C31305) *
                      C1431 +
                  ((((C113 * C935 + C31383 * C940) * C1160 +
                     (C113 * C941 + C31383 * C950) * C31155) *
                        C31397 * C108 +
                    (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                    (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                       C31305 -
                   ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                    (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C31397 * C108) *
                       C31476) *
                      C1432 +
                  ((((C113 * C301 + C31383 * C316) * C1160 +
                     (C113 * C317 + C31383 * C331) * C31155) *
                        C31397 * C108 +
                    (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                    (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                       C31476 -
                   ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
                    (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
                    ((C113 * C1314 + C31383 * C1327) * C31155 +
                     (C113 * C1300 + C31383 * C1315) * C1160) *
                        C31397 * C108) *
                       C31305) *
                      C1433 +
                  ((((C113 * C1713 + C31383 * C1716) * C1160 +
                     (C113 * C1717 + C31383 * C1722) * C31155) *
                        C31397 * C108 +
                    ((C113 * C1714 + C31383 * C1718) * C1160 +
                     (C113 * C1719 + C31383 * C1723) * C31155) *
                        C31397 * C109 +
                    ((C113 * C1715 + C31383 * C1720) * C1160 +
                     (C113 * C1721 + C31383 * C1724) * C31155) *
                        C31397 * C110) *
                       C31305 -
                   ((C1453 * C31155 + C1452 * C1160) * C31397 * C110 +
                    (C1451 * C31155 + C1450 * C1160) * C31397 * C109 +
                    ((C113 * C1171 + C31383 * C1181) * C31155 +
                     (C113 * C1163 + C31383 * C1172) * C1160) *
                        C31397 * C108) *
                       C31476) *
                      C31514)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C31383 * C126) * C293 +
                     (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C31497) *
                        C31397 * C108 +
                    (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                     C172 * C295 + C173 * C31497) *
                        C31397 * C109 +
                    (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                     C174 * C295 + C175 * C31497) *
                        C31397 * C110) *
                       C31476 +
                   ((C550 * C294 -
                     ((C113 * C496 + C31383 * C515) * C287 +
                      (C113 * C486 + C31383 * C497) * C293) +
                     C551 * C288 - C552 * C295 - C553 * C31497) *
                        C31397 * C108 +
                    (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                     C554 * C295 - C555 * C31497) *
                        C31397 * C109 +
                    (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                     C788 * C295 - C789 * C31497) *
                        C31397 * C110) *
                       C31305) *
                      C31475 +
                  (((C361 * C294 -
                     ((C113 * C307 + C31383 * C326) * C287 +
                      (C113 * C297 + C31383 * C308) * C293) +
                     C362 * C288 - C363 * C295 - C364 * C31497) *
                        C31397 * C108 +
                    (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                     C365 * C295 - C366 * C31497) *
                        C31397 * C109 +
                    (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                     C678 * C295 - C679 * C31497) *
                        C31397 * C110) *
                       C31476 +
                   (((C113 * C935 + C31383 * C940) * C293 +
                     (C113 * C941 + C31383 * C950) * C287 - C968 * C294 -
                     C969 * C288 + C970 * C295 + C971 * C31497) *
                        C31397 * C108 +
                    (C968 * C293 + C969 * C287 - C970 * C294 - C971 * C288 +
                     C972 * C295 + C973 * C31497) *
                        C31397 * C109 +
                    (C970 * C293 + C971 * C287 - C972 * C294 - C973 * C288 +
                     (C113 * C939 + C31383 * C948) * C295 +
                     (C113 * C949 + C31383 * C954) * C31497) *
                        C31397 * C110) *
                       C31305) *
                      C31265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C293 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C287 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C294 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C288 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C295 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C31476 +
                   ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
                     C4765 * C1299 + C4761 * C1313) *
                        C294 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C287 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C293) +
                    (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
                     C4765 * C1312 + C4761 * C1326) *
                        C288 -
                    (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                     C4760 * C944 + C4763 * C487 + C4759 * C499) *
                        C295 -
                    (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                     C4760 * C952 + C4763 * C500 + C4759 * C517) *
                        C31497) *
                       C31397 * C31184 * C31305) *
                      C31475 +
                  (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                     C4765 * C1162 + C4761 * C1170) *
                        C294 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C287 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C293) +
                    (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                     C4765 * C1169 + C4761 * C1180) *
                        C288 -
                    (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                     C4760 * C320 + C4763 * C298 + C4759 * C310) *
                        C295 -
                    (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                     C4760 * C333 + C4763 * C311 + C4759 * C328) *
                        C31497) *
                       C31397 * C31184 * C31476 +
                   ((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                     C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                        C293 +
                    (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                     C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                        C287 -
                    (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 +
                     C4760 * C1313 + C4763 * C936 + C4759 * C942) *
                        C294 -
                    (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 +
                     C4760 * C1326 + C4763 * C943 + C4759 * C951) *
                        C288 +
                    (C4763 * C937 + C4759 * C944 + C4764 * C1298 +
                     C4760 * C1311 + C4765 * C1715 + C4761 * C1720) *
                        C295 +
                    (C4763 * C945 + C4759 * C952 + C4764 * C1310 +
                     C4760 * C1325 + C4765 * C1721 + C4761 * C1724) *
                        C31497) *
                       C31397 * C31184 * C31305) *
                      C31265)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1160 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31155) *
                       C31397 * C31184 * C31476 -
                   ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                     C4760 * C950 + C4763 * C496 + C4759 * C515) *
                        C31155 +
                    (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                     C4760 * C940 + C4763 * C486 + C4759 * C497) *
                        C1160) *
                       C31397 * C31184 * C31305) *
                      C1431 +
                  (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                     C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                        C1160 +
                    (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                     C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                        C31155) *
                       C31397 * C31184 * C31305 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C31155 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C1160) *
                       C31397 * C31184 * C31476) *
                      C1432 +
                  (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C1160 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31155) *
                       C31397 * C31184 * C31476 -
                   ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                     C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                        C31155 +
                    (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                     C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                        C1160) *
                       C31397 * C31184 * C31305) *
                      C1433 +
                  (((C4763 * C1713 + C4759 * C1716 + C4764 * C5619 +
                     C4760 * C5624 + C4765 * C5980 + C4761 * C5981) *
                        C1160 +
                    (C4763 * C1717 + C4759 * C1722 + C4764 * C5623 +
                     C4760 * C5628 + C4765 * C5982 + C4761 * C5983) *
                        C31155) *
                       C31397 * C31184 * C31305 -
                   ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 +
                     C4760 * C1182 + C4763 * C1171 + C4759 * C1181) *
                        C31155 +
                    (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 +
                     C4760 * C1173 + C4763 * C1163 + C4759 * C1172) *
                        C1160) *
                       C31397 * C31184 * C31476) *
                      C31514)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C31383 * C126) * C293 +
                     (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C31497) *
                        C8926 +
                    (C9180 + C9181 - C9154 - C9155 + C9156 + C9157) * C8927 +
                    C9190 * C8928) *
                       C31184 * C31476 +
                   ((C9154 - (C9181 + C9180) + C9155 - C9156 - C9157) * C8926 +
                    (C9162 - (C9183 + C9182) + C9163 - C9164 - C9165) * C8927 +
                    (C9166 - (C9184 + C9185) + C9171 - C9172 - C9173) * C8928) *
                       C31184 * C31305) *
                      C31475 +
                  (((C361 * C294 -
                     ((C113 * C307 + C31383 * C326) * C287 +
                      (C113 * C297 + C31383 * C308) * C293) +
                     C362 * C288 - C363 * C295 - C364 * C31497) *
                        C8926 +
                    (C9549 - (C9569 + C9570) + C9554 - C9555 - C9556) * C8927 +
                    (C9557 - (C9571 + C9572) + C9562 - C9563 - C9564) * C8928) *
                       C31184 * C31476 +
                   ((C9570 + C9569 - C9549 - C9554 + C9555 + C9556) * C8926 +
                    (C9572 + C9571 - C9557 - C9562 + C9563 + C9564) * C8927 +
                    ((C113 * C2417 + C31383 * C2420) * C293 +
                     (C113 * C2421 + C31383 * C2426) * C287 -
                     (C113 * C2418 + C31383 * C2422) * C294 -
                     (C113 * C2423 + C31383 * C2427) * C288 +
                     (C113 * C2419 + C31383 * C2424) * C295 +
                     (C113 * C2425 + C31383 * C2428) * C31497) *
                        C8928) *
                       C31184 * C31305) *
                      C31265)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C8926 +
                    (C9855 + C9856) * C8927 + C9881 * C8928) *
                       C31184 * C31476 -
                   ((C9859 + C9860) * C8928 + (C9858 + C9857) * C8927 +
                    (C9856 + C9855) * C8926) *
                       C31184 * C31305) *
                      C1431 +
                  (((C9861 + C9862) * C8926 + (C9863 + C9864) * C8927 +
                    (C9891 + C9892) * C8928) *
                       C31184 * C31305 -
                   (C9884 * C8928 + (C9862 + C9861) * C8927 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C8926) *
                       C31184 * C31476) *
                      C1432 +
                  ((((C113 * C301 + C31383 * C316) * C1160 +
                     (C113 * C317 + C31383 * C331) * C31155) *
                        C8926 +
                    (C9893 + C9894) * C8927 + C9899 * C8928) *
                       C31184 * C31476 -
                   ((C9897 + C9898) * C8928 + (C9896 + C9895) * C8927 +
                    (C9894 + C9893) * C8926) *
                       C31184 * C31305) *
                      C1433 +
                  (((C10284 + C10285) * C8926 + (C10286 + C10287) * C8927 +
                    ((C113 * C6628 + C31383 * C6629) * C1160 +
                     (C113 * C6630 + C31383 * C6631) * C31155) *
                        C8928) *
                       C31184 * C31305 -
                   ((C10287 + C10286) * C8928 + (C10285 + C10284) * C8927 +
                    ((C113 * C1171 + C31383 * C1181) * C31155 +
                     (C113 * C1163 + C31383 * C1172) * C1160) *
                        C8926) *
                       C31184 * C31476) *
                      C31514)) /
                    (p * q * std::sqrt(p + q));
    d2ee[72] += (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                     (((C113 * C119 + C31383 * C126) * C114 +
                       (C113 * C127 + C31383 * C140) * C102 - C168 * C115 -
                       C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                       C173 * C105 + C174 * C118 + C175 * C106) *
                          C31397 * C108 +
                      (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                       C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                       C176 * C118 + C177 * C106) *
                          C31397 * C109 +
                      (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                       C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                       (C113 * C125 + C31383 * C138) * C118 +
                       (C113 * C139 + C31383 * C146) * C106) *
                          C31397 * C110) *
                     C31218 * C31206 +
                 std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                     ((((C113 * C119 + C31383 * C126) * C293 +
                        (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                        C169 * C288 + C170 * C295 + C171 * C31497) *
                           C31397 * C108 +
                       (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                        C172 * C295 + C173 * C31497) *
                           C31397 * C109 +
                       (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                        C174 * C295 + C175 * C31497) *
                           C31397 * C110) *
                          C31218 * C31541 +
                      ((C361 * C294 -
                        ((C113 * C307 + C31383 * C326) * C287 +
                         (C113 * C297 + C31383 * C308) * C293) +
                        C362 * C288 - C363 * C295 - C364 * C31497) *
                           C31397 * C108 +
                       (C363 * C294 - (C362 * C287 + C361 * C293) +
                        C364 * C288 - C365 * C295 - C366 * C31497) *
                           C31397 * C109 +
                       (C365 * C294 - (C364 * C287 + C363 * C293) +
                        C366 * C288 - (C113 * C300 + C31383 * C314) * C295 -
                        (C113 * C315 + C31383 * C330) * C31497) *
                           C31397 * C110) *
                          C31218 * C31529 +
                      (((C113 * C301 + C31383 * C316) * C293 +
                        (C113 * C317 + C31383 * C331) * C287 - C367 * C294 -
                        C368 * C288 + C369 * C295 + C370 * C31497) *
                           C31397 * C108 +
                       (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                        C371 * C295 + C372 * C31497) *
                           C31397 * C109 +
                       (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                        (C113 * C305 + C31383 * C324) * C295 +
                        (C113 * C325 + C31383 * C335) * C31497) *
                           C31397 * C110) *
                          C31218 * C31504)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C293 +
                    (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C31497) *
                       C31397 * C108 +
                   (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                    C172 * C295 + C173 * C31497) *
                       C31397 * C109 +
                   (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                    C174 * C295 + C175 * C31497) *
                       C31397 * C110) *
                      C31542 +
                  ((C550 * C294 -
                    ((C113 * C496 + C31383 * C515) * C287 +
                     (C113 * C486 + C31383 * C497) * C293) +
                    C551 * C288 - C552 * C295 - C553 * C31497) *
                       C31397 * C108 +
                   (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                    C554 * C295 - C555 * C31497) *
                       C31397 * C109 +
                   (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                    (C113 * C489 + C31383 * C503) * C295 -
                    (C113 * C504 + C31383 * C519) * C31497) *
                       C31397 * C110) *
                      C31531 +
                  (((C113 * C490 + C31383 * C505) * C293 +
                    (C113 * C506 + C31383 * C520) * C287 - C556 * C294 -
                    C557 * C288 + C558 * C295 + C559 * C31497) *
                       C31397 * C108 +
                   (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
                    C560 * C295 + C561 * C31497) *
                       C31397 * C109 +
                   (C558 * C293 + C559 * C287 - C560 * C294 - C561 * C288 +
                    (C113 * C494 + C31383 * C513) * C295 +
                    (C113 * C514 + C31383 * C524) * C31497) *
                       C31397 * C110) *
                      C31507) *
                 C31206) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C1089 +
                    (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                    C169 * C31525 + C170 * C1091 + C171 * C31497) *
                       C31397 * C108 +
                   (C168 * C1089 + C169 * C31538 - C170 * C1090 -
                    C171 * C31525 + C172 * C1091 + C173 * C31497) *
                       C31397 * C109 +
                   (C170 * C1089 + C171 * C31538 - C172 * C1090 -
                    C173 * C31525 + C174 * C1091 + C175 * C31497) *
                       C31397 * C110) *
                      C31218 * C1086 +
                  ((C361 * C1090 -
                    ((C113 * C307 + C31383 * C326) * C31538 +
                     (C113 * C297 + C31383 * C308) * C1089) +
                    C362 * C31525 - C363 * C1091 - C364 * C31497) *
                       C31397 * C108 +
                   (C363 * C1090 - (C362 * C31538 + C361 * C1089) +
                    C364 * C31525 - C365 * C1091 - C366 * C31497) *
                       C31397 * C109 +
                   (C365 * C1090 - (C364 * C31538 + C363 * C1089) +
                    C366 * C31525 - C678 * C1091 - C679 * C31497) *
                       C31397 * C110) *
                      C31218 * C1087 +
                  (((C113 * C301 + C31383 * C316) * C1089 +
                    (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
                    C368 * C31525 + C369 * C1091 + C370 * C31497) *
                       C31397 * C108 +
                   (C367 * C1089 + C368 * C31538 - C369 * C1090 -
                    C370 * C31525 + C371 * C1091 + C372 * C31497) *
                       C31397 * C109 +
                   (C369 * C1089 + C370 * C31538 - C371 * C1090 -
                    C372 * C31525 + (C113 * C305 + C31383 * C324) * C1091 +
                    (C113 * C325 + C31383 * C335) * C31497) *
                       C31397 * C110) *
                      C31218 * C31504)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C1160 +
                    (C113 * C127 + C31383 * C140) * C31155) *
                       C31397 * C108 +
                   (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                   (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                      C31218 * C1155 -
                  ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                   (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                   ((C113 * C307 + C31383 * C326) * C31155 +
                    (C113 * C297 + C31383 * C308) * C1160) *
                       C31397 * C108) *
                      C31218 * C1156 +
                  (((C113 * C301 + C31383 * C316) * C1160 +
                    (C113 * C317 + C31383 * C331) * C31155) *
                       C31397 * C108 +
                   (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                   (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                      C31218 * C1157 -
                  (((C113 * C1167 + C31383 * C1179) * C31155 +
                    (C113 * C1161 + C31383 * C1168) * C1160) *
                       C31397 * C110 +
                   ((C113 * C1169 + C31383 * C1180) * C31155 +
                    (C113 * C1162 + C31383 * C1170) * C1160) *
                       C31397 * C109 +
                   ((C113 * C1171 + C31383 * C1181) * C31155 +
                    (C113 * C1163 + C31383 * C1172) * C1160) *
                       C31397 * C108) *
                      C31218 * C1158 +
                  (((C113 * C1164 + C31383 * C1173) * C1160 +
                    (C113 * C1174 + C31383 * C1182) * C31155) *
                       C31397 * C108 +
                   ((C113 * C1165 + C31383 * C1175) * C1160 +
                    (C113 * C1176 + C31383 * C1183) * C31155) *
                       C31397 * C109 +
                   ((C113 * C1166 + C31383 * C1177) * C1160 +
                    (C113 * C1178 + C31383 * C1184) * C31155) *
                       C31397 * C110) *
                      C31218 * C1159)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C31397 * C108 +
                    (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                    (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                       C31542 -
                   ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                    (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                    ((C113 * C496 + C31383 * C515) * C31155 +
                     (C113 * C486 + C31383 * C497) * C1160) *
                        C31397 * C108) *
                       C31531 +
                   (((C113 * C490 + C31383 * C505) * C1160 +
                     (C113 * C506 + C31383 * C520) * C31155) *
                        C31397 * C108 +
                    (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                    (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                       C31507) *
                      C1086 +
                  ((((C113 * C935 + C31383 * C940) * C1160 +
                     (C113 * C941 + C31383 * C950) * C31155) *
                        C31397 * C108 +
                    (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                    (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                       C31531 -
                   ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                    (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C31397 * C108) *
                       C31542 -
                   (((C113 * C1304 + C31383 * C1322) * C31155 +
                     (C113 * C1295 + C31383 * C1305) * C1160) *
                        C31397 * C110 +
                    ((C113 * C1306 + C31383 * C1323) * C31155 +
                     (C113 * C1296 + C31383 * C1307) * C1160) *
                        C31397 * C109 +
                    ((C113 * C1308 + C31383 * C1324) * C31155 +
                     (C113 * C1297 + C31383 * C1309) * C1160) *
                        C31397 * C108) *
                       C31507) *
                      C1087 +
                  ((((C113 * C301 + C31383 * C316) * C1160 +
                     (C113 * C317 + C31383 * C331) * C31155) *
                        C31397 * C108 +
                    (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                    (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                       C31542 -
                   (((C113 * C1310 + C31383 * C1325) * C31155 +
                     (C113 * C1298 + C31383 * C1311) * C1160) *
                        C31397 * C110 +
                    ((C113 * C1312 + C31383 * C1326) * C31155 +
                     (C113 * C1299 + C31383 * C1313) * C1160) *
                        C31397 * C109 +
                    ((C113 * C1314 + C31383 * C1327) * C31155 +
                     (C113 * C1300 + C31383 * C1315) * C1160) *
                        C31397 * C108) *
                       C31531 +
                   (((C113 * C1301 + C31383 * C1316) * C1160 +
                     (C113 * C1317 + C31383 * C1328) * C31155) *
                        C31397 * C108 +
                    ((C113 * C1302 + C31383 * C1318) * C1160 +
                     (C113 * C1319 + C31383 * C1329) * C31155) *
                        C31397 * C109 +
                    ((C113 * C1303 + C31383 * C1320) * C1160 +
                     (C113 * C1321 + C31383 * C1330) * C31155) *
                        C31397 * C110) *
                       C31507) *
                      C31504)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                   C4765 * C301 + C4761 * C316) *
                      C114 +
                  (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                   C4765 * C317 + C4761 * C331) *
                      C102 -
                  (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                   C4763 * C120 + C4759 * C128) *
                      C115 -
                  (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                   C4763 * C129 + C4759 * C141) *
                      C103 +
                  (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                   C4765 * C303 + C4761 * C320) *
                      C116 +
                  (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                   C4765 * C321 + C4761 * C333) *
                      C104 -
                  (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
                   C4763 * C122 + C4759 * C132) *
                      C117 -
                  (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
                   C4763 * C133 + C4759 * C143) *
                      C105 +
                  (C4763 * C123 + C4759 * C134 + C4764 * C300 + C4760 * C314 +
                   C4765 * C305 + C4761 * C324) *
                      C118 +
                  (C4763 * C135 + C4759 * C144 + C4764 * C315 + C4760 * C330 +
                   C4765 * C325 + C4761 * C335) *
                      C106) *
                 C31397 * C31184 * C31218 * C31206) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                    C4765 * C301 + C4761 * C316) *
                       C293 +
                   (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                    C4765 * C317 + C4761 * C331) *
                       C287 -
                   (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                    C4763 * C120 + C4759 * C128) *
                       C294 -
                   (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                    C4763 * C129 + C4759 * C141) *
                       C288 +
                   (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                    C4765 * C303 + C4761 * C320) *
                       C295 +
                   (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                    C4765 * C321 + C4761 * C333) *
                       C31497) *
                      C31397 * C31184 * C31218 * C31541 +
                  ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                    C4765 * C1162 + C4761 * C1170) *
                       C294 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C287 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C293) +
                   (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                    C4765 * C1169 + C4761 * C1180) *
                       C288 -
                   (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                    C4760 * C320 + C4763 * C298 + C4759 * C310) *
                       C295 -
                   (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                    C4760 * C333 + C4763 * C311 + C4759 * C328) *
                       C31497) *
                      C31397 * C31184 * C31218 * C31529 +
                  ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                    C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                       C293 +
                   (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                    C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                       C287 -
                   (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                    C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                       C294 -
                   (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                    C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                       C288 +
                   (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                    C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                       C295 +
                   (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                    C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                       C31497) *
                      C31397 * C31184 * C31218 * C31504)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                    C4765 * C301 + C4761 * C316) *
                       C293 +
                   (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                    C4765 * C317 + C4761 * C331) *
                       C287 -
                   (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                    C4763 * C120 + C4759 * C128) *
                       C294 -
                   (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                    C4763 * C129 + C4759 * C141) *
                       C288 +
                   (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                    C4765 * C303 + C4761 * C320) *
                       C295 +
                   (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                    C4765 * C321 + C4761 * C333) *
                       C31497) *
                      C31397 * C31184 * C31542 +
                  ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
                    C4765 * C1299 + C4761 * C1313) *
                       C294 -
                   ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                     C4760 * C950 + C4763 * C496 + C4759 * C515) *
                        C287 +
                    (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                     C4760 * C940 + C4763 * C486 + C4759 * C497) *
                        C293) +
                   (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
                    C4765 * C1312 + C4761 * C1326) *
                       C288 -
                   (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                    C4760 * C944 + C4763 * C487 + C4759 * C499) *
                       C295 -
                   (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                    C4760 * C952 + C4763 * C500 + C4759 * C517) *
                       C31497) *
                      C31397 * C31184 * C31531 +
                  ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                    C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                       C293 +
                   (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                    C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                       C287 -
                   (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 +
                    C4760 * C1307 + C4763 * C491 + C4759 * C507) *
                       C294 -
                   (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 +
                    C4760 * C1323 + C4763 * C508 + C4759 * C521) *
                       C288 +
                   (C4763 * C492 + C4759 * C509 + C4764 * C1295 +
                    C4760 * C1305 + C4765 * C1303 + C4761 * C1320) *
                       C295 +
                   (C4763 * C510 + C4759 * C522 + C4764 * C1304 +
                    C4760 * C1322 + C4765 * C1321 + C4761 * C1330) *
                       C31497) *
                      C31397 * C31184 * C31507) *
                 C31206) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                    C4765 * C301 + C4761 * C316) *
                       C1089 +
                   (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                    C4765 * C317 + C4761 * C331) *
                       C31538 -
                   (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                    C4763 * C120 + C4759 * C128) *
                       C1090 -
                   (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                    C4763 * C129 + C4759 * C141) *
                       C31525 +
                   (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                    C4765 * C303 + C4761 * C320) *
                       C1091 +
                   (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                    C4765 * C321 + C4761 * C333) *
                       C31497) *
                      C31397 * C31184 * C31218 * C1086 +
                  ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                    C4765 * C1162 + C4761 * C1170) *
                       C1090 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C31538 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C1089) +
                   (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                    C4765 * C1169 + C4761 * C1180) *
                       C31525 -
                   (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                    C4760 * C320 + C4763 * C298 + C4759 * C310) *
                       C1091 -
                   (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                    C4760 * C333 + C4763 * C311 + C4759 * C328) *
                       C31497) *
                      C31397 * C31184 * C31218 * C1087 +
                  ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                    C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                       C1089 +
                   (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                    C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                       C31538 -
                   (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                    C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                       C1090 -
                   (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                    C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                       C31525 +
                   (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                    C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                       C1091 +
                   (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                    C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                       C31497) *
                      C31397 * C31184 * C31218 * C31504)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                    C4765 * C301 + C4761 * C316) *
                       C1160 +
                   (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                    C4765 * C317 + C4761 * C331) *
                       C31155) *
                      C31397 * C31184 * C31218 * C1155 -
                  ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                    C4760 * C331 + C4763 * C307 + C4759 * C326) *
                       C31155 +
                   (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                    C4760 * C316 + C4763 * C297 + C4759 * C308) *
                       C1160) *
                      C31397 * C31184 * C31218 * C1156 +
                  ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                    C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                       C1160 +
                   (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                    C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                       C31155) *
                      C31397 * C31184 * C31218 * C1157 -
                  ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 +
                    C4760 * C1182 + C4763 * C1171 + C4759 * C1181) *
                       C31155 +
                   (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 +
                    C4760 * C1173 + C4763 * C1163 + C4759 * C1172) *
                       C1160) *
                      C31397 * C31184 * C31218 * C1158 +
                  ((C4763 * C1164 + C4759 * C1173 + C4764 * C5500 +
                    C4760 * C5503 + C4765 * C5501 + C4761 * C5504) *
                       C1160 +
                   (C4763 * C1174 + C4759 * C1182 + C4764 * C5502 +
                    C4760 * C5506 + C4765 * C5505 + C4761 * C5507) *
                       C31155) *
                      C31397 * C31184 * C31218 * C1159)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1160 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31155) *
                       C31397 * C31184 * C31542 -
                   ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                     C4760 * C950 + C4763 * C496 + C4759 * C515) *
                        C31155 +
                    (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                     C4760 * C940 + C4763 * C486 + C4759 * C497) *
                        C1160) *
                       C31397 * C31184 * C31531 +
                   ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                     C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                        C1160 +
                    (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                     C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                        C31155) *
                       C31397 * C31184 * C31507) *
                      C1086 +
                  (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                     C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                        C1160 +
                    (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                     C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                        C31155) *
                       C31397 * C31184 * C31531 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C31155 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C1160) *
                       C31397 * C31184 * C31542 -
                   ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 +
                     C4760 * C1328 + C4763 * C1308 + C4759 * C1324) *
                        C31155 +
                    (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 +
                     C4760 * C1316 + C4763 * C1297 + C4759 * C1309) *
                        C1160) *
                       C31397 * C31184 * C31507) *
                      C1087 +
                  (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C1160 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31155) *
                       C31397 * C31184 * C31542 -
                   ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                     C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                        C31155 +
                    (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                     C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                        C1160) *
                       C31397 * C31184 * C31531 +
                   ((C4763 * C1301 + C4759 * C1316 + C4764 * C5618 +
                     C4760 * C5622 + C4765 * C5620 + C4761 * C5625) *
                        C1160 +
                    (C4763 * C1317 + C4759 * C1328 + C4764 * C5621 +
                     C4760 * C5627 + C4765 * C5626 + C4761 * C5629) *
                        C31155) *
                       C31397 * C31184 * C31507) *
                      C31504)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C119 + C31383 * C126) * C114 +
                   (C113 * C127 + C31383 * C140) * C102 - C168 * C115 -
                   C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                   C173 * C105 + C174 * C118 + C175 * C106) *
                      C8926 +
                  ((C113 * C486 + C31383 * C497) * C114 +
                   (C113 * C496 + C31383 * C515) * C102 - C550 * C115 -
                   C551 * C103 + C552 * C116 + C553 * C104 - C554 * C117 -
                   C555 * C105 + C788 * C118 + C789 * C106) *
                      C8927 +
                  ((C113 * C490 + C31383 * C505) * C114 +
                   (C113 * C506 + C31383 * C520) * C102 - C556 * C115 -
                   C557 * C103 + C558 * C116 + C559 * C104 - C560 * C117 -
                   C561 * C105 + (C113 * C494 + C31383 * C513) * C118 +
                   (C113 * C514 + C31383 * C524) * C106) *
                      C8928) *
                 C31184 * C31218 * C31206) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C293 +
                    (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C31497) *
                       C8926 +
                   ((C113 * C486 + C31383 * C497) * C293 +
                    (C113 * C496 + C31383 * C515) * C287 - C550 * C294 -
                    C551 * C288 + C552 * C295 + C553 * C31497) *
                       C8927 +
                   ((C113 * C490 + C31383 * C505) * C293 +
                    (C113 * C506 + C31383 * C520) * C287 - C556 * C294 -
                    C557 * C288 + C558 * C295 + C559 * C31497) *
                       C8928) *
                      C31184 * C31218 * C31541 +
                  ((C361 * C294 -
                    ((C113 * C307 + C31383 * C326) * C287 +
                     (C113 * C297 + C31383 * C308) * C293) +
                    C362 * C288 - C363 * C295 - C364 * C31497) *
                       C8926 +
                   (C968 * C294 -
                    ((C113 * C941 + C31383 * C950) * C287 +
                     (C113 * C935 + C31383 * C940) * C293) +
                    C969 * C288 - C970 * C295 - C971 * C31497) *
                       C8927 +
                   (C2198 * C294 -
                    ((C113 * C1308 + C31383 * C1324) * C287 +
                     (C113 * C1297 + C31383 * C1309) * C293) +
                    C2199 * C288 - C2200 * C295 - C2201 * C31497) *
                       C8928) *
                      C31184 * C31218 * C31529 +
                  (((C113 * C301 + C31383 * C316) * C293 +
                    (C113 * C317 + C31383 * C331) * C287 - C367 * C294 -
                    C368 * C288 + C369 * C295 + C370 * C31497) *
                       C8926 +
                   ((C113 * C1300 + C31383 * C1315) * C293 +
                    (C113 * C1314 + C31383 * C1327) * C287 - C1612 * C294 -
                    C1613 * C288 + C1614 * C295 + C1615 * C31497) *
                       C8927 +
                   ((C113 * C1301 + C31383 * C1316) * C293 +
                    (C113 * C1317 + C31383 * C1328) * C287 -
                    (C113 * C1302 + C31383 * C1318) * C294 -
                    (C113 * C1319 + C31383 * C1329) * C288 +
                    (C113 * C1303 + C31383 * C1320) * C295 +
                    (C113 * C1321 + C31383 * C1330) * C31497) *
                       C8928) *
                      C31184 * C31218 * C31504)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C293 +
                    (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C31497) *
                       C8926 +
                   (C9180 + C9181 - C9154 - C9155 + C9156 + C9157) * C8927 +
                   C9190 * C8928) *
                      C31184 * C31542 +
                  ((C9154 - (C9181 + C9180) + C9155 - C9156 - C9157) * C8926 +
                   (C9162 - (C9183 + C9182) + C9163 - C9164 - C9165) * C8927 +
                   (C9166 - (C9184 + C9185) + C9171 - C9172 - C9173) * C8928) *
                      C31184 * C31531 +
                  (C9190 * C8926 +
                   (C9185 + C9184 - C9166 - C9171 + C9172 + C9173) * C8927 +
                   ((C113 * C2018 + C31383 * C2027) * C293 +
                    (C113 * C2028 + C31383 * C2036) * C287 -
                    (C113 * C2019 + C31383 * C2029) * C294 -
                    (C113 * C2030 + C31383 * C2037) * C288 +
                    (C113 * C2020 + C31383 * C2031) * C295 +
                    (C113 * C2032 + C31383 * C2038) * C31497) *
                       C8928) *
                      C31184 * C31507) *
                 C31206) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C1089 +
                    (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                    C169 * C31525 + C170 * C1091 + C171 * C31497) *
                       C8926 +
                   (C9174 * C1089 + C9175 * C31538 - C550 * C1090 -
                    C551 * C31525 + C552 * C1091 + C553 * C31497) *
                       C8927 +
                   (C9176 * C1089 + C9177 * C31538 - C556 * C1090 -
                    C557 * C31525 + C558 * C1091 + C559 * C31497) *
                       C8928) *
                      C31184 * C31218 * C1086 +
                  ((C361 * C1090 -
                    ((C113 * C307 + C31383 * C326) * C31538 +
                     (C113 * C297 + C31383 * C308) * C1089) +
                    C362 * C31525 - C363 * C1091 - C364 * C31497) *
                       C8926 +
                   (C968 * C1090 - (C9565 * C31538 + C9566 * C1089) +
                    C969 * C31525 - C970 * C1091 - C971 * C31497) *
                       C8927 +
                   (C2198 * C1090 - (C9567 * C31538 + C9568 * C1089) +
                    C2199 * C31525 - C2200 * C1091 - C2201 * C31497) *
                       C8928) *
                      C31184 * C31218 * C1087 +
                  (((C113 * C301 + C31383 * C316) * C1089 +
                    (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
                    C368 * C31525 + C369 * C1091 + C370 * C31497) *
                       C8926 +
                   ((C113 * C1300 + C31383 * C1315) * C1089 +
                    (C113 * C1314 + C31383 * C1327) * C31538 - C1612 * C1090 -
                    C1613 * C31525 + C1614 * C1091 + C1615 * C31497) *
                       C8927 +
                   ((C113 * C1301 + C31383 * C1316) * C1089 +
                    (C113 * C1317 + C31383 * C1328) * C31538 -
                    (C113 * C1302 + C31383 * C1318) * C1090 -
                    (C113 * C1319 + C31383 * C1329) * C31525 +
                    (C113 * C1303 + C31383 * C1320) * C1091 +
                    (C113 * C1321 + C31383 * C1330) * C31497) *
                       C8928) *
                      C31184 * C31218 * C31504)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C1160 +
                    (C113 * C127 + C31383 * C140) * C31155) *
                       C8926 +
                   (C9174 * C1160 + C9175 * C31155) * C8927 +
                   (C9176 * C1160 + C9177 * C31155) * C8928) *
                      C31184 * C31218 * C1155 -
                  ((C9567 * C31155 + C9568 * C1160) * C8928 +
                   (C9565 * C31155 + C9566 * C1160) * C8927 +
                   ((C113 * C307 + C31383 * C326) * C31155 +
                    (C113 * C297 + C31383 * C308) * C1160) *
                       C8926) *
                      C31184 * C31218 * C1156 +
                  (((C113 * C301 + C31383 * C316) * C1160 +
                    (C113 * C317 + C31383 * C331) * C31155) *
                       C8926 +
                   ((C113 * C1300 + C31383 * C1315) * C1160 +
                    (C113 * C1314 + C31383 * C1327) * C31155) *
                       C8927 +
                   ((C113 * C1301 + C31383 * C1316) * C1160 +
                    (C113 * C1317 + C31383 * C1328) * C31155) *
                       C8928) *
                      C31184 * C31218 * C1157 -
                  (((C113 * C5621 + C31383 * C5627) * C31155 +
                    (C113 * C5618 + C31383 * C5622) * C1160) *
                       C8928 +
                   ((C113 * C1717 + C31383 * C1722) * C31155 +
                    (C113 * C1713 + C31383 * C1716) * C1160) *
                       C8927 +
                   ((C113 * C1171 + C31383 * C1181) * C31155 +
                    (C113 * C1163 + C31383 * C1172) * C1160) *
                       C8926) *
                      C31184 * C31218 * C1158 +
                  (((C113 * C1164 + C31383 * C1173) * C1160 +
                    (C113 * C1174 + C31383 * C1182) * C31155) *
                       C8926 +
                   ((C113 * C5619 + C31383 * C5624) * C1160 +
                    (C113 * C5623 + C31383 * C5628) * C31155) *
                       C8927 +
                   ((C113 * C5620 + C31383 * C5625) * C1160 +
                    (C113 * C5626 + C31383 * C5629) * C31155) *
                       C8928) *
                      C31184 * C31218 * C1159)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C8926 +
                    (C9855 + C9856) * C8927 + C9881 * C8928) *
                       C31184 * C31542 -
                   ((C9859 + C9860) * C8928 + (C9858 + C9857) * C8927 +
                    (C9856 + C9855) * C8926) *
                       C31184 * C31531 +
                   (C9881 * C8926 + (C9860 + C9859) * C8927 +
                    ((C113 * C2018 + C31383 * C2027) * C1160 +
                     (C113 * C2028 + C31383 * C2036) * C31155) *
                        C8928) *
                       C31184 * C31507) *
                      C1086 +
                  (((C9861 + C9862) * C8926 + (C9863 + C9864) * C8927 +
                    (C9891 + C9892) * C8928) *
                       C31184 * C31531 -
                   (C9884 * C8928 + (C9862 + C9861) * C8927 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C8926) *
                       C31184 * C31542 -
                   (((C113 * C6273 + C31383 * C6276) * C31155 +
                     (C113 * C6267 + C31383 * C6271) * C1160) *
                        C8928 +
                    (C9892 + C9891) * C8927 + C9884 * C8926) *
                       C31184 * C31507) *
                      C1087 +
                  ((((C113 * C301 + C31383 * C316) * C1160 +
                     (C113 * C317 + C31383 * C331) * C31155) *
                        C8926 +
                    (C9893 + C9894) * C8927 + C9899 * C8928) *
                       C31184 * C31542 -
                   ((C9897 + C9898) * C8928 + (C9896 + C9895) * C8927 +
                    (C9894 + C9893) * C8926) *
                       C31184 * C31531 +
                   (C9899 * C8926 + (C9898 + C9897) * C8927 +
                    ((C113 * C6268 + C31383 * C6272) * C1160 +
                     (C113 * C6274 + C31383 * C6277) * C31155) *
                        C8928) *
                       C31184 * C31507) *
                      C31504)) /
                    (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
                C31397 * C110) *
               C31476 +
           ((C550 * C30255 -
             ((C113 * C496 + C31383 * C515) * C31457 +
              (C113 * C486 + C31383 * C497) * C30274) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C30255 - (C551 * C31457 + C550 * C30274) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C30255 - (C553 * C31457 + C552 * C30274) + C555 * C31165) *
                C31397 * C110) *
               C31305) *
              C1086 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C30255 - (C364 * C31457 + C363 * C30274) + C366 * C31165) *
                C31397 * C110) *
               C31476 +
           (((C113 * C935 + C31383 * C940) * C30274 +
             (C113 * C941 + C31383 * C950) * C31457 - C968 * C30255 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C30274 + C969 * C31457 - C970 * C30255 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C30274 + C971 * C31457 - C972 * C30255 - C973 * C31165) *
                C31397 * C110) *
               C31305) *
              C1087 +
          ((((C113 * C301 + C31383 * C316) * C30274 +
             (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
             C368 * C31165) *
                C31397 * C108 +
            (C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
                C31397 * C109 +
            (C369 * C30274 + C370 * C31457 - C371 * C30255 - C372 * C31165) *
                C31397 * C110) *
               C31476 +
           ((C1612 * C30255 -
             ((C113 * C1314 + C31383 * C1327) * C31457 +
              (C113 * C1300 + C31383 * C1315) * C30274) +
             C1613 * C31165) *
                C31397 * C108 +
            (C1614 * C30255 - (C1613 * C31457 + C1612 * C30274) +
             C1615 * C31165) *
                C31397 * C109 +
            ((C113 * C1599 + C31383 * C1600) * C30255 -
             (C1615 * C31457 + C1614 * C30274) +
             (C113 * C1601 + C31383 * C1602) * C31165) *
                C31397 * C110) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C665 +
            (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
               C31397 * C108 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31508) *
               C31397 * C109 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31508) *
               C31397 * C110) *
              C31476 +
          ((C550 * C666 -
            ((C113 * C496 + C31383 * C515) * C659 +
             (C113 * C486 + C31383 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C31508) *
               C31397 * C108 +
           (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
            C554 * C667 - C555 * C661 + C788 * C668 + C789 * C31508) *
               C31397 * C109 +
           (C554 * C666 - (C553 * C659 + C552 * C665) + C555 * C660 -
            C788 * C667 - C789 * C661 + (C113 * C779 + C31383 * C780) * C668 +
            (C113 * C781 + C31383 * C782) * C31508) *
               C31397 * C110) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C665 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C659 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C666 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C660 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C667 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C661 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C668 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C31476 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C666 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C659 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C665) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C660 -
           (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
            C4763 * C487 + C4759 * C499) *
               C667 -
           (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
            C4763 * C500 + C4759 * C517) *
               C661 +
           (C4763 * C488 + C4759 * C501 + C4764 * C938 + C4760 * C946 +
            C4765 * C1599 + C4761 * C1600) *
               C668 +
           (C4763 * C502 + C4759 * C518 + C4764 * C947 + C4760 * C953 +
            C4765 * C1601 + C4761 * C1602) *
               C31508) *
              C31397 * C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C30274 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31457 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C30255 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C30255 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31457 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C30274) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31305) *
              C1086 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C30255 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31457 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C30274) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C30274 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31457 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C30255 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31305) *
              C1087 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C30274 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C31457 -
            (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
             C4763 * C302 + C4759 * C318) *
                C30255 -
            (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
             C4763 * C319 + C4759 * C332) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C1299 + C4759 * C1313 + C4764 * C1714 + C4760 * C1718 +
             C4765 * C5878 + C4761 * C5879) *
                C30255 -
            ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
              C4763 * C1314 + C4759 * C1327) *
                 C31457 +
             (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
              C4763 * C1300 + C4759 * C1315) *
                 C30274) +
            (C4763 * C1312 + C4759 * C1326 + C4764 * C1719 + C4760 * C1723 +
             C4765 * C5880 + C4761 * C5881) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C665 +
            (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
               C8926 +
           (C9387 + C9388 - C9389 - C9390 + C9391 + C9392 - C9393 - C9394) *
               C8927 +
           (C9395 + C9396 - C9397 - C9398 + C9399 + C9400 - C9401 - C9402) *
               C8928) *
              C31184 * C31476 +
          ((C9389 - (C9388 + C9387) + C9390 - C9391 - C9392 + C9393 + C9394) *
               C8926 +
           (C9397 - (C9396 + C9395) + C9398 - C9399 - C9400 + C9401 + C9402) *
               C8927 +
           (C2316 * C666 - (C9178 * C659 + C9179 * C665) + C2317 * C660 -
            C2318 * C667 - C2319 * C661 +
            (C113 * C2303 + C31383 * C2304) * C668 +
            (C113 * C2305 + C31383 * C2306) * C31508) *
               C8928) *
              C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C8926 +
            (C10144 + C10145 - C10146 - C10147) * C8927 +
            (C10148 + C10149 - C10150 - C10151) * C8928) *
               C31184 * C31476 +
           ((C10146 - (C10145 + C10144) + C10147) * C8926 +
            (C10150 - (C10149 + C10148) + C10151) * C8927 +
            (C2316 * C30255 - (C9178 * C31457 + C9179 * C30274) +
             C2317 * C31165) *
                C8928) *
               C31184 * C31305) *
              C1086 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C8926 +
            (C10152 - (C10153 + C10154) + C10155) * C8927 +
            (C10156 - (C10157 + C10158) + C10159) * C8928) *
               C31184 * C31476 +
           ((C10154 + C10153 - C10152 - C10155) * C8926 +
            (C10158 + C10157 - C10156 - C10159) * C8927 +
            (C9882 * C30274 + C9883 * C31457 -
             (C113 * C2418 + C31383 * C2422) * C30255 -
             (C113 * C2423 + C31383 * C2427) * C31165) *
                C8928) *
               C31184 * C31305) *
              C1087 +
          ((((C113 * C301 + C31383 * C316) * C30274 +
             (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
             C368 * C31165) *
                C8926 +
            (C10160 + C10161 - C10162 - C10163) * C8927 +
            (C10164 + C10165 - C10172 - C10173) * C8928) *
               C31184 * C31476 +
           ((C10162 - (C10161 + C10160) + C10163) * C8926 +
            (C10172 - (C10165 + C10164) + C10173) * C8927 +
            ((C113 * C6526 + C31383 * C6527) * C30255 -
             (C9889 * C31457 + C9890 * C30274) +
             (C113 * C6528 + C31383 * C6529) * C31165) *
                C8928) *
               C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] += (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C293 +
                    (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C31497) *
                       C31397 * C108 +
                   (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                    C172 * C295 + C173 * C31497) *
                       C31397 * C109 +
                   (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                    C174 * C295 + C175 * C31497) *
                       C31397 * C110) *
                      C31218 * C31541 +
                  ((C361 * C294 -
                    ((C113 * C307 + C31383 * C326) * C287 +
                     (C113 * C297 + C31383 * C308) * C293) +
                    C362 * C288 - C363 * C295 - C364 * C31497) *
                       C31397 * C108 +
                   (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                    C365 * C295 - C366 * C31497) *
                       C31397 * C109 +
                   (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                    (C113 * C300 + C31383 * C314) * C295 -
                    (C113 * C315 + C31383 * C330) * C31497) *
                       C31397 * C110) *
                      C31218 * C31529 +
                  (((C113 * C301 + C31383 * C316) * C293 +
                    (C113 * C317 + C31383 * C331) * C287 - C367 * C294 -
                    C368 * C288 + C369 * C295 + C370 * C31497) *
                       C31397 * C108 +
                   (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                    C371 * C295 + C372 * C31497) *
                       C31397 * C109 +
                   (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                    (C113 * C305 + C31383 * C324) * C295 +
                    (C113 * C325 + C31383 * C335) * C31497) *
                       C31397 * C110) *
                      C31218 * C31504)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C119 + C31383 * C126) * C114 +
                   (C113 * C127 + C31383 * C140) * C102 - C168 * C115 -
                   C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                   C173 * C105 + C174 * C118 + C175 * C106) *
                      C31397 * C108 +
                  (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                   C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                   C176 * C118 + C177 * C106) *
                      C31397 * C109 +
                  (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                   C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                   (C113 * C125 + C31383 * C138) * C118 +
                   (C113 * C139 + C31383 * C146) * C106) *
                      C31397 * C110) *
                 C31218 * C31206) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C1089 +
                    (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                    C169 * C31525 + C170 * C1091 + C171 * C31497) *
                       C31397 * C108 +
                   (C168 * C1089 + C169 * C31538 - C170 * C1090 -
                    C171 * C31525 + C172 * C1091 + C173 * C31497) *
                       C31397 * C109 +
                   (C170 * C1089 + C171 * C31538 - C172 * C1090 -
                    C173 * C31525 + C174 * C1091 + C175 * C31497) *
                       C31397 * C110) *
                      C31218 * C1086 +
                  ((C361 * C1090 -
                    ((C113 * C307 + C31383 * C326) * C31538 +
                     (C113 * C297 + C31383 * C308) * C1089) +
                    C362 * C31525 - C363 * C1091 - C364 * C31497) *
                       C31397 * C108 +
                   (C363 * C1090 - (C362 * C31538 + C361 * C1089) +
                    C364 * C31525 - C365 * C1091 - C366 * C31497) *
                       C31397 * C109 +
                   (C365 * C1090 - (C364 * C31538 + C363 * C1089) +
                    C366 * C31525 - C678 * C1091 - C679 * C31497) *
                       C31397 * C110) *
                      C31218 * C1087 +
                  (((C113 * C301 + C31383 * C316) * C1089 +
                    (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
                    C368 * C31525 + C369 * C1091 + C370 * C31497) *
                       C31397 * C108 +
                   (C367 * C1089 + C368 * C31538 - C369 * C1090 -
                    C370 * C31525 + C371 * C1091 + C372 * C31497) *
                       C31397 * C109 +
                   (C369 * C1089 + C370 * C31538 - C371 * C1090 -
                    C372 * C31525 + (C113 * C305 + C31383 * C324) * C1091 +
                    (C113 * C325 + C31383 * C335) * C31497) *
                       C31397 * C110) *
                      C31218 * C31504)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C1160 +
                    (C113 * C127 + C31383 * C140) * C31155) *
                       C31397 * C108 +
                   (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                   (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                      C31218 * C1155 -
                  ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                   (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                   ((C113 * C307 + C31383 * C326) * C31155 +
                    (C113 * C297 + C31383 * C308) * C1160) *
                       C31397 * C108) *
                      C31218 * C1156 +
                  (((C113 * C301 + C31383 * C316) * C1160 +
                    (C113 * C317 + C31383 * C331) * C31155) *
                       C31397 * C108 +
                   (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                   (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                      C31218 * C1157 -
                  (((C113 * C1167 + C31383 * C1179) * C31155 +
                    (C113 * C1161 + C31383 * C1168) * C1160) *
                       C31397 * C110 +
                   ((C113 * C1169 + C31383 * C1180) * C31155 +
                    (C113 * C1162 + C31383 * C1170) * C1160) *
                       C31397 * C109 +
                   ((C113 * C1171 + C31383 * C1181) * C31155 +
                    (C113 * C1163 + C31383 * C1172) * C1160) *
                       C31397 * C108) *
                      C31218 * C1158 +
                  (((C113 * C1164 + C31383 * C1173) * C1160 +
                    (C113 * C1174 + C31383 * C1182) * C31155) *
                       C31397 * C108 +
                   ((C113 * C1165 + C31383 * C1175) * C1160 +
                    (C113 * C1176 + C31383 * C1183) * C31155) *
                       C31397 * C109 +
                   ((C113 * C1166 + C31383 * C1177) * C1160 +
                    (C113 * C1178 + C31383 * C1184) * C31155) *
                       C31397 * C110) *
                      C31218 * C1159)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 ((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                   C4765 * C301 + C4761 * C316) *
                      C114 +
                  (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                   C4765 * C317 + C4761 * C331) *
                      C102 -
                  (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                   C4763 * C120 + C4759 * C128) *
                      C115 -
                  (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                   C4763 * C129 + C4759 * C141) *
                      C103 +
                  (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                   C4765 * C303 + C4761 * C320) *
                      C116 +
                  (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                   C4765 * C321 + C4761 * C333) *
                      C104 -
                  (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
                   C4763 * C122 + C4759 * C132) *
                      C117 -
                  (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
                   C4763 * C133 + C4759 * C143) *
                      C105 +
                  (C4763 * C123 + C4759 * C134 + C4764 * C300 + C4760 * C314 +
                   C4765 * C305 + C4761 * C324) *
                      C118 +
                  (C4763 * C135 + C4759 * C144 + C4764 * C315 + C4760 * C330 +
                   C4765 * C325 + C4761 * C335) *
                      C106) *
                 C31397 * C31184 * C31218 * C31206) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                    C4765 * C301 + C4761 * C316) *
                       C293 +
                   (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                    C4765 * C317 + C4761 * C331) *
                       C287 -
                   (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                    C4763 * C120 + C4759 * C128) *
                       C294 -
                   (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                    C4763 * C129 + C4759 * C141) *
                       C288 +
                   (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                    C4765 * C303 + C4761 * C320) *
                       C295 +
                   (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                    C4765 * C321 + C4761 * C333) *
                       C31497) *
                      C31397 * C31184 * C31218 * C31541 +
                  ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                    C4765 * C1162 + C4761 * C1170) *
                       C294 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C287 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C293) +
                   (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                    C4765 * C1169 + C4761 * C1180) *
                       C288 -
                   (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                    C4760 * C320 + C4763 * C298 + C4759 * C310) *
                       C295 -
                   (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                    C4760 * C333 + C4763 * C311 + C4759 * C328) *
                       C31497) *
                      C31397 * C31184 * C31218 * C31529 +
                  ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                    C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                       C293 +
                   (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                    C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                       C287 -
                   (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                    C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                       C294 -
                   (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                    C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                       C288 +
                   (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                    C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                       C295 +
                   (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                    C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                       C31497) *
                      C31397 * C31184 * C31218 * C31504)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                    C4765 * C301 + C4761 * C316) *
                       C1089 +
                   (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                    C4765 * C317 + C4761 * C331) *
                       C31538 -
                   (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                    C4763 * C120 + C4759 * C128) *
                       C1090 -
                   (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                    C4763 * C129 + C4759 * C141) *
                       C31525 +
                   (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                    C4765 * C303 + C4761 * C320) *
                       C1091 +
                   (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                    C4765 * C321 + C4761 * C333) *
                       C31497) *
                      C31397 * C31184 * C31218 * C1086 +
                  ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                    C4765 * C1162 + C4761 * C1170) *
                       C1090 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C31538 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C1089) +
                   (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                    C4765 * C1169 + C4761 * C1180) *
                       C31525 -
                   (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                    C4760 * C320 + C4763 * C298 + C4759 * C310) *
                       C1091 -
                   (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                    C4760 * C333 + C4763 * C311 + C4759 * C328) *
                       C31497) *
                      C31397 * C31184 * C31218 * C1087 +
                  ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                    C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                       C1089 +
                   (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                    C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                       C31538 -
                   (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                    C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                       C1090 -
                   (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                    C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                       C31525 +
                   (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                    C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                       C1091 +
                   (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                    C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                       C31497) *
                      C31397 * C31184 * C31218 * C31504)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                    C4765 * C301 + C4761 * C316) *
                       C1160 +
                   (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                    C4765 * C317 + C4761 * C331) *
                       C31155) *
                      C31397 * C31184 * C31218 * C1155 -
                  ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                    C4760 * C331 + C4763 * C307 + C4759 * C326) *
                       C31155 +
                   (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                    C4760 * C316 + C4763 * C297 + C4759 * C308) *
                       C1160) *
                      C31397 * C31184 * C31218 * C1156 +
                  ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                    C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                       C1160 +
                   (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                    C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                       C31155) *
                      C31397 * C31184 * C31218 * C1157 -
                  ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 +
                    C4760 * C1182 + C4763 * C1171 + C4759 * C1181) *
                       C31155 +
                   (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 +
                    C4760 * C1173 + C4763 * C1163 + C4759 * C1172) *
                       C1160) *
                      C31397 * C31184 * C31218 * C1158 +
                  ((C4763 * C1164 + C4759 * C1173 + C4764 * C5500 +
                    C4760 * C5503 + C4765 * C5501 + C4761 * C5504) *
                       C1160 +
                   (C4763 * C1174 + C4759 * C1182 + C4764 * C5502 +
                    C4760 * C5506 + C4765 * C5505 + C4761 * C5507) *
                       C31155) *
                      C31397 * C31184 * C31218 * C1159)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C119 + C31383 * C126) * C114 +
                   (C113 * C127 + C31383 * C140) * C102 - C168 * C115 -
                   C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                   C173 * C105 + C174 * C118 + C175 * C106) *
                      C8926 +
                  ((C113 * C486 + C31383 * C497) * C114 +
                   (C113 * C496 + C31383 * C515) * C102 - C550 * C115 -
                   C551 * C103 + C552 * C116 + C553 * C104 - C554 * C117 -
                   C555 * C105 + C788 * C118 + C789 * C106) *
                      C8927 +
                  ((C113 * C490 + C31383 * C505) * C114 +
                   (C113 * C506 + C31383 * C520) * C102 - C556 * C115 -
                   C557 * C103 + C558 * C116 + C559 * C104 - C560 * C117 -
                   C561 * C105 + (C113 * C494 + C31383 * C513) * C118 +
                   (C113 * C514 + C31383 * C524) * C106) *
                      C8928) *
                 C31184 * C31218 * C31206) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C293 +
                    (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C31497) *
                       C8926 +
                   ((C113 * C486 + C31383 * C497) * C293 +
                    (C113 * C496 + C31383 * C515) * C287 - C550 * C294 -
                    C551 * C288 + C552 * C295 + C553 * C31497) *
                       C8927 +
                   ((C113 * C490 + C31383 * C505) * C293 +
                    (C113 * C506 + C31383 * C520) * C287 - C556 * C294 -
                    C557 * C288 + C558 * C295 + C559 * C31497) *
                       C8928) *
                      C31184 * C31218 * C31541 +
                  ((C361 * C294 -
                    ((C113 * C307 + C31383 * C326) * C287 +
                     (C113 * C297 + C31383 * C308) * C293) +
                    C362 * C288 - C363 * C295 - C364 * C31497) *
                       C8926 +
                   (C968 * C294 -
                    ((C113 * C941 + C31383 * C950) * C287 +
                     (C113 * C935 + C31383 * C940) * C293) +
                    C969 * C288 - C970 * C295 - C971 * C31497) *
                       C8927 +
                   (C2198 * C294 -
                    ((C113 * C1308 + C31383 * C1324) * C287 +
                     (C113 * C1297 + C31383 * C1309) * C293) +
                    C2199 * C288 - C2200 * C295 - C2201 * C31497) *
                       C8928) *
                      C31184 * C31218 * C31529 +
                  (((C113 * C301 + C31383 * C316) * C293 +
                    (C113 * C317 + C31383 * C331) * C287 - C367 * C294 -
                    C368 * C288 + C369 * C295 + C370 * C31497) *
                       C8926 +
                   ((C113 * C1300 + C31383 * C1315) * C293 +
                    (C113 * C1314 + C31383 * C1327) * C287 - C1612 * C294 -
                    C1613 * C288 + C1614 * C295 + C1615 * C31497) *
                       C8927 +
                   ((C113 * C1301 + C31383 * C1316) * C293 +
                    (C113 * C1317 + C31383 * C1328) * C287 -
                    (C113 * C1302 + C31383 * C1318) * C294 -
                    (C113 * C1319 + C31383 * C1329) * C288 +
                    (C113 * C1303 + C31383 * C1320) * C295 +
                    (C113 * C1321 + C31383 * C1330) * C31497) *
                       C8928) *
                      C31184 * C31218 * C31504)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C1089 +
                    (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                    C169 * C31525 + C170 * C1091 + C171 * C31497) *
                       C8926 +
                   (C9174 * C1089 + C9175 * C31538 - C550 * C1090 -
                    C551 * C31525 + C552 * C1091 + C553 * C31497) *
                       C8927 +
                   (C9176 * C1089 + C9177 * C31538 - C556 * C1090 -
                    C557 * C31525 + C558 * C1091 + C559 * C31497) *
                       C8928) *
                      C31184 * C31218 * C1086 +
                  ((C361 * C1090 -
                    ((C113 * C307 + C31383 * C326) * C31538 +
                     (C113 * C297 + C31383 * C308) * C1089) +
                    C362 * C31525 - C363 * C1091 - C364 * C31497) *
                       C8926 +
                   (C968 * C1090 - (C9565 * C31538 + C9566 * C1089) +
                    C969 * C31525 - C970 * C1091 - C971 * C31497) *
                       C8927 +
                   (C2198 * C1090 - (C9567 * C31538 + C9568 * C1089) +
                    C2199 * C31525 - C2200 * C1091 - C2201 * C31497) *
                       C8928) *
                      C31184 * C31218 * C1087 +
                  (((C113 * C301 + C31383 * C316) * C1089 +
                    (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
                    C368 * C31525 + C369 * C1091 + C370 * C31497) *
                       C8926 +
                   ((C113 * C1300 + C31383 * C1315) * C1089 +
                    (C113 * C1314 + C31383 * C1327) * C31538 - C1612 * C1090 -
                    C1613 * C31525 + C1614 * C1091 + C1615 * C31497) *
                       C8927 +
                   ((C113 * C1301 + C31383 * C1316) * C1089 +
                    (C113 * C1317 + C31383 * C1328) * C31538 -
                    (C113 * C1302 + C31383 * C1318) * C1090 -
                    (C113 * C1319 + C31383 * C1329) * C31525 +
                    (C113 * C1303 + C31383 * C1320) * C1091 +
                    (C113 * C1321 + C31383 * C1330) * C31497) *
                       C8928) *
                      C31184 * C31218 * C31504)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C31383 * C126) * C1160 +
                    (C113 * C127 + C31383 * C140) * C31155) *
                       C8926 +
                   (C9174 * C1160 + C9175 * C31155) * C8927 +
                   (C9176 * C1160 + C9177 * C31155) * C8928) *
                      C31184 * C31218 * C1155 -
                  ((C9567 * C31155 + C9568 * C1160) * C8928 +
                   (C9565 * C31155 + C9566 * C1160) * C8927 +
                   ((C113 * C307 + C31383 * C326) * C31155 +
                    (C113 * C297 + C31383 * C308) * C1160) *
                       C8926) *
                      C31184 * C31218 * C1156 +
                  (((C113 * C301 + C31383 * C316) * C1160 +
                    (C113 * C317 + C31383 * C331) * C31155) *
                       C8926 +
                   ((C113 * C1300 + C31383 * C1315) * C1160 +
                    (C113 * C1314 + C31383 * C1327) * C31155) *
                       C8927 +
                   ((C113 * C1301 + C31383 * C1316) * C1160 +
                    (C113 * C1317 + C31383 * C1328) * C31155) *
                       C8928) *
                      C31184 * C31218 * C1157 -
                  (((C113 * C5621 + C31383 * C5627) * C31155 +
                    (C113 * C5618 + C31383 * C5622) * C1160) *
                       C8928 +
                   ((C113 * C1717 + C31383 * C1722) * C31155 +
                    (C113 * C1713 + C31383 * C1716) * C1160) *
                       C8927 +
                   ((C113 * C1171 + C31383 * C1181) * C31155 +
                    (C113 * C1163 + C31383 * C1172) * C1160) *
                       C8926) *
                      C31184 * C31218 * C1158 +
                  (((C113 * C1164 + C31383 * C1173) * C1160 +
                    (C113 * C1174 + C31383 * C1182) * C31155) *
                       C8926 +
                   ((C113 * C5619 + C31383 * C5624) * C1160 +
                    (C113 * C5623 + C31383 * C5628) * C31155) *
                       C8927 +
                   ((C113 * C5620 + C31383 * C5625) * C1160 +
                    (C113 * C5626 + C31383 * C5629) * C31155) *
                       C8928) *
                      C31184 * C31218 * C1159)) /
                    (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30284 +
             (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
             C169 * C31168 + C170 * C30290 + C171 * C2901) *
                C19130 +
            (C11643 + C11644 - C11645 - C11646 + C11647 + C11648) * C19131) *
               C13438 +
           ((C168 * C30284 + C169 * C31160 - C170 * C30280 - C171 * C31168 +
             C172 * C30290 + C173 * C2901) *
                C19130 +
            (C550 * C30284 + C551 * C31160 - C552 * C30280 - C553 * C31168 +
             C554 * C30290 + C555 * C2901) *
                C19131) *
               C13439) *
              C31218 * C31261 +
          (((C361 * C30280 -
             ((C113 * C307 + C31383 * C326) * C31160 +
              (C113 * C297 + C31383 * C308) * C30284) +
             C362 * C31168 - C363 * C30290 - C364 * C2901) *
                C19130 +
            (C11655 - (C11656 + C11657) + C11658 - C11659 - C11660) * C19131) *
               C13438 +
           ((C363 * C30280 - (C362 * C31160 + C361 * C30284) + C364 * C31168 -
             C365 * C30290 - C366 * C2901) *
                C19130 +
            (C970 * C30280 - (C969 * C31160 + C968 * C30284) + C971 * C31168 -
             C972 * C30290 - C973 * C2901) *
                C19131) *
               C13439) *
              C31218 * C31268 +
          ((((C113 * C301 + C31383 * C316) * C30284 +
             (C113 * C317 + C31383 * C331) * C31160 - C367 * C30280 -
             C368 * C31168 + C369 * C30290 + C370 * C2901) *
                C19130 +
            (C9885 * C30284 + C9886 * C31160 - C1612 * C30280 - C1613 * C31168 +
             C1614 * C30290 + C1615 * C2901) *
                C19131) *
               C13438 +
           ((C367 * C30284 + C368 * C31160 - C369 * C30280 - C370 * C31168 +
             C371 * C30290 + C372 * C2901) *
                C19130 +
            (C1612 * C30284 + C1613 * C31160 - C1614 * C30280 - C1615 * C31168 +
             (C113 * C1599 + C31383 * C1600) * C30290 +
             (C113 * C1601 + C31383 * C1602) * C2901) *
                C19131) *
               C13439) *
              C31218 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C2641 +
              (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
              C169 * C31165) *
                 C19130 +
             (C11357 + C11358 - C11359 - C11360) * C19131) *
                C13438 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                 C19130 +
             (C22077 + C22078 - C22079 - C22080) * C19131) *
                C13439) *
               C31476 +
           (((C11359 - (C11358 + C11357) + C11360) * C19130 +
             (C11363 - (C11362 + C11361) + C11364) * C19131) *
                C13438 +
            ((C22079 - (C22078 + C22077) + C22080) * C19130 +
             (C22081 - (C22082 + C22083) + C22084) * C19131) *
                C13439) *
               C31305) *
              C31261 +
          ((((C361 * C2642 -
              ((C113 * C307 + C31383 * C326) * C2635 +
               (C113 * C297 + C31383 * C308) * C2641) +
              C362 * C31165) *
                 C19130 +
             (C11369 - (C11370 + C11371) + C11372) * C19131) *
                C13438 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                 C19130 +
             (C22085 - (C22086 + C22087) + C22088) * C19131) *
                C13439) *
               C31476 +
           (((C11371 + C11370 - C11369 - C11372) * C19130 +
             (C11375 + C11374 - C11373 - C11376) * C19131) *
                C13438 +
            ((C22087 + C22086 - C22085 - C22088) * C19130 +
             (C22089 + C22090 - C22091 - C22092) * C19131) *
                C13439) *
               C31305) *
              C31268 +
          (((((C113 * C301 + C31383 * C316) * C2641 +
              (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
              C368 * C31165) *
                 C19130 +
             (C11813 + C11814 - C11815 - C11816) * C19131) *
                C13438 +
            ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
                 C19130 +
             (C22639 + C22640 - C22641 - C22642) * C19131) *
                C13439) *
               C31476 +
           (((C11815 - (C11814 + C11813) + C11816) * C19130 +
             (C11819 - (C11818 + C11817) + C11820) * C19131) *
                C13438 +
            ((C22641 - (C22640 + C22639) + C22642) * C19130 +
             ((C113 * C1303 + C31383 * C1320) * C2642 -
              (C10171 * C2635 + C10170 * C2641) +
              (C113 * C1321 + C31383 * C1330) * C31165) *
                 C19131) *
                C13439) *
               C31305) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C19130 +
            (C11357 + C11358 - C11359 - C11360) * C19131) *
               C13438 +
           ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                C19130 +
            (C550 * C2641 + C551 * C2635 - C552 * C2642 - C553 * C31165) *
                C19131) *
               C13439) *
              C31218 * C31548 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C19130 +
            (C11369 - (C11370 + C11371) + C11372) * C19131) *
               C13438 +
           ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                C19130 +
            (C970 * C2642 - (C969 * C2635 + C968 * C2641) + C971 * C31165) *
                C19131) *
               C13439) *
              C31218 * C31544 +
          ((((C113 * C301 + C31383 * C316) * C2641 +
             (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
             C368 * C31165) *
                C19130 +
            (C11813 + C11814 - C11815 - C11816) * C19131) *
               C13438 +
           ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
                C19130 +
            (C1612 * C2641 + C1613 * C2635 - C1614 * C2642 - C1615 * C31165) *
                C19131) *
               C13439) *
              C31218 * C31534 +
          (((C1450 * C2642 -
             ((C113 * C1171 + C31383 * C1181) * C2635 +
              (C113 * C1163 + C31383 * C1172) * C2641) +
             C1451 * C31165) *
                C19130 +
            (C20425 * C2642 - (C10281 * C2635 + C10280 * C2641) +
             C20426 * C31165) *
                C19131) *
               C13438 +
           ((C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C31165) *
                C19130 +
            ((C113 * C1715 + C31383 * C1720) * C2642 -
             (C20426 * C2635 + C20425 * C2641) +
             (C113 * C1721 + C31383 * C1724) * C31165) *
                C19131) *
               C13439) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2533 +
             (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
             C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
             C173 * C31508) *
                C19130 +
            (C11919 + C11920 - C11921 - C11922 + C11923 + C11924 - C11925 -
             C11926) *
                C19131) *
               C13438 +
           ((C168 * C2533 + C169 * C31547 - C170 * C2534 - C171 * C31540 +
             C172 * C2535 + C173 * C31527 - C174 * C2536 - C175 * C31508) *
                C19130 +
            (C550 * C2533 + C551 * C31547 - C552 * C2534 - C553 * C31540 +
             C554 * C2535 + C555 * C31527 - C788 * C2536 - C789 * C31508) *
                C19131) *
               C13439) *
              C31218 * C2531 +
          (((C361 * C2534 -
             ((C113 * C307 + C31383 * C326) * C31547 +
              (C113 * C297 + C31383 * C308) * C2533) +
             C362 * C31540 - C363 * C2535 - C364 * C31527 + C365 * C2536 +
             C366 * C31508) *
                C19130 +
            (C968 * C2534 - (C9565 * C31547 + C9566 * C2533) + C969 * C31540 -
             C970 * C2535 - C971 * C31527 + C972 * C2536 + C973 * C31508) *
                C19131) *
               C13438 +
           ((C363 * C2534 - (C362 * C31547 + C361 * C2533) + C364 * C31540 -
             C365 * C2535 - C366 * C31527 + C678 * C2536 + C679 * C31508) *
                C19130 +
            (C970 * C2534 - (C969 * C31547 + C968 * C2533) + C971 * C31540 -
             C972 * C2535 - C973 * C31527 +
             (C113 * C939 + C31383 * C948) * C2536 +
             (C113 * C949 + C31383 * C954) * C31508) *
                C19131) *
               C13439) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C2641 +
              (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
              C169 * C31165) *
                 C19130 +
             (C11357 + C11358 - C11359 - C11360) * C19131) *
                C13438 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                 C19130 +
             (C22077 + C22078 - C22079 - C22080) * C19131) *
                C13439) *
               C31542 +
           (((C11359 - (C11358 + C11357) + C11360) * C19130 +
             (C11363 - (C11362 + C11361) + C11364) * C19131) *
                C13438 +
            ((C22079 - (C22078 + C22077) + C22080) * C19130 +
             (C22081 - (C22082 + C22083) + C22084) * C19131) *
                C13439) *
               C31531 +
           ((C11385 * C19130 + (C11367 + C11366 - C11365 - C11368) * C19131) *
                C13438 +
            ((C22083 + C22082 - C22081 - C22084) * C19130 +
             (C2316 * C2641 + C2317 * C2635 - C2318 * C2642 - C2319 * C31165) *
                 C19131) *
                C13439) *
               C31507) *
              C2531 +
          ((((C361 * C2642 -
              ((C113 * C307 + C31383 * C326) * C2635 +
               (C113 * C297 + C31383 * C308) * C2641) +
              C362 * C31165) *
                 C19130 +
             (C11369 - (C11370 + C11371) + C11372) * C19131) *
                C13438 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                 C19130 +
             (C22085 - (C22086 + C22087) + C22088) * C19131) *
                C13439) *
               C31542 +
           (((C11371 + C11370 - C11369 - C11372) * C19130 +
             (C11375 + C11374 - C11373 - C11376) * C19131) *
                C13438 +
            ((C22087 + C22086 - C22085 - C22088) * C19130 +
             (C22089 + C22090 - C22091 - C22092) * C19131) *
                C13439) *
               C31531 +
           ((C11386 * C19130 + (C11379 - (C11378 + C11377) + C11380) * C19131) *
                C13438 +
            ((C22091 - (C22090 + C22089) + C22092) * C19130 +
             ((C113 * C2419 + C31383 * C2424) * C2642 -
              (C10784 * C2635 + C10783 * C2641) +
              (C113 * C2425 + C31383 * C2428) * C31165) *
                 C19131) *
                C13439) *
               C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C30284 +
              (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
              C169 * C31168 + C170 * C30290 + C171 * C2901) *
                 C19130 +
             (C11643 + C11644 - C11645 - C11646 + C11647 + C11648) * C19131) *
                C13438 +
            ((C168 * C30284 + C169 * C31160 - C170 * C30280 - C171 * C31168 +
              C172 * C30290 + C173 * C2901) *
                 C19130 +
             (C22433 + C22434 - C22435 - C22436 + C22437 + C22438) * C19131) *
                C13439) *
               C31476 +
           (((C11645 - (C11644 + C11643) + C11646 - C11647 - C11648) * C19130 +
             (C11651 - (C11650 + C11649) + C11652 - C11653 - C11654) * C19131) *
                C13438 +
            ((C22435 - (C22434 + C22433) + C22436 - C22437 - C22438) * C19130 +
             (C558 * C30280 - (C557 * C31160 + C556 * C30284) + C559 * C31168 -
              C560 * C30290 - C561 * C2901) *
                 C19131) *
                C13439) *
               C31305) *
              C2531 +
          ((((C361 * C30280 -
              ((C113 * C307 + C31383 * C326) * C31160 +
               (C113 * C297 + C31383 * C308) * C30284) +
              C362 * C31168 - C363 * C30290 - C364 * C2901) *
                 C19130 +
             (C11655 - (C11656 + C11657) + C11658 - C11659 - C11660) * C19131) *
                C13438 +
            ((C363 * C30280 - (C362 * C31160 + C361 * C30284) + C364 * C31168 -
              C365 * C30290 - C366 * C2901) *
                 C19130 +
             (C22439 - (C22440 + C22441) + C22442 - C22443 - C22444) * C19131) *
                C13439) *
               C31476 +
           (((C11657 + C11656 - C11655 - C11658 + C11659 + C11660) * C19130 +
             (C11663 + C11662 - C11661 - C11664 + C11665 + C11666) * C19131) *
                C13438 +
            ((C22441 + C22440 - C22439 - C22442 + C22443 + C22444) * C19130 +
             (C2198 * C30284 + C2199 * C31160 - C2200 * C30280 -
              C2201 * C31168 + (C113 * C2185 + C31383 * C2186) * C30290 +
              (C113 * C2187 + C31383 * C2188) * C2901) *
                 C19131) *
                C13439) *
               C31305) *
              C31265)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2533 +
             (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
             C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
             C173 * C31508) *
                C19130 +
            (C11919 + C11920 - C11921 - C11922 + C11923 + C11924 - C11925 -
             C11926) *
                C19131) *
               C13438 +
           ((C168 * C2533 + C169 * C31547 - C170 * C2534 - C171 * C31540 +
             C172 * C2535 + C173 * C31527 - C174 * C2536 - C175 * C31508) *
                C19130 +
            (C550 * C2533 + C551 * C31547 - C552 * C2534 - C553 * C31540 +
             C554 * C2535 + C555 * C31527 - C788 * C2536 - C789 * C31508) *
                C19131) *
               C13439) *
              C31218 * C2531 +
          (((C361 * C2534 -
             ((C113 * C307 + C31383 * C326) * C31547 +
              (C113 * C297 + C31383 * C308) * C2533) +
             C362 * C31540 - C363 * C2535 - C364 * C31527 + C365 * C2536 +
             C366 * C31508) *
                C19130 +
            (C968 * C2534 - (C9565 * C31547 + C9566 * C2533) + C969 * C31540 -
             C970 * C2535 - C971 * C31527 + C972 * C2536 + C973 * C31508) *
                C19131) *
               C13438 +
           ((C363 * C2534 - (C362 * C31547 + C361 * C2533) + C364 * C31540 -
             C365 * C2535 - C366 * C31527 + C678 * C2536 + C679 * C31508) *
                C19130 +
            (C970 * C2534 - (C969 * C31547 + C968 * C2533) + C971 * C31540 -
             C972 * C2535 - C973 * C31527 +
             (C113 * C939 + C31383 * C948) * C2536 +
             (C113 * C949 + C31383 * C954) * C31508) *
                C19131) *
               C13439) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C19130 +
            (C11357 + C11358 - C11359 - C11360) * C19131) *
               C13438 +
           ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                C19130 +
            (C550 * C2641 + C551 * C2635 - C552 * C2642 - C553 * C31165) *
                C19131) *
               C13439) *
              C31218 * C31548 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C19130 +
            (C11369 - (C11370 + C11371) + C11372) * C19131) *
               C13438 +
           ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                C19130 +
            (C970 * C2642 - (C969 * C2635 + C968 * C2641) + C971 * C31165) *
                C19131) *
               C13439) *
              C31218 * C31544 +
          ((((C113 * C301 + C31383 * C316) * C2641 +
             (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
             C368 * C31165) *
                C19130 +
            (C11813 + C11814 - C11815 - C11816) * C19131) *
               C13438 +
           ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
                C19130 +
            (C1612 * C2641 + C1613 * C2635 - C1614 * C2642 - C1615 * C31165) *
                C19131) *
               C13439) *
              C31218 * C31534 +
          (((C1450 * C2642 -
             ((C113 * C1171 + C31383 * C1181) * C2635 +
              (C113 * C1163 + C31383 * C1172) * C2641) +
             C1451 * C31165) *
                C19130 +
            (C20425 * C2642 - (C10281 * C2635 + C10280 * C2641) +
             C20426 * C31165) *
                C19131) *
               C13438 +
           ((C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C31165) *
                C19130 +
            ((C113 * C1715 + C31383 * C1720) * C2642 -
             (C20426 * C2635 + C20425 * C2641) +
             (C113 * C1721 + C31383 * C1724) * C31165) *
                C19131) *
               C13439) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C30274 +
              (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
              C169 * C31165) *
                 C19130 +
             (C10144 + C10145 - C10146 - C10147) * C19131) *
                C13438 +
            ((C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                 C19130 +
             (C20621 + C20622 - C20623 - C20624) * C19131) *
                C13439) *
               C3298 +
           (((C10146 - (C10145 + C10144) + C10147) * C19130 +
             (C10150 - (C10149 + C10148) + C10151) * C19131) *
                C13438 +
            ((C20623 - (C20622 + C20621) + C20624) * C19130 +
             (C21349 - (C21350 + C21351) + C21352) * C19131) *
                C13439) *
               C31305) *
              C31261 +
          ((((C361 * C30255 -
              ((C113 * C307 + C31383 * C326) * C31457 +
               (C113 * C297 + C31383 * C308) * C30274) +
              C362 * C31165) *
                 C19130 +
             (C10152 - (C10153 + C10154) + C10155) * C19131) *
                C13438 +
            ((C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                 C19130 +
             (C20625 - (C20626 + C20627) + C20628) * C19131) *
                C13439) *
               C3298 +
           (((C10154 + C10153 - C10152 - C10155) * C19130 +
             (C10158 + C10157 - C10156 - C10159) * C19131) *
                C13438 +
            ((C20627 + C20626 - C20625 - C20628) * C19130 +
             (C21353 + C21354 - C21355 - C21356) * C19131) *
                C13439) *
               C31305) *
              C31268 +
          (((((C113 * C301 + C31383 * C316) * C30274 +
              (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
              C368 * C31165) *
                 C19130 +
             (C10160 + C10161 - C10162 - C10163) * C19131) *
                C13438 +
            ((C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
                 C19130 +
             (C20629 + C20630 - C20631 - C20632) * C19131) *
                C13439) *
               C3298 +
           (((C10162 - (C10161 + C10160) + C10163) * C19130 +
             (C10172 - (C10165 + C10164) + C10173) * C19131) *
                C13438 +
            ((C20631 - (C20630 + C20629) + C20632) * C19130 +
             ((C113 * C1303 + C31383 * C1320) * C30255 -
              (C10171 * C31457 + C10170 * C30274) +
              (C113 * C1321 + C31383 * C1330) * C31165) *
                 C19131) *
                C13439) *
               C31305) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1160 +
              (C113 * C127 + C31383 * C140) * C31155) *
                 C19130 +
             (C9855 + C9856) * C19131) *
                C13438 +
            ((C168 * C1160 + C169 * C31155) * C19130 +
             (C20279 + C20280) * C19131) *
                C13439) *
               C31301 -
           (((C20281 + C20282) * C19131 + (C20280 + C20279) * C19130) * C13439 +
            ((C9858 + C9857) * C19131 + (C9856 + C9855) * C19130) * C13438) *
               C31308 +
           ((C9881 * C19130 + (C9860 + C9859) * C19131) * C13438 +
            ((C20282 + C20281) * C19130 + (C21151 + C21152) * C19131) *
                C13439) *
               C3806) *
              C31261 +
          ((((C9861 + C9862) * C19130 + (C9863 + C9864) * C19131) * C13438 +
            ((C20283 + C20284) * C19130 + (C20285 + C20286) * C19131) *
                C13439) *
               C31308 -
           (((C20284 + C20283) * C19131 +
             (C362 * C31155 + C361 * C1160) * C19130) *
                C13439 +
            ((C9862 + C9861) * C19131 +
             ((C113 * C307 + C31383 * C326) * C31155 +
              (C113 * C297 + C31383 * C308) * C1160) *
                 C19130) *
                C13438) *
               C31301 -
           (((C21621 + C21622) * C19131 + (C20286 + C20285) * C19130) * C13439 +
            ((C9892 + C9891) * C19131 + C9884 * C19130) * C13438) *
               C3806) *
              C31268 +
          (((((C113 * C301 + C31383 * C316) * C1160 +
              (C113 * C317 + C31383 * C331) * C31155) *
                 C19130 +
             (C9893 + C9894) * C19131) *
                C13438 +
            ((C367 * C1160 + C368 * C31155) * C19130 +
             (C20287 + C20288) * C19131) *
                C13439) *
               C31301 -
           (((C20289 + C20290) * C19131 + (C20288 + C20287) * C19130) * C13439 +
            ((C9896 + C9895) * C19131 + (C9894 + C9893) * C19130) * C13438) *
               C31308 +
           ((C9899 * C19130 + (C9898 + C9897) * C19131) * C13438 +
            ((C20290 + C20289) * C19130 +
             ((C113 * C6526 + C31383 * C6527) * C1160 +
              (C113 * C6528 + C31383 * C6529) * C31155) *
                 C19131) *
                C13439) *
               C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1160 +
              (C113 * C127 + C31383 * C140) * C31155) *
                 C19130 +
             (C9855 + C9856) * C19131) *
                C13438 +
            ((C168 * C1160 + C169 * C31155) * C19130 +
             (C20279 + C20280) * C19131) *
                C13439) *
               C3298 -
           (((C20281 + C20282) * C19131 + (C20280 + C20279) * C19130) * C13439 +
            ((C9858 + C9857) * C19131 + (C9856 + C9855) * C19130) * C13438) *
               C31305) *
              C31548 +
          ((((C9861 + C9862) * C19130 + (C9863 + C9864) * C19131) * C13438 +
            ((C20283 + C20284) * C19130 + (C20285 + C20286) * C19131) *
                C13439) *
               C31305 -
           (((C20284 + C20283) * C19131 +
             (C362 * C31155 + C361 * C1160) * C19130) *
                C13439 +
            ((C9862 + C9861) * C19131 +
             ((C113 * C307 + C31383 * C326) * C31155 +
              (C113 * C297 + C31383 * C308) * C1160) *
                 C19130) *
                C13438) *
               C3298) *
              C31544 +
          (((((C113 * C301 + C31383 * C316) * C1160 +
              (C113 * C317 + C31383 * C331) * C31155) *
                 C19130 +
             (C9893 + C9894) * C19131) *
                C13438 +
            ((C367 * C1160 + C368 * C31155) * C19130 +
             (C20287 + C20288) * C19131) *
                C13439) *
               C3298 -
           (((C20289 + C20290) * C19131 + (C20288 + C20287) * C19130) * C13439 +
            ((C9896 + C9895) * C19131 + (C9894 + C9893) * C19130) * C13438) *
               C31305) *
              C31534 +
          ((((C10284 + C10285) * C19130 + (C10286 + C10287) * C19131) * C13438 +
            ((C20763 + C20764) * C19130 +
             ((C113 * C6424 + C31383 * C6425) * C1160 +
              (C113 * C6426 + C31383 * C6427) * C31155) *
                 C19131) *
                C13439) *
               C31305 -
           (((C20764 + C20763) * C19131 +
             (C1451 * C31155 + C1450 * C1160) * C19130) *
                C13439 +
            ((C10285 + C10284) * C19131 +
             ((C113 * C1171 + C31383 * C1181) * C31155 +
              (C113 * C1163 + C31383 * C1172) * C1160) *
                 C19130) *
                C13438) *
               C3298) *
              C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1089 +
              (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
              C169 * C31525 + C170 * C1091 + C171 * C31497) *
                 C19130 +
             (C10398 + C10399 - C10400 - C10401 + C10402 + C10403) * C19131) *
                C13438 +
            ((C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
              C172 * C1091 + C173 * C31497) *
                 C19130 +
             (C20911 + C20912 - C20913 - C20914 + C20915 + C20916) * C19131) *
                C13439) *
               C3298 +
           (((C10400 - (C10399 + C10398) + C10401 - C10402 - C10403) * C19130 +
             (C10406 - (C10405 + C10404) + C10407 - C10408 - C10409) * C19131) *
                C13438 +
            ((C20913 - (C20912 + C20911) + C20914 - C20915 - C20916) * C19130 +
             (C20917 - (C20918 + C20919) + C20920 - C20921 - C20922) * C19131) *
                C13439) *
               C31305) *
              C2531 +
          ((((C361 * C1090 -
              ((C113 * C307 + C31383 * C326) * C31538 +
               (C113 * C297 + C31383 * C308) * C1089) +
              C362 * C31525 - C363 * C1091 - C364 * C31497) *
                 C19130 +
             (C12745 - (C12746 + C12747) + C12748 - C12749 - C12750) * C19131) *
                C13438 +
            ((C363 * C1090 - (C362 * C31538 + C361 * C1089) + C364 * C31525 -
              C365 * C1091 - C366 * C31497) *
                 C19130 +
             (C23843 - (C23844 + C23845) + C23846 - C23847 - C23848) * C19131) *
                C13439) *
               C3298 +
           (((C12747 + C12746 - C12745 - C12748 + C12749 + C12750) * C19130 +
             (C12753 + C12752 - C12751 - C12754 + C12755 + C12756) * C19131) *
                C13438 +
            ((C23845 + C23844 - C23843 - C23846 + C23847 + C23848) * C19130 +
             (C2198 * C1089 + C2199 * C31538 - C2200 * C1090 - C2201 * C31525 +
              (C113 * C2185 + C31383 * C2186) * C1091 +
              (C113 * C2187 + C31383 * C2188) * C31497) *
                 C19131) *
                C13439) *
               C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1160 +
              (C113 * C127 + C31383 * C140) * C31155) *
                 C19130 +
             (C9855 + C9856) * C19131) *
                C13438 +
            ((C168 * C1160 + C169 * C31155) * C19130 +
             (C20279 + C20280) * C19131) *
                C13439) *
               C31549 -
           (((C20281 + C20282) * C19131 + (C20280 + C20279) * C19130) * C13439 +
            ((C9858 + C9857) * C19131 + (C9856 + C9855) * C19130) * C13438) *
               C31546 +
           ((C9881 * C19130 + (C9860 + C9859) * C19131) * C13438 +
            ((C20282 + C20281) * C19130 + (C21151 + C21152) * C19131) *
                C13439) *
               C31537 -
           (((C21153 + C21154) * C19131 + (C21152 + C21151) * C19130) * C13439 +
            ((C10615 + C10614) * C19131 + C10601 * C19130) * C13438) *
               C31520) *
              C2531 +
          ((((C9861 + C9862) * C19130 + (C9863 + C9864) * C19131) * C13438 +
            ((C20283 + C20284) * C19130 + (C20285 + C20286) * C19131) *
                C13439) *
               C31546 -
           (((C20284 + C20283) * C19131 +
             (C362 * C31155 + C361 * C1160) * C19130) *
                C13439 +
            ((C9862 + C9861) * C19131 +
             ((C113 * C307 + C31383 * C326) * C31155 +
              (C113 * C297 + C31383 * C308) * C1160) *
                 C19130) *
                C13438) *
               C31549 -
           (((C21621 + C21622) * C19131 + (C20286 + C20285) * C19130) * C13439 +
            ((C9892 + C9891) * C19131 + C9884 * C19130) * C13438) *
               C31537 +
           ((C11006 * C19130 + (C11014 + C11013) * C19131) * C13438 +
            ((C21622 + C21621) * C19130 +
             ((C113 * C10764 + C31383 * C10765) * C1160 +
              (C113 * C10766 + C31383 * C10767) * C31155) *
                 C19131) *
                C13439) *
               C31520) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C30274 +
              (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
              C169 * C31165) *
                 C19130 +
             (C10144 + C10145 - C10146 - C10147) * C19131) *
                C13438 +
            ((C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                 C19130 +
             (C20621 + C20622 - C20623 - C20624) * C19131) *
                C13439) *
               C31301 +
           (((C10146 - (C10145 + C10144) + C10147) * C19130 +
             (C10150 - (C10149 + C10148) + C10151) * C19131) *
                C13438 +
            ((C20623 - (C20622 + C20621) + C20624) * C19130 +
             (C21349 - (C21350 + C21351) + C21352) * C19131) *
                C13439) *
               C31308 +
           ((C10785 * C19130 + (C10772 + C10771 - C10770 - C10773) * C19131) *
                C13438 +
            ((C21351 + C21350 - C21349 - C21352) * C19130 +
             (C21487 + C21488 - C21489 - C21490) * C19131) *
                C13439) *
               C3806) *
              C2531 +
          ((((C361 * C30255 -
              ((C113 * C307 + C31383 * C326) * C31457 +
               (C113 * C297 + C31383 * C308) * C30274) +
              C362 * C31165) *
                 C19130 +
             (C10152 - (C10153 + C10154) + C10155) * C19131) *
                C13438 +
            ((C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                 C19130 +
             (C20625 - (C20626 + C20627) + C20628) * C19131) *
                C13439) *
               C31301 +
           (((C10154 + C10153 - C10152 - C10155) * C19130 +
             (C10158 + C10157 - C10156 - C10159) * C19131) *
                C13438 +
            ((C20627 + C20626 - C20625 - C20628) * C19130 +
             (C21353 + C21354 - C21355 - C21356) * C19131) *
                C13439) *
               C31308 +
           ((C10786 * C19130 + (C10787 - (C10776 + C10775) + C10788) * C19131) *
                C13438 +
            ((C21355 - (C21354 + C21353) + C21356) * C19130 +
             ((C113 * C2419 + C31383 * C2424) * C30255 -
              (C10784 * C31457 + C10783 * C30274) +
              (C113 * C2425 + C31383 * C2428) * C31165) *
                 C19131) *
                C13439) *
               C3806) *
              C31265)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1089 +
              (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
              C169 * C31525 + C170 * C1091 + C171 * C31497) *
                 C19130 +
             (C10398 + C10399 - C10400 - C10401 + C10402 + C10403) * C19131) *
                C13438 +
            ((C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
              C172 * C1091 + C173 * C31497) *
                 C19130 +
             (C20911 + C20912 - C20913 - C20914 + C20915 + C20916) * C19131) *
                C13439) *
               C3298 +
           (((C10400 - (C10399 + C10398) + C10401 - C10402 - C10403) * C19130 +
             (C10406 - (C10405 + C10404) + C10407 - C10408 - C10409) * C19131) *
                C13438 +
            ((C20913 - (C20912 + C20911) + C20914 - C20915 - C20916) * C19130 +
             (C20917 - (C20918 + C20919) + C20920 - C20921 - C20922) * C19131) *
                C13439) *
               C31305) *
              C2531 +
          ((((C361 * C1090 -
              ((C113 * C307 + C31383 * C326) * C31538 +
               (C113 * C297 + C31383 * C308) * C1089) +
              C362 * C31525 - C363 * C1091 - C364 * C31497) *
                 C19130 +
             (C12745 - (C12746 + C12747) + C12748 - C12749 - C12750) * C19131) *
                C13438 +
            ((C363 * C1090 - (C362 * C31538 + C361 * C1089) + C364 * C31525 -
              C365 * C1091 - C366 * C31497) *
                 C19130 +
             (C23843 - (C23844 + C23845) + C23846 - C23847 - C23848) * C19131) *
                C13439) *
               C3298 +
           (((C12747 + C12746 - C12745 - C12748 + C12749 + C12750) * C19130 +
             (C12753 + C12752 - C12751 - C12754 + C12755 + C12756) * C19131) *
                C13438 +
            ((C23845 + C23844 - C23843 - C23846 + C23847 + C23848) * C19130 +
             (C2198 * C1089 + C2199 * C31538 - C2200 * C1090 - C2201 * C31525 +
              (C113 * C2185 + C31383 * C2186) * C1091 +
              (C113 * C2187 + C31383 * C2188) * C31497) *
                 C19131) *
                C13439) *
               C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1160 +
              (C113 * C127 + C31383 * C140) * C31155) *
                 C19130 +
             (C9855 + C9856) * C19131) *
                C13438 +
            ((C168 * C1160 + C169 * C31155) * C19130 +
             (C20279 + C20280) * C19131) *
                C13439) *
               C3298 -
           (((C20281 + C20282) * C19131 + (C20280 + C20279) * C19130) * C13439 +
            ((C9858 + C9857) * C19131 + (C9856 + C9855) * C19130) * C13438) *
               C31305) *
              C31548 +
          ((((C9861 + C9862) * C19130 + (C9863 + C9864) * C19131) * C13438 +
            ((C20283 + C20284) * C19130 + (C20285 + C20286) * C19131) *
                C13439) *
               C31305 -
           (((C20284 + C20283) * C19131 +
             (C362 * C31155 + C361 * C1160) * C19130) *
                C13439 +
            ((C9862 + C9861) * C19131 +
             ((C113 * C307 + C31383 * C326) * C31155 +
              (C113 * C297 + C31383 * C308) * C1160) *
                 C19130) *
                C13438) *
               C3298) *
              C31544 +
          (((((C113 * C301 + C31383 * C316) * C1160 +
              (C113 * C317 + C31383 * C331) * C31155) *
                 C19130 +
             (C9893 + C9894) * C19131) *
                C13438 +
            ((C367 * C1160 + C368 * C31155) * C19130 +
             (C20287 + C20288) * C19131) *
                C13439) *
               C3298 -
           (((C20289 + C20290) * C19131 + (C20288 + C20287) * C19130) * C13439 +
            ((C9896 + C9895) * C19131 + (C9894 + C9893) * C19130) * C13438) *
               C31305) *
              C31534 +
          ((((C10284 + C10285) * C19130 + (C10286 + C10287) * C19131) * C13438 +
            ((C20763 + C20764) * C19130 +
             ((C113 * C6424 + C31383 * C6425) * C1160 +
              (C113 * C6426 + C31383 * C6427) * C31155) *
                 C19131) *
                C13439) *
               C31305 -
           (((C20764 + C20763) * C19131 +
             (C1451 * C31155 + C1450 * C1160) * C19130) *
                C13439 +
            ((C10285 + C10284) * C19131 +
             ((C113 * C1171 + C31383 * C1181) * C31155 +
              (C113 * C1163 + C31383 * C1172) * C1160) *
                 C19130) *
                C13438) *
               C3298) *
              C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C19130 +
            (C10144 + C10145 - C10146 - C10147) * C19131) *
               C13438 +
           ((C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                C19130 +
            (C550 * C30274 + C551 * C31457 - C552 * C30255 - C553 * C31165) *
                C19131) *
               C13439) *
              C31218 * C1431 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C19130 +
            (C10152 - (C10153 + C10154) + C10155) * C19131) *
               C13438 +
           ((C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                C19130 +
            (C970 * C30255 - (C969 * C31457 + C968 * C30274) + C971 * C31165) *
                C19131) *
               C13439) *
              C31218 * C1432 +
          ((((C113 * C301 + C31383 * C316) * C30274 +
             (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
             C368 * C31165) *
                C19130 +
            (C10160 + C10161 - C10162 - C10163) * C19131) *
               C13438 +
           ((C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
                C19130 +
            (C1612 * C30274 + C1613 * C31457 - C1614 * C30255 -
             C1615 * C31165) *
                C19131) *
               C13439) *
              C31218 * C1433 +
          (((C1450 * C30255 -
             ((C113 * C1171 + C31383 * C1181) * C31457 +
              (C113 * C1163 + C31383 * C1172) * C30274) +
             C1451 * C31165) *
                C19130 +
            (C20425 * C30255 - (C10281 * C31457 + C10280 * C30274) +
             C20426 * C31165) *
                C19131) *
               C13438 +
           ((C1452 * C30255 - (C1451 * C31457 + C1450 * C30274) +
             C1453 * C31165) *
                C19130 +
            ((C113 * C1715 + C31383 * C1720) * C30255 -
             (C20426 * C31457 + C20425 * C30274) +
             (C113 * C1721 + C31383 * C1724) * C31165) *
                C19131) *
               C13439) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C665 +
             (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
                C19130 +
            (C9387 + C9388 - C9389 - C9390 + C9391 + C9392 - C9393 - C9394) *
                C19131) *
               C13438 +
           ((C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31508) *
                C19130 +
            (C550 * C665 + C551 * C659 - C552 * C666 - C553 * C660 +
             C554 * C667 + C555 * C661 - C788 * C668 - C789 * C31508) *
                C19131) *
               C13439) *
              C31218 * C31475 +
          (((C361 * C666 -
             ((C113 * C307 + C31383 * C326) * C659 +
              (C113 * C297 + C31383 * C308) * C665) +
             C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
             C366 * C31508) *
                C19130 +
            (C968 * C666 - (C9565 * C659 + C9566 * C665) + C969 * C660 -
             C970 * C667 - C971 * C661 + C972 * C668 + C973 * C31508) *
                C19131) *
               C13438 +
           ((C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
             C365 * C667 - C366 * C661 + C678 * C668 + C679 * C31508) *
                C19130 +
            (C970 * C666 - (C969 * C659 + C968 * C665) + C971 * C660 -
             C972 * C667 - C973 * C661 + (C113 * C939 + C31383 * C948) * C668 +
             (C113 * C949 + C31383 * C954) * C31508) *
                C19131) *
               C13439) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C30274 +
              (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
              C169 * C31165) *
                 C19130 +
             (C10144 + C10145 - C10146 - C10147) * C19131) *
                C13438 +
            ((C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                 C19130 +
             (C20621 + C20622 - C20623 - C20624) * C19131) *
                C13439) *
               C1835 +
           (((C10146 - (C10145 + C10144) + C10147) * C19130 +
             (C10150 - (C10149 + C10148) + C10151) * C19131) *
                C13438 +
            ((C20623 - (C20622 + C20621) + C20624) * C19130 +
             (C21349 - (C21350 + C21351) + C21352) * C19131) *
                C13439) *
               C1836 +
           ((C10785 * C19130 + (C10772 + C10771 - C10770 - C10773) * C19131) *
                C13438 +
            ((C21351 + C21350 - C21349 - C21352) * C19130 +
             (C2316 * C30274 + C2317 * C31457 - C2318 * C30255 -
              C2319 * C31165) *
                 C19131) *
                C13439) *
               C31507) *
              C31475 +
          ((((C361 * C30255 -
              ((C113 * C307 + C31383 * C326) * C31457 +
               (C113 * C297 + C31383 * C308) * C30274) +
              C362 * C31165) *
                 C19130 +
             (C10152 - (C10153 + C10154) + C10155) * C19131) *
                C13438 +
            ((C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                 C19130 +
             (C20625 - (C20626 + C20627) + C20628) * C19131) *
                C13439) *
               C1835 +
           (((C10154 + C10153 - C10152 - C10155) * C19130 +
             (C10158 + C10157 - C10156 - C10159) * C19131) *
                C13438 +
            ((C20627 + C20626 - C20625 - C20628) * C19130 +
             (C21353 + C21354 - C21355 - C21356) * C19131) *
                C13439) *
               C1836 +
           ((C10786 * C19130 + (C10787 - (C10776 + C10775) + C10788) * C19131) *
                C13438 +
            ((C21355 - (C21354 + C21353) + C21356) * C19130 +
             ((C113 * C2419 + C31383 * C2424) * C30255 -
              (C10784 * C31457 + C10783 * C30274) +
              (C113 * C2425 + C31383 * C2428) * C31165) *
                 C19131) *
                C13439) *
               C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1160 +
              (C113 * C127 + C31383 * C140) * C31155) *
                 C19130 +
             (C9855 + C9856) * C19131) *
                C13438 +
            ((C168 * C1160 + C169 * C31155) * C19130 +
             (C20279 + C20280) * C19131) *
                C13439) *
               C31476 -
           (((C20281 + C20282) * C19131 + (C20280 + C20279) * C19130) * C13439 +
            ((C9858 + C9857) * C19131 + (C9856 + C9855) * C19130) * C13438) *
               C31305) *
              C1431 +
          ((((C9861 + C9862) * C19130 + (C9863 + C9864) * C19131) * C13438 +
            ((C20283 + C20284) * C19130 + (C20285 + C20286) * C19131) *
                C13439) *
               C31305 -
           (((C20284 + C20283) * C19131 +
             (C362 * C31155 + C361 * C1160) * C19130) *
                C13439 +
            ((C9862 + C9861) * C19131 +
             ((C113 * C307 + C31383 * C326) * C31155 +
              (C113 * C297 + C31383 * C308) * C1160) *
                 C19130) *
                C13438) *
               C31476) *
              C1432 +
          (((((C113 * C301 + C31383 * C316) * C1160 +
              (C113 * C317 + C31383 * C331) * C31155) *
                 C19130 +
             (C9893 + C9894) * C19131) *
                C13438 +
            ((C367 * C1160 + C368 * C31155) * C19130 +
             (C20287 + C20288) * C19131) *
                C13439) *
               C31476 -
           (((C20289 + C20290) * C19131 + (C20288 + C20287) * C19130) * C13439 +
            ((C9896 + C9895) * C19131 + (C9894 + C9893) * C19130) * C13438) *
               C31305) *
              C1433 +
          ((((C10284 + C10285) * C19130 + (C10286 + C10287) * C19131) * C13438 +
            ((C20763 + C20764) * C19130 +
             ((C113 * C6424 + C31383 * C6425) * C1160 +
              (C113 * C6426 + C31383 * C6427) * C31155) *
                 C19131) *
                C13439) *
               C31305 -
           (((C20764 + C20763) * C19131 +
             (C1451 * C31155 + C1450 * C1160) * C19130) *
                C13439 +
            ((C10285 + C10284) * C19131 +
             ((C113 * C1171 + C31383 * C1181) * C31155 +
              (C113 * C1163 + C31383 * C1172) * C1160) *
                 C19130) *
                C13438) *
               C31476) *
              C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C293 +
              (C113 * C127 + C31383 * C140) * C287 - C168 * C294 - C169 * C288 +
              C170 * C295 + C171 * C31497) *
                 C19130 +
             (C9180 + C9181 - C9154 - C9155 + C9156 + C9157) * C19131) *
                C13438 +
            ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
              C172 * C295 + C173 * C31497) *
                 C19130 +
             (C19425 + C19426 - C19427 - C19428 + C19429 + C19430) * C19131) *
                C13439) *
               C31476 +
           (((C9154 - (C9181 + C9180) + C9155 - C9156 - C9157) * C19130 +
             (C9162 - (C9183 + C9182) + C9163 - C9164 - C9165) * C19131) *
                C13438 +
            ((C19427 - (C19426 + C19425) + C19428 - C19429 - C19430) * C19130 +
             (C19431 - (C19432 + C19433) + C19434 - C19435 - C19436) * C19131) *
                C13439) *
               C31305) *
              C31475 +
          ((((C361 * C294 -
              ((C113 * C307 + C31383 * C326) * C287 +
               (C113 * C297 + C31383 * C308) * C293) +
              C362 * C288 - C363 * C295 - C364 * C31497) *
                 C19130 +
             (C9549 - (C9569 + C9570) + C9554 - C9555 - C9556) * C19131) *
                C13438 +
            ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
              C365 * C295 - C366 * C31497) *
                 C19130 +
             (C19899 - (C19900 + C19901) + C19902 - C19903 - C19904) * C19131) *
                C13439) *
               C31476 +
           (((C9570 + C9569 - C9549 - C9554 + C9555 + C9556) * C19130 +
             (C9572 + C9571 - C9557 - C9562 + C9563 + C9564) * C19131) *
                C13438 +
            ((C19901 + C19900 - C19899 - C19902 + C19903 + C19904) * C19130 +
             (C2198 * C293 + C2199 * C287 - C2200 * C294 - C2201 * C288 +
              (C113 * C2185 + C31383 * C2186) * C295 +
              (C113 * C2187 + C31383 * C2188) * C31497) *
                 C19131) *
                C13439) *
               C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1160 +
              (C113 * C127 + C31383 * C140) * C31155) *
                 C19130 +
             (C9855 + C9856) * C19131) *
                C13438 +
            ((C168 * C1160 + C169 * C31155) * C19130 +
             (C20279 + C20280) * C19131) *
                C13439) *
               C2299 -
           (((C20281 + C20282) * C19131 + (C20280 + C20279) * C19130) * C13439 +
            ((C9858 + C9857) * C19131 + (C9856 + C9855) * C19130) * C13438) *
               C2300 +
           ((C9881 * C19130 + (C9860 + C9859) * C19131) * C13438 +
            ((C20282 + C20281) * C19130 + (C21151 + C21152) * C19131) *
                C13439) *
               C2301 -
           (((C21153 + C21154) * C19131 + (C21152 + C21151) * C19130) * C13439 +
            ((C10615 + C10614) * C19131 + C10601 * C19130) * C13438) *
               C31520) *
              C31475 +
          ((((C9861 + C9862) * C19130 + (C9863 + C9864) * C19131) * C13438 +
            ((C20283 + C20284) * C19130 + (C20285 + C20286) * C19131) *
                C13439) *
               C2300 -
           (((C20284 + C20283) * C19131 +
             (C362 * C31155 + C361 * C1160) * C19130) *
                C13439 +
            ((C9862 + C9861) * C19131 +
             ((C113 * C307 + C31383 * C326) * C31155 +
              (C113 * C297 + C31383 * C308) * C1160) *
                 C19130) *
                C13438) *
               C2299 -
           (((C21621 + C21622) * C19131 + (C20286 + C20285) * C19130) * C13439 +
            ((C9892 + C9891) * C19131 + C9884 * C19130) * C13438) *
               C2301 +
           ((C11006 * C19130 + (C11014 + C11013) * C19131) * C13438 +
            ((C21622 + C21621) * C19130 +
             ((C113 * C10764 + C31383 * C10765) * C1160 +
              (C113 * C10766 + C31383 * C10767) * C31155) *
                 C19131) *
                C13439) *
               C31520) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31383 * C126) * C114 +
                (C113 * C127 + C31383 * C140) * C102 - C168 * C115 -
                C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C19130 +
               (C9174 * C114 + C9175 * C102 - C550 * C115 - C551 * C103 +
                C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 +
                C788 * C118 + C789 * C106) *
                   C19131) *
                  C13438 +
              ((C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                C176 * C118 + C177 * C106) *
                   C19130 +
               (C550 * C114 + C551 * C102 - C552 * C115 - C553 * C103 +
                C554 * C116 + C555 * C104 - C788 * C117 - C789 * C105 +
                (C113 * C779 + C31383 * C780) * C118 +
                (C113 * C781 + C31383 * C782) * C106) *
                   C19131) *
                  C13439) *
             C31218 * C31206 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31383 * C126) * C293 +
                 (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                 C169 * C288 + C170 * C295 + C171 * C31497) *
                    C19130 +
                (C9180 + C9181 - C9154 - C9155 + C9156 + C9157) * C19131) *
                   C13438 +
               ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                 C172 * C295 + C173 * C31497) *
                    C19130 +
                (C550 * C293 + C551 * C287 - C552 * C294 - C553 * C288 +
                 C554 * C295 + C555 * C31497) *
                    C19131) *
                   C13439) *
                  C31218 * C31541 +
              (((C361 * C294 -
                 ((C113 * C307 + C31383 * C326) * C287 +
                  (C113 * C297 + C31383 * C308) * C293) +
                 C362 * C288 - C363 * C295 - C364 * C31497) *
                    C19130 +
                (C9549 - (C9569 + C9570) + C9554 - C9555 - C9556) * C19131) *
                   C13438 +
               ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                 C365 * C295 - C366 * C31497) *
                    C19130 +
                (C970 * C294 - (C969 * C287 + C968 * C293) + C971 * C288 -
                 C972 * C295 - C973 * C31497) *
                    C19131) *
                   C13439) *
                  C31218 * C31529 +
              ((((C113 * C301 + C31383 * C316) * C293 +
                 (C113 * C317 + C31383 * C331) * C287 - C367 * C294 -
                 C368 * C288 + C369 * C295 + C370 * C31497) *
                    C19130 +
                (C9885 * C293 + C9886 * C287 - C1612 * C294 - C1613 * C288 +
                 C1614 * C295 + C1615 * C31497) *
                    C19131) *
                   C13438 +
               ((C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                 C371 * C295 + C372 * C31497) *
                    C19130 +
                (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
                 (C113 * C1599 + C31383 * C1600) * C295 +
                 (C113 * C1601 + C31383 * C1602) * C31497) *
                    C19131) *
                   C13439) *
                  C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C293 +
             (C113 * C127 + C31383 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31497) *
                C19130 +
            (C9180 + C9181 - C9154 - C9155 + C9156 + C9157) * C19131) *
               C13438 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31497) *
                C19130 +
            (C19425 + C19426 - C19427 - C19428 + C19429 + C19430) * C19131) *
               C13439) *
              C31542 +
          (((C9154 - (C9181 + C9180) + C9155 - C9156 - C9157) * C19130 +
            (C9162 - (C9183 + C9182) + C9163 - C9164 - C9165) * C19131) *
               C13438 +
           ((C19427 - (C19426 + C19425) + C19428 - C19429 - C19430) * C19130 +
            (C19431 - (C19432 + C19433) + C19434 - C19435 - C19436) * C19131) *
               C13439) *
              C31531 +
          ((C9190 * C19130 +
            (C9185 + C9184 - C9166 - C9171 + C9172 + C9173) * C19131) *
               C13438 +
           ((C19433 + C19432 - C19431 - C19434 + C19435 + C19436) * C19130 +
            (C2316 * C293 + C2317 * C287 - C2318 * C294 - C2319 * C288 +
             (C113 * C2303 + C31383 * C2304) * C295 +
             (C113 * C2305 + C31383 * C2306) * C31497) *
                C19131) *
               C13439) *
              C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1089 +
             (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
             C169 * C31525 + C170 * C1091 + C171 * C31497) *
                C19130 +
            (C10398 + C10399 - C10400 - C10401 + C10402 + C10403) * C19131) *
               C13438 +
           ((C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
             C172 * C1091 + C173 * C31497) *
                C19130 +
            (C550 * C1089 + C551 * C31538 - C552 * C1090 - C553 * C31525 +
             C554 * C1091 + C555 * C31497) *
                C19131) *
               C13439) *
              C31218 * C1086 +
          (((C361 * C1090 -
             ((C113 * C307 + C31383 * C326) * C31538 +
              (C113 * C297 + C31383 * C308) * C1089) +
             C362 * C31525 - C363 * C1091 - C364 * C31497) *
                C19130 +
            (C12745 - (C12746 + C12747) + C12748 - C12749 - C12750) * C19131) *
               C13438 +
           ((C363 * C1090 - (C362 * C31538 + C361 * C1089) + C364 * C31525 -
             C365 * C1091 - C366 * C31497) *
                C19130 +
            (C970 * C1090 - (C969 * C31538 + C968 * C1089) + C971 * C31525 -
             C972 * C1091 - C973 * C31497) *
                C19131) *
               C13439) *
              C31218 * C1087 +
          ((((C113 * C301 + C31383 * C316) * C1089 +
             (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
             C368 * C31525 + C369 * C1091 + C370 * C31497) *
                C19130 +
            (C9885 * C1089 + C9886 * C31538 - C1612 * C1090 - C1613 * C31525 +
             C1614 * C1091 + C1615 * C31497) *
                C19131) *
               C13438 +
           ((C367 * C1089 + C368 * C31538 - C369 * C1090 - C370 * C31525 +
             C371 * C1091 + C372 * C31497) *
                C19130 +
            (C1612 * C1089 + C1613 * C31538 - C1614 * C1090 - C1615 * C31525 +
             (C113 * C1599 + C31383 * C1600) * C1091 +
             (C113 * C1601 + C31383 * C1602) * C31497) *
                C19131) *
               C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C19130 +
            (C9855 + C9856) * C19131) *
               C13438 +
           ((C168 * C1160 + C169 * C31155) * C19130 +
            (C550 * C1160 + C551 * C31155) * C19131) *
               C13439) *
              C31218 * C1155 -
          (((C969 * C31155 + C968 * C1160) * C19131 +
            (C362 * C31155 + C361 * C1160) * C19130) *
               C13439 +
           ((C9862 + C9861) * C19131 + ((C113 * C307 + C31383 * C326) * C31155 +
                                        (C113 * C297 + C31383 * C308) * C1160) *
                                           C19130) *
               C13438) *
              C31218 * C1156 +
          ((((C113 * C301 + C31383 * C316) * C1160 +
             (C113 * C317 + C31383 * C331) * C31155) *
                C19130 +
            (C9893 + C9894) * C19131) *
               C13438 +
           ((C367 * C1160 + C368 * C31155) * C19130 +
            (C1612 * C1160 + C1613 * C31155) * C19131) *
               C13439) *
              C31218 * C1157 -
          ((((C113 * C1719 + C31383 * C1723) * C31155 +
             (C113 * C1714 + C31383 * C1718) * C1160) *
                C19131 +
            (C1451 * C31155 + C1450 * C1160) * C19130) *
               C13439 +
           ((C10285 + C10284) * C19131 +
            ((C113 * C1171 + C31383 * C1181) * C31155 +
             (C113 * C1163 + C31383 * C1172) * C1160) *
                C19130) *
               C13438) *
              C31218 * C1158 +
          ((((C113 * C1164 + C31383 * C1173) * C1160 +
             (C113 * C1174 + C31383 * C1182) * C31155) *
                C19130 +
            ((C113 * C5619 + C31383 * C5624) * C1160 +
             (C113 * C5623 + C31383 * C5628) * C31155) *
                C19131) *
               C13438 +
           (((C113 * C1165 + C31383 * C1175) * C1160 +
             (C113 * C1176 + C31383 * C1183) * C31155) *
                C19130 +
            ((C113 * C5878 + C31383 * C5879) * C1160 +
             (C113 * C5880 + C31383 * C5881) * C31155) *
                C19131) *
               C13439) *
              C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1160 +
              (C113 * C127 + C31383 * C140) * C31155) *
                 C19130 +
             (C9855 + C9856) * C19131) *
                C13438 +
            ((C168 * C1160 + C169 * C31155) * C19130 +
             (C20279 + C20280) * C19131) *
                C13439) *
               C31542 -
           (((C20281 + C20282) * C19131 + (C20280 + C20279) * C19130) * C13439 +
            ((C9858 + C9857) * C19131 + (C9856 + C9855) * C19130) * C13438) *
               C31531 +
           ((C9881 * C19130 + (C9860 + C9859) * C19131) * C13438 +
            ((C20282 + C20281) * C19130 +
             (C2316 * C1160 + C2317 * C31155) * C19131) *
                C13439) *
               C31507) *
              C1086 +
          ((((C9861 + C9862) * C19130 + (C9863 + C9864) * C19131) * C13438 +
            ((C20283 + C20284) * C19130 + (C20285 + C20286) * C19131) *
                C13439) *
               C31531 -
           (((C20284 + C20283) * C19131 +
             (C362 * C31155 + C361 * C1160) * C19130) *
                C13439 +
            ((C9862 + C9861) * C19131 +
             ((C113 * C307 + C31383 * C326) * C31155 +
              (C113 * C297 + C31383 * C308) * C1160) *
                 C19130) *
                C13438) *
               C31542 -
           (((C10784 * C31155 + C10783 * C1160) * C19131 +
             (C20286 + C20285) * C19130) *
                C13439 +
            ((C9892 + C9891) * C19131 + C9884 * C19130) * C13438) *
               C31507) *
              C1087 +
          (((((C113 * C301 + C31383 * C316) * C1160 +
              (C113 * C317 + C31383 * C331) * C31155) *
                 C19130 +
             (C9893 + C9894) * C19131) *
                C13438 +
            ((C367 * C1160 + C368 * C31155) * C19130 +
             (C20287 + C20288) * C19131) *
                C13439) *
               C31542 -
           (((C20289 + C20290) * C19131 + (C20288 + C20287) * C19130) * C13439 +
            ((C9896 + C9895) * C19131 + (C9894 + C9893) * C19130) * C13438) *
               C31531 +
           ((C9899 * C19130 + (C9898 + C9897) * C19131) * C13438 +
            ((C20290 + C20289) * C19130 +
             ((C113 * C6526 + C31383 * C6527) * C1160 +
              (C113 * C6528 + C31383 * C6529) * C31155) *
                 C19131) *
                C13439) *
               C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1089 +
             (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
             C169 * C31525 + C170 * C1091 + C171 * C31497) *
                C19130 +
            (C10398 + C10399 - C10400 - C10401 + C10402 + C10403) * C19131) *
               C13438 +
           ((C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
             C172 * C1091 + C173 * C31497) *
                C19130 +
            (C20911 + C20912 - C20913 - C20914 + C20915 + C20916) * C19131) *
               C13439) *
              C1835 +
          (((C10400 - (C10399 + C10398) + C10401 - C10402 - C10403) * C19130 +
            (C10406 - (C10405 + C10404) + C10407 - C10408 - C10409) * C19131) *
               C13438 +
           ((C20913 - (C20912 + C20911) + C20914 - C20915 - C20916) * C19130 +
            (C20917 - (C20918 + C20919) + C20920 - C20921 - C20922) * C19131) *
               C13439) *
              C1836 +
          ((C10420 * C19130 +
            (C10412 + C10411 - C10410 - C10413 + C10414 + C10415) * C19131) *
               C13438 +
           ((C20919 + C20918 - C20917 - C20920 + C20921 + C20922) * C19130 +
            (C2316 * C1089 + C2317 * C31538 - C2318 * C1090 - C2319 * C31525 +
             (C113 * C2303 + C31383 * C2304) * C1091 +
             (C113 * C2305 + C31383 * C2306) * C31497) *
                C19131) *
               C13439) *
              C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1160 +
              (C113 * C127 + C31383 * C140) * C31155) *
                 C19130 +
             (C9855 + C9856) * C19131) *
                C13438 +
            ((C168 * C1160 + C169 * C31155) * C19130 +
             (C20279 + C20280) * C19131) *
                C13439) *
               C1835 -
           (((C20281 + C20282) * C19131 + (C20280 + C20279) * C19130) * C13439 +
            ((C9858 + C9857) * C19131 + (C9856 + C9855) * C19130) * C13438) *
               C1836 +
           ((C9881 * C19130 + (C9860 + C9859) * C19131) * C13438 +
            ((C20282 + C20281) * C19130 +
             (C2316 * C1160 + C2317 * C31155) * C19131) *
                C13439) *
               C31507) *
              C31541 +
          ((((C9861 + C9862) * C19130 + (C9863 + C9864) * C19131) * C13438 +
            ((C20283 + C20284) * C19130 + (C20285 + C20286) * C19131) *
                C13439) *
               C1836 -
           (((C20284 + C20283) * C19131 +
             (C362 * C31155 + C361 * C1160) * C19130) *
                C13439 +
            ((C9862 + C9861) * C19131 +
             ((C113 * C307 + C31383 * C326) * C31155 +
              (C113 * C297 + C31383 * C308) * C1160) *
                 C19130) *
                C13438) *
               C1835 -
           (((C10784 * C31155 + C10783 * C1160) * C19131 +
             (C20286 + C20285) * C19130) *
                C13439 +
            ((C9892 + C9891) * C19131 + C9884 * C19130) * C13438) *
               C31507) *
              C31529 +
          (((((C113 * C301 + C31383 * C316) * C1160 +
              (C113 * C317 + C31383 * C331) * C31155) *
                 C19130 +
             (C9893 + C9894) * C19131) *
                C13438 +
            ((C367 * C1160 + C368 * C31155) * C19130 +
             (C20287 + C20288) * C19131) *
                C13439) *
               C1835 -
           (((C20289 + C20290) * C19131 + (C20288 + C20287) * C19130) * C13439 +
            ((C9896 + C9895) * C19131 + (C9894 + C9893) * C19130) * C13438) *
               C1836 +
           ((C9899 * C19130 + (C9898 + C9897) * C19131) * C13438 +
            ((C20290 + C20289) * C19130 +
             ((C113 * C6526 + C31383 * C6527) * C1160 +
              (C113 * C6528 + C31383 * C6529) * C31155) *
                 C19131) *
                C13439) *
               C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C19130 +
            (C9855 + C9856) * C19131) *
               C13438 +
           ((C168 * C1160 + C169 * C31155) * C19130 +
            (C20279 + C20280) * C19131) *
               C13439) *
              C2010 -
          (((C20281 + C20282) * C19131 + (C20280 + C20279) * C19130) * C13439 +
           ((C9858 + C9857) * C19131 + (C9856 + C9855) * C19130) * C13438) *
              C2011 +
          ((C9881 * C19130 + (C9860 + C9859) * C19131) * C13438 +
           ((C20282 + C20281) * C19130 + (C21151 + C21152) * C19131) * C13439) *
              C2012 -
          (((C21153 + C21154) * C19131 + (C21152 + C21151) * C19130) * C13439 +
           ((C10615 + C10614) * C19131 + C10601 * C19130) * C13438) *
              C2013 +
          ((C10618 * C19130 + (C10617 + C10616) * C19131) * C13438 +
           ((C21154 + C21153) * C19130 +
            ((C113 * C10886 + C31383 * C10887) * C1160 +
             (C113 * C10888 + C31383 * C10889) * C31155) *
                C19131) *
               C13439) *
              C2014) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C30274 +
              (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
              C169 * C31165) *
                 C19130 +
             (C10144 + C10145 - C10146 - C10147) * C19131) *
                C13438 +
            ((C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                 C19130 +
             (C20621 + C20622 - C20623 - C20624) * C19131) *
                C13439) *
               C31476 +
           (((C10146 - (C10145 + C10144) + C10147) * C19130 +
             (C10150 - (C10149 + C10148) + C10151) * C19131) *
                C13438 +
            ((C20623 - (C20622 + C20621) + C20624) * C19130 +
             (C558 * C30255 - (C557 * C31457 + C556 * C30274) + C559 * C31165) *
                 C19131) *
                C13439) *
               C31305) *
              C1086 +
          ((((C361 * C30255 -
              ((C113 * C307 + C31383 * C326) * C31457 +
               (C113 * C297 + C31383 * C308) * C30274) +
              C362 * C31165) *
                 C19130 +
             (C10152 - (C10153 + C10154) + C10155) * C19131) *
                C13438 +
            ((C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                 C19130 +
             (C20625 - (C20626 + C20627) + C20628) * C19131) *
                C13439) *
               C31476 +
           (((C10154 + C10153 - C10152 - C10155) * C19130 +
             (C10158 + C10157 - C10156 - C10159) * C19131) *
                C13438 +
            ((C20627 + C20626 - C20625 - C20628) * C19130 +
             (C2198 * C30274 + C2199 * C31457 - C2200 * C30255 -
              C2201 * C31165) *
                 C19131) *
                C13439) *
               C31305) *
              C1087 +
          (((((C113 * C301 + C31383 * C316) * C30274 +
              (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
              C368 * C31165) *
                 C19130 +
             (C10160 + C10161 - C10162 - C10163) * C19131) *
                C13438 +
            ((C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
                 C19130 +
             (C20629 + C20630 - C20631 - C20632) * C19131) *
                C13439) *
               C31476 +
           (((C10162 - (C10161 + C10160) + C10163) * C19130 +
             (C10172 - (C10165 + C10164) + C10173) * C19131) *
                C13438 +
            ((C20631 - (C20630 + C20629) + C20632) * C19130 +
             ((C113 * C1303 + C31383 * C1320) * C30255 -
              (C10171 * C31457 + C10170 * C30274) +
              (C113 * C1321 + C31383 * C1330) * C31165) *
                 C19131) *
                C13439) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C665 +
             (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
                C19130 +
            (C9387 + C9388 - C9389 - C9390 + C9391 + C9392 - C9393 - C9394) *
                C19131) *
               C13438 +
           ((C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31508) *
                C19130 +
            (C19697 + C19698 - C19699 - C19700 + C19701 + C19702 - C19703 -
             C19704) *
                C19131) *
               C13439) *
              C31476 +
          (((C9389 - (C9388 + C9387) + C9390 - C9391 - C9392 + C9393 + C9394) *
                C19130 +
            (C9397 - (C9396 + C9395) + C9398 - C9399 - C9400 + C9401 + C9402) *
                C19131) *
               C13438 +
           ((C19699 - (C19698 + C19697) + C19700 - C19701 - C19702 + C19703 +
             C19704) *
                C19130 +
            (C558 * C666 - (C557 * C659 + C556 * C665) + C559 * C660 -
             C560 * C667 - C561 * C661 + (C113 * C494 + C31383 * C513) * C668 +
             (C113 * C514 + C31383 * C524) * C31508) *
                C19131) *
               C13439) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C19130 +
            (C10144 + C10145 - C10146 - C10147) * C19131) *
               C13438 +
           ((C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                C19130 +
            (C20621 + C20622 - C20623 - C20624) * C19131) *
               C13439) *
              C2299 +
          (((C10146 - (C10145 + C10144) + C10147) * C19130 +
            (C10150 - (C10149 + C10148) + C10151) * C19131) *
               C13438 +
           ((C20623 - (C20622 + C20621) + C20624) * C19130 +
            (C21349 - (C21350 + C21351) + C21352) * C19131) *
               C13439) *
              C2300 +
          ((C10785 * C19130 + (C10772 + C10771 - C10770 - C10773) * C19131) *
               C13438 +
           ((C21351 + C21350 - C21349 - C21352) * C19130 +
            (C21487 + C21488 - C21489 - C21490) * C19131) *
               C13439) *
              C2301 +
          ((C10901 * C19130 + (C10902 - (C10893 + C10892) + C10903) * C19131) *
               C13438 +
           ((C21489 - (C21488 + C21487) + C21490) * C19130 +
            ((C113 * C2020 + C31383 * C2031) * C30255 -
             (C10900 * C31457 + C10899 * C30274) +
             (C113 * C2032 + C31383 * C2038) * C31165) *
                C19131) *
               C13439) *
              C31520) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C293 +
             (C113 * C127 + C31383 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31497) *
                C19130 +
            (C9180 + C9181 - C9154 - C9155 + C9156 + C9157) * C19131) *
               C13438 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31497) *
                C19130 +
            (C550 * C293 + C551 * C287 - C552 * C294 - C553 * C288 +
             C554 * C295 + C555 * C31497) *
                C19131) *
               C13439) *
              C31218 * C31541 +
          (((C361 * C294 -
             ((C113 * C307 + C31383 * C326) * C287 +
              (C113 * C297 + C31383 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C31497) *
                C19130 +
            (C9549 - (C9569 + C9570) + C9554 - C9555 - C9556) * C19131) *
               C13438 +
           ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
             C365 * C295 - C366 * C31497) *
                C19130 +
            (C970 * C294 - (C969 * C287 + C968 * C293) + C971 * C288 -
             C972 * C295 - C973 * C31497) *
                C19131) *
               C13439) *
              C31218 * C31529 +
          ((((C113 * C301 + C31383 * C316) * C293 +
             (C113 * C317 + C31383 * C331) * C287 - C367 * C294 - C368 * C288 +
             C369 * C295 + C370 * C31497) *
                C19130 +
            (C9885 * C293 + C9886 * C287 - C1612 * C294 - C1613 * C288 +
             C1614 * C295 + C1615 * C31497) *
                C19131) *
               C13438 +
           ((C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
             C371 * C295 + C372 * C31497) *
                C19130 +
            (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
             (C113 * C1599 + C31383 * C1600) * C295 +
             (C113 * C1601 + C31383 * C1602) * C31497) *
                C19131) *
               C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C114 +
            (C113 * C127 + C31383 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C19130 +
           (C9174 * C114 + C9175 * C102 - C550 * C115 - C551 * C103 +
            C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 +
            C788 * C118 + C789 * C106) *
               C19131) *
              C13438 +
          ((C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C19130 +
           (C550 * C114 + C551 * C102 - C552 * C115 - C553 * C103 +
            C554 * C116 + C555 * C104 - C788 * C117 - C789 * C105 +
            (C113 * C779 + C31383 * C780) * C118 +
            (C113 * C781 + C31383 * C782) * C106) *
               C19131) *
              C13439) *
         C31218 * C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1089 +
             (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
             C169 * C31525 + C170 * C1091 + C171 * C31497) *
                C19130 +
            (C10398 + C10399 - C10400 - C10401 + C10402 + C10403) * C19131) *
               C13438 +
           ((C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
             C172 * C1091 + C173 * C31497) *
                C19130 +
            (C550 * C1089 + C551 * C31538 - C552 * C1090 - C553 * C31525 +
             C554 * C1091 + C555 * C31497) *
                C19131) *
               C13439) *
              C31218 * C1086 +
          (((C361 * C1090 -
             ((C113 * C307 + C31383 * C326) * C31538 +
              (C113 * C297 + C31383 * C308) * C1089) +
             C362 * C31525 - C363 * C1091 - C364 * C31497) *
                C19130 +
            (C12745 - (C12746 + C12747) + C12748 - C12749 - C12750) * C19131) *
               C13438 +
           ((C363 * C1090 - (C362 * C31538 + C361 * C1089) + C364 * C31525 -
             C365 * C1091 - C366 * C31497) *
                C19130 +
            (C970 * C1090 - (C969 * C31538 + C968 * C1089) + C971 * C31525 -
             C972 * C1091 - C973 * C31497) *
                C19131) *
               C13439) *
              C31218 * C1087 +
          ((((C113 * C301 + C31383 * C316) * C1089 +
             (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
             C368 * C31525 + C369 * C1091 + C370 * C31497) *
                C19130 +
            (C9885 * C1089 + C9886 * C31538 - C1612 * C1090 - C1613 * C31525 +
             C1614 * C1091 + C1615 * C31497) *
                C19131) *
               C13438 +
           ((C367 * C1089 + C368 * C31538 - C369 * C1090 - C370 * C31525 +
             C371 * C1091 + C372 * C31497) *
                C19130 +
            (C1612 * C1089 + C1613 * C31538 - C1614 * C1090 - C1615 * C31525 +
             (C113 * C1599 + C31383 * C1600) * C1091 +
             (C113 * C1601 + C31383 * C1602) * C31497) *
                C19131) *
               C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C19130 +
            (C9855 + C9856) * C19131) *
               C13438 +
           ((C168 * C1160 + C169 * C31155) * C19130 +
            (C550 * C1160 + C551 * C31155) * C19131) *
               C13439) *
              C31218 * C1155 -
          (((C969 * C31155 + C968 * C1160) * C19131 +
            (C362 * C31155 + C361 * C1160) * C19130) *
               C13439 +
           ((C9862 + C9861) * C19131 + ((C113 * C307 + C31383 * C326) * C31155 +
                                        (C113 * C297 + C31383 * C308) * C1160) *
                                           C19130) *
               C13438) *
              C31218 * C1156 +
          ((((C113 * C301 + C31383 * C316) * C1160 +
             (C113 * C317 + C31383 * C331) * C31155) *
                C19130 +
            (C9893 + C9894) * C19131) *
               C13438 +
           ((C367 * C1160 + C368 * C31155) * C19130 +
            (C1612 * C1160 + C1613 * C31155) * C19131) *
               C13439) *
              C31218 * C1157 -
          ((((C113 * C1719 + C31383 * C1723) * C31155 +
             (C113 * C1714 + C31383 * C1718) * C1160) *
                C19131 +
            (C1451 * C31155 + C1450 * C1160) * C19130) *
               C13439 +
           ((C10285 + C10284) * C19131 +
            ((C113 * C1171 + C31383 * C1181) * C31155 +
             (C113 * C1163 + C31383 * C1172) * C1160) *
                C19130) *
               C13438) *
              C31218 * C1158 +
          ((((C113 * C1164 + C31383 * C1173) * C1160 +
             (C113 * C1174 + C31383 * C1182) * C31155) *
                C19130 +
            ((C113 * C5619 + C31383 * C5624) * C1160 +
             (C113 * C5623 + C31383 * C5628) * C31155) *
                C19131) *
               C13438 +
           (((C113 * C1165 + C31383 * C1175) * C1160 +
             (C113 * C1176 + C31383 * C1183) * C31155) *
                C19130 +
            ((C113 * C5878 + C31383 * C5879) * C1160 +
             (C113 * C5880 + C31383 * C5881) * C31155) *
                C19131) *
               C13439) *
              C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1089 +
             (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
             C169 * C31525 + C170 * C1091 + C171 * C31497) *
                C19130 +
            (C10398 + C10399 - C10400 - C10401 + C10402 + C10403) * C19131) *
               C13438 +
           ((C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
             C172 * C1091 + C173 * C31497) *
                C19130 +
            (C20911 + C20912 - C20913 - C20914 + C20915 + C20916) * C19131) *
               C13439) *
              C1835 +
          (((C10400 - (C10399 + C10398) + C10401 - C10402 - C10403) * C19130 +
            (C10406 - (C10405 + C10404) + C10407 - C10408 - C10409) * C19131) *
               C13438 +
           ((C20913 - (C20912 + C20911) + C20914 - C20915 - C20916) * C19130 +
            (C20917 - (C20918 + C20919) + C20920 - C20921 - C20922) * C19131) *
               C13439) *
              C1836 +
          ((C10420 * C19130 +
            (C10412 + C10411 - C10410 - C10413 + C10414 + C10415) * C19131) *
               C13438 +
           ((C20919 + C20918 - C20917 - C20920 + C20921 + C20922) * C19130 +
            (C2316 * C1089 + C2317 * C31538 - C2318 * C1090 - C2319 * C31525 +
             (C113 * C2303 + C31383 * C2304) * C1091 +
             (C113 * C2305 + C31383 * C2306) * C31497) *
                C19131) *
               C13439) *
              C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1160 +
              (C113 * C127 + C31383 * C140) * C31155) *
                 C19130 +
             (C9855 + C9856) * C19131) *
                C13438 +
            ((C168 * C1160 + C169 * C31155) * C19130 +
             (C20279 + C20280) * C19131) *
                C13439) *
               C1835 -
           (((C20281 + C20282) * C19131 + (C20280 + C20279) * C19130) * C13439 +
            ((C9858 + C9857) * C19131 + (C9856 + C9855) * C19130) * C13438) *
               C1836 +
           ((C9881 * C19130 + (C9860 + C9859) * C19131) * C13438 +
            ((C20282 + C20281) * C19130 +
             (C2316 * C1160 + C2317 * C31155) * C19131) *
                C13439) *
               C31507) *
              C31541 +
          ((((C9861 + C9862) * C19130 + (C9863 + C9864) * C19131) * C13438 +
            ((C20283 + C20284) * C19130 + (C20285 + C20286) * C19131) *
                C13439) *
               C1836 -
           (((C20284 + C20283) * C19131 +
             (C362 * C31155 + C361 * C1160) * C19130) *
                C13439 +
            ((C9862 + C9861) * C19131 +
             ((C113 * C307 + C31383 * C326) * C31155 +
              (C113 * C297 + C31383 * C308) * C1160) *
                 C19130) *
                C13438) *
               C1835 -
           (((C10784 * C31155 + C10783 * C1160) * C19131 +
             (C20286 + C20285) * C19130) *
                C13439 +
            ((C9892 + C9891) * C19131 + C9884 * C19130) * C13438) *
               C31507) *
              C31529 +
          (((((C113 * C301 + C31383 * C316) * C1160 +
              (C113 * C317 + C31383 * C331) * C31155) *
                 C19130 +
             (C9893 + C9894) * C19131) *
                C13438 +
            ((C367 * C1160 + C368 * C31155) * C19130 +
             (C20287 + C20288) * C19131) *
                C13439) *
               C1835 -
           (((C20289 + C20290) * C19131 + (C20288 + C20287) * C19130) * C13439 +
            ((C9896 + C9895) * C19131 + (C9894 + C9893) * C19130) * C13438) *
               C1836 +
           ((C9899 * C19130 + (C9898 + C9897) * C19131) * C13438 +
            ((C20290 + C20289) * C19130 +
             ((C113 * C6526 + C31383 * C6527) * C1160 +
              (C113 * C6528 + C31383 * C6529) * C31155) *
                 C19131) *
                C13439) *
               C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C30284 +
              (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
              C169 * C31168 + C170 * C30290 + C171 * C2901) *
                 C19130 +
             (C11643 + C11644 - C11645 - C11646 + C11647 + C11648) * C19131) *
                C13438 +
            ((C168 * C30284 + C169 * C31160 - C170 * C30280 - C171 * C31168 +
              C172 * C30290 + C173 * C2901) *
                 C19130 +
             (C22433 + C22434 - C22435 - C22436 + C22437 + C22438) * C19131) *
                C13439) *
               C3298 +
           (((C11645 - (C11644 + C11643) + C11646 - C11647 - C11648) * C19130 +
             (C11651 - (C11650 + C11649) + C11652 - C11653 - C11654) * C19131) *
                C13438 +
            ((C22435 - (C22434 + C22433) + C22436 - C22437 - C22438) * C19130 +
             (C558 * C30280 - (C557 * C31160 + C556 * C30284) + C559 * C31168 -
              C560 * C30290 - C561 * C2901) *
                 C19131) *
                C13439) *
               C31305) *
              C31475 +
          ((((C361 * C30280 -
              ((C113 * C307 + C31383 * C326) * C31160 +
               (C113 * C297 + C31383 * C308) * C30284) +
              C362 * C31168 - C363 * C30290 - C364 * C2901) *
                 C19130 +
             (C11655 - (C11656 + C11657) + C11658 - C11659 - C11660) * C19131) *
                C13438 +
            ((C363 * C30280 - (C362 * C31160 + C361 * C30284) + C364 * C31168 -
              C365 * C30290 - C366 * C2901) *
                 C19130 +
             (C22439 - (C22440 + C22441) + C22442 - C22443 - C22444) * C19131) *
                C13439) *
               C3298 +
           (((C11657 + C11656 - C11655 - C11658 + C11659 + C11660) * C19130 +
             (C11663 + C11662 - C11661 - C11664 + C11665 + C11666) * C19131) *
                C13438 +
            ((C22441 + C22440 - C22439 - C22442 + C22443 + C22444) * C19130 +
             (C2198 * C30284 + C2199 * C31160 - C2200 * C30280 -
              C2201 * C31168 + (C113 * C2185 + C31383 * C2186) * C30290 +
              (C113 * C2187 + C31383 * C2188) * C2901) *
                 C19131) *
                C13439) *
               C31305) *
              C31265)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C2641 +
              (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
              C169 * C31165) *
                 C19130 +
             (C11357 + C11358 - C11359 - C11360) * C19131) *
                C13438 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                 C19130 +
             (C22077 + C22078 - C22079 - C22080) * C19131) *
                C13439) *
               C31301 +
           (((C11359 - (C11358 + C11357) + C11360) * C19130 +
             (C11363 - (C11362 + C11361) + C11364) * C19131) *
                C13438 +
            ((C22079 - (C22078 + C22077) + C22080) * C19130 +
             (C22081 - (C22082 + C22083) + C22084) * C19131) *
                C13439) *
               C31308 +
           ((C11385 * C19130 + (C11367 + C11366 - C11365 - C11368) * C19131) *
                C13438 +
            ((C22083 + C22082 - C22081 - C22084) * C19130 +
             (C23105 + C23106 - C23107 - C23108) * C19131) *
                C13439) *
               C3806) *
              C31475 +
          ((((C361 * C2642 -
              ((C113 * C307 + C31383 * C326) * C2635 +
               (C113 * C297 + C31383 * C308) * C2641) +
              C362 * C31165) *
                 C19130 +
             (C11369 - (C11370 + C11371) + C11372) * C19131) *
                C13438 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                 C19130 +
             (C22085 - (C22086 + C22087) + C22088) * C19131) *
                C13439) *
               C31301 +
           (((C11371 + C11370 - C11369 - C11372) * C19130 +
             (C11375 + C11374 - C11373 - C11376) * C19131) *
                C13438 +
            ((C22087 + C22086 - C22085 - C22088) * C19130 +
             (C22089 + C22090 - C22091 - C22092) * C19131) *
                C13439) *
               C31308 +
           ((C11386 * C19130 + (C11379 - (C11378 + C11377) + C11380) * C19131) *
                C13438 +
            ((C22091 - (C22090 + C22089) + C22092) * C19130 +
             ((C113 * C2419 + C31383 * C2424) * C2642 -
              (C10784 * C2635 + C10783 * C2641) +
              (C113 * C2425 + C31383 * C2428) * C31165) *
                 C19131) *
                C13439) *
               C3806) *
              C31265)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C2641 +
              (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
              C169 * C31165) *
                 C19130 +
             (C11357 + C11358 - C11359 - C11360) * C19131) *
                C13438 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                 C19130 +
             (C22077 + C22078 - C22079 - C22080) * C19131) *
                C13439) *
               C3298 +
           (((C11359 - (C11358 + C11357) + C11360) * C19130 +
             (C11363 - (C11362 + C11361) + C11364) * C19131) *
                C13438 +
            ((C22079 - (C22078 + C22077) + C22080) * C19130 +
             (C22081 - (C22082 + C22083) + C22084) * C19131) *
                C13439) *
               C31305) *
              C31541 +
          ((((C361 * C2642 -
              ((C113 * C307 + C31383 * C326) * C2635 +
               (C113 * C297 + C31383 * C308) * C2641) +
              C362 * C31165) *
                 C19130 +
             (C11369 - (C11370 + C11371) + C11372) * C19131) *
                C13438 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                 C19130 +
             (C22085 - (C22086 + C22087) + C22088) * C19131) *
                C13439) *
               C3298 +
           (((C11371 + C11370 - C11369 - C11372) * C19130 +
             (C11375 + C11374 - C11373 - C11376) * C19131) *
                C13438 +
            ((C22087 + C22086 - C22085 - C22088) * C19130 +
             (C22089 + C22090 - C22091 - C22092) * C19131) *
                C13439) *
               C31305) *
              C31529 +
          (((((C113 * C301 + C31383 * C316) * C2641 +
              (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
              C368 * C31165) *
                 C19130 +
             (C11813 + C11814 - C11815 - C11816) * C19131) *
                C13438 +
            ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
                 C19130 +
             (C22639 + C22640 - C22641 - C22642) * C19131) *
                C13439) *
               C3298 +
           (((C11815 - (C11814 + C11813) + C11816) * C19130 +
             (C11819 - (C11818 + C11817) + C11820) * C19131) *
                C13438 +
            ((C22641 - (C22640 + C22639) + C22642) * C19130 +
             ((C113 * C1303 + C31383 * C1320) * C2642 -
              (C10171 * C2635 + C10170 * C2641) +
              (C113 * C1321 + C31383 * C1330) * C31165) *
                 C19131) *
                C13439) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2533 +
             (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
             C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
             C173 * C31508) *
                C19130 +
            (C11919 + C11920 - C11921 - C11922 + C11923 + C11924 - C11925 -
             C11926) *
                C19131) *
               C13438 +
           ((C168 * C2533 + C169 * C31547 - C170 * C2534 - C171 * C31540 +
             C172 * C2535 + C173 * C31527 - C174 * C2536 - C175 * C31508) *
                C19130 +
            (C22773 + C22774 - C22775 - C22776 + C22777 + C22778 - C22779 -
             C22780) *
                C19131) *
               C13439) *
              C3298 +
          (((C11921 - (C11920 + C11919) + C11922 - C11923 - C11924 + C11925 +
             C11926) *
                C19130 +
            (C11929 - (C11928 + C11927) + C11930 - C11931 - C11932 + C11933 +
             C11934) *
                C19131) *
               C13438 +
           ((C22775 - (C22774 + C22773) + C22776 - C22777 - C22778 + C22779 +
             C22780) *
                C19130 +
            (C558 * C2534 - (C557 * C31547 + C556 * C2533) + C559 * C31540 -
             C560 * C2535 - C561 * C31527 +
             (C113 * C494 + C31383 * C513) * C2536 +
             (C113 * C514 + C31383 * C524) * C31508) *
                C19131) *
               C13439) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C19130 +
            (C11357 + C11358 - C11359 - C11360) * C19131) *
               C13438 +
           ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                C19130 +
            (C22077 + C22078 - C22079 - C22080) * C19131) *
               C13439) *
              C31549 +
          (((C11359 - (C11358 + C11357) + C11360) * C19130 +
            (C11363 - (C11362 + C11361) + C11364) * C19131) *
               C13438 +
           ((C22079 - (C22078 + C22077) + C22080) * C19130 +
            (C22081 - (C22082 + C22083) + C22084) * C19131) *
               C13439) *
              C31546 +
          ((C11385 * C19130 + (C11367 + C11366 - C11365 - C11368) * C19131) *
               C13438 +
           ((C22083 + C22082 - C22081 - C22084) * C19130 +
            (C23105 + C23106 - C23107 - C23108) * C19131) *
               C13439) *
              C31537 +
          ((C12185 * C19130 + (C12182 - (C12181 + C12180) + C12183) * C19131) *
               C13438 +
           ((C23107 - (C23106 + C23105) + C23108) * C19130 +
            ((C113 * C2020 + C31383 * C2031) * C2642 -
             (C10900 * C2635 + C10899 * C2641) +
             (C113 * C2032 + C31383 * C2038) * C31165) *
                C19131) *
               C13439) *
              C31520) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30284 +
             (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
             C169 * C31168 + C170 * C30290 + C171 * C2901) *
                C19130 +
            (C11643 + C11644 - C11645 - C11646 + C11647 + C11648) * C19131) *
               C13438 +
           ((C168 * C30284 + C169 * C31160 - C170 * C30280 - C171 * C31168 +
             C172 * C30290 + C173 * C2901) *
                C19130 +
            (C22433 + C22434 - C22435 - C22436 + C22437 + C22438) * C19131) *
               C13439) *
              C31301 +
          (((C11645 - (C11644 + C11643) + C11646 - C11647 - C11648) * C19130 +
            (C11651 - (C11650 + C11649) + C11652 - C11653 - C11654) * C19131) *
               C13438 +
           ((C22435 - (C22434 + C22433) + C22436 - C22437 - C22438) * C19130 +
            (C23449 - (C23450 + C23451) + C23452 - C23453 - C23454) * C19131) *
               C13439) *
              C31308 +
          ((C12452 * C19130 +
            (C12445 + C12444 - C12443 - C12446 + C12447 + C12448) * C19131) *
               C13438 +
           ((C23451 + C23450 - C23449 - C23452 + C23453 + C23454) * C19130 +
            (C2316 * C30284 + C2317 * C31160 - C2318 * C30280 - C2319 * C31168 +
             (C113 * C2303 + C31383 * C2304) * C30290 +
             (C113 * C2305 + C31383 * C2306) * C2901) *
                C19131) *
               C13439) *
              C3806) *
         C31206) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2533 +
             (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
             C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
             C173 * C31508) *
                C19130 +
            (C11919 + C11920 - C11921 - C11922 + C11923 + C11924 - C11925 -
             C11926) *
                C19131) *
               C13438 +
           ((C168 * C2533 + C169 * C31547 - C170 * C2534 - C171 * C31540 +
             C172 * C2535 + C173 * C31527 - C174 * C2536 - C175 * C31508) *
                C19130 +
            (C22773 + C22774 - C22775 - C22776 + C22777 + C22778 - C22779 -
             C22780) *
                C19131) *
               C13439) *
              C3298 +
          (((C11921 - (C11920 + C11919) + C11922 - C11923 - C11924 + C11925 +
             C11926) *
                C19130 +
            (C11929 - (C11928 + C11927) + C11930 - C11931 - C11932 + C11933 +
             C11934) *
                C19131) *
               C13438 +
           ((C22775 - (C22774 + C22773) + C22776 - C22777 - C22778 + C22779 +
             C22780) *
                C19130 +
            (C558 * C2534 - (C557 * C31547 + C556 * C2533) + C559 * C31540 -
             C560 * C2535 - C561 * C31527 +
             (C113 * C494 + C31383 * C513) * C2536 +
             (C113 * C514 + C31383 * C524) * C31508) *
                C19131) *
               C13439) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C2641 +
              (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
              C169 * C31165) *
                 C19130 +
             (C11357 + C11358 - C11359 - C11360) * C19131) *
                C13438 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                 C19130 +
             (C22077 + C22078 - C22079 - C22080) * C19131) *
                C13439) *
               C3298 +
           (((C11359 - (C11358 + C11357) + C11360) * C19130 +
             (C11363 - (C11362 + C11361) + C11364) * C19131) *
                C13438 +
            ((C22079 - (C22078 + C22077) + C22080) * C19130 +
             (C22081 - (C22082 + C22083) + C22084) * C19131) *
                C13439) *
               C31305) *
              C31541 +
          ((((C361 * C2642 -
              ((C113 * C307 + C31383 * C326) * C2635 +
               (C113 * C297 + C31383 * C308) * C2641) +
              C362 * C31165) *
                 C19130 +
             (C11369 - (C11370 + C11371) + C11372) * C19131) *
                C13438 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                 C19130 +
             (C22085 - (C22086 + C22087) + C22088) * C19131) *
                C13439) *
               C3298 +
           (((C11371 + C11370 - C11369 - C11372) * C19130 +
             (C11375 + C11374 - C11373 - C11376) * C19131) *
                C13438 +
            ((C22087 + C22086 - C22085 - C22088) * C19130 +
             (C22089 + C22090 - C22091 - C22092) * C19131) *
                C13439) *
               C31305) *
              C31529 +
          (((((C113 * C301 + C31383 * C316) * C2641 +
              (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
              C368 * C31165) *
                 C19130 +
             (C11813 + C11814 - C11815 - C11816) * C19131) *
                C13438 +
            ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
                 C19130 +
             (C22639 + C22640 - C22641 - C22642) * C19131) *
                C13439) *
               C3298 +
           (((C11815 - (C11814 + C11813) + C11816) * C19130 +
             (C11819 - (C11818 + C11817) + C11820) * C19131) *
                C13438 +
            ((C22641 - (C22640 + C22639) + C22642) * C19130 +
             ((C113 * C1303 + C31383 * C1320) * C2642 -
              (C10171 * C2635 + C10170 * C2641) +
              (C113 * C1321 + C31383 * C1330) * C31165) *
                 C19131) *
                C13439) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C665 +
             (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
                C19130 +
            (C9387 + C9388 - C9389 - C9390 + C9391 + C9392 - C9393 - C9394) *
                C19131) *
               C13438 +
           ((C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31508) *
                C19130 +
            (C550 * C665 + C551 * C659 - C552 * C666 - C553 * C660 +
             C554 * C667 + C555 * C661 - C788 * C668 - C789 * C31508) *
                C19131) *
               C13439) *
              C31218 * C31475 +
          (((C361 * C666 -
             ((C113 * C307 + C31383 * C326) * C659 +
              (C113 * C297 + C31383 * C308) * C665) +
             C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
             C366 * C31508) *
                C19130 +
            (C968 * C666 - (C9565 * C659 + C9566 * C665) + C969 * C660 -
             C970 * C667 - C971 * C661 + C972 * C668 + C973 * C31508) *
                C19131) *
               C13438 +
           ((C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
             C365 * C667 - C366 * C661 + C678 * C668 + C679 * C31508) *
                C19130 +
            (C970 * C666 - (C969 * C659 + C968 * C665) + C971 * C660 -
             C972 * C667 - C973 * C661 + (C113 * C939 + C31383 * C948) * C668 +
             (C113 * C949 + C31383 * C954) * C31508) *
                C19131) *
               C13439) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C19130 +
            (C10144 + C10145 - C10146 - C10147) * C19131) *
               C13438 +
           ((C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                C19130 +
            (C550 * C30274 + C551 * C31457 - C552 * C30255 - C553 * C31165) *
                C19131) *
               C13439) *
              C31218 * C1431 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C19130 +
            (C10152 - (C10153 + C10154) + C10155) * C19131) *
               C13438 +
           ((C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                C19130 +
            (C970 * C30255 - (C969 * C31457 + C968 * C30274) + C971 * C31165) *
                C19131) *
               C13439) *
              C31218 * C1432 +
          ((((C113 * C301 + C31383 * C316) * C30274 +
             (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
             C368 * C31165) *
                C19130 +
            (C10160 + C10161 - C10162 - C10163) * C19131) *
               C13438 +
           ((C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
                C19130 +
            (C1612 * C30274 + C1613 * C31457 - C1614 * C30255 -
             C1615 * C31165) *
                C19131) *
               C13439) *
              C31218 * C1433 +
          (((C1450 * C30255 -
             ((C113 * C1171 + C31383 * C1181) * C31457 +
              (C113 * C1163 + C31383 * C1172) * C30274) +
             C1451 * C31165) *
                C19130 +
            (C20425 * C30255 - (C10281 * C31457 + C10280 * C30274) +
             C20426 * C31165) *
                C19131) *
               C13438 +
           ((C1452 * C30255 - (C1451 * C31457 + C1450 * C30274) +
             C1453 * C31165) *
                C19130 +
            ((C113 * C1715 + C31383 * C1720) * C30255 -
             (C20426 * C31457 + C20425 * C30274) +
             (C113 * C1721 + C31383 * C1724) * C31165) *
                C19131) *
               C13439) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C293 +
              (C113 * C127 + C31383 * C140) * C287 - C168 * C294 - C169 * C288 +
              C170 * C295 + C171 * C31497) *
                 C19130 +
             (C9180 + C9181 - C9154 - C9155 + C9156 + C9157) * C19131) *
                C13438 +
            ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
              C172 * C295 + C173 * C31497) *
                 C19130 +
             (C19425 + C19426 - C19427 - C19428 + C19429 + C19430) * C19131) *
                C13439) *
               C31476 +
           (((C9154 - (C9181 + C9180) + C9155 - C9156 - C9157) * C19130 +
             (C9162 - (C9183 + C9182) + C9163 - C9164 - C9165) * C19131) *
                C13438 +
            ((C19427 - (C19426 + C19425) + C19428 - C19429 - C19430) * C19130 +
             (C19431 - (C19432 + C19433) + C19434 - C19435 - C19436) * C19131) *
                C13439) *
               C31305) *
              C31475 +
          ((((C361 * C294 -
              ((C113 * C307 + C31383 * C326) * C287 +
               (C113 * C297 + C31383 * C308) * C293) +
              C362 * C288 - C363 * C295 - C364 * C31497) *
                 C19130 +
             (C9549 - (C9569 + C9570) + C9554 - C9555 - C9556) * C19131) *
                C13438 +
            ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
              C365 * C295 - C366 * C31497) *
                 C19130 +
             (C19899 - (C19900 + C19901) + C19902 - C19903 - C19904) * C19131) *
                C13439) *
               C31476 +
           (((C9570 + C9569 - C9549 - C9554 + C9555 + C9556) * C19130 +
             (C9572 + C9571 - C9557 - C9562 + C9563 + C9564) * C19131) *
                C13438 +
            ((C19901 + C19900 - C19899 - C19902 + C19903 + C19904) * C19130 +
             (C2198 * C293 + C2199 * C287 - C2200 * C294 - C2201 * C288 +
              (C113 * C2185 + C31383 * C2186) * C295 +
              (C113 * C2187 + C31383 * C2188) * C31497) *
                 C19131) *
                C13439) *
               C31305) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1160 +
              (C113 * C127 + C31383 * C140) * C31155) *
                 C19130 +
             (C9855 + C9856) * C19131) *
                C13438 +
            ((C168 * C1160 + C169 * C31155) * C19130 +
             (C20279 + C20280) * C19131) *
                C13439) *
               C31476 -
           (((C20281 + C20282) * C19131 + (C20280 + C20279) * C19130) * C13439 +
            ((C9858 + C9857) * C19131 + (C9856 + C9855) * C19130) * C13438) *
               C31305) *
              C1431 +
          ((((C9861 + C9862) * C19130 + (C9863 + C9864) * C19131) * C13438 +
            ((C20283 + C20284) * C19130 + (C20285 + C20286) * C19131) *
                C13439) *
               C31305 -
           (((C20284 + C20283) * C19131 +
             (C362 * C31155 + C361 * C1160) * C19130) *
                C13439 +
            ((C9862 + C9861) * C19131 +
             ((C113 * C307 + C31383 * C326) * C31155 +
              (C113 * C297 + C31383 * C308) * C1160) *
                 C19130) *
                C13438) *
               C31476) *
              C1432 +
          (((((C113 * C301 + C31383 * C316) * C1160 +
              (C113 * C317 + C31383 * C331) * C31155) *
                 C19130 +
             (C9893 + C9894) * C19131) *
                C13438 +
            ((C367 * C1160 + C368 * C31155) * C19130 +
             (C20287 + C20288) * C19131) *
                C13439) *
               C31476 -
           (((C20289 + C20290) * C19131 + (C20288 + C20287) * C19130) * C13439 +
            ((C9896 + C9895) * C19131 + (C9894 + C9893) * C19130) * C13438) *
               C31305) *
              C1433 +
          ((((C10284 + C10285) * C19130 + (C10286 + C10287) * C19131) * C13438 +
            ((C20763 + C20764) * C19130 +
             ((C113 * C6424 + C31383 * C6425) * C1160 +
              (C113 * C6426 + C31383 * C6427) * C31155) *
                 C19131) *
                C13439) *
               C31305 -
           (((C20764 + C20763) * C19131 +
             (C1451 * C31155 + C1450 * C1160) * C19130) *
                C13439 +
            ((C10285 + C10284) * C19131 +
             ((C113 * C1171 + C31383 * C1181) * C31155 +
              (C113 * C1163 + C31383 * C1172) * C1160) *
                 C19130) *
                C13438) *
               C31476) *
              C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C293 +
             (C113 * C127 + C31383 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31497) *
                C19130 +
            (C9180 + C9181 - C9154 - C9155 + C9156 + C9157) * C19131) *
               C13438 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31497) *
                C19130 +
            (C550 * C293 + C551 * C287 - C552 * C294 - C553 * C288 +
             C554 * C295 + C555 * C31497) *
                C19131) *
               C13439) *
              C31218 * C31541 +
          (((C361 * C294 -
             ((C113 * C307 + C31383 * C326) * C287 +
              (C113 * C297 + C31383 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C31497) *
                C19130 +
            (C9549 - (C9569 + C9570) + C9554 - C9555 - C9556) * C19131) *
               C13438 +
           ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
             C365 * C295 - C366 * C31497) *
                C19130 +
            (C970 * C294 - (C969 * C287 + C968 * C293) + C971 * C288 -
             C972 * C295 - C973 * C31497) *
                C19131) *
               C13439) *
              C31218 * C31529 +
          ((((C113 * C301 + C31383 * C316) * C293 +
             (C113 * C317 + C31383 * C331) * C287 - C367 * C294 - C368 * C288 +
             C369 * C295 + C370 * C31497) *
                C19130 +
            (C9885 * C293 + C9886 * C287 - C1612 * C294 - C1613 * C288 +
             C1614 * C295 + C1615 * C31497) *
                C19131) *
               C13438 +
           ((C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
             C371 * C295 + C372 * C31497) *
                C19130 +
            (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
             (C113 * C1599 + C31383 * C1600) * C295 +
             (C113 * C1601 + C31383 * C1602) * C31497) *
                C19131) *
               C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C114 +
            (C113 * C127 + C31383 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C19130 +
           (C9174 * C114 + C9175 * C102 - C550 * C115 - C551 * C103 +
            C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 +
            C788 * C118 + C789 * C106) *
               C19131) *
              C13438 +
          ((C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C19130 +
           (C550 * C114 + C551 * C102 - C552 * C115 - C553 * C103 +
            C554 * C116 + C555 * C104 - C788 * C117 - C789 * C105 +
            (C113 * C779 + C31383 * C780) * C118 +
            (C113 * C781 + C31383 * C782) * C106) *
               C19131) *
              C13439) *
         C31218 * C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C293 +
             (C113 * C127 + C31383 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31497) *
                C19130 +
            (C9180 + C9181 - C9154 - C9155 + C9156 + C9157) * C19131) *
               C13438 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31497) *
                C19130 +
            (C19425 + C19426 - C19427 - C19428 + C19429 + C19430) * C19131) *
               C13439) *
              C31542 +
          (((C9154 - (C9181 + C9180) + C9155 - C9156 - C9157) * C19130 +
            (C9162 - (C9183 + C9182) + C9163 - C9164 - C9165) * C19131) *
               C13438 +
           ((C19427 - (C19426 + C19425) + C19428 - C19429 - C19430) * C19130 +
            (C19431 - (C19432 + C19433) + C19434 - C19435 - C19436) * C19131) *
               C13439) *
              C31531 +
          ((C9190 * C19130 +
            (C9185 + C9184 - C9166 - C9171 + C9172 + C9173) * C19131) *
               C13438 +
           ((C19433 + C19432 - C19431 - C19434 + C19435 + C19436) * C19130 +
            (C2316 * C293 + C2317 * C287 - C2318 * C294 - C2319 * C288 +
             (C113 * C2303 + C31383 * C2304) * C295 +
             (C113 * C2305 + C31383 * C2306) * C31497) *
                C19131) *
               C13439) *
              C31507) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1089 +
             (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
             C169 * C31525 + C170 * C1091 + C171 * C31497) *
                C19130 +
            (C10398 + C10399 - C10400 - C10401 + C10402 + C10403) * C19131) *
               C13438 +
           ((C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
             C172 * C1091 + C173 * C31497) *
                C19130 +
            (C550 * C1089 + C551 * C31538 - C552 * C1090 - C553 * C31525 +
             C554 * C1091 + C555 * C31497) *
                C19131) *
               C13439) *
              C31218 * C1086 +
          (((C361 * C1090 -
             ((C113 * C307 + C31383 * C326) * C31538 +
              (C113 * C297 + C31383 * C308) * C1089) +
             C362 * C31525 - C363 * C1091 - C364 * C31497) *
                C19130 +
            (C12745 - (C12746 + C12747) + C12748 - C12749 - C12750) * C19131) *
               C13438 +
           ((C363 * C1090 - (C362 * C31538 + C361 * C1089) + C364 * C31525 -
             C365 * C1091 - C366 * C31497) *
                C19130 +
            (C970 * C1090 - (C969 * C31538 + C968 * C1089) + C971 * C31525 -
             C972 * C1091 - C973 * C31497) *
                C19131) *
               C13439) *
              C31218 * C1087 +
          ((((C113 * C301 + C31383 * C316) * C1089 +
             (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
             C368 * C31525 + C369 * C1091 + C370 * C31497) *
                C19130 +
            (C9885 * C1089 + C9886 * C31538 - C1612 * C1090 - C1613 * C31525 +
             C1614 * C1091 + C1615 * C31497) *
                C19131) *
               C13438 +
           ((C367 * C1089 + C368 * C31538 - C369 * C1090 - C370 * C31525 +
             C371 * C1091 + C372 * C31497) *
                C19130 +
            (C1612 * C1089 + C1613 * C31538 - C1614 * C1090 - C1615 * C31525 +
             (C113 * C1599 + C31383 * C1600) * C1091 +
             (C113 * C1601 + C31383 * C1602) * C31497) *
                C19131) *
               C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C19130 +
            (C9855 + C9856) * C19131) *
               C13438 +
           ((C168 * C1160 + C169 * C31155) * C19130 +
            (C550 * C1160 + C551 * C31155) * C19131) *
               C13439) *
              C31218 * C1155 -
          (((C969 * C31155 + C968 * C1160) * C19131 +
            (C362 * C31155 + C361 * C1160) * C19130) *
               C13439 +
           ((C9862 + C9861) * C19131 + ((C113 * C307 + C31383 * C326) * C31155 +
                                        (C113 * C297 + C31383 * C308) * C1160) *
                                           C19130) *
               C13438) *
              C31218 * C1156 +
          ((((C113 * C301 + C31383 * C316) * C1160 +
             (C113 * C317 + C31383 * C331) * C31155) *
                C19130 +
            (C9893 + C9894) * C19131) *
               C13438 +
           ((C367 * C1160 + C368 * C31155) * C19130 +
            (C1612 * C1160 + C1613 * C31155) * C19131) *
               C13439) *
              C31218 * C1157 -
          ((((C113 * C1719 + C31383 * C1723) * C31155 +
             (C113 * C1714 + C31383 * C1718) * C1160) *
                C19131 +
            (C1451 * C31155 + C1450 * C1160) * C19130) *
               C13439 +
           ((C10285 + C10284) * C19131 +
            ((C113 * C1171 + C31383 * C1181) * C31155 +
             (C113 * C1163 + C31383 * C1172) * C1160) *
                C19130) *
               C13438) *
              C31218 * C1158 +
          ((((C113 * C1164 + C31383 * C1173) * C1160 +
             (C113 * C1174 + C31383 * C1182) * C31155) *
                C19130 +
            ((C113 * C5619 + C31383 * C5624) * C1160 +
             (C113 * C5623 + C31383 * C5628) * C31155) *
                C19131) *
               C13438 +
           (((C113 * C1165 + C31383 * C1175) * C1160 +
             (C113 * C1176 + C31383 * C1183) * C31155) *
                C19130 +
            ((C113 * C5878 + C31383 * C5879) * C1160 +
             (C113 * C5880 + C31383 * C5881) * C31155) *
                C19131) *
               C13439) *
              C31218 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C1160 +
              (C113 * C127 + C31383 * C140) * C31155) *
                 C19130 +
             (C9855 + C9856) * C19131) *
                C13438 +
            ((C168 * C1160 + C169 * C31155) * C19130 +
             (C20279 + C20280) * C19131) *
                C13439) *
               C31542 -
           (((C20281 + C20282) * C19131 + (C20280 + C20279) * C19130) * C13439 +
            ((C9858 + C9857) * C19131 + (C9856 + C9855) * C19130) * C13438) *
               C31531 +
           ((C9881 * C19130 + (C9860 + C9859) * C19131) * C13438 +
            ((C20282 + C20281) * C19130 +
             (C2316 * C1160 + C2317 * C31155) * C19131) *
                C13439) *
               C31507) *
              C1086 +
          ((((C9861 + C9862) * C19130 + (C9863 + C9864) * C19131) * C13438 +
            ((C20283 + C20284) * C19130 + (C20285 + C20286) * C19131) *
                C13439) *
               C31531 -
           (((C20284 + C20283) * C19131 +
             (C362 * C31155 + C361 * C1160) * C19130) *
                C13439 +
            ((C9862 + C9861) * C19131 +
             ((C113 * C307 + C31383 * C326) * C31155 +
              (C113 * C297 + C31383 * C308) * C1160) *
                 C19130) *
                C13438) *
               C31542 -
           (((C10784 * C31155 + C10783 * C1160) * C19131 +
             (C20286 + C20285) * C19130) *
                C13439 +
            ((C9892 + C9891) * C19131 + C9884 * C19130) * C13438) *
               C31507) *
              C1087 +
          (((((C113 * C301 + C31383 * C316) * C1160 +
              (C113 * C317 + C31383 * C331) * C31155) *
                 C19130 +
             (C9893 + C9894) * C19131) *
                C13438 +
            ((C367 * C1160 + C368 * C31155) * C19130 +
             (C20287 + C20288) * C19131) *
                C13439) *
               C31542 -
           (((C20289 + C20290) * C19131 + (C20288 + C20287) * C19130) * C13439 +
            ((C9896 + C9895) * C19131 + (C9894 + C9893) * C19130) * C13438) *
               C31531 +
           ((C9899 * C19130 + (C9898 + C9897) * C19131) * C13438 +
            ((C20290 + C20289) * C19130 +
             ((C113 * C6526 + C31383 * C6527) * C1160 +
              (C113 * C6528 + C31383 * C6529) * C31155) *
                 C19131) *
                C13439) *
               C31507) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C665 +
             (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
                C19130 +
            (C9387 + C9388 - C9389 - C9390 + C9391 + C9392 - C9393 - C9394) *
                C19131) *
               C13438 +
           ((C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31508) *
                C19130 +
            (C19697 + C19698 - C19699 - C19700 + C19701 + C19702 - C19703 -
             C19704) *
                C19131) *
               C13439) *
              C31476 +
          (((C9389 - (C9388 + C9387) + C9390 - C9391 - C9392 + C9393 + C9394) *
                C19130 +
            (C9397 - (C9396 + C9395) + C9398 - C9399 - C9400 + C9401 + C9402) *
                C19131) *
               C13438 +
           ((C19699 - (C19698 + C19697) + C19700 - C19701 - C19702 + C19703 +
             C19704) *
                C19130 +
            (C558 * C666 - (C557 * C659 + C556 * C665) + C559 * C660 -
             C560 * C667 - C561 * C661 + (C113 * C494 + C31383 * C513) * C668 +
             (C113 * C514 + C31383 * C524) * C31508) *
                C19131) *
               C13439) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31383 * C126) * C30274 +
              (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
              C169 * C31165) *
                 C19130 +
             (C10144 + C10145 - C10146 - C10147) * C19131) *
                C13438 +
            ((C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                 C19130 +
             (C20621 + C20622 - C20623 - C20624) * C19131) *
                C13439) *
               C31476 +
           (((C10146 - (C10145 + C10144) + C10147) * C19130 +
             (C10150 - (C10149 + C10148) + C10151) * C19131) *
                C13438 +
            ((C20623 - (C20622 + C20621) + C20624) * C19130 +
             (C558 * C30255 - (C557 * C31457 + C556 * C30274) + C559 * C31165) *
                 C19131) *
                C13439) *
               C31305) *
              C1086 +
          ((((C361 * C30255 -
              ((C113 * C307 + C31383 * C326) * C31457 +
               (C113 * C297 + C31383 * C308) * C30274) +
              C362 * C31165) *
                 C19130 +
             (C10152 - (C10153 + C10154) + C10155) * C19131) *
                C13438 +
            ((C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                 C19130 +
             (C20625 - (C20626 + C20627) + C20628) * C19131) *
                C13439) *
               C31476 +
           (((C10154 + C10153 - C10152 - C10155) * C19130 +
             (C10158 + C10157 - C10156 - C10159) * C19131) *
                C13438 +
            ((C20627 + C20626 - C20625 - C20628) * C19130 +
             (C2198 * C30274 + C2199 * C31457 - C2200 * C30255 -
              C2201 * C31165) *
                 C19131) *
                C13439) *
               C31305) *
              C1087 +
          (((((C113 * C301 + C31383 * C316) * C30274 +
              (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
              C368 * C31165) *
                 C19130 +
             (C10160 + C10161 - C10162 - C10163) * C19131) *
                C13438 +
            ((C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
                 C19130 +
             (C20629 + C20630 - C20631 - C20632) * C19131) *
                C13439) *
               C31476 +
           (((C10162 - (C10161 + C10160) + C10163) * C19130 +
             (C10172 - (C10165 + C10164) + C10173) * C19131) *
                C13438 +
            ((C20631 - (C20630 + C20629) + C20632) * C19130 +
             ((C113 * C1303 + C31383 * C1320) * C30255 -
              (C10171 * C31457 + C10170 * C30274) +
              (C113 * C1321 + C31383 * C1330) * C31165) *
                 C19131) *
                C13439) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C114 +
            (C113 * C127 + C31383 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C19130 +
           (C9174 * C114 + C9175 * C102 - C550 * C115 - C551 * C103 +
            C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 +
            C788 * C118 + C789 * C106) *
               C19131) *
              C13438 +
          ((C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C19130 +
           (C550 * C114 + C551 * C102 - C552 * C115 - C553 * C103 +
            C554 * C116 + C555 * C104 - C788 * C117 - C789 * C105 +
            (C113 * C779 + C31383 * C780) * C118 +
            (C113 * C781 + C31383 * C782) * C106) *
               C19131) *
              C13439) *
         C31218 * C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C293 +
             (C113 * C127 + C31383 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31497) *
                C19130 +
            (C9180 + C9181 - C9154 - C9155 + C9156 + C9157) * C19131) *
               C13438 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31497) *
                C19130 +
            (C550 * C293 + C551 * C287 - C552 * C294 - C553 * C288 +
             C554 * C295 + C555 * C31497) *
                C19131) *
               C13439) *
              C31218 * C31541 +
          (((C361 * C294 -
             ((C113 * C307 + C31383 * C326) * C287 +
              (C113 * C297 + C31383 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C31497) *
                C19130 +
            (C9549 - (C9569 + C9570) + C9554 - C9555 - C9556) * C19131) *
               C13438 +
           ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
             C365 * C295 - C366 * C31497) *
                C19130 +
            (C970 * C294 - (C969 * C287 + C968 * C293) + C971 * C288 -
             C972 * C295 - C973 * C31497) *
                C19131) *
               C13439) *
              C31218 * C31529 +
          ((((C113 * C301 + C31383 * C316) * C293 +
             (C113 * C317 + C31383 * C331) * C287 - C367 * C294 - C368 * C288 +
             C369 * C295 + C370 * C31497) *
                C19130 +
            (C9885 * C293 + C9886 * C287 - C1612 * C294 - C1613 * C288 +
             C1614 * C295 + C1615 * C31497) *
                C19131) *
               C13438 +
           ((C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
             C371 * C295 + C372 * C31497) *
                C19130 +
            (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
             (C113 * C1599 + C31383 * C1600) * C295 +
             (C113 * C1601 + C31383 * C1602) * C31497) *
                C19131) *
               C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1089 +
             (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
             C169 * C31525 + C170 * C1091 + C171 * C31497) *
                C19130 +
            (C10398 + C10399 - C10400 - C10401 + C10402 + C10403) * C19131) *
               C13438 +
           ((C168 * C1089 + C169 * C31538 - C170 * C1090 - C171 * C31525 +
             C172 * C1091 + C173 * C31497) *
                C19130 +
            (C550 * C1089 + C551 * C31538 - C552 * C1090 - C553 * C31525 +
             C554 * C1091 + C555 * C31497) *
                C19131) *
               C13439) *
              C31218 * C1086 +
          (((C361 * C1090 -
             ((C113 * C307 + C31383 * C326) * C31538 +
              (C113 * C297 + C31383 * C308) * C1089) +
             C362 * C31525 - C363 * C1091 - C364 * C31497) *
                C19130 +
            (C12745 - (C12746 + C12747) + C12748 - C12749 - C12750) * C19131) *
               C13438 +
           ((C363 * C1090 - (C362 * C31538 + C361 * C1089) + C364 * C31525 -
             C365 * C1091 - C366 * C31497) *
                C19130 +
            (C970 * C1090 - (C969 * C31538 + C968 * C1089) + C971 * C31525 -
             C972 * C1091 - C973 * C31497) *
                C19131) *
               C13439) *
              C31218 * C1087 +
          ((((C113 * C301 + C31383 * C316) * C1089 +
             (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
             C368 * C31525 + C369 * C1091 + C370 * C31497) *
                C19130 +
            (C9885 * C1089 + C9886 * C31538 - C1612 * C1090 - C1613 * C31525 +
             C1614 * C1091 + C1615 * C31497) *
                C19131) *
               C13438 +
           ((C367 * C1089 + C368 * C31538 - C369 * C1090 - C370 * C31525 +
             C371 * C1091 + C372 * C31497) *
                C19130 +
            (C1612 * C1089 + C1613 * C31538 - C1614 * C1090 - C1615 * C31525 +
             (C113 * C1599 + C31383 * C1600) * C1091 +
             (C113 * C1601 + C31383 * C1602) * C31497) *
                C19131) *
               C13439) *
              C31218 * C31504)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C1160 +
             (C113 * C127 + C31383 * C140) * C31155) *
                C19130 +
            (C9855 + C9856) * C19131) *
               C13438 +
           ((C168 * C1160 + C169 * C31155) * C19130 +
            (C550 * C1160 + C551 * C31155) * C19131) *
               C13439) *
              C31218 * C1155 -
          (((C969 * C31155 + C968 * C1160) * C19131 +
            (C362 * C31155 + C361 * C1160) * C19130) *
               C13439 +
           ((C9862 + C9861) * C19131 + ((C113 * C307 + C31383 * C326) * C31155 +
                                        (C113 * C297 + C31383 * C308) * C1160) *
                                           C19130) *
               C13438) *
              C31218 * C1156 +
          ((((C113 * C301 + C31383 * C316) * C1160 +
             (C113 * C317 + C31383 * C331) * C31155) *
                C19130 +
            (C9893 + C9894) * C19131) *
               C13438 +
           ((C367 * C1160 + C368 * C31155) * C19130 +
            (C1612 * C1160 + C1613 * C31155) * C19131) *
               C13439) *
              C31218 * C1157 -
          ((((C113 * C1719 + C31383 * C1723) * C31155 +
             (C113 * C1714 + C31383 * C1718) * C1160) *
                C19131 +
            (C1451 * C31155 + C1450 * C1160) * C19130) *
               C13439 +
           ((C10285 + C10284) * C19131 +
            ((C113 * C1171 + C31383 * C1181) * C31155 +
             (C113 * C1163 + C31383 * C1172) * C1160) *
                C19130) *
               C13438) *
              C31218 * C1158 +
          ((((C113 * C1164 + C31383 * C1173) * C1160 +
             (C113 * C1174 + C31383 * C1182) * C31155) *
                C19130 +
            ((C113 * C5619 + C31383 * C5624) * C1160 +
             (C113 * C5623 + C31383 * C5628) * C31155) *
                C19131) *
               C13438 +
           (((C113 * C1165 + C31383 * C1175) * C1160 +
             (C113 * C1176 + C31383 * C1183) * C31155) *
                C19130 +
            ((C113 * C5878 + C31383 * C5879) * C1160 +
             (C113 * C5880 + C31383 * C5881) * C31155) *
                C19131) *
               C13439) *
              C31218 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C30284 +
                     (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
                     C169 * C31168 + C170 * C30290 + C171 * C2901) *
                        C31397 * C108 +
                    (C168 * C30284 + C169 * C31160 - C170 * C30280 -
                     C171 * C31168 + C172 * C30290 + C173 * C2901) *
                        C31397 * C109 +
                    (C170 * C30284 + C171 * C31160 - C172 * C30280 -
                     C173 * C31168 + C174 * C30290 + C175 * C2901) *
                        C31397 * C110) *
                       C31218 * C31261 +
                   ((C361 * C30280 -
                     ((C113 * C307 + C31383 * C326) * C31160 +
                      (C113 * C297 + C31383 * C308) * C30284) +
                     C362 * C31168 - C363 * C30290 - C364 * C2901) *
                        C31397 * C108 +
                    (C363 * C30280 - (C362 * C31160 + C361 * C30284) +
                     C364 * C31168 - C365 * C30290 - C366 * C2901) *
                        C31397 * C109 +
                    (C365 * C30280 - (C364 * C31160 + C363 * C30284) +
                     C366 * C31168 - C678 * C30290 - C679 * C2901) *
                        C31397 * C110) *
                       C31218 * C31268 +
                   (((C113 * C301 + C31383 * C316) * C30284 +
                     (C113 * C317 + C31383 * C331) * C31160 - C367 * C30280 -
                     C368 * C31168 + C369 * C30290 + C370 * C2901) *
                        C31397 * C108 +
                    (C367 * C30284 + C368 * C31160 - C369 * C30280 -
                     C370 * C31168 + C371 * C30290 + C372 * C2901) *
                        C31397 * C109 +
                    (C369 * C30284 + C370 * C31160 - C371 * C30280 -
                     C372 * C31168 + (C113 * C305 + C31383 * C324) * C30290 +
                     (C113 * C325 + C31383 * C335) * C2901) *
                        C31397 * C110) *
                       C31218 * C2904)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C30284 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31160 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C30280 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C31168 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C30290 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C2901) *
                       C31397 * C31184 * C31218 * C31261 +
                   ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                     C4765 * C1162 + C4761 * C1170) *
                        C30280 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31160 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C30284) +
                    (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                     C4765 * C1169 + C4761 * C1180) *
                        C31168 -
                    (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                     C4760 * C320 + C4763 * C298 + C4759 * C310) *
                        C30290 -
                    (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                     C4760 * C333 + C4763 * C311 + C4759 * C328) *
                        C2901) *
                       C31397 * C31184 * C31218 * C31268 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C30284 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31160 -
                    (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                     C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                        C30280 -
                    (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                     C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                        C31168 +
                    (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                     C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                        C30290 +
                    (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                     C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                        C2901) *
                       C31397 * C31184 * C31218 * C2904)) /
                     (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
                C31397 * C110) *
               C31476 +
           ((C550 * C2642 -
             ((C113 * C496 + C31383 * C515) * C2635 +
              (C113 * C486 + C31383 * C497) * C2641) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31165) *
                C31397 * C110) *
               C31305) *
              C31261 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
                C31397 * C110) *
               C31476 +
           (((C113 * C935 + C31383 * C940) * C2641 +
             (C113 * C941 + C31383 * C950) * C2635 - C968 * C2642 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31165) *
                C31397 * C110) *
               C31305) *
              C31268 +
          ((((C113 * C301 + C31383 * C316) * C2641 +
             (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
             C368 * C31165) *
                C31397 * C108 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
                C31397 * C109 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31165) *
                C31397 * C110) *
               C31476 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C31383 * C1327) * C2635 +
              (C113 * C1300 + C31383 * C1315) * C2641) +
             C1613 * C31165) *
                C31397 * C108 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C31165) *
                C31397 * C109 +
            ((C113 * C1599 + C31383 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C31383 * C1602) * C31165) *
                C31397 * C110) *
               C31305) *
              C2904)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C2641 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C2635 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C2642 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C2642 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C2635 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C2641) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31261 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C2642 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C2635 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C2641) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C2641 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C2635 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C2642 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31268 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C2641 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C2635 -
            (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
             C4763 * C302 + C4759 * C318) *
                C2642 -
            (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
             C4763 * C319 + C4759 * C332) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C1299 + C4759 * C1313 + C4764 * C1714 + C4760 * C1718 +
             C4765 * C5878 + C4761 * C5879) *
                C2642 -
            ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
              C4763 * C1314 + C4759 * C1327) *
                 C2635 +
             (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
              C4763 * C1300 + C4759 * C1315) *
                 C2641) +
            (C4763 * C1312 + C4759 * C1326 + C4764 * C1719 + C4760 * C1723 +
             C4765 * C5880 + C4761 * C5881) *
                C31165) *
               C31397 * C31184 * C31305) *
              C2904)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2641 +
            (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
            C169 * C31165) *
               C31397 * C108 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
               C31397 * C109 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
               C31397 * C110) *
              C31218 * C31548 +
          ((C361 * C2642 -
            ((C113 * C307 + C31383 * C326) * C2635 +
             (C113 * C297 + C31383 * C308) * C2641) +
            C362 * C31165) *
               C31397 * C108 +
           (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
               C31397 * C109 +
           (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
               C31397 * C110) *
              C31218 * C31544 +
          (((C113 * C301 + C31383 * C316) * C2641 +
            (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
            C368 * C31165) *
               C31397 * C108 +
           (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
               C31397 * C109 +
           (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31165) *
               C31397 * C110) *
              C31218 * C31534 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C31383 * C1181) * C2635 +
             (C113 * C1163 + C31383 * C1172) * C2641) +
            C1451 * C31165) *
               C31397 * C108 +
           (C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C31165) *
               C31397 * C109 +
           ((C113 * C1437 + C31383 * C1438) * C2642 -
            (C1453 * C2635 + C1452 * C2641) +
            (C113 * C1439 + C31383 * C1440) * C31165) *
               C31397 * C110) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2533 +
            (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
            C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
            C173 * C31508) *
               C31397 * C108 +
           (C168 * C2533 + C169 * C31547 - C170 * C2534 - C171 * C31540 +
            C172 * C2535 + C173 * C31527 - C174 * C2536 - C175 * C31508) *
               C31397 * C109 +
           (C170 * C2533 + C171 * C31547 - C172 * C2534 - C173 * C31540 +
            C174 * C2535 + C175 * C31527 - C176 * C2536 - C177 * C31508) *
               C31397 * C110) *
              C31218 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C31383 * C326) * C31547 +
             (C113 * C297 + C31383 * C308) * C2533) +
            C362 * C31540 - C363 * C2535 - C364 * C31527 + C365 * C2536 +
            C366 * C31508) *
               C31397 * C108 +
           (C363 * C2534 - (C362 * C31547 + C361 * C2533) + C364 * C31540 -
            C365 * C2535 - C366 * C31527 + C678 * C2536 + C679 * C31508) *
               C31397 * C109 +
           (C365 * C2534 - (C364 * C31547 + C363 * C2533) + C366 * C31540 -
            C678 * C2535 - C679 * C31527 +
            (C113 * C669 + C31383 * C670) * C2536 +
            (C113 * C671 + C31383 * C672) * C31508) *
               C31397 * C110) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
                C31397 * C110) *
               C31542 +
           ((C550 * C2642 -
             ((C113 * C496 + C31383 * C515) * C2635 +
              (C113 * C486 + C31383 * C497) * C2641) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31165) *
                C31397 * C110) *
               C31531 +
           (((C113 * C490 + C31383 * C505) * C2641 +
             (C113 * C506 + C31383 * C520) * C2635 - C556 * C2642 -
             C557 * C31165) *
                C31397 * C108 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31165) *
                C31397 * C109 +
            (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C31165) *
                C31397 * C110) *
               C31507) *
              C2531 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
                C31397 * C110) *
               C31542 +
           (((C113 * C935 + C31383 * C940) * C2641 +
             (C113 * C941 + C31383 * C950) * C2635 - C968 * C2642 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31165) *
                C31397 * C110) *
               C31531 +
           ((C2198 * C2642 -
             ((C113 * C1308 + C31383 * C1324) * C2635 +
              (C113 * C1297 + C31383 * C1309) * C2641) +
             C2199 * C31165) *
                C31397 * C108 +
            (C2200 * C2642 - (C2199 * C2635 + C2198 * C2641) + C2201 * C31165) *
                C31397 * C109 +
            ((C113 * C2185 + C31383 * C2186) * C2642 -
             (C2201 * C2635 + C2200 * C2641) +
             (C113 * C2187 + C31383 * C2188) * C31165) *
                C31397 * C110) *
               C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2533 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31547 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2534 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31540 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C2535 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31527 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C2536 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C31218 * C2531 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C2534 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31547 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C2533) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31540 -
           (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
            C4763 * C298 + C4759 * C310) *
               C2535 -
           (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
            C4763 * C311 + C4759 * C328) *
               C31527 +
           (C4763 * C299 + C4759 * C312 + C4764 * C304 + C4760 * C322 +
            C4765 * C1437 + C4761 * C1438) *
               C2536 +
           (C4763 * C313 + C4759 * C329 + C4764 * C323 + C4760 * C334 +
            C4765 * C1439 + C4761 * C1440) *
               C31508) *
              C31397 * C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2641 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C2635 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2642 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31165) *
              C31397 * C31184 * C31218 * C31548 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C2642 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C2635 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C2641) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31165) *
              C31397 * C31184 * C31218 * C31544 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C2641 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C2635 -
           (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
            C4763 * C302 + C4759 * C318) *
               C2642 -
           (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
            C4763 * C319 + C4759 * C332) *
               C31165) *
              C31397 * C31184 * C31218 * C31534 +
          ((C4763 * C1162 + C4759 * C1170 + C4764 * C1165 + C4760 * C1175 +
            C4765 * C5728 + C4761 * C5729) *
               C2642 -
           ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 + C4760 * C1182 +
             C4763 * C1171 + C4759 * C1181) *
                C2635 +
            (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 + C4760 * C1173 +
             C4763 * C1163 + C4759 * C1172) *
                C2641) +
           (C4763 * C1169 + C4759 * C1180 + C4764 * C1176 + C4760 * C1183 +
            C4765 * C5730 + C4761 * C5731) *
               C31165) *
              C31397 * C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C2641 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C2635 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C2642 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C31542 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C2642 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C2635 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C2641) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31531 +
           ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
             C4765 * C1301 + C4761 * C1316) *
                C2641 +
            (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
             C4765 * C1317 + C4761 * C1328) *
                C2635 -
            (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
             C4763 * C491 + C4759 * C507) *
                C2642 -
            (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
             C4763 * C508 + C4759 * C521) *
                C31165) *
               C31397 * C31184 * C31507) *
              C2531 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C2642 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C2635 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C2641) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C31542 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C2641 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C2635 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C2642 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31531 +
           ((C4763 * C1296 + C4759 * C1307 + C4764 * C1302 + C4760 * C1318 +
             C4765 * C6424 + C4761 * C6425) *
                C2642 -
            ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 + C4760 * C1328 +
              C4763 * C1308 + C4759 * C1324) *
                 C2635 +
             (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 + C4760 * C1316 +
              C4763 * C1297 + C4759 * C1309) *
                 C2641) +
            (C4763 * C1306 + C4759 * C1323 + C4764 * C1319 + C4760 * C1329 +
             C4765 * C6426 + C4761 * C6427) *
                C31165) *
               C31397 * C31184 * C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C30284 +
                      (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
                      C169 * C31168 + C170 * C30290 + C171 * C2901) *
                         C31397 * C108 +
                     (C168 * C30284 + C169 * C31160 - C170 * C30280 -
                      C171 * C31168 + C172 * C30290 + C173 * C2901) *
                         C31397 * C109 +
                     (C170 * C30284 + C171 * C31160 - C172 * C30280 -
                      C173 * C31168 + C174 * C30290 + C175 * C2901) *
                         C31397 * C110) *
                        C31476 +
                    ((C550 * C30280 -
                      ((C113 * C496 + C31383 * C515) * C31160 +
                       (C113 * C486 + C31383 * C497) * C30284) +
                      C551 * C31168 - C552 * C30290 - C553 * C2901) *
                         C31397 * C108 +
                     (C552 * C30280 - (C551 * C31160 + C550 * C30284) +
                      C553 * C31168 - C554 * C30290 - C555 * C2901) *
                         C31397 * C109 +
                     (C554 * C30280 - (C553 * C31160 + C552 * C30284) +
                      C555 * C31168 - C788 * C30290 - C789 * C2901) *
                         C31397 * C110) *
                        C31305) *
                       C2531 +
                   (((C361 * C30280 -
                      ((C113 * C307 + C31383 * C326) * C31160 +
                       (C113 * C297 + C31383 * C308) * C30284) +
                      C362 * C31168 - C363 * C30290 - C364 * C2901) *
                         C31397 * C108 +
                     (C363 * C30280 - (C362 * C31160 + C361 * C30284) +
                      C364 * C31168 - C365 * C30290 - C366 * C2901) *
                         C31397 * C109 +
                     (C365 * C30280 - (C364 * C31160 + C363 * C30284) +
                      C366 * C31168 - C678 * C30290 - C679 * C2901) *
                         C31397 * C110) *
                        C31476 +
                    (((C113 * C935 + C31383 * C940) * C30284 +
                      (C113 * C941 + C31383 * C950) * C31160 - C968 * C30280 -
                      C969 * C31168 + C970 * C30290 + C971 * C2901) *
                         C31397 * C108 +
                     (C968 * C30284 + C969 * C31160 - C970 * C30280 -
                      C971 * C31168 + C972 * C30290 + C973 * C2901) *
                         C31397 * C109 +
                     (C970 * C30284 + C971 * C31160 - C972 * C30280 -
                      C973 * C31168 + (C113 * C939 + C31383 * C948) * C30290 +
                      (C113 * C949 + C31383 * C954) * C2901) *
                         C31397 * C110) *
                        C31305) *
                       C31265)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C30284 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31160 -
                     (C4765 * C302 + C4761 * C318 + C4764 * C296 +
                      C4760 * C306 + C4763 * C120 + C4759 * C128) *
                         C30280 -
                     (C4765 * C319 + C4761 * C332 + C4764 * C309 +
                      C4760 * C327 + C4763 * C129 + C4759 * C141) *
                         C31168 +
                     (C4763 * C121 + C4759 * C130 + C4764 * C298 +
                      C4760 * C310 + C4765 * C303 + C4761 * C320) *
                         C30290 +
                     (C4763 * C131 + C4759 * C142 + C4764 * C311 +
                      C4760 * C328 + C4765 * C321 + C4761 * C333) *
                         C2901) *
                        C31397 * C31184 * C31476 +
                    ((C4763 * C485 + C4759 * C495 + C4764 * C936 +
                      C4760 * C942 + C4765 * C1299 + C4761 * C1313) *
                         C30280 -
                     ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                       C4760 * C950 + C4763 * C496 + C4759 * C515) *
                          C31160 +
                      (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                       C4760 * C940 + C4763 * C486 + C4759 * C497) *
                          C30284) +
                     (C4763 * C498 + C4759 * C516 + C4764 * C943 +
                      C4760 * C951 + C4765 * C1312 + C4761 * C1326) *
                         C31168 -
                     (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                      C4760 * C944 + C4763 * C487 + C4759 * C499) *
                         C30290 -
                     (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                      C4760 * C952 + C4763 * C500 + C4759 * C517) *
                         C2901) *
                        C31397 * C31184 * C31305) *
                       C2531 +
                   (((C4763 * C296 + C4759 * C306 + C4764 * C302 +
                      C4760 * C318 + C4765 * C1162 + C4761 * C1170) *
                         C30280 -
                     ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                       C4760 * C331 + C4763 * C307 + C4759 * C326) *
                          C31160 +
                      (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                       C4760 * C316 + C4763 * C297 + C4759 * C308) *
                          C30284) +
                     (C4763 * C309 + C4759 * C327 + C4764 * C319 +
                      C4760 * C332 + C4765 * C1169 + C4761 * C1180) *
                         C31168 -
                     (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                      C4760 * C320 + C4763 * C298 + C4759 * C310) *
                         C30290 -
                     (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                      C4760 * C333 + C4763 * C311 + C4759 * C328) *
                         C2901) *
                        C31397 * C31184 * C31476 +
                    ((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C30284 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31160 -
                     (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 +
                      C4760 * C1313 + C4763 * C936 + C4759 * C942) *
                         C30280 -
                     (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 +
                      C4760 * C1326 + C4763 * C943 + C4759 * C951) *
                         C31168 +
                     (C4763 * C937 + C4759 * C944 + C4764 * C1298 +
                      C4760 * C1311 + C4765 * C1715 + C4761 * C1720) *
                         C30290 +
                     (C4763 * C945 + C4759 * C952 + C4764 * C1310 +
                      C4760 * C1325 + C4765 * C1721 + C4761 * C1724) *
                         C2901) *
                        C31397 * C31184 * C31305) *
                       C31265)) /
                     (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2533 +
            (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
            C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
            C173 * C31508) *
               C31397 * C108 +
           (C168 * C2533 + C169 * C31547 - C170 * C2534 - C171 * C31540 +
            C172 * C2535 + C173 * C31527 - C174 * C2536 - C175 * C31508) *
               C31397 * C109 +
           (C170 * C2533 + C171 * C31547 - C172 * C2534 - C173 * C31540 +
            C174 * C2535 + C175 * C31527 - C176 * C2536 - C177 * C31508) *
               C31397 * C110) *
              C31218 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C31383 * C326) * C31547 +
             (C113 * C297 + C31383 * C308) * C2533) +
            C362 * C31540 - C363 * C2535 - C364 * C31527 + C365 * C2536 +
            C366 * C31508) *
               C31397 * C108 +
           (C363 * C2534 - (C362 * C31547 + C361 * C2533) + C364 * C31540 -
            C365 * C2535 - C366 * C31527 + C678 * C2536 + C679 * C31508) *
               C31397 * C109 +
           (C365 * C2534 - (C364 * C31547 + C363 * C2533) + C366 * C31540 -
            C678 * C2535 - C679 * C31527 +
            (C113 * C669 + C31383 * C670) * C2536 +
            (C113 * C671 + C31383 * C672) * C31508) *
               C31397 * C110) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2641 +
            (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
            C169 * C31165) *
               C31397 * C108 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
               C31397 * C109 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
               C31397 * C110) *
              C31218 * C31548 +
          ((C361 * C2642 -
            ((C113 * C307 + C31383 * C326) * C2635 +
             (C113 * C297 + C31383 * C308) * C2641) +
            C362 * C31165) *
               C31397 * C108 +
           (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
               C31397 * C109 +
           (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
               C31397 * C110) *
              C31218 * C31544 +
          (((C113 * C301 + C31383 * C316) * C2641 +
            (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
            C368 * C31165) *
               C31397 * C108 +
           (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
               C31397 * C109 +
           (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31165) *
               C31397 * C110) *
              C31218 * C31534 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C31383 * C1181) * C2635 +
             (C113 * C1163 + C31383 * C1172) * C2641) +
            C1451 * C31165) *
               C31397 * C108 +
           (C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C31165) *
               C31397 * C109 +
           ((C113 * C1437 + C31383 * C1438) * C2642 -
            (C1453 * C2635 + C1452 * C2641) +
            (C113 * C1439 + C31383 * C1440) * C31165) *
               C31397 * C110) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2533 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31547 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2534 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31540 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C2535 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31527 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C2536 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C31218 * C2531 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C2534 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31547 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C2533) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31540 -
           (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
            C4763 * C298 + C4759 * C310) *
               C2535 -
           (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
            C4763 * C311 + C4759 * C328) *
               C31527 +
           (C4763 * C299 + C4759 * C312 + C4764 * C304 + C4760 * C322 +
            C4765 * C1437 + C4761 * C1438) *
               C2536 +
           (C4763 * C313 + C4759 * C329 + C4764 * C323 + C4760 * C334 +
            C4765 * C1439 + C4761 * C1440) *
               C31508) *
              C31397 * C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2641 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C2635 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2642 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31165) *
              C31397 * C31184 * C31218 * C31548 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C2642 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C2635 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C2641) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31165) *
              C31397 * C31184 * C31218 * C31544 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C2641 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C2635 -
           (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
            C4763 * C302 + C4759 * C318) *
               C2642 -
           (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
            C4763 * C319 + C4759 * C332) *
               C31165) *
              C31397 * C31184 * C31218 * C31534 +
          ((C4763 * C1162 + C4759 * C1170 + C4764 * C1165 + C4760 * C1175 +
            C4765 * C5728 + C4761 * C5729) *
               C2642 -
           ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 + C4760 * C1182 +
             C4763 * C1171 + C4759 * C1181) *
                C2635 +
            (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 + C4760 * C1173 +
             C4763 * C1163 + C4759 * C1172) *
                C2641) +
           (C4763 * C1169 + C4759 * C1180 + C4764 * C1176 + C4760 * C1183 +
            C4765 * C5730 + C4761 * C5731) *
               C31165) *
              C31397 * C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
                C31397 * C110) *
               C3298 +
           ((C550 * C30255 -
             ((C113 * C496 + C31383 * C515) * C31457 +
              (C113 * C486 + C31383 * C497) * C30274) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C30255 - (C551 * C31457 + C550 * C30274) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C30255 - (C553 * C31457 + C552 * C30274) + C555 * C31165) *
                C31397 * C110) *
               C31305) *
              C31261 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C30255 - (C364 * C31457 + C363 * C30274) + C366 * C31165) *
                C31397 * C110) *
               C3298 +
           (((C113 * C935 + C31383 * C940) * C30274 +
             (C113 * C941 + C31383 * C950) * C31457 - C968 * C30255 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C30274 + C969 * C31457 - C970 * C30255 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C30274 + C971 * C31457 - C972 * C30255 - C973 * C31165) *
                C31397 * C110) *
               C31305) *
              C31268 +
          ((((C113 * C301 + C31383 * C316) * C30274 +
             (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
             C368 * C31165) *
                C31397 * C108 +
            (C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
                C31397 * C109 +
            (C369 * C30274 + C370 * C31457 - C371 * C30255 - C372 * C31165) *
                C31397 * C110) *
               C3298 +
           ((C1612 * C30255 -
             ((C113 * C1314 + C31383 * C1327) * C31457 +
              (C113 * C1300 + C31383 * C1315) * C30274) +
             C1613 * C31165) *
                C31397 * C108 +
            (C1614 * C30255 - (C1613 * C31457 + C1612 * C30274) +
             C1615 * C31165) *
                C31397 * C109 +
            ((C113 * C1599 + C31383 * C1600) * C30255 -
             (C1615 * C31457 + C1614 * C30274) +
             (C113 * C1601 + C31383 * C1602) * C31165) *
                C31397 * C110) *
               C31305) *
              C2904)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C30274 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31457 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C30255 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C30255 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31457 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C30274) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31261 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C30255 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31457 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C30274) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C30274 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31457 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C30255 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31268 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C30274 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C31457 -
            (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
             C4763 * C302 + C4759 * C318) *
                C30255 -
            (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
             C4763 * C319 + C4759 * C332) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C1299 + C4759 * C1313 + C4764 * C1714 + C4760 * C1718 +
             C4765 * C5878 + C4761 * C5879) *
                C30255 -
            ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
              C4763 * C1314 + C4759 * C1327) *
                 C31457 +
             (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
              C4763 * C1300 + C4759 * C1315) *
                 C30274) +
            (C4763 * C1312 + C4759 * C1326 + C4764 * C1719 + C4760 * C1723 +
             C4765 * C5880 + C4761 * C5881) *
                C31165) *
               C31397 * C31184 * C31305) *
              C2904)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1160 +
                      (C113 * C127 + C31383 * C140) * C31155) *
                         C31397 * C108 +
                     (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                     (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                        C31301 -
                    ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                     (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                     ((C113 * C496 + C31383 * C515) * C31155 +
                      (C113 * C486 + C31383 * C497) * C1160) *
                         C31397 * C108) *
                        C31308 +
                    (((C113 * C490 + C31383 * C505) * C1160 +
                      (C113 * C506 + C31383 * C520) * C31155) *
                         C31397 * C108 +
                     (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                     (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                        C3806) *
                       C31261 +
                   ((((C113 * C935 + C31383 * C940) * C1160 +
                      (C113 * C941 + C31383 * C950) * C31155) *
                         C31397 * C108 +
                     (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                     (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                        C31308 -
                    ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                     (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                     ((C113 * C307 + C31383 * C326) * C31155 +
                      (C113 * C297 + C31383 * C308) * C1160) *
                         C31397 * C108) *
                        C31301 -
                    ((C2201 * C31155 + C2200 * C1160) * C31397 * C110 +
                     (C2199 * C31155 + C2198 * C1160) * C31397 * C109 +
                     ((C113 * C1308 + C31383 * C1324) * C31155 +
                      (C113 * C1297 + C31383 * C1309) * C1160) *
                         C31397 * C108) *
                        C3806) *
                       C31268 +
                   ((((C113 * C301 + C31383 * C316) * C1160 +
                      (C113 * C317 + C31383 * C331) * C31155) *
                         C31397 * C108 +
                     (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                     (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                        C31301 -
                    ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
                     (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
                     ((C113 * C1314 + C31383 * C1327) * C31155 +
                      (C113 * C1300 + C31383 * C1315) * C1160) *
                         C31397 * C108) *
                        C31308 +
                    (((C113 * C1301 + C31383 * C1316) * C1160 +
                      (C113 * C1317 + C31383 * C1328) * C31155) *
                         C31397 * C108 +
                     ((C113 * C1302 + C31383 * C1318) * C1160 +
                      (C113 * C1319 + C31383 * C1329) * C31155) *
                         C31397 * C109 +
                     ((C113 * C1303 + C31383 * C1320) * C1160 +
                      (C113 * C1321 + C31383 * C1330) * C31155) *
                         C31397 * C110) *
                        C3806) *
                       C2904)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1160 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31155) *
                        C31397 * C31184 * C31301 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31155 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1160) *
                        C31397 * C31184 * C31308 +
                    ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                      C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                         C1160 +
                     (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                      C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                         C31155) *
                        C31397 * C31184 * C3806) *
                       C31261 +
                   (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1160 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31155) *
                        C31397 * C31184 * C31308 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31155 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1160) *
                        C31397 * C31184 * C31301 -
                    ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 +
                      C4760 * C1328 + C4763 * C1308 + C4759 * C1324) *
                         C31155 +
                     (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 +
                      C4760 * C1316 + C4763 * C1297 + C4759 * C1309) *
                         C1160) *
                        C31397 * C31184 * C3806) *
                       C31268 +
                   (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                      C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                         C1160 +
                     (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                      C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                         C31155) *
                        C31397 * C31184 * C31301 -
                    ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                      C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                         C31155 +
                     (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                      C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                         C1160) *
                        C31397 * C31184 * C31308 +
                    ((C4763 * C1301 + C4759 * C1316 + C4764 * C5618 +
                      C4760 * C5622 + C4765 * C5620 + C4761 * C5625) *
                         C1160 +
                     (C4763 * C1317 + C4759 * C1328 + C4764 * C5621 +
                      C4760 * C5627 + C4765 * C5626 + C4761 * C5629) *
                         C31155) *
                        C31397 * C31184 * C3806) *
                       C2904)) /
                     (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1160 +
                      (C113 * C127 + C31383 * C140) * C31155) *
                         C31397 * C108 +
                     (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                     (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                        C3298 -
                    ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                     (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                     ((C113 * C496 + C31383 * C515) * C31155 +
                      (C113 * C486 + C31383 * C497) * C1160) *
                         C31397 * C108) *
                        C31305) *
                       C31548 +
                   ((((C113 * C935 + C31383 * C940) * C1160 +
                      (C113 * C941 + C31383 * C950) * C31155) *
                         C31397 * C108 +
                     (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                     (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                        C31305 -
                    ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                     (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                     ((C113 * C307 + C31383 * C326) * C31155 +
                      (C113 * C297 + C31383 * C308) * C1160) *
                         C31397 * C108) *
                        C3298) *
                       C31544 +
                   ((((C113 * C301 + C31383 * C316) * C1160 +
                      (C113 * C317 + C31383 * C331) * C31155) *
                         C31397 * C108 +
                     (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                     (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                        C3298 -
                    ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
                     (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
                     ((C113 * C1314 + C31383 * C1327) * C31155 +
                      (C113 * C1300 + C31383 * C1315) * C1160) *
                         C31397 * C108) *
                        C31305) *
                       C31534 +
                   ((((C113 * C1713 + C31383 * C1716) * C1160 +
                      (C113 * C1717 + C31383 * C1722) * C31155) *
                         C31397 * C108 +
                     ((C113 * C1714 + C31383 * C1718) * C1160 +
                      (C113 * C1719 + C31383 * C1723) * C31155) *
                         C31397 * C109 +
                     ((C113 * C1715 + C31383 * C1720) * C1160 +
                      (C113 * C1721 + C31383 * C1724) * C31155) *
                         C31397 * C110) *
                        C31305 -
                    ((C1453 * C31155 + C1452 * C1160) * C31397 * C110 +
                     (C1451 * C31155 + C1450 * C1160) * C31397 * C109 +
                     ((C113 * C1171 + C31383 * C1181) * C31155 +
                      (C113 * C1163 + C31383 * C1172) * C1160) *
                         C31397 * C108) *
                        C3298) *
                       C31514)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1089 +
                      (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                      C169 * C31525 + C170 * C1091 + C171 * C31497) *
                         C31397 * C108 +
                     (C168 * C1089 + C169 * C31538 - C170 * C1090 -
                      C171 * C31525 + C172 * C1091 + C173 * C31497) *
                         C31397 * C109 +
                     (C170 * C1089 + C171 * C31538 - C172 * C1090 -
                      C173 * C31525 + C174 * C1091 + C175 * C31497) *
                         C31397 * C110) *
                        C3298 +
                    ((C550 * C1090 -
                      ((C113 * C496 + C31383 * C515) * C31538 +
                       (C113 * C486 + C31383 * C497) * C1089) +
                      C551 * C31525 - C552 * C1091 - C553 * C31497) *
                         C31397 * C108 +
                     (C552 * C1090 - (C551 * C31538 + C550 * C1089) +
                      C553 * C31525 - C554 * C1091 - C555 * C31497) *
                         C31397 * C109 +
                     (C554 * C1090 - (C553 * C31538 + C552 * C1089) +
                      C555 * C31525 - C788 * C1091 - C789 * C31497) *
                         C31397 * C110) *
                        C31305) *
                       C2531 +
                   (((C361 * C1090 -
                      ((C113 * C307 + C31383 * C326) * C31538 +
                       (C113 * C297 + C31383 * C308) * C1089) +
                      C362 * C31525 - C363 * C1091 - C364 * C31497) *
                         C31397 * C108 +
                     (C363 * C1090 - (C362 * C31538 + C361 * C1089) +
                      C364 * C31525 - C365 * C1091 - C366 * C31497) *
                         C31397 * C109 +
                     (C365 * C1090 - (C364 * C31538 + C363 * C1089) +
                      C366 * C31525 - C678 * C1091 - C679 * C31497) *
                         C31397 * C110) *
                        C3298 +
                    (((C113 * C935 + C31383 * C940) * C1089 +
                      (C113 * C941 + C31383 * C950) * C31538 - C968 * C1090 -
                      C969 * C31525 + C970 * C1091 + C971 * C31497) *
                         C31397 * C108 +
                     (C968 * C1089 + C969 * C31538 - C970 * C1090 -
                      C971 * C31525 + C972 * C1091 + C973 * C31497) *
                         C31397 * C109 +
                     (C970 * C1089 + C971 * C31538 - C972 * C1090 -
                      C973 * C31525 + (C113 * C939 + C31383 * C948) * C1091 +
                      (C113 * C949 + C31383 * C954) * C31497) *
                         C31397 * C110) *
                        C31305) *
                       C31265)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1160 +
                      (C113 * C127 + C31383 * C140) * C31155) *
                         C31397 * C108 +
                     (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                     (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                        C31549 -
                    ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                     (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                     ((C113 * C496 + C31383 * C515) * C31155 +
                      (C113 * C486 + C31383 * C497) * C1160) *
                         C31397 * C108) *
                        C31546 +
                    (((C113 * C490 + C31383 * C505) * C1160 +
                      (C113 * C506 + C31383 * C520) * C31155) *
                         C31397 * C108 +
                     (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                     (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                        C31537 -
                    ((C2319 * C31155 + C2318 * C1160) * C31397 * C110 +
                     (C2317 * C31155 + C2316 * C1160) * C31397 * C109 +
                     ((C113 * C2025 + C31383 * C2035) * C31155 +
                      (C113 * C2017 + C31383 * C2026) * C1160) *
                         C31397 * C108) *
                        C31520) *
                       C2531 +
                   ((((C113 * C935 + C31383 * C940) * C1160 +
                      (C113 * C941 + C31383 * C950) * C31155) *
                         C31397 * C108 +
                     (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                     (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                        C31546 -
                    ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                     (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                     ((C113 * C307 + C31383 * C326) * C31155 +
                      (C113 * C297 + C31383 * C308) * C1160) *
                         C31397 * C108) *
                        C31549 -
                    ((C2201 * C31155 + C2200 * C1160) * C31397 * C110 +
                     (C2199 * C31155 + C2198 * C1160) * C31397 * C109 +
                     ((C113 * C1308 + C31383 * C1324) * C31155 +
                      (C113 * C1297 + C31383 * C1309) * C1160) *
                         C31397 * C108) *
                        C31537 +
                    (((C113 * C2417 + C31383 * C2420) * C1160 +
                      (C113 * C2421 + C31383 * C2426) * C31155) *
                         C31397 * C108 +
                     ((C113 * C2418 + C31383 * C2422) * C1160 +
                      (C113 * C2423 + C31383 * C2427) * C31155) *
                         C31397 * C109 +
                     ((C113 * C2419 + C31383 * C2424) * C1160 +
                      (C113 * C2425 + C31383 * C2428) * C31155) *
                         C31397 * C110) *
                        C31520) *
                       C31265)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1089 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31538 -
                     (C4765 * C302 + C4761 * C318 + C4764 * C296 +
                      C4760 * C306 + C4763 * C120 + C4759 * C128) *
                         C1090 -
                     (C4765 * C319 + C4761 * C332 + C4764 * C309 +
                      C4760 * C327 + C4763 * C129 + C4759 * C141) *
                         C31525 +
                     (C4763 * C121 + C4759 * C130 + C4764 * C298 +
                      C4760 * C310 + C4765 * C303 + C4761 * C320) *
                         C1091 +
                     (C4763 * C131 + C4759 * C142 + C4764 * C311 +
                      C4760 * C328 + C4765 * C321 + C4761 * C333) *
                         C31497) *
                        C31397 * C31184 * C3298 +
                    ((C4763 * C485 + C4759 * C495 + C4764 * C936 +
                      C4760 * C942 + C4765 * C1299 + C4761 * C1313) *
                         C1090 -
                     ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                       C4760 * C950 + C4763 * C496 + C4759 * C515) *
                          C31538 +
                      (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                       C4760 * C940 + C4763 * C486 + C4759 * C497) *
                          C1089) +
                     (C4763 * C498 + C4759 * C516 + C4764 * C943 +
                      C4760 * C951 + C4765 * C1312 + C4761 * C1326) *
                         C31525 -
                     (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                      C4760 * C944 + C4763 * C487 + C4759 * C499) *
                         C1091 -
                     (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                      C4760 * C952 + C4763 * C500 + C4759 * C517) *
                         C31497) *
                        C31397 * C31184 * C31305) *
                       C2531 +
                   (((C4763 * C296 + C4759 * C306 + C4764 * C302 +
                      C4760 * C318 + C4765 * C1162 + C4761 * C1170) *
                         C1090 -
                     ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                       C4760 * C331 + C4763 * C307 + C4759 * C326) *
                          C31538 +
                      (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                       C4760 * C316 + C4763 * C297 + C4759 * C308) *
                          C1089) +
                     (C4763 * C309 + C4759 * C327 + C4764 * C319 +
                      C4760 * C332 + C4765 * C1169 + C4761 * C1180) *
                         C31525 -
                     (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                      C4760 * C320 + C4763 * C298 + C4759 * C310) *
                         C1091 -
                     (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                      C4760 * C333 + C4763 * C311 + C4759 * C328) *
                         C31497) *
                        C31397 * C31184 * C3298 +
                    ((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1089 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31538 -
                     (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 +
                      C4760 * C1313 + C4763 * C936 + C4759 * C942) *
                         C1090 -
                     (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 +
                      C4760 * C1326 + C4763 * C943 + C4759 * C951) *
                         C31525 +
                     (C4763 * C937 + C4759 * C944 + C4764 * C1298 +
                      C4760 * C1311 + C4765 * C1715 + C4761 * C1720) *
                         C1091 +
                     (C4763 * C945 + C4759 * C952 + C4764 * C1310 +
                      C4760 * C1325 + C4765 * C1721 + C4761 * C1724) *
                         C31497) *
                        C31397 * C31184 * C31305) *
                       C31265)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1160 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31155) *
                        C31397 * C31184 * C3298 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31155 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1160) *
                        C31397 * C31184 * C31305) *
                       C31548 +
                   (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1160 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31155) *
                        C31397 * C31184 * C31305 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31155 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1160) *
                        C31397 * C31184 * C3298) *
                       C31544 +
                   (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                      C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                         C1160 +
                     (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                      C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                         C31155) *
                        C31397 * C31184 * C3298 -
                    ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                      C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                         C31155 +
                     (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                      C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                         C1160) *
                        C31397 * C31184 * C31305) *
                       C31534 +
                   (((C4763 * C1713 + C4759 * C1716 + C4764 * C5619 +
                      C4760 * C5624 + C4765 * C5980 + C4761 * C5981) *
                         C1160 +
                     (C4763 * C1717 + C4759 * C1722 + C4764 * C5623 +
                      C4760 * C5628 + C4765 * C5982 + C4761 * C5983) *
                         C31155) *
                        C31397 * C31184 * C31305 -
                    ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 +
                      C4760 * C1182 + C4763 * C1171 + C4759 * C1181) *
                         C31155 +
                     (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 +
                      C4760 * C1173 + C4763 * C1163 + C4759 * C1172) *
                         C1160) *
                        C31397 * C31184 * C3298) *
                       C31514)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1160 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31155) *
                        C31397 * C31184 * C31549 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31155 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1160) *
                        C31397 * C31184 * C31546 +
                    ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                      C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                         C1160 +
                     (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                      C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                         C31155) *
                        C31397 * C31184 * C31537 -
                    ((C4765 * C6269 + C4761 * C6275 + C4764 * C2421 +
                      C4760 * C2426 + C4763 * C2025 + C4759 * C2035) *
                         C31155 +
                     (C4765 * C6266 + C4761 * C6270 + C4764 * C2417 +
                      C4760 * C2420 + C4763 * C2017 + C4759 * C2026) *
                         C1160) *
                        C31397 * C31184 * C31520) *
                       C2531 +
                   (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1160 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31155) *
                        C31397 * C31184 * C31546 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31155 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1160) *
                        C31397 * C31184 * C31549 -
                    ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 +
                      C4760 * C1328 + C4763 * C1308 + C4759 * C1324) *
                         C31155 +
                     (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 +
                      C4760 * C1316 + C4763 * C1297 + C4759 * C1309) *
                         C1160) *
                        C31397 * C31184 * C31537 +
                    ((C4763 * C2417 + C4759 * C2420 + C4764 * C6266 +
                      C4760 * C6270 + C4765 * C6628 + C4761 * C6629) *
                         C1160 +
                     (C4763 * C2421 + C4759 * C2426 + C4764 * C6269 +
                      C4760 * C6275 + C4765 * C6630 + C4761 * C6631) *
                         C31155) *
                        C31397 * C31184 * C31520) *
                       C31265)) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
                C31397 * C110) *
               C31301 +
           ((C550 * C30255 -
             ((C113 * C496 + C31383 * C515) * C31457 +
              (C113 * C486 + C31383 * C497) * C30274) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C30255 - (C551 * C31457 + C550 * C30274) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C30255 - (C553 * C31457 + C552 * C30274) + C555 * C31165) *
                C31397 * C110) *
               C31308 +
           (((C113 * C490 + C31383 * C505) * C30274 +
             (C113 * C506 + C31383 * C520) * C31457 - C556 * C30255 -
             C557 * C31165) *
                C31397 * C108 +
            (C556 * C30274 + C557 * C31457 - C558 * C30255 - C559 * C31165) *
                C31397 * C109 +
            (C558 * C30274 + C559 * C31457 - C560 * C30255 - C561 * C31165) *
                C31397 * C110) *
               C3806) *
              C2531 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C30255 - (C364 * C31457 + C363 * C30274) + C366 * C31165) *
                C31397 * C110) *
               C31301 +
           (((C113 * C935 + C31383 * C940) * C30274 +
             (C113 * C941 + C31383 * C950) * C31457 - C968 * C30255 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C30274 + C969 * C31457 - C970 * C30255 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C30274 + C971 * C31457 - C972 * C30255 - C973 * C31165) *
                C31397 * C110) *
               C31308 +
           ((C2198 * C30255 -
             ((C113 * C1308 + C31383 * C1324) * C31457 +
              (C113 * C1297 + C31383 * C1309) * C30274) +
             C2199 * C31165) *
                C31397 * C108 +
            (C2200 * C30255 - (C2199 * C31457 + C2198 * C30274) +
             C2201 * C31165) *
                C31397 * C109 +
            ((C113 * C2185 + C31383 * C2186) * C30255 -
             (C2201 * C31457 + C2200 * C30274) +
             (C113 * C2187 + C31383 * C2188) * C31165) *
                C31397 * C110) *
               C3806) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C30274 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31457 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C30255 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C31301 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C30255 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31457 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C30274) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31308 +
           ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
             C4765 * C1301 + C4761 * C1316) *
                C30274 +
            (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
             C4765 * C1317 + C4761 * C1328) *
                C31457 -
            (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
             C4763 * C491 + C4759 * C507) *
                C30255 -
            (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
             C4763 * C508 + C4759 * C521) *
                C31165) *
               C31397 * C31184 * C3806) *
              C2531 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C30255 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31457 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C30274) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C31301 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C30274 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31457 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C30255 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31308 +
           ((C4763 * C1296 + C4759 * C1307 + C4764 * C1302 + C4760 * C1318 +
             C4765 * C6424 + C4761 * C6425) *
                C30255 -
            ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 + C4760 * C1328 +
              C4763 * C1308 + C4759 * C1324) *
                 C31457 +
             (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 + C4760 * C1316 +
              C4763 * C1297 + C4759 * C1309) *
                 C30274) +
            (C4763 * C1306 + C4759 * C1323 + C4764 * C1319 + C4760 * C1329 +
             C4765 * C6426 + C4761 * C6427) *
                C31165) *
               C31397 * C31184 * C3806) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1089 +
                      (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                      C169 * C31525 + C170 * C1091 + C171 * C31497) *
                         C31397 * C108 +
                     (C168 * C1089 + C169 * C31538 - C170 * C1090 -
                      C171 * C31525 + C172 * C1091 + C173 * C31497) *
                         C31397 * C109 +
                     (C170 * C1089 + C171 * C31538 - C172 * C1090 -
                      C173 * C31525 + C174 * C1091 + C175 * C31497) *
                         C31397 * C110) *
                        C3298 +
                    ((C550 * C1090 -
                      ((C113 * C496 + C31383 * C515) * C31538 +
                       (C113 * C486 + C31383 * C497) * C1089) +
                      C551 * C31525 - C552 * C1091 - C553 * C31497) *
                         C31397 * C108 +
                     (C552 * C1090 - (C551 * C31538 + C550 * C1089) +
                      C553 * C31525 - C554 * C1091 - C555 * C31497) *
                         C31397 * C109 +
                     (C554 * C1090 - (C553 * C31538 + C552 * C1089) +
                      C555 * C31525 - C788 * C1091 - C789 * C31497) *
                         C31397 * C110) *
                        C31305) *
                       C2531 +
                   (((C361 * C1090 -
                      ((C113 * C307 + C31383 * C326) * C31538 +
                       (C113 * C297 + C31383 * C308) * C1089) +
                      C362 * C31525 - C363 * C1091 - C364 * C31497) *
                         C31397 * C108 +
                     (C363 * C1090 - (C362 * C31538 + C361 * C1089) +
                      C364 * C31525 - C365 * C1091 - C366 * C31497) *
                         C31397 * C109 +
                     (C365 * C1090 - (C364 * C31538 + C363 * C1089) +
                      C366 * C31525 - C678 * C1091 - C679 * C31497) *
                         C31397 * C110) *
                        C3298 +
                    (((C113 * C935 + C31383 * C940) * C1089 +
                      (C113 * C941 + C31383 * C950) * C31538 - C968 * C1090 -
                      C969 * C31525 + C970 * C1091 + C971 * C31497) *
                         C31397 * C108 +
                     (C968 * C1089 + C969 * C31538 - C970 * C1090 -
                      C971 * C31525 + C972 * C1091 + C973 * C31497) *
                         C31397 * C109 +
                     (C970 * C1089 + C971 * C31538 - C972 * C1090 -
                      C973 * C31525 + (C113 * C939 + C31383 * C948) * C1091 +
                      (C113 * C949 + C31383 * C954) * C31497) *
                         C31397 * C110) *
                        C31305) *
                       C31265)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1160 +
                      (C113 * C127 + C31383 * C140) * C31155) *
                         C31397 * C108 +
                     (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                     (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                        C3298 -
                    ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                     (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                     ((C113 * C496 + C31383 * C515) * C31155 +
                      (C113 * C486 + C31383 * C497) * C1160) *
                         C31397 * C108) *
                        C31305) *
                       C31548 +
                   ((((C113 * C935 + C31383 * C940) * C1160 +
                      (C113 * C941 + C31383 * C950) * C31155) *
                         C31397 * C108 +
                     (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                     (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                        C31305 -
                    ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                     (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                     ((C113 * C307 + C31383 * C326) * C31155 +
                      (C113 * C297 + C31383 * C308) * C1160) *
                         C31397 * C108) *
                        C3298) *
                       C31544 +
                   ((((C113 * C301 + C31383 * C316) * C1160 +
                      (C113 * C317 + C31383 * C331) * C31155) *
                         C31397 * C108 +
                     (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                     (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                        C3298 -
                    ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
                     (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
                     ((C113 * C1314 + C31383 * C1327) * C31155 +
                      (C113 * C1300 + C31383 * C1315) * C1160) *
                         C31397 * C108) *
                        C31305) *
                       C31534 +
                   ((((C113 * C1713 + C31383 * C1716) * C1160 +
                      (C113 * C1717 + C31383 * C1722) * C31155) *
                         C31397 * C108 +
                     ((C113 * C1714 + C31383 * C1718) * C1160 +
                      (C113 * C1719 + C31383 * C1723) * C31155) *
                         C31397 * C109 +
                     ((C113 * C1715 + C31383 * C1720) * C1160 +
                      (C113 * C1721 + C31383 * C1724) * C31155) *
                         C31397 * C110) *
                        C31305 -
                    ((C1453 * C31155 + C1452 * C1160) * C31397 * C110 +
                     (C1451 * C31155 + C1450 * C1160) * C31397 * C109 +
                     ((C113 * C1171 + C31383 * C1181) * C31155 +
                      (C113 * C1163 + C31383 * C1172) * C1160) *
                         C31397 * C108) *
                        C3298) *
                       C31514)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1089 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31538 -
                     (C4765 * C302 + C4761 * C318 + C4764 * C296 +
                      C4760 * C306 + C4763 * C120 + C4759 * C128) *
                         C1090 -
                     (C4765 * C319 + C4761 * C332 + C4764 * C309 +
                      C4760 * C327 + C4763 * C129 + C4759 * C141) *
                         C31525 +
                     (C4763 * C121 + C4759 * C130 + C4764 * C298 +
                      C4760 * C310 + C4765 * C303 + C4761 * C320) *
                         C1091 +
                     (C4763 * C131 + C4759 * C142 + C4764 * C311 +
                      C4760 * C328 + C4765 * C321 + C4761 * C333) *
                         C31497) *
                        C31397 * C31184 * C3298 +
                    ((C4763 * C485 + C4759 * C495 + C4764 * C936 +
                      C4760 * C942 + C4765 * C1299 + C4761 * C1313) *
                         C1090 -
                     ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                       C4760 * C950 + C4763 * C496 + C4759 * C515) *
                          C31538 +
                      (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                       C4760 * C940 + C4763 * C486 + C4759 * C497) *
                          C1089) +
                     (C4763 * C498 + C4759 * C516 + C4764 * C943 +
                      C4760 * C951 + C4765 * C1312 + C4761 * C1326) *
                         C31525 -
                     (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                      C4760 * C944 + C4763 * C487 + C4759 * C499) *
                         C1091 -
                     (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                      C4760 * C952 + C4763 * C500 + C4759 * C517) *
                         C31497) *
                        C31397 * C31184 * C31305) *
                       C2531 +
                   (((C4763 * C296 + C4759 * C306 + C4764 * C302 +
                      C4760 * C318 + C4765 * C1162 + C4761 * C1170) *
                         C1090 -
                     ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                       C4760 * C331 + C4763 * C307 + C4759 * C326) *
                          C31538 +
                      (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                       C4760 * C316 + C4763 * C297 + C4759 * C308) *
                          C1089) +
                     (C4763 * C309 + C4759 * C327 + C4764 * C319 +
                      C4760 * C332 + C4765 * C1169 + C4761 * C1180) *
                         C31525 -
                     (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                      C4760 * C320 + C4763 * C298 + C4759 * C310) *
                         C1091 -
                     (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                      C4760 * C333 + C4763 * C311 + C4759 * C328) *
                         C31497) *
                        C31397 * C31184 * C3298 +
                    ((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1089 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31538 -
                     (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 +
                      C4760 * C1313 + C4763 * C936 + C4759 * C942) *
                         C1090 -
                     (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 +
                      C4760 * C1326 + C4763 * C943 + C4759 * C951) *
                         C31525 +
                     (C4763 * C937 + C4759 * C944 + C4764 * C1298 +
                      C4760 * C1311 + C4765 * C1715 + C4761 * C1720) *
                         C1091 +
                     (C4763 * C945 + C4759 * C952 + C4764 * C1310 +
                      C4760 * C1325 + C4765 * C1721 + C4761 * C1724) *
                         C31497) *
                        C31397 * C31184 * C31305) *
                       C31265)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1160 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31155) *
                        C31397 * C31184 * C3298 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31155 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1160) *
                        C31397 * C31184 * C31305) *
                       C31548 +
                   (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1160 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31155) *
                        C31397 * C31184 * C31305 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31155 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1160) *
                        C31397 * C31184 * C3298) *
                       C31544 +
                   (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                      C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                         C1160 +
                     (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                      C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                         C31155) *
                        C31397 * C31184 * C3298 -
                    ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                      C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                         C31155 +
                     (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                      C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                         C1160) *
                        C31397 * C31184 * C31305) *
                       C31534 +
                   (((C4763 * C1713 + C4759 * C1716 + C4764 * C5619 +
                      C4760 * C5624 + C4765 * C5980 + C4761 * C5981) *
                         C1160 +
                     (C4763 * C1717 + C4759 * C1722 + C4764 * C5623 +
                      C4760 * C5628 + C4765 * C5982 + C4761 * C5983) *
                         C31155) *
                        C31397 * C31184 * C31305 -
                    ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 +
                      C4760 * C1182 + C4763 * C1171 + C4759 * C1181) *
                         C31155 +
                     (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 +
                      C4760 * C1173 + C4763 * C1163 + C4759 * C1172) *
                         C1160) *
                        C31397 * C31184 * C3298) *
                       C31514)) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C30274 +
            (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
            C169 * C31165) *
               C31397 * C108 +
           (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
               C31397 * C109 +
           (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
               C31397 * C110) *
              C31218 * C1431 +
          ((C361 * C30255 -
            ((C113 * C307 + C31383 * C326) * C31457 +
             (C113 * C297 + C31383 * C308) * C30274) +
            C362 * C31165) *
               C31397 * C108 +
           (C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
               C31397 * C109 +
           (C365 * C30255 - (C364 * C31457 + C363 * C30274) + C366 * C31165) *
               C31397 * C110) *
              C31218 * C1432 +
          (((C113 * C301 + C31383 * C316) * C30274 +
            (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
            C368 * C31165) *
               C31397 * C108 +
           (C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
               C31397 * C109 +
           (C369 * C30274 + C370 * C31457 - C371 * C30255 - C372 * C31165) *
               C31397 * C110) *
              C31218 * C1433 +
          ((C1450 * C30255 -
            ((C113 * C1171 + C31383 * C1181) * C31457 +
             (C113 * C1163 + C31383 * C1172) * C30274) +
            C1451 * C31165) *
               C31397 * C108 +
           (C1452 * C30255 - (C1451 * C31457 + C1450 * C30274) +
            C1453 * C31165) *
               C31397 * C109 +
           ((C113 * C1437 + C31383 * C1438) * C30255 -
            (C1453 * C31457 + C1452 * C30274) +
            (C113 * C1439 + C31383 * C1440) * C31165) *
               C31397 * C110) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C665 +
            (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
               C31397 * C108 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31508) *
               C31397 * C109 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31508) *
               C31397 * C110) *
              C31218 * C31475 +
          ((C361 * C666 -
            ((C113 * C307 + C31383 * C326) * C659 +
             (C113 * C297 + C31383 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C31508) *
               C31397 * C108 +
           (C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
            C365 * C667 - C366 * C661 + C678 * C668 + C679 * C31508) *
               C31397 * C109 +
           (C365 * C666 - (C364 * C659 + C363 * C665) + C366 * C660 -
            C678 * C667 - C679 * C661 + (C113 * C669 + C31383 * C670) * C668 +
            (C113 * C671 + C31383 * C672) * C31508) *
               C31397 * C110) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
                C31397 * C110) *
               C1835 +
           ((C550 * C30255 -
             ((C113 * C496 + C31383 * C515) * C31457 +
              (C113 * C486 + C31383 * C497) * C30274) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C30255 - (C551 * C31457 + C550 * C30274) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C30255 - (C553 * C31457 + C552 * C30274) + C555 * C31165) *
                C31397 * C110) *
               C1836 +
           (((C113 * C490 + C31383 * C505) * C30274 +
             (C113 * C506 + C31383 * C520) * C31457 - C556 * C30255 -
             C557 * C31165) *
                C31397 * C108 +
            (C556 * C30274 + C557 * C31457 - C558 * C30255 - C559 * C31165) *
                C31397 * C109 +
            (C558 * C30274 + C559 * C31457 - C560 * C30255 - C561 * C31165) *
                C31397 * C110) *
               C31507) *
              C31475 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C30255 - (C364 * C31457 + C363 * C30274) + C366 * C31165) *
                C31397 * C110) *
               C1835 +
           (((C113 * C935 + C31383 * C940) * C30274 +
             (C113 * C941 + C31383 * C950) * C31457 - C968 * C30255 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C30274 + C969 * C31457 - C970 * C30255 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C30274 + C971 * C31457 - C972 * C30255 - C973 * C31165) *
                C31397 * C110) *
               C1836 +
           ((C2198 * C30255 -
             ((C113 * C1308 + C31383 * C1324) * C31457 +
              (C113 * C1297 + C31383 * C1309) * C30274) +
             C2199 * C31165) *
                C31397 * C108 +
            (C2200 * C30255 - (C2199 * C31457 + C2198 * C30274) +
             C2201 * C31165) *
                C31397 * C109 +
            ((C113 * C2185 + C31383 * C2186) * C30255 -
             (C2201 * C31457 + C2200 * C30274) +
             (C113 * C2187 + C31383 * C2188) * C31165) *
                C31397 * C110) *
               C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C665 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C659 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C666 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C660 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C667 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C661 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C668 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C31218 * C31475 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C666 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C659 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C665) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C660 -
           (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
            C4763 * C298 + C4759 * C310) *
               C667 -
           (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
            C4763 * C311 + C4759 * C328) *
               C661 +
           (C4763 * C299 + C4759 * C312 + C4764 * C304 + C4760 * C322 +
            C4765 * C1437 + C4761 * C1438) *
               C668 +
           (C4763 * C313 + C4759 * C329 + C4764 * C323 + C4760 * C334 +
            C4765 * C1439 + C4761 * C1440) *
               C31508) *
              C31397 * C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C30274 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31457 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C30255 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31165) *
              C31397 * C31184 * C31218 * C1431 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C30255 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31457 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C30274) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31165) *
              C31397 * C31184 * C31218 * C1432 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C30274 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C31457 -
           (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
            C4763 * C302 + C4759 * C318) *
               C30255 -
           (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
            C4763 * C319 + C4759 * C332) *
               C31165) *
              C31397 * C31184 * C31218 * C1433 +
          ((C4763 * C1162 + C4759 * C1170 + C4764 * C1165 + C4760 * C1175 +
            C4765 * C5728 + C4761 * C5729) *
               C30255 -
           ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 + C4760 * C1182 +
             C4763 * C1171 + C4759 * C1181) *
                C31457 +
            (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 + C4760 * C1173 +
             C4763 * C1163 + C4759 * C1172) *
                C30274) +
           (C4763 * C1169 + C4759 * C1180 + C4764 * C1176 + C4760 * C1183 +
            C4765 * C5730 + C4761 * C5731) *
               C31165) *
              C31397 * C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C30274 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31457 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C30255 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C1835 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C30255 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31457 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C30274) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C1836 +
           ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
             C4765 * C1301 + C4761 * C1316) *
                C30274 +
            (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
             C4765 * C1317 + C4761 * C1328) *
                C31457 -
            (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
             C4763 * C491 + C4759 * C507) *
                C30255 -
            (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
             C4763 * C508 + C4759 * C521) *
                C31165) *
               C31397 * C31184 * C31507) *
              C31475 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C30255 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31457 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C30274) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C1835 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C30274 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31457 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C30255 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C1836 +
           ((C4763 * C1296 + C4759 * C1307 + C4764 * C1302 + C4760 * C1318 +
             C4765 * C6424 + C4761 * C6425) *
                C30255 -
            ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 + C4760 * C1328 +
              C4763 * C1308 + C4759 * C1324) *
                 C31457 +
             (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 + C4760 * C1316 +
              C4763 * C1297 + C4759 * C1309) *
                 C30274) +
            (C4763 * C1306 + C4759 * C1323 + C4764 * C1319 + C4760 * C1329 +
             C4765 * C6426 + C4761 * C6427) *
                C31165) *
               C31397 * C31184 * C31507) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1160 +
                      (C113 * C127 + C31383 * C140) * C31155) *
                         C31397 * C108 +
                     (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                     (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                        C31476 -
                    ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                     (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                     ((C113 * C496 + C31383 * C515) * C31155 +
                      (C113 * C486 + C31383 * C497) * C1160) *
                         C31397 * C108) *
                        C31305) *
                       C1431 +
                   ((((C113 * C935 + C31383 * C940) * C1160 +
                      (C113 * C941 + C31383 * C950) * C31155) *
                         C31397 * C108 +
                     (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                     (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                        C31305 -
                    ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                     (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                     ((C113 * C307 + C31383 * C326) * C31155 +
                      (C113 * C297 + C31383 * C308) * C1160) *
                         C31397 * C108) *
                        C31476) *
                       C1432 +
                   ((((C113 * C301 + C31383 * C316) * C1160 +
                      (C113 * C317 + C31383 * C331) * C31155) *
                         C31397 * C108 +
                     (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                     (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                        C31476 -
                    ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
                     (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
                     ((C113 * C1314 + C31383 * C1327) * C31155 +
                      (C113 * C1300 + C31383 * C1315) * C1160) *
                         C31397 * C108) *
                        C31305) *
                       C1433 +
                   ((((C113 * C1713 + C31383 * C1716) * C1160 +
                      (C113 * C1717 + C31383 * C1722) * C31155) *
                         C31397 * C108 +
                     ((C113 * C1714 + C31383 * C1718) * C1160 +
                      (C113 * C1719 + C31383 * C1723) * C31155) *
                         C31397 * C109 +
                     ((C113 * C1715 + C31383 * C1720) * C1160 +
                      (C113 * C1721 + C31383 * C1724) * C31155) *
                         C31397 * C110) *
                        C31305 -
                    ((C1453 * C31155 + C1452 * C1160) * C31397 * C110 +
                     (C1451 * C31155 + C1450 * C1160) * C31397 * C109 +
                     ((C113 * C1171 + C31383 * C1181) * C31155 +
                      (C113 * C1163 + C31383 * C1172) * C1160) *
                         C31397 * C108) *
                        C31476) *
                       C31514)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C293 +
                      (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                      C169 * C288 + C170 * C295 + C171 * C31497) *
                         C31397 * C108 +
                     (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                      C172 * C295 + C173 * C31497) *
                         C31397 * C109 +
                     (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                      C174 * C295 + C175 * C31497) *
                         C31397 * C110) *
                        C31476 +
                    ((C550 * C294 -
                      ((C113 * C496 + C31383 * C515) * C287 +
                       (C113 * C486 + C31383 * C497) * C293) +
                      C551 * C288 - C552 * C295 - C553 * C31497) *
                         C31397 * C108 +
                     (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                      C554 * C295 - C555 * C31497) *
                         C31397 * C109 +
                     (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                      C788 * C295 - C789 * C31497) *
                         C31397 * C110) *
                        C31305) *
                       C31475 +
                   (((C361 * C294 -
                      ((C113 * C307 + C31383 * C326) * C287 +
                       (C113 * C297 + C31383 * C308) * C293) +
                      C362 * C288 - C363 * C295 - C364 * C31497) *
                         C31397 * C108 +
                     (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                      C365 * C295 - C366 * C31497) *
                         C31397 * C109 +
                     (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                      C678 * C295 - C679 * C31497) *
                         C31397 * C110) *
                        C31476 +
                    (((C113 * C935 + C31383 * C940) * C293 +
                      (C113 * C941 + C31383 * C950) * C287 - C968 * C294 -
                      C969 * C288 + C970 * C295 + C971 * C31497) *
                         C31397 * C108 +
                     (C968 * C293 + C969 * C287 - C970 * C294 - C971 * C288 +
                      C972 * C295 + C973 * C31497) *
                         C31397 * C109 +
                     (C970 * C293 + C971 * C287 - C972 * C294 - C973 * C288 +
                      (C113 * C939 + C31383 * C948) * C295 +
                      (C113 * C949 + C31383 * C954) * C31497) *
                         C31397 * C110) *
                        C31305) *
                       C31265)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1160 +
                      (C113 * C127 + C31383 * C140) * C31155) *
                         C31397 * C108 +
                     (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                     (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                        C2299 -
                    ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                     (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                     ((C113 * C496 + C31383 * C515) * C31155 +
                      (C113 * C486 + C31383 * C497) * C1160) *
                         C31397 * C108) *
                        C2300 +
                    (((C113 * C490 + C31383 * C505) * C1160 +
                      (C113 * C506 + C31383 * C520) * C31155) *
                         C31397 * C108 +
                     (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                     (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                        C2301 -
                    ((C2319 * C31155 + C2318 * C1160) * C31397 * C110 +
                     (C2317 * C31155 + C2316 * C1160) * C31397 * C109 +
                     ((C113 * C2025 + C31383 * C2035) * C31155 +
                      (C113 * C2017 + C31383 * C2026) * C1160) *
                         C31397 * C108) *
                        C31520) *
                       C31475 +
                   ((((C113 * C935 + C31383 * C940) * C1160 +
                      (C113 * C941 + C31383 * C950) * C31155) *
                         C31397 * C108 +
                     (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                     (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                        C2300 -
                    ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                     (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                     ((C113 * C307 + C31383 * C326) * C31155 +
                      (C113 * C297 + C31383 * C308) * C1160) *
                         C31397 * C108) *
                        C2299 -
                    ((C2201 * C31155 + C2200 * C1160) * C31397 * C110 +
                     (C2199 * C31155 + C2198 * C1160) * C31397 * C109 +
                     ((C113 * C1308 + C31383 * C1324) * C31155 +
                      (C113 * C1297 + C31383 * C1309) * C1160) *
                         C31397 * C108) *
                        C2301 +
                    (((C113 * C2417 + C31383 * C2420) * C1160 +
                      (C113 * C2421 + C31383 * C2426) * C31155) *
                         C31397 * C108 +
                     ((C113 * C2418 + C31383 * C2422) * C1160 +
                      (C113 * C2423 + C31383 * C2427) * C31155) *
                         C31397 * C109 +
                     ((C113 * C2419 + C31383 * C2424) * C1160 +
                      (C113 * C2425 + C31383 * C2428) * C31155) *
                         C31397 * C110) *
                        C31520) *
                       C31265)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C293 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C287 -
                     (C4765 * C302 + C4761 * C318 + C4764 * C296 +
                      C4760 * C306 + C4763 * C120 + C4759 * C128) *
                         C294 -
                     (C4765 * C319 + C4761 * C332 + C4764 * C309 +
                      C4760 * C327 + C4763 * C129 + C4759 * C141) *
                         C288 +
                     (C4763 * C121 + C4759 * C130 + C4764 * C298 +
                      C4760 * C310 + C4765 * C303 + C4761 * C320) *
                         C295 +
                     (C4763 * C131 + C4759 * C142 + C4764 * C311 +
                      C4760 * C328 + C4765 * C321 + C4761 * C333) *
                         C31497) *
                        C31397 * C31184 * C31476 +
                    ((C4763 * C485 + C4759 * C495 + C4764 * C936 +
                      C4760 * C942 + C4765 * C1299 + C4761 * C1313) *
                         C294 -
                     ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                       C4760 * C950 + C4763 * C496 + C4759 * C515) *
                          C287 +
                      (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                       C4760 * C940 + C4763 * C486 + C4759 * C497) *
                          C293) +
                     (C4763 * C498 + C4759 * C516 + C4764 * C943 +
                      C4760 * C951 + C4765 * C1312 + C4761 * C1326) *
                         C288 -
                     (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                      C4760 * C944 + C4763 * C487 + C4759 * C499) *
                         C295 -
                     (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                      C4760 * C952 + C4763 * C500 + C4759 * C517) *
                         C31497) *
                        C31397 * C31184 * C31305) *
                       C31475 +
                   (((C4763 * C296 + C4759 * C306 + C4764 * C302 +
                      C4760 * C318 + C4765 * C1162 + C4761 * C1170) *
                         C294 -
                     ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                       C4760 * C331 + C4763 * C307 + C4759 * C326) *
                          C287 +
                      (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                       C4760 * C316 + C4763 * C297 + C4759 * C308) *
                          C293) +
                     (C4763 * C309 + C4759 * C327 + C4764 * C319 +
                      C4760 * C332 + C4765 * C1169 + C4761 * C1180) *
                         C288 -
                     (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                      C4760 * C320 + C4763 * C298 + C4759 * C310) *
                         C295 -
                     (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                      C4760 * C333 + C4763 * C311 + C4759 * C328) *
                         C31497) *
                        C31397 * C31184 * C31476 +
                    ((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C293 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C287 -
                     (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 +
                      C4760 * C1313 + C4763 * C936 + C4759 * C942) *
                         C294 -
                     (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 +
                      C4760 * C1326 + C4763 * C943 + C4759 * C951) *
                         C288 +
                     (C4763 * C937 + C4759 * C944 + C4764 * C1298 +
                      C4760 * C1311 + C4765 * C1715 + C4761 * C1720) *
                         C295 +
                     (C4763 * C945 + C4759 * C952 + C4764 * C1310 +
                      C4760 * C1325 + C4765 * C1721 + C4761 * C1724) *
                         C31497) *
                        C31397 * C31184 * C31305) *
                       C31265)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1160 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31155) *
                        C31397 * C31184 * C31476 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31155 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1160) *
                        C31397 * C31184 * C31305) *
                       C1431 +
                   (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1160 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31155) *
                        C31397 * C31184 * C31305 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31155 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1160) *
                        C31397 * C31184 * C31476) *
                       C1432 +
                   (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                      C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                         C1160 +
                     (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                      C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                         C31155) *
                        C31397 * C31184 * C31476 -
                    ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                      C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                         C31155 +
                     (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                      C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                         C1160) *
                        C31397 * C31184 * C31305) *
                       C1433 +
                   (((C4763 * C1713 + C4759 * C1716 + C4764 * C5619 +
                      C4760 * C5624 + C4765 * C5980 + C4761 * C5981) *
                         C1160 +
                     (C4763 * C1717 + C4759 * C1722 + C4764 * C5623 +
                      C4760 * C5628 + C4765 * C5982 + C4761 * C5983) *
                         C31155) *
                        C31397 * C31184 * C31305 -
                    ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 +
                      C4760 * C1182 + C4763 * C1171 + C4759 * C1181) *
                         C31155 +
                     (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 +
                      C4760 * C1173 + C4763 * C1163 + C4759 * C1172) *
                         C1160) *
                        C31397 * C31184 * C31476) *
                       C31514)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1160 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31155) *
                        C31397 * C31184 * C2299 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31155 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1160) *
                        C31397 * C31184 * C2300 +
                    ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                      C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                         C1160 +
                     (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                      C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                         C31155) *
                        C31397 * C31184 * C2301 -
                    ((C4765 * C6269 + C4761 * C6275 + C4764 * C2421 +
                      C4760 * C2426 + C4763 * C2025 + C4759 * C2035) *
                         C31155 +
                     (C4765 * C6266 + C4761 * C6270 + C4764 * C2417 +
                      C4760 * C2420 + C4763 * C2017 + C4759 * C2026) *
                         C1160) *
                        C31397 * C31184 * C31520) *
                       C31475 +
                   (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1160 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31155) *
                        C31397 * C31184 * C2300 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31155 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1160) *
                        C31397 * C31184 * C2299 -
                    ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 +
                      C4760 * C1328 + C4763 * C1308 + C4759 * C1324) *
                         C31155 +
                     (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 +
                      C4760 * C1316 + C4763 * C1297 + C4759 * C1309) *
                         C1160) *
                        C31397 * C31184 * C2301 +
                    ((C4763 * C2417 + C4759 * C2420 + C4764 * C6266 +
                      C4760 * C6270 + C4765 * C6628 + C4761 * C6629) *
                         C1160 +
                     (C4763 * C2421 + C4759 * C2426 + C4764 * C6269 +
                      C4760 * C6275 + C4765 * C6630 + C4761 * C6631) *
                         C31155) *
                        C31397 * C31184 * C31520) *
                       C31265)) /
                     (p * q * std::sqrt(p + q));
    d2ee[112] += (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                      (((C113 * C119 + C31383 * C126) * C114 +
                        (C113 * C127 + C31383 * C140) * C102 - C168 * C115 -
                        C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                        C173 * C105 + C174 * C118 + C175 * C106) *
                           C31397 * C108 +
                       (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                        C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                        C176 * C118 + C177 * C106) *
                           C31397 * C109 +
                       (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                        C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                        (C113 * C125 + C31383 * C138) * C118 +
                        (C113 * C139 + C31383 * C146) * C106) *
                           C31397 * C110) *
                      C31218 * C31206 +
                  std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                      ((((C113 * C119 + C31383 * C126) * C293 +
                         (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                         C169 * C288 + C170 * C295 + C171 * C31497) *
                            C31397 * C108 +
                        (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                         C172 * C295 + C173 * C31497) *
                            C31397 * C109 +
                        (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                         C174 * C295 + C175 * C31497) *
                            C31397 * C110) *
                           C31218 * C31541 +
                       ((C361 * C294 -
                         ((C113 * C307 + C31383 * C326) * C287 +
                          (C113 * C297 + C31383 * C308) * C293) +
                         C362 * C288 - C363 * C295 - C364 * C31497) *
                            C31397 * C108 +
                        (C363 * C294 - (C362 * C287 + C361 * C293) +
                         C364 * C288 - C365 * C295 - C366 * C31497) *
                            C31397 * C109 +
                        (C365 * C294 - (C364 * C287 + C363 * C293) +
                         C366 * C288 - (C113 * C300 + C31383 * C314) * C295 -
                         (C113 * C315 + C31383 * C330) * C31497) *
                            C31397 * C110) *
                           C31218 * C31529 +
                       (((C113 * C301 + C31383 * C316) * C293 +
                         (C113 * C317 + C31383 * C331) * C287 - C367 * C294 -
                         C368 * C288 + C369 * C295 + C370 * C31497) *
                            C31397 * C108 +
                        (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                         C371 * C295 + C372 * C31497) *
                            C31397 * C109 +
                        (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                         (C113 * C305 + C31383 * C324) * C295 +
                         (C113 * C325 + C31383 * C335) * C31497) *
                            C31397 * C110) *
                           C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C293 +
                     (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C31497) *
                        C31397 * C108 +
                    (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                     C172 * C295 + C173 * C31497) *
                        C31397 * C109 +
                    (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                     C174 * C295 + C175 * C31497) *
                        C31397 * C110) *
                       C31542 +
                   ((C550 * C294 -
                     ((C113 * C496 + C31383 * C515) * C287 +
                      (C113 * C486 + C31383 * C497) * C293) +
                     C551 * C288 - C552 * C295 - C553 * C31497) *
                        C31397 * C108 +
                    (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                     C554 * C295 - C555 * C31497) *
                        C31397 * C109 +
                    (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                     (C113 * C489 + C31383 * C503) * C295 -
                     (C113 * C504 + C31383 * C519) * C31497) *
                        C31397 * C110) *
                       C31531 +
                   (((C113 * C490 + C31383 * C505) * C293 +
                     (C113 * C506 + C31383 * C520) * C287 - C556 * C294 -
                     C557 * C288 + C558 * C295 + C559 * C31497) *
                        C31397 * C108 +
                    (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
                     C560 * C295 + C561 * C31497) *
                        C31397 * C109 +
                    (C558 * C293 + C559 * C287 - C560 * C294 - C561 * C288 +
                     (C113 * C494 + C31383 * C513) * C295 +
                     (C113 * C514 + C31383 * C524) * C31497) *
                        C31397 * C110) *
                       C31507) *
                  C31206) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C1089 +
                     (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                     C169 * C31525 + C170 * C1091 + C171 * C31497) *
                        C31397 * C108 +
                    (C168 * C1089 + C169 * C31538 - C170 * C1090 -
                     C171 * C31525 + C172 * C1091 + C173 * C31497) *
                        C31397 * C109 +
                    (C170 * C1089 + C171 * C31538 - C172 * C1090 -
                     C173 * C31525 + C174 * C1091 + C175 * C31497) *
                        C31397 * C110) *
                       C31218 * C1086 +
                   ((C361 * C1090 -
                     ((C113 * C307 + C31383 * C326) * C31538 +
                      (C113 * C297 + C31383 * C308) * C1089) +
                     C362 * C31525 - C363 * C1091 - C364 * C31497) *
                        C31397 * C108 +
                    (C363 * C1090 - (C362 * C31538 + C361 * C1089) +
                     C364 * C31525 - C365 * C1091 - C366 * C31497) *
                        C31397 * C109 +
                    (C365 * C1090 - (C364 * C31538 + C363 * C1089) +
                     C366 * C31525 - C678 * C1091 - C679 * C31497) *
                        C31397 * C110) *
                       C31218 * C1087 +
                   (((C113 * C301 + C31383 * C316) * C1089 +
                     (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
                     C368 * C31525 + C369 * C1091 + C370 * C31497) *
                        C31397 * C108 +
                    (C367 * C1089 + C368 * C31538 - C369 * C1090 -
                     C370 * C31525 + C371 * C1091 + C372 * C31497) *
                        C31397 * C109 +
                    (C369 * C1089 + C370 * C31538 - C371 * C1090 -
                     C372 * C31525 + (C113 * C305 + C31383 * C324) * C1091 +
                     (C113 * C325 + C31383 * C335) * C31497) *
                        C31397 * C110) *
                       C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C31397 * C108 +
                    (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                    (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                       C31218 * C1155 -
                   ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                    (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C31397 * C108) *
                       C31218 * C1156 +
                   (((C113 * C301 + C31383 * C316) * C1160 +
                     (C113 * C317 + C31383 * C331) * C31155) *
                        C31397 * C108 +
                    (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                    (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                       C31218 * C1157 -
                   (((C113 * C1167 + C31383 * C1179) * C31155 +
                     (C113 * C1161 + C31383 * C1168) * C1160) *
                        C31397 * C110 +
                    ((C113 * C1169 + C31383 * C1180) * C31155 +
                     (C113 * C1162 + C31383 * C1170) * C1160) *
                        C31397 * C109 +
                    ((C113 * C1171 + C31383 * C1181) * C31155 +
                     (C113 * C1163 + C31383 * C1172) * C1160) *
                        C31397 * C108) *
                       C31218 * C1158 +
                   (((C113 * C1164 + C31383 * C1173) * C1160 +
                     (C113 * C1174 + C31383 * C1182) * C31155) *
                        C31397 * C108 +
                    ((C113 * C1165 + C31383 * C1175) * C1160 +
                     (C113 * C1176 + C31383 * C1183) * C31155) *
                        C31397 * C109 +
                    ((C113 * C1166 + C31383 * C1177) * C1160 +
                     (C113 * C1178 + C31383 * C1184) * C31155) *
                        C31397 * C110) *
                       C31218 * C1159)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1160 +
                      (C113 * C127 + C31383 * C140) * C31155) *
                         C31397 * C108 +
                     (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                     (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                        C31542 -
                    ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                     (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                     ((C113 * C496 + C31383 * C515) * C31155 +
                      (C113 * C486 + C31383 * C497) * C1160) *
                         C31397 * C108) *
                        C31531 +
                    (((C113 * C490 + C31383 * C505) * C1160 +
                      (C113 * C506 + C31383 * C520) * C31155) *
                         C31397 * C108 +
                     (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                     (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                        C31507) *
                       C1086 +
                   ((((C113 * C935 + C31383 * C940) * C1160 +
                      (C113 * C941 + C31383 * C950) * C31155) *
                         C31397 * C108 +
                     (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                     (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                        C31531 -
                    ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                     (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                     ((C113 * C307 + C31383 * C326) * C31155 +
                      (C113 * C297 + C31383 * C308) * C1160) *
                         C31397 * C108) *
                        C31542 -
                    (((C113 * C1304 + C31383 * C1322) * C31155 +
                      (C113 * C1295 + C31383 * C1305) * C1160) *
                         C31397 * C110 +
                     ((C113 * C1306 + C31383 * C1323) * C31155 +
                      (C113 * C1296 + C31383 * C1307) * C1160) *
                         C31397 * C109 +
                     ((C113 * C1308 + C31383 * C1324) * C31155 +
                      (C113 * C1297 + C31383 * C1309) * C1160) *
                         C31397 * C108) *
                        C31507) *
                       C1087 +
                   ((((C113 * C301 + C31383 * C316) * C1160 +
                      (C113 * C317 + C31383 * C331) * C31155) *
                         C31397 * C108 +
                     (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                     (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                        C31542 -
                    (((C113 * C1310 + C31383 * C1325) * C31155 +
                      (C113 * C1298 + C31383 * C1311) * C1160) *
                         C31397 * C110 +
                     ((C113 * C1312 + C31383 * C1326) * C31155 +
                      (C113 * C1299 + C31383 * C1313) * C1160) *
                         C31397 * C109 +
                     ((C113 * C1314 + C31383 * C1327) * C31155 +
                      (C113 * C1300 + C31383 * C1315) * C1160) *
                         C31397 * C108) *
                        C31531 +
                    (((C113 * C1301 + C31383 * C1316) * C1160 +
                      (C113 * C1317 + C31383 * C1328) * C31155) *
                         C31397 * C108 +
                     ((C113 * C1302 + C31383 * C1318) * C1160 +
                      (C113 * C1319 + C31383 * C1329) * C31155) *
                         C31397 * C109 +
                     ((C113 * C1303 + C31383 * C1320) * C1160 +
                      (C113 * C1321 + C31383 * C1330) * C31155) *
                         C31397 * C110) *
                        C31507) *
                       C31504)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C1089 +
                     (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                     C169 * C31525 + C170 * C1091 + C171 * C31497) *
                        C31397 * C108 +
                    (C168 * C1089 + C169 * C31538 - C170 * C1090 -
                     C171 * C31525 + C172 * C1091 + C173 * C31497) *
                        C31397 * C109 +
                    (C170 * C1089 + C171 * C31538 - C172 * C1090 -
                     C173 * C31525 + C174 * C1091 + C175 * C31497) *
                        C31397 * C110) *
                       C1835 +
                   ((C550 * C1090 -
                     ((C113 * C496 + C31383 * C515) * C31538 +
                      (C113 * C486 + C31383 * C497) * C1089) +
                     C551 * C31525 - C552 * C1091 - C553 * C31497) *
                        C31397 * C108 +
                    (C552 * C1090 - (C551 * C31538 + C550 * C1089) +
                     C553 * C31525 - C554 * C1091 - C555 * C31497) *
                        C31397 * C109 +
                    (C554 * C1090 - (C553 * C31538 + C552 * C1089) +
                     C555 * C31525 - C788 * C1091 - C789 * C31497) *
                        C31397 * C110) *
                       C1836 +
                   (((C113 * C490 + C31383 * C505) * C1089 +
                     (C113 * C506 + C31383 * C520) * C31538 - C556 * C1090 -
                     C557 * C31525 + C558 * C1091 + C559 * C31497) *
                        C31397 * C108 +
                    (C556 * C1089 + C557 * C31538 - C558 * C1090 -
                     C559 * C31525 + C560 * C1091 + C561 * C31497) *
                        C31397 * C109 +
                    (C558 * C1089 + C559 * C31538 - C560 * C1090 -
                     C561 * C31525 + (C113 * C494 + C31383 * C513) * C1091 +
                     (C113 * C514 + C31383 * C524) * C31497) *
                        C31397 * C110) *
                       C31507) *
                  C31206) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1160 +
                      (C113 * C127 + C31383 * C140) * C31155) *
                         C31397 * C108 +
                     (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                     (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                        C1835 -
                    ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                     (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                     ((C113 * C496 + C31383 * C515) * C31155 +
                      (C113 * C486 + C31383 * C497) * C1160) *
                         C31397 * C108) *
                        C1836 +
                    (((C113 * C490 + C31383 * C505) * C1160 +
                      (C113 * C506 + C31383 * C520) * C31155) *
                         C31397 * C108 +
                     (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                     (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                        C31507) *
                       C31541 +
                   ((((C113 * C935 + C31383 * C940) * C1160 +
                      (C113 * C941 + C31383 * C950) * C31155) *
                         C31397 * C108 +
                     (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                     (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                        C1836 -
                    ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                     (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                     ((C113 * C307 + C31383 * C326) * C31155 +
                      (C113 * C297 + C31383 * C308) * C1160) *
                         C31397 * C108) *
                        C1835 -
                    (((C113 * C1304 + C31383 * C1322) * C31155 +
                      (C113 * C1295 + C31383 * C1305) * C1160) *
                         C31397 * C110 +
                     ((C113 * C1306 + C31383 * C1323) * C31155 +
                      (C113 * C1296 + C31383 * C1307) * C1160) *
                         C31397 * C109 +
                     ((C113 * C1308 + C31383 * C1324) * C31155 +
                      (C113 * C1297 + C31383 * C1309) * C1160) *
                         C31397 * C108) *
                        C31507) *
                       C31529 +
                   ((((C113 * C301 + C31383 * C316) * C1160 +
                      (C113 * C317 + C31383 * C331) * C31155) *
                         C31397 * C108 +
                     (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                     (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                        C1835 -
                    ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
                     (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
                     ((C113 * C1314 + C31383 * C1327) * C31155 +
                      (C113 * C1300 + C31383 * C1315) * C1160) *
                         C31397 * C108) *
                        C1836 +
                    (((C113 * C1301 + C31383 * C1316) * C1160 +
                      (C113 * C1317 + C31383 * C1328) * C31155) *
                         C31397 * C108 +
                     ((C113 * C1302 + C31383 * C1318) * C1160 +
                      (C113 * C1319 + C31383 * C1329) * C31155) *
                         C31397 * C109 +
                     ((C113 * C1303 + C31383 * C1320) * C1160 +
                      (C113 * C1321 + C31383 * C1330) * C31155) *
                         C31397 * C110) *
                        C31507) *
                       C31504)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C31397 * C108 +
                    (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                    (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                       C2010 -
                   ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                    (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                    ((C113 * C496 + C31383 * C515) * C31155 +
                     (C113 * C486 + C31383 * C497) * C1160) *
                        C31397 * C108) *
                       C2011 +
                   (((C113 * C490 + C31383 * C505) * C1160 +
                     (C113 * C506 + C31383 * C520) * C31155) *
                        C31397 * C108 +
                    (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                    (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                       C2012 -
                   (((C113 * C2021 + C31383 * C2033) * C31155 +
                     (C113 * C2015 + C31383 * C2022) * C1160) *
                        C31397 * C110 +
                    ((C113 * C2023 + C31383 * C2034) * C31155 +
                     (C113 * C2016 + C31383 * C2024) * C1160) *
                        C31397 * C109 +
                    ((C113 * C2025 + C31383 * C2035) * C31155 +
                     (C113 * C2017 + C31383 * C2026) * C1160) *
                        C31397 * C108) *
                       C2013 +
                   (((C113 * C2018 + C31383 * C2027) * C1160 +
                     (C113 * C2028 + C31383 * C2036) * C31155) *
                        C31397 * C108 +
                    ((C113 * C2019 + C31383 * C2029) * C1160 +
                     (C113 * C2030 + C31383 * C2037) * C31155) *
                        C31397 * C109 +
                    ((C113 * C2020 + C31383 * C2031) * C1160 +
                     (C113 * C2032 + C31383 * C2038) * C31155) *
                        C31397 * C110) *
                       C2014) *
                  C31206) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  ((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                    C4765 * C301 + C4761 * C316) *
                       C114 +
                   (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                    C4765 * C317 + C4761 * C331) *
                       C102 -
                   (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                    C4763 * C120 + C4759 * C128) *
                       C115 -
                   (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                    C4763 * C129 + C4759 * C141) *
                       C103 +
                   (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                    C4765 * C303 + C4761 * C320) *
                       C116 +
                   (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                    C4765 * C321 + C4761 * C333) *
                       C104 -
                   (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
                    C4763 * C122 + C4759 * C132) *
                       C117 -
                   (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
                    C4763 * C133 + C4759 * C143) *
                       C105 +
                   (C4763 * C123 + C4759 * C134 + C4764 * C300 + C4760 * C314 +
                    C4765 * C305 + C4761 * C324) *
                       C118 +
                   (C4763 * C135 + C4759 * C144 + C4764 * C315 + C4760 * C330 +
                    C4765 * C325 + C4761 * C335) *
                       C106) *
                  C31397 * C31184 * C31218 * C31206) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C293 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C287 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C294 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C288 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C295 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31541 +
                   ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                     C4765 * C1162 + C4761 * C1170) *
                        C294 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C287 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C293) +
                    (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                     C4765 * C1169 + C4761 * C1180) *
                        C288 -
                    (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                     C4760 * C320 + C4763 * C298 + C4759 * C310) *
                        C295 -
                    (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                     C4760 * C333 + C4763 * C311 + C4759 * C328) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31529 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C293 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C287 -
                    (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                     C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                        C294 -
                    (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                     C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                        C288 +
                    (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                     C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                        C295 +
                    (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                     C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C293 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C287 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C294 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C288 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C295 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C31542 +
                   ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
                     C4765 * C1299 + C4761 * C1313) *
                        C294 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C287 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C293) +
                    (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
                     C4765 * C1312 + C4761 * C1326) *
                        C288 -
                    (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                     C4760 * C944 + C4763 * C487 + C4759 * C499) *
                        C295 -
                    (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                     C4760 * C952 + C4763 * C500 + C4759 * C517) *
                        C31497) *
                       C31397 * C31184 * C31531 +
                   ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                     C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                        C293 +
                    (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                     C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                        C287 -
                    (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 +
                     C4760 * C1307 + C4763 * C491 + C4759 * C507) *
                        C294 -
                    (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 +
                     C4760 * C1323 + C4763 * C508 + C4759 * C521) *
                        C288 +
                    (C4763 * C492 + C4759 * C509 + C4764 * C1295 +
                     C4760 * C1305 + C4765 * C1303 + C4761 * C1320) *
                        C295 +
                    (C4763 * C510 + C4759 * C522 + C4764 * C1304 +
                     C4760 * C1322 + C4765 * C1321 + C4761 * C1330) *
                        C31497) *
                       C31397 * C31184 * C31507) *
                  C31206) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1089 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31538 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C1090 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C31525 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C1091 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C31218 * C1086 +
                   ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                     C4765 * C1162 + C4761 * C1170) *
                        C1090 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31538 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1089) +
                    (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                     C4765 * C1169 + C4761 * C1180) *
                        C31525 -
                    (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                     C4760 * C320 + C4763 * C298 + C4759 * C310) *
                        C1091 -
                    (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                     C4760 * C333 + C4763 * C311 + C4759 * C328) *
                        C31497) *
                       C31397 * C31184 * C31218 * C1087 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C1089 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31538 -
                    (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                     C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                        C1090 -
                    (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                     C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                        C31525 +
                    (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                     C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                        C1091 +
                    (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                     C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1160 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31155) *
                       C31397 * C31184 * C31218 * C1155 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C31155 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C1160) *
                       C31397 * C31184 * C31218 * C1156 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C1160 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31155) *
                       C31397 * C31184 * C31218 * C1157 -
                   ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 +
                     C4760 * C1182 + C4763 * C1171 + C4759 * C1181) *
                        C31155 +
                    (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 +
                     C4760 * C1173 + C4763 * C1163 + C4759 * C1172) *
                        C1160) *
                       C31397 * C31184 * C31218 * C1158 +
                   ((C4763 * C1164 + C4759 * C1173 + C4764 * C5500 +
                     C4760 * C5503 + C4765 * C5501 + C4761 * C5504) *
                        C1160 +
                    (C4763 * C1174 + C4759 * C1182 + C4764 * C5502 +
                     C4760 * C5506 + C4765 * C5505 + C4761 * C5507) *
                        C31155) *
                       C31397 * C31184 * C31218 * C1159)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1160 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31155) *
                        C31397 * C31184 * C31542 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31155 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1160) *
                        C31397 * C31184 * C31531 +
                    ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                      C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                         C1160 +
                     (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                      C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                         C31155) *
                        C31397 * C31184 * C31507) *
                       C1086 +
                   (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1160 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31155) *
                        C31397 * C31184 * C31531 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31155 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1160) *
                        C31397 * C31184 * C31542 -
                    ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 +
                      C4760 * C1328 + C4763 * C1308 + C4759 * C1324) *
                         C31155 +
                     (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 +
                      C4760 * C1316 + C4763 * C1297 + C4759 * C1309) *
                         C1160) *
                        C31397 * C31184 * C31507) *
                       C1087 +
                   (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                      C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                         C1160 +
                     (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                      C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                         C31155) *
                        C31397 * C31184 * C31542 -
                    ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                      C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                         C31155 +
                     (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                      C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                         C1160) *
                        C31397 * C31184 * C31531 +
                    ((C4763 * C1301 + C4759 * C1316 + C4764 * C5618 +
                      C4760 * C5622 + C4765 * C5620 + C4761 * C5625) *
                         C1160 +
                     (C4763 * C1317 + C4759 * C1328 + C4764 * C5621 +
                      C4760 * C5627 + C4765 * C5626 + C4761 * C5629) *
                         C31155) *
                        C31397 * C31184 * C31507) *
                       C31504)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1089 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31538 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C1090 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C31525 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C1091 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C1835 +
                   ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
                     C4765 * C1299 + C4761 * C1313) *
                        C1090 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31538 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1089) +
                    (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
                     C4765 * C1312 + C4761 * C1326) *
                        C31525 -
                    (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                     C4760 * C944 + C4763 * C487 + C4759 * C499) *
                        C1091 -
                    (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                     C4760 * C952 + C4763 * C500 + C4759 * C517) *
                        C31497) *
                       C31397 * C31184 * C1836 +
                   ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                     C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                        C1089 +
                    (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                     C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                        C31538 -
                    (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 +
                     C4760 * C1307 + C4763 * C491 + C4759 * C507) *
                        C1090 -
                    (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 +
                     C4760 * C1323 + C4763 * C508 + C4759 * C521) *
                        C31525 +
                    (C4763 * C492 + C4759 * C509 + C4764 * C1295 +
                     C4760 * C1305 + C4765 * C1303 + C4761 * C1320) *
                        C1091 +
                    (C4763 * C510 + C4759 * C522 + C4764 * C1304 +
                     C4760 * C1322 + C4765 * C1321 + C4761 * C1330) *
                        C31497) *
                       C31397 * C31184 * C31507) *
                  C31206) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1160 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31155) *
                        C31397 * C31184 * C1835 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31155 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1160) *
                        C31397 * C31184 * C1836 +
                    ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                      C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                         C1160 +
                     (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                      C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                         C31155) *
                        C31397 * C31184 * C31507) *
                       C31541 +
                   (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1160 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31155) *
                        C31397 * C31184 * C1836 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31155 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1160) *
                        C31397 * C31184 * C1835 -
                    ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 +
                      C4760 * C1328 + C4763 * C1308 + C4759 * C1324) *
                         C31155 +
                     (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 +
                      C4760 * C1316 + C4763 * C1297 + C4759 * C1309) *
                         C1160) *
                        C31397 * C31184 * C31507) *
                       C31529 +
                   (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                      C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                         C1160 +
                     (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                      C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                         C31155) *
                        C31397 * C31184 * C1835 -
                    ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                      C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                         C31155 +
                     (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                      C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                         C1160) *
                        C31397 * C31184 * C1836 +
                    ((C4763 * C1301 + C4759 * C1316 + C4764 * C5618 +
                      C4760 * C5622 + C4765 * C5620 + C4761 * C5625) *
                         C1160 +
                     (C4763 * C1317 + C4759 * C1328 + C4764 * C5621 +
                      C4760 * C5627 + C4765 * C5626 + C4761 * C5629) *
                         C31155) *
                        C31397 * C31184 * C31507) *
                       C31504)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1160 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31155) *
                       C31397 * C31184 * C2010 -
                   ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                     C4760 * C950 + C4763 * C496 + C4759 * C515) *
                        C31155 +
                    (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                     C4760 * C940 + C4763 * C486 + C4759 * C497) *
                        C1160) *
                       C31397 * C31184 * C2011 +
                   ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                     C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                        C1160 +
                    (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                     C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                        C31155) *
                       C31397 * C31184 * C2012 -
                   ((C4765 * C6269 + C4761 * C6275 + C4764 * C2421 +
                     C4760 * C2426 + C4763 * C2025 + C4759 * C2035) *
                        C31155 +
                    (C4765 * C6266 + C4761 * C6270 + C4764 * C2417 +
                     C4760 * C2420 + C4763 * C2017 + C4759 * C2026) *
                        C1160) *
                       C31397 * C31184 * C2013 +
                   ((C4763 * C2018 + C4759 * C2027 + C4764 * C6267 +
                     C4760 * C6271 + C4765 * C6268 + C4761 * C6272) *
                        C1160 +
                    (C4763 * C2028 + C4759 * C2036 + C4764 * C6273 +
                     C4760 * C6276 + C4765 * C6274 + C4761 * C6277) *
                        C31155) *
                       C31397 * C31184 * C2014) *
                  C31206) /
                     (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
                C31397 * C110) *
               C31476 +
           ((C550 * C30255 -
             ((C113 * C496 + C31383 * C515) * C31457 +
              (C113 * C486 + C31383 * C497) * C30274) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C30255 - (C551 * C31457 + C550 * C30274) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C30255 - (C553 * C31457 + C552 * C30274) + C555 * C31165) *
                C31397 * C110) *
               C31305) *
              C1086 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C30255 - (C364 * C31457 + C363 * C30274) + C366 * C31165) *
                C31397 * C110) *
               C31476 +
           (((C113 * C935 + C31383 * C940) * C30274 +
             (C113 * C941 + C31383 * C950) * C31457 - C968 * C30255 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C30274 + C969 * C31457 - C970 * C30255 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C30274 + C971 * C31457 - C972 * C30255 - C973 * C31165) *
                C31397 * C110) *
               C31305) *
              C1087 +
          ((((C113 * C301 + C31383 * C316) * C30274 +
             (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
             C368 * C31165) *
                C31397 * C108 +
            (C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
                C31397 * C109 +
            (C369 * C30274 + C370 * C31457 - C371 * C30255 - C372 * C31165) *
                C31397 * C110) *
               C31476 +
           ((C1612 * C30255 -
             ((C113 * C1314 + C31383 * C1327) * C31457 +
              (C113 * C1300 + C31383 * C1315) * C30274) +
             C1613 * C31165) *
                C31397 * C108 +
            (C1614 * C30255 - (C1613 * C31457 + C1612 * C30274) +
             C1615 * C31165) *
                C31397 * C109 +
            ((C113 * C1599 + C31383 * C1600) * C30255 -
             (C1615 * C31457 + C1614 * C30274) +
             (C113 * C1601 + C31383 * C1602) * C31165) *
                C31397 * C110) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C665 +
            (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
               C31397 * C108 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31508) *
               C31397 * C109 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31508) *
               C31397 * C110) *
              C31476 +
          ((C550 * C666 -
            ((C113 * C496 + C31383 * C515) * C659 +
             (C113 * C486 + C31383 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C31508) *
               C31397 * C108 +
           (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
            C554 * C667 - C555 * C661 + C788 * C668 + C789 * C31508) *
               C31397 * C109 +
           (C554 * C666 - (C553 * C659 + C552 * C665) + C555 * C660 -
            C788 * C667 - C789 * C661 + (C113 * C779 + C31383 * C780) * C668 +
            (C113 * C781 + C31383 * C782) * C31508) *
               C31397 * C110) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C30274 +
            (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
            C169 * C31165) *
               C31397 * C108 +
           (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
               C31397 * C109 +
           (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
               C31397 * C110) *
              C2299 +
          ((C550 * C30255 -
            ((C113 * C496 + C31383 * C515) * C31457 +
             (C113 * C486 + C31383 * C497) * C30274) +
            C551 * C31165) *
               C31397 * C108 +
           (C552 * C30255 - (C551 * C31457 + C550 * C30274) + C553 * C31165) *
               C31397 * C109 +
           (C554 * C30255 - (C553 * C31457 + C552 * C30274) + C555 * C31165) *
               C31397 * C110) *
              C2300 +
          (((C113 * C490 + C31383 * C505) * C30274 +
            (C113 * C506 + C31383 * C520) * C31457 - C556 * C30255 -
            C557 * C31165) *
               C31397 * C108 +
           (C556 * C30274 + C557 * C31457 - C558 * C30255 - C559 * C31165) *
               C31397 * C109 +
           (C558 * C30274 + C559 * C31457 - C560 * C30255 - C561 * C31165) *
               C31397 * C110) *
              C2301 +
          ((C2316 * C30255 -
            ((C113 * C2025 + C31383 * C2035) * C31457 +
             (C113 * C2017 + C31383 * C2026) * C30274) +
            C2317 * C31165) *
               C31397 * C108 +
           (C2318 * C30255 - (C2317 * C31457 + C2316 * C30274) +
            C2319 * C31165) *
               C31397 * C109 +
           ((C113 * C2303 + C31383 * C2304) * C30255 -
            (C2319 * C31457 + C2318 * C30274) +
            (C113 * C2305 + C31383 * C2306) * C31165) *
               C31397 * C110) *
              C31520) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C665 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C659 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C666 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C660 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C667 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C661 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C668 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C31476 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C666 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C659 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C665) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C660 -
           (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
            C4763 * C487 + C4759 * C499) *
               C667 -
           (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
            C4763 * C500 + C4759 * C517) *
               C661 +
           (C4763 * C488 + C4759 * C501 + C4764 * C938 + C4760 * C946 +
            C4765 * C1599 + C4761 * C1600) *
               C668 +
           (C4763 * C502 + C4759 * C518 + C4764 * C947 + C4760 * C953 +
            C4765 * C1601 + C4761 * C1602) *
               C31508) *
              C31397 * C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C30274 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31457 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C30255 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C30255 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31457 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C30274) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31305) *
              C1086 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C30255 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31457 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C30274) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C30274 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31457 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C30255 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31305) *
              C1087 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C30274 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C31457 -
            (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
             C4763 * C302 + C4759 * C318) *
                C30255 -
            (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
             C4763 * C319 + C4759 * C332) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C1299 + C4759 * C1313 + C4764 * C1714 + C4760 * C1718 +
             C4765 * C5878 + C4761 * C5879) *
                C30255 -
            ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
              C4763 * C1314 + C4759 * C1327) *
                 C31457 +
             (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
              C4763 * C1300 + C4759 * C1315) *
                 C30274) +
            (C4763 * C1312 + C4759 * C1326 + C4764 * C1719 + C4760 * C1723 +
             C4765 * C5880 + C4761 * C5881) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C30274 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31457 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C30255 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31165) *
              C31397 * C31184 * C2299 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C30255 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31457 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C30274) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C31165) *
              C31397 * C31184 * C2300 +
          ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
            C4765 * C1301 + C4761 * C1316) *
               C30274 +
           (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
            C4765 * C1317 + C4761 * C1328) *
               C31457 -
           (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
            C4763 * C491 + C4759 * C507) *
               C30255 -
           (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
            C4763 * C508 + C4759 * C521) *
               C31165) *
              C31397 * C31184 * C2301 +
          ((C4763 * C2016 + C4759 * C2024 + C4764 * C2418 + C4760 * C2422 +
            C4765 * C6526 + C4761 * C6527) *
               C30255 -
           ((C4765 * C6269 + C4761 * C6275 + C4764 * C2421 + C4760 * C2426 +
             C4763 * C2025 + C4759 * C2035) *
                C31457 +
            (C4765 * C6266 + C4761 * C6270 + C4764 * C2417 + C4760 * C2420 +
             C4763 * C2017 + C4759 * C2026) *
                C30274) +
           (C4763 * C2023 + C4759 * C2034 + C4764 * C2423 + C4760 * C2427 +
            C4765 * C6528 + C4761 * C6529) *
               C31165) *
              C31397 * C31184 * C31520) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[114] += (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C293 +
                     (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C31497) *
                        C31397 * C108 +
                    (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                     C172 * C295 + C173 * C31497) *
                        C31397 * C109 +
                    (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                     C174 * C295 + C175 * C31497) *
                        C31397 * C110) *
                       C31218 * C31541 +
                   ((C361 * C294 -
                     ((C113 * C307 + C31383 * C326) * C287 +
                      (C113 * C297 + C31383 * C308) * C293) +
                     C362 * C288 - C363 * C295 - C364 * C31497) *
                        C31397 * C108 +
                    (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                     C365 * C295 - C366 * C31497) *
                        C31397 * C109 +
                    (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                     (C113 * C300 + C31383 * C314) * C295 -
                     (C113 * C315 + C31383 * C330) * C31497) *
                        C31397 * C110) *
                       C31218 * C31529 +
                   (((C113 * C301 + C31383 * C316) * C293 +
                     (C113 * C317 + C31383 * C331) * C287 - C367 * C294 -
                     C368 * C288 + C369 * C295 + C370 * C31497) *
                        C31397 * C108 +
                    (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                     C371 * C295 + C372 * C31497) *
                        C31397 * C109 +
                    (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                     (C113 * C305 + C31383 * C324) * C295 +
                     (C113 * C325 + C31383 * C335) * C31497) *
                        C31397 * C110) *
                       C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C31383 * C126) * C114 +
                    (C113 * C127 + C31383 * C140) * C102 - C168 * C115 -
                    C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                    C173 * C105 + C174 * C118 + C175 * C106) *
                       C31397 * C108 +
                   (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                    C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                    C176 * C118 + C177 * C106) *
                       C31397 * C109 +
                   (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                    C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                    (C113 * C125 + C31383 * C138) * C118 +
                    (C113 * C139 + C31383 * C146) * C106) *
                       C31397 * C110) *
                  C31218 * C31206) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C1089 +
                     (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                     C169 * C31525 + C170 * C1091 + C171 * C31497) *
                        C31397 * C108 +
                    (C168 * C1089 + C169 * C31538 - C170 * C1090 -
                     C171 * C31525 + C172 * C1091 + C173 * C31497) *
                        C31397 * C109 +
                    (C170 * C1089 + C171 * C31538 - C172 * C1090 -
                     C173 * C31525 + C174 * C1091 + C175 * C31497) *
                        C31397 * C110) *
                       C31218 * C1086 +
                   ((C361 * C1090 -
                     ((C113 * C307 + C31383 * C326) * C31538 +
                      (C113 * C297 + C31383 * C308) * C1089) +
                     C362 * C31525 - C363 * C1091 - C364 * C31497) *
                        C31397 * C108 +
                    (C363 * C1090 - (C362 * C31538 + C361 * C1089) +
                     C364 * C31525 - C365 * C1091 - C366 * C31497) *
                        C31397 * C109 +
                    (C365 * C1090 - (C364 * C31538 + C363 * C1089) +
                     C366 * C31525 - C678 * C1091 - C679 * C31497) *
                        C31397 * C110) *
                       C31218 * C1087 +
                   (((C113 * C301 + C31383 * C316) * C1089 +
                     (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
                     C368 * C31525 + C369 * C1091 + C370 * C31497) *
                        C31397 * C108 +
                    (C367 * C1089 + C368 * C31538 - C369 * C1090 -
                     C370 * C31525 + C371 * C1091 + C372 * C31497) *
                        C31397 * C109 +
                    (C369 * C1089 + C370 * C31538 - C371 * C1090 -
                     C372 * C31525 + (C113 * C305 + C31383 * C324) * C1091 +
                     (C113 * C325 + C31383 * C335) * C31497) *
                        C31397 * C110) *
                       C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C31397 * C108 +
                    (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                    (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                       C31218 * C1155 -
                   ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                    (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C31397 * C108) *
                       C31218 * C1156 +
                   (((C113 * C301 + C31383 * C316) * C1160 +
                     (C113 * C317 + C31383 * C331) * C31155) *
                        C31397 * C108 +
                    (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                    (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                       C31218 * C1157 -
                   (((C113 * C1167 + C31383 * C1179) * C31155 +
                     (C113 * C1161 + C31383 * C1168) * C1160) *
                        C31397 * C110 +
                    ((C113 * C1169 + C31383 * C1180) * C31155 +
                     (C113 * C1162 + C31383 * C1170) * C1160) *
                        C31397 * C109 +
                    ((C113 * C1171 + C31383 * C1181) * C31155 +
                     (C113 * C1163 + C31383 * C1172) * C1160) *
                        C31397 * C108) *
                       C31218 * C1158 +
                   (((C113 * C1164 + C31383 * C1173) * C1160 +
                     (C113 * C1174 + C31383 * C1182) * C31155) *
                        C31397 * C108 +
                    ((C113 * C1165 + C31383 * C1175) * C1160 +
                     (C113 * C1176 + C31383 * C1183) * C31155) *
                        C31397 * C109 +
                    ((C113 * C1166 + C31383 * C1177) * C1160 +
                     (C113 * C1178 + C31383 * C1184) * C31155) *
                        C31397 * C110) *
                       C31218 * C1159)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C1089 +
                     (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                     C169 * C31525 + C170 * C1091 + C171 * C31497) *
                        C31397 * C108 +
                    (C168 * C1089 + C169 * C31538 - C170 * C1090 -
                     C171 * C31525 + C172 * C1091 + C173 * C31497) *
                        C31397 * C109 +
                    (C170 * C1089 + C171 * C31538 - C172 * C1090 -
                     C173 * C31525 + C174 * C1091 + C175 * C31497) *
                        C31397 * C110) *
                       C1835 +
                   ((C550 * C1090 -
                     ((C113 * C496 + C31383 * C515) * C31538 +
                      (C113 * C486 + C31383 * C497) * C1089) +
                     C551 * C31525 - C552 * C1091 - C553 * C31497) *
                        C31397 * C108 +
                    (C552 * C1090 - (C551 * C31538 + C550 * C1089) +
                     C553 * C31525 - C554 * C1091 - C555 * C31497) *
                        C31397 * C109 +
                    (C554 * C1090 - (C553 * C31538 + C552 * C1089) +
                     C555 * C31525 - C788 * C1091 - C789 * C31497) *
                        C31397 * C110) *
                       C1836 +
                   (((C113 * C490 + C31383 * C505) * C1089 +
                     (C113 * C506 + C31383 * C520) * C31538 - C556 * C1090 -
                     C557 * C31525 + C558 * C1091 + C559 * C31497) *
                        C31397 * C108 +
                    (C556 * C1089 + C557 * C31538 - C558 * C1090 -
                     C559 * C31525 + C560 * C1091 + C561 * C31497) *
                        C31397 * C109 +
                    (C558 * C1089 + C559 * C31538 - C560 * C1090 -
                     C561 * C31525 + (C113 * C494 + C31383 * C513) * C1091 +
                     (C113 * C514 + C31383 * C524) * C31497) *
                        C31397 * C110) *
                       C31507) *
                  C31206) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1160 +
                      (C113 * C127 + C31383 * C140) * C31155) *
                         C31397 * C108 +
                     (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                     (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                        C1835 -
                    ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                     (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                     ((C113 * C496 + C31383 * C515) * C31155 +
                      (C113 * C486 + C31383 * C497) * C1160) *
                         C31397 * C108) *
                        C1836 +
                    (((C113 * C490 + C31383 * C505) * C1160 +
                      (C113 * C506 + C31383 * C520) * C31155) *
                         C31397 * C108 +
                     (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                     (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                        C31507) *
                       C31541 +
                   ((((C113 * C935 + C31383 * C940) * C1160 +
                      (C113 * C941 + C31383 * C950) * C31155) *
                         C31397 * C108 +
                     (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                     (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                        C1836 -
                    ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                     (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                     ((C113 * C307 + C31383 * C326) * C31155 +
                      (C113 * C297 + C31383 * C308) * C1160) *
                         C31397 * C108) *
                        C1835 -
                    (((C113 * C1304 + C31383 * C1322) * C31155 +
                      (C113 * C1295 + C31383 * C1305) * C1160) *
                         C31397 * C110 +
                     ((C113 * C1306 + C31383 * C1323) * C31155 +
                      (C113 * C1296 + C31383 * C1307) * C1160) *
                         C31397 * C109 +
                     ((C113 * C1308 + C31383 * C1324) * C31155 +
                      (C113 * C1297 + C31383 * C1309) * C1160) *
                         C31397 * C108) *
                        C31507) *
                       C31529 +
                   ((((C113 * C301 + C31383 * C316) * C1160 +
                      (C113 * C317 + C31383 * C331) * C31155) *
                         C31397 * C108 +
                     (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                     (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                        C1835 -
                    ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
                     (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
                     ((C113 * C1314 + C31383 * C1327) * C31155 +
                      (C113 * C1300 + C31383 * C1315) * C1160) *
                         C31397 * C108) *
                        C1836 +
                    (((C113 * C1301 + C31383 * C1316) * C1160 +
                      (C113 * C1317 + C31383 * C1328) * C31155) *
                         C31397 * C108 +
                     ((C113 * C1302 + C31383 * C1318) * C1160 +
                      (C113 * C1319 + C31383 * C1329) * C31155) *
                         C31397 * C109 +
                     ((C113 * C1303 + C31383 * C1320) * C1160 +
                      (C113 * C1321 + C31383 * C1330) * C31155) *
                         C31397 * C110) *
                        C31507) *
                       C31504)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                    C4765 * C301 + C4761 * C316) *
                       C114 +
                   (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                    C4765 * C317 + C4761 * C331) *
                       C102 -
                   (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                    C4763 * C120 + C4759 * C128) *
                       C115 -
                   (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                    C4763 * C129 + C4759 * C141) *
                       C103 +
                   (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                    C4765 * C303 + C4761 * C320) *
                       C116 +
                   (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                    C4765 * C321 + C4761 * C333) *
                       C104 -
                   (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
                    C4763 * C122 + C4759 * C132) *
                       C117 -
                   (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
                    C4763 * C133 + C4759 * C143) *
                       C105 +
                   (C4763 * C123 + C4759 * C134 + C4764 * C300 + C4760 * C314 +
                    C4765 * C305 + C4761 * C324) *
                       C118 +
                   (C4763 * C135 + C4759 * C144 + C4764 * C315 + C4760 * C330 +
                    C4765 * C325 + C4761 * C335) *
                       C106) *
                  C31397 * C31184 * C31218 * C31206) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C293 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C287 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C294 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C288 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C295 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31541 +
                   ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                     C4765 * C1162 + C4761 * C1170) *
                        C294 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C287 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C293) +
                    (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                     C4765 * C1169 + C4761 * C1180) *
                        C288 -
                    (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                     C4760 * C320 + C4763 * C298 + C4759 * C310) *
                        C295 -
                    (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                     C4760 * C333 + C4763 * C311 + C4759 * C328) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31529 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C293 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C287 -
                    (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                     C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                        C294 -
                    (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                     C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                        C288 +
                    (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                     C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                        C295 +
                    (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                     C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1089 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31538 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C1090 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C31525 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C1091 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C31218 * C1086 +
                   ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                     C4765 * C1162 + C4761 * C1170) *
                        C1090 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31538 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1089) +
                    (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                     C4765 * C1169 + C4761 * C1180) *
                        C31525 -
                    (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                     C4760 * C320 + C4763 * C298 + C4759 * C310) *
                        C1091 -
                    (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                     C4760 * C333 + C4763 * C311 + C4759 * C328) *
                        C31497) *
                       C31397 * C31184 * C31218 * C1087 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C1089 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31538 -
                    (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                     C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                        C1090 -
                    (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                     C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                        C31525 +
                    (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                     C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                        C1091 +
                    (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                     C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1160 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31155) *
                       C31397 * C31184 * C31218 * C1155 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C31155 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C1160) *
                       C31397 * C31184 * C31218 * C1156 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C1160 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31155) *
                       C31397 * C31184 * C31218 * C1157 -
                   ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 +
                     C4760 * C1182 + C4763 * C1171 + C4759 * C1181) *
                        C31155 +
                    (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 +
                     C4760 * C1173 + C4763 * C1163 + C4759 * C1172) *
                        C1160) *
                       C31397 * C31184 * C31218 * C1158 +
                   ((C4763 * C1164 + C4759 * C1173 + C4764 * C5500 +
                     C4760 * C5503 + C4765 * C5501 + C4761 * C5504) *
                        C1160 +
                    (C4763 * C1174 + C4759 * C1182 + C4764 * C5502 +
                     C4760 * C5506 + C4765 * C5505 + C4761 * C5507) *
                        C31155) *
                       C31397 * C31184 * C31218 * C1159)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1089 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31538 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C1090 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C31525 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C1091 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C1835 +
                   ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
                     C4765 * C1299 + C4761 * C1313) *
                        C1090 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31538 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1089) +
                    (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
                     C4765 * C1312 + C4761 * C1326) *
                        C31525 -
                    (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                     C4760 * C944 + C4763 * C487 + C4759 * C499) *
                        C1091 -
                    (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                     C4760 * C952 + C4763 * C500 + C4759 * C517) *
                        C31497) *
                       C31397 * C31184 * C1836 +
                   ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                     C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                        C1089 +
                    (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                     C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                        C31538 -
                    (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 +
                     C4760 * C1307 + C4763 * C491 + C4759 * C507) *
                        C1090 -
                    (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 +
                     C4760 * C1323 + C4763 * C508 + C4759 * C521) *
                        C31525 +
                    (C4763 * C492 + C4759 * C509 + C4764 * C1295 +
                     C4760 * C1305 + C4765 * C1303 + C4761 * C1320) *
                        C1091 +
                    (C4763 * C510 + C4759 * C522 + C4764 * C1304 +
                     C4760 * C1322 + C4765 * C1321 + C4761 * C1330) *
                        C31497) *
                       C31397 * C31184 * C31507) *
                  C31206) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1160 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31155) *
                        C31397 * C31184 * C1835 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31155 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1160) *
                        C31397 * C31184 * C1836 +
                    ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                      C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                         C1160 +
                     (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                      C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                         C31155) *
                        C31397 * C31184 * C31507) *
                       C31541 +
                   (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1160 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31155) *
                        C31397 * C31184 * C1836 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31155 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1160) *
                        C31397 * C31184 * C1835 -
                    ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 +
                      C4760 * C1328 + C4763 * C1308 + C4759 * C1324) *
                         C31155 +
                     (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 +
                      C4760 * C1316 + C4763 * C1297 + C4759 * C1309) *
                         C1160) *
                        C31397 * C31184 * C31507) *
                       C31529 +
                   (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                      C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                         C1160 +
                     (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                      C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                         C31155) *
                        C31397 * C31184 * C1835 -
                    ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                      C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                         C31155 +
                     (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                      C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                         C1160) *
                        C31397 * C31184 * C1836 +
                    ((C4763 * C1301 + C4759 * C1316 + C4764 * C5618 +
                      C4760 * C5622 + C4765 * C5620 + C4761 * C5625) *
                         C1160 +
                     (C4763 * C1317 + C4759 * C1328 + C4764 * C5621 +
                      C4760 * C5627 + C4765 * C5626 + C4761 * C5629) *
                         C31155) *
                        C31397 * C31184 * C31507) *
                       C31504)) /
                     (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C30284 +
                      (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
                      C169 * C31168 + C170 * C30290 + C171 * C2901) *
                         C31397 * C108 +
                     (C168 * C30284 + C169 * C31160 - C170 * C30280 -
                      C171 * C31168 + C172 * C30290 + C173 * C2901) *
                         C31397 * C109 +
                     (C170 * C30284 + C171 * C31160 - C172 * C30280 -
                      C173 * C31168 + C174 * C30290 + C175 * C2901) *
                         C31397 * C110) *
                        C3298 +
                    ((C550 * C30280 -
                      ((C113 * C496 + C31383 * C515) * C31160 +
                       (C113 * C486 + C31383 * C497) * C30284) +
                      C551 * C31168 - C552 * C30290 - C553 * C2901) *
                         C31397 * C108 +
                     (C552 * C30280 - (C551 * C31160 + C550 * C30284) +
                      C553 * C31168 - C554 * C30290 - C555 * C2901) *
                         C31397 * C109 +
                     (C554 * C30280 - (C553 * C31160 + C552 * C30284) +
                      C555 * C31168 - C788 * C30290 - C789 * C2901) *
                         C31397 * C110) *
                        C31305) *
                       C31475 +
                   (((C361 * C30280 -
                      ((C113 * C307 + C31383 * C326) * C31160 +
                       (C113 * C297 + C31383 * C308) * C30284) +
                      C362 * C31168 - C363 * C30290 - C364 * C2901) *
                         C31397 * C108 +
                     (C363 * C30280 - (C362 * C31160 + C361 * C30284) +
                      C364 * C31168 - C365 * C30290 - C366 * C2901) *
                         C31397 * C109 +
                     (C365 * C30280 - (C364 * C31160 + C363 * C30284) +
                      C366 * C31168 - C678 * C30290 - C679 * C2901) *
                         C31397 * C110) *
                        C3298 +
                    (((C113 * C935 + C31383 * C940) * C30284 +
                      (C113 * C941 + C31383 * C950) * C31160 - C968 * C30280 -
                      C969 * C31168 + C970 * C30290 + C971 * C2901) *
                         C31397 * C108 +
                     (C968 * C30284 + C969 * C31160 - C970 * C30280 -
                      C971 * C31168 + C972 * C30290 + C973 * C2901) *
                         C31397 * C109 +
                     (C970 * C30284 + C971 * C31160 - C972 * C30280 -
                      C973 * C31168 + (C113 * C939 + C31383 * C948) * C30290 +
                      (C113 * C949 + C31383 * C954) * C2901) *
                         C31397 * C110) *
                        C31305) *
                       C31265)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C30284 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31160 -
                     (C4765 * C302 + C4761 * C318 + C4764 * C296 +
                      C4760 * C306 + C4763 * C120 + C4759 * C128) *
                         C30280 -
                     (C4765 * C319 + C4761 * C332 + C4764 * C309 +
                      C4760 * C327 + C4763 * C129 + C4759 * C141) *
                         C31168 +
                     (C4763 * C121 + C4759 * C130 + C4764 * C298 +
                      C4760 * C310 + C4765 * C303 + C4761 * C320) *
                         C30290 +
                     (C4763 * C131 + C4759 * C142 + C4764 * C311 +
                      C4760 * C328 + C4765 * C321 + C4761 * C333) *
                         C2901) *
                        C31397 * C31184 * C3298 +
                    ((C4763 * C485 + C4759 * C495 + C4764 * C936 +
                      C4760 * C942 + C4765 * C1299 + C4761 * C1313) *
                         C30280 -
                     ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                       C4760 * C950 + C4763 * C496 + C4759 * C515) *
                          C31160 +
                      (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                       C4760 * C940 + C4763 * C486 + C4759 * C497) *
                          C30284) +
                     (C4763 * C498 + C4759 * C516 + C4764 * C943 +
                      C4760 * C951 + C4765 * C1312 + C4761 * C1326) *
                         C31168 -
                     (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                      C4760 * C944 + C4763 * C487 + C4759 * C499) *
                         C30290 -
                     (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                      C4760 * C952 + C4763 * C500 + C4759 * C517) *
                         C2901) *
                        C31397 * C31184 * C31305) *
                       C31475 +
                   (((C4763 * C296 + C4759 * C306 + C4764 * C302 +
                      C4760 * C318 + C4765 * C1162 + C4761 * C1170) *
                         C30280 -
                     ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                       C4760 * C331 + C4763 * C307 + C4759 * C326) *
                          C31160 +
                      (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                       C4760 * C316 + C4763 * C297 + C4759 * C308) *
                          C30284) +
                     (C4763 * C309 + C4759 * C327 + C4764 * C319 +
                      C4760 * C332 + C4765 * C1169 + C4761 * C1180) *
                         C31168 -
                     (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                      C4760 * C320 + C4763 * C298 + C4759 * C310) *
                         C30290 -
                     (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                      C4760 * C333 + C4763 * C311 + C4759 * C328) *
                         C2901) *
                        C31397 * C31184 * C3298 +
                    ((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C30284 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31160 -
                     (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 +
                      C4760 * C1313 + C4763 * C936 + C4759 * C942) *
                         C30280 -
                     (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 +
                      C4760 * C1326 + C4763 * C943 + C4759 * C951) *
                         C31168 +
                     (C4763 * C937 + C4759 * C944 + C4764 * C1298 +
                      C4760 * C1311 + C4765 * C1715 + C4761 * C1720) *
                         C30290 +
                     (C4763 * C945 + C4759 * C952 + C4764 * C1310 +
                      C4760 * C1325 + C4765 * C1721 + C4761 * C1724) *
                         C2901) *
                        C31397 * C31184 * C31305) *
                       C31265)) /
                     (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
                C31397 * C110) *
               C31301 +
           ((C550 * C2642 -
             ((C113 * C496 + C31383 * C515) * C2635 +
              (C113 * C486 + C31383 * C497) * C2641) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31165) *
                C31397 * C110) *
               C31308 +
           (((C113 * C490 + C31383 * C505) * C2641 +
             (C113 * C506 + C31383 * C520) * C2635 - C556 * C2642 -
             C557 * C31165) *
                C31397 * C108 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31165) *
                C31397 * C109 +
            (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C31165) *
                C31397 * C110) *
               C3806) *
              C31475 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
                C31397 * C110) *
               C31301 +
           (((C113 * C935 + C31383 * C940) * C2641 +
             (C113 * C941 + C31383 * C950) * C2635 - C968 * C2642 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31165) *
                C31397 * C110) *
               C31308 +
           ((C2198 * C2642 -
             ((C113 * C1308 + C31383 * C1324) * C2635 +
              (C113 * C1297 + C31383 * C1309) * C2641) +
             C2199 * C31165) *
                C31397 * C108 +
            (C2200 * C2642 - (C2199 * C2635 + C2198 * C2641) + C2201 * C31165) *
                C31397 * C109 +
            ((C113 * C2185 + C31383 * C2186) * C2642 -
             (C2201 * C2635 + C2200 * C2641) +
             (C113 * C2187 + C31383 * C2188) * C31165) *
                C31397 * C110) *
               C3806) *
              C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C2641 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C2635 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C2642 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C31301 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C2642 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C2635 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C2641) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31308 +
           ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
             C4765 * C1301 + C4761 * C1316) *
                C2641 +
            (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
             C4765 * C1317 + C4761 * C1328) *
                C2635 -
            (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
             C4763 * C491 + C4759 * C507) *
                C2642 -
            (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
             C4763 * C508 + C4759 * C521) *
                C31165) *
               C31397 * C31184 * C3806) *
              C31475 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C2642 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C2635 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C2641) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C31301 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C2641 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C2635 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C2642 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31308 +
           ((C4763 * C1296 + C4759 * C1307 + C4764 * C1302 + C4760 * C1318 +
             C4765 * C6424 + C4761 * C6425) *
                C2642 -
            ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 + C4760 * C1328 +
              C4763 * C1308 + C4759 * C1324) *
                 C2635 +
             (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 + C4760 * C1316 +
              C4763 * C1297 + C4759 * C1309) *
                 C2641) +
            (C4763 * C1306 + C4759 * C1323 + C4764 * C1319 + C4760 * C1329 +
             C4765 * C6426 + C4761 * C6427) *
                C31165) *
               C31397 * C31184 * C3806) *
              C31265)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
                C31397 * C110) *
               C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C31383 * C515) * C2635 +
              (C113 * C486 + C31383 * C497) * C2641) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31165) *
                C31397 * C110) *
               C31305) *
              C31541 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
                C31397 * C110) *
               C3298 +
           (((C113 * C935 + C31383 * C940) * C2641 +
             (C113 * C941 + C31383 * C950) * C2635 - C968 * C2642 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31165) *
                C31397 * C110) *
               C31305) *
              C31529 +
          ((((C113 * C301 + C31383 * C316) * C2641 +
             (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
             C368 * C31165) *
                C31397 * C108 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
                C31397 * C109 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31165) *
                C31397 * C110) *
               C3298 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C31383 * C1327) * C2635 +
              (C113 * C1300 + C31383 * C1315) * C2641) +
             C1613 * C31165) *
                C31397 * C108 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C31165) *
                C31397 * C109 +
            ((C113 * C1599 + C31383 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C31383 * C1602) * C31165) *
                C31397 * C110) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2533 +
            (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
            C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
            C173 * C31508) *
               C31397 * C108 +
           (C168 * C2533 + C169 * C31547 - C170 * C2534 - C171 * C31540 +
            C172 * C2535 + C173 * C31527 - C174 * C2536 - C175 * C31508) *
               C31397 * C109 +
           (C170 * C2533 + C171 * C31547 - C172 * C2534 - C173 * C31540 +
            C174 * C2535 + C175 * C31527 - C176 * C2536 - C177 * C31508) *
               C31397 * C110) *
              C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C31383 * C515) * C31547 +
             (C113 * C486 + C31383 * C497) * C2533) +
            C551 * C31540 - C552 * C2535 - C553 * C31527 + C554 * C2536 +
            C555 * C31508) *
               C31397 * C108 +
           (C552 * C2534 - (C551 * C31547 + C550 * C2533) + C553 * C31540 -
            C554 * C2535 - C555 * C31527 + C788 * C2536 + C789 * C31508) *
               C31397 * C109 +
           (C554 * C2534 - (C553 * C31547 + C552 * C2533) + C555 * C31540 -
            C788 * C2535 - C789 * C31527 +
            (C113 * C779 + C31383 * C780) * C2536 +
            (C113 * C781 + C31383 * C782) * C31508) *
               C31397 * C110) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2641 +
            (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
            C169 * C31165) *
               C31397 * C108 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
               C31397 * C109 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
               C31397 * C110) *
              C31549 +
          ((C550 * C2642 -
            ((C113 * C496 + C31383 * C515) * C2635 +
             (C113 * C486 + C31383 * C497) * C2641) +
            C551 * C31165) *
               C31397 * C108 +
           (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31165) *
               C31397 * C109 +
           (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31165) *
               C31397 * C110) *
              C31546 +
          (((C113 * C490 + C31383 * C505) * C2641 +
            (C113 * C506 + C31383 * C520) * C2635 - C556 * C2642 -
            C557 * C31165) *
               C31397 * C108 +
           (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31165) *
               C31397 * C109 +
           (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C31165) *
               C31397 * C110) *
              C31537 +
          ((C2316 * C2642 -
            ((C113 * C2025 + C31383 * C2035) * C2635 +
             (C113 * C2017 + C31383 * C2026) * C2641) +
            C2317 * C31165) *
               C31397 * C108 +
           (C2318 * C2642 - (C2317 * C2635 + C2316 * C2641) + C2319 * C31165) *
               C31397 * C109 +
           ((C113 * C2303 + C31383 * C2304) * C2642 -
            (C2319 * C2635 + C2318 * C2641) +
            (C113 * C2305 + C31383 * C2306) * C31165) *
               C31397 * C110) *
              C31520) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2533 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31547 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2534 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31540 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C2535 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31527 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C2536 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C3298 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C2534 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31547 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C2533) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C31540 -
           (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
            C4763 * C487 + C4759 * C499) *
               C2535 -
           (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
            C4763 * C500 + C4759 * C517) *
               C31527 +
           (C4763 * C488 + C4759 * C501 + C4764 * C938 + C4760 * C946 +
            C4765 * C1599 + C4761 * C1600) *
               C2536 +
           (C4763 * C502 + C4759 * C518 + C4764 * C947 + C4760 * C953 +
            C4765 * C1601 + C4761 * C1602) *
               C31508) *
              C31397 * C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C2641 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C2635 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C2642 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C2642 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C2635 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C2641) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31541 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C2642 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C2635 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C2641) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C2641 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C2635 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C2642 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31529 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C2641 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C2635 -
            (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
             C4763 * C302 + C4759 * C318) *
                C2642 -
            (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
             C4763 * C319 + C4759 * C332) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C1299 + C4759 * C1313 + C4764 * C1714 + C4760 * C1718 +
             C4765 * C5878 + C4761 * C5879) *
                C2642 -
            ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
              C4763 * C1314 + C4759 * C1327) *
                 C2635 +
             (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
              C4763 * C1300 + C4759 * C1315) *
                 C2641) +
            (C4763 * C1312 + C4759 * C1326 + C4764 * C1719 + C4760 * C1723 +
             C4765 * C5880 + C4761 * C5881) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2641 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C2635 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2642 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31165) *
              C31397 * C31184 * C31549 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C2642 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C2635 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C2641) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C31165) *
              C31397 * C31184 * C31546 +
          ((C4763 * C490 + C4759 * C505 + C4764 * C1297 + C4760 * C1309 +
            C4765 * C1301 + C4761 * C1316) *
               C2641 +
           (C4763 * C506 + C4759 * C520 + C4764 * C1308 + C4760 * C1324 +
            C4765 * C1317 + C4761 * C1328) *
               C2635 -
           (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 + C4760 * C1307 +
            C4763 * C491 + C4759 * C507) *
               C2642 -
           (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 + C4760 * C1323 +
            C4763 * C508 + C4759 * C521) *
               C31165) *
              C31397 * C31184 * C31537 +
          ((C4763 * C2016 + C4759 * C2024 + C4764 * C2418 + C4760 * C2422 +
            C4765 * C6526 + C4761 * C6527) *
               C2642 -
           ((C4765 * C6269 + C4761 * C6275 + C4764 * C2421 + C4760 * C2426 +
             C4763 * C2025 + C4759 * C2035) *
                C2635 +
            (C4765 * C6266 + C4761 * C6270 + C4764 * C2417 + C4760 * C2420 +
             C4763 * C2017 + C4759 * C2026) *
                C2641) +
           (C4763 * C2023 + C4759 * C2034 + C4764 * C2423 + C4760 * C2427 +
            C4765 * C6528 + C4761 * C6529) *
               C31165) *
              C31397 * C31184 * C31520) *
         C31206) /
            (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C30284 +
                     (C113 * C127 + C31383 * C140) * C31160 - C168 * C30280 -
                     C169 * C31168 + C170 * C30290 + C171 * C2901) *
                        C31397 * C108 +
                    (C168 * C30284 + C169 * C31160 - C170 * C30280 -
                     C171 * C31168 + C172 * C30290 + C173 * C2901) *
                        C31397 * C109 +
                    (C170 * C30284 + C171 * C31160 - C172 * C30280 -
                     C173 * C31168 + C174 * C30290 + C175 * C2901) *
                        C31397 * C110) *
                       C31301 +
                   ((C550 * C30280 -
                     ((C113 * C496 + C31383 * C515) * C31160 +
                      (C113 * C486 + C31383 * C497) * C30284) +
                     C551 * C31168 - C552 * C30290 - C553 * C2901) *
                        C31397 * C108 +
                    (C552 * C30280 - (C551 * C31160 + C550 * C30284) +
                     C553 * C31168 - C554 * C30290 - C555 * C2901) *
                        C31397 * C109 +
                    (C554 * C30280 - (C553 * C31160 + C552 * C30284) +
                     C555 * C31168 - C788 * C30290 - C789 * C2901) *
                        C31397 * C110) *
                       C31308 +
                   (((C113 * C490 + C31383 * C505) * C30284 +
                     (C113 * C506 + C31383 * C520) * C31160 - C556 * C30280 -
                     C557 * C31168 + C558 * C30290 + C559 * C2901) *
                        C31397 * C108 +
                    (C556 * C30284 + C557 * C31160 - C558 * C30280 -
                     C559 * C31168 + C560 * C30290 + C561 * C2901) *
                        C31397 * C109 +
                    (C558 * C30284 + C559 * C31160 - C560 * C30280 -
                     C561 * C31168 + (C113 * C494 + C31383 * C513) * C30290 +
                     (C113 * C514 + C31383 * C524) * C2901) *
                        C31397 * C110) *
                       C3806) *
                  C31206) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C30284 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31160 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C30280 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C31168 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C30290 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C2901) *
                       C31397 * C31184 * C31301 +
                   ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
                     C4765 * C1299 + C4761 * C1313) *
                        C30280 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31160 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C30284) +
                    (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
                     C4765 * C1312 + C4761 * C1326) *
                        C31168 -
                    (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                     C4760 * C944 + C4763 * C487 + C4759 * C499) *
                        C30290 -
                    (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                     C4760 * C952 + C4763 * C500 + C4759 * C517) *
                        C2901) *
                       C31397 * C31184 * C31308 +
                   ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                     C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                        C30284 +
                    (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                     C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                        C31160 -
                    (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 +
                     C4760 * C1307 + C4763 * C491 + C4759 * C507) *
                        C30280 -
                    (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 +
                     C4760 * C1323 + C4763 * C508 + C4759 * C521) *
                        C31168 +
                    (C4763 * C492 + C4759 * C509 + C4764 * C1295 +
                     C4760 * C1305 + C4765 * C1303 + C4761 * C1320) *
                        C30290 +
                    (C4763 * C510 + C4759 * C522 + C4764 * C1304 +
                     C4760 * C1322 + C4765 * C1321 + C4761 * C1330) *
                        C2901) *
                       C31397 * C31184 * C3806) *
                  C31206) /
                     (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C2533 +
            (C113 * C127 + C31383 * C140) * C31547 - C168 * C2534 -
            C169 * C31540 + C170 * C2535 + C171 * C31527 - C172 * C2536 -
            C173 * C31508) *
               C31397 * C108 +
           (C168 * C2533 + C169 * C31547 - C170 * C2534 - C171 * C31540 +
            C172 * C2535 + C173 * C31527 - C174 * C2536 - C175 * C31508) *
               C31397 * C109 +
           (C170 * C2533 + C171 * C31547 - C172 * C2534 - C173 * C31540 +
            C174 * C2535 + C175 * C31527 - C176 * C2536 - C177 * C31508) *
               C31397 * C110) *
              C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C31383 * C515) * C31547 +
             (C113 * C486 + C31383 * C497) * C2533) +
            C551 * C31540 - C552 * C2535 - C553 * C31527 + C554 * C2536 +
            C555 * C31508) *
               C31397 * C108 +
           (C552 * C2534 - (C551 * C31547 + C550 * C2533) + C553 * C31540 -
            C554 * C2535 - C555 * C31527 + C788 * C2536 + C789 * C31508) *
               C31397 * C109 +
           (C554 * C2534 - (C553 * C31547 + C552 * C2533) + C555 * C31540 -
            C788 * C2535 - C789 * C31527 +
            (C113 * C779 + C31383 * C780) * C2536 +
            (C113 * C781 + C31383 * C782) * C31508) *
               C31397 * C110) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C2641 +
             (C113 * C127 + C31383 * C140) * C2635 - C168 * C2642 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31165) *
                C31397 * C110) *
               C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C31383 * C515) * C2635 +
              (C113 * C486 + C31383 * C497) * C2641) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31165) *
                C31397 * C110) *
               C31305) *
              C31541 +
          (((C361 * C2642 -
             ((C113 * C307 + C31383 * C326) * C2635 +
              (C113 * C297 + C31383 * C308) * C2641) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31165) *
                C31397 * C110) *
               C3298 +
           (((C113 * C935 + C31383 * C940) * C2641 +
             (C113 * C941 + C31383 * C950) * C2635 - C968 * C2642 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31165) *
                C31397 * C110) *
               C31305) *
              C31529 +
          ((((C113 * C301 + C31383 * C316) * C2641 +
             (C113 * C317 + C31383 * C331) * C2635 - C367 * C2642 -
             C368 * C31165) *
                C31397 * C108 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31165) *
                C31397 * C109 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31165) *
                C31397 * C110) *
               C3298 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C31383 * C1327) * C2635 +
              (C113 * C1300 + C31383 * C1315) * C2641) +
             C1613 * C31165) *
                C31397 * C108 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C31165) *
                C31397 * C109 +
            ((C113 * C1599 + C31383 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C31383 * C1602) * C31165) *
                C31397 * C110) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C2533 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31547 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C2534 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31540 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C2535 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C31527 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C2536 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C3298 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C2534 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C31547 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C2533) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C31540 -
           (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
            C4763 * C487 + C4759 * C499) *
               C2535 -
           (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
            C4763 * C500 + C4759 * C517) *
               C31527 +
           (C4763 * C488 + C4759 * C501 + C4764 * C938 + C4760 * C946 +
            C4765 * C1599 + C4761 * C1600) *
               C2536 +
           (C4763 * C502 + C4759 * C518 + C4764 * C947 + C4760 * C953 +
            C4765 * C1601 + C4761 * C1602) *
               C31508) *
              C31397 * C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C2641 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C2635 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C2642 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C2642 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C2635 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C2641) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31541 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C2642 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C2635 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C2641) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C2641 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C2635 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C2642 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31529 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C2641 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C2635 -
            (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
             C4763 * C302 + C4759 * C318) *
                C2642 -
            (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
             C4763 * C319 + C4759 * C332) *
                C31165) *
               C31397 * C31184 * C3298 +
           ((C4763 * C1299 + C4759 * C1313 + C4764 * C1714 + C4760 * C1718 +
             C4765 * C5878 + C4761 * C5879) *
                C2642 -
            ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
              C4763 * C1314 + C4759 * C1327) *
                 C2635 +
             (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
              C4763 * C1300 + C4759 * C1315) *
                 C2641) +
            (C4763 * C1312 + C4759 * C1326 + C4764 * C1719 + C4760 * C1723 +
             C4765 * C5880 + C4761 * C5881) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C665 +
            (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
               C31397 * C108 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31508) *
               C31397 * C109 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31508) *
               C31397 * C110) *
              C31218 * C31475 +
          ((C361 * C666 -
            ((C113 * C307 + C31383 * C326) * C659 +
             (C113 * C297 + C31383 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C31508) *
               C31397 * C108 +
           (C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
            C365 * C667 - C366 * C661 + C678 * C668 + C679 * C31508) *
               C31397 * C109 +
           (C365 * C666 - (C364 * C659 + C363 * C665) + C366 * C660 -
            C678 * C667 - C679 * C661 + (C113 * C669 + C31383 * C670) * C668 +
            (C113 * C671 + C31383 * C672) * C31508) *
               C31397 * C110) *
              C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C30274 +
            (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
            C169 * C31165) *
               C31397 * C108 +
           (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
               C31397 * C109 +
           (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
               C31397 * C110) *
              C31218 * C1431 +
          ((C361 * C30255 -
            ((C113 * C307 + C31383 * C326) * C31457 +
             (C113 * C297 + C31383 * C308) * C30274) +
            C362 * C31165) *
               C31397 * C108 +
           (C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
               C31397 * C109 +
           (C365 * C30255 - (C364 * C31457 + C363 * C30274) + C366 * C31165) *
               C31397 * C110) *
              C31218 * C1432 +
          (((C113 * C301 + C31383 * C316) * C30274 +
            (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
            C368 * C31165) *
               C31397 * C108 +
           (C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
               C31397 * C109 +
           (C369 * C30274 + C370 * C31457 - C371 * C30255 - C372 * C31165) *
               C31397 * C110) *
              C31218 * C1433 +
          ((C1450 * C30255 -
            ((C113 * C1171 + C31383 * C1181) * C31457 +
             (C113 * C1163 + C31383 * C1172) * C30274) +
            C1451 * C31165) *
               C31397 * C108 +
           (C1452 * C30255 - (C1451 * C31457 + C1450 * C30274) +
            C1453 * C31165) *
               C31397 * C109 +
           ((C113 * C1437 + C31383 * C1438) * C30255 -
            (C1453 * C31457 + C1452 * C30274) +
            (C113 * C1439 + C31383 * C1440) * C31165) *
               C31397 * C110) *
              C31218 * C31514)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C665 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C659 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C666 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C660 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C667 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C661 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C668 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C31218 * C31475 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C666 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C659 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C665) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C660 -
           (C4765 * C1161 + C4761 * C1168 + C4764 * C303 + C4760 * C320 +
            C4763 * C298 + C4759 * C310) *
               C667 -
           (C4765 * C1167 + C4761 * C1179 + C4764 * C321 + C4760 * C333 +
            C4763 * C311 + C4759 * C328) *
               C661 +
           (C4763 * C299 + C4759 * C312 + C4764 * C304 + C4760 * C322 +
            C4765 * C1437 + C4761 * C1438) *
               C668 +
           (C4763 * C313 + C4759 * C329 + C4764 * C323 + C4760 * C334 +
            C4765 * C1439 + C4761 * C1440) *
               C31508) *
              C31397 * C31184 * C31218 * C31265)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C30274 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C31457 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C30255 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C31165) *
              C31397 * C31184 * C31218 * C1431 +
          ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
            C4765 * C1162 + C4761 * C1170) *
               C30255 -
           ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
             C4763 * C307 + C4759 * C326) *
                C31457 +
            (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
             C4763 * C297 + C4759 * C308) *
                C30274) +
           (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
            C4765 * C1169 + C4761 * C1180) *
               C31165) *
              C31397 * C31184 * C31218 * C1432 +
          ((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
            C4765 * C1164 + C4761 * C1173) *
               C30274 +
           (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
            C4765 * C1174 + C4761 * C1182) *
               C31457 -
           (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
            C4763 * C302 + C4759 * C318) *
               C30255 -
           (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
            C4763 * C319 + C4759 * C332) *
               C31165) *
              C31397 * C31184 * C31218 * C1433 +
          ((C4763 * C1162 + C4759 * C1170 + C4764 * C1165 + C4760 * C1175 +
            C4765 * C5728 + C4761 * C5729) *
               C30255 -
           ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 + C4760 * C1182 +
             C4763 * C1171 + C4759 * C1181) *
                C31457 +
            (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 + C4760 * C1173 +
             C4763 * C1163 + C4759 * C1172) *
                C30274) +
           (C4763 * C1169 + C4759 * C1180 + C4764 * C1176 + C4760 * C1183 +
            C4765 * C5730 + C4761 * C5731) *
               C31165) *
              C31397 * C31184 * C31218 * C31514)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C293 +
                      (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                      C169 * C288 + C170 * C295 + C171 * C31497) *
                         C31397 * C108 +
                     (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                      C172 * C295 + C173 * C31497) *
                         C31397 * C109 +
                     (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                      C174 * C295 + C175 * C31497) *
                         C31397 * C110) *
                        C31476 +
                    ((C550 * C294 -
                      ((C113 * C496 + C31383 * C515) * C287 +
                       (C113 * C486 + C31383 * C497) * C293) +
                      C551 * C288 - C552 * C295 - C553 * C31497) *
                         C31397 * C108 +
                     (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                      C554 * C295 - C555 * C31497) *
                         C31397 * C109 +
                     (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                      C788 * C295 - C789 * C31497) *
                         C31397 * C110) *
                        C31305) *
                       C31475 +
                   (((C361 * C294 -
                      ((C113 * C307 + C31383 * C326) * C287 +
                       (C113 * C297 + C31383 * C308) * C293) +
                      C362 * C288 - C363 * C295 - C364 * C31497) *
                         C31397 * C108 +
                     (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                      C365 * C295 - C366 * C31497) *
                         C31397 * C109 +
                     (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                      C678 * C295 - C679 * C31497) *
                         C31397 * C110) *
                        C31476 +
                    (((C113 * C935 + C31383 * C940) * C293 +
                      (C113 * C941 + C31383 * C950) * C287 - C968 * C294 -
                      C969 * C288 + C970 * C295 + C971 * C31497) *
                         C31397 * C108 +
                     (C968 * C293 + C969 * C287 - C970 * C294 - C971 * C288 +
                      C972 * C295 + C973 * C31497) *
                         C31397 * C109 +
                     (C970 * C293 + C971 * C287 - C972 * C294 - C973 * C288 +
                      (C113 * C939 + C31383 * C948) * C295 +
                      (C113 * C949 + C31383 * C954) * C31497) *
                         C31397 * C110) *
                        C31305) *
                       C31265)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1160 +
                      (C113 * C127 + C31383 * C140) * C31155) *
                         C31397 * C108 +
                     (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                     (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                        C31476 -
                    ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                     (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                     ((C113 * C496 + C31383 * C515) * C31155 +
                      (C113 * C486 + C31383 * C497) * C1160) *
                         C31397 * C108) *
                        C31305) *
                       C1431 +
                   ((((C113 * C935 + C31383 * C940) * C1160 +
                      (C113 * C941 + C31383 * C950) * C31155) *
                         C31397 * C108 +
                     (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                     (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                        C31305 -
                    ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                     (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                     ((C113 * C307 + C31383 * C326) * C31155 +
                      (C113 * C297 + C31383 * C308) * C1160) *
                         C31397 * C108) *
                        C31476) *
                       C1432 +
                   ((((C113 * C301 + C31383 * C316) * C1160 +
                      (C113 * C317 + C31383 * C331) * C31155) *
                         C31397 * C108 +
                     (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                     (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                        C31476 -
                    ((C1615 * C31155 + C1614 * C1160) * C31397 * C110 +
                     (C1613 * C31155 + C1612 * C1160) * C31397 * C109 +
                     ((C113 * C1314 + C31383 * C1327) * C31155 +
                      (C113 * C1300 + C31383 * C1315) * C1160) *
                         C31397 * C108) *
                        C31305) *
                       C1433 +
                   ((((C113 * C1713 + C31383 * C1716) * C1160 +
                      (C113 * C1717 + C31383 * C1722) * C31155) *
                         C31397 * C108 +
                     ((C113 * C1714 + C31383 * C1718) * C1160 +
                      (C113 * C1719 + C31383 * C1723) * C31155) *
                         C31397 * C109 +
                     ((C113 * C1715 + C31383 * C1720) * C1160 +
                      (C113 * C1721 + C31383 * C1724) * C31155) *
                         C31397 * C110) *
                        C31305 -
                    ((C1453 * C31155 + C1452 * C1160) * C31397 * C110 +
                     (C1451 * C31155 + C1450 * C1160) * C31397 * C109 +
                     ((C113 * C1171 + C31383 * C1181) * C31155 +
                      (C113 * C1163 + C31383 * C1172) * C1160) *
                         C31397 * C108) *
                        C31476) *
                       C31514)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C293 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C287 -
                     (C4765 * C302 + C4761 * C318 + C4764 * C296 +
                      C4760 * C306 + C4763 * C120 + C4759 * C128) *
                         C294 -
                     (C4765 * C319 + C4761 * C332 + C4764 * C309 +
                      C4760 * C327 + C4763 * C129 + C4759 * C141) *
                         C288 +
                     (C4763 * C121 + C4759 * C130 + C4764 * C298 +
                      C4760 * C310 + C4765 * C303 + C4761 * C320) *
                         C295 +
                     (C4763 * C131 + C4759 * C142 + C4764 * C311 +
                      C4760 * C328 + C4765 * C321 + C4761 * C333) *
                         C31497) *
                        C31397 * C31184 * C31476 +
                    ((C4763 * C485 + C4759 * C495 + C4764 * C936 +
                      C4760 * C942 + C4765 * C1299 + C4761 * C1313) *
                         C294 -
                     ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                       C4760 * C950 + C4763 * C496 + C4759 * C515) *
                          C287 +
                      (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                       C4760 * C940 + C4763 * C486 + C4759 * C497) *
                          C293) +
                     (C4763 * C498 + C4759 * C516 + C4764 * C943 +
                      C4760 * C951 + C4765 * C1312 + C4761 * C1326) *
                         C288 -
                     (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                      C4760 * C944 + C4763 * C487 + C4759 * C499) *
                         C295 -
                     (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                      C4760 * C952 + C4763 * C500 + C4759 * C517) *
                         C31497) *
                        C31397 * C31184 * C31305) *
                       C31475 +
                   (((C4763 * C296 + C4759 * C306 + C4764 * C302 +
                      C4760 * C318 + C4765 * C1162 + C4761 * C1170) *
                         C294 -
                     ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                       C4760 * C331 + C4763 * C307 + C4759 * C326) *
                          C287 +
                      (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                       C4760 * C316 + C4763 * C297 + C4759 * C308) *
                          C293) +
                     (C4763 * C309 + C4759 * C327 + C4764 * C319 +
                      C4760 * C332 + C4765 * C1169 + C4761 * C1180) *
                         C288 -
                     (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                      C4760 * C320 + C4763 * C298 + C4759 * C310) *
                         C295 -
                     (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                      C4760 * C333 + C4763 * C311 + C4759 * C328) *
                         C31497) *
                        C31397 * C31184 * C31476 +
                    ((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C293 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C287 -
                     (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 +
                      C4760 * C1313 + C4763 * C936 + C4759 * C942) *
                         C294 -
                     (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 +
                      C4760 * C1326 + C4763 * C943 + C4759 * C951) *
                         C288 +
                     (C4763 * C937 + C4759 * C944 + C4764 * C1298 +
                      C4760 * C1311 + C4765 * C1715 + C4761 * C1720) *
                         C295 +
                     (C4763 * C945 + C4759 * C952 + C4764 * C1310 +
                      C4760 * C1325 + C4765 * C1721 + C4761 * C1724) *
                         C31497) *
                        C31397 * C31184 * C31305) *
                       C31265)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1160 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31155) *
                        C31397 * C31184 * C31476 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31155 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1160) *
                        C31397 * C31184 * C31305) *
                       C1431 +
                   (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1160 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31155) *
                        C31397 * C31184 * C31305 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31155 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1160) *
                        C31397 * C31184 * C31476) *
                       C1432 +
                   (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                      C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                         C1160 +
                     (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                      C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                         C31155) *
                        C31397 * C31184 * C31476 -
                    ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                      C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                         C31155 +
                     (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                      C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                         C1160) *
                        C31397 * C31184 * C31305) *
                       C1433 +
                   (((C4763 * C1713 + C4759 * C1716 + C4764 * C5619 +
                      C4760 * C5624 + C4765 * C5980 + C4761 * C5981) *
                         C1160 +
                     (C4763 * C1717 + C4759 * C1722 + C4764 * C5623 +
                      C4760 * C5628 + C4765 * C5982 + C4761 * C5983) *
                         C31155) *
                        C31397 * C31184 * C31305 -
                    ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 +
                      C4760 * C1182 + C4763 * C1171 + C4759 * C1181) *
                         C31155 +
                     (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 +
                      C4760 * C1173 + C4763 * C1163 + C4759 * C1172) *
                         C1160) *
                        C31397 * C31184 * C31476) *
                       C31514)) /
                     (p * q * std::sqrt(p + q));
    d2ee[122] += (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C293 +
                     (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C31497) *
                        C31397 * C108 +
                    (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                     C172 * C295 + C173 * C31497) *
                        C31397 * C109 +
                    (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                     C174 * C295 + C175 * C31497) *
                        C31397 * C110) *
                       C31218 * C31541 +
                   ((C361 * C294 -
                     ((C113 * C307 + C31383 * C326) * C287 +
                      (C113 * C297 + C31383 * C308) * C293) +
                     C362 * C288 - C363 * C295 - C364 * C31497) *
                        C31397 * C108 +
                    (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                     C365 * C295 - C366 * C31497) *
                        C31397 * C109 +
                    (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                     (C113 * C300 + C31383 * C314) * C295 -
                     (C113 * C315 + C31383 * C330) * C31497) *
                        C31397 * C110) *
                       C31218 * C31529 +
                   (((C113 * C301 + C31383 * C316) * C293 +
                     (C113 * C317 + C31383 * C331) * C287 - C367 * C294 -
                     C368 * C288 + C369 * C295 + C370 * C31497) *
                        C31397 * C108 +
                    (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                     C371 * C295 + C372 * C31497) *
                        C31397 * C109 +
                    (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                     (C113 * C305 + C31383 * C324) * C295 +
                     (C113 * C325 + C31383 * C335) * C31497) *
                        C31397 * C110) *
                       C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C31383 * C126) * C114 +
                    (C113 * C127 + C31383 * C140) * C102 - C168 * C115 -
                    C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                    C173 * C105 + C174 * C118 + C175 * C106) *
                       C31397 * C108 +
                   (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                    C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                    C176 * C118 + C177 * C106) *
                       C31397 * C109 +
                   (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                    C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                    (C113 * C125 + C31383 * C138) * C118 +
                    (C113 * C139 + C31383 * C146) * C106) *
                       C31397 * C110) *
                  C31218 * C31206) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C293 +
                     (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C31497) *
                        C31397 * C108 +
                    (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                     C172 * C295 + C173 * C31497) *
                        C31397 * C109 +
                    (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                     C174 * C295 + C175 * C31497) *
                        C31397 * C110) *
                       C31542 +
                   ((C550 * C294 -
                     ((C113 * C496 + C31383 * C515) * C287 +
                      (C113 * C486 + C31383 * C497) * C293) +
                     C551 * C288 - C552 * C295 - C553 * C31497) *
                        C31397 * C108 +
                    (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                     C554 * C295 - C555 * C31497) *
                        C31397 * C109 +
                    (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                     (C113 * C489 + C31383 * C503) * C295 -
                     (C113 * C504 + C31383 * C519) * C31497) *
                        C31397 * C110) *
                       C31531 +
                   (((C113 * C490 + C31383 * C505) * C293 +
                     (C113 * C506 + C31383 * C520) * C287 - C556 * C294 -
                     C557 * C288 + C558 * C295 + C559 * C31497) *
                        C31397 * C108 +
                    (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
                     C560 * C295 + C561 * C31497) *
                        C31397 * C109 +
                    (C558 * C293 + C559 * C287 - C560 * C294 - C561 * C288 +
                     (C113 * C494 + C31383 * C513) * C295 +
                     (C113 * C514 + C31383 * C524) * C31497) *
                        C31397 * C110) *
                       C31507) *
                  C31206) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C1089 +
                     (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                     C169 * C31525 + C170 * C1091 + C171 * C31497) *
                        C31397 * C108 +
                    (C168 * C1089 + C169 * C31538 - C170 * C1090 -
                     C171 * C31525 + C172 * C1091 + C173 * C31497) *
                        C31397 * C109 +
                    (C170 * C1089 + C171 * C31538 - C172 * C1090 -
                     C173 * C31525 + C174 * C1091 + C175 * C31497) *
                        C31397 * C110) *
                       C31218 * C1086 +
                   ((C361 * C1090 -
                     ((C113 * C307 + C31383 * C326) * C31538 +
                      (C113 * C297 + C31383 * C308) * C1089) +
                     C362 * C31525 - C363 * C1091 - C364 * C31497) *
                        C31397 * C108 +
                    (C363 * C1090 - (C362 * C31538 + C361 * C1089) +
                     C364 * C31525 - C365 * C1091 - C366 * C31497) *
                        C31397 * C109 +
                    (C365 * C1090 - (C364 * C31538 + C363 * C1089) +
                     C366 * C31525 - C678 * C1091 - C679 * C31497) *
                        C31397 * C110) *
                       C31218 * C1087 +
                   (((C113 * C301 + C31383 * C316) * C1089 +
                     (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
                     C368 * C31525 + C369 * C1091 + C370 * C31497) *
                        C31397 * C108 +
                    (C367 * C1089 + C368 * C31538 - C369 * C1090 -
                     C370 * C31525 + C371 * C1091 + C372 * C31497) *
                        C31397 * C109 +
                    (C369 * C1089 + C370 * C31538 - C371 * C1090 -
                     C372 * C31525 + (C113 * C305 + C31383 * C324) * C1091 +
                     (C113 * C325 + C31383 * C335) * C31497) *
                        C31397 * C110) *
                       C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C31397 * C108 +
                    (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                    (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                       C31218 * C1155 -
                   ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                    (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C31397 * C108) *
                       C31218 * C1156 +
                   (((C113 * C301 + C31383 * C316) * C1160 +
                     (C113 * C317 + C31383 * C331) * C31155) *
                        C31397 * C108 +
                    (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                    (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                       C31218 * C1157 -
                   (((C113 * C1167 + C31383 * C1179) * C31155 +
                     (C113 * C1161 + C31383 * C1168) * C1160) *
                        C31397 * C110 +
                    ((C113 * C1169 + C31383 * C1180) * C31155 +
                     (C113 * C1162 + C31383 * C1170) * C1160) *
                        C31397 * C109 +
                    ((C113 * C1171 + C31383 * C1181) * C31155 +
                     (C113 * C1163 + C31383 * C1172) * C1160) *
                        C31397 * C108) *
                       C31218 * C1158 +
                   (((C113 * C1164 + C31383 * C1173) * C1160 +
                     (C113 * C1174 + C31383 * C1182) * C31155) *
                        C31397 * C108 +
                    ((C113 * C1165 + C31383 * C1175) * C1160 +
                     (C113 * C1176 + C31383 * C1183) * C31155) *
                        C31397 * C109 +
                    ((C113 * C1166 + C31383 * C1177) * C1160 +
                     (C113 * C1178 + C31383 * C1184) * C31155) *
                        C31397 * C110) *
                       C31218 * C1159)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C31383 * C126) * C1160 +
                      (C113 * C127 + C31383 * C140) * C31155) *
                         C31397 * C108 +
                     (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                     (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                        C31542 -
                    ((C553 * C31155 + C552 * C1160) * C31397 * C110 +
                     (C551 * C31155 + C550 * C1160) * C31397 * C109 +
                     ((C113 * C496 + C31383 * C515) * C31155 +
                      (C113 * C486 + C31383 * C497) * C1160) *
                         C31397 * C108) *
                        C31531 +
                    (((C113 * C490 + C31383 * C505) * C1160 +
                      (C113 * C506 + C31383 * C520) * C31155) *
                         C31397 * C108 +
                     (C556 * C1160 + C557 * C31155) * C31397 * C109 +
                     (C558 * C1160 + C559 * C31155) * C31397 * C110) *
                        C31507) *
                       C1086 +
                   ((((C113 * C935 + C31383 * C940) * C1160 +
                      (C113 * C941 + C31383 * C950) * C31155) *
                         C31397 * C108 +
                     (C968 * C1160 + C969 * C31155) * C31397 * C109 +
                     (C970 * C1160 + C971 * C31155) * C31397 * C110) *
                        C31531 -
                    ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                     (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                     ((C113 * C307 + C31383 * C326) * C31155 +
                      (C113 * C297 + C31383 * C308) * C1160) *
                         C31397 * C108) *
                        C31542 -
                    (((C113 * C1304 + C31383 * C1322) * C31155 +
                      (C113 * C1295 + C31383 * C1305) * C1160) *
                         C31397 * C110 +
                     ((C113 * C1306 + C31383 * C1323) * C31155 +
                      (C113 * C1296 + C31383 * C1307) * C1160) *
                         C31397 * C109 +
                     ((C113 * C1308 + C31383 * C1324) * C31155 +
                      (C113 * C1297 + C31383 * C1309) * C1160) *
                         C31397 * C108) *
                        C31507) *
                       C1087 +
                   ((((C113 * C301 + C31383 * C316) * C1160 +
                      (C113 * C317 + C31383 * C331) * C31155) *
                         C31397 * C108 +
                     (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                     (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                        C31542 -
                    (((C113 * C1310 + C31383 * C1325) * C31155 +
                      (C113 * C1298 + C31383 * C1311) * C1160) *
                         C31397 * C110 +
                     ((C113 * C1312 + C31383 * C1326) * C31155 +
                      (C113 * C1299 + C31383 * C1313) * C1160) *
                         C31397 * C109 +
                     ((C113 * C1314 + C31383 * C1327) * C31155 +
                      (C113 * C1300 + C31383 * C1315) * C1160) *
                         C31397 * C108) *
                        C31531 +
                    (((C113 * C1301 + C31383 * C1316) * C1160 +
                      (C113 * C1317 + C31383 * C1328) * C31155) *
                         C31397 * C108 +
                     ((C113 * C1302 + C31383 * C1318) * C1160 +
                      (C113 * C1319 + C31383 * C1329) * C31155) *
                         C31397 * C109 +
                     ((C113 * C1303 + C31383 * C1320) * C1160 +
                      (C113 * C1321 + C31383 * C1330) * C31155) *
                         C31397 * C110) *
                        C31507) *
                       C31504)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                    C4765 * C301 + C4761 * C316) *
                       C114 +
                   (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                    C4765 * C317 + C4761 * C331) *
                       C102 -
                   (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                    C4763 * C120 + C4759 * C128) *
                       C115 -
                   (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                    C4763 * C129 + C4759 * C141) *
                       C103 +
                   (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                    C4765 * C303 + C4761 * C320) *
                       C116 +
                   (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                    C4765 * C321 + C4761 * C333) *
                       C104 -
                   (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
                    C4763 * C122 + C4759 * C132) *
                       C117 -
                   (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
                    C4763 * C133 + C4759 * C143) *
                       C105 +
                   (C4763 * C123 + C4759 * C134 + C4764 * C300 + C4760 * C314 +
                    C4765 * C305 + C4761 * C324) *
                       C118 +
                   (C4763 * C135 + C4759 * C144 + C4764 * C315 + C4760 * C330 +
                    C4765 * C325 + C4761 * C335) *
                       C106) *
                  C31397 * C31184 * C31218 * C31206) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C293 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C287 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C294 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C288 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C295 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31541 +
                   ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                     C4765 * C1162 + C4761 * C1170) *
                        C294 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C287 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C293) +
                    (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                     C4765 * C1169 + C4761 * C1180) *
                        C288 -
                    (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                     C4760 * C320 + C4763 * C298 + C4759 * C310) *
                        C295 -
                    (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                     C4760 * C333 + C4763 * C311 + C4759 * C328) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31529 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C293 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C287 -
                    (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                     C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                        C294 -
                    (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                     C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                        C288 +
                    (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                     C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                        C295 +
                    (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                     C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C293 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C287 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C294 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C288 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C295 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C31542 +
                   ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
                     C4765 * C1299 + C4761 * C1313) *
                        C294 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C287 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C293) +
                    (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
                     C4765 * C1312 + C4761 * C1326) *
                        C288 -
                    (C4765 * C1298 + C4761 * C1311 + C4764 * C937 +
                     C4760 * C944 + C4763 * C487 + C4759 * C499) *
                        C295 -
                    (C4765 * C1310 + C4761 * C1325 + C4764 * C945 +
                     C4760 * C952 + C4763 * C500 + C4759 * C517) *
                        C31497) *
                       C31397 * C31184 * C31531 +
                   ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                     C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                        C293 +
                    (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                     C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                        C287 -
                    (C4765 * C1302 + C4761 * C1318 + C4764 * C1296 +
                     C4760 * C1307 + C4763 * C491 + C4759 * C507) *
                        C294 -
                    (C4765 * C1319 + C4761 * C1329 + C4764 * C1306 +
                     C4760 * C1323 + C4763 * C508 + C4759 * C521) *
                        C288 +
                    (C4763 * C492 + C4759 * C509 + C4764 * C1295 +
                     C4760 * C1305 + C4765 * C1303 + C4761 * C1320) *
                        C295 +
                    (C4763 * C510 + C4759 * C522 + C4764 * C1304 +
                     C4760 * C1322 + C4765 * C1321 + C4761 * C1330) *
                        C31497) *
                       C31397 * C31184 * C31507) *
                  C31206) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1089 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31538 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C1090 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C31525 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C1091 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C31218 * C1086 +
                   ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                     C4765 * C1162 + C4761 * C1170) *
                        C1090 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31538 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1089) +
                    (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                     C4765 * C1169 + C4761 * C1180) *
                        C31525 -
                    (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                     C4760 * C320 + C4763 * C298 + C4759 * C310) *
                        C1091 -
                    (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                     C4760 * C333 + C4763 * C311 + C4759 * C328) *
                        C31497) *
                       C31397 * C31184 * C31218 * C1087 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C1089 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31538 -
                    (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                     C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                        C1090 -
                    (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                     C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                        C31525 +
                    (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                     C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                        C1091 +
                    (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                     C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1160 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31155) *
                       C31397 * C31184 * C31218 * C1155 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C31155 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C1160) *
                       C31397 * C31184 * C31218 * C1156 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C1160 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31155) *
                       C31397 * C31184 * C31218 * C1157 -
                   ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 +
                     C4760 * C1182 + C4763 * C1171 + C4759 * C1181) *
                        C31155 +
                    (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 +
                     C4760 * C1173 + C4763 * C1163 + C4759 * C1172) *
                        C1160) *
                       C31397 * C31184 * C31218 * C1158 +
                   ((C4763 * C1164 + C4759 * C1173 + C4764 * C5500 +
                     C4760 * C5503 + C4765 * C5501 + C4761 * C5504) *
                        C1160 +
                    (C4763 * C1174 + C4759 * C1182 + C4764 * C5502 +
                     C4760 * C5506 + C4765 * C5505 + C4761 * C5507) *
                        C31155) *
                       C31397 * C31184 * C31218 * C1159)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4763 * C119 + C4759 * C126 + C4764 * C297 +
                      C4760 * C308 + C4765 * C301 + C4761 * C316) *
                         C1160 +
                     (C4763 * C127 + C4759 * C140 + C4764 * C307 +
                      C4760 * C326 + C4765 * C317 + C4761 * C331) *
                         C31155) *
                        C31397 * C31184 * C31542 -
                    ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 +
                      C4760 * C950 + C4763 * C496 + C4759 * C515) *
                         C31155 +
                     (C4765 * C1300 + C4761 * C1315 + C4764 * C935 +
                      C4760 * C940 + C4763 * C486 + C4759 * C497) *
                         C1160) *
                        C31397 * C31184 * C31531 +
                    ((C4763 * C490 + C4759 * C505 + C4764 * C1297 +
                      C4760 * C1309 + C4765 * C1301 + C4761 * C1316) *
                         C1160 +
                     (C4763 * C506 + C4759 * C520 + C4764 * C1308 +
                      C4760 * C1324 + C4765 * C1317 + C4761 * C1328) *
                         C31155) *
                        C31397 * C31184 * C31507) *
                       C1086 +
                   (((C4763 * C935 + C4759 * C940 + C4764 * C1300 +
                      C4760 * C1315 + C4765 * C1713 + C4761 * C1716) *
                         C1160 +
                     (C4763 * C941 + C4759 * C950 + C4764 * C1314 +
                      C4760 * C1327 + C4765 * C1717 + C4761 * C1722) *
                         C31155) *
                        C31397 * C31184 * C31531 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31155 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1160) *
                        C31397 * C31184 * C31542 -
                    ((C4765 * C5621 + C4761 * C5627 + C4764 * C1317 +
                      C4760 * C1328 + C4763 * C1308 + C4759 * C1324) *
                         C31155 +
                     (C4765 * C5618 + C4761 * C5622 + C4764 * C1301 +
                      C4760 * C1316 + C4763 * C1297 + C4759 * C1309) *
                         C1160) *
                        C31397 * C31184 * C31507) *
                       C1087 +
                   (((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                      C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                         C1160 +
                     (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                      C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                         C31155) *
                        C31397 * C31184 * C31542 -
                    ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 +
                      C4760 * C1722 + C4763 * C1314 + C4759 * C1327) *
                         C31155 +
                     (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 +
                      C4760 * C1716 + C4763 * C1300 + C4759 * C1315) *
                         C1160) *
                        C31397 * C31184 * C31531 +
                    ((C4763 * C1301 + C4759 * C1316 + C4764 * C5618 +
                      C4760 * C5622 + C4765 * C5620 + C4761 * C5625) *
                         C1160 +
                     (C4763 * C1317 + C4759 * C1328 + C4764 * C5621 +
                      C4760 * C5627 + C4765 * C5626 + C4761 * C5629) *
                         C31155) *
                        C31397 * C31184 * C31507) *
                       C31504)) /
                     (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31383 * C126) * C665 +
            (C113 * C127 + C31383 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31508) *
               C31397 * C108 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31508) *
               C31397 * C109 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31508) *
               C31397 * C110) *
              C31476 +
          ((C550 * C666 -
            ((C113 * C496 + C31383 * C515) * C659 +
             (C113 * C486 + C31383 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C31508) *
               C31397 * C108 +
           (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
            C554 * C667 - C555 * C661 + C788 * C668 + C789 * C31508) *
               C31397 * C109 +
           (C554 * C666 - (C553 * C659 + C552 * C665) + C555 * C660 -
            C788 * C667 - C789 * C661 + (C113 * C779 + C31383 * C780) * C668 +
            (C113 * C781 + C31383 * C782) * C31508) *
               C31397 * C110) *
              C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31383 * C126) * C30274 +
             (C113 * C127 + C31383 * C140) * C31457 - C168 * C30255 -
             C169 * C31165) *
                C31397 * C108 +
            (C168 * C30274 + C169 * C31457 - C170 * C30255 - C171 * C31165) *
                C31397 * C109 +
            (C170 * C30274 + C171 * C31457 - C172 * C30255 - C173 * C31165) *
                C31397 * C110) *
               C31476 +
           ((C550 * C30255 -
             ((C113 * C496 + C31383 * C515) * C31457 +
              (C113 * C486 + C31383 * C497) * C30274) +
             C551 * C31165) *
                C31397 * C108 +
            (C552 * C30255 - (C551 * C31457 + C550 * C30274) + C553 * C31165) *
                C31397 * C109 +
            (C554 * C30255 - (C553 * C31457 + C552 * C30274) + C555 * C31165) *
                C31397 * C110) *
               C31305) *
              C1086 +
          (((C361 * C30255 -
             ((C113 * C307 + C31383 * C326) * C31457 +
              (C113 * C297 + C31383 * C308) * C30274) +
             C362 * C31165) *
                C31397 * C108 +
            (C363 * C30255 - (C362 * C31457 + C361 * C30274) + C364 * C31165) *
                C31397 * C109 +
            (C365 * C30255 - (C364 * C31457 + C363 * C30274) + C366 * C31165) *
                C31397 * C110) *
               C31476 +
           (((C113 * C935 + C31383 * C940) * C30274 +
             (C113 * C941 + C31383 * C950) * C31457 - C968 * C30255 -
             C969 * C31165) *
                C31397 * C108 +
            (C968 * C30274 + C969 * C31457 - C970 * C30255 - C971 * C31165) *
                C31397 * C109 +
            (C970 * C30274 + C971 * C31457 - C972 * C30255 - C973 * C31165) *
                C31397 * C110) *
               C31305) *
              C1087 +
          ((((C113 * C301 + C31383 * C316) * C30274 +
             (C113 * C317 + C31383 * C331) * C31457 - C367 * C30255 -
             C368 * C31165) *
                C31397 * C108 +
            (C367 * C30274 + C368 * C31457 - C369 * C30255 - C370 * C31165) *
                C31397 * C109 +
            (C369 * C30274 + C370 * C31457 - C371 * C30255 - C372 * C31165) *
                C31397 * C110) *
               C31476 +
           ((C1612 * C30255 -
             ((C113 * C1314 + C31383 * C1327) * C31457 +
              (C113 * C1300 + C31383 * C1315) * C30274) +
             C1613 * C31165) *
                C31397 * C108 +
            (C1614 * C30255 - (C1613 * C31457 + C1612 * C30274) +
             C1615 * C31165) *
                C31397 * C109 +
            ((C113 * C1599 + C31383 * C1600) * C30255 -
             (C1615 * C31457 + C1614 * C30274) +
             (C113 * C1601 + C31383 * C1602) * C31165) *
                C31397 * C110) *
               C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
            C4765 * C301 + C4761 * C316) *
               C665 +
           (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
            C4765 * C317 + C4761 * C331) *
               C659 -
           (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
            C4763 * C120 + C4759 * C128) *
               C666 -
           (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
            C4763 * C129 + C4759 * C141) *
               C660 +
           (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
            C4765 * C303 + C4761 * C320) *
               C667 +
           (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
            C4765 * C321 + C4761 * C333) *
               C661 -
           (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
            C4763 * C122 + C4759 * C132) *
               C668 -
           (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
            C4763 * C133 + C4759 * C143) *
               C31508) *
              C31397 * C31184 * C31476 +
          ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
            C4765 * C1299 + C4761 * C1313) *
               C666 -
           ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
             C4763 * C496 + C4759 * C515) *
                C659 +
            (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
             C4763 * C486 + C4759 * C497) *
                C665) +
           (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
            C4765 * C1312 + C4761 * C1326) *
               C660 -
           (C4765 * C1298 + C4761 * C1311 + C4764 * C937 + C4760 * C944 +
            C4763 * C487 + C4759 * C499) *
               C667 -
           (C4765 * C1310 + C4761 * C1325 + C4764 * C945 + C4760 * C952 +
            C4763 * C500 + C4759 * C517) *
               C661 +
           (C4763 * C488 + C4759 * C501 + C4764 * C938 + C4760 * C946 +
            C4765 * C1599 + C4761 * C1600) *
               C668 +
           (C4763 * C502 + C4759 * C518 + C4764 * C947 + C4760 * C953 +
            C4765 * C1601 + C4761 * C1602) *
               C31508) *
              C31397 * C31184 * C31305) *
         C31206) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
             C4765 * C301 + C4761 * C316) *
                C30274 +
            (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
             C4765 * C317 + C4761 * C331) *
                C31457 -
            (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
             C4763 * C120 + C4759 * C128) *
                C30255 -
            (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
             C4763 * C129 + C4759 * C141) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C485 + C4759 * C495 + C4764 * C936 + C4760 * C942 +
             C4765 * C1299 + C4761 * C1313) *
                C30255 -
            ((C4765 * C1314 + C4761 * C1327 + C4764 * C941 + C4760 * C950 +
              C4763 * C496 + C4759 * C515) *
                 C31457 +
             (C4765 * C1300 + C4761 * C1315 + C4764 * C935 + C4760 * C940 +
              C4763 * C486 + C4759 * C497) *
                 C30274) +
            (C4763 * C498 + C4759 * C516 + C4764 * C943 + C4760 * C951 +
             C4765 * C1312 + C4761 * C1326) *
                C31165) *
               C31397 * C31184 * C31305) *
              C1086 +
          (((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
             C4765 * C1162 + C4761 * C1170) *
                C30255 -
            ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 + C4760 * C331 +
              C4763 * C307 + C4759 * C326) *
                 C31457 +
             (C4765 * C1163 + C4761 * C1172 + C4764 * C301 + C4760 * C316 +
              C4763 * C297 + C4759 * C308) *
                 C30274) +
            (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
             C4765 * C1169 + C4761 * C1180) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C935 + C4759 * C940 + C4764 * C1300 + C4760 * C1315 +
             C4765 * C1713 + C4761 * C1716) *
                C30274 +
            (C4763 * C941 + C4759 * C950 + C4764 * C1314 + C4760 * C1327 +
             C4765 * C1717 + C4761 * C1722) *
                C31457 -
            (C4765 * C1714 + C4761 * C1718 + C4764 * C1299 + C4760 * C1313 +
             C4763 * C936 + C4759 * C942) *
                C30255 -
            (C4765 * C1719 + C4761 * C1723 + C4764 * C1312 + C4760 * C1326 +
             C4763 * C943 + C4759 * C951) *
                C31165) *
               C31397 * C31184 * C31305) *
              C1087 +
          (((C4763 * C301 + C4759 * C316 + C4764 * C1163 + C4760 * C1172 +
             C4765 * C1164 + C4761 * C1173) *
                C30274 +
            (C4763 * C317 + C4759 * C331 + C4764 * C1171 + C4760 * C1181 +
             C4765 * C1174 + C4761 * C1182) *
                C31457 -
            (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 + C4760 * C1170 +
             C4763 * C302 + C4759 * C318) *
                C30255 -
            (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 + C4760 * C1180 +
             C4763 * C319 + C4759 * C332) *
                C31165) *
               C31397 * C31184 * C31476 +
           ((C4763 * C1299 + C4759 * C1313 + C4764 * C1714 + C4760 * C1718 +
             C4765 * C5878 + C4761 * C5879) *
                C30255 -
            ((C4765 * C5623 + C4761 * C5628 + C4764 * C1717 + C4760 * C1722 +
              C4763 * C1314 + C4759 * C1327) *
                 C31457 +
             (C4765 * C5619 + C4761 * C5624 + C4764 * C1713 + C4760 * C1716 +
              C4763 * C1300 + C4759 * C1315) *
                 C30274) +
            (C4763 * C1312 + C4759 * C1326 + C4764 * C1719 + C4760 * C1723 +
             C4765 * C5880 + C4761 * C5881) *
                C31165) *
               C31397 * C31184 * C31305) *
              C31504)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C119 + C31383 * C126) * C114 +
                    (C113 * C127 + C31383 * C140) * C102 - C168 * C115 -
                    C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                    C173 * C105 + C174 * C118 + C175 * C106) *
                       C31397 * C108 +
                   (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                    C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                    C176 * C118 + C177 * C106) *
                       C31397 * C109 +
                   (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                    C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                    (C113 * C125 + C31383 * C138) * C118 +
                    (C113 * C139 + C31383 * C146) * C106) *
                       C31397 * C110) *
                  C31218 * C31206) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C293 +
                     (C113 * C127 + C31383 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C31497) *
                        C31397 * C108 +
                    (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                     C172 * C295 + C173 * C31497) *
                        C31397 * C109 +
                    (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                     C174 * C295 + C175 * C31497) *
                        C31397 * C110) *
                       C31218 * C31541 +
                   ((C361 * C294 -
                     ((C113 * C307 + C31383 * C326) * C287 +
                      (C113 * C297 + C31383 * C308) * C293) +
                     C362 * C288 - C363 * C295 - C364 * C31497) *
                        C31397 * C108 +
                    (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                     C365 * C295 - C366 * C31497) *
                        C31397 * C109 +
                    (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                     (C113 * C300 + C31383 * C314) * C295 -
                     (C113 * C315 + C31383 * C330) * C31497) *
                        C31397 * C110) *
                       C31218 * C31529 +
                   (((C113 * C301 + C31383 * C316) * C293 +
                     (C113 * C317 + C31383 * C331) * C287 - C367 * C294 -
                     C368 * C288 + C369 * C295 + C370 * C31497) *
                        C31397 * C108 +
                    (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                     C371 * C295 + C372 * C31497) *
                        C31397 * C109 +
                    (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                     (C113 * C305 + C31383 * C324) * C295 +
                     (C113 * C325 + C31383 * C335) * C31497) *
                        C31397 * C110) *
                       C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C1089 +
                     (C113 * C127 + C31383 * C140) * C31538 - C168 * C1090 -
                     C169 * C31525 + C170 * C1091 + C171 * C31497) *
                        C31397 * C108 +
                    (C168 * C1089 + C169 * C31538 - C170 * C1090 -
                     C171 * C31525 + C172 * C1091 + C173 * C31497) *
                        C31397 * C109 +
                    (C170 * C1089 + C171 * C31538 - C172 * C1090 -
                     C173 * C31525 + C174 * C1091 + C175 * C31497) *
                        C31397 * C110) *
                       C31218 * C1086 +
                   ((C361 * C1090 -
                     ((C113 * C307 + C31383 * C326) * C31538 +
                      (C113 * C297 + C31383 * C308) * C1089) +
                     C362 * C31525 - C363 * C1091 - C364 * C31497) *
                        C31397 * C108 +
                    (C363 * C1090 - (C362 * C31538 + C361 * C1089) +
                     C364 * C31525 - C365 * C1091 - C366 * C31497) *
                        C31397 * C109 +
                    (C365 * C1090 - (C364 * C31538 + C363 * C1089) +
                     C366 * C31525 - C678 * C1091 - C679 * C31497) *
                        C31397 * C110) *
                       C31218 * C1087 +
                   (((C113 * C301 + C31383 * C316) * C1089 +
                     (C113 * C317 + C31383 * C331) * C31538 - C367 * C1090 -
                     C368 * C31525 + C369 * C1091 + C370 * C31497) *
                        C31397 * C108 +
                    (C367 * C1089 + C368 * C31538 - C369 * C1090 -
                     C370 * C31525 + C371 * C1091 + C372 * C31497) *
                        C31397 * C109 +
                    (C369 * C1089 + C370 * C31538 - C371 * C1090 -
                     C372 * C31525 + (C113 * C305 + C31383 * C324) * C1091 +
                     (C113 * C325 + C31383 * C335) * C31497) *
                        C31397 * C110) *
                       C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C119 + C31383 * C126) * C1160 +
                     (C113 * C127 + C31383 * C140) * C31155) *
                        C31397 * C108 +
                    (C168 * C1160 + C169 * C31155) * C31397 * C109 +
                    (C170 * C1160 + C171 * C31155) * C31397 * C110) *
                       C31218 * C1155 -
                   ((C364 * C31155 + C363 * C1160) * C31397 * C110 +
                    (C362 * C31155 + C361 * C1160) * C31397 * C109 +
                    ((C113 * C307 + C31383 * C326) * C31155 +
                     (C113 * C297 + C31383 * C308) * C1160) *
                        C31397 * C108) *
                       C31218 * C1156 +
                   (((C113 * C301 + C31383 * C316) * C1160 +
                     (C113 * C317 + C31383 * C331) * C31155) *
                        C31397 * C108 +
                    (C367 * C1160 + C368 * C31155) * C31397 * C109 +
                    (C369 * C1160 + C370 * C31155) * C31397 * C110) *
                       C31218 * C1157 -
                   (((C113 * C1167 + C31383 * C1179) * C31155 +
                     (C113 * C1161 + C31383 * C1168) * C1160) *
                        C31397 * C110 +
                    ((C113 * C1169 + C31383 * C1180) * C31155 +
                     (C113 * C1162 + C31383 * C1170) * C1160) *
                        C31397 * C109 +
                    ((C113 * C1171 + C31383 * C1181) * C31155 +
                     (C113 * C1163 + C31383 * C1172) * C1160) *
                        C31397 * C108) *
                       C31218 * C1158 +
                   (((C113 * C1164 + C31383 * C1173) * C1160 +
                     (C113 * C1174 + C31383 * C1182) * C31155) *
                        C31397 * C108 +
                    ((C113 * C1165 + C31383 * C1175) * C1160 +
                     (C113 * C1176 + C31383 * C1183) * C31155) *
                        C31397 * C109 +
                    ((C113 * C1166 + C31383 * C1177) * C1160 +
                     (C113 * C1178 + C31383 * C1184) * C31155) *
                        C31397 * C110) *
                       C31218 * C1159)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                    C4765 * C301 + C4761 * C316) *
                       C114 +
                   (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                    C4765 * C317 + C4761 * C331) *
                       C102 -
                   (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                    C4763 * C120 + C4759 * C128) *
                       C115 -
                   (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                    C4763 * C129 + C4759 * C141) *
                       C103 +
                   (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                    C4765 * C303 + C4761 * C320) *
                       C116 +
                   (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                    C4765 * C321 + C4761 * C333) *
                       C104 -
                   (C4765 * C304 + C4761 * C322 + C4764 * C299 + C4760 * C312 +
                    C4763 * C122 + C4759 * C132) *
                       C117 -
                   (C4765 * C323 + C4761 * C334 + C4764 * C313 + C4760 * C329 +
                    C4763 * C133 + C4759 * C143) *
                       C105 +
                   (C4763 * C123 + C4759 * C134 + C4764 * C300 + C4760 * C314 +
                    C4765 * C305 + C4761 * C324) *
                       C118 +
                   (C4763 * C135 + C4759 * C144 + C4764 * C315 + C4760 * C330 +
                    C4765 * C325 + C4761 * C335) *
                       C106) *
                  C31397 * C31184 * C31218 * C31206) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C293 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C287 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C294 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C288 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C295 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31541 +
                   ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                     C4765 * C1162 + C4761 * C1170) *
                        C294 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C287 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C293) +
                    (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                     C4765 * C1169 + C4761 * C1180) *
                        C288 -
                    (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                     C4760 * C320 + C4763 * C298 + C4759 * C310) *
                        C295 -
                    (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                     C4760 * C333 + C4763 * C311 + C4759 * C328) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31529 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C293 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C287 -
                    (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                     C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                        C294 -
                    (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                     C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                        C288 +
                    (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                     C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                        C295 +
                    (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                     C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1089 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31538 -
                    (C4765 * C302 + C4761 * C318 + C4764 * C296 + C4760 * C306 +
                     C4763 * C120 + C4759 * C128) *
                        C1090 -
                    (C4765 * C319 + C4761 * C332 + C4764 * C309 + C4760 * C327 +
                     C4763 * C129 + C4759 * C141) *
                        C31525 +
                    (C4763 * C121 + C4759 * C130 + C4764 * C298 + C4760 * C310 +
                     C4765 * C303 + C4761 * C320) *
                        C1091 +
                    (C4763 * C131 + C4759 * C142 + C4764 * C311 + C4760 * C328 +
                     C4765 * C321 + C4761 * C333) *
                        C31497) *
                       C31397 * C31184 * C31218 * C1086 +
                   ((C4763 * C296 + C4759 * C306 + C4764 * C302 + C4760 * C318 +
                     C4765 * C1162 + C4761 * C1170) *
                        C1090 -
                    ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                      C4760 * C331 + C4763 * C307 + C4759 * C326) *
                         C31538 +
                     (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                      C4760 * C316 + C4763 * C297 + C4759 * C308) *
                         C1089) +
                    (C4763 * C309 + C4759 * C327 + C4764 * C319 + C4760 * C332 +
                     C4765 * C1169 + C4761 * C1180) *
                        C31525 -
                    (C4765 * C1161 + C4761 * C1168 + C4764 * C303 +
                     C4760 * C320 + C4763 * C298 + C4759 * C310) *
                        C1091 -
                    (C4765 * C1167 + C4761 * C1179 + C4764 * C321 +
                     C4760 * C333 + C4763 * C311 + C4759 * C328) *
                        C31497) *
                       C31397 * C31184 * C31218 * C1087 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C1089 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31538 -
                    (C4765 * C1165 + C4761 * C1175 + C4764 * C1162 +
                     C4760 * C1170 + C4763 * C302 + C4759 * C318) *
                        C1090 -
                    (C4765 * C1176 + C4761 * C1183 + C4764 * C1169 +
                     C4760 * C1180 + C4763 * C319 + C4759 * C332) *
                        C31525 +
                    (C4763 * C303 + C4759 * C320 + C4764 * C1161 +
                     C4760 * C1168 + C4765 * C1166 + C4761 * C1177) *
                        C1091 +
                    (C4763 * C321 + C4759 * C333 + C4764 * C1167 +
                     C4760 * C1179 + C4765 * C1178 + C4761 * C1184) *
                        C31497) *
                       C31397 * C31184 * C31218 * C31504)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C4763 * C119 + C4759 * C126 + C4764 * C297 + C4760 * C308 +
                     C4765 * C301 + C4761 * C316) *
                        C1160 +
                    (C4763 * C127 + C4759 * C140 + C4764 * C307 + C4760 * C326 +
                     C4765 * C317 + C4761 * C331) *
                        C31155) *
                       C31397 * C31184 * C31218 * C1155 -
                   ((C4765 * C1171 + C4761 * C1181 + C4764 * C317 +
                     C4760 * C331 + C4763 * C307 + C4759 * C326) *
                        C31155 +
                    (C4765 * C1163 + C4761 * C1172 + C4764 * C301 +
                     C4760 * C316 + C4763 * C297 + C4759 * C308) *
                        C1160) *
                       C31397 * C31184 * C31218 * C1156 +
                   ((C4763 * C301 + C4759 * C316 + C4764 * C1163 +
                     C4760 * C1172 + C4765 * C1164 + C4761 * C1173) *
                        C1160 +
                    (C4763 * C317 + C4759 * C331 + C4764 * C1171 +
                     C4760 * C1181 + C4765 * C1174 + C4761 * C1182) *
                        C31155) *
                       C31397 * C31184 * C31218 * C1157 -
                   ((C4765 * C5502 + C4761 * C5506 + C4764 * C1174 +
                     C4760 * C1182 + C4763 * C1171 + C4759 * C1181) *
                        C31155 +
                    (C4765 * C5500 + C4761 * C5503 + C4764 * C1164 +
                     C4760 * C1173 + C4763 * C1163 + C4759 * C1172) *
                        C1160) *
                       C31397 * C31184 * C31218 * C1158 +
                   ((C4763 * C1164 + C4759 * C1173 + C4764 * C5500 +
                     C4760 * C5503 + C4765 * C5501 + C4761 * C5504) *
                        C1160 +
                    (C4763 * C1174 + C4759 * C1182 + C4764 * C5502 +
                     C4760 * C5506 + C4765 * C5505 + C4761 * C5507) *
                        C31155) *
                       C31397 * C31184 * C31218 * C1159)) /
                     (p * q * std::sqrt(p + q));
}
