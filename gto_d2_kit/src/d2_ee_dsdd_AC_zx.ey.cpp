/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_dsdd_AC_zx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2022_13_31(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C30248 = 0 * ce;
    const double C30247 = ce * de;
    const double C30246 = 0 * de;
    const double C30245 = 0 * de;
    const double C30244 = ce + de;
    const double C30243 = 0 * de;
    const double C30242 = xC - xD;
    const double C30303 = 0 * de;
    const double C30368 = ae * be;
    const double C30367 = 0 * be;
    const double C30366 = zA - zB;
    const double C30365 = ae + be;
    const double C30387 = zP - zQ;
    const double C30386 = p + q;
    const double C30385 = p * q;
    const double C30384 = xP - xQ;
    const double C30392 = bs[3];
    const double C30403 = bs[4];
    const double C30411 = bs[5];
    const double C30430 = bs[6];
    const double C30460 = bs[7];
    const double C30586 = yP - yQ;
    const double C30854 = bs[2];
    const double C119 = bs[0];
    const double C31289 = xA - xB;
    const double C31313 = yC - yD;
    const double C31325 = zC - zD;
    const double C31493 = yA - yB;
    const double C30255 = C30248 / C30244;
    const double C30252 = C30246 / C30244;
    const double C30250 = 2 * C30244;
    const double C30249 = std::pow(C30244, 2);
    const double C30254 = C30247 * C30242;
    const double C30253 = C30242 * C30246;
    const double C30251 = C30242 * C30245;
    const double C31263 = C30242 * de;
    const double C31262 = C30242 * ce;
    const double C31261 = std::pow(C30242, 2);
    const double C30304 = C30303 / C30244;
    const double C30370 = C30368 * C30366;
    const double C31505 = std::pow(C30366, 2);
    const double C31602 = C30366 * be;
    const double C30369 = 2 * C30365;
    const double C30395 = C30244 * C30365;
    const double C140 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (zP - zQ) * (xP - xQ) * ae * ce) /
                         C30244) /
                        C30365;
    const double C31580 = std::pow(C30365, 2);
    const double C30393 = C30387 * ae;
    const double C30628 = std::pow(C30387, 2);
    const double C30388 = 2 * C30385;
    const double C30394 = C30387 * C30384;
    const double C30413 = std::pow(C30384, 2);
    const double C30504 = C30384 * ce;
    const double C30595 = std::pow(C30586, 2);
    const double C31290 = std::pow(C31289, 2);
    const double C31579 = C31289 * be;
    const double C31314 = std::pow(C31313, 2);
    const double C31369 = C31313 * de;
    const double C31367 = C31313 * ce;
    const double C31326 = std::pow(C31325, 2);
    const double C31409 = C31325 * de;
    const double C31407 = C31325 * ce;
    const double C31494 = std::pow(C31493, 2);
    const double C31601 = C31493 * be;
    const double C31275 = std::pow(C30250, -1);
    const double C31574 = std::pow(C30250, -2);
    const double C30256 = 2 * C30249;
    const double C31578 = C30249 * C30250;
    const double C31577 = 4 * C30249;
    const double C30258 = C30253 / C30244;
    const double C30257 = C30251 / C30244;
    const double C31567 = std::pow(C31262, 2);
    const double C31264 = C31261 * C30247;
    const double C31506 = C31505 * C30368;
    const double C31582 = std::pow(C30369, -2);
    const double C31581 = std::pow(C30369, -1);
    const double C30397 = C30392 * C30393;
    const double C30405 = C30403 * C30393;
    const double C30416 = C30411 * C30393;
    const double C30436 = C30430 * C30393;
    const double C30468 = C30460 * C30393;
    const double C30389 = C30388 / C30386;
    const double C126 = (-(bs[1] * C30393 * C30388) / C30386) / C30365;
    const double C120 = -(C30384 * bs[1] * C30388) / C30386;
    const double C297 = -(C30586 * bs[1] * C30388) / C30386;
    const double C486 = -(C30387 * bs[1] * C30388) / C30386;
    const double C30398 = C30394 * ae;
    const double C30507 = C30403 * C30504;
    const double C30511 = C30411 * C30504;
    const double C30521 = C30392 * C30504;
    const double C30534 = C30430 * C30504;
    const double C30554 = C30460 * C30504;
    const double C127 = (bs[1] * C30504 * C30388) / (C30386 * C30244);
    const double C31291 = C31290 * C30368;
    const double C31315 = C31314 * C30247;
    const double C31583 = std::pow(C31367, 2);
    const double C31327 = C31326 * C30247;
    const double C31585 = std::pow(C31407, 2);
    const double C31495 = C31494 * C30368;
    const double C30265 = C30246 / C30256;
    const double C30262 = C30245 / C30256;
    const double C30261 = C30243 / C30256;
    const double C31612 = 4 * C31578;
    const double C31611 = C30244 * C31577;
    const double C30263 = 0 - C30258;
    const double C30260 = 0 - C30257;
    const double C31265 = C31264 / C30244;
    const double C31507 = C31506 / C30365;
    const double C30391 = -C30389;
    const double C30402 = std::pow(C30389, 4);
    const double C30429 = std::pow(C30389, 6);
    const double C141 =
        (-(C30384 * std::pow(-C30389, 3) * bs[3] * C30387 * C30384 * ae * ce) /
         C30244) /
            C30365 -
        (std::pow(C30389, 2) * bs[2] * C30387 * ae * ce) / (C30244 * C30365);
    const double C30855 = std::pow(C30389, 2);
    const double C128 =
        (C30384 * std::pow(C30389, 2) * bs[2] * C30393) / C30365;
    const double C129 =
        (ce * bs[1] * C30388) / (C30386 * C30244) -
        (C30384 * std::pow(C30389, 2) * bs[2] * C30504) / C30244;
    const double C30400 = C30398 * ce;
    const double C31292 = C31291 / C30365;
    const double C31316 = C31315 / C30244;
    const double C31328 = C31327 / C30244;
    const double C31496 = C31495 / C30365;
    const double C30268 = C30263 * ce;
    const double C30267 = C30260 * ce;
    const double C31266 = -C31265;
    const double C31508 = -C31507;
    const double C30396 = std::pow(C30391, 3);
    const double C30410 = std::pow(C30391, 5);
    const double C30459 = std::pow(C30391, 7);
    const double C30407 = C30402 * C30405;
    const double C30508 = C30403 * C30402;
    const double C30509 = C30402 * C30507;
    const double C30439 = C30429 * C30436;
    const double C30539 = C30429 * C30534;
    const double C30555 = C30430 * C30429;
    const double C30856 = C30854 * C30855;
    const double C307 = -(C30586 * C30855 * C30854 * C30504) / C30244;
    const double C308 = (C30586 * C30855 * C30854 * C30393) / C30365;
    const double C496 = -(C30387 * C30855 * C30854 * C30504) / C30244;
    const double C497 = (C30387 * C30855 * C30854 * C30393) / C30365 -
                        (ae * bs[1] * C30388) / (C30386 * C30365);
    const double C30404 = C30403 * C30400;
    const double C30414 = C30411 * C30400;
    const double C30433 = C30430 * C30400;
    const double C30465 = C30460 * C30400;
    const double C31293 = -C31292;
    const double C31317 = -C31316;
    const double C31329 = -C31328;
    const double C31497 = -C31496;
    const double C30272 = C30268 / C30244;
    const double C30271 = C30267 / C30244;
    const double C31267 = std::exp(C31266);
    const double C31509 = std::exp(C31508);
    const double C30399 = C30396 * C30397;
    const double C30505 = C30392 * C30396;
    const double C30522 = C30396 * C30521;
    const double C326 =
        (-((yP - yQ) * C30396 * C30392 * C30400) / C30244) / C30365;
    const double C515 =
        (-(C30387 * C30396 * C30392 * C30400) / C30244) / C30365 -
        (ae * std::pow(C30389, 2) * bs[2] * C30384 * ce) / C30395;
    const double C30418 = C30410 * C30416;
    const double C30514 = C30411 * C30410;
    const double C30515 = C30410 * C30511;
    const double C30472 = C30459 * C30468;
    const double C30559 = C30459 * C30554;
    const double C30412 = C30407 * ce;
    const double C30409 = C30384 * C30407;
    const double C30984 = C30387 * C30407;
    const double C31013 = C30586 * C30407;
    const double C30513 = C30384 * C30508;
    const double C30512 = C30508 * ce;
    const double C30862 = C30508 * C30413;
    const double C30956 = C30508 * C30595;
    const double C30987 = C30508 * C30628;
    const double C31014 = C30586 * C30508;
    const double C31097 = C30387 * C30508;
    const double C31096 = C30508 * ae;
    const double C30524 = C30384 * C30509;
    const double C30603 = C30586 * C30509;
    const double C30627 = ae * C30509;
    const double C30625 = C30387 * C30509;
    const double C30442 = C30439 * C30413;
    const double C30461 = C30439 * ce;
    const double C30457 = C30384 * C30439;
    const double C31030 = C30439 * C30595;
    const double C31110 = C30387 * C30439;
    const double C31157 = C30586 * C30439;
    const double C30542 = C30384 * C30539;
    const double C30683 = C30539 * C30595;
    const double C30692 = C30586 * C30539;
    const double C30742 = C30539 * C30628;
    const double C30766 = ae * C30539;
    const double C30764 = C30387 * C30539;
    const double C30562 = C30555 * C30413;
    const double C30561 = C30384 * C30555;
    const double C30560 = C30555 * ce;
    const double C31048 = C30555 * C30595;
    const double C31114 = C30555 * C30628;
    const double C31160 = C30586 * C30555;
    const double C121 = C30856 * C30413 - (bs[1] * C30388) / C30386;
    const double C296 = C30586 * C30384 * C30856;
    const double C301 = C30856 * C30595 - (bs[1] * C30388) / C30386;
    const double C485 = C30387 * C30384 * C30856;
    const double C490 = C30856 * C30628 - (bs[1] * C30388) / C30386;
    const double C935 = C30387 * C30586 * C30856;
    const double C30406 = C30402 * C30404;
    const double C30417 = C30410 * C30414;
    const double C30438 = C30429 * C30433;
    const double C30471 = C30459 * C30465;
    const double C31294 = std::exp(C31293);
    const double C31318 = std::exp(C31317);
    const double C31330 = std::exp(C31329);
    const double C31498 = std::exp(C31497);
    const double C30276 = C30272 - C30262;
    const double C30275 = C30271 - C30261;
    const double C30259 = C30254 * C31267;
    const double C31269 = C31267 * C31262;
    const double C31268 = C31267 / C30250;
    const double C31277 = C31275 * C31267;
    const double C31570 = C31267 * C31263;
    const double C31609 = C31574 * C31267;
    const double C31603 = C31267 * C31567;
    const double C151 = C31509 * C141;
    const double C149 = C31509 * C128;
    const double C4875 = C31509 * C308;
    const double C30371 = C30370 * C31509;
    const double C113 = -(2 * ae * be * (zA - zB) * C31509) / (ae + be);
    const double C31634 = C31509 * C31602;
    const double C9301 =
        (C31509 * std::pow(C31602, 2)) / C31580 + C31509 / C30369;
    const double C9303 = C31582 * C31509;
    const double C19048 = C31581 * C31509;
    const double C142 =
        (-(C30384 * C30399 * ce) / C30244) / C30365 -
        (C30396 * C30392 * C30400) / C30395 +
        C30384 * ((-(C30384 * std::pow(C30389, 4) * bs[4] * C30400) / C30244) /
                      C30365 -
                  (C30399 * ce) / C30395);
    const double C130 =
        (std::pow(C30389, 2) * bs[2] * C30393 + C30399 * C30413) / C30365;
    const double C132 =
        (2 * C30384 * C30399 + C30384 * (C30399 + C30407 * C30413)) / C30365;
    const double C306 = (C30586 * C30384 * C30399) / C30365;
    const double C310 = (C30586 * (C30399 + C30407 * C30413)) / C30365;
    const double C316 = (C30855 * C30854 * C30393 + C30399 * C30595) / C30365;
    const double C495 =
        (C30387 * C30384 * C30399 + C30384 * C30856 * ae) / C30365;
    const double C505 =
        (C30855 * C30854 * C30393 + C30387 * (C30387 * C30399 + C30856 * ae) +
         C30387 * C30856 * ae) /
        C30365;
    const double C940 =
        (C30387 * C30586 * C30399 + C30586 * C30856 * ae) / C30365;
    const double C1172 =
        (2 * C30586 * C30399 + C30586 * (C30399 + C30407 * C30595)) / C30365;
    const double C30525 = C30505 * ce;
    const double C30861 = C30384 * C30505;
    const double C30948 = C30586 * C30505;
    const double C30986 = C30387 * C30505;
    const double C30985 = C30505 * ae;
    const double C499 = (C30387 * (C30399 + C30407 * C30413) +
                         (C30856 + C30505 * C30413) * ae) /
                        C30365;
    const double C1315 = (C30387 * (C30399 + C30407 * C30595) +
                          (C30856 + C30505 * C30595) * ae) /
                         C30365;
    const double C2026 =
        (2 * (C30387 * C30399 + C30856 * ae) +
         C30387 * (C30399 + C30387 * (C30387 * C30407 + C30505 * ae) +
                   C30387 * C30505 * ae) +
         (C30856 + C30505 * C30628) * ae) /
        C30365;
    const double C122 =
        2 * C30384 * C30856 + C30384 * (C30856 + C30505 * C30413);
    const double C298 = C30586 * (C30856 + C30505 * C30413);
    const double C487 = C30387 * (C30856 + C30505 * C30413);
    const double C1163 =
        2 * C30586 * C30856 + C30586 * (C30856 + C30505 * C30595);
    const double C1300 = C30387 * (C30856 + C30505 * C30595);
    const double C2017 =
        2 * C30387 * C30856 + C30387 * (C30856 + C30505 * C30628);
    const double C131 = -(C30384 * (C30384 * C30522 + C30856 * ce) +
                          C30855 * C30854 * C30504 + C30384 * C30856 * ce) /
                        C30244;
    const double C309 = -(C30586 * (C30384 * C30522 + C30856 * ce)) / C30244;
    const double C317 = -(C30522 * C30595 + C30855 * C30854 * C30504) / C30244;
    const double C498 = -(C30387 * (C30384 * C30522 + C30856 * ce)) / C30244;
    const double C506 = -(C30522 * C30628 + C30855 * C30854 * C30504) / C30244;
    const double C941 = -(C30387 * C30586 * C30522) / C30244;
    const double C1171 = (-2 * C30586 * C30522) / C30244 -
                         (C30586 * (C30509 * C30595 + C30522)) / C30244;
    const double C1314 = -(C30387 * (C30509 * C30595 + C30522)) / C30244;
    const double C2025 = (-2 * C30387 * C30522) / C30244 -
                         (C30387 * (C30509 * C30628 + C30522)) / C30244;
    const double C4877 = C31509 * C326;
    const double C30420 = C30418 * C30413;
    const double C30431 = C30418 * ce;
    const double C30427 = C30384 * C30418;
    const double C31026 = C30418 * C30595;
    const double C31029 = C30586 * C30418;
    const double C31095 = C30387 * C30418;
    const double C1173 =
        (3 * (C30399 + C30407 * C30595) +
         C30586 * (2 * C30586 * C30407 + C30586 * (C30407 + C30418 * C30595))) /
        C30365;
    const double C30516 = C30514 * C30413;
    const double C30536 = C30384 * C30514;
    const double C30535 = C30514 * ce;
    const double C31039 = C30514 * C30595;
    const double C31047 = C30586 * C30514;
    const double C31098 = C30514 * C30628;
    const double C31112 = C30387 * C30514;
    const double C31111 = C30514 * ae;
    const double C30517 = C30384 * C30515;
    const double C30608 = C30515 * C30595;
    const double C30631 = C30515 * C30628;
    const double C30657 = C30586 * C30515;
    const double C30741 = ae * C30515;
    const double C30739 = C30387 * C30515;
    const double C30475 = C30472 * C30413;
    const double C30563 = C30384 * C30559;
    const double C30693 = C30559 * C30595;
    const double C30768 = C30559 * C30628;
    const double C30827 = C30586 * C30559;
    const double C30415 = C30412 / C30395;
    const double C318 = (C30384 * C30399 + C30409 * C30595) / C30365;
    const double C30529 = C30513 * ce;
    const double C30866 = 2 * C30513;
    const double C30945 = C30586 * C30513;
    const double C30994 = C30387 * C30513;
    const double C30993 = C30513 * ae;
    const double C30863 = C30505 + C30862;
    const double C30957 = C30505 + C30956;
    const double C30989 = C30505 + C30987;
    const double C31038 = 2 * C31014;
    const double C31069 = C30387 * C31014;
    const double C31068 = C31014 * ae;
    const double C31102 = 2 * C31097;
    const double C31100 = C31097 * ae;
    const double C1308 = -(C30603 * C30628 + C30586 * C30522) / C30244;
    const double C30630 = C30627 / C30395;
    const double C30445 = C30418 + C30442;
    const double C30466 = C30461 / C30395;
    const double C30467 = 2 * C30457;
    const double C30464 = C30457 * ce;
    const double C31057 = C30457 * C30595;
    const double C31132 = C30586 * C30457;
    const double C31142 = C30387 * C30457;
    const double C31032 = C30418 + C31030;
    const double C31161 = C30387 * C31157;
    const double C30685 = C30683 + C30515;
    const double C30695 = -2 * C30692;
    const double C30713 = C30692 * C30628;
    const double C30826 = ae * C30692;
    const double C30823 = C30387 * C30692;
    const double C30747 = C30742 + C30515;
    const double C30772 = C30766 / C30395;
    const double C30774 = -2 * C30764;
    const double C30770 = ae * C30764;
    const double C30565 = C30514 + C30562;
    const double C30564 = C30561 * ce;
    const double C31084 = C30561 * C30595;
    const double C31135 = C30586 * C30561;
    const double C31145 = C30561 * C30628;
    const double C31050 = C30514 + C31048;
    const double C31118 = C30514 + C31114;
    const double C31163 = C31160 * C30628;
    const double C143 =
        2 * ((-(C30384 * C30406) / C30244) / C30365 - (C30399 * ce) / C30395) -
        ((C30399 + C30407 * std::pow(C30384, 2)) * ce) / C30395 +
        C30384 *
            ((-(C30384 * C30407 * ce) / C30244) / C30365 - C30406 / C30395 +
             C30384 *
                 ((-(C30384 * std::pow(C30391, 5) * bs[5] * C30400) / C30244) /
                      C30365 -
                  (C30407 * ce) / C30395));
    const double C327 = (yP - yQ) * ((-(C30384 * C30406) / C30244) / C30365 -
                                     (C30399 * ce) / C30395);
    const double C331 = (-(C30406 * std::pow(yP - yQ, 2)) / C30244) / C30365 -
                        (C30396 * C30392 * C30400) / C30395;
    const double C516 = C30387 * ((-(C30384 * C30406) / C30244) / C30365 -
                                  (C30399 * ce) / C30395) -
                        (ae * (C30384 * C30396 * C30392 * C30384 * ce +
                               bs[2] * std::pow(C30389, 2) * ce)) /
                            C30395;
    const double C520 = (-(ae * C30387 * C30522) / C30244) / C30365 -
                        (C30396 * C30392 * C30400) / C30395 +
                        C30387 * ((-(C30387 * C30406) / C30244) / C30365 -
                                  (ae * C30522) / C30395);
    const double C950 = (-(C30387 * C30586 * C30406) / C30244) / C30365 -
                        (ae * C30586 * C30522) / C30395;
    const double C30419 = C30384 * C30417;
    const double C30428 = C30417 / C30395;
    const double C30626 = C30387 * C30417;
    const double C30656 = C30586 * C30417;
    const double C1181 =
        (-2 * C30586 * C30406) / C30395 +
        C30586 * ((-(C30417 * std::pow(C30586, 2)) / C30244) / C30365 -
                  C30406 / C30395);
    const double C1324 =
        (-(ae * C30387 * C30603) / C30244) / C30365 -
        (C30586 * C30406) / C30395 +
        C30387 * ((-(C30387 * C30586 * C30417) / C30244) / C30365 -
                  (ae * C30603) / C30395);
    const double C1327 =
        C30387 * ((-(C30417 * C30595) / C30244) / C30365 - C30406 / C30395) -
        (ae * (C30509 * C30595 + C30522)) / C30395;
    const double C2035 =
        2 * ((-(C30387 * C30406) / C30244) / C30365 - (ae * C30522) / C30395) -
        (ae * (C30509 * std::pow(C30387, 2) + C30522)) / C30395 +
        C30387 *
            ((-(ae * C30387 * C30509) / C30244) / C30365 - C30406 / C30395 +
             C30387 * ((-(C30387 * C30417) / C30244) / C30365 -
                       (ae * C30509) / C30395));
    const double C30441 = C30384 * C30438;
    const double C30458 = C30438 / C30395;
    const double C30665 = C30438 * C30595;
    const double C30671 = C30586 * C30438;
    const double C30740 = C30387 * C30438;
    const double C30474 = C30384 * C30471;
    const double C30672 = C30471 * C30595;
    const double C30765 = C30387 * C30471;
    const double C30825 = C30586 * C30471;
    const double C31613 = C31294 * C31579;
    const double C107 =
        (C31294 * std::pow(C31579, 2)) / C31580 + C31294 / C30369;
    const double C109 = C31582 * C31294;
    const double C13452 = C31581 * C31294;
    const double C31368 = C31318 / C30250;
    const double C31370 = C31318 * C31367;
    const double C31377 = C31275 * C31318;
    const double C31589 = C31318 * C31369;
    const double C31616 = C31574 * C31318;
    const double C31614 = C31318 * C31583;
    const double C31408 = C31330 / C30250;
    const double C31410 = C31330 * C31407;
    const double C31417 = C31275 * C31330;
    const double C31595 = C31330 * C31409;
    const double C31619 = C31574 * C31330;
    const double C31617 = C31330 * C31585;
    const double C31633 = C31498 * C31601;
    const double C4760 =
        (C31498 * std::pow(C31601, 2)) / C31580 + C31498 / C30369;
    const double C4762 = C31582 * C31498;
    const double C13454 = C31581 * C31498;
    const double C30281 = C30276 / C30250;
    const double C30280 = C30242 * C30276;
    const double C30279 = C30275 + C30252;
    const double C30266 = C30259 / C30249;
    const double C30264 = 2 * C30259;
    const double C31270 = C31269 * C31263;
    const double C31276 = C31269 / C30256;
    const double C31571 = C31275 * C31269;
    const double C31569 = C31269 / C30244;
    const double C287 = (C31267 * std::pow(C31263, 2)) / C30249 + C31268;
    const double C31278 = C31277 * C31263;
    const double C31575 = C31262 * C31277;
    const double C31573 = 2 * C31277;
    const double C31620 = C31277 / C31577;
    const double C106 = C31277 / C31612;
    const double C2901 = C31277 / C30250;
    const double C31605 = C31570 / C30244;
    const double C288 = (-2 * C31275 * C31570) / C30244;
    const double C31635 = C31603 / C30249;
    const double C30372 = 2 * C30371;
    const double C152 = C113 * C121;
    const double C150 = C113 * C129;
    const double C148 = C113 * C120;
    const double C337 = C113 * C296;
    const double C526 = C113 * C485;
    const double C4882 = C113 * C301;
    const double C4876 = C113 * C307;
    const double C4874 = C113 * C297;
    const double C5387 = C113 * C935;
    const double C9302 = (-2 * C31581 * C31634) / C30365;
    const double C19047 = -C31634 / C30365;
    const double C155 = C31509 * C142;
    const double C153 = C31509 * C130;
    const double C157 = C31509 * C132;
    const double C338 = C31509 * C306;
    const double C342 = C31509 * C310;
    const double C4883 = C31509 * C316;
    const double C527 = C31509 * C495;
    const double C19053 = C19048 * C495;
    const double C5388 = C31509 * C940;
    const double C24889 = C19048 * C940;
    const double C4894 = C31509 * C1172;
    const double C30526 = C30524 + C30525;
    const double C507 =
        (C30384 * C30399 + C30387 * (C30387 * C30409 + C30861 * ae) +
         C30387 * C30861 * ae) /
        C30365;
    const double C942 =
        (C30387 * C30586 * C30409 + C30586 * C30861 * ae) / C30365;
    const double C302 = C30384 * C30856 + C30861 * C30595;
    const double C491 = C30384 * C30856 + C30861 * C30628;
    const double C936 = C30387 * C30586 * C30861;
    const double C1162 =
        2 * C30586 * C30861 + C30586 * (C30861 + C30513 * C30595);
    const double C1299 = C30387 * (C30861 + C30513 * C30595);
    const double C2016 =
        2 * C30387 * C30861 + C30387 * (C30861 + C30513 * C30628);
    const double C1309 =
        (C30586 * C30399 + C30387 * (C30387 * C30586 * C30407 + C30948 * ae) +
         C30387 * C30948 * ae) /
        C30365;
    const double C2420 =
        (2 * (C30387 * C31013 + C30948 * ae) +
         C30387 * (C31013 + C30387 * (C30387 * C30586 * C30418 + C31014 * ae) +
                   C30387 * C31014 * ae) +
         (C30948 + C31014 * C30628) * ae) /
        C30365;
    const double C1297 = C30586 * C30856 + C30948 * C30628;
    const double C2417 =
        2 * C30387 * C30948 + C30387 * (C30948 + C31014 * C30628);
    const double C30988 = C30984 + C30985;
    const double C531 = C31509 * C499;
    const double C19063 = C19048 * C499;
    const double C5396 = C31509 * C1315;
    const double C24899 = C19048 * C1315;
    const double C156 = C113 * C122;
    const double C341 = C113 * C298;
    const double C530 = C113 * C487;
    const double C4893 = C113 * C1163;
    const double C5395 = C113 * C1300;
    const double C154 = C113 * C131;
    const double C339 = C113 * C309;
    const double C4884 = C113 * C317;
    const double C528 = C113 * C498;
    const double C5385 = C113 * C941;
    const double C4891 = C113 * C1171;
    const double C5393 = C113 * C1314;
    const double C30422 = C30407 + C30420;
    const double C30434 = C30431 / C30395;
    const double C30435 = 2 * C30427;
    const double C30432 = C30427 * ce;
    const double C30992 = C30387 * C30427;
    const double C31017 = C30586 * C30427;
    const double C1170 =
        (2 * C30586 * C30409 + C30586 * (C30409 + C30427 * C30595)) / C30365;
    const double C1175 =
        (3 * (C30409 + C30427 * C30595) +
         C30586 * (2 * C30586 * C30427 + C30586 * (C30427 + C30457 * C30595))) /
        C30365;
    const double C1313 = (C30387 * (C30409 + C30427 * C30595) +
                          (C30861 + C30513 * C30595) * ae) /
                         C30365;
    const double C2024 =
        (2 * (C30387 * C30409 + C30861 * ae) +
         C30387 * (C30409 + C30387 * (C30387 * C30427 + C30513 * ae) +
                   C30387 * C30513 * ae) +
         (C30861 + C30513 * C30628) * ae) /
        C30365;
    const double C31027 = C30407 + C31026;
    const double C31031 = 2 * C31029;
    const double C31067 = C30387 * C31029;
    const double C31099 = C31095 + C31096;
    const double C5619 = C31509 * C1173;
    const double C30518 = C30508 + C30516;
    const double C30540 = C30536 * ce;
    const double C30556 = 2 * C30536;
    const double C30960 = C30536 * C30595;
    const double C30995 = C30536 * C30628;
    const double C31018 = C30586 * C30536;
    const double C31144 = C30387 * C30536;
    const double C31143 = C30536 * ae;
    const double C30543 = C30542 + C30535;
    const double C31040 = C30508 + C31039;
    const double C31049 = 2 * C31047;
    const double C31070 = C31047 * C30628;
    const double C31159 = C30387 * C31047;
    const double C31158 = C31047 * ae;
    const double C31101 = C30508 + C31098;
    const double C31119 = 2 * C31112;
    const double C31117 = C31112 * ae;
    const double C31116 = C31110 + C31111;
    const double C30519 = C30517 + C30512;
    const double C30609 = C30608 + C30509;
    const double C30633 = C30631 + C30509;
    const double C30682 = -2 * C30657;
    const double C30712 = ae * C30657;
    const double C30710 = C30387 * C30657;
    const double C2421 = (-2 * C30387 * C30603) / C30244 -
                         (C30387 * (C30657 * C30628 + C30603)) / C30244;
    const double C30745 = C30741 / C30395;
    const double C30746 = -2 * C30739;
    const double C30743 = ae * C30739;
    const double C30478 = C30439 + C30475;
    const double C30566 = C30563 + C30560;
    const double C30696 = C30693 + C30539;
    const double C30775 = C30768 + C30539;
    const double C30832 = C30827 * C30628;
    const double C350 = C31509 * C318;
    const double C1307 =
        (C30586 * C30409 + C30387 * (C30387 * C30586 * C30427 + C30945 * ae) +
         C30387 * C30945 * ae) /
        C30365;
    const double C1296 = C30586 * C30861 + C30945 * C30628;
    const double C123 = 3 * (C30856 + C30505 * C30413) +
                        C30384 * (2 * C30861 + C30384 * C30863);
    const double C299 = C30586 * (2 * C30861 + C30384 * C30863);
    const double C303 = C30856 + C30505 * C30413 + C30863 * C30595;
    const double C488 = C30387 * (2 * C30861 + C30384 * C30863);
    const double C492 = C30856 + C30505 * C30413 + C30863 * C30628;
    const double C937 = C30387 * C30586 * C30863;
    const double C1316 =
        (C30399 + C30407 * C30595 +
         C30387 * (C30387 * (C30407 + C30418 * C30595) + C30957 * ae) +
         C30387 * C30957 * ae) /
        C30365;
    const double C1716 =
        (C30387 * (2 * C30586 * C30407 + C30586 * (C30407 + C30418 * C30595)) +
         (2 * C30948 + C30586 * C30957) * ae) /
        C30365;
    const double C1164 = 3 * (C30856 + C30505 * C30595) +
                         C30586 * (2 * C30948 + C30586 * C30957);
    const double C1301 = C30856 + C30505 * C30595 + C30957 * C30628;
    const double C1713 = C30387 * (2 * C30948 + C30586 * C30957);
    const double C2018 = 3 * (C30856 + C30505 * C30628) +
                         C30387 * (2 * C30986 + C30387 * C30989);
    const double C5768 = C113 * C1308;
    const double C30448 = C30384 * C30445;
    const double C30462 = 3 * C30445;
    const double C30456 = C30445 * ce;
    const double C31000 = C30387 * C30445;
    const double C31021 = C30586 * C30445;
    const double C30470 = C30464 / C30244;
    const double C31058 = C30427 + C31057;
    const double C31136 = C30387 * C31132;
    const double C31033 = C30586 * C31032;
    const double C31075 = C30387 * C31032;
    const double C30686 = C30586 * C30685;
    const double C30691 = -3 * C30685;
    const double C30723 = ae * C30685;
    const double C30721 = C30387 * C30685;
    const double C30697 = C30695 / C30244;
    const double C30716 = C30713 + C30657;
    const double C30830 = C30826 / C30395;
    const double C30831 = -2 * C30823;
    const double C30828 = ae * C30823;
    const double C30751 = C30387 * C30747;
    const double C30767 = -3 * C30747;
    const double C30763 = ae * C30747;
    const double C30779 = C30774 / C30244;
    const double C30777 = C30770 / C30244;
    const double C30568 = C30384 * C30565;
    const double C30567 = C30565 * ce;
    const double C30964 = C30565 * C30595;
    const double C31003 = C30565 * C30628;
    const double C31022 = C30586 * C30565;
    const double C31085 = C30536 + C31084;
    const double C31137 = C31135 * C30628;
    const double C31148 = C30536 + C31145;
    const double C31051 = C30586 * C31050;
    const double C31078 = C31050 * C30628;
    const double C31121 = C30387 * C31118;
    const double C31166 = C31047 + C31163;
    const double C159 = C31509 * C143;
    const double C340 = C31509 * C327;
    const double C4885 = C31509 * C331;
    const double C529 = C31509 * C516;
    const double C19057 = C19048 * C516;
    const double C5386 = C31509 * C950;
    const double C24893 = C19048 * C950;
    const double C30421 = C30419 / C30244;
    const double C1182 =
        3 * ((-(C30417 * C30595) / C30244) / C30365 - C30406 / C30395) +
        C30586 * ((-2 * C30586 * C30417) / C30395 +
                  C30586 * ((-(C30438 * C30595) / C30244) / C30365 - C30428));
    const double C30629 = C30626 / C30244;
    const double C2426 =
        2 * ((-(C30387 * C30656) / C30244) / C30365 - (ae * C30603) / C30395) -
        (ae * (C30657 * C30628 + C30603)) / C30395 +
        C30387 *
            ((-(ae * C30387 * C30657) / C30244) / C30365 - C30656 / C30395 +
             C30387 * ((-(C30387 * C30586 * C30438) / C30244) / C30365 -
                       (ae * C30657) / C30395));
    const double C4892 = C31509 * C1181;
    const double C5769 = C31509 * C1324;
    const double C25511 = C19048 * C1324;
    const double C5394 = C31509 * C1327;
    const double C24895 = C19048 * C1327;
    const double C30444 = C30441 / C30244;
    const double C30666 = C30665 / C30244;
    const double C30673 = -2 * C30671;
    const double C30711 = C30387 * C30671;
    const double C30824 = C30671 / C30395;
    const double C30744 = C30740 / C30244;
    const double C30477 = C30474 / C30244;
    const double C30674 = C30672 / C30244;
    const double C30771 = C30765 / C30244;
    const double C30829 = C30387 * C30825;
    const double C108 = (-2 * C31581 * C31613) / C30365;
    const double C13451 = -C31613 / C30365;
    const double C1086 = (C31318 * std::pow(C31369, 2)) / C30249 + C31368;
    const double C31371 = C31370 * C31369;
    const double C31376 = C31370 / C30256;
    const double C31587 = C31370 / C30244;
    const double C31584 = C31275 * C31370;
    const double C31378 = C31377 * C31369;
    const double C31593 = C31367 * C31377;
    const double C31592 = 2 * C31377;
    const double C31626 = C31377 / C31577;
    const double C1159 = C31377 / C31612;
    const double C2904 = C31377 / C30250;
    const double C31622 = C31589 / C30244;
    const double C1087 = (-2 * C31275 * C31589) / C30244;
    const double C31640 = C31614 / C30249;
    const double C1835 = (C31330 * std::pow(C31409, 2)) / C30249 + C31408;
    const double C31411 = C31410 * C31409;
    const double C31416 = C31410 / C30256;
    const double C31588 = C31410 / C30244;
    const double C31586 = C31275 * C31410;
    const double C31418 = C31417 * C31409;
    const double C31599 = C31407 * C31417;
    const double C31598 = 2 * C31417;
    const double C31632 = C31417 / C31577;
    const double C2014 = C31417 / C31612;
    const double C3806 = C31417 / C30250;
    const double C31628 = C31595 / C30244;
    const double C1836 = (-2 * C31275 * C31595) / C30244;
    const double C31642 = C31617 / C30249;
    const double C4761 = (-2 * C31581 * C31633) / C30365;
    const double C13453 = -C31633 / C30365;
    const double C30285 = C30280 + 0;
    const double C30284 = C30279 / C30250;
    const double C30270 = C30255 - C30266;
    const double C30269 = C30242 * C30264;
    const double C295 =
        ((-C30264 / C30244) / C30250 - (0 * de) / C30244) / C30250 -
        (0 * de) / C30244;
    const double C1160 = -C30264 / C30244;
    const double C2642 = (-C30264 / C30244) / C30250 - (0 * de) / C30244;
    const double C31271 = C31270 / C30249;
    const double C31606 = 2 * C31571;
    const double C31279 = C31278 / C30244;
    const double C31610 = C31575 / C30256;
    const double C31636 = C31569 - C31605;
    const double C2635 = -C31605;
    const double C31650 = C31635 + C31268;
    const double C9305 =
        ((-C30367 / C30365) / C30369 -
         ((C31509 - (C30366 * C30372) / C30365) * be) / C30365) /
            C30369 -
        ((C30366 * ((-C30372 / C30365) / C30369 - (0 * be) / C30365) + C19048) *
         be) /
            C30365;
    const double C9306 =
        ((-C30372 / C30365) / C30369 - (0 * be) / C30365) / C30369 -
        (0 * be) / C30365;
    const double C19049 = (-C30367 / C30365) / C30369 -
                          ((C31509 - (C30366 * C30372) / C30365) * be) / C30365;
    const double C19050 = (-C30372 / C30365) / C30369 - (0 * be) / C30365;
    const double C169 = C150 + C151;
    const double C168 = C148 + C149;
    const double C4899 = C4876 + C4877;
    const double C4898 = C4874 + C4875;
    const double C19075 = C19047 * C143;
    const double C19071 = C19047 * C132;
    const double C19065 = C19047 * C142;
    const double C19061 = C19047 * C130;
    const double C19059 = C19047 * C141;
    const double C19055 = C19047 * C128;
    const double C19265 = C19047 * C318;
    const double C19257 = C19047 * C310;
    const double C19251 = C19047 * C327;
    const double C19247 = C19047 * C306;
    const double C19451 = C19047 * C499;
    const double C19445 = C19047 * C516;
    const double C19441 = C19047 * C495;
    const double C24901 = C19047 * C316;
    const double C24897 = C19047 * C331;
    const double C24891 = C19047 * C326;
    const double C24887 = C19047 * C308;
    const double C25517 = C19047 * C940;
    const double C25513 = C19047 * C950;
    const double C25765 = C19047 * C1173;
    const double C25755 = C19047 * C1181;
    const double C25751 = C19047 * C1172;
    const double C25933 = C19047 * C1327;
    const double C25929 = C19047 * C1315;
    const double C25925 = C19047 * C1324;
    const double C9304 =
        ((-(0 * be) / C30365) / C30369 -
         ((0 - (C30366 * C30367) / C30365) * be) / C30365) /
            C30369 -
        ((C30366 * ((-C30367 / C30365) / C30369 -
                    ((C31509 - (C30366 * C30372) / C30365) * be) / C30365) +
          C19047) *
         be) /
            C30365 +
        (-C30372 / C30365) / C30369 - (0 * be) / C30365;
    const double C170 = C152 + C153;
    const double C361 = C337 + C338;
    const double C4900 = C4882 + C4883;
    const double C550 = C526 + C527;
    const double C5401 = C5387 + C5388;
    const double C133 =
        (-2 * (C30384 * C30522 + C30856 * ce)) / C30244 -
        (C30384 * (C30384 * C30526 + C30522 + C30384 * C30505 * ce)) / C30244 -
        ((C30856 + C30505 * C30413) * ce) / C30244;
    const double C311 =
        -(C30586 * (C30384 * C30526 + C30522 + C30861 * ce)) / C30244;
    const double C319 =
        -(C30526 * C30595 + C30384 * C30522 + C30856 * ce) / C30244;
    const double C500 =
        -(C30387 * (C30384 * C30526 + C30522 + C30861 * ce)) / C30244;
    const double C508 =
        -(C30526 * C30628 + C30384 * C30522 + C30856 * ce) / C30244;
    const double C943 = -(C30387 * C30586 * C30526) / C30244;
    const double C539 = C31509 * C507;
    const double C19459 = C19047 * C507;
    const double C19443 = C19048 * C507;
    const double C957 = C31509 * C942;
    const double C19249 = C19048 * C942;
    const double C19969 = C19047 * C942;
    const double C349 = C113 * C302;
    const double C538 = C113 * C491;
    const double C956 = C113 * C936;
    const double C1442 = C113 * C1162;
    const double C1604 = C113 * C1299;
    const double C2308 = C113 * C2016;
    const double C5767 = C31509 * C1309;
    const double C25515 = C19048 * C1309;
    const double C25921 = C19047 * C1309;
    const double C6887 = C31509 * C2420;
    const double C25923 = C19048 * C2420;
    const double C27257 = C19047 * C2420;
    const double C5766 = C113 * C1297;
    const double C6886 = C113 * C2417;
    const double C2027 =
        (3 * (C30399 + C30387 * C30988 + C30986 * ae) +
         C30387 * (2 * C30988 +
                   C30387 * (C30407 + C30387 * (C30387 * C30418 + C30508 * ae) +
                             C30387 * C30508 * ae) +
                   C30989 * ae) +
         (2 * C30986 + C30387 * C30989) * ae) /
        C30365;
    const double C172 = C156 + C157;
    const double C363 = C341 + C342;
    const double C552 = C530 + C531;
    const double C4903 = C4893 + C4894;
    const double C5403 = C5395 + C5396;
    const double C171 = C154 + C155;
    const double C134 = (3 * (C30399 + C30407 * C30413) +
                         C30384 * (2 * C30409 + C30384 * C30422)) /
                        C30365;
    const double C312 = (C30586 * (2 * C30409 + C30384 * C30422)) / C30365;
    const double C320 = (C30399 + C30407 * C30413 + C30422 * C30595) / C30365;
    const double C501 = (C30387 * (2 * C30409 + C30384 * C30422) +
                         (2 * C30861 + C30384 * C30863) * ae) /
                        C30365;
    const double C509 =
        (C30399 + C30407 * C30413 + C30387 * (C30387 * C30422 + C30863 * ae) +
         C30387 * C30863 * ae) /
        C30365;
    const double C944 =
        (C30387 * C30586 * C30422 + C30586 * C30863 * ae) / C30365;
    const double C1168 =
        (2 * C30586 * C30422 + C30586 * (C30422 + C30445 * C30595)) / C30365;
    const double C30437 = C30432 / C30244;
    const double C30996 = C30992 + C30993;
    const double C1443 = C31509 * C1170;
    const double C20495 = C19047 * C1170;
    const double C5919 = C31509 * C1175;
    const double C1605 = C31509 * C1313;
    const double C19263 = C19048 * C1313;
    const double C20701 = C19047 * C1313;
    const double C2309 = C31509 * C2024;
    const double C19457 = C19048 * C2024;
    const double C21553 = C19047 * C2024;
    const double C5606 =
        (4 * (2 * C31013 + C30586 * C31027) +
         C30586 *
             (3 * C31027 + C30586 * (2 * C30586 * C30418 +
                                     C30586 * (C30418 + C30439 * C30595)))) /
        C30365;
    const double C31071 = C31067 + C31068;
    const double C31103 = C30387 * C31099;
    const double C31109 = 2 * C31099;
    const double C30537 = C30518 * ce;
    const double C30867 = C30384 * C30518;
    const double C30871 = 3 * C30518;
    const double C30942 = C30586 * C30518;
    const double C31002 = C30387 * C30518;
    const double C31001 = C30518 * ae;
    const double C1311 = (C30387 * (C30422 + C30445 * C30595) +
                          (C30863 + C30518 * C30595) * ae) /
                         C30365;
    const double C2022 =
        (2 * (C30387 * C30422 + C30863 * ae) +
         C30387 * (C30422 + C30387 * (C30387 * C30445 + C30518 * ae) +
                   C30387 * C30518 * ae) +
         (C30863 + C30518 * C30628) * ae) /
        C30365;
    const double C1161 =
        2 * C30586 * C30863 + C30586 * (C30863 + C30518 * C30595);
    const double C1298 = C30387 * (C30863 + C30518 * C30595);
    const double C2015 =
        2 * C30387 * C30863 + C30387 * (C30863 + C30518 * C30628);
    const double C30961 = C30513 + C30960;
    const double C30997 = C30513 + C30995;
    const double C31083 = 2 * C31018;
    const double C31134 = C30387 * C31018;
    const double C31133 = C31018 * ae;
    const double C2422 =
        (2 * (C30387 * C31017 + C30945 * ae) +
         C30387 * (C31017 + C30387 * (C30387 * C30586 * C30457 + C31018 * ae) +
                   C30387 * C31018 * ae) +
         (C30945 + C31018 * C30628) * ae) /
        C30365;
    const double C2418 =
        2 * C30387 * C30945 + C30387 * (C30945 + C31018 * C30628);
    const double C31149 = 2 * C31144;
    const double C31147 = C31144 * ae;
    const double C31146 = C31142 + C31143;
    const double C30544 = C30384 * C30543;
    const double C30553 = -2 * C30543;
    const double C30611 = C30543 * C30595;
    const double C30640 = C30543 * C30628;
    const double C30660 = C30586 * C30543;
    const double C30807 = ae * C30543;
    const double C30805 = C30387 * C30543;
    const double C31041 = C30586 * C31040;
    const double C31046 = 3 * C31040;
    const double C31077 = C30387 * C31040;
    const double C31076 = C31040 * ae;
    const double C6503 =
        (2 * (C30387 * C31027 + C30957 * ae) +
         C30387 * (C31027 + C30387 * (C30387 * C31032 + C31040 * ae) +
                   C30387 * C31040 * ae) +
         (C30957 + C31040 * C30628) * ae) /
        C30365;
    const double C6499 =
        2 * C30387 * C30957 + C30387 * (C30957 + C31040 * C30628);
    const double C31072 = C31014 + C31070;
    const double C31164 = 2 * C31159;
    const double C31162 = C31159 * ae;
    const double C31165 = C31161 + C31158;
    const double C31104 = C30387 * C31101;
    const double C31115 = 3 * C31101;
    const double C31113 = C31101 * ae;
    const double C31120 = C30387 * C31116;
    const double C30528 = C30384 * C30519;
    const double C30533 = -2 * C30519;
    const double C30601 = C30586 * C30519;
    const double C30639 = ae * C30519;
    const double C30637 = C30387 * C30519;
    const double C1169 = (-2 * C30586 * C30526) / C30244 -
                         (C30586 * (C30519 * C30595 + C30526)) / C30244;
    const double C1312 = -(C30387 * (C30519 * C30595 + C30526)) / C30244;
    const double C2023 = (-2 * C30387 * C30526) / C30244 -
                         (C30387 * (C30519 * C30628 + C30526)) / C30244;
    const double C1328 =
        (-(C30417 * C30595) / C30244) / C30365 - C30406 / C30395 -
        (ae * C30387 * C30609) / C30395 +
        C30387 * (C30387 * ((-(C30438 * C30595) / C30244) / C30365 - C30428) -
                  (ae * C30609) / C30395);
    const double C1722 =
        (((-2 * C30603) / C30244 - (C30586 * C30609) / C30244) * ae) / C30365 +
        C30387 * ((-2 * C30586 * C30417) / C30395 +
                  C30586 * ((-(C30438 * C30595) / C30244) / C30365 - C30428));
    const double C1174 =
        (-3 * (C30509 * C30595 + C30522)) / C30244 +
        C30586 * ((-2 * C30603) / C30244 - (C30586 * C30609) / C30244);
    const double C1317 = -(C30609 * C30628 + C30509 * C30595 + C30522) / C30244;
    const double C1717 =
        C30387 * ((-2 * C30603) / C30244 - (C30586 * C30609) / C30244);
    const double C6502 = (-2 * C30387 * C30609) / C30244 -
                         (C30387 * (C30685 * C30628 + C30609)) / C30244;
    const double C2028 =
        (-3 * (C30509 * C30628 + C30522)) / C30244 +
        C30387 * ((-2 * C30625) / C30244 - (C30387 * C30633) / C30244);
    const double C30684 = C30682 / C30244;
    const double C30715 = C30712 / C30395;
    const double C6884 = C113 * C2421;
    const double C30750 = C30746 / C30244;
    const double C30748 = C30743 / C30244;
    const double C30481 = C30384 * C30478;
    const double C1177 =
        (3 * (C30422 + C30445 * C30595) +
         C30586 * (2 * C30586 * C30445 + C30586 * (C30445 + C30478 * C30595))) /
        C30365;
    const double C30569 = C30384 * C30566;
    const double C30730 = C30566 * C30595;
    const double C30798 = C30586 * C30566;
    const double C30808 = C30566 * C30628;
    const double C30698 = C30586 * C30696;
    const double C30724 = C30696 * C30628;
    const double C30780 = C30387 * C30775;
    const double C30836 = C30832 + C30692;
    const double C2191 = C31509 * C1307;
    const double C19967 = C19048 * C1307;
    const double C21411 = C19047 * C1307;
    const double C2190 = C113 * C1296;
    const double C160 = C113 * C123;
    const double C345 = C113 * C299;
    const double C353 = C113 * C303;
    const double C534 = C113 * C488;
    const double C542 = C113 * C492;
    const double C960 = C113 * C937;
    const double C5771 = C31509 * C1316;
    const double C25943 = C19047 * C1316;
    const double C25931 = C19048 * C1316;
    const double C5775 = C31509 * C1716;
    const double C25753 = C19048 * C1716;
    const double C26417 = C19047 * C1716;
    const double C5618 = C113 * C1164;
    const double C5770 = C113 * C1301;
    const double C5774 = C113 * C1713;
    const double C30450 = C30435 + C30448;
    const double C30463 = C30456 / C30395;
    const double C30473 = -C30470;
    const double C5900 =
        (4 * (2 * C31017 + C30586 * C31058) +
         C30586 * (3 * C31058 +
                   C30586 * (2 * C30586 * C30457 +
                             C30586 * (C30457 + C30384 * C30472 * C30595)))) /
        C30365;
    const double C31034 = C31031 + C31033;
    const double C30687 = C30686 / C30244;
    const double C30694 = C30691 / C30244;
    const double C30725 = C30723 / C30395;
    const double C6505 =
        (-3 * (C30657 * C30628 + C30603)) / C30244 +
        C30387 * ((-2 * C30710) / C30244 - (C30387 * C30716) / C30244);
    const double C30835 = C30831 / C30244;
    const double C30833 = C30828 / C30244;
    const double C30754 = C30751 / C30244;
    const double C30773 = C30767 / C30244;
    const double C30769 = C30763 / C30395;
    const double C30781 = -C30777;
    const double C30571 = C30556 + C30568;
    const double C30570 = C30567 / C30244;
    const double C30965 = C30518 + C30964;
    const double C31005 = C30518 + C31003;
    const double C31086 = C30586 * C31085;
    const double C31139 = C31018 + C31137;
    const double C31151 = C30387 * C31148;
    const double C31052 = C31049 + C31051;
    const double C31080 = C31040 + C31078;
    const double C31123 = C31119 + C31121;
    const double C31168 = C30387 * C31166;
    const double C362 = C339 + C340;
    const double C4901 = C4884 + C4885;
    const double C551 = C528 + C529;
    const double C5400 = C5385 + C5386;
    const double C30423 = -C30421;
    const double C5621 = C31509 * C1182;
    const double C25761 = C19047 * C1182;
    const double C30632 = -C30629;
    const double C6885 = C31509 * C2426;
    const double C25927 = C19048 * C2426;
    const double C27253 = C19047 * C2426;
    const double C4902 = C4891 + C4892;
    const double C5784 = C5768 + C5769;
    const double C5402 = C5393 + C5394;
    const double C30447 = -C30444;
    const double C30667 = -C30666;
    const double C30675 = C30673 / C30395;
    const double C30714 = C30711 / C30244;
    const double C30749 = -C30744;
    const double C30480 = -C30477;
    const double C30676 = -C30674;
    const double C30778 = -C30771;
    const double C30834 = C30829 / C30244;
    const double C31372 = C31371 / C30249;
    const double C31615 = 2 * C31584;
    const double C31379 = C31378 / C30244;
    const double C31625 = C31593 / C30256;
    const double C31644 = C31587 - C31622;
    const double C2531 = -C31622;
    const double C31653 = C31640 + C31368;
    const double C31412 = C31411 / C30249;
    const double C31618 = 2 * C31586;
    const double C31419 = C31418 / C30244;
    const double C31631 = C31599 / C30256;
    const double C31647 = C31588 - C31628;
    const double C3298 = -C31628;
    const double C31654 = C31642 + C31408;
    const double C30288 = C30285 * de;
    const double C30274 = C30242 * C30270;
    const double C30302 = C30270 / C30250;
    const double C30273 = C30269 / C30244;
    const double C31272 = C31268 - C31271;
    const double C31637 = C31606 / C30244;
    const double C31280 = C31276 - C31279;
    const double C31651 = C31636 / C30250;
    const double C19076 = C19049 * C123;
    const double C19070 = C19049 * C122;
    const double C19064 = C19049 * C131;
    const double C19060 = C19049 * C121;
    const double C19058 = C19049 * C129;
    const double C19054 = C19049 * C120;
    const double C19270 = C19049 * C303;
    const double C19264 = C19049 * C302;
    const double C19256 = C19049 * C298;
    const double C19250 = C19049 * C309;
    const double C19246 = C19049 * C296;
    const double C19464 = C19049 * C492;
    const double C19458 = C19049 * C491;
    const double C19450 = C19049 * C487;
    const double C19444 = C19049 * C498;
    const double C19440 = C19049 * C485;
    const double C19618 = C19049 * C299;
    const double C19760 = C19049 * C488;
    const double C19974 = C19049 * C937;
    const double C19968 = C19049 * C936;
    const double C20494 = C19049 * C1162;
    const double C20700 = C19049 * C1299;
    const double C21410 = C19049 * C1296;
    const double C21552 = C19049 * C2016;
    const double C24900 = C19049 * C301;
    const double C24896 = C19049 * C317;
    const double C24890 = C19049 * C307;
    const double C24886 = C19049 * C297;
    const double C25516 = C19049 * C935;
    const double C25512 = C19049 * C941;
    const double C25764 = C19049 * C1164;
    const double C25754 = C19049 * C1171;
    const double C25750 = C19049 * C1163;
    const double C25942 = C19049 * C1301;
    const double C25932 = C19049 * C1314;
    const double C25928 = C19049 * C1300;
    const double C25924 = C19049 * C1308;
    const double C25920 = C19049 * C1297;
    const double C26416 = C19049 * C1713;
    const double C27256 = C19049 * C2417;
    const double C27252 = C19049 * C2421;
    const double C19068 = C19050 * C488;
    const double C19062 = C19050 * C487;
    const double C19056 = C19050 * C498;
    const double C19052 = C19050 * C485;
    const double C19262 = C19050 * C1299;
    const double C19254 = C19050 * C937;
    const double C19248 = C19050 * C936;
    const double C19456 = C19050 * C2016;
    const double C19448 = C19050 * C492;
    const double C19442 = C19050 * C491;
    const double C19966 = C19050 * C1296;
    const double C24898 = C19050 * C1300;
    const double C24894 = C19050 * C1314;
    const double C24892 = C19050 * C941;
    const double C24888 = C19050 * C935;
    const double C25514 = C19050 * C1297;
    const double C25510 = C19050 * C1308;
    const double C25752 = C19050 * C1713;
    const double C25930 = C19050 * C1301;
    const double C25926 = C19050 * C2421;
    const double C25922 = C19050 * C2417;
    const double C4905 = C4899 * C287;
    const double C5519 = C4899 * C31650;
    const double C5613 = C4899 * C31267;
    const double C5905 = C4899 * C31569;
    const double C7109 = C4899 * C2635;
    const double C5612 = C4898 * C1160;
    const double C5906 = C361 * C30270;
    const double C7110 = C361 * C2642;
    const double C14468 = C361 * C1160;
    const double C5614 = C4900 * C1160;
    const double C5765 = C5401 * C1160;
    const double C158 = C113 * C133;
    const double C19074 = C19049 * C133;
    const double C343 = C113 * C311;
    const double C19260 = C19049 * C311;
    const double C351 = C113 * C319;
    const double C19268 = C19049 * C319;
    const double C532 = C113 * C500;
    const double C19066 = C19050 * C500;
    const double C19454 = C19049 * C500;
    const double C540 = C113 * C508;
    const double C19462 = C19049 * C508;
    const double C19446 = C19050 * C508;
    const double C958 = C113 * C943;
    const double C19252 = C19050 * C943;
    const double C19972 = C19049 * C943;
    const double C367 = C349 + C350;
    const double C556 = C538 + C539;
    const double C968 = C956 + C957;
    const double C5783 = C5766 + C5767;
    const double C6891 = C6886 + C6887;
    const double C4880 = C363 * C295;
    const double C14762 = C363 * C30270;
    const double C16216 = C363 * C2642;
    const double C5617 = C4903 * C1160;
    const double C5763 = C5403 * C1160;
    const double C161 = C31509 * C134;
    const double C19077 = C19047 * C134;
    const double C346 = C31509 * C312;
    const double C19619 = C19047 * C312;
    const double C354 = C31509 * C320;
    const double C19271 = C19047 * C320;
    const double C535 = C31509 * C501;
    const double C19069 = C19048 * C501;
    const double C19761 = C19047 * C501;
    const double C543 = C31509 * C509;
    const double C19465 = C19047 * C509;
    const double C19449 = C19048 * C509;
    const double C961 = C31509 * C944;
    const double C19255 = C19048 * C944;
    const double C19975 = C19047 * C944;
    const double C1447 = C31509 * C1168;
    const double C30440 = -C30437;
    const double C1450 = C1442 + C1443;
    const double C1612 = C1604 + C1605;
    const double C2316 = C2308 + C2309;
    const double C5625 = C31509 * C5606;
    const double C31105 = C30407 + C31103;
    const double C30541 = C30537 / C30244;
    const double C30868 = C30866 + C30867;
    const double C1305 =
        (C30586 * C30422 + C30387 * (C30387 * C30586 * C30445 + C30942 * ae) +
         C30387 * C30942 * ae) /
        C30365;
    const double C2424 =
        (2 * (C30387 * C31021 + C30942 * ae) +
         C30387 * (C31021 + C30387 * (C30387 * C30586 * C30478 + C31022 * ae) +
                   C30387 * C31022 * ae) +
         (C30942 + C31022 * C30628) * ae) /
        C30365;
    const double C1295 = C30586 * C30863 + C30942 * C30628;
    const double C2419 =
        2 * C30387 * C30942 + C30387 * (C30942 + C31022 * C30628);
    const double C31004 = C31000 + C31001;
    const double C1609 = C31509 * C1311;
    const double C19273 = C19048 * C1311;
    const double C2313 = C31509 * C2022;
    const double C19467 = C19048 * C2022;
    const double C1446 = C113 * C1161;
    const double C1608 = C113 * C1298;
    const double C19272 = C19050 * C1298;
    const double C2312 = C113 * C2015;
    const double C19466 = C19050 * C2015;
    const double C1318 =
        (C30409 + C30427 * C30595 +
         C30387 * (C30387 * (C30427 + C30457 * C30595) + C30961 * ae) +
         C30387 * C30961 * ae) /
        C30365;
    const double C1718 =
        (C30387 * (2 * C30586 * C30427 + C30586 * (C30427 + C30457 * C30595)) +
         (2 * C30945 + C30586 * C30961) * ae) /
        C30365;
    const double C6080 =
        (C30387 * (3 * C31058 +
                   C30586 * (2 * C30586 * C30457 +
                             C30586 * (C30457 + C30384 * C30472 * C30595))) +
         (3 * C30961 +
          C30586 * (2 * C31018 + C30586 * (C30536 + C30561 * C30595))) *
             ae) /
        C30365;
    const double C6774 =
        (2 * (C30387 * C31058 + C30961 * ae) +
         C30387 * (C31058 +
                   C30387 * (C30387 * (C30457 + C30384 * C30472 * C30595) +
                             C31085 * ae) +
                   C30387 * C31085 * ae) +
         (C30961 + C31085 * C30628) * ae) /
        C30365;
    const double C1165 = 3 * (C30861 + C30513 * C30595) +
                         C30586 * (2 * C30945 + C30586 * C30961);
    const double C1302 = C30861 + C30513 * C30595 + C30961 * C30628;
    const double C1714 = C30387 * (2 * C30945 + C30586 * C30961);
    const double C6773 =
        2 * C30387 * C30961 + C30387 * (C30961 + C31085 * C30628);
    const double C2029 =
        (3 * (C30409 + C30387 * C30996 + C30994 * ae) +
         C30387 * (2 * C30996 +
                   C30387 * (C30427 + C30387 * (C30387 * C30457 + C30536 * ae) +
                             C30387 * C30536 * ae) +
                   C30997 * ae) +
         (2 * C30994 + C30387 * C30997) * ae) /
        C30365;
    const double C2019 = 3 * (C30861 + C30513 * C30628) +
                         C30387 * (2 * C30994 + C30387 * C30997);
    const double C31138 = C31136 + C31133;
    const double C15809 = C31509 * C2422;
    const double C21413 = C19048 * C2422;
    const double C15808 = C113 * C2418;
    const double C21412 = C19050 * C2418;
    const double C31150 = C30387 * C31146;
    const double C30545 = C30544 + C30515;
    const double C30558 = C30553 / C30244;
    const double C30612 = C30611 + C30519;
    const double C30642 = C30640 + C30519;
    const double C30729 = -2 * C30660;
    const double C30797 = ae * C30660;
    const double C30795 = C30387 * C30660;
    const double C30810 = C30807 / C30395;
    const double C30811 = -2 * C30805;
    const double C30809 = ae * C30805;
    const double C31042 = C31038 + C31041;
    const double C31079 = C31075 + C31076;
    const double C6883 = C31509 * C6503;
    const double C25941 = C19048 * C6503;
    const double C6882 = C113 * C6499;
    const double C25940 = C19050 * C6499;
    const double C6504 =
        (3 * (C31013 + C30387 * C31071 + C31069 * ae) +
         C30387 * (2 * C31071 +
                   C30387 * (C31029 +
                             C30387 * (C30387 * C30586 * C30439 + C31047 * ae) +
                             C30387 * C31047 * ae) +
                   C31072 * ae) +
         (2 * C31069 + C30387 * C31072) * ae) /
        C30365;
    const double C6500 = 3 * (C30948 + C31014 * C30628) +
                         C30387 * (2 * C31069 + C30387 * C31072);
    const double C31167 = C30387 * C31165;
    const double C31106 = C31102 + C31104;
    const double C31122 = C30418 + C31120;
    const double C30530 = C30528 + C30509;
    const double C30538 = C30533 / C30244;
    const double C1306 = -(C30601 * C30628 + C30586 * C30526) / C30244;
    const double C2423 = (-2 * C30387 * C30601) / C30244 -
                         (C30387 * (C30660 * C30628 + C30601)) / C30244;
    const double C30641 = C30639 / C30395;
    const double C1444 = C113 * C1169;
    const double C20498 = C19049 * C1169;
    const double C1606 = C113 * C1312;
    const double C19266 = C19050 * C1312;
    const double C20704 = C19049 * C1312;
    const double C2310 = C113 * C2023;
    const double C19460 = C19050 * C2023;
    const double C21556 = C19049 * C2023;
    const double C5773 = C31509 * C1328;
    const double C25939 = C19047 * C1328;
    const double C25935 = C19048 * C1328;
    const double C5777 = C31509 * C1722;
    const double C25757 = C19048 * C1722;
    const double C26413 = C19047 * C1722;
    const double C5620 = C113 * C1174;
    const double C25760 = C19049 * C1174;
    const double C5772 = C113 * C1317;
    const double C25938 = C19049 * C1317;
    const double C25934 = C19050 * C1317;
    const double C5776 = C113 * C1717;
    const double C25756 = C19050 * C1717;
    const double C26412 = C19049 * C1717;
    const double C6880 = C113 * C6502;
    const double C25936 = C19050 * C6502;
    const double C30752 = -C30748;
    const double C30483 = C30467 + C30481;
    const double C30572 = C30569 + C30539;
    const double C30732 = C30730 + C30543;
    const double C30801 = C30798 * C30628;
    const double C30812 = C30808 + C30543;
    const double C30699 = C30698 / C30244;
    const double C30726 = C30724 + C30685;
    const double C30783 = C30780 / C30244;
    const double C30839 = C30387 * C30836;
    const double C2198 = C2190 + C2191;
    const double C5628 = C5618 + C5619;
    const double C5785 = C5770 + C5771;
    const double C5787 = C5774 + C5775;
    const double C136 = (4 * (2 * C30409 + C30384 * C30422) +
                         C30384 * (3 * C30422 + C30384 * C30450)) /
                        C30365;
    const double C314 = (C30586 * (3 * C30422 + C30384 * C30450)) / C30365;
    const double C322 =
        (2 * C30409 + C30384 * C30422 + C30450 * C30595) / C30365;
    const double C30476 = C30473 / C30365;
    const double C5607 =
        (5 * (3 * C31027 + C30586 * C31034) +
         C30586 * (4 * C31034 +
                   C30586 * (3 * C31032 +
                             C30586 * (2 * C30586 * C30439 +
                                       C30586 * (C30439 + C30472 * C30595))))) /
        C30365;
    const double C30688 = C30684 - C30687;
    const double C27250 = C19050 * C6505;
    const double C30837 = -C30833;
    const double C30757 = C30750 - C30754;
    const double C30784 = C30781 / C30365;
    const double C30573 = C30571 * ce;
    const double C30872 = C30384 * C30571;
    const double C31008 = C30586 * C30571;
    const double C1320 =
        (C30422 + C30445 * C30595 +
         C30387 * (C30387 * (C30445 + C30478 * C30595) + C30965 * ae) +
         C30387 * C30965 * ae) /
        C30365;
    const double C1720 =
        (C30387 * (2 * C30586 * C30445 + C30586 * (C30445 + C30478 * C30595)) +
         (2 * C30942 + C30586 * C30965) * ae) /
        C30365;
    const double C1166 = 3 * (C30863 + C30518 * C30595) +
                         C30586 * (2 * C30942 + C30586 * C30965);
    const double C1303 = C30863 + C30518 * C30595 + C30965 * C30628;
    const double C1715 = C30387 * (2 * C30942 + C30586 * C30965);
    const double C2020 = 3 * (C30863 + C30518 * C30628) +
                         C30387 * (2 * C31002 + C30387 * C31005);
    const double C31087 = C31083 + C31086;
    const double C10929 = 3 * (C30945 + C31018 * C30628) +
                          C30387 * (2 * C31134 + C30387 * C31139);
    const double C31153 = C31149 + C31151;
    const double C31053 = C30586 * C31052;
    const double C6501 = 3 * (C30957 + C31040 * C30628) +
                         C30387 * (2 * C31077 + C30387 * C31080);
    const double C31125 = C30387 * C31123;
    const double C31170 = C31164 + C31168;
    const double C4879 = C362 * C288;
    const double C5907 = C362 * C31277;
    const double C7111 = C362 * C31277;
    const double C13603 = C362 * C287;
    const double C14375 = C362 * C31650;
    const double C14469 = C362 * C31267;
    const double C14761 = C362 * C31569;
    const double C16215 = C362 * C2635;
    const double C4907 = C4901 * C287;
    const double C5525 = C4901 * C31650;
    const double C5615 = C4901 * C31267;
    const double C5909 = C4901 * C31569;
    const double C7113 = C4901 * C2635;
    const double C5404 = C5400 * C287;
    const double C5764 = C5400 * C31267;
    const double C6085 = C5400 * C31569;
    const double C7279 = C5400 * C2635;
    const double C8631 = C5400 * C31650;
    const double C30424 = C30423 / C30365;
    const double C30634 = C30632 / C30365;
    const double C6890 = C6884 + C6885;
    const double C4908 = C4902 * C287;
    const double C5531 = C4902 * C31650;
    const double C5616 = C4902 * C31267;
    const double C5913 = C4902 * C31569;
    const double C7117 = C4902 * C2635;
    const double C5793 = C5784 * C31267;
    const double C6663 = C5784 * C31569;
    const double C7287 = C5784 * C2635;
    const double C5406 = C5402 * C287;
    const double C5762 = C5402 * C31267;
    const double C6089 = C5402 * C31569;
    const double C7283 = C5402 * C2635;
    const double C8637 = C5402 * C31650;
    const double C30449 = C30447 / C30365;
    const double C30668 = C30667 / C30365;
    const double C30717 = -C30714;
    const double C30753 = C30749 / C30365;
    const double C30482 = C30480 / C30365;
    const double C30677 = C30676 / C30365;
    const double C30782 = C30778 / C30365;
    const double C30838 = -C30834;
    const double C31373 = C31368 - C31372;
    const double C31641 = C31615 / C30244;
    const double C31380 = C31376 - C31379;
    const double C31655 = C31644 / C30250;
    const double C31413 = C31408 - C31412;
    const double C31643 = C31618 / C30244;
    const double C31420 = C31416 - C31419;
    const double C31657 = C31647 / C30250;
    const double C30290 = C30288 / C30244;
    const double C30278 = C30274 + C31277;
    const double C30305 = C30302 - C30304;
    const double C1091 = C30302 + (0 * ce) / C30244;
    const double C30277 = C31267 - C30273;
    const double C7417 = C4902 * C31272;
    const double C7411 = C4901 * C31272;
    const double C7405 = C4899 * C31272;
    const double C7581 = C5402 * C31272;
    const double C7575 = C5400 * C31272;
    const double C16575 = C362 * C31272;
    const double C31568 = C31272 * C31262;
    const double C31608 = C31573 + C31272;
    const double C5521 = C362 * C31637;
    const double C7407 = C362 * C31280;
    const double C31576 = C31280 / C30250;
    const double C31572 = C31280 * C31262;
    const double C659 = C31651 - (C31272 * C31263) / C30244;
    const double C19093 = C19070 + C19071;
    const double C19090 = C19064 + C19065;
    const double C19088 = C19060 + C19061;
    const double C19087 = C19058 + C19059;
    const double C19085 = C19054 + C19055;
    const double C19287 = C19264 + C19265;
    const double C19283 = C19256 + C19257;
    const double C19280 = C19250 + C19251;
    const double C19278 = C19246 + C19247;
    const double C19481 = C19458 + C19459;
    const double C19477 = C19450 + C19451;
    const double C19474 = C19444 + C19445;
    const double C19472 = C19440 + C19441;
    const double C19983 = C19968 + C19969;
    const double C20502 = C20494 + C20495;
    const double C20708 = C20700 + C20701;
    const double C21418 = C21410 + C21411;
    const double C21560 = C21552 + C21553;
    const double C24909 = C24900 + C24901;
    const double C24907 = C24896 + C24897;
    const double C24904 = C24890 + C24891;
    const double C24902 = C24886 + C24887;
    const double C25521 = C25516 + C25517;
    const double C25519 = C25512 + C25513;
    const double C25773 = C25764 + C25765;
    const double C25768 = C25754 + C25755;
    const double C25766 = C25750 + C25751;
    const double C25955 = C25942 + C25943;
    const double C25950 = C25932 + C25933;
    const double C25948 = C25928 + C25929;
    const double C25946 = C25924 + C25925;
    const double C25944 = C25920 + C25921;
    const double C26421 = C26416 + C26417;
    const double C27261 = C27256 + C27257;
    const double C27259 = C27252 + C27253;
    const double C19089 = C19062 + C19063;
    const double C19086 = C19056 + C19057;
    const double C19084 = C19052 + C19053;
    const double C19286 = C19262 + C19263;
    const double C19279 = C19248 + C19249;
    const double C19480 = C19456 + C19457;
    const double C19473 = C19442 + C19443;
    const double C19982 = C19966 + C19967;
    const double C24908 = C24898 + C24899;
    const double C24906 = C24894 + C24895;
    const double C24905 = C24892 + C24893;
    const double C24903 = C24888 + C24889;
    const double C25520 = C25514 + C25515;
    const double C25518 = C25510 + C25511;
    const double C25767 = C25752 + C25753;
    const double C25949 = C25930 + C25931;
    const double C25947 = C25926 + C25927;
    const double C25945 = C25922 + C25923;
    const double C173 = C158 + C159;
    const double C19095 = C19074 + C19075;
    const double C5910 = C367 * C30270;
    const double C7114 = C367 * C2642;
    const double C14471 = C367 * C1160;
    const double C6084 = C968 * C30270;
    const double C7278 = C968 * C2642;
    const double C14623 = C968 * C1160;
    const double C5792 = C5783 * C1160;
    const double C6895 = C6891 * C1160;
    const double C174 = C160 + C161;
    const double C19096 = C19076 + C19077;
    const double C365 = C345 + C346;
    const double C19626 = C19618 + C19619;
    const double C369 = C353 + C354;
    const double C19290 = C19270 + C19271;
    const double C554 = C534 + C535;
    const double C19092 = C19068 + C19069;
    const double C19768 = C19760 + C19761;
    const double C558 = C542 + C543;
    const double C19484 = C19464 + C19465;
    const double C19476 = C19448 + C19449;
    const double C970 = C960 + C961;
    const double C19282 = C19254 + C19255;
    const double C19986 = C19974 + C19975;
    const double C30443 = C30440 / C30365;
    const double C5912 = C1450 * C30270;
    const double C7116 = C1450 * C2642;
    const double C14472 = C1450 * C1160;
    const double C6088 = C1612 * C30270;
    const double C7282 = C1612 * C2642;
    const double C14626 = C1612 * C1160;
    const double C31107 = C31105 + C31100;
    const double C503 = (C30387 * (3 * C30422 + C30384 * C30450) +
                         (3 * C30863 + C30384 * C30868) * ae) /
                        C30365;
    const double C511 =
        (2 * C30409 + C30384 * C30422 +
         C30387 * (C30387 * C30450 + C30868 * ae) + C30387 * C30868 * ae) /
        C30365;
    const double C946 =
        (C30387 * C30586 * C30450 + C30586 * C30868 * ae) / C30365;
    const double C124 = 4 * (2 * C30861 + C30384 * C30863) +
                        C30384 * (3 * C30863 + C30384 * C30868);
    const double C300 = C30586 * (3 * C30863 + C30384 * C30868);
    const double C304 = 2 * C30861 + C30384 * C30863 + C30868 * C30595;
    const double C489 = C30387 * (3 * C30863 + C30384 * C30868);
    const double C493 = 2 * C30861 + C30384 * C30863 + C30868 * C30628;
    const double C938 = C30387 * C30586 * C30868;
    const double C1437 =
        2 * C30586 * C30868 + C30586 * (C30868 + C30571 * C30595);
    const double C1599 = C30387 * (C30868 + C30571 * C30595);
    const double C2303 =
        2 * C30387 * C30868 + C30387 * (C30868 + C30571 * C30628);
    const double C2195 = C31509 * C1305;
    const double C19977 = C19048 * C1305;
    const double C2194 = C113 * C1295;
    const double C19976 = C19050 * C1295;
    const double C2031 =
        (3 * (C30422 + C30387 * C31004 + C31002 * ae) +
         C30387 * (2 * C31004 +
                   C30387 * (C30445 + C30387 * (C30387 * C30478 + C30565 * ae) +
                             C30387 * C30565 * ae) +
                   C31005 * ae) +
         (2 * C31002 + C30387 * C31005) * ae) /
        C30365;
    const double C1452 = C1446 + C1447;
    const double C1614 = C1608 + C1609;
    const double C19291 = C19272 + C19273;
    const double C2318 = C2312 + C2313;
    const double C19485 = C19466 + C19467;
    const double C6669 = C31509 * C1318;
    const double C20703 = C19048 * C1318;
    const double C6095 = C31509 * C1718;
    const double C20497 = C19048 * C1718;
    const double C5918 = C113 * C1165;
    const double C6668 = C113 * C1302;
    const double C20702 = C19050 * C1302;
    const double C6094 = C113 * C1714;
    const double C20496 = C19050 * C1714;
    const double C21555 = C19048 * C2029;
    const double C21554 = C19050 * C2019;
    const double C10930 =
        (3 * (C31017 + C30387 * C31138 + C31134 * ae) +
         C30387 * (2 * C31138 +
                   C30387 * (C31132 +
                             C30387 * (C30387 * C30586 * C30384 * C30472 +
                                       C31135 * ae) +
                             C30387 * C31135 * ae) +
                   C31139 * ae) +
         (2 * C31134 + C30387 * C31139) * ae) /
        C30365;
    const double C15812 = C15808 + C15809;
    const double C21419 = C21412 + C21413;
    const double C31152 = C30427 + C31150;
    const double C30546 = C30545 + C30540;
    const double C1176 =
        (-3 * (C30519 * C30595 + C30526)) / C30244 +
        C30586 * ((-2 * C30601) / C30244 - (C30586 * C30612) / C30244);
    const double C1319 = -(C30612 * C30628 + C30519 * C30595 + C30526) / C30244;
    const double C1719 =
        C30387 * ((-2 * C30601) / C30244 - (C30586 * C30612) / C30244);
    const double C2030 =
        (-3 * (C30519 * C30628 + C30526)) / C30244 +
        C30387 * ((-2 * C30637) / C30244 - (C30387 * C30642) / C30244);
    const double C30731 = C30729 / C30244;
    const double C30800 = C30797 / C30395;
    const double C30815 = C30811 / C30244;
    const double C30813 = C30809 / C30395;
    const double C5753 =
        (2 * C31013 + C30586 * C31027 +
         C30387 * (C30387 * C31034 + C31042 * ae) + C30387 * C31042 * ae) /
        C30365;
    const double C5755 = (C30387 * (3 * C31027 + C30586 * C31034) +
                          (3 * C30957 + C30586 * C31042) * ae) /
                         C30365;
    const double C6876 =
        (2 * (C30387 * C31034 + C31042 * ae) +
         C30387 * (C31034 +
                   C30387 * (C30387 * (2 * C30586 * C30439 +
                                       C30586 * (C30439 + C30472 * C30595)) +
                             C31052 * ae) +
                   C30387 * C31052 * ae) +
         (C31042 + C31052 * C30628) * ae) /
        C30365;
    const double C5603 = 4 * (2 * C30948 + C30586 * C30957) +
                         C30586 * (3 * C30957 + C30586 * C31042);
    const double C5749 = 2 * C30948 + C30586 * C30957 + C31042 * C30628;
    const double C5750 = C30387 * (3 * C30957 + C30586 * C31042);
    const double C6875 =
        2 * C30387 * C31042 + C30387 * (C31042 + C31052 * C30628);
    const double C6506 =
        (3 * (C31027 + C30387 * C31079 + C31077 * ae) +
         C30387 * (2 * C31079 +
                   C30387 * (C31032 +
                             C30387 * (C30387 * (C30439 + C30472 * C30595) +
                                       C31050 * ae) +
                             C30387 * C31050 * ae) +
                   C31080 * ae) +
         (2 * C31077 + C30387 * C31080) * ae) /
        C30365;
    const double C6889 = C6882 + C6883;
    const double C25954 = C25940 + C25941;
    const double C27255 = C19048 * C6504;
    const double C27254 = C19050 * C6500;
    const double C31169 = C31029 + C31167;
    const double C10775 = 4 * (2 * C30986 + C30387 * C30989) +
                          C30387 * (3 * C30989 + C30387 * C31106);
    const double C31124 = C31122 + C31117;
    const double C30531 = C30530 + C30529;
    const double C2192 = C113 * C1306;
    const double C19970 = C19050 * C1306;
    const double C21414 = C19049 * C1306;
    const double C15810 = C113 * C2423;
    const double C21416 = C19050 * C2423;
    const double C5629 = C5620 + C5621;
    const double C25771 = C25760 + C25761;
    const double C5786 = C5772 + C5773;
    const double C25953 = C25938 + C25939;
    const double C25951 = C25934 + C25935;
    const double C5788 = C5776 + C5777;
    const double C25769 = C25756 + C25757;
    const double C26419 = C26412 + C26413;
    const double C30755 = C30752 / C30365;
    const double C30485 = C30384 * C30483;
    const double C1438 =
        (2 * C30586 * C30450 + C30586 * (C30450 + C30483 * C30595)) / C30365;
    const double C1600 = (C30387 * (C30450 + C30483 * C30595) +
                          (C30868 + C30571 * C30595) * ae) /
                         C30365;
    const double C2304 =
        (2 * (C30387 * C30450 + C30868 * ae) +
         C30387 * (C30450 + C30387 * (C30387 * C30483 + C30571 * ae) +
                   C30387 * C30571 * ae) +
         (C30868 + C30571 * C30628) * ae) /
        C30365;
    const double C30574 = C30572 + C30564;
    const double C30733 = C30586 * C30732;
    const double C6775 = (-2 * C30387 * C30612) / C30244 -
                         (C30387 * (C30732 * C30628 + C30612)) / C30244;
    const double C30803 = C30801 + C30660;
    const double C30816 = C30387 * C30812;
    const double C30700 = C30697 - C30699;
    const double C6507 =
        (-3 * (C30685 * C30628 + C30609)) / C30244 +
        C30387 * ((-2 * C30721) / C30244 - (C30387 * C30726) / C30244);
    const double C30786 = C30779 - C30783;
    const double C30842 = C30839 / C30244;
    const double C6664 = C2198 * C30270;
    const double C7288 = C2198 * C2642;
    const double C14624 = C2198 * C1160;
    const double C5634 = C5628 * C1160;
    const double C5794 = C5785 * C1160;
    const double C5796 = C5787 * C1160;
    const double C165 = C31509 * C136;
    const double C675 = C31509 * C314;
    const double C358 = C31509 * C322;
    const double C30479 = C30476 - C30458;
    const double C5605 =
        4 * ((-2 * C30603) / C30244 - (C30586 * C30609) / C30244) +
        C30586 * ((-3 * C30609) / C30244 + C30586 * C30688);
    const double C5752 =
        (-2 * C30603) / C30244 - (C30586 * C30609) / C30244 + C30688 * C30628;
    const double C5754 = C30387 * ((-3 * C30609) / C30244 + C30586 * C30688);
    const double C30840 = C30837 / C30365;
    const double C10777 =
        4 * ((-2 * C30625) / C30244 - (C30387 * C30633) / C30244) +
        C30387 * ((-3 * C30633) / C30244 + C30387 * C30757);
    const double C30787 = C30784 - C30458;
    const double C30575 = C30573 / C30244;
    const double C30873 = C30871 + C30872;
    const double C2186 =
        (C30586 * C30450 + C30387 * (C30387 * C30586 * C30483 + C31008 * ae) +
         C30387 * C31008 * ae) /
        C30365;
    const double C2185 = C30586 * C30868 + C31008 * C30628;
    const double C6658 =
        (2 * C31017 + C30586 * C31058 +
         C30387 * (C30387 * (2 * C30586 * C30457 +
                             C30586 * (C30457 + C30384 * C30472 * C30595)) +
                   C31087 * ae) +
         C30387 * C31087 * ae) /
        C30365;
    const double C5899 = 4 * (2 * C30945 + C30586 * C30961) +
                         C30586 * (3 * C30961 + C30586 * C31087);
    const double C6079 = C30387 * (3 * C30961 + C30586 * C31087);
    const double C6657 = 2 * C30945 + C30586 * C30961 + C31087 * C30628;
    const double C11031 = 4 * (2 * C30994 + C30387 * C30997) +
                          C30387 * (3 * C30997 + C30387 * C31153);
    const double C31054 = C31046 + C31053;
    const double C31127 = C31115 + C31125;
    const double C11133 = 4 * (2 * C31069 + C30387 * C31072) +
                          C30387 * (3 * C31072 + C30387 * C31170);
    const double C5626 = C5614 + C5615;
    const double C30425 = C30424 - C30415;
    const double C30635 = C30634 - C30630;
    const double C6894 = C6890 * C31267;
    const double C5627 = C5616 + C5617;
    const double C5782 = C5762 + C5763;
    const double C30451 = C30449 - C30434;
    const double C30669 = C30668 - C30428;
    const double C30718 = C30717 / C30365;
    const double C30756 = C30753 - C30745;
    const double C30484 = C30482 - C30466;
    const double C30678 = C30677 - C30458;
    const double C30785 = C30782 - C30772;
    const double C30841 = C30838 / C30365;
    const double C31590 = C31373 * C31367;
    const double C31624 = C31592 + C31373;
    const double C31594 = C31380 / C30250;
    const double C31591 = C31380 * C31367;
    const double C1431 = C31655 - (C31373 * C31369) / C30244;
    const double C31596 = C31413 * C31407;
    const double C31630 = C31598 + C31413;
    const double C31600 = C31420 / C30250;
    const double C31597 = C31420 * C31407;
    const double C2299 = C31657 - (C31413 * C31409) / C30244;
    const double C30293 = C30284 - C30290;
    const double C30283 = C30278 * de;
    const double C7408 = C363 * C30305;
    const double C118 =
        (C30305 / C30250 + (0 * ce) / C30244) / C30250 - (0 * de) / C30244;
    const double C668 = C30305 / C30250 - (0 * de) / C30244;
    const double C2536 = C30305 / C30250 + (0 * ce) / C30244;
    const double C5522 = C363 * C1091;
    const double C30282 = C30277 * ce;
    const double C293 =
        ((-C30245 / C30244) / C30250 - (C30263 * de) / C30244) / C30250 -
        ((C30242 * ((-C30252) / C30250 - (C30277 * de) / C30244) + C2635) *
         de) /
            C30244 +
        (-C30264 / C30244) / C30250 - (0 * de) / C30244;
    const double C294 =
        ((-C30252) / C30250 - (C30277 * de) / C30244) / C30250 -
        ((C30242 * ((-C30264 / C30244) / C30250 - (0 * de) / C30244) + C31277) *
         de) /
            C30244;
    const double C2641 = (-C30252) / C30250 - (C30277 * de) / C30244;
    const double C31604 = C31568 / C30244;
    const double C31638 = C31608 / C30250;
    const double C31639 = C31610 + C31576;
    const double C661 = C31576 - C31278 / C30256;
    const double C31607 = C31572 / C30244;
    const double C5133 = C4901 * C659;
    const double C5125 = C4899 * C659;
    const double C13891 = C362 * C659;
    const double C13606 = C365 * C295;
    const double C14378 = C365 * C1091;
    const double C16578 = C365 * C30305;
    const double C4888 = C369 * C295;
    const double C5528 = C369 * C1091;
    const double C7414 = C369 * C30305;
    const double C14764 = C369 * C30270;
    const double C16218 = C369 * C2642;
    const double C5390 = C970 * C295;
    const double C7578 = C970 * C30305;
    const double C8634 = C970 * C1091;
    const double C14966 = C970 * C30270;
    const double C16420 = C970 * C2642;
    const double C30446 = C30443 - C30428;
    const double C10778 =
        (4 * (2 * C30988 + C30387 * C31107 + C30989 * ae) +
         C30387 *
             (3 * C31107 +
              C30387 *
                  (2 * C31099 +
                   C30387 * (C30418 + C30387 * (C30387 * C30439 + C30514 * ae) +
                             C30387 * C30514 * ae) +
                   C31101 * ae) +
              C31106 * ae) +
         (3 * C30989 + C30387 * C31106) * ae) /
        C30365;
    const double C785 = C31509 * C503;
    const double C19079 = C19048 * C503;
    const double C547 = C31509 * C511;
    const double C19763 = C19048 * C511;
    const double C965 = C31509 * C946;
    const double C19621 = C19048 * C946;
    const double C164 = C113 * C124;
    const double C674 = C113 * C300;
    const double C357 = C113 * C304;
    const double C784 = C113 * C489;
    const double C19078 = C19050 * C489;
    const double C546 = C113 * C493;
    const double C19762 = C19050 * C493;
    const double C964 = C113 * C938;
    const double C19620 = C19050 * C938;
    const double C2200 = C2194 + C2195;
    const double C19987 = C19976 + C19977;
    const double C4896 = C1452 * C295;
    const double C5534 = C1452 * C1091;
    const double C7420 = C1452 * C30305;
    const double C14770 = C1452 * C30270;
    const double C16224 = C1452 * C2642;
    const double C5398 = C1614 * C295;
    const double C7584 = C1614 * C30305;
    const double C8640 = C1614 * C1091;
    const double C14972 = C1614 * C30270;
    const double C16982 = C1614 * C2642;
    const double C5924 = C5918 + C5919;
    const double C6672 = C6668 + C6669;
    const double C20709 = C20702 + C20703;
    const double C6099 = C6094 + C6095;
    const double C20503 = C20496 + C20497;
    const double C21561 = C21554 + C21555;
    const double C15945 = C15812 * C1160;
    const double C31154 = C31152 + C31147;
    const double C30547 = C30384 * C30546;
    const double C30552 = -3 * C30546;
    const double C30599 = C30586 * C30546;
    const double C30647 = ae * C30546;
    const double C30645 = C30387 * C30546;
    const double C5920 = C113 * C1176;
    const double C6670 = C113 * C1319;
    const double C20706 = C19050 * C1319;
    const double C6096 = C113 * C1719;
    const double C20500 = C19050 * C1719;
    const double C21558 = C19050 * C2030;
    const double C5781 = C31509 * C5753;
    const double C26415 = C19048 * C5753;
    const double C6212 = C31509 * C5755;
    const double C25763 = C19048 * C5755;
    const double C5624 = C113 * C5603;
    const double C5780 = C113 * C5749;
    const double C26414 = C19050 * C5749;
    const double C6211 = C113 * C5750;
    const double C25762 = C19050 * C5750;
    const double C6893 = C6889 * C1160;
    const double C27260 = C27254 + C27255;
    const double C31171 = C31169 + C31162;
    const double C31126 = C30387 * C31124;
    const double C135 =
        (-3 * (C30384 * C30526 + C30522 + C30861 * ce)) / C30244 +
        C30384 * ((-2 * C30526) / C30244 - (C30384 * C30531) / C30244 -
                  (C30863 * ce) / C30244) -
        ((2 * C30861 + C30384 * C30863) * ce) / C30244;
    const double C313 =
        C30586 * ((-2 * C30526) / C30244 - (C30384 * C30531) / C30244 -
                  (C30863 * ce) / C30244);
    const double C321 =
        -(C30531 * C30595 + C30384 * C30526 + C30522 + C30861 * ce) / C30244;
    const double C502 =
        C30387 * ((-2 * C30526) / C30244 - (C30384 * C30531) / C30244 -
                  (C30863 * ce) / C30244);
    const double C510 =
        -(C30531 * C30628 + C30384 * C30526 + C30522 + C30861 * ce) / C30244;
    const double C945 = -(C30387 * C30586 * C30531) / C30244;
    const double C1167 = (-2 * C30586 * C30531) / C30244 -
                         (C30586 * (C30546 * C30595 + C30531)) / C30244;
    const double C1310 = -(C30387 * (C30546 * C30595 + C30531)) / C30244;
    const double C2021 = (-2 * C30387 * C30531) / C30244 -
                         (C30387 * (C30546 * C30628 + C30531)) / C30244;
    const double C5635 = C5629 * C31267;
    const double C5917 = C5629 * C31569;
    const double C7121 = C5629 * C2635;
    const double C5795 = C5786 * C31267;
    const double C6667 = C5786 * C31569;
    const double C7291 = C5786 * C2635;
    const double C5797 = C5788 * C31267;
    const double C6093 = C5788 * C31569;
    const double C7734 = C5788 * C2635;
    const double C30758 = C30755 - C30428;
    const double C30487 = C30462 + C30485;
    const double C30576 = C30384 * C30574;
    const double C30614 = C30574 * C30595;
    const double C30648 = C30574 * C30628;
    const double C30663 = C30586 * C30574;
    const double C30734 = C30733 / C30244;
    const double C10931 =
        (-3 * (C30660 * C30628 + C30601)) / C30244 +
        C30387 * ((-2 * C30795) / C30244 - (C30387 * C30803) / C30244);
    const double C30819 = C30816 / C30244;
    const double C30701 = C30586 * C30700;
    const double C6877 =
        2 * C30387 * C30688 + C30387 * (C30688 + C30700 * C30628);
    const double C30789 = C30387 * C30786;
    const double C30845 = C30835 - C30842;
    const double C5622 = C113 * C5605;
    const double C5778 = C113 * C5752;
    const double C26410 = C19050 * C5752;
    const double C6209 = C113 * C5754;
    const double C25758 = C19050 * C5754;
    const double C30843 = C30840 - C30824;
    const double C125 = 5 * (3 * C30863 + C30384 * C30868) +
                        C30384 * (4 * C30868 + C30384 * C30873);
    const double C305 = 3 * C30863 + C30384 * C30868 + C30873 * C30595;
    const double C494 = 3 * C30863 + C30384 * C30868 + C30873 * C30628;
    const double C669 = C30586 * (4 * C30868 + C30384 * C30873);
    const double C779 = C30387 * (4 * C30868 + C30384 * C30873);
    const double C939 = C30387 * C30586 * C30873;
    const double C5756 =
        (3 * C31027 + C30586 * C31034 +
         C30387 * (C30387 * (3 * C31032 +
                             C30586 * (2 * C30586 * C30439 +
                                       C30586 * (C30439 + C30472 * C30595))) +
                   C31054 * ae) +
         C30387 * C31054 * ae) /
        C30365;
    const double C6204 =
        (C30387 * (4 * C31034 +
                   C30586 * (3 * C31032 +
                             C30586 * (2 * C30586 * C30439 +
                                       C30586 * (C30439 + C30472 * C30595)))) +
         (4 * C31042 + C30586 * C31054) * ae) /
        C30365;
    const double C5604 = 5 * (3 * C30957 + C30586 * C31042) +
                         C30586 * (4 * C31042 + C30586 * C31054);
    const double C5751 = 3 * C30957 + C30586 * C31042 + C31054 * C30628;
    const double C6203 = C30387 * (4 * C31042 + C30586 * C31054);
    const double C10776 = 5 * (3 * C30989 + C30387 * C31106) +
                          C30387 * (4 * C31106 + C30387 * C31127);
    const double C5632 = C5626 * C31294;
    const double C144 =
        3 * ((-(C30409 * ce) / C30244) / C30365 - C30406 / C30395 +
             C30384 * C30425) -
        ((2 * C30409 + C30384 * C30422) * ce) / C30395 +
        C30384 *
            (2 * C30425 - (C30422 * ce) / C30395 +
             C30384 *
                 ((-(C30384 * C30418 * ce) / C30244) / C30365 -
                  C30417 / C30395 +
                  C30384 * ((-(C30384 * std::pow(C30389, 6) * bs[6] * C30400) /
                             C30244) /
                                C30365 -
                            (C30418 * ce) / C30395)));
    const double C328 = (yP - yQ) * ((-(C30409 * ce) / C30244) / C30365 -
                                     C30406 / C30395 + C30384 * C30425);
    const double C332 = (-(C30384 * C30406) / C30244) / C30365 -
                        (C30399 * ce) / C30395 + C30425 * std::pow(yP - yQ, 2);
    const double C517 =
        C30387 * ((-(C30409 * ce) / C30244) / C30365 - C30406 / C30395 +
                  C30384 * C30425) -
        (ae * (C30384 * (C30384 * C30402 * C30403 * C30504 + C30505 * ce) +
               C30396 * C30392 * C30504 + C30384 * C30505 * ce)) /
            C30395;
    const double C521 = (-(C30384 * C30406) / C30244) / C30365 -
                        (C30399 * ce) / C30395 -
                        (ae * C30387 * C30526) / C30395 +
                        C30387 * (C30387 * C30425 - (ae * C30526) / C30395);
    const double C951 =
        C30387 * C30586 * C30425 - (ae * C30586 * C30526) / C30395;
    const double C2036 =
        3 * ((-(ae * C30625) / C30244) / C30365 - C30406 / C30395 +
             C30387 * C30635) +
        (((-2 * C30625) / C30244 - (C30387 * C30633) / C30244) * ae) / C30365 +
        C30387 *
            (2 * C30635 - (ae * C30633) / C30395 +
             C30387 * ((-(ae * C30387 * C30515) / C30244) / C30365 - C30428 +
                       C30387 * ((-(C30387 * C30438) / C30244) / C30365 -
                                 (ae * C30515) / C30395)));
    const double C5633 = C5627 * C31294;
    const double C5791 = C5782 * C31294;
    const double C30452 = C30384 * C30451;
    const double C30455 = 2 * C30451;
    const double C30638 = C30387 * C30451;
    const double C30659 = C30586 * C30451;
    const double C30817 = C30451 - C30813;
    const double C1180 =
        2 * C30586 * C30425 + C30586 * (C30425 + C30451 * std::pow(C30586, 2));
    const double C1323 =
        C30586 * C30425 - (ae * C30387 * C30601) / C30395 +
        C30387 * (C30387 * C30586 * C30451 - (ae * C30601) / C30395);
    const double C1326 = C30387 * (C30425 + C30451 * C30595) -
                         (ae * (C30519 * C30595 + C30526)) / C30395;
    const double C2034 =
        2 * (C30387 * C30425 - (ae * C30526) / C30395) -
        (ae * (C30519 * std::pow(C30387, 2) + C30526)) / C30395 +
        C30387 * (C30425 - (ae * C30387 * C30519) / C30395 +
                  C30387 * (C30387 * C30451 - (ae * C30519) / C30395));
    const double C5609 =
        4 * ((-2 * C30656) / C30395 + C30586 * C30669) +
        C30586 * (3 * C30669 +
                  C30586 * ((-2 * C30586 * C30438) / C30395 +
                            C30586 * ((-(C30471 * C30595) / C30244) / C30365 -
                                      C30458)));
    const double C30719 = C30718 - C30715;
    const double C30759 = C30387 * C30756;
    const double C30762 = 2 * C30756;
    const double C30486 = C30384 * C30484;
    const double C30704 = C30484 * C30595;
    const double C30796 = C30586 * C30484;
    const double C30806 = C30387 * C30484;
    const double C1183 =
        3 * (C30425 + C30451 * C30595) +
        C30586 * (2 * C30586 * C30451 + C30586 * (C30451 + C30484 * C30595));
    const double C1329 =
        C30425 + C30451 * C30595 - (ae * C30387 * C30612) / C30395 +
        C30387 * (C30387 * (C30451 + C30484 * C30595) - (ae * C30612) / C30395);
    const double C1723 =
        (((-2 * C30601) / C30244 - (C30586 * C30612) / C30244) * ae) / C30365 +
        C30387 * (2 * C30586 * C30451 + C30586 * (C30451 + C30484 * C30595));
    const double C30679 = C30586 * C30678;
    const double C30722 = C30387 * C30678;
    const double C6508 =
        2 * (C30387 * C30669 - (ae * C30609) / C30395) -
        (ae * (C30685 * C30628 + C30609)) / C30395 +
        C30387 * (C30669 - (ae * C30387 * C30685) / C30395 +
                  C30387 * (C30387 * C30678 - (ae * C30685) / C30395));
    const double C30788 = C30387 * C30785;
    const double C30844 = C30841 - C30830;
    const double C31621 = C31590 / C30244;
    const double C31645 = C31624 / C30250;
    const double C31646 = C31625 + C31594;
    const double C1433 = C31594 - C31378 / C30256;
    const double C31623 = C31591 / C30244;
    const double C31627 = C31596 / C30244;
    const double C31648 = C31630 / C30250;
    const double C31649 = C31631 + C31600;
    const double C2301 = C31600 - C31418 / C30256;
    const double C31629 = C31597 / C30244;
    const double C30287 = C30283 / C30244;
    const double C5130 = C365 * C668;
    const double C7000 = C365 * C2536;
    const double C30286 = C30282 / C30244;
    const double C4909 = C4903 * C293;
    const double C4906 = C4900 * C293;
    const double C4904 = C4898 * C293;
    const double C5407 = C5403 * C293;
    const double C5405 = C5401 * C293;
    const double C13610 = C367 * C293;
    const double C13602 = C361 * C293;
    const double C14224 = C968 * C293;
    const double C4890 = C1450 * C294;
    const double C4886 = C367 * C294;
    const double C4878 = C361 * C294;
    const double C5392 = C1612 * C294;
    const double C5384 = C968 * C294;
    const double C13608 = C369 * C294;
    const double C13604 = C363 * C294;
    const double C14222 = C970 * C294;
    const double C7120 = C5628 * C2641;
    const double C7118 = C4903 * C2641;
    const double C7112 = C4900 * C2641;
    const double C7108 = C4898 * C2641;
    const double C7290 = C5785 * C2641;
    const double C7286 = C5783 * C2641;
    const double C7284 = C5403 * C2641;
    const double C7280 = C5401 * C2641;
    const double C7733 = C5787 * C2641;
    const double C16222 = C1450 * C2641;
    const double C16220 = C367 * C2641;
    const double C16214 = C361 * C2641;
    const double C16424 = C2198 * C2641;
    const double C16422 = C968 * C2641;
    const double C16980 = C1612 * C2641;
    const double C31659 = C31604 + C31651;
    const double C660 = C31638 - (C31280 * C31263) / C30244;
    const double C105 = C31639 / C30250 - C31278 / C31611;
    const double C31652 = C31607 + C31638;
    const double C176 = C164 + C165;
    const double C678 = C674 + C675;
    const double C371 = C357 + C358;
    const double C788 = C784 + C785;
    const double C19097 = C19078 + C19079;
    const double C560 = C546 + C547;
    const double C19769 = C19762 + C19763;
    const double C972 = C964 + C965;
    const double C19627 = C19620 + C19621;
    const double C15676 = C2200 * C30270;
    const double C16426 = C2200 * C2642;
    const double C5928 = C5924 * C30270;
    const double C7122 = C5924 * C2642;
    const double C14475 = C5924 * C1160;
    const double C6674 = C6672 * C30270;
    const double C7292 = C6672 * C2642;
    const double C14629 = C6672 * C1160;
    const double C6102 = C6099 * C30270;
    const double C7735 = C6099 * C2642;
    const double C15105 = C6099 * C1160;
    const double C11032 =
        (4 * (2 * C30996 + C30387 * C31154 + C30997 * ae) +
         C30387 * (3 * C31154 +
                   C30387 * (2 * C31146 +
                             C30387 * (C30457 +
                                       C30387 * (C30387 * C30384 * C30472 +
                                                 C30561 * ae) +
                                       C30387 * C30561 * ae) +
                             C31148 * ae) +
                   C31153 * ae) +
         (3 * C30997 + C30387 * C31153) * ae) /
        C30365;
    const double C30548 = C30547 / C30244;
    const double C30557 = C30552 / C30244;
    const double C1304 = -(C30599 * C30628 + C30586 * C30531) / C30244;
    const double C30649 = C30647 / C30395;
    const double C5631 = C5624 + C5625;
    const double C5790 = C5780 + C5781;
    const double C26420 = C26414 + C26415;
    const double C6215 = C6211 + C6212;
    const double C25772 = C25762 + C25763;
    const double C11134 =
        (4 * (2 * C31071 + C30387 * C31171 + C31072 * ae) +
         C30387 * (3 * C31171 +
                   C30387 * (2 * C31165 +
                             C30387 * (C31157 +
                                       C30387 * (C30387 * C30586 * C30472 +
                                                 C31160 * ae) +
                                       C30387 * C31160 * ae) +
                             C31166 * ae) +
                   C31170 * ae) +
         (3 * C31072 + C30387 * C31170) * ae) /
        C30365;
    const double C31128 = C31109 + C31126;
    const double C162 = C113 * C135;
    const double C19080 = C19049 * C135;
    const double C347 = C113 * C313;
    const double C19622 = C19049 * C313;
    const double C355 = C113 * C321;
    const double C19274 = C19049 * C321;
    const double C536 = C113 * C502;
    const double C19072 = C19050 * C502;
    const double C19764 = C19049 * C502;
    const double C544 = C113 * C510;
    const double C19468 = C19049 * C510;
    const double C19452 = C19050 * C510;
    const double C962 = C113 * C945;
    const double C19258 = C19050 * C945;
    const double C19978 = C19049 * C945;
    const double C1448 = C113 * C1167;
    const double C1610 = C113 * C1310;
    const double C19276 = C19050 * C1310;
    const double C2314 = C113 * C2021;
    const double C19470 = C19050 * C2021;
    const double C5638 = C5634 + C5635;
    const double C5800 = C5794 + C5795;
    const double C6208 = C5796 + C5797;
    const double C138 = (5 * (3 * C30422 + C30384 * C30450) +
                         C30384 * (4 * C30450 + C30384 * C30487)) /
                        C30365;
    const double C324 =
        (3 * C30422 + C30384 * C30450 + C30487 * C30595) / C30365;
    const double C513 =
        (3 * C30422 + C30384 * C30450 +
         C30387 * (C30387 * C30487 + C30873 * ae) + C30387 * C30873 * ae) /
        C30365;
    const double C670 = (C30586 * (4 * C30450 + C30384 * C30487)) / C30365;
    const double C780 = (C30387 * (4 * C30450 + C30384 * C30487) +
                         (4 * C30868 + C30384 * C30873) * ae) /
                        C30365;
    const double C948 =
        (C30387 * C30586 * C30487 + C30586 * C30873 * ae) / C30365;
    const double C30577 = C30576 / C30244;
    const double C30615 = C30614 + C30546;
    const double C30650 = C30648 + C30546;
    const double C2425 = (-2 * C30387 * C30599) / C30244 -
                         (C30387 * (C30663 * C30628 + C30599)) / C30244;
    const double C30735 = C30731 - C30734;
    const double C30821 = C30815 - C30819;
    const double C30702 = C30694 + C30701;
    const double C30791 = C30773 + C30789;
    const double C11135 =
        4 * ((-2 * C30710) / C30244 - (C30387 * C30716) / C30244) +
        C30387 * ((-3 * C30716) / C30244 + C30387 * C30845);
    const double C163 = C31509 * C144;
    const double C19081 = C19047 * C144;
    const double C344 = C31509 * C328;
    const double C19261 = C19047 * C328;
    const double C352 = C31509 * C332;
    const double C19269 = C19047 * C332;
    const double C533 = C31509 * C517;
    const double C19067 = C19048 * C517;
    const double C19455 = C19047 * C517;
    const double C541 = C31509 * C521;
    const double C19463 = C19047 * C521;
    const double C19447 = C19048 * C521;
    const double C959 = C31509 * C951;
    const double C19253 = C19048 * C951;
    const double C19973 = C19047 * C951;
    const double C30453 = C30446 + C30452;
    const double C30469 = C30455 - C30463;
    const double C30643 = C30638 - C30641;
    const double C2427 =
        2 * (C30387 * C30659 - (ae * C30601) / C30395) -
        (ae * (C30660 * C30628 + C30601)) / C30395 +
        C30387 * (C30659 - (ae * C30387 * C30660) / C30395 +
                  C30387 * (C30387 * C30586 * C30484 - (ae * C30660) / C30395));
    const double C1445 = C31509 * C1180;
    const double C20499 = C19047 * C1180;
    const double C2193 = C31509 * C1323;
    const double C19971 = C19048 * C1323;
    const double C21415 = C19047 * C1323;
    const double C1607 = C31509 * C1326;
    const double C19267 = C19048 * C1326;
    const double C20705 = C19047 * C1326;
    const double C2311 = C31509 * C2034;
    const double C19461 = C19048 * C2034;
    const double C21557 = C19047 * C2034;
    const double C5623 = C31509 * C5609;
    const double C6509 =
        3 * ((-(ae * C30710) / C30244) / C30365 - C30656 / C30395 +
             C30387 * C30719) +
        (((-2 * C30710) / C30244 - (C30387 * C30716) / C30244) * ae) / C30365 +
        C30387 * (2 * C30719 - (ae * C30716) / C30395 +
                  C30387 * ((-(ae * C30387 * C30692) / C30244) / C30365 -
                            C30671 / C30395 +
                            C30387 * ((-(C30387 * C30586 * C30471) / C30244) /
                                          C30365 -
                                      (ae * C30692) / C30395)));
    const double C30760 = C30758 + C30759;
    const double C30776 = C30762 - C30769;
    const double C30488 = C30479 + C30486;
    const double C30705 = C30451 + C30704;
    const double C30799 = C30387 * C30796;
    const double C30814 = C30806 - C30810;
    const double C5921 = C31509 * C1183;
    const double C6671 = C31509 * C1329;
    const double C20707 = C19048 * C1329;
    const double C6097 = C31509 * C1723;
    const double C20501 = C19048 * C1723;
    const double C30680 = C30675 + C30679;
    const double C30727 = C30722 - C30725;
    const double C6881 = C31509 * C6508;
    const double C25937 = C19048 * C6508;
    const double C30790 = C30787 + C30788;
    const double C30846 = C30387 * C30844;
    const double C31660 = C31621 + C31655;
    const double C1432 = C31645 - (C31380 * C31369) / C30244;
    const double C1158 = C31646 / C30250 - C31378 / C31611;
    const double C31656 = C31623 + C31645;
    const double C31661 = C31627 + C31657;
    const double C2300 = C31648 - (C31420 * C31409) / C30244;
    const double C2013 = C31649 / C30250 - C31418 / C31611;
    const double C31658 = C31629 + C31648;
    const double C30289 = C30286 - C30265;
    const double C4910 = C4906 + C4907;
    const double C7125 = C7117 + C7118;
    const double C7124 = C7112 + C7113;
    const double C7732 = C7283 + C7284;
    const double C7003 = C4901 * C31659;
    const double C6995 = C4899 * C31659;
    const double C16077 = C362 * C31659;
    const double C102 =
        (C31650 + 2 * C31272) / C30250 - (C31659 * C31263) / C30244;
    const double C5127 = C362 * C660;
    const double C6997 = C362 * C31652;
    const double C103 =
        (C31637 + 2 * C31280 + C31659) / C30250 - (C31652 * C31263) / C30244;
    const double C104 = (C31609 + C31277 / C30244 + C31652) / C30250 -
                        (C31639 * C31263) / C30244;
    const double C13896 = C678 * C668;
    const double C16082 = C678 * C2536;
    const double C5138 = C371 * C668;
    const double C7008 = C371 * C2536;
    const double C13612 = C371 * C295;
    const double C14384 = C371 * C1091;
    const double C16584 = C371 * C30305;
    const double C14226 = C972 * C295;
    const double C16784 = C972 * C30305;
    const double C18170 = C972 * C1091;
    const double C30549 = C30538 - C30548;
    const double C2196 = C113 * C1304;
    const double C19980 = C19050 * C1304;
    const double C5637 = C5631 * C1160;
    const double C5799 = C5790 * C1160;
    const double C6217 = C6215 * C1160;
    const double C31129 = C31128 + C31113;
    const double C5639 = C5638 * C31294;
    const double C5801 = C5800 * C31294;
    const double C6213 = C6208 * C31294;
    const double C30578 = C30558 - C30577;
    const double C1178 =
        (-3 * (C30546 * C30595 + C30531)) / C30244 +
        C30586 * ((-2 * C30599) / C30244 - (C30586 * C30615) / C30244);
    const double C1321 = -(C30615 * C30628 + C30546 * C30595 + C30531) / C30244;
    const double C1721 =
        C30387 * ((-2 * C30599) / C30244 - (C30586 * C30615) / C30244);
    const double C2032 =
        (-3 * (C30546 * C30628 + C30531)) / C30244 +
        C30387 * ((-2 * C30645) / C30244 - (C30387 * C30650) / C30244);
    const double C5901 =
        4 * ((-2 * C30601) / C30244 - (C30586 * C30612) / C30244) +
        C30586 * ((-3 * C30612) / C30244 + C30586 * C30735);
    const double C6081 = C30387 * ((-3 * C30612) / C30244 + C30586 * C30735);
    const double C6659 =
        (-2 * C30601) / C30244 - (C30586 * C30612) / C30244 + C30735 * C30628;
    const double C11033 =
        4 * ((-2 * C30637) / C30244 - (C30387 * C30642) / C30244) +
        C30387 * ((-3 * C30642) / C30244 + C30387 * C30821);
    const double C5608 = 5 * ((-3 * C30609) / C30244 + C30586 * C30688) +
                         C30586 * (4 * C30688 + C30586 * C30702);
    const double C5757 =
        (-3 * C30609) / C30244 + C30586 * C30688 + C30702 * C30628;
    const double C6205 = C30387 * (4 * C30688 + C30586 * C30702);
    const double C10780 = 5 * ((-3 * C30633) / C30244 + C30387 * C30757) +
                          C30387 * (4 * C30757 + C30387 * C30791);
    const double C175 = C162 + C163;
    const double C19098 = C19080 + C19081;
    const double C364 = C343 + C344;
    const double C19285 = C19260 + C19261;
    const double C368 = C351 + C352;
    const double C19289 = C19268 + C19269;
    const double C553 = C532 + C533;
    const double C19091 = C19066 + C19067;
    const double C19479 = C19454 + C19455;
    const double C557 = C540 + C541;
    const double C19483 = C19462 + C19463;
    const double C19475 = C19446 + C19447;
    const double C969 = C958 + C959;
    const double C19281 = C19252 + C19253;
    const double C19985 = C19972 + C19973;
    const double C145 =
        4 * (2 * C30425 - (C30422 * ce) / C30395 + C30384 * C30453) -
        ((3 * C30422 + C30384 * C30450) * ce) / C30395 +
        C30384 *
            (3 * C30453 - (C30450 * ce) / C30395 +
             C30384 * (2 * C30451 - (C30445 * ce) / C30395 +
                       C30384 * ((-(C30384 * C30439 * ce) / C30244) / C30365 -
                                 C30438 / C30395 +
                                 C30384 * ((-(C30384 * std::pow(C30391, 7) *
                                              bs[7] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30439 * ce) / C30395))));
    const double C329 =
        (yP - yQ) * (2 * C30425 - (C30422 * ce) / C30395 + C30384 * C30453);
    const double C333 = (-(C30409 * ce) / C30244) / C30365 - C30406 / C30395 +
                        C30384 * C30425 + C30453 * std::pow(yP - yQ, 2);
    const double C518 =
        (((-2 * (C30384 * C30509 + C30505 * ce)) / C30244 -
          (C30384 *
           (C30384 * (C30384 * C30410 * C30411 * C30504 + C30508 * ce) +
            C30509 + C30384 * C30508 * ce)) /
              C30244 -
          ((C30505 + C30508 * C30413) * ce) / C30244) *
         ae) /
            C30365 +
        C30387 * (2 * C30425 - (C30422 * ce) / C30395 + C30384 * C30453);
    const double C522 = (-(C30409 * ce) / C30244) / C30365 - C30406 / C30395 +
                        C30384 * C30425 - (ae * C30387 * C30531) / C30395 +
                        C30387 * (C30387 * C30453 - (ae * C30531) / C30395);
    const double C952 =
        C30387 * C30586 * C30453 - (ae * C30586 * C30531) / C30395;
    const double C2037 =
        3 * (C30425 - (ae * C30637) / C30395 + C30387 * C30643) +
        (((-2 * C30637) / C30244 - (C30387 * C30642) / C30244) * ae) / C30365 +
        C30387 *
            (2 * C30643 - (ae * C30642) / C30395 +
             C30387 * (C30451 - (ae * C30387 * C30543) / C30395 +
                       C30387 * (C30387 * C30484 - (ae * C30543) / C30395)));
    const double C15811 = C31509 * C2427;
    const double C21417 = C19048 * C2427;
    const double C1451 = C1444 + C1445;
    const double C20504 = C20498 + C20499;
    const double C2199 = C2192 + C2193;
    const double C19984 = C19970 + C19971;
    const double C21420 = C21414 + C21415;
    const double C1613 = C1606 + C1607;
    const double C19288 = C19266 + C19267;
    const double C20710 = C20704 + C20705;
    const double C2317 = C2310 + C2311;
    const double C19482 = C19460 + C19461;
    const double C21562 = C21556 + C21557;
    const double C5630 = C5622 + C5623;
    const double C27251 = C19048 * C6509;
    const double C10781 =
        4 * (2 * C30635 - (ae * C30633) / C30395 + C30387 * C30760) +
        (((-3 * C30633) / C30244 + C30387 * C30757) * ae) / C30365 +
        C30387 *
            (3 * C30760 + (C30757 * ae) / C30365 +
             C30387 *
                 (2 * C30756 - (ae * C30747) / C30395 +
                  C30387 *
                      ((-(ae * C30387 * C30539) / C30244) / C30365 - C30458 +
                       C30387 * ((-(C30387 * C30471) / C30244) / C30365 -
                                 (ae * C30539) / C30395))));
    const double C30489 = C30384 * C30488;
    const double C30646 = C30387 * C30488;
    const double C30662 = C30586 * C30488;
    const double C1179 =
        2 * C30586 * C30453 + C30586 * (C30453 + C30488 * std::pow(C30586, 2));
    const double C1184 =
        3 * (C30453 + C30488 * C30595) +
        C30586 *
            (2 * C30586 * C30488 +
             C30586 *
                 (C30488 +
                  ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                   C30471 / C30395 +
                   C30384 * ((-(C30384 * std::pow(C30389, 8) * bs[8] * C30400) /
                              C30244) /
                                 C30365 -
                             (C30472 * ce) / C30395)) *
                      C30595));
    const double C1322 =
        C30586 * C30453 - (ae * C30387 * C30599) / C30395 +
        C30387 * (C30387 * C30586 * C30488 - (ae * C30599) / C30395);
    const double C1325 = C30387 * (C30453 + C30488 * C30595) -
                         (ae * (C30546 * C30595 + C30531)) / C30395;
    const double C1330 =
        C30453 + C30488 * C30595 - (ae * C30387 * C30615) / C30395 +
        C30387 *
            (C30387 *
                 (C30488 +
                  ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                   C30471 / C30395 +
                   C30384 * ((-(C30384 * std::pow(C30389, 8) * bs[8] * C30400) /
                              C30244) /
                                 C30365 -
                             (C30472 * ce) / C30395)) *
                      C30595) -
             (ae * C30615) / C30395);
    const double C1724 =
        (((-2 * C30599) / C30244 - (C30586 * C30615) / C30244) * ae) / C30365 +
        C30387 *
            (2 * C30586 * C30488 +
             C30586 *
                 (C30488 +
                  ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                   C30471 / C30395 +
                   C30384 * ((-(C30384 * std::pow(C30389, 8) * bs[8] * C30400) /
                              C30244) /
                                 C30365 -
                             (C30472 * ce) / C30395)) *
                      C30595));
    const double C2033 =
        2 * (C30387 * C30453 - (ae * C30531) / C30395) -
        (ae * (C30546 * std::pow(C30387, 2) + C30531)) / C30395 +
        C30387 * (C30453 - (ae * C30387 * C30546) / C30395 +
                  C30387 * (C30387 * C30488 - (ae * C30546) / C30395));
    const double C5902 =
        4 * (2 * C30659 + C30586 * C30705) +
        C30586 *
            (3 * C30705 +
             C30586 * (2 * C30586 * C30484 +
                       C30586 * (C30484 + ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395) *
                                              C30595)));
    const double C6082 =
        (((-3 * C30612) / C30244 +
          C30586 * ((-2 * C30660) / C30244 -
                    (C30586 * (C30566 * C30595 + C30543)) / C30244)) *
         ae) /
            C30365 +
        C30387 *
            (3 * C30705 +
             C30586 * (2 * C30586 * C30484 +
                       C30586 * (C30484 + ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395) *
                                              C30595)));
    const double C6660 =
        2 * C30659 + C30586 * C30705 + (C30387 * C30735 * ae) / C30365 +
        C30387 *
            ((C30735 * ae) / C30365 +
             C30387 * (2 * C30586 * C30484 +
                       C30586 * (C30484 + ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395) *
                                              C30595)));
    const double C6776 =
        2 * (C30387 * C30705 - (ae * C30612) / C30395) -
        (ae * (C30732 * C30628 + C30612)) / C30395 +
        C30387 *
            (C30705 - (ae * C30387 * C30732) / C30395 +
             C30387 * (C30387 * (C30484 + ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395) *
                                              C30595) -
                       (ae * C30732) / C30395));
    const double C30802 = C30799 - C30800;
    const double C30818 = C30387 * C30814;
    const double C5925 = C5920 + C5921;
    const double C6673 = C6670 + C6671;
    const double C20711 = C20706 + C20707;
    const double C6100 = C6096 + C6097;
    const double C20505 = C20500 + C20501;
    const double C5610 =
        5 * (3 * C30669 + C30586 * C30680) +
        C30586 * (4 * C30680 +
                  C30586 * (3 * C30678 +
                            C30586 * ((-2 * C30586 * C30471) / C30395 +
                                      C30586 * ((-(std::pow(C30389, 8) * bs[8] *
                                                   C30400 * C30595) /
                                                 C30244) /
                                                    C30365 -
                                                C30471 / C30395))));
    const double C5758 = (-2 * C30656) / C30395 + C30586 * C30669 +
                         (C30387 * C30688 * ae) / C30365 +
                         C30387 * ((C30688 * ae) / C30365 + C30387 * C30680);
    const double C5759 =
        (((-3 * C30609) / C30244 + C30586 * C30688) * ae) / C30365 +
        C30387 * (3 * C30669 + C30586 * C30680);
    const double C5760 =
        3 * C30669 + C30586 * C30680 + (C30387 * C30702 * ae) / C30365 +
        C30387 * ((C30702 * ae) / C30365 +
                  C30387 * (3 * C30678 +
                            C30586 * ((-2 * C30586 * C30471) / C30395 +
                                      C30586 * ((-(std::pow(C30389, 8) * bs[8] *
                                                   C30400 * C30595) /
                                                 C30244) /
                                                    C30365 -
                                                C30471 / C30395))));
    const double C6206 =
        ((4 * C30688 + C30586 * C30702) * ae) / C30365 +
        C30387 * (4 * C30680 +
                  C30586 * (3 * C30678 +
                            C30586 * ((-2 * C30586 * C30471) / C30395 +
                                      C30586 * ((-(std::pow(C30389, 8) * bs[8] *
                                                   C30400 * C30595) /
                                                 C30244) /
                                                    C30365 -
                                                C30471 / C30395))));
    const double C6878 =
        2 * ((C30688 * ae) / C30365 + C30387 * C30680) +
        ((C30688 + C30700 * C30628) * ae) / C30365 +
        C30387 * (C30680 + (C30387 * C30700 * ae) / C30365 +
                  C30387 * ((C30700 * ae) / C30365 +
                            C30387 * ((-2 * C30586 * C30471) / C30395 +
                                      C30586 * ((-(std::pow(C30389, 8) * bs[8] *
                                                   C30400 * C30595) /
                                                 C30244) /
                                                    C30365 -
                                                C30471 / C30395))));
    const double C6510 =
        3 * (C30669 - (ae * C30721) / C30395 + C30387 * C30727) +
        (((-2 * C30721) / C30244 - (C30387 * C30726) / C30244) * ae) / C30365 +
        C30387 * (2 * C30727 - (ae * C30726) / C30395 +
                  C30387 * (C30678 - (ae * C30387 * C30696) / C30395 +
                            C30387 * (C30387 * ((-(std::pow(C30389, 8) * bs[8] *
                                                   C30400 * C30595) /
                                                 C30244) /
                                                    C30365 -
                                                C30471 / C30395) -
                                      (ae * C30696) / C30395)));
    const double C6888 = C6880 + C6881;
    const double C25952 = C25936 + C25937;
    const double C30792 = C30387 * C30790;
    const double C30847 = C30843 + C30846;
    const double C1155 =
        (C31653 + 2 * C31373) / C30250 - (C31660 * C31369) / C30244;
    const double C1156 =
        (C31641 + 2 * C31380 + C31660) / C30250 - (C31656 * C31369) / C30244;
    const double C1157 = (C31616 + C31377 / C30244 + C31656) / C30250 -
                         (C31646 * C31369) / C30244;
    const double C2010 =
        (C31654 + 2 * C31413) / C30250 - (C31661 * C31409) / C30244;
    const double C2011 =
        (C31643 + 2 * C31420 + C31661) / C30250 - (C31658 * C31409) / C30244;
    const double C2012 = (C31619 + C31417 / C30244 + C31658) / C30250 -
                         (C31649 * C31409) / C30244;
    const double C5916 = C5628 * C30289;
    const double C5914 = C4903 * C30289;
    const double C5908 = C4900 * C30289;
    const double C5904 = C4898 * C30289;
    const double C6092 = C5787 * C30289;
    const double C6090 = C5403 * C30289;
    const double C6086 = C5401 * C30289;
    const double C6666 = C5785 * C30289;
    const double C6662 = C5783 * C30289;
    const double C14768 = C1450 * C30289;
    const double C14766 = C367 * C30289;
    const double C14760 = C361 * C30289;
    const double C14970 = C1612 * C30289;
    const double C14968 = C968 * C30289;
    const double C15674 = C2198 * C30289;
    const double C30292 = C30289 / C30250;
    const double C30291 = C30242 * C30289;
    const double C4911 = C4910 - C4886;
    const double C7127 = C7116 - C7125;
    const double C7126 = C7124 - C7114;
    const double C7737 = C7282 - C7732;
    const double C30550 = C30549 - C30541;
    const double C10779 =
        (5 * (3 * C31107 + C30387 * C31129 + C31106 * ae) +
         C30387 * (4 * C31129 +
                   C30387 * (3 * C31124 +
                             C30387 * (2 * C31116 +
                                       C30387 * (C30439 +
                                                 C30387 * (C30387 * C30472 +
                                                           C30555 * ae) +
                                                 C30387 * C30555 * ae) +
                                       C31118 * ae) +
                             C31123 * ae) +
                   C31127 * ae) +
         (4 * C31106 + C30387 * C31127) * ae) /
        C30365;
    const double C30579 = C30578 - C30570;
    const double C4881 = C364 * C31609;
    const double C5129 = C364 * C661;
    const double C5523 = C364 * C31609;
    const double C6999 = C364 * C31639;
    const double C7409 = C364 * C2901;
    const double C13605 = C364 * C288;
    const double C13893 = C364 * C660;
    const double C14377 = C364 * C31637;
    const double C14763 = C364 * C31277;
    const double C16079 = C364 * C31652;
    const double C16217 = C364 * C31277;
    const double C16577 = C364 * C31280;
    const double C4887 = C368 * C288;
    const double C5135 = C368 * C660;
    const double C5527 = C368 * C31637;
    const double C5911 = C368 * C31277;
    const double C7005 = C368 * C31652;
    const double C7115 = C368 * C31277;
    const double C7413 = C368 * C31280;
    const double C13609 = C368 * C287;
    const double C14381 = C368 * C31650;
    const double C14470 = C368 * C31267;
    const double C14765 = C368 * C31569;
    const double C16219 = C368 * C2635;
    const double C16581 = C368 * C31272;
    const double C5389 = C969 * C288;
    const double C6087 = C969 * C31277;
    const double C7281 = C969 * C31277;
    const double C7577 = C969 * C31280;
    const double C8633 = C969 * C31637;
    const double C14223 = C969 * C287;
    const double C14622 = C969 * C31267;
    const double C14967 = C969 * C31569;
    const double C16421 = C969 * C2635;
    const double C16781 = C969 * C31272;
    const double C18167 = C969 * C31650;
    const double C167 = C31509 * C145;
    const double C348 = C31509 * C329;
    const double C19623 = C19047 * C329;
    const double C356 = C31509 * C333;
    const double C19275 = C19047 * C333;
    const double C537 = C31509 * C518;
    const double C19073 = C19048 * C518;
    const double C19765 = C19047 * C518;
    const double C545 = C31509 * C522;
    const double C19469 = C19047 * C522;
    const double C19453 = C19048 * C522;
    const double C963 = C31509 * C952;
    const double C19259 = C19048 * C952;
    const double C19979 = C19047 * C952;
    const double C21559 = C19048 * C2037;
    const double C15813 = C15810 + C15811;
    const double C21421 = C21416 + C21417;
    const double C4895 = C1451 * C288;
    const double C5533 = C1451 * C31637;
    const double C5915 = C1451 * C31277;
    const double C7119 = C1451 * C31277;
    const double C7419 = C1451 * C31280;
    const double C14473 = C1451 * C31267;
    const double C14769 = C1451 * C31569;
    const double C16223 = C1451 * C2635;
    const double C6665 = C2199 * C31277;
    const double C7289 = C2199 * C31277;
    const double C14625 = C2199 * C31267;
    const double C15675 = C2199 * C31569;
    const double C16425 = C2199 * C2635;
    const double C5397 = C1613 * C288;
    const double C6091 = C1613 * C31277;
    const double C7285 = C1613 * C31277;
    const double C7583 = C1613 * C31280;
    const double C8639 = C1613 * C31637;
    const double C14627 = C1613 * C31267;
    const double C14971 = C1613 * C31569;
    const double C16981 = C1613 * C2635;
    const double C5636 = C5630 * C31267;
    const double C27258 = C27250 + C27251;
    const double C30490 = C30469 + C30489;
    const double C30651 = C30646 - C30649;
    const double C2428 =
        2 * (C30387 * C30662 - (ae * C30599) / C30395) -
        (ae * (C30663 * C30628 + C30599)) / C30395 +
        C30387 * (C30662 - (ae * C30387 * C30663) / C30395 +
                  C30387 * (C30387 * C30586 *
                                ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                                 C30471 / C30395 +
                                 C30384 * ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395)) -
                            (ae * C30663) / C30395));
    const double C1449 = C31509 * C1179;
    const double C2197 = C31509 * C1322;
    const double C19981 = C19048 * C1322;
    const double C1611 = C31509 * C1325;
    const double C19277 = C19048 * C1325;
    const double C2315 = C31509 * C2033;
    const double C19471 = C19048 * C2033;
    const double C10932 =
        3 * (C30659 - (ae * C30795) / C30395 + C30387 * C30802) +
        (((-2 * C30795) / C30244 - (C30387 * C30803) / C30244) * ae) / C30365 +
        C30387 * (2 * C30802 - (ae * C30803) / C30395 +
                  C30387 * (C30796 - (ae * C30387 * C30798) / C30395 +
                            C30387 * (C30387 * C30586 *
                                          ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395) -
                                      (ae * C30798) / C30395)));
    const double C30820 = C30817 + C30818;
    const double C5929 = C5925 * C31277;
    const double C7123 = C5925 * C31277;
    const double C14474 = C5925 * C31267;
    const double C6675 = C6673 * C31277;
    const double C7293 = C6673 * C31277;
    const double C14628 = C6673 * C31267;
    const double C6103 = C6100 * C31277;
    const double C7736 = C6100 * C31277;
    const double C15104 = C6100 * C31267;
    const double C5779 = C31509 * C5758;
    const double C26411 = C19048 * C5758;
    const double C6210 = C31509 * C5759;
    const double C25759 = C19048 * C5759;
    const double C6892 = C6888 * C31267;
    const double C30793 = C30776 + C30792;
    const double C11136 =
        4 * (2 * C30719 - (ae * C30716) / C30395 + C30387 * C30847) +
        (((-3 * C30716) / C30244 + C30387 * C30845) * ae) / C30365 +
        C30387 *
            (3 * C30847 + (C30845 * ae) / C30365 +
             C30387 *
                 (2 * C30844 - (ae * C30836) / C30395 +
                  C30387 * ((-(ae * C30387 * C30827) / C30244) / C30365 -
                            C30825 / C30395 +
                            C30387 * ((-(C30387 * C30586 * std::pow(C30389, 8) *
                                         bs[8] * C30400) /
                                       C30244) /
                                          C30365 -
                                      (ae * C30827) / C30395))));
    const double C5923 = C5913 + C5914;
    const double C5922 = C5908 + C5909;
    const double C6098 = C6089 + C6090;
    const double C30295 = C30292 - C30287;
    const double C1090 = C30292 + (C30278 * ce) / C30244;
    const double C30294 = C30291 + C31569;
    const double C137 =
        4 * ((-2 * C30526) / C30244 - (C30384 * C30531) / C30244 -
             (C30863 * ce) / C30244) +
        C30384 * ((-3 * C30531) / C30244 + C30384 * C30550 -
                  (C30868 * ce) / C30244) -
        ((3 * C30863 + C30384 * C30868) * ce) / C30244;
    const double C315 = C30586 * ((-3 * C30531) / C30244 + C30384 * C30550 -
                                  (C30868 * ce) / C30244);
    const double C323 = (-2 * C30526) / C30244 - (C30384 * C30531) / C30244 -
                        (C30863 * ce) / C30244 + C30550 * C30595;
    const double C504 = C30387 * ((-3 * C30531) / C30244 + C30384 * C30550 -
                                  (C30868 * ce) / C30244);
    const double C512 = (-2 * C30526) / C30244 - (C30384 * C30531) / C30244 -
                        (C30863 * ce) / C30244 + C30550 * C30628;
    const double C947 = C30387 * C30586 * C30550;
    const double C30580 = C30384 * C30579;
    const double C30653 = C30586 * C30579;
    const double C1439 =
        2 * C30586 * C30550 + C30586 * (C30550 + C30579 * C30595);
    const double C1601 = C30387 * (C30550 + C30579 * C30595);
    const double C2305 =
        2 * C30387 * C30550 + C30387 * (C30550 + C30579 * C30628);
    const double C4912 = C4911 - C4887;
    const double C7128 = C7126 - C7115;
    const double C366 = C347 + C348;
    const double C19628 = C19622 + C19623;
    const double C370 = C355 + C356;
    const double C19292 = C19274 + C19275;
    const double C555 = C536 + C537;
    const double C19094 = C19072 + C19073;
    const double C19770 = C19764 + C19765;
    const double C559 = C544 + C545;
    const double C19486 = C19468 + C19469;
    const double C19478 = C19452 + C19453;
    const double C971 = C962 + C963;
    const double C19284 = C19258 + C19259;
    const double C19988 = C19978 + C19979;
    const double C21563 = C21558 + C21559;
    const double C15944 = C15813 * C31267;
    const double C7129 = C7127 + C7119;
    const double C7738 = C7737 + C7285;
    const double C146 =
        5 * (3 * C30453 - (C30450 * ce) / C30395 + C30384 * C30490) -
        ((4 * C30450 + C30384 * C30487) * ce) / C30395 +
        C30384 *
            (4 * C30490 - (C30487 * ce) / C30395 +
             C30384 *
                 (3 * C30488 - (C30483 * ce) / C30395 +
                  C30384 *
                      (2 * C30484 - (C30478 * ce) / C30395 +
                       C30384 * ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                                 C30471 / C30395 +
                                 C30384 * ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395)))));
    const double C330 =
        (yP - yQ) * (3 * C30453 - (C30450 * ce) / C30395 + C30384 * C30490);
    const double C334 = 2 * C30425 - (C30422 * ce) / C30395 + C30384 * C30453 +
                        C30490 * std::pow(yP - yQ, 2);
    const double C335 =
        3 * C30453 - (C30450 * ce) / C30395 + C30384 * C30490 +
        (3 * C30488 - (C30483 * ce) / C30395 +
         C30384 *
             (2 * C30484 - (C30478 * ce) / C30395 +
              C30384 *
                  ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                   C30471 / C30395 +
                   C30384 * ((-(C30384 * std::pow(C30389, 8) * bs[8] * C30400) /
                              C30244) /
                                 C30365 -
                             (C30472 * ce) / C30395)))) *
            std::pow(yP - yQ, 2);
    const double C519 =
        (((-3 * (C30384 * C30519 + C30509 + C30513 * ce)) / C30244 +
          C30384 * ((-2 * C30519) / C30244 -
                    (C30384 * (C30384 * (C30384 * C30429 * C30430 * C30504 +
                                         C30514 * ce) +
                               C30515 + C30384 * C30514 * ce)) /
                        C30244 -
                    (C30518 * ce) / C30244) -
          ((2 * C30513 + C30384 * C30518) * ce) / C30244) *
         ae) /
            C30365 +
        C30387 * (3 * C30453 - (C30450 * ce) / C30395 + C30384 * C30490);
    const double C523 = 2 * C30425 - (C30422 * ce) / C30395 + C30384 * C30453 +
                        (C30387 * C30550 * ae) / C30365 +
                        C30387 * ((C30550 * ae) / C30365 + C30387 * C30490);
    const double C672 =
        (yP - yQ) *
        (4 * C30490 - (C30487 * ce) / C30395 +
         C30384 *
             (3 * C30488 - (C30483 * ce) / C30395 +
              C30384 * (2 * C30484 - (C30478 * ce) / C30395 +
                        C30384 * ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                                  C30471 / C30395 +
                                  C30384 * ((-(C30384 * std::pow(C30389, 8) *
                                               bs[8] * C30400) /
                                             C30244) /
                                                C30365 -
                                            (C30472 * ce) / C30395)))));
    const double C953 =
        (C30586 * C30550 * ae) / C30365 + C30387 * C30586 * C30490;
    const double C1440 =
        2 * C30586 * C30490 +
        C30586 *
            (C30490 +
             (2 * C30484 - (C30478 * ce) / C30395 +
              C30384 *
                  ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                   C30471 / C30395 +
                   C30384 * ((-(C30384 * std::pow(C30389, 8) * bs[8] * C30400) /
                              C30244) /
                                 C30365 -
                             (C30472 * ce) / C30395))) *
                 C30595);
    const double C1602 =
        ((C30550 + C30579 * C30595) * ae) / C30365 +
        C30387 *
            (C30490 +
             (2 * C30484 - (C30478 * ce) / C30395 +
              C30384 *
                  ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                   C30471 / C30395 +
                   C30384 * ((-(C30384 * std::pow(C30389, 8) * bs[8] * C30400) /
                              C30244) /
                                 C30365 -
                             (C30472 * ce) / C30395))) *
                 C30595);
    const double C2306 =
        2 * ((C30550 * ae) / C30365 + C30387 * C30490) +
        ((C30550 + C30579 * C30628) * ae) / C30365 +
        C30387 *
            (C30490 + (C30387 * C30579 * ae) / C30365 +
             C30387 *
                 ((C30579 * ae) / C30365 +
                  C30387 *
                      (2 * C30484 - (C30478 * ce) / C30395 +
                       C30384 * ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                                 C30471 / C30395 +
                                 C30384 * ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395)))));
    const double C2038 =
        3 * (C30453 - (ae * C30645) / C30395 + C30387 * C30651) +
        (((-2 * C30645) / C30244 - (C30387 * C30650) / C30244) * ae) / C30365 +
        C30387 *
            (2 * C30651 - (ae * C30650) / C30395 +
             C30387 *
                 (C30488 - (ae * C30387 * C30574) / C30395 +
                  C30387 *
                      (C30387 * ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                                 C30471 / C30395 +
                                 C30384 * ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395)) -
                       (ae * C30574) / C30395)));
    const double C1453 = C1448 + C1449;
    const double C2201 = C2196 + C2197;
    const double C19989 = C19980 + C19981;
    const double C1615 = C1610 + C1611;
    const double C19293 = C19276 + C19277;
    const double C2319 = C2314 + C2315;
    const double C19487 = C19470 + C19471;
    const double C11034 =
        4 * (2 * C30643 - (ae * C30642) / C30395 + C30387 * C30820) +
        (((-3 * C30642) / C30244 + C30387 * C30821) * ae) / C30365 +
        C30387 *
            (3 * C30820 + (C30821 * ae) / C30365 +
             C30387 *
                 (2 * C30814 - (ae * C30812) / C30395 +
                  C30387 *
                      (C30484 - (ae * C30387 * C30566) / C30395 +
                       C30387 * (C30387 * ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395) -
                                 (ae * C30566) / C30395))));
    const double C5789 = C5778 + C5779;
    const double C26418 = C26410 + C26411;
    const double C6214 = C6209 + C6210;
    const double C25770 = C25758 + C25759;
    const double C10782 =
        5 * (3 * C30760 + (C30757 * ae) / C30365 + C30387 * C30793) +
        ((4 * C30757 + C30387 * C30791) * ae) / C30365 +
        C30387 *
            (4 * C30793 + (C30791 * ae) / C30365 +
             C30387 *
                 (3 * C30790 + (C30786 * ae) / C30365 +
                  C30387 *
                      (2 * C30785 - (ae * C30775) / C30395 +
                       C30387 * ((-(ae * C30387 * C30559) / C30244) / C30365 -
                                 C30471 / C30395 +
                                 C30387 * ((-(C30387 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (ae * C30559) / C30395)))));
    const double C5927 = C5912 - C5923;
    const double C5926 = C5922 - C5910;
    const double C6101 = C6088 - C6098;
    const double C7416 = C1450 * C30295;
    const double C7412 = C367 * C30295;
    const double C7406 = C361 * C30295;
    const double C7580 = C1612 * C30295;
    const double C7574 = C968 * C30295;
    const double C16580 = C369 * C30295;
    const double C16576 = C363 * C30295;
    const double C16780 = C970 * C30295;
    const double C117 =
        (C30295 / C30250 + ((C30242 * C30305 + C2901) * ce) / C30244) / C30250 -
        ((C30242 * (C30305 / C30250 + (0 * ce) / C30244) + C31620) * de) /
            C30244;
    const double C667 =
        C30295 / C30250 - ((C30242 * C30305 + C2901) * de) / C30244;
    const double C2535 =
        C30295 / C30250 + ((C30242 * C30305 + C2901) * ce) / C30244;
    const double C5530 = C1450 * C1090;
    const double C5526 = C367 * C1090;
    const double C5520 = C361 * C1090;
    const double C8636 = C1612 * C1090;
    const double C8630 = C968 * C1090;
    const double C14380 = C369 * C1090;
    const double C14376 = C363 * C1090;
    const double C18166 = C970 * C1090;
    const double C30296 = C30294 * de;
    const double C1089 = C30281 + (C30294 * ce) / C30244 + C30270;
    const double C166 = C113 * C137;
    const double C676 = C113 * C315;
    const double C359 = C113 * C323;
    const double C786 = C113 * C504;
    const double C19082 = C19050 * C504;
    const double C548 = C113 * C512;
    const double C19766 = C19050 * C512;
    const double C966 = C113 * C947;
    const double C19624 = C19050 * C947;
    const double C30581 = C30557 + C30580;
    const double C2188 =
        C30586 * C30490 + (C30387 * C30653 * ae) / C30365 +
        C30387 * ((C30653 * ae) / C30365 +
                  C30387 * C30586 *
                      (2 * C30484 - (C30478 * ce) / C30395 +
                       C30384 * ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                                 C30471 / C30395 +
                                 C30384 * ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395))));
    const double C2187 = C30586 * C30550 + C30653 * C30628;
    const double C4913 = C4912 + C4888;
    const double C7130 = C7128 * C31294;
    const double C5131 = C366 * C31620;
    const double C7001 = C366 * C31620;
    const double C13607 = C366 * C31609;
    const double C13895 = C366 * C661;
    const double C14379 = C366 * C31609;
    const double C16081 = C366 * C31639;
    const double C16579 = C366 * C2901;
    const double C4889 = C370 * C31609;
    const double C5137 = C370 * C661;
    const double C5529 = C370 * C31609;
    const double C7007 = C370 * C31639;
    const double C7415 = C370 * C2901;
    const double C13611 = C370 * C288;
    const double C14383 = C370 * C31637;
    const double C14767 = C370 * C31277;
    const double C16221 = C370 * C31277;
    const double C16583 = C370 * C31280;
    const double C5391 = C971 * C31609;
    const double C7579 = C971 * C2901;
    const double C8635 = C971 * C31609;
    const double C14225 = C971 * C288;
    const double C14969 = C971 * C31277;
    const double C16423 = C971 * C31277;
    const double C16783 = C971 * C31280;
    const double C18169 = C971 * C31637;
    const double C7131 = C7129 * C31294;
    const double C7739 = C7738 * C31294;
    const double C677 = C31509 * C330;
    const double C360 = C31509 * C334;
    const double C787 = C31509 * C519;
    const double C19083 = C19048 * C519;
    const double C549 = C31509 * C523;
    const double C19767 = C19048 * C523;
    const double C967 = C31509 * C953;
    const double C19625 = C19048 * C953;
    const double C4897 = C1453 * C31609;
    const double C5535 = C1453 * C31609;
    const double C7421 = C1453 * C2901;
    const double C14771 = C1453 * C31277;
    const double C16225 = C1453 * C31277;
    const double C15677 = C2201 * C31277;
    const double C16427 = C2201 * C31277;
    const double C5399 = C1615 * C31609;
    const double C7585 = C1615 * C2901;
    const double C8641 = C1615 * C31609;
    const double C14973 = C1615 * C31277;
    const double C16983 = C1615 * C31277;
    const double C5798 = C5789 * C31267;
    const double C6216 = C6214 * C31267;
    const double C5931 = C5927 + C5915;
    const double C5930 = C5926 - C5911;
    const double C6104 = C6101 + C6091;
    const double C5136 = C369 * C667;
    const double C5128 = C363 * C667;
    const double C13894 = C365 * C667;
    const double C7006 = C369 * C2535;
    const double C6998 = C363 * C2535;
    const double C16080 = C365 * C2535;
    const double C30297 = C30296 / C30244;
    const double C5532 = C4903 * C1089;
    const double C5524 = C4900 * C1089;
    const double C5518 = C4898 * C1089;
    const double C8638 = C5403 * C1089;
    const double C8632 = C5401 * C1089;
    const double C14382 = C367 * C1089;
    const double C14374 = C361 * C1089;
    const double C18168 = C968 * C1089;
    const double C177 = C166 + C167;
    const double C30582 = C30581 - C30575;
    const double C4914 = C4913 + C4889;
    const double C679 = C676 + C677;
    const double C372 = C359 + C360;
    const double C789 = C786 + C787;
    const double C19099 = C19082 + C19083;
    const double C561 = C548 + C549;
    const double C19771 = C19766 + C19767;
    const double C973 = C966 + C967;
    const double C19629 = C19624 + C19625;
    const double C5933 = C5931 * C31294;
    const double C5932 = C5930 * C31294;
    const double C6105 = C6104 * C31294;
    const double C30298 = C30281 - C30297;
    const double C5536 = C5524 + C5525;
    const double C524 =
        3 * C30453 - (C30450 * ce) / C30395 + C30384 * C30490 +
        (C30387 * C30582 * ae) / C30365 +
        C30387 *
            ((C30582 * ae) / C30365 +
             C30387 *
                 (3 * C30488 - (C30483 * ce) / C30395 +
                  C30384 *
                      (2 * C30484 - (C30478 * ce) / C30395 +
                       C30384 * ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                                 C30471 / C30395 +
                                 C30384 * ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395)))));
    const double C782 =
        ((4 * C30550 + C30384 * C30582 -
          ((3 * C30518 + C30384 * C30571) * ce) / C30244) *
         ae) /
            C30365 +
        C30387 *
            (4 * C30490 - (C30487 * ce) / C30395 +
             C30384 *
                 (3 * C30488 - (C30483 * ce) / C30395 +
                  C30384 *
                      (2 * C30484 - (C30478 * ce) / C30395 +
                       C30384 * ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                                 C30471 / C30395 +
                                 C30384 * ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395)))));
    const double C954 =
        (C30586 * C30582 * ae) / C30365 +
        C30387 * C30586 *
            (3 * C30488 - (C30483 * ce) / C30395 +
             C30384 * (2 * C30484 - (C30478 * ce) / C30395 +
                       C30384 * ((-(C30384 * C30472 * ce) / C30244) / C30365 -
                                 C30471 / C30395 +
                                 C30384 * ((-(C30384 * std::pow(C30389, 8) *
                                              bs[8] * C30400) /
                                            C30244) /
                                               C30365 -
                                           (C30472 * ce) / C30395))));
    const double C139 =
        5 * ((-3 * C30531) / C30244 + C30384 * C30550 -
             (C30868 * ce) / C30244) +
        C30384 * (4 * C30550 + C30384 * C30582 - (C30873 * ce) / C30244) -
        ((4 * C30868 + C30384 * C30873) * ce) / C30244;
    const double C325 = (-3 * C30531) / C30244 + C30384 * C30550 -
                        (C30868 * ce) / C30244 + C30582 * C30595;
    const double C514 = (-3 * C30531) / C30244 + C30384 * C30550 -
                        (C30868 * ce) / C30244 + C30582 * C30628;
    const double C671 =
        C30586 * (4 * C30550 + C30384 * C30582 - (C30873 * ce) / C30244);
    const double C781 =
        C30387 * (4 * C30550 + C30384 * C30582 - (C30873 * ce) / C30244);
    const double C949 = C30387 * C30586 * C30582;
    const double C4915 = C4914 * C31294;
    const double C13897 = C679 * C31620;
    const double C16083 = C679 * C31620;
    const double C5139 = C372 * C31620;
    const double C7009 = C372 * C31620;
    const double C13613 = C372 * C31609;
    const double C14385 = C372 * C31609;
    const double C16585 = C372 * C2901;
    const double C14227 = C973 * C31609;
    const double C16785 = C973 * C2901;
    const double C18171 = C973 * C31609;
    const double C30299 = C30298 + C30270;
    const double C5537 = C5536 - C5526;
    const double C7418 = C4903 * C30299;
    const double C7410 = C4900 * C30299;
    const double C7404 = C4898 * C30299;
    const double C7582 = C5403 * C30299;
    const double C7576 = C5401 * C30299;
    const double C16582 = C367 * C30299;
    const double C16574 = C361 * C30299;
    const double C16782 = C968 * C30299;
    const double C114 =
        (((((0 - (C30242 * C30243) / C30244) * ce) / C30244 -
           (0 * de) / C30256 + (2 * C30245) / C30244) /
              C30250 -
          ((C30242 * C30279 + 0) * de) / C30244 + C30262 - C30272) /
             C30250 +
         ((C30242 * C30293 + 0) * ce) / C30244) /
            C30250 -
        ((C30242 * (C30293 / C30250 +
                    ((C30242 * C30299 + C31272) * ce) / C30244 + C30295) +
          C31659) *
         de) /
            C30244 +
        C30299 / C30250 + ((C30242 * C30295 + C31280) * ce) / C30244 +
        2 * (C30270 / C30250 - (0 * de) / C30244);
    const double C115 =
        (C30293 / C30250 + ((C30242 * C30299 + C31272) * ce) / C30244 +
         C30295) /
            C30250 -
        ((C30242 * (C30299 / C30250 +
                    ((C30242 * C30295 + C31280) * ce) / C30244 + 2 * C30305) +
          C31652) *
         de) /
            C30244 +
        2 * (C30295 / C30250 + ((C30242 * C30305 + C2901) * ce) / C30244);
    const double C116 =
        (C30299 / C30250 + ((C30242 * C30295 + C31280) * ce) / C30244 +
         2 * C30305) /
            C30250 -
        ((C30242 *
              (C30295 / C30250 + ((C30242 * C30305 + C2901) * ce) / C30244) +
          C31639) *
         de) /
            C30244 +
        3 * (C30305 / C30250 + (0 * ce) / C30244);
    const double C665 =
        C30293 / C30250 - ((C30242 * C30299 + C31272) * de) / C30244 + C30295;
    const double C666 = C30299 / C30250 -
                        ((C30242 * C30295 + C31280) * de) / C30244 + 2 * C30305;
    const double C2533 =
        C30293 / C30250 + ((C30242 * C30299 + C31272) * ce) / C30244 + C30295;
    const double C2534 = C30299 / C30250 +
                         ((C30242 * C30295 + C31280) * ce) / C30244 +
                         2 * C30305;
    const double C5538 = C5537 - C5527;
    const double C7422 = C7410 + C7411;
    const double C5132 = C4900 * C665;
    const double C5124 = C4898 * C665;
    const double C13890 = C361 * C665;
    const double C5134 = C367 * C666;
    const double C5126 = C361 * C666;
    const double C13892 = C363 * C666;
    const double C7002 = C4900 * C2533;
    const double C6994 = C4898 * C2533;
    const double C16076 = C361 * C2533;
    const double C7004 = C367 * C2534;
    const double C6996 = C361 * C2534;
    const double C16078 = C363 * C2534;
    const double C5539 = C5538 + C5528;
    const double C7423 = C7422 - C7412;
    const double C5540 = C5539 + C5529;
    const double C7424 = C7423 - C7413;
    const double C5541 = C5540 * C31294;
    const double C7425 = C7424 + C7414;
    const double C7426 = C7425 + C7415;
    const double C7427 = C7426 * C31294;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30299 +
             (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
             C169 * C31280 + C170 * C30305 + C171 * C2901) *
                C13451 +
            (C168 * C30299 + C169 * C31272 - C170 * C30295 - C171 * C31280 +
             C172 * C30305 + C173 * C2901) *
                C13452) *
               C13453 +
           ((C7404 + C7405 - C7406 - C7407 + C7408 + C7409) * C13451 +
            (C16574 + C16575 - C16576 - C16577 + C16578 + C16579) * C13452) *
               C13454) *
              C31330 * C31373 +
          (((C7406 - (C7405 + C7404) + C7407 - C7408 - C7409) * C13451 +
            (C16576 - (C16575 + C16574) + C16577 - C16578 - C16579) * C13452) *
               C13453 +
           ((C7412 - (C7411 + C7410) + C7413 - C7414 - C7415) * C13451 +
            (C16580 - (C16581 + C16582) + C16583 - C16584 - C16585) * C13452) *
               C13454) *
              C31330 * C31380 +
          ((C7426 * C13451 +
            (C16582 + C16581 - C16580 - C16583 + C16584 + C16585) * C13452) *
               C13453 +
           ((C7418 + C7417 - C7416 - C7419 + C7420 + C7421) * C13451 +
            (C1450 * C30299 + C1451 * C31272 - C1452 * C30295 - C1453 * C31280 +
             (C113 * C1437 + C31509 * C1438) * C30305 +
             (C113 * C1439 + C31509 * C1440) * C2901) *
                C13452) *
               C13454) *
              C31330 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C2641 +
              (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
              C169 * C31277) *
                 C13451 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                 C13452) *
                C13453 +
            ((C7108 + C7109 - C7110 - C7111) * C13451 +
             (C16214 + C16215 - C16216 - C16217) * C13452) *
                C13454) *
               C31588 +
           (((C550 * C2642 -
              ((C113 * C496 + C31509 * C515) * C2635 +
               (C113 * C486 + C31509 * C497) * C2641) +
              C551 * C31277) *
                 C13451 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                 C13452) *
                C13453 +
            ((C7278 - (C7279 + C7280) + C7281) * C13451 +
             (C16420 - (C16421 + C16422) + C16423) * C13452) *
                C13454) *
               C31417) *
              C31373 +
          ((((C7110 - (C7109 + C7108) + C7111) * C13451 +
             (C16216 - (C16215 + C16214) + C16217) * C13452) *
                C13453 +
            ((C7114 - (C7113 + C7112) + C7115) * C13451 +
             (C16218 - (C16219 + C16220) + C16221) * C13452) *
                C13454) *
               C31588 +
           (((C7280 + C7279 - C7278 - C7281) * C13451 +
             (C16422 + C16421 - C16420 - C16423) * C13452) *
                C13453 +
            ((C7284 + C7283 - C7282 - C7285) * C13451 +
             (C16980 + C16981 - C16982 - C16983) * C13452) *
                C13454) *
               C31417) *
              C31380 +
          (((C7128 * C13451 + (C16220 + C16219 - C16218 - C16221) * C13452) *
                C13453 +
            ((C7118 + C7117 - C7116 - C7119) * C13451 +
             (C16222 + C16223 - C16224 - C16225) * C13452) *
                C13454) *
               C31588 +
           ((C7738 * C13451 + (C16982 - (C16981 + C16980) + C16983) * C13452) *
                C13453 +
            ((C7735 - (C7734 + C7733) + C7736) * C13451 +
             ((C113 * C1715 + C31509 * C1720) * C2642 -
              (C6100 * C2635 + C6099 * C2641) +
              (C113 * C1721 + C31509 * C1724) * C31277) *
                 C13452) *
                C13454) *
               C31417) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C13451 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                C13452) *
               C13453 +
           ((C7108 + C7109 - C7110 - C7111) * C13451 +
            (C16214 + C16215 - C16216 - C16217) * C13452) *
               C13454) *
              C31330 * C31660 +
          (((C7110 - (C7109 + C7108) + C7111) * C13451 +
            (C16216 - (C16215 + C16214) + C16217) * C13452) *
               C13453 +
           ((C7114 - (C7113 + C7112) + C7115) * C13451 +
            (C16218 - (C16219 + C16220) + C16221) * C13452) *
               C13454) *
              C31330 * C31656 +
          ((C7128 * C13451 + (C16220 + C16219 - C16218 - C16221) * C13452) *
               C13453 +
           ((C7118 + C7117 - C7116 - C7119) * C13451 +
            (C16222 + C16223 - C16224 - C16225) * C13452) *
               C13454) *
              C31330 * C31646 +
          ((C7129 * C13451 + (C16224 - (C16223 + C16222) + C16225) * C13452) *
               C13453 +
           ((C7122 - (C7121 + C7120) + C7123) * C13451 +
            ((C113 * C1166 + C31509 * C1177) * C2642 -
             (C5925 * C2635 + C5924 * C2641) +
             (C113 * C1178 + C31509 * C1184) * C31277) *
                C13452) *
               C13454) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2533 +
             (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
             C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
             C173 * C31620) *
                C13451 +
            (C168 * C2533 + C169 * C31659 - C170 * C2534 - C171 * C31652 +
             C172 * C2535 + C173 * C31639 - C174 * C2536 - C175 * C31620) *
                C13452) *
               C13453 +
           ((C6994 + C6995 - C6996 - C6997 + C6998 + C6999 - C7000 - C7001) *
                C13451 +
            (C16076 + C16077 - C16078 - C16079 + C16080 + C16081 - C16082 -
             C16083) *
                C13452) *
               C13454) *
              C31330 * C2531 +
          (((C6996 - (C6995 + C6994) + C6997 - C6998 - C6999 + C7000 + C7001) *
                C13451 +
            (C16078 - (C16077 + C16076) + C16079 - C16080 - C16081 + C16082 +
             C16083) *
                C13452) *
               C13453 +
           ((C7004 - (C7003 + C7002) + C7005 - C7006 - C7007 + C7008 + C7009) *
                C13451 +
            (C369 * C2534 - (C368 * C31659 + C367 * C2533) + C370 * C31652 -
             C371 * C2535 - C372 * C31639 +
             (C113 * C305 + C31509 * C324) * C2536 +
             (C113 * C325 + C31509 * C335) * C31620) *
                C13452) *
               C13454) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C2641 +
              (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
              C169 * C31277) *
                 C13451 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                 C13452) *
                C13453 +
            ((C7108 + C7109 - C7110 - C7111) * C13451 +
             (C16214 + C16215 - C16216 - C16217) * C13452) *
                C13454) *
               C31654 +
           (((C550 * C2642 -
              ((C113 * C496 + C31509 * C515) * C2635 +
               (C113 * C486 + C31509 * C497) * C2641) +
              C551 * C31277) *
                 C13451 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                 C13452) *
                C13453 +
            ((C7278 - (C7279 + C7280) + C7281) * C13451 +
             (C16420 - (C16421 + C16422) + C16423) * C13452) *
                C13454) *
               C31643 +
           ((((C113 * C490 + C31509 * C505) * C2641 +
              (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
              C557 * C31277) *
                 C13451 +
             (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31277) *
                 C13452) *
                C13453 +
            ((C7286 + C7287 - C7288 - C7289) * C13451 +
             (C16424 + C16425 - C16426 - C16427) * C13452) *
                C13454) *
               C31619) *
              C2531 +
          ((((C7110 - (C7109 + C7108) + C7111) * C13451 +
             (C16216 - (C16215 + C16214) + C16217) * C13452) *
                C13453 +
            ((C7114 - (C7113 + C7112) + C7115) * C13451 +
             (C16218 - (C16219 + C16220) + C16221) * C13452) *
                C13454) *
               C31654 +
           (((C7280 + C7279 - C7278 - C7281) * C13451 +
             (C16422 + C16421 - C16420 - C16423) * C13452) *
                C13453 +
            ((C7284 + C7283 - C7282 - C7285) * C13451 +
             (C1612 * C2641 + C1613 * C2635 - C1614 * C2642 - C1615 * C31277) *
                 C13452) *
                C13454) *
               C31643 +
           (((C7288 - (C7287 + C7286) + C7289) * C13451 +
             (C16426 - (C16425 + C16424) + C16427) * C13452) *
                C13453 +
            ((C7292 - (C7291 + C7290) + C7293) * C13451 +
             ((C113 * C1303 + C31509 * C1320) * C2642 -
              (C6673 * C2635 + C6672 * C2641) +
              (C113 * C1321 + C31509 * C1330) * C31277) *
                 C13452) *
                C13454) *
               C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C30299 +
              (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
              C169 * C31280 + C170 * C30305 + C171 * C2901) *
                 C13451 +
             (C168 * C30299 + C169 * C31272 - C170 * C30295 - C171 * C31280 +
              C172 * C30305 + C173 * C2901) *
                 C13452) *
                C13453 +
            ((C7404 + C7405 - C7406 - C7407 + C7408 + C7409) * C13451 +
             (C16574 + C16575 - C16576 - C16577 + C16578 + C16579) * C13452) *
                C13454) *
               C31588 +
           (((C550 * C30295 -
              ((C113 * C496 + C31509 * C515) * C31272 +
               (C113 * C486 + C31509 * C497) * C30299) +
              C551 * C31280 - C552 * C30305 - C553 * C2901) *
                 C13451 +
             (C552 * C30295 - (C551 * C31272 + C550 * C30299) + C553 * C31280 -
              C554 * C30305 - C555 * C2901) *
                 C13452) *
                C13453 +
            ((C7574 - (C7575 + C7576) + C7577 - C7578 - C7579) * C13451 +
             (C16780 - (C16781 + C16782) + C16783 - C16784 - C16785) * C13452) *
                C13454) *
               C31417) *
              C2531 +
          ((((C7406 - (C7405 + C7404) + C7407 - C7408 - C7409) * C13451 +
             (C16576 - (C16575 + C16574) + C16577 - C16578 - C16579) * C13452) *
                C13453 +
            ((C7412 - (C7411 + C7410) + C7413 - C7414 - C7415) * C13451 +
             (C16580 - (C16581 + C16582) + C16583 - C16584 - C16585) * C13452) *
                C13454) *
               C31588 +
           (((C7576 + C7575 - C7574 - C7577 + C7578 + C7579) * C13451 +
             (C16782 + C16781 - C16780 - C16783 + C16784 + C16785) * C13452) *
                C13453 +
            ((C7582 + C7581 - C7580 - C7583 + C7584 + C7585) * C13451 +
             (C1612 * C30299 + C1613 * C31272 - C1614 * C30295 -
              C1615 * C31280 + (C113 * C1599 + C31509 * C1600) * C30305 +
              (C113 * C1601 + C31509 * C1602) * C2901) *
                 C13452) *
                C13454) *
               C31417) *
              C31377)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2533 +
             (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
             C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
             C173 * C31620) *
                C13451 +
            (C168 * C2533 + C169 * C31659 - C170 * C2534 - C171 * C31652 +
             C172 * C2535 + C173 * C31639 - C174 * C2536 - C175 * C31620) *
                C13452) *
               C13453 +
           ((C6994 + C6995 - C6996 - C6997 + C6998 + C6999 - C7000 - C7001) *
                C13451 +
            (C16076 + C16077 - C16078 - C16079 + C16080 + C16081 - C16082 -
             C16083) *
                C13452) *
               C13454) *
              C31330 * C2531 +
          (((C6996 - (C6995 + C6994) + C6997 - C6998 - C6999 + C7000 + C7001) *
                C13451 +
            (C16078 - (C16077 + C16076) + C16079 - C16080 - C16081 + C16082 +
             C16083) *
                C13452) *
               C13453 +
           ((C7004 - (C7003 + C7002) + C7005 - C7006 - C7007 + C7008 + C7009) *
                C13451 +
            (C369 * C2534 - (C368 * C31659 + C367 * C2533) + C370 * C31652 -
             C371 * C2535 - C372 * C31639 +
             (C113 * C305 + C31509 * C324) * C2536 +
             (C113 * C325 + C31509 * C335) * C31620) *
                C13452) *
               C13454) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C13451 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                C13452) *
               C13453 +
           ((C7108 + C7109 - C7110 - C7111) * C13451 +
            (C16214 + C16215 - C16216 - C16217) * C13452) *
               C13454) *
              C31330 * C31660 +
          (((C7110 - (C7109 + C7108) + C7111) * C13451 +
            (C16216 - (C16215 + C16214) + C16217) * C13452) *
               C13453 +
           ((C7114 - (C7113 + C7112) + C7115) * C13451 +
            (C16218 - (C16219 + C16220) + C16221) * C13452) *
               C13454) *
              C31330 * C31656 +
          ((C7128 * C13451 + (C16220 + C16219 - C16218 - C16221) * C13452) *
               C13453 +
           ((C7118 + C7117 - C7116 - C7119) * C13451 +
            (C16222 + C16223 - C16224 - C16225) * C13452) *
               C13454) *
              C31330 * C31646 +
          ((C7129 * C13451 + (C16224 - (C16223 + C16222) + C16225) * C13452) *
               C13453 +
           ((C7122 - (C7121 + C7120) + C7123) * C13451 +
            ((C113 * C1166 + C31509 * C1177) * C2642 -
             (C5925 * C2635 + C5924 * C2641) +
             (C113 * C1178 + C31509 * C1184) * C31277) *
                C13452) *
               C13454) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C30289 +
              (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
              C169 * C31277) *
                 C13451 +
             (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                 C13452) *
                C13453 +
            ((C5904 + C5905 - C5906 - C5907) * C13451 +
             (C14760 + C14761 - C14762 - C14763) * C13452) *
                C13454) *
               C3298 +
           (((C550 * C30270 -
              ((C113 * C496 + C31509 * C515) * C31569 +
               (C113 * C486 + C31509 * C497) * C30289) +
              C551 * C31277) *
                 C13451 +
             (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                 C13452) *
                C13453 +
            ((C6084 - (C6085 + C6086) + C6087) * C13451 +
             (C14966 - (C14967 + C14968) + C14969) * C13452) *
                C13454) *
               C31417) *
              C31373 +
          ((((C5906 - (C5905 + C5904) + C5907) * C13451 +
             (C14762 - (C14761 + C14760) + C14763) * C13452) *
                C13453 +
            ((C5910 - (C5909 + C5908) + C5911) * C13451 +
             (C14764 - (C14765 + C14766) + C14767) * C13452) *
                C13454) *
               C3298 +
           (((C6086 + C6085 - C6084 - C6087) * C13451 +
             (C14968 + C14967 - C14966 - C14969) * C13452) *
                C13453 +
            ((C6090 + C6089 - C6088 - C6091) * C13451 +
             (C14970 + C14971 - C14972 - C14973) * C13452) *
                C13454) *
               C31417) *
              C31380 +
          (((C5930 * C13451 + (C14766 + C14765 - C14764 - C14767) * C13452) *
                C13453 +
            ((C5914 + C5913 - C5912 - C5915) * C13451 +
             (C14768 + C14769 - C14770 - C14771) * C13452) *
                C13454) *
               C3298 +
           ((C6104 * C13451 + (C14972 - (C14971 + C14970) + C14973) * C13452) *
                C13453 +
            ((C6102 - (C6093 + C6092) + C6103) * C13451 +
             ((C113 * C1715 + C31509 * C1720) * C30270 -
              (C6100 * C31569 + C6099 * C30289) +
              (C113 * C1721 + C31509 * C1724) * C31277) *
                 C13452) *
                C13454) *
               C31417) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1160 +
              (C113 * C127 + C31509 * C140) * C31267) *
                 C13451 +
             (C168 * C1160 + C169 * C31267) * C13452) *
                C13453 +
            ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
               C31413 -
           (((C14622 + C14623) * C13452 + (C5764 + C5765) * C13451) * C13454 +
            ((C551 * C31267 + C550 * C1160) * C13452 +
             ((C113 * C496 + C31509 * C515) * C31267 +
              (C113 * C486 + C31509 * C497) * C1160) *
                 C13451) *
                C13453) *
               C31420 +
           ((((C113 * C490 + C31509 * C505) * C1160 +
              (C113 * C506 + C31509 * C520) * C31267) *
                 C13451 +
             (C556 * C1160 + C557 * C31267) * C13452) *
                C13453 +
            ((C5792 + C5793) * C13451 + (C14624 + C14625) * C13452) * C13454) *
               C3806) *
              C31373 +
          ((((C5765 + C5764) * C13451 + (C14623 + C14622) * C13452) * C13453 +
            ((C5763 + C5762) * C13451 + (C14626 + C14627) * C13452) * C13454) *
               C31420 -
           (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
            ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
               C31413 -
           (((C14628 + C14629) * C13452 + (C5795 + C5794) * C13451) * C13454 +
            ((C14625 + C14624) * C13452 + (C5793 + C5792) * C13451) * C13453) *
               C3806) *
              C31380 +
          (((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
            ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
               C31413 -
           (((C15104 + C15105) * C13452 + (C5797 + C5796) * C13451) * C13454 +
            ((C14627 + C14626) * C13452 + C5782 * C13451) * C13453) *
               C31420 +
           ((C5800 * C13451 + (C14629 + C14628) * C13452) * C13453 +
            ((C5799 + C5798) * C13451 +
             ((C113 * C6657 + C31509 * C6658) * C1160 +
              (C113 * C6659 + C31509 * C6660) * C31267) *
                 C13452) *
                C13454) *
               C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1160 +
              (C113 * C127 + C31509 * C140) * C31267) *
                 C13451 +
             (C168 * C1160 + C169 * C31267) * C13452) *
                C13453 +
            ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
               C3298 -
           (((C14622 + C14623) * C13452 + (C5764 + C5765) * C13451) * C13454 +
            ((C551 * C31267 + C550 * C1160) * C13452 +
             ((C113 * C496 + C31509 * C515) * C31267 +
              (C113 * C486 + C31509 * C497) * C1160) *
                 C13451) *
                C13453) *
               C31417) *
              C31660 +
          ((((C5765 + C5764) * C13451 + (C14623 + C14622) * C13452) * C13453 +
            ((C5763 + C5762) * C13451 + (C14626 + C14627) * C13452) * C13454) *
               C31417 -
           (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
            ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
               C3298) *
              C31656 +
          (((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
            ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
               C3298 -
           (((C15104 + C15105) * C13452 + (C5797 + C5796) * C13451) * C13454 +
            ((C14627 + C14626) * C13452 + C5782 * C13451) * C13453) *
               C31417) *
              C31646 +
          (((C6208 * C13451 + (C15105 + C15104) * C13452) * C13453 +
            ((C6217 + C6216) * C13451 +
             ((C113 * C6079 + C31509 * C6080) * C1160 +
              (C113 * C6081 + C31509 * C6082) * C31267) *
                 C13452) *
                C13454) *
               C31417 -
           (((C14474 + C14475) * C13452 + (C5635 + C5634) * C13451) * C13454 +
            ((C14473 + C14472) * C13452 + C5627 * C13451) * C13453) *
               C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1089 +
              (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
              C169 * C31637 + C170 * C1091 + C171 * C31609) *
                 C13451 +
             (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
              C172 * C1091 + C173 * C31609) *
                 C13452) *
                C13453 +
            ((C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C13451 +
             (C14374 + C14375 - C14376 - C14377 + C14378 + C14379) * C13452) *
                C13454) *
               C3298 +
           (((C550 * C1090 -
              ((C113 * C496 + C31509 * C515) * C31650 +
               (C113 * C486 + C31509 * C497) * C1089) +
              C551 * C31637 - C552 * C1091 - C553 * C31609) *
                 C13451 +
             (C552 * C1090 - (C551 * C31650 + C550 * C1089) + C553 * C31637 -
              C554 * C1091 - C555 * C31609) *
                 C13452) *
                C13453 +
            ((C8630 - (C8631 + C8632) + C8633 - C8634 - C8635) * C13451 +
             (C18166 - (C18167 + C18168) + C18169 - C18170 - C18171) * C13452) *
                C13454) *
               C31417) *
              C2531 +
          ((((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C13451 +
             (C14376 - (C14375 + C14374) + C14377 - C14378 - C14379) * C13452) *
                C13453 +
            ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C13451 +
             (C14380 - (C14381 + C14382) + C14383 - C14384 - C14385) * C13452) *
                C13454) *
               C3298 +
           (((C8632 + C8631 - C8630 - C8633 + C8634 + C8635) * C13451 +
             (C18168 + C18167 - C18166 - C18169 + C18170 + C18171) * C13452) *
                C13453 +
            ((C8638 + C8637 - C8636 - C8639 + C8640 + C8641) * C13451 +
             (C1612 * C1089 + C1613 * C31650 - C1614 * C1090 - C1615 * C31637 +
              (C113 * C1599 + C31509 * C1600) * C1091 +
              (C113 * C1601 + C31509 * C1602) * C31609) *
                 C13452) *
                C13454) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1160 +
              (C113 * C127 + C31509 * C140) * C31267) *
                 C13451 +
             (C168 * C1160 + C169 * C31267) * C13452) *
                C13453 +
            ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
               C31661 -
           (((C14622 + C14623) * C13452 + (C5764 + C5765) * C13451) * C13454 +
            ((C551 * C31267 + C550 * C1160) * C13452 +
             ((C113 * C496 + C31509 * C515) * C31267 +
              (C113 * C486 + C31509 * C497) * C1160) *
                 C13451) *
                C13453) *
               C31658 +
           ((((C113 * C490 + C31509 * C505) * C1160 +
              (C113 * C506 + C31509 * C520) * C31267) *
                 C13451 +
             (C556 * C1160 + C557 * C31267) * C13452) *
                C13453 +
            ((C5792 + C5793) * C13451 + (C14624 + C14625) * C13452) * C13454) *
               C31649 -
           (((C15944 + C15945) * C13452 + (C6894 + C6895) * C13451) * C13454 +
            ((C2317 * C31267 + C2316 * C1160) * C13452 +
             ((C113 * C2025 + C31509 * C2035) * C31267 +
              (C113 * C2017 + C31509 * C2026) * C1160) *
                 C13451) *
                C13453) *
               C31632) *
              C2531 +
          ((((C5765 + C5764) * C13451 + (C14623 + C14622) * C13452) * C13453 +
            ((C5763 + C5762) * C13451 + (C14626 + C14627) * C13452) * C13454) *
               C31658 -
           (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
            ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
               C31661 -
           (((C14628 + C14629) * C13452 + (C5795 + C5794) * C13451) * C13454 +
            ((C14625 + C14624) * C13452 + (C5793 + C5792) * C13451) * C13453) *
               C31649 +
           (((C6895 + C6894) * C13451 + (C15945 + C15944) * C13452) * C13453 +
            ((C6893 + C6892) * C13451 +
             ((C113 * C6773 + C31509 * C6774) * C1160 +
              (C113 * C6775 + C31509 * C6776) * C31267) *
                 C13452) *
                C13454) *
               C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C30289 +
              (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
              C169 * C31277) *
                 C13451 +
             (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                 C13452) *
                C13453 +
            ((C5904 + C5905 - C5906 - C5907) * C13451 +
             (C14760 + C14761 - C14762 - C14763) * C13452) *
                C13454) *
               C31413 +
           (((C550 * C30270 -
              ((C113 * C496 + C31509 * C515) * C31569 +
               (C113 * C486 + C31509 * C497) * C30289) +
              C551 * C31277) *
                 C13451 +
             (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                 C13452) *
                C13453 +
            ((C6084 - (C6085 + C6086) + C6087) * C13451 +
             (C14966 - (C14967 + C14968) + C14969) * C13452) *
                C13454) *
               C31420 +
           ((((C113 * C490 + C31509 * C505) * C30289 +
              (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
              C557 * C31277) *
                 C13451 +
             (C556 * C30289 + C557 * C31569 - C558 * C30270 - C559 * C31277) *
                 C13452) *
                C13453 +
            ((C6662 + C6663 - C6664 - C6665) * C13451 +
             (C15674 + C15675 - C15676 - C15677) * C13452) *
                C13454) *
               C3806) *
              C2531 +
          ((((C5906 - (C5905 + C5904) + C5907) * C13451 +
             (C14762 - (C14761 + C14760) + C14763) * C13452) *
                C13453 +
            ((C5910 - (C5909 + C5908) + C5911) * C13451 +
             (C14764 - (C14765 + C14766) + C14767) * C13452) *
                C13454) *
               C31413 +
           (((C6086 + C6085 - C6084 - C6087) * C13451 +
             (C14968 + C14967 - C14966 - C14969) * C13452) *
                C13453 +
            ((C6090 + C6089 - C6088 - C6091) * C13451 +
             (C14970 + C14971 - C14972 - C14973) * C13452) *
                C13454) *
               C31420 +
           (((C6664 - (C6663 + C6662) + C6665) * C13451 +
             (C15676 - (C15675 + C15674) + C15677) * C13452) *
                C13453 +
            ((C6674 - (C6667 + C6666) + C6675) * C13451 +
             ((C113 * C1303 + C31509 * C1320) * C30270 -
              (C6673 * C31569 + C6672 * C30289) +
              (C113 * C1321 + C31509 * C1330) * C31277) *
                 C13452) *
                C13454) *
               C3806) *
              C31377)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1089 +
              (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
              C169 * C31637 + C170 * C1091 + C171 * C31609) *
                 C13451 +
             (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
              C172 * C1091 + C173 * C31609) *
                 C13452) *
                C13453 +
            ((C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C13451 +
             (C14374 + C14375 - C14376 - C14377 + C14378 + C14379) * C13452) *
                C13454) *
               C3298 +
           (((C550 * C1090 -
              ((C113 * C496 + C31509 * C515) * C31650 +
               (C113 * C486 + C31509 * C497) * C1089) +
              C551 * C31637 - C552 * C1091 - C553 * C31609) *
                 C13451 +
             (C552 * C1090 - (C551 * C31650 + C550 * C1089) + C553 * C31637 -
              C554 * C1091 - C555 * C31609) *
                 C13452) *
                C13453 +
            ((C8630 - (C8631 + C8632) + C8633 - C8634 - C8635) * C13451 +
             (C18166 - (C18167 + C18168) + C18169 - C18170 - C18171) * C13452) *
                C13454) *
               C31417) *
              C2531 +
          ((((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C13451 +
             (C14376 - (C14375 + C14374) + C14377 - C14378 - C14379) * C13452) *
                C13453 +
            ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C13451 +
             (C14380 - (C14381 + C14382) + C14383 - C14384 - C14385) * C13452) *
                C13454) *
               C3298 +
           (((C8632 + C8631 - C8630 - C8633 + C8634 + C8635) * C13451 +
             (C18168 + C18167 - C18166 - C18169 + C18170 + C18171) * C13452) *
                C13453 +
            ((C8638 + C8637 - C8636 - C8639 + C8640 + C8641) * C13451 +
             (C1612 * C1089 + C1613 * C31650 - C1614 * C1090 - C1615 * C31637 +
              (C113 * C1599 + C31509 * C1600) * C1091 +
              (C113 * C1601 + C31509 * C1602) * C31609) *
                 C13452) *
                C13454) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1160 +
              (C113 * C127 + C31509 * C140) * C31267) *
                 C13451 +
             (C168 * C1160 + C169 * C31267) * C13452) *
                C13453 +
            ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
               C3298 -
           (((C14622 + C14623) * C13452 + (C5764 + C5765) * C13451) * C13454 +
            ((C551 * C31267 + C550 * C1160) * C13452 +
             ((C113 * C496 + C31509 * C515) * C31267 +
              (C113 * C486 + C31509 * C497) * C1160) *
                 C13451) *
                C13453) *
               C31417) *
              C31660 +
          ((((C5765 + C5764) * C13451 + (C14623 + C14622) * C13452) * C13453 +
            ((C5763 + C5762) * C13451 + (C14626 + C14627) * C13452) * C13454) *
               C31417 -
           (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
            ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
               C3298) *
              C31656 +
          (((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
            ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
               C3298 -
           (((C15104 + C15105) * C13452 + (C5797 + C5796) * C13451) * C13454 +
            ((C14627 + C14626) * C13452 + C5782 * C13451) * C13453) *
               C31417) *
              C31646 +
          (((C6208 * C13451 + (C15105 + C15104) * C13452) * C13453 +
            ((C6217 + C6216) * C13451 +
             ((C113 * C6079 + C31509 * C6080) * C1160 +
              (C113 * C6081 + C31509 * C6082) * C31267) *
                 C13452) *
                C13454) *
               C31417 -
           (((C14474 + C14475) * C13452 + (C5635 + C5634) * C13451) * C13454 +
            ((C14473 + C14472) * C13452 + C5627 * C13451) * C13453) *
               C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C13451 +
            (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                C13452) *
               C13453 +
           ((C5904 + C5905 - C5906 - C5907) * C13451 +
            (C14760 + C14761 - C14762 - C14763) * C13452) *
               C13454) *
              C31330 * C1431 +
          (((C5906 - (C5905 + C5904) + C5907) * C13451 +
            (C14762 - (C14761 + C14760) + C14763) * C13452) *
               C13453 +
           ((C5910 - (C5909 + C5908) + C5911) * C13451 +
            (C14764 - (C14765 + C14766) + C14767) * C13452) *
               C13454) *
              C31330 * C1432 +
          ((C5930 * C13451 + (C14766 + C14765 - C14764 - C14767) * C13452) *
               C13453 +
           ((C5914 + C5913 - C5912 - C5915) * C13451 +
            (C14768 + C14769 - C14770 - C14771) * C13452) *
               C13454) *
              C31330 * C1433 +
          ((C5931 * C13451 + (C14770 - (C14769 + C14768) + C14771) * C13452) *
               C13453 +
           ((C5928 - (C5917 + C5916) + C5929) * C13451 +
            ((C113 * C1166 + C31509 * C1177) * C30270 -
             (C5925 * C31569 + C5924 * C30289) +
             (C113 * C1178 + C31509 * C1184) * C31277) *
                C13452) *
               C13454) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C665 +
             (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
                C13451 +
            (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31620) *
                C13452) *
               C13453 +
           ((C5124 + C5125 - C5126 - C5127 + C5128 + C5129 - C5130 - C5131) *
                C13451 +
            (C13890 + C13891 - C13892 - C13893 + C13894 + C13895 - C13896 -
             C13897) *
                C13452) *
               C13454) *
              C31330 * C31587 +
          (((C5126 - (C5125 + C5124) + C5127 - C5128 - C5129 + C5130 + C5131) *
                C13451 +
            (C13892 - (C13891 + C13890) + C13893 - C13894 - C13895 + C13896 +
             C13897) *
                C13452) *
               C13453 +
           ((C5134 - (C5133 + C5132) + C5135 - C5136 - C5137 + C5138 + C5139) *
                C13451 +
            (C369 * C666 - (C368 * C659 + C367 * C665) + C370 * C660 -
             C371 * C667 - C372 * C661 + (C113 * C305 + C31509 * C324) * C668 +
             (C113 * C325 + C31509 * C335) * C31620) *
                C13452) *
               C13454) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C30289 +
              (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
              C169 * C31277) *
                 C13451 +
             (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                 C13452) *
                C13453 +
            ((C5904 + C5905 - C5906 - C5907) * C13451 +
             (C14760 + C14761 - C14762 - C14763) * C13452) *
                C13454) *
               C1835 +
           (((C550 * C30270 -
              ((C113 * C496 + C31509 * C515) * C31569 +
               (C113 * C486 + C31509 * C497) * C30289) +
              C551 * C31277) *
                 C13451 +
             (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                 C13452) *
                C13453 +
            ((C6084 - (C6085 + C6086) + C6087) * C13451 +
             (C14966 - (C14967 + C14968) + C14969) * C13452) *
                C13454) *
               C1836 +
           ((((C113 * C490 + C31509 * C505) * C30289 +
              (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
              C557 * C31277) *
                 C13451 +
             (C556 * C30289 + C557 * C31569 - C558 * C30270 - C559 * C31277) *
                 C13452) *
                C13453 +
            ((C6662 + C6663 - C6664 - C6665) * C13451 +
             (C15674 + C15675 - C15676 - C15677) * C13452) *
                C13454) *
               C31619) *
              C31587 +
          ((((C5906 - (C5905 + C5904) + C5907) * C13451 +
             (C14762 - (C14761 + C14760) + C14763) * C13452) *
                C13453 +
            ((C5910 - (C5909 + C5908) + C5911) * C13451 +
             (C14764 - (C14765 + C14766) + C14767) * C13452) *
                C13454) *
               C1835 +
           (((C6086 + C6085 - C6084 - C6087) * C13451 +
             (C14968 + C14967 - C14966 - C14969) * C13452) *
                C13453 +
            ((C6090 + C6089 - C6088 - C6091) * C13451 +
             (C14970 + C14971 - C14972 - C14973) * C13452) *
                C13454) *
               C1836 +
           (((C6664 - (C6663 + C6662) + C6665) * C13451 +
             (C15676 - (C15675 + C15674) + C15677) * C13452) *
                C13453 +
            ((C6674 - (C6667 + C6666) + C6675) * C13451 +
             ((C113 * C1303 + C31509 * C1320) * C30270 -
              (C6673 * C31569 + C6672 * C30289) +
              (C113 * C1321 + C31509 * C1330) * C31277) *
                 C13452) *
                C13454) *
               C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1160 +
              (C113 * C127 + C31509 * C140) * C31267) *
                 C13451 +
             (C168 * C1160 + C169 * C31267) * C13452) *
                C13453 +
            ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
               C31588 -
           (((C14622 + C14623) * C13452 + (C5764 + C5765) * C13451) * C13454 +
            ((C551 * C31267 + C550 * C1160) * C13452 +
             ((C113 * C496 + C31509 * C515) * C31267 +
              (C113 * C486 + C31509 * C497) * C1160) *
                 C13451) *
                C13453) *
               C31417) *
              C1431 +
          ((((C5765 + C5764) * C13451 + (C14623 + C14622) * C13452) * C13453 +
            ((C5763 + C5762) * C13451 + (C14626 + C14627) * C13452) * C13454) *
               C31417 -
           (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
            ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
               C31588) *
              C1432 +
          (((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
            ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
               C31588 -
           (((C15104 + C15105) * C13452 + (C5797 + C5796) * C13451) * C13454 +
            ((C14627 + C14626) * C13452 + C5782 * C13451) * C13453) *
               C31417) *
              C1433 +
          (((C6208 * C13451 + (C15105 + C15104) * C13452) * C13453 +
            ((C6217 + C6216) * C13451 +
             ((C113 * C6079 + C31509 * C6080) * C1160 +
              (C113 * C6081 + C31509 * C6082) * C31267) *
                 C13452) *
                C13454) *
               C31417 -
           (((C14474 + C14475) * C13452 + (C5635 + C5634) * C13451) * C13454 +
            ((C14473 + C14472) * C13452 + C5627 * C13451) * C13453) *
               C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C293 +
              (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
              C170 * C295 + C171 * C31609) *
                 C13451 +
             (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
              C172 * C295 + C173 * C31609) *
                 C13452) *
                C13453 +
            ((C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C13451 +
             (C13602 + C13603 - C13604 - C13605 + C13606 + C13607) * C13452) *
                C13454) *
               C31588 +
           (((C550 * C294 -
              ((C113 * C496 + C31509 * C515) * C287 +
               (C113 * C486 + C31509 * C497) * C293) +
              C551 * C288 - C552 * C295 - C553 * C31609) *
                 C13451 +
             (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
              C554 * C295 - C555 * C31609) *
                 C13452) *
                C13453 +
            ((C5384 - (C5404 + C5405) + C5389 - C5390 - C5391) * C13451 +
             (C14222 - (C14223 + C14224) + C14225 - C14226 - C14227) * C13452) *
                C13454) *
               C31417) *
              C31587 +
          ((((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C13451 +
             (C13604 - (C13603 + C13602) + C13605 - C13606 - C13607) * C13452) *
                C13453 +
            ((C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C13451 +
             (C13608 - (C13609 + C13610) + C13611 - C13612 - C13613) * C13452) *
                C13454) *
               C31588 +
           (((C5405 + C5404 - C5384 - C5389 + C5390 + C5391) * C13451 +
             (C14224 + C14223 - C14222 - C14225 + C14226 + C14227) * C13452) *
                C13453 +
            ((C5407 + C5406 - C5392 - C5397 + C5398 + C5399) * C13451 +
             (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
              (C113 * C1599 + C31509 * C1600) * C295 +
              (C113 * C1601 + C31509 * C1602) * C31609) *
                 C13452) *
                C13454) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1160 +
              (C113 * C127 + C31509 * C140) * C31267) *
                 C13451 +
             (C168 * C1160 + C169 * C31267) * C13452) *
                C13453 +
            ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
               C2299 -
           (((C14622 + C14623) * C13452 + (C5764 + C5765) * C13451) * C13454 +
            ((C551 * C31267 + C550 * C1160) * C13452 +
             ((C113 * C496 + C31509 * C515) * C31267 +
              (C113 * C486 + C31509 * C497) * C1160) *
                 C13451) *
                C13453) *
               C2300 +
           ((((C113 * C490 + C31509 * C505) * C1160 +
              (C113 * C506 + C31509 * C520) * C31267) *
                 C13451 +
             (C556 * C1160 + C557 * C31267) * C13452) *
                C13453 +
            ((C5792 + C5793) * C13451 + (C14624 + C14625) * C13452) * C13454) *
               C2301 -
           (((C15944 + C15945) * C13452 + (C6894 + C6895) * C13451) * C13454 +
            ((C2317 * C31267 + C2316 * C1160) * C13452 +
             ((C113 * C2025 + C31509 * C2035) * C31267 +
              (C113 * C2017 + C31509 * C2026) * C1160) *
                 C13451) *
                C13453) *
               C31632) *
              C31587 +
          ((((C5765 + C5764) * C13451 + (C14623 + C14622) * C13452) * C13453 +
            ((C5763 + C5762) * C13451 + (C14626 + C14627) * C13452) * C13454) *
               C2300 -
           (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
            ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
               C2299 -
           (((C14628 + C14629) * C13452 + (C5795 + C5794) * C13451) * C13454 +
            ((C14625 + C14624) * C13452 + (C5793 + C5792) * C13451) * C13453) *
               C2301 +
           (((C6895 + C6894) * C13451 + (C15945 + C15944) * C13452) * C13453 +
            ((C6893 + C6892) * C13451 +
             ((C113 * C6773 + C31509 * C6774) * C1160 +
              (C113 * C6775 + C31509 * C6776) * C31267) *
                 C13452) *
                C13454) *
               C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C114 +
                (C113 * C127 + C31509 * C140) * C102 - C168 * C115 -
                C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C13451 +
               (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                C176 * C118 + C177 * C106) *
                   C13452) *
                  C13453 +
              ((C4898 * C114 + C4899 * C102 - C361 * C115 - C362 * C103 +
                C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 +
                C678 * C118 + C679 * C106) *
                   C13451 +
               (C361 * C114 + C362 * C102 - C363 * C115 - C364 * C103 +
                C365 * C116 + C366 * C104 - C678 * C117 - C679 * C105 +
                (C113 * C669 + C31509 * C670) * C118 +
                (C113 * C671 + C31509 * C672) * C106) *
                   C13452) *
                  C13454) *
             C31330 * C31318 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31509 * C126) * C293 +
                 (C113 * C127 + C31509 * C140) * C287 - C168 * C294 -
                 C169 * C288 + C170 * C295 + C171 * C31609) *
                    C13451 +
                (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                 C172 * C295 + C173 * C31609) *
                    C13452) *
                   C13453 +
               ((C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C13451 +
                (C13602 + C13603 - C13604 - C13605 + C13606 + C13607) *
                    C13452) *
                   C13454) *
                  C31330 * C31653 +
              (((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C13451 +
                (C13604 - (C13603 + C13602) + C13605 - C13606 - C13607) *
                    C13452) *
                   C13453 +
               ((C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C13451 +
                (C13608 - (C13609 + C13610) + C13611 - C13612 - C13613) *
                    C13452) *
                   C13454) *
                  C31330 * C31641 +
              ((C4914 * C13451 +
                (C13610 + C13609 - C13608 - C13611 + C13612 + C13613) *
                    C13452) *
                   C13453 +
               ((C4909 + C4908 - C4890 - C4895 + C4896 + C4897) * C13451 +
                (C1450 * C293 + C1451 * C287 - C1452 * C294 - C1453 * C288 +
                 (C113 * C1437 + C31509 * C1438) * C295 +
                 (C113 * C1439 + C31509 * C1440) * C31609) *
                    C13452) *
                   C13454) *
                  C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C293 +
             (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31609) *
                C13451 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31609) *
                C13452) *
               C13453 +
           ((C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C13451 +
            (C13602 + C13603 - C13604 - C13605 + C13606 + C13607) * C13452) *
               C13454) *
              C31654 +
          (((C550 * C294 -
             ((C113 * C496 + C31509 * C515) * C287 +
              (C113 * C486 + C31509 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C31609) *
                C13451 +
            (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
             C554 * C295 - C555 * C31609) *
                C13452) *
               C13453 +
           ((C5384 - (C5404 + C5405) + C5389 - C5390 - C5391) * C13451 +
            (C970 * C294 - (C969 * C287 + C968 * C293) + C971 * C288 -
             C972 * C295 - C973 * C31609) *
                C13452) *
               C13454) *
              C31643 +
          ((((C113 * C490 + C31509 * C505) * C293 +
             (C113 * C506 + C31509 * C520) * C287 - C556 * C294 - C557 * C288 +
             C558 * C295 + C559 * C31609) *
                C13451 +
            (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
             C560 * C295 + C561 * C31609) *
                C13452) *
               C13453 +
           ((C5783 * C293 + C5784 * C287 - C2198 * C294 - C2199 * C288 +
             C2200 * C295 + C2201 * C31609) *
                C13451 +
            (C2198 * C293 + C2199 * C287 - C2200 * C294 - C2201 * C288 +
             (C113 * C2185 + C31509 * C2186) * C295 +
             (C113 * C2187 + C31509 * C2188) * C31609) *
                C13452) *
               C13454) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C13451 +
            (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
             C172 * C1091 + C173 * C31609) *
                C13452) *
               C13453 +
           ((C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C13451 +
            (C14374 + C14375 - C14376 - C14377 + C14378 + C14379) * C13452) *
               C13454) *
              C31330 * C1086 +
          (((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C13451 +
            (C14376 - (C14375 + C14374) + C14377 - C14378 - C14379) * C13452) *
               C13453 +
           ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C13451 +
            (C14380 - (C14381 + C14382) + C14383 - C14384 - C14385) * C13452) *
               C13454) *
              C31330 * C1087 +
          ((C5540 * C13451 +
            (C14382 + C14381 - C14380 - C14383 + C14384 + C14385) * C13452) *
               C13453 +
           ((C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C13451 +
            (C1450 * C1089 + C1451 * C31650 - C1452 * C1090 - C1453 * C31637 +
             (C113 * C1437 + C31509 * C1438) * C1091 +
             (C113 * C1439 + C31509 * C1440) * C31609) *
                C13452) *
               C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C13451 +
            (C168 * C1160 + C169 * C31267) * C13452) *
               C13453 +
           ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
              C31330 * C1155 -
          (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
           ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
              C31330 * C1156 +
          ((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
           ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
              C31330 * C1157 -
          (((C14474 + C14475) * C13452 + (C5635 + C5634) * C13451) * C13454 +
           ((C14473 + C14472) * C13452 + C5627 * C13451) * C13453) *
              C31330 * C1158 +
          ((C5638 * C13451 + (C14475 + C14474) * C13452) * C13453 +
           ((C5637 + C5636) * C13451 +
            ((C113 * C5899 + C31509 * C5900) * C1160 +
             (C113 * C5901 + C31509 * C5902) * C31267) *
                C13452) *
               C13454) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1160 +
              (C113 * C127 + C31509 * C140) * C31267) *
                 C13451 +
             (C168 * C1160 + C169 * C31267) * C13452) *
                C13453 +
            ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
               C31654 -
           (((C14622 + C14623) * C13452 + (C5764 + C5765) * C13451) * C13454 +
            ((C551 * C31267 + C550 * C1160) * C13452 +
             ((C113 * C496 + C31509 * C515) * C31267 +
              (C113 * C486 + C31509 * C497) * C1160) *
                 C13451) *
                C13453) *
               C31643 +
           ((((C113 * C490 + C31509 * C505) * C1160 +
              (C113 * C506 + C31509 * C520) * C31267) *
                 C13451 +
             (C556 * C1160 + C557 * C31267) * C13452) *
                C13453 +
            ((C5792 + C5793) * C13451 + (C14624 + C14625) * C13452) * C13454) *
               C31619) *
              C1086 +
          ((((C5765 + C5764) * C13451 + (C14623 + C14622) * C13452) * C13453 +
            ((C5763 + C5762) * C13451 + (C14626 + C14627) * C13452) * C13454) *
               C31643 -
           (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
            ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
               C31654 -
           (((C14628 + C14629) * C13452 + (C5795 + C5794) * C13451) * C13454 +
            ((C14625 + C14624) * C13452 + (C5793 + C5792) * C13451) * C13453) *
               C31619) *
              C1087 +
          (((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
            ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
               C31654 -
           (((C6100 * C31267 + C6099 * C1160) * C13452 +
             (C5797 + C5796) * C13451) *
                C13454 +
            ((C14627 + C14626) * C13452 + C5782 * C13451) * C13453) *
               C31643 +
           ((C5800 * C13451 + (C14629 + C14628) * C13452) * C13453 +
            ((C5799 + C5798) * C13451 +
             ((C113 * C6657 + C31509 * C6658) * C1160 +
              (C113 * C6659 + C31509 * C6660) * C31267) *
                 C13452) *
                C13454) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C13451 +
            (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
             C172 * C1091 + C173 * C31609) *
                C13452) *
               C13453 +
           ((C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C13451 +
            (C14374 + C14375 - C14376 - C14377 + C14378 + C14379) * C13452) *
               C13454) *
              C1835 +
          (((C550 * C1090 -
             ((C113 * C496 + C31509 * C515) * C31650 +
              (C113 * C486 + C31509 * C497) * C1089) +
             C551 * C31637 - C552 * C1091 - C553 * C31609) *
                C13451 +
            (C552 * C1090 - (C551 * C31650 + C550 * C1089) + C553 * C31637 -
             C554 * C1091 - C555 * C31609) *
                C13452) *
               C13453 +
           ((C8630 - (C8631 + C8632) + C8633 - C8634 - C8635) * C13451 +
            (C970 * C1090 - (C969 * C31650 + C968 * C1089) + C971 * C31637 -
             C972 * C1091 - C973 * C31609) *
                C13452) *
               C13454) *
              C1836 +
          ((((C113 * C490 + C31509 * C505) * C1089 +
             (C113 * C506 + C31509 * C520) * C31650 - C556 * C1090 -
             C557 * C31637 + C558 * C1091 + C559 * C31609) *
                C13451 +
            (C556 * C1089 + C557 * C31650 - C558 * C1090 - C559 * C31637 +
             C560 * C1091 + C561 * C31609) *
                C13452) *
               C13453 +
           ((C5783 * C1089 + C5784 * C31650 - C2198 * C1090 - C2199 * C31637 +
             C2200 * C1091 + C2201 * C31609) *
                C13451 +
            (C2198 * C1089 + C2199 * C31650 - C2200 * C1090 - C2201 * C31637 +
             (C113 * C2185 + C31509 * C2186) * C1091 +
             (C113 * C2187 + C31509 * C2188) * C31609) *
                C13452) *
               C13454) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1160 +
              (C113 * C127 + C31509 * C140) * C31267) *
                 C13451 +
             (C168 * C1160 + C169 * C31267) * C13452) *
                C13453 +
            ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
               C1835 -
           (((C14622 + C14623) * C13452 + (C5764 + C5765) * C13451) * C13454 +
            ((C551 * C31267 + C550 * C1160) * C13452 +
             ((C113 * C496 + C31509 * C515) * C31267 +
              (C113 * C486 + C31509 * C497) * C1160) *
                 C13451) *
                C13453) *
               C1836 +
           ((((C113 * C490 + C31509 * C505) * C1160 +
              (C113 * C506 + C31509 * C520) * C31267) *
                 C13451 +
             (C556 * C1160 + C557 * C31267) * C13452) *
                C13453 +
            ((C5792 + C5793) * C13451 + (C14624 + C14625) * C13452) * C13454) *
               C31619) *
              C31653 +
          ((((C5765 + C5764) * C13451 + (C14623 + C14622) * C13452) * C13453 +
            ((C5763 + C5762) * C13451 + (C14626 + C14627) * C13452) * C13454) *
               C1836 -
           (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
            ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
               C1835 -
           (((C14628 + C14629) * C13452 + (C5795 + C5794) * C13451) * C13454 +
            ((C14625 + C14624) * C13452 + (C5793 + C5792) * C13451) * C13453) *
               C31619) *
              C31641 +
          (((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
            ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
               C1835 -
           (((C15104 + C15105) * C13452 + (C5797 + C5796) * C13451) * C13454 +
            ((C14627 + C14626) * C13452 + C5782 * C13451) * C13453) *
               C1836 +
           ((C5800 * C13451 + (C14629 + C14628) * C13452) * C13453 +
            ((C5799 + C5798) * C13451 +
             ((C113 * C6657 + C31509 * C6658) * C1160 +
              (C113 * C6659 + C31509 * C6660) * C31267) *
                 C13452) *
                C13454) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C13451 +
            (C168 * C1160 + C169 * C31267) * C13452) *
               C13453 +
           ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
              C2010 -
          (((C14622 + C14623) * C13452 + (C5764 + C5765) * C13451) * C13454 +
           ((C551 * C31267 + C550 * C1160) * C13452 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C13451) *
               C13453) *
              C2011 +
          ((((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C13451 +
            (C556 * C1160 + C557 * C31267) * C13452) *
               C13453 +
           ((C5792 + C5793) * C13451 + (C14624 + C14625) * C13452) * C13454) *
              C2012 -
          ((((C113 * C2423 + C31509 * C2427) * C31267 +
             (C113 * C2418 + C31509 * C2422) * C1160) *
                C13452 +
            (C6894 + C6895) * C13451) *
               C13454 +
           ((C2317 * C31267 + C2316 * C1160) * C13452 +
            ((C113 * C2025 + C31509 * C2035) * C31267 +
             (C113 * C2017 + C31509 * C2026) * C1160) *
                C13451) *
               C13453) *
              C2013 +
          ((((C113 * C2018 + C31509 * C2027) * C1160 +
             (C113 * C2028 + C31509 * C2036) * C31267) *
                C13451 +
            ((C113 * C2019 + C31509 * C2029) * C1160 +
             (C113 * C2030 + C31509 * C2037) * C31267) *
                C13452) *
               C13453 +
           (((C113 * C6500 + C31509 * C6504) * C1160 +
             (C113 * C6505 + C31509 * C6509) * C31267) *
                C13451 +
            ((C113 * C10929 + C31509 * C10930) * C1160 +
             (C113 * C10931 + C31509 * C10932) * C31267) *
                C13452) *
               C13454) *
              C2014) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C30289 +
              (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
              C169 * C31277) *
                 C13451 +
             (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                 C13452) *
                C13453 +
            ((C5904 + C5905 - C5906 - C5907) * C13451 +
             (C14760 + C14761 - C14762 - C14763) * C13452) *
                C13454) *
               C31588 +
           (((C550 * C30270 -
              ((C113 * C496 + C31509 * C515) * C31569 +
               (C113 * C486 + C31509 * C497) * C30289) +
              C551 * C31277) *
                 C13451 +
             (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                 C13452) *
                C13453 +
            ((C6084 - (C6085 + C6086) + C6087) * C13451 +
             (C14966 - (C14967 + C14968) + C14969) * C13452) *
                C13454) *
               C31417) *
              C1086 +
          ((((C5906 - (C5905 + C5904) + C5907) * C13451 +
             (C14762 - (C14761 + C14760) + C14763) * C13452) *
                C13453 +
            ((C5910 - (C5909 + C5908) + C5911) * C13451 +
             (C14764 - (C14765 + C14766) + C14767) * C13452) *
                C13454) *
               C31588 +
           (((C6086 + C6085 - C6084 - C6087) * C13451 +
             (C14968 + C14967 - C14966 - C14969) * C13452) *
                C13453 +
            ((C6090 + C6089 - C6088 - C6091) * C13451 +
             (C14970 + C14971 - C14972 - C14973) * C13452) *
                C13454) *
               C31417) *
              C1087 +
          (((C5930 * C13451 + (C14766 + C14765 - C14764 - C14767) * C13452) *
                C13453 +
            ((C5914 + C5913 - C5912 - C5915) * C13451 +
             (C14768 + C14769 - C14770 - C14771) * C13452) *
                C13454) *
               C31588 +
           ((C6104 * C13451 + (C14972 - (C14971 + C14970) + C14973) * C13452) *
                C13453 +
            ((C6102 - (C6093 + C6092) + C6103) * C13451 +
             ((C113 * C1715 + C31509 * C1720) * C30270 -
              (C6100 * C31569 + C6099 * C30289) +
              (C113 * C1721 + C31509 * C1724) * C31277) *
                 C13452) *
                C13454) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C665 +
             (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
                C13451 +
            (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31620) *
                C13452) *
               C13453 +
           ((C5124 + C5125 - C5126 - C5127 + C5128 + C5129 - C5130 - C5131) *
                C13451 +
            (C13890 + C13891 - C13892 - C13893 + C13894 + C13895 - C13896 -
             C13897) *
                C13452) *
               C13454) *
              C31588 +
          (((C550 * C666 -
             ((C113 * C496 + C31509 * C515) * C659 +
              (C113 * C486 + C31509 * C497) * C665) +
             C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
             C555 * C31620) *
                C13451 +
            (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
             C554 * C667 - C555 * C661 + C788 * C668 + C789 * C31620) *
                C13452) *
               C13453 +
           ((C968 * C666 - (C5400 * C659 + C5401 * C665) + C969 * C660 -
             C970 * C667 - C971 * C661 + C972 * C668 + C973 * C31620) *
                C13451 +
            (C970 * C666 - (C969 * C659 + C968 * C665) + C971 * C660 -
             C972 * C667 - C973 * C661 + (C113 * C939 + C31509 * C948) * C668 +
             (C113 * C949 + C31509 * C954) * C31620) *
                C13452) *
               C13454) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C13451 +
            (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                C13452) *
               C13453 +
           ((C5904 + C5905 - C5906 - C5907) * C13451 +
            (C14760 + C14761 - C14762 - C14763) * C13452) *
               C13454) *
              C2299 +
          (((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C13451 +
            (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                C13452) *
               C13453 +
           ((C6084 - (C6085 + C6086) + C6087) * C13451 +
            (C14966 - (C14967 + C14968) + C14969) * C13452) *
               C13454) *
              C2300 +
          ((((C113 * C490 + C31509 * C505) * C30289 +
             (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
             C557 * C31277) *
                C13451 +
            (C556 * C30289 + C557 * C31569 - C558 * C30270 - C559 * C31277) *
                C13452) *
               C13453 +
           ((C6662 + C6663 - C6664 - C6665) * C13451 +
            (C15674 + C15675 - C15676 - C15677) * C13452) *
               C13454) *
              C2301 +
          (((C2316 * C30270 -
             ((C113 * C2025 + C31509 * C2035) * C31569 +
              (C113 * C2017 + C31509 * C2026) * C30289) +
             C2317 * C31277) *
                C13451 +
            (C2318 * C30270 - (C2317 * C31569 + C2316 * C30289) +
             C2319 * C31277) *
                C13452) *
               C13453 +
           ((C15812 * C30270 - (C6890 * C31569 + C6891 * C30289) +
             C15813 * C31277) *
                C13451 +
            ((C113 * C2419 + C31509 * C2424) * C30270 -
             (C15813 * C31569 + C15812 * C30289) +
             (C113 * C2425 + C31509 * C2428) * C31277) *
                C13452) *
               C13454) *
              C31632) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C293 +
             (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31609) *
                C13451 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31609) *
                C13452) *
               C13453 +
           ((C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C13451 +
            (C13602 + C13603 - C13604 - C13605 + C13606 + C13607) * C13452) *
               C13454) *
              C31330 * C31653 +
          (((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C13451 +
            (C13604 - (C13603 + C13602) + C13605 - C13606 - C13607) * C13452) *
               C13453 +
           ((C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C13451 +
            (C13608 - (C13609 + C13610) + C13611 - C13612 - C13613) * C13452) *
               C13454) *
              C31330 * C31641 +
          ((C4914 * C13451 +
            (C13610 + C13609 - C13608 - C13611 + C13612 + C13613) * C13452) *
               C13453 +
           ((C4909 + C4908 - C4890 - C4895 + C4896 + C4897) * C13451 +
            (C1450 * C293 + C1451 * C287 - C1452 * C294 - C1453 * C288 +
             (C113 * C1437 + C31509 * C1438) * C295 +
             (C113 * C1439 + C31509 * C1440) * C31609) *
                C13452) *
               C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C114 +
            (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C13451 +
           (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C13452) *
              C13453 +
          ((C4898 * C114 + C4899 * C102 - C361 * C115 - C362 * C103 +
            C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 +
            C678 * C118 + C679 * C106) *
               C13451 +
           (C361 * C114 + C362 * C102 - C363 * C115 - C364 * C103 +
            C365 * C116 + C366 * C104 - C678 * C117 - C679 * C105 +
            (C113 * C669 + C31509 * C670) * C118 +
            (C113 * C671 + C31509 * C672) * C106) *
               C13452) *
              C13454) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C13451 +
            (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
             C172 * C1091 + C173 * C31609) *
                C13452) *
               C13453 +
           ((C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C13451 +
            (C14374 + C14375 - C14376 - C14377 + C14378 + C14379) * C13452) *
               C13454) *
              C31330 * C1086 +
          (((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C13451 +
            (C14376 - (C14375 + C14374) + C14377 - C14378 - C14379) * C13452) *
               C13453 +
           ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C13451 +
            (C14380 - (C14381 + C14382) + C14383 - C14384 - C14385) * C13452) *
               C13454) *
              C31330 * C1087 +
          ((C5540 * C13451 +
            (C14382 + C14381 - C14380 - C14383 + C14384 + C14385) * C13452) *
               C13453 +
           ((C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C13451 +
            (C1450 * C1089 + C1451 * C31650 - C1452 * C1090 - C1453 * C31637 +
             (C113 * C1437 + C31509 * C1438) * C1091 +
             (C113 * C1439 + C31509 * C1440) * C31609) *
                C13452) *
               C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C13451 +
            (C168 * C1160 + C169 * C31267) * C13452) *
               C13453 +
           ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
              C31330 * C1155 -
          (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
           ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
              C31330 * C1156 +
          ((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
           ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
              C31330 * C1157 -
          (((C14474 + C14475) * C13452 + (C5635 + C5634) * C13451) * C13454 +
           ((C14473 + C14472) * C13452 + C5627 * C13451) * C13453) *
              C31330 * C1158 +
          ((C5638 * C13451 + (C14475 + C14474) * C13452) * C13453 +
           ((C5637 + C5636) * C13451 +
            ((C113 * C5899 + C31509 * C5900) * C1160 +
             (C113 * C5901 + C31509 * C5902) * C31267) *
                C13452) *
               C13454) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C13451 +
            (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
             C172 * C1091 + C173 * C31609) *
                C13452) *
               C13453 +
           ((C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C13451 +
            (C14374 + C14375 - C14376 - C14377 + C14378 + C14379) * C13452) *
               C13454) *
              C1835 +
          (((C550 * C1090 -
             ((C113 * C496 + C31509 * C515) * C31650 +
              (C113 * C486 + C31509 * C497) * C1089) +
             C551 * C31637 - C552 * C1091 - C553 * C31609) *
                C13451 +
            (C552 * C1090 - (C551 * C31650 + C550 * C1089) + C553 * C31637 -
             C554 * C1091 - C555 * C31609) *
                C13452) *
               C13453 +
           ((C8630 - (C8631 + C8632) + C8633 - C8634 - C8635) * C13451 +
            (C970 * C1090 - (C969 * C31650 + C968 * C1089) + C971 * C31637 -
             C972 * C1091 - C973 * C31609) *
                C13452) *
               C13454) *
              C1836 +
          ((((C113 * C490 + C31509 * C505) * C1089 +
             (C113 * C506 + C31509 * C520) * C31650 - C556 * C1090 -
             C557 * C31637 + C558 * C1091 + C559 * C31609) *
                C13451 +
            (C556 * C1089 + C557 * C31650 - C558 * C1090 - C559 * C31637 +
             C560 * C1091 + C561 * C31609) *
                C13452) *
               C13453 +
           ((C5783 * C1089 + C5784 * C31650 - C2198 * C1090 - C2199 * C31637 +
             C2200 * C1091 + C2201 * C31609) *
                C13451 +
            (C2198 * C1089 + C2199 * C31650 - C2200 * C1090 - C2201 * C31637 +
             (C113 * C2185 + C31509 * C2186) * C1091 +
             (C113 * C2187 + C31509 * C2188) * C31609) *
                C13452) *
               C13454) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1160 +
              (C113 * C127 + C31509 * C140) * C31267) *
                 C13451 +
             (C168 * C1160 + C169 * C31267) * C13452) *
                C13453 +
            ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
               C1835 -
           (((C14622 + C14623) * C13452 + (C5764 + C5765) * C13451) * C13454 +
            ((C551 * C31267 + C550 * C1160) * C13452 +
             ((C113 * C496 + C31509 * C515) * C31267 +
              (C113 * C486 + C31509 * C497) * C1160) *
                 C13451) *
                C13453) *
               C1836 +
           ((((C113 * C490 + C31509 * C505) * C1160 +
              (C113 * C506 + C31509 * C520) * C31267) *
                 C13451 +
             (C556 * C1160 + C557 * C31267) * C13452) *
                C13453 +
            ((C5792 + C5793) * C13451 + (C14624 + C14625) * C13452) * C13454) *
               C31619) *
              C31653 +
          ((((C5765 + C5764) * C13451 + (C14623 + C14622) * C13452) * C13453 +
            ((C5763 + C5762) * C13451 + (C14626 + C14627) * C13452) * C13454) *
               C1836 -
           (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
            ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
               C1835 -
           (((C14628 + C14629) * C13452 + (C5795 + C5794) * C13451) * C13454 +
            ((C14625 + C14624) * C13452 + (C5793 + C5792) * C13451) * C13453) *
               C31619) *
              C31641 +
          (((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
            ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
               C1835 -
           (((C15104 + C15105) * C13452 + (C5797 + C5796) * C13451) * C13454 +
            ((C14627 + C14626) * C13452 + C5782 * C13451) * C13453) *
               C1836 +
           ((C5800 * C13451 + (C14629 + C14628) * C13452) * C13453 +
            ((C5799 + C5798) * C13451 +
             ((C113 * C6657 + C31509 * C6658) * C1160 +
              (C113 * C6659 + C31509 * C6660) * C31267) *
                 C13452) *
                C13454) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C30299 +
              (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
              C169 * C31280 + C170 * C30305 + C171 * C2901) *
                 C13451 +
             (C168 * C30299 + C169 * C31272 - C170 * C30295 - C171 * C31280 +
              C172 * C30305 + C173 * C2901) *
                 C13452) *
                C13453 +
            ((C7404 + C7405 - C7406 - C7407 + C7408 + C7409) * C13451 +
             (C16574 + C16575 - C16576 - C16577 + C16578 + C16579) * C13452) *
                C13454) *
               C3298 +
           (((C550 * C30295 -
              ((C113 * C496 + C31509 * C515) * C31272 +
               (C113 * C486 + C31509 * C497) * C30299) +
              C551 * C31280 - C552 * C30305 - C553 * C2901) *
                 C13451 +
             (C552 * C30295 - (C551 * C31272 + C550 * C30299) + C553 * C31280 -
              C554 * C30305 - C555 * C2901) *
                 C13452) *
                C13453 +
            ((C7574 - (C7575 + C7576) + C7577 - C7578 - C7579) * C13451 +
             (C16780 - (C16781 + C16782) + C16783 - C16784 - C16785) * C13452) *
                C13454) *
               C31417) *
              C31587 +
          ((((C7406 - (C7405 + C7404) + C7407 - C7408 - C7409) * C13451 +
             (C16576 - (C16575 + C16574) + C16577 - C16578 - C16579) * C13452) *
                C13453 +
            ((C7412 - (C7411 + C7410) + C7413 - C7414 - C7415) * C13451 +
             (C16580 - (C16581 + C16582) + C16583 - C16584 - C16585) * C13452) *
                C13454) *
               C3298 +
           (((C7576 + C7575 - C7574 - C7577 + C7578 + C7579) * C13451 +
             (C16782 + C16781 - C16780 - C16783 + C16784 + C16785) * C13452) *
                C13453 +
            ((C7582 + C7581 - C7580 - C7583 + C7584 + C7585) * C13451 +
             (C1612 * C30299 + C1613 * C31272 - C1614 * C30295 -
              C1615 * C31280 + (C113 * C1599 + C31509 * C1600) * C30305 +
              (C113 * C1601 + C31509 * C1602) * C2901) *
                 C13452) *
                C13454) *
               C31417) *
              C31377)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C2641 +
              (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
              C169 * C31277) *
                 C13451 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                 C13452) *
                C13453 +
            ((C7108 + C7109 - C7110 - C7111) * C13451 +
             (C16214 + C16215 - C16216 - C16217) * C13452) *
                C13454) *
               C31413 +
           (((C550 * C2642 -
              ((C113 * C496 + C31509 * C515) * C2635 +
               (C113 * C486 + C31509 * C497) * C2641) +
              C551 * C31277) *
                 C13451 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                 C13452) *
                C13453 +
            ((C7278 - (C7279 + C7280) + C7281) * C13451 +
             (C16420 - (C16421 + C16422) + C16423) * C13452) *
                C13454) *
               C31420 +
           ((((C113 * C490 + C31509 * C505) * C2641 +
              (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
              C557 * C31277) *
                 C13451 +
             (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31277) *
                 C13452) *
                C13453 +
            ((C7286 + C7287 - C7288 - C7289) * C13451 +
             (C16424 + C16425 - C16426 - C16427) * C13452) *
                C13454) *
               C3806) *
              C31587 +
          ((((C7110 - (C7109 + C7108) + C7111) * C13451 +
             (C16216 - (C16215 + C16214) + C16217) * C13452) *
                C13453 +
            ((C7114 - (C7113 + C7112) + C7115) * C13451 +
             (C16218 - (C16219 + C16220) + C16221) * C13452) *
                C13454) *
               C31413 +
           (((C7280 + C7279 - C7278 - C7281) * C13451 +
             (C16422 + C16421 - C16420 - C16423) * C13452) *
                C13453 +
            ((C7284 + C7283 - C7282 - C7285) * C13451 +
             (C16980 + C16981 - C16982 - C16983) * C13452) *
                C13454) *
               C31420 +
           (((C7288 - (C7287 + C7286) + C7289) * C13451 +
             (C16426 - (C16425 + C16424) + C16427) * C13452) *
                C13453 +
            ((C7292 - (C7291 + C7290) + C7293) * C13451 +
             ((C113 * C1303 + C31509 * C1320) * C2642 -
              (C6673 * C2635 + C6672 * C2641) +
              (C113 * C1321 + C31509 * C1330) * C31277) *
                 C13452) *
                C13454) *
               C3806) *
              C31377)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C2641 +
              (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
              C169 * C31277) *
                 C13451 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                 C13452) *
                C13453 +
            ((C7108 + C7109 - C7110 - C7111) * C13451 +
             (C16214 + C16215 - C16216 - C16217) * C13452) *
                C13454) *
               C3298 +
           (((C550 * C2642 -
              ((C113 * C496 + C31509 * C515) * C2635 +
               (C113 * C486 + C31509 * C497) * C2641) +
              C551 * C31277) *
                 C13451 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                 C13452) *
                C13453 +
            ((C7278 - (C7279 + C7280) + C7281) * C13451 +
             (C16420 - (C16421 + C16422) + C16423) * C13452) *
                C13454) *
               C31417) *
              C31653 +
          ((((C7110 - (C7109 + C7108) + C7111) * C13451 +
             (C16216 - (C16215 + C16214) + C16217) * C13452) *
                C13453 +
            ((C7114 - (C7113 + C7112) + C7115) * C13451 +
             (C16218 - (C16219 + C16220) + C16221) * C13452) *
                C13454) *
               C3298 +
           (((C7280 + C7279 - C7278 - C7281) * C13451 +
             (C16422 + C16421 - C16420 - C16423) * C13452) *
                C13453 +
            ((C7284 + C7283 - C7282 - C7285) * C13451 +
             (C16980 + C16981 - C16982 - C16983) * C13452) *
                C13454) *
               C31417) *
              C31641 +
          (((C7128 * C13451 + (C16220 + C16219 - C16218 - C16221) * C13452) *
                C13453 +
            ((C7118 + C7117 - C7116 - C7119) * C13451 +
             (C16222 + C16223 - C16224 - C16225) * C13452) *
                C13454) *
               C3298 +
           ((C7738 * C13451 + (C16982 - (C16981 + C16980) + C16983) * C13452) *
                C13453 +
            ((C7735 - (C7734 + C7733) + C7736) * C13451 +
             ((C113 * C1715 + C31509 * C1720) * C2642 -
              (C6100 * C2635 + C6099 * C2641) +
              (C113 * C1721 + C31509 * C1724) * C31277) *
                 C13452) *
                C13454) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2533 +
             (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
             C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
             C173 * C31620) *
                C13451 +
            (C168 * C2533 + C169 * C31659 - C170 * C2534 - C171 * C31652 +
             C172 * C2535 + C173 * C31639 - C174 * C2536 - C175 * C31620) *
                C13452) *
               C13453 +
           ((C6994 + C6995 - C6996 - C6997 + C6998 + C6999 - C7000 - C7001) *
                C13451 +
            (C16076 + C16077 - C16078 - C16079 + C16080 + C16081 - C16082 -
             C16083) *
                C13452) *
               C13454) *
              C3298 +
          (((C550 * C2534 -
             ((C113 * C496 + C31509 * C515) * C31659 +
              (C113 * C486 + C31509 * C497) * C2533) +
             C551 * C31652 - C552 * C2535 - C553 * C31639 + C554 * C2536 +
             C555 * C31620) *
                C13451 +
            (C552 * C2534 - (C551 * C31659 + C550 * C2533) + C553 * C31652 -
             C554 * C2535 - C555 * C31639 + C788 * C2536 + C789 * C31620) *
                C13452) *
               C13453 +
           ((C968 * C2534 - (C5400 * C31659 + C5401 * C2533) + C969 * C31652 -
             C970 * C2535 - C971 * C31639 + C972 * C2536 + C973 * C31620) *
                C13451 +
            (C970 * C2534 - (C969 * C31659 + C968 * C2533) + C971 * C31652 -
             C972 * C2535 - C973 * C31639 +
             (C113 * C939 + C31509 * C948) * C2536 +
             (C113 * C949 + C31509 * C954) * C31620) *
                C13452) *
               C13454) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C13451 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                C13452) *
               C13453 +
           ((C7108 + C7109 - C7110 - C7111) * C13451 +
            (C16214 + C16215 - C16216 - C16217) * C13452) *
               C13454) *
              C31661 +
          (((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C13451 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                C13452) *
               C13453 +
           ((C7278 - (C7279 + C7280) + C7281) * C13451 +
            (C16420 - (C16421 + C16422) + C16423) * C13452) *
               C13454) *
              C31658 +
          ((((C113 * C490 + C31509 * C505) * C2641 +
             (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
             C557 * C31277) *
                C13451 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31277) *
                C13452) *
               C13453 +
           ((C7286 + C7287 - C7288 - C7289) * C13451 +
            (C16424 + C16425 - C16426 - C16427) * C13452) *
               C13454) *
              C31649 +
          (((C2316 * C2642 -
             ((C113 * C2025 + C31509 * C2035) * C2635 +
              (C113 * C2017 + C31509 * C2026) * C2641) +
             C2317 * C31277) *
                C13451 +
            (C2318 * C2642 - (C2317 * C2635 + C2316 * C2641) + C2319 * C31277) *
                C13452) *
               C13453 +
           ((C15812 * C2642 - (C6890 * C2635 + C6891 * C2641) +
             C15813 * C31277) *
                C13451 +
            ((C113 * C2419 + C31509 * C2424) * C2642 -
             (C15813 * C2635 + C15812 * C2641) +
             (C113 * C2425 + C31509 * C2428) * C31277) *
                C13452) *
               C13454) *
              C31632) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30299 +
             (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
             C169 * C31280 + C170 * C30305 + C171 * C2901) *
                C13451 +
            (C168 * C30299 + C169 * C31272 - C170 * C30295 - C171 * C31280 +
             C172 * C30305 + C173 * C2901) *
                C13452) *
               C13453 +
           ((C7404 + C7405 - C7406 - C7407 + C7408 + C7409) * C13451 +
            (C16574 + C16575 - C16576 - C16577 + C16578 + C16579) * C13452) *
               C13454) *
              C31413 +
          (((C550 * C30295 -
             ((C113 * C496 + C31509 * C515) * C31272 +
              (C113 * C486 + C31509 * C497) * C30299) +
             C551 * C31280 - C552 * C30305 - C553 * C2901) *
                C13451 +
            (C552 * C30295 - (C551 * C31272 + C550 * C30299) + C553 * C31280 -
             C554 * C30305 - C555 * C2901) *
                C13452) *
               C13453 +
           ((C7574 - (C7575 + C7576) + C7577 - C7578 - C7579) * C13451 +
            (C16780 - (C16781 + C16782) + C16783 - C16784 - C16785) * C13452) *
               C13454) *
              C31420 +
          ((((C113 * C490 + C31509 * C505) * C30299 +
             (C113 * C506 + C31509 * C520) * C31272 - C556 * C30295 -
             C557 * C31280 + C558 * C30305 + C559 * C2901) *
                C13451 +
            (C556 * C30299 + C557 * C31272 - C558 * C30295 - C559 * C31280 +
             C560 * C30305 + C561 * C2901) *
                C13452) *
               C13453 +
           ((C5783 * C30299 + C5784 * C31272 - C2198 * C30295 - C2199 * C31280 +
             C2200 * C30305 + C2201 * C2901) *
                C13451 +
            (C2198 * C30299 + C2199 * C31272 - C2200 * C30295 - C2201 * C31280 +
             (C113 * C2185 + C31509 * C2186) * C30305 +
             (C113 * C2187 + C31509 * C2188) * C2901) *
                C13452) *
               C13454) *
              C3806) *
         C31318) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2533 +
             (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
             C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
             C173 * C31620) *
                C13451 +
            (C168 * C2533 + C169 * C31659 - C170 * C2534 - C171 * C31652 +
             C172 * C2535 + C173 * C31639 - C174 * C2536 - C175 * C31620) *
                C13452) *
               C13453 +
           ((C6994 + C6995 - C6996 - C6997 + C6998 + C6999 - C7000 - C7001) *
                C13451 +
            (C16076 + C16077 - C16078 - C16079 + C16080 + C16081 - C16082 -
             C16083) *
                C13452) *
               C13454) *
              C3298 +
          (((C550 * C2534 -
             ((C113 * C496 + C31509 * C515) * C31659 +
              (C113 * C486 + C31509 * C497) * C2533) +
             C551 * C31652 - C552 * C2535 - C553 * C31639 + C554 * C2536 +
             C555 * C31620) *
                C13451 +
            (C552 * C2534 - (C551 * C31659 + C550 * C2533) + C553 * C31652 -
             C554 * C2535 - C555 * C31639 + C788 * C2536 + C789 * C31620) *
                C13452) *
               C13453 +
           ((C968 * C2534 - (C5400 * C31659 + C5401 * C2533) + C969 * C31652 -
             C970 * C2535 - C971 * C31639 + C972 * C2536 + C973 * C31620) *
                C13451 +
            (C970 * C2534 - (C969 * C31659 + C968 * C2533) + C971 * C31652 -
             C972 * C2535 - C973 * C31639 +
             (C113 * C939 + C31509 * C948) * C2536 +
             (C113 * C949 + C31509 * C954) * C31620) *
                C13452) *
               C13454) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C2641 +
              (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
              C169 * C31277) *
                 C13451 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                 C13452) *
                C13453 +
            ((C7108 + C7109 - C7110 - C7111) * C13451 +
             (C16214 + C16215 - C16216 - C16217) * C13452) *
                C13454) *
               C3298 +
           (((C550 * C2642 -
              ((C113 * C496 + C31509 * C515) * C2635 +
               (C113 * C486 + C31509 * C497) * C2641) +
              C551 * C31277) *
                 C13451 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                 C13452) *
                C13453 +
            ((C7278 - (C7279 + C7280) + C7281) * C13451 +
             (C16420 - (C16421 + C16422) + C16423) * C13452) *
                C13454) *
               C31417) *
              C31653 +
          ((((C7110 - (C7109 + C7108) + C7111) * C13451 +
             (C16216 - (C16215 + C16214) + C16217) * C13452) *
                C13453 +
            ((C7114 - (C7113 + C7112) + C7115) * C13451 +
             (C16218 - (C16219 + C16220) + C16221) * C13452) *
                C13454) *
               C3298 +
           (((C7280 + C7279 - C7278 - C7281) * C13451 +
             (C16422 + C16421 - C16420 - C16423) * C13452) *
                C13453 +
            ((C7284 + C7283 - C7282 - C7285) * C13451 +
             (C16980 + C16981 - C16982 - C16983) * C13452) *
                C13454) *
               C31417) *
              C31641 +
          (((C7128 * C13451 + (C16220 + C16219 - C16218 - C16221) * C13452) *
                C13453 +
            ((C7118 + C7117 - C7116 - C7119) * C13451 +
             (C16222 + C16223 - C16224 - C16225) * C13452) *
                C13454) *
               C3298 +
           ((C7738 * C13451 + (C16982 - (C16981 + C16980) + C16983) * C13452) *
                C13453 +
            ((C7735 - (C7734 + C7733) + C7736) * C13451 +
             ((C113 * C1715 + C31509 * C1720) * C2642 -
              (C6100 * C2635 + C6099 * C2641) +
              (C113 * C1721 + C31509 * C1724) * C31277) *
                 C13452) *
                C13454) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C665 +
             (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
                C13451 +
            (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31620) *
                C13452) *
               C13453 +
           ((C5124 + C5125 - C5126 - C5127 + C5128 + C5129 - C5130 - C5131) *
                C13451 +
            (C13890 + C13891 - C13892 - C13893 + C13894 + C13895 - C13896 -
             C13897) *
                C13452) *
               C13454) *
              C31330 * C31587 +
          (((C5126 - (C5125 + C5124) + C5127 - C5128 - C5129 + C5130 + C5131) *
                C13451 +
            (C13892 - (C13891 + C13890) + C13893 - C13894 - C13895 + C13896 +
             C13897) *
                C13452) *
               C13453 +
           ((C5134 - (C5133 + C5132) + C5135 - C5136 - C5137 + C5138 + C5139) *
                C13451 +
            (C369 * C666 - (C368 * C659 + C367 * C665) + C370 * C660 -
             C371 * C667 - C372 * C661 + (C113 * C305 + C31509 * C324) * C668 +
             (C113 * C325 + C31509 * C335) * C31620) *
                C13452) *
               C13454) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C13451 +
            (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                C13452) *
               C13453 +
           ((C5904 + C5905 - C5906 - C5907) * C13451 +
            (C14760 + C14761 - C14762 - C14763) * C13452) *
               C13454) *
              C31330 * C1431 +
          (((C5906 - (C5905 + C5904) + C5907) * C13451 +
            (C14762 - (C14761 + C14760) + C14763) * C13452) *
               C13453 +
           ((C5910 - (C5909 + C5908) + C5911) * C13451 +
            (C14764 - (C14765 + C14766) + C14767) * C13452) *
               C13454) *
              C31330 * C1432 +
          ((C5930 * C13451 + (C14766 + C14765 - C14764 - C14767) * C13452) *
               C13453 +
           ((C5914 + C5913 - C5912 - C5915) * C13451 +
            (C14768 + C14769 - C14770 - C14771) * C13452) *
               C13454) *
              C31330 * C1433 +
          ((C5931 * C13451 + (C14770 - (C14769 + C14768) + C14771) * C13452) *
               C13453 +
           ((C5928 - (C5917 + C5916) + C5929) * C13451 +
            ((C113 * C1166 + C31509 * C1177) * C30270 -
             (C5925 * C31569 + C5924 * C30289) +
             (C113 * C1178 + C31509 * C1184) * C31277) *
                C13452) *
               C13454) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C293 +
              (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
              C170 * C295 + C171 * C31609) *
                 C13451 +
             (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
              C172 * C295 + C173 * C31609) *
                 C13452) *
                C13453 +
            ((C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C13451 +
             (C13602 + C13603 - C13604 - C13605 + C13606 + C13607) * C13452) *
                C13454) *
               C31588 +
           (((C550 * C294 -
              ((C113 * C496 + C31509 * C515) * C287 +
               (C113 * C486 + C31509 * C497) * C293) +
              C551 * C288 - C552 * C295 - C553 * C31609) *
                 C13451 +
             (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
              C554 * C295 - C555 * C31609) *
                 C13452) *
                C13453 +
            ((C5384 - (C5404 + C5405) + C5389 - C5390 - C5391) * C13451 +
             (C14222 - (C14223 + C14224) + C14225 - C14226 - C14227) * C13452) *
                C13454) *
               C31417) *
              C31587 +
          ((((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C13451 +
             (C13604 - (C13603 + C13602) + C13605 - C13606 - C13607) * C13452) *
                C13453 +
            ((C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C13451 +
             (C13608 - (C13609 + C13610) + C13611 - C13612 - C13613) * C13452) *
                C13454) *
               C31588 +
           (((C5405 + C5404 - C5384 - C5389 + C5390 + C5391) * C13451 +
             (C14224 + C14223 - C14222 - C14225 + C14226 + C14227) * C13452) *
                C13453 +
            ((C5407 + C5406 - C5392 - C5397 + C5398 + C5399) * C13451 +
             (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
              (C113 * C1599 + C31509 * C1600) * C295 +
              (C113 * C1601 + C31509 * C1602) * C31609) *
                 C13452) *
                C13454) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1160 +
              (C113 * C127 + C31509 * C140) * C31267) *
                 C13451 +
             (C168 * C1160 + C169 * C31267) * C13452) *
                C13453 +
            ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
               C31588 -
           (((C14622 + C14623) * C13452 + (C5764 + C5765) * C13451) * C13454 +
            ((C551 * C31267 + C550 * C1160) * C13452 +
             ((C113 * C496 + C31509 * C515) * C31267 +
              (C113 * C486 + C31509 * C497) * C1160) *
                 C13451) *
                C13453) *
               C31417) *
              C1431 +
          ((((C5765 + C5764) * C13451 + (C14623 + C14622) * C13452) * C13453 +
            ((C5763 + C5762) * C13451 + (C14626 + C14627) * C13452) * C13454) *
               C31417 -
           (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
            ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
               C31588) *
              C1432 +
          (((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
            ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
               C31588 -
           (((C15104 + C15105) * C13452 + (C5797 + C5796) * C13451) * C13454 +
            ((C14627 + C14626) * C13452 + C5782 * C13451) * C13453) *
               C31417) *
              C1433 +
          (((C6208 * C13451 + (C15105 + C15104) * C13452) * C13453 +
            ((C6217 + C6216) * C13451 +
             ((C113 * C6079 + C31509 * C6080) * C1160 +
              (C113 * C6081 + C31509 * C6082) * C31267) *
                 C13452) *
                C13454) *
               C31417 -
           (((C14474 + C14475) * C13452 + (C5635 + C5634) * C13451) * C13454 +
            ((C14473 + C14472) * C13452 + C5627 * C13451) * C13453) *
               C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C293 +
             (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31609) *
                C13451 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31609) *
                C13452) *
               C13453 +
           ((C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C13451 +
            (C13602 + C13603 - C13604 - C13605 + C13606 + C13607) * C13452) *
               C13454) *
              C31330 * C31653 +
          (((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C13451 +
            (C13604 - (C13603 + C13602) + C13605 - C13606 - C13607) * C13452) *
               C13453 +
           ((C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C13451 +
            (C13608 - (C13609 + C13610) + C13611 - C13612 - C13613) * C13452) *
               C13454) *
              C31330 * C31641 +
          ((C4914 * C13451 +
            (C13610 + C13609 - C13608 - C13611 + C13612 + C13613) * C13452) *
               C13453 +
           ((C4909 + C4908 - C4890 - C4895 + C4896 + C4897) * C13451 +
            (C1450 * C293 + C1451 * C287 - C1452 * C294 - C1453 * C288 +
             (C113 * C1437 + C31509 * C1438) * C295 +
             (C113 * C1439 + C31509 * C1440) * C31609) *
                C13452) *
               C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C114 +
            (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C13451 +
           (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C13452) *
              C13453 +
          ((C4898 * C114 + C4899 * C102 - C361 * C115 - C362 * C103 +
            C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 +
            C678 * C118 + C679 * C106) *
               C13451 +
           (C361 * C114 + C362 * C102 - C363 * C115 - C364 * C103 +
            C365 * C116 + C366 * C104 - C678 * C117 - C679 * C105 +
            (C113 * C669 + C31509 * C670) * C118 +
            (C113 * C671 + C31509 * C672) * C106) *
               C13452) *
              C13454) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C293 +
             (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31609) *
                C13451 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31609) *
                C13452) *
               C13453 +
           ((C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C13451 +
            (C13602 + C13603 - C13604 - C13605 + C13606 + C13607) * C13452) *
               C13454) *
              C31654 +
          (((C550 * C294 -
             ((C113 * C496 + C31509 * C515) * C287 +
              (C113 * C486 + C31509 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C31609) *
                C13451 +
            (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
             C554 * C295 - C555 * C31609) *
                C13452) *
               C13453 +
           ((C5384 - (C5404 + C5405) + C5389 - C5390 - C5391) * C13451 +
            (C970 * C294 - (C969 * C287 + C968 * C293) + C971 * C288 -
             C972 * C295 - C973 * C31609) *
                C13452) *
               C13454) *
              C31643 +
          ((((C113 * C490 + C31509 * C505) * C293 +
             (C113 * C506 + C31509 * C520) * C287 - C556 * C294 - C557 * C288 +
             C558 * C295 + C559 * C31609) *
                C13451 +
            (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
             C560 * C295 + C561 * C31609) *
                C13452) *
               C13453 +
           ((C5783 * C293 + C5784 * C287 - C2198 * C294 - C2199 * C288 +
             C2200 * C295 + C2201 * C31609) *
                C13451 +
            (C2198 * C293 + C2199 * C287 - C2200 * C294 - C2201 * C288 +
             (C113 * C2185 + C31509 * C2186) * C295 +
             (C113 * C2187 + C31509 * C2188) * C31609) *
                C13452) *
               C13454) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C13451 +
            (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
             C172 * C1091 + C173 * C31609) *
                C13452) *
               C13453 +
           ((C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C13451 +
            (C14374 + C14375 - C14376 - C14377 + C14378 + C14379) * C13452) *
               C13454) *
              C31330 * C1086 +
          (((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C13451 +
            (C14376 - (C14375 + C14374) + C14377 - C14378 - C14379) * C13452) *
               C13453 +
           ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C13451 +
            (C14380 - (C14381 + C14382) + C14383 - C14384 - C14385) * C13452) *
               C13454) *
              C31330 * C1087 +
          ((C5540 * C13451 +
            (C14382 + C14381 - C14380 - C14383 + C14384 + C14385) * C13452) *
               C13453 +
           ((C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C13451 +
            (C1450 * C1089 + C1451 * C31650 - C1452 * C1090 - C1453 * C31637 +
             (C113 * C1437 + C31509 * C1438) * C1091 +
             (C113 * C1439 + C31509 * C1440) * C31609) *
                C13452) *
               C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C13451 +
            (C168 * C1160 + C169 * C31267) * C13452) *
               C13453 +
           ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
              C31330 * C1155 -
          (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
           ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
              C31330 * C1156 +
          ((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
           ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
              C31330 * C1157 -
          (((C14474 + C14475) * C13452 + (C5635 + C5634) * C13451) * C13454 +
           ((C14473 + C14472) * C13452 + C5627 * C13451) * C13453) *
              C31330 * C1158 +
          ((C5638 * C13451 + (C14475 + C14474) * C13452) * C13453 +
           ((C5637 + C5636) * C13451 +
            ((C113 * C5899 + C31509 * C5900) * C1160 +
             (C113 * C5901 + C31509 * C5902) * C31267) *
                C13452) *
               C13454) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C1160 +
              (C113 * C127 + C31509 * C140) * C31267) *
                 C13451 +
             (C168 * C1160 + C169 * C31267) * C13452) *
                C13453 +
            ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
               C31654 -
           (((C14622 + C14623) * C13452 + (C5764 + C5765) * C13451) * C13454 +
            ((C551 * C31267 + C550 * C1160) * C13452 +
             ((C113 * C496 + C31509 * C515) * C31267 +
              (C113 * C486 + C31509 * C497) * C1160) *
                 C13451) *
                C13453) *
               C31643 +
           ((((C113 * C490 + C31509 * C505) * C1160 +
              (C113 * C506 + C31509 * C520) * C31267) *
                 C13451 +
             (C556 * C1160 + C557 * C31267) * C13452) *
                C13453 +
            ((C5792 + C5793) * C13451 + (C14624 + C14625) * C13452) * C13454) *
               C31619) *
              C1086 +
          ((((C5765 + C5764) * C13451 + (C14623 + C14622) * C13452) * C13453 +
            ((C5763 + C5762) * C13451 + (C14626 + C14627) * C13452) * C13454) *
               C31643 -
           (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
            ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
               C31654 -
           (((C14628 + C14629) * C13452 + (C5795 + C5794) * C13451) * C13454 +
            ((C14625 + C14624) * C13452 + (C5793 + C5792) * C13451) * C13453) *
               C31619) *
              C1087 +
          (((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
            ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
               C31654 -
           (((C6100 * C31267 + C6099 * C1160) * C13452 +
             (C5797 + C5796) * C13451) *
                C13454 +
            ((C14627 + C14626) * C13452 + C5782 * C13451) * C13453) *
               C31643 +
           ((C5800 * C13451 + (C14629 + C14628) * C13452) * C13453 +
            ((C5799 + C5798) * C13451 +
             ((C113 * C6657 + C31509 * C6658) * C1160 +
              (C113 * C6659 + C31509 * C6660) * C31267) *
                 C13452) *
                C13454) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C665 +
             (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
                C13451 +
            (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31620) *
                C13452) *
               C13453 +
           ((C5124 + C5125 - C5126 - C5127 + C5128 + C5129 - C5130 - C5131) *
                C13451 +
            (C13890 + C13891 - C13892 - C13893 + C13894 + C13895 - C13896 -
             C13897) *
                C13452) *
               C13454) *
              C31588 +
          (((C550 * C666 -
             ((C113 * C496 + C31509 * C515) * C659 +
              (C113 * C486 + C31509 * C497) * C665) +
             C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
             C555 * C31620) *
                C13451 +
            (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
             C554 * C667 - C555 * C661 + C788 * C668 + C789 * C31620) *
                C13452) *
               C13453 +
           ((C968 * C666 - (C5400 * C659 + C5401 * C665) + C969 * C660 -
             C970 * C667 - C971 * C661 + C972 * C668 + C973 * C31620) *
                C13451 +
            (C970 * C666 - (C969 * C659 + C968 * C665) + C971 * C660 -
             C972 * C667 - C973 * C661 + (C113 * C939 + C31509 * C948) * C668 +
             (C113 * C949 + C31509 * C954) * C31620) *
                C13452) *
               C13454) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C31509 * C126) * C30289 +
              (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
              C169 * C31277) *
                 C13451 +
             (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                 C13452) *
                C13453 +
            ((C5904 + C5905 - C5906 - C5907) * C13451 +
             (C14760 + C14761 - C14762 - C14763) * C13452) *
                C13454) *
               C31588 +
           (((C550 * C30270 -
              ((C113 * C496 + C31509 * C515) * C31569 +
               (C113 * C486 + C31509 * C497) * C30289) +
              C551 * C31277) *
                 C13451 +
             (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                 C13452) *
                C13453 +
            ((C6084 - (C6085 + C6086) + C6087) * C13451 +
             (C14966 - (C14967 + C14968) + C14969) * C13452) *
                C13454) *
               C31417) *
              C1086 +
          ((((C5906 - (C5905 + C5904) + C5907) * C13451 +
             (C14762 - (C14761 + C14760) + C14763) * C13452) *
                C13453 +
            ((C5910 - (C5909 + C5908) + C5911) * C13451 +
             (C14764 - (C14765 + C14766) + C14767) * C13452) *
                C13454) *
               C31588 +
           (((C6086 + C6085 - C6084 - C6087) * C13451 +
             (C14968 + C14967 - C14966 - C14969) * C13452) *
                C13453 +
            ((C6090 + C6089 - C6088 - C6091) * C13451 +
             (C14970 + C14971 - C14972 - C14973) * C13452) *
                C13454) *
               C31417) *
              C1087 +
          (((C5930 * C13451 + (C14766 + C14765 - C14764 - C14767) * C13452) *
                C13453 +
            ((C5914 + C5913 - C5912 - C5915) * C13451 +
             (C14768 + C14769 - C14770 - C14771) * C13452) *
                C13454) *
               C31588 +
           ((C6104 * C13451 + (C14972 - (C14971 + C14970) + C14973) * C13452) *
                C13453 +
            ((C6102 - (C6093 + C6092) + C6103) * C13451 +
             ((C113 * C1715 + C31509 * C1720) * C30270 -
              (C6100 * C31569 + C6099 * C30289) +
              (C113 * C1721 + C31509 * C1724) * C31277) *
                 C13452) *
                C13454) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C114 +
            (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C13451 +
           (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C13452) *
              C13453 +
          ((C4898 * C114 + C4899 * C102 - C361 * C115 - C362 * C103 +
            C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 +
            C678 * C118 + C679 * C106) *
               C13451 +
           (C361 * C114 + C362 * C102 - C363 * C115 - C364 * C103 +
            C365 * C116 + C366 * C104 - C678 * C117 - C679 * C105 +
            (C113 * C669 + C31509 * C670) * C118 +
            (C113 * C671 + C31509 * C672) * C106) *
               C13452) *
              C13454) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C293 +
             (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31609) *
                C13451 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31609) *
                C13452) *
               C13453 +
           ((C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C13451 +
            (C13602 + C13603 - C13604 - C13605 + C13606 + C13607) * C13452) *
               C13454) *
              C31330 * C31653 +
          (((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C13451 +
            (C13604 - (C13603 + C13602) + C13605 - C13606 - C13607) * C13452) *
               C13453 +
           ((C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C13451 +
            (C13608 - (C13609 + C13610) + C13611 - C13612 - C13613) * C13452) *
               C13454) *
              C31330 * C31641 +
          ((C4914 * C13451 +
            (C13610 + C13609 - C13608 - C13611 + C13612 + C13613) * C13452) *
               C13453 +
           ((C4909 + C4908 - C4890 - C4895 + C4896 + C4897) * C13451 +
            (C1450 * C293 + C1451 * C287 - C1452 * C294 - C1453 * C288 +
             (C113 * C1437 + C31509 * C1438) * C295 +
             (C113 * C1439 + C31509 * C1440) * C31609) *
                C13452) *
               C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C13451 +
            (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
             C172 * C1091 + C173 * C31609) *
                C13452) *
               C13453 +
           ((C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C13451 +
            (C14374 + C14375 - C14376 - C14377 + C14378 + C14379) * C13452) *
               C13454) *
              C31330 * C1086 +
          (((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C13451 +
            (C14376 - (C14375 + C14374) + C14377 - C14378 - C14379) * C13452) *
               C13453 +
           ((C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C13451 +
            (C14380 - (C14381 + C14382) + C14383 - C14384 - C14385) * C13452) *
               C13454) *
              C31330 * C1087 +
          ((C5540 * C13451 +
            (C14382 + C14381 - C14380 - C14383 + C14384 + C14385) * C13452) *
               C13453 +
           ((C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C13451 +
            (C1450 * C1089 + C1451 * C31650 - C1452 * C1090 - C1453 * C31637 +
             (C113 * C1437 + C31509 * C1438) * C1091 +
             (C113 * C1439 + C31509 * C1440) * C31609) *
                C13452) *
               C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C13451 +
            (C168 * C1160 + C169 * C31267) * C13452) *
               C13453 +
           ((C5612 + C5613) * C13451 + (C14468 + C14469) * C13452) * C13454) *
              C31330 * C1155 -
          (((C14470 + C14471) * C13452 + (C5615 + C5614) * C13451) * C13454 +
           ((C14469 + C14468) * C13452 + (C5613 + C5612) * C13451) * C13453) *
              C31330 * C1156 +
          ((C5626 * C13451 + (C14471 + C14470) * C13452) * C13453 +
           ((C5617 + C5616) * C13451 + (C14472 + C14473) * C13452) * C13454) *
              C31330 * C1157 -
          (((C14474 + C14475) * C13452 + (C5635 + C5634) * C13451) * C13454 +
           ((C14473 + C14472) * C13452 + C5627 * C13451) * C13453) *
              C31330 * C1158 +
          ((C5638 * C13451 + (C14475 + C14474) * C13452) * C13453 +
           ((C5637 + C5636) * C13451 +
            ((C113 * C5899 + C31509 * C5900) * C1160 +
             (C113 * C5901 + C31509 * C5902) * C31267) *
                C13452) *
               C13454) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C30299 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31272 -
            (C19084 + C19085) * C30295 - (C19086 + C19087) * C31280 +
            (C19088 + C19089) * C30305 + (C19090 + C19091) * C2901) *
               C31294 * C13453 +
           ((C24902 + C24903) * C30299 + (C24904 + C24905) * C31272 -
            (C19279 + C19278) * C30295 - (C19281 + C19280) * C31280 +
            (C19283 + C19282) * C30305 + (C19285 + C19284) * C2901) *
               C31294 * C13454) *
              C31330 * C31373 +
          (((C19278 + C19279) * C30295 -
            ((C24905 + C24904) * C31272 + (C24903 + C24902) * C30299) +
            (C19280 + C19281) * C31280 - (C19282 + C19283) * C30305 -
            (C19284 + C19285) * C2901) *
               C31294 * C13453 +
           ((C19287 + C19286) * C30295 -
            ((C24906 + C24907) * C31272 + (C24908 + C24909) * C30299) +
            (C19289 + C19288) * C31280 - (C19291 + C19290) * C30305 -
            (C19293 + C19292) * C2901) *
               C31294 * C13454) *
              C31330 * C31380 +
          (((C24909 + C24908) * C30299 + (C24907 + C24906) * C31272 -
            (C19286 + C19287) * C30295 - (C19288 + C19289) * C31280 +
            (C19290 + C19291) * C30305 + (C19292 + C19293) * C2901) *
               C31294 * C13453 +
           ((C25766 + C25767) * C30299 + (C25768 + C25769) * C31272 -
            (C20503 + C20502) * C30295 - (C20505 + C20504) * C31280 +
            (C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
             C19048 * C1720) *
                C30305 +
            (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
             C19048 * C1724) *
                C2901) *
               C31294 * C13454) *
              C31330 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C2641 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C2635 -
             (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
                C31294 * C13453 +
            ((C24902 + C24903) * C2641 + (C24904 + C24905) * C2635 -
             (C19279 + C19278) * C2642 - (C19281 + C19280) * C31277) *
                C31294 * C13454) *
               C31588 +
           (((C19472 + C19473) * C2642 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C2635 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C2641) +
             (C19474 + C19475) * C31277) *
                C31294 * C13453 +
            ((C19983 + C19982) * C2642 -
             ((C25518 + C25519) * C2635 + (C25520 + C25521) * C2641) +
             (C19985 + C19984) * C31277) *
                C31294 * C13454) *
               C31417) *
              C31373 +
          ((((C19278 + C19279) * C2642 -
             ((C24905 + C24904) * C2635 + (C24903 + C24902) * C2641) +
             (C19280 + C19281) * C31277) *
                C31294 * C13453 +
            ((C19287 + C19286) * C2642 -
             ((C24906 + C24907) * C2635 + (C24908 + C24909) * C2641) +
             (C19289 + C19288) * C31277) *
                C31294 * C13454) *
               C31588 +
           (((C25521 + C25520) * C2641 + (C25519 + C25518) * C2635 -
             (C19982 + C19983) * C2642 - (C19984 + C19985) * C31277) *
                C31294 * C13453 +
            ((C25948 + C25949) * C2641 + (C25950 + C25951) * C2635 -
             (C20709 + C20708) * C2642 - (C20711 + C20710) * C31277) *
                C31294 * C13454) *
               C31417) *
              C31380 +
          ((((C24909 + C24908) * C2641 + (C24907 + C24906) * C2635 -
             (C19286 + C19287) * C2642 - (C19288 + C19289) * C31277) *
                C31294 * C13453 +
            ((C25766 + C25767) * C2641 + (C25768 + C25769) * C2635 -
             (C20503 + C20502) * C2642 - (C20505 + C20504) * C31277) *
                C31294 * C13454) *
               C31588 +
           (((C20708 + C20709) * C2642 -
             ((C25951 + C25950) * C2635 + (C25949 + C25948) * C2641) +
             (C20710 + C20711) * C31277) *
                C31294 * C13453 +
            ((C19049 * C1714 + C19047 * C1718 + C19050 * C6657 +
              C19048 * C6658) *
                 C2642 -
             ((C26418 + C26419) * C2635 + (C26420 + C26421) * C2641) +
             (C19049 * C1719 + C19047 * C1723 + C19050 * C6659 +
              C19048 * C6660) *
                 C31277) *
                C31294 * C13454) *
               C31417) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2641 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C2635 -
            (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
               C31294 * C13453 +
           ((C24902 + C24903) * C2641 + (C24904 + C24905) * C2635 -
            (C19279 + C19278) * C2642 - (C19281 + C19280) * C31277) *
               C31294 * C13454) *
              C31330 * C31660 +
          (((C19278 + C19279) * C2642 -
            ((C24905 + C24904) * C2635 + (C24903 + C24902) * C2641) +
            (C19280 + C19281) * C31277) *
               C31294 * C13453 +
           ((C19287 + C19286) * C2642 -
            ((C24906 + C24907) * C2635 + (C24908 + C24909) * C2641) +
            (C19289 + C19288) * C31277) *
               C31294 * C13454) *
              C31330 * C31656 +
          (((C24909 + C24908) * C2641 + (C24907 + C24906) * C2635 -
            (C19286 + C19287) * C2642 - (C19288 + C19289) * C31277) *
               C31294 * C13453 +
           ((C25766 + C25767) * C2641 + (C25768 + C25769) * C2635 -
            (C20503 + C20502) * C2642 - (C20505 + C20504) * C31277) *
               C31294 * C13454) *
              C31330 * C31646 +
          (((C20502 + C20503) * C2642 -
            ((C25769 + C25768) * C2635 + (C25767 + C25766) * C2641) +
            (C20504 + C20505) * C31277) *
               C31294 * C13453 +
           ((C19049 * C1165 + C19047 * C1175 + C19050 * C6079 +
             C19048 * C6080) *
                C2642 -
            ((C25770 + C25771) * C2635 + (C25772 + C25773) * C2641) +
            (C19049 * C1176 + C19047 * C1183 + C19050 * C6081 +
             C19048 * C6082) *
                C31277) *
               C31294 * C13454) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2533 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31659 -
            (C19084 + C19085) * C2534 - (C19086 + C19087) * C31652 +
            (C19088 + C19089) * C2535 + (C19090 + C19091) * C31639 -
            (C19092 + C19093) * C2536 - (C19094 + C19095) * C31620) *
               C31294 * C13453 +
           ((C24902 + C24903) * C2533 + (C24904 + C24905) * C31659 -
            (C19279 + C19278) * C2534 - (C19281 + C19280) * C31652 +
            (C19283 + C19282) * C2535 + (C19285 + C19284) * C31639 -
            (C19627 + C19626) * C2536 - (C19629 + C19628) * C31620) *
               C31294 * C13454) *
              C31330 * C2531 +
          (((C19278 + C19279) * C2534 -
            ((C24905 + C24904) * C31659 + (C24903 + C24902) * C2533) +
            (C19280 + C19281) * C31652 - (C19282 + C19283) * C2535 -
            (C19284 + C19285) * C31639 + (C19626 + C19627) * C2536 +
            (C19628 + C19629) * C31620) *
               C31294 * C13453 +
           ((C19287 + C19286) * C2534 -
            ((C24906 + C24907) * C31659 + (C24908 + C24909) * C2533) +
            (C19289 + C19288) * C31652 - (C19291 + C19290) * C2535 -
            (C19293 + C19292) * C31639 +
            (C19049 * C304 + C19047 * C322 + C19050 * C1599 + C19048 * C1600) *
                C2536 +
            (C19049 * C323 + C19047 * C334 + C19050 * C1601 + C19048 * C1602) *
                C31620) *
               C31294 * C13454) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C2641 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C2635 -
             (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
                C31294 * C13453 +
            ((C24902 + C24903) * C2641 + (C24904 + C24905) * C2635 -
             (C19279 + C19278) * C2642 - (C19281 + C19280) * C31277) *
                C31294 * C13454) *
               C31654 +
           (((C19472 + C19473) * C2642 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C2635 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C2641) +
             (C19474 + C19475) * C31277) *
                C31294 * C13453 +
            ((C19983 + C19982) * C2642 -
             ((C25518 + C25519) * C2635 + (C25520 + C25521) * C2641) +
             (C19985 + C19984) * C31277) *
                C31294 * C13454) *
               C31643 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C2641 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C2635 -
             (C19480 + C19481) * C2642 - (C19482 + C19483) * C31277) *
                C31294 * C13453 +
            ((C25944 + C25945) * C2641 + (C25946 + C25947) * C2635 -
             (C21419 + C21418) * C2642 - (C21421 + C21420) * C31277) *
                C31294 * C13454) *
               C31619) *
              C2531 +
          ((((C19278 + C19279) * C2642 -
             ((C24905 + C24904) * C2635 + (C24903 + C24902) * C2641) +
             (C19280 + C19281) * C31277) *
                C31294 * C13453 +
            ((C19287 + C19286) * C2642 -
             ((C24906 + C24907) * C2635 + (C24908 + C24909) * C2641) +
             (C19289 + C19288) * C31277) *
                C31294 * C13454) *
               C31654 +
           (((C25521 + C25520) * C2641 + (C25519 + C25518) * C2635 -
             (C19982 + C19983) * C2642 - (C19984 + C19985) * C31277) *
                C31294 * C13453 +
            ((C25948 + C25949) * C2641 + (C25950 + C25951) * C2635 -
             (C20709 + C20708) * C2642 - (C20711 + C20710) * C31277) *
                C31294 * C13454) *
               C31643 +
           (((C21418 + C21419) * C2642 -
             ((C25947 + C25946) * C2635 + (C25945 + C25944) * C2641) +
             (C21420 + C21421) * C31277) *
                C31294 * C13453 +
            ((C19049 * C1302 + C19047 * C1318 + C19050 * C6773 +
              C19048 * C6774) *
                 C2642 -
             ((C25952 + C25953) * C2635 + (C25954 + C25955) * C2641) +
             (C19049 * C1319 + C19047 * C1329 + C19050 * C6775 +
              C19048 * C6776) *
                 C31277) *
                C31294 * C13454) *
               C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30299 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31272 -
             (C19084 + C19085) * C30295 - (C19086 + C19087) * C31280 +
             (C19088 + C19089) * C30305 + (C19090 + C19091) * C2901) *
                C31294 * C13453 +
            ((C24902 + C24903) * C30299 + (C24904 + C24905) * C31272 -
             (C19279 + C19278) * C30295 - (C19281 + C19280) * C31280 +
             (C19283 + C19282) * C30305 + (C19285 + C19284) * C2901) *
                C31294 * C13454) *
               C31588 +
           (((C19472 + C19473) * C30295 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31272 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30299) +
             (C19474 + C19475) * C31280 - (C19476 + C19477) * C30305 -
             (C19478 + C19479) * C2901) *
                C31294 * C13453 +
            ((C19983 + C19982) * C30295 -
             ((C25518 + C25519) * C31272 + (C25520 + C25521) * C30299) +
             (C19985 + C19984) * C31280 - (C19987 + C19986) * C30305 -
             (C19989 + C19988) * C2901) *
                C31294 * C13454) *
               C31417) *
              C2531 +
          ((((C19278 + C19279) * C30295 -
             ((C24905 + C24904) * C31272 + (C24903 + C24902) * C30299) +
             (C19280 + C19281) * C31280 - (C19282 + C19283) * C30305 -
             (C19284 + C19285) * C2901) *
                C31294 * C13453 +
            ((C19287 + C19286) * C30295 -
             ((C24906 + C24907) * C31272 + (C24908 + C24909) * C30299) +
             (C19289 + C19288) * C31280 - (C19291 + C19290) * C30305 -
             (C19293 + C19292) * C2901) *
                C31294 * C13454) *
               C31588 +
           (((C25521 + C25520) * C30299 + (C25519 + C25518) * C31272 -
             (C19982 + C19983) * C30295 - (C19984 + C19985) * C31280 +
             (C19986 + C19987) * C30305 + (C19988 + C19989) * C2901) *
                C31294 * C13453 +
            ((C25948 + C25949) * C30299 + (C25950 + C25951) * C31272 -
             (C20709 + C20708) * C30295 - (C20711 + C20710) * C31280 +
             (C19049 * C1298 + C19047 * C1311 + C19050 * C1303 +
              C19048 * C1320) *
                 C30305 +
             (C19049 * C1310 + C19047 * C1325 + C19050 * C1321 +
              C19048 * C1330) *
                 C2901) *
                C31294 * C13454) *
               C31417) *
              C31377)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2533 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31659 -
            (C19084 + C19085) * C2534 - (C19086 + C19087) * C31652 +
            (C19088 + C19089) * C2535 + (C19090 + C19091) * C31639 -
            (C19092 + C19093) * C2536 - (C19094 + C19095) * C31620) *
               C31294 * C13453 +
           ((C24902 + C24903) * C2533 + (C24904 + C24905) * C31659 -
            (C19279 + C19278) * C2534 - (C19281 + C19280) * C31652 +
            (C19283 + C19282) * C2535 + (C19285 + C19284) * C31639 -
            (C19627 + C19626) * C2536 - (C19629 + C19628) * C31620) *
               C31294 * C13454) *
              C31330 * C2531 +
          (((C19278 + C19279) * C2534 -
            ((C24905 + C24904) * C31659 + (C24903 + C24902) * C2533) +
            (C19280 + C19281) * C31652 - (C19282 + C19283) * C2535 -
            (C19284 + C19285) * C31639 + (C19626 + C19627) * C2536 +
            (C19628 + C19629) * C31620) *
               C31294 * C13453 +
           ((C19287 + C19286) * C2534 -
            ((C24906 + C24907) * C31659 + (C24908 + C24909) * C2533) +
            (C19289 + C19288) * C31652 - (C19291 + C19290) * C2535 -
            (C19293 + C19292) * C31639 +
            (C19049 * C304 + C19047 * C322 + C19050 * C1599 + C19048 * C1600) *
                C2536 +
            (C19049 * C323 + C19047 * C334 + C19050 * C1601 + C19048 * C1602) *
                C31620) *
               C31294 * C13454) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2641 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C2635 -
            (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
               C31294 * C13453 +
           ((C24902 + C24903) * C2641 + (C24904 + C24905) * C2635 -
            (C19279 + C19278) * C2642 - (C19281 + C19280) * C31277) *
               C31294 * C13454) *
              C31330 * C31660 +
          (((C19278 + C19279) * C2642 -
            ((C24905 + C24904) * C2635 + (C24903 + C24902) * C2641) +
            (C19280 + C19281) * C31277) *
               C31294 * C13453 +
           ((C19287 + C19286) * C2642 -
            ((C24906 + C24907) * C2635 + (C24908 + C24909) * C2641) +
            (C19289 + C19288) * C31277) *
               C31294 * C13454) *
              C31330 * C31656 +
          (((C24909 + C24908) * C2641 + (C24907 + C24906) * C2635 -
            (C19286 + C19287) * C2642 - (C19288 + C19289) * C31277) *
               C31294 * C13453 +
           ((C25766 + C25767) * C2641 + (C25768 + C25769) * C2635 -
            (C20503 + C20502) * C2642 - (C20505 + C20504) * C31277) *
               C31294 * C13454) *
              C31330 * C31646 +
          (((C20502 + C20503) * C2642 -
            ((C25769 + C25768) * C2635 + (C25767 + C25766) * C2641) +
            (C20504 + C20505) * C31277) *
               C31294 * C13453 +
           ((C19049 * C1165 + C19047 * C1175 + C19050 * C6079 +
             C19048 * C6080) *
                C2642 -
            ((C25770 + C25771) * C2635 + (C25772 + C25773) * C2641) +
            (C19049 * C1176 + C19047 * C1183 + C19050 * C6081 +
             C19048 * C6082) *
                C31277) *
               C31294 * C13454) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30289 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31569 -
             (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
                C31294 * C13453 +
            ((C24902 + C24903) * C30289 + (C24904 + C24905) * C31569 -
             (C19279 + C19278) * C30270 - (C19281 + C19280) * C31277) *
                C31294 * C13454) *
               C3298 +
           (((C19472 + C19473) * C30270 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31569 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30289) +
             (C19474 + C19475) * C31277) *
                C31294 * C13453 +
            ((C19983 + C19982) * C30270 -
             ((C25518 + C25519) * C31569 + (C25520 + C25521) * C30289) +
             (C19985 + C19984) * C31277) *
                C31294 * C13454) *
               C31417) *
              C31373 +
          ((((C19278 + C19279) * C30270 -
             ((C24905 + C24904) * C31569 + (C24903 + C24902) * C30289) +
             (C19280 + C19281) * C31277) *
                C31294 * C13453 +
            ((C19287 + C19286) * C30270 -
             ((C24906 + C24907) * C31569 + (C24908 + C24909) * C30289) +
             (C19289 + C19288) * C31277) *
                C31294 * C13454) *
               C3298 +
           (((C25521 + C25520) * C30289 + (C25519 + C25518) * C31569 -
             (C19982 + C19983) * C30270 - (C19984 + C19985) * C31277) *
                C31294 * C13453 +
            ((C25948 + C25949) * C30289 + (C25950 + C25951) * C31569 -
             (C20709 + C20708) * C30270 - (C20711 + C20710) * C31277) *
                C31294 * C13454) *
               C31417) *
              C31380 +
          ((((C24909 + C24908) * C30289 + (C24907 + C24906) * C31569 -
             (C19286 + C19287) * C30270 - (C19288 + C19289) * C31277) *
                C31294 * C13453 +
            ((C25766 + C25767) * C30289 + (C25768 + C25769) * C31569 -
             (C20503 + C20502) * C30270 - (C20505 + C20504) * C31277) *
                C31294 * C13454) *
               C3298 +
           (((C20708 + C20709) * C30270 -
             ((C25951 + C25950) * C31569 + (C25949 + C25948) * C30289) +
             (C20710 + C20711) * C31277) *
                C31294 * C13453 +
            ((C19049 * C1714 + C19047 * C1718 + C19050 * C6657 +
              C19048 * C6658) *
                 C30270 -
             ((C26418 + C26419) * C31569 + (C26420 + C26421) * C30289) +
             (C19049 * C1719 + C19047 * C1723 + C19050 * C6659 +
              C19048 * C6660) *
                 C31277) *
                C31294 * C13454) *
               C31417) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
                C13454) *
               C31413 -
           (((C25518 + C25519) * C31267 + (C25520 + C25521) * C1160) * C31294 *
                C13454 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C31294 * C13453) *
               C31420 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C31294 * C13453 +
            ((C25944 + C25945) * C1160 + (C25946 + C25947) * C31267) * C31294 *
                C13454) *
               C3806) *
              C31373 +
          ((((C25521 + C25520) * C1160 + (C25519 + C25518) * C31267) * C31294 *
                C13453 +
            ((C25948 + C25949) * C1160 + (C25950 + C25951) * C31267) * C31294 *
                C13454) *
               C31420 -
           (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
                C13454 +
            ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
                C13453) *
               C31413 -
           (((C25952 + C25953) * C31267 + (C25954 + C25955) * C1160) * C31294 *
                C13454 +
            ((C25947 + C25946) * C31267 + (C25945 + C25944) * C1160) * C31294 *
                C13453) *
               C3806) *
              C31380 +
          ((((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
                C13453 +
            ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
                C13454) *
               C31413 -
           (((C26418 + C26419) * C31267 + (C26420 + C26421) * C1160) * C31294 *
                C13454 +
            ((C25951 + C25950) * C31267 + (C25949 + C25948) * C1160) * C31294 *
                C13453) *
               C31420 +
           (((C25955 + C25954) * C1160 + (C25953 + C25952) * C31267) * C31294 *
                C13453 +
            ((C19049 * C5749 + C19047 * C5753 + C19050 * C6875 +
              C19048 * C6876) *
                 C1160 +
             (C19049 * C5752 + C19047 * C5758 + C19050 * C6877 +
              C19048 * C6878) *
                 C31267) *
                C31294 * C13454) *
               C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
                C13454) *
               C3298 -
           (((C25518 + C25519) * C31267 + (C25520 + C25521) * C1160) * C31294 *
                C13454 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C31294 * C13453) *
               C31417) *
              C31660 +
          ((((C25521 + C25520) * C1160 + (C25519 + C25518) * C31267) * C31294 *
                C13453 +
            ((C25948 + C25949) * C1160 + (C25950 + C25951) * C31267) * C31294 *
                C13454) *
               C31417 -
           (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
                C13454 +
            ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
                C13453) *
               C3298) *
              C31656 +
          ((((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
                C13453 +
            ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
                C13454) *
               C3298 -
           (((C26418 + C26419) * C31267 + (C26420 + C26421) * C1160) * C31294 *
                C13454 +
            ((C25951 + C25950) * C31267 + (C25949 + C25948) * C1160) * C31294 *
                C13453) *
               C31417) *
              C31646 +
          ((((C26421 + C26420) * C1160 + (C26419 + C26418) * C31267) * C31294 *
                C13453 +
            ((C19049 * C5750 + C19047 * C5755 + C19050 * C5751 +
              C19048 * C5756) *
                 C1160 +
             (C19049 * C5754 + C19047 * C5759 + C19050 * C5757 +
              C19048 * C5760) *
                 C31267) *
                C31294 * C13454) *
               C31417 -
           (((C25770 + C25771) * C31267 + (C25772 + C25773) * C1160) * C31294 *
                C13454 +
            ((C25769 + C25768) * C31267 + (C25767 + C25766) * C1160) * C31294 *
                C13453) *
               C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1089 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31650 -
             (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
             (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1089 + (C24904 + C24905) * C31650 -
             (C19279 + C19278) * C1090 - (C19281 + C19280) * C31637 +
             (C19283 + C19282) * C1091 + (C19285 + C19284) * C31609) *
                C31294 * C13454) *
               C3298 +
           (((C19472 + C19473) * C1090 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31650 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C1089) +
             (C19474 + C19475) * C31637 - (C19476 + C19477) * C1091 -
             (C19478 + C19479) * C31609) *
                C31294 * C13453 +
            ((C19983 + C19982) * C1090 -
             ((C25518 + C25519) * C31650 + (C25520 + C25521) * C1089) +
             (C19985 + C19984) * C31637 - (C19987 + C19986) * C1091 -
             (C19989 + C19988) * C31609) *
                C31294 * C13454) *
               C31417) *
              C2531 +
          ((((C19278 + C19279) * C1090 -
             ((C24905 + C24904) * C31650 + (C24903 + C24902) * C1089) +
             (C19280 + C19281) * C31637 - (C19282 + C19283) * C1091 -
             (C19284 + C19285) * C31609) *
                C31294 * C13453 +
            ((C19287 + C19286) * C1090 -
             ((C24906 + C24907) * C31650 + (C24908 + C24909) * C1089) +
             (C19289 + C19288) * C31637 - (C19291 + C19290) * C1091 -
             (C19293 + C19292) * C31609) *
                C31294 * C13454) *
               C3298 +
           (((C25521 + C25520) * C1089 + (C25519 + C25518) * C31650 -
             (C19982 + C19983) * C1090 - (C19984 + C19985) * C31637 +
             (C19986 + C19987) * C1091 + (C19988 + C19989) * C31609) *
                C31294 * C13453 +
            ((C25948 + C25949) * C1089 + (C25950 + C25951) * C31650 -
             (C20709 + C20708) * C1090 - (C20711 + C20710) * C31637 +
             (C19049 * C1298 + C19047 * C1311 + C19050 * C1303 +
              C19048 * C1320) *
                 C1091 +
             (C19049 * C1310 + C19047 * C1325 + C19050 * C1321 +
              C19048 * C1330) *
                 C31609) *
                C31294 * C13454) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
                C13454) *
               C31661 -
           (((C25518 + C25519) * C31267 + (C25520 + C25521) * C1160) * C31294 *
                C13454 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C31294 * C13453) *
               C31658 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C31294 * C13453 +
            ((C25944 + C25945) * C1160 + (C25946 + C25947) * C31267) * C31294 *
                C13454) *
               C31649 -
           (((C27258 + C27259) * C31267 + (C27260 + C27261) * C1160) * C31294 *
                C13454 +
            ((C19050 * C2028 + C19048 * C2036 + C19049 * C2025 +
              C19047 * C2035) *
                 C31267 +
             (C19050 * C2018 + C19048 * C2027 + C19049 * C2017 +
              C19047 * C2026) *
                 C1160) *
                C31294 * C13453) *
               C31632) *
              C2531 +
          ((((C25521 + C25520) * C1160 + (C25519 + C25518) * C31267) * C31294 *
                C13453 +
            ((C25948 + C25949) * C1160 + (C25950 + C25951) * C31267) * C31294 *
                C13454) *
               C31658 -
           (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
                C13454 +
            ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
                C13453) *
               C31661 -
           (((C25952 + C25953) * C31267 + (C25954 + C25955) * C1160) * C31294 *
                C13454 +
            ((C25947 + C25946) * C31267 + (C25945 + C25944) * C1160) * C31294 *
                C13453) *
               C31649 +
           (((C27261 + C27260) * C1160 + (C27259 + C27258) * C31267) * C31294 *
                C13453 +
            ((C19049 * C6499 + C19047 * C6503 + C19050 * C6501 +
              C19048 * C6506) *
                 C1160 +
             (C19049 * C6502 + C19047 * C6508 + C19050 * C6507 +
              C19048 * C6510) *
                 C31267) *
                C31294 * C13454) *
               C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30289 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31569 -
             (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
                C31294 * C13453 +
            ((C24902 + C24903) * C30289 + (C24904 + C24905) * C31569 -
             (C19279 + C19278) * C30270 - (C19281 + C19280) * C31277) *
                C31294 * C13454) *
               C31413 +
           (((C19472 + C19473) * C30270 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31569 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30289) +
             (C19474 + C19475) * C31277) *
                C31294 * C13453 +
            ((C19983 + C19982) * C30270 -
             ((C25518 + C25519) * C31569 + (C25520 + C25521) * C30289) +
             (C19985 + C19984) * C31277) *
                C31294 * C13454) *
               C31420 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C30289 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31569 -
             (C19480 + C19481) * C30270 - (C19482 + C19483) * C31277) *
                C31294 * C13453 +
            ((C25944 + C25945) * C30289 + (C25946 + C25947) * C31569 -
             (C21419 + C21418) * C30270 - (C21421 + C21420) * C31277) *
                C31294 * C13454) *
               C3806) *
              C2531 +
          ((((C19278 + C19279) * C30270 -
             ((C24905 + C24904) * C31569 + (C24903 + C24902) * C30289) +
             (C19280 + C19281) * C31277) *
                C31294 * C13453 +
            ((C19287 + C19286) * C30270 -
             ((C24906 + C24907) * C31569 + (C24908 + C24909) * C30289) +
             (C19289 + C19288) * C31277) *
                C31294 * C13454) *
               C31413 +
           (((C25521 + C25520) * C30289 + (C25519 + C25518) * C31569 -
             (C19982 + C19983) * C30270 - (C19984 + C19985) * C31277) *
                C31294 * C13453 +
            ((C25948 + C25949) * C30289 + (C25950 + C25951) * C31569 -
             (C20709 + C20708) * C30270 - (C20711 + C20710) * C31277) *
                C31294 * C13454) *
               C31420 +
           (((C21418 + C21419) * C30270 -
             ((C25947 + C25946) * C31569 + (C25945 + C25944) * C30289) +
             (C21420 + C21421) * C31277) *
                C31294 * C13453 +
            ((C19049 * C1302 + C19047 * C1318 + C19050 * C6773 +
              C19048 * C6774) *
                 C30270 -
             ((C25952 + C25953) * C31569 + (C25954 + C25955) * C30289) +
             (C19049 * C1319 + C19047 * C1329 + C19050 * C6775 +
              C19048 * C6776) *
                 C31277) *
                C31294 * C13454) *
               C3806) *
              C31377)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1089 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31650 -
             (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
             (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1089 + (C24904 + C24905) * C31650 -
             (C19279 + C19278) * C1090 - (C19281 + C19280) * C31637 +
             (C19283 + C19282) * C1091 + (C19285 + C19284) * C31609) *
                C31294 * C13454) *
               C3298 +
           (((C19472 + C19473) * C1090 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31650 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C1089) +
             (C19474 + C19475) * C31637 - (C19476 + C19477) * C1091 -
             (C19478 + C19479) * C31609) *
                C31294 * C13453 +
            ((C19983 + C19982) * C1090 -
             ((C25518 + C25519) * C31650 + (C25520 + C25521) * C1089) +
             (C19985 + C19984) * C31637 - (C19987 + C19986) * C1091 -
             (C19989 + C19988) * C31609) *
                C31294 * C13454) *
               C31417) *
              C2531 +
          ((((C19278 + C19279) * C1090 -
             ((C24905 + C24904) * C31650 + (C24903 + C24902) * C1089) +
             (C19280 + C19281) * C31637 - (C19282 + C19283) * C1091 -
             (C19284 + C19285) * C31609) *
                C31294 * C13453 +
            ((C19287 + C19286) * C1090 -
             ((C24906 + C24907) * C31650 + (C24908 + C24909) * C1089) +
             (C19289 + C19288) * C31637 - (C19291 + C19290) * C1091 -
             (C19293 + C19292) * C31609) *
                C31294 * C13454) *
               C3298 +
           (((C25521 + C25520) * C1089 + (C25519 + C25518) * C31650 -
             (C19982 + C19983) * C1090 - (C19984 + C19985) * C31637 +
             (C19986 + C19987) * C1091 + (C19988 + C19989) * C31609) *
                C31294 * C13453 +
            ((C25948 + C25949) * C1089 + (C25950 + C25951) * C31650 -
             (C20709 + C20708) * C1090 - (C20711 + C20710) * C31637 +
             (C19049 * C1298 + C19047 * C1311 + C19050 * C1303 +
              C19048 * C1320) *
                 C1091 +
             (C19049 * C1310 + C19047 * C1325 + C19050 * C1321 +
              C19048 * C1330) *
                 C31609) *
                C31294 * C13454) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
                C13454) *
               C3298 -
           (((C25518 + C25519) * C31267 + (C25520 + C25521) * C1160) * C31294 *
                C13454 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C31294 * C13453) *
               C31417) *
              C31660 +
          ((((C25521 + C25520) * C1160 + (C25519 + C25518) * C31267) * C31294 *
                C13453 +
            ((C25948 + C25949) * C1160 + (C25950 + C25951) * C31267) * C31294 *
                C13454) *
               C31417 -
           (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
                C13454 +
            ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
                C13453) *
               C3298) *
              C31656 +
          ((((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
                C13453 +
            ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
                C13454) *
               C3298 -
           (((C26418 + C26419) * C31267 + (C26420 + C26421) * C1160) * C31294 *
                C13454 +
            ((C25951 + C25950) * C31267 + (C25949 + C25948) * C1160) * C31294 *
                C13453) *
               C31417) *
              C31646 +
          ((((C26421 + C26420) * C1160 + (C26419 + C26418) * C31267) * C31294 *
                C13453 +
            ((C19049 * C5750 + C19047 * C5755 + C19050 * C5751 +
              C19048 * C5756) *
                 C1160 +
             (C19049 * C5754 + C19047 * C5759 + C19050 * C5757 +
              C19048 * C5760) *
                 C31267) *
                C31294 * C13454) *
               C31417 -
           (((C25770 + C25771) * C31267 + (C25772 + C25773) * C1160) * C31294 *
                C13454 +
            ((C25769 + C25768) * C31267 + (C25767 + C25766) * C1160) * C31294 *
                C13453) *
               C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C30289 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31569 -
            (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
               C31294 * C13453 +
           ((C24902 + C24903) * C30289 + (C24904 + C24905) * C31569 -
            (C19279 + C19278) * C30270 - (C19281 + C19280) * C31277) *
               C31294 * C13454) *
              C31330 * C1431 +
          (((C19278 + C19279) * C30270 -
            ((C24905 + C24904) * C31569 + (C24903 + C24902) * C30289) +
            (C19280 + C19281) * C31277) *
               C31294 * C13453 +
           ((C19287 + C19286) * C30270 -
            ((C24906 + C24907) * C31569 + (C24908 + C24909) * C30289) +
            (C19289 + C19288) * C31277) *
               C31294 * C13454) *
              C31330 * C1432 +
          (((C24909 + C24908) * C30289 + (C24907 + C24906) * C31569 -
            (C19286 + C19287) * C30270 - (C19288 + C19289) * C31277) *
               C31294 * C13453 +
           ((C25766 + C25767) * C30289 + (C25768 + C25769) * C31569 -
            (C20503 + C20502) * C30270 - (C20505 + C20504) * C31277) *
               C31294 * C13454) *
              C31330 * C1433 +
          (((C20502 + C20503) * C30270 -
            ((C25769 + C25768) * C31569 + (C25767 + C25766) * C30289) +
            (C20504 + C20505) * C31277) *
               C31294 * C13453 +
           ((C19049 * C1165 + C19047 * C1175 + C19050 * C6079 +
             C19048 * C6080) *
                C30270 -
            ((C25770 + C25771) * C31569 + (C25772 + C25773) * C30289) +
            (C19049 * C1176 + C19047 * C1183 + C19050 * C6081 +
             C19048 * C6082) *
                C31277) *
               C31294 * C13454) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C665 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C659 -
            (C19084 + C19085) * C666 - (C19086 + C19087) * C660 +
            (C19088 + C19089) * C667 + (C19090 + C19091) * C661 -
            (C19092 + C19093) * C668 - (C19094 + C19095) * C31620) *
               C31294 * C13453 +
           ((C24902 + C24903) * C665 + (C24904 + C24905) * C659 -
            (C19279 + C19278) * C666 - (C19281 + C19280) * C660 +
            (C19283 + C19282) * C667 + (C19285 + C19284) * C661 -
            (C19627 + C19626) * C668 - (C19629 + C19628) * C31620) *
               C31294 * C13454) *
              C31330 * C31587 +
          (((C19278 + C19279) * C666 -
            ((C24905 + C24904) * C659 + (C24903 + C24902) * C665) +
            (C19280 + C19281) * C660 - (C19282 + C19283) * C667 -
            (C19284 + C19285) * C661 + (C19626 + C19627) * C668 +
            (C19628 + C19629) * C31620) *
               C31294 * C13453 +
           ((C19287 + C19286) * C666 -
            ((C24906 + C24907) * C659 + (C24908 + C24909) * C665) +
            (C19289 + C19288) * C660 - (C19291 + C19290) * C667 -
            (C19293 + C19292) * C661 +
            (C19049 * C304 + C19047 * C322 + C19050 * C1599 + C19048 * C1600) *
                C668 +
            (C19049 * C323 + C19047 * C334 + C19050 * C1601 + C19048 * C1602) *
                C31620) *
               C31294 * C13454) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30289 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31569 -
             (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
                C31294 * C13453 +
            ((C24902 + C24903) * C30289 + (C24904 + C24905) * C31569 -
             (C19279 + C19278) * C30270 - (C19281 + C19280) * C31277) *
                C31294 * C13454) *
               C1835 +
           (((C19472 + C19473) * C30270 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31569 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30289) +
             (C19474 + C19475) * C31277) *
                C31294 * C13453 +
            ((C19983 + C19982) * C30270 -
             ((C25518 + C25519) * C31569 + (C25520 + C25521) * C30289) +
             (C19985 + C19984) * C31277) *
                C31294 * C13454) *
               C1836 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C30289 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31569 -
             (C19480 + C19481) * C30270 - (C19482 + C19483) * C31277) *
                C31294 * C13453 +
            ((C25944 + C25945) * C30289 + (C25946 + C25947) * C31569 -
             (C21419 + C21418) * C30270 - (C21421 + C21420) * C31277) *
                C31294 * C13454) *
               C31619) *
              C31587 +
          ((((C19278 + C19279) * C30270 -
             ((C24905 + C24904) * C31569 + (C24903 + C24902) * C30289) +
             (C19280 + C19281) * C31277) *
                C31294 * C13453 +
            ((C19287 + C19286) * C30270 -
             ((C24906 + C24907) * C31569 + (C24908 + C24909) * C30289) +
             (C19289 + C19288) * C31277) *
                C31294 * C13454) *
               C1835 +
           (((C25521 + C25520) * C30289 + (C25519 + C25518) * C31569 -
             (C19982 + C19983) * C30270 - (C19984 + C19985) * C31277) *
                C31294 * C13453 +
            ((C25948 + C25949) * C30289 + (C25950 + C25951) * C31569 -
             (C20709 + C20708) * C30270 - (C20711 + C20710) * C31277) *
                C31294 * C13454) *
               C1836 +
           (((C21418 + C21419) * C30270 -
             ((C25947 + C25946) * C31569 + (C25945 + C25944) * C30289) +
             (C21420 + C21421) * C31277) *
                C31294 * C13453 +
            ((C19049 * C1302 + C19047 * C1318 + C19050 * C6773 +
              C19048 * C6774) *
                 C30270 -
             ((C25952 + C25953) * C31569 + (C25954 + C25955) * C30289) +
             (C19049 * C1319 + C19047 * C1329 + C19050 * C6775 +
              C19048 * C6776) *
                 C31277) *
                C31294 * C13454) *
               C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
                C13454) *
               C31588 -
           (((C25518 + C25519) * C31267 + (C25520 + C25521) * C1160) * C31294 *
                C13454 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C31294 * C13453) *
               C31417) *
              C1431 +
          ((((C25521 + C25520) * C1160 + (C25519 + C25518) * C31267) * C31294 *
                C13453 +
            ((C25948 + C25949) * C1160 + (C25950 + C25951) * C31267) * C31294 *
                C13454) *
               C31417 -
           (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
                C13454 +
            ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
                C13453) *
               C31588) *
              C1432 +
          ((((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
                C13453 +
            ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
                C13454) *
               C31588 -
           (((C26418 + C26419) * C31267 + (C26420 + C26421) * C1160) * C31294 *
                C13454 +
            ((C25951 + C25950) * C31267 + (C25949 + C25948) * C1160) * C31294 *
                C13453) *
               C31417) *
              C1433 +
          ((((C26421 + C26420) * C1160 + (C26419 + C26418) * C31267) * C31294 *
                C13453 +
            ((C19049 * C5750 + C19047 * C5755 + C19050 * C5751 +
              C19048 * C5756) *
                 C1160 +
             (C19049 * C5754 + C19047 * C5759 + C19050 * C5757 +
              C19048 * C5760) *
                 C31267) *
                C31294 * C13454) *
               C31417 -
           (((C25770 + C25771) * C31267 + (C25772 + C25773) * C1160) * C31294 *
                C13454 +
            ((C25769 + C25768) * C31267 + (C25767 + C25766) * C1160) * C31294 *
                C13453) *
               C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C293 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C287 -
             (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
             (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
                C31294 * C13453 +
            ((C24902 + C24903) * C293 + (C24904 + C24905) * C287 -
             (C19279 + C19278) * C294 - (C19281 + C19280) * C288 +
             (C19283 + C19282) * C295 + (C19285 + C19284) * C31609) *
                C31294 * C13454) *
               C31588 +
           (((C19472 + C19473) * C294 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C287 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C293) +
             (C19474 + C19475) * C288 - (C19476 + C19477) * C295 -
             (C19478 + C19479) * C31609) *
                C31294 * C13453 +
            ((C19983 + C19982) * C294 -
             ((C25518 + C25519) * C287 + (C25520 + C25521) * C293) +
             (C19985 + C19984) * C288 - (C19987 + C19986) * C295 -
             (C19989 + C19988) * C31609) *
                C31294 * C13454) *
               C31417) *
              C31587 +
          ((((C19278 + C19279) * C294 -
             ((C24905 + C24904) * C287 + (C24903 + C24902) * C293) +
             (C19280 + C19281) * C288 - (C19282 + C19283) * C295 -
             (C19284 + C19285) * C31609) *
                C31294 * C13453 +
            ((C19287 + C19286) * C294 -
             ((C24906 + C24907) * C287 + (C24908 + C24909) * C293) +
             (C19289 + C19288) * C288 - (C19291 + C19290) * C295 -
             (C19293 + C19292) * C31609) *
                C31294 * C13454) *
               C31588 +
           (((C25521 + C25520) * C293 + (C25519 + C25518) * C287 -
             (C19982 + C19983) * C294 - (C19984 + C19985) * C288 +
             (C19986 + C19987) * C295 + (C19988 + C19989) * C31609) *
                C31294 * C13453 +
            ((C19049 * C1300 + C19047 * C1315 + C19050 * C1301 +
              C19048 * C1316) *
                 C293 +
             (C19049 * C1314 + C19047 * C1327 + C19050 * C1317 +
              C19048 * C1328) *
                 C287 -
             (C20709 + C20708) * C294 - (C20711 + C20710) * C288 +
             (C19049 * C1298 + C19047 * C1311 + C19050 * C1303 +
              C19048 * C1320) *
                 C295 +
             (C19049 * C1310 + C19047 * C1325 + C19050 * C1321 +
              C19048 * C1330) *
                 C31609) *
                C31294 * C13454) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
                C13454) *
               C2299 -
           (((C25518 + C25519) * C31267 + (C25520 + C25521) * C1160) * C31294 *
                C13454 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C31294 * C13453) *
               C2300 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C31294 * C13453 +
            ((C25944 + C25945) * C1160 + (C25946 + C25947) * C31267) * C31294 *
                C13454) *
               C2301 -
           (((C27258 + C27259) * C31267 + (C27260 + C27261) * C1160) * C31294 *
                C13454 +
            ((C19050 * C2028 + C19048 * C2036 + C19049 * C2025 +
              C19047 * C2035) *
                 C31267 +
             (C19050 * C2018 + C19048 * C2027 + C19049 * C2017 +
              C19047 * C2026) *
                 C1160) *
                C31294 * C13453) *
               C31632) *
              C31587 +
          ((((C25521 + C25520) * C1160 + (C25519 + C25518) * C31267) * C31294 *
                C13453 +
            ((C25948 + C25949) * C1160 + (C25950 + C25951) * C31267) * C31294 *
                C13454) *
               C2300 -
           (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
                C13454 +
            ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
                C13453) *
               C2299 -
           (((C25952 + C25953) * C31267 + (C25954 + C25955) * C1160) * C31294 *
                C13454 +
            ((C25947 + C25946) * C31267 + (C25945 + C25944) * C1160) * C31294 *
                C13453) *
               C2301 +
           (((C27261 + C27260) * C1160 + (C27259 + C27258) * C31267) * C31294 *
                C13453 +
            ((C19049 * C6499 + C19047 * C6503 + C19050 * C6501 +
              C19048 * C6506) *
                 C1160 +
             (C19049 * C6502 + C19047 * C6508 + C19050 * C6507 +
              C19048 * C6510) *
                 C31267) *
                C31294 * C13454) *
               C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                   C114 +
               (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                   C102 -
               (C19084 + C19085) * C115 - (C19086 + C19087) * C103 +
               (C19088 + C19089) * C116 + (C19090 + C19091) * C104 -
               (C19092 + C19093) * C117 - (C19094 + C19095) * C105 +
               (C19096 + C19097) * C118 + (C19098 + C19099) * C106) *
                  C31294 * C13453 +
              ((C19049 * C297 + C19047 * C308 + C19050 * C935 + C19048 * C940) *
                   C114 +
               (C19049 * C307 + C19047 * C326 + C19050 * C941 + C19048 * C950) *
                   C102 -
               (C19279 + C19278) * C115 - (C19281 + C19280) * C103 +
               (C19283 + C19282) * C116 + (C19285 + C19284) * C104 -
               (C19627 + C19626) * C117 - (C19629 + C19628) * C105 +
               (C19049 * C300 + C19047 * C314 + C19050 * C939 + C19048 * C948) *
                   C118 +
               (C19049 * C315 + C19047 * C330 + C19050 * C949 + C19048 * C954) *
                   C106) *
                  C31294 * C13454) *
             C31330 * C31318 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C19049 * C119 + C19047 * C126 + C19050 * C486 +
                 C19048 * C497) *
                    C293 +
                (C19049 * C127 + C19047 * C140 + C19050 * C496 +
                 C19048 * C515) *
                    C287 -
                (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
                (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
                   C31294 * C13453 +
               ((C24902 + C24903) * C293 + (C24904 + C24905) * C287 -
                (C19279 + C19278) * C294 - (C19281 + C19280) * C288 +
                (C19283 + C19282) * C295 + (C19285 + C19284) * C31609) *
                   C31294 * C13454) *
                  C31330 * C31653 +
              (((C19278 + C19279) * C294 -
                ((C24905 + C24904) * C287 + (C24903 + C24902) * C293) +
                (C19280 + C19281) * C288 - (C19282 + C19283) * C295 -
                (C19284 + C19285) * C31609) *
                   C31294 * C13453 +
               ((C19287 + C19286) * C294 -
                ((C24906 + C24907) * C287 + (C24908 + C24909) * C293) +
                (C19289 + C19288) * C288 - (C19291 + C19290) * C295 -
                (C19293 + C19292) * C31609) *
                   C31294 * C13454) *
                  C31330 * C31641 +
              (((C24909 + C24908) * C293 + (C24907 + C24906) * C287 -
                (C19286 + C19287) * C294 - (C19288 + C19289) * C288 +
                (C19290 + C19291) * C295 + (C19292 + C19293) * C31609) *
                   C31294 * C13453 +
               ((C19049 * C1163 + C19047 * C1172 + C19050 * C1713 +
                 C19048 * C1716) *
                    C293 +
                (C19049 * C1171 + C19047 * C1181 + C19050 * C1717 +
                 C19048 * C1722) *
                    C287 -
                (C20503 + C20502) * C294 - (C20505 + C20504) * C288 +
                (C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
                 C19048 * C1720) *
                    C295 +
                (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
                 C19048 * C1724) *
                    C31609) *
                   C31294 * C13454) *
                  C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C293 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C287 -
            (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
            (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
               C31294 * C13453 +
           ((C24902 + C24903) * C293 + (C24904 + C24905) * C287 -
            (C19279 + C19278) * C294 - (C19281 + C19280) * C288 +
            (C19283 + C19282) * C295 + (C19285 + C19284) * C31609) *
               C31294 * C13454) *
              C31654 +
          (((C19472 + C19473) * C294 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C287 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C293) +
            (C19474 + C19475) * C288 - (C19476 + C19477) * C295 -
            (C19478 + C19479) * C31609) *
               C31294 * C13453 +
           ((C19983 + C19982) * C294 -
            ((C19050 * C1308 + C19048 * C1324 + C19049 * C941 + C19047 * C950) *
                 C287 +
             (C19050 * C1297 + C19048 * C1309 + C19049 * C935 + C19047 * C940) *
                 C293) +
            (C19985 + C19984) * C288 - (C19987 + C19986) * C295 -
            (C19989 + C19988) * C31609) *
               C31294 * C13454) *
              C31643 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C293 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C287 -
            (C19480 + C19481) * C294 - (C19482 + C19483) * C288 +
            (C19484 + C19485) * C295 + (C19486 + C19487) * C31609) *
               C31294 * C13453 +
           ((C19049 * C1297 + C19047 * C1309 + C19050 * C2417 +
             C19048 * C2420) *
                C293 +
            (C19049 * C1308 + C19047 * C1324 + C19050 * C2421 +
             C19048 * C2426) *
                C287 -
            (C21419 + C21418) * C294 - (C21421 + C21420) * C288 +
            (C19049 * C1295 + C19047 * C1305 + C19050 * C2419 +
             C19048 * C2424) *
                C295 +
            (C19049 * C1304 + C19047 * C1322 + C19050 * C2425 +
             C19048 * C2428) *
                C31609) *
               C31294 * C13454) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1089 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31650 -
            (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
            (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
               C31294 * C13453 +
           ((C24902 + C24903) * C1089 + (C24904 + C24905) * C31650 -
            (C19279 + C19278) * C1090 - (C19281 + C19280) * C31637 +
            (C19283 + C19282) * C1091 + (C19285 + C19284) * C31609) *
               C31294 * C13454) *
              C31330 * C1086 +
          (((C19278 + C19279) * C1090 -
            ((C24905 + C24904) * C31650 + (C24903 + C24902) * C1089) +
            (C19280 + C19281) * C31637 - (C19282 + C19283) * C1091 -
            (C19284 + C19285) * C31609) *
               C31294 * C13453 +
           ((C19287 + C19286) * C1090 -
            ((C24906 + C24907) * C31650 + (C24908 + C24909) * C1089) +
            (C19289 + C19288) * C31637 - (C19291 + C19290) * C1091 -
            (C19293 + C19292) * C31609) *
               C31294 * C13454) *
              C31330 * C1087 +
          (((C24909 + C24908) * C1089 + (C24907 + C24906) * C31650 -
            (C19286 + C19287) * C1090 - (C19288 + C19289) * C31637 +
            (C19290 + C19291) * C1091 + (C19292 + C19293) * C31609) *
               C31294 * C13453 +
           ((C19049 * C1163 + C19047 * C1172 + C19050 * C1713 +
             C19048 * C1716) *
                C1089 +
            (C19049 * C1171 + C19047 * C1181 + C19050 * C1717 +
             C19048 * C1722) *
                C31650 -
            (C20503 + C20502) * C1090 - (C20505 + C20504) * C31637 +
            (C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
             C19048 * C1720) *
                C1091 +
            (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
             C19048 * C1724) *
                C31609) *
               C31294 * C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1160 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31267) *
               C31294 * C13453 +
           ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
               C13454) *
              C31330 * C1155 -
          (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
               C13454 +
           ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
               C13453) *
              C31330 * C1156 +
          (((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
               C13453 +
           ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
               C13454) *
              C31330 * C1157 -
          (((C25770 + C25771) * C31267 + (C25772 + C25773) * C1160) * C31294 *
               C13454 +
           ((C25769 + C25768) * C31267 + (C25767 + C25766) * C1160) * C31294 *
               C13453) *
              C31330 * C1158 +
          (((C25773 + C25772) * C1160 + (C25771 + C25770) * C31267) * C31294 *
               C13453 +
           ((C19049 * C5603 + C19047 * C5606 + C19050 * C6203 +
             C19048 * C6204) *
                C1160 +
            (C19049 * C5605 + C19047 * C5609 + C19050 * C6205 +
             C19048 * C6206) *
                C31267) *
               C31294 * C13454) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
                C13454) *
               C31654 -
           (((C25518 + C25519) * C31267 + (C25520 + C25521) * C1160) * C31294 *
                C13454 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C31294 * C13453) *
               C31643 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C31294 * C13453 +
            ((C25944 + C25945) * C1160 + (C25946 + C25947) * C31267) * C31294 *
                C13454) *
               C31619) *
              C1086 +
          ((((C25521 + C25520) * C1160 + (C25519 + C25518) * C31267) * C31294 *
                C13453 +
            ((C25948 + C25949) * C1160 + (C25950 + C25951) * C31267) * C31294 *
                C13454) *
               C31643 -
           (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
                C13454 +
            ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
                C13453) *
               C31654 -
           (((C25952 + C25953) * C31267 + (C25954 + C25955) * C1160) * C31294 *
                C13454 +
            ((C25947 + C25946) * C31267 + (C25945 + C25944) * C1160) * C31294 *
                C13453) *
               C31619) *
              C1087 +
          ((((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
                C13453 +
            ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
                C13454) *
               C31654 -
           (((C19050 * C5752 + C19048 * C5758 + C19049 * C1717 +
              C19047 * C1722) *
                 C31267 +
             (C19050 * C5749 + C19048 * C5753 + C19049 * C1713 +
              C19047 * C1716) *
                 C1160) *
                C31294 * C13454 +
            ((C25951 + C25950) * C31267 + (C25949 + C25948) * C1160) * C31294 *
                C13453) *
               C31643 +
           (((C25955 + C25954) * C1160 + (C25953 + C25952) * C31267) * C31294 *
                C13453 +
            ((C19049 * C5749 + C19047 * C5753 + C19050 * C6875 +
              C19048 * C6876) *
                 C1160 +
             (C19049 * C5752 + C19047 * C5758 + C19050 * C6877 +
              C19048 * C6878) *
                 C31267) *
                C31294 * C13454) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1089 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31650 -
            (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
            (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
               C31294 * C13453 +
           ((C24902 + C24903) * C1089 + (C24904 + C24905) * C31650 -
            (C19279 + C19278) * C1090 - (C19281 + C19280) * C31637 +
            (C19283 + C19282) * C1091 + (C19285 + C19284) * C31609) *
               C31294 * C13454) *
              C1835 +
          (((C19472 + C19473) * C1090 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31650 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1089) +
            (C19474 + C19475) * C31637 - (C19476 + C19477) * C1091 -
            (C19478 + C19479) * C31609) *
               C31294 * C13453 +
           ((C19983 + C19982) * C1090 -
            ((C25518 + C25519) * C31650 + (C25520 + C25521) * C1089) +
            (C19985 + C19984) * C31637 - (C19987 + C19986) * C1091 -
            (C19989 + C19988) * C31609) *
               C31294 * C13454) *
              C1836 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C1089 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C31650 -
            (C19480 + C19481) * C1090 - (C19482 + C19483) * C31637 +
            (C19484 + C19485) * C1091 + (C19486 + C19487) * C31609) *
               C31294 * C13453 +
           ((C25944 + C25945) * C1089 + (C25946 + C25947) * C31650 -
            (C21419 + C21418) * C1090 - (C21421 + C21420) * C31637 +
            (C19049 * C1295 + C19047 * C1305 + C19050 * C2419 +
             C19048 * C2424) *
                C1091 +
            (C19049 * C1304 + C19047 * C1322 + C19050 * C2425 +
             C19048 * C2428) *
                C31609) *
               C31294 * C13454) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
                C13454) *
               C1835 -
           (((C25518 + C25519) * C31267 + (C25520 + C25521) * C1160) * C31294 *
                C13454 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C31294 * C13453) *
               C1836 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C31294 * C13453 +
            ((C25944 + C25945) * C1160 + (C25946 + C25947) * C31267) * C31294 *
                C13454) *
               C31619) *
              C31653 +
          ((((C25521 + C25520) * C1160 + (C25519 + C25518) * C31267) * C31294 *
                C13453 +
            ((C25948 + C25949) * C1160 + (C25950 + C25951) * C31267) * C31294 *
                C13454) *
               C1836 -
           (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
                C13454 +
            ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
                C13453) *
               C1835 -
           (((C25952 + C25953) * C31267 + (C25954 + C25955) * C1160) * C31294 *
                C13454 +
            ((C25947 + C25946) * C31267 + (C25945 + C25944) * C1160) * C31294 *
                C13453) *
               C31619) *
              C31641 +
          ((((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
                C13453 +
            ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
                C13454) *
               C1835 -
           (((C26418 + C26419) * C31267 + (C26420 + C26421) * C1160) * C31294 *
                C13454 +
            ((C25951 + C25950) * C31267 + (C25949 + C25948) * C1160) * C31294 *
                C13453) *
               C1836 +
           (((C25955 + C25954) * C1160 + (C25953 + C25952) * C31267) * C31294 *
                C13453 +
            ((C19049 * C5749 + C19047 * C5753 + C19050 * C6875 +
              C19048 * C6876) *
                 C1160 +
             (C19049 * C5752 + C19047 * C5758 + C19050 * C6877 +
              C19048 * C6878) *
                 C31267) *
                C31294 * C13454) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1160 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31267) *
               C31294 * C13453 +
           ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
               C13454) *
              C2010 -
          (((C25518 + C25519) * C31267 + (C25520 + C25521) * C1160) * C31294 *
               C13454 +
           ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                C31267 +
            (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                C1160) *
               C31294 * C13453) *
              C2011 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C1160 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C31267) *
               C31294 * C13453 +
           ((C25944 + C25945) * C1160 + (C25946 + C25947) * C31267) * C31294 *
               C13454) *
              C2012 -
          (((C19050 * C6505 + C19048 * C6509 + C19049 * C2421 +
             C19047 * C2426) *
                C31267 +
            (C19050 * C6500 + C19048 * C6504 + C19049 * C2417 +
             C19047 * C2420) *
                C1160) *
               C31294 * C13454 +
           ((C19050 * C2028 + C19048 * C2036 + C19049 * C2025 +
             C19047 * C2035) *
                C31267 +
            (C19050 * C2018 + C19048 * C2027 + C19049 * C2017 +
             C19047 * C2026) *
                C1160) *
               C31294 * C13453) *
              C2013 +
          (((C19049 * C2018 + C19047 * C2027 + C19050 * C10775 +
             C19048 * C10778) *
                C1160 +
            (C19049 * C2028 + C19047 * C2036 + C19050 * C10777 +
             C19048 * C10781) *
                C31267) *
               C31294 * C13453 +
           ((C19049 * C6500 + C19047 * C6504 + C19050 * C11133 +
             C19048 * C11134) *
                C1160 +
            (C19049 * C6505 + C19047 * C6509 + C19050 * C11135 +
             C19048 * C11136) *
                C31267) *
               C31294 * C13454) *
              C2014) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30289 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31569 -
             (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
                C31294 * C13453 +
            ((C24902 + C24903) * C30289 + (C24904 + C24905) * C31569 -
             (C19279 + C19278) * C30270 - (C19281 + C19280) * C31277) *
                C31294 * C13454) *
               C31588 +
           (((C19472 + C19473) * C30270 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31569 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30289) +
             (C19474 + C19475) * C31277) *
                C31294 * C13453 +
            ((C19983 + C19982) * C30270 -
             ((C25518 + C25519) * C31569 + (C25520 + C25521) * C30289) +
             (C19985 + C19984) * C31277) *
                C31294 * C13454) *
               C31417) *
              C1086 +
          ((((C19278 + C19279) * C30270 -
             ((C24905 + C24904) * C31569 + (C24903 + C24902) * C30289) +
             (C19280 + C19281) * C31277) *
                C31294 * C13453 +
            ((C19287 + C19286) * C30270 -
             ((C24906 + C24907) * C31569 + (C24908 + C24909) * C30289) +
             (C19289 + C19288) * C31277) *
                C31294 * C13454) *
               C31588 +
           (((C25521 + C25520) * C30289 + (C25519 + C25518) * C31569 -
             (C19982 + C19983) * C30270 - (C19984 + C19985) * C31277) *
                C31294 * C13453 +
            ((C25948 + C25949) * C30289 + (C25950 + C25951) * C31569 -
             (C20709 + C20708) * C30270 - (C20711 + C20710) * C31277) *
                C31294 * C13454) *
               C31417) *
              C1087 +
          ((((C24909 + C24908) * C30289 + (C24907 + C24906) * C31569 -
             (C19286 + C19287) * C30270 - (C19288 + C19289) * C31277) *
                C31294 * C13453 +
            ((C25766 + C25767) * C30289 + (C25768 + C25769) * C31569 -
             (C20503 + C20502) * C30270 - (C20505 + C20504) * C31277) *
                C31294 * C13454) *
               C31588 +
           (((C20708 + C20709) * C30270 -
             ((C25951 + C25950) * C31569 + (C25949 + C25948) * C30289) +
             (C20710 + C20711) * C31277) *
                C31294 * C13453 +
            ((C19049 * C1714 + C19047 * C1718 + C19050 * C6657 +
              C19048 * C6658) *
                 C30270 -
             ((C19050 * C5752 + C19048 * C5758 + C19049 * C1717 +
               C19047 * C1722) *
                  C31569 +
              (C19050 * C5749 + C19048 * C5753 + C19049 * C1713 +
               C19047 * C1716) *
                  C30289) +
             (C19049 * C1719 + C19047 * C1723 + C19050 * C6659 +
              C19048 * C6660) *
                 C31277) *
                C31294 * C13454) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C665 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C659 -
            (C19084 + C19085) * C666 - (C19086 + C19087) * C660 +
            (C19088 + C19089) * C667 + (C19090 + C19091) * C661 -
            (C19092 + C19093) * C668 - (C19094 + C19095) * C31620) *
               C31294 * C13453 +
           ((C24902 + C24903) * C665 + (C24904 + C24905) * C659 -
            (C19279 + C19278) * C666 - (C19281 + C19280) * C660 +
            (C19283 + C19282) * C667 + (C19285 + C19284) * C661 -
            (C19627 + C19626) * C668 - (C19629 + C19628) * C31620) *
               C31294 * C13454) *
              C31588 +
          (((C19472 + C19473) * C666 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C659 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C665) +
            (C19474 + C19475) * C660 - (C19476 + C19477) * C667 -
            (C19478 + C19479) * C661 + (C19768 + C19769) * C668 +
            (C19770 + C19771) * C31620) *
               C31294 * C13453 +
           ((C19983 + C19982) * C666 -
            ((C19050 * C1308 + C19048 * C1324 + C19049 * C941 + C19047 * C950) *
                 C659 +
             (C19050 * C1297 + C19048 * C1309 + C19049 * C935 + C19047 * C940) *
                 C665) +
            (C19985 + C19984) * C660 - (C19987 + C19986) * C667 -
            (C19989 + C19988) * C661 +
            (C19049 * C938 + C19047 * C946 + C19050 * C2185 + C19048 * C2186) *
                C668 +
            (C19049 * C947 + C19047 * C953 + C19050 * C2187 + C19048 * C2188) *
                C31620) *
               C31294 * C13454) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C30289 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31569 -
            (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
               C31294 * C13453 +
           ((C24902 + C24903) * C30289 + (C24904 + C24905) * C31569 -
            (C19279 + C19278) * C30270 - (C19281 + C19280) * C31277) *
               C31294 * C13454) *
              C2299 +
          (((C19472 + C19473) * C30270 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31569 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C30289) +
            (C19474 + C19475) * C31277) *
               C31294 * C13453 +
           ((C19983 + C19982) * C30270 -
            ((C25518 + C25519) * C31569 + (C25520 + C25521) * C30289) +
            (C19985 + C19984) * C31277) *
               C31294 * C13454) *
              C2300 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C30289 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C31569 -
            (C19480 + C19481) * C30270 - (C19482 + C19483) * C31277) *
               C31294 * C13453 +
           ((C25944 + C25945) * C30289 + (C25946 + C25947) * C31569 -
            (C21419 + C21418) * C30270 - (C21421 + C21420) * C31277) *
               C31294 * C13454) *
              C2301 +
          (((C21560 + C21561) * C30270 -
            ((C19050 * C2028 + C19048 * C2036 + C19049 * C2025 +
              C19047 * C2035) *
                 C31569 +
             (C19050 * C2018 + C19048 * C2027 + C19049 * C2017 +
              C19047 * C2026) *
                 C30289) +
            (C21562 + C21563) * C31277) *
               C31294 * C13453 +
           ((C19049 * C2418 + C19047 * C2422 + C19050 * C10929 +
             C19048 * C10930) *
                C30270 -
            ((C19050 * C6505 + C19048 * C6509 + C19049 * C2421 +
              C19047 * C2426) *
                 C31569 +
             (C19050 * C6500 + C19048 * C6504 + C19049 * C2417 +
              C19047 * C2420) *
                 C30289) +
            (C19049 * C2423 + C19047 * C2427 + C19050 * C10931 +
             C19048 * C10932) *
                C31277) *
               C31294 * C13454) *
              C31632) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C293 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C287 -
            (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
            (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
               C31294 * C13453 +
           ((C24902 + C24903) * C293 + (C24904 + C24905) * C287 -
            (C19279 + C19278) * C294 - (C19281 + C19280) * C288 +
            (C19283 + C19282) * C295 + (C19285 + C19284) * C31609) *
               C31294 * C13454) *
              C31330 * C31653 +
          (((C19278 + C19279) * C294 -
            ((C24905 + C24904) * C287 + (C24903 + C24902) * C293) +
            (C19280 + C19281) * C288 - (C19282 + C19283) * C295 -
            (C19284 + C19285) * C31609) *
               C31294 * C13453 +
           ((C19287 + C19286) * C294 -
            ((C24906 + C24907) * C287 + (C24908 + C24909) * C293) +
            (C19289 + C19288) * C288 - (C19291 + C19290) * C295 -
            (C19293 + C19292) * C31609) *
               C31294 * C13454) *
              C31330 * C31641 +
          (((C24909 + C24908) * C293 + (C24907 + C24906) * C287 -
            (C19286 + C19287) * C294 - (C19288 + C19289) * C288 +
            (C19290 + C19291) * C295 + (C19292 + C19293) * C31609) *
               C31294 * C13453 +
           ((C19049 * C1163 + C19047 * C1172 + C19050 * C1713 +
             C19048 * C1716) *
                C293 +
            (C19049 * C1171 + C19047 * C1181 + C19050 * C1717 +
             C19048 * C1722) *
                C287 -
            (C20503 + C20502) * C294 - (C20505 + C20504) * C288 +
            (C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
             C19048 * C1720) *
                C295 +
            (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
             C19048 * C1724) *
                C31609) *
               C31294 * C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
               C114 +
           (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
               C102 -
           (C19084 + C19085) * C115 - (C19086 + C19087) * C103 +
           (C19088 + C19089) * C116 + (C19090 + C19091) * C104 -
           (C19092 + C19093) * C117 - (C19094 + C19095) * C105 +
           (C19096 + C19097) * C118 + (C19098 + C19099) * C106) *
              C31294 * C13453 +
          ((C19049 * C297 + C19047 * C308 + C19050 * C935 + C19048 * C940) *
               C114 +
           (C19049 * C307 + C19047 * C326 + C19050 * C941 + C19048 * C950) *
               C102 -
           (C19279 + C19278) * C115 - (C19281 + C19280) * C103 +
           (C19283 + C19282) * C116 + (C19285 + C19284) * C104 -
           (C19627 + C19626) * C117 - (C19629 + C19628) * C105 +
           (C19049 * C300 + C19047 * C314 + C19050 * C939 + C19048 * C948) *
               C118 +
           (C19049 * C315 + C19047 * C330 + C19050 * C949 + C19048 * C954) *
               C106) *
              C31294 * C13454) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1089 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31650 -
            (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
            (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
               C31294 * C13453 +
           ((C24902 + C24903) * C1089 + (C24904 + C24905) * C31650 -
            (C19279 + C19278) * C1090 - (C19281 + C19280) * C31637 +
            (C19283 + C19282) * C1091 + (C19285 + C19284) * C31609) *
               C31294 * C13454) *
              C31330 * C1086 +
          (((C19278 + C19279) * C1090 -
            ((C24905 + C24904) * C31650 + (C24903 + C24902) * C1089) +
            (C19280 + C19281) * C31637 - (C19282 + C19283) * C1091 -
            (C19284 + C19285) * C31609) *
               C31294 * C13453 +
           ((C19287 + C19286) * C1090 -
            ((C24906 + C24907) * C31650 + (C24908 + C24909) * C1089) +
            (C19289 + C19288) * C31637 - (C19291 + C19290) * C1091 -
            (C19293 + C19292) * C31609) *
               C31294 * C13454) *
              C31330 * C1087 +
          (((C24909 + C24908) * C1089 + (C24907 + C24906) * C31650 -
            (C19286 + C19287) * C1090 - (C19288 + C19289) * C31637 +
            (C19290 + C19291) * C1091 + (C19292 + C19293) * C31609) *
               C31294 * C13453 +
           ((C19049 * C1163 + C19047 * C1172 + C19050 * C1713 +
             C19048 * C1716) *
                C1089 +
            (C19049 * C1171 + C19047 * C1181 + C19050 * C1717 +
             C19048 * C1722) *
                C31650 -
            (C20503 + C20502) * C1090 - (C20505 + C20504) * C31637 +
            (C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
             C19048 * C1720) *
                C1091 +
            (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
             C19048 * C1724) *
                C31609) *
               C31294 * C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1160 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31267) *
               C31294 * C13453 +
           ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
               C13454) *
              C31330 * C1155 -
          (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
               C13454 +
           ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
               C13453) *
              C31330 * C1156 +
          (((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
               C13453 +
           ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
               C13454) *
              C31330 * C1157 -
          (((C25770 + C25771) * C31267 + (C25772 + C25773) * C1160) * C31294 *
               C13454 +
           ((C25769 + C25768) * C31267 + (C25767 + C25766) * C1160) * C31294 *
               C13453) *
              C31330 * C1158 +
          (((C25773 + C25772) * C1160 + (C25771 + C25770) * C31267) * C31294 *
               C13453 +
           ((C19049 * C5603 + C19047 * C5606 + C19050 * C6203 +
             C19048 * C6204) *
                C1160 +
            (C19049 * C5605 + C19047 * C5609 + C19050 * C6205 +
             C19048 * C6206) *
                C31267) *
               C31294 * C13454) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1089 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31650 -
            (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
            (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
               C31294 * C13453 +
           ((C24902 + C24903) * C1089 + (C24904 + C24905) * C31650 -
            (C19279 + C19278) * C1090 - (C19281 + C19280) * C31637 +
            (C19283 + C19282) * C1091 + (C19285 + C19284) * C31609) *
               C31294 * C13454) *
              C1835 +
          (((C19472 + C19473) * C1090 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31650 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1089) +
            (C19474 + C19475) * C31637 - (C19476 + C19477) * C1091 -
            (C19478 + C19479) * C31609) *
               C31294 * C13453 +
           ((C19983 + C19982) * C1090 -
            ((C25518 + C25519) * C31650 + (C25520 + C25521) * C1089) +
            (C19985 + C19984) * C31637 - (C19987 + C19986) * C1091 -
            (C19989 + C19988) * C31609) *
               C31294 * C13454) *
              C1836 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C1089 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C31650 -
            (C19480 + C19481) * C1090 - (C19482 + C19483) * C31637 +
            (C19484 + C19485) * C1091 + (C19486 + C19487) * C31609) *
               C31294 * C13453 +
           ((C25944 + C25945) * C1089 + (C25946 + C25947) * C31650 -
            (C21419 + C21418) * C1090 - (C21421 + C21420) * C31637 +
            (C19049 * C1295 + C19047 * C1305 + C19050 * C2419 +
             C19048 * C2424) *
                C1091 +
            (C19049 * C1304 + C19047 * C1322 + C19050 * C2425 +
             C19048 * C2428) *
                C31609) *
               C31294 * C13454) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
                C13454) *
               C1835 -
           (((C25518 + C25519) * C31267 + (C25520 + C25521) * C1160) * C31294 *
                C13454 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C31294 * C13453) *
               C1836 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C31294 * C13453 +
            ((C25944 + C25945) * C1160 + (C25946 + C25947) * C31267) * C31294 *
                C13454) *
               C31619) *
              C31653 +
          ((((C25521 + C25520) * C1160 + (C25519 + C25518) * C31267) * C31294 *
                C13453 +
            ((C25948 + C25949) * C1160 + (C25950 + C25951) * C31267) * C31294 *
                C13454) *
               C1836 -
           (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
                C13454 +
            ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
                C13453) *
               C1835 -
           (((C25952 + C25953) * C31267 + (C25954 + C25955) * C1160) * C31294 *
                C13454 +
            ((C25947 + C25946) * C31267 + (C25945 + C25944) * C1160) * C31294 *
                C13453) *
               C31619) *
              C31641 +
          ((((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
                C13453 +
            ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
                C13454) *
               C1835 -
           (((C26418 + C26419) * C31267 + (C26420 + C26421) * C1160) * C31294 *
                C13454 +
            ((C25951 + C25950) * C31267 + (C25949 + C25948) * C1160) * C31294 *
                C13453) *
               C1836 +
           (((C25955 + C25954) * C1160 + (C25953 + C25952) * C31267) * C31294 *
                C13453 +
            ((C19049 * C5749 + C19047 * C5753 + C19050 * C6875 +
              C19048 * C6876) *
                 C1160 +
             (C19049 * C5752 + C19047 * C5758 + C19050 * C6877 +
              C19048 * C6878) *
                 C31267) *
                C31294 * C13454) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30299 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31272 -
             (C19084 + C19085) * C30295 - (C19086 + C19087) * C31280 +
             (C19088 + C19089) * C30305 + (C19090 + C19091) * C2901) *
                C31294 * C13453 +
            ((C24902 + C24903) * C30299 + (C24904 + C24905) * C31272 -
             (C19279 + C19278) * C30295 - (C19281 + C19280) * C31280 +
             (C19283 + C19282) * C30305 + (C19285 + C19284) * C2901) *
                C31294 * C13454) *
               C3298 +
           (((C19472 + C19473) * C30295 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31272 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30299) +
             (C19474 + C19475) * C31280 - (C19476 + C19477) * C30305 -
             (C19478 + C19479) * C2901) *
                C31294 * C13453 +
            ((C19983 + C19982) * C30295 -
             ((C25518 + C25519) * C31272 + (C25520 + C25521) * C30299) +
             (C19985 + C19984) * C31280 - (C19987 + C19986) * C30305 -
             (C19989 + C19988) * C2901) *
                C31294 * C13454) *
               C31417) *
              C31587 +
          ((((C19278 + C19279) * C30295 -
             ((C24905 + C24904) * C31272 + (C24903 + C24902) * C30299) +
             (C19280 + C19281) * C31280 - (C19282 + C19283) * C30305 -
             (C19284 + C19285) * C2901) *
                C31294 * C13453 +
            ((C19287 + C19286) * C30295 -
             ((C24906 + C24907) * C31272 + (C24908 + C24909) * C30299) +
             (C19289 + C19288) * C31280 - (C19291 + C19290) * C30305 -
             (C19293 + C19292) * C2901) *
                C31294 * C13454) *
               C3298 +
           (((C25521 + C25520) * C30299 + (C25519 + C25518) * C31272 -
             (C19982 + C19983) * C30295 - (C19984 + C19985) * C31280 +
             (C19986 + C19987) * C30305 + (C19988 + C19989) * C2901) *
                C31294 * C13453 +
            ((C25948 + C25949) * C30299 + (C25950 + C25951) * C31272 -
             (C20709 + C20708) * C30295 - (C20711 + C20710) * C31280 +
             (C19049 * C1298 + C19047 * C1311 + C19050 * C1303 +
              C19048 * C1320) *
                 C30305 +
             (C19049 * C1310 + C19047 * C1325 + C19050 * C1321 +
              C19048 * C1330) *
                 C2901) *
                C31294 * C13454) *
               C31417) *
              C31377)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C2641 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C2635 -
             (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
                C31294 * C13453 +
            ((C24902 + C24903) * C2641 + (C24904 + C24905) * C2635 -
             (C19279 + C19278) * C2642 - (C19281 + C19280) * C31277) *
                C31294 * C13454) *
               C31413 +
           (((C19472 + C19473) * C2642 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C2635 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C2641) +
             (C19474 + C19475) * C31277) *
                C31294 * C13453 +
            ((C19983 + C19982) * C2642 -
             ((C25518 + C25519) * C2635 + (C25520 + C25521) * C2641) +
             (C19985 + C19984) * C31277) *
                C31294 * C13454) *
               C31420 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C2641 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C2635 -
             (C19480 + C19481) * C2642 - (C19482 + C19483) * C31277) *
                C31294 * C13453 +
            ((C25944 + C25945) * C2641 + (C25946 + C25947) * C2635 -
             (C21419 + C21418) * C2642 - (C21421 + C21420) * C31277) *
                C31294 * C13454) *
               C3806) *
              C31587 +
          ((((C19278 + C19279) * C2642 -
             ((C24905 + C24904) * C2635 + (C24903 + C24902) * C2641) +
             (C19280 + C19281) * C31277) *
                C31294 * C13453 +
            ((C19287 + C19286) * C2642 -
             ((C24906 + C24907) * C2635 + (C24908 + C24909) * C2641) +
             (C19289 + C19288) * C31277) *
                C31294 * C13454) *
               C31413 +
           (((C25521 + C25520) * C2641 + (C25519 + C25518) * C2635 -
             (C19982 + C19983) * C2642 - (C19984 + C19985) * C31277) *
                C31294 * C13453 +
            ((C25948 + C25949) * C2641 + (C25950 + C25951) * C2635 -
             (C20709 + C20708) * C2642 - (C20711 + C20710) * C31277) *
                C31294 * C13454) *
               C31420 +
           (((C21418 + C21419) * C2642 -
             ((C25947 + C25946) * C2635 + (C25945 + C25944) * C2641) +
             (C21420 + C21421) * C31277) *
                C31294 * C13453 +
            ((C19049 * C1302 + C19047 * C1318 + C19050 * C6773 +
              C19048 * C6774) *
                 C2642 -
             ((C25952 + C25953) * C2635 + (C25954 + C25955) * C2641) +
             (C19049 * C1319 + C19047 * C1329 + C19050 * C6775 +
              C19048 * C6776) *
                 C31277) *
                C31294 * C13454) *
               C3806) *
              C31377)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C2641 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C2635 -
             (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
                C31294 * C13453 +
            ((C24902 + C24903) * C2641 + (C24904 + C24905) * C2635 -
             (C19279 + C19278) * C2642 - (C19281 + C19280) * C31277) *
                C31294 * C13454) *
               C3298 +
           (((C19472 + C19473) * C2642 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C2635 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C2641) +
             (C19474 + C19475) * C31277) *
                C31294 * C13453 +
            ((C19983 + C19982) * C2642 -
             ((C25518 + C25519) * C2635 + (C25520 + C25521) * C2641) +
             (C19985 + C19984) * C31277) *
                C31294 * C13454) *
               C31417) *
              C31653 +
          ((((C19278 + C19279) * C2642 -
             ((C24905 + C24904) * C2635 + (C24903 + C24902) * C2641) +
             (C19280 + C19281) * C31277) *
                C31294 * C13453 +
            ((C19287 + C19286) * C2642 -
             ((C24906 + C24907) * C2635 + (C24908 + C24909) * C2641) +
             (C19289 + C19288) * C31277) *
                C31294 * C13454) *
               C3298 +
           (((C25521 + C25520) * C2641 + (C25519 + C25518) * C2635 -
             (C19982 + C19983) * C2642 - (C19984 + C19985) * C31277) *
                C31294 * C13453 +
            ((C25948 + C25949) * C2641 + (C25950 + C25951) * C2635 -
             (C20709 + C20708) * C2642 - (C20711 + C20710) * C31277) *
                C31294 * C13454) *
               C31417) *
              C31641 +
          ((((C24909 + C24908) * C2641 + (C24907 + C24906) * C2635 -
             (C19286 + C19287) * C2642 - (C19288 + C19289) * C31277) *
                C31294 * C13453 +
            ((C25766 + C25767) * C2641 + (C25768 + C25769) * C2635 -
             (C20503 + C20502) * C2642 - (C20505 + C20504) * C31277) *
                C31294 * C13454) *
               C3298 +
           (((C20708 + C20709) * C2642 -
             ((C25951 + C25950) * C2635 + (C25949 + C25948) * C2641) +
             (C20710 + C20711) * C31277) *
                C31294 * C13453 +
            ((C19049 * C1714 + C19047 * C1718 + C19050 * C6657 +
              C19048 * C6658) *
                 C2642 -
             ((C26418 + C26419) * C2635 + (C26420 + C26421) * C2641) +
             (C19049 * C1719 + C19047 * C1723 + C19050 * C6659 +
              C19048 * C6660) *
                 C31277) *
                C31294 * C13454) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2533 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31659 -
            (C19084 + C19085) * C2534 - (C19086 + C19087) * C31652 +
            (C19088 + C19089) * C2535 + (C19090 + C19091) * C31639 -
            (C19092 + C19093) * C2536 - (C19094 + C19095) * C31620) *
               C31294 * C13453 +
           ((C24902 + C24903) * C2533 + (C24904 + C24905) * C31659 -
            (C19279 + C19278) * C2534 - (C19281 + C19280) * C31652 +
            (C19283 + C19282) * C2535 + (C19285 + C19284) * C31639 -
            (C19627 + C19626) * C2536 - (C19629 + C19628) * C31620) *
               C31294 * C13454) *
              C3298 +
          (((C19472 + C19473) * C2534 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31659 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C2533) +
            (C19474 + C19475) * C31652 - (C19476 + C19477) * C2535 -
            (C19478 + C19479) * C31639 + (C19768 + C19769) * C2536 +
            (C19770 + C19771) * C31620) *
               C31294 * C13453 +
           ((C19983 + C19982) * C2534 -
            ((C25518 + C25519) * C31659 + (C25520 + C25521) * C2533) +
            (C19985 + C19984) * C31652 - (C19987 + C19986) * C2535 -
            (C19989 + C19988) * C31639 +
            (C19049 * C938 + C19047 * C946 + C19050 * C2185 + C19048 * C2186) *
                C2536 +
            (C19049 * C947 + C19047 * C953 + C19050 * C2187 + C19048 * C2188) *
                C31620) *
               C31294 * C13454) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2641 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C2635 -
            (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
               C31294 * C13453 +
           ((C24902 + C24903) * C2641 + (C24904 + C24905) * C2635 -
            (C19279 + C19278) * C2642 - (C19281 + C19280) * C31277) *
               C31294 * C13454) *
              C31661 +
          (((C19472 + C19473) * C2642 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C2635 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C2641) +
            (C19474 + C19475) * C31277) *
               C31294 * C13453 +
           ((C19983 + C19982) * C2642 -
            ((C25518 + C25519) * C2635 + (C25520 + C25521) * C2641) +
            (C19985 + C19984) * C31277) *
               C31294 * C13454) *
              C31658 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C2641 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C2635 -
            (C19480 + C19481) * C2642 - (C19482 + C19483) * C31277) *
               C31294 * C13453 +
           ((C25944 + C25945) * C2641 + (C25946 + C25947) * C2635 -
            (C21419 + C21418) * C2642 - (C21421 + C21420) * C31277) *
               C31294 * C13454) *
              C31649 +
          (((C21560 + C21561) * C2642 -
            ((C19050 * C2028 + C19048 * C2036 + C19049 * C2025 +
              C19047 * C2035) *
                 C2635 +
             (C19050 * C2018 + C19048 * C2027 + C19049 * C2017 +
              C19047 * C2026) *
                 C2641) +
            (C21562 + C21563) * C31277) *
               C31294 * C13453 +
           ((C19049 * C2418 + C19047 * C2422 + C19050 * C10929 +
             C19048 * C10930) *
                C2642 -
            ((C27258 + C27259) * C2635 + (C27260 + C27261) * C2641) +
            (C19049 * C2423 + C19047 * C2427 + C19050 * C10931 +
             C19048 * C10932) *
                C31277) *
               C31294 * C13454) *
              C31632) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C30299 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31272 -
            (C19084 + C19085) * C30295 - (C19086 + C19087) * C31280 +
            (C19088 + C19089) * C30305 + (C19090 + C19091) * C2901) *
               C31294 * C13453 +
           ((C24902 + C24903) * C30299 + (C24904 + C24905) * C31272 -
            (C19279 + C19278) * C30295 - (C19281 + C19280) * C31280 +
            (C19283 + C19282) * C30305 + (C19285 + C19284) * C2901) *
               C31294 * C13454) *
              C31413 +
          (((C19472 + C19473) * C30295 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31272 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C30299) +
            (C19474 + C19475) * C31280 - (C19476 + C19477) * C30305 -
            (C19478 + C19479) * C2901) *
               C31294 * C13453 +
           ((C19983 + C19982) * C30295 -
            ((C25518 + C25519) * C31272 + (C25520 + C25521) * C30299) +
            (C19985 + C19984) * C31280 - (C19987 + C19986) * C30305 -
            (C19989 + C19988) * C2901) *
               C31294 * C13454) *
              C31420 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C30299 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C31272 -
            (C19480 + C19481) * C30295 - (C19482 + C19483) * C31280 +
            (C19484 + C19485) * C30305 + (C19486 + C19487) * C2901) *
               C31294 * C13453 +
           ((C25944 + C25945) * C30299 + (C25946 + C25947) * C31272 -
            (C21419 + C21418) * C30295 - (C21421 + C21420) * C31280 +
            (C19049 * C1295 + C19047 * C1305 + C19050 * C2419 +
             C19048 * C2424) *
                C30305 +
            (C19049 * C1304 + C19047 * C1322 + C19050 * C2425 +
             C19048 * C2428) *
                C2901) *
               C31294 * C13454) *
              C3806) *
         C31318) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2533 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31659 -
            (C19084 + C19085) * C2534 - (C19086 + C19087) * C31652 +
            (C19088 + C19089) * C2535 + (C19090 + C19091) * C31639 -
            (C19092 + C19093) * C2536 - (C19094 + C19095) * C31620) *
               C31294 * C13453 +
           ((C24902 + C24903) * C2533 + (C24904 + C24905) * C31659 -
            (C19279 + C19278) * C2534 - (C19281 + C19280) * C31652 +
            (C19283 + C19282) * C2535 + (C19285 + C19284) * C31639 -
            (C19627 + C19626) * C2536 - (C19629 + C19628) * C31620) *
               C31294 * C13454) *
              C3298 +
          (((C19472 + C19473) * C2534 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31659 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C2533) +
            (C19474 + C19475) * C31652 - (C19476 + C19477) * C2535 -
            (C19478 + C19479) * C31639 + (C19768 + C19769) * C2536 +
            (C19770 + C19771) * C31620) *
               C31294 * C13453 +
           ((C19983 + C19982) * C2534 -
            ((C25518 + C25519) * C31659 + (C25520 + C25521) * C2533) +
            (C19985 + C19984) * C31652 - (C19987 + C19986) * C2535 -
            (C19989 + C19988) * C31639 +
            (C19049 * C938 + C19047 * C946 + C19050 * C2185 + C19048 * C2186) *
                C2536 +
            (C19049 * C947 + C19047 * C953 + C19050 * C2187 + C19048 * C2188) *
                C31620) *
               C31294 * C13454) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C2641 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C2635 -
             (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
                C31294 * C13453 +
            ((C24902 + C24903) * C2641 + (C24904 + C24905) * C2635 -
             (C19279 + C19278) * C2642 - (C19281 + C19280) * C31277) *
                C31294 * C13454) *
               C3298 +
           (((C19472 + C19473) * C2642 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C2635 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C2641) +
             (C19474 + C19475) * C31277) *
                C31294 * C13453 +
            ((C19983 + C19982) * C2642 -
             ((C25518 + C25519) * C2635 + (C25520 + C25521) * C2641) +
             (C19985 + C19984) * C31277) *
                C31294 * C13454) *
               C31417) *
              C31653 +
          ((((C19278 + C19279) * C2642 -
             ((C24905 + C24904) * C2635 + (C24903 + C24902) * C2641) +
             (C19280 + C19281) * C31277) *
                C31294 * C13453 +
            ((C19287 + C19286) * C2642 -
             ((C24906 + C24907) * C2635 + (C24908 + C24909) * C2641) +
             (C19289 + C19288) * C31277) *
                C31294 * C13454) *
               C3298 +
           (((C25521 + C25520) * C2641 + (C25519 + C25518) * C2635 -
             (C19982 + C19983) * C2642 - (C19984 + C19985) * C31277) *
                C31294 * C13453 +
            ((C25948 + C25949) * C2641 + (C25950 + C25951) * C2635 -
             (C20709 + C20708) * C2642 - (C20711 + C20710) * C31277) *
                C31294 * C13454) *
               C31417) *
              C31641 +
          ((((C24909 + C24908) * C2641 + (C24907 + C24906) * C2635 -
             (C19286 + C19287) * C2642 - (C19288 + C19289) * C31277) *
                C31294 * C13453 +
            ((C25766 + C25767) * C2641 + (C25768 + C25769) * C2635 -
             (C20503 + C20502) * C2642 - (C20505 + C20504) * C31277) *
                C31294 * C13454) *
               C3298 +
           (((C20708 + C20709) * C2642 -
             ((C25951 + C25950) * C2635 + (C25949 + C25948) * C2641) +
             (C20710 + C20711) * C31277) *
                C31294 * C13453 +
            ((C19049 * C1714 + C19047 * C1718 + C19050 * C6657 +
              C19048 * C6658) *
                 C2642 -
             ((C26418 + C26419) * C2635 + (C26420 + C26421) * C2641) +
             (C19049 * C1719 + C19047 * C1723 + C19050 * C6659 +
              C19048 * C6660) *
                 C31277) *
                C31294 * C13454) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C665 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C659 -
            (C19084 + C19085) * C666 - (C19086 + C19087) * C660 +
            (C19088 + C19089) * C667 + (C19090 + C19091) * C661 -
            (C19092 + C19093) * C668 - (C19094 + C19095) * C31620) *
               C31294 * C13453 +
           ((C24902 + C24903) * C665 + (C24904 + C24905) * C659 -
            (C19279 + C19278) * C666 - (C19281 + C19280) * C660 +
            (C19283 + C19282) * C667 + (C19285 + C19284) * C661 -
            (C19627 + C19626) * C668 - (C19629 + C19628) * C31620) *
               C31294 * C13454) *
              C31330 * C31587 +
          (((C19278 + C19279) * C666 -
            ((C24905 + C24904) * C659 + (C24903 + C24902) * C665) +
            (C19280 + C19281) * C660 - (C19282 + C19283) * C667 -
            (C19284 + C19285) * C661 + (C19626 + C19627) * C668 +
            (C19628 + C19629) * C31620) *
               C31294 * C13453 +
           ((C19287 + C19286) * C666 -
            ((C24906 + C24907) * C659 + (C24908 + C24909) * C665) +
            (C19289 + C19288) * C660 - (C19291 + C19290) * C667 -
            (C19293 + C19292) * C661 +
            (C19049 * C304 + C19047 * C322 + C19050 * C1599 + C19048 * C1600) *
                C668 +
            (C19049 * C323 + C19047 * C334 + C19050 * C1601 + C19048 * C1602) *
                C31620) *
               C31294 * C13454) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C30289 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31569 -
            (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
               C31294 * C13453 +
           ((C24902 + C24903) * C30289 + (C24904 + C24905) * C31569 -
            (C19279 + C19278) * C30270 - (C19281 + C19280) * C31277) *
               C31294 * C13454) *
              C31330 * C1431 +
          (((C19278 + C19279) * C30270 -
            ((C24905 + C24904) * C31569 + (C24903 + C24902) * C30289) +
            (C19280 + C19281) * C31277) *
               C31294 * C13453 +
           ((C19287 + C19286) * C30270 -
            ((C24906 + C24907) * C31569 + (C24908 + C24909) * C30289) +
            (C19289 + C19288) * C31277) *
               C31294 * C13454) *
              C31330 * C1432 +
          (((C24909 + C24908) * C30289 + (C24907 + C24906) * C31569 -
            (C19286 + C19287) * C30270 - (C19288 + C19289) * C31277) *
               C31294 * C13453 +
           ((C25766 + C25767) * C30289 + (C25768 + C25769) * C31569 -
            (C20503 + C20502) * C30270 - (C20505 + C20504) * C31277) *
               C31294 * C13454) *
              C31330 * C1433 +
          (((C20502 + C20503) * C30270 -
            ((C25769 + C25768) * C31569 + (C25767 + C25766) * C30289) +
            (C20504 + C20505) * C31277) *
               C31294 * C13453 +
           ((C19049 * C1165 + C19047 * C1175 + C19050 * C6079 +
             C19048 * C6080) *
                C30270 -
            ((C25770 + C25771) * C31569 + (C25772 + C25773) * C30289) +
            (C19049 * C1176 + C19047 * C1183 + C19050 * C6081 +
             C19048 * C6082) *
                C31277) *
               C31294 * C13454) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C293 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C287 -
             (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
             (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
                C31294 * C13453 +
            ((C24902 + C24903) * C293 + (C24904 + C24905) * C287 -
             (C19279 + C19278) * C294 - (C19281 + C19280) * C288 +
             (C19283 + C19282) * C295 + (C19285 + C19284) * C31609) *
                C31294 * C13454) *
               C31588 +
           (((C19472 + C19473) * C294 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C287 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C293) +
             (C19474 + C19475) * C288 - (C19476 + C19477) * C295 -
             (C19478 + C19479) * C31609) *
                C31294 * C13453 +
            ((C19983 + C19982) * C294 -
             ((C25518 + C25519) * C287 + (C25520 + C25521) * C293) +
             (C19985 + C19984) * C288 - (C19987 + C19986) * C295 -
             (C19989 + C19988) * C31609) *
                C31294 * C13454) *
               C31417) *
              C31587 +
          ((((C19278 + C19279) * C294 -
             ((C24905 + C24904) * C287 + (C24903 + C24902) * C293) +
             (C19280 + C19281) * C288 - (C19282 + C19283) * C295 -
             (C19284 + C19285) * C31609) *
                C31294 * C13453 +
            ((C19287 + C19286) * C294 -
             ((C24906 + C24907) * C287 + (C24908 + C24909) * C293) +
             (C19289 + C19288) * C288 - (C19291 + C19290) * C295 -
             (C19293 + C19292) * C31609) *
                C31294 * C13454) *
               C31588 +
           (((C25521 + C25520) * C293 + (C25519 + C25518) * C287 -
             (C19982 + C19983) * C294 - (C19984 + C19985) * C288 +
             (C19986 + C19987) * C295 + (C19988 + C19989) * C31609) *
                C31294 * C13453 +
            ((C19049 * C1300 + C19047 * C1315 + C19050 * C1301 +
              C19048 * C1316) *
                 C293 +
             (C19049 * C1314 + C19047 * C1327 + C19050 * C1317 +
              C19048 * C1328) *
                 C287 -
             (C20709 + C20708) * C294 - (C20711 + C20710) * C288 +
             (C19049 * C1298 + C19047 * C1311 + C19050 * C1303 +
              C19048 * C1320) *
                 C295 +
             (C19049 * C1310 + C19047 * C1325 + C19050 * C1321 +
              C19048 * C1330) *
                 C31609) *
                C31294 * C13454) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
                C13454) *
               C31588 -
           (((C25518 + C25519) * C31267 + (C25520 + C25521) * C1160) * C31294 *
                C13454 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C31294 * C13453) *
               C31417) *
              C1431 +
          ((((C25521 + C25520) * C1160 + (C25519 + C25518) * C31267) * C31294 *
                C13453 +
            ((C25948 + C25949) * C1160 + (C25950 + C25951) * C31267) * C31294 *
                C13454) *
               C31417 -
           (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
                C13454 +
            ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
                C13453) *
               C31588) *
              C1432 +
          ((((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
                C13453 +
            ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
                C13454) *
               C31588 -
           (((C26418 + C26419) * C31267 + (C26420 + C26421) * C1160) * C31294 *
                C13454 +
            ((C25951 + C25950) * C31267 + (C25949 + C25948) * C1160) * C31294 *
                C13453) *
               C31417) *
              C1433 +
          ((((C26421 + C26420) * C1160 + (C26419 + C26418) * C31267) * C31294 *
                C13453 +
            ((C19049 * C5750 + C19047 * C5755 + C19050 * C5751 +
              C19048 * C5756) *
                 C1160 +
             (C19049 * C5754 + C19047 * C5759 + C19050 * C5757 +
              C19048 * C5760) *
                 C31267) *
                C31294 * C13454) *
               C31417 -
           (((C25770 + C25771) * C31267 + (C25772 + C25773) * C1160) * C31294 *
                C13454 +
            ((C25769 + C25768) * C31267 + (C25767 + C25766) * C1160) * C31294 *
                C13453) *
               C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C293 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C287 -
            (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
            (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
               C31294 * C13453 +
           ((C24902 + C24903) * C293 + (C24904 + C24905) * C287 -
            (C19279 + C19278) * C294 - (C19281 + C19280) * C288 +
            (C19283 + C19282) * C295 + (C19285 + C19284) * C31609) *
               C31294 * C13454) *
              C31330 * C31653 +
          (((C19278 + C19279) * C294 -
            ((C24905 + C24904) * C287 + (C24903 + C24902) * C293) +
            (C19280 + C19281) * C288 - (C19282 + C19283) * C295 -
            (C19284 + C19285) * C31609) *
               C31294 * C13453 +
           ((C19287 + C19286) * C294 -
            ((C24906 + C24907) * C287 + (C24908 + C24909) * C293) +
            (C19289 + C19288) * C288 - (C19291 + C19290) * C295 -
            (C19293 + C19292) * C31609) *
               C31294 * C13454) *
              C31330 * C31641 +
          (((C24909 + C24908) * C293 + (C24907 + C24906) * C287 -
            (C19286 + C19287) * C294 - (C19288 + C19289) * C288 +
            (C19290 + C19291) * C295 + (C19292 + C19293) * C31609) *
               C31294 * C13453 +
           ((C19049 * C1163 + C19047 * C1172 + C19050 * C1713 +
             C19048 * C1716) *
                C293 +
            (C19049 * C1171 + C19047 * C1181 + C19050 * C1717 +
             C19048 * C1722) *
                C287 -
            (C20503 + C20502) * C294 - (C20505 + C20504) * C288 +
            (C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
             C19048 * C1720) *
                C295 +
            (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
             C19048 * C1724) *
                C31609) *
               C31294 * C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
               C114 +
           (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
               C102 -
           (C19084 + C19085) * C115 - (C19086 + C19087) * C103 +
           (C19088 + C19089) * C116 + (C19090 + C19091) * C104 -
           (C19092 + C19093) * C117 - (C19094 + C19095) * C105 +
           (C19096 + C19097) * C118 + (C19098 + C19099) * C106) *
              C31294 * C13453 +
          ((C19049 * C297 + C19047 * C308 + C19050 * C935 + C19048 * C940) *
               C114 +
           (C19049 * C307 + C19047 * C326 + C19050 * C941 + C19048 * C950) *
               C102 -
           (C19279 + C19278) * C115 - (C19281 + C19280) * C103 +
           (C19283 + C19282) * C116 + (C19285 + C19284) * C104 -
           (C19627 + C19626) * C117 - (C19629 + C19628) * C105 +
           (C19049 * C300 + C19047 * C314 + C19050 * C939 + C19048 * C948) *
               C118 +
           (C19049 * C315 + C19047 * C330 + C19050 * C949 + C19048 * C954) *
               C106) *
              C31294 * C13454) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C293 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C287 -
            (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
            (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
               C31294 * C13453 +
           ((C24902 + C24903) * C293 + (C24904 + C24905) * C287 -
            (C19279 + C19278) * C294 - (C19281 + C19280) * C288 +
            (C19283 + C19282) * C295 + (C19285 + C19284) * C31609) *
               C31294 * C13454) *
              C31654 +
          (((C19472 + C19473) * C294 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C287 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C293) +
            (C19474 + C19475) * C288 - (C19476 + C19477) * C295 -
            (C19478 + C19479) * C31609) *
               C31294 * C13453 +
           ((C19983 + C19982) * C294 -
            ((C19050 * C1308 + C19048 * C1324 + C19049 * C941 + C19047 * C950) *
                 C287 +
             (C19050 * C1297 + C19048 * C1309 + C19049 * C935 + C19047 * C940) *
                 C293) +
            (C19985 + C19984) * C288 - (C19987 + C19986) * C295 -
            (C19989 + C19988) * C31609) *
               C31294 * C13454) *
              C31643 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C293 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C287 -
            (C19480 + C19481) * C294 - (C19482 + C19483) * C288 +
            (C19484 + C19485) * C295 + (C19486 + C19487) * C31609) *
               C31294 * C13453 +
           ((C19049 * C1297 + C19047 * C1309 + C19050 * C2417 +
             C19048 * C2420) *
                C293 +
            (C19049 * C1308 + C19047 * C1324 + C19050 * C2421 +
             C19048 * C2426) *
                C287 -
            (C21419 + C21418) * C294 - (C21421 + C21420) * C288 +
            (C19049 * C1295 + C19047 * C1305 + C19050 * C2419 +
             C19048 * C2424) *
                C295 +
            (C19049 * C1304 + C19047 * C1322 + C19050 * C2425 +
             C19048 * C2428) *
                C31609) *
               C31294 * C13454) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1089 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31650 -
            (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
            (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
               C31294 * C13453 +
           ((C24902 + C24903) * C1089 + (C24904 + C24905) * C31650 -
            (C19279 + C19278) * C1090 - (C19281 + C19280) * C31637 +
            (C19283 + C19282) * C1091 + (C19285 + C19284) * C31609) *
               C31294 * C13454) *
              C31330 * C1086 +
          (((C19278 + C19279) * C1090 -
            ((C24905 + C24904) * C31650 + (C24903 + C24902) * C1089) +
            (C19280 + C19281) * C31637 - (C19282 + C19283) * C1091 -
            (C19284 + C19285) * C31609) *
               C31294 * C13453 +
           ((C19287 + C19286) * C1090 -
            ((C24906 + C24907) * C31650 + (C24908 + C24909) * C1089) +
            (C19289 + C19288) * C31637 - (C19291 + C19290) * C1091 -
            (C19293 + C19292) * C31609) *
               C31294 * C13454) *
              C31330 * C1087 +
          (((C24909 + C24908) * C1089 + (C24907 + C24906) * C31650 -
            (C19286 + C19287) * C1090 - (C19288 + C19289) * C31637 +
            (C19290 + C19291) * C1091 + (C19292 + C19293) * C31609) *
               C31294 * C13453 +
           ((C19049 * C1163 + C19047 * C1172 + C19050 * C1713 +
             C19048 * C1716) *
                C1089 +
            (C19049 * C1171 + C19047 * C1181 + C19050 * C1717 +
             C19048 * C1722) *
                C31650 -
            (C20503 + C20502) * C1090 - (C20505 + C20504) * C31637 +
            (C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
             C19048 * C1720) *
                C1091 +
            (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
             C19048 * C1724) *
                C31609) *
               C31294 * C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1160 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31267) *
               C31294 * C13453 +
           ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
               C13454) *
              C31330 * C1155 -
          (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
               C13454 +
           ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
               C13453) *
              C31330 * C1156 +
          (((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
               C13453 +
           ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
               C13454) *
              C31330 * C1157 -
          (((C25770 + C25771) * C31267 + (C25772 + C25773) * C1160) * C31294 *
               C13454 +
           ((C25769 + C25768) * C31267 + (C25767 + C25766) * C1160) * C31294 *
               C13453) *
              C31330 * C1158 +
          (((C25773 + C25772) * C1160 + (C25771 + C25770) * C31267) * C31294 *
               C13453 +
           ((C19049 * C5603 + C19047 * C5606 + C19050 * C6203 +
             C19048 * C6204) *
                C1160 +
            (C19049 * C5605 + C19047 * C5609 + C19050 * C6205 +
             C19048 * C6206) *
                C31267) *
               C31294 * C13454) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C31294 * C13453 +
            ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
                C13454) *
               C31654 -
           (((C25518 + C25519) * C31267 + (C25520 + C25521) * C1160) * C31294 *
                C13454 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C31294 * C13453) *
               C31643 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C31294 * C13453 +
            ((C25944 + C25945) * C1160 + (C25946 + C25947) * C31267) * C31294 *
                C13454) *
               C31619) *
              C1086 +
          ((((C25521 + C25520) * C1160 + (C25519 + C25518) * C31267) * C31294 *
                C13453 +
            ((C25948 + C25949) * C1160 + (C25950 + C25951) * C31267) * C31294 *
                C13454) *
               C31643 -
           (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
                C13454 +
            ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
                C13453) *
               C31654 -
           (((C25952 + C25953) * C31267 + (C25954 + C25955) * C1160) * C31294 *
                C13454 +
            ((C25947 + C25946) * C31267 + (C25945 + C25944) * C1160) * C31294 *
                C13453) *
               C31619) *
              C1087 +
          ((((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
                C13453 +
            ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
                C13454) *
               C31654 -
           (((C19050 * C5752 + C19048 * C5758 + C19049 * C1717 +
              C19047 * C1722) *
                 C31267 +
             (C19050 * C5749 + C19048 * C5753 + C19049 * C1713 +
              C19047 * C1716) *
                 C1160) *
                C31294 * C13454 +
            ((C25951 + C25950) * C31267 + (C25949 + C25948) * C1160) * C31294 *
                C13453) *
               C31643 +
           (((C25955 + C25954) * C1160 + (C25953 + C25952) * C31267) * C31294 *
                C13453 +
            ((C19049 * C5749 + C19047 * C5753 + C19050 * C6875 +
              C19048 * C6876) *
                 C1160 +
             (C19049 * C5752 + C19047 * C5758 + C19050 * C6877 +
              C19048 * C6878) *
                 C31267) *
                C31294 * C13454) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C665 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C659 -
            (C19084 + C19085) * C666 - (C19086 + C19087) * C660 +
            (C19088 + C19089) * C667 + (C19090 + C19091) * C661 -
            (C19092 + C19093) * C668 - (C19094 + C19095) * C31620) *
               C31294 * C13453 +
           ((C24902 + C24903) * C665 + (C24904 + C24905) * C659 -
            (C19279 + C19278) * C666 - (C19281 + C19280) * C660 +
            (C19283 + C19282) * C667 + (C19285 + C19284) * C661 -
            (C19627 + C19626) * C668 - (C19629 + C19628) * C31620) *
               C31294 * C13454) *
              C31588 +
          (((C19472 + C19473) * C666 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C659 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C665) +
            (C19474 + C19475) * C660 - (C19476 + C19477) * C667 -
            (C19478 + C19479) * C661 + (C19768 + C19769) * C668 +
            (C19770 + C19771) * C31620) *
               C31294 * C13453 +
           ((C19983 + C19982) * C666 -
            ((C19050 * C1308 + C19048 * C1324 + C19049 * C941 + C19047 * C950) *
                 C659 +
             (C19050 * C1297 + C19048 * C1309 + C19049 * C935 + C19047 * C940) *
                 C665) +
            (C19985 + C19984) * C660 - (C19987 + C19986) * C667 -
            (C19989 + C19988) * C661 +
            (C19049 * C938 + C19047 * C946 + C19050 * C2185 + C19048 * C2186) *
                C668 +
            (C19049 * C947 + C19047 * C953 + C19050 * C2187 + C19048 * C2188) *
                C31620) *
               C31294 * C13454) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30289 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31569 -
             (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
                C31294 * C13453 +
            ((C24902 + C24903) * C30289 + (C24904 + C24905) * C31569 -
             (C19279 + C19278) * C30270 - (C19281 + C19280) * C31277) *
                C31294 * C13454) *
               C31588 +
           (((C19472 + C19473) * C30270 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31569 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30289) +
             (C19474 + C19475) * C31277) *
                C31294 * C13453 +
            ((C19983 + C19982) * C30270 -
             ((C25518 + C25519) * C31569 + (C25520 + C25521) * C30289) +
             (C19985 + C19984) * C31277) *
                C31294 * C13454) *
               C31417) *
              C1086 +
          ((((C19278 + C19279) * C30270 -
             ((C24905 + C24904) * C31569 + (C24903 + C24902) * C30289) +
             (C19280 + C19281) * C31277) *
                C31294 * C13453 +
            ((C19287 + C19286) * C30270 -
             ((C24906 + C24907) * C31569 + (C24908 + C24909) * C30289) +
             (C19289 + C19288) * C31277) *
                C31294 * C13454) *
               C31588 +
           (((C25521 + C25520) * C30289 + (C25519 + C25518) * C31569 -
             (C19982 + C19983) * C30270 - (C19984 + C19985) * C31277) *
                C31294 * C13453 +
            ((C25948 + C25949) * C30289 + (C25950 + C25951) * C31569 -
             (C20709 + C20708) * C30270 - (C20711 + C20710) * C31277) *
                C31294 * C13454) *
               C31417) *
              C1087 +
          ((((C24909 + C24908) * C30289 + (C24907 + C24906) * C31569 -
             (C19286 + C19287) * C30270 - (C19288 + C19289) * C31277) *
                C31294 * C13453 +
            ((C25766 + C25767) * C30289 + (C25768 + C25769) * C31569 -
             (C20503 + C20502) * C30270 - (C20505 + C20504) * C31277) *
                C31294 * C13454) *
               C31588 +
           (((C20708 + C20709) * C30270 -
             ((C25951 + C25950) * C31569 + (C25949 + C25948) * C30289) +
             (C20710 + C20711) * C31277) *
                C31294 * C13453 +
            ((C19049 * C1714 + C19047 * C1718 + C19050 * C6657 +
              C19048 * C6658) *
                 C30270 -
             ((C19050 * C5752 + C19048 * C5758 + C19049 * C1717 +
               C19047 * C1722) *
                  C31569 +
              (C19050 * C5749 + C19048 * C5753 + C19049 * C1713 +
               C19047 * C1716) *
                  C30289) +
             (C19049 * C1719 + C19047 * C1723 + C19050 * C6659 +
              C19048 * C6660) *
                 C31277) *
                C31294 * C13454) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
               C114 +
           (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
               C102 -
           (C19084 + C19085) * C115 - (C19086 + C19087) * C103 +
           (C19088 + C19089) * C116 + (C19090 + C19091) * C104 -
           (C19092 + C19093) * C117 - (C19094 + C19095) * C105 +
           (C19096 + C19097) * C118 + (C19098 + C19099) * C106) *
              C31294 * C13453 +
          ((C19049 * C297 + C19047 * C308 + C19050 * C935 + C19048 * C940) *
               C114 +
           (C19049 * C307 + C19047 * C326 + C19050 * C941 + C19048 * C950) *
               C102 -
           (C19279 + C19278) * C115 - (C19281 + C19280) * C103 +
           (C19283 + C19282) * C116 + (C19285 + C19284) * C104 -
           (C19627 + C19626) * C117 - (C19629 + C19628) * C105 +
           (C19049 * C300 + C19047 * C314 + C19050 * C939 + C19048 * C948) *
               C118 +
           (C19049 * C315 + C19047 * C330 + C19050 * C949 + C19048 * C954) *
               C106) *
              C31294 * C13454) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C293 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C287 -
            (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
            (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
               C31294 * C13453 +
           ((C24902 + C24903) * C293 + (C24904 + C24905) * C287 -
            (C19279 + C19278) * C294 - (C19281 + C19280) * C288 +
            (C19283 + C19282) * C295 + (C19285 + C19284) * C31609) *
               C31294 * C13454) *
              C31330 * C31653 +
          (((C19278 + C19279) * C294 -
            ((C24905 + C24904) * C287 + (C24903 + C24902) * C293) +
            (C19280 + C19281) * C288 - (C19282 + C19283) * C295 -
            (C19284 + C19285) * C31609) *
               C31294 * C13453 +
           ((C19287 + C19286) * C294 -
            ((C24906 + C24907) * C287 + (C24908 + C24909) * C293) +
            (C19289 + C19288) * C288 - (C19291 + C19290) * C295 -
            (C19293 + C19292) * C31609) *
               C31294 * C13454) *
              C31330 * C31641 +
          (((C24909 + C24908) * C293 + (C24907 + C24906) * C287 -
            (C19286 + C19287) * C294 - (C19288 + C19289) * C288 +
            (C19290 + C19291) * C295 + (C19292 + C19293) * C31609) *
               C31294 * C13453 +
           ((C19049 * C1163 + C19047 * C1172 + C19050 * C1713 +
             C19048 * C1716) *
                C293 +
            (C19049 * C1171 + C19047 * C1181 + C19050 * C1717 +
             C19048 * C1722) *
                C287 -
            (C20503 + C20502) * C294 - (C20505 + C20504) * C288 +
            (C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
             C19048 * C1720) *
                C295 +
            (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
             C19048 * C1724) *
                C31609) *
               C31294 * C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1089 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31650 -
            (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
            (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
               C31294 * C13453 +
           ((C24902 + C24903) * C1089 + (C24904 + C24905) * C31650 -
            (C19279 + C19278) * C1090 - (C19281 + C19280) * C31637 +
            (C19283 + C19282) * C1091 + (C19285 + C19284) * C31609) *
               C31294 * C13454) *
              C31330 * C1086 +
          (((C19278 + C19279) * C1090 -
            ((C24905 + C24904) * C31650 + (C24903 + C24902) * C1089) +
            (C19280 + C19281) * C31637 - (C19282 + C19283) * C1091 -
            (C19284 + C19285) * C31609) *
               C31294 * C13453 +
           ((C19287 + C19286) * C1090 -
            ((C24906 + C24907) * C31650 + (C24908 + C24909) * C1089) +
            (C19289 + C19288) * C31637 - (C19291 + C19290) * C1091 -
            (C19293 + C19292) * C31609) *
               C31294 * C13454) *
              C31330 * C1087 +
          (((C24909 + C24908) * C1089 + (C24907 + C24906) * C31650 -
            (C19286 + C19287) * C1090 - (C19288 + C19289) * C31637 +
            (C19290 + C19291) * C1091 + (C19292 + C19293) * C31609) *
               C31294 * C13453 +
           ((C19049 * C1163 + C19047 * C1172 + C19050 * C1713 +
             C19048 * C1716) *
                C1089 +
            (C19049 * C1171 + C19047 * C1181 + C19050 * C1717 +
             C19048 * C1722) *
                C31650 -
            (C20503 + C20502) * C1090 - (C20505 + C20504) * C31637 +
            (C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
             C19048 * C1720) *
                C1091 +
            (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
             C19048 * C1724) *
                C31609) *
               C31294 * C13454) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1160 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31267) *
               C31294 * C13453 +
           ((C24902 + C24903) * C1160 + (C24904 + C24905) * C31267) * C31294 *
               C13454) *
              C31330 * C1155 -
          (((C24906 + C24907) * C31267 + (C24908 + C24909) * C1160) * C31294 *
               C13454 +
           ((C24905 + C24904) * C31267 + (C24903 + C24902) * C1160) * C31294 *
               C13453) *
              C31330 * C1156 +
          (((C24909 + C24908) * C1160 + (C24907 + C24906) * C31267) * C31294 *
               C13453 +
           ((C25766 + C25767) * C1160 + (C25768 + C25769) * C31267) * C31294 *
               C13454) *
              C31330 * C1157 -
          (((C25770 + C25771) * C31267 + (C25772 + C25773) * C1160) * C31294 *
               C13454 +
           ((C25769 + C25768) * C31267 + (C25767 + C25766) * C1160) * C31294 *
               C13453) *
              C31330 * C1158 +
          (((C25773 + C25772) * C1160 + (C25771 + C25770) * C31267) * C31294 *
               C13453 +
           ((C19049 * C5603 + C19047 * C5606 + C19050 * C6203 +
             C19048 * C6204) *
                C1160 +
            (C19049 * C5605 + C19047 * C5609 + C19050 * C6205 +
             C19048 * C6206) *
                C31267) *
               C31294 * C13454) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30299 +
            (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
            C169 * C31280 + C170 * C30305 + C171 * C2901) *
               C31294 * C4760 +
           (C7404 + C7405 - C7406 - C7407 + C7408 + C7409) * C31294 * C4761 +
           C7427 * C4762) *
              C31330 * C31373 +
          ((C7406 - (C7405 + C7404) + C7407 - C7408 - C7409) * C31294 * C4760 +
           (C7412 - (C7411 + C7410) + C7413 - C7414 - C7415) * C31294 * C4761 +
           (C7416 - (C7417 + C7418) + C7419 - C7420 - C7421) * C31294 * C4762) *
              C31330 * C31380 +
          (C7427 * C4760 +
           (C7418 + C7417 - C7416 - C7419 + C7420 + C7421) * C31294 * C4761 +
           (C5628 * C30299 + C5629 * C31272 - C5924 * C30295 - C5925 * C31280 +
            (C113 * C1166 + C31509 * C1177) * C30305 +
            (C113 * C1178 + C31509 * C1184) * C2901) *
               C31294 * C4762) *
              C31330 * C2904)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30299 +
            (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
            C169 * C31280 + C170 * C30305 + C171 * C2901) *
               C107 +
           (C168 * C30299 + C169 * C31272 - C170 * C30295 - C171 * C31280 +
            C172 * C30305 + C173 * C2901) *
               C108 +
           (C170 * C30299 + C171 * C31272 - C172 * C30295 - C173 * C31280 +
            C174 * C30305 + C175 * C2901) *
               C109) *
              C31498 * C31330 * C31373 +
          ((C361 * C30295 -
            ((C113 * C307 + C31509 * C326) * C31272 +
             (C113 * C297 + C31509 * C308) * C30299) +
            C362 * C31280 - C363 * C30305 - C364 * C2901) *
               C107 +
           (C363 * C30295 - (C362 * C31272 + C361 * C30299) + C364 * C31280 -
            C365 * C30305 - C366 * C2901) *
               C108 +
           (C365 * C30295 - (C364 * C31272 + C363 * C30299) + C366 * C31280 -
            C678 * C30305 - C679 * C2901) *
               C109) *
              C31498 * C31330 * C31380 +
          (((C113 * C301 + C31509 * C316) * C30299 +
            (C113 * C317 + C31509 * C331) * C31272 - C367 * C30295 -
            C368 * C31280 + C369 * C30305 + C370 * C2901) *
               C107 +
           (C367 * C30299 + C368 * C31272 - C369 * C30295 - C370 * C31280 +
            C371 * C30305 + C372 * C2901) *
               C108 +
           (C369 * C30299 + C370 * C31272 - C371 * C30295 - C372 * C31280 +
            (C113 * C305 + C31509 * C324) * C30305 +
            (C113 * C325 + C31509 * C335) * C2901) *
               C109) *
              C31498 * C31330 * C2904)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C30299 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31272 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C30295 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31280 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C30305 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C2901) *
              C31294 * C31498 * C31330 * C31373 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C30295 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31272 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C30299) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C31280 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C30305 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C2901) *
              C31294 * C31498 * C31330 * C31380 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C30299 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C31272 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C30295 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C31280 +
           (C9304 * C303 + C9301 * C320 + C9305 * C1298 + C9302 * C1311 +
            C9306 * C1303 + C9303 * C1320) *
               C30305 +
           (C9304 * C321 + C9301 * C333 + C9305 * C1310 + C9302 * C1325 +
            C9306 * C1321 + C9303 * C1330) *
               C2901) *
              C31294 * C31498 * C31330 * C2904)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C31294 * C4760 +
            (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
               C31588 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C31294 * C4760 +
            (C7278 - (C7279 + C7280) + C7281) * C31294 * C4761 +
            C7739 * C4762) *
               C31417) *
              C31373 +
          (((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
            (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 +
            C7131 * C4762) *
               C31588 +
           ((C7280 + C7279 - C7278 - C7281) * C31294 * C4760 +
            (C7284 + C7283 - C7282 - C7285) * C31294 * C4761 +
            (C7733 + C7734 - C7735 - C7736) * C31294 * C4762) *
               C31417) *
              C31380 +
          ((C7130 * C4760 + (C7118 + C7117 - C7116 - C7119) * C31294 * C4761 +
            (C7120 + C7121 - C7122 - C7123) * C31294 * C4762) *
               C31588 +
           (C7739 * C4760 + (C7735 - (C7734 + C7733) + C7736) * C31294 * C4761 +
            ((C113 * C6079 + C31509 * C6080) * C2642 -
             (C6214 * C2635 + C6215 * C2641) +
             (C113 * C6081 + C31509 * C6082) * C31277) *
                C31294 * C4762) *
               C31417) *
              C2904)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
                C109) *
               C31498 * C31588 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31277) *
                C109) *
               C31498 * C31417) *
              C31373 +
          (((C361 * C2642 -
             ((C113 * C307 + C31509 * C326) * C2635 +
              (C113 * C297 + C31509 * C308) * C2641) +
             C362 * C31277) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
                C109) *
               C31498 * C31588 +
           (((C113 * C935 + C31509 * C940) * C2641 +
             (C113 * C941 + C31509 * C950) * C2635 - C968 * C2642 -
             C969 * C31277) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31277) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31277) *
                C109) *
               C31498 * C31417) *
              C31380 +
          ((((C113 * C301 + C31509 * C316) * C2641 +
             (C113 * C317 + C31509 * C331) * C2635 - C367 * C2642 -
             C368 * C31277) *
                C107 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31277) *
                C108 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31277) *
                C109) *
               C31498 * C31588 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C31509 * C1327) * C2635 +
              (C113 * C1300 + C31509 * C1315) * C2641) +
             C1613 * C31277) *
                C107 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C31277) *
                C108 +
            ((C113 * C1599 + C31509 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C31509 * C1602) * C31277) *
                C109) *
               C31498 * C31417) *
              C2904)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C2641 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C2635 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C2642 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31277) *
               C31294 * C31498 * C31588 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C2642 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C2635 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C2641) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31277) *
               C31294 * C31498 * C31417) *
              C31373 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C2642 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C2635 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C2641) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31277) *
               C31294 * C31498 * C31588 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C2641 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C2635 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C2642 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31277) *
               C31294 * C31498 * C31417) *
              C31380 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C2641 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C2635 -
            (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
             C9304 * C302 + C9301 * C318) *
                C2642 -
            (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
             C9304 * C319 + C9301 * C332) *
                C31277) *
               C31294 * C31498 * C31588 +
           ((C9304 * C1299 + C9301 * C1313 + C9305 * C1302 + C9302 * C1318 +
             C9306 * C6773 + C9303 * C6774) *
                C2642 -
            ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
              C9304 * C1314 + C9301 * C1327) *
                 C2635 +
             (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
              C9304 * C1300 + C9301 * C1315) *
                 C2641) +
            (C9304 * C1312 + C9301 * C1326 + C9305 * C1319 + C9302 * C1329 +
             C9306 * C6775 + C9303 * C6776) *
                C31277) *
               C31294 * C31498 * C31417) *
              C2904)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C2533 +
                (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
                C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
                C173 * C31620) *
                   C107 +
               (C168 * C2533 + C169 * C31659 - C170 * C2534 - C171 * C31652 +
                C172 * C2535 + C173 * C31639 - C174 * C2536 - C175 * C31620) *
                   C108 +
               (C170 * C2533 + C171 * C31659 - C172 * C2534 - C173 * C31652 +
                C174 * C2535 + C175 * C31639 - C176 * C2536 - C177 * C31620) *
                   C109) *
                  C31498 * C31330 * C2531 +
              ((C361 * C2534 -
                ((C113 * C307 + C31509 * C326) * C31659 +
                 (C113 * C297 + C31509 * C308) * C2533) +
                C362 * C31652 - C363 * C2535 - C364 * C31639 + C365 * C2536 +
                C366 * C31620) *
                   C107 +
               (C363 * C2534 - (C362 * C31659 + C361 * C2533) + C364 * C31652 -
                C365 * C2535 - C366 * C31639 + C678 * C2536 + C679 * C31620) *
                   C108 +
               (C365 * C2534 - (C364 * C31659 + C363 * C2533) + C366 * C31652 -
                C678 * C2535 - C679 * C31639 +
                (C113 * C669 + C31509 * C670) * C2536 +
                (C113 * C671 + C31509 * C672) * C31620) *
                   C109) *
                  C31498 * C31330 * C31377) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C2641 +
                (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
                C169 * C31277) *
                   C107 +
               (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                   C108 +
               (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
                   C109) *
                  C31498 * C31330 * C31660 +
              ((C361 * C2642 -
                ((C113 * C307 + C31509 * C326) * C2635 +
                 (C113 * C297 + C31509 * C308) * C2641) +
                C362 * C31277) *
                   C107 +
               (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
                   C108 +
               (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
                   C109) *
                  C31498 * C31330 * C31656 +
              (((C113 * C301 + C31509 * C316) * C2641 +
                (C113 * C317 + C31509 * C331) * C2635 - C367 * C2642 -
                C368 * C31277) *
                   C107 +
               (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31277) *
                   C108 +
               (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31277) *
                   C109) *
                  C31498 * C31330 * C31646 +
              ((C1450 * C2642 -
                ((C113 * C1171 + C31509 * C1181) * C2635 +
                 (C113 * C1163 + C31509 * C1172) * C2641) +
                C1451 * C31277) *
                   C107 +
               (C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) +
                C1453 * C31277) *
                   C108 +
               ((C113 * C1437 + C31509 * C1438) * C2642 -
                (C1453 * C2635 + C1452 * C2641) +
                (C113 * C1439 + C31509 * C1440) * C31277) *
                   C109) *
                  C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
                C109) *
               C31498 * C31654 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31277) *
                C109) *
               C31498 * C31643 +
           (((C113 * C490 + C31509 * C505) * C2641 +
             (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
             C557 * C31277) *
                C107 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31277) *
                C108 +
            (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C31277) *
                C109) *
               C31498 * C31619) *
              C2531 +
          (((C361 * C2642 -
             ((C113 * C307 + C31509 * C326) * C2635 +
              (C113 * C297 + C31509 * C308) * C2641) +
             C362 * C31277) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
                C109) *
               C31498 * C31654 +
           (((C113 * C935 + C31509 * C940) * C2641 +
             (C113 * C941 + C31509 * C950) * C2635 - C968 * C2642 -
             C969 * C31277) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31277) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31277) *
                C109) *
               C31498 * C31643 +
           ((C2198 * C2642 -
             ((C113 * C1308 + C31509 * C1324) * C2635 +
              (C113 * C1297 + C31509 * C1309) * C2641) +
             C2199 * C31277) *
                C107 +
            (C2200 * C2642 - (C2199 * C2635 + C2198 * C2641) + C2201 * C31277) *
                C108 +
            ((C113 * C2185 + C31509 * C2186) * C2642 -
             (C2201 * C2635 + C2200 * C2641) +
             (C113 * C2187 + C31509 * C2188) * C31277) *
                C109) *
               C31498 * C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C31294 * C4760 +
           (C6994 + C6995 - C6996 - C6997 + C6998 + C6999 - C7000 - C7001) *
               C31294 * C4761 +
           (C7002 + C7003 - C7004 - C7005 + C7006 + C7007 - C7008 - C7009) *
               C31294 * C4762) *
              C31330 * C2531 +
          ((C6996 - (C6995 + C6994) + C6997 - C6998 - C6999 + C7000 + C7001) *
               C31294 * C4760 +
           (C7004 - (C7003 + C7002) + C7005 - C7006 - C7007 + C7008 + C7009) *
               C31294 * C4761 +
           (C1450 * C2534 - (C4902 * C31659 + C4903 * C2533) + C1451 * C31652 -
            C1452 * C2535 - C1453 * C31639 +
            (C113 * C1437 + C31509 * C1438) * C2536 +
            (C113 * C1439 + C31509 * C1440) * C31620) *
               C31294 * C4762) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2641 +
            (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
            C169 * C31277) *
               C31294 * C4760 +
           (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
              C31330 * C31660 +
          ((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
           (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 + C7131 * C4762) *
              C31330 * C31656 +
          (C7130 * C4760 + (C7118 + C7117 - C7116 - C7119) * C31294 * C4761 +
           (C7120 + C7121 - C7122 - C7123) * C31294 * C4762) *
              C31330 * C31646 +
          (C7131 * C4760 + (C7122 - (C7121 + C7120) + C7123) * C31294 * C4761 +
           ((C113 * C5899 + C31509 * C5900) * C2642 -
            (C5630 * C2635 + C5631 * C2641) +
            (C113 * C5901 + C31509 * C5902) * C31277) *
               C31294 * C4762) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C31294 * C4760 +
            (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
               C31654 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C31294 * C4760 +
            (C7278 - (C7279 + C7280) + C7281) * C31294 * C4761 +
            (C7282 - (C7283 + C7284) + C7285) * C31294 * C4762) *
               C31643 +
           (((C113 * C490 + C31509 * C505) * C2641 +
             (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
             C557 * C31277) *
                C31294 * C4760 +
            (C7286 + C7287 - C7288 - C7289) * C31294 * C4761 +
            (C7290 + C7291 - C7292 - C7293) * C31294 * C4762) *
               C31619) *
              C2531 +
          (((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
            (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 +
            C7131 * C4762) *
               C31654 +
           ((C7280 + C7279 - C7278 - C7281) * C31294 * C4760 +
            (C7284 + C7283 - C7282 - C7285) * C31294 * C4761 +
            (C5787 * C2641 + C5788 * C2635 - C6099 * C2642 - C6100 * C31277) *
                C31294 * C4762) *
               C31643 +
           ((C7288 - (C7287 + C7286) + C7289) * C31294 * C4760 +
            (C7292 - (C7291 + C7290) + C7293) * C31294 * C4761 +
            ((C113 * C6657 + C31509 * C6658) * C2642 -
             (C5789 * C2635 + C5790 * C2641) +
             (C113 * C6659 + C31509 * C6660) * C31277) *
                C31294 * C4762) *
               C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C2533 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31659 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C2534 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31652 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C2535 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31639 -
           (C9306 * C493 + C9303 * C511 + C9305 * C488 + C9302 * C501 +
            C9304 * C122 + C9301 * C132) *
               C2536 -
           (C9306 * C512 + C9303 * C523 + C9305 * C502 + C9302 * C518 +
            C9304 * C133 + C9301 * C143) *
               C31620) *
              C31294 * C31498 * C31330 * C2531 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C2534 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31659 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C2533) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C31652 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C2535 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C31639 +
           (C9304 * C299 + C9301 * C312 + C9305 * C938 + C9302 * C946 +
            C9306 * C2185 + C9303 * C2186) *
               C2536 +
           (C9304 * C313 + C9301 * C329 + C9305 * C947 + C9302 * C953 +
            C9306 * C2187 + C9303 * C2188) *
               C31620) *
              C31294 * C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C2641 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C2635 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C2642 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31277) *
              C31294 * C31498 * C31330 * C31660 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C2642 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C2635 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C2641) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C31277) *
              C31294 * C31498 * C31330 * C31656 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C2641 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C2635 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C2642 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C31277) *
              C31294 * C31498 * C31330 * C31646 +
          ((C9304 * C1162 + C9301 * C1170 + C9305 * C1714 + C9302 * C1718 +
            C9306 * C6657 + C9303 * C6658) *
               C2642 -
           ((C9306 * C5752 + C9303 * C5758 + C9305 * C1717 + C9302 * C1722 +
             C9304 * C1171 + C9301 * C1181) *
                C2635 +
            (C9306 * C5749 + C9303 * C5753 + C9305 * C1713 + C9302 * C1716 +
             C9304 * C1163 + C9301 * C1172) *
                C2641) +
           (C9304 * C1169 + C9301 * C1180 + C9305 * C1719 + C9302 * C1723 +
            C9306 * C6659 + C9303 * C6660) *
               C31277) *
              C31294 * C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C2641 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C2635 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C2642 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31277) *
               C31294 * C31498 * C31654 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C2642 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C2635 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C2641) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31277) *
               C31294 * C31498 * C31643 +
           ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
             C9306 * C2018 + C9303 * C2027) *
                C2641 +
            (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
             C9306 * C2028 + C9303 * C2036) *
                C2635 -
            (C9306 * C2019 + C9303 * C2029 + C9305 * C2016 + C9302 * C2024 +
             C9304 * C491 + C9301 * C507) *
                C2642 -
            (C9306 * C2030 + C9303 * C2037 + C9305 * C2023 + C9302 * C2034 +
             C9304 * C508 + C9301 * C521) *
                C31277) *
               C31294 * C31498 * C31619) *
              C2531 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C2642 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C2635 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C2641) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31277) *
               C31294 * C31498 * C31654 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C2641 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C2635 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C2642 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31277) *
               C31294 * C31498 * C31643 +
           ((C9304 * C1296 + C9301 * C1307 + C9305 * C2418 + C9302 * C2422 +
             C9306 * C10929 + C9303 * C10930) *
                C2642 -
            ((C9306 * C6505 + C9303 * C6509 + C9305 * C2421 + C9302 * C2426 +
              C9304 * C1308 + C9301 * C1324) *
                 C2635 +
             (C9306 * C6500 + C9303 * C6504 + C9305 * C2417 + C9302 * C2420 +
              C9304 * C1297 + C9301 * C1309) *
                 C2641) +
            (C9304 * C1306 + C9301 * C1323 + C9305 * C2423 + C9302 * C2427 +
             C9306 * C10931 + C9303 * C10932) *
                C31277) *
               C31294 * C31498 * C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30299 +
             (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
             C169 * C31280 + C170 * C30305 + C171 * C2901) *
                C31294 * C4760 +
            (C7404 + C7405 - C7406 - C7407 + C7408 + C7409) * C31294 * C4761 +
            C7427 * C4762) *
               C31588 +
           ((C550 * C30295 -
             ((C113 * C496 + C31509 * C515) * C31272 +
              (C113 * C486 + C31509 * C497) * C30299) +
             C551 * C31280 - C552 * C30305 - C553 * C2901) *
                C31294 * C4760 +
            (C7574 - (C7575 + C7576) + C7577 - C7578 - C7579) * C31294 * C4761 +
            (C7580 - (C7581 + C7582) + C7583 - C7584 - C7585) * C31294 *
                C4762) *
               C31417) *
              C2531 +
          (((C7406 - (C7405 + C7404) + C7407 - C7408 - C7409) * C31294 * C4760 +
            (C7412 - (C7411 + C7410) + C7413 - C7414 - C7415) * C31294 * C4761 +
            (C7416 - (C7417 + C7418) + C7419 - C7420 - C7421) * C31294 *
                C4762) *
               C31588 +
           ((C7576 + C7575 - C7574 - C7577 + C7578 + C7579) * C31294 * C4760 +
            (C7582 + C7581 - C7580 - C7583 + C7584 + C7585) * C31294 * C4761 +
            (C5787 * C30299 + C5788 * C31272 - C6099 * C30295 - C6100 * C31280 +
             (C113 * C1715 + C31509 * C1720) * C30305 +
             (C113 * C1721 + C31509 * C1724) * C2901) *
                C31294 * C4762) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30299 +
             (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
             C169 * C31280 + C170 * C30305 + C171 * C2901) *
                C107 +
            (C168 * C30299 + C169 * C31272 - C170 * C30295 - C171 * C31280 +
             C172 * C30305 + C173 * C2901) *
                C108 +
            (C170 * C30299 + C171 * C31272 - C172 * C30295 - C173 * C31280 +
             C174 * C30305 + C175 * C2901) *
                C109) *
               C31498 * C31588 +
           ((C550 * C30295 -
             ((C113 * C496 + C31509 * C515) * C31272 +
              (C113 * C486 + C31509 * C497) * C30299) +
             C551 * C31280 - C552 * C30305 - C553 * C2901) *
                C107 +
            (C552 * C30295 - (C551 * C31272 + C550 * C30299) + C553 * C31280 -
             C554 * C30305 - C555 * C2901) *
                C108 +
            (C554 * C30295 - (C553 * C31272 + C552 * C30299) + C555 * C31280 -
             C788 * C30305 - C789 * C2901) *
                C109) *
               C31498 * C31417) *
              C2531 +
          (((C361 * C30295 -
             ((C113 * C307 + C31509 * C326) * C31272 +
              (C113 * C297 + C31509 * C308) * C30299) +
             C362 * C31280 - C363 * C30305 - C364 * C2901) *
                C107 +
            (C363 * C30295 - (C362 * C31272 + C361 * C30299) + C364 * C31280 -
             C365 * C30305 - C366 * C2901) *
                C108 +
            (C365 * C30295 - (C364 * C31272 + C363 * C30299) + C366 * C31280 -
             C678 * C30305 - C679 * C2901) *
                C109) *
               C31498 * C31588 +
           (((C113 * C935 + C31509 * C940) * C30299 +
             (C113 * C941 + C31509 * C950) * C31272 - C968 * C30295 -
             C969 * C31280 + C970 * C30305 + C971 * C2901) *
                C107 +
            (C968 * C30299 + C969 * C31272 - C970 * C30295 - C971 * C31280 +
             C972 * C30305 + C973 * C2901) *
                C108 +
            (C970 * C30299 + C971 * C31272 - C972 * C30295 - C973 * C31280 +
             (C113 * C939 + C31509 * C948) * C30305 +
             (C113 * C949 + C31509 * C954) * C2901) *
                C109) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C30299 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31272 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C30295 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31280 +
            (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
             C9306 * C492 + C9303 * C509) *
                C30305 +
            (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
             C9306 * C510 + C9303 * C522) *
                C2901) *
               C31294 * C31498 * C31588 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C30295 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C31272 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C30299) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31280 -
            (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
             C9304 * C487 + C9301 * C499) *
                C30305 -
            (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
             C9304 * C500 + C9301 * C517) *
                C2901) *
               C31294 * C31498 * C31417) *
              C2531 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C30295 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C31272 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C30299) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31280 -
            (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
             C9304 * C298 + C9301 * C310) *
                C30305 -
            (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
             C9304 * C311 + C9301 * C328) *
                C2901) *
               C31294 * C31498 * C31588 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C30299 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31272 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C30295 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31280 +
            (C9304 * C937 + C9301 * C944 + C9305 * C1295 + C9302 * C1305 +
             C9306 * C2419 + C9303 * C2424) *
                C30305 +
            (C9304 * C945 + C9301 * C952 + C9305 * C1304 + C9302 * C1322 +
             C9306 * C2425 + C9303 * C2428) *
                C2901) *
               C31294 * C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2641 +
            (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
            C169 * C31277) *
               C107 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) * C108 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
               C109) *
              C31498 * C31330 * C31660 +
          ((C361 * C2642 -
            ((C113 * C307 + C31509 * C326) * C2635 +
             (C113 * C297 + C31509 * C308) * C2641) +
            C362 * C31277) *
               C107 +
           (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
               C108 +
           (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
               C109) *
              C31498 * C31330 * C31656 +
          (((C113 * C301 + C31509 * C316) * C2641 +
            (C113 * C317 + C31509 * C331) * C2635 - C367 * C2642 -
            C368 * C31277) *
               C107 +
           (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31277) * C108 +
           (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31277) *
               C109) *
              C31498 * C31330 * C31646 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C31509 * C1181) * C2635 +
             (C113 * C1163 + C31509 * C1172) * C2641) +
            C1451 * C31277) *
               C107 +
           (C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C31277) *
               C108 +
           ((C113 * C1437 + C31509 * C1438) * C2642 -
            (C1453 * C2635 + C1452 * C2641) +
            (C113 * C1439 + C31509 * C1440) * C31277) *
               C109) *
              C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C107 +
           (C168 * C2533 + C169 * C31659 - C170 * C2534 - C171 * C31652 +
            C172 * C2535 + C173 * C31639 - C174 * C2536 - C175 * C31620) *
               C108 +
           (C170 * C2533 + C171 * C31659 - C172 * C2534 - C173 * C31652 +
            C174 * C2535 + C175 * C31639 - C176 * C2536 - C177 * C31620) *
               C109) *
              C31498 * C31330 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C31509 * C326) * C31659 +
             (C113 * C297 + C31509 * C308) * C2533) +
            C362 * C31652 - C363 * C2535 - C364 * C31639 + C365 * C2536 +
            C366 * C31620) *
               C107 +
           (C363 * C2534 - (C362 * C31659 + C361 * C2533) + C364 * C31652 -
            C365 * C2535 - C366 * C31639 + C678 * C2536 + C679 * C31620) *
               C108 +
           (C365 * C2534 - (C364 * C31659 + C363 * C2533) + C366 * C31652 -
            C678 * C2535 - C679 * C31639 +
            (C113 * C669 + C31509 * C670) * C2536 +
            (C113 * C671 + C31509 * C672) * C31620) *
               C109) *
              C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C31294 * C4760 +
           (C6994 + C6995 - C6996 - C6997 + C6998 + C6999 - C7000 - C7001) *
               C31294 * C4761 +
           (C7002 + C7003 - C7004 - C7005 + C7006 + C7007 - C7008 - C7009) *
               C31294 * C4762) *
              C31330 * C2531 +
          ((C6996 - (C6995 + C6994) + C6997 - C6998 - C6999 + C7000 + C7001) *
               C31294 * C4760 +
           (C7004 - (C7003 + C7002) + C7005 - C7006 - C7007 + C7008 + C7009) *
               C31294 * C4761 +
           (C1450 * C2534 - (C4902 * C31659 + C4903 * C2533) + C1451 * C31652 -
            C1452 * C2535 - C1453 * C31639 +
            (C113 * C1437 + C31509 * C1438) * C2536 +
            (C113 * C1439 + C31509 * C1440) * C31620) *
               C31294 * C4762) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2641 +
            (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
            C169 * C31277) *
               C31294 * C4760 +
           (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
              C31330 * C31660 +
          ((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
           (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 + C7131 * C4762) *
              C31330 * C31656 +
          (C7130 * C4760 + (C7118 + C7117 - C7116 - C7119) * C31294 * C4761 +
           (C7120 + C7121 - C7122 - C7123) * C31294 * C4762) *
              C31330 * C31646 +
          (C7131 * C4760 + (C7122 - (C7121 + C7120) + C7123) * C31294 * C4761 +
           ((C113 * C5899 + C31509 * C5900) * C2642 -
            (C5630 * C2635 + C5631 * C2641) +
            (C113 * C5901 + C31509 * C5902) * C31277) *
               C31294 * C4762) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C2533 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31659 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C2534 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31652 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C2535 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31639 -
           (C9306 * C493 + C9303 * C511 + C9305 * C488 + C9302 * C501 +
            C9304 * C122 + C9301 * C132) *
               C2536 -
           (C9306 * C512 + C9303 * C523 + C9305 * C502 + C9302 * C518 +
            C9304 * C133 + C9301 * C143) *
               C31620) *
              C31294 * C31498 * C31330 * C2531 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C2534 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31659 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C2533) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C31652 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C2535 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C31639 +
           (C9304 * C299 + C9301 * C312 + C9305 * C938 + C9302 * C946 +
            C9306 * C2185 + C9303 * C2186) *
               C2536 +
           (C9304 * C313 + C9301 * C329 + C9305 * C947 + C9302 * C953 +
            C9306 * C2187 + C9303 * C2188) *
               C31620) *
              C31294 * C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C2641 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C2635 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C2642 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31277) *
              C31294 * C31498 * C31330 * C31660 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C2642 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C2635 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C2641) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C31277) *
              C31294 * C31498 * C31330 * C31656 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C2641 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C2635 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C2642 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C31277) *
              C31294 * C31498 * C31330 * C31646 +
          ((C9304 * C1162 + C9301 * C1170 + C9305 * C1714 + C9302 * C1718 +
            C9306 * C6657 + C9303 * C6658) *
               C2642 -
           ((C9306 * C5752 + C9303 * C5758 + C9305 * C1717 + C9302 * C1722 +
             C9304 * C1171 + C9301 * C1181) *
                C2635 +
            (C9306 * C5749 + C9303 * C5753 + C9305 * C1713 + C9302 * C1716 +
             C9304 * C1163 + C9301 * C1172) *
                C2641) +
           (C9304 * C1169 + C9301 * C1180 + C9305 * C1719 + C9302 * C1723 +
            C9306 * C6659 + C9303 * C6660) *
               C31277) *
              C31294 * C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C31294 * C4760 +
            (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
               C3298 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C31294 * C4760 +
            (C6084 - (C6085 + C6086) + C6087) * C31294 * C4761 +
            C6105 * C4762) *
               C31417) *
              C31373 +
          (((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
            (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 +
            C5933 * C4762) *
               C3298 +
           ((C6086 + C6085 - C6084 - C6087) * C31294 * C4760 +
            (C6090 + C6089 - C6088 - C6091) * C31294 * C4761 +
            (C6092 + C6093 - C6102 - C6103) * C31294 * C4762) *
               C31417) *
              C31380 +
          ((C5932 * C4760 + (C5914 + C5913 - C5912 - C5915) * C31294 * C4761 +
            (C5916 + C5917 - C5928 - C5929) * C31294 * C4762) *
               C3298 +
           (C6105 * C4760 + (C6102 - (C6093 + C6092) + C6103) * C31294 * C4761 +
            ((C113 * C6079 + C31509 * C6080) * C30270 -
             (C6214 * C31569 + C6215 * C30289) +
             (C113 * C6081 + C31509 * C6082) * C31277) *
                C31294 * C4762) *
               C31417) *
              C2904)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C107 +
            (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                C108 +
            (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
                C109) *
               C31498 * C3298 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C107 +
            (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                C108 +
            (C554 * C30270 - (C553 * C31569 + C552 * C30289) + C555 * C31277) *
                C109) *
               C31498 * C31417) *
              C31373 +
          (((C361 * C30270 -
             ((C113 * C307 + C31509 * C326) * C31569 +
              (C113 * C297 + C31509 * C308) * C30289) +
             C362 * C31277) *
                C107 +
            (C363 * C30270 - (C362 * C31569 + C361 * C30289) + C364 * C31277) *
                C108 +
            (C365 * C30270 - (C364 * C31569 + C363 * C30289) + C366 * C31277) *
                C109) *
               C31498 * C3298 +
           (((C113 * C935 + C31509 * C940) * C30289 +
             (C113 * C941 + C31509 * C950) * C31569 - C968 * C30270 -
             C969 * C31277) *
                C107 +
            (C968 * C30289 + C969 * C31569 - C970 * C30270 - C971 * C31277) *
                C108 +
            (C970 * C30289 + C971 * C31569 - C972 * C30270 - C973 * C31277) *
                C109) *
               C31498 * C31417) *
              C31380 +
          ((((C113 * C301 + C31509 * C316) * C30289 +
             (C113 * C317 + C31509 * C331) * C31569 - C367 * C30270 -
             C368 * C31277) *
                C107 +
            (C367 * C30289 + C368 * C31569 - C369 * C30270 - C370 * C31277) *
                C108 +
            (C369 * C30289 + C370 * C31569 - C371 * C30270 - C372 * C31277) *
                C109) *
               C31498 * C3298 +
           ((C1612 * C30270 -
             ((C113 * C1314 + C31509 * C1327) * C31569 +
              (C113 * C1300 + C31509 * C1315) * C30289) +
             C1613 * C31277) *
                C107 +
            (C1614 * C30270 - (C1613 * C31569 + C1612 * C30289) +
             C1615 * C31277) *
                C108 +
            ((C113 * C1599 + C31509 * C1600) * C30270 -
             (C1615 * C31569 + C1614 * C30289) +
             (C113 * C1601 + C31509 * C1602) * C31277) *
                C109) *
               C31498 * C31417) *
              C2904)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C30289 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31569 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C30270 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31277) *
               C31294 * C31498 * C3298 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C30270 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C31569 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C30289) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31277) *
               C31294 * C31498 * C31417) *
              C31373 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C30270 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C31569 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C30289) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31277) *
               C31294 * C31498 * C3298 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C30289 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31569 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C30270 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31277) *
               C31294 * C31498 * C31417) *
              C31380 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C30289 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C31569 -
            (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
             C9304 * C302 + C9301 * C318) *
                C30270 -
            (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
             C9304 * C319 + C9301 * C332) *
                C31277) *
               C31294 * C31498 * C3298 +
           ((C9304 * C1299 + C9301 * C1313 + C9305 * C1302 + C9302 * C1318 +
             C9306 * C6773 + C9303 * C6774) *
                C30270 -
            ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
              C9304 * C1314 + C9301 * C1327) *
                 C31569 +
             (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
              C9304 * C1300 + C9301 * C1315) *
                 C30289) +
            (C9304 * C1312 + C9301 * C1326 + C9305 * C1319 + C9302 * C1329 +
             C9306 * C6775 + C9303 * C6776) *
                C31277) *
               C31294 * C31498 * C31417) *
              C2904)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C31413 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31420 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C3806) *
              C31373 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C31420 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C31413 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C3806) *
              C31380 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C31413 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31420 +
           (C5801 * C4760 + (C5799 + C5798) * C31294 * C4761 +
            ((C113 * C5751 + C31509 * C5756) * C1160 +
             (C113 * C5757 + C31509 * C5760) * C31267) *
                C31294 * C4762) *
               C3806) *
              C2904)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C31413 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31420 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C107 +
            (C556 * C1160 + C557 * C31267) * C108 +
            (C558 * C1160 + C559 * C31267) * C109) *
               C31498 * C3806) *
              C31373 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31420 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C31413 -
           ((C2201 * C31267 + C2200 * C1160) * C109 +
            (C2199 * C31267 + C2198 * C1160) * C108 +
            ((C113 * C1308 + C31509 * C1324) * C31267 +
             (C113 * C1297 + C31509 * C1309) * C1160) *
                C107) *
               C31498 * C3806) *
              C31380 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C31413 -
           ((C1615 * C31267 + C1614 * C1160) * C109 +
            (C1613 * C31267 + C1612 * C1160) * C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C31420 +
           (((C113 * C1301 + C31509 * C1316) * C1160 +
             (C113 * C1317 + C31509 * C1328) * C31267) *
                C107 +
            ((C113 * C1302 + C31509 * C1318) * C1160 +
             (C113 * C1319 + C31509 * C1329) * C31267) *
                C108 +
            ((C113 * C1303 + C31509 * C1320) * C1160 +
             (C113 * C1321 + C31509 * C1330) * C31267) *
                C109) *
               C31498 * C3806) *
              C2904)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1160 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31267) *
               C31294 * C31498 * C31413 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31267 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1160) *
               C31294 * C31498 * C31420 +
           ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
             C9306 * C2018 + C9303 * C2027) *
                C1160 +
            (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
             C9306 * C2028 + C9303 * C2036) *
                C31267) *
               C31294 * C31498 * C3806) *
              C31373 +
          (((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1160 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31267) *
               C31294 * C31498 * C31420 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31267 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1160) *
               C31294 * C31498 * C31413 -
           ((C9306 * C6505 + C9303 * C6509 + C9305 * C2421 + C9302 * C2426 +
             C9304 * C1308 + C9301 * C1324) *
                C31267 +
            (C9306 * C6500 + C9303 * C6504 + C9305 * C2417 + C9302 * C2420 +
             C9304 * C1297 + C9301 * C1309) *
                C1160) *
               C31294 * C31498 * C3806) *
              C31380 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C1160 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C31267) *
               C31294 * C31498 * C31413 -
           ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
             C9304 * C1314 + C9301 * C1327) *
                C31267 +
            (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
             C9304 * C1300 + C9301 * C1315) *
                C1160) *
               C31294 * C31498 * C31420 +
           ((C9304 * C1301 + C9301 * C1316 + C9305 * C6499 + C9302 * C6503 +
             C9306 * C6501 + C9303 * C6506) *
                C1160 +
            (C9304 * C1317 + C9301 * C1328 + C9305 * C6502 + C9302 * C6508 +
             C9306 * C6507 + C9303 * C6510) *
                C31267) *
               C31294 * C31498 * C3806) *
              C2904)) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31509 * C126) * C1089 +
                 (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
                 C169 * C31637 + C170 * C1091 + C171 * C31609) *
                    C107 +
                (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
                 C172 * C1091 + C173 * C31609) *
                    C108 +
                (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
                 C174 * C1091 + C175 * C31609) *
                    C109) *
                   C31498 * C3298 +
               ((C550 * C1090 -
                 ((C113 * C496 + C31509 * C515) * C31650 +
                  (C113 * C486 + C31509 * C497) * C1089) +
                 C551 * C31637 - C552 * C1091 - C553 * C31609) *
                    C107 +
                (C552 * C1090 - (C551 * C31650 + C550 * C1089) + C553 * C31637 -
                 C554 * C1091 - C555 * C31609) *
                    C108 +
                (C554 * C1090 - (C553 * C31650 + C552 * C1089) + C555 * C31637 -
                 C788 * C1091 - C789 * C31609) *
                    C109) *
                   C31498 * C31417) *
                  C2531 +
              (((C361 * C1090 -
                 ((C113 * C307 + C31509 * C326) * C31650 +
                  (C113 * C297 + C31509 * C308) * C1089) +
                 C362 * C31637 - C363 * C1091 - C364 * C31609) *
                    C107 +
                (C363 * C1090 - (C362 * C31650 + C361 * C1089) + C364 * C31637 -
                 C365 * C1091 - C366 * C31609) *
                    C108 +
                (C365 * C1090 - (C364 * C31650 + C363 * C1089) + C366 * C31637 -
                 C678 * C1091 - C679 * C31609) *
                    C109) *
                   C31498 * C3298 +
               (((C113 * C935 + C31509 * C940) * C1089 +
                 (C113 * C941 + C31509 * C950) * C31650 - C968 * C1090 -
                 C969 * C31637 + C970 * C1091 + C971 * C31609) *
                    C107 +
                (C968 * C1089 + C969 * C31650 - C970 * C1090 - C971 * C31637 +
                 C972 * C1091 + C973 * C31609) *
                    C108 +
                (C970 * C1089 + C971 * C31650 - C972 * C1090 - C973 * C31637 +
                 (C113 * C939 + C31509 * C948) * C1091 +
                 (C113 * C949 + C31509 * C954) * C31609) *
                    C109) *
                   C31498 * C31417) *
                  C31377) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31509 * C126) * C1160 +
                 (C113 * C127 + C31509 * C140) * C31267) *
                    C107 +
                (C168 * C1160 + C169 * C31267) * C108 +
                (C170 * C1160 + C171 * C31267) * C109) *
                   C31498 * C3298 -
               ((C553 * C31267 + C552 * C1160) * C109 +
                (C551 * C31267 + C550 * C1160) * C108 +
                ((C113 * C496 + C31509 * C515) * C31267 +
                 (C113 * C486 + C31509 * C497) * C1160) *
                    C107) *
                   C31498 * C31417) *
                  C31660 +
              ((((C113 * C935 + C31509 * C940) * C1160 +
                 (C113 * C941 + C31509 * C950) * C31267) *
                    C107 +
                (C968 * C1160 + C969 * C31267) * C108 +
                (C970 * C1160 + C971 * C31267) * C109) *
                   C31498 * C31417 -
               ((C364 * C31267 + C363 * C1160) * C109 +
                (C362 * C31267 + C361 * C1160) * C108 +
                ((C113 * C307 + C31509 * C326) * C31267 +
                 (C113 * C297 + C31509 * C308) * C1160) *
                    C107) *
                   C31498 * C3298) *
                  C31656 +
              ((((C113 * C301 + C31509 * C316) * C1160 +
                 (C113 * C317 + C31509 * C331) * C31267) *
                    C107 +
                (C367 * C1160 + C368 * C31267) * C108 +
                (C369 * C1160 + C370 * C31267) * C109) *
                   C31498 * C3298 -
               ((C1615 * C31267 + C1614 * C1160) * C109 +
                (C1613 * C31267 + C1612 * C1160) * C108 +
                ((C113 * C1314 + C31509 * C1327) * C31267 +
                 (C113 * C1300 + C31509 * C1315) * C1160) *
                    C107) *
                   C31498 * C31417) *
                  C31646 +
              ((((C113 * C1713 + C31509 * C1716) * C1160 +
                 (C113 * C1717 + C31509 * C1722) * C31267) *
                    C107 +
                ((C113 * C1714 + C31509 * C1718) * C1160 +
                 (C113 * C1719 + C31509 * C1723) * C31267) *
                    C108 +
                ((C113 * C1715 + C31509 * C1720) * C1160 +
                 (C113 * C1721 + C31509 * C1724) * C31267) *
                    C109) *
                   C31498 * C31417 -
               ((C1453 * C31267 + C1452 * C1160) * C109 +
                (C1451 * C31267 + C1450 * C1160) * C108 +
                ((C113 * C1171 + C31509 * C1181) * C31267 +
                 (C113 * C1163 + C31509 * C1172) * C1160) *
                    C107) *
                   C31498 * C3298) *
                  C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C31661 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31658 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C107 +
            (C556 * C1160 + C557 * C31267) * C108 +
            (C558 * C1160 + C559 * C31267) * C109) *
               C31498 * C31649 -
           ((C2319 * C31267 + C2318 * C1160) * C109 +
            (C2317 * C31267 + C2316 * C1160) * C108 +
            ((C113 * C2025 + C31509 * C2035) * C31267 +
             (C113 * C2017 + C31509 * C2026) * C1160) *
                C107) *
               C31498 * C31632) *
              C2531 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31658 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C31661 -
           ((C2201 * C31267 + C2200 * C1160) * C109 +
            (C2199 * C31267 + C2198 * C1160) * C108 +
            ((C113 * C1308 + C31509 * C1324) * C31267 +
             (C113 * C1297 + C31509 * C1309) * C1160) *
                C107) *
               C31498 * C31649 +
           (((C113 * C2417 + C31509 * C2420) * C1160 +
             (C113 * C2421 + C31509 * C2426) * C31267) *
                C107 +
            ((C113 * C2418 + C31509 * C2422) * C1160 +
             (C113 * C2423 + C31509 * C2427) * C31267) *
                C108 +
            ((C113 * C2419 + C31509 * C2424) * C1160 +
             (C113 * C2425 + C31509 * C2428) * C31267) *
                C109) *
               C31498 * C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C31294 * C4760 +
            (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
            C5541 * C4762) *
               C3298 +
           ((C550 * C1090 -
             ((C113 * C496 + C31509 * C515) * C31650 +
              (C113 * C486 + C31509 * C497) * C1089) +
             C551 * C31637 - C552 * C1091 - C553 * C31609) *
                C31294 * C4760 +
            (C8630 - (C8631 + C8632) + C8633 - C8634 - C8635) * C31294 * C4761 +
            (C8636 - (C8637 + C8638) + C8639 - C8640 - C8641) * C31294 *
                C4762) *
               C31417) *
              C2531 +
          (((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C31294 * C4760 +
            (C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C31294 * C4761 +
            (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C31294 *
                C4762) *
               C3298 +
           ((C8632 + C8631 - C8630 - C8633 + C8634 + C8635) * C31294 * C4760 +
            (C8638 + C8637 - C8636 - C8639 + C8640 + C8641) * C31294 * C4761 +
            (C5787 * C1089 + C5788 * C31650 - C6099 * C1090 - C6100 * C31637 +
             (C113 * C1715 + C31509 * C1720) * C1091 +
             (C113 * C1721 + C31509 * C1724) * C31609) *
                C31294 * C4762) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C3298 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31417) *
              C31660 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C31417 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C3298) *
              C31656 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C3298 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31417) *
              C31646 +
          ((C6213 * C4760 + (C6217 + C6216) * C31294 * C4761 +
            ((C113 * C6203 + C31509 * C6204) * C1160 +
             (C113 * C6205 + C31509 * C6206) * C31267) *
                C31294 * C4762) *
               C31417 -
           ((C5636 + C5637) * C31294 * C4762 +
            (C5635 + C5634) * C31294 * C4761 + C5633 * C4760) *
               C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C31661 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31658 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C31649 -
           ((C6892 + C6893) * C31294 * C4762 +
            (C6894 + C6895) * C31294 * C4761 +
            ((C113 * C2025 + C31509 * C2035) * C31267 +
             (C113 * C2017 + C31509 * C2026) * C1160) *
                C31294 * C4760) *
               C31632) *
              C2531 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C31658 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C31661 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C31649 +
           ((C6895 + C6894) * C31294 * C4760 +
            (C6893 + C6892) * C31294 * C4761 +
            ((C113 * C6875 + C31509 * C6876) * C1160 +
             (C113 * C6877 + C31509 * C6878) * C31267) *
                C31294 * C4762) *
               C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1089 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31650 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C1090 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31637 +
            (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
             C9306 * C492 + C9303 * C509) *
                C1091 +
            (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
             C9306 * C510 + C9303 * C522) *
                C31609) *
               C31294 * C31498 * C3298 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C1090 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C31650 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C1089) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31637 -
            (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
             C9304 * C487 + C9301 * C499) *
                C1091 -
            (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
             C9304 * C500 + C9301 * C517) *
                C31609) *
               C31294 * C31498 * C31417) *
              C2531 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C1090 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C31650 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C1089) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31637 -
            (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
             C9304 * C298 + C9301 * C310) *
                C1091 -
            (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
             C9304 * C311 + C9301 * C328) *
                C31609) *
               C31294 * C31498 * C3298 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1089 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31650 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C1090 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31637 +
            (C9304 * C937 + C9301 * C944 + C9305 * C1295 + C9302 * C1305 +
             C9306 * C2419 + C9303 * C2424) *
                C1091 +
            (C9304 * C945 + C9301 * C952 + C9305 * C1304 + C9302 * C1322 +
             C9306 * C2425 + C9303 * C2428) *
                C31609) *
               C31294 * C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1160 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31267) *
               C31294 * C31498 * C3298 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31267 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1160) *
               C31294 * C31498 * C31417) *
              C31660 +
          (((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1160 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31267) *
               C31294 * C31498 * C31417 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31267 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1160) *
               C31294 * C31498 * C3298) *
              C31656 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C1160 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C31267) *
               C31294 * C31498 * C3298 -
           ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
             C9304 * C1314 + C9301 * C1327) *
                C31267 +
            (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
             C9304 * C1300 + C9301 * C1315) *
                C1160) *
               C31294 * C31498 * C31417) *
              C31646 +
          (((C9304 * C1713 + C9301 * C1716 + C9305 * C5749 + C9302 * C5753 +
             C9306 * C6875 + C9303 * C6876) *
                C1160 +
            (C9304 * C1717 + C9301 * C1722 + C9305 * C5752 + C9302 * C5758 +
             C9306 * C6877 + C9303 * C6878) *
                C31267) *
               C31294 * C31498 * C31417 -
           ((C9306 * C5752 + C9303 * C5758 + C9305 * C1717 + C9302 * C1722 +
             C9304 * C1171 + C9301 * C1181) *
                C31267 +
            (C9306 * C5749 + C9303 * C5753 + C9305 * C1713 + C9302 * C1716 +
             C9304 * C1163 + C9301 * C1172) *
                C1160) *
               C31294 * C31498 * C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1160 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31267) *
               C31294 * C31498 * C31661 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31267 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1160) *
               C31294 * C31498 * C31658 +
           ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
             C9306 * C2018 + C9303 * C2027) *
                C1160 +
            (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
             C9306 * C2028 + C9303 * C2036) *
                C31267) *
               C31294 * C31498 * C31649 -
           ((C9306 * C10777 + C9303 * C10781 + C9305 * C2028 + C9302 * C2036 +
             C9304 * C2025 + C9301 * C2035) *
                C31267 +
            (C9306 * C10775 + C9303 * C10778 + C9305 * C2018 + C9302 * C2027 +
             C9304 * C2017 + C9301 * C2026) *
                C1160) *
               C31294 * C31498 * C31632) *
              C2531 +
          (((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1160 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31267) *
               C31294 * C31498 * C31658 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31267 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1160) *
               C31294 * C31498 * C31661 -
           ((C9306 * C6505 + C9303 * C6509 + C9305 * C2421 + C9302 * C2426 +
             C9304 * C1308 + C9301 * C1324) *
                C31267 +
            (C9306 * C6500 + C9303 * C6504 + C9305 * C2417 + C9302 * C2420 +
             C9304 * C1297 + C9301 * C1309) *
                C1160) *
               C31294 * C31498 * C31649 +
           ((C9304 * C2417 + C9301 * C2420 + C9305 * C6500 + C9302 * C6504 +
             C9306 * C11133 + C9303 * C11134) *
                C1160 +
            (C9304 * C2421 + C9301 * C2426 + C9305 * C6505 + C9302 * C6509 +
             C9306 * C11135 + C9303 * C11136) *
                C31267) *
               C31294 * C31498 * C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C31294 * C4760 +
            (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
               C31413 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C31294 * C4760 +
            (C6084 - (C6085 + C6086) + C6087) * C31294 * C4761 +
            C6105 * C4762) *
               C31420 +
           (((C113 * C490 + C31509 * C505) * C30289 +
             (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
             C557 * C31277) *
                C31294 * C4760 +
            (C6662 + C6663 - C6664 - C6665) * C31294 * C4761 +
            (C6666 + C6667 - C6674 - C6675) * C31294 * C4762) *
               C3806) *
              C2531 +
          (((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
            (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 +
            C5933 * C4762) *
               C31413 +
           ((C6086 + C6085 - C6084 - C6087) * C31294 * C4760 +
            (C6090 + C6089 - C6088 - C6091) * C31294 * C4761 +
            (C6092 + C6093 - C6102 - C6103) * C31294 * C4762) *
               C31420 +
           ((C6664 - (C6663 + C6662) + C6665) * C31294 * C4760 +
            (C6674 - (C6667 + C6666) + C6675) * C31294 * C4761 +
            ((C113 * C6657 + C31509 * C6658) * C30270 -
             (C5789 * C31569 + C5790 * C30289) +
             (C113 * C6659 + C31509 * C6660) * C31277) *
                C31294 * C4762) *
               C3806) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C107 +
            (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                C108 +
            (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
                C109) *
               C31498 * C31413 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C107 +
            (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                C108 +
            (C554 * C30270 - (C553 * C31569 + C552 * C30289) + C555 * C31277) *
                C109) *
               C31498 * C31420 +
           (((C113 * C490 + C31509 * C505) * C30289 +
             (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
             C557 * C31277) *
                C107 +
            (C556 * C30289 + C557 * C31569 - C558 * C30270 - C559 * C31277) *
                C108 +
            (C558 * C30289 + C559 * C31569 - C560 * C30270 - C561 * C31277) *
                C109) *
               C31498 * C3806) *
              C2531 +
          (((C361 * C30270 -
             ((C113 * C307 + C31509 * C326) * C31569 +
              (C113 * C297 + C31509 * C308) * C30289) +
             C362 * C31277) *
                C107 +
            (C363 * C30270 - (C362 * C31569 + C361 * C30289) + C364 * C31277) *
                C108 +
            (C365 * C30270 - (C364 * C31569 + C363 * C30289) + C366 * C31277) *
                C109) *
               C31498 * C31413 +
           (((C113 * C935 + C31509 * C940) * C30289 +
             (C113 * C941 + C31509 * C950) * C31569 - C968 * C30270 -
             C969 * C31277) *
                C107 +
            (C968 * C30289 + C969 * C31569 - C970 * C30270 - C971 * C31277) *
                C108 +
            (C970 * C30289 + C971 * C31569 - C972 * C30270 - C973 * C31277) *
                C109) *
               C31498 * C31420 +
           ((C2198 * C30270 -
             ((C113 * C1308 + C31509 * C1324) * C31569 +
              (C113 * C1297 + C31509 * C1309) * C30289) +
             C2199 * C31277) *
                C107 +
            (C2200 * C30270 - (C2199 * C31569 + C2198 * C30289) +
             C2201 * C31277) *
                C108 +
            ((C113 * C2185 + C31509 * C2186) * C30270 -
             (C2201 * C31569 + C2200 * C30289) +
             (C113 * C2187 + C31509 * C2188) * C31277) *
                C109) *
               C31498 * C3806) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C30289 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31569 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C30270 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31277) *
               C31294 * C31498 * C31413 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C30270 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C31569 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C30289) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31277) *
               C31294 * C31498 * C31420 +
           ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
             C9306 * C2018 + C9303 * C2027) *
                C30289 +
            (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
             C9306 * C2028 + C9303 * C2036) *
                C31569 -
            (C9306 * C2019 + C9303 * C2029 + C9305 * C2016 + C9302 * C2024 +
             C9304 * C491 + C9301 * C507) *
                C30270 -
            (C9306 * C2030 + C9303 * C2037 + C9305 * C2023 + C9302 * C2034 +
             C9304 * C508 + C9301 * C521) *
                C31277) *
               C31294 * C31498 * C3806) *
              C2531 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C30270 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C31569 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C30289) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31277) *
               C31294 * C31498 * C31413 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C30289 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31569 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C30270 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31277) *
               C31294 * C31498 * C31420 +
           ((C9304 * C1296 + C9301 * C1307 + C9305 * C2418 + C9302 * C2422 +
             C9306 * C10929 + C9303 * C10930) *
                C30270 -
            ((C9306 * C6505 + C9303 * C6509 + C9305 * C2421 + C9302 * C2426 +
              C9304 * C1308 + C9301 * C1324) *
                 C31569 +
             (C9306 * C6500 + C9303 * C6504 + C9305 * C2417 + C9302 * C2420 +
              C9304 * C1297 + C9301 * C1309) *
                 C30289) +
            (C9304 * C1306 + C9301 * C1323 + C9305 * C2423 + C9302 * C2427 +
             C9306 * C10931 + C9303 * C10932) *
                C31277) *
               C31294 * C31498 * C3806) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C3298 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31417) *
              C31660 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31417 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C3298) *
              C31656 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C3298 -
           ((C1615 * C31267 + C1614 * C1160) * C109 +
            (C1613 * C31267 + C1612 * C1160) * C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C31417) *
              C31646 +
          ((((C113 * C1713 + C31509 * C1716) * C1160 +
             (C113 * C1717 + C31509 * C1722) * C31267) *
                C107 +
            ((C113 * C1714 + C31509 * C1718) * C1160 +
             (C113 * C1719 + C31509 * C1723) * C31267) *
                C108 +
            ((C113 * C1715 + C31509 * C1720) * C1160 +
             (C113 * C1721 + C31509 * C1724) * C31267) *
                C109) *
               C31498 * C31417 -
           ((C1453 * C31267 + C1452 * C1160) * C109 +
            (C1451 * C31267 + C1450 * C1160) * C108 +
            ((C113 * C1171 + C31509 * C1181) * C31267 +
             (C113 * C1163 + C31509 * C1172) * C1160) *
                C107) *
               C31498 * C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C107 +
            (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
             C172 * C1091 + C173 * C31609) *
                C108 +
            (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
             C174 * C1091 + C175 * C31609) *
                C109) *
               C31498 * C3298 +
           ((C550 * C1090 -
             ((C113 * C496 + C31509 * C515) * C31650 +
              (C113 * C486 + C31509 * C497) * C1089) +
             C551 * C31637 - C552 * C1091 - C553 * C31609) *
                C107 +
            (C552 * C1090 - (C551 * C31650 + C550 * C1089) + C553 * C31637 -
             C554 * C1091 - C555 * C31609) *
                C108 +
            (C554 * C1090 - (C553 * C31650 + C552 * C1089) + C555 * C31637 -
             C788 * C1091 - C789 * C31609) *
                C109) *
               C31498 * C31417) *
              C2531 +
          (((C361 * C1090 -
             ((C113 * C307 + C31509 * C326) * C31650 +
              (C113 * C297 + C31509 * C308) * C1089) +
             C362 * C31637 - C363 * C1091 - C364 * C31609) *
                C107 +
            (C363 * C1090 - (C362 * C31650 + C361 * C1089) + C364 * C31637 -
             C365 * C1091 - C366 * C31609) *
                C108 +
            (C365 * C1090 - (C364 * C31650 + C363 * C1089) + C366 * C31637 -
             C678 * C1091 - C679 * C31609) *
                C109) *
               C31498 * C3298 +
           (((C113 * C935 + C31509 * C940) * C1089 +
             (C113 * C941 + C31509 * C950) * C31650 - C968 * C1090 -
             C969 * C31637 + C970 * C1091 + C971 * C31609) *
                C107 +
            (C968 * C1089 + C969 * C31650 - C970 * C1090 - C971 * C31637 +
             C972 * C1091 + C973 * C31609) *
                C108 +
            (C970 * C1089 + C971 * C31650 - C972 * C1090 - C973 * C31637 +
             (C113 * C939 + C31509 * C948) * C1091 +
             (C113 * C949 + C31509 * C954) * C31609) *
                C109) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C31294 * C4760 +
            (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
            C5541 * C4762) *
               C3298 +
           ((C550 * C1090 -
             ((C113 * C496 + C31509 * C515) * C31650 +
              (C113 * C486 + C31509 * C497) * C1089) +
             C551 * C31637 - C552 * C1091 - C553 * C31609) *
                C31294 * C4760 +
            (C8630 - (C8631 + C8632) + C8633 - C8634 - C8635) * C31294 * C4761 +
            (C8636 - (C8637 + C8638) + C8639 - C8640 - C8641) * C31294 *
                C4762) *
               C31417) *
              C2531 +
          (((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C31294 * C4760 +
            (C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C31294 * C4761 +
            (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C31294 *
                C4762) *
               C3298 +
           ((C8632 + C8631 - C8630 - C8633 + C8634 + C8635) * C31294 * C4760 +
            (C8638 + C8637 - C8636 - C8639 + C8640 + C8641) * C31294 * C4761 +
            (C5787 * C1089 + C5788 * C31650 - C6099 * C1090 - C6100 * C31637 +
             (C113 * C1715 + C31509 * C1720) * C1091 +
             (C113 * C1721 + C31509 * C1724) * C31609) *
                C31294 * C4762) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C3298 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31417) *
              C31660 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C31417 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C3298) *
              C31656 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C3298 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31417) *
              C31646 +
          ((C6213 * C4760 + (C6217 + C6216) * C31294 * C4761 +
            ((C113 * C6203 + C31509 * C6204) * C1160 +
             (C113 * C6205 + C31509 * C6206) * C31267) *
                C31294 * C4762) *
               C31417 -
           ((C5636 + C5637) * C31294 * C4762 +
            (C5635 + C5634) * C31294 * C4761 + C5633 * C4760) *
               C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1089 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31650 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C1090 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31637 +
            (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
             C9306 * C492 + C9303 * C509) *
                C1091 +
            (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
             C9306 * C510 + C9303 * C522) *
                C31609) *
               C31294 * C31498 * C3298 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C1090 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C31650 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C1089) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31637 -
            (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
             C9304 * C487 + C9301 * C499) *
                C1091 -
            (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
             C9304 * C500 + C9301 * C517) *
                C31609) *
               C31294 * C31498 * C31417) *
              C2531 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C1090 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C31650 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C1089) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31637 -
            (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
             C9304 * C298 + C9301 * C310) *
                C1091 -
            (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
             C9304 * C311 + C9301 * C328) *
                C31609) *
               C31294 * C31498 * C3298 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1089 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31650 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C1090 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31637 +
            (C9304 * C937 + C9301 * C944 + C9305 * C1295 + C9302 * C1305 +
             C9306 * C2419 + C9303 * C2424) *
                C1091 +
            (C9304 * C945 + C9301 * C952 + C9305 * C1304 + C9302 * C1322 +
             C9306 * C2425 + C9303 * C2428) *
                C31609) *
               C31294 * C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1160 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31267) *
               C31294 * C31498 * C3298 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31267 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1160) *
               C31294 * C31498 * C31417) *
              C31660 +
          (((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1160 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31267) *
               C31294 * C31498 * C31417 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31267 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1160) *
               C31294 * C31498 * C3298) *
              C31656 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C1160 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C31267) *
               C31294 * C31498 * C3298 -
           ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
             C9304 * C1314 + C9301 * C1327) *
                C31267 +
            (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
             C9304 * C1300 + C9301 * C1315) *
                C1160) *
               C31294 * C31498 * C31417) *
              C31646 +
          (((C9304 * C1713 + C9301 * C1716 + C9305 * C5749 + C9302 * C5753 +
             C9306 * C6875 + C9303 * C6876) *
                C1160 +
            (C9304 * C1717 + C9301 * C1722 + C9305 * C5752 + C9302 * C5758 +
             C9306 * C6877 + C9303 * C6878) *
                C31267) *
               C31294 * C31498 * C31417 -
           ((C9306 * C5752 + C9303 * C5758 + C9305 * C1717 + C9302 * C1722 +
             C9304 * C1171 + C9301 * C1181) *
                C31267 +
            (C9306 * C5749 + C9303 * C5753 + C9305 * C1713 + C9302 * C1716 +
             C9304 * C1163 + C9301 * C1172) *
                C1160) *
               C31294 * C31498 * C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C665 +
                (C113 * C127 + C31509 * C140) * C659 - C168 * C666 -
                C169 * C660 + C170 * C667 + C171 * C661 - C172 * C668 -
                C173 * C31620) *
                   C107 +
               (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
                C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31620) *
                   C108 +
               (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
                C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31620) *
                   C109) *
                  C31498 * C31330 * C31587 +
              ((C361 * C666 -
                ((C113 * C307 + C31509 * C326) * C659 +
                 (C113 * C297 + C31509 * C308) * C665) +
                C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
                C366 * C31620) *
                   C107 +
               (C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
                C365 * C667 - C366 * C661 + C678 * C668 + C679 * C31620) *
                   C108 +
               (C365 * C666 - (C364 * C659 + C363 * C665) + C366 * C660 -
                C678 * C667 - C679 * C661 +
                (C113 * C669 + C31509 * C670) * C668 +
                (C113 * C671 + C31509 * C672) * C31620) *
                   C109) *
                  C31498 * C31330 * C31377) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C30289 +
                (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
                C169 * C31277) *
                   C107 +
               (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                   C108 +
               (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
                   C109) *
                  C31498 * C31330 * C1431 +
              ((C361 * C30270 -
                ((C113 * C307 + C31509 * C326) * C31569 +
                 (C113 * C297 + C31509 * C308) * C30289) +
                C362 * C31277) *
                   C107 +
               (C363 * C30270 - (C362 * C31569 + C361 * C30289) +
                C364 * C31277) *
                   C108 +
               (C365 * C30270 - (C364 * C31569 + C363 * C30289) +
                C366 * C31277) *
                   C109) *
                  C31498 * C31330 * C1432 +
              (((C113 * C301 + C31509 * C316) * C30289 +
                (C113 * C317 + C31509 * C331) * C31569 - C367 * C30270 -
                C368 * C31277) *
                   C107 +
               (C367 * C30289 + C368 * C31569 - C369 * C30270 - C370 * C31277) *
                   C108 +
               (C369 * C30289 + C370 * C31569 - C371 * C30270 - C372 * C31277) *
                   C109) *
                  C31498 * C31330 * C1433 +
              ((C1450 * C30270 -
                ((C113 * C1171 + C31509 * C1181) * C31569 +
                 (C113 * C1163 + C31509 * C1172) * C30289) +
                C1451 * C31277) *
                   C107 +
               (C1452 * C30270 - (C1451 * C31569 + C1450 * C30289) +
                C1453 * C31277) *
                   C108 +
               ((C113 * C1437 + C31509 * C1438) * C30270 -
                (C1453 * C31569 + C1452 * C30289) +
                (C113 * C1439 + C31509 * C1440) * C31277) *
                   C109) *
                  C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C107 +
            (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                C108 +
            (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
                C109) *
               C31498 * C1835 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C107 +
            (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                C108 +
            (C554 * C30270 - (C553 * C31569 + C552 * C30289) + C555 * C31277) *
                C109) *
               C31498 * C1836 +
           (((C113 * C490 + C31509 * C505) * C30289 +
             (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
             C557 * C31277) *
                C107 +
            (C556 * C30289 + C557 * C31569 - C558 * C30270 - C559 * C31277) *
                C108 +
            (C558 * C30289 + C559 * C31569 - C560 * C30270 - C561 * C31277) *
                C109) *
               C31498 * C31619) *
              C31587 +
          (((C361 * C30270 -
             ((C113 * C307 + C31509 * C326) * C31569 +
              (C113 * C297 + C31509 * C308) * C30289) +
             C362 * C31277) *
                C107 +
            (C363 * C30270 - (C362 * C31569 + C361 * C30289) + C364 * C31277) *
                C108 +
            (C365 * C30270 - (C364 * C31569 + C363 * C30289) + C366 * C31277) *
                C109) *
               C31498 * C1835 +
           (((C113 * C935 + C31509 * C940) * C30289 +
             (C113 * C941 + C31509 * C950) * C31569 - C968 * C30270 -
             C969 * C31277) *
                C107 +
            (C968 * C30289 + C969 * C31569 - C970 * C30270 - C971 * C31277) *
                C108 +
            (C970 * C30289 + C971 * C31569 - C972 * C30270 - C973 * C31277) *
                C109) *
               C31498 * C1836 +
           ((C2198 * C30270 -
             ((C113 * C1308 + C31509 * C1324) * C31569 +
              (C113 * C1297 + C31509 * C1309) * C30289) +
             C2199 * C31277) *
                C107 +
            (C2200 * C30270 - (C2199 * C31569 + C2198 * C30289) +
             C2201 * C31277) *
                C108 +
            ((C113 * C2185 + C31509 * C2186) * C30270 -
             (C2201 * C31569 + C2200 * C30289) +
             (C113 * C2187 + C31509 * C2188) * C31277) *
                C109) *
               C31498 * C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C31294 * C4760 +
           (C5124 + C5125 - C5126 - C5127 + C5128 + C5129 - C5130 - C5131) *
               C31294 * C4761 +
           (C5132 + C5133 - C5134 - C5135 + C5136 + C5137 - C5138 - C5139) *
               C31294 * C4762) *
              C31330 * C31587 +
          ((C5126 - (C5125 + C5124) + C5127 - C5128 - C5129 + C5130 + C5131) *
               C31294 * C4760 +
           (C5134 - (C5133 + C5132) + C5135 - C5136 - C5137 + C5138 + C5139) *
               C31294 * C4761 +
           (C1450 * C666 - (C4902 * C659 + C4903 * C665) + C1451 * C660 -
            C1452 * C667 - C1453 * C661 +
            (C113 * C1437 + C31509 * C1438) * C668 +
            (C113 * C1439 + C31509 * C1440) * C31620) *
               C31294 * C4762) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30289 +
            (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
            C169 * C31277) *
               C31294 * C4760 +
           (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
              C31330 * C1431 +
          ((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
           (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 + C5933 * C4762) *
              C31330 * C1432 +
          (C5932 * C4760 + (C5914 + C5913 - C5912 - C5915) * C31294 * C4761 +
           (C5916 + C5917 - C5928 - C5929) * C31294 * C4762) *
              C31330 * C1433 +
          (C5933 * C4760 + (C5928 - (C5917 + C5916) + C5929) * C31294 * C4761 +
           ((C113 * C5899 + C31509 * C5900) * C30270 -
            (C5630 * C31569 + C5631 * C30289) +
            (C113 * C5901 + C31509 * C5902) * C31277) *
               C31294 * C4762) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C31294 * C4760 +
            (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
               C1835 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C31294 * C4760 +
            (C6084 - (C6085 + C6086) + C6087) * C31294 * C4761 +
            C6105 * C4762) *
               C1836 +
           (((C113 * C490 + C31509 * C505) * C30289 +
             (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
             C557 * C31277) *
                C31294 * C4760 +
            (C6662 + C6663 - C6664 - C6665) * C31294 * C4761 +
            (C6666 + C6667 - C6674 - C6675) * C31294 * C4762) *
               C31619) *
              C31587 +
          (((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
            (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 +
            C5933 * C4762) *
               C1835 +
           ((C6086 + C6085 - C6084 - C6087) * C31294 * C4760 +
            (C6090 + C6089 - C6088 - C6091) * C31294 * C4761 +
            (C6092 + C6093 - C6102 - C6103) * C31294 * C4762) *
               C1836 +
           ((C6664 - (C6663 + C6662) + C6665) * C31294 * C4760 +
            (C6674 - (C6667 + C6666) + C6675) * C31294 * C4761 +
            ((C113 * C6657 + C31509 * C6658) * C30270 -
             (C5789 * C31569 + C5790 * C30289) +
             (C113 * C6659 + C31509 * C6660) * C31277) *
                C31294 * C4762) *
               C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C665 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C659 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C666 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C660 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C667 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C661 -
           (C9306 * C493 + C9303 * C511 + C9305 * C488 + C9302 * C501 +
            C9304 * C122 + C9301 * C132) *
               C668 -
           (C9306 * C512 + C9303 * C523 + C9305 * C502 + C9302 * C518 +
            C9304 * C133 + C9301 * C143) *
               C31620) *
              C31294 * C31498 * C31330 * C31587 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C666 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C659 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C665) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C660 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C667 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C661 +
           (C9304 * C299 + C9301 * C312 + C9305 * C938 + C9302 * C946 +
            C9306 * C2185 + C9303 * C2186) *
               C668 +
           (C9304 * C313 + C9301 * C329 + C9305 * C947 + C9302 * C953 +
            C9306 * C2187 + C9303 * C2188) *
               C31620) *
              C31294 * C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C30289 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31569 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C30270 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31277) *
              C31294 * C31498 * C31330 * C1431 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C30270 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31569 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C30289) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C31277) *
              C31294 * C31498 * C31330 * C1432 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C30289 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C31569 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C30270 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C31277) *
              C31294 * C31498 * C31330 * C1433 +
          ((C9304 * C1162 + C9301 * C1170 + C9305 * C1714 + C9302 * C1718 +
            C9306 * C6657 + C9303 * C6658) *
               C30270 -
           ((C9306 * C5752 + C9303 * C5758 + C9305 * C1717 + C9302 * C1722 +
             C9304 * C1171 + C9301 * C1181) *
                C31569 +
            (C9306 * C5749 + C9303 * C5753 + C9305 * C1713 + C9302 * C1716 +
             C9304 * C1163 + C9301 * C1172) *
                C30289) +
           (C9304 * C1169 + C9301 * C1180 + C9305 * C1719 + C9302 * C1723 +
            C9306 * C6659 + C9303 * C6660) *
               C31277) *
              C31294 * C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C30289 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31569 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C30270 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31277) *
               C31294 * C31498 * C1835 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C30270 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C31569 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C30289) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31277) *
               C31294 * C31498 * C1836 +
           ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
             C9306 * C2018 + C9303 * C2027) *
                C30289 +
            (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
             C9306 * C2028 + C9303 * C2036) *
                C31569 -
            (C9306 * C2019 + C9303 * C2029 + C9305 * C2016 + C9302 * C2024 +
             C9304 * C491 + C9301 * C507) *
                C30270 -
            (C9306 * C2030 + C9303 * C2037 + C9305 * C2023 + C9302 * C2034 +
             C9304 * C508 + C9301 * C521) *
                C31277) *
               C31294 * C31498 * C31619) *
              C31587 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C30270 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C31569 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C30289) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31277) *
               C31294 * C31498 * C1835 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C30289 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31569 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C30270 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31277) *
               C31294 * C31498 * C1836 +
           ((C9304 * C1296 + C9301 * C1307 + C9305 * C2418 + C9302 * C2422 +
             C9306 * C10929 + C9303 * C10930) *
                C30270 -
            ((C9306 * C6505 + C9303 * C6509 + C9305 * C2421 + C9302 * C2426 +
              C9304 * C1308 + C9301 * C1324) *
                 C31569 +
             (C9306 * C6500 + C9303 * C6504 + C9305 * C2417 + C9302 * C2420 +
              C9304 * C1297 + C9301 * C1309) *
                 C30289) +
            (C9304 * C1306 + C9301 * C1323 + C9305 * C2423 + C9302 * C2427 +
             C9306 * C10931 + C9303 * C10932) *
                C31277) *
               C31294 * C31498 * C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31509 * C126) * C293 +
                 (C113 * C127 + C31509 * C140) * C287 - C168 * C294 -
                 C169 * C288 + C170 * C295 + C171 * C31609) *
                    C107 +
                (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                 C172 * C295 + C173 * C31609) *
                    C108 +
                (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                 C174 * C295 + C175 * C31609) *
                    C109) *
                   C31498 * C31588 +
               ((C550 * C294 -
                 ((C113 * C496 + C31509 * C515) * C287 +
                  (C113 * C486 + C31509 * C497) * C293) +
                 C551 * C288 - C552 * C295 - C553 * C31609) *
                    C107 +
                (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                 C554 * C295 - C555 * C31609) *
                    C108 +
                (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                 C788 * C295 - C789 * C31609) *
                    C109) *
                   C31498 * C31417) *
                  C31587 +
              (((C361 * C294 -
                 ((C113 * C307 + C31509 * C326) * C287 +
                  (C113 * C297 + C31509 * C308) * C293) +
                 C362 * C288 - C363 * C295 - C364 * C31609) *
                    C107 +
                (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                 C365 * C295 - C366 * C31609) *
                    C108 +
                (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                 C678 * C295 - C679 * C31609) *
                    C109) *
                   C31498 * C31588 +
               (((C113 * C935 + C31509 * C940) * C293 +
                 (C113 * C941 + C31509 * C950) * C287 - C968 * C294 -
                 C969 * C288 + C970 * C295 + C971 * C31609) *
                    C107 +
                (C968 * C293 + C969 * C287 - C970 * C294 - C971 * C288 +
                 C972 * C295 + C973 * C31609) *
                    C108 +
                (C970 * C293 + C971 * C287 - C972 * C294 - C973 * C288 +
                 (C113 * C939 + C31509 * C948) * C295 +
                 (C113 * C949 + C31509 * C954) * C31609) *
                    C109) *
                   C31498 * C31417) *
                  C31377) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31509 * C126) * C1160 +
                 (C113 * C127 + C31509 * C140) * C31267) *
                    C107 +
                (C168 * C1160 + C169 * C31267) * C108 +
                (C170 * C1160 + C171 * C31267) * C109) *
                   C31498 * C31588 -
               ((C553 * C31267 + C552 * C1160) * C109 +
                (C551 * C31267 + C550 * C1160) * C108 +
                ((C113 * C496 + C31509 * C515) * C31267 +
                 (C113 * C486 + C31509 * C497) * C1160) *
                    C107) *
                   C31498 * C31417) *
                  C1431 +
              ((((C113 * C935 + C31509 * C940) * C1160 +
                 (C113 * C941 + C31509 * C950) * C31267) *
                    C107 +
                (C968 * C1160 + C969 * C31267) * C108 +
                (C970 * C1160 + C971 * C31267) * C109) *
                   C31498 * C31417 -
               ((C364 * C31267 + C363 * C1160) * C109 +
                (C362 * C31267 + C361 * C1160) * C108 +
                ((C113 * C307 + C31509 * C326) * C31267 +
                 (C113 * C297 + C31509 * C308) * C1160) *
                    C107) *
                   C31498 * C31588) *
                  C1432 +
              ((((C113 * C301 + C31509 * C316) * C1160 +
                 (C113 * C317 + C31509 * C331) * C31267) *
                    C107 +
                (C367 * C1160 + C368 * C31267) * C108 +
                (C369 * C1160 + C370 * C31267) * C109) *
                   C31498 * C31588 -
               ((C1615 * C31267 + C1614 * C1160) * C109 +
                (C1613 * C31267 + C1612 * C1160) * C108 +
                ((C113 * C1314 + C31509 * C1327) * C31267 +
                 (C113 * C1300 + C31509 * C1315) * C1160) *
                    C107) *
                   C31498 * C31417) *
                  C1433 +
              ((((C113 * C1713 + C31509 * C1716) * C1160 +
                 (C113 * C1717 + C31509 * C1722) * C31267) *
                    C107 +
                ((C113 * C1714 + C31509 * C1718) * C1160 +
                 (C113 * C1719 + C31509 * C1723) * C31267) *
                    C108 +
                ((C113 * C1715 + C31509 * C1720) * C1160 +
                 (C113 * C1721 + C31509 * C1724) * C31267) *
                    C109) *
                   C31498 * C31417 -
               ((C1453 * C31267 + C1452 * C1160) * C109 +
                (C1451 * C31267 + C1450 * C1160) * C108 +
                ((C113 * C1171 + C31509 * C1181) * C31267 +
                 (C113 * C1163 + C31509 * C1172) * C1160) *
                    C107) *
                   C31498 * C31588) *
                  C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C2299 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C2300 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C107 +
            (C556 * C1160 + C557 * C31267) * C108 +
            (C558 * C1160 + C559 * C31267) * C109) *
               C31498 * C2301 -
           ((C2319 * C31267 + C2318 * C1160) * C109 +
            (C2317 * C31267 + C2316 * C1160) * C108 +
            ((C113 * C2025 + C31509 * C2035) * C31267 +
             (C113 * C2017 + C31509 * C2026) * C1160) *
                C107) *
               C31498 * C31632) *
              C31587 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C2300 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C2299 -
           ((C2201 * C31267 + C2200 * C1160) * C109 +
            (C2199 * C31267 + C2198 * C1160) * C108 +
            ((C113 * C1308 + C31509 * C1324) * C31267 +
             (C113 * C1297 + C31509 * C1309) * C1160) *
                C107) *
               C31498 * C2301 +
           (((C113 * C2417 + C31509 * C2420) * C1160 +
             (C113 * C2421 + C31509 * C2426) * C31267) *
                C107 +
            ((C113 * C2418 + C31509 * C2422) * C1160 +
             (C113 * C2423 + C31509 * C2427) * C31267) *
                C108 +
            ((C113 * C2419 + C31509 * C2424) * C1160 +
             (C113 * C2425 + C31509 * C2428) * C31267) *
                C109) *
               C31498 * C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C293 +
             (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31609) *
                C31294 * C4760 +
            (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
            C4915 * C4762) *
               C31588 +
           ((C550 * C294 -
             ((C113 * C496 + C31509 * C515) * C287 +
              (C113 * C486 + C31509 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C31609) *
                C31294 * C4760 +
            (C5384 - (C5404 + C5405) + C5389 - C5390 - C5391) * C31294 * C4761 +
            (C5392 - (C5406 + C5407) + C5397 - C5398 - C5399) * C31294 *
                C4762) *
               C31417) *
              C31587 +
          (((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C31294 * C4760 +
            (C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C31294 * C4761 +
            (C4890 - (C4908 + C4909) + C4895 - C4896 - C4897) * C31294 *
                C4762) *
               C31588 +
           ((C5405 + C5404 - C5384 - C5389 + C5390 + C5391) * C31294 * C4760 +
            (C5407 + C5406 - C5392 - C5397 + C5398 + C5399) * C31294 * C4761 +
            ((C113 * C1713 + C31509 * C1716) * C293 +
             (C113 * C1717 + C31509 * C1722) * C287 -
             (C113 * C1714 + C31509 * C1718) * C294 -
             (C113 * C1719 + C31509 * C1723) * C288 +
             (C113 * C1715 + C31509 * C1720) * C295 +
             (C113 * C1721 + C31509 * C1724) * C31609) *
                C31294 * C4762) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C31588 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31417) *
              C1431 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C31417 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C31588) *
              C1432 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C31588 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31417) *
              C1433 +
          ((C6213 * C4760 + (C6217 + C6216) * C31294 * C4761 +
            ((C113 * C6203 + C31509 * C6204) * C1160 +
             (C113 * C6205 + C31509 * C6206) * C31267) *
                C31294 * C4762) *
               C31417 -
           ((C5636 + C5637) * C31294 * C4762 +
            (C5635 + C5634) * C31294 * C4761 + C5633 * C4760) *
               C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C2299 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C2300 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C2301 -
           ((C6892 + C6893) * C31294 * C4762 +
            (C6894 + C6895) * C31294 * C4761 +
            ((C113 * C2025 + C31509 * C2035) * C31267 +
             (C113 * C2017 + C31509 * C2026) * C1160) *
                C31294 * C4760) *
               C31632) *
              C31587 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C2300 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C2299 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C2301 +
           ((C6895 + C6894) * C31294 * C4760 +
            (C6893 + C6892) * C31294 * C4761 +
            ((C113 * C6875 + C31509 * C6876) * C1160 +
             (C113 * C6877 + C31509 * C6878) * C31267) *
                C31294 * C4762) *
               C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C293 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C287 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C294 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C288 +
            (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
             C9306 * C492 + C9303 * C509) *
                C295 +
            (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
             C9306 * C510 + C9303 * C522) *
                C31609) *
               C31294 * C31498 * C31588 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C294 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C287 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C293) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C288 -
            (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
             C9304 * C487 + C9301 * C499) *
                C295 -
            (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
             C9304 * C500 + C9301 * C517) *
                C31609) *
               C31294 * C31498 * C31417) *
              C31587 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C294 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C287 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C293) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C288 -
            (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
             C9304 * C298 + C9301 * C310) *
                C295 -
            (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
             C9304 * C311 + C9301 * C328) *
                C31609) *
               C31294 * C31498 * C31588 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C293 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C287 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C294 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C288 +
            (C9304 * C937 + C9301 * C944 + C9305 * C1295 + C9302 * C1305 +
             C9306 * C2419 + C9303 * C2424) *
                C295 +
            (C9304 * C945 + C9301 * C952 + C9305 * C1304 + C9302 * C1322 +
             C9306 * C2425 + C9303 * C2428) *
                C31609) *
               C31294 * C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1160 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31267) *
               C31294 * C31498 * C31588 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31267 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1160) *
               C31294 * C31498 * C31417) *
              C1431 +
          (((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1160 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31267) *
               C31294 * C31498 * C31417 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31267 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1160) *
               C31294 * C31498 * C31588) *
              C1432 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C1160 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C31267) *
               C31294 * C31498 * C31588 -
           ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
             C9304 * C1314 + C9301 * C1327) *
                C31267 +
            (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
             C9304 * C1300 + C9301 * C1315) *
                C1160) *
               C31294 * C31498 * C31417) *
              C1433 +
          (((C9304 * C1713 + C9301 * C1716 + C9305 * C5749 + C9302 * C5753 +
             C9306 * C6875 + C9303 * C6876) *
                C1160 +
            (C9304 * C1717 + C9301 * C1722 + C9305 * C5752 + C9302 * C5758 +
             C9306 * C6877 + C9303 * C6878) *
                C31267) *
               C31294 * C31498 * C31417 -
           ((C9306 * C5752 + C9303 * C5758 + C9305 * C1717 + C9302 * C1722 +
             C9304 * C1171 + C9301 * C1181) *
                C31267 +
            (C9306 * C5749 + C9303 * C5753 + C9305 * C1713 + C9302 * C1716 +
             C9304 * C1163 + C9301 * C1172) *
                C1160) *
               C31294 * C31498 * C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1160 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31267) *
               C31294 * C31498 * C2299 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31267 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1160) *
               C31294 * C31498 * C2300 +
           ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
             C9306 * C2018 + C9303 * C2027) *
                C1160 +
            (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
             C9306 * C2028 + C9303 * C2036) *
                C31267) *
               C31294 * C31498 * C2301 -
           ((C9306 * C10777 + C9303 * C10781 + C9305 * C2028 + C9302 * C2036 +
             C9304 * C2025 + C9301 * C2035) *
                C31267 +
            (C9306 * C10775 + C9303 * C10778 + C9305 * C2018 + C9302 * C2027 +
             C9304 * C2017 + C9301 * C2026) *
                C1160) *
               C31294 * C31498 * C31632) *
              C31587 +
          (((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1160 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31267) *
               C31294 * C31498 * C2300 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31267 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1160) *
               C31294 * C31498 * C2299 -
           ((C9306 * C6505 + C9303 * C6509 + C9305 * C2421 + C9302 * C2426 +
             C9304 * C1308 + C9301 * C1324) *
                C31267 +
            (C9306 * C6500 + C9303 * C6504 + C9305 * C2417 + C9302 * C2420 +
             C9304 * C1297 + C9301 * C1309) *
                C1160) *
               C31294 * C31498 * C2301 +
           ((C9304 * C2417 + C9301 * C2420 + C9305 * C6500 + C9302 * C6504 +
             C9306 * C11133 + C9303 * C11134) *
                C1160 +
            (C9304 * C2421 + C9301 * C2426 + C9305 * C6505 + C9302 * C6509 +
             C9306 * C11135 + C9303 * C11136) *
                C31267) *
               C31294 * C31498 * C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C31509 * C126) * C114 +
               (C113 * C127 + C31509 * C140) * C102 - C168 * C115 -
               C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C107 +
              (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
               C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
               C176 * C118 + C177 * C106) *
                  C108 +
              (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
               C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
               (C113 * C125 + C31509 * C138) * C118 +
               (C113 * C139 + C31509 * C146) * C106) *
                  C109) *
             C31498 * C31330 * C31318 -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C293 +
                (C113 * C127 + C31509 * C140) * C287 - C168 * C294 -
                C169 * C288 + C170 * C295 + C171 * C31609) *
                   C107 +
               (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                C172 * C295 + C173 * C31609) *
                   C108 +
               (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                C174 * C295 + C175 * C31609) *
                   C109) *
                  C31498 * C31330 * C31653 +
              ((C361 * C294 -
                ((C113 * C307 + C31509 * C326) * C287 +
                 (C113 * C297 + C31509 * C308) * C293) +
                C362 * C288 - C363 * C295 - C364 * C31609) *
                   C107 +
               (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                C365 * C295 - C366 * C31609) *
                   C108 +
               (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                (C113 * C300 + C31509 * C314) * C295 -
                (C113 * C315 + C31509 * C330) * C31609) *
                   C109) *
                  C31498 * C31330 * C31641 +
              (((C113 * C301 + C31509 * C316) * C293 +
                (C113 * C317 + C31509 * C331) * C287 - C367 * C294 -
                C368 * C288 + C369 * C295 + C370 * C31609) *
                   C107 +
               (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                C371 * C295 + C372 * C31609) *
                   C108 +
               (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                (C113 * C305 + C31509 * C324) * C295 +
                (C113 * C325 + C31509 * C335) * C31609) *
                   C109) *
                  C31498 * C31330 * C31616) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C293 +
                (C113 * C127 + C31509 * C140) * C287 - C168 * C294 -
                C169 * C288 + C170 * C295 + C171 * C31609) *
                   C107 +
               (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                C172 * C295 + C173 * C31609) *
                   C108 +
               (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                C174 * C295 + C175 * C31609) *
                   C109) *
                  C31498 * C31654 +
              ((C550 * C294 -
                ((C113 * C496 + C31509 * C515) * C287 +
                 (C113 * C486 + C31509 * C497) * C293) +
                C551 * C288 - C552 * C295 - C553 * C31609) *
                   C107 +
               (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                C554 * C295 - C555 * C31609) *
                   C108 +
               (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                (C113 * C489 + C31509 * C503) * C295 -
                (C113 * C504 + C31509 * C519) * C31609) *
                   C109) *
                  C31498 * C31643 +
              (((C113 * C490 + C31509 * C505) * C293 +
                (C113 * C506 + C31509 * C520) * C287 - C556 * C294 -
                C557 * C288 + C558 * C295 + C559 * C31609) *
                   C107 +
               (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
                C560 * C295 + C561 * C31609) *
                   C108 +
               (C558 * C293 + C559 * C287 - C560 * C294 - C561 * C288 +
                (C113 * C494 + C31509 * C513) * C295 +
                (C113 * C514 + C31509 * C524) * C31609) *
                   C109) *
                  C31498 * C31619) *
             C31318 -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C1089 +
                (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
                C169 * C31637 + C170 * C1091 + C171 * C31609) *
                   C107 +
               (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
                C172 * C1091 + C173 * C31609) *
                   C108 +
               (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
                C174 * C1091 + C175 * C31609) *
                   C109) *
                  C31498 * C31330 * C1086 +
              ((C361 * C1090 -
                ((C113 * C307 + C31509 * C326) * C31650 +
                 (C113 * C297 + C31509 * C308) * C1089) +
                C362 * C31637 - C363 * C1091 - C364 * C31609) *
                   C107 +
               (C363 * C1090 - (C362 * C31650 + C361 * C1089) + C364 * C31637 -
                C365 * C1091 - C366 * C31609) *
                   C108 +
               (C365 * C1090 - (C364 * C31650 + C363 * C1089) + C366 * C31637 -
                C678 * C1091 - C679 * C31609) *
                   C109) *
                  C31498 * C31330 * C1087 +
              (((C113 * C301 + C31509 * C316) * C1089 +
                (C113 * C317 + C31509 * C331) * C31650 - C367 * C1090 -
                C368 * C31637 + C369 * C1091 + C370 * C31609) *
                   C107 +
               (C367 * C1089 + C368 * C31650 - C369 * C1090 - C370 * C31637 +
                C371 * C1091 + C372 * C31609) *
                   C108 +
               (C369 * C1089 + C370 * C31650 - C371 * C1090 - C372 * C31637 +
                (C113 * C305 + C31509 * C324) * C1091 +
                (C113 * C325 + C31509 * C335) * C31609) *
                   C109) *
                  C31498 * C31330 * C31616) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C1160 +
                (C113 * C127 + C31509 * C140) * C31267) *
                   C107 +
               (C168 * C1160 + C169 * C31267) * C108 +
               (C170 * C1160 + C171 * C31267) * C109) *
                  C31498 * C31330 * C1155 -
              ((C364 * C31267 + C363 * C1160) * C109 +
               (C362 * C31267 + C361 * C1160) * C108 +
               ((C113 * C307 + C31509 * C326) * C31267 +
                (C113 * C297 + C31509 * C308) * C1160) *
                   C107) *
                  C31498 * C31330 * C1156 +
              (((C113 * C301 + C31509 * C316) * C1160 +
                (C113 * C317 + C31509 * C331) * C31267) *
                   C107 +
               (C367 * C1160 + C368 * C31267) * C108 +
               (C369 * C1160 + C370 * C31267) * C109) *
                  C31498 * C31330 * C1157 -
              (((C113 * C1167 + C31509 * C1179) * C31267 +
                (C113 * C1161 + C31509 * C1168) * C1160) *
                   C109 +
               ((C113 * C1169 + C31509 * C1180) * C31267 +
                (C113 * C1162 + C31509 * C1170) * C1160) *
                   C108 +
               ((C113 * C1171 + C31509 * C1181) * C31267 +
                (C113 * C1163 + C31509 * C1172) * C1160) *
                   C107) *
                  C31498 * C31330 * C1158 +
              (((C113 * C1164 + C31509 * C1173) * C1160 +
                (C113 * C1174 + C31509 * C1182) * C31267) *
                   C107 +
               ((C113 * C1165 + C31509 * C1175) * C1160 +
                (C113 * C1176 + C31509 * C1183) * C31267) *
                   C108 +
               ((C113 * C1166 + C31509 * C1177) * C1160 +
                (C113 * C1178 + C31509 * C1184) * C31267) *
                   C109) *
                  C31498 * C31330 * C1159) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31509 * C126) * C1160 +
                 (C113 * C127 + C31509 * C140) * C31267) *
                    C107 +
                (C168 * C1160 + C169 * C31267) * C108 +
                (C170 * C1160 + C171 * C31267) * C109) *
                   C31498 * C31654 -
               ((C553 * C31267 + C552 * C1160) * C109 +
                (C551 * C31267 + C550 * C1160) * C108 +
                ((C113 * C496 + C31509 * C515) * C31267 +
                 (C113 * C486 + C31509 * C497) * C1160) *
                    C107) *
                   C31498 * C31643 +
               (((C113 * C490 + C31509 * C505) * C1160 +
                 (C113 * C506 + C31509 * C520) * C31267) *
                    C107 +
                (C556 * C1160 + C557 * C31267) * C108 +
                (C558 * C1160 + C559 * C31267) * C109) *
                   C31498 * C31619) *
                  C1086 +
              ((((C113 * C935 + C31509 * C940) * C1160 +
                 (C113 * C941 + C31509 * C950) * C31267) *
                    C107 +
                (C968 * C1160 + C969 * C31267) * C108 +
                (C970 * C1160 + C971 * C31267) * C109) *
                   C31498 * C31643 -
               ((C364 * C31267 + C363 * C1160) * C109 +
                (C362 * C31267 + C361 * C1160) * C108 +
                ((C113 * C307 + C31509 * C326) * C31267 +
                 (C113 * C297 + C31509 * C308) * C1160) *
                    C107) *
                   C31498 * C31654 -
               (((C113 * C1304 + C31509 * C1322) * C31267 +
                 (C113 * C1295 + C31509 * C1305) * C1160) *
                    C109 +
                ((C113 * C1306 + C31509 * C1323) * C31267 +
                 (C113 * C1296 + C31509 * C1307) * C1160) *
                    C108 +
                ((C113 * C1308 + C31509 * C1324) * C31267 +
                 (C113 * C1297 + C31509 * C1309) * C1160) *
                    C107) *
                   C31498 * C31619) *
                  C1087 +
              ((((C113 * C301 + C31509 * C316) * C1160 +
                 (C113 * C317 + C31509 * C331) * C31267) *
                    C107 +
                (C367 * C1160 + C368 * C31267) * C108 +
                (C369 * C1160 + C370 * C31267) * C109) *
                   C31498 * C31654 -
               (((C113 * C1310 + C31509 * C1325) * C31267 +
                 (C113 * C1298 + C31509 * C1311) * C1160) *
                    C109 +
                ((C113 * C1312 + C31509 * C1326) * C31267 +
                 (C113 * C1299 + C31509 * C1313) * C1160) *
                    C108 +
                ((C113 * C1314 + C31509 * C1327) * C31267 +
                 (C113 * C1300 + C31509 * C1315) * C1160) *
                    C107) *
                   C31498 * C31643 +
               (((C113 * C1301 + C31509 * C1316) * C1160 +
                 (C113 * C1317 + C31509 * C1328) * C31267) *
                    C107 +
                ((C113 * C1302 + C31509 * C1318) * C1160 +
                 (C113 * C1319 + C31509 * C1329) * C31267) *
                    C108 +
                ((C113 * C1303 + C31509 * C1320) * C1160 +
                 (C113 * C1321 + C31509 * C1330) * C31267) *
                    C109) *
                   C31498 * C31619) *
                  C31616) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C1089 +
                (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
                C169 * C31637 + C170 * C1091 + C171 * C31609) *
                   C107 +
               (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
                C172 * C1091 + C173 * C31609) *
                   C108 +
               (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
                C174 * C1091 + C175 * C31609) *
                   C109) *
                  C31498 * C1835 +
              ((C550 * C1090 -
                ((C113 * C496 + C31509 * C515) * C31650 +
                 (C113 * C486 + C31509 * C497) * C1089) +
                C551 * C31637 - C552 * C1091 - C553 * C31609) *
                   C107 +
               (C552 * C1090 - (C551 * C31650 + C550 * C1089) + C553 * C31637 -
                C554 * C1091 - C555 * C31609) *
                   C108 +
               (C554 * C1090 - (C553 * C31650 + C552 * C1089) + C555 * C31637 -
                C788 * C1091 - C789 * C31609) *
                   C109) *
                  C31498 * C1836 +
              (((C113 * C490 + C31509 * C505) * C1089 +
                (C113 * C506 + C31509 * C520) * C31650 - C556 * C1090 -
                C557 * C31637 + C558 * C1091 + C559 * C31609) *
                   C107 +
               (C556 * C1089 + C557 * C31650 - C558 * C1090 - C559 * C31637 +
                C560 * C1091 + C561 * C31609) *
                   C108 +
               (C558 * C1089 + C559 * C31650 - C560 * C1090 - C561 * C31637 +
                (C113 * C494 + C31509 * C513) * C1091 +
                (C113 * C514 + C31509 * C524) * C31609) *
                   C109) *
                  C31498 * C31619) *
             C31318 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31509 * C126) * C1160 +
                 (C113 * C127 + C31509 * C140) * C31267) *
                    C107 +
                (C168 * C1160 + C169 * C31267) * C108 +
                (C170 * C1160 + C171 * C31267) * C109) *
                   C31498 * C1835 -
               ((C553 * C31267 + C552 * C1160) * C109 +
                (C551 * C31267 + C550 * C1160) * C108 +
                ((C113 * C496 + C31509 * C515) * C31267 +
                 (C113 * C486 + C31509 * C497) * C1160) *
                    C107) *
                   C31498 * C1836 +
               (((C113 * C490 + C31509 * C505) * C1160 +
                 (C113 * C506 + C31509 * C520) * C31267) *
                    C107 +
                (C556 * C1160 + C557 * C31267) * C108 +
                (C558 * C1160 + C559 * C31267) * C109) *
                   C31498 * C31619) *
                  C31653 +
              ((((C113 * C935 + C31509 * C940) * C1160 +
                 (C113 * C941 + C31509 * C950) * C31267) *
                    C107 +
                (C968 * C1160 + C969 * C31267) * C108 +
                (C970 * C1160 + C971 * C31267) * C109) *
                   C31498 * C1836 -
               ((C364 * C31267 + C363 * C1160) * C109 +
                (C362 * C31267 + C361 * C1160) * C108 +
                ((C113 * C307 + C31509 * C326) * C31267 +
                 (C113 * C297 + C31509 * C308) * C1160) *
                    C107) *
                   C31498 * C1835 -
               (((C113 * C1304 + C31509 * C1322) * C31267 +
                 (C113 * C1295 + C31509 * C1305) * C1160) *
                    C109 +
                ((C113 * C1306 + C31509 * C1323) * C31267 +
                 (C113 * C1296 + C31509 * C1307) * C1160) *
                    C108 +
                ((C113 * C1308 + C31509 * C1324) * C31267 +
                 (C113 * C1297 + C31509 * C1309) * C1160) *
                    C107) *
                   C31498 * C31619) *
                  C31641 +
              ((((C113 * C301 + C31509 * C316) * C1160 +
                 (C113 * C317 + C31509 * C331) * C31267) *
                    C107 +
                (C367 * C1160 + C368 * C31267) * C108 +
                (C369 * C1160 + C370 * C31267) * C109) *
                   C31498 * C1835 -
               ((C1615 * C31267 + C1614 * C1160) * C109 +
                (C1613 * C31267 + C1612 * C1160) * C108 +
                ((C113 * C1314 + C31509 * C1327) * C31267 +
                 (C113 * C1300 + C31509 * C1315) * C1160) *
                    C107) *
                   C31498 * C1836 +
               (((C113 * C1301 + C31509 * C1316) * C1160 +
                 (C113 * C1317 + C31509 * C1328) * C31267) *
                    C107 +
                ((C113 * C1302 + C31509 * C1318) * C1160 +
                 (C113 * C1319 + C31509 * C1329) * C31267) *
                    C108 +
                ((C113 * C1303 + C31509 * C1320) * C1160 +
                 (C113 * C1321 + C31509 * C1330) * C31267) *
                    C109) *
                   C31498 * C31619) *
                  C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C107 +
           (C168 * C1160 + C169 * C31267) * C108 +
           (C170 * C1160 + C171 * C31267) * C109) *
              C31498 * C2010 -
          ((C553 * C31267 + C552 * C1160) * C109 +
           (C551 * C31267 + C550 * C1160) * C108 +
           ((C113 * C496 + C31509 * C515) * C31267 +
            (C113 * C486 + C31509 * C497) * C1160) *
               C107) *
              C31498 * C2011 +
          (((C113 * C490 + C31509 * C505) * C1160 +
            (C113 * C506 + C31509 * C520) * C31267) *
               C107 +
           (C556 * C1160 + C557 * C31267) * C108 +
           (C558 * C1160 + C559 * C31267) * C109) *
              C31498 * C2012 -
          (((C113 * C2021 + C31509 * C2033) * C31267 +
            (C113 * C2015 + C31509 * C2022) * C1160) *
               C109 +
           ((C113 * C2023 + C31509 * C2034) * C31267 +
            (C113 * C2016 + C31509 * C2024) * C1160) *
               C108 +
           ((C113 * C2025 + C31509 * C2035) * C31267 +
            (C113 * C2017 + C31509 * C2026) * C1160) *
               C107) *
              C31498 * C2013 +
          (((C113 * C2018 + C31509 * C2027) * C1160 +
            (C113 * C2028 + C31509 * C2036) * C31267) *
               C107 +
           ((C113 * C2019 + C31509 * C2029) * C1160 +
            (C113 * C2030 + C31509 * C2037) * C31267) *
               C108 +
           ((C113 * C2020 + C31509 * C2031) * C1160 +
            (C113 * C2032 + C31509 * C2038) * C31267) *
               C109) *
              C31498 * C2014) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C31294 * C4760 +
          ((C113 * C297 + C31509 * C308) * C114 +
           (C113 * C307 + C31509 * C326) * C102 - C361 * C115 - C362 * C103 +
           C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 + C678 * C118 +
           C679 * C106) *
              C31294 * C4761 +
          ((C113 * C301 + C31509 * C316) * C114 +
           (C113 * C317 + C31509 * C331) * C102 - C367 * C115 - C368 * C103 +
           C369 * C116 + C370 * C104 - C371 * C117 - C372 * C105 +
           (C113 * C305 + C31509 * C324) * C118 +
           (C113 * C325 + C31509 * C335) * C106) *
              C31294 * C4762) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C31294 * C4760 +
           (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
           C4915 * C4762) *
              C31330 * C31653 +
          ((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C31294 * C4760 +
           (C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C31294 * C4761 +
           (C4890 - (C4908 + C4909) + C4895 - C4896 - C4897) * C31294 * C4762) *
              C31330 * C31641 +
          (C4915 * C4760 +
           (C4909 + C4908 - C4890 - C4895 + C4896 + C4897) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C293 +
            (C113 * C1174 + C31509 * C1182) * C287 -
            (C113 * C1165 + C31509 * C1175) * C294 -
            (C113 * C1176 + C31509 * C1183) * C288 +
            (C113 * C1166 + C31509 * C1177) * C295 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C31294 * C4760 +
           (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
           C4915 * C4762) *
              C31654 +
          ((C550 * C294 -
            ((C113 * C496 + C31509 * C515) * C287 +
             (C113 * C486 + C31509 * C497) * C293) +
            C551 * C288 - C552 * C295 - C553 * C31609) *
               C31294 * C4760 +
           (C968 * C294 -
            ((C113 * C941 + C31509 * C950) * C287 +
             (C113 * C935 + C31509 * C940) * C293) +
            C969 * C288 - C970 * C295 - C971 * C31609) *
               C31294 * C4761 +
           (C1612 * C294 -
            ((C113 * C1314 + C31509 * C1327) * C287 +
             (C113 * C1300 + C31509 * C1315) * C293) +
            C1613 * C288 - C1614 * C295 - C1615 * C31609) *
               C31294 * C4762) *
              C31643 +
          (((C113 * C490 + C31509 * C505) * C293 +
            (C113 * C506 + C31509 * C520) * C287 - C556 * C294 - C557 * C288 +
            C558 * C295 + C559 * C31609) *
               C31294 * C4760 +
           ((C113 * C1297 + C31509 * C1309) * C293 +
            (C113 * C1308 + C31509 * C1324) * C287 - C2198 * C294 -
            C2199 * C288 + C2200 * C295 + C2201 * C31609) *
               C31294 * C4761 +
           ((C113 * C1301 + C31509 * C1316) * C293 +
            (C113 * C1317 + C31509 * C1328) * C287 -
            (C113 * C1302 + C31509 * C1318) * C294 -
            (C113 * C1319 + C31509 * C1329) * C288 +
            (C113 * C1303 + C31509 * C1320) * C295 +
            (C113 * C1321 + C31509 * C1330) * C31609) *
               C31294 * C4762) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C31294 * C4760 +
           (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
           C5541 * C4762) *
              C31330 * C1086 +
          ((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C31294 * C4760 +
           (C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C31294 * C4761 +
           (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C31294 * C4762) *
              C31330 * C1087 +
          (C5541 * C4760 +
           (C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C1089 +
            (C113 * C1174 + C31509 * C1182) * C31650 -
            (C113 * C1165 + C31509 * C1175) * C1090 -
            (C113 * C1176 + C31509 * C1183) * C31637 +
            (C113 * C1166 + C31509 * C1177) * C1091 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C31294 * C4760 +
           (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
              C31330 * C1155 -
          (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
           (C5613 + C5612) * C31294 * C4760) *
              C31330 * C1156 +
          (C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
              C31330 * C1157 -
          ((C5636 + C5637) * C31294 * C4762 + (C5635 + C5634) * C31294 * C4761 +
           C5633 * C4760) *
              C31330 * C1158 +
          (C5639 * C4760 + (C5637 + C5636) * C31294 * C4761 +
           ((C113 * C5604 + C31509 * C5607) * C1160 +
            (C113 * C5608 + C31509 * C5610) * C31267) *
               C31294 * C4762) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C31654 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31643 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C31619) *
              C1086 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 +
            (C5796 + C5797) * C31294 * C4762) *
               C31643 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C31654 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C31619) *
              C1087 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C31654 -
           (((C113 * C5754 + C31509 * C5759) * C31267 +
             (C113 * C5750 + C31509 * C5755) * C1160) *
                C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31643 +
           (C5801 * C4760 + (C5799 + C5798) * C31294 * C4761 +
            ((C113 * C5751 + C31509 * C5756) * C1160 +
             (C113 * C5757 + C31509 * C5760) * C31267) *
                C31294 * C4762) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C31294 * C4760 +
           (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
           C5541 * C4762) *
              C1835 +
          ((C550 * C1090 -
            ((C113 * C496 + C31509 * C515) * C31650 +
             (C113 * C486 + C31509 * C497) * C1089) +
            C551 * C31637 - C552 * C1091 - C553 * C31609) *
               C31294 * C4760 +
           (C968 * C1090 - (C5400 * C31650 + C5401 * C1089) + C969 * C31637 -
            C970 * C1091 - C971 * C31609) *
               C31294 * C4761 +
           (C1612 * C1090 - (C5402 * C31650 + C5403 * C1089) + C1613 * C31637 -
            C1614 * C1091 - C1615 * C31609) *
               C31294 * C4762) *
              C1836 +
          (((C113 * C490 + C31509 * C505) * C1089 +
            (C113 * C506 + C31509 * C520) * C31650 - C556 * C1090 -
            C557 * C31637 + C558 * C1091 + C559 * C31609) *
               C31294 * C4760 +
           (C5783 * C1089 + C5784 * C31650 - C2198 * C1090 - C2199 * C31637 +
            C2200 * C1091 + C2201 * C31609) *
               C31294 * C4761 +
           (C5785 * C1089 + C5786 * C31650 -
            (C113 * C1302 + C31509 * C1318) * C1090 -
            (C113 * C1319 + C31509 * C1329) * C31637 +
            (C113 * C1303 + C31509 * C1320) * C1091 +
            (C113 * C1321 + C31509 * C1330) * C31609) *
               C31294 * C4762) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C1835 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C1836 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C31619) *
              C31653 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C1836 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C1835 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C31619) *
              C31641 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C1835 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C1836 +
           (C5801 * C4760 + (C5799 + C5798) * C31294 * C4761 +
            ((C113 * C5751 + C31509 * C5756) * C1160 +
             (C113 * C5757 + C31509 * C5760) * C31267) *
                C31294 * C4762) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C31294 * C4760 +
           (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
              C2010 -
          (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
           ((C113 * C496 + C31509 * C515) * C31267 +
            (C113 * C486 + C31509 * C497) * C1160) *
               C31294 * C4760) *
              C2011 +
          (((C113 * C490 + C31509 * C505) * C1160 +
            (C113 * C506 + C31509 * C520) * C31267) *
               C31294 * C4760 +
           (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
              C2012 -
          (((C113 * C6502 + C31509 * C6508) * C31267 +
            (C113 * C6499 + C31509 * C6503) * C1160) *
               C31294 * C4762 +
           ((C113 * C2421 + C31509 * C2426) * C31267 +
            (C113 * C2417 + C31509 * C2420) * C1160) *
               C31294 * C4761 +
           ((C113 * C2025 + C31509 * C2035) * C31267 +
            (C113 * C2017 + C31509 * C2026) * C1160) *
               C31294 * C4760) *
              C2013 +
          (((C113 * C2018 + C31509 * C2027) * C1160 +
            (C113 * C2028 + C31509 * C2036) * C31267) *
               C31294 * C4760 +
           ((C113 * C6500 + C31509 * C6504) * C1160 +
            (C113 * C6505 + C31509 * C6509) * C31267) *
               C31294 * C4761 +
           ((C113 * C6501 + C31509 * C6506) * C1160 +
            (C113 * C6507 + C31509 * C6510) * C31267) *
               C31294 * C4762) *
              C2014) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
           C9306 * C490 + C9303 * C505) *
              C114 +
          (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
           C9306 * C506 + C9303 * C520) *
              C102 -
          (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
           C9304 * C120 + C9301 * C128) *
              C115 -
          (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
           C9304 * C129 + C9301 * C141) *
              C103 +
          (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
           C9306 * C492 + C9303 * C509) *
              C116 +
          (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
           C9306 * C510 + C9303 * C522) *
              C104 -
          (C9306 * C493 + C9303 * C511 + C9305 * C488 + C9302 * C501 +
           C9304 * C122 + C9301 * C132) *
              C117 -
          (C9306 * C512 + C9303 * C523 + C9305 * C502 + C9302 * C518 +
           C9304 * C133 + C9301 * C143) *
              C105 +
          (C9304 * C123 + C9301 * C134 + C9305 * C489 + C9302 * C503 +
           C9306 * C494 + C9303 * C513) *
              C118 +
          (C9304 * C135 + C9301 * C144 + C9305 * C504 + C9302 * C519 +
           C9306 * C514 + C9303 * C524) *
              C106) *
         C31294 * C31498 * C31330 * C31318) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C293 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C287 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C294 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C288 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C295 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31609) *
              C31294 * C31498 * C31330 * C31653 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C294 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C287 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C293) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C288 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C295 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C31609) *
              C31294 * C31498 * C31330 * C31641 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C293 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C287 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C294 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C288 +
           (C9304 * C303 + C9301 * C320 + C9305 * C1298 + C9302 * C1311 +
            C9306 * C1303 + C9303 * C1320) *
               C295 +
           (C9304 * C321 + C9301 * C333 + C9305 * C1310 + C9302 * C1325 +
            C9306 * C1321 + C9303 * C1330) *
               C31609) *
              C31294 * C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C293 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C287 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C294 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C288 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C295 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31609) *
              C31294 * C31498 * C31654 +
          ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
            C9306 * C2016 + C9303 * C2024) *
               C294 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C287 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C293) +
           (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
            C9306 * C2023 + C9303 * C2034) *
               C288 -
           (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
            C9304 * C487 + C9301 * C499) *
               C295 -
           (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
            C9304 * C500 + C9301 * C517) *
               C31609) *
              C31294 * C31498 * C31643 +
          ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
            C9306 * C2018 + C9303 * C2027) *
               C293 +
           (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
            C9306 * C2028 + C9303 * C2036) *
               C287 -
           (C9306 * C2019 + C9303 * C2029 + C9305 * C2016 + C9302 * C2024 +
            C9304 * C491 + C9301 * C507) *
               C294 -
           (C9306 * C2030 + C9303 * C2037 + C9305 * C2023 + C9302 * C2034 +
            C9304 * C508 + C9301 * C521) *
               C288 +
           (C9304 * C492 + C9301 * C509 + C9305 * C2015 + C9302 * C2022 +
            C9306 * C2020 + C9303 * C2031) *
               C295 +
           (C9304 * C510 + C9301 * C522 + C9305 * C2021 + C9302 * C2033 +
            C9306 * C2032 + C9303 * C2038) *
               C31609) *
              C31294 * C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C1089 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31650 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C1090 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31637 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C1091 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31609) *
              C31294 * C31498 * C31330 * C1086 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C1090 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31650 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1089) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C31637 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C1091 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C31609) *
              C31294 * C31498 * C31330 * C1087 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C1089 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C31650 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C1090 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C31637 +
           (C9304 * C303 + C9301 * C320 + C9305 * C1298 + C9302 * C1311 +
            C9306 * C1303 + C9303 * C1320) *
               C1091 +
           (C9304 * C321 + C9301 * C333 + C9305 * C1310 + C9302 * C1325 +
            C9306 * C1321 + C9303 * C1330) *
               C31609) *
              C31294 * C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C1160 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31267) *
              C31294 * C31498 * C31330 * C1155 -
          ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
            C9304 * C307 + C9301 * C326) *
               C31267 +
           (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
            C9304 * C297 + C9301 * C308) *
               C1160) *
              C31294 * C31498 * C31330 * C1156 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C1160 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C31267) *
              C31294 * C31498 * C31330 * C1157 -
          ((C9306 * C5752 + C9303 * C5758 + C9305 * C1717 + C9302 * C1722 +
            C9304 * C1171 + C9301 * C1181) *
               C31267 +
           (C9306 * C5749 + C9303 * C5753 + C9305 * C1713 + C9302 * C1716 +
            C9304 * C1163 + C9301 * C1172) *
               C1160) *
              C31294 * C31498 * C31330 * C1158 +
          ((C9304 * C1164 + C9301 * C1173 + C9305 * C5750 + C9302 * C5755 +
            C9306 * C5751 + C9303 * C5756) *
               C1160 +
           (C9304 * C1174 + C9301 * C1182 + C9305 * C5754 + C9302 * C5759 +
            C9306 * C5757 + C9303 * C5760) *
               C31267) *
              C31294 * C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1160 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31267) *
               C31294 * C31498 * C31654 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31267 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1160) *
               C31294 * C31498 * C31643 +
           ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
             C9306 * C2018 + C9303 * C2027) *
                C1160 +
            (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
             C9306 * C2028 + C9303 * C2036) *
                C31267) *
               C31294 * C31498 * C31619) *
              C1086 +
          (((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1160 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31267) *
               C31294 * C31498 * C31643 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31267 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1160) *
               C31294 * C31498 * C31654 -
           ((C9306 * C6505 + C9303 * C6509 + C9305 * C2421 + C9302 * C2426 +
             C9304 * C1308 + C9301 * C1324) *
                C31267 +
            (C9306 * C6500 + C9303 * C6504 + C9305 * C2417 + C9302 * C2420 +
             C9304 * C1297 + C9301 * C1309) *
                C1160) *
               C31294 * C31498 * C31619) *
              C1087 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C1160 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C31267) *
               C31294 * C31498 * C31654 -
           ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
             C9304 * C1314 + C9301 * C1327) *
                C31267 +
            (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
             C9304 * C1300 + C9301 * C1315) *
                C1160) *
               C31294 * C31498 * C31643 +
           ((C9304 * C1301 + C9301 * C1316 + C9305 * C6499 + C9302 * C6503 +
             C9306 * C6501 + C9303 * C6506) *
                C1160 +
            (C9304 * C1317 + C9301 * C1328 + C9305 * C6502 + C9302 * C6508 +
             C9306 * C6507 + C9303 * C6510) *
                C31267) *
               C31294 * C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C1089 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31650 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C1090 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31637 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C1091 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31609) *
              C31294 * C31498 * C1835 +
          ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
            C9306 * C2016 + C9303 * C2024) *
               C1090 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31650 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1089) +
           (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
            C9306 * C2023 + C9303 * C2034) *
               C31637 -
           (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
            C9304 * C487 + C9301 * C499) *
               C1091 -
           (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
            C9304 * C500 + C9301 * C517) *
               C31609) *
              C31294 * C31498 * C1836 +
          ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
            C9306 * C2018 + C9303 * C2027) *
               C1089 +
           (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
            C9306 * C2028 + C9303 * C2036) *
               C31650 -
           (C9306 * C2019 + C9303 * C2029 + C9305 * C2016 + C9302 * C2024 +
            C9304 * C491 + C9301 * C507) *
               C1090 -
           (C9306 * C2030 + C9303 * C2037 + C9305 * C2023 + C9302 * C2034 +
            C9304 * C508 + C9301 * C521) *
               C31637 +
           (C9304 * C492 + C9301 * C509 + C9305 * C2015 + C9302 * C2022 +
            C9306 * C2020 + C9303 * C2031) *
               C1091 +
           (C9304 * C510 + C9301 * C522 + C9305 * C2021 + C9302 * C2033 +
            C9306 * C2032 + C9303 * C2038) *
               C31609) *
              C31294 * C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1160 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31267) *
               C31294 * C31498 * C1835 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31267 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1160) *
               C31294 * C31498 * C1836 +
           ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
             C9306 * C2018 + C9303 * C2027) *
                C1160 +
            (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
             C9306 * C2028 + C9303 * C2036) *
                C31267) *
               C31294 * C31498 * C31619) *
              C31653 +
          (((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1160 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31267) *
               C31294 * C31498 * C1836 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31267 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1160) *
               C31294 * C31498 * C1835 -
           ((C9306 * C6505 + C9303 * C6509 + C9305 * C2421 + C9302 * C2426 +
             C9304 * C1308 + C9301 * C1324) *
                C31267 +
            (C9306 * C6500 + C9303 * C6504 + C9305 * C2417 + C9302 * C2420 +
             C9304 * C1297 + C9301 * C1309) *
                C1160) *
               C31294 * C31498 * C31619) *
              C31641 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C1160 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C31267) *
               C31294 * C31498 * C1835 -
           ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
             C9304 * C1314 + C9301 * C1327) *
                C31267 +
            (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
             C9304 * C1300 + C9301 * C1315) *
                C1160) *
               C31294 * C31498 * C1836 +
           ((C9304 * C1301 + C9301 * C1316 + C9305 * C6499 + C9302 * C6503 +
             C9306 * C6501 + C9303 * C6506) *
                C1160 +
            (C9304 * C1317 + C9301 * C1328 + C9305 * C6502 + C9302 * C6508 +
             C9306 * C6507 + C9303 * C6510) *
                C31267) *
               C31294 * C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C1160 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31267) *
              C31294 * C31498 * C2010 -
          ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
            C9304 * C496 + C9301 * C515) *
               C31267 +
           (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
            C9304 * C486 + C9301 * C497) *
               C1160) *
              C31294 * C31498 * C2011 +
          ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
            C9306 * C2018 + C9303 * C2027) *
               C1160 +
           (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
            C9306 * C2028 + C9303 * C2036) *
               C31267) *
              C31294 * C31498 * C2012 -
          ((C9306 * C10777 + C9303 * C10781 + C9305 * C2028 + C9302 * C2036 +
            C9304 * C2025 + C9301 * C2035) *
               C31267 +
           (C9306 * C10775 + C9303 * C10778 + C9305 * C2018 + C9302 * C2027 +
            C9304 * C2017 + C9301 * C2026) *
               C1160) *
              C31294 * C31498 * C2013 +
          ((C9304 * C2018 + C9301 * C2027 + C9305 * C10775 + C9302 * C10778 +
            C9306 * C10776 + C9303 * C10779) *
               C1160 +
           (C9304 * C2028 + C9301 * C2036 + C9305 * C10777 + C9302 * C10781 +
            C9306 * C10780 + C9303 * C10782) *
               C31267) *
              C31294 * C31498 * C2014) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C665 +
                (C113 * C127 + C31509 * C140) * C659 - C168 * C666 -
                C169 * C660 + C170 * C667 + C171 * C661 - C172 * C668 -
                C173 * C31620) *
                   C107 +
               (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
                C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31620) *
                   C108 +
               (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
                C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31620) *
                   C109) *
                  C31498 * C31588 +
              ((C550 * C666 -
                ((C113 * C496 + C31509 * C515) * C659 +
                 (C113 * C486 + C31509 * C497) * C665) +
                C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
                C555 * C31620) *
                   C107 +
               (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
                C554 * C667 - C555 * C661 + C788 * C668 + C789 * C31620) *
                   C108 +
               (C554 * C666 - (C553 * C659 + C552 * C665) + C555 * C660 -
                C788 * C667 - C789 * C661 +
                (C113 * C779 + C31509 * C780) * C668 +
                (C113 * C781 + C31509 * C782) * C31620) *
                   C109) *
                  C31498 * C31417) *
             C31318 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31509 * C126) * C30289 +
                 (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
                 C169 * C31277) *
                    C107 +
                (C168 * C30289 + C169 * C31569 - C170 * C30270 -
                 C171 * C31277) *
                    C108 +
                (C170 * C30289 + C171 * C31569 - C172 * C30270 -
                 C173 * C31277) *
                    C109) *
                   C31498 * C31588 +
               ((C550 * C30270 -
                 ((C113 * C496 + C31509 * C515) * C31569 +
                  (C113 * C486 + C31509 * C497) * C30289) +
                 C551 * C31277) *
                    C107 +
                (C552 * C30270 - (C551 * C31569 + C550 * C30289) +
                 C553 * C31277) *
                    C108 +
                (C554 * C30270 - (C553 * C31569 + C552 * C30289) +
                 C555 * C31277) *
                    C109) *
                   C31498 * C31417) *
                  C1086 +
              (((C361 * C30270 -
                 ((C113 * C307 + C31509 * C326) * C31569 +
                  (C113 * C297 + C31509 * C308) * C30289) +
                 C362 * C31277) *
                    C107 +
                (C363 * C30270 - (C362 * C31569 + C361 * C30289) +
                 C364 * C31277) *
                    C108 +
                (C365 * C30270 - (C364 * C31569 + C363 * C30289) +
                 C366 * C31277) *
                    C109) *
                   C31498 * C31588 +
               (((C113 * C935 + C31509 * C940) * C30289 +
                 (C113 * C941 + C31509 * C950) * C31569 - C968 * C30270 -
                 C969 * C31277) *
                    C107 +
                (C968 * C30289 + C969 * C31569 - C970 * C30270 -
                 C971 * C31277) *
                    C108 +
                (C970 * C30289 + C971 * C31569 - C972 * C30270 -
                 C973 * C31277) *
                    C109) *
                   C31498 * C31417) *
                  C1087 +
              ((((C113 * C301 + C31509 * C316) * C30289 +
                 (C113 * C317 + C31509 * C331) * C31569 - C367 * C30270 -
                 C368 * C31277) *
                    C107 +
                (C367 * C30289 + C368 * C31569 - C369 * C30270 -
                 C370 * C31277) *
                    C108 +
                (C369 * C30289 + C370 * C31569 - C371 * C30270 -
                 C372 * C31277) *
                    C109) *
                   C31498 * C31588 +
               ((C1612 * C30270 -
                 ((C113 * C1314 + C31509 * C1327) * C31569 +
                  (C113 * C1300 + C31509 * C1315) * C30289) +
                 C1613 * C31277) *
                    C107 +
                (C1614 * C30270 - (C1613 * C31569 + C1612 * C30289) +
                 C1615 * C31277) *
                    C108 +
                ((C113 * C1599 + C31509 * C1600) * C30270 -
                 (C1615 * C31569 + C1614 * C30289) +
                 (C113 * C1601 + C31509 * C1602) * C31277) *
                    C109) *
                   C31498 * C31417) *
                  C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30289 +
            (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
            C169 * C31277) *
               C107 +
           (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
               C108 +
           (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
               C109) *
              C31498 * C2299 +
          ((C550 * C30270 -
            ((C113 * C496 + C31509 * C515) * C31569 +
             (C113 * C486 + C31509 * C497) * C30289) +
            C551 * C31277) *
               C107 +
           (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
               C108 +
           (C554 * C30270 - (C553 * C31569 + C552 * C30289) + C555 * C31277) *
               C109) *
              C31498 * C2300 +
          (((C113 * C490 + C31509 * C505) * C30289 +
            (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
            C557 * C31277) *
               C107 +
           (C556 * C30289 + C557 * C31569 - C558 * C30270 - C559 * C31277) *
               C108 +
           (C558 * C30289 + C559 * C31569 - C560 * C30270 - C561 * C31277) *
               C109) *
              C31498 * C2301 +
          ((C2316 * C30270 -
            ((C113 * C2025 + C31509 * C2035) * C31569 +
             (C113 * C2017 + C31509 * C2026) * C30289) +
            C2317 * C31277) *
               C107 +
           (C2318 * C30270 - (C2317 * C31569 + C2316 * C30289) +
            C2319 * C31277) *
               C108 +
           ((C113 * C2303 + C31509 * C2304) * C30270 -
            (C2319 * C31569 + C2318 * C30289) +
            (C113 * C2305 + C31509 * C2306) * C31277) *
               C109) *
              C31498 * C31632) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C31294 * C4760 +
           (C5124 + C5125 - C5126 - C5127 + C5128 + C5129 - C5130 - C5131) *
               C31294 * C4761 +
           (C5132 + C5133 - C5134 - C5135 + C5136 + C5137 - C5138 - C5139) *
               C31294 * C4762) *
              C31588 +
          ((C550 * C666 -
            ((C113 * C496 + C31509 * C515) * C659 +
             (C113 * C486 + C31509 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C31620) *
               C31294 * C4760 +
           (C968 * C666 -
            ((C113 * C941 + C31509 * C950) * C659 +
             (C113 * C935 + C31509 * C940) * C665) +
            C969 * C660 - C970 * C667 - C971 * C661 + C972 * C668 +
            C973 * C31620) *
               C31294 * C4761 +
           (C1612 * C666 -
            ((C113 * C1314 + C31509 * C1327) * C659 +
             (C113 * C1300 + C31509 * C1315) * C665) +
            C1613 * C660 - C1614 * C667 - C1615 * C661 +
            (C113 * C1599 + C31509 * C1600) * C668 +
            (C113 * C1601 + C31509 * C1602) * C31620) *
               C31294 * C4762) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C31294 * C4760 +
            (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
               C31588 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C31294 * C4760 +
            (C6084 - (C6085 + C6086) + C6087) * C31294 * C4761 +
            C6105 * C4762) *
               C31417) *
              C1086 +
          (((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
            (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 +
            C5933 * C4762) *
               C31588 +
           ((C6086 + C6085 - C6084 - C6087) * C31294 * C4760 +
            (C6090 + C6089 - C6088 - C6091) * C31294 * C4761 +
            (C6092 + C6093 - C6102 - C6103) * C31294 * C4762) *
               C31417) *
              C1087 +
          ((C5932 * C4760 + (C5914 + C5913 - C5912 - C5915) * C31294 * C4761 +
            (C5916 + C5917 - C5928 - C5929) * C31294 * C4762) *
               C31588 +
           (C6105 * C4760 + (C6102 - (C6093 + C6092) + C6103) * C31294 * C4761 +
            ((C113 * C6079 + C31509 * C6080) * C30270 -
             ((C113 * C5754 + C31509 * C5759) * C31569 +
              (C113 * C5750 + C31509 * C5755) * C30289) +
             (C113 * C6081 + C31509 * C6082) * C31277) *
                C31294 * C4762) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30289 +
            (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
            C169 * C31277) *
               C31294 * C4760 +
           (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
              C2299 +
          ((C550 * C30270 -
            ((C113 * C496 + C31509 * C515) * C31569 +
             (C113 * C486 + C31509 * C497) * C30289) +
            C551 * C31277) *
               C31294 * C4760 +
           (C6084 - (C6085 + C6086) + C6087) * C31294 * C4761 + C6105 * C4762) *
              C2300 +
          (((C113 * C490 + C31509 * C505) * C30289 +
            (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
            C557 * C31277) *
               C31294 * C4760 +
           (C6662 + C6663 - C6664 - C6665) * C31294 * C4761 +
           (C6666 + C6667 - C6674 - C6675) * C31294 * C4762) *
              C2301 +
          ((C2316 * C30270 -
            ((C113 * C2025 + C31509 * C2035) * C31569 +
             (C113 * C2017 + C31509 * C2026) * C30289) +
            C2317 * C31277) *
               C31294 * C4760 +
           ((C113 * C2418 + C31509 * C2422) * C30270 -
            ((C113 * C2421 + C31509 * C2426) * C31569 +
             (C113 * C2417 + C31509 * C2420) * C30289) +
            (C113 * C2423 + C31509 * C2427) * C31277) *
               C31294 * C4761 +
           ((C113 * C6773 + C31509 * C6774) * C30270 -
            ((C113 * C6502 + C31509 * C6508) * C31569 +
             (C113 * C6499 + C31509 * C6503) * C30289) +
            (C113 * C6775 + C31509 * C6776) * C31277) *
               C31294 * C4762) *
              C31632) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C665 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C659 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C666 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C660 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C667 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C661 -
           (C9306 * C493 + C9303 * C511 + C9305 * C488 + C9302 * C501 +
            C9304 * C122 + C9301 * C132) *
               C668 -
           (C9306 * C512 + C9303 * C523 + C9305 * C502 + C9302 * C518 +
            C9304 * C133 + C9301 * C143) *
               C31620) *
              C31294 * C31498 * C31588 +
          ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
            C9306 * C2016 + C9303 * C2024) *
               C666 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C659 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C665) +
           (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
            C9306 * C2023 + C9303 * C2034) *
               C660 -
           (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
            C9304 * C487 + C9301 * C499) *
               C667 -
           (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
            C9304 * C500 + C9301 * C517) *
               C661 +
           (C9304 * C488 + C9301 * C501 + C9305 * C493 + C9302 * C511 +
            C9306 * C2303 + C9303 * C2304) *
               C668 +
           (C9304 * C502 + C9301 * C518 + C9305 * C512 + C9302 * C523 +
            C9306 * C2305 + C9303 * C2306) *
               C31620) *
              C31294 * C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C30289 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31569 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C30270 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31277) *
               C31294 * C31498 * C31588 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C30270 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C31569 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C30289) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31277) *
               C31294 * C31498 * C31417) *
              C1086 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C30270 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C31569 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C30289) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31277) *
               C31294 * C31498 * C31588 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C30289 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31569 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C30270 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31277) *
               C31294 * C31498 * C31417) *
              C1087 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C30289 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C31569 -
            (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
             C9304 * C302 + C9301 * C318) *
                C30270 -
            (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
             C9304 * C319 + C9301 * C332) *
                C31277) *
               C31294 * C31498 * C31588 +
           ((C9304 * C1299 + C9301 * C1313 + C9305 * C1302 + C9302 * C1318 +
             C9306 * C6773 + C9303 * C6774) *
                C30270 -
            ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
              C9304 * C1314 + C9301 * C1327) *
                 C31569 +
             (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
              C9304 * C1300 + C9301 * C1315) *
                 C30289) +
            (C9304 * C1312 + C9301 * C1326 + C9305 * C1319 + C9302 * C1329 +
             C9306 * C6775 + C9303 * C6776) *
                C31277) *
               C31294 * C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C30289 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31569 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C30270 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31277) *
              C31294 * C31498 * C2299 +
          ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
            C9306 * C2016 + C9303 * C2024) *
               C30270 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31569 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C30289) +
           (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
            C9306 * C2023 + C9303 * C2034) *
               C31277) *
              C31294 * C31498 * C2300 +
          ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
            C9306 * C2018 + C9303 * C2027) *
               C30289 +
           (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
            C9306 * C2028 + C9303 * C2036) *
               C31569 -
           (C9306 * C2019 + C9303 * C2029 + C9305 * C2016 + C9302 * C2024 +
            C9304 * C491 + C9301 * C507) *
               C30270 -
           (C9306 * C2030 + C9303 * C2037 + C9305 * C2023 + C9302 * C2034 +
            C9304 * C508 + C9301 * C521) *
               C31277) *
              C31294 * C31498 * C2301 +
          ((C9304 * C2016 + C9301 * C2024 + C9305 * C2019 + C9302 * C2029 +
            C9306 * C11031 + C9303 * C11032) *
               C30270 -
           ((C9306 * C10777 + C9303 * C10781 + C9305 * C2028 + C9302 * C2036 +
             C9304 * C2025 + C9301 * C2035) *
                C31569 +
            (C9306 * C10775 + C9303 * C10778 + C9305 * C2018 + C9302 * C2027 +
             C9304 * C2017 + C9301 * C2026) *
                C30289) +
           (C9304 * C2023 + C9301 * C2034 + C9305 * C2030 + C9302 * C2037 +
            C9306 * C11033 + C9303 * C11034) *
               C31277) *
              C31294 * C31498 * C31632) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C107 +
          (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 + C172 * C116 +
           C173 * C104 - C174 * C117 - C175 * C105 + C176 * C118 +
           C177 * C106) *
              C108 +
          (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 + C174 * C116 +
           C175 * C104 - C176 * C117 - C177 * C105 +
           (C113 * C125 + C31509 * C138) * C118 +
           (C113 * C139 + C31509 * C146) * C106) *
              C109) *
         C31498 * C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C107 +
           (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
            C172 * C295 + C173 * C31609) *
               C108 +
           (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
            C174 * C295 + C175 * C31609) *
               C109) *
              C31498 * C31330 * C31653 +
          ((C361 * C294 -
            ((C113 * C307 + C31509 * C326) * C287 +
             (C113 * C297 + C31509 * C308) * C293) +
            C362 * C288 - C363 * C295 - C364 * C31609) *
               C107 +
           (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
            C365 * C295 - C366 * C31609) *
               C108 +
           (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
            (C113 * C300 + C31509 * C314) * C295 -
            (C113 * C315 + C31509 * C330) * C31609) *
               C109) *
              C31498 * C31330 * C31641 +
          (((C113 * C301 + C31509 * C316) * C293 +
            (C113 * C317 + C31509 * C331) * C287 - C367 * C294 - C368 * C288 +
            C369 * C295 + C370 * C31609) *
               C107 +
           (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
            C371 * C295 + C372 * C31609) *
               C108 +
           (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
            (C113 * C305 + C31509 * C324) * C295 +
            (C113 * C325 + C31509 * C335) * C31609) *
               C109) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C107 +
           (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
            C172 * C1091 + C173 * C31609) *
               C108 +
           (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
            C174 * C1091 + C175 * C31609) *
               C109) *
              C31498 * C31330 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C31509 * C326) * C31650 +
             (C113 * C297 + C31509 * C308) * C1089) +
            C362 * C31637 - C363 * C1091 - C364 * C31609) *
               C107 +
           (C363 * C1090 - (C362 * C31650 + C361 * C1089) + C364 * C31637 -
            C365 * C1091 - C366 * C31609) *
               C108 +
           (C365 * C1090 - (C364 * C31650 + C363 * C1089) + C366 * C31637 -
            C678 * C1091 - C679 * C31609) *
               C109) *
              C31498 * C31330 * C1087 +
          (((C113 * C301 + C31509 * C316) * C1089 +
            (C113 * C317 + C31509 * C331) * C31650 - C367 * C1090 -
            C368 * C31637 + C369 * C1091 + C370 * C31609) *
               C107 +
           (C367 * C1089 + C368 * C31650 - C369 * C1090 - C370 * C31637 +
            C371 * C1091 + C372 * C31609) *
               C108 +
           (C369 * C1089 + C370 * C31650 - C371 * C1090 - C372 * C31637 +
            (C113 * C305 + C31509 * C324) * C1091 +
            (C113 * C325 + C31509 * C335) * C31609) *
               C109) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C107 +
           (C168 * C1160 + C169 * C31267) * C108 +
           (C170 * C1160 + C171 * C31267) * C109) *
              C31498 * C31330 * C1155 -
          ((C364 * C31267 + C363 * C1160) * C109 +
           (C362 * C31267 + C361 * C1160) * C108 +
           ((C113 * C307 + C31509 * C326) * C31267 +
            (C113 * C297 + C31509 * C308) * C1160) *
               C107) *
              C31498 * C31330 * C1156 +
          (((C113 * C301 + C31509 * C316) * C1160 +
            (C113 * C317 + C31509 * C331) * C31267) *
               C107 +
           (C367 * C1160 + C368 * C31267) * C108 +
           (C369 * C1160 + C370 * C31267) * C109) *
              C31498 * C31330 * C1157 -
          (((C113 * C1167 + C31509 * C1179) * C31267 +
            (C113 * C1161 + C31509 * C1168) * C1160) *
               C109 +
           ((C113 * C1169 + C31509 * C1180) * C31267 +
            (C113 * C1162 + C31509 * C1170) * C1160) *
               C108 +
           ((C113 * C1171 + C31509 * C1181) * C31267 +
            (C113 * C1163 + C31509 * C1172) * C1160) *
               C107) *
              C31498 * C31330 * C1158 +
          (((C113 * C1164 + C31509 * C1173) * C1160 +
            (C113 * C1174 + C31509 * C1182) * C31267) *
               C107 +
           ((C113 * C1165 + C31509 * C1175) * C1160 +
            (C113 * C1176 + C31509 * C1183) * C31267) *
               C108 +
           ((C113 * C1166 + C31509 * C1177) * C1160 +
            (C113 * C1178 + C31509 * C1184) * C31267) *
               C109) *
              C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C107 +
           (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
            C172 * C1091 + C173 * C31609) *
               C108 +
           (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
            C174 * C1091 + C175 * C31609) *
               C109) *
              C31498 * C1835 +
          ((C550 * C1090 -
            ((C113 * C496 + C31509 * C515) * C31650 +
             (C113 * C486 + C31509 * C497) * C1089) +
            C551 * C31637 - C552 * C1091 - C553 * C31609) *
               C107 +
           (C552 * C1090 - (C551 * C31650 + C550 * C1089) + C553 * C31637 -
            C554 * C1091 - C555 * C31609) *
               C108 +
           (C554 * C1090 - (C553 * C31650 + C552 * C1089) + C555 * C31637 -
            C788 * C1091 - C789 * C31609) *
               C109) *
              C31498 * C1836 +
          (((C113 * C490 + C31509 * C505) * C1089 +
            (C113 * C506 + C31509 * C520) * C31650 - C556 * C1090 -
            C557 * C31637 + C558 * C1091 + C559 * C31609) *
               C107 +
           (C556 * C1089 + C557 * C31650 - C558 * C1090 - C559 * C31637 +
            C560 * C1091 + C561 * C31609) *
               C108 +
           (C558 * C1089 + C559 * C31650 - C560 * C1090 - C561 * C31637 +
            (C113 * C494 + C31509 * C513) * C1091 +
            (C113 * C514 + C31509 * C524) * C31609) *
               C109) *
              C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C1835 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C1836 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C107 +
            (C556 * C1160 + C557 * C31267) * C108 +
            (C558 * C1160 + C559 * C31267) * C109) *
               C31498 * C31619) *
              C31653 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C1836 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C1835 -
           (((C113 * C1304 + C31509 * C1322) * C31267 +
             (C113 * C1295 + C31509 * C1305) * C1160) *
                C109 +
            ((C113 * C1306 + C31509 * C1323) * C31267 +
             (C113 * C1296 + C31509 * C1307) * C1160) *
                C108 +
            ((C113 * C1308 + C31509 * C1324) * C31267 +
             (C113 * C1297 + C31509 * C1309) * C1160) *
                C107) *
               C31498 * C31619) *
              C31641 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C1835 -
           ((C1615 * C31267 + C1614 * C1160) * C109 +
            (C1613 * C31267 + C1612 * C1160) * C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C1836 +
           (((C113 * C1301 + C31509 * C1316) * C1160 +
             (C113 * C1317 + C31509 * C1328) * C31267) *
                C107 +
            ((C113 * C1302 + C31509 * C1318) * C1160 +
             (C113 * C1319 + C31509 * C1329) * C31267) *
                C108 +
            ((C113 * C1303 + C31509 * C1320) * C1160 +
             (C113 * C1321 + C31509 * C1330) * C31267) *
                C109) *
               C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C31294 * C4760 +
          ((C113 * C297 + C31509 * C308) * C114 +
           (C113 * C307 + C31509 * C326) * C102 - C361 * C115 - C362 * C103 +
           C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 + C678 * C118 +
           C679 * C106) *
              C31294 * C4761 +
          ((C113 * C301 + C31509 * C316) * C114 +
           (C113 * C317 + C31509 * C331) * C102 - C367 * C115 - C368 * C103 +
           C369 * C116 + C370 * C104 - C371 * C117 - C372 * C105 +
           (C113 * C305 + C31509 * C324) * C118 +
           (C113 * C325 + C31509 * C335) * C106) *
              C31294 * C4762) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C31294 * C4760 +
           (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
           C4915 * C4762) *
              C31330 * C31653 +
          ((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C31294 * C4760 +
           (C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C31294 * C4761 +
           (C4890 - (C4908 + C4909) + C4895 - C4896 - C4897) * C31294 * C4762) *
              C31330 * C31641 +
          (C4915 * C4760 +
           (C4909 + C4908 - C4890 - C4895 + C4896 + C4897) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C293 +
            (C113 * C1174 + C31509 * C1182) * C287 -
            (C113 * C1165 + C31509 * C1175) * C294 -
            (C113 * C1176 + C31509 * C1183) * C288 +
            (C113 * C1166 + C31509 * C1177) * C295 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C31294 * C4760 +
           (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
           C5541 * C4762) *
              C31330 * C1086 +
          ((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C31294 * C4760 +
           (C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C31294 * C4761 +
           (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C31294 * C4762) *
              C31330 * C1087 +
          (C5541 * C4760 +
           (C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C1089 +
            (C113 * C1174 + C31509 * C1182) * C31650 -
            (C113 * C1165 + C31509 * C1175) * C1090 -
            (C113 * C1176 + C31509 * C1183) * C31637 +
            (C113 * C1166 + C31509 * C1177) * C1091 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C31294 * C4760 +
           (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
              C31330 * C1155 -
          (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
           (C5613 + C5612) * C31294 * C4760) *
              C31330 * C1156 +
          (C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
              C31330 * C1157 -
          ((C5636 + C5637) * C31294 * C4762 + (C5635 + C5634) * C31294 * C4761 +
           C5633 * C4760) *
              C31330 * C1158 +
          (C5639 * C4760 + (C5637 + C5636) * C31294 * C4761 +
           ((C113 * C5604 + C31509 * C5607) * C1160 +
            (C113 * C5608 + C31509 * C5610) * C31267) *
               C31294 * C4762) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C31294 * C4760 +
           (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
           C5541 * C4762) *
              C1835 +
          ((C550 * C1090 -
            ((C113 * C496 + C31509 * C515) * C31650 +
             (C113 * C486 + C31509 * C497) * C1089) +
            C551 * C31637 - C552 * C1091 - C553 * C31609) *
               C31294 * C4760 +
           (C968 * C1090 - (C5400 * C31650 + C5401 * C1089) + C969 * C31637 -
            C970 * C1091 - C971 * C31609) *
               C31294 * C4761 +
           (C1612 * C1090 - (C5402 * C31650 + C5403 * C1089) + C1613 * C31637 -
            C1614 * C1091 - C1615 * C31609) *
               C31294 * C4762) *
              C1836 +
          (((C113 * C490 + C31509 * C505) * C1089 +
            (C113 * C506 + C31509 * C520) * C31650 - C556 * C1090 -
            C557 * C31637 + C558 * C1091 + C559 * C31609) *
               C31294 * C4760 +
           (C5783 * C1089 + C5784 * C31650 - C2198 * C1090 - C2199 * C31637 +
            C2200 * C1091 + C2201 * C31609) *
               C31294 * C4761 +
           (C5785 * C1089 + C5786 * C31650 -
            (C113 * C1302 + C31509 * C1318) * C1090 -
            (C113 * C1319 + C31509 * C1329) * C31637 +
            (C113 * C1303 + C31509 * C1320) * C1091 +
            (C113 * C1321 + C31509 * C1330) * C31609) *
               C31294 * C4762) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C1835 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C1836 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C31619) *
              C31653 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C1836 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C1835 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C31619) *
              C31641 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C1835 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C1836 +
           (C5801 * C4760 + (C5799 + C5798) * C31294 * C4761 +
            ((C113 * C5751 + C31509 * C5756) * C1160 +
             (C113 * C5757 + C31509 * C5760) * C31267) *
                C31294 * C4762) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
           C9306 * C490 + C9303 * C505) *
              C114 +
          (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
           C9306 * C506 + C9303 * C520) *
              C102 -
          (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
           C9304 * C120 + C9301 * C128) *
              C115 -
          (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
           C9304 * C129 + C9301 * C141) *
              C103 +
          (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
           C9306 * C492 + C9303 * C509) *
              C116 +
          (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
           C9306 * C510 + C9303 * C522) *
              C104 -
          (C9306 * C493 + C9303 * C511 + C9305 * C488 + C9302 * C501 +
           C9304 * C122 + C9301 * C132) *
              C117 -
          (C9306 * C512 + C9303 * C523 + C9305 * C502 + C9302 * C518 +
           C9304 * C133 + C9301 * C143) *
              C105 +
          (C9304 * C123 + C9301 * C134 + C9305 * C489 + C9302 * C503 +
           C9306 * C494 + C9303 * C513) *
              C118 +
          (C9304 * C135 + C9301 * C144 + C9305 * C504 + C9302 * C519 +
           C9306 * C514 + C9303 * C524) *
              C106) *
         C31294 * C31498 * C31330 * C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C293 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C287 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C294 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C288 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C295 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31609) *
              C31294 * C31498 * C31330 * C31653 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C294 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C287 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C293) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C288 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C295 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C31609) *
              C31294 * C31498 * C31330 * C31641 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C293 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C287 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C294 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C288 +
           (C9304 * C303 + C9301 * C320 + C9305 * C1298 + C9302 * C1311 +
            C9306 * C1303 + C9303 * C1320) *
               C295 +
           (C9304 * C321 + C9301 * C333 + C9305 * C1310 + C9302 * C1325 +
            C9306 * C1321 + C9303 * C1330) *
               C31609) *
              C31294 * C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C1089 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31650 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C1090 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31637 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C1091 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31609) *
              C31294 * C31498 * C31330 * C1086 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C1090 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31650 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1089) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C31637 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C1091 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C31609) *
              C31294 * C31498 * C31330 * C1087 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C1089 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C31650 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C1090 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C31637 +
           (C9304 * C303 + C9301 * C320 + C9305 * C1298 + C9302 * C1311 +
            C9306 * C1303 + C9303 * C1320) *
               C1091 +
           (C9304 * C321 + C9301 * C333 + C9305 * C1310 + C9302 * C1325 +
            C9306 * C1321 + C9303 * C1330) *
               C31609) *
              C31294 * C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C1160 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31267) *
              C31294 * C31498 * C31330 * C1155 -
          ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
            C9304 * C307 + C9301 * C326) *
               C31267 +
           (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
            C9304 * C297 + C9301 * C308) *
               C1160) *
              C31294 * C31498 * C31330 * C1156 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C1160 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C31267) *
              C31294 * C31498 * C31330 * C1157 -
          ((C9306 * C5752 + C9303 * C5758 + C9305 * C1717 + C9302 * C1722 +
            C9304 * C1171 + C9301 * C1181) *
               C31267 +
           (C9306 * C5749 + C9303 * C5753 + C9305 * C1713 + C9302 * C1716 +
            C9304 * C1163 + C9301 * C1172) *
               C1160) *
              C31294 * C31498 * C31330 * C1158 +
          ((C9304 * C1164 + C9301 * C1173 + C9305 * C5750 + C9302 * C5755 +
            C9306 * C5751 + C9303 * C5756) *
               C1160 +
           (C9304 * C1174 + C9301 * C1182 + C9305 * C5754 + C9302 * C5759 +
            C9306 * C5757 + C9303 * C5760) *
               C31267) *
              C31294 * C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C1089 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31650 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C1090 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31637 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C1091 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31609) *
              C31294 * C31498 * C1835 +
          ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
            C9306 * C2016 + C9303 * C2024) *
               C1090 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31650 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1089) +
           (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
            C9306 * C2023 + C9303 * C2034) *
               C31637 -
           (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
            C9304 * C487 + C9301 * C499) *
               C1091 -
           (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
            C9304 * C500 + C9301 * C517) *
               C31609) *
              C31294 * C31498 * C1836 +
          ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
            C9306 * C2018 + C9303 * C2027) *
               C1089 +
           (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
            C9306 * C2028 + C9303 * C2036) *
               C31650 -
           (C9306 * C2019 + C9303 * C2029 + C9305 * C2016 + C9302 * C2024 +
            C9304 * C491 + C9301 * C507) *
               C1090 -
           (C9306 * C2030 + C9303 * C2037 + C9305 * C2023 + C9302 * C2034 +
            C9304 * C508 + C9301 * C521) *
               C31637 +
           (C9304 * C492 + C9301 * C509 + C9305 * C2015 + C9302 * C2022 +
            C9306 * C2020 + C9303 * C2031) *
               C1091 +
           (C9304 * C510 + C9301 * C522 + C9305 * C2021 + C9302 * C2033 +
            C9306 * C2032 + C9303 * C2038) *
               C31609) *
              C31294 * C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1160 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31267) *
               C31294 * C31498 * C1835 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31267 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1160) *
               C31294 * C31498 * C1836 +
           ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
             C9306 * C2018 + C9303 * C2027) *
                C1160 +
            (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
             C9306 * C2028 + C9303 * C2036) *
                C31267) *
               C31294 * C31498 * C31619) *
              C31653 +
          (((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1160 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31267) *
               C31294 * C31498 * C1836 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31267 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1160) *
               C31294 * C31498 * C1835 -
           ((C9306 * C6505 + C9303 * C6509 + C9305 * C2421 + C9302 * C2426 +
             C9304 * C1308 + C9301 * C1324) *
                C31267 +
            (C9306 * C6500 + C9303 * C6504 + C9305 * C2417 + C9302 * C2420 +
             C9304 * C1297 + C9301 * C1309) *
                C1160) *
               C31294 * C31498 * C31619) *
              C31641 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C1160 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C31267) *
               C31294 * C31498 * C1835 -
           ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
             C9304 * C1314 + C9301 * C1327) *
                C31267 +
            (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
             C9304 * C1300 + C9301 * C1315) *
                C1160) *
               C31294 * C31498 * C1836 +
           ((C9304 * C1301 + C9301 * C1316 + C9305 * C6499 + C9302 * C6503 +
             C9306 * C6501 + C9303 * C6506) *
                C1160 +
            (C9304 * C1317 + C9301 * C1328 + C9305 * C6502 + C9302 * C6508 +
             C9306 * C6507 + C9303 * C6510) *
                C31267) *
               C31294 * C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30299 +
             (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
             C169 * C31280 + C170 * C30305 + C171 * C2901) *
                C31294 * C4760 +
            (C7404 + C7405 - C7406 - C7407 + C7408 + C7409) * C31294 * C4761 +
            C7427 * C4762) *
               C3298 +
           ((C550 * C30295 -
             ((C113 * C496 + C31509 * C515) * C31272 +
              (C113 * C486 + C31509 * C497) * C30299) +
             C551 * C31280 - C552 * C30305 - C553 * C2901) *
                C31294 * C4760 +
            (C7574 - (C7575 + C7576) + C7577 - C7578 - C7579) * C31294 * C4761 +
            (C7580 - (C7581 + C7582) + C7583 - C7584 - C7585) * C31294 *
                C4762) *
               C31417) *
              C31587 +
          (((C7406 - (C7405 + C7404) + C7407 - C7408 - C7409) * C31294 * C4760 +
            (C7412 - (C7411 + C7410) + C7413 - C7414 - C7415) * C31294 * C4761 +
            (C7416 - (C7417 + C7418) + C7419 - C7420 - C7421) * C31294 *
                C4762) *
               C3298 +
           ((C7576 + C7575 - C7574 - C7577 + C7578 + C7579) * C31294 * C4760 +
            (C7582 + C7581 - C7580 - C7583 + C7584 + C7585) * C31294 * C4761 +
            (C5787 * C30299 + C5788 * C31272 - C6099 * C30295 - C6100 * C31280 +
             (C113 * C1715 + C31509 * C1720) * C30305 +
             (C113 * C1721 + C31509 * C1724) * C2901) *
                C31294 * C4762) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30299 +
             (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
             C169 * C31280 + C170 * C30305 + C171 * C2901) *
                C107 +
            (C168 * C30299 + C169 * C31272 - C170 * C30295 - C171 * C31280 +
             C172 * C30305 + C173 * C2901) *
                C108 +
            (C170 * C30299 + C171 * C31272 - C172 * C30295 - C173 * C31280 +
             C174 * C30305 + C175 * C2901) *
                C109) *
               C31498 * C3298 +
           ((C550 * C30295 -
             ((C113 * C496 + C31509 * C515) * C31272 +
              (C113 * C486 + C31509 * C497) * C30299) +
             C551 * C31280 - C552 * C30305 - C553 * C2901) *
                C107 +
            (C552 * C30295 - (C551 * C31272 + C550 * C30299) + C553 * C31280 -
             C554 * C30305 - C555 * C2901) *
                C108 +
            (C554 * C30295 - (C553 * C31272 + C552 * C30299) + C555 * C31280 -
             C788 * C30305 - C789 * C2901) *
                C109) *
               C31498 * C31417) *
              C31587 +
          (((C361 * C30295 -
             ((C113 * C307 + C31509 * C326) * C31272 +
              (C113 * C297 + C31509 * C308) * C30299) +
             C362 * C31280 - C363 * C30305 - C364 * C2901) *
                C107 +
            (C363 * C30295 - (C362 * C31272 + C361 * C30299) + C364 * C31280 -
             C365 * C30305 - C366 * C2901) *
                C108 +
            (C365 * C30295 - (C364 * C31272 + C363 * C30299) + C366 * C31280 -
             C678 * C30305 - C679 * C2901) *
                C109) *
               C31498 * C3298 +
           (((C113 * C935 + C31509 * C940) * C30299 +
             (C113 * C941 + C31509 * C950) * C31272 - C968 * C30295 -
             C969 * C31280 + C970 * C30305 + C971 * C2901) *
                C107 +
            (C968 * C30299 + C969 * C31272 - C970 * C30295 - C971 * C31280 +
             C972 * C30305 + C973 * C2901) *
                C108 +
            (C970 * C30299 + C971 * C31272 - C972 * C30295 - C973 * C31280 +
             (C113 * C939 + C31509 * C948) * C30305 +
             (C113 * C949 + C31509 * C954) * C2901) *
                C109) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C30299 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31272 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C30295 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31280 +
            (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
             C9306 * C492 + C9303 * C509) *
                C30305 +
            (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
             C9306 * C510 + C9303 * C522) *
                C2901) *
               C31294 * C31498 * C3298 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C30295 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C31272 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C30299) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31280 -
            (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
             C9304 * C487 + C9301 * C499) *
                C30305 -
            (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
             C9304 * C500 + C9301 * C517) *
                C2901) *
               C31294 * C31498 * C31417) *
              C31587 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C30295 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C31272 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C30299) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31280 -
            (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
             C9304 * C298 + C9301 * C310) *
                C30305 -
            (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
             C9304 * C311 + C9301 * C328) *
                C2901) *
               C31294 * C31498 * C3298 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C30299 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31272 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C30295 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31280 +
            (C9304 * C937 + C9301 * C944 + C9305 * C1295 + C9302 * C1305 +
             C9306 * C2419 + C9303 * C2424) *
                C30305 +
            (C9304 * C945 + C9301 * C952 + C9305 * C1304 + C9302 * C1322 +
             C9306 * C2425 + C9303 * C2428) *
                C2901) *
               C31294 * C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C31294 * C4760 +
            (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
               C31413 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C31294 * C4760 +
            (C7278 - (C7279 + C7280) + C7281) * C31294 * C4761 +
            C7739 * C4762) *
               C31420 +
           (((C113 * C490 + C31509 * C505) * C2641 +
             (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
             C557 * C31277) *
                C31294 * C4760 +
            (C7286 + C7287 - C7288 - C7289) * C31294 * C4761 +
            (C7290 + C7291 - C7292 - C7293) * C31294 * C4762) *
               C3806) *
              C31587 +
          (((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
            (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 +
            C7131 * C4762) *
               C31413 +
           ((C7280 + C7279 - C7278 - C7281) * C31294 * C4760 +
            (C7284 + C7283 - C7282 - C7285) * C31294 * C4761 +
            (C7733 + C7734 - C7735 - C7736) * C31294 * C4762) *
               C31420 +
           ((C7288 - (C7287 + C7286) + C7289) * C31294 * C4760 +
            (C7292 - (C7291 + C7290) + C7293) * C31294 * C4761 +
            ((C113 * C6657 + C31509 * C6658) * C2642 -
             (C5789 * C2635 + C5790 * C2641) +
             (C113 * C6659 + C31509 * C6660) * C31277) *
                C31294 * C4762) *
               C3806) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
                C109) *
               C31498 * C31413 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31277) *
                C109) *
               C31498 * C31420 +
           (((C113 * C490 + C31509 * C505) * C2641 +
             (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
             C557 * C31277) *
                C107 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31277) *
                C108 +
            (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C31277) *
                C109) *
               C31498 * C3806) *
              C31587 +
          (((C361 * C2642 -
             ((C113 * C307 + C31509 * C326) * C2635 +
              (C113 * C297 + C31509 * C308) * C2641) +
             C362 * C31277) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
                C109) *
               C31498 * C31413 +
           (((C113 * C935 + C31509 * C940) * C2641 +
             (C113 * C941 + C31509 * C950) * C2635 - C968 * C2642 -
             C969 * C31277) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31277) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31277) *
                C109) *
               C31498 * C31420 +
           ((C2198 * C2642 -
             ((C113 * C1308 + C31509 * C1324) * C2635 +
              (C113 * C1297 + C31509 * C1309) * C2641) +
             C2199 * C31277) *
                C107 +
            (C2200 * C2642 - (C2199 * C2635 + C2198 * C2641) + C2201 * C31277) *
                C108 +
            ((C113 * C2185 + C31509 * C2186) * C2642 -
             (C2201 * C2635 + C2200 * C2641) +
             (C113 * C2187 + C31509 * C2188) * C31277) *
                C109) *
               C31498 * C3806) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C2641 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C2635 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C2642 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31277) *
               C31294 * C31498 * C31413 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C2642 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C2635 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C2641) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31277) *
               C31294 * C31498 * C31420 +
           ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
             C9306 * C2018 + C9303 * C2027) *
                C2641 +
            (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
             C9306 * C2028 + C9303 * C2036) *
                C2635 -
            (C9306 * C2019 + C9303 * C2029 + C9305 * C2016 + C9302 * C2024 +
             C9304 * C491 + C9301 * C507) *
                C2642 -
            (C9306 * C2030 + C9303 * C2037 + C9305 * C2023 + C9302 * C2034 +
             C9304 * C508 + C9301 * C521) *
                C31277) *
               C31294 * C31498 * C3806) *
              C31587 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C2642 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C2635 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C2641) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31277) *
               C31294 * C31498 * C31413 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C2641 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C2635 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C2642 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31277) *
               C31294 * C31498 * C31420 +
           ((C9304 * C1296 + C9301 * C1307 + C9305 * C2418 + C9302 * C2422 +
             C9306 * C10929 + C9303 * C10930) *
                C2642 -
            ((C9306 * C6505 + C9303 * C6509 + C9305 * C2421 + C9302 * C2426 +
              C9304 * C1308 + C9301 * C1324) *
                 C2635 +
             (C9306 * C6500 + C9303 * C6504 + C9305 * C2417 + C9302 * C2420 +
              C9304 * C1297 + C9301 * C1309) *
                 C2641) +
            (C9304 * C1306 + C9301 * C1323 + C9305 * C2423 + C9302 * C2427 +
             C9306 * C10931 + C9303 * C10932) *
                C31277) *
               C31294 * C31498 * C3806) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C2533 +
                (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
                C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
                C173 * C31620) *
                   C107 +
               (C168 * C2533 + C169 * C31659 - C170 * C2534 - C171 * C31652 +
                C172 * C2535 + C173 * C31639 - C174 * C2536 - C175 * C31620) *
                   C108 +
               (C170 * C2533 + C171 * C31659 - C172 * C2534 - C173 * C31652 +
                C174 * C2535 + C175 * C31639 - C176 * C2536 - C177 * C31620) *
                   C109) *
                  C31498 * C3298 +
              ((C550 * C2534 -
                ((C113 * C496 + C31509 * C515) * C31659 +
                 (C113 * C486 + C31509 * C497) * C2533) +
                C551 * C31652 - C552 * C2535 - C553 * C31639 + C554 * C2536 +
                C555 * C31620) *
                   C107 +
               (C552 * C2534 - (C551 * C31659 + C550 * C2533) + C553 * C31652 -
                C554 * C2535 - C555 * C31639 + C788 * C2536 + C789 * C31620) *
                   C108 +
               (C554 * C2534 - (C553 * C31659 + C552 * C2533) + C555 * C31652 -
                C788 * C2535 - C789 * C31639 +
                (C113 * C779 + C31509 * C780) * C2536 +
                (C113 * C781 + C31509 * C782) * C31620) *
                   C109) *
                  C31498 * C31417) *
             C31318 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C31509 * C126) * C2641 +
                 (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
                 C169 * C31277) *
                    C107 +
                (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                    C108 +
                (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
                    C109) *
                   C31498 * C3298 +
               ((C550 * C2642 -
                 ((C113 * C496 + C31509 * C515) * C2635 +
                  (C113 * C486 + C31509 * C497) * C2641) +
                 C551 * C31277) *
                    C107 +
                (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                    C108 +
                (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31277) *
                    C109) *
                   C31498 * C31417) *
                  C31653 +
              (((C361 * C2642 -
                 ((C113 * C307 + C31509 * C326) * C2635 +
                  (C113 * C297 + C31509 * C308) * C2641) +
                 C362 * C31277) *
                    C107 +
                (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
                    C108 +
                (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
                    C109) *
                   C31498 * C3298 +
               (((C113 * C935 + C31509 * C940) * C2641 +
                 (C113 * C941 + C31509 * C950) * C2635 - C968 * C2642 -
                 C969 * C31277) *
                    C107 +
                (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31277) *
                    C108 +
                (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31277) *
                    C109) *
                   C31498 * C31417) *
                  C31641 +
              ((((C113 * C301 + C31509 * C316) * C2641 +
                 (C113 * C317 + C31509 * C331) * C2635 - C367 * C2642 -
                 C368 * C31277) *
                    C107 +
                (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31277) *
                    C108 +
                (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31277) *
                    C109) *
                   C31498 * C3298 +
               ((C1612 * C2642 -
                 ((C113 * C1314 + C31509 * C1327) * C2635 +
                  (C113 * C1300 + C31509 * C1315) * C2641) +
                 C1613 * C31277) *
                    C107 +
                (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) +
                 C1615 * C31277) *
                    C108 +
                ((C113 * C1599 + C31509 * C1600) * C2642 -
                 (C1615 * C2635 + C1614 * C2641) +
                 (C113 * C1601 + C31509 * C1602) * C31277) *
                    C109) *
                   C31498 * C31417) *
                  C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2641 +
            (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
            C169 * C31277) *
               C107 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) * C108 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
               C109) *
              C31498 * C31661 +
          ((C550 * C2642 -
            ((C113 * C496 + C31509 * C515) * C2635 +
             (C113 * C486 + C31509 * C497) * C2641) +
            C551 * C31277) *
               C107 +
           (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
               C108 +
           (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31277) *
               C109) *
              C31498 * C31658 +
          (((C113 * C490 + C31509 * C505) * C2641 +
            (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
            C557 * C31277) *
               C107 +
           (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31277) * C108 +
           (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C31277) *
               C109) *
              C31498 * C31649 +
          ((C2316 * C2642 -
            ((C113 * C2025 + C31509 * C2035) * C2635 +
             (C113 * C2017 + C31509 * C2026) * C2641) +
            C2317 * C31277) *
               C107 +
           (C2318 * C2642 - (C2317 * C2635 + C2316 * C2641) + C2319 * C31277) *
               C108 +
           ((C113 * C2303 + C31509 * C2304) * C2642 -
            (C2319 * C2635 + C2318 * C2641) +
            (C113 * C2305 + C31509 * C2306) * C31277) *
               C109) *
              C31498 * C31632) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C31294 * C4760 +
           (C6994 + C6995 - C6996 - C6997 + C6998 + C6999 - C7000 - C7001) *
               C31294 * C4761 +
           (C7002 + C7003 - C7004 - C7005 + C7006 + C7007 - C7008 - C7009) *
               C31294 * C4762) *
              C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C31509 * C515) * C31659 +
             (C113 * C486 + C31509 * C497) * C2533) +
            C551 * C31652 - C552 * C2535 - C553 * C31639 + C554 * C2536 +
            C555 * C31620) *
               C31294 * C4760 +
           (C968 * C2534 - (C5400 * C31659 + C5401 * C2533) + C969 * C31652 -
            C970 * C2535 - C971 * C31639 + C972 * C2536 + C973 * C31620) *
               C31294 * C4761 +
           (C1612 * C2534 - (C5402 * C31659 + C5403 * C2533) + C1613 * C31652 -
            C1614 * C2535 - C1615 * C31639 +
            (C113 * C1599 + C31509 * C1600) * C2536 +
            (C113 * C1601 + C31509 * C1602) * C31620) *
               C31294 * C4762) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C31294 * C4760 +
            (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
               C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C31294 * C4760 +
            (C7278 - (C7279 + C7280) + C7281) * C31294 * C4761 +
            C7739 * C4762) *
               C31417) *
              C31653 +
          (((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
            (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 +
            C7131 * C4762) *
               C3298 +
           ((C7280 + C7279 - C7278 - C7281) * C31294 * C4760 +
            (C7284 + C7283 - C7282 - C7285) * C31294 * C4761 +
            (C7733 + C7734 - C7735 - C7736) * C31294 * C4762) *
               C31417) *
              C31641 +
          ((C7130 * C4760 + (C7118 + C7117 - C7116 - C7119) * C31294 * C4761 +
            (C7120 + C7121 - C7122 - C7123) * C31294 * C4762) *
               C3298 +
           (C7739 * C4760 + (C7735 - (C7734 + C7733) + C7736) * C31294 * C4761 +
            ((C113 * C6079 + C31509 * C6080) * C2642 -
             (C6214 * C2635 + C6215 * C2641) +
             (C113 * C6081 + C31509 * C6082) * C31277) *
                C31294 * C4762) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2641 +
            (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
            C169 * C31277) *
               C31294 * C4760 +
           (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
              C31661 +
          ((C550 * C2642 -
            ((C113 * C496 + C31509 * C515) * C2635 +
             (C113 * C486 + C31509 * C497) * C2641) +
            C551 * C31277) *
               C31294 * C4760 +
           (C7278 - (C7279 + C7280) + C7281) * C31294 * C4761 + C7739 * C4762) *
              C31658 +
          (((C113 * C490 + C31509 * C505) * C2641 +
            (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
            C557 * C31277) *
               C31294 * C4760 +
           (C7286 + C7287 - C7288 - C7289) * C31294 * C4761 +
           (C7290 + C7291 - C7292 - C7293) * C31294 * C4762) *
              C31649 +
          ((C2316 * C2642 -
            ((C113 * C2025 + C31509 * C2035) * C2635 +
             (C113 * C2017 + C31509 * C2026) * C2641) +
            C2317 * C31277) *
               C31294 * C4760 +
           ((C113 * C2418 + C31509 * C2422) * C2642 -
            (C6890 * C2635 + C6891 * C2641) +
            (C113 * C2423 + C31509 * C2427) * C31277) *
               C31294 * C4761 +
           ((C113 * C6773 + C31509 * C6774) * C2642 -
            (C6888 * C2635 + C6889 * C2641) +
            (C113 * C6775 + C31509 * C6776) * C31277) *
               C31294 * C4762) *
              C31632) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C2533 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31659 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C2534 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31652 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C2535 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31639 -
           (C9306 * C493 + C9303 * C511 + C9305 * C488 + C9302 * C501 +
            C9304 * C122 + C9301 * C132) *
               C2536 -
           (C9306 * C512 + C9303 * C523 + C9305 * C502 + C9302 * C518 +
            C9304 * C133 + C9301 * C143) *
               C31620) *
              C31294 * C31498 * C3298 +
          ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
            C9306 * C2016 + C9303 * C2024) *
               C2534 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31659 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C2533) +
           (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
            C9306 * C2023 + C9303 * C2034) *
               C31652 -
           (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
            C9304 * C487 + C9301 * C499) *
               C2535 -
           (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
            C9304 * C500 + C9301 * C517) *
               C31639 +
           (C9304 * C488 + C9301 * C501 + C9305 * C493 + C9302 * C511 +
            C9306 * C2303 + C9303 * C2304) *
               C2536 +
           (C9304 * C502 + C9301 * C518 + C9305 * C512 + C9302 * C523 +
            C9306 * C2305 + C9303 * C2306) *
               C31620) *
              C31294 * C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C2641 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C2635 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C2642 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31277) *
               C31294 * C31498 * C3298 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C2642 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C2635 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C2641) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31277) *
               C31294 * C31498 * C31417) *
              C31653 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C2642 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C2635 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C2641) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31277) *
               C31294 * C31498 * C3298 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C2641 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C2635 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C2642 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31277) *
               C31294 * C31498 * C31417) *
              C31641 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C2641 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C2635 -
            (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
             C9304 * C302 + C9301 * C318) *
                C2642 -
            (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
             C9304 * C319 + C9301 * C332) *
                C31277) *
               C31294 * C31498 * C3298 +
           ((C9304 * C1299 + C9301 * C1313 + C9305 * C1302 + C9302 * C1318 +
             C9306 * C6773 + C9303 * C6774) *
                C2642 -
            ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
              C9304 * C1314 + C9301 * C1327) *
                 C2635 +
             (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
              C9304 * C1300 + C9301 * C1315) *
                 C2641) +
            (C9304 * C1312 + C9301 * C1326 + C9305 * C1319 + C9302 * C1329 +
             C9306 * C6775 + C9303 * C6776) *
                C31277) *
               C31294 * C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C2641 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C2635 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C2642 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31277) *
              C31294 * C31498 * C31661 +
          ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
            C9306 * C2016 + C9303 * C2024) *
               C2642 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C2635 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C2641) +
           (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
            C9306 * C2023 + C9303 * C2034) *
               C31277) *
              C31294 * C31498 * C31658 +
          ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
            C9306 * C2018 + C9303 * C2027) *
               C2641 +
           (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
            C9306 * C2028 + C9303 * C2036) *
               C2635 -
           (C9306 * C2019 + C9303 * C2029 + C9305 * C2016 + C9302 * C2024 +
            C9304 * C491 + C9301 * C507) *
               C2642 -
           (C9306 * C2030 + C9303 * C2037 + C9305 * C2023 + C9302 * C2034 +
            C9304 * C508 + C9301 * C521) *
               C31277) *
              C31294 * C31498 * C31649 +
          ((C9304 * C2016 + C9301 * C2024 + C9305 * C2019 + C9302 * C2029 +
            C9306 * C11031 + C9303 * C11032) *
               C2642 -
           ((C9306 * C10777 + C9303 * C10781 + C9305 * C2028 + C9302 * C2036 +
             C9304 * C2025 + C9301 * C2035) *
                C2635 +
            (C9306 * C10775 + C9303 * C10778 + C9305 * C2018 + C9302 * C2027 +
             C9304 * C2017 + C9301 * C2026) *
                C2641) +
           (C9304 * C2023 + C9301 * C2034 + C9305 * C2030 + C9302 * C2037 +
            C9306 * C11033 + C9303 * C11034) *
               C31277) *
              C31294 * C31498 * C31632) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30299 +
            (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
            C169 * C31280 + C170 * C30305 + C171 * C2901) *
               C31294 * C4760 +
           (C7404 + C7405 - C7406 - C7407 + C7408 + C7409) * C31294 * C4761 +
           C7427 * C4762) *
              C31413 +
          ((C550 * C30295 -
            ((C113 * C496 + C31509 * C515) * C31272 +
             (C113 * C486 + C31509 * C497) * C30299) +
            C551 * C31280 - C552 * C30305 - C553 * C2901) *
               C31294 * C4760 +
           (C7574 - (C7575 + C7576) + C7577 - C7578 - C7579) * C31294 * C4761 +
           (C7580 - (C7581 + C7582) + C7583 - C7584 - C7585) * C31294 * C4762) *
              C31420 +
          (((C113 * C490 + C31509 * C505) * C30299 +
            (C113 * C506 + C31509 * C520) * C31272 - C556 * C30295 -
            C557 * C31280 + C558 * C30305 + C559 * C2901) *
               C31294 * C4760 +
           (C5783 * C30299 + C5784 * C31272 - C2198 * C30295 - C2199 * C31280 +
            C2200 * C30305 + C2201 * C2901) *
               C31294 * C4761 +
           (C5785 * C30299 + C5786 * C31272 - C6672 * C30295 - C6673 * C31280 +
            (C113 * C1303 + C31509 * C1320) * C30305 +
            (C113 * C1321 + C31509 * C1330) * C2901) *
               C31294 * C4762) *
              C3806) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30299 +
            (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
            C169 * C31280 + C170 * C30305 + C171 * C2901) *
               C107 +
           (C168 * C30299 + C169 * C31272 - C170 * C30295 - C171 * C31280 +
            C172 * C30305 + C173 * C2901) *
               C108 +
           (C170 * C30299 + C171 * C31272 - C172 * C30295 - C173 * C31280 +
            C174 * C30305 + C175 * C2901) *
               C109) *
              C31498 * C31413 +
          ((C550 * C30295 -
            ((C113 * C496 + C31509 * C515) * C31272 +
             (C113 * C486 + C31509 * C497) * C30299) +
            C551 * C31280 - C552 * C30305 - C553 * C2901) *
               C107 +
           (C552 * C30295 - (C551 * C31272 + C550 * C30299) + C553 * C31280 -
            C554 * C30305 - C555 * C2901) *
               C108 +
           (C554 * C30295 - (C553 * C31272 + C552 * C30299) + C555 * C31280 -
            C788 * C30305 - C789 * C2901) *
               C109) *
              C31498 * C31420 +
          (((C113 * C490 + C31509 * C505) * C30299 +
            (C113 * C506 + C31509 * C520) * C31272 - C556 * C30295 -
            C557 * C31280 + C558 * C30305 + C559 * C2901) *
               C107 +
           (C556 * C30299 + C557 * C31272 - C558 * C30295 - C559 * C31280 +
            C560 * C30305 + C561 * C2901) *
               C108 +
           (C558 * C30299 + C559 * C31272 - C560 * C30295 - C561 * C31280 +
            (C113 * C494 + C31509 * C513) * C30305 +
            (C113 * C514 + C31509 * C524) * C2901) *
               C109) *
              C31498 * C3806) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C30299 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31272 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C30295 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31280 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C30305 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C2901) *
              C31294 * C31498 * C31413 +
          ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
            C9306 * C2016 + C9303 * C2024) *
               C30295 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31272 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C30299) +
           (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
            C9306 * C2023 + C9303 * C2034) *
               C31280 -
           (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
            C9304 * C487 + C9301 * C499) *
               C30305 -
           (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
            C9304 * C500 + C9301 * C517) *
               C2901) *
              C31294 * C31498 * C31420 +
          ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
            C9306 * C2018 + C9303 * C2027) *
               C30299 +
           (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
            C9306 * C2028 + C9303 * C2036) *
               C31272 -
           (C9306 * C2019 + C9303 * C2029 + C9305 * C2016 + C9302 * C2024 +
            C9304 * C491 + C9301 * C507) *
               C30295 -
           (C9306 * C2030 + C9303 * C2037 + C9305 * C2023 + C9302 * C2034 +
            C9304 * C508 + C9301 * C521) *
               C31280 +
           (C9304 * C492 + C9301 * C509 + C9305 * C2015 + C9302 * C2022 +
            C9306 * C2020 + C9303 * C2031) *
               C30305 +
           (C9304 * C510 + C9301 * C522 + C9305 * C2021 + C9302 * C2033 +
            C9306 * C2032 + C9303 * C2038) *
               C2901) *
              C31294 * C31498 * C3806) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
                C109) *
               C31498 * C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31277) *
                C109) *
               C31498 * C31417) *
              C31653 +
          (((C361 * C2642 -
             ((C113 * C307 + C31509 * C326) * C2635 +
              (C113 * C297 + C31509 * C308) * C2641) +
             C362 * C31277) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
                C109) *
               C31498 * C3298 +
           (((C113 * C935 + C31509 * C940) * C2641 +
             (C113 * C941 + C31509 * C950) * C2635 - C968 * C2642 -
             C969 * C31277) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31277) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31277) *
                C109) *
               C31498 * C31417) *
              C31641 +
          ((((C113 * C301 + C31509 * C316) * C2641 +
             (C113 * C317 + C31509 * C331) * C2635 - C367 * C2642 -
             C368 * C31277) *
                C107 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31277) *
                C108 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31277) *
                C109) *
               C31498 * C3298 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C31509 * C1327) * C2635 +
              (C113 * C1300 + C31509 * C1315) * C2641) +
             C1613 * C31277) *
                C107 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C31277) *
                C108 +
            ((C113 * C1599 + C31509 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C31509 * C1602) * C31277) *
                C109) *
               C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C107 +
           (C168 * C2533 + C169 * C31659 - C170 * C2534 - C171 * C31652 +
            C172 * C2535 + C173 * C31639 - C174 * C2536 - C175 * C31620) *
               C108 +
           (C170 * C2533 + C171 * C31659 - C172 * C2534 - C173 * C31652 +
            C174 * C2535 + C175 * C31639 - C176 * C2536 - C177 * C31620) *
               C109) *
              C31498 * C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C31509 * C515) * C31659 +
             (C113 * C486 + C31509 * C497) * C2533) +
            C551 * C31652 - C552 * C2535 - C553 * C31639 + C554 * C2536 +
            C555 * C31620) *
               C107 +
           (C552 * C2534 - (C551 * C31659 + C550 * C2533) + C553 * C31652 -
            C554 * C2535 - C555 * C31639 + C788 * C2536 + C789 * C31620) *
               C108 +
           (C554 * C2534 - (C553 * C31659 + C552 * C2533) + C555 * C31652 -
            C788 * C2535 - C789 * C31639 +
            (C113 * C779 + C31509 * C780) * C2536 +
            (C113 * C781 + C31509 * C782) * C31620) *
               C109) *
              C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C31294 * C4760 +
           (C6994 + C6995 - C6996 - C6997 + C6998 + C6999 - C7000 - C7001) *
               C31294 * C4761 +
           (C7002 + C7003 - C7004 - C7005 + C7006 + C7007 - C7008 - C7009) *
               C31294 * C4762) *
              C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C31509 * C515) * C31659 +
             (C113 * C486 + C31509 * C497) * C2533) +
            C551 * C31652 - C552 * C2535 - C553 * C31639 + C554 * C2536 +
            C555 * C31620) *
               C31294 * C4760 +
           (C968 * C2534 - (C5400 * C31659 + C5401 * C2533) + C969 * C31652 -
            C970 * C2535 - C971 * C31639 + C972 * C2536 + C973 * C31620) *
               C31294 * C4761 +
           (C1612 * C2534 - (C5402 * C31659 + C5403 * C2533) + C1613 * C31652 -
            C1614 * C2535 - C1615 * C31639 +
            (C113 * C1599 + C31509 * C1600) * C2536 +
            (C113 * C1601 + C31509 * C1602) * C31620) *
               C31294 * C4762) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C31294 * C4760 +
            (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
               C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C31294 * C4760 +
            (C7278 - (C7279 + C7280) + C7281) * C31294 * C4761 +
            C7739 * C4762) *
               C31417) *
              C31653 +
          (((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
            (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 +
            C7131 * C4762) *
               C3298 +
           ((C7280 + C7279 - C7278 - C7281) * C31294 * C4760 +
            (C7284 + C7283 - C7282 - C7285) * C31294 * C4761 +
            (C7733 + C7734 - C7735 - C7736) * C31294 * C4762) *
               C31417) *
              C31641 +
          ((C7130 * C4760 + (C7118 + C7117 - C7116 - C7119) * C31294 * C4761 +
            (C7120 + C7121 - C7122 - C7123) * C31294 * C4762) *
               C3298 +
           (C7739 * C4760 + (C7735 - (C7734 + C7733) + C7736) * C31294 * C4761 +
            ((C113 * C6079 + C31509 * C6080) * C2642 -
             (C6214 * C2635 + C6215 * C2641) +
             (C113 * C6081 + C31509 * C6082) * C31277) *
                C31294 * C4762) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C2533 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31659 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C2534 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31652 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C2535 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31639 -
           (C9306 * C493 + C9303 * C511 + C9305 * C488 + C9302 * C501 +
            C9304 * C122 + C9301 * C132) *
               C2536 -
           (C9306 * C512 + C9303 * C523 + C9305 * C502 + C9302 * C518 +
            C9304 * C133 + C9301 * C143) *
               C31620) *
              C31294 * C31498 * C3298 +
          ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
            C9306 * C2016 + C9303 * C2024) *
               C2534 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31659 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C2533) +
           (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
            C9306 * C2023 + C9303 * C2034) *
               C31652 -
           (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
            C9304 * C487 + C9301 * C499) *
               C2535 -
           (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
            C9304 * C500 + C9301 * C517) *
               C31639 +
           (C9304 * C488 + C9301 * C501 + C9305 * C493 + C9302 * C511 +
            C9306 * C2303 + C9303 * C2304) *
               C2536 +
           (C9304 * C502 + C9301 * C518 + C9305 * C512 + C9302 * C523 +
            C9306 * C2305 + C9303 * C2306) *
               C31620) *
              C31294 * C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C2641 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C2635 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C2642 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31277) *
               C31294 * C31498 * C3298 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C2642 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C2635 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C2641) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31277) *
               C31294 * C31498 * C31417) *
              C31653 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C2642 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C2635 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C2641) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31277) *
               C31294 * C31498 * C3298 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C2641 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C2635 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C2642 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31277) *
               C31294 * C31498 * C31417) *
              C31641 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C2641 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C2635 -
            (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
             C9304 * C302 + C9301 * C318) *
                C2642 -
            (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
             C9304 * C319 + C9301 * C332) *
                C31277) *
               C31294 * C31498 * C3298 +
           ((C9304 * C1299 + C9301 * C1313 + C9305 * C1302 + C9302 * C1318 +
             C9306 * C6773 + C9303 * C6774) *
                C2642 -
            ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
              C9304 * C1314 + C9301 * C1327) *
                 C2635 +
             (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
              C9304 * C1300 + C9301 * C1315) *
                 C2641) +
            (C9304 * C1312 + C9301 * C1326 + C9305 * C1319 + C9302 * C1329 +
             C9306 * C6775 + C9303 * C6776) *
                C31277) *
               C31294 * C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30289 +
            (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
            C169 * C31277) *
               C107 +
           (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
               C108 +
           (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
               C109) *
              C31498 * C31330 * C1431 +
          ((C361 * C30270 -
            ((C113 * C307 + C31509 * C326) * C31569 +
             (C113 * C297 + C31509 * C308) * C30289) +
            C362 * C31277) *
               C107 +
           (C363 * C30270 - (C362 * C31569 + C361 * C30289) + C364 * C31277) *
               C108 +
           (C365 * C30270 - (C364 * C31569 + C363 * C30289) + C366 * C31277) *
               C109) *
              C31498 * C31330 * C1432 +
          (((C113 * C301 + C31509 * C316) * C30289 +
            (C113 * C317 + C31509 * C331) * C31569 - C367 * C30270 -
            C368 * C31277) *
               C107 +
           (C367 * C30289 + C368 * C31569 - C369 * C30270 - C370 * C31277) *
               C108 +
           (C369 * C30289 + C370 * C31569 - C371 * C30270 - C372 * C31277) *
               C109) *
              C31498 * C31330 * C1433 +
          ((C1450 * C30270 -
            ((C113 * C1171 + C31509 * C1181) * C31569 +
             (C113 * C1163 + C31509 * C1172) * C30289) +
            C1451 * C31277) *
               C107 +
           (C1452 * C30270 - (C1451 * C31569 + C1450 * C30289) +
            C1453 * C31277) *
               C108 +
           ((C113 * C1437 + C31509 * C1438) * C30270 -
            (C1453 * C31569 + C1452 * C30289) +
            (C113 * C1439 + C31509 * C1440) * C31277) *
               C109) *
              C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C107 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31620) *
               C108 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31620) *
               C109) *
              C31498 * C31330 * C31587 +
          ((C361 * C666 -
            ((C113 * C307 + C31509 * C326) * C659 +
             (C113 * C297 + C31509 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C31620) *
               C107 +
           (C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
            C365 * C667 - C366 * C661 + C678 * C668 + C679 * C31620) *
               C108 +
           (C365 * C666 - (C364 * C659 + C363 * C665) + C366 * C660 -
            C678 * C667 - C679 * C661 + (C113 * C669 + C31509 * C670) * C668 +
            (C113 * C671 + C31509 * C672) * C31620) *
               C109) *
              C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C31294 * C4760 +
           (C5124 + C5125 - C5126 - C5127 + C5128 + C5129 - C5130 - C5131) *
               C31294 * C4761 +
           (C5132 + C5133 - C5134 - C5135 + C5136 + C5137 - C5138 - C5139) *
               C31294 * C4762) *
              C31330 * C31587 +
          ((C5126 - (C5125 + C5124) + C5127 - C5128 - C5129 + C5130 + C5131) *
               C31294 * C4760 +
           (C5134 - (C5133 + C5132) + C5135 - C5136 - C5137 + C5138 + C5139) *
               C31294 * C4761 +
           (C1450 * C666 - (C4902 * C659 + C4903 * C665) + C1451 * C660 -
            C1452 * C667 - C1453 * C661 +
            (C113 * C1437 + C31509 * C1438) * C668 +
            (C113 * C1439 + C31509 * C1440) * C31620) *
               C31294 * C4762) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30289 +
            (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
            C169 * C31277) *
               C31294 * C4760 +
           (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
              C31330 * C1431 +
          ((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
           (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 + C5933 * C4762) *
              C31330 * C1432 +
          (C5932 * C4760 + (C5914 + C5913 - C5912 - C5915) * C31294 * C4761 +
           (C5916 + C5917 - C5928 - C5929) * C31294 * C4762) *
              C31330 * C1433 +
          (C5933 * C4760 + (C5928 - (C5917 + C5916) + C5929) * C31294 * C4761 +
           ((C113 * C5899 + C31509 * C5900) * C30270 -
            (C5630 * C31569 + C5631 * C30289) +
            (C113 * C5901 + C31509 * C5902) * C31277) *
               C31294 * C4762) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C665 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C659 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C666 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C660 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C667 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C661 -
           (C9306 * C493 + C9303 * C511 + C9305 * C488 + C9302 * C501 +
            C9304 * C122 + C9301 * C132) *
               C668 -
           (C9306 * C512 + C9303 * C523 + C9305 * C502 + C9302 * C518 +
            C9304 * C133 + C9301 * C143) *
               C31620) *
              C31294 * C31498 * C31330 * C31587 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C666 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C659 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C665) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C660 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C667 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C661 +
           (C9304 * C299 + C9301 * C312 + C9305 * C938 + C9302 * C946 +
            C9306 * C2185 + C9303 * C2186) *
               C668 +
           (C9304 * C313 + C9301 * C329 + C9305 * C947 + C9302 * C953 +
            C9306 * C2187 + C9303 * C2188) *
               C31620) *
              C31294 * C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C30289 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31569 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C30270 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31277) *
              C31294 * C31498 * C31330 * C1431 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C30270 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31569 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C30289) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C31277) *
              C31294 * C31498 * C31330 * C1432 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C30289 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C31569 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C30270 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C31277) *
              C31294 * C31498 * C31330 * C1433 +
          ((C9304 * C1162 + C9301 * C1170 + C9305 * C1714 + C9302 * C1718 +
            C9306 * C6657 + C9303 * C6658) *
               C30270 -
           ((C9306 * C5752 + C9303 * C5758 + C9305 * C1717 + C9302 * C1722 +
             C9304 * C1171 + C9301 * C1181) *
                C31569 +
            (C9306 * C5749 + C9303 * C5753 + C9305 * C1713 + C9302 * C1716 +
             C9304 * C1163 + C9301 * C1172) *
                C30289) +
           (C9304 * C1169 + C9301 * C1180 + C9305 * C1719 + C9302 * C1723 +
            C9306 * C6659 + C9303 * C6660) *
               C31277) *
              C31294 * C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C31588 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31417) *
              C1431 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31417 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C31588) *
              C1432 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C31588 -
           ((C1615 * C31267 + C1614 * C1160) * C109 +
            (C1613 * C31267 + C1612 * C1160) * C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C31417) *
              C1433 +
          ((((C113 * C1713 + C31509 * C1716) * C1160 +
             (C113 * C1717 + C31509 * C1722) * C31267) *
                C107 +
            ((C113 * C1714 + C31509 * C1718) * C1160 +
             (C113 * C1719 + C31509 * C1723) * C31267) *
                C108 +
            ((C113 * C1715 + C31509 * C1720) * C1160 +
             (C113 * C1721 + C31509 * C1724) * C31267) *
                C109) *
               C31498 * C31417 -
           ((C1453 * C31267 + C1452 * C1160) * C109 +
            (C1451 * C31267 + C1450 * C1160) * C108 +
            ((C113 * C1171 + C31509 * C1181) * C31267 +
             (C113 * C1163 + C31509 * C1172) * C1160) *
                C107) *
               C31498 * C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C293 +
             (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31609) *
                C107 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31609) *
                C108 +
            (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
             C174 * C295 + C175 * C31609) *
                C109) *
               C31498 * C31588 +
           ((C550 * C294 -
             ((C113 * C496 + C31509 * C515) * C287 +
              (C113 * C486 + C31509 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C31609) *
                C107 +
            (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
             C554 * C295 - C555 * C31609) *
                C108 +
            (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
             C788 * C295 - C789 * C31609) *
                C109) *
               C31498 * C31417) *
              C31587 +
          (((C361 * C294 -
             ((C113 * C307 + C31509 * C326) * C287 +
              (C113 * C297 + C31509 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C31609) *
                C107 +
            (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
             C365 * C295 - C366 * C31609) *
                C108 +
            (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
             C678 * C295 - C679 * C31609) *
                C109) *
               C31498 * C31588 +
           (((C113 * C935 + C31509 * C940) * C293 +
             (C113 * C941 + C31509 * C950) * C287 - C968 * C294 - C969 * C288 +
             C970 * C295 + C971 * C31609) *
                C107 +
            (C968 * C293 + C969 * C287 - C970 * C294 - C971 * C288 +
             C972 * C295 + C973 * C31609) *
                C108 +
            (C970 * C293 + C971 * C287 - C972 * C294 - C973 * C288 +
             (C113 * C939 + C31509 * C948) * C295 +
             (C113 * C949 + C31509 * C954) * C31609) *
                C109) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C293 +
             (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31609) *
                C31294 * C4760 +
            (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
            C4915 * C4762) *
               C31588 +
           ((C550 * C294 -
             ((C113 * C496 + C31509 * C515) * C287 +
              (C113 * C486 + C31509 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C31609) *
                C31294 * C4760 +
            (C5384 - (C5404 + C5405) + C5389 - C5390 - C5391) * C31294 * C4761 +
            (C5392 - (C5406 + C5407) + C5397 - C5398 - C5399) * C31294 *
                C4762) *
               C31417) *
              C31587 +
          (((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C31294 * C4760 +
            (C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C31294 * C4761 +
            (C4890 - (C4908 + C4909) + C4895 - C4896 - C4897) * C31294 *
                C4762) *
               C31588 +
           ((C5405 + C5404 - C5384 - C5389 + C5390 + C5391) * C31294 * C4760 +
            (C5407 + C5406 - C5392 - C5397 + C5398 + C5399) * C31294 * C4761 +
            ((C113 * C1713 + C31509 * C1716) * C293 +
             (C113 * C1717 + C31509 * C1722) * C287 -
             (C113 * C1714 + C31509 * C1718) * C294 -
             (C113 * C1719 + C31509 * C1723) * C288 +
             (C113 * C1715 + C31509 * C1720) * C295 +
             (C113 * C1721 + C31509 * C1724) * C31609) *
                C31294 * C4762) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C31588 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31417) *
              C1431 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C31417 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C31588) *
              C1432 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C31588 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31417) *
              C1433 +
          ((C6213 * C4760 + (C6217 + C6216) * C31294 * C4761 +
            ((C113 * C6203 + C31509 * C6204) * C1160 +
             (C113 * C6205 + C31509 * C6206) * C31267) *
                C31294 * C4762) *
               C31417 -
           ((C5636 + C5637) * C31294 * C4762 +
            (C5635 + C5634) * C31294 * C4761 + C5633 * C4760) *
               C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C293 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C287 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C294 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C288 +
            (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
             C9306 * C492 + C9303 * C509) *
                C295 +
            (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
             C9306 * C510 + C9303 * C522) *
                C31609) *
               C31294 * C31498 * C31588 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C294 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C287 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C293) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C288 -
            (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
             C9304 * C487 + C9301 * C499) *
                C295 -
            (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
             C9304 * C500 + C9301 * C517) *
                C31609) *
               C31294 * C31498 * C31417) *
              C31587 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C294 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C287 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C293) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C288 -
            (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
             C9304 * C298 + C9301 * C310) *
                C295 -
            (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
             C9304 * C311 + C9301 * C328) *
                C31609) *
               C31294 * C31498 * C31588 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C293 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C287 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C294 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C288 +
            (C9304 * C937 + C9301 * C944 + C9305 * C1295 + C9302 * C1305 +
             C9306 * C2419 + C9303 * C2424) *
                C295 +
            (C9304 * C945 + C9301 * C952 + C9305 * C1304 + C9302 * C1322 +
             C9306 * C2425 + C9303 * C2428) *
                C31609) *
               C31294 * C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1160 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31267) *
               C31294 * C31498 * C31588 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31267 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1160) *
               C31294 * C31498 * C31417) *
              C1431 +
          (((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1160 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31267) *
               C31294 * C31498 * C31417 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31267 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1160) *
               C31294 * C31498 * C31588) *
              C1432 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C1160 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C31267) *
               C31294 * C31498 * C31588 -
           ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
             C9304 * C1314 + C9301 * C1327) *
                C31267 +
            (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
             C9304 * C1300 + C9301 * C1315) *
                C1160) *
               C31294 * C31498 * C31417) *
              C1433 +
          (((C9304 * C1713 + C9301 * C1716 + C9305 * C5749 + C9302 * C5753 +
             C9306 * C6875 + C9303 * C6876) *
                C1160 +
            (C9304 * C1717 + C9301 * C1722 + C9305 * C5752 + C9302 * C5758 +
             C9306 * C6877 + C9303 * C6878) *
                C31267) *
               C31294 * C31498 * C31417 -
           ((C9306 * C5752 + C9303 * C5758 + C9305 * C1717 + C9302 * C1722 +
             C9304 * C1171 + C9301 * C1181) *
                C31267 +
            (C9306 * C5749 + C9303 * C5753 + C9305 * C1713 + C9302 * C1716 +
             C9304 * C1163 + C9301 * C1172) *
                C1160) *
               C31294 * C31498 * C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C31509 * C126) * C114 +
               (C113 * C127 + C31509 * C140) * C102 - C168 * C115 -
               C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C107 +
              (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
               C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
               C176 * C118 + C177 * C106) *
                  C108 +
              (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
               C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
               (C113 * C125 + C31509 * C138) * C118 +
               (C113 * C139 + C31509 * C146) * C106) *
                  C109) *
             C31498 * C31330 * C31318 +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C293 +
                (C113 * C127 + C31509 * C140) * C287 - C168 * C294 -
                C169 * C288 + C170 * C295 + C171 * C31609) *
                   C107 +
               (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                C172 * C295 + C173 * C31609) *
                   C108 +
               (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                C174 * C295 + C175 * C31609) *
                   C109) *
                  C31498 * C31330 * C31653 +
              ((C361 * C294 -
                ((C113 * C307 + C31509 * C326) * C287 +
                 (C113 * C297 + C31509 * C308) * C293) +
                C362 * C288 - C363 * C295 - C364 * C31609) *
                   C107 +
               (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                C365 * C295 - C366 * C31609) *
                   C108 +
               (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                (C113 * C300 + C31509 * C314) * C295 -
                (C113 * C315 + C31509 * C330) * C31609) *
                   C109) *
                  C31498 * C31330 * C31641 +
              (((C113 * C301 + C31509 * C316) * C293 +
                (C113 * C317 + C31509 * C331) * C287 - C367 * C294 -
                C368 * C288 + C369 * C295 + C370 * C31609) *
                   C107 +
               (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                C371 * C295 + C372 * C31609) *
                   C108 +
               (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                (C113 * C305 + C31509 * C324) * C295 +
                (C113 * C325 + C31509 * C335) * C31609) *
                   C109) *
                  C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C107 +
           (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
            C172 * C295 + C173 * C31609) *
               C108 +
           (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
            C174 * C295 + C175 * C31609) *
               C109) *
              C31498 * C31654 +
          ((C550 * C294 -
            ((C113 * C496 + C31509 * C515) * C287 +
             (C113 * C486 + C31509 * C497) * C293) +
            C551 * C288 - C552 * C295 - C553 * C31609) *
               C107 +
           (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
            C554 * C295 - C555 * C31609) *
               C108 +
           (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
            (C113 * C489 + C31509 * C503) * C295 -
            (C113 * C504 + C31509 * C519) * C31609) *
               C109) *
              C31498 * C31643 +
          (((C113 * C490 + C31509 * C505) * C293 +
            (C113 * C506 + C31509 * C520) * C287 - C556 * C294 - C557 * C288 +
            C558 * C295 + C559 * C31609) *
               C107 +
           (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
            C560 * C295 + C561 * C31609) *
               C108 +
           (C558 * C293 + C559 * C287 - C560 * C294 - C561 * C288 +
            (C113 * C494 + C31509 * C513) * C295 +
            (C113 * C514 + C31509 * C524) * C31609) *
               C109) *
              C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C107 +
           (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
            C172 * C1091 + C173 * C31609) *
               C108 +
           (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
            C174 * C1091 + C175 * C31609) *
               C109) *
              C31498 * C31330 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C31509 * C326) * C31650 +
             (C113 * C297 + C31509 * C308) * C1089) +
            C362 * C31637 - C363 * C1091 - C364 * C31609) *
               C107 +
           (C363 * C1090 - (C362 * C31650 + C361 * C1089) + C364 * C31637 -
            C365 * C1091 - C366 * C31609) *
               C108 +
           (C365 * C1090 - (C364 * C31650 + C363 * C1089) + C366 * C31637 -
            C678 * C1091 - C679 * C31609) *
               C109) *
              C31498 * C31330 * C1087 +
          (((C113 * C301 + C31509 * C316) * C1089 +
            (C113 * C317 + C31509 * C331) * C31650 - C367 * C1090 -
            C368 * C31637 + C369 * C1091 + C370 * C31609) *
               C107 +
           (C367 * C1089 + C368 * C31650 - C369 * C1090 - C370 * C31637 +
            C371 * C1091 + C372 * C31609) *
               C108 +
           (C369 * C1089 + C370 * C31650 - C371 * C1090 - C372 * C31637 +
            (C113 * C305 + C31509 * C324) * C1091 +
            (C113 * C325 + C31509 * C335) * C31609) *
               C109) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C107 +
           (C168 * C1160 + C169 * C31267) * C108 +
           (C170 * C1160 + C171 * C31267) * C109) *
              C31498 * C31330 * C1155 -
          ((C364 * C31267 + C363 * C1160) * C109 +
           (C362 * C31267 + C361 * C1160) * C108 +
           ((C113 * C307 + C31509 * C326) * C31267 +
            (C113 * C297 + C31509 * C308) * C1160) *
               C107) *
              C31498 * C31330 * C1156 +
          (((C113 * C301 + C31509 * C316) * C1160 +
            (C113 * C317 + C31509 * C331) * C31267) *
               C107 +
           (C367 * C1160 + C368 * C31267) * C108 +
           (C369 * C1160 + C370 * C31267) * C109) *
              C31498 * C31330 * C1157 -
          (((C113 * C1167 + C31509 * C1179) * C31267 +
            (C113 * C1161 + C31509 * C1168) * C1160) *
               C109 +
           ((C113 * C1169 + C31509 * C1180) * C31267 +
            (C113 * C1162 + C31509 * C1170) * C1160) *
               C108 +
           ((C113 * C1171 + C31509 * C1181) * C31267 +
            (C113 * C1163 + C31509 * C1172) * C1160) *
               C107) *
              C31498 * C31330 * C1158 +
          (((C113 * C1164 + C31509 * C1173) * C1160 +
            (C113 * C1174 + C31509 * C1182) * C31267) *
               C107 +
           ((C113 * C1165 + C31509 * C1175) * C1160 +
            (C113 * C1176 + C31509 * C1183) * C31267) *
               C108 +
           ((C113 * C1166 + C31509 * C1177) * C1160 +
            (C113 * C1178 + C31509 * C1184) * C31267) *
               C109) *
              C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C31654 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31643 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C107 +
            (C556 * C1160 + C557 * C31267) * C108 +
            (C558 * C1160 + C559 * C31267) * C109) *
               C31498 * C31619) *
              C1086 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31643 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C31654 -
           (((C113 * C1304 + C31509 * C1322) * C31267 +
             (C113 * C1295 + C31509 * C1305) * C1160) *
                C109 +
            ((C113 * C1306 + C31509 * C1323) * C31267 +
             (C113 * C1296 + C31509 * C1307) * C1160) *
                C108 +
            ((C113 * C1308 + C31509 * C1324) * C31267 +
             (C113 * C1297 + C31509 * C1309) * C1160) *
                C107) *
               C31498 * C31619) *
              C1087 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C31654 -
           (((C113 * C1310 + C31509 * C1325) * C31267 +
             (C113 * C1298 + C31509 * C1311) * C1160) *
                C109 +
            ((C113 * C1312 + C31509 * C1326) * C31267 +
             (C113 * C1299 + C31509 * C1313) * C1160) *
                C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C31643 +
           (((C113 * C1301 + C31509 * C1316) * C1160 +
             (C113 * C1317 + C31509 * C1328) * C31267) *
                C107 +
            ((C113 * C1302 + C31509 * C1318) * C1160 +
             (C113 * C1319 + C31509 * C1329) * C31267) *
                C108 +
            ((C113 * C1303 + C31509 * C1320) * C1160 +
             (C113 * C1321 + C31509 * C1330) * C31267) *
                C109) *
               C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C31294 * C4760 +
          ((C113 * C297 + C31509 * C308) * C114 +
           (C113 * C307 + C31509 * C326) * C102 - C361 * C115 - C362 * C103 +
           C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 + C678 * C118 +
           C679 * C106) *
              C31294 * C4761 +
          ((C113 * C301 + C31509 * C316) * C114 +
           (C113 * C317 + C31509 * C331) * C102 - C367 * C115 - C368 * C103 +
           C369 * C116 + C370 * C104 - C371 * C117 - C372 * C105 +
           (C113 * C305 + C31509 * C324) * C118 +
           (C113 * C325 + C31509 * C335) * C106) *
              C31294 * C4762) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C31294 * C4760 +
           (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
           C4915 * C4762) *
              C31330 * C31653 +
          ((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C31294 * C4760 +
           (C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C31294 * C4761 +
           (C4890 - (C4908 + C4909) + C4895 - C4896 - C4897) * C31294 * C4762) *
              C31330 * C31641 +
          (C4915 * C4760 +
           (C4909 + C4908 - C4890 - C4895 + C4896 + C4897) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C293 +
            (C113 * C1174 + C31509 * C1182) * C287 -
            (C113 * C1165 + C31509 * C1175) * C294 -
            (C113 * C1176 + C31509 * C1183) * C288 +
            (C113 * C1166 + C31509 * C1177) * C295 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C31294 * C4760 +
           (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
           C4915 * C4762) *
              C31654 +
          ((C550 * C294 -
            ((C113 * C496 + C31509 * C515) * C287 +
             (C113 * C486 + C31509 * C497) * C293) +
            C551 * C288 - C552 * C295 - C553 * C31609) *
               C31294 * C4760 +
           (C968 * C294 -
            ((C113 * C941 + C31509 * C950) * C287 +
             (C113 * C935 + C31509 * C940) * C293) +
            C969 * C288 - C970 * C295 - C971 * C31609) *
               C31294 * C4761 +
           (C1612 * C294 -
            ((C113 * C1314 + C31509 * C1327) * C287 +
             (C113 * C1300 + C31509 * C1315) * C293) +
            C1613 * C288 - C1614 * C295 - C1615 * C31609) *
               C31294 * C4762) *
              C31643 +
          (((C113 * C490 + C31509 * C505) * C293 +
            (C113 * C506 + C31509 * C520) * C287 - C556 * C294 - C557 * C288 +
            C558 * C295 + C559 * C31609) *
               C31294 * C4760 +
           ((C113 * C1297 + C31509 * C1309) * C293 +
            (C113 * C1308 + C31509 * C1324) * C287 - C2198 * C294 -
            C2199 * C288 + C2200 * C295 + C2201 * C31609) *
               C31294 * C4761 +
           ((C113 * C1301 + C31509 * C1316) * C293 +
            (C113 * C1317 + C31509 * C1328) * C287 -
            (C113 * C1302 + C31509 * C1318) * C294 -
            (C113 * C1319 + C31509 * C1329) * C288 +
            (C113 * C1303 + C31509 * C1320) * C295 +
            (C113 * C1321 + C31509 * C1330) * C31609) *
               C31294 * C4762) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C31294 * C4760 +
           (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
           C5541 * C4762) *
              C31330 * C1086 +
          ((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C31294 * C4760 +
           (C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C31294 * C4761 +
           (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C31294 * C4762) *
              C31330 * C1087 +
          (C5541 * C4760 +
           (C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C1089 +
            (C113 * C1174 + C31509 * C1182) * C31650 -
            (C113 * C1165 + C31509 * C1175) * C1090 -
            (C113 * C1176 + C31509 * C1183) * C31637 +
            (C113 * C1166 + C31509 * C1177) * C1091 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C31294 * C4760 +
           (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
              C31330 * C1155 -
          (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
           (C5613 + C5612) * C31294 * C4760) *
              C31330 * C1156 +
          (C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
              C31330 * C1157 -
          ((C5636 + C5637) * C31294 * C4762 + (C5635 + C5634) * C31294 * C4761 +
           C5633 * C4760) *
              C31330 * C1158 +
          (C5639 * C4760 + (C5637 + C5636) * C31294 * C4761 +
           ((C113 * C5604 + C31509 * C5607) * C1160 +
            (C113 * C5608 + C31509 * C5610) * C31267) *
               C31294 * C4762) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C31654 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31643 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C31619) *
              C1086 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 +
            (C5796 + C5797) * C31294 * C4762) *
               C31643 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C31654 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C31619) *
              C1087 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C31654 -
           (((C113 * C5754 + C31509 * C5759) * C31267 +
             (C113 * C5750 + C31509 * C5755) * C1160) *
                C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31643 +
           (C5801 * C4760 + (C5799 + C5798) * C31294 * C4761 +
            ((C113 * C5751 + C31509 * C5756) * C1160 +
             (C113 * C5757 + C31509 * C5760) * C31267) *
                C31294 * C4762) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
           C9306 * C490 + C9303 * C505) *
              C114 +
          (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
           C9306 * C506 + C9303 * C520) *
              C102 -
          (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
           C9304 * C120 + C9301 * C128) *
              C115 -
          (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
           C9304 * C129 + C9301 * C141) *
              C103 +
          (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
           C9306 * C492 + C9303 * C509) *
              C116 +
          (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
           C9306 * C510 + C9303 * C522) *
              C104 -
          (C9306 * C493 + C9303 * C511 + C9305 * C488 + C9302 * C501 +
           C9304 * C122 + C9301 * C132) *
              C117 -
          (C9306 * C512 + C9303 * C523 + C9305 * C502 + C9302 * C518 +
           C9304 * C133 + C9301 * C143) *
              C105 +
          (C9304 * C123 + C9301 * C134 + C9305 * C489 + C9302 * C503 +
           C9306 * C494 + C9303 * C513) *
              C118 +
          (C9304 * C135 + C9301 * C144 + C9305 * C504 + C9302 * C519 +
           C9306 * C514 + C9303 * C524) *
              C106) *
         C31294 * C31498 * C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C293 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C287 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C294 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C288 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C295 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31609) *
              C31294 * C31498 * C31330 * C31653 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C294 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C287 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C293) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C288 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C295 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C31609) *
              C31294 * C31498 * C31330 * C31641 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C293 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C287 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C294 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C288 +
           (C9304 * C303 + C9301 * C320 + C9305 * C1298 + C9302 * C1311 +
            C9306 * C1303 + C9303 * C1320) *
               C295 +
           (C9304 * C321 + C9301 * C333 + C9305 * C1310 + C9302 * C1325 +
            C9306 * C1321 + C9303 * C1330) *
               C31609) *
              C31294 * C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C293 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C287 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C294 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C288 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C295 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31609) *
              C31294 * C31498 * C31654 +
          ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
            C9306 * C2016 + C9303 * C2024) *
               C294 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C287 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C293) +
           (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
            C9306 * C2023 + C9303 * C2034) *
               C288 -
           (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
            C9304 * C487 + C9301 * C499) *
               C295 -
           (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
            C9304 * C500 + C9301 * C517) *
               C31609) *
              C31294 * C31498 * C31643 +
          ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
            C9306 * C2018 + C9303 * C2027) *
               C293 +
           (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
            C9306 * C2028 + C9303 * C2036) *
               C287 -
           (C9306 * C2019 + C9303 * C2029 + C9305 * C2016 + C9302 * C2024 +
            C9304 * C491 + C9301 * C507) *
               C294 -
           (C9306 * C2030 + C9303 * C2037 + C9305 * C2023 + C9302 * C2034 +
            C9304 * C508 + C9301 * C521) *
               C288 +
           (C9304 * C492 + C9301 * C509 + C9305 * C2015 + C9302 * C2022 +
            C9306 * C2020 + C9303 * C2031) *
               C295 +
           (C9304 * C510 + C9301 * C522 + C9305 * C2021 + C9302 * C2033 +
            C9306 * C2032 + C9303 * C2038) *
               C31609) *
              C31294 * C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C1089 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31650 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C1090 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31637 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C1091 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31609) *
              C31294 * C31498 * C31330 * C1086 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C1090 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31650 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1089) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C31637 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C1091 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C31609) *
              C31294 * C31498 * C31330 * C1087 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C1089 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C31650 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C1090 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C31637 +
           (C9304 * C303 + C9301 * C320 + C9305 * C1298 + C9302 * C1311 +
            C9306 * C1303 + C9303 * C1320) *
               C1091 +
           (C9304 * C321 + C9301 * C333 + C9305 * C1310 + C9302 * C1325 +
            C9306 * C1321 + C9303 * C1330) *
               C31609) *
              C31294 * C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C1160 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31267) *
              C31294 * C31498 * C31330 * C1155 -
          ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
            C9304 * C307 + C9301 * C326) *
               C31267 +
           (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
            C9304 * C297 + C9301 * C308) *
               C1160) *
              C31294 * C31498 * C31330 * C1156 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C1160 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C31267) *
              C31294 * C31498 * C31330 * C1157 -
          ((C9306 * C5752 + C9303 * C5758 + C9305 * C1717 + C9302 * C1722 +
            C9304 * C1171 + C9301 * C1181) *
               C31267 +
           (C9306 * C5749 + C9303 * C5753 + C9305 * C1713 + C9302 * C1716 +
            C9304 * C1163 + C9301 * C1172) *
               C1160) *
              C31294 * C31498 * C31330 * C1158 +
          ((C9304 * C1164 + C9301 * C1173 + C9305 * C5750 + C9302 * C5755 +
            C9306 * C5751 + C9303 * C5756) *
               C1160 +
           (C9304 * C1174 + C9301 * C1182 + C9305 * C5754 + C9302 * C5759 +
            C9306 * C5757 + C9303 * C5760) *
               C31267) *
              C31294 * C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C1160 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31267) *
               C31294 * C31498 * C31654 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C31267 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C1160) *
               C31294 * C31498 * C31643 +
           ((C9304 * C490 + C9301 * C505 + C9305 * C2017 + C9302 * C2026 +
             C9306 * C2018 + C9303 * C2027) *
                C1160 +
            (C9304 * C506 + C9301 * C520 + C9305 * C2025 + C9302 * C2035 +
             C9306 * C2028 + C9303 * C2036) *
                C31267) *
               C31294 * C31498 * C31619) *
              C1086 +
          (((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C1160 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31267) *
               C31294 * C31498 * C31643 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31267 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1160) *
               C31294 * C31498 * C31654 -
           ((C9306 * C6505 + C9303 * C6509 + C9305 * C2421 + C9302 * C2426 +
             C9304 * C1308 + C9301 * C1324) *
                C31267 +
            (C9306 * C6500 + C9303 * C6504 + C9305 * C2417 + C9302 * C2420 +
             C9304 * C1297 + C9301 * C1309) *
                C1160) *
               C31294 * C31498 * C31619) *
              C1087 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C1160 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C31267) *
               C31294 * C31498 * C31654 -
           ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
             C9304 * C1314 + C9301 * C1327) *
                C31267 +
            (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
             C9304 * C1300 + C9301 * C1315) *
                C1160) *
               C31294 * C31498 * C31643 +
           ((C9304 * C1301 + C9301 * C1316 + C9305 * C6499 + C9302 * C6503 +
             C9306 * C6501 + C9303 * C6506) *
                C1160 +
            (C9304 * C1317 + C9301 * C1328 + C9305 * C6502 + C9302 * C6508 +
             C9306 * C6507 + C9303 * C6510) *
                C31267) *
               C31294 * C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C107 +
            (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                C108 +
            (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
                C109) *
               C31498 * C31588 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C107 +
            (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                C108 +
            (C554 * C30270 - (C553 * C31569 + C552 * C30289) + C555 * C31277) *
                C109) *
               C31498 * C31417) *
              C1086 +
          (((C361 * C30270 -
             ((C113 * C307 + C31509 * C326) * C31569 +
              (C113 * C297 + C31509 * C308) * C30289) +
             C362 * C31277) *
                C107 +
            (C363 * C30270 - (C362 * C31569 + C361 * C30289) + C364 * C31277) *
                C108 +
            (C365 * C30270 - (C364 * C31569 + C363 * C30289) + C366 * C31277) *
                C109) *
               C31498 * C31588 +
           (((C113 * C935 + C31509 * C940) * C30289 +
             (C113 * C941 + C31509 * C950) * C31569 - C968 * C30270 -
             C969 * C31277) *
                C107 +
            (C968 * C30289 + C969 * C31569 - C970 * C30270 - C971 * C31277) *
                C108 +
            (C970 * C30289 + C971 * C31569 - C972 * C30270 - C973 * C31277) *
                C109) *
               C31498 * C31417) *
              C1087 +
          ((((C113 * C301 + C31509 * C316) * C30289 +
             (C113 * C317 + C31509 * C331) * C31569 - C367 * C30270 -
             C368 * C31277) *
                C107 +
            (C367 * C30289 + C368 * C31569 - C369 * C30270 - C370 * C31277) *
                C108 +
            (C369 * C30289 + C370 * C31569 - C371 * C30270 - C372 * C31277) *
                C109) *
               C31498 * C31588 +
           ((C1612 * C30270 -
             ((C113 * C1314 + C31509 * C1327) * C31569 +
              (C113 * C1300 + C31509 * C1315) * C30289) +
             C1613 * C31277) *
                C107 +
            (C1614 * C30270 - (C1613 * C31569 + C1612 * C30289) +
             C1615 * C31277) *
                C108 +
            ((C113 * C1599 + C31509 * C1600) * C30270 -
             (C1615 * C31569 + C1614 * C30289) +
             (C113 * C1601 + C31509 * C1602) * C31277) *
                C109) *
               C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C107 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31620) *
               C108 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31620) *
               C109) *
              C31498 * C31588 +
          ((C550 * C666 -
            ((C113 * C496 + C31509 * C515) * C659 +
             (C113 * C486 + C31509 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C31620) *
               C107 +
           (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
            C554 * C667 - C555 * C661 + C788 * C668 + C789 * C31620) *
               C108 +
           (C554 * C666 - (C553 * C659 + C552 * C665) + C555 * C660 -
            C788 * C667 - C789 * C661 + (C113 * C779 + C31509 * C780) * C668 +
            (C113 * C781 + C31509 * C782) * C31620) *
               C109) *
              C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C31294 * C4760 +
           (C5124 + C5125 - C5126 - C5127 + C5128 + C5129 - C5130 - C5131) *
               C31294 * C4761 +
           (C5132 + C5133 - C5134 - C5135 + C5136 + C5137 - C5138 - C5139) *
               C31294 * C4762) *
              C31588 +
          ((C550 * C666 -
            ((C113 * C496 + C31509 * C515) * C659 +
             (C113 * C486 + C31509 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C31620) *
               C31294 * C4760 +
           (C968 * C666 -
            ((C113 * C941 + C31509 * C950) * C659 +
             (C113 * C935 + C31509 * C940) * C665) +
            C969 * C660 - C970 * C667 - C971 * C661 + C972 * C668 +
            C973 * C31620) *
               C31294 * C4761 +
           (C1612 * C666 -
            ((C113 * C1314 + C31509 * C1327) * C659 +
             (C113 * C1300 + C31509 * C1315) * C665) +
            C1613 * C660 - C1614 * C667 - C1615 * C661 +
            (C113 * C1599 + C31509 * C1600) * C668 +
            (C113 * C1601 + C31509 * C1602) * C31620) *
               C31294 * C4762) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C31294 * C4760 +
            (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
               C31588 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C31294 * C4760 +
            (C6084 - (C6085 + C6086) + C6087) * C31294 * C4761 +
            C6105 * C4762) *
               C31417) *
              C1086 +
          (((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
            (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 +
            C5933 * C4762) *
               C31588 +
           ((C6086 + C6085 - C6084 - C6087) * C31294 * C4760 +
            (C6090 + C6089 - C6088 - C6091) * C31294 * C4761 +
            (C6092 + C6093 - C6102 - C6103) * C31294 * C4762) *
               C31417) *
              C1087 +
          ((C5932 * C4760 + (C5914 + C5913 - C5912 - C5915) * C31294 * C4761 +
            (C5916 + C5917 - C5928 - C5929) * C31294 * C4762) *
               C31588 +
           (C6105 * C4760 + (C6102 - (C6093 + C6092) + C6103) * C31294 * C4761 +
            ((C113 * C6079 + C31509 * C6080) * C30270 -
             ((C113 * C5754 + C31509 * C5759) * C31569 +
              (C113 * C5750 + C31509 * C5755) * C30289) +
             (C113 * C6081 + C31509 * C6082) * C31277) *
                C31294 * C4762) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C665 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C659 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C666 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C660 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C667 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C661 -
           (C9306 * C493 + C9303 * C511 + C9305 * C488 + C9302 * C501 +
            C9304 * C122 + C9301 * C132) *
               C668 -
           (C9306 * C512 + C9303 * C523 + C9305 * C502 + C9302 * C518 +
            C9304 * C133 + C9301 * C143) *
               C31620) *
              C31294 * C31498 * C31588 +
          ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
            C9306 * C2016 + C9303 * C2024) *
               C666 -
           ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
             C9304 * C496 + C9301 * C515) *
                C659 +
            (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
             C9304 * C486 + C9301 * C497) *
                C665) +
           (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
            C9306 * C2023 + C9303 * C2034) *
               C660 -
           (C9306 * C2015 + C9303 * C2022 + C9305 * C492 + C9302 * C509 +
            C9304 * C487 + C9301 * C499) *
               C667 -
           (C9306 * C2021 + C9303 * C2033 + C9305 * C510 + C9302 * C522 +
            C9304 * C500 + C9301 * C517) *
               C661 +
           (C9304 * C488 + C9301 * C501 + C9305 * C493 + C9302 * C511 +
            C9306 * C2303 + C9303 * C2304) *
               C668 +
           (C9304 * C502 + C9301 * C518 + C9305 * C512 + C9302 * C523 +
            C9306 * C2305 + C9303 * C2306) *
               C31620) *
              C31294 * C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
             C9306 * C490 + C9303 * C505) *
                C30289 +
            (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
             C9306 * C506 + C9303 * C520) *
                C31569 -
            (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
             C9304 * C120 + C9301 * C128) *
                C30270 -
            (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
             C9304 * C129 + C9301 * C141) *
                C31277) *
               C31294 * C31498 * C31588 +
           ((C9304 * C485 + C9301 * C495 + C9305 * C491 + C9302 * C507 +
             C9306 * C2016 + C9303 * C2024) *
                C30270 -
            ((C9306 * C2025 + C9303 * C2035 + C9305 * C506 + C9302 * C520 +
              C9304 * C496 + C9301 * C515) *
                 C31569 +
             (C9306 * C2017 + C9303 * C2026 + C9305 * C490 + C9302 * C505 +
              C9304 * C486 + C9301 * C497) *
                 C30289) +
            (C9304 * C498 + C9301 * C516 + C9305 * C508 + C9302 * C521 +
             C9306 * C2023 + C9303 * C2034) *
                C31277) *
               C31294 * C31498 * C31417) *
              C1086 +
          (((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
             C9306 * C1296 + C9303 * C1307) *
                C30270 -
            ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
              C9304 * C307 + C9301 * C326) *
                 C31569 +
             (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
              C9304 * C297 + C9301 * C308) *
                 C30289) +
            (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
             C9306 * C1306 + C9303 * C1323) *
                C31277) *
               C31294 * C31498 * C31588 +
           ((C9304 * C935 + C9301 * C940 + C9305 * C1297 + C9302 * C1309 +
             C9306 * C2417 + C9303 * C2420) *
                C30289 +
            (C9304 * C941 + C9301 * C950 + C9305 * C1308 + C9302 * C1324 +
             C9306 * C2421 + C9303 * C2426) *
                C31569 -
            (C9306 * C2418 + C9303 * C2422 + C9305 * C1296 + C9302 * C1307 +
             C9304 * C936 + C9301 * C942) *
                C30270 -
            (C9306 * C2423 + C9303 * C2427 + C9305 * C1306 + C9302 * C1323 +
             C9304 * C943 + C9301 * C951) *
                C31277) *
               C31294 * C31498 * C31417) *
              C1087 +
          (((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
             C9306 * C1301 + C9303 * C1316) *
                C30289 +
            (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
             C9306 * C1317 + C9303 * C1328) *
                C31569 -
            (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
             C9304 * C302 + C9301 * C318) *
                C30270 -
            (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
             C9304 * C319 + C9301 * C332) *
                C31277) *
               C31294 * C31498 * C31588 +
           ((C9304 * C1299 + C9301 * C1313 + C9305 * C1302 + C9302 * C1318 +
             C9306 * C6773 + C9303 * C6774) *
                C30270 -
            ((C9306 * C6502 + C9303 * C6508 + C9305 * C1317 + C9302 * C1328 +
              C9304 * C1314 + C9301 * C1327) *
                 C31569 +
             (C9306 * C6499 + C9303 * C6503 + C9305 * C1301 + C9302 * C1316 +
              C9304 * C1300 + C9301 * C1315) *
                 C30289) +
            (C9304 * C1312 + C9301 * C1326 + C9305 * C1319 + C9302 * C1329 +
             C9306 * C6775 + C9303 * C6776) *
                C31277) *
               C31294 * C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C107 +
           (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
            C172 * C295 + C173 * C31609) *
               C108 +
           (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
            C174 * C295 + C175 * C31609) *
               C109) *
              C31498 * C31330 * C31653 +
          ((C361 * C294 -
            ((C113 * C307 + C31509 * C326) * C287 +
             (C113 * C297 + C31509 * C308) * C293) +
            C362 * C288 - C363 * C295 - C364 * C31609) *
               C107 +
           (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
            C365 * C295 - C366 * C31609) *
               C108 +
           (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
            (C113 * C300 + C31509 * C314) * C295 -
            (C113 * C315 + C31509 * C330) * C31609) *
               C109) *
              C31498 * C31330 * C31641 +
          (((C113 * C301 + C31509 * C316) * C293 +
            (C113 * C317 + C31509 * C331) * C287 - C367 * C294 - C368 * C288 +
            C369 * C295 + C370 * C31609) *
               C107 +
           (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
            C371 * C295 + C372 * C31609) *
               C108 +
           (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
            (C113 * C305 + C31509 * C324) * C295 +
            (C113 * C325 + C31509 * C335) * C31609) *
               C109) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C107 +
          (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 + C172 * C116 +
           C173 * C104 - C174 * C117 - C175 * C105 + C176 * C118 +
           C177 * C106) *
              C108 +
          (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 + C174 * C116 +
           C175 * C104 - C176 * C117 - C177 * C105 +
           (C113 * C125 + C31509 * C138) * C118 +
           (C113 * C139 + C31509 * C146) * C106) *
              C109) *
         C31498 * C31330 * C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C107 +
           (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
            C172 * C1091 + C173 * C31609) *
               C108 +
           (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
            C174 * C1091 + C175 * C31609) *
               C109) *
              C31498 * C31330 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C31509 * C326) * C31650 +
             (C113 * C297 + C31509 * C308) * C1089) +
            C362 * C31637 - C363 * C1091 - C364 * C31609) *
               C107 +
           (C363 * C1090 - (C362 * C31650 + C361 * C1089) + C364 * C31637 -
            C365 * C1091 - C366 * C31609) *
               C108 +
           (C365 * C1090 - (C364 * C31650 + C363 * C1089) + C366 * C31637 -
            C678 * C1091 - C679 * C31609) *
               C109) *
              C31498 * C31330 * C1087 +
          (((C113 * C301 + C31509 * C316) * C1089 +
            (C113 * C317 + C31509 * C331) * C31650 - C367 * C1090 -
            C368 * C31637 + C369 * C1091 + C370 * C31609) *
               C107 +
           (C367 * C1089 + C368 * C31650 - C369 * C1090 - C370 * C31637 +
            C371 * C1091 + C372 * C31609) *
               C108 +
           (C369 * C1089 + C370 * C31650 - C371 * C1090 - C372 * C31637 +
            (C113 * C305 + C31509 * C324) * C1091 +
            (C113 * C325 + C31509 * C335) * C31609) *
               C109) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C107 +
           (C168 * C1160 + C169 * C31267) * C108 +
           (C170 * C1160 + C171 * C31267) * C109) *
              C31498 * C31330 * C1155 -
          ((C364 * C31267 + C363 * C1160) * C109 +
           (C362 * C31267 + C361 * C1160) * C108 +
           ((C113 * C307 + C31509 * C326) * C31267 +
            (C113 * C297 + C31509 * C308) * C1160) *
               C107) *
              C31498 * C31330 * C1156 +
          (((C113 * C301 + C31509 * C316) * C1160 +
            (C113 * C317 + C31509 * C331) * C31267) *
               C107 +
           (C367 * C1160 + C368 * C31267) * C108 +
           (C369 * C1160 + C370 * C31267) * C109) *
              C31498 * C31330 * C1157 -
          (((C113 * C1167 + C31509 * C1179) * C31267 +
            (C113 * C1161 + C31509 * C1168) * C1160) *
               C109 +
           ((C113 * C1169 + C31509 * C1180) * C31267 +
            (C113 * C1162 + C31509 * C1170) * C1160) *
               C108 +
           ((C113 * C1171 + C31509 * C1181) * C31267 +
            (C113 * C1163 + C31509 * C1172) * C1160) *
               C107) *
              C31498 * C31330 * C1158 +
          (((C113 * C1164 + C31509 * C1173) * C1160 +
            (C113 * C1174 + C31509 * C1182) * C31267) *
               C107 +
           ((C113 * C1165 + C31509 * C1175) * C1160 +
            (C113 * C1176 + C31509 * C1183) * C31267) *
               C108 +
           ((C113 * C1166 + C31509 * C1177) * C1160 +
            (C113 * C1178 + C31509 * C1184) * C31267) *
               C109) *
              C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C31294 * C4760 +
          ((C113 * C297 + C31509 * C308) * C114 +
           (C113 * C307 + C31509 * C326) * C102 - C361 * C115 - C362 * C103 +
           C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 + C678 * C118 +
           C679 * C106) *
              C31294 * C4761 +
          ((C113 * C301 + C31509 * C316) * C114 +
           (C113 * C317 + C31509 * C331) * C102 - C367 * C115 - C368 * C103 +
           C369 * C116 + C370 * C104 - C371 * C117 - C372 * C105 +
           (C113 * C305 + C31509 * C324) * C118 +
           (C113 * C325 + C31509 * C335) * C106) *
              C31294 * C4762) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C31294 * C4760 +
           (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
           C4915 * C4762) *
              C31330 * C31653 +
          ((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C31294 * C4760 +
           (C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C31294 * C4761 +
           (C4890 - (C4908 + C4909) + C4895 - C4896 - C4897) * C31294 * C4762) *
              C31330 * C31641 +
          (C4915 * C4760 +
           (C4909 + C4908 - C4890 - C4895 + C4896 + C4897) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C293 +
            (C113 * C1174 + C31509 * C1182) * C287 -
            (C113 * C1165 + C31509 * C1175) * C294 -
            (C113 * C1176 + C31509 * C1183) * C288 +
            (C113 * C1166 + C31509 * C1177) * C295 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C31294 * C4760 +
           (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
           C5541 * C4762) *
              C31330 * C1086 +
          ((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C31294 * C4760 +
           (C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C31294 * C4761 +
           (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C31294 * C4762) *
              C31330 * C1087 +
          (C5541 * C4760 +
           (C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C1089 +
            (C113 * C1174 + C31509 * C1182) * C31650 -
            (C113 * C1165 + C31509 * C1175) * C1090 -
            (C113 * C1176 + C31509 * C1183) * C31637 +
            (C113 * C1166 + C31509 * C1177) * C1091 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C31294 * C4760 +
           (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
              C31330 * C1155 -
          (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
           (C5613 + C5612) * C31294 * C4760) *
              C31330 * C1156 +
          (C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
              C31330 * C1157 -
          ((C5636 + C5637) * C31294 * C4762 + (C5635 + C5634) * C31294 * C4761 +
           C5633 * C4760) *
              C31330 * C1158 +
          (C5639 * C4760 + (C5637 + C5636) * C31294 * C4761 +
           ((C113 * C5604 + C31509 * C5607) * C1160 +
            (C113 * C5608 + C31509 * C5610) * C31267) *
               C31294 * C4762) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
           C9306 * C490 + C9303 * C505) *
              C114 +
          (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
           C9306 * C506 + C9303 * C520) *
              C102 -
          (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
           C9304 * C120 + C9301 * C128) *
              C115 -
          (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
           C9304 * C129 + C9301 * C141) *
              C103 +
          (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
           C9306 * C492 + C9303 * C509) *
              C116 +
          (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
           C9306 * C510 + C9303 * C522) *
              C104 -
          (C9306 * C493 + C9303 * C511 + C9305 * C488 + C9302 * C501 +
           C9304 * C122 + C9301 * C132) *
              C117 -
          (C9306 * C512 + C9303 * C523 + C9305 * C502 + C9302 * C518 +
           C9304 * C133 + C9301 * C143) *
              C105 +
          (C9304 * C123 + C9301 * C134 + C9305 * C489 + C9302 * C503 +
           C9306 * C494 + C9303 * C513) *
              C118 +
          (C9304 * C135 + C9301 * C144 + C9305 * C504 + C9302 * C519 +
           C9306 * C514 + C9303 * C524) *
              C106) *
         C31294 * C31498 * C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C293 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C287 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C294 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C288 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C295 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31609) *
              C31294 * C31498 * C31330 * C31653 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C294 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C287 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C293) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C288 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C295 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C31609) *
              C31294 * C31498 * C31330 * C31641 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C293 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C287 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C294 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C288 +
           (C9304 * C303 + C9301 * C320 + C9305 * C1298 + C9302 * C1311 +
            C9306 * C1303 + C9303 * C1320) *
               C295 +
           (C9304 * C321 + C9301 * C333 + C9305 * C1310 + C9302 * C1325 +
            C9306 * C1321 + C9303 * C1330) *
               C31609) *
              C31294 * C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C1089 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31650 -
           (C9306 * C491 + C9303 * C507 + C9305 * C485 + C9302 * C495 +
            C9304 * C120 + C9301 * C128) *
               C1090 -
           (C9306 * C508 + C9303 * C521 + C9305 * C498 + C9302 * C516 +
            C9304 * C129 + C9301 * C141) *
               C31637 +
           (C9304 * C121 + C9301 * C130 + C9305 * C487 + C9302 * C499 +
            C9306 * C492 + C9303 * C509) *
               C1091 +
           (C9304 * C131 + C9301 * C142 + C9305 * C500 + C9302 * C517 +
            C9306 * C510 + C9303 * C522) *
               C31609) *
              C31294 * C31498 * C31330 * C1086 +
          ((C9304 * C296 + C9301 * C306 + C9305 * C936 + C9302 * C942 +
            C9306 * C1296 + C9303 * C1307) *
               C1090 -
           ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
             C9304 * C307 + C9301 * C326) *
                C31650 +
            (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
             C9304 * C297 + C9301 * C308) *
                C1089) +
           (C9304 * C309 + C9301 * C327 + C9305 * C943 + C9302 * C951 +
            C9306 * C1306 + C9303 * C1323) *
               C31637 -
           (C9306 * C1295 + C9303 * C1305 + C9305 * C937 + C9302 * C944 +
            C9304 * C298 + C9301 * C310) *
               C1091 -
           (C9306 * C1304 + C9303 * C1322 + C9305 * C945 + C9302 * C952 +
            C9304 * C311 + C9301 * C328) *
               C31609) *
              C31294 * C31498 * C31330 * C1087 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C1089 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C31650 -
           (C9306 * C1302 + C9303 * C1318 + C9305 * C1299 + C9302 * C1313 +
            C9304 * C302 + C9301 * C318) *
               C1090 -
           (C9306 * C1319 + C9303 * C1329 + C9305 * C1312 + C9302 * C1326 +
            C9304 * C319 + C9301 * C332) *
               C31637 +
           (C9304 * C303 + C9301 * C320 + C9305 * C1298 + C9302 * C1311 +
            C9306 * C1303 + C9303 * C1320) *
               C1091 +
           (C9304 * C321 + C9301 * C333 + C9305 * C1310 + C9302 * C1325 +
            C9306 * C1321 + C9303 * C1330) *
               C31609) *
              C31294 * C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9304 * C119 + C9301 * C126 + C9305 * C486 + C9302 * C497 +
            C9306 * C490 + C9303 * C505) *
               C1160 +
           (C9304 * C127 + C9301 * C140 + C9305 * C496 + C9302 * C515 +
            C9306 * C506 + C9303 * C520) *
               C31267) *
              C31294 * C31498 * C31330 * C1155 -
          ((C9306 * C1308 + C9303 * C1324 + C9305 * C941 + C9302 * C950 +
            C9304 * C307 + C9301 * C326) *
               C31267 +
           (C9306 * C1297 + C9303 * C1309 + C9305 * C935 + C9302 * C940 +
            C9304 * C297 + C9301 * C308) *
               C1160) *
              C31294 * C31498 * C31330 * C1156 +
          ((C9304 * C301 + C9301 * C316 + C9305 * C1300 + C9302 * C1315 +
            C9306 * C1301 + C9303 * C1316) *
               C1160 +
           (C9304 * C317 + C9301 * C331 + C9305 * C1314 + C9302 * C1327 +
            C9306 * C1317 + C9303 * C1328) *
               C31267) *
              C31294 * C31498 * C31330 * C1157 -
          ((C9306 * C5752 + C9303 * C5758 + C9305 * C1717 + C9302 * C1722 +
            C9304 * C1171 + C9301 * C1181) *
               C31267 +
           (C9306 * C5749 + C9303 * C5753 + C9305 * C1713 + C9302 * C1716 +
            C9304 * C1163 + C9301 * C1172) *
               C1160) *
              C31294 * C31498 * C31330 * C1158 +
          ((C9304 * C1164 + C9301 * C1173 + C9305 * C5750 + C9302 * C5755 +
            C9306 * C5751 + C9303 * C5756) *
               C1160 +
           (C9304 * C1174 + C9301 * C1182 + C9305 * C5754 + C9302 * C5759 +
            C9306 * C5757 + C9303 * C5760) *
               C31267) *
              C31294 * C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C30299 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31272 -
            (C19084 + C19085) * C30295 - (C19086 + C19087) * C31280 +
            (C19088 + C19089) * C30305 + (C19090 + C19091) * C2901) *
               C13451 +
           ((C19085 + C19084) * C30299 + (C19087 + C19086) * C31272 -
            (C19089 + C19088) * C30295 - (C19091 + C19090) * C31280 +
            (C19093 + C19092) * C30305 + (C19095 + C19094) * C2901) *
               C13452) *
              C31498 * C31330 * C31373 +
          (((C19278 + C19279) * C30295 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31272 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C30299) +
            (C19280 + C19281) * C31280 - (C19282 + C19283) * C30305 -
            (C19284 + C19285) * C2901) *
               C13451 +
           ((C19283 + C19282) * C30295 -
            ((C19281 + C19280) * C31272 + (C19279 + C19278) * C30299) +
            (C19285 + C19284) * C31280 - (C19627 + C19626) * C30305 -
            (C19629 + C19628) * C2901) *
               C13452) *
              C31498 * C31330 * C31380 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C30299 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C31272 -
            (C19286 + C19287) * C30295 - (C19288 + C19289) * C31280 +
            (C19290 + C19291) * C30305 + (C19292 + C19293) * C2901) *
               C13451 +
           ((C19287 + C19286) * C30299 + (C19289 + C19288) * C31272 -
            (C19291 + C19290) * C30295 - (C19293 + C19292) * C31280 +
            (C19049 * C304 + C19047 * C322 + C19050 * C1599 + C19048 * C1600) *
                C30305 +
            (C19049 * C323 + C19047 * C334 + C19050 * C1601 + C19048 * C1602) *
                C2901) *
               C13452) *
              C31498 * C31330 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C2641 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C2635 -
             (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
                C13451 +
            ((C19085 + C19084) * C2641 + (C19087 + C19086) * C2635 -
             (C19089 + C19088) * C2642 - (C19091 + C19090) * C31277) *
                C13452) *
               C31498 * C31588 +
           (((C19472 + C19473) * C2642 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C2635 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C2641) +
             (C19474 + C19475) * C31277) *
                C13451 +
            ((C19477 + C19476) * C2642 -
             ((C19475 + C19474) * C2635 + (C19473 + C19472) * C2641) +
             (C19479 + C19478) * C31277) *
                C13452) *
               C31498 * C31417) *
              C31373 +
          ((((C19278 + C19279) * C2642 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C2635 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C2641) +
             (C19280 + C19281) * C31277) *
                C13451 +
            ((C19283 + C19282) * C2642 -
             ((C19281 + C19280) * C2635 + (C19279 + C19278) * C2641) +
             (C19285 + C19284) * C31277) *
                C13452) *
               C31498 * C31588 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C2641 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C2635 -
             (C19982 + C19983) * C2642 - (C19984 + C19985) * C31277) *
                C13451 +
            ((C19983 + C19982) * C2641 + (C19985 + C19984) * C2635 -
             (C19987 + C19986) * C2642 - (C19989 + C19988) * C31277) *
                C13452) *
               C31498 * C31417) *
              C31380 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C2641 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C2635 -
             (C19286 + C19287) * C2642 - (C19288 + C19289) * C31277) *
                C13451 +
            ((C19287 + C19286) * C2641 + (C19289 + C19288) * C2635 -
             (C19291 + C19290) * C2642 - (C19293 + C19292) * C31277) *
                C13452) *
               C31498 * C31588 +
           (((C20708 + C20709) * C2642 -
             ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
               C19047 * C1327) *
                  C2635 +
              (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
               C19047 * C1315) *
                  C2641) +
             (C20710 + C20711) * C31277) *
                C13451 +
            ((C19049 * C1298 + C19047 * C1311 + C19050 * C1303 +
              C19048 * C1320) *
                 C2642 -
             ((C20711 + C20710) * C2635 + (C20709 + C20708) * C2641) +
             (C19049 * C1310 + C19047 * C1325 + C19050 * C1321 +
              C19048 * C1330) *
                 C31277) *
                C13452) *
               C31498 * C31417) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2641 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C2635 -
            (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
               C13451 +
           ((C19085 + C19084) * C2641 + (C19087 + C19086) * C2635 -
            (C19089 + C19088) * C2642 - (C19091 + C19090) * C31277) *
               C13452) *
              C31498 * C31330 * C31660 +
          (((C19278 + C19279) * C2642 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C2635 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C2641) +
            (C19280 + C19281) * C31277) *
               C13451 +
           ((C19283 + C19282) * C2642 -
            ((C19281 + C19280) * C2635 + (C19279 + C19278) * C2641) +
            (C19285 + C19284) * C31277) *
               C13452) *
              C31498 * C31330 * C31656 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C2641 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C2635 -
            (C19286 + C19287) * C2642 - (C19288 + C19289) * C31277) *
               C13451 +
           ((C19287 + C19286) * C2641 + (C19289 + C19288) * C2635 -
            (C19291 + C19290) * C2642 - (C19293 + C19292) * C31277) *
               C13452) *
              C31498 * C31330 * C31646 +
          (((C20502 + C20503) * C2642 -
            ((C19050 * C1717 + C19048 * C1722 + C19049 * C1171 +
              C19047 * C1181) *
                 C2635 +
             (C19050 * C1713 + C19048 * C1716 + C19049 * C1163 +
              C19047 * C1172) *
                 C2641) +
            (C20504 + C20505) * C31277) *
               C13451 +
           ((C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
             C19048 * C1720) *
                C2642 -
            ((C20505 + C20504) * C2635 + (C20503 + C20502) * C2641) +
            (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
             C19048 * C1724) *
                C31277) *
               C13452) *
              C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2533 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31659 -
            (C19084 + C19085) * C2534 - (C19086 + C19087) * C31652 +
            (C19088 + C19089) * C2535 + (C19090 + C19091) * C31639 -
            (C19092 + C19093) * C2536 - (C19094 + C19095) * C31620) *
               C13451 +
           ((C19085 + C19084) * C2533 + (C19087 + C19086) * C31659 -
            (C19089 + C19088) * C2534 - (C19091 + C19090) * C31652 +
            (C19093 + C19092) * C2535 + (C19095 + C19094) * C31639 -
            (C19097 + C19096) * C2536 - (C19099 + C19098) * C31620) *
               C13452) *
              C31498 * C31330 * C2531 +
          (((C19278 + C19279) * C2534 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31659 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C2533) +
            (C19280 + C19281) * C31652 - (C19282 + C19283) * C2535 -
            (C19284 + C19285) * C31639 + (C19626 + C19627) * C2536 +
            (C19628 + C19629) * C31620) *
               C13451 +
           ((C19283 + C19282) * C2534 -
            ((C19281 + C19280) * C31659 + (C19279 + C19278) * C2533) +
            (C19285 + C19284) * C31652 - (C19627 + C19626) * C2535 -
            (C19629 + C19628) * C31639 +
            (C19049 * C300 + C19047 * C314 + C19050 * C939 + C19048 * C948) *
                C2536 +
            (C19049 * C315 + C19047 * C330 + C19050 * C949 + C19048 * C954) *
                C31620) *
               C13452) *
              C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C2641 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C2635 -
             (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
                C13451 +
            ((C19085 + C19084) * C2641 + (C19087 + C19086) * C2635 -
             (C19089 + C19088) * C2642 - (C19091 + C19090) * C31277) *
                C13452) *
               C31498 * C31654 +
           (((C19472 + C19473) * C2642 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C2635 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C2641) +
             (C19474 + C19475) * C31277) *
                C13451 +
            ((C19477 + C19476) * C2642 -
             ((C19475 + C19474) * C2635 + (C19473 + C19472) * C2641) +
             (C19479 + C19478) * C31277) *
                C13452) *
               C31498 * C31643 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C2641 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C2635 -
             (C19480 + C19481) * C2642 - (C19482 + C19483) * C31277) *
                C13451 +
            ((C19481 + C19480) * C2641 + (C19483 + C19482) * C2635 -
             (C19485 + C19484) * C2642 - (C19487 + C19486) * C31277) *
                C13452) *
               C31498 * C31619) *
              C2531 +
          ((((C19278 + C19279) * C2642 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C2635 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C2641) +
             (C19280 + C19281) * C31277) *
                C13451 +
            ((C19283 + C19282) * C2642 -
             ((C19281 + C19280) * C2635 + (C19279 + C19278) * C2641) +
             (C19285 + C19284) * C31277) *
                C13452) *
               C31498 * C31654 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C2641 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C2635 -
             (C19982 + C19983) * C2642 - (C19984 + C19985) * C31277) *
                C13451 +
            ((C19983 + C19982) * C2641 + (C19985 + C19984) * C2635 -
             (C19987 + C19986) * C2642 - (C19989 + C19988) * C31277) *
                C13452) *
               C31498 * C31643 +
           (((C21418 + C21419) * C2642 -
             ((C19050 * C2421 + C19048 * C2426 + C19049 * C1308 +
               C19047 * C1324) *
                  C2635 +
              (C19050 * C2417 + C19048 * C2420 + C19049 * C1297 +
               C19047 * C1309) *
                  C2641) +
             (C21420 + C21421) * C31277) *
                C13451 +
            ((C19049 * C1295 + C19047 * C1305 + C19050 * C2419 +
              C19048 * C2424) *
                 C2642 -
             ((C21421 + C21420) * C2635 + (C21419 + C21418) * C2641) +
             (C19049 * C1304 + C19047 * C1322 + C19050 * C2425 +
              C19048 * C2428) *
                 C31277) *
                C13452) *
               C31498 * C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30299 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31272 -
             (C19084 + C19085) * C30295 - (C19086 + C19087) * C31280 +
             (C19088 + C19089) * C30305 + (C19090 + C19091) * C2901) *
                C13451 +
            ((C19085 + C19084) * C30299 + (C19087 + C19086) * C31272 -
             (C19089 + C19088) * C30295 - (C19091 + C19090) * C31280 +
             (C19093 + C19092) * C30305 + (C19095 + C19094) * C2901) *
                C13452) *
               C31498 * C31588 +
           (((C19472 + C19473) * C30295 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31272 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30299) +
             (C19474 + C19475) * C31280 - (C19476 + C19477) * C30305 -
             (C19478 + C19479) * C2901) *
                C13451 +
            ((C19477 + C19476) * C30295 -
             ((C19475 + C19474) * C31272 + (C19473 + C19472) * C30299) +
             (C19479 + C19478) * C31280 - (C19769 + C19768) * C30305 -
             (C19771 + C19770) * C2901) *
                C13452) *
               C31498 * C31417) *
              C2531 +
          ((((C19278 + C19279) * C30295 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C31272 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C30299) +
             (C19280 + C19281) * C31280 - (C19282 + C19283) * C30305 -
             (C19284 + C19285) * C2901) *
                C13451 +
            ((C19283 + C19282) * C30295 -
             ((C19281 + C19280) * C31272 + (C19279 + C19278) * C30299) +
             (C19285 + C19284) * C31280 - (C19627 + C19626) * C30305 -
             (C19629 + C19628) * C2901) *
                C13452) *
               C31498 * C31588 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C30299 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31272 -
             (C19982 + C19983) * C30295 - (C19984 + C19985) * C31280 +
             (C19986 + C19987) * C30305 + (C19988 + C19989) * C2901) *
                C13451 +
            ((C19983 + C19982) * C30299 + (C19985 + C19984) * C31272 -
             (C19987 + C19986) * C30295 - (C19989 + C19988) * C31280 +
             (C19049 * C938 + C19047 * C946 + C19050 * C2185 + C19048 * C2186) *
                 C30305 +
             (C19049 * C947 + C19047 * C953 + C19050 * C2187 + C19048 * C2188) *
                 C2901) *
                C13452) *
               C31498 * C31417) *
              C31377)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2533 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31659 -
            (C19084 + C19085) * C2534 - (C19086 + C19087) * C31652 +
            (C19088 + C19089) * C2535 + (C19090 + C19091) * C31639 -
            (C19092 + C19093) * C2536 - (C19094 + C19095) * C31620) *
               C13451 +
           ((C19085 + C19084) * C2533 + (C19087 + C19086) * C31659 -
            (C19089 + C19088) * C2534 - (C19091 + C19090) * C31652 +
            (C19093 + C19092) * C2535 + (C19095 + C19094) * C31639 -
            (C19097 + C19096) * C2536 - (C19099 + C19098) * C31620) *
               C13452) *
              C31498 * C31330 * C2531 +
          (((C19278 + C19279) * C2534 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31659 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C2533) +
            (C19280 + C19281) * C31652 - (C19282 + C19283) * C2535 -
            (C19284 + C19285) * C31639 + (C19626 + C19627) * C2536 +
            (C19628 + C19629) * C31620) *
               C13451 +
           ((C19283 + C19282) * C2534 -
            ((C19281 + C19280) * C31659 + (C19279 + C19278) * C2533) +
            (C19285 + C19284) * C31652 - (C19627 + C19626) * C2535 -
            (C19629 + C19628) * C31639 +
            (C19049 * C300 + C19047 * C314 + C19050 * C939 + C19048 * C948) *
                C2536 +
            (C19049 * C315 + C19047 * C330 + C19050 * C949 + C19048 * C954) *
                C31620) *
               C13452) *
              C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2641 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C2635 -
            (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
               C13451 +
           ((C19085 + C19084) * C2641 + (C19087 + C19086) * C2635 -
            (C19089 + C19088) * C2642 - (C19091 + C19090) * C31277) *
               C13452) *
              C31498 * C31330 * C31660 +
          (((C19278 + C19279) * C2642 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C2635 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C2641) +
            (C19280 + C19281) * C31277) *
               C13451 +
           ((C19283 + C19282) * C2642 -
            ((C19281 + C19280) * C2635 + (C19279 + C19278) * C2641) +
            (C19285 + C19284) * C31277) *
               C13452) *
              C31498 * C31330 * C31656 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C2641 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C2635 -
            (C19286 + C19287) * C2642 - (C19288 + C19289) * C31277) *
               C13451 +
           ((C19287 + C19286) * C2641 + (C19289 + C19288) * C2635 -
            (C19291 + C19290) * C2642 - (C19293 + C19292) * C31277) *
               C13452) *
              C31498 * C31330 * C31646 +
          (((C20502 + C20503) * C2642 -
            ((C19050 * C1717 + C19048 * C1722 + C19049 * C1171 +
              C19047 * C1181) *
                 C2635 +
             (C19050 * C1713 + C19048 * C1716 + C19049 * C1163 +
              C19047 * C1172) *
                 C2641) +
            (C20504 + C20505) * C31277) *
               C13451 +
           ((C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
             C19048 * C1720) *
                C2642 -
            ((C20505 + C20504) * C2635 + (C20503 + C20502) * C2641) +
            (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
             C19048 * C1724) *
                C31277) *
               C13452) *
              C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30289 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31569 -
             (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
                C13451 +
            ((C19085 + C19084) * C30289 + (C19087 + C19086) * C31569 -
             (C19089 + C19088) * C30270 - (C19091 + C19090) * C31277) *
                C13452) *
               C31498 * C3298 +
           (((C19472 + C19473) * C30270 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31569 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30289) +
             (C19474 + C19475) * C31277) *
                C13451 +
            ((C19477 + C19476) * C30270 -
             ((C19475 + C19474) * C31569 + (C19473 + C19472) * C30289) +
             (C19479 + C19478) * C31277) *
                C13452) *
               C31498 * C31417) *
              C31373 +
          ((((C19278 + C19279) * C30270 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C31569 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C30289) +
             (C19280 + C19281) * C31277) *
                C13451 +
            ((C19283 + C19282) * C30270 -
             ((C19281 + C19280) * C31569 + (C19279 + C19278) * C30289) +
             (C19285 + C19284) * C31277) *
                C13452) *
               C31498 * C3298 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C30289 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31569 -
             (C19982 + C19983) * C30270 - (C19984 + C19985) * C31277) *
                C13451 +
            ((C19983 + C19982) * C30289 + (C19985 + C19984) * C31569 -
             (C19987 + C19986) * C30270 - (C19989 + C19988) * C31277) *
                C13452) *
               C31498 * C31417) *
              C31380 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C30289 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C31569 -
             (C19286 + C19287) * C30270 - (C19288 + C19289) * C31277) *
                C13451 +
            ((C19287 + C19286) * C30289 + (C19289 + C19288) * C31569 -
             (C19291 + C19290) * C30270 - (C19293 + C19292) * C31277) *
                C13452) *
               C31498 * C3298 +
           (((C20708 + C20709) * C30270 -
             ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
               C19047 * C1327) *
                  C31569 +
              (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
               C19047 * C1315) *
                  C30289) +
             (C20710 + C20711) * C31277) *
                C13451 +
            ((C19049 * C1298 + C19047 * C1311 + C19050 * C1303 +
              C19048 * C1320) *
                 C30270 -
             ((C20711 + C20710) * C31569 + (C20709 + C20708) * C30289) +
             (C19049 * C1310 + C19047 * C1325 + C19050 * C1321 +
              C19048 * C1330) *
                 C31277) *
                C13452) *
               C31498 * C31417) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C13451 +
            ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
               C31498 * C31413 -
           (((C19475 + C19474) * C31267 + (C19473 + C19472) * C1160) * C13452 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C13451) *
               C31498 * C31420 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C13451 +
            ((C19481 + C19480) * C1160 + (C19483 + C19482) * C31267) * C13452) *
               C31498 * C3806) *
              C31373 +
          ((((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1160 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31267) *
                C13451 +
            ((C19983 + C19982) * C1160 + (C19985 + C19984) * C31267) * C13452) *
               C31498 * C31420 -
           (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31267 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1160) *
                C13451) *
               C31498 * C31413 -
           (((C21421 + C21420) * C31267 + (C21419 + C21418) * C1160) * C13452 +
            ((C19050 * C2421 + C19048 * C2426 + C19049 * C1308 +
              C19047 * C1324) *
                 C31267 +
             (C19050 * C2417 + C19048 * C2420 + C19049 * C1297 +
              C19047 * C1309) *
                 C1160) *
                C13451) *
               C31498 * C3806) *
              C31380 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C1160 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C31267) *
                C13451 +
            ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
               C31498 * C31413 -
           (((C20711 + C20710) * C31267 + (C20709 + C20708) * C1160) * C13452 +
            ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
              C19047 * C1327) *
                 C31267 +
             (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
              C19047 * C1315) *
                 C1160) *
                C13451) *
               C31498 * C31420 +
           (((C19049 * C1301 + C19047 * C1316 + C19050 * C6499 +
              C19048 * C6503) *
                 C1160 +
             (C19049 * C1317 + C19047 * C1328 + C19050 * C6502 +
              C19048 * C6508) *
                 C31267) *
                C13451 +
            ((C19049 * C1302 + C19047 * C1318 + C19050 * C6773 +
              C19048 * C6774) *
                 C1160 +
             (C19049 * C1319 + C19047 * C1329 + C19050 * C6775 +
              C19048 * C6776) *
                 C31267) *
                C13452) *
               C31498 * C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C13451 +
            ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
               C31498 * C3298 -
           (((C19475 + C19474) * C31267 + (C19473 + C19472) * C1160) * C13452 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C13451) *
               C31498 * C31417) *
              C31660 +
          ((((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1160 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31267) *
                C13451 +
            ((C19983 + C19982) * C1160 + (C19985 + C19984) * C31267) * C13452) *
               C31498 * C31417 -
           (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31267 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1160) *
                C13451) *
               C31498 * C3298) *
              C31656 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C1160 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C31267) *
                C13451 +
            ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
               C31498 * C3298 -
           (((C20711 + C20710) * C31267 + (C20709 + C20708) * C1160) * C13452 +
            ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
              C19047 * C1327) *
                 C31267 +
             (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
              C19047 * C1315) *
                 C1160) *
                C13451) *
               C31498 * C31417) *
              C31646 +
          ((((C19049 * C1713 + C19047 * C1716 + C19050 * C5749 +
              C19048 * C5753) *
                 C1160 +
             (C19049 * C1717 + C19047 * C1722 + C19050 * C5752 +
              C19048 * C5758) *
                 C31267) *
                C13451 +
            ((C19049 * C1714 + C19047 * C1718 + C19050 * C6657 +
              C19048 * C6658) *
                 C1160 +
             (C19049 * C1719 + C19047 * C1723 + C19050 * C6659 +
              C19048 * C6660) *
                 C31267) *
                C13452) *
               C31498 * C31417 -
           (((C20505 + C20504) * C31267 + (C20503 + C20502) * C1160) * C13452 +
            ((C19050 * C1717 + C19048 * C1722 + C19049 * C1171 +
              C19047 * C1181) *
                 C31267 +
             (C19050 * C1713 + C19048 * C1716 + C19049 * C1163 +
              C19047 * C1172) *
                 C1160) *
                C13451) *
               C31498 * C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1089 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31650 -
             (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
             (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
                C13451 +
            ((C19085 + C19084) * C1089 + (C19087 + C19086) * C31650 -
             (C19089 + C19088) * C1090 - (C19091 + C19090) * C31637 +
             (C19093 + C19092) * C1091 + (C19095 + C19094) * C31609) *
                C13452) *
               C31498 * C3298 +
           (((C19472 + C19473) * C1090 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31650 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C1089) +
             (C19474 + C19475) * C31637 - (C19476 + C19477) * C1091 -
             (C19478 + C19479) * C31609) *
                C13451 +
            ((C19477 + C19476) * C1090 -
             ((C19475 + C19474) * C31650 + (C19473 + C19472) * C1089) +
             (C19479 + C19478) * C31637 - (C19769 + C19768) * C1091 -
             (C19771 + C19770) * C31609) *
                C13452) *
               C31498 * C31417) *
              C2531 +
          ((((C19278 + C19279) * C1090 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C31650 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C1089) +
             (C19280 + C19281) * C31637 - (C19282 + C19283) * C1091 -
             (C19284 + C19285) * C31609) *
                C13451 +
            ((C19283 + C19282) * C1090 -
             ((C19281 + C19280) * C31650 + (C19279 + C19278) * C1089) +
             (C19285 + C19284) * C31637 - (C19627 + C19626) * C1091 -
             (C19629 + C19628) * C31609) *
                C13452) *
               C31498 * C3298 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1089 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31650 -
             (C19982 + C19983) * C1090 - (C19984 + C19985) * C31637 +
             (C19986 + C19987) * C1091 + (C19988 + C19989) * C31609) *
                C13451 +
            ((C19983 + C19982) * C1089 + (C19985 + C19984) * C31650 -
             (C19987 + C19986) * C1090 - (C19989 + C19988) * C31637 +
             (C19049 * C938 + C19047 * C946 + C19050 * C2185 + C19048 * C2186) *
                 C1091 +
             (C19049 * C947 + C19047 * C953 + C19050 * C2187 + C19048 * C2188) *
                 C31609) *
                C13452) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C13451 +
            ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
               C31498 * C31661 -
           (((C19475 + C19474) * C31267 + (C19473 + C19472) * C1160) * C13452 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C13451) *
               C31498 * C31658 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C13451 +
            ((C19481 + C19480) * C1160 + (C19483 + C19482) * C31267) * C13452) *
               C31498 * C31649 -
           (((C21563 + C21562) * C31267 + (C21561 + C21560) * C1160) * C13452 +
            ((C19050 * C2028 + C19048 * C2036 + C19049 * C2025 +
              C19047 * C2035) *
                 C31267 +
             (C19050 * C2018 + C19048 * C2027 + C19049 * C2017 +
              C19047 * C2026) *
                 C1160) *
                C13451) *
               C31498 * C31632) *
              C2531 +
          ((((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1160 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31267) *
                C13451 +
            ((C19983 + C19982) * C1160 + (C19985 + C19984) * C31267) * C13452) *
               C31498 * C31658 -
           (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31267 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1160) *
                C13451) *
               C31498 * C31661 -
           (((C21421 + C21420) * C31267 + (C21419 + C21418) * C1160) * C13452 +
            ((C19050 * C2421 + C19048 * C2426 + C19049 * C1308 +
              C19047 * C1324) *
                 C31267 +
             (C19050 * C2417 + C19048 * C2420 + C19049 * C1297 +
              C19047 * C1309) *
                 C1160) *
                C13451) *
               C31498 * C31649 +
           (((C19049 * C2417 + C19047 * C2420 + C19050 * C6500 +
              C19048 * C6504) *
                 C1160 +
             (C19049 * C2421 + C19047 * C2426 + C19050 * C6505 +
              C19048 * C6509) *
                 C31267) *
                C13451 +
            ((C19049 * C2418 + C19047 * C2422 + C19050 * C10929 +
              C19048 * C10930) *
                 C1160 +
             (C19049 * C2423 + C19047 * C2427 + C19050 * C10931 +
              C19048 * C10932) *
                 C31267) *
                C13452) *
               C31498 * C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30289 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31569 -
             (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
                C13451 +
            ((C19085 + C19084) * C30289 + (C19087 + C19086) * C31569 -
             (C19089 + C19088) * C30270 - (C19091 + C19090) * C31277) *
                C13452) *
               C31498 * C31413 +
           (((C19472 + C19473) * C30270 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31569 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30289) +
             (C19474 + C19475) * C31277) *
                C13451 +
            ((C19477 + C19476) * C30270 -
             ((C19475 + C19474) * C31569 + (C19473 + C19472) * C30289) +
             (C19479 + C19478) * C31277) *
                C13452) *
               C31498 * C31420 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C30289 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31569 -
             (C19480 + C19481) * C30270 - (C19482 + C19483) * C31277) *
                C13451 +
            ((C19481 + C19480) * C30289 + (C19483 + C19482) * C31569 -
             (C19485 + C19484) * C30270 - (C19487 + C19486) * C31277) *
                C13452) *
               C31498 * C3806) *
              C2531 +
          ((((C19278 + C19279) * C30270 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C31569 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C30289) +
             (C19280 + C19281) * C31277) *
                C13451 +
            ((C19283 + C19282) * C30270 -
             ((C19281 + C19280) * C31569 + (C19279 + C19278) * C30289) +
             (C19285 + C19284) * C31277) *
                C13452) *
               C31498 * C31413 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C30289 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31569 -
             (C19982 + C19983) * C30270 - (C19984 + C19985) * C31277) *
                C13451 +
            ((C19983 + C19982) * C30289 + (C19985 + C19984) * C31569 -
             (C19987 + C19986) * C30270 - (C19989 + C19988) * C31277) *
                C13452) *
               C31498 * C31420 +
           (((C21418 + C21419) * C30270 -
             ((C19050 * C2421 + C19048 * C2426 + C19049 * C1308 +
               C19047 * C1324) *
                  C31569 +
              (C19050 * C2417 + C19048 * C2420 + C19049 * C1297 +
               C19047 * C1309) *
                  C30289) +
             (C21420 + C21421) * C31277) *
                C13451 +
            ((C19049 * C1295 + C19047 * C1305 + C19050 * C2419 +
              C19048 * C2424) *
                 C30270 -
             ((C21421 + C21420) * C31569 + (C21419 + C21418) * C30289) +
             (C19049 * C1304 + C19047 * C1322 + C19050 * C2425 +
              C19048 * C2428) *
                 C31277) *
                C13452) *
               C31498 * C3806) *
              C31377)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1089 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31650 -
             (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
             (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
                C13451 +
            ((C19085 + C19084) * C1089 + (C19087 + C19086) * C31650 -
             (C19089 + C19088) * C1090 - (C19091 + C19090) * C31637 +
             (C19093 + C19092) * C1091 + (C19095 + C19094) * C31609) *
                C13452) *
               C31498 * C3298 +
           (((C19472 + C19473) * C1090 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31650 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C1089) +
             (C19474 + C19475) * C31637 - (C19476 + C19477) * C1091 -
             (C19478 + C19479) * C31609) *
                C13451 +
            ((C19477 + C19476) * C1090 -
             ((C19475 + C19474) * C31650 + (C19473 + C19472) * C1089) +
             (C19479 + C19478) * C31637 - (C19769 + C19768) * C1091 -
             (C19771 + C19770) * C31609) *
                C13452) *
               C31498 * C31417) *
              C2531 +
          ((((C19278 + C19279) * C1090 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C31650 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C1089) +
             (C19280 + C19281) * C31637 - (C19282 + C19283) * C1091 -
             (C19284 + C19285) * C31609) *
                C13451 +
            ((C19283 + C19282) * C1090 -
             ((C19281 + C19280) * C31650 + (C19279 + C19278) * C1089) +
             (C19285 + C19284) * C31637 - (C19627 + C19626) * C1091 -
             (C19629 + C19628) * C31609) *
                C13452) *
               C31498 * C3298 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1089 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31650 -
             (C19982 + C19983) * C1090 - (C19984 + C19985) * C31637 +
             (C19986 + C19987) * C1091 + (C19988 + C19989) * C31609) *
                C13451 +
            ((C19983 + C19982) * C1089 + (C19985 + C19984) * C31650 -
             (C19987 + C19986) * C1090 - (C19989 + C19988) * C31637 +
             (C19049 * C938 + C19047 * C946 + C19050 * C2185 + C19048 * C2186) *
                 C1091 +
             (C19049 * C947 + C19047 * C953 + C19050 * C2187 + C19048 * C2188) *
                 C31609) *
                C13452) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C13451 +
            ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
               C31498 * C3298 -
           (((C19475 + C19474) * C31267 + (C19473 + C19472) * C1160) * C13452 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C13451) *
               C31498 * C31417) *
              C31660 +
          ((((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1160 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31267) *
                C13451 +
            ((C19983 + C19982) * C1160 + (C19985 + C19984) * C31267) * C13452) *
               C31498 * C31417 -
           (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31267 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1160) *
                C13451) *
               C31498 * C3298) *
              C31656 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C1160 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C31267) *
                C13451 +
            ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
               C31498 * C3298 -
           (((C20711 + C20710) * C31267 + (C20709 + C20708) * C1160) * C13452 +
            ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
              C19047 * C1327) *
                 C31267 +
             (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
              C19047 * C1315) *
                 C1160) *
                C13451) *
               C31498 * C31417) *
              C31646 +
          ((((C19049 * C1713 + C19047 * C1716 + C19050 * C5749 +
              C19048 * C5753) *
                 C1160 +
             (C19049 * C1717 + C19047 * C1722 + C19050 * C5752 +
              C19048 * C5758) *
                 C31267) *
                C13451 +
            ((C19049 * C1714 + C19047 * C1718 + C19050 * C6657 +
              C19048 * C6658) *
                 C1160 +
             (C19049 * C1719 + C19047 * C1723 + C19050 * C6659 +
              C19048 * C6660) *
                 C31267) *
                C13452) *
               C31498 * C31417 -
           (((C20505 + C20504) * C31267 + (C20503 + C20502) * C1160) * C13452 +
            ((C19050 * C1717 + C19048 * C1722 + C19049 * C1171 +
              C19047 * C1181) *
                 C31267 +
             (C19050 * C1713 + C19048 * C1716 + C19049 * C1163 +
              C19047 * C1172) *
                 C1160) *
                C13451) *
               C31498 * C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C30289 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31569 -
            (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
               C13451 +
           ((C19085 + C19084) * C30289 + (C19087 + C19086) * C31569 -
            (C19089 + C19088) * C30270 - (C19091 + C19090) * C31277) *
               C13452) *
              C31498 * C31330 * C1431 +
          (((C19278 + C19279) * C30270 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31569 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C30289) +
            (C19280 + C19281) * C31277) *
               C13451 +
           ((C19283 + C19282) * C30270 -
            ((C19281 + C19280) * C31569 + (C19279 + C19278) * C30289) +
            (C19285 + C19284) * C31277) *
               C13452) *
              C31498 * C31330 * C1432 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C30289 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C31569 -
            (C19286 + C19287) * C30270 - (C19288 + C19289) * C31277) *
               C13451 +
           ((C19287 + C19286) * C30289 + (C19289 + C19288) * C31569 -
            (C19291 + C19290) * C30270 - (C19293 + C19292) * C31277) *
               C13452) *
              C31498 * C31330 * C1433 +
          (((C20502 + C20503) * C30270 -
            ((C19050 * C1717 + C19048 * C1722 + C19049 * C1171 +
              C19047 * C1181) *
                 C31569 +
             (C19050 * C1713 + C19048 * C1716 + C19049 * C1163 +
              C19047 * C1172) *
                 C30289) +
            (C20504 + C20505) * C31277) *
               C13451 +
           ((C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
             C19048 * C1720) *
                C30270 -
            ((C20505 + C20504) * C31569 + (C20503 + C20502) * C30289) +
            (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
             C19048 * C1724) *
                C31277) *
               C13452) *
              C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C665 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C659 -
            (C19084 + C19085) * C666 - (C19086 + C19087) * C660 +
            (C19088 + C19089) * C667 + (C19090 + C19091) * C661 -
            (C19092 + C19093) * C668 - (C19094 + C19095) * C31620) *
               C13451 +
           ((C19085 + C19084) * C665 + (C19087 + C19086) * C659 -
            (C19089 + C19088) * C666 - (C19091 + C19090) * C660 +
            (C19093 + C19092) * C667 + (C19095 + C19094) * C661 -
            (C19097 + C19096) * C668 - (C19099 + C19098) * C31620) *
               C13452) *
              C31498 * C31330 * C31587 +
          (((C19278 + C19279) * C666 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C659 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C665) +
            (C19280 + C19281) * C660 - (C19282 + C19283) * C667 -
            (C19284 + C19285) * C661 + (C19626 + C19627) * C668 +
            (C19628 + C19629) * C31620) *
               C13451 +
           ((C19283 + C19282) * C666 -
            ((C19281 + C19280) * C659 + (C19279 + C19278) * C665) +
            (C19285 + C19284) * C660 - (C19627 + C19626) * C667 -
            (C19629 + C19628) * C661 +
            (C19049 * C300 + C19047 * C314 + C19050 * C939 + C19048 * C948) *
                C668 +
            (C19049 * C315 + C19047 * C330 + C19050 * C949 + C19048 * C954) *
                C31620) *
               C13452) *
              C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30289 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31569 -
             (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
                C13451 +
            ((C19085 + C19084) * C30289 + (C19087 + C19086) * C31569 -
             (C19089 + C19088) * C30270 - (C19091 + C19090) * C31277) *
                C13452) *
               C31498 * C1835 +
           (((C19472 + C19473) * C30270 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31569 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30289) +
             (C19474 + C19475) * C31277) *
                C13451 +
            ((C19477 + C19476) * C30270 -
             ((C19475 + C19474) * C31569 + (C19473 + C19472) * C30289) +
             (C19479 + C19478) * C31277) *
                C13452) *
               C31498 * C1836 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C30289 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31569 -
             (C19480 + C19481) * C30270 - (C19482 + C19483) * C31277) *
                C13451 +
            ((C19481 + C19480) * C30289 + (C19483 + C19482) * C31569 -
             (C19485 + C19484) * C30270 - (C19487 + C19486) * C31277) *
                C13452) *
               C31498 * C31619) *
              C31587 +
          ((((C19278 + C19279) * C30270 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C31569 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C30289) +
             (C19280 + C19281) * C31277) *
                C13451 +
            ((C19283 + C19282) * C30270 -
             ((C19281 + C19280) * C31569 + (C19279 + C19278) * C30289) +
             (C19285 + C19284) * C31277) *
                C13452) *
               C31498 * C1835 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C30289 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31569 -
             (C19982 + C19983) * C30270 - (C19984 + C19985) * C31277) *
                C13451 +
            ((C19983 + C19982) * C30289 + (C19985 + C19984) * C31569 -
             (C19987 + C19986) * C30270 - (C19989 + C19988) * C31277) *
                C13452) *
               C31498 * C1836 +
           (((C21418 + C21419) * C30270 -
             ((C19050 * C2421 + C19048 * C2426 + C19049 * C1308 +
               C19047 * C1324) *
                  C31569 +
              (C19050 * C2417 + C19048 * C2420 + C19049 * C1297 +
               C19047 * C1309) *
                  C30289) +
             (C21420 + C21421) * C31277) *
                C13451 +
            ((C19049 * C1295 + C19047 * C1305 + C19050 * C2419 +
              C19048 * C2424) *
                 C30270 -
             ((C21421 + C21420) * C31569 + (C21419 + C21418) * C30289) +
             (C19049 * C1304 + C19047 * C1322 + C19050 * C2425 +
              C19048 * C2428) *
                 C31277) *
                C13452) *
               C31498 * C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C13451 +
            ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
               C31498 * C31588 -
           (((C19475 + C19474) * C31267 + (C19473 + C19472) * C1160) * C13452 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C13451) *
               C31498 * C31417) *
              C1431 +
          ((((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1160 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31267) *
                C13451 +
            ((C19983 + C19982) * C1160 + (C19985 + C19984) * C31267) * C13452) *
               C31498 * C31417 -
           (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31267 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1160) *
                C13451) *
               C31498 * C31588) *
              C1432 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C1160 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C31267) *
                C13451 +
            ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
               C31498 * C31588 -
           (((C20711 + C20710) * C31267 + (C20709 + C20708) * C1160) * C13452 +
            ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
              C19047 * C1327) *
                 C31267 +
             (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
              C19047 * C1315) *
                 C1160) *
                C13451) *
               C31498 * C31417) *
              C1433 +
          ((((C19049 * C1713 + C19047 * C1716 + C19050 * C5749 +
              C19048 * C5753) *
                 C1160 +
             (C19049 * C1717 + C19047 * C1722 + C19050 * C5752 +
              C19048 * C5758) *
                 C31267) *
                C13451 +
            ((C19049 * C1714 + C19047 * C1718 + C19050 * C6657 +
              C19048 * C6658) *
                 C1160 +
             (C19049 * C1719 + C19047 * C1723 + C19050 * C6659 +
              C19048 * C6660) *
                 C31267) *
                C13452) *
               C31498 * C31417 -
           (((C20505 + C20504) * C31267 + (C20503 + C20502) * C1160) * C13452 +
            ((C19050 * C1717 + C19048 * C1722 + C19049 * C1171 +
              C19047 * C1181) *
                 C31267 +
             (C19050 * C1713 + C19048 * C1716 + C19049 * C1163 +
              C19047 * C1172) *
                 C1160) *
                C13451) *
               C31498 * C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C293 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C287 -
             (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
             (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
                C13451 +
            ((C19085 + C19084) * C293 + (C19087 + C19086) * C287 -
             (C19089 + C19088) * C294 - (C19091 + C19090) * C288 +
             (C19093 + C19092) * C295 + (C19095 + C19094) * C31609) *
                C13452) *
               C31498 * C31588 +
           (((C19472 + C19473) * C294 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C287 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C293) +
             (C19474 + C19475) * C288 - (C19476 + C19477) * C295 -
             (C19478 + C19479) * C31609) *
                C13451 +
            ((C19477 + C19476) * C294 -
             ((C19475 + C19474) * C287 + (C19473 + C19472) * C293) +
             (C19479 + C19478) * C288 - (C19769 + C19768) * C295 -
             (C19771 + C19770) * C31609) *
                C13452) *
               C31498 * C31417) *
              C31587 +
          ((((C19278 + C19279) * C294 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C287 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C293) +
             (C19280 + C19281) * C288 - (C19282 + C19283) * C295 -
             (C19284 + C19285) * C31609) *
                C13451 +
            ((C19283 + C19282) * C294 -
             ((C19281 + C19280) * C287 + (C19279 + C19278) * C293) +
             (C19285 + C19284) * C288 - (C19627 + C19626) * C295 -
             (C19629 + C19628) * C31609) *
                C13452) *
               C31498 * C31588 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C293 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C287 -
             (C19982 + C19983) * C294 - (C19984 + C19985) * C288 +
             (C19986 + C19987) * C295 + (C19988 + C19989) * C31609) *
                C13451 +
            ((C19983 + C19982) * C293 + (C19985 + C19984) * C287 -
             (C19987 + C19986) * C294 - (C19989 + C19988) * C288 +
             (C19049 * C938 + C19047 * C946 + C19050 * C2185 + C19048 * C2186) *
                 C295 +
             (C19049 * C947 + C19047 * C953 + C19050 * C2187 + C19048 * C2188) *
                 C31609) *
                C13452) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C13451 +
            ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
               C31498 * C2299 -
           (((C19475 + C19474) * C31267 + (C19473 + C19472) * C1160) * C13452 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C13451) *
               C31498 * C2300 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C13451 +
            ((C19481 + C19480) * C1160 + (C19483 + C19482) * C31267) * C13452) *
               C31498 * C2301 -
           (((C21563 + C21562) * C31267 + (C21561 + C21560) * C1160) * C13452 +
            ((C19050 * C2028 + C19048 * C2036 + C19049 * C2025 +
              C19047 * C2035) *
                 C31267 +
             (C19050 * C2018 + C19048 * C2027 + C19049 * C2017 +
              C19047 * C2026) *
                 C1160) *
                C13451) *
               C31498 * C31632) *
              C31587 +
          ((((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1160 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31267) *
                C13451 +
            ((C19983 + C19982) * C1160 + (C19985 + C19984) * C31267) * C13452) *
               C31498 * C2300 -
           (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31267 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1160) *
                C13451) *
               C31498 * C2299 -
           (((C21421 + C21420) * C31267 + (C21419 + C21418) * C1160) * C13452 +
            ((C19050 * C2421 + C19048 * C2426 + C19049 * C1308 +
              C19047 * C1324) *
                 C31267 +
             (C19050 * C2417 + C19048 * C2420 + C19049 * C1297 +
              C19047 * C1309) *
                 C1160) *
                C13451) *
               C31498 * C2301 +
           (((C19049 * C2417 + C19047 * C2420 + C19050 * C6500 +
              C19048 * C6504) *
                 C1160 +
             (C19049 * C2421 + C19047 * C2426 + C19050 * C6505 +
              C19048 * C6509) *
                 C31267) *
                C13451 +
            ((C19049 * C2418 + C19047 * C2422 + C19050 * C10929 +
              C19048 * C10930) *
                 C1160 +
             (C19049 * C2423 + C19047 * C2427 + C19050 * C10931 +
              C19048 * C10932) *
                 C31267) *
                C13452) *
               C31498 * C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                   C114 +
               (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                   C102 -
               (C19084 + C19085) * C115 - (C19086 + C19087) * C103 +
               (C19088 + C19089) * C116 + (C19090 + C19091) * C104 -
               (C19092 + C19093) * C117 - (C19094 + C19095) * C105 +
               (C19096 + C19097) * C118 + (C19098 + C19099) * C106) *
                  C13451 +
              ((C19085 + C19084) * C114 + (C19087 + C19086) * C102 -
               (C19089 + C19088) * C115 - (C19091 + C19090) * C103 +
               (C19093 + C19092) * C116 + (C19095 + C19094) * C104 -
               (C19097 + C19096) * C117 - (C19099 + C19098) * C105 +
               (C19049 * C124 + C19047 * C136 + C19050 * C779 + C19048 * C780) *
                   C118 +
               (C19049 * C137 + C19047 * C145 + C19050 * C781 + C19048 * C782) *
                   C106) *
                  C13452) *
             C31498 * C31330 * C31318 +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C19049 * C119 + C19047 * C126 + C19050 * C486 +
                 C19048 * C497) *
                    C293 +
                (C19049 * C127 + C19047 * C140 + C19050 * C496 +
                 C19048 * C515) *
                    C287 -
                (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
                (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
                   C13451 +
               ((C19085 + C19084) * C293 + (C19087 + C19086) * C287 -
                (C19089 + C19088) * C294 - (C19091 + C19090) * C288 +
                (C19093 + C19092) * C295 + (C19095 + C19094) * C31609) *
                   C13452) *
                  C31498 * C31330 * C31653 +
              (((C19278 + C19279) * C294 -
                ((C19050 * C941 + C19048 * C950 + C19049 * C307 +
                  C19047 * C326) *
                     C287 +
                 (C19050 * C935 + C19048 * C940 + C19049 * C297 +
                  C19047 * C308) *
                     C293) +
                (C19280 + C19281) * C288 - (C19282 + C19283) * C295 -
                (C19284 + C19285) * C31609) *
                   C13451 +
               ((C19283 + C19282) * C294 -
                ((C19281 + C19280) * C287 + (C19279 + C19278) * C293) +
                (C19285 + C19284) * C288 -
                (C19050 * C938 + C19048 * C946 + C19049 * C299 +
                 C19047 * C312) *
                    C295 -
                (C19050 * C947 + C19048 * C953 + C19049 * C313 +
                 C19047 * C329) *
                    C31609) *
                   C13452) *
                  C31498 * C31330 * C31641 +
              (((C19049 * C301 + C19047 * C316 + C19050 * C1300 +
                 C19048 * C1315) *
                    C293 +
                (C19049 * C317 + C19047 * C331 + C19050 * C1314 +
                 C19048 * C1327) *
                    C287 -
                (C19286 + C19287) * C294 - (C19288 + C19289) * C288 +
                (C19290 + C19291) * C295 + (C19292 + C19293) * C31609) *
                   C13451 +
               ((C19287 + C19286) * C293 + (C19289 + C19288) * C287 -
                (C19291 + C19290) * C294 - (C19293 + C19292) * C288 +
                (C19049 * C304 + C19047 * C322 + C19050 * C1599 +
                 C19048 * C1600) *
                    C295 +
                (C19049 * C323 + C19047 * C334 + C19050 * C1601 +
                 C19048 * C1602) *
                    C31609) *
                   C13452) *
                  C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C293 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C287 -
            (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
            (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
               C13451 +
           ((C19085 + C19084) * C293 + (C19087 + C19086) * C287 -
            (C19089 + C19088) * C294 - (C19091 + C19090) * C288 +
            (C19093 + C19092) * C295 + (C19095 + C19094) * C31609) *
               C13452) *
              C31498 * C31654 +
          (((C19472 + C19473) * C294 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C287 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C293) +
            (C19474 + C19475) * C288 - (C19476 + C19477) * C295 -
            (C19478 + C19479) * C31609) *
               C13451 +
           ((C19477 + C19476) * C294 -
            ((C19475 + C19474) * C287 + (C19473 + C19472) * C293) +
            (C19479 + C19478) * C288 -
            (C19050 * C493 + C19048 * C511 + C19049 * C488 + C19047 * C501) *
                C295 -
            (C19050 * C512 + C19048 * C523 + C19049 * C502 + C19047 * C518) *
                C31609) *
               C13452) *
              C31498 * C31643 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C293 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C287 -
            (C19480 + C19481) * C294 - (C19482 + C19483) * C288 +
            (C19484 + C19485) * C295 + (C19486 + C19487) * C31609) *
               C13451 +
           ((C19481 + C19480) * C293 + (C19483 + C19482) * C287 -
            (C19485 + C19484) * C294 - (C19487 + C19486) * C288 +
            (C19049 * C493 + C19047 * C511 + C19050 * C2303 + C19048 * C2304) *
                C295 +
            (C19049 * C512 + C19047 * C523 + C19050 * C2305 + C19048 * C2306) *
                C31609) *
               C13452) *
              C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1089 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31650 -
            (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
            (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
               C13451 +
           ((C19085 + C19084) * C1089 + (C19087 + C19086) * C31650 -
            (C19089 + C19088) * C1090 - (C19091 + C19090) * C31637 +
            (C19093 + C19092) * C1091 + (C19095 + C19094) * C31609) *
               C13452) *
              C31498 * C31330 * C1086 +
          (((C19278 + C19279) * C1090 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31650 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1089) +
            (C19280 + C19281) * C31637 - (C19282 + C19283) * C1091 -
            (C19284 + C19285) * C31609) *
               C13451 +
           ((C19283 + C19282) * C1090 -
            ((C19281 + C19280) * C31650 + (C19279 + C19278) * C1089) +
            (C19285 + C19284) * C31637 - (C19627 + C19626) * C1091 -
            (C19629 + C19628) * C31609) *
               C13452) *
              C31498 * C31330 * C1087 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C1089 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C31650 -
            (C19286 + C19287) * C1090 - (C19288 + C19289) * C31637 +
            (C19290 + C19291) * C1091 + (C19292 + C19293) * C31609) *
               C13451 +
           ((C19287 + C19286) * C1089 + (C19289 + C19288) * C31650 -
            (C19291 + C19290) * C1090 - (C19293 + C19292) * C31637 +
            (C19049 * C304 + C19047 * C322 + C19050 * C1599 + C19048 * C1600) *
                C1091 +
            (C19049 * C323 + C19047 * C334 + C19050 * C1601 + C19048 * C1602) *
                C31609) *
               C13452) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1160 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31267) *
               C13451 +
           ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
              C31498 * C31330 * C1155 -
          (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
           ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                C31267 +
            (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                C1160) *
               C13451) *
              C31498 * C31330 * C1156 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C1160 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C31267) *
               C13451 +
           ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
              C31498 * C31330 * C1157 -
          (((C19050 * C1719 + C19048 * C1723 + C19049 * C1169 +
             C19047 * C1180) *
                C31267 +
            (C19050 * C1714 + C19048 * C1718 + C19049 * C1162 +
             C19047 * C1170) *
                C1160) *
               C13452 +
           ((C19050 * C1717 + C19048 * C1722 + C19049 * C1171 +
             C19047 * C1181) *
                C31267 +
            (C19050 * C1713 + C19048 * C1716 + C19049 * C1163 +
             C19047 * C1172) *
                C1160) *
               C13451) *
              C31498 * C31330 * C1158 +
          (((C19049 * C1164 + C19047 * C1173 + C19050 * C5750 +
             C19048 * C5755) *
                C1160 +
            (C19049 * C1174 + C19047 * C1182 + C19050 * C5754 +
             C19048 * C5759) *
                C31267) *
               C13451 +
           ((C19049 * C1165 + C19047 * C1175 + C19050 * C6079 +
             C19048 * C6080) *
                C1160 +
            (C19049 * C1176 + C19047 * C1183 + C19050 * C6081 +
             C19048 * C6082) *
                C31267) *
               C13452) *
              C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C13451 +
            ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
               C31498 * C31654 -
           (((C19475 + C19474) * C31267 + (C19473 + C19472) * C1160) * C13452 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C13451) *
               C31498 * C31643 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C13451 +
            ((C19481 + C19480) * C1160 + (C19483 + C19482) * C31267) * C13452) *
               C31498 * C31619) *
              C1086 +
          ((((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1160 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31267) *
                C13451 +
            ((C19983 + C19982) * C1160 + (C19985 + C19984) * C31267) * C13452) *
               C31498 * C31643 -
           (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31267 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1160) *
                C13451) *
               C31498 * C31654 -
           (((C19050 * C2423 + C19048 * C2427 + C19049 * C1306 +
              C19047 * C1323) *
                 C31267 +
             (C19050 * C2418 + C19048 * C2422 + C19049 * C1296 +
              C19047 * C1307) *
                 C1160) *
                C13452 +
            ((C19050 * C2421 + C19048 * C2426 + C19049 * C1308 +
              C19047 * C1324) *
                 C31267 +
             (C19050 * C2417 + C19048 * C2420 + C19049 * C1297 +
              C19047 * C1309) *
                 C1160) *
                C13451) *
               C31498 * C31619) *
              C1087 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C1160 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C31267) *
                C13451 +
            ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
               C31498 * C31654 -
           (((C19050 * C1319 + C19048 * C1329 + C19049 * C1312 +
              C19047 * C1326) *
                 C31267 +
             (C19050 * C1302 + C19048 * C1318 + C19049 * C1299 +
              C19047 * C1313) *
                 C1160) *
                C13452 +
            ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
              C19047 * C1327) *
                 C31267 +
             (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
              C19047 * C1315) *
                 C1160) *
                C13451) *
               C31498 * C31643 +
           (((C19049 * C1301 + C19047 * C1316 + C19050 * C6499 +
              C19048 * C6503) *
                 C1160 +
             (C19049 * C1317 + C19047 * C1328 + C19050 * C6502 +
              C19048 * C6508) *
                 C31267) *
                C13451 +
            ((C19049 * C1302 + C19047 * C1318 + C19050 * C6773 +
              C19048 * C6774) *
                 C1160 +
             (C19049 * C1319 + C19047 * C1329 + C19050 * C6775 +
              C19048 * C6776) *
                 C31267) *
                C13452) *
               C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1089 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31650 -
            (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
            (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
               C13451 +
           ((C19085 + C19084) * C1089 + (C19087 + C19086) * C31650 -
            (C19089 + C19088) * C1090 - (C19091 + C19090) * C31637 +
            (C19093 + C19092) * C1091 + (C19095 + C19094) * C31609) *
               C13452) *
              C31498 * C1835 +
          (((C19472 + C19473) * C1090 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31650 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1089) +
            (C19474 + C19475) * C31637 - (C19476 + C19477) * C1091 -
            (C19478 + C19479) * C31609) *
               C13451 +
           ((C19477 + C19476) * C1090 -
            ((C19475 + C19474) * C31650 + (C19473 + C19472) * C1089) +
            (C19479 + C19478) * C31637 - (C19769 + C19768) * C1091 -
            (C19771 + C19770) * C31609) *
               C13452) *
              C31498 * C1836 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C1089 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C31650 -
            (C19480 + C19481) * C1090 - (C19482 + C19483) * C31637 +
            (C19484 + C19485) * C1091 + (C19486 + C19487) * C31609) *
               C13451 +
           ((C19481 + C19480) * C1089 + (C19483 + C19482) * C31650 -
            (C19485 + C19484) * C1090 - (C19487 + C19486) * C31637 +
            (C19049 * C493 + C19047 * C511 + C19050 * C2303 + C19048 * C2304) *
                C1091 +
            (C19049 * C512 + C19047 * C523 + C19050 * C2305 + C19048 * C2306) *
                C31609) *
               C13452) *
              C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C13451 +
            ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
               C31498 * C1835 -
           (((C19475 + C19474) * C31267 + (C19473 + C19472) * C1160) * C13452 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C13451) *
               C31498 * C1836 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C13451 +
            ((C19481 + C19480) * C1160 + (C19483 + C19482) * C31267) * C13452) *
               C31498 * C31619) *
              C31653 +
          ((((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1160 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31267) *
                C13451 +
            ((C19983 + C19982) * C1160 + (C19985 + C19984) * C31267) * C13452) *
               C31498 * C1836 -
           (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31267 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1160) *
                C13451) *
               C31498 * C1835 -
           (((C19050 * C2423 + C19048 * C2427 + C19049 * C1306 +
              C19047 * C1323) *
                 C31267 +
             (C19050 * C2418 + C19048 * C2422 + C19049 * C1296 +
              C19047 * C1307) *
                 C1160) *
                C13452 +
            ((C19050 * C2421 + C19048 * C2426 + C19049 * C1308 +
              C19047 * C1324) *
                 C31267 +
             (C19050 * C2417 + C19048 * C2420 + C19049 * C1297 +
              C19047 * C1309) *
                 C1160) *
                C13451) *
               C31498 * C31619) *
              C31641 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C1160 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C31267) *
                C13451 +
            ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
               C31498 * C1835 -
           (((C20711 + C20710) * C31267 + (C20709 + C20708) * C1160) * C13452 +
            ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
              C19047 * C1327) *
                 C31267 +
             (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
              C19047 * C1315) *
                 C1160) *
                C13451) *
               C31498 * C1836 +
           (((C19049 * C1301 + C19047 * C1316 + C19050 * C6499 +
              C19048 * C6503) *
                 C1160 +
             (C19049 * C1317 + C19047 * C1328 + C19050 * C6502 +
              C19048 * C6508) *
                 C31267) *
                C13451 +
            ((C19049 * C1302 + C19047 * C1318 + C19050 * C6773 +
              C19048 * C6774) *
                 C1160 +
             (C19049 * C1319 + C19047 * C1329 + C19050 * C6775 +
              C19048 * C6776) *
                 C31267) *
                C13452) *
               C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1160 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31267) *
               C13451 +
           ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
              C31498 * C2010 -
          (((C19475 + C19474) * C31267 + (C19473 + C19472) * C1160) * C13452 +
           ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                C31267 +
            (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                C1160) *
               C13451) *
              C31498 * C2011 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C1160 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C31267) *
               C13451 +
           ((C19481 + C19480) * C1160 + (C19483 + C19482) * C31267) * C13452) *
              C31498 * C2012 -
          (((C19050 * C2030 + C19048 * C2037 + C19049 * C2023 +
             C19047 * C2034) *
                C31267 +
            (C19050 * C2019 + C19048 * C2029 + C19049 * C2016 +
             C19047 * C2024) *
                C1160) *
               C13452 +
           ((C19050 * C2028 + C19048 * C2036 + C19049 * C2025 +
             C19047 * C2035) *
                C31267 +
            (C19050 * C2018 + C19048 * C2027 + C19049 * C2017 +
             C19047 * C2026) *
                C1160) *
               C13451) *
              C31498 * C2013 +
          (((C19049 * C2018 + C19047 * C2027 + C19050 * C10775 +
             C19048 * C10778) *
                C1160 +
            (C19049 * C2028 + C19047 * C2036 + C19050 * C10777 +
             C19048 * C10781) *
                C31267) *
               C13451 +
           ((C19049 * C2019 + C19047 * C2029 + C19050 * C11031 +
             C19048 * C11032) *
                C1160 +
            (C19049 * C2030 + C19047 * C2037 + C19050 * C11033 +
             C19048 * C11034) *
                C31267) *
               C13452) *
              C31498 * C2014) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30289 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31569 -
             (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
                C13451 +
            ((C19085 + C19084) * C30289 + (C19087 + C19086) * C31569 -
             (C19089 + C19088) * C30270 - (C19091 + C19090) * C31277) *
                C13452) *
               C31498 * C31588 +
           (((C19472 + C19473) * C30270 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31569 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30289) +
             (C19474 + C19475) * C31277) *
                C13451 +
            ((C19477 + C19476) * C30270 -
             ((C19475 + C19474) * C31569 + (C19473 + C19472) * C30289) +
             (C19479 + C19478) * C31277) *
                C13452) *
               C31498 * C31417) *
              C1086 +
          ((((C19278 + C19279) * C30270 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C31569 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C30289) +
             (C19280 + C19281) * C31277) *
                C13451 +
            ((C19283 + C19282) * C30270 -
             ((C19281 + C19280) * C31569 + (C19279 + C19278) * C30289) +
             (C19285 + C19284) * C31277) *
                C13452) *
               C31498 * C31588 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C30289 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31569 -
             (C19982 + C19983) * C30270 - (C19984 + C19985) * C31277) *
                C13451 +
            ((C19983 + C19982) * C30289 + (C19985 + C19984) * C31569 -
             (C19987 + C19986) * C30270 - (C19989 + C19988) * C31277) *
                C13452) *
               C31498 * C31417) *
              C1087 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C30289 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C31569 -
             (C19286 + C19287) * C30270 - (C19288 + C19289) * C31277) *
                C13451 +
            ((C19287 + C19286) * C30289 + (C19289 + C19288) * C31569 -
             (C19291 + C19290) * C30270 - (C19293 + C19292) * C31277) *
                C13452) *
               C31498 * C31588 +
           (((C20708 + C20709) * C30270 -
             ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
               C19047 * C1327) *
                  C31569 +
              (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
               C19047 * C1315) *
                  C30289) +
             (C20710 + C20711) * C31277) *
                C13451 +
            ((C19049 * C1298 + C19047 * C1311 + C19050 * C1303 +
              C19048 * C1320) *
                 C30270 -
             ((C20711 + C20710) * C31569 + (C20709 + C20708) * C30289) +
             (C19049 * C1310 + C19047 * C1325 + C19050 * C1321 +
              C19048 * C1330) *
                 C31277) *
                C13452) *
               C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C665 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C659 -
            (C19084 + C19085) * C666 - (C19086 + C19087) * C660 +
            (C19088 + C19089) * C667 + (C19090 + C19091) * C661 -
            (C19092 + C19093) * C668 - (C19094 + C19095) * C31620) *
               C13451 +
           ((C19085 + C19084) * C665 + (C19087 + C19086) * C659 -
            (C19089 + C19088) * C666 - (C19091 + C19090) * C660 +
            (C19093 + C19092) * C667 + (C19095 + C19094) * C661 -
            (C19097 + C19096) * C668 - (C19099 + C19098) * C31620) *
               C13452) *
              C31498 * C31588 +
          (((C19472 + C19473) * C666 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C659 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C665) +
            (C19474 + C19475) * C660 - (C19476 + C19477) * C667 -
            (C19478 + C19479) * C661 + (C19768 + C19769) * C668 +
            (C19770 + C19771) * C31620) *
               C13451 +
           ((C19477 + C19476) * C666 -
            ((C19475 + C19474) * C659 + (C19473 + C19472) * C665) +
            (C19479 + C19478) * C660 - (C19769 + C19768) * C667 -
            (C19771 + C19770) * C661 +
            (C19049 * C489 + C19047 * C503 + C19050 * C494 + C19048 * C513) *
                C668 +
            (C19049 * C504 + C19047 * C519 + C19050 * C514 + C19048 * C524) *
                C31620) *
               C13452) *
              C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C30289 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31569 -
            (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
               C13451 +
           ((C19085 + C19084) * C30289 + (C19087 + C19086) * C31569 -
            (C19089 + C19088) * C30270 - (C19091 + C19090) * C31277) *
               C13452) *
              C31498 * C2299 +
          (((C19472 + C19473) * C30270 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31569 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C30289) +
            (C19474 + C19475) * C31277) *
               C13451 +
           ((C19477 + C19476) * C30270 -
            ((C19475 + C19474) * C31569 + (C19473 + C19472) * C30289) +
            (C19479 + C19478) * C31277) *
               C13452) *
              C31498 * C2300 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C30289 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C31569 -
            (C19480 + C19481) * C30270 - (C19482 + C19483) * C31277) *
               C13451 +
           ((C19481 + C19480) * C30289 + (C19483 + C19482) * C31569 -
            (C19485 + C19484) * C30270 - (C19487 + C19486) * C31277) *
               C13452) *
              C31498 * C2301 +
          (((C21560 + C21561) * C30270 -
            ((C19050 * C2028 + C19048 * C2036 + C19049 * C2025 +
              C19047 * C2035) *
                 C31569 +
             (C19050 * C2018 + C19048 * C2027 + C19049 * C2017 +
              C19047 * C2026) *
                 C30289) +
            (C21562 + C21563) * C31277) *
               C13451 +
           ((C19049 * C2015 + C19047 * C2022 + C19050 * C2020 +
             C19048 * C2031) *
                C30270 -
            ((C21563 + C21562) * C31569 + (C21561 + C21560) * C30289) +
            (C19049 * C2021 + C19047 * C2033 + C19050 * C2032 +
             C19048 * C2038) *
                C31277) *
               C13452) *
              C31498 * C31632) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C293 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C287 -
            (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
            (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
               C13451 +
           ((C19085 + C19084) * C293 + (C19087 + C19086) * C287 -
            (C19089 + C19088) * C294 - (C19091 + C19090) * C288 +
            (C19093 + C19092) * C295 + (C19095 + C19094) * C31609) *
               C13452) *
              C31498 * C31330 * C31653 +
          (((C19278 + C19279) * C294 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C287 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C293) +
            (C19280 + C19281) * C288 - (C19282 + C19283) * C295 -
            (C19284 + C19285) * C31609) *
               C13451 +
           ((C19283 + C19282) * C294 -
            ((C19281 + C19280) * C287 + (C19279 + C19278) * C293) +
            (C19285 + C19284) * C288 -
            (C19050 * C938 + C19048 * C946 + C19049 * C299 + C19047 * C312) *
                C295 -
            (C19050 * C947 + C19048 * C953 + C19049 * C313 + C19047 * C329) *
                C31609) *
               C13452) *
              C31498 * C31330 * C31641 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C293 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C287 -
            (C19286 + C19287) * C294 - (C19288 + C19289) * C288 +
            (C19290 + C19291) * C295 + (C19292 + C19293) * C31609) *
               C13451 +
           ((C19287 + C19286) * C293 + (C19289 + C19288) * C287 -
            (C19291 + C19290) * C294 - (C19293 + C19292) * C288 +
            (C19049 * C304 + C19047 * C322 + C19050 * C1599 + C19048 * C1600) *
                C295 +
            (C19049 * C323 + C19047 * C334 + C19050 * C1601 + C19048 * C1602) *
                C31609) *
               C13452) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
               C114 +
           (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
               C102 -
           (C19084 + C19085) * C115 - (C19086 + C19087) * C103 +
           (C19088 + C19089) * C116 + (C19090 + C19091) * C104 -
           (C19092 + C19093) * C117 - (C19094 + C19095) * C105 +
           (C19096 + C19097) * C118 + (C19098 + C19099) * C106) *
              C13451 +
          ((C19085 + C19084) * C114 + (C19087 + C19086) * C102 -
           (C19089 + C19088) * C115 - (C19091 + C19090) * C103 +
           (C19093 + C19092) * C116 + (C19095 + C19094) * C104 -
           (C19097 + C19096) * C117 - (C19099 + C19098) * C105 +
           (C19049 * C124 + C19047 * C136 + C19050 * C779 + C19048 * C780) *
               C118 +
           (C19049 * C137 + C19047 * C145 + C19050 * C781 + C19048 * C782) *
               C106) *
              C13452) *
         C31498 * C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1089 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31650 -
            (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
            (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
               C13451 +
           ((C19085 + C19084) * C1089 + (C19087 + C19086) * C31650 -
            (C19089 + C19088) * C1090 - (C19091 + C19090) * C31637 +
            (C19093 + C19092) * C1091 + (C19095 + C19094) * C31609) *
               C13452) *
              C31498 * C31330 * C1086 +
          (((C19278 + C19279) * C1090 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31650 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1089) +
            (C19280 + C19281) * C31637 - (C19282 + C19283) * C1091 -
            (C19284 + C19285) * C31609) *
               C13451 +
           ((C19283 + C19282) * C1090 -
            ((C19281 + C19280) * C31650 + (C19279 + C19278) * C1089) +
            (C19285 + C19284) * C31637 - (C19627 + C19626) * C1091 -
            (C19629 + C19628) * C31609) *
               C13452) *
              C31498 * C31330 * C1087 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C1089 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C31650 -
            (C19286 + C19287) * C1090 - (C19288 + C19289) * C31637 +
            (C19290 + C19291) * C1091 + (C19292 + C19293) * C31609) *
               C13451 +
           ((C19287 + C19286) * C1089 + (C19289 + C19288) * C31650 -
            (C19291 + C19290) * C1090 - (C19293 + C19292) * C31637 +
            (C19049 * C304 + C19047 * C322 + C19050 * C1599 + C19048 * C1600) *
                C1091 +
            (C19049 * C323 + C19047 * C334 + C19050 * C1601 + C19048 * C1602) *
                C31609) *
               C13452) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1160 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31267) *
               C13451 +
           ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
              C31498 * C31330 * C1155 -
          (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
           ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                C31267 +
            (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                C1160) *
               C13451) *
              C31498 * C31330 * C1156 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C1160 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C31267) *
               C13451 +
           ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
              C31498 * C31330 * C1157 -
          (((C19050 * C1719 + C19048 * C1723 + C19049 * C1169 +
             C19047 * C1180) *
                C31267 +
            (C19050 * C1714 + C19048 * C1718 + C19049 * C1162 +
             C19047 * C1170) *
                C1160) *
               C13452 +
           ((C19050 * C1717 + C19048 * C1722 + C19049 * C1171 +
             C19047 * C1181) *
                C31267 +
            (C19050 * C1713 + C19048 * C1716 + C19049 * C1163 +
             C19047 * C1172) *
                C1160) *
               C13451) *
              C31498 * C31330 * C1158 +
          (((C19049 * C1164 + C19047 * C1173 + C19050 * C5750 +
             C19048 * C5755) *
                C1160 +
            (C19049 * C1174 + C19047 * C1182 + C19050 * C5754 +
             C19048 * C5759) *
                C31267) *
               C13451 +
           ((C19049 * C1165 + C19047 * C1175 + C19050 * C6079 +
             C19048 * C6080) *
                C1160 +
            (C19049 * C1176 + C19047 * C1183 + C19050 * C6081 +
             C19048 * C6082) *
                C31267) *
               C13452) *
              C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1089 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31650 -
            (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
            (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
               C13451 +
           ((C19085 + C19084) * C1089 + (C19087 + C19086) * C31650 -
            (C19089 + C19088) * C1090 - (C19091 + C19090) * C31637 +
            (C19093 + C19092) * C1091 + (C19095 + C19094) * C31609) *
               C13452) *
              C31498 * C1835 +
          (((C19472 + C19473) * C1090 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31650 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1089) +
            (C19474 + C19475) * C31637 - (C19476 + C19477) * C1091 -
            (C19478 + C19479) * C31609) *
               C13451 +
           ((C19477 + C19476) * C1090 -
            ((C19475 + C19474) * C31650 + (C19473 + C19472) * C1089) +
            (C19479 + C19478) * C31637 - (C19769 + C19768) * C1091 -
            (C19771 + C19770) * C31609) *
               C13452) *
              C31498 * C1836 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C1089 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C31650 -
            (C19480 + C19481) * C1090 - (C19482 + C19483) * C31637 +
            (C19484 + C19485) * C1091 + (C19486 + C19487) * C31609) *
               C13451 +
           ((C19481 + C19480) * C1089 + (C19483 + C19482) * C31650 -
            (C19485 + C19484) * C1090 - (C19487 + C19486) * C31637 +
            (C19049 * C493 + C19047 * C511 + C19050 * C2303 + C19048 * C2304) *
                C1091 +
            (C19049 * C512 + C19047 * C523 + C19050 * C2305 + C19048 * C2306) *
                C31609) *
               C13452) *
              C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C13451 +
            ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
               C31498 * C1835 -
           (((C19475 + C19474) * C31267 + (C19473 + C19472) * C1160) * C13452 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C13451) *
               C31498 * C1836 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C13451 +
            ((C19481 + C19480) * C1160 + (C19483 + C19482) * C31267) * C13452) *
               C31498 * C31619) *
              C31653 +
          ((((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1160 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31267) *
                C13451 +
            ((C19983 + C19982) * C1160 + (C19985 + C19984) * C31267) * C13452) *
               C31498 * C1836 -
           (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31267 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1160) *
                C13451) *
               C31498 * C1835 -
           (((C19050 * C2423 + C19048 * C2427 + C19049 * C1306 +
              C19047 * C1323) *
                 C31267 +
             (C19050 * C2418 + C19048 * C2422 + C19049 * C1296 +
              C19047 * C1307) *
                 C1160) *
                C13452 +
            ((C19050 * C2421 + C19048 * C2426 + C19049 * C1308 +
              C19047 * C1324) *
                 C31267 +
             (C19050 * C2417 + C19048 * C2420 + C19049 * C1297 +
              C19047 * C1309) *
                 C1160) *
                C13451) *
               C31498 * C31619) *
              C31641 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C1160 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C31267) *
                C13451 +
            ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
               C31498 * C1835 -
           (((C20711 + C20710) * C31267 + (C20709 + C20708) * C1160) * C13452 +
            ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
              C19047 * C1327) *
                 C31267 +
             (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
              C19047 * C1315) *
                 C1160) *
                C13451) *
               C31498 * C1836 +
           (((C19049 * C1301 + C19047 * C1316 + C19050 * C6499 +
              C19048 * C6503) *
                 C1160 +
             (C19049 * C1317 + C19047 * C1328 + C19050 * C6502 +
              C19048 * C6508) *
                 C31267) *
                C13451 +
            ((C19049 * C1302 + C19047 * C1318 + C19050 * C6773 +
              C19048 * C6774) *
                 C1160 +
             (C19049 * C1319 + C19047 * C1329 + C19050 * C6775 +
              C19048 * C6776) *
                 C31267) *
                C13452) *
               C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30299 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31272 -
             (C19084 + C19085) * C30295 - (C19086 + C19087) * C31280 +
             (C19088 + C19089) * C30305 + (C19090 + C19091) * C2901) *
                C13451 +
            ((C19085 + C19084) * C30299 + (C19087 + C19086) * C31272 -
             (C19089 + C19088) * C30295 - (C19091 + C19090) * C31280 +
             (C19093 + C19092) * C30305 + (C19095 + C19094) * C2901) *
                C13452) *
               C31498 * C3298 +
           (((C19472 + C19473) * C30295 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31272 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30299) +
             (C19474 + C19475) * C31280 - (C19476 + C19477) * C30305 -
             (C19478 + C19479) * C2901) *
                C13451 +
            ((C19477 + C19476) * C30295 -
             ((C19475 + C19474) * C31272 + (C19473 + C19472) * C30299) +
             (C19479 + C19478) * C31280 - (C19769 + C19768) * C30305 -
             (C19771 + C19770) * C2901) *
                C13452) *
               C31498 * C31417) *
              C31587 +
          ((((C19278 + C19279) * C30295 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C31272 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C30299) +
             (C19280 + C19281) * C31280 - (C19282 + C19283) * C30305 -
             (C19284 + C19285) * C2901) *
                C13451 +
            ((C19283 + C19282) * C30295 -
             ((C19281 + C19280) * C31272 + (C19279 + C19278) * C30299) +
             (C19285 + C19284) * C31280 - (C19627 + C19626) * C30305 -
             (C19629 + C19628) * C2901) *
                C13452) *
               C31498 * C3298 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C30299 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31272 -
             (C19982 + C19983) * C30295 - (C19984 + C19985) * C31280 +
             (C19986 + C19987) * C30305 + (C19988 + C19989) * C2901) *
                C13451 +
            ((C19983 + C19982) * C30299 + (C19985 + C19984) * C31272 -
             (C19987 + C19986) * C30295 - (C19989 + C19988) * C31280 +
             (C19049 * C938 + C19047 * C946 + C19050 * C2185 + C19048 * C2186) *
                 C30305 +
             (C19049 * C947 + C19047 * C953 + C19050 * C2187 + C19048 * C2188) *
                 C2901) *
                C13452) *
               C31498 * C31417) *
              C31377)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C2641 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C2635 -
             (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
                C13451 +
            ((C19085 + C19084) * C2641 + (C19087 + C19086) * C2635 -
             (C19089 + C19088) * C2642 - (C19091 + C19090) * C31277) *
                C13452) *
               C31498 * C31413 +
           (((C19472 + C19473) * C2642 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C2635 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C2641) +
             (C19474 + C19475) * C31277) *
                C13451 +
            ((C19477 + C19476) * C2642 -
             ((C19475 + C19474) * C2635 + (C19473 + C19472) * C2641) +
             (C19479 + C19478) * C31277) *
                C13452) *
               C31498 * C31420 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C2641 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C2635 -
             (C19480 + C19481) * C2642 - (C19482 + C19483) * C31277) *
                C13451 +
            ((C19481 + C19480) * C2641 + (C19483 + C19482) * C2635 -
             (C19485 + C19484) * C2642 - (C19487 + C19486) * C31277) *
                C13452) *
               C31498 * C3806) *
              C31587 +
          ((((C19278 + C19279) * C2642 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C2635 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C2641) +
             (C19280 + C19281) * C31277) *
                C13451 +
            ((C19283 + C19282) * C2642 -
             ((C19281 + C19280) * C2635 + (C19279 + C19278) * C2641) +
             (C19285 + C19284) * C31277) *
                C13452) *
               C31498 * C31413 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C2641 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C2635 -
             (C19982 + C19983) * C2642 - (C19984 + C19985) * C31277) *
                C13451 +
            ((C19983 + C19982) * C2641 + (C19985 + C19984) * C2635 -
             (C19987 + C19986) * C2642 - (C19989 + C19988) * C31277) *
                C13452) *
               C31498 * C31420 +
           (((C21418 + C21419) * C2642 -
             ((C19050 * C2421 + C19048 * C2426 + C19049 * C1308 +
               C19047 * C1324) *
                  C2635 +
              (C19050 * C2417 + C19048 * C2420 + C19049 * C1297 +
               C19047 * C1309) *
                  C2641) +
             (C21420 + C21421) * C31277) *
                C13451 +
            ((C19049 * C1295 + C19047 * C1305 + C19050 * C2419 +
              C19048 * C2424) *
                 C2642 -
             ((C21421 + C21420) * C2635 + (C21419 + C21418) * C2641) +
             (C19049 * C1304 + C19047 * C1322 + C19050 * C2425 +
              C19048 * C2428) *
                 C31277) *
                C13452) *
               C31498 * C3806) *
              C31377)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C2641 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C2635 -
             (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
                C13451 +
            ((C19085 + C19084) * C2641 + (C19087 + C19086) * C2635 -
             (C19089 + C19088) * C2642 - (C19091 + C19090) * C31277) *
                C13452) *
               C31498 * C3298 +
           (((C19472 + C19473) * C2642 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C2635 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C2641) +
             (C19474 + C19475) * C31277) *
                C13451 +
            ((C19477 + C19476) * C2642 -
             ((C19475 + C19474) * C2635 + (C19473 + C19472) * C2641) +
             (C19479 + C19478) * C31277) *
                C13452) *
               C31498 * C31417) *
              C31653 +
          ((((C19278 + C19279) * C2642 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C2635 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C2641) +
             (C19280 + C19281) * C31277) *
                C13451 +
            ((C19283 + C19282) * C2642 -
             ((C19281 + C19280) * C2635 + (C19279 + C19278) * C2641) +
             (C19285 + C19284) * C31277) *
                C13452) *
               C31498 * C3298 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C2641 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C2635 -
             (C19982 + C19983) * C2642 - (C19984 + C19985) * C31277) *
                C13451 +
            ((C19983 + C19982) * C2641 + (C19985 + C19984) * C2635 -
             (C19987 + C19986) * C2642 - (C19989 + C19988) * C31277) *
                C13452) *
               C31498 * C31417) *
              C31641 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C2641 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C2635 -
             (C19286 + C19287) * C2642 - (C19288 + C19289) * C31277) *
                C13451 +
            ((C19287 + C19286) * C2641 + (C19289 + C19288) * C2635 -
             (C19291 + C19290) * C2642 - (C19293 + C19292) * C31277) *
                C13452) *
               C31498 * C3298 +
           (((C20708 + C20709) * C2642 -
             ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
               C19047 * C1327) *
                  C2635 +
              (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
               C19047 * C1315) *
                  C2641) +
             (C20710 + C20711) * C31277) *
                C13451 +
            ((C19049 * C1298 + C19047 * C1311 + C19050 * C1303 +
              C19048 * C1320) *
                 C2642 -
             ((C20711 + C20710) * C2635 + (C20709 + C20708) * C2641) +
             (C19049 * C1310 + C19047 * C1325 + C19050 * C1321 +
              C19048 * C1330) *
                 C31277) *
                C13452) *
               C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2533 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31659 -
            (C19084 + C19085) * C2534 - (C19086 + C19087) * C31652 +
            (C19088 + C19089) * C2535 + (C19090 + C19091) * C31639 -
            (C19092 + C19093) * C2536 - (C19094 + C19095) * C31620) *
               C13451 +
           ((C19085 + C19084) * C2533 + (C19087 + C19086) * C31659 -
            (C19089 + C19088) * C2534 - (C19091 + C19090) * C31652 +
            (C19093 + C19092) * C2535 + (C19095 + C19094) * C31639 -
            (C19097 + C19096) * C2536 - (C19099 + C19098) * C31620) *
               C13452) *
              C31498 * C3298 +
          (((C19472 + C19473) * C2534 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31659 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C2533) +
            (C19474 + C19475) * C31652 - (C19476 + C19477) * C2535 -
            (C19478 + C19479) * C31639 + (C19768 + C19769) * C2536 +
            (C19770 + C19771) * C31620) *
               C13451 +
           ((C19477 + C19476) * C2534 -
            ((C19475 + C19474) * C31659 + (C19473 + C19472) * C2533) +
            (C19479 + C19478) * C31652 - (C19769 + C19768) * C2535 -
            (C19771 + C19770) * C31639 +
            (C19049 * C489 + C19047 * C503 + C19050 * C494 + C19048 * C513) *
                C2536 +
            (C19049 * C504 + C19047 * C519 + C19050 * C514 + C19048 * C524) *
                C31620) *
               C13452) *
              C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2641 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C2635 -
            (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
               C13451 +
           ((C19085 + C19084) * C2641 + (C19087 + C19086) * C2635 -
            (C19089 + C19088) * C2642 - (C19091 + C19090) * C31277) *
               C13452) *
              C31498 * C31661 +
          (((C19472 + C19473) * C2642 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C2635 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C2641) +
            (C19474 + C19475) * C31277) *
               C13451 +
           ((C19477 + C19476) * C2642 -
            ((C19475 + C19474) * C2635 + (C19473 + C19472) * C2641) +
            (C19479 + C19478) * C31277) *
               C13452) *
              C31498 * C31658 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C2641 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C2635 -
            (C19480 + C19481) * C2642 - (C19482 + C19483) * C31277) *
               C13451 +
           ((C19481 + C19480) * C2641 + (C19483 + C19482) * C2635 -
            (C19485 + C19484) * C2642 - (C19487 + C19486) * C31277) *
               C13452) *
              C31498 * C31649 +
          (((C21560 + C21561) * C2642 -
            ((C19050 * C2028 + C19048 * C2036 + C19049 * C2025 +
              C19047 * C2035) *
                 C2635 +
             (C19050 * C2018 + C19048 * C2027 + C19049 * C2017 +
              C19047 * C2026) *
                 C2641) +
            (C21562 + C21563) * C31277) *
               C13451 +
           ((C19049 * C2015 + C19047 * C2022 + C19050 * C2020 +
             C19048 * C2031) *
                C2642 -
            ((C21563 + C21562) * C2635 + (C21561 + C21560) * C2641) +
            (C19049 * C2021 + C19047 * C2033 + C19050 * C2032 +
             C19048 * C2038) *
                C31277) *
               C13452) *
              C31498 * C31632) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C30299 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31272 -
            (C19084 + C19085) * C30295 - (C19086 + C19087) * C31280 +
            (C19088 + C19089) * C30305 + (C19090 + C19091) * C2901) *
               C13451 +
           ((C19085 + C19084) * C30299 + (C19087 + C19086) * C31272 -
            (C19089 + C19088) * C30295 - (C19091 + C19090) * C31280 +
            (C19093 + C19092) * C30305 + (C19095 + C19094) * C2901) *
               C13452) *
              C31498 * C31413 +
          (((C19472 + C19473) * C30295 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31272 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C30299) +
            (C19474 + C19475) * C31280 - (C19476 + C19477) * C30305 -
            (C19478 + C19479) * C2901) *
               C13451 +
           ((C19477 + C19476) * C30295 -
            ((C19475 + C19474) * C31272 + (C19473 + C19472) * C30299) +
            (C19479 + C19478) * C31280 - (C19769 + C19768) * C30305 -
            (C19771 + C19770) * C2901) *
               C13452) *
              C31498 * C31420 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C30299 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C31272 -
            (C19480 + C19481) * C30295 - (C19482 + C19483) * C31280 +
            (C19484 + C19485) * C30305 + (C19486 + C19487) * C2901) *
               C13451 +
           ((C19481 + C19480) * C30299 + (C19483 + C19482) * C31272 -
            (C19485 + C19484) * C30295 - (C19487 + C19486) * C31280 +
            (C19049 * C493 + C19047 * C511 + C19050 * C2303 + C19048 * C2304) *
                C30305 +
            (C19049 * C512 + C19047 * C523 + C19050 * C2305 + C19048 * C2306) *
                C2901) *
               C13452) *
              C31498 * C3806) *
         C31318) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C2533 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31659 -
            (C19084 + C19085) * C2534 - (C19086 + C19087) * C31652 +
            (C19088 + C19089) * C2535 + (C19090 + C19091) * C31639 -
            (C19092 + C19093) * C2536 - (C19094 + C19095) * C31620) *
               C13451 +
           ((C19085 + C19084) * C2533 + (C19087 + C19086) * C31659 -
            (C19089 + C19088) * C2534 - (C19091 + C19090) * C31652 +
            (C19093 + C19092) * C2535 + (C19095 + C19094) * C31639 -
            (C19097 + C19096) * C2536 - (C19099 + C19098) * C31620) *
               C13452) *
              C31498 * C3298 +
          (((C19472 + C19473) * C2534 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31659 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C2533) +
            (C19474 + C19475) * C31652 - (C19476 + C19477) * C2535 -
            (C19478 + C19479) * C31639 + (C19768 + C19769) * C2536 +
            (C19770 + C19771) * C31620) *
               C13451 +
           ((C19477 + C19476) * C2534 -
            ((C19475 + C19474) * C31659 + (C19473 + C19472) * C2533) +
            (C19479 + C19478) * C31652 - (C19769 + C19768) * C2535 -
            (C19771 + C19770) * C31639 +
            (C19049 * C489 + C19047 * C503 + C19050 * C494 + C19048 * C513) *
                C2536 +
            (C19049 * C504 + C19047 * C519 + C19050 * C514 + C19048 * C524) *
                C31620) *
               C13452) *
              C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C2641 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C2635 -
             (C19084 + C19085) * C2642 - (C19086 + C19087) * C31277) *
                C13451 +
            ((C19085 + C19084) * C2641 + (C19087 + C19086) * C2635 -
             (C19089 + C19088) * C2642 - (C19091 + C19090) * C31277) *
                C13452) *
               C31498 * C3298 +
           (((C19472 + C19473) * C2642 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C2635 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C2641) +
             (C19474 + C19475) * C31277) *
                C13451 +
            ((C19477 + C19476) * C2642 -
             ((C19475 + C19474) * C2635 + (C19473 + C19472) * C2641) +
             (C19479 + C19478) * C31277) *
                C13452) *
               C31498 * C31417) *
              C31653 +
          ((((C19278 + C19279) * C2642 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C2635 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C2641) +
             (C19280 + C19281) * C31277) *
                C13451 +
            ((C19283 + C19282) * C2642 -
             ((C19281 + C19280) * C2635 + (C19279 + C19278) * C2641) +
             (C19285 + C19284) * C31277) *
                C13452) *
               C31498 * C3298 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C2641 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C2635 -
             (C19982 + C19983) * C2642 - (C19984 + C19985) * C31277) *
                C13451 +
            ((C19983 + C19982) * C2641 + (C19985 + C19984) * C2635 -
             (C19987 + C19986) * C2642 - (C19989 + C19988) * C31277) *
                C13452) *
               C31498 * C31417) *
              C31641 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C2641 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C2635 -
             (C19286 + C19287) * C2642 - (C19288 + C19289) * C31277) *
                C13451 +
            ((C19287 + C19286) * C2641 + (C19289 + C19288) * C2635 -
             (C19291 + C19290) * C2642 - (C19293 + C19292) * C31277) *
                C13452) *
               C31498 * C3298 +
           (((C20708 + C20709) * C2642 -
             ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
               C19047 * C1327) *
                  C2635 +
              (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
               C19047 * C1315) *
                  C2641) +
             (C20710 + C20711) * C31277) *
                C13451 +
            ((C19049 * C1298 + C19047 * C1311 + C19050 * C1303 +
              C19048 * C1320) *
                 C2642 -
             ((C20711 + C20710) * C2635 + (C20709 + C20708) * C2641) +
             (C19049 * C1310 + C19047 * C1325 + C19050 * C1321 +
              C19048 * C1330) *
                 C31277) *
                C13452) *
               C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C665 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C659 -
            (C19084 + C19085) * C666 - (C19086 + C19087) * C660 +
            (C19088 + C19089) * C667 + (C19090 + C19091) * C661 -
            (C19092 + C19093) * C668 - (C19094 + C19095) * C31620) *
               C13451 +
           ((C19085 + C19084) * C665 + (C19087 + C19086) * C659 -
            (C19089 + C19088) * C666 - (C19091 + C19090) * C660 +
            (C19093 + C19092) * C667 + (C19095 + C19094) * C661 -
            (C19097 + C19096) * C668 - (C19099 + C19098) * C31620) *
               C13452) *
              C31498 * C31330 * C31587 +
          (((C19278 + C19279) * C666 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C659 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C665) +
            (C19280 + C19281) * C660 - (C19282 + C19283) * C667 -
            (C19284 + C19285) * C661 + (C19626 + C19627) * C668 +
            (C19628 + C19629) * C31620) *
               C13451 +
           ((C19283 + C19282) * C666 -
            ((C19281 + C19280) * C659 + (C19279 + C19278) * C665) +
            (C19285 + C19284) * C660 - (C19627 + C19626) * C667 -
            (C19629 + C19628) * C661 +
            (C19049 * C300 + C19047 * C314 + C19050 * C939 + C19048 * C948) *
                C668 +
            (C19049 * C315 + C19047 * C330 + C19050 * C949 + C19048 * C954) *
                C31620) *
               C13452) *
              C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C30289 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31569 -
            (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
               C13451 +
           ((C19085 + C19084) * C30289 + (C19087 + C19086) * C31569 -
            (C19089 + C19088) * C30270 - (C19091 + C19090) * C31277) *
               C13452) *
              C31498 * C31330 * C1431 +
          (((C19278 + C19279) * C30270 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31569 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C30289) +
            (C19280 + C19281) * C31277) *
               C13451 +
           ((C19283 + C19282) * C30270 -
            ((C19281 + C19280) * C31569 + (C19279 + C19278) * C30289) +
            (C19285 + C19284) * C31277) *
               C13452) *
              C31498 * C31330 * C1432 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C30289 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C31569 -
            (C19286 + C19287) * C30270 - (C19288 + C19289) * C31277) *
               C13451 +
           ((C19287 + C19286) * C30289 + (C19289 + C19288) * C31569 -
            (C19291 + C19290) * C30270 - (C19293 + C19292) * C31277) *
               C13452) *
              C31498 * C31330 * C1433 +
          (((C20502 + C20503) * C30270 -
            ((C19050 * C1717 + C19048 * C1722 + C19049 * C1171 +
              C19047 * C1181) *
                 C31569 +
             (C19050 * C1713 + C19048 * C1716 + C19049 * C1163 +
              C19047 * C1172) *
                 C30289) +
            (C20504 + C20505) * C31277) *
               C13451 +
           ((C19049 * C1161 + C19047 * C1168 + C19050 * C1715 +
             C19048 * C1720) *
                C30270 -
            ((C20505 + C20504) * C31569 + (C20503 + C20502) * C30289) +
            (C19049 * C1167 + C19047 * C1179 + C19050 * C1721 +
             C19048 * C1724) *
                C31277) *
               C13452) *
              C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C293 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C287 -
             (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
             (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
                C13451 +
            ((C19085 + C19084) * C293 + (C19087 + C19086) * C287 -
             (C19089 + C19088) * C294 - (C19091 + C19090) * C288 +
             (C19093 + C19092) * C295 + (C19095 + C19094) * C31609) *
                C13452) *
               C31498 * C31588 +
           (((C19472 + C19473) * C294 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C287 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C293) +
             (C19474 + C19475) * C288 - (C19476 + C19477) * C295 -
             (C19478 + C19479) * C31609) *
                C13451 +
            ((C19477 + C19476) * C294 -
             ((C19475 + C19474) * C287 + (C19473 + C19472) * C293) +
             (C19479 + C19478) * C288 - (C19769 + C19768) * C295 -
             (C19771 + C19770) * C31609) *
                C13452) *
               C31498 * C31417) *
              C31587 +
          ((((C19278 + C19279) * C294 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C287 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C293) +
             (C19280 + C19281) * C288 - (C19282 + C19283) * C295 -
             (C19284 + C19285) * C31609) *
                C13451 +
            ((C19283 + C19282) * C294 -
             ((C19281 + C19280) * C287 + (C19279 + C19278) * C293) +
             (C19285 + C19284) * C288 - (C19627 + C19626) * C295 -
             (C19629 + C19628) * C31609) *
                C13452) *
               C31498 * C31588 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C293 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C287 -
             (C19982 + C19983) * C294 - (C19984 + C19985) * C288 +
             (C19986 + C19987) * C295 + (C19988 + C19989) * C31609) *
                C13451 +
            ((C19983 + C19982) * C293 + (C19985 + C19984) * C287 -
             (C19987 + C19986) * C294 - (C19989 + C19988) * C288 +
             (C19049 * C938 + C19047 * C946 + C19050 * C2185 + C19048 * C2186) *
                 C295 +
             (C19049 * C947 + C19047 * C953 + C19050 * C2187 + C19048 * C2188) *
                 C31609) *
                C13452) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C13451 +
            ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
               C31498 * C31588 -
           (((C19475 + C19474) * C31267 + (C19473 + C19472) * C1160) * C13452 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C13451) *
               C31498 * C31417) *
              C1431 +
          ((((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1160 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31267) *
                C13451 +
            ((C19983 + C19982) * C1160 + (C19985 + C19984) * C31267) * C13452) *
               C31498 * C31417 -
           (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31267 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1160) *
                C13451) *
               C31498 * C31588) *
              C1432 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C1160 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C31267) *
                C13451 +
            ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
               C31498 * C31588 -
           (((C20711 + C20710) * C31267 + (C20709 + C20708) * C1160) * C13452 +
            ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
              C19047 * C1327) *
                 C31267 +
             (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
              C19047 * C1315) *
                 C1160) *
                C13451) *
               C31498 * C31417) *
              C1433 +
          ((((C19049 * C1713 + C19047 * C1716 + C19050 * C5749 +
              C19048 * C5753) *
                 C1160 +
             (C19049 * C1717 + C19047 * C1722 + C19050 * C5752 +
              C19048 * C5758) *
                 C31267) *
                C13451 +
            ((C19049 * C1714 + C19047 * C1718 + C19050 * C6657 +
              C19048 * C6658) *
                 C1160 +
             (C19049 * C1719 + C19047 * C1723 + C19050 * C6659 +
              C19048 * C6660) *
                 C31267) *
                C13452) *
               C31498 * C31417 -
           (((C20505 + C20504) * C31267 + (C20503 + C20502) * C1160) * C13452 +
            ((C19050 * C1717 + C19048 * C1722 + C19049 * C1171 +
              C19047 * C1181) *
                 C31267 +
             (C19050 * C1713 + C19048 * C1716 + C19049 * C1163 +
              C19047 * C1172) *
                 C1160) *
                C13451) *
               C31498 * C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C293 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C287 -
            (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
            (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
               C13451 +
           ((C19085 + C19084) * C293 + (C19087 + C19086) * C287 -
            (C19089 + C19088) * C294 - (C19091 + C19090) * C288 +
            (C19093 + C19092) * C295 + (C19095 + C19094) * C31609) *
               C13452) *
              C31498 * C31330 * C31653 +
          (((C19278 + C19279) * C294 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C287 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C293) +
            (C19280 + C19281) * C288 - (C19282 + C19283) * C295 -
            (C19284 + C19285) * C31609) *
               C13451 +
           ((C19283 + C19282) * C294 -
            ((C19281 + C19280) * C287 + (C19279 + C19278) * C293) +
            (C19285 + C19284) * C288 -
            (C19050 * C938 + C19048 * C946 + C19049 * C299 + C19047 * C312) *
                C295 -
            (C19050 * C947 + C19048 * C953 + C19049 * C313 + C19047 * C329) *
                C31609) *
               C13452) *
              C31498 * C31330 * C31641 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C293 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C287 -
            (C19286 + C19287) * C294 - (C19288 + C19289) * C288 +
            (C19290 + C19291) * C295 + (C19292 + C19293) * C31609) *
               C13451 +
           ((C19287 + C19286) * C293 + (C19289 + C19288) * C287 -
            (C19291 + C19290) * C294 - (C19293 + C19292) * C288 +
            (C19049 * C304 + C19047 * C322 + C19050 * C1599 + C19048 * C1600) *
                C295 +
            (C19049 * C323 + C19047 * C334 + C19050 * C1601 + C19048 * C1602) *
                C31609) *
               C13452) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
               C114 +
           (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
               C102 -
           (C19084 + C19085) * C115 - (C19086 + C19087) * C103 +
           (C19088 + C19089) * C116 + (C19090 + C19091) * C104 -
           (C19092 + C19093) * C117 - (C19094 + C19095) * C105 +
           (C19096 + C19097) * C118 + (C19098 + C19099) * C106) *
              C13451 +
          ((C19085 + C19084) * C114 + (C19087 + C19086) * C102 -
           (C19089 + C19088) * C115 - (C19091 + C19090) * C103 +
           (C19093 + C19092) * C116 + (C19095 + C19094) * C104 -
           (C19097 + C19096) * C117 - (C19099 + C19098) * C105 +
           (C19049 * C124 + C19047 * C136 + C19050 * C779 + C19048 * C780) *
               C118 +
           (C19049 * C137 + C19047 * C145 + C19050 * C781 + C19048 * C782) *
               C106) *
              C13452) *
         C31498 * C31330 * C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C293 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C287 -
            (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
            (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
               C13451 +
           ((C19085 + C19084) * C293 + (C19087 + C19086) * C287 -
            (C19089 + C19088) * C294 - (C19091 + C19090) * C288 +
            (C19093 + C19092) * C295 + (C19095 + C19094) * C31609) *
               C13452) *
              C31498 * C31654 +
          (((C19472 + C19473) * C294 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C287 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C293) +
            (C19474 + C19475) * C288 - (C19476 + C19477) * C295 -
            (C19478 + C19479) * C31609) *
               C13451 +
           ((C19477 + C19476) * C294 -
            ((C19475 + C19474) * C287 + (C19473 + C19472) * C293) +
            (C19479 + C19478) * C288 -
            (C19050 * C493 + C19048 * C511 + C19049 * C488 + C19047 * C501) *
                C295 -
            (C19050 * C512 + C19048 * C523 + C19049 * C502 + C19047 * C518) *
                C31609) *
               C13452) *
              C31498 * C31643 +
          (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                C293 +
            (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                C287 -
            (C19480 + C19481) * C294 - (C19482 + C19483) * C288 +
            (C19484 + C19485) * C295 + (C19486 + C19487) * C31609) *
               C13451 +
           ((C19481 + C19480) * C293 + (C19483 + C19482) * C287 -
            (C19485 + C19484) * C294 - (C19487 + C19486) * C288 +
            (C19049 * C493 + C19047 * C511 + C19050 * C2303 + C19048 * C2304) *
                C295 +
            (C19049 * C512 + C19047 * C523 + C19050 * C2305 + C19048 * C2306) *
                C31609) *
               C13452) *
              C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1089 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31650 -
            (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
            (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
               C13451 +
           ((C19085 + C19084) * C1089 + (C19087 + C19086) * C31650 -
            (C19089 + C19088) * C1090 - (C19091 + C19090) * C31637 +
            (C19093 + C19092) * C1091 + (C19095 + C19094) * C31609) *
               C13452) *
              C31498 * C31330 * C1086 +
          (((C19278 + C19279) * C1090 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31650 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1089) +
            (C19280 + C19281) * C31637 - (C19282 + C19283) * C1091 -
            (C19284 + C19285) * C31609) *
               C13451 +
           ((C19283 + C19282) * C1090 -
            ((C19281 + C19280) * C31650 + (C19279 + C19278) * C1089) +
            (C19285 + C19284) * C31637 - (C19627 + C19626) * C1091 -
            (C19629 + C19628) * C31609) *
               C13452) *
              C31498 * C31330 * C1087 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C1089 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C31650 -
            (C19286 + C19287) * C1090 - (C19288 + C19289) * C31637 +
            (C19290 + C19291) * C1091 + (C19292 + C19293) * C31609) *
               C13451 +
           ((C19287 + C19286) * C1089 + (C19289 + C19288) * C31650 -
            (C19291 + C19290) * C1090 - (C19293 + C19292) * C31637 +
            (C19049 * C304 + C19047 * C322 + C19050 * C1599 + C19048 * C1600) *
                C1091 +
            (C19049 * C323 + C19047 * C334 + C19050 * C1601 + C19048 * C1602) *
                C31609) *
               C13452) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1160 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31267) *
               C13451 +
           ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
              C31498 * C31330 * C1155 -
          (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
           ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                C31267 +
            (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                C1160) *
               C13451) *
              C31498 * C31330 * C1156 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C1160 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C31267) *
               C13451 +
           ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
              C31498 * C31330 * C1157 -
          (((C19050 * C1719 + C19048 * C1723 + C19049 * C1169 +
             C19047 * C1180) *
                C31267 +
            (C19050 * C1714 + C19048 * C1718 + C19049 * C1162 +
             C19047 * C1170) *
                C1160) *
               C13452 +
           ((C19050 * C1717 + C19048 * C1722 + C19049 * C1171 +
             C19047 * C1181) *
                C31267 +
            (C19050 * C1713 + C19048 * C1716 + C19049 * C1163 +
             C19047 * C1172) *
                C1160) *
               C13451) *
              C31498 * C31330 * C1158 +
          (((C19049 * C1164 + C19047 * C1173 + C19050 * C5750 +
             C19048 * C5755) *
                C1160 +
            (C19049 * C1174 + C19047 * C1182 + C19050 * C5754 +
             C19048 * C5759) *
                C31267) *
               C13451 +
           ((C19049 * C1165 + C19047 * C1175 + C19050 * C6079 +
             C19048 * C6080) *
                C1160 +
            (C19049 * C1176 + C19047 * C1183 + C19050 * C6081 +
             C19048 * C6082) *
                C31267) *
               C13452) *
              C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C1160 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31267) *
                C13451 +
            ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
               C31498 * C31654 -
           (((C19475 + C19474) * C31267 + (C19473 + C19472) * C1160) * C13452 +
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C31267 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C1160) *
                C13451) *
               C31498 * C31643 +
           (((C19049 * C490 + C19047 * C505 + C19050 * C2017 + C19048 * C2026) *
                 C1160 +
             (C19049 * C506 + C19047 * C520 + C19050 * C2025 + C19048 * C2035) *
                 C31267) *
                C13451 +
            ((C19481 + C19480) * C1160 + (C19483 + C19482) * C31267) * C13452) *
               C31498 * C31619) *
              C1086 +
          ((((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C1160 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31267) *
                C13451 +
            ((C19983 + C19982) * C1160 + (C19985 + C19984) * C31267) * C13452) *
               C31498 * C31643 -
           (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31267 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1160) *
                C13451) *
               C31498 * C31654 -
           (((C19050 * C2423 + C19048 * C2427 + C19049 * C1306 +
              C19047 * C1323) *
                 C31267 +
             (C19050 * C2418 + C19048 * C2422 + C19049 * C1296 +
              C19047 * C1307) *
                 C1160) *
                C13452 +
            ((C19050 * C2421 + C19048 * C2426 + C19049 * C1308 +
              C19047 * C1324) *
                 C31267 +
             (C19050 * C2417 + C19048 * C2420 + C19049 * C1297 +
              C19047 * C1309) *
                 C1160) *
                C13451) *
               C31498 * C31619) *
              C1087 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C1160 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C31267) *
                C13451 +
            ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
               C31498 * C31654 -
           (((C19050 * C1319 + C19048 * C1329 + C19049 * C1312 +
              C19047 * C1326) *
                 C31267 +
             (C19050 * C1302 + C19048 * C1318 + C19049 * C1299 +
              C19047 * C1313) *
                 C1160) *
                C13452 +
            ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
              C19047 * C1327) *
                 C31267 +
             (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
              C19047 * C1315) *
                 C1160) *
                C13451) *
               C31498 * C31643 +
           (((C19049 * C1301 + C19047 * C1316 + C19050 * C6499 +
              C19048 * C6503) *
                 C1160 +
             (C19049 * C1317 + C19047 * C1328 + C19050 * C6502 +
              C19048 * C6508) *
                 C31267) *
                C13451 +
            ((C19049 * C1302 + C19047 * C1318 + C19050 * C6773 +
              C19048 * C6774) *
                 C1160 +
             (C19049 * C1319 + C19047 * C1329 + C19050 * C6775 +
              C19048 * C6776) *
                 C31267) *
                C13452) *
               C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C665 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C659 -
            (C19084 + C19085) * C666 - (C19086 + C19087) * C660 +
            (C19088 + C19089) * C667 + (C19090 + C19091) * C661 -
            (C19092 + C19093) * C668 - (C19094 + C19095) * C31620) *
               C13451 +
           ((C19085 + C19084) * C665 + (C19087 + C19086) * C659 -
            (C19089 + C19088) * C666 - (C19091 + C19090) * C660 +
            (C19093 + C19092) * C667 + (C19095 + C19094) * C661 -
            (C19097 + C19096) * C668 - (C19099 + C19098) * C31620) *
               C13452) *
              C31498 * C31588 +
          (((C19472 + C19473) * C666 -
            ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                 C659 +
             (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                 C665) +
            (C19474 + C19475) * C660 - (C19476 + C19477) * C667 -
            (C19478 + C19479) * C661 + (C19768 + C19769) * C668 +
            (C19770 + C19771) * C31620) *
               C13451 +
           ((C19477 + C19476) * C666 -
            ((C19475 + C19474) * C659 + (C19473 + C19472) * C665) +
            (C19479 + C19478) * C660 - (C19769 + C19768) * C667 -
            (C19771 + C19770) * C661 +
            (C19049 * C489 + C19047 * C503 + C19050 * C494 + C19048 * C513) *
                C668 +
            (C19049 * C504 + C19047 * C519 + C19050 * C514 + C19048 * C524) *
                C31620) *
               C13452) *
              C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                 C30289 +
             (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                 C31569 -
             (C19084 + C19085) * C30270 - (C19086 + C19087) * C31277) *
                C13451 +
            ((C19085 + C19084) * C30289 + (C19087 + C19086) * C31569 -
             (C19089 + C19088) * C30270 - (C19091 + C19090) * C31277) *
                C13452) *
               C31498 * C31588 +
           (((C19472 + C19473) * C30270 -
             ((C19050 * C506 + C19048 * C520 + C19049 * C496 + C19047 * C515) *
                  C31569 +
              (C19050 * C490 + C19048 * C505 + C19049 * C486 + C19047 * C497) *
                  C30289) +
             (C19474 + C19475) * C31277) *
                C13451 +
            ((C19477 + C19476) * C30270 -
             ((C19475 + C19474) * C31569 + (C19473 + C19472) * C30289) +
             (C19479 + C19478) * C31277) *
                C13452) *
               C31498 * C31417) *
              C1086 +
          ((((C19278 + C19279) * C30270 -
             ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                  C31569 +
              (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                  C30289) +
             (C19280 + C19281) * C31277) *
                C13451 +
            ((C19283 + C19282) * C30270 -
             ((C19281 + C19280) * C31569 + (C19279 + C19278) * C30289) +
             (C19285 + C19284) * C31277) *
                C13452) *
               C31498 * C31588 +
           (((C19049 * C935 + C19047 * C940 + C19050 * C1297 + C19048 * C1309) *
                 C30289 +
             (C19049 * C941 + C19047 * C950 + C19050 * C1308 + C19048 * C1324) *
                 C31569 -
             (C19982 + C19983) * C30270 - (C19984 + C19985) * C31277) *
                C13451 +
            ((C19983 + C19982) * C30289 + (C19985 + C19984) * C31569 -
             (C19987 + C19986) * C30270 - (C19989 + C19988) * C31277) *
                C13452) *
               C31498 * C31417) *
              C1087 +
          ((((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                 C30289 +
             (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                 C31569 -
             (C19286 + C19287) * C30270 - (C19288 + C19289) * C31277) *
                C13451 +
            ((C19287 + C19286) * C30289 + (C19289 + C19288) * C31569 -
             (C19291 + C19290) * C30270 - (C19293 + C19292) * C31277) *
                C13452) *
               C31498 * C31588 +
           (((C20708 + C20709) * C30270 -
             ((C19050 * C1317 + C19048 * C1328 + C19049 * C1314 +
               C19047 * C1327) *
                  C31569 +
              (C19050 * C1301 + C19048 * C1316 + C19049 * C1300 +
               C19047 * C1315) *
                  C30289) +
             (C20710 + C20711) * C31277) *
                C13451 +
            ((C19049 * C1298 + C19047 * C1311 + C19050 * C1303 +
              C19048 * C1320) *
                 C30270 -
             ((C20711 + C20710) * C31569 + (C20709 + C20708) * C30289) +
             (C19049 * C1310 + C19047 * C1325 + C19050 * C1321 +
              C19048 * C1330) *
                 C31277) *
                C13452) *
               C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
               C114 +
           (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
               C102 -
           (C19084 + C19085) * C115 - (C19086 + C19087) * C103 +
           (C19088 + C19089) * C116 + (C19090 + C19091) * C104 -
           (C19092 + C19093) * C117 - (C19094 + C19095) * C105 +
           (C19096 + C19097) * C118 + (C19098 + C19099) * C106) *
              C13451 +
          ((C19085 + C19084) * C114 + (C19087 + C19086) * C102 -
           (C19089 + C19088) * C115 - (C19091 + C19090) * C103 +
           (C19093 + C19092) * C116 + (C19095 + C19094) * C104 -
           (C19097 + C19096) * C117 - (C19099 + C19098) * C105 +
           (C19049 * C124 + C19047 * C136 + C19050 * C779 + C19048 * C780) *
               C118 +
           (C19049 * C137 + C19047 * C145 + C19050 * C781 + C19048 * C782) *
               C106) *
              C13452) *
         C31498 * C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C293 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C287 -
            (C19084 + C19085) * C294 - (C19086 + C19087) * C288 +
            (C19088 + C19089) * C295 + (C19090 + C19091) * C31609) *
               C13451 +
           ((C19085 + C19084) * C293 + (C19087 + C19086) * C287 -
            (C19089 + C19088) * C294 - (C19091 + C19090) * C288 +
            (C19093 + C19092) * C295 + (C19095 + C19094) * C31609) *
               C13452) *
              C31498 * C31330 * C31653 +
          (((C19278 + C19279) * C294 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C287 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C293) +
            (C19280 + C19281) * C288 - (C19282 + C19283) * C295 -
            (C19284 + C19285) * C31609) *
               C13451 +
           ((C19283 + C19282) * C294 -
            ((C19281 + C19280) * C287 + (C19279 + C19278) * C293) +
            (C19285 + C19284) * C288 -
            (C19050 * C938 + C19048 * C946 + C19049 * C299 + C19047 * C312) *
                C295 -
            (C19050 * C947 + C19048 * C953 + C19049 * C313 + C19047 * C329) *
                C31609) *
               C13452) *
              C31498 * C31330 * C31641 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C293 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C287 -
            (C19286 + C19287) * C294 - (C19288 + C19289) * C288 +
            (C19290 + C19291) * C295 + (C19292 + C19293) * C31609) *
               C13451 +
           ((C19287 + C19286) * C293 + (C19289 + C19288) * C287 -
            (C19291 + C19290) * C294 - (C19293 + C19292) * C288 +
            (C19049 * C304 + C19047 * C322 + C19050 * C1599 + C19048 * C1600) *
                C295 +
            (C19049 * C323 + C19047 * C334 + C19050 * C1601 + C19048 * C1602) *
                C31609) *
               C13452) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1089 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31650 -
            (C19084 + C19085) * C1090 - (C19086 + C19087) * C31637 +
            (C19088 + C19089) * C1091 + (C19090 + C19091) * C31609) *
               C13451 +
           ((C19085 + C19084) * C1089 + (C19087 + C19086) * C31650 -
            (C19089 + C19088) * C1090 - (C19091 + C19090) * C31637 +
            (C19093 + C19092) * C1091 + (C19095 + C19094) * C31609) *
               C13452) *
              C31498 * C31330 * C1086 +
          (((C19278 + C19279) * C1090 -
            ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                 C31650 +
             (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                 C1089) +
            (C19280 + C19281) * C31637 - (C19282 + C19283) * C1091 -
            (C19284 + C19285) * C31609) *
               C13451 +
           ((C19283 + C19282) * C1090 -
            ((C19281 + C19280) * C31650 + (C19279 + C19278) * C1089) +
            (C19285 + C19284) * C31637 - (C19627 + C19626) * C1091 -
            (C19629 + C19628) * C31609) *
               C13452) *
              C31498 * C31330 * C1087 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C1089 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C31650 -
            (C19286 + C19287) * C1090 - (C19288 + C19289) * C31637 +
            (C19290 + C19291) * C1091 + (C19292 + C19293) * C31609) *
               C13451 +
           ((C19287 + C19286) * C1089 + (C19289 + C19288) * C31650 -
            (C19291 + C19290) * C1090 - (C19293 + C19292) * C31637 +
            (C19049 * C304 + C19047 * C322 + C19050 * C1599 + C19048 * C1600) *
                C1091 +
            (C19049 * C323 + C19047 * C334 + C19050 * C1601 + C19048 * C1602) *
                C31609) *
               C13452) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C19049 * C119 + C19047 * C126 + C19050 * C486 + C19048 * C497) *
                C1160 +
            (C19049 * C127 + C19047 * C140 + C19050 * C496 + C19048 * C515) *
                C31267) *
               C13451 +
           ((C19085 + C19084) * C1160 + (C19087 + C19086) * C31267) * C13452) *
              C31498 * C31330 * C1155 -
          (((C19281 + C19280) * C31267 + (C19279 + C19278) * C1160) * C13452 +
           ((C19050 * C941 + C19048 * C950 + C19049 * C307 + C19047 * C326) *
                C31267 +
            (C19050 * C935 + C19048 * C940 + C19049 * C297 + C19047 * C308) *
                C1160) *
               C13451) *
              C31498 * C31330 * C1156 +
          (((C19049 * C301 + C19047 * C316 + C19050 * C1300 + C19048 * C1315) *
                C1160 +
            (C19049 * C317 + C19047 * C331 + C19050 * C1314 + C19048 * C1327) *
                C31267) *
               C13451 +
           ((C19287 + C19286) * C1160 + (C19289 + C19288) * C31267) * C13452) *
              C31498 * C31330 * C1157 -
          (((C19050 * C1719 + C19048 * C1723 + C19049 * C1169 +
             C19047 * C1180) *
                C31267 +
            (C19050 * C1714 + C19048 * C1718 + C19049 * C1162 +
             C19047 * C1170) *
                C1160) *
               C13452 +
           ((C19050 * C1717 + C19048 * C1722 + C19049 * C1171 +
             C19047 * C1181) *
                C31267 +
            (C19050 * C1713 + C19048 * C1716 + C19049 * C1163 +
             C19047 * C1172) *
                C1160) *
               C13451) *
              C31498 * C31330 * C1158 +
          (((C19049 * C1164 + C19047 * C1173 + C19050 * C5750 +
             C19048 * C5755) *
                C1160 +
            (C19049 * C1174 + C19047 * C1182 + C19050 * C5754 +
             C19048 * C5759) *
                C31267) *
               C13451 +
           ((C19049 * C1165 + C19047 * C1175 + C19050 * C6079 +
             C19048 * C6080) *
                C1160 +
            (C19049 * C1176 + C19047 * C1183 + C19050 * C6081 +
             C19048 * C6082) *
                C31267) *
               C13452) *
              C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30299 +
            (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
            C169 * C31280 + C170 * C30305 + C171 * C2901) *
               C107 +
           (C168 * C30299 + C169 * C31272 - C170 * C30295 - C171 * C31280 +
            C172 * C30305 + C173 * C2901) *
               C108 +
           (C170 * C30299 + C171 * C31272 - C172 * C30295 - C173 * C31280 +
            C174 * C30305 + C175 * C2901) *
               C109) *
              C31498 * C31330 * C31373 +
          ((C361 * C30295 -
            ((C113 * C307 + C31509 * C326) * C31272 +
             (C113 * C297 + C31509 * C308) * C30299) +
            C362 * C31280 - C363 * C30305 - C364 * C2901) *
               C107 +
           (C363 * C30295 - (C362 * C31272 + C361 * C30299) + C364 * C31280 -
            C365 * C30305 - C366 * C2901) *
               C108 +
           (C365 * C30295 - (C364 * C31272 + C363 * C30299) + C366 * C31280 -
            C678 * C30305 - C679 * C2901) *
               C109) *
              C31498 * C31330 * C31380 +
          (((C113 * C301 + C31509 * C316) * C30299 +
            (C113 * C317 + C31509 * C331) * C31272 - C367 * C30295 -
            C368 * C31280 + C369 * C30305 + C370 * C2901) *
               C107 +
           (C367 * C30299 + C368 * C31272 - C369 * C30295 - C370 * C31280 +
            C371 * C30305 + C372 * C2901) *
               C108 +
           (C369 * C30299 + C370 * C31272 - C371 * C30295 - C372 * C31280 +
            (C113 * C305 + C31509 * C324) * C30305 +
            (C113 * C325 + C31509 * C335) * C2901) *
               C109) *
              C31498 * C31330 * C2904)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30299 +
            (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
            C169 * C31280 + C170 * C30305 + C171 * C2901) *
               C31294 * C4760 +
           (C7404 + C7405 - C7406 - C7407 + C7408 + C7409) * C31294 * C4761 +
           C7427 * C4762) *
              C31330 * C31373 +
          ((C7406 - (C7405 + C7404) + C7407 - C7408 - C7409) * C31294 * C4760 +
           (C7412 - (C7411 + C7410) + C7413 - C7414 - C7415) * C31294 * C4761 +
           (C7416 - (C7417 + C7418) + C7419 - C7420 - C7421) * C31294 * C4762) *
              C31330 * C31380 +
          (C7427 * C4760 +
           (C7418 + C7417 - C7416 - C7419 + C7420 + C7421) * C31294 * C4761 +
           (C5628 * C30299 + C5629 * C31272 - C5924 * C30295 - C5925 * C31280 +
            (C113 * C1166 + C31509 * C1177) * C30305 +
            (C113 * C1178 + C31509 * C1184) * C2901) *
               C31294 * C4762) *
              C31330 * C2904)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
                C109) *
               C31498 * C31588 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31277) *
                C109) *
               C31498 * C31417) *
              C31373 +
          (((C361 * C2642 -
             ((C113 * C307 + C31509 * C326) * C2635 +
              (C113 * C297 + C31509 * C308) * C2641) +
             C362 * C31277) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
                C109) *
               C31498 * C31588 +
           (((C113 * C935 + C31509 * C940) * C2641 +
             (C113 * C941 + C31509 * C950) * C2635 - C968 * C2642 -
             C969 * C31277) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31277) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31277) *
                C109) *
               C31498 * C31417) *
              C31380 +
          ((((C113 * C301 + C31509 * C316) * C2641 +
             (C113 * C317 + C31509 * C331) * C2635 - C367 * C2642 -
             C368 * C31277) *
                C107 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31277) *
                C108 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31277) *
                C109) *
               C31498 * C31588 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C31509 * C1327) * C2635 +
              (C113 * C1300 + C31509 * C1315) * C2641) +
             C1613 * C31277) *
                C107 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C31277) *
                C108 +
            ((C113 * C1599 + C31509 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C31509 * C1602) * C31277) *
                C109) *
               C31498 * C31417) *
              C2904)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C31294 * C4760 +
            (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
               C31588 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C31294 * C4760 +
            (C7278 - (C7279 + C7280) + C7281) * C31294 * C4761 +
            C7739 * C4762) *
               C31417) *
              C31373 +
          (((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
            (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 +
            C7131 * C4762) *
               C31588 +
           ((C7280 + C7279 - C7278 - C7281) * C31294 * C4760 +
            (C7284 + C7283 - C7282 - C7285) * C31294 * C4761 +
            (C7733 + C7734 - C7735 - C7736) * C31294 * C4762) *
               C31417) *
              C31380 +
          ((C7130 * C4760 + (C7118 + C7117 - C7116 - C7119) * C31294 * C4761 +
            (C7120 + C7121 - C7122 - C7123) * C31294 * C4762) *
               C31588 +
           (C7739 * C4760 + (C7735 - (C7734 + C7733) + C7736) * C31294 * C4761 +
            ((C113 * C6079 + C31509 * C6080) * C2642 -
             (C6214 * C2635 + C6215 * C2641) +
             (C113 * C6081 + C31509 * C6082) * C31277) *
                C31294 * C4762) *
               C31417) *
              C2904)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2641 +
            (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
            C169 * C31277) *
               C107 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) * C108 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
               C109) *
              C31498 * C31330 * C31660 +
          ((C361 * C2642 -
            ((C113 * C307 + C31509 * C326) * C2635 +
             (C113 * C297 + C31509 * C308) * C2641) +
            C362 * C31277) *
               C107 +
           (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
               C108 +
           (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
               C109) *
              C31498 * C31330 * C31656 +
          (((C113 * C301 + C31509 * C316) * C2641 +
            (C113 * C317 + C31509 * C331) * C2635 - C367 * C2642 -
            C368 * C31277) *
               C107 +
           (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31277) * C108 +
           (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31277) *
               C109) *
              C31498 * C31330 * C31646 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C31509 * C1181) * C2635 +
             (C113 * C1163 + C31509 * C1172) * C2641) +
            C1451 * C31277) *
               C107 +
           (C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C31277) *
               C108 +
           ((C113 * C1437 + C31509 * C1438) * C2642 -
            (C1453 * C2635 + C1452 * C2641) +
            (C113 * C1439 + C31509 * C1440) * C31277) *
               C109) *
              C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C107 +
           (C168 * C2533 + C169 * C31659 - C170 * C2534 - C171 * C31652 +
            C172 * C2535 + C173 * C31639 - C174 * C2536 - C175 * C31620) *
               C108 +
           (C170 * C2533 + C171 * C31659 - C172 * C2534 - C173 * C31652 +
            C174 * C2535 + C175 * C31639 - C176 * C2536 - C177 * C31620) *
               C109) *
              C31498 * C31330 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C31509 * C326) * C31659 +
             (C113 * C297 + C31509 * C308) * C2533) +
            C362 * C31652 - C363 * C2535 - C364 * C31639 + C365 * C2536 +
            C366 * C31620) *
               C107 +
           (C363 * C2534 - (C362 * C31659 + C361 * C2533) + C364 * C31652 -
            C365 * C2535 - C366 * C31639 + C678 * C2536 + C679 * C31620) *
               C108 +
           (C365 * C2534 - (C364 * C31659 + C363 * C2533) + C366 * C31652 -
            C678 * C2535 - C679 * C31639 +
            (C113 * C669 + C31509 * C670) * C2536 +
            (C113 * C671 + C31509 * C672) * C31620) *
               C109) *
              C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
                C109) *
               C31498 * C31654 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31277) *
                C109) *
               C31498 * C31643 +
           (((C113 * C490 + C31509 * C505) * C2641 +
             (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
             C557 * C31277) *
                C107 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31277) *
                C108 +
            (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C31277) *
                C109) *
               C31498 * C31619) *
              C2531 +
          (((C361 * C2642 -
             ((C113 * C307 + C31509 * C326) * C2635 +
              (C113 * C297 + C31509 * C308) * C2641) +
             C362 * C31277) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
                C109) *
               C31498 * C31654 +
           (((C113 * C935 + C31509 * C940) * C2641 +
             (C113 * C941 + C31509 * C950) * C2635 - C968 * C2642 -
             C969 * C31277) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31277) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31277) *
                C109) *
               C31498 * C31643 +
           ((C2198 * C2642 -
             ((C113 * C1308 + C31509 * C1324) * C2635 +
              (C113 * C1297 + C31509 * C1309) * C2641) +
             C2199 * C31277) *
                C107 +
            (C2200 * C2642 - (C2199 * C2635 + C2198 * C2641) + C2201 * C31277) *
                C108 +
            ((C113 * C2185 + C31509 * C2186) * C2642 -
             (C2201 * C2635 + C2200 * C2641) +
             (C113 * C2187 + C31509 * C2188) * C31277) *
                C109) *
               C31498 * C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C31294 * C4760 +
           (C6994 + C6995 - C6996 - C6997 + C6998 + C6999 - C7000 - C7001) *
               C31294 * C4761 +
           (C7002 + C7003 - C7004 - C7005 + C7006 + C7007 - C7008 - C7009) *
               C31294 * C4762) *
              C31330 * C2531 +
          ((C6996 - (C6995 + C6994) + C6997 - C6998 - C6999 + C7000 + C7001) *
               C31294 * C4760 +
           (C7004 - (C7003 + C7002) + C7005 - C7006 - C7007 + C7008 + C7009) *
               C31294 * C4761 +
           (C1450 * C2534 - (C4902 * C31659 + C4903 * C2533) + C1451 * C31652 -
            C1452 * C2535 - C1453 * C31639 +
            (C113 * C1437 + C31509 * C1438) * C2536 +
            (C113 * C1439 + C31509 * C1440) * C31620) *
               C31294 * C4762) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2641 +
            (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
            C169 * C31277) *
               C31294 * C4760 +
           (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
              C31330 * C31660 +
          ((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
           (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 + C7131 * C4762) *
              C31330 * C31656 +
          (C7130 * C4760 + (C7118 + C7117 - C7116 - C7119) * C31294 * C4761 +
           (C7120 + C7121 - C7122 - C7123) * C31294 * C4762) *
              C31330 * C31646 +
          (C7131 * C4760 + (C7122 - (C7121 + C7120) + C7123) * C31294 * C4761 +
           ((C113 * C5899 + C31509 * C5900) * C2642 -
            (C5630 * C2635 + C5631 * C2641) +
            (C113 * C5901 + C31509 * C5902) * C31277) *
               C31294 * C4762) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C31294 * C4760 +
            (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
               C31654 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C31294 * C4760 +
            (C7278 - (C7279 + C7280) + C7281) * C31294 * C4761 +
            (C7282 - (C7283 + C7284) + C7285) * C31294 * C4762) *
               C31643 +
           (((C113 * C490 + C31509 * C505) * C2641 +
             (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
             C557 * C31277) *
                C31294 * C4760 +
            (C7286 + C7287 - C7288 - C7289) * C31294 * C4761 +
            (C7290 + C7291 - C7292 - C7293) * C31294 * C4762) *
               C31619) *
              C2531 +
          (((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
            (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 +
            C7131 * C4762) *
               C31654 +
           ((C7280 + C7279 - C7278 - C7281) * C31294 * C4760 +
            (C7284 + C7283 - C7282 - C7285) * C31294 * C4761 +
            (C5787 * C2641 + C5788 * C2635 - C6099 * C2642 - C6100 * C31277) *
                C31294 * C4762) *
               C31643 +
           ((C7288 - (C7287 + C7286) + C7289) * C31294 * C4760 +
            (C7292 - (C7291 + C7290) + C7293) * C31294 * C4761 +
            ((C113 * C6657 + C31509 * C6658) * C2642 -
             (C5789 * C2635 + C5790 * C2641) +
             (C113 * C6659 + C31509 * C6660) * C31277) *
                C31294 * C4762) *
               C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30299 +
             (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
             C169 * C31280 + C170 * C30305 + C171 * C2901) *
                C107 +
            (C168 * C30299 + C169 * C31272 - C170 * C30295 - C171 * C31280 +
             C172 * C30305 + C173 * C2901) *
                C108 +
            (C170 * C30299 + C171 * C31272 - C172 * C30295 - C173 * C31280 +
             C174 * C30305 + C175 * C2901) *
                C109) *
               C31498 * C31588 +
           ((C550 * C30295 -
             ((C113 * C496 + C31509 * C515) * C31272 +
              (C113 * C486 + C31509 * C497) * C30299) +
             C551 * C31280 - C552 * C30305 - C553 * C2901) *
                C107 +
            (C552 * C30295 - (C551 * C31272 + C550 * C30299) + C553 * C31280 -
             C554 * C30305 - C555 * C2901) *
                C108 +
            (C554 * C30295 - (C553 * C31272 + C552 * C30299) + C555 * C31280 -
             C788 * C30305 - C789 * C2901) *
                C109) *
               C31498 * C31417) *
              C2531 +
          (((C361 * C30295 -
             ((C113 * C307 + C31509 * C326) * C31272 +
              (C113 * C297 + C31509 * C308) * C30299) +
             C362 * C31280 - C363 * C30305 - C364 * C2901) *
                C107 +
            (C363 * C30295 - (C362 * C31272 + C361 * C30299) + C364 * C31280 -
             C365 * C30305 - C366 * C2901) *
                C108 +
            (C365 * C30295 - (C364 * C31272 + C363 * C30299) + C366 * C31280 -
             C678 * C30305 - C679 * C2901) *
                C109) *
               C31498 * C31588 +
           (((C113 * C935 + C31509 * C940) * C30299 +
             (C113 * C941 + C31509 * C950) * C31272 - C968 * C30295 -
             C969 * C31280 + C970 * C30305 + C971 * C2901) *
                C107 +
            (C968 * C30299 + C969 * C31272 - C970 * C30295 - C971 * C31280 +
             C972 * C30305 + C973 * C2901) *
                C108 +
            (C970 * C30299 + C971 * C31272 - C972 * C30295 - C973 * C31280 +
             (C113 * C939 + C31509 * C948) * C30305 +
             (C113 * C949 + C31509 * C954) * C2901) *
                C109) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30299 +
             (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
             C169 * C31280 + C170 * C30305 + C171 * C2901) *
                C31294 * C4760 +
            (C7404 + C7405 - C7406 - C7407 + C7408 + C7409) * C31294 * C4761 +
            C7427 * C4762) *
               C31588 +
           ((C550 * C30295 -
             ((C113 * C496 + C31509 * C515) * C31272 +
              (C113 * C486 + C31509 * C497) * C30299) +
             C551 * C31280 - C552 * C30305 - C553 * C2901) *
                C31294 * C4760 +
            (C7574 - (C7575 + C7576) + C7577 - C7578 - C7579) * C31294 * C4761 +
            (C7580 - (C7581 + C7582) + C7583 - C7584 - C7585) * C31294 *
                C4762) *
               C31417) *
              C2531 +
          (((C7406 - (C7405 + C7404) + C7407 - C7408 - C7409) * C31294 * C4760 +
            (C7412 - (C7411 + C7410) + C7413 - C7414 - C7415) * C31294 * C4761 +
            (C7416 - (C7417 + C7418) + C7419 - C7420 - C7421) * C31294 *
                C4762) *
               C31588 +
           ((C7576 + C7575 - C7574 - C7577 + C7578 + C7579) * C31294 * C4760 +
            (C7582 + C7581 - C7580 - C7583 + C7584 + C7585) * C31294 * C4761 +
            (C5787 * C30299 + C5788 * C31272 - C6099 * C30295 - C6100 * C31280 +
             (C113 * C1715 + C31509 * C1720) * C30305 +
             (C113 * C1721 + C31509 * C1724) * C2901) *
                C31294 * C4762) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C107 +
           (C168 * C2533 + C169 * C31659 - C170 * C2534 - C171 * C31652 +
            C172 * C2535 + C173 * C31639 - C174 * C2536 - C175 * C31620) *
               C108 +
           (C170 * C2533 + C171 * C31659 - C172 * C2534 - C173 * C31652 +
            C174 * C2535 + C175 * C31639 - C176 * C2536 - C177 * C31620) *
               C109) *
              C31498 * C31330 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C31509 * C326) * C31659 +
             (C113 * C297 + C31509 * C308) * C2533) +
            C362 * C31652 - C363 * C2535 - C364 * C31639 + C365 * C2536 +
            C366 * C31620) *
               C107 +
           (C363 * C2534 - (C362 * C31659 + C361 * C2533) + C364 * C31652 -
            C365 * C2535 - C366 * C31639 + C678 * C2536 + C679 * C31620) *
               C108 +
           (C365 * C2534 - (C364 * C31659 + C363 * C2533) + C366 * C31652 -
            C678 * C2535 - C679 * C31639 +
            (C113 * C669 + C31509 * C670) * C2536 +
            (C113 * C671 + C31509 * C672) * C31620) *
               C109) *
              C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2641 +
            (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
            C169 * C31277) *
               C107 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) * C108 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
               C109) *
              C31498 * C31330 * C31660 +
          ((C361 * C2642 -
            ((C113 * C307 + C31509 * C326) * C2635 +
             (C113 * C297 + C31509 * C308) * C2641) +
            C362 * C31277) *
               C107 +
           (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
               C108 +
           (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
               C109) *
              C31498 * C31330 * C31656 +
          (((C113 * C301 + C31509 * C316) * C2641 +
            (C113 * C317 + C31509 * C331) * C2635 - C367 * C2642 -
            C368 * C31277) *
               C107 +
           (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31277) * C108 +
           (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31277) *
               C109) *
              C31498 * C31330 * C31646 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C31509 * C1181) * C2635 +
             (C113 * C1163 + C31509 * C1172) * C2641) +
            C1451 * C31277) *
               C107 +
           (C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C31277) *
               C108 +
           ((C113 * C1437 + C31509 * C1438) * C2642 -
            (C1453 * C2635 + C1452 * C2641) +
            (C113 * C1439 + C31509 * C1440) * C31277) *
               C109) *
              C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C31294 * C4760 +
           (C6994 + C6995 - C6996 - C6997 + C6998 + C6999 - C7000 - C7001) *
               C31294 * C4761 +
           (C7002 + C7003 - C7004 - C7005 + C7006 + C7007 - C7008 - C7009) *
               C31294 * C4762) *
              C31330 * C2531 +
          ((C6996 - (C6995 + C6994) + C6997 - C6998 - C6999 + C7000 + C7001) *
               C31294 * C4760 +
           (C7004 - (C7003 + C7002) + C7005 - C7006 - C7007 + C7008 + C7009) *
               C31294 * C4761 +
           (C1450 * C2534 - (C4902 * C31659 + C4903 * C2533) + C1451 * C31652 -
            C1452 * C2535 - C1453 * C31639 +
            (C113 * C1437 + C31509 * C1438) * C2536 +
            (C113 * C1439 + C31509 * C1440) * C31620) *
               C31294 * C4762) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2641 +
            (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
            C169 * C31277) *
               C31294 * C4760 +
           (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
              C31330 * C31660 +
          ((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
           (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 + C7131 * C4762) *
              C31330 * C31656 +
          (C7130 * C4760 + (C7118 + C7117 - C7116 - C7119) * C31294 * C4761 +
           (C7120 + C7121 - C7122 - C7123) * C31294 * C4762) *
              C31330 * C31646 +
          (C7131 * C4760 + (C7122 - (C7121 + C7120) + C7123) * C31294 * C4761 +
           ((C113 * C5899 + C31509 * C5900) * C2642 -
            (C5630 * C2635 + C5631 * C2641) +
            (C113 * C5901 + C31509 * C5902) * C31277) *
               C31294 * C4762) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C107 +
            (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                C108 +
            (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
                C109) *
               C31498 * C3298 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C107 +
            (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                C108 +
            (C554 * C30270 - (C553 * C31569 + C552 * C30289) + C555 * C31277) *
                C109) *
               C31498 * C31417) *
              C31373 +
          (((C361 * C30270 -
             ((C113 * C307 + C31509 * C326) * C31569 +
              (C113 * C297 + C31509 * C308) * C30289) +
             C362 * C31277) *
                C107 +
            (C363 * C30270 - (C362 * C31569 + C361 * C30289) + C364 * C31277) *
                C108 +
            (C365 * C30270 - (C364 * C31569 + C363 * C30289) + C366 * C31277) *
                C109) *
               C31498 * C3298 +
           (((C113 * C935 + C31509 * C940) * C30289 +
             (C113 * C941 + C31509 * C950) * C31569 - C968 * C30270 -
             C969 * C31277) *
                C107 +
            (C968 * C30289 + C969 * C31569 - C970 * C30270 - C971 * C31277) *
                C108 +
            (C970 * C30289 + C971 * C31569 - C972 * C30270 - C973 * C31277) *
                C109) *
               C31498 * C31417) *
              C31380 +
          ((((C113 * C301 + C31509 * C316) * C30289 +
             (C113 * C317 + C31509 * C331) * C31569 - C367 * C30270 -
             C368 * C31277) *
                C107 +
            (C367 * C30289 + C368 * C31569 - C369 * C30270 - C370 * C31277) *
                C108 +
            (C369 * C30289 + C370 * C31569 - C371 * C30270 - C372 * C31277) *
                C109) *
               C31498 * C3298 +
           ((C1612 * C30270 -
             ((C113 * C1314 + C31509 * C1327) * C31569 +
              (C113 * C1300 + C31509 * C1315) * C30289) +
             C1613 * C31277) *
                C107 +
            (C1614 * C30270 - (C1613 * C31569 + C1612 * C30289) +
             C1615 * C31277) *
                C108 +
            ((C113 * C1599 + C31509 * C1600) * C30270 -
             (C1615 * C31569 + C1614 * C30289) +
             (C113 * C1601 + C31509 * C1602) * C31277) *
                C109) *
               C31498 * C31417) *
              C2904)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C31294 * C4760 +
            (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
               C3298 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C31294 * C4760 +
            (C6084 - (C6085 + C6086) + C6087) * C31294 * C4761 +
            C6105 * C4762) *
               C31417) *
              C31373 +
          (((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
            (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 +
            C5933 * C4762) *
               C3298 +
           ((C6086 + C6085 - C6084 - C6087) * C31294 * C4760 +
            (C6090 + C6089 - C6088 - C6091) * C31294 * C4761 +
            (C6092 + C6093 - C6102 - C6103) * C31294 * C4762) *
               C31417) *
              C31380 +
          ((C5932 * C4760 + (C5914 + C5913 - C5912 - C5915) * C31294 * C4761 +
            (C5916 + C5917 - C5928 - C5929) * C31294 * C4762) *
               C3298 +
           (C6105 * C4760 + (C6102 - (C6093 + C6092) + C6103) * C31294 * C4761 +
            ((C113 * C6079 + C31509 * C6080) * C30270 -
             (C6214 * C31569 + C6215 * C30289) +
             (C113 * C6081 + C31509 * C6082) * C31277) *
                C31294 * C4762) *
               C31417) *
              C2904)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C31413 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31420 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C107 +
            (C556 * C1160 + C557 * C31267) * C108 +
            (C558 * C1160 + C559 * C31267) * C109) *
               C31498 * C3806) *
              C31373 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31420 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C31413 -
           ((C2201 * C31267 + C2200 * C1160) * C109 +
            (C2199 * C31267 + C2198 * C1160) * C108 +
            ((C113 * C1308 + C31509 * C1324) * C31267 +
             (C113 * C1297 + C31509 * C1309) * C1160) *
                C107) *
               C31498 * C3806) *
              C31380 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C31413 -
           ((C1615 * C31267 + C1614 * C1160) * C109 +
            (C1613 * C31267 + C1612 * C1160) * C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C31420 +
           (((C113 * C1301 + C31509 * C1316) * C1160 +
             (C113 * C1317 + C31509 * C1328) * C31267) *
                C107 +
            ((C113 * C1302 + C31509 * C1318) * C1160 +
             (C113 * C1319 + C31509 * C1329) * C31267) *
                C108 +
            ((C113 * C1303 + C31509 * C1320) * C1160 +
             (C113 * C1321 + C31509 * C1330) * C31267) *
                C109) *
               C31498 * C3806) *
              C2904)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C31413 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31420 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C3806) *
              C31373 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C31420 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C31413 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C3806) *
              C31380 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C31413 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31420 +
           (C5801 * C4760 + (C5799 + C5798) * C31294 * C4761 +
            ((C113 * C5751 + C31509 * C5756) * C1160 +
             (C113 * C5757 + C31509 * C5760) * C31267) *
                C31294 * C4762) *
               C3806) *
              C2904)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C3298 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31417) *
              C31660 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31417 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C3298) *
              C31656 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C3298 -
           ((C1615 * C31267 + C1614 * C1160) * C109 +
            (C1613 * C31267 + C1612 * C1160) * C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C31417) *
              C31646 +
          ((((C113 * C1713 + C31509 * C1716) * C1160 +
             (C113 * C1717 + C31509 * C1722) * C31267) *
                C107 +
            ((C113 * C1714 + C31509 * C1718) * C1160 +
             (C113 * C1719 + C31509 * C1723) * C31267) *
                C108 +
            ((C113 * C1715 + C31509 * C1720) * C1160 +
             (C113 * C1721 + C31509 * C1724) * C31267) *
                C109) *
               C31498 * C31417 -
           ((C1453 * C31267 + C1452 * C1160) * C109 +
            (C1451 * C31267 + C1450 * C1160) * C108 +
            ((C113 * C1171 + C31509 * C1181) * C31267 +
             (C113 * C1163 + C31509 * C1172) * C1160) *
                C107) *
               C31498 * C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C107 +
            (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
             C172 * C1091 + C173 * C31609) *
                C108 +
            (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
             C174 * C1091 + C175 * C31609) *
                C109) *
               C31498 * C3298 +
           ((C550 * C1090 -
             ((C113 * C496 + C31509 * C515) * C31650 +
              (C113 * C486 + C31509 * C497) * C1089) +
             C551 * C31637 - C552 * C1091 - C553 * C31609) *
                C107 +
            (C552 * C1090 - (C551 * C31650 + C550 * C1089) + C553 * C31637 -
             C554 * C1091 - C555 * C31609) *
                C108 +
            (C554 * C1090 - (C553 * C31650 + C552 * C1089) + C555 * C31637 -
             C788 * C1091 - C789 * C31609) *
                C109) *
               C31498 * C31417) *
              C2531 +
          (((C361 * C1090 -
             ((C113 * C307 + C31509 * C326) * C31650 +
              (C113 * C297 + C31509 * C308) * C1089) +
             C362 * C31637 - C363 * C1091 - C364 * C31609) *
                C107 +
            (C363 * C1090 - (C362 * C31650 + C361 * C1089) + C364 * C31637 -
             C365 * C1091 - C366 * C31609) *
                C108 +
            (C365 * C1090 - (C364 * C31650 + C363 * C1089) + C366 * C31637 -
             C678 * C1091 - C679 * C31609) *
                C109) *
               C31498 * C3298 +
           (((C113 * C935 + C31509 * C940) * C1089 +
             (C113 * C941 + C31509 * C950) * C31650 - C968 * C1090 -
             C969 * C31637 + C970 * C1091 + C971 * C31609) *
                C107 +
            (C968 * C1089 + C969 * C31650 - C970 * C1090 - C971 * C31637 +
             C972 * C1091 + C973 * C31609) *
                C108 +
            (C970 * C1089 + C971 * C31650 - C972 * C1090 - C973 * C31637 +
             (C113 * C939 + C31509 * C948) * C1091 +
             (C113 * C949 + C31509 * C954) * C31609) *
                C109) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C31661 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31658 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C107 +
            (C556 * C1160 + C557 * C31267) * C108 +
            (C558 * C1160 + C559 * C31267) * C109) *
               C31498 * C31649 -
           ((C2319 * C31267 + C2318 * C1160) * C109 +
            (C2317 * C31267 + C2316 * C1160) * C108 +
            ((C113 * C2025 + C31509 * C2035) * C31267 +
             (C113 * C2017 + C31509 * C2026) * C1160) *
                C107) *
               C31498 * C31632) *
              C2531 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31658 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C31661 -
           ((C2201 * C31267 + C2200 * C1160) * C109 +
            (C2199 * C31267 + C2198 * C1160) * C108 +
            ((C113 * C1308 + C31509 * C1324) * C31267 +
             (C113 * C1297 + C31509 * C1309) * C1160) *
                C107) *
               C31498 * C31649 +
           (((C113 * C2417 + C31509 * C2420) * C1160 +
             (C113 * C2421 + C31509 * C2426) * C31267) *
                C107 +
            ((C113 * C2418 + C31509 * C2422) * C1160 +
             (C113 * C2423 + C31509 * C2427) * C31267) *
                C108 +
            ((C113 * C2419 + C31509 * C2424) * C1160 +
             (C113 * C2425 + C31509 * C2428) * C31267) *
                C109) *
               C31498 * C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C31294 * C4760 +
            (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
            C5541 * C4762) *
               C3298 +
           ((C550 * C1090 -
             ((C113 * C496 + C31509 * C515) * C31650 +
              (C113 * C486 + C31509 * C497) * C1089) +
             C551 * C31637 - C552 * C1091 - C553 * C31609) *
                C31294 * C4760 +
            (C8630 - (C8631 + C8632) + C8633 - C8634 - C8635) * C31294 * C4761 +
            (C8636 - (C8637 + C8638) + C8639 - C8640 - C8641) * C31294 *
                C4762) *
               C31417) *
              C2531 +
          (((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C31294 * C4760 +
            (C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C31294 * C4761 +
            (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C31294 *
                C4762) *
               C3298 +
           ((C8632 + C8631 - C8630 - C8633 + C8634 + C8635) * C31294 * C4760 +
            (C8638 + C8637 - C8636 - C8639 + C8640 + C8641) * C31294 * C4761 +
            (C5787 * C1089 + C5788 * C31650 - C6099 * C1090 - C6100 * C31637 +
             (C113 * C1715 + C31509 * C1720) * C1091 +
             (C113 * C1721 + C31509 * C1724) * C31609) *
                C31294 * C4762) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C3298 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31417) *
              C31660 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C31417 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C3298) *
              C31656 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C3298 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31417) *
              C31646 +
          ((C6213 * C4760 + (C6217 + C6216) * C31294 * C4761 +
            ((C113 * C6203 + C31509 * C6204) * C1160 +
             (C113 * C6205 + C31509 * C6206) * C31267) *
                C31294 * C4762) *
               C31417 -
           ((C5636 + C5637) * C31294 * C4762 +
            (C5635 + C5634) * C31294 * C4761 + C5633 * C4760) *
               C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C31661 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31658 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C31649 -
           ((C6892 + C6893) * C31294 * C4762 +
            (C6894 + C6895) * C31294 * C4761 +
            ((C113 * C2025 + C31509 * C2035) * C31267 +
             (C113 * C2017 + C31509 * C2026) * C1160) *
                C31294 * C4760) *
               C31632) *
              C2531 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C31658 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C31661 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C31649 +
           ((C6895 + C6894) * C31294 * C4760 +
            (C6893 + C6892) * C31294 * C4761 +
            ((C113 * C6875 + C31509 * C6876) * C1160 +
             (C113 * C6877 + C31509 * C6878) * C31267) *
                C31294 * C4762) *
               C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C107 +
            (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                C108 +
            (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
                C109) *
               C31498 * C31413 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C107 +
            (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                C108 +
            (C554 * C30270 - (C553 * C31569 + C552 * C30289) + C555 * C31277) *
                C109) *
               C31498 * C31420 +
           (((C113 * C490 + C31509 * C505) * C30289 +
             (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
             C557 * C31277) *
                C107 +
            (C556 * C30289 + C557 * C31569 - C558 * C30270 - C559 * C31277) *
                C108 +
            (C558 * C30289 + C559 * C31569 - C560 * C30270 - C561 * C31277) *
                C109) *
               C31498 * C3806) *
              C2531 +
          (((C361 * C30270 -
             ((C113 * C307 + C31509 * C326) * C31569 +
              (C113 * C297 + C31509 * C308) * C30289) +
             C362 * C31277) *
                C107 +
            (C363 * C30270 - (C362 * C31569 + C361 * C30289) + C364 * C31277) *
                C108 +
            (C365 * C30270 - (C364 * C31569 + C363 * C30289) + C366 * C31277) *
                C109) *
               C31498 * C31413 +
           (((C113 * C935 + C31509 * C940) * C30289 +
             (C113 * C941 + C31509 * C950) * C31569 - C968 * C30270 -
             C969 * C31277) *
                C107 +
            (C968 * C30289 + C969 * C31569 - C970 * C30270 - C971 * C31277) *
                C108 +
            (C970 * C30289 + C971 * C31569 - C972 * C30270 - C973 * C31277) *
                C109) *
               C31498 * C31420 +
           ((C2198 * C30270 -
             ((C113 * C1308 + C31509 * C1324) * C31569 +
              (C113 * C1297 + C31509 * C1309) * C30289) +
             C2199 * C31277) *
                C107 +
            (C2200 * C30270 - (C2199 * C31569 + C2198 * C30289) +
             C2201 * C31277) *
                C108 +
            ((C113 * C2185 + C31509 * C2186) * C30270 -
             (C2201 * C31569 + C2200 * C30289) +
             (C113 * C2187 + C31509 * C2188) * C31277) *
                C109) *
               C31498 * C3806) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C31294 * C4760 +
            (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
               C31413 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C31294 * C4760 +
            (C6084 - (C6085 + C6086) + C6087) * C31294 * C4761 +
            C6105 * C4762) *
               C31420 +
           (((C113 * C490 + C31509 * C505) * C30289 +
             (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
             C557 * C31277) *
                C31294 * C4760 +
            (C6662 + C6663 - C6664 - C6665) * C31294 * C4761 +
            (C6666 + C6667 - C6674 - C6675) * C31294 * C4762) *
               C3806) *
              C2531 +
          (((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
            (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 +
            C5933 * C4762) *
               C31413 +
           ((C6086 + C6085 - C6084 - C6087) * C31294 * C4760 +
            (C6090 + C6089 - C6088 - C6091) * C31294 * C4761 +
            (C6092 + C6093 - C6102 - C6103) * C31294 * C4762) *
               C31420 +
           ((C6664 - (C6663 + C6662) + C6665) * C31294 * C4760 +
            (C6674 - (C6667 + C6666) + C6675) * C31294 * C4761 +
            ((C113 * C6657 + C31509 * C6658) * C30270 -
             (C5789 * C31569 + C5790 * C30289) +
             (C113 * C6659 + C31509 * C6660) * C31277) *
                C31294 * C4762) *
               C3806) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C107 +
            (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
             C172 * C1091 + C173 * C31609) *
                C108 +
            (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
             C174 * C1091 + C175 * C31609) *
                C109) *
               C31498 * C3298 +
           ((C550 * C1090 -
             ((C113 * C496 + C31509 * C515) * C31650 +
              (C113 * C486 + C31509 * C497) * C1089) +
             C551 * C31637 - C552 * C1091 - C553 * C31609) *
                C107 +
            (C552 * C1090 - (C551 * C31650 + C550 * C1089) + C553 * C31637 -
             C554 * C1091 - C555 * C31609) *
                C108 +
            (C554 * C1090 - (C553 * C31650 + C552 * C1089) + C555 * C31637 -
             C788 * C1091 - C789 * C31609) *
                C109) *
               C31498 * C31417) *
              C2531 +
          (((C361 * C1090 -
             ((C113 * C307 + C31509 * C326) * C31650 +
              (C113 * C297 + C31509 * C308) * C1089) +
             C362 * C31637 - C363 * C1091 - C364 * C31609) *
                C107 +
            (C363 * C1090 - (C362 * C31650 + C361 * C1089) + C364 * C31637 -
             C365 * C1091 - C366 * C31609) *
                C108 +
            (C365 * C1090 - (C364 * C31650 + C363 * C1089) + C366 * C31637 -
             C678 * C1091 - C679 * C31609) *
                C109) *
               C31498 * C3298 +
           (((C113 * C935 + C31509 * C940) * C1089 +
             (C113 * C941 + C31509 * C950) * C31650 - C968 * C1090 -
             C969 * C31637 + C970 * C1091 + C971 * C31609) *
                C107 +
            (C968 * C1089 + C969 * C31650 - C970 * C1090 - C971 * C31637 +
             C972 * C1091 + C973 * C31609) *
                C108 +
            (C970 * C1089 + C971 * C31650 - C972 * C1090 - C973 * C31637 +
             (C113 * C939 + C31509 * C948) * C1091 +
             (C113 * C949 + C31509 * C954) * C31609) *
                C109) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C3298 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31417) *
              C31660 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31417 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C3298) *
              C31656 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C3298 -
           ((C1615 * C31267 + C1614 * C1160) * C109 +
            (C1613 * C31267 + C1612 * C1160) * C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C31417) *
              C31646 +
          ((((C113 * C1713 + C31509 * C1716) * C1160 +
             (C113 * C1717 + C31509 * C1722) * C31267) *
                C107 +
            ((C113 * C1714 + C31509 * C1718) * C1160 +
             (C113 * C1719 + C31509 * C1723) * C31267) *
                C108 +
            ((C113 * C1715 + C31509 * C1720) * C1160 +
             (C113 * C1721 + C31509 * C1724) * C31267) *
                C109) *
               C31498 * C31417 -
           ((C1453 * C31267 + C1452 * C1160) * C109 +
            (C1451 * C31267 + C1450 * C1160) * C108 +
            ((C113 * C1171 + C31509 * C1181) * C31267 +
             (C113 * C1163 + C31509 * C1172) * C1160) *
                C107) *
               C31498 * C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1089 +
             (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
             C169 * C31637 + C170 * C1091 + C171 * C31609) *
                C31294 * C4760 +
            (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
            C5541 * C4762) *
               C3298 +
           ((C550 * C1090 -
             ((C113 * C496 + C31509 * C515) * C31650 +
              (C113 * C486 + C31509 * C497) * C1089) +
             C551 * C31637 - C552 * C1091 - C553 * C31609) *
                C31294 * C4760 +
            (C8630 - (C8631 + C8632) + C8633 - C8634 - C8635) * C31294 * C4761 +
            (C8636 - (C8637 + C8638) + C8639 - C8640 - C8641) * C31294 *
                C4762) *
               C31417) *
              C2531 +
          (((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C31294 * C4760 +
            (C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C31294 * C4761 +
            (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C31294 *
                C4762) *
               C3298 +
           ((C8632 + C8631 - C8630 - C8633 + C8634 + C8635) * C31294 * C4760 +
            (C8638 + C8637 - C8636 - C8639 + C8640 + C8641) * C31294 * C4761 +
            (C5787 * C1089 + C5788 * C31650 - C6099 * C1090 - C6100 * C31637 +
             (C113 * C1715 + C31509 * C1720) * C1091 +
             (C113 * C1721 + C31509 * C1724) * C31609) *
                C31294 * C4762) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C3298 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31417) *
              C31660 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C31417 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C3298) *
              C31656 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C3298 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31417) *
              C31646 +
          ((C6213 * C4760 + (C6217 + C6216) * C31294 * C4761 +
            ((C113 * C6203 + C31509 * C6204) * C1160 +
             (C113 * C6205 + C31509 * C6206) * C31267) *
                C31294 * C4762) *
               C31417 -
           ((C5636 + C5637) * C31294 * C4762 +
            (C5635 + C5634) * C31294 * C4761 + C5633 * C4760) *
               C3298) *
              C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30289 +
            (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
            C169 * C31277) *
               C107 +
           (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
               C108 +
           (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
               C109) *
              C31498 * C31330 * C1431 +
          ((C361 * C30270 -
            ((C113 * C307 + C31509 * C326) * C31569 +
             (C113 * C297 + C31509 * C308) * C30289) +
            C362 * C31277) *
               C107 +
           (C363 * C30270 - (C362 * C31569 + C361 * C30289) + C364 * C31277) *
               C108 +
           (C365 * C30270 - (C364 * C31569 + C363 * C30289) + C366 * C31277) *
               C109) *
              C31498 * C31330 * C1432 +
          (((C113 * C301 + C31509 * C316) * C30289 +
            (C113 * C317 + C31509 * C331) * C31569 - C367 * C30270 -
            C368 * C31277) *
               C107 +
           (C367 * C30289 + C368 * C31569 - C369 * C30270 - C370 * C31277) *
               C108 +
           (C369 * C30289 + C370 * C31569 - C371 * C30270 - C372 * C31277) *
               C109) *
              C31498 * C31330 * C1433 +
          ((C1450 * C30270 -
            ((C113 * C1171 + C31509 * C1181) * C31569 +
             (C113 * C1163 + C31509 * C1172) * C30289) +
            C1451 * C31277) *
               C107 +
           (C1452 * C30270 - (C1451 * C31569 + C1450 * C30289) +
            C1453 * C31277) *
               C108 +
           ((C113 * C1437 + C31509 * C1438) * C30270 -
            (C1453 * C31569 + C1452 * C30289) +
            (C113 * C1439 + C31509 * C1440) * C31277) *
               C109) *
              C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C107 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31620) *
               C108 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31620) *
               C109) *
              C31498 * C31330 * C31587 +
          ((C361 * C666 -
            ((C113 * C307 + C31509 * C326) * C659 +
             (C113 * C297 + C31509 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C31620) *
               C107 +
           (C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
            C365 * C667 - C366 * C661 + C678 * C668 + C679 * C31620) *
               C108 +
           (C365 * C666 - (C364 * C659 + C363 * C665) + C366 * C660 -
            C678 * C667 - C679 * C661 + (C113 * C669 + C31509 * C670) * C668 +
            (C113 * C671 + C31509 * C672) * C31620) *
               C109) *
              C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C107 +
            (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                C108 +
            (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
                C109) *
               C31498 * C1835 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C107 +
            (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                C108 +
            (C554 * C30270 - (C553 * C31569 + C552 * C30289) + C555 * C31277) *
                C109) *
               C31498 * C1836 +
           (((C113 * C490 + C31509 * C505) * C30289 +
             (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
             C557 * C31277) *
                C107 +
            (C556 * C30289 + C557 * C31569 - C558 * C30270 - C559 * C31277) *
                C108 +
            (C558 * C30289 + C559 * C31569 - C560 * C30270 - C561 * C31277) *
                C109) *
               C31498 * C31619) *
              C31587 +
          (((C361 * C30270 -
             ((C113 * C307 + C31509 * C326) * C31569 +
              (C113 * C297 + C31509 * C308) * C30289) +
             C362 * C31277) *
                C107 +
            (C363 * C30270 - (C362 * C31569 + C361 * C30289) + C364 * C31277) *
                C108 +
            (C365 * C30270 - (C364 * C31569 + C363 * C30289) + C366 * C31277) *
                C109) *
               C31498 * C1835 +
           (((C113 * C935 + C31509 * C940) * C30289 +
             (C113 * C941 + C31509 * C950) * C31569 - C968 * C30270 -
             C969 * C31277) *
                C107 +
            (C968 * C30289 + C969 * C31569 - C970 * C30270 - C971 * C31277) *
                C108 +
            (C970 * C30289 + C971 * C31569 - C972 * C30270 - C973 * C31277) *
                C109) *
               C31498 * C1836 +
           ((C2198 * C30270 -
             ((C113 * C1308 + C31509 * C1324) * C31569 +
              (C113 * C1297 + C31509 * C1309) * C30289) +
             C2199 * C31277) *
                C107 +
            (C2200 * C30270 - (C2199 * C31569 + C2198 * C30289) +
             C2201 * C31277) *
                C108 +
            ((C113 * C2185 + C31509 * C2186) * C30270 -
             (C2201 * C31569 + C2200 * C30289) +
             (C113 * C2187 + C31509 * C2188) * C31277) *
                C109) *
               C31498 * C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C31294 * C4760 +
           (C5124 + C5125 - C5126 - C5127 + C5128 + C5129 - C5130 - C5131) *
               C31294 * C4761 +
           (C5132 + C5133 - C5134 - C5135 + C5136 + C5137 - C5138 - C5139) *
               C31294 * C4762) *
              C31330 * C31587 +
          ((C5126 - (C5125 + C5124) + C5127 - C5128 - C5129 + C5130 + C5131) *
               C31294 * C4760 +
           (C5134 - (C5133 + C5132) + C5135 - C5136 - C5137 + C5138 + C5139) *
               C31294 * C4761 +
           (C1450 * C666 - (C4902 * C659 + C4903 * C665) + C1451 * C660 -
            C1452 * C667 - C1453 * C661 +
            (C113 * C1437 + C31509 * C1438) * C668 +
            (C113 * C1439 + C31509 * C1440) * C31620) *
               C31294 * C4762) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30289 +
            (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
            C169 * C31277) *
               C31294 * C4760 +
           (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
              C31330 * C1431 +
          ((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
           (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 + C5933 * C4762) *
              C31330 * C1432 +
          (C5932 * C4760 + (C5914 + C5913 - C5912 - C5915) * C31294 * C4761 +
           (C5916 + C5917 - C5928 - C5929) * C31294 * C4762) *
              C31330 * C1433 +
          (C5933 * C4760 + (C5928 - (C5917 + C5916) + C5929) * C31294 * C4761 +
           ((C113 * C5899 + C31509 * C5900) * C30270 -
            (C5630 * C31569 + C5631 * C30289) +
            (C113 * C5901 + C31509 * C5902) * C31277) *
               C31294 * C4762) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C31294 * C4760 +
            (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
               C1835 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C31294 * C4760 +
            (C6084 - (C6085 + C6086) + C6087) * C31294 * C4761 +
            C6105 * C4762) *
               C1836 +
           (((C113 * C490 + C31509 * C505) * C30289 +
             (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
             C557 * C31277) *
                C31294 * C4760 +
            (C6662 + C6663 - C6664 - C6665) * C31294 * C4761 +
            (C6666 + C6667 - C6674 - C6675) * C31294 * C4762) *
               C31619) *
              C31587 +
          (((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
            (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 +
            C5933 * C4762) *
               C1835 +
           ((C6086 + C6085 - C6084 - C6087) * C31294 * C4760 +
            (C6090 + C6089 - C6088 - C6091) * C31294 * C4761 +
            (C6092 + C6093 - C6102 - C6103) * C31294 * C4762) *
               C1836 +
           ((C6664 - (C6663 + C6662) + C6665) * C31294 * C4760 +
            (C6674 - (C6667 + C6666) + C6675) * C31294 * C4761 +
            ((C113 * C6657 + C31509 * C6658) * C30270 -
             (C5789 * C31569 + C5790 * C30289) +
             (C113 * C6659 + C31509 * C6660) * C31277) *
                C31294 * C4762) *
               C31619) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C31588 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31417) *
              C1431 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31417 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C31588) *
              C1432 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C31588 -
           ((C1615 * C31267 + C1614 * C1160) * C109 +
            (C1613 * C31267 + C1612 * C1160) * C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C31417) *
              C1433 +
          ((((C113 * C1713 + C31509 * C1716) * C1160 +
             (C113 * C1717 + C31509 * C1722) * C31267) *
                C107 +
            ((C113 * C1714 + C31509 * C1718) * C1160 +
             (C113 * C1719 + C31509 * C1723) * C31267) *
                C108 +
            ((C113 * C1715 + C31509 * C1720) * C1160 +
             (C113 * C1721 + C31509 * C1724) * C31267) *
                C109) *
               C31498 * C31417 -
           ((C1453 * C31267 + C1452 * C1160) * C109 +
            (C1451 * C31267 + C1450 * C1160) * C108 +
            ((C113 * C1171 + C31509 * C1181) * C31267 +
             (C113 * C1163 + C31509 * C1172) * C1160) *
                C107) *
               C31498 * C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C293 +
             (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31609) *
                C107 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31609) *
                C108 +
            (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
             C174 * C295 + C175 * C31609) *
                C109) *
               C31498 * C31588 +
           ((C550 * C294 -
             ((C113 * C496 + C31509 * C515) * C287 +
              (C113 * C486 + C31509 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C31609) *
                C107 +
            (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
             C554 * C295 - C555 * C31609) *
                C108 +
            (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
             C788 * C295 - C789 * C31609) *
                C109) *
               C31498 * C31417) *
              C31587 +
          (((C361 * C294 -
             ((C113 * C307 + C31509 * C326) * C287 +
              (C113 * C297 + C31509 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C31609) *
                C107 +
            (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
             C365 * C295 - C366 * C31609) *
                C108 +
            (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
             C678 * C295 - C679 * C31609) *
                C109) *
               C31498 * C31588 +
           (((C113 * C935 + C31509 * C940) * C293 +
             (C113 * C941 + C31509 * C950) * C287 - C968 * C294 - C969 * C288 +
             C970 * C295 + C971 * C31609) *
                C107 +
            (C968 * C293 + C969 * C287 - C970 * C294 - C971 * C288 +
             C972 * C295 + C973 * C31609) *
                C108 +
            (C970 * C293 + C971 * C287 - C972 * C294 - C973 * C288 +
             (C113 * C939 + C31509 * C948) * C295 +
             (C113 * C949 + C31509 * C954) * C31609) *
                C109) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C2299 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C2300 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C107 +
            (C556 * C1160 + C557 * C31267) * C108 +
            (C558 * C1160 + C559 * C31267) * C109) *
               C31498 * C2301 -
           ((C2319 * C31267 + C2318 * C1160) * C109 +
            (C2317 * C31267 + C2316 * C1160) * C108 +
            ((C113 * C2025 + C31509 * C2035) * C31267 +
             (C113 * C2017 + C31509 * C2026) * C1160) *
                C107) *
               C31498 * C31632) *
              C31587 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C2300 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C2299 -
           ((C2201 * C31267 + C2200 * C1160) * C109 +
            (C2199 * C31267 + C2198 * C1160) * C108 +
            ((C113 * C1308 + C31509 * C1324) * C31267 +
             (C113 * C1297 + C31509 * C1309) * C1160) *
                C107) *
               C31498 * C2301 +
           (((C113 * C2417 + C31509 * C2420) * C1160 +
             (C113 * C2421 + C31509 * C2426) * C31267) *
                C107 +
            ((C113 * C2418 + C31509 * C2422) * C1160 +
             (C113 * C2423 + C31509 * C2427) * C31267) *
                C108 +
            ((C113 * C2419 + C31509 * C2424) * C1160 +
             (C113 * C2425 + C31509 * C2428) * C31267) *
                C109) *
               C31498 * C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C293 +
             (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31609) *
                C31294 * C4760 +
            (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
            C4915 * C4762) *
               C31588 +
           ((C550 * C294 -
             ((C113 * C496 + C31509 * C515) * C287 +
              (C113 * C486 + C31509 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C31609) *
                C31294 * C4760 +
            (C5384 - (C5404 + C5405) + C5389 - C5390 - C5391) * C31294 * C4761 +
            (C5392 - (C5406 + C5407) + C5397 - C5398 - C5399) * C31294 *
                C4762) *
               C31417) *
              C31587 +
          (((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C31294 * C4760 +
            (C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C31294 * C4761 +
            (C4890 - (C4908 + C4909) + C4895 - C4896 - C4897) * C31294 *
                C4762) *
               C31588 +
           ((C5405 + C5404 - C5384 - C5389 + C5390 + C5391) * C31294 * C4760 +
            (C5407 + C5406 - C5392 - C5397 + C5398 + C5399) * C31294 * C4761 +
            ((C113 * C1713 + C31509 * C1716) * C293 +
             (C113 * C1717 + C31509 * C1722) * C287 -
             (C113 * C1714 + C31509 * C1718) * C294 -
             (C113 * C1719 + C31509 * C1723) * C288 +
             (C113 * C1715 + C31509 * C1720) * C295 +
             (C113 * C1721 + C31509 * C1724) * C31609) *
                C31294 * C4762) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C31588 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31417) *
              C1431 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C31417 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C31588) *
              C1432 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C31588 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31417) *
              C1433 +
          ((C6213 * C4760 + (C6217 + C6216) * C31294 * C4761 +
            ((C113 * C6203 + C31509 * C6204) * C1160 +
             (C113 * C6205 + C31509 * C6206) * C31267) *
                C31294 * C4762) *
               C31417 -
           ((C5636 + C5637) * C31294 * C4762 +
            (C5635 + C5634) * C31294 * C4761 + C5633 * C4760) *
               C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C2299 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C2300 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C2301 -
           ((C6892 + C6893) * C31294 * C4762 +
            (C6894 + C6895) * C31294 * C4761 +
            ((C113 * C2025 + C31509 * C2035) * C31267 +
             (C113 * C2017 + C31509 * C2026) * C1160) *
                C31294 * C4760) *
               C31632) *
              C31587 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C2300 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C2299 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C2301 +
           ((C6895 + C6894) * C31294 * C4760 +
            (C6893 + C6892) * C31294 * C4761 +
            ((C113 * C6875 + C31509 * C6876) * C1160 +
             (C113 * C6877 + C31509 * C6878) * C31267) *
                C31294 * C4762) *
               C31632) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C31509 * C126) * C114 +
               (C113 * C127 + C31509 * C140) * C102 - C168 * C115 -
               C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C107 +
              (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
               C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
               C176 * C118 + C177 * C106) *
                  C108 +
              (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
               C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
               (C113 * C125 + C31509 * C138) * C118 +
               (C113 * C139 + C31509 * C146) * C106) *
                  C109) *
             C31498 * C31330 * C31318 +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C31509 * C126) * C293 +
                (C113 * C127 + C31509 * C140) * C287 - C168 * C294 -
                C169 * C288 + C170 * C295 + C171 * C31609) *
                   C107 +
               (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                C172 * C295 + C173 * C31609) *
                   C108 +
               (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                C174 * C295 + C175 * C31609) *
                   C109) *
                  C31498 * C31330 * C31653 +
              ((C361 * C294 -
                ((C113 * C307 + C31509 * C326) * C287 +
                 (C113 * C297 + C31509 * C308) * C293) +
                C362 * C288 - C363 * C295 - C364 * C31609) *
                   C107 +
               (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                C365 * C295 - C366 * C31609) *
                   C108 +
               (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                (C113 * C300 + C31509 * C314) * C295 -
                (C113 * C315 + C31509 * C330) * C31609) *
                   C109) *
                  C31498 * C31330 * C31641 +
              (((C113 * C301 + C31509 * C316) * C293 +
                (C113 * C317 + C31509 * C331) * C287 - C367 * C294 -
                C368 * C288 + C369 * C295 + C370 * C31609) *
                   C107 +
               (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                C371 * C295 + C372 * C31609) *
                   C108 +
               (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                (C113 * C305 + C31509 * C324) * C295 +
                (C113 * C325 + C31509 * C335) * C31609) *
                   C109) *
                  C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C107 +
           (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
            C172 * C295 + C173 * C31609) *
               C108 +
           (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
            C174 * C295 + C175 * C31609) *
               C109) *
              C31498 * C31654 +
          ((C550 * C294 -
            ((C113 * C496 + C31509 * C515) * C287 +
             (C113 * C486 + C31509 * C497) * C293) +
            C551 * C288 - C552 * C295 - C553 * C31609) *
               C107 +
           (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
            C554 * C295 - C555 * C31609) *
               C108 +
           (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
            (C113 * C489 + C31509 * C503) * C295 -
            (C113 * C504 + C31509 * C519) * C31609) *
               C109) *
              C31498 * C31643 +
          (((C113 * C490 + C31509 * C505) * C293 +
            (C113 * C506 + C31509 * C520) * C287 - C556 * C294 - C557 * C288 +
            C558 * C295 + C559 * C31609) *
               C107 +
           (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
            C560 * C295 + C561 * C31609) *
               C108 +
           (C558 * C293 + C559 * C287 - C560 * C294 - C561 * C288 +
            (C113 * C494 + C31509 * C513) * C295 +
            (C113 * C514 + C31509 * C524) * C31609) *
               C109) *
              C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C107 +
           (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
            C172 * C1091 + C173 * C31609) *
               C108 +
           (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
            C174 * C1091 + C175 * C31609) *
               C109) *
              C31498 * C31330 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C31509 * C326) * C31650 +
             (C113 * C297 + C31509 * C308) * C1089) +
            C362 * C31637 - C363 * C1091 - C364 * C31609) *
               C107 +
           (C363 * C1090 - (C362 * C31650 + C361 * C1089) + C364 * C31637 -
            C365 * C1091 - C366 * C31609) *
               C108 +
           (C365 * C1090 - (C364 * C31650 + C363 * C1089) + C366 * C31637 -
            C678 * C1091 - C679 * C31609) *
               C109) *
              C31498 * C31330 * C1087 +
          (((C113 * C301 + C31509 * C316) * C1089 +
            (C113 * C317 + C31509 * C331) * C31650 - C367 * C1090 -
            C368 * C31637 + C369 * C1091 + C370 * C31609) *
               C107 +
           (C367 * C1089 + C368 * C31650 - C369 * C1090 - C370 * C31637 +
            C371 * C1091 + C372 * C31609) *
               C108 +
           (C369 * C1089 + C370 * C31650 - C371 * C1090 - C372 * C31637 +
            (C113 * C305 + C31509 * C324) * C1091 +
            (C113 * C325 + C31509 * C335) * C31609) *
               C109) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C107 +
           (C168 * C1160 + C169 * C31267) * C108 +
           (C170 * C1160 + C171 * C31267) * C109) *
              C31498 * C31330 * C1155 -
          ((C364 * C31267 + C363 * C1160) * C109 +
           (C362 * C31267 + C361 * C1160) * C108 +
           ((C113 * C307 + C31509 * C326) * C31267 +
            (C113 * C297 + C31509 * C308) * C1160) *
               C107) *
              C31498 * C31330 * C1156 +
          (((C113 * C301 + C31509 * C316) * C1160 +
            (C113 * C317 + C31509 * C331) * C31267) *
               C107 +
           (C367 * C1160 + C368 * C31267) * C108 +
           (C369 * C1160 + C370 * C31267) * C109) *
              C31498 * C31330 * C1157 -
          (((C113 * C1167 + C31509 * C1179) * C31267 +
            (C113 * C1161 + C31509 * C1168) * C1160) *
               C109 +
           ((C113 * C1169 + C31509 * C1180) * C31267 +
            (C113 * C1162 + C31509 * C1170) * C1160) *
               C108 +
           ((C113 * C1171 + C31509 * C1181) * C31267 +
            (C113 * C1163 + C31509 * C1172) * C1160) *
               C107) *
              C31498 * C31330 * C1158 +
          (((C113 * C1164 + C31509 * C1173) * C1160 +
            (C113 * C1174 + C31509 * C1182) * C31267) *
               C107 +
           ((C113 * C1165 + C31509 * C1175) * C1160 +
            (C113 * C1176 + C31509 * C1183) * C31267) *
               C108 +
           ((C113 * C1166 + C31509 * C1177) * C1160 +
            (C113 * C1178 + C31509 * C1184) * C31267) *
               C109) *
              C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C31654 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31643 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C107 +
            (C556 * C1160 + C557 * C31267) * C108 +
            (C558 * C1160 + C559 * C31267) * C109) *
               C31498 * C31619) *
              C1086 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31643 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C31654 -
           (((C113 * C1304 + C31509 * C1322) * C31267 +
             (C113 * C1295 + C31509 * C1305) * C1160) *
                C109 +
            ((C113 * C1306 + C31509 * C1323) * C31267 +
             (C113 * C1296 + C31509 * C1307) * C1160) *
                C108 +
            ((C113 * C1308 + C31509 * C1324) * C31267 +
             (C113 * C1297 + C31509 * C1309) * C1160) *
                C107) *
               C31498 * C31619) *
              C1087 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C31654 -
           (((C113 * C1310 + C31509 * C1325) * C31267 +
             (C113 * C1298 + C31509 * C1311) * C1160) *
                C109 +
            ((C113 * C1312 + C31509 * C1326) * C31267 +
             (C113 * C1299 + C31509 * C1313) * C1160) *
                C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C31643 +
           (((C113 * C1301 + C31509 * C1316) * C1160 +
             (C113 * C1317 + C31509 * C1328) * C31267) *
                C107 +
            ((C113 * C1302 + C31509 * C1318) * C1160 +
             (C113 * C1319 + C31509 * C1329) * C31267) *
                C108 +
            ((C113 * C1303 + C31509 * C1320) * C1160 +
             (C113 * C1321 + C31509 * C1330) * C31267) *
                C109) *
               C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C107 +
           (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
            C172 * C1091 + C173 * C31609) *
               C108 +
           (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
            C174 * C1091 + C175 * C31609) *
               C109) *
              C31498 * C1835 +
          ((C550 * C1090 -
            ((C113 * C496 + C31509 * C515) * C31650 +
             (C113 * C486 + C31509 * C497) * C1089) +
            C551 * C31637 - C552 * C1091 - C553 * C31609) *
               C107 +
           (C552 * C1090 - (C551 * C31650 + C550 * C1089) + C553 * C31637 -
            C554 * C1091 - C555 * C31609) *
               C108 +
           (C554 * C1090 - (C553 * C31650 + C552 * C1089) + C555 * C31637 -
            C788 * C1091 - C789 * C31609) *
               C109) *
              C31498 * C1836 +
          (((C113 * C490 + C31509 * C505) * C1089 +
            (C113 * C506 + C31509 * C520) * C31650 - C556 * C1090 -
            C557 * C31637 + C558 * C1091 + C559 * C31609) *
               C107 +
           (C556 * C1089 + C557 * C31650 - C558 * C1090 - C559 * C31637 +
            C560 * C1091 + C561 * C31609) *
               C108 +
           (C558 * C1089 + C559 * C31650 - C560 * C1090 - C561 * C31637 +
            (C113 * C494 + C31509 * C513) * C1091 +
            (C113 * C514 + C31509 * C524) * C31609) *
               C109) *
              C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C1835 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C1836 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C107 +
            (C556 * C1160 + C557 * C31267) * C108 +
            (C558 * C1160 + C559 * C31267) * C109) *
               C31498 * C31619) *
              C31653 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C1836 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C1835 -
           (((C113 * C1304 + C31509 * C1322) * C31267 +
             (C113 * C1295 + C31509 * C1305) * C1160) *
                C109 +
            ((C113 * C1306 + C31509 * C1323) * C31267 +
             (C113 * C1296 + C31509 * C1307) * C1160) *
                C108 +
            ((C113 * C1308 + C31509 * C1324) * C31267 +
             (C113 * C1297 + C31509 * C1309) * C1160) *
                C107) *
               C31498 * C31619) *
              C31641 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C1835 -
           ((C1615 * C31267 + C1614 * C1160) * C109 +
            (C1613 * C31267 + C1612 * C1160) * C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C1836 +
           (((C113 * C1301 + C31509 * C1316) * C1160 +
             (C113 * C1317 + C31509 * C1328) * C31267) *
                C107 +
            ((C113 * C1302 + C31509 * C1318) * C1160 +
             (C113 * C1319 + C31509 * C1329) * C31267) *
                C108 +
            ((C113 * C1303 + C31509 * C1320) * C1160 +
             (C113 * C1321 + C31509 * C1330) * C31267) *
                C109) *
               C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C107 +
           (C168 * C1160 + C169 * C31267) * C108 +
           (C170 * C1160 + C171 * C31267) * C109) *
              C31498 * C2010 -
          ((C553 * C31267 + C552 * C1160) * C109 +
           (C551 * C31267 + C550 * C1160) * C108 +
           ((C113 * C496 + C31509 * C515) * C31267 +
            (C113 * C486 + C31509 * C497) * C1160) *
               C107) *
              C31498 * C2011 +
          (((C113 * C490 + C31509 * C505) * C1160 +
            (C113 * C506 + C31509 * C520) * C31267) *
               C107 +
           (C556 * C1160 + C557 * C31267) * C108 +
           (C558 * C1160 + C559 * C31267) * C109) *
              C31498 * C2012 -
          (((C113 * C2021 + C31509 * C2033) * C31267 +
            (C113 * C2015 + C31509 * C2022) * C1160) *
               C109 +
           ((C113 * C2023 + C31509 * C2034) * C31267 +
            (C113 * C2016 + C31509 * C2024) * C1160) *
               C108 +
           ((C113 * C2025 + C31509 * C2035) * C31267 +
            (C113 * C2017 + C31509 * C2026) * C1160) *
               C107) *
              C31498 * C2013 +
          (((C113 * C2018 + C31509 * C2027) * C1160 +
            (C113 * C2028 + C31509 * C2036) * C31267) *
               C107 +
           ((C113 * C2019 + C31509 * C2029) * C1160 +
            (C113 * C2030 + C31509 * C2037) * C31267) *
               C108 +
           ((C113 * C2020 + C31509 * C2031) * C1160 +
            (C113 * C2032 + C31509 * C2038) * C31267) *
               C109) *
              C31498 * C2014) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C31294 * C4760 +
          ((C113 * C297 + C31509 * C308) * C114 +
           (C113 * C307 + C31509 * C326) * C102 - C361 * C115 - C362 * C103 +
           C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 + C678 * C118 +
           C679 * C106) *
              C31294 * C4761 +
          ((C113 * C301 + C31509 * C316) * C114 +
           (C113 * C317 + C31509 * C331) * C102 - C367 * C115 - C368 * C103 +
           C369 * C116 + C370 * C104 - C371 * C117 - C372 * C105 +
           (C113 * C305 + C31509 * C324) * C118 +
           (C113 * C325 + C31509 * C335) * C106) *
              C31294 * C4762) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C31294 * C4760 +
           (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
           C4915 * C4762) *
              C31330 * C31653 +
          ((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C31294 * C4760 +
           (C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C31294 * C4761 +
           (C4890 - (C4908 + C4909) + C4895 - C4896 - C4897) * C31294 * C4762) *
              C31330 * C31641 +
          (C4915 * C4760 +
           (C4909 + C4908 - C4890 - C4895 + C4896 + C4897) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C293 +
            (C113 * C1174 + C31509 * C1182) * C287 -
            (C113 * C1165 + C31509 * C1175) * C294 -
            (C113 * C1176 + C31509 * C1183) * C288 +
            (C113 * C1166 + C31509 * C1177) * C295 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C31294 * C4760 +
           (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
           C4915 * C4762) *
              C31654 +
          ((C550 * C294 -
            ((C113 * C496 + C31509 * C515) * C287 +
             (C113 * C486 + C31509 * C497) * C293) +
            C551 * C288 - C552 * C295 - C553 * C31609) *
               C31294 * C4760 +
           (C968 * C294 -
            ((C113 * C941 + C31509 * C950) * C287 +
             (C113 * C935 + C31509 * C940) * C293) +
            C969 * C288 - C970 * C295 - C971 * C31609) *
               C31294 * C4761 +
           (C1612 * C294 -
            ((C113 * C1314 + C31509 * C1327) * C287 +
             (C113 * C1300 + C31509 * C1315) * C293) +
            C1613 * C288 - C1614 * C295 - C1615 * C31609) *
               C31294 * C4762) *
              C31643 +
          (((C113 * C490 + C31509 * C505) * C293 +
            (C113 * C506 + C31509 * C520) * C287 - C556 * C294 - C557 * C288 +
            C558 * C295 + C559 * C31609) *
               C31294 * C4760 +
           ((C113 * C1297 + C31509 * C1309) * C293 +
            (C113 * C1308 + C31509 * C1324) * C287 - C2198 * C294 -
            C2199 * C288 + C2200 * C295 + C2201 * C31609) *
               C31294 * C4761 +
           ((C113 * C1301 + C31509 * C1316) * C293 +
            (C113 * C1317 + C31509 * C1328) * C287 -
            (C113 * C1302 + C31509 * C1318) * C294 -
            (C113 * C1319 + C31509 * C1329) * C288 +
            (C113 * C1303 + C31509 * C1320) * C295 +
            (C113 * C1321 + C31509 * C1330) * C31609) *
               C31294 * C4762) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C31294 * C4760 +
           (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
           C5541 * C4762) *
              C31330 * C1086 +
          ((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C31294 * C4760 +
           (C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C31294 * C4761 +
           (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C31294 * C4762) *
              C31330 * C1087 +
          (C5541 * C4760 +
           (C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C1089 +
            (C113 * C1174 + C31509 * C1182) * C31650 -
            (C113 * C1165 + C31509 * C1175) * C1090 -
            (C113 * C1176 + C31509 * C1183) * C31637 +
            (C113 * C1166 + C31509 * C1177) * C1091 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C31294 * C4760 +
           (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
              C31330 * C1155 -
          (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
           (C5613 + C5612) * C31294 * C4760) *
              C31330 * C1156 +
          (C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
              C31330 * C1157 -
          ((C5636 + C5637) * C31294 * C4762 + (C5635 + C5634) * C31294 * C4761 +
           C5633 * C4760) *
              C31330 * C1158 +
          (C5639 * C4760 + (C5637 + C5636) * C31294 * C4761 +
           ((C113 * C5604 + C31509 * C5607) * C1160 +
            (C113 * C5608 + C31509 * C5610) * C31267) *
               C31294 * C4762) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C31654 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31643 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C31619) *
              C1086 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 +
            (C5796 + C5797) * C31294 * C4762) *
               C31643 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C31654 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C31619) *
              C1087 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C31654 -
           (((C113 * C5754 + C31509 * C5759) * C31267 +
             (C113 * C5750 + C31509 * C5755) * C1160) *
                C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31643 +
           (C5801 * C4760 + (C5799 + C5798) * C31294 * C4761 +
            ((C113 * C5751 + C31509 * C5756) * C1160 +
             (C113 * C5757 + C31509 * C5760) * C31267) *
                C31294 * C4762) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C31294 * C4760 +
           (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
           C5541 * C4762) *
              C1835 +
          ((C550 * C1090 -
            ((C113 * C496 + C31509 * C515) * C31650 +
             (C113 * C486 + C31509 * C497) * C1089) +
            C551 * C31637 - C552 * C1091 - C553 * C31609) *
               C31294 * C4760 +
           (C968 * C1090 - (C5400 * C31650 + C5401 * C1089) + C969 * C31637 -
            C970 * C1091 - C971 * C31609) *
               C31294 * C4761 +
           (C1612 * C1090 - (C5402 * C31650 + C5403 * C1089) + C1613 * C31637 -
            C1614 * C1091 - C1615 * C31609) *
               C31294 * C4762) *
              C1836 +
          (((C113 * C490 + C31509 * C505) * C1089 +
            (C113 * C506 + C31509 * C520) * C31650 - C556 * C1090 -
            C557 * C31637 + C558 * C1091 + C559 * C31609) *
               C31294 * C4760 +
           (C5783 * C1089 + C5784 * C31650 - C2198 * C1090 - C2199 * C31637 +
            C2200 * C1091 + C2201 * C31609) *
               C31294 * C4761 +
           (C5785 * C1089 + C5786 * C31650 -
            (C113 * C1302 + C31509 * C1318) * C1090 -
            (C113 * C1319 + C31509 * C1329) * C31637 +
            (C113 * C1303 + C31509 * C1320) * C1091 +
            (C113 * C1321 + C31509 * C1330) * C31609) *
               C31294 * C4762) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C1835 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C1836 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C31619) *
              C31653 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C1836 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C1835 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C31619) *
              C31641 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C1835 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C1836 +
           (C5801 * C4760 + (C5799 + C5798) * C31294 * C4761 +
            ((C113 * C5751 + C31509 * C5756) * C1160 +
             (C113 * C5757 + C31509 * C5760) * C31267) *
                C31294 * C4762) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C31294 * C4760 +
           (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
              C2010 -
          (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
           ((C113 * C496 + C31509 * C515) * C31267 +
            (C113 * C486 + C31509 * C497) * C1160) *
               C31294 * C4760) *
              C2011 +
          (((C113 * C490 + C31509 * C505) * C1160 +
            (C113 * C506 + C31509 * C520) * C31267) *
               C31294 * C4760 +
           (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
              C2012 -
          (((C113 * C6502 + C31509 * C6508) * C31267 +
            (C113 * C6499 + C31509 * C6503) * C1160) *
               C31294 * C4762 +
           ((C113 * C2421 + C31509 * C2426) * C31267 +
            (C113 * C2417 + C31509 * C2420) * C1160) *
               C31294 * C4761 +
           ((C113 * C2025 + C31509 * C2035) * C31267 +
            (C113 * C2017 + C31509 * C2026) * C1160) *
               C31294 * C4760) *
              C2013 +
          (((C113 * C2018 + C31509 * C2027) * C1160 +
            (C113 * C2028 + C31509 * C2036) * C31267) *
               C31294 * C4760 +
           ((C113 * C6500 + C31509 * C6504) * C1160 +
            (C113 * C6505 + C31509 * C6509) * C31267) *
               C31294 * C4761 +
           ((C113 * C6501 + C31509 * C6506) * C1160 +
            (C113 * C6507 + C31509 * C6510) * C31267) *
               C31294 * C4762) *
              C2014) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C107 +
            (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                C108 +
            (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
                C109) *
               C31498 * C31588 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C107 +
            (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                C108 +
            (C554 * C30270 - (C553 * C31569 + C552 * C30289) + C555 * C31277) *
                C109) *
               C31498 * C31417) *
              C1086 +
          (((C361 * C30270 -
             ((C113 * C307 + C31509 * C326) * C31569 +
              (C113 * C297 + C31509 * C308) * C30289) +
             C362 * C31277) *
                C107 +
            (C363 * C30270 - (C362 * C31569 + C361 * C30289) + C364 * C31277) *
                C108 +
            (C365 * C30270 - (C364 * C31569 + C363 * C30289) + C366 * C31277) *
                C109) *
               C31498 * C31588 +
           (((C113 * C935 + C31509 * C940) * C30289 +
             (C113 * C941 + C31509 * C950) * C31569 - C968 * C30270 -
             C969 * C31277) *
                C107 +
            (C968 * C30289 + C969 * C31569 - C970 * C30270 - C971 * C31277) *
                C108 +
            (C970 * C30289 + C971 * C31569 - C972 * C30270 - C973 * C31277) *
                C109) *
               C31498 * C31417) *
              C1087 +
          ((((C113 * C301 + C31509 * C316) * C30289 +
             (C113 * C317 + C31509 * C331) * C31569 - C367 * C30270 -
             C368 * C31277) *
                C107 +
            (C367 * C30289 + C368 * C31569 - C369 * C30270 - C370 * C31277) *
                C108 +
            (C369 * C30289 + C370 * C31569 - C371 * C30270 - C372 * C31277) *
                C109) *
               C31498 * C31588 +
           ((C1612 * C30270 -
             ((C113 * C1314 + C31509 * C1327) * C31569 +
              (C113 * C1300 + C31509 * C1315) * C30289) +
             C1613 * C31277) *
                C107 +
            (C1614 * C30270 - (C1613 * C31569 + C1612 * C30289) +
             C1615 * C31277) *
                C108 +
            ((C113 * C1599 + C31509 * C1600) * C30270 -
             (C1615 * C31569 + C1614 * C30289) +
             (C113 * C1601 + C31509 * C1602) * C31277) *
                C109) *
               C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C107 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31620) *
               C108 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31620) *
               C109) *
              C31498 * C31588 +
          ((C550 * C666 -
            ((C113 * C496 + C31509 * C515) * C659 +
             (C113 * C486 + C31509 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C31620) *
               C107 +
           (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
            C554 * C667 - C555 * C661 + C788 * C668 + C789 * C31620) *
               C108 +
           (C554 * C666 - (C553 * C659 + C552 * C665) + C555 * C660 -
            C788 * C667 - C789 * C661 + (C113 * C779 + C31509 * C780) * C668 +
            (C113 * C781 + C31509 * C782) * C31620) *
               C109) *
              C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30289 +
            (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
            C169 * C31277) *
               C107 +
           (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
               C108 +
           (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
               C109) *
              C31498 * C2299 +
          ((C550 * C30270 -
            ((C113 * C496 + C31509 * C515) * C31569 +
             (C113 * C486 + C31509 * C497) * C30289) +
            C551 * C31277) *
               C107 +
           (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
               C108 +
           (C554 * C30270 - (C553 * C31569 + C552 * C30289) + C555 * C31277) *
               C109) *
              C31498 * C2300 +
          (((C113 * C490 + C31509 * C505) * C30289 +
            (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
            C557 * C31277) *
               C107 +
           (C556 * C30289 + C557 * C31569 - C558 * C30270 - C559 * C31277) *
               C108 +
           (C558 * C30289 + C559 * C31569 - C560 * C30270 - C561 * C31277) *
               C109) *
              C31498 * C2301 +
          ((C2316 * C30270 -
            ((C113 * C2025 + C31509 * C2035) * C31569 +
             (C113 * C2017 + C31509 * C2026) * C30289) +
            C2317 * C31277) *
               C107 +
           (C2318 * C30270 - (C2317 * C31569 + C2316 * C30289) +
            C2319 * C31277) *
               C108 +
           ((C113 * C2303 + C31509 * C2304) * C30270 -
            (C2319 * C31569 + C2318 * C30289) +
            (C113 * C2305 + C31509 * C2306) * C31277) *
               C109) *
              C31498 * C31632) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C31294 * C4760 +
           (C5124 + C5125 - C5126 - C5127 + C5128 + C5129 - C5130 - C5131) *
               C31294 * C4761 +
           (C5132 + C5133 - C5134 - C5135 + C5136 + C5137 - C5138 - C5139) *
               C31294 * C4762) *
              C31588 +
          ((C550 * C666 -
            ((C113 * C496 + C31509 * C515) * C659 +
             (C113 * C486 + C31509 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C31620) *
               C31294 * C4760 +
           (C968 * C666 -
            ((C113 * C941 + C31509 * C950) * C659 +
             (C113 * C935 + C31509 * C940) * C665) +
            C969 * C660 - C970 * C667 - C971 * C661 + C972 * C668 +
            C973 * C31620) *
               C31294 * C4761 +
           (C1612 * C666 -
            ((C113 * C1314 + C31509 * C1327) * C659 +
             (C113 * C1300 + C31509 * C1315) * C665) +
            C1613 * C660 - C1614 * C667 - C1615 * C661 +
            (C113 * C1599 + C31509 * C1600) * C668 +
            (C113 * C1601 + C31509 * C1602) * C31620) *
               C31294 * C4762) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C31294 * C4760 +
            (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
               C31588 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C31294 * C4760 +
            (C6084 - (C6085 + C6086) + C6087) * C31294 * C4761 +
            C6105 * C4762) *
               C31417) *
              C1086 +
          (((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
            (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 +
            C5933 * C4762) *
               C31588 +
           ((C6086 + C6085 - C6084 - C6087) * C31294 * C4760 +
            (C6090 + C6089 - C6088 - C6091) * C31294 * C4761 +
            (C6092 + C6093 - C6102 - C6103) * C31294 * C4762) *
               C31417) *
              C1087 +
          ((C5932 * C4760 + (C5914 + C5913 - C5912 - C5915) * C31294 * C4761 +
            (C5916 + C5917 - C5928 - C5929) * C31294 * C4762) *
               C31588 +
           (C6105 * C4760 + (C6102 - (C6093 + C6092) + C6103) * C31294 * C4761 +
            ((C113 * C6079 + C31509 * C6080) * C30270 -
             ((C113 * C5754 + C31509 * C5759) * C31569 +
              (C113 * C5750 + C31509 * C5755) * C30289) +
             (C113 * C6081 + C31509 * C6082) * C31277) *
                C31294 * C4762) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30289 +
            (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
            C169 * C31277) *
               C31294 * C4760 +
           (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
              C2299 +
          ((C550 * C30270 -
            ((C113 * C496 + C31509 * C515) * C31569 +
             (C113 * C486 + C31509 * C497) * C30289) +
            C551 * C31277) *
               C31294 * C4760 +
           (C6084 - (C6085 + C6086) + C6087) * C31294 * C4761 + C6105 * C4762) *
              C2300 +
          (((C113 * C490 + C31509 * C505) * C30289 +
            (C113 * C506 + C31509 * C520) * C31569 - C556 * C30270 -
            C557 * C31277) *
               C31294 * C4760 +
           (C6662 + C6663 - C6664 - C6665) * C31294 * C4761 +
           (C6666 + C6667 - C6674 - C6675) * C31294 * C4762) *
              C2301 +
          ((C2316 * C30270 -
            ((C113 * C2025 + C31509 * C2035) * C31569 +
             (C113 * C2017 + C31509 * C2026) * C30289) +
            C2317 * C31277) *
               C31294 * C4760 +
           ((C113 * C2418 + C31509 * C2422) * C30270 -
            ((C113 * C2421 + C31509 * C2426) * C31569 +
             (C113 * C2417 + C31509 * C2420) * C30289) +
            (C113 * C2423 + C31509 * C2427) * C31277) *
               C31294 * C4761 +
           ((C113 * C6773 + C31509 * C6774) * C30270 -
            ((C113 * C6502 + C31509 * C6508) * C31569 +
             (C113 * C6499 + C31509 * C6503) * C30289) +
            (C113 * C6775 + C31509 * C6776) * C31277) *
               C31294 * C4762) *
              C31632) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C107 +
           (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
            C172 * C295 + C173 * C31609) *
               C108 +
           (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
            C174 * C295 + C175 * C31609) *
               C109) *
              C31498 * C31330 * C31653 +
          ((C361 * C294 -
            ((C113 * C307 + C31509 * C326) * C287 +
             (C113 * C297 + C31509 * C308) * C293) +
            C362 * C288 - C363 * C295 - C364 * C31609) *
               C107 +
           (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
            C365 * C295 - C366 * C31609) *
               C108 +
           (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
            (C113 * C300 + C31509 * C314) * C295 -
            (C113 * C315 + C31509 * C330) * C31609) *
               C109) *
              C31498 * C31330 * C31641 +
          (((C113 * C301 + C31509 * C316) * C293 +
            (C113 * C317 + C31509 * C331) * C287 - C367 * C294 - C368 * C288 +
            C369 * C295 + C370 * C31609) *
               C107 +
           (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
            C371 * C295 + C372 * C31609) *
               C108 +
           (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
            (C113 * C305 + C31509 * C324) * C295 +
            (C113 * C325 + C31509 * C335) * C31609) *
               C109) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C107 +
          (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 + C172 * C116 +
           C173 * C104 - C174 * C117 - C175 * C105 + C176 * C118 +
           C177 * C106) *
              C108 +
          (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 + C174 * C116 +
           C175 * C104 - C176 * C117 - C177 * C105 +
           (C113 * C125 + C31509 * C138) * C118 +
           (C113 * C139 + C31509 * C146) * C106) *
              C109) *
         C31498 * C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C107 +
           (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
            C172 * C1091 + C173 * C31609) *
               C108 +
           (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
            C174 * C1091 + C175 * C31609) *
               C109) *
              C31498 * C31330 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C31509 * C326) * C31650 +
             (C113 * C297 + C31509 * C308) * C1089) +
            C362 * C31637 - C363 * C1091 - C364 * C31609) *
               C107 +
           (C363 * C1090 - (C362 * C31650 + C361 * C1089) + C364 * C31637 -
            C365 * C1091 - C366 * C31609) *
               C108 +
           (C365 * C1090 - (C364 * C31650 + C363 * C1089) + C366 * C31637 -
            C678 * C1091 - C679 * C31609) *
               C109) *
              C31498 * C31330 * C1087 +
          (((C113 * C301 + C31509 * C316) * C1089 +
            (C113 * C317 + C31509 * C331) * C31650 - C367 * C1090 -
            C368 * C31637 + C369 * C1091 + C370 * C31609) *
               C107 +
           (C367 * C1089 + C368 * C31650 - C369 * C1090 - C370 * C31637 +
            C371 * C1091 + C372 * C31609) *
               C108 +
           (C369 * C1089 + C370 * C31650 - C371 * C1090 - C372 * C31637 +
            (C113 * C305 + C31509 * C324) * C1091 +
            (C113 * C325 + C31509 * C335) * C31609) *
               C109) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C107 +
           (C168 * C1160 + C169 * C31267) * C108 +
           (C170 * C1160 + C171 * C31267) * C109) *
              C31498 * C31330 * C1155 -
          ((C364 * C31267 + C363 * C1160) * C109 +
           (C362 * C31267 + C361 * C1160) * C108 +
           ((C113 * C307 + C31509 * C326) * C31267 +
            (C113 * C297 + C31509 * C308) * C1160) *
               C107) *
              C31498 * C31330 * C1156 +
          (((C113 * C301 + C31509 * C316) * C1160 +
            (C113 * C317 + C31509 * C331) * C31267) *
               C107 +
           (C367 * C1160 + C368 * C31267) * C108 +
           (C369 * C1160 + C370 * C31267) * C109) *
              C31498 * C31330 * C1157 -
          (((C113 * C1167 + C31509 * C1179) * C31267 +
            (C113 * C1161 + C31509 * C1168) * C1160) *
               C109 +
           ((C113 * C1169 + C31509 * C1180) * C31267 +
            (C113 * C1162 + C31509 * C1170) * C1160) *
               C108 +
           ((C113 * C1171 + C31509 * C1181) * C31267 +
            (C113 * C1163 + C31509 * C1172) * C1160) *
               C107) *
              C31498 * C31330 * C1158 +
          (((C113 * C1164 + C31509 * C1173) * C1160 +
            (C113 * C1174 + C31509 * C1182) * C31267) *
               C107 +
           ((C113 * C1165 + C31509 * C1175) * C1160 +
            (C113 * C1176 + C31509 * C1183) * C31267) *
               C108 +
           ((C113 * C1166 + C31509 * C1177) * C1160 +
            (C113 * C1178 + C31509 * C1184) * C31267) *
               C109) *
              C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C107 +
           (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
            C172 * C1091 + C173 * C31609) *
               C108 +
           (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
            C174 * C1091 + C175 * C31609) *
               C109) *
              C31498 * C1835 +
          ((C550 * C1090 -
            ((C113 * C496 + C31509 * C515) * C31650 +
             (C113 * C486 + C31509 * C497) * C1089) +
            C551 * C31637 - C552 * C1091 - C553 * C31609) *
               C107 +
           (C552 * C1090 - (C551 * C31650 + C550 * C1089) + C553 * C31637 -
            C554 * C1091 - C555 * C31609) *
               C108 +
           (C554 * C1090 - (C553 * C31650 + C552 * C1089) + C555 * C31637 -
            C788 * C1091 - C789 * C31609) *
               C109) *
              C31498 * C1836 +
          (((C113 * C490 + C31509 * C505) * C1089 +
            (C113 * C506 + C31509 * C520) * C31650 - C556 * C1090 -
            C557 * C31637 + C558 * C1091 + C559 * C31609) *
               C107 +
           (C556 * C1089 + C557 * C31650 - C558 * C1090 - C559 * C31637 +
            C560 * C1091 + C561 * C31609) *
               C108 +
           (C558 * C1089 + C559 * C31650 - C560 * C1090 - C561 * C31637 +
            (C113 * C494 + C31509 * C513) * C1091 +
            (C113 * C514 + C31509 * C524) * C31609) *
               C109) *
              C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C1835 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C1836 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C107 +
            (C556 * C1160 + C557 * C31267) * C108 +
            (C558 * C1160 + C559 * C31267) * C109) *
               C31498 * C31619) *
              C31653 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C1836 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C1835 -
           (((C113 * C1304 + C31509 * C1322) * C31267 +
             (C113 * C1295 + C31509 * C1305) * C1160) *
                C109 +
            ((C113 * C1306 + C31509 * C1323) * C31267 +
             (C113 * C1296 + C31509 * C1307) * C1160) *
                C108 +
            ((C113 * C1308 + C31509 * C1324) * C31267 +
             (C113 * C1297 + C31509 * C1309) * C1160) *
                C107) *
               C31498 * C31619) *
              C31641 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C1835 -
           ((C1615 * C31267 + C1614 * C1160) * C109 +
            (C1613 * C31267 + C1612 * C1160) * C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C1836 +
           (((C113 * C1301 + C31509 * C1316) * C1160 +
             (C113 * C1317 + C31509 * C1328) * C31267) *
                C107 +
            ((C113 * C1302 + C31509 * C1318) * C1160 +
             (C113 * C1319 + C31509 * C1329) * C31267) *
                C108 +
            ((C113 * C1303 + C31509 * C1320) * C1160 +
             (C113 * C1321 + C31509 * C1330) * C31267) *
                C109) *
               C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C31294 * C4760 +
          ((C113 * C297 + C31509 * C308) * C114 +
           (C113 * C307 + C31509 * C326) * C102 - C361 * C115 - C362 * C103 +
           C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 + C678 * C118 +
           C679 * C106) *
              C31294 * C4761 +
          ((C113 * C301 + C31509 * C316) * C114 +
           (C113 * C317 + C31509 * C331) * C102 - C367 * C115 - C368 * C103 +
           C369 * C116 + C370 * C104 - C371 * C117 - C372 * C105 +
           (C113 * C305 + C31509 * C324) * C118 +
           (C113 * C325 + C31509 * C335) * C106) *
              C31294 * C4762) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C31294 * C4760 +
           (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
           C4915 * C4762) *
              C31330 * C31653 +
          ((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C31294 * C4760 +
           (C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C31294 * C4761 +
           (C4890 - (C4908 + C4909) + C4895 - C4896 - C4897) * C31294 * C4762) *
              C31330 * C31641 +
          (C4915 * C4760 +
           (C4909 + C4908 - C4890 - C4895 + C4896 + C4897) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C293 +
            (C113 * C1174 + C31509 * C1182) * C287 -
            (C113 * C1165 + C31509 * C1175) * C294 -
            (C113 * C1176 + C31509 * C1183) * C288 +
            (C113 * C1166 + C31509 * C1177) * C295 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C31294 * C4760 +
           (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
           C5541 * C4762) *
              C31330 * C1086 +
          ((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C31294 * C4760 +
           (C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C31294 * C4761 +
           (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C31294 * C4762) *
              C31330 * C1087 +
          (C5541 * C4760 +
           (C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C1089 +
            (C113 * C1174 + C31509 * C1182) * C31650 -
            (C113 * C1165 + C31509 * C1175) * C1090 -
            (C113 * C1176 + C31509 * C1183) * C31637 +
            (C113 * C1166 + C31509 * C1177) * C1091 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C31294 * C4760 +
           (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
              C31330 * C1155 -
          (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
           (C5613 + C5612) * C31294 * C4760) *
              C31330 * C1156 +
          (C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
              C31330 * C1157 -
          ((C5636 + C5637) * C31294 * C4762 + (C5635 + C5634) * C31294 * C4761 +
           C5633 * C4760) *
              C31330 * C1158 +
          (C5639 * C4760 + (C5637 + C5636) * C31294 * C4761 +
           ((C113 * C5604 + C31509 * C5607) * C1160 +
            (C113 * C5608 + C31509 * C5610) * C31267) *
               C31294 * C4762) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C31294 * C4760 +
           (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
           C5541 * C4762) *
              C1835 +
          ((C550 * C1090 -
            ((C113 * C496 + C31509 * C515) * C31650 +
             (C113 * C486 + C31509 * C497) * C1089) +
            C551 * C31637 - C552 * C1091 - C553 * C31609) *
               C31294 * C4760 +
           (C968 * C1090 - (C5400 * C31650 + C5401 * C1089) + C969 * C31637 -
            C970 * C1091 - C971 * C31609) *
               C31294 * C4761 +
           (C1612 * C1090 - (C5402 * C31650 + C5403 * C1089) + C1613 * C31637 -
            C1614 * C1091 - C1615 * C31609) *
               C31294 * C4762) *
              C1836 +
          (((C113 * C490 + C31509 * C505) * C1089 +
            (C113 * C506 + C31509 * C520) * C31650 - C556 * C1090 -
            C557 * C31637 + C558 * C1091 + C559 * C31609) *
               C31294 * C4760 +
           (C5783 * C1089 + C5784 * C31650 - C2198 * C1090 - C2199 * C31637 +
            C2200 * C1091 + C2201 * C31609) *
               C31294 * C4761 +
           (C5785 * C1089 + C5786 * C31650 -
            (C113 * C1302 + C31509 * C1318) * C1090 -
            (C113 * C1319 + C31509 * C1329) * C31637 +
            (C113 * C1303 + C31509 * C1320) * C1091 +
            (C113 * C1321 + C31509 * C1330) * C31609) *
               C31294 * C4762) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C1835 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C1836 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C31619) *
              C31653 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C1836 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C1835 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C31619) *
              C31641 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C1835 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C1836 +
           (C5801 * C4760 + (C5799 + C5798) * C31294 * C4761 +
            ((C113 * C5751 + C31509 * C5756) * C1160 +
             (C113 * C5757 + C31509 * C5760) * C31267) *
                C31294 * C4762) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30299 +
             (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
             C169 * C31280 + C170 * C30305 + C171 * C2901) *
                C107 +
            (C168 * C30299 + C169 * C31272 - C170 * C30295 - C171 * C31280 +
             C172 * C30305 + C173 * C2901) *
                C108 +
            (C170 * C30299 + C171 * C31272 - C172 * C30295 - C173 * C31280 +
             C174 * C30305 + C175 * C2901) *
                C109) *
               C31498 * C3298 +
           ((C550 * C30295 -
             ((C113 * C496 + C31509 * C515) * C31272 +
              (C113 * C486 + C31509 * C497) * C30299) +
             C551 * C31280 - C552 * C30305 - C553 * C2901) *
                C107 +
            (C552 * C30295 - (C551 * C31272 + C550 * C30299) + C553 * C31280 -
             C554 * C30305 - C555 * C2901) *
                C108 +
            (C554 * C30295 - (C553 * C31272 + C552 * C30299) + C555 * C31280 -
             C788 * C30305 - C789 * C2901) *
                C109) *
               C31498 * C31417) *
              C31587 +
          (((C361 * C30295 -
             ((C113 * C307 + C31509 * C326) * C31272 +
              (C113 * C297 + C31509 * C308) * C30299) +
             C362 * C31280 - C363 * C30305 - C364 * C2901) *
                C107 +
            (C363 * C30295 - (C362 * C31272 + C361 * C30299) + C364 * C31280 -
             C365 * C30305 - C366 * C2901) *
                C108 +
            (C365 * C30295 - (C364 * C31272 + C363 * C30299) + C366 * C31280 -
             C678 * C30305 - C679 * C2901) *
                C109) *
               C31498 * C3298 +
           (((C113 * C935 + C31509 * C940) * C30299 +
             (C113 * C941 + C31509 * C950) * C31272 - C968 * C30295 -
             C969 * C31280 + C970 * C30305 + C971 * C2901) *
                C107 +
            (C968 * C30299 + C969 * C31272 - C970 * C30295 - C971 * C31280 +
             C972 * C30305 + C973 * C2901) *
                C108 +
            (C970 * C30299 + C971 * C31272 - C972 * C30295 - C973 * C31280 +
             (C113 * C939 + C31509 * C948) * C30305 +
             (C113 * C949 + C31509 * C954) * C2901) *
                C109) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30299 +
             (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
             C169 * C31280 + C170 * C30305 + C171 * C2901) *
                C31294 * C4760 +
            (C7404 + C7405 - C7406 - C7407 + C7408 + C7409) * C31294 * C4761 +
            C7427 * C4762) *
               C3298 +
           ((C550 * C30295 -
             ((C113 * C496 + C31509 * C515) * C31272 +
              (C113 * C486 + C31509 * C497) * C30299) +
             C551 * C31280 - C552 * C30305 - C553 * C2901) *
                C31294 * C4760 +
            (C7574 - (C7575 + C7576) + C7577 - C7578 - C7579) * C31294 * C4761 +
            (C7580 - (C7581 + C7582) + C7583 - C7584 - C7585) * C31294 *
                C4762) *
               C31417) *
              C31587 +
          (((C7406 - (C7405 + C7404) + C7407 - C7408 - C7409) * C31294 * C4760 +
            (C7412 - (C7411 + C7410) + C7413 - C7414 - C7415) * C31294 * C4761 +
            (C7416 - (C7417 + C7418) + C7419 - C7420 - C7421) * C31294 *
                C4762) *
               C3298 +
           ((C7576 + C7575 - C7574 - C7577 + C7578 + C7579) * C31294 * C4760 +
            (C7582 + C7581 - C7580 - C7583 + C7584 + C7585) * C31294 * C4761 +
            (C5787 * C30299 + C5788 * C31272 - C6099 * C30295 - C6100 * C31280 +
             (C113 * C1715 + C31509 * C1720) * C30305 +
             (C113 * C1721 + C31509 * C1724) * C2901) *
                C31294 * C4762) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
                C109) *
               C31498 * C31413 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31277) *
                C109) *
               C31498 * C31420 +
           (((C113 * C490 + C31509 * C505) * C2641 +
             (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
             C557 * C31277) *
                C107 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31277) *
                C108 +
            (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C31277) *
                C109) *
               C31498 * C3806) *
              C31587 +
          (((C361 * C2642 -
             ((C113 * C307 + C31509 * C326) * C2635 +
              (C113 * C297 + C31509 * C308) * C2641) +
             C362 * C31277) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
                C109) *
               C31498 * C31413 +
           (((C113 * C935 + C31509 * C940) * C2641 +
             (C113 * C941 + C31509 * C950) * C2635 - C968 * C2642 -
             C969 * C31277) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31277) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31277) *
                C109) *
               C31498 * C31420 +
           ((C2198 * C2642 -
             ((C113 * C1308 + C31509 * C1324) * C2635 +
              (C113 * C1297 + C31509 * C1309) * C2641) +
             C2199 * C31277) *
                C107 +
            (C2200 * C2642 - (C2199 * C2635 + C2198 * C2641) + C2201 * C31277) *
                C108 +
            ((C113 * C2185 + C31509 * C2186) * C2642 -
             (C2201 * C2635 + C2200 * C2641) +
             (C113 * C2187 + C31509 * C2188) * C31277) *
                C109) *
               C31498 * C3806) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C31294 * C4760 +
            (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
               C31413 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C31294 * C4760 +
            (C7278 - (C7279 + C7280) + C7281) * C31294 * C4761 +
            C7739 * C4762) *
               C31420 +
           (((C113 * C490 + C31509 * C505) * C2641 +
             (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
             C557 * C31277) *
                C31294 * C4760 +
            (C7286 + C7287 - C7288 - C7289) * C31294 * C4761 +
            (C7290 + C7291 - C7292 - C7293) * C31294 * C4762) *
               C3806) *
              C31587 +
          (((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
            (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 +
            C7131 * C4762) *
               C31413 +
           ((C7280 + C7279 - C7278 - C7281) * C31294 * C4760 +
            (C7284 + C7283 - C7282 - C7285) * C31294 * C4761 +
            (C7733 + C7734 - C7735 - C7736) * C31294 * C4762) *
               C31420 +
           ((C7288 - (C7287 + C7286) + C7289) * C31294 * C4760 +
            (C7292 - (C7291 + C7290) + C7293) * C31294 * C4761 +
            ((C113 * C6657 + C31509 * C6658) * C2642 -
             (C5789 * C2635 + C5790 * C2641) +
             (C113 * C6659 + C31509 * C6660) * C31277) *
                C31294 * C4762) *
               C3806) *
              C31377)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
                C109) *
               C31498 * C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31277) *
                C109) *
               C31498 * C31417) *
              C31653 +
          (((C361 * C2642 -
             ((C113 * C307 + C31509 * C326) * C2635 +
              (C113 * C297 + C31509 * C308) * C2641) +
             C362 * C31277) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
                C109) *
               C31498 * C3298 +
           (((C113 * C935 + C31509 * C940) * C2641 +
             (C113 * C941 + C31509 * C950) * C2635 - C968 * C2642 -
             C969 * C31277) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31277) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31277) *
                C109) *
               C31498 * C31417) *
              C31641 +
          ((((C113 * C301 + C31509 * C316) * C2641 +
             (C113 * C317 + C31509 * C331) * C2635 - C367 * C2642 -
             C368 * C31277) *
                C107 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31277) *
                C108 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31277) *
                C109) *
               C31498 * C3298 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C31509 * C1327) * C2635 +
              (C113 * C1300 + C31509 * C1315) * C2641) +
             C1613 * C31277) *
                C107 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C31277) *
                C108 +
            ((C113 * C1599 + C31509 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C31509 * C1602) * C31277) *
                C109) *
               C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C107 +
           (C168 * C2533 + C169 * C31659 - C170 * C2534 - C171 * C31652 +
            C172 * C2535 + C173 * C31639 - C174 * C2536 - C175 * C31620) *
               C108 +
           (C170 * C2533 + C171 * C31659 - C172 * C2534 - C173 * C31652 +
            C174 * C2535 + C175 * C31639 - C176 * C2536 - C177 * C31620) *
               C109) *
              C31498 * C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C31509 * C515) * C31659 +
             (C113 * C486 + C31509 * C497) * C2533) +
            C551 * C31652 - C552 * C2535 - C553 * C31639 + C554 * C2536 +
            C555 * C31620) *
               C107 +
           (C552 * C2534 - (C551 * C31659 + C550 * C2533) + C553 * C31652 -
            C554 * C2535 - C555 * C31639 + C788 * C2536 + C789 * C31620) *
               C108 +
           (C554 * C2534 - (C553 * C31659 + C552 * C2533) + C555 * C31652 -
            C788 * C2535 - C789 * C31639 +
            (C113 * C779 + C31509 * C780) * C2536 +
            (C113 * C781 + C31509 * C782) * C31620) *
               C109) *
              C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2641 +
            (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
            C169 * C31277) *
               C107 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) * C108 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
               C109) *
              C31498 * C31661 +
          ((C550 * C2642 -
            ((C113 * C496 + C31509 * C515) * C2635 +
             (C113 * C486 + C31509 * C497) * C2641) +
            C551 * C31277) *
               C107 +
           (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
               C108 +
           (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31277) *
               C109) *
              C31498 * C31658 +
          (((C113 * C490 + C31509 * C505) * C2641 +
            (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
            C557 * C31277) *
               C107 +
           (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C31277) * C108 +
           (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C31277) *
               C109) *
              C31498 * C31649 +
          ((C2316 * C2642 -
            ((C113 * C2025 + C31509 * C2035) * C2635 +
             (C113 * C2017 + C31509 * C2026) * C2641) +
            C2317 * C31277) *
               C107 +
           (C2318 * C2642 - (C2317 * C2635 + C2316 * C2641) + C2319 * C31277) *
               C108 +
           ((C113 * C2303 + C31509 * C2304) * C2642 -
            (C2319 * C2635 + C2318 * C2641) +
            (C113 * C2305 + C31509 * C2306) * C31277) *
               C109) *
              C31498 * C31632) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C31294 * C4760 +
           (C6994 + C6995 - C6996 - C6997 + C6998 + C6999 - C7000 - C7001) *
               C31294 * C4761 +
           (C7002 + C7003 - C7004 - C7005 + C7006 + C7007 - C7008 - C7009) *
               C31294 * C4762) *
              C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C31509 * C515) * C31659 +
             (C113 * C486 + C31509 * C497) * C2533) +
            C551 * C31652 - C552 * C2535 - C553 * C31639 + C554 * C2536 +
            C555 * C31620) *
               C31294 * C4760 +
           (C968 * C2534 - (C5400 * C31659 + C5401 * C2533) + C969 * C31652 -
            C970 * C2535 - C971 * C31639 + C972 * C2536 + C973 * C31620) *
               C31294 * C4761 +
           (C1612 * C2534 - (C5402 * C31659 + C5403 * C2533) + C1613 * C31652 -
            C1614 * C2535 - C1615 * C31639 +
            (C113 * C1599 + C31509 * C1600) * C2536 +
            (C113 * C1601 + C31509 * C1602) * C31620) *
               C31294 * C4762) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C31294 * C4760 +
            (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
               C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C31294 * C4760 +
            (C7278 - (C7279 + C7280) + C7281) * C31294 * C4761 +
            C7739 * C4762) *
               C31417) *
              C31653 +
          (((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
            (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 +
            C7131 * C4762) *
               C3298 +
           ((C7280 + C7279 - C7278 - C7281) * C31294 * C4760 +
            (C7284 + C7283 - C7282 - C7285) * C31294 * C4761 +
            (C7733 + C7734 - C7735 - C7736) * C31294 * C4762) *
               C31417) *
              C31641 +
          ((C7130 * C4760 + (C7118 + C7117 - C7116 - C7119) * C31294 * C4761 +
            (C7120 + C7121 - C7122 - C7123) * C31294 * C4762) *
               C3298 +
           (C7739 * C4760 + (C7735 - (C7734 + C7733) + C7736) * C31294 * C4761 +
            ((C113 * C6079 + C31509 * C6080) * C2642 -
             (C6214 * C2635 + C6215 * C2641) +
             (C113 * C6081 + C31509 * C6082) * C31277) *
                C31294 * C4762) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2641 +
            (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
            C169 * C31277) *
               C31294 * C4760 +
           (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
              C31661 +
          ((C550 * C2642 -
            ((C113 * C496 + C31509 * C515) * C2635 +
             (C113 * C486 + C31509 * C497) * C2641) +
            C551 * C31277) *
               C31294 * C4760 +
           (C7278 - (C7279 + C7280) + C7281) * C31294 * C4761 + C7739 * C4762) *
              C31658 +
          (((C113 * C490 + C31509 * C505) * C2641 +
            (C113 * C506 + C31509 * C520) * C2635 - C556 * C2642 -
            C557 * C31277) *
               C31294 * C4760 +
           (C7286 + C7287 - C7288 - C7289) * C31294 * C4761 +
           (C7290 + C7291 - C7292 - C7293) * C31294 * C4762) *
              C31649 +
          ((C2316 * C2642 -
            ((C113 * C2025 + C31509 * C2035) * C2635 +
             (C113 * C2017 + C31509 * C2026) * C2641) +
            C2317 * C31277) *
               C31294 * C4760 +
           ((C113 * C2418 + C31509 * C2422) * C2642 -
            (C6890 * C2635 + C6891 * C2641) +
            (C113 * C2423 + C31509 * C2427) * C31277) *
               C31294 * C4761 +
           ((C113 * C6773 + C31509 * C6774) * C2642 -
            (C6888 * C2635 + C6889 * C2641) +
            (C113 * C6775 + C31509 * C6776) * C31277) *
               C31294 * C4762) *
              C31632) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30299 +
            (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
            C169 * C31280 + C170 * C30305 + C171 * C2901) *
               C107 +
           (C168 * C30299 + C169 * C31272 - C170 * C30295 - C171 * C31280 +
            C172 * C30305 + C173 * C2901) *
               C108 +
           (C170 * C30299 + C171 * C31272 - C172 * C30295 - C173 * C31280 +
            C174 * C30305 + C175 * C2901) *
               C109) *
              C31498 * C31413 +
          ((C550 * C30295 -
            ((C113 * C496 + C31509 * C515) * C31272 +
             (C113 * C486 + C31509 * C497) * C30299) +
            C551 * C31280 - C552 * C30305 - C553 * C2901) *
               C107 +
           (C552 * C30295 - (C551 * C31272 + C550 * C30299) + C553 * C31280 -
            C554 * C30305 - C555 * C2901) *
               C108 +
           (C554 * C30295 - (C553 * C31272 + C552 * C30299) + C555 * C31280 -
            C788 * C30305 - C789 * C2901) *
               C109) *
              C31498 * C31420 +
          (((C113 * C490 + C31509 * C505) * C30299 +
            (C113 * C506 + C31509 * C520) * C31272 - C556 * C30295 -
            C557 * C31280 + C558 * C30305 + C559 * C2901) *
               C107 +
           (C556 * C30299 + C557 * C31272 - C558 * C30295 - C559 * C31280 +
            C560 * C30305 + C561 * C2901) *
               C108 +
           (C558 * C30299 + C559 * C31272 - C560 * C30295 - C561 * C31280 +
            (C113 * C494 + C31509 * C513) * C30305 +
            (C113 * C514 + C31509 * C524) * C2901) *
               C109) *
              C31498 * C3806) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30299 +
            (C113 * C127 + C31509 * C140) * C31272 - C168 * C30295 -
            C169 * C31280 + C170 * C30305 + C171 * C2901) *
               C31294 * C4760 +
           (C7404 + C7405 - C7406 - C7407 + C7408 + C7409) * C31294 * C4761 +
           C7427 * C4762) *
              C31413 +
          ((C550 * C30295 -
            ((C113 * C496 + C31509 * C515) * C31272 +
             (C113 * C486 + C31509 * C497) * C30299) +
            C551 * C31280 - C552 * C30305 - C553 * C2901) *
               C31294 * C4760 +
           (C7574 - (C7575 + C7576) + C7577 - C7578 - C7579) * C31294 * C4761 +
           (C7580 - (C7581 + C7582) + C7583 - C7584 - C7585) * C31294 * C4762) *
              C31420 +
          (((C113 * C490 + C31509 * C505) * C30299 +
            (C113 * C506 + C31509 * C520) * C31272 - C556 * C30295 -
            C557 * C31280 + C558 * C30305 + C559 * C2901) *
               C31294 * C4760 +
           (C5783 * C30299 + C5784 * C31272 - C2198 * C30295 - C2199 * C31280 +
            C2200 * C30305 + C2201 * C2901) *
               C31294 * C4761 +
           (C5785 * C30299 + C5786 * C31272 - C6672 * C30295 - C6673 * C31280 +
            (C113 * C1303 + C31509 * C1320) * C30305 +
            (C113 * C1321 + C31509 * C1330) * C2901) *
               C31294 * C4762) *
              C3806) *
         C31318) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C107 +
           (C168 * C2533 + C169 * C31659 - C170 * C2534 - C171 * C31652 +
            C172 * C2535 + C173 * C31639 - C174 * C2536 - C175 * C31620) *
               C108 +
           (C170 * C2533 + C171 * C31659 - C172 * C2534 - C173 * C31652 +
            C174 * C2535 + C175 * C31639 - C176 * C2536 - C177 * C31620) *
               C109) *
              C31498 * C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C31509 * C515) * C31659 +
             (C113 * C486 + C31509 * C497) * C2533) +
            C551 * C31652 - C552 * C2535 - C553 * C31639 + C554 * C2536 +
            C555 * C31620) *
               C107 +
           (C552 * C2534 - (C551 * C31659 + C550 * C2533) + C553 * C31652 -
            C554 * C2535 - C555 * C31639 + C788 * C2536 + C789 * C31620) *
               C108 +
           (C554 * C2534 - (C553 * C31659 + C552 * C2533) + C555 * C31652 -
            C788 * C2535 - C789 * C31639 +
            (C113 * C779 + C31509 * C780) * C2536 +
            (C113 * C781 + C31509 * C782) * C31620) *
               C109) *
              C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C31277) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C31277) *
                C109) *
               C31498 * C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C31277) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C31277) *
                C109) *
               C31498 * C31417) *
              C31653 +
          (((C361 * C2642 -
             ((C113 * C307 + C31509 * C326) * C2635 +
              (C113 * C297 + C31509 * C308) * C2641) +
             C362 * C31277) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C31277) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C31277) *
                C109) *
               C31498 * C3298 +
           (((C113 * C935 + C31509 * C940) * C2641 +
             (C113 * C941 + C31509 * C950) * C2635 - C968 * C2642 -
             C969 * C31277) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C31277) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C31277) *
                C109) *
               C31498 * C31417) *
              C31641 +
          ((((C113 * C301 + C31509 * C316) * C2641 +
             (C113 * C317 + C31509 * C331) * C2635 - C367 * C2642 -
             C368 * C31277) *
                C107 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C31277) *
                C108 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C31277) *
                C109) *
               C31498 * C3298 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C31509 * C1327) * C2635 +
              (C113 * C1300 + C31509 * C1315) * C2641) +
             C1613 * C31277) *
                C107 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C31277) *
                C108 +
            ((C113 * C1599 + C31509 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C31509 * C1602) * C31277) *
                C109) *
               C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C2533 +
            (C113 * C127 + C31509 * C140) * C31659 - C168 * C2534 -
            C169 * C31652 + C170 * C2535 + C171 * C31639 - C172 * C2536 -
            C173 * C31620) *
               C31294 * C4760 +
           (C6994 + C6995 - C6996 - C6997 + C6998 + C6999 - C7000 - C7001) *
               C31294 * C4761 +
           (C7002 + C7003 - C7004 - C7005 + C7006 + C7007 - C7008 - C7009) *
               C31294 * C4762) *
              C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C31509 * C515) * C31659 +
             (C113 * C486 + C31509 * C497) * C2533) +
            C551 * C31652 - C552 * C2535 - C553 * C31639 + C554 * C2536 +
            C555 * C31620) *
               C31294 * C4760 +
           (C968 * C2534 - (C5400 * C31659 + C5401 * C2533) + C969 * C31652 -
            C970 * C2535 - C971 * C31639 + C972 * C2536 + C973 * C31620) *
               C31294 * C4761 +
           (C1612 * C2534 - (C5402 * C31659 + C5403 * C2533) + C1613 * C31652 -
            C1614 * C2535 - C1615 * C31639 +
            (C113 * C1599 + C31509 * C1600) * C2536 +
            (C113 * C1601 + C31509 * C1602) * C31620) *
               C31294 * C4762) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C2641 +
             (C113 * C127 + C31509 * C140) * C2635 - C168 * C2642 -
             C169 * C31277) *
                C31294 * C4760 +
            (C7108 + C7109 - C7110 - C7111) * C31294 * C4761 + C7130 * C4762) *
               C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C31509 * C515) * C2635 +
              (C113 * C486 + C31509 * C497) * C2641) +
             C551 * C31277) *
                C31294 * C4760 +
            (C7278 - (C7279 + C7280) + C7281) * C31294 * C4761 +
            C7739 * C4762) *
               C31417) *
              C31653 +
          (((C7110 - (C7109 + C7108) + C7111) * C31294 * C4760 +
            (C7114 - (C7113 + C7112) + C7115) * C31294 * C4761 +
            C7131 * C4762) *
               C3298 +
           ((C7280 + C7279 - C7278 - C7281) * C31294 * C4760 +
            (C7284 + C7283 - C7282 - C7285) * C31294 * C4761 +
            (C7733 + C7734 - C7735 - C7736) * C31294 * C4762) *
               C31417) *
              C31641 +
          ((C7130 * C4760 + (C7118 + C7117 - C7116 - C7119) * C31294 * C4761 +
            (C7120 + C7121 - C7122 - C7123) * C31294 * C4762) *
               C3298 +
           (C7739 * C4760 + (C7735 - (C7734 + C7733) + C7736) * C31294 * C4761 +
            ((C113 * C6079 + C31509 * C6080) * C2642 -
             (C6214 * C2635 + C6215 * C2641) +
             (C113 * C6081 + C31509 * C6082) * C31277) *
                C31294 * C4762) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C107 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31620) *
               C108 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31620) *
               C109) *
              C31498 * C31330 * C31587 +
          ((C361 * C666 -
            ((C113 * C307 + C31509 * C326) * C659 +
             (C113 * C297 + C31509 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C31620) *
               C107 +
           (C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
            C365 * C667 - C366 * C661 + C678 * C668 + C679 * C31620) *
               C108 +
           (C365 * C666 - (C364 * C659 + C363 * C665) + C366 * C660 -
            C678 * C667 - C679 * C661 + (C113 * C669 + C31509 * C670) * C668 +
            (C113 * C671 + C31509 * C672) * C31620) *
               C109) *
              C31498 * C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30289 +
            (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
            C169 * C31277) *
               C107 +
           (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
               C108 +
           (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
               C109) *
              C31498 * C31330 * C1431 +
          ((C361 * C30270 -
            ((C113 * C307 + C31509 * C326) * C31569 +
             (C113 * C297 + C31509 * C308) * C30289) +
            C362 * C31277) *
               C107 +
           (C363 * C30270 - (C362 * C31569 + C361 * C30289) + C364 * C31277) *
               C108 +
           (C365 * C30270 - (C364 * C31569 + C363 * C30289) + C366 * C31277) *
               C109) *
              C31498 * C31330 * C1432 +
          (((C113 * C301 + C31509 * C316) * C30289 +
            (C113 * C317 + C31509 * C331) * C31569 - C367 * C30270 -
            C368 * C31277) *
               C107 +
           (C367 * C30289 + C368 * C31569 - C369 * C30270 - C370 * C31277) *
               C108 +
           (C369 * C30289 + C370 * C31569 - C371 * C30270 - C372 * C31277) *
               C109) *
              C31498 * C31330 * C1433 +
          ((C1450 * C30270 -
            ((C113 * C1171 + C31509 * C1181) * C31569 +
             (C113 * C1163 + C31509 * C1172) * C30289) +
            C1451 * C31277) *
               C107 +
           (C1452 * C30270 - (C1451 * C31569 + C1450 * C30289) +
            C1453 * C31277) *
               C108 +
           ((C113 * C1437 + C31509 * C1438) * C30270 -
            (C1453 * C31569 + C1452 * C30289) +
            (C113 * C1439 + C31509 * C1440) * C31277) *
               C109) *
              C31498 * C31330 * C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C31294 * C4760 +
           (C5124 + C5125 - C5126 - C5127 + C5128 + C5129 - C5130 - C5131) *
               C31294 * C4761 +
           (C5132 + C5133 - C5134 - C5135 + C5136 + C5137 - C5138 - C5139) *
               C31294 * C4762) *
              C31330 * C31587 +
          ((C5126 - (C5125 + C5124) + C5127 - C5128 - C5129 + C5130 + C5131) *
               C31294 * C4760 +
           (C5134 - (C5133 + C5132) + C5135 - C5136 - C5137 + C5138 + C5139) *
               C31294 * C4761 +
           (C1450 * C666 - (C4902 * C659 + C4903 * C665) + C1451 * C660 -
            C1452 * C667 - C1453 * C661 +
            (C113 * C1437 + C31509 * C1438) * C668 +
            (C113 * C1439 + C31509 * C1440) * C31620) *
               C31294 * C4762) *
              C31330 * C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C30289 +
            (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
            C169 * C31277) *
               C31294 * C4760 +
           (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
              C31330 * C1431 +
          ((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
           (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 + C5933 * C4762) *
              C31330 * C1432 +
          (C5932 * C4760 + (C5914 + C5913 - C5912 - C5915) * C31294 * C4761 +
           (C5916 + C5917 - C5928 - C5929) * C31294 * C4762) *
              C31330 * C1433 +
          (C5933 * C4760 + (C5928 - (C5917 + C5916) + C5929) * C31294 * C4761 +
           ((C113 * C5899 + C31509 * C5900) * C30270 -
            (C5630 * C31569 + C5631 * C30289) +
            (C113 * C5901 + C31509 * C5902) * C31277) *
               C31294 * C4762) *
              C31330 * C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C293 +
             (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31609) *
                C107 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C31609) *
                C108 +
            (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
             C174 * C295 + C175 * C31609) *
                C109) *
               C31498 * C31588 +
           ((C550 * C294 -
             ((C113 * C496 + C31509 * C515) * C287 +
              (C113 * C486 + C31509 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C31609) *
                C107 +
            (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
             C554 * C295 - C555 * C31609) *
                C108 +
            (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
             C788 * C295 - C789 * C31609) *
                C109) *
               C31498 * C31417) *
              C31587 +
          (((C361 * C294 -
             ((C113 * C307 + C31509 * C326) * C287 +
              (C113 * C297 + C31509 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C31609) *
                C107 +
            (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
             C365 * C295 - C366 * C31609) *
                C108 +
            (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
             C678 * C295 - C679 * C31609) *
                C109) *
               C31498 * C31588 +
           (((C113 * C935 + C31509 * C940) * C293 +
             (C113 * C941 + C31509 * C950) * C287 - C968 * C294 - C969 * C288 +
             C970 * C295 + C971 * C31609) *
                C107 +
            (C968 * C293 + C969 * C287 - C970 * C294 - C971 * C288 +
             C972 * C295 + C973 * C31609) *
                C108 +
            (C970 * C293 + C971 * C287 - C972 * C294 - C973 * C288 +
             (C113 * C939 + C31509 * C948) * C295 +
             (C113 * C949 + C31509 * C954) * C31609) *
                C109) *
               C31498 * C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C31588 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31417) *
              C1431 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31417 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C31588) *
              C1432 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C31588 -
           ((C1615 * C31267 + C1614 * C1160) * C109 +
            (C1613 * C31267 + C1612 * C1160) * C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C31417) *
              C1433 +
          ((((C113 * C1713 + C31509 * C1716) * C1160 +
             (C113 * C1717 + C31509 * C1722) * C31267) *
                C107 +
            ((C113 * C1714 + C31509 * C1718) * C1160 +
             (C113 * C1719 + C31509 * C1723) * C31267) *
                C108 +
            ((C113 * C1715 + C31509 * C1720) * C1160 +
             (C113 * C1721 + C31509 * C1724) * C31267) *
                C109) *
               C31498 * C31417 -
           ((C1453 * C31267 + C1452 * C1160) * C109 +
            (C1451 * C31267 + C1450 * C1160) * C108 +
            ((C113 * C1171 + C31509 * C1181) * C31267 +
             (C113 * C1163 + C31509 * C1172) * C1160) *
                C107) *
               C31498 * C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C293 +
             (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C31609) *
                C31294 * C4760 +
            (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
            C4915 * C4762) *
               C31588 +
           ((C550 * C294 -
             ((C113 * C496 + C31509 * C515) * C287 +
              (C113 * C486 + C31509 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C31609) *
                C31294 * C4760 +
            (C5384 - (C5404 + C5405) + C5389 - C5390 - C5391) * C31294 * C4761 +
            (C5392 - (C5406 + C5407) + C5397 - C5398 - C5399) * C31294 *
                C4762) *
               C31417) *
              C31587 +
          (((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C31294 * C4760 +
            (C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C31294 * C4761 +
            (C4890 - (C4908 + C4909) + C4895 - C4896 - C4897) * C31294 *
                C4762) *
               C31588 +
           ((C5405 + C5404 - C5384 - C5389 + C5390 + C5391) * C31294 * C4760 +
            (C5407 + C5406 - C5392 - C5397 + C5398 + C5399) * C31294 * C4761 +
            ((C113 * C1713 + C31509 * C1716) * C293 +
             (C113 * C1717 + C31509 * C1722) * C287 -
             (C113 * C1714 + C31509 * C1718) * C294 -
             (C113 * C1719 + C31509 * C1723) * C288 +
             (C113 * C1715 + C31509 * C1720) * C295 +
             (C113 * C1721 + C31509 * C1724) * C31609) *
                C31294 * C4762) *
               C31417) *
              C31377)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C31588 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31417) *
              C1431 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 + C6213 * C4762) *
               C31417 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C31588) *
              C1432 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C31588 -
           ((C6216 + C6217) * C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31417) *
              C1433 +
          ((C6213 * C4760 + (C6217 + C6216) * C31294 * C4761 +
            ((C113 * C6203 + C31509 * C6204) * C1160 +
             (C113 * C6205 + C31509 * C6206) * C31267) *
                C31294 * C4762) *
               C31417 -
           ((C5636 + C5637) * C31294 * C4762 +
            (C5635 + C5634) * C31294 * C4761 + C5633 * C4760) *
               C31588) *
              C31626)) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C107 +
           (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
            C172 * C295 + C173 * C31609) *
               C108 +
           (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
            C174 * C295 + C175 * C31609) *
               C109) *
              C31498 * C31330 * C31653 +
          ((C361 * C294 -
            ((C113 * C307 + C31509 * C326) * C287 +
             (C113 * C297 + C31509 * C308) * C293) +
            C362 * C288 - C363 * C295 - C364 * C31609) *
               C107 +
           (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
            C365 * C295 - C366 * C31609) *
               C108 +
           (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
            (C113 * C300 + C31509 * C314) * C295 -
            (C113 * C315 + C31509 * C330) * C31609) *
               C109) *
              C31498 * C31330 * C31641 +
          (((C113 * C301 + C31509 * C316) * C293 +
            (C113 * C317 + C31509 * C331) * C287 - C367 * C294 - C368 * C288 +
            C369 * C295 + C370 * C31609) *
               C107 +
           (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
            C371 * C295 + C372 * C31609) *
               C108 +
           (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
            (C113 * C305 + C31509 * C324) * C295 +
            (C113 * C325 + C31509 * C335) * C31609) *
               C109) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C107 +
          (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 + C172 * C116 +
           C173 * C104 - C174 * C117 - C175 * C105 + C176 * C118 +
           C177 * C106) *
              C108 +
          (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 + C174 * C116 +
           C175 * C104 - C176 * C117 - C177 * C105 +
           (C113 * C125 + C31509 * C138) * C118 +
           (C113 * C139 + C31509 * C146) * C106) *
              C109) *
         C31498 * C31330 * C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C107 +
           (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
            C172 * C295 + C173 * C31609) *
               C108 +
           (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
            C174 * C295 + C175 * C31609) *
               C109) *
              C31498 * C31654 +
          ((C550 * C294 -
            ((C113 * C496 + C31509 * C515) * C287 +
             (C113 * C486 + C31509 * C497) * C293) +
            C551 * C288 - C552 * C295 - C553 * C31609) *
               C107 +
           (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
            C554 * C295 - C555 * C31609) *
               C108 +
           (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
            (C113 * C489 + C31509 * C503) * C295 -
            (C113 * C504 + C31509 * C519) * C31609) *
               C109) *
              C31498 * C31643 +
          (((C113 * C490 + C31509 * C505) * C293 +
            (C113 * C506 + C31509 * C520) * C287 - C556 * C294 - C557 * C288 +
            C558 * C295 + C559 * C31609) *
               C107 +
           (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
            C560 * C295 + C561 * C31609) *
               C108 +
           (C558 * C293 + C559 * C287 - C560 * C294 - C561 * C288 +
            (C113 * C494 + C31509 * C513) * C295 +
            (C113 * C514 + C31509 * C524) * C31609) *
               C109) *
              C31498 * C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C107 +
           (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
            C172 * C1091 + C173 * C31609) *
               C108 +
           (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
            C174 * C1091 + C175 * C31609) *
               C109) *
              C31498 * C31330 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C31509 * C326) * C31650 +
             (C113 * C297 + C31509 * C308) * C1089) +
            C362 * C31637 - C363 * C1091 - C364 * C31609) *
               C107 +
           (C363 * C1090 - (C362 * C31650 + C361 * C1089) + C364 * C31637 -
            C365 * C1091 - C366 * C31609) *
               C108 +
           (C365 * C1090 - (C364 * C31650 + C363 * C1089) + C366 * C31637 -
            C678 * C1091 - C679 * C31609) *
               C109) *
              C31498 * C31330 * C1087 +
          (((C113 * C301 + C31509 * C316) * C1089 +
            (C113 * C317 + C31509 * C331) * C31650 - C367 * C1090 -
            C368 * C31637 + C369 * C1091 + C370 * C31609) *
               C107 +
           (C367 * C1089 + C368 * C31650 - C369 * C1090 - C370 * C31637 +
            C371 * C1091 + C372 * C31609) *
               C108 +
           (C369 * C1089 + C370 * C31650 - C371 * C1090 - C372 * C31637 +
            (C113 * C305 + C31509 * C324) * C1091 +
            (C113 * C325 + C31509 * C335) * C31609) *
               C109) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C107 +
           (C168 * C1160 + C169 * C31267) * C108 +
           (C170 * C1160 + C171 * C31267) * C109) *
              C31498 * C31330 * C1155 -
          ((C364 * C31267 + C363 * C1160) * C109 +
           (C362 * C31267 + C361 * C1160) * C108 +
           ((C113 * C307 + C31509 * C326) * C31267 +
            (C113 * C297 + C31509 * C308) * C1160) *
               C107) *
              C31498 * C31330 * C1156 +
          (((C113 * C301 + C31509 * C316) * C1160 +
            (C113 * C317 + C31509 * C331) * C31267) *
               C107 +
           (C367 * C1160 + C368 * C31267) * C108 +
           (C369 * C1160 + C370 * C31267) * C109) *
              C31498 * C31330 * C1157 -
          (((C113 * C1167 + C31509 * C1179) * C31267 +
            (C113 * C1161 + C31509 * C1168) * C1160) *
               C109 +
           ((C113 * C1169 + C31509 * C1180) * C31267 +
            (C113 * C1162 + C31509 * C1170) * C1160) *
               C108 +
           ((C113 * C1171 + C31509 * C1181) * C31267 +
            (C113 * C1163 + C31509 * C1172) * C1160) *
               C107) *
              C31498 * C31330 * C1158 +
          (((C113 * C1164 + C31509 * C1173) * C1160 +
            (C113 * C1174 + C31509 * C1182) * C31267) *
               C107 +
           ((C113 * C1165 + C31509 * C1175) * C1160 +
            (C113 * C1176 + C31509 * C1183) * C31267) *
               C108 +
           ((C113 * C1166 + C31509 * C1177) * C1160 +
            (C113 * C1178 + C31509 * C1184) * C31267) *
               C109) *
              C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C107 +
            (C168 * C1160 + C169 * C31267) * C108 +
            (C170 * C1160 + C171 * C31267) * C109) *
               C31498 * C31654 -
           ((C553 * C31267 + C552 * C1160) * C109 +
            (C551 * C31267 + C550 * C1160) * C108 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C107) *
               C31498 * C31643 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C107 +
            (C556 * C1160 + C557 * C31267) * C108 +
            (C558 * C1160 + C559 * C31267) * C109) *
               C31498 * C31619) *
              C1086 +
          ((((C113 * C935 + C31509 * C940) * C1160 +
             (C113 * C941 + C31509 * C950) * C31267) *
                C107 +
            (C968 * C1160 + C969 * C31267) * C108 +
            (C970 * C1160 + C971 * C31267) * C109) *
               C31498 * C31643 -
           ((C364 * C31267 + C363 * C1160) * C109 +
            (C362 * C31267 + C361 * C1160) * C108 +
            ((C113 * C307 + C31509 * C326) * C31267 +
             (C113 * C297 + C31509 * C308) * C1160) *
                C107) *
               C31498 * C31654 -
           (((C113 * C1304 + C31509 * C1322) * C31267 +
             (C113 * C1295 + C31509 * C1305) * C1160) *
                C109 +
            ((C113 * C1306 + C31509 * C1323) * C31267 +
             (C113 * C1296 + C31509 * C1307) * C1160) *
                C108 +
            ((C113 * C1308 + C31509 * C1324) * C31267 +
             (C113 * C1297 + C31509 * C1309) * C1160) *
                C107) *
               C31498 * C31619) *
              C1087 +
          ((((C113 * C301 + C31509 * C316) * C1160 +
             (C113 * C317 + C31509 * C331) * C31267) *
                C107 +
            (C367 * C1160 + C368 * C31267) * C108 +
            (C369 * C1160 + C370 * C31267) * C109) *
               C31498 * C31654 -
           (((C113 * C1310 + C31509 * C1325) * C31267 +
             (C113 * C1298 + C31509 * C1311) * C1160) *
                C109 +
            ((C113 * C1312 + C31509 * C1326) * C31267 +
             (C113 * C1299 + C31509 * C1313) * C1160) *
                C108 +
            ((C113 * C1314 + C31509 * C1327) * C31267 +
             (C113 * C1300 + C31509 * C1315) * C1160) *
                C107) *
               C31498 * C31643 +
           (((C113 * C1301 + C31509 * C1316) * C1160 +
             (C113 * C1317 + C31509 * C1328) * C31267) *
                C107 +
            ((C113 * C1302 + C31509 * C1318) * C1160 +
             (C113 * C1319 + C31509 * C1329) * C31267) *
                C108 +
            ((C113 * C1303 + C31509 * C1320) * C1160 +
             (C113 * C1321 + C31509 * C1330) * C31267) *
                C109) *
               C31498 * C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C31294 * C4760 +
          ((C113 * C297 + C31509 * C308) * C114 +
           (C113 * C307 + C31509 * C326) * C102 - C361 * C115 - C362 * C103 +
           C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 + C678 * C118 +
           C679 * C106) *
              C31294 * C4761 +
          ((C113 * C301 + C31509 * C316) * C114 +
           (C113 * C317 + C31509 * C331) * C102 - C367 * C115 - C368 * C103 +
           C369 * C116 + C370 * C104 - C371 * C117 - C372 * C105 +
           (C113 * C305 + C31509 * C324) * C118 +
           (C113 * C325 + C31509 * C335) * C106) *
              C31294 * C4762) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C31294 * C4760 +
           (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
           C4915 * C4762) *
              C31330 * C31653 +
          ((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C31294 * C4760 +
           (C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C31294 * C4761 +
           (C4890 - (C4908 + C4909) + C4895 - C4896 - C4897) * C31294 * C4762) *
              C31330 * C31641 +
          (C4915 * C4760 +
           (C4909 + C4908 - C4890 - C4895 + C4896 + C4897) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C293 +
            (C113 * C1174 + C31509 * C1182) * C287 -
            (C113 * C1165 + C31509 * C1175) * C294 -
            (C113 * C1176 + C31509 * C1183) * C288 +
            (C113 * C1166 + C31509 * C1177) * C295 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C31294 * C4760 +
           (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
           C4915 * C4762) *
              C31654 +
          ((C550 * C294 -
            ((C113 * C496 + C31509 * C515) * C287 +
             (C113 * C486 + C31509 * C497) * C293) +
            C551 * C288 - C552 * C295 - C553 * C31609) *
               C31294 * C4760 +
           (C968 * C294 -
            ((C113 * C941 + C31509 * C950) * C287 +
             (C113 * C935 + C31509 * C940) * C293) +
            C969 * C288 - C970 * C295 - C971 * C31609) *
               C31294 * C4761 +
           (C1612 * C294 -
            ((C113 * C1314 + C31509 * C1327) * C287 +
             (C113 * C1300 + C31509 * C1315) * C293) +
            C1613 * C288 - C1614 * C295 - C1615 * C31609) *
               C31294 * C4762) *
              C31643 +
          (((C113 * C490 + C31509 * C505) * C293 +
            (C113 * C506 + C31509 * C520) * C287 - C556 * C294 - C557 * C288 +
            C558 * C295 + C559 * C31609) *
               C31294 * C4760 +
           ((C113 * C1297 + C31509 * C1309) * C293 +
            (C113 * C1308 + C31509 * C1324) * C287 - C2198 * C294 -
            C2199 * C288 + C2200 * C295 + C2201 * C31609) *
               C31294 * C4761 +
           ((C113 * C1301 + C31509 * C1316) * C293 +
            (C113 * C1317 + C31509 * C1328) * C287 -
            (C113 * C1302 + C31509 * C1318) * C294 -
            (C113 * C1319 + C31509 * C1329) * C288 +
            (C113 * C1303 + C31509 * C1320) * C295 +
            (C113 * C1321 + C31509 * C1330) * C31609) *
               C31294 * C4762) *
              C31619) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C31294 * C4760 +
           (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
           C5541 * C4762) *
              C31330 * C1086 +
          ((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C31294 * C4760 +
           (C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C31294 * C4761 +
           (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C31294 * C4762) *
              C31330 * C1087 +
          (C5541 * C4760 +
           (C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C1089 +
            (C113 * C1174 + C31509 * C1182) * C31650 -
            (C113 * C1165 + C31509 * C1175) * C1090 -
            (C113 * C1176 + C31509 * C1183) * C31637 +
            (C113 * C1166 + C31509 * C1177) * C1091 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C31294 * C4760 +
           (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
              C31330 * C1155 -
          (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
           (C5613 + C5612) * C31294 * C4760) *
              C31330 * C1156 +
          (C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
              C31330 * C1157 -
          ((C5636 + C5637) * C31294 * C4762 + (C5635 + C5634) * C31294 * C4761 +
           C5633 * C4760) *
              C31330 * C1158 +
          (C5639 * C4760 + (C5637 + C5636) * C31294 * C4761 +
           ((C113 * C5604 + C31509 * C5607) * C1160 +
            (C113 * C5608 + C31509 * C5610) * C31267) *
               C31294 * C4762) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C1160 +
             (C113 * C127 + C31509 * C140) * C31267) *
                C31294 * C4760 +
            (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
               C31654 -
           (C5791 * C4762 + (C5764 + C5765) * C31294 * C4761 +
            ((C113 * C496 + C31509 * C515) * C31267 +
             (C113 * C486 + C31509 * C497) * C1160) *
                C31294 * C4760) *
               C31643 +
           (((C113 * C490 + C31509 * C505) * C1160 +
             (C113 * C506 + C31509 * C520) * C31267) *
                C31294 * C4760 +
            (C5792 + C5793) * C31294 * C4761 + C5801 * C4762) *
               C31619) *
              C1086 +
          (((C5765 + C5764) * C31294 * C4760 +
            (C5763 + C5762) * C31294 * C4761 +
            (C5796 + C5797) * C31294 * C4762) *
               C31643 -
           (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
            (C5613 + C5612) * C31294 * C4760) *
               C31654 -
           ((C5798 + C5799) * C31294 * C4762 +
            (C5795 + C5794) * C31294 * C4761 +
            (C5793 + C5792) * C31294 * C4760) *
               C31619) *
              C1087 +
          ((C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
               C31654 -
           (((C113 * C5754 + C31509 * C5759) * C31267 +
             (C113 * C5750 + C31509 * C5755) * C1160) *
                C31294 * C4762 +
            (C5797 + C5796) * C31294 * C4761 + C5791 * C4760) *
               C31643 +
           (C5801 * C4760 + (C5799 + C5798) * C31294 * C4761 +
            ((C113 * C5751 + C31509 * C5756) * C1160 +
             (C113 * C5757 + C31509 * C5760) * C31267) *
                C31294 * C4762) *
               C31619) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C107 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C31620) *
               C108 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C31620) *
               C109) *
              C31498 * C31588 +
          ((C550 * C666 -
            ((C113 * C496 + C31509 * C515) * C659 +
             (C113 * C486 + C31509 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C31620) *
               C107 +
           (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
            C554 * C667 - C555 * C661 + C788 * C668 + C789 * C31620) *
               C108 +
           (C554 * C666 - (C553 * C659 + C552 * C665) + C555 * C660 -
            C788 * C667 - C789 * C661 + (C113 * C779 + C31509 * C780) * C668 +
            (C113 * C781 + C31509 * C782) * C31620) *
               C109) *
              C31498 * C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C107 +
            (C168 * C30289 + C169 * C31569 - C170 * C30270 - C171 * C31277) *
                C108 +
            (C170 * C30289 + C171 * C31569 - C172 * C30270 - C173 * C31277) *
                C109) *
               C31498 * C31588 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C107 +
            (C552 * C30270 - (C551 * C31569 + C550 * C30289) + C553 * C31277) *
                C108 +
            (C554 * C30270 - (C553 * C31569 + C552 * C30289) + C555 * C31277) *
                C109) *
               C31498 * C31417) *
              C1086 +
          (((C361 * C30270 -
             ((C113 * C307 + C31509 * C326) * C31569 +
              (C113 * C297 + C31509 * C308) * C30289) +
             C362 * C31277) *
                C107 +
            (C363 * C30270 - (C362 * C31569 + C361 * C30289) + C364 * C31277) *
                C108 +
            (C365 * C30270 - (C364 * C31569 + C363 * C30289) + C366 * C31277) *
                C109) *
               C31498 * C31588 +
           (((C113 * C935 + C31509 * C940) * C30289 +
             (C113 * C941 + C31509 * C950) * C31569 - C968 * C30270 -
             C969 * C31277) *
                C107 +
            (C968 * C30289 + C969 * C31569 - C970 * C30270 - C971 * C31277) *
                C108 +
            (C970 * C30289 + C971 * C31569 - C972 * C30270 - C973 * C31277) *
                C109) *
               C31498 * C31417) *
              C1087 +
          ((((C113 * C301 + C31509 * C316) * C30289 +
             (C113 * C317 + C31509 * C331) * C31569 - C367 * C30270 -
             C368 * C31277) *
                C107 +
            (C367 * C30289 + C368 * C31569 - C369 * C30270 - C370 * C31277) *
                C108 +
            (C369 * C30289 + C370 * C31569 - C371 * C30270 - C372 * C31277) *
                C109) *
               C31498 * C31588 +
           ((C1612 * C30270 -
             ((C113 * C1314 + C31509 * C1327) * C31569 +
              (C113 * C1300 + C31509 * C1315) * C30289) +
             C1613 * C31277) *
                C107 +
            (C1614 * C30270 - (C1613 * C31569 + C1612 * C30289) +
             C1615 * C31277) *
                C108 +
            ((C113 * C1599 + C31509 * C1600) * C30270 -
             (C1615 * C31569 + C1614 * C30289) +
             (C113 * C1601 + C31509 * C1602) * C31277) *
                C109) *
               C31498 * C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C665 +
            (C113 * C127 + C31509 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C31620) *
               C31294 * C4760 +
           (C5124 + C5125 - C5126 - C5127 + C5128 + C5129 - C5130 - C5131) *
               C31294 * C4761 +
           (C5132 + C5133 - C5134 - C5135 + C5136 + C5137 - C5138 - C5139) *
               C31294 * C4762) *
              C31588 +
          ((C550 * C666 -
            ((C113 * C496 + C31509 * C515) * C659 +
             (C113 * C486 + C31509 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C31620) *
               C31294 * C4760 +
           (C968 * C666 -
            ((C113 * C941 + C31509 * C950) * C659 +
             (C113 * C935 + C31509 * C940) * C665) +
            C969 * C660 - C970 * C667 - C971 * C661 + C972 * C668 +
            C973 * C31620) *
               C31294 * C4761 +
           (C1612 * C666 -
            ((C113 * C1314 + C31509 * C1327) * C659 +
             (C113 * C1300 + C31509 * C1315) * C665) +
            C1613 * C660 - C1614 * C667 - C1615 * C661 +
            (C113 * C1599 + C31509 * C1600) * C668 +
            (C113 * C1601 + C31509 * C1602) * C31620) *
               C31294 * C4762) *
              C31417) *
         C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C31509 * C126) * C30289 +
             (C113 * C127 + C31509 * C140) * C31569 - C168 * C30270 -
             C169 * C31277) *
                C31294 * C4760 +
            (C5904 + C5905 - C5906 - C5907) * C31294 * C4761 + C5932 * C4762) *
               C31588 +
           ((C550 * C30270 -
             ((C113 * C496 + C31509 * C515) * C31569 +
              (C113 * C486 + C31509 * C497) * C30289) +
             C551 * C31277) *
                C31294 * C4760 +
            (C6084 - (C6085 + C6086) + C6087) * C31294 * C4761 +
            C6105 * C4762) *
               C31417) *
              C1086 +
          (((C5906 - (C5905 + C5904) + C5907) * C31294 * C4760 +
            (C5910 - (C5909 + C5908) + C5911) * C31294 * C4761 +
            C5933 * C4762) *
               C31588 +
           ((C6086 + C6085 - C6084 - C6087) * C31294 * C4760 +
            (C6090 + C6089 - C6088 - C6091) * C31294 * C4761 +
            (C6092 + C6093 - C6102 - C6103) * C31294 * C4762) *
               C31417) *
              C1087 +
          ((C5932 * C4760 + (C5914 + C5913 - C5912 - C5915) * C31294 * C4761 +
            (C5916 + C5917 - C5928 - C5929) * C31294 * C4762) *
               C31588 +
           (C6105 * C4760 + (C6102 - (C6093 + C6092) + C6103) * C31294 * C4761 +
            ((C113 * C6079 + C31509 * C6080) * C30270 -
             ((C113 * C5754 + C31509 * C5759) * C31569 +
              (C113 * C5750 + C31509 * C5755) * C30289) +
             (C113 * C6081 + C31509 * C6082) * C31277) *
                C31294 * C4762) *
               C31417) *
              C31616)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C107 +
          (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 + C172 * C116 +
           C173 * C104 - C174 * C117 - C175 * C105 + C176 * C118 +
           C177 * C106) *
              C108 +
          (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 + C174 * C116 +
           C175 * C104 - C176 * C117 - C177 * C105 +
           (C113 * C125 + C31509 * C138) * C118 +
           (C113 * C139 + C31509 * C146) * C106) *
              C109) *
         C31498 * C31330 * C31318) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C107 +
           (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
            C172 * C295 + C173 * C31609) *
               C108 +
           (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
            C174 * C295 + C175 * C31609) *
               C109) *
              C31498 * C31330 * C31653 +
          ((C361 * C294 -
            ((C113 * C307 + C31509 * C326) * C287 +
             (C113 * C297 + C31509 * C308) * C293) +
            C362 * C288 - C363 * C295 - C364 * C31609) *
               C107 +
           (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
            C365 * C295 - C366 * C31609) *
               C108 +
           (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
            (C113 * C300 + C31509 * C314) * C295 -
            (C113 * C315 + C31509 * C330) * C31609) *
               C109) *
              C31498 * C31330 * C31641 +
          (((C113 * C301 + C31509 * C316) * C293 +
            (C113 * C317 + C31509 * C331) * C287 - C367 * C294 - C368 * C288 +
            C369 * C295 + C370 * C31609) *
               C107 +
           (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
            C371 * C295 + C372 * C31609) *
               C108 +
           (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
            (C113 * C305 + C31509 * C324) * C295 +
            (C113 * C325 + C31509 * C335) * C31609) *
               C109) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C107 +
           (C168 * C1089 + C169 * C31650 - C170 * C1090 - C171 * C31637 +
            C172 * C1091 + C173 * C31609) *
               C108 +
           (C170 * C1089 + C171 * C31650 - C172 * C1090 - C173 * C31637 +
            C174 * C1091 + C175 * C31609) *
               C109) *
              C31498 * C31330 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C31509 * C326) * C31650 +
             (C113 * C297 + C31509 * C308) * C1089) +
            C362 * C31637 - C363 * C1091 - C364 * C31609) *
               C107 +
           (C363 * C1090 - (C362 * C31650 + C361 * C1089) + C364 * C31637 -
            C365 * C1091 - C366 * C31609) *
               C108 +
           (C365 * C1090 - (C364 * C31650 + C363 * C1089) + C366 * C31637 -
            C678 * C1091 - C679 * C31609) *
               C109) *
              C31498 * C31330 * C1087 +
          (((C113 * C301 + C31509 * C316) * C1089 +
            (C113 * C317 + C31509 * C331) * C31650 - C367 * C1090 -
            C368 * C31637 + C369 * C1091 + C370 * C31609) *
               C107 +
           (C367 * C1089 + C368 * C31650 - C369 * C1090 - C370 * C31637 +
            C371 * C1091 + C372 * C31609) *
               C108 +
           (C369 * C1089 + C370 * C31650 - C371 * C1090 - C372 * C31637 +
            (C113 * C305 + C31509 * C324) * C1091 +
            (C113 * C325 + C31509 * C335) * C31609) *
               C109) *
              C31498 * C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C107 +
           (C168 * C1160 + C169 * C31267) * C108 +
           (C170 * C1160 + C171 * C31267) * C109) *
              C31498 * C31330 * C1155 -
          ((C364 * C31267 + C363 * C1160) * C109 +
           (C362 * C31267 + C361 * C1160) * C108 +
           ((C113 * C307 + C31509 * C326) * C31267 +
            (C113 * C297 + C31509 * C308) * C1160) *
               C107) *
              C31498 * C31330 * C1156 +
          (((C113 * C301 + C31509 * C316) * C1160 +
            (C113 * C317 + C31509 * C331) * C31267) *
               C107 +
           (C367 * C1160 + C368 * C31267) * C108 +
           (C369 * C1160 + C370 * C31267) * C109) *
              C31498 * C31330 * C1157 -
          (((C113 * C1167 + C31509 * C1179) * C31267 +
            (C113 * C1161 + C31509 * C1168) * C1160) *
               C109 +
           ((C113 * C1169 + C31509 * C1180) * C31267 +
            (C113 * C1162 + C31509 * C1170) * C1160) *
               C108 +
           ((C113 * C1171 + C31509 * C1181) * C31267 +
            (C113 * C1163 + C31509 * C1172) * C1160) *
               C107) *
              C31498 * C31330 * C1158 +
          (((C113 * C1164 + C31509 * C1173) * C1160 +
            (C113 * C1174 + C31509 * C1182) * C31267) *
               C107 +
           ((C113 * C1165 + C31509 * C1175) * C1160 +
            (C113 * C1176 + C31509 * C1183) * C31267) *
               C108 +
           ((C113 * C1166 + C31509 * C1177) * C1160 +
            (C113 * C1178 + C31509 * C1184) * C31267) *
               C109) *
              C31498 * C31330 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C31509 * C126) * C114 +
           (C113 * C127 + C31509 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C31294 * C4760 +
          ((C113 * C297 + C31509 * C308) * C114 +
           (C113 * C307 + C31509 * C326) * C102 - C361 * C115 - C362 * C103 +
           C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 + C678 * C118 +
           C679 * C106) *
              C31294 * C4761 +
          ((C113 * C301 + C31509 * C316) * C114 +
           (C113 * C317 + C31509 * C331) * C102 - C367 * C115 - C368 * C103 +
           C369 * C116 + C370 * C104 - C371 * C117 - C372 * C105 +
           (C113 * C305 + C31509 * C324) * C118 +
           (C113 * C325 + C31509 * C335) * C106) *
              C31294 * C4762) *
         C31330 * C31318) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C293 +
            (C113 * C127 + C31509 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C31609) *
               C31294 * C4760 +
           (C4904 + C4905 - C4878 - C4879 + C4880 + C4881) * C31294 * C4761 +
           C4915 * C4762) *
              C31330 * C31653 +
          ((C4878 - (C4905 + C4904) + C4879 - C4880 - C4881) * C31294 * C4760 +
           (C4886 - (C4907 + C4906) + C4887 - C4888 - C4889) * C31294 * C4761 +
           (C4890 - (C4908 + C4909) + C4895 - C4896 - C4897) * C31294 * C4762) *
              C31330 * C31641 +
          (C4915 * C4760 +
           (C4909 + C4908 - C4890 - C4895 + C4896 + C4897) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C293 +
            (C113 * C1174 + C31509 * C1182) * C287 -
            (C113 * C1165 + C31509 * C1175) * C294 -
            (C113 * C1176 + C31509 * C1183) * C288 +
            (C113 * C1166 + C31509 * C1177) * C295 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1089 +
            (C113 * C127 + C31509 * C140) * C31650 - C168 * C1090 -
            C169 * C31637 + C170 * C1091 + C171 * C31609) *
               C31294 * C4760 +
           (C5518 + C5519 - C5520 - C5521 + C5522 + C5523) * C31294 * C4761 +
           C5541 * C4762) *
              C31330 * C1086 +
          ((C5520 - (C5519 + C5518) + C5521 - C5522 - C5523) * C31294 * C4760 +
           (C5526 - (C5525 + C5524) + C5527 - C5528 - C5529) * C31294 * C4761 +
           (C5530 - (C5531 + C5532) + C5533 - C5534 - C5535) * C31294 * C4762) *
              C31330 * C1087 +
          (C5541 * C4760 +
           (C5532 + C5531 - C5530 - C5533 + C5534 + C5535) * C31294 * C4761 +
           ((C113 * C1164 + C31509 * C1173) * C1089 +
            (C113 * C1174 + C31509 * C1182) * C31650 -
            (C113 * C1165 + C31509 * C1175) * C1090 -
            (C113 * C1176 + C31509 * C1183) * C31637 +
            (C113 * C1166 + C31509 * C1177) * C1091 +
            (C113 * C1178 + C31509 * C1184) * C31609) *
               C31294 * C4762) *
              C31330 * C31616)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C31509 * C126) * C1160 +
            (C113 * C127 + C31509 * C140) * C31267) *
               C31294 * C4760 +
           (C5612 + C5613) * C31294 * C4761 + C5632 * C4762) *
              C31330 * C1155 -
          (C5633 * C4762 + (C5615 + C5614) * C31294 * C4761 +
           (C5613 + C5612) * C31294 * C4760) *
              C31330 * C1156 +
          (C5632 * C4760 + (C5617 + C5616) * C31294 * C4761 + C5639 * C4762) *
              C31330 * C1157 -
          ((C5636 + C5637) * C31294 * C4762 + (C5635 + C5634) * C31294 * C4761 +
           C5633 * C4760) *
              C31330 * C1158 +
          (C5639 * C4760 + (C5637 + C5636) * C31294 * C4761 +
           ((C113 * C5604 + C31509 * C5607) * C1160 +
            (C113 * C5608 + C31509 * C5610) * C31267) *
               C31294 * C4762) *
              C31330 * C1159)) /
            (p * q * std::sqrt(p + q));
}
