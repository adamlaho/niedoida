/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pddp_AC_yx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1221_13_21(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49697 = 0 * ce;
    const double C49696 = ce * de;
    const double C49695 = 0 * de;
    const double C49694 = ce + de;
    const double C49693 = 0 * de;
    const double C49692 = xC - xD;
    const double C49761 = ae * be;
    const double C49760 = ae + be;
    const double C49759 = 0 * be;
    const double C49758 = yA - yB;
    const double C49789 = 0 * ae;
    const double C49784 = 0 * be;
    const double C49823 = yP - yQ;
    const double C49822 = p + q;
    const double C49821 = p * q;
    const double C49820 = xP - xQ;
    const double C49828 = bs[3];
    const double C49839 = bs[4];
    const double C49847 = bs[5];
    const double C49866 = bs[6];
    const double C49896 = bs[7];
    const double C50021 = zP - zQ;
    const double C50238 = bs[2];
    const double C122 = bs[0];
    const double C50621 = xA - xB;
    const double C50650 = yC - yD;
    const double C50655 = zC - zD;
    const double C50759 = zA - zB;
    const double C49702 = C49697 / C49694;
    const double C49699 = 2 * C49694;
    const double C49698 = std::pow(C49694, 2);
    const double C49701 = C49696 * C49692;
    const double C49700 = C49692 * C49695;
    const double C50602 = C49692 * de;
    const double C50601 = C49692 * ce;
    const double C50600 = std::pow(C49692, 2);
    const double C49762 = std::pow(C49760, 2);
    const double C49785 = 2 * C49760;
    const double C49831 = C49694 * C49760;
    const double C143 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (yP - yQ) * (xP - xQ) * ae * ce) /
                         C49694) /
                        C49760;
    const double C49763 = C49761 * C49758;
    const double C49786 = C49758 * C49759;
    const double C50744 = std::pow(C49758, 2);
    const double C50796 = C49758 * be;
    const double C50795 = C49758 * ae;
    const double C49794 = C49789 / C49760;
    const double C49829 = C49823 * ae;
    const double C50048 = std::pow(C49823, 2);
    const double C49824 = 2 * C49821;
    const double C49830 = C49823 * C49820;
    const double C49849 = std::pow(C49820, 2);
    const double C49930 = C49820 * ce;
    const double C50035 = std::pow(C50021, 2);
    const double C50624 = C50621 * be;
    const double C50623 = C50621 * ae;
    const double C50622 = std::pow(C50621, 2);
    const double C50664 = std::pow(C50650, 2);
    const double C50678 = C50650 * de;
    const double C50677 = C50650 * ce;
    const double C50690 = std::pow(C50655, 2);
    const double C50702 = C50655 * de;
    const double C50701 = C50655 * ce;
    const double C50760 = std::pow(C50759, 2);
    const double C50824 = C50759 * be;
    const double C50823 = C50759 * ae;
    const double C50610 = std::pow(C49699, -1);
    const double C50892 = std::pow(C49699, -2);
    const double C49703 = 2 * C49698;
    const double C50884 = 4 * C49698;
    const double C49704 = C49700 / C49694;
    const double C50603 = C50600 * C49696;
    const double C49764 = 2 * C49762;
    const double C50891 = 4 * C49762;
    const double C50632 = std::pow(C49785, -1);
    const double C50906 = std::pow(C49785, -2);
    const double C49791 = C49786 / C49760;
    const double C50745 = C50744 * C49761;
    const double C49833 = C49828 * C49829;
    const double C49841 = C49839 * C49829;
    const double C49852 = C49847 * C49829;
    const double C49872 = C49866 * C49829;
    const double C49904 = C49896 * C49829;
    const double C49825 = C49824 / C49822;
    const double C129 = (-(bs[1] * C49829 * C49824) / C49822) / C49760;
    const double C123 = -(C49820 * bs[1] * C49824) / C49822;
    const double C287 = -(C49823 * bs[1] * C49824) / C49822;
    const double C435 = -(C50021 * bs[1] * C49824) / C49822;
    const double C49834 = C49830 * ae;
    const double C49933 = C49839 * C49930;
    const double C49937 = C49847 * C49930;
    const double C49947 = C49866 * C49930;
    const double C49970 = C49828 * C49930;
    const double C49993 = C49896 * C49930;
    const double C130 = (bs[1] * C49930 * C49824) / (C49822 * C49694);
    const double C50625 = C50622 * C49761;
    const double C50665 = C50664 * C49696;
    const double C50691 = C50690 * C49696;
    const double C50761 = C50760 * C49761;
    const double C49709 = C49695 / C49703;
    const double C49707 = C49693 / C49703;
    const double C49706 = 0 - C49704;
    const double C50604 = C50603 / C49694;
    const double C49788 = C49759 / C49764;
    const double C49792 = C49784 / C49764;
    const double C49795 = 0 - C49791;
    const double C50746 = C50745 / C49760;
    const double C49827 = -C49825;
    const double C49838 = std::pow(C49825, 4);
    const double C49865 = std::pow(C49825, 6);
    const double C144 =
        (-(C49820 * std::pow(-C49825, 3) * bs[3] * C49823 * C49820 * ae * ce) /
         C49694) /
            C49760 -
        (std::pow(C49825, 2) * bs[2] * C49823 * ae * ce) / (C49694 * C49760);
    const double C50239 = std::pow(C49825, 2);
    const double C131 =
        (C49820 * std::pow(C49825, 2) * bs[2] * C49829) / C49760;
    const double C132 =
        (ce * bs[1] * C49824) / (C49822 * C49694) -
        (C49820 * std::pow(C49825, 2) * bs[2] * C49930) / C49694;
    const double C49836 = C49834 * ce;
    const double C50626 = C50625 / C49760;
    const double C50666 = C50665 / C49694;
    const double C50692 = C50691 / C49694;
    const double C50762 = C50761 / C49760;
    const double C49711 = C49706 * ce;
    const double C50605 = -C50604;
    const double C49798 = C49795 * ae;
    const double C50747 = -C50746;
    const double C49832 = std::pow(C49827, 3);
    const double C49846 = std::pow(C49827, 5);
    const double C49895 = std::pow(C49827, 7);
    const double C49843 = C49838 * C49841;
    const double C49934 = C49839 * C49838;
    const double C49935 = C49838 * C49933;
    const double C49875 = C49865 * C49872;
    const double C49950 = C49866 * C49865;
    const double C49951 = C49865 * C49947;
    const double C50240 = C50238 * C50239;
    const double C293 = -(C49823 * C50239 * C50238 * C49930) / C49694;
    const double C294 = (C49823 * C50239 * C50238 * C49829) / C49760 -
                        (ae * bs[1] * C49824) / (C49822 * C49760);
    const double C441 = -(C50021 * C50239 * C50238 * C49930) / C49694;
    const double C442 = (C50021 * C50239 * C50238 * C49829) / C49760;
    const double C49840 = C49839 * C49836;
    const double C49850 = C49847 * C49836;
    const double C49869 = C49866 * C49836;
    const double C49901 = C49896 * C49836;
    const double C50627 = -C50626;
    const double C50667 = -C50666;
    const double C50693 = -C50692;
    const double C50763 = -C50762;
    const double C49714 = C49711 / C49694;
    const double C50606 = std::exp(C50605);
    const double C49800 = C49798 / C49760;
    const double C50748 = std::exp(C50747);
    const double C49835 = C49832 * C49833;
    const double C49931 = C49828 * C49832;
    const double C49971 = C49832 * C49970;
    const double C304 =
        (-(C49823 * C49832 * C49828 * C49836) / C49694) / C49760 -
        (ae * std::pow(C49825, 2) * bs[2] * C49820 * ce) / C49831;
    const double C452 =
        (-((zP - zQ) * C49832 * C49828 * C49836) / C49694) / C49760;
    const double C49854 = C49846 * C49852;
    const double C49940 = C49847 * C49846;
    const double C49941 = C49846 * C49937;
    const double C49908 = C49895 * C49904;
    const double C50000 = C49895 * C49993;
    const double C49848 = C49843 * ce;
    const double C49845 = C49820 * C49843;
    const double C50345 = C49823 * C49843;
    const double C49939 = C49820 * C49934;
    const double C49938 = C49934 * ce;
    const double C50246 = C49934 * C49849;
    const double C50348 = C49934 * C50048;
    const double C50387 = C49823 * C49934;
    const double C50386 = C49934 * ae;
    const double C50578 = C49934 * C50035;
    const double C50590 = C50021 * C49934;
    const double C49973 = C49820 * C49935;
    const double C50047 = ae * C49935;
    const double C50045 = C49823 * C49935;
    const double C49878 = C49875 * C49849;
    const double C49897 = C49875 * ce;
    const double C49893 = C49820 * C49875;
    const double C50453 = C49823 * C49875;
    const double C50495 = C49875 * C50035;
    const double C49953 = C49950 * C49849;
    const double C49995 = C49820 * C49950;
    const double C49994 = C49950 * ce;
    const double C50457 = C49950 * C50048;
    const double C49955 = C49820 * C49951;
    const double C50094 = C49951 * C50048;
    const double C50165 = ae * C49951;
    const double C50163 = C49823 * C49951;
    const double C50197 = C50021 * C49951;
    const double C50214 = C49951 * C50035;
    const double C124 = C50240 * C49849 - (bs[1] * C49824) / C49822;
    const double C286 = C49823 * C49820 * C50240;
    const double C434 = C50021 * C49820 * C50240;
    const double C587 = C50240 * C50048 - (bs[1] * C49824) / C49822;
    const double C811 = C50021 * C49823 * C50240;
    const double C944 = C50240 * C50035 - (bs[1] * C49824) / C49822;
    const double C49842 = C49838 * C49840;
    const double C49853 = C49846 * C49850;
    const double C49874 = C49865 * C49869;
    const double C49907 = C49895 * C49901;
    const double C50628 = std::exp(C50627);
    const double C50668 = std::exp(C50667);
    const double C50694 = std::exp(C50693);
    const double C50764 = std::exp(C50763);
    const double C49716 = C49714 - C49707;
    const double C49705 = C49701 * C50606;
    const double C50607 = C50606 * C50601;
    const double C50611 = C50610 * C50606;
    const double C50880 = C50606 / C49699;
    const double C50879 = C50606 * C50602;
    const double C280 = C50892 * C50606;
    const double C49802 = C49800 - C49792;
    const double C154 = C50748 * C144;
    const double C152 = C50748 * C131;
    const double C5501 = C50748 * C442;
    const double C49765 = C49763 * C50748;
    const double C117 = -(2 * ae * be * (yA - yB) * C50748) / (ae + be);
    const double C50797 = C50748 * C50795;
    const double C50800 = C50632 * C50748;
    const double C50910 = C50748 * C50796;
    const double C50905 = C50748 / C49785;
    const double C2302 = C50906 * C50748;
    const double C145 =
        (-(C49820 * C49835 * ce) / C49694) / C49760 -
        (C49832 * C49828 * C49836) / C49831 +
        C49820 * ((-(C49820 * std::pow(C49825, 4) * bs[4] * C49836) / C49694) /
                      C49760 -
                  (C49835 * ce) / C49831);
    const double C133 =
        (std::pow(C49825, 2) * bs[2] * C49829 + C49835 * C49849) / C49760;
    const double C135 =
        (2 * C49820 * C49835 + C49820 * (C49835 + C49843 * C49849)) / C49760;
    const double C292 =
        (C49823 * C49820 * C49835 + C49820 * C50240 * ae) / C49760;
    const double C440 = (C50021 * C49820 * C49835) / C49760;
    const double C444 = (C50021 * (C49835 + C49843 * C49849)) / C49760;
    const double C592 =
        (C50239 * C50238 * C49829 + C49823 * (C49823 * C49835 + C50240 * ae) +
         C49823 * C50240 * ae) /
        C49760;
    const double C819 = (C50021 * (C49823 * C49835 + C50240 * ae)) / C49760;
    const double C949 = (C50239 * C50238 * C49829 + C49835 * C50035) / C49760;
    const double C1177 =
        (2 * C50021 * C49835 + C50021 * (C49835 + C49843 * C50035)) / C49760;
    const double C49974 = C49931 * ce;
    const double C50245 = C49820 * C49931;
    const double C50347 = C49823 * C49931;
    const double C50346 = C49931 * ae;
    const double C296 = (C49823 * (C49835 + C49843 * C49849) +
                         (C50240 + C49931 * C49849) * ae) /
                        C49760;
    const double C708 =
        (2 * (C49823 * C49835 + C50240 * ae) +
         C49823 * (C49835 + C49823 * (C49823 * C49843 + C49931 * ae) +
                   C49823 * C49931 * ae) +
         (C50240 + C49931 * C50048) * ae) /
        C49760;
    const double C834 =
        (C50021 * (C49835 + C49823 * (C49823 * C49843 + C49931 * ae) +
                   C49823 * C49931 * ae)) /
        C49760;
    const double C1091 = (C49823 * C49835 + C50240 * ae +
                          (C49823 * C49843 + C49931 * ae) * C50035) /
                         C49760;
    const double C125 =
        2 * C49820 * C50240 + C49820 * (C50240 + C49931 * C49849);
    const double C288 = C49823 * (C50240 + C49931 * C49849);
    const double C436 = C50021 * (C50240 + C49931 * C49849);
    const double C700 =
        2 * C49823 * C50240 + C49823 * (C50240 + C49931 * C50048);
    const double C818 = C50021 * (C50240 + C49931 * C50048);
    const double C1169 =
        2 * C50021 * C50240 + C50021 * (C50240 + C49931 * C50035);
    const double C6143 =
        3 * (C50240 + C49931 * C50035) +
        C50021 * (2 * C50021 * C49931 + C50021 * (C49931 + C49934 * C50035));
    const double C134 = -(C49820 * (C49820 * C49971 + C50240 * ce) +
                          C50239 * C50238 * C49930 + C49820 * C50240 * ce) /
                        C49694;
    const double C295 = -(C49823 * (C49820 * C49971 + C50240 * ce)) / C49694;
    const double C443 = -(C50021 * (C49820 * C49971 + C50240 * ce)) / C49694;
    const double C593 = -(C49971 * C50048 + C50239 * C50238 * C49930) / C49694;
    const double C707 = (-2 * C49823 * C49971) / C49694 -
                        (C49823 * (C49935 * C50048 + C49971)) / C49694;
    const double C820 = -(C50021 * C49823 * C49971) / C49694;
    const double C833 = -(C50021 * (C49935 * C50048 + C49971)) / C49694;
    const double C950 = -(C49971 * C50035 + C50239 * C50238 * C49930) / C49694;
    const double C1176 = (-2 * C50021 * C49971) / C49694 -
                         (C50021 * (C49935 * C50035 + C49971)) / C49694;
    const double C5503 = C50748 * C452;
    const double C49856 = C49854 * C49849;
    const double C49867 = C49854 * ce;
    const double C49863 = C49820 * C49854;
    const double C50385 = C49823 * C49854;
    const double C50446 = C49854 * C50035;
    const double C50494 = C50021 * C49854;
    const double C6146 =
        (3 * (C49835 + C49843 * C50035) +
         C50021 * (2 * C50021 * C49843 + C50021 * (C49843 + C49854 * C50035))) /
        C49760;
    const double C49942 = C49940 * C49849;
    const double C49949 = C49820 * C49940;
    const double C49948 = C49940 * ce;
    const double C50388 = C49940 * C50048;
    const double C50455 = C49823 * C49940;
    const double C50454 = C49940 * ae;
    const double C50591 = C49940 * C50035;
    const double C49943 = C49820 * C49941;
    const double C50051 = C49941 * C50048;
    const double C50093 = ae * C49941;
    const double C50091 = C49823 * C49941;
    const double C50126 = C50021 * C49941;
    const double C50443 = C49941 * C50035;
    const double C6147 =
        (-3 * (C49935 * C50035 + C49971)) / C49694 +
        C50021 * ((-2 * C50021 * C49935) / C49694 -
                  (C50021 * (C49941 * C50035 + C49935)) / C49694);
    const double C49911 = C49908 * C49849;
    const double C50004 = C49820 * C50000;
    const double C50167 = C50000 * C50048;
    const double C49851 = C49848 / C49831;
    const double C951 = (C49820 * C49835 + C49845 * C50035) / C49760;
    const double C49978 = C49939 * ce;
    const double C50250 = 2 * C49939;
    const double C50355 = C49823 * C49939;
    const double C50354 = C49939 * ae;
    const double C50247 = C49931 + C50246;
    const double C50350 = C49931 + C50348;
    const double C50392 = 2 * C50387;
    const double C50390 = C50387 * ae;
    const double C50579 = C49931 + C50578;
    const double C50592 = 2 * C50590;
    const double C50050 = C50047 / C49831;
    const double C1090 = -(C50045 * C50035 + C49823 * C49971) / C49694;
    const double C49881 = C49854 + C49878;
    const double C49902 = C49897 / C49831;
    const double C49903 = 2 * C49893;
    const double C49900 = C49893 * ce;
    const double C50370 = C49823 * C49893;
    const double C50440 = C49893 * C50035;
    const double C50497 = C49854 + C50495;
    const double C49956 = C49940 + C49953;
    const double C50001 = C49995 * ce;
    const double C50373 = C49995 * C50048;
    const double C50461 = C49940 + C50457;
    const double C50099 = C50094 + C49941;
    const double C50171 = C50165 / C49831;
    const double C50173 = -2 * C50163;
    const double C50169 = ae * C50163;
    const double C50194 = C50021 * C50163;
    const double C50482 = C50163 * C50035;
    const double C50200 = ae * C50197;
    const double C50216 = C50214 + C49941;
    const double C146 =
        2 * ((-(C49820 * C49842) / C49694) / C49760 - (C49835 * ce) / C49831) -
        ((C49835 + C49843 * std::pow(C49820, 2)) * ce) / C49831 +
        C49820 *
            ((-(C49820 * C49843 * ce) / C49694) / C49760 - C49842 / C49831 +
             C49820 *
                 ((-(C49820 * std::pow(C49827, 5) * bs[5] * C49836) / C49694) /
                      C49760 -
                  (C49843 * ce) / C49831));
    const double C305 = C49823 * ((-(C49820 * C49842) / C49694) / C49760 -
                                  (C49835 * ce) / C49831) -
                        (ae * (C49820 * C49832 * C49828 * C49820 * ce +
                               bs[2] * std::pow(C49825, 2) * ce)) /
                            C49831;
    const double C453 = (zP - zQ) * ((-(C49820 * C49842) / C49694) / C49760 -
                                     (C49835 * ce) / C49831);
    const double C602 = (-(ae * C49823 * C49971) / C49694) / C49760 -
                        (C49832 * C49828 * C49836) / C49831 +
                        C49823 * ((-(C49823 * C49842) / C49694) / C49760 -
                                  (ae * C49971) / C49831);
    const double C835 = (-(C49823 * C50021 * C49842) / C49694) / C49760 -
                        (ae * C50021 * C49971) / C49831;
    const double C959 = (-(C49842 * std::pow(C50021, 2)) / C49694) / C49760 -
                        (C49832 * C49828 * C49836) / C49831;
    const double C49855 = C49820 * C49853;
    const double C49864 = C49853 / C49831;
    const double C50046 = C49823 * C49853;
    const double C50114 = C50021 * C49853;
    const double C712 =
        2 * ((-(C49823 * C49842) / C49694) / C49760 - (ae * C49971) / C49831) -
        (ae * (C49935 * std::pow(C49823, 2) + C49971)) / C49831 +
        C49823 *
            ((-(ae * C49823 * C49935) / C49694) / C49760 - C49842 / C49831 +
             C49823 * ((-(C49823 * C49853) / C49694) / C49760 -
                       (ae * C49935) / C49831));
    const double C842 =
        (-(ae * C50021 * C49823 * C49935) / C49694) / C49760 -
        (C50021 * C49842) / C49831 +
        C49823 * ((-(C49823 * C50021 * C49853) / C49694) / C49760 -
                  (ae * C50021 * C49935) / C49831);
    const double C1095 =
        C49823 * ((-(C49853 * C50035) / C49694) / C49760 - C49842 / C49831) -
        (ae * (C49935 * C50035 + C49971)) / C49831;
    const double C1181 =
        (-2 * C50021 * C49842) / C49831 +
        C50021 * ((-(C49853 * C50035) / C49694) / C49760 - C49842 / C49831);
    const double C49877 = C49820 * C49874;
    const double C49894 = C49874 / C49831;
    const double C50092 = C49823 * C49874;
    const double C50125 = C50021 * C49874;
    const double C50141 = C49874 * C50035;
    const double C49910 = C49820 * C49907;
    const double C50164 = C49823 * C49907;
    const double C50196 = C50021 * C49907;
    const double C50213 = C49907 * C50035;
    const double C50629 = C50628 * C50623;
    const double C50633 = C50632 * C50628;
    const double C50888 = C50628 * C50624;
    const double C50885 = C50628 / C49785;
    const double C17276 = C50906 * C50628;
    const double C50679 = C50668 * C50677;
    const double C50682 = C50610 * C50668;
    const double C50896 = C50668 * C50678;
    const double C50895 = C50668 / C49699;
    const double C584 = C50892 * C50668;
    const double C50703 = C50694 * C50701;
    const double C50706 = C50610 * C50694;
    const double C50901 = C50694 * C50702;
    const double C50900 = C50694 / C49699;
    const double C943 = C50892 * C50694;
    const double C50825 = C50764 * C50823;
    const double C50828 = C50632 * C50764;
    const double C50914 = C50764 * C50824;
    const double C50907 = C50764 / C49785;
    const double C5194 = C50906 * C50764;
    const double C49710 = C49705 / C49698;
    const double C49708 = 2 * C49705;
    const double C50882 = C50607 / C49703;
    const double C50881 = C50607 * C50602;
    const double C50878 = C50607 / C49694;
    const double C50614 = C50611 * C50602;
    const double C109 = C50611 / C50884;
    const double C1282 = C50611 / C49699;
    const double C278 = (C50606 * std::pow(C50602, 2)) / C49698 + C50880;
    const double C50918 = C50879 / C49694;
    const double C279 = (-2 * C50610 * C50879) / C49694;
    const double C49790 = C49765 / C49762;
    const double C49787 = 2 * C49765;
    const double C2307 = ((0 * ae) / C49760 - C49765 / C49762) / (2 * C49760) +
                         (0 * ae) / C49760;
    const double C8144 =
        ((C50748 - (C49758 * 2 * C49765) / C49760) * ae) / C49760 -
        C49759 / C49764;
    const double C8145 = (0 * ae) / C49760 - C49765 / C49762;
    const double C17277 =
        (-C49759 / C49760) / (2 * C49760) -
        ((C50748 - (C49758 * 2 * C49765) / C49760) * be) / C49760;
    const double C17278 =
        (-(2 * C49765) / C49760) / (2 * C49760) - (0 * be) / C49760;
    const double C155 = C117 * C124;
    const double C153 = C117 * C132;
    const double C151 = C117 * C123;
    const double C311 = C117 * C286;
    const double C459 = C117 * C434;
    const double C5508 = C117 * C944;
    const double C5502 = C117 * C441;
    const double C5500 = C117 * C435;
    const double C5958 = C117 * C811;
    const double C50912 = C50797 / C49764;
    const double C50911 = C50797 * C50796;
    const double C50908 = C50797 / C49760;
    const double C2301 = (2 * C50632 * C50797) / C49760;
    const double C2306 =
        (((C50748 - (C49758 * 2 * C49765) / C49760) * ae) / C49760 -
         C49759 / C49764) /
            (2 * C49760) +
        ((C49758 * ((0 * ae) / C49760 - C49765 / C49762) + C50800) * ae) /
            C49760;
    const double C50913 = C50800 * C50796;
    const double C20078 = C50800 / C50891;
    const double C24697 = C50800 / C49785;
    const double C50930 = C50910 / C49760;
    const double C2300 = (C50748 * std::pow(C50795, 2)) / C49762 + C50905;
    const double C158 = C50748 * C145;
    const double C156 = C50748 * C133;
    const double C160 = C50748 * C135;
    const double C312 = C50748 * C292;
    const double C8148 = C50800 * C292;
    const double C17281 = C50800 * C292;
    const double C460 = C50748 * C440;
    const double C464 = C50748 * C444;
    const double C5959 = C50748 * C819;
    const double C14082 = C50800 * C819;
    const double C22192 = C50800 * C819;
    const double C5509 = C50748 * C949;
    const double C6176 = C50748 * C1177;
    const double C49975 = C49973 + C49974;
    const double C594 =
        (C49820 * C49835 + C49823 * (C49823 * C49845 + C50245 * ae) +
         C49823 * C50245 * ae) /
        C49760;
    const double C821 = (C50021 * (C49823 * C49845 + C50245 * ae)) / C49760;
    const double C588 = C49820 * C50240 + C50245 * C50048;
    const double C699 =
        2 * C49823 * C50245 + C49823 * (C50245 + C49939 * C50048);
    const double C812 = C50021 * C49823 * C50245;
    const double C817 = C50021 * (C50245 + C49939 * C50048);
    const double C945 = C49820 * C50240 + C50245 * C50035;
    const double C1168 =
        2 * C50021 * C50245 + C50021 * (C50245 + C49939 * C50035);
    const double C1083 = C49823 * C50240 + C50347 * C50035;
    const double C3601 =
        2 * C50021 * C50347 + C50021 * (C50347 + C50387 * C50035);
    const double C50349 = C50345 + C50346;
    const double C316 = C50748 * C296;
    const double C8158 = C50800 * C296;
    const double C17291 = C50800 * C296;
    const double C5971 = C50748 * C834;
    const double C14630 = C50800 * C834;
    const double C22606 = C50800 * C834;
    const double C36691 = C2302 * C834;
    const double C5963 = C50748 * C1091;
    const double C14851 = C50800 * C1091;
    const double C22200 = C50800 * C1091;
    const double C159 = C117 * C125;
    const double C315 = C117 * C288;
    const double C463 = C117 * C436;
    const double C5970 = C117 * C818;
    const double C6175 = C117 * C1169;
    const double C6484 = C117 * C6143;
    const double C157 = C117 * C134;
    const double C313 = C117 * C295;
    const double C461 = C117 * C443;
    const double C5960 = C117 * C820;
    const double C5972 = C117 * C833;
    const double C5510 = C117 * C950;
    const double C6173 = C117 * C1176;
    const double C49858 = C49843 + C49856;
    const double C49870 = C49867 / C49831;
    const double C49871 = 2 * C49863;
    const double C49868 = C49863 * ce;
    const double C50353 = C49823 * C49863;
    const double C706 =
        (2 * (C49823 * C49845 + C50245 * ae) +
         C49823 * (C49845 + C49823 * (C49823 * C49863 + C49939 * ae) +
                   C49823 * C49939 * ae) +
         (C50245 + C49939 * C50048) * ae) /
        C49760;
    const double C832 =
        (C50021 * (C49845 + C49823 * (C49823 * C49863 + C49939 * ae) +
                   C49823 * C49939 * ae)) /
        C49760;
    const double C1089 = (C49823 * C49845 + C50245 * ae +
                          (C49823 * C49863 + C49939 * ae) * C50035) /
                         C49760;
    const double C1175 =
        (2 * C50021 * C49845 + C50021 * (C49845 + C49863 * C50035)) / C49760;
    const double C6148 =
        (3 * (C49845 + C49863 * C50035) +
         C50021 * (2 * C50021 * C49863 + C50021 * (C49863 + C49893 * C50035))) /
        C49760;
    const double C50389 = C50385 + C50386;
    const double C50447 = C49843 + C50446;
    const double C50496 = 2 * C50494;
    const double C6485 = C50748 * C6146;
    const double C49944 = C49934 + C49942;
    const double C49954 = 2 * C49949;
    const double C49952 = C49949 * ce;
    const double C50356 = C49949 * C50048;
    const double C50372 = C49823 * C49949;
    const double C50371 = C49949 * ae;
    const double C50575 = C49949 * C50035;
    const double C6144 =
        3 * (C50245 + C49939 * C50035) +
        C50021 * (2 * C50021 * C49939 + C50021 * (C49939 + C49949 * C50035));
    const double C49957 = C49955 + C49948;
    const double C50391 = C49934 + C50388;
    const double C50462 = 2 * C50455;
    const double C50460 = C50455 * ae;
    const double C50587 = C50455 * C50035;
    const double C6344 =
        3 * (C50347 + C50387 * C50035) +
        C50021 * (2 * C50021 * C50387 + C50021 * (C50387 + C50455 * C50035));
    const double C50459 = C50453 + C50454;
    const double C50593 = C49934 + C50591;
    const double C49945 = C49943 + C49938;
    const double C50053 = C50051 + C49935;
    const double C50097 = C50093 / C49831;
    const double C50098 = -2 * C50091;
    const double C50095 = ae * C50091;
    const double C3607 = (-2 * C50021 * C50045) / C49694 -
                         (C50021 * (C50091 * C50035 + C50045)) / C49694;
    const double C6347 =
        (-3 * (C50091 * C50035 + C50045)) / C49694 +
        C50021 * ((-2 * C50021 * C50091) / C49694 -
                  (C50021 * (C50163 * C50035 + C50091)) / C49694);
    const double C50128 = ae * C50126;
    const double C50488 = -2 * C50126;
    const double C50444 = C50443 + C49935;
    const double C6486 = C117 * C6147;
    const double C49914 = C49875 + C49911;
    const double C50005 = C50004 + C49994;
    const double C50174 = C50167 + C49951;
    const double C966 = C50748 * C951;
    const double C1082 = C49823 * C50245 + C50355 * C50035;
    const double C126 = 3 * (C50240 + C49931 * C49849) +
                        C49820 * (2 * C50245 + C49820 * C50247);
    const double C289 = C49823 * (2 * C50245 + C49820 * C50247);
    const double C437 = C50021 * (2 * C50245 + C49820 * C50247);
    const double C589 = C50240 + C49931 * C49849 + C50247 * C50048;
    const double C813 = C50021 * C49823 * C50247;
    const double C946 = C50240 + C49931 * C49849 + C50247 * C50035;
    const double C2872 = 3 * (C50240 + C49931 * C50048) +
                         C49823 * (2 * C50347 + C49823 * C50350);
    const double C3154 = C50021 * (2 * C50347 + C49823 * C50350);
    const double C3316 = C50240 + C49931 * C50048 + C50350 * C50035;
    const double C6474 =
        4 * (2 * C50021 * C49931 + C50021 * C50579) +
        C50021 * (3 * C50579 + C50021 * (2 * C50021 * C49934 +
                                         C50021 * (C49934 + C49940 * C50035)));
    const double C5964 = C117 * C1090;
    const double C49884 = C49820 * C49881;
    const double C49898 = 3 * C49881;
    const double C49892 = C49881 * ce;
    const double C50361 = C49823 * C49881;
    const double C49906 = C49900 / C49694;
    const double C50441 = C49863 + C50440;
    const double C50498 = C50021 * C50497;
    const double C49958 = C49820 * C49956;
    const double C49996 = C49956 * ce;
    const double C50364 = C49956 * C50048;
    const double C50376 = C49949 + C50373;
    const double C50464 = C49823 * C50461;
    const double C50103 = C49823 * C50099;
    const double C50166 = -3 * C50099;
    const double C50162 = ae * C50099;
    const double C50178 = C50173 / C49694;
    const double C50176 = C50169 / C49694;
    const double C50198 = ae * C50194;
    const double C50483 = C50482 + C50091;
    const double C50203 = C50200 / C49831;
    const double C50218 = ae * C50216;
    const double C50489 = C50021 * C50216;
    const double C162 = C50748 * C146;
    const double C314 = C50748 * C305;
    const double C8152 = C50800 * C305;
    const double C17285 = C50800 * C305;
    const double C462 = C50748 * C453;
    const double C5961 = C50748 * C835;
    const double C14086 = C50800 * C835;
    const double C22196 = C50800 * C835;
    const double C5511 = C50748 * C959;
    const double C49857 = C49855 / C49694;
    const double C3325 =
        (-(C49853 * C50035) / C49694) / C49760 - C49842 / C49831 -
        (ae * (C50091 * C50035 + C50045)) / C49831 +
        C49823 * (C49823 * ((-(C49874 * C50035) / C49694) / C49760 - C49864) -
                  (ae * (C49941 * C50035 + C49935)) / C49831);
    const double C50049 = C50046 / C49694;
    const double C5973 = C50748 * C842;
    const double C14634 = C50800 * C842;
    const double C22610 = C50800 * C842;
    const double C36697 = C2302 * C842;
    const double C5965 = C50748 * C1095;
    const double C14847 = C50800 * C1095;
    const double C22204 = C50800 * C1095;
    const double C6174 = C50748 * C1181;
    const double C49880 = C49877 / C49694;
    const double C50096 = C50092 / C49694;
    const double C50127 = C49823 * C50125;
    const double C50195 = C50125 / C49831;
    const double C50225 = -2 * C50125;
    const double C50142 = C50141 / C49694;
    const double C49913 = C49910 / C49694;
    const double C50170 = C50164 / C49694;
    const double C50199 = C49823 * C50196;
    const double C50215 = C50213 / C49694;
    const double C50889 = C50629 / C49764;
    const double C50887 = C50629 / C49760;
    const double C50886 = C50629 * C50624;
    const double C17275 = (2 * C50632 * C50629) / C49760;
    const double C50890 = C50633 * C50624;
    const double C114 = C50633 / C50891;
    const double C8143 = C50633 / C49785;
    const double C50922 = C50888 / C49760;
    const double C17274 = (C50628 * std::pow(C50623, 2)) / C49762 + C50885;
    const double C50898 = C50679 / C49703;
    const double C50897 = C50679 * C50678;
    const double C50893 = C50679 / C49694;
    const double C50685 = C50682 * C50678;
    const double C695 = C50682 / C50884;
    const double C1390 = C50682 / C49699;
    const double C50924 = C50896 / C49694;
    const double C583 = (-2 * C50610 * C50896) / C49694;
    const double C582 = (C50668 * std::pow(C50678, 2)) / C49698 + C50895;
    const double C50903 = C50703 / C49703;
    const double C50902 = C50703 * C50702;
    const double C50894 = C50703 / C49694;
    const double C50709 = C50706 * C50702;
    const double C1165 = C50706 / C50884;
    const double C1875 = C50706 / C49699;
    const double C50927 = C50901 / C49694;
    const double C942 = (-2 * C50610 * C50901) / C49694;
    const double C941 = (C50694 * std::pow(C50702, 2)) / C49698 + C50900;
    const double C50916 = C50825 / C49764;
    const double C50915 = C50825 * C50824;
    const double C50909 = C50825 / C49760;
    const double C5193 = (2 * C50632 * C50825) / C49760;
    const double C50917 = C50828 * C50824;
    const double C39100 = C50828 / C50891;
    const double C44456 = C50828 / C49785;
    const double C50933 = C50914 / C49760;
    const double C5192 = (C50764 * std::pow(C50823, 2)) / C49762 + C50907;
    const double C49713 = C49702 - C49710;
    const double C49712 = C49692 * C49708;
    const double C285 =
        ((-C49708 / C49694) / C49699 - (0 * de) / C49694) / C49699 -
        (0 * de) / C49694;
    const double C696 = -C49708 / C49694;
    const double C1392 = (-C49708 / C49694) / C49699 - (0 * de) / C49694;
    const double C50919 = C50881 / C49698;
    const double C50883 = C50614 / C49694;
    const double C1386 = -C50918;
    const double C49797 = C49794 - C49790;
    const double C49793 = C49758 * C49787;
    const double C36696 = C2307 * C833;
    const double C36690 = C2307 * C818;
    const double C8165 = C8144 * C125;
    const double C8159 = C8144 * C134;
    const double C8155 = C8144 * C124;
    const double C8153 = C8144 * C132;
    const double C8149 = C8144 * C123;
    const double C8355 = C8144 * C288;
    const double C8349 = C8144 * C295;
    const double C8345 = C8144 * C286;
    const double C8539 = C8144 * C436;
    const double C8533 = C8144 * C443;
    const double C8529 = C8144 * C434;
    const double C14083 = C8144 * C441;
    const double C14079 = C8144 * C435;
    const double C14639 = C8144 * C833;
    const double C14635 = C8144 * C818;
    const double C14631 = C8144 * C820;
    const double C14627 = C8144 * C811;
    const double C14852 = C8144 * C944;
    const double C14848 = C8144 * C950;
    const double C15071 = C8144 * C1090;
    const double C15225 = C8144 * C1176;
    const double C15221 = C8144 * C1169;
    const double C48205 = C8144 * C6147;
    const double C48201 = C8144 * C6143;
    const double C8157 = C8145 * C288;
    const double C8151 = C8145 * C295;
    const double C8147 = C8145 * C286;
    const double C14085 = C8145 * C820;
    const double C14081 = C8145 * C811;
    const double C14633 = C8145 * C833;
    const double C14629 = C8145 * C818;
    const double C14846 = C8145 * C1090;
    const double C17298 = C17277 * C125;
    const double C17292 = C17277 * C134;
    const double C17288 = C17277 * C124;
    const double C17286 = C17277 * C132;
    const double C17282 = C17277 * C123;
    const double C17488 = C17277 * C288;
    const double C17482 = C17277 * C295;
    const double C17478 = C17277 * C286;
    const double C17672 = C17277 * C436;
    const double C17666 = C17277 * C443;
    const double C17662 = C17277 * C434;
    const double C22201 = C17277 * C950;
    const double C22197 = C17277 * C944;
    const double C22193 = C17277 * C441;
    const double C22189 = C17277 * C435;
    const double C22623 = C17277 * C833;
    const double C22619 = C17277 * C818;
    const double C22615 = C17277 * C1090;
    const double C22607 = C17277 * C820;
    const double C22603 = C17277 * C811;
    const double C22811 = C17277 * C1169;
    const double C22807 = C17277 * C1176;
    const double C23110 = C17277 * C6147;
    const double C23106 = C17277 * C6143;
    const double C17290 = C17278 * C288;
    const double C17284 = C17278 * C295;
    const double C17280 = C17278 * C286;
    const double C22203 = C17278 * C1090;
    const double C22195 = C17278 * C820;
    const double C22191 = C17278 * C811;
    const double C22609 = C17278 * C833;
    const double C22605 = C17278 * C818;
    const double C172 = C153 + C154;
    const double C171 = C151 + C152;
    const double C5537 = C5502 + C5503;
    const double C5536 = C5500 + C5501;
    const double C50931 = C50911 / C49762;
    const double C8170 = C50908 * C146;
    const double C8166 = C50908 * C135;
    const double C8160 = C50908 * C145;
    const double C8156 = C50908 * C133;
    const double C8154 = C50908 * C144;
    const double C8150 = C50908 * C131;
    const double C8356 = C50908 * C296;
    const double C8350 = C50908 * C305;
    const double C8346 = C50908 * C292;
    const double C8540 = C50908 * C444;
    const double C8534 = C50908 * C453;
    const double C8530 = C50908 * C440;
    const double C9130 = C50908 * C951;
    const double C14084 = C50908 * C452;
    const double C14080 = C50908 * C442;
    const double C14640 = C50908 * C842;
    const double C14636 = C50908 * C834;
    const double C14632 = C50908 * C835;
    const double C14628 = C50908 * C819;
    const double C14853 = C50908 * C949;
    const double C14849 = C50908 * C959;
    const double C15072 = C50908 * C1095;
    const double C15068 = C50908 * C1091;
    const double C15226 = C50908 * C1181;
    const double C15222 = C50908 * C1177;
    const double C48202 = C50908 * C6146;
    const double C2305 =
        (((0 - (C49758 * C49759) / C49760) * ae) / C49760 - (0 * be) / C49764) /
            (2 * C49760) +
        ((C49758 * (((C50748 - (C49758 * 2 * C49765) / C49760) * ae) / C49760 -
                    C49759 / C49764) +
          C50908) *
         ae) /
            C49760 +
        (0 * ae) / C49760 - C49765 / C49762;
    const double C2324 = C2301 * C296;
    const double C2318 = C2301 * C305;
    const double C2312 = C2301 * C292;
    const double C36695 = C2301 * C835;
    const double C36689 = C2301 * C819;
    const double C37103 = C2301 * C842;
    const double C37097 = C2301 * C834;
    const double C37285 = C2301 * C1091;
    const double C37279 = C2301 * C1095;
    const double C2323 = C2306 * C288;
    const double C2317 = C2306 * C295;
    const double C2311 = C2306 * C286;
    const double C36694 = C2306 * C820;
    const double C36688 = C2306 * C811;
    const double C37102 = C2306 * C833;
    const double C37096 = C2306 * C818;
    const double C37278 = C2306 * C1090;
    const double C50932 = C50913 / C49760;
    const double C31331 = C24697 * C842;
    const double C31325 = C24697 * C834;
    const double C17272 = -C50930;
    const double C2344 = C2300 * C146;
    const double C2338 = C2300 * C135;
    const double C2328 = C2300 * C145;
    const double C2322 = C2300 * C133;
    const double C2320 = C2300 * C144;
    const double C2314 = C2300 * C131;
    const double C2526 = C2300 * C296;
    const double C2516 = C2300 * C305;
    const double C2510 = C2300 * C292;
    const double C2708 = C2300 * C444;
    const double C2698 = C2300 * C453;
    const double C2692 = C2300 * C440;
    const double C3334 = C2300 * C951;
    const double C36693 = C2300 * C452;
    const double C36687 = C2300 * C442;
    const double C37113 = C2300 * C842;
    const double C37107 = C2300 * C834;
    const double C37101 = C2300 * C835;
    const double C37095 = C2300 * C819;
    const double C37287 = C2300 * C949;
    const double C37281 = C2300 * C959;
    const double C37447 = C2300 * C1095;
    const double C37441 = C2300 * C1091;
    const double C37563 = C2300 * C1181;
    const double C37557 = C2300 * C1177;
    const double C173 = C155 + C156;
    const double C327 = C311 + C312;
    const double C475 = C459 + C460;
    const double C5982 = C5958 + C5959;
    const double C5538 = C5508 + C5509;
    const double C136 =
        (-2 * (C49820 * C49971 + C50240 * ce)) / C49694 -
        (C49820 * (C49820 * C49975 + C49971 + C49820 * C49931 * ce)) / C49694 -
        ((C50240 + C49931 * C49849) * ce) / C49694;
    const double C297 =
        -(C49823 * (C49820 * C49975 + C49971 + C50245 * ce)) / C49694;
    const double C445 =
        -(C50021 * (C49820 * C49975 + C49971 + C50245 * ce)) / C49694;
    const double C595 =
        -(C49975 * C50048 + C49820 * C49971 + C50240 * ce) / C49694;
    const double C822 = -(C50021 * C49823 * C49975) / C49694;
    const double C952 =
        -(C49975 * C50035 + C49820 * C49971 + C50240 * ce) / C49694;
    const double C609 = C50748 * C594;
    const double C2310 = C2302 * C594;
    const double C2512 = C2301 * C594;
    const double C2890 = C2300 * C594;
    const double C8348 = C50800 * C594;
    const double C8716 = C50908 * C594;
    const double C17481 = C50800 * C594;
    const double C24705 = C24697 * C594;
    const double C1529 = C50748 * C821;
    const double C2694 = C2301 * C821;
    const double C4110 = C2300 * C821;
    const double C8532 = C50800 * C821;
    const double C9884 = C50908 * C821;
    const double C17665 = C50800 * C821;
    const double C608 = C117 * C588;
    const double C2309 = C2307 * C588;
    const double C2511 = C2306 * C588;
    const double C8347 = C8145 * C588;
    const double C8715 = C8144 * C588;
    const double C17480 = C17278 * C588;
    const double C17848 = C17277 * C588;
    const double C2513 = C2307 * C699;
    const double C2887 = C2306 * C699;
    const double C8713 = C8145 * C699;
    const double C17846 = C17278 * C699;
    const double C1528 = C117 * C812;
    const double C2693 = C2306 * C812;
    const double C8531 = C8145 * C812;
    const double C9883 = C8144 * C812;
    const double C17664 = C17278 * C812;
    const double C19016 = C17277 * C812;
    const double C2695 = C2307 * C817;
    const double C4107 = C2306 * C817;
    const double C5694 = C117 * C817;
    const double C9881 = C8145 * C817;
    const double C14293 = C8144 * C817;
    const double C19014 = C17278 * C817;
    const double C28134 = C17277 * C817;
    const double C965 = C117 * C945;
    const double C9129 = C8144 * C945;
    const double C18262 = C17277 * C945;
    const double C5528 = C117 * C1168;
    const double C14859 = C8144 * C1168;
    const double C22801 = C17277 * C1168;
    const double C5962 = C117 * C1083;
    const double C14850 = C8145 * C1083;
    const double C15067 = C8144 * C1083;
    const double C22199 = C17278 * C1083;
    const double C22611 = C17277 * C1083;
    const double C37284 = C2306 * C1083;
    const double C6358 = C117 * C3601;
    const double C15223 = C8145 * C3601;
    const double C22809 = C17278 * C3601;
    const double C22984 = C17277 * C3601;
    const double C37558 = C2306 * C3601;
    const double C48083 = C8144 * C3601;
    const double C2875 =
        (3 * (C49835 + C49823 * C50349 + C50347 * ae) +
         C49823 * (2 * C50349 +
                   C49823 * (C49843 + C49823 * (C49823 * C49854 + C49934 * ae) +
                             C49823 * C49934 * ae) +
                   C50350 * ae) +
         (2 * C50347 + C49823 * C50350) * ae) /
        C49760;
    const double C175 = C159 + C160;
    const double C329 = C315 + C316;
    const double C477 = C463 + C464;
    const double C5986 = C5970 + C5971;
    const double C6189 = C6175 + C6176;
    const double C174 = C157 + C158;
    const double C137 = (3 * (C49835 + C49843 * C49849) +
                         C49820 * (2 * C49845 + C49820 * C49858)) /
                        C49760;
    const double C298 = (C49823 * (2 * C49845 + C49820 * C49858) +
                         (2 * C50245 + C49820 * C50247) * ae) /
                        C49760;
    const double C446 = (C50021 * (2 * C49845 + C49820 * C49858)) / C49760;
    const double C596 =
        (C49835 + C49843 * C49849 + C49823 * (C49823 * C49858 + C50247 * ae) +
         C49823 * C50247 * ae) /
        C49760;
    const double C823 = (C50021 * (C49823 * C49858 + C50247 * ae)) / C49760;
    const double C953 = (C49835 + C49843 * C49849 + C49858 * C50035) / C49760;
    const double C1173 =
        (2 * C50021 * C49858 + C50021 * (C49858 + C49881 * C50035)) / C49760;
    const double C49873 = C49868 / C49694;
    const double C50357 = C50353 + C50354;
    const double C2514 = C2302 * C706;
    const double C2888 = C2301 * C706;
    const double C8714 = C50800 * C706;
    const double C17847 = C50800 * C706;
    const double C24909 = C24697 * C706;
    const double C2696 = C2302 * C832;
    const double C4108 = C2301 * C832;
    const double C5695 = C50748 * C832;
    const double C9882 = C50800 * C832;
    const double C14294 = C50908 * C832;
    const double C19015 = C50800 * C832;
    const double C25091 = C24697 * C832;
    const double C3332 = C2301 * C1089;
    const double C5343 = C50748 * C1089;
    const double C9128 = C50800 * C1089;
    const double C15076 = C50908 * C1089;
    const double C18261 = C50800 * C1089;
    const double C5529 = C50748 * C1175;
    const double C14860 = C50908 * C1175;
    const double C6183 = C50748 * C6148;
    const double C50393 = C49823 * C50389;
    const double C50452 = 2 * C50389;
    const double C3609 =
        (2 * C50021 * C50349 + C50021 * (C50349 + C50389 * C50035)) / C49760;
    const double C6348 =
        (3 * (C50349 + C50389 * C50035) +
         C50021 *
             (2 * C50021 * C50389 +
              C50021 * (C50389 + (C49823 * C49875 + C49940 * ae) * C50035))) /
        C49760;
    const double C6478 =
        (4 * (2 * C50021 * C49843 + C50021 * C50447) +
         C50021 *
             (3 * C50447 + C50021 * (2 * C50021 * C49854 +
                                     C50021 * (C49854 + C49875 * C50035)))) /
        C49760;
    const double C6490 = C6484 + C6485;
    const double C49984 = C49944 * ce;
    const double C50251 = C49820 * C49944;
    const double C50255 = 3 * C49944;
    const double C50363 = C49823 * C49944;
    const double C50362 = C49944 * ae;
    const double C704 =
        (2 * (C49823 * C49858 + C50247 * ae) +
         C49823 * (C49858 + C49823 * (C49823 * C49881 + C49944 * ae) +
                   C49823 * C49944 * ae) +
         (C50247 + C49944 * C50048) * ae) /
        C49760;
    const double C830 =
        (C50021 * (C49858 + C49823 * (C49823 * C49881 + C49944 * ae) +
                   C49823 * C49944 * ae)) /
        C49760;
    const double C1087 = (C49823 * C49858 + C50247 * ae +
                          (C49823 * C49881 + C49944 * ae) * C50035) /
                         C49760;
    const double C698 =
        2 * C49823 * C50247 + C49823 * (C50247 + C49944 * C50048);
    const double C816 = C50021 * (C50247 + C49944 * C50048);
    const double C1167 =
        2 * C50021 * C50247 + C50021 * (C50247 + C49944 * C50035);
    const double C6145 =
        3 * (C50247 + C49944 * C50035) +
        C50021 * (2 * C50021 * C49944 + C50021 * (C49944 + C49956 * C50035));
    const double C50358 = C49939 + C50356;
    const double C50377 = 2 * C50372;
    const double C50375 = C50372 * ae;
    const double C3599 =
        2 * C50021 * C50355 + C50021 * (C50355 + C50372 * C50035);
    const double C6343 =
        3 * (C50355 + C50372 * C50035) +
        C50021 * (2 * C50021 * C50372 +
                  C50021 * (C50372 + C49823 * C49995 * C50035));
    const double C50374 = C50370 + C50371;
    const double C50576 = C49939 + C50575;
    const double C6182 = C117 * C6144;
    const double C49959 = C49820 * C49957;
    const double C49992 = -2 * C49957;
    const double C50060 = C49957 * C50048;
    const double C50075 = ae * C49957;
    const double C50073 = C49823 * C49957;
    const double C50119 = C50021 * C49957;
    const double C50437 = C49957 * C50035;
    const double C50394 = C49823 * C50391;
    const double C50458 = 3 * C50391;
    const double C50456 = C50391 * ae;
    const double C3600 =
        2 * C50021 * C50350 + C50021 * (C50350 + C50391 * C50035);
    const double C22977 =
        3 * (C50350 + C50391 * C50035) +
        C50021 * (2 * C50021 * C50391 + C50021 * (C50391 + C50461 * C50035));
    const double C50588 = C50387 + C50587;
    const double C23108 = C17278 * C6344;
    const double C39778 = C117 * C6344;
    const double C48203 = C8145 * C6344;
    const double C50463 = C49823 * C50459;
    const double C50485 = C50459 * C50035;
    const double C50594 = C50021 * C50593;
    const double C49977 = C49820 * C49945;
    const double C49982 = -2 * C49945;
    const double C50059 = ae * C49945;
    const double C50057 = C49823 * C49945;
    const double C705 = (-2 * C49823 * C49975) / C49694 -
                        (C49823 * (C49945 * C50048 + C49975)) / C49694;
    const double C831 = -(C50021 * (C49945 * C50048 + C49975)) / C49694;
    const double C1174 = (-2 * C50021 * C49975) / C49694 -
                         (C50021 * (C49945 * C50035 + C49975)) / C49694;
    const double C6149 =
        (-3 * (C49945 * C50035 + C49975)) / C49694 +
        C50021 * ((-2 * C50021 * C49945) / C49694 -
                  (C50021 * (C49957 * C50035 + C49945)) / C49694);
    const double C3166 =
        2 * ((-(C49823 * C50114) / C49694) / C49760 -
             (ae * C50021 * C49935) / C49831) -
        (ae * C50021 * C50053) / C49831 +
        C49823 *
            ((-(ae * C50021 * C50091) / C49694) / C49760 - C50114 / C49831 +
             C49823 * ((-(C49823 * C50021 * C49874) / C49694) / C49760 -
                       (ae * C50021 * C49941) / C49831));
    const double C2876 =
        (-3 * (C49935 * C50048 + C49971)) / C49694 +
        C49823 * ((-2 * C50045) / C49694 - (C49823 * C50053) / C49694);
    const double C3159 =
        C50021 * ((-2 * C50045) / C49694 - (C49823 * C50053) / C49694);
    const double C3320 = -(C50053 * C50035 + C49935 * C50048 + C49971) / C49694;
    const double C3606 = (-2 * C50021 * C50053) / C49694 -
                         (C50021 * (C50099 * C50035 + C50053)) / C49694;
    const double C50102 = C50098 / C49694;
    const double C50100 = C50095 / C49694;
    const double C6360 = C117 * C3607;
    const double C15227 = C8145 * C3607;
    const double C22805 = C17278 * C3607;
    const double C22988 = C17277 * C3607;
    const double C37564 = C2306 * C3607;
    const double C48087 = C8144 * C3607;
    const double C23112 = C17278 * C6347;
    const double C39780 = C117 * C6347;
    const double C48207 = C8145 * C6347;
    const double C50130 = C50128 / C49831;
    const double C50490 = C50488 / C49694;
    const double C6477 =
        4 * ((-2 * C50021 * C49935) / C49694 - (C50021 * C50444) / C49694) +
        C50021 *
            ((-3 * C50444) / C49694 +
             C50021 * ((-2 * C50126) / C49694 - (C50021 * C50216) / C49694));
    const double C49917 = C49820 * C49914;
    const double C6150 =
        (3 * (C49858 + C49881 * C50035) +
         C50021 * (2 * C50021 * C49881 + C50021 * (C49881 + C49914 * C50035))) /
        C49760;
    const double C50006 = C49820 * C50005;
    const double C50076 = C50005 * C50048;
    const double C50179 = C49823 * C50174;
    const double C22978 =
        (-3 * (C50099 * C50035 + C50053)) / C49694 +
        C50021 * ((-2 * C50021 * C50099) / C49694 -
                  (C50021 * (C50174 * C50035 + C50099)) / C49694);
    const double C3331 = C2306 * C1082;
    const double C5342 = C117 * C1082;
    const double C9127 = C8145 * C1082;
    const double C15075 = C8144 * C1082;
    const double C18260 = C17278 * C1082;
    const double C23607 = C17277 * C1082;
    const double C163 = C117 * C126;
    const double C8173 = C8144 * C126;
    const double C17306 = C17277 * C126;
    const double C319 = C117 * C289;
    const double C2335 = C2306 * C289;
    const double C8163 = C8145 * C289;
    const double C8363 = C8144 * C289;
    const double C17296 = C17278 * C289;
    const double C17496 = C17277 * C289;
    const double C467 = C117 * C437;
    const double C8547 = C8144 * C437;
    const double C17680 = C17277 * C437;
    const double C612 = C117 * C589;
    const double C2325 = C2307 * C589;
    const double C2523 = C2306 * C589;
    const double C8353 = C8145 * C589;
    const double C8723 = C8144 * C589;
    const double C17486 = C17278 * C589;
    const double C17856 = C17277 * C589;
    const double C1532 = C117 * C813;
    const double C2705 = C2306 * C813;
    const double C8537 = C8145 * C813;
    const double C9891 = C8144 * C813;
    const double C17670 = C17278 * C813;
    const double C19024 = C17277 * C813;
    const double C969 = C117 * C946;
    const double C9137 = C8144 * C946;
    const double C18270 = C17277 * C946;
    const double C14637 = C8145 * C3154;
    const double C22621 = C17278 * C3154;
    const double C37108 = C2306 * C3154;
    const double C37098 = C2307 * C3154;
    const double C5974 = C117 * C3316;
    const double C15069 = C8145 * C3316;
    const double C22627 = C17277 * C3316;
    const double C22613 = C17278 * C3316;
    const double C37282 = C2307 * C3316;
    const double C37442 = C2306 * C3316;
    const double C47768 = C8144 * C3316;
    const double C39858 = C117 * C6474;
    const double C49886 = C49871 + C49884;
    const double C49899 = C49892 / C49831;
    const double C49909 = -C49906;
    const double C6476 =
        (4 * (2 * C50021 * C49863 + C50021 * C50441) +
         C50021 * (3 * C50441 +
                   C50021 * (2 * C50021 * C49893 +
                             C50021 * (C49893 + C49820 * C49908 * C50035)))) /
        C49760;
    const double C50499 = C50496 + C50498;
    const double C49960 = C49954 + C49958;
    const double C50002 = C49996 / C49694;
    const double C50366 = C49944 + C50364;
    const double C50379 = C49823 * C50376;
    const double C50466 = C50462 + C50464;
    const double C50106 = C50103 / C49694;
    const double C50172 = C50166 / C49694;
    const double C50168 = C50162 / C49831;
    const double C50180 = -C50176;
    const double C50201 = C50198 / C49694;
    const double C23100 =
        4 * ((-2 * C50021 * C50091) / C49694 - (C50021 * C50483) / C49694) +
        C50021 * ((-3 * C50483) / C49694 +
                  C50021 * ((-2 * C50194) / C49694 -
                            (C50021 * (C49823 * C50000 * C50035 + C50163)) /
                                C49694));
    const double C50220 = C50218 / C49831;
    const double C50491 = C50489 / C49694;
    const double C328 = C313 + C314;
    const double C476 = C461 + C462;
    const double C5983 = C5960 + C5961;
    const double C5539 = C5510 + C5511;
    const double C49859 = -C49857;
    const double C5977 = C50748 * C3325;
    const double C15074 = C50800 * C3325;
    const double C22618 = C50800 * C3325;
    const double C31911 = C24697 * C3325;
    const double C37277 = C2302 * C3325;
    const double C37449 = C2301 * C3325;
    const double C47773 = C50908 * C3325;
    const double C50052 = -C50049;
    const double C5987 = C5972 + C5973;
    const double C5985 = C5964 + C5965;
    const double C6188 = C6173 + C6174;
    const double C49883 = -C49880;
    const double C50101 = -C50096;
    const double C50129 = C50127 / C49694;
    const double C50227 = C50225 / C49831;
    const double C50143 = -C50142;
    const double C49916 = -C49913;
    const double C50177 = -C50170;
    const double C50202 = C50199 / C49694;
    const double C50217 = -C50215;
    const double C50921 = C50886 / C49762;
    const double C50923 = C50890 / C49760;
    const double C2303 = -C50922;
    const double C50925 = C50897 / C49698;
    const double C50899 = C50685 / C49694;
    const double C1283 = -C50924;
    const double C50928 = C50902 / C49698;
    const double C50904 = C50709 / C49694;
    const double C1643 = -C50927;
    const double C50934 = C50915 / C49762;
    const double C50935 = C50917 / C49760;
    const double C33763 = -C50933;
    const double C121 =
        (C49713 / C49699 - (0 * de) / C49694) / C49699 - (0 * de) / C49694;
    const double C1287 = C49713 / C49699 - (0 * de) / C49694;
    const double C49715 = C49712 / C49694;
    const double C50936 = C50880 - C50919;
    const double C50920 = C50882 - C50883;
    const double C20083 =
        (C49797 / C49785 - (0 * be) / C49760) / C49785 + (0 * ae) / C49760;
    const double C24702 = C49797 / C49785 - (0 * be) / C49760;
    const double C49796 = C49793 / C49760;
    const double C36703 = C36696 + C36697;
    const double C36700 = C36690 + C36691;
    const double C8184 = C8157 + C8158;
    const double C8181 = C8151 + C8152;
    const double C8179 = C8147 + C8148;
    const double C14096 = C14085 + C14086;
    const double C14094 = C14081 + C14082;
    const double C14646 = C14633 + C14634;
    const double C14644 = C14629 + C14630;
    const double C14865 = C14846 + C14847;
    const double C17317 = C17290 + C17291;
    const double C17314 = C17284 + C17285;
    const double C17312 = C17280 + C17281;
    const double C22212 = C22203 + C22204;
    const double C22208 = C22195 + C22196;
    const double C22206 = C22191 + C22192;
    const double C22638 = C22609 + C22610;
    const double C22636 = C22605 + C22606;
    const double C5545 = C5537 * C278;
    const double C5951 = C5537 * C50606;
    const double C6157 = C5537 * C50878;
    const double C6985 = C5537 * C1386;
    const double C5950 = C5536 * C696;
    const double C50941 = C50905 - C50931;
    const double C8188 = C8165 + C8166;
    const double C8185 = C8159 + C8160;
    const double C8183 = C8155 + C8156;
    const double C8182 = C8153 + C8154;
    const double C8180 = C8149 + C8150;
    const double C8374 = C8355 + C8356;
    const double C8371 = C8349 + C8350;
    const double C8369 = C8345 + C8346;
    const double C8558 = C8539 + C8540;
    const double C8555 = C8533 + C8534;
    const double C8553 = C8529 + C8530;
    const double C14095 = C14083 + C14084;
    const double C14093 = C14079 + C14080;
    const double C14649 = C14639 + C14640;
    const double C14647 = C14635 + C14636;
    const double C14645 = C14631 + C14632;
    const double C14643 = C14627 + C14628;
    const double C14868 = C14852 + C14853;
    const double C14866 = C14848 + C14849;
    const double C15085 = C15071 + C15072;
    const double C15231 = C15225 + C15226;
    const double C15229 = C15221 + C15222;
    const double C48211 = C48201 + C48202;
    const double C2337 = C2305 * C125;
    const double C2327 = C2305 * C134;
    const double C2321 = C2305 * C124;
    const double C2319 = C2305 * C132;
    const double C2313 = C2305 * C123;
    const double C2525 = C2305 * C288;
    const double C2515 = C2305 * C295;
    const double C2509 = C2305 * C286;
    const double C2707 = C2305 * C436;
    const double C2697 = C2305 * C443;
    const double C2691 = C2305 * C434;
    const double C2889 = C2305 * C588;
    const double C3333 = C2305 * C945;
    const double C4109 = C2305 * C812;
    const double C36692 = C2305 * C441;
    const double C36686 = C2305 * C435;
    const double C37112 = C2305 * C833;
    const double C37106 = C2305 * C818;
    const double C37100 = C2305 * C820;
    const double C37094 = C2305 * C811;
    const double C37286 = C2305 * C944;
    const double C37280 = C2305 * C950;
    const double C37446 = C2305 * C1090;
    const double C37440 = C2305 * C1083;
    const double C37562 = C2305 * C1176;
    const double C37556 = C2305 * C1169;
    const double C2352 = C2323 + C2324;
    const double C2349 = C2317 + C2318;
    const double C2346 = C2311 + C2312;
    const double C36702 = C36694 + C36695;
    const double C36699 = C36688 + C36689;
    const double C37122 = C37102 + C37103;
    const double C37119 = C37096 + C37097;
    const double C37289 = C37278 + C37279;
    const double C50942 = C50912 - C50932;
    const double C17303 = C17272 * C146;
    const double C17299 = C17272 * C135;
    const double C17293 = C17272 * C145;
    const double C17289 = C17272 * C133;
    const double C17287 = C17272 * C144;
    const double C17283 = C17272 * C131;
    const double C17489 = C17272 * C296;
    const double C17483 = C17272 * C305;
    const double C17479 = C17272 * C292;
    const double C17673 = C17272 * C444;
    const double C17667 = C17272 * C453;
    const double C17663 = C17272 * C440;
    const double C17849 = C17272 * C594;
    const double C18263 = C17272 * C951;
    const double C19017 = C17272 * C821;
    const double C22202 = C17272 * C959;
    const double C22198 = C17272 * C949;
    const double C22194 = C17272 * C452;
    const double C22190 = C17272 * C442;
    const double C22632 = C17272 * C3325;
    const double C22624 = C17272 * C842;
    const double C22620 = C17272 * C834;
    const double C22616 = C17272 * C1095;
    const double C22612 = C17272 * C1091;
    const double C22608 = C17272 * C835;
    const double C22604 = C17272 * C819;
    const double C22812 = C17272 * C1177;
    const double C22808 = C17272 * C1181;
    const double C22802 = C17272 * C1175;
    const double C23107 = C17272 * C6146;
    const double C23608 = C17272 * C1089;
    const double C28135 = C17272 * C832;
    const double C5954 = C475 * C696;
    const double C6158 = C475 * C49713;
    const double C6986 = C475 * C1392;
    const double C5990 = C5982 * C696;
    const double C5952 = C5538 * C696;
    const double C161 = C117 * C136;
    const double C2343 = C2305 * C136;
    const double C8169 = C8144 * C136;
    const double C17302 = C17277 * C136;
    const double C317 = C117 * C297;
    const double C2329 = C2306 * C297;
    const double C2531 = C2305 * C297;
    const double C8161 = C8145 * C297;
    const double C8359 = C8144 * C297;
    const double C17294 = C17278 * C297;
    const double C17492 = C17277 * C297;
    const double C465 = C117 * C445;
    const double C2713 = C2305 * C445;
    const double C8543 = C8144 * C445;
    const double C17676 = C17277 * C445;
    const double C610 = C117 * C595;
    const double C2315 = C2307 * C595;
    const double C2517 = C2306 * C595;
    const double C2895 = C2305 * C595;
    const double C8351 = C8145 * C595;
    const double C8719 = C8144 * C595;
    const double C17484 = C17278 * C595;
    const double C17852 = C17277 * C595;
    const double C1530 = C117 * C822;
    const double C2699 = C2306 * C822;
    const double C4115 = C2305 * C822;
    const double C8535 = C8145 * C822;
    const double C9887 = C8144 * C822;
    const double C17668 = C17278 * C822;
    const double C19020 = C17277 * C822;
    const double C967 = C117 * C952;
    const double C3339 = C2305 * C952;
    const double C9133 = C8144 * C952;
    const double C18266 = C17277 * C952;
    const double C620 = C608 + C609;
    const double C2345 = C2309 + C2310;
    const double C2534 = C2511 + C2512;
    const double C8370 = C8347 + C8348;
    const double C8730 = C8715 + C8716;
    const double C17503 = C17480 + C17481;
    const double C1540 = C1528 + C1529;
    const double C2716 = C2693 + C2694;
    const double C8554 = C8531 + C8532;
    const double C9898 = C9883 + C9884;
    const double C17687 = C17664 + C17665;
    const double C977 = C965 + C966;
    const double C9144 = C9129 + C9130;
    const double C5984 = C5962 + C5963;
    const double C14867 = C14850 + C14851;
    const double C15083 = C15067 + C15068;
    const double C22210 = C22199 + C22200;
    const double C37292 = C37284 + C37285;
    const double C5506 = C477 * C285;
    const double C6166 = C477 * C49713;
    const double C6994 = C477 * C1392;
    const double C11671 = C477 * C696;
    const double C5994 = C5986 * C696;
    const double C6357 = C6189 * C696;
    const double C164 = C50748 * C137;
    const double C8174 = C50908 * C137;
    const double C17307 = C17272 * C137;
    const double C320 = C50748 * C298;
    const double C2336 = C2301 * C298;
    const double C8164 = C50800 * C298;
    const double C8364 = C50908 * C298;
    const double C17297 = C50800 * C298;
    const double C17497 = C17272 * C298;
    const double C468 = C50748 * C446;
    const double C8548 = C50908 * C446;
    const double C17681 = C17272 * C446;
    const double C613 = C50748 * C596;
    const double C2326 = C2302 * C596;
    const double C2524 = C2301 * C596;
    const double C8354 = C50800 * C596;
    const double C8724 = C50908 * C596;
    const double C17487 = C50800 * C596;
    const double C17857 = C17272 * C596;
    const double C24721 = C24697 * C596;
    const double C1533 = C50748 * C823;
    const double C2706 = C2301 * C823;
    const double C8538 = C50800 * C823;
    const double C9892 = C50908 * C823;
    const double C17671 = C50800 * C823;
    const double C19025 = C17272 * C823;
    const double C970 = C50748 * C953;
    const double C9138 = C50908 * C953;
    const double C18271 = C17272 * C953;
    const double C5533 = C50748 * C1173;
    const double C49876 = -C49873;
    const double C2535 = C2513 + C2514;
    const double C2898 = C2887 + C2888;
    const double C8729 = C8713 + C8714;
    const double C17862 = C17846 + C17847;
    const double C2717 = C2695 + C2696;
    const double C4118 = C4107 + C4108;
    const double C5702 = C5694 + C5695;
    const double C9897 = C9881 + C9882;
    const double C14300 = C14293 + C14294;
    const double C19030 = C19014 + C19015;
    const double C5540 = C5528 + C5529;
    const double C14870 = C14859 + C14860;
    const double C50395 = C49843 + C50393;
    const double C6359 = C50748 * C3609;
    const double C15224 = C50800 * C3609;
    const double C22810 = C50800 * C3609;
    const double C22985 = C17272 * C3609;
    const double C37559 = C2301 * C3609;
    const double C48084 = C50908 * C3609;
    const double C23109 = C50800 * C6348;
    const double C39779 = C50748 * C6348;
    const double C48204 = C50800 * C6348;
    const double C39859 = C50748 * C6478;
    const double C6492 = C6490 * C696;
    const double C49987 = C49984 / C49694;
    const double C50252 = C50250 + C50251;
    const double C1081 = C49823 * C50247 + C50363 * C50035;
    const double C6979 =
        2 * C50021 * C50363 + C50021 * (C50363 + C49823 * C49956 * C50035);
    const double C50365 = C50361 + C50362;
    const double C2522 = C2302 * C704;
    const double C8722 = C50800 * C704;
    const double C17855 = C50800 * C704;
    const double C24917 = C24697 * C704;
    const double C2704 = C2302 * C830;
    const double C9890 = C50800 * C830;
    const double C11422 = C50748 * C830;
    const double C19023 = C50800 * C830;
    const double C25099 = C24697 * C830;
    const double C5347 = C50748 * C1087;
    const double C9136 = C50800 * C1087;
    const double C18269 = C50800 * C1087;
    const double C2521 = C2307 * C698;
    const double C8721 = C8145 * C698;
    const double C17854 = C17278 * C698;
    const double C2703 = C2307 * C816;
    const double C9889 = C8145 * C816;
    const double C11421 = C117 * C816;
    const double C19022 = C17278 * C816;
    const double C5532 = C117 * C1167;
    const double C2877 =
        (3 * (C49845 + C49823 * C50357 + C50355 * ae) +
         C49823 * (2 * C50357 +
                   C49823 * (C49863 + C49823 * (C49823 * C49893 + C49949 * ae) +
                             C49823 * C49949 * ae) +
                   C50358 * ae) +
         (2 * C50355 + C49823 * C50358) * ae) /
        C49760;
    const double C2873 = 3 * (C50245 + C49939 * C50048) +
                         C49823 * (2 * C50355 + C49823 * C50358);
    const double C3155 = C50021 * (2 * C50355 + C49823 * C50358);
    const double C3317 = C50245 + C49939 * C50048 + C50358 * C50035;
    const double C3598 =
        2 * C50021 * C50358 + C50021 * (C50358 + C50376 * C50035);
    const double C6362 = C117 * C3599;
    const double C14857 = C8145 * C3599;
    const double C22803 = C17278 * C3599;
    const double C50378 = C49823 * C50374;
    const double C3605 =
        (2 * C50021 * C50357 + C50021 * (C50357 + C50374 * C50035)) / C49760;
    const double C6346 =
        (3 * (C50357 + C50374 * C50035) +
         C50021 * (2 * C50021 * C50374 +
                   C50021 * (C50374 + (C49823 * C49820 * C49908 + C49995 * ae) *
                                          C50035))) /
        C49760;
    const double C6473 =
        4 * (2 * C50021 * C49939 + C50021 * C50576) +
        C50021 * (3 * C50576 + C50021 * (2 * C50021 * C49949 +
                                         C50021 * (C49949 + C49995 * C50035)));
    const double C6190 = C6182 + C6183;
    const double C49961 = C49959 + C49941;
    const double C49999 = C49992 / C49694;
    const double C50062 = C50060 + C49945;
    const double C50078 = C50075 / C49831;
    const double C50079 = -2 * C50073;
    const double C50077 = ae * C50073;
    const double C50121 = ae * C50119;
    const double C50438 = C50437 + C49945;
    const double C50396 = C50392 + C50394;
    const double C22986 = C17278 * C3600;
    const double C37560 = C2307 * C3600;
    const double C39566 = C117 * C3600;
    const double C48085 = C8145 * C3600;
    const double C23099 =
        4 * (2 * C50021 * C50387 + C50021 * C50588) +
        C50021 * (3 * C50588 +
                  C50021 * (2 * C50021 * C50455 +
                            C50021 * (C50455 + C49823 * C49950 * C50035)));
    const double C50465 = C49854 + C50463;
    const double C50486 = C50389 + C50485;
    const double C50595 = C50592 + C50594;
    const double C49979 = C49977 + C49935;
    const double C49985 = C49982 / C49694;
    const double C50061 = C50059 / C49831;
    const double C1088 = -(C50057 * C50035 + C49823 * C49975) / C49694;
    const double C3603 = (-2 * C50021 * C50057) / C49694 -
                         (C50021 * (C50073 * C50035 + C50057)) / C49694;
    const double C6345 =
        (-3 * (C50073 * C50035 + C50057)) / C49694 +
        C50021 * ((-2 * C50021 * C50073) / C49694 -
                  (C50021 * (C49823 * C50005 * C50035 + C50073)) / C49694);
    const double C2519 = C2307 * C705;
    const double C2893 = C2306 * C705;
    const double C8717 = C8145 * C705;
    const double C17850 = C17278 * C705;
    const double C2701 = C2307 * C831;
    const double C4113 = C2306 * C831;
    const double C5696 = C117 * C831;
    const double C9885 = C8145 * C831;
    const double C14297 = C8144 * C831;
    const double C19018 = C17278 * C831;
    const double C28138 = C17277 * C831;
    const double C5530 = C117 * C1174;
    const double C14863 = C8144 * C1174;
    const double C22813 = C17277 * C1174;
    const double C6184 = C117 * C6149;
    const double C14642 = C50800 * C3166;
    const double C22626 = C50800 * C3166;
    const double C31739 = C24697 * C3166;
    const double C37115 = C2301 * C3166;
    const double C37105 = C2302 * C3166;
    const double C14641 = C8145 * C3159;
    const double C22625 = C17278 * C3159;
    const double C37114 = C2306 * C3159;
    const double C37104 = C2307 * C3159;
    const double C5976 = C117 * C3320;
    const double C15073 = C8145 * C3320;
    const double C22631 = C17277 * C3320;
    const double C22617 = C17278 * C3320;
    const double C37276 = C2307 * C3320;
    const double C37448 = C2306 * C3320;
    const double C47772 = C8144 * C3320;
    const double C22990 = C17278 * C3606;
    const double C37566 = C2307 * C3606;
    const double C39568 = C117 * C3606;
    const double C48089 = C8145 * C3606;
    const double C50104 = -C50100;
    const double C39860 = C117 * C6477;
    const double C49919 = C49903 + C49917;
    const double C50007 = C50006 + C49951;
    const double C50080 = C50076 + C49957;
    const double C50182 = C50179 / C49694;
    const double C3342 = C3331 + C3332;
    const double C5350 = C5342 + C5343;
    const double C9143 = C9127 + C9128;
    const double C15087 = C15075 + C15076;
    const double C18276 = C18260 + C18261;
    const double C139 = (4 * (2 * C49845 + C49820 * C49858) +
                         C49820 * (3 * C49858 + C49820 * C49886)) /
                        C49760;
    const double C448 = (C50021 * (3 * C49858 + C49820 * C49886)) / C49760;
    const double C955 =
        (2 * C49845 + C49820 * C49858 + C49886 * C50035) / C49760;
    const double C49912 = C49909 / C49760;
    const double C39854 =
        (5 * (3 * C50447 + C50021 * C50499) +
         C50021 * (4 * C50499 +
                   C50021 * (3 * C50497 +
                             C50021 * (2 * C50021 * C49875 +
                                       C50021 * (C49875 + C49908 * C50035))))) /
        C49760;
    const double C49997 = C49960 * ce;
    const double C50256 = C49820 * C49960;
    const double C2874 = 3 * (C50247 + C49944 * C50048) +
                         C49823 * (2 * C50363 + C49823 * C50366);
    const double C3318 = C50247 + C49944 * C50048 + C50366 * C50035;
    const double C4100 = C50021 * (2 * C50363 + C49823 * C50366);
    const double C50381 = C50377 + C50379;
    const double C50468 = C49823 * C50466;
    const double C50109 = C50102 - C50106;
    const double C50183 = C50180 / C49760;
    const double C50204 = -C50201;
    const double C50492 = C50490 - C50491;
    const double C5517 = C476 * C278;
    const double C5505 = C476 * C279;
    const double C5955 = C476 * C50606;
    const double C6165 = C476 * C50878;
    const double C6159 = C476 * C50611;
    const double C6993 = C476 * C1386;
    const double C6987 = C476 * C50611;
    const double C5991 = C5983 * C50606;
    const double C7001 = C5983 * C1386;
    const double C7735 = C5983 * C50878;
    const double C5547 = C5539 * C278;
    const double C5953 = C5539 * C50606;
    const double C6161 = C5539 * C50878;
    const double C6989 = C5539 * C1386;
    const double C49860 = C49859 / C49760;
    const double C50054 = C50052 / C49760;
    const double C5995 = C5987 * C50606;
    const double C5993 = C5985 * C50606;
    const double C7005 = C5985 * C1386;
    const double C7739 = C5985 * C50878;
    const double C6194 = C6188 * C50878;
    const double C6356 = C6188 * C50606;
    const double C7529 = C6188 * C1386;
    const double C39299 = C6188 * C278;
    const double C49885 = C49883 / C49760;
    const double C50105 = C50101 / C49760;
    const double C50131 = -C50129;
    const double C50144 = C50143 / C49760;
    const double C49918 = C49916 / C49760;
    const double C50181 = C50177 / C49760;
    const double C50205 = -C50202;
    const double C50219 = C50217 / C49760;
    const double C50937 = C50885 - C50921;
    const double C50938 = C50889 - C50923;
    const double C50939 = C50895 - C50925;
    const double C50926 = C50898 - C50899;
    const double C50940 = C50900 - C50928;
    const double C50929 = C50903 - C50904;
    const double C50943 = C50907 - C50934;
    const double C50944 = C50916 - C50935;
    const double C7166 = C477 * C1287;
    const double C49717 = C50606 - C49715;
    const double C7175 = C476 * C50936;
    const double C7169 = C5539 * C50936;
    const double C7163 = C5537 * C50936;
    const double C40295 = C6188 * C50936;
    const double C106 = (C50878 - C50918) / C49699 - (C50936 * C50602) / C49694;
    const double C7165 = C476 * C50920;
    const double C107 =
        (2 * C50611 + C50936) / C49699 - (C50920 * C50602) / C49694;
    const double C108 = C50920 / C49699 - C50614 / C49703;
    const double C24720 = C24702 * C589;
    const double C24710 = C24702 * C595;
    const double C24704 = C24702 * C588;
    const double C24916 = C24702 * C698;
    const double C24914 = C24702 * C705;
    const double C24908 = C24702 * C699;
    const double C25098 = C24702 * C816;
    const double C25096 = C24702 * C831;
    const double C25090 = C24702 * C817;
    const double C31330 = C24702 * C833;
    const double C31324 = C24702 * C818;
    const double C31738 = C24702 * C3159;
    const double C31732 = C24702 * C3154;
    const double C31916 = C24702 * C3316;
    const double C31910 = C24702 * C3320;
    const double C32200 = C24702 * C3606;
    const double C32194 = C24702 * C3600;
    const double C49799 = C50748 - C49796;
    const double C24739 = C50941 * C146;
    const double C24733 = C50941 * C135;
    const double C24723 = C50941 * C145;
    const double C24717 = C50941 * C133;
    const double C24715 = C50941 * C144;
    const double C24709 = C50941 * C131;
    const double C24921 = C50941 * C296;
    const double C24911 = C50941 * C305;
    const double C24905 = C50941 * C292;
    const double C25103 = C50941 * C444;
    const double C25093 = C50941 * C453;
    const double C25087 = C50941 * C440;
    const double C25273 = C50941 * C594;
    const double C25681 = C50941 * C951;
    const double C26429 = C50941 * C821;
    const double C31327 = C50941 * C452;
    const double C31321 = C50941 * C442;
    const double C31747 = C50941 * C842;
    const double C31741 = C50941 * C834;
    const double C31735 = C50941 * C835;
    const double C31729 = C50941 * C819;
    const double C31921 = C50941 * C949;
    const double C31915 = C50941 * C959;
    const double C32081 = C50941 * C1095;
    const double C32075 = C50941 * C1091;
    const double C32197 = C50941 * C1181;
    const double C32191 = C50941 * C1177;
    const double C20075 =
        (C50941 * C50795) / C49760 + (C50908 - C50930) / C49785;
    const double C8195 = C8183 + C8184;
    const double C47927 = C14866 + C14865;
    const double C2359 = C2337 + C2338;
    const double C2354 = C2327 + C2328;
    const double C2351 = C2321 + C2322;
    const double C2350 = C2319 + C2320;
    const double C2347 = C2313 + C2314;
    const double C2541 = C2525 + C2526;
    const double C2536 = C2515 + C2516;
    const double C2533 = C2509 + C2510;
    const double C2723 = C2707 + C2708;
    const double C2718 = C2697 + C2698;
    const double C2715 = C2691 + C2692;
    const double C2899 = C2889 + C2890;
    const double C3343 = C3333 + C3334;
    const double C4119 = C4109 + C4110;
    const double C36701 = C36692 + C36693;
    const double C36698 = C36686 + C36687;
    const double C37127 = C37112 + C37113;
    const double C37124 = C37106 + C37107;
    const double C37121 = C37100 + C37101;
    const double C37118 = C37094 + C37095;
    const double C37293 = C37286 + C37287;
    const double C37290 = C37280 + C37281;
    const double C37455 = C37446 + C37447;
    const double C37452 = C37440 + C37441;
    const double C37571 = C37562 + C37563;
    const double C37568 = C37556 + C37557;
    const double C24731 = C50942 * C298;
    const double C24719 = C50942 * C296;
    const double C24713 = C50942 * C305;
    const double C24707 = C50942 * C292;
    const double C24919 = C50942 * C596;
    const double C24907 = C50942 * C594;
    const double C25101 = C50942 * C823;
    const double C25089 = C50942 * C821;
    const double C25271 = C50942 * C706;
    const double C25679 = C50942 * C1089;
    const double C26427 = C50942 * C832;
    const double C31329 = C50942 * C835;
    const double C31323 = C50942 * C819;
    const double C31749 = C50942 * C3166;
    const double C31737 = C50942 * C842;
    const double C31731 = C50942 * C834;
    const double C31919 = C50942 * C1091;
    const double C31913 = C50942 * C1095;
    const double C32083 = C50942 * C3325;
    const double C32193 = C50942 * C3609;
    const double C20076 =
        (C50942 * C50795) / C49760 + (2 * C50800 + C50941) / C49785;
    const double C20077 = (C50795 * C50800) / C49764 + C50942 / C49785;
    const double C17321 = C17298 + C17299;
    const double C17318 = C17292 + C17293;
    const double C17316 = C17288 + C17289;
    const double C17315 = C17286 + C17287;
    const double C17313 = C17282 + C17283;
    const double C17507 = C17488 + C17489;
    const double C17504 = C17482 + C17483;
    const double C17502 = C17478 + C17479;
    const double C17691 = C17672 + C17673;
    const double C17688 = C17666 + C17667;
    const double C17686 = C17662 + C17663;
    const double C17863 = C17848 + C17849;
    const double C18277 = C18262 + C18263;
    const double C19031 = C19016 + C19017;
    const double C22211 = C22201 + C22202;
    const double C22209 = C22197 + C22198;
    const double C22207 = C22193 + C22194;
    const double C22205 = C22189 + C22190;
    const double C22645 = C22623 + C22624;
    const double C22643 = C22619 + C22620;
    const double C22641 = C22615 + C22616;
    const double C22639 = C22611 + C22612;
    const double C22637 = C22607 + C22608;
    const double C22635 = C22603 + C22604;
    const double C22826 = C22811 + C22812;
    const double C22824 = C22807 + C22808;
    const double C22821 = C22801 + C22802;
    const double C23116 = C23106 + C23107;
    const double C23615 = C23607 + C23608;
    const double C28141 = C28134 + C28135;
    const double C176 = C161 + C162;
    const double C2362 = C2343 + C2344;
    const double C8190 = C8169 + C8170;
    const double C17323 = C17302 + C17303;
    const double C5966 = C1540 * C696;
    const double C7000 = C1540 * C1392;
    const double C7734 = C1540 * C49713;
    const double C14091 = C8553 + C8554;
    const double C14087 = C8554 + C8553;
    const double C5956 = C977 * C696;
    const double C6162 = C977 * C49713;
    const double C6990 = C977 * C1392;
    const double C5992 = C5984 * C696;
    const double C47926 = C14868 + C14867;
    const double C177 = C163 + C164;
    const double C8192 = C8173 + C8174;
    const double C17325 = C17306 + C17307;
    const double C331 = C319 + C320;
    const double C2358 = C2335 + C2336;
    const double C8187 = C8163 + C8164;
    const double C8378 = C8363 + C8364;
    const double C17320 = C17296 + C17297;
    const double C17511 = C17496 + C17497;
    const double C479 = C467 + C468;
    const double C8562 = C8547 + C8548;
    const double C17695 = C17680 + C17681;
    const double C622 = C612 + C613;
    const double C2353 = C2325 + C2326;
    const double C2540 = C2523 + C2524;
    const double C8373 = C8353 + C8354;
    const double C8734 = C8723 + C8724;
    const double C17506 = C17486 + C17487;
    const double C17867 = C17856 + C17857;
    const double C1542 = C1532 + C1533;
    const double C2722 = C2705 + C2706;
    const double C8557 = C8537 + C8538;
    const double C9902 = C9891 + C9892;
    const double C17690 = C17670 + C17671;
    const double C19035 = C19024 + C19025;
    const double C979 = C969 + C970;
    const double C9148 = C9137 + C9138;
    const double C18281 = C18270 + C18271;
    const double C49879 = C49876 / C49760;
    const double C5978 = C5702 * C696;
    const double C15882 = C9897 + C9898;
    const double C15879 = C9898 + C9897;
    const double C6172 = C5540 * C49713;
    const double C6355 = C5540 * C696;
    const double C7528 = C5540 * C1392;
    const double C50397 = C50395 + C50390;
    const double C6368 = C6358 + C6359;
    const double C15230 = C15223 + C15224;
    const double C22825 = C22809 + C22810;
    const double C22995 = C22984 + C22985;
    const double C37569 = C37558 + C37559;
    const double C48094 = C48083 + C48084;
    const double C23117 = C23108 + C23109;
    const double C39783 = C39778 + C39779;
    const double C48212 = C48203 + C48204;
    const double C39862 = C39858 + C39859;
    const double C300 = (C49823 * (3 * C49858 + C49820 * C49886) +
                         (3 * C50247 + C49820 * C50252) * ae) /
                        C49760;
    const double C598 =
        (2 * C49845 + C49820 * C49858 +
         C49823 * (C49823 * C49886 + C50252 * ae) + C49823 * C50252 * ae) /
        C49760;
    const double C825 = (C50021 * (C49823 * C49886 + C50252 * ae)) / C49760;
    const double C127 = 4 * (2 * C50245 + C49820 * C50247) +
                        C49820 * (3 * C50247 + C49820 * C50252);
    const double C290 = C49823 * (3 * C50247 + C49820 * C50252);
    const double C438 = C50021 * (3 * C50247 + C49820 * C50252);
    const double C590 = 2 * C50245 + C49820 * C50247 + C50252 * C50048;
    const double C697 =
        2 * C49823 * C50252 + C49823 * (C50252 + C49960 * C50048);
    const double C814 = C50021 * C49823 * C50252;
    const double C815 = C50021 * (C50252 + C49960 * C50048);
    const double C947 = 2 * C50245 + C49820 * C50247 + C50252 * C50035;
    const double C1080 = C49823 * C50252 + C49823 * C49960 * C50035;
    const double C1166 =
        2 * C50021 * C50252 + C50021 * (C50252 + C49960 * C50035);
    const double C5346 = C117 * C1081;
    const double C9135 = C8145 * C1081;
    const double C18268 = C17278 * C1081;
    const double C2879 =
        (3 * (C49858 + C49823 * C50365 + C50363 * ae) +
         C49823 * (2 * C50365 +
                   C49823 * (C49881 + C49823 * (C49823 * C49914 + C49956 * ae) +
                             C49823 * C49956 * ae) +
                   C50366 * ae) +
         (2 * C50363 + C49823 * C50366) * ae) /
        C49760;
    const double C3323 = (C49858 + C49823 * C50365 + C50363 * ae +
                          (C49881 + C49823 * (C49823 * C49914 + C49956 * ae) +
                           C49823 * C49956 * ae) *
                              C50035) /
                         C49760;
    const double C4101 =
        (C50021 * (2 * C50365 +
                   C49823 * (C49881 + C49823 * (C49823 * C49914 + C49956 * ae) +
                             C49823 * C49956 * ae) +
                   C50366 * ae)) /
        C49760;
    const double C6980 =
        (2 * C50021 * C50365 +
         C50021 * (C50365 + (C49823 * C49914 + C49956 * ae) * C50035)) /
        C49760;
    const double C2539 = C2521 + C2522;
    const double C8733 = C8721 + C8722;
    const double C17866 = C17854 + C17855;
    const double C2721 = C2703 + C2704;
    const double C9901 = C9889 + C9890;
    const double C11425 = C11421 + C11422;
    const double C19034 = C19022 + C19023;
    const double C5542 = C5532 + C5533;
    const double C2886 = C2302 * C2877;
    const double C25269 = C24697 * C2877;
    const double C2885 = C2307 * C2873;
    const double C25268 = C24702 * C2873;
    const double C4105 = C2307 * C3155;
    const double C14291 = C8145 * C3155;
    const double C26424 = C24702 * C3155;
    const double C28132 = C17278 * C3155;
    const double C3329 = C2307 * C3317;
    const double C5698 = C117 * C3317;
    const double C15077 = C8145 * C3317;
    const double C23609 = C17278 * C3317;
    const double C25676 = C24702 * C3317;
    const double C50380 = C49863 + C50378;
    const double C6363 = C50748 * C3605;
    const double C14858 = C50800 * C3605;
    const double C22804 = C50800 * C3605;
    const double C6488 = C6190 * C696;
    const double C39673 = C6190 * C49713;
    const double C40529 = C6190 * C1392;
    const double C49962 = C49961 + C49952;
    const double C2878 =
        (-3 * (C49945 * C50048 + C49975)) / C49694 +
        C49823 * ((-2 * C50057) / C49694 - (C49823 * C50062) / C49694);
    const double C3161 =
        C50021 * ((-2 * C50057) / C49694 - (C49823 * C50062) / C49694);
    const double C3322 = -(C50062 * C50035 + C49945 * C50048 + C49975) / C49694;
    const double C50083 = C50079 / C49694;
    const double C50081 = C50077 / C49831;
    const double C50122 = C50121 / C49831;
    const double C6475 =
        4 * ((-2 * C50021 * C49945) / C49694 - (C50021 * C50438) / C49694) +
        C50021 * ((-3 * C50438) / C49694 +
                  C50021 * ((-2 * C50119) / C49694 -
                            (C50021 * (C50005 * C50035 + C49957)) / C49694));
    const double C3001 = 4 * (2 * C50347 + C49823 * C50350) +
                         C49823 * (3 * C50350 + C49823 * C50396);
    const double C3157 = C50021 * (3 * C50350 + C49823 * C50396);
    const double C3493 = 2 * C50347 + C49823 * C50350 + C50396 * C50035;
    const double C20816 =
        2 * C50021 * C50396 + C50021 * (C50396 + C50466 * C50035);
    const double C50467 = C50465 + C50460;
    const double C23101 =
        (4 * (2 * C50021 * C50389 + C50021 * C50486) +
         C50021 * (3 * C50486 + C50021 * (2 * C50021 * C50459 +
                                          C50021 * (C50459 + (C49823 * C49908 +
                                                              C49950 * ae) *
                                                                 C50035)))) /
        C49760;
    const double C39852 =
        5 * (3 * C50579 + C50021 * C50595) +
        C50021 * (4 * C50595 +
                  C50021 * (3 * C50593 +
                            C50021 * (2 * C50021 * C49940 +
                                      C50021 * (C49940 + C49950 * C50035))));
    const double C49980 = C49979 + C49978;
    const double C3337 = C2306 * C1088;
    const double C5344 = C117 * C1088;
    const double C9131 = C8145 * C1088;
    const double C15079 = C8144 * C1088;
    const double C18264 = C17278 * C1088;
    const double C23611 = C17277 * C1088;
    const double C6364 = C117 * C3603;
    const double C14861 = C8145 * C3603;
    const double C22815 = C17278 * C3603;
    const double C14650 = C14641 + C14642;
    const double C22646 = C22625 + C22626;
    const double C37128 = C37114 + C37115;
    const double C37123 = C37104 + C37105;
    const double C5989 = C5976 + C5977;
    const double C15086 = C15073 + C15074;
    const double C22649 = C22631 + C22632;
    const double C22642 = C22617 + C22618;
    const double C37288 = C37276 + C37277;
    const double C37456 = C37448 + C37449;
    const double C47778 = C47772 + C47773;
    const double C50107 = C50104 / C49760;
    const double C49921 = C49820 * C49919;
    const double C702 =
        (2 * (C49823 * C49886 + C50252 * ae) +
         C49823 * (C49886 + C49823 * (C49823 * C49919 + C49960 * ae) +
                   C49823 * C49960 * ae) +
         (C50252 + C49960 * C50048) * ae) /
        C49760;
    const double C828 =
        (C50021 * (C49886 + C49823 * (C49823 * C49919 + C49960 * ae) +
                   C49823 * C49960 * ae)) /
        C49760;
    const double C1085 = (C49823 * C49886 + C50252 * ae +
                          (C49823 * C49919 + C49960 * ae) * C50035) /
                         C49760;
    const double C1171 =
        (2 * C50021 * C49886 + C50021 * (C49886 + C49919 * C50035)) / C49760;
    const double C50008 = C50007 + C50001;
    const double C50084 = C49823 * C50080;
    const double C3602 = (-2 * C50021 * C50062) / C49694 -
                         (C50021 * (C50080 * C50035 + C50062)) / C49694;
    const double C50185 = C50178 - C50182;
    const double C5968 = C5350 * C696;
    const double C7004 = C5350 * C1392;
    const double C7738 = C5350 * C49713;
    const double C14856 = C9143 + C9144;
    const double C14845 = C9144 + C9143;
    const double C168 = C50748 * C139;
    const double C472 = C50748 * C448;
    const double C974 = C50748 * C955;
    const double C49915 = C49912 - C49894;
    const double C50003 = C49997 / C49694;
    const double C50257 = C50255 + C50256;
    const double C3000 = 4 * (2 * C50355 + C49823 * C50358) +
                         C49823 * (3 * C50358 + C49823 * C50381);
    const double C3156 = C50021 * (3 * C50358 + C49823 * C50381);
    const double C3492 = 2 * C50355 + C49823 * C50358 + C50381 * C50035;
    const double C50470 = C50458 + C50468;
    const double C3004 =
        4 * ((-2 * C50045) / C49694 - (C49823 * C50053) / C49694) +
        C49823 * ((-3 * C50053) / C49694 + C49823 * C50109);
    const double C3164 = C50021 * ((-3 * C50053) / C49694 + C49823 * C50109);
    const double C3496 =
        (-2 * C50045) / C49694 - (C49823 * C50053) / C49694 + C50109 * C50035;
    const double C50186 = C50183 - C49894;
    const double C50206 = C50204 / C49760;
    const double C39853 =
        5 * ((-3 * C50444) / C49694 + C50021 * C50492) +
        C50021 * (4 * C50492 +
                  C50021 * ((-3 * C50216) / C49694 +
                            C50021 * ((-2 * C50197) / C49694 -
                                      (C50021 * (C50000 * C50035 + C49951)) /
                                          C49694)));
    const double C6352 = C5952 + C5953;
    const double C49861 = C49860 - C49851;
    const double C50055 = C50054 - C50050;
    const double C6483 = C6356 + C6357;
    const double C39777 = C6357 + C6356;
    const double C49887 = C49885 - C49870;
    const double C50108 = C50105 - C50097;
    const double C50132 = C50131 / C49760;
    const double C50145 = C50144 - C49864;
    const double C49920 = C49918 - C49902;
    const double C50184 = C50181 - C50171;
    const double C50207 = C50205 / C49760;
    const double C50221 = C50219 - C49894;
    const double C111 = (C50937 * C50623) / C49760 + (C50887 - C50922) / C49785;
    const double C112 =
        (C50938 * C50623) / C49760 + (2 * C50633 + C50937) / C49785;
    const double C113 = (C50623 * C50633) / C49764 + C50938 / C49785;
    const double C692 = (C50893 - C50924) / C49699 - (C50939 * C50678) / C49694;
    const double C693 =
        (2 * C50682 + C50939) / C49699 - (C50926 * C50678) / C49694;
    const double C694 = C50926 / C49699 - C50685 / C49703;
    const double C1162 =
        (C50894 - C50927) / C49699 - (C50940 * C50702) / C49694;
    const double C1163 =
        (2 * C50706 + C50940) / C49699 - (C50929 * C50702) / C49694;
    const double C1164 = C50929 / C49699 - C50709 / C49703;
    const double C39097 =
        (C50943 * C50823) / C49760 + (C50909 - C50933) / C49785;
    const double C39098 =
        (C50944 * C50823) / C49760 + (2 * C50828 + C50943) / C49785;
    const double C39099 = (C50823 * C50828) / C49764 + C50944 / C49785;
    const double C49718 = C49717 * ce;
    const double C283 =
        ((-C49693 / C49694) / C49699 - (C49706 * de) / C49694) / C49699 -
        ((C49692 * ((-C49695 / C49694) / C49699 - (C49717 * de) / C49694) +
          C1386) *
         de) /
            C49694 +
        (-C49708 / C49694) / C49699 - (0 * de) / C49694;
    const double C284 =
        ((-C49695 / C49694) / C49699 - (C49717 * de) / C49694) / C49699 -
        ((C49692 * ((-C49708 / C49694) / C49699 - (0 * de) / C49694) + C50611) *
         de) /
            C49694;
    const double C1391 = (-C49695 / C49694) / C49699 - (C49717 * de) / C49694;
    const double C24748 = C24720 + C24721;
    const double C24740 = C24704 + C24705;
    const double C24934 = C24916 + C24917;
    const double C24930 = C24908 + C24909;
    const double C25116 = C25098 + C25099;
    const double C25112 = C25090 + C25091;
    const double C31337 = C31330 + C31331;
    const double C31334 = C31324 + C31325;
    const double C31757 = C31738 + C31739;
    const double C31922 = C31910 + C31911;
    const double C49801 = C49799 * ae;
    const double C47931 = C47927 * C50878;
    const double C48082 = C47927 * C50606;
    const double C49189 = C47927 * C1386;
    const double C17328 = C17316 + C17317;
    const double C27936 = C17686 + C17687;
    const double C27932 = C17687 + C17686;
    const double C22799 = C18276 + C18277;
    const double C28662 = C18277 + C18276;
    const double C29637 = C19030 + C19031;
    const double C29634 = C19031 + C19030;
    const double C22798 = C22211 + C22212;
    const double C22797 = C22209 + C22210;
    const double C6367 = C5993 + C5992;
    const double C48081 = C47926 * C696;
    const double C8197 = C8187 + C8188;
    const double C17330 = C17320 + C17321;
    const double C5520 = C479 * C285;
    const double C7178 = C479 * C1287;
    const double C11825 = C479 * C49713;
    const double C12569 = C479 * C1392;
    const double C8381 = C8373 + C8374;
    const double C17514 = C17506 + C17507;
    const double C7008 = C1542 * C1392;
    const double C7742 = C1542 * C49713;
    const double C11673 = C1542 * C696;
    const double C8565 = C8557 + C8558;
    const double C14089 = C8558 + C8557;
    const double C17698 = C17690 + C17691;
    const double C27934 = C17691 + C17690;
    const double C5514 = C979 * C285;
    const double C6170 = C979 * C49713;
    const double C6998 = C979 * C1392;
    const double C7172 = C979 * C1287;
    const double C11978 = C979 * C696;
    const double C49882 = C49879 - C49864;
    const double C3005 =
        (4 * (2 * C50349 + C49823 * C50397 + C50350 * ae) +
         C49823 *
             (3 * C50397 +
              C49823 *
                  (2 * C50389 +
                   C49823 * (C49854 + C49823 * (C49823 * C49875 + C49940 * ae) +
                             C49823 * C49940 * ae) +
                   C50391 * ae) +
              C50396 * ae) +
         (3 * C50350 + C49823 * C50396) * ae) /
        C49760;
    const double C3158 =
        (C50021 * (2 * C50349 + C49823 * C50397 + C50350 * ae)) / C49760;
    const double C3165 =
        (C50021 *
         (3 * C50397 +
          C49823 *
              (2 * C50389 +
               C49823 * (C49854 + C49823 * (C49823 * C49875 + C49940 * ae) +
                         C49823 * C49940 * ae) +
               C50391 * ae) +
          C50396 * ae)) /
        C49760;
    const double C3319 =
        (C49835 + C49823 * C50349 + C50347 * ae + C50397 * C50035) / C49760;
    const double C3497 =
        (2 * C50349 + C49823 * C50397 + C50350 * ae +
         (2 * C50389 +
          C49823 * (C49854 + C49823 * (C49823 * C49875 + C49940 * ae) +
                    C49823 * C49940 * ae) +
          C50391 * ae) *
             C50035) /
        C49760;
    const double C3608 =
        (2 * C50021 * C50397 +
         C50021 * (C50397 + (C49854 + C49823 * (C49823 * C49875 + C49940 * ae) +
                             C49823 * C49940 * ae) *
                                C50035)) /
        C49760;
    const double C6372 = C6368 * C696;
    const double C48200 = C15230 + C15229;
    const double C23105 = C22825 + C22826;
    const double C39785 = C39783 * C696;
    const double C39864 = C39862 * C696;
    const double C324 = C50748 * C300;
    const double C8172 = C50800 * C300;
    const double C17305 = C50800 * C300;
    const double C617 = C50748 * C598;
    const double C2334 = C2302 * C598;
    const double C8362 = C50800 * C598;
    const double C17495 = C50800 * C598;
    const double C24729 = C24697 * C598;
    const double C1537 = C50748 * C825;
    const double C8546 = C50800 * C825;
    const double C17679 = C50800 * C825;
    const double C167 = C117 * C127;
    const double C323 = C117 * C290;
    const double C8171 = C8145 * C290;
    const double C17304 = C17278 * C290;
    const double C471 = C117 * C438;
    const double C616 = C117 * C590;
    const double C2333 = C2307 * C590;
    const double C8361 = C8145 * C590;
    const double C17494 = C17278 * C590;
    const double C24728 = C24702 * C590;
    const double C1536 = C117 * C814;
    const double C8545 = C8145 * C814;
    const double C17678 = C17278 * C814;
    const double C973 = C117 * C947;
    const double C5352 = C5346 + C5347;
    const double C9147 = C9135 + C9136;
    const double C18280 = C18268 + C18269;
    const double C11675 = C11425 * C696;
    const double C6178 = C5542 * C49713;
    const double C7532 = C5542 * C1392;
    const double C12079 = C5542 * C696;
    const double C39302 = C5542 * C285;
    const double C40298 = C5542 * C1287;
    const double C2897 = C2885 + C2886;
    const double C25280 = C25268 + C25269;
    const double C50382 = C50380 + C50375;
    const double C6370 = C6362 + C6363;
    const double C14869 = C14857 + C14858;
    const double C22822 = C22803 + C22804;
    const double C49983 = C49820 * C49962;
    const double C49991 = -3 * C49962;
    const double C50067 = ae * C49962;
    const double C50065 = C49823 * C49962;
    const double C2891 = C2307 * C2878;
    const double C25274 = C24702 * C2878;
    const double C4111 = C2307 * C3161;
    const double C14295 = C8145 * C3161;
    const double C26430 = C24702 * C3161;
    const double C28136 = C17278 * C3161;
    const double C3335 = C2307 * C3322;
    const double C5700 = C117 * C3322;
    const double C15081 = C8145 * C3322;
    const double C23613 = C17278 * C3322;
    const double C25682 = C24702 * C3322;
    const double C31744 = C24702 * C3157;
    const double C37110 = C2307 * C3157;
    const double C22629 = C17278 * C3493;
    const double C32078 = C24702 * C3493;
    const double C37444 = C2307 * C3493;
    const double C47770 = C8145 * C3493;
    const double C50469 = C49823 * C50467;
    const double C22979 =
        (3 * (C50397 + C50467 * C50035) +
         C50021 *
             (2 * C50021 * C50467 +
              C50021 *
                  (C50467 + (C49875 + C49823 * (C49823 * C49908 + C49950 * ae) +
                             C49823 * C49950 * ae) *
                                C50035))) /
        C49760;
    const double C138 =
        (-3 * (C49820 * C49975 + C49971 + C50245 * ce)) / C49694 +
        C49820 * ((-2 * C49975) / C49694 - (C49820 * C49980) / C49694 -
                  (C50247 * ce) / C49694) -
        ((2 * C50245 + C49820 * C50247) * ce) / C49694;
    const double C299 =
        C49823 * ((-2 * C49975) / C49694 - (C49820 * C49980) / C49694 -
                  (C50247 * ce) / C49694);
    const double C447 =
        C50021 * ((-2 * C49975) / C49694 - (C49820 * C49980) / C49694 -
                  (C50247 * ce) / C49694);
    const double C597 =
        -(C49980 * C50048 + C49820 * C49975 + C49971 + C50245 * ce) / C49694;
    const double C703 = (-2 * C49823 * C49980) / C49694 -
                        (C49823 * (C49962 * C50048 + C49980)) / C49694;
    const double C824 = -(C50021 * C49823 * C49980) / C49694;
    const double C829 = -(C50021 * (C49962 * C50048 + C49980)) / C49694;
    const double C954 =
        -(C49980 * C50035 + C49820 * C49975 + C49971 + C50245 * ce) / C49694;
    const double C1172 = (-2 * C50021 * C49980) / C49694 -
                         (C50021 * (C49962 * C50035 + C49980)) / C49694;
    const double C5997 = C5989 * C50606;
    const double C48091 = C15086 + C15085;
    const double C22992 = C22642 + C22641;
    const double C50110 = C50107 - C49864;
    const double C49923 = C49898 + C49921;
    const double C50009 = C49820 * C50008;
    const double C50068 = C50008 * C50048;
    const double C6151 =
        (-3 * (C49962 * C50035 + C49980)) / C49694 +
        C50021 * ((-2 * C50021 * C49962) / C49694 -
                  (C50021 * (C50008 * C50035 + C49962)) / C49694);
    const double C50087 = C50084 / C49694;
    const double C50188 = C49823 * C50185;
    const double C20817 =
        2 * C50021 * C50109 + C50021 * (C50109 + C50185 * C50035);
    const double C47928 = C14856 * C49713;
    const double C49190 = C14856 * C1392;
    const double C128 = 5 * (3 * C50247 + C49820 * C50252) +
                        C49820 * (4 * C50252 + C49820 * C50257);
    const double C291 = C49823 * (4 * C50252 + C49820 * C50257);
    const double C439 = C50021 * (4 * C50252 + C49820 * C50257);
    const double C591 = 3 * C50247 + C49820 * C50252 + C50257 * C50048;
    const double C948 = 3 * C50247 + C49820 * C50252 + C50257 * C50035;
    const double C1523 = C50021 * C49823 * C50257;
    const double C20444 = 5 * (3 * C50350 + C49823 * C50396) +
                          C49823 * (4 * C50396 + C49823 * C50470);
    const double C20546 = C50021 * (4 * C50396 + C49823 * C50470);
    const double C20746 = 3 * C50350 + C49823 * C50396 + C50470 * C50035;
    const double C31750 = C24702 * C3164;
    const double C37116 = C2307 * C3164;
    const double C22633 = C17278 * C3496;
    const double C32084 = C24702 * C3496;
    const double C37450 = C2307 * C3496;
    const double C47774 = C8145 * C3496;
    const double C50208 = C50206 - C50195;
    const double C147 =
        3 * ((-(C49845 * ce) / C49694) / C49760 - C49842 / C49831 +
             C49820 * C49861) -
        ((2 * C49845 + C49820 * C49858) * ce) / C49831 +
        C49820 *
            (2 * C49861 - (C49858 * ce) / C49831 +
             C49820 *
                 ((-(C49820 * C49854 * ce) / C49694) / C49760 -
                  C49853 / C49831 +
                  C49820 * ((-(C49820 * std::pow(C49825, 6) * bs[6] * C49836) /
                             C49694) /
                                C49760 -
                            (C49854 * ce) / C49831)));
    const double C306 =
        C49823 * ((-(C49845 * ce) / C49694) / C49760 - C49842 / C49831 +
                  C49820 * C49861) -
        (ae * (C49820 * (C49820 * C49838 * C49839 * C49930 + C49931 * ce) +
               C49832 * C49828 * C49930 + C49820 * C49931 * ce)) /
            C49831;
    const double C454 = (zP - zQ) * ((-(C49845 * ce) / C49694) / C49760 -
                                     C49842 / C49831 + C49820 * C49861);
    const double C603 = (-(C49820 * C49842) / C49694) / C49760 -
                        (C49835 * ce) / C49831 -
                        (ae * C49823 * C49975) / C49831 +
                        C49823 * (C49823 * C49861 - (ae * C49975) / C49831);
    const double C836 =
        C49823 * C50021 * C49861 - (ae * C50021 * C49975) / C49831;
    const double C960 = (-(C49820 * C49842) / C49694) / C49760 -
                        (C49835 * ce) / C49831 + C49861 * std::pow(C50021, 2);
    const double C2881 =
        3 * ((-(ae * C50045) / C49694) / C49760 - C49842 / C49831 +
             C49823 * C50055) +
        (((-2 * C50045) / C49694 - (C49823 * C50053) / C49694) * ae) / C49760 +
        C49823 *
            (2 * C50055 - (ae * C50053) / C49831 +
             C49823 * ((-(ae * C49823 * C49941) / C49694) / C49760 - C49864 +
                       C49823 * ((-(C49823 * C49874) / C49694) / C49760 -
                                 (ae * C49941) / C49831)));
    const double C49888 = C49820 * C49887;
    const double C49891 = 2 * C49887;
    const double C50058 = C49823 * C49887;
    const double C50085 = C49887 - C50081;
    const double C50116 = C50021 * C49887;
    const double C711 =
        2 * (C49823 * C49861 - (ae * C49975) / C49831) -
        (ae * (C49945 * std::pow(C49823, 2) + C49975)) / C49831 +
        C49823 * (C49861 - (ae * C49823 * C49945) / C49831 +
                  C49823 * (C49823 * C49887 - (ae * C49945) / C49831));
    const double C841 =
        C50021 * C49861 - (ae * C50021 * C49823 * C49945) / C49831 +
        C49823 * (C49823 * C50021 * C49887 - (ae * C50021 * C49945) / C49831);
    const double C1094 = C49823 * (C49861 + C49887 * C50035) -
                         (ae * (C49945 * C50035 + C49975)) / C49831;
    const double C1180 =
        2 * C50021 * C49861 + C50021 * (C49861 + C49887 * C50035);
    const double C50111 = C49823 * C50108;
    const double C50161 = 2 * C50108;
    const double C50133 = C50132 - C50130;
    const double C3499 =
        2 * (C49823 * C50145 - (ae * (C49941 * C50035 + C49935)) / C49831) -
        (ae * (C50099 * C50035 + C50053)) / C49831 +
        C49823 * (C50145 - (ae * (C49823 * C49951 * C50035 + C50091)) / C49831 +
                  C49823 * (C49823 * ((-(C49907 * C50035) / C49694) / C49760 -
                                      C49894) -
                            (ae * (C49951 * C50035 + C49941)) / C49831));
    const double C3612 =
        (-2 * C50114) / C49831 + C50021 * C50145 +
        (((-2 * C50021 * C50091) / C49694 -
          (C50021 * (C49823 * C49951 * C50035 + C50091)) / C49694) *
         ae) /
            C49760 +
        C49823 * ((((-2 * C50126) / C49694 -
                    (C50021 * (C49951 * C50035 + C49941)) / C49694) *
                   ae) /
                      C49760 +
                  C49823 * ((-2 * C50125) / C49831 +
                            C50021 * ((-(C49907 * C50035) / C49694) / C49760 -
                                      C49894)));
    const double C3613 = (((-2 * C50021 * C49935) / C49694 -
                           (C50021 * (C49941 * C50035 + C49935)) / C49694) *
                          ae) /
                             C49760 +
                         C49823 * ((-2 * C50114) / C49831 + C50021 * C50145);
    const double C6152 =
        3 * ((-(C49853 * C50035) / C49694) / C49760 - C49842 / C49831) +
        C50021 * ((-2 * C50114) / C49831 + C50021 * C50145);
    const double C6350 =
        (((-3 * (C49941 * C50035 + C49935)) / C49694 +
          C50021 * ((-2 * C50126) / C49694 -
                    (C50021 * (C49951 * C50035 + C49941)) / C49694)) *
         ae) /
            C49760 +
        C49823 * (3 * C50145 +
                  C50021 * ((-2 * C50125) / C49831 +
                            C50021 * ((-(C49907 * C50035) / C49694) / C49760 -
                                      C49894)));
    const double C6480 =
        4 * ((-2 * C50114) / C49831 + C50021 * C50145) +
        C50021 * (3 * C50145 +
                  C50021 * ((-2 * C50125) / C49831 +
                            C50021 * ((-(C49907 * C50035) / C49694) / C49760 -
                                      C49894)));
    const double C49922 = C49820 * C49920;
    const double C50074 = C49823 * C49920;
    const double C50118 = C50021 * C49920;
    const double C50138 = C49920 * C50035;
    const double C3326 = C49861 + C49887 * C50035 -
                         (ae * (C50073 * C50035 + C50057)) / C49831 +
                         C49823 * (C49823 * (C49887 + C49920 * C50035) -
                                   (ae * (C49957 * C50035 + C49945)) / C49831);
    const double C50187 = C49823 * C50184;
    const double C50209 = C50207 - C50203;
    const double C50222 = C49823 * C50221;
    const double C50226 = C50021 * C50221;
    const double C49719 = C49718 / C49694;
    const double C5522 = C977 * C283;
    const double C5516 = C475 * C283;
    const double C5546 = C5538 * C283;
    const double C5544 = C5536 * C283;
    const double C11269 = C477 * C283;
    const double C39298 = C6189 * C283;
    const double C5524 = C979 * C284;
    const double C5518 = C477 * C284;
    const double C5512 = C977 * C284;
    const double C5504 = C475 * C284;
    const double C11271 = C479 * C284;
    const double C39300 = C5540 * C284;
    const double C7014 = C5350 * C1391;
    const double C7010 = C1540 * C1391;
    const double C7006 = C5984 * C1391;
    const double C7002 = C5982 * C1391;
    const double C6996 = C977 * C1391;
    const double C6992 = C475 * C1391;
    const double C6988 = C5538 * C1391;
    const double C6984 = C5536 * C1391;
    const double C7534 = C5540 * C1391;
    const double C7530 = C6189 * C1391;
    const double C12573 = C1542 * C1391;
    const double C12567 = C477 * C1391;
    const double C13069 = C979 * C1391;
    const double C40194 = C6368 * C1391;
    const double C40531 = C6490 * C1391;
    const double C49188 = C47926 * C1391;
    const double C49803 = C49801 / C49760;
    const double C22819 = C22799 * C49713;
    const double C24107 = C22799 * C1392;
    const double C22818 = C22798 * C50878;
    const double C22983 = C22798 * C50606;
    const double C24106 = C22798 * C1386;
    const double C22982 = C22797 * C696;
    const double C24105 = C22797 * C1391;
    const double C48093 = C48081 + C48082;
    const double C14638 = C50800 * C3158;
    const double C22622 = C50800 * C3158;
    const double C31743 = C50942 * C3158;
    const double C31733 = C24697 * C3158;
    const double C37109 = C2301 * C3158;
    const double C37099 = C2302 * C3158;
    const double C31745 = C24697 * C3165;
    const double C37111 = C2302 * C3165;
    const double C5975 = C50748 * C3319;
    const double C15070 = C50800 * C3319;
    const double C22628 = C17272 * C3319;
    const double C22614 = C50800 * C3319;
    const double C31917 = C24697 * C3319;
    const double C32077 = C50942 * C3319;
    const double C37283 = C2302 * C3319;
    const double C37443 = C2301 * C3319;
    const double C47769 = C50908 * C3319;
    const double C22630 = C50800 * C3497;
    const double C32079 = C24697 * C3497;
    const double C37445 = C2302 * C3497;
    const double C47771 = C50800 * C3497;
    const double C22987 = C50800 * C3608;
    const double C32195 = C24697 * C3608;
    const double C37561 = C2302 * C3608;
    const double C39567 = C50748 * C3608;
    const double C48086 = C50800 * C3608;
    const double C48210 = C48200 * C696;
    const double C23115 = C23105 * C696;
    const double C179 = C167 + C168;
    const double C333 = C323 + C324;
    const double C8191 = C8171 + C8172;
    const double C17324 = C17304 + C17305;
    const double C481 = C471 + C472;
    const double C624 = C616 + C617;
    const double C2357 = C2333 + C2334;
    const double C8377 = C8361 + C8362;
    const double C17510 = C17494 + C17495;
    const double C24752 = C24728 + C24729;
    const double C1544 = C1536 + C1537;
    const double C8561 = C8545 + C8546;
    const double C17694 = C17678 + C17679;
    const double C981 = C973 + C974;
    const double C7012 = C5352 * C1392;
    const double C7746 = C5352 * C49713;
    const double C11979 = C5352 * C696;
    const double C3003 =
        (4 * (2 * C50357 + C49823 * C50382 + C50358 * ae) +
         C49823 * (3 * C50382 +
                   C49823 * (2 * C50374 +
                             C49823 * (C49893 +
                                       C49823 * (C49823 * C49820 * C49908 +
                                                 C49995 * ae) +
                                       C49823 * C49995 * ae) +
                             C50376 * ae) +
                   C50381 * ae) +
         (3 * C50358 + C49823 * C50381) * ae) /
        C49760;
    const double C3160 =
        (C50021 * (2 * C50357 + C49823 * C50382 + C50358 * ae)) / C49760;
    const double C3163 =
        (C50021 * (3 * C50382 +
                   C49823 * (2 * C50374 +
                             C49823 * (C49893 +
                                       C49823 * (C49823 * C49820 * C49908 +
                                                 C49995 * ae) +
                                       C49823 * C49995 * ae) +
                             C50376 * ae) +
                   C50381 * ae)) /
        C49760;
    const double C3321 =
        (C49845 + C49823 * C50357 + C50355 * ae + C50382 * C50035) / C49760;
    const double C3495 =
        (2 * C50357 + C49823 * C50382 + C50358 * ae +
         (2 * C50374 +
          C49823 * (C49893 + C49823 * (C49823 * C49820 * C49908 + C49995 * ae) +
                    C49823 * C49995 * ae) +
          C50376 * ae) *
             C50035) /
        C49760;
    const double C3604 =
        (2 * C50021 * C50382 +
         C50021 * (C50382 +
                   (C49893 + C49823 * (C49823 * C49820 * C49908 + C49995 * ae) +
                    C49823 * C49995 * ae) *
                       C50035)) /
        C49760;
    const double C6374 = C6370 * C696;
    const double C40192 = C6370 * C1392;
    const double C40665 = C6370 * C49713;
    const double C49986 = C49983 / C49694;
    const double C49998 = C49991 / C49694;
    const double C50069 = C50067 / C49831;
    const double C1086 = -(C50065 * C50035 + C49823 * C49980) / C49694;
    const double C6981 =
        (-2 * C50021 * C50065) / C49694 -
        (C50021 * (C49823 * C50008 * C50035 + C50065)) / C49694;
    const double C50471 = C50452 + C50469;
    const double C165 = C117 * C138;
    const double C8177 = C8144 * C138;
    const double C17310 = C17277 * C138;
    const double C321 = C117 * C299;
    const double C2341 = C2306 * C299;
    const double C8167 = C8145 * C299;
    const double C8367 = C8144 * C299;
    const double C17300 = C17278 * C299;
    const double C17500 = C17277 * C299;
    const double C469 = C117 * C447;
    const double C8551 = C8144 * C447;
    const double C17684 = C17277 * C447;
    const double C614 = C117 * C597;
    const double C2331 = C2307 * C597;
    const double C2529 = C2306 * C597;
    const double C8357 = C8145 * C597;
    const double C8727 = C8144 * C597;
    const double C17490 = C17278 * C597;
    const double C17860 = C17277 * C597;
    const double C24726 = C24702 * C597;
    const double C2527 = C2307 * C703;
    const double C8725 = C8145 * C703;
    const double C17858 = C17278 * C703;
    const double C24922 = C24702 * C703;
    const double C1534 = C117 * C824;
    const double C2711 = C2306 * C824;
    const double C8541 = C8145 * C824;
    const double C9895 = C8144 * C824;
    const double C17674 = C17278 * C824;
    const double C19028 = C17277 * C824;
    const double C2709 = C2307 * C829;
    const double C9893 = C8145 * C829;
    const double C11423 = C117 * C829;
    const double C19026 = C17278 * C829;
    const double C25104 = C24702 * C829;
    const double C971 = C117 * C954;
    const double C9141 = C8144 * C954;
    const double C18274 = C17277 * C954;
    const double C5534 = C117 * C1172;
    const double C48098 = C48091 * C50606;
    const double C22999 = C22992 * C50606;
    const double C141 = (5 * (3 * C49858 + C49820 * C49886) +
                         C49820 * (4 * C49886 + C49820 * C49923)) /
                        C49760;
    const double C302 = (C49823 * (4 * C49886 + C49820 * C49923) +
                         (4 * C50252 + C49820 * C50257) * ae) /
                        C49760;
    const double C450 = (C50021 * (4 * C49886 + C49820 * C49923)) / C49760;
    const double C600 =
        (3 * C49858 + C49820 * C49886 +
         C49823 * (C49823 * C49923 + C50257 * ae) + C49823 * C50257 * ae) /
        C49760;
    const double C957 =
        (3 * C49858 + C49820 * C49886 + C49923 * C50035) / C49760;
    const double C1524 = (C50021 * (C49823 * C49923 + C50257 * ae)) / C49760;
    const double C50010 = C50009 / C49694;
    const double C50070 = C50068 + C49962;
    const double C50089 = C50083 - C50087;
    const double C50190 = C50172 + C50188;
    const double C166 = C50748 * C147;
    const double C8178 = C50908 * C147;
    const double C17311 = C17272 * C147;
    const double C318 = C50748 * C306;
    const double C2330 = C2301 * C306;
    const double C2532 = C2300 * C306;
    const double C8162 = C50800 * C306;
    const double C8360 = C50908 * C306;
    const double C17295 = C50800 * C306;
    const double C17493 = C17272 * C306;
    const double C24725 = C50942 * C306;
    const double C24927 = C50941 * C306;
    const double C466 = C50748 * C454;
    const double C2714 = C2300 * C454;
    const double C8544 = C50908 * C454;
    const double C17677 = C17272 * C454;
    const double C25109 = C50941 * C454;
    const double C611 = C50748 * C603;
    const double C2316 = C2302 * C603;
    const double C2518 = C2301 * C603;
    const double C2896 = C2300 * C603;
    const double C8352 = C50800 * C603;
    const double C8720 = C50908 * C603;
    const double C17485 = C50800 * C603;
    const double C17853 = C17272 * C603;
    const double C24711 = C24697 * C603;
    const double C24913 = C50942 * C603;
    const double C25279 = C50941 * C603;
    const double C1531 = C50748 * C836;
    const double C2700 = C2301 * C836;
    const double C4116 = C2300 * C836;
    const double C8536 = C50800 * C836;
    const double C9888 = C50908 * C836;
    const double C17669 = C50800 * C836;
    const double C19021 = C17272 * C836;
    const double C25095 = C50942 * C836;
    const double C26435 = C50941 * C836;
    const double C968 = C50748 * C960;
    const double C3340 = C2300 * C960;
    const double C9134 = C50908 * C960;
    const double C18267 = C17272 * C960;
    const double C25687 = C50941 * C960;
    const double C49889 = C49882 + C49888;
    const double C49905 = C49891 - C49899;
    const double C50063 = C50058 - C50061;
    const double C3167 =
        2 * (C49823 * C50116 - (ae * C50021 * C49945) / C49831) -
        (ae * C50021 * C50062) / C49831 +
        C49823 * (C50116 - (ae * C50021 * C50073) / C49831 +
                  C49823 * (C49823 * C50021 * C49920 -
                            (ae * C50021 * C49957) / C49831));
    const double C2520 = C2302 * C711;
    const double C2894 = C2301 * C711;
    const double C8718 = C50800 * C711;
    const double C17851 = C50800 * C711;
    const double C24915 = C24697 * C711;
    const double C25277 = C50942 * C711;
    const double C2702 = C2302 * C841;
    const double C4114 = C2301 * C841;
    const double C5697 = C50748 * C841;
    const double C9886 = C50800 * C841;
    const double C14298 = C50908 * C841;
    const double C19019 = C50800 * C841;
    const double C25097 = C24697 * C841;
    const double C26433 = C50942 * C841;
    const double C28139 = C17272 * C841;
    const double C3338 = C2301 * C1094;
    const double C5345 = C50748 * C1094;
    const double C9132 = C50800 * C1094;
    const double C15080 = C50908 * C1094;
    const double C18265 = C50800 * C1094;
    const double C23612 = C17272 * C1094;
    const double C25685 = C50942 * C1094;
    const double C5531 = C50748 * C1180;
    const double C14864 = C50908 * C1180;
    const double C22814 = C17272 * C1180;
    const double C50112 = C50110 + C50111;
    const double C50175 = C50161 - C50168;
    const double C3169 =
        3 * ((-(ae * C50021 * C50091) / C49694) / C49760 - C50114 / C49831 +
             C49823 * C50133) +
        (C50021 * C50109 * ae) / C49760 +
        C49823 *
            (2 * C50133 - (ae * C50021 * C50099) / C49831 +
             C49823 *
                 ((-(ae * C50021 * C49823 * C49951) / C49694) / C49760 -
                  C50125 / C49831 +
                  C49823 * ((-(C49823 * C50021 * C49907) / C49694) / C49760 -
                            (ae * C50021 * C49951) / C49831)));
    const double C22634 = C50800 * C3499;
    const double C32085 = C24697 * C3499;
    const double C37451 = C2302 * C3499;
    const double C47775 = C50800 * C3499;
    const double C22991 = C50800 * C3612;
    const double C32201 = C24697 * C3612;
    const double C37567 = C2302 * C3612;
    const double C39569 = C50748 * C3612;
    const double C48090 = C50800 * C3612;
    const double C6361 = C50748 * C3613;
    const double C15228 = C50800 * C3613;
    const double C22806 = C50800 * C3613;
    const double C22989 = C17272 * C3613;
    const double C32199 = C50942 * C3613;
    const double C37565 = C2301 * C3613;
    const double C48088 = C50908 * C3613;
    const double C6487 = C50748 * C6152;
    const double C23111 = C17272 * C6152;
    const double C48206 = C50908 * C6152;
    const double C23113 = C50800 * C6350;
    const double C39781 = C50748 * C6350;
    const double C48208 = C50800 * C6350;
    const double C39861 = C50748 * C6480;
    const double C49924 = C49915 + C49922;
    const double C50082 = C50074 - C50078;
    const double C50120 = C49823 * C50118;
    const double C50139 = C49887 + C50138;
    const double C3336 = C2302 * C3326;
    const double C5701 = C50748 * C3326;
    const double C15082 = C50800 * C3326;
    const double C23614 = C50800 * C3326;
    const double C25683 = C24697 * C3326;
    const double C50189 = C50186 + C50187;
    const double C50210 = C49823 * C50209;
    const double C50223 = C50222 - C50220;
    const double C50228 = C50227 + C50226;
    const double C49720 = C49719 - C49709;
    const double C7526 = C6988 + C6989;
    const double C40528 = C7530 + C7529;
    const double C49192 = C49188 + C49189;
    const double C49804 = C49803 - C49788;
    const double C22994 = C22982 + C22983;
    const double C24109 = C24105 + C24106;
    const double C14648 = C14637 + C14638;
    const double C22644 = C22621 + C22622;
    const double C31754 = C31732 + C31733;
    const double C37125 = C37108 + C37109;
    const double C37120 = C37098 + C37099;
    const double C31760 = C31744 + C31745;
    const double C37126 = C37110 + C37111;
    const double C5988 = C5974 + C5975;
    const double C15084 = C15069 + C15070;
    const double C22647 = C22627 + C22628;
    const double C22640 = C22613 + C22614;
    const double C31925 = C31916 + C31917;
    const double C37291 = C37282 + C37283;
    const double C37453 = C37442 + C37443;
    const double C47776 = C47768 + C47769;
    const double C22648 = C22629 + C22630;
    const double C32088 = C32078 + C32079;
    const double C37454 = C37444 + C37445;
    const double C47777 = C47770 + C47771;
    const double C22996 = C22986 + C22987;
    const double C32204 = C32194 + C32195;
    const double C37570 = C37560 + C37561;
    const double C39570 = C39566 + C39567;
    const double C48095 = C48085 + C48086;
    const double C11273 = C481 * C285;
    const double C12725 = C481 * C1287;
    const double C12571 = C1544 * C1392;
    const double C13265 = C1544 * C49713;
    const double C5526 = C981 * C285;
    const double C7184 = C981 * C1287;
    const double C11827 = C981 * C49713;
    const double C13067 = C981 * C1392;
    const double C4106 = C2302 * C3160;
    const double C14292 = C50800 * C3160;
    const double C26425 = C24697 * C3160;
    const double C28133 = C50800 * C3160;
    const double C3330 = C2302 * C3321;
    const double C5699 = C50748 * C3321;
    const double C15078 = C50800 * C3321;
    const double C23610 = C50800 * C3321;
    const double C25677 = C24697 * C3321;
    const double C49988 = C49985 - C49986;
    const double C5348 = C117 * C1086;
    const double C9139 = C8145 * C1086;
    const double C18272 = C17278 * C1086;
    const double C50472 = C50471 + C50456;
    const double C50011 = C49999 - C50010;
    const double C2880 =
        (-3 * (C49962 * C50048 + C49980)) / C49694 +
        C49823 * ((-2 * C50065) / C49694 - (C49823 * C50070) / C49694);
    const double C3324 = -(C50070 * C50035 + C49962 * C50048 + C49980) / C49694;
    const double C4102 =
        C50021 * ((-2 * C50065) / C49694 - (C49823 * C50070) / C49694);
    const double C3002 =
        4 * ((-2 * C50057) / C49694 - (C49823 * C50062) / C49694) +
        C49823 * ((-3 * C50062) / C49694 + C49823 * C50089);
    const double C3162 = C50021 * ((-3 * C50062) / C49694 + C49823 * C50089);
    const double C3494 =
        (-2 * C50057) / C49694 - (C49823 * C50062) / C49694 + C50089 * C50035;
    const double C20445 = 5 * ((-3 * C50053) / C49694 + C49823 * C50109) +
                          C49823 * (4 * C50109 + C49823 * C50190);
    const double C20547 = C50021 * (4 * C50109 + C49823 * C50190);
    const double C20747 =
        (-3 * C50053) / C49694 + C49823 * C50109 + C50190 * C50035;
    const double C178 = C165 + C166;
    const double C8194 = C8177 + C8178;
    const double C17327 = C17310 + C17311;
    const double C330 = C317 + C318;
    const double C2355 = C2329 + C2330;
    const double C2544 = C2531 + C2532;
    const double C8186 = C8161 + C8162;
    const double C8376 = C8359 + C8360;
    const double C17319 = C17294 + C17295;
    const double C17509 = C17492 + C17493;
    const double C478 = C465 + C466;
    const double C2726 = C2713 + C2714;
    const double C8560 = C8543 + C8544;
    const double C17693 = C17676 + C17677;
    const double C621 = C610 + C611;
    const double C2348 = C2315 + C2316;
    const double C2537 = C2517 + C2518;
    const double C2902 = C2895 + C2896;
    const double C8372 = C8351 + C8352;
    const double C8732 = C8719 + C8720;
    const double C17505 = C17484 + C17485;
    const double C17865 = C17852 + C17853;
    const double C24743 = C24710 + C24711;
    const double C1541 = C1530 + C1531;
    const double C2719 = C2699 + C2700;
    const double C4122 = C4115 + C4116;
    const double C8556 = C8535 + C8536;
    const double C9900 = C9887 + C9888;
    const double C17689 = C17668 + C17669;
    const double C19033 = C19020 + C19021;
    const double C978 = C967 + C968;
    const double C3346 = C3339 + C3340;
    const double C9146 = C9133 + C9134;
    const double C18279 = C18266 + C18267;
    const double C148 =
        4 * (2 * C49861 - (C49858 * ce) / C49831 + C49820 * C49889) -
        ((3 * C49858 + C49820 * C49886) * ce) / C49831 +
        C49820 *
            (3 * C49889 - (C49886 * ce) / C49831 +
             C49820 * (2 * C49887 - (C49881 * ce) / C49831 +
                       C49820 * ((-(C49820 * C49875 * ce) / C49694) / C49760 -
                                 C49874 / C49831 +
                                 C49820 * ((-(C49820 * std::pow(C49827, 7) *
                                              bs[7] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49875 * ce) / C49831))));
    const double C307 =
        (((-2 * (C49820 * C49935 + C49931 * ce)) / C49694 -
          (C49820 *
           (C49820 * (C49820 * C49846 * C49847 * C49930 + C49934 * ce) +
            C49935 + C49820 * C49934 * ce)) /
              C49694 -
          ((C49931 + C49934 * C49849) * ce) / C49694) *
         ae) /
            C49760 +
        C49823 * (2 * C49861 - (C49858 * ce) / C49831 + C49820 * C49889);
    const double C455 =
        (zP - zQ) * (2 * C49861 - (C49858 * ce) / C49831 + C49820 * C49889);
    const double C604 = (-(C49845 * ce) / C49694) / C49760 - C49842 / C49831 +
                        C49820 * C49861 - (ae * C49823 * C49980) / C49831 +
                        C49823 * (C49823 * C49889 - (ae * C49980) / C49831);
    const double C837 =
        C49823 * C50021 * C49889 - (ae * C50021 * C49980) / C49831;
    const double C961 = (-(C49845 * ce) / C49694) / C49760 - C49842 / C49831 +
                        C49820 * C49861 + C49889 * std::pow(C50021, 2);
    const double C2882 =
        3 * (C49861 - (ae * C50057) / C49831 + C49823 * C50063) +
        (((-2 * C50057) / C49694 - (C49823 * C50062) / C49694) * ae) / C49760 +
        C49823 *
            (2 * C50063 - (ae * C50062) / C49831 +
             C49823 * (C49887 - (ae * C49823 * C49957) / C49831 +
                       C49823 * (C49823 * C49920 - (ae * C49957) / C49831)));
    const double C4112 = C2302 * C3167;
    const double C14296 = C50800 * C3167;
    const double C26431 = C24697 * C3167;
    const double C28137 = C50800 * C3167;
    const double C2538 = C2519 + C2520;
    const double C2901 = C2893 + C2894;
    const double C8731 = C8717 + C8718;
    const double C17864 = C17850 + C17851;
    const double C24933 = C24914 + C24915;
    const double C2720 = C2701 + C2702;
    const double C4121 = C4113 + C4114;
    const double C5703 = C5696 + C5697;
    const double C9899 = C9885 + C9886;
    const double C14302 = C14297 + C14298;
    const double C19032 = C19018 + C19019;
    const double C25115 = C25096 + C25097;
    const double C28143 = C28138 + C28139;
    const double C3345 = C3337 + C3338;
    const double C5351 = C5344 + C5345;
    const double C9145 = C9131 + C9132;
    const double C15089 = C15079 + C15080;
    const double C18278 = C18264 + C18265;
    const double C23617 = C23611 + C23612;
    const double C5541 = C5530 + C5531;
    const double C14872 = C14863 + C14864;
    const double C22827 = C22813 + C22814;
    const double C3007 =
        4 * (2 * C50055 - (ae * C50053) / C49831 + C49823 * C50112) +
        (((-3 * C50053) / C49694 + C49823 * C50109) * ae) / C49760 +
        C49823 *
            (3 * C50112 + (C50109 * ae) / C49760 +
             C49823 *
                 (2 * C50108 - (ae * C50099) / C49831 +
                  C49823 *
                      ((-(ae * C49823 * C49951) / C49694) / C49760 - C49894 +
                       C49823 * ((-(C49823 * C49907) / C49694) / C49760 -
                                 (ae * C49951) / C49831))));
    const double C31751 = C24697 * C3169;
    const double C37117 = C2302 * C3169;
    const double C22650 = C22633 + C22634;
    const double C32091 = C32084 + C32085;
    const double C37457 = C37450 + C37451;
    const double C47779 = C47774 + C47775;
    const double C22998 = C22990 + C22991;
    const double C32207 = C32200 + C32201;
    const double C37573 = C37566 + C37567;
    const double C39571 = C39568 + C39569;
    const double C48097 = C48089 + C48090;
    const double C6369 = C6360 + C6361;
    const double C15232 = C15227 + C15228;
    const double C22823 = C22805 + C22806;
    const double C22997 = C22988 + C22989;
    const double C37572 = C37564 + C37565;
    const double C48096 = C48087 + C48088;
    const double C6491 = C6486 + C6487;
    const double C23118 = C23110 + C23111;
    const double C48213 = C48205 + C48206;
    const double C23119 = C23112 + C23113;
    const double C39784 = C39780 + C39781;
    const double C48214 = C48207 + C48208;
    const double C39863 = C39860 + C39861;
    const double C49925 = C49820 * C49924;
    const double C50066 = C49823 * C49924;
    const double C50151 = C50021 * C49924;
    const double C710 =
        2 * (C49823 * C49889 - (ae * C49980) / C49831) -
        (ae * (C49962 * std::pow(C49823, 2) + C49980)) / C49831 +
        C49823 * (C49889 - (ae * C49823 * C49962) / C49831 +
                  C49823 * (C49823 * C49924 - (ae * C49962) / C49831));
    const double C840 =
        C50021 * C49889 - (ae * C50021 * C49823 * C49962) / C49831 +
        C49823 * (C49823 * C50021 * C49924 - (ae * C50021 * C49962) / C49831);
    const double C1093 = C49823 * (C49889 + C49924 * C50035) -
                         (ae * (C49962 * C50035 + C49980)) / C49831;
    const double C1179 =
        2 * C50021 * C49889 + C50021 * (C49889 + C49924 * C50035);
    const double C3327 =
        C49889 + C49924 * C50035 -
        (ae * (C49823 * C50008 * C50035 + C50065)) / C49831 +
        C49823 *
            (C49823 *
                 (C49924 +
                  ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                   C49907 / C49831 +
                   C49820 * ((-(C49820 * std::pow(C49825, 8) * bs[8] * C49836) /
                              C49694) /
                                 C49760 -
                             (C49908 * ce) / C49831)) *
                      C50035) -
             (ae * (C50008 * C50035 + C49962)) / C49831);
    const double C50086 = C49823 * C50082;
    const double C50123 = C50120 - C50122;
    const double C3498 =
        2 * (C49823 * C50139 - (ae * (C49957 * C50035 + C49945)) / C49831) -
        (ae * (C50080 * C50035 + C50062)) / C49831 +
        C49823 *
            (C50139 - (ae * (C49823 * C50005 * C50035 + C50073)) / C49831 +
             C49823 * (C49823 * (C49920 + ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831) *
                                              C50035) -
                       (ae * (C50005 * C50035 + C49957)) / C49831));
    const double C3610 =
        2 * C50116 + C50021 * C50139 +
        (((-2 * C50021 * C50073) / C49694 -
          (C50021 * (C49823 * C50005 * C50035 + C50073)) / C49694) *
         ae) /
            C49760 +
        C49823 *
            ((((-2 * C50119) / C49694 -
               (C50021 * (C50005 * C50035 + C49957)) / C49694) *
              ae) /
                 C49760 +
             C49823 * (2 * C50118 +
                       C50021 * (C49920 + ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831) *
                                              C50035)));
    const double C3611 = (((-2 * C50021 * C49945) / C49694 -
                           (C50021 * (C49957 * C50035 + C49945)) / C49694) *
                          ae) /
                             C49760 +
                         C49823 * (2 * C50116 + C50021 * C50139);
    const double C6153 = 3 * (C49861 + C49887 * C50035) +
                         C50021 * (2 * C50116 + C50021 * C50139);
    const double C6349 =
        (((-3 * (C49957 * C50035 + C49945)) / C49694 +
          C50021 * ((-2 * C50119) / C49694 -
                    (C50021 * (C50005 * C50035 + C49957)) / C49694)) *
         ae) /
            C49760 +
        C49823 *
            (3 * C50139 +
             C50021 * (2 * C50118 +
                       C50021 * (C49920 + ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831) *
                                              C50035)));
    const double C6479 =
        4 * (2 * C50116 + C50021 * C50139) +
        C50021 *
            (3 * C50139 +
             C50021 * (2 * C50118 +
                       C50021 * (C49920 + ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831) *
                                              C50035)));
    const double C3344 = C3335 + C3336;
    const double C5705 = C5700 + C5701;
    const double C15090 = C15081 + C15082;
    const double C23618 = C23613 + C23614;
    const double C25691 = C25682 + C25683;
    const double C50191 = C49823 * C50189;
    const double C50211 = C50208 + C50210;
    const double C20749 =
        3 * (C50145 - (ae * (C50163 * C50035 + C50091)) / C49831 +
             C49823 * C50223) +
        ((C50109 + C50185 * C50035) * ae) / C49760 +
        C49823 *
            (2 * C50223 - (ae * (C50174 * C50035 + C50099)) / C49831 +
             C49823 *
                 (C50221 - (ae * (C49823 * C50000 * C50035 + C50163)) / C49831 +
                  C49823 * (C49823 * ((-(std::pow(C49825, 8) * bs[8] * C49836 *
                                         C50035) /
                                       C49694) /
                                          C49760 -
                                      C49907 / C49831) -
                            (ae * (C50000 * C50035 + C49951)) / C49831)));
    const double C20819 =
        2 * ((((-2 * C50126) / C49694 - (C50021 * C50216) / C49694) * ae) /
                 C49760 +
             C49823 * C50228) +
        (((-2 * C50021 * C50099) / C49694 -
          (C50021 * (C50174 * C50035 + C50099)) / C49694) *
         ae) /
            C49760 +
        C49823 * (C50228 +
                  (((-2 * C50194) / C49694 -
                    (C50021 * (C49823 * C50000 * C50035 + C50163)) / C49694) *
                   ae) /
                      C49760 +
                  C49823 * ((((-2 * C50197) / C49694 -
                              (C50021 * (C50000 * C50035 + C49951)) / C49694) *
                             ae) /
                                C49760 +
                            C49823 * ((-2 * C50196) / C49831 +
                                      C50021 * ((-(std::pow(C49825, 8) * bs[8] *
                                                   C49836 * C50035) /
                                                 C49694) /
                                                    C49760 -
                                                C49907 / C49831))));
    const double C22980 =
        3 * C50145 + C50021 * C50228 +
        (((-3 * (C50163 * C50035 + C50091)) / C49694 +
          C50021 * ((-2 * C50194) / C49694 -
                    (C50021 * (C49823 * C50000 * C50035 + C50163)) / C49694)) *
         ae) /
            C49760 +
        C49823 * ((((-3 * C50216) / C49694 +
                    C50021 * ((-2 * C50197) / C49694 -
                              (C50021 * (C50000 * C50035 + C49951)) / C49694)) *
                   ae) /
                      C49760 +
                  C49823 * (3 * C50221 +
                            C50021 * ((-2 * C50196) / C49831 +
                                      C50021 * ((-(std::pow(C49825, 8) * bs[8] *
                                                   C49836 * C50035) /
                                                 C49694) /
                                                    C49760 -
                                                C49907 / C49831))));
    const double C23102 =
        ((4 * ((-2 * C50126) / C49694 - (C50021 * C50216) / C49694) +
          C50021 *
              ((-3 * C50216) / C49694 +
               C50021 * ((-2 * C50197) / C49694 -
                         (C50021 * (C50000 * C50035 + C49951)) / C49694))) *
         ae) /
            C49760 +
        C49823 * (4 * C50228 +
                  C50021 * (3 * C50221 +
                            C50021 * ((-2 * C50196) / C49831 +
                                      C50021 * ((-(std::pow(C49825, 8) * bs[8] *
                                                   C49836 * C50035) /
                                                 C49694) /
                                                    C49760 -
                                                C49907 / C49831))));
    const double C39855 =
        5 * (3 * C50145 + C50021 * C50228) +
        C50021 * (4 * C50228 +
                  C50021 * (3 * C50221 +
                            C50021 * ((-2 * C50196) / C49831 +
                                      C50021 * ((-(std::pow(C49825, 8) * bs[8] *
                                                   C49836 * C50035) /
                                                 C49694) /
                                                    C49760 -
                                                C49907 / C49831))));
    const double C6180 = C5540 * C49720;
    const double C6168 = C977 * C49720;
    const double C6164 = C475 * C49720;
    const double C6160 = C5538 * C49720;
    const double C6156 = C5536 * C49720;
    const double C6195 = C6189 * C49720;
    const double C7748 = C5350 * C49720;
    const double C7744 = C1540 * C49720;
    const double C7740 = C5984 * C49720;
    const double C7736 = C5982 * C49720;
    const double C11829 = C979 * C49720;
    const double C11823 = C477 * C49720;
    const double C13267 = C1542 * C49720;
    const double C22817 = C22797 * C49720;
    const double C39675 = C6490 * C49720;
    const double C40667 = C6368 * C49720;
    const double C47930 = C47926 * C49720;
    const double C118 =
        ((((0 - (C49692 * C49693) / C49694) * ce) / C49694 - (0 * de) / C49703 +
          C49695 / C49694) /
             C49699 -
         ((C49692 * C49716 + 0) * de) / C49694) /
            C49699 -
        ((C49692 * (C49716 / C49699 -
                    ((C49692 * C49720 + C50878) * de) / C49694 + C49713) +
          C50936) *
         de) /
            C49694 +
        C49720 / C49699 - ((C49692 * C49713 + C50611) * de) / C49694;
    const double C119 =
        (C49716 / C49699 - ((C49692 * C49720 + C50878) * de) / C49694 +
         C49713) /
            C49699 -
        ((C49692 *
              (C49720 / C49699 - ((C49692 * C49713 + C50611) * de) / C49694) +
          C50920) *
         de) /
            C49694 +
        2 * (C49713 / C49699 - (0 * de) / C49694);
    const double C120 =
        (C49720 / C49699 - ((C49692 * C49713 + C50611) * de) / C49694) /
            C49699 -
        ((C49692 * (C49713 / C49699 - (0 * de) / C49694) + C1282) * de) /
            C49694;
    const double C1285 =
        C49716 / C49699 - ((C49692 * C49720 + C50878) * de) / C49694 + C49713;
    const double C1286 =
        C49720 / C49699 - ((C49692 * C49713 + C50611) * de) / C49694;
    const double C7536 = C7526 - C6990;
    const double C40533 = C40528 - C7528;
    const double C49193 = C49192 - C49190;
    const double C20080 =
        ((((0 - (C49758 * C49784) / C49760) * ae) / C49760 - (0 * be) / C49764 +
          C49759 / C49760) /
             C49785 -
         ((C49758 * C49802 + 0) * be) / C49760) /
            C49785 +
        ((C49758 * (C49802 / C49785 -
                    ((C49758 * C49804 + C50908) * be) / C49760 + C49797) +
          C50941) *
         ae) /
            C49760 +
        C49804 / C49785 - ((C49758 * C49797 + C50800) * be) / C49760;
    const double C20081 =
        (C49802 / C49785 - ((C49758 * C49804 + C50908) * be) / C49760 +
         C49797) /
            C49785 +
        ((C49758 *
              (C49804 / C49785 - ((C49758 * C49797 + C50800) * be) / C49760) +
          C50942) *
         ae) /
            C49760 +
        2 * (C49797 / C49785 - (0 * be) / C49760);
    const double C20082 =
        (C49804 / C49785 - ((C49758 * C49797 + C50800) * be) / C49760) /
            C49785 +
        ((C49758 * (C49797 / C49785 - (0 * be) / C49760) + C24697) * ae) /
            C49760;
    const double C24700 =
        C49802 / C49785 - ((C49758 * C49804 + C50908) * be) / C49760 + C49797;
    const double C24701 =
        C49804 / C49785 - ((C49758 * C49797 + C50800) * be) / C49760;
    const double C24110 = C24109 - C24107;
    const double C5996 = C5988 * C696;
    const double C48092 = C15084 + C15083;
    const double C22993 = C22640 + C22639;
    const double C39572 = C39570 * C696;
    const double C4117 = C4105 + C4106;
    const double C14299 = C14291 + C14292;
    const double C26436 = C26424 + C26425;
    const double C28140 = C28132 + C28133;
    const double C3341 = C3329 + C3330;
    const double C5704 = C5698 + C5699;
    const double C15088 = C15077 + C15078;
    const double C23616 = C23609 + C23610;
    const double C25688 = C25676 + C25677;
    const double C49989 = C49988 - C49987;
    const double C20446 =
        (5 * (3 * C50397 + C49823 * C50472 + C50396 * ae) +
         C49823 * (4 * C50472 +
                   C49823 * (3 * C50467 +
                             C49823 * (2 * C50459 +
                                       C49823 * (C49875 +
                                                 C49823 * (C49823 * C49908 +
                                                           C49950 * ae) +
                                                 C49823 * C49950 * ae) +
                                       C50461 * ae) +
                             C50466 * ae) +
                   C50470 * ae) +
         (4 * C50396 + C49823 * C50470) * ae) /
        C49760;
    const double C20548 =
        (C50021 *
         (4 * C50472 +
          C49823 *
              (3 * C50467 +
               C49823 * (2 * C50459 +
                         C49823 * (C49875 +
                                   C49823 * (C49823 * C49908 + C49950 * ae) +
                                   C49823 * C49950 * ae) +
                         C50461 * ae) +
               C50466 * ae) +
          C50470 * ae)) /
        C49760;
    const double C20748 =
        (3 * C50397 + C49823 * C50472 + C50396 * ae +
         (3 * C50467 +
          C49823 *
              (2 * C50459 +
               C49823 * (C49875 + C49823 * (C49823 * C49908 + C49950 * ae) +
                         C49823 * C49950 * ae) +
               C50461 * ae) +
          C50466 * ae) *
             C50035) /
        C49760;
    const double C20818 =
        (2 * C50021 * C50472 +
         C50021 *
             (C50472 +
              (2 * C50459 +
               C49823 * (C49875 + C49823 * (C49823 * C49908 + C49950 * ae) +
                         C49823 * C49950 * ae) +
               C50461 * ae) *
                  C50035)) /
        C49760;
    const double C50012 = C50011 - C50002;
    const double C8196 = C8185 + C8186;
    const double C17329 = C17318 + C17319;
    const double C5519 = C478 * C279;
    const double C5507 = C478 * C280;
    const double C6167 = C478 * C50611;
    const double C6995 = C478 * C50611;
    const double C7177 = C478 * C50920;
    const double C7167 = C478 * C1282;
    const double C11270 = C478 * C278;
    const double C11672 = C478 * C50606;
    const double C11824 = C478 * C50878;
    const double C12568 = C478 * C1386;
    const double C12722 = C478 * C50936;
    const double C5967 = C1541 * C50606;
    const double C7009 = C1541 * C1386;
    const double C7003 = C1541 * C50611;
    const double C7743 = C1541 * C50878;
    const double C7737 = C1541 * C50611;
    const double C14092 = C8555 + C8556;
    const double C14088 = C8556 + C8555;
    const double C27937 = C17688 + C17689;
    const double C27933 = C17689 + C17688;
    const double C5523 = C978 * C278;
    const double C5513 = C978 * C279;
    const double C5957 = C978 * C50606;
    const double C6169 = C978 * C50878;
    const double C6163 = C978 * C50611;
    const double C6997 = C978 * C1386;
    const double C6991 = C978 * C50611;
    const double C7181 = C978 * C50936;
    const double C7171 = C978 * C50920;
    const double C170 = C50748 * C148;
    const double C322 = C50748 * C307;
    const double C2342 = C2301 * C307;
    const double C8168 = C50800 * C307;
    const double C8368 = C50908 * C307;
    const double C17301 = C50800 * C307;
    const double C17501 = C17272 * C307;
    const double C24737 = C50942 * C307;
    const double C470 = C50748 * C455;
    const double C8552 = C50908 * C455;
    const double C17685 = C17272 * C455;
    const double C615 = C50748 * C604;
    const double C2332 = C2302 * C604;
    const double C2530 = C2301 * C604;
    const double C8358 = C50800 * C604;
    const double C8728 = C50908 * C604;
    const double C17491 = C50800 * C604;
    const double C17861 = C17272 * C604;
    const double C24727 = C24697 * C604;
    const double C24925 = C50942 * C604;
    const double C1535 = C50748 * C837;
    const double C2712 = C2301 * C837;
    const double C8542 = C50800 * C837;
    const double C9896 = C50908 * C837;
    const double C17675 = C50800 * C837;
    const double C19029 = C17272 * C837;
    const double C25107 = C50942 * C837;
    const double C972 = C50748 * C961;
    const double C9142 = C50908 * C961;
    const double C18275 = C17272 * C961;
    const double C2892 = C2302 * C2882;
    const double C25275 = C24697 * C2882;
    const double C4120 = C4111 + C4112;
    const double C14301 = C14295 + C14296;
    const double C26439 = C26430 + C26431;
    const double C28142 = C28136 + C28137;
    const double C5979 = C5703 * C50606;
    const double C15881 = C9899 + C9900;
    const double C15880 = C9900 + C9899;
    const double C29636 = C19032 + C19033;
    const double C29635 = C19033 + C19032;
    const double C5969 = C5351 * C50606;
    const double C7013 = C5351 * C1386;
    const double C7007 = C5351 * C50611;
    const double C7747 = C5351 * C50878;
    const double C7741 = C5351 * C50611;
    const double C14855 = C9145 + C9146;
    const double C14854 = C9146 + C9145;
    const double C22800 = C18278 + C18279;
    const double C28663 = C18279 + C18278;
    const double C6179 = C5541 * C50878;
    const double C6177 = C5541 * C50611;
    const double C6354 = C5541 * C50606;
    const double C7533 = C5541 * C1386;
    const double C7531 = C5541 * C50611;
    const double C39301 = C5541 * C279;
    const double C40297 = C5541 * C50920;
    const double C31763 = C31750 + C31751;
    const double C37129 = C37116 + C37117;
    const double C39573 = C39571 * C50606;
    const double C6373 = C6369 * C50606;
    const double C40193 = C6369 * C1386;
    const double C40666 = C6369 * C50878;
    const double C48199 = C15232 + C15231;
    const double C23104 = C22823 + C22824;
    const double C6493 = C6491 * C50606;
    const double C39674 = C6491 * C50878;
    const double C40530 = C6491 * C1386;
    const double C39786 = C39784 * C50606;
    const double C39865 = C39863 * C50606;
    const double C49926 = C49905 + C49925;
    const double C50071 = C50066 - C50069;
    const double C4103 =
        2 * (C49823 * C50151 - (ae * C50021 * C49962) / C49831) -
        (ae * C50021 * C50070) / C49831 +
        C49823 * (C50151 - (ae * C50021 * C49823 * C50008) / C49831 +
                  C49823 * (C49823 * C50021 *
                                ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                                 C49907 / C49831 +
                                 C49820 * ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831)) -
                            (ae * C50021 * C50008) / C49831));
    const double C6154 =
        3 * (C49889 + C49924 * C50035) +
        C50021 *
            (2 * C50151 +
             C50021 *
                 (C49924 +
                  ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                   C49907 / C49831 +
                   C49820 * ((-(C49820 * std::pow(C49825, 8) * bs[8] * C49836) /
                              C49694) /
                                 C49760 -
                             (C49908 * ce) / C49831)) *
                      C50035));
    const double C6982 =
        (((-2 * C50021 * C49962) / C49694 -
          (C50021 * (C50008 * C50035 + C49962)) / C49694) *
         ae) /
            C49760 +
        C49823 *
            (2 * C50151 +
             C50021 *
                 (C49924 +
                  ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                   C49907 / C49831 +
                   C49820 * ((-(C49820 * std::pow(C49825, 8) * bs[8] * C49836) /
                              C49694) /
                                 C49760 -
                             (C49908 * ce) / C49831)) *
                      C50035));
    const double C2528 = C2302 * C710;
    const double C8726 = C50800 * C710;
    const double C17859 = C50800 * C710;
    const double C24923 = C24697 * C710;
    const double C2710 = C2302 * C840;
    const double C9894 = C50800 * C840;
    const double C11424 = C50748 * C840;
    const double C19027 = C50800 * C840;
    const double C25105 = C24697 * C840;
    const double C5349 = C50748 * C1093;
    const double C9140 = C50800 * C1093;
    const double C18273 = C50800 * C1093;
    const double C5535 = C50748 * C1179;
    const double C50088 = C50085 + C50086;
    const double C3168 =
        3 * (C50116 - (ae * C50021 * C50073) / C49831 + C49823 * C50123) +
        (C50021 * C50089 * ae) / C49760 +
        C49823 * (2 * C50123 - (ae * C50021 * C50080) / C49831 +
                  C49823 * (C50118 - (ae * C50021 * C49823 * C50005) / C49831 +
                            C49823 * (C49823 * C50021 *
                                          ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831) -
                                      (ae * C50021 * C50005) / C49831)));
    const double C6365 = C50748 * C3611;
    const double C14862 = C50800 * C3611;
    const double C22816 = C50800 * C3611;
    const double C6185 = C50748 * C6153;
    const double C5981 = C5705 * C50606;
    const double C50192 = C50175 + C50191;
    const double C20549 =
        4 * (2 * C50133 - (ae * C50021 * C50099) / C49831 + C49823 * C50211) +
        (C50021 * C50190 * ae) / C49760 +
        C49823 *
            (3 * C50211 + (C50021 * C50185 * ae) / C49760 +
             C49823 *
                 (2 * C50209 - (ae * C50021 * C50174) / C49831 +
                  C49823 *
                      ((-(ae * C50021 * C49823 * C50000) / C49694) / C49760 -
                       C50196 / C49831 +
                       C49823 * ((-(C49823 * C50021 * std::pow(C49825, 8) *
                                    bs[8] * C49836) /
                                  C49694) /
                                     C49760 -
                                 (ae * C50021 * C50000) / C49831))));
    const double C6186 = C6160 + C6161;
    const double C39672 = C6195 + C6194;
    const double C22829 = C22817 + C22818;
    const double C47932 = C47930 + C47931;
    const double C7180 = C977 * C1285;
    const double C7174 = C475 * C1285;
    const double C7168 = C5538 * C1285;
    const double C7162 = C5536 * C1285;
    const double C12721 = C477 * C1285;
    const double C40294 = C6189 * C1285;
    const double C7182 = C979 * C1286;
    const double C7176 = C477 * C1286;
    const double C7170 = C977 * C1286;
    const double C7164 = C475 * C1286;
    const double C12723 = C479 * C1286;
    const double C40296 = C5540 * C1286;
    const double C24738 = C24700 * C136;
    const double C24732 = C24700 * C125;
    const double C24722 = C24700 * C134;
    const double C24716 = C24700 * C124;
    const double C24714 = C24700 * C132;
    const double C24708 = C24700 * C123;
    const double C24926 = C24700 * C297;
    const double C24920 = C24700 * C288;
    const double C24910 = C24700 * C295;
    const double C24904 = C24700 * C286;
    const double C25108 = C24700 * C445;
    const double C25102 = C24700 * C436;
    const double C25092 = C24700 * C443;
    const double C25086 = C24700 * C434;
    const double C25278 = C24700 * C595;
    const double C25272 = C24700 * C588;
    const double C25686 = C24700 * C952;
    const double C25680 = C24700 * C945;
    const double C26434 = C24700 * C822;
    const double C26428 = C24700 * C812;
    const double C31326 = C24700 * C441;
    const double C31320 = C24700 * C435;
    const double C31746 = C24700 * C833;
    const double C31740 = C24700 * C818;
    const double C31734 = C24700 * C820;
    const double C31728 = C24700 * C811;
    const double C31920 = C24700 * C944;
    const double C31914 = C24700 * C950;
    const double C32080 = C24700 * C1090;
    const double C32074 = C24700 * C1083;
    const double C32196 = C24700 * C1176;
    const double C32190 = C24700 * C1169;
    const double C24736 = C24701 * C299;
    const double C24730 = C24701 * C289;
    const double C24724 = C24701 * C297;
    const double C24718 = C24701 * C288;
    const double C24712 = C24701 * C295;
    const double C24706 = C24701 * C286;
    const double C24924 = C24701 * C597;
    const double C24918 = C24701 * C589;
    const double C24912 = C24701 * C595;
    const double C24906 = C24701 * C588;
    const double C25106 = C24701 * C824;
    const double C25100 = C24701 * C813;
    const double C25094 = C24701 * C822;
    const double C25088 = C24701 * C812;
    const double C25276 = C24701 * C705;
    const double C25270 = C24701 * C699;
    const double C25684 = C24701 * C1088;
    const double C25678 = C24701 * C1082;
    const double C26432 = C24701 * C831;
    const double C26426 = C24701 * C817;
    const double C31328 = C24701 * C820;
    const double C31322 = C24701 * C811;
    const double C31748 = C24701 * C3159;
    const double C31742 = C24701 * C3154;
    const double C31736 = C24701 * C833;
    const double C31730 = C24701 * C818;
    const double C31918 = C24701 * C1083;
    const double C31912 = C24701 * C1090;
    const double C32082 = C24701 * C3320;
    const double C32076 = C24701 * C3316;
    const double C32198 = C24701 * C3607;
    const double C32192 = C24701 * C3601;
    const double C48099 = C48092 * C696;
    const double C23000 = C22993 * C696;
    const double C5980 = C5704 * C696;
    const double C140 =
        4 * ((-2 * C49975) / C49694 - (C49820 * C49980) / C49694 -
             (C50247 * ce) / C49694) +
        C49820 * ((-3 * C49980) / C49694 + C49820 * C49989 -
                  (C50252 * ce) / C49694) -
        ((3 * C50247 + C49820 * C50252) * ce) / C49694;
    const double C301 = C49823 * ((-3 * C49980) / C49694 + C49820 * C49989 -
                                  (C50252 * ce) / C49694);
    const double C449 = C50021 * ((-3 * C49980) / C49694 + C49820 * C49989 -
                                  (C50252 * ce) / C49694);
    const double C599 = (-2 * C49975) / C49694 - (C49820 * C49980) / C49694 -
                        (C50247 * ce) / C49694 + C49989 * C50048;
    const double C826 = C50021 * C49823 * C49989;
    const double C956 = (-2 * C49975) / C49694 - (C49820 * C49980) / C49694 -
                        (C50247 * ce) / C49694 + C49989 * C50035;
    const double C50013 = C49820 * C50012;
    const double C701 =
        2 * C49823 * C49989 + C49823 * (C49989 + C50012 * C50048);
    const double C827 = C50021 * (C49989 + C50012 * C50048);
    const double C1084 = C49823 * C49989 + C49823 * C50012 * C50035;
    const double C1170 =
        2 * C50021 * C49989 + C50021 * (C49989 + C50012 * C50035);
    const double C6353 = C5956 + C5957;
    const double C6187 = C6168 + C6169;
    const double C7527 = C6996 + C6997;
    const double C7538 = C7536 - C6991;
    const double C332 = C321 + C322;
    const double C2361 = C2341 + C2342;
    const double C8189 = C8167 + C8168;
    const double C8380 = C8367 + C8368;
    const double C17322 = C17300 + C17301;
    const double C17513 = C17500 + C17501;
    const double C480 = C469 + C470;
    const double C8564 = C8551 + C8552;
    const double C17697 = C17684 + C17685;
    const double C623 = C614 + C615;
    const double C2356 = C2331 + C2332;
    const double C2543 = C2529 + C2530;
    const double C8375 = C8357 + C8358;
    const double C8736 = C8727 + C8728;
    const double C17508 = C17490 + C17491;
    const double C17869 = C17860 + C17861;
    const double C24751 = C24726 + C24727;
    const double C1543 = C1534 + C1535;
    const double C2725 = C2711 + C2712;
    const double C8559 = C8541 + C8542;
    const double C9904 = C9895 + C9896;
    const double C17692 = C17674 + C17675;
    const double C19037 = C19028 + C19029;
    const double C980 = C971 + C972;
    const double C9150 = C9141 + C9142;
    const double C18283 = C18274 + C18275;
    const double C2900 = C2891 + C2892;
    const double C25283 = C25274 + C25275;
    const double C6366 = C5969 + C5968;
    const double C47929 = C14855 * C50611;
    const double C49191 = C14855 * C50611;
    const double C22820 = C22800 * C50611;
    const double C24108 = C22800 * C50611;
    const double C6482 = C6354 + C6355;
    const double C40534 = C40533 - C7531;
    const double C39782 = C6373 + C6372;
    const double C48209 = C48199 * C50606;
    const double C23114 = C23104 * C50606;
    const double C39857 = C6493 + C6492;
    const double C149 =
        5 * (3 * C49889 - (C49886 * ce) / C49831 + C49820 * C49926) -
        ((4 * C49886 + C49820 * C49923) * ce) / C49831 +
        C49820 *
            (4 * C49926 - (C49923 * ce) / C49831 +
             C49820 *
                 (3 * C49924 - (C49919 * ce) / C49831 +
                  C49820 *
                      (2 * C49920 - (C49914 * ce) / C49831 +
                       C49820 * ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                                 C49907 / C49831 +
                                 C49820 * ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831)))));
    const double C308 =
        (((-3 * (C49820 * C49945 + C49935 + C49939 * ce)) / C49694 +
          C49820 * ((-2 * C49945) / C49694 -
                    (C49820 * (C49820 * (C49820 * C49865 * C49866 * C49930 +
                                         C49940 * ce) +
                               C49941 + C49820 * C49940 * ce)) /
                        C49694 -
                    (C49944 * ce) / C49694) -
          ((2 * C49939 + C49820 * C49944) * ce) / C49694) *
         ae) /
            C49760 +
        C49823 * (3 * C49889 - (C49886 * ce) / C49831 + C49820 * C49926);
    const double C309 =
        ((4 * ((-2 * C49945) / C49694 - (C49820 * C49962) / C49694 -
               (C49944 * ce) / C49694) +
          C49820 * ((-3 * C49962) / C49694 +
                    C49820 * ((-2 * C49957) / C49694 -
                              (C49820 *
                               (C49820 * (C49820 * C49895 * C49896 * C49930 +
                                          C49950 * ce) +
                                C49951 + C49820 * C49950 * ce)) /
                                  C49694 -
                              (C49956 * ce) / C49694) -
                    (C49960 * ce) / C49694) -
          ((3 * C49944 + C49820 * C49960) * ce) / C49694) *
         ae) /
            C49760 +
        C49823 *
            (4 * C49926 - (C49923 * ce) / C49831 +
             C49820 *
                 (3 * C49924 - (C49919 * ce) / C49831 +
                  C49820 *
                      (2 * C49920 - (C49914 * ce) / C49831 +
                       C49820 * ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                                 C49907 / C49831 +
                                 C49820 * ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831)))));
    const double C456 =
        (zP - zQ) * (3 * C49889 - (C49886 * ce) / C49831 + C49820 * C49926);
    const double C457 =
        (zP - zQ) *
        (4 * C49926 - (C49923 * ce) / C49831 +
         C49820 *
             (3 * C49924 - (C49919 * ce) / C49831 +
              C49820 * (2 * C49920 - (C49914 * ce) / C49831 +
                        C49820 * ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                                  C49907 / C49831 +
                                  C49820 * ((-(C49820 * std::pow(C49825, 8) *
                                               bs[8] * C49836) /
                                             C49694) /
                                                C49760 -
                                            (C49908 * ce) / C49831)))));
    const double C605 = 2 * C49861 - (C49858 * ce) / C49831 + C49820 * C49889 +
                        (C49823 * C49989 * ae) / C49760 +
                        C49823 * ((C49989 * ae) / C49760 + C49823 * C49926);
    const double C709 =
        2 * ((C49989 * ae) / C49760 + C49823 * C49926) +
        ((C49989 + C50012 * std::pow(C49823, 2)) * ae) / C49760 +
        C49823 *
            (C49926 + (C49823 * C50012 * ae) / C49760 +
             C49823 *
                 ((C50012 * ae) / C49760 +
                  C49823 *
                      (2 * C49920 - (C49914 * ce) / C49831 +
                       C49820 * ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                                 C49907 / C49831 +
                                 C49820 * ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831)))));
    const double C838 =
        (C50021 * C49989 * ae) / C49760 + C49823 * C50021 * C49926;
    const double C839 =
        C50021 * C49926 + (C50021 * C49823 * C50012 * ae) / C49760 +
        C49823 * ((C50021 * C50012 * ae) / C49760 +
                  C49823 * C50021 *
                      (2 * C49920 - (C49914 * ce) / C49831 +
                       C49820 * ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                                 C49907 / C49831 +
                                 C49820 * ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831))));
    const double C962 = 2 * C49861 - (C49858 * ce) / C49831 + C49820 * C49889 +
                        C49926 * std::pow(C50021, 2);
    const double C963 =
        3 * C49889 - (C49886 * ce) / C49831 + C49820 * C49926 +
        (3 * C49924 - (C49919 * ce) / C49831 +
         C49820 *
             (2 * C49920 - (C49914 * ce) / C49831 +
              C49820 *
                  ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                   C49907 / C49831 +
                   C49820 * ((-(C49820 * std::pow(C49825, 8) * bs[8] * C49836) /
                              C49694) /
                                 C49760 -
                             (C49908 * ce) / C49831)))) *
            std::pow(C50021, 2);
    const double C1092 =
        ((C49989 + C50012 * C50035) * ae) / C49760 +
        C49823 *
            (C49926 +
             (2 * C49920 - (C49914 * ce) / C49831 +
              C49820 *
                  ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                   C49907 / C49831 +
                   C49820 * ((-(C49820 * std::pow(C49825, 8) * bs[8] * C49836) /
                              C49694) /
                                 C49760 -
                             (C49908 * ce) / C49831))) *
                 C50035);
    const double C1178 =
        2 * C50021 * C49926 +
        C50021 *
            (C49926 +
             (2 * C49920 - (C49914 * ce) / C49831 +
              C49820 *
                  ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                   C49907 / C49831 +
                   C49820 * ((-(C49820 * std::pow(C49825, 8) * bs[8] * C49836) /
                              C49694) /
                                 C49760 -
                             (C49908 * ce) / C49831))) *
                 C50035);
    const double C2883 =
        3 * (C49889 - (ae * C50065) / C49831 + C49823 * C50071) +
        (((-2 * C50065) / C49694 - (C49823 * C50070) / C49694) * ae) / C49760 +
        C49823 *
            (2 * C50071 - (ae * C50070) / C49831 +
             C49823 *
                 (C49924 - (ae * C49823 * C50008) / C49831 +
                  C49823 *
                      (C49823 * ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                                 C49907 / C49831 +
                                 C49820 * ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831)) -
                       (ae * C50008) / C49831)));
    const double C2542 = C2527 + C2528;
    const double C8735 = C8725 + C8726;
    const double C17868 = C17858 + C17859;
    const double C24937 = C24922 + C24923;
    const double C2724 = C2709 + C2710;
    const double C9903 = C9893 + C9894;
    const double C11426 = C11423 + C11424;
    const double C19036 = C19026 + C19027;
    const double C25119 = C25104 + C25105;
    const double C5353 = C5348 + C5349;
    const double C9149 = C9139 + C9140;
    const double C18282 = C18272 + C18273;
    const double C5543 = C5534 + C5535;
    const double C3006 =
        4 * (2 * C50063 - (ae * C50062) / C49831 + C49823 * C50088) +
        (((-3 * C50062) / C49694 + C49823 * C50089) * ae) / C49760 +
        C49823 *
            (3 * C50088 + (C50089 * ae) / C49760 +
             C49823 *
                 (2 * C50082 - (ae * C50080) / C49831 +
                  C49823 *
                      (C49920 - (ae * C49823 * C50005) / C49831 +
                       C49823 * (C49823 * ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831) -
                                 (ae * C50005) / C49831))));
    const double C6371 = C6364 + C6365;
    const double C14871 = C14861 + C14862;
    const double C22828 = C22815 + C22816;
    const double C6191 = C6184 + C6185;
    const double C20447 =
        5 * (3 * C50112 + (C50109 * ae) / C49760 + C49823 * C50192) +
        ((4 * C50109 + C49823 * C50190) * ae) / C49760 +
        C49823 *
            (4 * C50192 + (C50190 * ae) / C49760 +
             C49823 *
                 (3 * C50189 + (C50185 * ae) / C49760 +
                  C49823 *
                      (2 * C50184 - (ae * C50174) / C49831 +
                       C49823 * ((-(ae * C49823 * C50000) / C49694) / C49760 -
                                 C49907 / C49831 +
                                 C49823 * ((-(C49823 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (ae * C50000) / C49831)))));
    const double C6192 = C6186 - C6162;
    const double C39677 = C39672 - C6172;
    const double C22830 = C22829 - C22819;
    const double C47933 = C47932 - C47928;
    const double C24757 = C24738 + C24739;
    const double C24754 = C24732 + C24733;
    const double C24749 = C24722 + C24723;
    const double C24746 = C24716 + C24717;
    const double C24745 = C24714 + C24715;
    const double C24742 = C24708 + C24709;
    const double C24939 = C24926 + C24927;
    const double C24936 = C24920 + C24921;
    const double C24931 = C24910 + C24911;
    const double C24928 = C24904 + C24905;
    const double C25121 = C25108 + C25109;
    const double C25118 = C25102 + C25103;
    const double C25113 = C25092 + C25093;
    const double C25110 = C25086 + C25087;
    const double C25285 = C25278 + C25279;
    const double C25282 = C25272 + C25273;
    const double C25693 = C25686 + C25687;
    const double C25690 = C25680 + C25681;
    const double C26441 = C26434 + C26435;
    const double C26438 = C26428 + C26429;
    const double C31335 = C31326 + C31327;
    const double C31332 = C31320 + C31321;
    const double C31761 = C31746 + C31747;
    const double C31758 = C31740 + C31741;
    const double C31755 = C31734 + C31735;
    const double C31752 = C31728 + C31729;
    const double C31927 = C31920 + C31921;
    const double C31924 = C31914 + C31915;
    const double C32089 = C32080 + C32081;
    const double C32086 = C32074 + C32075;
    const double C32205 = C32196 + C32197;
    const double C32202 = C32190 + C32191;
    const double C24756 = C24736 + C24737;
    const double C24753 = C24730 + C24731;
    const double C24750 = C24724 + C24725;
    const double C24747 = C24718 + C24719;
    const double C24744 = C24712 + C24713;
    const double C24741 = C24706 + C24707;
    const double C24938 = C24924 + C24925;
    const double C24935 = C24918 + C24919;
    const double C24932 = C24912 + C24913;
    const double C24929 = C24906 + C24907;
    const double C25120 = C25106 + C25107;
    const double C25117 = C25100 + C25101;
    const double C25114 = C25094 + C25095;
    const double C25111 = C25088 + C25089;
    const double C25284 = C25276 + C25277;
    const double C25281 = C25270 + C25271;
    const double C25692 = C25684 + C25685;
    const double C25689 = C25678 + C25679;
    const double C26440 = C26432 + C26433;
    const double C26437 = C26426 + C26427;
    const double C31336 = C31328 + C31329;
    const double C31333 = C31322 + C31323;
    const double C31762 = C31748 + C31749;
    const double C31759 = C31742 + C31743;
    const double C31756 = C31736 + C31737;
    const double C31753 = C31730 + C31731;
    const double C31926 = C31918 + C31919;
    const double C31923 = C31912 + C31913;
    const double C32090 = C32082 + C32083;
    const double C32087 = C32076 + C32077;
    const double C32206 = C32198 + C32199;
    const double C32203 = C32192 + C32193;
    const double C48100 = C48098 + C48099;
    const double C23001 = C22999 + C23000;
    const double C169 = C117 * C140;
    const double C325 = C117 * C301;
    const double C8175 = C8145 * C301;
    const double C17308 = C17278 * C301;
    const double C473 = C117 * C449;
    const double C618 = C117 * C599;
    const double C2339 = C2307 * C599;
    const double C8365 = C8145 * C599;
    const double C17498 = C17278 * C599;
    const double C24734 = C24702 * C599;
    const double C1538 = C117 * C826;
    const double C8549 = C8145 * C826;
    const double C17682 = C17278 * C826;
    const double C975 = C117 * C956;
    const double C50014 = C49998 + C50013;
    const double C6193 = C6187 - C6170;
    const double C7537 = C7527 - C6998;
    const double C8198 = C8189 + C8190;
    const double C17331 = C17322 + C17323;
    const double C5521 = C480 * C280;
    const double C7179 = C480 * C1282;
    const double C11272 = C480 * C279;
    const double C11826 = C480 * C50611;
    const double C12570 = C480 * C50611;
    const double C12724 = C480 * C50920;
    const double C8382 = C8375 + C8376;
    const double C17515 = C17508 + C17509;
    const double C7011 = C1543 * C50611;
    const double C7745 = C1543 * C50611;
    const double C11674 = C1543 * C50606;
    const double C12572 = C1543 * C1386;
    const double C13266 = C1543 * C50878;
    const double C8566 = C8559 + C8560;
    const double C14090 = C8560 + C8559;
    const double C17699 = C17692 + C17693;
    const double C27935 = C17693 + C17692;
    const double C5525 = C980 * C279;
    const double C5515 = C980 * C280;
    const double C6171 = C980 * C50611;
    const double C6999 = C980 * C50611;
    const double C7183 = C980 * C50920;
    const double C7173 = C980 * C1282;
    const double C11828 = C980 * C50878;
    const double C11977 = C980 * C50606;
    const double C13068 = C980 * C1386;
    const double C49194 = C49193 - C49191;
    const double C24111 = C24110 - C24108;
    const double C48215 = C48209 + C48210;
    const double C23120 = C23114 + C23115;
    const double C326 = C50748 * C308;
    const double C8176 = C50800 * C308;
    const double C17309 = C50800 * C308;
    const double C474 = C50748 * C456;
    const double C619 = C50748 * C605;
    const double C2340 = C2302 * C605;
    const double C8366 = C50800 * C605;
    const double C17499 = C50800 * C605;
    const double C24735 = C24697 * C605;
    const double C1539 = C50748 * C838;
    const double C8550 = C50800 * C838;
    const double C17683 = C50800 * C838;
    const double C976 = C50748 * C962;
    const double C11676 = C11426 * C50606;
    const double C7015 = C5353 * C50611;
    const double C7749 = C5353 * C50611;
    const double C11980 = C5353 * C50606;
    const double C6181 = C5543 * C50611;
    const double C7535 = C5543 * C50611;
    const double C12080 = C5543 * C50606;
    const double C39303 = C5543 * C280;
    const double C40299 = C5543 * C1282;
    const double C6375 = C6371 * C50606;
    const double C40195 = C6371 * C50611;
    const double C40668 = C6371 * C50611;
    const double C6489 = C6191 * C50606;
    const double C39676 = C6191 * C50611;
    const double C40532 = C6191 * C50611;
    const double C6196 = C6192 - C6163;
    const double C39678 = C39677 - C6177;
    const double C22831 = C22830 - C22820;
    const double C47934 = C47933 - C47929;
    const double C180 = C169 + C170;
    const double C50015 = C50014 - C50003;
    const double C6197 = C6193 - C6171;
    const double C7539 = C7537 - C6999;
    const double C334 = C325 + C326;
    const double C8193 = C8175 + C8176;
    const double C17326 = C17308 + C17309;
    const double C482 = C473 + C474;
    const double C625 = C618 + C619;
    const double C2360 = C2339 + C2340;
    const double C8379 = C8365 + C8366;
    const double C17512 = C17498 + C17499;
    const double C24755 = C24734 + C24735;
    const double C1545 = C1538 + C1539;
    const double C8563 = C8549 + C8550;
    const double C17696 = C17682 + C17683;
    const double C982 = C975 + C976;
    const double C606 =
        3 * C49889 - (C49886 * ce) / C49831 + C49820 * C49926 +
        (C49823 * C50015 * ae) / C49760 +
        C49823 *
            ((C50015 * ae) / C49760 +
             C49823 *
                 (3 * C49924 - (C49919 * ce) / C49831 +
                  C49820 *
                      (2 * C49920 - (C49914 * ce) / C49831 +
                       C49820 * ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                                 C49907 / C49831 +
                                 C49820 * ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831)))));
    const double C1526 =
        (C50021 * C50015 * ae) / C49760 +
        C49823 * C50021 *
            (3 * C49924 - (C49919 * ce) / C49831 +
             C49820 * (2 * C49920 - (C49914 * ce) / C49831 +
                       C49820 * ((-(C49820 * C49908 * ce) / C49694) / C49760 -
                                 C49907 / C49831 +
                                 C49820 * ((-(C49820 * std::pow(C49825, 8) *
                                              bs[8] * C49836) /
                                            C49694) /
                                               C49760 -
                                           (C49908 * ce) / C49831))));
    const double C142 =
        5 * ((-3 * C49980) / C49694 + C49820 * C49989 -
             (C50252 * ce) / C49694) +
        C49820 * (4 * C49989 + C49820 * C50015 - (C50257 * ce) / C49694) -
        ((4 * C50252 + C49820 * C50257) * ce) / C49694;
    const double C303 =
        C49823 * (4 * C49989 + C49820 * C50015 - (C50257 * ce) / C49694);
    const double C451 =
        C50021 * (4 * C49989 + C49820 * C50015 - (C50257 * ce) / C49694);
    const double C601 = (-3 * C49980) / C49694 + C49820 * C49989 -
                        (C50252 * ce) / C49694 + C50015 * C50048;
    const double C958 = (-3 * C49980) / C49694 + C49820 * C49989 -
                        (C50252 * ce) / C49694 + C50015 * C50035;
    const double C1525 = C50021 * C49823 * C50015;
    const double C11274 = C482 * C280;
    const double C12726 = C482 * C1282;
    const double C12574 = C1545 * C50611;
    const double C13268 = C1545 * C50611;
    const double C5527 = C982 * C280;
    const double C7185 = C982 * C1282;
    const double C11830 = C982 * C50611;
    const double C13070 = C982 * C50611;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C1285 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50936 -
            (C8179 + C8180) * C1286 - (C8181 + C8182) * C50920 + C8195 * C1287 +
            C8196 * C1282) *
               C50764 * C50937 +
           ((C8180 + C8179) * C1285 + (C8182 + C8181) * C50936 -
            (C8184 + C8183) * C1286 - (C8186 + C8185) * C50920 +
            (C8188 + C8187) * C1287 + (C8190 + C8189) * C1282) *
               C50764 * C50938 +
           (C8195 * C1285 + C8196 * C50936 - C8197 * C1286 - C8198 * C50920 +
            (C8192 + C8191) * C1287 + (C8194 + C8193) * C1282) *
               C50764 * C8143) *
              C50694 * C1283 +
          (((C8369 + C8370) * C1286 -
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50936 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C1285) +
            (C8371 + C8372) * C50920 - C8381 * C1287 - C8382 * C1282) *
               C50764 * C50937 +
           ((C8374 + C8373) * C1286 -
            ((C8372 + C8371) * C50936 + (C8370 + C8369) * C1285) +
            (C8376 + C8375) * C50920 - (C8377 + C8378) * C1287 -
            (C8379 + C8380) * C1282) *
               C50764 * C50938 +
           ((C8378 + C8377) * C1286 - (C8382 * C50936 + C8381 * C1285) +
            (C8380 + C8379) * C50920 -
            (C8145 * C591 + C50800 * C600 + C8144 * C290 + C50908 * C300) *
                C1287 -
            (C8145 * C601 + C50800 * C606 + C8144 * C301 + C50908 * C308) *
                C1282) *
               C50764 * C8143) *
              C50694 * C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C1391 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C1386 -
            (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
               C50764 * C50937 +
           ((C8180 + C8179) * C1391 + (C8182 + C8181) * C1386 -
            (C8184 + C8183) * C1392 - (C8186 + C8185) * C50611) *
               C50764 * C50938 +
           (C8195 * C1391 + C8196 * C1386 - C8197 * C1392 - C8198 * C50611) *
               C50764 * C8143) *
              C50694 * C50939 +
          (((C8369 + C8370) * C1392 -
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C1386 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C1391) +
            (C8371 + C8372) * C50611) *
               C50764 * C50937 +
           ((C8374 + C8373) * C1392 -
            ((C8372 + C8371) * C1386 + (C8370 + C8369) * C1391) +
            (C8376 + C8375) * C50611) *
               C50764 * C50938 +
           ((C8378 + C8377) * C1392 - (C8382 * C1386 + C8381 * C1391) +
            (C8380 + C8379) * C50611) *
               C50764 * C8143) *
              C50694 * C50926 +
          (((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                C1391 +
            (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                C1386 -
            (C8729 + C8730) * C1392 - (C8731 + C8732) * C50611) *
               C50764 * C50937 +
           ((C8730 + C8729) * C1391 + (C8732 + C8731) * C1386 -
            (C8733 + C8734) * C1392 - (C8735 + C8736) * C50611) *
               C50764 * C50938 +
           ((C8734 + C8733) * C1391 + (C8736 + C8735) * C1386 -
            (C8145 * C697 + C50800 * C702 + C8144 * C590 + C50908 * C598) *
                C1392 -
            (C8145 * C701 + C50800 * C709 + C8144 * C599 + C50908 * C605) *
                C50611) *
               C50764 * C8143) *
              C50694 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C1391 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C1386 -
             (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
                C50764 * C50937 +
            ((C8180 + C8179) * C1391 + (C8182 + C8181) * C1386 -
             (C8184 + C8183) * C1392 - (C8186 + C8185) * C50611) *
                C50764 * C50938 +
            (C8195 * C1391 + C8196 * C1386 - C8197 * C1392 - C8198 * C50611) *
                C50764 * C8143) *
               C50894 +
           (((C8553 + C8554) * C1392 -
             ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                  C1386 +
              (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                  C1391) +
             (C8555 + C8556) * C50611) *
                C50764 * C50937 +
            ((C8558 + C8557) * C1392 -
             ((C8556 + C8555) * C1386 + (C8554 + C8553) * C1391) +
             (C8560 + C8559) * C50611) *
                C50764 * C50938 +
            ((C8562 + C8561) * C1392 - (C8566 * C1386 + C8565 * C1391) +
             (C8564 + C8563) * C50611) *
                C50764 * C8143) *
               C50706) *
              C1283 +
          ((((C8369 + C8370) * C1392 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C1386 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C1391) +
             (C8371 + C8372) * C50611) *
                C50764 * C50937 +
            ((C8374 + C8373) * C1392 -
             ((C8372 + C8371) * C1386 + (C8370 + C8369) * C1391) +
             (C8376 + C8375) * C50611) *
                C50764 * C50938 +
            ((C8378 + C8377) * C1392 - (C8382 * C1386 + C8381 * C1391) +
             (C8380 + C8379) * C50611) *
                C50764 * C8143) *
               C50894 +
           (((C8144 * C811 + C50908 * C819 + C8145 * C818 + C50800 * C834) *
                 C1391 +
             (C8144 * C820 + C50908 * C835 + C8145 * C833 + C50800 * C842) *
                 C1386 -
             (C9897 + C9898) * C1392 - (C9899 + C9900) * C50611) *
                C50764 * C50937 +
            ((C9898 + C9897) * C1391 + (C9900 + C9899) * C1386 -
             (C9901 + C9902) * C1392 - (C9903 + C9904) * C50611) *
                C50764 * C50938 +
            ((C9902 + C9901) * C1391 + (C9904 + C9903) * C1386 -
             (C8145 * C815 + C50800 * C828 + C8144 * C814 + C50908 * C825) *
                 C1392 -
             (C8145 * C827 + C50800 * C839 + C8144 * C826 + C50908 * C838) *
                 C50611) *
                C50764 * C8143) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C49720 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50878 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
                C50764 * C50937 +
            ((C8180 + C8179) * C49720 + (C8182 + C8181) * C50878 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50611) *
                C50764 * C50938 +
            (C8195 * C49720 + C8196 * C50878 - C8197 * C49713 -
             C8198 * C50611) *
                C50764 * C8143) *
               C1643 +
           (((C8553 + C8554) * C49713 -
             ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                  C50878 +
              (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                  C49720) +
             (C8555 + C8556) * C50611) *
                C50764 * C50937 +
            ((C8558 + C8557) * C49713 -
             ((C8556 + C8555) * C50878 + (C8554 + C8553) * C49720) +
             (C8560 + C8559) * C50611) *
                C50764 * C50938 +
            ((C8562 + C8561) * C49713 - (C8566 * C50878 + C8565 * C49720) +
             (C8564 + C8563) * C50611) *
                C50764 * C8143) *
               C50706) *
              C1283 +
          ((((C8369 + C8370) * C49713 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50878 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C49720) +
             (C8371 + C8372) * C50611) *
                C50764 * C50937 +
            ((C8374 + C8373) * C49713 -
             ((C8372 + C8371) * C50878 + (C8370 + C8369) * C49720) +
             (C8376 + C8375) * C50611) *
                C50764 * C50938 +
            ((C8378 + C8377) * C49713 - (C8382 * C50878 + C8381 * C49720) +
             (C8380 + C8379) * C50611) *
                C50764 * C8143) *
               C1643 +
           (((C8144 * C811 + C50908 * C819 + C8145 * C818 + C50800 * C834) *
                 C49720 +
             (C8144 * C820 + C50908 * C835 + C8145 * C833 + C50800 * C842) *
                 C50878 -
             (C9897 + C9898) * C49713 - (C9899 + C9900) * C50611) *
                C50764 * C50937 +
            ((C9898 + C9897) * C49720 + (C9900 + C9899) * C50878 -
             (C9901 + C9902) * C49713 - (C9903 + C9904) * C50611) *
                C50764 * C50938 +
            ((C9902 + C9901) * C49720 + (C9904 + C9903) * C50878 -
             (C8145 * C815 + C50800 * C828 + C8144 * C814 + C50908 * C825) *
                 C49713 -
             (C8145 * C827 + C50800 * C839 + C8144 * C826 + C50908 * C838) *
                 C50611) *
                C50764 * C8143) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C50937 +
            ((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50764 *
                C50938 +
            (C8195 * C696 + C8196 * C50606) * C50764 * C8143) *
               C1643 -
           ((C8566 * C50606 + C8565 * C696) * C50764 * C8143 +
            ((C8556 + C8555) * C50606 + (C8554 + C8553) * C696) * C50764 *
                C50938 +
            ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                 C50606 +
             (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                 C696) *
                C50764 * C50937) *
               C50706) *
              C50939 +
          ((((C8144 * C811 + C50908 * C819 + C8145 * C818 + C50800 * C834) *
                 C696 +
             (C8144 * C820 + C50908 * C835 + C8145 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C50937 +
            ((C9898 + C9897) * C696 + (C9900 + C9899) * C50606) * C50764 *
                C50938 +
            ((C9902 + C9901) * C696 + (C9904 + C9903) * C50606) * C50764 *
                C8143) *
               C50706 -
           ((C8382 * C50606 + C8381 * C696) * C50764 * C8143 +
            ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50764 *
                C50938 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C50764 * C50937) *
               C1643) *
              C50926 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C696 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50606) *
                C50764 * C50937 +
            ((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C50764 *
                C50938 +
            ((C8734 + C8733) * C696 + (C8736 + C8735) * C50606) * C50764 *
                C8143) *
               C1643 -
           (((C8145 * C4102 + C50800 * C4103 + C8144 * C829 + C50908 * C840) *
                 C50606 +
             (C8145 * C4100 + C50800 * C4101 + C8144 * C816 + C50908 * C830) *
                 C696) *
                C50764 * C8143 +
            ((C8145 * C3161 + C50800 * C3167 + C8144 * C831 + C50908 * C841) *
                 C50606 +
             (C8145 * C3155 + C50800 * C3160 + C8144 * C817 + C50908 * C832) *
                 C696) *
                C50764 * C50938 +
            ((C8145 * C3159 + C50800 * C3166 + C8144 * C833 + C50908 * C842) *
                 C50606 +
             (C8145 * C3154 + C50800 * C3158 + C8144 * C818 + C50908 * C834) *
                 C696) *
                C50764 * C50937) *
               C50706) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C50937 +
            ((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50764 *
                C50938 +
            (C8195 * C696 + C8196 * C50606) * C50764 * C8143) *
               C50940 -
           ((C8566 * C50606 + C8565 * C696) * C50764 * C8143 +
            ((C8556 + C8555) * C50606 + (C8554 + C8553) * C696) * C50764 *
                C50938 +
            ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                 C50606 +
             (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                 C696) *
                C50764 * C50937) *
               C50929 +
           (((C8144 * C944 + C50908 * C949 + C8145 * C1083 + C50800 * C1091) *
                 C696 +
             (C8144 * C950 + C50908 * C959 + C8145 * C1090 + C50800 * C1095) *
                 C50606) *
                C50764 * C50937 +
            ((C9144 + C9143) * C696 + (C9146 + C9145) * C50606) * C50764 *
                C50938 +
            ((C9148 + C9147) * C696 + (C9150 + C9149) * C50606) * C50764 *
                C8143) *
               C1875) *
              C1283 +
          ((((C8144 * C811 + C50908 * C819 + C8145 * C818 + C50800 * C834) *
                 C696 +
             (C8144 * C820 + C50908 * C835 + C8145 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C50937 +
            ((C9898 + C9897) * C696 + (C9900 + C9899) * C50606) * C50764 *
                C50938 +
            ((C9902 + C9901) * C696 + (C9904 + C9903) * C50606) * C50764 *
                C8143) *
               C50929 -
           ((C8382 * C50606 + C8381 * C696) * C50764 * C8143 +
            ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50764 *
                C50938 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C50764 * C50937) *
               C50940 -
           (((C8145 * C3324 + C50800 * C3327 + C8144 * C1086 + C50908 * C1093) *
                 C50606 +
             (C8145 * C3318 + C50800 * C3323 + C8144 * C1081 + C50908 * C1087) *
                 C696) *
                C50764 * C8143 +
            ((C8145 * C3322 + C50800 * C3326 + C8144 * C1088 + C50908 * C1094) *
                 C50606 +
             (C8145 * C3317 + C50800 * C3321 + C8144 * C1082 + C50908 * C1089) *
                 C696) *
                C50764 * C50938 +
            ((C8145 * C3320 + C50800 * C3325 + C8144 * C1090 + C50908 * C1095) *
                 C50606 +
             (C8145 * C3316 + C50800 * C3319 + C8144 * C1083 + C50908 * C1091) *
                 C696) *
                C50764 * C50937) *
               C1875) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C49720 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50878 -
            (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
               C50764 * C50937 +
           ((C8180 + C8179) * C49720 + (C8182 + C8181) * C50878 -
            (C8184 + C8183) * C49713 - (C8186 + C8185) * C50611) *
               C50764 * C50938 +
           (C8195 * C49720 + C8196 * C50878 - C8197 * C49713 - C8198 * C50611) *
               C50764 * C8143) *
              C50694 * C582 +
          (((C8369 + C8370) * C49713 -
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50878 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C49720) +
            (C8371 + C8372) * C50611) *
               C50764 * C50937 +
           ((C8374 + C8373) * C49713 -
            ((C8372 + C8371) * C50878 + (C8370 + C8369) * C49720) +
            (C8376 + C8375) * C50611) *
               C50764 * C50938 +
           ((C8378 + C8377) * C49713 - (C8382 * C50878 + C8381 * C49720) +
            (C8380 + C8379) * C50611) *
               C50764 * C8143) *
              C50694 * C583 +
          (((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                C49720 +
            (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                C50878 -
            (C8729 + C8730) * C49713 - (C8731 + C8732) * C50611) *
               C50764 * C50937 +
           ((C8730 + C8729) * C49720 + (C8732 + C8731) * C50878 -
            (C8733 + C8734) * C49713 - (C8735 + C8736) * C50611) *
               C50764 * C50938 +
           ((C8734 + C8733) * C49720 + (C8736 + C8735) * C50878 -
            (C8145 * C697 + C50800 * C702 + C8144 * C590 + C50908 * C598) *
                C49713 -
            (C8145 * C701 + C50800 * C709 + C8144 * C599 + C50908 * C605) *
                C50611) *
               C50764 * C8143) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
               C118 +
           (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
               C106 -
           (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
           C8196 * C108 - C8197 * C121 - C8198 * C109) *
              C50764 * C50937 +
          ((C8180 + C8179) * C118 + (C8182 + C8181) * C106 -
           (C8184 + C8183) * C119 - (C8186 + C8185) * C107 +
           (C8188 + C8187) * C120 + (C8190 + C8189) * C108 -
           (C8191 + C8192) * C121 - (C8193 + C8194) * C109) *
              C50764 * C50938 +
          (C8195 * C118 + C8196 * C106 - C8197 * C119 - C8198 * C107 +
           (C8192 + C8191) * C120 + (C8194 + C8193) * C108 -
           (C8145 * C291 + C50800 * C302 + C8144 * C127 + C50908 * C139) *
               C121 -
           (C8145 * C303 + C50800 * C309 + C8144 * C140 + C50908 * C148) *
               C109) *
              C50764 * C8143) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C49720 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50878 -
            (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
               C50764 * C50937 +
           ((C8180 + C8179) * C49720 + (C8182 + C8181) * C50878 -
            (C8184 + C8183) * C49713 - (C8186 + C8185) * C50611) *
               C50764 * C50938 +
           (C8195 * C49720 + C8196 * C50878 - C8197 * C49713 - C8198 * C50611) *
               C50764 * C8143) *
              C941 +
          (((C8553 + C8554) * C49713 -
            ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                 C50878 +
             (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                 C49720) +
            (C8555 + C8556) * C50611) *
               C50764 * C50937 +
           ((C8558 + C8557) * C49713 -
            ((C8556 + C8555) * C50878 + (C8554 + C8553) * C49720) +
            (C8560 + C8559) * C50611) *
               C50764 * C50938 +
           ((C8562 + C8561) * C49713 - (C8566 * C50878 + C8565 * C49720) +
            (C8564 + C8563) * C50611) *
               C50764 * C8143) *
              C942 +
          (((C8144 * C944 + C50908 * C949 + C8145 * C1083 + C50800 * C1091) *
                C49720 +
            (C8144 * C950 + C50908 * C959 + C8145 * C1090 + C50800 * C1095) *
                C50878 -
            (C9143 + C9144) * C49713 - (C9145 + C9146) * C50611) *
               C50764 * C50937 +
           ((C9144 + C9143) * C49720 + (C9146 + C9145) * C50878 -
            (C9147 + C9148) * C49713 - (C9149 + C9150) * C50611) *
               C50764 * C50938 +
           ((C9148 + C9147) * C49720 + (C9150 + C9149) * C50878 -
            (C8145 * C1080 + C50800 * C1085 + C8144 * C947 + C50908 * C955) *
                C49713 -
            (C8145 * C1084 + C50800 * C1092 + C8144 * C956 + C50908 * C962) *
                C50611) *
               C50764 * C8143) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C696 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50606) *
               C50764 * C50937 +
           ((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50764 *
               C50938 +
           (C8195 * C696 + C8196 * C50606) * C50764 * C8143) *
              C50694 * C692 -
          ((C8382 * C50606 + C8381 * C696) * C50764 * C8143 +
           ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50764 *
               C50938 +
           ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                C50606 +
            (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                C696) *
               C50764 * C50937) *
              C50694 * C693 +
          (((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                C696 +
            (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                C50606) *
               C50764 * C50937 +
           ((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C50764 *
               C50938 +
           ((C8734 + C8733) * C696 + (C8736 + C8735) * C50606) * C50764 *
               C8143) *
              C50694 * C694 -
          (((C8145 * C2880 + C50800 * C2883 + C8144 * C703 + C50908 * C710) *
                C50606 +
            (C8145 * C2874 + C50800 * C2879 + C8144 * C698 + C50908 * C704) *
                C696) *
               C50764 * C8143 +
           ((C8145 * C2878 + C50800 * C2882 + C8144 * C705 + C50908 * C711) *
                C50606 +
            (C8145 * C2873 + C50800 * C2877 + C8144 * C699 + C50908 * C706) *
                C696) *
               C50764 * C50938 +
           ((C8145 * C2876 + C50800 * C2881 + C8144 * C707 + C50908 * C712) *
                C50606 +
            (C8145 * C2872 + C50800 * C2875 + C8144 * C700 + C50908 * C708) *
                C696) *
               C50764 * C50937) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C283 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
            C8196 * C280) *
               C50764 * C50937 +
           ((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
            (C8184 + C8183) * C284 - (C8186 + C8185) * C279 +
            (C8188 + C8187) * C285 + (C8190 + C8189) * C280) *
               C50764 * C50938 +
           (C8195 * C283 + C8196 * C278 - C8197 * C284 - C8198 * C279 +
            (C8192 + C8191) * C285 + (C8194 + C8193) * C280) *
               C50764 * C8143) *
              C50694 * C50893 +
          (((C8369 + C8370) * C284 -
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C278 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C283) +
            (C8371 + C8372) * C279 - C8381 * C285 - C8382 * C280) *
               C50764 * C50937 +
           ((C8374 + C8373) * C284 -
            ((C8372 + C8371) * C278 + (C8370 + C8369) * C283) +
            (C8376 + C8375) * C279 - (C8377 + C8378) * C285 -
            (C8379 + C8380) * C280) *
               C50764 * C50938 +
           ((C8378 + C8377) * C284 - (C8382 * C278 + C8381 * C283) +
            (C8380 + C8379) * C279 -
            (C8145 * C591 + C50800 * C600 + C8144 * C290 + C50908 * C300) *
                C285 -
            (C8145 * C601 + C50800 * C606 + C8144 * C301 + C50908 * C308) *
                C280) *
               C50764 * C8143) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C50937 +
            ((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50764 *
                C50938 +
            (C8195 * C696 + C8196 * C50606) * C50764 * C8143) *
               C941 -
           ((C8566 * C50606 + C8565 * C696) * C50764 * C8143 +
            ((C8556 + C8555) * C50606 + (C8554 + C8553) * C696) * C50764 *
                C50938 +
            ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                 C50606 +
             (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                 C696) *
                C50764 * C50937) *
               C942 +
           (((C8144 * C944 + C50908 * C949 + C8145 * C1083 + C50800 * C1091) *
                 C696 +
             (C8144 * C950 + C50908 * C959 + C8145 * C1090 + C50800 * C1095) *
                 C50606) *
                C50764 * C50937 +
            ((C9144 + C9143) * C696 + (C9146 + C9145) * C50606) * C50764 *
                C50938 +
            ((C9148 + C9147) * C696 + (C9150 + C9149) * C50606) * C50764 *
                C8143) *
               C943) *
              C50893 +
          ((((C8144 * C811 + C50908 * C819 + C8145 * C818 + C50800 * C834) *
                 C696 +
             (C8144 * C820 + C50908 * C835 + C8145 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C50937 +
            ((C8144 * C812 + C50908 * C821 + C8145 * C817 + C50800 * C832) *
                 C696 +
             (C8144 * C822 + C50908 * C836 + C8145 * C831 + C50800 * C841) *
                 C50606) *
                C50764 * C50938 +
            ((C8144 * C813 + C50908 * C823 + C8145 * C816 + C50800 * C830) *
                 C696 +
             (C8144 * C824 + C50908 * C837 + C8145 * C829 + C50800 * C840) *
                 C50606) *
                C50764 * C8143) *
               C942 -
           ((C8382 * C50606 + C8381 * C696) * C50764 * C8143 +
            ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50764 *
                C50938 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C50764 * C50937) *
               C941 -
           (((C8145 * C3324 + C50800 * C3327 + C8144 * C1086 + C50908 * C1093) *
                 C50606 +
             (C8145 * C3318 + C50800 * C3323 + C8144 * C1081 + C50908 * C1087) *
                 C696) *
                C50764 * C8143 +
            ((C8145 * C3322 + C50800 * C3326 + C8144 * C1088 + C50908 * C1094) *
                 C50606 +
             (C8145 * C3317 + C50800 * C3321 + C8144 * C1082 + C50908 * C1089) *
                 C696) *
                C50764 * C50938 +
            ((C8145 * C3320 + C50800 * C3325 + C8144 * C1090 + C50908 * C1095) *
                 C50606 +
             (C8145 * C3316 + C50800 * C3319 + C8144 * C1083 + C50908 * C1091) *
                 C696) *
                C50764 * C50937) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C50937 +
            ((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50764 *
                C50938 +
            (C8195 * C696 + C8196 * C50606) * C50764 * C8143) *
               C50894 -
           ((C8566 * C50606 + C8565 * C696) * C50764 * C8143 +
            ((C8556 + C8555) * C50606 + (C8554 + C8553) * C696) * C50764 *
                C50938 +
            ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                 C50606 +
             (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                 C696) *
                C50764 * C50937) *
               C50706) *
              C582 +
          ((((C8144 * C811 + C50908 * C819 + C8145 * C818 + C50800 * C834) *
                 C696 +
             (C8144 * C820 + C50908 * C835 + C8145 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C50937 +
            ((C8144 * C812 + C50908 * C821 + C8145 * C817 + C50800 * C832) *
                 C696 +
             (C8144 * C822 + C50908 * C836 + C8145 * C831 + C50800 * C841) *
                 C50606) *
                C50764 * C50938 +
            ((C8144 * C813 + C50908 * C823 + C8145 * C816 + C50800 * C830) *
                 C696 +
             (C8144 * C824 + C50908 * C837 + C8145 * C829 + C50800 * C840) *
                 C50606) *
                C50764 * C8143) *
               C50706 -
           ((C8382 * C50606 + C8381 * C696) * C50764 * C8143 +
            ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50764 *
                C50938 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C50764 * C50937) *
               C50894) *
              C583 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C696 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50606) *
                C50764 * C50937 +
            ((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C50764 *
                C50938 +
            ((C8734 + C8733) * C696 + (C8736 + C8735) * C50606) * C50764 *
                C8143) *
               C50894 -
           (((C8145 * C4102 + C50800 * C4103 + C8144 * C829 + C50908 * C840) *
                 C50606 +
             (C8145 * C4100 + C50800 * C4101 + C8144 * C816 + C50908 * C830) *
                 C696) *
                C50764 * C8143 +
            ((C8145 * C3161 + C50800 * C3167 + C8144 * C831 + C50908 * C841) *
                 C50606 +
             (C8145 * C3155 + C50800 * C3160 + C8144 * C817 + C50908 * C832) *
                 C696) *
                C50764 * C50938 +
            ((C8145 * C3159 + C50800 * C3166 + C8144 * C833 + C50908 * C842) *
                 C50606 +
             (C8145 * C3154 + C50800 * C3158 + C8144 * C818 + C50908 * C834) *
                 C696) *
                C50764 * C50937) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C283 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
            C8196 * C280) *
               C50764 * C50937 +
           ((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
            (C8184 + C8183) * C284 - (C8186 + C8185) * C279 +
            (C8188 + C8187) * C285 + (C8190 + C8189) * C280) *
               C50764 * C50938 +
           (C8195 * C283 + C8196 * C278 - C8197 * C284 - C8198 * C279 +
            (C8192 + C8191) * C285 + (C8194 + C8193) * C280) *
               C50764 * C8143) *
              C50894 +
          (((C8553 + C8554) * C284 -
            ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                 C278 +
             (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                 C283) +
            (C8555 + C8556) * C279 - C8565 * C285 - C8566 * C280) *
               C50764 * C50937 +
           ((C8558 + C8557) * C284 -
            ((C8556 + C8555) * C278 + (C8554 + C8553) * C283) +
            (C8560 + C8559) * C279 - (C8561 + C8562) * C285 -
            (C8563 + C8564) * C280) *
               C50764 * C50938 +
           ((C8562 + C8561) * C284 - (C8566 * C278 + C8565 * C283) +
            (C8564 + C8563) * C279 -
            (C8145 * C1523 + C50800 * C1524 + C8144 * C438 + C50908 * C448) *
                C285 -
            (C8145 * C1525 + C50800 * C1526 + C8144 * C449 + C50908 * C456) *
                C280) *
               C50764 * C8143) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C696 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50606) *
               C50764 * C50937 +
           ((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50764 *
               C50938 +
           (C8195 * C696 + C8196 * C50606) * C50764 * C8143) *
              C1162 -
          ((C8566 * C50606 + C8565 * C696) * C50764 * C8143 +
           ((C8556 + C8555) * C50606 + (C8554 + C8553) * C696) * C50764 *
               C50938 +
           ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                C50606 +
            (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                C696) *
               C50764 * C50937) *
              C1163 +
          (((C8144 * C944 + C50908 * C949 + C8145 * C1083 + C50800 * C1091) *
                C696 +
            (C8144 * C950 + C50908 * C959 + C8145 * C1090 + C50800 * C1095) *
                C50606) *
               C50764 * C50937 +
           ((C9144 + C9143) * C696 + (C9146 + C9145) * C50606) * C50764 *
               C50938 +
           ((C9148 + C9147) * C696 + (C9150 + C9149) * C50606) * C50764 *
               C8143) *
              C1164 -
          (((C8145 * C6981 + C50800 * C6982 + C8144 * C1172 + C50908 * C1179) *
                C50606 +
            (C8145 * C6979 + C50800 * C6980 + C8144 * C1167 + C50908 * C1173) *
                C696) *
               C50764 * C8143 +
           ((C8145 * C3603 + C50800 * C3611 + C8144 * C1174 + C50908 * C1180) *
                C50606 +
            (C8145 * C3599 + C50800 * C3605 + C8144 * C1168 + C50908 * C1175) *
                C696) *
               C50764 * C50938 +
           ((C8145 * C3607 + C50800 * C3613 + C8144 * C1176 + C50908 * C1181) *
                C50606 +
            (C8145 * C3601 + C50800 * C3609 + C8144 * C1169 + C50908 * C1177) *
                C696) *
               C50764 * C50937) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C1285 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50936 -
            (C8179 + C8180) * C1286 - (C8181 + C8182) * C50920 + C8195 * C1287 +
            C8196 * C1282) *
               C50764 * C50937 +
           ((C8180 + C8179) * C1285 + (C8182 + C8181) * C50936 -
            (C8184 + C8183) * C1286 - (C8186 + C8185) * C50920 +
            (C8188 + C8187) * C1287 + (C8190 + C8189) * C1282) *
               C50764 * C50938 +
           (C8195 * C1285 + C8196 * C50936 - C8197 * C1286 - C8198 * C50920 +
            (C8192 + C8191) * C1287 + (C8194 + C8193) * C1282) *
               C50764 * C8143) *
              C1643 +
          (((C8553 + C8554) * C1286 -
            ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                 C50936 +
             (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                 C1285) +
            (C8555 + C8556) * C50920 - C8565 * C1287 - C8566 * C1282) *
               C50764 * C50937 +
           ((C8558 + C8557) * C1286 -
            ((C8556 + C8555) * C50936 + (C8554 + C8553) * C1285) +
            (C8560 + C8559) * C50920 - (C8561 + C8562) * C1287 -
            (C8563 + C8564) * C1282) *
               C50764 * C50938 +
           ((C8562 + C8561) * C1286 - (C8566 * C50936 + C8565 * C1285) +
            (C8564 + C8563) * C50920 -
            (C8145 * C1523 + C50800 * C1524 + C8144 * C438 + C50908 * C448) *
                C1287 -
            (C8145 * C1525 + C50800 * C1526 + C8144 * C449 + C50908 * C456) *
                C1282) *
               C50764 * C8143) *
              C50706) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C1391 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C1386 -
             (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
                C50764 * C50937 +
            ((C8180 + C8179) * C1391 + (C8182 + C8181) * C1386 -
             (C8184 + C8183) * C1392 - (C8186 + C8185) * C50611) *
                C50764 * C50938 +
            (C8195 * C1391 + C8196 * C1386 - C8197 * C1392 - C8198 * C50611) *
                C50764 * C8143) *
               C1643 +
           (((C8553 + C8554) * C1392 -
             ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                  C1386 +
              (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                  C1391) +
             (C8555 + C8556) * C50611) *
                C50764 * C50937 +
            ((C8558 + C8557) * C1392 -
             ((C8556 + C8555) * C1386 + (C8554 + C8553) * C1391) +
             (C8560 + C8559) * C50611) *
                C50764 * C50938 +
            ((C8562 + C8561) * C1392 - (C8566 * C1386 + C8565 * C1391) +
             (C8564 + C8563) * C50611) *
                C50764 * C8143) *
               C50706) *
              C50893 +
          ((((C8369 + C8370) * C1392 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C1386 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C1391) +
             (C8371 + C8372) * C50611) *
                C50764 * C50937 +
            ((C8374 + C8373) * C1392 -
             ((C8372 + C8371) * C1386 + (C8370 + C8369) * C1391) +
             (C8376 + C8375) * C50611) *
                C50764 * C50938 +
            ((C8378 + C8377) * C1392 - (C8382 * C1386 + C8381 * C1391) +
             (C8380 + C8379) * C50611) *
                C50764 * C8143) *
               C1643 +
           (((C8144 * C811 + C50908 * C819 + C8145 * C818 + C50800 * C834) *
                 C1391 +
             (C8144 * C820 + C50908 * C835 + C8145 * C833 + C50800 * C842) *
                 C1386 -
             (C9897 + C9898) * C1392 - (C9899 + C9900) * C50611) *
                C50764 * C50937 +
            ((C9898 + C9897) * C1391 + (C9900 + C9899) * C1386 -
             (C9901 + C9902) * C1392 - (C9903 + C9904) * C50611) *
                C50764 * C50938 +
            ((C9902 + C9901) * C1391 + (C9904 + C9903) * C1386 -
             (C8145 * C815 + C50800 * C828 + C8144 * C814 + C50908 * C825) *
                 C1392 -
             (C8145 * C827 + C50800 * C839 + C8144 * C826 + C50908 * C838) *
                 C50611) *
                C50764 * C8143) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C1391 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C1386 -
            (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
               C50764 * C50937 +
           ((C8180 + C8179) * C1391 + (C8182 + C8181) * C1386 -
            (C8184 + C8183) * C1392 - (C8186 + C8185) * C50611) *
               C50764 * C50938 +
           (C8195 * C1391 + C8196 * C1386 - C8197 * C1392 - C8198 * C50611) *
               C50764 * C8143) *
              C50940 +
          (((C8553 + C8554) * C1392 -
            ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                 C1386 +
             (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                 C1391) +
            (C8555 + C8556) * C50611) *
               C50764 * C50937 +
           ((C8558 + C8557) * C1392 -
            ((C8556 + C8555) * C1386 + (C8554 + C8553) * C1391) +
            (C8560 + C8559) * C50611) *
               C50764 * C50938 +
           ((C8562 + C8561) * C1392 - (C8566 * C1386 + C8565 * C1391) +
            (C8564 + C8563) * C50611) *
               C50764 * C8143) *
              C50929 +
          (((C8144 * C944 + C50908 * C949 + C8145 * C1083 + C50800 * C1091) *
                C1391 +
            (C8144 * C950 + C50908 * C959 + C8145 * C1090 + C50800 * C1095) *
                C1386 -
            (C9143 + C9144) * C1392 - (C9145 + C9146) * C50611) *
               C50764 * C50937 +
           ((C9144 + C9143) * C1391 + (C9146 + C9145) * C1386 -
            (C9147 + C9148) * C1392 - (C9149 + C9150) * C50611) *
               C50764 * C50938 +
           ((C9148 + C9147) * C1391 + (C9150 + C9149) * C1386 -
            (C8145 * C1080 + C50800 * C1085 + C8144 * C947 + C50908 * C955) *
                C1392 -
            (C8145 * C1084 + C50800 * C1092 + C8144 * C956 + C50908 * C962) *
                C50611) *
               C50764 * C8143) *
              C1875) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
               C118 +
           (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
               C106 -
           (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
           C8196 * C108 - C8197 * C121 - C8198 * C109) *
              C50764 * C50937 +
          ((C8180 + C8179) * C118 + (C8182 + C8181) * C106 -
           (C8184 + C8183) * C119 - (C8186 + C8185) * C107 +
           (C8188 + C8187) * C120 + (C8190 + C8189) * C108 -
           (C8191 + C8192) * C121 - (C8193 + C8194) * C109) *
              C50764 * C50938 +
          (C8195 * C118 + C8196 * C106 - C8197 * C119 - C8198 * C107 +
           (C8192 + C8191) * C120 + (C8194 + C8193) * C108 -
           (C8145 * C291 + C50800 * C302 + C8144 * C127 + C50908 * C139) *
               C121 -
           (C8145 * C303 + C50800 * C309 + C8144 * C140 + C50908 * C148) *
               C109) *
              C50764 * C8143) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C49720 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50878 -
            (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
               C50764 * C50937 +
           ((C8180 + C8179) * C49720 + (C8182 + C8181) * C50878 -
            (C8184 + C8183) * C49713 - (C8186 + C8185) * C50611) *
               C50764 * C50938 +
           (C8195 * C49720 + C8196 * C50878 - C8197 * C49713 - C8198 * C50611) *
               C50764 * C8143) *
              C50694 * C582 +
          (((C8369 + C8370) * C49713 -
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50878 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C49720) +
            (C8371 + C8372) * C50611) *
               C50764 * C50937 +
           ((C8374 + C8373) * C49713 -
            ((C8372 + C8371) * C50878 + (C8370 + C8369) * C49720) +
            (C8376 + C8375) * C50611) *
               C50764 * C50938 +
           ((C8378 + C8377) * C49713 - (C8382 * C50878 + C8381 * C49720) +
            (C8380 + C8379) * C50611) *
               C50764 * C8143) *
              C50694 * C583 +
          (((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                C49720 +
            (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                C50878 -
            (C8729 + C8730) * C49713 - (C8731 + C8732) * C50611) *
               C50764 * C50937 +
           ((C8730 + C8729) * C49720 + (C8732 + C8731) * C50878 -
            (C8733 + C8734) * C49713 - (C8735 + C8736) * C50611) *
               C50764 * C50938 +
           ((C8734 + C8733) * C49720 + (C8736 + C8735) * C50878 -
            (C8145 * C697 + C50800 * C702 + C8144 * C590 + C50908 * C598) *
                C49713 -
            (C8145 * C701 + C50800 * C709 + C8144 * C599 + C50908 * C605) *
                C50611) *
               C50764 * C8143) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C283 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
            C8196 * C280) *
               C50764 * C50937 +
           ((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
            (C8184 + C8183) * C284 - (C8186 + C8185) * C279 +
            (C8188 + C8187) * C285 + (C8190 + C8189) * C280) *
               C50764 * C50938 +
           (C8195 * C283 + C8196 * C278 - C8197 * C284 - C8198 * C279 +
            (C8192 + C8191) * C285 + (C8194 + C8193) * C280) *
               C50764 * C8143) *
              C50694 * C50893 +
          (((C8369 + C8370) * C284 -
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C278 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C283) +
            (C8371 + C8372) * C279 - C8381 * C285 - C8382 * C280) *
               C50764 * C50937 +
           ((C8374 + C8373) * C284 -
            ((C8372 + C8371) * C278 + (C8370 + C8369) * C283) +
            (C8376 + C8375) * C279 - (C8377 + C8378) * C285 -
            (C8379 + C8380) * C280) *
               C50764 * C50938 +
           ((C8378 + C8377) * C284 - (C8382 * C278 + C8381 * C283) +
            (C8380 + C8379) * C279 -
            (C8145 * C591 + C50800 * C600 + C8144 * C290 + C50908 * C300) *
                C285 -
            (C8145 * C601 + C50800 * C606 + C8144 * C301 + C50908 * C308) *
                C280) *
               C50764 * C8143) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C696 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50606) *
               C50764 * C50937 +
           ((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50764 *
               C50938 +
           (C8195 * C696 + C8196 * C50606) * C50764 * C8143) *
              C50694 * C692 -
          ((C8382 * C50606 + C8381 * C696) * C50764 * C8143 +
           ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50764 *
               C50938 +
           ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                C50606 +
            (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                C696) *
               C50764 * C50937) *
              C50694 * C693 +
          (((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                C696 +
            (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                C50606) *
               C50764 * C50937 +
           ((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C50764 *
               C50938 +
           ((C8734 + C8733) * C696 + (C8736 + C8735) * C50606) * C50764 *
               C8143) *
              C50694 * C694 -
          (((C8145 * C2880 + C50800 * C2883 + C8144 * C703 + C50908 * C710) *
                C50606 +
            (C8145 * C2874 + C50800 * C2879 + C8144 * C698 + C50908 * C704) *
                C696) *
               C50764 * C8143 +
           ((C8145 * C2878 + C50800 * C2882 + C8144 * C705 + C50908 * C711) *
                C50606 +
            (C8145 * C2873 + C50800 * C2877 + C8144 * C699 + C50908 * C706) *
                C696) *
               C50764 * C50938 +
           ((C8145 * C2876 + C50800 * C2881 + C8144 * C707 + C50908 * C712) *
                C50606 +
            (C8145 * C2872 + C50800 * C2875 + C8144 * C700 + C50908 * C708) *
                C696) *
               C50764 * C50937) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C283 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
            C8196 * C280) *
               C50764 * C50937 +
           ((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
            (C8184 + C8183) * C284 - (C8186 + C8185) * C279 +
            (C8188 + C8187) * C285 + (C8190 + C8189) * C280) *
               C50764 * C50938 +
           (C8195 * C283 + C8196 * C278 - C8197 * C284 - C8198 * C279 +
            (C8192 + C8191) * C285 + (C8194 + C8193) * C280) *
               C50764 * C8143) *
              C50894 +
          (((C8553 + C8554) * C284 -
            ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                 C278 +
             (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                 C283) +
            (C8555 + C8556) * C279 - C8565 * C285 - C8566 * C280) *
               C50764 * C50937 +
           ((C8558 + C8557) * C284 -
            ((C8556 + C8555) * C278 + (C8554 + C8553) * C283) +
            (C8560 + C8559) * C279 - (C8561 + C8562) * C285 -
            (C8563 + C8564) * C280) *
               C50764 * C50938 +
           ((C8562 + C8561) * C284 - (C8566 * C278 + C8565 * C283) +
            (C8564 + C8563) * C279 -
            (C8145 * C1523 + C50800 * C1524 + C8144 * C438 + C50908 * C448) *
                C285 -
            (C8145 * C1525 + C50800 * C1526 + C8144 * C449 + C50908 * C456) *
                C280) *
               C50764 * C8143) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C50937 +
            ((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50764 *
                C50938 +
            (C8195 * C696 + C8196 * C50606) * C50764 * C8143) *
               C50894 -
           ((C8566 * C50606 + C8565 * C696) * C50764 * C8143 +
            ((C8556 + C8555) * C50606 + (C8554 + C8553) * C696) * C50764 *
                C50938 +
            ((C8145 * C820 + C50800 * C835 + C8144 * C441 + C50908 * C452) *
                 C50606 +
             (C8145 * C811 + C50800 * C819 + C8144 * C435 + C50908 * C442) *
                 C696) *
                C50764 * C50937) *
               C50706) *
              C582 +
          ((((C8144 * C811 + C50908 * C819 + C8145 * C818 + C50800 * C834) *
                 C696 +
             (C8144 * C820 + C50908 * C835 + C8145 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C50937 +
            ((C8144 * C812 + C50908 * C821 + C8145 * C817 + C50800 * C832) *
                 C696 +
             (C8144 * C822 + C50908 * C836 + C8145 * C831 + C50800 * C841) *
                 C50606) *
                C50764 * C50938 +
            ((C8144 * C813 + C50908 * C823 + C8145 * C816 + C50800 * C830) *
                 C696 +
             (C8144 * C824 + C50908 * C837 + C8145 * C829 + C50800 * C840) *
                 C50606) *
                C50764 * C8143) *
               C50706 -
           ((C8382 * C50606 + C8381 * C696) * C50764 * C8143 +
            ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50764 *
                C50938 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C50764 * C50937) *
               C50894) *
              C583 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C696 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50606) *
                C50764 * C50937 +
            ((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C50764 *
                C50938 +
            ((C8734 + C8733) * C696 + (C8736 + C8735) * C50606) * C50764 *
                C8143) *
               C50894 -
           (((C8145 * C4102 + C50800 * C4103 + C8144 * C829 + C50908 * C840) *
                 C50606 +
             (C8145 * C4100 + C50800 * C4101 + C8144 * C816 + C50908 * C830) *
                 C696) *
                C50764 * C8143 +
            ((C8145 * C3161 + C50800 * C3167 + C8144 * C831 + C50908 * C841) *
                 C50606 +
             (C8145 * C3155 + C50800 * C3160 + C8144 * C817 + C50908 * C832) *
                 C696) *
                C50764 * C50938 +
            ((C8145 * C3159 + C50800 * C3166 + C8144 * C833 + C50908 * C842) *
                 C50606 +
             (C8145 * C3154 + C50800 * C3158 + C8144 * C818 + C50908 * C834) *
                 C696) *
                C50764 * C50937) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C1285 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50936 -
             (C8179 + C8180) * C1286 - (C8181 + C8182) * C50920 +
             C8195 * C1287 + C8196 * C1282) *
                C50909 +
            ((C14093 + C14094) * C1285 + (C14095 + C14096) * C50936 -
             C14087 * C1286 - C14088 * C50920 + C14089 * C1287 +
             C14090 * C1282) *
                C50828) *
               C2303 +
           (((C8180 + C8179) * C1285 + (C8182 + C8181) * C50936 -
             (C8184 + C8183) * C1286 - (C8186 + C8185) * C50920 +
             (C8188 + C8187) * C1287 + (C8190 + C8189) * C1282) *
                C50909 +
            (C14091 * C1285 + C14092 * C50936 - C8565 * C1286 - C8566 * C50920 +
             (C8562 + C8561) * C1287 + (C8564 + C8563) * C1282) *
                C50828) *
               C50633) *
              C50694 * C1283 +
          ((((C8369 + C8370) * C1286 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50936 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C1285) +
             (C8371 + C8372) * C50920 - C8381 * C1287 - C8382 * C1282) *
                C50909 +
            ((C9898 + C9897) * C1286 -
             ((C14646 + C14645) * C50936 + (C14644 + C14643) * C1285) +
             (C9900 + C9899) * C50920 - (C9901 + C9902) * C1287 -
             (C9903 + C9904) * C1282) *
                C50828) *
               C2303 +
           (((C8374 + C8373) * C1286 -
             ((C8372 + C8371) * C50936 + (C8370 + C8369) * C1285) +
             (C8376 + C8375) * C50920 - (C8377 + C8378) * C1287 -
             (C8379 + C8380) * C1282) *
                C50909 +
            ((C9902 + C9901) * C1286 -
             ((C9899 + C9900) * C50936 + (C9897 + C9898) * C1285) +
             (C9904 + C9903) * C50920 -
             (C8145 * C815 + C50800 * C828 + C8144 * C814 + C50908 * C825) *
                 C1287 -
             (C8145 * C827 + C50800 * C839 + C8144 * C826 + C50908 * C838) *
                 C1282) *
                C50828) *
               C50633) *
              C50694 * C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C1391 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C1386 -
             (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
                C50909 +
            ((C14093 + C14094) * C1391 + (C14095 + C14096) * C1386 -
             C14087 * C1392 - C14088 * C50611) *
                C50828) *
               C2303 +
           (((C8180 + C8179) * C1391 + (C8182 + C8181) * C1386 -
             (C8184 + C8183) * C1392 - (C8186 + C8185) * C50611) *
                C50909 +
            (C14091 * C1391 + C14092 * C1386 - C8565 * C1392 - C8566 * C50611) *
                C50828) *
               C50633) *
              C50694 * C50939 +
          ((((C8369 + C8370) * C1392 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C1386 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C1391) +
             (C8371 + C8372) * C50611) *
                C50909 +
            ((C9898 + C9897) * C1392 -
             ((C14646 + C14645) * C1386 + (C14644 + C14643) * C1391) +
             (C9900 + C9899) * C50611) *
                C50828) *
               C2303 +
           (((C8374 + C8373) * C1392 -
             ((C8372 + C8371) * C1386 + (C8370 + C8369) * C1391) +
             (C8376 + C8375) * C50611) *
                C50909 +
            ((C9902 + C9901) * C1392 -
             ((C9899 + C9900) * C1386 + (C9897 + C9898) * C1391) +
             (C9904 + C9903) * C50611) *
                C50828) *
               C50633) *
              C50694 * C50926 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C1391 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C1386 -
             (C8729 + C8730) * C1392 - (C8731 + C8732) * C50611) *
                C50909 +
            ((C14647 + C14648) * C1391 + (C14649 + C14650) * C1386 -
             (C14299 + C14300) * C1392 - (C14301 + C14302) * C50611) *
                C50828) *
               C2303 +
           (((C8730 + C8729) * C1391 + (C8732 + C8731) * C1386 -
             (C8733 + C8734) * C1392 - (C8735 + C8736) * C50611) *
                C50909 +
            ((C14300 + C14299) * C1391 + (C14302 + C14301) * C1386 -
             (C8145 * C4100 + C50800 * C4101 + C8144 * C816 + C50908 * C830) *
                 C1392 -
             (C8145 * C4102 + C50800 * C4103 + C8144 * C829 + C50908 * C840) *
                 C50611) *
                C50828) *
               C50633) *
              C50694 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C1391 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C1386 -
              (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
                 C50909 +
             ((C14093 + C14094) * C1391 + (C14095 + C14096) * C1386 -
              C14087 * C1392 - C14088 * C50611) *
                 C50828) *
                C2303 +
            (((C8180 + C8179) * C1391 + (C8182 + C8181) * C1386 -
              (C8184 + C8183) * C1392 - (C8186 + C8185) * C50611) *
                 C50909 +
             (C14091 * C1391 + C14092 * C1386 - C8565 * C1392 -
              C8566 * C50611) *
                 C50828) *
                C50633) *
               C50894 +
           (((C14091 * C1392 -
              ((C14096 + C14095) * C1386 + (C14094 + C14093) * C1391) +
              C14092 * C50611) *
                 C50909 +
             (C14845 * C1392 -
              ((C14865 + C14866) * C1386 + (C14867 + C14868) * C1391) +
              C14854 * C50611) *
                 C50828) *
                C2303 +
            ((C14089 * C1392 - (C14088 * C1386 + C14087 * C1391) +
              C14090 * C50611) *
                 C50909 +
             ((C9148 + C9147) * C1392 - (C14855 * C1386 + C14856 * C1391) +
              (C9150 + C9149) * C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C1283 +
          (((((C8369 + C8370) * C1392 -
              ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                   C1386 +
               (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                   C1391) +
              (C8371 + C8372) * C50611) *
                 C50909 +
             (C15879 * C1392 -
              ((C14646 + C14645) * C1386 + (C14644 + C14643) * C1391) +
              C15880 * C50611) *
                 C50828) *
                C2303 +
            (((C8374 + C8373) * C1392 -
              ((C8372 + C8371) * C1386 + (C8370 + C8369) * C1391) +
              (C8376 + C8375) * C50611) *
                 C50909 +
             ((C9902 + C9901) * C1392 - (C15881 * C1386 + C15882 * C1391) +
              (C9904 + C9903) * C50611) *
                 C50828) *
                C50633) *
               C50894 +
           ((((C14643 + C14644) * C1391 + (C14645 + C14646) * C1386 -
              C15882 * C1392 - C15881 * C50611) *
                 C50909 +
             ((C15083 + C15084) * C1391 + (C15085 + C15086) * C1386 -
              (C15088 + C15087) * C1392 - (C15090 + C15089) * C50611) *
                 C50828) *
                C2303 +
            ((C15879 * C1391 + C15880 * C1386 - (C9901 + C9902) * C1392 -
              (C9903 + C9904) * C50611) *
                 C50909 +
             ((C15087 + C15088) * C1391 + (C15089 + C15090) * C1386 -
              (C8145 * C3318 + C50800 * C3323 + C8144 * C1081 +
               C50908 * C1087) *
                  C1392 -
              (C8145 * C3324 + C50800 * C3327 + C8144 * C1086 +
               C50908 * C1093) *
                  C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C49720 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C50878 -
              (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
                 C50909 +
             ((C14093 + C14094) * C49720 + (C14095 + C14096) * C50878 -
              C14087 * C49713 - C14088 * C50611) *
                 C50828) *
                C2303 +
            (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50878 -
              (C8184 + C8183) * C49713 - (C8186 + C8185) * C50611) *
                 C50909 +
             (C14091 * C49720 + C14092 * C50878 - C8565 * C49713 -
              C8566 * C50611) *
                 C50828) *
                C50633) *
               C1643 +
           (((C14091 * C49713 -
              ((C14096 + C14095) * C50878 + (C14094 + C14093) * C49720) +
              C14092 * C50611) *
                 C50909 +
             (C14845 * C49713 -
              ((C14865 + C14866) * C50878 + (C14867 + C14868) * C49720) +
              C14854 * C50611) *
                 C50828) *
                C2303 +
            ((C14089 * C49713 - (C14088 * C50878 + C14087 * C49720) +
              C14090 * C50611) *
                 C50909 +
             ((C9148 + C9147) * C49713 - (C14855 * C50878 + C14856 * C49720) +
              (C9150 + C9149) * C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C1283 +
          (((((C8369 + C8370) * C49713 -
              ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                   C50878 +
               (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                   C49720) +
              (C8371 + C8372) * C50611) *
                 C50909 +
             (C15879 * C49713 -
              ((C14646 + C14645) * C50878 + (C14644 + C14643) * C49720) +
              C15880 * C50611) *
                 C50828) *
                C2303 +
            (((C8374 + C8373) * C49713 -
              ((C8372 + C8371) * C50878 + (C8370 + C8369) * C49720) +
              (C8376 + C8375) * C50611) *
                 C50909 +
             ((C9902 + C9901) * C49713 - (C15881 * C50878 + C15882 * C49720) +
              (C9904 + C9903) * C50611) *
                 C50828) *
                C50633) *
               C1643 +
           ((((C14643 + C14644) * C49720 + (C14645 + C14646) * C50878 -
              C15882 * C49713 - C15881 * C50611) *
                 C50909 +
             ((C15083 + C15084) * C49720 + (C15085 + C15086) * C50878 -
              (C15088 + C15087) * C49713 - (C15090 + C15089) * C50611) *
                 C50828) *
                C2303 +
            ((C15879 * C49720 + C15880 * C50878 - (C9901 + C9902) * C49713 -
              (C9903 + C9904) * C50611) *
                 C50909 +
             ((C15087 + C15088) * C49720 + (C15089 + C15090) * C50878 -
              (C8145 * C3318 + C50800 * C3323 + C8144 * C1081 +
               C50908 * C1087) *
                  C49713 -
              (C8145 * C3324 + C50800 * C3327 + C8144 * C1086 +
               C50908 * C1093) *
                  C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C696 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C50606) *
                 C50909 +
             ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
                C2303 +
            (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50909 +
             (C14091 * C696 + C14092 * C50606) * C50828) *
                C50633) *
               C1643 -
           (((C14855 * C50606 + C14856 * C696) * C50828 +
             (C14088 * C50606 + C14087 * C696) * C50909) *
                C50633 +
            (((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50828 +
             ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C50909) *
                C2303) *
               C50706) *
              C50939 +
          (((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C50909 +
             ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50828) *
                C2303 +
            ((C15879 * C696 + C15880 * C50606) * C50909 +
             ((C15087 + C15088) * C696 + (C15089 + C15090) * C50606) * C50828) *
                C50633) *
               C50706 -
           (((C15881 * C50606 + C15882 * C696) * C50828 +
             ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50909) *
                C50633 +
            (((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50828 +
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50606 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C696) *
                 C50909) *
                C2303) *
               C1643) *
              C50926 +
          (((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                  C696 +
              (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                  C50606) *
                 C50909 +
             ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50828) *
                C2303 +
            (((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C50909 +
             ((C14300 + C14299) * C696 + (C14302 + C14301) * C50606) * C50828) *
                C50633) *
               C1643 -
           ((((C8145 * C3494 + C50800 * C3498 + C8144 * C3322 +
               C50908 * C3326) *
                  C50606 +
              (C8145 * C3492 + C50800 * C3495 + C8144 * C3317 +
               C50908 * C3321) *
                  C696) *
                 C50828 +
             ((C14301 + C14302) * C50606 + (C14299 + C14300) * C696) * C50909) *
                C50633 +
            (((C8145 * C3496 + C50800 * C3499 + C8144 * C3320 +
               C50908 * C3325) *
                  C50606 +
              (C8145 * C3493 + C50800 * C3497 + C8144 * C3316 +
               C50908 * C3319) *
                  C696) *
                 C50828 +
             ((C14650 + C14649) * C50606 + (C14648 + C14647) * C696) * C50909) *
                C2303) *
               C50706) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C696 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C50606) *
                 C50909 +
             ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
                C2303 +
            (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50909 +
             (C14091 * C696 + C14092 * C50606) * C50828) *
                C50633) *
               C50940 -
           (((C14855 * C50606 + C14856 * C696) * C50828 +
             (C14088 * C50606 + C14087 * C696) * C50909) *
                C50633 +
            (((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50828 +
             ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C50909) *
                C2303) *
               C50929 +
           ((((C14868 + C14867) * C696 + (C14866 + C14865) * C50606) * C50909 +
             ((C15229 + C15230) * C696 + (C15231 + C15232) * C50606) * C50828) *
                C2303 +
            ((C14845 * C696 + C14854 * C50606) * C50909 +
             ((C14870 + C14869) * C696 + (C14872 + C14871) * C50606) * C50828) *
                C50633) *
               C1875) *
              C1283 +
          (((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C50909 +
             ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50828) *
                C2303 +
            ((C15879 * C696 + C15880 * C50606) * C50909 +
             ((C15087 + C15088) * C696 + (C15089 + C15090) * C50606) * C50828) *
                C50633) *
               C50929 -
           (((C15881 * C50606 + C15882 * C696) * C50828 +
             ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50909) *
                C50633 +
            (((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50828 +
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50606 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C696) *
                 C50909) *
                C2303) *
               C50940 -
           ((((C8145 * C3602 + C50800 * C3610 + C8144 * C3603 +
               C50908 * C3611) *
                  C50606 +
              (C8145 * C3598 + C50800 * C3604 + C8144 * C3599 +
               C50908 * C3605) *
                  C696) *
                 C50828 +
             ((C15090 + C15089) * C50606 + (C15088 + C15087) * C696) * C50909) *
                C50633 +
            (((C8145 * C3606 + C50800 * C3612 + C8144 * C3607 +
               C50908 * C3613) *
                  C50606 +
              (C8145 * C3600 + C50800 * C3608 + C8144 * C3601 +
               C50908 * C3609) *
                  C696) *
                 C50828 +
             ((C15086 + C15085) * C50606 + (C15084 + C15083) * C696) * C50909) *
                C2303) *
               C1875) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C49720 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50878 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
                C50909 +
            ((C14093 + C14094) * C49720 + (C14095 + C14096) * C50878 -
             C14087 * C49713 - C14088 * C50611) *
                C50828) *
               C2303 +
           (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50878 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50611) *
                C50909 +
            (C14091 * C49720 + C14092 * C50878 - C8565 * C49713 -
             C8566 * C50611) *
                C50828) *
               C50633) *
              C50694 * C582 +
          ((((C8369 + C8370) * C49713 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50878 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C49720) +
             (C8371 + C8372) * C50611) *
                C50909 +
            ((C9898 + C9897) * C49713 -
             ((C8145 * C833 + C50800 * C842 + C8144 * C820 + C50908 * C835) *
                  C50878 +
              (C8145 * C818 + C50800 * C834 + C8144 * C811 + C50908 * C819) *
                  C49720) +
             (C9900 + C9899) * C50611) *
                C50828) *
               C2303 +
           (((C8374 + C8373) * C49713 -
             ((C8372 + C8371) * C50878 + (C8370 + C8369) * C49720) +
             (C8376 + C8375) * C50611) *
                C50909 +
            ((C9902 + C9901) * C49713 -
             ((C9899 + C9900) * C50878 + (C9897 + C9898) * C49720) +
             (C9904 + C9903) * C50611) *
                C50828) *
               C50633) *
              C50694 * C583 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C49720 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50878 -
             (C8729 + C8730) * C49713 - (C8731 + C8732) * C50611) *
                C50909 +
            ((C8144 * C818 + C50908 * C834 + C8145 * C3154 + C50800 * C3158) *
                 C49720 +
             (C8144 * C833 + C50908 * C842 + C8145 * C3159 + C50800 * C3166) *
                 C50878 -
             (C14299 + C14300) * C49713 - (C14301 + C14302) * C50611) *
                C50828) *
               C2303 +
           (((C8730 + C8729) * C49720 + (C8732 + C8731) * C50878 -
             (C8733 + C8734) * C49713 - (C8735 + C8736) * C50611) *
                C50909 +
            ((C14300 + C14299) * C49720 + (C14302 + C14301) * C50878 -
             (C8145 * C4100 + C50800 * C4101 + C8144 * C816 + C50908 * C830) *
                 C49713 -
             (C8145 * C4102 + C50800 * C4103 + C8144 * C829 + C50908 * C840) *
                 C50611) *
                C50828) *
               C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C118 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C106 -
            (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
            C8196 * C108 - C8197 * C121 - C8198 * C109) *
               C50909 +
           ((C8144 * C435 + C50908 * C442 + C8145 * C811 + C50800 * C819) *
                C118 +
            (C8144 * C441 + C50908 * C452 + C8145 * C820 + C50800 * C835) *
                C106 -
            (C8554 + C8553) * C119 - (C8556 + C8555) * C107 +
            (C8558 + C8557) * C120 + (C8560 + C8559) * C108 -
            (C8561 + C8562) * C121 - (C8563 + C8564) * C109) *
               C50828) *
              C2303 +
          (((C8180 + C8179) * C118 + (C8182 + C8181) * C106 -
            (C8184 + C8183) * C119 - (C8186 + C8185) * C107 +
            (C8188 + C8187) * C120 + (C8190 + C8189) * C108 -
            (C8191 + C8192) * C121 - (C8193 + C8194) * C109) *
               C50909 +
           ((C8553 + C8554) * C118 + (C8555 + C8556) * C106 - C8565 * C119 -
            C8566 * C107 + (C8562 + C8561) * C120 + (C8564 + C8563) * C108 -
            (C8145 * C1523 + C50800 * C1524 + C8144 * C438 + C50908 * C448) *
                C121 -
            (C8145 * C1525 + C50800 * C1526 + C8144 * C449 + C50908 * C456) *
                C109) *
               C50828) *
              C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C49720 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50878 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
                C50909 +
            ((C14093 + C14094) * C49720 + (C14095 + C14096) * C50878 -
             C14087 * C49713 - C14088 * C50611) *
                C50828) *
               C2303 +
           (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50878 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50611) *
                C50909 +
            (C14091 * C49720 + C14092 * C50878 - C8565 * C49713 -
             C8566 * C50611) *
                C50828) *
               C50633) *
              C941 +
          (((C14091 * C49713 -
             ((C14096 + C14095) * C50878 + (C14094 + C14093) * C49720) +
             C14092 * C50611) *
                C50909 +
            (C14845 * C49713 -
             ((C14865 + C14866) * C50878 + (C14867 + C14868) * C49720) +
             C14854 * C50611) *
                C50828) *
               C2303 +
           ((C14089 * C49713 - (C14088 * C50878 + C14087 * C49720) +
             C14090 * C50611) *
                C50909 +
            ((C9148 + C9147) * C49713 - (C14855 * C50878 + C14856 * C49720) +
             (C9150 + C9149) * C50611) *
                C50828) *
               C50633) *
              C942 +
          ((((C14868 + C14867) * C49720 + (C14866 + C14865) * C50878 -
             C14856 * C49713 - C14855 * C50611) *
                C50909 +
            ((C8144 * C1169 + C50908 * C1177 + C8145 * C3601 + C50800 * C3609) *
                 C49720 +
             (C8144 * C1176 + C50908 * C1181 + C8145 * C3607 + C50800 * C3613) *
                 C50878 -
             (C14869 + C14870) * C49713 - (C14871 + C14872) * C50611) *
                C50828) *
               C2303 +
           ((C14845 * C49720 + C14854 * C50878 - (C9147 + C9148) * C49713 -
             (C9149 + C9150) * C50611) *
                C50909 +
            ((C14870 + C14869) * C49720 + (C14872 + C14871) * C50878 -
             (C8145 * C6979 + C50800 * C6980 + C8144 * C1167 + C50908 * C1173) *
                 C49713 -
             (C8145 * C6981 + C50800 * C6982 + C8144 * C1172 + C50908 * C1179) *
                 C50611) *
                C50828) *
               C50633) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50909 +
            ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
               C2303 +
           (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50909 +
            (C14091 * C696 + C14092 * C50606) * C50828) *
               C50633) *
              C50694 * C692 -
          ((((C9899 + C9900) * C50606 + (C9897 + C9898) * C696) * C50828 +
            ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50909) *
               C50633 +
           (((C8145 * C833 + C50800 * C842 + C8144 * C820 + C50908 * C835) *
                 C50606 +
             (C8145 * C818 + C50800 * C834 + C8144 * C811 + C50908 * C819) *
                 C696) *
                C50828 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C50909) *
               C2303) *
              C50694 * C693 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C696 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50606) *
                C50909 +
            ((C8144 * C818 + C50908 * C834 + C8145 * C3154 + C50800 * C3158) *
                 C696 +
             (C8144 * C833 + C50908 * C842 + C8145 * C3159 + C50800 * C3166) *
                 C50606) *
                C50828) *
               C2303 +
           (((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C50909 +
            ((C14300 + C14299) * C696 + (C14302 + C14301) * C50606) * C50828) *
               C50633) *
              C50694 * C694 -
          ((((C8145 * C3162 + C50800 * C3168 + C8144 * C3161 + C50908 * C3167) *
                 C50606 +
             (C8145 * C3156 + C50800 * C3163 + C8144 * C3155 + C50908 * C3160) *
                 C696) *
                C50828 +
            ((C8145 * C2878 + C50800 * C2882 + C8144 * C705 + C50908 * C711) *
                 C50606 +
             (C8145 * C2873 + C50800 * C2877 + C8144 * C699 + C50908 * C706) *
                 C696) *
                C50909) *
               C50633 +
           (((C8145 * C3164 + C50800 * C3169 + C8144 * C3159 + C50908 * C3166) *
                 C50606 +
             (C8145 * C3157 + C50800 * C3165 + C8144 * C3154 + C50908 * C3158) *
                 C696) *
                C50828 +
            ((C8145 * C2876 + C50800 * C2881 + C8144 * C707 + C50908 * C712) *
                 C50606 +
             (C8145 * C2872 + C50800 * C2875 + C8144 * C700 + C50908 * C708) *
                 C696) *
                C50909) *
               C2303) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C283 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
             C8196 * C280) *
                C50909 +
            ((C8144 * C435 + C50908 * C442 + C8145 * C811 + C50800 * C819) *
                 C283 +
             (C8144 * C441 + C50908 * C452 + C8145 * C820 + C50800 * C835) *
                 C278 -
             (C8554 + C8553) * C284 - (C8556 + C8555) * C279 +
             (C8558 + C8557) * C285 + (C8560 + C8559) * C280) *
                C50828) *
               C2303 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C279 +
             (C8188 + C8187) * C285 + (C8190 + C8189) * C280) *
                C50909 +
            ((C8553 + C8554) * C283 + (C8555 + C8556) * C278 - C8565 * C284 -
             C8566 * C279 + (C8562 + C8561) * C285 + (C8564 + C8563) * C280) *
                C50828) *
               C50633) *
              C50694 * C50893 +
          ((((C8369 + C8370) * C284 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C278 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C283) +
             (C8371 + C8372) * C279 - C8381 * C285 - C8382 * C280) *
                C50909 +
            ((C9898 + C9897) * C284 -
             ((C8145 * C833 + C50800 * C842 + C8144 * C820 + C50908 * C835) *
                  C278 +
              (C8145 * C818 + C50800 * C834 + C8144 * C811 + C50908 * C819) *
                  C283) +
             (C9900 + C9899) * C279 - (C9901 + C9902) * C285 -
             (C9903 + C9904) * C280) *
                C50828) *
               C2303 +
           (((C8374 + C8373) * C284 -
             ((C8372 + C8371) * C278 + (C8370 + C8369) * C283) +
             (C8376 + C8375) * C279 - (C8377 + C8378) * C285 -
             (C8379 + C8380) * C280) *
                C50909 +
            ((C9902 + C9901) * C284 -
             ((C9899 + C9900) * C278 + (C9897 + C9898) * C283) +
             (C9904 + C9903) * C279 -
             (C8145 * C815 + C50800 * C828 + C8144 * C814 + C50908 * C825) *
                 C285 -
             (C8145 * C827 + C50800 * C839 + C8144 * C826 + C50908 * C838) *
                 C280) *
                C50828) *
               C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C696 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C50606) *
                 C50909 +
             ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
                C2303 +
            (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50909 +
             (C14091 * C696 + C14092 * C50606) * C50828) *
                C50633) *
               C941 -
           (((C14855 * C50606 + C14856 * C696) * C50828 +
             (C14088 * C50606 + C14087 * C696) * C50909) *
                C50633 +
            (((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50828 +
             ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C50909) *
                C2303) *
               C942 +
           ((((C14868 + C14867) * C696 + (C14866 + C14865) * C50606) * C50909 +
             ((C8144 * C1169 + C50908 * C1177 + C8145 * C3601 +
               C50800 * C3609) *
                  C696 +
              (C8144 * C1176 + C50908 * C1181 + C8145 * C3607 +
               C50800 * C3613) *
                  C50606) *
                 C50828) *
                C2303 +
            ((C14845 * C696 + C14854 * C50606) * C50909 +
             ((C14870 + C14869) * C696 + (C14872 + C14871) * C50606) * C50828) *
                C50633) *
               C943) *
              C50893 +
          (((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C50909 +
             ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50828) *
                C2303 +
            (((C9898 + C9897) * C696 + (C9900 + C9899) * C50606) * C50909 +
             ((C15087 + C15088) * C696 + (C15089 + C15090) * C50606) * C50828) *
                C50633) *
               C942 -
           ((((C9899 + C9900) * C50606 + (C9897 + C9898) * C696) * C50828 +
             ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50909) *
                C50633 +
            (((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50828 +
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50606 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C696) *
                 C50909) *
                C2303) *
               C941 -
           ((((C8145 * C3602 + C50800 * C3610 + C8144 * C3603 +
               C50908 * C3611) *
                  C50606 +
              (C8145 * C3598 + C50800 * C3604 + C8144 * C3599 +
               C50908 * C3605) *
                  C696) *
                 C50828 +
             ((C15090 + C15089) * C50606 + (C15088 + C15087) * C696) * C50909) *
                C50633 +
            (((C8145 * C3606 + C50800 * C3612 + C8144 * C3607 +
               C50908 * C3613) *
                  C50606 +
              (C8145 * C3600 + C50800 * C3608 + C8144 * C3601 +
               C50908 * C3609) *
                  C696) *
                 C50828 +
             ((C15086 + C15085) * C50606 + (C15084 + C15083) * C696) * C50909) *
                C2303) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C696 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C50606) *
                 C50909 +
             ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
                C2303 +
            (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50909 +
             (C14091 * C696 + C14092 * C50606) * C50828) *
                C50633) *
               C50894 -
           ((((C9145 + C9146) * C50606 + (C9143 + C9144) * C696) * C50828 +
             (C14088 * C50606 + C14087 * C696) * C50909) *
                C50633 +
            (((C8145 * C1090 + C50800 * C1095 + C8144 * C950 + C50908 * C959) *
                  C50606 +
              (C8145 * C1083 + C50800 * C1091 + C8144 * C944 + C50908 * C949) *
                  C696) *
                 C50828 +
             ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C50909) *
                C2303) *
               C50706) *
              C582 +
          (((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C50909 +
             ((C8144 * C1083 + C50908 * C1091 + C8145 * C3316 +
               C50800 * C3319) *
                  C696 +
              (C8144 * C1090 + C50908 * C1095 + C8145 * C3320 +
               C50800 * C3325) *
                  C50606) *
                 C50828) *
                C2303 +
            (((C9898 + C9897) * C696 + (C9900 + C9899) * C50606) * C50909 +
             ((C8144 * C1082 + C50908 * C1089 + C8145 * C3317 +
               C50800 * C3321) *
                  C696 +
              (C8144 * C1088 + C50908 * C1094 + C8145 * C3322 +
               C50800 * C3326) *
                  C50606) *
                 C50828) *
                C50633) *
               C50706 -
           ((((C9899 + C9900) * C50606 + (C9897 + C9898) * C696) * C50828 +
             ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50909) *
                C50633 +
            (((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50828 +
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50606 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C696) *
                 C50909) *
                C2303) *
               C50894) *
              C583 +
          (((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                  C696 +
              (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                  C50606) *
                 C50909 +
             ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50828) *
                C2303 +
            (((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C50909 +
             ((C14300 + C14299) * C696 + (C14302 + C14301) * C50606) * C50828) *
                C50633) *
               C50894 -
           ((((C8145 * C3494 + C50800 * C3498 + C8144 * C3322 +
               C50908 * C3326) *
                  C50606 +
              (C8145 * C3492 + C50800 * C3495 + C8144 * C3317 +
               C50908 * C3321) *
                  C696) *
                 C50828 +
             ((C14301 + C14302) * C50606 + (C14299 + C14300) * C696) * C50909) *
                C50633 +
            (((C8145 * C3496 + C50800 * C3499 + C8144 * C3320 +
               C50908 * C3325) *
                  C50606 +
              (C8145 * C3493 + C50800 * C3497 + C8144 * C3316 +
               C50908 * C3319) *
                  C696) *
                 C50828 +
             ((C14650 + C14649) * C50606 + (C14648 + C14647) * C696) * C50909) *
                C2303) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C283 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
             C8196 * C280) *
                C50909 +
            ((C14093 + C14094) * C283 + (C14095 + C14096) * C278 -
             C14087 * C284 - C14088 * C279 + C14089 * C285 + C14090 * C280) *
                C50828) *
               C2303 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C279 +
             (C8188 + C8187) * C285 + (C8190 + C8189) * C280) *
                C50909 +
            (C14091 * C283 + C14092 * C278 - C8565 * C284 - C8566 * C279 +
             (C8562 + C8561) * C285 + (C8564 + C8563) * C280) *
                C50828) *
               C50633) *
              C50894 +
          (((C14091 * C284 -
             ((C14096 + C14095) * C278 + (C14094 + C14093) * C283) +
             C14092 * C279 - C8565 * C285 - C8566 * C280) *
                C50909 +
            ((C9144 + C9143) * C284 -
             ((C8145 * C1090 + C50800 * C1095 + C8144 * C950 + C50908 * C959) *
                  C278 +
              (C8145 * C1083 + C50800 * C1091 + C8144 * C944 + C50908 * C949) *
                  C283) +
             (C9146 + C9145) * C279 - (C9147 + C9148) * C285 -
             (C9149 + C9150) * C280) *
                C50828) *
               C2303 +
           ((C14089 * C284 - (C14088 * C278 + C14087 * C283) + C14090 * C279 -
             (C8561 + C8562) * C285 - (C8563 + C8564) * C280) *
                C50909 +
            ((C9148 + C9147) * C284 -
             ((C9145 + C9146) * C278 + (C9143 + C9144) * C283) +
             (C9150 + C9149) * C279 -
             (C8145 * C1080 + C50800 * C1085 + C8144 * C947 + C50908 * C955) *
                 C285 -
             (C8145 * C1084 + C50800 * C1092 + C8144 * C956 + C50908 * C962) *
                 C280) *
                C50828) *
               C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50909 +
            ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
               C2303 +
           (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50909 +
            (C14091 * C696 + C14092 * C50606) * C50828) *
               C50633) *
              C1162 -
          (((C14855 * C50606 + C14856 * C696) * C50828 +
            (C14088 * C50606 + C14087 * C696) * C50909) *
               C50633 +
           (((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50828 +
            ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C50909) *
               C2303) *
              C1163 +
          ((((C14868 + C14867) * C696 + (C14866 + C14865) * C50606) * C50909 +
            ((C15229 + C15230) * C696 + (C15231 + C15232) * C50606) * C50828) *
               C2303 +
           ((C14845 * C696 + C14854 * C50606) * C50909 +
            ((C14870 + C14869) * C696 + (C14872 + C14871) * C50606) * C50828) *
               C50633) *
              C1164 -
          ((((C8145 * C6345 + C50800 * C6349 + C8144 * C6149 + C50908 * C6153) *
                 C50606 +
             (C8145 * C6343 + C50800 * C6346 + C8144 * C6144 + C50908 * C6148) *
                 C696) *
                C50828 +
            ((C14871 + C14872) * C50606 + (C14869 + C14870) * C696) * C50909) *
               C50633 +
           (((C8145 * C6347 + C50800 * C6350 + C8144 * C6147 + C50908 * C6152) *
                 C50606 +
             (C8145 * C6344 + C50800 * C6348 + C8144 * C6143 + C50908 * C6146) *
                 C696) *
                C50828 +
            ((C15232 + C15231) * C50606 + (C15230 + C15229) * C696) * C50909) *
               C2303) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C1285 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50936 -
             (C8179 + C8180) * C1286 - (C8181 + C8182) * C50920 +
             C8195 * C1287 + C8196 * C1282) *
                C50909 +
            ((C14093 + C14094) * C1285 + (C14095 + C14096) * C50936 -
             C14087 * C1286 - C14088 * C50920 + C14089 * C1287 +
             C14090 * C1282) *
                C50828) *
               C2303 +
           (((C8180 + C8179) * C1285 + (C8182 + C8181) * C50936 -
             (C8184 + C8183) * C1286 - (C8186 + C8185) * C50920 +
             (C8188 + C8187) * C1287 + (C8190 + C8189) * C1282) *
                C50909 +
            (C14091 * C1285 + C14092 * C50936 - C8565 * C1286 - C8566 * C50920 +
             (C8562 + C8561) * C1287 + (C8564 + C8563) * C1282) *
                C50828) *
               C50633) *
              C1643 +
          (((C14091 * C1286 -
             ((C14096 + C14095) * C50936 + (C14094 + C14093) * C1285) +
             C14092 * C50920 - C8565 * C1287 - C8566 * C1282) *
                C50909 +
            (C14845 * C1286 -
             ((C14865 + C14866) * C50936 + (C14867 + C14868) * C1285) +
             C14854 * C50920 - (C9147 + C9148) * C1287 -
             (C9149 + C9150) * C1282) *
                C50828) *
               C2303 +
           ((C14089 * C1286 - (C14088 * C50936 + C14087 * C1285) +
             C14090 * C50920 - (C8561 + C8562) * C1287 -
             (C8563 + C8564) * C1282) *
                C50909 +
            ((C9148 + C9147) * C1286 - (C14855 * C50936 + C14856 * C1285) +
             (C9150 + C9149) * C50920 -
             (C8145 * C1080 + C50800 * C1085 + C8144 * C947 + C50908 * C955) *
                 C1287 -
             (C8145 * C1084 + C50800 * C1092 + C8144 * C956 + C50908 * C962) *
                 C1282) *
                C50828) *
               C50633) *
              C50706) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C1391 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C1386 -
              (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
                 C50909 +
             ((C14093 + C14094) * C1391 + (C14095 + C14096) * C1386 -
              C14087 * C1392 - C14088 * C50611) *
                 C50828) *
                C2303 +
            (((C8180 + C8179) * C1391 + (C8182 + C8181) * C1386 -
              (C8184 + C8183) * C1392 - (C8186 + C8185) * C50611) *
                 C50909 +
             (C14091 * C1391 + C14092 * C1386 - C8565 * C1392 -
              C8566 * C50611) *
                 C50828) *
                C50633) *
               C1643 +
           (((C14091 * C1392 -
              ((C14096 + C14095) * C1386 + (C14094 + C14093) * C1391) +
              C14092 * C50611) *
                 C50909 +
             (C14845 * C1392 -
              ((C14865 + C14866) * C1386 + (C14867 + C14868) * C1391) +
              C14854 * C50611) *
                 C50828) *
                C2303 +
            ((C14089 * C1392 - (C14088 * C1386 + C14087 * C1391) +
              C14090 * C50611) *
                 C50909 +
             ((C9148 + C9147) * C1392 - (C14855 * C1386 + C14856 * C1391) +
              (C9150 + C9149) * C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C50893 +
          (((((C8369 + C8370) * C1392 -
              ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                   C1386 +
               (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                   C1391) +
              (C8371 + C8372) * C50611) *
                 C50909 +
             (C15879 * C1392 -
              ((C14646 + C14645) * C1386 + (C14644 + C14643) * C1391) +
              C15880 * C50611) *
                 C50828) *
                C2303 +
            (((C8374 + C8373) * C1392 -
              ((C8372 + C8371) * C1386 + (C8370 + C8369) * C1391) +
              (C8376 + C8375) * C50611) *
                 C50909 +
             ((C9902 + C9901) * C1392 - (C15881 * C1386 + C15882 * C1391) +
              (C9904 + C9903) * C50611) *
                 C50828) *
                C50633) *
               C1643 +
           ((((C14643 + C14644) * C1391 + (C14645 + C14646) * C1386 -
              C15882 * C1392 - C15881 * C50611) *
                 C50909 +
             ((C15083 + C15084) * C1391 + (C15085 + C15086) * C1386 -
              (C15088 + C15087) * C1392 - (C15090 + C15089) * C50611) *
                 C50828) *
                C2303 +
            ((C15879 * C1391 + C15880 * C1386 - (C9901 + C9902) * C1392 -
              (C9903 + C9904) * C50611) *
                 C50909 +
             ((C15087 + C15088) * C1391 + (C15089 + C15090) * C1386 -
              (C8145 * C3318 + C50800 * C3323 + C8144 * C1081 +
               C50908 * C1087) *
                  C1392 -
              (C8145 * C3324 + C50800 * C3327 + C8144 * C1086 +
               C50908 * C1093) *
                  C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C1391 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C1386 -
             (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
                C50909 +
            ((C14093 + C14094) * C1391 + (C14095 + C14096) * C1386 -
             C14087 * C1392 - C14088 * C50611) *
                C50828) *
               C2303 +
           (((C8180 + C8179) * C1391 + (C8182 + C8181) * C1386 -
             (C8184 + C8183) * C1392 - (C8186 + C8185) * C50611) *
                C50909 +
            (C14091 * C1391 + C14092 * C1386 - C8565 * C1392 - C8566 * C50611) *
                C50828) *
               C50633) *
              C50940 +
          (((C14091 * C1392 -
             ((C14096 + C14095) * C1386 + (C14094 + C14093) * C1391) +
             C14092 * C50611) *
                C50909 +
            (C14845 * C1392 -
             ((C14865 + C14866) * C1386 + (C14867 + C14868) * C1391) +
             C14854 * C50611) *
                C50828) *
               C2303 +
           ((C14089 * C1392 - (C14088 * C1386 + C14087 * C1391) +
             C14090 * C50611) *
                C50909 +
            ((C9148 + C9147) * C1392 - (C14855 * C1386 + C14856 * C1391) +
             (C9150 + C9149) * C50611) *
                C50828) *
               C50633) *
              C50929 +
          ((((C14868 + C14867) * C1391 + (C14866 + C14865) * C1386 -
             C14856 * C1392 - C14855 * C50611) *
                C50909 +
            ((C15229 + C15230) * C1391 + (C15231 + C15232) * C1386 -
             (C14869 + C14870) * C1392 - (C14871 + C14872) * C50611) *
                C50828) *
               C2303 +
           ((C14845 * C1391 + C14854 * C1386 - (C9147 + C9148) * C1392 -
             (C9149 + C9150) * C50611) *
                C50909 +
            ((C14870 + C14869) * C1391 + (C14872 + C14871) * C1386 -
             (C8145 * C6979 + C50800 * C6980 + C8144 * C1167 + C50908 * C1173) *
                 C1392 -
             (C8145 * C6981 + C50800 * C6982 + C8144 * C1172 + C50908 * C1179) *
                 C50611) *
                C50828) *
               C50633) *
              C1875) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C118 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C106 -
            (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
            C8196 * C108 - C8197 * C121 - C8198 * C109) *
               C50909 +
           ((C8144 * C435 + C50908 * C442 + C8145 * C811 + C50800 * C819) *
                C118 +
            (C8144 * C441 + C50908 * C452 + C8145 * C820 + C50800 * C835) *
                C106 -
            (C8554 + C8553) * C119 - (C8556 + C8555) * C107 +
            (C8558 + C8557) * C120 + (C8560 + C8559) * C108 -
            (C8561 + C8562) * C121 - (C8563 + C8564) * C109) *
               C50828) *
              C2303 +
          (((C8180 + C8179) * C118 + (C8182 + C8181) * C106 -
            (C8184 + C8183) * C119 - (C8186 + C8185) * C107 +
            (C8188 + C8187) * C120 + (C8190 + C8189) * C108 -
            (C8191 + C8192) * C121 - (C8193 + C8194) * C109) *
               C50909 +
           ((C8553 + C8554) * C118 + (C8555 + C8556) * C106 - C8565 * C119 -
            C8566 * C107 + (C8562 + C8561) * C120 + (C8564 + C8563) * C108 -
            (C8145 * C1523 + C50800 * C1524 + C8144 * C438 + C50908 * C448) *
                C121 -
            (C8145 * C1525 + C50800 * C1526 + C8144 * C449 + C50908 * C456) *
                C109) *
               C50828) *
              C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C49720 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50878 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
                C50909 +
            ((C14093 + C14094) * C49720 + (C14095 + C14096) * C50878 -
             C14087 * C49713 - C14088 * C50611) *
                C50828) *
               C2303 +
           (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50878 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50611) *
                C50909 +
            (C14091 * C49720 + C14092 * C50878 - C8565 * C49713 -
             C8566 * C50611) *
                C50828) *
               C50633) *
              C50694 * C582 +
          ((((C8369 + C8370) * C49713 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50878 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C49720) +
             (C8371 + C8372) * C50611) *
                C50909 +
            ((C9898 + C9897) * C49713 -
             ((C8145 * C833 + C50800 * C842 + C8144 * C820 + C50908 * C835) *
                  C50878 +
              (C8145 * C818 + C50800 * C834 + C8144 * C811 + C50908 * C819) *
                  C49720) +
             (C9900 + C9899) * C50611) *
                C50828) *
               C2303 +
           (((C8374 + C8373) * C49713 -
             ((C8372 + C8371) * C50878 + (C8370 + C8369) * C49720) +
             (C8376 + C8375) * C50611) *
                C50909 +
            ((C9902 + C9901) * C49713 -
             ((C9899 + C9900) * C50878 + (C9897 + C9898) * C49720) +
             (C9904 + C9903) * C50611) *
                C50828) *
               C50633) *
              C50694 * C583 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C49720 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50878 -
             (C8729 + C8730) * C49713 - (C8731 + C8732) * C50611) *
                C50909 +
            ((C8144 * C818 + C50908 * C834 + C8145 * C3154 + C50800 * C3158) *
                 C49720 +
             (C8144 * C833 + C50908 * C842 + C8145 * C3159 + C50800 * C3166) *
                 C50878 -
             (C14299 + C14300) * C49713 - (C14301 + C14302) * C50611) *
                C50828) *
               C2303 +
           (((C8730 + C8729) * C49720 + (C8732 + C8731) * C50878 -
             (C8733 + C8734) * C49713 - (C8735 + C8736) * C50611) *
                C50909 +
            ((C14300 + C14299) * C49720 + (C14302 + C14301) * C50878 -
             (C8145 * C4100 + C50800 * C4101 + C8144 * C816 + C50908 * C830) *
                 C49713 -
             (C8145 * C4102 + C50800 * C4103 + C8144 * C829 + C50908 * C840) *
                 C50611) *
                C50828) *
               C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C283 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
             C8196 * C280) *
                C50909 +
            ((C8144 * C435 + C50908 * C442 + C8145 * C811 + C50800 * C819) *
                 C283 +
             (C8144 * C441 + C50908 * C452 + C8145 * C820 + C50800 * C835) *
                 C278 -
             (C8554 + C8553) * C284 - (C8556 + C8555) * C279 +
             (C8558 + C8557) * C285 + (C8560 + C8559) * C280) *
                C50828) *
               C2303 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C279 +
             (C8188 + C8187) * C285 + (C8190 + C8189) * C280) *
                C50909 +
            ((C8553 + C8554) * C283 + (C8555 + C8556) * C278 - C8565 * C284 -
             C8566 * C279 + (C8562 + C8561) * C285 + (C8564 + C8563) * C280) *
                C50828) *
               C50633) *
              C50694 * C50893 +
          ((((C8369 + C8370) * C284 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C278 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C283) +
             (C8371 + C8372) * C279 - C8381 * C285 - C8382 * C280) *
                C50909 +
            ((C9898 + C9897) * C284 -
             ((C8145 * C833 + C50800 * C842 + C8144 * C820 + C50908 * C835) *
                  C278 +
              (C8145 * C818 + C50800 * C834 + C8144 * C811 + C50908 * C819) *
                  C283) +
             (C9900 + C9899) * C279 - (C9901 + C9902) * C285 -
             (C9903 + C9904) * C280) *
                C50828) *
               C2303 +
           (((C8374 + C8373) * C284 -
             ((C8372 + C8371) * C278 + (C8370 + C8369) * C283) +
             (C8376 + C8375) * C279 - (C8377 + C8378) * C285 -
             (C8379 + C8380) * C280) *
                C50909 +
            ((C9902 + C9901) * C284 -
             ((C9899 + C9900) * C278 + (C9897 + C9898) * C283) +
             (C9904 + C9903) * C279 -
             (C8145 * C815 + C50800 * C828 + C8144 * C814 + C50908 * C825) *
                 C285 -
             (C8145 * C827 + C50800 * C839 + C8144 * C826 + C50908 * C838) *
                 C280) *
                C50828) *
               C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50909 +
            ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
               C2303 +
           (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50909 +
            (C14091 * C696 + C14092 * C50606) * C50828) *
               C50633) *
              C50694 * C692 -
          ((((C9899 + C9900) * C50606 + (C9897 + C9898) * C696) * C50828 +
            ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50909) *
               C50633 +
           (((C8145 * C833 + C50800 * C842 + C8144 * C820 + C50908 * C835) *
                 C50606 +
             (C8145 * C818 + C50800 * C834 + C8144 * C811 + C50908 * C819) *
                 C696) *
                C50828 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C50909) *
               C2303) *
              C50694 * C693 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C696 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50606) *
                C50909 +
            ((C8144 * C818 + C50908 * C834 + C8145 * C3154 + C50800 * C3158) *
                 C696 +
             (C8144 * C833 + C50908 * C842 + C8145 * C3159 + C50800 * C3166) *
                 C50606) *
                C50828) *
               C2303 +
           (((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C50909 +
            ((C14300 + C14299) * C696 + (C14302 + C14301) * C50606) * C50828) *
               C50633) *
              C50694 * C694 -
          ((((C8145 * C3162 + C50800 * C3168 + C8144 * C3161 + C50908 * C3167) *
                 C50606 +
             (C8145 * C3156 + C50800 * C3163 + C8144 * C3155 + C50908 * C3160) *
                 C696) *
                C50828 +
            ((C8145 * C2878 + C50800 * C2882 + C8144 * C705 + C50908 * C711) *
                 C50606 +
             (C8145 * C2873 + C50800 * C2877 + C8144 * C699 + C50908 * C706) *
                 C696) *
                C50909) *
               C50633 +
           (((C8145 * C3164 + C50800 * C3169 + C8144 * C3159 + C50908 * C3166) *
                 C50606 +
             (C8145 * C3157 + C50800 * C3165 + C8144 * C3154 + C50908 * C3158) *
                 C696) *
                C50828 +
            ((C8145 * C2876 + C50800 * C2881 + C8144 * C707 + C50908 * C712) *
                 C50606 +
             (C8145 * C2872 + C50800 * C2875 + C8144 * C700 + C50908 * C708) *
                 C696) *
                C50909) *
               C2303) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C283 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
             C8196 * C280) *
                C50909 +
            ((C14093 + C14094) * C283 + (C14095 + C14096) * C278 -
             C14087 * C284 - C14088 * C279 + C14089 * C285 + C14090 * C280) *
                C50828) *
               C2303 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C279 +
             (C8188 + C8187) * C285 + (C8190 + C8189) * C280) *
                C50909 +
            (C14091 * C283 + C14092 * C278 - C8565 * C284 - C8566 * C279 +
             (C8562 + C8561) * C285 + (C8564 + C8563) * C280) *
                C50828) *
               C50633) *
              C50894 +
          (((C14091 * C284 -
             ((C14096 + C14095) * C278 + (C14094 + C14093) * C283) +
             C14092 * C279 - C8565 * C285 - C8566 * C280) *
                C50909 +
            ((C9144 + C9143) * C284 -
             ((C8145 * C1090 + C50800 * C1095 + C8144 * C950 + C50908 * C959) *
                  C278 +
              (C8145 * C1083 + C50800 * C1091 + C8144 * C944 + C50908 * C949) *
                  C283) +
             (C9146 + C9145) * C279 - (C9147 + C9148) * C285 -
             (C9149 + C9150) * C280) *
                C50828) *
               C2303 +
           ((C14089 * C284 - (C14088 * C278 + C14087 * C283) + C14090 * C279 -
             (C8561 + C8562) * C285 - (C8563 + C8564) * C280) *
                C50909 +
            ((C9148 + C9147) * C284 -
             ((C9145 + C9146) * C278 + (C9143 + C9144) * C283) +
             (C9150 + C9149) * C279 -
             (C8145 * C1080 + C50800 * C1085 + C8144 * C947 + C50908 * C955) *
                 C285 -
             (C8145 * C1084 + C50800 * C1092 + C8144 * C956 + C50908 * C962) *
                 C280) *
                C50828) *
               C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C696 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C50606) *
                 C50909 +
             ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
                C2303 +
            (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C50909 +
             (C14091 * C696 + C14092 * C50606) * C50828) *
                C50633) *
               C50894 -
           ((((C9145 + C9146) * C50606 + (C9143 + C9144) * C696) * C50828 +
             (C14088 * C50606 + C14087 * C696) * C50909) *
                C50633 +
            (((C8145 * C1090 + C50800 * C1095 + C8144 * C950 + C50908 * C959) *
                  C50606 +
              (C8145 * C1083 + C50800 * C1091 + C8144 * C944 + C50908 * C949) *
                  C696) *
                 C50828 +
             ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C50909) *
                C2303) *
               C50706) *
              C582 +
          (((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C50909 +
             ((C8144 * C1083 + C50908 * C1091 + C8145 * C3316 +
               C50800 * C3319) *
                  C696 +
              (C8144 * C1090 + C50908 * C1095 + C8145 * C3320 +
               C50800 * C3325) *
                  C50606) *
                 C50828) *
                C2303 +
            (((C9898 + C9897) * C696 + (C9900 + C9899) * C50606) * C50909 +
             ((C8144 * C1082 + C50908 * C1089 + C8145 * C3317 +
               C50800 * C3321) *
                  C696 +
              (C8144 * C1088 + C50908 * C1094 + C8145 * C3322 +
               C50800 * C3326) *
                  C50606) *
                 C50828) *
                C50633) *
               C50706 -
           ((((C9899 + C9900) * C50606 + (C9897 + C9898) * C696) * C50828 +
             ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C50909) *
                C50633 +
            (((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50828 +
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50606 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C696) *
                 C50909) *
                C2303) *
               C50894) *
              C583 +
          (((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                  C696 +
              (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                  C50606) *
                 C50909 +
             ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50828) *
                C2303 +
            (((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C50909 +
             ((C14300 + C14299) * C696 + (C14302 + C14301) * C50606) * C50828) *
                C50633) *
               C50894 -
           ((((C8145 * C3494 + C50800 * C3498 + C8144 * C3322 +
               C50908 * C3326) *
                  C50606 +
              (C8145 * C3492 + C50800 * C3495 + C8144 * C3317 +
               C50908 * C3321) *
                  C696) *
                 C50828 +
             ((C14301 + C14302) * C50606 + (C14299 + C14300) * C696) * C50909) *
                C50633 +
            (((C8145 * C3496 + C50800 * C3499 + C8144 * C3320 +
               C50908 * C3325) *
                  C50606 +
              (C8145 * C3493 + C50800 * C3497 + C8144 * C3316 +
               C50908 * C3319) *
                  C696) *
                 C50828 +
             ((C14650 + C14649) * C50606 + (C14648 + C14647) * C696) * C50909) *
                C2303) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1285 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50936 -
            (C2345 + C2346 + C2347) * C1286 - (C2348 + C2349 + C2350) * C50920 +
            (C2351 + C2352 + C2353) * C1287 + (C2354 + C2355 + C2356) * C1282) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C1285 + (C2350 + C2349 + C2348) * C50936 -
            (C2353 + C2352 + C2351) * C1286 - (C2356 + C2355 + C2354) * C50920 +
            (C2359 + C2358 + C2357) * C1287 + (C2362 + C2361 + C2360) * C1282) *
               C50764 * C50633) *
              C50694 * C1283 +
          (((C2533 + C2534 + C2535) * C1286 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50936 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C1285) +
            (C2536 + C2537 + C2538) * C50920 - (C2539 + C2540 + C2541) * C1287 -
            (C2542 + C2543 + C2544) * C1282) *
               C50764 * C2303 +
           ((C2541 + C2540 + C2539) * C1286 -
            ((C2538 + C2537 + C2536) * C50936 +
             (C2535 + C2534 + C2533) * C1285) +
            (C2544 + C2543 + C2542) * C50920 -
            (C2307 * C697 + C2302 * C702 + C2306 * C590 + C2301 * C598 +
             C2305 * C289 + C2300 * C298) *
                C1287 -
            (C2307 * C701 + C2302 * C709 + C2306 * C599 + C2301 * C605 +
             C2305 * C299 + C2300 * C307) *
                C1282) *
               C50764 * C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C1285 +
            (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
            C172 * C50920 + C173 * C1287 + C174 * C1282) *
               C50764 * C111 +
           (C171 * C1285 + C172 * C50936 - C173 * C1286 - C174 * C50920 +
            C175 * C1287 + C176 * C1282) *
               C50764 * C112 +
           (C173 * C1285 + C174 * C50936 - C175 * C1286 - C176 * C50920 +
            C177 * C1287 + C178 * C1282) *
               C50764 * C113 +
           (C175 * C1285 + C176 * C50936 - C177 * C1286 - C178 * C50920 +
            C179 * C1287 + C180 * C1282) *
               C50764 * C114) *
              C50694 * C1283 +
          ((C327 * C1286 -
            ((C117 * C293 + C50748 * C304) * C50936 +
             (C117 * C287 + C50748 * C294) * C1285) +
            C328 * C50920 - C329 * C1287 - C330 * C1282) *
               C50764 * C111 +
           (C329 * C1286 - (C328 * C50936 + C327 * C1285) + C330 * C50920 -
            C331 * C1287 - C332 * C1282) *
               C50764 * C112 +
           (C331 * C1286 - (C330 * C50936 + C329 * C1285) + C332 * C50920 -
            C333 * C1287 - C334 * C1282) *
               C50764 * C113 +
           (C333 * C1286 - (C332 * C50936 + C331 * C1285) + C334 * C50920 -
            (C117 * C291 + C50748 * C302) * C1287 -
            (C117 * C303 + C50748 * C309) * C1282) *
               C50764 * C114) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1285 +
             (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
             C172 * C50920 + C173 * C1287 + C174 * C1282) *
                C5192 +
            (C5536 * C1285 + C5537 * C50936 - C475 * C1286 - C476 * C50920 +
             C477 * C1287 + C478 * C1282) *
                C5193 +
            (C5538 * C1285 + C5539 * C50936 - C977 * C1286 - C978 * C50920 +
             C979 * C1287 + C980 * C1282) *
                C5194) *
               C2303 +
           ((C171 * C1285 + C172 * C50936 - C173 * C1286 - C174 * C50920 +
             C175 * C1287 + C176 * C1282) *
                C5192 +
            (C475 * C1285 + C476 * C50936 - C477 * C1286 - C478 * C50920 +
             C479 * C1287 + C480 * C1282) *
                C5193 +
            (C977 * C1285 + C978 * C50936 - C979 * C1286 - C980 * C50920 +
             C981 * C1287 + C982 * C1282) *
                C5194) *
               C50633) *
              C50694 * C1283 +
          (((C327 * C1286 -
             ((C117 * C293 + C50748 * C304) * C50936 +
              (C117 * C287 + C50748 * C294) * C1285) +
             C328 * C50920 - C329 * C1287 - C330 * C1282) *
                C5192 +
            (C1540 * C1286 - (C5983 * C50936 + C5982 * C1285) + C1541 * C50920 -
             C1542 * C1287 - C1543 * C1282) *
                C5193 +
            (C5350 * C1286 - (C5985 * C50936 + C5984 * C1285) + C5351 * C50920 -
             C5352 * C1287 - C5353 * C1282) *
                C5194) *
               C2303 +
           ((C329 * C1286 - (C328 * C50936 + C327 * C1285) + C330 * C50920 -
             C331 * C1287 - C332 * C1282) *
                C5192 +
            (C1542 * C1286 - (C1541 * C50936 + C1540 * C1285) + C1543 * C50920 -
             C1544 * C1287 - C1545 * C1282) *
                C5193 +
            (C5352 * C1286 - (C5351 * C50936 + C5350 * C1285) + C5353 * C50920 -
             (C117 * C1080 + C50748 * C1085) * C1287 -
             (C117 * C1084 + C50748 * C1092) * C1282) *
                C5194) *
               C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1391 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C1386 -
            (C2345 + C2346 + C2347) * C1392 -
            (C2348 + C2349 + C2350) * C50611) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C1391 + (C2350 + C2349 + C2348) * C1386 -
            (C2353 + C2352 + C2351) * C1392 -
            (C2356 + C2355 + C2354) * C50611) *
               C50764 * C50633) *
              C50694 * C50939 +
          (((C2533 + C2534 + C2535) * C1392 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C1386 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C1391) +
            (C2536 + C2537 + C2538) * C50611) *
               C50764 * C2303 +
           ((C2541 + C2540 + C2539) * C1392 -
            ((C2538 + C2537 + C2536) * C1386 +
             (C2535 + C2534 + C2533) * C1391) +
            (C2544 + C2543 + C2542) * C50611) *
               C50764 * C50633) *
              C50694 * C50926 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C1391 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C1386 -
            (C2897 + C2898 + C2899) * C1392 -
            (C2900 + C2901 + C2902) * C50611) *
               C50764 * C2303 +
           ((C2899 + C2898 + C2897) * C1391 + (C2902 + C2901 + C2900) * C1386 -
            (C2307 * C2874 + C2302 * C2879 + C2306 * C698 + C2301 * C704 +
             C2305 * C589 + C2300 * C596) *
                C1392 -
            (C2307 * C2880 + C2302 * C2883 + C2306 * C703 + C2301 * C710 +
             C2305 * C597 + C2300 * C604) *
                C50611) *
               C50764 * C50633) *
              C50694 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C1391 +
            (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
            C172 * C50611) *
               C50764 * C111 +
           (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
               C50764 * C112 +
           (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
               C50764 * C113 +
           (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50611) *
               C50764 * C114) *
              C50694 * C50939 +
          ((C327 * C1392 -
            ((C117 * C293 + C50748 * C304) * C1386 +
             (C117 * C287 + C50748 * C294) * C1391) +
            C328 * C50611) *
               C50764 * C111 +
           (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
               C50764 * C112 +
           (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
               C50764 * C113 +
           (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50611) *
               C50764 * C114) *
              C50694 * C50926 +
          (((C117 * C587 + C50748 * C592) * C1391 +
            (C117 * C593 + C50748 * C602) * C1386 - C620 * C1392 -
            C621 * C50611) *
               C50764 * C111 +
           (C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50611) *
               C50764 * C112 +
           (C622 * C1391 + C623 * C1386 - C624 * C1392 - C625 * C50611) *
               C50764 * C113 +
           (C624 * C1391 + C625 * C1386 -
            (C117 * C591 + C50748 * C600) * C1392 -
            (C117 * C601 + C50748 * C606) * C50611) *
               C50764 * C114) *
              C50694 * C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C5192 +
            (C5536 * C1391 + C5537 * C1386 - C475 * C1392 - C476 * C50611) *
                C5193 +
            (C5538 * C1391 + C5539 * C1386 - C977 * C1392 - C978 * C50611) *
                C5194) *
               C2303 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C5192 +
            (C475 * C1391 + C476 * C1386 - C477 * C1392 - C478 * C50611) *
                C5193 +
            (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50611) *
                C5194) *
               C50633) *
              C50694 * C50939 +
          (((C327 * C1392 -
             ((C117 * C293 + C50748 * C304) * C1386 +
              (C117 * C287 + C50748 * C294) * C1391) +
             C328 * C50611) *
                C5192 +
            (C1540 * C1392 - (C5983 * C1386 + C5982 * C1391) + C1541 * C50611) *
                C5193 +
            (C5350 * C1392 - (C5985 * C1386 + C5984 * C1391) + C5351 * C50611) *
                C5194) *
               C2303 +
           ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                C5192 +
            (C1542 * C1392 - (C1541 * C1386 + C1540 * C1391) + C1543 * C50611) *
                C5193 +
            (C5352 * C1392 - (C5351 * C1386 + C5350 * C1391) + C5353 * C50611) *
                C5194) *
               C50633) *
              C50694 * C50926 +
          ((((C117 * C587 + C50748 * C592) * C1391 +
             (C117 * C593 + C50748 * C602) * C1386 - C620 * C1392 -
             C621 * C50611) *
                C5192 +
            (C5986 * C1391 + C5987 * C1386 - C5702 * C1392 - C5703 * C50611) *
                C5193 +
            (C5988 * C1391 + C5989 * C1386 - C5704 * C1392 - C5705 * C50611) *
                C5194) *
               C2303 +
           ((C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50611) *
                C5192 +
            (C5702 * C1391 + C5703 * C1386 -
             (C117 * C816 + C50748 * C830) * C1392 -
             (C117 * C829 + C50748 * C840) * C50611) *
                C5193 +
            (C5704 * C1391 + C5705 * C1386 -
             (C117 * C3318 + C50748 * C3323) * C1392 -
             (C117 * C3324 + C50748 * C3327) * C50611) *
                C5194) *
               C50633) *
              C50694 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C1391 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C1386 -
             (C2345 + C2346 + C2347) * C1392 -
             (C2348 + C2349 + C2350) * C50611) *
                C50764 * C2303 +
            ((C2347 + C2346 + C2345) * C1391 + (C2350 + C2349 + C2348) * C1386 -
             (C2353 + C2352 + C2351) * C1392 -
             (C2356 + C2355 + C2354) * C50611) *
                C50764 * C50633) *
               C50894 +
           (((C2715 + C2716 + C2717) * C1392 -
             ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
               C2305 * C441 + C2300 * C452) *
                  C1386 +
              (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
               C2305 * C435 + C2300 * C442) *
                  C1391) +
             (C2718 + C2719 + C2720) * C50611) *
                C50764 * C2303 +
            ((C2723 + C2722 + C2721) * C1392 -
             ((C2720 + C2719 + C2718) * C1386 +
              (C2717 + C2716 + C2715) * C1391) +
             (C2726 + C2725 + C2724) * C50611) *
                C50764 * C50633) *
               C50706) *
              C1283 +
          ((((C2533 + C2534 + C2535) * C1392 -
             ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
               C2305 * C293 + C2300 * C304) *
                  C1386 +
              (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
               C2305 * C287 + C2300 * C294) *
                  C1391) +
             (C2536 + C2537 + C2538) * C50611) *
                C50764 * C2303 +
            ((C2541 + C2540 + C2539) * C1392 -
             ((C2538 + C2537 + C2536) * C1386 +
              (C2535 + C2534 + C2533) * C1391) +
             (C2544 + C2543 + C2542) * C50611) *
                C50764 * C50633) *
               C50894 +
           (((C2305 * C811 + C2300 * C819 + C2306 * C818 + C2301 * C834 +
              C2307 * C3154 + C2302 * C3158) *
                 C1391 +
             (C2305 * C820 + C2300 * C835 + C2306 * C833 + C2301 * C842 +
              C2307 * C3159 + C2302 * C3166) *
                 C1386 -
             (C4117 + C4118 + C4119) * C1392 -
             (C4120 + C4121 + C4122) * C50611) *
                C50764 * C2303 +
            ((C4119 + C4118 + C4117) * C1391 + (C4122 + C4121 + C4120) * C1386 -
             (C2307 * C4100 + C2302 * C4101 + C2306 * C816 + C2301 * C830 +
              C2305 * C813 + C2300 * C823) *
                 C1392 -
             (C2307 * C4102 + C2302 * C4103 + C2306 * C829 + C2301 * C840 +
              C2305 * C824 + C2300 * C837) *
                 C50611) *
                C50764 * C50633) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C50764 * C111 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C50764 * C112 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                C50764 * C113 +
            (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50611) *
                C50764 * C114) *
               C50894 +
           ((C475 * C1392 -
             ((C117 * C441 + C50748 * C452) * C1386 +
              (C117 * C435 + C50748 * C442) * C1391) +
             C476 * C50611) *
                C50764 * C111 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50611) *
                C50764 * C112 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50611) *
                C50764 * C113 +
            (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50611) *
                C50764 * C114) *
               C50706) *
              C1283 +
          (((C327 * C1392 -
             ((C117 * C293 + C50748 * C304) * C1386 +
              (C117 * C287 + C50748 * C294) * C1391) +
             C328 * C50611) *
                C50764 * C111 +
            (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                C50764 * C112 +
            (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                C50764 * C113 +
            (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50611) *
                C50764 * C114) *
               C50894 +
           (((C117 * C811 + C50748 * C819) * C1391 +
             (C117 * C820 + C50748 * C835) * C1386 - C1540 * C1392 -
             C1541 * C50611) *
                C50764 * C111 +
            (C1540 * C1391 + C1541 * C1386 - C1542 * C1392 - C1543 * C50611) *
                C50764 * C112 +
            (C1542 * C1391 + C1543 * C1386 - C1544 * C1392 - C1545 * C50611) *
                C50764 * C113 +
            (C1544 * C1391 + C1545 * C1386 -
             (C117 * C1523 + C50748 * C1524) * C1392 -
             (C117 * C1525 + C50748 * C1526) * C50611) *
                C50764 * C114) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C1391 +
              (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
              C172 * C50611) *
                 C5192 +
             (C6984 + C6985 - C6986 - C6987) * C5193 +
             (C6988 + C6989 - C6990 - C6991) * C5194) *
                C2303 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                 C5192 +
             (C6992 + C6993 - C6994 - C6995) * C5193 +
             (C6996 + C6997 - C6998 - C6999) * C5194) *
                C50633) *
               C50894 +
           (((C6986 - (C6985 + C6984) + C6987) * C5192 +
             (C6990 - (C6989 + C6988) + C6991) * C5193 +
             (C5540 * C1392 - (C6188 * C1386 + C6189 * C1391) +
              C5541 * C50611) *
                 C5194) *
                C2303 +
            ((C6994 - (C6993 + C6992) + C6995) * C5192 +
             (C6998 - (C6997 + C6996) + C6999) * C5193 +
             (C5542 * C1392 - (C5541 * C1386 + C5540 * C1391) +
              C5543 * C50611) *
                 C5194) *
                C50633) *
               C50706) *
              C1283 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50748 * C304) * C1386 +
               (C117 * C287 + C50748 * C294) * C1391) +
              C328 * C50611) *
                 C5192 +
             (C7000 - (C7001 + C7002) + C7003) * C5193 +
             (C7004 - (C7005 + C7006) + C7007) * C5194) *
                C2303 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                 C5192 +
             (C7008 - (C7009 + C7010) + C7011) * C5193 +
             (C7012 - (C7013 + C7014) + C7015) * C5194) *
                C50633) *
               C50894 +
           (((C7002 + C7001 - C7000 - C7003) * C5192 +
             (C7006 + C7005 - C7004 - C7007) * C5193 +
             (C6368 * C1391 + C6369 * C1386 - C6370 * C1392 - C6371 * C50611) *
                 C5194) *
                C2303 +
            ((C7010 + C7009 - C7008 - C7011) * C5192 +
             (C7014 + C7013 - C7012 - C7015) * C5193 +
             (C6370 * C1391 + C6371 * C1386 -
              (C117 * C6979 + C50748 * C6980) * C1392 -
              (C117 * C6981 + C50748 * C6982) * C50611) *
                 C5194) *
                C50633) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C49720 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50878 -
             (C2345 + C2346 + C2347) * C49713 -
             (C2348 + C2349 + C2350) * C50611) *
                C50764 * C2303 +
            ((C2347 + C2346 + C2345) * C49720 +
             (C2350 + C2349 + C2348) * C50878 -
             (C2353 + C2352 + C2351) * C49713 -
             (C2356 + C2355 + C2354) * C50611) *
                C50764 * C50633) *
               C1643 +
           (((C2715 + C2716 + C2717) * C49713 -
             ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
               C2305 * C441 + C2300 * C452) *
                  C50878 +
              (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
               C2305 * C435 + C2300 * C442) *
                  C49720) +
             (C2718 + C2719 + C2720) * C50611) *
                C50764 * C2303 +
            ((C2723 + C2722 + C2721) * C49713 -
             ((C2720 + C2719 + C2718) * C50878 +
              (C2717 + C2716 + C2715) * C49720) +
             (C2726 + C2725 + C2724) * C50611) *
                C50764 * C50633) *
               C50706) *
              C1283 +
          ((((C2533 + C2534 + C2535) * C49713 -
             ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
               C2305 * C293 + C2300 * C304) *
                  C50878 +
              (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
               C2305 * C287 + C2300 * C294) *
                  C49720) +
             (C2536 + C2537 + C2538) * C50611) *
                C50764 * C2303 +
            ((C2541 + C2540 + C2539) * C49713 -
             ((C2538 + C2537 + C2536) * C50878 +
              (C2535 + C2534 + C2533) * C49720) +
             (C2544 + C2543 + C2542) * C50611) *
                C50764 * C50633) *
               C1643 +
           (((C2305 * C811 + C2300 * C819 + C2306 * C818 + C2301 * C834 +
              C2307 * C3154 + C2302 * C3158) *
                 C49720 +
             (C2305 * C820 + C2300 * C835 + C2306 * C833 + C2301 * C842 +
              C2307 * C3159 + C2302 * C3166) *
                 C50878 -
             (C4117 + C4118 + C4119) * C49713 -
             (C4120 + C4121 + C4122) * C50611) *
                C50764 * C2303 +
            ((C4119 + C4118 + C4117) * C49720 +
             (C4122 + C4121 + C4120) * C50878 -
             (C2307 * C4100 + C2302 * C4101 + C2306 * C816 + C2301 * C830 +
              C2305 * C813 + C2300 * C823) *
                 C49713 -
             (C2307 * C4102 + C2302 * C4103 + C2306 * C829 + C2301 * C840 +
              C2305 * C824 + C2300 * C837) *
                 C50611) *
                C50764 * C50633) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C50764 * C111 +
            (C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C50764 * C112 +
            (C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                C50764 * C113 +
            (C175 * C49720 + C176 * C50878 - C177 * C49713 - C178 * C50611) *
                C50764 * C114) *
               C1643 +
           ((C475 * C49713 -
             ((C117 * C441 + C50748 * C452) * C50878 +
              (C117 * C435 + C50748 * C442) * C49720) +
             C476 * C50611) *
                C50764 * C111 +
            (C477 * C49713 - (C476 * C50878 + C475 * C49720) + C478 * C50611) *
                C50764 * C112 +
            (C479 * C49713 - (C478 * C50878 + C477 * C49720) + C480 * C50611) *
                C50764 * C113 +
            (C481 * C49713 - (C480 * C50878 + C479 * C49720) + C482 * C50611) *
                C50764 * C114) *
               C50706) *
              C1283 +
          (((C327 * C49713 -
             ((C117 * C293 + C50748 * C304) * C50878 +
              (C117 * C287 + C50748 * C294) * C49720) +
             C328 * C50611) *
                C50764 * C111 +
            (C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                C50764 * C112 +
            (C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
                C50764 * C113 +
            (C333 * C49713 - (C332 * C50878 + C331 * C49720) + C334 * C50611) *
                C50764 * C114) *
               C1643 +
           (((C117 * C811 + C50748 * C819) * C49720 +
             (C117 * C820 + C50748 * C835) * C50878 - C1540 * C49713 -
             C1541 * C50611) *
                C50764 * C111 +
            (C1540 * C49720 + C1541 * C50878 - C1542 * C49713 -
             C1543 * C50611) *
                C50764 * C112 +
            (C1542 * C49720 + C1543 * C50878 - C1544 * C49713 -
             C1545 * C50611) *
                C50764 * C113 +
            (C1544 * C49720 + C1545 * C50878 -
             (C117 * C1523 + C50748 * C1524) * C49713 -
             (C117 * C1525 + C50748 * C1526) * C50611) *
                C50764 * C114) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C49720 +
              (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
              C172 * C50611) *
                 C5192 +
             (C6156 + C6157 - C6158 - C6159) * C5193 + C6196 * C5194) *
                C2303 +
            ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                 C5192 +
             (C6164 + C6165 - C6166 - C6167) * C5193 + C6197 * C5194) *
                C50633) *
               C1643 +
           (((C6158 - (C6157 + C6156) + C6159) * C5192 +
             (C6162 - (C6161 + C6160) + C6163) * C5193 +
             (C6172 - (C6194 + C6195) + C6177) * C5194) *
                C2303 +
            ((C6166 - (C6165 + C6164) + C6167) * C5192 +
             (C6170 - (C6169 + C6168) + C6171) * C5193 +
             (C6178 - (C6179 + C6180) + C6181) * C5194) *
                C50633) *
               C50706) *
              C1283 +
          ((((C327 * C49713 -
              ((C117 * C293 + C50748 * C304) * C50878 +
               (C117 * C287 + C50748 * C294) * C49720) +
              C328 * C50611) *
                 C5192 +
             (C7734 - (C7735 + C7736) + C7737) * C5193 +
             (C7738 - (C7739 + C7740) + C7741) * C5194) *
                C2303 +
            ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                 C5192 +
             (C7742 - (C7743 + C7744) + C7745) * C5193 +
             (C7746 - (C7747 + C7748) + C7749) * C5194) *
                C50633) *
               C1643 +
           (((C7736 + C7735 - C7734 - C7737) * C5192 +
             (C7740 + C7739 - C7738 - C7741) * C5193 +
             (C6368 * C49720 + C6369 * C50878 - C6370 * C49713 -
              C6371 * C50611) *
                 C5194) *
                C2303 +
            ((C7744 + C7743 - C7742 - C7745) * C5192 +
             (C7748 + C7747 - C7746 - C7749) * C5193 +
             (C6370 * C49720 + C6371 * C50878 -
              (C117 * C6979 + C50748 * C6980) * C49713 -
              (C117 * C6981 + C50748 * C6982) * C50611) *
                 C5194) *
                C50633) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[34] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C2305 * C122 + C2300 * C129 + C2306 * C287 +
                      C2301 * C294 + C2307 * C587 + C2302 * C592) *
                         C696 +
                     (C2305 * C130 + C2300 * C143 + C2306 * C293 +
                      C2301 * C304 + C2307 * C593 + C2302 * C602) *
                         C50606) *
                        C50764 * C2303 +
                    ((C2347 + C2346 + C2345) * C696 +
                     (C2350 + C2349 + C2348) * C50606) *
                        C50764 * C50633) *
                       C1643 -
                   (((C2720 + C2719 + C2718) * C50606 +
                     (C2717 + C2716 + C2715) * C696) *
                        C50764 * C50633 +
                    ((C2307 * C833 + C2302 * C842 + C2306 * C820 +
                      C2301 * C835 + C2305 * C441 + C2300 * C452) *
                         C50606 +
                     (C2307 * C818 + C2302 * C834 + C2306 * C811 +
                      C2301 * C819 + C2305 * C435 + C2300 * C442) *
                         C696) *
                        C50764 * C2303) *
                       C50706) *
                      C50939 +
                  ((((C2305 * C811 + C2300 * C819 + C2306 * C818 +
                      C2301 * C834 + C2307 * C3154 + C2302 * C3158) *
                         C696 +
                     (C2305 * C820 + C2300 * C835 + C2306 * C833 +
                      C2301 * C842 + C2307 * C3159 + C2302 * C3166) *
                         C50606) *
                        C50764 * C2303 +
                    ((C4119 + C4118 + C4117) * C696 +
                     (C4122 + C4121 + C4120) * C50606) *
                        C50764 * C50633) *
                       C50706 -
                   (((C2538 + C2537 + C2536) * C50606 +
                     (C2535 + C2534 + C2533) * C696) *
                        C50764 * C50633 +
                    ((C2307 * C707 + C2302 * C712 + C2306 * C593 +
                      C2301 * C602 + C2305 * C293 + C2300 * C304) *
                         C50606 +
                     (C2307 * C700 + C2302 * C708 + C2306 * C587 +
                      C2301 * C592 + C2305 * C287 + C2300 * C294) *
                         C696) *
                        C50764 * C2303) *
                       C1643) *
                      C50926 +
                  ((((C2305 * C587 + C2300 * C592 + C2306 * C700 +
                      C2301 * C708 + C2307 * C2872 + C2302 * C2875) *
                         C696 +
                     (C2305 * C593 + C2300 * C602 + C2306 * C707 +
                      C2301 * C712 + C2307 * C2876 + C2302 * C2881) *
                         C50606) *
                        C50764 * C2303 +
                    ((C2899 + C2898 + C2897) * C696 +
                     (C2902 + C2901 + C2900) * C50606) *
                        C50764 * C50633) *
                       C1643 -
                   (((C2307 * C3162 + C2302 * C3168 + C2306 * C3161 +
                      C2301 * C3167 + C2305 * C831 + C2300 * C841) *
                         C50606 +
                     (C2307 * C3156 + C2302 * C3163 + C2306 * C3155 +
                      C2301 * C3160 + C2305 * C817 + C2300 * C832) *
                         C696) *
                        C50764 * C50633 +
                    ((C2307 * C3164 + C2302 * C3169 + C2306 * C3159 +
                      C2301 * C3166 + C2305 * C833 + C2300 * C842) *
                         C50606 +
                     (C2307 * C3157 + C2302 * C3165 + C2306 * C3154 +
                      C2301 * C3158 + C2305 * C818 + C2300 * C834) *
                         C696) *
                        C50764 * C2303) *
                       C50706) *
                      C1390)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50748 * C129) * C696 +
                     (C117 * C130 + C50748 * C143) * C50606) *
                        C50764 * C111 +
                    (C171 * C696 + C172 * C50606) * C50764 * C112 +
                    (C173 * C696 + C174 * C50606) * C50764 * C113 +
                    (C175 * C696 + C176 * C50606) * C50764 * C114) *
                       C1643 -
                   ((C480 * C50606 + C479 * C696) * C50764 * C114 +
                    (C478 * C50606 + C477 * C696) * C50764 * C113 +
                    (C476 * C50606 + C475 * C696) * C50764 * C112 +
                    ((C117 * C441 + C50748 * C452) * C50606 +
                     (C117 * C435 + C50748 * C442) * C696) *
                        C50764 * C111) *
                       C50706) *
                      C50939 +
                  ((((C117 * C811 + C50748 * C819) * C696 +
                     (C117 * C820 + C50748 * C835) * C50606) *
                        C50764 * C111 +
                    (C1540 * C696 + C1541 * C50606) * C50764 * C112 +
                    (C1542 * C696 + C1543 * C50606) * C50764 * C113 +
                    (C1544 * C696 + C1545 * C50606) * C50764 * C114) *
                       C50706 -
                   ((C332 * C50606 + C331 * C696) * C50764 * C114 +
                    (C330 * C50606 + C329 * C696) * C50764 * C113 +
                    (C328 * C50606 + C327 * C696) * C50764 * C112 +
                    ((C117 * C293 + C50748 * C304) * C50606 +
                     (C117 * C287 + C50748 * C294) * C696) *
                        C50764 * C111) *
                       C1643) *
                      C50926 +
                  ((((C117 * C587 + C50748 * C592) * C696 +
                     (C117 * C593 + C50748 * C602) * C50606) *
                        C50764 * C111 +
                    (C620 * C696 + C621 * C50606) * C50764 * C112 +
                    (C622 * C696 + C623 * C50606) * C50764 * C113 +
                    (C624 * C696 + C625 * C50606) * C50764 * C114) *
                       C1643 -
                   (((C117 * C827 + C50748 * C839) * C50606 +
                     (C117 * C815 + C50748 * C828) * C696) *
                        C50764 * C114 +
                    ((C117 * C829 + C50748 * C840) * C50606 +
                     (C117 * C816 + C50748 * C830) * C696) *
                        C50764 * C113 +
                    ((C117 * C831 + C50748 * C841) * C50606 +
                     (C117 * C817 + C50748 * C832) * C696) *
                        C50764 * C112 +
                    ((C117 * C833 + C50748 * C842) * C50606 +
                     (C117 * C818 + C50748 * C834) * C696) *
                        C50764 * C111) *
                       C50706) *
                      C1390)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C122 + C50748 * C129) * C696 +
                      (C117 * C130 + C50748 * C143) * C50606) *
                         C5192 +
                     (C5950 + C5951) * C5193 + C6352 * C5194) *
                        C2303 +
                    ((C171 * C696 + C172 * C50606) * C5192 +
                     (C5954 + C5955) * C5193 + C6353 * C5194) *
                        C50633) *
                       C1643 -
                   ((C6482 * C5194 + (C5957 + C5956) * C5193 +
                     (C5955 + C5954) * C5192) *
                        C50633 +
                    (C6483 * C5194 + (C5953 + C5952) * C5193 +
                     (C5951 + C5950) * C5192) *
                        C2303) *
                       C50706) *
                      C50939 +
                  ((((C5990 + C5991) * C5192 + (C5992 + C5993) * C5193 +
                     (C6372 + C6373) * C5194) *
                        C2303 +
                    ((C5966 + C5967) * C5192 + (C5968 + C5969) * C5193 +
                     (C6374 + C6375) * C5194) *
                        C50633) *
                       C50706 -
                   ((C6366 * C5194 + (C5967 + C5966) * C5193 +
                     (C328 * C50606 + C327 * C696) * C5192) *
                        C50633 +
                    (C6367 * C5194 + (C5991 + C5990) * C5193 +
                     ((C117 * C293 + C50748 * C304) * C50606 +
                      (C117 * C287 + C50748 * C294) * C696) *
                         C5192) *
                        C2303) *
                       C1643) *
                      C50926 +
                  (((((C117 * C587 + C50748 * C592) * C696 +
                      (C117 * C593 + C50748 * C602) * C50606) *
                         C5192 +
                     (C5994 + C5995) * C5193 + (C5996 + C5997) * C5194) *
                        C2303 +
                    ((C620 * C696 + C621 * C50606) * C5192 +
                     (C5978 + C5979) * C5193 + (C5980 + C5981) * C5194) *
                        C50633) *
                       C1643 -
                   ((((C117 * C3602 + C50748 * C3610) * C50606 +
                      (C117 * C3598 + C50748 * C3604) * C696) *
                         C5194 +
                     (C5981 + C5980) * C5193 + (C5979 + C5978) * C5192) *
                        C50633 +
                    (((C117 * C3606 + C50748 * C3612) * C50606 +
                      (C117 * C3600 + C50748 * C3608) * C696) *
                         C5194 +
                     (C5997 + C5996) * C5193 + (C5995 + C5994) * C5192) *
                        C2303) *
                       C50706) *
                      C1390)) /
                    (p * q * std::sqrt(p + q));
    d2ee[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C2305 * C122 + C2300 * C129 + C2306 * C287 +
                      C2301 * C294 + C2307 * C587 + C2302 * C592) *
                         C696 +
                     (C2305 * C130 + C2300 * C143 + C2306 * C293 +
                      C2301 * C304 + C2307 * C593 + C2302 * C602) *
                         C50606) *
                        C50764 * C2303 +
                    ((C2347 + C2346 + C2345) * C696 +
                     (C2350 + C2349 + C2348) * C50606) *
                        C50764 * C50633) *
                       C50940 -
                   (((C2720 + C2719 + C2718) * C50606 +
                     (C2717 + C2716 + C2715) * C696) *
                        C50764 * C50633 +
                    ((C2307 * C833 + C2302 * C842 + C2306 * C820 +
                      C2301 * C835 + C2305 * C441 + C2300 * C452) *
                         C50606 +
                     (C2307 * C818 + C2302 * C834 + C2306 * C811 +
                      C2301 * C819 + C2305 * C435 + C2300 * C442) *
                         C696) *
                        C50764 * C2303) *
                       C50929 +
                   (((C2305 * C944 + C2300 * C949 + C2306 * C1083 +
                      C2301 * C1091 + C2307 * C3316 + C2302 * C3319) *
                         C696 +
                     (C2305 * C950 + C2300 * C959 + C2306 * C1090 +
                      C2301 * C1095 + C2307 * C3320 + C2302 * C3325) *
                         C50606) *
                        C50764 * C2303 +
                    ((C3343 + C3342 + C3341) * C696 +
                     (C3346 + C3345 + C3344) * C50606) *
                        C50764 * C50633) *
                       C1875) *
                      C1283 +
                  ((((C2305 * C811 + C2300 * C819 + C2306 * C818 +
                      C2301 * C834 + C2307 * C3154 + C2302 * C3158) *
                         C696 +
                     (C2305 * C820 + C2300 * C835 + C2306 * C833 +
                      C2301 * C842 + C2307 * C3159 + C2302 * C3166) *
                         C50606) *
                        C50764 * C2303 +
                    ((C4119 + C4118 + C4117) * C696 +
                     (C4122 + C4121 + C4120) * C50606) *
                        C50764 * C50633) *
                       C50929 -
                   (((C2538 + C2537 + C2536) * C50606 +
                     (C2535 + C2534 + C2533) * C696) *
                        C50764 * C50633 +
                    ((C2307 * C707 + C2302 * C712 + C2306 * C593 +
                      C2301 * C602 + C2305 * C293 + C2300 * C304) *
                         C50606 +
                     (C2307 * C700 + C2302 * C708 + C2306 * C587 +
                      C2301 * C592 + C2305 * C287 + C2300 * C294) *
                         C696) *
                        C50764 * C2303) *
                       C50940 -
                   (((C2307 * C3494 + C2302 * C3498 + C2306 * C3322 +
                      C2301 * C3326 + C2305 * C1088 + C2300 * C1094) *
                         C50606 +
                     (C2307 * C3492 + C2302 * C3495 + C2306 * C3317 +
                      C2301 * C3321 + C2305 * C1082 + C2300 * C1089) *
                         C696) *
                        C50764 * C50633 +
                    ((C2307 * C3496 + C2302 * C3499 + C2306 * C3320 +
                      C2301 * C3325 + C2305 * C1090 + C2300 * C1095) *
                         C50606 +
                     (C2307 * C3493 + C2302 * C3497 + C2306 * C3316 +
                      C2301 * C3319 + C2305 * C1083 + C2300 * C1091) *
                         C696) *
                        C50764 * C2303) *
                       C1875) *
                      C50682)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50748 * C129) * C696 +
                     (C117 * C130 + C50748 * C143) * C50606) *
                        C50764 * C111 +
                    (C171 * C696 + C172 * C50606) * C50764 * C112 +
                    (C173 * C696 + C174 * C50606) * C50764 * C113 +
                    (C175 * C696 + C176 * C50606) * C50764 * C114) *
                       C50940 -
                   ((C480 * C50606 + C479 * C696) * C50764 * C114 +
                    (C478 * C50606 + C477 * C696) * C50764 * C113 +
                    (C476 * C50606 + C475 * C696) * C50764 * C112 +
                    ((C117 * C441 + C50748 * C452) * C50606 +
                     (C117 * C435 + C50748 * C442) * C696) *
                        C50764 * C111) *
                       C50929 +
                   (((C117 * C944 + C50748 * C949) * C696 +
                     (C117 * C950 + C50748 * C959) * C50606) *
                        C50764 * C111 +
                    (C977 * C696 + C978 * C50606) * C50764 * C112 +
                    (C979 * C696 + C980 * C50606) * C50764 * C113 +
                    (C981 * C696 + C982 * C50606) * C50764 * C114) *
                       C1875) *
                      C1283 +
                  ((((C117 * C811 + C50748 * C819) * C696 +
                     (C117 * C820 + C50748 * C835) * C50606) *
                        C50764 * C111 +
                    (C1540 * C696 + C1541 * C50606) * C50764 * C112 +
                    (C1542 * C696 + C1543 * C50606) * C50764 * C113 +
                    (C1544 * C696 + C1545 * C50606) * C50764 * C114) *
                       C50929 -
                   ((C332 * C50606 + C331 * C696) * C50764 * C114 +
                    (C330 * C50606 + C329 * C696) * C50764 * C113 +
                    (C328 * C50606 + C327 * C696) * C50764 * C112 +
                    ((C117 * C293 + C50748 * C304) * C50606 +
                     (C117 * C287 + C50748 * C294) * C696) *
                        C50764 * C111) *
                       C50940 -
                   (((C117 * C1084 + C50748 * C1092) * C50606 +
                     (C117 * C1080 + C50748 * C1085) * C696) *
                        C50764 * C114 +
                    ((C117 * C1086 + C50748 * C1093) * C50606 +
                     (C117 * C1081 + C50748 * C1087) * C696) *
                        C50764 * C113 +
                    ((C117 * C1088 + C50748 * C1094) * C50606 +
                     (C117 * C1082 + C50748 * C1089) * C696) *
                        C50764 * C112 +
                    ((C117 * C1090 + C50748 * C1095) * C50606 +
                     (C117 * C1083 + C50748 * C1091) * C696) *
                        C50764 * C111) *
                       C1875) *
                      C50682)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C122 + C50748 * C129) * C696 +
                      (C117 * C130 + C50748 * C143) * C50606) *
                         C5192 +
                     (C5950 + C5951) * C5193 + C6352 * C5194) *
                        C2303 +
                    ((C171 * C696 + C172 * C50606) * C5192 +
                     (C5954 + C5955) * C5193 + C6353 * C5194) *
                        C50633) *
                       C50940 -
                   ((C6482 * C5194 + (C5957 + C5956) * C5193 +
                     (C5955 + C5954) * C5192) *
                        C50633 +
                    (C6483 * C5194 + (C5953 + C5952) * C5193 +
                     (C5951 + C5950) * C5192) *
                        C2303) *
                       C50929 +
                   ((C6352 * C5192 + (C6357 + C6356) * C5193 +
                     (C6492 + C6493) * C5194) *
                        C2303 +
                    (C6353 * C5192 + (C6355 + C6354) * C5193 +
                     (C6488 + C6489) * C5194) *
                        C50633) *
                       C1875) *
                      C1283 +
                  ((((C5990 + C5991) * C5192 + (C5992 + C5993) * C5193 +
                     (C6372 + C6373) * C5194) *
                        C2303 +
                    ((C5966 + C5967) * C5192 + (C5968 + C5969) * C5193 +
                     (C6374 + C6375) * C5194) *
                        C50633) *
                       C50929 -
                   ((C6366 * C5194 + (C5967 + C5966) * C5193 +
                     (C328 * C50606 + C327 * C696) * C5192) *
                        C50633 +
                    (C6367 * C5194 + (C5991 + C5990) * C5193 +
                     ((C117 * C293 + C50748 * C304) * C50606 +
                      (C117 * C287 + C50748 * C294) * C696) *
                         C5192) *
                        C2303) *
                       C50940 -
                   ((((C117 * C6345 + C50748 * C6349) * C50606 +
                      (C117 * C6343 + C50748 * C6346) * C696) *
                         C5194 +
                     (C6375 + C6374) * C5193 + C6366 * C5192) *
                        C50633 +
                    (((C117 * C6347 + C50748 * C6350) * C50606 +
                      (C117 * C6344 + C50748 * C6348) * C696) *
                         C5194 +
                     (C6373 + C6372) * C5193 + C6367 * C5192) *
                        C2303) *
                       C1875) *
                      C50682)) /
                    (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C50748 * C129) * C118 +
               (C117 * C130 + C50748 * C143) * C106 - C171 * C119 -
               C172 * C107 + C173 * C120 + C174 * C108 - C175 * C121 -
               C176 * C109) *
                  C50764 * C111 +
              (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
               C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
                  C50764 * C112 +
              (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
               C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
                  C50764 * C113 +
              (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 +
               C179 * C120 + C180 * C108 -
               (C117 * C128 + C50748 * C141) * C121 -
               (C117 * C142 + C50748 * C149) * C109) *
                  C50764 * C114) *
             C50694 * C50668 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50748 * C129) * C49720 +
                (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
                C172 * C50611) *
                   C50764 * C111 +
               (C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                   C50764 * C112 +
               (C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                   C50764 * C113 +
               (C175 * C49720 + C176 * C50878 - C177 * C49713 - C178 * C50611) *
                   C50764 * C114) *
                  C50694 * C582 +
              ((C327 * C49713 -
                ((C117 * C293 + C50748 * C304) * C50878 +
                 (C117 * C287 + C50748 * C294) * C49720) +
                C328 * C50611) *
                   C50764 * C111 +
               (C329 * C49713 - (C328 * C50878 + C327 * C49720) +
                C330 * C50611) *
                   C50764 * C112 +
               (C331 * C49713 - (C330 * C50878 + C329 * C49720) +
                C332 * C50611) *
                   C50764 * C113 +
               (C333 * C49713 - (C332 * C50878 + C331 * C49720) +
                C334 * C50611) *
                   C50764 * C114) *
                  C50694 * C583 +
              (((C117 * C587 + C50748 * C592) * C49720 +
                (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
                C621 * C50611) *
                   C50764 * C111 +
               (C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
                   C50764 * C112 +
               (C622 * C49720 + C623 * C50878 - C624 * C49713 - C625 * C50611) *
                   C50764 * C113 +
               (C624 * C49720 + C625 * C50878 -
                (C117 * C591 + C50748 * C600) * C49713 -
                (C117 * C601 + C50748 * C606) * C50611) *
                   C50764 * C114) *
                  C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C49720 +
            (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
            C172 * C50611) *
               C50764 * C111 +
           (C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
               C50764 * C112 +
           (C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
               C50764 * C113 +
           (C175 * C49720 + C176 * C50878 - C177 * C49713 - C178 * C50611) *
               C50764 * C114) *
              C941 +
          ((C475 * C49713 -
            ((C117 * C441 + C50748 * C452) * C50878 +
             (C117 * C435 + C50748 * C442) * C49720) +
            C476 * C50611) *
               C50764 * C111 +
           (C477 * C49713 - (C476 * C50878 + C475 * C49720) + C478 * C50611) *
               C50764 * C112 +
           (C479 * C49713 - (C478 * C50878 + C477 * C49720) + C480 * C50611) *
               C50764 * C113 +
           (C481 * C49713 - (C480 * C50878 + C479 * C49720) + C482 * C50611) *
               C50764 * C114) *
              C942 +
          (((C117 * C944 + C50748 * C949) * C49720 +
            (C117 * C950 + C50748 * C959) * C50878 - C977 * C49713 -
            C978 * C50611) *
               C50764 * C111 +
           (C977 * C49720 + C978 * C50878 - C979 * C49713 - C980 * C50611) *
               C50764 * C112 +
           (C979 * C49720 + C980 * C50878 - C981 * C49713 - C982 * C50611) *
               C50764 * C113 +
           (C981 * C49720 + C982 * C50878 -
            (C117 * C948 + C50748 * C957) * C49713 -
            (C117 * C958 + C50748 * C963) * C50611) *
               C50764 * C114) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
            C2307 * C587 + C2302 * C592) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
            C2307 * C593 + C2302 * C602) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C50764 * C2303 +
          ((C2347 + C2346 + C2345) * C118 + (C2350 + C2349 + C2348) * C106 -
           (C2353 + C2352 + C2351) * C119 - (C2356 + C2355 + C2354) * C107 +
           (C2359 + C2358 + C2357) * C120 + (C2362 + C2361 + C2360) * C108 -
           (C2307 * C591 + C2302 * C600 + C2306 * C290 + C2301 * C300 +
            C2305 * C126 + C2300 * C137) *
               C121 -
           (C2307 * C601 + C2302 * C606 + C2306 * C301 + C2301 * C308 +
            C2305 * C138 + C2300 * C147) *
               C109) *
              C50764 * C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50878 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50611) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C49720 +
            (C2350 + C2349 + C2348) * C50878 -
            (C2353 + C2352 + C2351) * C49713 -
            (C2356 + C2355 + C2354) * C50611) *
               C50764 * C50633) *
              C50694 * C582 +
          (((C2533 + C2534 + C2535) * C49713 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50878 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C49720) +
            (C2536 + C2537 + C2538) * C50611) *
               C50764 * C2303 +
           ((C2541 + C2540 + C2539) * C49713 -
            ((C2538 + C2537 + C2536) * C50878 +
             (C2535 + C2534 + C2533) * C49720) +
            (C2544 + C2543 + C2542) * C50611) *
               C50764 * C50633) *
              C50694 * C583 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C49720 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50878 -
            (C2897 + C2898 + C2899) * C49713 -
            (C2900 + C2901 + C2902) * C50611) *
               C50764 * C2303 +
           ((C2899 + C2898 + C2897) * C49720 +
            (C2902 + C2901 + C2900) * C50878 -
            (C2307 * C2874 + C2302 * C2879 + C2306 * C698 + C2301 * C704 +
             C2305 * C589 + C2300 * C596) *
                C49713 -
            (C2307 * C2880 + C2302 * C2883 + C2306 * C703 + C2301 * C710 +
             C2305 * C597 + C2300 * C604) *
                C50611) *
               C50764 * C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50878 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50611) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C49720 +
            (C2350 + C2349 + C2348) * C50878 -
            (C2353 + C2352 + C2351) * C49713 -
            (C2356 + C2355 + C2354) * C50611) *
               C50764 * C50633) *
              C941 +
          (((C2715 + C2716 + C2717) * C49713 -
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C50878 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C49720) +
            (C2718 + C2719 + C2720) * C50611) *
               C50764 * C2303 +
           ((C2723 + C2722 + C2721) * C49713 -
            ((C2720 + C2719 + C2718) * C50878 +
             (C2717 + C2716 + C2715) * C49720) +
            (C2726 + C2725 + C2724) * C50611) *
               C50764 * C50633) *
              C942 +
          (((C2305 * C944 + C2300 * C949 + C2306 * C1083 + C2301 * C1091 +
             C2307 * C3316 + C2302 * C3319) *
                C49720 +
            (C2305 * C950 + C2300 * C959 + C2306 * C1090 + C2301 * C1095 +
             C2307 * C3320 + C2302 * C3325) *
                C50878 -
            (C3341 + C3342 + C3343) * C49713 -
            (C3344 + C3345 + C3346) * C50611) *
               C50764 * C2303 +
           ((C3343 + C3342 + C3341) * C49720 +
            (C3346 + C3345 + C3344) * C50878 -
            (C2307 * C3318 + C2302 * C3323 + C2306 * C1081 + C2301 * C1087 +
             C2305 * C946 + C2300 * C953) *
                C49713 -
            (C2307 * C3324 + C2302 * C3327 + C2306 * C1086 + C2301 * C1093 +
             C2305 * C954 + C2300 * C961) *
                C50611) *
               C50764 * C50633) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C118 +
            (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C5192 +
           ((C117 * C435 + C50748 * C442) * C118 +
            (C117 * C441 + C50748 * C452) * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C5193 +
           ((C117 * C944 + C50748 * C949) * C118 +
            (C117 * C950 + C50748 * C959) * C106 - C977 * C119 - C978 * C107 +
            C979 * C120 + C980 * C108 - C981 * C121 - C982 * C109) *
               C5194) *
              C2303 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C5192 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C5193 +
           (C977 * C118 + C978 * C106 - C979 * C119 - C980 * C107 +
            C981 * C120 + C982 * C108 - (C117 * C948 + C50748 * C957) * C121 -
            (C117 * C958 + C50748 * C963) * C109) *
               C5194) *
              C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C5192 +
            (C5536 * C49720 + C5537 * C50878 - C475 * C49713 - C476 * C50611) *
                C5193 +
            (C5538 * C49720 + C5539 * C50878 - C977 * C49713 - C978 * C50611) *
                C5194) *
               C2303 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C5192 +
            (C475 * C49720 + C476 * C50878 - C477 * C49713 - C478 * C50611) *
                C5193 +
            (C977 * C49720 + C978 * C50878 - C979 * C49713 - C980 * C50611) *
                C5194) *
               C50633) *
              C50694 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50748 * C304) * C50878 +
              (C117 * C287 + C50748 * C294) * C49720) +
             C328 * C50611) *
                C5192 +
            (C1540 * C49713 -
             ((C117 * C820 + C50748 * C835) * C50878 +
              (C117 * C811 + C50748 * C819) * C49720) +
             C1541 * C50611) *
                C5193 +
            (C5350 * C49713 -
             ((C117 * C1090 + C50748 * C1095) * C50878 +
              (C117 * C1083 + C50748 * C1091) * C49720) +
             C5351 * C50611) *
                C5194) *
               C2303 +
           ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                C5192 +
            (C1542 * C49713 - (C1541 * C50878 + C1540 * C49720) +
             C1543 * C50611) *
                C5193 +
            (C5352 * C49713 - (C5351 * C50878 + C5350 * C49720) +
             C5353 * C50611) *
                C5194) *
               C50633) *
              C50694 * C583 +
          ((((C117 * C587 + C50748 * C592) * C49720 +
             (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
             C621 * C50611) *
                C5192 +
            ((C117 * C818 + C50748 * C834) * C49720 +
             (C117 * C833 + C50748 * C842) * C50878 - C5702 * C49713 -
             C5703 * C50611) *
                C5193 +
            ((C117 * C3316 + C50748 * C3319) * C49720 +
             (C117 * C3320 + C50748 * C3325) * C50878 - C5704 * C49713 -
             C5705 * C50611) *
                C5194) *
               C2303 +
           ((C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
                C5192 +
            (C5702 * C49720 + C5703 * C50878 -
             (C117 * C816 + C50748 * C830) * C49713 -
             (C117 * C829 + C50748 * C840) * C50611) *
                C5193 +
            (C5704 * C49720 + C5705 * C50878 -
             (C117 * C3318 + C50748 * C3323) * C49713 -
             (C117 * C3324 + C50748 * C3327) * C50611) *
                C5194) *
               C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C5192 +
            (C6156 + C6157 - C6158 - C6159) * C5193 + C6196 * C5194) *
               C2303 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C5192 +
            (C6164 + C6165 - C6166 - C6167) * C5193 + C6197 * C5194) *
               C50633) *
              C941 +
          (((C6158 - (C6157 + C6156) + C6159) * C5192 +
            (C6162 - (C6161 + C6160) + C6163) * C5193 +
            (C6172 - (C6194 + C6195) + C6177) * C5194) *
               C2303 +
           ((C6166 - (C6165 + C6164) + C6167) * C5192 +
            (C6170 - (C6169 + C6168) + C6171) * C5193 +
            (C6178 - (C6179 + C6180) + C6181) * C5194) *
               C50633) *
              C942 +
          ((C6196 * C5192 + (C6195 + C6194 - C6172 - C6177) * C5193 +
            ((C117 * C6143 + C50748 * C6146) * C49720 +
             (C117 * C6147 + C50748 * C6152) * C50878 - C6190 * C49713 -
             C6191 * C50611) *
                C5194) *
               C2303 +
           (C6197 * C5192 + (C6180 + C6179 - C6178 - C6181) * C5193 +
            (C6190 * C49720 + C6191 * C50878 -
             (C117 * C6145 + C50748 * C6150) * C49713 -
             (C117 * C6151 + C50748 * C6154) * C50611) *
                C5194) *
               C50633) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50748 * C129) * C283 +
                (C117 * C130 + C50748 * C143) * C278 - C171 * C284 -
                C172 * C279 + C173 * C285 + C174 * C280) *
                   C50764 * C111 +
               (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                C175 * C285 + C176 * C280) *
                   C50764 * C112 +
               (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                C177 * C285 + C178 * C280) *
                   C50764 * C113 +
               (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
                C179 * C285 + C180 * C280) *
                   C50764 * C114) *
                  C50694 * C50893 +
              ((C327 * C284 -
                ((C117 * C293 + C50748 * C304) * C278 +
                 (C117 * C287 + C50748 * C294) * C283) +
                C328 * C279 - C329 * C285 - C330 * C280) *
                   C50764 * C111 +
               (C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
                C331 * C285 - C332 * C280) *
                   C50764 * C112 +
               (C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
                C333 * C285 - C334 * C280) *
                   C50764 * C113 +
               (C333 * C284 - (C332 * C278 + C331 * C283) + C334 * C279 -
                (C117 * C291 + C50748 * C302) * C285 -
                (C117 * C303 + C50748 * C309) * C280) *
                   C50764 * C114) *
                  C50694 * C50682) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50748 * C129) * C696 +
                (C117 * C130 + C50748 * C143) * C50606) *
                   C50764 * C111 +
               (C171 * C696 + C172 * C50606) * C50764 * C112 +
               (C173 * C696 + C174 * C50606) * C50764 * C113 +
               (C175 * C696 + C176 * C50606) * C50764 * C114) *
                  C50694 * C692 -
              ((C332 * C50606 + C331 * C696) * C50764 * C114 +
               (C330 * C50606 + C329 * C696) * C50764 * C113 +
               (C328 * C50606 + C327 * C696) * C50764 * C112 +
               ((C117 * C293 + C50748 * C304) * C50606 +
                (C117 * C287 + C50748 * C294) * C696) *
                   C50764 * C111) *
                  C50694 * C693 +
              (((C117 * C587 + C50748 * C592) * C696 +
                (C117 * C593 + C50748 * C602) * C50606) *
                   C50764 * C111 +
               (C620 * C696 + C621 * C50606) * C50764 * C112 +
               (C622 * C696 + C623 * C50606) * C50764 * C113 +
               (C624 * C696 + C625 * C50606) * C50764 * C114) *
                  C50694 * C694 -
              (((C117 * C701 + C50748 * C709) * C50606 +
                (C117 * C697 + C50748 * C702) * C696) *
                   C50764 * C114 +
               ((C117 * C703 + C50748 * C710) * C50606 +
                (C117 * C698 + C50748 * C704) * C696) *
                   C50764 * C113 +
               ((C117 * C705 + C50748 * C711) * C50606 +
                (C117 * C699 + C50748 * C706) * C696) *
                   C50764 * C112 +
               ((C117 * C707 + C50748 * C712) * C50606 +
                (C117 * C700 + C50748 * C708) * C696) *
                   C50764 * C111) *
                  C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C117 * C122 + C50748 * C129) * C696 +
                                 (C117 * C130 + C50748 * C143) * C50606) *
                                    C50764 * C111 +
                                (C171 * C696 + C172 * C50606) * C50764 * C112 +
                                (C173 * C696 + C174 * C50606) * C50764 * C113 +
                                (C175 * C696 + C176 * C50606) * C50764 * C114) *
                                   C941 -
                               ((C480 * C50606 + C479 * C696) * C50764 * C114 +
                                (C478 * C50606 + C477 * C696) * C50764 * C113 +
                                (C476 * C50606 + C475 * C696) * C50764 * C112 +
                                ((C117 * C441 + C50748 * C452) * C50606 +
                                 (C117 * C435 + C50748 * C442) * C696) *
                                    C50764 * C111) *
                                   C942 +
                               (((C117 * C944 + C50748 * C949) * C696 +
                                 (C117 * C950 + C50748 * C959) * C50606) *
                                    C50764 * C111 +
                                (C977 * C696 + C978 * C50606) * C50764 * C112 +
                                (C979 * C696 + C980 * C50606) * C50764 * C113 +
                                (C981 * C696 + C982 * C50606) * C50764 * C114) *
                                   C943) *
                                  C50893 +
                              ((((C117 * C811 + C50748 * C819) * C696 +
                                 (C117 * C820 + C50748 * C835) * C50606) *
                                    C50764 * C111 +
                                ((C117 * C812 + C50748 * C821) * C696 +
                                 (C117 * C822 + C50748 * C836) * C50606) *
                                    C50764 * C112 +
                                ((C117 * C813 + C50748 * C823) * C696 +
                                 (C117 * C824 + C50748 * C837) * C50606) *
                                    C50764 * C113 +
                                ((C117 * C814 + C50748 * C825) * C696 +
                                 (C117 * C826 + C50748 * C838) * C50606) *
                                    C50764 * C114) *
                                   C942 -
                               ((C332 * C50606 + C331 * C696) * C50764 * C114 +
                                (C330 * C50606 + C329 * C696) * C50764 * C113 +
                                (C328 * C50606 + C327 * C696) * C50764 * C112 +
                                ((C117 * C293 + C50748 * C304) * C50606 +
                                 (C117 * C287 + C50748 * C294) * C696) *
                                    C50764 * C111) *
                                   C941 -
                               (((C117 * C1084 + C50748 * C1092) * C50606 +
                                 (C117 * C1080 + C50748 * C1085) * C696) *
                                    C50764 * C114 +
                                ((C117 * C1086 + C50748 * C1093) * C50606 +
                                 (C117 * C1081 + C50748 * C1087) * C696) *
                                    C50764 * C113 +
                                ((C117 * C1088 + C50748 * C1094) * C50606 +
                                 (C117 * C1082 + C50748 * C1089) * C696) *
                                    C50764 * C112 +
                                ((C117 * C1090 + C50748 * C1095) * C50606 +
                                 (C117 * C1083 + C50748 * C1091) * C696) *
                                    C50764 * C111) *
                                   C943) *
                                  C50682)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C279 +
            (C2359 + C2358 + C2357) * C285 + (C2362 + C2361 + C2360) * C280) *
               C50764 * C50633) *
              C50694 * C50893 +
          (((C2533 + C2534 + C2535) * C284 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C278 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C283) +
            (C2536 + C2537 + C2538) * C279 - (C2539 + C2540 + C2541) * C285 -
            (C2542 + C2543 + C2544) * C280) *
               C50764 * C2303 +
           ((C2541 + C2540 + C2539) * C284 -
            ((C2538 + C2537 + C2536) * C278 + (C2535 + C2534 + C2533) * C283) +
            (C2544 + C2543 + C2542) * C279 -
            (C2307 * C697 + C2302 * C702 + C2306 * C590 + C2301 * C598 +
             C2305 * C289 + C2300 * C298) *
                C285 -
            (C2307 * C701 + C2302 * C709 + C2306 * C599 + C2301 * C605 +
             C2305 * C299 + C2300 * C307) *
                C280) *
               C50764 * C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C696 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50606) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C696 + (C2350 + C2349 + C2348) * C50606) *
               C50764 * C50633) *
              C50694 * C692 -
          (((C2538 + C2537 + C2536) * C50606 + (C2535 + C2534 + C2533) * C696) *
               C50764 * C50633 +
           ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
             C2305 * C293 + C2300 * C304) *
                C50606 +
            (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
             C2305 * C287 + C2300 * C294) *
                C696) *
               C50764 * C2303) *
              C50694 * C693 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C696 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50606) *
               C50764 * C2303 +
           ((C2899 + C2898 + C2897) * C696 + (C2902 + C2901 + C2900) * C50606) *
               C50764 * C50633) *
              C50694 * C694 -
          (((C2307 * C3002 + C2302 * C3006 + C2306 * C2878 + C2301 * C2882 +
             C2305 * C705 + C2300 * C711) *
                C50606 +
            (C2307 * C3000 + C2302 * C3003 + C2306 * C2873 + C2301 * C2877 +
             C2305 * C699 + C2300 * C706) *
                C696) *
               C50764 * C50633 +
           ((C2307 * C3004 + C2302 * C3007 + C2306 * C2876 + C2301 * C2881 +
             C2305 * C707 + C2300 * C712) *
                C50606 +
            (C2307 * C3001 + C2302 * C3005 + C2306 * C2872 + C2301 * C2875 +
             C2305 * C700 + C2300 * C708) *
                C696) *
               C50764 * C2303) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C50764 * C2303 +
            ((C2347 + C2346 + C2345) * C696 +
             (C2350 + C2349 + C2348) * C50606) *
                C50764 * C50633) *
               C941 -
           (((C2720 + C2719 + C2718) * C50606 +
             (C2717 + C2716 + C2715) * C696) *
                C50764 * C50633 +
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C50606 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C696) *
                C50764 * C2303) *
               C942 +
           (((C2305 * C944 + C2300 * C949 + C2306 * C1083 + C2301 * C1091 +
              C2307 * C3316 + C2302 * C3319) *
                 C696 +
             (C2305 * C950 + C2300 * C959 + C2306 * C1090 + C2301 * C1095 +
              C2307 * C3320 + C2302 * C3325) *
                 C50606) *
                C50764 * C2303 +
            ((C3343 + C3342 + C3341) * C696 +
             (C3346 + C3345 + C3344) * C50606) *
                C50764 * C50633) *
               C943) *
              C50893 +
          ((((C2305 * C811 + C2300 * C819 + C2306 * C818 + C2301 * C834 +
              C2307 * C3154 + C2302 * C3158) *
                 C696 +
             (C2305 * C820 + C2300 * C835 + C2306 * C833 + C2301 * C842 +
              C2307 * C3159 + C2302 * C3166) *
                 C50606) *
                C50764 * C2303 +
            ((C2305 * C812 + C2300 * C821 + C2306 * C817 + C2301 * C832 +
              C2307 * C3155 + C2302 * C3160) *
                 C696 +
             (C2305 * C822 + C2300 * C836 + C2306 * C831 + C2301 * C841 +
              C2307 * C3161 + C2302 * C3167) *
                 C50606) *
                C50764 * C50633) *
               C942 -
           (((C2538 + C2537 + C2536) * C50606 +
             (C2535 + C2534 + C2533) * C696) *
                C50764 * C50633 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C50764 * C2303) *
               C941 -
           (((C2307 * C3494 + C2302 * C3498 + C2306 * C3322 + C2301 * C3326 +
              C2305 * C1088 + C2300 * C1094) *
                 C50606 +
             (C2307 * C3492 + C2302 * C3495 + C2306 * C3317 + C2301 * C3321 +
              C2305 * C1082 + C2300 * C1089) *
                 C696) *
                C50764 * C50633 +
            ((C2307 * C3496 + C2302 * C3499 + C2306 * C3320 + C2301 * C3325 +
              C2305 * C1090 + C2300 * C1095) *
                 C50606 +
             (C2307 * C3493 + C2302 * C3497 + C2306 * C3316 + C2301 * C3319 +
              C2305 * C1083 + C2300 * C1091) *
                 C696) *
                C50764 * C2303) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C5192 +
            ((C117 * C435 + C50748 * C442) * C283 +
             (C117 * C441 + C50748 * C452) * C278 - C475 * C284 - C476 * C279 +
             C477 * C285 + C478 * C280) *
                C5193 +
            ((C117 * C944 + C50748 * C949) * C283 +
             (C117 * C950 + C50748 * C959) * C278 - C977 * C284 - C978 * C279 +
             C979 * C285 + C980 * C280) *
                C5194) *
               C2303 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C5192 +
            (C475 * C283 + C476 * C278 - C477 * C284 - C478 * C279 +
             C479 * C285 + C480 * C280) *
                C5193 +
            (C977 * C283 + C978 * C278 - C979 * C284 - C980 * C279 +
             C981 * C285 + C982 * C280) *
                C5194) *
               C50633) *
              C50694 * C50893 +
          (((C327 * C284 -
             ((C117 * C293 + C50748 * C304) * C278 +
              (C117 * C287 + C50748 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C5192 +
            (C1540 * C284 -
             ((C117 * C820 + C50748 * C835) * C278 +
              (C117 * C811 + C50748 * C819) * C283) +
             C1541 * C279 - C1542 * C285 - C1543 * C280) *
                C5193 +
            (C5350 * C284 -
             ((C117 * C1090 + C50748 * C1095) * C278 +
              (C117 * C1083 + C50748 * C1091) * C283) +
             C5351 * C279 - C5352 * C285 - C5353 * C280) *
                C5194) *
               C2303 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C5192 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C5193 +
            (C5352 * C284 - (C5351 * C278 + C5350 * C283) + C5353 * C279 -
             (C117 * C1080 + C50748 * C1085) * C285 -
             (C117 * C1084 + C50748 * C1092) * C280) *
                C5194) *
               C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C117 * C122 + C50748 * C129) * C696 +
                                 (C117 * C130 + C50748 * C143) * C50606) *
                                    C5192 +
                                (C5536 * C696 + C5537 * C50606) * C5193 +
                                (C5538 * C696 + C5539 * C50606) * C5194) *
                                   C2303 +
                               ((C171 * C696 + C172 * C50606) * C5192 +
                                (C475 * C696 + C476 * C50606) * C5193 +
                                (C977 * C696 + C978 * C50606) * C5194) *
                                   C50633) *
                                  C50694 * C692 -
                              (((C5351 * C50606 + C5350 * C696) * C5194 +
                                (C1541 * C50606 + C1540 * C696) * C5193 +
                                (C328 * C50606 + C327 * C696) * C5192) *
                                   C50633 +
                               (((C117 * C1090 + C50748 * C1095) * C50606 +
                                 (C117 * C1083 + C50748 * C1091) * C696) *
                                    C5194 +
                                ((C117 * C820 + C50748 * C835) * C50606 +
                                 (C117 * C811 + C50748 * C819) * C696) *
                                    C5193 +
                                ((C117 * C293 + C50748 * C304) * C50606 +
                                 (C117 * C287 + C50748 * C294) * C696) *
                                    C5192) *
                                   C2303) *
                                  C50694 * C693 +
                              ((((C117 * C587 + C50748 * C592) * C696 +
                                 (C117 * C593 + C50748 * C602) * C50606) *
                                    C5192 +
                                ((C117 * C818 + C50748 * C834) * C696 +
                                 (C117 * C833 + C50748 * C842) * C50606) *
                                    C5193 +
                                ((C117 * C3316 + C50748 * C3319) * C696 +
                                 (C117 * C3320 + C50748 * C3325) * C50606) *
                                    C5194) *
                                   C2303 +
                               ((C620 * C696 + C621 * C50606) * C5192 +
                                (C5702 * C696 + C5703 * C50606) * C5193 +
                                (C5704 * C696 + C5705 * C50606) * C5194) *
                                   C50633) *
                                  C50694 * C694 -
                              ((((C117 * C3494 + C50748 * C3498) * C50606 +
                                 (C117 * C3492 + C50748 * C3495) * C696) *
                                    C5194 +
                                ((C117 * C3161 + C50748 * C3167) * C50606 +
                                 (C117 * C3155 + C50748 * C3160) * C696) *
                                    C5193 +
                                ((C117 * C705 + C50748 * C711) * C50606 +
                                 (C117 * C699 + C50748 * C706) * C696) *
                                    C5192) *
                                   C50633 +
                               (((C117 * C3496 + C50748 * C3499) * C50606 +
                                 (C117 * C3493 + C50748 * C3497) * C696) *
                                    C5194 +
                                ((C117 * C3159 + C50748 * C3166) * C50606 +
                                 (C117 * C3154 + C50748 * C3158) * C696) *
                                    C5193 +
                                ((C117 * C707 + C50748 * C712) * C50606 +
                                 (C117 * C700 + C50748 * C708) * C696) *
                                    C5192) *
                                   C2303) *
                                  C50694 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C5192 +
             (C5950 + C5951) * C5193 + C6352 * C5194) *
                C2303 +
            ((C171 * C696 + C172 * C50606) * C5192 + (C5954 + C5955) * C5193 +
             C6353 * C5194) *
                C50633) *
               C941 -
           (((C6354 + C6355) * C5194 + (C5957 + C5956) * C5193 +
             (C5955 + C5954) * C5192) *
                C50633 +
            ((C6356 + C6357) * C5194 + (C5953 + C5952) * C5193 +
             (C5951 + C5950) * C5192) *
                C2303) *
               C942 +
           ((C6352 * C5192 + (C6357 + C6356) * C5193 +
             ((C117 * C6143 + C50748 * C6146) * C696 +
              (C117 * C6147 + C50748 * C6152) * C50606) *
                 C5194) *
                C2303 +
            (C6353 * C5192 + (C6355 + C6354) * C5193 +
             (C6190 * C696 + C6191 * C50606) * C5194) *
                C50633) *
               C943) *
              C50893 +
          ((((C5990 + C5991) * C5192 + (C5992 + C5993) * C5193 +
             (C6372 + C6373) * C5194) *
                C2303 +
            ((C5966 + C5967) * C5192 + (C5968 + C5969) * C5193 +
             (C6374 + C6375) * C5194) *
                C50633) *
               C942 -
           ((C6366 * C5194 + (C5967 + C5966) * C5193 +
             (C328 * C50606 + C327 * C696) * C5192) *
                C50633 +
            (C6367 * C5194 + (C5991 + C5990) * C5193 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C5192) *
                C2303) *
               C941 -
           ((((C117 * C6345 + C50748 * C6349) * C50606 +
              (C117 * C6343 + C50748 * C6346) * C696) *
                 C5194 +
             (C6375 + C6374) * C5193 + C6366 * C5192) *
                C50633 +
            (((C117 * C6347 + C50748 * C6350) * C50606 +
              (C117 * C6344 + C50748 * C6348) * C696) *
                 C5194 +
             (C6373 + C6372) * C5193 + C6367 * C5192) *
                C2303) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50748 * C129) * C283 +
                (C117 * C130 + C50748 * C143) * C278 - C171 * C284 -
                C172 * C279 + C173 * C285 + C174 * C280) *
                   C50764 * C111 +
               (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                C175 * C285 + C176 * C280) *
                   C50764 * C112 +
               (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                C177 * C285 + C178 * C280) *
                   C50764 * C113 +
               (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
                C179 * C285 + C180 * C280) *
                   C50764 * C114) *
                  C50894 +
              ((C475 * C284 -
                ((C117 * C441 + C50748 * C452) * C278 +
                 (C117 * C435 + C50748 * C442) * C283) +
                C476 * C279 - C477 * C285 - C478 * C280) *
                   C50764 * C111 +
               (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
                C479 * C285 - C480 * C280) *
                   C50764 * C112 +
               (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
                C481 * C285 - C482 * C280) *
                   C50764 * C113 +
               (C481 * C284 - (C480 * C278 + C479 * C283) + C482 * C279 -
                (C117 * C439 + C50748 * C450) * C285 -
                (C117 * C451 + C50748 * C457) * C280) *
                   C50764 * C114) *
                  C50706) *
             C50668 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50748 * C129) * C696 +
                 (C117 * C130 + C50748 * C143) * C50606) *
                    C50764 * C111 +
                (C171 * C696 + C172 * C50606) * C50764 * C112 +
                (C173 * C696 + C174 * C50606) * C50764 * C113 +
                (C175 * C696 + C176 * C50606) * C50764 * C114) *
                   C50894 -
               ((C480 * C50606 + C479 * C696) * C50764 * C114 +
                (C478 * C50606 + C477 * C696) * C50764 * C113 +
                (C476 * C50606 + C475 * C696) * C50764 * C112 +
                ((C117 * C441 + C50748 * C452) * C50606 +
                 (C117 * C435 + C50748 * C442) * C696) *
                    C50764 * C111) *
                   C50706) *
                  C582 +
              ((((C117 * C811 + C50748 * C819) * C696 +
                 (C117 * C820 + C50748 * C835) * C50606) *
                    C50764 * C111 +
                ((C117 * C812 + C50748 * C821) * C696 +
                 (C117 * C822 + C50748 * C836) * C50606) *
                    C50764 * C112 +
                ((C117 * C813 + C50748 * C823) * C696 +
                 (C117 * C824 + C50748 * C837) * C50606) *
                    C50764 * C113 +
                ((C117 * C814 + C50748 * C825) * C696 +
                 (C117 * C826 + C50748 * C838) * C50606) *
                    C50764 * C114) *
                   C50706 -
               ((C332 * C50606 + C331 * C696) * C50764 * C114 +
                (C330 * C50606 + C329 * C696) * C50764 * C113 +
                (C328 * C50606 + C327 * C696) * C50764 * C112 +
                ((C117 * C293 + C50748 * C304) * C50606 +
                 (C117 * C287 + C50748 * C294) * C696) *
                    C50764 * C111) *
                   C50894) *
                  C583 +
              ((((C117 * C587 + C50748 * C592) * C696 +
                 (C117 * C593 + C50748 * C602) * C50606) *
                    C50764 * C111 +
                (C620 * C696 + C621 * C50606) * C50764 * C112 +
                (C622 * C696 + C623 * C50606) * C50764 * C113 +
                (C624 * C696 + C625 * C50606) * C50764 * C114) *
                   C50894 -
               (((C117 * C827 + C50748 * C839) * C50606 +
                 (C117 * C815 + C50748 * C828) * C696) *
                    C50764 * C114 +
                ((C117 * C829 + C50748 * C840) * C50606 +
                 (C117 * C816 + C50748 * C830) * C696) *
                    C50764 * C113 +
                ((C117 * C831 + C50748 * C841) * C50606 +
                 (C117 * C817 + C50748 * C832) * C696) *
                    C50764 * C112 +
                ((C117 * C833 + C50748 * C842) * C50606 +
                 (C117 * C818 + C50748 * C834) * C696) *
                    C50764 * C111) *
                   C50706) *
                  C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C696 +
            (C117 * C130 + C50748 * C143) * C50606) *
               C50764 * C111 +
           (C171 * C696 + C172 * C50606) * C50764 * C112 +
           (C173 * C696 + C174 * C50606) * C50764 * C113 +
           (C175 * C696 + C176 * C50606) * C50764 * C114) *
              C1162 -
          ((C480 * C50606 + C479 * C696) * C50764 * C114 +
           (C478 * C50606 + C477 * C696) * C50764 * C113 +
           (C476 * C50606 + C475 * C696) * C50764 * C112 +
           ((C117 * C441 + C50748 * C452) * C50606 +
            (C117 * C435 + C50748 * C442) * C696) *
               C50764 * C111) *
              C1163 +
          (((C117 * C944 + C50748 * C949) * C696 +
            (C117 * C950 + C50748 * C959) * C50606) *
               C50764 * C111 +
           (C977 * C696 + C978 * C50606) * C50764 * C112 +
           (C979 * C696 + C980 * C50606) * C50764 * C113 +
           (C981 * C696 + C982 * C50606) * C50764 * C114) *
              C1164 -
          (((C117 * C1170 + C50748 * C1178) * C50606 +
            (C117 * C1166 + C50748 * C1171) * C696) *
               C50764 * C114 +
           ((C117 * C1172 + C50748 * C1179) * C50606 +
            (C117 * C1167 + C50748 * C1173) * C696) *
               C50764 * C113 +
           ((C117 * C1174 + C50748 * C1180) * C50606 +
            (C117 * C1168 + C50748 * C1175) * C696) *
               C50764 * C112 +
           ((C117 * C1176 + C50748 * C1181) * C50606 +
            (C117 * C1169 + C50748 * C1177) * C696) *
               C50764 * C111) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C279 +
            (C2359 + C2358 + C2357) * C285 + (C2362 + C2361 + C2360) * C280) *
               C50764 * C50633) *
              C50894 +
          (((C2715 + C2716 + C2717) * C284 -
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C278 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C283) +
            (C2718 + C2719 + C2720) * C279 - (C2721 + C2722 + C2723) * C285 -
            (C2724 + C2725 + C2726) * C280) *
               C50764 * C2303 +
           ((C2723 + C2722 + C2721) * C284 -
            ((C2720 + C2719 + C2718) * C278 + (C2717 + C2716 + C2715) * C283) +
            (C2726 + C2725 + C2724) * C279 -
            (C2307 * C815 + C2302 * C828 + C2306 * C814 + C2301 * C825 +
             C2305 * C437 + C2300 * C446) *
                C285 -
            (C2307 * C827 + C2302 * C839 + C2306 * C826 + C2301 * C838 +
             C2305 * C447 + C2300 * C455) *
                C280) *
               C50764 * C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C50764 * C2303 +
            ((C2347 + C2346 + C2345) * C696 +
             (C2350 + C2349 + C2348) * C50606) *
                C50764 * C50633) *
               C50894 -
           (((C2720 + C2719 + C2718) * C50606 +
             (C2717 + C2716 + C2715) * C696) *
                C50764 * C50633 +
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C50606 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C696) *
                C50764 * C2303) *
               C50706) *
              C582 +
          ((((C2305 * C811 + C2300 * C819 + C2306 * C818 + C2301 * C834 +
              C2307 * C3154 + C2302 * C3158) *
                 C696 +
             (C2305 * C820 + C2300 * C835 + C2306 * C833 + C2301 * C842 +
              C2307 * C3159 + C2302 * C3166) *
                 C50606) *
                C50764 * C2303 +
            ((C2305 * C812 + C2300 * C821 + C2306 * C817 + C2301 * C832 +
              C2307 * C3155 + C2302 * C3160) *
                 C696 +
             (C2305 * C822 + C2300 * C836 + C2306 * C831 + C2301 * C841 +
              C2307 * C3161 + C2302 * C3167) *
                 C50606) *
                C50764 * C50633) *
               C50706 -
           (((C2538 + C2537 + C2536) * C50606 +
             (C2535 + C2534 + C2533) * C696) *
                C50764 * C50633 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C50764 * C2303) *
               C50894) *
              C583 +
          ((((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
              C2307 * C2872 + C2302 * C2875) *
                 C696 +
             (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
              C2307 * C2876 + C2302 * C2881) *
                 C50606) *
                C50764 * C2303 +
            ((C2899 + C2898 + C2897) * C696 +
             (C2902 + C2901 + C2900) * C50606) *
                C50764 * C50633) *
               C50894 -
           (((C2307 * C3162 + C2302 * C3168 + C2306 * C3161 + C2301 * C3167 +
              C2305 * C831 + C2300 * C841) *
                 C50606 +
             (C2307 * C3156 + C2302 * C3163 + C2306 * C3155 + C2301 * C3160 +
              C2305 * C817 + C2300 * C832) *
                 C696) *
                C50764 * C50633 +
            ((C2307 * C3164 + C2302 * C3169 + C2306 * C3159 + C2301 * C3166 +
              C2305 * C833 + C2300 * C842) *
                 C50606 +
             (C2307 * C3157 + C2302 * C3165 + C2306 * C3154 + C2301 * C3158 +
              C2305 * C818 + C2300 * C834) *
                 C696) *
                C50764 * C2303) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C696 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50606) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C696 + (C2350 + C2349 + C2348) * C50606) *
               C50764 * C50633) *
              C1162 -
          (((C2720 + C2719 + C2718) * C50606 + (C2717 + C2716 + C2715) * C696) *
               C50764 * C50633 +
           ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
             C2305 * C441 + C2300 * C452) *
                C50606 +
            (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
             C2305 * C435 + C2300 * C442) *
                C696) *
               C50764 * C2303) *
              C1163 +
          (((C2305 * C944 + C2300 * C949 + C2306 * C1083 + C2301 * C1091 +
             C2307 * C3316 + C2302 * C3319) *
                C696 +
            (C2305 * C950 + C2300 * C959 + C2306 * C1090 + C2301 * C1095 +
             C2307 * C3320 + C2302 * C3325) *
                C50606) *
               C50764 * C2303 +
           ((C3343 + C3342 + C3341) * C696 + (C3346 + C3345 + C3344) * C50606) *
               C50764 * C50633) *
              C1164 -
          (((C2307 * C3602 + C2302 * C3610 + C2306 * C3603 + C2301 * C3611 +
             C2305 * C1174 + C2300 * C1180) *
                C50606 +
            (C2307 * C3598 + C2302 * C3604 + C2306 * C3599 + C2301 * C3605 +
             C2305 * C1168 + C2300 * C1175) *
                C696) *
               C50764 * C50633 +
           ((C2307 * C3606 + C2302 * C3612 + C2306 * C3607 + C2301 * C3613 +
             C2305 * C1176 + C2300 * C1181) *
                C50606 +
            (C2307 * C3600 + C2302 * C3608 + C2306 * C3601 + C2301 * C3609 +
             C2305 * C1169 + C2300 * C1177) *
                C696) *
               C50764 * C2303) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C5192 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C5193 +
            (C5546 + C5547 - C5512 - C5513 + C5514 + C5515) * C5194) *
               C2303 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C5192 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C5193 +
            (C5522 + C5523 - C5524 - C5525 + C5526 + C5527) * C5194) *
               C50633) *
              C50894 +
          (((C5504 - (C5545 + C5544) + C5505 - C5506 - C5507) * C5192 +
            (C5512 - (C5547 + C5546) + C5513 - C5514 - C5515) * C5193 +
            (C5540 * C284 -
             ((C117 * C1176 + C50748 * C1181) * C278 +
              (C117 * C1169 + C50748 * C1177) * C283) +
             C5541 * C279 - C5542 * C285 - C5543 * C280) *
                C5194) *
               C2303 +
           ((C5518 - (C5517 + C5516) + C5519 - C5520 - C5521) * C5192 +
            (C5524 - (C5523 + C5522) + C5525 - C5526 - C5527) * C5193 +
            (C5542 * C284 - (C5541 * C278 + C5540 * C283) + C5543 * C279 -
             (C117 * C1166 + C50748 * C1171) * C285 -
             (C117 * C1170 + C50748 * C1178) * C280) *
                C5194) *
               C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C5192 +
             (C5950 + C5951) * C5193 + (C5952 + C5953) * C5194) *
                C2303 +
            ((C171 * C696 + C172 * C50606) * C5192 + (C5954 + C5955) * C5193 +
             (C5956 + C5957) * C5194) *
                C50633) *
               C50894 -
           (((C5541 * C50606 + C5540 * C696) * C5194 + (C5957 + C5956) * C5193 +
             (C5955 + C5954) * C5192) *
                C50633 +
            (((C117 * C1176 + C50748 * C1181) * C50606 +
              (C117 * C1169 + C50748 * C1177) * C696) *
                 C5194 +
             (C5953 + C5952) * C5193 + (C5951 + C5950) * C5192) *
                C2303) *
               C50706) *
              C582 +
          ((((C5990 + C5991) * C5192 + (C5992 + C5993) * C5193 +
             ((C117 * C3601 + C50748 * C3609) * C696 +
              (C117 * C3607 + C50748 * C3613) * C50606) *
                 C5194) *
                C2303 +
            ((C5966 + C5967) * C5192 + (C5968 + C5969) * C5193 +
             ((C117 * C3599 + C50748 * C3605) * C696 +
              (C117 * C3603 + C50748 * C3611) * C50606) *
                 C5194) *
                C50633) *
               C50706 -
           (((C5969 + C5968) * C5194 + (C5967 + C5966) * C5193 +
             (C328 * C50606 + C327 * C696) * C5192) *
                C50633 +
            ((C5993 + C5992) * C5194 + (C5991 + C5990) * C5193 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C5192) *
                C2303) *
               C50894) *
              C583 +
          (((((C117 * C587 + C50748 * C592) * C696 +
              (C117 * C593 + C50748 * C602) * C50606) *
                 C5192 +
             (C5994 + C5995) * C5193 + (C5996 + C5997) * C5194) *
                C2303 +
            ((C620 * C696 + C621 * C50606) * C5192 + (C5978 + C5979) * C5193 +
             (C5980 + C5981) * C5194) *
                C50633) *
               C50894 -
           ((((C117 * C3602 + C50748 * C3610) * C50606 +
              (C117 * C3598 + C50748 * C3604) * C696) *
                 C5194 +
             (C5981 + C5980) * C5193 + (C5979 + C5978) * C5192) *
                C50633 +
            (((C117 * C3606 + C50748 * C3612) * C50606 +
              (C117 * C3600 + C50748 * C3608) * C696) *
                 C5194 +
             (C5997 + C5996) * C5193 + (C5995 + C5994) * C5192) *
                C2303) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C5192 +
            (C5950 + C5951) * C5193 + C6352 * C5194) *
               C2303 +
           ((C171 * C696 + C172 * C50606) * C5192 + (C5954 + C5955) * C5193 +
            C6353 * C5194) *
               C50633) *
              C1162 -
          ((C6482 * C5194 + (C5957 + C5956) * C5193 + (C5955 + C5954) * C5192) *
               C50633 +
           (C6483 * C5194 + (C5953 + C5952) * C5193 + (C5951 + C5950) * C5192) *
               C2303) *
              C1163 +
          ((C6352 * C5192 + (C6357 + C6356) * C5193 + (C6492 + C6493) * C5194) *
               C2303 +
           (C6353 * C5192 + (C6355 + C6354) * C5193 + (C6488 + C6489) * C5194) *
               C50633) *
              C1164 -
          ((((C117 * C6475 + C50748 * C6479) * C50606 +
             (C117 * C6473 + C50748 * C6476) * C696) *
                C5194 +
            (C6489 + C6488) * C5193 + C6482 * C5192) *
               C50633 +
           (((C117 * C6477 + C50748 * C6480) * C50606 +
             (C117 * C6474 + C50748 * C6478) * C696) *
                C5194 +
            (C6493 + C6492) * C5193 + C6483 * C5192) *
               C2303) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1285 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50936 -
            (C2345 + C2346 + C2347) * C1286 - (C2348 + C2349 + C2350) * C50920 +
            (C2351 + C2352 + C2353) * C1287 + (C2354 + C2355 + C2356) * C1282) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C1285 + (C2350 + C2349 + C2348) * C50936 -
            (C2353 + C2352 + C2351) * C1286 - (C2356 + C2355 + C2354) * C50920 +
            (C2359 + C2358 + C2357) * C1287 + (C2362 + C2361 + C2360) * C1282) *
               C50764 * C50633) *
              C1643 +
          (((C2715 + C2716 + C2717) * C1286 -
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C50936 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C1285) +
            (C2718 + C2719 + C2720) * C50920 - (C2721 + C2722 + C2723) * C1287 -
            (C2724 + C2725 + C2726) * C1282) *
               C50764 * C2303 +
           ((C2723 + C2722 + C2721) * C1286 -
            ((C2720 + C2719 + C2718) * C50936 +
             (C2717 + C2716 + C2715) * C1285) +
            (C2726 + C2725 + C2724) * C50920 -
            (C2307 * C815 + C2302 * C828 + C2306 * C814 + C2301 * C825 +
             C2305 * C437 + C2300 * C446) *
                C1287 -
            (C2307 * C827 + C2302 * C839 + C2306 * C826 + C2301 * C838 +
             C2305 * C447 + C2300 * C455) *
                C1282) *
               C50764 * C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C1285 +
            (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
            C172 * C50920 + C173 * C1287 + C174 * C1282) *
               C50764 * C111 +
           (C171 * C1285 + C172 * C50936 - C173 * C1286 - C174 * C50920 +
            C175 * C1287 + C176 * C1282) *
               C50764 * C112 +
           (C173 * C1285 + C174 * C50936 - C175 * C1286 - C176 * C50920 +
            C177 * C1287 + C178 * C1282) *
               C50764 * C113 +
           (C175 * C1285 + C176 * C50936 - C177 * C1286 - C178 * C50920 +
            C179 * C1287 + C180 * C1282) *
               C50764 * C114) *
              C1643 +
          ((C475 * C1286 -
            ((C117 * C441 + C50748 * C452) * C50936 +
             (C117 * C435 + C50748 * C442) * C1285) +
            C476 * C50920 - C477 * C1287 - C478 * C1282) *
               C50764 * C111 +
           (C477 * C1286 - (C476 * C50936 + C475 * C1285) + C478 * C50920 -
            C479 * C1287 - C480 * C1282) *
               C50764 * C112 +
           (C479 * C1286 - (C478 * C50936 + C477 * C1285) + C480 * C50920 -
            C481 * C1287 - C482 * C1282) *
               C50764 * C113 +
           (C481 * C1286 - (C480 * C50936 + C479 * C1285) + C482 * C50920 -
            (C117 * C439 + C50748 * C450) * C1287 -
            (C117 * C451 + C50748 * C457) * C1282) *
               C50764 * C114) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1285 +
             (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
             C172 * C50920 + C173 * C1287 + C174 * C1282) *
                C5192 +
            (C7162 + C7163 - C7164 - C7165 + C7166 + C7167) * C5193 +
            (C7168 + C7169 - C7170 - C7171 + C7172 + C7173) * C5194) *
               C2303 +
           ((C171 * C1285 + C172 * C50936 - C173 * C1286 - C174 * C50920 +
             C175 * C1287 + C176 * C1282) *
                C5192 +
            (C7174 + C7175 - C7176 - C7177 + C7178 + C7179) * C5193 +
            (C7180 + C7181 - C7182 - C7183 + C7184 + C7185) * C5194) *
               C50633) *
              C1643 +
          (((C7164 - (C7163 + C7162) + C7165 - C7166 - C7167) * C5192 +
            (C7170 - (C7169 + C7168) + C7171 - C7172 - C7173) * C5193 +
            (C5540 * C1286 - (C6188 * C50936 + C6189 * C1285) + C5541 * C50920 -
             C5542 * C1287 - C5543 * C1282) *
                C5194) *
               C2303 +
           ((C7176 - (C7175 + C7174) + C7177 - C7178 - C7179) * C5192 +
            (C7182 - (C7181 + C7180) + C7183 - C7184 - C7185) * C5193 +
            (C5542 * C1286 - (C5541 * C50936 + C5540 * C1285) + C5543 * C50920 -
             (C117 * C1166 + C50748 * C1171) * C1287 -
             (C117 * C1170 + C50748 * C1178) * C1282) *
                C5194) *
               C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C1391 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C1386 -
             (C2345 + C2346 + C2347) * C1392 -
             (C2348 + C2349 + C2350) * C50611) *
                C50764 * C2303 +
            ((C2347 + C2346 + C2345) * C1391 + (C2350 + C2349 + C2348) * C1386 -
             (C2353 + C2352 + C2351) * C1392 -
             (C2356 + C2355 + C2354) * C50611) *
                C50764 * C50633) *
               C1643 +
           (((C2715 + C2716 + C2717) * C1392 -
             ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
               C2305 * C441 + C2300 * C452) *
                  C1386 +
              (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
               C2305 * C435 + C2300 * C442) *
                  C1391) +
             (C2718 + C2719 + C2720) * C50611) *
                C50764 * C2303 +
            ((C2723 + C2722 + C2721) * C1392 -
             ((C2720 + C2719 + C2718) * C1386 +
              (C2717 + C2716 + C2715) * C1391) +
             (C2726 + C2725 + C2724) * C50611) *
                C50764 * C50633) *
               C50706) *
              C50893 +
          ((((C2533 + C2534 + C2535) * C1392 -
             ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
               C2305 * C293 + C2300 * C304) *
                  C1386 +
              (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
               C2305 * C287 + C2300 * C294) *
                  C1391) +
             (C2536 + C2537 + C2538) * C50611) *
                C50764 * C2303 +
            ((C2541 + C2540 + C2539) * C1392 -
             ((C2538 + C2537 + C2536) * C1386 +
              (C2535 + C2534 + C2533) * C1391) +
             (C2544 + C2543 + C2542) * C50611) *
                C50764 * C50633) *
               C1643 +
           (((C2305 * C811 + C2300 * C819 + C2306 * C818 + C2301 * C834 +
              C2307 * C3154 + C2302 * C3158) *
                 C1391 +
             (C2305 * C820 + C2300 * C835 + C2306 * C833 + C2301 * C842 +
              C2307 * C3159 + C2302 * C3166) *
                 C1386 -
             (C4117 + C4118 + C4119) * C1392 -
             (C4120 + C4121 + C4122) * C50611) *
                C50764 * C2303 +
            ((C4119 + C4118 + C4117) * C1391 + (C4122 + C4121 + C4120) * C1386 -
             (C2307 * C4100 + C2302 * C4101 + C2306 * C816 + C2301 * C830 +
              C2305 * C813 + C2300 * C823) *
                 C1392 -
             (C2307 * C4102 + C2302 * C4103 + C2306 * C829 + C2301 * C840 +
              C2305 * C824 + C2300 * C837) *
                 C50611) *
                C50764 * C50633) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C50764 * C111 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C50764 * C112 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                C50764 * C113 +
            (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50611) *
                C50764 * C114) *
               C1643 +
           ((C475 * C1392 -
             ((C117 * C441 + C50748 * C452) * C1386 +
              (C117 * C435 + C50748 * C442) * C1391) +
             C476 * C50611) *
                C50764 * C111 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50611) *
                C50764 * C112 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50611) *
                C50764 * C113 +
            (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50611) *
                C50764 * C114) *
               C50706) *
              C50893 +
          (((C327 * C1392 -
             ((C117 * C293 + C50748 * C304) * C1386 +
              (C117 * C287 + C50748 * C294) * C1391) +
             C328 * C50611) *
                C50764 * C111 +
            (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                C50764 * C112 +
            (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                C50764 * C113 +
            (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50611) *
                C50764 * C114) *
               C1643 +
           (((C117 * C811 + C50748 * C819) * C1391 +
             (C117 * C820 + C50748 * C835) * C1386 - C1540 * C1392 -
             C1541 * C50611) *
                C50764 * C111 +
            (C1540 * C1391 + C1541 * C1386 - C1542 * C1392 - C1543 * C50611) *
                C50764 * C112 +
            (C1542 * C1391 + C1543 * C1386 - C1544 * C1392 - C1545 * C50611) *
                C50764 * C113 +
            (C1544 * C1391 + C1545 * C1386 -
             (C117 * C1523 + C50748 * C1524) * C1392 -
             (C117 * C1525 + C50748 * C1526) * C50611) *
                C50764 * C114) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C1391 +
              (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
              C172 * C50611) *
                 C5192 +
             (C6984 + C6985 - C6986 - C6987) * C5193 +
             (C6988 + C6989 - C6990 - C6991) * C5194) *
                C2303 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                 C5192 +
             (C6992 + C6993 - C6994 - C6995) * C5193 +
             (C6996 + C6997 - C6998 - C6999) * C5194) *
                C50633) *
               C1643 +
           (((C6986 - (C6985 + C6984) + C6987) * C5192 +
             (C6990 - (C6989 + C6988) + C6991) * C5193 +
             (C5540 * C1392 - (C6188 * C1386 + C6189 * C1391) +
              C5541 * C50611) *
                 C5194) *
                C2303 +
            ((C6994 - (C6993 + C6992) + C6995) * C5192 +
             (C6998 - (C6997 + C6996) + C6999) * C5193 +
             (C5542 * C1392 - (C5541 * C1386 + C5540 * C1391) +
              C5543 * C50611) *
                 C5194) *
                C50633) *
               C50706) *
              C50893 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50748 * C304) * C1386 +
               (C117 * C287 + C50748 * C294) * C1391) +
              C328 * C50611) *
                 C5192 +
             (C7000 - (C7001 + C7002) + C7003) * C5193 +
             (C7004 - (C7005 + C7006) + C7007) * C5194) *
                C2303 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                 C5192 +
             (C7008 - (C7009 + C7010) + C7011) * C5193 +
             (C7012 - (C7013 + C7014) + C7015) * C5194) *
                C50633) *
               C1643 +
           (((C7002 + C7001 - C7000 - C7003) * C5192 +
             (C7006 + C7005 - C7004 - C7007) * C5193 +
             (C6368 * C1391 + C6369 * C1386 - C6370 * C1392 - C6371 * C50611) *
                 C5194) *
                C2303 +
            ((C7010 + C7009 - C7008 - C7011) * C5192 +
             (C7014 + C7013 - C7012 - C7015) * C5193 +
             (C6370 * C1391 + C6371 * C1386 -
              (C117 * C6979 + C50748 * C6980) * C1392 -
              (C117 * C6981 + C50748 * C6982) * C50611) *
                 C5194) *
                C50633) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1391 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C1386 -
            (C2345 + C2346 + C2347) * C1392 -
            (C2348 + C2349 + C2350) * C50611) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C1391 + (C2350 + C2349 + C2348) * C1386 -
            (C2353 + C2352 + C2351) * C1392 -
            (C2356 + C2355 + C2354) * C50611) *
               C50764 * C50633) *
              C50940 +
          (((C2715 + C2716 + C2717) * C1392 -
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C1386 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C1391) +
            (C2718 + C2719 + C2720) * C50611) *
               C50764 * C2303 +
           ((C2723 + C2722 + C2721) * C1392 -
            ((C2720 + C2719 + C2718) * C1386 +
             (C2717 + C2716 + C2715) * C1391) +
            (C2726 + C2725 + C2724) * C50611) *
               C50764 * C50633) *
              C50929 +
          (((C2305 * C944 + C2300 * C949 + C2306 * C1083 + C2301 * C1091 +
             C2307 * C3316 + C2302 * C3319) *
                C1391 +
            (C2305 * C950 + C2300 * C959 + C2306 * C1090 + C2301 * C1095 +
             C2307 * C3320 + C2302 * C3325) *
                C1386 -
            (C3341 + C3342 + C3343) * C1392 -
            (C3344 + C3345 + C3346) * C50611) *
               C50764 * C2303 +
           ((C3343 + C3342 + C3341) * C1391 + (C3346 + C3345 + C3344) * C1386 -
            (C2307 * C3318 + C2302 * C3323 + C2306 * C1081 + C2301 * C1087 +
             C2305 * C946 + C2300 * C953) *
                C1392 -
            (C2307 * C3324 + C2302 * C3327 + C2306 * C1086 + C2301 * C1093 +
             C2305 * C954 + C2300 * C961) *
                C50611) *
               C50764 * C50633) *
              C1875) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C1391 +
            (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
            C172 * C50611) *
               C50764 * C111 +
           (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
               C50764 * C112 +
           (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
               C50764 * C113 +
           (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50611) *
               C50764 * C114) *
              C50940 +
          ((C475 * C1392 -
            ((C117 * C441 + C50748 * C452) * C1386 +
             (C117 * C435 + C50748 * C442) * C1391) +
            C476 * C50611) *
               C50764 * C111 +
           (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50611) *
               C50764 * C112 +
           (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50611) *
               C50764 * C113 +
           (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50611) *
               C50764 * C114) *
              C50929 +
          (((C117 * C944 + C50748 * C949) * C1391 +
            (C117 * C950 + C50748 * C959) * C1386 - C977 * C1392 -
            C978 * C50611) *
               C50764 * C111 +
           (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50611) *
               C50764 * C112 +
           (C979 * C1391 + C980 * C1386 - C981 * C1392 - C982 * C50611) *
               C50764 * C113 +
           (C981 * C1391 + C982 * C1386 -
            (C117 * C948 + C50748 * C957) * C1392 -
            (C117 * C958 + C50748 * C963) * C50611) *
               C50764 * C114) *
              C1875) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C5192 +
            (C6984 + C6985 - C6986 - C6987) * C5193 + C7538 * C5194) *
               C2303 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C5192 +
            (C6992 + C6993 - C6994 - C6995) * C5193 + C7539 * C5194) *
               C50633) *
              C50940 +
          (((C6986 - (C6985 + C6984) + C6987) * C5192 +
            (C6990 - (C6989 + C6988) + C6991) * C5193 +
            (C7528 - (C7529 + C7530) + C7531) * C5194) *
               C2303 +
           ((C6994 - (C6993 + C6992) + C6995) * C5192 +
            (C6998 - (C6997 + C6996) + C6999) * C5193 +
            (C7532 - (C7533 + C7534) + C7535) * C5194) *
               C50633) *
              C50929 +
          ((C7538 * C5192 + (C7530 + C7529 - C7528 - C7531) * C5193 +
            (C6490 * C1391 + C6491 * C1386 - C6190 * C1392 - C6191 * C50611) *
                C5194) *
               C2303 +
           (C7539 * C5192 + (C7534 + C7533 - C7532 - C7535) * C5193 +
            (C6190 * C1391 + C6191 * C1386 -
             (C117 * C6145 + C50748 * C6150) * C1392 -
             (C117 * C6151 + C50748 * C6154) * C50611) *
                C5194) *
               C50633) *
              C1875) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C49720 +
            (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
            C172 * C50611) *
               C50764 * C111 +
           (C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
               C50764 * C112 +
           (C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
               C50764 * C113 +
           (C175 * C49720 + C176 * C50878 - C177 * C49713 - C178 * C50611) *
               C50764 * C114) *
              C50694 * C582 +
          ((C327 * C49713 -
            ((C117 * C293 + C50748 * C304) * C50878 +
             (C117 * C287 + C50748 * C294) * C49720) +
            C328 * C50611) *
               C50764 * C111 +
           (C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
               C50764 * C112 +
           (C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
               C50764 * C113 +
           (C333 * C49713 - (C332 * C50878 + C331 * C49720) + C334 * C50611) *
               C50764 * C114) *
              C50694 * C583 +
          (((C117 * C587 + C50748 * C592) * C49720 +
            (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
            C621 * C50611) *
               C50764 * C111 +
           (C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
               C50764 * C112 +
           (C622 * C49720 + C623 * C50878 - C624 * C49713 - C625 * C50611) *
               C50764 * C113 +
           (C624 * C49720 + C625 * C50878 -
            (C117 * C591 + C50748 * C600) * C49713 -
            (C117 * C601 + C50748 * C606) * C50611) *
               C50764 * C114) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50748 * C129) * C118 +
           (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50764 * C111 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C50764 * C112 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C50764 * C113 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50748 * C141) * C121 -
           (C117 * C142 + C50748 * C149) * C109) *
              C50764 * C114) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
            C2307 * C587 + C2302 * C592) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
            C2307 * C593 + C2302 * C602) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C50764 * C2303 +
          ((C2347 + C2346 + C2345) * C118 + (C2350 + C2349 + C2348) * C106 -
           (C2353 + C2352 + C2351) * C119 - (C2356 + C2355 + C2354) * C107 +
           (C2359 + C2358 + C2357) * C120 + (C2362 + C2361 + C2360) * C108 -
           (C2307 * C591 + C2302 * C600 + C2306 * C290 + C2301 * C300 +
            C2305 * C126 + C2300 * C137) *
               C121 -
           (C2307 * C601 + C2302 * C606 + C2306 * C301 + C2301 * C308 +
            C2305 * C138 + C2300 * C147) *
               C109) *
              C50764 * C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50878 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50611) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C49720 +
            (C2350 + C2349 + C2348) * C50878 -
            (C2353 + C2352 + C2351) * C49713 -
            (C2356 + C2355 + C2354) * C50611) *
               C50764 * C50633) *
              C50694 * C582 +
          (((C2533 + C2534 + C2535) * C49713 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50878 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C49720) +
            (C2536 + C2537 + C2538) * C50611) *
               C50764 * C2303 +
           ((C2541 + C2540 + C2539) * C49713 -
            ((C2538 + C2537 + C2536) * C50878 +
             (C2535 + C2534 + C2533) * C49720) +
            (C2544 + C2543 + C2542) * C50611) *
               C50764 * C50633) *
              C50694 * C583 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C49720 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50878 -
            (C2897 + C2898 + C2899) * C49713 -
            (C2900 + C2901 + C2902) * C50611) *
               C50764 * C2303 +
           ((C2899 + C2898 + C2897) * C49720 +
            (C2902 + C2901 + C2900) * C50878 -
            (C2307 * C2874 + C2302 * C2879 + C2306 * C698 + C2301 * C704 +
             C2305 * C589 + C2300 * C596) *
                C49713 -
            (C2307 * C2880 + C2302 * C2883 + C2306 * C703 + C2301 * C710 +
             C2305 * C597 + C2300 * C604) *
                C50611) *
               C50764 * C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C118 +
            (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C5192 +
           ((C117 * C435 + C50748 * C442) * C118 +
            (C117 * C441 + C50748 * C452) * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C5193 +
           ((C117 * C944 + C50748 * C949) * C118 +
            (C117 * C950 + C50748 * C959) * C106 - C977 * C119 - C978 * C107 +
            C979 * C120 + C980 * C108 - C981 * C121 - C982 * C109) *
               C5194) *
              C2303 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C5192 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C5193 +
           (C977 * C118 + C978 * C106 - C979 * C119 - C980 * C107 +
            C981 * C120 + C982 * C108 - (C117 * C948 + C50748 * C957) * C121 -
            (C117 * C958 + C50748 * C963) * C109) *
               C5194) *
              C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C5192 +
            (C5536 * C49720 + C5537 * C50878 - C475 * C49713 - C476 * C50611) *
                C5193 +
            (C5538 * C49720 + C5539 * C50878 - C977 * C49713 - C978 * C50611) *
                C5194) *
               C2303 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C5192 +
            (C475 * C49720 + C476 * C50878 - C477 * C49713 - C478 * C50611) *
                C5193 +
            (C977 * C49720 + C978 * C50878 - C979 * C49713 - C980 * C50611) *
                C5194) *
               C50633) *
              C50694 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50748 * C304) * C50878 +
              (C117 * C287 + C50748 * C294) * C49720) +
             C328 * C50611) *
                C5192 +
            (C1540 * C49713 -
             ((C117 * C820 + C50748 * C835) * C50878 +
              (C117 * C811 + C50748 * C819) * C49720) +
             C1541 * C50611) *
                C5193 +
            (C5350 * C49713 -
             ((C117 * C1090 + C50748 * C1095) * C50878 +
              (C117 * C1083 + C50748 * C1091) * C49720) +
             C5351 * C50611) *
                C5194) *
               C2303 +
           ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                C5192 +
            (C1542 * C49713 - (C1541 * C50878 + C1540 * C49720) +
             C1543 * C50611) *
                C5193 +
            (C5352 * C49713 - (C5351 * C50878 + C5350 * C49720) +
             C5353 * C50611) *
                C5194) *
               C50633) *
              C50694 * C583 +
          ((((C117 * C587 + C50748 * C592) * C49720 +
             (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
             C621 * C50611) *
                C5192 +
            ((C117 * C818 + C50748 * C834) * C49720 +
             (C117 * C833 + C50748 * C842) * C50878 - C5702 * C49713 -
             C5703 * C50611) *
                C5193 +
            ((C117 * C3316 + C50748 * C3319) * C49720 +
             (C117 * C3320 + C50748 * C3325) * C50878 - C5704 * C49713 -
             C5705 * C50611) *
                C5194) *
               C2303 +
           ((C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
                C5192 +
            (C5702 * C49720 + C5703 * C50878 -
             (C117 * C816 + C50748 * C830) * C49713 -
             (C117 * C829 + C50748 * C840) * C50611) *
                C5193 +
            (C5704 * C49720 + C5705 * C50878 -
             (C117 * C3318 + C50748 * C3323) * C49713 -
             (C117 * C3324 + C50748 * C3327) * C50611) *
                C5194) *
               C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C696 +
            (C117 * C130 + C50748 * C143) * C50606) *
               C50764 * C111 +
           (C171 * C696 + C172 * C50606) * C50764 * C112 +
           (C173 * C696 + C174 * C50606) * C50764 * C113 +
           (C175 * C696 + C176 * C50606) * C50764 * C114) *
              C50694 * C692 -
          ((C332 * C50606 + C331 * C696) * C50764 * C114 +
           (C330 * C50606 + C329 * C696) * C50764 * C113 +
           (C328 * C50606 + C327 * C696) * C50764 * C112 +
           ((C117 * C293 + C50748 * C304) * C50606 +
            (C117 * C287 + C50748 * C294) * C696) *
               C50764 * C111) *
              C50694 * C693 +
          (((C117 * C587 + C50748 * C592) * C696 +
            (C117 * C593 + C50748 * C602) * C50606) *
               C50764 * C111 +
           (C620 * C696 + C621 * C50606) * C50764 * C112 +
           (C622 * C696 + C623 * C50606) * C50764 * C113 +
           (C624 * C696 + C625 * C50606) * C50764 * C114) *
              C50694 * C694 -
          (((C117 * C701 + C50748 * C709) * C50606 +
            (C117 * C697 + C50748 * C702) * C696) *
               C50764 * C114 +
           ((C117 * C703 + C50748 * C710) * C50606 +
            (C117 * C698 + C50748 * C704) * C696) *
               C50764 * C113 +
           ((C117 * C705 + C50748 * C711) * C50606 +
            (C117 * C699 + C50748 * C706) * C696) *
               C50764 * C112 +
           ((C117 * C707 + C50748 * C712) * C50606 +
            (C117 * C700 + C50748 * C708) * C696) *
               C50764 * C111) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C283 +
            (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50764 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C50764 * C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C50764 * C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C50764 * C114) *
              C50694 * C50893 +
          ((C327 * C284 -
            ((C117 * C293 + C50748 * C304) * C278 +
             (C117 * C287 + C50748 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C50764 * C111 +
           (C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
            C331 * C285 - C332 * C280) *
               C50764 * C112 +
           (C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
            C333 * C285 - C334 * C280) *
               C50764 * C113 +
           (C333 * C284 - (C332 * C278 + C331 * C283) + C334 * C279 -
            (C117 * C291 + C50748 * C302) * C285 -
            (C117 * C303 + C50748 * C309) * C280) *
               C50764 * C114) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C279 +
            (C2359 + C2358 + C2357) * C285 + (C2362 + C2361 + C2360) * C280) *
               C50764 * C50633) *
              C50694 * C50893 +
          (((C2533 + C2534 + C2535) * C284 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C278 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C283) +
            (C2536 + C2537 + C2538) * C279 - (C2539 + C2540 + C2541) * C285 -
            (C2542 + C2543 + C2544) * C280) *
               C50764 * C2303 +
           ((C2541 + C2540 + C2539) * C284 -
            ((C2538 + C2537 + C2536) * C278 + (C2535 + C2534 + C2533) * C283) +
            (C2544 + C2543 + C2542) * C279 -
            (C2307 * C697 + C2302 * C702 + C2306 * C590 + C2301 * C598 +
             C2305 * C289 + C2300 * C298) *
                C285 -
            (C2307 * C701 + C2302 * C709 + C2306 * C599 + C2301 * C605 +
             C2305 * C299 + C2300 * C307) *
                C280) *
               C50764 * C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C696 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50606) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C696 + (C2350 + C2349 + C2348) * C50606) *
               C50764 * C50633) *
              C50694 * C692 -
          (((C2538 + C2537 + C2536) * C50606 + (C2535 + C2534 + C2533) * C696) *
               C50764 * C50633 +
           ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
             C2305 * C293 + C2300 * C304) *
                C50606 +
            (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
             C2305 * C287 + C2300 * C294) *
                C696) *
               C50764 * C2303) *
              C50694 * C693 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C696 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50606) *
               C50764 * C2303 +
           ((C2899 + C2898 + C2897) * C696 + (C2902 + C2901 + C2900) * C50606) *
               C50764 * C50633) *
              C50694 * C694 -
          (((C2307 * C3002 + C2302 * C3006 + C2306 * C2878 + C2301 * C2882 +
             C2305 * C705 + C2300 * C711) *
                C50606 +
            (C2307 * C3000 + C2302 * C3003 + C2306 * C2873 + C2301 * C2877 +
             C2305 * C699 + C2300 * C706) *
                C696) *
               C50764 * C50633 +
           ((C2307 * C3004 + C2302 * C3007 + C2306 * C2876 + C2301 * C2881 +
             C2305 * C707 + C2300 * C712) *
                C50606 +
            (C2307 * C3001 + C2302 * C3005 + C2306 * C2872 + C2301 * C2875 +
             C2305 * C700 + C2300 * C708) *
                C696) *
               C50764 * C2303) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C5192 +
            ((C117 * C435 + C50748 * C442) * C283 +
             (C117 * C441 + C50748 * C452) * C278 - C475 * C284 - C476 * C279 +
             C477 * C285 + C478 * C280) *
                C5193 +
            ((C117 * C944 + C50748 * C949) * C283 +
             (C117 * C950 + C50748 * C959) * C278 - C977 * C284 - C978 * C279 +
             C979 * C285 + C980 * C280) *
                C5194) *
               C2303 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C5192 +
            (C475 * C283 + C476 * C278 - C477 * C284 - C478 * C279 +
             C479 * C285 + C480 * C280) *
                C5193 +
            (C977 * C283 + C978 * C278 - C979 * C284 - C980 * C279 +
             C981 * C285 + C982 * C280) *
                C5194) *
               C50633) *
              C50694 * C50893 +
          (((C327 * C284 -
             ((C117 * C293 + C50748 * C304) * C278 +
              (C117 * C287 + C50748 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C5192 +
            (C1540 * C284 -
             ((C117 * C820 + C50748 * C835) * C278 +
              (C117 * C811 + C50748 * C819) * C283) +
             C1541 * C279 - C1542 * C285 - C1543 * C280) *
                C5193 +
            (C5350 * C284 -
             ((C117 * C1090 + C50748 * C1095) * C278 +
              (C117 * C1083 + C50748 * C1091) * C283) +
             C5351 * C279 - C5352 * C285 - C5353 * C280) *
                C5194) *
               C2303 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C5192 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C5193 +
            (C5352 * C284 - (C5351 * C278 + C5350 * C283) + C5353 * C279 -
             (C117 * C1080 + C50748 * C1085) * C285 -
             (C117 * C1084 + C50748 * C1092) * C280) *
                C5194) *
               C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C5192 +
            (C5536 * C696 + C5537 * C50606) * C5193 +
            (C5538 * C696 + C5539 * C50606) * C5194) *
               C2303 +
           ((C171 * C696 + C172 * C50606) * C5192 +
            (C475 * C696 + C476 * C50606) * C5193 +
            (C977 * C696 + C978 * C50606) * C5194) *
               C50633) *
              C50694 * C692 -
          (((C5351 * C50606 + C5350 * C696) * C5194 +
            (C1541 * C50606 + C1540 * C696) * C5193 +
            (C328 * C50606 + C327 * C696) * C5192) *
               C50633 +
           (((C117 * C1090 + C50748 * C1095) * C50606 +
             (C117 * C1083 + C50748 * C1091) * C696) *
                C5194 +
            ((C117 * C820 + C50748 * C835) * C50606 +
             (C117 * C811 + C50748 * C819) * C696) *
                C5193 +
            ((C117 * C293 + C50748 * C304) * C50606 +
             (C117 * C287 + C50748 * C294) * C696) *
                C5192) *
               C2303) *
              C50694 * C693 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C5192 +
            ((C117 * C818 + C50748 * C834) * C696 +
             (C117 * C833 + C50748 * C842) * C50606) *
                C5193 +
            ((C117 * C3316 + C50748 * C3319) * C696 +
             (C117 * C3320 + C50748 * C3325) * C50606) *
                C5194) *
               C2303 +
           ((C620 * C696 + C621 * C50606) * C5192 +
            (C5702 * C696 + C5703 * C50606) * C5193 +
            (C5704 * C696 + C5705 * C50606) * C5194) *
               C50633) *
              C50694 * C694 -
          ((((C117 * C3494 + C50748 * C3498) * C50606 +
             (C117 * C3492 + C50748 * C3495) * C696) *
                C5194 +
            ((C117 * C3161 + C50748 * C3167) * C50606 +
             (C117 * C3155 + C50748 * C3160) * C696) *
                C5193 +
            ((C117 * C705 + C50748 * C711) * C50606 +
             (C117 * C699 + C50748 * C706) * C696) *
                C5192) *
               C50633 +
           (((C117 * C3496 + C50748 * C3499) * C50606 +
             (C117 * C3493 + C50748 * C3497) * C696) *
                C5194 +
            ((C117 * C3159 + C50748 * C3166) * C50606 +
             (C117 * C3154 + C50748 * C3158) * C696) *
                C5193 +
            ((C117 * C707 + C50748 * C712) * C50606 +
             (C117 * C700 + C50748 * C708) * C696) *
                C5192) *
               C2303) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C50764 * C111 +
            (C171 * C696 + C172 * C50606) * C50764 * C112 +
            (C173 * C696 + C174 * C50606) * C50764 * C113 +
            (C175 * C696 + C176 * C50606) * C50764 * C114) *
               C50894 -
           ((C480 * C50606 + C479 * C696) * C50764 * C114 +
            (C478 * C50606 + C477 * C696) * C50764 * C113 +
            (C476 * C50606 + C475 * C696) * C50764 * C112 +
            ((C117 * C441 + C50748 * C452) * C50606 +
             (C117 * C435 + C50748 * C442) * C696) *
                C50764 * C111) *
               C50706) *
              C582 +
          ((((C117 * C811 + C50748 * C819) * C696 +
             (C117 * C820 + C50748 * C835) * C50606) *
                C50764 * C111 +
            ((C117 * C812 + C50748 * C821) * C696 +
             (C117 * C822 + C50748 * C836) * C50606) *
                C50764 * C112 +
            ((C117 * C813 + C50748 * C823) * C696 +
             (C117 * C824 + C50748 * C837) * C50606) *
                C50764 * C113 +
            ((C117 * C814 + C50748 * C825) * C696 +
             (C117 * C826 + C50748 * C838) * C50606) *
                C50764 * C114) *
               C50706 -
           ((C332 * C50606 + C331 * C696) * C50764 * C114 +
            (C330 * C50606 + C329 * C696) * C50764 * C113 +
            (C328 * C50606 + C327 * C696) * C50764 * C112 +
            ((C117 * C293 + C50748 * C304) * C50606 +
             (C117 * C287 + C50748 * C294) * C696) *
                C50764 * C111) *
               C50894) *
              C583 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C50764 * C111 +
            (C620 * C696 + C621 * C50606) * C50764 * C112 +
            (C622 * C696 + C623 * C50606) * C50764 * C113 +
            (C624 * C696 + C625 * C50606) * C50764 * C114) *
               C50894 -
           (((C117 * C827 + C50748 * C839) * C50606 +
             (C117 * C815 + C50748 * C828) * C696) *
                C50764 * C114 +
            ((C117 * C829 + C50748 * C840) * C50606 +
             (C117 * C816 + C50748 * C830) * C696) *
                C50764 * C113 +
            ((C117 * C831 + C50748 * C841) * C50606 +
             (C117 * C817 + C50748 * C832) * C696) *
                C50764 * C112 +
            ((C117 * C833 + C50748 * C842) * C50606 +
             (C117 * C818 + C50748 * C834) * C696) *
                C50764 * C111) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C283 +
            (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50764 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C50764 * C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C50764 * C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C50764 * C114) *
              C50894 +
          ((C475 * C284 -
            ((C117 * C441 + C50748 * C452) * C278 +
             (C117 * C435 + C50748 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C50764 * C111 +
           (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
            C479 * C285 - C480 * C280) *
               C50764 * C112 +
           (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
            C481 * C285 - C482 * C280) *
               C50764 * C113 +
           (C481 * C284 - (C480 * C278 + C479 * C283) + C482 * C279 -
            (C117 * C439 + C50748 * C450) * C285 -
            (C117 * C451 + C50748 * C457) * C280) *
               C50764 * C114) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C279 +
            (C2359 + C2358 + C2357) * C285 + (C2362 + C2361 + C2360) * C280) *
               C50764 * C50633) *
              C50894 +
          (((C2715 + C2716 + C2717) * C284 -
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C278 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C283) +
            (C2718 + C2719 + C2720) * C279 - (C2721 + C2722 + C2723) * C285 -
            (C2724 + C2725 + C2726) * C280) *
               C50764 * C2303 +
           ((C2723 + C2722 + C2721) * C284 -
            ((C2720 + C2719 + C2718) * C278 + (C2717 + C2716 + C2715) * C283) +
            (C2726 + C2725 + C2724) * C279 -
            (C2307 * C815 + C2302 * C828 + C2306 * C814 + C2301 * C825 +
             C2305 * C437 + C2300 * C446) *
                C285 -
            (C2307 * C827 + C2302 * C839 + C2306 * C826 + C2301 * C838 +
             C2305 * C447 + C2300 * C455) *
                C280) *
               C50764 * C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C50764 * C2303 +
            ((C2347 + C2346 + C2345) * C696 +
             (C2350 + C2349 + C2348) * C50606) *
                C50764 * C50633) *
               C50894 -
           (((C2720 + C2719 + C2718) * C50606 +
             (C2717 + C2716 + C2715) * C696) *
                C50764 * C50633 +
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C50606 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C696) *
                C50764 * C2303) *
               C50706) *
              C582 +
          ((((C2305 * C811 + C2300 * C819 + C2306 * C818 + C2301 * C834 +
              C2307 * C3154 + C2302 * C3158) *
                 C696 +
             (C2305 * C820 + C2300 * C835 + C2306 * C833 + C2301 * C842 +
              C2307 * C3159 + C2302 * C3166) *
                 C50606) *
                C50764 * C2303 +
            ((C2305 * C812 + C2300 * C821 + C2306 * C817 + C2301 * C832 +
              C2307 * C3155 + C2302 * C3160) *
                 C696 +
             (C2305 * C822 + C2300 * C836 + C2306 * C831 + C2301 * C841 +
              C2307 * C3161 + C2302 * C3167) *
                 C50606) *
                C50764 * C50633) *
               C50706 -
           (((C2538 + C2537 + C2536) * C50606 +
             (C2535 + C2534 + C2533) * C696) *
                C50764 * C50633 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C50764 * C2303) *
               C50894) *
              C583 +
          ((((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
              C2307 * C2872 + C2302 * C2875) *
                 C696 +
             (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
              C2307 * C2876 + C2302 * C2881) *
                 C50606) *
                C50764 * C2303 +
            ((C2899 + C2898 + C2897) * C696 +
             (C2902 + C2901 + C2900) * C50606) *
                C50764 * C50633) *
               C50894 -
           (((C2307 * C3162 + C2302 * C3168 + C2306 * C3161 + C2301 * C3167 +
              C2305 * C831 + C2300 * C841) *
                 C50606 +
             (C2307 * C3156 + C2302 * C3163 + C2306 * C3155 + C2301 * C3160 +
              C2305 * C817 + C2300 * C832) *
                 C696) *
                C50764 * C50633 +
            ((C2307 * C3164 + C2302 * C3169 + C2306 * C3159 + C2301 * C3166 +
              C2305 * C833 + C2300 * C842) *
                 C50606 +
             (C2307 * C3157 + C2302 * C3165 + C2306 * C3154 + C2301 * C3158 +
              C2305 * C818 + C2300 * C834) *
                 C696) *
                C50764 * C2303) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C5192 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C5193 +
            (C5546 + C5547 - C5512 - C5513 + C5514 + C5515) * C5194) *
               C2303 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C5192 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C5193 +
            (C5522 + C5523 - C5524 - C5525 + C5526 + C5527) * C5194) *
               C50633) *
              C50894 +
          (((C5504 - (C5545 + C5544) + C5505 - C5506 - C5507) * C5192 +
            (C5512 - (C5547 + C5546) + C5513 - C5514 - C5515) * C5193 +
            (C5540 * C284 -
             ((C117 * C1176 + C50748 * C1181) * C278 +
              (C117 * C1169 + C50748 * C1177) * C283) +
             C5541 * C279 - C5542 * C285 - C5543 * C280) *
                C5194) *
               C2303 +
           ((C5518 - (C5517 + C5516) + C5519 - C5520 - C5521) * C5192 +
            (C5524 - (C5523 + C5522) + C5525 - C5526 - C5527) * C5193 +
            (C5542 * C284 - (C5541 * C278 + C5540 * C283) + C5543 * C279 -
             (C117 * C1166 + C50748 * C1171) * C285 -
             (C117 * C1170 + C50748 * C1178) * C280) *
                C5194) *
               C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C5192 +
             (C5950 + C5951) * C5193 + (C5952 + C5953) * C5194) *
                C2303 +
            ((C171 * C696 + C172 * C50606) * C5192 + (C5954 + C5955) * C5193 +
             (C5956 + C5957) * C5194) *
                C50633) *
               C50894 -
           (((C5541 * C50606 + C5540 * C696) * C5194 + (C5957 + C5956) * C5193 +
             (C5955 + C5954) * C5192) *
                C50633 +
            (((C117 * C1176 + C50748 * C1181) * C50606 +
              (C117 * C1169 + C50748 * C1177) * C696) *
                 C5194 +
             (C5953 + C5952) * C5193 + (C5951 + C5950) * C5192) *
                C2303) *
               C50706) *
              C582 +
          ((((C5990 + C5991) * C5192 + (C5992 + C5993) * C5193 +
             ((C117 * C3601 + C50748 * C3609) * C696 +
              (C117 * C3607 + C50748 * C3613) * C50606) *
                 C5194) *
                C2303 +
            ((C5966 + C5967) * C5192 + (C5968 + C5969) * C5193 +
             ((C117 * C3599 + C50748 * C3605) * C696 +
              (C117 * C3603 + C50748 * C3611) * C50606) *
                 C5194) *
                C50633) *
               C50706 -
           (((C5969 + C5968) * C5194 + (C5967 + C5966) * C5193 +
             (C328 * C50606 + C327 * C696) * C5192) *
                C50633 +
            ((C5993 + C5992) * C5194 + (C5991 + C5990) * C5193 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C5192) *
                C2303) *
               C50894) *
              C583 +
          (((((C117 * C587 + C50748 * C592) * C696 +
              (C117 * C593 + C50748 * C602) * C50606) *
                 C5192 +
             (C5994 + C5995) * C5193 + (C5996 + C5997) * C5194) *
                C2303 +
            ((C620 * C696 + C621 * C50606) * C5192 + (C5978 + C5979) * C5193 +
             (C5980 + C5981) * C5194) *
                C50633) *
               C50894 -
           ((((C117 * C3602 + C50748 * C3610) * C50606 +
              (C117 * C3598 + C50748 * C3604) * C696) *
                 C5194 +
             (C5981 + C5980) * C5193 + (C5979 + C5978) * C5192) *
                C50633 +
            (((C117 * C3606 + C50748 * C3612) * C50606 +
              (C117 * C3600 + C50748 * C3608) * C696) *
                 C5194 +
             (C5997 + C5996) * C5193 + (C5995 + C5994) * C5192) *
                C2303) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50748 * C129) * C1285 +
                     (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
                     C172 * C50920 + C173 * C1287 + C174 * C1282) *
                        C50909 +
                    (C7162 + C7163 - C7164 - C7165 + C7166 + C7167) * C50828) *
                       C50937 +
                   ((C171 * C1285 + C172 * C50936 - C173 * C1286 -
                     C174 * C50920 + C175 * C1287 + C176 * C1282) *
                        C50909 +
                    (C7174 + C7175 - C7176 - C7177 + C7178 + C7179) * C50828) *
                       C50938 +
                   ((C173 * C1285 + C174 * C50936 - C175 * C1286 -
                     C176 * C50920 + C177 * C1287 + C178 * C1282) *
                        C50909 +
                    (C477 * C1285 + C478 * C50936 - C479 * C1286 -
                     C480 * C50920 + C481 * C1287 + C482 * C1282) *
                        C50828) *
                       C8143) *
                      C50694 * C1283 +
                  (((C327 * C1286 -
                     ((C117 * C293 + C50748 * C304) * C50936 +
                      (C117 * C287 + C50748 * C294) * C1285) +
                     C328 * C50920 - C329 * C1287 - C330 * C1282) *
                        C50909 +
                    (C1540 * C1286 - (C5983 * C50936 + C5982 * C1285) +
                     C1541 * C50920 - C1542 * C1287 - C1543 * C1282) *
                        C50828) *
                       C50937 +
                   ((C329 * C1286 - (C328 * C50936 + C327 * C1285) +
                     C330 * C50920 - C331 * C1287 - C332 * C1282) *
                        C50909 +
                    (C1542 * C1286 - (C1541 * C50936 + C1540 * C1285) +
                     C1543 * C50920 - C1544 * C1287 - C1545 * C1282) *
                        C50828) *
                       C50938 +
                   ((C331 * C1286 - (C330 * C50936 + C329 * C1285) +
                     C332 * C50920 - C333 * C1287 - C334 * C1282) *
                        C50909 +
                    (C1544 * C1286 - (C1543 * C50936 + C1542 * C1285) +
                     C1545 * C50920 - (C117 * C1523 + C50748 * C1524) * C1287 -
                     (C117 * C1525 + C50748 * C1526) * C1282) *
                        C50828) *
                       C8143) *
                      C50694 * C50682)) /
                (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C50909 +
            (C6984 + C6985 - C6986 - C6987) * C50828) *
               C50937 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C50909 +
            (C6992 + C6993 - C6994 - C6995) * C50828) *
               C50938 +
           ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                C50909 +
            (C477 * C1391 + C478 * C1386 - C479 * C1392 - C480 * C50611) *
                C50828) *
               C8143) *
              C50694 * C50939 +
          (((C327 * C1392 -
             ((C117 * C293 + C50748 * C304) * C1386 +
              (C117 * C287 + C50748 * C294) * C1391) +
             C328 * C50611) *
                C50909 +
            (C7000 - (C7001 + C7002) + C7003) * C50828) *
               C50937 +
           ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                C50909 +
            (C7008 - (C7009 + C7010) + C7011) * C50828) *
               C50938 +
           ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                C50909 +
            (C1544 * C1392 - (C1543 * C1386 + C1542 * C1391) + C1545 * C50611) *
                C50828) *
               C8143) *
              C50694 * C50926 +
          ((((C117 * C587 + C50748 * C592) * C1391 +
             (C117 * C593 + C50748 * C602) * C1386 - C620 * C1392 -
             C621 * C50611) *
                C50909 +
            (C5986 * C1391 + C5987 * C1386 - C5702 * C1392 - C5703 * C50611) *
                C50828) *
               C50937 +
           ((C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50611) *
                C50909 +
            (C5702 * C1391 + C5703 * C1386 - C11425 * C1392 - C11426 * C50611) *
                C50828) *
               C50938 +
           ((C622 * C1391 + C623 * C1386 - C624 * C1392 - C625 * C50611) *
                C50909 +
            (C11425 * C1391 + C11426 * C1386 -
             (C117 * C815 + C50748 * C828) * C1392 -
             (C117 * C827 + C50748 * C839) * C50611) *
                C50828) *
               C8143) *
              C50694 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C1391 +
              (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
              C172 * C50611) *
                 C50909 +
             (C6984 + C6985 - C6986 - C6987) * C50828) *
                C50937 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                 C50909 +
             (C6992 + C6993 - C6994 - C6995) * C50828) *
                C50938 +
            ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                 C50909 +
             (C12567 + C12568 - C12569 - C12570) * C50828) *
                C8143) *
               C50894 +
           (((C6986 - (C6985 + C6984) + C6987) * C50909 +
             (C6990 - (C6989 + C6988) + C6991) * C50828) *
                C50937 +
            ((C6994 - (C6993 + C6992) + C6995) * C50909 +
             (C6998 - (C6997 + C6996) + C6999) * C50828) *
                C50938 +
            ((C12569 - (C12568 + C12567) + C12570) * C50909 +
             (C981 * C1392 - (C980 * C1386 + C979 * C1391) + C982 * C50611) *
                 C50828) *
                C8143) *
               C50706) *
              C1283 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50748 * C304) * C1386 +
               (C117 * C287 + C50748 * C294) * C1391) +
              C328 * C50611) *
                 C50909 +
             (C7000 - (C7001 + C7002) + C7003) * C50828) *
                C50937 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                 C50909 +
             (C7008 - (C7009 + C7010) + C7011) * C50828) *
                C50938 +
            ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                 C50909 +
             (C12571 - (C12572 + C12573) + C12574) * C50828) *
                C8143) *
               C50894 +
           (((C7002 + C7001 - C7000 - C7003) * C50909 +
             (C7006 + C7005 - C7004 - C7007) * C50828) *
                C50937 +
            ((C7010 + C7009 - C7008 - C7011) * C50909 +
             (C7014 + C7013 - C7012 - C7015) * C50828) *
                C50938 +
            ((C12573 + C12572 - C12571 - C12574) * C50909 +
             (C5352 * C1391 + C5353 * C1386 -
              (C117 * C1080 + C50748 * C1085) * C1392 -
              (C117 * C1084 + C50748 * C1092) * C50611) *
                 C50828) *
                C8143) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C49720 +
              (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
              C172 * C50611) *
                 C50909 +
             (C6156 + C6157 - C6158 - C6159) * C50828) *
                C50937 +
            ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                 C50909 +
             (C6164 + C6165 - C6166 - C6167) * C50828) *
                C50938 +
            ((C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                 C50909 +
             (C11823 + C11824 - C11825 - C11826) * C50828) *
                C8143) *
               C1643 +
           (((C6158 - (C6157 + C6156) + C6159) * C50909 +
             (C6162 - (C6161 + C6160) + C6163) * C50828) *
                C50937 +
            ((C6166 - (C6165 + C6164) + C6167) * C50909 +
             (C6170 - (C6169 + C6168) + C6171) * C50828) *
                C50938 +
            ((C11825 - (C11824 + C11823) + C11826) * C50909 +
             (C11827 - (C11828 + C11829) + C11830) * C50828) *
                C8143) *
               C50706) *
              C1283 +
          ((((C327 * C49713 -
              ((C117 * C293 + C50748 * C304) * C50878 +
               (C117 * C287 + C50748 * C294) * C49720) +
              C328 * C50611) *
                 C50909 +
             (C7734 - (C7735 + C7736) + C7737) * C50828) *
                C50937 +
            ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                 C50909 +
             (C7742 - (C7743 + C7744) + C7745) * C50828) *
                C50938 +
            ((C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
                 C50909 +
             (C13265 - (C13266 + C13267) + C13268) * C50828) *
                C8143) *
               C1643 +
           (((C7736 + C7735 - C7734 - C7737) * C50909 +
             (C7740 + C7739 - C7738 - C7741) * C50828) *
                C50937 +
            ((C7744 + C7743 - C7742 - C7745) * C50909 +
             (C7748 + C7747 - C7746 - C7749) * C50828) *
                C50938 +
            ((C13267 + C13266 - C13265 - C13268) * C50909 +
             (C5352 * C49720 + C5353 * C50878 -
              (C117 * C1080 + C50748 * C1085) * C49713 -
              (C117 * C1084 + C50748 * C1092) * C50611) *
                 C50828) *
                C8143) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C50909 +
             (C5950 + C5951) * C50828) *
                C50937 +
            ((C171 * C696 + C172 * C50606) * C50909 +
             (C5954 + C5955) * C50828) *
                C50938 +
            ((C173 * C696 + C174 * C50606) * C50909 +
             (C11671 + C11672) * C50828) *
                C8143) *
               C1643 -
           (((C11977 + C11978) * C50828 + (C11672 + C11671) * C50909) * C8143 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C50909) * C50938 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C50909) * C50937) *
               C50706) *
              C50939 +
          ((((C5990 + C5991) * C50909 + (C5992 + C5993) * C50828) * C50937 +
            ((C5966 + C5967) * C50909 + (C5968 + C5969) * C50828) * C50938 +
            ((C11673 + C11674) * C50909 + (C11979 + C11980) * C50828) * C8143) *
               C50706 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C50909) *
                C8143 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C50909) *
                C50938 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C50909) *
                C50937) *
               C1643) *
              C50926 +
          (((((C117 * C587 + C50748 * C592) * C696 +
              (C117 * C593 + C50748 * C602) * C50606) *
                 C50909 +
             (C5994 + C5995) * C50828) *
                C50937 +
            ((C620 * C696 + C621 * C50606) * C50909 +
             (C5978 + C5979) * C50828) *
                C50938 +
            ((C622 * C696 + C623 * C50606) * C50909 +
             (C11675 + C11676) * C50828) *
                C8143) *
               C1643 -
           ((((C117 * C3324 + C50748 * C3327) * C50606 +
              (C117 * C3318 + C50748 * C3323) * C696) *
                 C50828 +
             (C11676 + C11675) * C50909) *
                C8143 +
            ((C5981 + C5980) * C50828 + (C5979 + C5978) * C50909) * C50938 +
            ((C5997 + C5996) * C50828 + (C5995 + C5994) * C50909) * C50937) *
               C50706) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C50909 +
             (C5950 + C5951) * C50828) *
                C50937 +
            ((C171 * C696 + C172 * C50606) * C50909 +
             (C5954 + C5955) * C50828) *
                C50938 +
            ((C173 * C696 + C174 * C50606) * C50909 +
             (C11671 + C11672) * C50828) *
                C8143) *
               C50940 -
           (((C11977 + C11978) * C50828 + (C11672 + C11671) * C50909) * C8143 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C50909) * C50938 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C50909) * C50937) *
               C50929 +
           ((C6352 * C50909 + (C6357 + C6356) * C50828) * C50937 +
            (C6353 * C50909 + (C6355 + C6354) * C50828) * C50938 +
            ((C11978 + C11977) * C50909 + (C12079 + C12080) * C50828) * C8143) *
               C1875) *
              C1283 +
          ((((C5990 + C5991) * C50909 + (C5992 + C5993) * C50828) * C50937 +
            ((C5966 + C5967) * C50909 + (C5968 + C5969) * C50828) * C50938 +
            ((C11673 + C11674) * C50909 + (C11979 + C11980) * C50828) * C8143) *
               C50929 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C50909) *
                C8143 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C50909) *
                C50938 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C50909) *
                C50937) *
               C50940 -
           ((((C117 * C6981 + C50748 * C6982) * C50606 +
              (C117 * C6979 + C50748 * C6980) * C696) *
                 C50828 +
             (C11980 + C11979) * C50909) *
                C8143 +
            ((C6375 + C6374) * C50828 + C6366 * C50909) * C50938 +
            ((C6373 + C6372) * C50828 + C6367 * C50909) * C50937) *
               C1875) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C50909 +
            (C6156 + C6157 - C6158 - C6159) * C50828) *
               C50937 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C50909 +
            (C6164 + C6165 - C6166 - C6167) * C50828) *
               C50938 +
           ((C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                C50909 +
            (C477 * C49720 + C478 * C50878 - C479 * C49713 - C480 * C50611) *
                C50828) *
               C8143) *
              C50694 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50748 * C304) * C50878 +
              (C117 * C287 + C50748 * C294) * C49720) +
             C328 * C50611) *
                C50909 +
            (C7734 - (C7735 + C7736) + C7737) * C50828) *
               C50937 +
           ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                C50909 +
            (C7742 - (C7743 + C7744) + C7745) * C50828) *
               C50938 +
           ((C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
                C50909 +
            (C1544 * C49713 - (C1543 * C50878 + C1542 * C49720) +
             C1545 * C50611) *
                C50828) *
               C8143) *
              C50694 * C583 +
          ((((C117 * C587 + C50748 * C592) * C49720 +
             (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
             C621 * C50611) *
                C50909 +
            (C5986 * C49720 + C5987 * C50878 - C5702 * C49713 -
             C5703 * C50611) *
                C50828) *
               C50937 +
           ((C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
                C50909 +
            (C5702 * C49720 + C5703 * C50878 - C11425 * C49713 -
             C11426 * C50611) *
                C50828) *
               C50938 +
           ((C622 * C49720 + C623 * C50878 - C624 * C49713 - C625 * C50611) *
                C50909 +
            (C11425 * C49720 + C11426 * C50878 -
             (C117 * C815 + C50748 * C828) * C49713 -
             (C117 * C827 + C50748 * C839) * C50611) *
                C50828) *
               C8143) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C118 +
            (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50909 +
           (C5536 * C118 + C5537 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50828) *
              C50937 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50909 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50828) *
              C50938 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C50909 +
           (C477 * C118 + C478 * C106 - C479 * C119 - C480 * C107 +
            C481 * C120 + C482 * C108 - (C117 * C439 + C50748 * C450) * C121 -
            (C117 * C451 + C50748 * C457) * C109) *
               C50828) *
              C8143) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C50909 +
            (C6156 + C6157 - C6158 - C6159) * C50828) *
               C50937 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C50909 +
            (C6164 + C6165 - C6166 - C6167) * C50828) *
               C50938 +
           ((C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                C50909 +
            (C11823 + C11824 - C11825 - C11826) * C50828) *
               C8143) *
              C941 +
          (((C6158 - (C6157 + C6156) + C6159) * C50909 +
            (C6162 - (C6161 + C6160) + C6163) * C50828) *
               C50937 +
           ((C6166 - (C6165 + C6164) + C6167) * C50909 +
            (C6170 - (C6169 + C6168) + C6171) * C50828) *
               C50938 +
           ((C11825 - (C11824 + C11823) + C11826) * C50909 +
            (C11827 - (C11828 + C11829) + C11830) * C50828) *
               C8143) *
              C942 +
          ((C6196 * C50909 + (C6195 + C6194 - C6172 - C6177) * C50828) *
               C50937 +
           (C6197 * C50909 + (C6180 + C6179 - C6178 - C6181) * C50828) *
               C50938 +
           ((C11829 + C11828 - C11827 - C11830) * C50909 +
            (C5542 * C49720 + C5543 * C50878 -
             (C117 * C1166 + C50748 * C1171) * C49713 -
             (C117 * C1170 + C50748 * C1178) * C50611) *
                C50828) *
               C8143) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C50909 +
            (C5950 + C5951) * C50828) *
               C50937 +
           ((C171 * C696 + C172 * C50606) * C50909 + (C5954 + C5955) * C50828) *
               C50938 +
           ((C173 * C696 + C174 * C50606) * C50909 +
            (C477 * C696 + C478 * C50606) * C50828) *
               C8143) *
              C50694 * C692 -
          (((C1543 * C50606 + C1542 * C696) * C50828 +
            (C330 * C50606 + C329 * C696) * C50909) *
               C8143 +
           ((C5967 + C5966) * C50828 + (C328 * C50606 + C327 * C696) * C50909) *
               C50938 +
           ((C5991 + C5990) * C50828 + ((C117 * C293 + C50748 * C304) * C50606 +
                                        (C117 * C287 + C50748 * C294) * C696) *
                                           C50909) *
               C50937) *
              C50694 * C693 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C50909 +
            (C5994 + C5995) * C50828) *
               C50937 +
           ((C620 * C696 + C621 * C50606) * C50909 + (C5978 + C5979) * C50828) *
               C50938 +
           ((C622 * C696 + C623 * C50606) * C50909 +
            (C11425 * C696 + C11426 * C50606) * C50828) *
               C8143) *
              C50694 * C694 -
          ((((C117 * C4102 + C50748 * C4103) * C50606 +
             (C117 * C4100 + C50748 * C4101) * C696) *
                C50828 +
            ((C117 * C703 + C50748 * C710) * C50606 +
             (C117 * C698 + C50748 * C704) * C696) *
                C50909) *
               C8143 +
           (((C117 * C3161 + C50748 * C3167) * C50606 +
             (C117 * C3155 + C50748 * C3160) * C696) *
                C50828 +
            ((C117 * C705 + C50748 * C711) * C50606 +
             (C117 * C699 + C50748 * C706) * C696) *
                C50909) *
               C50938 +
           (((C117 * C3159 + C50748 * C3166) * C50606 +
             (C117 * C3154 + C50748 * C3158) * C696) *
                C50828 +
            ((C117 * C707 + C50748 * C712) * C50606 +
             (C117 * C700 + C50748 * C708) * C696) *
                C50909) *
               C50937) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50909 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50828) *
               C50937 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50909 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50828) *
               C50938 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C50909 +
            (C477 * C283 + C478 * C278 - C479 * C284 - C480 * C279 +
             C481 * C285 + C482 * C280) *
                C50828) *
               C8143) *
              C50694 * C50893 +
          (((C327 * C284 -
             ((C117 * C293 + C50748 * C304) * C278 +
              (C117 * C287 + C50748 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C50909 +
            (C1540 * C284 - (C5983 * C278 + C5982 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C50828) *
               C50937 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C50909 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50828) *
               C50938 +
           ((C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
             C333 * C285 - C334 * C280) *
                C50909 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50748 * C1524) * C285 -
             (C117 * C1525 + C50748 * C1526) * C280) *
                C50828) *
               C8143) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C50909 +
             (C5950 + C5951) * C50828) *
                C50937 +
            ((C171 * C696 + C172 * C50606) * C50909 +
             (C5954 + C5955) * C50828) *
                C50938 +
            ((C173 * C696 + C174 * C50606) * C50909 +
             (C11671 + C11672) * C50828) *
                C8143) *
               C941 -
           (((C11977 + C11978) * C50828 + (C11672 + C11671) * C50909) * C8143 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C50909) * C50938 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C50909) * C50937) *
               C942 +
           ((C6352 * C50909 + (C6357 + C6356) * C50828) * C50937 +
            (C6353 * C50909 + (C6355 + C6354) * C50828) * C50938 +
            ((C11978 + C11977) * C50909 +
             (C5542 * C696 + C5543 * C50606) * C50828) *
                C8143) *
               C943) *
              C50893 +
          ((((C5990 + C5991) * C50909 + (C5992 + C5993) * C50828) * C50937 +
            ((C5966 + C5967) * C50909 + (C5968 + C5969) * C50828) * C50938 +
            ((C11673 + C11674) * C50909 + (C11979 + C11980) * C50828) * C8143) *
               C942 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C50909) *
                C8143 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C50909) *
                C50938 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C50909) *
                C50937) *
               C941 -
           ((((C117 * C6981 + C50748 * C6982) * C50606 +
              (C117 * C6979 + C50748 * C6980) * C696) *
                 C50828 +
             (C11980 + C11979) * C50909) *
                C8143 +
            ((C6375 + C6374) * C50828 + C6366 * C50909) * C50938 +
            ((C6373 + C6372) * C50828 + C6367 * C50909) * C50937) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C50909 +
             (C5950 + C5951) * C50828) *
                C50937 +
            ((C171 * C696 + C172 * C50606) * C50909 +
             (C5954 + C5955) * C50828) *
                C50938 +
            ((C173 * C696 + C174 * C50606) * C50909 +
             (C11671 + C11672) * C50828) *
                C8143) *
               C50894 -
           (((C980 * C50606 + C979 * C696) * C50828 +
             (C11672 + C11671) * C50909) *
                C8143 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C50909) * C50938 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C50909) * C50937) *
               C50706) *
              C582 +
          ((((C5990 + C5991) * C50909 + (C5992 + C5993) * C50828) * C50937 +
            ((C5966 + C5967) * C50909 + (C5968 + C5969) * C50828) * C50938 +
            ((C11673 + C11674) * C50909 +
             (C5352 * C696 + C5353 * C50606) * C50828) *
                C8143) *
               C50706 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C50909) *
                C8143 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C50909) *
                C50938 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C50909) *
                C50937) *
               C50894) *
              C583 +
          (((((C117 * C587 + C50748 * C592) * C696 +
              (C117 * C593 + C50748 * C602) * C50606) *
                 C50909 +
             (C5994 + C5995) * C50828) *
                C50937 +
            ((C620 * C696 + C621 * C50606) * C50909 +
             (C5978 + C5979) * C50828) *
                C50938 +
            ((C622 * C696 + C623 * C50606) * C50909 +
             (C11675 + C11676) * C50828) *
                C8143) *
               C50894 -
           ((((C117 * C3324 + C50748 * C3327) * C50606 +
              (C117 * C3318 + C50748 * C3323) * C696) *
                 C50828 +
             (C11676 + C11675) * C50909) *
                C8143 +
            ((C5981 + C5980) * C50828 + (C5979 + C5978) * C50909) * C50938 +
            ((C5997 + C5996) * C50828 + (C5995 + C5994) * C50909) * C50937) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50909 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50828) *
               C50937 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50909 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50828) *
               C50938 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C50909 +
            (C11269 + C11270 - C11271 - C11272 + C11273 + C11274) * C50828) *
               C8143) *
              C50894 +
          (((C5504 - (C5545 + C5544) + C5505 - C5506 - C5507) * C50909 +
            (C5512 - (C5547 + C5546) + C5513 - C5514 - C5515) * C50828) *
               C50937 +
           ((C5518 - (C5517 + C5516) + C5519 - C5520 - C5521) * C50909 +
            (C5524 - (C5523 + C5522) + C5525 - C5526 - C5527) * C50828) *
               C50938 +
           ((C11271 - (C11270 + C11269) + C11272 - C11273 - C11274) * C50909 +
            (C981 * C284 - (C980 * C278 + C979 * C283) + C982 * C279 -
             (C117 * C948 + C50748 * C957) * C285 -
             (C117 * C958 + C50748 * C963) * C280) *
                C50828) *
               C8143) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C50909 +
            (C5950 + C5951) * C50828) *
               C50937 +
           ((C171 * C696 + C172 * C50606) * C50909 + (C5954 + C5955) * C50828) *
               C50938 +
           ((C173 * C696 + C174 * C50606) * C50909 +
            (C11671 + C11672) * C50828) *
               C8143) *
              C1162 -
          (((C11977 + C11978) * C50828 + (C11672 + C11671) * C50909) * C8143 +
           ((C5957 + C5956) * C50828 + (C5955 + C5954) * C50909) * C50938 +
           ((C5953 + C5952) * C50828 + (C5951 + C5950) * C50909) * C50937) *
              C1163 +
          ((C6352 * C50909 + (C6357 + C6356) * C50828) * C50937 +
           (C6353 * C50909 + (C6355 + C6354) * C50828) * C50938 +
           ((C11978 + C11977) * C50909 + (C12079 + C12080) * C50828) * C8143) *
              C1164 -
          ((((C117 * C6151 + C50748 * C6154) * C50606 +
             (C117 * C6145 + C50748 * C6150) * C696) *
                C50828 +
            (C12080 + C12079) * C50909) *
               C8143 +
           ((C6489 + C6488) * C50828 + C6482 * C50909) * C50938 +
           ((C6493 + C6492) * C50828 + C6483 * C50909) * C50937) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1285 +
             (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
             C172 * C50920 + C173 * C1287 + C174 * C1282) *
                C50909 +
            (C7162 + C7163 - C7164 - C7165 + C7166 + C7167) * C50828) *
               C50937 +
           ((C171 * C1285 + C172 * C50936 - C173 * C1286 - C174 * C50920 +
             C175 * C1287 + C176 * C1282) *
                C50909 +
            (C7174 + C7175 - C7176 - C7177 + C7178 + C7179) * C50828) *
               C50938 +
           ((C173 * C1285 + C174 * C50936 - C175 * C1286 - C176 * C50920 +
             C177 * C1287 + C178 * C1282) *
                C50909 +
            (C12721 + C12722 - C12723 - C12724 + C12725 + C12726) * C50828) *
               C8143) *
              C1643 +
          (((C7164 - (C7163 + C7162) + C7165 - C7166 - C7167) * C50909 +
            (C7170 - (C7169 + C7168) + C7171 - C7172 - C7173) * C50828) *
               C50937 +
           ((C7176 - (C7175 + C7174) + C7177 - C7178 - C7179) * C50909 +
            (C7182 - (C7181 + C7180) + C7183 - C7184 - C7185) * C50828) *
               C50938 +
           ((C12723 - (C12722 + C12721) + C12724 - C12725 - C12726) * C50909 +
            (C981 * C1286 - (C980 * C50936 + C979 * C1285) + C982 * C50920 -
             (C117 * C948 + C50748 * C957) * C1287 -
             (C117 * C958 + C50748 * C963) * C1282) *
                C50828) *
               C8143) *
              C50706) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C1391 +
              (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
              C172 * C50611) *
                 C50909 +
             (C6984 + C6985 - C6986 - C6987) * C50828) *
                C50937 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                 C50909 +
             (C6992 + C6993 - C6994 - C6995) * C50828) *
                C50938 +
            ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                 C50909 +
             (C12567 + C12568 - C12569 - C12570) * C50828) *
                C8143) *
               C1643 +
           (((C6986 - (C6985 + C6984) + C6987) * C50909 +
             (C6990 - (C6989 + C6988) + C6991) * C50828) *
                C50937 +
            ((C6994 - (C6993 + C6992) + C6995) * C50909 +
             (C6998 - (C6997 + C6996) + C6999) * C50828) *
                C50938 +
            ((C12569 - (C12568 + C12567) + C12570) * C50909 +
             (C981 * C1392 - (C980 * C1386 + C979 * C1391) + C982 * C50611) *
                 C50828) *
                C8143) *
               C50706) *
              C50893 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50748 * C304) * C1386 +
               (C117 * C287 + C50748 * C294) * C1391) +
              C328 * C50611) *
                 C50909 +
             (C7000 - (C7001 + C7002) + C7003) * C50828) *
                C50937 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                 C50909 +
             (C7008 - (C7009 + C7010) + C7011) * C50828) *
                C50938 +
            ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                 C50909 +
             (C12571 - (C12572 + C12573) + C12574) * C50828) *
                C8143) *
               C1643 +
           (((C7002 + C7001 - C7000 - C7003) * C50909 +
             (C7006 + C7005 - C7004 - C7007) * C50828) *
                C50937 +
            ((C7010 + C7009 - C7008 - C7011) * C50909 +
             (C7014 + C7013 - C7012 - C7015) * C50828) *
                C50938 +
            ((C12573 + C12572 - C12571 - C12574) * C50909 +
             (C5352 * C1391 + C5353 * C1386 -
              (C117 * C1080 + C50748 * C1085) * C1392 -
              (C117 * C1084 + C50748 * C1092) * C50611) *
                 C50828) *
                C8143) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C50909 +
            (C6984 + C6985 - C6986 - C6987) * C50828) *
               C50937 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C50909 +
            (C6992 + C6993 - C6994 - C6995) * C50828) *
               C50938 +
           ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                C50909 +
            (C12567 + C12568 - C12569 - C12570) * C50828) *
               C8143) *
              C50940 +
          (((C6986 - (C6985 + C6984) + C6987) * C50909 +
            (C6990 - (C6989 + C6988) + C6991) * C50828) *
               C50937 +
           ((C6994 - (C6993 + C6992) + C6995) * C50909 +
            (C6998 - (C6997 + C6996) + C6999) * C50828) *
               C50938 +
           ((C12569 - (C12568 + C12567) + C12570) * C50909 +
            (C13067 - (C13068 + C13069) + C13070) * C50828) *
               C8143) *
              C50929 +
          ((C7538 * C50909 + (C7530 + C7529 - C7528 - C7531) * C50828) *
               C50937 +
           (C7539 * C50909 + (C7534 + C7533 - C7532 - C7535) * C50828) *
               C50938 +
           ((C13069 + C13068 - C13067 - C13070) * C50909 +
            (C5542 * C1391 + C5543 * C1386 -
             (C117 * C1166 + C50748 * C1171) * C1392 -
             (C117 * C1170 + C50748 * C1178) * C50611) *
                C50828) *
               C8143) *
              C1875) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C118 +
            (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50909 +
           (C5536 * C118 + C5537 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50828) *
              C50937 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50909 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50828) *
              C50938 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C50909 +
           (C477 * C118 + C478 * C106 - C479 * C119 - C480 * C107 +
            C481 * C120 + C482 * C108 - (C117 * C439 + C50748 * C450) * C121 -
            (C117 * C451 + C50748 * C457) * C109) *
               C50828) *
              C8143) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C50909 +
            (C6156 + C6157 - C6158 - C6159) * C50828) *
               C50937 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C50909 +
            (C6164 + C6165 - C6166 - C6167) * C50828) *
               C50938 +
           ((C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                C50909 +
            (C477 * C49720 + C478 * C50878 - C479 * C49713 - C480 * C50611) *
                C50828) *
               C8143) *
              C50694 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50748 * C304) * C50878 +
              (C117 * C287 + C50748 * C294) * C49720) +
             C328 * C50611) *
                C50909 +
            (C7734 - (C7735 + C7736) + C7737) * C50828) *
               C50937 +
           ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                C50909 +
            (C7742 - (C7743 + C7744) + C7745) * C50828) *
               C50938 +
           ((C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
                C50909 +
            (C1544 * C49713 - (C1543 * C50878 + C1542 * C49720) +
             C1545 * C50611) *
                C50828) *
               C8143) *
              C50694 * C583 +
          ((((C117 * C587 + C50748 * C592) * C49720 +
             (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
             C621 * C50611) *
                C50909 +
            (C5986 * C49720 + C5987 * C50878 - C5702 * C49713 -
             C5703 * C50611) *
                C50828) *
               C50937 +
           ((C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
                C50909 +
            (C5702 * C49720 + C5703 * C50878 - C11425 * C49713 -
             C11426 * C50611) *
                C50828) *
               C50938 +
           ((C622 * C49720 + C623 * C50878 - C624 * C49713 - C625 * C50611) *
                C50909 +
            (C11425 * C49720 + C11426 * C50878 -
             (C117 * C815 + C50748 * C828) * C49713 -
             (C117 * C827 + C50748 * C839) * C50611) *
                C50828) *
               C8143) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50909 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50828) *
               C50937 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50909 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50828) *
               C50938 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C50909 +
            (C477 * C283 + C478 * C278 - C479 * C284 - C480 * C279 +
             C481 * C285 + C482 * C280) *
                C50828) *
               C8143) *
              C50694 * C50893 +
          (((C327 * C284 -
             ((C117 * C293 + C50748 * C304) * C278 +
              (C117 * C287 + C50748 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C50909 +
            (C1540 * C284 - (C5983 * C278 + C5982 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C50828) *
               C50937 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C50909 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50828) *
               C50938 +
           ((C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
             C333 * C285 - C334 * C280) *
                C50909 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50748 * C1524) * C285 -
             (C117 * C1525 + C50748 * C1526) * C280) *
                C50828) *
               C8143) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C50909 +
            (C5950 + C5951) * C50828) *
               C50937 +
           ((C171 * C696 + C172 * C50606) * C50909 + (C5954 + C5955) * C50828) *
               C50938 +
           ((C173 * C696 + C174 * C50606) * C50909 +
            (C477 * C696 + C478 * C50606) * C50828) *
               C8143) *
              C50694 * C692 -
          (((C1543 * C50606 + C1542 * C696) * C50828 +
            (C330 * C50606 + C329 * C696) * C50909) *
               C8143 +
           ((C5967 + C5966) * C50828 + (C328 * C50606 + C327 * C696) * C50909) *
               C50938 +
           ((C5991 + C5990) * C50828 + ((C117 * C293 + C50748 * C304) * C50606 +
                                        (C117 * C287 + C50748 * C294) * C696) *
                                           C50909) *
               C50937) *
              C50694 * C693 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C50909 +
            (C5994 + C5995) * C50828) *
               C50937 +
           ((C620 * C696 + C621 * C50606) * C50909 + (C5978 + C5979) * C50828) *
               C50938 +
           ((C622 * C696 + C623 * C50606) * C50909 +
            (C11425 * C696 + C11426 * C50606) * C50828) *
               C8143) *
              C50694 * C694 -
          ((((C117 * C4102 + C50748 * C4103) * C50606 +
             (C117 * C4100 + C50748 * C4101) * C696) *
                C50828 +
            ((C117 * C703 + C50748 * C710) * C50606 +
             (C117 * C698 + C50748 * C704) * C696) *
                C50909) *
               C8143 +
           (((C117 * C3161 + C50748 * C3167) * C50606 +
             (C117 * C3155 + C50748 * C3160) * C696) *
                C50828 +
            ((C117 * C705 + C50748 * C711) * C50606 +
             (C117 * C699 + C50748 * C706) * C696) *
                C50909) *
               C50938 +
           (((C117 * C3159 + C50748 * C3166) * C50606 +
             (C117 * C3154 + C50748 * C3158) * C696) *
                C50828 +
            ((C117 * C707 + C50748 * C712) * C50606 +
             (C117 * C700 + C50748 * C708) * C696) *
                C50909) *
               C50937) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50909 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50828) *
               C50937 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50909 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50828) *
               C50938 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C50909 +
            (C11269 + C11270 - C11271 - C11272 + C11273 + C11274) * C50828) *
               C8143) *
              C50894 +
          (((C5504 - (C5545 + C5544) + C5505 - C5506 - C5507) * C50909 +
            (C5512 - (C5547 + C5546) + C5513 - C5514 - C5515) * C50828) *
               C50937 +
           ((C5518 - (C5517 + C5516) + C5519 - C5520 - C5521) * C50909 +
            (C5524 - (C5523 + C5522) + C5525 - C5526 - C5527) * C50828) *
               C50938 +
           ((C11271 - (C11270 + C11269) + C11272 - C11273 - C11274) * C50909 +
            (C981 * C284 - (C980 * C278 + C979 * C283) + C982 * C279 -
             (C117 * C948 + C50748 * C957) * C285 -
             (C117 * C958 + C50748 * C963) * C280) *
                C50828) *
               C8143) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C50909 +
             (C5950 + C5951) * C50828) *
                C50937 +
            ((C171 * C696 + C172 * C50606) * C50909 +
             (C5954 + C5955) * C50828) *
                C50938 +
            ((C173 * C696 + C174 * C50606) * C50909 +
             (C11671 + C11672) * C50828) *
                C8143) *
               C50894 -
           (((C980 * C50606 + C979 * C696) * C50828 +
             (C11672 + C11671) * C50909) *
                C8143 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C50909) * C50938 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C50909) * C50937) *
               C50706) *
              C582 +
          ((((C5990 + C5991) * C50909 + (C5992 + C5993) * C50828) * C50937 +
            ((C5966 + C5967) * C50909 + (C5968 + C5969) * C50828) * C50938 +
            ((C11673 + C11674) * C50909 +
             (C5352 * C696 + C5353 * C50606) * C50828) *
                C8143) *
               C50706 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C50909) *
                C8143 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C50909) *
                C50938 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C50909) *
                C50937) *
               C50894) *
              C583 +
          (((((C117 * C587 + C50748 * C592) * C696 +
              (C117 * C593 + C50748 * C602) * C50606) *
                 C50909 +
             (C5994 + C5995) * C50828) *
                C50937 +
            ((C620 * C696 + C621 * C50606) * C50909 +
             (C5978 + C5979) * C50828) *
                C50938 +
            ((C622 * C696 + C623 * C50606) * C50909 +
             (C11675 + C11676) * C50828) *
                C8143) *
               C50894 -
           ((((C117 * C3324 + C50748 * C3327) * C50606 +
              (C117 * C3318 + C50748 * C3323) * C696) *
                 C50828 +
             (C11676 + C11675) * C50909) *
                C8143 +
            ((C5981 + C5980) * C50828 + (C5979 + C5978) * C50909) * C50938 +
            ((C5997 + C5996) * C50828 + (C5995 + C5994) * C50909) * C50937) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C1285 +
            (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
            C172 * C50920 + C173 * C1287 + C174 * C1282) *
               C50764 * C111 +
           (C171 * C1285 + C172 * C50936 - C173 * C1286 - C174 * C50920 +
            C175 * C1287 + C176 * C1282) *
               C50764 * C112 +
           (C173 * C1285 + C174 * C50936 - C175 * C1286 - C176 * C50920 +
            C177 * C1287 + C178 * C1282) *
               C50764 * C113 +
           (C175 * C1285 + C176 * C50936 - C177 * C1286 - C178 * C50920 +
            C179 * C1287 + C180 * C1282) *
               C50764 * C114) *
              C50694 * C1283 +
          ((C327 * C1286 -
            ((C117 * C293 + C50748 * C304) * C50936 +
             (C117 * C287 + C50748 * C294) * C1285) +
            C328 * C50920 - C329 * C1287 - C330 * C1282) *
               C50764 * C111 +
           (C329 * C1286 - (C328 * C50936 + C327 * C1285) + C330 * C50920 -
            C331 * C1287 - C332 * C1282) *
               C50764 * C112 +
           (C331 * C1286 - (C330 * C50936 + C329 * C1285) + C332 * C50920 -
            C333 * C1287 - C334 * C1282) *
               C50764 * C113 +
           (C333 * C1286 - (C332 * C50936 + C331 * C1285) + C334 * C50920 -
            (C117 * C291 + C50748 * C302) * C1287 -
            (C117 * C303 + C50748 * C309) * C1282) *
               C50764 * C114) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1285 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50936 -
            (C2345 + C2346 + C2347) * C1286 - (C2348 + C2349 + C2350) * C50920 +
            (C2351 + C2352 + C2353) * C1287 + (C2354 + C2355 + C2356) * C1282) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C1285 + (C2350 + C2349 + C2348) * C50936 -
            (C2353 + C2352 + C2351) * C1286 - (C2356 + C2355 + C2354) * C50920 +
            (C2359 + C2358 + C2357) * C1287 + (C2362 + C2361 + C2360) * C1282) *
               C50764 * C50633) *
              C50694 * C1283 +
          (((C2533 + C2534 + C2535) * C1286 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50936 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C1285) +
            (C2536 + C2537 + C2538) * C50920 - (C2539 + C2540 + C2541) * C1287 -
            (C2542 + C2543 + C2544) * C1282) *
               C50764 * C2303 +
           ((C2541 + C2540 + C2539) * C1286 -
            ((C2538 + C2537 + C2536) * C50936 +
             (C2535 + C2534 + C2533) * C1285) +
            (C2544 + C2543 + C2542) * C50920 -
            (C2307 * C697 + C2302 * C702 + C2306 * C590 + C2301 * C598 +
             C2305 * C289 + C2300 * C298) *
                C1287 -
            (C2307 * C701 + C2302 * C709 + C2306 * C599 + C2301 * C605 +
             C2305 * C299 + C2300 * C307) *
                C1282) *
               C50764 * C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C1391 +
            (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
            C172 * C50611) *
               C50764 * C111 +
           (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
               C50764 * C112 +
           (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
               C50764 * C113 +
           (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50611) *
               C50764 * C114) *
              C50694 * C50939 +
          ((C327 * C1392 -
            ((C117 * C293 + C50748 * C304) * C1386 +
             (C117 * C287 + C50748 * C294) * C1391) +
            C328 * C50611) *
               C50764 * C111 +
           (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
               C50764 * C112 +
           (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
               C50764 * C113 +
           (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50611) *
               C50764 * C114) *
              C50694 * C50926 +
          (((C117 * C587 + C50748 * C592) * C1391 +
            (C117 * C593 + C50748 * C602) * C1386 - C620 * C1392 -
            C621 * C50611) *
               C50764 * C111 +
           (C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50611) *
               C50764 * C112 +
           (C622 * C1391 + C623 * C1386 - C624 * C1392 - C625 * C50611) *
               C50764 * C113 +
           (C624 * C1391 + C625 * C1386 -
            (C117 * C591 + C50748 * C600) * C1392 -
            (C117 * C601 + C50748 * C606) * C50611) *
               C50764 * C114) *
              C50694 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1391 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C1386 -
            (C2345 + C2346 + C2347) * C1392 -
            (C2348 + C2349 + C2350) * C50611) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C1391 + (C2350 + C2349 + C2348) * C1386 -
            (C2353 + C2352 + C2351) * C1392 -
            (C2356 + C2355 + C2354) * C50611) *
               C50764 * C50633) *
              C50694 * C50939 +
          (((C2533 + C2534 + C2535) * C1392 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C1386 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C1391) +
            (C2536 + C2537 + C2538) * C50611) *
               C50764 * C2303 +
           ((C2541 + C2540 + C2539) * C1392 -
            ((C2538 + C2537 + C2536) * C1386 +
             (C2535 + C2534 + C2533) * C1391) +
            (C2544 + C2543 + C2542) * C50611) *
               C50764 * C50633) *
              C50694 * C50926 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C1391 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C1386 -
            (C2897 + C2898 + C2899) * C1392 -
            (C2900 + C2901 + C2902) * C50611) *
               C50764 * C2303 +
           ((C2899 + C2898 + C2897) * C1391 + (C2902 + C2901 + C2900) * C1386 -
            (C2307 * C2874 + C2302 * C2879 + C2306 * C698 + C2301 * C704 +
             C2305 * C589 + C2300 * C596) *
                C1392 -
            (C2307 * C2880 + C2302 * C2883 + C2306 * C703 + C2301 * C710 +
             C2305 * C597 + C2300 * C604) *
                C50611) *
               C50764 * C50633) *
              C50694 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C50764 * C111 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C50764 * C112 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                C50764 * C113 +
            (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50611) *
                C50764 * C114) *
               C50894 +
           ((C475 * C1392 -
             ((C117 * C441 + C50748 * C452) * C1386 +
              (C117 * C435 + C50748 * C442) * C1391) +
             C476 * C50611) *
                C50764 * C111 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50611) *
                C50764 * C112 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50611) *
                C50764 * C113 +
            (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50611) *
                C50764 * C114) *
               C50706) *
              C1283 +
          (((C327 * C1392 -
             ((C117 * C293 + C50748 * C304) * C1386 +
              (C117 * C287 + C50748 * C294) * C1391) +
             C328 * C50611) *
                C50764 * C111 +
            (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                C50764 * C112 +
            (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                C50764 * C113 +
            (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50611) *
                C50764 * C114) *
               C50894 +
           (((C117 * C811 + C50748 * C819) * C1391 +
             (C117 * C820 + C50748 * C835) * C1386 - C1540 * C1392 -
             C1541 * C50611) *
                C50764 * C111 +
            (C1540 * C1391 + C1541 * C1386 - C1542 * C1392 - C1543 * C50611) *
                C50764 * C112 +
            (C1542 * C1391 + C1543 * C1386 - C1544 * C1392 - C1545 * C50611) *
                C50764 * C113 +
            (C1544 * C1391 + C1545 * C1386 -
             (C117 * C1523 + C50748 * C1524) * C1392 -
             (C117 * C1525 + C50748 * C1526) * C50611) *
                C50764 * C114) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C1391 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C1386 -
             (C2345 + C2346 + C2347) * C1392 -
             (C2348 + C2349 + C2350) * C50611) *
                C50764 * C2303 +
            ((C2347 + C2346 + C2345) * C1391 + (C2350 + C2349 + C2348) * C1386 -
             (C2353 + C2352 + C2351) * C1392 -
             (C2356 + C2355 + C2354) * C50611) *
                C50764 * C50633) *
               C50894 +
           (((C2715 + C2716 + C2717) * C1392 -
             ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
               C2305 * C441 + C2300 * C452) *
                  C1386 +
              (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
               C2305 * C435 + C2300 * C442) *
                  C1391) +
             (C2718 + C2719 + C2720) * C50611) *
                C50764 * C2303 +
            ((C2723 + C2722 + C2721) * C1392 -
             ((C2720 + C2719 + C2718) * C1386 +
              (C2717 + C2716 + C2715) * C1391) +
             (C2726 + C2725 + C2724) * C50611) *
                C50764 * C50633) *
               C50706) *
              C1283 +
          ((((C2533 + C2534 + C2535) * C1392 -
             ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
               C2305 * C293 + C2300 * C304) *
                  C1386 +
              (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
               C2305 * C287 + C2300 * C294) *
                  C1391) +
             (C2536 + C2537 + C2538) * C50611) *
                C50764 * C2303 +
            ((C2541 + C2540 + C2539) * C1392 -
             ((C2538 + C2537 + C2536) * C1386 +
              (C2535 + C2534 + C2533) * C1391) +
             (C2544 + C2543 + C2542) * C50611) *
                C50764 * C50633) *
               C50894 +
           (((C2305 * C811 + C2300 * C819 + C2306 * C818 + C2301 * C834 +
              C2307 * C3154 + C2302 * C3158) *
                 C1391 +
             (C2305 * C820 + C2300 * C835 + C2306 * C833 + C2301 * C842 +
              C2307 * C3159 + C2302 * C3166) *
                 C1386 -
             (C4117 + C4118 + C4119) * C1392 -
             (C4120 + C4121 + C4122) * C50611) *
                C50764 * C2303 +
            ((C4119 + C4118 + C4117) * C1391 + (C4122 + C4121 + C4120) * C1386 -
             (C2307 * C4100 + C2302 * C4101 + C2306 * C816 + C2301 * C830 +
              C2305 * C813 + C2300 * C823) *
                 C1392 -
             (C2307 * C4102 + C2302 * C4103 + C2306 * C829 + C2301 * C840 +
              C2305 * C824 + C2300 * C837) *
                 C50611) *
                C50764 * C50633) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C50764 * C111 +
            (C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C50764 * C112 +
            (C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                C50764 * C113 +
            (C175 * C49720 + C176 * C50878 - C177 * C49713 - C178 * C50611) *
                C50764 * C114) *
               C1643 +
           ((C475 * C49713 -
             ((C117 * C441 + C50748 * C452) * C50878 +
              (C117 * C435 + C50748 * C442) * C49720) +
             C476 * C50611) *
                C50764 * C111 +
            (C477 * C49713 - (C476 * C50878 + C475 * C49720) + C478 * C50611) *
                C50764 * C112 +
            (C479 * C49713 - (C478 * C50878 + C477 * C49720) + C480 * C50611) *
                C50764 * C113 +
            (C481 * C49713 - (C480 * C50878 + C479 * C49720) + C482 * C50611) *
                C50764 * C114) *
               C50706) *
              C1283 +
          (((C327 * C49713 -
             ((C117 * C293 + C50748 * C304) * C50878 +
              (C117 * C287 + C50748 * C294) * C49720) +
             C328 * C50611) *
                C50764 * C111 +
            (C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                C50764 * C112 +
            (C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
                C50764 * C113 +
            (C333 * C49713 - (C332 * C50878 + C331 * C49720) + C334 * C50611) *
                C50764 * C114) *
               C1643 +
           (((C117 * C811 + C50748 * C819) * C49720 +
             (C117 * C820 + C50748 * C835) * C50878 - C1540 * C49713 -
             C1541 * C50611) *
                C50764 * C111 +
            (C1540 * C49720 + C1541 * C50878 - C1542 * C49713 -
             C1543 * C50611) *
                C50764 * C112 +
            (C1542 * C49720 + C1543 * C50878 - C1544 * C49713 -
             C1545 * C50611) *
                C50764 * C113 +
            (C1544 * C49720 + C1545 * C50878 -
             (C117 * C1523 + C50748 * C1524) * C49713 -
             (C117 * C1525 + C50748 * C1526) * C50611) *
                C50764 * C114) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C49720 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50878 -
             (C2345 + C2346 + C2347) * C49713 -
             (C2348 + C2349 + C2350) * C50611) *
                C50764 * C2303 +
            ((C2347 + C2346 + C2345) * C49720 +
             (C2350 + C2349 + C2348) * C50878 -
             (C2353 + C2352 + C2351) * C49713 -
             (C2356 + C2355 + C2354) * C50611) *
                C50764 * C50633) *
               C1643 +
           (((C2715 + C2716 + C2717) * C49713 -
             ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
               C2305 * C441 + C2300 * C452) *
                  C50878 +
              (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
               C2305 * C435 + C2300 * C442) *
                  C49720) +
             (C2718 + C2719 + C2720) * C50611) *
                C50764 * C2303 +
            ((C2723 + C2722 + C2721) * C49713 -
             ((C2720 + C2719 + C2718) * C50878 +
              (C2717 + C2716 + C2715) * C49720) +
             (C2726 + C2725 + C2724) * C50611) *
                C50764 * C50633) *
               C50706) *
              C1283 +
          ((((C2533 + C2534 + C2535) * C49713 -
             ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
               C2305 * C293 + C2300 * C304) *
                  C50878 +
              (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
               C2305 * C287 + C2300 * C294) *
                  C49720) +
             (C2536 + C2537 + C2538) * C50611) *
                C50764 * C2303 +
            ((C2541 + C2540 + C2539) * C49713 -
             ((C2538 + C2537 + C2536) * C50878 +
              (C2535 + C2534 + C2533) * C49720) +
             (C2544 + C2543 + C2542) * C50611) *
                C50764 * C50633) *
               C1643 +
           (((C2305 * C811 + C2300 * C819 + C2306 * C818 + C2301 * C834 +
              C2307 * C3154 + C2302 * C3158) *
                 C49720 +
             (C2305 * C820 + C2300 * C835 + C2306 * C833 + C2301 * C842 +
              C2307 * C3159 + C2302 * C3166) *
                 C50878 -
             (C4117 + C4118 + C4119) * C49713 -
             (C4120 + C4121 + C4122) * C50611) *
                C50764 * C2303 +
            ((C4119 + C4118 + C4117) * C49720 +
             (C4122 + C4121 + C4120) * C50878 -
             (C2307 * C4100 + C2302 * C4101 + C2306 * C816 + C2301 * C830 +
              C2305 * C813 + C2300 * C823) *
                 C49713 -
             (C2307 * C4102 + C2302 * C4103 + C2306 * C829 + C2301 * C840 +
              C2305 * C824 + C2300 * C837) *
                 C50611) *
                C50764 * C50633) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50748 * C129) * C696 +
                     (C117 * C130 + C50748 * C143) * C50606) *
                        C50764 * C111 +
                    (C171 * C696 + C172 * C50606) * C50764 * C112 +
                    (C173 * C696 + C174 * C50606) * C50764 * C113 +
                    (C175 * C696 + C176 * C50606) * C50764 * C114) *
                       C1643 -
                   ((C480 * C50606 + C479 * C696) * C50764 * C114 +
                    (C478 * C50606 + C477 * C696) * C50764 * C113 +
                    (C476 * C50606 + C475 * C696) * C50764 * C112 +
                    ((C117 * C441 + C50748 * C452) * C50606 +
                     (C117 * C435 + C50748 * C442) * C696) *
                        C50764 * C111) *
                       C50706) *
                      C50939 +
                  ((((C117 * C811 + C50748 * C819) * C696 +
                     (C117 * C820 + C50748 * C835) * C50606) *
                        C50764 * C111 +
                    (C1540 * C696 + C1541 * C50606) * C50764 * C112 +
                    (C1542 * C696 + C1543 * C50606) * C50764 * C113 +
                    (C1544 * C696 + C1545 * C50606) * C50764 * C114) *
                       C50706 -
                   ((C332 * C50606 + C331 * C696) * C50764 * C114 +
                    (C330 * C50606 + C329 * C696) * C50764 * C113 +
                    (C328 * C50606 + C327 * C696) * C50764 * C112 +
                    ((C117 * C293 + C50748 * C304) * C50606 +
                     (C117 * C287 + C50748 * C294) * C696) *
                        C50764 * C111) *
                       C1643) *
                      C50926 +
                  ((((C117 * C587 + C50748 * C592) * C696 +
                     (C117 * C593 + C50748 * C602) * C50606) *
                        C50764 * C111 +
                    (C620 * C696 + C621 * C50606) * C50764 * C112 +
                    (C622 * C696 + C623 * C50606) * C50764 * C113 +
                    (C624 * C696 + C625 * C50606) * C50764 * C114) *
                       C1643 -
                   (((C117 * C827 + C50748 * C839) * C50606 +
                     (C117 * C815 + C50748 * C828) * C696) *
                        C50764 * C114 +
                    ((C117 * C829 + C50748 * C840) * C50606 +
                     (C117 * C816 + C50748 * C830) * C696) *
                        C50764 * C113 +
                    ((C117 * C831 + C50748 * C841) * C50606 +
                     (C117 * C817 + C50748 * C832) * C696) *
                        C50764 * C112 +
                    ((C117 * C833 + C50748 * C842) * C50606 +
                     (C117 * C818 + C50748 * C834) * C696) *
                        C50764 * C111) *
                       C50706) *
                      C1390)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2305 * C122 + C2300 * C129 + C2306 * C287 +
                      C2301 * C294 + C2307 * C587 + C2302 * C592) *
                         C696 +
                     (C2305 * C130 + C2300 * C143 + C2306 * C293 +
                      C2301 * C304 + C2307 * C593 + C2302 * C602) *
                         C50606) *
                        C50764 * C2303 +
                    ((C2347 + C2346 + C2345) * C696 +
                     (C2350 + C2349 + C2348) * C50606) *
                        C50764 * C50633) *
                       C1643 -
                   (((C2720 + C2719 + C2718) * C50606 +
                     (C2717 + C2716 + C2715) * C696) *
                        C50764 * C50633 +
                    ((C2307 * C833 + C2302 * C842 + C2306 * C820 +
                      C2301 * C835 + C2305 * C441 + C2300 * C452) *
                         C50606 +
                     (C2307 * C818 + C2302 * C834 + C2306 * C811 +
                      C2301 * C819 + C2305 * C435 + C2300 * C442) *
                         C696) *
                        C50764 * C2303) *
                       C50706) *
                      C50939 +
                  ((((C2305 * C811 + C2300 * C819 + C2306 * C818 +
                      C2301 * C834 + C2307 * C3154 + C2302 * C3158) *
                         C696 +
                     (C2305 * C820 + C2300 * C835 + C2306 * C833 +
                      C2301 * C842 + C2307 * C3159 + C2302 * C3166) *
                         C50606) *
                        C50764 * C2303 +
                    ((C4119 + C4118 + C4117) * C696 +
                     (C4122 + C4121 + C4120) * C50606) *
                        C50764 * C50633) *
                       C50706 -
                   (((C2538 + C2537 + C2536) * C50606 +
                     (C2535 + C2534 + C2533) * C696) *
                        C50764 * C50633 +
                    ((C2307 * C707 + C2302 * C712 + C2306 * C593 +
                      C2301 * C602 + C2305 * C293 + C2300 * C304) *
                         C50606 +
                     (C2307 * C700 + C2302 * C708 + C2306 * C587 +
                      C2301 * C592 + C2305 * C287 + C2300 * C294) *
                         C696) *
                        C50764 * C2303) *
                       C1643) *
                      C50926 +
                  ((((C2305 * C587 + C2300 * C592 + C2306 * C700 +
                      C2301 * C708 + C2307 * C2872 + C2302 * C2875) *
                         C696 +
                     (C2305 * C593 + C2300 * C602 + C2306 * C707 +
                      C2301 * C712 + C2307 * C2876 + C2302 * C2881) *
                         C50606) *
                        C50764 * C2303 +
                    ((C2899 + C2898 + C2897) * C696 +
                     (C2902 + C2901 + C2900) * C50606) *
                        C50764 * C50633) *
                       C1643 -
                   (((C2307 * C3162 + C2302 * C3168 + C2306 * C3161 +
                      C2301 * C3167 + C2305 * C831 + C2300 * C841) *
                         C50606 +
                     (C2307 * C3156 + C2302 * C3163 + C2306 * C3155 +
                      C2301 * C3160 + C2305 * C817 + C2300 * C832) *
                         C696) *
                        C50764 * C50633 +
                    ((C2307 * C3164 + C2302 * C3169 + C2306 * C3159 +
                      C2301 * C3166 + C2305 * C833 + C2300 * C842) *
                         C50606 +
                     (C2307 * C3157 + C2302 * C3165 + C2306 * C3154 +
                      C2301 * C3158 + C2305 * C818 + C2300 * C834) *
                         C696) *
                        C50764 * C2303) *
                       C50706) *
                      C1390)) /
                    (p * q * std::sqrt(p + q));
    d2ee[65] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50748 * C129) * C696 +
                     (C117 * C130 + C50748 * C143) * C50606) *
                        C50764 * C111 +
                    (C171 * C696 + C172 * C50606) * C50764 * C112 +
                    (C173 * C696 + C174 * C50606) * C50764 * C113 +
                    (C175 * C696 + C176 * C50606) * C50764 * C114) *
                       C50940 -
                   ((C480 * C50606 + C479 * C696) * C50764 * C114 +
                    (C478 * C50606 + C477 * C696) * C50764 * C113 +
                    (C476 * C50606 + C475 * C696) * C50764 * C112 +
                    ((C117 * C441 + C50748 * C452) * C50606 +
                     (C117 * C435 + C50748 * C442) * C696) *
                        C50764 * C111) *
                       C50929 +
                   (((C117 * C944 + C50748 * C949) * C696 +
                     (C117 * C950 + C50748 * C959) * C50606) *
                        C50764 * C111 +
                    (C977 * C696 + C978 * C50606) * C50764 * C112 +
                    (C979 * C696 + C980 * C50606) * C50764 * C113 +
                    (C981 * C696 + C982 * C50606) * C50764 * C114) *
                       C1875) *
                      C1283 +
                  ((((C117 * C811 + C50748 * C819) * C696 +
                     (C117 * C820 + C50748 * C835) * C50606) *
                        C50764 * C111 +
                    (C1540 * C696 + C1541 * C50606) * C50764 * C112 +
                    (C1542 * C696 + C1543 * C50606) * C50764 * C113 +
                    (C1544 * C696 + C1545 * C50606) * C50764 * C114) *
                       C50929 -
                   ((C332 * C50606 + C331 * C696) * C50764 * C114 +
                    (C330 * C50606 + C329 * C696) * C50764 * C113 +
                    (C328 * C50606 + C327 * C696) * C50764 * C112 +
                    ((C117 * C293 + C50748 * C304) * C50606 +
                     (C117 * C287 + C50748 * C294) * C696) *
                        C50764 * C111) *
                       C50940 -
                   (((C117 * C1084 + C50748 * C1092) * C50606 +
                     (C117 * C1080 + C50748 * C1085) * C696) *
                        C50764 * C114 +
                    ((C117 * C1086 + C50748 * C1093) * C50606 +
                     (C117 * C1081 + C50748 * C1087) * C696) *
                        C50764 * C113 +
                    ((C117 * C1088 + C50748 * C1094) * C50606 +
                     (C117 * C1082 + C50748 * C1089) * C696) *
                        C50764 * C112 +
                    ((C117 * C1090 + C50748 * C1095) * C50606 +
                     (C117 * C1083 + C50748 * C1091) * C696) *
                        C50764 * C111) *
                       C1875) *
                      C50682)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2305 * C122 + C2300 * C129 + C2306 * C287 +
                      C2301 * C294 + C2307 * C587 + C2302 * C592) *
                         C696 +
                     (C2305 * C130 + C2300 * C143 + C2306 * C293 +
                      C2301 * C304 + C2307 * C593 + C2302 * C602) *
                         C50606) *
                        C50764 * C2303 +
                    ((C2347 + C2346 + C2345) * C696 +
                     (C2350 + C2349 + C2348) * C50606) *
                        C50764 * C50633) *
                       C50940 -
                   (((C2720 + C2719 + C2718) * C50606 +
                     (C2717 + C2716 + C2715) * C696) *
                        C50764 * C50633 +
                    ((C2307 * C833 + C2302 * C842 + C2306 * C820 +
                      C2301 * C835 + C2305 * C441 + C2300 * C452) *
                         C50606 +
                     (C2307 * C818 + C2302 * C834 + C2306 * C811 +
                      C2301 * C819 + C2305 * C435 + C2300 * C442) *
                         C696) *
                        C50764 * C2303) *
                       C50929 +
                   (((C2305 * C944 + C2300 * C949 + C2306 * C1083 +
                      C2301 * C1091 + C2307 * C3316 + C2302 * C3319) *
                         C696 +
                     (C2305 * C950 + C2300 * C959 + C2306 * C1090 +
                      C2301 * C1095 + C2307 * C3320 + C2302 * C3325) *
                         C50606) *
                        C50764 * C2303 +
                    ((C3343 + C3342 + C3341) * C696 +
                     (C3346 + C3345 + C3344) * C50606) *
                        C50764 * C50633) *
                       C1875) *
                      C1283 +
                  ((((C2305 * C811 + C2300 * C819 + C2306 * C818 +
                      C2301 * C834 + C2307 * C3154 + C2302 * C3158) *
                         C696 +
                     (C2305 * C820 + C2300 * C835 + C2306 * C833 +
                      C2301 * C842 + C2307 * C3159 + C2302 * C3166) *
                         C50606) *
                        C50764 * C2303 +
                    ((C4119 + C4118 + C4117) * C696 +
                     (C4122 + C4121 + C4120) * C50606) *
                        C50764 * C50633) *
                       C50929 -
                   (((C2538 + C2537 + C2536) * C50606 +
                     (C2535 + C2534 + C2533) * C696) *
                        C50764 * C50633 +
                    ((C2307 * C707 + C2302 * C712 + C2306 * C593 +
                      C2301 * C602 + C2305 * C293 + C2300 * C304) *
                         C50606 +
                     (C2307 * C700 + C2302 * C708 + C2306 * C587 +
                      C2301 * C592 + C2305 * C287 + C2300 * C294) *
                         C696) *
                        C50764 * C2303) *
                       C50940 -
                   (((C2307 * C3494 + C2302 * C3498 + C2306 * C3322 +
                      C2301 * C3326 + C2305 * C1088 + C2300 * C1094) *
                         C50606 +
                     (C2307 * C3492 + C2302 * C3495 + C2306 * C3317 +
                      C2301 * C3321 + C2305 * C1082 + C2300 * C1089) *
                         C696) *
                        C50764 * C50633 +
                    ((C2307 * C3496 + C2302 * C3499 + C2306 * C3320 +
                      C2301 * C3325 + C2305 * C1090 + C2300 * C1095) *
                         C50606 +
                     (C2307 * C3493 + C2302 * C3497 + C2306 * C3316 +
                      C2301 * C3319 + C2305 * C1083 + C2300 * C1091) *
                         C696) *
                        C50764 * C2303) *
                       C1875) *
                      C50682)) /
                    (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C49720 +
            (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
            C172 * C50611) *
               C50764 * C111 +
           (C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
               C50764 * C112 +
           (C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
               C50764 * C113 +
           (C175 * C49720 + C176 * C50878 - C177 * C49713 - C178 * C50611) *
               C50764 * C114) *
              C50694 * C582 +
          ((C327 * C49713 -
            ((C117 * C293 + C50748 * C304) * C50878 +
             (C117 * C287 + C50748 * C294) * C49720) +
            C328 * C50611) *
               C50764 * C111 +
           (C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
               C50764 * C112 +
           (C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
               C50764 * C113 +
           (C333 * C49713 - (C332 * C50878 + C331 * C49720) + C334 * C50611) *
               C50764 * C114) *
              C50694 * C583 +
          (((C117 * C587 + C50748 * C592) * C49720 +
            (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
            C621 * C50611) *
               C50764 * C111 +
           (C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
               C50764 * C112 +
           (C622 * C49720 + C623 * C50878 - C624 * C49713 - C625 * C50611) *
               C50764 * C113 +
           (C624 * C49720 + C625 * C50878 -
            (C117 * C591 + C50748 * C600) * C49713 -
            (C117 * C601 + C50748 * C606) * C50611) *
               C50764 * C114) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50748 * C129) * C118 +
           (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50764 * C111 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C50764 * C112 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C50764 * C113 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50748 * C141) * C121 -
           (C117 * C142 + C50748 * C149) * C109) *
              C50764 * C114) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C49720 +
            (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
            C172 * C50611) *
               C50764 * C111 +
           (C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
               C50764 * C112 +
           (C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
               C50764 * C113 +
           (C175 * C49720 + C176 * C50878 - C177 * C49713 - C178 * C50611) *
               C50764 * C114) *
              C941 +
          ((C475 * C49713 -
            ((C117 * C441 + C50748 * C452) * C50878 +
             (C117 * C435 + C50748 * C442) * C49720) +
            C476 * C50611) *
               C50764 * C111 +
           (C477 * C49713 - (C476 * C50878 + C475 * C49720) + C478 * C50611) *
               C50764 * C112 +
           (C479 * C49713 - (C478 * C50878 + C477 * C49720) + C480 * C50611) *
               C50764 * C113 +
           (C481 * C49713 - (C480 * C50878 + C479 * C49720) + C482 * C50611) *
               C50764 * C114) *
              C942 +
          (((C117 * C944 + C50748 * C949) * C49720 +
            (C117 * C950 + C50748 * C959) * C50878 - C977 * C49713 -
            C978 * C50611) *
               C50764 * C111 +
           (C977 * C49720 + C978 * C50878 - C979 * C49713 - C980 * C50611) *
               C50764 * C112 +
           (C979 * C49720 + C980 * C50878 - C981 * C49713 - C982 * C50611) *
               C50764 * C113 +
           (C981 * C49720 + C982 * C50878 -
            (C117 * C948 + C50748 * C957) * C49713 -
            (C117 * C958 + C50748 * C963) * C50611) *
               C50764 * C114) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
            C2307 * C587 + C2302 * C592) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
            C2307 * C593 + C2302 * C602) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C50764 * C2303 +
          ((C2347 + C2346 + C2345) * C118 + (C2350 + C2349 + C2348) * C106 -
           (C2353 + C2352 + C2351) * C119 - (C2356 + C2355 + C2354) * C107 +
           (C2359 + C2358 + C2357) * C120 + (C2362 + C2361 + C2360) * C108 -
           (C2307 * C591 + C2302 * C600 + C2306 * C290 + C2301 * C300 +
            C2305 * C126 + C2300 * C137) *
               C121 -
           (C2307 * C601 + C2302 * C606 + C2306 * C301 + C2301 * C308 +
            C2305 * C138 + C2300 * C147) *
               C109) *
              C50764 * C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50878 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50611) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C49720 +
            (C2350 + C2349 + C2348) * C50878 -
            (C2353 + C2352 + C2351) * C49713 -
            (C2356 + C2355 + C2354) * C50611) *
               C50764 * C50633) *
              C50694 * C582 +
          (((C2533 + C2534 + C2535) * C49713 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50878 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C49720) +
            (C2536 + C2537 + C2538) * C50611) *
               C50764 * C2303 +
           ((C2541 + C2540 + C2539) * C49713 -
            ((C2538 + C2537 + C2536) * C50878 +
             (C2535 + C2534 + C2533) * C49720) +
            (C2544 + C2543 + C2542) * C50611) *
               C50764 * C50633) *
              C50694 * C583 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C49720 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50878 -
            (C2897 + C2898 + C2899) * C49713 -
            (C2900 + C2901 + C2902) * C50611) *
               C50764 * C2303 +
           ((C2899 + C2898 + C2897) * C49720 +
            (C2902 + C2901 + C2900) * C50878 -
            (C2307 * C2874 + C2302 * C2879 + C2306 * C698 + C2301 * C704 +
             C2305 * C589 + C2300 * C596) *
                C49713 -
            (C2307 * C2880 + C2302 * C2883 + C2306 * C703 + C2301 * C710 +
             C2305 * C597 + C2300 * C604) *
                C50611) *
               C50764 * C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50878 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50611) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C49720 +
            (C2350 + C2349 + C2348) * C50878 -
            (C2353 + C2352 + C2351) * C49713 -
            (C2356 + C2355 + C2354) * C50611) *
               C50764 * C50633) *
              C941 +
          (((C2715 + C2716 + C2717) * C49713 -
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C50878 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C49720) +
            (C2718 + C2719 + C2720) * C50611) *
               C50764 * C2303 +
           ((C2723 + C2722 + C2721) * C49713 -
            ((C2720 + C2719 + C2718) * C50878 +
             (C2717 + C2716 + C2715) * C49720) +
            (C2726 + C2725 + C2724) * C50611) *
               C50764 * C50633) *
              C942 +
          (((C2305 * C944 + C2300 * C949 + C2306 * C1083 + C2301 * C1091 +
             C2307 * C3316 + C2302 * C3319) *
                C49720 +
            (C2305 * C950 + C2300 * C959 + C2306 * C1090 + C2301 * C1095 +
             C2307 * C3320 + C2302 * C3325) *
                C50878 -
            (C3341 + C3342 + C3343) * C49713 -
            (C3344 + C3345 + C3346) * C50611) *
               C50764 * C2303 +
           ((C3343 + C3342 + C3341) * C49720 +
            (C3346 + C3345 + C3344) * C50878 -
            (C2307 * C3318 + C2302 * C3323 + C2306 * C1081 + C2301 * C1087 +
             C2305 * C946 + C2300 * C953) *
                C49713 -
            (C2307 * C3324 + C2302 * C3327 + C2306 * C1086 + C2301 * C1093 +
             C2305 * C954 + C2300 * C961) *
                C50611) *
               C50764 * C50633) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C696 +
            (C117 * C130 + C50748 * C143) * C50606) *
               C50764 * C111 +
           (C171 * C696 + C172 * C50606) * C50764 * C112 +
           (C173 * C696 + C174 * C50606) * C50764 * C113 +
           (C175 * C696 + C176 * C50606) * C50764 * C114) *
              C50694 * C692 -
          ((C332 * C50606 + C331 * C696) * C50764 * C114 +
           (C330 * C50606 + C329 * C696) * C50764 * C113 +
           (C328 * C50606 + C327 * C696) * C50764 * C112 +
           ((C117 * C293 + C50748 * C304) * C50606 +
            (C117 * C287 + C50748 * C294) * C696) *
               C50764 * C111) *
              C50694 * C693 +
          (((C117 * C587 + C50748 * C592) * C696 +
            (C117 * C593 + C50748 * C602) * C50606) *
               C50764 * C111 +
           (C620 * C696 + C621 * C50606) * C50764 * C112 +
           (C622 * C696 + C623 * C50606) * C50764 * C113 +
           (C624 * C696 + C625 * C50606) * C50764 * C114) *
              C50694 * C694 -
          (((C117 * C701 + C50748 * C709) * C50606 +
            (C117 * C697 + C50748 * C702) * C696) *
               C50764 * C114 +
           ((C117 * C703 + C50748 * C710) * C50606 +
            (C117 * C698 + C50748 * C704) * C696) *
               C50764 * C113 +
           ((C117 * C705 + C50748 * C711) * C50606 +
            (C117 * C699 + C50748 * C706) * C696) *
               C50764 * C112 +
           ((C117 * C707 + C50748 * C712) * C50606 +
            (C117 * C700 + C50748 * C708) * C696) *
               C50764 * C111) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C283 +
            (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50764 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C50764 * C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C50764 * C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C50764 * C114) *
              C50694 * C50893 +
          ((C327 * C284 -
            ((C117 * C293 + C50748 * C304) * C278 +
             (C117 * C287 + C50748 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C50764 * C111 +
           (C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
            C331 * C285 - C332 * C280) *
               C50764 * C112 +
           (C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
            C333 * C285 - C334 * C280) *
               C50764 * C113 +
           (C333 * C284 - (C332 * C278 + C331 * C283) + C334 * C279 -
            (C117 * C291 + C50748 * C302) * C285 -
            (C117 * C303 + C50748 * C309) * C280) *
               C50764 * C114) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C50764 * C111 +
            (C171 * C696 + C172 * C50606) * C50764 * C112 +
            (C173 * C696 + C174 * C50606) * C50764 * C113 +
            (C175 * C696 + C176 * C50606) * C50764 * C114) *
               C941 -
           ((C480 * C50606 + C479 * C696) * C50764 * C114 +
            (C478 * C50606 + C477 * C696) * C50764 * C113 +
            (C476 * C50606 + C475 * C696) * C50764 * C112 +
            ((C117 * C441 + C50748 * C452) * C50606 +
             (C117 * C435 + C50748 * C442) * C696) *
                C50764 * C111) *
               C942 +
           (((C117 * C944 + C50748 * C949) * C696 +
             (C117 * C950 + C50748 * C959) * C50606) *
                C50764 * C111 +
            (C977 * C696 + C978 * C50606) * C50764 * C112 +
            (C979 * C696 + C980 * C50606) * C50764 * C113 +
            (C981 * C696 + C982 * C50606) * C50764 * C114) *
               C943) *
              C50893 +
          ((((C117 * C811 + C50748 * C819) * C696 +
             (C117 * C820 + C50748 * C835) * C50606) *
                C50764 * C111 +
            ((C117 * C812 + C50748 * C821) * C696 +
             (C117 * C822 + C50748 * C836) * C50606) *
                C50764 * C112 +
            ((C117 * C813 + C50748 * C823) * C696 +
             (C117 * C824 + C50748 * C837) * C50606) *
                C50764 * C113 +
            ((C117 * C814 + C50748 * C825) * C696 +
             (C117 * C826 + C50748 * C838) * C50606) *
                C50764 * C114) *
               C942 -
           ((C332 * C50606 + C331 * C696) * C50764 * C114 +
            (C330 * C50606 + C329 * C696) * C50764 * C113 +
            (C328 * C50606 + C327 * C696) * C50764 * C112 +
            ((C117 * C293 + C50748 * C304) * C50606 +
             (C117 * C287 + C50748 * C294) * C696) *
                C50764 * C111) *
               C941 -
           (((C117 * C1084 + C50748 * C1092) * C50606 +
             (C117 * C1080 + C50748 * C1085) * C696) *
                C50764 * C114 +
            ((C117 * C1086 + C50748 * C1093) * C50606 +
             (C117 * C1081 + C50748 * C1087) * C696) *
                C50764 * C113 +
            ((C117 * C1088 + C50748 * C1094) * C50606 +
             (C117 * C1082 + C50748 * C1089) * C696) *
                C50764 * C112 +
            ((C117 * C1090 + C50748 * C1095) * C50606 +
             (C117 * C1083 + C50748 * C1091) * C696) *
                C50764 * C111) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C279 +
            (C2359 + C2358 + C2357) * C285 + (C2362 + C2361 + C2360) * C280) *
               C50764 * C50633) *
              C50694 * C50893 +
          (((C2533 + C2534 + C2535) * C284 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C278 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C283) +
            (C2536 + C2537 + C2538) * C279 - (C2539 + C2540 + C2541) * C285 -
            (C2542 + C2543 + C2544) * C280) *
               C50764 * C2303 +
           ((C2541 + C2540 + C2539) * C284 -
            ((C2538 + C2537 + C2536) * C278 + (C2535 + C2534 + C2533) * C283) +
            (C2544 + C2543 + C2542) * C279 -
            (C2307 * C697 + C2302 * C702 + C2306 * C590 + C2301 * C598 +
             C2305 * C289 + C2300 * C298) *
                C285 -
            (C2307 * C701 + C2302 * C709 + C2306 * C599 + C2301 * C605 +
             C2305 * C299 + C2300 * C307) *
                C280) *
               C50764 * C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C696 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50606) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C696 + (C2350 + C2349 + C2348) * C50606) *
               C50764 * C50633) *
              C50694 * C692 -
          (((C2538 + C2537 + C2536) * C50606 + (C2535 + C2534 + C2533) * C696) *
               C50764 * C50633 +
           ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
             C2305 * C293 + C2300 * C304) *
                C50606 +
            (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
             C2305 * C287 + C2300 * C294) *
                C696) *
               C50764 * C2303) *
              C50694 * C693 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C696 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50606) *
               C50764 * C2303 +
           ((C2899 + C2898 + C2897) * C696 + (C2902 + C2901 + C2900) * C50606) *
               C50764 * C50633) *
              C50694 * C694 -
          (((C2307 * C3002 + C2302 * C3006 + C2306 * C2878 + C2301 * C2882 +
             C2305 * C705 + C2300 * C711) *
                C50606 +
            (C2307 * C3000 + C2302 * C3003 + C2306 * C2873 + C2301 * C2877 +
             C2305 * C699 + C2300 * C706) *
                C696) *
               C50764 * C50633 +
           ((C2307 * C3004 + C2302 * C3007 + C2306 * C2876 + C2301 * C2881 +
             C2305 * C707 + C2300 * C712) *
                C50606 +
            (C2307 * C3001 + C2302 * C3005 + C2306 * C2872 + C2301 * C2875 +
             C2305 * C700 + C2300 * C708) *
                C696) *
               C50764 * C2303) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C50764 * C2303 +
            ((C2347 + C2346 + C2345) * C696 +
             (C2350 + C2349 + C2348) * C50606) *
                C50764 * C50633) *
               C941 -
           (((C2720 + C2719 + C2718) * C50606 +
             (C2717 + C2716 + C2715) * C696) *
                C50764 * C50633 +
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C50606 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C696) *
                C50764 * C2303) *
               C942 +
           (((C2305 * C944 + C2300 * C949 + C2306 * C1083 + C2301 * C1091 +
              C2307 * C3316 + C2302 * C3319) *
                 C696 +
             (C2305 * C950 + C2300 * C959 + C2306 * C1090 + C2301 * C1095 +
              C2307 * C3320 + C2302 * C3325) *
                 C50606) *
                C50764 * C2303 +
            ((C3343 + C3342 + C3341) * C696 +
             (C3346 + C3345 + C3344) * C50606) *
                C50764 * C50633) *
               C943) *
              C50893 +
          ((((C2305 * C811 + C2300 * C819 + C2306 * C818 + C2301 * C834 +
              C2307 * C3154 + C2302 * C3158) *
                 C696 +
             (C2305 * C820 + C2300 * C835 + C2306 * C833 + C2301 * C842 +
              C2307 * C3159 + C2302 * C3166) *
                 C50606) *
                C50764 * C2303 +
            ((C2305 * C812 + C2300 * C821 + C2306 * C817 + C2301 * C832 +
              C2307 * C3155 + C2302 * C3160) *
                 C696 +
             (C2305 * C822 + C2300 * C836 + C2306 * C831 + C2301 * C841 +
              C2307 * C3161 + C2302 * C3167) *
                 C50606) *
                C50764 * C50633) *
               C942 -
           (((C2538 + C2537 + C2536) * C50606 +
             (C2535 + C2534 + C2533) * C696) *
                C50764 * C50633 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C50764 * C2303) *
               C941 -
           (((C2307 * C3494 + C2302 * C3498 + C2306 * C3322 + C2301 * C3326 +
              C2305 * C1088 + C2300 * C1094) *
                 C50606 +
             (C2307 * C3492 + C2302 * C3495 + C2306 * C3317 + C2301 * C3321 +
              C2305 * C1082 + C2300 * C1089) *
                 C696) *
                C50764 * C50633 +
            ((C2307 * C3496 + C2302 * C3499 + C2306 * C3320 + C2301 * C3325 +
              C2305 * C1090 + C2300 * C1095) *
                 C50606 +
             (C2307 * C3493 + C2302 * C3497 + C2306 * C3316 + C2301 * C3319 +
              C2305 * C1083 + C2300 * C1091) *
                 C696) *
                C50764 * C2303) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C50764 * C111 +
            (C171 * C696 + C172 * C50606) * C50764 * C112 +
            (C173 * C696 + C174 * C50606) * C50764 * C113 +
            (C175 * C696 + C176 * C50606) * C50764 * C114) *
               C50894 -
           ((C480 * C50606 + C479 * C696) * C50764 * C114 +
            (C478 * C50606 + C477 * C696) * C50764 * C113 +
            (C476 * C50606 + C475 * C696) * C50764 * C112 +
            ((C117 * C441 + C50748 * C452) * C50606 +
             (C117 * C435 + C50748 * C442) * C696) *
                C50764 * C111) *
               C50706) *
              C582 +
          ((((C117 * C811 + C50748 * C819) * C696 +
             (C117 * C820 + C50748 * C835) * C50606) *
                C50764 * C111 +
            ((C117 * C812 + C50748 * C821) * C696 +
             (C117 * C822 + C50748 * C836) * C50606) *
                C50764 * C112 +
            ((C117 * C813 + C50748 * C823) * C696 +
             (C117 * C824 + C50748 * C837) * C50606) *
                C50764 * C113 +
            ((C117 * C814 + C50748 * C825) * C696 +
             (C117 * C826 + C50748 * C838) * C50606) *
                C50764 * C114) *
               C50706 -
           ((C332 * C50606 + C331 * C696) * C50764 * C114 +
            (C330 * C50606 + C329 * C696) * C50764 * C113 +
            (C328 * C50606 + C327 * C696) * C50764 * C112 +
            ((C117 * C293 + C50748 * C304) * C50606 +
             (C117 * C287 + C50748 * C294) * C696) *
                C50764 * C111) *
               C50894) *
              C583 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C50764 * C111 +
            (C620 * C696 + C621 * C50606) * C50764 * C112 +
            (C622 * C696 + C623 * C50606) * C50764 * C113 +
            (C624 * C696 + C625 * C50606) * C50764 * C114) *
               C50894 -
           (((C117 * C827 + C50748 * C839) * C50606 +
             (C117 * C815 + C50748 * C828) * C696) *
                C50764 * C114 +
            ((C117 * C829 + C50748 * C840) * C50606 +
             (C117 * C816 + C50748 * C830) * C696) *
                C50764 * C113 +
            ((C117 * C831 + C50748 * C841) * C50606 +
             (C117 * C817 + C50748 * C832) * C696) *
                C50764 * C112 +
            ((C117 * C833 + C50748 * C842) * C50606 +
             (C117 * C818 + C50748 * C834) * C696) *
                C50764 * C111) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C283 +
            (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50764 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C50764 * C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C50764 * C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C50764 * C114) *
              C50894 +
          ((C475 * C284 -
            ((C117 * C441 + C50748 * C452) * C278 +
             (C117 * C435 + C50748 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C50764 * C111 +
           (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
            C479 * C285 - C480 * C280) *
               C50764 * C112 +
           (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
            C481 * C285 - C482 * C280) *
               C50764 * C113 +
           (C481 * C284 - (C480 * C278 + C479 * C283) + C482 * C279 -
            (C117 * C439 + C50748 * C450) * C285 -
            (C117 * C451 + C50748 * C457) * C280) *
               C50764 * C114) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C696 +
            (C117 * C130 + C50748 * C143) * C50606) *
               C50764 * C111 +
           (C171 * C696 + C172 * C50606) * C50764 * C112 +
           (C173 * C696 + C174 * C50606) * C50764 * C113 +
           (C175 * C696 + C176 * C50606) * C50764 * C114) *
              C1162 -
          ((C480 * C50606 + C479 * C696) * C50764 * C114 +
           (C478 * C50606 + C477 * C696) * C50764 * C113 +
           (C476 * C50606 + C475 * C696) * C50764 * C112 +
           ((C117 * C441 + C50748 * C452) * C50606 +
            (C117 * C435 + C50748 * C442) * C696) *
               C50764 * C111) *
              C1163 +
          (((C117 * C944 + C50748 * C949) * C696 +
            (C117 * C950 + C50748 * C959) * C50606) *
               C50764 * C111 +
           (C977 * C696 + C978 * C50606) * C50764 * C112 +
           (C979 * C696 + C980 * C50606) * C50764 * C113 +
           (C981 * C696 + C982 * C50606) * C50764 * C114) *
              C1164 -
          (((C117 * C1170 + C50748 * C1178) * C50606 +
            (C117 * C1166 + C50748 * C1171) * C696) *
               C50764 * C114 +
           ((C117 * C1172 + C50748 * C1179) * C50606 +
            (C117 * C1167 + C50748 * C1173) * C696) *
               C50764 * C113 +
           ((C117 * C1174 + C50748 * C1180) * C50606 +
            (C117 * C1168 + C50748 * C1175) * C696) *
               C50764 * C112 +
           ((C117 * C1176 + C50748 * C1181) * C50606 +
            (C117 * C1169 + C50748 * C1177) * C696) *
               C50764 * C111) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C279 +
            (C2359 + C2358 + C2357) * C285 + (C2362 + C2361 + C2360) * C280) *
               C50764 * C50633) *
              C50894 +
          (((C2715 + C2716 + C2717) * C284 -
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C278 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C283) +
            (C2718 + C2719 + C2720) * C279 - (C2721 + C2722 + C2723) * C285 -
            (C2724 + C2725 + C2726) * C280) *
               C50764 * C2303 +
           ((C2723 + C2722 + C2721) * C284 -
            ((C2720 + C2719 + C2718) * C278 + (C2717 + C2716 + C2715) * C283) +
            (C2726 + C2725 + C2724) * C279 -
            (C2307 * C815 + C2302 * C828 + C2306 * C814 + C2301 * C825 +
             C2305 * C437 + C2300 * C446) *
                C285 -
            (C2307 * C827 + C2302 * C839 + C2306 * C826 + C2301 * C838 +
             C2305 * C447 + C2300 * C455) *
                C280) *
               C50764 * C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C50764 * C2303 +
            ((C2347 + C2346 + C2345) * C696 +
             (C2350 + C2349 + C2348) * C50606) *
                C50764 * C50633) *
               C50894 -
           (((C2720 + C2719 + C2718) * C50606 +
             (C2717 + C2716 + C2715) * C696) *
                C50764 * C50633 +
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C50606 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C696) *
                C50764 * C2303) *
               C50706) *
              C582 +
          ((((C2305 * C811 + C2300 * C819 + C2306 * C818 + C2301 * C834 +
              C2307 * C3154 + C2302 * C3158) *
                 C696 +
             (C2305 * C820 + C2300 * C835 + C2306 * C833 + C2301 * C842 +
              C2307 * C3159 + C2302 * C3166) *
                 C50606) *
                C50764 * C2303 +
            ((C2305 * C812 + C2300 * C821 + C2306 * C817 + C2301 * C832 +
              C2307 * C3155 + C2302 * C3160) *
                 C696 +
             (C2305 * C822 + C2300 * C836 + C2306 * C831 + C2301 * C841 +
              C2307 * C3161 + C2302 * C3167) *
                 C50606) *
                C50764 * C50633) *
               C50706 -
           (((C2538 + C2537 + C2536) * C50606 +
             (C2535 + C2534 + C2533) * C696) *
                C50764 * C50633 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C50764 * C2303) *
               C50894) *
              C583 +
          ((((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
              C2307 * C2872 + C2302 * C2875) *
                 C696 +
             (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
              C2307 * C2876 + C2302 * C2881) *
                 C50606) *
                C50764 * C2303 +
            ((C2899 + C2898 + C2897) * C696 +
             (C2902 + C2901 + C2900) * C50606) *
                C50764 * C50633) *
               C50894 -
           (((C2307 * C3162 + C2302 * C3168 + C2306 * C3161 + C2301 * C3167 +
              C2305 * C831 + C2300 * C841) *
                 C50606 +
             (C2307 * C3156 + C2302 * C3163 + C2306 * C3155 + C2301 * C3160 +
              C2305 * C817 + C2300 * C832) *
                 C696) *
                C50764 * C50633 +
            ((C2307 * C3164 + C2302 * C3169 + C2306 * C3159 + C2301 * C3166 +
              C2305 * C833 + C2300 * C842) *
                 C50606 +
             (C2307 * C3157 + C2302 * C3165 + C2306 * C3154 + C2301 * C3158 +
              C2305 * C818 + C2300 * C834) *
                 C696) *
                C50764 * C2303) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C696 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50606) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C696 + (C2350 + C2349 + C2348) * C50606) *
               C50764 * C50633) *
              C1162 -
          (((C2720 + C2719 + C2718) * C50606 + (C2717 + C2716 + C2715) * C696) *
               C50764 * C50633 +
           ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
             C2305 * C441 + C2300 * C452) *
                C50606 +
            (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
             C2305 * C435 + C2300 * C442) *
                C696) *
               C50764 * C2303) *
              C1163 +
          (((C2305 * C944 + C2300 * C949 + C2306 * C1083 + C2301 * C1091 +
             C2307 * C3316 + C2302 * C3319) *
                C696 +
            (C2305 * C950 + C2300 * C959 + C2306 * C1090 + C2301 * C1095 +
             C2307 * C3320 + C2302 * C3325) *
                C50606) *
               C50764 * C2303 +
           ((C3343 + C3342 + C3341) * C696 + (C3346 + C3345 + C3344) * C50606) *
               C50764 * C50633) *
              C1164 -
          (((C2307 * C3602 + C2302 * C3610 + C2306 * C3603 + C2301 * C3611 +
             C2305 * C1174 + C2300 * C1180) *
                C50606 +
            (C2307 * C3598 + C2302 * C3604 + C2306 * C3599 + C2301 * C3605 +
             C2305 * C1168 + C2300 * C1175) *
                C696) *
               C50764 * C50633 +
           ((C2307 * C3606 + C2302 * C3612 + C2306 * C3607 + C2301 * C3613 +
             C2305 * C1176 + C2300 * C1181) *
                C50606 +
            (C2307 * C3600 + C2302 * C3608 + C2306 * C3601 + C2301 * C3609 +
             C2305 * C1169 + C2300 * C1177) *
                C696) *
               C50764 * C2303) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C1285 +
            (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
            C172 * C50920 + C173 * C1287 + C174 * C1282) *
               C50764 * C111 +
           (C171 * C1285 + C172 * C50936 - C173 * C1286 - C174 * C50920 +
            C175 * C1287 + C176 * C1282) *
               C50764 * C112 +
           (C173 * C1285 + C174 * C50936 - C175 * C1286 - C176 * C50920 +
            C177 * C1287 + C178 * C1282) *
               C50764 * C113 +
           (C175 * C1285 + C176 * C50936 - C177 * C1286 - C178 * C50920 +
            C179 * C1287 + C180 * C1282) *
               C50764 * C114) *
              C1643 +
          ((C475 * C1286 -
            ((C117 * C441 + C50748 * C452) * C50936 +
             (C117 * C435 + C50748 * C442) * C1285) +
            C476 * C50920 - C477 * C1287 - C478 * C1282) *
               C50764 * C111 +
           (C477 * C1286 - (C476 * C50936 + C475 * C1285) + C478 * C50920 -
            C479 * C1287 - C480 * C1282) *
               C50764 * C112 +
           (C479 * C1286 - (C478 * C50936 + C477 * C1285) + C480 * C50920 -
            C481 * C1287 - C482 * C1282) *
               C50764 * C113 +
           (C481 * C1286 - (C480 * C50936 + C479 * C1285) + C482 * C50920 -
            (C117 * C439 + C50748 * C450) * C1287 -
            (C117 * C451 + C50748 * C457) * C1282) *
               C50764 * C114) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1285 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50936 -
            (C2345 + C2346 + C2347) * C1286 - (C2348 + C2349 + C2350) * C50920 +
            (C2351 + C2352 + C2353) * C1287 + (C2354 + C2355 + C2356) * C1282) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C1285 + (C2350 + C2349 + C2348) * C50936 -
            (C2353 + C2352 + C2351) * C1286 - (C2356 + C2355 + C2354) * C50920 +
            (C2359 + C2358 + C2357) * C1287 + (C2362 + C2361 + C2360) * C1282) *
               C50764 * C50633) *
              C1643 +
          (((C2715 + C2716 + C2717) * C1286 -
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C50936 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C1285) +
            (C2718 + C2719 + C2720) * C50920 - (C2721 + C2722 + C2723) * C1287 -
            (C2724 + C2725 + C2726) * C1282) *
               C50764 * C2303 +
           ((C2723 + C2722 + C2721) * C1286 -
            ((C2720 + C2719 + C2718) * C50936 +
             (C2717 + C2716 + C2715) * C1285) +
            (C2726 + C2725 + C2724) * C50920 -
            (C2307 * C815 + C2302 * C828 + C2306 * C814 + C2301 * C825 +
             C2305 * C437 + C2300 * C446) *
                C1287 -
            (C2307 * C827 + C2302 * C839 + C2306 * C826 + C2301 * C838 +
             C2305 * C447 + C2300 * C455) *
                C1282) *
               C50764 * C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C50764 * C111 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C50764 * C112 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                C50764 * C113 +
            (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50611) *
                C50764 * C114) *
               C1643 +
           ((C475 * C1392 -
             ((C117 * C441 + C50748 * C452) * C1386 +
              (C117 * C435 + C50748 * C442) * C1391) +
             C476 * C50611) *
                C50764 * C111 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50611) *
                C50764 * C112 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50611) *
                C50764 * C113 +
            (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50611) *
                C50764 * C114) *
               C50706) *
              C50893 +
          (((C327 * C1392 -
             ((C117 * C293 + C50748 * C304) * C1386 +
              (C117 * C287 + C50748 * C294) * C1391) +
             C328 * C50611) *
                C50764 * C111 +
            (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                C50764 * C112 +
            (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                C50764 * C113 +
            (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50611) *
                C50764 * C114) *
               C1643 +
           (((C117 * C811 + C50748 * C819) * C1391 +
             (C117 * C820 + C50748 * C835) * C1386 - C1540 * C1392 -
             C1541 * C50611) *
                C50764 * C111 +
            (C1540 * C1391 + C1541 * C1386 - C1542 * C1392 - C1543 * C50611) *
                C50764 * C112 +
            (C1542 * C1391 + C1543 * C1386 - C1544 * C1392 - C1545 * C50611) *
                C50764 * C113 +
            (C1544 * C1391 + C1545 * C1386 -
             (C117 * C1523 + C50748 * C1524) * C1392 -
             (C117 * C1525 + C50748 * C1526) * C50611) *
                C50764 * C114) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C1391 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C1386 -
             (C2345 + C2346 + C2347) * C1392 -
             (C2348 + C2349 + C2350) * C50611) *
                C50764 * C2303 +
            ((C2347 + C2346 + C2345) * C1391 + (C2350 + C2349 + C2348) * C1386 -
             (C2353 + C2352 + C2351) * C1392 -
             (C2356 + C2355 + C2354) * C50611) *
                C50764 * C50633) *
               C1643 +
           (((C2715 + C2716 + C2717) * C1392 -
             ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
               C2305 * C441 + C2300 * C452) *
                  C1386 +
              (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
               C2305 * C435 + C2300 * C442) *
                  C1391) +
             (C2718 + C2719 + C2720) * C50611) *
                C50764 * C2303 +
            ((C2723 + C2722 + C2721) * C1392 -
             ((C2720 + C2719 + C2718) * C1386 +
              (C2717 + C2716 + C2715) * C1391) +
             (C2726 + C2725 + C2724) * C50611) *
                C50764 * C50633) *
               C50706) *
              C50893 +
          ((((C2533 + C2534 + C2535) * C1392 -
             ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
               C2305 * C293 + C2300 * C304) *
                  C1386 +
              (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
               C2305 * C287 + C2300 * C294) *
                  C1391) +
             (C2536 + C2537 + C2538) * C50611) *
                C50764 * C2303 +
            ((C2541 + C2540 + C2539) * C1392 -
             ((C2538 + C2537 + C2536) * C1386 +
              (C2535 + C2534 + C2533) * C1391) +
             (C2544 + C2543 + C2542) * C50611) *
                C50764 * C50633) *
               C1643 +
           (((C2305 * C811 + C2300 * C819 + C2306 * C818 + C2301 * C834 +
              C2307 * C3154 + C2302 * C3158) *
                 C1391 +
             (C2305 * C820 + C2300 * C835 + C2306 * C833 + C2301 * C842 +
              C2307 * C3159 + C2302 * C3166) *
                 C1386 -
             (C4117 + C4118 + C4119) * C1392 -
             (C4120 + C4121 + C4122) * C50611) *
                C50764 * C2303 +
            ((C4119 + C4118 + C4117) * C1391 + (C4122 + C4121 + C4120) * C1386 -
             (C2307 * C4100 + C2302 * C4101 + C2306 * C816 + C2301 * C830 +
              C2305 * C813 + C2300 * C823) *
                 C1392 -
             (C2307 * C4102 + C2302 * C4103 + C2306 * C829 + C2301 * C840 +
              C2305 * C824 + C2300 * C837) *
                 C50611) *
                C50764 * C50633) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C1391 +
            (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
            C172 * C50611) *
               C50764 * C111 +
           (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
               C50764 * C112 +
           (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
               C50764 * C113 +
           (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50611) *
               C50764 * C114) *
              C50940 +
          ((C475 * C1392 -
            ((C117 * C441 + C50748 * C452) * C1386 +
             (C117 * C435 + C50748 * C442) * C1391) +
            C476 * C50611) *
               C50764 * C111 +
           (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50611) *
               C50764 * C112 +
           (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50611) *
               C50764 * C113 +
           (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50611) *
               C50764 * C114) *
              C50929 +
          (((C117 * C944 + C50748 * C949) * C1391 +
            (C117 * C950 + C50748 * C959) * C1386 - C977 * C1392 -
            C978 * C50611) *
               C50764 * C111 +
           (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50611) *
               C50764 * C112 +
           (C979 * C1391 + C980 * C1386 - C981 * C1392 - C982 * C50611) *
               C50764 * C113 +
           (C981 * C1391 + C982 * C1386 -
            (C117 * C948 + C50748 * C957) * C1392 -
            (C117 * C958 + C50748 * C963) * C50611) *
               C50764 * C114) *
              C1875) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1391 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C1386 -
            (C2345 + C2346 + C2347) * C1392 -
            (C2348 + C2349 + C2350) * C50611) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C1391 + (C2350 + C2349 + C2348) * C1386 -
            (C2353 + C2352 + C2351) * C1392 -
            (C2356 + C2355 + C2354) * C50611) *
               C50764 * C50633) *
              C50940 +
          (((C2715 + C2716 + C2717) * C1392 -
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C1386 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C1391) +
            (C2718 + C2719 + C2720) * C50611) *
               C50764 * C2303 +
           ((C2723 + C2722 + C2721) * C1392 -
            ((C2720 + C2719 + C2718) * C1386 +
             (C2717 + C2716 + C2715) * C1391) +
            (C2726 + C2725 + C2724) * C50611) *
               C50764 * C50633) *
              C50929 +
          (((C2305 * C944 + C2300 * C949 + C2306 * C1083 + C2301 * C1091 +
             C2307 * C3316 + C2302 * C3319) *
                C1391 +
            (C2305 * C950 + C2300 * C959 + C2306 * C1090 + C2301 * C1095 +
             C2307 * C3320 + C2302 * C3325) *
                C1386 -
            (C3341 + C3342 + C3343) * C1392 -
            (C3344 + C3345 + C3346) * C50611) *
               C50764 * C2303 +
           ((C3343 + C3342 + C3341) * C1391 + (C3346 + C3345 + C3344) * C1386 -
            (C2307 * C3318 + C2302 * C3323 + C2306 * C1081 + C2301 * C1087 +
             C2305 * C946 + C2300 * C953) *
                C1392 -
            (C2307 * C3324 + C2302 * C3327 + C2306 * C1086 + C2301 * C1093 +
             C2305 * C954 + C2300 * C961) *
                C50611) *
               C50764 * C50633) *
              C1875) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50748 * C129) * C118 +
           (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50764 * C111 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C50764 * C112 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C50764 * C113 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50748 * C141) * C121 -
           (C117 * C142 + C50748 * C149) * C109) *
              C50764 * C114) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C49720 +
            (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
            C172 * C50611) *
               C50764 * C111 +
           (C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
               C50764 * C112 +
           (C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
               C50764 * C113 +
           (C175 * C49720 + C176 * C50878 - C177 * C49713 - C178 * C50611) *
               C50764 * C114) *
              C50694 * C582 +
          ((C327 * C49713 -
            ((C117 * C293 + C50748 * C304) * C50878 +
             (C117 * C287 + C50748 * C294) * C49720) +
            C328 * C50611) *
               C50764 * C111 +
           (C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
               C50764 * C112 +
           (C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
               C50764 * C113 +
           (C333 * C49713 - (C332 * C50878 + C331 * C49720) + C334 * C50611) *
               C50764 * C114) *
              C50694 * C583 +
          (((C117 * C587 + C50748 * C592) * C49720 +
            (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
            C621 * C50611) *
               C50764 * C111 +
           (C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
               C50764 * C112 +
           (C622 * C49720 + C623 * C50878 - C624 * C49713 - C625 * C50611) *
               C50764 * C113 +
           (C624 * C49720 + C625 * C50878 -
            (C117 * C591 + C50748 * C600) * C49713 -
            (C117 * C601 + C50748 * C606) * C50611) *
               C50764 * C114) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
            C2307 * C587 + C2302 * C592) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
            C2307 * C593 + C2302 * C602) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C50764 * C2303 +
          ((C2347 + C2346 + C2345) * C118 + (C2350 + C2349 + C2348) * C106 -
           (C2353 + C2352 + C2351) * C119 - (C2356 + C2355 + C2354) * C107 +
           (C2359 + C2358 + C2357) * C120 + (C2362 + C2361 + C2360) * C108 -
           (C2307 * C591 + C2302 * C600 + C2306 * C290 + C2301 * C300 +
            C2305 * C126 + C2300 * C137) *
               C121 -
           (C2307 * C601 + C2302 * C606 + C2306 * C301 + C2301 * C308 +
            C2305 * C138 + C2300 * C147) *
               C109) *
              C50764 * C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50878 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50611) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C49720 +
            (C2350 + C2349 + C2348) * C50878 -
            (C2353 + C2352 + C2351) * C49713 -
            (C2356 + C2355 + C2354) * C50611) *
               C50764 * C50633) *
              C50694 * C582 +
          (((C2533 + C2534 + C2535) * C49713 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50878 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C49720) +
            (C2536 + C2537 + C2538) * C50611) *
               C50764 * C2303 +
           ((C2541 + C2540 + C2539) * C49713 -
            ((C2538 + C2537 + C2536) * C50878 +
             (C2535 + C2534 + C2533) * C49720) +
            (C2544 + C2543 + C2542) * C50611) *
               C50764 * C50633) *
              C50694 * C583 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C49720 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50878 -
            (C2897 + C2898 + C2899) * C49713 -
            (C2900 + C2901 + C2902) * C50611) *
               C50764 * C2303 +
           ((C2899 + C2898 + C2897) * C49720 +
            (C2902 + C2901 + C2900) * C50878 -
            (C2307 * C2874 + C2302 * C2879 + C2306 * C698 + C2301 * C704 +
             C2305 * C589 + C2300 * C596) *
                C49713 -
            (C2307 * C2880 + C2302 * C2883 + C2306 * C703 + C2301 * C710 +
             C2305 * C597 + C2300 * C604) *
                C50611) *
               C50764 * C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C283 +
            (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50764 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C50764 * C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C50764 * C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C50764 * C114) *
              C50694 * C50893 +
          ((C327 * C284 -
            ((C117 * C293 + C50748 * C304) * C278 +
             (C117 * C287 + C50748 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C50764 * C111 +
           (C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
            C331 * C285 - C332 * C280) *
               C50764 * C112 +
           (C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
            C333 * C285 - C334 * C280) *
               C50764 * C113 +
           (C333 * C284 - (C332 * C278 + C331 * C283) + C334 * C279 -
            (C117 * C291 + C50748 * C302) * C285 -
            (C117 * C303 + C50748 * C309) * C280) *
               C50764 * C114) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C696 +
            (C117 * C130 + C50748 * C143) * C50606) *
               C50764 * C111 +
           (C171 * C696 + C172 * C50606) * C50764 * C112 +
           (C173 * C696 + C174 * C50606) * C50764 * C113 +
           (C175 * C696 + C176 * C50606) * C50764 * C114) *
              C50694 * C692 -
          ((C332 * C50606 + C331 * C696) * C50764 * C114 +
           (C330 * C50606 + C329 * C696) * C50764 * C113 +
           (C328 * C50606 + C327 * C696) * C50764 * C112 +
           ((C117 * C293 + C50748 * C304) * C50606 +
            (C117 * C287 + C50748 * C294) * C696) *
               C50764 * C111) *
              C50694 * C693 +
          (((C117 * C587 + C50748 * C592) * C696 +
            (C117 * C593 + C50748 * C602) * C50606) *
               C50764 * C111 +
           (C620 * C696 + C621 * C50606) * C50764 * C112 +
           (C622 * C696 + C623 * C50606) * C50764 * C113 +
           (C624 * C696 + C625 * C50606) * C50764 * C114) *
              C50694 * C694 -
          (((C117 * C701 + C50748 * C709) * C50606 +
            (C117 * C697 + C50748 * C702) * C696) *
               C50764 * C114 +
           ((C117 * C703 + C50748 * C710) * C50606 +
            (C117 * C698 + C50748 * C704) * C696) *
               C50764 * C113 +
           ((C117 * C705 + C50748 * C711) * C50606 +
            (C117 * C699 + C50748 * C706) * C696) *
               C50764 * C112 +
           ((C117 * C707 + C50748 * C712) * C50606 +
            (C117 * C700 + C50748 * C708) * C696) *
               C50764 * C111) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C279 +
            (C2359 + C2358 + C2357) * C285 + (C2362 + C2361 + C2360) * C280) *
               C50764 * C50633) *
              C50694 * C50893 +
          (((C2533 + C2534 + C2535) * C284 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C278 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C283) +
            (C2536 + C2537 + C2538) * C279 - (C2539 + C2540 + C2541) * C285 -
            (C2542 + C2543 + C2544) * C280) *
               C50764 * C2303 +
           ((C2541 + C2540 + C2539) * C284 -
            ((C2538 + C2537 + C2536) * C278 + (C2535 + C2534 + C2533) * C283) +
            (C2544 + C2543 + C2542) * C279 -
            (C2307 * C697 + C2302 * C702 + C2306 * C590 + C2301 * C598 +
             C2305 * C289 + C2300 * C298) *
                C285 -
            (C2307 * C701 + C2302 * C709 + C2306 * C599 + C2301 * C605 +
             C2305 * C299 + C2300 * C307) *
                C280) *
               C50764 * C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C696 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50606) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C696 + (C2350 + C2349 + C2348) * C50606) *
               C50764 * C50633) *
              C50694 * C692 -
          (((C2538 + C2537 + C2536) * C50606 + (C2535 + C2534 + C2533) * C696) *
               C50764 * C50633 +
           ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
             C2305 * C293 + C2300 * C304) *
                C50606 +
            (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
             C2305 * C287 + C2300 * C294) *
                C696) *
               C50764 * C2303) *
              C50694 * C693 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C696 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50606) *
               C50764 * C2303 +
           ((C2899 + C2898 + C2897) * C696 + (C2902 + C2901 + C2900) * C50606) *
               C50764 * C50633) *
              C50694 * C694 -
          (((C2307 * C3002 + C2302 * C3006 + C2306 * C2878 + C2301 * C2882 +
             C2305 * C705 + C2300 * C711) *
                C50606 +
            (C2307 * C3000 + C2302 * C3003 + C2306 * C2873 + C2301 * C2877 +
             C2305 * C699 + C2300 * C706) *
                C696) *
               C50764 * C50633 +
           ((C2307 * C3004 + C2302 * C3007 + C2306 * C2876 + C2301 * C2881 +
             C2305 * C707 + C2300 * C712) *
                C50606 +
            (C2307 * C3001 + C2302 * C3005 + C2306 * C2872 + C2301 * C2875 +
             C2305 * C700 + C2300 * C708) *
                C696) *
               C50764 * C2303) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C283 +
            (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50764 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C50764 * C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C50764 * C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C50764 * C114) *
              C50894 +
          ((C475 * C284 -
            ((C117 * C441 + C50748 * C452) * C278 +
             (C117 * C435 + C50748 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C50764 * C111 +
           (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
            C479 * C285 - C480 * C280) *
               C50764 * C112 +
           (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
            C481 * C285 - C482 * C280) *
               C50764 * C113 +
           (C481 * C284 - (C480 * C278 + C479 * C283) + C482 * C279 -
            (C117 * C439 + C50748 * C450) * C285 -
            (C117 * C451 + C50748 * C457) * C280) *
               C50764 * C114) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C50764 * C111 +
            (C171 * C696 + C172 * C50606) * C50764 * C112 +
            (C173 * C696 + C174 * C50606) * C50764 * C113 +
            (C175 * C696 + C176 * C50606) * C50764 * C114) *
               C50894 -
           ((C480 * C50606 + C479 * C696) * C50764 * C114 +
            (C478 * C50606 + C477 * C696) * C50764 * C113 +
            (C476 * C50606 + C475 * C696) * C50764 * C112 +
            ((C117 * C441 + C50748 * C452) * C50606 +
             (C117 * C435 + C50748 * C442) * C696) *
                C50764 * C111) *
               C50706) *
              C582 +
          ((((C117 * C811 + C50748 * C819) * C696 +
             (C117 * C820 + C50748 * C835) * C50606) *
                C50764 * C111 +
            ((C117 * C812 + C50748 * C821) * C696 +
             (C117 * C822 + C50748 * C836) * C50606) *
                C50764 * C112 +
            ((C117 * C813 + C50748 * C823) * C696 +
             (C117 * C824 + C50748 * C837) * C50606) *
                C50764 * C113 +
            ((C117 * C814 + C50748 * C825) * C696 +
             (C117 * C826 + C50748 * C838) * C50606) *
                C50764 * C114) *
               C50706 -
           ((C332 * C50606 + C331 * C696) * C50764 * C114 +
            (C330 * C50606 + C329 * C696) * C50764 * C113 +
            (C328 * C50606 + C327 * C696) * C50764 * C112 +
            ((C117 * C293 + C50748 * C304) * C50606 +
             (C117 * C287 + C50748 * C294) * C696) *
                C50764 * C111) *
               C50894) *
              C583 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C50764 * C111 +
            (C620 * C696 + C621 * C50606) * C50764 * C112 +
            (C622 * C696 + C623 * C50606) * C50764 * C113 +
            (C624 * C696 + C625 * C50606) * C50764 * C114) *
               C50894 -
           (((C117 * C827 + C50748 * C839) * C50606 +
             (C117 * C815 + C50748 * C828) * C696) *
                C50764 * C114 +
            ((C117 * C829 + C50748 * C840) * C50606 +
             (C117 * C816 + C50748 * C830) * C696) *
                C50764 * C113 +
            ((C117 * C831 + C50748 * C841) * C50606 +
             (C117 * C817 + C50748 * C832) * C696) *
                C50764 * C112 +
            ((C117 * C833 + C50748 * C842) * C50606 +
             (C117 * C818 + C50748 * C834) * C696) *
                C50764 * C111) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C50764 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C279 +
            (C2359 + C2358 + C2357) * C285 + (C2362 + C2361 + C2360) * C280) *
               C50764 * C50633) *
              C50894 +
          (((C2715 + C2716 + C2717) * C284 -
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C278 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C283) +
            (C2718 + C2719 + C2720) * C279 - (C2721 + C2722 + C2723) * C285 -
            (C2724 + C2725 + C2726) * C280) *
               C50764 * C2303 +
           ((C2723 + C2722 + C2721) * C284 -
            ((C2720 + C2719 + C2718) * C278 + (C2717 + C2716 + C2715) * C283) +
            (C2726 + C2725 + C2724) * C279 -
            (C2307 * C815 + C2302 * C828 + C2306 * C814 + C2301 * C825 +
             C2305 * C437 + C2300 * C446) *
                C285 -
            (C2307 * C827 + C2302 * C839 + C2306 * C826 + C2301 * C838 +
             C2305 * C447 + C2300 * C455) *
                C280) *
               C50764 * C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C50764 * C2303 +
            ((C2347 + C2346 + C2345) * C696 +
             (C2350 + C2349 + C2348) * C50606) *
                C50764 * C50633) *
               C50894 -
           (((C2720 + C2719 + C2718) * C50606 +
             (C2717 + C2716 + C2715) * C696) *
                C50764 * C50633 +
            ((C2307 * C833 + C2302 * C842 + C2306 * C820 + C2301 * C835 +
              C2305 * C441 + C2300 * C452) *
                 C50606 +
             (C2307 * C818 + C2302 * C834 + C2306 * C811 + C2301 * C819 +
              C2305 * C435 + C2300 * C442) *
                 C696) *
                C50764 * C2303) *
               C50706) *
              C582 +
          ((((C2305 * C811 + C2300 * C819 + C2306 * C818 + C2301 * C834 +
              C2307 * C3154 + C2302 * C3158) *
                 C696 +
             (C2305 * C820 + C2300 * C835 + C2306 * C833 + C2301 * C842 +
              C2307 * C3159 + C2302 * C3166) *
                 C50606) *
                C50764 * C2303 +
            ((C2305 * C812 + C2300 * C821 + C2306 * C817 + C2301 * C832 +
              C2307 * C3155 + C2302 * C3160) *
                 C696 +
             (C2305 * C822 + C2300 * C836 + C2306 * C831 + C2301 * C841 +
              C2307 * C3161 + C2302 * C3167) *
                 C50606) *
                C50764 * C50633) *
               C50706 -
           (((C2538 + C2537 + C2536) * C50606 +
             (C2535 + C2534 + C2533) * C696) *
                C50764 * C50633 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C50764 * C2303) *
               C50894) *
              C583 +
          ((((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
              C2307 * C2872 + C2302 * C2875) *
                 C696 +
             (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
              C2307 * C2876 + C2302 * C2881) *
                 C50606) *
                C50764 * C2303 +
            ((C2899 + C2898 + C2897) * C696 +
             (C2902 + C2901 + C2900) * C50606) *
                C50764 * C50633) *
               C50894 -
           (((C2307 * C3162 + C2302 * C3168 + C2306 * C3161 + C2301 * C3167 +
              C2305 * C831 + C2300 * C841) *
                 C50606 +
             (C2307 * C3156 + C2302 * C3163 + C2306 * C3155 + C2301 * C3160 +
              C2305 * C817 + C2300 * C832) *
                 C696) *
                C50764 * C50633 +
            ((C2307 * C3164 + C2302 * C3169 + C2306 * C3159 + C2301 * C3166 +
              C2305 * C833 + C2300 * C842) *
                 C50606 +
             (C2307 * C3157 + C2302 * C3165 + C2306 * C3154 + C2301 * C3158 +
              C2305 * C818 + C2300 * C834) *
                 C696) *
                C50764 * C2303) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C1285 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50936 -
                    (C24740 + C24741 + C24742) * C1286 -
                    (C24743 + C24744 + C24745) * C50920 +
                    (C24746 + C24747 + C24748) * C1287 +
                    (C24749 + C24750 + C24751) * C1282) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C1285 +
                    (C24745 + C24744 + C24743) * C50936 -
                    (C24748 + C24747 + C24746) * C1286 -
                    (C24751 + C24750 + C24749) * C50920 +
                    (C24754 + C24753 + C24752) * C1287 +
                    (C24757 + C24756 + C24755) * C1282) *
                       C50764 * C50633) *
                      C50694 * C1283 +
                  (((C24928 + C24929 + C24930) * C1286 -
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50936 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C1285) +
                    (C24931 + C24932 + C24933) * C50920 -
                    (C24934 + C24935 + C24936) * C1287 -
                    (C24937 + C24938 + C24939) * C1282) *
                       C50764 * C50887 +
                   ((C24936 + C24935 + C24934) * C1286 -
                    ((C24933 + C24932 + C24931) * C50936 +
                     (C24930 + C24929 + C24928) * C1285) +
                    (C24939 + C24938 + C24937) * C50920 -
                    (C24702 * C697 + C24697 * C702 + C24701 * C590 +
                     C50942 * C598 + C24700 * C289 + C50941 * C298) *
                        C1287 -
                    (C24702 * C701 + C24697 * C709 + C24701 * C599 +
                     C50942 * C605 + C24700 * C299 + C50941 * C307) *
                        C1282) *
                       C50764 * C50633) *
                      C50694 * C50682)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C1391 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C1386 -
                    (C24740 + C24741 + C24742) * C1392 -
                    (C24743 + C24744 + C24745) * C50611) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C1391 +
                    (C24745 + C24744 + C24743) * C1386 -
                    (C24748 + C24747 + C24746) * C1392 -
                    (C24751 + C24750 + C24749) * C50611) *
                       C50764 * C50633) *
                      C50694 * C50939 +
                  (((C24928 + C24929 + C24930) * C1392 -
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C1386 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C1391) +
                    (C24931 + C24932 + C24933) * C50611) *
                       C50764 * C50887 +
                   ((C24936 + C24935 + C24934) * C1392 -
                    ((C24933 + C24932 + C24931) * C1386 +
                     (C24930 + C24929 + C24928) * C1391) +
                    (C24939 + C24938 + C24937) * C50611) *
                       C50764 * C50633) *
                      C50694 * C50926 +
                  (((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                     C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                        C1391 +
                    (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                     C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                        C1386 -
                    (C25280 + C25281 + C25282) * C1392 -
                    (C25283 + C25284 + C25285) * C50611) *
                       C50764 * C50887 +
                   ((C25282 + C25281 + C25280) * C1391 +
                    (C25285 + C25284 + C25283) * C1386 -
                    (C24702 * C2874 + C24697 * C2879 + C24701 * C698 +
                     C50942 * C704 + C24700 * C589 + C50941 * C596) *
                        C1392 -
                    (C24702 * C2880 + C24697 * C2883 + C24701 * C703 +
                     C50942 * C710 + C24700 * C597 + C50941 * C604) *
                        C50611) *
                       C50764 * C50633) *
                      C50694 * C1390)) /
                (p * q * std::sqrt(p + q));
    d2ee[77] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C1391 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C1386 -
                     (C24740 + C24741 + C24742) * C1392 -
                     (C24743 + C24744 + C24745) * C50611) *
                        C50764 * C50887 +
                    ((C24742 + C24741 + C24740) * C1391 +
                     (C24745 + C24744 + C24743) * C1386 -
                     (C24748 + C24747 + C24746) * C1392 -
                     (C24751 + C24750 + C24749) * C50611) *
                        C50764 * C50633) *
                       C50894 +
                   (((C25110 + C25111 + C25112) * C1392 -
                     ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                       C50942 * C835 + C24700 * C441 + C50941 * C452) *
                          C1386 +
                      (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                       C50942 * C819 + C24700 * C435 + C50941 * C442) *
                          C1391) +
                     (C25113 + C25114 + C25115) * C50611) *
                        C50764 * C50887 +
                    ((C25118 + C25117 + C25116) * C1392 -
                     ((C25115 + C25114 + C25113) * C1386 +
                      (C25112 + C25111 + C25110) * C1391) +
                     (C25121 + C25120 + C25119) * C50611) *
                        C50764 * C50633) *
                       C50706) *
                      C1283 +
                  ((((C24928 + C24929 + C24930) * C1392 -
                     ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                       C50942 * C602 + C24700 * C293 + C50941 * C304) *
                          C1386 +
                      (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                       C50942 * C592 + C24700 * C287 + C50941 * C294) *
                          C1391) +
                     (C24931 + C24932 + C24933) * C50611) *
                        C50764 * C50887 +
                    ((C24936 + C24935 + C24934) * C1392 -
                     ((C24933 + C24932 + C24931) * C1386 +
                      (C24930 + C24929 + C24928) * C1391) +
                     (C24939 + C24938 + C24937) * C50611) *
                        C50764 * C50633) *
                       C50894 +
                   (((C24700 * C811 + C50941 * C819 + C24701 * C818 +
                      C50942 * C834 + C24702 * C3154 + C24697 * C3158) *
                         C1391 +
                     (C24700 * C820 + C50941 * C835 + C24701 * C833 +
                      C50942 * C842 + C24702 * C3159 + C24697 * C3166) *
                         C1386 -
                     (C26436 + C26437 + C26438) * C1392 -
                     (C26439 + C26440 + C26441) * C50611) *
                        C50764 * C50887 +
                    ((C26438 + C26437 + C26436) * C1391 +
                     (C26441 + C26440 + C26439) * C1386 -
                     (C24702 * C4100 + C24697 * C4101 + C24701 * C816 +
                      C50942 * C830 + C24700 * C813 + C50941 * C823) *
                         C1392 -
                     (C24702 * C4102 + C24697 * C4103 + C24701 * C829 +
                      C50942 * C840 + C24700 * C824 + C50941 * C837) *
                         C50611) *
                        C50764 * C50633) *
                       C50706) *
                      C50682)) /
                (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C49720 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50878 -
                     (C24740 + C24741 + C24742) * C49713 -
                     (C24743 + C24744 + C24745) * C50611) *
                        C50764 * C50887 +
                    ((C24742 + C24741 + C24740) * C49720 +
                     (C24745 + C24744 + C24743) * C50878 -
                     (C24748 + C24747 + C24746) * C49713 -
                     (C24751 + C24750 + C24749) * C50611) *
                        C50764 * C50633) *
                       C1643 +
                   (((C25110 + C25111 + C25112) * C49713 -
                     ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                       C50942 * C835 + C24700 * C441 + C50941 * C452) *
                          C50878 +
                      (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                       C50942 * C819 + C24700 * C435 + C50941 * C442) *
                          C49720) +
                     (C25113 + C25114 + C25115) * C50611) *
                        C50764 * C50887 +
                    ((C25118 + C25117 + C25116) * C49713 -
                     ((C25115 + C25114 + C25113) * C50878 +
                      (C25112 + C25111 + C25110) * C49720) +
                     (C25121 + C25120 + C25119) * C50611) *
                        C50764 * C50633) *
                       C50706) *
                      C1283 +
                  ((((C24928 + C24929 + C24930) * C49713 -
                     ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                       C50942 * C602 + C24700 * C293 + C50941 * C304) *
                          C50878 +
                      (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                       C50942 * C592 + C24700 * C287 + C50941 * C294) *
                          C49720) +
                     (C24931 + C24932 + C24933) * C50611) *
                        C50764 * C50887 +
                    ((C24936 + C24935 + C24934) * C49713 -
                     ((C24933 + C24932 + C24931) * C50878 +
                      (C24930 + C24929 + C24928) * C49720) +
                     (C24939 + C24938 + C24937) * C50611) *
                        C50764 * C50633) *
                       C1643 +
                   (((C24700 * C811 + C50941 * C819 + C24701 * C818 +
                      C50942 * C834 + C24702 * C3154 + C24697 * C3158) *
                         C49720 +
                     (C24700 * C820 + C50941 * C835 + C24701 * C833 +
                      C50942 * C842 + C24702 * C3159 + C24697 * C3166) *
                         C50878 -
                     (C26436 + C26437 + C26438) * C49713 -
                     (C26439 + C26440 + C26441) * C50611) *
                        C50764 * C50887 +
                    ((C26438 + C26437 + C26436) * C49720 +
                     (C26441 + C26440 + C26439) * C50878 -
                     (C24702 * C4100 + C24697 * C4101 + C24701 * C816 +
                      C50942 * C830 + C24700 * C813 + C50941 * C823) *
                         C49713 -
                     (C24702 * C4102 + C24697 * C4103 + C24701 * C829 +
                      C50942 * C840 + C24700 * C824 + C50941 * C837) *
                         C50611) *
                        C50764 * C50633) *
                       C50706) *
                      C50682)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C696 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50606) *
                        C50764 * C50887 +
                    ((C24742 + C24741 + C24740) * C696 +
                     (C24745 + C24744 + C24743) * C50606) *
                        C50764 * C50633) *
                       C1643 -
                   (((C25115 + C25114 + C25113) * C50606 +
                     (C25112 + C25111 + C25110) * C696) *
                        C50764 * C50633 +
                    ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                      C50942 * C835 + C24700 * C441 + C50941 * C452) *
                         C50606 +
                     (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                      C50942 * C819 + C24700 * C435 + C50941 * C442) *
                         C696) *
                        C50764 * C50887) *
                       C50706) *
                      C50939 +
                  ((((C24700 * C811 + C50941 * C819 + C24701 * C818 +
                      C50942 * C834 + C24702 * C3154 + C24697 * C3158) *
                         C696 +
                     (C24700 * C820 + C50941 * C835 + C24701 * C833 +
                      C50942 * C842 + C24702 * C3159 + C24697 * C3166) *
                         C50606) *
                        C50764 * C50887 +
                    ((C26438 + C26437 + C26436) * C696 +
                     (C26441 + C26440 + C26439) * C50606) *
                        C50764 * C50633) *
                       C50706 -
                   (((C24933 + C24932 + C24931) * C50606 +
                     (C24930 + C24929 + C24928) * C696) *
                        C50764 * C50633 +
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50606 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C696) *
                        C50764 * C50887) *
                       C1643) *
                      C50926 +
                  ((((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                      C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                         C696 +
                     (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                      C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                         C50606) *
                        C50764 * C50887 +
                    ((C25282 + C25281 + C25280) * C696 +
                     (C25285 + C25284 + C25283) * C50606) *
                        C50764 * C50633) *
                       C1643 -
                   (((C24702 * C3162 + C24697 * C3168 + C24701 * C3161 +
                      C50942 * C3167 + C24700 * C831 + C50941 * C841) *
                         C50606 +
                     (C24702 * C3156 + C24697 * C3163 + C24701 * C3155 +
                      C50942 * C3160 + C24700 * C817 + C50941 * C832) *
                         C696) *
                        C50764 * C50633 +
                    ((C24702 * C3164 + C24697 * C3169 + C24701 * C3159 +
                      C50942 * C3166 + C24700 * C833 + C50941 * C842) *
                         C50606 +
                     (C24702 * C3157 + C24697 * C3165 + C24701 * C3154 +
                      C50942 * C3158 + C24700 * C818 + C50941 * C834) *
                         C696) *
                        C50764 * C50887) *
                       C50706) *
                      C1390)) /
                (p * q * std::sqrt(p + q));
    d2ee[80] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C696 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50606) *
                        C50764 * C50887 +
                    ((C24742 + C24741 + C24740) * C696 +
                     (C24745 + C24744 + C24743) * C50606) *
                        C50764 * C50633) *
                       C50940 -
                   (((C25115 + C25114 + C25113) * C50606 +
                     (C25112 + C25111 + C25110) * C696) *
                        C50764 * C50633 +
                    ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                      C50942 * C835 + C24700 * C441 + C50941 * C452) *
                         C50606 +
                     (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                      C50942 * C819 + C24700 * C435 + C50941 * C442) *
                         C696) *
                        C50764 * C50887) *
                       C50929 +
                   (((C24700 * C944 + C50941 * C949 + C24701 * C1083 +
                      C50942 * C1091 + C24702 * C3316 + C24697 * C3319) *
                         C696 +
                     (C24700 * C950 + C50941 * C959 + C24701 * C1090 +
                      C50942 * C1095 + C24702 * C3320 + C24697 * C3325) *
                         C50606) *
                        C50764 * C50887 +
                    ((C25690 + C25689 + C25688) * C696 +
                     (C25693 + C25692 + C25691) * C50606) *
                        C50764 * C50633) *
                       C1875) *
                      C1283 +
                  ((((C24700 * C811 + C50941 * C819 + C24701 * C818 +
                      C50942 * C834 + C24702 * C3154 + C24697 * C3158) *
                         C696 +
                     (C24700 * C820 + C50941 * C835 + C24701 * C833 +
                      C50942 * C842 + C24702 * C3159 + C24697 * C3166) *
                         C50606) *
                        C50764 * C50887 +
                    ((C26438 + C26437 + C26436) * C696 +
                     (C26441 + C26440 + C26439) * C50606) *
                        C50764 * C50633) *
                       C50929 -
                   (((C24933 + C24932 + C24931) * C50606 +
                     (C24930 + C24929 + C24928) * C696) *
                        C50764 * C50633 +
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50606 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C696) *
                        C50764 * C50887) *
                       C50940 -
                   (((C24702 * C3494 + C24697 * C3498 + C24701 * C3322 +
                      C50942 * C3326 + C24700 * C1088 + C50941 * C1094) *
                         C50606 +
                     (C24702 * C3492 + C24697 * C3495 + C24701 * C3317 +
                      C50942 * C3321 + C24700 * C1082 + C50941 * C1089) *
                         C696) *
                        C50764 * C50633 +
                    ((C24702 * C3496 + C24697 * C3499 + C24701 * C3320 +
                      C50942 * C3325 + C24700 * C1090 + C50941 * C1095) *
                         C50606 +
                     (C24702 * C3493 + C24697 * C3497 + C24701 * C3316 +
                      C50942 * C3319 + C24700 * C1083 + C50941 * C1091) *
                         C696) *
                        C50764 * C50887) *
                       C1875) *
                      C50682)) /
                (p * q * std::sqrt(p + q));
    d2ee[81] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C49720 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50878 -
                    (C24740 + C24741 + C24742) * C49713 -
                    (C24743 + C24744 + C24745) * C50611) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C49720 +
                    (C24745 + C24744 + C24743) * C50878 -
                    (C24748 + C24747 + C24746) * C49713 -
                    (C24751 + C24750 + C24749) * C50611) *
                       C50764 * C50633) *
                      C50694 * C582 +
                  (((C24928 + C24929 + C24930) * C49713 -
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50878 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C49720) +
                    (C24931 + C24932 + C24933) * C50611) *
                       C50764 * C50887 +
                   ((C24936 + C24935 + C24934) * C49713 -
                    ((C24933 + C24932 + C24931) * C50878 +
                     (C24930 + C24929 + C24928) * C49720) +
                    (C24939 + C24938 + C24937) * C50611) *
                       C50764 * C50633) *
                      C50694 * C583 +
                  (((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                     C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                        C49720 +
                    (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                     C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                        C50878 -
                    (C25280 + C25281 + C25282) * C49713 -
                    (C25283 + C25284 + C25285) * C50611) *
                       C50764 * C50887 +
                   ((C25282 + C25281 + C25280) * C49720 +
                    (C25285 + C25284 + C25283) * C50878 -
                    (C24702 * C2874 + C24697 * C2879 + C24701 * C698 +
                     C50942 * C704 + C24700 * C589 + C50941 * C596) *
                        C49713 -
                    (C24702 * C2880 + C24697 * C2883 + C24701 * C703 +
                     C50942 * C710 + C24700 * C597 + C50941 * C604) *
                        C50611) *
                       C50764 * C50633) *
                      C50694 * C584)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                    C50942 * C294 + C24702 * C587 + C24697 * C592) *
                       C118 +
                   (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                    C50942 * C304 + C24702 * C593 + C24697 * C602) *
                       C106 -
                   (C24740 + C24741 + C24742) * C119 -
                   (C24743 + C24744 + C24745) * C107 +
                   (C24746 + C24747 + C24748) * C120 +
                   (C24749 + C24750 + C24751) * C108 -
                   (C24752 + C24753 + C24754) * C121 -
                   (C24755 + C24756 + C24757) * C109) *
                      C50764 * C50887 +
                  ((C24742 + C24741 + C24740) * C118 +
                   (C24745 + C24744 + C24743) * C106 -
                   (C24748 + C24747 + C24746) * C119 -
                   (C24751 + C24750 + C24749) * C107 +
                   (C24754 + C24753 + C24752) * C120 +
                   (C24757 + C24756 + C24755) * C108 -
                   (C24702 * C591 + C24697 * C600 + C24701 * C290 +
                    C50942 * C300 + C24700 * C126 + C50941 * C137) *
                       C121 -
                   (C24702 * C601 + C24697 * C606 + C24701 * C301 +
                    C50942 * C308 + C24700 * C138 + C50941 * C147) *
                       C109) *
                      C50764 * C50633) *
                 C50694 * C50668) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C49720 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50878 -
                    (C24740 + C24741 + C24742) * C49713 -
                    (C24743 + C24744 + C24745) * C50611) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C49720 +
                    (C24745 + C24744 + C24743) * C50878 -
                    (C24748 + C24747 + C24746) * C49713 -
                    (C24751 + C24750 + C24749) * C50611) *
                       C50764 * C50633) *
                      C941 +
                  (((C25110 + C25111 + C25112) * C49713 -
                    ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                      C50942 * C835 + C24700 * C441 + C50941 * C452) *
                         C50878 +
                     (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                      C50942 * C819 + C24700 * C435 + C50941 * C442) *
                         C49720) +
                    (C25113 + C25114 + C25115) * C50611) *
                       C50764 * C50887 +
                   ((C25118 + C25117 + C25116) * C49713 -
                    ((C25115 + C25114 + C25113) * C50878 +
                     (C25112 + C25111 + C25110) * C49720) +
                    (C25121 + C25120 + C25119) * C50611) *
                       C50764 * C50633) *
                      C942 +
                  (((C24700 * C944 + C50941 * C949 + C24701 * C1083 +
                     C50942 * C1091 + C24702 * C3316 + C24697 * C3319) *
                        C49720 +
                    (C24700 * C950 + C50941 * C959 + C24701 * C1090 +
                     C50942 * C1095 + C24702 * C3320 + C24697 * C3325) *
                        C50878 -
                    (C25688 + C25689 + C25690) * C49713 -
                    (C25691 + C25692 + C25693) * C50611) *
                       C50764 * C50887 +
                   ((C25690 + C25689 + C25688) * C49720 +
                    (C25693 + C25692 + C25691) * C50878 -
                    (C24702 * C3318 + C24697 * C3323 + C24701 * C1081 +
                     C50942 * C1087 + C24700 * C946 + C50941 * C953) *
                        C49713 -
                    (C24702 * C3324 + C24697 * C3327 + C24701 * C1086 +
                     C50942 * C1093 + C24700 * C954 + C50941 * C961) *
                        C50611) *
                       C50764 * C50633) *
                      C943) *
                 C50668) /
                    (p * q * std::sqrt(p + q));
    d2ee[82] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C696 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50606) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C696 +
                    (C24745 + C24744 + C24743) * C50606) *
                       C50764 * C50633) *
                      C50694 * C692 -
                  (((C24933 + C24932 + C24931) * C50606 +
                    (C24930 + C24929 + C24928) * C696) *
                       C50764 * C50633 +
                   ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                     C50942 * C602 + C24700 * C293 + C50941 * C304) *
                        C50606 +
                    (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                     C50942 * C592 + C24700 * C287 + C50941 * C294) *
                        C696) *
                       C50764 * C50887) *
                      C50694 * C693 +
                  (((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                     C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                        C696 +
                    (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                     C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                        C50606) *
                       C50764 * C50887 +
                   ((C25282 + C25281 + C25280) * C696 +
                    (C25285 + C25284 + C25283) * C50606) *
                       C50764 * C50633) *
                      C50694 * C694 -
                  (((C24702 * C3002 + C24697 * C3006 + C24701 * C2878 +
                     C50942 * C2882 + C24700 * C705 + C50941 * C711) *
                        C50606 +
                    (C24702 * C3000 + C24697 * C3003 + C24701 * C2873 +
                     C50942 * C2877 + C24700 * C699 + C50941 * C706) *
                        C696) *
                       C50764 * C50633 +
                   ((C24702 * C3004 + C24697 * C3007 + C24701 * C2876 +
                     C50942 * C2881 + C24700 * C707 + C50941 * C712) *
                        C50606 +
                    (C24702 * C3001 + C24697 * C3005 + C24701 * C2872 +
                     C50942 * C2875 + C24700 * C700 + C50941 * C708) *
                        C696) *
                       C50764 * C50887) *
                      C50694 * C695)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C283 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C278 -
                    (C24740 + C24741 + C24742) * C284 -
                    (C24743 + C24744 + C24745) * C279 +
                    (C24746 + C24747 + C24748) * C285 +
                    (C24749 + C24750 + C24751) * C280) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C283 +
                    (C24745 + C24744 + C24743) * C278 -
                    (C24748 + C24747 + C24746) * C284 -
                    (C24751 + C24750 + C24749) * C279 +
                    (C24754 + C24753 + C24752) * C285 +
                    (C24757 + C24756 + C24755) * C280) *
                       C50764 * C50633) *
                      C50694 * C50893 +
                  (((C24928 + C24929 + C24930) * C284 -
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C278 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C283) +
                    (C24931 + C24932 + C24933) * C279 -
                    (C24934 + C24935 + C24936) * C285 -
                    (C24937 + C24938 + C24939) * C280) *
                       C50764 * C50887 +
                   ((C24936 + C24935 + C24934) * C284 -
                    ((C24933 + C24932 + C24931) * C278 +
                     (C24930 + C24929 + C24928) * C283) +
                    (C24939 + C24938 + C24937) * C279 -
                    (C24702 * C697 + C24697 * C702 + C24701 * C590 +
                     C50942 * C598 + C24700 * C289 + C50941 * C298) *
                        C285 -
                    (C24702 * C701 + C24697 * C709 + C24701 * C599 +
                     C50942 * C605 + C24700 * C299 + C50941 * C307) *
                        C280) *
                       C50764 * C50633) *
                      C50694 * C50682)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C696 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50606) *
                        C50764 * C50887 +
                    ((C24742 + C24741 + C24740) * C696 +
                     (C24745 + C24744 + C24743) * C50606) *
                        C50764 * C50633) *
                       C941 -
                   (((C25115 + C25114 + C25113) * C50606 +
                     (C25112 + C25111 + C25110) * C696) *
                        C50764 * C50633 +
                    ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                      C50942 * C835 + C24700 * C441 + C50941 * C452) *
                         C50606 +
                     (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                      C50942 * C819 + C24700 * C435 + C50941 * C442) *
                         C696) *
                        C50764 * C50887) *
                       C942 +
                   (((C24700 * C944 + C50941 * C949 + C24701 * C1083 +
                      C50942 * C1091 + C24702 * C3316 + C24697 * C3319) *
                         C696 +
                     (C24700 * C950 + C50941 * C959 + C24701 * C1090 +
                      C50942 * C1095 + C24702 * C3320 + C24697 * C3325) *
                         C50606) *
                        C50764 * C50887 +
                    ((C25690 + C25689 + C25688) * C696 +
                     (C25693 + C25692 + C25691) * C50606) *
                        C50764 * C50633) *
                       C943) *
                      C50893 +
                  ((((C24700 * C811 + C50941 * C819 + C24701 * C818 +
                      C50942 * C834 + C24702 * C3154 + C24697 * C3158) *
                         C696 +
                     (C24700 * C820 + C50941 * C835 + C24701 * C833 +
                      C50942 * C842 + C24702 * C3159 + C24697 * C3166) *
                         C50606) *
                        C50764 * C50887 +
                    ((C24700 * C812 + C50941 * C821 + C24701 * C817 +
                      C50942 * C832 + C24702 * C3155 + C24697 * C3160) *
                         C696 +
                     (C24700 * C822 + C50941 * C836 + C24701 * C831 +
                      C50942 * C841 + C24702 * C3161 + C24697 * C3167) *
                         C50606) *
                        C50764 * C50633) *
                       C942 -
                   (((C24933 + C24932 + C24931) * C50606 +
                     (C24930 + C24929 + C24928) * C696) *
                        C50764 * C50633 +
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50606 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C696) *
                        C50764 * C50887) *
                       C941 -
                   (((C24702 * C3494 + C24697 * C3498 + C24701 * C3322 +
                      C50942 * C3326 + C24700 * C1088 + C50941 * C1094) *
                         C50606 +
                     (C24702 * C3492 + C24697 * C3495 + C24701 * C3317 +
                      C50942 * C3321 + C24700 * C1082 + C50941 * C1089) *
                         C696) *
                        C50764 * C50633 +
                    ((C24702 * C3496 + C24697 * C3499 + C24701 * C3320 +
                      C50942 * C3325 + C24700 * C1090 + C50941 * C1095) *
                         C50606 +
                     (C24702 * C3493 + C24697 * C3497 + C24701 * C3316 +
                      C50942 * C3319 + C24700 * C1083 + C50941 * C1091) *
                         C696) *
                        C50764 * C50887) *
                       C943) *
                      C50682)) /
                    (p * q * std::sqrt(p + q));
    d2ee[83] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C696 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50606) *
                        C50764 * C50887 +
                    ((C24742 + C24741 + C24740) * C696 +
                     (C24745 + C24744 + C24743) * C50606) *
                        C50764 * C50633) *
                       C50894 -
                   (((C25115 + C25114 + C25113) * C50606 +
                     (C25112 + C25111 + C25110) * C696) *
                        C50764 * C50633 +
                    ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                      C50942 * C835 + C24700 * C441 + C50941 * C452) *
                         C50606 +
                     (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                      C50942 * C819 + C24700 * C435 + C50941 * C442) *
                         C696) *
                        C50764 * C50887) *
                       C50706) *
                      C582 +
                  ((((C24700 * C811 + C50941 * C819 + C24701 * C818 +
                      C50942 * C834 + C24702 * C3154 + C24697 * C3158) *
                         C696 +
                     (C24700 * C820 + C50941 * C835 + C24701 * C833 +
                      C50942 * C842 + C24702 * C3159 + C24697 * C3166) *
                         C50606) *
                        C50764 * C50887 +
                    ((C24700 * C812 + C50941 * C821 + C24701 * C817 +
                      C50942 * C832 + C24702 * C3155 + C24697 * C3160) *
                         C696 +
                     (C24700 * C822 + C50941 * C836 + C24701 * C831 +
                      C50942 * C841 + C24702 * C3161 + C24697 * C3167) *
                         C50606) *
                        C50764 * C50633) *
                       C50706 -
                   (((C24933 + C24932 + C24931) * C50606 +
                     (C24930 + C24929 + C24928) * C696) *
                        C50764 * C50633 +
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50606 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C696) *
                        C50764 * C50887) *
                       C50894) *
                      C583 +
                  ((((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                      C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                         C696 +
                     (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                      C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                         C50606) *
                        C50764 * C50887 +
                    ((C25282 + C25281 + C25280) * C696 +
                     (C25285 + C25284 + C25283) * C50606) *
                        C50764 * C50633) *
                       C50894 -
                   (((C24702 * C3162 + C24697 * C3168 + C24701 * C3161 +
                      C50942 * C3167 + C24700 * C831 + C50941 * C841) *
                         C50606 +
                     (C24702 * C3156 + C24697 * C3163 + C24701 * C3155 +
                      C50942 * C3160 + C24700 * C817 + C50941 * C832) *
                         C696) *
                        C50764 * C50633 +
                    ((C24702 * C3164 + C24697 * C3169 + C24701 * C3159 +
                      C50942 * C3166 + C24700 * C833 + C50941 * C842) *
                         C50606 +
                     (C24702 * C3157 + C24697 * C3165 + C24701 * C3154 +
                      C50942 * C3158 + C24700 * C818 + C50941 * C834) *
                         C696) *
                        C50764 * C50887) *
                       C50706) *
                      C584)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C283 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C278 -
                    (C24740 + C24741 + C24742) * C284 -
                    (C24743 + C24744 + C24745) * C279 +
                    (C24746 + C24747 + C24748) * C285 +
                    (C24749 + C24750 + C24751) * C280) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C283 +
                    (C24745 + C24744 + C24743) * C278 -
                    (C24748 + C24747 + C24746) * C284 -
                    (C24751 + C24750 + C24749) * C279 +
                    (C24754 + C24753 + C24752) * C285 +
                    (C24757 + C24756 + C24755) * C280) *
                       C50764 * C50633) *
                      C50894 +
                  (((C25110 + C25111 + C25112) * C284 -
                    ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                      C50942 * C835 + C24700 * C441 + C50941 * C452) *
                         C278 +
                     (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                      C50942 * C819 + C24700 * C435 + C50941 * C442) *
                         C283) +
                    (C25113 + C25114 + C25115) * C279 -
                    (C25116 + C25117 + C25118) * C285 -
                    (C25119 + C25120 + C25121) * C280) *
                       C50764 * C50887 +
                   ((C25118 + C25117 + C25116) * C284 -
                    ((C25115 + C25114 + C25113) * C278 +
                     (C25112 + C25111 + C25110) * C283) +
                    (C25121 + C25120 + C25119) * C279 -
                    (C24702 * C815 + C24697 * C828 + C24701 * C814 +
                     C50942 * C825 + C24700 * C437 + C50941 * C446) *
                        C285 -
                    (C24702 * C827 + C24697 * C839 + C24701 * C826 +
                     C50942 * C838 + C24700 * C447 + C50941 * C455) *
                        C280) *
                       C50764 * C50633) *
                      C50706) *
                 C50668) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C696 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50606) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C696 +
                    (C24745 + C24744 + C24743) * C50606) *
                       C50764 * C50633) *
                      C1162 -
                  (((C25115 + C25114 + C25113) * C50606 +
                    (C25112 + C25111 + C25110) * C696) *
                       C50764 * C50633 +
                   ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                     C50942 * C835 + C24700 * C441 + C50941 * C452) *
                        C50606 +
                    (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                     C50942 * C819 + C24700 * C435 + C50941 * C442) *
                        C696) *
                       C50764 * C50887) *
                      C1163 +
                  (((C24700 * C944 + C50941 * C949 + C24701 * C1083 +
                     C50942 * C1091 + C24702 * C3316 + C24697 * C3319) *
                        C696 +
                    (C24700 * C950 + C50941 * C959 + C24701 * C1090 +
                     C50942 * C1095 + C24702 * C3320 + C24697 * C3325) *
                        C50606) *
                       C50764 * C50887 +
                   ((C25690 + C25689 + C25688) * C696 +
                    (C25693 + C25692 + C25691) * C50606) *
                       C50764 * C50633) *
                      C1164 -
                  (((C24702 * C3602 + C24697 * C3610 + C24701 * C3603 +
                     C50942 * C3611 + C24700 * C1174 + C50941 * C1180) *
                        C50606 +
                    (C24702 * C3598 + C24697 * C3604 + C24701 * C3599 +
                     C50942 * C3605 + C24700 * C1168 + C50941 * C1175) *
                        C696) *
                       C50764 * C50633 +
                   ((C24702 * C3606 + C24697 * C3612 + C24701 * C3607 +
                     C50942 * C3613 + C24700 * C1176 + C50941 * C1181) *
                        C50606 +
                    (C24702 * C3600 + C24697 * C3608 + C24701 * C3601 +
                     C50942 * C3609 + C24700 * C1169 + C50941 * C1177) *
                        C696) *
                       C50764 * C50887) *
                      C1165) *
                 C50668) /
                    (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C1285 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50936 -
                    (C24740 + C24741 + C24742) * C1286 -
                    (C24743 + C24744 + C24745) * C50920 +
                    (C24746 + C24747 + C24748) * C1287 +
                    (C24749 + C24750 + C24751) * C1282) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C1285 +
                    (C24745 + C24744 + C24743) * C50936 -
                    (C24748 + C24747 + C24746) * C1286 -
                    (C24751 + C24750 + C24749) * C50920 +
                    (C24754 + C24753 + C24752) * C1287 +
                    (C24757 + C24756 + C24755) * C1282) *
                       C50764 * C50633) *
                      C1643 +
                  (((C25110 + C25111 + C25112) * C1286 -
                    ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                      C50942 * C835 + C24700 * C441 + C50941 * C452) *
                         C50936 +
                     (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                      C50942 * C819 + C24700 * C435 + C50941 * C442) *
                         C1285) +
                    (C25113 + C25114 + C25115) * C50920 -
                    (C25116 + C25117 + C25118) * C1287 -
                    (C25119 + C25120 + C25121) * C1282) *
                       C50764 * C50887 +
                   ((C25118 + C25117 + C25116) * C1286 -
                    ((C25115 + C25114 + C25113) * C50936 +
                     (C25112 + C25111 + C25110) * C1285) +
                    (C25121 + C25120 + C25119) * C50920 -
                    (C24702 * C815 + C24697 * C828 + C24701 * C814 +
                     C50942 * C825 + C24700 * C437 + C50941 * C446) *
                        C1287 -
                    (C24702 * C827 + C24697 * C839 + C24701 * C826 +
                     C50942 * C838 + C24700 * C447 + C50941 * C455) *
                        C1282) *
                       C50764 * C50633) *
                      C50706) *
                 C50668) /
                (p * q * std::sqrt(p + q));
    d2ee[85] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C1391 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C1386 -
                     (C24740 + C24741 + C24742) * C1392 -
                     (C24743 + C24744 + C24745) * C50611) *
                        C50764 * C50887 +
                    ((C24742 + C24741 + C24740) * C1391 +
                     (C24745 + C24744 + C24743) * C1386 -
                     (C24748 + C24747 + C24746) * C1392 -
                     (C24751 + C24750 + C24749) * C50611) *
                        C50764 * C50633) *
                       C1643 +
                   (((C25110 + C25111 + C25112) * C1392 -
                     ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                       C50942 * C835 + C24700 * C441 + C50941 * C452) *
                          C1386 +
                      (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                       C50942 * C819 + C24700 * C435 + C50941 * C442) *
                          C1391) +
                     (C25113 + C25114 + C25115) * C50611) *
                        C50764 * C50887 +
                    ((C25118 + C25117 + C25116) * C1392 -
                     ((C25115 + C25114 + C25113) * C1386 +
                      (C25112 + C25111 + C25110) * C1391) +
                     (C25121 + C25120 + C25119) * C50611) *
                        C50764 * C50633) *
                       C50706) *
                      C50893 +
                  ((((C24928 + C24929 + C24930) * C1392 -
                     ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                       C50942 * C602 + C24700 * C293 + C50941 * C304) *
                          C1386 +
                      (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                       C50942 * C592 + C24700 * C287 + C50941 * C294) *
                          C1391) +
                     (C24931 + C24932 + C24933) * C50611) *
                        C50764 * C50887 +
                    ((C24936 + C24935 + C24934) * C1392 -
                     ((C24933 + C24932 + C24931) * C1386 +
                      (C24930 + C24929 + C24928) * C1391) +
                     (C24939 + C24938 + C24937) * C50611) *
                        C50764 * C50633) *
                       C1643 +
                   (((C24700 * C811 + C50941 * C819 + C24701 * C818 +
                      C50942 * C834 + C24702 * C3154 + C24697 * C3158) *
                         C1391 +
                     (C24700 * C820 + C50941 * C835 + C24701 * C833 +
                      C50942 * C842 + C24702 * C3159 + C24697 * C3166) *
                         C1386 -
                     (C26436 + C26437 + C26438) * C1392 -
                     (C26439 + C26440 + C26441) * C50611) *
                        C50764 * C50887 +
                    ((C26438 + C26437 + C26436) * C1391 +
                     (C26441 + C26440 + C26439) * C1386 -
                     (C24702 * C4100 + C24697 * C4101 + C24701 * C816 +
                      C50942 * C830 + C24700 * C813 + C50941 * C823) *
                         C1392 -
                     (C24702 * C4102 + C24697 * C4103 + C24701 * C829 +
                      C50942 * C840 + C24700 * C824 + C50941 * C837) *
                         C50611) *
                        C50764 * C50633) *
                       C50706) *
                      C50682)) /
                (p * q * std::sqrt(p + q));
    d2ee[86] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C1391 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C1386 -
                    (C24740 + C24741 + C24742) * C1392 -
                    (C24743 + C24744 + C24745) * C50611) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C1391 +
                    (C24745 + C24744 + C24743) * C1386 -
                    (C24748 + C24747 + C24746) * C1392 -
                    (C24751 + C24750 + C24749) * C50611) *
                       C50764 * C50633) *
                      C50940 +
                  (((C25110 + C25111 + C25112) * C1392 -
                    ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                      C50942 * C835 + C24700 * C441 + C50941 * C452) *
                         C1386 +
                     (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                      C50942 * C819 + C24700 * C435 + C50941 * C442) *
                         C1391) +
                    (C25113 + C25114 + C25115) * C50611) *
                       C50764 * C50887 +
                   ((C25118 + C25117 + C25116) * C1392 -
                    ((C25115 + C25114 + C25113) * C1386 +
                     (C25112 + C25111 + C25110) * C1391) +
                    (C25121 + C25120 + C25119) * C50611) *
                       C50764 * C50633) *
                      C50929 +
                  (((C24700 * C944 + C50941 * C949 + C24701 * C1083 +
                     C50942 * C1091 + C24702 * C3316 + C24697 * C3319) *
                        C1391 +
                    (C24700 * C950 + C50941 * C959 + C24701 * C1090 +
                     C50942 * C1095 + C24702 * C3320 + C24697 * C3325) *
                        C1386 -
                    (C25688 + C25689 + C25690) * C1392 -
                    (C25691 + C25692 + C25693) * C50611) *
                       C50764 * C50887 +
                   ((C25690 + C25689 + C25688) * C1391 +
                    (C25693 + C25692 + C25691) * C1386 -
                    (C24702 * C3318 + C24697 * C3323 + C24701 * C1081 +
                     C50942 * C1087 + C24700 * C946 + C50941 * C953) *
                        C1392 -
                    (C24702 * C3324 + C24697 * C3327 + C24701 * C1086 +
                     C50942 * C1093 + C24700 * C954 + C50941 * C961) *
                        C50611) *
                       C50764 * C50633) *
                      C1875) *
                 C50668) /
                (p * q * std::sqrt(p + q));
    d2ee[87] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                    C50942 * C294 + C24702 * C587 + C24697 * C592) *
                       C118 +
                   (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                    C50942 * C304 + C24702 * C593 + C24697 * C602) *
                       C106 -
                   (C24740 + C24741 + C24742) * C119 -
                   (C24743 + C24744 + C24745) * C107 +
                   (C24746 + C24747 + C24748) * C120 +
                   (C24749 + C24750 + C24751) * C108 -
                   (C24752 + C24753 + C24754) * C121 -
                   (C24755 + C24756 + C24757) * C109) *
                      C50764 * C50887 +
                  ((C24742 + C24741 + C24740) * C118 +
                   (C24745 + C24744 + C24743) * C106 -
                   (C24748 + C24747 + C24746) * C119 -
                   (C24751 + C24750 + C24749) * C107 +
                   (C24754 + C24753 + C24752) * C120 +
                   (C24757 + C24756 + C24755) * C108 -
                   (C24702 * C591 + C24697 * C600 + C24701 * C290 +
                    C50942 * C300 + C24700 * C126 + C50941 * C137) *
                       C121 -
                   (C24702 * C601 + C24697 * C606 + C24701 * C301 +
                    C50942 * C308 + C24700 * C138 + C50941 * C147) *
                       C109) *
                      C50764 * C50633) *
                 C50694 * C50668) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C49720 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50878 -
                    (C24740 + C24741 + C24742) * C49713 -
                    (C24743 + C24744 + C24745) * C50611) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C49720 +
                    (C24745 + C24744 + C24743) * C50878 -
                    (C24748 + C24747 + C24746) * C49713 -
                    (C24751 + C24750 + C24749) * C50611) *
                       C50764 * C50633) *
                      C50694 * C582 +
                  (((C24928 + C24929 + C24930) * C49713 -
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50878 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C49720) +
                    (C24931 + C24932 + C24933) * C50611) *
                       C50764 * C50887 +
                   ((C24936 + C24935 + C24934) * C49713 -
                    ((C24933 + C24932 + C24931) * C50878 +
                     (C24930 + C24929 + C24928) * C49720) +
                    (C24939 + C24938 + C24937) * C50611) *
                       C50764 * C50633) *
                      C50694 * C583 +
                  (((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                     C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                        C49720 +
                    (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                     C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                        C50878 -
                    (C25280 + C25281 + C25282) * C49713 -
                    (C25283 + C25284 + C25285) * C50611) *
                       C50764 * C50887 +
                   ((C25282 + C25281 + C25280) * C49720 +
                    (C25285 + C25284 + C25283) * C50878 -
                    (C24702 * C2874 + C24697 * C2879 + C24701 * C698 +
                     C50942 * C704 + C24700 * C589 + C50941 * C596) *
                        C49713 -
                    (C24702 * C2880 + C24697 * C2883 + C24701 * C703 +
                     C50942 * C710 + C24700 * C597 + C50941 * C604) *
                        C50611) *
                       C50764 * C50633) *
                      C50694 * C584)) /
                    (p * q * std::sqrt(p + q));
    d2ee[88] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C283 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C278 -
                    (C24740 + C24741 + C24742) * C284 -
                    (C24743 + C24744 + C24745) * C279 +
                    (C24746 + C24747 + C24748) * C285 +
                    (C24749 + C24750 + C24751) * C280) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C283 +
                    (C24745 + C24744 + C24743) * C278 -
                    (C24748 + C24747 + C24746) * C284 -
                    (C24751 + C24750 + C24749) * C279 +
                    (C24754 + C24753 + C24752) * C285 +
                    (C24757 + C24756 + C24755) * C280) *
                       C50764 * C50633) *
                      C50694 * C50893 +
                  (((C24928 + C24929 + C24930) * C284 -
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C278 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C283) +
                    (C24931 + C24932 + C24933) * C279 -
                    (C24934 + C24935 + C24936) * C285 -
                    (C24937 + C24938 + C24939) * C280) *
                       C50764 * C50887 +
                   ((C24936 + C24935 + C24934) * C284 -
                    ((C24933 + C24932 + C24931) * C278 +
                     (C24930 + C24929 + C24928) * C283) +
                    (C24939 + C24938 + C24937) * C279 -
                    (C24702 * C697 + C24697 * C702 + C24701 * C590 +
                     C50942 * C598 + C24700 * C289 + C50941 * C298) *
                        C285 -
                    (C24702 * C701 + C24697 * C709 + C24701 * C599 +
                     C50942 * C605 + C24700 * C299 + C50941 * C307) *
                        C280) *
                       C50764 * C50633) *
                      C50694 * C50682)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C696 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50606) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C696 +
                    (C24745 + C24744 + C24743) * C50606) *
                       C50764 * C50633) *
                      C50694 * C692 -
                  (((C24933 + C24932 + C24931) * C50606 +
                    (C24930 + C24929 + C24928) * C696) *
                       C50764 * C50633 +
                   ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                     C50942 * C602 + C24700 * C293 + C50941 * C304) *
                        C50606 +
                    (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                     C50942 * C592 + C24700 * C287 + C50941 * C294) *
                        C696) *
                       C50764 * C50887) *
                      C50694 * C693 +
                  (((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                     C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                        C696 +
                    (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                     C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                        C50606) *
                       C50764 * C50887 +
                   ((C25282 + C25281 + C25280) * C696 +
                    (C25285 + C25284 + C25283) * C50606) *
                       C50764 * C50633) *
                      C50694 * C694 -
                  (((C24702 * C3002 + C24697 * C3006 + C24701 * C2878 +
                     C50942 * C2882 + C24700 * C705 + C50941 * C711) *
                        C50606 +
                    (C24702 * C3000 + C24697 * C3003 + C24701 * C2873 +
                     C50942 * C2877 + C24700 * C699 + C50941 * C706) *
                        C696) *
                       C50764 * C50633 +
                   ((C24702 * C3004 + C24697 * C3007 + C24701 * C2876 +
                     C50942 * C2881 + C24700 * C707 + C50941 * C712) *
                        C50606 +
                    (C24702 * C3001 + C24697 * C3005 + C24701 * C2872 +
                     C50942 * C2875 + C24700 * C700 + C50941 * C708) *
                        C696) *
                       C50764 * C50887) *
                      C50694 * C695)) /
                    (p * q * std::sqrt(p + q));
    d2ee[89] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C283 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C278 -
                    (C24740 + C24741 + C24742) * C284 -
                    (C24743 + C24744 + C24745) * C279 +
                    (C24746 + C24747 + C24748) * C285 +
                    (C24749 + C24750 + C24751) * C280) *
                       C50764 * C50887 +
                   ((C24742 + C24741 + C24740) * C283 +
                    (C24745 + C24744 + C24743) * C278 -
                    (C24748 + C24747 + C24746) * C284 -
                    (C24751 + C24750 + C24749) * C279 +
                    (C24754 + C24753 + C24752) * C285 +
                    (C24757 + C24756 + C24755) * C280) *
                       C50764 * C50633) *
                      C50894 +
                  (((C25110 + C25111 + C25112) * C284 -
                    ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                      C50942 * C835 + C24700 * C441 + C50941 * C452) *
                         C278 +
                     (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                      C50942 * C819 + C24700 * C435 + C50941 * C442) *
                         C283) +
                    (C25113 + C25114 + C25115) * C279 -
                    (C25116 + C25117 + C25118) * C285 -
                    (C25119 + C25120 + C25121) * C280) *
                       C50764 * C50887 +
                   ((C25118 + C25117 + C25116) * C284 -
                    ((C25115 + C25114 + C25113) * C278 +
                     (C25112 + C25111 + C25110) * C283) +
                    (C25121 + C25120 + C25119) * C279 -
                    (C24702 * C815 + C24697 * C828 + C24701 * C814 +
                     C50942 * C825 + C24700 * C437 + C50941 * C446) *
                        C285 -
                    (C24702 * C827 + C24697 * C839 + C24701 * C826 +
                     C50942 * C838 + C24700 * C447 + C50941 * C455) *
                        C280) *
                       C50764 * C50633) *
                      C50706) *
                 C50668) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C696 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50606) *
                        C50764 * C50887 +
                    ((C24742 + C24741 + C24740) * C696 +
                     (C24745 + C24744 + C24743) * C50606) *
                        C50764 * C50633) *
                       C50894 -
                   (((C25115 + C25114 + C25113) * C50606 +
                     (C25112 + C25111 + C25110) * C696) *
                        C50764 * C50633 +
                    ((C24702 * C833 + C24697 * C842 + C24701 * C820 +
                      C50942 * C835 + C24700 * C441 + C50941 * C452) *
                         C50606 +
                     (C24702 * C818 + C24697 * C834 + C24701 * C811 +
                      C50942 * C819 + C24700 * C435 + C50941 * C442) *
                         C696) *
                        C50764 * C50887) *
                       C50706) *
                      C582 +
                  ((((C24700 * C811 + C50941 * C819 + C24701 * C818 +
                      C50942 * C834 + C24702 * C3154 + C24697 * C3158) *
                         C696 +
                     (C24700 * C820 + C50941 * C835 + C24701 * C833 +
                      C50942 * C842 + C24702 * C3159 + C24697 * C3166) *
                         C50606) *
                        C50764 * C50887 +
                    ((C24700 * C812 + C50941 * C821 + C24701 * C817 +
                      C50942 * C832 + C24702 * C3155 + C24697 * C3160) *
                         C696 +
                     (C24700 * C822 + C50941 * C836 + C24701 * C831 +
                      C50942 * C841 + C24702 * C3161 + C24697 * C3167) *
                         C50606) *
                        C50764 * C50633) *
                       C50706 -
                   (((C24933 + C24932 + C24931) * C50606 +
                     (C24930 + C24929 + C24928) * C696) *
                        C50764 * C50633 +
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50606 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C696) *
                        C50764 * C50887) *
                       C50894) *
                      C583 +
                  ((((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                      C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                         C696 +
                     (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                      C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                         C50606) *
                        C50764 * C50887 +
                    ((C25282 + C25281 + C25280) * C696 +
                     (C25285 + C25284 + C25283) * C50606) *
                        C50764 * C50633) *
                       C50894 -
                   (((C24702 * C3162 + C24697 * C3168 + C24701 * C3161 +
                      C50942 * C3167 + C24700 * C831 + C50941 * C841) *
                         C50606 +
                     (C24702 * C3156 + C24697 * C3163 + C24701 * C3155 +
                      C50942 * C3160 + C24700 * C817 + C50941 * C832) *
                         C696) *
                        C50764 * C50633 +
                    ((C24702 * C3164 + C24697 * C3169 + C24701 * C3159 +
                      C50942 * C3166 + C24700 * C833 + C50941 * C842) *
                         C50606 +
                     (C24702 * C3157 + C24697 * C3165 + C24701 * C3154 +
                      C50942 * C3158 + C24700 * C818 + C50941 * C834) *
                         C696) *
                        C50764 * C50887) *
                       C50706) *
                      C584)) /
                    (p * q * std::sqrt(p + q));
    d2ee[90] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C1285 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50936 -
                    (C24740 + C24741 + C24742) * C1286 -
                    (C24743 + C24744 + C24745) * C50920 +
                    (C24746 + C24747 + C24748) * C1287 +
                    (C24749 + C24750 + C24751) * C1282) *
                       C50909 +
                   ((C31332 + C31333 + C31334) * C1285 +
                    (C31335 + C31336 + C31337) * C50936 -
                    (C25112 + C25111 + C25110) * C1286 -
                    (C25115 + C25114 + C25113) * C50920 +
                    (C25118 + C25117 + C25116) * C1287 +
                    (C25121 + C25120 + C25119) * C1282) *
                       C50828) *
                      C50628 * C50694 * C1283 +
                  (((C24928 + C24929 + C24930) * C1286 -
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50936 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C1285) +
                    (C24931 + C24932 + C24933) * C50920 -
                    (C24934 + C24935 + C24936) * C1287 -
                    (C24937 + C24938 + C24939) * C1282) *
                       C50909 +
                   ((C26438 + C26437 + C26436) * C1286 -
                    ((C31757 + C31756 + C31755) * C50936 +
                     (C31754 + C31753 + C31752) * C1285) +
                    (C26441 + C26440 + C26439) * C50920 -
                    (C24702 * C4100 + C24697 * C4101 + C24701 * C816 +
                     C50942 * C830 + C24700 * C813 + C50941 * C823) *
                        C1287 -
                    (C24702 * C4102 + C24697 * C4103 + C24701 * C829 +
                     C50942 * C840 + C24700 * C824 + C50941 * C837) *
                        C1282) *
                       C50828) *
                      C50628 * C50694 * C50682)) /
                (p * q * std::sqrt(p + q));
    d2ee[91] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C1391 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C1386 -
                    (C24740 + C24741 + C24742) * C1392 -
                    (C24743 + C24744 + C24745) * C50611) *
                       C50909 +
                   ((C31332 + C31333 + C31334) * C1391 +
                    (C31335 + C31336 + C31337) * C1386 -
                    (C25112 + C25111 + C25110) * C1392 -
                    (C25115 + C25114 + C25113) * C50611) *
                       C50828) *
                      C50628 * C50694 * C50939 +
                  (((C24928 + C24929 + C24930) * C1392 -
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C1386 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C1391) +
                    (C24931 + C24932 + C24933) * C50611) *
                       C50909 +
                   ((C26438 + C26437 + C26436) * C1392 -
                    ((C31757 + C31756 + C31755) * C1386 +
                     (C31754 + C31753 + C31752) * C1391) +
                    (C26441 + C26440 + C26439) * C50611) *
                       C50828) *
                      C50628 * C50694 * C50926 +
                  (((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                     C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                        C1391 +
                    (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                     C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                        C1386 -
                    (C25280 + C25281 + C25282) * C1392 -
                    (C25283 + C25284 + C25285) * C50611) *
                       C50909 +
                   ((C31758 + C31759 + C31760) * C1391 +
                    (C31761 + C31762 + C31763) * C1386 -
                    (C24702 * C3156 + C24697 * C3163 + C24701 * C3155 +
                     C50942 * C3160 + C24700 * C817 + C50941 * C832) *
                        C1392 -
                    (C24702 * C3162 + C24697 * C3168 + C24701 * C3161 +
                     C50942 * C3167 + C24700 * C831 + C50941 * C841) *
                        C50611) *
                       C50828) *
                      C50628 * C50694 * C1390)) /
                (p * q * std::sqrt(p + q));
    d2ee[92] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C1391 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C1386 -
                     (C24740 + C24741 + C24742) * C1392 -
                     (C24743 + C24744 + C24745) * C50611) *
                        C50909 +
                    ((C31332 + C31333 + C31334) * C1391 +
                     (C31335 + C31336 + C31337) * C1386 -
                     (C25112 + C25111 + C25110) * C1392 -
                     (C25115 + C25114 + C25113) * C50611) *
                        C50828) *
                       C50628 * C50894 +
                   (((C25110 + C25111 + C25112) * C1392 -
                     ((C31337 + C31336 + C31335) * C1386 +
                      (C31334 + C31333 + C31332) * C1391) +
                     (C25113 + C25114 + C25115) * C50611) *
                        C50909 +
                    ((C25690 + C25689 + C25688) * C1392 -
                     ((C31922 + C31923 + C31924) * C1386 +
                      (C31925 + C31926 + C31927) * C1391) +
                     (C25693 + C25692 + C25691) * C50611) *
                        C50828) *
                       C50628 * C50706) *
                      C1283 +
                  ((((C24928 + C24929 + C24930) * C1392 -
                     ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                       C50942 * C602 + C24700 * C293 + C50941 * C304) *
                          C1386 +
                      (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                       C50942 * C592 + C24700 * C287 + C50941 * C294) *
                          C1391) +
                     (C24931 + C24932 + C24933) * C50611) *
                        C50909 +
                    ((C26438 + C26437 + C26436) * C1392 -
                     ((C31757 + C31756 + C31755) * C1386 +
                      (C31754 + C31753 + C31752) * C1391) +
                     (C26441 + C26440 + C26439) * C50611) *
                        C50828) *
                       C50628 * C50894 +
                   (((C31752 + C31753 + C31754) * C1391 +
                     (C31755 + C31756 + C31757) * C1386 -
                     (C26436 + C26437 + C26438) * C1392 -
                     (C26439 + C26440 + C26441) * C50611) *
                        C50909 +
                    ((C32086 + C32087 + C32088) * C1391 +
                     (C32089 + C32090 + C32091) * C1386 -
                     (C24702 * C3492 + C24697 * C3495 + C24701 * C3317 +
                      C50942 * C3321 + C24700 * C1082 + C50941 * C1089) *
                         C1392 -
                     (C24702 * C3494 + C24697 * C3498 + C24701 * C3322 +
                      C50942 * C3326 + C24700 * C1088 + C50941 * C1094) *
                         C50611) *
                        C50828) *
                       C50628 * C50706) *
                      C50682)) /
                (p * q * std::sqrt(p + q));
    d2ee[93] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C49720 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50878 -
                     (C24740 + C24741 + C24742) * C49713 -
                     (C24743 + C24744 + C24745) * C50611) *
                        C50909 +
                    ((C31332 + C31333 + C31334) * C49720 +
                     (C31335 + C31336 + C31337) * C50878 -
                     (C25112 + C25111 + C25110) * C49713 -
                     (C25115 + C25114 + C25113) * C50611) *
                        C50828) *
                       C50628 * C1643 +
                   (((C25110 + C25111 + C25112) * C49713 -
                     ((C31337 + C31336 + C31335) * C50878 +
                      (C31334 + C31333 + C31332) * C49720) +
                     (C25113 + C25114 + C25115) * C50611) *
                        C50909 +
                    ((C25690 + C25689 + C25688) * C49713 -
                     ((C31922 + C31923 + C31924) * C50878 +
                      (C31925 + C31926 + C31927) * C49720) +
                     (C25693 + C25692 + C25691) * C50611) *
                        C50828) *
                       C50628 * C50706) *
                      C1283 +
                  ((((C24928 + C24929 + C24930) * C49713 -
                     ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                       C50942 * C602 + C24700 * C293 + C50941 * C304) *
                          C50878 +
                      (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                       C50942 * C592 + C24700 * C287 + C50941 * C294) *
                          C49720) +
                     (C24931 + C24932 + C24933) * C50611) *
                        C50909 +
                    ((C26438 + C26437 + C26436) * C49713 -
                     ((C31757 + C31756 + C31755) * C50878 +
                      (C31754 + C31753 + C31752) * C49720) +
                     (C26441 + C26440 + C26439) * C50611) *
                        C50828) *
                       C50628 * C1643 +
                   (((C31752 + C31753 + C31754) * C49720 +
                     (C31755 + C31756 + C31757) * C50878 -
                     (C26436 + C26437 + C26438) * C49713 -
                     (C26439 + C26440 + C26441) * C50611) *
                        C50909 +
                    ((C32086 + C32087 + C32088) * C49720 +
                     (C32089 + C32090 + C32091) * C50878 -
                     (C24702 * C3492 + C24697 * C3495 + C24701 * C3317 +
                      C50942 * C3321 + C24700 * C1082 + C50941 * C1089) *
                         C49713 -
                     (C24702 * C3494 + C24697 * C3498 + C24701 * C3322 +
                      C50942 * C3326 + C24700 * C1088 + C50941 * C1094) *
                         C50611) *
                        C50828) *
                       C50628 * C50706) *
                      C50682)) /
                (p * q * std::sqrt(p + q));
    d2ee[94] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C696 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50606) *
                        C50909 +
                    ((C31332 + C31333 + C31334) * C696 +
                     (C31335 + C31336 + C31337) * C50606) *
                        C50828) *
                       C50628 * C1643 -
                   (((C31922 + C31923 + C31924) * C50606 +
                     (C31925 + C31926 + C31927) * C696) *
                        C50828 +
                    ((C31337 + C31336 + C31335) * C50606 +
                     (C31334 + C31333 + C31332) * C696) *
                        C50909) *
                       C50628 * C50706) *
                      C50939 +
                  ((((C31752 + C31753 + C31754) * C696 +
                     (C31755 + C31756 + C31757) * C50606) *
                        C50909 +
                    ((C32086 + C32087 + C32088) * C696 +
                     (C32089 + C32090 + C32091) * C50606) *
                        C50828) *
                       C50628 * C50706 -
                   (((C31757 + C31756 + C31755) * C50606 +
                     (C31754 + C31753 + C31752) * C696) *
                        C50828 +
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50606 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C696) *
                        C50909) *
                       C50628 * C1643) *
                      C50926 +
                  ((((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                      C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                         C696 +
                     (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                      C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                         C50606) *
                        C50909 +
                    ((C31758 + C31759 + C31760) * C696 +
                     (C31761 + C31762 + C31763) * C50606) *
                        C50828) *
                       C50628 * C1643 -
                   (((C24702 * C20747 + C24697 * C20749 + C24701 * C3496 +
                      C50942 * C3499 + C24700 * C3320 + C50941 * C3325) *
                         C50606 +
                     (C24702 * C20746 + C24697 * C20748 + C24701 * C3493 +
                      C50942 * C3497 + C24700 * C3316 + C50941 * C3319) *
                         C696) *
                        C50828 +
                    ((C31763 + C31762 + C31761) * C50606 +
                     (C31760 + C31759 + C31758) * C696) *
                        C50909) *
                       C50628 * C50706) *
                      C1390)) /
                (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C696 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50606) *
                        C50909 +
                    ((C31332 + C31333 + C31334) * C696 +
                     (C31335 + C31336 + C31337) * C50606) *
                        C50828) *
                       C50628 * C50940 -
                   (((C31922 + C31923 + C31924) * C50606 +
                     (C31925 + C31926 + C31927) * C696) *
                        C50828 +
                    ((C31337 + C31336 + C31335) * C50606 +
                     (C31334 + C31333 + C31332) * C696) *
                        C50909) *
                       C50628 * C50929 +
                   (((C31927 + C31926 + C31925) * C696 +
                     (C31924 + C31923 + C31922) * C50606) *
                        C50909 +
                    ((C32202 + C32203 + C32204) * C696 +
                     (C32205 + C32206 + C32207) * C50606) *
                        C50828) *
                       C50628 * C1875) *
                      C1283 +
                  ((((C31752 + C31753 + C31754) * C696 +
                     (C31755 + C31756 + C31757) * C50606) *
                        C50909 +
                    ((C32086 + C32087 + C32088) * C696 +
                     (C32089 + C32090 + C32091) * C50606) *
                        C50828) *
                       C50628 * C50929 -
                   (((C31757 + C31756 + C31755) * C50606 +
                     (C31754 + C31753 + C31752) * C696) *
                        C50828 +
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50606 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C696) *
                        C50909) *
                       C50628 * C50940 -
                   (((C24702 * C20817 + C24697 * C20819 + C24701 * C3606 +
                      C50942 * C3612 + C24700 * C3607 + C50941 * C3613) *
                         C50606 +
                     (C24702 * C20816 + C24697 * C20818 + C24701 * C3600 +
                      C50942 * C3608 + C24700 * C3601 + C50941 * C3609) *
                         C696) *
                        C50828 +
                    ((C32091 + C32090 + C32089) * C50606 +
                     (C32088 + C32087 + C32086) * C696) *
                        C50909) *
                       C50628 * C1875) *
                      C50682)) /
                (p * q * std::sqrt(p + q));
    d2ee[96] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C49720 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50878 -
                    (C24740 + C24741 + C24742) * C49713 -
                    (C24743 + C24744 + C24745) * C50611) *
                       C50909 +
                   ((C31332 + C31333 + C31334) * C49720 +
                    (C31335 + C31336 + C31337) * C50878 -
                    (C25112 + C25111 + C25110) * C49713 -
                    (C25115 + C25114 + C25113) * C50611) *
                       C50828) *
                      C50628 * C50694 * C582 +
                  (((C24928 + C24929 + C24930) * C49713 -
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50878 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C49720) +
                    (C24931 + C24932 + C24933) * C50611) *
                       C50909 +
                   ((C26438 + C26437 + C26436) * C49713 -
                    ((C24702 * C3159 + C24697 * C3166 + C24701 * C833 +
                      C50942 * C842 + C24700 * C820 + C50941 * C835) *
                         C50878 +
                     (C24702 * C3154 + C24697 * C3158 + C24701 * C818 +
                      C50942 * C834 + C24700 * C811 + C50941 * C819) *
                         C49720) +
                    (C26441 + C26440 + C26439) * C50611) *
                       C50828) *
                      C50628 * C50694 * C583 +
                  (((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                     C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                        C49720 +
                    (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                     C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                        C50878 -
                    (C25280 + C25281 + C25282) * C49713 -
                    (C25283 + C25284 + C25285) * C50611) *
                       C50909 +
                   ((C24700 * C818 + C50941 * C834 + C24701 * C3154 +
                     C50942 * C3158 + C24702 * C3157 + C24697 * C3165) *
                        C49720 +
                    (C24700 * C833 + C50941 * C842 + C24701 * C3159 +
                     C50942 * C3166 + C24702 * C3164 + C24697 * C3169) *
                        C50878 -
                    (C24702 * C3156 + C24697 * C3163 + C24701 * C3155 +
                     C50942 * C3160 + C24700 * C817 + C50941 * C832) *
                        C49713 -
                    (C24702 * C3162 + C24697 * C3168 + C24701 * C3161 +
                     C50942 * C3167 + C24700 * C831 + C50941 * C841) *
                        C50611) *
                       C50828) *
                      C50628 * C50694 * C584)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                    C50942 * C294 + C24702 * C587 + C24697 * C592) *
                       C118 +
                   (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                    C50942 * C304 + C24702 * C593 + C24697 * C602) *
                       C106 -
                   (C24740 + C24741 + C24742) * C119 -
                   (C24743 + C24744 + C24745) * C107 +
                   (C24746 + C24747 + C24748) * C120 +
                   (C24749 + C24750 + C24751) * C108 -
                   (C24752 + C24753 + C24754) * C121 -
                   (C24755 + C24756 + C24757) * C109) *
                      C50909 +
                  ((C24700 * C435 + C50941 * C442 + C24701 * C811 +
                    C50942 * C819 + C24702 * C818 + C24697 * C834) *
                       C118 +
                   (C24700 * C441 + C50941 * C452 + C24701 * C820 +
                    C50942 * C835 + C24702 * C833 + C24697 * C842) *
                       C106 -
                   (C25112 + C25111 + C25110) * C119 -
                   (C25115 + C25114 + C25113) * C107 +
                   (C25118 + C25117 + C25116) * C120 +
                   (C25121 + C25120 + C25119) * C108 -
                   (C24702 * C815 + C24697 * C828 + C24701 * C814 +
                    C50942 * C825 + C24700 * C437 + C50941 * C446) *
                       C121 -
                   (C24702 * C827 + C24697 * C839 + C24701 * C826 +
                    C50942 * C838 + C24700 * C447 + C50941 * C455) *
                       C109) *
                      C50828) *
                 C50628 * C50694 * C50668) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C49720 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50878 -
                    (C24740 + C24741 + C24742) * C49713 -
                    (C24743 + C24744 + C24745) * C50611) *
                       C50909 +
                   ((C31332 + C31333 + C31334) * C49720 +
                    (C31335 + C31336 + C31337) * C50878 -
                    (C25112 + C25111 + C25110) * C49713 -
                    (C25115 + C25114 + C25113) * C50611) *
                       C50828) *
                      C50628 * C941 +
                  (((C25110 + C25111 + C25112) * C49713 -
                    ((C31337 + C31336 + C31335) * C50878 +
                     (C31334 + C31333 + C31332) * C49720) +
                    (C25113 + C25114 + C25115) * C50611) *
                       C50909 +
                   ((C25690 + C25689 + C25688) * C49713 -
                    ((C31922 + C31923 + C31924) * C50878 +
                     (C31925 + C31926 + C31927) * C49720) +
                    (C25693 + C25692 + C25691) * C50611) *
                       C50828) *
                      C50628 * C942 +
                  (((C31927 + C31926 + C31925) * C49720 +
                    (C31924 + C31923 + C31922) * C50878 -
                    (C25688 + C25689 + C25690) * C49713 -
                    (C25691 + C25692 + C25693) * C50611) *
                       C50909 +
                   ((C24700 * C1169 + C50941 * C1177 + C24701 * C3601 +
                     C50942 * C3609 + C24702 * C3600 + C24697 * C3608) *
                        C49720 +
                    (C24700 * C1176 + C50941 * C1181 + C24701 * C3607 +
                     C50942 * C3613 + C24702 * C3606 + C24697 * C3612) *
                        C50878 -
                    (C24702 * C3598 + C24697 * C3604 + C24701 * C3599 +
                     C50942 * C3605 + C24700 * C1168 + C50941 * C1175) *
                        C49713 -
                    (C24702 * C3602 + C24697 * C3610 + C24701 * C3603 +
                     C50942 * C3611 + C24700 * C1174 + C50941 * C1180) *
                        C50611) *
                       C50828) *
                      C50628 * C943) *
                 C50668) /
                    (p * q * std::sqrt(p + q));
    d2ee[97] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C696 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50606) *
                       C50909 +
                   ((C31332 + C31333 + C31334) * C696 +
                    (C31335 + C31336 + C31337) * C50606) *
                       C50828) *
                      C50628 * C50694 * C692 -
                  (((C24702 * C3159 + C24697 * C3166 + C24701 * C833 +
                     C50942 * C842 + C24700 * C820 + C50941 * C835) *
                        C50606 +
                    (C24702 * C3154 + C24697 * C3158 + C24701 * C818 +
                     C50942 * C834 + C24700 * C811 + C50941 * C819) *
                        C696) *
                       C50828 +
                   ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                     C50942 * C602 + C24700 * C293 + C50941 * C304) *
                        C50606 +
                    (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                     C50942 * C592 + C24700 * C287 + C50941 * C294) *
                        C696) *
                       C50909) *
                      C50628 * C50694 * C693 +
                  (((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                     C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                        C696 +
                    (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                     C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                        C50606) *
                       C50909 +
                   ((C24700 * C818 + C50941 * C834 + C24701 * C3154 +
                     C50942 * C3158 + C24702 * C3157 + C24697 * C3165) *
                        C696 +
                    (C24700 * C833 + C50941 * C842 + C24701 * C3159 +
                     C50942 * C3166 + C24702 * C3164 + C24697 * C3169) *
                        C50606) *
                       C50828) *
                      C50628 * C50694 * C694 -
                  (((C24702 * C20547 + C24697 * C20549 + C24701 * C3164 +
                     C50942 * C3169 + C24700 * C3159 + C50941 * C3166) *
                        C50606 +
                    (C24702 * C20546 + C24697 * C20548 + C24701 * C3157 +
                     C50942 * C3165 + C24700 * C3154 + C50941 * C3158) *
                        C696) *
                       C50828 +
                   ((C24702 * C3004 + C24697 * C3007 + C24701 * C2876 +
                     C50942 * C2881 + C24700 * C707 + C50941 * C712) *
                        C50606 +
                    (C24702 * C3001 + C24697 * C3005 + C24701 * C2872 +
                     C50942 * C2875 + C24700 * C700 + C50941 * C708) *
                        C696) *
                       C50909) *
                      C50628 * C50694 * C695)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C283 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C278 -
                    (C24740 + C24741 + C24742) * C284 -
                    (C24743 + C24744 + C24745) * C279 +
                    (C24746 + C24747 + C24748) * C285 +
                    (C24749 + C24750 + C24751) * C280) *
                       C50909 +
                   ((C24700 * C435 + C50941 * C442 + C24701 * C811 +
                     C50942 * C819 + C24702 * C818 + C24697 * C834) *
                        C283 +
                    (C24700 * C441 + C50941 * C452 + C24701 * C820 +
                     C50942 * C835 + C24702 * C833 + C24697 * C842) *
                        C278 -
                    (C25112 + C25111 + C25110) * C284 -
                    (C25115 + C25114 + C25113) * C279 +
                    (C25118 + C25117 + C25116) * C285 +
                    (C25121 + C25120 + C25119) * C280) *
                       C50828) *
                      C50628 * C50694 * C50893 +
                  (((C24928 + C24929 + C24930) * C284 -
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C278 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C283) +
                    (C24931 + C24932 + C24933) * C279 -
                    (C24934 + C24935 + C24936) * C285 -
                    (C24937 + C24938 + C24939) * C280) *
                       C50909 +
                   ((C26438 + C26437 + C26436) * C284 -
                    ((C24702 * C3159 + C24697 * C3166 + C24701 * C833 +
                      C50942 * C842 + C24700 * C820 + C50941 * C835) *
                         C278 +
                     (C24702 * C3154 + C24697 * C3158 + C24701 * C818 +
                      C50942 * C834 + C24700 * C811 + C50941 * C819) *
                         C283) +
                    (C26441 + C26440 + C26439) * C279 -
                    (C24702 * C4100 + C24697 * C4101 + C24701 * C816 +
                     C50942 * C830 + C24700 * C813 + C50941 * C823) *
                        C285 -
                    (C24702 * C4102 + C24697 * C4103 + C24701 * C829 +
                     C50942 * C840 + C24700 * C824 + C50941 * C837) *
                        C280) *
                       C50828) *
                      C50628 * C50694 * C50682)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C696 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50606) *
                        C50909 +
                    ((C31332 + C31333 + C31334) * C696 +
                     (C31335 + C31336 + C31337) * C50606) *
                        C50828) *
                       C50628 * C941 -
                   (((C31922 + C31923 + C31924) * C50606 +
                     (C31925 + C31926 + C31927) * C696) *
                        C50828 +
                    ((C31337 + C31336 + C31335) * C50606 +
                     (C31334 + C31333 + C31332) * C696) *
                        C50909) *
                       C50628 * C942 +
                   (((C31927 + C31926 + C31925) * C696 +
                     (C31924 + C31923 + C31922) * C50606) *
                        C50909 +
                    ((C24700 * C1169 + C50941 * C1177 + C24701 * C3601 +
                      C50942 * C3609 + C24702 * C3600 + C24697 * C3608) *
                         C696 +
                     (C24700 * C1176 + C50941 * C1181 + C24701 * C3607 +
                      C50942 * C3613 + C24702 * C3606 + C24697 * C3612) *
                         C50606) *
                        C50828) *
                       C50628 * C943) *
                      C50893 +
                  ((((C31752 + C31753 + C31754) * C696 +
                     (C31755 + C31756 + C31757) * C50606) *
                        C50909 +
                    ((C32086 + C32087 + C32088) * C696 +
                     (C32089 + C32090 + C32091) * C50606) *
                        C50828) *
                       C50628 * C942 -
                   (((C31757 + C31756 + C31755) * C50606 +
                     (C31754 + C31753 + C31752) * C696) *
                        C50828 +
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50606 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C696) *
                        C50909) *
                       C50628 * C941 -
                   (((C24702 * C20817 + C24697 * C20819 + C24701 * C3606 +
                      C50942 * C3612 + C24700 * C3607 + C50941 * C3613) *
                         C50606 +
                     (C24702 * C20816 + C24697 * C20818 + C24701 * C3600 +
                      C50942 * C3608 + C24700 * C3601 + C50941 * C3609) *
                         C696) *
                        C50828 +
                    ((C32091 + C32090 + C32089) * C50606 +
                     (C32088 + C32087 + C32086) * C696) *
                        C50909) *
                       C50628 * C943) *
                      C50682)) /
                    (p * q * std::sqrt(p + q));
    d2ee[98] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C696 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50606) *
                        C50909 +
                    ((C31332 + C31333 + C31334) * C696 +
                     (C31335 + C31336 + C31337) * C50606) *
                        C50828) *
                       C50628 * C50894 -
                   (((C24702 * C3320 + C24697 * C3325 + C24701 * C1090 +
                      C50942 * C1095 + C24700 * C950 + C50941 * C959) *
                         C50606 +
                     (C24702 * C3316 + C24697 * C3319 + C24701 * C1083 +
                      C50942 * C1091 + C24700 * C944 + C50941 * C949) *
                         C696) *
                        C50828 +
                    ((C31337 + C31336 + C31335) * C50606 +
                     (C31334 + C31333 + C31332) * C696) *
                        C50909) *
                       C50628 * C50706) *
                      C582 +
                  ((((C31752 + C31753 + C31754) * C696 +
                     (C31755 + C31756 + C31757) * C50606) *
                        C50909 +
                    ((C24700 * C1083 + C50941 * C1091 + C24701 * C3316 +
                      C50942 * C3319 + C24702 * C3493 + C24697 * C3497) *
                         C696 +
                     (C24700 * C1090 + C50941 * C1095 + C24701 * C3320 +
                      C50942 * C3325 + C24702 * C3496 + C24697 * C3499) *
                         C50606) *
                        C50828) *
                       C50628 * C50706 -
                   (((C31757 + C31756 + C31755) * C50606 +
                     (C31754 + C31753 + C31752) * C696) *
                        C50828 +
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50606 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C696) *
                        C50909) *
                       C50628 * C50894) *
                      C583 +
                  ((((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                      C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                         C696 +
                     (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                      C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                         C50606) *
                        C50909 +
                    ((C31758 + C31759 + C31760) * C696 +
                     (C31761 + C31762 + C31763) * C50606) *
                        C50828) *
                       C50628 * C50894 -
                   (((C24702 * C20747 + C24697 * C20749 + C24701 * C3496 +
                      C50942 * C3499 + C24700 * C3320 + C50941 * C3325) *
                         C50606 +
                     (C24702 * C20746 + C24697 * C20748 + C24701 * C3493 +
                      C50942 * C3497 + C24700 * C3316 + C50941 * C3319) *
                         C696) *
                        C50828 +
                    ((C31763 + C31762 + C31761) * C50606 +
                     (C31760 + C31759 + C31758) * C696) *
                        C50909) *
                       C50628 * C50706) *
                      C584)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C283 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C278 -
                    (C24740 + C24741 + C24742) * C284 -
                    (C24743 + C24744 + C24745) * C279 +
                    (C24746 + C24747 + C24748) * C285 +
                    (C24749 + C24750 + C24751) * C280) *
                       C50909 +
                   ((C31332 + C31333 + C31334) * C283 +
                    (C31335 + C31336 + C31337) * C278 -
                    (C25112 + C25111 + C25110) * C284 -
                    (C25115 + C25114 + C25113) * C279 +
                    (C25118 + C25117 + C25116) * C285 +
                    (C25121 + C25120 + C25119) * C280) *
                       C50828) *
                      C50628 * C50894 +
                  (((C25110 + C25111 + C25112) * C284 -
                    ((C31337 + C31336 + C31335) * C278 +
                     (C31334 + C31333 + C31332) * C283) +
                    (C25113 + C25114 + C25115) * C279 -
                    (C25116 + C25117 + C25118) * C285 -
                    (C25119 + C25120 + C25121) * C280) *
                       C50909 +
                   ((C25690 + C25689 + C25688) * C284 -
                    ((C24702 * C3320 + C24697 * C3325 + C24701 * C1090 +
                      C50942 * C1095 + C24700 * C950 + C50941 * C959) *
                         C278 +
                     (C24702 * C3316 + C24697 * C3319 + C24701 * C1083 +
                      C50942 * C1091 + C24700 * C944 + C50941 * C949) *
                         C283) +
                    (C25693 + C25692 + C25691) * C279 -
                    (C24702 * C3318 + C24697 * C3323 + C24701 * C1081 +
                     C50942 * C1087 + C24700 * C946 + C50941 * C953) *
                        C285 -
                    (C24702 * C3324 + C24697 * C3327 + C24701 * C1086 +
                     C50942 * C1093 + C24700 * C954 + C50941 * C961) *
                        C280) *
                       C50828) *
                      C50628 * C50706) *
                 C50668) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C696 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50606) *
                       C50909 +
                   ((C31332 + C31333 + C31334) * C696 +
                    (C31335 + C31336 + C31337) * C50606) *
                       C50828) *
                      C50628 * C1162 -
                  (((C31922 + C31923 + C31924) * C50606 +
                    (C31925 + C31926 + C31927) * C696) *
                       C50828 +
                   ((C31337 + C31336 + C31335) * C50606 +
                    (C31334 + C31333 + C31332) * C696) *
                       C50909) *
                      C50628 * C1163 +
                  (((C31927 + C31926 + C31925) * C696 +
                    (C31924 + C31923 + C31922) * C50606) *
                       C50909 +
                   ((C32202 + C32203 + C32204) * C696 +
                    (C32205 + C32206 + C32207) * C50606) *
                       C50828) *
                      C50628 * C1164 -
                  (((C24702 * C22978 + C24697 * C22980 + C24701 * C6347 +
                     C50942 * C6350 + C24700 * C6147 + C50941 * C6152) *
                        C50606 +
                    (C24702 * C22977 + C24697 * C22979 + C24701 * C6344 +
                     C50942 * C6348 + C24700 * C6143 + C50941 * C6146) *
                        C696) *
                       C50828 +
                   ((C32207 + C32206 + C32205) * C50606 +
                    (C32204 + C32203 + C32202) * C696) *
                       C50909) *
                      C50628 * C1165) *
                 C50668) /
                    (p * q * std::sqrt(p + q));
    d2ee[99] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C1285 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C50936 -
                    (C24740 + C24741 + C24742) * C1286 -
                    (C24743 + C24744 + C24745) * C50920 +
                    (C24746 + C24747 + C24748) * C1287 +
                    (C24749 + C24750 + C24751) * C1282) *
                       C50909 +
                   ((C31332 + C31333 + C31334) * C1285 +
                    (C31335 + C31336 + C31337) * C50936 -
                    (C25112 + C25111 + C25110) * C1286 -
                    (C25115 + C25114 + C25113) * C50920 +
                    (C25118 + C25117 + C25116) * C1287 +
                    (C25121 + C25120 + C25119) * C1282) *
                       C50828) *
                      C50628 * C1643 +
                  (((C25110 + C25111 + C25112) * C1286 -
                    ((C31337 + C31336 + C31335) * C50936 +
                     (C31334 + C31333 + C31332) * C1285) +
                    (C25113 + C25114 + C25115) * C50920 -
                    (C25116 + C25117 + C25118) * C1287 -
                    (C25119 + C25120 + C25121) * C1282) *
                       C50909 +
                   ((C25690 + C25689 + C25688) * C1286 -
                    ((C31922 + C31923 + C31924) * C50936 +
                     (C31925 + C31926 + C31927) * C1285) +
                    (C25693 + C25692 + C25691) * C50920 -
                    (C24702 * C3318 + C24697 * C3323 + C24701 * C1081 +
                     C50942 * C1087 + C24700 * C946 + C50941 * C953) *
                        C1287 -
                    (C24702 * C3324 + C24697 * C3327 + C24701 * C1086 +
                     C50942 * C1093 + C24700 * C954 + C50941 * C961) *
                        C1282) *
                       C50828) *
                      C50628 * C50706) *
                 C50668) /
                (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                       C50942 * C294 + C24702 * C587 + C24697 * C592) *
                          C1391 +
                      (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                       C50942 * C304 + C24702 * C593 + C24697 * C602) *
                          C1386 -
                      (C24740 + C24741 + C24742) * C1392 -
                      (C24743 + C24744 + C24745) * C50611) *
                         C50909 +
                     ((C31332 + C31333 + C31334) * C1391 +
                      (C31335 + C31336 + C31337) * C1386 -
                      (C25112 + C25111 + C25110) * C1392 -
                      (C25115 + C25114 + C25113) * C50611) *
                         C50828) *
                        C50628 * C1643 +
                    (((C25110 + C25111 + C25112) * C1392 -
                      ((C31337 + C31336 + C31335) * C1386 +
                       (C31334 + C31333 + C31332) * C1391) +
                      (C25113 + C25114 + C25115) * C50611) *
                         C50909 +
                     ((C25690 + C25689 + C25688) * C1392 -
                      ((C31922 + C31923 + C31924) * C1386 +
                       (C31925 + C31926 + C31927) * C1391) +
                      (C25693 + C25692 + C25691) * C50611) *
                         C50828) *
                        C50628 * C50706) *
                       C50893 +
                   ((((C24928 + C24929 + C24930) * C1392 -
                      ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                        C50942 * C602 + C24700 * C293 + C50941 * C304) *
                           C1386 +
                       (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                        C50942 * C592 + C24700 * C287 + C50941 * C294) *
                           C1391) +
                      (C24931 + C24932 + C24933) * C50611) *
                         C50909 +
                     ((C26438 + C26437 + C26436) * C1392 -
                      ((C31757 + C31756 + C31755) * C1386 +
                       (C31754 + C31753 + C31752) * C1391) +
                      (C26441 + C26440 + C26439) * C50611) *
                         C50828) *
                        C50628 * C1643 +
                    (((C31752 + C31753 + C31754) * C1391 +
                      (C31755 + C31756 + C31757) * C1386 -
                      (C26436 + C26437 + C26438) * C1392 -
                      (C26439 + C26440 + C26441) * C50611) *
                         C50909 +
                     ((C32086 + C32087 + C32088) * C1391 +
                      (C32089 + C32090 + C32091) * C1386 -
                      (C24702 * C3492 + C24697 * C3495 + C24701 * C3317 +
                       C50942 * C3321 + C24700 * C1082 + C50941 * C1089) *
                          C1392 -
                      (C24702 * C3494 + C24697 * C3498 + C24701 * C3322 +
                       C50942 * C3326 + C24700 * C1088 + C50941 * C1094) *
                          C50611) *
                         C50828) *
                        C50628 * C50706) *
                       C50682)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C1391 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C1386 -
                     (C24740 + C24741 + C24742) * C1392 -
                     (C24743 + C24744 + C24745) * C50611) *
                        C50909 +
                    ((C31332 + C31333 + C31334) * C1391 +
                     (C31335 + C31336 + C31337) * C1386 -
                     (C25112 + C25111 + C25110) * C1392 -
                     (C25115 + C25114 + C25113) * C50611) *
                        C50828) *
                       C50628 * C50940 +
                   (((C25110 + C25111 + C25112) * C1392 -
                     ((C31337 + C31336 + C31335) * C1386 +
                      (C31334 + C31333 + C31332) * C1391) +
                     (C25113 + C25114 + C25115) * C50611) *
                        C50909 +
                    ((C25690 + C25689 + C25688) * C1392 -
                     ((C31922 + C31923 + C31924) * C1386 +
                      (C31925 + C31926 + C31927) * C1391) +
                     (C25693 + C25692 + C25691) * C50611) *
                        C50828) *
                       C50628 * C50929 +
                   (((C31927 + C31926 + C31925) * C1391 +
                     (C31924 + C31923 + C31922) * C1386 -
                     (C25688 + C25689 + C25690) * C1392 -
                     (C25691 + C25692 + C25693) * C50611) *
                        C50909 +
                    ((C32202 + C32203 + C32204) * C1391 +
                     (C32205 + C32206 + C32207) * C1386 -
                     (C24702 * C3598 + C24697 * C3604 + C24701 * C3599 +
                      C50942 * C3605 + C24700 * C1168 + C50941 * C1175) *
                         C1392 -
                     (C24702 * C3602 + C24697 * C3610 + C24701 * C3603 +
                      C50942 * C3611 + C24700 * C1174 + C50941 * C1180) *
                         C50611) *
                        C50828) *
                       C50628 * C1875) *
                  C50668) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                     C50942 * C294 + C24702 * C587 + C24697 * C592) *
                        C118 +
                    (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                     C50942 * C304 + C24702 * C593 + C24697 * C602) *
                        C106 -
                    (C24740 + C24741 + C24742) * C119 -
                    (C24743 + C24744 + C24745) * C107 +
                    (C24746 + C24747 + C24748) * C120 +
                    (C24749 + C24750 + C24751) * C108 -
                    (C24752 + C24753 + C24754) * C121 -
                    (C24755 + C24756 + C24757) * C109) *
                       C50909 +
                   ((C24700 * C435 + C50941 * C442 + C24701 * C811 +
                     C50942 * C819 + C24702 * C818 + C24697 * C834) *
                        C118 +
                    (C24700 * C441 + C50941 * C452 + C24701 * C820 +
                     C50942 * C835 + C24702 * C833 + C24697 * C842) *
                        C106 -
                    (C25112 + C25111 + C25110) * C119 -
                    (C25115 + C25114 + C25113) * C107 +
                    (C25118 + C25117 + C25116) * C120 +
                    (C25121 + C25120 + C25119) * C108 -
                    (C24702 * C815 + C24697 * C828 + C24701 * C814 +
                     C50942 * C825 + C24700 * C437 + C50941 * C446) *
                        C121 -
                    (C24702 * C827 + C24697 * C839 + C24701 * C826 +
                     C50942 * C838 + C24700 * C447 + C50941 * C455) *
                        C109) *
                       C50828) *
                  C50628 * C50694 * C50668) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C49720 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50878 -
                     (C24740 + C24741 + C24742) * C49713 -
                     (C24743 + C24744 + C24745) * C50611) *
                        C50909 +
                    ((C31332 + C31333 + C31334) * C49720 +
                     (C31335 + C31336 + C31337) * C50878 -
                     (C25112 + C25111 + C25110) * C49713 -
                     (C25115 + C25114 + C25113) * C50611) *
                        C50828) *
                       C50628 * C50694 * C582 +
                   (((C24928 + C24929 + C24930) * C49713 -
                     ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                       C50942 * C602 + C24700 * C293 + C50941 * C304) *
                          C50878 +
                      (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                       C50942 * C592 + C24700 * C287 + C50941 * C294) *
                          C49720) +
                     (C24931 + C24932 + C24933) * C50611) *
                        C50909 +
                    ((C26438 + C26437 + C26436) * C49713 -
                     ((C24702 * C3159 + C24697 * C3166 + C24701 * C833 +
                       C50942 * C842 + C24700 * C820 + C50941 * C835) *
                          C50878 +
                      (C24702 * C3154 + C24697 * C3158 + C24701 * C818 +
                       C50942 * C834 + C24700 * C811 + C50941 * C819) *
                          C49720) +
                     (C26441 + C26440 + C26439) * C50611) *
                        C50828) *
                       C50628 * C50694 * C583 +
                   (((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                      C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                         C49720 +
                     (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                      C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                         C50878 -
                     (C25280 + C25281 + C25282) * C49713 -
                     (C25283 + C25284 + C25285) * C50611) *
                        C50909 +
                    ((C24700 * C818 + C50941 * C834 + C24701 * C3154 +
                      C50942 * C3158 + C24702 * C3157 + C24697 * C3165) *
                         C49720 +
                     (C24700 * C833 + C50941 * C842 + C24701 * C3159 +
                      C50942 * C3166 + C24702 * C3164 + C24697 * C3169) *
                         C50878 -
                     (C24702 * C3156 + C24697 * C3163 + C24701 * C3155 +
                      C50942 * C3160 + C24700 * C817 + C50941 * C832) *
                         C49713 -
                     (C24702 * C3162 + C24697 * C3168 + C24701 * C3161 +
                      C50942 * C3167 + C24700 * C831 + C50941 * C841) *
                         C50611) *
                        C50828) *
                       C50628 * C50694 * C584)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C283 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C278 -
                     (C24740 + C24741 + C24742) * C284 -
                     (C24743 + C24744 + C24745) * C279 +
                     (C24746 + C24747 + C24748) * C285 +
                     (C24749 + C24750 + C24751) * C280) *
                        C50909 +
                    ((C24700 * C435 + C50941 * C442 + C24701 * C811 +
                      C50942 * C819 + C24702 * C818 + C24697 * C834) *
                         C283 +
                     (C24700 * C441 + C50941 * C452 + C24701 * C820 +
                      C50942 * C835 + C24702 * C833 + C24697 * C842) *
                         C278 -
                     (C25112 + C25111 + C25110) * C284 -
                     (C25115 + C25114 + C25113) * C279 +
                     (C25118 + C25117 + C25116) * C285 +
                     (C25121 + C25120 + C25119) * C280) *
                        C50828) *
                       C50628 * C50694 * C50893 +
                   (((C24928 + C24929 + C24930) * C284 -
                     ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                       C50942 * C602 + C24700 * C293 + C50941 * C304) *
                          C278 +
                      (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                       C50942 * C592 + C24700 * C287 + C50941 * C294) *
                          C283) +
                     (C24931 + C24932 + C24933) * C279 -
                     (C24934 + C24935 + C24936) * C285 -
                     (C24937 + C24938 + C24939) * C280) *
                        C50909 +
                    ((C26438 + C26437 + C26436) * C284 -
                     ((C24702 * C3159 + C24697 * C3166 + C24701 * C833 +
                       C50942 * C842 + C24700 * C820 + C50941 * C835) *
                          C278 +
                      (C24702 * C3154 + C24697 * C3158 + C24701 * C818 +
                       C50942 * C834 + C24700 * C811 + C50941 * C819) *
                          C283) +
                     (C26441 + C26440 + C26439) * C279 -
                     (C24702 * C4100 + C24697 * C4101 + C24701 * C816 +
                      C50942 * C830 + C24700 * C813 + C50941 * C823) *
                         C285 -
                     (C24702 * C4102 + C24697 * C4103 + C24701 * C829 +
                      C50942 * C840 + C24700 * C824 + C50941 * C837) *
                         C280) *
                        C50828) *
                       C50628 * C50694 * C50682)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C696 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C50606) *
                        C50909 +
                    ((C31332 + C31333 + C31334) * C696 +
                     (C31335 + C31336 + C31337) * C50606) *
                        C50828) *
                       C50628 * C50694 * C692 -
                   (((C24702 * C3159 + C24697 * C3166 + C24701 * C833 +
                      C50942 * C842 + C24700 * C820 + C50941 * C835) *
                         C50606 +
                     (C24702 * C3154 + C24697 * C3158 + C24701 * C818 +
                      C50942 * C834 + C24700 * C811 + C50941 * C819) *
                         C696) *
                        C50828 +
                    ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                      C50942 * C602 + C24700 * C293 + C50941 * C304) *
                         C50606 +
                     (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                      C50942 * C592 + C24700 * C287 + C50941 * C294) *
                         C696) *
                        C50909) *
                       C50628 * C50694 * C693 +
                   (((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                      C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                         C696 +
                     (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                      C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                         C50606) *
                        C50909 +
                    ((C24700 * C818 + C50941 * C834 + C24701 * C3154 +
                      C50942 * C3158 + C24702 * C3157 + C24697 * C3165) *
                         C696 +
                     (C24700 * C833 + C50941 * C842 + C24701 * C3159 +
                      C50942 * C3166 + C24702 * C3164 + C24697 * C3169) *
                         C50606) *
                        C50828) *
                       C50628 * C50694 * C694 -
                   (((C24702 * C20547 + C24697 * C20549 + C24701 * C3164 +
                      C50942 * C3169 + C24700 * C3159 + C50941 * C3166) *
                         C50606 +
                     (C24702 * C20546 + C24697 * C20548 + C24701 * C3157 +
                      C50942 * C3165 + C24700 * C3154 + C50941 * C3158) *
                         C696) *
                        C50828 +
                    ((C24702 * C3004 + C24697 * C3007 + C24701 * C2876 +
                      C50942 * C2881 + C24700 * C707 + C50941 * C712) *
                         C50606 +
                     (C24702 * C3001 + C24697 * C3005 + C24701 * C2872 +
                      C50942 * C2875 + C24700 * C700 + C50941 * C708) *
                         C696) *
                        C50909) *
                       C50628 * C50694 * C695)) /
                     (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                      C50942 * C294 + C24702 * C587 + C24697 * C592) *
                         C283 +
                     (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                      C50942 * C304 + C24702 * C593 + C24697 * C602) *
                         C278 -
                     (C24740 + C24741 + C24742) * C284 -
                     (C24743 + C24744 + C24745) * C279 +
                     (C24746 + C24747 + C24748) * C285 +
                     (C24749 + C24750 + C24751) * C280) *
                        C50909 +
                    ((C31332 + C31333 + C31334) * C283 +
                     (C31335 + C31336 + C31337) * C278 -
                     (C25112 + C25111 + C25110) * C284 -
                     (C25115 + C25114 + C25113) * C279 +
                     (C25118 + C25117 + C25116) * C285 +
                     (C25121 + C25120 + C25119) * C280) *
                        C50828) *
                       C50628 * C50894 +
                   (((C25110 + C25111 + C25112) * C284 -
                     ((C31337 + C31336 + C31335) * C278 +
                      (C31334 + C31333 + C31332) * C283) +
                     (C25113 + C25114 + C25115) * C279 -
                     (C25116 + C25117 + C25118) * C285 -
                     (C25119 + C25120 + C25121) * C280) *
                        C50909 +
                    ((C25690 + C25689 + C25688) * C284 -
                     ((C24702 * C3320 + C24697 * C3325 + C24701 * C1090 +
                       C50942 * C1095 + C24700 * C950 + C50941 * C959) *
                          C278 +
                      (C24702 * C3316 + C24697 * C3319 + C24701 * C1083 +
                       C50942 * C1091 + C24700 * C944 + C50941 * C949) *
                          C283) +
                     (C25693 + C25692 + C25691) * C279 -
                     (C24702 * C3318 + C24697 * C3323 + C24701 * C1081 +
                      C50942 * C1087 + C24700 * C946 + C50941 * C953) *
                         C285 -
                     (C24702 * C3324 + C24697 * C3327 + C24701 * C1086 +
                      C50942 * C1093 + C24700 * C954 + C50941 * C961) *
                         C280) *
                        C50828) *
                       C50628 * C50706) *
                  C50668) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C24700 * C122 + C50941 * C129 + C24701 * C287 +
                       C50942 * C294 + C24702 * C587 + C24697 * C592) *
                          C696 +
                      (C24700 * C130 + C50941 * C143 + C24701 * C293 +
                       C50942 * C304 + C24702 * C593 + C24697 * C602) *
                          C50606) *
                         C50909 +
                     ((C31332 + C31333 + C31334) * C696 +
                      (C31335 + C31336 + C31337) * C50606) *
                         C50828) *
                        C50628 * C50894 -
                    (((C24702 * C3320 + C24697 * C3325 + C24701 * C1090 +
                       C50942 * C1095 + C24700 * C950 + C50941 * C959) *
                          C50606 +
                      (C24702 * C3316 + C24697 * C3319 + C24701 * C1083 +
                       C50942 * C1091 + C24700 * C944 + C50941 * C949) *
                          C696) *
                         C50828 +
                     ((C31337 + C31336 + C31335) * C50606 +
                      (C31334 + C31333 + C31332) * C696) *
                         C50909) *
                        C50628 * C50706) *
                       C582 +
                   ((((C31752 + C31753 + C31754) * C696 +
                      (C31755 + C31756 + C31757) * C50606) *
                         C50909 +
                     ((C24700 * C1083 + C50941 * C1091 + C24701 * C3316 +
                       C50942 * C3319 + C24702 * C3493 + C24697 * C3497) *
                          C696 +
                      (C24700 * C1090 + C50941 * C1095 + C24701 * C3320 +
                       C50942 * C3325 + C24702 * C3496 + C24697 * C3499) *
                          C50606) *
                         C50828) *
                        C50628 * C50706 -
                    (((C31757 + C31756 + C31755) * C50606 +
                      (C31754 + C31753 + C31752) * C696) *
                         C50828 +
                     ((C24702 * C707 + C24697 * C712 + C24701 * C593 +
                       C50942 * C602 + C24700 * C293 + C50941 * C304) *
                          C50606 +
                      (C24702 * C700 + C24697 * C708 + C24701 * C587 +
                       C50942 * C592 + C24700 * C287 + C50941 * C294) *
                          C696) *
                         C50909) *
                        C50628 * C50894) *
                       C583 +
                   ((((C24700 * C587 + C50941 * C592 + C24701 * C700 +
                       C50942 * C708 + C24702 * C2872 + C24697 * C2875) *
                          C696 +
                      (C24700 * C593 + C50941 * C602 + C24701 * C707 +
                       C50942 * C712 + C24702 * C2876 + C24697 * C2881) *
                          C50606) *
                         C50909 +
                     ((C31758 + C31759 + C31760) * C696 +
                      (C31761 + C31762 + C31763) * C50606) *
                         C50828) *
                        C50628 * C50894 -
                    (((C24702 * C20747 + C24697 * C20749 + C24701 * C3496 +
                       C50942 * C3499 + C24700 * C3320 + C50941 * C3325) *
                          C50606 +
                      (C24702 * C20746 + C24697 * C20748 + C24701 * C3493 +
                       C50942 * C3497 + C24700 * C3316 + C50941 * C3319) *
                          C696) *
                         C50828 +
                     ((C31763 + C31762 + C31761) * C50606 +
                      (C31760 + C31759 + C31758) * C696) *
                         C50909) *
                        C50628 * C50706) *
                       C584)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C1285 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50936 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C1286 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50920 +
           (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
            C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
               C1287 +
           (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
            C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
               C1282) *
              C50764 * C50628 * C50694 * C1283 +
          ((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
            C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
               C1286 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50936 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C1285) +
           (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
            C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
               C50920 -
           (C20083 * C2874 + C20078 * C2879 + C20082 * C698 + C20077 * C704 +
            C20081 * C589 + C20076 * C596 + C20080 * C288 + C20075 * C296) *
               C1287 -
           (C20083 * C2880 + C20078 * C2883 + C20082 * C703 + C20077 * C710 +
            C20081 * C597 + C20076 * C604 + C20080 * C297 + C20075 * C306) *
               C1282) *
              C50764 * C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C1285 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50936 -
            (C17312 + C17313) * C1286 - (C17314 + C17315) * C50920 +
            C17328 * C1287 + C17329 * C1282) *
               C50764 * C17274 +
           ((C17313 + C17312) * C1285 + (C17315 + C17314) * C50936 -
            (C17317 + C17316) * C1286 - (C17319 + C17318) * C50920 +
            (C17321 + C17320) * C1287 + (C17323 + C17322) * C1282) *
               C50764 * C17275 +
           (C17328 * C1285 + C17329 * C50936 - C17330 * C1286 -
            C17331 * C50920 + (C17325 + C17324) * C1287 +
            (C17327 + C17326) * C1282) *
               C50764 * C17276) *
              C50694 * C1283 +
          (((C17502 + C17503) * C1286 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50936 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C1285) +
            (C17504 + C17505) * C50920 - C17514 * C1287 - C17515 * C1282) *
               C50764 * C17274 +
           ((C17507 + C17506) * C1286 -
            ((C17505 + C17504) * C50936 + (C17503 + C17502) * C1285) +
            (C17509 + C17508) * C50920 - (C17510 + C17511) * C1287 -
            (C17512 + C17513) * C1282) *
               C50764 * C17275 +
           ((C17511 + C17510) * C1286 - (C17515 * C50936 + C17514 * C1285) +
            (C17513 + C17512) * C50920 -
            (C17278 * C591 + C50800 * C600 + C17277 * C290 + C17272 * C300) *
                C1287 -
            (C17278 * C601 + C50800 * C606 + C17277 * C301 + C17272 * C308) *
                C1282) *
               C50764 * C17276) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C1285 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50936 -
            (C17312 + C17313) * C1286 - (C17314 + C17315) * C50920 +
            C17328 * C1287 + C17329 * C1282) *
               C5192 +
           ((C22205 + C22206) * C1285 + (C22207 + C22208) * C50936 -
            (C17687 + C17686) * C1286 - (C17689 + C17688) * C50920 +
            (C17691 + C17690) * C1287 + (C17693 + C17692) * C1282) *
               C5193 +
           (C22797 * C1285 + C22798 * C50936 - C22799 * C1286 -
            C22800 * C50920 + (C18281 + C18280) * C1287 +
            (C18283 + C18282) * C1282) *
               C5194) *
              C50628 * C50694 * C1283 +
          (((C17502 + C17503) * C1286 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50936 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C1285) +
            (C17504 + C17505) * C50920 - C17514 * C1287 - C17515 * C1282) *
               C5192 +
           ((C19031 + C19030) * C1286 -
            ((C22638 + C22637) * C50936 + (C22636 + C22635) * C1285) +
            (C19033 + C19032) * C50920 - (C19034 + C19035) * C1287 -
            (C19036 + C19037) * C1282) *
               C5193 +
           ((C17277 * C1082 + C17272 * C1089 + C17278 * C3317 +
             C50800 * C3321) *
                C1286 -
            (C22992 * C50936 + C22993 * C1285) +
            (C17277 * C1088 + C17272 * C1094 + C17278 * C3322 +
             C50800 * C3326) *
                C50920 -
            (C17278 * C3318 + C50800 * C3323 + C17277 * C1081 +
             C17272 * C1087) *
                C1287 -
            (C17278 * C3324 + C50800 * C3327 + C17277 * C1086 +
             C17272 * C1093) *
                C1282) *
               C5194) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C1391 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C1386 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C1392 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50611) *
              C50764 * C50628 * C50694 * C50939 +
          ((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
            C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
               C1392 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C1386 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C1391) +
           (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
            C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
               C50611) *
              C50764 * C50628 * C50694 * C50926 +
          ((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
            C20082 * C2872 + C20077 * C2875 + C20083 * C3001 + C20078 * C3005) *
               C1391 +
           (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
            C20082 * C2876 + C20077 * C2881 + C20083 * C3004 + C20078 * C3007) *
               C1386 -
           (C20083 * C3000 + C20078 * C3003 + C20082 * C2873 + C20077 * C2877 +
            C20081 * C699 + C20076 * C706 + C20080 * C588 + C20075 * C594) *
               C1392 -
           (C20083 * C3002 + C20078 * C3006 + C20082 * C2878 + C20077 * C2882 +
            C20081 * C705 + C20076 * C711 + C20080 * C595 + C20075 * C603) *
               C50611) *
              C50764 * C50628 * C50694 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C1391 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C1386 -
            (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
               C50764 * C17274 +
           ((C17313 + C17312) * C1391 + (C17315 + C17314) * C1386 -
            (C17317 + C17316) * C1392 - (C17319 + C17318) * C50611) *
               C50764 * C17275 +
           (C17328 * C1391 + C17329 * C1386 - C17330 * C1392 -
            C17331 * C50611) *
               C50764 * C17276) *
              C50694 * C50939 +
          (((C17502 + C17503) * C1392 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C1386 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C1391) +
            (C17504 + C17505) * C50611) *
               C50764 * C17274 +
           ((C17507 + C17506) * C1392 -
            ((C17505 + C17504) * C1386 + (C17503 + C17502) * C1391) +
            (C17509 + C17508) * C50611) *
               C50764 * C17275 +
           ((C17511 + C17510) * C1392 - (C17515 * C1386 + C17514 * C1391) +
            (C17513 + C17512) * C50611) *
               C50764 * C17276) *
              C50694 * C50926 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C1391 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C1386 -
            (C17862 + C17863) * C1392 - (C17864 + C17865) * C50611) *
               C50764 * C17274 +
           ((C17863 + C17862) * C1391 + (C17865 + C17864) * C1386 -
            (C17866 + C17867) * C1392 - (C17868 + C17869) * C50611) *
               C50764 * C17275 +
           ((C17867 + C17866) * C1391 + (C17869 + C17868) * C1386 -
            (C17278 * C697 + C50800 * C702 + C17277 * C590 + C17272 * C598) *
                C1392 -
            (C17278 * C701 + C50800 * C709 + C17277 * C599 + C17272 * C605) *
                C50611) *
               C50764 * C17276) *
              C50694 * C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C1391 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C1386 -
            (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
               C5192 +
           ((C22205 + C22206) * C1391 + (C22207 + C22208) * C1386 -
            (C17687 + C17686) * C1392 - (C17689 + C17688) * C50611) *
               C5193 +
           (C22797 * C1391 + C22798 * C1386 - C22799 * C1392 -
            C22800 * C50611) *
               C5194) *
              C50628 * C50694 * C50939 +
          (((C17502 + C17503) * C1392 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C1386 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C1391) +
            (C17504 + C17505) * C50611) *
               C5192 +
           ((C19031 + C19030) * C1392 -
            ((C22638 + C22637) * C1386 + (C22636 + C22635) * C1391) +
            (C19033 + C19032) * C50611) *
               C5193 +
           ((C17277 * C1082 + C17272 * C1089 + C17278 * C3317 +
             C50800 * C3321) *
                C1392 -
            (C22992 * C1386 + C22993 * C1391) +
            (C17277 * C1088 + C17272 * C1094 + C17278 * C3322 +
             C50800 * C3326) *
                C50611) *
               C5194) *
              C50628 * C50694 * C50926 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C1391 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C1386 -
            (C17862 + C17863) * C1392 - (C17864 + C17865) * C50611) *
               C5192 +
           ((C22643 + C22644) * C1391 + (C22645 + C22646) * C1386 -
            (C17278 * C3155 + C50800 * C3160 + C17277 * C817 + C17272 * C832) *
                C1392 -
            (C17278 * C3161 + C50800 * C3167 + C17277 * C831 + C17272 * C841) *
                C50611) *
               C5193 +
           ((C22647 + C22648) * C1391 + (C22649 + C22650) * C1386 -
            (C17278 * C3492 + C50800 * C3495 + C17277 * C3317 +
             C17272 * C3321) *
                C1392 -
            (C17278 * C3494 + C50800 * C3498 + C17277 * C3322 +
             C17272 * C3326) *
                C50611) *
               C5194) *
              C50628 * C50694 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C1391 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C1386 -
            (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
             C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
                C1392 -
            (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
             C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
                C50611) *
               C50764 * C50628 * C50894 +
           ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
             C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
                C1392 -
            ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
              C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                 C1386 +
             (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
              C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                 C1391) +
            (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
             C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
                C50611) *
               C50764 * C50628 * C50706) *
              C1283 +
          (((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
             C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
                C1392 -
            ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
              C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                 C1386 +
             (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
              C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                 C1391) +
            (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
             C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
                C50611) *
               C50764 * C50628 * C50894 +
           ((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C1391 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C1386 -
            (C20083 * C3156 + C20078 * C3163 + C20082 * C3155 + C20077 * C3160 +
             C20081 * C817 + C20076 * C832 + C20080 * C812 + C20075 * C821) *
                C1392 -
            (C20083 * C3162 + C20078 * C3168 + C20082 * C3161 + C20077 * C3167 +
             C20081 * C831 + C20076 * C841 + C20080 * C822 + C20075 * C836) *
                C50611) *
               C50764 * C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C1391 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C1386 -
             (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
                C50764 * C17274 +
            ((C17313 + C17312) * C1391 + (C17315 + C17314) * C1386 -
             (C17317 + C17316) * C1392 - (C17319 + C17318) * C50611) *
                C50764 * C17275 +
            (C17328 * C1391 + C17329 * C1386 - C17330 * C1392 -
             C17331 * C50611) *
                C50764 * C17276) *
               C50894 +
           (((C17686 + C17687) * C1392 -
             ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                  C1386 +
              (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                  C1391) +
             (C17688 + C17689) * C50611) *
                C50764 * C17274 +
            ((C17691 + C17690) * C1392 -
             ((C17689 + C17688) * C1386 + (C17687 + C17686) * C1391) +
             (C17693 + C17692) * C50611) *
                C50764 * C17275 +
            ((C17695 + C17694) * C1392 - (C17699 * C1386 + C17698 * C1391) +
             (C17697 + C17696) * C50611) *
                C50764 * C17276) *
               C50706) *
              C1283 +
          ((((C17502 + C17503) * C1392 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C1386 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C1391) +
             (C17504 + C17505) * C50611) *
                C50764 * C17274 +
            ((C17507 + C17506) * C1392 -
             ((C17505 + C17504) * C1386 + (C17503 + C17502) * C1391) +
             (C17509 + C17508) * C50611) *
                C50764 * C17275 +
            ((C17511 + C17510) * C1392 - (C17515 * C1386 + C17514 * C1391) +
             (C17513 + C17512) * C50611) *
                C50764 * C17276) *
               C50894 +
           (((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C1391 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C1386 -
             (C19030 + C19031) * C1392 - (C19032 + C19033) * C50611) *
                C50764 * C17274 +
            ((C19031 + C19030) * C1391 + (C19033 + C19032) * C1386 -
             (C19034 + C19035) * C1392 - (C19036 + C19037) * C50611) *
                C50764 * C17275 +
            ((C19035 + C19034) * C1391 + (C19037 + C19036) * C1386 -
             (C17278 * C815 + C50800 * C828 + C17277 * C814 + C17272 * C825) *
                 C1392 -
             (C17278 * C827 + C50800 * C839 + C17277 * C826 + C17272 * C838) *
                 C50611) *
                C50764 * C17276) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C1391 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C1386 -
             (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
                C5192 +
            ((C22205 + C22206) * C1391 + (C22207 + C22208) * C1386 -
             (C17687 + C17686) * C1392 - (C17689 + C17688) * C50611) *
                C5193 +
            (C22797 * C1391 + C22798 * C1386 - C22799 * C1392 -
             C22800 * C50611) *
                C5194) *
               C50628 * C50894 +
           (((C17686 + C17687) * C1392 -
             ((C22208 + C22207) * C1386 + (C22206 + C22205) * C1391) +
             (C17688 + C17689) * C50611) *
                C5192 +
            ((C18277 + C18276) * C1392 -
             ((C22212 + C22211) * C1386 + (C22210 + C22209) * C1391) +
             (C18279 + C18278) * C50611) *
                C5193 +
            ((C22821 + C22822) * C1392 - (C23104 * C1386 + C23105 * C1391) +
             (C22827 + C22828) * C50611) *
                C5194) *
               C50628 * C50706) *
              C1283 +
          ((((C17502 + C17503) * C1392 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C1386 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C1391) +
             (C17504 + C17505) * C50611) *
                C5192 +
            ((C19031 + C19030) * C1392 -
             ((C22638 + C22637) * C1386 + (C22636 + C22635) * C1391) +
             (C19033 + C19032) * C50611) *
                C5193 +
            ((C23615 + C23616) * C1392 - (C22992 * C1386 + C22993 * C1391) +
             (C23617 + C23618) * C50611) *
                C5194) *
               C50628 * C50894 +
           (((C22635 + C22636) * C1391 + (C22637 + C22638) * C1386 -
             (C19030 + C19031) * C1392 - (C19032 + C19033) * C50611) *
                C5192 +
            ((C22639 + C22640) * C1391 + (C22641 + C22642) * C1386 -
             (C23616 + C23615) * C1392 - (C23618 + C23617) * C50611) *
                C5193 +
            ((C22995 + C22996) * C1391 + (C22997 + C22998) * C1386 -
             (C17278 * C3598 + C50800 * C3604 + C17277 * C3599 +
              C17272 * C3605) *
                 C1392 -
             (C17278 * C3602 + C50800 * C3610 + C17277 * C3603 +
              C17272 * C3611) *
                 C50611) *
                C5194) *
               C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C49720 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C50878 -
            (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
             C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
                C49713 -
            (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
             C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
                C50611) *
               C50764 * C50628 * C1643 +
           ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
             C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
                C49713 -
            ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
              C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                 C50878 +
             (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
              C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                 C49720) +
            (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
             C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
                C50611) *
               C50764 * C50628 * C50706) *
              C1283 +
          (((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
             C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
                C49713 -
            ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
              C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                 C50878 +
             (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
              C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                 C49720) +
            (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
             C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
                C50611) *
               C50764 * C50628 * C1643 +
           ((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C49720 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C50878 -
            (C20083 * C3156 + C20078 * C3163 + C20082 * C3155 + C20077 * C3160 +
             C20081 * C817 + C20076 * C832 + C20080 * C812 + C20075 * C821) *
                C49713 -
            (C20083 * C3162 + C20078 * C3168 + C20082 * C3161 + C20077 * C3167 +
             C20081 * C831 + C20076 * C841 + C20080 * C822 + C20075 * C836) *
                C50611) *
               C50764 * C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50878 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
                C50764 * C17274 +
            ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50878 -
             (C17317 + C17316) * C49713 - (C17319 + C17318) * C50611) *
                C50764 * C17275 +
            (C17328 * C49720 + C17329 * C50878 - C17330 * C49713 -
             C17331 * C50611) *
                C50764 * C17276) *
               C1643 +
           (((C17686 + C17687) * C49713 -
             ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                  C50878 +
              (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                  C49720) +
             (C17688 + C17689) * C50611) *
                C50764 * C17274 +
            ((C17691 + C17690) * C49713 -
             ((C17689 + C17688) * C50878 + (C17687 + C17686) * C49720) +
             (C17693 + C17692) * C50611) *
                C50764 * C17275 +
            ((C17695 + C17694) * C49713 - (C17699 * C50878 + C17698 * C49720) +
             (C17697 + C17696) * C50611) *
                C50764 * C17276) *
               C50706) *
              C1283 +
          ((((C17502 + C17503) * C49713 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C50878 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C49720) +
             (C17504 + C17505) * C50611) *
                C50764 * C17274 +
            ((C17507 + C17506) * C49713 -
             ((C17505 + C17504) * C50878 + (C17503 + C17502) * C49720) +
             (C17509 + C17508) * C50611) *
                C50764 * C17275 +
            ((C17511 + C17510) * C49713 - (C17515 * C50878 + C17514 * C49720) +
             (C17513 + C17512) * C50611) *
                C50764 * C17276) *
               C1643 +
           (((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C49720 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C50878 -
             (C19030 + C19031) * C49713 - (C19032 + C19033) * C50611) *
                C50764 * C17274 +
            ((C19031 + C19030) * C49720 + (C19033 + C19032) * C50878 -
             (C19034 + C19035) * C49713 - (C19036 + C19037) * C50611) *
                C50764 * C17275 +
            ((C19035 + C19034) * C49720 + (C19037 + C19036) * C50878 -
             (C17278 * C815 + C50800 * C828 + C17277 * C814 + C17272 * C825) *
                 C49713 -
             (C17278 * C827 + C50800 * C839 + C17277 * C826 + C17272 * C838) *
                 C50611) *
                C50764 * C17276) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50878 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
                C5192 +
            ((C22205 + C22206) * C49720 + (C22207 + C22208) * C50878 -
             (C17687 + C17686) * C49713 - (C17689 + C17688) * C50611) *
                C5193 +
            C22831 * C5194) *
               C50628 * C1643 +
           (((C17686 + C17687) * C49713 -
             ((C22208 + C22207) * C50878 + (C22206 + C22205) * C49720) +
             (C17688 + C17689) * C50611) *
                C5192 +
            ((C18277 + C18276) * C49713 -
             ((C22212 + C22211) * C50878 + (C22210 + C22209) * C49720) +
             (C18279 + C18278) * C50611) *
                C5193 +
            ((C22821 + C22822) * C49713 - (C23104 * C50878 + C23105 * C49720) +
             (C22827 + C22828) * C50611) *
                C5194) *
               C50628 * C50706) *
              C1283 +
          ((((C17502 + C17503) * C49713 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C50878 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C49720) +
             (C17504 + C17505) * C50611) *
                C5192 +
            ((C19031 + C19030) * C49713 -
             ((C22638 + C22637) * C50878 + (C22636 + C22635) * C49720) +
             (C19033 + C19032) * C50611) *
                C5193 +
            ((C23615 + C23616) * C49713 - (C22992 * C50878 + C22993 * C49720) +
             (C23617 + C23618) * C50611) *
                C5194) *
               C50628 * C1643 +
           (((C22635 + C22636) * C49720 + (C22637 + C22638) * C50878 -
             (C19030 + C19031) * C49713 - (C19032 + C19033) * C50611) *
                C5192 +
            ((C22639 + C22640) * C49720 + (C22641 + C22642) * C50878 -
             (C23616 + C23615) * C49713 - (C23618 + C23617) * C50611) *
                C5193 +
            ((C22995 + C22996) * C49720 + (C22997 + C22998) * C50878 -
             (C17278 * C3598 + C50800 * C3604 + C17277 * C3599 +
              C17272 * C3605) *
                 C49713 -
             (C17278 * C3602 + C50800 * C3610 + C17277 * C3603 +
              C17272 * C3611) *
                 C50611) *
                C5194) *
               C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C696 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C50606) *
               C50764 * C50628 * C1643 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50606 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C696) *
               C50764 * C50628 * C50706) *
              C50939 +
          (((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C696 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C50606) *
               C50764 * C50628 * C50706 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50606 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C696) *
               C50764 * C50628 * C1643) *
              C50926 +
          (((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
             C20082 * C2872 + C20077 * C2875 + C20083 * C3001 +
             C20078 * C3005) *
                C696 +
            (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
             C20082 * C2876 + C20077 * C2881 + C20083 * C3004 +
             C20078 * C3007) *
                C50606) *
               C50764 * C50628 * C1643 -
           ((C20083 * C20547 + C20078 * C20549 + C20082 * C3164 +
             C20077 * C3169 + C20081 * C3159 + C20076 * C3166 + C20080 * C833 +
             C20075 * C842) *
                C50606 +
            (C20083 * C20546 + C20078 * C20548 + C20082 * C3157 +
             C20077 * C3165 + C20081 * C3154 + C20076 * C3158 + C20080 * C818 +
             C20075 * C834) *
                C696) *
               C50764 * C50628 * C50706) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C17274 +
            ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
                C17275 +
            (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
               C1643 -
           ((C17699 * C50606 + C17698 * C696) * C50764 * C17276 +
            ((C17689 + C17688) * C50606 + (C17687 + C17686) * C696) * C50764 *
                C17275 +
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50606 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C696) *
                C50764 * C17274) *
               C50706) *
              C50939 +
          ((((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C696 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C17274 +
            ((C19031 + C19030) * C696 + (C19033 + C19032) * C50606) * C50764 *
                C17275 +
            ((C19035 + C19034) * C696 + (C19037 + C19036) * C50606) * C50764 *
                C17276) *
               C50706 -
           ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
            ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50764 *
                C17275 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C50764 * C17274) *
               C1643) *
              C50926 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C696 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C50606) *
                C50764 * C17274 +
            ((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50764 *
                C17275 +
            ((C17867 + C17866) * C696 + (C17869 + C17868) * C50606) * C50764 *
                C17276) *
               C1643 -
           (((C17278 * C4102 + C50800 * C4103 + C17277 * C829 + C17272 * C840) *
                 C50606 +
             (C17278 * C4100 + C50800 * C4101 + C17277 * C816 + C17272 * C830) *
                 C696) *
                C50764 * C17276 +
            ((C17278 * C3161 + C50800 * C3167 + C17277 * C831 + C17272 * C841) *
                 C50606 +
             (C17278 * C3155 + C50800 * C3160 + C17277 * C817 + C17272 * C832) *
                 C696) *
                C50764 * C17275 +
            ((C17278 * C3159 + C50800 * C3166 + C17277 * C833 + C17272 * C842) *
                 C50606 +
             (C17278 * C3154 + C50800 * C3158 + C17277 * C818 + C17272 * C834) *
                 C696) *
                C50764 * C17274) *
               C50706) *
              C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C5192 +
            ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C5193 +
            C22994 * C5194) *
               C50628 * C1643 -
           (C23120 * C5194 +
            ((C22212 + C22211) * C50606 + (C22210 + C22209) * C696) * C5193 +
            ((C22208 + C22207) * C50606 + (C22206 + C22205) * C696) * C5192) *
               C50628 * C50706) *
              C50939 +
          ((((C22635 + C22636) * C696 + (C22637 + C22638) * C50606) * C5192 +
            ((C22639 + C22640) * C696 + (C22641 + C22642) * C50606) * C5193 +
            ((C22995 + C22996) * C696 + (C22997 + C22998) * C50606) * C5194) *
               C50628 * C50706 -
           (C23001 * C5194 +
            ((C22638 + C22637) * C50606 + (C22636 + C22635) * C696) * C5193 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C5192) *
               C50628 * C1643) *
              C50926 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C696 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C50606) *
                C5192 +
            ((C22643 + C22644) * C696 + (C22645 + C22646) * C50606) * C5193 +
            ((C22647 + C22648) * C696 + (C22649 + C22650) * C50606) * C5194) *
               C50628 * C1643 -
           (((C17278 * C20817 + C50800 * C20819 + C17277 * C3606 +
              C17272 * C3612) *
                 C50606 +
             (C17278 * C20816 + C50800 * C20818 + C17277 * C3600 +
              C17272 * C3608) *
                 C696) *
                C5194 +
            ((C22650 + C22649) * C50606 + (C22648 + C22647) * C696) * C5193 +
            ((C22646 + C22645) * C50606 + (C22644 + C22643) * C696) * C5192) *
               C50628 * C50706) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C696 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C50606) *
               C50764 * C50628 * C50940 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50606 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C696) *
               C50764 * C50628 * C50929 +
           ((C20080 * C944 + C20075 * C949 + C20081 * C1083 + C20076 * C1091 +
             C20082 * C3316 + C20077 * C3319 + C20083 * C3493 +
             C20078 * C3497) *
                C696 +
            (C20080 * C950 + C20075 * C959 + C20081 * C1090 + C20076 * C1095 +
             C20082 * C3320 + C20077 * C3325 + C20083 * C3496 +
             C20078 * C3499) *
                C50606) *
               C50764 * C50628 * C1875) *
              C1283 +
          (((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C696 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C50606) *
               C50764 * C50628 * C50929 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50606 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C696) *
               C50764 * C50628 * C50940 -
           ((C20083 * C20747 + C20078 * C20749 + C20082 * C3496 +
             C20077 * C3499 + C20081 * C3320 + C20076 * C3325 + C20080 * C1090 +
             C20075 * C1095) *
                C50606 +
            (C20083 * C20746 + C20078 * C20748 + C20082 * C3493 +
             C20077 * C3497 + C20081 * C3316 + C20076 * C3319 + C20080 * C1083 +
             C20075 * C1091) *
                C696) *
               C50764 * C50628 * C1875) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C17274 +
            ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
                C17275 +
            (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
               C50940 -
           ((C17699 * C50606 + C17698 * C696) * C50764 * C17276 +
            ((C17689 + C17688) * C50606 + (C17687 + C17686) * C696) * C50764 *
                C17275 +
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50606 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C696) *
                C50764 * C17274) *
               C50929 +
           (((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
                 C696 +
             (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
                 C50606) *
                C50764 * C17274 +
            ((C18277 + C18276) * C696 + (C18279 + C18278) * C50606) * C50764 *
                C17275 +
            ((C18281 + C18280) * C696 + (C18283 + C18282) * C50606) * C50764 *
                C17276) *
               C1875) *
              C1283 +
          ((((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C696 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C17274 +
            ((C19031 + C19030) * C696 + (C19033 + C19032) * C50606) * C50764 *
                C17275 +
            ((C19035 + C19034) * C696 + (C19037 + C19036) * C50606) * C50764 *
                C17276) *
               C50929 -
           ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
            ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50764 *
                C17275 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C50764 * C17274) *
               C50940 -
           (((C17278 * C3324 + C50800 * C3327 + C17277 * C1086 +
              C17272 * C1093) *
                 C50606 +
             (C17278 * C3318 + C50800 * C3323 + C17277 * C1081 +
              C17272 * C1087) *
                 C696) *
                C50764 * C17276 +
            ((C17278 * C3322 + C50800 * C3326 + C17277 * C1088 +
              C17272 * C1094) *
                 C50606 +
             (C17278 * C3317 + C50800 * C3321 + C17277 * C1082 +
              C17272 * C1089) *
                 C696) *
                C50764 * C17275 +
            ((C17278 * C3320 + C50800 * C3325 + C17277 * C1090 +
              C17272 * C1095) *
                 C50606 +
             (C17278 * C3316 + C50800 * C3319 + C17277 * C1083 +
              C17272 * C1091) *
                 C696) *
                C50764 * C17274) *
               C1875) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C5192 +
            ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C5193 +
            C22994 * C5194) *
               C50628 * C50940 -
           (C23120 * C5194 +
            ((C22212 + C22211) * C50606 + (C22210 + C22209) * C696) * C5193 +
            ((C22208 + C22207) * C50606 + (C22206 + C22205) * C696) * C5192) *
               C50628 * C50929 +
           (C22994 * C5192 +
            ((C22826 + C22825) * C696 + (C22824 + C22823) * C50606) * C5193 +
            ((C23116 + C23117) * C696 + (C23118 + C23119) * C50606) * C5194) *
               C50628 * C1875) *
              C1283 +
          ((((C22635 + C22636) * C696 + (C22637 + C22638) * C50606) * C5192 +
            ((C22639 + C22640) * C696 + (C22641 + C22642) * C50606) * C5193 +
            ((C22995 + C22996) * C696 + (C22997 + C22998) * C50606) * C5194) *
               C50628 * C50929 -
           (C23001 * C5194 +
            ((C22638 + C22637) * C50606 + (C22636 + C22635) * C696) * C5193 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C5192) *
               C50628 * C50940 -
           (((C17278 * C22978 + C50800 * C22980 + C17277 * C6347 +
              C17272 * C6350) *
                 C50606 +
             (C17278 * C22977 + C50800 * C22979 + C17277 * C6344 +
              C17272 * C6348) *
                 C696) *
                C5194 +
            ((C22998 + C22997) * C50606 + (C22996 + C22995) * C696) * C5193 +
            C23001 * C5192) *
               C50628 * C1875) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                   C118 +
               (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                   C106 -
               (C17312 + C17313) * C119 - (C17314 + C17315) * C107 +
               C17328 * C120 + C17329 * C108 - C17330 * C121 - C17331 * C109) *
                  C50764 * C17274 +
              ((C17313 + C17312) * C118 + (C17315 + C17314) * C106 -
               (C17317 + C17316) * C119 - (C17319 + C17318) * C107 +
               (C17321 + C17320) * C120 + (C17323 + C17322) * C108 -
               (C17324 + C17325) * C121 - (C17326 + C17327) * C109) *
                  C50764 * C17275 +
              (C17328 * C118 + C17329 * C106 - C17330 * C119 - C17331 * C107 +
               (C17325 + C17324) * C120 + (C17327 + C17326) * C108 -
               (C17278 * C291 + C50800 * C302 + C17277 * C127 + C17272 * C139) *
                   C121 -
               (C17278 * C303 + C50800 * C309 + C17277 * C140 + C17272 * C148) *
                   C109) *
                  C50764 * C17276) *
             C50694 * C50668 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17277 * C122 + C17272 * C129 + C17278 * C287 +
                 C50800 * C294) *
                    C49720 +
                (C17277 * C130 + C17272 * C143 + C17278 * C293 +
                 C50800 * C304) *
                    C50878 -
                (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
                   C50764 * C17274 +
               ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50878 -
                (C17317 + C17316) * C49713 - (C17319 + C17318) * C50611) *
                   C50764 * C17275 +
               (C17328 * C49720 + C17329 * C50878 - C17330 * C49713 -
                C17331 * C50611) *
                   C50764 * C17276) *
                  C50694 * C582 +
              (((C17502 + C17503) * C49713 -
                ((C17278 * C593 + C50800 * C602 + C17277 * C293 +
                  C17272 * C304) *
                     C50878 +
                 (C17278 * C587 + C50800 * C592 + C17277 * C287 +
                  C17272 * C294) *
                     C49720) +
                (C17504 + C17505) * C50611) *
                   C50764 * C17274 +
               ((C17507 + C17506) * C49713 -
                ((C17505 + C17504) * C50878 + (C17503 + C17502) * C49720) +
                (C17509 + C17508) * C50611) *
                   C50764 * C17275 +
               ((C17511 + C17510) * C49713 -
                (C17515 * C50878 + C17514 * C49720) +
                (C17513 + C17512) * C50611) *
                   C50764 * C17276) *
                  C50694 * C583 +
              (((C17277 * C587 + C17272 * C592 + C17278 * C700 +
                 C50800 * C708) *
                    C49720 +
                (C17277 * C593 + C17272 * C602 + C17278 * C707 +
                 C50800 * C712) *
                    C50878 -
                (C17862 + C17863) * C49713 - (C17864 + C17865) * C50611) *
                   C50764 * C17274 +
               ((C17863 + C17862) * C49720 + (C17865 + C17864) * C50878 -
                (C17866 + C17867) * C49713 - (C17868 + C17869) * C50611) *
                   C50764 * C17275 +
               ((C17867 + C17866) * C49720 + (C17869 + C17868) * C50878 -
                (C17278 * C697 + C50800 * C702 + C17277 * C590 +
                 C17272 * C598) *
                    C49713 -
                (C17278 * C701 + C50800 * C709 + C17277 * C599 +
                 C17272 * C605) *
                    C50611) *
                   C50764 * C17276) *
                  C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50878 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
               C50764 * C17274 +
           ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50878 -
            (C17317 + C17316) * C49713 - (C17319 + C17318) * C50611) *
               C50764 * C17275 +
           (C17328 * C49720 + C17329 * C50878 - C17330 * C49713 -
            C17331 * C50611) *
               C50764 * C17276) *
              C941 +
          (((C17686 + C17687) * C49713 -
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50878 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C49720) +
            (C17688 + C17689) * C50611) *
               C50764 * C17274 +
           ((C17691 + C17690) * C49713 -
            ((C17689 + C17688) * C50878 + (C17687 + C17686) * C49720) +
            (C17693 + C17692) * C50611) *
               C50764 * C17275 +
           ((C17695 + C17694) * C49713 - (C17699 * C50878 + C17698 * C49720) +
            (C17697 + C17696) * C50611) *
               C50764 * C17276) *
              C942 +
          (((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
                C49720 +
            (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
                C50878 -
            (C18276 + C18277) * C49713 - (C18278 + C18279) * C50611) *
               C50764 * C17274 +
           ((C18277 + C18276) * C49720 + (C18279 + C18278) * C50878 -
            (C18280 + C18281) * C49713 - (C18282 + C18283) * C50611) *
               C50764 * C17275 +
           ((C18281 + C18280) * C49720 + (C18283 + C18282) * C50878 -
            (C17278 * C1080 + C50800 * C1085 + C17277 * C947 + C17272 * C955) *
                C49713 -
            (C17278 * C1084 + C50800 * C1092 + C17277 * C956 + C17272 * C962) *
                C50611) *
               C50764 * C17276) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
           C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
              C118 +
          (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
           C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
              C106 -
          (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
           C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
              C119 -
          (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
           C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
              C107 +
          (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
           C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
              C120 +
          (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
           C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
              C108 -
          (C20083 * C697 + C20078 * C702 + C20082 * C590 + C20077 * C598 +
           C20081 * C289 + C20076 * C298 + C20080 * C125 + C20075 * C135) *
              C121 -
          (C20083 * C701 + C20078 * C709 + C20082 * C599 + C20077 * C605 +
           C20081 * C299 + C20076 * C307 + C20080 * C136 + C20075 * C146) *
              C109) *
         C50764 * C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C49720 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50878 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C49713 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50611) *
              C50764 * C50628 * C50694 * C582 +
          ((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
            C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
               C49713 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50878 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C49720) +
           (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
            C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
               C50611) *
              C50764 * C50628 * C50694 * C583 +
          ((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
            C20082 * C2872 + C20077 * C2875 + C20083 * C3001 + C20078 * C3005) *
               C49720 +
           (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
            C20082 * C2876 + C20077 * C2881 + C20083 * C3004 + C20078 * C3007) *
               C50878 -
           (C20083 * C3000 + C20078 * C3003 + C20082 * C2873 + C20077 * C2877 +
            C20081 * C699 + C20076 * C706 + C20080 * C588 + C20075 * C594) *
               C49713 -
           (C20083 * C3002 + C20078 * C3006 + C20082 * C2878 + C20077 * C2882 +
            C20081 * C705 + C20076 * C711 + C20080 * C595 + C20075 * C603) *
               C50611) *
              C50764 * C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C49720 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50878 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C49713 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50611) *
              C50764 * C50628 * C941 +
          ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
            C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
               C49713 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50878 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C49720) +
           (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
            C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
               C50611) *
              C50764 * C50628 * C942 +
          ((C20080 * C944 + C20075 * C949 + C20081 * C1083 + C20076 * C1091 +
            C20082 * C3316 + C20077 * C3319 + C20083 * C3493 + C20078 * C3497) *
               C49720 +
           (C20080 * C950 + C20075 * C959 + C20081 * C1090 + C20076 * C1095 +
            C20082 * C3320 + C20077 * C3325 + C20083 * C3496 + C20078 * C3499) *
               C50878 -
           (C20083 * C3492 + C20078 * C3495 + C20082 * C3317 + C20077 * C3321 +
            C20081 * C1082 + C20076 * C1089 + C20080 * C945 + C20075 * C951) *
               C49713 -
           (C20083 * C3494 + C20078 * C3498 + C20082 * C3322 + C20077 * C3326 +
            C20081 * C1088 + C20076 * C1094 + C20080 * C952 + C20075 * C960) *
               C50611) *
              C50764 * C50628 * C943) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
               C118 +
           (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
               C106 -
           (C17312 + C17313) * C119 - (C17314 + C17315) * C107 + C17328 * C120 +
           C17329 * C108 - C17330 * C121 - C17331 * C109) *
              C5192 +
          ((C17277 * C435 + C17272 * C442 + C17278 * C811 + C50800 * C819) *
               C118 +
           (C17277 * C441 + C17272 * C452 + C17278 * C820 + C50800 * C835) *
               C106 -
           (C17687 + C17686) * C119 - (C17689 + C17688) * C107 +
           (C17691 + C17690) * C120 + (C17693 + C17692) * C108 -
           (C17694 + C17695) * C121 - (C17696 + C17697) * C109) *
              C5193 +
          ((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
               C118 +
           (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
               C106 -
           (C18276 + C18277) * C119 - (C18278 + C18279) * C107 +
           (C18281 + C18280) * C120 + (C18283 + C18282) * C108 -
           (C17278 * C1080 + C50800 * C1085 + C17277 * C947 + C17272 * C955) *
               C121 -
           (C17278 * C1084 + C50800 * C1092 + C17277 * C956 + C17272 * C962) *
               C109) *
              C5194) *
         C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50878 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
               C5192 +
           ((C22205 + C22206) * C49720 + (C22207 + C22208) * C50878 -
            (C17687 + C17686) * C49713 - (C17689 + C17688) * C50611) *
               C5193 +
           ((C22209 + C22210) * C49720 + (C22211 + C22212) * C50878 -
            (C18276 + C18277) * C49713 - (C18278 + C18279) * C50611) *
               C5194) *
              C50628 * C50694 * C582 +
          (((C17502 + C17503) * C49713 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50878 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C49720) +
            (C17504 + C17505) * C50611) *
               C5192 +
           ((C19031 + C19030) * C49713 -
            ((C17278 * C833 + C50800 * C842 + C17277 * C820 + C17272 * C835) *
                 C50878 +
             (C17278 * C818 + C50800 * C834 + C17277 * C811 + C17272 * C819) *
                 C49720) +
            (C19033 + C19032) * C50611) *
               C5193 +
           ((C17277 * C1082 + C17272 * C1089 + C17278 * C3317 +
             C50800 * C3321) *
                C49713 -
            ((C17278 * C3320 + C50800 * C3325 + C17277 * C1090 +
              C17272 * C1095) *
                 C50878 +
             (C17278 * C3316 + C50800 * C3319 + C17277 * C1083 +
              C17272 * C1091) *
                 C49720) +
            (C17277 * C1088 + C17272 * C1094 + C17278 * C3322 +
             C50800 * C3326) *
                C50611) *
               C5194) *
              C50628 * C50694 * C583 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C49720 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C50878 -
            (C17862 + C17863) * C49713 - (C17864 + C17865) * C50611) *
               C5192 +
           ((C17277 * C818 + C17272 * C834 + C17278 * C3154 + C50800 * C3158) *
                C49720 +
            (C17277 * C833 + C17272 * C842 + C17278 * C3159 + C50800 * C3166) *
                C50878 -
            (C17278 * C3155 + C50800 * C3160 + C17277 * C817 + C17272 * C832) *
                C49713 -
            (C17278 * C3161 + C50800 * C3167 + C17277 * C831 + C17272 * C841) *
                C50611) *
               C5193 +
           ((C17277 * C3316 + C17272 * C3319 + C17278 * C3493 +
             C50800 * C3497) *
                C49720 +
            (C17277 * C3320 + C17272 * C3325 + C17278 * C3496 +
             C50800 * C3499) *
                C50878 -
            (C17278 * C3492 + C50800 * C3495 + C17277 * C3317 +
             C17272 * C3321) *
                C49713 -
            (C17278 * C3494 + C50800 * C3498 + C17277 * C3322 +
             C17272 * C3326) *
                C50611) *
               C5194) *
              C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50878 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
               C5192 +
           ((C22205 + C22206) * C49720 + (C22207 + C22208) * C50878 -
            (C17687 + C17686) * C49713 - (C17689 + C17688) * C50611) *
               C5193 +
           C22831 * C5194) *
              C50628 * C941 +
          (((C17686 + C17687) * C49713 -
            ((C22208 + C22207) * C50878 + (C22206 + C22205) * C49720) +
            (C17688 + C17689) * C50611) *
               C5192 +
           ((C18277 + C18276) * C49713 -
            ((C22212 + C22211) * C50878 + (C22210 + C22209) * C49720) +
            (C18279 + C18278) * C50611) *
               C5193 +
           ((C22821 + C22822) * C49713 -
            ((C22823 + C22824) * C50878 + (C22825 + C22826) * C49720) +
            (C22827 + C22828) * C50611) *
               C5194) *
              C50628 * C942 +
          (C22831 * C5192 +
           ((C22826 + C22825) * C49720 + (C22824 + C22823) * C50878 -
            (C22822 + C22821) * C49713 - (C22828 + C22827) * C50611) *
               C5193 +
           ((C17277 * C6143 + C17272 * C6146 + C17278 * C6344 +
             C50800 * C6348) *
                C49720 +
            (C17277 * C6147 + C17272 * C6152 + C17278 * C6347 +
             C50800 * C6350) *
                C50878 -
            (C17278 * C6343 + C50800 * C6346 + C17277 * C6144 +
             C17272 * C6148) *
                C49713 -
            (C17278 * C6345 + C50800 * C6349 + C17277 * C6149 +
             C17272 * C6153) *
                C50611) *
               C5194) *
              C50628 * C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17277 * C122 + C17272 * C129 + C17278 * C287 +
                 C50800 * C294) *
                    C283 +
                (C17277 * C130 + C17272 * C143 + C17278 * C293 +
                 C50800 * C304) *
                    C278 -
                (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
                C17328 * C285 + C17329 * C280) *
                   C50764 * C17274 +
               ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
                (C17317 + C17316) * C284 - (C17319 + C17318) * C279 +
                (C17321 + C17320) * C285 + (C17323 + C17322) * C280) *
                   C50764 * C17275 +
               (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C279 +
                (C17325 + C17324) * C285 + (C17327 + C17326) * C280) *
                   C50764 * C17276) *
                  C50694 * C50893 +
              (((C17502 + C17503) * C284 -
                ((C17278 * C593 + C50800 * C602 + C17277 * C293 +
                  C17272 * C304) *
                     C278 +
                 (C17278 * C587 + C50800 * C592 + C17277 * C287 +
                  C17272 * C294) *
                     C283) +
                (C17504 + C17505) * C279 - C17514 * C285 - C17515 * C280) *
                   C50764 * C17274 +
               ((C17507 + C17506) * C284 -
                ((C17505 + C17504) * C278 + (C17503 + C17502) * C283) +
                (C17509 + C17508) * C279 - (C17510 + C17511) * C285 -
                (C17512 + C17513) * C280) *
                   C50764 * C17275 +
               ((C17511 + C17510) * C284 - (C17515 * C278 + C17514 * C283) +
                (C17513 + C17512) * C279 -
                (C17278 * C591 + C50800 * C600 + C17277 * C290 +
                 C17272 * C300) *
                    C285 -
                (C17278 * C601 + C50800 * C606 + C17277 * C301 +
                 C17272 * C308) *
                    C280) *
                   C50764 * C17276) *
                  C50694 * C50682) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17277 * C122 + C17272 * C129 + C17278 * C287 +
                 C50800 * C294) *
                    C696 +
                (C17277 * C130 + C17272 * C143 + C17278 * C293 +
                 C50800 * C304) *
                    C50606) *
                   C50764 * C17274 +
               ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) *
                   C50764 * C17275 +
               (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
                  C50694 * C692 -
              ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
               ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) *
                   C50764 * C17275 +
               ((C17278 * C593 + C50800 * C602 + C17277 * C293 +
                 C17272 * C304) *
                    C50606 +
                (C17278 * C587 + C50800 * C592 + C17277 * C287 +
                 C17272 * C294) *
                    C696) *
                   C50764 * C17274) *
                  C50694 * C693 +
              (((C17277 * C587 + C17272 * C592 + C17278 * C700 +
                 C50800 * C708) *
                    C696 +
                (C17277 * C593 + C17272 * C602 + C17278 * C707 +
                 C50800 * C712) *
                    C50606) *
                   C50764 * C17274 +
               ((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) *
                   C50764 * C17275 +
               ((C17867 + C17866) * C696 + (C17869 + C17868) * C50606) *
                   C50764 * C17276) *
                  C50694 * C694 -
              (((C17278 * C2880 + C50800 * C2883 + C17277 * C703 +
                 C17272 * C710) *
                    C50606 +
                (C17278 * C2874 + C50800 * C2879 + C17277 * C698 +
                 C17272 * C704) *
                    C696) *
                   C50764 * C17276 +
               ((C17278 * C2878 + C50800 * C2882 + C17277 * C705 +
                 C17272 * C711) *
                    C50606 +
                (C17278 * C2873 + C50800 * C2877 + C17277 * C699 +
                 C17272 * C706) *
                    C696) *
                   C50764 * C17275 +
               ((C17278 * C2876 + C50800 * C2881 + C17277 * C707 +
                 C17272 * C712) *
                    C50606 +
                (C17278 * C2872 + C50800 * C2875 + C17277 * C700 +
                 C17272 * C708) *
                    C696) *
                   C50764 * C17274) *
                  C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C17274 +
            ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
                C17275 +
            (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
               C941 -
           ((C17699 * C50606 + C17698 * C696) * C50764 * C17276 +
            ((C17689 + C17688) * C50606 + (C17687 + C17686) * C696) * C50764 *
                C17275 +
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50606 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C696) *
                C50764 * C17274) *
               C942 +
           (((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
                 C696 +
             (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
                 C50606) *
                C50764 * C17274 +
            ((C18277 + C18276) * C696 + (C18279 + C18278) * C50606) * C50764 *
                C17275 +
            ((C18281 + C18280) * C696 + (C18283 + C18282) * C50606) * C50764 *
                C17276) *
               C943) *
              C50893 +
          ((((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C696 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C17274 +
            ((C17277 * C812 + C17272 * C821 + C17278 * C817 + C50800 * C832) *
                 C696 +
             (C17277 * C822 + C17272 * C836 + C17278 * C831 + C50800 * C841) *
                 C50606) *
                C50764 * C17275 +
            ((C17277 * C813 + C17272 * C823 + C17278 * C816 + C50800 * C830) *
                 C696 +
             (C17277 * C824 + C17272 * C837 + C17278 * C829 + C50800 * C840) *
                 C50606) *
                C50764 * C17276) *
               C942 -
           ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
            ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50764 *
                C17275 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C50764 * C17274) *
               C941 -
           (((C17278 * C3324 + C50800 * C3327 + C17277 * C1086 +
              C17272 * C1093) *
                 C50606 +
             (C17278 * C3318 + C50800 * C3323 + C17277 * C1081 +
              C17272 * C1087) *
                 C696) *
                C50764 * C17276 +
            ((C17278 * C3322 + C50800 * C3326 + C17277 * C1088 +
              C17272 * C1094) *
                 C50606 +
             (C17278 * C3317 + C50800 * C3321 + C17277 * C1082 +
              C17272 * C1089) *
                 C696) *
                C50764 * C17275 +
            ((C17278 * C3320 + C50800 * C3325 + C17277 * C1090 +
              C17272 * C1095) *
                 C50606 +
             (C17278 * C3316 + C50800 * C3319 + C17277 * C1083 +
              C17272 * C1091) *
                 C696) *
                C50764 * C17274) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C278 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C279 +
           (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
            C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
               C285 +
           (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
            C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
               C280) *
              C50764 * C50628 * C50694 * C50893 +
          ((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
            C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
               C284 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C278 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C283) +
           (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
            C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
               C279 -
           (C20083 * C2874 + C20078 * C2879 + C20082 * C698 + C20077 * C704 +
            C20081 * C589 + C20076 * C596 + C20080 * C288 + C20075 * C296) *
               C285 -
           (C20083 * C2880 + C20078 * C2883 + C20082 * C703 + C20077 * C710 +
            C20081 * C597 + C20076 * C604 + C20080 * C297 + C20075 * C306) *
               C280) *
              C50764 * C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C696 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50606) *
              C50764 * C50628 * C50694 * C692 -
          ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
            C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
               C50606 +
           (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
            C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
               C696) *
              C50764 * C50628 * C50694 * C693 +
          ((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
            C20082 * C2872 + C20077 * C2875 + C20083 * C3001 + C20078 * C3005) *
               C696 +
           (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
            C20082 * C2876 + C20077 * C2881 + C20083 * C3004 + C20078 * C3007) *
               C50606) *
              C50764 * C50628 * C50694 * C694 -
          ((C20083 * C20445 + C20078 * C20447 + C20082 * C3004 +
            C20077 * C3007 + C20081 * C2876 + C20076 * C2881 + C20080 * C707 +
            C20075 * C712) *
               C50606 +
           (C20083 * C20444 + C20078 * C20446 + C20082 * C3001 +
            C20077 * C3005 + C20081 * C2872 + C20076 * C2875 + C20080 * C700 +
            C20075 * C708) *
               C696) *
              C50764 * C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C696 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C50606) *
               C50764 * C50628 * C941 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50606 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C696) *
               C50764 * C50628 * C942 +
           ((C20080 * C944 + C20075 * C949 + C20081 * C1083 + C20076 * C1091 +
             C20082 * C3316 + C20077 * C3319 + C20083 * C3493 +
             C20078 * C3497) *
                C696 +
            (C20080 * C950 + C20075 * C959 + C20081 * C1090 + C20076 * C1095 +
             C20082 * C3320 + C20077 * C3325 + C20083 * C3496 +
             C20078 * C3499) *
                C50606) *
               C50764 * C50628 * C943) *
              C50893 +
          (((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C696 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C50606) *
               C50764 * C50628 * C942 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50606 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C696) *
               C50764 * C50628 * C941 -
           ((C20083 * C20747 + C20078 * C20749 + C20082 * C3496 +
             C20077 * C3499 + C20081 * C3320 + C20076 * C3325 + C20080 * C1090 +
             C20075 * C1095) *
                C50606 +
            (C20083 * C20746 + C20078 * C20748 + C20082 * C3493 +
             C20077 * C3497 + C20081 * C3316 + C20076 * C3319 + C20080 * C1083 +
             C20075 * C1091) *
                C696) *
               C50764 * C50628 * C943) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
            C17328 * C285 + C17329 * C280) *
               C5192 +
           ((C17277 * C435 + C17272 * C442 + C17278 * C811 + C50800 * C819) *
                C283 +
            (C17277 * C441 + C17272 * C452 + C17278 * C820 + C50800 * C835) *
                C278 -
            (C17687 + C17686) * C284 - (C17689 + C17688) * C279 +
            (C17691 + C17690) * C285 + (C17693 + C17692) * C280) *
               C5193 +
           ((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
                C283 +
            (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
                C278 -
            (C18276 + C18277) * C284 - (C18278 + C18279) * C279 +
            (C18281 + C18280) * C285 + (C18283 + C18282) * C280) *
               C5194) *
              C50628 * C50694 * C50893 +
          (((C17502 + C17503) * C284 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C278 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C283) +
            (C17504 + C17505) * C279 - C17514 * C285 - C17515 * C280) *
               C5192 +
           ((C19031 + C19030) * C284 -
            ((C17278 * C833 + C50800 * C842 + C17277 * C820 + C17272 * C835) *
                 C278 +
             (C17278 * C818 + C50800 * C834 + C17277 * C811 + C17272 * C819) *
                 C283) +
            (C19033 + C19032) * C279 - (C19034 + C19035) * C285 -
            (C19036 + C19037) * C280) *
               C5193 +
           ((C17277 * C1082 + C17272 * C1089 + C17278 * C3317 +
             C50800 * C3321) *
                C284 -
            ((C17278 * C3320 + C50800 * C3325 + C17277 * C1090 +
              C17272 * C1095) *
                 C278 +
             (C17278 * C3316 + C50800 * C3319 + C17277 * C1083 +
              C17272 * C1091) *
                 C283) +
            (C17277 * C1088 + C17272 * C1094 + C17278 * C3322 +
             C50800 * C3326) *
                C279 -
            (C17278 * C3318 + C50800 * C3323 + C17277 * C1081 +
             C17272 * C1087) *
                C285 -
            (C17278 * C3324 + C50800 * C3327 + C17277 * C1086 +
             C17272 * C1093) *
                C280) *
               C5194) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C696 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50606) *
               C5192 +
           ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C5193 +
           ((C22209 + C22210) * C696 + (C22211 + C22212) * C50606) * C5194) *
              C50628 * C50694 * C692 -
          (((C17278 * C3320 + C50800 * C3325 + C17277 * C1090 +
             C17272 * C1095) *
                C50606 +
            (C17278 * C3316 + C50800 * C3319 + C17277 * C1083 +
             C17272 * C1091) *
                C696) *
               C5194 +
           ((C17278 * C833 + C50800 * C842 + C17277 * C820 + C17272 * C835) *
                C50606 +
            (C17278 * C818 + C50800 * C834 + C17277 * C811 + C17272 * C819) *
                C696) *
               C5193 +
           ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                C50606 +
            (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                C696) *
               C5192) *
              C50628 * C50694 * C693 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C696 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C50606) *
               C5192 +
           ((C17277 * C818 + C17272 * C834 + C17278 * C3154 + C50800 * C3158) *
                C696 +
            (C17277 * C833 + C17272 * C842 + C17278 * C3159 + C50800 * C3166) *
                C50606) *
               C5193 +
           ((C17277 * C3316 + C17272 * C3319 + C17278 * C3493 +
             C50800 * C3497) *
                C696 +
            (C17277 * C3320 + C17272 * C3325 + C17278 * C3496 +
             C50800 * C3499) *
                C50606) *
               C5194) *
              C50628 * C50694 * C694 -
          (((C17278 * C20747 + C50800 * C20749 + C17277 * C3496 +
             C17272 * C3499) *
                C50606 +
            (C17278 * C20746 + C50800 * C20748 + C17277 * C3493 +
             C17272 * C3497) *
                C696) *
               C5194 +
           ((C17278 * C3164 + C50800 * C3169 + C17277 * C3159 +
             C17272 * C3166) *
                C50606 +
            (C17278 * C3157 + C50800 * C3165 + C17277 * C3154 +
             C17272 * C3158) *
                C696) *
               C5193 +
           ((C17278 * C2876 + C50800 * C2881 + C17277 * C707 + C17272 * C712) *
                C50606 +
            (C17278 * C2872 + C50800 * C2875 + C17277 * C700 + C17272 * C708) *
                C696) *
               C5192) *
              C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C5192 +
            ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C5193 +
            C22994 * C5194) *
               C50628 * C941 -
           (((C22823 + C22824) * C50606 + (C22825 + C22826) * C696) * C5194 +
            ((C22212 + C22211) * C50606 + (C22210 + C22209) * C696) * C5193 +
            ((C22208 + C22207) * C50606 + (C22206 + C22205) * C696) * C5192) *
               C50628 * C942 +
           (C22994 * C5192 +
            ((C22826 + C22825) * C696 + (C22824 + C22823) * C50606) * C5193 +
            ((C17277 * C6143 + C17272 * C6146 + C17278 * C6344 +
              C50800 * C6348) *
                 C696 +
             (C17277 * C6147 + C17272 * C6152 + C17278 * C6347 +
              C50800 * C6350) *
                 C50606) *
                C5194) *
               C50628 * C943) *
              C50893 +
          ((((C22635 + C22636) * C696 + (C22637 + C22638) * C50606) * C5192 +
            ((C22639 + C22640) * C696 + (C22641 + C22642) * C50606) * C5193 +
            ((C22995 + C22996) * C696 + (C22997 + C22998) * C50606) * C5194) *
               C50628 * C942 -
           (C23001 * C5194 +
            ((C22638 + C22637) * C50606 + (C22636 + C22635) * C696) * C5193 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C5192) *
               C50628 * C941 -
           (((C17278 * C22978 + C50800 * C22980 + C17277 * C6347 +
              C17272 * C6350) *
                 C50606 +
             (C17278 * C22977 + C50800 * C22979 + C17277 * C6344 +
              C17272 * C6348) *
                 C696) *
                C5194 +
            ((C22998 + C22997) * C50606 + (C22996 + C22995) * C696) * C5193 +
            C23001 * C5192) *
               C50628 * C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17277 * C122 + C17272 * C129 + C17278 * C287 +
                 C50800 * C294) *
                    C283 +
                (C17277 * C130 + C17272 * C143 + C17278 * C293 +
                 C50800 * C304) *
                    C278 -
                (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
                C17328 * C285 + C17329 * C280) *
                   C50764 * C17274 +
               ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
                (C17317 + C17316) * C284 - (C17319 + C17318) * C279 +
                (C17321 + C17320) * C285 + (C17323 + C17322) * C280) *
                   C50764 * C17275 +
               (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C279 +
                (C17325 + C17324) * C285 + (C17327 + C17326) * C280) *
                   C50764 * C17276) *
                  C50894 +
              (((C17686 + C17687) * C284 -
                ((C17278 * C820 + C50800 * C835 + C17277 * C441 +
                  C17272 * C452) *
                     C278 +
                 (C17278 * C811 + C50800 * C819 + C17277 * C435 +
                  C17272 * C442) *
                     C283) +
                (C17688 + C17689) * C279 - C17698 * C285 - C17699 * C280) *
                   C50764 * C17274 +
               ((C17691 + C17690) * C284 -
                ((C17689 + C17688) * C278 + (C17687 + C17686) * C283) +
                (C17693 + C17692) * C279 - (C17694 + C17695) * C285 -
                (C17696 + C17697) * C280) *
                   C50764 * C17275 +
               ((C17695 + C17694) * C284 - (C17699 * C278 + C17698 * C283) +
                (C17697 + C17696) * C279 -
                (C17278 * C1523 + C50800 * C1524 + C17277 * C438 +
                 C17272 * C448) *
                    C285 -
                (C17278 * C1525 + C50800 * C1526 + C17277 * C449 +
                 C17272 * C456) *
                    C280) *
                   C50764 * C17276) *
                  C50706) *
             C50668 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C17277 * C122 + C17272 * C129 + C17278 * C287 +
                  C50800 * C294) *
                     C696 +
                 (C17277 * C130 + C17272 * C143 + C17278 * C293 +
                  C50800 * C304) *
                     C50606) *
                    C50764 * C17274 +
                ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) *
                    C50764 * C17275 +
                (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
                   C50894 -
               ((C17699 * C50606 + C17698 * C696) * C50764 * C17276 +
                ((C17689 + C17688) * C50606 + (C17687 + C17686) * C696) *
                    C50764 * C17275 +
                ((C17278 * C820 + C50800 * C835 + C17277 * C441 +
                  C17272 * C452) *
                     C50606 +
                 (C17278 * C811 + C50800 * C819 + C17277 * C435 +
                  C17272 * C442) *
                     C696) *
                    C50764 * C17274) *
                   C50706) *
                  C582 +
              ((((C17277 * C811 + C17272 * C819 + C17278 * C818 +
                  C50800 * C834) *
                     C696 +
                 (C17277 * C820 + C17272 * C835 + C17278 * C833 +
                  C50800 * C842) *
                     C50606) *
                    C50764 * C17274 +
                ((C17277 * C812 + C17272 * C821 + C17278 * C817 +
                  C50800 * C832) *
                     C696 +
                 (C17277 * C822 + C17272 * C836 + C17278 * C831 +
                  C50800 * C841) *
                     C50606) *
                    C50764 * C17275 +
                ((C17277 * C813 + C17272 * C823 + C17278 * C816 +
                  C50800 * C830) *
                     C696 +
                 (C17277 * C824 + C17272 * C837 + C17278 * C829 +
                  C50800 * C840) *
                     C50606) *
                    C50764 * C17276) *
                   C50706 -
               ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
                ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) *
                    C50764 * C17275 +
                ((C17278 * C593 + C50800 * C602 + C17277 * C293 +
                  C17272 * C304) *
                     C50606 +
                 (C17278 * C587 + C50800 * C592 + C17277 * C287 +
                  C17272 * C294) *
                     C696) *
                    C50764 * C17274) *
                   C50894) *
                  C583 +
              ((((C17277 * C587 + C17272 * C592 + C17278 * C700 +
                  C50800 * C708) *
                     C696 +
                 (C17277 * C593 + C17272 * C602 + C17278 * C707 +
                  C50800 * C712) *
                     C50606) *
                    C50764 * C17274 +
                ((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) *
                    C50764 * C17275 +
                ((C17867 + C17866) * C696 + (C17869 + C17868) * C50606) *
                    C50764 * C17276) *
                   C50894 -
               (((C17278 * C4102 + C50800 * C4103 + C17277 * C829 +
                  C17272 * C840) *
                     C50606 +
                 (C17278 * C4100 + C50800 * C4101 + C17277 * C816 +
                  C17272 * C830) *
                     C696) *
                    C50764 * C17276 +
                ((C17278 * C3161 + C50800 * C3167 + C17277 * C831 +
                  C17272 * C841) *
                     C50606 +
                 (C17278 * C3155 + C50800 * C3160 + C17277 * C817 +
                  C17272 * C832) *
                     C696) *
                    C50764 * C17275 +
                ((C17278 * C3159 + C50800 * C3166 + C17277 * C833 +
                  C17272 * C842) *
                     C50606 +
                 (C17278 * C3154 + C50800 * C3158 + C17277 * C818 +
                  C17272 * C834) *
                     C696) *
                    C50764 * C17274) *
                   C50706) *
                  C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C696 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50606) *
               C50764 * C17274 +
           ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
               C17275 +
           (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
              C1162 -
          ((C17699 * C50606 + C17698 * C696) * C50764 * C17276 +
           ((C17689 + C17688) * C50606 + (C17687 + C17686) * C696) * C50764 *
               C17275 +
           ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                C50606 +
            (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                C696) *
               C50764 * C17274) *
              C1163 +
          (((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
                C696 +
            (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
                C50606) *
               C50764 * C17274 +
           ((C18277 + C18276) * C696 + (C18279 + C18278) * C50606) * C50764 *
               C17275 +
           ((C18281 + C18280) * C696 + (C18283 + C18282) * C50606) * C50764 *
               C17276) *
              C1164 -
          (((C17278 * C6981 + C50800 * C6982 + C17277 * C1172 +
             C17272 * C1179) *
                C50606 +
            (C17278 * C6979 + C50800 * C6980 + C17277 * C1167 +
             C17272 * C1173) *
                C696) *
               C50764 * C17276 +
           ((C17278 * C3603 + C50800 * C3611 + C17277 * C1174 +
             C17272 * C1180) *
                C50606 +
            (C17278 * C3599 + C50800 * C3605 + C17277 * C1168 +
             C17272 * C1175) *
                C696) *
               C50764 * C17275 +
           ((C17278 * C3607 + C50800 * C3613 + C17277 * C1176 +
             C17272 * C1181) *
                C50606 +
            (C17278 * C3601 + C50800 * C3609 + C17277 * C1169 +
             C17272 * C1177) *
                C696) *
               C50764 * C17274) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C278 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C279 +
           (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
            C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
               C285 +
           (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
            C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
               C280) *
              C50764 * C50628 * C50894 +
          ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
            C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
               C284 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C278 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C283) +
           (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
            C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
               C279 -
           (C20083 * C4100 + C20078 * C4101 + C20082 * C816 + C20077 * C830 +
            C20081 * C813 + C20076 * C823 + C20080 * C436 + C20075 * C444) *
               C285 -
           (C20083 * C4102 + C20078 * C4103 + C20082 * C829 + C20077 * C840 +
            C20081 * C824 + C20076 * C837 + C20080 * C445 + C20075 * C454) *
               C280) *
              C50764 * C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C696 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C50606) *
               C50764 * C50628 * C50894 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50606 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C696) *
               C50764 * C50628 * C50706) *
              C582 +
          (((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C696 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C50606) *
               C50764 * C50628 * C50706 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50606 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C696) *
               C50764 * C50628 * C50894) *
              C583 +
          (((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
             C20082 * C2872 + C20077 * C2875 + C20083 * C3001 +
             C20078 * C3005) *
                C696 +
            (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
             C20082 * C2876 + C20077 * C2881 + C20083 * C3004 +
             C20078 * C3007) *
                C50606) *
               C50764 * C50628 * C50894 -
           ((C20083 * C20547 + C20078 * C20549 + C20082 * C3164 +
             C20077 * C3169 + C20081 * C3159 + C20076 * C3166 + C20080 * C833 +
             C20075 * C842) *
                C50606 +
            (C20083 * C20546 + C20078 * C20548 + C20082 * C3157 +
             C20077 * C3165 + C20081 * C3154 + C20076 * C3158 + C20080 * C818 +
             C20075 * C834) *
                C696) *
               C50764 * C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C696 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50606) *
              C50764 * C50628 * C1162 -
          ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
            C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
               C50606 +
           (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
            C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
               C696) *
              C50764 * C50628 * C1163 +
          ((C20080 * C944 + C20075 * C949 + C20081 * C1083 + C20076 * C1091 +
            C20082 * C3316 + C20077 * C3319 + C20083 * C3493 + C20078 * C3497) *
               C696 +
           (C20080 * C950 + C20075 * C959 + C20081 * C1090 + C20076 * C1095 +
            C20082 * C3320 + C20077 * C3325 + C20083 * C3496 + C20078 * C3499) *
               C50606) *
              C50764 * C50628 * C1164 -
          ((C20083 * C20817 + C20078 * C20819 + C20082 * C3606 +
            C20077 * C3612 + C20081 * C3607 + C20076 * C3613 + C20080 * C1176 +
            C20075 * C1181) *
               C50606 +
           (C20083 * C20816 + C20078 * C20818 + C20082 * C3600 +
            C20077 * C3608 + C20081 * C3601 + C20076 * C3609 + C20080 * C1169 +
            C20075 * C1177) *
               C696) *
              C50764 * C50628 * C1165) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
            C17328 * C285 + C17329 * C280) *
               C5192 +
           ((C22205 + C22206) * C283 + (C22207 + C22208) * C278 -
            (C17687 + C17686) * C284 - (C17689 + C17688) * C279 +
            (C17691 + C17690) * C285 + (C17693 + C17692) * C280) *
               C5193 +
           ((C22209 + C22210) * C283 + (C22211 + C22212) * C278 -
            (C18276 + C18277) * C284 - (C18278 + C18279) * C279 +
            (C18281 + C18280) * C285 + (C18283 + C18282) * C280) *
               C5194) *
              C50628 * C50894 +
          (((C17686 + C17687) * C284 -
            ((C22208 + C22207) * C278 + (C22206 + C22205) * C283) +
            (C17688 + C17689) * C279 - C17698 * C285 - C17699 * C280) *
               C5192 +
           ((C18277 + C18276) * C284 -
            ((C22212 + C22211) * C278 + (C22210 + C22209) * C283) +
            (C18279 + C18278) * C279 - (C18280 + C18281) * C285 -
            (C18282 + C18283) * C280) *
               C5193 +
           ((C17277 * C1168 + C17272 * C1175 + C17278 * C3599 +
             C50800 * C3605) *
                C284 -
            ((C17278 * C3607 + C50800 * C3613 + C17277 * C1176 +
              C17272 * C1181) *
                 C278 +
             (C17278 * C3601 + C50800 * C3609 + C17277 * C1169 +
              C17272 * C1177) *
                 C283) +
            (C17277 * C1174 + C17272 * C1180 + C17278 * C3603 +
             C50800 * C3611) *
                C279 -
            (C17278 * C6979 + C50800 * C6980 + C17277 * C1167 +
             C17272 * C1173) *
                C285 -
            (C17278 * C6981 + C50800 * C6982 + C17277 * C1172 +
             C17272 * C1179) *
                C280) *
               C5194) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C5192 +
            ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C5193 +
            ((C22209 + C22210) * C696 + (C22211 + C22212) * C50606) * C5194) *
               C50628 * C50894 -
           (((C17278 * C3607 + C50800 * C3613 + C17277 * C1176 +
              C17272 * C1181) *
                 C50606 +
             (C17278 * C3601 + C50800 * C3609 + C17277 * C1169 +
              C17272 * C1177) *
                 C696) *
                C5194 +
            ((C22212 + C22211) * C50606 + (C22210 + C22209) * C696) * C5193 +
            ((C22208 + C22207) * C50606 + (C22206 + C22205) * C696) * C5192) *
               C50628 * C50706) *
              C582 +
          ((((C22635 + C22636) * C696 + (C22637 + C22638) * C50606) * C5192 +
            ((C22639 + C22640) * C696 + (C22641 + C22642) * C50606) * C5193 +
            ((C17277 * C3601 + C17272 * C3609 + C17278 * C3600 +
              C50800 * C3608) *
                 C696 +
             (C17277 * C3607 + C17272 * C3613 + C17278 * C3606 +
              C50800 * C3612) *
                 C50606) *
                C5194) *
               C50628 * C50706 -
           (((C22642 + C22641) * C50606 + (C22640 + C22639) * C696) * C5194 +
            ((C22638 + C22637) * C50606 + (C22636 + C22635) * C696) * C5193 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C5192) *
               C50628 * C50894) *
              C583 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C696 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C50606) *
                C5192 +
            ((C22643 + C22644) * C696 + (C22645 + C22646) * C50606) * C5193 +
            ((C22647 + C22648) * C696 + (C22649 + C22650) * C50606) * C5194) *
               C50628 * C50894 -
           (((C17278 * C20817 + C50800 * C20819 + C17277 * C3606 +
              C17272 * C3612) *
                 C50606 +
             (C17278 * C20816 + C50800 * C20818 + C17277 * C3600 +
              C17272 * C3608) *
                 C696) *
                C5194 +
            ((C22650 + C22649) * C50606 + (C22648 + C22647) * C696) * C5193 +
            ((C22646 + C22645) * C50606 + (C22644 + C22643) * C696) * C5192) *
               C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C696 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50606) *
               C5192 +
           ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C5193 +
           C22994 * C5194) *
              C50628 * C1162 -
          (C23120 * C5194 +
           ((C22212 + C22211) * C50606 + (C22210 + C22209) * C696) * C5193 +
           ((C22208 + C22207) * C50606 + (C22206 + C22205) * C696) * C5192) *
              C50628 * C1163 +
          (C22994 * C5192 +
           ((C22826 + C22825) * C696 + (C22824 + C22823) * C50606) * C5193 +
           ((C23116 + C23117) * C696 + (C23118 + C23119) * C50606) * C5194) *
              C50628 * C1164 -
          (((C17278 * C23100 + C50800 * C23102 + C17277 * C6477 +
             C17272 * C6480) *
                C50606 +
            (C17278 * C23099 + C50800 * C23101 + C17277 * C6474 +
             C17272 * C6478) *
                C696) *
               C5194 +
           ((C23119 + C23118) * C50606 + (C23117 + C23116) * C696) * C5193 +
           C23120 * C5192) *
              C50628 * C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C1285 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50936 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C1286 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50920 +
           (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
            C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
               C1287 +
           (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
            C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
               C1282) *
              C50764 * C50628 * C1643 +
          ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
            C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
               C1286 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50936 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C1285) +
           (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
            C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
               C50920 -
           (C20083 * C4100 + C20078 * C4101 + C20082 * C816 + C20077 * C830 +
            C20081 * C813 + C20076 * C823 + C20080 * C436 + C20075 * C444) *
               C1287 -
           (C20083 * C4102 + C20078 * C4103 + C20082 * C829 + C20077 * C840 +
            C20081 * C824 + C20076 * C837 + C20080 * C445 + C20075 * C454) *
               C1282) *
              C50764 * C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C1285 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50936 -
            (C17312 + C17313) * C1286 - (C17314 + C17315) * C50920 +
            C17328 * C1287 + C17329 * C1282) *
               C50764 * C17274 +
           ((C17313 + C17312) * C1285 + (C17315 + C17314) * C50936 -
            (C17317 + C17316) * C1286 - (C17319 + C17318) * C50920 +
            (C17321 + C17320) * C1287 + (C17323 + C17322) * C1282) *
               C50764 * C17275 +
           (C17328 * C1285 + C17329 * C50936 - C17330 * C1286 -
            C17331 * C50920 + (C17325 + C17324) * C1287 +
            (C17327 + C17326) * C1282) *
               C50764 * C17276) *
              C1643 +
          (((C17686 + C17687) * C1286 -
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50936 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C1285) +
            (C17688 + C17689) * C50920 - C17698 * C1287 - C17699 * C1282) *
               C50764 * C17274 +
           ((C17691 + C17690) * C1286 -
            ((C17689 + C17688) * C50936 + (C17687 + C17686) * C1285) +
            (C17693 + C17692) * C50920 - (C17694 + C17695) * C1287 -
            (C17696 + C17697) * C1282) *
               C50764 * C17275 +
           ((C17695 + C17694) * C1286 - (C17699 * C50936 + C17698 * C1285) +
            (C17697 + C17696) * C50920 -
            (C17278 * C1523 + C50800 * C1524 + C17277 * C438 + C17272 * C448) *
                C1287 -
            (C17278 * C1525 + C50800 * C1526 + C17277 * C449 + C17272 * C456) *
                C1282) *
               C50764 * C17276) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C1285 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50936 -
            (C17312 + C17313) * C1286 - (C17314 + C17315) * C50920 +
            C17328 * C1287 + C17329 * C1282) *
               C5192 +
           ((C22205 + C22206) * C1285 + (C22207 + C22208) * C50936 -
            (C17687 + C17686) * C1286 - (C17689 + C17688) * C50920 +
            (C17691 + C17690) * C1287 + (C17693 + C17692) * C1282) *
               C5193 +
           (C22797 * C1285 + C22798 * C50936 - C22799 * C1286 -
            C22800 * C50920 + (C18281 + C18280) * C1287 +
            (C18283 + C18282) * C1282) *
               C5194) *
              C50628 * C1643 +
          (((C17686 + C17687) * C1286 -
            ((C22208 + C22207) * C50936 + (C22206 + C22205) * C1285) +
            (C17688 + C17689) * C50920 - C17698 * C1287 - C17699 * C1282) *
               C5192 +
           ((C18277 + C18276) * C1286 -
            ((C22212 + C22211) * C50936 + (C22210 + C22209) * C1285) +
            (C18279 + C18278) * C50920 - (C18280 + C18281) * C1287 -
            (C18282 + C18283) * C1282) *
               C5193 +
           ((C22821 + C22822) * C1286 - (C23104 * C50936 + C23105 * C1285) +
            (C22827 + C22828) * C50920 -
            (C17278 * C6979 + C50800 * C6980 + C17277 * C1167 +
             C17272 * C1173) *
                C1287 -
            (C17278 * C6981 + C50800 * C6982 + C17277 * C1172 +
             C17272 * C1179) *
                C1282) *
               C5194) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C1391 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C1386 -
            (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
             C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
                C1392 -
            (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
             C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
                C50611) *
               C50764 * C50628 * C1643 +
           ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
             C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
                C1392 -
            ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
              C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                 C1386 +
             (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
              C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                 C1391) +
            (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
             C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
                C50611) *
               C50764 * C50628 * C50706) *
              C50893 +
          (((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
             C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
                C1392 -
            ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
              C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                 C1386 +
             (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
              C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                 C1391) +
            (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
             C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
                C50611) *
               C50764 * C50628 * C1643 +
           ((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C1391 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C1386 -
            (C20083 * C3156 + C20078 * C3163 + C20082 * C3155 + C20077 * C3160 +
             C20081 * C817 + C20076 * C832 + C20080 * C812 + C20075 * C821) *
                C1392 -
            (C20083 * C3162 + C20078 * C3168 + C20082 * C3161 + C20077 * C3167 +
             C20081 * C831 + C20076 * C841 + C20080 * C822 + C20075 * C836) *
                C50611) *
               C50764 * C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C1391 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C1386 -
             (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
                C50764 * C17274 +
            ((C17313 + C17312) * C1391 + (C17315 + C17314) * C1386 -
             (C17317 + C17316) * C1392 - (C17319 + C17318) * C50611) *
                C50764 * C17275 +
            (C17328 * C1391 + C17329 * C1386 - C17330 * C1392 -
             C17331 * C50611) *
                C50764 * C17276) *
               C1643 +
           (((C17686 + C17687) * C1392 -
             ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                  C1386 +
              (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                  C1391) +
             (C17688 + C17689) * C50611) *
                C50764 * C17274 +
            ((C17691 + C17690) * C1392 -
             ((C17689 + C17688) * C1386 + (C17687 + C17686) * C1391) +
             (C17693 + C17692) * C50611) *
                C50764 * C17275 +
            ((C17695 + C17694) * C1392 - (C17699 * C1386 + C17698 * C1391) +
             (C17697 + C17696) * C50611) *
                C50764 * C17276) *
               C50706) *
              C50893 +
          ((((C17502 + C17503) * C1392 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C1386 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C1391) +
             (C17504 + C17505) * C50611) *
                C50764 * C17274 +
            ((C17507 + C17506) * C1392 -
             ((C17505 + C17504) * C1386 + (C17503 + C17502) * C1391) +
             (C17509 + C17508) * C50611) *
                C50764 * C17275 +
            ((C17511 + C17510) * C1392 - (C17515 * C1386 + C17514 * C1391) +
             (C17513 + C17512) * C50611) *
                C50764 * C17276) *
               C1643 +
           (((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C1391 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C1386 -
             (C19030 + C19031) * C1392 - (C19032 + C19033) * C50611) *
                C50764 * C17274 +
            ((C19031 + C19030) * C1391 + (C19033 + C19032) * C1386 -
             (C19034 + C19035) * C1392 - (C19036 + C19037) * C50611) *
                C50764 * C17275 +
            ((C19035 + C19034) * C1391 + (C19037 + C19036) * C1386 -
             (C17278 * C815 + C50800 * C828 + C17277 * C814 + C17272 * C825) *
                 C1392 -
             (C17278 * C827 + C50800 * C839 + C17277 * C826 + C17272 * C838) *
                 C50611) *
                C50764 * C17276) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C1391 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C1386 -
             (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
                C5192 +
            ((C22205 + C22206) * C1391 + (C22207 + C22208) * C1386 -
             (C17687 + C17686) * C1392 - (C17689 + C17688) * C50611) *
                C5193 +
            (C22797 * C1391 + C22798 * C1386 - C22799 * C1392 -
             C22800 * C50611) *
                C5194) *
               C50628 * C1643 +
           (((C17686 + C17687) * C1392 -
             ((C22208 + C22207) * C1386 + (C22206 + C22205) * C1391) +
             (C17688 + C17689) * C50611) *
                C5192 +
            ((C18277 + C18276) * C1392 -
             ((C22212 + C22211) * C1386 + (C22210 + C22209) * C1391) +
             (C18279 + C18278) * C50611) *
                C5193 +
            ((C22821 + C22822) * C1392 - (C23104 * C1386 + C23105 * C1391) +
             (C22827 + C22828) * C50611) *
                C5194) *
               C50628 * C50706) *
              C50893 +
          ((((C17502 + C17503) * C1392 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C1386 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C1391) +
             (C17504 + C17505) * C50611) *
                C5192 +
            ((C19031 + C19030) * C1392 -
             ((C22638 + C22637) * C1386 + (C22636 + C22635) * C1391) +
             (C19033 + C19032) * C50611) *
                C5193 +
            ((C23615 + C23616) * C1392 - (C22992 * C1386 + C22993 * C1391) +
             (C23617 + C23618) * C50611) *
                C5194) *
               C50628 * C1643 +
           (((C22635 + C22636) * C1391 + (C22637 + C22638) * C1386 -
             (C19030 + C19031) * C1392 - (C19032 + C19033) * C50611) *
                C5192 +
            ((C22639 + C22640) * C1391 + (C22641 + C22642) * C1386 -
             (C23616 + C23615) * C1392 - (C23618 + C23617) * C50611) *
                C5193 +
            ((C22995 + C22996) * C1391 + (C22997 + C22998) * C1386 -
             (C17278 * C3598 + C50800 * C3604 + C17277 * C3599 +
              C17272 * C3605) *
                 C1392 -
             (C17278 * C3602 + C50800 * C3610 + C17277 * C3603 +
              C17272 * C3611) *
                 C50611) *
                C5194) *
               C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C1391 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C1386 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C1392 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50611) *
              C50764 * C50628 * C50940 +
          ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
            C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
               C1392 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C1386 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C1391) +
           (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
            C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
               C50611) *
              C50764 * C50628 * C50929 +
          ((C20080 * C944 + C20075 * C949 + C20081 * C1083 + C20076 * C1091 +
            C20082 * C3316 + C20077 * C3319 + C20083 * C3493 + C20078 * C3497) *
               C1391 +
           (C20080 * C950 + C20075 * C959 + C20081 * C1090 + C20076 * C1095 +
            C20082 * C3320 + C20077 * C3325 + C20083 * C3496 + C20078 * C3499) *
               C1386 -
           (C20083 * C3492 + C20078 * C3495 + C20082 * C3317 + C20077 * C3321 +
            C20081 * C1082 + C20076 * C1089 + C20080 * C945 + C20075 * C951) *
               C1392 -
           (C20083 * C3494 + C20078 * C3498 + C20082 * C3322 + C20077 * C3326 +
            C20081 * C1088 + C20076 * C1094 + C20080 * C952 + C20075 * C960) *
               C50611) *
              C50764 * C50628 * C1875) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C1391 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C1386 -
            (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
               C50764 * C17274 +
           ((C17313 + C17312) * C1391 + (C17315 + C17314) * C1386 -
            (C17317 + C17316) * C1392 - (C17319 + C17318) * C50611) *
               C50764 * C17275 +
           (C17328 * C1391 + C17329 * C1386 - C17330 * C1392 -
            C17331 * C50611) *
               C50764 * C17276) *
              C50940 +
          (((C17686 + C17687) * C1392 -
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C1386 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C1391) +
            (C17688 + C17689) * C50611) *
               C50764 * C17274 +
           ((C17691 + C17690) * C1392 -
            ((C17689 + C17688) * C1386 + (C17687 + C17686) * C1391) +
            (C17693 + C17692) * C50611) *
               C50764 * C17275 +
           ((C17695 + C17694) * C1392 - (C17699 * C1386 + C17698 * C1391) +
            (C17697 + C17696) * C50611) *
               C50764 * C17276) *
              C50929 +
          (((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
                C1391 +
            (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
                C1386 -
            (C18276 + C18277) * C1392 - (C18278 + C18279) * C50611) *
               C50764 * C17274 +
           ((C18277 + C18276) * C1391 + (C18279 + C18278) * C1386 -
            (C18280 + C18281) * C1392 - (C18282 + C18283) * C50611) *
               C50764 * C17275 +
           ((C18281 + C18280) * C1391 + (C18283 + C18282) * C1386 -
            (C17278 * C1080 + C50800 * C1085 + C17277 * C947 + C17272 * C955) *
                C1392 -
            (C17278 * C1084 + C50800 * C1092 + C17277 * C956 + C17272 * C962) *
                C50611) *
               C50764 * C17276) *
              C1875) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C1391 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C1386 -
            (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
               C5192 +
           ((C22205 + C22206) * C1391 + (C22207 + C22208) * C1386 -
            (C17687 + C17686) * C1392 - (C17689 + C17688) * C50611) *
               C5193 +
           C24111 * C5194) *
              C50628 * C50940 +
          (((C17686 + C17687) * C1392 -
            ((C22208 + C22207) * C1386 + (C22206 + C22205) * C1391) +
            (C17688 + C17689) * C50611) *
               C5192 +
           ((C18277 + C18276) * C1392 -
            ((C22212 + C22211) * C1386 + (C22210 + C22209) * C1391) +
            (C18279 + C18278) * C50611) *
               C5193 +
           ((C22821 + C22822) * C1392 - (C23104 * C1386 + C23105 * C1391) +
            (C22827 + C22828) * C50611) *
               C5194) *
              C50628 * C50929 +
          (C24111 * C5192 +
           ((C22826 + C22825) * C1391 + (C22824 + C22823) * C1386 -
            (C22822 + C22821) * C1392 - (C22828 + C22827) * C50611) *
               C5193 +
           ((C23116 + C23117) * C1391 + (C23118 + C23119) * C1386 -
            (C17278 * C6343 + C50800 * C6346 + C17277 * C6144 +
             C17272 * C6148) *
                C1392 -
            (C17278 * C6345 + C50800 * C6349 + C17277 * C6149 +
             C17272 * C6153) *
                C50611) *
               C5194) *
              C50628 * C1875) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50878 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
               C50764 * C17274 +
           ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50878 -
            (C17317 + C17316) * C49713 - (C17319 + C17318) * C50611) *
               C50764 * C17275 +
           (C17328 * C49720 + C17329 * C50878 - C17330 * C49713 -
            C17331 * C50611) *
               C50764 * C17276) *
              C50694 * C582 +
          (((C17502 + C17503) * C49713 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50878 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C49720) +
            (C17504 + C17505) * C50611) *
               C50764 * C17274 +
           ((C17507 + C17506) * C49713 -
            ((C17505 + C17504) * C50878 + (C17503 + C17502) * C49720) +
            (C17509 + C17508) * C50611) *
               C50764 * C17275 +
           ((C17511 + C17510) * C49713 - (C17515 * C50878 + C17514 * C49720) +
            (C17513 + C17512) * C50611) *
               C50764 * C17276) *
              C50694 * C583 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C49720 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C50878 -
            (C17862 + C17863) * C49713 - (C17864 + C17865) * C50611) *
               C50764 * C17274 +
           ((C17863 + C17862) * C49720 + (C17865 + C17864) * C50878 -
            (C17866 + C17867) * C49713 - (C17868 + C17869) * C50611) *
               C50764 * C17275 +
           ((C17867 + C17866) * C49720 + (C17869 + C17868) * C50878 -
            (C17278 * C697 + C50800 * C702 + C17277 * C590 + C17272 * C598) *
                C49713 -
            (C17278 * C701 + C50800 * C709 + C17277 * C599 + C17272 * C605) *
                C50611) *
               C50764 * C17276) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
               C118 +
           (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
               C106 -
           (C17312 + C17313) * C119 - (C17314 + C17315) * C107 + C17328 * C120 +
           C17329 * C108 - C17330 * C121 - C17331 * C109) *
              C50764 * C17274 +
          ((C17313 + C17312) * C118 + (C17315 + C17314) * C106 -
           (C17317 + C17316) * C119 - (C17319 + C17318) * C107 +
           (C17321 + C17320) * C120 + (C17323 + C17322) * C108 -
           (C17324 + C17325) * C121 - (C17326 + C17327) * C109) *
              C50764 * C17275 +
          (C17328 * C118 + C17329 * C106 - C17330 * C119 - C17331 * C107 +
           (C17325 + C17324) * C120 + (C17327 + C17326) * C108 -
           (C17278 * C291 + C50800 * C302 + C17277 * C127 + C17272 * C139) *
               C121 -
           (C17278 * C303 + C50800 * C309 + C17277 * C140 + C17272 * C148) *
               C109) *
              C50764 * C17276) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
           C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
              C118 +
          (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
           C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
              C106 -
          (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
           C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
              C119 -
          (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
           C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
              C107 +
          (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
           C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
              C120 +
          (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
           C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
              C108 -
          (C20083 * C697 + C20078 * C702 + C20082 * C590 + C20077 * C598 +
           C20081 * C289 + C20076 * C298 + C20080 * C125 + C20075 * C135) *
              C121 -
          (C20083 * C701 + C20078 * C709 + C20082 * C599 + C20077 * C605 +
           C20081 * C299 + C20076 * C307 + C20080 * C136 + C20075 * C146) *
              C109) *
         C50764 * C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C49720 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50878 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C49713 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50611) *
              C50764 * C50628 * C50694 * C582 +
          ((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
            C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
               C49713 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50878 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C49720) +
           (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
            C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
               C50611) *
              C50764 * C50628 * C50694 * C583 +
          ((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
            C20082 * C2872 + C20077 * C2875 + C20083 * C3001 + C20078 * C3005) *
               C49720 +
           (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
            C20082 * C2876 + C20077 * C2881 + C20083 * C3004 + C20078 * C3007) *
               C50878 -
           (C20083 * C3000 + C20078 * C3003 + C20082 * C2873 + C20077 * C2877 +
            C20081 * C699 + C20076 * C706 + C20080 * C588 + C20075 * C594) *
               C49713 -
           (C20083 * C3002 + C20078 * C3006 + C20082 * C2878 + C20077 * C2882 +
            C20081 * C705 + C20076 * C711 + C20080 * C595 + C20075 * C603) *
               C50611) *
              C50764 * C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
               C118 +
           (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
               C106 -
           (C17312 + C17313) * C119 - (C17314 + C17315) * C107 + C17328 * C120 +
           C17329 * C108 - C17330 * C121 - C17331 * C109) *
              C5192 +
          ((C17277 * C435 + C17272 * C442 + C17278 * C811 + C50800 * C819) *
               C118 +
           (C17277 * C441 + C17272 * C452 + C17278 * C820 + C50800 * C835) *
               C106 -
           (C17687 + C17686) * C119 - (C17689 + C17688) * C107 +
           (C17691 + C17690) * C120 + (C17693 + C17692) * C108 -
           (C17694 + C17695) * C121 - (C17696 + C17697) * C109) *
              C5193 +
          ((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
               C118 +
           (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
               C106 -
           (C18276 + C18277) * C119 - (C18278 + C18279) * C107 +
           (C18281 + C18280) * C120 + (C18283 + C18282) * C108 -
           (C17278 * C1080 + C50800 * C1085 + C17277 * C947 + C17272 * C955) *
               C121 -
           (C17278 * C1084 + C50800 * C1092 + C17277 * C956 + C17272 * C962) *
               C109) *
              C5194) *
         C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50878 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
               C5192 +
           ((C22205 + C22206) * C49720 + (C22207 + C22208) * C50878 -
            (C17687 + C17686) * C49713 - (C17689 + C17688) * C50611) *
               C5193 +
           ((C22209 + C22210) * C49720 + (C22211 + C22212) * C50878 -
            (C18276 + C18277) * C49713 - (C18278 + C18279) * C50611) *
               C5194) *
              C50628 * C50694 * C582 +
          (((C17502 + C17503) * C49713 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50878 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C49720) +
            (C17504 + C17505) * C50611) *
               C5192 +
           ((C19031 + C19030) * C49713 -
            ((C17278 * C833 + C50800 * C842 + C17277 * C820 + C17272 * C835) *
                 C50878 +
             (C17278 * C818 + C50800 * C834 + C17277 * C811 + C17272 * C819) *
                 C49720) +
            (C19033 + C19032) * C50611) *
               C5193 +
           ((C17277 * C1082 + C17272 * C1089 + C17278 * C3317 +
             C50800 * C3321) *
                C49713 -
            ((C17278 * C3320 + C50800 * C3325 + C17277 * C1090 +
              C17272 * C1095) *
                 C50878 +
             (C17278 * C3316 + C50800 * C3319 + C17277 * C1083 +
              C17272 * C1091) *
                 C49720) +
            (C17277 * C1088 + C17272 * C1094 + C17278 * C3322 +
             C50800 * C3326) *
                C50611) *
               C5194) *
              C50628 * C50694 * C583 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C49720 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C50878 -
            (C17862 + C17863) * C49713 - (C17864 + C17865) * C50611) *
               C5192 +
           ((C17277 * C818 + C17272 * C834 + C17278 * C3154 + C50800 * C3158) *
                C49720 +
            (C17277 * C833 + C17272 * C842 + C17278 * C3159 + C50800 * C3166) *
                C50878 -
            (C17278 * C3155 + C50800 * C3160 + C17277 * C817 + C17272 * C832) *
                C49713 -
            (C17278 * C3161 + C50800 * C3167 + C17277 * C831 + C17272 * C841) *
                C50611) *
               C5193 +
           ((C17277 * C3316 + C17272 * C3319 + C17278 * C3493 +
             C50800 * C3497) *
                C49720 +
            (C17277 * C3320 + C17272 * C3325 + C17278 * C3496 +
             C50800 * C3499) *
                C50878 -
            (C17278 * C3492 + C50800 * C3495 + C17277 * C3317 +
             C17272 * C3321) *
                C49713 -
            (C17278 * C3494 + C50800 * C3498 + C17277 * C3322 +
             C17272 * C3326) *
                C50611) *
               C5194) *
              C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C696 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50606) *
               C50764 * C17274 +
           ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
               C17275 +
           (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
              C50694 * C692 -
          ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
           ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50764 *
               C17275 +
           ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                C50606 +
            (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                C696) *
               C50764 * C17274) *
              C50694 * C693 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C696 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C50606) *
               C50764 * C17274 +
           ((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50764 *
               C17275 +
           ((C17867 + C17866) * C696 + (C17869 + C17868) * C50606) * C50764 *
               C17276) *
              C50694 * C694 -
          (((C17278 * C2880 + C50800 * C2883 + C17277 * C703 + C17272 * C710) *
                C50606 +
            (C17278 * C2874 + C50800 * C2879 + C17277 * C698 + C17272 * C704) *
                C696) *
               C50764 * C17276 +
           ((C17278 * C2878 + C50800 * C2882 + C17277 * C705 + C17272 * C711) *
                C50606 +
            (C17278 * C2873 + C50800 * C2877 + C17277 * C699 + C17272 * C706) *
                C696) *
               C50764 * C17275 +
           ((C17278 * C2876 + C50800 * C2881 + C17277 * C707 + C17272 * C712) *
                C50606 +
            (C17278 * C2872 + C50800 * C2875 + C17277 * C700 + C17272 * C708) *
                C696) *
               C50764 * C17274) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
            C17328 * C285 + C17329 * C280) *
               C50764 * C17274 +
           ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
            (C17317 + C17316) * C284 - (C17319 + C17318) * C279 +
            (C17321 + C17320) * C285 + (C17323 + C17322) * C280) *
               C50764 * C17275 +
           (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C279 +
            (C17325 + C17324) * C285 + (C17327 + C17326) * C280) *
               C50764 * C17276) *
              C50694 * C50893 +
          (((C17502 + C17503) * C284 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C278 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C283) +
            (C17504 + C17505) * C279 - C17514 * C285 - C17515 * C280) *
               C50764 * C17274 +
           ((C17507 + C17506) * C284 -
            ((C17505 + C17504) * C278 + (C17503 + C17502) * C283) +
            (C17509 + C17508) * C279 - (C17510 + C17511) * C285 -
            (C17512 + C17513) * C280) *
               C50764 * C17275 +
           ((C17511 + C17510) * C284 - (C17515 * C278 + C17514 * C283) +
            (C17513 + C17512) * C279 -
            (C17278 * C591 + C50800 * C600 + C17277 * C290 + C17272 * C300) *
                C285 -
            (C17278 * C601 + C50800 * C606 + C17277 * C301 + C17272 * C308) *
                C280) *
               C50764 * C17276) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C278 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C279 +
           (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
            C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
               C285 +
           (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
            C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
               C280) *
              C50764 * C50628 * C50694 * C50893 +
          ((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
            C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
               C284 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C278 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C283) +
           (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
            C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
               C279 -
           (C20083 * C2874 + C20078 * C2879 + C20082 * C698 + C20077 * C704 +
            C20081 * C589 + C20076 * C596 + C20080 * C288 + C20075 * C296) *
               C285 -
           (C20083 * C2880 + C20078 * C2883 + C20082 * C703 + C20077 * C710 +
            C20081 * C597 + C20076 * C604 + C20080 * C297 + C20075 * C306) *
               C280) *
              C50764 * C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C696 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50606) *
              C50764 * C50628 * C50694 * C692 -
          ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
            C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
               C50606 +
           (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
            C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
               C696) *
              C50764 * C50628 * C50694 * C693 +
          ((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
            C20082 * C2872 + C20077 * C2875 + C20083 * C3001 + C20078 * C3005) *
               C696 +
           (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
            C20082 * C2876 + C20077 * C2881 + C20083 * C3004 + C20078 * C3007) *
               C50606) *
              C50764 * C50628 * C50694 * C694 -
          ((C20083 * C20445 + C20078 * C20447 + C20082 * C3004 +
            C20077 * C3007 + C20081 * C2876 + C20076 * C2881 + C20080 * C707 +
            C20075 * C712) *
               C50606 +
           (C20083 * C20444 + C20078 * C20446 + C20082 * C3001 +
            C20077 * C3005 + C20081 * C2872 + C20076 * C2875 + C20080 * C700 +
            C20075 * C708) *
               C696) *
              C50764 * C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
            C17328 * C285 + C17329 * C280) *
               C5192 +
           ((C17277 * C435 + C17272 * C442 + C17278 * C811 + C50800 * C819) *
                C283 +
            (C17277 * C441 + C17272 * C452 + C17278 * C820 + C50800 * C835) *
                C278 -
            (C17687 + C17686) * C284 - (C17689 + C17688) * C279 +
            (C17691 + C17690) * C285 + (C17693 + C17692) * C280) *
               C5193 +
           ((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
                C283 +
            (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
                C278 -
            (C18276 + C18277) * C284 - (C18278 + C18279) * C279 +
            (C18281 + C18280) * C285 + (C18283 + C18282) * C280) *
               C5194) *
              C50628 * C50694 * C50893 +
          (((C17502 + C17503) * C284 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C278 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C283) +
            (C17504 + C17505) * C279 - C17514 * C285 - C17515 * C280) *
               C5192 +
           ((C19031 + C19030) * C284 -
            ((C17278 * C833 + C50800 * C842 + C17277 * C820 + C17272 * C835) *
                 C278 +
             (C17278 * C818 + C50800 * C834 + C17277 * C811 + C17272 * C819) *
                 C283) +
            (C19033 + C19032) * C279 - (C19034 + C19035) * C285 -
            (C19036 + C19037) * C280) *
               C5193 +
           ((C17277 * C1082 + C17272 * C1089 + C17278 * C3317 +
             C50800 * C3321) *
                C284 -
            ((C17278 * C3320 + C50800 * C3325 + C17277 * C1090 +
              C17272 * C1095) *
                 C278 +
             (C17278 * C3316 + C50800 * C3319 + C17277 * C1083 +
              C17272 * C1091) *
                 C283) +
            (C17277 * C1088 + C17272 * C1094 + C17278 * C3322 +
             C50800 * C3326) *
                C279 -
            (C17278 * C3318 + C50800 * C3323 + C17277 * C1081 +
             C17272 * C1087) *
                C285 -
            (C17278 * C3324 + C50800 * C3327 + C17277 * C1086 +
             C17272 * C1093) *
                C280) *
               C5194) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C696 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50606) *
               C5192 +
           ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C5193 +
           ((C22209 + C22210) * C696 + (C22211 + C22212) * C50606) * C5194) *
              C50628 * C50694 * C692 -
          (((C17278 * C3320 + C50800 * C3325 + C17277 * C1090 +
             C17272 * C1095) *
                C50606 +
            (C17278 * C3316 + C50800 * C3319 + C17277 * C1083 +
             C17272 * C1091) *
                C696) *
               C5194 +
           ((C17278 * C833 + C50800 * C842 + C17277 * C820 + C17272 * C835) *
                C50606 +
            (C17278 * C818 + C50800 * C834 + C17277 * C811 + C17272 * C819) *
                C696) *
               C5193 +
           ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                C50606 +
            (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                C696) *
               C5192) *
              C50628 * C50694 * C693 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C696 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C50606) *
               C5192 +
           ((C17277 * C818 + C17272 * C834 + C17278 * C3154 + C50800 * C3158) *
                C696 +
            (C17277 * C833 + C17272 * C842 + C17278 * C3159 + C50800 * C3166) *
                C50606) *
               C5193 +
           ((C17277 * C3316 + C17272 * C3319 + C17278 * C3493 +
             C50800 * C3497) *
                C696 +
            (C17277 * C3320 + C17272 * C3325 + C17278 * C3496 +
             C50800 * C3499) *
                C50606) *
               C5194) *
              C50628 * C50694 * C694 -
          (((C17278 * C20747 + C50800 * C20749 + C17277 * C3496 +
             C17272 * C3499) *
                C50606 +
            (C17278 * C20746 + C50800 * C20748 + C17277 * C3493 +
             C17272 * C3497) *
                C696) *
               C5194 +
           ((C17278 * C3164 + C50800 * C3169 + C17277 * C3159 +
             C17272 * C3166) *
                C50606 +
            (C17278 * C3157 + C50800 * C3165 + C17277 * C3154 +
             C17272 * C3158) *
                C696) *
               C5193 +
           ((C17278 * C2876 + C50800 * C2881 + C17277 * C707 + C17272 * C712) *
                C50606 +
            (C17278 * C2872 + C50800 * C2875 + C17277 * C700 + C17272 * C708) *
                C696) *
               C5192) *
              C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C17274 +
            ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
                C17275 +
            (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
               C50894 -
           ((C17699 * C50606 + C17698 * C696) * C50764 * C17276 +
            ((C17689 + C17688) * C50606 + (C17687 + C17686) * C696) * C50764 *
                C17275 +
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50606 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C696) *
                C50764 * C17274) *
               C50706) *
              C582 +
          ((((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C696 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C17274 +
            ((C17277 * C812 + C17272 * C821 + C17278 * C817 + C50800 * C832) *
                 C696 +
             (C17277 * C822 + C17272 * C836 + C17278 * C831 + C50800 * C841) *
                 C50606) *
                C50764 * C17275 +
            ((C17277 * C813 + C17272 * C823 + C17278 * C816 + C50800 * C830) *
                 C696 +
             (C17277 * C824 + C17272 * C837 + C17278 * C829 + C50800 * C840) *
                 C50606) *
                C50764 * C17276) *
               C50706 -
           ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
            ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50764 *
                C17275 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C50764 * C17274) *
               C50894) *
              C583 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C696 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C50606) *
                C50764 * C17274 +
            ((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50764 *
                C17275 +
            ((C17867 + C17866) * C696 + (C17869 + C17868) * C50606) * C50764 *
                C17276) *
               C50894 -
           (((C17278 * C4102 + C50800 * C4103 + C17277 * C829 + C17272 * C840) *
                 C50606 +
             (C17278 * C4100 + C50800 * C4101 + C17277 * C816 + C17272 * C830) *
                 C696) *
                C50764 * C17276 +
            ((C17278 * C3161 + C50800 * C3167 + C17277 * C831 + C17272 * C841) *
                 C50606 +
             (C17278 * C3155 + C50800 * C3160 + C17277 * C817 + C17272 * C832) *
                 C696) *
                C50764 * C17275 +
            ((C17278 * C3159 + C50800 * C3166 + C17277 * C833 + C17272 * C842) *
                 C50606 +
             (C17278 * C3154 + C50800 * C3158 + C17277 * C818 + C17272 * C834) *
                 C696) *
                C50764 * C17274) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
            C17328 * C285 + C17329 * C280) *
               C50764 * C17274 +
           ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
            (C17317 + C17316) * C284 - (C17319 + C17318) * C279 +
            (C17321 + C17320) * C285 + (C17323 + C17322) * C280) *
               C50764 * C17275 +
           (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C279 +
            (C17325 + C17324) * C285 + (C17327 + C17326) * C280) *
               C50764 * C17276) *
              C50894 +
          (((C17686 + C17687) * C284 -
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C278 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C283) +
            (C17688 + C17689) * C279 - C17698 * C285 - C17699 * C280) *
               C50764 * C17274 +
           ((C17691 + C17690) * C284 -
            ((C17689 + C17688) * C278 + (C17687 + C17686) * C283) +
            (C17693 + C17692) * C279 - (C17694 + C17695) * C285 -
            (C17696 + C17697) * C280) *
               C50764 * C17275 +
           ((C17695 + C17694) * C284 - (C17699 * C278 + C17698 * C283) +
            (C17697 + C17696) * C279 -
            (C17278 * C1523 + C50800 * C1524 + C17277 * C438 + C17272 * C448) *
                C285 -
            (C17278 * C1525 + C50800 * C1526 + C17277 * C449 + C17272 * C456) *
                C280) *
               C50764 * C17276) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C278 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C279 +
           (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
            C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
               C285 +
           (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
            C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
               C280) *
              C50764 * C50628 * C50894 +
          ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
            C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
               C284 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C278 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C283) +
           (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
            C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
               C279 -
           (C20083 * C4100 + C20078 * C4101 + C20082 * C816 + C20077 * C830 +
            C20081 * C813 + C20076 * C823 + C20080 * C436 + C20075 * C444) *
               C285 -
           (C20083 * C4102 + C20078 * C4103 + C20082 * C829 + C20077 * C840 +
            C20081 * C824 + C20076 * C837 + C20080 * C445 + C20075 * C454) *
               C280) *
              C50764 * C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C696 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C50606) *
               C50764 * C50628 * C50894 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50606 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C696) *
               C50764 * C50628 * C50706) *
              C582 +
          (((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C696 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C50606) *
               C50764 * C50628 * C50706 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50606 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C696) *
               C50764 * C50628 * C50894) *
              C583 +
          (((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
             C20082 * C2872 + C20077 * C2875 + C20083 * C3001 +
             C20078 * C3005) *
                C696 +
            (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
             C20082 * C2876 + C20077 * C2881 + C20083 * C3004 +
             C20078 * C3007) *
                C50606) *
               C50764 * C50628 * C50894 -
           ((C20083 * C20547 + C20078 * C20549 + C20082 * C3164 +
             C20077 * C3169 + C20081 * C3159 + C20076 * C3166 + C20080 * C833 +
             C20075 * C842) *
                C50606 +
            (C20083 * C20546 + C20078 * C20548 + C20082 * C3157 +
             C20077 * C3165 + C20081 * C3154 + C20076 * C3158 + C20080 * C818 +
             C20075 * C834) *
                C696) *
               C50764 * C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
            C17328 * C285 + C17329 * C280) *
               C5192 +
           ((C22205 + C22206) * C283 + (C22207 + C22208) * C278 -
            (C17687 + C17686) * C284 - (C17689 + C17688) * C279 +
            (C17691 + C17690) * C285 + (C17693 + C17692) * C280) *
               C5193 +
           ((C22209 + C22210) * C283 + (C22211 + C22212) * C278 -
            (C18276 + C18277) * C284 - (C18278 + C18279) * C279 +
            (C18281 + C18280) * C285 + (C18283 + C18282) * C280) *
               C5194) *
              C50628 * C50894 +
          (((C17686 + C17687) * C284 -
            ((C22208 + C22207) * C278 + (C22206 + C22205) * C283) +
            (C17688 + C17689) * C279 - C17698 * C285 - C17699 * C280) *
               C5192 +
           ((C18277 + C18276) * C284 -
            ((C22212 + C22211) * C278 + (C22210 + C22209) * C283) +
            (C18279 + C18278) * C279 - (C18280 + C18281) * C285 -
            (C18282 + C18283) * C280) *
               C5193 +
           ((C17277 * C1168 + C17272 * C1175 + C17278 * C3599 +
             C50800 * C3605) *
                C284 -
            ((C17278 * C3607 + C50800 * C3613 + C17277 * C1176 +
              C17272 * C1181) *
                 C278 +
             (C17278 * C3601 + C50800 * C3609 + C17277 * C1169 +
              C17272 * C1177) *
                 C283) +
            (C17277 * C1174 + C17272 * C1180 + C17278 * C3603 +
             C50800 * C3611) *
                C279 -
            (C17278 * C6979 + C50800 * C6980 + C17277 * C1167 +
             C17272 * C1173) *
                C285 -
            (C17278 * C6981 + C50800 * C6982 + C17277 * C1172 +
             C17272 * C1179) *
                C280) *
               C5194) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C5192 +
            ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C5193 +
            ((C22209 + C22210) * C696 + (C22211 + C22212) * C50606) * C5194) *
               C50628 * C50894 -
           (((C17278 * C3607 + C50800 * C3613 + C17277 * C1176 +
              C17272 * C1181) *
                 C50606 +
             (C17278 * C3601 + C50800 * C3609 + C17277 * C1169 +
              C17272 * C1177) *
                 C696) *
                C5194 +
            ((C22212 + C22211) * C50606 + (C22210 + C22209) * C696) * C5193 +
            ((C22208 + C22207) * C50606 + (C22206 + C22205) * C696) * C5192) *
               C50628 * C50706) *
              C582 +
          ((((C22635 + C22636) * C696 + (C22637 + C22638) * C50606) * C5192 +
            ((C22639 + C22640) * C696 + (C22641 + C22642) * C50606) * C5193 +
            ((C17277 * C3601 + C17272 * C3609 + C17278 * C3600 +
              C50800 * C3608) *
                 C696 +
             (C17277 * C3607 + C17272 * C3613 + C17278 * C3606 +
              C50800 * C3612) *
                 C50606) *
                C5194) *
               C50628 * C50706 -
           (((C22642 + C22641) * C50606 + (C22640 + C22639) * C696) * C5194 +
            ((C22638 + C22637) * C50606 + (C22636 + C22635) * C696) * C5193 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C5192) *
               C50628 * C50894) *
              C583 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C696 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C50606) *
                C5192 +
            ((C22643 + C22644) * C696 + (C22645 + C22646) * C50606) * C5193 +
            ((C22647 + C22648) * C696 + (C22649 + C22650) * C50606) * C5194) *
               C50628 * C50894 -
           (((C17278 * C20817 + C50800 * C20819 + C17277 * C3606 +
              C17272 * C3612) *
                 C50606 +
             (C17278 * C20816 + C50800 * C20818 + C17277 * C3600 +
              C17272 * C3608) *
                 C696) *
                C5194 +
            ((C22650 + C22649) * C50606 + (C22648 + C22647) * C696) * C5193 +
            ((C22646 + C22645) * C50606 + (C22644 + C22643) * C696) * C5192) *
               C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C1285 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50936 -
             (C17312 + C17313) * C1286 - (C17314 + C17315) * C50920 +
             C17328 * C1287 + C17329 * C1282) *
                C50909 +
            ((C22205 + C22206) * C1285 + (C22207 + C22208) * C50936 -
             C27932 * C1286 - C27933 * C50920 + C27934 * C1287 +
             C27935 * C1282) *
                C50828) *
               C50887 +
           (((C17313 + C17312) * C1285 + (C17315 + C17314) * C50936 -
             (C17317 + C17316) * C1286 - (C17319 + C17318) * C50920 +
             (C17321 + C17320) * C1287 + (C17323 + C17322) * C1282) *
                C50909 +
            (C27936 * C1285 + C27937 * C50936 - C17698 * C1286 -
             C17699 * C50920 + (C17695 + C17694) * C1287 +
             (C17697 + C17696) * C1282) *
                C50828) *
               C50633) *
              C50694 * C1283 +
          ((((C17502 + C17503) * C1286 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C50936 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C1285) +
             (C17504 + C17505) * C50920 - C17514 * C1287 - C17515 * C1282) *
                C50909 +
            ((C19031 + C19030) * C1286 -
             ((C22638 + C22637) * C50936 + (C22636 + C22635) * C1285) +
             (C19033 + C19032) * C50920 - (C19034 + C19035) * C1287 -
             (C19036 + C19037) * C1282) *
                C50828) *
               C50887 +
           (((C17507 + C17506) * C1286 -
             ((C17505 + C17504) * C50936 + (C17503 + C17502) * C1285) +
             (C17509 + C17508) * C50920 - (C17510 + C17511) * C1287 -
             (C17512 + C17513) * C1282) *
                C50909 +
            ((C19035 + C19034) * C1286 -
             ((C19032 + C19033) * C50936 + (C19030 + C19031) * C1285) +
             (C19037 + C19036) * C50920 -
             (C17278 * C815 + C50800 * C828 + C17277 * C814 + C17272 * C825) *
                 C1287 -
             (C17278 * C827 + C50800 * C839 + C17277 * C826 + C17272 * C838) *
                 C1282) *
                C50828) *
               C50633) *
              C50694 * C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C1391 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C1386 -
             (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
                C50909 +
            ((C22205 + C22206) * C1391 + (C22207 + C22208) * C1386 -
             C27932 * C1392 - C27933 * C50611) *
                C50828) *
               C50887 +
           (((C17313 + C17312) * C1391 + (C17315 + C17314) * C1386 -
             (C17317 + C17316) * C1392 - (C17319 + C17318) * C50611) *
                C50909 +
            (C27936 * C1391 + C27937 * C1386 - C17698 * C1392 -
             C17699 * C50611) *
                C50828) *
               C50633) *
              C50694 * C50939 +
          ((((C17502 + C17503) * C1392 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C1386 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C1391) +
             (C17504 + C17505) * C50611) *
                C50909 +
            ((C19031 + C19030) * C1392 -
             ((C22638 + C22637) * C1386 + (C22636 + C22635) * C1391) +
             (C19033 + C19032) * C50611) *
                C50828) *
               C50887 +
           (((C17507 + C17506) * C1392 -
             ((C17505 + C17504) * C1386 + (C17503 + C17502) * C1391) +
             (C17509 + C17508) * C50611) *
                C50909 +
            ((C19035 + C19034) * C1392 -
             ((C19032 + C19033) * C1386 + (C19030 + C19031) * C1391) +
             (C19037 + C19036) * C50611) *
                C50828) *
               C50633) *
              C50694 * C50926 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C1391 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C1386 -
             (C17862 + C17863) * C1392 - (C17864 + C17865) * C50611) *
                C50909 +
            ((C22643 + C22644) * C1391 + (C22645 + C22646) * C1386 -
             (C28140 + C28141) * C1392 - (C28142 + C28143) * C50611) *
                C50828) *
               C50887 +
           (((C17863 + C17862) * C1391 + (C17865 + C17864) * C1386 -
             (C17866 + C17867) * C1392 - (C17868 + C17869) * C50611) *
                C50909 +
            ((C28141 + C28140) * C1391 + (C28143 + C28142) * C1386 -
             (C17278 * C4100 + C50800 * C4101 + C17277 * C816 + C17272 * C830) *
                 C1392 -
             (C17278 * C4102 + C50800 * C4103 + C17277 * C829 + C17272 * C840) *
                 C50611) *
                C50828) *
               C50633) *
              C50694 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                  C1391 +
              (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                  C1386 -
              (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
                 C50909 +
             ((C22205 + C22206) * C1391 + (C22207 + C22208) * C1386 -
              C27932 * C1392 - C27933 * C50611) *
                 C50828) *
                C50887 +
            (((C17313 + C17312) * C1391 + (C17315 + C17314) * C1386 -
              (C17317 + C17316) * C1392 - (C17319 + C17318) * C50611) *
                 C50909 +
             (C27936 * C1391 + C27937 * C1386 - C17698 * C1392 -
              C17699 * C50611) *
                 C50828) *
                C50633) *
               C50894 +
           (((C27936 * C1392 -
              ((C22208 + C22207) * C1386 + (C22206 + C22205) * C1391) +
              C27937 * C50611) *
                 C50909 +
             (C28662 * C1392 -
              ((C22212 + C22211) * C1386 + (C22210 + C22209) * C1391) +
              C28663 * C50611) *
                 C50828) *
                C50887 +
            ((C27934 * C1392 - (C27933 * C1386 + C27932 * C1391) +
              C27935 * C50611) *
                 C50909 +
             ((C18281 + C18280) * C1392 - (C22800 * C1386 + C22799 * C1391) +
              (C18283 + C18282) * C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C1283 +
          (((((C17502 + C17503) * C1392 -
              ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                   C1386 +
               (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                   C1391) +
              (C17504 + C17505) * C50611) *
                 C50909 +
             (C29634 * C1392 -
              ((C22638 + C22637) * C1386 + (C22636 + C22635) * C1391) +
              C29635 * C50611) *
                 C50828) *
                C50887 +
            (((C17507 + C17506) * C1392 -
              ((C17505 + C17504) * C1386 + (C17503 + C17502) * C1391) +
              (C17509 + C17508) * C50611) *
                 C50909 +
             ((C19035 + C19034) * C1392 - (C29636 * C1386 + C29637 * C1391) +
              (C19037 + C19036) * C50611) *
                 C50828) *
                C50633) *
               C50894 +
           ((((C22635 + C22636) * C1391 + (C22637 + C22638) * C1386 -
              C29637 * C1392 - C29636 * C50611) *
                 C50909 +
             ((C22639 + C22640) * C1391 + (C22641 + C22642) * C1386 -
              (C23616 + C23615) * C1392 - (C23618 + C23617) * C50611) *
                 C50828) *
                C50887 +
            ((C29634 * C1391 + C29635 * C1386 - (C19034 + C19035) * C1392 -
              (C19036 + C19037) * C50611) *
                 C50909 +
             ((C23615 + C23616) * C1391 + (C23617 + C23618) * C1386 -
              (C17278 * C3318 + C50800 * C3323 + C17277 * C1081 +
               C17272 * C1087) *
                  C1392 -
              (C17278 * C3324 + C50800 * C3327 + C17277 * C1086 +
               C17272 * C1093) *
                  C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                  C49720 +
              (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                  C50878 -
              (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
                 C50909 +
             ((C22205 + C22206) * C49720 + (C22207 + C22208) * C50878 -
              C27932 * C49713 - C27933 * C50611) *
                 C50828) *
                C50887 +
            (((C17313 + C17312) * C49720 + (C17315 + C17314) * C50878 -
              (C17317 + C17316) * C49713 - (C17319 + C17318) * C50611) *
                 C50909 +
             (C27936 * C49720 + C27937 * C50878 - C17698 * C49713 -
              C17699 * C50611) *
                 C50828) *
                C50633) *
               C1643 +
           (((C27936 * C49713 -
              ((C22208 + C22207) * C50878 + (C22206 + C22205) * C49720) +
              C27937 * C50611) *
                 C50909 +
             (C28662 * C49713 -
              ((C22212 + C22211) * C50878 + (C22210 + C22209) * C49720) +
              C28663 * C50611) *
                 C50828) *
                C50887 +
            ((C27934 * C49713 - (C27933 * C50878 + C27932 * C49720) +
              C27935 * C50611) *
                 C50909 +
             ((C18281 + C18280) * C49713 - (C22800 * C50878 + C22799 * C49720) +
              (C18283 + C18282) * C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C1283 +
          (((((C17502 + C17503) * C49713 -
              ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                   C50878 +
               (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                   C49720) +
              (C17504 + C17505) * C50611) *
                 C50909 +
             (C29634 * C49713 -
              ((C22638 + C22637) * C50878 + (C22636 + C22635) * C49720) +
              C29635 * C50611) *
                 C50828) *
                C50887 +
            (((C17507 + C17506) * C49713 -
              ((C17505 + C17504) * C50878 + (C17503 + C17502) * C49720) +
              (C17509 + C17508) * C50611) *
                 C50909 +
             ((C19035 + C19034) * C49713 - (C29636 * C50878 + C29637 * C49720) +
              (C19037 + C19036) * C50611) *
                 C50828) *
                C50633) *
               C1643 +
           ((((C22635 + C22636) * C49720 + (C22637 + C22638) * C50878 -
              C29637 * C49713 - C29636 * C50611) *
                 C50909 +
             ((C22639 + C22640) * C49720 + (C22641 + C22642) * C50878 -
              (C23616 + C23615) * C49713 - (C23618 + C23617) * C50611) *
                 C50828) *
                C50887 +
            ((C29634 * C49720 + C29635 * C50878 - (C19034 + C19035) * C49713 -
              (C19036 + C19037) * C50611) *
                 C50909 +
             ((C23615 + C23616) * C49720 + (C23617 + C23618) * C50878 -
              (C17278 * C3318 + C50800 * C3323 + C17277 * C1081 +
               C17272 * C1087) *
                  C49713 -
              (C17278 * C3324 + C50800 * C3327 + C17277 * C1086 +
               C17272 * C1093) *
                  C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                  C696 +
              (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                  C50606) *
                 C50909 +
             ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C50828) *
                C50887 +
            (((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50909 +
             (C27936 * C696 + C27937 * C50606) * C50828) *
                C50633) *
               C1643 -
           (((C22800 * C50606 + C22799 * C696) * C50828 +
             (C27933 * C50606 + C27932 * C696) * C50909) *
                C50633 +
            (((C22212 + C22211) * C50606 + (C22210 + C22209) * C696) * C50828 +
             ((C22208 + C22207) * C50606 + (C22206 + C22205) * C696) * C50909) *
                C50887) *
               C50706) *
              C50939 +
          (((((C22635 + C22636) * C696 + (C22637 + C22638) * C50606) * C50909 +
             ((C22639 + C22640) * C696 + (C22641 + C22642) * C50606) * C50828) *
                C50887 +
            ((C29634 * C696 + C29635 * C50606) * C50909 +
             ((C23615 + C23616) * C696 + (C23617 + C23618) * C50606) * C50828) *
                C50633) *
               C50706 -
           (((C29636 * C50606 + C29637 * C696) * C50828 +
             ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50909) *
                C50633 +
            (((C22638 + C22637) * C50606 + (C22636 + C22635) * C696) * C50828 +
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C50606 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C696) *
                 C50909) *
                C50887) *
               C1643) *
              C50926 +
          (((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                  C696 +
              (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                  C50606) *
                 C50909 +
             ((C22643 + C22644) * C696 + (C22645 + C22646) * C50606) * C50828) *
                C50887 +
            (((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50909 +
             ((C28141 + C28140) * C696 + (C28143 + C28142) * C50606) * C50828) *
                C50633) *
               C1643 -
           ((((C17278 * C3494 + C50800 * C3498 + C17277 * C3322 +
               C17272 * C3326) *
                  C50606 +
              (C17278 * C3492 + C50800 * C3495 + C17277 * C3317 +
               C17272 * C3321) *
                  C696) *
                 C50828 +
             ((C28142 + C28143) * C50606 + (C28140 + C28141) * C696) * C50909) *
                C50633 +
            (((C22650 + C22649) * C50606 + (C22648 + C22647) * C696) * C50828 +
             ((C22646 + C22645) * C50606 + (C22644 + C22643) * C696) * C50909) *
                C50887) *
               C50706) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                  C696 +
              (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                  C50606) *
                 C50909 +
             ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C50828) *
                C50887 +
            (((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50909 +
             (C27936 * C696 + C27937 * C50606) * C50828) *
                C50633) *
               C50940 -
           (((C22800 * C50606 + C22799 * C696) * C50828 +
             (C27933 * C50606 + C27932 * C696) * C50909) *
                C50633 +
            (((C22212 + C22211) * C50606 + (C22210 + C22209) * C696) * C50828 +
             ((C22208 + C22207) * C50606 + (C22206 + C22205) * C696) * C50909) *
                C50887) *
               C50929 +
           ((C22994 * C50909 +
             ((C22826 + C22825) * C696 + (C22824 + C22823) * C50606) * C50828) *
                C50887 +
            ((C28662 * C696 + C28663 * C50606) * C50909 +
             ((C22821 + C22822) * C696 + (C22827 + C22828) * C50606) * C50828) *
                C50633) *
               C1875) *
              C1283 +
          (((((C22635 + C22636) * C696 + (C22637 + C22638) * C50606) * C50909 +
             ((C22639 + C22640) * C696 + (C22641 + C22642) * C50606) * C50828) *
                C50887 +
            ((C29634 * C696 + C29635 * C50606) * C50909 +
             ((C23615 + C23616) * C696 + (C23617 + C23618) * C50606) * C50828) *
                C50633) *
               C50929 -
           (((C29636 * C50606 + C29637 * C696) * C50828 +
             ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50909) *
                C50633 +
            (((C22638 + C22637) * C50606 + (C22636 + C22635) * C696) * C50828 +
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C50606 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C696) *
                 C50909) *
                C50887) *
               C50940 -
           ((((C17278 * C3602 + C50800 * C3610 + C17277 * C3603 +
               C17272 * C3611) *
                  C50606 +
              (C17278 * C3598 + C50800 * C3604 + C17277 * C3599 +
               C17272 * C3605) *
                  C696) *
                 C50828 +
             ((C23618 + C23617) * C50606 + (C23616 + C23615) * C696) * C50909) *
                C50633 +
            (((C22998 + C22997) * C50606 + (C22996 + C22995) * C696) * C50828 +
             C23001 * C50909) *
                C50887) *
               C1875) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50878 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
                C50909 +
            ((C22205 + C22206) * C49720 + (C22207 + C22208) * C50878 -
             C27932 * C49713 - C27933 * C50611) *
                C50828) *
               C50887 +
           (((C17313 + C17312) * C49720 + (C17315 + C17314) * C50878 -
             (C17317 + C17316) * C49713 - (C17319 + C17318) * C50611) *
                C50909 +
            (C27936 * C49720 + C27937 * C50878 - C17698 * C49713 -
             C17699 * C50611) *
                C50828) *
               C50633) *
              C50694 * C582 +
          ((((C17502 + C17503) * C49713 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C50878 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C49720) +
             (C17504 + C17505) * C50611) *
                C50909 +
            ((C19031 + C19030) * C49713 -
             ((C22638 + C22637) * C50878 + (C22636 + C22635) * C49720) +
             (C19033 + C19032) * C50611) *
                C50828) *
               C50887 +
           (((C17507 + C17506) * C49713 -
             ((C17505 + C17504) * C50878 + (C17503 + C17502) * C49720) +
             (C17509 + C17508) * C50611) *
                C50909 +
            ((C19035 + C19034) * C49713 -
             ((C19032 + C19033) * C50878 + (C19030 + C19031) * C49720) +
             (C19037 + C19036) * C50611) *
                C50828) *
               C50633) *
              C50694 * C583 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C49720 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C50878 -
             (C17862 + C17863) * C49713 - (C17864 + C17865) * C50611) *
                C50909 +
            ((C22643 + C22644) * C49720 + (C22645 + C22646) * C50878 -
             (C28140 + C28141) * C49713 - (C28142 + C28143) * C50611) *
                C50828) *
               C50887 +
           (((C17863 + C17862) * C49720 + (C17865 + C17864) * C50878 -
             (C17866 + C17867) * C49713 - (C17868 + C17869) * C50611) *
                C50909 +
            ((C28141 + C28140) * C49720 + (C28143 + C28142) * C50878 -
             (C17278 * C4100 + C50800 * C4101 + C17277 * C816 + C17272 * C830) *
                 C49713 -
             (C17278 * C4102 + C50800 * C4103 + C17277 * C829 + C17272 * C840) *
                 C50611) *
                C50828) *
               C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C118 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C106 -
            (C17312 + C17313) * C119 - (C17314 + C17315) * C107 +
            C17328 * C120 + C17329 * C108 - C17330 * C121 - C17331 * C109) *
               C50909 +
           ((C22205 + C22206) * C118 + (C22207 + C22208) * C106 -
            (C17687 + C17686) * C119 - (C17689 + C17688) * C107 +
            (C17691 + C17690) * C120 + (C17693 + C17692) * C108 -
            (C17694 + C17695) * C121 - (C17696 + C17697) * C109) *
               C50828) *
              C50887 +
          (((C17313 + C17312) * C118 + (C17315 + C17314) * C106 -
            (C17317 + C17316) * C119 - (C17319 + C17318) * C107 +
            (C17321 + C17320) * C120 + (C17323 + C17322) * C108 -
            (C17324 + C17325) * C121 - (C17326 + C17327) * C109) *
               C50909 +
           ((C17686 + C17687) * C118 + (C17688 + C17689) * C106 -
            C17698 * C119 - C17699 * C107 + (C17695 + C17694) * C120 +
            (C17697 + C17696) * C108 -
            (C17278 * C1523 + C50800 * C1524 + C17277 * C438 + C17272 * C448) *
                C121 -
            (C17278 * C1525 + C50800 * C1526 + C17277 * C449 + C17272 * C456) *
                C109) *
               C50828) *
              C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50878 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
                C50909 +
            ((C22205 + C22206) * C49720 + (C22207 + C22208) * C50878 -
             C27932 * C49713 - C27933 * C50611) *
                C50828) *
               C50887 +
           (((C17313 + C17312) * C49720 + (C17315 + C17314) * C50878 -
             (C17317 + C17316) * C49713 - (C17319 + C17318) * C50611) *
                C50909 +
            (C27936 * C49720 + C27937 * C50878 - C17698 * C49713 -
             C17699 * C50611) *
                C50828) *
               C50633) *
              C941 +
          (((C27936 * C49713 -
             ((C22208 + C22207) * C50878 + (C22206 + C22205) * C49720) +
             C27937 * C50611) *
                C50909 +
            (C28662 * C49713 -
             ((C22212 + C22211) * C50878 + (C22210 + C22209) * C49720) +
             C28663 * C50611) *
                C50828) *
               C50887 +
           ((C27934 * C49713 - (C27933 * C50878 + C27932 * C49720) +
             C27935 * C50611) *
                C50909 +
            ((C18281 + C18280) * C49713 - (C22800 * C50878 + C22799 * C49720) +
             (C18283 + C18282) * C50611) *
                C50828) *
               C50633) *
              C942 +
          ((C22831 * C50909 +
            ((C22826 + C22825) * C49720 + (C22824 + C22823) * C50878 -
             (C22822 + C22821) * C49713 - (C22828 + C22827) * C50611) *
                C50828) *
               C50887 +
           ((C28662 * C49720 + C28663 * C50878 - (C18280 + C18281) * C49713 -
             (C18282 + C18283) * C50611) *
                C50909 +
            ((C22821 + C22822) * C49720 + (C22827 + C22828) * C50878 -
             (C17278 * C6979 + C50800 * C6980 + C17277 * C1167 +
              C17272 * C1173) *
                 C49713 -
             (C17278 * C6981 + C50800 * C6982 + C17277 * C1172 +
              C17272 * C1179) *
                 C50611) *
                C50828) *
               C50633) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C50909 +
            ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C50828) *
               C50887 +
           (((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50909 +
            (C27936 * C696 + C27937 * C50606) * C50828) *
               C50633) *
              C50694 * C692 -
          ((((C19032 + C19033) * C50606 + (C19030 + C19031) * C696) * C50828 +
            ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50909) *
               C50633 +
           (((C22638 + C22637) * C50606 + (C22636 + C22635) * C696) * C50828 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C50909) *
               C50887) *
              C50694 * C693 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C696 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C50606) *
                C50909 +
            ((C22643 + C22644) * C696 + (C22645 + C22646) * C50606) * C50828) *
               C50887 +
           (((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50909 +
            ((C28141 + C28140) * C696 + (C28143 + C28142) * C50606) * C50828) *
               C50633) *
              C50694 * C694 -
          ((((C17278 * C3162 + C50800 * C3168 + C17277 * C3161 +
              C17272 * C3167) *
                 C50606 +
             (C17278 * C3156 + C50800 * C3163 + C17277 * C3155 +
              C17272 * C3160) *
                 C696) *
                C50828 +
            ((C17278 * C2878 + C50800 * C2882 + C17277 * C705 + C17272 * C711) *
                 C50606 +
             (C17278 * C2873 + C50800 * C2877 + C17277 * C699 + C17272 * C706) *
                 C696) *
                C50909) *
               C50633 +
           (((C17278 * C3164 + C50800 * C3169 + C17277 * C3159 +
              C17272 * C3166) *
                 C50606 +
             (C17278 * C3157 + C50800 * C3165 + C17277 * C3154 +
              C17272 * C3158) *
                 C696) *
                C50828 +
            ((C17278 * C2876 + C50800 * C2881 + C17277 * C707 + C17272 * C712) *
                 C50606 +
             (C17278 * C2872 + C50800 * C2875 + C17277 * C700 + C17272 * C708) *
                 C696) *
                C50909) *
               C50887) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C283 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C278 -
             (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
             C17328 * C285 + C17329 * C280) *
                C50909 +
            ((C22205 + C22206) * C283 + (C22207 + C22208) * C278 -
             (C17687 + C17686) * C284 - (C17689 + C17688) * C279 +
             (C17691 + C17690) * C285 + (C17693 + C17692) * C280) *
                C50828) *
               C50887 +
           (((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
             (C17317 + C17316) * C284 - (C17319 + C17318) * C279 +
             (C17321 + C17320) * C285 + (C17323 + C17322) * C280) *
                C50909 +
            ((C17686 + C17687) * C283 + (C17688 + C17689) * C278 -
             C17698 * C284 - C17699 * C279 + (C17695 + C17694) * C285 +
             (C17697 + C17696) * C280) *
                C50828) *
               C50633) *
              C50694 * C50893 +
          ((((C17502 + C17503) * C284 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C278 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C283) +
             (C17504 + C17505) * C279 - C17514 * C285 - C17515 * C280) *
                C50909 +
            ((C19031 + C19030) * C284 -
             ((C22638 + C22637) * C278 + (C22636 + C22635) * C283) +
             (C19033 + C19032) * C279 - (C19034 + C19035) * C285 -
             (C19036 + C19037) * C280) *
                C50828) *
               C50887 +
           (((C17507 + C17506) * C284 -
             ((C17505 + C17504) * C278 + (C17503 + C17502) * C283) +
             (C17509 + C17508) * C279 - (C17510 + C17511) * C285 -
             (C17512 + C17513) * C280) *
                C50909 +
            ((C19035 + C19034) * C284 -
             ((C19032 + C19033) * C278 + (C19030 + C19031) * C283) +
             (C19037 + C19036) * C279 -
             (C17278 * C815 + C50800 * C828 + C17277 * C814 + C17272 * C825) *
                 C285 -
             (C17278 * C827 + C50800 * C839 + C17277 * C826 + C17272 * C838) *
                 C280) *
                C50828) *
               C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                  C696 +
              (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                  C50606) *
                 C50909 +
             ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C50828) *
                C50887 +
            (((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50909 +
             (C27936 * C696 + C27937 * C50606) * C50828) *
                C50633) *
               C941 -
           (((C22800 * C50606 + C22799 * C696) * C50828 +
             (C27933 * C50606 + C27932 * C696) * C50909) *
                C50633 +
            (((C22212 + C22211) * C50606 + (C22210 + C22209) * C696) * C50828 +
             ((C22208 + C22207) * C50606 + (C22206 + C22205) * C696) * C50909) *
                C50887) *
               C942 +
           ((C22994 * C50909 +
             ((C22826 + C22825) * C696 + (C22824 + C22823) * C50606) * C50828) *
                C50887 +
            ((C28662 * C696 + C28663 * C50606) * C50909 +
             ((C22821 + C22822) * C696 + (C22827 + C22828) * C50606) * C50828) *
                C50633) *
               C943) *
              C50893 +
          (((((C22635 + C22636) * C696 + (C22637 + C22638) * C50606) * C50909 +
             ((C22639 + C22640) * C696 + (C22641 + C22642) * C50606) * C50828) *
                C50887 +
            (((C19031 + C19030) * C696 + (C19033 + C19032) * C50606) * C50909 +
             ((C23615 + C23616) * C696 + (C23617 + C23618) * C50606) * C50828) *
                C50633) *
               C942 -
           ((((C19032 + C19033) * C50606 + (C19030 + C19031) * C696) * C50828 +
             ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50909) *
                C50633 +
            (((C22638 + C22637) * C50606 + (C22636 + C22635) * C696) * C50828 +
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C50606 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C696) *
                 C50909) *
                C50887) *
               C941 -
           ((((C17278 * C3602 + C50800 * C3610 + C17277 * C3603 +
               C17272 * C3611) *
                  C50606 +
              (C17278 * C3598 + C50800 * C3604 + C17277 * C3599 +
               C17272 * C3605) *
                  C696) *
                 C50828 +
             ((C23618 + C23617) * C50606 + (C23616 + C23615) * C696) * C50909) *
                C50633 +
            (((C22998 + C22997) * C50606 + (C22996 + C22995) * C696) * C50828 +
             C23001 * C50909) *
                C50887) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                  C696 +
              (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                  C50606) *
                 C50909 +
             ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C50828) *
                C50887 +
            (((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50909 +
             (C27936 * C696 + C27937 * C50606) * C50828) *
                C50633) *
               C50894 -
           (((C22800 * C50606 + C22799 * C696) * C50828 +
             (C27933 * C50606 + C27932 * C696) * C50909) *
                C50633 +
            (((C22212 + C22211) * C50606 + (C22210 + C22209) * C696) * C50828 +
             ((C22208 + C22207) * C50606 + (C22206 + C22205) * C696) * C50909) *
                C50887) *
               C50706) *
              C582 +
          (((((C22635 + C22636) * C696 + (C22637 + C22638) * C50606) * C50909 +
             ((C22639 + C22640) * C696 + (C22641 + C22642) * C50606) * C50828) *
                C50887 +
            (((C19031 + C19030) * C696 + (C19033 + C19032) * C50606) * C50909 +
             ((C23615 + C23616) * C696 + (C23617 + C23618) * C50606) * C50828) *
                C50633) *
               C50706 -
           ((((C19032 + C19033) * C50606 + (C19030 + C19031) * C696) * C50828 +
             ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50909) *
                C50633 +
            (((C22638 + C22637) * C50606 + (C22636 + C22635) * C696) * C50828 +
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C50606 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C696) *
                 C50909) *
                C50887) *
               C50894) *
              C583 +
          (((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                  C696 +
              (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                  C50606) *
                 C50909 +
             ((C22643 + C22644) * C696 + (C22645 + C22646) * C50606) * C50828) *
                C50887 +
            (((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50909 +
             ((C28141 + C28140) * C696 + (C28143 + C28142) * C50606) * C50828) *
                C50633) *
               C50894 -
           ((((C17278 * C3494 + C50800 * C3498 + C17277 * C3322 +
               C17272 * C3326) *
                  C50606 +
              (C17278 * C3492 + C50800 * C3495 + C17277 * C3317 +
               C17272 * C3321) *
                  C696) *
                 C50828 +
             ((C28142 + C28143) * C50606 + (C28140 + C28141) * C696) * C50909) *
                C50633 +
            (((C22650 + C22649) * C50606 + (C22648 + C22647) * C696) * C50828 +
             ((C22646 + C22645) * C50606 + (C22644 + C22643) * C696) * C50909) *
                C50887) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C283 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C278 -
             (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
             C17328 * C285 + C17329 * C280) *
                C50909 +
            ((C22205 + C22206) * C283 + (C22207 + C22208) * C278 -
             C27932 * C284 - C27933 * C279 + C27934 * C285 + C27935 * C280) *
                C50828) *
               C50887 +
           (((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
             (C17317 + C17316) * C284 - (C17319 + C17318) * C279 +
             (C17321 + C17320) * C285 + (C17323 + C17322) * C280) *
                C50909 +
            (C27936 * C283 + C27937 * C278 - C17698 * C284 - C17699 * C279 +
             (C17695 + C17694) * C285 + (C17697 + C17696) * C280) *
                C50828) *
               C50633) *
              C50894 +
          (((C27936 * C284 -
             ((C22208 + C22207) * C278 + (C22206 + C22205) * C283) +
             C27937 * C279 - C17698 * C285 - C17699 * C280) *
                C50909 +
            ((C18277 + C18276) * C284 -
             ((C22212 + C22211) * C278 + (C22210 + C22209) * C283) +
             (C18279 + C18278) * C279 - (C18280 + C18281) * C285 -
             (C18282 + C18283) * C280) *
                C50828) *
               C50887 +
           ((C27934 * C284 - (C27933 * C278 + C27932 * C283) + C27935 * C279 -
             (C17694 + C17695) * C285 - (C17696 + C17697) * C280) *
                C50909 +
            ((C18281 + C18280) * C284 - (C22800 * C278 + C22799 * C283) +
             (C18283 + C18282) * C279 -
             (C17278 * C1080 + C50800 * C1085 + C17277 * C947 + C17272 * C955) *
                 C285 -
             (C17278 * C1084 + C50800 * C1092 + C17277 * C956 + C17272 * C962) *
                 C280) *
                C50828) *
               C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C50909 +
            ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C50828) *
               C50887 +
           (((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50909 +
            (C27936 * C696 + C27937 * C50606) * C50828) *
               C50633) *
              C1162 -
          (((C22800 * C50606 + C22799 * C696) * C50828 +
            (C27933 * C50606 + C27932 * C696) * C50909) *
               C50633 +
           (((C22212 + C22211) * C50606 + (C22210 + C22209) * C696) * C50828 +
            ((C22208 + C22207) * C50606 + (C22206 + C22205) * C696) * C50909) *
               C50887) *
              C1163 +
          ((C22994 * C50909 +
            ((C22826 + C22825) * C696 + (C22824 + C22823) * C50606) * C50828) *
               C50887 +
           ((C28662 * C696 + C28663 * C50606) * C50909 +
            ((C22821 + C22822) * C696 + (C22827 + C22828) * C50606) * C50828) *
               C50633) *
              C1164 -
          ((((C17278 * C6345 + C50800 * C6349 + C17277 * C6149 +
              C17272 * C6153) *
                 C50606 +
             (C17278 * C6343 + C50800 * C6346 + C17277 * C6144 +
              C17272 * C6148) *
                 C696) *
                C50828 +
            ((C22828 + C22827) * C50606 + (C22822 + C22821) * C696) * C50909) *
               C50633 +
           (((C23119 + C23118) * C50606 + (C23117 + C23116) * C696) * C50828 +
            C23120 * C50909) *
               C50887) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C1285 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50936 -
             (C17312 + C17313) * C1286 - (C17314 + C17315) * C50920 +
             C17328 * C1287 + C17329 * C1282) *
                C50909 +
            ((C22205 + C22206) * C1285 + (C22207 + C22208) * C50936 -
             C27932 * C1286 - C27933 * C50920 + C27934 * C1287 +
             C27935 * C1282) *
                C50828) *
               C50887 +
           (((C17313 + C17312) * C1285 + (C17315 + C17314) * C50936 -
             (C17317 + C17316) * C1286 - (C17319 + C17318) * C50920 +
             (C17321 + C17320) * C1287 + (C17323 + C17322) * C1282) *
                C50909 +
            (C27936 * C1285 + C27937 * C50936 - C17698 * C1286 -
             C17699 * C50920 + (C17695 + C17694) * C1287 +
             (C17697 + C17696) * C1282) *
                C50828) *
               C50633) *
              C1643 +
          (((C27936 * C1286 -
             ((C22208 + C22207) * C50936 + (C22206 + C22205) * C1285) +
             C27937 * C50920 - C17698 * C1287 - C17699 * C1282) *
                C50909 +
            (C28662 * C1286 -
             ((C22212 + C22211) * C50936 + (C22210 + C22209) * C1285) +
             C28663 * C50920 - (C18280 + C18281) * C1287 -
             (C18282 + C18283) * C1282) *
                C50828) *
               C50887 +
           ((C27934 * C1286 - (C27933 * C50936 + C27932 * C1285) +
             C27935 * C50920 - (C17694 + C17695) * C1287 -
             (C17696 + C17697) * C1282) *
                C50909 +
            ((C18281 + C18280) * C1286 - (C22800 * C50936 + C22799 * C1285) +
             (C18283 + C18282) * C50920 -
             (C17278 * C1080 + C50800 * C1085 + C17277 * C947 + C17272 * C955) *
                 C1287 -
             (C17278 * C1084 + C50800 * C1092 + C17277 * C956 + C17272 * C962) *
                 C1282) *
                C50828) *
               C50633) *
              C50706) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                  C1391 +
              (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                  C1386 -
              (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
                 C50909 +
             ((C22205 + C22206) * C1391 + (C22207 + C22208) * C1386 -
              C27932 * C1392 - C27933 * C50611) *
                 C50828) *
                C50887 +
            (((C17313 + C17312) * C1391 + (C17315 + C17314) * C1386 -
              (C17317 + C17316) * C1392 - (C17319 + C17318) * C50611) *
                 C50909 +
             (C27936 * C1391 + C27937 * C1386 - C17698 * C1392 -
              C17699 * C50611) *
                 C50828) *
                C50633) *
               C1643 +
           (((C27936 * C1392 -
              ((C22208 + C22207) * C1386 + (C22206 + C22205) * C1391) +
              C27937 * C50611) *
                 C50909 +
             (C28662 * C1392 -
              ((C22212 + C22211) * C1386 + (C22210 + C22209) * C1391) +
              C28663 * C50611) *
                 C50828) *
                C50887 +
            ((C27934 * C1392 - (C27933 * C1386 + C27932 * C1391) +
              C27935 * C50611) *
                 C50909 +
             ((C18281 + C18280) * C1392 - (C22800 * C1386 + C22799 * C1391) +
              (C18283 + C18282) * C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C50893 +
          (((((C17502 + C17503) * C1392 -
              ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                   C1386 +
               (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                   C1391) +
              (C17504 + C17505) * C50611) *
                 C50909 +
             (C29634 * C1392 -
              ((C22638 + C22637) * C1386 + (C22636 + C22635) * C1391) +
              C29635 * C50611) *
                 C50828) *
                C50887 +
            (((C17507 + C17506) * C1392 -
              ((C17505 + C17504) * C1386 + (C17503 + C17502) * C1391) +
              (C17509 + C17508) * C50611) *
                 C50909 +
             ((C19035 + C19034) * C1392 - (C29636 * C1386 + C29637 * C1391) +
              (C19037 + C19036) * C50611) *
                 C50828) *
                C50633) *
               C1643 +
           ((((C22635 + C22636) * C1391 + (C22637 + C22638) * C1386 -
              C29637 * C1392 - C29636 * C50611) *
                 C50909 +
             ((C22639 + C22640) * C1391 + (C22641 + C22642) * C1386 -
              (C23616 + C23615) * C1392 - (C23618 + C23617) * C50611) *
                 C50828) *
                C50887 +
            ((C29634 * C1391 + C29635 * C1386 - (C19034 + C19035) * C1392 -
              (C19036 + C19037) * C50611) *
                 C50909 +
             ((C23615 + C23616) * C1391 + (C23617 + C23618) * C1386 -
              (C17278 * C3318 + C50800 * C3323 + C17277 * C1081 +
               C17272 * C1087) *
                  C1392 -
              (C17278 * C3324 + C50800 * C3327 + C17277 * C1086 +
               C17272 * C1093) *
                  C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C1391 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C1386 -
             (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
                C50909 +
            ((C22205 + C22206) * C1391 + (C22207 + C22208) * C1386 -
             C27932 * C1392 - C27933 * C50611) *
                C50828) *
               C50887 +
           (((C17313 + C17312) * C1391 + (C17315 + C17314) * C1386 -
             (C17317 + C17316) * C1392 - (C17319 + C17318) * C50611) *
                C50909 +
            (C27936 * C1391 + C27937 * C1386 - C17698 * C1392 -
             C17699 * C50611) *
                C50828) *
               C50633) *
              C50940 +
          (((C27936 * C1392 -
             ((C22208 + C22207) * C1386 + (C22206 + C22205) * C1391) +
             C27937 * C50611) *
                C50909 +
            (C28662 * C1392 -
             ((C22212 + C22211) * C1386 + (C22210 + C22209) * C1391) +
             C28663 * C50611) *
                C50828) *
               C50887 +
           ((C27934 * C1392 - (C27933 * C1386 + C27932 * C1391) +
             C27935 * C50611) *
                C50909 +
            ((C18281 + C18280) * C1392 - (C22800 * C1386 + C22799 * C1391) +
             (C18283 + C18282) * C50611) *
                C50828) *
               C50633) *
              C50929 +
          ((C24111 * C50909 +
            ((C22826 + C22825) * C1391 + (C22824 + C22823) * C1386 -
             (C22822 + C22821) * C1392 - (C22828 + C22827) * C50611) *
                C50828) *
               C50887 +
           ((C28662 * C1391 + C28663 * C1386 - (C18280 + C18281) * C1392 -
             (C18282 + C18283) * C50611) *
                C50909 +
            ((C22821 + C22822) * C1391 + (C22827 + C22828) * C1386 -
             (C17278 * C6979 + C50800 * C6980 + C17277 * C1167 +
              C17272 * C1173) *
                 C1392 -
             (C17278 * C6981 + C50800 * C6982 + C17277 * C1172 +
              C17272 * C1179) *
                 C50611) *
                C50828) *
               C50633) *
              C1875) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C118 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C106 -
            (C17312 + C17313) * C119 - (C17314 + C17315) * C107 +
            C17328 * C120 + C17329 * C108 - C17330 * C121 - C17331 * C109) *
               C50909 +
           ((C22205 + C22206) * C118 + (C22207 + C22208) * C106 -
            (C17687 + C17686) * C119 - (C17689 + C17688) * C107 +
            (C17691 + C17690) * C120 + (C17693 + C17692) * C108 -
            (C17694 + C17695) * C121 - (C17696 + C17697) * C109) *
               C50828) *
              C50887 +
          (((C17313 + C17312) * C118 + (C17315 + C17314) * C106 -
            (C17317 + C17316) * C119 - (C17319 + C17318) * C107 +
            (C17321 + C17320) * C120 + (C17323 + C17322) * C108 -
            (C17324 + C17325) * C121 - (C17326 + C17327) * C109) *
               C50909 +
           ((C17686 + C17687) * C118 + (C17688 + C17689) * C106 -
            C17698 * C119 - C17699 * C107 + (C17695 + C17694) * C120 +
            (C17697 + C17696) * C108 -
            (C17278 * C1523 + C50800 * C1524 + C17277 * C438 + C17272 * C448) *
                C121 -
            (C17278 * C1525 + C50800 * C1526 + C17277 * C449 + C17272 * C456) *
                C109) *
               C50828) *
              C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50878 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
                C50909 +
            ((C22205 + C22206) * C49720 + (C22207 + C22208) * C50878 -
             C27932 * C49713 - C27933 * C50611) *
                C50828) *
               C50887 +
           (((C17313 + C17312) * C49720 + (C17315 + C17314) * C50878 -
             (C17317 + C17316) * C49713 - (C17319 + C17318) * C50611) *
                C50909 +
            (C27936 * C49720 + C27937 * C50878 - C17698 * C49713 -
             C17699 * C50611) *
                C50828) *
               C50633) *
              C50694 * C582 +
          ((((C17502 + C17503) * C49713 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C50878 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C49720) +
             (C17504 + C17505) * C50611) *
                C50909 +
            ((C19031 + C19030) * C49713 -
             ((C22638 + C22637) * C50878 + (C22636 + C22635) * C49720) +
             (C19033 + C19032) * C50611) *
                C50828) *
               C50887 +
           (((C17507 + C17506) * C49713 -
             ((C17505 + C17504) * C50878 + (C17503 + C17502) * C49720) +
             (C17509 + C17508) * C50611) *
                C50909 +
            ((C19035 + C19034) * C49713 -
             ((C19032 + C19033) * C50878 + (C19030 + C19031) * C49720) +
             (C19037 + C19036) * C50611) *
                C50828) *
               C50633) *
              C50694 * C583 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C49720 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C50878 -
             (C17862 + C17863) * C49713 - (C17864 + C17865) * C50611) *
                C50909 +
            ((C22643 + C22644) * C49720 + (C22645 + C22646) * C50878 -
             (C28140 + C28141) * C49713 - (C28142 + C28143) * C50611) *
                C50828) *
               C50887 +
           (((C17863 + C17862) * C49720 + (C17865 + C17864) * C50878 -
             (C17866 + C17867) * C49713 - (C17868 + C17869) * C50611) *
                C50909 +
            ((C28141 + C28140) * C49720 + (C28143 + C28142) * C50878 -
             (C17278 * C4100 + C50800 * C4101 + C17277 * C816 + C17272 * C830) *
                 C49713 -
             (C17278 * C4102 + C50800 * C4103 + C17277 * C829 + C17272 * C840) *
                 C50611) *
                C50828) *
               C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C283 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C278 -
             (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
             C17328 * C285 + C17329 * C280) *
                C50909 +
            ((C22205 + C22206) * C283 + (C22207 + C22208) * C278 -
             (C17687 + C17686) * C284 - (C17689 + C17688) * C279 +
             (C17691 + C17690) * C285 + (C17693 + C17692) * C280) *
                C50828) *
               C50887 +
           (((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
             (C17317 + C17316) * C284 - (C17319 + C17318) * C279 +
             (C17321 + C17320) * C285 + (C17323 + C17322) * C280) *
                C50909 +
            ((C17686 + C17687) * C283 + (C17688 + C17689) * C278 -
             C17698 * C284 - C17699 * C279 + (C17695 + C17694) * C285 +
             (C17697 + C17696) * C280) *
                C50828) *
               C50633) *
              C50694 * C50893 +
          ((((C17502 + C17503) * C284 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C278 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C283) +
             (C17504 + C17505) * C279 - C17514 * C285 - C17515 * C280) *
                C50909 +
            ((C19031 + C19030) * C284 -
             ((C22638 + C22637) * C278 + (C22636 + C22635) * C283) +
             (C19033 + C19032) * C279 - (C19034 + C19035) * C285 -
             (C19036 + C19037) * C280) *
                C50828) *
               C50887 +
           (((C17507 + C17506) * C284 -
             ((C17505 + C17504) * C278 + (C17503 + C17502) * C283) +
             (C17509 + C17508) * C279 - (C17510 + C17511) * C285 -
             (C17512 + C17513) * C280) *
                C50909 +
            ((C19035 + C19034) * C284 -
             ((C19032 + C19033) * C278 + (C19030 + C19031) * C283) +
             (C19037 + C19036) * C279 -
             (C17278 * C815 + C50800 * C828 + C17277 * C814 + C17272 * C825) *
                 C285 -
             (C17278 * C827 + C50800 * C839 + C17277 * C826 + C17272 * C838) *
                 C280) *
                C50828) *
               C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C50909 +
            ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C50828) *
               C50887 +
           (((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50909 +
            (C27936 * C696 + C27937 * C50606) * C50828) *
               C50633) *
              C50694 * C692 -
          ((((C19032 + C19033) * C50606 + (C19030 + C19031) * C696) * C50828 +
            ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50909) *
               C50633 +
           (((C22638 + C22637) * C50606 + (C22636 + C22635) * C696) * C50828 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C50909) *
               C50887) *
              C50694 * C693 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C696 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C50606) *
                C50909 +
            ((C22643 + C22644) * C696 + (C22645 + C22646) * C50606) * C50828) *
               C50887 +
           (((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50909 +
            ((C28141 + C28140) * C696 + (C28143 + C28142) * C50606) * C50828) *
               C50633) *
              C50694 * C694 -
          ((((C17278 * C3162 + C50800 * C3168 + C17277 * C3161 +
              C17272 * C3167) *
                 C50606 +
             (C17278 * C3156 + C50800 * C3163 + C17277 * C3155 +
              C17272 * C3160) *
                 C696) *
                C50828 +
            ((C17278 * C2878 + C50800 * C2882 + C17277 * C705 + C17272 * C711) *
                 C50606 +
             (C17278 * C2873 + C50800 * C2877 + C17277 * C699 + C17272 * C706) *
                 C696) *
                C50909) *
               C50633 +
           (((C17278 * C3164 + C50800 * C3169 + C17277 * C3159 +
              C17272 * C3166) *
                 C50606 +
             (C17278 * C3157 + C50800 * C3165 + C17277 * C3154 +
              C17272 * C3158) *
                 C696) *
                C50828 +
            ((C17278 * C2876 + C50800 * C2881 + C17277 * C707 + C17272 * C712) *
                 C50606 +
             (C17278 * C2872 + C50800 * C2875 + C17277 * C700 + C17272 * C708) *
                 C696) *
                C50909) *
               C50887) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C283 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C278 -
             (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
             C17328 * C285 + C17329 * C280) *
                C50909 +
            ((C22205 + C22206) * C283 + (C22207 + C22208) * C278 -
             C27932 * C284 - C27933 * C279 + C27934 * C285 + C27935 * C280) *
                C50828) *
               C50887 +
           (((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
             (C17317 + C17316) * C284 - (C17319 + C17318) * C279 +
             (C17321 + C17320) * C285 + (C17323 + C17322) * C280) *
                C50909 +
            (C27936 * C283 + C27937 * C278 - C17698 * C284 - C17699 * C279 +
             (C17695 + C17694) * C285 + (C17697 + C17696) * C280) *
                C50828) *
               C50633) *
              C50894 +
          (((C27936 * C284 -
             ((C22208 + C22207) * C278 + (C22206 + C22205) * C283) +
             C27937 * C279 - C17698 * C285 - C17699 * C280) *
                C50909 +
            ((C18277 + C18276) * C284 -
             ((C22212 + C22211) * C278 + (C22210 + C22209) * C283) +
             (C18279 + C18278) * C279 - (C18280 + C18281) * C285 -
             (C18282 + C18283) * C280) *
                C50828) *
               C50887 +
           ((C27934 * C284 - (C27933 * C278 + C27932 * C283) + C27935 * C279 -
             (C17694 + C17695) * C285 - (C17696 + C17697) * C280) *
                C50909 +
            ((C18281 + C18280) * C284 - (C22800 * C278 + C22799 * C283) +
             (C18283 + C18282) * C279 -
             (C17278 * C1080 + C50800 * C1085 + C17277 * C947 + C17272 * C955) *
                 C285 -
             (C17278 * C1084 + C50800 * C1092 + C17277 * C956 + C17272 * C962) *
                 C280) *
                C50828) *
               C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                  C696 +
              (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                  C50606) *
                 C50909 +
             ((C22205 + C22206) * C696 + (C22207 + C22208) * C50606) * C50828) *
                C50887 +
            (((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50909 +
             (C27936 * C696 + C27937 * C50606) * C50828) *
                C50633) *
               C50894 -
           (((C22800 * C50606 + C22799 * C696) * C50828 +
             (C27933 * C50606 + C27932 * C696) * C50909) *
                C50633 +
            (((C22212 + C22211) * C50606 + (C22210 + C22209) * C696) * C50828 +
             ((C22208 + C22207) * C50606 + (C22206 + C22205) * C696) * C50909) *
                C50887) *
               C50706) *
              C582 +
          (((((C22635 + C22636) * C696 + (C22637 + C22638) * C50606) * C50909 +
             ((C22639 + C22640) * C696 + (C22641 + C22642) * C50606) * C50828) *
                C50887 +
            (((C19031 + C19030) * C696 + (C19033 + C19032) * C50606) * C50909 +
             ((C23615 + C23616) * C696 + (C23617 + C23618) * C50606) * C50828) *
                C50633) *
               C50706 -
           ((((C19032 + C19033) * C50606 + (C19030 + C19031) * C696) * C50828 +
             ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50909) *
                C50633 +
            (((C22638 + C22637) * C50606 + (C22636 + C22635) * C696) * C50828 +
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C50606 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C696) *
                 C50909) *
                C50887) *
               C50894) *
              C583 +
          (((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                  C696 +
              (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                  C50606) *
                 C50909 +
             ((C22643 + C22644) * C696 + (C22645 + C22646) * C50606) * C50828) *
                C50887 +
            (((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50909 +
             ((C28141 + C28140) * C696 + (C28143 + C28142) * C50606) * C50828) *
                C50633) *
               C50894 -
           ((((C17278 * C3494 + C50800 * C3498 + C17277 * C3322 +
               C17272 * C3326) *
                  C50606 +
              (C17278 * C3492 + C50800 * C3495 + C17277 * C3317 +
               C17272 * C3321) *
                  C696) *
                 C50828 +
             ((C28142 + C28143) * C50606 + (C28140 + C28141) * C696) * C50909) *
                C50633 +
            (((C22650 + C22649) * C50606 + (C22648 + C22647) * C696) * C50828 +
             ((C22646 + C22645) * C50606 + (C22644 + C22643) * C696) * C50909) *
                C50887) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C1285 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50936 -
            (C17312 + C17313) * C1286 - (C17314 + C17315) * C50920 +
            C17328 * C1287 + C17329 * C1282) *
               C50764 * C17274 +
           ((C17313 + C17312) * C1285 + (C17315 + C17314) * C50936 -
            (C17317 + C17316) * C1286 - (C17319 + C17318) * C50920 +
            (C17321 + C17320) * C1287 + (C17323 + C17322) * C1282) *
               C50764 * C17275 +
           (C17328 * C1285 + C17329 * C50936 - C17330 * C1286 -
            C17331 * C50920 + (C17325 + C17324) * C1287 +
            (C17327 + C17326) * C1282) *
               C50764 * C17276) *
              C50694 * C1283 +
          (((C17502 + C17503) * C1286 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50936 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C1285) +
            (C17504 + C17505) * C50920 - C17514 * C1287 - C17515 * C1282) *
               C50764 * C17274 +
           ((C17507 + C17506) * C1286 -
            ((C17505 + C17504) * C50936 + (C17503 + C17502) * C1285) +
            (C17509 + C17508) * C50920 - (C17510 + C17511) * C1287 -
            (C17512 + C17513) * C1282) *
               C50764 * C17275 +
           ((C17511 + C17510) * C1286 - (C17515 * C50936 + C17514 * C1285) +
            (C17513 + C17512) * C50920 -
            (C17278 * C591 + C50800 * C600 + C17277 * C290 + C17272 * C300) *
                C1287 -
            (C17278 * C601 + C50800 * C606 + C17277 * C301 + C17272 * C308) *
                C1282) *
               C50764 * C17276) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C1285 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50936 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C1286 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50920 +
           (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
            C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
               C1287 +
           (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
            C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
               C1282) *
              C50764 * C50628 * C50694 * C1283 +
          ((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
            C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
               C1286 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50936 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C1285) +
           (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
            C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
               C50920 -
           (C20083 * C2874 + C20078 * C2879 + C20082 * C698 + C20077 * C704 +
            C20081 * C589 + C20076 * C596 + C20080 * C288 + C20075 * C296) *
               C1287 -
           (C20083 * C2880 + C20078 * C2883 + C20082 * C703 + C20077 * C710 +
            C20081 * C597 + C20076 * C604 + C20080 * C297 + C20075 * C306) *
               C1282) *
              C50764 * C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C1391 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C1386 -
            (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
               C50764 * C17274 +
           ((C17313 + C17312) * C1391 + (C17315 + C17314) * C1386 -
            (C17317 + C17316) * C1392 - (C17319 + C17318) * C50611) *
               C50764 * C17275 +
           (C17328 * C1391 + C17329 * C1386 - C17330 * C1392 -
            C17331 * C50611) *
               C50764 * C17276) *
              C50694 * C50939 +
          (((C17502 + C17503) * C1392 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C1386 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C1391) +
            (C17504 + C17505) * C50611) *
               C50764 * C17274 +
           ((C17507 + C17506) * C1392 -
            ((C17505 + C17504) * C1386 + (C17503 + C17502) * C1391) +
            (C17509 + C17508) * C50611) *
               C50764 * C17275 +
           ((C17511 + C17510) * C1392 - (C17515 * C1386 + C17514 * C1391) +
            (C17513 + C17512) * C50611) *
               C50764 * C17276) *
              C50694 * C50926 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C1391 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C1386 -
            (C17862 + C17863) * C1392 - (C17864 + C17865) * C50611) *
               C50764 * C17274 +
           ((C17863 + C17862) * C1391 + (C17865 + C17864) * C1386 -
            (C17866 + C17867) * C1392 - (C17868 + C17869) * C50611) *
               C50764 * C17275 +
           ((C17867 + C17866) * C1391 + (C17869 + C17868) * C1386 -
            (C17278 * C697 + C50800 * C702 + C17277 * C590 + C17272 * C598) *
                C1392 -
            (C17278 * C701 + C50800 * C709 + C17277 * C599 + C17272 * C605) *
                C50611) *
               C50764 * C17276) *
              C50694 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C1391 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C1386 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C1392 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50611) *
              C50764 * C50628 * C50694 * C50939 +
          ((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
            C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
               C1392 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C1386 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C1391) +
           (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
            C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
               C50611) *
              C50764 * C50628 * C50694 * C50926 +
          ((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
            C20082 * C2872 + C20077 * C2875 + C20083 * C3001 + C20078 * C3005) *
               C1391 +
           (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
            C20082 * C2876 + C20077 * C2881 + C20083 * C3004 + C20078 * C3007) *
               C1386 -
           (C20083 * C3000 + C20078 * C3003 + C20082 * C2873 + C20077 * C2877 +
            C20081 * C699 + C20076 * C706 + C20080 * C588 + C20075 * C594) *
               C1392 -
           (C20083 * C3002 + C20078 * C3006 + C20082 * C2878 + C20077 * C2882 +
            C20081 * C705 + C20076 * C711 + C20080 * C595 + C20075 * C603) *
               C50611) *
              C50764 * C50628 * C50694 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C1391 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C1386 -
             (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
                C50764 * C17274 +
            ((C17313 + C17312) * C1391 + (C17315 + C17314) * C1386 -
             (C17317 + C17316) * C1392 - (C17319 + C17318) * C50611) *
                C50764 * C17275 +
            (C17328 * C1391 + C17329 * C1386 - C17330 * C1392 -
             C17331 * C50611) *
                C50764 * C17276) *
               C50894 +
           (((C17686 + C17687) * C1392 -
             ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                  C1386 +
              (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                  C1391) +
             (C17688 + C17689) * C50611) *
                C50764 * C17274 +
            ((C17691 + C17690) * C1392 -
             ((C17689 + C17688) * C1386 + (C17687 + C17686) * C1391) +
             (C17693 + C17692) * C50611) *
                C50764 * C17275 +
            ((C17695 + C17694) * C1392 - (C17699 * C1386 + C17698 * C1391) +
             (C17697 + C17696) * C50611) *
                C50764 * C17276) *
               C50706) *
              C1283 +
          ((((C17502 + C17503) * C1392 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C1386 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C1391) +
             (C17504 + C17505) * C50611) *
                C50764 * C17274 +
            ((C17507 + C17506) * C1392 -
             ((C17505 + C17504) * C1386 + (C17503 + C17502) * C1391) +
             (C17509 + C17508) * C50611) *
                C50764 * C17275 +
            ((C17511 + C17510) * C1392 - (C17515 * C1386 + C17514 * C1391) +
             (C17513 + C17512) * C50611) *
                C50764 * C17276) *
               C50894 +
           (((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C1391 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C1386 -
             (C19030 + C19031) * C1392 - (C19032 + C19033) * C50611) *
                C50764 * C17274 +
            ((C19031 + C19030) * C1391 + (C19033 + C19032) * C1386 -
             (C19034 + C19035) * C1392 - (C19036 + C19037) * C50611) *
                C50764 * C17275 +
            ((C19035 + C19034) * C1391 + (C19037 + C19036) * C1386 -
             (C17278 * C815 + C50800 * C828 + C17277 * C814 + C17272 * C825) *
                 C1392 -
             (C17278 * C827 + C50800 * C839 + C17277 * C826 + C17272 * C838) *
                 C50611) *
                C50764 * C17276) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C1391 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C1386 -
            (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
             C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
                C1392 -
            (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
             C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
                C50611) *
               C50764 * C50628 * C50894 +
           ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
             C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
                C1392 -
            ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
              C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                 C1386 +
             (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
              C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                 C1391) +
            (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
             C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
                C50611) *
               C50764 * C50628 * C50706) *
              C1283 +
          (((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
             C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
                C1392 -
            ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
              C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                 C1386 +
             (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
              C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                 C1391) +
            (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
             C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
                C50611) *
               C50764 * C50628 * C50894 +
           ((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C1391 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C1386 -
            (C20083 * C3156 + C20078 * C3163 + C20082 * C3155 + C20077 * C3160 +
             C20081 * C817 + C20076 * C832 + C20080 * C812 + C20075 * C821) *
                C1392 -
            (C20083 * C3162 + C20078 * C3168 + C20082 * C3161 + C20077 * C3167 +
             C20081 * C831 + C20076 * C841 + C20080 * C822 + C20075 * C836) *
                C50611) *
               C50764 * C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50878 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
                C50764 * C17274 +
            ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50878 -
             (C17317 + C17316) * C49713 - (C17319 + C17318) * C50611) *
                C50764 * C17275 +
            (C17328 * C49720 + C17329 * C50878 - C17330 * C49713 -
             C17331 * C50611) *
                C50764 * C17276) *
               C1643 +
           (((C17686 + C17687) * C49713 -
             ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                  C50878 +
              (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                  C49720) +
             (C17688 + C17689) * C50611) *
                C50764 * C17274 +
            ((C17691 + C17690) * C49713 -
             ((C17689 + C17688) * C50878 + (C17687 + C17686) * C49720) +
             (C17693 + C17692) * C50611) *
                C50764 * C17275 +
            ((C17695 + C17694) * C49713 - (C17699 * C50878 + C17698 * C49720) +
             (C17697 + C17696) * C50611) *
                C50764 * C17276) *
               C50706) *
              C1283 +
          ((((C17502 + C17503) * C49713 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C50878 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C49720) +
             (C17504 + C17505) * C50611) *
                C50764 * C17274 +
            ((C17507 + C17506) * C49713 -
             ((C17505 + C17504) * C50878 + (C17503 + C17502) * C49720) +
             (C17509 + C17508) * C50611) *
                C50764 * C17275 +
            ((C17511 + C17510) * C49713 - (C17515 * C50878 + C17514 * C49720) +
             (C17513 + C17512) * C50611) *
                C50764 * C17276) *
               C1643 +
           (((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C49720 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C50878 -
             (C19030 + C19031) * C49713 - (C19032 + C19033) * C50611) *
                C50764 * C17274 +
            ((C19031 + C19030) * C49720 + (C19033 + C19032) * C50878 -
             (C19034 + C19035) * C49713 - (C19036 + C19037) * C50611) *
                C50764 * C17275 +
            ((C19035 + C19034) * C49720 + (C19037 + C19036) * C50878 -
             (C17278 * C815 + C50800 * C828 + C17277 * C814 + C17272 * C825) *
                 C49713 -
             (C17278 * C827 + C50800 * C839 + C17277 * C826 + C17272 * C838) *
                 C50611) *
                C50764 * C17276) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C49720 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C50878 -
            (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
             C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
                C49713 -
            (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
             C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
                C50611) *
               C50764 * C50628 * C1643 +
           ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
             C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
                C49713 -
            ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
              C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                 C50878 +
             (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
              C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                 C49720) +
            (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
             C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
                C50611) *
               C50764 * C50628 * C50706) *
              C1283 +
          (((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
             C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
                C49713 -
            ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
              C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                 C50878 +
             (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
              C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                 C49720) +
            (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
             C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
                C50611) *
               C50764 * C50628 * C1643 +
           ((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C49720 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C50878 -
            (C20083 * C3156 + C20078 * C3163 + C20082 * C3155 + C20077 * C3160 +
             C20081 * C817 + C20076 * C832 + C20080 * C812 + C20075 * C821) *
                C49713 -
            (C20083 * C3162 + C20078 * C3168 + C20082 * C3161 + C20077 * C3167 +
             C20081 * C831 + C20076 * C841 + C20080 * C822 + C20075 * C836) *
                C50611) *
               C50764 * C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C17274 +
            ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
                C17275 +
            (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
               C1643 -
           ((C17699 * C50606 + C17698 * C696) * C50764 * C17276 +
            ((C17689 + C17688) * C50606 + (C17687 + C17686) * C696) * C50764 *
                C17275 +
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50606 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C696) *
                C50764 * C17274) *
               C50706) *
              C50939 +
          ((((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C696 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C17274 +
            ((C19031 + C19030) * C696 + (C19033 + C19032) * C50606) * C50764 *
                C17275 +
            ((C19035 + C19034) * C696 + (C19037 + C19036) * C50606) * C50764 *
                C17276) *
               C50706 -
           ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
            ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50764 *
                C17275 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C50764 * C17274) *
               C1643) *
              C50926 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C696 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C50606) *
                C50764 * C17274 +
            ((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50764 *
                C17275 +
            ((C17867 + C17866) * C696 + (C17869 + C17868) * C50606) * C50764 *
                C17276) *
               C1643 -
           (((C17278 * C4102 + C50800 * C4103 + C17277 * C829 + C17272 * C840) *
                 C50606 +
             (C17278 * C4100 + C50800 * C4101 + C17277 * C816 + C17272 * C830) *
                 C696) *
                C50764 * C17276 +
            ((C17278 * C3161 + C50800 * C3167 + C17277 * C831 + C17272 * C841) *
                 C50606 +
             (C17278 * C3155 + C50800 * C3160 + C17277 * C817 + C17272 * C832) *
                 C696) *
                C50764 * C17275 +
            ((C17278 * C3159 + C50800 * C3166 + C17277 * C833 + C17272 * C842) *
                 C50606 +
             (C17278 * C3154 + C50800 * C3158 + C17277 * C818 + C17272 * C834) *
                 C696) *
                C50764 * C17274) *
               C50706) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C696 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C50606) *
               C50764 * C50628 * C1643 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50606 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C696) *
               C50764 * C50628 * C50706) *
              C50939 +
          (((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C696 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C50606) *
               C50764 * C50628 * C50706 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50606 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C696) *
               C50764 * C50628 * C1643) *
              C50926 +
          (((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
             C20082 * C2872 + C20077 * C2875 + C20083 * C3001 +
             C20078 * C3005) *
                C696 +
            (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
             C20082 * C2876 + C20077 * C2881 + C20083 * C3004 +
             C20078 * C3007) *
                C50606) *
               C50764 * C50628 * C1643 -
           ((C20083 * C20547 + C20078 * C20549 + C20082 * C3164 +
             C20077 * C3169 + C20081 * C3159 + C20076 * C3166 + C20080 * C833 +
             C20075 * C842) *
                C50606 +
            (C20083 * C20546 + C20078 * C20548 + C20082 * C3157 +
             C20077 * C3165 + C20081 * C3154 + C20076 * C3158 + C20080 * C818 +
             C20075 * C834) *
                C696) *
               C50764 * C50628 * C50706) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C17274 +
            ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
                C17275 +
            (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
               C50940 -
           ((C17699 * C50606 + C17698 * C696) * C50764 * C17276 +
            ((C17689 + C17688) * C50606 + (C17687 + C17686) * C696) * C50764 *
                C17275 +
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50606 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C696) *
                C50764 * C17274) *
               C50929 +
           (((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
                 C696 +
             (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
                 C50606) *
                C50764 * C17274 +
            ((C18277 + C18276) * C696 + (C18279 + C18278) * C50606) * C50764 *
                C17275 +
            ((C18281 + C18280) * C696 + (C18283 + C18282) * C50606) * C50764 *
                C17276) *
               C1875) *
              C1283 +
          ((((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C696 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C17274 +
            ((C19031 + C19030) * C696 + (C19033 + C19032) * C50606) * C50764 *
                C17275 +
            ((C19035 + C19034) * C696 + (C19037 + C19036) * C50606) * C50764 *
                C17276) *
               C50929 -
           ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
            ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50764 *
                C17275 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C50764 * C17274) *
               C50940 -
           (((C17278 * C3324 + C50800 * C3327 + C17277 * C1086 +
              C17272 * C1093) *
                 C50606 +
             (C17278 * C3318 + C50800 * C3323 + C17277 * C1081 +
              C17272 * C1087) *
                 C696) *
                C50764 * C17276 +
            ((C17278 * C3322 + C50800 * C3326 + C17277 * C1088 +
              C17272 * C1094) *
                 C50606 +
             (C17278 * C3317 + C50800 * C3321 + C17277 * C1082 +
              C17272 * C1089) *
                 C696) *
                C50764 * C17275 +
            ((C17278 * C3320 + C50800 * C3325 + C17277 * C1090 +
              C17272 * C1095) *
                 C50606 +
             (C17278 * C3316 + C50800 * C3319 + C17277 * C1083 +
              C17272 * C1091) *
                 C696) *
                C50764 * C17274) *
               C1875) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C696 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C50606) *
               C50764 * C50628 * C50940 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50606 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C696) *
               C50764 * C50628 * C50929 +
           ((C20080 * C944 + C20075 * C949 + C20081 * C1083 + C20076 * C1091 +
             C20082 * C3316 + C20077 * C3319 + C20083 * C3493 +
             C20078 * C3497) *
                C696 +
            (C20080 * C950 + C20075 * C959 + C20081 * C1090 + C20076 * C1095 +
             C20082 * C3320 + C20077 * C3325 + C20083 * C3496 +
             C20078 * C3499) *
                C50606) *
               C50764 * C50628 * C1875) *
              C1283 +
          (((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C696 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C50606) *
               C50764 * C50628 * C50929 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50606 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C696) *
               C50764 * C50628 * C50940 -
           ((C20083 * C20747 + C20078 * C20749 + C20082 * C3496 +
             C20077 * C3499 + C20081 * C3320 + C20076 * C3325 + C20080 * C1090 +
             C20075 * C1095) *
                C50606 +
            (C20083 * C20746 + C20078 * C20748 + C20082 * C3493 +
             C20077 * C3497 + C20081 * C3316 + C20076 * C3319 + C20080 * C1083 +
             C20075 * C1091) *
                C696) *
               C50764 * C50628 * C1875) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50878 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
               C50764 * C17274 +
           ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50878 -
            (C17317 + C17316) * C49713 - (C17319 + C17318) * C50611) *
               C50764 * C17275 +
           (C17328 * C49720 + C17329 * C50878 - C17330 * C49713 -
            C17331 * C50611) *
               C50764 * C17276) *
              C50694 * C582 +
          (((C17502 + C17503) * C49713 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50878 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C49720) +
            (C17504 + C17505) * C50611) *
               C50764 * C17274 +
           ((C17507 + C17506) * C49713 -
            ((C17505 + C17504) * C50878 + (C17503 + C17502) * C49720) +
            (C17509 + C17508) * C50611) *
               C50764 * C17275 +
           ((C17511 + C17510) * C49713 - (C17515 * C50878 + C17514 * C49720) +
            (C17513 + C17512) * C50611) *
               C50764 * C17276) *
              C50694 * C583 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C49720 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C50878 -
            (C17862 + C17863) * C49713 - (C17864 + C17865) * C50611) *
               C50764 * C17274 +
           ((C17863 + C17862) * C49720 + (C17865 + C17864) * C50878 -
            (C17866 + C17867) * C49713 - (C17868 + C17869) * C50611) *
               C50764 * C17275 +
           ((C17867 + C17866) * C49720 + (C17869 + C17868) * C50878 -
            (C17278 * C697 + C50800 * C702 + C17277 * C590 + C17272 * C598) *
                C49713 -
            (C17278 * C701 + C50800 * C709 + C17277 * C599 + C17272 * C605) *
                C50611) *
               C50764 * C17276) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
               C118 +
           (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
               C106 -
           (C17312 + C17313) * C119 - (C17314 + C17315) * C107 + C17328 * C120 +
           C17329 * C108 - C17330 * C121 - C17331 * C109) *
              C50764 * C17274 +
          ((C17313 + C17312) * C118 + (C17315 + C17314) * C106 -
           (C17317 + C17316) * C119 - (C17319 + C17318) * C107 +
           (C17321 + C17320) * C120 + (C17323 + C17322) * C108 -
           (C17324 + C17325) * C121 - (C17326 + C17327) * C109) *
              C50764 * C17275 +
          (C17328 * C118 + C17329 * C106 - C17330 * C119 - C17331 * C107 +
           (C17325 + C17324) * C120 + (C17327 + C17326) * C108 -
           (C17278 * C291 + C50800 * C302 + C17277 * C127 + C17272 * C139) *
               C121 -
           (C17278 * C303 + C50800 * C309 + C17277 * C140 + C17272 * C148) *
               C109) *
              C50764 * C17276) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50878 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
               C50764 * C17274 +
           ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50878 -
            (C17317 + C17316) * C49713 - (C17319 + C17318) * C50611) *
               C50764 * C17275 +
           (C17328 * C49720 + C17329 * C50878 - C17330 * C49713 -
            C17331 * C50611) *
               C50764 * C17276) *
              C941 +
          (((C17686 + C17687) * C49713 -
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50878 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C49720) +
            (C17688 + C17689) * C50611) *
               C50764 * C17274 +
           ((C17691 + C17690) * C49713 -
            ((C17689 + C17688) * C50878 + (C17687 + C17686) * C49720) +
            (C17693 + C17692) * C50611) *
               C50764 * C17275 +
           ((C17695 + C17694) * C49713 - (C17699 * C50878 + C17698 * C49720) +
            (C17697 + C17696) * C50611) *
               C50764 * C17276) *
              C942 +
          (((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
                C49720 +
            (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
                C50878 -
            (C18276 + C18277) * C49713 - (C18278 + C18279) * C50611) *
               C50764 * C17274 +
           ((C18277 + C18276) * C49720 + (C18279 + C18278) * C50878 -
            (C18280 + C18281) * C49713 - (C18282 + C18283) * C50611) *
               C50764 * C17275 +
           ((C18281 + C18280) * C49720 + (C18283 + C18282) * C50878 -
            (C17278 * C1080 + C50800 * C1085 + C17277 * C947 + C17272 * C955) *
                C49713 -
            (C17278 * C1084 + C50800 * C1092 + C17277 * C956 + C17272 * C962) *
                C50611) *
               C50764 * C17276) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
           C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
              C118 +
          (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
           C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
              C106 -
          (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
           C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
              C119 -
          (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
           C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
              C107 +
          (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
           C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
              C120 +
          (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
           C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
              C108 -
          (C20083 * C697 + C20078 * C702 + C20082 * C590 + C20077 * C598 +
           C20081 * C289 + C20076 * C298 + C20080 * C125 + C20075 * C135) *
              C121 -
          (C20083 * C701 + C20078 * C709 + C20082 * C599 + C20077 * C605 +
           C20081 * C299 + C20076 * C307 + C20080 * C136 + C20075 * C146) *
              C109) *
         C50764 * C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C49720 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50878 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C49713 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50611) *
              C50764 * C50628 * C50694 * C582 +
          ((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
            C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
               C49713 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50878 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C49720) +
           (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
            C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
               C50611) *
              C50764 * C50628 * C50694 * C583 +
          ((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
            C20082 * C2872 + C20077 * C2875 + C20083 * C3001 + C20078 * C3005) *
               C49720 +
           (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
            C20082 * C2876 + C20077 * C2881 + C20083 * C3004 + C20078 * C3007) *
               C50878 -
           (C20083 * C3000 + C20078 * C3003 + C20082 * C2873 + C20077 * C2877 +
            C20081 * C699 + C20076 * C706 + C20080 * C588 + C20075 * C594) *
               C49713 -
           (C20083 * C3002 + C20078 * C3006 + C20082 * C2878 + C20077 * C2882 +
            C20081 * C705 + C20076 * C711 + C20080 * C595 + C20075 * C603) *
               C50611) *
              C50764 * C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C49720 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50878 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C49713 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50611) *
              C50764 * C50628 * C941 +
          ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
            C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
               C49713 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50878 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C49720) +
           (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
            C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
               C50611) *
              C50764 * C50628 * C942 +
          ((C20080 * C944 + C20075 * C949 + C20081 * C1083 + C20076 * C1091 +
            C20082 * C3316 + C20077 * C3319 + C20083 * C3493 + C20078 * C3497) *
               C49720 +
           (C20080 * C950 + C20075 * C959 + C20081 * C1090 + C20076 * C1095 +
            C20082 * C3320 + C20077 * C3325 + C20083 * C3496 + C20078 * C3499) *
               C50878 -
           (C20083 * C3492 + C20078 * C3495 + C20082 * C3317 + C20077 * C3321 +
            C20081 * C1082 + C20076 * C1089 + C20080 * C945 + C20075 * C951) *
               C49713 -
           (C20083 * C3494 + C20078 * C3498 + C20082 * C3322 + C20077 * C3326 +
            C20081 * C1088 + C20076 * C1094 + C20080 * C952 + C20075 * C960) *
               C50611) *
              C50764 * C50628 * C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C696 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50606) *
               C50764 * C17274 +
           ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
               C17275 +
           (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
              C50694 * C692 -
          ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
           ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50764 *
               C17275 +
           ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                C50606 +
            (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                C696) *
               C50764 * C17274) *
              C50694 * C693 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C696 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C50606) *
               C50764 * C17274 +
           ((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50764 *
               C17275 +
           ((C17867 + C17866) * C696 + (C17869 + C17868) * C50606) * C50764 *
               C17276) *
              C50694 * C694 -
          (((C17278 * C2880 + C50800 * C2883 + C17277 * C703 + C17272 * C710) *
                C50606 +
            (C17278 * C2874 + C50800 * C2879 + C17277 * C698 + C17272 * C704) *
                C696) *
               C50764 * C17276 +
           ((C17278 * C2878 + C50800 * C2882 + C17277 * C705 + C17272 * C711) *
                C50606 +
            (C17278 * C2873 + C50800 * C2877 + C17277 * C699 + C17272 * C706) *
                C696) *
               C50764 * C17275 +
           ((C17278 * C2876 + C50800 * C2881 + C17277 * C707 + C17272 * C712) *
                C50606 +
            (C17278 * C2872 + C50800 * C2875 + C17277 * C700 + C17272 * C708) *
                C696) *
               C50764 * C17274) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
            C17328 * C285 + C17329 * C280) *
               C50764 * C17274 +
           ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
            (C17317 + C17316) * C284 - (C17319 + C17318) * C279 +
            (C17321 + C17320) * C285 + (C17323 + C17322) * C280) *
               C50764 * C17275 +
           (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C279 +
            (C17325 + C17324) * C285 + (C17327 + C17326) * C280) *
               C50764 * C17276) *
              C50694 * C50893 +
          (((C17502 + C17503) * C284 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C278 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C283) +
            (C17504 + C17505) * C279 - C17514 * C285 - C17515 * C280) *
               C50764 * C17274 +
           ((C17507 + C17506) * C284 -
            ((C17505 + C17504) * C278 + (C17503 + C17502) * C283) +
            (C17509 + C17508) * C279 - (C17510 + C17511) * C285 -
            (C17512 + C17513) * C280) *
               C50764 * C17275 +
           ((C17511 + C17510) * C284 - (C17515 * C278 + C17514 * C283) +
            (C17513 + C17512) * C279 -
            (C17278 * C591 + C50800 * C600 + C17277 * C290 + C17272 * C300) *
                C285 -
            (C17278 * C601 + C50800 * C606 + C17277 * C301 + C17272 * C308) *
                C280) *
               C50764 * C17276) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C17274 +
            ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
                C17275 +
            (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
               C941 -
           ((C17699 * C50606 + C17698 * C696) * C50764 * C17276 +
            ((C17689 + C17688) * C50606 + (C17687 + C17686) * C696) * C50764 *
                C17275 +
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50606 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C696) *
                C50764 * C17274) *
               C942 +
           (((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
                 C696 +
             (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
                 C50606) *
                C50764 * C17274 +
            ((C18277 + C18276) * C696 + (C18279 + C18278) * C50606) * C50764 *
                C17275 +
            ((C18281 + C18280) * C696 + (C18283 + C18282) * C50606) * C50764 *
                C17276) *
               C943) *
              C50893 +
          ((((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C696 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C17274 +
            ((C17277 * C812 + C17272 * C821 + C17278 * C817 + C50800 * C832) *
                 C696 +
             (C17277 * C822 + C17272 * C836 + C17278 * C831 + C50800 * C841) *
                 C50606) *
                C50764 * C17275 +
            ((C17277 * C813 + C17272 * C823 + C17278 * C816 + C50800 * C830) *
                 C696 +
             (C17277 * C824 + C17272 * C837 + C17278 * C829 + C50800 * C840) *
                 C50606) *
                C50764 * C17276) *
               C942 -
           ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
            ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50764 *
                C17275 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C50764 * C17274) *
               C941 -
           (((C17278 * C3324 + C50800 * C3327 + C17277 * C1086 +
              C17272 * C1093) *
                 C50606 +
             (C17278 * C3318 + C50800 * C3323 + C17277 * C1081 +
              C17272 * C1087) *
                 C696) *
                C50764 * C17276 +
            ((C17278 * C3322 + C50800 * C3326 + C17277 * C1088 +
              C17272 * C1094) *
                 C50606 +
             (C17278 * C3317 + C50800 * C3321 + C17277 * C1082 +
              C17272 * C1089) *
                 C696) *
                C50764 * C17275 +
            ((C17278 * C3320 + C50800 * C3325 + C17277 * C1090 +
              C17272 * C1095) *
                 C50606 +
             (C17278 * C3316 + C50800 * C3319 + C17277 * C1083 +
              C17272 * C1091) *
                 C696) *
                C50764 * C17274) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C278 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C279 +
           (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
            C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
               C285 +
           (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
            C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
               C280) *
              C50764 * C50628 * C50694 * C50893 +
          ((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
            C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
               C284 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C278 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C283) +
           (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
            C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
               C279 -
           (C20083 * C2874 + C20078 * C2879 + C20082 * C698 + C20077 * C704 +
            C20081 * C589 + C20076 * C596 + C20080 * C288 + C20075 * C296) *
               C285 -
           (C20083 * C2880 + C20078 * C2883 + C20082 * C703 + C20077 * C710 +
            C20081 * C597 + C20076 * C604 + C20080 * C297 + C20075 * C306) *
               C280) *
              C50764 * C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C696 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50606) *
              C50764 * C50628 * C50694 * C692 -
          ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
            C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
               C50606 +
           (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
            C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
               C696) *
              C50764 * C50628 * C50694 * C693 +
          ((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
            C20082 * C2872 + C20077 * C2875 + C20083 * C3001 + C20078 * C3005) *
               C696 +
           (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
            C20082 * C2876 + C20077 * C2881 + C20083 * C3004 + C20078 * C3007) *
               C50606) *
              C50764 * C50628 * C50694 * C694 -
          ((C20083 * C20445 + C20078 * C20447 + C20082 * C3004 +
            C20077 * C3007 + C20081 * C2876 + C20076 * C2881 + C20080 * C707 +
            C20075 * C712) *
               C50606 +
           (C20083 * C20444 + C20078 * C20446 + C20082 * C3001 +
            C20077 * C3005 + C20081 * C2872 + C20076 * C2875 + C20080 * C700 +
            C20075 * C708) *
               C696) *
              C50764 * C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C696 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C50606) *
               C50764 * C50628 * C941 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50606 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C696) *
               C50764 * C50628 * C942 +
           ((C20080 * C944 + C20075 * C949 + C20081 * C1083 + C20076 * C1091 +
             C20082 * C3316 + C20077 * C3319 + C20083 * C3493 +
             C20078 * C3497) *
                C696 +
            (C20080 * C950 + C20075 * C959 + C20081 * C1090 + C20076 * C1095 +
             C20082 * C3320 + C20077 * C3325 + C20083 * C3496 +
             C20078 * C3499) *
                C50606) *
               C50764 * C50628 * C943) *
              C50893 +
          (((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C696 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C50606) *
               C50764 * C50628 * C942 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50606 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C696) *
               C50764 * C50628 * C941 -
           ((C20083 * C20747 + C20078 * C20749 + C20082 * C3496 +
             C20077 * C3499 + C20081 * C3320 + C20076 * C3325 + C20080 * C1090 +
             C20075 * C1095) *
                C50606 +
            (C20083 * C20746 + C20078 * C20748 + C20082 * C3493 +
             C20077 * C3497 + C20081 * C3316 + C20076 * C3319 + C20080 * C1083 +
             C20075 * C1091) *
                C696) *
               C50764 * C50628 * C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C17274 +
            ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
                C17275 +
            (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
               C50894 -
           ((C17699 * C50606 + C17698 * C696) * C50764 * C17276 +
            ((C17689 + C17688) * C50606 + (C17687 + C17686) * C696) * C50764 *
                C17275 +
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50606 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C696) *
                C50764 * C17274) *
               C50706) *
              C582 +
          ((((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C696 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C17274 +
            ((C17277 * C812 + C17272 * C821 + C17278 * C817 + C50800 * C832) *
                 C696 +
             (C17277 * C822 + C17272 * C836 + C17278 * C831 + C50800 * C841) *
                 C50606) *
                C50764 * C17275 +
            ((C17277 * C813 + C17272 * C823 + C17278 * C816 + C50800 * C830) *
                 C696 +
             (C17277 * C824 + C17272 * C837 + C17278 * C829 + C50800 * C840) *
                 C50606) *
                C50764 * C17276) *
               C50706 -
           ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
            ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50764 *
                C17275 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C50764 * C17274) *
               C50894) *
              C583 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C696 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C50606) *
                C50764 * C17274 +
            ((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50764 *
                C17275 +
            ((C17867 + C17866) * C696 + (C17869 + C17868) * C50606) * C50764 *
                C17276) *
               C50894 -
           (((C17278 * C4102 + C50800 * C4103 + C17277 * C829 + C17272 * C840) *
                 C50606 +
             (C17278 * C4100 + C50800 * C4101 + C17277 * C816 + C17272 * C830) *
                 C696) *
                C50764 * C17276 +
            ((C17278 * C3161 + C50800 * C3167 + C17277 * C831 + C17272 * C841) *
                 C50606 +
             (C17278 * C3155 + C50800 * C3160 + C17277 * C817 + C17272 * C832) *
                 C696) *
                C50764 * C17275 +
            ((C17278 * C3159 + C50800 * C3166 + C17277 * C833 + C17272 * C842) *
                 C50606 +
             (C17278 * C3154 + C50800 * C3158 + C17277 * C818 + C17272 * C834) *
                 C696) *
                C50764 * C17274) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
            C17328 * C285 + C17329 * C280) *
               C50764 * C17274 +
           ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
            (C17317 + C17316) * C284 - (C17319 + C17318) * C279 +
            (C17321 + C17320) * C285 + (C17323 + C17322) * C280) *
               C50764 * C17275 +
           (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C279 +
            (C17325 + C17324) * C285 + (C17327 + C17326) * C280) *
               C50764 * C17276) *
              C50894 +
          (((C17686 + C17687) * C284 -
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C278 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C283) +
            (C17688 + C17689) * C279 - C17698 * C285 - C17699 * C280) *
               C50764 * C17274 +
           ((C17691 + C17690) * C284 -
            ((C17689 + C17688) * C278 + (C17687 + C17686) * C283) +
            (C17693 + C17692) * C279 - (C17694 + C17695) * C285 -
            (C17696 + C17697) * C280) *
               C50764 * C17275 +
           ((C17695 + C17694) * C284 - (C17699 * C278 + C17698 * C283) +
            (C17697 + C17696) * C279 -
            (C17278 * C1523 + C50800 * C1524 + C17277 * C438 + C17272 * C448) *
                C285 -
            (C17278 * C1525 + C50800 * C1526 + C17277 * C449 + C17272 * C456) *
                C280) *
               C50764 * C17276) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C696 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50606) *
               C50764 * C17274 +
           ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
               C17275 +
           (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
              C1162 -
          ((C17699 * C50606 + C17698 * C696) * C50764 * C17276 +
           ((C17689 + C17688) * C50606 + (C17687 + C17686) * C696) * C50764 *
               C17275 +
           ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                C50606 +
            (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                C696) *
               C50764 * C17274) *
              C1163 +
          (((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
                C696 +
            (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
                C50606) *
               C50764 * C17274 +
           ((C18277 + C18276) * C696 + (C18279 + C18278) * C50606) * C50764 *
               C17275 +
           ((C18281 + C18280) * C696 + (C18283 + C18282) * C50606) * C50764 *
               C17276) *
              C1164 -
          (((C17278 * C6981 + C50800 * C6982 + C17277 * C1172 +
             C17272 * C1179) *
                C50606 +
            (C17278 * C6979 + C50800 * C6980 + C17277 * C1167 +
             C17272 * C1173) *
                C696) *
               C50764 * C17276 +
           ((C17278 * C3603 + C50800 * C3611 + C17277 * C1174 +
             C17272 * C1180) *
                C50606 +
            (C17278 * C3599 + C50800 * C3605 + C17277 * C1168 +
             C17272 * C1175) *
                C696) *
               C50764 * C17275 +
           ((C17278 * C3607 + C50800 * C3613 + C17277 * C1176 +
             C17272 * C1181) *
                C50606 +
            (C17278 * C3601 + C50800 * C3609 + C17277 * C1169 +
             C17272 * C1177) *
                C696) *
               C50764 * C17274) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C278 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C279 +
           (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
            C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
               C285 +
           (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
            C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
               C280) *
              C50764 * C50628 * C50894 +
          ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
            C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
               C284 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C278 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C283) +
           (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
            C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
               C279 -
           (C20083 * C4100 + C20078 * C4101 + C20082 * C816 + C20077 * C830 +
            C20081 * C813 + C20076 * C823 + C20080 * C436 + C20075 * C444) *
               C285 -
           (C20083 * C4102 + C20078 * C4103 + C20082 * C829 + C20077 * C840 +
            C20081 * C824 + C20076 * C837 + C20080 * C445 + C20075 * C454) *
               C280) *
              C50764 * C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C696 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C50606) *
               C50764 * C50628 * C50894 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50606 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C696) *
               C50764 * C50628 * C50706) *
              C582 +
          (((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C696 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C50606) *
               C50764 * C50628 * C50706 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50606 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C696) *
               C50764 * C50628 * C50894) *
              C583 +
          (((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
             C20082 * C2872 + C20077 * C2875 + C20083 * C3001 +
             C20078 * C3005) *
                C696 +
            (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
             C20082 * C2876 + C20077 * C2881 + C20083 * C3004 +
             C20078 * C3007) *
                C50606) *
               C50764 * C50628 * C50894 -
           ((C20083 * C20547 + C20078 * C20549 + C20082 * C3164 +
             C20077 * C3169 + C20081 * C3159 + C20076 * C3166 + C20080 * C833 +
             C20075 * C842) *
                C50606 +
            (C20083 * C20546 + C20078 * C20548 + C20082 * C3157 +
             C20077 * C3165 + C20081 * C3154 + C20076 * C3158 + C20080 * C818 +
             C20075 * C834) *
                C696) *
               C50764 * C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C696 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50606) *
              C50764 * C50628 * C1162 -
          ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
            C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
               C50606 +
           (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
            C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
               C696) *
              C50764 * C50628 * C1163 +
          ((C20080 * C944 + C20075 * C949 + C20081 * C1083 + C20076 * C1091 +
            C20082 * C3316 + C20077 * C3319 + C20083 * C3493 + C20078 * C3497) *
               C696 +
           (C20080 * C950 + C20075 * C959 + C20081 * C1090 + C20076 * C1095 +
            C20082 * C3320 + C20077 * C3325 + C20083 * C3496 + C20078 * C3499) *
               C50606) *
              C50764 * C50628 * C1164 -
          ((C20083 * C20817 + C20078 * C20819 + C20082 * C3606 +
            C20077 * C3612 + C20081 * C3607 + C20076 * C3613 + C20080 * C1176 +
            C20075 * C1181) *
               C50606 +
           (C20083 * C20816 + C20078 * C20818 + C20082 * C3600 +
            C20077 * C3608 + C20081 * C3601 + C20076 * C3609 + C20080 * C1169 +
            C20075 * C1177) *
               C696) *
              C50764 * C50628 * C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C1285 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50936 -
            (C17312 + C17313) * C1286 - (C17314 + C17315) * C50920 +
            C17328 * C1287 + C17329 * C1282) *
               C50764 * C17274 +
           ((C17313 + C17312) * C1285 + (C17315 + C17314) * C50936 -
            (C17317 + C17316) * C1286 - (C17319 + C17318) * C50920 +
            (C17321 + C17320) * C1287 + (C17323 + C17322) * C1282) *
               C50764 * C17275 +
           (C17328 * C1285 + C17329 * C50936 - C17330 * C1286 -
            C17331 * C50920 + (C17325 + C17324) * C1287 +
            (C17327 + C17326) * C1282) *
               C50764 * C17276) *
              C1643 +
          (((C17686 + C17687) * C1286 -
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50936 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C1285) +
            (C17688 + C17689) * C50920 - C17698 * C1287 - C17699 * C1282) *
               C50764 * C17274 +
           ((C17691 + C17690) * C1286 -
            ((C17689 + C17688) * C50936 + (C17687 + C17686) * C1285) +
            (C17693 + C17692) * C50920 - (C17694 + C17695) * C1287 -
            (C17696 + C17697) * C1282) *
               C50764 * C17275 +
           ((C17695 + C17694) * C1286 - (C17699 * C50936 + C17698 * C1285) +
            (C17697 + C17696) * C50920 -
            (C17278 * C1523 + C50800 * C1524 + C17277 * C438 + C17272 * C448) *
                C1287 -
            (C17278 * C1525 + C50800 * C1526 + C17277 * C449 + C17272 * C456) *
                C1282) *
               C50764 * C17276) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C1285 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50936 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C1286 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50920 +
           (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
            C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
               C1287 +
           (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
            C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
               C1282) *
              C50764 * C50628 * C1643 +
          ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
            C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
               C1286 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50936 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C1285) +
           (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
            C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
               C50920 -
           (C20083 * C4100 + C20078 * C4101 + C20082 * C816 + C20077 * C830 +
            C20081 * C813 + C20076 * C823 + C20080 * C436 + C20075 * C444) *
               C1287 -
           (C20083 * C4102 + C20078 * C4103 + C20082 * C829 + C20077 * C840 +
            C20081 * C824 + C20076 * C837 + C20080 * C445 + C20075 * C454) *
               C1282) *
              C50764 * C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C1391 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C1386 -
             (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
                C50764 * C17274 +
            ((C17313 + C17312) * C1391 + (C17315 + C17314) * C1386 -
             (C17317 + C17316) * C1392 - (C17319 + C17318) * C50611) *
                C50764 * C17275 +
            (C17328 * C1391 + C17329 * C1386 - C17330 * C1392 -
             C17331 * C50611) *
                C50764 * C17276) *
               C1643 +
           (((C17686 + C17687) * C1392 -
             ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                  C1386 +
              (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                  C1391) +
             (C17688 + C17689) * C50611) *
                C50764 * C17274 +
            ((C17691 + C17690) * C1392 -
             ((C17689 + C17688) * C1386 + (C17687 + C17686) * C1391) +
             (C17693 + C17692) * C50611) *
                C50764 * C17275 +
            ((C17695 + C17694) * C1392 - (C17699 * C1386 + C17698 * C1391) +
             (C17697 + C17696) * C50611) *
                C50764 * C17276) *
               C50706) *
              C50893 +
          ((((C17502 + C17503) * C1392 -
             ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                  C1386 +
              (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                  C1391) +
             (C17504 + C17505) * C50611) *
                C50764 * C17274 +
            ((C17507 + C17506) * C1392 -
             ((C17505 + C17504) * C1386 + (C17503 + C17502) * C1391) +
             (C17509 + C17508) * C50611) *
                C50764 * C17275 +
            ((C17511 + C17510) * C1392 - (C17515 * C1386 + C17514 * C1391) +
             (C17513 + C17512) * C50611) *
                C50764 * C17276) *
               C1643 +
           (((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C1391 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C1386 -
             (C19030 + C19031) * C1392 - (C19032 + C19033) * C50611) *
                C50764 * C17274 +
            ((C19031 + C19030) * C1391 + (C19033 + C19032) * C1386 -
             (C19034 + C19035) * C1392 - (C19036 + C19037) * C50611) *
                C50764 * C17275 +
            ((C19035 + C19034) * C1391 + (C19037 + C19036) * C1386 -
             (C17278 * C815 + C50800 * C828 + C17277 * C814 + C17272 * C825) *
                 C1392 -
             (C17278 * C827 + C50800 * C839 + C17277 * C826 + C17272 * C838) *
                 C50611) *
                C50764 * C17276) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C1391 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C1386 -
            (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
             C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
                C1392 -
            (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
             C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
                C50611) *
               C50764 * C50628 * C1643 +
           ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
             C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
                C1392 -
            ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
              C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                 C1386 +
             (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
              C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                 C1391) +
            (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
             C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
                C50611) *
               C50764 * C50628 * C50706) *
              C50893 +
          (((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
             C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
                C1392 -
            ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
              C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                 C1386 +
             (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
              C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                 C1391) +
            (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
             C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
                C50611) *
               C50764 * C50628 * C1643 +
           ((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C1391 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C1386 -
            (C20083 * C3156 + C20078 * C3163 + C20082 * C3155 + C20077 * C3160 +
             C20081 * C817 + C20076 * C832 + C20080 * C812 + C20075 * C821) *
                C1392 -
            (C20083 * C3162 + C20078 * C3168 + C20082 * C3161 + C20077 * C3167 +
             C20081 * C831 + C20076 * C841 + C20080 * C822 + C20075 * C836) *
                C50611) *
               C50764 * C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C1391 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C1386 -
            (C17312 + C17313) * C1392 - (C17314 + C17315) * C50611) *
               C50764 * C17274 +
           ((C17313 + C17312) * C1391 + (C17315 + C17314) * C1386 -
            (C17317 + C17316) * C1392 - (C17319 + C17318) * C50611) *
               C50764 * C17275 +
           (C17328 * C1391 + C17329 * C1386 - C17330 * C1392 -
            C17331 * C50611) *
               C50764 * C17276) *
              C50940 +
          (((C17686 + C17687) * C1392 -
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C1386 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C1391) +
            (C17688 + C17689) * C50611) *
               C50764 * C17274 +
           ((C17691 + C17690) * C1392 -
            ((C17689 + C17688) * C1386 + (C17687 + C17686) * C1391) +
            (C17693 + C17692) * C50611) *
               C50764 * C17275 +
           ((C17695 + C17694) * C1392 - (C17699 * C1386 + C17698 * C1391) +
            (C17697 + C17696) * C50611) *
               C50764 * C17276) *
              C50929 +
          (((C17277 * C944 + C17272 * C949 + C17278 * C1083 + C50800 * C1091) *
                C1391 +
            (C17277 * C950 + C17272 * C959 + C17278 * C1090 + C50800 * C1095) *
                C1386 -
            (C18276 + C18277) * C1392 - (C18278 + C18279) * C50611) *
               C50764 * C17274 +
           ((C18277 + C18276) * C1391 + (C18279 + C18278) * C1386 -
            (C18280 + C18281) * C1392 - (C18282 + C18283) * C50611) *
               C50764 * C17275 +
           ((C18281 + C18280) * C1391 + (C18283 + C18282) * C1386 -
            (C17278 * C1080 + C50800 * C1085 + C17277 * C947 + C17272 * C955) *
                C1392 -
            (C17278 * C1084 + C50800 * C1092 + C17277 * C956 + C17272 * C962) *
                C50611) *
               C50764 * C17276) *
              C1875) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C1391 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C1386 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C1392 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50611) *
              C50764 * C50628 * C50940 +
          ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
            C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
               C1392 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C1386 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C1391) +
           (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
            C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
               C50611) *
              C50764 * C50628 * C50929 +
          ((C20080 * C944 + C20075 * C949 + C20081 * C1083 + C20076 * C1091 +
            C20082 * C3316 + C20077 * C3319 + C20083 * C3493 + C20078 * C3497) *
               C1391 +
           (C20080 * C950 + C20075 * C959 + C20081 * C1090 + C20076 * C1095 +
            C20082 * C3320 + C20077 * C3325 + C20083 * C3496 + C20078 * C3499) *
               C1386 -
           (C20083 * C3492 + C20078 * C3495 + C20082 * C3317 + C20077 * C3321 +
            C20081 * C1082 + C20076 * C1089 + C20080 * C945 + C20075 * C951) *
               C1392 -
           (C20083 * C3494 + C20078 * C3498 + C20082 * C3322 + C20077 * C3326 +
            C20081 * C1088 + C20076 * C1094 + C20080 * C952 + C20075 * C960) *
               C50611) *
              C50764 * C50628 * C1875) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
               C118 +
           (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
               C106 -
           (C17312 + C17313) * C119 - (C17314 + C17315) * C107 + C17328 * C120 +
           C17329 * C108 - C17330 * C121 - C17331 * C109) *
              C50764 * C17274 +
          ((C17313 + C17312) * C118 + (C17315 + C17314) * C106 -
           (C17317 + C17316) * C119 - (C17319 + C17318) * C107 +
           (C17321 + C17320) * C120 + (C17323 + C17322) * C108 -
           (C17324 + C17325) * C121 - (C17326 + C17327) * C109) *
              C50764 * C17275 +
          (C17328 * C118 + C17329 * C106 - C17330 * C119 - C17331 * C107 +
           (C17325 + C17324) * C120 + (C17327 + C17326) * C108 -
           (C17278 * C291 + C50800 * C302 + C17277 * C127 + C17272 * C139) *
               C121 -
           (C17278 * C303 + C50800 * C309 + C17277 * C140 + C17272 * C148) *
               C109) *
              C50764 * C17276) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50878 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50611) *
               C50764 * C17274 +
           ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50878 -
            (C17317 + C17316) * C49713 - (C17319 + C17318) * C50611) *
               C50764 * C17275 +
           (C17328 * C49720 + C17329 * C50878 - C17330 * C49713 -
            C17331 * C50611) *
               C50764 * C17276) *
              C50694 * C582 +
          (((C17502 + C17503) * C49713 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50878 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C49720) +
            (C17504 + C17505) * C50611) *
               C50764 * C17274 +
           ((C17507 + C17506) * C49713 -
            ((C17505 + C17504) * C50878 + (C17503 + C17502) * C49720) +
            (C17509 + C17508) * C50611) *
               C50764 * C17275 +
           ((C17511 + C17510) * C49713 - (C17515 * C50878 + C17514 * C49720) +
            (C17513 + C17512) * C50611) *
               C50764 * C17276) *
              C50694 * C583 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C49720 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C50878 -
            (C17862 + C17863) * C49713 - (C17864 + C17865) * C50611) *
               C50764 * C17274 +
           ((C17863 + C17862) * C49720 + (C17865 + C17864) * C50878 -
            (C17866 + C17867) * C49713 - (C17868 + C17869) * C50611) *
               C50764 * C17275 +
           ((C17867 + C17866) * C49720 + (C17869 + C17868) * C50878 -
            (C17278 * C697 + C50800 * C702 + C17277 * C590 + C17272 * C598) *
                C49713 -
            (C17278 * C701 + C50800 * C709 + C17277 * C599 + C17272 * C605) *
                C50611) *
               C50764 * C17276) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
           C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
              C118 +
          (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
           C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
              C106 -
          (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
           C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
              C119 -
          (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
           C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
              C107 +
          (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
           C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
              C120 +
          (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
           C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
              C108 -
          (C20083 * C697 + C20078 * C702 + C20082 * C590 + C20077 * C598 +
           C20081 * C289 + C20076 * C298 + C20080 * C125 + C20075 * C135) *
              C121 -
          (C20083 * C701 + C20078 * C709 + C20082 * C599 + C20077 * C605 +
           C20081 * C299 + C20076 * C307 + C20080 * C136 + C20075 * C146) *
              C109) *
         C50764 * C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C49720 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50878 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C49713 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C50611) *
              C50764 * C50628 * C50694 * C582 +
          ((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
            C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
               C49713 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50878 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C49720) +
           (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
            C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
               C50611) *
              C50764 * C50628 * C50694 * C583 +
          ((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
            C20082 * C2872 + C20077 * C2875 + C20083 * C3001 + C20078 * C3005) *
               C49720 +
           (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
            C20082 * C2876 + C20077 * C2881 + C20083 * C3004 + C20078 * C3007) *
               C50878 -
           (C20083 * C3000 + C20078 * C3003 + C20082 * C2873 + C20077 * C2877 +
            C20081 * C699 + C20076 * C706 + C20080 * C588 + C20075 * C594) *
               C49713 -
           (C20083 * C3002 + C20078 * C3006 + C20082 * C2878 + C20077 * C2882 +
            C20081 * C705 + C20076 * C711 + C20080 * C595 + C20075 * C603) *
               C50611) *
              C50764 * C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
            C17328 * C285 + C17329 * C280) *
               C50764 * C17274 +
           ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
            (C17317 + C17316) * C284 - (C17319 + C17318) * C279 +
            (C17321 + C17320) * C285 + (C17323 + C17322) * C280) *
               C50764 * C17275 +
           (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C279 +
            (C17325 + C17324) * C285 + (C17327 + C17326) * C280) *
               C50764 * C17276) *
              C50694 * C50893 +
          (((C17502 + C17503) * C284 -
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C278 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C283) +
            (C17504 + C17505) * C279 - C17514 * C285 - C17515 * C280) *
               C50764 * C17274 +
           ((C17507 + C17506) * C284 -
            ((C17505 + C17504) * C278 + (C17503 + C17502) * C283) +
            (C17509 + C17508) * C279 - (C17510 + C17511) * C285 -
            (C17512 + C17513) * C280) *
               C50764 * C17275 +
           ((C17511 + C17510) * C284 - (C17515 * C278 + C17514 * C283) +
            (C17513 + C17512) * C279 -
            (C17278 * C591 + C50800 * C600 + C17277 * C290 + C17272 * C300) *
                C285 -
            (C17278 * C601 + C50800 * C606 + C17277 * C301 + C17272 * C308) *
                C280) *
               C50764 * C17276) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C696 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C50606) *
               C50764 * C17274 +
           ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
               C17275 +
           (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
              C50694 * C692 -
          ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
           ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50764 *
               C17275 +
           ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                C50606 +
            (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                C696) *
               C50764 * C17274) *
              C50694 * C693 +
          (((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                C696 +
            (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                C50606) *
               C50764 * C17274 +
           ((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50764 *
               C17275 +
           ((C17867 + C17866) * C696 + (C17869 + C17868) * C50606) * C50764 *
               C17276) *
              C50694 * C694 -
          (((C17278 * C2880 + C50800 * C2883 + C17277 * C703 + C17272 * C710) *
                C50606 +
            (C17278 * C2874 + C50800 * C2879 + C17277 * C698 + C17272 * C704) *
                C696) *
               C50764 * C17276 +
           ((C17278 * C2878 + C50800 * C2882 + C17277 * C705 + C17272 * C711) *
                C50606 +
            (C17278 * C2873 + C50800 * C2877 + C17277 * C699 + C17272 * C706) *
                C696) *
               C50764 * C17275 +
           ((C17278 * C2876 + C50800 * C2881 + C17277 * C707 + C17272 * C712) *
                C50606 +
            (C17278 * C2872 + C50800 * C2875 + C17277 * C700 + C17272 * C708) *
                C696) *
               C50764 * C17274) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C278 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C279 +
           (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
            C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
               C285 +
           (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
            C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
               C280) *
              C50764 * C50628 * C50694 * C50893 +
          ((C20080 * C286 + C20075 * C292 + C20081 * C588 + C20076 * C594 +
            C20082 * C699 + C20077 * C706 + C20083 * C2873 + C20078 * C2877) *
               C284 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C278 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C283) +
           (C20080 * C295 + C20075 * C305 + C20081 * C595 + C20076 * C603 +
            C20082 * C705 + C20077 * C711 + C20083 * C2878 + C20078 * C2882) *
               C279 -
           (C20083 * C2874 + C20078 * C2879 + C20082 * C698 + C20077 * C704 +
            C20081 * C589 + C20076 * C596 + C20080 * C288 + C20075 * C296) *
               C285 -
           (C20083 * C2880 + C20078 * C2883 + C20082 * C703 + C20077 * C710 +
            C20081 * C597 + C20076 * C604 + C20080 * C297 + C20075 * C306) *
               C280) *
              C50764 * C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C696 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C50606) *
              C50764 * C50628 * C50694 * C692 -
          ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
            C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
               C50606 +
           (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
            C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
               C696) *
              C50764 * C50628 * C50694 * C693 +
          ((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
            C20082 * C2872 + C20077 * C2875 + C20083 * C3001 + C20078 * C3005) *
               C696 +
           (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
            C20082 * C2876 + C20077 * C2881 + C20083 * C3004 + C20078 * C3007) *
               C50606) *
              C50764 * C50628 * C50694 * C694 -
          ((C20083 * C20445 + C20078 * C20447 + C20082 * C3004 +
            C20077 * C3007 + C20081 * C2876 + C20076 * C2881 + C20080 * C707 +
            C20075 * C712) *
               C50606 +
           (C20083 * C20444 + C20078 * C20446 + C20082 * C3001 +
            C20077 * C3005 + C20081 * C2872 + C20076 * C2875 + C20080 * C700 +
            C20075 * C708) *
               C696) *
              C50764 * C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C279 +
            C17328 * C285 + C17329 * C280) *
               C50764 * C17274 +
           ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
            (C17317 + C17316) * C284 - (C17319 + C17318) * C279 +
            (C17321 + C17320) * C285 + (C17323 + C17322) * C280) *
               C50764 * C17275 +
           (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C279 +
            (C17325 + C17324) * C285 + (C17327 + C17326) * C280) *
               C50764 * C17276) *
              C50894 +
          (((C17686 + C17687) * C284 -
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C278 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C283) +
            (C17688 + C17689) * C279 - C17698 * C285 - C17699 * C280) *
               C50764 * C17274 +
           ((C17691 + C17690) * C284 -
            ((C17689 + C17688) * C278 + (C17687 + C17686) * C283) +
            (C17693 + C17692) * C279 - (C17694 + C17695) * C285 -
            (C17696 + C17697) * C280) *
               C50764 * C17275 +
           ((C17695 + C17694) * C284 - (C17699 * C278 + C17698 * C283) +
            (C17697 + C17696) * C279 -
            (C17278 * C1523 + C50800 * C1524 + C17277 * C438 + C17272 * C448) *
                C285 -
            (C17278 * C1525 + C50800 * C1526 + C17277 * C449 + C17272 * C456) *
                C280) *
               C50764 * C17276) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C287 + C50800 * C294) *
                 C696 +
             (C17277 * C130 + C17272 * C143 + C17278 * C293 + C50800 * C304) *
                 C50606) *
                C50764 * C17274 +
            ((C17313 + C17312) * C696 + (C17315 + C17314) * C50606) * C50764 *
                C17275 +
            (C17328 * C696 + C17329 * C50606) * C50764 * C17276) *
               C50894 -
           ((C17699 * C50606 + C17698 * C696) * C50764 * C17276 +
            ((C17689 + C17688) * C50606 + (C17687 + C17686) * C696) * C50764 *
                C17275 +
            ((C17278 * C820 + C50800 * C835 + C17277 * C441 + C17272 * C452) *
                 C50606 +
             (C17278 * C811 + C50800 * C819 + C17277 * C435 + C17272 * C442) *
                 C696) *
                C50764 * C17274) *
               C50706) *
              C582 +
          ((((C17277 * C811 + C17272 * C819 + C17278 * C818 + C50800 * C834) *
                 C696 +
             (C17277 * C820 + C17272 * C835 + C17278 * C833 + C50800 * C842) *
                 C50606) *
                C50764 * C17274 +
            ((C17277 * C812 + C17272 * C821 + C17278 * C817 + C50800 * C832) *
                 C696 +
             (C17277 * C822 + C17272 * C836 + C17278 * C831 + C50800 * C841) *
                 C50606) *
                C50764 * C17275 +
            ((C17277 * C813 + C17272 * C823 + C17278 * C816 + C50800 * C830) *
                 C696 +
             (C17277 * C824 + C17272 * C837 + C17278 * C829 + C50800 * C840) *
                 C50606) *
                C50764 * C17276) *
               C50706 -
           ((C17515 * C50606 + C17514 * C696) * C50764 * C17276 +
            ((C17505 + C17504) * C50606 + (C17503 + C17502) * C696) * C50764 *
                C17275 +
            ((C17278 * C593 + C50800 * C602 + C17277 * C293 + C17272 * C304) *
                 C50606 +
             (C17278 * C587 + C50800 * C592 + C17277 * C287 + C17272 * C294) *
                 C696) *
                C50764 * C17274) *
               C50894) *
              C583 +
          ((((C17277 * C587 + C17272 * C592 + C17278 * C700 + C50800 * C708) *
                 C696 +
             (C17277 * C593 + C17272 * C602 + C17278 * C707 + C50800 * C712) *
                 C50606) *
                C50764 * C17274 +
            ((C17863 + C17862) * C696 + (C17865 + C17864) * C50606) * C50764 *
                C17275 +
            ((C17867 + C17866) * C696 + (C17869 + C17868) * C50606) * C50764 *
                C17276) *
               C50894 -
           (((C17278 * C4102 + C50800 * C4103 + C17277 * C829 + C17272 * C840) *
                 C50606 +
             (C17278 * C4100 + C50800 * C4101 + C17277 * C816 + C17272 * C830) *
                 C696) *
                C50764 * C17276 +
            ((C17278 * C3161 + C50800 * C3167 + C17277 * C831 + C17272 * C841) *
                 C50606 +
             (C17278 * C3155 + C50800 * C3160 + C17277 * C817 + C17272 * C832) *
                 C696) *
                C50764 * C17275 +
            ((C17278 * C3159 + C50800 * C3166 + C17277 * C833 + C17272 * C842) *
                 C50606 +
             (C17278 * C3154 + C50800 * C3158 + C17277 * C818 + C17272 * C834) *
                 C696) *
                C50764 * C17274) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
            C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
            C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
               C278 -
           (C20083 * C699 + C20078 * C706 + C20082 * C588 + C20077 * C594 +
            C20081 * C286 + C20076 * C292 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C705 + C20078 * C711 + C20082 * C595 + C20077 * C603 +
            C20081 * C295 + C20076 * C305 + C20080 * C132 + C20075 * C144) *
               C279 +
           (C20080 * C124 + C20075 * C133 + C20081 * C288 + C20076 * C296 +
            C20082 * C589 + C20077 * C596 + C20083 * C698 + C20078 * C704) *
               C285 +
           (C20080 * C134 + C20075 * C145 + C20081 * C297 + C20076 * C306 +
            C20082 * C597 + C20077 * C604 + C20083 * C703 + C20078 * C710) *
               C280) *
              C50764 * C50628 * C50894 +
          ((C20080 * C434 + C20075 * C440 + C20081 * C812 + C20076 * C821 +
            C20082 * C817 + C20077 * C832 + C20083 * C3155 + C20078 * C3160) *
               C284 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C278 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C283) +
           (C20080 * C443 + C20075 * C453 + C20081 * C822 + C20076 * C836 +
            C20082 * C831 + C20077 * C841 + C20083 * C3161 + C20078 * C3167) *
               C279 -
           (C20083 * C4100 + C20078 * C4101 + C20082 * C816 + C20077 * C830 +
            C20081 * C813 + C20076 * C823 + C20080 * C436 + C20075 * C444) *
               C285 -
           (C20083 * C4102 + C20078 * C4103 + C20082 * C829 + C20077 * C840 +
            C20081 * C824 + C20076 * C837 + C20080 * C445 + C20075 * C454) *
               C280) *
              C50764 * C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C287 + C20076 * C294 +
             C20082 * C587 + C20077 * C592 + C20083 * C700 + C20078 * C708) *
                C696 +
            (C20080 * C130 + C20075 * C143 + C20081 * C293 + C20076 * C304 +
             C20082 * C593 + C20077 * C602 + C20083 * C707 + C20078 * C712) *
                C50606) *
               C50764 * C50628 * C50894 -
           ((C20083 * C3159 + C20078 * C3166 + C20082 * C833 + C20077 * C842 +
             C20081 * C820 + C20076 * C835 + C20080 * C441 + C20075 * C452) *
                C50606 +
            (C20083 * C3154 + C20078 * C3158 + C20082 * C818 + C20077 * C834 +
             C20081 * C811 + C20076 * C819 + C20080 * C435 + C20075 * C442) *
                C696) *
               C50764 * C50628 * C50706) *
              C582 +
          (((C20080 * C811 + C20075 * C819 + C20081 * C818 + C20076 * C834 +
             C20082 * C3154 + C20077 * C3158 + C20083 * C3157 +
             C20078 * C3165) *
                C696 +
            (C20080 * C820 + C20075 * C835 + C20081 * C833 + C20076 * C842 +
             C20082 * C3159 + C20077 * C3166 + C20083 * C3164 +
             C20078 * C3169) *
                C50606) *
               C50764 * C50628 * C50706 -
           ((C20083 * C2876 + C20078 * C2881 + C20082 * C707 + C20077 * C712 +
             C20081 * C593 + C20076 * C602 + C20080 * C293 + C20075 * C304) *
                C50606 +
            (C20083 * C2872 + C20078 * C2875 + C20082 * C700 + C20077 * C708 +
             C20081 * C587 + C20076 * C592 + C20080 * C287 + C20075 * C294) *
                C696) *
               C50764 * C50628 * C50894) *
              C583 +
          (((C20080 * C587 + C20075 * C592 + C20081 * C700 + C20076 * C708 +
             C20082 * C2872 + C20077 * C2875 + C20083 * C3001 +
             C20078 * C3005) *
                C696 +
            (C20080 * C593 + C20075 * C602 + C20081 * C707 + C20076 * C712 +
             C20082 * C2876 + C20077 * C2881 + C20083 * C3004 +
             C20078 * C3007) *
                C50606) *
               C50764 * C50628 * C50894 -
           ((C20083 * C20547 + C20078 * C20549 + C20082 * C3164 +
             C20077 * C3169 + C20081 * C3159 + C20076 * C3166 + C20080 * C833 +
             C20075 * C842) *
                C50606 +
            (C20083 * C20546 + C20078 * C20548 + C20082 * C3157 +
             C20077 * C3165 + C20081 * C3154 + C20076 * C3158 + C20080 * C818 +
             C20075 * C834) *
                C696) *
               C50764 * C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C1285 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50936 -
             (C8179 + C8180) * C1286 - (C8181 + C8182) * C50920 +
             C8195 * C1287 + C8196 * C1282) *
                C33763 +
            ((C14093 + C14094) * C1285 + (C14095 + C14096) * C50936 -
             C14087 * C1286 - C14088 * C50920 + C14089 * C1287 +
             C14090 * C1282) *
                C50828) *
               C50887 +
           (((C8180 + C8179) * C1285 + (C8182 + C8181) * C50936 -
             (C8184 + C8183) * C1286 - (C8186 + C8185) * C50920 +
             (C8188 + C8187) * C1287 + (C8190 + C8189) * C1282) *
                C33763 +
            (C14091 * C1285 + C14092 * C50936 - C8565 * C1286 - C8566 * C50920 +
             (C8562 + C8561) * C1287 + (C8564 + C8563) * C1282) *
                C50828) *
               C50633) *
              C50694 * C1283 +
          ((((C8369 + C8370) * C1286 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50936 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C1285) +
             (C8371 + C8372) * C50920 - C8381 * C1287 - C8382 * C1282) *
                C33763 +
            (C15879 * C1286 -
             ((C14646 + C14645) * C50936 + (C14644 + C14643) * C1285) +
             C15880 * C50920 - (C9901 + C9902) * C1287 -
             (C9903 + C9904) * C1282) *
                C50828) *
               C50887 +
           (((C8374 + C8373) * C1286 -
             ((C8372 + C8371) * C50936 + (C8370 + C8369) * C1285) +
             (C8376 + C8375) * C50920 - (C8377 + C8378) * C1287 -
             (C8379 + C8380) * C1282) *
                C33763 +
            ((C9902 + C9901) * C1286 - (C15881 * C50936 + C15882 * C1285) +
             (C9904 + C9903) * C50920 -
             (C8145 * C815 + C50800 * C828 + C8144 * C814 + C50908 * C825) *
                 C1287 -
             (C8145 * C827 + C50800 * C839 + C8144 * C826 + C50908 * C838) *
                 C1282) *
                C50828) *
               C50633) *
              C50694 * C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C1391 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C1386 -
             (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
                C33763 +
            ((C14093 + C14094) * C1391 + (C14095 + C14096) * C1386 -
             C14087 * C1392 - C14088 * C50611) *
                C50828) *
               C50887 +
           (((C8180 + C8179) * C1391 + (C8182 + C8181) * C1386 -
             (C8184 + C8183) * C1392 - (C8186 + C8185) * C50611) *
                C33763 +
            (C14091 * C1391 + C14092 * C1386 - C8565 * C1392 - C8566 * C50611) *
                C50828) *
               C50633) *
              C50694 * C50939 +
          ((((C8369 + C8370) * C1392 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C1386 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C1391) +
             (C8371 + C8372) * C50611) *
                C33763 +
            (C15879 * C1392 -
             ((C14646 + C14645) * C1386 + (C14644 + C14643) * C1391) +
             C15880 * C50611) *
                C50828) *
               C50887 +
           (((C8374 + C8373) * C1392 -
             ((C8372 + C8371) * C1386 + (C8370 + C8369) * C1391) +
             (C8376 + C8375) * C50611) *
                C33763 +
            ((C9902 + C9901) * C1392 - (C15881 * C1386 + C15882 * C1391) +
             (C9904 + C9903) * C50611) *
                C50828) *
               C50633) *
              C50694 * C50926 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C1391 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C1386 -
             (C8729 + C8730) * C1392 - (C8731 + C8732) * C50611) *
                C33763 +
            ((C14647 + C14648) * C1391 + (C14649 + C14650) * C1386 -
             (C14299 + C14300) * C1392 - (C14301 + C14302) * C50611) *
                C50828) *
               C50887 +
           (((C8730 + C8729) * C1391 + (C8732 + C8731) * C1386 -
             (C8733 + C8734) * C1392 - (C8735 + C8736) * C50611) *
                C33763 +
            ((C14300 + C14299) * C1391 + (C14302 + C14301) * C1386 -
             (C8145 * C4100 + C50800 * C4101 + C8144 * C816 + C50908 * C830) *
                 C1392 -
             (C8145 * C4102 + C50800 * C4103 + C8144 * C829 + C50908 * C840) *
                 C50611) *
                C50828) *
               C50633) *
              C50694 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C1391 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C1386 -
              (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
                 C33763 +
             ((C14093 + C14094) * C1391 + (C14095 + C14096) * C1386 -
              C14087 * C1392 - C14088 * C50611) *
                 C50828) *
                C50887 +
            (((C8180 + C8179) * C1391 + (C8182 + C8181) * C1386 -
              (C8184 + C8183) * C1392 - (C8186 + C8185) * C50611) *
                 C33763 +
             (C14091 * C1391 + C14092 * C1386 - C8565 * C1392 -
              C8566 * C50611) *
                 C50828) *
                C50633) *
               C50894 +
           (((C14091 * C1392 -
              ((C14096 + C14095) * C1386 + (C14094 + C14093) * C1391) +
              C14092 * C50611) *
                 C33763 +
             (C14845 * C1392 -
              ((C14865 + C14866) * C1386 + (C14867 + C14868) * C1391) +
              C14854 * C50611) *
                 C50828) *
                C50887 +
            ((C14089 * C1392 - (C14088 * C1386 + C14087 * C1391) +
              C14090 * C50611) *
                 C33763 +
             ((C9148 + C9147) * C1392 - (C14855 * C1386 + C14856 * C1391) +
              (C9150 + C9149) * C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C1283 +
          (((((C8369 + C8370) * C1392 -
              ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                   C1386 +
               (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                   C1391) +
              (C8371 + C8372) * C50611) *
                 C33763 +
             (C15879 * C1392 -
              ((C14646 + C14645) * C1386 + (C14644 + C14643) * C1391) +
              C15880 * C50611) *
                 C50828) *
                C50887 +
            (((C8374 + C8373) * C1392 -
              ((C8372 + C8371) * C1386 + (C8370 + C8369) * C1391) +
              (C8376 + C8375) * C50611) *
                 C33763 +
             ((C9902 + C9901) * C1392 - (C15881 * C1386 + C15882 * C1391) +
              (C9904 + C9903) * C50611) *
                 C50828) *
                C50633) *
               C50894 +
           ((((C14643 + C14644) * C1391 + (C14645 + C14646) * C1386 -
              C15882 * C1392 - C15881 * C50611) *
                 C33763 +
             ((C15083 + C15084) * C1391 + (C15085 + C15086) * C1386 -
              (C15088 + C15087) * C1392 - (C15090 + C15089) * C50611) *
                 C50828) *
                C50887 +
            ((C15879 * C1391 + C15880 * C1386 - (C9901 + C9902) * C1392 -
              (C9903 + C9904) * C50611) *
                 C33763 +
             ((C15087 + C15088) * C1391 + (C15089 + C15090) * C1386 -
              (C8145 * C3318 + C50800 * C3323 + C8144 * C1081 +
               C50908 * C1087) *
                  C1392 -
              (C8145 * C3324 + C50800 * C3327 + C8144 * C1086 +
               C50908 * C1093) *
                  C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C49720 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C50878 -
              (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
                 C33763 +
             ((C14093 + C14094) * C49720 + (C14095 + C14096) * C50878 -
              C14087 * C49713 - C14088 * C50611) *
                 C50828) *
                C50887 +
            (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50878 -
              (C8184 + C8183) * C49713 - (C8186 + C8185) * C50611) *
                 C33763 +
             (C14091 * C49720 + C14092 * C50878 - C8565 * C49713 -
              C8566 * C50611) *
                 C50828) *
                C50633) *
               C1643 +
           (((C14091 * C49713 -
              ((C14096 + C14095) * C50878 + (C14094 + C14093) * C49720) +
              C14092 * C50611) *
                 C33763 +
             (C14845 * C49713 -
              ((C14865 + C14866) * C50878 + (C14867 + C14868) * C49720) +
              C14854 * C50611) *
                 C50828) *
                C50887 +
            ((C14089 * C49713 - (C14088 * C50878 + C14087 * C49720) +
              C14090 * C50611) *
                 C33763 +
             ((C9148 + C9147) * C49713 - (C14855 * C50878 + C14856 * C49720) +
              (C9150 + C9149) * C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C1283 +
          (((((C8369 + C8370) * C49713 -
              ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                   C50878 +
               (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                   C49720) +
              (C8371 + C8372) * C50611) *
                 C33763 +
             (C15879 * C49713 -
              ((C14646 + C14645) * C50878 + (C14644 + C14643) * C49720) +
              C15880 * C50611) *
                 C50828) *
                C50887 +
            (((C8374 + C8373) * C49713 -
              ((C8372 + C8371) * C50878 + (C8370 + C8369) * C49720) +
              (C8376 + C8375) * C50611) *
                 C33763 +
             ((C9902 + C9901) * C49713 - (C15881 * C50878 + C15882 * C49720) +
              (C9904 + C9903) * C50611) *
                 C50828) *
                C50633) *
               C1643 +
           ((((C14643 + C14644) * C49720 + (C14645 + C14646) * C50878 -
              C15882 * C49713 - C15881 * C50611) *
                 C33763 +
             ((C15083 + C15084) * C49720 + (C15085 + C15086) * C50878 -
              (C15088 + C15087) * C49713 - (C15090 + C15089) * C50611) *
                 C50828) *
                C50887 +
            ((C15879 * C49720 + C15880 * C50878 - (C9901 + C9902) * C49713 -
              (C9903 + C9904) * C50611) *
                 C33763 +
             ((C15087 + C15088) * C49720 + (C15089 + C15090) * C50878 -
              (C8145 * C3318 + C50800 * C3323 + C8144 * C1081 +
               C50908 * C1087) *
                  C49713 -
              (C8145 * C3324 + C50800 * C3327 + C8144 * C1086 +
               C50908 * C1093) *
                  C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C696 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C50606) *
                 C33763 +
             ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
                C50887 +
            (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C33763 +
             (C14091 * C696 + C14092 * C50606) * C50828) *
                C50633) *
               C1643 -
           (((C14855 * C50606 + C14856 * C696) * C50828 +
             (C14088 * C50606 + C14087 * C696) * C33763) *
                C50633 +
            (((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50828 +
             ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C33763) *
                C50887) *
               C50706) *
              C50939 +
          (((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C33763 +
             ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50828) *
                C50887 +
            ((C15879 * C696 + C15880 * C50606) * C33763 +
             ((C15087 + C15088) * C696 + (C15089 + C15090) * C50606) * C50828) *
                C50633) *
               C50706 -
           (((C15881 * C50606 + C15882 * C696) * C50828 +
             ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C33763) *
                C50633 +
            (((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50828 +
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50606 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C696) *
                 C33763) *
                C50887) *
               C1643) *
              C50926 +
          (((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                  C696 +
              (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                  C50606) *
                 C33763 +
             ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50828) *
                C50887 +
            (((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C33763 +
             ((C14300 + C14299) * C696 + (C14302 + C14301) * C50606) * C50828) *
                C50633) *
               C1643 -
           ((((C8145 * C3494 + C50800 * C3498 + C8144 * C3322 +
               C50908 * C3326) *
                  C50606 +
              (C8145 * C3492 + C50800 * C3495 + C8144 * C3317 +
               C50908 * C3321) *
                  C696) *
                 C50828 +
             ((C14301 + C14302) * C50606 + (C14299 + C14300) * C696) * C33763) *
                C50633 +
            (((C8145 * C3496 + C50800 * C3499 + C8144 * C3320 +
               C50908 * C3325) *
                  C50606 +
              (C8145 * C3493 + C50800 * C3497 + C8144 * C3316 +
               C50908 * C3319) *
                  C696) *
                 C50828 +
             ((C14650 + C14649) * C50606 + (C14648 + C14647) * C696) * C33763) *
                C50887) *
               C50706) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C696 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C50606) *
                 C33763 +
             ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
                C50887 +
            (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C33763 +
             (C14091 * C696 + C14092 * C50606) * C50828) *
                C50633) *
               C50940 -
           (((C14855 * C50606 + C14856 * C696) * C50828 +
             (C14088 * C50606 + C14087 * C696) * C33763) *
                C50633 +
            (((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50828 +
             ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C33763) *
                C50887) *
               C50929 +
           ((((C14868 + C14867) * C696 + (C14866 + C14865) * C50606) * C33763 +
             ((C15229 + C15230) * C696 + (C15231 + C15232) * C50606) * C50828) *
                C50887 +
            ((C14845 * C696 + C14854 * C50606) * C33763 +
             ((C14870 + C14869) * C696 + (C14872 + C14871) * C50606) * C50828) *
                C50633) *
               C1875) *
              C1283 +
          (((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C33763 +
             ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50828) *
                C50887 +
            ((C15879 * C696 + C15880 * C50606) * C33763 +
             ((C15087 + C15088) * C696 + (C15089 + C15090) * C50606) * C50828) *
                C50633) *
               C50929 -
           (((C15881 * C50606 + C15882 * C696) * C50828 +
             ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C33763) *
                C50633 +
            (((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50828 +
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50606 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C696) *
                 C33763) *
                C50887) *
               C50940 -
           ((((C8145 * C3602 + C50800 * C3610 + C8144 * C3603 +
               C50908 * C3611) *
                  C50606 +
              (C8145 * C3598 + C50800 * C3604 + C8144 * C3599 +
               C50908 * C3605) *
                  C696) *
                 C50828 +
             ((C15090 + C15089) * C50606 + (C15088 + C15087) * C696) * C33763) *
                C50633 +
            (((C8145 * C3606 + C50800 * C3612 + C8144 * C3607 +
               C50908 * C3613) *
                  C50606 +
              (C8145 * C3600 + C50800 * C3608 + C8144 * C3601 +
               C50908 * C3609) *
                  C696) *
                 C50828 +
             ((C15086 + C15085) * C50606 + (C15084 + C15083) * C696) * C33763) *
                C50887) *
               C1875) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C49720 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50878 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
                C33763 +
            ((C14093 + C14094) * C49720 + (C14095 + C14096) * C50878 -
             C14087 * C49713 - C14088 * C50611) *
                C50828) *
               C50887 +
           (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50878 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50611) *
                C33763 +
            (C14091 * C49720 + C14092 * C50878 - C8565 * C49713 -
             C8566 * C50611) *
                C50828) *
               C50633) *
              C50694 * C582 +
          ((((C8369 + C8370) * C49713 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50878 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C49720) +
             (C8371 + C8372) * C50611) *
                C33763 +
            (C15879 * C49713 -
             ((C14646 + C14645) * C50878 + (C14644 + C14643) * C49720) +
             C15880 * C50611) *
                C50828) *
               C50887 +
           (((C8374 + C8373) * C49713 -
             ((C8372 + C8371) * C50878 + (C8370 + C8369) * C49720) +
             (C8376 + C8375) * C50611) *
                C33763 +
            ((C9902 + C9901) * C49713 - (C15881 * C50878 + C15882 * C49720) +
             (C9904 + C9903) * C50611) *
                C50828) *
               C50633) *
              C50694 * C583 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C49720 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50878 -
             (C8729 + C8730) * C49713 - (C8731 + C8732) * C50611) *
                C33763 +
            ((C14647 + C14648) * C49720 + (C14649 + C14650) * C50878 -
             (C14299 + C14300) * C49713 - (C14301 + C14302) * C50611) *
                C50828) *
               C50887 +
           (((C8730 + C8729) * C49720 + (C8732 + C8731) * C50878 -
             (C8733 + C8734) * C49713 - (C8735 + C8736) * C50611) *
                C33763 +
            ((C14300 + C14299) * C49720 + (C14302 + C14301) * C50878 -
             (C8145 * C4100 + C50800 * C4101 + C8144 * C816 + C50908 * C830) *
                 C49713 -
             (C8145 * C4102 + C50800 * C4103 + C8144 * C829 + C50908 * C840) *
                 C50611) *
                C50828) *
               C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C118 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C106 -
            (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
            C8196 * C108 - C8197 * C121 - C8198 * C109) *
               C33763 +
           ((C14093 + C14094) * C118 + (C14095 + C14096) * C106 -
            C14087 * C119 - C14088 * C107 + C14089 * C120 + C14090 * C108 -
            (C8561 + C8562) * C121 - (C8563 + C8564) * C109) *
               C50828) *
              C50887 +
          (((C8180 + C8179) * C118 + (C8182 + C8181) * C106 -
            (C8184 + C8183) * C119 - (C8186 + C8185) * C107 +
            (C8188 + C8187) * C120 + (C8190 + C8189) * C108 -
            (C8191 + C8192) * C121 - (C8193 + C8194) * C109) *
               C33763 +
           (C14091 * C118 + C14092 * C106 - C8565 * C119 - C8566 * C107 +
            (C8562 + C8561) * C120 + (C8564 + C8563) * C108 -
            (C8145 * C1523 + C50800 * C1524 + C8144 * C438 + C50908 * C448) *
                C121 -
            (C8145 * C1525 + C50800 * C1526 + C8144 * C449 + C50908 * C456) *
                C109) *
               C50828) *
              C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C49720 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50878 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
                C33763 +
            ((C14093 + C14094) * C49720 + (C14095 + C14096) * C50878 -
             C14087 * C49713 - C14088 * C50611) *
                C50828) *
               C50887 +
           (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50878 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50611) *
                C33763 +
            (C14091 * C49720 + C14092 * C50878 - C8565 * C49713 -
             C8566 * C50611) *
                C50828) *
               C50633) *
              C941 +
          (((C14091 * C49713 -
             ((C14096 + C14095) * C50878 + (C14094 + C14093) * C49720) +
             C14092 * C50611) *
                C33763 +
            (C14845 * C49713 -
             ((C14865 + C14866) * C50878 + (C14867 + C14868) * C49720) +
             C14854 * C50611) *
                C50828) *
               C50887 +
           ((C14089 * C49713 - (C14088 * C50878 + C14087 * C49720) +
             C14090 * C50611) *
                C33763 +
            ((C9148 + C9147) * C49713 - (C14855 * C50878 + C14856 * C49720) +
             (C9150 + C9149) * C50611) *
                C50828) *
               C50633) *
              C942 +
          ((((C14868 + C14867) * C49720 + (C14866 + C14865) * C50878 -
             C14856 * C49713 - C14855 * C50611) *
                C33763 +
            ((C15229 + C15230) * C49720 + (C15231 + C15232) * C50878 -
             (C14869 + C14870) * C49713 - (C14871 + C14872) * C50611) *
                C50828) *
               C50887 +
           ((C14845 * C49720 + C14854 * C50878 - (C9147 + C9148) * C49713 -
             (C9149 + C9150) * C50611) *
                C33763 +
            ((C14870 + C14869) * C49720 + (C14872 + C14871) * C50878 -
             (C8145 * C6979 + C50800 * C6980 + C8144 * C1167 + C50908 * C1173) *
                 C49713 -
             (C8145 * C6981 + C50800 * C6982 + C8144 * C1172 + C50908 * C1179) *
                 C50611) *
                C50828) *
               C50633) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C33763 +
            ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
               C50887 +
           (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C33763 +
            (C14091 * C696 + C14092 * C50606) * C50828) *
               C50633) *
              C50694 * C692 -
          (((C15881 * C50606 + C15882 * C696) * C50828 +
            ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C33763) *
               C50633 +
           (((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50828 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C33763) *
               C50887) *
              C50694 * C693 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C696 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50606) *
                C33763 +
            ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50828) *
               C50887 +
           (((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C33763 +
            ((C14300 + C14299) * C696 + (C14302 + C14301) * C50606) * C50828) *
               C50633) *
              C50694 * C694 -
          ((((C8145 * C3162 + C50800 * C3168 + C8144 * C3161 + C50908 * C3167) *
                 C50606 +
             (C8145 * C3156 + C50800 * C3163 + C8144 * C3155 + C50908 * C3160) *
                 C696) *
                C50828 +
            ((C8145 * C2878 + C50800 * C2882 + C8144 * C705 + C50908 * C711) *
                 C50606 +
             (C8145 * C2873 + C50800 * C2877 + C8144 * C699 + C50908 * C706) *
                 C696) *
                C33763) *
               C50633 +
           (((C8145 * C3164 + C50800 * C3169 + C8144 * C3159 + C50908 * C3166) *
                 C50606 +
             (C8145 * C3157 + C50800 * C3165 + C8144 * C3154 + C50908 * C3158) *
                 C696) *
                C50828 +
            ((C8145 * C2876 + C50800 * C2881 + C8144 * C707 + C50908 * C712) *
                 C50606 +
             (C8145 * C2872 + C50800 * C2875 + C8144 * C700 + C50908 * C708) *
                 C696) *
                C33763) *
               C50887) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C283 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
             C8196 * C280) *
                C33763 +
            ((C14093 + C14094) * C283 + (C14095 + C14096) * C278 -
             C14087 * C284 - C14088 * C279 + C14089 * C285 + C14090 * C280) *
                C50828) *
               C50887 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C279 +
             (C8188 + C8187) * C285 + (C8190 + C8189) * C280) *
                C33763 +
            (C14091 * C283 + C14092 * C278 - C8565 * C284 - C8566 * C279 +
             (C8562 + C8561) * C285 + (C8564 + C8563) * C280) *
                C50828) *
               C50633) *
              C50694 * C50893 +
          ((((C8369 + C8370) * C284 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C278 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C283) +
             (C8371 + C8372) * C279 - C8381 * C285 - C8382 * C280) *
                C33763 +
            (C15879 * C284 -
             ((C14646 + C14645) * C278 + (C14644 + C14643) * C283) +
             C15880 * C279 - (C9901 + C9902) * C285 - (C9903 + C9904) * C280) *
                C50828) *
               C50887 +
           (((C8374 + C8373) * C284 -
             ((C8372 + C8371) * C278 + (C8370 + C8369) * C283) +
             (C8376 + C8375) * C279 - (C8377 + C8378) * C285 -
             (C8379 + C8380) * C280) *
                C33763 +
            ((C9902 + C9901) * C284 - (C15881 * C278 + C15882 * C283) +
             (C9904 + C9903) * C279 -
             (C8145 * C815 + C50800 * C828 + C8144 * C814 + C50908 * C825) *
                 C285 -
             (C8145 * C827 + C50800 * C839 + C8144 * C826 + C50908 * C838) *
                 C280) *
                C50828) *
               C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C696 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C50606) *
                 C33763 +
             ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
                C50887 +
            (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C33763 +
             (C14091 * C696 + C14092 * C50606) * C50828) *
                C50633) *
               C941 -
           (((C14855 * C50606 + C14856 * C696) * C50828 +
             (C14088 * C50606 + C14087 * C696) * C33763) *
                C50633 +
            (((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50828 +
             ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C33763) *
                C50887) *
               C942 +
           ((((C14868 + C14867) * C696 + (C14866 + C14865) * C50606) * C33763 +
             ((C15229 + C15230) * C696 + (C15231 + C15232) * C50606) * C50828) *
                C50887 +
            ((C14845 * C696 + C14854 * C50606) * C33763 +
             ((C14870 + C14869) * C696 + (C14872 + C14871) * C50606) * C50828) *
                C50633) *
               C943) *
              C50893 +
          (((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C33763 +
             ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50828) *
                C50887 +
            ((C15879 * C696 + C15880 * C50606) * C33763 +
             ((C15087 + C15088) * C696 + (C15089 + C15090) * C50606) * C50828) *
                C50633) *
               C942 -
           (((C15881 * C50606 + C15882 * C696) * C50828 +
             ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C33763) *
                C50633 +
            (((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50828 +
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50606 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C696) *
                 C33763) *
                C50887) *
               C941 -
           ((((C8145 * C3602 + C50800 * C3610 + C8144 * C3603 +
               C50908 * C3611) *
                  C50606 +
              (C8145 * C3598 + C50800 * C3604 + C8144 * C3599 +
               C50908 * C3605) *
                  C696) *
                 C50828 +
             ((C15090 + C15089) * C50606 + (C15088 + C15087) * C696) * C33763) *
                C50633 +
            (((C8145 * C3606 + C50800 * C3612 + C8144 * C3607 +
               C50908 * C3613) *
                  C50606 +
              (C8145 * C3600 + C50800 * C3608 + C8144 * C3601 +
               C50908 * C3609) *
                  C696) *
                 C50828 +
             ((C15086 + C15085) * C50606 + (C15084 + C15083) * C696) * C33763) *
                C50887) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C696 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C50606) *
                 C33763 +
             ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
                C50887 +
            (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C33763 +
             (C14091 * C696 + C14092 * C50606) * C50828) *
                C50633) *
               C50894 -
           (((C14855 * C50606 + C14856 * C696) * C50828 +
             (C14088 * C50606 + C14087 * C696) * C33763) *
                C50633 +
            (((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50828 +
             ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C33763) *
                C50887) *
               C50706) *
              C582 +
          (((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C33763 +
             ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50828) *
                C50887 +
            ((C15879 * C696 + C15880 * C50606) * C33763 +
             ((C15087 + C15088) * C696 + (C15089 + C15090) * C50606) * C50828) *
                C50633) *
               C50706 -
           (((C15881 * C50606 + C15882 * C696) * C50828 +
             ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C33763) *
                C50633 +
            (((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50828 +
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50606 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C696) *
                 C33763) *
                C50887) *
               C50894) *
              C583 +
          (((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                  C696 +
              (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                  C50606) *
                 C33763 +
             ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50828) *
                C50887 +
            (((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C33763 +
             ((C14300 + C14299) * C696 + (C14302 + C14301) * C50606) * C50828) *
                C50633) *
               C50894 -
           ((((C8145 * C3494 + C50800 * C3498 + C8144 * C3322 +
               C50908 * C3326) *
                  C50606 +
              (C8145 * C3492 + C50800 * C3495 + C8144 * C3317 +
               C50908 * C3321) *
                  C696) *
                 C50828 +
             ((C14301 + C14302) * C50606 + (C14299 + C14300) * C696) * C33763) *
                C50633 +
            (((C8145 * C3496 + C50800 * C3499 + C8144 * C3320 +
               C50908 * C3325) *
                  C50606 +
              (C8145 * C3493 + C50800 * C3497 + C8144 * C3316 +
               C50908 * C3319) *
                  C696) *
                 C50828 +
             ((C14650 + C14649) * C50606 + (C14648 + C14647) * C696) * C33763) *
                C50887) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C283 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
             C8196 * C280) *
                C33763 +
            ((C14093 + C14094) * C283 + (C14095 + C14096) * C278 -
             C14087 * C284 - C14088 * C279 + C14089 * C285 + C14090 * C280) *
                C50828) *
               C50887 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C279 +
             (C8188 + C8187) * C285 + (C8190 + C8189) * C280) *
                C33763 +
            (C14091 * C283 + C14092 * C278 - C8565 * C284 - C8566 * C279 +
             (C8562 + C8561) * C285 + (C8564 + C8563) * C280) *
                C50828) *
               C50633) *
              C50894 +
          (((C14091 * C284 -
             ((C14096 + C14095) * C278 + (C14094 + C14093) * C283) +
             C14092 * C279 - C8565 * C285 - C8566 * C280) *
                C33763 +
            (C14845 * C284 -
             ((C14865 + C14866) * C278 + (C14867 + C14868) * C283) +
             C14854 * C279 - (C9147 + C9148) * C285 - (C9149 + C9150) * C280) *
                C50828) *
               C50887 +
           ((C14089 * C284 - (C14088 * C278 + C14087 * C283) + C14090 * C279 -
             (C8561 + C8562) * C285 - (C8563 + C8564) * C280) *
                C33763 +
            ((C9148 + C9147) * C284 - (C14855 * C278 + C14856 * C283) +
             (C9150 + C9149) * C279 -
             (C8145 * C1080 + C50800 * C1085 + C8144 * C947 + C50908 * C955) *
                 C285 -
             (C8145 * C1084 + C50800 * C1092 + C8144 * C956 + C50908 * C962) *
                 C280) *
                C50828) *
               C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C33763 +
            ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
               C50887 +
           (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C33763 +
            (C14091 * C696 + C14092 * C50606) * C50828) *
               C50633) *
              C1162 -
          (((C14855 * C50606 + C14856 * C696) * C50828 +
            (C14088 * C50606 + C14087 * C696) * C33763) *
               C50633 +
           (((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50828 +
            ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C33763) *
               C50887) *
              C1163 +
          ((((C14868 + C14867) * C696 + (C14866 + C14865) * C50606) * C33763 +
            ((C15229 + C15230) * C696 + (C15231 + C15232) * C50606) * C50828) *
               C50887 +
           ((C14845 * C696 + C14854 * C50606) * C33763 +
            ((C14870 + C14869) * C696 + (C14872 + C14871) * C50606) * C50828) *
               C50633) *
              C1164 -
          ((((C8145 * C6345 + C50800 * C6349 + C8144 * C6149 + C50908 * C6153) *
                 C50606 +
             (C8145 * C6343 + C50800 * C6346 + C8144 * C6144 + C50908 * C6148) *
                 C696) *
                C50828 +
            ((C14871 + C14872) * C50606 + (C14869 + C14870) * C696) * C33763) *
               C50633 +
           (((C8145 * C6347 + C50800 * C6350 + C8144 * C6147 + C50908 * C6152) *
                 C50606 +
             (C8145 * C6344 + C50800 * C6348 + C8144 * C6143 + C50908 * C6146) *
                 C696) *
                C50828 +
            ((C15232 + C15231) * C50606 + (C15230 + C15229) * C696) * C33763) *
               C50887) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C1285 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50936 -
             (C8179 + C8180) * C1286 - (C8181 + C8182) * C50920 +
             C8195 * C1287 + C8196 * C1282) *
                C33763 +
            ((C14093 + C14094) * C1285 + (C14095 + C14096) * C50936 -
             C14087 * C1286 - C14088 * C50920 + C14089 * C1287 +
             C14090 * C1282) *
                C50828) *
               C50887 +
           (((C8180 + C8179) * C1285 + (C8182 + C8181) * C50936 -
             (C8184 + C8183) * C1286 - (C8186 + C8185) * C50920 +
             (C8188 + C8187) * C1287 + (C8190 + C8189) * C1282) *
                C33763 +
            (C14091 * C1285 + C14092 * C50936 - C8565 * C1286 - C8566 * C50920 +
             (C8562 + C8561) * C1287 + (C8564 + C8563) * C1282) *
                C50828) *
               C50633) *
              C1643 +
          (((C14091 * C1286 -
             ((C14096 + C14095) * C50936 + (C14094 + C14093) * C1285) +
             C14092 * C50920 - C8565 * C1287 - C8566 * C1282) *
                C33763 +
            (C14845 * C1286 -
             ((C14865 + C14866) * C50936 + (C14867 + C14868) * C1285) +
             C14854 * C50920 - (C9147 + C9148) * C1287 -
             (C9149 + C9150) * C1282) *
                C50828) *
               C50887 +
           ((C14089 * C1286 - (C14088 * C50936 + C14087 * C1285) +
             C14090 * C50920 - (C8561 + C8562) * C1287 -
             (C8563 + C8564) * C1282) *
                C33763 +
            ((C9148 + C9147) * C1286 - (C14855 * C50936 + C14856 * C1285) +
             (C9150 + C9149) * C50920 -
             (C8145 * C1080 + C50800 * C1085 + C8144 * C947 + C50908 * C955) *
                 C1287 -
             (C8145 * C1084 + C50800 * C1092 + C8144 * C956 + C50908 * C962) *
                 C1282) *
                C50828) *
               C50633) *
              C50706) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C1391 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C1386 -
              (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
                 C33763 +
             ((C14093 + C14094) * C1391 + (C14095 + C14096) * C1386 -
              C14087 * C1392 - C14088 * C50611) *
                 C50828) *
                C50887 +
            (((C8180 + C8179) * C1391 + (C8182 + C8181) * C1386 -
              (C8184 + C8183) * C1392 - (C8186 + C8185) * C50611) *
                 C33763 +
             (C14091 * C1391 + C14092 * C1386 - C8565 * C1392 -
              C8566 * C50611) *
                 C50828) *
                C50633) *
               C1643 +
           (((C14091 * C1392 -
              ((C14096 + C14095) * C1386 + (C14094 + C14093) * C1391) +
              C14092 * C50611) *
                 C33763 +
             (C14845 * C1392 -
              ((C14865 + C14866) * C1386 + (C14867 + C14868) * C1391) +
              C14854 * C50611) *
                 C50828) *
                C50887 +
            ((C14089 * C1392 - (C14088 * C1386 + C14087 * C1391) +
              C14090 * C50611) *
                 C33763 +
             ((C9148 + C9147) * C1392 - (C14855 * C1386 + C14856 * C1391) +
              (C9150 + C9149) * C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C50893 +
          (((((C8369 + C8370) * C1392 -
              ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                   C1386 +
               (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                   C1391) +
              (C8371 + C8372) * C50611) *
                 C33763 +
             (C15879 * C1392 -
              ((C14646 + C14645) * C1386 + (C14644 + C14643) * C1391) +
              C15880 * C50611) *
                 C50828) *
                C50887 +
            (((C8374 + C8373) * C1392 -
              ((C8372 + C8371) * C1386 + (C8370 + C8369) * C1391) +
              (C8376 + C8375) * C50611) *
                 C33763 +
             ((C9902 + C9901) * C1392 - (C15881 * C1386 + C15882 * C1391) +
              (C9904 + C9903) * C50611) *
                 C50828) *
                C50633) *
               C1643 +
           ((((C14643 + C14644) * C1391 + (C14645 + C14646) * C1386 -
              C15882 * C1392 - C15881 * C50611) *
                 C33763 +
             ((C15083 + C15084) * C1391 + (C15085 + C15086) * C1386 -
              (C15088 + C15087) * C1392 - (C15090 + C15089) * C50611) *
                 C50828) *
                C50887 +
            ((C15879 * C1391 + C15880 * C1386 - (C9901 + C9902) * C1392 -
              (C9903 + C9904) * C50611) *
                 C33763 +
             ((C15087 + C15088) * C1391 + (C15089 + C15090) * C1386 -
              (C8145 * C3318 + C50800 * C3323 + C8144 * C1081 +
               C50908 * C1087) *
                  C1392 -
              (C8145 * C3324 + C50800 * C3327 + C8144 * C1086 +
               C50908 * C1093) *
                  C50611) *
                 C50828) *
                C50633) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C1391 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C1386 -
             (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
                C33763 +
            ((C14093 + C14094) * C1391 + (C14095 + C14096) * C1386 -
             C14087 * C1392 - C14088 * C50611) *
                C50828) *
               C50887 +
           (((C8180 + C8179) * C1391 + (C8182 + C8181) * C1386 -
             (C8184 + C8183) * C1392 - (C8186 + C8185) * C50611) *
                C33763 +
            (C14091 * C1391 + C14092 * C1386 - C8565 * C1392 - C8566 * C50611) *
                C50828) *
               C50633) *
              C50940 +
          (((C14091 * C1392 -
             ((C14096 + C14095) * C1386 + (C14094 + C14093) * C1391) +
             C14092 * C50611) *
                C33763 +
            (C14845 * C1392 -
             ((C14865 + C14866) * C1386 + (C14867 + C14868) * C1391) +
             C14854 * C50611) *
                C50828) *
               C50887 +
           ((C14089 * C1392 - (C14088 * C1386 + C14087 * C1391) +
             C14090 * C50611) *
                C33763 +
            ((C9148 + C9147) * C1392 - (C14855 * C1386 + C14856 * C1391) +
             (C9150 + C9149) * C50611) *
                C50828) *
               C50633) *
              C50929 +
          ((((C14868 + C14867) * C1391 + (C14866 + C14865) * C1386 -
             C14856 * C1392 - C14855 * C50611) *
                C33763 +
            ((C15229 + C15230) * C1391 + (C15231 + C15232) * C1386 -
             (C14869 + C14870) * C1392 - (C14871 + C14872) * C50611) *
                C50828) *
               C50887 +
           ((C14845 * C1391 + C14854 * C1386 - (C9147 + C9148) * C1392 -
             (C9149 + C9150) * C50611) *
                C33763 +
            ((C14870 + C14869) * C1391 + (C14872 + C14871) * C1386 -
             (C8145 * C6979 + C50800 * C6980 + C8144 * C1167 + C50908 * C1173) *
                 C1392 -
             (C8145 * C6981 + C50800 * C6982 + C8144 * C1172 + C50908 * C1179) *
                 C50611) *
                C50828) *
               C50633) *
              C1875) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C118 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C106 -
            (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
            C8196 * C108 - C8197 * C121 - C8198 * C109) *
               C33763 +
           ((C14093 + C14094) * C118 + (C14095 + C14096) * C106 -
            C14087 * C119 - C14088 * C107 + C14089 * C120 + C14090 * C108 -
            (C8561 + C8562) * C121 - (C8563 + C8564) * C109) *
               C50828) *
              C50887 +
          (((C8180 + C8179) * C118 + (C8182 + C8181) * C106 -
            (C8184 + C8183) * C119 - (C8186 + C8185) * C107 +
            (C8188 + C8187) * C120 + (C8190 + C8189) * C108 -
            (C8191 + C8192) * C121 - (C8193 + C8194) * C109) *
               C33763 +
           (C14091 * C118 + C14092 * C106 - C8565 * C119 - C8566 * C107 +
            (C8562 + C8561) * C120 + (C8564 + C8563) * C108 -
            (C8145 * C1523 + C50800 * C1524 + C8144 * C438 + C50908 * C448) *
                C121 -
            (C8145 * C1525 + C50800 * C1526 + C8144 * C449 + C50908 * C456) *
                C109) *
               C50828) *
              C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C49720 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50878 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
                C33763 +
            ((C14093 + C14094) * C49720 + (C14095 + C14096) * C50878 -
             C14087 * C49713 - C14088 * C50611) *
                C50828) *
               C50887 +
           (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50878 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50611) *
                C33763 +
            (C14091 * C49720 + C14092 * C50878 - C8565 * C49713 -
             C8566 * C50611) *
                C50828) *
               C50633) *
              C50694 * C582 +
          ((((C8369 + C8370) * C49713 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50878 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C49720) +
             (C8371 + C8372) * C50611) *
                C33763 +
            (C15879 * C49713 -
             ((C14646 + C14645) * C50878 + (C14644 + C14643) * C49720) +
             C15880 * C50611) *
                C50828) *
               C50887 +
           (((C8374 + C8373) * C49713 -
             ((C8372 + C8371) * C50878 + (C8370 + C8369) * C49720) +
             (C8376 + C8375) * C50611) *
                C33763 +
            ((C9902 + C9901) * C49713 - (C15881 * C50878 + C15882 * C49720) +
             (C9904 + C9903) * C50611) *
                C50828) *
               C50633) *
              C50694 * C583 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C49720 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50878 -
             (C8729 + C8730) * C49713 - (C8731 + C8732) * C50611) *
                C33763 +
            ((C14647 + C14648) * C49720 + (C14649 + C14650) * C50878 -
             (C14299 + C14300) * C49713 - (C14301 + C14302) * C50611) *
                C50828) *
               C50887 +
           (((C8730 + C8729) * C49720 + (C8732 + C8731) * C50878 -
             (C8733 + C8734) * C49713 - (C8735 + C8736) * C50611) *
                C33763 +
            ((C14300 + C14299) * C49720 + (C14302 + C14301) * C50878 -
             (C8145 * C4100 + C50800 * C4101 + C8144 * C816 + C50908 * C830) *
                 C49713 -
             (C8145 * C4102 + C50800 * C4103 + C8144 * C829 + C50908 * C840) *
                 C50611) *
                C50828) *
               C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C283 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
             C8196 * C280) *
                C33763 +
            ((C14093 + C14094) * C283 + (C14095 + C14096) * C278 -
             C14087 * C284 - C14088 * C279 + C14089 * C285 + C14090 * C280) *
                C50828) *
               C50887 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C279 +
             (C8188 + C8187) * C285 + (C8190 + C8189) * C280) *
                C33763 +
            (C14091 * C283 + C14092 * C278 - C8565 * C284 - C8566 * C279 +
             (C8562 + C8561) * C285 + (C8564 + C8563) * C280) *
                C50828) *
               C50633) *
              C50694 * C50893 +
          ((((C8369 + C8370) * C284 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C278 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C283) +
             (C8371 + C8372) * C279 - C8381 * C285 - C8382 * C280) *
                C33763 +
            (C15879 * C284 -
             ((C14646 + C14645) * C278 + (C14644 + C14643) * C283) +
             C15880 * C279 - (C9901 + C9902) * C285 - (C9903 + C9904) * C280) *
                C50828) *
               C50887 +
           (((C8374 + C8373) * C284 -
             ((C8372 + C8371) * C278 + (C8370 + C8369) * C283) +
             (C8376 + C8375) * C279 - (C8377 + C8378) * C285 -
             (C8379 + C8380) * C280) *
                C33763 +
            ((C9902 + C9901) * C284 - (C15881 * C278 + C15882 * C283) +
             (C9904 + C9903) * C279 -
             (C8145 * C815 + C50800 * C828 + C8144 * C814 + C50908 * C825) *
                 C285 -
             (C8145 * C827 + C50800 * C839 + C8144 * C826 + C50908 * C838) *
                 C280) *
                C50828) *
               C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C33763 +
            ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
               C50887 +
           (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C33763 +
            (C14091 * C696 + C14092 * C50606) * C50828) *
               C50633) *
              C50694 * C692 -
          (((C15881 * C50606 + C15882 * C696) * C50828 +
            ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C33763) *
               C50633 +
           (((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50828 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C33763) *
               C50887) *
              C50694 * C693 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C696 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50606) *
                C33763 +
            ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50828) *
               C50887 +
           (((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C33763 +
            ((C14300 + C14299) * C696 + (C14302 + C14301) * C50606) * C50828) *
               C50633) *
              C50694 * C694 -
          ((((C8145 * C3162 + C50800 * C3168 + C8144 * C3161 + C50908 * C3167) *
                 C50606 +
             (C8145 * C3156 + C50800 * C3163 + C8144 * C3155 + C50908 * C3160) *
                 C696) *
                C50828 +
            ((C8145 * C2878 + C50800 * C2882 + C8144 * C705 + C50908 * C711) *
                 C50606 +
             (C8145 * C2873 + C50800 * C2877 + C8144 * C699 + C50908 * C706) *
                 C696) *
                C33763) *
               C50633 +
           (((C8145 * C3164 + C50800 * C3169 + C8144 * C3159 + C50908 * C3166) *
                 C50606 +
             (C8145 * C3157 + C50800 * C3165 + C8144 * C3154 + C50908 * C3158) *
                 C696) *
                C50828 +
            ((C8145 * C2876 + C50800 * C2881 + C8144 * C707 + C50908 * C712) *
                 C50606 +
             (C8145 * C2872 + C50800 * C2875 + C8144 * C700 + C50908 * C708) *
                 C696) *
                C33763) *
               C50887) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C283 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
             C8196 * C280) *
                C33763 +
            ((C14093 + C14094) * C283 + (C14095 + C14096) * C278 -
             C14087 * C284 - C14088 * C279 + C14089 * C285 + C14090 * C280) *
                C50828) *
               C50887 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C279 +
             (C8188 + C8187) * C285 + (C8190 + C8189) * C280) *
                C33763 +
            (C14091 * C283 + C14092 * C278 - C8565 * C284 - C8566 * C279 +
             (C8562 + C8561) * C285 + (C8564 + C8563) * C280) *
                C50828) *
               C50633) *
              C50894 +
          (((C14091 * C284 -
             ((C14096 + C14095) * C278 + (C14094 + C14093) * C283) +
             C14092 * C279 - C8565 * C285 - C8566 * C280) *
                C33763 +
            (C14845 * C284 -
             ((C14865 + C14866) * C278 + (C14867 + C14868) * C283) +
             C14854 * C279 - (C9147 + C9148) * C285 - (C9149 + C9150) * C280) *
                C50828) *
               C50887 +
           ((C14089 * C284 - (C14088 * C278 + C14087 * C283) + C14090 * C279 -
             (C8561 + C8562) * C285 - (C8563 + C8564) * C280) *
                C33763 +
            ((C9148 + C9147) * C284 - (C14855 * C278 + C14856 * C283) +
             (C9150 + C9149) * C279 -
             (C8145 * C1080 + C50800 * C1085 + C8144 * C947 + C50908 * C955) *
                 C285 -
             (C8145 * C1084 + C50800 * C1092 + C8144 * C956 + C50908 * C962) *
                 C280) *
                C50828) *
               C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                  C696 +
              (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                  C50606) *
                 C33763 +
             ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50828) *
                C50887 +
            (((C8180 + C8179) * C696 + (C8182 + C8181) * C50606) * C33763 +
             (C14091 * C696 + C14092 * C50606) * C50828) *
                C50633) *
               C50894 -
           (((C14855 * C50606 + C14856 * C696) * C50828 +
             (C14088 * C50606 + C14087 * C696) * C33763) *
                C50633 +
            (((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50828 +
             ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C33763) *
                C50887) *
               C50706) *
              C582 +
          (((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C33763 +
             ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50828) *
                C50887 +
            ((C15879 * C696 + C15880 * C50606) * C33763 +
             ((C15087 + C15088) * C696 + (C15089 + C15090) * C50606) * C50828) *
                C50633) *
               C50706 -
           (((C15881 * C50606 + C15882 * C696) * C50828 +
             ((C8372 + C8371) * C50606 + (C8370 + C8369) * C696) * C33763) *
                C50633 +
            (((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50828 +
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50606 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C696) *
                 C33763) *
                C50887) *
               C50894) *
              C583 +
          (((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                  C696 +
              (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                  C50606) *
                 C33763 +
             ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50828) *
                C50887 +
            (((C8730 + C8729) * C696 + (C8732 + C8731) * C50606) * C33763 +
             ((C14300 + C14299) * C696 + (C14302 + C14301) * C50606) * C50828) *
                C50633) *
               C50894 -
           ((((C8145 * C3494 + C50800 * C3498 + C8144 * C3322 +
               C50908 * C3326) *
                  C50606 +
              (C8145 * C3492 + C50800 * C3495 + C8144 * C3317 +
               C50908 * C3321) *
                  C696) *
                 C50828 +
             ((C14301 + C14302) * C50606 + (C14299 + C14300) * C696) * C33763) *
                C50633 +
            (((C8145 * C3496 + C50800 * C3499 + C8144 * C3320 +
               C50908 * C3325) *
                  C50606 +
              (C8145 * C3493 + C50800 * C3497 + C8144 * C3316 +
               C50908 * C3319) *
                  C696) *
                 C50828 +
             ((C14650 + C14649) * C50606 + (C14648 + C14647) * C696) * C33763) *
                C50887) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C1285 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50936 -
            (C8179 + C8180) * C1286 - (C8181 + C8182) * C50920 + C8195 * C1287 +
            C8196 * C1282) *
               C50943 +
           ((C14093 + C14094) * C1285 + (C14095 + C14096) * C50936 -
            C14087 * C1286 - C14088 * C50920 + C14089 * C1287 +
            C14090 * C1282) *
               C50944 +
           (C47926 * C1285 + C47927 * C50936 - C14856 * C1286 -
            C14855 * C50920 + (C9148 + C9147) * C1287 +
            (C9150 + C9149) * C1282) *
               C44456) *
              C50628 * C50694 * C1283 +
          (((C8369 + C8370) * C1286 -
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50936 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C1285) +
            (C8371 + C8372) * C50920 - C8381 * C1287 - C8382 * C1282) *
               C50943 +
           (C15879 * C1286 -
            ((C14646 + C14645) * C50936 + (C14644 + C14643) * C1285) +
            C15880 * C50920 - (C9901 + C9902) * C1287 -
            (C9903 + C9904) * C1282) *
               C50944 +
           ((C15087 + C15088) * C1286 - (C48091 * C50936 + C48092 * C1285) +
            (C15089 + C15090) * C50920 -
            (C8145 * C3318 + C50800 * C3323 + C8144 * C1081 + C50908 * C1087) *
                C1287 -
            (C8145 * C3324 + C50800 * C3327 + C8144 * C1086 + C50908 * C1093) *
                C1282) *
               C44456) *
              C50628 * C50694 * C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C1391 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C1386 -
            (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
               C50943 +
           ((C14093 + C14094) * C1391 + (C14095 + C14096) * C1386 -
            C14087 * C1392 - C14088 * C50611) *
               C50944 +
           (C47926 * C1391 + C47927 * C1386 - C14856 * C1392 -
            C14855 * C50611) *
               C44456) *
              C50628 * C50694 * C50939 +
          (((C8369 + C8370) * C1392 -
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C1386 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C1391) +
            (C8371 + C8372) * C50611) *
               C50943 +
           (C15879 * C1392 -
            ((C14646 + C14645) * C1386 + (C14644 + C14643) * C1391) +
            C15880 * C50611) *
               C50944 +
           ((C15087 + C15088) * C1392 - (C48091 * C1386 + C48092 * C1391) +
            (C15089 + C15090) * C50611) *
               C44456) *
              C50628 * C50694 * C50926 +
          (((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                C1391 +
            (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                C1386 -
            (C8729 + C8730) * C1392 - (C8731 + C8732) * C50611) *
               C50943 +
           ((C14647 + C14648) * C1391 + (C14649 + C14650) * C1386 -
            (C14299 + C14300) * C1392 - (C14301 + C14302) * C50611) *
               C50944 +
           ((C47776 + C47777) * C1391 + (C47778 + C47779) * C1386 -
            (C8145 * C3492 + C50800 * C3495 + C8144 * C3317 + C50908 * C3321) *
                C1392 -
            (C8145 * C3494 + C50800 * C3498 + C8144 * C3322 + C50908 * C3326) *
                C50611) *
               C44456) *
              C50628 * C50694 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C1391 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C1386 -
             (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
                C50943 +
            ((C14093 + C14094) * C1391 + (C14095 + C14096) * C1386 -
             C14087 * C1392 - C14088 * C50611) *
                C50944 +
            (C47926 * C1391 + C47927 * C1386 - C14856 * C1392 -
             C14855 * C50611) *
                C44456) *
               C50628 * C50894 +
           ((C14091 * C1392 -
             ((C14096 + C14095) * C1386 + (C14094 + C14093) * C1391) +
             C14092 * C50611) *
                C50943 +
            (C14845 * C1392 -
             ((C14865 + C14866) * C1386 + (C14867 + C14868) * C1391) +
             C14854 * C50611) *
                C50944 +
            ((C14870 + C14869) * C1392 - (C48199 * C1386 + C48200 * C1391) +
             (C14872 + C14871) * C50611) *
                C44456) *
               C50628 * C50706) *
              C1283 +
          ((((C8369 + C8370) * C1392 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C1386 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C1391) +
             (C8371 + C8372) * C50611) *
                C50943 +
            (C15879 * C1392 -
             ((C14646 + C14645) * C1386 + (C14644 + C14643) * C1391) +
             C15880 * C50611) *
                C50944 +
            ((C15087 + C15088) * C1392 - (C48091 * C1386 + C48092 * C1391) +
             (C15089 + C15090) * C50611) *
                C44456) *
               C50628 * C50894 +
           (((C14643 + C14644) * C1391 + (C14645 + C14646) * C1386 -
             C15882 * C1392 - C15881 * C50611) *
                C50943 +
            ((C15083 + C15084) * C1391 + (C15085 + C15086) * C1386 -
             (C15088 + C15087) * C1392 - (C15090 + C15089) * C50611) *
                C50944 +
            ((C48094 + C48095) * C1391 + (C48096 + C48097) * C1386 -
             (C8145 * C3598 + C50800 * C3604 + C8144 * C3599 + C50908 * C3605) *
                 C1392 -
             (C8145 * C3602 + C50800 * C3610 + C8144 * C3603 + C50908 * C3611) *
                 C50611) *
                C44456) *
               C50628 * C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C49720 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50878 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
                C50943 +
            ((C14093 + C14094) * C49720 + (C14095 + C14096) * C50878 -
             C14087 * C49713 - C14088 * C50611) *
                C50944 +
            C47934 * C44456) *
               C50628 * C1643 +
           ((C14091 * C49713 -
             ((C14096 + C14095) * C50878 + (C14094 + C14093) * C49720) +
             C14092 * C50611) *
                C50943 +
            (C14845 * C49713 -
             ((C14865 + C14866) * C50878 + (C14867 + C14868) * C49720) +
             C14854 * C50611) *
                C50944 +
            ((C14870 + C14869) * C49713 - (C48199 * C50878 + C48200 * C49720) +
             (C14872 + C14871) * C50611) *
                C44456) *
               C50628 * C50706) *
              C1283 +
          ((((C8369 + C8370) * C49713 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C50878 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C49720) +
             (C8371 + C8372) * C50611) *
                C50943 +
            (C15879 * C49713 -
             ((C14646 + C14645) * C50878 + (C14644 + C14643) * C49720) +
             C15880 * C50611) *
                C50944 +
            ((C15087 + C15088) * C49713 - (C48091 * C50878 + C48092 * C49720) +
             (C15089 + C15090) * C50611) *
                C44456) *
               C50628 * C1643 +
           (((C14643 + C14644) * C49720 + (C14645 + C14646) * C50878 -
             C15882 * C49713 - C15881 * C50611) *
                C50943 +
            ((C15083 + C15084) * C49720 + (C15085 + C15086) * C50878 -
             (C15088 + C15087) * C49713 - (C15090 + C15089) * C50611) *
                C50944 +
            ((C48094 + C48095) * C49720 + (C48096 + C48097) * C50878 -
             (C8145 * C3598 + C50800 * C3604 + C8144 * C3599 + C50908 * C3605) *
                 C49713 -
             (C8145 * C3602 + C50800 * C3610 + C8144 * C3603 + C50908 * C3611) *
                 C50611) *
                C44456) *
               C50628 * C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50943 +
            ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50944 +
            C48093 * C44456) *
               C50628 * C1643 -
           (C48215 * C44456 +
            ((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50944 +
            ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C50943) *
               C50628 * C50706) *
              C50939 +
          ((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C50943 +
            ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50944 +
            ((C48094 + C48095) * C696 + (C48096 + C48097) * C50606) * C44456) *
               C50628 * C50706 -
           (C48100 * C44456 +
            ((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50944 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C50943) *
               C50628 * C1643) *
              C50926 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C696 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50606) *
                C50943 +
            ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50944 +
            ((C47776 + C47777) * C696 + (C47778 + C47779) * C50606) * C44456) *
               C50628 * C1643 -
           (((C8145 * C20817 + C50800 * C20819 + C8144 * C3606 +
              C50908 * C3612) *
                 C50606 +
             (C8145 * C20816 + C50800 * C20818 + C8144 * C3600 +
              C50908 * C3608) *
                 C696) *
                C44456 +
            ((C47779 + C47778) * C50606 + (C47777 + C47776) * C696) * C50944 +
            ((C14650 + C14649) * C50606 + (C14648 + C14647) * C696) * C50943) *
               C50628 * C50706) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50943 +
            ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50944 +
            C48093 * C44456) *
               C50628 * C50940 -
           (C48215 * C44456 +
            ((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50944 +
            ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C50943) *
               C50628 * C50929 +
           (C48093 * C50943 +
            ((C15229 + C15230) * C696 + (C15231 + C15232) * C50606) * C50944 +
            ((C48211 + C48212) * C696 + (C48213 + C48214) * C50606) * C44456) *
               C50628 * C1875) *
              C1283 +
          ((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C50943 +
            ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50944 +
            ((C48094 + C48095) * C696 + (C48096 + C48097) * C50606) * C44456) *
               C50628 * C50929 -
           (C48100 * C44456 +
            ((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50944 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C50943) *
               C50628 * C50940 -
           (((C8145 * C22978 + C50800 * C22980 + C8144 * C6347 +
              C50908 * C6350) *
                 C50606 +
             (C8145 * C22977 + C50800 * C22979 + C8144 * C6344 +
              C50908 * C6348) *
                 C696) *
                C44456 +
            ((C48097 + C48096) * C50606 + (C48095 + C48094) * C696) * C50944 +
            C48100 * C50943) *
               C50628 * C1875) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C49720 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50878 -
            (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
               C50943 +
           ((C14093 + C14094) * C49720 + (C14095 + C14096) * C50878 -
            C14087 * C49713 - C14088 * C50611) *
               C50944 +
           ((C14868 + C14867) * C49720 + (C14866 + C14865) * C50878 -
            C14856 * C49713 - C14855 * C50611) *
               C44456) *
              C50628 * C50694 * C582 +
          (((C8369 + C8370) * C49713 -
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50878 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C49720) +
            (C8371 + C8372) * C50611) *
               C50943 +
           (C15879 * C49713 -
            ((C14646 + C14645) * C50878 + (C14644 + C14643) * C49720) +
            C15880 * C50611) *
               C50944 +
           ((C15087 + C15088) * C49713 -
            ((C15086 + C15085) * C50878 + (C15084 + C15083) * C49720) +
            (C15089 + C15090) * C50611) *
               C44456) *
              C50628 * C50694 * C583 +
          (((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                C49720 +
            (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                C50878 -
            (C8729 + C8730) * C49713 - (C8731 + C8732) * C50611) *
               C50943 +
           ((C14647 + C14648) * C49720 + (C14649 + C14650) * C50878 -
            (C14299 + C14300) * C49713 - (C14301 + C14302) * C50611) *
               C50944 +
           ((C8144 * C3316 + C50908 * C3319 + C8145 * C3493 + C50800 * C3497) *
                C49720 +
            (C8144 * C3320 + C50908 * C3325 + C8145 * C3496 + C50800 * C3499) *
                C50878 -
            (C8145 * C3492 + C50800 * C3495 + C8144 * C3317 + C50908 * C3321) *
                C49713 -
            (C8145 * C3494 + C50800 * C3498 + C8144 * C3322 + C50908 * C3326) *
                C50611) *
               C44456) *
              C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
               C118 +
           (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
               C106 -
           (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
           C8196 * C108 - C8197 * C121 - C8198 * C109) *
              C50943 +
          ((C14093 + C14094) * C118 + (C14095 + C14096) * C106 - C14087 * C119 -
           C14088 * C107 + C14089 * C120 + C14090 * C108 -
           (C8561 + C8562) * C121 - (C8563 + C8564) * C109) *
              C50944 +
          ((C14868 + C14867) * C118 + (C14866 + C14865) * C106 - C14856 * C119 -
           C14855 * C107 + (C9148 + C9147) * C120 + (C9150 + C9149) * C108 -
           (C8145 * C1080 + C50800 * C1085 + C8144 * C947 + C50908 * C955) *
               C121 -
           (C8145 * C1084 + C50800 * C1092 + C8144 * C956 + C50908 * C962) *
               C109) *
              C44456) *
         C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C49720 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50878 -
            (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
               C50943 +
           ((C14093 + C14094) * C49720 + (C14095 + C14096) * C50878 -
            C14087 * C49713 - C14088 * C50611) *
               C50944 +
           C47934 * C44456) *
              C50628 * C941 +
          ((C14091 * C49713 -
            ((C14096 + C14095) * C50878 + (C14094 + C14093) * C49720) +
            C14092 * C50611) *
               C50943 +
           (C14845 * C49713 -
            ((C14865 + C14866) * C50878 + (C14867 + C14868) * C49720) +
            C14854 * C50611) *
               C50944 +
           ((C14870 + C14869) * C49713 -
            ((C15232 + C15231) * C50878 + (C15230 + C15229) * C49720) +
            (C14872 + C14871) * C50611) *
               C44456) *
              C50628 * C942 +
          (C47934 * C50943 +
           ((C15229 + C15230) * C49720 + (C15231 + C15232) * C50878 -
            (C14869 + C14870) * C49713 - (C14871 + C14872) * C50611) *
               C50944 +
           ((C8144 * C6143 + C50908 * C6146 + C8145 * C6344 + C50800 * C6348) *
                C49720 +
            (C8144 * C6147 + C50908 * C6152 + C8145 * C6347 + C50800 * C6350) *
                C50878 -
            (C8145 * C6343 + C50800 * C6346 + C8144 * C6144 + C50908 * C6148) *
                C49713 -
            (C8145 * C6345 + C50800 * C6349 + C8144 * C6149 + C50908 * C6153) *
                C50611) *
               C44456) *
              C50628 * C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C696 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50606) *
               C50943 +
           ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50944 +
           ((C14868 + C14867) * C696 + (C14866 + C14865) * C50606) * C44456) *
              C50628 * C50694 * C692 -
          (((C15086 + C15085) * C50606 + (C15084 + C15083) * C696) * C44456 +
           ((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50944 +
           ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                C50606 +
            (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                C696) *
               C50943) *
              C50628 * C50694 * C693 +
          (((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                C696 +
            (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                C50606) *
               C50943 +
           ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50944 +
           ((C8144 * C3316 + C50908 * C3319 + C8145 * C3493 + C50800 * C3497) *
                C696 +
            (C8144 * C3320 + C50908 * C3325 + C8145 * C3496 + C50800 * C3499) *
                C50606) *
               C44456) *
              C50628 * C50694 * C694 -
          (((C8145 * C20747 + C50800 * C20749 + C8144 * C3496 +
             C50908 * C3499) *
                C50606 +
            (C8145 * C20746 + C50800 * C20748 + C8144 * C3493 +
             C50908 * C3497) *
                C696) *
               C44456 +
           ((C8145 * C3164 + C50800 * C3169 + C8144 * C3159 + C50908 * C3166) *
                C50606 +
            (C8145 * C3157 + C50800 * C3165 + C8144 * C3154 + C50908 * C3158) *
                C696) *
               C50944 +
           ((C8145 * C2876 + C50800 * C2881 + C8144 * C707 + C50908 * C712) *
                C50606 +
            (C8145 * C2872 + C50800 * C2875 + C8144 * C700 + C50908 * C708) *
                C696) *
               C50943) *
              C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C283 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
            C8196 * C280) *
               C50943 +
           ((C14093 + C14094) * C283 + (C14095 + C14096) * C278 -
            C14087 * C284 - C14088 * C279 + C14089 * C285 + C14090 * C280) *
               C50944 +
           ((C14868 + C14867) * C283 + (C14866 + C14865) * C278 -
            C14856 * C284 - C14855 * C279 + (C9148 + C9147) * C285 +
            (C9150 + C9149) * C280) *
               C44456) *
              C50628 * C50694 * C50893 +
          (((C8369 + C8370) * C284 -
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C278 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C283) +
            (C8371 + C8372) * C279 - C8381 * C285 - C8382 * C280) *
               C50943 +
           (C15879 * C284 -
            ((C14646 + C14645) * C278 + (C14644 + C14643) * C283) +
            C15880 * C279 - (C9901 + C9902) * C285 - (C9903 + C9904) * C280) *
               C50944 +
           ((C15087 + C15088) * C284 -
            ((C15086 + C15085) * C278 + (C15084 + C15083) * C283) +
            (C15089 + C15090) * C279 -
            (C8145 * C3318 + C50800 * C3323 + C8144 * C1081 + C50908 * C1087) *
                C285 -
            (C8145 * C3324 + C50800 * C3327 + C8144 * C1086 + C50908 * C1093) *
                C280) *
               C44456) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50943 +
            ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50944 +
            C48093 * C44456) *
               C50628 * C941 -
           (((C15232 + C15231) * C50606 + (C15230 + C15229) * C696) * C44456 +
            ((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50944 +
            ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C50943) *
               C50628 * C942 +
           (C48093 * C50943 +
            ((C15229 + C15230) * C696 + (C15231 + C15232) * C50606) * C50944 +
            ((C8144 * C6143 + C50908 * C6146 + C8145 * C6344 + C50800 * C6348) *
                 C696 +
             (C8144 * C6147 + C50908 * C6152 + C8145 * C6347 + C50800 * C6350) *
                 C50606) *
                C44456) *
               C50628 * C943) *
              C50893 +
          ((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C50943 +
            ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50944 +
            ((C48094 + C48095) * C696 + (C48096 + C48097) * C50606) * C44456) *
               C50628 * C942 -
           (C48100 * C44456 +
            ((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50944 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C50943) *
               C50628 * C941 -
           (((C8145 * C22978 + C50800 * C22980 + C8144 * C6347 +
              C50908 * C6350) *
                 C50606 +
             (C8145 * C22977 + C50800 * C22979 + C8144 * C6344 +
              C50908 * C6348) *
                 C696) *
                C44456 +
            ((C48097 + C48096) * C50606 + (C48095 + C48094) * C696) * C50944 +
            C48100 * C50943) *
               C50628 * C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50943 +
            ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50944 +
            ((C14868 + C14867) * C696 + (C14866 + C14865) * C50606) * C44456) *
               C50628 * C50894 -
           (((C15232 + C15231) * C50606 + (C15230 + C15229) * C696) * C44456 +
            ((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50944 +
            ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C50943) *
               C50628 * C50706) *
              C582 +
          ((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C50943 +
            ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50944 +
            ((C8144 * C3601 + C50908 * C3609 + C8145 * C3600 + C50800 * C3608) *
                 C696 +
             (C8144 * C3607 + C50908 * C3613 + C8145 * C3606 + C50800 * C3612) *
                 C50606) *
                C44456) *
               C50628 * C50706 -
           (((C15086 + C15085) * C50606 + (C15084 + C15083) * C696) * C44456 +
            ((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50944 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C50943) *
               C50628 * C50894) *
              C583 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C696 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50606) *
                C50943 +
            ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50944 +
            ((C47776 + C47777) * C696 + (C47778 + C47779) * C50606) * C44456) *
               C50628 * C50894 -
           (((C8145 * C20817 + C50800 * C20819 + C8144 * C3606 +
              C50908 * C3612) *
                 C50606 +
             (C8145 * C20816 + C50800 * C20818 + C8144 * C3600 +
              C50908 * C3608) *
                 C696) *
                C44456 +
            ((C47779 + C47778) * C50606 + (C47777 + C47776) * C696) * C50944 +
            ((C14650 + C14649) * C50606 + (C14648 + C14647) * C696) * C50943) *
               C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C283 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
            C8196 * C280) *
               C50943 +
           ((C14093 + C14094) * C283 + (C14095 + C14096) * C278 -
            C14087 * C284 - C14088 * C279 + C14089 * C285 + C14090 * C280) *
               C50944 +
           ((C14868 + C14867) * C283 + (C14866 + C14865) * C278 -
            C14856 * C284 - C14855 * C279 + (C9148 + C9147) * C285 +
            (C9150 + C9149) * C280) *
               C44456) *
              C50628 * C50894 +
          ((C14091 * C284 -
            ((C14096 + C14095) * C278 + (C14094 + C14093) * C283) +
            C14092 * C279 - C8565 * C285 - C8566 * C280) *
               C50943 +
           (C14845 * C284 -
            ((C14865 + C14866) * C278 + (C14867 + C14868) * C283) +
            C14854 * C279 - (C9147 + C9148) * C285 - (C9149 + C9150) * C280) *
               C50944 +
           ((C14870 + C14869) * C284 -
            ((C15232 + C15231) * C278 + (C15230 + C15229) * C283) +
            (C14872 + C14871) * C279 -
            (C8145 * C6979 + C50800 * C6980 + C8144 * C1167 + C50908 * C1173) *
                C285 -
            (C8145 * C6981 + C50800 * C6982 + C8144 * C1172 + C50908 * C1179) *
                C280) *
               C44456) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C696 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50606) *
               C50943 +
           ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50944 +
           C48093 * C44456) *
              C50628 * C1162 -
          (C48215 * C44456 +
           ((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50944 +
           ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C50943) *
              C50628 * C1163 +
          (C48093 * C50943 +
           ((C15229 + C15230) * C696 + (C15231 + C15232) * C50606) * C50944 +
           ((C48211 + C48212) * C696 + (C48213 + C48214) * C50606) * C44456) *
              C50628 * C1164 -
          (((C8145 * C23100 + C50800 * C23102 + C8144 * C6477 +
             C50908 * C6480) *
                C50606 +
            (C8145 * C23099 + C50800 * C23101 + C8144 * C6474 +
             C50908 * C6478) *
                C696) *
               C44456 +
           ((C48214 + C48213) * C50606 + (C48212 + C48211) * C696) * C50944 +
           C48215 * C50943) *
              C50628 * C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C1285 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50936 -
            (C8179 + C8180) * C1286 - (C8181 + C8182) * C50920 + C8195 * C1287 +
            C8196 * C1282) *
               C50943 +
           ((C14093 + C14094) * C1285 + (C14095 + C14096) * C50936 -
            C14087 * C1286 - C14088 * C50920 + C14089 * C1287 +
            C14090 * C1282) *
               C50944 +
           (C47926 * C1285 + C47927 * C50936 - C14856 * C1286 -
            C14855 * C50920 + (C9148 + C9147) * C1287 +
            (C9150 + C9149) * C1282) *
               C44456) *
              C50628 * C1643 +
          ((C14091 * C1286 -
            ((C14096 + C14095) * C50936 + (C14094 + C14093) * C1285) +
            C14092 * C50920 - C8565 * C1287 - C8566 * C1282) *
               C50943 +
           (C14845 * C1286 -
            ((C14865 + C14866) * C50936 + (C14867 + C14868) * C1285) +
            C14854 * C50920 - (C9147 + C9148) * C1287 -
            (C9149 + C9150) * C1282) *
               C50944 +
           ((C14870 + C14869) * C1286 - (C48199 * C50936 + C48200 * C1285) +
            (C14872 + C14871) * C50920 -
            (C8145 * C6979 + C50800 * C6980 + C8144 * C1167 + C50908 * C1173) *
                C1287 -
            (C8145 * C6981 + C50800 * C6982 + C8144 * C1172 + C50908 * C1179) *
                C1282) *
               C44456) *
              C50628 * C50706) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C1391 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C1386 -
             (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
                C50943 +
            ((C14093 + C14094) * C1391 + (C14095 + C14096) * C1386 -
             C14087 * C1392 - C14088 * C50611) *
                C50944 +
            (C47926 * C1391 + C47927 * C1386 - C14856 * C1392 -
             C14855 * C50611) *
                C44456) *
               C50628 * C1643 +
           ((C14091 * C1392 -
             ((C14096 + C14095) * C1386 + (C14094 + C14093) * C1391) +
             C14092 * C50611) *
                C50943 +
            (C14845 * C1392 -
             ((C14865 + C14866) * C1386 + (C14867 + C14868) * C1391) +
             C14854 * C50611) *
                C50944 +
            ((C14870 + C14869) * C1392 - (C48199 * C1386 + C48200 * C1391) +
             (C14872 + C14871) * C50611) *
                C44456) *
               C50628 * C50706) *
              C50893 +
          ((((C8369 + C8370) * C1392 -
             ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                  C1386 +
              (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                  C1391) +
             (C8371 + C8372) * C50611) *
                C50943 +
            (C15879 * C1392 -
             ((C14646 + C14645) * C1386 + (C14644 + C14643) * C1391) +
             C15880 * C50611) *
                C50944 +
            ((C15087 + C15088) * C1392 - (C48091 * C1386 + C48092 * C1391) +
             (C15089 + C15090) * C50611) *
                C44456) *
               C50628 * C1643 +
           (((C14643 + C14644) * C1391 + (C14645 + C14646) * C1386 -
             C15882 * C1392 - C15881 * C50611) *
                C50943 +
            ((C15083 + C15084) * C1391 + (C15085 + C15086) * C1386 -
             (C15088 + C15087) * C1392 - (C15090 + C15089) * C50611) *
                C50944 +
            ((C48094 + C48095) * C1391 + (C48096 + C48097) * C1386 -
             (C8145 * C3598 + C50800 * C3604 + C8144 * C3599 + C50908 * C3605) *
                 C1392 -
             (C8145 * C3602 + C50800 * C3610 + C8144 * C3603 + C50908 * C3611) *
                 C50611) *
                C44456) *
               C50628 * C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C1391 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C1386 -
            (C8179 + C8180) * C1392 - (C8181 + C8182) * C50611) *
               C50943 +
           ((C14093 + C14094) * C1391 + (C14095 + C14096) * C1386 -
            C14087 * C1392 - C14088 * C50611) *
               C50944 +
           C49194 * C44456) *
              C50628 * C50940 +
          ((C14091 * C1392 -
            ((C14096 + C14095) * C1386 + (C14094 + C14093) * C1391) +
            C14092 * C50611) *
               C50943 +
           (C14845 * C1392 -
            ((C14865 + C14866) * C1386 + (C14867 + C14868) * C1391) +
            C14854 * C50611) *
               C50944 +
           ((C14870 + C14869) * C1392 - (C48199 * C1386 + C48200 * C1391) +
            (C14872 + C14871) * C50611) *
               C44456) *
              C50628 * C50929 +
          (C49194 * C50943 +
           ((C15229 + C15230) * C1391 + (C15231 + C15232) * C1386 -
            (C14869 + C14870) * C1392 - (C14871 + C14872) * C50611) *
               C50944 +
           ((C48211 + C48212) * C1391 + (C48213 + C48214) * C1386 -
            (C8145 * C6343 + C50800 * C6346 + C8144 * C6144 + C50908 * C6148) *
                C1392 -
            (C8145 * C6345 + C50800 * C6349 + C8144 * C6149 + C50908 * C6153) *
                C50611) *
               C44456) *
              C50628 * C1875) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
               C118 +
           (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
               C106 -
           (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
           C8196 * C108 - C8197 * C121 - C8198 * C109) *
              C50943 +
          ((C14093 + C14094) * C118 + (C14095 + C14096) * C106 - C14087 * C119 -
           C14088 * C107 + C14089 * C120 + C14090 * C108 -
           (C8561 + C8562) * C121 - (C8563 + C8564) * C109) *
              C50944 +
          ((C14868 + C14867) * C118 + (C14866 + C14865) * C106 - C14856 * C119 -
           C14855 * C107 + (C9148 + C9147) * C120 + (C9150 + C9149) * C108 -
           (C8145 * C1080 + C50800 * C1085 + C8144 * C947 + C50908 * C955) *
               C121 -
           (C8145 * C1084 + C50800 * C1092 + C8144 * C956 + C50908 * C962) *
               C109) *
              C44456) *
         C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C49720 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50878 -
            (C8179 + C8180) * C49713 - (C8181 + C8182) * C50611) *
               C50943 +
           ((C14093 + C14094) * C49720 + (C14095 + C14096) * C50878 -
            C14087 * C49713 - C14088 * C50611) *
               C50944 +
           ((C14868 + C14867) * C49720 + (C14866 + C14865) * C50878 -
            C14856 * C49713 - C14855 * C50611) *
               C44456) *
              C50628 * C50694 * C582 +
          (((C8369 + C8370) * C49713 -
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50878 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C49720) +
            (C8371 + C8372) * C50611) *
               C50943 +
           (C15879 * C49713 -
            ((C14646 + C14645) * C50878 + (C14644 + C14643) * C49720) +
            C15880 * C50611) *
               C50944 +
           ((C15087 + C15088) * C49713 -
            ((C15086 + C15085) * C50878 + (C15084 + C15083) * C49720) +
            (C15089 + C15090) * C50611) *
               C44456) *
              C50628 * C50694 * C583 +
          (((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                C49720 +
            (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                C50878 -
            (C8729 + C8730) * C49713 - (C8731 + C8732) * C50611) *
               C50943 +
           ((C14647 + C14648) * C49720 + (C14649 + C14650) * C50878 -
            (C14299 + C14300) * C49713 - (C14301 + C14302) * C50611) *
               C50944 +
           ((C8144 * C3316 + C50908 * C3319 + C8145 * C3493 + C50800 * C3497) *
                C49720 +
            (C8144 * C3320 + C50908 * C3325 + C8145 * C3496 + C50800 * C3499) *
                C50878 -
            (C8145 * C3492 + C50800 * C3495 + C8144 * C3317 + C50908 * C3321) *
                C49713 -
            (C8145 * C3494 + C50800 * C3498 + C8144 * C3322 + C50908 * C3326) *
                C50611) *
               C44456) *
              C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C283 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
            C8196 * C280) *
               C50943 +
           ((C14093 + C14094) * C283 + (C14095 + C14096) * C278 -
            C14087 * C284 - C14088 * C279 + C14089 * C285 + C14090 * C280) *
               C50944 +
           ((C14868 + C14867) * C283 + (C14866 + C14865) * C278 -
            C14856 * C284 - C14855 * C279 + (C9148 + C9147) * C285 +
            (C9150 + C9149) * C280) *
               C44456) *
              C50628 * C50694 * C50893 +
          (((C8369 + C8370) * C284 -
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C278 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C283) +
            (C8371 + C8372) * C279 - C8381 * C285 - C8382 * C280) *
               C50943 +
           (C15879 * C284 -
            ((C14646 + C14645) * C278 + (C14644 + C14643) * C283) +
            C15880 * C279 - (C9901 + C9902) * C285 - (C9903 + C9904) * C280) *
               C50944 +
           ((C15087 + C15088) * C284 -
            ((C15086 + C15085) * C278 + (C15084 + C15083) * C283) +
            (C15089 + C15090) * C279 -
            (C8145 * C3318 + C50800 * C3323 + C8144 * C1081 + C50908 * C1087) *
                C285 -
            (C8145 * C3324 + C50800 * C3327 + C8144 * C1086 + C50908 * C1093) *
                C280) *
               C44456) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C696 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C50606) *
               C50943 +
           ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50944 +
           ((C14868 + C14867) * C696 + (C14866 + C14865) * C50606) * C44456) *
              C50628 * C50694 * C692 -
          (((C15086 + C15085) * C50606 + (C15084 + C15083) * C696) * C44456 +
           ((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50944 +
           ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                C50606 +
            (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                C696) *
               C50943) *
              C50628 * C50694 * C693 +
          (((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                C696 +
            (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                C50606) *
               C50943 +
           ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50944 +
           ((C8144 * C3316 + C50908 * C3319 + C8145 * C3493 + C50800 * C3497) *
                C696 +
            (C8144 * C3320 + C50908 * C3325 + C8145 * C3496 + C50800 * C3499) *
                C50606) *
               C44456) *
              C50628 * C50694 * C694 -
          (((C8145 * C20747 + C50800 * C20749 + C8144 * C3496 +
             C50908 * C3499) *
                C50606 +
            (C8145 * C20746 + C50800 * C20748 + C8144 * C3493 +
             C50908 * C3497) *
                C696) *
               C44456 +
           ((C8145 * C3164 + C50800 * C3169 + C8144 * C3159 + C50908 * C3166) *
                C50606 +
            (C8145 * C3157 + C50800 * C3165 + C8144 * C3154 + C50908 * C3158) *
                C696) *
               C50944 +
           ((C8145 * C2876 + C50800 * C2881 + C8144 * C707 + C50908 * C712) *
                C50606 +
            (C8145 * C2872 + C50800 * C2875 + C8144 * C700 + C50908 * C708) *
                C696) *
               C50943) *
              C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                C283 +
            (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C279 + C8195 * C285 +
            C8196 * C280) *
               C50943 +
           ((C14093 + C14094) * C283 + (C14095 + C14096) * C278 -
            C14087 * C284 - C14088 * C279 + C14089 * C285 + C14090 * C280) *
               C50944 +
           ((C14868 + C14867) * C283 + (C14866 + C14865) * C278 -
            C14856 * C284 - C14855 * C279 + (C9148 + C9147) * C285 +
            (C9150 + C9149) * C280) *
               C44456) *
              C50628 * C50894 +
          ((C14091 * C284 -
            ((C14096 + C14095) * C278 + (C14094 + C14093) * C283) +
            C14092 * C279 - C8565 * C285 - C8566 * C280) *
               C50943 +
           (C14845 * C284 -
            ((C14865 + C14866) * C278 + (C14867 + C14868) * C283) +
            C14854 * C279 - (C9147 + C9148) * C285 - (C9149 + C9150) * C280) *
               C50944 +
           ((C14870 + C14869) * C284 -
            ((C15232 + C15231) * C278 + (C15230 + C15229) * C283) +
            (C14872 + C14871) * C279 -
            (C8145 * C6979 + C50800 * C6980 + C8144 * C1167 + C50908 * C1173) *
                C285 -
            (C8145 * C6981 + C50800 * C6982 + C8144 * C1172 + C50908 * C1179) *
                C280) *
               C44456) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50908 * C129 + C8145 * C287 + C50800 * C294) *
                 C696 +
             (C8144 * C130 + C50908 * C143 + C8145 * C293 + C50800 * C304) *
                 C50606) *
                C50943 +
            ((C14093 + C14094) * C696 + (C14095 + C14096) * C50606) * C50944 +
            ((C14868 + C14867) * C696 + (C14866 + C14865) * C50606) * C44456) *
               C50628 * C50894 -
           (((C15232 + C15231) * C50606 + (C15230 + C15229) * C696) * C44456 +
            ((C14865 + C14866) * C50606 + (C14867 + C14868) * C696) * C50944 +
            ((C14096 + C14095) * C50606 + (C14094 + C14093) * C696) * C50943) *
               C50628 * C50706) *
              C582 +
          ((((C14643 + C14644) * C696 + (C14645 + C14646) * C50606) * C50943 +
            ((C15083 + C15084) * C696 + (C15085 + C15086) * C50606) * C50944 +
            ((C8144 * C3601 + C50908 * C3609 + C8145 * C3600 + C50800 * C3608) *
                 C696 +
             (C8144 * C3607 + C50908 * C3613 + C8145 * C3606 + C50800 * C3612) *
                 C50606) *
                C44456) *
               C50628 * C50706 -
           (((C15086 + C15085) * C50606 + (C15084 + C15083) * C696) * C44456 +
            ((C14646 + C14645) * C50606 + (C14644 + C14643) * C696) * C50944 +
            ((C8145 * C593 + C50800 * C602 + C8144 * C293 + C50908 * C304) *
                 C50606 +
             (C8145 * C587 + C50800 * C592 + C8144 * C287 + C50908 * C294) *
                 C696) *
                C50943) *
               C50628 * C50894) *
              C583 +
          ((((C8144 * C587 + C50908 * C592 + C8145 * C700 + C50800 * C708) *
                 C696 +
             (C8144 * C593 + C50908 * C602 + C8145 * C707 + C50800 * C712) *
                 C50606) *
                C50943 +
            ((C14647 + C14648) * C696 + (C14649 + C14650) * C50606) * C50944 +
            ((C47776 + C47777) * C696 + (C47778 + C47779) * C50606) * C44456) *
               C50628 * C50894 -
           (((C8145 * C20817 + C50800 * C20819 + C8144 * C3606 +
              C50908 * C3612) *
                 C50606 +
             (C8145 * C20816 + C50800 * C20818 + C8144 * C3600 +
              C50908 * C3608) *
                 C696) *
                C44456 +
            ((C47779 + C47778) * C50606 + (C47777 + C47776) * C696) * C50944 +
            ((C14650 + C14649) * C50606 + (C14648 + C14647) * C696) * C50943) *
               C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1285 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50936 -
            (C2345 + C2346 + C2347) * C1286 - (C2348 + C2349 + C2350) * C50920 +
            (C2351 + C2352 + C2353) * C1287 + (C2354 + C2355 + C2356) * C1282) *
               C33763 +
           ((C36698 + C36699 + C36700) * C1285 +
            (C36701 + C36702 + C36703) * C50936 -
            (C2717 + C2716 + C2715) * C1286 - (C2720 + C2719 + C2718) * C50920 +
            (C2723 + C2722 + C2721) * C1287 + (C2726 + C2725 + C2724) * C1282) *
               C50828) *
              C50628 * C50694 * C1283 +
          (((C2533 + C2534 + C2535) * C1286 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50936 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C1285) +
            (C2536 + C2537 + C2538) * C50920 - (C2539 + C2540 + C2541) * C1287 -
            (C2542 + C2543 + C2544) * C1282) *
               C33763 +
           ((C4119 + C4118 + C4117) * C1286 -
            ((C37123 + C37122 + C37121) * C50936 +
             (C37120 + C37119 + C37118) * C1285) +
            (C4122 + C4121 + C4120) * C50920 -
            (C2307 * C4100 + C2302 * C4101 + C2306 * C816 + C2301 * C830 +
             C2305 * C813 + C2300 * C823) *
                C1287 -
            (C2307 * C4102 + C2302 * C4103 + C2306 * C829 + C2301 * C840 +
             C2305 * C824 + C2300 * C837) *
                C1282) *
               C50828) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1285 +
             (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
             C172 * C50920 + C173 * C1287 + C174 * C1282) *
                C33763 +
            (C7162 + C7163 - C7164 - C7165 + C7166 + C7167) * C50828) *
               C17274 +
           ((C171 * C1285 + C172 * C50936 - C173 * C1286 - C174 * C50920 +
             C175 * C1287 + C176 * C1282) *
                C33763 +
            (C7174 + C7175 - C7176 - C7177 + C7178 + C7179) * C50828) *
               C17275 +
           ((C173 * C1285 + C174 * C50936 - C175 * C1286 - C176 * C50920 +
             C177 * C1287 + C178 * C1282) *
                C33763 +
            (C12721 + C12722 - C12723 - C12724 + C12725 + C12726) * C50828) *
               C17276) *
              C50694 * C1283 +
          (((C327 * C1286 -
             ((C117 * C293 + C50748 * C304) * C50936 +
              (C117 * C287 + C50748 * C294) * C1285) +
             C328 * C50920 - C329 * C1287 - C330 * C1282) *
                C33763 +
            (C1540 * C1286 - (C5983 * C50936 + C5982 * C1285) + C1541 * C50920 -
             C1542 * C1287 - C1543 * C1282) *
                C50828) *
               C17274 +
           ((C329 * C1286 - (C328 * C50936 + C327 * C1285) + C330 * C50920 -
             C331 * C1287 - C332 * C1282) *
                C33763 +
            (C1542 * C1286 - (C1541 * C50936 + C1540 * C1285) + C1543 * C50920 -
             C1544 * C1287 - C1545 * C1282) *
                C50828) *
               C17275 +
           ((C331 * C1286 - (C330 * C50936 + C329 * C1285) + C332 * C50920 -
             C333 * C1287 - C334 * C1282) *
                C33763 +
            (C1544 * C1286 - (C1543 * C50936 + C1542 * C1285) + C1545 * C50920 -
             (C117 * C1523 + C50748 * C1524) * C1287 -
             (C117 * C1525 + C50748 * C1526) * C1282) *
                C50828) *
               C17276) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C1285 +
            (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
            C172 * C50920 + C173 * C1287 + C174 * C1282) *
               C39097 +
           (C7162 + C7163 - C7164 - C7165 + C7166 + C7167) * C39098 +
           (C7168 + C7169 - C7170 - C7171 + C7172 + C7173) * C39099 +
           (C6189 * C1285 + C6188 * C50936 - C5540 * C1286 - C5541 * C50920 +
            C5542 * C1287 + C5543 * C1282) *
               C39100) *
              C50628 * C50694 * C1283 +
          ((C327 * C1286 -
            ((C117 * C293 + C50748 * C304) * C50936 +
             (C117 * C287 + C50748 * C294) * C1285) +
            C328 * C50920 - C329 * C1287 - C330 * C1282) *
               C39097 +
           (C1540 * C1286 - (C5983 * C50936 + C5982 * C1285) + C1541 * C50920 -
            C1542 * C1287 - C1543 * C1282) *
               C39098 +
           (C5350 * C1286 - (C5985 * C50936 + C5984 * C1285) + C5351 * C50920 -
            C5352 * C1287 - C5353 * C1282) *
               C39099 +
           (C6370 * C1286 - (C6369 * C50936 + C6368 * C1285) + C6371 * C50920 -
            (C117 * C6979 + C50748 * C6980) * C1287 -
            (C117 * C6981 + C50748 * C6982) * C1282) *
               C39100) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1391 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C1386 -
            (C2345 + C2346 + C2347) * C1392 -
            (C2348 + C2349 + C2350) * C50611) *
               C33763 +
           ((C36698 + C36699 + C36700) * C1391 +
            (C36701 + C36702 + C36703) * C1386 -
            (C2717 + C2716 + C2715) * C1392 -
            (C2720 + C2719 + C2718) * C50611) *
               C50828) *
              C50628 * C50694 * C50939 +
          (((C2533 + C2534 + C2535) * C1392 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C1386 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C1391) +
            (C2536 + C2537 + C2538) * C50611) *
               C33763 +
           ((C4119 + C4118 + C4117) * C1392 -
            ((C37123 + C37122 + C37121) * C1386 +
             (C37120 + C37119 + C37118) * C1391) +
            (C4122 + C4121 + C4120) * C50611) *
               C50828) *
              C50628 * C50694 * C50926 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C1391 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C1386 -
            (C2897 + C2898 + C2899) * C1392 -
            (C2900 + C2901 + C2902) * C50611) *
               C33763 +
           ((C37124 + C37125 + C37126) * C1391 +
            (C37127 + C37128 + C37129) * C1386 -
            (C2307 * C3156 + C2302 * C3163 + C2306 * C3155 + C2301 * C3160 +
             C2305 * C817 + C2300 * C832) *
                C1392 -
            (C2307 * C3162 + C2302 * C3168 + C2306 * C3161 + C2301 * C3167 +
             C2305 * C831 + C2300 * C841) *
                C50611) *
               C50828) *
              C50628 * C50694 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C33763 +
            (C6984 + C6985 - C6986 - C6987) * C50828) *
               C17274 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C33763 +
            (C6992 + C6993 - C6994 - C6995) * C50828) *
               C17275 +
           ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                C33763 +
            (C12567 + C12568 - C12569 - C12570) * C50828) *
               C17276) *
              C50694 * C50939 +
          (((C327 * C1392 -
             ((C117 * C293 + C50748 * C304) * C1386 +
              (C117 * C287 + C50748 * C294) * C1391) +
             C328 * C50611) *
                C33763 +
            (C7000 - (C7001 + C7002) + C7003) * C50828) *
               C17274 +
           ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                C33763 +
            (C7008 - (C7009 + C7010) + C7011) * C50828) *
               C17275 +
           ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                C33763 +
            (C12571 - (C12572 + C12573) + C12574) * C50828) *
               C17276) *
              C50694 * C50926 +
          ((((C117 * C587 + C50748 * C592) * C1391 +
             (C117 * C593 + C50748 * C602) * C1386 - C620 * C1392 -
             C621 * C50611) *
                C33763 +
            (C5986 * C1391 + C5987 * C1386 - C5702 * C1392 - C5703 * C50611) *
                C50828) *
               C17274 +
           ((C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50611) *
                C33763 +
            (C5702 * C1391 + C5703 * C1386 - C11425 * C1392 - C11426 * C50611) *
                C50828) *
               C17275 +
           ((C622 * C1391 + C623 * C1386 - C624 * C1392 - C625 * C50611) *
                C33763 +
            (C11425 * C1391 + C11426 * C1386 -
             (C117 * C815 + C50748 * C828) * C1392 -
             (C117 * C827 + C50748 * C839) * C50611) *
                C50828) *
               C17276) *
              C50694 * C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C1391 +
            (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
            C172 * C50611) *
               C39097 +
           (C6984 + C6985 - C6986 - C6987) * C39098 + C7538 * C39099 +
           (C7530 + C7529 - C7528 - C7531) * C39100) *
              C50628 * C50694 * C50939 +
          ((C327 * C1392 -
            ((C117 * C293 + C50748 * C304) * C1386 +
             (C117 * C287 + C50748 * C294) * C1391) +
            C328 * C50611) *
               C39097 +
           (C7000 - (C7001 + C7002) + C7003) * C39098 +
           (C7004 - (C7005 + C7006) + C7007) * C39099 +
           (C6370 * C1392 - (C6369 * C1386 + C6368 * C1391) + C6371 * C50611) *
               C39100) *
              C50628 * C50694 * C50926 +
          (((C117 * C587 + C50748 * C592) * C1391 +
            (C117 * C593 + C50748 * C602) * C1386 - C620 * C1392 -
            C621 * C50611) *
               C39097 +
           (C5986 * C1391 + C5987 * C1386 - C5702 * C1392 - C5703 * C50611) *
               C39098 +
           (C5988 * C1391 + C5989 * C1386 - C5704 * C1392 - C5705 * C50611) *
               C39099 +
           (C39570 * C1391 + C39571 * C1386 -
            (C117 * C3598 + C50748 * C3604) * C1392 -
            (C117 * C3602 + C50748 * C3610) * C50611) *
               C39100) *
              C50628 * C50694 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C1391 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C1386 -
             (C2345 + C2346 + C2347) * C1392 -
             (C2348 + C2349 + C2350) * C50611) *
                C33763 +
            ((C36698 + C36699 + C36700) * C1391 +
             (C36701 + C36702 + C36703) * C1386 -
             (C2717 + C2716 + C2715) * C1392 -
             (C2720 + C2719 + C2718) * C50611) *
                C50828) *
               C50628 * C50894 +
           (((C2715 + C2716 + C2717) * C1392 -
             ((C36703 + C36702 + C36701) * C1386 +
              (C36700 + C36699 + C36698) * C1391) +
             (C2718 + C2719 + C2720) * C50611) *
                C33763 +
            ((C3343 + C3342 + C3341) * C1392 -
             ((C37288 + C37289 + C37290) * C1386 +
              (C37291 + C37292 + C37293) * C1391) +
             (C3346 + C3345 + C3344) * C50611) *
                C50828) *
               C50628 * C50706) *
              C1283 +
          ((((C2533 + C2534 + C2535) * C1392 -
             ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
               C2305 * C293 + C2300 * C304) *
                  C1386 +
              (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
               C2305 * C287 + C2300 * C294) *
                  C1391) +
             (C2536 + C2537 + C2538) * C50611) *
                C33763 +
            ((C4119 + C4118 + C4117) * C1392 -
             ((C37123 + C37122 + C37121) * C1386 +
              (C37120 + C37119 + C37118) * C1391) +
             (C4122 + C4121 + C4120) * C50611) *
                C50828) *
               C50628 * C50894 +
           (((C37118 + C37119 + C37120) * C1391 +
             (C37121 + C37122 + C37123) * C1386 -
             (C4117 + C4118 + C4119) * C1392 -
             (C4120 + C4121 + C4122) * C50611) *
                C33763 +
            ((C37452 + C37453 + C37454) * C1391 +
             (C37455 + C37456 + C37457) * C1386 -
             (C2307 * C3492 + C2302 * C3495 + C2306 * C3317 + C2301 * C3321 +
              C2305 * C1082 + C2300 * C1089) *
                 C1392 -
             (C2307 * C3494 + C2302 * C3498 + C2306 * C3322 + C2301 * C3326 +
              C2305 * C1088 + C2300 * C1094) *
                 C50611) *
                C50828) *
               C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C1391 +
              (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
              C172 * C50611) *
                 C33763 +
             (C6984 + C6985 - C6986 - C6987) * C50828) *
                C17274 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                 C33763 +
             (C6992 + C6993 - C6994 - C6995) * C50828) *
                C17275 +
            ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                 C33763 +
             (C12567 + C12568 - C12569 - C12570) * C50828) *
                C17276) *
               C50894 +
           (((C6986 - (C6985 + C6984) + C6987) * C33763 +
             (C6990 - (C6989 + C6988) + C6991) * C50828) *
                C17274 +
            ((C6994 - (C6993 + C6992) + C6995) * C33763 +
             (C6998 - (C6997 + C6996) + C6999) * C50828) *
                C17275 +
            ((C12569 - (C12568 + C12567) + C12570) * C33763 +
             (C13067 - (C13068 + C13069) + C13070) * C50828) *
                C17276) *
               C50706) *
              C1283 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50748 * C304) * C1386 +
               (C117 * C287 + C50748 * C294) * C1391) +
              C328 * C50611) *
                 C33763 +
             (C7000 - (C7001 + C7002) + C7003) * C50828) *
                C17274 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                 C33763 +
             (C7008 - (C7009 + C7010) + C7011) * C50828) *
                C17275 +
            ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                 C33763 +
             (C12571 - (C12572 + C12573) + C12574) * C50828) *
                C17276) *
               C50894 +
           (((C7002 + C7001 - C7000 - C7003) * C33763 +
             (C7006 + C7005 - C7004 - C7007) * C50828) *
                C17274 +
            ((C7010 + C7009 - C7008 - C7011) * C33763 +
             (C7014 + C7013 - C7012 - C7015) * C50828) *
                C17275 +
            ((C12573 + C12572 - C12571 - C12574) * C33763 +
             (C5352 * C1391 + C5353 * C1386 -
              (C117 * C1080 + C50748 * C1085) * C1392 -
              (C117 * C1084 + C50748 * C1092) * C50611) *
                 C50828) *
                C17276) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C39097 +
            (C6984 + C6985 - C6986 - C6987) * C39098 + C7538 * C39099 +
            (C7530 + C7529 - C7528 - C7531) * C39100) *
               C50628 * C50894 +
           ((C6986 - (C6985 + C6984) + C6987) * C39097 +
            (C6990 - (C6989 + C6988) + C6991) * C39098 +
            (C7528 - (C7529 + C7530) + C7531) * C39099 +
            (C6190 * C1392 - (C6491 * C1386 + C6490 * C1391) + C6191 * C50611) *
                C39100) *
               C50628 * C50706) *
              C1283 +
          (((C327 * C1392 -
             ((C117 * C293 + C50748 * C304) * C1386 +
              (C117 * C287 + C50748 * C294) * C1391) +
             C328 * C50611) *
                C39097 +
            (C7000 - (C7001 + C7002) + C7003) * C39098 +
            (C7004 - (C7005 + C7006) + C7007) * C39099 +
            (C40192 - (C40193 + C40194) + C40195) * C39100) *
               C50628 * C50894 +
           ((C7002 + C7001 - C7000 - C7003) * C39097 +
            (C7006 + C7005 - C7004 - C7007) * C39098 +
            (C40194 + C40193 - C40192 - C40195) * C39099 +
            (C39783 * C1391 + C39784 * C1386 -
             (C117 * C6343 + C50748 * C6346) * C1392 -
             (C117 * C6345 + C50748 * C6349) * C50611) *
                C39100) *
               C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C49720 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50878 -
             (C2345 + C2346 + C2347) * C49713 -
             (C2348 + C2349 + C2350) * C50611) *
                C33763 +
            ((C36698 + C36699 + C36700) * C49720 +
             (C36701 + C36702 + C36703) * C50878 -
             (C2717 + C2716 + C2715) * C49713 -
             (C2720 + C2719 + C2718) * C50611) *
                C50828) *
               C50628 * C1643 +
           (((C2715 + C2716 + C2717) * C49713 -
             ((C36703 + C36702 + C36701) * C50878 +
              (C36700 + C36699 + C36698) * C49720) +
             (C2718 + C2719 + C2720) * C50611) *
                C33763 +
            ((C3343 + C3342 + C3341) * C49713 -
             ((C37288 + C37289 + C37290) * C50878 +
              (C37291 + C37292 + C37293) * C49720) +
             (C3346 + C3345 + C3344) * C50611) *
                C50828) *
               C50628 * C50706) *
              C1283 +
          ((((C2533 + C2534 + C2535) * C49713 -
             ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
               C2305 * C293 + C2300 * C304) *
                  C50878 +
              (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
               C2305 * C287 + C2300 * C294) *
                  C49720) +
             (C2536 + C2537 + C2538) * C50611) *
                C33763 +
            ((C4119 + C4118 + C4117) * C49713 -
             ((C37123 + C37122 + C37121) * C50878 +
              (C37120 + C37119 + C37118) * C49720) +
             (C4122 + C4121 + C4120) * C50611) *
                C50828) *
               C50628 * C1643 +
           (((C37118 + C37119 + C37120) * C49720 +
             (C37121 + C37122 + C37123) * C50878 -
             (C4117 + C4118 + C4119) * C49713 -
             (C4120 + C4121 + C4122) * C50611) *
                C33763 +
            ((C37452 + C37453 + C37454) * C49720 +
             (C37455 + C37456 + C37457) * C50878 -
             (C2307 * C3492 + C2302 * C3495 + C2306 * C3317 + C2301 * C3321 +
              C2305 * C1082 + C2300 * C1089) *
                 C49713 -
             (C2307 * C3494 + C2302 * C3498 + C2306 * C3322 + C2301 * C3326 +
              C2305 * C1088 + C2300 * C1094) *
                 C50611) *
                C50828) *
               C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C49720 +
              (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
              C172 * C50611) *
                 C33763 +
             (C6156 + C6157 - C6158 - C6159) * C50828) *
                C17274 +
            ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                 C33763 +
             (C6164 + C6165 - C6166 - C6167) * C50828) *
                C17275 +
            ((C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                 C33763 +
             (C11823 + C11824 - C11825 - C11826) * C50828) *
                C17276) *
               C1643 +
           (((C6158 - (C6157 + C6156) + C6159) * C33763 +
             (C6162 - (C6161 + C6160) + C6163) * C50828) *
                C17274 +
            ((C6166 - (C6165 + C6164) + C6167) * C33763 +
             (C6170 - (C6169 + C6168) + C6171) * C50828) *
                C17275 +
            ((C11825 - (C11824 + C11823) + C11826) * C33763 +
             (C11827 - (C11828 + C11829) + C11830) * C50828) *
                C17276) *
               C50706) *
              C1283 +
          ((((C327 * C49713 -
              ((C117 * C293 + C50748 * C304) * C50878 +
               (C117 * C287 + C50748 * C294) * C49720) +
              C328 * C50611) *
                 C33763 +
             (C7734 - (C7735 + C7736) + C7737) * C50828) *
                C17274 +
            ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                 C33763 +
             (C7742 - (C7743 + C7744) + C7745) * C50828) *
                C17275 +
            ((C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
                 C33763 +
             (C13265 - (C13266 + C13267) + C13268) * C50828) *
                C17276) *
               C1643 +
           (((C7736 + C7735 - C7734 - C7737) * C33763 +
             (C7740 + C7739 - C7738 - C7741) * C50828) *
                C17274 +
            ((C7744 + C7743 - C7742 - C7745) * C33763 +
             (C7748 + C7747 - C7746 - C7749) * C50828) *
                C17275 +
            ((C13267 + C13266 - C13265 - C13268) * C33763 +
             (C5352 * C49720 + C5353 * C50878 -
              (C117 * C1080 + C50748 * C1085) * C49713 -
              (C117 * C1084 + C50748 * C1092) * C50611) *
                 C50828) *
                C17276) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C39097 +
            (C6156 + C6157 - C6158 - C6159) * C39098 + C6196 * C39099 +
            C39678 * C39100) *
               C50628 * C1643 +
           ((C6158 - (C6157 + C6156) + C6159) * C39097 +
            (C6162 - (C6161 + C6160) + C6163) * C39098 +
            (C6172 - (C6194 + C6195) + C6177) * C39099 +
            (C39673 - (C39674 + C39675) + C39676) * C39100) *
               C50628 * C50706) *
              C1283 +
          (((C327 * C49713 -
             ((C117 * C293 + C50748 * C304) * C50878 +
              (C117 * C287 + C50748 * C294) * C49720) +
             C328 * C50611) *
                C39097 +
            (C7734 - (C7735 + C7736) + C7737) * C39098 +
            (C7738 - (C7739 + C7740) + C7741) * C39099 +
            (C40665 - (C40666 + C40667) + C40668) * C39100) *
               C50628 * C1643 +
           ((C7736 + C7735 - C7734 - C7737) * C39097 +
            (C7740 + C7739 - C7738 - C7741) * C39098 +
            (C40667 + C40666 - C40665 - C40668) * C39099 +
            (C39783 * C49720 + C39784 * C50878 -
             (C117 * C6343 + C50748 * C6346) * C49713 -
             (C117 * C6345 + C50748 * C6349) * C50611) *
                C39100) *
               C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C33763 +
            ((C36698 + C36699 + C36700) * C696 +
             (C36701 + C36702 + C36703) * C50606) *
                C50828) *
               C50628 * C1643 -
           (((C37288 + C37289 + C37290) * C50606 +
             (C37291 + C37292 + C37293) * C696) *
                C50828 +
            ((C36703 + C36702 + C36701) * C50606 +
             (C36700 + C36699 + C36698) * C696) *
                C33763) *
               C50628 * C50706) *
              C50939 +
          ((((C37118 + C37119 + C37120) * C696 +
             (C37121 + C37122 + C37123) * C50606) *
                C33763 +
            ((C37452 + C37453 + C37454) * C696 +
             (C37455 + C37456 + C37457) * C50606) *
                C50828) *
               C50628 * C50706 -
           (((C37123 + C37122 + C37121) * C50606 +
             (C37120 + C37119 + C37118) * C696) *
                C50828 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C33763) *
               C50628 * C1643) *
              C50926 +
          ((((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
              C2307 * C2872 + C2302 * C2875) *
                 C696 +
             (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
              C2307 * C2876 + C2302 * C2881) *
                 C50606) *
                C33763 +
            ((C37124 + C37125 + C37126) * C696 +
             (C37127 + C37128 + C37129) * C50606) *
                C50828) *
               C50628 * C1643 -
           (((C2307 * C20747 + C2302 * C20749 + C2306 * C3496 + C2301 * C3499 +
              C2305 * C3320 + C2300 * C3325) *
                 C50606 +
             (C2307 * C20746 + C2302 * C20748 + C2306 * C3493 + C2301 * C3497 +
              C2305 * C3316 + C2300 * C3319) *
                 C696) *
                C50828 +
            ((C37129 + C37128 + C37127) * C50606 +
             (C37126 + C37125 + C37124) * C696) *
                C33763) *
               C50628 * C50706) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C33763 +
             (C5950 + C5951) * C50828) *
                C17274 +
            ((C171 * C696 + C172 * C50606) * C33763 +
             (C5954 + C5955) * C50828) *
                C17275 +
            ((C173 * C696 + C174 * C50606) * C33763 +
             (C11671 + C11672) * C50828) *
                C17276) *
               C1643 -
           (((C11977 + C11978) * C50828 + (C11672 + C11671) * C33763) * C17276 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C33763) * C17275 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C33763) * C17274) *
               C50706) *
              C50939 +
          ((((C5990 + C5991) * C33763 + (C5992 + C5993) * C50828) * C17274 +
            ((C5966 + C5967) * C33763 + (C5968 + C5969) * C50828) * C17275 +
            ((C11673 + C11674) * C33763 + (C11979 + C11980) * C50828) *
                C17276) *
               C50706 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C33763) *
                C17276 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C33763) *
                C17275 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C33763) *
                C17274) *
               C1643) *
              C50926 +
          (((((C117 * C587 + C50748 * C592) * C696 +
              (C117 * C593 + C50748 * C602) * C50606) *
                 C33763 +
             (C5994 + C5995) * C50828) *
                C17274 +
            ((C620 * C696 + C621 * C50606) * C33763 +
             (C5978 + C5979) * C50828) *
                C17275 +
            ((C622 * C696 + C623 * C50606) * C33763 +
             (C11675 + C11676) * C50828) *
                C17276) *
               C1643 -
           ((((C117 * C3324 + C50748 * C3327) * C50606 +
              (C117 * C3318 + C50748 * C3323) * C696) *
                 C50828 +
             (C11676 + C11675) * C33763) *
                C17276 +
            ((C5981 + C5980) * C50828 + (C5979 + C5978) * C33763) * C17275 +
            ((C5997 + C5996) * C50828 + (C5995 + C5994) * C33763) * C17274) *
               C50706) *
              C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C39097 +
            (C5950 + C5951) * C39098 + C6352 * C39099 + C39777 * C39100) *
               C50628 * C1643 -
           (C39857 * C39100 + C6483 * C39099 + (C5953 + C5952) * C39098 +
            (C5951 + C5950) * C39097) *
               C50628 * C50706) *
              C50939 +
          (((C5990 + C5991) * C39097 + (C5992 + C5993) * C39098 +
            (C6372 + C6373) * C39099 + (C39785 + C39786) * C39100) *
               C50628 * C50706 -
           (C39782 * C39100 + C6367 * C39099 + (C5991 + C5990) * C39098 +
            ((C117 * C293 + C50748 * C304) * C50606 +
             (C117 * C287 + C50748 * C294) * C696) *
                C39097) *
               C50628 * C1643) *
              C50926 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C39097 +
            (C5994 + C5995) * C39098 + (C5996 + C5997) * C39099 +
            (C39572 + C39573) * C39100) *
               C50628 * C1643 -
           (((C117 * C22978 + C50748 * C22980) * C50606 +
             (C117 * C22977 + C50748 * C22979) * C696) *
                C39100 +
            (C39573 + C39572) * C39099 + (C5997 + C5996) * C39098 +
            (C5995 + C5994) * C39097) *
               C50628 * C50706) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C33763 +
            ((C36698 + C36699 + C36700) * C696 +
             (C36701 + C36702 + C36703) * C50606) *
                C50828) *
               C50628 * C50940 -
           (((C37288 + C37289 + C37290) * C50606 +
             (C37291 + C37292 + C37293) * C696) *
                C50828 +
            ((C36703 + C36702 + C36701) * C50606 +
             (C36700 + C36699 + C36698) * C696) *
                C33763) *
               C50628 * C50929 +
           (((C37293 + C37292 + C37291) * C696 +
             (C37290 + C37289 + C37288) * C50606) *
                C33763 +
            ((C37568 + C37569 + C37570) * C696 +
             (C37571 + C37572 + C37573) * C50606) *
                C50828) *
               C50628 * C1875) *
              C1283 +
          ((((C37118 + C37119 + C37120) * C696 +
             (C37121 + C37122 + C37123) * C50606) *
                C33763 +
            ((C37452 + C37453 + C37454) * C696 +
             (C37455 + C37456 + C37457) * C50606) *
                C50828) *
               C50628 * C50929 -
           (((C37123 + C37122 + C37121) * C50606 +
             (C37120 + C37119 + C37118) * C696) *
                C50828 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C33763) *
               C50628 * C50940 -
           (((C2307 * C20817 + C2302 * C20819 + C2306 * C3606 + C2301 * C3612 +
              C2305 * C3607 + C2300 * C3613) *
                 C50606 +
             (C2307 * C20816 + C2302 * C20818 + C2306 * C3600 + C2301 * C3608 +
              C2305 * C3601 + C2300 * C3609) *
                 C696) *
                C50828 +
            ((C37457 + C37456 + C37455) * C50606 +
             (C37454 + C37453 + C37452) * C696) *
                C33763) *
               C50628 * C1875) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C33763 +
             (C5950 + C5951) * C50828) *
                C17274 +
            ((C171 * C696 + C172 * C50606) * C33763 +
             (C5954 + C5955) * C50828) *
                C17275 +
            ((C173 * C696 + C174 * C50606) * C33763 +
             (C11671 + C11672) * C50828) *
                C17276) *
               C50940 -
           (((C11977 + C11978) * C50828 + (C11672 + C11671) * C33763) * C17276 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C33763) * C17275 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C33763) * C17274) *
               C50929 +
           ((C6352 * C33763 + (C6357 + C6356) * C50828) * C17274 +
            (C6353 * C33763 + (C6355 + C6354) * C50828) * C17275 +
            ((C11978 + C11977) * C33763 + (C12079 + C12080) * C50828) *
                C17276) *
               C1875) *
              C1283 +
          ((((C5990 + C5991) * C33763 + (C5992 + C5993) * C50828) * C17274 +
            ((C5966 + C5967) * C33763 + (C5968 + C5969) * C50828) * C17275 +
            ((C11673 + C11674) * C33763 + (C11979 + C11980) * C50828) *
                C17276) *
               C50929 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C33763) *
                C17276 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C33763) *
                C17275 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C33763) *
                C17274) *
               C50940 -
           ((((C117 * C6981 + C50748 * C6982) * C50606 +
              (C117 * C6979 + C50748 * C6980) * C696) *
                 C50828 +
             (C11980 + C11979) * C33763) *
                C17276 +
            ((C6375 + C6374) * C50828 + C6366 * C33763) * C17275 +
            ((C6373 + C6372) * C50828 + C6367 * C33763) * C17274) *
               C1875) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C39097 +
            (C5950 + C5951) * C39098 + C6352 * C39099 + C39777 * C39100) *
               C50628 * C50940 -
           (C39857 * C39100 + C6483 * C39099 + (C5953 + C5952) * C39098 +
            (C5951 + C5950) * C39097) *
               C50628 * C50929 +
           (C6352 * C39097 + C39777 * C39098 + (C6492 + C6493) * C39099 +
            (C39864 + C39865) * C39100) *
               C50628 * C1875) *
              C1283 +
          (((C5990 + C5991) * C39097 + (C5992 + C5993) * C39098 +
            (C6372 + C6373) * C39099 + (C39785 + C39786) * C39100) *
               C50628 * C50929 -
           (C39782 * C39100 + C6367 * C39099 + (C5991 + C5990) * C39098 +
            ((C117 * C293 + C50748 * C304) * C50606 +
             (C117 * C287 + C50748 * C294) * C696) *
                C39097) *
               C50628 * C50940 -
           (((C117 * C23100 + C50748 * C23102) * C50606 +
             (C117 * C23099 + C50748 * C23101) * C696) *
                C39100 +
            (C39786 + C39785) * C39099 + C39782 * C39098 + C6367 * C39097) *
               C50628 * C1875) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50748 * C129) * C118 +
                (C117 * C130 + C50748 * C143) * C106 - C171 * C119 -
                C172 * C107 + C173 * C120 + C174 * C108 - C175 * C121 -
                C176 * C109) *
                   C33763 +
               (C5536 * C118 + C5537 * C106 - C475 * C119 - C476 * C107 +
                C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
                   C50828) *
                  C17274 +
              ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
                C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
                   C33763 +
               (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
                C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
                   C50828) *
                  C17275 +
              ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
                C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
                   C33763 +
               (C477 * C118 + C478 * C106 - C479 * C119 - C480 * C107 +
                C481 * C120 + C482 * C108 -
                (C117 * C439 + C50748 * C450) * C121 -
                (C117 * C451 + C50748 * C457) * C109) *
                   C50828) *
                  C17276) *
             C50694 * C50668 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50748 * C129) * C49720 +
                 (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
                 C172 * C50611) *
                    C33763 +
                (C6156 + C6157 - C6158 - C6159) * C50828) *
                   C17274 +
               ((C171 * C49720 + C172 * C50878 - C173 * C49713 -
                 C174 * C50611) *
                    C33763 +
                (C6164 + C6165 - C6166 - C6167) * C50828) *
                   C17275 +
               ((C173 * C49720 + C174 * C50878 - C175 * C49713 -
                 C176 * C50611) *
                    C33763 +
                (C11823 + C11824 - C11825 - C11826) * C50828) *
                   C17276) *
                  C50694 * C582 +
              (((C327 * C49713 -
                 ((C117 * C293 + C50748 * C304) * C50878 +
                  (C117 * C287 + C50748 * C294) * C49720) +
                 C328 * C50611) *
                    C33763 +
                (C7734 - (C7735 + C7736) + C7737) * C50828) *
                   C17274 +
               ((C329 * C49713 - (C328 * C50878 + C327 * C49720) +
                 C330 * C50611) *
                    C33763 +
                (C7742 - (C7743 + C7744) + C7745) * C50828) *
                   C17275 +
               ((C331 * C49713 - (C330 * C50878 + C329 * C49720) +
                 C332 * C50611) *
                    C33763 +
                (C13265 - (C13266 + C13267) + C13268) * C50828) *
                   C17276) *
                  C50694 * C583 +
              ((((C117 * C587 + C50748 * C592) * C49720 +
                 (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
                 C621 * C50611) *
                    C33763 +
                (C5986 * C49720 + C5987 * C50878 - C5702 * C49713 -
                 C5703 * C50611) *
                    C50828) *
                   C17274 +
               ((C620 * C49720 + C621 * C50878 - C622 * C49713 -
                 C623 * C50611) *
                    C33763 +
                (C5702 * C49720 + C5703 * C50878 - C11425 * C49713 -
                 C11426 * C50611) *
                    C50828) *
                   C17275 +
               ((C622 * C49720 + C623 * C50878 - C624 * C49713 -
                 C625 * C50611) *
                    C33763 +
                (C11425 * C49720 + C11426 * C50878 -
                 (C117 * C815 + C50748 * C828) * C49713 -
                 (C117 * C827 + C50748 * C839) * C50611) *
                    C50828) *
                   C17276) *
                  C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C33763 +
            (C6156 + C6157 - C6158 - C6159) * C50828) *
               C17274 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C33763 +
            (C6164 + C6165 - C6166 - C6167) * C50828) *
               C17275 +
           ((C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                C33763 +
            (C11823 + C11824 - C11825 - C11826) * C50828) *
               C17276) *
              C941 +
          (((C6158 - (C6157 + C6156) + C6159) * C33763 +
            (C6162 - (C6161 + C6160) + C6163) * C50828) *
               C17274 +
           ((C6166 - (C6165 + C6164) + C6167) * C33763 +
            (C6170 - (C6169 + C6168) + C6171) * C50828) *
               C17275 +
           ((C11825 - (C11824 + C11823) + C11826) * C33763 +
            (C11827 - (C11828 + C11829) + C11830) * C50828) *
               C17276) *
              C942 +
          ((C6196 * C33763 + (C6195 + C6194 - C6172 - C6177) * C50828) *
               C17274 +
           (C6197 * C33763 + (C6180 + C6179 - C6178 - C6181) * C50828) *
               C17275 +
           ((C11829 + C11828 - C11827 - C11830) * C33763 +
            (C5542 * C49720 + C5543 * C50878 -
             (C117 * C1166 + C50748 * C1171) * C49713 -
             (C117 * C1170 + C50748 * C1178) * C50611) *
                C50828) *
               C17276) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
            C2307 * C587 + C2302 * C592) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
            C2307 * C593 + C2302 * C602) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C33763 +
          ((C2305 * C435 + C2300 * C442 + C2306 * C811 + C2301 * C819 +
            C2307 * C818 + C2302 * C834) *
               C118 +
           (C2305 * C441 + C2300 * C452 + C2306 * C820 + C2301 * C835 +
            C2307 * C833 + C2302 * C842) *
               C106 -
           (C2717 + C2716 + C2715) * C119 - (C2720 + C2719 + C2718) * C107 +
           (C2723 + C2722 + C2721) * C120 + (C2726 + C2725 + C2724) * C108 -
           (C2307 * C815 + C2302 * C828 + C2306 * C814 + C2301 * C825 +
            C2305 * C437 + C2300 * C446) *
               C121 -
           (C2307 * C827 + C2302 * C839 + C2306 * C826 + C2301 * C838 +
            C2305 * C447 + C2300 * C455) *
               C109) *
              C50828) *
         C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50878 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50611) *
               C33763 +
           ((C36698 + C36699 + C36700) * C49720 +
            (C36701 + C36702 + C36703) * C50878 -
            (C2717 + C2716 + C2715) * C49713 -
            (C2720 + C2719 + C2718) * C50611) *
               C50828) *
              C50628 * C50694 * C582 +
          (((C2533 + C2534 + C2535) * C49713 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50878 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C49720) +
            (C2536 + C2537 + C2538) * C50611) *
               C33763 +
           ((C4119 + C4118 + C4117) * C49713 -
            ((C2307 * C3159 + C2302 * C3166 + C2306 * C833 + C2301 * C842 +
              C2305 * C820 + C2300 * C835) *
                 C50878 +
             (C2307 * C3154 + C2302 * C3158 + C2306 * C818 + C2301 * C834 +
              C2305 * C811 + C2300 * C819) *
                 C49720) +
            (C4122 + C4121 + C4120) * C50611) *
               C50828) *
              C50628 * C50694 * C583 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C49720 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50878 -
            (C2897 + C2898 + C2899) * C49713 -
            (C2900 + C2901 + C2902) * C50611) *
               C33763 +
           ((C2305 * C818 + C2300 * C834 + C2306 * C3154 + C2301 * C3158 +
             C2307 * C3157 + C2302 * C3165) *
                C49720 +
            (C2305 * C833 + C2300 * C842 + C2306 * C3159 + C2301 * C3166 +
             C2307 * C3164 + C2302 * C3169) *
                C50878 -
            (C2307 * C3156 + C2302 * C3163 + C2306 * C3155 + C2301 * C3160 +
             C2305 * C817 + C2300 * C832) *
                C49713 -
            (C2307 * C3162 + C2302 * C3168 + C2306 * C3161 + C2301 * C3167 +
             C2305 * C831 + C2300 * C841) *
                C50611) *
               C50828) *
              C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50878 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50611) *
               C33763 +
           ((C36698 + C36699 + C36700) * C49720 +
            (C36701 + C36702 + C36703) * C50878 -
            (C2717 + C2716 + C2715) * C49713 -
            (C2720 + C2719 + C2718) * C50611) *
               C50828) *
              C50628 * C941 +
          (((C2715 + C2716 + C2717) * C49713 -
            ((C36703 + C36702 + C36701) * C50878 +
             (C36700 + C36699 + C36698) * C49720) +
            (C2718 + C2719 + C2720) * C50611) *
               C33763 +
           ((C3343 + C3342 + C3341) * C49713 -
            ((C37288 + C37289 + C37290) * C50878 +
             (C37291 + C37292 + C37293) * C49720) +
            (C3346 + C3345 + C3344) * C50611) *
               C50828) *
              C50628 * C942 +
          (((C37293 + C37292 + C37291) * C49720 +
            (C37290 + C37289 + C37288) * C50878 -
            (C3341 + C3342 + C3343) * C49713 -
            (C3344 + C3345 + C3346) * C50611) *
               C33763 +
           ((C2305 * C1169 + C2300 * C1177 + C2306 * C3601 + C2301 * C3609 +
             C2307 * C3600 + C2302 * C3608) *
                C49720 +
            (C2305 * C1176 + C2300 * C1181 + C2306 * C3607 + C2301 * C3613 +
             C2307 * C3606 + C2302 * C3612) *
                C50878 -
            (C2307 * C3598 + C2302 * C3604 + C2306 * C3599 + C2301 * C3605 +
             C2305 * C1168 + C2300 * C1175) *
                C49713 -
            (C2307 * C3602 + C2302 * C3610 + C2306 * C3603 + C2301 * C3611 +
             C2305 * C1174 + C2300 * C1180) *
                C50611) *
               C50828) *
              C50628 * C943) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C122 + C50748 * C129) * C118 +
           (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C39097 +
          (C5536 * C118 + C5537 * C106 - C475 * C119 - C476 * C107 +
           C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
              C39098 +
          (C5538 * C118 + C5539 * C106 - C977 * C119 - C978 * C107 +
           C979 * C120 + C980 * C108 - C981 * C121 - C982 * C109) *
              C39099 +
          (C6189 * C118 + C6188 * C106 - C5540 * C119 - C5541 * C107 +
           C5542 * C120 + C5543 * C108 -
           (C117 * C1166 + C50748 * C1171) * C121 -
           (C117 * C1170 + C50748 * C1178) * C109) *
              C39100) *
         C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C49720 +
            (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
            C172 * C50611) *
               C39097 +
           (C6156 + C6157 - C6158 - C6159) * C39098 + C6196 * C39099 +
           (C6195 + C6194 - C6172 - C6177) * C39100) *
              C50628 * C50694 * C582 +
          ((C327 * C49713 -
            ((C117 * C293 + C50748 * C304) * C50878 +
             (C117 * C287 + C50748 * C294) * C49720) +
            C328 * C50611) *
               C39097 +
           (C7734 - (C7735 + C7736) + C7737) * C39098 +
           (C7738 - (C7739 + C7740) + C7741) * C39099 +
           (C6370 * C49713 - (C6369 * C50878 + C6368 * C49720) +
            C6371 * C50611) *
               C39100) *
              C50628 * C50694 * C583 +
          (((C117 * C587 + C50748 * C592) * C49720 +
            (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
            C621 * C50611) *
               C39097 +
           (C5986 * C49720 + C5987 * C50878 - C5702 * C49713 - C5703 * C50611) *
               C39098 +
           (C5988 * C49720 + C5989 * C50878 - C5704 * C49713 - C5705 * C50611) *
               C39099 +
           ((C117 * C3600 + C50748 * C3608) * C49720 +
            (C117 * C3606 + C50748 * C3612) * C50878 -
            (C117 * C3598 + C50748 * C3604) * C49713 -
            (C117 * C3602 + C50748 * C3610) * C50611) *
               C39100) *
              C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C49720 +
            (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
            C172 * C50611) *
               C39097 +
           (C6156 + C6157 - C6158 - C6159) * C39098 + C6196 * C39099 +
           C39678 * C39100) *
              C50628 * C941 +
          ((C6158 - (C6157 + C6156) + C6159) * C39097 +
           (C6162 - (C6161 + C6160) + C6163) * C39098 +
           (C6172 - (C6194 + C6195) + C6177) * C39099 +
           (C39673 - (C39674 + C39675) + C39676) * C39100) *
              C50628 * C942 +
          (C6196 * C39097 + C39678 * C39098 +
           (C39675 + C39674 - C39673 - C39676) * C39099 +
           ((C117 * C6474 + C50748 * C6478) * C49720 +
            (C117 * C6477 + C50748 * C6480) * C50878 -
            (C117 * C6473 + C50748 * C6476) * C49713 -
            (C117 * C6475 + C50748 * C6479) * C50611) *
               C39100) *
              C50628 * C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50748 * C129) * C283 +
                 (C117 * C130 + C50748 * C143) * C278 - C171 * C284 -
                 C172 * C279 + C173 * C285 + C174 * C280) *
                    C33763 +
                (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50828) *
                   C17274 +
               ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                 C175 * C285 + C176 * C280) *
                    C33763 +
                (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50828) *
                   C17275 +
               ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                 C177 * C285 + C178 * C280) *
                    C33763 +
                (C11269 + C11270 - C11271 - C11272 + C11273 + C11274) *
                    C50828) *
                   C17276) *
                  C50694 * C50893 +
              (((C327 * C284 -
                 ((C117 * C293 + C50748 * C304) * C278 +
                  (C117 * C287 + C50748 * C294) * C283) +
                 C328 * C279 - C329 * C285 - C330 * C280) *
                    C33763 +
                (C1540 * C284 - (C5983 * C278 + C5982 * C283) + C1541 * C279 -
                 C1542 * C285 - C1543 * C280) *
                    C50828) *
                   C17274 +
               ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
                 C331 * C285 - C332 * C280) *
                    C33763 +
                (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
                 C1544 * C285 - C1545 * C280) *
                    C50828) *
                   C17275 +
               ((C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
                 C333 * C285 - C334 * C280) *
                    C33763 +
                (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
                 (C117 * C1523 + C50748 * C1524) * C285 -
                 (C117 * C1525 + C50748 * C1526) * C280) *
                    C50828) *
                   C17276) *
                  C50694 * C50682) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50748 * C129) * C696 +
                 (C117 * C130 + C50748 * C143) * C50606) *
                    C33763 +
                (C5950 + C5951) * C50828) *
                   C17274 +
               ((C171 * C696 + C172 * C50606) * C33763 +
                (C5954 + C5955) * C50828) *
                   C17275 +
               ((C173 * C696 + C174 * C50606) * C33763 +
                (C11671 + C11672) * C50828) *
                   C17276) *
                  C50694 * C692 -
              (((C11674 + C11673) * C50828 +
                (C330 * C50606 + C329 * C696) * C33763) *
                   C17276 +
               ((C5967 + C5966) * C50828 +
                (C328 * C50606 + C327 * C696) * C33763) *
                   C17275 +
               ((C5991 + C5990) * C50828 +
                ((C117 * C293 + C50748 * C304) * C50606 +
                 (C117 * C287 + C50748 * C294) * C696) *
                    C33763) *
                   C17274) *
                  C50694 * C693 +
              ((((C117 * C587 + C50748 * C592) * C696 +
                 (C117 * C593 + C50748 * C602) * C50606) *
                    C33763 +
                (C5994 + C5995) * C50828) *
                   C17274 +
               ((C620 * C696 + C621 * C50606) * C33763 +
                (C5978 + C5979) * C50828) *
                   C17275 +
               ((C622 * C696 + C623 * C50606) * C33763 +
                (C11675 + C11676) * C50828) *
                   C17276) *
                  C50694 * C694 -
              ((((C117 * C4102 + C50748 * C4103) * C50606 +
                 (C117 * C4100 + C50748 * C4101) * C696) *
                    C50828 +
                ((C117 * C703 + C50748 * C710) * C50606 +
                 (C117 * C698 + C50748 * C704) * C696) *
                    C33763) *
                   C17276 +
               (((C117 * C3161 + C50748 * C3167) * C50606 +
                 (C117 * C3155 + C50748 * C3160) * C696) *
                    C50828 +
                ((C117 * C705 + C50748 * C711) * C50606 +
                 (C117 * C699 + C50748 * C706) * C696) *
                    C33763) *
                   C17275 +
               (((C117 * C3159 + C50748 * C3166) * C50606 +
                 (C117 * C3154 + C50748 * C3158) * C696) *
                    C50828 +
                ((C117 * C707 + C50748 * C712) * C50606 +
                 (C117 * C700 + C50748 * C708) * C696) *
                    C33763) *
                   C17274) *
                  C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C33763 +
             (C5950 + C5951) * C50828) *
                C17274 +
            ((C171 * C696 + C172 * C50606) * C33763 +
             (C5954 + C5955) * C50828) *
                C17275 +
            ((C173 * C696 + C174 * C50606) * C33763 +
             (C11671 + C11672) * C50828) *
                C17276) *
               C941 -
           (((C11977 + C11978) * C50828 + (C11672 + C11671) * C33763) * C17276 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C33763) * C17275 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C33763) * C17274) *
               C942 +
           ((C6352 * C33763 + (C6357 + C6356) * C50828) * C17274 +
            (C6353 * C33763 + (C6355 + C6354) * C50828) * C17275 +
            ((C11978 + C11977) * C33763 + (C12079 + C12080) * C50828) *
                C17276) *
               C943) *
              C50893 +
          ((((C5990 + C5991) * C33763 + (C5992 + C5993) * C50828) * C17274 +
            ((C5966 + C5967) * C33763 + (C5968 + C5969) * C50828) * C17275 +
            ((C11673 + C11674) * C33763 + (C11979 + C11980) * C50828) *
                C17276) *
               C942 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C33763) *
                C17276 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C33763) *
                C17275 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C33763) *
                C17274) *
               C941 -
           ((((C117 * C6981 + C50748 * C6982) * C50606 +
              (C117 * C6979 + C50748 * C6980) * C696) *
                 C50828 +
             (C11980 + C11979) * C33763) *
                C17276 +
            ((C6375 + C6374) * C50828 + C6366 * C33763) * C17275 +
            ((C6373 + C6372) * C50828 + C6367 * C33763) * C17274) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C33763 +
           ((C2305 * C435 + C2300 * C442 + C2306 * C811 + C2301 * C819 +
             C2307 * C818 + C2302 * C834) *
                C283 +
            (C2305 * C441 + C2300 * C452 + C2306 * C820 + C2301 * C835 +
             C2307 * C833 + C2302 * C842) *
                C278 -
            (C2717 + C2716 + C2715) * C284 - (C2720 + C2719 + C2718) * C279 +
            (C2723 + C2722 + C2721) * C285 + (C2726 + C2725 + C2724) * C280) *
               C50828) *
              C50628 * C50694 * C50893 +
          (((C2533 + C2534 + C2535) * C284 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C278 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C283) +
            (C2536 + C2537 + C2538) * C279 - (C2539 + C2540 + C2541) * C285 -
            (C2542 + C2543 + C2544) * C280) *
               C33763 +
           ((C4119 + C4118 + C4117) * C284 -
            ((C2307 * C3159 + C2302 * C3166 + C2306 * C833 + C2301 * C842 +
              C2305 * C820 + C2300 * C835) *
                 C278 +
             (C2307 * C3154 + C2302 * C3158 + C2306 * C818 + C2301 * C834 +
              C2305 * C811 + C2300 * C819) *
                 C283) +
            (C4122 + C4121 + C4120) * C279 -
            (C2307 * C4100 + C2302 * C4101 + C2306 * C816 + C2301 * C830 +
             C2305 * C813 + C2300 * C823) *
                C285 -
            (C2307 * C4102 + C2302 * C4103 + C2306 * C829 + C2301 * C840 +
             C2305 * C824 + C2300 * C837) *
                C280) *
               C50828) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C696 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50606) *
               C33763 +
           ((C36698 + C36699 + C36700) * C696 +
            (C36701 + C36702 + C36703) * C50606) *
               C50828) *
              C50628 * C50694 * C692 -
          (((C2307 * C3159 + C2302 * C3166 + C2306 * C833 + C2301 * C842 +
             C2305 * C820 + C2300 * C835) *
                C50606 +
            (C2307 * C3154 + C2302 * C3158 + C2306 * C818 + C2301 * C834 +
             C2305 * C811 + C2300 * C819) *
                C696) *
               C50828 +
           ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
             C2305 * C293 + C2300 * C304) *
                C50606 +
            (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
             C2305 * C287 + C2300 * C294) *
                C696) *
               C33763) *
              C50628 * C50694 * C693 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C696 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50606) *
               C33763 +
           ((C2305 * C818 + C2300 * C834 + C2306 * C3154 + C2301 * C3158 +
             C2307 * C3157 + C2302 * C3165) *
                C696 +
            (C2305 * C833 + C2300 * C842 + C2306 * C3159 + C2301 * C3166 +
             C2307 * C3164 + C2302 * C3169) *
                C50606) *
               C50828) *
              C50628 * C50694 * C694 -
          (((C2307 * C20547 + C2302 * C20549 + C2306 * C3164 + C2301 * C3169 +
             C2305 * C3159 + C2300 * C3166) *
                C50606 +
            (C2307 * C20546 + C2302 * C20548 + C2306 * C3157 + C2301 * C3165 +
             C2305 * C3154 + C2300 * C3158) *
                C696) *
               C50828 +
           ((C2307 * C3004 + C2302 * C3007 + C2306 * C2876 + C2301 * C2881 +
             C2305 * C707 + C2300 * C712) *
                C50606 +
            (C2307 * C3001 + C2302 * C3005 + C2306 * C2872 + C2301 * C2875 +
             C2305 * C700 + C2300 * C708) *
                C696) *
               C33763) *
              C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C33763 +
            ((C36698 + C36699 + C36700) * C696 +
             (C36701 + C36702 + C36703) * C50606) *
                C50828) *
               C50628 * C941 -
           (((C37288 + C37289 + C37290) * C50606 +
             (C37291 + C37292 + C37293) * C696) *
                C50828 +
            ((C36703 + C36702 + C36701) * C50606 +
             (C36700 + C36699 + C36698) * C696) *
                C33763) *
               C50628 * C942 +
           (((C37293 + C37292 + C37291) * C696 +
             (C37290 + C37289 + C37288) * C50606) *
                C33763 +
            ((C2305 * C1169 + C2300 * C1177 + C2306 * C3601 + C2301 * C3609 +
              C2307 * C3600 + C2302 * C3608) *
                 C696 +
             (C2305 * C1176 + C2300 * C1181 + C2306 * C3607 + C2301 * C3613 +
              C2307 * C3606 + C2302 * C3612) *
                 C50606) *
                C50828) *
               C50628 * C943) *
              C50893 +
          ((((C37118 + C37119 + C37120) * C696 +
             (C37121 + C37122 + C37123) * C50606) *
                C33763 +
            ((C37452 + C37453 + C37454) * C696 +
             (C37455 + C37456 + C37457) * C50606) *
                C50828) *
               C50628 * C942 -
           (((C37123 + C37122 + C37121) * C50606 +
             (C37120 + C37119 + C37118) * C696) *
                C50828 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C33763) *
               C50628 * C941 -
           (((C2307 * C20817 + C2302 * C20819 + C2306 * C3606 + C2301 * C3612 +
              C2305 * C3607 + C2300 * C3613) *
                 C50606 +
             (C2307 * C20816 + C2302 * C20818 + C2306 * C3600 + C2301 * C3608 +
              C2305 * C3601 + C2300 * C3609) *
                 C696) *
                C50828 +
            ((C37457 + C37456 + C37455) * C50606 +
             (C37454 + C37453 + C37452) * C696) *
                C33763) *
               C50628 * C943) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C283 +
            (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C39097 +
           (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C39098 +
           (C5546 + C5547 - C5512 - C5513 + C5514 + C5515) * C39099 +
           (C6189 * C283 + C6188 * C278 - C5540 * C284 - C5541 * C279 +
            C5542 * C285 + C5543 * C280) *
               C39100) *
              C50628 * C50694 * C50893 +
          ((C327 * C284 -
            ((C117 * C293 + C50748 * C304) * C278 +
             (C117 * C287 + C50748 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C39097 +
           (C1540 * C284 - (C5983 * C278 + C5982 * C283) + C1541 * C279 -
            C1542 * C285 - C1543 * C280) *
               C39098 +
           (C5350 * C284 - (C5985 * C278 + C5984 * C283) + C5351 * C279 -
            C5352 * C285 - C5353 * C280) *
               C39099 +
           (C6370 * C284 - (C6369 * C278 + C6368 * C283) + C6371 * C279 -
            (C117 * C6979 + C50748 * C6980) * C285 -
            (C117 * C6981 + C50748 * C6982) * C280) *
               C39100) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C696 +
            (C117 * C130 + C50748 * C143) * C50606) *
               C39097 +
           (C5950 + C5951) * C39098 + C6352 * C39099 +
           (C6357 + C6356) * C39100) *
              C50628 * C50694 * C692 -
          ((C6373 + C6372) * C39100 + C6367 * C39099 +
           (C5991 + C5990) * C39098 +
           ((C117 * C293 + C50748 * C304) * C50606 +
            (C117 * C287 + C50748 * C294) * C696) *
               C39097) *
              C50628 * C50694 * C693 +
          (((C117 * C587 + C50748 * C592) * C696 +
            (C117 * C593 + C50748 * C602) * C50606) *
               C39097 +
           (C5994 + C5995) * C39098 + (C5996 + C5997) * C39099 +
           ((C117 * C3600 + C50748 * C3608) * C696 +
            (C117 * C3606 + C50748 * C3612) * C50606) *
               C39100) *
              C50628 * C50694 * C694 -
          (((C117 * C20817 + C50748 * C20819) * C50606 +
            (C117 * C20816 + C50748 * C20818) * C696) *
               C39100 +
           ((C117 * C3496 + C50748 * C3499) * C50606 +
            (C117 * C3493 + C50748 * C3497) * C696) *
               C39099 +
           ((C117 * C3159 + C50748 * C3166) * C50606 +
            (C117 * C3154 + C50748 * C3158) * C696) *
               C39098 +
           ((C117 * C707 + C50748 * C712) * C50606 +
            (C117 * C700 + C50748 * C708) * C696) *
               C39097) *
              C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C39097 +
            (C5950 + C5951) * C39098 + C6352 * C39099 + C39777 * C39100) *
               C50628 * C941 -
           ((C6493 + C6492) * C39100 + C6483 * C39099 +
            (C5953 + C5952) * C39098 + (C5951 + C5950) * C39097) *
               C50628 * C942 +
           (C6352 * C39097 + C39777 * C39098 + (C6492 + C6493) * C39099 +
            ((C117 * C6474 + C50748 * C6478) * C696 +
             (C117 * C6477 + C50748 * C6480) * C50606) *
                C39100) *
               C50628 * C943) *
              C50893 +
          (((C5990 + C5991) * C39097 + (C5992 + C5993) * C39098 +
            (C6372 + C6373) * C39099 + (C39785 + C39786) * C39100) *
               C50628 * C942 -
           (C39782 * C39100 + C6367 * C39099 + (C5991 + C5990) * C39098 +
            ((C117 * C293 + C50748 * C304) * C50606 +
             (C117 * C287 + C50748 * C294) * C696) *
                C39097) *
               C50628 * C941 -
           (((C117 * C23100 + C50748 * C23102) * C50606 +
             (C117 * C23099 + C50748 * C23101) * C696) *
                C39100 +
            (C39786 + C39785) * C39099 + C39782 * C39098 + C6367 * C39097) *
               C50628 * C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50748 * C129) * C283 +
                 (C117 * C130 + C50748 * C143) * C278 - C171 * C284 -
                 C172 * C279 + C173 * C285 + C174 * C280) *
                    C33763 +
                (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50828) *
                   C17274 +
               ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                 C175 * C285 + C176 * C280) *
                    C33763 +
                (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50828) *
                   C17275 +
               ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                 C177 * C285 + C178 * C280) *
                    C33763 +
                (C11269 + C11270 - C11271 - C11272 + C11273 + C11274) *
                    C50828) *
                   C17276) *
                  C50894 +
              (((C5504 - (C5545 + C5544) + C5505 - C5506 - C5507) * C33763 +
                (C5512 - (C5547 + C5546) + C5513 - C5514 - C5515) * C50828) *
                   C17274 +
               ((C5518 - (C5517 + C5516) + C5519 - C5520 - C5521) * C33763 +
                (C5524 - (C5523 + C5522) + C5525 - C5526 - C5527) * C50828) *
                   C17275 +
               ((C11271 - (C11270 + C11269) + C11272 - C11273 - C11274) *
                    C33763 +
                (C981 * C284 - (C980 * C278 + C979 * C283) + C982 * C279 -
                 (C117 * C948 + C50748 * C957) * C285 -
                 (C117 * C958 + C50748 * C963) * C280) *
                    C50828) *
                   C17276) *
                  C50706) *
             C50668 +
         0.5 * std::pow(Pi, 2.5) *
             ((((((C117 * C122 + C50748 * C129) * C696 +
                  (C117 * C130 + C50748 * C143) * C50606) *
                     C33763 +
                 (C5950 + C5951) * C50828) *
                    C17274 +
                ((C171 * C696 + C172 * C50606) * C33763 +
                 (C5954 + C5955) * C50828) *
                    C17275 +
                ((C173 * C696 + C174 * C50606) * C33763 +
                 (C11671 + C11672) * C50828) *
                    C17276) *
                   C50894 -
               (((C11977 + C11978) * C50828 + (C11672 + C11671) * C33763) *
                    C17276 +
                ((C5957 + C5956) * C50828 + (C5955 + C5954) * C33763) * C17275 +
                ((C5953 + C5952) * C50828 + (C5951 + C5950) * C33763) *
                    C17274) *
                   C50706) *
                  C582 +
              ((((C5990 + C5991) * C33763 + (C5992 + C5993) * C50828) * C17274 +
                ((C5966 + C5967) * C33763 + (C5968 + C5969) * C50828) * C17275 +
                ((C11673 + C11674) * C33763 + (C11979 + C11980) * C50828) *
                    C17276) *
                   C50706 -
               (((C11674 + C11673) * C50828 +
                 (C330 * C50606 + C329 * C696) * C33763) *
                    C17276 +
                ((C5967 + C5966) * C50828 +
                 (C328 * C50606 + C327 * C696) * C33763) *
                    C17275 +
                ((C5991 + C5990) * C50828 +
                 ((C117 * C293 + C50748 * C304) * C50606 +
                  (C117 * C287 + C50748 * C294) * C696) *
                     C33763) *
                    C17274) *
                   C50894) *
                  C583 +
              (((((C117 * C587 + C50748 * C592) * C696 +
                  (C117 * C593 + C50748 * C602) * C50606) *
                     C33763 +
                 (C5994 + C5995) * C50828) *
                    C17274 +
                ((C620 * C696 + C621 * C50606) * C33763 +
                 (C5978 + C5979) * C50828) *
                    C17275 +
                ((C622 * C696 + C623 * C50606) * C33763 +
                 (C11675 + C11676) * C50828) *
                    C17276) *
                   C50894 -
               ((((C117 * C3324 + C50748 * C3327) * C50606 +
                  (C117 * C3318 + C50748 * C3323) * C696) *
                     C50828 +
                 (C11676 + C11675) * C33763) *
                    C17276 +
                ((C5981 + C5980) * C50828 + (C5979 + C5978) * C33763) * C17275 +
                ((C5997 + C5996) * C50828 + (C5995 + C5994) * C33763) *
                    C17274) *
                   C50706) *
                  C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C33763 +
            (C5950 + C5951) * C50828) *
               C17274 +
           ((C171 * C696 + C172 * C50606) * C33763 + (C5954 + C5955) * C50828) *
               C17275 +
           ((C173 * C696 + C174 * C50606) * C33763 +
            (C11671 + C11672) * C50828) *
               C17276) *
              C1162 -
          (((C11977 + C11978) * C50828 + (C11672 + C11671) * C33763) * C17276 +
           ((C5957 + C5956) * C50828 + (C5955 + C5954) * C33763) * C17275 +
           ((C5953 + C5952) * C50828 + (C5951 + C5950) * C33763) * C17274) *
              C1163 +
          ((C6352 * C33763 + (C6357 + C6356) * C50828) * C17274 +
           (C6353 * C33763 + (C6355 + C6354) * C50828) * C17275 +
           ((C11978 + C11977) * C33763 + (C12079 + C12080) * C50828) * C17276) *
              C1164 -
          ((((C117 * C6151 + C50748 * C6154) * C50606 +
             (C117 * C6145 + C50748 * C6150) * C696) *
                C50828 +
            (C12080 + C12079) * C33763) *
               C17276 +
           ((C6489 + C6488) * C50828 + C6482 * C33763) * C17275 +
           ((C6493 + C6492) * C50828 + C6483 * C33763) * C17274) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C33763 +
           ((C36698 + C36699 + C36700) * C283 +
            (C36701 + C36702 + C36703) * C278 - (C2717 + C2716 + C2715) * C284 -
            (C2720 + C2719 + C2718) * C279 + (C2723 + C2722 + C2721) * C285 +
            (C2726 + C2725 + C2724) * C280) *
               C50828) *
              C50628 * C50894 +
          (((C2715 + C2716 + C2717) * C284 -
            ((C36703 + C36702 + C36701) * C278 +
             (C36700 + C36699 + C36698) * C283) +
            (C2718 + C2719 + C2720) * C279 - (C2721 + C2722 + C2723) * C285 -
            (C2724 + C2725 + C2726) * C280) *
               C33763 +
           ((C3343 + C3342 + C3341) * C284 -
            ((C2307 * C3320 + C2302 * C3325 + C2306 * C1090 + C2301 * C1095 +
              C2305 * C950 + C2300 * C959) *
                 C278 +
             (C2307 * C3316 + C2302 * C3319 + C2306 * C1083 + C2301 * C1091 +
              C2305 * C944 + C2300 * C949) *
                 C283) +
            (C3346 + C3345 + C3344) * C279 -
            (C2307 * C3318 + C2302 * C3323 + C2306 * C1081 + C2301 * C1087 +
             C2305 * C946 + C2300 * C953) *
                C285 -
            (C2307 * C3324 + C2302 * C3327 + C2306 * C1086 + C2301 * C1093 +
             C2305 * C954 + C2300 * C961) *
                C280) *
               C50828) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C33763 +
            ((C36698 + C36699 + C36700) * C696 +
             (C36701 + C36702 + C36703) * C50606) *
                C50828) *
               C50628 * C50894 -
           (((C2307 * C3320 + C2302 * C3325 + C2306 * C1090 + C2301 * C1095 +
              C2305 * C950 + C2300 * C959) *
                 C50606 +
             (C2307 * C3316 + C2302 * C3319 + C2306 * C1083 + C2301 * C1091 +
              C2305 * C944 + C2300 * C949) *
                 C696) *
                C50828 +
            ((C36703 + C36702 + C36701) * C50606 +
             (C36700 + C36699 + C36698) * C696) *
                C33763) *
               C50628 * C50706) *
              C582 +
          ((((C37118 + C37119 + C37120) * C696 +
             (C37121 + C37122 + C37123) * C50606) *
                C33763 +
            ((C2305 * C1083 + C2300 * C1091 + C2306 * C3316 + C2301 * C3319 +
              C2307 * C3493 + C2302 * C3497) *
                 C696 +
             (C2305 * C1090 + C2300 * C1095 + C2306 * C3320 + C2301 * C3325 +
              C2307 * C3496 + C2302 * C3499) *
                 C50606) *
                C50828) *
               C50628 * C50706 -
           (((C37123 + C37122 + C37121) * C50606 +
             (C37120 + C37119 + C37118) * C696) *
                C50828 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C33763) *
               C50628 * C50894) *
              C583 +
          ((((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
              C2307 * C2872 + C2302 * C2875) *
                 C696 +
             (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
              C2307 * C2876 + C2302 * C2881) *
                 C50606) *
                C33763 +
            ((C37124 + C37125 + C37126) * C696 +
             (C37127 + C37128 + C37129) * C50606) *
                C50828) *
               C50628 * C50894 -
           (((C2307 * C20747 + C2302 * C20749 + C2306 * C3496 + C2301 * C3499 +
              C2305 * C3320 + C2300 * C3325) *
                 C50606 +
             (C2307 * C20746 + C2302 * C20748 + C2306 * C3493 + C2301 * C3497 +
              C2305 * C3316 + C2300 * C3319) *
                 C696) *
                C50828 +
            ((C37129 + C37128 + C37127) * C50606 +
             (C37126 + C37125 + C37124) * C696) *
                C33763) *
               C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C696 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50606) *
               C33763 +
           ((C36698 + C36699 + C36700) * C696 +
            (C36701 + C36702 + C36703) * C50606) *
               C50828) *
              C50628 * C1162 -
          (((C37288 + C37289 + C37290) * C50606 +
            (C37291 + C37292 + C37293) * C696) *
               C50828 +
           ((C36703 + C36702 + C36701) * C50606 +
            (C36700 + C36699 + C36698) * C696) *
               C33763) *
              C50628 * C1163 +
          (((C37293 + C37292 + C37291) * C696 +
            (C37290 + C37289 + C37288) * C50606) *
               C33763 +
           ((C37568 + C37569 + C37570) * C696 +
            (C37571 + C37572 + C37573) * C50606) *
               C50828) *
              C50628 * C1164 -
          (((C2307 * C22978 + C2302 * C22980 + C2306 * C6347 + C2301 * C6350 +
             C2305 * C6147 + C2300 * C6152) *
                C50606 +
            (C2307 * C22977 + C2302 * C22979 + C2306 * C6344 + C2301 * C6348 +
             C2305 * C6143 + C2300 * C6146) *
                C696) *
               C50828 +
           ((C37573 + C37572 + C37571) * C50606 +
            (C37570 + C37569 + C37568) * C696) *
               C33763) *
              C50628 * C1165) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C283 +
            (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C39097 +
           (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C39098 +
           (C5546 + C5547 - C5512 - C5513 + C5514 + C5515) * C39099 +
           (C39298 + C39299 - C39300 - C39301 + C39302 + C39303) * C39100) *
              C50628 * C50894 +
          ((C5504 - (C5545 + C5544) + C5505 - C5506 - C5507) * C39097 +
           (C5512 - (C5547 + C5546) + C5513 - C5514 - C5515) * C39098 +
           (C39300 - (C39299 + C39298) + C39301 - C39302 - C39303) * C39099 +
           (C6190 * C284 - (C6491 * C278 + C6490 * C283) + C6191 * C279 -
            (C117 * C6145 + C50748 * C6150) * C285 -
            (C117 * C6151 + C50748 * C6154) * C280) *
               C39100) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C39097 +
            (C5950 + C5951) * C39098 + C6352 * C39099 +
            (C6357 + C6356) * C39100) *
               C50628 * C50894 -
           ((C6493 + C6492) * C39100 + C6483 * C39099 +
            (C5953 + C5952) * C39098 + (C5951 + C5950) * C39097) *
               C50628 * C50706) *
              C582 +
          (((C5990 + C5991) * C39097 + (C5992 + C5993) * C39098 +
            (C6372 + C6373) * C39099 +
            ((C117 * C6344 + C50748 * C6348) * C696 +
             (C117 * C6347 + C50748 * C6350) * C50606) *
                C39100) *
               C50628 * C50706 -
           ((C6373 + C6372) * C39100 + C6367 * C39099 +
            (C5991 + C5990) * C39098 +
            ((C117 * C293 + C50748 * C304) * C50606 +
             (C117 * C287 + C50748 * C294) * C696) *
                C39097) *
               C50628 * C50894) *
              C583 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C39097 +
            (C5994 + C5995) * C39098 + (C5996 + C5997) * C39099 +
            (C39572 + C39573) * C39100) *
               C50628 * C50894 -
           (((C117 * C22978 + C50748 * C22980) * C50606 +
             (C117 * C22977 + C50748 * C22979) * C696) *
                C39100 +
            (C39573 + C39572) * C39099 + (C5997 + C5996) * C39098 +
            (C5995 + C5994) * C39097) *
               C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C696 +
            (C117 * C130 + C50748 * C143) * C50606) *
               C39097 +
           (C5950 + C5951) * C39098 + C6352 * C39099 + C39777 * C39100) *
              C50628 * C1162 -
          (C39857 * C39100 + C6483 * C39099 + (C5953 + C5952) * C39098 +
           (C5951 + C5950) * C39097) *
              C50628 * C1163 +
          (C6352 * C39097 + C39777 * C39098 + (C6492 + C6493) * C39099 +
           (C39864 + C39865) * C39100) *
              C50628 * C1164 -
          (((C117 * C39853 + C50748 * C39855) * C50606 +
            (C117 * C39852 + C50748 * C39854) * C696) *
               C39100 +
           (C39865 + C39864) * C39099 + C39857 * C39098 + C6483 * C39097) *
              C50628 * C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1285 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50936 -
            (C2345 + C2346 + C2347) * C1286 - (C2348 + C2349 + C2350) * C50920 +
            (C2351 + C2352 + C2353) * C1287 + (C2354 + C2355 + C2356) * C1282) *
               C33763 +
           ((C36698 + C36699 + C36700) * C1285 +
            (C36701 + C36702 + C36703) * C50936 -
            (C2717 + C2716 + C2715) * C1286 - (C2720 + C2719 + C2718) * C50920 +
            (C2723 + C2722 + C2721) * C1287 + (C2726 + C2725 + C2724) * C1282) *
               C50828) *
              C50628 * C1643 +
          (((C2715 + C2716 + C2717) * C1286 -
            ((C36703 + C36702 + C36701) * C50936 +
             (C36700 + C36699 + C36698) * C1285) +
            (C2718 + C2719 + C2720) * C50920 - (C2721 + C2722 + C2723) * C1287 -
            (C2724 + C2725 + C2726) * C1282) *
               C33763 +
           ((C3343 + C3342 + C3341) * C1286 -
            ((C37288 + C37289 + C37290) * C50936 +
             (C37291 + C37292 + C37293) * C1285) +
            (C3346 + C3345 + C3344) * C50920 -
            (C2307 * C3318 + C2302 * C3323 + C2306 * C1081 + C2301 * C1087 +
             C2305 * C946 + C2300 * C953) *
                C1287 -
            (C2307 * C3324 + C2302 * C3327 + C2306 * C1086 + C2301 * C1093 +
             C2305 * C954 + C2300 * C961) *
                C1282) *
               C50828) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1285 +
             (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
             C172 * C50920 + C173 * C1287 + C174 * C1282) *
                C33763 +
            (C7162 + C7163 - C7164 - C7165 + C7166 + C7167) * C50828) *
               C17274 +
           ((C171 * C1285 + C172 * C50936 - C173 * C1286 - C174 * C50920 +
             C175 * C1287 + C176 * C1282) *
                C33763 +
            (C7174 + C7175 - C7176 - C7177 + C7178 + C7179) * C50828) *
               C17275 +
           ((C173 * C1285 + C174 * C50936 - C175 * C1286 - C176 * C50920 +
             C177 * C1287 + C178 * C1282) *
                C33763 +
            (C12721 + C12722 - C12723 - C12724 + C12725 + C12726) * C50828) *
               C17276) *
              C1643 +
          (((C7164 - (C7163 + C7162) + C7165 - C7166 - C7167) * C33763 +
            (C7170 - (C7169 + C7168) + C7171 - C7172 - C7173) * C50828) *
               C17274 +
           ((C7176 - (C7175 + C7174) + C7177 - C7178 - C7179) * C33763 +
            (C7182 - (C7181 + C7180) + C7183 - C7184 - C7185) * C50828) *
               C17275 +
           ((C12723 - (C12722 + C12721) + C12724 - C12725 - C12726) * C33763 +
            (C981 * C1286 - (C980 * C50936 + C979 * C1285) + C982 * C50920 -
             (C117 * C948 + C50748 * C957) * C1287 -
             (C117 * C958 + C50748 * C963) * C1282) *
                C50828) *
               C17276) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C1285 +
            (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
            C172 * C50920 + C173 * C1287 + C174 * C1282) *
               C39097 +
           (C7162 + C7163 - C7164 - C7165 + C7166 + C7167) * C39098 +
           (C7168 + C7169 - C7170 - C7171 + C7172 + C7173) * C39099 +
           (C40294 + C40295 - C40296 - C40297 + C40298 + C40299) * C39100) *
              C50628 * C1643 +
          ((C7164 - (C7163 + C7162) + C7165 - C7166 - C7167) * C39097 +
           (C7170 - (C7169 + C7168) + C7171 - C7172 - C7173) * C39098 +
           (C40296 - (C40295 + C40294) + C40297 - C40298 - C40299) * C39099 +
           (C6190 * C1286 - (C6491 * C50936 + C6490 * C1285) + C6191 * C50920 -
            (C117 * C6145 + C50748 * C6150) * C1287 -
            (C117 * C6151 + C50748 * C6154) * C1282) *
               C39100) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C1391 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C1386 -
             (C2345 + C2346 + C2347) * C1392 -
             (C2348 + C2349 + C2350) * C50611) *
                C33763 +
            ((C36698 + C36699 + C36700) * C1391 +
             (C36701 + C36702 + C36703) * C1386 -
             (C2717 + C2716 + C2715) * C1392 -
             (C2720 + C2719 + C2718) * C50611) *
                C50828) *
               C50628 * C1643 +
           (((C2715 + C2716 + C2717) * C1392 -
             ((C36703 + C36702 + C36701) * C1386 +
              (C36700 + C36699 + C36698) * C1391) +
             (C2718 + C2719 + C2720) * C50611) *
                C33763 +
            ((C3343 + C3342 + C3341) * C1392 -
             ((C37288 + C37289 + C37290) * C1386 +
              (C37291 + C37292 + C37293) * C1391) +
             (C3346 + C3345 + C3344) * C50611) *
                C50828) *
               C50628 * C50706) *
              C50893 +
          ((((C2533 + C2534 + C2535) * C1392 -
             ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
               C2305 * C293 + C2300 * C304) *
                  C1386 +
              (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
               C2305 * C287 + C2300 * C294) *
                  C1391) +
             (C2536 + C2537 + C2538) * C50611) *
                C33763 +
            ((C4119 + C4118 + C4117) * C1392 -
             ((C37123 + C37122 + C37121) * C1386 +
              (C37120 + C37119 + C37118) * C1391) +
             (C4122 + C4121 + C4120) * C50611) *
                C50828) *
               C50628 * C1643 +
           (((C37118 + C37119 + C37120) * C1391 +
             (C37121 + C37122 + C37123) * C1386 -
             (C4117 + C4118 + C4119) * C1392 -
             (C4120 + C4121 + C4122) * C50611) *
                C33763 +
            ((C37452 + C37453 + C37454) * C1391 +
             (C37455 + C37456 + C37457) * C1386 -
             (C2307 * C3492 + C2302 * C3495 + C2306 * C3317 + C2301 * C3321 +
              C2305 * C1082 + C2300 * C1089) *
                 C1392 -
             (C2307 * C3494 + C2302 * C3498 + C2306 * C3322 + C2301 * C3326 +
              C2305 * C1088 + C2300 * C1094) *
                 C50611) *
                C50828) *
               C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C1391 +
              (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
              C172 * C50611) *
                 C33763 +
             (C6984 + C6985 - C6986 - C6987) * C50828) *
                C17274 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                 C33763 +
             (C6992 + C6993 - C6994 - C6995) * C50828) *
                C17275 +
            ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                 C33763 +
             (C12567 + C12568 - C12569 - C12570) * C50828) *
                C17276) *
               C1643 +
           (((C6986 - (C6985 + C6984) + C6987) * C33763 +
             (C6990 - (C6989 + C6988) + C6991) * C50828) *
                C17274 +
            ((C6994 - (C6993 + C6992) + C6995) * C33763 +
             (C6998 - (C6997 + C6996) + C6999) * C50828) *
                C17275 +
            ((C12569 - (C12568 + C12567) + C12570) * C33763 +
             (C13067 - (C13068 + C13069) + C13070) * C50828) *
                C17276) *
               C50706) *
              C50893 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50748 * C304) * C1386 +
               (C117 * C287 + C50748 * C294) * C1391) +
              C328 * C50611) *
                 C33763 +
             (C7000 - (C7001 + C7002) + C7003) * C50828) *
                C17274 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                 C33763 +
             (C7008 - (C7009 + C7010) + C7011) * C50828) *
                C17275 +
            ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                 C33763 +
             (C12571 - (C12572 + C12573) + C12574) * C50828) *
                C17276) *
               C1643 +
           (((C7002 + C7001 - C7000 - C7003) * C33763 +
             (C7006 + C7005 - C7004 - C7007) * C50828) *
                C17274 +
            ((C7010 + C7009 - C7008 - C7011) * C33763 +
             (C7014 + C7013 - C7012 - C7015) * C50828) *
                C17275 +
            ((C12573 + C12572 - C12571 - C12574) * C33763 +
             (C5352 * C1391 + C5353 * C1386 -
              (C117 * C1080 + C50748 * C1085) * C1392 -
              (C117 * C1084 + C50748 * C1092) * C50611) *
                 C50828) *
                C17276) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C39097 +
            (C6984 + C6985 - C6986 - C6987) * C39098 + C7538 * C39099 +
            (C7530 + C7529 - C7528 - C7531) * C39100) *
               C50628 * C1643 +
           ((C6986 - (C6985 + C6984) + C6987) * C39097 +
            (C6990 - (C6989 + C6988) + C6991) * C39098 +
            (C7528 - (C7529 + C7530) + C7531) * C39099 +
            (C6190 * C1392 - (C6491 * C1386 + C6490 * C1391) + C6191 * C50611) *
                C39100) *
               C50628 * C50706) *
              C50893 +
          (((C327 * C1392 -
             ((C117 * C293 + C50748 * C304) * C1386 +
              (C117 * C287 + C50748 * C294) * C1391) +
             C328 * C50611) *
                C39097 +
            (C7000 - (C7001 + C7002) + C7003) * C39098 +
            (C7004 - (C7005 + C7006) + C7007) * C39099 +
            (C40192 - (C40193 + C40194) + C40195) * C39100) *
               C50628 * C1643 +
           ((C7002 + C7001 - C7000 - C7003) * C39097 +
            (C7006 + C7005 - C7004 - C7007) * C39098 +
            (C40194 + C40193 - C40192 - C40195) * C39099 +
            (C39783 * C1391 + C39784 * C1386 -
             (C117 * C6343 + C50748 * C6346) * C1392 -
             (C117 * C6345 + C50748 * C6349) * C50611) *
                C39100) *
               C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1391 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C1386 -
            (C2345 + C2346 + C2347) * C1392 -
            (C2348 + C2349 + C2350) * C50611) *
               C33763 +
           ((C36698 + C36699 + C36700) * C1391 +
            (C36701 + C36702 + C36703) * C1386 -
            (C2717 + C2716 + C2715) * C1392 -
            (C2720 + C2719 + C2718) * C50611) *
               C50828) *
              C50628 * C50940 +
          (((C2715 + C2716 + C2717) * C1392 -
            ((C36703 + C36702 + C36701) * C1386 +
             (C36700 + C36699 + C36698) * C1391) +
            (C2718 + C2719 + C2720) * C50611) *
               C33763 +
           ((C3343 + C3342 + C3341) * C1392 -
            ((C37288 + C37289 + C37290) * C1386 +
             (C37291 + C37292 + C37293) * C1391) +
            (C3346 + C3345 + C3344) * C50611) *
               C50828) *
              C50628 * C50929 +
          (((C37293 + C37292 + C37291) * C1391 +
            (C37290 + C37289 + C37288) * C1386 -
            (C3341 + C3342 + C3343) * C1392 -
            (C3344 + C3345 + C3346) * C50611) *
               C33763 +
           ((C37568 + C37569 + C37570) * C1391 +
            (C37571 + C37572 + C37573) * C1386 -
            (C2307 * C3598 + C2302 * C3604 + C2306 * C3599 + C2301 * C3605 +
             C2305 * C1168 + C2300 * C1175) *
                C1392 -
            (C2307 * C3602 + C2302 * C3610 + C2306 * C3603 + C2301 * C3611 +
             C2305 * C1174 + C2300 * C1180) *
                C50611) *
               C50828) *
              C50628 * C1875) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C33763 +
            (C6984 + C6985 - C6986 - C6987) * C50828) *
               C17274 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C33763 +
            (C6992 + C6993 - C6994 - C6995) * C50828) *
               C17275 +
           ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                C33763 +
            (C12567 + C12568 - C12569 - C12570) * C50828) *
               C17276) *
              C50940 +
          (((C6986 - (C6985 + C6984) + C6987) * C33763 +
            (C6990 - (C6989 + C6988) + C6991) * C50828) *
               C17274 +
           ((C6994 - (C6993 + C6992) + C6995) * C33763 +
            (C6998 - (C6997 + C6996) + C6999) * C50828) *
               C17275 +
           ((C12569 - (C12568 + C12567) + C12570) * C33763 +
            (C13067 - (C13068 + C13069) + C13070) * C50828) *
               C17276) *
              C50929 +
          ((C7538 * C33763 + (C7530 + C7529 - C7528 - C7531) * C50828) *
               C17274 +
           (C7539 * C33763 + (C7534 + C7533 - C7532 - C7535) * C50828) *
               C17275 +
           ((C13069 + C13068 - C13067 - C13070) * C33763 +
            (C5542 * C1391 + C5543 * C1386 -
             (C117 * C1166 + C50748 * C1171) * C1392 -
             (C117 * C1170 + C50748 * C1178) * C50611) *
                C50828) *
               C17276) *
              C1875) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C1391 +
            (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
            C172 * C50611) *
               C39097 +
           (C6984 + C6985 - C6986 - C6987) * C39098 + C7538 * C39099 +
           C40534 * C39100) *
              C50628 * C50940 +
          ((C6986 - (C6985 + C6984) + C6987) * C39097 +
           (C6990 - (C6989 + C6988) + C6991) * C39098 +
           (C7528 - (C7529 + C7530) + C7531) * C39099 +
           (C40529 - (C40530 + C40531) + C40532) * C39100) *
              C50628 * C50929 +
          (C7538 * C39097 + C40534 * C39098 +
           (C40531 + C40530 - C40529 - C40532) * C39099 +
           (C39862 * C1391 + C39863 * C1386 -
            (C117 * C6473 + C50748 * C6476) * C1392 -
            (C117 * C6475 + C50748 * C6479) * C50611) *
               C39100) *
              C50628 * C1875) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C33763 +
            (C6156 + C6157 - C6158 - C6159) * C50828) *
               C17274 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C33763 +
            (C6164 + C6165 - C6166 - C6167) * C50828) *
               C17275 +
           ((C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                C33763 +
            (C11823 + C11824 - C11825 - C11826) * C50828) *
               C17276) *
              C50694 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50748 * C304) * C50878 +
              (C117 * C287 + C50748 * C294) * C49720) +
             C328 * C50611) *
                C33763 +
            (C7734 - (C7735 + C7736) + C7737) * C50828) *
               C17274 +
           ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                C33763 +
            (C7742 - (C7743 + C7744) + C7745) * C50828) *
               C17275 +
           ((C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
                C33763 +
            (C13265 - (C13266 + C13267) + C13268) * C50828) *
               C17276) *
              C50694 * C583 +
          ((((C117 * C587 + C50748 * C592) * C49720 +
             (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
             C621 * C50611) *
                C33763 +
            (C5986 * C49720 + C5987 * C50878 - C5702 * C49713 -
             C5703 * C50611) *
                C50828) *
               C17274 +
           ((C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
                C33763 +
            (C5702 * C49720 + C5703 * C50878 - C11425 * C49713 -
             C11426 * C50611) *
                C50828) *
               C17275 +
           ((C622 * C49720 + C623 * C50878 - C624 * C49713 - C625 * C50611) *
                C33763 +
            (C11425 * C49720 + C11426 * C50878 -
             (C117 * C815 + C50748 * C828) * C49713 -
             (C117 * C827 + C50748 * C839) * C50611) *
                C50828) *
               C17276) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C118 +
            (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C33763 +
           (C5536 * C118 + C5537 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50828) *
              C17274 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C33763 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50828) *
              C17275 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C33763 +
           (C477 * C118 + C478 * C106 - C479 * C119 - C480 * C107 +
            C481 * C120 + C482 * C108 - (C117 * C439 + C50748 * C450) * C121 -
            (C117 * C451 + C50748 * C457) * C109) *
               C50828) *
              C17276) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
            C2307 * C587 + C2302 * C592) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
            C2307 * C593 + C2302 * C602) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C33763 +
          ((C2305 * C435 + C2300 * C442 + C2306 * C811 + C2301 * C819 +
            C2307 * C818 + C2302 * C834) *
               C118 +
           (C2305 * C441 + C2300 * C452 + C2306 * C820 + C2301 * C835 +
            C2307 * C833 + C2302 * C842) *
               C106 -
           (C2717 + C2716 + C2715) * C119 - (C2720 + C2719 + C2718) * C107 +
           (C2723 + C2722 + C2721) * C120 + (C2726 + C2725 + C2724) * C108 -
           (C2307 * C815 + C2302 * C828 + C2306 * C814 + C2301 * C825 +
            C2305 * C437 + C2300 * C446) *
               C121 -
           (C2307 * C827 + C2302 * C839 + C2306 * C826 + C2301 * C838 +
            C2305 * C447 + C2300 * C455) *
               C109) *
              C50828) *
         C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50878 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50611) *
               C33763 +
           ((C36698 + C36699 + C36700) * C49720 +
            (C36701 + C36702 + C36703) * C50878 -
            (C2717 + C2716 + C2715) * C49713 -
            (C2720 + C2719 + C2718) * C50611) *
               C50828) *
              C50628 * C50694 * C582 +
          (((C2533 + C2534 + C2535) * C49713 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50878 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C49720) +
            (C2536 + C2537 + C2538) * C50611) *
               C33763 +
           ((C4119 + C4118 + C4117) * C49713 -
            ((C2307 * C3159 + C2302 * C3166 + C2306 * C833 + C2301 * C842 +
              C2305 * C820 + C2300 * C835) *
                 C50878 +
             (C2307 * C3154 + C2302 * C3158 + C2306 * C818 + C2301 * C834 +
              C2305 * C811 + C2300 * C819) *
                 C49720) +
            (C4122 + C4121 + C4120) * C50611) *
               C50828) *
              C50628 * C50694 * C583 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C49720 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50878 -
            (C2897 + C2898 + C2899) * C49713 -
            (C2900 + C2901 + C2902) * C50611) *
               C33763 +
           ((C2305 * C818 + C2300 * C834 + C2306 * C3154 + C2301 * C3158 +
             C2307 * C3157 + C2302 * C3165) *
                C49720 +
            (C2305 * C833 + C2300 * C842 + C2306 * C3159 + C2301 * C3166 +
             C2307 * C3164 + C2302 * C3169) *
                C50878 -
            (C2307 * C3156 + C2302 * C3163 + C2306 * C3155 + C2301 * C3160 +
             C2305 * C817 + C2300 * C832) *
                C49713 -
            (C2307 * C3162 + C2302 * C3168 + C2306 * C3161 + C2301 * C3167 +
             C2305 * C831 + C2300 * C841) *
                C50611) *
               C50828) *
              C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50748 * C129) * C118 +
           (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C39097 +
          (C5536 * C118 + C5537 * C106 - C475 * C119 - C476 * C107 +
           C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
              C39098 +
          (C5538 * C118 + C5539 * C106 - C977 * C119 - C978 * C107 +
           C979 * C120 + C980 * C108 - C981 * C121 - C982 * C109) *
              C39099 +
          (C6189 * C118 + C6188 * C106 - C5540 * C119 - C5541 * C107 +
           C5542 * C120 + C5543 * C108 -
           (C117 * C1166 + C50748 * C1171) * C121 -
           (C117 * C1170 + C50748 * C1178) * C109) *
              C39100) *
         C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C49720 +
            (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
            C172 * C50611) *
               C39097 +
           (C6156 + C6157 - C6158 - C6159) * C39098 + C6196 * C39099 +
           (C6195 + C6194 - C6172 - C6177) * C39100) *
              C50628 * C50694 * C582 +
          ((C327 * C49713 -
            ((C117 * C293 + C50748 * C304) * C50878 +
             (C117 * C287 + C50748 * C294) * C49720) +
            C328 * C50611) *
               C39097 +
           (C7734 - (C7735 + C7736) + C7737) * C39098 +
           (C7738 - (C7739 + C7740) + C7741) * C39099 +
           (C6370 * C49713 - (C6369 * C50878 + C6368 * C49720) +
            C6371 * C50611) *
               C39100) *
              C50628 * C50694 * C583 +
          (((C117 * C587 + C50748 * C592) * C49720 +
            (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
            C621 * C50611) *
               C39097 +
           (C5986 * C49720 + C5987 * C50878 - C5702 * C49713 - C5703 * C50611) *
               C39098 +
           (C5988 * C49720 + C5989 * C50878 - C5704 * C49713 - C5705 * C50611) *
               C39099 +
           ((C117 * C3600 + C50748 * C3608) * C49720 +
            (C117 * C3606 + C50748 * C3612) * C50878 -
            (C117 * C3598 + C50748 * C3604) * C49713 -
            (C117 * C3602 + C50748 * C3610) * C50611) *
               C39100) *
              C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C33763 +
            (C5950 + C5951) * C50828) *
               C17274 +
           ((C171 * C696 + C172 * C50606) * C33763 + (C5954 + C5955) * C50828) *
               C17275 +
           ((C173 * C696 + C174 * C50606) * C33763 +
            (C11671 + C11672) * C50828) *
               C17276) *
              C50694 * C692 -
          (((C11674 + C11673) * C50828 +
            (C330 * C50606 + C329 * C696) * C33763) *
               C17276 +
           ((C5967 + C5966) * C50828 + (C328 * C50606 + C327 * C696) * C33763) *
               C17275 +
           ((C5991 + C5990) * C50828 + ((C117 * C293 + C50748 * C304) * C50606 +
                                        (C117 * C287 + C50748 * C294) * C696) *
                                           C33763) *
               C17274) *
              C50694 * C693 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C33763 +
            (C5994 + C5995) * C50828) *
               C17274 +
           ((C620 * C696 + C621 * C50606) * C33763 + (C5978 + C5979) * C50828) *
               C17275 +
           ((C622 * C696 + C623 * C50606) * C33763 +
            (C11675 + C11676) * C50828) *
               C17276) *
              C50694 * C694 -
          ((((C117 * C4102 + C50748 * C4103) * C50606 +
             (C117 * C4100 + C50748 * C4101) * C696) *
                C50828 +
            ((C117 * C703 + C50748 * C710) * C50606 +
             (C117 * C698 + C50748 * C704) * C696) *
                C33763) *
               C17276 +
           (((C117 * C3161 + C50748 * C3167) * C50606 +
             (C117 * C3155 + C50748 * C3160) * C696) *
                C50828 +
            ((C117 * C705 + C50748 * C711) * C50606 +
             (C117 * C699 + C50748 * C706) * C696) *
                C33763) *
               C17275 +
           (((C117 * C3159 + C50748 * C3166) * C50606 +
             (C117 * C3154 + C50748 * C3158) * C696) *
                C50828 +
            ((C117 * C707 + C50748 * C712) * C50606 +
             (C117 * C700 + C50748 * C708) * C696) *
                C33763) *
               C17274) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C33763 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50828) *
               C17274 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C33763 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50828) *
               C17275 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C33763 +
            (C11269 + C11270 - C11271 - C11272 + C11273 + C11274) * C50828) *
               C17276) *
              C50694 * C50893 +
          (((C327 * C284 -
             ((C117 * C293 + C50748 * C304) * C278 +
              (C117 * C287 + C50748 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C33763 +
            (C1540 * C284 - (C5983 * C278 + C5982 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C50828) *
               C17274 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C33763 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50828) *
               C17275 +
           ((C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
             C333 * C285 - C334 * C280) *
                C33763 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50748 * C1524) * C285 -
             (C117 * C1525 + C50748 * C1526) * C280) *
                C50828) *
               C17276) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C33763 +
           ((C2305 * C435 + C2300 * C442 + C2306 * C811 + C2301 * C819 +
             C2307 * C818 + C2302 * C834) *
                C283 +
            (C2305 * C441 + C2300 * C452 + C2306 * C820 + C2301 * C835 +
             C2307 * C833 + C2302 * C842) *
                C278 -
            (C2717 + C2716 + C2715) * C284 - (C2720 + C2719 + C2718) * C279 +
            (C2723 + C2722 + C2721) * C285 + (C2726 + C2725 + C2724) * C280) *
               C50828) *
              C50628 * C50694 * C50893 +
          (((C2533 + C2534 + C2535) * C284 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C278 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C283) +
            (C2536 + C2537 + C2538) * C279 - (C2539 + C2540 + C2541) * C285 -
            (C2542 + C2543 + C2544) * C280) *
               C33763 +
           ((C4119 + C4118 + C4117) * C284 -
            ((C2307 * C3159 + C2302 * C3166 + C2306 * C833 + C2301 * C842 +
              C2305 * C820 + C2300 * C835) *
                 C278 +
             (C2307 * C3154 + C2302 * C3158 + C2306 * C818 + C2301 * C834 +
              C2305 * C811 + C2300 * C819) *
                 C283) +
            (C4122 + C4121 + C4120) * C279 -
            (C2307 * C4100 + C2302 * C4101 + C2306 * C816 + C2301 * C830 +
             C2305 * C813 + C2300 * C823) *
                C285 -
            (C2307 * C4102 + C2302 * C4103 + C2306 * C829 + C2301 * C840 +
             C2305 * C824 + C2300 * C837) *
                C280) *
               C50828) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C696 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50606) *
               C33763 +
           ((C36698 + C36699 + C36700) * C696 +
            (C36701 + C36702 + C36703) * C50606) *
               C50828) *
              C50628 * C50694 * C692 -
          (((C2307 * C3159 + C2302 * C3166 + C2306 * C833 + C2301 * C842 +
             C2305 * C820 + C2300 * C835) *
                C50606 +
            (C2307 * C3154 + C2302 * C3158 + C2306 * C818 + C2301 * C834 +
             C2305 * C811 + C2300 * C819) *
                C696) *
               C50828 +
           ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
             C2305 * C293 + C2300 * C304) *
                C50606 +
            (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
             C2305 * C287 + C2300 * C294) *
                C696) *
               C33763) *
              C50628 * C50694 * C693 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C696 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50606) *
               C33763 +
           ((C2305 * C818 + C2300 * C834 + C2306 * C3154 + C2301 * C3158 +
             C2307 * C3157 + C2302 * C3165) *
                C696 +
            (C2305 * C833 + C2300 * C842 + C2306 * C3159 + C2301 * C3166 +
             C2307 * C3164 + C2302 * C3169) *
                C50606) *
               C50828) *
              C50628 * C50694 * C694 -
          (((C2307 * C20547 + C2302 * C20549 + C2306 * C3164 + C2301 * C3169 +
             C2305 * C3159 + C2300 * C3166) *
                C50606 +
            (C2307 * C20546 + C2302 * C20548 + C2306 * C3157 + C2301 * C3165 +
             C2305 * C3154 + C2300 * C3158) *
                C696) *
               C50828 +
           ((C2307 * C3004 + C2302 * C3007 + C2306 * C2876 + C2301 * C2881 +
             C2305 * C707 + C2300 * C712) *
                C50606 +
            (C2307 * C3001 + C2302 * C3005 + C2306 * C2872 + C2301 * C2875 +
             C2305 * C700 + C2300 * C708) *
                C696) *
               C33763) *
              C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C283 +
            (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C39097 +
           (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C39098 +
           (C5546 + C5547 - C5512 - C5513 + C5514 + C5515) * C39099 +
           (C6189 * C283 + C6188 * C278 - C5540 * C284 - C5541 * C279 +
            C5542 * C285 + C5543 * C280) *
               C39100) *
              C50628 * C50694 * C50893 +
          ((C327 * C284 -
            ((C117 * C293 + C50748 * C304) * C278 +
             (C117 * C287 + C50748 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C39097 +
           (C1540 * C284 - (C5983 * C278 + C5982 * C283) + C1541 * C279 -
            C1542 * C285 - C1543 * C280) *
               C39098 +
           (C5350 * C284 - (C5985 * C278 + C5984 * C283) + C5351 * C279 -
            C5352 * C285 - C5353 * C280) *
               C39099 +
           (C6370 * C284 - (C6369 * C278 + C6368 * C283) + C6371 * C279 -
            (C117 * C6979 + C50748 * C6980) * C285 -
            (C117 * C6981 + C50748 * C6982) * C280) *
               C39100) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C696 +
            (C117 * C130 + C50748 * C143) * C50606) *
               C39097 +
           (C5950 + C5951) * C39098 + C6352 * C39099 +
           (C6357 + C6356) * C39100) *
              C50628 * C50694 * C692 -
          ((C6373 + C6372) * C39100 + C6367 * C39099 +
           (C5991 + C5990) * C39098 +
           ((C117 * C293 + C50748 * C304) * C50606 +
            (C117 * C287 + C50748 * C294) * C696) *
               C39097) *
              C50628 * C50694 * C693 +
          (((C117 * C587 + C50748 * C592) * C696 +
            (C117 * C593 + C50748 * C602) * C50606) *
               C39097 +
           (C5994 + C5995) * C39098 + (C5996 + C5997) * C39099 +
           ((C117 * C3600 + C50748 * C3608) * C696 +
            (C117 * C3606 + C50748 * C3612) * C50606) *
               C39100) *
              C50628 * C50694 * C694 -
          (((C117 * C20817 + C50748 * C20819) * C50606 +
            (C117 * C20816 + C50748 * C20818) * C696) *
               C39100 +
           ((C117 * C3496 + C50748 * C3499) * C50606 +
            (C117 * C3493 + C50748 * C3497) * C696) *
               C39099 +
           ((C117 * C3159 + C50748 * C3166) * C50606 +
            (C117 * C3154 + C50748 * C3158) * C696) *
               C39098 +
           ((C117 * C707 + C50748 * C712) * C50606 +
            (C117 * C700 + C50748 * C708) * C696) *
               C39097) *
              C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C33763 +
             (C5950 + C5951) * C50828) *
                C17274 +
            ((C171 * C696 + C172 * C50606) * C33763 +
             (C5954 + C5955) * C50828) *
                C17275 +
            ((C173 * C696 + C174 * C50606) * C33763 +
             (C11671 + C11672) * C50828) *
                C17276) *
               C50894 -
           (((C11977 + C11978) * C50828 + (C11672 + C11671) * C33763) * C17276 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C33763) * C17275 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C33763) * C17274) *
               C50706) *
              C582 +
          ((((C5990 + C5991) * C33763 + (C5992 + C5993) * C50828) * C17274 +
            ((C5966 + C5967) * C33763 + (C5968 + C5969) * C50828) * C17275 +
            ((C11673 + C11674) * C33763 + (C11979 + C11980) * C50828) *
                C17276) *
               C50706 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C33763) *
                C17276 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C33763) *
                C17275 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C33763) *
                C17274) *
               C50894) *
              C583 +
          (((((C117 * C587 + C50748 * C592) * C696 +
              (C117 * C593 + C50748 * C602) * C50606) *
                 C33763 +
             (C5994 + C5995) * C50828) *
                C17274 +
            ((C620 * C696 + C621 * C50606) * C33763 +
             (C5978 + C5979) * C50828) *
                C17275 +
            ((C622 * C696 + C623 * C50606) * C33763 +
             (C11675 + C11676) * C50828) *
                C17276) *
               C50894 -
           ((((C117 * C3324 + C50748 * C3327) * C50606 +
              (C117 * C3318 + C50748 * C3323) * C696) *
                 C50828 +
             (C11676 + C11675) * C33763) *
                C17276 +
            ((C5981 + C5980) * C50828 + (C5979 + C5978) * C33763) * C17275 +
            ((C5997 + C5996) * C50828 + (C5995 + C5994) * C33763) * C17274) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C33763 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50828) *
               C17274 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C33763 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50828) *
               C17275 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C33763 +
            (C11269 + C11270 - C11271 - C11272 + C11273 + C11274) * C50828) *
               C17276) *
              C50894 +
          (((C5504 - (C5545 + C5544) + C5505 - C5506 - C5507) * C33763 +
            (C5512 - (C5547 + C5546) + C5513 - C5514 - C5515) * C50828) *
               C17274 +
           ((C5518 - (C5517 + C5516) + C5519 - C5520 - C5521) * C33763 +
            (C5524 - (C5523 + C5522) + C5525 - C5526 - C5527) * C50828) *
               C17275 +
           ((C11271 - (C11270 + C11269) + C11272 - C11273 - C11274) * C33763 +
            (C981 * C284 - (C980 * C278 + C979 * C283) + C982 * C279 -
             (C117 * C948 + C50748 * C957) * C285 -
             (C117 * C958 + C50748 * C963) * C280) *
                C50828) *
               C17276) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C33763 +
           ((C36698 + C36699 + C36700) * C283 +
            (C36701 + C36702 + C36703) * C278 - (C2717 + C2716 + C2715) * C284 -
            (C2720 + C2719 + C2718) * C279 + (C2723 + C2722 + C2721) * C285 +
            (C2726 + C2725 + C2724) * C280) *
               C50828) *
              C50628 * C50894 +
          (((C2715 + C2716 + C2717) * C284 -
            ((C36703 + C36702 + C36701) * C278 +
             (C36700 + C36699 + C36698) * C283) +
            (C2718 + C2719 + C2720) * C279 - (C2721 + C2722 + C2723) * C285 -
            (C2724 + C2725 + C2726) * C280) *
               C33763 +
           ((C3343 + C3342 + C3341) * C284 -
            ((C2307 * C3320 + C2302 * C3325 + C2306 * C1090 + C2301 * C1095 +
              C2305 * C950 + C2300 * C959) *
                 C278 +
             (C2307 * C3316 + C2302 * C3319 + C2306 * C1083 + C2301 * C1091 +
              C2305 * C944 + C2300 * C949) *
                 C283) +
            (C3346 + C3345 + C3344) * C279 -
            (C2307 * C3318 + C2302 * C3323 + C2306 * C1081 + C2301 * C1087 +
             C2305 * C946 + C2300 * C953) *
                C285 -
            (C2307 * C3324 + C2302 * C3327 + C2306 * C1086 + C2301 * C1093 +
             C2305 * C954 + C2300 * C961) *
                C280) *
               C50828) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C33763 +
            ((C36698 + C36699 + C36700) * C696 +
             (C36701 + C36702 + C36703) * C50606) *
                C50828) *
               C50628 * C50894 -
           (((C2307 * C3320 + C2302 * C3325 + C2306 * C1090 + C2301 * C1095 +
              C2305 * C950 + C2300 * C959) *
                 C50606 +
             (C2307 * C3316 + C2302 * C3319 + C2306 * C1083 + C2301 * C1091 +
              C2305 * C944 + C2300 * C949) *
                 C696) *
                C50828 +
            ((C36703 + C36702 + C36701) * C50606 +
             (C36700 + C36699 + C36698) * C696) *
                C33763) *
               C50628 * C50706) *
              C582 +
          ((((C37118 + C37119 + C37120) * C696 +
             (C37121 + C37122 + C37123) * C50606) *
                C33763 +
            ((C2305 * C1083 + C2300 * C1091 + C2306 * C3316 + C2301 * C3319 +
              C2307 * C3493 + C2302 * C3497) *
                 C696 +
             (C2305 * C1090 + C2300 * C1095 + C2306 * C3320 + C2301 * C3325 +
              C2307 * C3496 + C2302 * C3499) *
                 C50606) *
                C50828) *
               C50628 * C50706 -
           (((C37123 + C37122 + C37121) * C50606 +
             (C37120 + C37119 + C37118) * C696) *
                C50828 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C33763) *
               C50628 * C50894) *
              C583 +
          ((((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
              C2307 * C2872 + C2302 * C2875) *
                 C696 +
             (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
              C2307 * C2876 + C2302 * C2881) *
                 C50606) *
                C33763 +
            ((C37124 + C37125 + C37126) * C696 +
             (C37127 + C37128 + C37129) * C50606) *
                C50828) *
               C50628 * C50894 -
           (((C2307 * C20747 + C2302 * C20749 + C2306 * C3496 + C2301 * C3499 +
              C2305 * C3320 + C2300 * C3325) *
                 C50606 +
             (C2307 * C20746 + C2302 * C20748 + C2306 * C3493 + C2301 * C3497 +
              C2305 * C3316 + C2300 * C3319) *
                 C696) *
                C50828 +
            ((C37129 + C37128 + C37127) * C50606 +
             (C37126 + C37125 + C37124) * C696) *
                C33763) *
               C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C283 +
            (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C39097 +
           (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C39098 +
           (C5546 + C5547 - C5512 - C5513 + C5514 + C5515) * C39099 +
           (C39298 + C39299 - C39300 - C39301 + C39302 + C39303) * C39100) *
              C50628 * C50894 +
          ((C5504 - (C5545 + C5544) + C5505 - C5506 - C5507) * C39097 +
           (C5512 - (C5547 + C5546) + C5513 - C5514 - C5515) * C39098 +
           (C39300 - (C39299 + C39298) + C39301 - C39302 - C39303) * C39099 +
           (C6190 * C284 - (C6491 * C278 + C6490 * C283) + C6191 * C279 -
            (C117 * C6145 + C50748 * C6150) * C285 -
            (C117 * C6151 + C50748 * C6154) * C280) *
               C39100) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C39097 +
            (C5950 + C5951) * C39098 + C6352 * C39099 +
            (C6357 + C6356) * C39100) *
               C50628 * C50894 -
           ((C6493 + C6492) * C39100 + C6483 * C39099 +
            (C5953 + C5952) * C39098 + (C5951 + C5950) * C39097) *
               C50628 * C50706) *
              C582 +
          (((C5990 + C5991) * C39097 + (C5992 + C5993) * C39098 +
            (C6372 + C6373) * C39099 +
            ((C117 * C6344 + C50748 * C6348) * C696 +
             (C117 * C6347 + C50748 * C6350) * C50606) *
                C39100) *
               C50628 * C50706 -
           ((C6373 + C6372) * C39100 + C6367 * C39099 +
            (C5991 + C5990) * C39098 +
            ((C117 * C293 + C50748 * C304) * C50606 +
             (C117 * C287 + C50748 * C294) * C696) *
                C39097) *
               C50628 * C50894) *
              C583 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C39097 +
            (C5994 + C5995) * C39098 + (C5996 + C5997) * C39099 +
            (C39572 + C39573) * C39100) *
               C50628 * C50894 -
           (((C117 * C22978 + C50748 * C22980) * C50606 +
             (C117 * C22977 + C50748 * C22979) * C696) *
                C39100 +
            (C39573 + C39572) * C39099 + (C5997 + C5996) * C39098 +
            (C5995 + C5994) * C39097) *
               C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50748 * C129) * C1285 +
                      (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
                      C172 * C50920 + C173 * C1287 + C174 * C1282) *
                         C50943 +
                     (C7162 + C7163 - C7164 - C7165 + C7166 + C7167) * C50944 +
                     (C7168 + C7169 - C7170 - C7171 + C7172 + C7173) * C44456) *
                        C50887 +
                    ((C171 * C1285 + C172 * C50936 - C173 * C1286 -
                      C174 * C50920 + C175 * C1287 + C176 * C1282) *
                         C50943 +
                     (C7174 + C7175 - C7176 - C7177 + C7178 + C7179) * C50944 +
                     (C7180 + C7181 - C7182 - C7183 + C7184 + C7185) * C44456) *
                        C50633) *
                       C50694 * C1283 +
                   (((C327 * C1286 -
                      ((C117 * C293 + C50748 * C304) * C50936 +
                       (C117 * C287 + C50748 * C294) * C1285) +
                      C328 * C50920 - C329 * C1287 - C330 * C1282) *
                         C50943 +
                     (C1540 * C1286 - (C5983 * C50936 + C5982 * C1285) +
                      C1541 * C50920 - C1542 * C1287 - C1543 * C1282) *
                         C50944 +
                     (C5350 * C1286 - (C5985 * C50936 + C5984 * C1285) +
                      C5351 * C50920 - C5352 * C1287 - C5353 * C1282) *
                         C44456) *
                        C50887 +
                    ((C329 * C1286 - (C328 * C50936 + C327 * C1285) +
                      C330 * C50920 - C331 * C1287 - C332 * C1282) *
                         C50943 +
                     (C1542 * C1286 - (C1541 * C50936 + C1540 * C1285) +
                      C1543 * C50920 - C1544 * C1287 - C1545 * C1282) *
                         C50944 +
                     (C5352 * C1286 - (C5351 * C50936 + C5350 * C1285) +
                      C5353 * C50920 - (C117 * C1080 + C50748 * C1085) * C1287 -
                      (C117 * C1084 + C50748 * C1092) * C1282) *
                         C44456) *
                        C50633) *
                       C50694 * C50682)) /
                 (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C50943 +
            (C6984 + C6985 - C6986 - C6987) * C50944 + C7538 * C44456) *
               C50887 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C50943 +
            (C6992 + C6993 - C6994 - C6995) * C50944 + C7539 * C44456) *
               C50633) *
              C50694 * C50939 +
          (((C327 * C1392 -
             ((C117 * C293 + C50748 * C304) * C1386 +
              (C117 * C287 + C50748 * C294) * C1391) +
             C328 * C50611) *
                C50943 +
            (C7000 - (C7001 + C7002) + C7003) * C50944 +
            (C7004 - (C7005 + C7006) + C7007) * C44456) *
               C50887 +
           ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                C50943 +
            (C7008 - (C7009 + C7010) + C7011) * C50944 +
            (C7012 - (C7013 + C7014) + C7015) * C44456) *
               C50633) *
              C50694 * C50926 +
          ((((C117 * C587 + C50748 * C592) * C1391 +
             (C117 * C593 + C50748 * C602) * C1386 - C620 * C1392 -
             C621 * C50611) *
                C50943 +
            (C5986 * C1391 + C5987 * C1386 - C5702 * C1392 - C5703 * C50611) *
                C50944 +
            (C5988 * C1391 + C5989 * C1386 - C5704 * C1392 - C5705 * C50611) *
                C44456) *
               C50887 +
           ((C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50611) *
                C50943 +
            (C5702 * C1391 + C5703 * C1386 - C11425 * C1392 - C11426 * C50611) *
                C50944 +
            (C5704 * C1391 + C5705 * C1386 -
             (C117 * C3318 + C50748 * C3323) * C1392 -
             (C117 * C3324 + C50748 * C3327) * C50611) *
                C44456) *
               C50633) *
              C50694 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C1391 +
              (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
              C172 * C50611) *
                 C50943 +
             (C6984 + C6985 - C6986 - C6987) * C50944 + C7538 * C44456) *
                C50887 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                 C50943 +
             (C6992 + C6993 - C6994 - C6995) * C50944 + C7539 * C44456) *
                C50633) *
               C50894 +
           (((C6986 - (C6985 + C6984) + C6987) * C50943 +
             (C6990 - (C6989 + C6988) + C6991) * C50944 +
             (C7528 - (C7529 + C7530) + C7531) * C44456) *
                C50887 +
            ((C6994 - (C6993 + C6992) + C6995) * C50943 +
             (C6998 - (C6997 + C6996) + C6999) * C50944 +
             (C7532 - (C7533 + C7534) + C7535) * C44456) *
                C50633) *
               C50706) *
              C1283 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50748 * C304) * C1386 +
               (C117 * C287 + C50748 * C294) * C1391) +
              C328 * C50611) *
                 C50943 +
             (C7000 - (C7001 + C7002) + C7003) * C50944 +
             (C7004 - (C7005 + C7006) + C7007) * C44456) *
                C50887 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                 C50943 +
             (C7008 - (C7009 + C7010) + C7011) * C50944 +
             (C7012 - (C7013 + C7014) + C7015) * C44456) *
                C50633) *
               C50894 +
           (((C7002 + C7001 - C7000 - C7003) * C50943 +
             (C7006 + C7005 - C7004 - C7007) * C50944 +
             (C40194 + C40193 - C40192 - C40195) * C44456) *
                C50887 +
            ((C7010 + C7009 - C7008 - C7011) * C50943 +
             (C7014 + C7013 - C7012 - C7015) * C50944 +
             (C6370 * C1391 + C6371 * C1386 -
              (C117 * C6979 + C50748 * C6980) * C1392 -
              (C117 * C6981 + C50748 * C6982) * C50611) *
                 C44456) *
                C50633) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C49720 +
              (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
              C172 * C50611) *
                 C50943 +
             (C6156 + C6157 - C6158 - C6159) * C50944 + C6196 * C44456) *
                C50887 +
            ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                 C50943 +
             (C6164 + C6165 - C6166 - C6167) * C50944 + C6197 * C44456) *
                C50633) *
               C1643 +
           (((C6158 - (C6157 + C6156) + C6159) * C50943 +
             (C6162 - (C6161 + C6160) + C6163) * C50944 +
             (C6172 - (C6194 + C6195) + C6177) * C44456) *
                C50887 +
            ((C6166 - (C6165 + C6164) + C6167) * C50943 +
             (C6170 - (C6169 + C6168) + C6171) * C50944 +
             (C6178 - (C6179 + C6180) + C6181) * C44456) *
                C50633) *
               C50706) *
              C1283 +
          ((((C327 * C49713 -
              ((C117 * C293 + C50748 * C304) * C50878 +
               (C117 * C287 + C50748 * C294) * C49720) +
              C328 * C50611) *
                 C50943 +
             (C7734 - (C7735 + C7736) + C7737) * C50944 +
             (C7738 - (C7739 + C7740) + C7741) * C44456) *
                C50887 +
            ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                 C50943 +
             (C7742 - (C7743 + C7744) + C7745) * C50944 +
             (C7746 - (C7747 + C7748) + C7749) * C44456) *
                C50633) *
               C1643 +
           (((C7736 + C7735 - C7734 - C7737) * C50943 +
             (C7740 + C7739 - C7738 - C7741) * C50944 +
             (C40667 + C40666 - C40665 - C40668) * C44456) *
                C50887 +
            ((C7744 + C7743 - C7742 - C7745) * C50943 +
             (C7748 + C7747 - C7746 - C7749) * C50944 +
             (C6370 * C49720 + C6371 * C50878 -
              (C117 * C6979 + C50748 * C6980) * C49713 -
              (C117 * C6981 + C50748 * C6982) * C50611) *
                 C44456) *
                C50633) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[199] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C117 * C122 + C50748 * C129) * C696 +
                       (C117 * C130 + C50748 * C143) * C50606) *
                          C50943 +
                      (C5950 + C5951) * C50944 + C6352 * C44456) *
                         C50887 +
                     ((C171 * C696 + C172 * C50606) * C50943 +
                      (C5954 + C5955) * C50944 + C6353 * C44456) *
                         C50633) *
                        C1643 -
                    ((C6482 * C44456 + (C5957 + C5956) * C50944 +
                      (C5955 + C5954) * C50943) *
                         C50633 +
                     (C6483 * C44456 + (C5953 + C5952) * C50944 +
                      (C5951 + C5950) * C50943) *
                         C50887) *
                        C50706) *
                       C50939 +
                   ((((C5990 + C5991) * C50943 + (C5992 + C5993) * C50944 +
                      (C6372 + C6373) * C44456) *
                         C50887 +
                     ((C5966 + C5967) * C50943 + (C5968 + C5969) * C50944 +
                      (C6374 + C6375) * C44456) *
                         C50633) *
                        C50706 -
                    ((C6366 * C44456 + (C5967 + C5966) * C50944 +
                      (C328 * C50606 + C327 * C696) * C50943) *
                         C50633 +
                     (C6367 * C44456 + (C5991 + C5990) * C50944 +
                      ((C117 * C293 + C50748 * C304) * C50606 +
                       (C117 * C287 + C50748 * C294) * C696) *
                          C50943) *
                         C50887) *
                        C1643) *
                       C50926 +
                   (((((C117 * C587 + C50748 * C592) * C696 +
                       (C117 * C593 + C50748 * C602) * C50606) *
                          C50943 +
                      (C5994 + C5995) * C50944 + (C5996 + C5997) * C44456) *
                         C50887 +
                     ((C620 * C696 + C621 * C50606) * C50943 +
                      (C5978 + C5979) * C50944 + (C5980 + C5981) * C44456) *
                         C50633) *
                        C1643 -
                    ((((C117 * C3602 + C50748 * C3610) * C50606 +
                       (C117 * C3598 + C50748 * C3604) * C696) *
                          C44456 +
                      (C5981 + C5980) * C50944 + (C5979 + C5978) * C50943) *
                         C50633 +
                     ((C39573 + C39572) * C44456 + (C5997 + C5996) * C50944 +
                      (C5995 + C5994) * C50943) *
                         C50887) *
                        C50706) *
                       C1390)) /
                 (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C50943 +
             (C5950 + C5951) * C50944 + C6352 * C44456) *
                C50887 +
            ((C171 * C696 + C172 * C50606) * C50943 + (C5954 + C5955) * C50944 +
             C6353 * C44456) *
                C50633) *
               C50940 -
           ((C6482 * C44456 + (C5957 + C5956) * C50944 +
             (C5955 + C5954) * C50943) *
                C50633 +
            (C6483 * C44456 + (C5953 + C5952) * C50944 +
             (C5951 + C5950) * C50943) *
                C50887) *
               C50929 +
           ((C6352 * C50943 + C39777 * C50944 + (C6492 + C6493) * C44456) *
                C50887 +
            (C6353 * C50943 + (C6355 + C6354) * C50944 +
             (C6488 + C6489) * C44456) *
                C50633) *
               C1875) *
              C1283 +
          ((((C5990 + C5991) * C50943 + (C5992 + C5993) * C50944 +
             (C6372 + C6373) * C44456) *
                C50887 +
            ((C5966 + C5967) * C50943 + (C5968 + C5969) * C50944 +
             (C6374 + C6375) * C44456) *
                C50633) *
               C50929 -
           ((C6366 * C44456 + (C5967 + C5966) * C50944 +
             (C328 * C50606 + C327 * C696) * C50943) *
                C50633 +
            (C6367 * C44456 + (C5991 + C5990) * C50944 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C50943) *
                C50887) *
               C50940 -
           ((((C117 * C6345 + C50748 * C6349) * C50606 +
              (C117 * C6343 + C50748 * C6346) * C696) *
                 C44456 +
             (C6375 + C6374) * C50944 + C6366 * C50943) *
                C50633 +
            ((C39786 + C39785) * C44456 + C39782 * C50944 + C6367 * C50943) *
                C50887) *
               C1875) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C50943 +
            (C6156 + C6157 - C6158 - C6159) * C50944 + C6196 * C44456) *
               C50887 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C50943 +
            (C6164 + C6165 - C6166 - C6167) * C50944 + C6197 * C44456) *
               C50633) *
              C50694 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50748 * C304) * C50878 +
              (C117 * C287 + C50748 * C294) * C49720) +
             C328 * C50611) *
                C50943 +
            (C7734 - (C7735 + C7736) + C7737) * C50944 +
            (C7738 - (C7739 + C7740) + C7741) * C44456) *
               C50887 +
           ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                C50943 +
            (C7742 - (C7743 + C7744) + C7745) * C50944 +
            (C7746 - (C7747 + C7748) + C7749) * C44456) *
               C50633) *
              C50694 * C583 +
          ((((C117 * C587 + C50748 * C592) * C49720 +
             (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
             C621 * C50611) *
                C50943 +
            (C5986 * C49720 + C5987 * C50878 - C5702 * C49713 -
             C5703 * C50611) *
                C50944 +
            (C5988 * C49720 + C5989 * C50878 - C5704 * C49713 -
             C5705 * C50611) *
                C44456) *
               C50887 +
           ((C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
                C50943 +
            (C5702 * C49720 + C5703 * C50878 - C11425 * C49713 -
             C11426 * C50611) *
                C50944 +
            (C5704 * C49720 + C5705 * C50878 -
             (C117 * C3318 + C50748 * C3323) * C49713 -
             (C117 * C3324 + C50748 * C3327) * C50611) *
                C44456) *
               C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C118 +
            (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50943 +
           (C5536 * C118 + C5537 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50944 +
           (C5538 * C118 + C5539 * C106 - C977 * C119 - C978 * C107 +
            C979 * C120 + C980 * C108 - C981 * C121 - C982 * C109) *
               C44456) *
              C50887 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50943 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50944 +
           (C977 * C118 + C978 * C106 - C979 * C119 - C980 * C107 +
            C981 * C120 + C982 * C108 - (C117 * C948 + C50748 * C957) * C121 -
            (C117 * C958 + C50748 * C963) * C109) *
               C44456) *
              C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C50943 +
            (C6156 + C6157 - C6158 - C6159) * C50944 + C6196 * C44456) *
               C50887 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C50943 +
            (C6164 + C6165 - C6166 - C6167) * C50944 + C6197 * C44456) *
               C50633) *
              C941 +
          (((C6158 - (C6157 + C6156) + C6159) * C50943 +
            (C6162 - (C6161 + C6160) + C6163) * C50944 +
            (C6172 - (C6194 + C6195) + C6177) * C44456) *
               C50887 +
           ((C6166 - (C6165 + C6164) + C6167) * C50943 +
            (C6170 - (C6169 + C6168) + C6171) * C50944 +
            (C6178 - (C6179 + C6180) + C6181) * C44456) *
               C50633) *
              C942 +
          ((C6196 * C50943 + C39678 * C50944 +
            (C39675 + C39674 - C39673 - C39676) * C44456) *
               C50887 +
           (C6197 * C50943 + (C6180 + C6179 - C6178 - C6181) * C50944 +
            (C6190 * C49720 + C6191 * C50878 -
             (C117 * C6145 + C50748 * C6150) * C49713 -
             (C117 * C6151 + C50748 * C6154) * C50611) *
                C44456) *
               C50633) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C50943 +
            (C5950 + C5951) * C50944 + C6352 * C44456) *
               C50887 +
           ((C171 * C696 + C172 * C50606) * C50943 + (C5954 + C5955) * C50944 +
            C6353 * C44456) *
               C50633) *
              C50694 * C692 -
          ((C6366 * C44456 + (C5967 + C5966) * C50944 +
            (C328 * C50606 + C327 * C696) * C50943) *
               C50633 +
           (C6367 * C44456 + (C5991 + C5990) * C50944 +
            ((C117 * C293 + C50748 * C304) * C50606 +
             (C117 * C287 + C50748 * C294) * C696) *
                C50943) *
               C50887) *
              C50694 * C693 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C50943 +
            (C5994 + C5995) * C50944 + (C5996 + C5997) * C44456) *
               C50887 +
           ((C620 * C696 + C621 * C50606) * C50943 + (C5978 + C5979) * C50944 +
            (C5980 + C5981) * C44456) *
               C50633) *
              C50694 * C694 -
          ((((C117 * C3494 + C50748 * C3498) * C50606 +
             (C117 * C3492 + C50748 * C3495) * C696) *
                C44456 +
            ((C117 * C3161 + C50748 * C3167) * C50606 +
             (C117 * C3155 + C50748 * C3160) * C696) *
                C50944 +
            ((C117 * C705 + C50748 * C711) * C50606 +
             (C117 * C699 + C50748 * C706) * C696) *
                C50943) *
               C50633 +
           (((C117 * C3496 + C50748 * C3499) * C50606 +
             (C117 * C3493 + C50748 * C3497) * C696) *
                C44456 +
            ((C117 * C3159 + C50748 * C3166) * C50606 +
             (C117 * C3154 + C50748 * C3158) * C696) *
                C50944 +
            ((C117 * C707 + C50748 * C712) * C50606 +
             (C117 * C700 + C50748 * C708) * C696) *
                C50943) *
               C50887) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50943 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50944 +
            (C5546 + C5547 - C5512 - C5513 + C5514 + C5515) * C44456) *
               C50887 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50943 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50944 +
            (C5522 + C5523 - C5524 - C5525 + C5526 + C5527) * C44456) *
               C50633) *
              C50694 * C50893 +
          (((C327 * C284 -
             ((C117 * C293 + C50748 * C304) * C278 +
              (C117 * C287 + C50748 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C50943 +
            (C1540 * C284 - (C5983 * C278 + C5982 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C50944 +
            (C5350 * C284 - (C5985 * C278 + C5984 * C283) + C5351 * C279 -
             C5352 * C285 - C5353 * C280) *
                C44456) *
               C50887 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C50943 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50944 +
            (C5352 * C284 - (C5351 * C278 + C5350 * C283) + C5353 * C279 -
             (C117 * C1080 + C50748 * C1085) * C285 -
             (C117 * C1084 + C50748 * C1092) * C280) *
                C44456) *
               C50633) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C50943 +
             (C5950 + C5951) * C50944 + C6352 * C44456) *
                C50887 +
            ((C171 * C696 + C172 * C50606) * C50943 + (C5954 + C5955) * C50944 +
             C6353 * C44456) *
                C50633) *
               C941 -
           ((C6482 * C44456 + (C5957 + C5956) * C50944 +
             (C5955 + C5954) * C50943) *
                C50633 +
            (C6483 * C44456 + (C5953 + C5952) * C50944 +
             (C5951 + C5950) * C50943) *
                C50887) *
               C942 +
           ((C6352 * C50943 + C39777 * C50944 + (C6492 + C6493) * C44456) *
                C50887 +
            (C6353 * C50943 + (C6355 + C6354) * C50944 +
             (C6488 + C6489) * C44456) *
                C50633) *
               C943) *
              C50893 +
          ((((C5990 + C5991) * C50943 + (C5992 + C5993) * C50944 +
             (C6372 + C6373) * C44456) *
                C50887 +
            ((C5966 + C5967) * C50943 + (C5968 + C5969) * C50944 +
             (C6374 + C6375) * C44456) *
                C50633) *
               C942 -
           ((C6366 * C44456 + (C5967 + C5966) * C50944 +
             (C328 * C50606 + C327 * C696) * C50943) *
                C50633 +
            (C6367 * C44456 + (C5991 + C5990) * C50944 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C50943) *
                C50887) *
               C941 -
           ((((C117 * C6345 + C50748 * C6349) * C50606 +
              (C117 * C6343 + C50748 * C6346) * C696) *
                 C44456 +
             (C6375 + C6374) * C50944 + C6366 * C50943) *
                C50633 +
            ((C39786 + C39785) * C44456 + C39782 * C50944 + C6367 * C50943) *
                C50887) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C50943 +
             (C5950 + C5951) * C50944 + C6352 * C44456) *
                C50887 +
            ((C171 * C696 + C172 * C50606) * C50943 + (C5954 + C5955) * C50944 +
             C6353 * C44456) *
                C50633) *
               C50894 -
           ((C6482 * C44456 + (C5957 + C5956) * C50944 +
             (C5955 + C5954) * C50943) *
                C50633 +
            (C6483 * C44456 + (C5953 + C5952) * C50944 +
             (C5951 + C5950) * C50943) *
                C50887) *
               C50706) *
              C582 +
          ((((C5990 + C5991) * C50943 + (C5992 + C5993) * C50944 +
             (C6372 + C6373) * C44456) *
                C50887 +
            ((C5966 + C5967) * C50943 + (C5968 + C5969) * C50944 +
             (C6374 + C6375) * C44456) *
                C50633) *
               C50706 -
           ((C6366 * C44456 + (C5967 + C5966) * C50944 +
             (C328 * C50606 + C327 * C696) * C50943) *
                C50633 +
            (C6367 * C44456 + (C5991 + C5990) * C50944 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C50943) *
                C50887) *
               C50894) *
              C583 +
          (((((C117 * C587 + C50748 * C592) * C696 +
              (C117 * C593 + C50748 * C602) * C50606) *
                 C50943 +
             (C5994 + C5995) * C50944 + (C5996 + C5997) * C44456) *
                C50887 +
            ((C620 * C696 + C621 * C50606) * C50943 + (C5978 + C5979) * C50944 +
             (C5980 + C5981) * C44456) *
                C50633) *
               C50894 -
           ((((C117 * C3602 + C50748 * C3610) * C50606 +
              (C117 * C3598 + C50748 * C3604) * C696) *
                 C44456 +
             (C5981 + C5980) * C50944 + (C5979 + C5978) * C50943) *
                C50633 +
            ((C39573 + C39572) * C44456 + (C5997 + C5996) * C50944 +
             (C5995 + C5994) * C50943) *
                C50887) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50943 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50944 +
            (C5546 + C5547 - C5512 - C5513 + C5514 + C5515) * C44456) *
               C50887 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50943 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50944 +
            (C5522 + C5523 - C5524 - C5525 + C5526 + C5527) * C44456) *
               C50633) *
              C50894 +
          (((C5504 - (C5545 + C5544) + C5505 - C5506 - C5507) * C50943 +
            (C5512 - (C5547 + C5546) + C5513 - C5514 - C5515) * C50944 +
            (C39300 - (C39299 + C39298) + C39301 - C39302 - C39303) * C44456) *
               C50887 +
           ((C5518 - (C5517 + C5516) + C5519 - C5520 - C5521) * C50943 +
            (C5524 - (C5523 + C5522) + C5525 - C5526 - C5527) * C50944 +
            (C5542 * C284 - (C5541 * C278 + C5540 * C283) + C5543 * C279 -
             (C117 * C1166 + C50748 * C1171) * C285 -
             (C117 * C1170 + C50748 * C1178) * C280) *
                C44456) *
               C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C50943 +
            (C5950 + C5951) * C50944 + C6352 * C44456) *
               C50887 +
           ((C171 * C696 + C172 * C50606) * C50943 + (C5954 + C5955) * C50944 +
            C6353 * C44456) *
               C50633) *
              C1162 -
          ((C6482 * C44456 + (C5957 + C5956) * C50944 +
            (C5955 + C5954) * C50943) *
               C50633 +
           (C6483 * C44456 + (C5953 + C5952) * C50944 +
            (C5951 + C5950) * C50943) *
               C50887) *
              C1163 +
          ((C6352 * C50943 + C39777 * C50944 + (C6492 + C6493) * C44456) *
               C50887 +
           (C6353 * C50943 + (C6355 + C6354) * C50944 +
            (C6488 + C6489) * C44456) *
               C50633) *
              C1164 -
          ((((C117 * C6475 + C50748 * C6479) * C50606 +
             (C117 * C6473 + C50748 * C6476) * C696) *
                C44456 +
            (C6489 + C6488) * C50944 + C6482 * C50943) *
               C50633 +
           ((C39865 + C39864) * C44456 + C39857 * C50944 + C6483 * C50943) *
               C50887) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1285 +
             (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
             C172 * C50920 + C173 * C1287 + C174 * C1282) *
                C50943 +
            (C7162 + C7163 - C7164 - C7165 + C7166 + C7167) * C50944 +
            (C7168 + C7169 - C7170 - C7171 + C7172 + C7173) * C44456) *
               C50887 +
           ((C171 * C1285 + C172 * C50936 - C173 * C1286 - C174 * C50920 +
             C175 * C1287 + C176 * C1282) *
                C50943 +
            (C7174 + C7175 - C7176 - C7177 + C7178 + C7179) * C50944 +
            (C7180 + C7181 - C7182 - C7183 + C7184 + C7185) * C44456) *
               C50633) *
              C1643 +
          (((C7164 - (C7163 + C7162) + C7165 - C7166 - C7167) * C50943 +
            (C7170 - (C7169 + C7168) + C7171 - C7172 - C7173) * C50944 +
            (C40296 - (C40295 + C40294) + C40297 - C40298 - C40299) * C44456) *
               C50887 +
           ((C7176 - (C7175 + C7174) + C7177 - C7178 - C7179) * C50943 +
            (C7182 - (C7181 + C7180) + C7183 - C7184 - C7185) * C50944 +
            (C5542 * C1286 - (C5541 * C50936 + C5540 * C1285) + C5543 * C50920 -
             (C117 * C1166 + C50748 * C1171) * C1287 -
             (C117 * C1170 + C50748 * C1178) * C1282) *
                C44456) *
               C50633) *
              C50706) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C1391 +
              (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
              C172 * C50611) *
                 C50943 +
             (C6984 + C6985 - C6986 - C6987) * C50944 + C7538 * C44456) *
                C50887 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                 C50943 +
             (C6992 + C6993 - C6994 - C6995) * C50944 + C7539 * C44456) *
                C50633) *
               C1643 +
           (((C6986 - (C6985 + C6984) + C6987) * C50943 +
             (C6990 - (C6989 + C6988) + C6991) * C50944 +
             (C7528 - (C7529 + C7530) + C7531) * C44456) *
                C50887 +
            ((C6994 - (C6993 + C6992) + C6995) * C50943 +
             (C6998 - (C6997 + C6996) + C6999) * C50944 +
             (C7532 - (C7533 + C7534) + C7535) * C44456) *
                C50633) *
               C50706) *
              C50893 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50748 * C304) * C1386 +
               (C117 * C287 + C50748 * C294) * C1391) +
              C328 * C50611) *
                 C50943 +
             (C7000 - (C7001 + C7002) + C7003) * C50944 +
             (C7004 - (C7005 + C7006) + C7007) * C44456) *
                C50887 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                 C50943 +
             (C7008 - (C7009 + C7010) + C7011) * C50944 +
             (C7012 - (C7013 + C7014) + C7015) * C44456) *
                C50633) *
               C1643 +
           (((C7002 + C7001 - C7000 - C7003) * C50943 +
             (C7006 + C7005 - C7004 - C7007) * C50944 +
             (C40194 + C40193 - C40192 - C40195) * C44456) *
                C50887 +
            ((C7010 + C7009 - C7008 - C7011) * C50943 +
             (C7014 + C7013 - C7012 - C7015) * C50944 +
             (C6370 * C1391 + C6371 * C1386 -
              (C117 * C6979 + C50748 * C6980) * C1392 -
              (C117 * C6981 + C50748 * C6982) * C50611) *
                 C44456) *
                C50633) *
               C50706) *
              C50682)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C50943 +
            (C6984 + C6985 - C6986 - C6987) * C50944 + C7538 * C44456) *
               C50887 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C50943 +
            (C6992 + C6993 - C6994 - C6995) * C50944 + C7539 * C44456) *
               C50633) *
              C50940 +
          (((C6986 - (C6985 + C6984) + C6987) * C50943 +
            (C6990 - (C6989 + C6988) + C6991) * C50944 +
            (C7528 - (C7529 + C7530) + C7531) * C44456) *
               C50887 +
           ((C6994 - (C6993 + C6992) + C6995) * C50943 +
            (C6998 - (C6997 + C6996) + C6999) * C50944 +
            (C7532 - (C7533 + C7534) + C7535) * C44456) *
               C50633) *
              C50929 +
          ((C7538 * C50943 + C40534 * C50944 +
            (C40531 + C40530 - C40529 - C40532) * C44456) *
               C50887 +
           (C7539 * C50943 + (C7534 + C7533 - C7532 - C7535) * C50944 +
            (C6190 * C1391 + C6191 * C1386 -
             (C117 * C6145 + C50748 * C6150) * C1392 -
             (C117 * C6151 + C50748 * C6154) * C50611) *
                C44456) *
               C50633) *
              C1875) *
         C50668) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C118 +
            (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50943 +
           (C5536 * C118 + C5537 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50944 +
           (C5538 * C118 + C5539 * C106 - C977 * C119 - C978 * C107 +
            C979 * C120 + C980 * C108 - C981 * C121 - C982 * C109) *
               C44456) *
              C50887 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50943 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50944 +
           (C977 * C118 + C978 * C106 - C979 * C119 - C980 * C107 +
            C981 * C120 + C982 * C108 - (C117 * C948 + C50748 * C957) * C121 -
            (C117 * C958 + C50748 * C963) * C109) *
               C44456) *
              C50633) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C50943 +
            (C6156 + C6157 - C6158 - C6159) * C50944 + C6196 * C44456) *
               C50887 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C50943 +
            (C6164 + C6165 - C6166 - C6167) * C50944 + C6197 * C44456) *
               C50633) *
              C50694 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50748 * C304) * C50878 +
              (C117 * C287 + C50748 * C294) * C49720) +
             C328 * C50611) *
                C50943 +
            (C7734 - (C7735 + C7736) + C7737) * C50944 +
            (C7738 - (C7739 + C7740) + C7741) * C44456) *
               C50887 +
           ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                C50943 +
            (C7742 - (C7743 + C7744) + C7745) * C50944 +
            (C7746 - (C7747 + C7748) + C7749) * C44456) *
               C50633) *
              C50694 * C583 +
          ((((C117 * C587 + C50748 * C592) * C49720 +
             (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
             C621 * C50611) *
                C50943 +
            (C5986 * C49720 + C5987 * C50878 - C5702 * C49713 -
             C5703 * C50611) *
                C50944 +
            (C5988 * C49720 + C5989 * C50878 - C5704 * C49713 -
             C5705 * C50611) *
                C44456) *
               C50887 +
           ((C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
                C50943 +
            (C5702 * C49720 + C5703 * C50878 - C11425 * C49713 -
             C11426 * C50611) *
                C50944 +
            (C5704 * C49720 + C5705 * C50878 -
             (C117 * C3318 + C50748 * C3323) * C49713 -
             (C117 * C3324 + C50748 * C3327) * C50611) *
                C44456) *
               C50633) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50748 * C129) * C283 +
                      (C117 * C130 + C50748 * C143) * C278 - C171 * C284 -
                      C172 * C279 + C173 * C285 + C174 * C280) *
                         C50943 +
                     (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50944 +
                     (C5546 + C5547 - C5512 - C5513 + C5514 + C5515) * C44456) *
                        C50887 +
                    ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                      C175 * C285 + C176 * C280) *
                         C50943 +
                     (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50944 +
                     (C5522 + C5523 - C5524 - C5525 + C5526 + C5527) * C44456) *
                        C50633) *
                       C50694 * C50893 +
                   (((C327 * C284 -
                      ((C117 * C293 + C50748 * C304) * C278 +
                       (C117 * C287 + C50748 * C294) * C283) +
                      C328 * C279 - C329 * C285 - C330 * C280) *
                         C50943 +
                     (C1540 * C284 - (C5983 * C278 + C5982 * C283) +
                      C1541 * C279 - C1542 * C285 - C1543 * C280) *
                         C50944 +
                     (C5350 * C284 - (C5985 * C278 + C5984 * C283) +
                      C5351 * C279 - C5352 * C285 - C5353 * C280) *
                         C44456) *
                        C50887 +
                    ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
                      C331 * C285 - C332 * C280) *
                         C50943 +
                     (C1542 * C284 - (C1541 * C278 + C1540 * C283) +
                      C1543 * C279 - C1544 * C285 - C1545 * C280) *
                         C50944 +
                     (C5352 * C284 - (C5351 * C278 + C5350 * C283) +
                      C5353 * C279 - (C117 * C1080 + C50748 * C1085) * C285 -
                      (C117 * C1084 + C50748 * C1092) * C280) *
                         C44456) *
                        C50633) *
                       C50694 * C50682)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50748 * C129) * C696 +
                      (C117 * C130 + C50748 * C143) * C50606) *
                         C50943 +
                     (C5950 + C5951) * C50944 + C6352 * C44456) *
                        C50887 +
                    ((C171 * C696 + C172 * C50606) * C50943 +
                     (C5954 + C5955) * C50944 + C6353 * C44456) *
                        C50633) *
                       C50694 * C692 -
                   ((C6366 * C44456 + (C5967 + C5966) * C50944 +
                     (C328 * C50606 + C327 * C696) * C50943) *
                        C50633 +
                    (C6367 * C44456 + (C5991 + C5990) * C50944 +
                     ((C117 * C293 + C50748 * C304) * C50606 +
                      (C117 * C287 + C50748 * C294) * C696) *
                         C50943) *
                        C50887) *
                       C50694 * C693 +
                   ((((C117 * C587 + C50748 * C592) * C696 +
                      (C117 * C593 + C50748 * C602) * C50606) *
                         C50943 +
                     (C5994 + C5995) * C50944 + (C5996 + C5997) * C44456) *
                        C50887 +
                    ((C620 * C696 + C621 * C50606) * C50943 +
                     (C5978 + C5979) * C50944 + (C5980 + C5981) * C44456) *
                        C50633) *
                       C50694 * C694 -
                   ((((C117 * C3494 + C50748 * C3498) * C50606 +
                      (C117 * C3492 + C50748 * C3495) * C696) *
                         C44456 +
                     ((C117 * C3161 + C50748 * C3167) * C50606 +
                      (C117 * C3155 + C50748 * C3160) * C696) *
                         C50944 +
                     ((C117 * C705 + C50748 * C711) * C50606 +
                      (C117 * C699 + C50748 * C706) * C696) *
                         C50943) *
                        C50633 +
                    (((C117 * C3496 + C50748 * C3499) * C50606 +
                      (C117 * C3493 + C50748 * C3497) * C696) *
                         C44456 +
                     ((C117 * C3159 + C50748 * C3166) * C50606 +
                      (C117 * C3154 + C50748 * C3158) * C696) *
                         C50944 +
                     ((C117 * C707 + C50748 * C712) * C50606 +
                      (C117 * C700 + C50748 * C708) * C696) *
                         C50943) *
                        C50887) *
                       C50694 * C695)) /
                     (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50943 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50944 +
            (C5546 + C5547 - C5512 - C5513 + C5514 + C5515) * C44456) *
               C50887 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50943 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50944 +
            (C5522 + C5523 - C5524 - C5525 + C5526 + C5527) * C44456) *
               C50633) *
              C50894 +
          (((C5504 - (C5545 + C5544) + C5505 - C5506 - C5507) * C50943 +
            (C5512 - (C5547 + C5546) + C5513 - C5514 - C5515) * C50944 +
            (C39300 - (C39299 + C39298) + C39301 - C39302 - C39303) * C44456) *
               C50887 +
           ((C5518 - (C5517 + C5516) + C5519 - C5520 - C5521) * C50943 +
            (C5524 - (C5523 + C5522) + C5525 - C5526 - C5527) * C50944 +
            (C5542 * C284 - (C5541 * C278 + C5540 * C283) + C5543 * C279 -
             (C117 * C1166 + C50748 * C1171) * C285 -
             (C117 * C1170 + C50748 * C1178) * C280) *
                C44456) *
               C50633) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C50943 +
             (C5950 + C5951) * C50944 + C6352 * C44456) *
                C50887 +
            ((C171 * C696 + C172 * C50606) * C50943 + (C5954 + C5955) * C50944 +
             C6353 * C44456) *
                C50633) *
               C50894 -
           ((C6482 * C44456 + (C5957 + C5956) * C50944 +
             (C5955 + C5954) * C50943) *
                C50633 +
            (C6483 * C44456 + (C5953 + C5952) * C50944 +
             (C5951 + C5950) * C50943) *
                C50887) *
               C50706) *
              C582 +
          ((((C5990 + C5991) * C50943 + (C5992 + C5993) * C50944 +
             (C6372 + C6373) * C44456) *
                C50887 +
            ((C5966 + C5967) * C50943 + (C5968 + C5969) * C50944 +
             (C6374 + C6375) * C44456) *
                C50633) *
               C50706 -
           ((C6366 * C44456 + (C5967 + C5966) * C50944 +
             (C328 * C50606 + C327 * C696) * C50943) *
                C50633 +
            (C6367 * C44456 + (C5991 + C5990) * C50944 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C50943) *
                C50887) *
               C50894) *
              C583 +
          (((((C117 * C587 + C50748 * C592) * C696 +
              (C117 * C593 + C50748 * C602) * C50606) *
                 C50943 +
             (C5994 + C5995) * C50944 + (C5996 + C5997) * C44456) *
                C50887 +
            ((C620 * C696 + C621 * C50606) * C50943 + (C5978 + C5979) * C50944 +
             (C5980 + C5981) * C44456) *
                C50633) *
               C50894 -
           ((((C117 * C3602 + C50748 * C3610) * C50606 +
              (C117 * C3598 + C50748 * C3604) * C696) *
                 C44456 +
             (C5981 + C5980) * C50944 + (C5979 + C5978) * C50943) *
                C50633 +
            ((C39573 + C39572) * C44456 + (C5997 + C5996) * C50944 +
             (C5995 + C5994) * C50943) *
                C50887) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1285 +
             (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
             C172 * C50920 + C173 * C1287 + C174 * C1282) *
                C33763 +
            (C7162 + C7163 - C7164 - C7165 + C7166 + C7167) * C50828) *
               C17274 +
           ((C171 * C1285 + C172 * C50936 - C173 * C1286 - C174 * C50920 +
             C175 * C1287 + C176 * C1282) *
                C33763 +
            (C7174 + C7175 - C7176 - C7177 + C7178 + C7179) * C50828) *
               C17275 +
           ((C173 * C1285 + C174 * C50936 - C175 * C1286 - C176 * C50920 +
             C177 * C1287 + C178 * C1282) *
                C33763 +
            (C12721 + C12722 - C12723 - C12724 + C12725 + C12726) * C50828) *
               C17276) *
              C50694 * C1283 +
          (((C327 * C1286 -
             ((C117 * C293 + C50748 * C304) * C50936 +
              (C117 * C287 + C50748 * C294) * C1285) +
             C328 * C50920 - C329 * C1287 - C330 * C1282) *
                C33763 +
            (C1540 * C1286 - (C5983 * C50936 + C5982 * C1285) + C1541 * C50920 -
             C1542 * C1287 - C1543 * C1282) *
                C50828) *
               C17274 +
           ((C329 * C1286 - (C328 * C50936 + C327 * C1285) + C330 * C50920 -
             C331 * C1287 - C332 * C1282) *
                C33763 +
            (C1542 * C1286 - (C1541 * C50936 + C1540 * C1285) + C1543 * C50920 -
             C1544 * C1287 - C1545 * C1282) *
                C50828) *
               C17275 +
           ((C331 * C1286 - (C330 * C50936 + C329 * C1285) + C332 * C50920 -
             C333 * C1287 - C334 * C1282) *
                C33763 +
            (C1544 * C1286 - (C1543 * C50936 + C1542 * C1285) + C1545 * C50920 -
             (C117 * C1523 + C50748 * C1524) * C1287 -
             (C117 * C1525 + C50748 * C1526) * C1282) *
                C50828) *
               C17276) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1285 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50936 -
            (C2345 + C2346 + C2347) * C1286 - (C2348 + C2349 + C2350) * C50920 +
            (C2351 + C2352 + C2353) * C1287 + (C2354 + C2355 + C2356) * C1282) *
               C33763 +
           ((C36698 + C36699 + C36700) * C1285 +
            (C36701 + C36702 + C36703) * C50936 -
            (C2717 + C2716 + C2715) * C1286 - (C2720 + C2719 + C2718) * C50920 +
            (C2723 + C2722 + C2721) * C1287 + (C2726 + C2725 + C2724) * C1282) *
               C50828) *
              C50628 * C50694 * C1283 +
          (((C2533 + C2534 + C2535) * C1286 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50936 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C1285) +
            (C2536 + C2537 + C2538) * C50920 - (C2539 + C2540 + C2541) * C1287 -
            (C2542 + C2543 + C2544) * C1282) *
               C33763 +
           ((C4119 + C4118 + C4117) * C1286 -
            ((C37123 + C37122 + C37121) * C50936 +
             (C37120 + C37119 + C37118) * C1285) +
            (C4122 + C4121 + C4120) * C50920 -
            (C2307 * C4100 + C2302 * C4101 + C2306 * C816 + C2301 * C830 +
             C2305 * C813 + C2300 * C823) *
                C1287 -
            (C2307 * C4102 + C2302 * C4103 + C2306 * C829 + C2301 * C840 +
             C2305 * C824 + C2300 * C837) *
                C1282) *
               C50828) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C33763 +
            (C6984 + C6985 - C6986 - C6987) * C50828) *
               C17274 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C33763 +
            (C6992 + C6993 - C6994 - C6995) * C50828) *
               C17275 +
           ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                C33763 +
            (C12567 + C12568 - C12569 - C12570) * C50828) *
               C17276) *
              C50694 * C50939 +
          (((C327 * C1392 -
             ((C117 * C293 + C50748 * C304) * C1386 +
              (C117 * C287 + C50748 * C294) * C1391) +
             C328 * C50611) *
                C33763 +
            (C7000 - (C7001 + C7002) + C7003) * C50828) *
               C17274 +
           ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                C33763 +
            (C7008 - (C7009 + C7010) + C7011) * C50828) *
               C17275 +
           ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                C33763 +
            (C12571 - (C12572 + C12573) + C12574) * C50828) *
               C17276) *
              C50694 * C50926 +
          ((((C117 * C587 + C50748 * C592) * C1391 +
             (C117 * C593 + C50748 * C602) * C1386 - C620 * C1392 -
             C621 * C50611) *
                C33763 +
            (C5986 * C1391 + C5987 * C1386 - C5702 * C1392 - C5703 * C50611) *
                C50828) *
               C17274 +
           ((C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50611) *
                C33763 +
            (C5702 * C1391 + C5703 * C1386 - C11425 * C1392 - C11426 * C50611) *
                C50828) *
               C17275 +
           ((C622 * C1391 + C623 * C1386 - C624 * C1392 - C625 * C50611) *
                C33763 +
            (C11425 * C1391 + C11426 * C1386 -
             (C117 * C815 + C50748 * C828) * C1392 -
             (C117 * C827 + C50748 * C839) * C50611) *
                C50828) *
               C17276) *
              C50694 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1391 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C1386 -
            (C2345 + C2346 + C2347) * C1392 -
            (C2348 + C2349 + C2350) * C50611) *
               C33763 +
           ((C36698 + C36699 + C36700) * C1391 +
            (C36701 + C36702 + C36703) * C1386 -
            (C2717 + C2716 + C2715) * C1392 -
            (C2720 + C2719 + C2718) * C50611) *
               C50828) *
              C50628 * C50694 * C50939 +
          (((C2533 + C2534 + C2535) * C1392 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C1386 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C1391) +
            (C2536 + C2537 + C2538) * C50611) *
               C33763 +
           ((C4119 + C4118 + C4117) * C1392 -
            ((C37123 + C37122 + C37121) * C1386 +
             (C37120 + C37119 + C37118) * C1391) +
            (C4122 + C4121 + C4120) * C50611) *
               C50828) *
              C50628 * C50694 * C50926 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C1391 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C1386 -
            (C2897 + C2898 + C2899) * C1392 -
            (C2900 + C2901 + C2902) * C50611) *
               C33763 +
           ((C37124 + C37125 + C37126) * C1391 +
            (C37127 + C37128 + C37129) * C1386 -
            (C2307 * C3156 + C2302 * C3163 + C2306 * C3155 + C2301 * C3160 +
             C2305 * C817 + C2300 * C832) *
                C1392 -
            (C2307 * C3162 + C2302 * C3168 + C2306 * C3161 + C2301 * C3167 +
             C2305 * C831 + C2300 * C841) *
                C50611) *
               C50828) *
              C50628 * C50694 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C1391 +
              (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
              C172 * C50611) *
                 C33763 +
             (C6984 + C6985 - C6986 - C6987) * C50828) *
                C17274 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                 C33763 +
             (C6992 + C6993 - C6994 - C6995) * C50828) *
                C17275 +
            ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                 C33763 +
             (C12567 + C12568 - C12569 - C12570) * C50828) *
                C17276) *
               C50894 +
           (((C6986 - (C6985 + C6984) + C6987) * C33763 +
             (C6990 - (C6989 + C6988) + C6991) * C50828) *
                C17274 +
            ((C6994 - (C6993 + C6992) + C6995) * C33763 +
             (C6998 - (C6997 + C6996) + C6999) * C50828) *
                C17275 +
            ((C12569 - (C12568 + C12567) + C12570) * C33763 +
             (C13067 - (C13068 + C13069) + C13070) * C50828) *
                C17276) *
               C50706) *
              C1283 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50748 * C304) * C1386 +
               (C117 * C287 + C50748 * C294) * C1391) +
              C328 * C50611) *
                 C33763 +
             (C7000 - (C7001 + C7002) + C7003) * C50828) *
                C17274 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                 C33763 +
             (C7008 - (C7009 + C7010) + C7011) * C50828) *
                C17275 +
            ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                 C33763 +
             (C12571 - (C12572 + C12573) + C12574) * C50828) *
                C17276) *
               C50894 +
           (((C7002 + C7001 - C7000 - C7003) * C33763 +
             (C7006 + C7005 - C7004 - C7007) * C50828) *
                C17274 +
            ((C7010 + C7009 - C7008 - C7011) * C33763 +
             (C7014 + C7013 - C7012 - C7015) * C50828) *
                C17275 +
            ((C12573 + C12572 - C12571 - C12574) * C33763 +
             (C5352 * C1391 + C5353 * C1386 -
              (C117 * C1080 + C50748 * C1085) * C1392 -
              (C117 * C1084 + C50748 * C1092) * C50611) *
                 C50828) *
                C17276) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C1391 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C1386 -
             (C2345 + C2346 + C2347) * C1392 -
             (C2348 + C2349 + C2350) * C50611) *
                C33763 +
            ((C36698 + C36699 + C36700) * C1391 +
             (C36701 + C36702 + C36703) * C1386 -
             (C2717 + C2716 + C2715) * C1392 -
             (C2720 + C2719 + C2718) * C50611) *
                C50828) *
               C50628 * C50894 +
           (((C2715 + C2716 + C2717) * C1392 -
             ((C36703 + C36702 + C36701) * C1386 +
              (C36700 + C36699 + C36698) * C1391) +
             (C2718 + C2719 + C2720) * C50611) *
                C33763 +
            ((C3343 + C3342 + C3341) * C1392 -
             ((C37288 + C37289 + C37290) * C1386 +
              (C37291 + C37292 + C37293) * C1391) +
             (C3346 + C3345 + C3344) * C50611) *
                C50828) *
               C50628 * C50706) *
              C1283 +
          ((((C2533 + C2534 + C2535) * C1392 -
             ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
               C2305 * C293 + C2300 * C304) *
                  C1386 +
              (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
               C2305 * C287 + C2300 * C294) *
                  C1391) +
             (C2536 + C2537 + C2538) * C50611) *
                C33763 +
            ((C4119 + C4118 + C4117) * C1392 -
             ((C37123 + C37122 + C37121) * C1386 +
              (C37120 + C37119 + C37118) * C1391) +
             (C4122 + C4121 + C4120) * C50611) *
                C50828) *
               C50628 * C50894 +
           (((C37118 + C37119 + C37120) * C1391 +
             (C37121 + C37122 + C37123) * C1386 -
             (C4117 + C4118 + C4119) * C1392 -
             (C4120 + C4121 + C4122) * C50611) *
                C33763 +
            ((C37452 + C37453 + C37454) * C1391 +
             (C37455 + C37456 + C37457) * C1386 -
             (C2307 * C3492 + C2302 * C3495 + C2306 * C3317 + C2301 * C3321 +
              C2305 * C1082 + C2300 * C1089) *
                 C1392 -
             (C2307 * C3494 + C2302 * C3498 + C2306 * C3322 + C2301 * C3326 +
              C2305 * C1088 + C2300 * C1094) *
                 C50611) *
                C50828) *
               C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C49720 +
              (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
              C172 * C50611) *
                 C33763 +
             (C6156 + C6157 - C6158 - C6159) * C50828) *
                C17274 +
            ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                 C33763 +
             (C6164 + C6165 - C6166 - C6167) * C50828) *
                C17275 +
            ((C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                 C33763 +
             (C11823 + C11824 - C11825 - C11826) * C50828) *
                C17276) *
               C1643 +
           (((C6158 - (C6157 + C6156) + C6159) * C33763 +
             (C6162 - (C6161 + C6160) + C6163) * C50828) *
                C17274 +
            ((C6166 - (C6165 + C6164) + C6167) * C33763 +
             (C6170 - (C6169 + C6168) + C6171) * C50828) *
                C17275 +
            ((C11825 - (C11824 + C11823) + C11826) * C33763 +
             (C11827 - (C11828 + C11829) + C11830) * C50828) *
                C17276) *
               C50706) *
              C1283 +
          ((((C327 * C49713 -
              ((C117 * C293 + C50748 * C304) * C50878 +
               (C117 * C287 + C50748 * C294) * C49720) +
              C328 * C50611) *
                 C33763 +
             (C7734 - (C7735 + C7736) + C7737) * C50828) *
                C17274 +
            ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                 C33763 +
             (C7742 - (C7743 + C7744) + C7745) * C50828) *
                C17275 +
            ((C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
                 C33763 +
             (C13265 - (C13266 + C13267) + C13268) * C50828) *
                C17276) *
               C1643 +
           (((C7736 + C7735 - C7734 - C7737) * C33763 +
             (C7740 + C7739 - C7738 - C7741) * C50828) *
                C17274 +
            ((C7744 + C7743 - C7742 - C7745) * C33763 +
             (C7748 + C7747 - C7746 - C7749) * C50828) *
                C17275 +
            ((C13267 + C13266 - C13265 - C13268) * C33763 +
             (C5352 * C49720 + C5353 * C50878 -
              (C117 * C1080 + C50748 * C1085) * C49713 -
              (C117 * C1084 + C50748 * C1092) * C50611) *
                 C50828) *
                C17276) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C49720 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50878 -
             (C2345 + C2346 + C2347) * C49713 -
             (C2348 + C2349 + C2350) * C50611) *
                C33763 +
            ((C36698 + C36699 + C36700) * C49720 +
             (C36701 + C36702 + C36703) * C50878 -
             (C2717 + C2716 + C2715) * C49713 -
             (C2720 + C2719 + C2718) * C50611) *
                C50828) *
               C50628 * C1643 +
           (((C2715 + C2716 + C2717) * C49713 -
             ((C36703 + C36702 + C36701) * C50878 +
              (C36700 + C36699 + C36698) * C49720) +
             (C2718 + C2719 + C2720) * C50611) *
                C33763 +
            ((C3343 + C3342 + C3341) * C49713 -
             ((C37288 + C37289 + C37290) * C50878 +
              (C37291 + C37292 + C37293) * C49720) +
             (C3346 + C3345 + C3344) * C50611) *
                C50828) *
               C50628 * C50706) *
              C1283 +
          ((((C2533 + C2534 + C2535) * C49713 -
             ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
               C2305 * C293 + C2300 * C304) *
                  C50878 +
              (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
               C2305 * C287 + C2300 * C294) *
                  C49720) +
             (C2536 + C2537 + C2538) * C50611) *
                C33763 +
            ((C4119 + C4118 + C4117) * C49713 -
             ((C37123 + C37122 + C37121) * C50878 +
              (C37120 + C37119 + C37118) * C49720) +
             (C4122 + C4121 + C4120) * C50611) *
                C50828) *
               C50628 * C1643 +
           (((C37118 + C37119 + C37120) * C49720 +
             (C37121 + C37122 + C37123) * C50878 -
             (C4117 + C4118 + C4119) * C49713 -
             (C4120 + C4121 + C4122) * C50611) *
                C33763 +
            ((C37452 + C37453 + C37454) * C49720 +
             (C37455 + C37456 + C37457) * C50878 -
             (C2307 * C3492 + C2302 * C3495 + C2306 * C3317 + C2301 * C3321 +
              C2305 * C1082 + C2300 * C1089) *
                 C49713 -
             (C2307 * C3494 + C2302 * C3498 + C2306 * C3322 + C2301 * C3326 +
              C2305 * C1088 + C2300 * C1094) *
                 C50611) *
                C50828) *
               C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C33763 +
             (C5950 + C5951) * C50828) *
                C17274 +
            ((C171 * C696 + C172 * C50606) * C33763 +
             (C5954 + C5955) * C50828) *
                C17275 +
            ((C173 * C696 + C174 * C50606) * C33763 +
             (C11671 + C11672) * C50828) *
                C17276) *
               C1643 -
           (((C11977 + C11978) * C50828 + (C11672 + C11671) * C33763) * C17276 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C33763) * C17275 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C33763) * C17274) *
               C50706) *
              C50939 +
          ((((C5990 + C5991) * C33763 + (C5992 + C5993) * C50828) * C17274 +
            ((C5966 + C5967) * C33763 + (C5968 + C5969) * C50828) * C17275 +
            ((C11673 + C11674) * C33763 + (C11979 + C11980) * C50828) *
                C17276) *
               C50706 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C33763) *
                C17276 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C33763) *
                C17275 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C33763) *
                C17274) *
               C1643) *
              C50926 +
          (((((C117 * C587 + C50748 * C592) * C696 +
              (C117 * C593 + C50748 * C602) * C50606) *
                 C33763 +
             (C5994 + C5995) * C50828) *
                C17274 +
            ((C620 * C696 + C621 * C50606) * C33763 +
             (C5978 + C5979) * C50828) *
                C17275 +
            ((C622 * C696 + C623 * C50606) * C33763 +
             (C11675 + C11676) * C50828) *
                C17276) *
               C1643 -
           ((((C117 * C3324 + C50748 * C3327) * C50606 +
              (C117 * C3318 + C50748 * C3323) * C696) *
                 C50828 +
             (C11676 + C11675) * C33763) *
                C17276 +
            ((C5981 + C5980) * C50828 + (C5979 + C5978) * C33763) * C17275 +
            ((C5997 + C5996) * C50828 + (C5995 + C5994) * C33763) * C17274) *
               C50706) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C33763 +
            ((C36698 + C36699 + C36700) * C696 +
             (C36701 + C36702 + C36703) * C50606) *
                C50828) *
               C50628 * C1643 -
           (((C37288 + C37289 + C37290) * C50606 +
             (C37291 + C37292 + C37293) * C696) *
                C50828 +
            ((C36703 + C36702 + C36701) * C50606 +
             (C36700 + C36699 + C36698) * C696) *
                C33763) *
               C50628 * C50706) *
              C50939 +
          ((((C37118 + C37119 + C37120) * C696 +
             (C37121 + C37122 + C37123) * C50606) *
                C33763 +
            ((C37452 + C37453 + C37454) * C696 +
             (C37455 + C37456 + C37457) * C50606) *
                C50828) *
               C50628 * C50706 -
           (((C37123 + C37122 + C37121) * C50606 +
             (C37120 + C37119 + C37118) * C696) *
                C50828 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C33763) *
               C50628 * C1643) *
              C50926 +
          ((((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
              C2307 * C2872 + C2302 * C2875) *
                 C696 +
             (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
              C2307 * C2876 + C2302 * C2881) *
                 C50606) *
                C33763 +
            ((C37124 + C37125 + C37126) * C696 +
             (C37127 + C37128 + C37129) * C50606) *
                C50828) *
               C50628 * C1643 -
           (((C2307 * C20747 + C2302 * C20749 + C2306 * C3496 + C2301 * C3499 +
              C2305 * C3320 + C2300 * C3325) *
                 C50606 +
             (C2307 * C20746 + C2302 * C20748 + C2306 * C3493 + C2301 * C3497 +
              C2305 * C3316 + C2300 * C3319) *
                 C696) *
                C50828 +
            ((C37129 + C37128 + C37127) * C50606 +
             (C37126 + C37125 + C37124) * C696) *
                C33763) *
               C50628 * C50706) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C33763 +
             (C5950 + C5951) * C50828) *
                C17274 +
            ((C171 * C696 + C172 * C50606) * C33763 +
             (C5954 + C5955) * C50828) *
                C17275 +
            ((C173 * C696 + C174 * C50606) * C33763 +
             (C11671 + C11672) * C50828) *
                C17276) *
               C50940 -
           (((C11977 + C11978) * C50828 + (C11672 + C11671) * C33763) * C17276 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C33763) * C17275 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C33763) * C17274) *
               C50929 +
           ((C6352 * C33763 + (C6357 + C6356) * C50828) * C17274 +
            (C6353 * C33763 + (C6355 + C6354) * C50828) * C17275 +
            ((C11978 + C11977) * C33763 + (C12079 + C12080) * C50828) *
                C17276) *
               C1875) *
              C1283 +
          ((((C5990 + C5991) * C33763 + (C5992 + C5993) * C50828) * C17274 +
            ((C5966 + C5967) * C33763 + (C5968 + C5969) * C50828) * C17275 +
            ((C11673 + C11674) * C33763 + (C11979 + C11980) * C50828) *
                C17276) *
               C50929 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C33763) *
                C17276 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C33763) *
                C17275 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C33763) *
                C17274) *
               C50940 -
           ((((C117 * C6981 + C50748 * C6982) * C50606 +
              (C117 * C6979 + C50748 * C6980) * C696) *
                 C50828 +
             (C11980 + C11979) * C33763) *
                C17276 +
            ((C6375 + C6374) * C50828 + C6366 * C33763) * C17275 +
            ((C6373 + C6372) * C50828 + C6367 * C33763) * C17274) *
               C1875) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C33763 +
            ((C36698 + C36699 + C36700) * C696 +
             (C36701 + C36702 + C36703) * C50606) *
                C50828) *
               C50628 * C50940 -
           (((C37288 + C37289 + C37290) * C50606 +
             (C37291 + C37292 + C37293) * C696) *
                C50828 +
            ((C36703 + C36702 + C36701) * C50606 +
             (C36700 + C36699 + C36698) * C696) *
                C33763) *
               C50628 * C50929 +
           (((C37293 + C37292 + C37291) * C696 +
             (C37290 + C37289 + C37288) * C50606) *
                C33763 +
            ((C37568 + C37569 + C37570) * C696 +
             (C37571 + C37572 + C37573) * C50606) *
                C50828) *
               C50628 * C1875) *
              C1283 +
          ((((C37118 + C37119 + C37120) * C696 +
             (C37121 + C37122 + C37123) * C50606) *
                C33763 +
            ((C37452 + C37453 + C37454) * C696 +
             (C37455 + C37456 + C37457) * C50606) *
                C50828) *
               C50628 * C50929 -
           (((C37123 + C37122 + C37121) * C50606 +
             (C37120 + C37119 + C37118) * C696) *
                C50828 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C33763) *
               C50628 * C50940 -
           (((C2307 * C20817 + C2302 * C20819 + C2306 * C3606 + C2301 * C3612 +
              C2305 * C3607 + C2300 * C3613) *
                 C50606 +
             (C2307 * C20816 + C2302 * C20818 + C2306 * C3600 + C2301 * C3608 +
              C2305 * C3601 + C2300 * C3609) *
                 C696) *
                C50828 +
            ((C37457 + C37456 + C37455) * C50606 +
             (C37454 + C37453 + C37452) * C696) *
                C33763) *
               C50628 * C1875) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C33763 +
            (C6156 + C6157 - C6158 - C6159) * C50828) *
               C17274 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C33763 +
            (C6164 + C6165 - C6166 - C6167) * C50828) *
               C17275 +
           ((C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                C33763 +
            (C11823 + C11824 - C11825 - C11826) * C50828) *
               C17276) *
              C50694 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50748 * C304) * C50878 +
              (C117 * C287 + C50748 * C294) * C49720) +
             C328 * C50611) *
                C33763 +
            (C7734 - (C7735 + C7736) + C7737) * C50828) *
               C17274 +
           ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                C33763 +
            (C7742 - (C7743 + C7744) + C7745) * C50828) *
               C17275 +
           ((C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
                C33763 +
            (C13265 - (C13266 + C13267) + C13268) * C50828) *
               C17276) *
              C50694 * C583 +
          ((((C117 * C587 + C50748 * C592) * C49720 +
             (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
             C621 * C50611) *
                C33763 +
            (C5986 * C49720 + C5987 * C50878 - C5702 * C49713 -
             C5703 * C50611) *
                C50828) *
               C17274 +
           ((C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
                C33763 +
            (C5702 * C49720 + C5703 * C50878 - C11425 * C49713 -
             C11426 * C50611) *
                C50828) *
               C17275 +
           ((C622 * C49720 + C623 * C50878 - C624 * C49713 - C625 * C50611) *
                C33763 +
            (C11425 * C49720 + C11426 * C50878 -
             (C117 * C815 + C50748 * C828) * C49713 -
             (C117 * C827 + C50748 * C839) * C50611) *
                C50828) *
               C17276) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C118 +
            (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C33763 +
           (C5536 * C118 + C5537 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50828) *
              C17274 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C33763 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50828) *
              C17275 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C33763 +
           (C477 * C118 + C478 * C106 - C479 * C119 - C480 * C107 +
            C481 * C120 + C482 * C108 - (C117 * C439 + C50748 * C450) * C121 -
            (C117 * C451 + C50748 * C457) * C109) *
               C50828) *
              C17276) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C33763 +
            (C6156 + C6157 - C6158 - C6159) * C50828) *
               C17274 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C33763 +
            (C6164 + C6165 - C6166 - C6167) * C50828) *
               C17275 +
           ((C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                C33763 +
            (C11823 + C11824 - C11825 - C11826) * C50828) *
               C17276) *
              C941 +
          (((C6158 - (C6157 + C6156) + C6159) * C33763 +
            (C6162 - (C6161 + C6160) + C6163) * C50828) *
               C17274 +
           ((C6166 - (C6165 + C6164) + C6167) * C33763 +
            (C6170 - (C6169 + C6168) + C6171) * C50828) *
               C17275 +
           ((C11825 - (C11824 + C11823) + C11826) * C33763 +
            (C11827 - (C11828 + C11829) + C11830) * C50828) *
               C17276) *
              C942 +
          ((C6196 * C33763 + (C6195 + C6194 - C6172 - C6177) * C50828) *
               C17274 +
           (C6197 * C33763 + (C6180 + C6179 - C6178 - C6181) * C50828) *
               C17275 +
           ((C11829 + C11828 - C11827 - C11830) * C33763 +
            (C5542 * C49720 + C5543 * C50878 -
             (C117 * C1166 + C50748 * C1171) * C49713 -
             (C117 * C1170 + C50748 * C1178) * C50611) *
                C50828) *
               C17276) *
              C943) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
            C2307 * C587 + C2302 * C592) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
            C2307 * C593 + C2302 * C602) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C33763 +
          ((C2305 * C435 + C2300 * C442 + C2306 * C811 + C2301 * C819 +
            C2307 * C818 + C2302 * C834) *
               C118 +
           (C2305 * C441 + C2300 * C452 + C2306 * C820 + C2301 * C835 +
            C2307 * C833 + C2302 * C842) *
               C106 -
           (C2717 + C2716 + C2715) * C119 - (C2720 + C2719 + C2718) * C107 +
           (C2723 + C2722 + C2721) * C120 + (C2726 + C2725 + C2724) * C108 -
           (C2307 * C815 + C2302 * C828 + C2306 * C814 + C2301 * C825 +
            C2305 * C437 + C2300 * C446) *
               C121 -
           (C2307 * C827 + C2302 * C839 + C2306 * C826 + C2301 * C838 +
            C2305 * C447 + C2300 * C455) *
               C109) *
              C50828) *
         C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50878 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50611) *
               C33763 +
           ((C36698 + C36699 + C36700) * C49720 +
            (C36701 + C36702 + C36703) * C50878 -
            (C2717 + C2716 + C2715) * C49713 -
            (C2720 + C2719 + C2718) * C50611) *
               C50828) *
              C50628 * C50694 * C582 +
          (((C2533 + C2534 + C2535) * C49713 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50878 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C49720) +
            (C2536 + C2537 + C2538) * C50611) *
               C33763 +
           ((C4119 + C4118 + C4117) * C49713 -
            ((C2307 * C3159 + C2302 * C3166 + C2306 * C833 + C2301 * C842 +
              C2305 * C820 + C2300 * C835) *
                 C50878 +
             (C2307 * C3154 + C2302 * C3158 + C2306 * C818 + C2301 * C834 +
              C2305 * C811 + C2300 * C819) *
                 C49720) +
            (C4122 + C4121 + C4120) * C50611) *
               C50828) *
              C50628 * C50694 * C583 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C49720 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50878 -
            (C2897 + C2898 + C2899) * C49713 -
            (C2900 + C2901 + C2902) * C50611) *
               C33763 +
           ((C2305 * C818 + C2300 * C834 + C2306 * C3154 + C2301 * C3158 +
             C2307 * C3157 + C2302 * C3165) *
                C49720 +
            (C2305 * C833 + C2300 * C842 + C2306 * C3159 + C2301 * C3166 +
             C2307 * C3164 + C2302 * C3169) *
                C50878 -
            (C2307 * C3156 + C2302 * C3163 + C2306 * C3155 + C2301 * C3160 +
             C2305 * C817 + C2300 * C832) *
                C49713 -
            (C2307 * C3162 + C2302 * C3168 + C2306 * C3161 + C2301 * C3167 +
             C2305 * C831 + C2300 * C841) *
                C50611) *
               C50828) *
              C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50878 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50611) *
               C33763 +
           ((C36698 + C36699 + C36700) * C49720 +
            (C36701 + C36702 + C36703) * C50878 -
            (C2717 + C2716 + C2715) * C49713 -
            (C2720 + C2719 + C2718) * C50611) *
               C50828) *
              C50628 * C941 +
          (((C2715 + C2716 + C2717) * C49713 -
            ((C36703 + C36702 + C36701) * C50878 +
             (C36700 + C36699 + C36698) * C49720) +
            (C2718 + C2719 + C2720) * C50611) *
               C33763 +
           ((C3343 + C3342 + C3341) * C49713 -
            ((C37288 + C37289 + C37290) * C50878 +
             (C37291 + C37292 + C37293) * C49720) +
            (C3346 + C3345 + C3344) * C50611) *
               C50828) *
              C50628 * C942 +
          (((C37293 + C37292 + C37291) * C49720 +
            (C37290 + C37289 + C37288) * C50878 -
            (C3341 + C3342 + C3343) * C49713 -
            (C3344 + C3345 + C3346) * C50611) *
               C33763 +
           ((C2305 * C1169 + C2300 * C1177 + C2306 * C3601 + C2301 * C3609 +
             C2307 * C3600 + C2302 * C3608) *
                C49720 +
            (C2305 * C1176 + C2300 * C1181 + C2306 * C3607 + C2301 * C3613 +
             C2307 * C3606 + C2302 * C3612) *
                C50878 -
            (C2307 * C3598 + C2302 * C3604 + C2306 * C3599 + C2301 * C3605 +
             C2305 * C1168 + C2300 * C1175) *
                C49713 -
            (C2307 * C3602 + C2302 * C3610 + C2306 * C3603 + C2301 * C3611 +
             C2305 * C1174 + C2300 * C1180) *
                C50611) *
               C50828) *
              C50628 * C943) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C33763 +
            (C5950 + C5951) * C50828) *
               C17274 +
           ((C171 * C696 + C172 * C50606) * C33763 + (C5954 + C5955) * C50828) *
               C17275 +
           ((C173 * C696 + C174 * C50606) * C33763 +
            (C11671 + C11672) * C50828) *
               C17276) *
              C50694 * C692 -
          (((C11674 + C11673) * C50828 +
            (C330 * C50606 + C329 * C696) * C33763) *
               C17276 +
           ((C5967 + C5966) * C50828 + (C328 * C50606 + C327 * C696) * C33763) *
               C17275 +
           ((C5991 + C5990) * C50828 + ((C117 * C293 + C50748 * C304) * C50606 +
                                        (C117 * C287 + C50748 * C294) * C696) *
                                           C33763) *
               C17274) *
              C50694 * C693 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C33763 +
            (C5994 + C5995) * C50828) *
               C17274 +
           ((C620 * C696 + C621 * C50606) * C33763 + (C5978 + C5979) * C50828) *
               C17275 +
           ((C622 * C696 + C623 * C50606) * C33763 +
            (C11675 + C11676) * C50828) *
               C17276) *
              C50694 * C694 -
          ((((C117 * C4102 + C50748 * C4103) * C50606 +
             (C117 * C4100 + C50748 * C4101) * C696) *
                C50828 +
            ((C117 * C703 + C50748 * C710) * C50606 +
             (C117 * C698 + C50748 * C704) * C696) *
                C33763) *
               C17276 +
           (((C117 * C3161 + C50748 * C3167) * C50606 +
             (C117 * C3155 + C50748 * C3160) * C696) *
                C50828 +
            ((C117 * C705 + C50748 * C711) * C50606 +
             (C117 * C699 + C50748 * C706) * C696) *
                C33763) *
               C17275 +
           (((C117 * C3159 + C50748 * C3166) * C50606 +
             (C117 * C3154 + C50748 * C3158) * C696) *
                C50828 +
            ((C117 * C707 + C50748 * C712) * C50606 +
             (C117 * C700 + C50748 * C708) * C696) *
                C33763) *
               C17274) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C33763 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50828) *
               C17274 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C33763 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50828) *
               C17275 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C33763 +
            (C11269 + C11270 - C11271 - C11272 + C11273 + C11274) * C50828) *
               C17276) *
              C50694 * C50893 +
          (((C327 * C284 -
             ((C117 * C293 + C50748 * C304) * C278 +
              (C117 * C287 + C50748 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C33763 +
            (C1540 * C284 - (C5983 * C278 + C5982 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C50828) *
               C17274 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C33763 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50828) *
               C17275 +
           ((C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
             C333 * C285 - C334 * C280) *
                C33763 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50748 * C1524) * C285 -
             (C117 * C1525 + C50748 * C1526) * C280) *
                C50828) *
               C17276) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C33763 +
             (C5950 + C5951) * C50828) *
                C17274 +
            ((C171 * C696 + C172 * C50606) * C33763 +
             (C5954 + C5955) * C50828) *
                C17275 +
            ((C173 * C696 + C174 * C50606) * C33763 +
             (C11671 + C11672) * C50828) *
                C17276) *
               C941 -
           (((C11977 + C11978) * C50828 + (C11672 + C11671) * C33763) * C17276 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C33763) * C17275 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C33763) * C17274) *
               C942 +
           ((C6352 * C33763 + (C6357 + C6356) * C50828) * C17274 +
            (C6353 * C33763 + (C6355 + C6354) * C50828) * C17275 +
            ((C11978 + C11977) * C33763 + (C12079 + C12080) * C50828) *
                C17276) *
               C943) *
              C50893 +
          ((((C5990 + C5991) * C33763 + (C5992 + C5993) * C50828) * C17274 +
            ((C5966 + C5967) * C33763 + (C5968 + C5969) * C50828) * C17275 +
            ((C11673 + C11674) * C33763 + (C11979 + C11980) * C50828) *
                C17276) *
               C942 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C33763) *
                C17276 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C33763) *
                C17275 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C33763) *
                C17274) *
               C941 -
           ((((C117 * C6981 + C50748 * C6982) * C50606 +
              (C117 * C6979 + C50748 * C6980) * C696) *
                 C50828 +
             (C11980 + C11979) * C33763) *
                C17276 +
            ((C6375 + C6374) * C50828 + C6366 * C33763) * C17275 +
            ((C6373 + C6372) * C50828 + C6367 * C33763) * C17274) *
               C943) *
              C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C33763 +
           ((C2305 * C435 + C2300 * C442 + C2306 * C811 + C2301 * C819 +
             C2307 * C818 + C2302 * C834) *
                C283 +
            (C2305 * C441 + C2300 * C452 + C2306 * C820 + C2301 * C835 +
             C2307 * C833 + C2302 * C842) *
                C278 -
            (C2717 + C2716 + C2715) * C284 - (C2720 + C2719 + C2718) * C279 +
            (C2723 + C2722 + C2721) * C285 + (C2726 + C2725 + C2724) * C280) *
               C50828) *
              C50628 * C50694 * C50893 +
          (((C2533 + C2534 + C2535) * C284 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C278 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C283) +
            (C2536 + C2537 + C2538) * C279 - (C2539 + C2540 + C2541) * C285 -
            (C2542 + C2543 + C2544) * C280) *
               C33763 +
           ((C4119 + C4118 + C4117) * C284 -
            ((C2307 * C3159 + C2302 * C3166 + C2306 * C833 + C2301 * C842 +
              C2305 * C820 + C2300 * C835) *
                 C278 +
             (C2307 * C3154 + C2302 * C3158 + C2306 * C818 + C2301 * C834 +
              C2305 * C811 + C2300 * C819) *
                 C283) +
            (C4122 + C4121 + C4120) * C279 -
            (C2307 * C4100 + C2302 * C4101 + C2306 * C816 + C2301 * C830 +
             C2305 * C813 + C2300 * C823) *
                C285 -
            (C2307 * C4102 + C2302 * C4103 + C2306 * C829 + C2301 * C840 +
             C2305 * C824 + C2300 * C837) *
                C280) *
               C50828) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C696 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50606) *
               C33763 +
           ((C36698 + C36699 + C36700) * C696 +
            (C36701 + C36702 + C36703) * C50606) *
               C50828) *
              C50628 * C50694 * C692 -
          (((C2307 * C3159 + C2302 * C3166 + C2306 * C833 + C2301 * C842 +
             C2305 * C820 + C2300 * C835) *
                C50606 +
            (C2307 * C3154 + C2302 * C3158 + C2306 * C818 + C2301 * C834 +
             C2305 * C811 + C2300 * C819) *
                C696) *
               C50828 +
           ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
             C2305 * C293 + C2300 * C304) *
                C50606 +
            (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
             C2305 * C287 + C2300 * C294) *
                C696) *
               C33763) *
              C50628 * C50694 * C693 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C696 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50606) *
               C33763 +
           ((C2305 * C818 + C2300 * C834 + C2306 * C3154 + C2301 * C3158 +
             C2307 * C3157 + C2302 * C3165) *
                C696 +
            (C2305 * C833 + C2300 * C842 + C2306 * C3159 + C2301 * C3166 +
             C2307 * C3164 + C2302 * C3169) *
                C50606) *
               C50828) *
              C50628 * C50694 * C694 -
          (((C2307 * C20547 + C2302 * C20549 + C2306 * C3164 + C2301 * C3169 +
             C2305 * C3159 + C2300 * C3166) *
                C50606 +
            (C2307 * C20546 + C2302 * C20548 + C2306 * C3157 + C2301 * C3165 +
             C2305 * C3154 + C2300 * C3158) *
                C696) *
               C50828 +
           ((C2307 * C3004 + C2302 * C3007 + C2306 * C2876 + C2301 * C2881 +
             C2305 * C707 + C2300 * C712) *
                C50606 +
            (C2307 * C3001 + C2302 * C3005 + C2306 * C2872 + C2301 * C2875 +
             C2305 * C700 + C2300 * C708) *
                C696) *
               C33763) *
              C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C33763 +
            ((C36698 + C36699 + C36700) * C696 +
             (C36701 + C36702 + C36703) * C50606) *
                C50828) *
               C50628 * C941 -
           (((C37288 + C37289 + C37290) * C50606 +
             (C37291 + C37292 + C37293) * C696) *
                C50828 +
            ((C36703 + C36702 + C36701) * C50606 +
             (C36700 + C36699 + C36698) * C696) *
                C33763) *
               C50628 * C942 +
           (((C37293 + C37292 + C37291) * C696 +
             (C37290 + C37289 + C37288) * C50606) *
                C33763 +
            ((C2305 * C1169 + C2300 * C1177 + C2306 * C3601 + C2301 * C3609 +
              C2307 * C3600 + C2302 * C3608) *
                 C696 +
             (C2305 * C1176 + C2300 * C1181 + C2306 * C3607 + C2301 * C3613 +
              C2307 * C3606 + C2302 * C3612) *
                 C50606) *
                C50828) *
               C50628 * C943) *
              C50893 +
          ((((C37118 + C37119 + C37120) * C696 +
             (C37121 + C37122 + C37123) * C50606) *
                C33763 +
            ((C37452 + C37453 + C37454) * C696 +
             (C37455 + C37456 + C37457) * C50606) *
                C50828) *
               C50628 * C942 -
           (((C37123 + C37122 + C37121) * C50606 +
             (C37120 + C37119 + C37118) * C696) *
                C50828 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C33763) *
               C50628 * C941 -
           (((C2307 * C20817 + C2302 * C20819 + C2306 * C3606 + C2301 * C3612 +
              C2305 * C3607 + C2300 * C3613) *
                 C50606 +
             (C2307 * C20816 + C2302 * C20818 + C2306 * C3600 + C2301 * C3608 +
              C2305 * C3601 + C2300 * C3609) *
                 C696) *
                C50828 +
            ((C37457 + C37456 + C37455) * C50606 +
             (C37454 + C37453 + C37452) * C696) *
                C33763) *
               C50628 * C943) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C33763 +
             (C5950 + C5951) * C50828) *
                C17274 +
            ((C171 * C696 + C172 * C50606) * C33763 +
             (C5954 + C5955) * C50828) *
                C17275 +
            ((C173 * C696 + C174 * C50606) * C33763 +
             (C11671 + C11672) * C50828) *
                C17276) *
               C50894 -
           (((C11977 + C11978) * C50828 + (C11672 + C11671) * C33763) * C17276 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C33763) * C17275 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C33763) * C17274) *
               C50706) *
              C582 +
          ((((C5990 + C5991) * C33763 + (C5992 + C5993) * C50828) * C17274 +
            ((C5966 + C5967) * C33763 + (C5968 + C5969) * C50828) * C17275 +
            ((C11673 + C11674) * C33763 + (C11979 + C11980) * C50828) *
                C17276) *
               C50706 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C33763) *
                C17276 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C33763) *
                C17275 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C33763) *
                C17274) *
               C50894) *
              C583 +
          (((((C117 * C587 + C50748 * C592) * C696 +
              (C117 * C593 + C50748 * C602) * C50606) *
                 C33763 +
             (C5994 + C5995) * C50828) *
                C17274 +
            ((C620 * C696 + C621 * C50606) * C33763 +
             (C5978 + C5979) * C50828) *
                C17275 +
            ((C622 * C696 + C623 * C50606) * C33763 +
             (C11675 + C11676) * C50828) *
                C17276) *
               C50894 -
           ((((C117 * C3324 + C50748 * C3327) * C50606 +
              (C117 * C3318 + C50748 * C3323) * C696) *
                 C50828 +
             (C11676 + C11675) * C33763) *
                C17276 +
            ((C5981 + C5980) * C50828 + (C5979 + C5978) * C33763) * C17275 +
            ((C5997 + C5996) * C50828 + (C5995 + C5994) * C33763) * C17274) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C33763 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50828) *
               C17274 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C33763 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50828) *
               C17275 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C33763 +
            (C11269 + C11270 - C11271 - C11272 + C11273 + C11274) * C50828) *
               C17276) *
              C50894 +
          (((C5504 - (C5545 + C5544) + C5505 - C5506 - C5507) * C33763 +
            (C5512 - (C5547 + C5546) + C5513 - C5514 - C5515) * C50828) *
               C17274 +
           ((C5518 - (C5517 + C5516) + C5519 - C5520 - C5521) * C33763 +
            (C5524 - (C5523 + C5522) + C5525 - C5526 - C5527) * C50828) *
               C17275 +
           ((C11271 - (C11270 + C11269) + C11272 - C11273 - C11274) * C33763 +
            (C981 * C284 - (C980 * C278 + C979 * C283) + C982 * C279 -
             (C117 * C948 + C50748 * C957) * C285 -
             (C117 * C958 + C50748 * C963) * C280) *
                C50828) *
               C17276) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C33763 +
            (C5950 + C5951) * C50828) *
               C17274 +
           ((C171 * C696 + C172 * C50606) * C33763 + (C5954 + C5955) * C50828) *
               C17275 +
           ((C173 * C696 + C174 * C50606) * C33763 +
            (C11671 + C11672) * C50828) *
               C17276) *
              C1162 -
          (((C11977 + C11978) * C50828 + (C11672 + C11671) * C33763) * C17276 +
           ((C5957 + C5956) * C50828 + (C5955 + C5954) * C33763) * C17275 +
           ((C5953 + C5952) * C50828 + (C5951 + C5950) * C33763) * C17274) *
              C1163 +
          ((C6352 * C33763 + (C6357 + C6356) * C50828) * C17274 +
           (C6353 * C33763 + (C6355 + C6354) * C50828) * C17275 +
           ((C11978 + C11977) * C33763 + (C12079 + C12080) * C50828) * C17276) *
              C1164 -
          ((((C117 * C6151 + C50748 * C6154) * C50606 +
             (C117 * C6145 + C50748 * C6150) * C696) *
                C50828 +
            (C12080 + C12079) * C33763) *
               C17276 +
           ((C6489 + C6488) * C50828 + C6482 * C33763) * C17275 +
           ((C6493 + C6492) * C50828 + C6483 * C33763) * C17274) *
              C1165) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C33763 +
           ((C36698 + C36699 + C36700) * C283 +
            (C36701 + C36702 + C36703) * C278 - (C2717 + C2716 + C2715) * C284 -
            (C2720 + C2719 + C2718) * C279 + (C2723 + C2722 + C2721) * C285 +
            (C2726 + C2725 + C2724) * C280) *
               C50828) *
              C50628 * C50894 +
          (((C2715 + C2716 + C2717) * C284 -
            ((C36703 + C36702 + C36701) * C278 +
             (C36700 + C36699 + C36698) * C283) +
            (C2718 + C2719 + C2720) * C279 - (C2721 + C2722 + C2723) * C285 -
            (C2724 + C2725 + C2726) * C280) *
               C33763 +
           ((C3343 + C3342 + C3341) * C284 -
            ((C2307 * C3320 + C2302 * C3325 + C2306 * C1090 + C2301 * C1095 +
              C2305 * C950 + C2300 * C959) *
                 C278 +
             (C2307 * C3316 + C2302 * C3319 + C2306 * C1083 + C2301 * C1091 +
              C2305 * C944 + C2300 * C949) *
                 C283) +
            (C3346 + C3345 + C3344) * C279 -
            (C2307 * C3318 + C2302 * C3323 + C2306 * C1081 + C2301 * C1087 +
             C2305 * C946 + C2300 * C953) *
                C285 -
            (C2307 * C3324 + C2302 * C3327 + C2306 * C1086 + C2301 * C1093 +
             C2305 * C954 + C2300 * C961) *
                C280) *
               C50828) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C33763 +
            ((C36698 + C36699 + C36700) * C696 +
             (C36701 + C36702 + C36703) * C50606) *
                C50828) *
               C50628 * C50894 -
           (((C2307 * C3320 + C2302 * C3325 + C2306 * C1090 + C2301 * C1095 +
              C2305 * C950 + C2300 * C959) *
                 C50606 +
             (C2307 * C3316 + C2302 * C3319 + C2306 * C1083 + C2301 * C1091 +
              C2305 * C944 + C2300 * C949) *
                 C696) *
                C50828 +
            ((C36703 + C36702 + C36701) * C50606 +
             (C36700 + C36699 + C36698) * C696) *
                C33763) *
               C50628 * C50706) *
              C582 +
          ((((C37118 + C37119 + C37120) * C696 +
             (C37121 + C37122 + C37123) * C50606) *
                C33763 +
            ((C2305 * C1083 + C2300 * C1091 + C2306 * C3316 + C2301 * C3319 +
              C2307 * C3493 + C2302 * C3497) *
                 C696 +
             (C2305 * C1090 + C2300 * C1095 + C2306 * C3320 + C2301 * C3325 +
              C2307 * C3496 + C2302 * C3499) *
                 C50606) *
                C50828) *
               C50628 * C50706 -
           (((C37123 + C37122 + C37121) * C50606 +
             (C37120 + C37119 + C37118) * C696) *
                C50828 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C33763) *
               C50628 * C50894) *
              C583 +
          ((((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
              C2307 * C2872 + C2302 * C2875) *
                 C696 +
             (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
              C2307 * C2876 + C2302 * C2881) *
                 C50606) *
                C33763 +
            ((C37124 + C37125 + C37126) * C696 +
             (C37127 + C37128 + C37129) * C50606) *
                C50828) *
               C50628 * C50894 -
           (((C2307 * C20747 + C2302 * C20749 + C2306 * C3496 + C2301 * C3499 +
              C2305 * C3320 + C2300 * C3325) *
                 C50606 +
             (C2307 * C20746 + C2302 * C20748 + C2306 * C3493 + C2301 * C3497 +
              C2305 * C3316 + C2300 * C3319) *
                 C696) *
                C50828 +
            ((C37129 + C37128 + C37127) * C50606 +
             (C37126 + C37125 + C37124) * C696) *
                C33763) *
               C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C696 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50606) *
               C33763 +
           ((C36698 + C36699 + C36700) * C696 +
            (C36701 + C36702 + C36703) * C50606) *
               C50828) *
              C50628 * C1162 -
          (((C37288 + C37289 + C37290) * C50606 +
            (C37291 + C37292 + C37293) * C696) *
               C50828 +
           ((C36703 + C36702 + C36701) * C50606 +
            (C36700 + C36699 + C36698) * C696) *
               C33763) *
              C50628 * C1163 +
          (((C37293 + C37292 + C37291) * C696 +
            (C37290 + C37289 + C37288) * C50606) *
               C33763 +
           ((C37568 + C37569 + C37570) * C696 +
            (C37571 + C37572 + C37573) * C50606) *
               C50828) *
              C50628 * C1164 -
          (((C2307 * C22978 + C2302 * C22980 + C2306 * C6347 + C2301 * C6350 +
             C2305 * C6147 + C2300 * C6152) *
                C50606 +
            (C2307 * C22977 + C2302 * C22979 + C2306 * C6344 + C2301 * C6348 +
             C2305 * C6143 + C2300 * C6146) *
                C696) *
               C50828 +
           ((C37573 + C37572 + C37571) * C50606 +
            (C37570 + C37569 + C37568) * C696) *
               C33763) *
              C50628 * C1165) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1285 +
             (C117 * C130 + C50748 * C143) * C50936 - C171 * C1286 -
             C172 * C50920 + C173 * C1287 + C174 * C1282) *
                C33763 +
            (C7162 + C7163 - C7164 - C7165 + C7166 + C7167) * C50828) *
               C17274 +
           ((C171 * C1285 + C172 * C50936 - C173 * C1286 - C174 * C50920 +
             C175 * C1287 + C176 * C1282) *
                C33763 +
            (C7174 + C7175 - C7176 - C7177 + C7178 + C7179) * C50828) *
               C17275 +
           ((C173 * C1285 + C174 * C50936 - C175 * C1286 - C176 * C50920 +
             C177 * C1287 + C178 * C1282) *
                C33763 +
            (C12721 + C12722 - C12723 - C12724 + C12725 + C12726) * C50828) *
               C17276) *
              C1643 +
          (((C7164 - (C7163 + C7162) + C7165 - C7166 - C7167) * C33763 +
            (C7170 - (C7169 + C7168) + C7171 - C7172 - C7173) * C50828) *
               C17274 +
           ((C7176 - (C7175 + C7174) + C7177 - C7178 - C7179) * C33763 +
            (C7182 - (C7181 + C7180) + C7183 - C7184 - C7185) * C50828) *
               C17275 +
           ((C12723 - (C12722 + C12721) + C12724 - C12725 - C12726) * C33763 +
            (C981 * C1286 - (C980 * C50936 + C979 * C1285) + C982 * C50920 -
             (C117 * C948 + C50748 * C957) * C1287 -
             (C117 * C958 + C50748 * C963) * C1282) *
                C50828) *
               C17276) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1285 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50936 -
            (C2345 + C2346 + C2347) * C1286 - (C2348 + C2349 + C2350) * C50920 +
            (C2351 + C2352 + C2353) * C1287 + (C2354 + C2355 + C2356) * C1282) *
               C33763 +
           ((C36698 + C36699 + C36700) * C1285 +
            (C36701 + C36702 + C36703) * C50936 -
            (C2717 + C2716 + C2715) * C1286 - (C2720 + C2719 + C2718) * C50920 +
            (C2723 + C2722 + C2721) * C1287 + (C2726 + C2725 + C2724) * C1282) *
               C50828) *
              C50628 * C1643 +
          (((C2715 + C2716 + C2717) * C1286 -
            ((C36703 + C36702 + C36701) * C50936 +
             (C36700 + C36699 + C36698) * C1285) +
            (C2718 + C2719 + C2720) * C50920 - (C2721 + C2722 + C2723) * C1287 -
            (C2724 + C2725 + C2726) * C1282) *
               C33763 +
           ((C3343 + C3342 + C3341) * C1286 -
            ((C37288 + C37289 + C37290) * C50936 +
             (C37291 + C37292 + C37293) * C1285) +
            (C3346 + C3345 + C3344) * C50920 -
            (C2307 * C3318 + C2302 * C3323 + C2306 * C1081 + C2301 * C1087 +
             C2305 * C946 + C2300 * C953) *
                C1287 -
            (C2307 * C3324 + C2302 * C3327 + C2306 * C1086 + C2301 * C1093 +
             C2305 * C954 + C2300 * C961) *
                C1282) *
               C50828) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C1391 +
              (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
              C172 * C50611) *
                 C33763 +
             (C6984 + C6985 - C6986 - C6987) * C50828) *
                C17274 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                 C33763 +
             (C6992 + C6993 - C6994 - C6995) * C50828) *
                C17275 +
            ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                 C33763 +
             (C12567 + C12568 - C12569 - C12570) * C50828) *
                C17276) *
               C1643 +
           (((C6986 - (C6985 + C6984) + C6987) * C33763 +
             (C6990 - (C6989 + C6988) + C6991) * C50828) *
                C17274 +
            ((C6994 - (C6993 + C6992) + C6995) * C33763 +
             (C6998 - (C6997 + C6996) + C6999) * C50828) *
                C17275 +
            ((C12569 - (C12568 + C12567) + C12570) * C33763 +
             (C13067 - (C13068 + C13069) + C13070) * C50828) *
                C17276) *
               C50706) *
              C50893 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50748 * C304) * C1386 +
               (C117 * C287 + C50748 * C294) * C1391) +
              C328 * C50611) *
                 C33763 +
             (C7000 - (C7001 + C7002) + C7003) * C50828) *
                C17274 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50611) *
                 C33763 +
             (C7008 - (C7009 + C7010) + C7011) * C50828) *
                C17275 +
            ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50611) *
                 C33763 +
             (C12571 - (C12572 + C12573) + C12574) * C50828) *
                C17276) *
               C1643 +
           (((C7002 + C7001 - C7000 - C7003) * C33763 +
             (C7006 + C7005 - C7004 - C7007) * C50828) *
                C17274 +
            ((C7010 + C7009 - C7008 - C7011) * C33763 +
             (C7014 + C7013 - C7012 - C7015) * C50828) *
                C17275 +
            ((C12573 + C12572 - C12571 - C12574) * C33763 +
             (C5352 * C1391 + C5353 * C1386 -
              (C117 * C1080 + C50748 * C1085) * C1392 -
              (C117 * C1084 + C50748 * C1092) * C50611) *
                 C50828) *
                C17276) *
               C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C1391 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C1386 -
             (C2345 + C2346 + C2347) * C1392 -
             (C2348 + C2349 + C2350) * C50611) *
                C33763 +
            ((C36698 + C36699 + C36700) * C1391 +
             (C36701 + C36702 + C36703) * C1386 -
             (C2717 + C2716 + C2715) * C1392 -
             (C2720 + C2719 + C2718) * C50611) *
                C50828) *
               C50628 * C1643 +
           (((C2715 + C2716 + C2717) * C1392 -
             ((C36703 + C36702 + C36701) * C1386 +
              (C36700 + C36699 + C36698) * C1391) +
             (C2718 + C2719 + C2720) * C50611) *
                C33763 +
            ((C3343 + C3342 + C3341) * C1392 -
             ((C37288 + C37289 + C37290) * C1386 +
              (C37291 + C37292 + C37293) * C1391) +
             (C3346 + C3345 + C3344) * C50611) *
                C50828) *
               C50628 * C50706) *
              C50893 +
          ((((C2533 + C2534 + C2535) * C1392 -
             ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
               C2305 * C293 + C2300 * C304) *
                  C1386 +
              (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
               C2305 * C287 + C2300 * C294) *
                  C1391) +
             (C2536 + C2537 + C2538) * C50611) *
                C33763 +
            ((C4119 + C4118 + C4117) * C1392 -
             ((C37123 + C37122 + C37121) * C1386 +
              (C37120 + C37119 + C37118) * C1391) +
             (C4122 + C4121 + C4120) * C50611) *
                C50828) *
               C50628 * C1643 +
           (((C37118 + C37119 + C37120) * C1391 +
             (C37121 + C37122 + C37123) * C1386 -
             (C4117 + C4118 + C4119) * C1392 -
             (C4120 + C4121 + C4122) * C50611) *
                C33763 +
            ((C37452 + C37453 + C37454) * C1391 +
             (C37455 + C37456 + C37457) * C1386 -
             (C2307 * C3492 + C2302 * C3495 + C2306 * C3317 + C2301 * C3321 +
              C2305 * C1082 + C2300 * C1089) *
                 C1392 -
             (C2307 * C3494 + C2302 * C3498 + C2306 * C3322 + C2301 * C3326 +
              C2305 * C1088 + C2300 * C1094) *
                 C50611) *
                C50828) *
               C50628 * C50706) *
              C50682)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C1391 +
             (C117 * C130 + C50748 * C143) * C1386 - C171 * C1392 -
             C172 * C50611) *
                C33763 +
            (C6984 + C6985 - C6986 - C6987) * C50828) *
               C17274 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50611) *
                C33763 +
            (C6992 + C6993 - C6994 - C6995) * C50828) *
               C17275 +
           ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50611) *
                C33763 +
            (C12567 + C12568 - C12569 - C12570) * C50828) *
               C17276) *
              C50940 +
          (((C6986 - (C6985 + C6984) + C6987) * C33763 +
            (C6990 - (C6989 + C6988) + C6991) * C50828) *
               C17274 +
           ((C6994 - (C6993 + C6992) + C6995) * C33763 +
            (C6998 - (C6997 + C6996) + C6999) * C50828) *
               C17275 +
           ((C12569 - (C12568 + C12567) + C12570) * C33763 +
            (C13067 - (C13068 + C13069) + C13070) * C50828) *
               C17276) *
              C50929 +
          ((C7538 * C33763 + (C7530 + C7529 - C7528 - C7531) * C50828) *
               C17274 +
           (C7539 * C33763 + (C7534 + C7533 - C7532 - C7535) * C50828) *
               C17275 +
           ((C13069 + C13068 - C13067 - C13070) * C33763 +
            (C5542 * C1391 + C5543 * C1386 -
             (C117 * C1166 + C50748 * C1171) * C1392 -
             (C117 * C1170 + C50748 * C1178) * C50611) *
                C50828) *
               C17276) *
              C1875) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C1391 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C1386 -
            (C2345 + C2346 + C2347) * C1392 -
            (C2348 + C2349 + C2350) * C50611) *
               C33763 +
           ((C36698 + C36699 + C36700) * C1391 +
            (C36701 + C36702 + C36703) * C1386 -
            (C2717 + C2716 + C2715) * C1392 -
            (C2720 + C2719 + C2718) * C50611) *
               C50828) *
              C50628 * C50940 +
          (((C2715 + C2716 + C2717) * C1392 -
            ((C36703 + C36702 + C36701) * C1386 +
             (C36700 + C36699 + C36698) * C1391) +
            (C2718 + C2719 + C2720) * C50611) *
               C33763 +
           ((C3343 + C3342 + C3341) * C1392 -
            ((C37288 + C37289 + C37290) * C1386 +
             (C37291 + C37292 + C37293) * C1391) +
            (C3346 + C3345 + C3344) * C50611) *
               C50828) *
              C50628 * C50929 +
          (((C37293 + C37292 + C37291) * C1391 +
            (C37290 + C37289 + C37288) * C1386 -
            (C3341 + C3342 + C3343) * C1392 -
            (C3344 + C3345 + C3346) * C50611) *
               C33763 +
           ((C37568 + C37569 + C37570) * C1391 +
            (C37571 + C37572 + C37573) * C1386 -
            (C2307 * C3598 + C2302 * C3604 + C2306 * C3599 + C2301 * C3605 +
             C2305 * C1168 + C2300 * C1175) *
                C1392 -
            (C2307 * C3602 + C2302 * C3610 + C2306 * C3603 + C2301 * C3611 +
             C2305 * C1174 + C2300 * C1180) *
                C50611) *
               C50828) *
              C50628 * C1875) *
         C50668) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50748 * C129) * C118 +
            (C117 * C130 + C50748 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C33763 +
           (C5536 * C118 + C5537 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50828) *
              C17274 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C33763 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50828) *
              C17275 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C33763 +
           (C477 * C118 + C478 * C106 - C479 * C119 - C480 * C107 +
            C481 * C120 + C482 * C108 - (C117 * C439 + C50748 * C450) * C121 -
            (C117 * C451 + C50748 * C457) * C109) *
               C50828) *
              C17276) *
         C50694 * C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C49720 +
             (C117 * C130 + C50748 * C143) * C50878 - C171 * C49713 -
             C172 * C50611) *
                C33763 +
            (C6156 + C6157 - C6158 - C6159) * C50828) *
               C17274 +
           ((C171 * C49720 + C172 * C50878 - C173 * C49713 - C174 * C50611) *
                C33763 +
            (C6164 + C6165 - C6166 - C6167) * C50828) *
               C17275 +
           ((C173 * C49720 + C174 * C50878 - C175 * C49713 - C176 * C50611) *
                C33763 +
            (C11823 + C11824 - C11825 - C11826) * C50828) *
               C17276) *
              C50694 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50748 * C304) * C50878 +
              (C117 * C287 + C50748 * C294) * C49720) +
             C328 * C50611) *
                C33763 +
            (C7734 - (C7735 + C7736) + C7737) * C50828) *
               C17274 +
           ((C329 * C49713 - (C328 * C50878 + C327 * C49720) + C330 * C50611) *
                C33763 +
            (C7742 - (C7743 + C7744) + C7745) * C50828) *
               C17275 +
           ((C331 * C49713 - (C330 * C50878 + C329 * C49720) + C332 * C50611) *
                C33763 +
            (C13265 - (C13266 + C13267) + C13268) * C50828) *
               C17276) *
              C50694 * C583 +
          ((((C117 * C587 + C50748 * C592) * C49720 +
             (C117 * C593 + C50748 * C602) * C50878 - C620 * C49713 -
             C621 * C50611) *
                C33763 +
            (C5986 * C49720 + C5987 * C50878 - C5702 * C49713 -
             C5703 * C50611) *
                C50828) *
               C17274 +
           ((C620 * C49720 + C621 * C50878 - C622 * C49713 - C623 * C50611) *
                C33763 +
            (C5702 * C49720 + C5703 * C50878 - C11425 * C49713 -
             C11426 * C50611) *
                C50828) *
               C17275 +
           ((C622 * C49720 + C623 * C50878 - C624 * C49713 - C625 * C50611) *
                C33763 +
            (C11425 * C49720 + C11426 * C50878 -
             (C117 * C815 + C50748 * C828) * C49713 -
             (C117 * C827 + C50748 * C839) * C50611) *
                C50828) *
               C17276) *
              C50694 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
            C2307 * C587 + C2302 * C592) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
            C2307 * C593 + C2302 * C602) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C33763 +
          ((C2305 * C435 + C2300 * C442 + C2306 * C811 + C2301 * C819 +
            C2307 * C818 + C2302 * C834) *
               C118 +
           (C2305 * C441 + C2300 * C452 + C2306 * C820 + C2301 * C835 +
            C2307 * C833 + C2302 * C842) *
               C106 -
           (C2717 + C2716 + C2715) * C119 - (C2720 + C2719 + C2718) * C107 +
           (C2723 + C2722 + C2721) * C120 + (C2726 + C2725 + C2724) * C108 -
           (C2307 * C815 + C2302 * C828 + C2306 * C814 + C2301 * C825 +
            C2305 * C437 + C2300 * C446) *
               C121 -
           (C2307 * C827 + C2302 * C839 + C2306 * C826 + C2301 * C838 +
            C2305 * C447 + C2300 * C455) *
               C109) *
              C50828) *
         C50628 * C50694 * C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50878 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50611) *
               C33763 +
           ((C36698 + C36699 + C36700) * C49720 +
            (C36701 + C36702 + C36703) * C50878 -
            (C2717 + C2716 + C2715) * C49713 -
            (C2720 + C2719 + C2718) * C50611) *
               C50828) *
              C50628 * C50694 * C582 +
          (((C2533 + C2534 + C2535) * C49713 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50878 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C49720) +
            (C2536 + C2537 + C2538) * C50611) *
               C33763 +
           ((C4119 + C4118 + C4117) * C49713 -
            ((C2307 * C3159 + C2302 * C3166 + C2306 * C833 + C2301 * C842 +
              C2305 * C820 + C2300 * C835) *
                 C50878 +
             (C2307 * C3154 + C2302 * C3158 + C2306 * C818 + C2301 * C834 +
              C2305 * C811 + C2300 * C819) *
                 C49720) +
            (C4122 + C4121 + C4120) * C50611) *
               C50828) *
              C50628 * C50694 * C583 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C49720 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50878 -
            (C2897 + C2898 + C2899) * C49713 -
            (C2900 + C2901 + C2902) * C50611) *
               C33763 +
           ((C2305 * C818 + C2300 * C834 + C2306 * C3154 + C2301 * C3158 +
             C2307 * C3157 + C2302 * C3165) *
                C49720 +
            (C2305 * C833 + C2300 * C842 + C2306 * C3159 + C2301 * C3166 +
             C2307 * C3164 + C2302 * C3169) *
                C50878 -
            (C2307 * C3156 + C2302 * C3163 + C2306 * C3155 + C2301 * C3160 +
             C2305 * C817 + C2300 * C832) *
                C49713 -
            (C2307 * C3162 + C2302 * C3168 + C2306 * C3161 + C2301 * C3167 +
             C2305 * C831 + C2300 * C841) *
                C50611) *
               C50828) *
              C50628 * C50694 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C33763 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50828) *
               C17274 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C33763 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50828) *
               C17275 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C33763 +
            (C11269 + C11270 - C11271 - C11272 + C11273 + C11274) * C50828) *
               C17276) *
              C50694 * C50893 +
          (((C327 * C284 -
             ((C117 * C293 + C50748 * C304) * C278 +
              (C117 * C287 + C50748 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C33763 +
            (C1540 * C284 - (C5983 * C278 + C5982 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C50828) *
               C17274 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C33763 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50828) *
               C17275 +
           ((C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
             C333 * C285 - C334 * C280) *
                C33763 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50748 * C1524) * C285 -
             (C117 * C1525 + C50748 * C1526) * C280) *
                C50828) *
               C17276) *
              C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C696 +
             (C117 * C130 + C50748 * C143) * C50606) *
                C33763 +
            (C5950 + C5951) * C50828) *
               C17274 +
           ((C171 * C696 + C172 * C50606) * C33763 + (C5954 + C5955) * C50828) *
               C17275 +
           ((C173 * C696 + C174 * C50606) * C33763 +
            (C11671 + C11672) * C50828) *
               C17276) *
              C50694 * C692 -
          (((C11674 + C11673) * C50828 +
            (C330 * C50606 + C329 * C696) * C33763) *
               C17276 +
           ((C5967 + C5966) * C50828 + (C328 * C50606 + C327 * C696) * C33763) *
               C17275 +
           ((C5991 + C5990) * C50828 + ((C117 * C293 + C50748 * C304) * C50606 +
                                        (C117 * C287 + C50748 * C294) * C696) *
                                           C33763) *
               C17274) *
              C50694 * C693 +
          ((((C117 * C587 + C50748 * C592) * C696 +
             (C117 * C593 + C50748 * C602) * C50606) *
                C33763 +
            (C5994 + C5995) * C50828) *
               C17274 +
           ((C620 * C696 + C621 * C50606) * C33763 + (C5978 + C5979) * C50828) *
               C17275 +
           ((C622 * C696 + C623 * C50606) * C33763 +
            (C11675 + C11676) * C50828) *
               C17276) *
              C50694 * C694 -
          ((((C117 * C4102 + C50748 * C4103) * C50606 +
             (C117 * C4100 + C50748 * C4101) * C696) *
                C50828 +
            ((C117 * C703 + C50748 * C710) * C50606 +
             (C117 * C698 + C50748 * C704) * C696) *
                C33763) *
               C17276 +
           (((C117 * C3161 + C50748 * C3167) * C50606 +
             (C117 * C3155 + C50748 * C3160) * C696) *
                C50828 +
            ((C117 * C705 + C50748 * C711) * C50606 +
             (C117 * C699 + C50748 * C706) * C696) *
                C33763) *
               C17275 +
           (((C117 * C3159 + C50748 * C3166) * C50606 +
             (C117 * C3154 + C50748 * C3158) * C696) *
                C50828 +
            ((C117 * C707 + C50748 * C712) * C50606 +
             (C117 * C700 + C50748 * C708) * C696) *
                C33763) *
               C17274) *
              C50694 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C33763 +
           ((C2305 * C435 + C2300 * C442 + C2306 * C811 + C2301 * C819 +
             C2307 * C818 + C2302 * C834) *
                C283 +
            (C2305 * C441 + C2300 * C452 + C2306 * C820 + C2301 * C835 +
             C2307 * C833 + C2302 * C842) *
                C278 -
            (C2717 + C2716 + C2715) * C284 - (C2720 + C2719 + C2718) * C279 +
            (C2723 + C2722 + C2721) * C285 + (C2726 + C2725 + C2724) * C280) *
               C50828) *
              C50628 * C50694 * C50893 +
          (((C2533 + C2534 + C2535) * C284 -
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C278 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C283) +
            (C2536 + C2537 + C2538) * C279 - (C2539 + C2540 + C2541) * C285 -
            (C2542 + C2543 + C2544) * C280) *
               C33763 +
           ((C4119 + C4118 + C4117) * C284 -
            ((C2307 * C3159 + C2302 * C3166 + C2306 * C833 + C2301 * C842 +
              C2305 * C820 + C2300 * C835) *
                 C278 +
             (C2307 * C3154 + C2302 * C3158 + C2306 * C818 + C2301 * C834 +
              C2305 * C811 + C2300 * C819) *
                 C283) +
            (C4122 + C4121 + C4120) * C279 -
            (C2307 * C4100 + C2302 * C4101 + C2306 * C816 + C2301 * C830 +
             C2305 * C813 + C2300 * C823) *
                C285 -
            (C2307 * C4102 + C2302 * C4103 + C2306 * C829 + C2301 * C840 +
             C2305 * C824 + C2300 * C837) *
                C280) *
               C50828) *
              C50628 * C50694 * C50682)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C696 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C50606) *
               C33763 +
           ((C36698 + C36699 + C36700) * C696 +
            (C36701 + C36702 + C36703) * C50606) *
               C50828) *
              C50628 * C50694 * C692 -
          (((C2307 * C3159 + C2302 * C3166 + C2306 * C833 + C2301 * C842 +
             C2305 * C820 + C2300 * C835) *
                C50606 +
            (C2307 * C3154 + C2302 * C3158 + C2306 * C818 + C2301 * C834 +
             C2305 * C811 + C2300 * C819) *
                C696) *
               C50828 +
           ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
             C2305 * C293 + C2300 * C304) *
                C50606 +
            (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
             C2305 * C287 + C2300 * C294) *
                C696) *
               C33763) *
              C50628 * C50694 * C693 +
          (((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
             C2307 * C2872 + C2302 * C2875) *
                C696 +
            (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
             C2307 * C2876 + C2302 * C2881) *
                C50606) *
               C33763 +
           ((C2305 * C818 + C2300 * C834 + C2306 * C3154 + C2301 * C3158 +
             C2307 * C3157 + C2302 * C3165) *
                C696 +
            (C2305 * C833 + C2300 * C842 + C2306 * C3159 + C2301 * C3166 +
             C2307 * C3164 + C2302 * C3169) *
                C50606) *
               C50828) *
              C50628 * C50694 * C694 -
          (((C2307 * C20547 + C2302 * C20549 + C2306 * C3164 + C2301 * C3169 +
             C2305 * C3159 + C2300 * C3166) *
                C50606 +
            (C2307 * C20546 + C2302 * C20548 + C2306 * C3157 + C2301 * C3165 +
             C2305 * C3154 + C2300 * C3158) *
                C696) *
               C50828 +
           ((C2307 * C3004 + C2302 * C3007 + C2306 * C2876 + C2301 * C2881 +
             C2305 * C707 + C2300 * C712) *
                C50606 +
            (C2307 * C3001 + C2302 * C3005 + C2306 * C2872 + C2301 * C2875 +
             C2305 * C700 + C2300 * C708) *
                C696) *
               C33763) *
              C50628 * C50694 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50748 * C129) * C283 +
             (C117 * C130 + C50748 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C33763 +
            (C5544 + C5545 - C5504 - C5505 + C5506 + C5507) * C50828) *
               C17274 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C33763 +
            (C5516 + C5517 - C5518 - C5519 + C5520 + C5521) * C50828) *
               C17275 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C33763 +
            (C11269 + C11270 - C11271 - C11272 + C11273 + C11274) * C50828) *
               C17276) *
              C50894 +
          (((C5504 - (C5545 + C5544) + C5505 - C5506 - C5507) * C33763 +
            (C5512 - (C5547 + C5546) + C5513 - C5514 - C5515) * C50828) *
               C17274 +
           ((C5518 - (C5517 + C5516) + C5519 - C5520 - C5521) * C33763 +
            (C5524 - (C5523 + C5522) + C5525 - C5526 - C5527) * C50828) *
               C17275 +
           ((C11271 - (C11270 + C11269) + C11272 - C11273 - C11274) * C33763 +
            (C981 * C284 - (C980 * C278 + C979 * C283) + C982 * C279 -
             (C117 * C948 + C50748 * C957) * C285 -
             (C117 * C958 + C50748 * C963) * C280) *
                C50828) *
               C17276) *
              C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50748 * C129) * C696 +
              (C117 * C130 + C50748 * C143) * C50606) *
                 C33763 +
             (C5950 + C5951) * C50828) *
                C17274 +
            ((C171 * C696 + C172 * C50606) * C33763 +
             (C5954 + C5955) * C50828) *
                C17275 +
            ((C173 * C696 + C174 * C50606) * C33763 +
             (C11671 + C11672) * C50828) *
                C17276) *
               C50894 -
           (((C11977 + C11978) * C50828 + (C11672 + C11671) * C33763) * C17276 +
            ((C5957 + C5956) * C50828 + (C5955 + C5954) * C33763) * C17275 +
            ((C5953 + C5952) * C50828 + (C5951 + C5950) * C33763) * C17274) *
               C50706) *
              C582 +
          ((((C5990 + C5991) * C33763 + (C5992 + C5993) * C50828) * C17274 +
            ((C5966 + C5967) * C33763 + (C5968 + C5969) * C50828) * C17275 +
            ((C11673 + C11674) * C33763 + (C11979 + C11980) * C50828) *
                C17276) *
               C50706 -
           (((C11674 + C11673) * C50828 +
             (C330 * C50606 + C329 * C696) * C33763) *
                C17276 +
            ((C5967 + C5966) * C50828 +
             (C328 * C50606 + C327 * C696) * C33763) *
                C17275 +
            ((C5991 + C5990) * C50828 +
             ((C117 * C293 + C50748 * C304) * C50606 +
              (C117 * C287 + C50748 * C294) * C696) *
                 C33763) *
                C17274) *
               C50894) *
              C583 +
          (((((C117 * C587 + C50748 * C592) * C696 +
              (C117 * C593 + C50748 * C602) * C50606) *
                 C33763 +
             (C5994 + C5995) * C50828) *
                C17274 +
            ((C620 * C696 + C621 * C50606) * C33763 +
             (C5978 + C5979) * C50828) *
                C17275 +
            ((C622 * C696 + C623 * C50606) * C33763 +
             (C11675 + C11676) * C50828) *
                C17276) *
               C50894 -
           ((((C117 * C3324 + C50748 * C3327) * C50606 +
              (C117 * C3318 + C50748 * C3323) * C696) *
                 C50828 +
             (C11676 + C11675) * C33763) *
                C17276 +
            ((C5981 + C5980) * C50828 + (C5979 + C5978) * C33763) * C17275 +
            ((C5997 + C5996) * C50828 + (C5995 + C5994) * C33763) * C17274) *
               C50706) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
             C2307 * C587 + C2302 * C592) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
             C2307 * C593 + C2302 * C602) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C279 +
            (C2351 + C2352 + C2353) * C285 + (C2354 + C2355 + C2356) * C280) *
               C33763 +
           ((C36698 + C36699 + C36700) * C283 +
            (C36701 + C36702 + C36703) * C278 - (C2717 + C2716 + C2715) * C284 -
            (C2720 + C2719 + C2718) * C279 + (C2723 + C2722 + C2721) * C285 +
            (C2726 + C2725 + C2724) * C280) *
               C50828) *
              C50628 * C50894 +
          (((C2715 + C2716 + C2717) * C284 -
            ((C36703 + C36702 + C36701) * C278 +
             (C36700 + C36699 + C36698) * C283) +
            (C2718 + C2719 + C2720) * C279 - (C2721 + C2722 + C2723) * C285 -
            (C2724 + C2725 + C2726) * C280) *
               C33763 +
           ((C3343 + C3342 + C3341) * C284 -
            ((C2307 * C3320 + C2302 * C3325 + C2306 * C1090 + C2301 * C1095 +
              C2305 * C950 + C2300 * C959) *
                 C278 +
             (C2307 * C3316 + C2302 * C3319 + C2306 * C1083 + C2301 * C1091 +
              C2305 * C944 + C2300 * C949) *
                 C283) +
            (C3346 + C3345 + C3344) * C279 -
            (C2307 * C3318 + C2302 * C3323 + C2306 * C1081 + C2301 * C1087 +
             C2305 * C946 + C2300 * C953) *
                C285 -
            (C2307 * C3324 + C2302 * C3327 + C2306 * C1086 + C2301 * C1093 +
             C2305 * C954 + C2300 * C961) *
                C280) *
               C50828) *
              C50628 * C50706) *
         C50668) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C287 + C2301 * C294 +
              C2307 * C587 + C2302 * C592) *
                 C696 +
             (C2305 * C130 + C2300 * C143 + C2306 * C293 + C2301 * C304 +
              C2307 * C593 + C2302 * C602) *
                 C50606) *
                C33763 +
            ((C36698 + C36699 + C36700) * C696 +
             (C36701 + C36702 + C36703) * C50606) *
                C50828) *
               C50628 * C50894 -
           (((C2307 * C3320 + C2302 * C3325 + C2306 * C1090 + C2301 * C1095 +
              C2305 * C950 + C2300 * C959) *
                 C50606 +
             (C2307 * C3316 + C2302 * C3319 + C2306 * C1083 + C2301 * C1091 +
              C2305 * C944 + C2300 * C949) *
                 C696) *
                C50828 +
            ((C36703 + C36702 + C36701) * C50606 +
             (C36700 + C36699 + C36698) * C696) *
                C33763) *
               C50628 * C50706) *
              C582 +
          ((((C37118 + C37119 + C37120) * C696 +
             (C37121 + C37122 + C37123) * C50606) *
                C33763 +
            ((C2305 * C1083 + C2300 * C1091 + C2306 * C3316 + C2301 * C3319 +
              C2307 * C3493 + C2302 * C3497) *
                 C696 +
             (C2305 * C1090 + C2300 * C1095 + C2306 * C3320 + C2301 * C3325 +
              C2307 * C3496 + C2302 * C3499) *
                 C50606) *
                C50828) *
               C50628 * C50706 -
           (((C37123 + C37122 + C37121) * C50606 +
             (C37120 + C37119 + C37118) * C696) *
                C50828 +
            ((C2307 * C707 + C2302 * C712 + C2306 * C593 + C2301 * C602 +
              C2305 * C293 + C2300 * C304) *
                 C50606 +
             (C2307 * C700 + C2302 * C708 + C2306 * C587 + C2301 * C592 +
              C2305 * C287 + C2300 * C294) *
                 C696) *
                C33763) *
               C50628 * C50894) *
              C583 +
          ((((C2305 * C587 + C2300 * C592 + C2306 * C700 + C2301 * C708 +
              C2307 * C2872 + C2302 * C2875) *
                 C696 +
             (C2305 * C593 + C2300 * C602 + C2306 * C707 + C2301 * C712 +
              C2307 * C2876 + C2302 * C2881) *
                 C50606) *
                C33763 +
            ((C37124 + C37125 + C37126) * C696 +
             (C37127 + C37128 + C37129) * C50606) *
                C50828) *
               C50628 * C50894 -
           (((C2307 * C20747 + C2302 * C20749 + C2306 * C3496 + C2301 * C3499 +
              C2305 * C3320 + C2300 * C3325) *
                 C50606 +
             (C2307 * C20746 + C2302 * C20748 + C2306 * C3493 + C2301 * C3497 +
              C2305 * C3316 + C2300 * C3319) *
                 C696) *
                C50828 +
            ((C37129 + C37128 + C37127) * C50606 +
             (C37126 + C37125 + C37124) * C696) *
                C33763) *
               C50628 * C50706) *
              C584)) /
            (p * q * std::sqrt(p + q));
}
