/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pddp_AC_yy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1221_13_22(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49932 = ce + de;
    const double C49931 = yC - yD;
    const double C49942 = ce * de;
    const double C49941 = 0 * de;
    const double C49960 = 0 * ce;
    const double C49956 = 0 * de;
    const double C50004 = ae * be;
    const double C50003 = ae + be;
    const double C50002 = 0 * be;
    const double C50001 = yA - yB;
    const double C50032 = 0 * ae;
    const double C50027 = 0 * be;
    const double C50063 = p + q;
    const double C50062 = p * q;
    const double C50071 = ae * ce;
    const double C50070 = yP - yQ;
    const double C50068 = bs[3];
    const double C50077 = bs[4];
    const double C50075 = xP - xQ;
    const double C50086 = bs[5];
    const double C50095 = bs[6];
    const double C50110 = bs[7];
    const double C50128 = bs[2];
    const double C50262 = zP - zQ;
    const double C119 = bs[0];
    const double C50966 = xA - xB;
    const double C50985 = xC - xD;
    const double C51017 = zC - zD;
    const double C51121 = zA - zB;
    const double C49940 = 2 * C49932;
    const double C49957 = std::pow(C49932, 2);
    const double C51022 = std::pow(C49931, 2);
    const double C51038 = C49931 * de;
    const double C51037 = C49931 * ce;
    const double C49943 = C49942 * C49931;
    const double C49958 = C49931 * C49941;
    const double C49964 = C49960 / C49932;
    const double C50005 = std::pow(C50003, 2);
    const double C50028 = 2 * C50003;
    const double C50079 = C49932 * C50003;
    const double C50006 = C50004 * C50001;
    const double C50029 = C50001 * C50002;
    const double C51106 = std::pow(C50001, 2);
    const double C51158 = C50001 * be;
    const double C51157 = C50001 * ae;
    const double C50037 = C50032 / C50003;
    const double C50064 = 2 * C50062;
    const double C50073 = std::pow(C50070, 2);
    const double C50132 = C50070 * ce;
    const double C50131 = C50070 * ae;
    const double C50088 = std::pow(C50075, 2);
    const double C50276 = std::pow(C50262, 2);
    const double C50969 = C50966 * be;
    const double C50968 = C50966 * ae;
    const double C50967 = std::pow(C50966, 2);
    const double C50988 = C50985 * de;
    const double C50987 = C50985 * ce;
    const double C50986 = std::pow(C50985, 2);
    const double C51052 = std::pow(C51017, 2);
    const double C51064 = C51017 * de;
    const double C51063 = C51017 * ce;
    const double C51122 = std::pow(C51121, 2);
    const double C51186 = C51121 * be;
    const double C51185 = C51121 * ae;
    const double C50996 = std::pow(C49940, -1);
    const double C51255 = std::pow(C49940, -2);
    const double C49961 = 2 * C49957;
    const double C51253 = 4 * C49957;
    const double C51023 = C51022 * C49942;
    const double C49962 = C49958 / C49932;
    const double C50007 = 2 * C50005;
    const double C51246 = 4 * C50005;
    const double C50977 = std::pow(C50028, -1);
    const double C51268 = std::pow(C50028, -2);
    const double C50034 = C50029 / C50003;
    const double C51107 = C51106 * C50004;
    const double C50066 = C50064 / C50063;
    const double C140 =
        (-((std::pow(yP - yQ, 2) * bs[2] * std::pow(C50064 / C50063, 2) -
            (bs[1] * C50064) / C50063) *
           ae * ce) /
         C49932) /
        C50003;
    const double C120 = -(C50075 * bs[1] * C50064) / C50063;
    const double C300 = -(C50070 * bs[1] * C50064) / C50063;
    const double C476 = -(C50262 * bs[1] * C50064) / C50063;
    const double C50080 = C50073 * C50077;
    const double C50089 = C50073 * C50086;
    const double C50098 = C50073 * C50095;
    const double C50114 = C50073 * C50110;
    const double C50134 = C50077 * C50132;
    const double C50139 = C50086 * C50132;
    const double C50144 = C50095 * C50132;
    const double C50159 = C50068 * C50132;
    const double C50195 = C50110 * C50132;
    const double C127 = (bs[1] * C50132 * C50064) / (C50063 * C49932);
    const double C50135 = C50077 * C50131;
    const double C50140 = C50086 * C50131;
    const double C50145 = C50095 * C50131;
    const double C50161 = C50068 * C50131;
    const double C50201 = C50110 * C50131;
    const double C126 = (-(bs[1] * C50131 * C50064) / C50063) / C50003;
    const double C50970 = C50967 * C50004;
    const double C50989 = C50986 * C49942;
    const double C51053 = C51052 * C49942;
    const double C51123 = C51122 * C50004;
    const double C49969 = C49941 / C49961;
    const double C49967 = C49956 / C49961;
    const double C51024 = C51023 / C49932;
    const double C49966 = 0 - C49962;
    const double C50031 = C50002 / C50007;
    const double C50035 = C50027 / C50007;
    const double C50038 = 0 - C50034;
    const double C51108 = C51107 / C50003;
    const double C50069 = -C50066;
    const double C50078 = std::pow(C50066, 4);
    const double C50096 = std::pow(C50066, 6);
    const double C50127 = std::pow(C50066, 2);
    const double C141 =
        (-((xP - xQ) *
           (bs[2] * std::pow(C50066, 2) +
            std::pow(yP - yQ, 2) * bs[3] * std::pow(-C50066, 3)) *
           ae * ce) /
         C49932) /
        C50003;
    const double C50971 = C50970 / C50003;
    const double C50990 = C50989 / C49932;
    const double C51054 = C51053 / C49932;
    const double C51124 = C51123 / C50003;
    const double C51025 = -C51024;
    const double C49971 = C49966 * ce;
    const double C50041 = C50038 * ae;
    const double C51109 = -C51108;
    const double C50072 = std::pow(C50069, 3);
    const double C50087 = std::pow(C50069, 5);
    const double C50111 = std::pow(C50069, 7);
    const double C50081 = C50080 * C50078;
    const double C50085 = C50077 * C50078;
    const double C50137 = C50078 * C50135;
    const double C50136 = C50078 * C50134;
    const double C50099 = C50098 * C50096;
    const double C50109 = C50095 * C50096;
    const double C50147 = C50096 * C50145;
    const double C50146 = C50096 * C50144;
    const double C50160 = C50128 * C50127;
    const double C128 = (C50075 * C50127 * C50128 * C50131) / C50003;
    const double C129 = -(C50075 * C50127 * C50128 * C50132) / C49932;
    const double C306 = (C50070 * C50127 * C50128 * C50131) / C50003 -
                        (ae * bs[1] * C50064) / (C50063 * C50003);
    const double C307 = (ce * bs[1] * C50064) / (C50063 * C49932) -
                        (C50070 * C50127 * C50128 * C50132) / C49932;
    const double C486 = -(C50262 * C50127 * C50128 * C50132) / C49932;
    const double C487 = (C50262 * C50127 * C50128 * C50131) / C50003;
    const double C50972 = -C50971;
    const double C50991 = -C50990;
    const double C51055 = -C51054;
    const double C51125 = -C51124;
    const double C51026 = std::exp(C51025);
    const double C49973 = C49971 / C49932;
    const double C50043 = C50041 / C50003;
    const double C51110 = std::exp(C51109);
    const double C50076 = C50068 * C50072;
    const double C50163 = C50072 * C50161;
    const double C50162 = C50072 * C50159;
    const double C142 =
        (-((C50068 * C50072 + C50073 * bs[4] * std::pow(C50066, 4)) * C50071 *
           std::pow(xP - xQ, 2)) /
         C49932) /
            C50003 -
        ((bs[2] * std::pow(C50066, 2) + C50073 * C50068 * C50072) * C50071) /
            (C49932 * C50003);
    const double C318 =
        (-(C50127 * C50128 * C50070 * ae * ce) / C49932) / C50003 -
        (ae * C50127 * C50128 * C50070 * ce) / C50079 -
        (C50070 * (C50128 * C50127 + C50073 * C50068 * C50072) * C50071) /
            C50079;
    const double C494 =
        (-((zP - zQ) * (C50128 * C50127 + C50073 * C50068 * C50072) * C50071) /
         C49932) /
        C50003;
    const double C50090 = C50089 * C50087;
    const double C50094 = C50086 * C50087;
    const double C50142 = C50087 * C50140;
    const double C50141 = C50087 * C50139;
    const double C50116 = C50114 * C50111;
    const double C50208 = C50111 * C50201;
    const double C50204 = C50111 * C50195;
    const double C50170 = C50085 * C50088;
    const double C50178 = C50075 * C50085;
    const double C50294 = C50085 * ae;
    const double C50292 = C50085 * C50073;
    const double C50291 = C50070 * C50085;
    const double C50290 = C50085 * ce;
    const double C50940 = C50085 * C50276;
    const double C50952 = C50262 * C50085;
    const double C50167 = C50075 * C50137;
    const double C50231 = C50070 * C50137;
    const double C50286 = C50137 * ce;
    const double C50165 = C50075 * C50136;
    const double C50228 = C50070 * C50136;
    const double C50287 = ae * C50136;
    const double C50198 = C50109 * C50088;
    const double C50431 = C50075 * C50109;
    const double C50562 = C50109 * ae;
    const double C50556 = C50109 * C50073;
    const double C50555 = C50070 * C50109;
    const double C50554 = C50109 * ce;
    const double C50149 = C50147 * C50088;
    const double C50200 = C50075 * C50147;
    const double C50381 = C50070 * C50147;
    const double C50548 = C50147 * ce;
    const double C50624 = C50262 * C50147;
    const double C50648 = C50147 * C50276;
    const double C50148 = C50146 * C50088;
    const double C50194 = C50075 * C50146;
    const double C50375 = C50070 * C50146;
    const double C50549 = ae * C50146;
    const double C50625 = C50262 * C50146;
    const double C50649 = C50146 * C50276;
    const double C121 = C50160 * C50088 - (bs[1] * C50064) / C50063;
    const double C301 = C50070 * C50075 * C50160;
    const double C472 = C50262 * C50075 * C50160;
    const double C638 = C50160 * C50073 - (bs[1] * C50064) / C50063;
    const double C883 = C50262 * C50070 * C50160;
    const double C1016 = C50160 * C50276 - (bs[1] * C50064) / C50063;
    const double C50973 = std::exp(C50972);
    const double C50992 = std::exp(C50991);
    const double C51056 = std::exp(C51055);
    const double C51126 = std::exp(C51125);
    const double C49944 = C49943 * C51026;
    const double C118 = -(2 * ce * de * (yC - yD) * C51026) / (ce + de);
    const double C298 =
        ((C51026 - (C49931 * 2 * ce * de * C49931 * C51026) / C49932) * ce) /
            C49932 -
        (0 * de) / (2 * std::pow(C49932, 2));
    const double C299 =
        (0 * ce) / C49932 - (ce * de * C49931 * C51026) / std::pow(C49932, 2);
    const double C51039 = C51026 * C51037;
    const double C51042 = C50996 * C51026;
    const double C51258 = C51026 * C51038;
    const double C51257 = C51026 / C49940;
    const double C632 = C51255 * C51026;
    const double C49975 = C49973 - C49967;
    const double C50045 = C50043 - C50035;
    const double C151 = C51110 * C141;
    const double C149 = C51110 * C128;
    const double C5653 = C51110 * C487;
    const double C50008 = C50006 * C51110;
    const double C117 = -(2 * ae * be * (yA - yB) * C51110) / (ae + be);
    const double C51159 = C51110 * C51157;
    const double C51162 = C50977 * C51110;
    const double C51272 = C51110 * C51158;
    const double C51267 = C51110 / C50028;
    const double C2446 = C51268 * C51110;
    const double C50082 = C50076 + C50081;
    const double C50166 = C50075 * C50076;
    const double C50232 = C50076 * ae;
    const double C50230 = C50070 * C50076;
    const double C50229 = C50076 * ce;
    const double C122 =
        2 * C50075 * C50160 + C50075 * (C50160 + C50076 * C50088);
    const double C302 = C50070 * (C50160 + C50076 * C50088);
    const double C473 = C50262 * (C50160 + C50076 * C50088);
    const double C769 =
        2 * C50070 * C50160 + C50070 * (C50160 + C50076 * C50073);
    const double C884 = C50262 * (C50160 + C50076 * C50073);
    const double C1247 =
        2 * C50262 * C50160 + C50262 * (C50160 + C50076 * C50276);
    const double C6286 =
        3 * (C50160 + C50076 * C50276) +
        C50262 * (2 * C50262 * C50076 + C50262 * (C50076 + C50085 * C50276));
    const double C130 = (C50127 * C50128 * C50131 + C50163 * C50088) / C50003;
    const double C132 =
        (2 * C50075 * C50163 + C50075 * (C50163 + C50137 * C50088)) / C50003;
    const double C308 =
        (C50070 * C50075 * C50163 + C50075 * C50160 * ae) / C50003;
    const double C310 = (C50070 * (C50163 + C50137 * C50088) +
                         (C50160 + C50076 * C50088) * ae) /
                        C50003;
    const double C478 = (C50262 * C50075 * C50163) / C50003;
    const double C480 = (C50262 * (C50163 + C50137 * C50088)) / C50003;
    const double C643 =
        (C50127 * C50128 * C50131 + C50070 * (C50070 * C50163 + C50160 * ae) +
         C50070 * C50160 * ae) /
        C50003;
    const double C891 = (C50262 * (C50070 * C50163 + C50160 * ae)) / C50003;
    const double C1021 = (C50127 * C50128 * C50131 + C50163 * C50276) / C50003;
    const double C1255 =
        (2 * C50262 * C50163 + C50262 * (C50163 + C50137 * C50276)) / C50003;
    const double C131 = -(C50162 * C50088 + C50127 * C50128 * C50132) / C49932;
    const double C133 = (-2 * C50075 * C50162) / C49932 -
                        (C50075 * (C50136 * C50088 + C50162)) / C49932;
    const double C309 =
        -(C50070 * C50075 * C50162 + C50075 * C50160 * ce) / C49932;
    const double C311 = -(C50070 * (C50136 * C50088 + C50162) +
                          (C50160 + C50076 * C50088) * ce) /
                        C49932;
    const double C479 = -(C50262 * C50075 * C50162) / C49932;
    const double C481 = -(C50262 * (C50136 * C50088 + C50162)) / C49932;
    const double C644 = -(C50070 * (C50070 * C50162 + C50160 * ce) +
                          C50127 * C50128 * C50132 + C50070 * C50160 * ce) /
                        C49932;
    const double C892 = -(C50262 * (C50070 * C50162 + C50160 * ce)) / C49932;
    const double C1022 = -(C50162 * C50276 + C50127 * C50128 * C50132) / C49932;
    const double C1254 = (-2 * C50262 * C50162) / C49932 -
                         (C50262 * (C50136 * C50276 + C50162)) / C49932;
    const double C155 = C51110 * C142;
    const double C5655 = C51110 * C494;
    const double C50091 = C50085 + C50090;
    const double C50100 = C50094 + C50099;
    const double C50179 = C50094 * C50088;
    const double C50197 = C50075 * C50094;
    const double C50382 = C50094 * ae;
    const double C50378 = C50094 * C50073;
    const double C50377 = C50070 * C50094;
    const double C50376 = C50094 * ce;
    const double C50953 = C50094 * C50276;
    const double C50171 = C50142 * C50088;
    const double C50180 = C50075 * C50142;
    const double C50293 = C50070 * C50142;
    const double C50371 = C50142 * ce;
    const double C50484 = C50262 * C50142;
    const double C50832 = C50142 * C50276;
    const double C6289 =
        (3 * (C50163 + C50137 * C50276) +
         C50262 * (2 * C50262 * C50137 + C50262 * (C50137 + C50142 * C50276))) /
        C50003;
    const double C50169 = C50141 * C50088;
    const double C50176 = C50075 * C50141;
    const double C50289 = C50070 * C50141;
    const double C50372 = ae * C50141;
    const double C50485 = C50262 * C50141;
    const double C50829 = C50141 * C50276;
    const double C6290 =
        (-3 * (C50136 * C50276 + C50162)) / C49932 +
        C50262 * ((-2 * C50262 * C50136) / C49932 -
                  (C50262 * (C50141 * C50276 + C50136)) / C49932);
    const double C50117 = C50109 + C50116;
    const double C50212 = C50208 * C50088;
    const double C50434 = C50075 * C50208;
    const double C50561 = C50070 * C50208;
    const double C50210 = C50204 * C50088;
    const double C50430 = C50075 * C50204;
    const double C50553 = C50070 * C50204;
    const double C50173 = C50076 + C50170;
    const double C50184 = 2 * C50178;
    const double C50241 = C50178 * ae;
    const double C50239 = C50070 * C50178;
    const double C50238 = C50178 * ce;
    const double C50300 = C50076 + C50292;
    const double C50302 = C50291 * ae;
    const double C50299 = C50291 * ce;
    const double C50379 = 2 * C50291;
    const double C50941 = C50076 + C50940;
    const double C50954 = 2 * C50952;
    const double C1023 = (C50075 * C50163 + C50167 * C50276) / C50003;
    const double C50295 = C50286 / C49932;
    const double C1024 = -(C50165 * C50276 + C50075 * C50162) / C49932;
    const double C50296 = C50287 / C50079;
    const double C50206 = C50094 + C50198;
    const double C50446 = C50431 * ae;
    const double C50444 = C50431 * C50073;
    const double C50443 = C50070 * C50431;
    const double C50442 = C50431 * ce;
    const double C50574 = C50094 + C50556;
    const double C50576 = C50555 * ae;
    const double C50573 = C50555 * ce;
    const double C50151 = C50142 + C50149;
    const double C50207 = 2 * C50200;
    const double C50321 = C50070 * C50200;
    const double C50426 = C50200 * ce;
    const double C50500 = C50262 * C50200;
    const double C50826 = C50200 * C50276;
    const double C50567 = C50548 / C49932;
    const double C50629 = C50624 * ce;
    const double C50651 = C50142 + C50648;
    const double C50150 = C50148 + C50141;
    const double C50203 = -2 * C50194;
    const double C50317 = C50070 * C50194;
    const double C50427 = ae * C50194;
    const double C50501 = C50262 * C50194;
    const double C50823 = C50194 * C50276;
    const double C50568 = C50549 / C50079;
    const double C50630 = ae * C50625;
    const double C50652 = C50649 + C50141;
    const double C50974 = C50973 * C50968;
    const double C50978 = C50977 * C50973;
    const double C51243 = C50973 * C50969;
    const double C51240 = C50973 / C50028;
    const double C17452 = C51268 * C50973;
    const double C50993 = C50992 * C50987;
    const double C50997 = C50996 * C50992;
    const double C51249 = C50992 / C49940;
    const double C51248 = C50992 * C50988;
    const double C297 = C51255 * C50992;
    const double C51065 = C51056 * C51063;
    const double C51068 = C50996 * C51056;
    const double C51263 = C51056 * C51064;
    const double C51262 = C51056 / C49940;
    const double C1015 = C51255 * C51056;
    const double C51187 = C51126 * C51185;
    const double C51190 = C50977 * C51126;
    const double C51276 = C51126 * C51186;
    const double C51269 = C51126 / C50028;
    const double C5338 = C51268 * C51126;
    const double C49945 = 2 * C49944;
    const double C49965 = C49944 / C49957;
    const double C51260 = C51039 / C49961;
    const double C51259 = C51039 * C51038;
    const double C51254 = C51039 / C49932;
    const double C51045 = C51042 * C51038;
    const double C763 = C51042 / C51253;
    const double C1489 = C51042 / C49940;
    const double C51286 = C51258 / C49932;
    const double C631 = (-2 * C50996 * C51258) / C49932;
    const double C630 = (C51026 * std::pow(C51038, 2)) / C49957 + C51257;
    const double C50033 = C50008 / C50005;
    const double C50030 = 2 * C50008;
    const double C2451 = ((0 * ae) / C50003 - C50008 / C50005) / (2 * C50003) +
                         (0 * ae) / C50003;
    const double C8257 =
        ((C51110 - (C50001 * 2 * C50008) / C50003) * ae) / C50003 -
        C50002 / C50007;
    const double C8258 = (0 * ae) / C50003 - C50008 / C50005;
    const double C17453 =
        (-C50002 / C50003) / (2 * C50003) -
        ((C51110 - (C50001 * 2 * C50008) / C50003) * be) / C50003;
    const double C17454 =
        (-(2 * C50008) / C50003) / (2 * C50003) - (0 * be) / C50003;
    const double C152 = C117 * C121;
    const double C150 = C117 * C129;
    const double C148 = C117 * C120;
    const double C327 = C117 * C301;
    const double C497 = C117 * C472;
    const double C5656 = C117 * C1016;
    const double C5654 = C117 * C486;
    const double C5652 = C117 * C476;
    const double C6107 = C117 * C883;
    const double C51274 = C51159 / C50007;
    const double C51273 = C51159 * C51158;
    const double C51270 = C51159 / C50003;
    const double C2445 = (2 * C50977 * C51159) / C50003;
    const double C2450 =
        (((C51110 - (C50001 * 2 * C50008) / C50003) * ae) / C50003 -
         C50002 / C50007) /
            (2 * C50003) +
        ((C50001 * ((0 * ae) / C50003 - C50008 / C50005) + C51162) * ae) /
            C50003;
    const double C51275 = C51162 * C51158;
    const double C20282 = C51162 / C51246;
    const double C24901 = C51162 / C50028;
    const double C51292 = C51272 / C50003;
    const double C2444 = (C51110 * std::pow(C51157, 2)) / C50005 + C51267;
    const double C50083 = C50082 * C50071;
    const double C645 =
        (C50075 * C50163 + C50070 * (C50070 * C50167 + C50166 * ae) +
         C50070 * C50166 * ae) /
        C50003;
    const double C646 = -(C50070 * (C50070 * C50165 + C50166 * ce) +
                          C50075 * C50162 + C50070 * C50166 * ce) /
                        C49932;
    const double C895 = (C50262 * (C50070 * C50167 + C50166 * ae)) / C50003;
    const double C896 = -(C50262 * (C50070 * C50165 + C50166 * ce)) / C49932;
    const double C639 = C50075 * C50160 + C50166 * C50073;
    const double C770 =
        2 * C50070 * C50166 + C50070 * (C50166 + C50178 * C50073);
    const double C885 = C50262 * C50070 * C50166;
    const double C886 = C50262 * (C50166 + C50178 * C50073);
    const double C1017 = C50075 * C50160 + C50166 * C50276;
    const double C1246 =
        2 * C50262 * C50166 + C50262 * (C50166 + C50178 * C50276);
    const double C50234 = C50231 + C50232;
    const double C1158 = C50070 * C50160 + C50230 * C50276;
    const double C3745 =
        2 * C50262 * C50230 + C50262 * (C50230 + C50291 * C50276);
    const double C50233 = C50228 + C50229;
    const double C156 = C117 * C122;
    const double C333 = C117 * C302;
    const double C501 = C117 * C473;
    const double C6111 = C117 * C884;
    const double C6304 = C117 * C1247;
    const double C6613 = C117 * C6286;
    const double C153 = C51110 * C130;
    const double C157 = C51110 * C132;
    const double C328 = C51110 * C308;
    const double C8263 = C51162 * C308;
    const double C17459 = C51162 * C308;
    const double C334 = C51110 * C310;
    const double C8271 = C51162 * C310;
    const double C17467 = C51162 * C310;
    const double C498 = C51110 * C478;
    const double C502 = C51110 * C480;
    const double C6108 = C51110 * C891;
    const double C14215 = C51162 * C891;
    const double C22396 = C51162 * C891;
    const double C5657 = C51110 * C1021;
    const double C6305 = C51110 * C1255;
    const double C154 = C117 * C131;
    const double C158 = C117 * C133;
    const double C329 = C117 * C309;
    const double C335 = C117 * C311;
    const double C499 = C117 * C479;
    const double C503 = C117 * C481;
    const double C6109 = C117 * C892;
    const double C5658 = C117 * C1022;
    const double C6302 = C117 * C1254;
    const double C50092 = C50091 * C50071;
    const double C50101 = C50100 * C50071;
    const double C50185 = C50085 + C50179;
    const double C50205 = 2 * C50197;
    const double C50322 = C50197 * ae;
    const double C50320 = C50197 * C50073;
    const double C50319 = C50070 * C50197;
    const double C50318 = C50197 * ce;
    const double C50937 = C50197 * C50276;
    const double C6287 =
        3 * (C50166 + C50178 * C50276) +
        C50262 * (2 * C50262 * C50178 + C50262 * (C50178 + C50197 * C50276));
    const double C50392 = C50381 + C50382;
    const double C50391 = C50085 + C50378;
    const double C50393 = C50377 * ae;
    const double C50390 = C50377 * ce;
    const double C50557 = 2 * C50377;
    const double C50949 = C50377 * C50276;
    const double C6463 =
        3 * (C50230 + C50291 * C50276) +
        C50262 * (2 * C50262 * C50291 + C50262 * (C50291 + C50377 * C50276));
    const double C50389 = C50375 + C50376;
    const double C50955 = C50085 + C50953;
    const double C50174 = C50137 + C50171;
    const double C50186 = 2 * C50180;
    const double C50240 = C50070 * C50180;
    const double C50314 = C50180 * ce;
    const double C1253 =
        (2 * C50262 * C50167 + C50262 * (C50167 + C50180 * C50276)) / C50003;
    const double C6291 =
        (3 * (C50167 + C50180 * C50276) +
         C50262 * (2 * C50262 * C50180 + C50262 * (C50180 + C50200 * C50276))) /
        C50003;
    const double C50301 = C50293 + C50294;
    const double C50385 = C50371 / C49932;
    const double C50487 = C50484 * ce;
    const double C50859 = 2 * C50484;
    const double C50833 = C50137 + C50832;
    const double C6614 = C51110 * C6289;
    const double C50172 = C50169 + C50136;
    const double C50182 = -2 * C50176;
    const double C50237 = C50070 * C50176;
    const double C50315 = ae * C50176;
    const double C1252 = (-2 * C50262 * C50165) / C49932 -
                         (C50262 * (C50176 * C50276 + C50165)) / C49932;
    const double C6292 =
        (-3 * (C50176 * C50276 + C50165)) / C49932 +
        C50262 * ((-2 * C50262 * C50176) / C49932 -
                  (C50262 * (C50194 * C50276 + C50176)) / C49932);
    const double C50298 = C50289 + C50290;
    const double C50386 = C50372 / C50079;
    const double C50488 = ae * C50485;
    const double C50853 = -2 * C50485;
    const double C50830 = C50829 + C50136;
    const double C6615 = C117 * C6290;
    const double C50118 = C50117 * C50071;
    const double C50215 = C50147 + C50212;
    const double C50445 = C50070 * C50434;
    const double C50575 = C50561 + C50562;
    const double C50213 = C50210 + C50146;
    const double C50441 = C50070 * C50430;
    const double C50572 = C50553 + C50554;
    const double C123 = 3 * (C50160 + C50076 * C50088) +
                        C50075 * (2 * C50166 + C50075 * C50173);
    const double C303 = C50070 * (2 * C50166 + C50075 * C50173);
    const double C474 = C50262 * (2 * C50166 + C50075 * C50173);
    const double C640 = C50160 + C50076 * C50088 + C50173 * C50073;
    const double C887 = C50262 * C50070 * C50173;
    const double C1018 = C50160 + C50076 * C50088 + C50173 * C50276;
    const double C1159 = C50070 * C50166 + C50239 * C50276;
    const double C3016 = 3 * (C50160 + C50076 * C50073) +
                         C50070 * (2 * C50230 + C50070 * C50300);
    const double C3298 = C50262 * (2 * C50230 + C50070 * C50300);
    const double C3460 = C50160 + C50076 * C50073 + C50300 * C50276;
    const double C6604 =
        4 * (2 * C50262 * C50076 + C50262 * C50941) +
        C50262 * (3 * C50941 + C50262 * (2 * C50262 * C50085 +
                                         C50262 * (C50085 + C50094 * C50276)));
    const double C1038 = C51110 * C1023;
    const double C50303 = -C50295;
    const double C1039 = C117 * C1024;
    const double C50211 = C50075 * C50206;
    const double C50350 = C50206 * ae;
    const double C50348 = C50206 * C50073;
    const double C50347 = C50070 * C50206;
    const double C50346 = C50206 * ce;
    const double C50452 = C50197 + C50444;
    const double C50454 = C50443 * ae;
    const double C50451 = C50443 * ce;
    const double C50584 = C50574 * ae;
    const double C50582 = C50070 * C50574;
    const double C50581 = C50574 * ce;
    const double C50181 = C50075 * C50151;
    const double C50199 = 3 * C50151;
    const double C50248 = C50070 * C50151;
    const double C50342 = C50151 * ce;
    const double C50437 = C50426 / C49932;
    const double C50503 = C50500 * ce;
    const double C50827 = C50180 + C50826;
    const double C50579 = -C50567;
    const double C50634 = C50629 / C49932;
    const double C50654 = C50651 * ce;
    const double C50860 = C50262 * C50651;
    const double C50177 = C50075 * C50150;
    const double C50193 = -3 * C50150;
    const double C50245 = C50070 * C50150;
    const double C50343 = ae * C50150;
    const double C50209 = C50203 / C49932;
    const double C50438 = C50427 / C50079;
    const double C50504 = ae * C50501;
    const double C50824 = C50823 + C50176;
    const double C50635 = C50630 / C50079;
    const double C50655 = ae * C50652;
    const double C50854 = C50262 * C50652;
    const double C51244 = C50974 / C50007;
    const double C51242 = C50974 / C50003;
    const double C51241 = C50974 * C50969;
    const double C17451 = (2 * C50977 * C50974) / C50003;
    const double C51245 = C50978 * C50969;
    const double C111 = C50978 / C51246;
    const double C8256 = C50978 / C50028;
    const double C51281 = C51243 / C50003;
    const double C17450 = (C50973 * std::pow(C50968, 2)) / C50005 + C51240;
    const double C51251 = C50993 / C49961;
    const double C51250 = C50993 * C50988;
    const double C51247 = C50993 / C49932;
    const double C51000 = C50997 * C50988;
    const double C115 = C50997 / C51253;
    const double C1362 = C50997 / C49940;
    const double C295 = (C50992 * std::pow(C50988, 2)) / C49957 + C51249;
    const double C51283 = C51248 / C49932;
    const double C296 = (-2 * C50996 * C51248) / C49932;
    const double C51265 = C51065 / C49961;
    const double C51264 = C51065 * C51064;
    const double C51256 = C51065 / C49932;
    const double C51071 = C51068 * C51064;
    const double C1243 = C51068 / C51253;
    const double C2019 = C51068 / C49940;
    const double C51289 = C51263 / C49932;
    const double C1014 = (-2 * C50996 * C51263) / C49932;
    const double C1013 = (C51056 * std::pow(C51064, 2)) / C49957 + C51262;
    const double C51278 = C51187 / C50007;
    const double C51277 = C51187 * C51186;
    const double C51271 = C51187 / C50003;
    const double C5337 = (2 * C50977 * C51187) / C50003;
    const double C51279 = C51190 * C51186;
    const double C39359 = C51190 / C51246;
    const double C44702 = C51190 / C50028;
    const double C51295 = C51276 / C50003;
    const double C5336 = (C51126 * std::pow(C51185, 2)) / C50005 + C51269;
    const double C49959 = C49931 * C49945;
    const double C636 =
        ((-C49941 / C49932) / C49940 -
         ((C51026 - (C49931 * C49945) / C49932) * de) / C49932) /
            C49940 -
        ((C49931 * ((-C49945 / C49932) / C49940 - (0 * de) / C49932) + C51042) *
         de) /
            C49932;
    const double C637 =
        ((-C49945 / C49932) / C49940 - (0 * de) / C49932) / C49940 -
        (0 * de) / C49932;
    const double C1364 = (-C49945 / C49932) / C49940 - (0 * de) / C49932;
    const double C49970 = C49964 - C49965;
    const double C51287 = C51259 / C49957;
    const double C51261 = C51045 / C49932;
    const double C1358 = -C51286;
    const double C50040 = C50037 - C50033;
    const double C50036 = C50001 * C50030;
    const double C36949 = C2451 * C884;
    const double C8282 = C8257 * C122;
    const double C8278 = C8257 * C133;
    const double C8272 = C8257 * C131;
    const double C8268 = C8257 * C121;
    const double C8264 = C8257 * C129;
    const double C8260 = C8257 * C120;
    const double C8482 = C8257 * C311;
    const double C8478 = C8257 * C302;
    const double C8472 = C8257 * C309;
    const double C8468 = C8257 * C301;
    const double C8670 = C8257 * C481;
    const double C8666 = C8257 * C473;
    const double C8662 = C8257 * C479;
    const double C8658 = C8257 * C472;
    const double C9264 = C8257 * C1024;
    const double C14216 = C8257 * C486;
    const double C14212 = C8257 * C476;
    const double C14777 = C8257 * C884;
    const double C14775 = C8257 * C892;
    const double C14771 = C8257 * C883;
    const double C14997 = C8257 * C1016;
    const double C14993 = C8257 * C1022;
    const double C15373 = C8257 * C1254;
    const double C15369 = C8257 * C1247;
    const double C48448 = C8257 * C6290;
    const double C48444 = C8257 * C6286;
    const double C8274 = C8258 * C311;
    const double C8270 = C8258 * C302;
    const double C8266 = C8258 * C309;
    const double C8262 = C8258 * C301;
    const double C14218 = C8258 * C892;
    const double C14214 = C8258 * C883;
    const double C14769 = C8258 * C884;
    const double C17478 = C17453 * C122;
    const double C17474 = C17453 * C133;
    const double C17468 = C17453 * C131;
    const double C17464 = C17453 * C121;
    const double C17460 = C17453 * C129;
    const double C17456 = C17453 * C120;
    const double C17678 = C17453 * C311;
    const double C17674 = C17453 * C302;
    const double C17668 = C17453 * C309;
    const double C17664 = C17453 * C301;
    const double C17866 = C17453 * C481;
    const double C17862 = C17453 * C473;
    const double C17858 = C17453 * C479;
    const double C17854 = C17453 * C472;
    const double C18460 = C17453 * C1024;
    const double C22405 = C17453 * C1022;
    const double C22401 = C17453 * C1016;
    const double C22397 = C17453 * C486;
    const double C22393 = C17453 * C476;
    const double C22815 = C17453 * C884;
    const double C22813 = C17453 * C892;
    const double C22809 = C17453 * C883;
    const double C23019 = C17453 * C1247;
    const double C23015 = C17453 * C1254;
    const double C23314 = C17453 * C6290;
    const double C23310 = C17453 * C6286;
    const double C17470 = C17454 * C311;
    const double C17466 = C17454 * C302;
    const double C17462 = C17454 * C309;
    const double C17458 = C17454 * C301;
    const double C22399 = C17454 * C892;
    const double C22395 = C17454 * C883;
    const double C22807 = C17454 * C884;
    const double C169 = C150 + C151;
    const double C168 = C148 + C149;
    const double C5676 = C5654 + C5655;
    const double C5675 = C5652 + C5653;
    const double C51293 = C51273 / C50005;
    const double C8283 = C51270 * C132;
    const double C8273 = C51270 * C142;
    const double C8269 = C51270 * C130;
    const double C8265 = C51270 * C141;
    const double C8261 = C51270 * C128;
    const double C8479 = C51270 * C310;
    const double C8469 = C51270 * C308;
    const double C8667 = C51270 * C480;
    const double C8659 = C51270 * C478;
    const double C9261 = C51270 * C1023;
    const double C14217 = C51270 * C494;
    const double C14213 = C51270 * C487;
    const double C14772 = C51270 * C891;
    const double C14998 = C51270 * C1021;
    const double C15370 = C51270 * C1255;
    const double C48445 = C51270 * C6289;
    const double C2449 =
        (((0 - (C50001 * C50002) / C50003) * ae) / C50003 - (0 * be) / C50007) /
            (2 * C50003) +
        ((C50001 * (((C51110 - (C50001 * 2 * C50008) / C50003) * ae) / C50003 -
                    C50002 / C50007) +
          C51270) *
         ae) /
            C50003 +
        (0 * ae) / C50003 - C50008 / C50005;
    const double C2474 = C2445 * C310;
    const double C2456 = C2445 * C308;
    const double C36948 = C2445 * C891;
    const double C2473 = C2450 * C302;
    const double C2467 = C2450 * C311;
    const double C2461 = C2450 * C309;
    const double C2455 = C2450 * C301;
    const double C36953 = C2450 * C892;
    const double C36947 = C2450 * C883;
    const double C37355 = C2450 * C884;
    const double C51294 = C51275 / C50003;
    const double C17448 = -C51292;
    const double C2478 = C2444 * C132;
    const double C2476 = C2444 * C130;
    const double C2470 = C2444 * C142;
    const double C2460 = C2444 * C141;
    const double C2454 = C2444 * C128;
    const double C2666 = C2444 * C310;
    const double C2658 = C2444 * C308;
    const double C2848 = C2444 * C480;
    const double C2836 = C2444 * C478;
    const double C3474 = C2444 * C1023;
    const double C36952 = C2444 * C494;
    const double C36946 = C2444 * C487;
    const double C37358 = C2444 * C891;
    const double C37546 = C2444 * C1021;
    const double C37816 = C2444 * C1255;
    const double C143 =
        (-2 * C50075 * C50083) / C50079 +
        C50075 * ((-((C50077 * C50078 + C50073 * bs[5] * std::pow(C50069, 5)) *
                     C50071 * std::pow(C50075, 2)) /
                   C49932) /
                      C50003 -
                  C50083 / C50079);
    const double C319 =
        (-(C50075 * C50072 * C50068 * C50070 * ae * ce) / C49932) / C50003 -
        (ae * C50075 * C50072 * C50068 * C50070 * ce) / C50079 -
        (C50070 * C50075 * C50083) / C50079;
    const double C490 = (-((zP - zQ) * C50075 * C50083) / C49932) / C50003;
    const double C653 =
        (-(ae * (C50070 * C50162 + C50160 * ce)) / C49932) / C50003 -
        ((C50160 + C50073 * C50068 * C50072) * C50071) / C50079 -
        ((C50070 * C50163 + C50160 * ae) * ce) / C50079 +
        C50070 * ((-(C50163 * ce) / C49932) / C50003 - (ae * C50162) / C50079 -
                  (C50070 * C50083) / C50079);
    const double C907 = (-(C50262 * C50163 * ce) / C49932) / C50003 -
                        (ae * C50262 * C50162) / C50079 -
                        (C50070 * C50262 * C50083) / C50079;
    const double C1031 =
        (-(C50083 * std::pow(C50262, 2)) / C49932) / C50003 -
        ((C50160 + C50073 * C50068 * C50072) * C50071) / C50079;
    const double C664 = C51110 * C645;
    const double C2458 = C2446 * C645;
    const double C2656 = C2445 * C645;
    const double C3030 = C2444 * C645;
    const double C8467 = C51162 * C645;
    const double C8847 = C51270 * C645;
    const double C17663 = C51162 * C645;
    const double C24913 = C24901 * C645;
    const double C665 = C117 * C646;
    const double C2463 = C2451 * C646;
    const double C2661 = C2450 * C646;
    const double C8470 = C8258 * C646;
    const double C8850 = C8257 * C646;
    const double C17666 = C17454 * C646;
    const double C18046 = C17453 * C646;
    const double C1649 = C51110 * C895;
    const double C2838 = C2445 * C895;
    const double C4250 = C2444 * C895;
    const double C8661 = C51162 * C895;
    const double C10023 = C51270 * C895;
    const double C17857 = C51162 * C895;
    const double C1652 = C117 * C896;
    const double C2843 = C2450 * C896;
    const double C8664 = C8258 * C896;
    const double C10026 = C8257 * C896;
    const double C17860 = C17454 * C896;
    const double C19222 = C17453 * C896;
    const double C663 = C117 * C639;
    const double C2457 = C2451 * C639;
    const double C2655 = C2450 * C639;
    const double C8466 = C8258 * C639;
    const double C8846 = C8257 * C639;
    const double C17662 = C17454 * C639;
    const double C18042 = C17453 * C639;
    const double C2653 = C2451 * C770;
    const double C3031 = C2450 * C770;
    const double C8848 = C8258 * C770;
    const double C18044 = C17454 * C770;
    const double C1648 = C117 * C885;
    const double C2837 = C2450 * C885;
    const double C8660 = C8258 * C885;
    const double C10022 = C8257 * C885;
    const double C17856 = C17454 * C885;
    const double C19218 = C17453 * C885;
    const double C2839 = C2451 * C886;
    const double C4251 = C2450 * C886;
    const double C5841 = C117 * C886;
    const double C10024 = C8258 * C886;
    const double C14433 = C8257 * C886;
    const double C19220 = C17454 * C886;
    const double C28345 = C17453 * C886;
    const double C1037 = C117 * C1017;
    const double C9260 = C8257 * C1017;
    const double C18456 = C17453 * C1017;
    const double C5667 = C117 * C1246;
    const double C14999 = C8257 * C1246;
    const double C23005 = C17453 * C1246;
    const double C773 = (2 * (C50070 * C50163 + C50160 * ae) +
                         C50070 * (C50163 + C50070 * C50234 + C50230 * ae) +
                         (C50160 + C50076 * C50073) * ae) /
                        C50003;
    const double C893 =
        (C50262 * (C50163 + C50070 * C50234 + C50230 * ae)) / C50003;
    const double C1162 =
        (C50070 * C50163 + C50160 * ae + C50234 * C50276) / C50003;
    const double C6117 = C117 * C1158;
    const double C14995 = C8258 * C1158;
    const double C15215 = C8257 * C1158;
    const double C22403 = C17454 * C1158;
    const double C22825 = C17453 * C1158;
    const double C37543 = C2450 * C1158;
    const double C6481 = C117 * C3745;
    const double C15371 = C8258 * C3745;
    const double C23017 = C17454 * C3745;
    const double C23189 = C17453 * C3745;
    const double C37817 = C2450 * C3745;
    const double C48327 = C8257 * C3745;
    const double C774 =
        (-2 * (C50070 * C50162 + C50160 * ce)) / C49932 -
        (C50070 * (C50070 * C50233 + C50162 + C50230 * ce)) / C49932 -
        ((C50160 + C50076 * C50073) * ce) / C49932;
    const double C894 =
        -(C50262 * (C50070 * C50233 + C50162 + C50230 * ce)) / C49932;
    const double C1163 =
        -(C50233 * C50276 + C50070 * C50162 + C50160 * ce) / C49932;
    const double C170 = C152 + C153;
    const double C172 = C156 + C157;
    const double C349 = C327 + C328;
    const double C352 = C333 + C334;
    const double C513 = C497 + C498;
    const double C515 = C501 + C502;
    const double C6125 = C6107 + C6108;
    const double C5677 = C5656 + C5657;
    const double C6311 = C6304 + C6305;
    const double C171 = C154 + C155;
    const double C50097 = C50092 / C50079;
    const double C50236 = C50075 * C50092;
    const double C50288 = C50070 * C50092;
    const double C50482 = C50262 * C50092;
    const double C144 =
        3 * ((-(C50092 * C50088) / C49932) / C50003 - C50083 / C50079) +
        C50075 *
            ((-2 * C50075 * C50092) / C50079 +
             C50075 *
                 ((-((C50086 * C50087 + C50073 * bs[6] * std::pow(C50066, 6)) *
                     C50071 * C50088) /
                   C49932) /
                      C50003 -
                  C50092 / C50079));
    const double C320 =
        (-((C50072 * C50068 * C50131 + C50078 * C50077 * C50131 * C50088) *
           ce) /
         C49932) /
            C50003 -
        (ae * (C50078 * C50077 * C50132 * C50088 + C50072 * C50068 * C50132)) /
            C50079 +
        C50070 * ((-(C50092 * C50088) / C49932) / C50003 - C50083 / C50079);
    const double C491 =
        (zP - zQ) * ((-(C50092 * C50088) / C49932) / C50003 - C50083 / C50079);
    const double C654 =
        (-(ae * (C50070 * C50165 + C50166 * ce)) / C49932) / C50003 -
        (C50075 * C50083) / C50079 -
        ((C50070 * C50167 + C50166 * ae) * ce) / C50079 +
        C50070 * ((-(C50167 * ce) / C49932) / C50003 - (ae * C50165) / C50079 -
                  (C50070 * C50075 * C50092) / C50079);
    const double C781 =
        2 * ((-(C50163 * ce) / C49932) / C50003 - (ae * C50162) / C50079 -
             (C50070 * C50083) / C50079) -
        (ae * (C50070 * C50233 + C50162 + C50230 * ce)) / C50079 -
        ((C50163 + C50070 * C50234 + C50230 * ae) * ce) / C50079 +
        C50070 *
            ((-(ae * C50233) / C49932) / C50003 - C50083 / C50079 -
             (C50234 * ce) / C50079 +
             C50070 * ((-(C50137 * ce) / C49932) / C50003 -
                       (ae * C50136) / C50079 - (C50070 * C50092) / C50079));
    const double C908 = (-(ae * C50262 * C50233) / C49932) / C50003 -
                        (C50262 * C50083) / C50079 -
                        (C50262 * C50234 * ce) / C50079 +
                        C50070 * ((-(C50262 * C50137 * ce) / C49932) / C50003 -
                                  (ae * C50262 * C50136) / C50079 -
                                  (C50070 * C50262 * C50092) / C50079);
    const double C1170 =
        (-((C50163 + C50137 * C50276) * ce) / C49932) / C50003 -
        (ae * (C50136 * C50276 + C50162)) / C50079 +
        C50070 * ((-(C50092 * C50276) / C49932) / C50003 - C50083 / C50079);
    const double C1259 =
        (-2 * C50262 * C50083) / C50079 +
        C50262 * ((-(C50092 * C50276) / C49932) / C50003 - C50083 / C50079);
    const double C50102 = C50101 * C50088;
    const double C50112 = C50101 / C50079;
    const double C50108 = C50075 * C50101;
    const double C50373 = C50070 * C50101;
    const double C50486 = C50262 * C50101;
    const double C50517 = C50101 * C50276;
    const double C50188 = C50075 * C50185;
    const double C50196 = 3 * C50185;
    const double C50249 = C50185 * ae;
    const double C50247 = C50070 * C50185;
    const double C50246 = C50185 * ce;
    const double C771 =
        2 * C50070 * C50173 + C50070 * (C50173 + C50185 * C50073);
    const double C888 = C50262 * (C50173 + C50185 * C50073);
    const double C1245 =
        2 * C50262 * C50173 + C50262 * (C50173 + C50185 * C50276);
    const double C6288 =
        3 * (C50173 + C50185 * C50276) +
        C50262 * (2 * C50262 * C50185 + C50262 * (C50185 + C50206 * C50276));
    const double C50329 = C50321 + C50322;
    const double C50328 = C50178 + C50320;
    const double C50330 = C50319 * ae;
    const double C50327 = C50319 * ce;
    const double C50432 = 2 * C50319;
    const double C3743 =
        2 * C50262 * C50239 + C50262 * (C50239 + C50319 * C50276);
    const double C6464 =
        3 * (C50239 + C50319 * C50276) +
        C50262 * (2 * C50262 * C50319 + C50262 * (C50319 + C50443 * C50276));
    const double C50326 = C50317 + C50318;
    const double C50938 = C50178 + C50937;
    const double C6306 = C117 * C6287;
    const double C50399 = C50070 * C50392;
    const double C50560 = 2 * C50392;
    const double C50547 = C50392 * ce;
    const double C50623 = C50262 * C50392;
    const double C50850 = C50392 * C50276;
    const double C50400 = C50391 * ae;
    const double C50398 = C50070 * C50391;
    const double C50397 = C50391 * ce;
    const double C50558 = 3 * C50391;
    const double C3744 =
        2 * C50262 * C50300 + C50262 * (C50300 + C50391 * C50276);
    const double C23180 =
        3 * (C50300 + C50391 * C50276) +
        C50262 * (2 * C50262 * C50391 + C50262 * (C50391 + C50574 * C50276));
    const double C50950 = C50291 + C50949;
    const double C23312 = C17454 * C6463;
    const double C40029 = C117 * C6463;
    const double C48446 = C8258 * C6463;
    const double C50396 = C50070 * C50389;
    const double C50552 = -2 * C50389;
    const double C50546 = ae * C50389;
    const double C50621 = C50262 * C50389;
    const double C50847 = C50389 * C50276;
    const double C50956 = C50262 * C50955;
    const double C135 = (3 * (C50163 + C50137 * C50088) +
                         C50075 * (2 * C50167 + C50075 * C50174)) /
                        C50003;
    const double C312 = (C50070 * (2 * C50167 + C50075 * C50174) +
                         (2 * C50166 + C50075 * C50173) * ae) /
                        C50003;
    const double C482 = (C50262 * (2 * C50167 + C50075 * C50174)) / C50003;
    const double C647 =
        (C50163 + C50137 * C50088 + C50070 * (C50070 * C50174 + C50173 * ae) +
         C50070 * C50173 * ae) /
        C50003;
    const double C899 = (C50262 * (C50070 * C50174 + C50173 * ae)) / C50003;
    const double C1025 = (C50163 + C50137 * C50088 + C50174 * C50276) / C50003;
    const double C1251 =
        (2 * C50262 * C50174 + C50262 * (C50174 + C50151 * C50276)) / C50003;
    const double C50243 = C50240 + C50241;
    const double C50323 = C50314 / C49932;
    const double C5668 = C51110 * C1253;
    const double C15000 = C51270 * C1253;
    const double C6307 = C51110 * C6291;
    const double C50305 = C50070 * C50301;
    const double C50380 = 2 * C50301;
    const double C50370 = C50301 * ce;
    const double C3753 =
        (2 * C50262 * C50234 + C50262 * (C50234 + C50301 * C50276)) / C50003;
    const double C6465 =
        (3 * (C50234 + C50301 * C50276) +
         C50262 * (2 * C50262 * C50301 + C50262 * (C50301 + C50392 * C50276))) /
        C50003;
    const double C50395 = -C50385;
    const double C50490 = C50487 / C49932;
    const double C6608 =
        (4 * (2 * C50262 * C50137 + C50262 * C50833) +
         C50262 * (3 * C50833 + C50262 * (2 * C50484 + C50262 * C50651))) /
        C50003;
    const double C6617 = C6613 + C6614;
    const double C134 =
        (-3 * (C50136 * C50088 + C50162)) / C49932 +
        C50075 * ((-2 * C50165) / C49932 - (C50075 * C50172) / C49932);
    const double C313 =
        C50070 * ((-2 * C50165) / C49932 - (C50075 * C50172) / C49932) -
        ((2 * C50166 + C50075 * C50173) * ce) / C49932;
    const double C483 =
        C50262 * ((-2 * C50165) / C49932 - (C50075 * C50172) / C49932);
    const double C648 = -(C50070 * (C50070 * C50172 + C50173 * ce) +
                          C50136 * C50088 + C50162 + C50070 * C50173 * ce) /
                        C49932;
    const double C900 = -(C50262 * (C50070 * C50172 + C50173 * ce)) / C49932;
    const double C1026 = -(C50172 * C50276 + C50136 * C50088 + C50162) / C49932;
    const double C1250 = (-2 * C50262 * C50172) / C49932 -
                         (C50262 * (C50150 * C50276 + C50172)) / C49932;
    const double C50187 = C50182 / C49932;
    const double C50242 = C50237 + C50238;
    const double C50324 = C50315 / C50079;
    const double C5669 = C117 * C1252;
    const double C15003 = C8257 * C1252;
    const double C23009 = C17453 * C1252;
    const double C6308 = C117 * C6292;
    const double C50304 = C50070 * C50298;
    const double C50374 = -2 * C50298;
    const double C50369 = ae * C50298;
    const double C3751 = (-2 * C50262 * C50233) / C49932 -
                         (C50262 * (C50298 * C50276 + C50233)) / C49932;
    const double C6466 =
        (-3 * (C50298 * C50276 + C50233)) / C49932 +
        C50262 * ((-2 * C50262 * C50298) / C49932 -
                  (C50262 * (C50389 * C50276 + C50298)) / C49932);
    const double C50491 = C50488 / C50079;
    const double C50855 = C50853 / C49932;
    const double C6607 =
        4 * ((-2 * C50262 * C50136) / C49932 - (C50262 * C50830) / C49932) +
        C50262 *
            ((-3 * C50830) / C49932 +
             C50262 * ((-2 * C50485) / C49932 - (C50262 * C50652) / C49932));
    const double C50119 = C50118 * C50088;
    const double C50428 = C50075 * C50118;
    const double C50550 = C50070 * C50118;
    const double C50626 = C50262 * C50118;
    const double C50650 = C50118 * C50276;
    const double C50218 = C50075 * C50215;
    const double C50349 = C50070 * C50215;
    const double C6294 =
        (3 * (C50174 + C50151 * C50276) +
         C50262 * (2 * C50262 * C50151 + C50262 * (C50151 + C50215 * C50276))) /
        C50003;
    const double C50453 = C50445 + C50446;
    const double C50583 = C50070 * C50575;
    const double C50216 = C50075 * C50213;
    const double C50345 = C50070 * C50213;
    const double C6293 =
        (-3 * (C50150 * C50276 + C50172)) / C49932 +
        C50262 * ((-2 * C50262 * C50150) / C49932 -
                  (C50262 * (C50213 * C50276 + C50150)) / C49932);
    const double C50450 = C50441 + C50442;
    const double C50580 = C50070 * C50572;
    const double C162 = C117 * C123;
    const double C8284 = C8257 * C123;
    const double C17480 = C17453 * C123;
    const double C339 = C117 * C303;
    const double C2479 = C2450 * C303;
    const double C8280 = C8258 * C303;
    const double C8484 = C8257 * C303;
    const double C17476 = C17454 * C303;
    const double C17680 = C17453 * C303;
    const double C505 = C117 * C474;
    const double C8674 = C8257 * C474;
    const double C17870 = C17453 * C474;
    const double C671 = C117 * C640;
    const double C2471 = C2451 * C640;
    const double C2667 = C2450 * C640;
    const double C8476 = C8258 * C640;
    const double C8854 = C8257 * C640;
    const double C17672 = C17454 * C640;
    const double C18050 = C17453 * C640;
    const double C1654 = C117 * C887;
    const double C2849 = C2450 * C887;
    const double C8668 = C8258 * C887;
    const double C10030 = C8257 * C887;
    const double C17864 = C17454 * C887;
    const double C19226 = C17453 * C887;
    const double C1041 = C117 * C1018;
    const double C9268 = C8257 * C1018;
    const double C18464 = C17453 * C1018;
    const double C3475 = C2450 * C1159;
    const double C5488 = C117 * C1159;
    const double C9262 = C8258 * C1159;
    const double C15223 = C8257 * C1159;
    const double C18458 = C17454 * C1159;
    const double C23811 = C17453 * C1159;
    const double C14779 = C8258 * C3298;
    const double C22817 = C17454 * C3298;
    const double C37367 = C2450 * C3298;
    const double C37353 = C2451 * C3298;
    const double C6121 = C117 * C3460;
    const double C15217 = C8258 * C3460;
    const double C22831 = C17453 * C3460;
    const double C22823 = C17454 * C3460;
    const double C37541 = C2451 * C3460;
    const double C37701 = C2450 * C3460;
    const double C48014 = C8257 * C3460;
    const double C40112 = C117 * C6604;
    const double C50306 = C50303 / C50003;
    const double C50214 = C50205 + C50211;
    const double C50355 = C50185 + C50348;
    const double C50357 = C50347 * ae;
    const double C50354 = C50347 * ce;
    const double C50461 = C50452 * ae;
    const double C50459 = C50070 * C50452;
    const double C50458 = C50452 * ce;
    const double C50590 = C50557 + C50582;
    const double C50589 = C50581 / C49932;
    const double C50189 = C50186 + C50181;
    const double C50351 = C50342 / C49932;
    const double C50448 = -C50437;
    const double C50506 = C50503 / C49932;
    const double C6606 =
        (4 * (2 * C50262 * C50180 + C50262 * C50827) +
         C50262 *
             (3 * C50827 +
              C50262 * (2 * C50500 + C50262 * (C50200 + C50434 * C50276)))) /
        C50003;
    const double C50587 = C50579 / C50003;
    const double C50638 = -C50634;
    const double C50657 = C50654 / C49932;
    const double C50861 = C50859 + C50860;
    const double C50183 = C50177 / C49932;
    const double C50202 = C50193 / C49932;
    const double C50352 = C50343 / C50079;
    const double C50507 = C50504 / C50079;
    const double C6605 =
        4 * ((-2 * C50262 * C50176) / C49932 - (C50262 * C50824) / C49932) +
        C50262 * ((-3 * C50824) / C49932 +
                  C50262 * ((-2 * C50501) / C49932 -
                            (C50262 * (C50430 * C50276 + C50194)) / C49932));
    const double C50658 = C50655 / C50079;
    const double C50856 = C50854 / C49932;
    const double C51280 = C51241 / C50005;
    const double C51282 = C51245 / C50003;
    const double C2447 = -C51281;
    const double C51284 = C51250 / C49957;
    const double C51252 = C51000 / C49932;
    const double C1490 = -C51283;
    const double C51290 = C51264 / C49957;
    const double C51266 = C51071 / C49932;
    const double C1775 = -C51289;
    const double C51296 = C51277 / C50005;
    const double C51297 = C51279 / C50003;
    const double C34007 = -C51295;
    const double C49963 = C49959 / C49932;
    const double C768 =
        (C49970 / C49940 - (0 * de) / C49932) / C49940 - (0 * de) / C49932;
    const double C1494 = C49970 / C49940 - (0 * de) / C49932;
    const double C51301 = C51257 - C51287;
    const double C51288 = C51260 - C51261;
    const double C635 =
        ((-(0 * de) / C49932) / C49940 -
         ((0 - (C49931 * C49941) / C49932) * de) / C49932) /
            C49940 -
        ((C49931 * ((-C49941 / C49932) / C49940 -
                    ((C51026 - (C49931 * C49945) / C49932) * de) / C49932) +
          C1358) *
         de) /
            C49932 +
        (-C49945 / C49932) / C49940 - (0 * de) / C49932;
    const double C20287 =
        (C50040 / C50028 - (0 * be) / C50003) / C50028 + (0 * ae) / C50003;
    const double C24906 = C50040 / C50028 - (0 * be) / C50003;
    const double C50039 = C50036 / C50003;
    const double C8297 = C8270 + C8271;
    const double C8293 = C8262 + C8263;
    const double C14227 = C14214 + C14215;
    const double C17493 = C17466 + C17467;
    const double C17489 = C17458 + C17459;
    const double C22410 = C22395 + C22396;
    const double C179 = C169 * C51026;
    const double C326 = C169 * C51254;
    const double C660 = C169 * C630;
    const double C1367 = C169 * C1358;
    const double C178 = C168 * C118;
    const double C325 = C168 * C298;
    const double C5684 = C5676 * C51026;
    const double C6106 = C5676 * C630;
    const double C6473 = C5676 * C51254;
    const double C7132 = C5676 * C1358;
    const double C5683 = C5675 * C118;
    const double C6472 = C5675 * C298;
    const double C51303 = C51267 - C51293;
    const double C8303 = C8282 + C8283;
    const double C8298 = C8272 + C8273;
    const double C8296 = C8268 + C8269;
    const double C8294 = C8264 + C8265;
    const double C8292 = C8260 + C8261;
    const double C8498 = C8478 + C8479;
    const double C8493 = C8468 + C8469;
    const double C8686 = C8666 + C8667;
    const double C8682 = C8658 + C8659;
    const double C14228 = C14216 + C14217;
    const double C14226 = C14212 + C14213;
    const double C14786 = C14771 + C14772;
    const double C15014 = C14997 + C14998;
    const double C15377 = C15369 + C15370;
    const double C48454 = C48444 + C48445;
    const double C2483 = C2449 * C133;
    const double C2477 = C2449 * C122;
    const double C2475 = C2449 * C121;
    const double C2469 = C2449 * C131;
    const double C2459 = C2449 * C129;
    const double C2453 = C2449 * C120;
    const double C2671 = C2449 * C311;
    const double C2665 = C2449 * C302;
    const double C2663 = C2449 * C309;
    const double C2657 = C2449 * C301;
    const double C2853 = C2449 * C481;
    const double C2847 = C2449 * C473;
    const double C2841 = C2449 * C479;
    const double C2835 = C2449 * C472;
    const double C3035 = C2449 * C646;
    const double C3029 = C2449 * C639;
    const double C3479 = C2449 * C1024;
    const double C3473 = C2449 * C1017;
    const double C4255 = C2449 * C896;
    const double C4249 = C2449 * C885;
    const double C36951 = C2449 * C486;
    const double C36945 = C2449 * C476;
    const double C37365 = C2449 * C884;
    const double C37363 = C2449 * C892;
    const double C37357 = C2449 * C883;
    const double C37545 = C2449 * C1016;
    const double C37539 = C2449 * C1022;
    const double C37699 = C2449 * C1158;
    const double C37821 = C2449 * C1254;
    const double C37815 = C2449 * C1247;
    const double C2499 = C2473 + C2474;
    const double C2490 = C2455 + C2456;
    const double C36958 = C36947 + C36948;
    const double C51304 = C51274 - C51294;
    const double C17479 = C17448 * C132;
    const double C17469 = C17448 * C142;
    const double C17465 = C17448 * C130;
    const double C17461 = C17448 * C141;
    const double C17457 = C17448 * C128;
    const double C17675 = C17448 * C310;
    const double C17665 = C17448 * C308;
    const double C17863 = C17448 * C480;
    const double C17855 = C17448 * C478;
    const double C18043 = C17448 * C645;
    const double C18457 = C17448 * C1023;
    const double C19219 = C17448 * C895;
    const double C22402 = C17448 * C1021;
    const double C22398 = C17448 * C494;
    const double C22394 = C17448 * C487;
    const double C22810 = C17448 * C891;
    const double C23020 = C17448 * C1255;
    const double C23006 = C17448 * C1253;
    const double C23311 = C17448 * C6289;
    const double C159 = C51110 * C143;
    const double C2484 = C2444 * C143;
    const double C8279 = C51270 * C143;
    const double C17475 = C17448 * C143;
    const double C330 = C51110 * C319;
    const double C2462 = C2445 * C319;
    const double C2664 = C2444 * C319;
    const double C8267 = C51162 * C319;
    const double C8473 = C51270 * C319;
    const double C17463 = C51162 * C319;
    const double C17669 = C17448 * C319;
    const double C500 = C51110 * C490;
    const double C2842 = C2444 * C490;
    const double C8663 = C51270 * C490;
    const double C17859 = C17448 * C490;
    const double C6110 = C51110 * C907;
    const double C14219 = C51162 * C907;
    const double C14776 = C51270 * C907;
    const double C22400 = C51162 * C907;
    const double C22814 = C17448 * C907;
    const double C36954 = C2445 * C907;
    const double C37364 = C2444 * C907;
    const double C5659 = C51110 * C1031;
    const double C14994 = C51270 * C1031;
    const double C22406 = C17448 * C1031;
    const double C37540 = C2444 * C1031;
    const double C683 = C663 + C664;
    const double C2491 = C2457 + C2458;
    const double C2678 = C2655 + C2656;
    const double C8492 = C8466 + C8467;
    const double C8862 = C8846 + C8847;
    const double C17688 = C17662 + C17663;
    const double C1666 = C1648 + C1649;
    const double C2860 = C2837 + C2838;
    const double C8683 = C8660 + C8661;
    const double C10038 = C10022 + C10023;
    const double C17879 = C17856 + C17857;
    const double C1049 = C1037 + C1038;
    const double C9276 = C9260 + C9261;
    const double C6112 = C51110 * C893;
    const double C14778 = C51270 * C893;
    const double C14770 = C51162 * C893;
    const double C22816 = C17448 * C893;
    const double C22808 = C51162 * C893;
    const double C31569 = C24901 * C893;
    const double C36950 = C2446 * C893;
    const double C37366 = C2444 * C893;
    const double C37356 = C2445 * C893;
    const double C6118 = C51110 * C1162;
    const double C14996 = C51162 * C1162;
    const double C15216 = C51270 * C1162;
    const double C22404 = C51162 * C1162;
    const double C22826 = C17448 * C1162;
    const double C37544 = C2445 * C1162;
    const double C37700 = C2444 * C1162;
    const double C6113 = C117 * C894;
    const double C14781 = C8257 * C894;
    const double C14773 = C8258 * C894;
    const double C22819 = C17453 * C894;
    const double C22811 = C17454 * C894;
    const double C36955 = C2451 * C894;
    const double C37371 = C2449 * C894;
    const double C37361 = C2450 * C894;
    const double C6119 = C117 * C1163;
    const double C14991 = C8258 * C1163;
    const double C15219 = C8257 * C1163;
    const double C22407 = C17454 * C1163;
    const double C22829 = C17453 * C1163;
    const double C37537 = C2450 * C1163;
    const double C37705 = C2449 * C1163;
    const double C180 = C170 * C118;
    const double C331 = C170 * C298;
    const double C182 = C172 * C118;
    const double C337 = C172 * C298;
    const double C359 = C349 * C299;
    const double C661 = C349 * C636;
    const double C1368 = C349 * C1364;
    const double C361 = C352 * C299;
    const double C669 = C352 * C636;
    const double C1372 = C352 * C1364;
    const double C521 = C513 * C118;
    const double C1910 = C513 * C298;
    const double C523 = C515 * C118;
    const double C1914 = C515 * C298;
    const double C6133 = C6125 * C636;
    const double C6474 = C6125 * C299;
    const double C7133 = C6125 * C1364;
    const double C5685 = C5677 * C118;
    const double C6476 = C5677 * C298;
    const double C6315 = C6311 * C118;
    const double C6484 = C6311 * C298;
    const double C181 = C171 * C51026;
    const double C332 = C171 * C51254;
    const double C668 = C171 * C630;
    const double C1371 = C171 * C1358;
    const double C3469 =
        (-(C50092 * C50276) / C49932) / C50003 - C50083 / C50079 -
        (ae * (C50298 * C50276 + C50233)) / C50079 -
        ((C50234 + C50301 * C50276) * ce) / C50079 +
        C50070 * ((-((C50137 + C50142 * C50276) * ce) / C49932) / C50003 -
                  (ae * (C50141 * C50276 + C50136)) / C50079 +
                  C50070 * ((-(C50101 * C50276) / C49932) / C50003 - C50097));
    const double C909 = (-(C50262 * C50167 * ce) / C49932) / C50003 -
                        (ae * C50262 * C50165) / C50079 -
                        (C50070 * C50262 * C50236) / C50079;
    const double C1032 = (-(C50236 * std::pow(C50262, 2)) / C49932) / C50003 -
                         (C50075 * C50083) / C50079;
    const double C50297 = C50288 / C50079;
    const double C161 = C51110 * C144;
    const double C8289 = C51270 * C144;
    const double C17485 = C17448 * C144;
    const double C336 = C51110 * C320;
    const double C2468 = C2445 * C320;
    const double C2672 = C2444 * C320;
    const double C8275 = C51162 * C320;
    const double C8483 = C51270 * C320;
    const double C17471 = C51162 * C320;
    const double C17679 = C17448 * C320;
    const double C504 = C51110 * C491;
    const double C2854 = C2444 * C491;
    const double C8671 = C51270 * C491;
    const double C17867 = C17448 * C491;
    const double C666 = C51110 * C654;
    const double C2464 = C2446 * C654;
    const double C2662 = C2445 * C654;
    const double C3036 = C2444 * C654;
    const double C8471 = C51162 * C654;
    const double C8851 = C51270 * C654;
    const double C17667 = C51162 * C654;
    const double C18047 = C17448 * C654;
    const double C24919 = C24901 * C654;
    const double C6114 = C51110 * C908;
    const double C14782 = C51270 * C908;
    const double C14774 = C51162 * C908;
    const double C22820 = C17448 * C908;
    const double C22812 = C51162 * C908;
    const double C31575 = C24901 * C908;
    const double C36956 = C2446 * C908;
    const double C37372 = C2444 * C908;
    const double C37362 = C2445 * C908;
    const double C6120 = C51110 * C1170;
    const double C14992 = C51162 * C1170;
    const double C15220 = C51270 * C1170;
    const double C22408 = C51162 * C1170;
    const double C22830 = C17448 * C1170;
    const double C37538 = C2445 * C1170;
    const double C37706 = C2444 * C1170;
    const double C6303 = C51110 * C1259;
    const double C15374 = C51270 * C1259;
    const double C23016 = C17448 * C1259;
    const double C37822 = C2444 * C1259;
    const double C50103 = C50102 / C49932;
    const double C50113 = -2 * C50108;
    const double C50316 = C50070 * C50108;
    const double C50424 = C50108 / C50079;
    const double C50498 = C50262 * C50108;
    const double C1171 =
        (-((C50167 + C50180 * C50276) * ce) / C49932) / C50003 -
        (ae * (C50176 * C50276 + C50165)) / C50079 +
        C50070 * ((-(C50108 * C50276) / C49932) / C50003 - C50236 / C50079);
    const double C1258 =
        (-2 * C50262 * C50236) / C50079 +
        C50262 * ((-(C50108 * C50276) / C49932) / C50003 - C50236 / C50079);
    const double C50387 = C50373 / C50079;
    const double C50489 = C50070 * C50486;
    const double C50622 = C50486 / C50079;
    const double C50667 = -2 * C50486;
    const double C50518 = C50517 / C49932;
    const double C50191 = C50184 + C50188;
    const double C50251 = C50248 + C50249;
    const double C1160 = C50070 * C50173 + C50247 * C50276;
    const double C7126 =
        2 * C50262 * C50247 + C50262 * (C50247 + C50347 * C50276);
    const double C50250 = C50245 + C50246;
    const double C2669 = C2451 * C771;
    const double C8856 = C8258 * C771;
    const double C18052 = C17454 * C771;
    const double C2851 = C2451 * C888;
    const double C10032 = C8258 * C888;
    const double C11576 = C117 * C888;
    const double C19228 = C17454 * C888;
    const double C5671 = C117 * C1245;
    const double C50333 = C50070 * C50329;
    const double C50433 = 2 * C50329;
    const double C50425 = C50329 * ce;
    const double C3017 = 3 * (C50166 + C50178 * C50073) +
                         C50070 * (2 * C50239 + C50070 * C50328);
    const double C3300 = C50262 * (2 * C50239 + C50070 * C50328);
    const double C3461 = C50166 + C50178 * C50073 + C50328 * C50276;
    const double C3742 =
        2 * C50262 * C50328 + C50262 * (C50328 + C50452 * C50276);
    const double C6487 = C117 * C3743;
    const double C15001 = C8258 * C3743;
    const double C23007 = C17454 * C3743;
    const double C50332 = C50070 * C50326;
    const double C50429 = -2 * C50326;
    const double C50423 = ae * C50326;
    const double C6603 =
        4 * (2 * C50262 * C50178 + C50262 * C50938) +
        C50262 * (3 * C50938 + C50262 * (2 * C50262 * C50197 +
                                         C50262 * (C50197 + C50431 * C50276)));
    const double C50406 = C50142 + C50399;
    const double C50566 = C50547 / C50079;
    const double C50628 = C50623 * ce;
    const double C50851 = C50301 + C50850;
    const double C50405 = C50379 + C50398;
    const double C50404 = C50397 / C49932;
    const double C23191 = C17454 * C3744;
    const double C37819 = C2451 * C3744;
    const double C39823 = C117 * C3744;
    const double C48329 = C8258 * C3744;
    const double C23303 =
        4 * (2 * C50262 * C50291 + C50262 * C50950) +
        C50262 * (3 * C50950 + C50262 * (2 * C50262 * C50377 +
                                         C50262 * (C50377 + C50555 * C50276)));
    const double C50403 = C50396 + C50141;
    const double C50571 = C50552 / C49932;
    const double C50565 = C50546 / C49932;
    const double C50627 = ae * C50621;
    const double C50848 = C50847 + C50298;
    const double C50957 = C50954 + C50956;
    const double C163 = C51110 * C135;
    const double C8285 = C51270 * C135;
    const double C17481 = C17448 * C135;
    const double C340 = C51110 * C312;
    const double C2480 = C2445 * C312;
    const double C8281 = C51162 * C312;
    const double C8485 = C51270 * C312;
    const double C17477 = C51162 * C312;
    const double C17681 = C17448 * C312;
    const double C506 = C51110 * C482;
    const double C8675 = C51270 * C482;
    const double C17871 = C17448 * C482;
    const double C672 = C51110 * C647;
    const double C2472 = C2446 * C647;
    const double C2668 = C2445 * C647;
    const double C8477 = C51162 * C647;
    const double C8855 = C51270 * C647;
    const double C17673 = C51162 * C647;
    const double C18051 = C17448 * C647;
    const double C24927 = C24901 * C647;
    const double C1655 = C51110 * C899;
    const double C2850 = C2445 * C899;
    const double C8669 = C51162 * C899;
    const double C10031 = C51270 * C899;
    const double C17865 = C51162 * C899;
    const double C19227 = C17448 * C899;
    const double C1042 = C51110 * C1025;
    const double C9269 = C51270 * C1025;
    const double C18465 = C17448 * C1025;
    const double C5672 = C51110 * C1251;
    const double C775 = (2 * (C50070 * C50167 + C50166 * ae) +
                         C50070 * (C50167 + C50070 * C50243 + C50239 * ae) +
                         (C50166 + C50178 * C50073) * ae) /
                        C50003;
    const double C897 =
        (C50262 * (C50167 + C50070 * C50243 + C50239 * ae)) / C50003;
    const double C1164 =
        (C50070 * C50167 + C50166 * ae + C50243 * C50276) / C50003;
    const double C3749 =
        (2 * C50262 * C50243 + C50262 * (C50243 + C50329 * C50276)) / C50003;
    const double C50331 = -C50323;
    const double C5679 = C5667 + C5668;
    const double C15015 = C14999 + C15000;
    const double C6312 = C6306 + C6307;
    const double C50308 = C50137 + C50305;
    const double C50384 = C50370 / C50079;
    const double C6482 = C51110 * C3753;
    const double C15372 = C51162 * C3753;
    const double C23018 = C51162 * C3753;
    const double C23190 = C17448 * C3753;
    const double C37818 = C2445 * C3753;
    const double C48328 = C51270 * C3753;
    const double C23313 = C51162 * C6465;
    const double C40030 = C51110 * C6465;
    const double C48447 = C51162 * C6465;
    const double C50402 = C50395 / C50003;
    const double C50493 = -C50490;
    const double C40113 = C51110 * C6608;
    const double C6619 = C6617 * C118;
    const double C40032 = C6617 * C298;
    const double C160 = C117 * C134;
    const double C8288 = C8257 * C134;
    const double C17484 = C17453 * C134;
    const double C341 = C117 * C313;
    const double C2485 = C2450 * C313;
    const double C8276 = C8258 * C313;
    const double C8488 = C8257 * C313;
    const double C17472 = C17454 * C313;
    const double C17684 = C17453 * C313;
    const double C507 = C117 * C483;
    const double C8678 = C8257 * C483;
    const double C17874 = C17453 * C483;
    const double C673 = C117 * C648;
    const double C2465 = C2451 * C648;
    const double C2673 = C2450 * C648;
    const double C8480 = C8258 * C648;
    const double C8858 = C8257 * C648;
    const double C17676 = C17454 * C648;
    const double C18054 = C17453 * C648;
    const double C1658 = C117 * C900;
    const double C2855 = C2450 * C900;
    const double C8672 = C8258 * C900;
    const double C10034 = C8257 * C900;
    const double C17868 = C17454 * C900;
    const double C19230 = C17453 * C900;
    const double C1043 = C117 * C1026;
    const double C9272 = C8257 * C1026;
    const double C18468 = C17453 * C1026;
    const double C5673 = C117 * C1250;
    const double C782 =
        2 * ((-(C50167 * ce) / C49932) / C50003 - (ae * C50165) / C50079 -
             (C50070 * C50236) / C50079) -
        (ae * (C50070 * C50242 + C50165 + C50239 * ce)) / C50079 -
        ((C50167 + C50070 * C50243 + C50239 * ae) * ce) / C50079 +
        C50070 *
            ((-(ae * C50242) / C49932) / C50003 - C50236 / C50079 -
             (C50243 * ce) / C50079 +
             C50070 * ((-(C50180 * ce) / C49932) / C50003 -
                       (ae * C50176) / C50079 - (C50070 * C50108) / C50079));
    const double C910 = (-(ae * C50262 * C50242) / C49932) / C50003 -
                        (C50262 * C50236) / C50079 -
                        (C50262 * C50243 * ce) / C50079 +
                        C50070 * ((-(C50262 * C50180 * ce) / C49932) / C50003 -
                                  (ae * C50262 * C50176) / C50079 -
                                  (C50070 * C50262 * C50108) / C50079);
    const double C776 =
        (-2 * (C50070 * C50165 + C50166 * ce)) / C49932 -
        (C50070 * (C50070 * C50242 + C50165 + C50239 * ce)) / C49932 -
        ((C50166 + C50178 * C50073) * ce) / C49932;
    const double C898 =
        -(C50262 * (C50070 * C50242 + C50165 + C50239 * ce)) / C49932;
    const double C1165 =
        -(C50242 * C50276 + C50070 * C50165 + C50166 * ce) / C49932;
    const double C3747 = (-2 * C50262 * C50242) / C49932 -
                         (C50262 * (C50326 * C50276 + C50242)) / C49932;
    const double C50307 = C50304 + C50136;
    const double C50388 = C50374 / C49932;
    const double C50383 = C50369 / C49932;
    const double C6485 = C117 * C3751;
    const double C15375 = C8258 * C3751;
    const double C23013 = C17454 * C3751;
    const double C23193 = C17453 * C3751;
    const double C37823 = C2450 * C3751;
    const double C48331 = C8257 * C3751;
    const double C23316 = C17454 * C6466;
    const double C40033 = C117 * C6466;
    const double C48450 = C8258 * C6466;
    const double C40114 = C117 * C6607;
    const double C50120 = C50119 / C49932;
    const double C50439 = C50070 * C50428;
    const double C50502 = C50262 * C50428;
    const double C50523 = C50428 * C50276;
    const double C50569 = C50550 / C50079;
    const double C50631 = C50070 * C50626;
    const double C50653 = C50650 / C49932;
    const double C50221 = C50207 + C50218;
    const double C50356 = C50349 + C50350;
    const double C50460 = C50070 * C50453;
    const double C6467 =
        (3 * (C50243 + C50329 * C50276) +
         C50262 * (2 * C50262 * C50329 + C50262 * (C50329 + C50453 * C50276))) /
        C50003;
    const double C50591 = C50147 + C50583;
    const double C50219 = C50216 / C49932;
    const double C50353 = C50345 + C50346;
    const double C50457 = C50070 * C50450;
    const double C6468 =
        (-3 * (C50326 * C50276 + C50242)) / C49932 +
        C50262 * ((-2 * C50262 * C50326) / C49932 -
                  (C50262 * (C50450 * C50276 + C50326)) / C49932);
    const double C50588 = C50580 + C50146;
    const double C50309 = C50306 - C50296;
    const double C50217 = C50075 * C50214;
    const double C50257 = C50214 * ae;
    const double C50255 = C50070 * C50214;
    const double C50254 = C50214 * ce;
    const double C3018 = 3 * (C50173 + C50185 * C50073) +
                         C50070 * (2 * C50247 + C50070 * C50355);
    const double C3462 = C50173 + C50185 * C50073 + C50355 * C50276;
    const double C4244 = C50262 * (2 * C50247 + C50070 * C50355);
    const double C50466 = C50432 + C50459;
    const double C50465 = C50458 / C49932;
    const double C50598 = C50590 * ae;
    const double C50596 = C50070 * C50590;
    const double C50595 = C50590 * ce;
    const double C136 = (4 * (2 * C50167 + C50075 * C50174) +
                         C50075 * (3 * C50174 + C50075 * C50189)) /
                        C50003;
    const double C484 = (C50262 * (3 * C50174 + C50075 * C50189)) / C50003;
    const double C1027 =
        (2 * C50167 + C50075 * C50174 + C50189 * C50276) / C50003;
    const double C50358 = -C50351;
    const double C50456 = C50448 / C50003;
    const double C50509 = -C50506;
    const double C50593 = C50587 - C50568;
    const double C50640 = C50638 / C50003;
    const double C50660 = -C50657;
    const double C40108 =
        (5 * (3 * C50833 + C50262 * C50861) +
         C50262 * (4 * C50861 +
                   C50262 * (3 * C50651 +
                             C50262 * (2 * C50624 +
                                       C50262 * (C50147 + C50208 * C50276))))) /
        C50003;
    const double C50190 = C50187 - C50183;
    const double C50857 = C50855 - C50856;
    const double C51298 = C51240 - C51280;
    const double C51299 = C51244 - C51282;
    const double C51300 = C51249 - C51284;
    const double C51285 = C51251 - C51252;
    const double C51302 = C51262 - C51290;
    const double C51291 = C51265 - C51266;
    const double C51305 = C51269 - C51296;
    const double C51306 = C51278 - C51297;
    const double C49968 = C51026 - C49963;
    const double C1503 = C171 * C51301;
    const double C1497 = C169 * C51301;
    const double C7991 = C5676 * C51301;
    const double C760 = (C51254 - C51286) / C49940 - (C51301 * C51038) / C49932;
    const double C761 =
        (2 * C51042 + C51301) / C49940 - (C51288 * C51038) / C49932;
    const double C762 = C51288 / C49940 - C51045 / C49961;
    const double C675 = C172 * C635;
    const double C667 = C170 * C635;
    const double C659 = C168 * C635;
    const double C5837 = C513 * C635;
    const double C6115 = C5677 * C635;
    const double C6105 = C5675 * C635;
    const double C11572 = C515 * C635;
    const double C39819 = C6311 * C635;
    const double C24926 = C24906 * C640;
    const double C24920 = C24906 * C648;
    const double C24918 = C24906 * C646;
    const double C24912 = C24906 * C639;
    const double C25124 = C24906 * C771;
    const double C25108 = C24906 * C770;
    const double C25306 = C24906 * C888;
    const double C25294 = C24906 * C886;
    const double C31574 = C24906 * C894;
    const double C31568 = C24906 * C884;
    const double C31972 = C24906 * C3298;
    const double C32160 = C24906 * C3460;
    const double C32438 = C24906 * C3744;
    const double C50042 = C51110 - C50039;
    const double C24939 = C51303 * C143;
    const double C24933 = C51303 * C132;
    const double C24931 = C51303 * C130;
    const double C24925 = C51303 * C142;
    const double C24915 = C51303 * C141;
    const double C24909 = C51303 * C128;
    const double C25127 = C51303 * C320;
    const double C25121 = C51303 * C310;
    const double C25119 = C51303 * C319;
    const double C25113 = C51303 * C308;
    const double C25309 = C51303 * C491;
    const double C25303 = C51303 * C480;
    const double C25297 = C51303 * C490;
    const double C25291 = C51303 * C478;
    const double C25479 = C51303 * C654;
    const double C25473 = C51303 * C645;
    const double C25881 = C51303 * C1023;
    const double C26629 = C51303 * C895;
    const double C31571 = C51303 * C494;
    const double C31565 = C51303 * C487;
    const double C31991 = C51303 * C908;
    const double C31985 = C51303 * C893;
    const double C31983 = C51303 * C907;
    const double C31977 = C51303 * C891;
    const double C32165 = C51303 * C1021;
    const double C32159 = C51303 * C1031;
    const double C32325 = C51303 * C1170;
    const double C32319 = C51303 * C1162;
    const double C32441 = C51303 * C1259;
    const double C32435 = C51303 * C1255;
    const double C20279 =
        (C51303 * C51157) / C50003 + (C51270 - C51292) / C50028;
    const double C8308 = C8296 + C8297;
    const double C2501 = C2477 + C2478;
    const double C2500 = C2475 + C2476;
    const double C2497 = C2469 + C2470;
    const double C2492 = C2459 + C2460;
    const double C2489 = C2453 + C2454;
    const double C2683 = C2665 + C2666;
    const double C2679 = C2657 + C2658;
    const double C2865 = C2847 + C2848;
    const double C2859 = C2835 + C2836;
    const double C3041 = C3029 + C3030;
    const double C3485 = C3473 + C3474;
    const double C4261 = C4249 + C4250;
    const double C36960 = C36951 + C36952;
    const double C36957 = C36945 + C36946;
    const double C37379 = C37357 + C37358;
    const double C37552 = C37545 + C37546;
    const double C37827 = C37815 + C37816;
    const double C24935 = C51304 * C312;
    const double C24929 = C51304 * C310;
    const double C24923 = C51304 * C320;
    const double C24917 = C51304 * C319;
    const double C24911 = C51304 * C308;
    const double C25123 = C51304 * C647;
    const double C25117 = C51304 * C654;
    const double C25111 = C51304 * C645;
    const double C25305 = C51304 * C899;
    const double C25293 = C51304 * C895;
    const double C31573 = C51304 * C907;
    const double C31567 = C51304 * C891;
    const double C31981 = C51304 * C908;
    const double C31975 = C51304 * C893;
    const double C32163 = C51304 * C1162;
    const double C32157 = C51304 * C1170;
    const double C32437 = C51304 * C3753;
    const double C20280 =
        (C51304 * C51157) / C50003 + (2 * C51162 + C51303) / C50028;
    const double C20281 = (C51157 * C51162) / C50007 + C51304 / C50028;
    const double C17499 = C17478 + C17479;
    const double C17494 = C17468 + C17469;
    const double C17492 = C17464 + C17465;
    const double C17490 = C17460 + C17461;
    const double C17488 = C17456 + C17457;
    const double C17694 = C17674 + C17675;
    const double C17689 = C17664 + C17665;
    const double C17882 = C17862 + C17863;
    const double C17878 = C17854 + C17855;
    const double C18058 = C18042 + C18043;
    const double C18472 = C18456 + C18457;
    const double C19234 = C19218 + C19219;
    const double C22413 = C22401 + C22402;
    const double C22411 = C22397 + C22398;
    const double C22409 = C22393 + C22394;
    const double C22840 = C22809 + C22810;
    const double C23032 = C23019 + C23020;
    const double C23025 = C23005 + C23006;
    const double C23320 = C23310 + C23311;
    const double C173 = C158 + C159;
    const double C2504 = C2483 + C2484;
    const double C8301 = C8278 + C8279;
    const double C17497 = C17474 + C17475;
    const double C350 = C329 + C330;
    const double C2493 = C2461 + C2462;
    const double C2682 = C2663 + C2664;
    const double C8295 = C8266 + C8267;
    const double C8495 = C8472 + C8473;
    const double C17491 = C17462 + C17463;
    const double C17691 = C17668 + C17669;
    const double C514 = C499 + C500;
    const double C2862 = C2841 + C2842;
    const double C8684 = C8662 + C8663;
    const double C17880 = C17858 + C17859;
    const double C6126 = C6109 + C6110;
    const double C14229 = C14218 + C14219;
    const double C14788 = C14775 + C14776;
    const double C22412 = C22399 + C22400;
    const double C22842 = C22813 + C22814;
    const double C36961 = C36953 + C36954;
    const double C37382 = C37363 + C37364;
    const double C5678 = C5658 + C5659;
    const double C15012 = C14993 + C14994;
    const double C22415 = C22405 + C22406;
    const double C37549 = C37539 + C37540;
    const double C689 = C683 * C637;
    const double C1500 = C683 * C1494;
    const double C1672 = C1666 * C1364;
    const double C1908 = C1666 * C299;
    const double C5839 = C1666 * C636;
    const double C14223 = C8683 + C8682;
    const double C14220 = C8682 + C8683;
    const double C1055 = C1049 * C118;
    const double C5486 = C1049 * C298;
    const double C5845 = C1049 * C635;
    const double C6127 = C6111 + C6112;
    const double C14789 = C14777 + C14778;
    const double C14785 = C14769 + C14770;
    const double C22843 = C22815 + C22816;
    const double C22839 = C22807 + C22808;
    const double C36959 = C36949 + C36950;
    const double C37383 = C37365 + C37366;
    const double C37378 = C37355 + C37356;
    const double C6129 = C6117 + C6118;
    const double C15013 = C14995 + C14996;
    const double C15231 = C15215 + C15216;
    const double C22414 = C22403 + C22404;
    const double C22848 = C22825 + C22826;
    const double C37551 = C37543 + C37544;
    const double C37711 = C37699 + C37700;
    const double C188 = C180 + C181;
    const double C351 = C331 + C332;
    const double C6124 = C51110 * C3469;
    const double C15222 = C51162 * C3469;
    const double C22836 = C17448 * C3469;
    const double C22828 = C51162 * C3469;
    const double C32155 = C24901 * C3469;
    const double C32327 = C51304 * C3469;
    const double C37536 = C2446 * C3469;
    const double C37708 = C2445 * C3469;
    const double C48019 = C51270 * C3469;
    const double C1653 = C51110 * C909;
    const double C2844 = C2445 * C909;
    const double C4256 = C2444 * C909;
    const double C8665 = C51162 * C909;
    const double C10027 = C51270 * C909;
    const double C17861 = C51162 * C909;
    const double C19223 = C17448 * C909;
    const double C25299 = C51304 * C909;
    const double C26635 = C51303 * C909;
    const double C1040 = C51110 * C1032;
    const double C3480 = C2444 * C1032;
    const double C9265 = C51270 * C1032;
    const double C18461 = C17448 * C1032;
    const double C25887 = C51303 * C1032;
    const double C353 = C335 + C336;
    const double C2496 = C2467 + C2468;
    const double C2686 = C2671 + C2672;
    const double C8299 = C8274 + C8275;
    const double C8500 = C8482 + C8483;
    const double C17495 = C17470 + C17471;
    const double C17696 = C17678 + C17679;
    const double C516 = C503 + C504;
    const double C2868 = C2853 + C2854;
    const double C8688 = C8670 + C8671;
    const double C17884 = C17866 + C17867;
    const double C684 = C665 + C666;
    const double C2494 = C2463 + C2464;
    const double C2681 = C2661 + C2662;
    const double C3044 = C3035 + C3036;
    const double C8494 = C8470 + C8471;
    const double C8864 = C8850 + C8851;
    const double C17690 = C17666 + C17667;
    const double C18060 = C18046 + C18047;
    const double C6128 = C6113 + C6114;
    const double C14791 = C14781 + C14782;
    const double C14787 = C14773 + C14774;
    const double C22845 = C22819 + C22820;
    const double C22841 = C22811 + C22812;
    const double C36962 = C36955 + C36956;
    const double C37386 = C37371 + C37372;
    const double C37381 = C37361 + C37362;
    const double C6130 = C6119 + C6120;
    const double C15011 = C14991 + C14992;
    const double C15233 = C15219 + C15220;
    const double C22416 = C22407 + C22408;
    const double C22850 = C22829 + C22830;
    const double C37548 = C37537 + C37538;
    const double C37714 = C37705 + C37706;
    const double C6310 = C6302 + C6303;
    const double C15379 = C15373 + C15374;
    const double C23030 = C23015 + C23016;
    const double C37830 = C37821 + C37822;
    const double C50104 = -C50103;
    const double C50115 = C50113 / C50079;
    const double C50325 = C50316 / C50079;
    const double C3470 =
        (-(C50108 * C50276) / C49932) / C50003 - C50236 / C50079 -
        (ae * (C50326 * C50276 + C50242)) / C50079 -
        ((C50243 + C50329 * C50276) * ce) / C50079 +
        C50070 * ((-((C50180 + C50200 * C50276) * ce) / C49932) / C50003 -
                  (ae * (C50194 * C50276 + C50176)) / C50079 +
                  C50070 * ((-(C50428 * C50276) / C49932) / C50003 - C50424));
    const double C3482 = C2445 * C1171;
    const double C5491 = C51110 * C1171;
    const double C9267 = C51162 * C1171;
    const double C15228 = C51270 * C1171;
    const double C18463 = C51162 * C1171;
    const double C23816 = C17448 * C1171;
    const double C25889 = C51304 * C1171;
    const double C5670 = C51110 * C1258;
    const double C15004 = C51270 * C1258;
    const double C23010 = C17448 * C1258;
    const double C50492 = C50489 / C50079;
    const double C50669 = C50667 / C50079;
    const double C50519 = -C50518;
    const double C314 = (C50070 * (3 * C50174 + C50075 * C50189) +
                         (3 * C50173 + C50075 * C50191) * ae) /
                        C50003;
    const double C649 =
        (2 * C50167 + C50075 * C50174 +
         C50070 * (C50070 * C50189 + C50191 * ae) + C50070 * C50191 * ae) /
        C50003;
    const double C903 = (C50262 * (C50070 * C50189 + C50191 * ae)) / C50003;
    const double C124 = 4 * (2 * C50166 + C50075 * C50173) +
                        C50075 * (3 * C50173 + C50075 * C50191);
    const double C304 = C50070 * (3 * C50173 + C50075 * C50191);
    const double C475 = C50262 * (3 * C50173 + C50075 * C50191);
    const double C641 = 2 * C50166 + C50075 * C50173 + C50191 * C50073;
    const double C772 =
        2 * C50070 * C50191 + C50070 * (C50191 + C50214 * C50073);
    const double C889 = C50262 * C50070 * C50191;
    const double C890 = C50262 * (C50191 + C50214 * C50073);
    const double C1019 = 2 * C50166 + C50075 * C50173 + C50191 * C50276;
    const double C1244 =
        2 * C50262 * C50191 + C50262 * (C50191 + C50214 * C50276);
    const double C777 = (2 * (C50070 * C50174 + C50173 * ae) +
                         C50070 * (C50174 + C50070 * C50251 + C50247 * ae) +
                         (C50173 + C50185 * C50073) * ae) /
                        C50003;
    const double C901 =
        (C50262 * (C50174 + C50070 * C50251 + C50247 * ae)) / C50003;
    const double C1166 =
        (C50070 * C50174 + C50173 * ae + C50251 * C50276) / C50003;
    const double C5492 = C117 * C1160;
    const double C9270 = C8258 * C1160;
    const double C18466 = C17454 * C1160;
    const double C778 =
        (-2 * (C50070 * C50172 + C50173 * ce)) / C49932 -
        (C50070 * (C50070 * C50250 + C50172 + C50247 * ce)) / C49932 -
        ((C50173 + C50185 * C50073) * ce) / C49932;
    const double C902 =
        -(C50262 * (C50070 * C50250 + C50172 + C50247 * ce)) / C49932;
    const double C1167 =
        -(C50250 * C50276 + C50070 * C50172 + C50173 * ce) / C49932;
    const double C50336 = C50180 + C50333;
    const double C50436 = C50425 / C50079;
    const double C3033 = C2451 * C3017;
    const double C25476 = C24906 * C3017;
    const double C4253 = C2451 * C3300;
    const double C14435 = C8258 * C3300;
    const double C26632 = C24906 * C3300;
    const double C28347 = C17454 * C3300;
    const double C3477 = C2451 * C3461;
    const double C5849 = C117 * C3461;
    const double C15225 = C8258 * C3461;
    const double C23813 = C17454 * C3461;
    const double C25884 = C24906 * C3461;
    const double C50335 = C50332 + C50176;
    const double C50440 = C50429 / C49932;
    const double C50435 = C50423 / C49932;
    const double C50410 = C50406 + C50393;
    const double C50633 = C50628 / C50079;
    const double C23305 =
        (4 * (2 * C50262 * C50301 + C50262 * C50851) +
         C50262 *
             (3 * C50851 +
              C50262 * (2 * C50623 + C50262 * (C50392 + C50575 * C50276)))) /
        C50003;
    const double C3144 = 4 * (2 * C50230 + C50070 * C50300) +
                         C50070 * (3 * C50300 + C50070 * C50405);
    const double C3299 = C50262 * (3 * C50300 + C50070 * C50405);
    const double C3636 = 2 * C50230 + C50070 * C50300 + C50405 * C50276;
    const double C21020 =
        2 * C50262 * C50405 + C50262 * (C50405 + C50590 * C50276);
    const double C50409 = C50403 + C50390;
    const double C50578 = -C50565;
    const double C50632 = C50627 / C49932;
    const double C23304 =
        4 * ((-2 * C50262 * C50298) / C49932 - (C50262 * C50848) / C49932) +
        C50262 * ((-3 * C50848) / C49932 +
                  C50262 * ((-2 * C50621) / C49932 -
                            (C50262 * (C50572 * C50276 + C50389)) / C49932));
    const double C40106 =
        5 * (3 * C50941 + C50262 * C50957) +
        C50262 * (4 * C50957 +
                  C50262 * (3 * C50955 +
                            C50262 * (2 * C50262 * C50094 +
                                      C50262 * (C50094 + C50109 * C50276))));
    const double C175 = C162 + C163;
    const double C8304 = C8284 + C8285;
    const double C17500 = C17480 + C17481;
    const double C355 = C339 + C340;
    const double C2502 = C2479 + C2480;
    const double C8302 = C8280 + C8281;
    const double C8501 = C8484 + C8485;
    const double C17498 = C17476 + C17477;
    const double C17697 = C17680 + C17681;
    const double C517 = C505 + C506;
    const double C8690 = C8674 + C8675;
    const double C17886 = C17870 + C17871;
    const double C685 = C671 + C672;
    const double C2498 = C2471 + C2472;
    const double C2684 = C2667 + C2668;
    const double C8497 = C8476 + C8477;
    const double C8866 = C8854 + C8855;
    const double C17693 = C17672 + C17673;
    const double C18062 = C18050 + C18051;
    const double C1668 = C1654 + C1655;
    const double C2866 = C2849 + C2850;
    const double C8687 = C8668 + C8669;
    const double C10042 = C10030 + C10031;
    const double C17883 = C17864 + C17865;
    const double C19238 = C19226 + C19227;
    const double C1051 = C1041 + C1042;
    const double C9280 = C9268 + C9269;
    const double C18476 = C18464 + C18465;
    const double C5681 = C5671 + C5672;
    const double C2654 = C2446 * C775;
    const double C3032 = C2445 * C775;
    const double C8849 = C51162 * C775;
    const double C18045 = C51162 * C775;
    const double C25109 = C24901 * C775;
    const double C25475 = C51304 * C775;
    const double C2840 = C2446 * C897;
    const double C4252 = C2445 * C897;
    const double C5842 = C51110 * C897;
    const double C10025 = C51162 * C897;
    const double C14434 = C51270 * C897;
    const double C19221 = C51162 * C897;
    const double C25295 = C24901 * C897;
    const double C26631 = C51304 * C897;
    const double C28346 = C17448 * C897;
    const double C3476 = C2445 * C1164;
    const double C5489 = C51110 * C1164;
    const double C9263 = C51162 * C1164;
    const double C15224 = C51270 * C1164;
    const double C18459 = C51162 * C1164;
    const double C23812 = C17448 * C1164;
    const double C25883 = C51304 * C1164;
    const double C6488 = C51110 * C3749;
    const double C15002 = C51162 * C3749;
    const double C23008 = C51162 * C3749;
    const double C50334 = C50331 / C50003;
    const double C5687 = C5679 * C118;
    const double C6490 = C5679 * C298;
    const double C6316 = C6312 * C118;
    const double C50311 = C50308 + C50302;
    const double C6495 = C6481 + C6482;
    const double C15378 = C15371 + C15372;
    const double C23031 = C23017 + C23018;
    const double C23200 = C23189 + C23190;
    const double C37828 = C37817 + C37818;
    const double C48338 = C48327 + C48328;
    const double C23321 = C23312 + C23313;
    const double C40036 = C40029 + C40030;
    const double C48455 = C48446 + C48447;
    const double C50408 = C50402 - C50386;
    const double C50494 = C50493 / C50003;
    const double C40116 = C40112 + C40113;
    const double C174 = C160 + C161;
    const double C8306 = C8288 + C8289;
    const double C17502 = C17484 + C17485;
    const double C2660 = C2446 * C782;
    const double C3038 = C2445 * C782;
    const double C8853 = C51162 * C782;
    const double C18049 = C51162 * C782;
    const double C25115 = C24901 * C782;
    const double C25481 = C51304 * C782;
    const double C2846 = C2446 * C910;
    const double C4258 = C2445 * C910;
    const double C5844 = C51110 * C910;
    const double C10029 = C51162 * C910;
    const double C14438 = C51270 * C910;
    const double C19225 = C51162 * C910;
    const double C25301 = C24901 * C910;
    const double C26637 = C51304 * C910;
    const double C28350 = C17448 * C910;
    const double C2659 = C2451 * C776;
    const double C3037 = C2450 * C776;
    const double C8852 = C8258 * C776;
    const double C18048 = C17454 * C776;
    const double C25114 = C24906 * C776;
    const double C2845 = C2451 * C898;
    const double C4257 = C2450 * C898;
    const double C5843 = C117 * C898;
    const double C10028 = C8258 * C898;
    const double C14437 = C8257 * C898;
    const double C19224 = C17454 * C898;
    const double C25300 = C24906 * C898;
    const double C28349 = C17453 * C898;
    const double C3481 = C2450 * C1165;
    const double C5490 = C117 * C1165;
    const double C9266 = C8258 * C1165;
    const double C15227 = C8257 * C1165;
    const double C18462 = C17454 * C1165;
    const double C23815 = C17453 * C1165;
    const double C6491 = C117 * C3747;
    const double C15005 = C8258 * C3747;
    const double C23011 = C17454 * C3747;
    const double C50310 = C50307 + C50299;
    const double C50394 = -C50383;
    const double C50121 = -C50120;
    const double C50449 = C50439 / C50079;
    const double C50505 = C50070 * C50502;
    const double C50524 = C50523 / C49932;
    const double C50636 = C50631 / C50079;
    const double C50656 = -C50653;
    const double C50223 = C50075 * C50221;
    const double C50256 = C50070 * C50221;
    const double C1249 =
        (2 * C50262 * C50189 + C50262 * (C50189 + C50221 * C50276)) / C50003;
    const double C50360 = C50070 * C50356;
    const double C7127 =
        (2 * C50262 * C50251 + C50262 * (C50251 + C50356 * C50276)) / C50003;
    const double C50467 = C50200 + C50460;
    const double C50597 = C50591 + C50576;
    const double C50222 = C50209 - C50219;
    const double C50359 = C50070 * C50353;
    const double C7128 = (-2 * C50262 * C50250) / C49932 -
                         (C50262 * (C50353 * C50276 + C50250)) / C49932;
    const double C50464 = C50457 + C50194;
    const double C50594 = C50588 + C50573;
    const double C50312 = C50309 - C50297;
    const double C50220 = C50196 + C50217;
    const double C1161 = C50070 * C50191 + C50255 * C50276;
    const double C50258 = C50254 / C49932;
    const double C3145 = 4 * (2 * C50239 + C50070 * C50328) +
                         C50070 * (3 * C50328 + C50070 * C50466);
    const double C3301 = C50262 * (3 * C50328 + C50070 * C50466);
    const double C3637 = 2 * C50239 + C50070 * C50328 + C50466 * C50276;
    const double C50603 = C50558 + C50596;
    const double C50602 = C50595 / C49932;
    const double C165 = C51110 * C136;
    const double C510 = C51110 * C484;
    const double C1046 = C51110 * C1027;
    const double C50361 = C50358 / C50003;
    const double C50463 = C50456 - C50438;
    const double C50510 = C50509 / C50003;
    const double C50600 = C50593 - C50569;
    const double C50642 = C50640 - C50635;
    const double C50662 = C50660 / C50003;
    const double C137 =
        4 * ((-2 * C50165) / C49932 - (C50075 * C50172) / C49932) +
        C50075 * ((-3 * C50172) / C49932 + C50075 * C50190);
    const double C315 = C50070 * ((-3 * C50172) / C49932 + C50075 * C50190) -
                        ((3 * C50173 + C50075 * C50191) * ce) / C49932;
    const double C485 = C50262 * ((-3 * C50172) / C49932 + C50075 * C50190);
    const double C650 = (-2 * C50165) / C49932 - (C50075 * C50172) / C49932 +
                        C50070 * (C50070 * C50190 - (C50191 * ce) / C49932) -
                        (C50070 * C50191 * ce) / C49932;
    const double C904 = C50262 * (C50070 * C50190 - (C50191 * ce) / C49932);
    const double C1028 =
        (-2 * C50165) / C49932 - (C50075 * C50172) / C49932 + C50190 * C50276;
    const double C40107 =
        5 * ((-3 * C50830) / C49932 + C50262 * C50857) +
        C50262 * (4 * C50857 +
                  C50262 * ((-3 * C50652) / C49932 +
                            C50262 * ((-2 * C50625) / C49932 -
                                      (C50262 * (C50204 * C50276 + C50146)) /
                                          C49932)));
    const double C108 = (C51298 * C50968) / C50003 + (C51242 - C51281) / C50028;
    const double C109 =
        (C51299 * C50968) / C50003 + (2 * C50978 + C51298) / C50028;
    const double C110 = (C50968 * C50978) / C50007 + C51299 / C50028;
    const double C112 = (C51247 - C51283) / C49940 - (C51300 * C50988) / C49932;
    const double C113 =
        (2 * C50997 + C51300) / C49940 - (C51285 * C50988) / C49932;
    const double C114 = C51285 / C49940 - C51000 / C49961;
    const double C1240 =
        (C51256 - C51289) / C49940 - (C51302 * C51064) / C49932;
    const double C1241 =
        (2 * C51068 + C51302) / C49940 - (C51291 * C51064) / C49932;
    const double C1242 = C51291 / C49940 - C51071 / C49961;
    const double C39356 =
        (C51305 * C51185) / C50003 + (C51271 - C51295) / C50028;
    const double C39357 =
        (C51306 * C51185) / C50003 + (2 * C51190 + C51305) / C50028;
    const double C39358 = (C51185 * C51190) / C50007 + C51306 / C50028;
    const double C49972 = C49968 * ce;
    const double C1363 = (-C49941 / C49932) / C49940 - (C49968 * de) / C49932;
    const double C24953 = C24926 + C24927;
    const double C24949 = C24918 + C24919;
    const double C24946 = C24912 + C24913;
    const double C31581 = C31574 + C31575;
    const double C31578 = C31568 + C31569;
    const double C50044 = C50042 * ae;
    const double C8312 = C8308 * C118;
    const double C8474 = C8308 * C298;
    const double C17504 = C17492 + C17493;
    const double C28139 = C17879 + C17878;
    const double C28136 = C17878 + C17879;
    const double C183 = C173 * C51026;
    const double C338 = C173 * C51254;
    const double C676 = C173 * C630;
    const double C1375 = C173 * C1358;
    const double C1509 = C173 * C51301;
    const double C360 = C350 * C51042;
    const double C662 = C350 * C631;
    const double C1369 = C350 * C51042;
    const double C1499 = C350 * C51288;
    const double C522 = C514 * C51026;
    const double C1650 = C514 * C1358;
    const double C1909 = C514 * C51254;
    const double C5838 = C514 * C630;
    const double C6922 = C514 * C51301;
    const double C6134 = C6126 * C631;
    const double C6475 = C6126 * C51042;
    const double C7134 = C6126 * C51042;
    const double C7993 = C6126 * C51288;
    const double C5686 = C5678 * C51026;
    const double C6116 = C5678 * C630;
    const double C6477 = C5678 * C51254;
    const double C7136 = C5678 * C1358;
    const double C7997 = C5678 * C51301;
    const double C14233 = C14223 * C118;
    const double C16503 = C14223 * C298;
    const double C14230 = C14220 * C118;
    const double C16497 = C14220 * C298;
    const double C6135 = C6127 * C637;
    const double C7994 = C6127 * C1494;
    const double C6137 = C6129 * C636;
    const double C6478 = C6129 * C299;
    const double C7137 = C6129 * C1364;
    const double C48172 = C15014 + C15013;
    const double C23001 = C22413 + C22414;
    const double C192 = C188 * C51126;
    const double C11118 = C188 * C51271;
    const double C34010 = C188 * C34007;
    const double C367 = C351 - C361;
    const double C1667 = C1652 + C1653;
    const double C2863 = C2843 + C2844;
    const double C4264 = C4255 + C4256;
    const double C8685 = C8664 + C8665;
    const double C10040 = C10026 + C10027;
    const double C17881 = C17860 + C17861;
    const double C19236 = C19222 + C19223;
    const double C1050 = C1039 + C1040;
    const double C3488 = C3479 + C3480;
    const double C9278 = C9264 + C9265;
    const double C18474 = C18460 + C18461;
    const double C362 = C353 * C51042;
    const double C670 = C353 * C631;
    const double C1373 = C353 * C51042;
    const double C1505 = C353 * C51288;
    const double C8309 = C8298 + C8299;
    const double C17505 = C17494 + C17495;
    const double C524 = C516 * C51026;
    const double C1656 = C516 * C1358;
    const double C1913 = C516 * C51254;
    const double C11573 = C516 * C630;
    const double C12517 = C516 * C51301;
    const double C690 = C684 * C632;
    const double C1501 = C684 * C1489;
    const double C6136 = C6128 * C632;
    const double C7995 = C6128 * C1489;
    const double C6138 = C6130 * C631;
    const double C6479 = C6130 * C51042;
    const double C7138 = C6130 * C51042;
    const double C7999 = C6130 * C51288;
    const double C48173 = C15012 + C15011;
    const double C23002 = C22415 + C22416;
    const double C6314 = C6310 * C51026;
    const double C6483 = C6310 * C51254;
    const double C8150 = C6310 * C1358;
    const double C39820 = C6310 * C630;
    const double C41001 = C6310 * C51301;
    const double C50105 = C50104 / C50003;
    const double C3484 = C2446 * C3470;
    const double C5852 = C51110 * C3470;
    const double C15230 = C51162 * C3470;
    const double C23818 = C51162 * C3470;
    const double C25891 = C24901 * C3470;
    const double C5680 = C5669 + C5670;
    const double C15017 = C15003 + C15004;
    const double C23027 = C23009 + C23010;
    const double C50520 = C50519 / C50003;
    const double C344 = C51110 * C314;
    const double C8287 = C51162 * C314;
    const double C17483 = C51162 * C314;
    const double C680 = C51110 * C649;
    const double C2482 = C2446 * C649;
    const double C8487 = C51162 * C649;
    const double C17683 = C51162 * C649;
    const double C24937 = C24901 * C649;
    const double C1661 = C51110 * C903;
    const double C8677 = C51162 * C903;
    const double C17873 = C51162 * C903;
    const double C164 = C117 * C124;
    const double C343 = C117 * C304;
    const double C8286 = C8258 * C304;
    const double C17482 = C17454 * C304;
    const double C509 = C117 * C475;
    const double C679 = C117 * C641;
    const double C2481 = C2451 * C641;
    const double C8486 = C8258 * C641;
    const double C17682 = C17454 * C641;
    const double C24936 = C24906 * C641;
    const double C1660 = C117 * C889;
    const double C8676 = C8258 * C889;
    const double C17872 = C17454 * C889;
    const double C1045 = C117 * C1019;
    const double C2670 = C2446 * C777;
    const double C8857 = C51162 * C777;
    const double C18053 = C51162 * C777;
    const double C25125 = C24901 * C777;
    const double C2852 = C2446 * C901;
    const double C10033 = C51162 * C901;
    const double C11577 = C51110 * C901;
    const double C19229 = C51162 * C901;
    const double C25307 = C24901 * C901;
    const double C5493 = C51110 * C1166;
    const double C9271 = C51162 * C1166;
    const double C18467 = C51162 * C1166;
    const double C2675 = C2451 * C778;
    const double C8860 = C8258 * C778;
    const double C18056 = C17454 * C778;
    const double C25130 = C24906 * C778;
    const double C2857 = C2451 * C902;
    const double C10036 = C8258 * C902;
    const double C11578 = C117 * C902;
    const double C19232 = C17454 * C902;
    const double C25312 = C24906 * C902;
    const double C5496 = C117 * C1167;
    const double C9274 = C8258 * C1167;
    const double C18470 = C17454 * C1167;
    const double C50339 = C50336 + C50330;
    const double C50338 = C50335 + C50327;
    const double C50447 = -C50435;
    const double C50414 = C50070 * C50410;
    const double C50559 = 3 * C50410;
    const double C50545 = C50410 * ce;
    const double C31988 = C24906 * C3299;
    const double C37369 = C2451 * C3299;
    const double C22833 = C17454 * C3636;
    const double C32322 = C24906 * C3636;
    const double C37703 = C2451 * C3636;
    const double C48016 = C8258 * C3636;
    const double C50413 = C50070 * C50409;
    const double C50551 = -3 * C50409;
    const double C50544 = ae * C50409;
    const double C50586 = C50578 / C50003;
    const double C50637 = -C50632;
    const double C185 = C175 * C118;
    const double C346 = C175 * C298;
    const double C363 = C355 * C299;
    const double C677 = C355 * C636;
    const double C1376 = C355 * C1364;
    const double C8311 = C8302 + C8303;
    const double C17507 = C17498 + C17499;
    const double C525 = C517 * C118;
    const double C1918 = C517 * C298;
    const double C691 = C685 * C637;
    const double C1506 = C685 * C1494;
    const double C8505 = C8497 + C8498;
    const double C17701 = C17693 + C17694;
    const double C1674 = C1668 * C1364;
    const double C1912 = C1668 * C299;
    const double C11574 = C1668 * C636;
    const double C8695 = C8687 + C8686;
    const double C14224 = C8686 + C8687;
    const double C17891 = C17883 + C17882;
    const double C28140 = C17882 + C17883;
    const double C1057 = C1051 * C118;
    const double C5495 = C1051 * C298;
    const double C5689 = C5681 * C118;
    const double C2677 = C2653 + C2654;
    const double C3042 = C3031 + C3032;
    const double C8863 = C8848 + C8849;
    const double C18059 = C18044 + C18045;
    const double C25132 = C25108 + C25109;
    const double C2861 = C2839 + C2840;
    const double C4262 = C4251 + C4252;
    const double C5853 = C5841 + C5842;
    const double C10039 = C10024 + C10025;
    const double C14441 = C14433 + C14434;
    const double C19235 = C19220 + C19221;
    const double C25316 = C25294 + C25295;
    const double C28353 = C28345 + C28346;
    const double C3486 = C3475 + C3476;
    const double C5498 = C5488 + C5489;
    const double C9277 = C9262 + C9263;
    const double C15235 = C15223 + C15224;
    const double C18473 = C18458 + C18459;
    const double C23819 = C23811 + C23812;
    const double C6497 = C6487 + C6488;
    const double C15016 = C15001 + C15002;
    const double C23026 = C23007 + C23008;
    const double C50337 = C50334 - C50324;
    const double C3019 =
        (3 * (C50163 + C50070 * C50234 + C50230 * ae) +
         C50070 * (2 * C50234 + C50070 * C50311 + C50300 * ae) +
         (2 * C50230 + C50070 * C50300) * ae) /
        C50003;
    const double C3302 =
        (C50262 * (2 * C50234 + C50070 * C50311 + C50300 * ae)) / C50003;
    const double C3463 =
        (C50163 + C50070 * C50234 + C50230 * ae + C50311 * C50276) / C50003;
    const double C3752 =
        (2 * C50262 * C50311 + C50262 * (C50311 + C50410 * C50276)) / C50003;
    const double C6501 = C6495 * C299;
    const double C8149 = C6495 * C1364;
    const double C39821 = C6495 * C636;
    const double C48443 = C15378 + C15377;
    const double C23309 = C23031 + C23032;
    const double C40039 = C40036 * C299;
    const double C41105 = C40036 * C1364;
    const double C50412 = C50408 - C50387;
    const double C50495 = C50494 - C50491;
    const double C40118 = C40116 * C118;
    const double C184 = C174 * C51026;
    const double C345 = C174 * C51254;
    const double C1379 = C174 * C1358;
    const double C2680 = C2659 + C2660;
    const double C3045 = C3037 + C3038;
    const double C8865 = C8852 + C8853;
    const double C18061 = C18048 + C18049;
    const double C25135 = C25114 + C25115;
    const double C2864 = C2845 + C2846;
    const double C4265 = C4257 + C4258;
    const double C5854 = C5843 + C5844;
    const double C10041 = C10028 + C10029;
    const double C14443 = C14437 + C14438;
    const double C19237 = C19224 + C19225;
    const double C25319 = C25300 + C25301;
    const double C28355 = C28349 + C28350;
    const double C3489 = C3481 + C3482;
    const double C5499 = C5490 + C5491;
    const double C9279 = C9266 + C9267;
    const double C15237 = C15227 + C15228;
    const double C18475 = C18462 + C18463;
    const double C23821 = C23815 + C23816;
    const double C3310 =
        2 * ((-(C50262 * C50137 * ce) / C49932) / C50003 -
             (ae * C50262 * C50136) / C50079 - (C50070 * C50482) / C50079) -
        (ae * C50262 * C50310) / C50079 - (C50262 * C50311 * ce) / C50079 +
        C50070 * ((-(ae * C50262 * C50298) / C49932) / C50003 -
                  C50482 / C50079 - (C50262 * C50301 * ce) / C50079 +
                  C50070 * ((-(C50262 * C50142 * ce) / C49932) / C50003 -
                            (ae * C50262 * C50141) / C50079 -
                            (C50070 * C50262 * C50101) / C50079));
    const double C3020 =
        (-3 * (C50070 * C50233 + C50162 + C50230 * ce)) / C49932 +
        C50070 * ((-2 * C50233) / C49932 - (C50070 * C50310) / C49932 -
                  (C50300 * ce) / C49932) -
        ((2 * C50230 + C50070 * C50300) * ce) / C49932;
    const double C3303 =
        C50262 * ((-2 * C50233) / C49932 - (C50070 * C50310) / C49932 -
                  (C50300 * ce) / C49932);
    const double C3464 =
        -(C50310 * C50276 + C50070 * C50233 + C50162 + C50230 * ce) / C49932;
    const double C3750 = (-2 * C50262 * C50310) / C49932 -
                         (C50262 * (C50409 * C50276 + C50310)) / C49932;
    const double C50401 = C50394 / C50003;
    const double C50122 = C50121 / C50003;
    const double C50508 = C50505 / C50079;
    const double C50525 = -C50524;
    const double C50659 = C50656 / C50003;
    const double C50225 = C50199 + C50223;
    const double C50259 = C50256 + C50257;
    const double C50363 = C50151 + C50360;
    const double C50471 = C50467 + C50454;
    const double C50604 = C50070 * C50597;
    const double C23181 =
        (3 * (C50311 + C50410 * C50276) +
         C50262 * (2 * C50262 * C50410 + C50262 * (C50410 + C50597 * C50276))) /
        C50003;
    const double C50224 = C50075 * C50222;
    const double C50253 = C50070 * C50222;
    const double C1248 =
        2 * C50262 * C50190 + C50262 * (C50190 + C50222 * C50276);
    const double C50362 = C50359 + C50150;
    const double C50470 = C50464 + C50451;
    const double C50601 = C50070 * C50594;
    const double C23182 =
        (-3 * (C50409 * C50276 + C50310)) / C49932 +
        C50262 * ((-2 * C50262 * C50409) / C49932 -
                  (C50262 * (C50594 * C50276 + C50409)) / C49932);
    const double C3025 =
        3 * ((-(ae * C50233) / C49932) / C50003 - C50083 / C50079 -
             (C50234 * ce) / C50079 + C50070 * C50312) +
        (((-2 * C50233) / C49932 - (C50070 * C50310) / C49932 -
          (C50300 * ce) / C49932) *
         ae) /
            C50003 -
        ((2 * C50234 + C50070 * C50311 + C50300 * ae) * ce) / C50079 +
        C50070 * (2 * C50312 - (ae * C50310) / C50079 - (C50311 * ce) / C50079 +
                  C50070 * ((-(ae * C50298) / C49932) / C50003 - C50097 -
                            (C50301 * ce) / C50079 +
                            C50070 * ((-(C50142 * ce) / C49932) / C50003 -
                                      (ae * C50141) / C50079 -
                                      (C50070 * C50101) / C50079)));
    const double C125 = 5 * (3 * C50173 + C50075 * C50191) +
                        C50075 * (4 * C50191 + C50075 * C50220);
    const double C305 = C50070 * (4 * C50191 + C50075 * C50220);
    const double C477 = C50262 * (4 * C50191 + C50075 * C50220);
    const double C642 = 3 * C50173 + C50075 * C50191 + C50220 * C50073;
    const double C1020 = 3 * C50173 + C50075 * C50191 + C50220 * C50276;
    const double C1643 = C50262 * C50070 * C50220;
    const double C20648 = 5 * (3 * C50300 + C50070 * C50405) +
                          C50070 * (4 * C50405 + C50070 * C50603);
    const double C20750 = C50262 * (4 * C50405 + C50070 * C50603);
    const double C20950 = 3 * C50300 + C50070 * C50405 + C50603 * C50276;
    const double C50364 = C50361 - C50352;
    const double C50469 = C50463 - C50449;
    const double C50511 = C50510 - C50507;
    const double C50605 = C50070 * C50600;
    const double C50644 = C50642 - C50636;
    const double C50664 = C50662 - C50658;
    const double C166 = C117 * C137;
    const double C347 = C117 * C315;
    const double C8290 = C8258 * C315;
    const double C17486 = C17454 * C315;
    const double C511 = C117 * C485;
    const double C681 = C117 * C650;
    const double C2487 = C2451 * C650;
    const double C8490 = C8258 * C650;
    const double C17686 = C17454 * C650;
    const double C24942 = C24906 * C650;
    const double C1664 = C117 * C904;
    const double C8680 = C8258 * C904;
    const double C17876 = C17454 * C904;
    const double C1047 = C117 * C1028;
    const double C49974 = C49972 / C49932;
    const double C1380 = C175 * C1363;
    const double C1374 = C172 * C1363;
    const double C1370 = C170 * C1363;
    const double C1366 = C168 * C1363;
    const double C1663 = C517 * C1363;
    const double C1657 = C515 * C1363;
    const double C1651 = C513 * C1363;
    const double C6773 = C1051 * C1363;
    const double C6767 = C1049 * C1363;
    const double C7145 = C5679 * C1363;
    const double C7135 = C5677 * C1363;
    const double C7131 = C5675 * C1363;
    const double C8151 = C6311 * C1363;
    const double C9674 = C8308 * C1363;
    const double C16033 = C14223 * C1363;
    const double C16027 = C14220 * C1363;
    const double C41107 = C6617 * C1363;
    const double C50046 = C50044 / C50003;
    const double C17508 = C17504 * C118;
    const double C17670 = C17504 * C298;
    const double C18870 = C17504 * C1363;
    const double C28145 = C28139 * C118;
    const double C29856 = C28139 * C1363;
    const double C30326 = C28139 * C298;
    const double C28142 = C28136 * C118;
    const double C29850 = C28136 * C1363;
    const double C30320 = C28136 * C298;
    const double C191 = C183 + C182;
    const double C189 = C182 + C183;
    const double C354 = C337 + C338;
    const double C5664 = C522 + C521;
    const double C5660 = C521 + C522;
    const double C7496 = C1909 + C1910;
    const double C7495 = C1910 + C1909;
    const double C6299 = C5685 + C5686;
    const double C6493 = C6476 + C6477;
    const double C48174 = C48172 * C118;
    const double C48323 = C48172 * C298;
    const double C49917 = C48172 * C1363;
    const double C23021 = C23001 * C118;
    const double C23185 = C23001 * C298;
    const double C24795 = C23001 * C1363;
    const double C1673 = C1667 * C51042;
    const double C1911 = C1667 * C51042;
    const double C5840 = C1667 * C631;
    const double C6924 = C1667 * C51288;
    const double C14222 = C8685 + C8684;
    const double C14221 = C8684 + C8685;
    const double C28138 = C17881 + C17880;
    const double C28137 = C17880 + C17881;
    const double C1056 = C1050 * C51026;
    const double C5487 = C1050 * C51254;
    const double C5846 = C1050 * C630;
    const double C6768 = C1050 * C1358;
    const double C6928 = C1050 * C51301;
    const double C369 = C367 - C362;
    const double C8313 = C8309 * C51026;
    const double C8475 = C8309 * C51254;
    const double C9675 = C8309 * C1358;
    const double C17509 = C17505 * C51026;
    const double C17671 = C17505 * C51254;
    const double C18871 = C17505 * C1358;
    const double C530 = C524 + C523;
    const double C5665 = C523 + C524;
    const double C11271 = C1914 + C1913;
    const double C13059 = C1913 + C1914;
    const double C48175 = C48173 * C51026;
    const double C48324 = C48173 * C51254;
    const double C49918 = C48173 * C1358;
    const double C23022 = C23002 * C51026;
    const double C23186 = C23002 * C51254;
    const double C24796 = C23002 * C1358;
    const double C6612 = C6314 + C6315;
    const double C39929 = C6315 + C6314;
    const double C40028 = C6484 + C6483;
    const double C50106 = C50105 - C50097;
    const double C5688 = C5680 * C51026;
    const double C6489 = C5680 * C51254;
    const double C7144 = C5680 * C1358;
    const double C50521 = C50520 - C50097;
    const double C176 = C164 + C165;
    const double C357 = C343 + C344;
    const double C8305 = C8286 + C8287;
    const double C17501 = C17482 + C17483;
    const double C519 = C509 + C510;
    const double C687 = C679 + C680;
    const double C2503 = C2481 + C2482;
    const double C8502 = C8486 + C8487;
    const double C17698 = C17682 + C17683;
    const double C24958 = C24936 + C24937;
    const double C1670 = C1660 + C1661;
    const double C8691 = C8676 + C8677;
    const double C17887 = C17872 + C17873;
    const double C1053 = C1045 + C1046;
    const double C2685 = C2669 + C2670;
    const double C8867 = C8856 + C8857;
    const double C18063 = C18052 + C18053;
    const double C25140 = C25124 + C25125;
    const double C2867 = C2851 + C2852;
    const double C10043 = C10032 + C10033;
    const double C11580 = C11576 + C11577;
    const double C19239 = C19228 + C19229;
    const double C25322 = C25306 + C25307;
    const double C5500 = C5492 + C5493;
    const double C9281 = C9270 + C9271;
    const double C18477 = C18466 + C18467;
    const double C3021 =
        (3 * (C50167 + C50070 * C50243 + C50239 * ae) +
         C50070 * (2 * C50243 + C50070 * C50339 + C50328 * ae) +
         (2 * C50239 + C50070 * C50328) * ae) /
        C50003;
    const double C3306 =
        (C50262 * (2 * C50243 + C50070 * C50339 + C50328 * ae)) / C50003;
    const double C3465 =
        (C50167 + C50070 * C50243 + C50239 * ae + C50339 * C50276) / C50003;
    const double C3312 =
        2 * ((-(C50262 * C50180 * ce) / C49932) / C50003 -
             (ae * C50262 * C50176) / C50079 - (C50070 * C50498) / C50079) -
        (ae * C50262 * C50338) / C50079 - (C50262 * C50339 * ce) / C50079 +
        C50070 * ((-(ae * C50262 * C50326) / C49932) / C50003 -
                  C50498 / C50079 - (C50262 * C50329 * ce) / C50079 +
                  C50070 * ((-(C50262 * C50200 * ce) / C49932) / C50003 -
                            (ae * C50262 * C50194) / C50079 -
                            (C50070 * C50262 * C50428) / C50079));
    const double C3022 =
        (-3 * (C50070 * C50242 + C50165 + C50239 * ce)) / C49932 +
        C50070 * ((-2 * C50242) / C49932 - (C50070 * C50338) / C49932 -
                  (C50328 * ce) / C49932) -
        ((2 * C50239 + C50070 * C50328) * ce) / C49932;
    const double C3307 =
        C50262 * ((-2 * C50242) / C49932 - (C50070 * C50338) / C49932 -
                  (C50328 * ce) / C49932);
    const double C3466 =
        -(C50338 * C50276 + C50070 * C50242 + C50165 + C50239 * ce) / C49932;
    const double C50455 = C50447 / C50003;
    const double C50417 = C50380 + C50414;
    const double C50564 = C50545 / C50079;
    const double C50416 = C50413 / C49932;
    const double C50570 = C50551 / C49932;
    const double C50563 = C50544 / C50079;
    const double C50592 = C50586 - C50112;
    const double C50639 = C50637 / C50003;
    const double C8315 = C8311 * C118;
    const double C17511 = C17507 * C118;
    const double C8507 = C8505 * C299;
    const double C9676 = C8505 * C1364;
    const double C17703 = C17701 * C299;
    const double C18872 = C17701 * C1364;
    const double C8697 = C8695 * C118;
    const double C14234 = C14224 * C118;
    const double C17893 = C17891 * C118;
    const double C28146 = C28140 * C118;
    const double C5857 = C5853 * C637;
    const double C6925 = C5853 * C1494;
    const double C16031 = C10038 + C10039;
    const double C16029 = C10039 + C10038;
    const double C29854 = C19234 + C19235;
    const double C29852 = C19235 + C19234;
    const double C5502 = C5498 * C299;
    const double C5847 = C5498 * C636;
    const double C6769 = C5498 * C1364;
    const double C14990 = C9277 + C9276;
    const double C14987 = C9276 + C9277;
    const double C23004 = C18473 + C18472;
    const double C28875 = C18472 + C18473;
    const double C6503 = C6497 * C299;
    const double C7143 = C6497 * C1364;
    const double C50340 = C50337 - C50325;
    const double C14780 = C51162 * C3302;
    const double C22818 = C51162 * C3302;
    const double C31987 = C51304 * C3302;
    const double C31973 = C24901 * C3302;
    const double C37368 = C2445 * C3302;
    const double C37354 = C2446 * C3302;
    const double C6122 = C51110 * C3463;
    const double C15218 = C51162 * C3463;
    const double C22832 = C17448 * C3463;
    const double C22824 = C51162 * C3463;
    const double C32161 = C24901 * C3463;
    const double C32321 = C51304 * C3463;
    const double C37542 = C2446 * C3463;
    const double C37702 = C2445 * C3463;
    const double C48015 = C51270 * C3463;
    const double C23192 = C51162 * C3752;
    const double C32439 = C24901 * C3752;
    const double C37820 = C2446 * C3752;
    const double C39824 = C51110 * C3752;
    const double C48330 = C51162 * C3752;
    const double C48453 = C48443 * C118;
    const double C23319 = C23309 * C118;
    const double C50415 = C50070 * C50412;
    const double C50543 = 2 * C50412;
    const double C50496 = C50495 - C50492;
    const double C190 = C184 + C185;
    const double C5858 = C5854 * C632;
    const double C6926 = C5854 * C1489;
    const double C16034 = C10040 + C10041;
    const double C16030 = C10041 + C10040;
    const double C29857 = C19236 + C19237;
    const double C29853 = C19237 + C19236;
    const double C5503 = C5499 * C51042;
    const double C5848 = C5499 * C631;
    const double C6770 = C5499 * C51042;
    const double C6930 = C5499 * C51288;
    const double C14989 = C9279 + C9278;
    const double C14988 = C9278 + C9279;
    const double C23003 = C18475 + C18474;
    const double C28876 = C18474 + C18475;
    const double C14784 = C51162 * C3310;
    const double C22822 = C51162 * C3310;
    const double C31993 = C51304 * C3310;
    const double C31979 = C24901 * C3310;
    const double C37374 = C2445 * C3310;
    const double C37360 = C2446 * C3310;
    const double C14783 = C8258 * C3303;
    const double C22821 = C17454 * C3303;
    const double C31978 = C24906 * C3303;
    const double C37373 = C2450 * C3303;
    const double C37359 = C2451 * C3303;
    const double C6123 = C117 * C3464;
    const double C15221 = C8258 * C3464;
    const double C22835 = C17453 * C3464;
    const double C22827 = C17454 * C3464;
    const double C32154 = C24906 * C3464;
    const double C37535 = C2451 * C3464;
    const double C37707 = C2450 * C3464;
    const double C48018 = C8257 * C3464;
    const double C23195 = C17454 * C3750;
    const double C32444 = C24906 * C3750;
    const double C37825 = C2451 * C3750;
    const double C39825 = C117 * C3750;
    const double C48333 = C8258 * C3750;
    const double C50407 = C50401 - C50097;
    const double C50123 = C50122 - C50112;
    const double C50526 = C50525 / C50003;
    const double C50661 = C50659 - C50112;
    const double C139 = (5 * (3 * C50174 + C50075 * C50189) +
                         C50075 * (4 * C50189 + C50075 * C50225)) /
                        C50003;
    const double C316 = (C50070 * (4 * C50189 + C50075 * C50225) +
                         (4 * C50191 + C50075 * C50220) * ae) /
                        C50003;
    const double C489 = (C50262 * (4 * C50189 + C50075 * C50225)) / C50003;
    const double C651 =
        (3 * C50174 + C50075 * C50189 +
         C50070 * (C50070 * C50225 + C50220 * ae) + C50070 * C50220 * ae) /
        C50003;
    const double C1030 =
        (3 * C50174 + C50075 * C50189 + C50225 * C50276) / C50003;
    const double C1644 = (C50262 * (C50070 * C50225 + C50220 * ae)) / C50003;
    const double C779 = (2 * (C50070 * C50189 + C50191 * ae) +
                         C50070 * (C50189 + C50070 * C50259 + C50255 * ae) +
                         (C50191 + C50214 * C50073) * ae) /
                        C50003;
    const double C905 =
        (C50262 * (C50189 + C50070 * C50259 + C50255 * ae)) / C50003;
    const double C1168 =
        (C50070 * C50189 + C50191 * ae + C50259 * C50276) / C50003;
    const double C50366 = C50363 + C50357;
    const double C50474 = C50070 * C50471;
    const double C3748 =
        (2 * C50262 * C50339 + C50262 * (C50339 + C50471 * C50276)) / C50003;
    const double C50607 = C50560 + C50604;
    const double C50226 = C50202 + C50224;
    const double C50260 = C50253 - C50258;
    const double C50365 = C50362 + C50354;
    const double C50473 = C50070 * C50470;
    const double C3746 = (-2 * C50262 * C50338) / C49932 -
                         (C50262 * (C50470 * C50276 + C50338)) / C49932;
    const double C50606 = C50601 / C49932;
    const double C50472 = C50070 * C50469;
    const double C50512 = C50511 - C50508;
    const double C50645 = C50070 * C50644;
    const double C49976 = C49974 - C49969;
    const double C1383 = C1374 + C1375;
    const double C1382 = C1370 + C1371;
    const double C12365 = C1657 + C1656;
    const double C12716 = C1656 + C1657;
    const double C7141 = C1650 + C1651;
    const double C7139 = C1651 + C1650;
    const double C8148 = C7135 + C7136;
    const double C41104 = C8151 + C8150;
    const double C50047 = C50046 - C50031;
    const double C195 = C191 * C51126;
    const double C11121 = C191 * C51271;
    const double C34013 = C191 * C34007;
    const double C193 = C189 * C51126;
    const double C368 = C354 - C363;
    const double C7499 = C1908 - C7496;
    const double C7498 = C7495 - C1908;
    const double C6499 = C6493 - C6478;
    const double C14232 = C14222 * C51026;
    const double C16032 = C14222 * C1358;
    const double C16502 = C14222 * C51254;
    const double C14231 = C14221 * C51026;
    const double C16028 = C14221 * C1358;
    const double C16498 = C14221 * C51254;
    const double C28144 = C28138 * C51026;
    const double C29855 = C28138 * C1358;
    const double C30325 = C28138 * C51254;
    const double C28143 = C28137 * C51026;
    const double C29851 = C28137 * C1358;
    const double C30321 = C28137 * C51254;
    const double C5663 = C1056 + C1055;
    const double C5661 = C1055 + C1056;
    const double C6480 = C5486 + C5487;
    const double C7497 = C5487 + C5486;
    const double C7142 = C6768 + C6767;
    const double C7140 = C6767 + C6768;
    const double C371 = C369 * C51126;
    const double C11270 = C369 * C51271;
    const double C34162 = C369 * C34007;
    const double C8316 = C8312 + C8313;
    const double C8496 = C8474 + C8475;
    const double C9678 = C9674 + C9675;
    const double C17512 = C17508 + C17509;
    const double C17692 = C17670 + C17671;
    const double C18874 = C18870 + C18871;
    const double C532 = C530 * C51126;
    const double C11424 = C530 * C51271;
    const double C34312 = C530 * C34007;
    const double C11119 = C5665 * C51190;
    const double C34011 = C5665 * C51190;
    const double C11272 = C11271 - C1912;
    const double C13060 = C1912 - C13059;
    const double C48176 = C48174 + C48175;
    const double C48335 = C48323 + C48324;
    const double C49921 = C49917 + C49918;
    const double C23033 = C23021 + C23022;
    const double C23197 = C23185 + C23186;
    const double C24799 = C24795 + C24796;
    const double C40035 = C40028 - C6501;
    const double C145 =
        4 * ((-2 * C50075 * C50092) / C50079 + C50075 * C50106) +
        C50075 *
            (3 * C50106 +
             C50075 * ((-2 * C50075 * C50101) / C50079 +
                       C50075 * ((-((C50095 * C50096 +
                                     C50073 * bs[7] * std::pow(C50069, 7)) *
                                    C50071 * C50088) /
                                  C49932) /
                                     C50003 -
                                 C50101 / C50079)));
    const double C321 =
        (((-2 * C50075 * C50136) / C49932 -
          (C50075 * (C50087 * C50086 * C50132 * C50088 + C50136)) / C49932) *
         ae) /
            C50003 -
        ((2 * C50075 * C50137 +
          C50075 * (C50137 + C50087 * C50086 * C50131 * C50088)) *
         ce) /
            C50079 +
        C50070 * ((-2 * C50075 * C50092) / C50079 + C50075 * C50106);
    const double C492 =
        (zP - zQ) * ((-2 * C50075 * C50092) / C50079 + C50075 * C50106);
    const double C655 = (-(C50092 * C50088) / C49932) / C50003 -
                        C50083 / C50079 -
                        (ae * (C50070 * C50172 + C50173 * ce)) / C50079 -
                        ((C50070 * C50174 + C50173 * ae) * ce) / C50079 +
                        C50070 * ((-(C50174 * ce) / C49932) / C50003 -
                                  (ae * C50172) / C50079 + C50070 * C50106);
    const double C911 = (-(C50262 * C50174 * ce) / C49932) / C50003 -
                        (ae * C50262 * C50172) / C50079 +
                        C50070 * C50262 * C50106;
    const double C1033 = (-(C50092 * C50088) / C49932) / C50003 -
                         C50083 / C50079 + C50106 * std::pow(C50262, 2);
    const double C6301 = C5688 + C5687;
    const double C6300 = C5687 + C5688;
    const double C3642 =
        2 * ((-((C50137 + C50142 * C50276) * ce) / C49932) / C50003 -
             (ae * (C50141 * C50276 + C50136)) / C50079 + C50070 * C50521) -
        (ae * (C50409 * C50276 + C50310)) / C50079 -
        ((C50311 + C50410 * C50276) * ce) / C50079 +
        C50070 *
            (C50521 - (ae * (C50389 * C50276 + C50298)) / C50079 -
             ((C50301 + C50392 * C50276) * ce) / C50079 +
             C50070 *
                 ((-((C50142 + C50147 * C50276) * ce) / C49932) / C50003 -
                  (ae * (C50146 * C50276 + C50141)) / C50079 +
                  C50070 * ((-(C50118 * C50276) / C49932) / C50003 - C50112)));
    const double C3756 =
        (-2 * C50482) / C50079 + C50262 * C50521 +
        (((-2 * C50262 * C50298) / C49932 -
          (C50262 * (C50389 * C50276 + C50298)) / C49932) *
         ae) /
            C50003 -
        ((2 * C50262 * C50301 + C50262 * (C50301 + C50392 * C50276)) * ce) /
            C50079 +
        C50070 * ((((-2 * C50485) / C49932 -
                    (C50262 * (C50146 * C50276 + C50141)) / C49932) *
                   ae) /
                      C50003 -
                  ((2 * C50484 + C50262 * (C50142 + C50147 * C50276)) * ce) /
                      C50079 +
                  C50070 * ((-2 * C50486) / C50079 +
                            C50262 * ((-(C50118 * C50276) / C49932) / C50003 -
                                      C50112)));
    const double C3757 =
        (((-2 * C50262 * C50136) / C49932 -
          (C50262 * (C50141 * C50276 + C50136)) / C49932) *
         ae) /
            C50003 -
        ((2 * C50262 * C50137 + C50262 * (C50137 + C50142 * C50276)) * ce) /
            C50079 +
        C50070 * ((-2 * C50482) / C50079 + C50262 * C50521);
    const double C6295 =
        3 * ((-(C50092 * C50276) / C49932) / C50003 - C50083 / C50079) +
        C50262 * ((-2 * C50482) / C50079 + C50262 * C50521);
    const double C6469 =
        (((-3 * (C50141 * C50276 + C50136)) / C49932 +
          C50262 * ((-2 * C50485) / C49932 -
                    (C50262 * (C50146 * C50276 + C50141)) / C49932)) *
         ae) /
            C50003 -
        ((3 * (C50137 + C50142 * C50276) +
          C50262 * (2 * C50484 + C50262 * (C50142 + C50147 * C50276))) *
         ce) /
            C50079 +
        C50070 * (3 * C50521 +
                  C50262 * ((-2 * C50486) / C50079 +
                            C50262 * ((-(C50118 * C50276) / C49932) / C50003 -
                                      C50112)));
    const double C6610 =
        4 * ((-2 * C50482) / C50079 + C50262 * C50521) +
        C50262 * (3 * C50521 +
                  C50262 * ((-2 * C50486) / C50079 +
                            C50262 * ((-(C50118 * C50276) / C49932) / C50003 -
                                      C50112)));
    const double C186 = C176 * C118;
    const double C365 = C357 * C299;
    const double C1378 = C357 * C1364;
    const double C527 = C519 * C118;
    const double C693 = C687 * C637;
    const double C1512 = C687 * C1494;
    const double C1676 = C1670 * C1364;
    const double C1916 = C1670 * C299;
    const double C1059 = C1053 * C118;
    const double C11582 = C11580 * C637;
    const double C12520 = C11580 * C1494;
    const double C5504 = C5500 * C299;
    const double C6771 = C5500 * C1364;
    const double C3034 = C2446 * C3021;
    const double C25477 = C24901 * C3021;
    const double C4254 = C2446 * C3306;
    const double C14436 = C51162 * C3306;
    const double C26633 = C24901 * C3306;
    const double C28348 = C51162 * C3306;
    const double C3478 = C2446 * C3465;
    const double C5850 = C51110 * C3465;
    const double C15226 = C51162 * C3465;
    const double C23814 = C51162 * C3465;
    const double C25885 = C24901 * C3465;
    const double C4260 = C2446 * C3312;
    const double C14440 = C51162 * C3312;
    const double C26639 = C24901 * C3312;
    const double C28352 = C51162 * C3312;
    const double C3039 = C2451 * C3022;
    const double C25482 = C24906 * C3022;
    const double C4259 = C2451 * C3307;
    const double C14439 = C8258 * C3307;
    const double C26638 = C24906 * C3307;
    const double C28351 = C17454 * C3307;
    const double C3483 = C2451 * C3466;
    const double C5851 = C117 * C3466;
    const double C15229 = C8258 * C3466;
    const double C23817 = C17454 * C3466;
    const double C25890 = C24906 * C3466;
    const double C50462 = C50455 - C50424;
    const double C50420 = C50417 + C50400;
    const double C50419 = C50388 - C50416;
    const double C50599 = C50592 - C50566;
    const double C50641 = C50639 - C50622;
    const double C16038 = C16031 * C1364;
    const double C16501 = C16031 * C299;
    const double C16036 = C16029 * C1364;
    const double C16499 = C16029 * C299;
    const double C29861 = C29854 * C1364;
    const double C30324 = C29854 * C299;
    const double C29859 = C29852 * C1364;
    const double C30322 = C29852 * C299;
    const double C15010 = C14990 * C118;
    const double C15007 = C14987 * C118;
    const double C23024 = C23004 * C118;
    const double C28877 = C28875 * C118;
    const double C3026 =
        3 * ((-(ae * C50242) / C49932) / C50003 - C50236 / C50079 -
             (C50243 * ce) / C50079 + C50070 * C50340) +
        (((-2 * C50242) / C49932 - (C50070 * C50338) / C49932 -
          (C50328 * ce) / C49932) *
         ae) /
            C50003 -
        ((2 * C50243 + C50070 * C50339 + C50328 * ae) * ce) / C50079 +
        C50070 * (2 * C50340 - (ae * C50338) / C50079 - (C50339 * ce) / C50079 +
                  C50070 * ((-(ae * C50326) / C49932) / C50003 -
                            C50108 / C50079 - (C50329 * ce) / C50079 +
                            C50070 * ((-(C50200 * ce) / C49932) / C50003 -
                                      (ae * C50194) / C50079 -
                                      (C50070 * C50075 * C50118) / C50079)));
    const double C14790 = C14779 + C14780;
    const double C22844 = C22817 + C22818;
    const double C31996 = C31972 + C31973;
    const double C37384 = C37367 + C37368;
    const double C37377 = C37353 + C37354;
    const double C6131 = C6121 + C6122;
    const double C15232 = C15217 + C15218;
    const double C22851 = C22831 + C22832;
    const double C22847 = C22823 + C22824;
    const double C32169 = C32160 + C32161;
    const double C37550 = C37541 + C37542;
    const double C37712 = C37701 + C37702;
    const double C48022 = C48014 + C48015;
    const double C23201 = C23191 + C23192;
    const double C32448 = C32438 + C32439;
    const double C37829 = C37819 + C37820;
    const double C39827 = C39823 + C39824;
    const double C48339 = C48329 + C48330;
    const double C50577 = C50543 - C50563;
    const double C194 = C190 * C51126;
    const double C16040 = C16034 * C51042;
    const double C16504 = C16034 * C51042;
    const double C16037 = C16030 * C51042;
    const double C16500 = C16030 * C51042;
    const double C29863 = C29857 * C51042;
    const double C30327 = C29857 * C51042;
    const double C29860 = C29853 * C51042;
    const double C30323 = C29853 * C51042;
    const double C15009 = C14989 * C51026;
    const double C15008 = C14988 * C51026;
    const double C23023 = C23003 * C51026;
    const double C28878 = C28876 * C51026;
    const double C14792 = C14783 + C14784;
    const double C22846 = C22821 + C22822;
    const double C31999 = C31978 + C31979;
    const double C37387 = C37373 + C37374;
    const double C37380 = C37359 + C37360;
    const double C6132 = C6123 + C6124;
    const double C15234 = C15221 + C15222;
    const double C22853 = C22835 + C22836;
    const double C22849 = C22827 + C22828;
    const double C32166 = C32154 + C32155;
    const double C37547 = C37535 + C37536;
    const double C37715 = C37707 + C37708;
    const double C48024 = C48018 + C48019;
    const double C50411 = C50407 - C50384;
    const double C50124 = C50075 * C50123;
    const double C50344 = C50070 * C50123;
    const double C50533 = C50262 * C50123;
    const double C783 =
        2 * ((-(C50174 * ce) / C49932) / C50003 - (ae * C50172) / C50079 +
             C50070 * C50106) -
        (ae * (C50070 * C50250 + C50172 + C50247 * ce)) / C50079 -
        ((C50174 + C50070 * C50251 + C50247 * ae) * ce) / C50079 +
        C50070 * (C50106 - (ae * C50250) / C50079 - (C50251 * ce) / C50079 +
                  C50070 * ((-(C50151 * ce) / C49932) / C50003 -
                            (ae * C50150) / C50079 + C50070 * C50123));
    const double C912 =
        C50262 * C50106 - (ae * C50262 * C50250) / C50079 -
        (C50262 * C50251 * ce) / C50079 +
        C50070 * ((-(C50262 * C50151 * ce) / C49932) / C50003 -
                  (ae * C50262 * C50150) / C50079 + C50070 * C50262 * C50123);
    const double C1172 =
        (-((C50174 + C50151 * C50276) * ce) / C49932) / C50003 -
        (ae * (C50150 * C50276 + C50172)) / C50079 +
        C50070 * (C50106 + C50123 * C50276);
    const double C1257 =
        2 * C50262 * C50106 + C50262 * (C50106 + C50123 * C50276);
    const double C3471 =
        C50106 + C50123 * C50276 - (ae * (C50353 * C50276 + C50250)) / C50079 -
        ((C50251 + C50356 * C50276) * ce) / C50079 +
        C50070 *
            ((-((C50151 + C50215 * C50276) * ce) / C49932) / C50003 -
             (ae * (C50213 * C50276 + C50150)) / C50079 +
             C50070 *
                 (C50123 +
                  ((-((C50110 * C50111 + C50073 * bs[8] * std::pow(C50066, 8)) *
                      C50071 * C50088) /
                    C49932) /
                       C50003 -
                   C50118 / C50079) *
                      C50276));
    const double C50527 = C50526 - C50424;
    const double C50663 = C50070 * C50661;
    const double C50668 = C50262 * C50661;
    const double C3023 =
        (3 * (C50174 + C50070 * C50251 + C50247 * ae) +
         C50070 * (2 * C50251 + C50070 * C50366 + C50355 * ae) +
         (2 * C50247 + C50070 * C50355) * ae) /
        C50003;
    const double C3468 =
        (C50174 + C50070 * C50251 + C50247 * ae + C50366 * C50276) / C50003;
    const double C4245 =
        (C50262 * (2 * C50251 + C50070 * C50366 + C50355 * ae)) / C50003;
    const double C50477 = C50433 + C50474;
    const double C50610 = C50607 + C50584;
    const double C1646 =
        (C50262 * C50226 * ae) / C50003 - (C50262 * C50225 * ce) / C50079 +
        C50070 * C50262 *
            (3 * C50123 +
             C50075 * ((-2 * C50075 * C50118) / C50079 +
                       C50075 * ((-((C50110 * C50111 +
                                     C50073 * bs[8] * std::pow(C50066, 8)) *
                                    C50071 * C50088) /
                                  C49932) /
                                     C50003 -
                                 C50118 / C50079)));
    const double C138 = 5 * ((-3 * C50172) / C49932 + C50075 * C50190) +
                        C50075 * (4 * C50190 + C50075 * C50226);
    const double C317 = C50070 * (4 * C50190 + C50075 * C50226) -
                        ((4 * C50191 + C50075 * C50220) * ce) / C49932;
    const double C488 = C50262 * (4 * C50190 + C50075 * C50226);
    const double C652 = (-3 * C50172) / C49932 + C50075 * C50190 +
                        C50070 * (C50070 * C50226 - (C50220 * ce) / C49932) -
                        (C50070 * C50220 * ce) / C49932;
    const double C1029 =
        (-3 * C50172) / C49932 + C50075 * C50190 + C50226 * C50276;
    const double C1645 = C50262 * (C50070 * C50226 - (C50220 * ce) / C49932);
    const double C780 =
        2 * (C50070 * C50190 - (C50191 * ce) / C49932) +
        C50070 * (C50190 + C50070 * C50260 - (C50255 * ce) / C49932) -
        ((C50191 + C50214 * C50073) * ce) / C49932;
    const double C906 =
        C50262 * (C50190 + C50070 * C50260 - (C50255 * ce) / C49932);
    const double C1169 =
        C50070 * C50190 - (C50191 * ce) / C49932 + C50260 * C50276;
    const double C3024 =
        (-3 * (C50070 * C50250 + C50172 + C50247 * ce)) / C49932 +
        C50070 * ((-2 * C50250) / C49932 - (C50070 * C50365) / C49932 -
                  (C50355 * ce) / C49932) -
        ((2 * C50247 + C50070 * C50355) * ce) / C49932;
    const double C3467 =
        -(C50365 * C50276 + C50070 * C50250 + C50172 + C50247 * ce) / C49932;
    const double C4246 =
        C50262 * ((-2 * C50250) / C49932 - (C50070 * C50365) / C49932 -
                  (C50355 * ce) / C49932);
    const double C50476 = C50473 / C49932;
    const double C50609 = C50571 - C50606;
    const double C765 =
        ((((0 - (C49931 * C49956) / C49932) * ce) / C49932 - (0 * de) / C49961 +
          C49941 / C49932) /
             C49940 -
         ((C49931 * C49975 + 0) * de) / C49932) /
            C49940 -
        ((C49931 * (C49975 / C49940 -
                    ((C49931 * C49976 + C51254) * de) / C49932 + C49970) +
          C51301) *
         de) /
            C49932 +
        C49976 / C49940 - ((C49931 * C49970 + C51042) * de) / C49932;
    const double C766 =
        (C49975 / C49940 - ((C49931 * C49976 + C51254) * de) / C49932 +
         C49970) /
            C49940 -
        ((C49931 *
              (C49976 / C49940 - ((C49931 * C49970 + C51042) * de) / C49932) +
          C51288) *
         de) /
            C49932 +
        2 * (C49970 / C49940 - (0 * de) / C49932);
    const double C767 =
        (C49976 / C49940 - ((C49931 * C49970 + C51042) * de) / C49932) /
            C49940 -
        ((C49931 * (C49970 / C49940 - (0 * de) / C49932) + C1489) * de) /
            C49932;
    const double C1492 =
        C49975 / C49940 - ((C49931 * C49976 + C51254) * de) / C49932 + C49970;
    const double C1493 =
        C49976 / C49940 - ((C49931 * C49970 + C51042) * de) / C49932;
    const double C1385 = C1383 - C1376;
    const double C1384 = C1382 - C1372;
    const double C12366 = C12365 - C1674;
    const double C12717 = C1674 - C12716;
    const double C7149 = C1672 - C7141;
    const double C7147 = C7139 - C1672;
    const double C8153 = C8148 - C7137;
    const double C41109 = C41104 - C8149;
    const double C20284 =
        ((((0 - (C50001 * C50027) / C50003) * ae) / C50003 - (0 * be) / C50007 +
          C50002 / C50003) /
             C50028 -
         ((C50001 * C50045 + 0) * be) / C50003) /
            C50028 +
        ((C50001 * (C50045 / C50028 -
                    ((C50001 * C50047 + C51270) * be) / C50003 + C50040) +
          C51303) *
         ae) /
            C50003 +
        C50047 / C50028 - ((C50001 * C50040 + C51162) * be) / C50003;
    const double C20285 =
        (C50045 / C50028 - ((C50001 * C50047 + C51270) * be) / C50003 +
         C50040) /
            C50028 +
        ((C50001 *
              (C50047 / C50028 - ((C50001 * C50040 + C51162) * be) / C50003) +
          C51304) *
         ae) /
            C50003 +
        2 * (C50040 / C50028 - (0 * be) / C50003);
    const double C20286 =
        (C50047 / C50028 - ((C50001 * C50040 + C51162) * be) / C50003) /
            C50028 +
        ((C50001 * (C50040 / C50028 - (0 * be) / C50003) + C24901) * ae) /
            C50003;
    const double C24904 =
        C50045 / C50028 - ((C50001 * C50047 + C51270) * be) / C50003 + C50040;
    const double C24905 =
        C50047 / C50028 - ((C50001 * C50040 + C51162) * be) / C50003;
    const double C7502 = C7499 + C1911;
    const double C7501 = C7498 - C1911;
    const double C6505 = C6499 - C6479;
    const double C14237 = C14232 + C14233;
    const double C16039 = C16032 + C16033;
    const double C16506 = C16502 + C16503;
    const double C14236 = C14230 + C14231;
    const double C16035 = C16027 + C16028;
    const double C16505 = C16497 + C16498;
    const double C28149 = C28144 + C28145;
    const double C29862 = C29855 + C29856;
    const double C30329 = C30325 + C30326;
    const double C28148 = C28142 + C28143;
    const double C29858 = C29850 + C29851;
    const double C30328 = C30320 + C30321;
    const double C6494 = C6480 - C5502;
    const double C7500 = C5502 - C7497;
    const double C7150 = C6769 - C7142;
    const double C7148 = C7140 - C6769;
    const double C8318 = C8316 * C51126;
    const double C8509 = C8496 - C8507;
    const double C9679 = C9678 - C9676;
    const double C17514 = C17512 * C51126;
    const double C17705 = C17692 - C17703;
    const double C18875 = C18874 - C18872;
    const double C11122 = C11118 + C11119;
    const double C34014 = C34010 + C34011;
    const double C167 = C51110 * C145;
    const double C342 = C51110 * C321;
    const double C2486 = C2445 * C321;
    const double C8277 = C51162 * C321;
    const double C8489 = C51270 * C321;
    const double C17473 = C51162 * C321;
    const double C17685 = C17448 * C321;
    const double C24941 = C51304 * C321;
    const double C508 = C51110 * C492;
    const double C8679 = C51270 * C492;
    const double C17875 = C17448 * C492;
    const double C674 = C51110 * C655;
    const double C2466 = C2446 * C655;
    const double C2674 = C2445 * C655;
    const double C8481 = C51162 * C655;
    const double C8859 = C51270 * C655;
    const double C17677 = C51162 * C655;
    const double C18055 = C17448 * C655;
    const double C24921 = C24901 * C655;
    const double C25129 = C51304 * C655;
    const double C1659 = C51110 * C911;
    const double C2856 = C2445 * C911;
    const double C8673 = C51162 * C911;
    const double C10035 = C51270 * C911;
    const double C17869 = C51162 * C911;
    const double C19231 = C17448 * C911;
    const double C25311 = C51304 * C911;
    const double C1044 = C51110 * C1033;
    const double C9273 = C51270 * C1033;
    const double C18469 = C17448 * C1033;
    const double C22838 = C51162 * C3642;
    const double C32329 = C24901 * C3642;
    const double C37710 = C2446 * C3642;
    const double C48021 = C51162 * C3642;
    const double C23196 = C51162 * C3756;
    const double C32445 = C24901 * C3756;
    const double C37826 = C2446 * C3756;
    const double C39826 = C51110 * C3756;
    const double C48334 = C51162 * C3756;
    const double C6486 = C51110 * C3757;
    const double C15376 = C51162 * C3757;
    const double C23014 = C51162 * C3757;
    const double C23194 = C17448 * C3757;
    const double C32443 = C51304 * C3757;
    const double C37824 = C2445 * C3757;
    const double C48332 = C51270 * C3757;
    const double C6616 = C51110 * C6295;
    const double C23315 = C17448 * C6295;
    const double C48449 = C51270 * C6295;
    const double C23317 = C51162 * C6469;
    const double C40034 = C51110 * C6469;
    const double C48451 = C51162 * C6469;
    const double C40115 = C51110 * C6610;
    const double C3043 = C3033 + C3034;
    const double C25486 = C25476 + C25477;
    const double C4263 = C4253 + C4254;
    const double C14442 = C14435 + C14436;
    const double C26642 = C26632 + C26633;
    const double C28354 = C28347 + C28348;
    const double C3487 = C3477 + C3478;
    const double C5855 = C5849 + C5850;
    const double C15236 = C15225 + C15226;
    const double C23820 = C23813 + C23814;
    const double C25894 = C25884 + C25885;
    const double C4266 = C4259 + C4260;
    const double C14444 = C14439 + C14440;
    const double C26645 = C26638 + C26639;
    const double C28356 = C28351 + C28352;
    const double C3490 = C3483 + C3484;
    const double C5856 = C5851 + C5852;
    const double C15238 = C15229 + C15230;
    const double C23822 = C23817 + C23818;
    const double C25897 = C25890 + C25891;
    const double C50468 = C50462 - C50436;
    const double C3146 =
        (4 * (2 * C50234 + C50070 * C50311 + C50300 * ae) +
         C50070 * (3 * C50311 + C50070 * C50420 + C50405 * ae) +
         (3 * C50300 + C50070 * C50405) * ae) /
        C50003;
    const double C3304 =
        (C50262 * (3 * C50311 + C50070 * C50420 + C50405 * ae)) / C50003;
    const double C3638 =
        (2 * C50234 + C50070 * C50311 + C50300 * ae + C50420 * C50276) / C50003;
    const double C50421 = C50419 - C50404;
    const double C50608 = C50599 + C50605;
    const double C50643 = C50641 - C50633;
    const double C3040 = C2446 * C3026;
    const double C25483 = C24901 * C3026;
    const double C6139 = C6131 * C637;
    const double C8000 = C6131 * C1494;
    const double C48325 = C15232 + C15231;
    const double C23187 = C22847 + C22848;
    const double C39829 = C39827 * C637;
    const double C41004 = C39827 * C1494;
    const double C50585 = C50577 - C50564;
    const double C15020 = C15009 + C15010;
    const double C15019 = C15007 + C15008;
    const double C23034 = C23023 + C23024;
    const double C28879 = C28877 + C28878;
    const double C6140 = C6132 * C632;
    const double C8001 = C6132 * C1489;
    const double C48326 = C15234 + C15233;
    const double C23188 = C22849 + C22850;
    const double C50418 = C50411 + C50415;
    const double C50125 = C50115 + C50124;
    const double C50367 = C50364 + C50344;
    const double C4247 =
        2 * ((-(C50262 * C50151 * ce) / C49932) / C50003 -
             (ae * C50262 * C50150) / C50079 + C50070 * C50533) -
        (ae * C50262 * C50365) / C50079 - (C50262 * C50366 * ce) / C50079 +
        C50070 * (C50533 - (ae * C50262 * C50353) / C50079 -
                  (C50262 * C50356 * ce) / C50079 +
                  C50070 * ((-(C50262 * C50215 * ce) / C49932) / C50003 -
                            (ae * C50262 * C50213) / C50079 +
                            C50070 * C50262 *
                                ((-((C50110 * C50111 +
                                     C50073 * bs[8] * std::pow(C50066, 8)) *
                                    C50071 * C50088) /
                                  C49932) /
                                     C50003 -
                                 C50118 / C50079)));
    const double C6297 =
        3 * (C50106 + C50123 * C50276) +
        C50262 *
            (2 * C50533 +
             C50262 *
                 (C50123 +
                  ((-((C50110 * C50111 + C50073 * bs[8] * std::pow(C50066, 8)) *
                      C50071 * C50088) /
                    C49932) /
                       C50003 -
                   C50118 / C50079) *
                      C50276));
    const double C7129 =
        (((-2 * C50262 * C50150) / C49932 -
          (C50262 * (C50213 * C50276 + C50150)) / C49932) *
         ae) /
            C50003 -
        ((2 * C50262 * C50151 + C50262 * (C50151 + C50215 * C50276)) * ce) /
            C50079 +
        C50070 *
            (2 * C50533 +
             C50262 *
                 (C50123 +
                  ((-((C50110 * C50111 + C50073 * bs[8] * std::pow(C50066, 8)) *
                      C50071 * C50088) /
                    C49932) /
                       C50003 -
                   C50118 / C50079) *
                      C50276));
    const double C2676 = C2446 * C783;
    const double C8861 = C51162 * C783;
    const double C18057 = C51162 * C783;
    const double C25131 = C24901 * C783;
    const double C2858 = C2446 * C912;
    const double C10037 = C51162 * C912;
    const double C11579 = C51110 * C912;
    const double C19233 = C51162 * C912;
    const double C25313 = C24901 * C912;
    const double C5497 = C51110 * C1172;
    const double C9275 = C51162 * C1172;
    const double C18471 = C51162 * C1172;
    const double C5674 = C51110 * C1257;
    const double C3643 =
        2 * ((-((C50180 + C50200 * C50276) * ce) / C49932) / C50003 -
             (ae * (C50194 * C50276 + C50176)) / C50079 + C50070 * C50527) -
        (ae * (C50470 * C50276 + C50338)) / C50079 -
        ((C50339 + C50471 * C50276) * ce) / C50079 +
        C50070 *
            (C50527 - (ae * (C50450 * C50276 + C50326)) / C50079 -
             ((C50329 + C50453 * C50276) * ce) / C50079 +
             C50070 * ((-((C50200 + C50434 * C50276) * ce) / C49932) / C50003 -
                       (ae * (C50430 * C50276 + C50194)) / C50079 +
                       C50070 * ((-(C50075 *
                                    (C50110 * C50111 +
                                     C50073 * bs[8] * std::pow(C50066, 8)) *
                                    C50071 * C50276) /
                                  C49932) /
                                     C50003 -
                                 C50428 / C50079)));
    const double C3754 =
        (-2 * C50498) / C50079 + C50262 * C50527 +
        (((-2 * C50262 * C50326) / C49932 -
          (C50262 * (C50450 * C50276 + C50326)) / C49932) *
         ae) /
            C50003 -
        ((2 * C50262 * C50329 + C50262 * (C50329 + C50453 * C50276)) * ce) /
            C50079 +
        C50070 *
            ((((-2 * C50501) / C49932 -
               (C50262 * (C50430 * C50276 + C50194)) / C49932) *
              ae) /
                 C50003 -
             ((2 * C50500 + C50262 * (C50200 + C50434 * C50276)) * ce) /
                 C50079 +
             C50070 * ((-2 * C50502) / C50079 +
                       C50262 * ((-(C50075 *
                                    (C50110 * C50111 +
                                     C50073 * bs[8] * std::pow(C50066, 8)) *
                                    C50071 * C50276) /
                                  C49932) /
                                     C50003 -
                                 C50428 / C50079)));
    const double C3755 =
        (((-2 * C50262 * C50176) / C49932 -
          (C50262 * (C50194 * C50276 + C50176)) / C49932) *
         ae) /
            C50003 -
        ((2 * C50262 * C50180 + C50262 * (C50180 + C50200 * C50276)) * ce) /
            C50079 +
        C50070 * ((-2 * C50498) / C50079 + C50262 * C50527);
    const double C6296 =
        3 * ((-(C50108 * C50276) / C49932) / C50003 - C50236 / C50079) +
        C50262 * ((-2 * C50498) / C50079 + C50262 * C50527);
    const double C6470 =
        (((-3 * (C50194 * C50276 + C50176)) / C49932 +
          C50262 * ((-2 * C50501) / C49932 -
                    (C50262 * (C50430 * C50276 + C50194)) / C49932)) *
         ae) /
            C50003 -
        ((3 * (C50180 + C50200 * C50276) +
          C50262 * (2 * C50500 + C50262 * (C50200 + C50434 * C50276))) *
         ce) /
            C50079 +
        C50070 *
            (3 * C50527 +
             C50262 * ((-2 * C50502) / C50079 +
                       C50262 * ((-(C50075 *
                                    (C50110 * C50111 +
                                     C50073 * bs[8] * std::pow(C50066, 8)) *
                                    C50071 * C50276) /
                                  C49932) /
                                     C50003 -
                                 C50428 / C50079)));
    const double C6609 =
        4 * ((-2 * C50498) / C50079 + C50262 * C50527) +
        C50262 *
            (3 * C50527 +
             C50262 * ((-2 * C50502) / C50079 +
                       C50262 * ((-(C50075 *
                                    (C50110 * C50111 +
                                     C50073 * bs[8] * std::pow(C50066, 8)) *
                                    C50071 * C50276) /
                                  C49932) /
                                     C50003 -
                                 C50428 / C50079)));
    const double C50665 = C50664 + C50663;
    const double C50670 = C50669 + C50668;
    const double C50479 = C50477 + C50461;
    const double C50613 = C50070 * C50610;
    const double C21022 =
        (2 * C50262 * C50420 + C50262 * (C50420 + C50610 * C50276)) / C50003;
    const double C50478 = C50440 - C50476;
    const double C50612 = C50609 - C50589;
    const double C1508 = C172 * C1492;
    const double C1502 = C170 * C1492;
    const double C1496 = C168 * C1492;
    const double C6927 = C1049 * C1492;
    const double C6921 = C513 * C1492;
    const double C7996 = C5677 * C1492;
    const double C7990 = C5675 * C1492;
    const double C12516 = C515 * C1492;
    const double C41000 = C6311 * C1492;
    const double C1510 = C355 * C1493;
    const double C1504 = C352 * C1493;
    const double C1498 = C349 * C1493;
    const double C6929 = C5498 * C1493;
    const double C6923 = C1666 * C1493;
    const double C7998 = C6129 * C1493;
    const double C7992 = C6125 * C1493;
    const double C12518 = C1668 * C1493;
    const double C41002 = C6495 * C1493;
    const double C1386 = C1384 - C1373;
    const double C7153 = C7149 + C1673;
    const double C7151 = C7147 - C1673;
    const double C8154 = C8153 - C7138;
    const double C24938 = C24904 * C133;
    const double C24932 = C24904 * C122;
    const double C24930 = C24904 * C121;
    const double C24924 = C24904 * C131;
    const double C24914 = C24904 * C129;
    const double C24908 = C24904 * C120;
    const double C25126 = C24904 * C311;
    const double C25120 = C24904 * C302;
    const double C25118 = C24904 * C309;
    const double C25112 = C24904 * C301;
    const double C25308 = C24904 * C481;
    const double C25302 = C24904 * C473;
    const double C25296 = C24904 * C479;
    const double C25290 = C24904 * C472;
    const double C25478 = C24904 * C646;
    const double C25472 = C24904 * C639;
    const double C25886 = C24904 * C1024;
    const double C25880 = C24904 * C1017;
    const double C26634 = C24904 * C896;
    const double C26628 = C24904 * C885;
    const double C31570 = C24904 * C486;
    const double C31564 = C24904 * C476;
    const double C31990 = C24904 * C894;
    const double C31984 = C24904 * C884;
    const double C31982 = C24904 * C892;
    const double C31976 = C24904 * C883;
    const double C32164 = C24904 * C1016;
    const double C32158 = C24904 * C1022;
    const double C32324 = C24904 * C1163;
    const double C32318 = C24904 * C1158;
    const double C32440 = C24904 * C1254;
    const double C32434 = C24904 * C1247;
    const double C24940 = C24905 * C313;
    const double C24934 = C24905 * C303;
    const double C24928 = C24905 * C302;
    const double C24922 = C24905 * C311;
    const double C24916 = C24905 * C309;
    const double C24910 = C24905 * C301;
    const double C25128 = C24905 * C648;
    const double C25122 = C24905 * C640;
    const double C25116 = C24905 * C646;
    const double C25110 = C24905 * C639;
    const double C25310 = C24905 * C900;
    const double C25304 = C24905 * C887;
    const double C25298 = C24905 * C896;
    const double C25292 = C24905 * C885;
    const double C25480 = C24905 * C776;
    const double C25474 = C24905 * C770;
    const double C25888 = C24905 * C1165;
    const double C25882 = C24905 * C1159;
    const double C26636 = C24905 * C898;
    const double C26630 = C24905 * C886;
    const double C31572 = C24905 * C892;
    const double C31566 = C24905 * C883;
    const double C31992 = C24905 * C3303;
    const double C31986 = C24905 * C3298;
    const double C31980 = C24905 * C894;
    const double C31974 = C24905 * C884;
    const double C32162 = C24905 * C1158;
    const double C32156 = C24905 * C1163;
    const double C32326 = C24905 * C3464;
    const double C32320 = C24905 * C3460;
    const double C32442 = C24905 * C3751;
    const double C32436 = C24905 * C3745;
    const double C16042 = C16038 - C16039;
    const double C16508 = C16501 - C16506;
    const double C16041 = C16035 - C16036;
    const double C16507 = C16505 - C16499;
    const double C29865 = C29861 - C29862;
    const double C30331 = C30324 - C30329;
    const double C29864 = C29858 - C29859;
    const double C30330 = C30328 - C30322;
    const double C6500 = C6494 - C5503;
    const double C7503 = C7500 + C5503;
    const double C7154 = C7150 + C6770;
    const double C7152 = C7148 - C6770;
    const double C177 = C166 + C167;
    const double C356 = C341 + C342;
    const double C2505 = C2485 + C2486;
    const double C8300 = C8276 + C8277;
    const double C8503 = C8488 + C8489;
    const double C17496 = C17472 + C17473;
    const double C17699 = C17684 + C17685;
    const double C518 = C507 + C508;
    const double C8692 = C8678 + C8679;
    const double C17888 = C17874 + C17875;
    const double C686 = C673 + C674;
    const double C2495 = C2465 + C2466;
    const double C2687 = C2673 + C2674;
    const double C8499 = C8480 + C8481;
    const double C8868 = C8858 + C8859;
    const double C17695 = C17676 + C17677;
    const double C18064 = C18054 + C18055;
    const double C24950 = C24920 + C24921;
    const double C1669 = C1658 + C1659;
    const double C2869 = C2855 + C2856;
    const double C8689 = C8672 + C8673;
    const double C10044 = C10034 + C10035;
    const double C17885 = C17868 + C17869;
    const double C19240 = C19230 + C19231;
    const double C1052 = C1043 + C1044;
    const double C9282 = C9272 + C9273;
    const double C18478 = C18468 + C18469;
    const double C23203 = C23195 + C23196;
    const double C32451 = C32444 + C32445;
    const double C37832 = C37825 + C37826;
    const double C39828 = C39825 + C39826;
    const double C48341 = C48333 + C48334;
    const double C6496 = C6485 + C6486;
    const double C15380 = C15375 + C15376;
    const double C23029 = C23013 + C23014;
    const double C23202 = C23193 + C23194;
    const double C37831 = C37823 + C37824;
    const double C48340 = C48331 + C48332;
    const double C6618 = C6615 + C6616;
    const double C23322 = C23314 + C23315;
    const double C48456 = C48448 + C48449;
    const double C23323 = C23316 + C23317;
    const double C40037 = C40033 + C40034;
    const double C48457 = C48450 + C48451;
    const double C40117 = C40114 + C40115;
    const double C5859 = C5855 * C637;
    const double C6931 = C5855 * C1494;
    const double C5860 = C5856 * C632;
    const double C6932 = C5856 * C1489;
    const double C50475 = C50468 + C50472;
    const double C31989 = C24901 * C3304;
    const double C37370 = C2446 * C3304;
    const double C22834 = C51162 * C3638;
    const double C32323 = C24901 * C3638;
    const double C37704 = C2446 * C3638;
    const double C48017 = C51162 * C3638;
    const double C3311 =
        3 * ((-(ae * C50262 * C50298) / C49932) / C50003 - C50482 / C50079 -
             (C50262 * C50301 * ce) / C50079 + C50070 * C50496) +
        (C50262 * C50421 * ae) / C50003 - (C50262 * C50420 * ce) / C50079 +
        C50070 *
            (2 * C50496 - (ae * C50262 * C50409) / C50079 -
             (C50262 * C50410 * ce) / C50079 +
             C50070 * ((-(ae * C50262 * C50389) / C49932) / C50003 -
                       C50486 / C50079 - (C50262 * C50392 * ce) / C50079 +
                       C50070 * ((-(C50262 * C50147 * ce) / C49932) / C50003 -
                                 (ae * C50262 * C50146) / C50079 -
                                 (C50070 * C50262 * C50118) / C50079)));
    const double C3147 =
        4 * ((-2 * C50233) / C49932 - (C50070 * C50310) / C49932 -
             (C50300 * ce) / C49932) +
        C50070 * ((-3 * C50310) / C49932 + C50070 * C50421 -
                  (C50405 * ce) / C49932) -
        ((3 * C50300 + C50070 * C50405) * ce) / C49932;
    const double C3305 = C50262 * ((-3 * C50310) / C49932 + C50070 * C50421 -
                                   (C50405 * ce) / C49932);
    const double C3639 = (-2 * C50233) / C49932 - (C50070 * C50310) / C49932 -
                         (C50300 * ce) / C49932 + C50421 * C50276;
    const double C50611 = C50070 * C50608;
    const double C50646 = C50643 + C50645;
    const double C3046 = C3039 + C3040;
    const double C25489 = C25482 + C25483;
    const double C48336 = C48325 * C299;
    const double C49919 = C48325 * C1364;
    const double C23198 = C23187 * C299;
    const double C24797 = C23187 * C1364;
    const double C48337 = C48326 * C51042;
    const double C49920 = C48326 * C51042;
    const double C23199 = C23188 * C51042;
    const double C24798 = C23188 * C51042;
    const double C3150 =
        4 * (2 * C50312 - (ae * C50310) / C50079 - (C50311 * ce) / C50079 +
             C50070 * C50418) +
        (((-3 * C50310) / C49932 + C50070 * C50421 - (C50405 * ce) / C49932) *
         ae) /
            C50003 -
        ((3 * C50311 + C50070 * C50420 + C50405 * ae) * ce) / C50079 +
        C50070 *
            (3 * C50418 + (C50421 * ae) / C50003 - (C50420 * ce) / C50079 +
             C50070 *
                 (2 * C50412 - (ae * C50409) / C50079 - (C50410 * ce) / C50079 +
                  C50070 * ((-(ae * C50389) / C49932) / C50003 - C50112 -
                            (C50392 * ce) / C50079 +
                            C50070 * ((-(C50147 * ce) / C49932) / C50003 -
                                      (ae * C50146) / C50079 -
                                      (C50070 * C50118) / C50079))));
    const double C146 =
        5 * (3 * C50106 + C50075 * C50125) +
        C50075 * (4 * C50125 +
                  C50075 * (3 * C50123 +
                            C50075 * ((-2 * C50075 * C50118) / C50079 +
                                      C50075 * ((-((C50110 * C50111 +
                                                    C50073 * bs[8] *
                                                        std::pow(C50066, 8)) *
                                                   C50071 * C50088) /
                                                 C49932) /
                                                    C50003 -
                                                C50118 / C50079))));
    const double C322 =
        (((-3 * (C50141 * C50088 + C50136)) / C49932 +
          C50075 * ((-2 * C50075 * C50141) / C49932 -
                    (C50075 * (C50096 * C50095 * C50132 * C50088 + C50141)) /
                        C49932)) *
         ae) /
            C50003 -
        ((3 * (C50137 + C50142 * C50088) +
          C50075 * (2 * C50075 * C50142 +
                    C50075 * (C50142 + C50096 * C50095 * C50131 * C50088))) *
         ce) /
            C50079 +
        C50070 * (3 * C50106 + C50075 * C50125);
    const double C323 =
        ((4 * ((-2 * C50075 * C50141) / C49932 - (C50075 * C50150) / C49932) +
          C50075 * ((-3 * C50150) / C49932 +
                    C50075 * ((-2 * C50075 * C50146) / C49932 -
                              (C50075 *
                               (C50111 * C50110 * C50132 * C50088 + C50146)) /
                                  C49932))) *
         ae) /
            C50003 -
        ((4 * (2 * C50075 * C50142 + C50075 * C50151) +
          C50075 * (3 * C50151 +
                    C50075 * (2 * C50075 * C50147 +
                              C50075 * (C50147 +
                                        C50111 * C50110 * C50131 * C50088)))) *
         ce) /
            C50079 +
        C50070 * (4 * C50125 +
                  C50075 * (3 * C50123 +
                            C50075 * ((-2 * C50075 * C50118) / C50079 +
                                      C50075 * ((-((C50110 * C50111 +
                                                    C50073 * bs[8] *
                                                        std::pow(C50066, 8)) *
                                                   C50071 * C50088) /
                                                 C49932) /
                                                    C50003 -
                                                C50118 / C50079))));
    const double C493 = (zP - zQ) * (3 * C50106 + C50075 * C50125);
    const double C495 =
        (zP - zQ) *
        (4 * C50125 +
         C50075 *
             (3 * C50123 +
              C50075 * ((-2 * C50075 * C50118) / C50079 +
                        C50075 * ((-((C50110 * C50111 +
                                      C50073 * bs[8] * std::pow(C50066, 8)) *
                                     C50071 * C50088) /
                                   C49932) /
                                      C50003 -
                                  C50118 / C50079))));
    const double C656 =
        (-2 * C50075 * C50092) / C50079 + C50075 * C50106 +
        ((C50070 * C50190 - (C50191 * ce) / C49932) * ae) / C50003 -
        ((C50070 * C50189 + C50191 * ae) * ce) / C50079 +
        C50070 *
            ((C50190 * ae) / C50003 - (C50189 * ce) / C50079 + C50070 * C50125);
    const double C657 =
        3 * C50106 + C50075 * C50125 +
        ((C50070 * C50226 - (C50220 * ce) / C49932) * ae) / C50003 -
        ((C50070 * C50225 + C50220 * ae) * ce) / C50079 +
        C50070 * ((C50226 * ae) / C50003 - (C50225 * ce) / C50079 +
                  C50070 * (3 * C50123 +
                            C50075 * ((-2 * C50075 * C50118) / C50079 +
                                      C50075 * ((-((C50110 * C50111 +
                                                    C50073 * bs[8] *
                                                        std::pow(C50066, 8)) *
                                                   C50071 * C50088) /
                                                 C49932) /
                                                    C50003 -
                                                C50118 / C50079))));
    const double C784 =
        2 * ((C50190 * ae) / C50003 - (C50189 * ce) / C50079 +
             C50070 * C50125) +
        ((C50190 + C50070 * C50260 - (C50255 * ce) / C49932) * ae) / C50003 -
        ((C50189 + C50070 * C50259 + C50255 * ae) * ce) / C50079 +
        C50070 * (C50125 + (C50260 * ae) / C50003 - (C50259 * ce) / C50079 +
                  C50070 * ((C50222 * ae) / C50003 - (C50221 * ce) / C50079 +
                            C50070 * ((-2 * C50075 * C50118) / C50079 +
                                      C50075 * ((-((C50110 * C50111 +
                                                    C50073 * bs[8] *
                                                        std::pow(C50066, 8)) *
                                                   C50071 * C50088) /
                                                 C49932) /
                                                    C50003 -
                                                C50118 / C50079))));
    const double C913 = (C50262 * C50190 * ae) / C50003 -
                        (C50262 * C50189 * ce) / C50079 +
                        C50070 * C50262 * C50125;
    const double C914 =
        C50262 * C50125 + (C50262 * C50260 * ae) / C50003 -
        (C50262 * C50259 * ce) / C50079 +
        C50070 *
            ((C50262 * C50222 * ae) / C50003 - (C50262 * C50221 * ce) / C50079 +
             C50070 * C50262 *
                 ((-2 * C50075 * C50118) / C50079 +
                  C50075 * ((-((C50110 * C50111 +
                                C50073 * bs[8] * std::pow(C50066, 8)) *
                               C50071 * C50088) /
                             C49932) /
                                C50003 -
                            C50118 / C50079)));
    const double C1034 =
        (-2 * C50236) / C50079 + C50075 * C50106 + C50125 * std::pow(C50262, 2);
    const double C1035 =
        3 * C50106 + C50075 * C50125 +
        (3 * C50123 +
         C50075 *
             ((-2 * C50075 * C50118) / C50079 +
              C50075 *
                  ((-((C50110 * C50111 + C50073 * bs[8] * std::pow(C50066, 8)) *
                      C50071 * C50088) /
                    C49932) /
                       C50003 -
                   C50118 / C50079))) *
            std::pow(C50262, 2);
    const double C1173 =
        ((C50190 + C50222 * C50276) * ae) / C50003 -
        ((C50189 + C50221 * C50276) * ce) / C50079 +
        C50070 *
            (C50125 +
             ((-2 * C50075 * C50118) / C50079 +
              C50075 *
                  ((-((C50110 * C50111 + C50073 * bs[8] * std::pow(C50066, 8)) *
                      C50071 * C50088) /
                    C49932) /
                       C50003 -
                   C50118 / C50079)) *
                 C50276);
    const double C1256 =
        2 * C50262 * C50125 +
        C50262 *
            (C50125 +
             ((-2 * C50075 * C50118) / C50079 +
              C50075 *
                  ((-((C50110 * C50111 + C50073 * bs[8] * std::pow(C50066, 8)) *
                      C50071 * C50088) /
                    C49932) /
                       C50003 -
                   C50118 / C50079)) *
                 C50276);
    const double C3027 =
        3 * (C50106 - (ae * C50250) / C50079 - (C50251 * ce) / C50079 +
             C50070 * C50367) +
        (((-2 * C50250) / C49932 - (C50070 * C50365) / C49932 -
          (C50355 * ce) / C49932) *
         ae) /
            C50003 -
        ((2 * C50251 + C50070 * C50366 + C50355 * ae) * ce) / C50079 +
        C50070 *
            (2 * C50367 - (ae * C50365) / C50079 - (C50366 * ce) / C50079 +
             C50070 *
                 (C50123 - (ae * C50353) / C50079 - (C50356 * ce) / C50079 +
                  C50070 *
                      ((-(C50215 * ce) / C49932) / C50003 -
                       (ae * C50213) / C50079 +
                       C50070 * ((-((C50110 * C50111 +
                                     C50073 * bs[8] * std::pow(C50066, 8)) *
                                    C50071 * C50088) /
                                  C49932) /
                                     C50003 -
                                 C50118 / C50079))));
    const double C2688 = C2675 + C2676;
    const double C8869 = C8860 + C8861;
    const double C18065 = C18056 + C18057;
    const double C25143 = C25130 + C25131;
    const double C2870 = C2857 + C2858;
    const double C10045 = C10036 + C10037;
    const double C11581 = C11578 + C11579;
    const double C19241 = C19232 + C19233;
    const double C25325 = C25312 + C25313;
    const double C5501 = C5496 + C5497;
    const double C9283 = C9274 + C9275;
    const double C18479 = C18470 + C18471;
    const double C5682 = C5673 + C5674;
    const double C6492 = C51110 * C3755;
    const double C15006 = C51162 * C3755;
    const double C23012 = C51162 * C3755;
    const double C6309 = C51110 * C6296;
    const double C21023 =
        2 * ((((-2 * C50485) / C49932 - (C50262 * C50652) / C49932) * ae) /
                 C50003 -
             ((2 * C50484 + C50262 * C50651) * ce) / C50079 + C50070 * C50670) +
        (((-2 * C50262 * C50409) / C49932 -
          (C50262 * (C50594 * C50276 + C50409)) / C49932) *
         ae) /
            C50003 -
        ((2 * C50262 * C50410 + C50262 * (C50410 + C50597 * C50276)) * ce) /
            C50079 +
        C50070 *
            (C50670 +
             (((-2 * C50621) / C49932 -
               (C50262 * (C50572 * C50276 + C50389)) / C49932) *
              ae) /
                 C50003 -
             ((2 * C50623 + C50262 * (C50392 + C50575 * C50276)) * ce) /
                 C50079 +
             C50070 *
                 ((((-2 * C50625) / C49932 -
                    (C50262 * (C50204 * C50276 + C50146)) / C49932) *
                   ae) /
                      C50003 -
                  ((2 * C50624 + C50262 * (C50147 + C50208 * C50276)) * ce) /
                      C50079 +
                  C50070 *
                      ((-2 * C50626) / C50079 +
                       C50262 * ((-((C50110 * C50111 +
                                     C50073 * bs[8] * std::pow(C50066, 8)) *
                                    C50071 * C50276) /
                                  C49932) /
                                     C50003 -
                                 C50118 / C50079))));
    const double C23183 =
        3 * C50521 + C50262 * C50670 +
        (((-3 * (C50389 * C50276 + C50298)) / C49932 +
          C50262 * ((-2 * C50621) / C49932 -
                    (C50262 * (C50572 * C50276 + C50389)) / C49932)) *
         ae) /
            C50003 -
        ((3 * (C50301 + C50392 * C50276) +
          C50262 * (2 * C50623 + C50262 * (C50392 + C50575 * C50276))) *
         ce) /
            C50079 +
        C50070 *
            ((((-3 * C50652) / C49932 +
               C50262 * ((-2 * C50625) / C49932 -
                         (C50262 * (C50204 * C50276 + C50146)) / C49932)) *
              ae) /
                 C50003 -
             ((3 * C50651 +
               C50262 * (2 * C50624 + C50262 * (C50147 + C50208 * C50276))) *
              ce) /
                 C50079 +
             C50070 *
                 (3 * C50661 +
                  C50262 *
                      ((-2 * C50626) / C50079 +
                       C50262 * ((-((C50110 * C50111 +
                                     C50073 * bs[8] * std::pow(C50066, 8)) *
                                    C50071 * C50276) /
                                  C49932) /
                                     C50003 -
                                 C50118 / C50079))));
    const double C23306 =
        ((4 * ((-2 * C50485) / C49932 - (C50262 * C50652) / C49932) +
          C50262 *
              ((-3 * C50652) / C49932 +
               C50262 * ((-2 * C50625) / C49932 -
                         (C50262 * (C50204 * C50276 + C50146)) / C49932))) *
         ae) /
            C50003 -
        ((4 * (2 * C50484 + C50262 * C50651) +
          C50262 *
              (3 * C50651 +
               C50262 * (2 * C50624 + C50262 * (C50147 + C50208 * C50276)))) *
         ce) /
            C50079 +
        C50070 * (4 * C50670 +
                  C50262 * (3 * C50661 +
                            C50262 * ((-2 * C50626) / C50079 +
                                      C50262 * ((-((C50110 * C50111 +
                                                    C50073 * bs[8] *
                                                        std::pow(C50066, 8)) *
                                                   C50071 * C50276) /
                                                 C49932) /
                                                    C50003 -
                                                C50118 / C50079))));
    const double C40109 =
        5 * (3 * C50521 + C50262 * C50670) +
        C50262 * (4 * C50670 +
                  C50262 * (3 * C50661 +
                            C50262 * ((-2 * C50626) / C50079 +
                                      C50262 * ((-((C50110 * C50111 +
                                                    C50073 * bs[8] *
                                                        std::pow(C50066, 8)) *
                                                   C50071 * C50276) /
                                                 C49932) /
                                                    C50003 -
                                                C50118 / C50079))));
    const double C3148 =
        (4 * (2 * C50243 + C50070 * C50339 + C50328 * ae) +
         C50070 * (3 * C50339 + C50070 * C50479 + C50466 * ae) +
         (3 * C50328 + C50070 * C50466) * ae) /
        C50003;
    const double C3308 =
        (C50262 * (3 * C50339 + C50070 * C50479 + C50466 * ae)) / C50003;
    const double C3640 =
        (2 * C50243 + C50070 * C50339 + C50328 * ae + C50479 * C50276) / C50003;
    const double C50616 = C50559 + C50613;
    const double C50480 = C50478 - C50465;
    const double C50615 = C50070 * C50612;
    const double C20953 =
        3 * (C50521 - (ae * (C50389 * C50276 + C50298)) / C50079 -
             ((C50301 + C50392 * C50276) * ce) / C50079 + C50070 * C50665) +
        ((C50421 + C50612 * C50276) * ae) / C50003 -
        ((C50420 + C50610 * C50276) * ce) / C50079 +
        C50070 *
            (2 * C50665 - (ae * (C50594 * C50276 + C50409)) / C50079 -
             ((C50410 + C50597 * C50276) * ce) / C50079 +
             C50070 *
                 (C50661 - (ae * (C50572 * C50276 + C50389)) / C50079 -
                  ((C50392 + C50575 * C50276) * ce) / C50079 +
                  C50070 *
                      ((-((C50147 + C50208 * C50276) * ce) / C49932) / C50003 -
                       (ae * (C50204 * C50276 + C50146)) / C50079 +
                       C50070 * ((-((C50110 * C50111 +
                                     C50073 * bs[8] * std::pow(C50066, 8)) *
                                    C50071 * C50276) /
                                  C49932) /
                                     C50003 -
                                 C50118 / C50079))));
    const double C21021 =
        2 * C50262 * C50421 + C50262 * (C50421 + C50612 * C50276);
    const double C1388 = C1386 * C51126;
    const double C12364 = C1386 * C51271;
    const double C35240 = C1386 * C34007;
    const double C24959 = C24938 + C24939;
    const double C24956 = C24932 + C24933;
    const double C24955 = C24930 + C24931;
    const double C24952 = C24924 + C24925;
    const double C24947 = C24914 + C24915;
    const double C24944 = C24908 + C24909;
    const double C25141 = C25126 + C25127;
    const double C25138 = C25120 + C25121;
    const double C25137 = C25118 + C25119;
    const double C25134 = C25112 + C25113;
    const double C25323 = C25308 + C25309;
    const double C25320 = C25302 + C25303;
    const double C25317 = C25296 + C25297;
    const double C25314 = C25290 + C25291;
    const double C25487 = C25478 + C25479;
    const double C25484 = C25472 + C25473;
    const double C25895 = C25886 + C25887;
    const double C25892 = C25880 + C25881;
    const double C26643 = C26634 + C26635;
    const double C26640 = C26628 + C26629;
    const double C31579 = C31570 + C31571;
    const double C31576 = C31564 + C31565;
    const double C32005 = C31990 + C31991;
    const double C32002 = C31984 + C31985;
    const double C32001 = C31982 + C31983;
    const double C31998 = C31976 + C31977;
    const double C32171 = C32164 + C32165;
    const double C32168 = C32158 + C32159;
    const double C32333 = C32324 + C32325;
    const double C32330 = C32318 + C32319;
    const double C32449 = C32440 + C32441;
    const double C32446 = C32434 + C32435;
    const double C24960 = C24940 + C24941;
    const double C24957 = C24934 + C24935;
    const double C24954 = C24928 + C24929;
    const double C24951 = C24922 + C24923;
    const double C24948 = C24916 + C24917;
    const double C24945 = C24910 + C24911;
    const double C25142 = C25128 + C25129;
    const double C25139 = C25122 + C25123;
    const double C25136 = C25116 + C25117;
    const double C25133 = C25110 + C25111;
    const double C25324 = C25310 + C25311;
    const double C25321 = C25304 + C25305;
    const double C25318 = C25298 + C25299;
    const double C25315 = C25292 + C25293;
    const double C25488 = C25480 + C25481;
    const double C25485 = C25474 + C25475;
    const double C25896 = C25888 + C25889;
    const double C25893 = C25882 + C25883;
    const double C26644 = C26636 + C26637;
    const double C26641 = C26630 + C26631;
    const double C31580 = C31572 + C31573;
    const double C31577 = C31566 + C31567;
    const double C32006 = C31992 + C31993;
    const double C32003 = C31986 + C31987;
    const double C32000 = C31980 + C31981;
    const double C31997 = C31974 + C31975;
    const double C32170 = C32162 + C32163;
    const double C32167 = C32156 + C32157;
    const double C32334 = C32326 + C32327;
    const double C32331 = C32320 + C32321;
    const double C32450 = C32442 + C32443;
    const double C32447 = C32436 + C32437;
    const double C16044 = C16042 + C16040;
    const double C16510 = C16508 + C16504;
    const double C16043 = C16041 - C16037;
    const double C16509 = C16507 - C16500;
    const double C29867 = C29865 + C29863;
    const double C30333 = C30331 + C30327;
    const double C29866 = C29864 - C29860;
    const double C30332 = C30330 - C30323;
    const double C187 = C177 * C51026;
    const double C364 = C356 * C51042;
    const double C678 = C356 * C631;
    const double C1377 = C356 * C51042;
    const double C1511 = C356 * C51288;
    const double C8310 = C8300 + C8301;
    const double C17506 = C17496 + C17497;
    const double C526 = C518 * C51026;
    const double C1662 = C518 * C1358;
    const double C1917 = C518 * C51254;
    const double C692 = C686 * C632;
    const double C1507 = C686 * C1489;
    const double C8506 = C8499 + C8500;
    const double C17702 = C17695 + C17696;
    const double C1675 = C1669 * C51042;
    const double C1915 = C1669 * C51042;
    const double C11575 = C1669 * C631;
    const double C12519 = C1669 * C51288;
    const double C8694 = C8689 + C8688;
    const double C14225 = C8688 + C8689;
    const double C17890 = C17885 + C17884;
    const double C28141 = C17884 + C17885;
    const double C1058 = C1052 * C51026;
    const double C5494 = C1052 * C51254;
    const double C6772 = C1052 * C1358;
    const double C39830 = C39828 * C632;
    const double C41005 = C39828 * C1489;
    const double C6502 = C6496 * C51042;
    const double C8152 = C6496 * C51042;
    const double C39822 = C6496 * C631;
    const double C41003 = C6496 * C51288;
    const double C48442 = C15380 + C15379;
    const double C23308 = C23029 + C23030;
    const double C6620 = C6618 * C51026;
    const double C40031 = C6618 * C51254;
    const double C41106 = C6618 * C1358;
    const double C40040 = C40037 * C51042;
    const double C41108 = C40037 * C51042;
    const double C40119 = C40117 * C51026;
    const double C32004 = C31988 + C31989;
    const double C37385 = C37369 + C37370;
    const double C22852 = C22833 + C22834;
    const double C32332 = C32322 + C32323;
    const double C37713 = C37703 + C37704;
    const double C48023 = C48016 + C48017;
    const double C31995 = C24901 * C3311;
    const double C37376 = C2446 * C3311;
    const double C31994 = C24906 * C3305;
    const double C37375 = C2451 * C3305;
    const double C22837 = C17454 * C3639;
    const double C32328 = C24906 * C3639;
    const double C37709 = C2451 * C3639;
    const double C48020 = C8258 * C3639;
    const double C50614 = C50585 + C50611;
    const double C48342 = C48335 - C48336;
    const double C49922 = C49921 - C49919;
    const double C23204 = C23197 - C23198;
    const double C24800 = C24799 - C24797;
    const double C348 = C51110 * C322;
    const double C8291 = C51162 * C322;
    const double C17487 = C51162 * C322;
    const double C512 = C51110 * C493;
    const double C682 = C51110 * C656;
    const double C2488 = C2446 * C656;
    const double C8491 = C51162 * C656;
    const double C17687 = C51162 * C656;
    const double C24943 = C24901 * C656;
    const double C1665 = C51110 * C913;
    const double C8681 = C51162 * C913;
    const double C17877 = C51162 * C913;
    const double C1048 = C51110 * C1034;
    const double C11583 = C11581 * C632;
    const double C12521 = C11581 * C1489;
    const double C5505 = C5501 * C51042;
    const double C6774 = C5501 * C51042;
    const double C5690 = C5682 * C51026;
    const double C6498 = C6491 + C6492;
    const double C15018 = C15005 + C15006;
    const double C23028 = C23011 + C23012;
    const double C6313 = C6308 + C6309;
    const double C50618 = C50616 + C50598;
    const double C3151 =
        4 * (2 * C50340 - (ae * C50338) / C50079 - (C50339 * ce) / C50079 +
             C50070 * C50475) +
        (((-3 * C50338) / C49932 + C50070 * C50480 - (C50466 * ce) / C49932) *
         ae) /
            C50003 -
        ((3 * C50339 + C50070 * C50479 + C50466 * ae) * ce) / C50079 +
        C50070 *
            (3 * C50475 + (C50480 * ae) / C50003 - (C50479 * ce) / C50079 +
             C50070 *
                 (2 * C50469 - (ae * C50470) / C50079 - (C50471 * ce) / C50079 +
                  C50070 * ((-(ae * C50450) / C49932) / C50003 -
                            C50428 / C50079 - (C50453 * ce) / C50079 +
                            C50070 * ((-(C50434 * ce) / C49932) / C50003 -
                                      (ae * C50430) / C50079 -
                                      (C50070 * C50075 *
                                       (C50110 * C50111 +
                                        C50073 * bs[8] * std::pow(C50066, 8)) *
                                       C50071) /
                                          C50079))));
    const double C3313 =
        3 * ((-(ae * C50262 * C50326) / C49932) / C50003 - C50498 / C50079 -
             (C50262 * C50329 * ce) / C50079 + C50070 * C50512) +
        (C50262 * C50480 * ae) / C50003 - (C50262 * C50479 * ce) / C50079 +
        C50070 *
            (2 * C50512 - (ae * C50262 * C50470) / C50079 -
             (C50262 * C50471 * ce) / C50079 +
             C50070 * ((-(ae * C50262 * C50450) / C49932) / C50003 -
                       C50502 / C50079 - (C50262 * C50453 * ce) / C50079 +
                       C50070 * ((-(C50262 * C50434 * ce) / C49932) / C50003 -
                                 (ae * C50262 * C50430) / C50079 -
                                 (C50070 * C50262 * C50075 *
                                  (C50110 * C50111 +
                                   C50073 * bs[8] * std::pow(C50066, 8)) *
                                  C50071) /
                                     C50079)));
    const double C3149 =
        4 * ((-2 * C50242) / C49932 - (C50070 * C50338) / C49932 -
             (C50328 * ce) / C49932) +
        C50070 * ((-3 * C50338) / C49932 + C50070 * C50480 -
                  (C50466 * ce) / C49932) -
        ((3 * C50328 + C50070 * C50466) * ce) / C49932;
    const double C3309 = C50262 * ((-3 * C50338) / C49932 + C50070 * C50480 -
                                   (C50466 * ce) / C49932);
    const double C3641 = (-2 * C50242) / C49932 - (C50070 * C50338) / C49932 -
                         (C50328 * ce) / C49932 + C50480 * C50276;
    const double C50617 = C50570 + C50615;
    const double C370 = C368 - C364;
    const double C1387 = C1385 - C1377;
    const double C8314 = C8310 * C51026;
    const double C17510 = C17506 * C51026;
    const double C529 = C526 + C525;
    const double C11422 = C525 + C526;
    const double C8508 = C8506 * C51042;
    const double C9677 = C8506 * C51042;
    const double C17704 = C17702 * C51042;
    const double C18873 = C17702 * C51042;
    const double C12367 = C12366 - C1675;
    const double C12718 = C12717 + C1675;
    const double C11273 = C11272 - C1915;
    const double C13061 = C13060 + C1915;
    const double C8696 = C8694 * C51026;
    const double C14235 = C14225 * C51026;
    const double C17892 = C17890 * C51026;
    const double C28147 = C28141 * C51026;
    const double C5666 = C1057 + C1058;
    const double C5662 = C1058 + C1057;
    const double C40038 = C40035 - C6502;
    const double C41110 = C41109 - C8152;
    const double C48452 = C48442 * C51026;
    const double C23318 = C23308 * C51026;
    const double C40111 = C6620 + C6619;
    const double C32007 = C31994 + C31995;
    const double C37388 = C37375 + C37376;
    const double C22854 = C22837 + C22838;
    const double C32335 = C32328 + C32329;
    const double C37716 = C37709 + C37710;
    const double C48025 = C48020 + C48021;
    const double C48343 = C48342 - C48337;
    const double C49923 = C49922 - C49920;
    const double C23205 = C23204 - C23199;
    const double C24801 = C24800 - C24798;
    const double C358 = C347 + C348;
    const double C8307 = C8290 + C8291;
    const double C17503 = C17486 + C17487;
    const double C520 = C511 + C512;
    const double C688 = C681 + C682;
    const double C2506 = C2487 + C2488;
    const double C8504 = C8490 + C8491;
    const double C17700 = C17686 + C17687;
    const double C24961 = C24942 + C24943;
    const double C1671 = C1664 + C1665;
    const double C8693 = C8680 + C8681;
    const double C17889 = C17876 + C17877;
    const double C1054 = C1047 + C1048;
    const double C6504 = C6498 * C51042;
    const double C7146 = C6498 * C51042;
    const double C6317 = C6313 * C51026;
    const double C20649 =
        (5 * (3 * C50311 + C50070 * C50420 + C50405 * ae) +
         C50070 * (4 * C50420 + C50070 * C50618 + C50603 * ae) +
         (4 * C50405 + C50070 * C50603) * ae) /
        C50003;
    const double C20751 =
        (C50262 * (4 * C50420 + C50070 * C50618 + C50603 * ae)) / C50003;
    const double C20951 =
        (3 * C50311 + C50070 * C50420 + C50405 * ae + C50618 * C50276) / C50003;
    const double C50619 = C50617 - C50602;
    const double C372 = C370 * C51126;
    const double C1389 = C1387 * C51126;
    const double C8317 = C8314 + C8315;
    const double C17513 = C17510 + C17511;
    const double C531 = C529 * C51126;
    const double C11120 = C529 * C51190;
    const double C34012 = C529 * C51190;
    const double C8510 = C8509 - C8508;
    const double C9680 = C9679 - C9677;
    const double C17706 = C17705 - C17704;
    const double C18876 = C18875 - C18873;
    const double C12368 = C12367 * C51190;
    const double C35241 = C12367 * C51190;
    const double C11274 = C11273 * C51190;
    const double C34163 = C11273 * C51190;
    const double C8698 = C8696 + C8697;
    const double C14238 = C14234 + C14235;
    const double C17894 = C17892 + C17893;
    const double C28150 = C28146 + C28147;
    const double C11423 = C5662 * C51190;
    const double C34311 = C5662 * C51190;
    const double C48458 = C48452 + C48453;
    const double C23324 = C23318 + C23319;
    const double C366 = C358 * C51042;
    const double C1381 = C358 * C51042;
    const double C528 = C520 * C51026;
    const double C694 = C688 * C632;
    const double C1513 = C688 * C1489;
    const double C1677 = C1671 * C51042;
    const double C1919 = C1671 * C51042;
    const double C1060 = C1054 * C51026;
    const double C20651 =
        5 * (3 * C50418 + (C50421 * ae) / C50003 - (C50420 * ce) / C50079 +
             C50070 * C50614) +
        ((4 * C50421 + C50070 * C50619 - (C50603 * ce) / C49932) * ae) /
            C50003 -
        ((4 * C50420 + C50070 * C50618 + C50603 * ae) * ce) / C50079 +
        C50070 *
            (4 * C50614 + (C50619 * ae) / C50003 - (C50618 * ce) / C50079 +
             C50070 *
                 (3 * C50608 + (C50612 * ae) / C50003 - (C50610 * ce) / C50079 +
                  C50070 *
                      (2 * C50600 - (ae * C50594) / C50079 -
                       (C50597 * ce) / C50079 +
                       C50070 *
                           ((-(ae * C50572) / C49932) / C50003 -
                            C50118 / C50079 - (C50575 * ce) / C50079 +
                            C50070 * ((-(C50208 * ce) / C49932) / C50003 -
                                      (ae * C50204) / C50079 -
                                      (C50070 *
                                       (C50110 * C50111 +
                                        C50073 * bs[8] * std::pow(C50066, 8)) *
                                       C50071) /
                                          C50079)))));
    const double C20753 =
        4 * (2 * C50496 - (ae * C50262 * C50409) / C50079 -
             (C50262 * C50410 * ce) / C50079 + C50070 * C50646) +
        (C50262 * C50619 * ae) / C50003 - (C50262 * C50618 * ce) / C50079 +
        C50070 *
            (3 * C50646 + (C50262 * C50612 * ae) / C50003 -
             (C50262 * C50610 * ce) / C50079 +
             C50070 *
                 (2 * C50644 - (ae * C50262 * C50594) / C50079 -
                  (C50262 * C50597 * ce) / C50079 +
                  C50070 *
                      ((-(ae * C50262 * C50572) / C49932) / C50003 -
                       C50626 / C50079 - (C50262 * C50575 * ce) / C50079 +
                       C50070 * ((-(C50262 * C50208 * ce) / C49932) / C50003 -
                                 (ae * C50262 * C50204) / C50079 -
                                 (C50070 * C50262 *
                                  (C50110 * C50111 +
                                   C50073 * bs[8] * std::pow(C50066, 8)) *
                                  C50071) /
                                     C50079))));
    const double C20650 =
        5 * ((-3 * C50310) / C49932 + C50070 * C50421 -
             (C50405 * ce) / C49932) +
        C50070 * (4 * C50421 + C50070 * C50619 - (C50603 * ce) / C49932) -
        ((4 * C50405 + C50070 * C50603) * ce) / C49932;
    const double C20752 =
        C50262 * (4 * C50421 + C50070 * C50619 - (C50603 * ce) / C49932);
    const double C20952 = (-3 * C50310) / C49932 + C50070 * C50421 -
                          (C50405 * ce) / C49932 + C50619 * C50276;
    const double C8319 = C8317 * C51126;
    const double C17515 = C17513 * C51126;
    const double C11123 = C11120 + C11121;
    const double C34015 = C34012 + C34013;
    const double C8511 = C8510 * C51126;
    const double C9681 = C9680 * C51126;
    const double C17707 = C17706 * C51126;
    const double C18877 = C18876 * C51126;
    const double C12369 = C12364 + C12368;
    const double C35242 = C35240 + C35241;
    const double C11275 = C11270 + C11274;
    const double C34164 = C34162 + C34163;
    const double C8699 = C8698 * C51126;
    const double C17895 = C17894 * C51126;
    const double C11425 = C11423 + C11424;
    const double C34313 = C34311 + C34312;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C1363 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C1358 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C1364 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51042) *
               C51126 * C51298 +
           ((C8292 + C8293) * C1363 + (C8294 + C8295) * C1358 -
            (C8492 + C8493) * C1364 - (C8494 + C8495) * C51042) *
               C51126 * C51299 +
           C9681 * C8256) *
              C51300 +
          (((C8493 + C8492) * C1364 -
            ((C8295 + C8294) * C1358 + (C8293 + C8292) * C1363) +
            (C8495 + C8494) * C51042) *
               C51126 * C51298 +
           ((C8498 + C8497) * C1364 -
            ((C8299 + C8298) * C1358 + (C8297 + C8296) * C1363) +
            (C8500 + C8499) * C51042) *
               C51126 * C51299 +
           ((C8501 + C8502) * C1364 - (C8310 * C1358 + C8311 * C1363) +
            (C8503 + C8504) * C51042) *
               C51126 * C8256) *
              C51285 +
          (C9681 * C51298 +
           ((C8303 + C8302) * C1363 + (C8301 + C8300) * C1358 -
            (C8502 + C8501) * C1364 - (C8504 + C8503) * C51042) *
               C51126 * C51299 +
           ((C8304 + C8305) * C1363 + (C8306 + C8307) * C1358 -
            (C8258 * C642 + C51162 * C651 + C8257 * C304 + C51270 * C314) *
                C1364 -
            (C8258 * C652 + C51162 * C657 + C8257 * C315 + C51270 * C322) *
                C51042) *
               C51126 * C8256) *
              C1362) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C1492 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51301 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C1493 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51288 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C1494 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C1489) *
               C51126 * C51298 +
           ((C8292 + C8293) * C1492 + (C8294 + C8295) * C51301 -
            (C8492 + C8493) * C1493 - (C8494 + C8495) * C51288 +
            (C8862 + C8863) * C1494 + (C8864 + C8865) * C1489) *
               C51126 * C51299 +
           (C8308 * C1492 + C8309 * C51301 - C8505 * C1493 - C8506 * C51288 +
            (C8866 + C8867) * C1494 + (C8868 + C8869) * C1489) *
               C51126 * C8256) *
              C1490 +
          (((C8493 + C8492) * C1493 -
            ((C8295 + C8294) * C51301 + (C8293 + C8292) * C1492) +
            (C8495 + C8494) * C51288 - (C8863 + C8862) * C1494 -
            (C8865 + C8864) * C1489) *
               C51126 * C51298 +
           ((C8498 + C8497) * C1493 -
            ((C8299 + C8298) * C51301 + (C8297 + C8296) * C1492) +
            (C8500 + C8499) * C51288 - (C8867 + C8866) * C1494 -
            (C8869 + C8868) * C1489) *
               C51126 * C51299 +
           ((C8501 + C8502) * C1493 - (C8310 * C51301 + C8311 * C1492) +
            (C8503 + C8504) * C51288 -
            (C8258 * C772 + C51162 * C779 + C8257 * C641 + C51270 * C649) *
                C1494 -
            (C8258 * C780 + C51162 * C784 + C8257 * C650 + C51270 * C656) *
                C1489) *
               C51126 * C8256) *
              C50997) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C1363 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C1358 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C1364 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C51126 * C51298 +
            ((C8292 + C8293) * C1363 + (C8294 + C8295) * C1358 -
             (C8492 + C8493) * C1364 - (C8494 + C8495) * C51042) *
                C51126 * C51299 +
            C9681 * C8256) *
               C1490 +
           (((C8493 + C8492) * C1364 -
             ((C8295 + C8294) * C1358 + (C8293 + C8292) * C1363) +
             (C8495 + C8494) * C51042) *
                C51126 * C51298 +
            ((C8498 + C8497) * C1364 -
             ((C8299 + C8298) * C1358 + (C8297 + C8296) * C1363) +
             (C8500 + C8499) * C51042) *
                C51126 * C51299 +
            ((C8501 + C8502) * C1364 - (C8310 * C1358 + C8311 * C1363) +
             (C8503 + C8504) * C51042) *
                C51126 * C8256) *
               C50997) *
              C51256 +
          ((((C8257 * C883 + C51270 * C891 + C8258 * C884 + C51162 * C893) *
                 C1364 -
             ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                  C1358 +
              (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                  C1363) +
             (C8257 * C892 + C51270 * C907 + C8258 * C894 + C51162 * C908) *
                 C51042) *
                C51126 * C51298 +
            ((C10038 + C10039) * C1364 -
             ((C8685 + C8684) * C1358 + (C8683 + C8682) * C1363) +
             (C10040 + C10041) * C51042) *
                C51126 * C51299 +
            ((C10042 + C10043) * C1364 - (C8694 * C1358 + C8695 * C1363) +
             (C10044 + C10045) * C51042) *
                C51126 * C8256) *
               C1490 +
           (((C8682 + C8683) * C1363 + (C8684 + C8685) * C1358 -
             (C10039 + C10038) * C1364 - (C10041 + C10040) * C51042) *
                C51126 * C51298 +
            ((C8686 + C8687) * C1363 + (C8688 + C8689) * C1358 -
             (C10043 + C10042) * C1364 - (C10045 + C10044) * C51042) *
                C51126 * C51299 +
            ((C8690 + C8691) * C1363 + (C8692 + C8693) * C1358 -
             (C8258 * C890 + C51162 * C905 + C8257 * C889 + C51270 * C903) *
                 C1364 -
             (C8258 * C906 + C51162 * C914 + C8257 * C904 + C51270 * C913) *
                 C51042) *
                C51126 * C8256) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C1363 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C1358 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C1364 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C51126 * C51298 +
            ((C8292 + C8293) * C1363 + (C8294 + C8295) * C1358 -
             (C8492 + C8493) * C1364 - (C8494 + C8495) * C51042) *
                C51126 * C51299 +
            C9681 * C8256) *
               C51247 +
           (((C8493 + C8492) * C1364 -
             ((C8295 + C8294) * C1358 + (C8293 + C8292) * C1363) +
             (C8495 + C8494) * C51042) *
                C51126 * C51298 +
            ((C8498 + C8497) * C1364 -
             ((C8299 + C8298) * C1358 + (C8297 + C8296) * C1363) +
             (C8500 + C8499) * C51042) *
                C51126 * C51299 +
            ((C8501 + C8502) * C1364 - (C8310 * C1358 + C8311 * C1363) +
             (C8503 + C8504) * C51042) *
                C51126 * C8256) *
               C50997) *
              C1775 +
          ((((C8257 * C883 + C51270 * C891 + C8258 * C884 + C51162 * C893) *
                 C1364 -
             ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                  C1358 +
              (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                  C1363) +
             (C8257 * C892 + C51270 * C907 + C8258 * C894 + C51162 * C908) *
                 C51042) *
                C51126 * C51298 +
            ((C10038 + C10039) * C1364 -
             ((C8685 + C8684) * C1358 + (C8683 + C8682) * C1363) +
             (C10040 + C10041) * C51042) *
                C51126 * C51299 +
            ((C10042 + C10043) * C1364 - (C8694 * C1358 + C8695 * C1363) +
             (C10044 + C10045) * C51042) *
                C51126 * C8256) *
               C51247 +
           (((C8682 + C8683) * C1363 + (C8684 + C8685) * C1358 -
             (C10039 + C10038) * C1364 - (C10041 + C10040) * C51042) *
                C51126 * C51298 +
            ((C8686 + C8687) * C1363 + (C8688 + C8689) * C1358 -
             (C10043 + C10042) * C1364 - (C10045 + C10044) * C51042) *
                C51126 * C51299 +
            ((C8690 + C8691) * C1363 + (C8692 + C8693) * C1358 -
             (C8258 * C890 + C51162 * C905 + C8257 * C889 + C51270 * C903) *
                 C1364 -
             (C8258 * C906 + C51162 * C914 + C8257 * C904 + C51270 * C913) *
                 C51042) *
                C51126 * C8256) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C1492 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51301 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C1493 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51288 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C1494 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C1489) *
               C51126 * C51298 +
           ((C8292 + C8293) * C1492 + (C8294 + C8295) * C51301 -
            (C8492 + C8493) * C1493 - (C8494 + C8495) * C51288 +
            (C8862 + C8863) * C1494 + (C8864 + C8865) * C1489) *
               C51126 * C51299 +
           (C8308 * C1492 + C8309 * C51301 - C8505 * C1493 - C8506 * C51288 +
            (C8866 + C8867) * C1494 + (C8868 + C8869) * C1489) *
               C51126 * C8256) *
              C50992 * C1775 +
          (((C8257 * C883 + C51270 * C891 + C8258 * C884 + C51162 * C893) *
                C1493 -
            ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                 C51301 +
             (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                 C1492) +
            (C8257 * C892 + C51270 * C907 + C8258 * C894 + C51162 * C908) *
                C51288 -
            (C8258 * C3298 + C51162 * C3302 + C8257 * C884 + C51270 * C893) *
                C1494 -
            (C8258 * C3303 + C51162 * C3310 + C8257 * C894 + C51270 * C908) *
                C1489) *
               C51126 * C51298 +
           ((C10038 + C10039) * C1493 -
            ((C8685 + C8684) * C51301 + (C8683 + C8682) * C1492) +
            (C10040 + C10041) * C51288 -
            (C8258 * C3300 + C51162 * C3306 + C8257 * C886 + C51270 * C897) *
                C1494 -
            (C8258 * C3307 + C51162 * C3312 + C8257 * C898 + C51270 * C910) *
                C1489) *
               C51126 * C51299 +
           ((C10042 + C10043) * C1493 - (C8694 * C51301 + C8695 * C1492) +
            (C10044 + C10045) * C51288 -
            (C8258 * C4244 + C51162 * C4245 + C8257 * C888 + C51270 * C901) *
                C1494 -
            (C8258 * C4246 + C51162 * C4247 + C8257 * C902 + C51270 * C912) *
                C1489) *
               C51126 * C8256) *
              C50992 * C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C1363 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C1358 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C1364 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51042) *
               C51126 * C51298 +
           ((C8292 + C8293) * C1363 + (C8294 + C8295) * C1358 -
            (C8492 + C8493) * C1364 - (C8494 + C8495) * C51042) *
               C51126 * C51299 +
           C9681 * C8256) *
              C50992 * C51302 +
          (((C8257 * C883 + C51270 * C891 + C8258 * C884 + C51162 * C893) *
                C1364 -
            ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                 C1358 +
             (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                 C1363) +
            (C8257 * C892 + C51270 * C907 + C8258 * C894 + C51162 * C908) *
                C51042) *
               C51126 * C51298 +
           ((C10038 + C10039) * C1364 -
            ((C8685 + C8684) * C1358 + (C8683 + C8682) * C1363) +
            (C10040 + C10041) * C51042) *
               C51126 * C51299 +
           ((C10042 + C10043) * C1364 - (C8694 * C1358 + C8695 * C1363) +
            (C10044 + C10045) * C51042) *
               C51126 * C8256) *
              C50992 * C51291 +
          (((C8257 * C1016 + C51270 * C1021 + C8258 * C1158 + C51162 * C1162) *
                C1363 +
            (C8257 * C1022 + C51270 * C1031 + C8258 * C1163 + C51162 * C1170) *
                C1358 -
            (C8258 * C3460 + C51162 * C3463 + C8257 * C1158 + C51270 * C1162) *
                C1364 -
            (C8258 * C3464 + C51162 * C3469 + C8257 * C1163 + C51270 * C1170) *
                C51042) *
               C51126 * C51298 +
           ((C9276 + C9277) * C1363 + (C9278 + C9279) * C1358 -
            (C8258 * C3461 + C51162 * C3465 + C8257 * C1159 + C51270 * C1164) *
                C1364 -
            (C8258 * C3466 + C51162 * C3470 + C8257 * C1165 + C51270 * C1171) *
                C51042) *
               C51126 * C51299 +
           ((C9280 + C9281) * C1363 + (C9282 + C9283) * C1358 -
            (C8258 * C3462 + C51162 * C3468 + C8257 * C1160 + C51270 * C1166) *
                C1364 -
            (C8258 * C3467 + C51162 * C3471 + C8257 * C1167 + C51270 * C1172) *
                C51042) *
               C51126 * C8256) *
              C50992 * C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C635 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C630 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C636 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C631 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C637 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C632) *
               C51126 * C51298 +
           ((C8292 + C8293) * C635 + (C8294 + C8295) * C630 -
            (C8492 + C8493) * C636 - (C8494 + C8495) * C631 +
            (C8862 + C8863) * C637 + (C8864 + C8865) * C632) *
               C51126 * C51299 +
           (C8308 * C635 + C8309 * C630 - C8505 * C636 - C8506 * C631 +
            (C8866 + C8867) * C637 + (C8868 + C8869) * C632) *
               C51126 * C8256) *
              C51247 +
          (((C8493 + C8492) * C636 -
            ((C8295 + C8294) * C630 + (C8293 + C8292) * C635) +
            (C8495 + C8494) * C631 - (C8863 + C8862) * C637 -
            (C8865 + C8864) * C632) *
               C51126 * C51298 +
           ((C8498 + C8497) * C636 -
            ((C8299 + C8298) * C630 + (C8297 + C8296) * C635) +
            (C8500 + C8499) * C631 - (C8867 + C8866) * C637 -
            (C8869 + C8868) * C632) *
               C51126 * C51299 +
           ((C8501 + C8502) * C636 - (C8310 * C630 + C8311 * C635) +
            (C8503 + C8504) * C631 -
            (C8258 * C772 + C51162 * C779 + C8257 * C641 + C51270 * C649) *
                C637 -
            (C8258 * C780 + C51162 * C784 + C8257 * C650 + C51270 * C656) *
                C632) *
               C51126 * C8256) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C118 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51026) *
               C51126 * C51298 +
           ((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51126 *
               C51299 +
           C8318 * C8256) *
              C112 -
          (C8319 * C8256 +
           ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51126 *
               C51299 +
           ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51126 *
               C51298) *
              C113 +
          (C8318 * C51298 +
           ((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C51126 *
               C51299 +
           ((C8304 + C8305) * C118 + (C8306 + C8307) * C51026) * C51126 *
               C8256) *
              C114 -
          (((C8258 * C317 + C51162 * C323 + C8257 * C137 + C51270 * C145) *
                C51026 +
            (C8258 * C305 + C51162 * C316 + C8257 * C124 + C51270 * C136) *
                C118) *
               C51126 * C8256 +
           ((C8307 + C8306) * C51026 + (C8305 + C8304) * C118) * C51126 *
               C51299 +
           C8319 * C51298) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C51298 +
            ((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51126 *
                C51299 +
            C8318 * C8256) *
               C51247 -
           (C8319 * C8256 +
            ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51126 *
                C51299 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51126 *
                C51298) *
               C50997) *
              C1013 +
          ((((C8682 + C8683) * C118 + (C8684 + C8685) * C51026) * C51126 *
                C51298 +
            ((C8686 + C8687) * C118 + (C8688 + C8689) * C51026) * C51126 *
                C51299 +
            ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51126 *
                C8256) *
               C50997 -
           (C8699 * C8256 +
            ((C8685 + C8684) * C51026 + (C8683 + C8682) * C118) * C51126 *
                C51299 +
            ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                 C51026 +
             (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                 C118) *
                C51126 * C51298) *
               C51247) *
              C1014 +
          ((((C8257 * C1016 + C51270 * C1021 + C8258 * C1158 + C51162 * C1162) *
                 C118 +
             (C8257 * C1022 + C51270 * C1031 + C8258 * C1163 + C51162 * C1170) *
                 C51026) *
                C51126 * C51298 +
            ((C9276 + C9277) * C118 + (C9278 + C9279) * C51026) * C51126 *
                C51299 +
            ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51126 *
                C8256) *
               C51247 -
           (((C8258 * C1169 + C51162 * C1173 + C8257 * C1028 + C51270 * C1034) *
                 C51026 +
             (C8258 * C1161 + C51162 * C1168 + C8257 * C1019 + C51270 * C1027) *
                 C118) *
                C51126 * C8256 +
            ((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51126 *
                C51299 +
            ((C9279 + C9278) * C51026 + (C9277 + C9276) * C118) * C51126 *
                C51298) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
               C765 +
           (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
               C760 -
           (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
               C766 -
           (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
               C761 +
           (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
               C767 +
           (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
               C762 -
           (C8258 * C3016 + C51162 * C3019 + C8257 * C769 + C51270 * C773) *
               C768 -
           (C8258 * C3020 + C51162 * C3025 + C8257 * C774 + C51270 * C781) *
               C763) *
              C51126 * C51298 +
          ((C8292 + C8293) * C765 + (C8294 + C8295) * C760 -
           (C8492 + C8493) * C766 - (C8494 + C8495) * C761 +
           (C8862 + C8863) * C767 + (C8864 + C8865) * C762 -
           (C8258 * C3017 + C51162 * C3021 + C8257 * C770 + C51270 * C775) *
               C768 -
           (C8258 * C3022 + C51162 * C3026 + C8257 * C776 + C51270 * C782) *
               C763) *
              C51126 * C51299 +
          (C8308 * C765 + C8309 * C760 - C8505 * C766 - C8506 * C761 +
           (C8866 + C8867) * C767 + (C8868 + C8869) * C762 -
           (C8258 * C3018 + C51162 * C3023 + C8257 * C771 + C51270 * C777) *
               C768 -
           (C8258 * C3024 + C51162 * C3027 + C8257 * C778 + C51270 * C783) *
               C763) *
              C51126 * C8256) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C298 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51254 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C299 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51042) *
               C51126 * C51298 +
           ((C8292 + C8293) * C298 + (C8294 + C8295) * C51254 -
            (C8492 + C8493) * C299 - (C8494 + C8495) * C51042) *
               C51126 * C51299 +
           C8511 * C8256) *
              C295 +
          (((C8493 + C8492) * C299 -
            ((C8295 + C8294) * C51254 + (C8293 + C8292) * C298) +
            (C8495 + C8494) * C51042) *
               C51126 * C51298 +
           ((C8498 + C8497) * C299 -
            ((C8299 + C8298) * C51254 + (C8297 + C8296) * C298) +
            (C8500 + C8499) * C51042) *
               C51126 * C51299 +
           ((C8501 + C8502) * C299 - (C8310 * C51254 + C8311 * C298) +
            (C8503 + C8504) * C51042) *
               C51126 * C8256) *
              C296 +
          (C8511 * C51298 +
           ((C8303 + C8302) * C298 + (C8301 + C8300) * C51254 -
            (C8502 + C8501) * C299 - (C8504 + C8503) * C51042) *
               C51126 * C51299 +
           ((C8304 + C8305) * C298 + (C8306 + C8307) * C51254 -
            (C8258 * C642 + C51162 * C651 + C8257 * C304 + C51270 * C314) *
                C299 -
            (C8258 * C652 + C51162 * C657 + C8257 * C315 + C51270 * C322) *
                C51042) *
               C51126 * C8256) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C298 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51254 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C299 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51042) *
               C51126 * C51298 +
           ((C8292 + C8293) * C298 + (C8294 + C8295) * C51254 -
            (C8492 + C8493) * C299 - (C8494 + C8495) * C51042) *
               C51126 * C51299 +
           C8511 * C8256) *
              C50992 * C1013 +
          (((C8257 * C883 + C51270 * C891 + C8258 * C884 + C51162 * C893) *
                C299 -
            ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                 C51254 +
             (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                 C298) +
            (C8257 * C892 + C51270 * C907 + C8258 * C894 + C51162 * C908) *
                C51042) *
               C51126 * C51298 +
           ((C8257 * C885 + C51270 * C895 + C8258 * C886 + C51162 * C897) *
                C299 -
            ((C8685 + C8684) * C51254 + (C8683 + C8682) * C298) +
            (C8257 * C896 + C51270 * C909 + C8258 * C898 + C51162 * C910) *
                C51042) *
               C51126 * C51299 +
           ((C8257 * C887 + C51270 * C899 + C8258 * C888 + C51162 * C901) *
                C299 -
            (C8694 * C51254 + C8695 * C298) +
            (C8257 * C900 + C51270 * C911 + C8258 * C902 + C51162 * C912) *
                C51042) *
               C51126 * C8256) *
              C50992 * C1014 +
          (((C8257 * C1016 + C51270 * C1021 + C8258 * C1158 + C51162 * C1162) *
                C298 +
            (C8257 * C1022 + C51270 * C1031 + C8258 * C1163 + C51162 * C1170) *
                C51254 -
            (C8258 * C3460 + C51162 * C3463 + C8257 * C1158 + C51270 * C1162) *
                C299 -
            (C8258 * C3464 + C51162 * C3469 + C8257 * C1163 + C51270 * C1170) *
                C51042) *
               C51126 * C51298 +
           ((C9276 + C9277) * C298 + (C9278 + C9279) * C51254 -
            (C8258 * C3461 + C51162 * C3465 + C8257 * C1159 + C51270 * C1164) *
                C299 -
            (C8258 * C3466 + C51162 * C3470 + C8257 * C1165 + C51270 * C1171) *
                C51042) *
               C51126 * C51299 +
           ((C9280 + C9281) * C298 + (C9282 + C9283) * C51254 -
            (C8258 * C3462 + C51162 * C3468 + C8257 * C1160 + C51270 * C1166) *
                C299 -
            (C8258 * C3467 + C51162 * C3471 + C8257 * C1167 + C51270 * C1172) *
                C51042) *
               C51126 * C8256) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C635 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C630 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C636 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C631 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C637 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C632) *
               C51126 * C51298 +
           ((C8292 + C8293) * C635 + (C8294 + C8295) * C630 -
            (C8492 + C8493) * C636 - (C8494 + C8495) * C631 +
            (C8862 + C8863) * C637 + (C8864 + C8865) * C632) *
               C51126 * C51299 +
           (C8308 * C635 + C8309 * C630 - C8505 * C636 - C8506 * C631 +
            (C8866 + C8867) * C637 + (C8868 + C8869) * C632) *
               C51126 * C8256) *
              C50992 * C51256 +
          (((C8257 * C883 + C51270 * C891 + C8258 * C884 + C51162 * C893) *
                C636 -
            ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                 C630 +
             (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                 C635) +
            (C8257 * C892 + C51270 * C907 + C8258 * C894 + C51162 * C908) *
                C631 -
            (C8258 * C3298 + C51162 * C3302 + C8257 * C884 + C51270 * C893) *
                C637 -
            (C8258 * C3303 + C51162 * C3310 + C8257 * C894 + C51270 * C908) *
                C632) *
               C51126 * C51298 +
           ((C8257 * C885 + C51270 * C895 + C8258 * C886 + C51162 * C897) *
                C636 -
            ((C8685 + C8684) * C630 + (C8683 + C8682) * C635) +
            (C8257 * C896 + C51270 * C909 + C8258 * C898 + C51162 * C910) *
                C631 -
            (C8258 * C3300 + C51162 * C3306 + C8257 * C886 + C51270 * C897) *
                C637 -
            (C8258 * C3307 + C51162 * C3312 + C8257 * C898 + C51270 * C910) *
                C632) *
               C51126 * C51299 +
           ((C8257 * C887 + C51270 * C899 + C8258 * C888 + C51162 * C901) *
                C636 -
            (C8694 * C630 + C8695 * C635) +
            (C8257 * C900 + C51270 * C911 + C8258 * C902 + C51162 * C912) *
                C631 -
            (C8258 * C4244 + C51162 * C4245 + C8257 * C888 + C51270 * C901) *
                C637 -
            (C8258 * C4246 + C51162 * C4247 + C8257 * C902 + C51270 * C912) *
                C632) *
               C51126 * C8256) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C51298 +
            ((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51126 *
                C51299 +
            C8318 * C8256) *
               C295 -
           (C8319 * C8256 +
            ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51126 *
                C51299 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51126 *
                C51298) *
               C296 +
           (C8318 * C51298 +
            ((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C51126 *
                C51299 +
            ((C8304 + C8305) * C118 + (C8306 + C8307) * C51026) * C51126 *
                C8256) *
               C297) *
              C51256 +
          ((((C8682 + C8683) * C118 + (C8684 + C8685) * C51026) * C51126 *
                C51298 +
            ((C8686 + C8687) * C118 + (C8688 + C8689) * C51026) * C51126 *
                C51299 +
            ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51126 *
                C8256) *
               C296 -
           (C8699 * C8256 +
            ((C8685 + C8684) * C51026 + (C8683 + C8682) * C118) * C51126 *
                C51299 +
            ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                 C51026 +
             (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                 C118) *
                C51126 * C51298) *
               C295 -
           (((C8258 * C1645 + C51162 * C1646 + C8257 * C485 + C51270 * C493) *
                 C51026 +
             (C8258 * C1643 + C51162 * C1644 + C8257 * C475 + C51270 * C484) *
                 C118) *
                C51126 * C8256 +
            ((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C51126 *
                C51299 +
            C8699 * C51298) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C118 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51026) *
               C51126 * C51298 +
           ((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51126 *
               C51299 +
           C8318 * C8256) *
              C50992 * C1240 -
          (C8699 * C8256 +
           ((C8685 + C8684) * C51026 + (C8683 + C8682) * C118) * C51126 *
               C51299 +
           ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                C51026 +
            (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                C118) *
               C51126 * C51298) *
              C50992 * C1241 +
          (((C8257 * C1016 + C51270 * C1021 + C8258 * C1158 + C51162 * C1162) *
                C118 +
            (C8257 * C1022 + C51270 * C1031 + C8258 * C1163 + C51162 * C1170) *
                C51026) *
               C51126 * C51298 +
           ((C9276 + C9277) * C118 + (C9278 + C9279) * C51026) * C51126 *
               C51299 +
           ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51126 *
               C8256) *
              C50992 * C1242 -
          (((C8258 * C7128 + C51162 * C7129 + C8257 * C1250 + C51270 * C1257) *
                C51026 +
            (C8258 * C7126 + C51162 * C7127 + C8257 * C1245 + C51270 * C1251) *
                C118) *
               C51126 * C8256 +
           ((C8258 * C3747 + C51162 * C3755 + C8257 * C1252 + C51270 * C1258) *
                C51026 +
            (C8258 * C3743 + C51162 * C3749 + C8257 * C1246 + C51270 * C1253) *
                C118) *
               C51126 * C51299 +
           ((C8258 * C3751 + C51162 * C3757 + C8257 * C1254 + C51270 * C1259) *
                C51026 +
            (C8258 * C3745 + C51162 * C3753 + C8257 * C1247 + C51270 * C1255) *
                C118) *
               C51126 * C51298) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C51298 +
            ((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51126 *
                C51299 +
            C8318 * C8256) *
               C51300 -
           (C8319 * C8256 +
            ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51126 *
                C51299 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51126 *
                C51298) *
               C51285 +
           (C8318 * C51298 +
            ((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C51126 *
                C51299 +
            ((C8304 + C8305) * C118 + (C8306 + C8307) * C51026) * C51126 *
                C8256) *
               C1362) *
              C1775 +
          ((((C8682 + C8683) * C118 + (C8684 + C8685) * C51026) * C51126 *
                C51298 +
            ((C8686 + C8687) * C118 + (C8688 + C8689) * C51026) * C51126 *
                C51299 +
            ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51126 *
                C8256) *
               C51285 -
           (C8699 * C8256 +
            ((C8685 + C8684) * C51026 + (C8683 + C8682) * C118) * C51126 *
                C51299 +
            ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                 C51026 +
             (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                 C118) *
                C51126 * C51298) *
               C51300 -
           (((C8258 * C1645 + C51162 * C1646 + C8257 * C485 + C51270 * C493) *
                 C51026 +
             (C8258 * C1643 + C51162 * C1644 + C8257 * C475 + C51270 * C484) *
                 C118) *
                C51126 * C8256 +
            ((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C51126 *
                C51299 +
            C8699 * C51298) *
               C1362) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C298 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51254 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C299 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C51126 * C51298 +
            ((C8292 + C8293) * C298 + (C8294 + C8295) * C51254 -
             (C8492 + C8493) * C299 - (C8494 + C8495) * C51042) *
                C51126 * C51299 +
            C8511 * C8256) *
               C1490 +
           (((C8493 + C8492) * C299 -
             ((C8295 + C8294) * C51254 + (C8293 + C8292) * C298) +
             (C8495 + C8494) * C51042) *
                C51126 * C51298 +
            ((C8498 + C8497) * C299 -
             ((C8299 + C8298) * C51254 + (C8297 + C8296) * C298) +
             (C8500 + C8499) * C51042) *
                C51126 * C51299 +
            ((C8501 + C8502) * C299 - (C8310 * C51254 + C8311 * C298) +
             (C8503 + C8504) * C51042) *
                C51126 * C8256) *
               C50997) *
              C1775 +
          ((((C8257 * C883 + C51270 * C891 + C8258 * C884 + C51162 * C893) *
                 C299 -
             ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                  C51254 +
              (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                  C298) +
             (C8257 * C892 + C51270 * C907 + C8258 * C894 + C51162 * C908) *
                 C51042) *
                C51126 * C51298 +
            ((C10038 + C10039) * C299 -
             ((C8685 + C8684) * C51254 + (C8683 + C8682) * C298) +
             (C10040 + C10041) * C51042) *
                C51126 * C51299 +
            ((C10042 + C10043) * C299 - (C8694 * C51254 + C8695 * C298) +
             (C10044 + C10045) * C51042) *
                C51126 * C8256) *
               C1490 +
           (((C8682 + C8683) * C298 + (C8684 + C8685) * C51254 -
             (C10039 + C10038) * C299 - (C10041 + C10040) * C51042) *
                C51126 * C51298 +
            ((C8686 + C8687) * C298 + (C8688 + C8689) * C51254 -
             (C10043 + C10042) * C299 - (C10045 + C10044) * C51042) *
                C51126 * C51299 +
            ((C8690 + C8691) * C298 + (C8692 + C8693) * C51254 -
             (C8258 * C890 + C51162 * C905 + C8257 * C889 + C51270 * C903) *
                 C299 -
             (C8258 * C906 + C51162 * C914 + C8257 * C904 + C51270 * C913) *
                 C51042) *
                C51126 * C8256) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C51298 +
            ((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51126 *
                C51299 +
            C8318 * C8256) *
               C1490 -
           (C8319 * C8256 +
            ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51126 *
                C51299 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51126 *
                C51298) *
               C50997) *
              C51302 +
          ((((C8682 + C8683) * C118 + (C8684 + C8685) * C51026) * C51126 *
                C51298 +
            ((C8686 + C8687) * C118 + (C8688 + C8689) * C51026) * C51126 *
                C51299 +
            ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51126 *
                C8256) *
               C50997 -
           (C8699 * C8256 +
            ((C8685 + C8684) * C51026 + (C8683 + C8682) * C118) * C51126 *
                C51299 +
            ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                 C51026 +
             (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                 C118) *
                C51126 * C51298) *
               C1490) *
              C51291 +
          ((((C8257 * C1016 + C51270 * C1021 + C8258 * C1158 + C51162 * C1162) *
                 C118 +
             (C8257 * C1022 + C51270 * C1031 + C8258 * C1163 + C51162 * C1170) *
                 C51026) *
                C51126 * C51298 +
            ((C9276 + C9277) * C118 + (C9278 + C9279) * C51026) * C51126 *
                C51299 +
            ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51126 *
                C8256) *
               C1490 -
           (((C8258 * C1169 + C51162 * C1173 + C8257 * C1028 + C51270 * C1034) *
                 C51026 +
             (C8258 * C1161 + C51162 * C1168 + C8257 * C1019 + C51270 * C1027) *
                 C118) *
                C51126 * C8256 +
            ((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51126 *
                C51299 +
            ((C9279 + C9278) * C51026 + (C9277 + C9276) * C118) * C51126 *
                C51298) *
               C50997) *
              C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C118 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51026) *
               C51126 * C51298 +
           ((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51126 *
               C51299 +
           C8318 * C8256) *
              C112 -
          (C8319 * C8256 +
           ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51126 *
               C51299 +
           ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51126 *
               C51298) *
              C113 +
          (C8318 * C51298 +
           ((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C51126 *
               C51299 +
           ((C8304 + C8305) * C118 + (C8306 + C8307) * C51026) * C51126 *
               C8256) *
              C114 -
          (((C8258 * C317 + C51162 * C323 + C8257 * C137 + C51270 * C145) *
                C51026 +
            (C8258 * C305 + C51162 * C316 + C8257 * C124 + C51270 * C136) *
                C118) *
               C51126 * C8256 +
           ((C8307 + C8306) * C51026 + (C8305 + C8304) * C118) * C51126 *
               C51299 +
           C8319 * C51298) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C635 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C630 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C636 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C631 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C637 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C632) *
               C51126 * C51298 +
           ((C8292 + C8293) * C635 + (C8294 + C8295) * C630 -
            (C8492 + C8493) * C636 - (C8494 + C8495) * C631 +
            (C8862 + C8863) * C637 + (C8864 + C8865) * C632) *
               C51126 * C51299 +
           (C8308 * C635 + C8309 * C630 - C8505 * C636 - C8506 * C631 +
            (C8866 + C8867) * C637 + (C8868 + C8869) * C632) *
               C51126 * C8256) *
              C51247 +
          (((C8493 + C8492) * C636 -
            ((C8295 + C8294) * C630 + (C8293 + C8292) * C635) +
            (C8495 + C8494) * C631 - (C8863 + C8862) * C637 -
            (C8865 + C8864) * C632) *
               C51126 * C51298 +
           ((C8498 + C8497) * C636 -
            ((C8299 + C8298) * C630 + (C8297 + C8296) * C635) +
            (C8500 + C8499) * C631 - (C8867 + C8866) * C637 -
            (C8869 + C8868) * C632) *
               C51126 * C51299 +
           ((C8501 + C8502) * C636 - (C8310 * C630 + C8311 * C635) +
            (C8503 + C8504) * C631 -
            (C8258 * C772 + C51162 * C779 + C8257 * C641 + C51270 * C649) *
                C637 -
            (C8258 * C780 + C51162 * C784 + C8257 * C650 + C51270 * C656) *
                C632) *
               C51126 * C8256) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C298 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51254 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C299 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51042) *
               C51126 * C51298 +
           ((C8292 + C8293) * C298 + (C8294 + C8295) * C51254 -
            (C8492 + C8493) * C299 - (C8494 + C8495) * C51042) *
               C51126 * C51299 +
           C8511 * C8256) *
              C295 +
          (((C8493 + C8492) * C299 -
            ((C8295 + C8294) * C51254 + (C8293 + C8292) * C298) +
            (C8495 + C8494) * C51042) *
               C51126 * C51298 +
           ((C8498 + C8497) * C299 -
            ((C8299 + C8298) * C51254 + (C8297 + C8296) * C298) +
            (C8500 + C8499) * C51042) *
               C51126 * C51299 +
           ((C8501 + C8502) * C299 - (C8310 * C51254 + C8311 * C298) +
            (C8503 + C8504) * C51042) *
               C51126 * C8256) *
              C296 +
          (C8511 * C51298 +
           ((C8303 + C8302) * C298 + (C8301 + C8300) * C51254 -
            (C8502 + C8501) * C299 - (C8504 + C8503) * C51042) *
               C51126 * C51299 +
           ((C8304 + C8305) * C298 + (C8306 + C8307) * C51254 -
            (C8258 * C642 + C51162 * C651 + C8257 * C304 + C51270 * C314) *
                C299 -
            (C8258 * C652 + C51162 * C657 + C8257 * C315 + C51270 * C322) *
                C51042) *
               C51126 * C8256) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
               C765 +
           (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
               C760 -
           (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
               C766 -
           (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
               C761 +
           (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
               C767 +
           (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
               C762 -
           (C8258 * C3016 + C51162 * C3019 + C8257 * C769 + C51270 * C773) *
               C768 -
           (C8258 * C3020 + C51162 * C3025 + C8257 * C774 + C51270 * C781) *
               C763) *
              C51126 * C51298 +
          ((C8292 + C8293) * C765 + (C8294 + C8295) * C760 -
           (C8492 + C8493) * C766 - (C8494 + C8495) * C761 +
           (C8862 + C8863) * C767 + (C8864 + C8865) * C762 -
           (C8258 * C3017 + C51162 * C3021 + C8257 * C770 + C51270 * C775) *
               C768 -
           (C8258 * C3022 + C51162 * C3026 + C8257 * C776 + C51270 * C782) *
               C763) *
              C51126 * C51299 +
          (C8308 * C765 + C8309 * C760 - C8505 * C766 - C8506 * C761 +
           (C8866 + C8867) * C767 + (C8868 + C8869) * C762 -
           (C8258 * C3018 + C51162 * C3023 + C8257 * C771 + C51270 * C777) *
               C768 -
           (C8258 * C3024 + C51162 * C3027 + C8257 * C778 + C51270 * C783) *
               C763) *
              C51126 * C8256) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C51298 +
            ((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51126 *
                C51299 +
            C8318 * C8256) *
               C295 -
           (C8319 * C8256 +
            ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51126 *
                C51299 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51126 *
                C51298) *
               C296 +
           (C8318 * C51298 +
            ((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C51126 *
                C51299 +
            ((C8304 + C8305) * C118 + (C8306 + C8307) * C51026) * C51126 *
                C8256) *
               C297) *
              C51256 +
          ((((C8682 + C8683) * C118 + (C8684 + C8685) * C51026) * C51126 *
                C51298 +
            ((C8686 + C8687) * C118 + (C8688 + C8689) * C51026) * C51126 *
                C51299 +
            ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51126 *
                C8256) *
               C296 -
           (C8699 * C8256 +
            ((C8685 + C8684) * C51026 + (C8683 + C8682) * C118) * C51126 *
                C51299 +
            ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                 C51026 +
             (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                 C118) *
                C51126 * C51298) *
               C295 -
           (((C8258 * C1645 + C51162 * C1646 + C8257 * C485 + C51270 * C493) *
                 C51026 +
             (C8258 * C1643 + C51162 * C1644 + C8257 * C475 + C51270 * C484) *
                 C118) *
                C51126 * C8256 +
            ((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C51126 *
                C51299 +
            C8699 * C51298) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C635 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C630 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C636 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C631 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C637 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C632) *
               C51126 * C51298 +
           ((C8292 + C8293) * C635 + (C8294 + C8295) * C630 -
            (C8492 + C8493) * C636 - (C8494 + C8495) * C631 +
            (C8862 + C8863) * C637 + (C8864 + C8865) * C632) *
               C51126 * C51299 +
           (C8308 * C635 + C8309 * C630 - C8505 * C636 - C8506 * C631 +
            (C8866 + C8867) * C637 + (C8868 + C8869) * C632) *
               C51126 * C8256) *
              C50992 * C51256 +
          (((C8257 * C883 + C51270 * C891 + C8258 * C884 + C51162 * C893) *
                C636 -
            ((C8258 * C892 + C51162 * C907 + C8257 * C486 + C51270 * C494) *
                 C630 +
             (C8258 * C883 + C51162 * C891 + C8257 * C476 + C51270 * C487) *
                 C635) +
            (C8257 * C892 + C51270 * C907 + C8258 * C894 + C51162 * C908) *
                C631 -
            (C8258 * C3298 + C51162 * C3302 + C8257 * C884 + C51270 * C893) *
                C637 -
            (C8258 * C3303 + C51162 * C3310 + C8257 * C894 + C51270 * C908) *
                C632) *
               C51126 * C51298 +
           ((C8257 * C885 + C51270 * C895 + C8258 * C886 + C51162 * C897) *
                C636 -
            ((C8685 + C8684) * C630 + (C8683 + C8682) * C635) +
            (C8257 * C896 + C51270 * C909 + C8258 * C898 + C51162 * C910) *
                C631 -
            (C8258 * C3300 + C51162 * C3306 + C8257 * C886 + C51270 * C897) *
                C637 -
            (C8258 * C3307 + C51162 * C3312 + C8257 * C898 + C51270 * C910) *
                C632) *
               C51126 * C51299 +
           ((C8257 * C887 + C51270 * C899 + C8258 * C888 + C51162 * C901) *
                C636 -
            (C8694 * C630 + C8695 * C635) +
            (C8257 * C900 + C51270 * C911 + C8258 * C902 + C51162 * C912) *
                C631 -
            (C8258 * C4244 + C51162 * C4245 + C8257 * C888 + C51270 * C901) *
                C637 -
            (C8258 * C4246 + C51162 * C4247 + C8257 * C902 + C51270 * C912) *
                C632) *
               C51126 * C8256) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C1363 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C1358 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C1364 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C51271 +
            ((C14226 + C14227) * C1363 + (C14228 + C14229) * C1358 -
             (C14785 + C14786) * C1364 - (C14787 + C14788) * C51042) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C1363 + (C8294 + C8295) * C1358 -
             (C8492 + C8493) * C1364 - (C8494 + C8495) * C51042) *
                C51271 +
            (C14220 * C1363 + C14221 * C1358 - (C10039 + C10038) * C1364 -
             (C10041 + C10040) * C51042) *
                C51190) *
               C50978) *
              C51300 +
          ((((C8493 + C8492) * C1364 -
             ((C8295 + C8294) * C1358 + (C8293 + C8292) * C1363) +
             (C8495 + C8494) * C51042) *
                C51271 +
            ((C10038 + C10039) * C1364 - (C14222 * C1358 + C14223 * C1363) +
             (C10040 + C10041) * C51042) *
                C51190) *
               C2447 +
           (((C8498 + C8497) * C1364 -
             ((C8299 + C8298) * C1358 + (C8297 + C8296) * C1363) +
             (C8500 + C8499) * C51042) *
                C51271 +
            ((C10042 + C10043) * C1364 - (C8694 * C1358 + C8695 * C1363) +
             (C10044 + C10045) * C51042) *
                C51190) *
               C50978) *
              C51285 +
          ((C9680 * C51271 +
            (C14224 * C1363 + C14225 * C1358 - (C10043 + C10042) * C1364 -
             (C10045 + C10044) * C51042) *
                C51190) *
               C2447 +
           (((C8303 + C8302) * C1363 + (C8301 + C8300) * C1358 -
             (C8502 + C8501) * C1364 - (C8504 + C8503) * C51042) *
                C51271 +
            ((C8690 + C8691) * C1363 + (C8692 + C8693) * C1358 -
             (C8258 * C890 + C51162 * C905 + C8257 * C889 + C51270 * C903) *
                 C1364 -
             (C8258 * C906 + C51162 * C914 + C8257 * C904 + C51270 * C913) *
                 C51042) *
                C51190) *
               C50978) *
              C1362) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C1492 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51301 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C1493 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51288 +
             (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                 C1494 +
             (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                 C1489) *
                C51271 +
            ((C14226 + C14227) * C1492 + (C14228 + C14229) * C51301 -
             (C14785 + C14786) * C1493 - (C14787 + C14788) * C51288 +
             (C14789 + C14790) * C1494 + (C14791 + C14792) * C1489) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C1492 + (C8294 + C8295) * C51301 -
             (C8492 + C8493) * C1493 - (C8494 + C8495) * C51288 +
             (C8862 + C8863) * C1494 + (C8864 + C8865) * C1489) *
                C51271 +
            (C14220 * C1492 + C14221 * C51301 - (C10039 + C10038) * C1493 -
             (C10041 + C10040) * C51288 + (C14441 + C14442) * C1494 +
             (C14443 + C14444) * C1489) *
                C51190) *
               C50978) *
              C1490 +
          ((((C8493 + C8492) * C1493 -
             ((C8295 + C8294) * C51301 + (C8293 + C8292) * C1492) +
             (C8495 + C8494) * C51288 - (C8863 + C8862) * C1494 -
             (C8865 + C8864) * C1489) *
                C51271 +
            ((C10038 + C10039) * C1493 - (C14222 * C51301 + C14223 * C1492) +
             (C10040 + C10041) * C51288 - (C14442 + C14441) * C1494 -
             (C14444 + C14443) * C1489) *
                C51190) *
               C2447 +
           (((C8498 + C8497) * C1493 -
             ((C8299 + C8298) * C51301 + (C8297 + C8296) * C1492) +
             (C8500 + C8499) * C51288 - (C8867 + C8866) * C1494 -
             (C8869 + C8868) * C1489) *
                C51271 +
            ((C10042 + C10043) * C1493 - (C8694 * C51301 + C8695 * C1492) +
             (C10044 + C10045) * C51288 -
             (C8258 * C4244 + C51162 * C4245 + C8257 * C888 + C51270 * C901) *
                 C1494 -
             (C8258 * C4246 + C51162 * C4247 + C8257 * C902 + C51270 * C912) *
                 C1489) *
                C51190) *
               C50978) *
              C50997) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C1363 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C1358 -
              (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                  C1364 -
              (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                  C51042) *
                 C51271 +
             ((C14226 + C14227) * C1363 + (C14228 + C14229) * C1358 -
              (C14785 + C14786) * C1364 - (C14787 + C14788) * C51042) *
                 C51190) *
                C2447 +
            (((C8292 + C8293) * C1363 + (C8294 + C8295) * C1358 -
              (C8492 + C8493) * C1364 - (C8494 + C8495) * C51042) *
                 C51271 +
             C16043 * C51190) *
                C50978) *
               C1490 +
           ((((C8493 + C8492) * C1364 -
              ((C8295 + C8294) * C1358 + (C8293 + C8292) * C1363) +
              (C8495 + C8494) * C51042) *
                 C51271 +
             C16044 * C51190) *
                C2447 +
            (((C8498 + C8497) * C1364 -
              ((C8299 + C8298) * C1358 + (C8297 + C8296) * C1363) +
              (C8500 + C8499) * C51042) *
                 C51271 +
             ((C10042 + C10043) * C1364 - (C8694 * C1358 + C8695 * C1363) +
              (C10044 + C10045) * C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C51256 +
          (((((C14786 + C14785) * C1364 -
              ((C14229 + C14228) * C1358 + (C14227 + C14226) * C1363) +
              (C14788 + C14787) * C51042) *
                 C51271 +
             ((C15231 + C15232) * C1364 -
              ((C15011 + C15012) * C1358 + (C15013 + C15014) * C1363) +
              (C15233 + C15234) * C51042) *
                 C51190) *
                C2447 +
            (C16044 * C51271 +
             ((C15235 + C15236) * C1364 - (C14989 * C1358 + C14990 * C1363) +
              (C15237 + C15238) * C51042) *
                 C51190) *
                C50978) *
               C1490 +
           ((C16043 * C51271 +
             (C14987 * C1363 + C14988 * C1358 - (C15236 + C15235) * C1364 -
              (C15238 + C15237) * C51042) *
                 C51190) *
                C2447 +
            ((C14224 * C1363 + C14225 * C1358 - (C10043 + C10042) * C1364 -
              (C10045 + C10044) * C51042) *
                 C51271 +
             ((C9280 + C9281) * C1363 + (C9282 + C9283) * C1358 -
              (C8258 * C3462 + C51162 * C3468 + C8257 * C1160 +
               C51270 * C1166) *
                  C1364 -
              (C8258 * C3467 + C51162 * C3471 + C8257 * C1167 +
               C51270 * C1172) *
                  C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C1363 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C1358 -
              (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                  C1364 -
              (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                  C51042) *
                 C51271 +
             ((C14226 + C14227) * C1363 + (C14228 + C14229) * C1358 -
              (C14785 + C14786) * C1364 - (C14787 + C14788) * C51042) *
                 C51190) *
                C2447 +
            (((C8292 + C8293) * C1363 + (C8294 + C8295) * C1358 -
              (C8492 + C8493) * C1364 - (C8494 + C8495) * C51042) *
                 C51271 +
             C16043 * C51190) *
                C50978) *
               C51247 +
           ((((C8493 + C8492) * C1364 -
              ((C8295 + C8294) * C1358 + (C8293 + C8292) * C1363) +
              (C8495 + C8494) * C51042) *
                 C51271 +
             C16044 * C51190) *
                C2447 +
            (((C8498 + C8497) * C1364 -
              ((C8299 + C8298) * C1358 + (C8297 + C8296) * C1363) +
              (C8500 + C8499) * C51042) *
                 C51271 +
             ((C10042 + C10043) * C1364 - (C8694 * C1358 + C8695 * C1363) +
              (C10044 + C10045) * C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C1775 +
          (((((C14786 + C14785) * C1364 -
              ((C14229 + C14228) * C1358 + (C14227 + C14226) * C1363) +
              (C14788 + C14787) * C51042) *
                 C51271 +
             ((C15231 + C15232) * C1364 -
              ((C15011 + C15012) * C1358 + (C15013 + C15014) * C1363) +
              (C15233 + C15234) * C51042) *
                 C51190) *
                C2447 +
            (C16044 * C51271 +
             ((C15235 + C15236) * C1364 - (C14989 * C1358 + C14990 * C1363) +
              (C15237 + C15238) * C51042) *
                 C51190) *
                C50978) *
               C51247 +
           ((C16043 * C51271 +
             (C14987 * C1363 + C14988 * C1358 - (C15236 + C15235) * C1364 -
              (C15238 + C15237) * C51042) *
                 C51190) *
                C2447 +
            ((C14224 * C1363 + C14225 * C1358 - (C10043 + C10042) * C1364 -
              (C10045 + C10044) * C51042) *
                 C51271 +
             ((C9280 + C9281) * C1363 + (C9282 + C9283) * C1358 -
              (C8258 * C3462 + C51162 * C3468 + C8257 * C1160 +
               C51270 * C1166) *
                  C1364 -
              (C8258 * C3467 + C51162 * C3471 + C8257 * C1167 +
               C51270 * C1172) *
                  C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C1492 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51301 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C1493 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51288 +
             (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                 C1494 +
             (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                 C1489) *
                C51271 +
            ((C14226 + C14227) * C1492 + (C14228 + C14229) * C51301 -
             (C14785 + C14786) * C1493 - (C14787 + C14788) * C51288 +
             (C14789 + C14790) * C1494 + (C14791 + C14792) * C1489) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C1492 + (C8294 + C8295) * C51301 -
             (C8492 + C8493) * C1493 - (C8494 + C8495) * C51288 +
             (C8862 + C8863) * C1494 + (C8864 + C8865) * C1489) *
                C51271 +
            (C14220 * C1492 + C14221 * C51301 - C16029 * C1493 -
             C16030 * C51288 + (C14441 + C14442) * C1494 +
             (C14443 + C14444) * C1489) *
                C51190) *
               C50978) *
              C50992 * C1775 +
          ((((C14786 + C14785) * C1493 -
             ((C14229 + C14228) * C51301 + (C14227 + C14226) * C1492) +
             (C14788 + C14787) * C51288 - (C14790 + C14789) * C1494 -
             (C14792 + C14791) * C1489) *
                C51271 +
            ((C15231 + C15232) * C1493 -
             ((C15011 + C15012) * C51301 + (C15013 + C15014) * C1492) +
             (C15233 + C15234) * C51288 -
             (C8258 * C3636 + C51162 * C3638 + C8257 * C3460 + C51270 * C3463) *
                 C1494 -
             (C8258 * C3639 + C51162 * C3642 + C8257 * C3464 + C51270 * C3469) *
                 C1489) *
                C51190) *
               C2447 +
           ((C16031 * C1493 - (C14222 * C51301 + C14223 * C1492) +
             C16034 * C51288 - (C14442 + C14441) * C1494 -
             (C14444 + C14443) * C1489) *
                C51271 +
            ((C15235 + C15236) * C1493 - (C14989 * C51301 + C14990 * C1492) +
             (C15237 + C15238) * C51288 -
             (C8258 * C3637 + C51162 * C3640 + C8257 * C3461 + C51270 * C3465) *
                 C1494 -
             (C8258 * C3641 + C51162 * C3643 + C8257 * C3466 + C51270 * C3470) *
                 C1489) *
                C51190) *
               C50978) *
              C50992 * C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C1363 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C1358 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C1364 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C51271 +
            ((C14226 + C14227) * C1363 + (C14228 + C14229) * C1358 -
             (C14785 + C14786) * C1364 - (C14787 + C14788) * C51042) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C1363 + (C8294 + C8295) * C1358 -
             (C8492 + C8493) * C1364 - (C8494 + C8495) * C51042) *
                C51271 +
            C16043 * C51190) *
               C50978) *
              C50992 * C51302 +
          ((((C14786 + C14785) * C1364 -
             ((C14229 + C14228) * C1358 + (C14227 + C14226) * C1363) +
             (C14788 + C14787) * C51042) *
                C51271 +
            ((C15231 + C15232) * C1364 -
             ((C15011 + C15012) * C1358 + (C15013 + C15014) * C1363) +
             (C15233 + C15234) * C51042) *
                C51190) *
               C2447 +
           (C16044 * C51271 +
            ((C15235 + C15236) * C1364 - (C14989 * C1358 + C14990 * C1363) +
             (C15237 + C15238) * C51042) *
                C51190) *
               C50978) *
              C50992 * C51291 +
          ((((C15014 + C15013) * C1363 + (C15012 + C15011) * C1358 -
             (C15232 + C15231) * C1364 - (C15234 + C15233) * C51042) *
                C51271 +
            ((C15377 + C15378) * C1363 + (C15379 + C15380) * C1358 -
             (C8258 * C3744 + C51162 * C3752 + C8257 * C3745 + C51270 * C3753) *
                 C1364 -
             (C8258 * C3750 + C51162 * C3756 + C8257 * C3751 + C51270 * C3757) *
                 C51042) *
                C51190) *
               C2447 +
           ((C14987 * C1363 + C14988 * C1358 - (C15236 + C15235) * C1364 -
             (C15238 + C15237) * C51042) *
                C51271 +
            ((C15015 + C15016) * C1363 + (C15017 + C15018) * C1358 -
             (C8258 * C3742 + C51162 * C3748 + C8257 * C3743 + C51270 * C3749) *
                 C1364 -
             (C8258 * C3746 + C51162 * C3754 + C8257 * C3747 + C51270 * C3755) *
                 C51042) *
                C51190) *
               C50978) *
              C50992 * C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C635 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C630 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C636 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C631 +
             (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                 C637 +
             (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                 C632) *
                C51271 +
            ((C14226 + C14227) * C635 + (C14228 + C14229) * C630 -
             (C8258 * C884 + C51162 * C893 + C8257 * C883 + C51270 * C891) *
                 C636 -
             (C8258 * C894 + C51162 * C908 + C8257 * C892 + C51270 * C907) *
                 C631 +
             (C8257 * C884 + C51270 * C893 + C8258 * C3298 + C51162 * C3302) *
                 C637 +
             (C8257 * C894 + C51270 * C908 + C8258 * C3303 + C51162 * C3310) *
                 C632) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C635 + (C8294 + C8295) * C630 -
             (C8492 + C8493) * C636 - (C8494 + C8495) * C631 +
             (C8862 + C8863) * C637 + (C8864 + C8865) * C632) *
                C51271 +
            (C14220 * C635 + C14221 * C630 - (C10039 + C10038) * C636 -
             (C10041 + C10040) * C631 + (C14441 + C14442) * C637 +
             (C14443 + C14444) * C632) *
                C51190) *
               C50978) *
              C51247 +
          ((((C8493 + C8492) * C636 -
             ((C8295 + C8294) * C630 + (C8293 + C8292) * C635) +
             (C8495 + C8494) * C631 - (C8863 + C8862) * C637 -
             (C8865 + C8864) * C632) *
                C51271 +
            ((C10038 + C10039) * C636 - (C14222 * C630 + C14223 * C635) +
             (C10040 + C10041) * C631 - (C14442 + C14441) * C637 -
             (C14444 + C14443) * C632) *
                C51190) *
               C2447 +
           (((C8498 + C8497) * C636 -
             ((C8299 + C8298) * C630 + (C8297 + C8296) * C635) +
             (C8500 + C8499) * C631 - (C8867 + C8866) * C637 -
             (C8869 + C8868) * C632) *
                C51271 +
            ((C10042 + C10043) * C636 - (C8694 * C630 + C8695 * C635) +
             (C10044 + C10045) * C631 -
             (C8258 * C4244 + C51162 * C4245 + C8257 * C888 + C51270 * C901) *
                 C637 -
             (C8258 * C4246 + C51162 * C4247 + C8257 * C902 + C51270 * C912) *
                 C632) *
                C51190) *
               C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51271 +
            ((C8257 * C476 + C51270 * C487 + C8258 * C883 + C51162 * C891) *
                 C118 +
             (C8257 * C486 + C51270 * C494 + C8258 * C892 + C51162 * C907) *
                 C51026) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51271 +
            ((C8682 + C8683) * C118 + (C8684 + C8685) * C51026) * C51190) *
               C50978) *
              C112 -
          ((C8698 * C51190 +
            ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51271) *
               C50978 +
           (((C8685 + C8684) * C51026 + (C8683 + C8682) * C118) * C51190 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51271) *
               C2447) *
              C113 +
          ((C8316 * C51271 +
            ((C8686 + C8687) * C118 + (C8688 + C8689) * C51026) * C51190) *
               C2447 +
           (((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C51271 +
            ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51190) *
               C50978) *
              C114 -
          ((((C8258 * C1645 + C51162 * C1646 + C8257 * C485 + C51270 * C493) *
                 C51026 +
             (C8258 * C1643 + C51162 * C1644 + C8257 * C475 + C51270 * C484) *
                 C118) *
                C51190 +
            ((C8307 + C8306) * C51026 + (C8305 + C8304) * C118) * C51271) *
               C50978 +
           (((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C51190 +
            C8317 * C51271) *
               C2447) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C118 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C51026) *
                 C51271 +
             ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
                C2447 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51271 +
             C14236 * C51190) *
                C50978) *
               C51247 -
           ((C8698 * C51190 +
             ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51271) *
                C50978 +
            (C14237 * C51190 +
             ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51271) *
                C2447) *
               C50997) *
              C1013 +
          (((C14236 * C51271 + C15019 * C51190) * C2447 +
            (C14238 * C51271 +
             ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51190) *
                C50978) *
               C50997 -
           ((C15020 * C51190 + C14237 * C51271) * C50978 +
            (((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51190 +
             ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C51271) *
                C2447) *
               C51247) *
              C1014 +
          (((((C15014 + C15013) * C118 + (C15012 + C15011) * C51026) * C51271 +
             ((C8257 * C1247 + C51270 * C1255 + C8258 * C3745 +
               C51162 * C3753) *
                  C118 +
              (C8257 * C1254 + C51270 * C1259 + C8258 * C3751 +
               C51162 * C3757) *
                  C51026) *
                 C51190) *
                C2447 +
            (C15019 * C51271 +
             ((C15015 + C15016) * C118 + (C15017 + C15018) * C51026) * C51190) *
                C50978) *
               C51247 -
           ((((C8258 * C7128 + C51162 * C7129 + C8257 * C1250 +
               C51270 * C1257) *
                  C51026 +
              (C8258 * C7126 + C51162 * C7127 + C8257 * C1245 +
               C51270 * C1251) *
                  C118) *
                 C51190 +
             ((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51271) *
                C50978 +
            (((C15018 + C15017) * C51026 + (C15016 + C15015) * C118) * C51190 +
             C15020 * C51271) *
                C2447) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C765 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C760 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C766 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C761 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C767 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C762 -
            (C8258 * C3016 + C51162 * C3019 + C8257 * C769 + C51270 * C773) *
                C768 -
            (C8258 * C3020 + C51162 * C3025 + C8257 * C774 + C51270 * C781) *
                C763) *
               C51271 +
           ((C14226 + C14227) * C765 + (C14228 + C14229) * C760 -
            (C8258 * C884 + C51162 * C893 + C8257 * C883 + C51270 * C891) *
                C766 -
            (C8258 * C894 + C51162 * C908 + C8257 * C892 + C51270 * C907) *
                C761 +
            (C8257 * C884 + C51270 * C893 + C8258 * C3298 + C51162 * C3302) *
                C767 +
            (C8257 * C894 + C51270 * C908 + C8258 * C3303 + C51162 * C3310) *
                C762 -
            (C8258 * C3299 + C51162 * C3304 + C8257 * C3298 + C51270 * C3302) *
                C768 -
            (C8258 * C3305 + C51162 * C3311 + C8257 * C3303 + C51270 * C3310) *
                C763) *
               C51190) *
              C2447 +
          (((C8292 + C8293) * C765 + (C8294 + C8295) * C760 -
            (C8492 + C8493) * C766 - (C8494 + C8495) * C761 +
            (C8862 + C8863) * C767 + (C8864 + C8865) * C762 -
            (C8258 * C3017 + C51162 * C3021 + C8257 * C770 + C51270 * C775) *
                C768 -
            (C8258 * C3022 + C51162 * C3026 + C8257 * C776 + C51270 * C782) *
                C763) *
               C51271 +
           (C14220 * C765 + C14221 * C760 - (C10039 + C10038) * C766 -
            (C10041 + C10040) * C761 + (C14441 + C14442) * C767 +
            (C14443 + C14444) * C762 -
            (C8258 * C3301 + C51162 * C3308 + C8257 * C3300 + C51270 * C3306) *
                C768 -
            (C8258 * C3309 + C51162 * C3313 + C8257 * C3307 + C51270 * C3312) *
                C763) *
               C51190) *
              C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C298 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51254 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C299 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C51271 +
            ((C8257 * C476 + C51270 * C487 + C8258 * C883 + C51162 * C891) *
                 C298 +
             (C8257 * C486 + C51270 * C494 + C8258 * C892 + C51162 * C907) *
                 C51254 -
             (C8258 * C884 + C51162 * C893 + C8257 * C883 + C51270 * C891) *
                 C299 -
             (C8258 * C894 + C51162 * C908 + C8257 * C892 + C51270 * C907) *
                 C51042) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C51254 -
             (C8492 + C8493) * C299 - (C8494 + C8495) * C51042) *
                C51271 +
            ((C8682 + C8683) * C298 + (C8684 + C8685) * C51254 -
             (C10039 + C10038) * C299 - (C10041 + C10040) * C51042) *
                C51190) *
               C50978) *
              C295 +
          ((((C8493 + C8492) * C299 -
             ((C8295 + C8294) * C51254 + (C8293 + C8292) * C298) +
             (C8495 + C8494) * C51042) *
                C51271 +
            ((C10038 + C10039) * C299 -
             ((C8685 + C8684) * C51254 + (C8683 + C8682) * C298) +
             (C10040 + C10041) * C51042) *
                C51190) *
               C2447 +
           (((C8498 + C8497) * C299 -
             ((C8299 + C8298) * C51254 + (C8297 + C8296) * C298) +
             (C8500 + C8499) * C51042) *
                C51271 +
            ((C10042 + C10043) * C299 - (C8694 * C51254 + C8695 * C298) +
             (C10044 + C10045) * C51042) *
                C51190) *
               C50978) *
              C296 +
          ((C8510 * C51271 +
            ((C8686 + C8687) * C298 + (C8688 + C8689) * C51254 -
             (C10043 + C10042) * C299 - (C10045 + C10044) * C51042) *
                C51190) *
               C2447 +
           (((C8303 + C8302) * C298 + (C8301 + C8300) * C51254 -
             (C8502 + C8501) * C299 - (C8504 + C8503) * C51042) *
                C51271 +
            ((C8690 + C8691) * C298 + (C8692 + C8693) * C51254 -
             (C8258 * C890 + C51162 * C905 + C8257 * C889 + C51270 * C903) *
                 C299 -
             (C8258 * C906 + C51162 * C914 + C8257 * C904 + C51270 * C913) *
                 C51042) *
                C51190) *
               C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C298 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51254 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C299 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C51271 +
            ((C14226 + C14227) * C298 + (C14228 + C14229) * C51254 -
             (C14785 + C14786) * C299 - (C14787 + C14788) * C51042) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C51254 -
             (C8492 + C8493) * C299 - (C8494 + C8495) * C51042) *
                C51271 +
            (C14220 * C298 + C14221 * C51254 - (C10039 + C10038) * C299 -
             (C10041 + C10040) * C51042) *
                C51190) *
               C50978) *
              C50992 * C1013 +
          ((((C14786 + C14785) * C299 -
             ((C14229 + C14228) * C51254 + (C14227 + C14226) * C298) +
             (C14788 + C14787) * C51042) *
                C51271 +
            ((C15231 + C15232) * C299 -
             ((C15011 + C15012) * C51254 + (C15013 + C15014) * C298) +
             (C15233 + C15234) * C51042) *
                C51190) *
               C2447 +
           (((C10038 + C10039) * C299 - (C14222 * C51254 + C14223 * C298) +
             (C10040 + C10041) * C51042) *
                C51271 +
            ((C15235 + C15236) * C299 - (C14989 * C51254 + C14990 * C298) +
             (C15237 + C15238) * C51042) *
                C51190) *
               C50978) *
              C50992 * C1014 +
          ((((C15014 + C15013) * C298 + (C15012 + C15011) * C51254 -
             (C15232 + C15231) * C299 - (C15234 + C15233) * C51042) *
                C51271 +
            ((C8257 * C1247 + C51270 * C1255 + C8258 * C3745 + C51162 * C3753) *
                 C298 +
             (C8257 * C1254 + C51270 * C1259 + C8258 * C3751 + C51162 * C3757) *
                 C51254 -
             (C8258 * C3744 + C51162 * C3752 + C8257 * C3745 + C51270 * C3753) *
                 C299 -
             (C8258 * C3750 + C51162 * C3756 + C8257 * C3751 + C51270 * C3757) *
                 C51042) *
                C51190) *
               C2447 +
           ((C14987 * C298 + C14988 * C51254 - (C15236 + C15235) * C299 -
             (C15238 + C15237) * C51042) *
                C51271 +
            ((C15015 + C15016) * C298 + (C15017 + C15018) * C51254 -
             (C8258 * C3742 + C51162 * C3748 + C8257 * C3743 + C51270 * C3749) *
                 C299 -
             (C8258 * C3746 + C51162 * C3754 + C8257 * C3747 + C51270 * C3755) *
                 C51042) *
                C51190) *
               C50978) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C635 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C630 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C636 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C631 +
             (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                 C637 +
             (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                 C632) *
                C51271 +
            ((C14226 + C14227) * C635 + (C14228 + C14229) * C630 -
             (C14785 + C14786) * C636 - (C14787 + C14788) * C631 +
             (C14789 + C14790) * C637 + (C14791 + C14792) * C632) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C635 + (C8294 + C8295) * C630 -
             (C8492 + C8493) * C636 - (C8494 + C8495) * C631 +
             (C8862 + C8863) * C637 + (C8864 + C8865) * C632) *
                C51271 +
            (C14220 * C635 + C14221 * C630 - (C10039 + C10038) * C636 -
             (C10041 + C10040) * C631 + (C14441 + C14442) * C637 +
             (C14443 + C14444) * C632) *
                C51190) *
               C50978) *
              C50992 * C51256 +
          ((((C14786 + C14785) * C636 -
             ((C14229 + C14228) * C630 + (C14227 + C14226) * C635) +
             (C14788 + C14787) * C631 - (C14790 + C14789) * C637 -
             (C14792 + C14791) * C632) *
                C51271 +
            ((C8257 * C1158 + C51270 * C1162 + C8258 * C3460 + C51162 * C3463) *
                 C636 -
             ((C8258 * C1163 + C51162 * C1170 + C8257 * C1022 +
               C51270 * C1031) *
                  C630 +
              (C8258 * C1158 + C51162 * C1162 + C8257 * C1016 +
               C51270 * C1021) *
                  C635) +
             (C8257 * C1163 + C51270 * C1170 + C8258 * C3464 + C51162 * C3469) *
                 C631 -
             (C8258 * C3636 + C51162 * C3638 + C8257 * C3460 + C51270 * C3463) *
                 C637 -
             (C8258 * C3639 + C51162 * C3642 + C8257 * C3464 + C51270 * C3469) *
                 C632) *
                C51190) *
               C2447 +
           (((C10038 + C10039) * C636 - (C14222 * C630 + C14223 * C635) +
             (C10040 + C10041) * C631 - (C14442 + C14441) * C637 -
             (C14444 + C14443) * C632) *
                C51271 +
            ((C8257 * C1159 + C51270 * C1164 + C8258 * C3461 + C51162 * C3465) *
                 C636 -
             ((C9279 + C9278) * C630 + (C9277 + C9276) * C635) +
             (C8257 * C1165 + C51270 * C1171 + C8258 * C3466 + C51162 * C3470) *
                 C631 -
             (C8258 * C3637 + C51162 * C3640 + C8257 * C3461 + C51270 * C3465) *
                 C637 -
             (C8258 * C3641 + C51162 * C3643 + C8257 * C3466 + C51270 * C3470) *
                 C632) *
                C51190) *
               C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C118 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C51026) *
                 C51271 +
             ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
                C2447 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51271 +
             C14236 * C51190) *
                C50978) *
               C295 -
           ((C8698 * C51190 +
             ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51271) *
                C50978 +
            (C14237 * C51190 +
             ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51271) *
                C2447) *
               C296 +
           ((C8316 * C51271 + C14238 * C51190) * C2447 +
            (((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C51271 +
             ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51190) *
                C50978) *
               C297) *
              C51256 +
          (((C14236 * C51271 +
             ((C9276 + C9277) * C118 + (C9278 + C9279) * C51026) * C51190) *
                C2447 +
            (C14238 * C51271 +
             ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51190) *
                C50978) *
               C296 -
           ((((C9279 + C9278) * C51026 + (C9277 + C9276) * C118) * C51190 +
             C14237 * C51271) *
                C50978 +
            (((C8258 * C1163 + C51162 * C1170 + C8257 * C1022 +
               C51270 * C1031) *
                  C51026 +
              (C8258 * C1158 + C51162 * C1162 + C8257 * C1016 +
               C51270 * C1021) *
                  C118) *
                 C51190 +
             ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C51271) *
                C2447) *
               C295 -
           ((((C8258 * C1169 + C51162 * C1173 + C8257 * C1028 +
               C51270 * C1034) *
                  C51026 +
              (C8258 * C1161 + C51162 * C1168 + C8257 * C1019 +
               C51270 * C1027) *
                  C118) *
                 C51190 +
             ((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C51271) *
                C50978 +
            (((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51190 +
             C8698 * C51271) *
                C2447) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51271 +
            ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
               C2447 +
           (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51271 +
            C14236 * C51190) *
               C50978) *
              C50992 * C1240 -
          ((C15020 * C51190 + C14237 * C51271) * C50978 +
           (((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51190 +
            ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C51271) *
               C2447) *
              C50992 * C1241 +
          ((((C15014 + C15013) * C118 + (C15012 + C15011) * C51026) * C51271 +
            ((C15377 + C15378) * C118 + (C15379 + C15380) * C51026) * C51190) *
               C2447 +
           (C15019 * C51271 +
            ((C15015 + C15016) * C118 + (C15017 + C15018) * C51026) * C51190) *
               C50978) *
              C50992 * C1242 -
          ((((C8258 * C6468 + C51162 * C6470 + C8257 * C6292 + C51270 * C6296) *
                 C51026 +
             (C8258 * C6464 + C51162 * C6467 + C8257 * C6287 + C51270 * C6291) *
                 C118) *
                C51190 +
            ((C15018 + C15017) * C51026 + (C15016 + C15015) * C118) * C51271) *
               C50978 +
           (((C8258 * C6466 + C51162 * C6469 + C8257 * C6290 + C51270 * C6295) *
                 C51026 +
             (C8258 * C6463 + C51162 * C6465 + C8257 * C6286 + C51270 * C6289) *
                 C118) *
                C51190 +
            ((C15380 + C15379) * C51026 + (C15378 + C15377) * C118) * C51271) *
               C2447) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C118 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C51026) *
                 C51271 +
             ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
                C2447 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51271 +
             C14236 * C51190) *
                C50978) *
               C51300 -
           ((C8698 * C51190 +
             ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51271) *
                C50978 +
            (C14237 * C51190 +
             ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51271) *
                C2447) *
               C51285 +
           ((C8316 * C51271 + C14238 * C51190) * C2447 +
            (((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C51271 +
             ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51190) *
                C50978) *
               C1362) *
              C1775 +
          (((C14236 * C51271 + C15019 * C51190) * C2447 +
            (C14238 * C51271 +
             ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51190) *
                C50978) *
               C51285 -
           ((C15020 * C51190 + C14237 * C51271) * C50978 +
            (((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51190 +
             ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C51271) *
                C2447) *
               C51300 -
           ((((C8258 * C1169 + C51162 * C1173 + C8257 * C1028 +
               C51270 * C1034) *
                  C51026 +
              (C8258 * C1161 + C51162 * C1168 + C8257 * C1019 +
               C51270 * C1027) *
                  C118) *
                 C51190 +
             ((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C51271) *
                C50978 +
            (((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51190 +
             C8698 * C51271) *
                C2447) *
               C1362) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C298 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C51254 -
              (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                  C299 -
              (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                  C51042) *
                 C51271 +
             ((C14226 + C14227) * C298 + (C14228 + C14229) * C51254 -
              (C14785 + C14786) * C299 - (C14787 + C14788) * C51042) *
                 C51190) *
                C2447 +
            (((C8292 + C8293) * C298 + (C8294 + C8295) * C51254 -
              (C8492 + C8493) * C299 - (C8494 + C8495) * C51042) *
                 C51271 +
             C16509 * C51190) *
                C50978) *
               C1490 +
           ((((C8493 + C8492) * C299 -
              ((C8295 + C8294) * C51254 + (C8293 + C8292) * C298) +
              (C8495 + C8494) * C51042) *
                 C51271 +
             C16510 * C51190) *
                C2447 +
            (((C8498 + C8497) * C299 -
              ((C8299 + C8298) * C51254 + (C8297 + C8296) * C298) +
              (C8500 + C8499) * C51042) *
                 C51271 +
             ((C10042 + C10043) * C299 - (C8694 * C51254 + C8695 * C298) +
              (C10044 + C10045) * C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C1775 +
          (((((C14786 + C14785) * C299 -
              ((C14229 + C14228) * C51254 + (C14227 + C14226) * C298) +
              (C14788 + C14787) * C51042) *
                 C51271 +
             ((C15231 + C15232) * C299 -
              ((C15011 + C15012) * C51254 + (C15013 + C15014) * C298) +
              (C15233 + C15234) * C51042) *
                 C51190) *
                C2447 +
            (C16510 * C51271 +
             ((C15235 + C15236) * C299 - (C14989 * C51254 + C14990 * C298) +
              (C15237 + C15238) * C51042) *
                 C51190) *
                C50978) *
               C1490 +
           ((C16509 * C51271 +
             (C14987 * C298 + C14988 * C51254 - (C15236 + C15235) * C299 -
              (C15238 + C15237) * C51042) *
                 C51190) *
                C2447 +
            ((C14224 * C298 + C14225 * C51254 - (C10043 + C10042) * C299 -
              (C10045 + C10044) * C51042) *
                 C51271 +
             ((C9280 + C9281) * C298 + (C9282 + C9283) * C51254 -
              (C8258 * C3462 + C51162 * C3468 + C8257 * C1160 +
               C51270 * C1166) *
                  C299 -
              (C8258 * C3467 + C51162 * C3471 + C8257 * C1167 +
               C51270 * C1172) *
                  C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C118 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C51026) *
                 C51271 +
             ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
                C2447 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51271 +
             C14236 * C51190) *
                C50978) *
               C1490 -
           ((C8698 * C51190 +
             ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51271) *
                C50978 +
            (C14237 * C51190 +
             ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51271) *
                C2447) *
               C50997) *
              C51302 +
          (((C14236 * C51271 + C15019 * C51190) * C2447 +
            (C14238 * C51271 +
             ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51190) *
                C50978) *
               C50997 -
           ((C15020 * C51190 + C14237 * C51271) * C50978 +
            (((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51190 +
             ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C51271) *
                C2447) *
               C1490) *
              C51291 +
          (((((C15014 + C15013) * C118 + (C15012 + C15011) * C51026) * C51271 +
             ((C15377 + C15378) * C118 + (C15379 + C15380) * C51026) * C51190) *
                C2447 +
            (C15019 * C51271 +
             ((C15015 + C15016) * C118 + (C15017 + C15018) * C51026) * C51190) *
                C50978) *
               C1490 -
           ((((C8258 * C7128 + C51162 * C7129 + C8257 * C1250 +
               C51270 * C1257) *
                  C51026 +
              (C8258 * C7126 + C51162 * C7127 + C8257 * C1245 +
               C51270 * C1251) *
                  C118) *
                 C51190 +
             ((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51271) *
                C50978 +
            (((C15018 + C15017) * C51026 + (C15016 + C15015) * C118) * C51190 +
             C15020 * C51271) *
                C2447) *
               C50997) *
              C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51271 +
            ((C8257 * C476 + C51270 * C487 + C8258 * C883 + C51162 * C891) *
                 C118 +
             (C8257 * C486 + C51270 * C494 + C8258 * C892 + C51162 * C907) *
                 C51026) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51271 +
            ((C8682 + C8683) * C118 + (C8684 + C8685) * C51026) * C51190) *
               C50978) *
              C112 -
          ((C8698 * C51190 +
            ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51271) *
               C50978 +
           (((C8685 + C8684) * C51026 + (C8683 + C8682) * C118) * C51190 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51271) *
               C2447) *
              C113 +
          ((C8316 * C51271 +
            ((C8686 + C8687) * C118 + (C8688 + C8689) * C51026) * C51190) *
               C2447 +
           (((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C51271 +
            ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51190) *
               C50978) *
              C114 -
          ((((C8258 * C1645 + C51162 * C1646 + C8257 * C485 + C51270 * C493) *
                 C51026 +
             (C8258 * C1643 + C51162 * C1644 + C8257 * C475 + C51270 * C484) *
                 C118) *
                C51190 +
            ((C8307 + C8306) * C51026 + (C8305 + C8304) * C118) * C51271) *
               C50978 +
           (((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C51190 +
            C8317 * C51271) *
               C2447) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C635 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C630 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C636 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C631 +
             (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                 C637 +
             (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                 C632) *
                C51271 +
            ((C14226 + C14227) * C635 + (C14228 + C14229) * C630 -
             (C8258 * C884 + C51162 * C893 + C8257 * C883 + C51270 * C891) *
                 C636 -
             (C8258 * C894 + C51162 * C908 + C8257 * C892 + C51270 * C907) *
                 C631 +
             (C8257 * C884 + C51270 * C893 + C8258 * C3298 + C51162 * C3302) *
                 C637 +
             (C8257 * C894 + C51270 * C908 + C8258 * C3303 + C51162 * C3310) *
                 C632) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C635 + (C8294 + C8295) * C630 -
             (C8492 + C8493) * C636 - (C8494 + C8495) * C631 +
             (C8862 + C8863) * C637 + (C8864 + C8865) * C632) *
                C51271 +
            (C14220 * C635 + C14221 * C630 - (C10039 + C10038) * C636 -
             (C10041 + C10040) * C631 + (C14441 + C14442) * C637 +
             (C14443 + C14444) * C632) *
                C51190) *
               C50978) *
              C51247 +
          ((((C8493 + C8492) * C636 -
             ((C8295 + C8294) * C630 + (C8293 + C8292) * C635) +
             (C8495 + C8494) * C631 - (C8863 + C8862) * C637 -
             (C8865 + C8864) * C632) *
                C51271 +
            ((C10038 + C10039) * C636 - (C14222 * C630 + C14223 * C635) +
             (C10040 + C10041) * C631 - (C14442 + C14441) * C637 -
             (C14444 + C14443) * C632) *
                C51190) *
               C2447 +
           (((C8498 + C8497) * C636 -
             ((C8299 + C8298) * C630 + (C8297 + C8296) * C635) +
             (C8500 + C8499) * C631 - (C8867 + C8866) * C637 -
             (C8869 + C8868) * C632) *
                C51271 +
            ((C10042 + C10043) * C636 - (C8694 * C630 + C8695 * C635) +
             (C10044 + C10045) * C631 -
             (C8258 * C4244 + C51162 * C4245 + C8257 * C888 + C51270 * C901) *
                 C637 -
             (C8258 * C4246 + C51162 * C4247 + C8257 * C902 + C51270 * C912) *
                 C632) *
                C51190) *
               C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C298 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51254 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C299 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C51271 +
            ((C8257 * C476 + C51270 * C487 + C8258 * C883 + C51162 * C891) *
                 C298 +
             (C8257 * C486 + C51270 * C494 + C8258 * C892 + C51162 * C907) *
                 C51254 -
             (C8258 * C884 + C51162 * C893 + C8257 * C883 + C51270 * C891) *
                 C299 -
             (C8258 * C894 + C51162 * C908 + C8257 * C892 + C51270 * C907) *
                 C51042) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C51254 -
             (C8492 + C8493) * C299 - (C8494 + C8495) * C51042) *
                C51271 +
            ((C8682 + C8683) * C298 + (C8684 + C8685) * C51254 -
             (C10039 + C10038) * C299 - (C10041 + C10040) * C51042) *
                C51190) *
               C50978) *
              C295 +
          ((((C8493 + C8492) * C299 -
             ((C8295 + C8294) * C51254 + (C8293 + C8292) * C298) +
             (C8495 + C8494) * C51042) *
                C51271 +
            ((C10038 + C10039) * C299 -
             ((C8685 + C8684) * C51254 + (C8683 + C8682) * C298) +
             (C10040 + C10041) * C51042) *
                C51190) *
               C2447 +
           (((C8498 + C8497) * C299 -
             ((C8299 + C8298) * C51254 + (C8297 + C8296) * C298) +
             (C8500 + C8499) * C51042) *
                C51271 +
            ((C10042 + C10043) * C299 - (C8694 * C51254 + C8695 * C298) +
             (C10044 + C10045) * C51042) *
                C51190) *
               C50978) *
              C296 +
          ((C8510 * C51271 +
            ((C8686 + C8687) * C298 + (C8688 + C8689) * C51254 -
             (C10043 + C10042) * C299 - (C10045 + C10044) * C51042) *
                C51190) *
               C2447 +
           (((C8303 + C8302) * C298 + (C8301 + C8300) * C51254 -
             (C8502 + C8501) * C299 - (C8504 + C8503) * C51042) *
                C51271 +
            ((C8690 + C8691) * C298 + (C8692 + C8693) * C51254 -
             (C8258 * C890 + C51162 * C905 + C8257 * C889 + C51270 * C903) *
                 C299 -
             (C8258 * C906 + C51162 * C914 + C8257 * C904 + C51270 * C913) *
                 C51042) *
                C51190) *
               C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C765 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C760 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C766 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C761 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C767 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C762 -
            (C8258 * C3016 + C51162 * C3019 + C8257 * C769 + C51270 * C773) *
                C768 -
            (C8258 * C3020 + C51162 * C3025 + C8257 * C774 + C51270 * C781) *
                C763) *
               C51271 +
           ((C14226 + C14227) * C765 + (C14228 + C14229) * C760 -
            (C8258 * C884 + C51162 * C893 + C8257 * C883 + C51270 * C891) *
                C766 -
            (C8258 * C894 + C51162 * C908 + C8257 * C892 + C51270 * C907) *
                C761 +
            (C8257 * C884 + C51270 * C893 + C8258 * C3298 + C51162 * C3302) *
                C767 +
            (C8257 * C894 + C51270 * C908 + C8258 * C3303 + C51162 * C3310) *
                C762 -
            (C8258 * C3299 + C51162 * C3304 + C8257 * C3298 + C51270 * C3302) *
                C768 -
            (C8258 * C3305 + C51162 * C3311 + C8257 * C3303 + C51270 * C3310) *
                C763) *
               C51190) *
              C2447 +
          (((C8292 + C8293) * C765 + (C8294 + C8295) * C760 -
            (C8492 + C8493) * C766 - (C8494 + C8495) * C761 +
            (C8862 + C8863) * C767 + (C8864 + C8865) * C762 -
            (C8258 * C3017 + C51162 * C3021 + C8257 * C770 + C51270 * C775) *
                C768 -
            (C8258 * C3022 + C51162 * C3026 + C8257 * C776 + C51270 * C782) *
                C763) *
               C51271 +
           (C14220 * C765 + C14221 * C760 - (C10039 + C10038) * C766 -
            (C10041 + C10040) * C761 + (C14441 + C14442) * C767 +
            (C14443 + C14444) * C762 -
            (C8258 * C3301 + C51162 * C3308 + C8257 * C3300 + C51270 * C3306) *
                C768 -
            (C8258 * C3309 + C51162 * C3313 + C8257 * C3307 + C51270 * C3312) *
                C763) *
               C51190) *
              C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C118 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C51026) *
                 C51271 +
             ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
                C2447 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C51271 +
             C14236 * C51190) *
                C50978) *
               C295 -
           ((C8698 * C51190 +
             ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C51271) *
                C50978 +
            (C14237 * C51190 +
             ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51271) *
                C2447) *
               C296 +
           ((C8316 * C51271 + C14238 * C51190) * C2447 +
            (((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C51271 +
             ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51190) *
                C50978) *
               C297) *
              C51256 +
          (((C14236 * C51271 +
             ((C9276 + C9277) * C118 + (C9278 + C9279) * C51026) * C51190) *
                C2447 +
            (C14238 * C51271 +
             ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51190) *
                C50978) *
               C296 -
           ((((C9279 + C9278) * C51026 + (C9277 + C9276) * C118) * C51190 +
             C14237 * C51271) *
                C50978 +
            (((C8258 * C1163 + C51162 * C1170 + C8257 * C1022 +
               C51270 * C1031) *
                  C51026 +
              (C8258 * C1158 + C51162 * C1162 + C8257 * C1016 +
               C51270 * C1021) *
                  C118) *
                 C51190 +
             ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C51271) *
                C2447) *
               C295 -
           ((((C8258 * C1169 + C51162 * C1173 + C8257 * C1028 +
               C51270 * C1034) *
                  C51026 +
              (C8258 * C1161 + C51162 * C1168 + C8257 * C1019 +
               C51270 * C1027) *
                  C118) *
                 C51190 +
             ((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C51271) *
                C50978 +
            (((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51190 +
             C8698 * C51271) *
                C2447) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C635 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C630 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C636 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C631 +
             (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                 C637 +
             (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                 C632) *
                C51271 +
            ((C14226 + C14227) * C635 + (C14228 + C14229) * C630 -
             (C14785 + C14786) * C636 - (C14787 + C14788) * C631 +
             (C14789 + C14790) * C637 + (C14791 + C14792) * C632) *
                C51190) *
               C2447 +
           (((C8292 + C8293) * C635 + (C8294 + C8295) * C630 -
             (C8492 + C8493) * C636 - (C8494 + C8495) * C631 +
             (C8862 + C8863) * C637 + (C8864 + C8865) * C632) *
                C51271 +
            (C14220 * C635 + C14221 * C630 - (C10039 + C10038) * C636 -
             (C10041 + C10040) * C631 + (C14441 + C14442) * C637 +
             (C14443 + C14444) * C632) *
                C51190) *
               C50978) *
              C50992 * C51256 +
          ((((C14786 + C14785) * C636 -
             ((C14229 + C14228) * C630 + (C14227 + C14226) * C635) +
             (C14788 + C14787) * C631 - (C14790 + C14789) * C637 -
             (C14792 + C14791) * C632) *
                C51271 +
            ((C8257 * C1158 + C51270 * C1162 + C8258 * C3460 + C51162 * C3463) *
                 C636 -
             ((C8258 * C1163 + C51162 * C1170 + C8257 * C1022 +
               C51270 * C1031) *
                  C630 +
              (C8258 * C1158 + C51162 * C1162 + C8257 * C1016 +
               C51270 * C1021) *
                  C635) +
             (C8257 * C1163 + C51270 * C1170 + C8258 * C3464 + C51162 * C3469) *
                 C631 -
             (C8258 * C3636 + C51162 * C3638 + C8257 * C3460 + C51270 * C3463) *
                 C637 -
             (C8258 * C3639 + C51162 * C3642 + C8257 * C3464 + C51270 * C3469) *
                 C632) *
                C51190) *
               C2447 +
           (((C10038 + C10039) * C636 - (C14222 * C630 + C14223 * C635) +
             (C10040 + C10041) * C631 - (C14442 + C14441) * C637 -
             (C14444 + C14443) * C632) *
                C51271 +
            ((C8257 * C1159 + C51270 * C1164 + C8258 * C3461 + C51162 * C3465) *
                 C636 -
             ((C9279 + C9278) * C630 + (C9277 + C9276) * C635) +
             (C8257 * C1165 + C51270 * C1171 + C8258 * C3466 + C51162 * C3470) *
                 C631 -
             (C8258 * C3637 + C51162 * C3640 + C8257 * C3461 + C51270 * C3465) *
                 C637 -
             (C8258 * C3641 + C51162 * C3643 + C8257 * C3466 + C51270 * C3470) *
                 C632) *
                C51190) *
               C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1363 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C1358 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1364 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C1363 + (C2492 + C2493 + C2494) * C1358 -
            (C2677 + C2678 + C2679) * C1364 -
            (C2680 + C2681 + C2682) * C51042) *
               C51126 * C50978) *
              C51300 +
          (((C2679 + C2678 + C2677) * C1364 -
            ((C2494 + C2493 + C2492) * C1358 +
             (C2491 + C2490 + C2489) * C1363) +
            (C2682 + C2681 + C2680) * C51042) *
               C51126 * C2447 +
           ((C2683 + C2684 + C2685) * C1364 -
            ((C2495 + C2496 + C2497) * C1358 +
             (C2498 + C2499 + C2500) * C1363) +
            (C2686 + C2687 + C2688) * C51042) *
               C51126 * C50978) *
              C51285 +
          (((C2500 + C2499 + C2498) * C1363 + (C2497 + C2496 + C2495) * C1358 -
            (C2685 + C2684 + C2683) * C1364 -
            (C2688 + C2687 + C2686) * C51042) *
               C51126 * C2447 +
           ((C2501 + C2502 + C2503) * C1363 + (C2504 + C2505 + C2506) * C1358 -
            (C2451 * C772 + C2446 * C779 + C2450 * C641 + C2445 * C649 +
             C2449 * C303 + C2444 * C312) *
                C1364 -
            (C2451 * C780 + C2446 * C784 + C2450 * C650 + C2445 * C656 +
             C2449 * C313 + C2444 * C321) *
                C51042) *
               C51126 * C50978) *
              C1362) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C1363 +
            (C117 * C127 + C51110 * C140) * C1358 -
            (C117 * C300 + C51110 * C306) * C1364 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C51126 * C108 +
           (C1366 + C1367 - C1368 - C1369) * C51126 * C109 + C1388 * C110 +
           C1389 * C111) *
              C51300 +
          ((C1368 - (C1367 + C1366) + C1369) * C51126 * C108 +
           (C1372 - (C1371 + C1370) + C1373) * C51126 * C109 +
           (C1376 - (C1375 + C1374) + C1377) * C51126 * C110 +
           (C1378 - (C1379 + C1380) + C1381) * C51126 * C111) *
              C51285 +
          (C1388 * C108 + C1389 * C109 +
           (C1380 + C1379 - C1378 - C1381) * C51126 * C110 +
           (C176 * C1363 + C177 * C1358 -
            (C117 * C305 + C51110 * C316) * C1364 -
            (C117 * C317 + C51110 * C323) * C51042) *
               C51126 * C111) *
              C1362) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C5336 +
            (C5675 * C1363 + C5676 * C1358 - C6125 * C1364 - C6126 * C51042) *
                C5337 +
            (C5677 * C1363 + C5678 * C1358 - C6129 * C1364 - C6130 * C51042) *
                C5338) *
               C2447 +
           ((C1366 + C1367 - C1368 - C1369) * C5336 +
            (C1651 + C1650 - C1672 - C1673) * C5337 +
            (C6767 + C6768 - C6769 - C6770) * C5338) *
               C50978) *
              C51300 +
          (((C1368 - (C1367 + C1366) + C1369) * C5336 +
            (C1672 - (C1650 + C1651) + C1673) * C5337 +
            (C6769 - (C6768 + C6767) + C6770) * C5338) *
               C2447 +
           ((C1372 - (C1371 + C1370) + C1373) * C5336 +
            (C1674 - (C1656 + C1657) + C1675) * C5337 +
            (C6771 - (C6772 + C6773) + C6774) * C5338) *
               C50978) *
              C51285 +
          ((C1386 * C5336 + (C1657 + C1656 - C1674 - C1675) * C5337 +
            (C6773 + C6772 - C6771 - C6774) * C5338) *
               C2447 +
           (C1387 * C5336 + (C1663 + C1662 - C1676 - C1677) * C5337 +
            (C1053 * C1363 + C1054 * C1358 -
             (C117 * C1161 + C51110 * C1168) * C1364 -
             (C117 * C1169 + C51110 * C1173) * C51042) *
                C5338) *
               C50978) *
              C1362) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1492 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51301 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1493 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51288 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C1494 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C1489) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C1492 + (C2492 + C2493 + C2494) * C51301 -
            (C2677 + C2678 + C2679) * C1493 - (C2680 + C2681 + C2682) * C51288 +
            (C3041 + C3042 + C3043) * C1494 + (C3044 + C3045 + C3046) * C1489) *
               C51126 * C50978) *
              C1490 +
          (((C2679 + C2678 + C2677) * C1493 -
            ((C2494 + C2493 + C2492) * C51301 +
             (C2491 + C2490 + C2489) * C1492) +
            (C2682 + C2681 + C2680) * C51288 - (C3043 + C3042 + C3041) * C1494 -
            (C3046 + C3045 + C3044) * C1489) *
               C51126 * C2447 +
           ((C2683 + C2684 + C2685) * C1493 -
            ((C2495 + C2496 + C2497) * C51301 +
             (C2498 + C2499 + C2500) * C1492) +
            (C2686 + C2687 + C2688) * C51288 -
            (C2451 * C3018 + C2446 * C3023 + C2450 * C771 + C2445 * C777 +
             C2449 * C640 + C2444 * C647) *
                C1494 -
            (C2451 * C3024 + C2446 * C3027 + C2450 * C778 + C2445 * C783 +
             C2449 * C648 + C2444 * C655) *
                C1489) *
               C51126 * C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C1492 +
            (C117 * C127 + C51110 * C140) * C51301 -
            (C117 * C300 + C51110 * C306) * C1493 -
            (C117 * C307 + C51110 * C318) * C51288 +
            (C117 * C638 + C51110 * C643) * C1494 +
            (C117 * C644 + C51110 * C653) * C1489) *
               C51126 * C108 +
           (C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C51126 * C109 +
           (C1502 + C1503 - C1504 - C1505 + C1506 + C1507) * C51126 * C110 +
           (C1508 + C1509 - C1510 - C1511 + C1512 + C1513) * C51126 * C111) *
              C1490 +
          ((C1498 - (C1497 + C1496) + C1499 - C1500 - C1501) * C51126 * C108 +
           (C1504 - (C1503 + C1502) + C1505 - C1506 - C1507) * C51126 * C109 +
           (C1510 - (C1509 + C1508) + C1511 - C1512 - C1513) * C51126 * C110 +
           (C357 * C1493 - (C174 * C51301 + C175 * C1492) + C358 * C51288 -
            (C117 * C642 + C51110 * C651) * C1494 -
            (C117 * C652 + C51110 * C657) * C1489) *
               C51126 * C111) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1492 +
             (C117 * C127 + C51110 * C140) * C51301 -
             (C117 * C300 + C51110 * C306) * C1493 -
             (C117 * C307 + C51110 * C318) * C51288 +
             (C117 * C638 + C51110 * C643) * C1494 +
             (C117 * C644 + C51110 * C653) * C1489) *
                C5336 +
            (C5675 * C1492 + C5676 * C51301 - C6125 * C1493 - C6126 * C51288 +
             C6127 * C1494 + C6128 * C1489) *
                C5337 +
            (C5677 * C1492 + C5678 * C51301 - C6129 * C1493 - C6130 * C51288 +
             C6131 * C1494 + C6132 * C1489) *
                C5338) *
               C2447 +
           ((C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C5336 +
            (C6921 + C6922 - C6923 - C6924 + C6925 + C6926) * C5337 +
            (C6927 + C6928 - C6929 - C6930 + C6931 + C6932) * C5338) *
               C50978) *
              C1490 +
          (((C1498 - (C1497 + C1496) + C1499 - C1500 - C1501) * C5336 +
            (C6923 - (C6922 + C6921) + C6924 - C6925 - C6926) * C5337 +
            (C6929 - (C6928 + C6927) + C6930 - C6931 - C6932) * C5338) *
               C2447 +
           ((C1504 - (C1503 + C1502) + C1505 - C1506 - C1507) * C5336 +
            (C1668 * C1493 - (C516 * C51301 + C515 * C1492) + C1669 * C51288 -
             (C117 * C888 + C51110 * C901) * C1494 -
             (C117 * C902 + C51110 * C912) * C1489) *
                C5337 +
            (C5500 * C1493 - (C1052 * C51301 + C1051 * C1492) + C5501 * C51288 -
             (C117 * C3462 + C51110 * C3468) * C1494 -
             (C117 * C3467 + C51110 * C3471) * C1489) *
                C5338) *
               C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C1363 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C1358 -
             (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
              C2449 * C300 + C2444 * C306) *
                 C1364 -
             (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
              C2449 * C307 + C2444 * C318) *
                 C51042) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C1363 + (C2492 + C2493 + C2494) * C1358 -
             (C2677 + C2678 + C2679) * C1364 -
             (C2680 + C2681 + C2682) * C51042) *
                C51126 * C50978) *
               C1490 +
           (((C2679 + C2678 + C2677) * C1364 -
             ((C2494 + C2493 + C2492) * C1358 +
              (C2491 + C2490 + C2489) * C1363) +
             (C2682 + C2681 + C2680) * C51042) *
                C51126 * C2447 +
            ((C2683 + C2684 + C2685) * C1364 -
             ((C2495 + C2496 + C2497) * C1358 +
              (C2498 + C2499 + C2500) * C1363) +
             (C2686 + C2687 + C2688) * C51042) *
                C51126 * C50978) *
               C50997) *
              C51256 +
          ((((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
              C2451 * C3298 + C2446 * C3302) *
                 C1364 -
             ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
               C2449 * C486 + C2444 * C494) *
                  C1358 +
              (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
               C2449 * C476 + C2444 * C487) *
                  C1363) +
             (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
              C2451 * C3303 + C2446 * C3310) *
                 C51042) *
                C51126 * C2447 +
            ((C4261 + C4262 + C4263) * C1364 -
             ((C2864 + C2863 + C2862) * C1358 +
              (C2861 + C2860 + C2859) * C1363) +
             (C4264 + C4265 + C4266) * C51042) *
                C51126 * C50978) *
               C1490 +
           (((C2859 + C2860 + C2861) * C1363 + (C2862 + C2863 + C2864) * C1358 -
             (C4263 + C4262 + C4261) * C1364 -
             (C4266 + C4265 + C4264) * C51042) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C1363 + (C2868 + C2869 + C2870) * C1358 -
             (C2451 * C4244 + C2446 * C4245 + C2450 * C888 + C2445 * C901 +
              C2449 * C887 + C2444 * C899) *
                 C1364 -
             (C2451 * C4246 + C2446 * C4247 + C2450 * C902 + C2445 * C912 +
              C2449 * C900 + C2444 * C911) *
                 C51042) *
                C51126 * C50978) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51126 * C108 +
            (C1366 + C1367 - C1368 - C1369) * C51126 * C109 + C1388 * C110 +
            C1389 * C111) *
               C1490 +
           ((C1368 - (C1367 + C1366) + C1369) * C51126 * C108 +
            (C1372 - (C1371 + C1370) + C1373) * C51126 * C109 +
            (C1376 - (C1375 + C1374) + C1377) * C51126 * C110 +
            (C1378 - (C1379 + C1380) + C1381) * C51126 * C111) *
               C50997) *
              C51256 +
          ((((C117 * C883 + C51110 * C891) * C1364 -
             ((C117 * C486 + C51110 * C494) * C1358 +
              (C117 * C476 + C51110 * C487) * C1363) +
             (C117 * C892 + C51110 * C907) * C51042) *
                C51126 * C108 +
            (C1672 - (C1650 + C1651) + C1673) * C51126 * C109 +
            (C1674 - (C1656 + C1657) + C1675) * C51126 * C110 +
            (C1676 - (C1662 + C1663) + C1677) * C51126 * C111) *
               C1490 +
           ((C1651 + C1650 - C1672 - C1673) * C51126 * C108 +
            (C1657 + C1656 - C1674 - C1675) * C51126 * C109 +
            (C1663 + C1662 - C1676 - C1677) * C51126 * C110 +
            (C519 * C1363 + C520 * C1358 -
             (C117 * C1643 + C51110 * C1644) * C1364 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51126 * C111) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C1363 +
              (C117 * C127 + C51110 * C140) * C1358 -
              (C117 * C300 + C51110 * C306) * C1364 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C5336 +
             (C7131 + C7132 - C7133 - C7134) * C5337 +
             (C7135 + C7136 - C7137 - C7138) * C5338) *
                C2447 +
            ((C1366 + C1367 - C1368 - C1369) * C5336 + C7151 * C5337 +
             C7152 * C5338) *
                C50978) *
               C1490 +
           (((C1368 - (C1367 + C1366) + C1369) * C5336 + C7153 * C5337 +
             C7154 * C5338) *
                C2447 +
            ((C1372 - (C1371 + C1370) + C1373) * C5336 +
             (C1674 - (C1656 + C1657) + C1675) * C5337 +
             (C6771 - (C6772 + C6773) + C6774) * C5338) *
                C50978) *
               C50997) *
              C51256 +
          ((((C7133 - (C7132 + C7131) + C7134) * C5336 +
             (C7137 - (C7136 + C7135) + C7138) * C5337 +
             (C6495 * C1364 - (C6310 * C1358 + C6311 * C1363) +
              C6496 * C51042) *
                 C5338) *
                C2447 +
            (C7153 * C5336 + C7154 * C5337 +
             (C7143 - (C7144 + C7145) + C7146) * C5338) *
                C50978) *
               C1490 +
           ((C7151 * C5336 + C7152 * C5337 +
             (C7145 + C7144 - C7143 - C7146) * C5338) *
                C2447 +
            ((C1657 + C1656 - C1674 - C1675) * C5336 +
             (C6773 + C6772 - C6771 - C6774) * C5337 +
             (C5681 * C1363 + C5682 * C1358 -
              (C117 * C7126 + C51110 * C7127) * C1364 -
              (C117 * C7128 + C51110 * C7129) * C51042) *
                 C5338) *
                C50978) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C1363 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C1358 -
             (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
              C2449 * C300 + C2444 * C306) *
                 C1364 -
             (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
              C2449 * C307 + C2444 * C318) *
                 C51042) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C1363 + (C2492 + C2493 + C2494) * C1358 -
             (C2677 + C2678 + C2679) * C1364 -
             (C2680 + C2681 + C2682) * C51042) *
                C51126 * C50978) *
               C51247 +
           (((C2679 + C2678 + C2677) * C1364 -
             ((C2494 + C2493 + C2492) * C1358 +
              (C2491 + C2490 + C2489) * C1363) +
             (C2682 + C2681 + C2680) * C51042) *
                C51126 * C2447 +
            ((C2683 + C2684 + C2685) * C1364 -
             ((C2495 + C2496 + C2497) * C1358 +
              (C2498 + C2499 + C2500) * C1363) +
             (C2686 + C2687 + C2688) * C51042) *
                C51126 * C50978) *
               C50997) *
              C1775 +
          ((((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
              C2451 * C3298 + C2446 * C3302) *
                 C1364 -
             ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
               C2449 * C486 + C2444 * C494) *
                  C1358 +
              (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
               C2449 * C476 + C2444 * C487) *
                  C1363) +
             (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
              C2451 * C3303 + C2446 * C3310) *
                 C51042) *
                C51126 * C2447 +
            ((C4261 + C4262 + C4263) * C1364 -
             ((C2864 + C2863 + C2862) * C1358 +
              (C2861 + C2860 + C2859) * C1363) +
             (C4264 + C4265 + C4266) * C51042) *
                C51126 * C50978) *
               C51247 +
           (((C2859 + C2860 + C2861) * C1363 + (C2862 + C2863 + C2864) * C1358 -
             (C4263 + C4262 + C4261) * C1364 -
             (C4266 + C4265 + C4264) * C51042) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C1363 + (C2868 + C2869 + C2870) * C1358 -
             (C2451 * C4244 + C2446 * C4245 + C2450 * C888 + C2445 * C901 +
              C2449 * C887 + C2444 * C899) *
                 C1364 -
             (C2451 * C4246 + C2446 * C4247 + C2450 * C902 + C2445 * C912 +
              C2449 * C900 + C2444 * C911) *
                 C51042) *
                C51126 * C50978) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51126 * C108 +
            (C1366 + C1367 - C1368 - C1369) * C51126 * C109 + C1388 * C110 +
            C1389 * C111) *
               C51247 +
           ((C1368 - (C1367 + C1366) + C1369) * C51126 * C108 +
            (C1372 - (C1371 + C1370) + C1373) * C51126 * C109 +
            (C1376 - (C1375 + C1374) + C1377) * C51126 * C110 +
            (C1378 - (C1379 + C1380) + C1381) * C51126 * C111) *
               C50997) *
              C1775 +
          ((((C117 * C883 + C51110 * C891) * C1364 -
             ((C117 * C486 + C51110 * C494) * C1358 +
              (C117 * C476 + C51110 * C487) * C1363) +
             (C117 * C892 + C51110 * C907) * C51042) *
                C51126 * C108 +
            (C1672 - (C1650 + C1651) + C1673) * C51126 * C109 +
            (C1674 - (C1656 + C1657) + C1675) * C51126 * C110 +
            (C1676 - (C1662 + C1663) + C1677) * C51126 * C111) *
               C51247 +
           ((C1651 + C1650 - C1672 - C1673) * C51126 * C108 +
            (C1657 + C1656 - C1674 - C1675) * C51126 * C109 +
            (C1663 + C1662 - C1676 - C1677) * C51126 * C110 +
            (C519 * C1363 + C520 * C1358 -
             (C117 * C1643 + C51110 * C1644) * C1364 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51126 * C111) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C1363 +
              (C117 * C127 + C51110 * C140) * C1358 -
              (C117 * C300 + C51110 * C306) * C1364 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C5336 +
             (C7131 + C7132 - C7133 - C7134) * C5337 +
             (C7135 + C7136 - C7137 - C7138) * C5338) *
                C2447 +
            ((C1366 + C1367 - C1368 - C1369) * C5336 + C7151 * C5337 +
             C7152 * C5338) *
                C50978) *
               C51247 +
           (((C1368 - (C1367 + C1366) + C1369) * C5336 + C7153 * C5337 +
             C7154 * C5338) *
                C2447 +
            ((C1372 - (C1371 + C1370) + C1373) * C5336 +
             (C1674 - (C1656 + C1657) + C1675) * C5337 +
             (C6771 - (C6772 + C6773) + C6774) * C5338) *
                C50978) *
               C50997) *
              C1775 +
          ((((C7133 - (C7132 + C7131) + C7134) * C5336 +
             (C7137 - (C7136 + C7135) + C7138) * C5337 +
             (C6495 * C1364 - (C6310 * C1358 + C6311 * C1363) +
              C6496 * C51042) *
                 C5338) *
                C2447 +
            (C7153 * C5336 + C7154 * C5337 +
             (C7143 - (C7144 + C7145) + C7146) * C5338) *
                C50978) *
               C51247 +
           ((C7151 * C5336 + C7152 * C5337 +
             (C7145 + C7144 - C7143 - C7146) * C5338) *
                C2447 +
            ((C1657 + C1656 - C1674 - C1675) * C5336 +
             (C6773 + C6772 - C6771 - C6774) * C5337 +
             (C5681 * C1363 + C5682 * C1358 -
              (C117 * C7126 + C51110 * C7127) * C1364 -
              (C117 * C7128 + C51110 * C7129) * C51042) *
                 C5338) *
                C50978) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1492 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51301 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1493 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51288 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C1494 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C1489) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C1492 + (C2492 + C2493 + C2494) * C51301 -
            (C2677 + C2678 + C2679) * C1493 - (C2680 + C2681 + C2682) * C51288 +
            (C3041 + C3042 + C3043) * C1494 + (C3044 + C3045 + C3046) * C1489) *
               C51126 * C50978) *
              C50992 * C1775 +
          (((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
             C2451 * C3298 + C2446 * C3302) *
                C1493 -
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51301 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C1492) +
            (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
             C2451 * C3303 + C2446 * C3310) *
                C51288 -
            (C2451 * C3299 + C2446 * C3304 + C2450 * C3298 + C2445 * C3302 +
             C2449 * C884 + C2444 * C893) *
                C1494 -
            (C2451 * C3305 + C2446 * C3311 + C2450 * C3303 + C2445 * C3310 +
             C2449 * C894 + C2444 * C908) *
                C1489) *
               C51126 * C2447 +
           ((C4261 + C4262 + C4263) * C1493 -
            ((C2864 + C2863 + C2862) * C51301 +
             (C2861 + C2860 + C2859) * C1492) +
            (C4264 + C4265 + C4266) * C51288 -
            (C2451 * C3301 + C2446 * C3308 + C2450 * C3300 + C2445 * C3306 +
             C2449 * C886 + C2444 * C897) *
                C1494 -
            (C2451 * C3309 + C2446 * C3313 + C2450 * C3307 + C2445 * C3312 +
             C2449 * C898 + C2444 * C910) *
                C1489) *
               C51126 * C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C1492 +
            (C117 * C127 + C51110 * C140) * C51301 -
            (C117 * C300 + C51110 * C306) * C1493 -
            (C117 * C307 + C51110 * C318) * C51288 +
            (C117 * C638 + C51110 * C643) * C1494 +
            (C117 * C644 + C51110 * C653) * C1489) *
               C51126 * C108 +
           (C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C51126 * C109 +
           (C1502 + C1503 - C1504 - C1505 + C1506 + C1507) * C51126 * C110 +
           (C1508 + C1509 - C1510 - C1511 + C1512 + C1513) * C51126 * C111) *
              C50992 * C1775 +
          (((C117 * C883 + C51110 * C891) * C1493 -
            ((C117 * C486 + C51110 * C494) * C51301 +
             (C117 * C476 + C51110 * C487) * C1492) +
            (C117 * C892 + C51110 * C907) * C51288 -
            (C117 * C884 + C51110 * C893) * C1494 -
            (C117 * C894 + C51110 * C908) * C1489) *
               C51126 * C108 +
           (C1666 * C1493 - (C514 * C51301 + C513 * C1492) + C1667 * C51288 -
            (C117 * C886 + C51110 * C897) * C1494 -
            (C117 * C898 + C51110 * C910) * C1489) *
               C51126 * C109 +
           (C1668 * C1493 - (C516 * C51301 + C515 * C1492) + C1669 * C51288 -
            (C117 * C888 + C51110 * C901) * C1494 -
            (C117 * C902 + C51110 * C912) * C1489) *
               C51126 * C110 +
           (C1670 * C1493 - (C518 * C51301 + C517 * C1492) + C1671 * C51288 -
            (C117 * C890 + C51110 * C905) * C1494 -
            (C117 * C906 + C51110 * C914) * C1489) *
               C51126 * C111) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1492 +
             (C117 * C127 + C51110 * C140) * C51301 -
             (C117 * C300 + C51110 * C306) * C1493 -
             (C117 * C307 + C51110 * C318) * C51288 +
             (C117 * C638 + C51110 * C643) * C1494 +
             (C117 * C644 + C51110 * C653) * C1489) *
                C5336 +
            (C7990 + C7991 - C7992 - C7993 + C7994 + C7995) * C5337 +
            (C7996 + C7997 - C7998 - C7999 + C8000 + C8001) * C5338) *
               C2447 +
           ((C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C5336 +
            (C6921 + C6922 - C6923 - C6924 + C6925 + C6926) * C5337 +
            (C6927 + C6928 - C6929 - C6930 + C6931 + C6932) * C5338) *
               C50978) *
              C50992 * C1775 +
          (((C7992 - (C7991 + C7990) + C7993 - C7994 - C7995) * C5336 +
            (C7998 - (C7997 + C7996) + C7999 - C8000 - C8001) * C5337 +
            (C6495 * C1493 - (C6310 * C51301 + C6311 * C1492) + C6496 * C51288 -
             (C117 * C3744 + C51110 * C3752) * C1494 -
             (C117 * C3750 + C51110 * C3756) * C1489) *
                C5338) *
               C2447 +
           ((C6923 - (C6922 + C6921) + C6924 - C6925 - C6926) * C5336 +
            (C6929 - (C6928 + C6927) + C6930 - C6931 - C6932) * C5337 +
            (C6497 * C1493 - (C5680 * C51301 + C5679 * C1492) + C6498 * C51288 -
             (C117 * C3742 + C51110 * C3748) * C1494 -
             (C117 * C3746 + C51110 * C3754) * C1489) *
                C5338) *
               C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1363 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C1358 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1364 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C1363 + (C2492 + C2493 + C2494) * C1358 -
            (C2677 + C2678 + C2679) * C1364 -
            (C2680 + C2681 + C2682) * C51042) *
               C51126 * C50978) *
              C50992 * C51302 +
          (((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
             C2451 * C3298 + C2446 * C3302) *
                C1364 -
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C1358 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C1363) +
            (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
             C2451 * C3303 + C2446 * C3310) *
                C51042) *
               C51126 * C2447 +
           ((C4261 + C4262 + C4263) * C1364 -
            ((C2864 + C2863 + C2862) * C1358 +
             (C2861 + C2860 + C2859) * C1363) +
            (C4264 + C4265 + C4266) * C51042) *
               C51126 * C50978) *
              C50992 * C51291 +
          (((C2449 * C1016 + C2444 * C1021 + C2450 * C1158 + C2445 * C1162 +
             C2451 * C3460 + C2446 * C3463) *
                C1363 +
            (C2449 * C1022 + C2444 * C1031 + C2450 * C1163 + C2445 * C1170 +
             C2451 * C3464 + C2446 * C3469) *
                C1358 -
            (C2451 * C3636 + C2446 * C3638 + C2450 * C3460 + C2445 * C3463 +
             C2449 * C1158 + C2444 * C1162) *
                C1364 -
            (C2451 * C3639 + C2446 * C3642 + C2450 * C3464 + C2445 * C3469 +
             C2449 * C1163 + C2444 * C1170) *
                C51042) *
               C51126 * C2447 +
           ((C3485 + C3486 + C3487) * C1363 + (C3488 + C3489 + C3490) * C1358 -
            (C2451 * C3637 + C2446 * C3640 + C2450 * C3461 + C2445 * C3465 +
             C2449 * C1159 + C2444 * C1164) *
                C1364 -
            (C2451 * C3641 + C2446 * C3643 + C2450 * C3466 + C2445 * C3470 +
             C2449 * C1165 + C2444 * C1171) *
                C51042) *
               C51126 * C50978) *
              C50992 * C2019)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C1363 +
            (C117 * C127 + C51110 * C140) * C1358 -
            (C117 * C300 + C51110 * C306) * C1364 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C51126 * C108 +
           (C1366 + C1367 - C1368 - C1369) * C51126 * C109 + C1388 * C110 +
           C1389 * C111) *
              C50992 * C51302 +
          (((C117 * C883 + C51110 * C891) * C1364 -
            ((C117 * C486 + C51110 * C494) * C1358 +
             (C117 * C476 + C51110 * C487) * C1363) +
            (C117 * C892 + C51110 * C907) * C51042) *
               C51126 * C108 +
           (C1672 - (C1650 + C1651) + C1673) * C51126 * C109 +
           (C1674 - (C1656 + C1657) + C1675) * C51126 * C110 +
           (C1676 - (C1662 + C1663) + C1677) * C51126 * C111) *
              C50992 * C51291 +
          (((C117 * C1016 + C51110 * C1021) * C1363 +
            (C117 * C1022 + C51110 * C1031) * C1358 -
            (C117 * C1158 + C51110 * C1162) * C1364 -
            (C117 * C1163 + C51110 * C1170) * C51042) *
               C51126 * C108 +
           (C1049 * C1363 + C1050 * C1358 -
            (C117 * C1159 + C51110 * C1164) * C1364 -
            (C117 * C1165 + C51110 * C1171) * C51042) *
               C51126 * C109 +
           (C1051 * C1363 + C1052 * C1358 -
            (C117 * C1160 + C51110 * C1166) * C1364 -
            (C117 * C1167 + C51110 * C1172) * C51042) *
               C51126 * C110 +
           (C1053 * C1363 + C1054 * C1358 -
            (C117 * C1161 + C51110 * C1168) * C1364 -
            (C117 * C1169 + C51110 * C1173) * C51042) *
               C51126 * C111) *
              C50992 * C2019)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C5336 +
            (C7131 + C7132 - C7133 - C7134) * C5337 + C8154 * C5338) *
               C2447 +
           ((C1366 + C1367 - C1368 - C1369) * C5336 + C7151 * C5337 +
            C7152 * C5338) *
               C50978) *
              C50992 * C51302 +
          (((C7133 - (C7132 + C7131) + C7134) * C5336 +
            (C7137 - (C7136 + C7135) + C7138) * C5337 +
            (C8149 - (C8150 + C8151) + C8152) * C5338) *
               C2447 +
           (C7153 * C5336 + C7154 * C5337 +
            (C7143 - (C7144 + C7145) + C7146) * C5338) *
               C50978) *
              C50992 * C51291 +
          ((C8154 * C5336 + (C8151 + C8150 - C8149 - C8152) * C5337 +
            (C6617 * C1363 + C6618 * C1358 -
             (C117 * C6463 + C51110 * C6465) * C1364 -
             (C117 * C6466 + C51110 * C6469) * C51042) *
                C5338) *
               C2447 +
           (C7152 * C5336 + (C7145 + C7144 - C7143 - C7146) * C5337 +
            (C6312 * C1363 + C6313 * C1358 -
             (C117 * C6464 + C51110 * C6467) * C1364 -
             (C117 * C6468 + C51110 * C6470) * C51042) *
                C5338) *
               C50978) *
              C50992 * C2019)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C51110 * C126) * C118 +
                (C117 * C127 + C51110 * C140) * C51026) *
                   C51126 * C108 +
               (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
                  C112 -
              (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
               (C179 + C178) * C51126 * C108) *
                  C113 +
              (C192 * C108 + C193 * C109 + (C185 + C184) * C51126 * C110 +
               (C186 + C187) * C51126 * C111) *
                  C114 -
              (((C117 * C138 + C51110 * C146) * C51026 +
                (C117 * C125 + C51110 * C139) * C118) *
                   C51126 * C111 +
               (C187 + C186) * C51126 * C110 + C194 * C109 + C195 * C108) *
                  C115) *
             C51056 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C51110 * C126) * C635 +
                (C117 * C127 + C51110 * C140) * C630 -
                (C117 * C300 + C51110 * C306) * C636 -
                (C117 * C307 + C51110 * C318) * C631 +
                (C117 * C638 + C51110 * C643) * C637 +
                (C117 * C644 + C51110 * C653) * C632) *
                   C51126 * C108 +
               (C659 + C660 - C661 - C662 + C689 + C690) * C51126 * C109 +
               (C667 + C668 - C669 - C670 + C691 + C692) * C51126 * C110 +
               (C675 + C676 - C677 - C678 + C693 + C694) * C51126 * C111) *
                  C51247 +
              ((C661 - (C660 + C659) + C662 - C689 - C690) * C51126 * C108 +
               (C669 - (C668 + C667) + C670 - C691 - C692) * C51126 * C109 +
               (C677 - (C676 + C675) + C678 - C693 - C694) * C51126 * C110 +
               (C357 * C636 - (C174 * C630 + C175 * C635) + C358 * C631 -
                (C117 * C642 + C51110 * C651) * C637 -
                (C117 * C652 + C51110 * C657) * C632) *
                   C51126 * C111) *
                  C50997) *
             C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51126 * C108 +
            (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
               C51247 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
            (C179 + C178) * C51126 * C108) *
               C50997) *
              C1013 +
          (((C521 + C522) * C51126 * C108 + (C523 + C524) * C51126 * C109 +
            (C525 + C526) * C51126 * C110 + (C527 + C528) * C51126 * C111) *
               C50997 -
           (C531 * C111 + C532 * C110 + (C522 + C521) * C51126 * C109 +
            ((C117 * C486 + C51110 * C494) * C51026 +
             (C117 * C476 + C51110 * C487) * C118) *
                C51126 * C108) *
               C51247) *
              C1014 +
          ((((C117 * C1016 + C51110 * C1021) * C118 +
             (C117 * C1022 + C51110 * C1031) * C51026) *
                C51126 * C108 +
            (C1055 + C1056) * C51126 * C109 + (C1057 + C1058) * C51126 * C110 +
            (C1059 + C1060) * C51126 * C111) *
               C51247 -
           (((C117 * C1029 + C51110 * C1035) * C51026 +
             (C117 * C1020 + C51110 * C1030) * C118) *
                C51126 * C111 +
            (C1060 + C1059) * C51126 * C110 + (C1058 + C1057) * C51126 * C109 +
            (C1056 + C1055) * C51126 * C108) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51026) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C118 + (C2492 + C2493 + C2494) * C51026) *
               C51126 * C50978) *
              C112 -
          (((C2495 + C2496 + C2497) * C51026 + (C2498 + C2499 + C2500) * C118) *
               C51126 * C50978 +
           ((C2494 + C2493 + C2492) * C51026 + (C2491 + C2490 + C2489) * C118) *
               C51126 * C2447) *
              C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51026) *
               C51126 * C2447 +
           ((C2501 + C2502 + C2503) * C118 + (C2504 + C2505 + C2506) * C51026) *
               C51126 * C50978) *
              C114 -
          (((C2451 * C652 + C2446 * C657 + C2450 * C315 + C2445 * C322 +
             C2449 * C134 + C2444 * C144) *
                C51026 +
            (C2451 * C642 + C2446 * C651 + C2450 * C304 + C2445 * C314 +
             C2449 * C123 + C2444 * C135) *
                C118) *
               C51126 * C50978 +
           ((C2506 + C2505 + C2504) * C51026 + (C2503 + C2502 + C2501) * C118) *
               C51126 * C2447) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C635 + (C2492 + C2493 + C2494) * C630 -
            (C2677 + C2678 + C2679) * C636 - (C2680 + C2681 + C2682) * C631 +
            (C3041 + C3042 + C3043) * C637 + (C3044 + C3045 + C3046) * C632) *
               C51126 * C50978) *
              C51247 +
          (((C2679 + C2678 + C2677) * C636 -
            ((C2494 + C2493 + C2492) * C630 + (C2491 + C2490 + C2489) * C635) +
            (C2682 + C2681 + C2680) * C631 - (C3043 + C3042 + C3041) * C637 -
            (C3046 + C3045 + C3044) * C632) *
               C51126 * C2447 +
           ((C2683 + C2684 + C2685) * C636 -
            ((C2495 + C2496 + C2497) * C630 + (C2498 + C2499 + C2500) * C635) +
            (C2686 + C2687 + C2688) * C631 -
            (C2451 * C3018 + C2446 * C3023 + C2450 * C771 + C2445 * C777 +
             C2449 * C640 + C2444 * C647) *
                C637 -
            (C2451 * C3024 + C2446 * C3027 + C2450 * C778 + C2445 * C783 +
             C2449 * C648 + C2444 * C655) *
                C632) *
               C51126 * C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51026) *
                C51126 * C50978) *
               C51247 -
           (((C2495 + C2496 + C2497) * C51026 +
             (C2498 + C2499 + C2500) * C118) *
                C51126 * C50978 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C51126 * C2447) *
               C50997) *
              C1013 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51126 * C50978) *
               C50997 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51126 * C50978 +
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51026 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C118) *
                C51126 * C2447) *
               C51247) *
              C1014 +
          ((((C2449 * C1016 + C2444 * C1021 + C2450 * C1158 + C2445 * C1162 +
              C2451 * C3460 + C2446 * C3463) *
                 C118 +
             (C2449 * C1022 + C2444 * C1031 + C2450 * C1163 + C2445 * C1170 +
              C2451 * C3464 + C2446 * C3469) *
                 C51026) *
                C51126 * C2447 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51126 * C50978) *
               C51247 -
           (((C2451 * C3467 + C2446 * C3471 + C2450 * C1167 + C2445 * C1172 +
              C2449 * C1026 + C2444 * C1033) *
                 C51026 +
             (C2451 * C3462 + C2446 * C3468 + C2450 * C1160 + C2445 * C1166 +
              C2449 * C1018 + C2444 * C1025) *
                 C118) *
                C51126 * C50978 +
            ((C3490 + C3489 + C3488) * C51026 +
             (C3487 + C3486 + C3485) * C118) *
                C51126 * C2447) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C5336 +
            ((C117 * C476 + C51110 * C487) * C118 +
             (C117 * C486 + C51110 * C494) * C51026) *
                C5337 +
            ((C117 * C1016 + C51110 * C1021) * C118 +
             (C117 * C1022 + C51110 * C1031) * C51026) *
                C5338) *
               C2447 +
           ((C178 + C179) * C5336 + (C521 + C522) * C5337 +
            (C1055 + C1056) * C5338) *
               C50978) *
              C112 -
          (((C1058 + C1057) * C5338 + C530 * C5337 + (C181 + C180) * C5336) *
               C50978 +
           ((C1056 + C1055) * C5338 + (C522 + C521) * C5337 +
            (C179 + C178) * C5336) *
               C2447) *
              C113 +
          ((C188 * C5336 + (C523 + C524) * C5337 + (C1057 + C1058) * C5338) *
               C2447 +
           (C189 * C5336 + (C525 + C526) * C5337 + (C1059 + C1060) * C5338) *
               C50978) *
              C114 -
          ((((C117 * C1029 + C51110 * C1035) * C51026 +
             (C117 * C1020 + C51110 * C1030) * C118) *
                C5338 +
            (C528 + C527) * C5337 + C190 * C5336) *
               C50978 +
           ((C1060 + C1059) * C5338 + C529 * C5337 + C191 * C5336) * C2447) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C5336 +
            (C5675 * C635 + C5676 * C630 -
             (C117 * C883 + C51110 * C891) * C636 -
             (C117 * C892 + C51110 * C907) * C631 +
             (C117 * C884 + C51110 * C893) * C637 +
             (C117 * C894 + C51110 * C908) * C632) *
                C5337 +
            (C5677 * C635 + C5678 * C630 -
             (C117 * C1158 + C51110 * C1162) * C636 -
             (C117 * C1163 + C51110 * C1170) * C631 +
             (C117 * C3460 + C51110 * C3463) * C637 +
             (C117 * C3464 + C51110 * C3469) * C632) *
                C5338) *
               C2447 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C5336 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C5337 +
            (C5845 + C5846 - C5847 - C5848 + C5859 + C5860) * C5338) *
               C50978) *
              C51247 +
          (((C661 - (C660 + C659) + C662 - C689 - C690) * C5336 +
            (C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C5337 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C5338) *
               C2447 +
           ((C669 - (C668 + C667) + C670 - C691 - C692) * C5336 +
            (C1668 * C636 - (C516 * C630 + C515 * C635) + C1669 * C631 -
             (C117 * C888 + C51110 * C901) * C637 -
             (C117 * C902 + C51110 * C912) * C632) *
                C5337 +
            (C5500 * C636 - (C1052 * C630 + C1051 * C635) + C5501 * C631 -
             (C117 * C3462 + C51110 * C3468) * C637 -
             (C117 * C3467 + C51110 * C3471) * C632) *
                C5338) *
               C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C5336 +
             (C5683 + C5684) * C5337 + C6299 * C5338) *
                C2447 +
            ((C178 + C179) * C5336 + C5660 * C5337 + C5661 * C5338) * C50978) *
               C51247 -
           ((C5662 * C5338 + C530 * C5337 + (C181 + C180) * C5336) * C50978 +
            (C5663 * C5338 + C5664 * C5337 + (C179 + C178) * C5336) * C2447) *
               C50997) *
              C1013 +
          (((C5660 * C5336 + C5661 * C5337 + C6300 * C5338) * C2447 +
            (C5665 * C5336 + C5666 * C5337 + (C5689 + C5690) * C5338) *
                C50978) *
               C50997 -
           ((C6301 * C5338 + C5663 * C5337 + C5664 * C5336) * C50978 +
            ((C6314 + C6315) * C5338 + (C5686 + C5685) * C5337 +
             (C5684 + C5683) * C5336) *
                C2447) *
               C51247) *
              C1014 +
          (((C6299 * C5336 + (C6315 + C6314) * C5337 +
             ((C117 * C6286 + C51110 * C6289) * C118 +
              (C117 * C6290 + C51110 * C6295) * C51026) *
                 C5338) *
                C2447 +
            (C5661 * C5336 + C6300 * C5337 + (C6316 + C6317) * C5338) *
                C50978) *
               C51247 -
           ((((C117 * C6293 + C51110 * C6297) * C51026 +
              (C117 * C6288 + C51110 * C6294) * C118) *
                 C5338 +
             (C5690 + C5689) * C5337 + C5662 * C5336) *
                C50978 +
            ((C6317 + C6316) * C5338 + C6301 * C5337 + C5663 * C5336) * C2447) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C51110 * C126) * C298 +
                (C117 * C127 + C51110 * C140) * C51254 -
                (C117 * C300 + C51110 * C306) * C299 -
                (C117 * C307 + C51110 * C318) * C51042) *
                   C51126 * C108 +
               (C325 + C326 - C359 - C360) * C51126 * C109 + C371 * C110 +
               C372 * C111) *
                  C295 +
              ((C359 - (C326 + C325) + C360) * C51126 * C108 +
               (C361 - (C332 + C331) + C362) * C51126 * C109 +
               (C363 - (C338 + C337) + C364) * C51126 * C110 +
               (C365 - (C345 + C346) + C366) * C51126 * C111) *
                  C296 +
              (C371 * C108 + C372 * C109 +
               (C346 + C345 - C365 - C366) * C51126 * C110 +
               (C176 * C298 + C177 * C51254 -
                (C117 * C305 + C51110 * C316) * C299 -
                (C117 * C317 + C51110 * C323) * C51042) *
                   C51126 * C111) *
                  C297) *
             C51056 +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C119 + C51110 * C126) * C765 +
               (C117 * C127 + C51110 * C140) * C760 -
               (C117 * C300 + C51110 * C306) * C766 -
               (C117 * C307 + C51110 * C318) * C761 +
               (C117 * C638 + C51110 * C643) * C767 +
               (C117 * C644 + C51110 * C653) * C762 -
               (C117 * C769 + C51110 * C773) * C768 -
               (C117 * C774 + C51110 * C781) * C763) *
                  C51126 * C108 +
              (C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 +
               C683 * C767 + C684 * C762 -
               (C117 * C770 + C51110 * C775) * C768 -
               (C117 * C776 + C51110 * C782) * C763) *
                  C51126 * C109 +
              (C170 * C765 + C171 * C760 - C352 * C766 - C353 * C761 +
               C685 * C767 + C686 * C762 -
               (C117 * C771 + C51110 * C777) * C768 -
               (C117 * C778 + C51110 * C783) * C763) *
                  C51126 * C110 +
              (C172 * C765 + C173 * C760 - C355 * C766 - C356 * C761 +
               C687 * C767 + C688 * C762 -
               (C117 * C772 + C51110 * C779) * C768 -
               (C117 * C780 + C51110 * C784) * C763) *
                  C51126 * C111) *
             C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C117 * C119 + C51110 * C126) * C298 +
                                (C117 * C127 + C51110 * C140) * C51254 -
                                (C117 * C300 + C51110 * C306) * C299 -
                                (C117 * C307 + C51110 * C318) * C51042) *
                                   C51126 * C108 +
                               (C325 + C326 - C359 - C360) * C51126 * C109 +
                               C371 * C110 + C372 * C111) *
                                  C50992 * C1013 +
                              (((C117 * C883 + C51110 * C891) * C299 -
                                ((C117 * C486 + C51110 * C494) * C51254 +
                                 (C117 * C476 + C51110 * C487) * C298) +
                                (C117 * C892 + C51110 * C907) * C51042) *
                                   C51126 * C108 +
                               ((C117 * C885 + C51110 * C895) * C299 -
                                (C514 * C51254 + C513 * C298) +
                                (C117 * C896 + C51110 * C909) * C51042) *
                                   C51126 * C109 +
                               ((C117 * C887 + C51110 * C899) * C299 -
                                (C516 * C51254 + C515 * C298) +
                                (C117 * C900 + C51110 * C911) * C51042) *
                                   C51126 * C110 +
                               ((C117 * C889 + C51110 * C903) * C299 -
                                (C518 * C51254 + C517 * C298) +
                                (C117 * C904 + C51110 * C913) * C51042) *
                                   C51126 * C111) *
                                  C50992 * C1014 +
                              (((C117 * C1016 + C51110 * C1021) * C298 +
                                (C117 * C1022 + C51110 * C1031) * C51254 -
                                (C117 * C1158 + C51110 * C1162) * C299 -
                                (C117 * C1163 + C51110 * C1170) * C51042) *
                                   C51126 * C108 +
                               (C1049 * C298 + C1050 * C51254 -
                                (C117 * C1159 + C51110 * C1164) * C299 -
                                (C117 * C1165 + C51110 * C1171) * C51042) *
                                   C51126 * C109 +
                               (C1051 * C298 + C1052 * C51254 -
                                (C117 * C1160 + C51110 * C1166) * C299 -
                                (C117 * C1167 + C51110 * C1172) * C51042) *
                                   C51126 * C110 +
                               (C1053 * C298 + C1054 * C51254 -
                                (C117 * C1161 + C51110 * C1168) * C299 -
                                (C117 * C1169 + C51110 * C1173) * C51042) *
                                   C51126 * C111) *
                                  C50992 * C1015)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51254 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C299 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C51254 -
            (C2677 + C2678 + C2679) * C299 - (C2680 + C2681 + C2682) * C51042) *
               C51126 * C50978) *
              C295 +
          (((C2679 + C2678 + C2677) * C299 -
            ((C2494 + C2493 + C2492) * C51254 +
             (C2491 + C2490 + C2489) * C298) +
            (C2682 + C2681 + C2680) * C51042) *
               C51126 * C2447 +
           ((C2683 + C2684 + C2685) * C299 -
            ((C2495 + C2496 + C2497) * C51254 +
             (C2498 + C2499 + C2500) * C298) +
            (C2686 + C2687 + C2688) * C51042) *
               C51126 * C50978) *
              C296 +
          (((C2500 + C2499 + C2498) * C298 + (C2497 + C2496 + C2495) * C51254 -
            (C2685 + C2684 + C2683) * C299 - (C2688 + C2687 + C2686) * C51042) *
               C51126 * C2447 +
           ((C2501 + C2502 + C2503) * C298 + (C2504 + C2505 + C2506) * C51254 -
            (C2451 * C772 + C2446 * C779 + C2450 * C641 + C2445 * C649 +
             C2449 * C303 + C2444 * C312) *
                C299 -
            (C2451 * C780 + C2446 * C784 + C2450 * C650 + C2445 * C656 +
             C2449 * C313 + C2444 * C321) *
                C51042) *
               C51126 * C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
            C2451 * C638 + C2446 * C643) *
               C765 +
           (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
            C2451 * C644 + C2446 * C653) *
               C760 -
           (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
            C2449 * C300 + C2444 * C306) *
               C766 -
           (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
            C2449 * C307 + C2444 * C318) *
               C761 +
           (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
            C2451 * C3016 + C2446 * C3019) *
               C767 +
           (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
            C2451 * C3020 + C2446 * C3025) *
               C762 -
           (C2451 * C3144 + C2446 * C3146 + C2450 * C3016 + C2445 * C3019 +
            C2449 * C769 + C2444 * C773) *
               C768 -
           (C2451 * C3147 + C2446 * C3150 + C2450 * C3020 + C2445 * C3025 +
            C2449 * C774 + C2444 * C781) *
               C763) *
              C51126 * C2447 +
          ((C2489 + C2490 + C2491) * C765 + (C2492 + C2493 + C2494) * C760 -
           (C2677 + C2678 + C2679) * C766 - (C2680 + C2681 + C2682) * C761 +
           (C3041 + C3042 + C3043) * C767 + (C3044 + C3045 + C3046) * C762 -
           (C2451 * C3145 + C2446 * C3148 + C2450 * C3017 + C2445 * C3021 +
            C2449 * C770 + C2444 * C775) *
               C768 -
           (C2451 * C3149 + C2446 * C3151 + C2450 * C3022 + C2445 * C3026 +
            C2449 * C776 + C2444 * C782) *
               C763) *
              C51126 * C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51254 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C299 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C51254 -
            (C2677 + C2678 + C2679) * C299 - (C2680 + C2681 + C2682) * C51042) *
               C51126 * C50978) *
              C50992 * C1013 +
          (((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
             C2451 * C3298 + C2446 * C3302) *
                C299 -
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51254 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C298) +
            (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
             C2451 * C3303 + C2446 * C3310) *
                C51042) *
               C51126 * C2447 +
           ((C2449 * C885 + C2444 * C895 + C2450 * C886 + C2445 * C897 +
             C2451 * C3300 + C2446 * C3306) *
                C299 -
            ((C2864 + C2863 + C2862) * C51254 +
             (C2861 + C2860 + C2859) * C298) +
            (C2449 * C896 + C2444 * C909 + C2450 * C898 + C2445 * C910 +
             C2451 * C3307 + C2446 * C3312) *
                C51042) *
               C51126 * C50978) *
              C50992 * C1014 +
          (((C2449 * C1016 + C2444 * C1021 + C2450 * C1158 + C2445 * C1162 +
             C2451 * C3460 + C2446 * C3463) *
                C298 +
            (C2449 * C1022 + C2444 * C1031 + C2450 * C1163 + C2445 * C1170 +
             C2451 * C3464 + C2446 * C3469) *
                C51254 -
            (C2451 * C3636 + C2446 * C3638 + C2450 * C3460 + C2445 * C3463 +
             C2449 * C1158 + C2444 * C1162) *
                C299 -
            (C2451 * C3639 + C2446 * C3642 + C2450 * C3464 + C2445 * C3469 +
             C2449 * C1163 + C2444 * C1170) *
                C51042) *
               C51126 * C2447 +
           ((C3485 + C3486 + C3487) * C298 + (C3488 + C3489 + C3490) * C51254 -
            (C2451 * C3637 + C2446 * C3640 + C2450 * C3461 + C2445 * C3465 +
             C2449 * C1159 + C2444 * C1164) *
                C299 -
            (C2451 * C3641 + C2446 * C3643 + C2450 * C3466 + C2445 * C3470 +
             C2449 * C1165 + C2444 * C1171) *
                C51042) *
               C51126 * C50978) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C5336 +
            ((C117 * C476 + C51110 * C487) * C298 +
             (C117 * C486 + C51110 * C494) * C51254 -
             (C117 * C883 + C51110 * C891) * C299 -
             (C117 * C892 + C51110 * C907) * C51042) *
                C5337 +
            ((C117 * C1016 + C51110 * C1021) * C298 +
             (C117 * C1022 + C51110 * C1031) * C51254 -
             (C117 * C1158 + C51110 * C1162) * C299 -
             (C117 * C1163 + C51110 * C1170) * C51042) *
                C5338) *
               C2447 +
           ((C325 + C326 - C359 - C360) * C5336 +
            (C1910 + C1909 - C1908 - C1911) * C5337 +
            (C5486 + C5487 - C5502 - C5503) * C5338) *
               C50978) *
              C295 +
          (((C359 - (C326 + C325) + C360) * C5336 +
            (C1908 - (C1909 + C1910) + C1911) * C5337 +
            (C5502 - (C5487 + C5486) + C5503) * C5338) *
               C2447 +
           ((C361 - (C332 + C331) + C362) * C5336 +
            (C1912 - (C1913 + C1914) + C1915) * C5337 +
            (C5504 - (C5494 + C5495) + C5505) * C5338) *
               C50978) *
              C296 +
          ((C369 * C5336 + (C1914 + C1913 - C1912 - C1915) * C5337 +
            (C5495 + C5494 - C5504 - C5505) * C5338) *
               C2447 +
           (C370 * C5336 + (C1918 + C1917 - C1916 - C1919) * C5337 +
            (C1053 * C298 + C1054 * C51254 -
             (C117 * C1161 + C51110 * C1168) * C299 -
             (C117 * C1169 + C51110 * C1173) * C51042) *
                C5338) *
               C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C765 +
            (C117 * C127 + C51110 * C140) * C760 -
            (C117 * C300 + C51110 * C306) * C766 -
            (C117 * C307 + C51110 * C318) * C761 +
            (C117 * C638 + C51110 * C643) * C767 +
            (C117 * C644 + C51110 * C653) * C762 -
            (C117 * C769 + C51110 * C773) * C768 -
            (C117 * C774 + C51110 * C781) * C763) *
               C5336 +
           (C5675 * C765 + C5676 * C760 - (C117 * C883 + C51110 * C891) * C766 -
            (C117 * C892 + C51110 * C907) * C761 +
            (C117 * C884 + C51110 * C893) * C767 +
            (C117 * C894 + C51110 * C908) * C762 -
            (C117 * C3298 + C51110 * C3302) * C768 -
            (C117 * C3303 + C51110 * C3310) * C763) *
               C5337 +
           (C5677 * C765 + C5678 * C760 -
            (C117 * C1158 + C51110 * C1162) * C766 -
            (C117 * C1163 + C51110 * C1170) * C761 +
            (C117 * C3460 + C51110 * C3463) * C767 +
            (C117 * C3464 + C51110 * C3469) * C762 -
            (C117 * C3636 + C51110 * C3638) * C768 -
            (C117 * C3639 + C51110 * C3642) * C763) *
               C5338) *
              C2447 +
          ((C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 +
            C683 * C767 + C684 * C762 - (C117 * C770 + C51110 * C775) * C768 -
            (C117 * C776 + C51110 * C782) * C763) *
               C5336 +
           (C513 * C765 + C514 * C760 - C1666 * C766 - C1667 * C761 +
            C5853 * C767 + C5854 * C762 -
            (C117 * C3300 + C51110 * C3306) * C768 -
            (C117 * C3307 + C51110 * C3312) * C763) *
               C5337 +
           (C1049 * C765 + C1050 * C760 - C5498 * C766 - C5499 * C761 +
            C5855 * C767 + C5856 * C762 -
            (C117 * C3637 + C51110 * C3640) * C768 -
            (C117 * C3641 + C51110 * C3643) * C763) *
               C5338) *
              C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C5336 +
            (C6472 + C6473 - C6474 - C6475) * C5337 + C6505 * C5338) *
               C2447 +
           ((C325 + C326 - C359 - C360) * C5336 +
            (C1910 + C1909 - C1908 - C1911) * C5337 + C6500 * C5338) *
               C50978) *
              C50992 * C1013 +
          (((C6474 - (C6473 + C6472) + C6475) * C5336 +
            (C6478 - (C6477 + C6476) + C6479) * C5337 +
            (C6501 - (C6483 + C6484) + C6502) * C5338) *
               C2447 +
           ((C1908 - (C1909 + C1910) + C1911) * C5336 +
            (C5502 - (C5487 + C5486) + C5503) * C5337 +
            (C6503 - (C6489 + C6490) + C6504) * C5338) *
               C50978) *
              C50992 * C1014 +
          ((C6505 * C5336 + (C6484 + C6483 - C6501 - C6502) * C5337 +
            ((C117 * C6286 + C51110 * C6289) * C298 +
             (C117 * C6290 + C51110 * C6295) * C51254 -
             (C117 * C6463 + C51110 * C6465) * C299 -
             (C117 * C6466 + C51110 * C6469) * C51042) *
                C5338) *
               C2447 +
           (C6500 * C5336 + (C6490 + C6489 - C6503 - C6504) * C5337 +
            (C6312 * C298 + C6313 * C51254 -
             (C117 * C6464 + C51110 * C6467) * C299 -
             (C117 * C6468 + C51110 * C6470) * C51042) *
                C5338) *
               C50978) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C51110 * C126) * C118 +
                 (C117 * C127 + C51110 * C140) * C51026) *
                    C51126 * C108 +
                (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
                   C295 -
               (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
                (C179 + C178) * C51126 * C108) *
                   C296 +
               (C192 * C108 + C193 * C109 + (C185 + C184) * C51126 * C110 +
                (C186 + C187) * C51126 * C111) *
                   C297) *
                  C51256 +
              (((C521 + C522) * C51126 * C108 + (C523 + C524) * C51126 * C109 +
                (C525 + C526) * C51126 * C110 + (C527 + C528) * C51126 * C111) *
                   C296 -
               (C531 * C111 + C532 * C110 + (C522 + C521) * C51126 * C109 +
                ((C117 * C486 + C51110 * C494) * C51026 +
                 (C117 * C476 + C51110 * C487) * C118) *
                    C51126 * C108) *
                   C295 -
               (((C117 * C488 + C51110 * C495) * C51026 +
                 (C117 * C477 + C51110 * C489) * C118) *
                    C51126 * C111 +
                (C528 + C527) * C51126 * C110 + C531 * C109 + C532 * C108) *
                   C297) *
                  C51068) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C51110 * C126) * C635 +
                (C117 * C127 + C51110 * C140) * C630 -
                (C117 * C300 + C51110 * C306) * C636 -
                (C117 * C307 + C51110 * C318) * C631 +
                (C117 * C638 + C51110 * C643) * C637 +
                (C117 * C644 + C51110 * C653) * C632) *
                   C51126 * C108 +
               (C659 + C660 - C661 - C662 + C689 + C690) * C51126 * C109 +
               (C667 + C668 - C669 - C670 + C691 + C692) * C51126 * C110 +
               (C675 + C676 - C677 - C678 + C693 + C694) * C51126 * C111) *
                  C50992 * C51256 +
              (((C117 * C883 + C51110 * C891) * C636 -
                ((C117 * C486 + C51110 * C494) * C630 +
                 (C117 * C476 + C51110 * C487) * C635) +
                (C117 * C892 + C51110 * C907) * C631 -
                (C117 * C884 + C51110 * C893) * C637 -
                (C117 * C894 + C51110 * C908) * C632) *
                   C51126 * C108 +
               ((C117 * C885 + C51110 * C895) * C636 -
                (C514 * C630 + C513 * C635) +
                (C117 * C896 + C51110 * C909) * C631 -
                (C117 * C886 + C51110 * C897) * C637 -
                (C117 * C898 + C51110 * C910) * C632) *
                   C51126 * C109 +
               ((C117 * C887 + C51110 * C899) * C636 -
                (C516 * C630 + C515 * C635) +
                (C117 * C900 + C51110 * C911) * C631 -
                (C117 * C888 + C51110 * C901) * C637 -
                (C117 * C902 + C51110 * C912) * C632) *
                   C51126 * C110 +
               ((C117 * C889 + C51110 * C903) * C636 -
                (C518 * C630 + C517 * C635) +
                (C117 * C904 + C51110 * C913) * C631 -
                (C117 * C890 + C51110 * C905) * C637 -
                (C117 * C906 + C51110 * C914) * C632) *
                   C51126 * C111) *
                  C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C118 +
            (C117 * C127 + C51110 * C140) * C51026) *
               C51126 * C108 +
           (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
              C50992 * C1240 -
          (C531 * C111 + C532 * C110 + (C522 + C521) * C51126 * C109 +
           ((C117 * C486 + C51110 * C494) * C51026 +
            (C117 * C476 + C51110 * C487) * C118) *
               C51126 * C108) *
              C50992 * C1241 +
          (((C117 * C1016 + C51110 * C1021) * C118 +
            (C117 * C1022 + C51110 * C1031) * C51026) *
               C51126 * C108 +
           (C1055 + C1056) * C51126 * C109 + (C1057 + C1058) * C51126 * C110 +
           (C1059 + C1060) * C51126 * C111) *
              C50992 * C1242 -
          (((C117 * C1248 + C51110 * C1256) * C51026 +
            (C117 * C1244 + C51110 * C1249) * C118) *
               C51126 * C111 +
           ((C117 * C1250 + C51110 * C1257) * C51026 +
            (C117 * C1245 + C51110 * C1251) * C118) *
               C51126 * C110 +
           ((C117 * C1252 + C51110 * C1258) * C51026 +
            (C117 * C1246 + C51110 * C1253) * C118) *
               C51126 * C109 +
           ((C117 * C1254 + C51110 * C1259) * C51026 +
            (C117 * C1247 + C51110 * C1255) * C118) *
               C51126 * C108) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51026) *
                C51126 * C50978) *
               C295 -
           (((C2495 + C2496 + C2497) * C51026 +
             (C2498 + C2499 + C2500) * C118) *
                C51126 * C50978 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C51126 * C2447) *
               C296 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51026) *
                C51126 * C2447 +
            ((C2501 + C2502 + C2503) * C118 +
             (C2504 + C2505 + C2506) * C51026) *
                C51126 * C50978) *
               C297) *
              C51256 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51126 * C50978) *
               C296 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51126 * C50978 +
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51026 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C118) *
                C51126 * C2447) *
               C295 -
           (((C2451 * C906 + C2446 * C914 + C2450 * C904 + C2445 * C913 +
              C2449 * C483 + C2444 * C492) *
                 C51026 +
             (C2451 * C890 + C2446 * C905 + C2450 * C889 + C2445 * C903 +
              C2449 * C474 + C2444 * C482) *
                 C118) *
                C51126 * C50978 +
            ((C2870 + C2869 + C2868) * C51026 +
             (C2867 + C2866 + C2865) * C118) *
                C51126 * C2447) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C635 + (C2492 + C2493 + C2494) * C630 -
            (C2677 + C2678 + C2679) * C636 - (C2680 + C2681 + C2682) * C631 +
            (C3041 + C3042 + C3043) * C637 + (C3044 + C3045 + C3046) * C632) *
               C51126 * C50978) *
              C50992 * C51256 +
          (((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
             C2451 * C3298 + C2446 * C3302) *
                C636 -
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C630 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C635) +
            (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
             C2451 * C3303 + C2446 * C3310) *
                C631 -
            (C2451 * C3299 + C2446 * C3304 + C2450 * C3298 + C2445 * C3302 +
             C2449 * C884 + C2444 * C893) *
                C637 -
            (C2451 * C3305 + C2446 * C3311 + C2450 * C3303 + C2445 * C3310 +
             C2449 * C894 + C2444 * C908) *
                C632) *
               C51126 * C2447 +
           ((C2449 * C885 + C2444 * C895 + C2450 * C886 + C2445 * C897 +
             C2451 * C3300 + C2446 * C3306) *
                C636 -
            ((C2864 + C2863 + C2862) * C630 + (C2861 + C2860 + C2859) * C635) +
            (C2449 * C896 + C2444 * C909 + C2450 * C898 + C2445 * C910 +
             C2451 * C3307 + C2446 * C3312) *
                C631 -
            (C2451 * C3301 + C2446 * C3308 + C2450 * C3300 + C2445 * C3306 +
             C2449 * C886 + C2444 * C897) *
                C637 -
            (C2451 * C3309 + C2446 * C3313 + C2450 * C3307 + C2445 * C3312 +
             C2449 * C898 + C2444 * C910) *
                C632) *
               C51126 * C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51026) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C118 + (C2492 + C2493 + C2494) * C51026) *
               C51126 * C50978) *
              C50992 * C1240 -
          (((C2864 + C2863 + C2862) * C51026 + (C2861 + C2860 + C2859) * C118) *
               C51126 * C50978 +
           ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
             C2449 * C486 + C2444 * C494) *
                C51026 +
            (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
             C2449 * C476 + C2444 * C487) *
                C118) *
               C51126 * C2447) *
              C50992 * C1241 +
          (((C2449 * C1016 + C2444 * C1021 + C2450 * C1158 + C2445 * C1162 +
             C2451 * C3460 + C2446 * C3463) *
                C118 +
            (C2449 * C1022 + C2444 * C1031 + C2450 * C1163 + C2445 * C1170 +
             C2451 * C3464 + C2446 * C3469) *
                C51026) *
               C51126 * C2447 +
           ((C3485 + C3486 + C3487) * C118 + (C3488 + C3489 + C3490) * C51026) *
               C51126 * C50978) *
              C50992 * C1242 -
          (((C2451 * C3746 + C2446 * C3754 + C2450 * C3747 + C2445 * C3755 +
             C2449 * C1252 + C2444 * C1258) *
                C51026 +
            (C2451 * C3742 + C2446 * C3748 + C2450 * C3743 + C2445 * C3749 +
             C2449 * C1246 + C2444 * C1253) *
                C118) *
               C51126 * C50978 +
           ((C2451 * C3750 + C2446 * C3756 + C2450 * C3751 + C2445 * C3757 +
             C2449 * C1254 + C2444 * C1259) *
                C51026 +
            (C2451 * C3744 + C2446 * C3752 + C2450 * C3745 + C2445 * C3753 +
             C2449 * C1247 + C2444 * C1255) *
                C118) *
               C51126 * C2447) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C5336 +
             (C5683 + C5684) * C5337 + (C5685 + C5686) * C5338) *
                C2447 +
            ((C178 + C179) * C5336 + C5660 * C5337 + C5661 * C5338) * C50978) *
               C295 -
           ((C5662 * C5338 + C530 * C5337 + (C181 + C180) * C5336) * C50978 +
            (C5663 * C5338 + C5664 * C5337 + (C179 + C178) * C5336) * C2447) *
               C296 +
           ((C188 * C5336 + C5665 * C5337 + C5666 * C5338) * C2447 +
            (C189 * C5336 + (C525 + C526) * C5337 + (C1059 + C1060) * C5338) *
                C50978) *
               C297) *
              C51256 +
          (((C5660 * C5336 + C5661 * C5337 + (C5687 + C5688) * C5338) * C2447 +
            (C5665 * C5336 + C5666 * C5337 + (C5689 + C5690) * C5338) *
                C50978) *
               C296 -
           (((C5688 + C5687) * C5338 + C5663 * C5337 + C5664 * C5336) * C50978 +
            (((C117 * C1254 + C51110 * C1259) * C51026 +
              (C117 * C1247 + C51110 * C1255) * C118) *
                 C5338 +
             (C5686 + C5685) * C5337 + (C5684 + C5683) * C5336) *
                C2447) *
               C295 -
           ((((C117 * C1248 + C51110 * C1256) * C51026 +
              (C117 * C1244 + C51110 * C1249) * C118) *
                 C5338 +
             (C1060 + C1059) * C5337 + C529 * C5336) *
                C50978 +
            ((C5690 + C5689) * C5338 + C5662 * C5337 + C530 * C5336) * C2447) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C5336 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C5337 +
            (C6115 + C6116 - C6137 - C6138 + C6139 + C6140) * C5338) *
               C2447 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C5336 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C5337 +
            (C5845 + C5846 - C5847 - C5848 + C5859 + C5860) * C5338) *
               C50978) *
              C50992 * C51256 +
          (((C6133 - (C6106 + C6105) + C6134 - C6135 - C6136) * C5336 +
            (C6137 - (C6116 + C6115) + C6138 - C6139 - C6140) * C5337 +
            ((C117 * C3745 + C51110 * C3753) * C636 -
             ((C117 * C1254 + C51110 * C1259) * C630 +
              (C117 * C1247 + C51110 * C1255) * C635) +
             (C117 * C3751 + C51110 * C3757) * C631 -
             (C117 * C3744 + C51110 * C3752) * C637 -
             (C117 * C3750 + C51110 * C3756) * C632) *
                C5338) *
               C2447 +
           ((C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C5336 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C5337 +
            ((C117 * C3743 + C51110 * C3749) * C636 -
             (C5680 * C630 + C5679 * C635) +
             (C117 * C3747 + C51110 * C3755) * C631 -
             (C117 * C3742 + C51110 * C3748) * C637 -
             (C117 * C3746 + C51110 * C3754) * C632) *
                C5338) *
               C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C5336 +
            (C5683 + C5684) * C5337 + C6299 * C5338) *
               C2447 +
           ((C178 + C179) * C5336 + C5660 * C5337 + C5661 * C5338) * C50978) *
              C50992 * C1240 -
          ((C6301 * C5338 + C5663 * C5337 + C5664 * C5336) * C50978 +
           (C6612 * C5338 + (C5686 + C5685) * C5337 + (C5684 + C5683) * C5336) *
               C2447) *
              C50992 * C1241 +
          ((C6299 * C5336 + (C6315 + C6314) * C5337 + (C6619 + C6620) * C5338) *
               C2447 +
           (C5661 * C5336 + C6300 * C5337 + (C6316 + C6317) * C5338) * C50978) *
              C50992 * C1242 -
          ((((C117 * C6605 + C51110 * C6609) * C51026 +
             (C117 * C6603 + C51110 * C6606) * C118) *
                C5338 +
            (C6317 + C6316) * C5337 + C6301 * C5336) *
               C50978 +
           (((C117 * C6607 + C51110 * C6610) * C51026 +
             (C117 * C6604 + C51110 * C6608) * C118) *
                C5338 +
            (C6620 + C6619) * C5337 + C6612 * C5336) *
               C2447) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51026) *
                C51126 * C50978) *
               C51300 -
           (((C2495 + C2496 + C2497) * C51026 +
             (C2498 + C2499 + C2500) * C118) *
                C51126 * C50978 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C51126 * C2447) *
               C51285 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51026) *
                C51126 * C2447 +
            ((C2501 + C2502 + C2503) * C118 +
             (C2504 + C2505 + C2506) * C51026) *
                C51126 * C50978) *
               C1362) *
              C1775 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51126 * C50978) *
               C51285 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51126 * C50978 +
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51026 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C118) *
                C51126 * C2447) *
               C51300 -
           (((C2451 * C906 + C2446 * C914 + C2450 * C904 + C2445 * C913 +
              C2449 * C483 + C2444 * C492) *
                 C51026 +
             (C2451 * C890 + C2446 * C905 + C2450 * C889 + C2445 * C903 +
              C2449 * C474 + C2444 * C482) *
                 C118) *
                C51126 * C50978 +
            ((C2870 + C2869 + C2868) * C51026 +
             (C2867 + C2866 + C2865) * C118) *
                C51126 * C2447) *
               C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51126 * C108 +
            (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
               C51300 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
            (C179 + C178) * C51126 * C108) *
               C51285 +
           (C192 * C108 + C193 * C109 + (C185 + C184) * C51126 * C110 +
            (C186 + C187) * C51126 * C111) *
               C1362) *
              C1775 +
          (((C521 + C522) * C51126 * C108 + (C523 + C524) * C51126 * C109 +
            (C525 + C526) * C51126 * C110 + (C527 + C528) * C51126 * C111) *
               C51285 -
           (C531 * C111 + C532 * C110 + (C522 + C521) * C51126 * C109 +
            ((C117 * C486 + C51110 * C494) * C51026 +
             (C117 * C476 + C51110 * C487) * C118) *
                C51126 * C108) *
               C51300 -
           (((C117 * C488 + C51110 * C495) * C51026 +
             (C117 * C477 + C51110 * C489) * C118) *
                C51126 * C111 +
            (C528 + C527) * C51126 * C110 + C531 * C109 + C532 * C108) *
               C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C5336 +
             (C5683 + C5684) * C5337 + C6299 * C5338) *
                C2447 +
            ((C178 + C179) * C5336 + C5660 * C5337 + C5661 * C5338) * C50978) *
               C51300 -
           ((C5662 * C5338 + C530 * C5337 + (C181 + C180) * C5336) * C50978 +
            (C5663 * C5338 + C5664 * C5337 + (C179 + C178) * C5336) * C2447) *
               C51285 +
           ((C188 * C5336 + C5665 * C5337 + C5666 * C5338) * C2447 +
            (C189 * C5336 + (C525 + C526) * C5337 + (C1059 + C1060) * C5338) *
                C50978) *
               C1362) *
              C1775 +
          (((C5660 * C5336 + C5661 * C5337 + C6300 * C5338) * C2447 +
            (C5665 * C5336 + C5666 * C5337 + (C5689 + C5690) * C5338) *
                C50978) *
               C51285 -
           ((C6301 * C5338 + C5663 * C5337 + C5664 * C5336) * C50978 +
            (C6612 * C5338 + (C5686 + C5685) * C5337 +
             (C5684 + C5683) * C5336) *
                C2447) *
               C51300 -
           ((((C117 * C1248 + C51110 * C1256) * C51026 +
              (C117 * C1244 + C51110 * C1249) * C118) *
                 C5338 +
             (C1060 + C1059) * C5337 + C529 * C5336) *
                C50978 +
            ((C5690 + C5689) * C5338 + C5662 * C5337 + C530 * C5336) * C2447) *
               C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C298 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51254 -
             (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
              C2449 * C300 + C2444 * C306) *
                 C299 -
             (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
              C2449 * C307 + C2444 * C318) *
                 C51042) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C51254 -
             (C2677 + C2678 + C2679) * C299 -
             (C2680 + C2681 + C2682) * C51042) *
                C51126 * C50978) *
               C1490 +
           (((C2679 + C2678 + C2677) * C299 -
             ((C2494 + C2493 + C2492) * C51254 +
              (C2491 + C2490 + C2489) * C298) +
             (C2682 + C2681 + C2680) * C51042) *
                C51126 * C2447 +
            ((C2683 + C2684 + C2685) * C299 -
             ((C2495 + C2496 + C2497) * C51254 +
              (C2498 + C2499 + C2500) * C298) +
             (C2686 + C2687 + C2688) * C51042) *
                C51126 * C50978) *
               C50997) *
              C1775 +
          ((((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
              C2451 * C3298 + C2446 * C3302) *
                 C299 -
             ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
               C2449 * C486 + C2444 * C494) *
                  C51254 +
              (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
               C2449 * C476 + C2444 * C487) *
                  C298) +
             (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
              C2451 * C3303 + C2446 * C3310) *
                 C51042) *
                C51126 * C2447 +
            ((C4261 + C4262 + C4263) * C299 -
             ((C2864 + C2863 + C2862) * C51254 +
              (C2861 + C2860 + C2859) * C298) +
             (C4264 + C4265 + C4266) * C51042) *
                C51126 * C50978) *
               C1490 +
           (((C2859 + C2860 + C2861) * C298 + (C2862 + C2863 + C2864) * C51254 -
             (C4263 + C4262 + C4261) * C299 -
             (C4266 + C4265 + C4264) * C51042) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C298 + (C2868 + C2869 + C2870) * C51254 -
             (C2451 * C4244 + C2446 * C4245 + C2450 * C888 + C2445 * C901 +
              C2449 * C887 + C2444 * C899) *
                 C299 -
             (C2451 * C4246 + C2446 * C4247 + C2450 * C902 + C2445 * C912 +
              C2449 * C900 + C2444 * C911) *
                 C51042) *
                C51126 * C50978) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51126 * C108 +
            (C325 + C326 - C359 - C360) * C51126 * C109 + C371 * C110 +
            C372 * C111) *
               C1490 +
           ((C359 - (C326 + C325) + C360) * C51126 * C108 +
            (C361 - (C332 + C331) + C362) * C51126 * C109 +
            (C363 - (C338 + C337) + C364) * C51126 * C110 +
            (C365 - (C345 + C346) + C366) * C51126 * C111) *
               C50997) *
              C1775 +
          ((((C117 * C883 + C51110 * C891) * C299 -
             ((C117 * C486 + C51110 * C494) * C51254 +
              (C117 * C476 + C51110 * C487) * C298) +
             (C117 * C892 + C51110 * C907) * C51042) *
                C51126 * C108 +
            (C1908 - (C1909 + C1910) + C1911) * C51126 * C109 +
            (C1912 - (C1913 + C1914) + C1915) * C51126 * C110 +
            (C1916 - (C1917 + C1918) + C1919) * C51126 * C111) *
               C1490 +
           ((C1910 + C1909 - C1908 - C1911) * C51126 * C108 +
            (C1914 + C1913 - C1912 - C1915) * C51126 * C109 +
            (C1918 + C1917 - C1916 - C1919) * C51126 * C110 +
            (C519 * C298 + C520 * C51254 -
             (C117 * C1643 + C51110 * C1644) * C299 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51126 * C111) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C298 +
              (C117 * C127 + C51110 * C140) * C51254 -
              (C117 * C300 + C51110 * C306) * C299 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C5336 +
             (C6472 + C6473 - C6474 - C6475) * C5337 + C6505 * C5338) *
                C2447 +
            ((C325 + C326 - C359 - C360) * C5336 + C7501 * C5337 +
             C6500 * C5338) *
                C50978) *
               C1490 +
           (((C359 - (C326 + C325) + C360) * C5336 + C7502 * C5337 +
             C7503 * C5338) *
                C2447 +
            ((C361 - (C332 + C331) + C362) * C5336 +
             (C1912 - (C1913 + C1914) + C1915) * C5337 +
             (C5504 - (C5494 + C5495) + C5505) * C5338) *
                C50978) *
               C50997) *
              C1775 +
          ((((C6474 - (C6473 + C6472) + C6475) * C5336 +
             (C6478 - (C6477 + C6476) + C6479) * C5337 +
             (C6501 - (C6483 + C6484) + C6502) * C5338) *
                C2447 +
            (C7502 * C5336 + C7503 * C5337 +
             (C6503 - (C6489 + C6490) + C6504) * C5338) *
                C50978) *
               C1490 +
           ((C7501 * C5336 + C6500 * C5337 +
             (C6490 + C6489 - C6503 - C6504) * C5338) *
                C2447 +
            ((C1914 + C1913 - C1912 - C1915) * C5336 +
             (C5495 + C5494 - C5504 - C5505) * C5337 +
             (C5681 * C298 + C5682 * C51254 -
              (C117 * C7126 + C51110 * C7127) * C299 -
              (C117 * C7128 + C51110 * C7129) * C51042) *
                 C5338) *
                C50978) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51026) *
                C51126 * C50978) *
               C1490 -
           (((C2495 + C2496 + C2497) * C51026 +
             (C2498 + C2499 + C2500) * C118) *
                C51126 * C50978 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C51126 * C2447) *
               C50997) *
              C51302 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51126 * C50978) *
               C50997 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51126 * C50978 +
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51026 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C118) *
                C51126 * C2447) *
               C1490) *
              C51291 +
          ((((C2449 * C1016 + C2444 * C1021 + C2450 * C1158 + C2445 * C1162 +
              C2451 * C3460 + C2446 * C3463) *
                 C118 +
             (C2449 * C1022 + C2444 * C1031 + C2450 * C1163 + C2445 * C1170 +
              C2451 * C3464 + C2446 * C3469) *
                 C51026) *
                C51126 * C2447 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51126 * C50978) *
               C1490 -
           (((C2451 * C3467 + C2446 * C3471 + C2450 * C1167 + C2445 * C1172 +
              C2449 * C1026 + C2444 * C1033) *
                 C51026 +
             (C2451 * C3462 + C2446 * C3468 + C2450 * C1160 + C2445 * C1166 +
              C2449 * C1018 + C2444 * C1025) *
                 C118) *
                C51126 * C50978 +
            ((C3490 + C3489 + C3488) * C51026 +
             (C3487 + C3486 + C3485) * C118) *
                C51126 * C2447) *
               C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51126 * C108 +
            (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
               C1490 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
            (C179 + C178) * C51126 * C108) *
               C50997) *
              C51302 +
          (((C521 + C522) * C51126 * C108 + (C523 + C524) * C51126 * C109 +
            (C525 + C526) * C51126 * C110 + (C527 + C528) * C51126 * C111) *
               C50997 -
           (C531 * C111 + C532 * C110 + (C522 + C521) * C51126 * C109 +
            ((C117 * C486 + C51110 * C494) * C51026 +
             (C117 * C476 + C51110 * C487) * C118) *
                C51126 * C108) *
               C1490) *
              C51291 +
          ((((C117 * C1016 + C51110 * C1021) * C118 +
             (C117 * C1022 + C51110 * C1031) * C51026) *
                C51126 * C108 +
            (C1055 + C1056) * C51126 * C109 + (C1057 + C1058) * C51126 * C110 +
            (C1059 + C1060) * C51126 * C111) *
               C1490 -
           (((C117 * C1029 + C51110 * C1035) * C51026 +
             (C117 * C1020 + C51110 * C1030) * C118) *
                C51126 * C111 +
            (C1060 + C1059) * C51126 * C110 + (C1058 + C1057) * C51126 * C109 +
            (C1056 + C1055) * C51126 * C108) *
               C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C5336 +
             (C5683 + C5684) * C5337 + C6299 * C5338) *
                C2447 +
            ((C178 + C179) * C5336 + C5660 * C5337 + C5661 * C5338) * C50978) *
               C1490 -
           ((C5662 * C5338 + C530 * C5337 + (C181 + C180) * C5336) * C50978 +
            (C5663 * C5338 + C5664 * C5337 + (C179 + C178) * C5336) * C2447) *
               C50997) *
              C51302 +
          (((C5660 * C5336 + C5661 * C5337 + C6300 * C5338) * C2447 +
            (C5665 * C5336 + C5666 * C5337 + (C5689 + C5690) * C5338) *
                C50978) *
               C50997 -
           ((C6301 * C5338 + C5663 * C5337 + C5664 * C5336) * C50978 +
            (C6612 * C5338 + (C5686 + C5685) * C5337 +
             (C5684 + C5683) * C5336) *
                C2447) *
               C1490) *
              C51291 +
          (((C6299 * C5336 + (C6315 + C6314) * C5337 +
             (C6619 + C6620) * C5338) *
                C2447 +
            (C5661 * C5336 + C6300 * C5337 + (C6316 + C6317) * C5338) *
                C50978) *
               C1490 -
           ((((C117 * C6293 + C51110 * C6297) * C51026 +
              (C117 * C6288 + C51110 * C6294) * C118) *
                 C5338 +
             (C5690 + C5689) * C5337 + C5662 * C5336) *
                C50978 +
            ((C6317 + C6316) * C5338 + C6301 * C5337 + C5663 * C5336) * C2447) *
               C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C635 +
            (C117 * C127 + C51110 * C140) * C630 -
            (C117 * C300 + C51110 * C306) * C636 -
            (C117 * C307 + C51110 * C318) * C631 +
            (C117 * C638 + C51110 * C643) * C637 +
            (C117 * C644 + C51110 * C653) * C632) *
               C51126 * C108 +
           (C659 + C660 - C661 - C662 + C689 + C690) * C51126 * C109 +
           (C667 + C668 - C669 - C670 + C691 + C692) * C51126 * C110 +
           (C675 + C676 - C677 - C678 + C693 + C694) * C51126 * C111) *
              C51247 +
          ((C661 - (C660 + C659) + C662 - C689 - C690) * C51126 * C108 +
           (C669 - (C668 + C667) + C670 - C691 - C692) * C51126 * C109 +
           (C677 - (C676 + C675) + C678 - C693 - C694) * C51126 * C110 +
           (C357 * C636 - (C174 * C630 + C175 * C635) + C358 * C631 -
            (C117 * C642 + C51110 * C651) * C637 -
            (C117 * C652 + C51110 * C657) * C632) *
               C51126 * C111) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C118 +
            (C117 * C127 + C51110 * C140) * C51026) *
               C51126 * C108 +
           (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
              C112 -
          (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
           (C179 + C178) * C51126 * C108) *
              C113 +
          (C192 * C108 + C193 * C109 + (C185 + C184) * C51126 * C110 +
           (C186 + C187) * C51126 * C111) *
              C114 -
          (((C117 * C138 + C51110 * C146) * C51026 +
            (C117 * C125 + C51110 * C139) * C118) *
               C51126 * C111 +
           (C187 + C186) * C51126 * C110 + C194 * C109 + C195 * C108) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51026) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C118 + (C2492 + C2493 + C2494) * C51026) *
               C51126 * C50978) *
              C112 -
          (((C2495 + C2496 + C2497) * C51026 + (C2498 + C2499 + C2500) * C118) *
               C51126 * C50978 +
           ((C2494 + C2493 + C2492) * C51026 + (C2491 + C2490 + C2489) * C118) *
               C51126 * C2447) *
              C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51026) *
               C51126 * C2447 +
           ((C2501 + C2502 + C2503) * C118 + (C2504 + C2505 + C2506) * C51026) *
               C51126 * C50978) *
              C114 -
          (((C2451 * C652 + C2446 * C657 + C2450 * C315 + C2445 * C322 +
             C2449 * C134 + C2444 * C144) *
                C51026 +
            (C2451 * C642 + C2446 * C651 + C2450 * C304 + C2445 * C314 +
             C2449 * C123 + C2444 * C135) *
                C118) *
               C51126 * C50978 +
           ((C2506 + C2505 + C2504) * C51026 + (C2503 + C2502 + C2501) * C118) *
               C51126 * C2447) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C635 + (C2492 + C2493 + C2494) * C630 -
            (C2677 + C2678 + C2679) * C636 - (C2680 + C2681 + C2682) * C631 +
            (C3041 + C3042 + C3043) * C637 + (C3044 + C3045 + C3046) * C632) *
               C51126 * C50978) *
              C51247 +
          (((C2679 + C2678 + C2677) * C636 -
            ((C2494 + C2493 + C2492) * C630 + (C2491 + C2490 + C2489) * C635) +
            (C2682 + C2681 + C2680) * C631 - (C3043 + C3042 + C3041) * C637 -
            (C3046 + C3045 + C3044) * C632) *
               C51126 * C2447 +
           ((C2683 + C2684 + C2685) * C636 -
            ((C2495 + C2496 + C2497) * C630 + (C2498 + C2499 + C2500) * C635) +
            (C2686 + C2687 + C2688) * C631 -
            (C2451 * C3018 + C2446 * C3023 + C2450 * C771 + C2445 * C777 +
             C2449 * C640 + C2444 * C647) *
                C637 -
            (C2451 * C3024 + C2446 * C3027 + C2450 * C778 + C2445 * C783 +
             C2449 * C648 + C2444 * C655) *
                C632) *
               C51126 * C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C5336 +
            ((C117 * C476 + C51110 * C487) * C118 +
             (C117 * C486 + C51110 * C494) * C51026) *
                C5337 +
            ((C117 * C1016 + C51110 * C1021) * C118 +
             (C117 * C1022 + C51110 * C1031) * C51026) *
                C5338) *
               C2447 +
           ((C178 + C179) * C5336 + (C521 + C522) * C5337 +
            (C1055 + C1056) * C5338) *
               C50978) *
              C112 -
          (((C1058 + C1057) * C5338 + C530 * C5337 + (C181 + C180) * C5336) *
               C50978 +
           ((C1056 + C1055) * C5338 + (C522 + C521) * C5337 +
            (C179 + C178) * C5336) *
               C2447) *
              C113 +
          ((C188 * C5336 + (C523 + C524) * C5337 + (C1057 + C1058) * C5338) *
               C2447 +
           (C189 * C5336 + (C525 + C526) * C5337 + (C1059 + C1060) * C5338) *
               C50978) *
              C114 -
          ((((C117 * C1029 + C51110 * C1035) * C51026 +
             (C117 * C1020 + C51110 * C1030) * C118) *
                C5338 +
            (C528 + C527) * C5337 + C190 * C5336) *
               C50978 +
           ((C1060 + C1059) * C5338 + C529 * C5337 + C191 * C5336) * C2447) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C5336 +
            (C5675 * C635 + C5676 * C630 -
             (C117 * C883 + C51110 * C891) * C636 -
             (C117 * C892 + C51110 * C907) * C631 +
             (C117 * C884 + C51110 * C893) * C637 +
             (C117 * C894 + C51110 * C908) * C632) *
                C5337 +
            (C5677 * C635 + C5678 * C630 -
             (C117 * C1158 + C51110 * C1162) * C636 -
             (C117 * C1163 + C51110 * C1170) * C631 +
             (C117 * C3460 + C51110 * C3463) * C637 +
             (C117 * C3464 + C51110 * C3469) * C632) *
                C5338) *
               C2447 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C5336 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C5337 +
            (C5845 + C5846 - C5847 - C5848 + C5859 + C5860) * C5338) *
               C50978) *
              C51247 +
          (((C661 - (C660 + C659) + C662 - C689 - C690) * C5336 +
            (C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C5337 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C5338) *
               C2447 +
           ((C669 - (C668 + C667) + C670 - C691 - C692) * C5336 +
            (C1668 * C636 - (C516 * C630 + C515 * C635) + C1669 * C631 -
             (C117 * C888 + C51110 * C901) * C637 -
             (C117 * C902 + C51110 * C912) * C632) *
                C5337 +
            (C5500 * C636 - (C1052 * C630 + C1051 * C635) + C5501 * C631 -
             (C117 * C3462 + C51110 * C3468) * C637 -
             (C117 * C3467 + C51110 * C3471) * C632) *
                C5338) *
               C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C51110 * C126) * C765 +
           (C117 * C127 + C51110 * C140) * C760 -
           (C117 * C300 + C51110 * C306) * C766 -
           (C117 * C307 + C51110 * C318) * C761 +
           (C117 * C638 + C51110 * C643) * C767 +
           (C117 * C644 + C51110 * C653) * C762 -
           (C117 * C769 + C51110 * C773) * C768 -
           (C117 * C774 + C51110 * C781) * C763) *
              C51126 * C108 +
          (C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 + C683 * C767 +
           C684 * C762 - (C117 * C770 + C51110 * C775) * C768 -
           (C117 * C776 + C51110 * C782) * C763) *
              C51126 * C109 +
          (C170 * C765 + C171 * C760 - C352 * C766 - C353 * C761 + C685 * C767 +
           C686 * C762 - (C117 * C771 + C51110 * C777) * C768 -
           (C117 * C778 + C51110 * C783) * C763) *
              C51126 * C110 +
          (C172 * C765 + C173 * C760 - C355 * C766 - C356 * C761 + C687 * C767 +
           C688 * C762 - (C117 * C772 + C51110 * C779) * C768 -
           (C117 * C780 + C51110 * C784) * C763) *
              C51126 * C111) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C298 +
            (C117 * C127 + C51110 * C140) * C51254 -
            (C117 * C300 + C51110 * C306) * C299 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C51126 * C108 +
           (C325 + C326 - C359 - C360) * C51126 * C109 + C371 * C110 +
           C372 * C111) *
              C295 +
          ((C359 - (C326 + C325) + C360) * C51126 * C108 +
           (C361 - (C332 + C331) + C362) * C51126 * C109 +
           (C363 - (C338 + C337) + C364) * C51126 * C110 +
           (C365 - (C345 + C346) + C366) * C51126 * C111) *
              C296 +
          (C371 * C108 + C372 * C109 +
           (C346 + C345 - C365 - C366) * C51126 * C110 +
           (C176 * C298 + C177 * C51254 - (C117 * C305 + C51110 * C316) * C299 -
            (C117 * C317 + C51110 * C323) * C51042) *
               C51126 * C111) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51254 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C299 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C51254 -
            (C2677 + C2678 + C2679) * C299 - (C2680 + C2681 + C2682) * C51042) *
               C51126 * C50978) *
              C295 +
          (((C2679 + C2678 + C2677) * C299 -
            ((C2494 + C2493 + C2492) * C51254 +
             (C2491 + C2490 + C2489) * C298) +
            (C2682 + C2681 + C2680) * C51042) *
               C51126 * C2447 +
           ((C2683 + C2684 + C2685) * C299 -
            ((C2495 + C2496 + C2497) * C51254 +
             (C2498 + C2499 + C2500) * C298) +
            (C2686 + C2687 + C2688) * C51042) *
               C51126 * C50978) *
              C296 +
          (((C2500 + C2499 + C2498) * C298 + (C2497 + C2496 + C2495) * C51254 -
            (C2685 + C2684 + C2683) * C299 - (C2688 + C2687 + C2686) * C51042) *
               C51126 * C2447 +
           ((C2501 + C2502 + C2503) * C298 + (C2504 + C2505 + C2506) * C51254 -
            (C2451 * C772 + C2446 * C779 + C2450 * C641 + C2445 * C649 +
             C2449 * C303 + C2444 * C312) *
                C299 -
            (C2451 * C780 + C2446 * C784 + C2450 * C650 + C2445 * C656 +
             C2449 * C313 + C2444 * C321) *
                C51042) *
               C51126 * C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
            C2451 * C638 + C2446 * C643) *
               C765 +
           (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
            C2451 * C644 + C2446 * C653) *
               C760 -
           (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
            C2449 * C300 + C2444 * C306) *
               C766 -
           (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
            C2449 * C307 + C2444 * C318) *
               C761 +
           (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
            C2451 * C3016 + C2446 * C3019) *
               C767 +
           (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
            C2451 * C3020 + C2446 * C3025) *
               C762 -
           (C2451 * C3144 + C2446 * C3146 + C2450 * C3016 + C2445 * C3019 +
            C2449 * C769 + C2444 * C773) *
               C768 -
           (C2451 * C3147 + C2446 * C3150 + C2450 * C3020 + C2445 * C3025 +
            C2449 * C774 + C2444 * C781) *
               C763) *
              C51126 * C2447 +
          ((C2489 + C2490 + C2491) * C765 + (C2492 + C2493 + C2494) * C760 -
           (C2677 + C2678 + C2679) * C766 - (C2680 + C2681 + C2682) * C761 +
           (C3041 + C3042 + C3043) * C767 + (C3044 + C3045 + C3046) * C762 -
           (C2451 * C3145 + C2446 * C3148 + C2450 * C3017 + C2445 * C3021 +
            C2449 * C770 + C2444 * C775) *
               C768 -
           (C2451 * C3149 + C2446 * C3151 + C2450 * C3022 + C2445 * C3026 +
            C2449 * C776 + C2444 * C782) *
               C763) *
              C51126 * C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C5336 +
            ((C117 * C476 + C51110 * C487) * C298 +
             (C117 * C486 + C51110 * C494) * C51254 -
             (C117 * C883 + C51110 * C891) * C299 -
             (C117 * C892 + C51110 * C907) * C51042) *
                C5337 +
            ((C117 * C1016 + C51110 * C1021) * C298 +
             (C117 * C1022 + C51110 * C1031) * C51254 -
             (C117 * C1158 + C51110 * C1162) * C299 -
             (C117 * C1163 + C51110 * C1170) * C51042) *
                C5338) *
               C2447 +
           ((C325 + C326 - C359 - C360) * C5336 +
            (C1910 + C1909 - C1908 - C1911) * C5337 +
            (C5486 + C5487 - C5502 - C5503) * C5338) *
               C50978) *
              C295 +
          (((C359 - (C326 + C325) + C360) * C5336 +
            (C1908 - (C1909 + C1910) + C1911) * C5337 +
            (C5502 - (C5487 + C5486) + C5503) * C5338) *
               C2447 +
           ((C361 - (C332 + C331) + C362) * C5336 +
            (C1912 - (C1913 + C1914) + C1915) * C5337 +
            (C5504 - (C5494 + C5495) + C5505) * C5338) *
               C50978) *
              C296 +
          ((C369 * C5336 + (C1914 + C1913 - C1912 - C1915) * C5337 +
            (C5495 + C5494 - C5504 - C5505) * C5338) *
               C2447 +
           (C370 * C5336 + (C1918 + C1917 - C1916 - C1919) * C5337 +
            (C1053 * C298 + C1054 * C51254 -
             (C117 * C1161 + C51110 * C1168) * C299 -
             (C117 * C1169 + C51110 * C1173) * C51042) *
                C5338) *
               C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C765 +
            (C117 * C127 + C51110 * C140) * C760 -
            (C117 * C300 + C51110 * C306) * C766 -
            (C117 * C307 + C51110 * C318) * C761 +
            (C117 * C638 + C51110 * C643) * C767 +
            (C117 * C644 + C51110 * C653) * C762 -
            (C117 * C769 + C51110 * C773) * C768 -
            (C117 * C774 + C51110 * C781) * C763) *
               C5336 +
           (C5675 * C765 + C5676 * C760 - (C117 * C883 + C51110 * C891) * C766 -
            (C117 * C892 + C51110 * C907) * C761 +
            (C117 * C884 + C51110 * C893) * C767 +
            (C117 * C894 + C51110 * C908) * C762 -
            (C117 * C3298 + C51110 * C3302) * C768 -
            (C117 * C3303 + C51110 * C3310) * C763) *
               C5337 +
           (C5677 * C765 + C5678 * C760 -
            (C117 * C1158 + C51110 * C1162) * C766 -
            (C117 * C1163 + C51110 * C1170) * C761 +
            (C117 * C3460 + C51110 * C3463) * C767 +
            (C117 * C3464 + C51110 * C3469) * C762 -
            (C117 * C3636 + C51110 * C3638) * C768 -
            (C117 * C3639 + C51110 * C3642) * C763) *
               C5338) *
              C2447 +
          ((C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 +
            C683 * C767 + C684 * C762 - (C117 * C770 + C51110 * C775) * C768 -
            (C117 * C776 + C51110 * C782) * C763) *
               C5336 +
           (C513 * C765 + C514 * C760 - C1666 * C766 - C1667 * C761 +
            C5853 * C767 + C5854 * C762 -
            (C117 * C3300 + C51110 * C3306) * C768 -
            (C117 * C3307 + C51110 * C3312) * C763) *
               C5337 +
           (C1049 * C765 + C1050 * C760 - C5498 * C766 - C5499 * C761 +
            C5855 * C767 + C5856 * C762 -
            (C117 * C3637 + C51110 * C3640) * C768 -
            (C117 * C3641 + C51110 * C3643) * C763) *
               C5338) *
              C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C635 +
            (C117 * C127 + C51110 * C140) * C630 -
            (C117 * C300 + C51110 * C306) * C636 -
            (C117 * C307 + C51110 * C318) * C631 +
            (C117 * C638 + C51110 * C643) * C637 +
            (C117 * C644 + C51110 * C653) * C632) *
               C51126 * C108 +
           (C659 + C660 - C661 - C662 + C689 + C690) * C51126 * C109 +
           (C667 + C668 - C669 - C670 + C691 + C692) * C51126 * C110 +
           (C675 + C676 - C677 - C678 + C693 + C694) * C51126 * C111) *
              C50992 * C51256 +
          (((C117 * C883 + C51110 * C891) * C636 -
            ((C117 * C486 + C51110 * C494) * C630 +
             (C117 * C476 + C51110 * C487) * C635) +
            (C117 * C892 + C51110 * C907) * C631 -
            (C117 * C884 + C51110 * C893) * C637 -
            (C117 * C894 + C51110 * C908) * C632) *
               C51126 * C108 +
           ((C117 * C885 + C51110 * C895) * C636 - (C514 * C630 + C513 * C635) +
            (C117 * C896 + C51110 * C909) * C631 -
            (C117 * C886 + C51110 * C897) * C637 -
            (C117 * C898 + C51110 * C910) * C632) *
               C51126 * C109 +
           ((C117 * C887 + C51110 * C899) * C636 - (C516 * C630 + C515 * C635) +
            (C117 * C900 + C51110 * C911) * C631 -
            (C117 * C888 + C51110 * C901) * C637 -
            (C117 * C902 + C51110 * C912) * C632) *
               C51126 * C110 +
           ((C117 * C889 + C51110 * C903) * C636 - (C518 * C630 + C517 * C635) +
            (C117 * C904 + C51110 * C913) * C631 -
            (C117 * C890 + C51110 * C905) * C637 -
            (C117 * C906 + C51110 * C914) * C632) *
               C51126 * C111) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51126 * C108 +
            (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
               C295 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
            (C179 + C178) * C51126 * C108) *
               C296 +
           (C192 * C108 + C193 * C109 + (C185 + C184) * C51126 * C110 +
            (C186 + C187) * C51126 * C111) *
               C297) *
              C51256 +
          (((C521 + C522) * C51126 * C108 + (C523 + C524) * C51126 * C109 +
            (C525 + C526) * C51126 * C110 + (C527 + C528) * C51126 * C111) *
               C296 -
           (C531 * C111 + C532 * C110 + (C522 + C521) * C51126 * C109 +
            ((C117 * C486 + C51110 * C494) * C51026 +
             (C117 * C476 + C51110 * C487) * C118) *
                C51126 * C108) *
               C295 -
           (((C117 * C488 + C51110 * C495) * C51026 +
             (C117 * C477 + C51110 * C489) * C118) *
                C51126 * C111 +
            (C528 + C527) * C51126 * C110 + C531 * C109 + C532 * C108) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51026) *
                C51126 * C50978) *
               C295 -
           (((C2495 + C2496 + C2497) * C51026 +
             (C2498 + C2499 + C2500) * C118) *
                C51126 * C50978 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C51126 * C2447) *
               C296 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51026) *
                C51126 * C2447 +
            ((C2501 + C2502 + C2503) * C118 +
             (C2504 + C2505 + C2506) * C51026) *
                C51126 * C50978) *
               C297) *
              C51256 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51126 * C50978) *
               C296 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51126 * C50978 +
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51026 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C118) *
                C51126 * C2447) *
               C295 -
           (((C2451 * C906 + C2446 * C914 + C2450 * C904 + C2445 * C913 +
              C2449 * C483 + C2444 * C492) *
                 C51026 +
             (C2451 * C890 + C2446 * C905 + C2450 * C889 + C2445 * C903 +
              C2449 * C474 + C2444 * C482) *
                 C118) *
                C51126 * C50978 +
            ((C2870 + C2869 + C2868) * C51026 +
             (C2867 + C2866 + C2865) * C118) *
                C51126 * C2447) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C635 + (C2492 + C2493 + C2494) * C630 -
            (C2677 + C2678 + C2679) * C636 - (C2680 + C2681 + C2682) * C631 +
            (C3041 + C3042 + C3043) * C637 + (C3044 + C3045 + C3046) * C632) *
               C51126 * C50978) *
              C50992 * C51256 +
          (((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
             C2451 * C3298 + C2446 * C3302) *
                C636 -
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C630 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C635) +
            (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
             C2451 * C3303 + C2446 * C3310) *
                C631 -
            (C2451 * C3299 + C2446 * C3304 + C2450 * C3298 + C2445 * C3302 +
             C2449 * C884 + C2444 * C893) *
                C637 -
            (C2451 * C3305 + C2446 * C3311 + C2450 * C3303 + C2445 * C3310 +
             C2449 * C894 + C2444 * C908) *
                C632) *
               C51126 * C2447 +
           ((C2449 * C885 + C2444 * C895 + C2450 * C886 + C2445 * C897 +
             C2451 * C3300 + C2446 * C3306) *
                C636 -
            ((C2864 + C2863 + C2862) * C630 + (C2861 + C2860 + C2859) * C635) +
            (C2449 * C896 + C2444 * C909 + C2450 * C898 + C2445 * C910 +
             C2451 * C3307 + C2446 * C3312) *
                C631 -
            (C2451 * C3301 + C2446 * C3308 + C2450 * C3300 + C2445 * C3306 +
             C2449 * C886 + C2444 * C897) *
                C637 -
            (C2451 * C3309 + C2446 * C3313 + C2450 * C3307 + C2445 * C3312 +
             C2449 * C898 + C2444 * C910) *
                C632) *
               C51126 * C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C5336 +
             (C5683 + C5684) * C5337 + (C5685 + C5686) * C5338) *
                C2447 +
            ((C178 + C179) * C5336 + C5660 * C5337 + C5661 * C5338) * C50978) *
               C295 -
           ((C5662 * C5338 + C530 * C5337 + (C181 + C180) * C5336) * C50978 +
            (C5663 * C5338 + C5664 * C5337 + (C179 + C178) * C5336) * C2447) *
               C296 +
           ((C188 * C5336 + C5665 * C5337 + C5666 * C5338) * C2447 +
            (C189 * C5336 + (C525 + C526) * C5337 + (C1059 + C1060) * C5338) *
                C50978) *
               C297) *
              C51256 +
          (((C5660 * C5336 + C5661 * C5337 + (C5687 + C5688) * C5338) * C2447 +
            (C5665 * C5336 + C5666 * C5337 + (C5689 + C5690) * C5338) *
                C50978) *
               C296 -
           (((C5688 + C5687) * C5338 + C5663 * C5337 + C5664 * C5336) * C50978 +
            (((C117 * C1254 + C51110 * C1259) * C51026 +
              (C117 * C1247 + C51110 * C1255) * C118) *
                 C5338 +
             (C5686 + C5685) * C5337 + (C5684 + C5683) * C5336) *
                C2447) *
               C295 -
           ((((C117 * C1248 + C51110 * C1256) * C51026 +
              (C117 * C1244 + C51110 * C1249) * C118) *
                 C5338 +
             (C1060 + C1059) * C5337 + C529 * C5336) *
                C50978 +
            ((C5690 + C5689) * C5338 + C5662 * C5337 + C530 * C5336) * C2447) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C5336 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C5337 +
            (C6115 + C6116 - C6137 - C6138 + C6139 + C6140) * C5338) *
               C2447 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C5336 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C5337 +
            (C5845 + C5846 - C5847 - C5848 + C5859 + C5860) * C5338) *
               C50978) *
              C50992 * C51256 +
          (((C6133 - (C6106 + C6105) + C6134 - C6135 - C6136) * C5336 +
            (C6137 - (C6116 + C6115) + C6138 - C6139 - C6140) * C5337 +
            ((C117 * C3745 + C51110 * C3753) * C636 -
             ((C117 * C1254 + C51110 * C1259) * C630 +
              (C117 * C1247 + C51110 * C1255) * C635) +
             (C117 * C3751 + C51110 * C3757) * C631 -
             (C117 * C3744 + C51110 * C3752) * C637 -
             (C117 * C3750 + C51110 * C3756) * C632) *
                C5338) *
               C2447 +
           ((C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C5336 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C5337 +
            ((C117 * C3743 + C51110 * C3749) * C636 -
             (C5680 * C630 + C5679 * C635) +
             (C117 * C3747 + C51110 * C3755) * C631 -
             (C117 * C3742 + C51110 * C3748) * C637 -
             (C117 * C3746 + C51110 * C3754) * C632) *
                C5338) *
               C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51271 +
            (C7131 + C7132 - C7133 - C7134) * C51190) *
               C51298 +
           ((C1366 + C1367 - C1368 - C1369) * C51271 + C7151 * C51190) *
               C51299 +
           C12369 * C8256) *
              C51300 +
          (((C1368 - (C1367 + C1366) + C1369) * C51271 + C7153 * C51190) *
               C51298 +
           ((C1372 - (C1371 + C1370) + C1373) * C51271 +
            (C1674 - (C1656 + C1657) + C1675) * C51190) *
               C51299 +
           ((C1376 - (C1375 + C1374) + C1377) * C51271 +
            (C1676 - (C1662 + C1663) + C1677) * C51190) *
               C8256) *
              C51285 +
          (C12369 * C51298 +
           (C1387 * C51271 + (C1663 + C1662 - C1676 - C1677) * C51190) *
               C51299 +
           ((C1380 + C1379 - C1378 - C1381) * C51271 +
            (C519 * C1363 + C520 * C1358 -
             (C117 * C1643 + C51110 * C1644) * C1364 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51190) *
               C8256) *
              C1362) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1492 +
             (C117 * C127 + C51110 * C140) * C51301 -
             (C117 * C300 + C51110 * C306) * C1493 -
             (C117 * C307 + C51110 * C318) * C51288 +
             (C117 * C638 + C51110 * C643) * C1494 +
             (C117 * C644 + C51110 * C653) * C1489) *
                C51271 +
            (C7990 + C7991 - C7992 - C7993 + C7994 + C7995) * C51190) *
               C51298 +
           ((C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C51271 +
            (C6921 + C6922 - C6923 - C6924 + C6925 + C6926) * C51190) *
               C51299 +
           ((C1502 + C1503 - C1504 - C1505 + C1506 + C1507) * C51271 +
            (C12516 + C12517 - C12518 - C12519 + C12520 + C12521) * C51190) *
               C8256) *
              C1490 +
          (((C1498 - (C1497 + C1496) + C1499 - C1500 - C1501) * C51271 +
            (C6923 - (C6922 + C6921) + C6924 - C6925 - C6926) * C51190) *
               C51298 +
           ((C1504 - (C1503 + C1502) + C1505 - C1506 - C1507) * C51271 +
            (C12518 - (C12517 + C12516) + C12519 - C12520 - C12521) * C51190) *
               C51299 +
           ((C1510 - (C1509 + C1508) + C1511 - C1512 - C1513) * C51271 +
            (C1670 * C1493 - (C518 * C51301 + C517 * C1492) + C1671 * C51288 -
             (C117 * C890 + C51110 * C905) * C1494 -
             (C117 * C906 + C51110 * C914) * C1489) *
                C51190) *
               C8256) *
              C50997) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C1363 +
              (C117 * C127 + C51110 * C140) * C1358 -
              (C117 * C300 + C51110 * C306) * C1364 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C51271 +
             (C7131 + C7132 - C7133 - C7134) * C51190) *
                C51298 +
            ((C1366 + C1367 - C1368 - C1369) * C51271 + C7151 * C51190) *
                C51299 +
            C12369 * C8256) *
               C1490 +
           (((C1368 - (C1367 + C1366) + C1369) * C51271 + C7153 * C51190) *
                C51298 +
            ((C1372 - (C1371 + C1370) + C1373) * C51271 + C12718 * C51190) *
                C51299 +
            ((C1376 - (C1375 + C1374) + C1377) * C51271 +
             (C1676 - (C1662 + C1663) + C1677) * C51190) *
                C8256) *
               C50997) *
              C51256 +
          ((((C7133 - (C7132 + C7131) + C7134) * C51271 +
             (C7137 - (C7136 + C7135) + C7138) * C51190) *
                C51298 +
            (C7153 * C51271 + C7154 * C51190) * C51299 +
            (C12718 * C51271 + (C6771 - (C6772 + C6773) + C6774) * C51190) *
                C8256) *
               C1490 +
           ((C7151 * C51271 + C7152 * C51190) * C51298 +
            (C12367 * C51271 + (C6773 + C6772 - C6771 - C6774) * C51190) *
                C51299 +
            ((C1663 + C1662 - C1676 - C1677) * C51271 +
             (C1053 * C1363 + C1054 * C1358 -
              (C117 * C1161 + C51110 * C1168) * C1364 -
              (C117 * C1169 + C51110 * C1173) * C51042) *
                 C51190) *
                C8256) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C1363 +
              (C117 * C127 + C51110 * C140) * C1358 -
              (C117 * C300 + C51110 * C306) * C1364 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C51271 +
             (C7131 + C7132 - C7133 - C7134) * C51190) *
                C51298 +
            ((C1366 + C1367 - C1368 - C1369) * C51271 + C7151 * C51190) *
                C51299 +
            C12369 * C8256) *
               C51247 +
           (((C1368 - (C1367 + C1366) + C1369) * C51271 + C7153 * C51190) *
                C51298 +
            ((C1372 - (C1371 + C1370) + C1373) * C51271 + C12718 * C51190) *
                C51299 +
            ((C1376 - (C1375 + C1374) + C1377) * C51271 +
             (C1676 - (C1662 + C1663) + C1677) * C51190) *
                C8256) *
               C50997) *
              C1775 +
          ((((C7133 - (C7132 + C7131) + C7134) * C51271 +
             (C7137 - (C7136 + C7135) + C7138) * C51190) *
                C51298 +
            (C7153 * C51271 + C7154 * C51190) * C51299 +
            (C12718 * C51271 + (C6771 - (C6772 + C6773) + C6774) * C51190) *
                C8256) *
               C51247 +
           ((C7151 * C51271 + C7152 * C51190) * C51298 +
            (C12367 * C51271 + (C6773 + C6772 - C6771 - C6774) * C51190) *
                C51299 +
            ((C1663 + C1662 - C1676 - C1677) * C51271 +
             (C1053 * C1363 + C1054 * C1358 -
              (C117 * C1161 + C51110 * C1168) * C1364 -
              (C117 * C1169 + C51110 * C1173) * C51042) *
                 C51190) *
                C8256) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1492 +
             (C117 * C127 + C51110 * C140) * C51301 -
             (C117 * C300 + C51110 * C306) * C1493 -
             (C117 * C307 + C51110 * C318) * C51288 +
             (C117 * C638 + C51110 * C643) * C1494 +
             (C117 * C644 + C51110 * C653) * C1489) *
                C51271 +
            (C7990 + C7991 - C7992 - C7993 + C7994 + C7995) * C51190) *
               C51298 +
           ((C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C51271 +
            (C6921 + C6922 - C6923 - C6924 + C6925 + C6926) * C51190) *
               C51299 +
           ((C1502 + C1503 - C1504 - C1505 + C1506 + C1507) * C51271 +
            (C12516 + C12517 - C12518 - C12519 + C12520 + C12521) * C51190) *
               C8256) *
              C50992 * C1775 +
          (((C7992 - (C7991 + C7990) + C7993 - C7994 - C7995) * C51271 +
            (C7998 - (C7997 + C7996) + C7999 - C8000 - C8001) * C51190) *
               C51298 +
           ((C6923 - (C6922 + C6921) + C6924 - C6925 - C6926) * C51271 +
            (C6929 - (C6928 + C6927) + C6930 - C6931 - C6932) * C51190) *
               C51299 +
           ((C12518 - (C12517 + C12516) + C12519 - C12520 - C12521) * C51271 +
            (C5500 * C1493 - (C1052 * C51301 + C1051 * C1492) + C5501 * C51288 -
             (C117 * C3462 + C51110 * C3468) * C1494 -
             (C117 * C3467 + C51110 * C3471) * C1489) *
                C51190) *
               C8256) *
              C50992 * C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51271 +
            (C7131 + C7132 - C7133 - C7134) * C51190) *
               C51298 +
           ((C1366 + C1367 - C1368 - C1369) * C51271 + C7151 * C51190) *
               C51299 +
           C12369 * C8256) *
              C50992 * C51302 +
          (((C7133 - (C7132 + C7131) + C7134) * C51271 +
            (C7137 - (C7136 + C7135) + C7138) * C51190) *
               C51298 +
           (C7153 * C51271 + C7154 * C51190) * C51299 +
           (C12718 * C51271 + (C6771 - (C6772 + C6773) + C6774) * C51190) *
               C8256) *
              C50992 * C51291 +
          ((C8154 * C51271 + (C8151 + C8150 - C8149 - C8152) * C51190) *
               C51298 +
           (C7152 * C51271 + (C7145 + C7144 - C7143 - C7146) * C51190) *
               C51299 +
           ((C6773 + C6772 - C6771 - C6774) * C51271 +
            (C5681 * C1363 + C5682 * C1358 -
             (C117 * C7126 + C51110 * C7127) * C1364 -
             (C117 * C7128 + C51110 * C7129) * C51042) *
                C51190) *
               C8256) *
              C50992 * C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C51271 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51190) *
               C51298 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C51271 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51190) *
               C51299 +
           ((C667 + C668 - C669 - C670 + C691 + C692) * C51271 +
            (C11572 + C11573 - C11574 - C11575 + C11582 + C11583) * C51190) *
               C8256) *
              C51247 +
          (((C661 - (C660 + C659) + C662 - C689 - C690) * C51271 +
            (C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C51190) *
               C51298 +
           ((C669 - (C668 + C667) + C670 - C691 - C692) * C51271 +
            (C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) * C51190) *
               C51299 +
           ((C677 - (C676 + C675) + C678 - C693 - C694) * C51271 +
            (C1670 * C636 - (C518 * C630 + C517 * C635) + C1671 * C631 -
             (C117 * C890 + C51110 * C905) * C637 -
             (C117 * C906 + C51110 * C914) * C632) *
                C51190) *
               C8256) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51271 +
            (C5683 + C5684) * C51190) *
               C51298 +
           ((C178 + C179) * C51271 + C5660 * C51190) * C51299 +
           C11122 * C8256) *
              C112 -
          (C11123 * C8256 + (C530 * C51190 + (C181 + C180) * C51271) * C51299 +
           (C5664 * C51190 + (C179 + C178) * C51271) * C51298) *
              C113 +
          (C11122 * C51298 + (C189 * C51271 + (C525 + C526) * C51190) * C51299 +
           ((C185 + C184) * C51271 + (C527 + C528) * C51190) * C8256) *
              C114 -
          ((((C117 * C488 + C51110 * C495) * C51026 +
             (C117 * C477 + C51110 * C489) * C118) *
                C51190 +
            (C187 + C186) * C51271) *
               C8256 +
           ((C528 + C527) * C51190 + C190 * C51271) * C51299 +
           C11123 * C51298) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C51271 +
             (C5683 + C5684) * C51190) *
                C51298 +
            ((C178 + C179) * C51271 + C5660 * C51190) * C51299 +
            C11122 * C8256) *
               C51247 -
           (C11123 * C8256 + (C530 * C51190 + (C181 + C180) * C51271) * C51299 +
            (C5664 * C51190 + (C179 + C178) * C51271) * C51298) *
               C50997) *
              C1013 +
          (((C5660 * C51271 + C5661 * C51190) * C51298 +
            (C5665 * C51271 + C5666 * C51190) * C51299 +
            (C11422 * C51271 + (C1059 + C1060) * C51190) * C8256) *
               C50997 -
           (C11425 * C8256 + (C5663 * C51190 + C5664 * C51271) * C51299 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C51271) * C51298) *
               C51247) *
              C1014 +
          (((C6299 * C51271 + (C6315 + C6314) * C51190) * C51298 +
            (C5661 * C51271 + C6300 * C51190) * C51299 +
            (C5666 * C51271 + (C5689 + C5690) * C51190) * C8256) *
               C51247 -
           ((((C117 * C1248 + C51110 * C1256) * C51026 +
              (C117 * C1244 + C51110 * C1249) * C118) *
                 C51190 +
             (C1060 + C1059) * C51271) *
                C8256 +
            ((C5690 + C5689) * C51190 + C5662 * C51271) * C51299 +
            (C6301 * C51190 + C5663 * C51271) * C51298) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C765 +
            (C117 * C127 + C51110 * C140) * C760 -
            (C117 * C300 + C51110 * C306) * C766 -
            (C117 * C307 + C51110 * C318) * C761 +
            (C117 * C638 + C51110 * C643) * C767 +
            (C117 * C644 + C51110 * C653) * C762 -
            (C117 * C769 + C51110 * C773) * C768 -
            (C117 * C774 + C51110 * C781) * C763) *
               C51271 +
           (C5675 * C765 + C5676 * C760 - C6125 * C766 - C6126 * C761 +
            C6127 * C767 + C6128 * C762 -
            (C117 * C3298 + C51110 * C3302) * C768 -
            (C117 * C3303 + C51110 * C3310) * C763) *
               C51190) *
              C51298 +
          ((C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 +
            C683 * C767 + C684 * C762 - (C117 * C770 + C51110 * C775) * C768 -
            (C117 * C776 + C51110 * C782) * C763) *
               C51271 +
           (C513 * C765 + C514 * C760 - C1666 * C766 - C1667 * C761 +
            C5853 * C767 + C5854 * C762 -
            (C117 * C3300 + C51110 * C3306) * C768 -
            (C117 * C3307 + C51110 * C3312) * C763) *
               C51190) *
              C51299 +
          ((C170 * C765 + C171 * C760 - C352 * C766 - C353 * C761 +
            C685 * C767 + C686 * C762 - (C117 * C771 + C51110 * C777) * C768 -
            (C117 * C778 + C51110 * C783) * C763) *
               C51271 +
           (C515 * C765 + C516 * C760 - C1668 * C766 - C1669 * C761 +
            C11580 * C767 + C11581 * C762 -
            (C117 * C4244 + C51110 * C4245) * C768 -
            (C117 * C4246 + C51110 * C4247) * C763) *
               C51190) *
              C8256) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51271 +
            (C6472 + C6473 - C6474 - C6475) * C51190) *
               C51298 +
           ((C325 + C326 - C359 - C360) * C51271 + C7501 * C51190) * C51299 +
           C11275 * C8256) *
              C295 +
          (((C359 - (C326 + C325) + C360) * C51271 + C7502 * C51190) * C51298 +
           ((C361 - (C332 + C331) + C362) * C51271 +
            (C1912 - (C1913 + C1914) + C1915) * C51190) *
               C51299 +
           ((C363 - (C338 + C337) + C364) * C51271 +
            (C1916 - (C1917 + C1918) + C1919) * C51190) *
               C8256) *
              C296 +
          (C11275 * C51298 +
           (C370 * C51271 + (C1918 + C1917 - C1916 - C1919) * C51190) * C51299 +
           ((C346 + C345 - C365 - C366) * C51271 +
            (C519 * C298 + C520 * C51254 -
             (C117 * C1643 + C51110 * C1644) * C299 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51190) *
               C8256) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51271 +
            (C6472 + C6473 - C6474 - C6475) * C51190) *
               C51298 +
           ((C325 + C326 - C359 - C360) * C51271 + C7501 * C51190) * C51299 +
           C11275 * C8256) *
              C50992 * C1013 +
          (((C6474 - (C6473 + C6472) + C6475) * C51271 +
            (C6478 - (C6477 + C6476) + C6479) * C51190) *
               C51298 +
           (C7502 * C51271 + C7503 * C51190) * C51299 +
           ((C1912 - (C1913 + C1914) + C1915) * C51271 +
            (C5504 - (C5494 + C5495) + C5505) * C51190) *
               C8256) *
              C50992 * C1014 +
          ((C6505 * C51271 + (C6484 + C6483 - C6501 - C6502) * C51190) *
               C51298 +
           (C6500 * C51271 + (C6490 + C6489 - C6503 - C6504) * C51190) *
               C51299 +
           ((C5495 + C5494 - C5504 - C5505) * C51271 +
            (C5681 * C298 + C5682 * C51254 -
             (C117 * C7126 + C51110 * C7127) * C299 -
             (C117 * C7128 + C51110 * C7129) * C51042) *
                C51190) *
               C8256) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C51271 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51190) *
               C51298 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C51271 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51190) *
               C51299 +
           ((C667 + C668 - C669 - C670 + C691 + C692) * C51271 +
            (C11572 + C11573 - C11574 - C11575 + C11582 + C11583) * C51190) *
               C8256) *
              C50992 * C51256 +
          (((C6133 - (C6106 + C6105) + C6134 - C6135 - C6136) * C51271 +
            (C6137 - (C6116 + C6115) + C6138 - C6139 - C6140) * C51190) *
               C51298 +
           ((C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C51271 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C51190) *
               C51299 +
           ((C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) * C51271 +
            (C5500 * C636 - (C1052 * C630 + C1051 * C635) + C5501 * C631 -
             (C117 * C3462 + C51110 * C3468) * C637 -
             (C117 * C3467 + C51110 * C3471) * C632) *
                C51190) *
               C8256) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C51271 +
             (C5683 + C5684) * C51190) *
                C51298 +
            ((C178 + C179) * C51271 + C5660 * C51190) * C51299 +
            C11122 * C8256) *
               C295 -
           (C11123 * C8256 + (C530 * C51190 + (C181 + C180) * C51271) * C51299 +
            (C5664 * C51190 + (C179 + C178) * C51271) * C51298) *
               C296 +
           (C11122 * C51298 + (C189 * C51271 + C11422 * C51190) * C51299 +
            ((C185 + C184) * C51271 + (C527 + C528) * C51190) * C8256) *
               C297) *
              C51256 +
          (((C5660 * C51271 + C5661 * C51190) * C51298 +
            (C5665 * C51271 + C5666 * C51190) * C51299 +
            (C11422 * C51271 + (C1059 + C1060) * C51190) * C8256) *
               C296 -
           (C11425 * C8256 + (C5663 * C51190 + C5664 * C51271) * C51299 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C51271) * C51298) *
               C295 -
           ((((C117 * C1029 + C51110 * C1035) * C51026 +
              (C117 * C1020 + C51110 * C1030) * C118) *
                 C51190 +
             (C528 + C527) * C51271) *
                C8256 +
            ((C1060 + C1059) * C51190 + C529 * C51271) * C51299 +
            C11425 * C51298) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51271 +
            (C5683 + C5684) * C51190) *
               C51298 +
           ((C178 + C179) * C51271 + C5660 * C51190) * C51299 +
           C11122 * C8256) *
              C50992 * C1240 -
          (C11425 * C8256 + (C5663 * C51190 + C5664 * C51271) * C51299 +
           ((C5686 + C5685) * C51190 + (C5684 + C5683) * C51271) * C51298) *
              C50992 * C1241 +
          ((C6299 * C51271 + (C6315 + C6314) * C51190) * C51298 +
           (C5661 * C51271 + C6300 * C51190) * C51299 +
           (C5666 * C51271 + (C5689 + C5690) * C51190) * C8256) *
              C50992 * C1242 -
          ((((C117 * C6293 + C51110 * C6297) * C51026 +
             (C117 * C6288 + C51110 * C6294) * C118) *
                C51190 +
            (C5690 + C5689) * C51271) *
               C8256 +
           ((C6317 + C6316) * C51190 + C6301 * C51271) * C51299 +
           ((C6620 + C6619) * C51190 + C6612 * C51271) * C51298) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C51271 +
             (C5683 + C5684) * C51190) *
                C51298 +
            ((C178 + C179) * C51271 + C5660 * C51190) * C51299 +
            C11122 * C8256) *
               C51300 -
           (C11123 * C8256 + (C530 * C51190 + (C181 + C180) * C51271) * C51299 +
            (C5664 * C51190 + (C179 + C178) * C51271) * C51298) *
               C51285 +
           (C11122 * C51298 + (C189 * C51271 + C11422 * C51190) * C51299 +
            ((C185 + C184) * C51271 + (C527 + C528) * C51190) * C8256) *
               C1362) *
              C1775 +
          (((C5660 * C51271 + C5661 * C51190) * C51298 +
            (C5665 * C51271 + C5666 * C51190) * C51299 +
            (C11422 * C51271 + (C1059 + C1060) * C51190) * C8256) *
               C51285 -
           (C11425 * C8256 + (C5663 * C51190 + C5664 * C51271) * C51299 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C51271) * C51298) *
               C51300 -
           ((((C117 * C1029 + C51110 * C1035) * C51026 +
              (C117 * C1020 + C51110 * C1030) * C118) *
                 C51190 +
             (C528 + C527) * C51271) *
                C8256 +
            ((C1060 + C1059) * C51190 + C529 * C51271) * C51299 +
            C11425 * C51298) *
               C1362) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C298 +
              (C117 * C127 + C51110 * C140) * C51254 -
              (C117 * C300 + C51110 * C306) * C299 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C51271 +
             (C6472 + C6473 - C6474 - C6475) * C51190) *
                C51298 +
            ((C325 + C326 - C359 - C360) * C51271 + C7501 * C51190) * C51299 +
            C11275 * C8256) *
               C1490 +
           (((C359 - (C326 + C325) + C360) * C51271 + C7502 * C51190) * C51298 +
            ((C361 - (C332 + C331) + C362) * C51271 + C13061 * C51190) *
                C51299 +
            ((C363 - (C338 + C337) + C364) * C51271 +
             (C1916 - (C1917 + C1918) + C1919) * C51190) *
                C8256) *
               C50997) *
              C1775 +
          ((((C6474 - (C6473 + C6472) + C6475) * C51271 +
             (C6478 - (C6477 + C6476) + C6479) * C51190) *
                C51298 +
            (C7502 * C51271 + C7503 * C51190) * C51299 +
            (C13061 * C51271 + (C5504 - (C5494 + C5495) + C5505) * C51190) *
                C8256) *
               C1490 +
           ((C7501 * C51271 + C6500 * C51190) * C51298 +
            (C11273 * C51271 + (C5495 + C5494 - C5504 - C5505) * C51190) *
                C51299 +
            ((C1918 + C1917 - C1916 - C1919) * C51271 +
             (C1053 * C298 + C1054 * C51254 -
              (C117 * C1161 + C51110 * C1168) * C299 -
              (C117 * C1169 + C51110 * C1173) * C51042) *
                 C51190) *
                C8256) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C51271 +
             (C5683 + C5684) * C51190) *
                C51298 +
            ((C178 + C179) * C51271 + C5660 * C51190) * C51299 +
            C11122 * C8256) *
               C1490 -
           (C11123 * C8256 + (C530 * C51190 + (C181 + C180) * C51271) * C51299 +
            (C5664 * C51190 + (C179 + C178) * C51271) * C51298) *
               C50997) *
              C51302 +
          (((C5660 * C51271 + C5661 * C51190) * C51298 +
            (C5665 * C51271 + C5666 * C51190) * C51299 +
            (C11422 * C51271 + (C1059 + C1060) * C51190) * C8256) *
               C50997 -
           (C11425 * C8256 + (C5663 * C51190 + C5664 * C51271) * C51299 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C51271) * C51298) *
               C1490) *
              C51291 +
          (((C6299 * C51271 + (C6315 + C6314) * C51190) * C51298 +
            (C5661 * C51271 + C6300 * C51190) * C51299 +
            (C5666 * C51271 + (C5689 + C5690) * C51190) * C8256) *
               C1490 -
           ((((C117 * C1248 + C51110 * C1256) * C51026 +
              (C117 * C1244 + C51110 * C1249) * C118) *
                 C51190 +
             (C1060 + C1059) * C51271) *
                C8256 +
            ((C5690 + C5689) * C51190 + C5662 * C51271) * C51299 +
            (C6301 * C51190 + C5663 * C51271) * C51298) *
               C50997) *
              C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51271 +
            (C5683 + C5684) * C51190) *
               C51298 +
           ((C178 + C179) * C51271 + C5660 * C51190) * C51299 +
           C11122 * C8256) *
              C112 -
          (C11123 * C8256 + (C530 * C51190 + (C181 + C180) * C51271) * C51299 +
           (C5664 * C51190 + (C179 + C178) * C51271) * C51298) *
              C113 +
          (C11122 * C51298 + (C189 * C51271 + (C525 + C526) * C51190) * C51299 +
           ((C185 + C184) * C51271 + (C527 + C528) * C51190) * C8256) *
              C114 -
          ((((C117 * C488 + C51110 * C495) * C51026 +
             (C117 * C477 + C51110 * C489) * C118) *
                C51190 +
            (C187 + C186) * C51271) *
               C8256 +
           ((C528 + C527) * C51190 + C190 * C51271) * C51299 +
           C11123 * C51298) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C51271 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51190) *
               C51298 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C51271 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51190) *
               C51299 +
           ((C667 + C668 - C669 - C670 + C691 + C692) * C51271 +
            (C11572 + C11573 - C11574 - C11575 + C11582 + C11583) * C51190) *
               C8256) *
              C51247 +
          (((C661 - (C660 + C659) + C662 - C689 - C690) * C51271 +
            (C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C51190) *
               C51298 +
           ((C669 - (C668 + C667) + C670 - C691 - C692) * C51271 +
            (C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) * C51190) *
               C51299 +
           ((C677 - (C676 + C675) + C678 - C693 - C694) * C51271 +
            (C1670 * C636 - (C518 * C630 + C517 * C635) + C1671 * C631 -
             (C117 * C890 + C51110 * C905) * C637 -
             (C117 * C906 + C51110 * C914) * C632) *
                C51190) *
               C8256) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51271 +
            (C6472 + C6473 - C6474 - C6475) * C51190) *
               C51298 +
           ((C325 + C326 - C359 - C360) * C51271 + C7501 * C51190) * C51299 +
           C11275 * C8256) *
              C295 +
          (((C359 - (C326 + C325) + C360) * C51271 + C7502 * C51190) * C51298 +
           ((C361 - (C332 + C331) + C362) * C51271 +
            (C1912 - (C1913 + C1914) + C1915) * C51190) *
               C51299 +
           ((C363 - (C338 + C337) + C364) * C51271 +
            (C1916 - (C1917 + C1918) + C1919) * C51190) *
               C8256) *
              C296 +
          (C11275 * C51298 +
           (C370 * C51271 + (C1918 + C1917 - C1916 - C1919) * C51190) * C51299 +
           ((C346 + C345 - C365 - C366) * C51271 +
            (C519 * C298 + C520 * C51254 -
             (C117 * C1643 + C51110 * C1644) * C299 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51190) *
               C8256) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C765 +
            (C117 * C127 + C51110 * C140) * C760 -
            (C117 * C300 + C51110 * C306) * C766 -
            (C117 * C307 + C51110 * C318) * C761 +
            (C117 * C638 + C51110 * C643) * C767 +
            (C117 * C644 + C51110 * C653) * C762 -
            (C117 * C769 + C51110 * C773) * C768 -
            (C117 * C774 + C51110 * C781) * C763) *
               C51271 +
           (C5675 * C765 + C5676 * C760 - C6125 * C766 - C6126 * C761 +
            C6127 * C767 + C6128 * C762 -
            (C117 * C3298 + C51110 * C3302) * C768 -
            (C117 * C3303 + C51110 * C3310) * C763) *
               C51190) *
              C51298 +
          ((C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 +
            C683 * C767 + C684 * C762 - (C117 * C770 + C51110 * C775) * C768 -
            (C117 * C776 + C51110 * C782) * C763) *
               C51271 +
           (C513 * C765 + C514 * C760 - C1666 * C766 - C1667 * C761 +
            C5853 * C767 + C5854 * C762 -
            (C117 * C3300 + C51110 * C3306) * C768 -
            (C117 * C3307 + C51110 * C3312) * C763) *
               C51190) *
              C51299 +
          ((C170 * C765 + C171 * C760 - C352 * C766 - C353 * C761 +
            C685 * C767 + C686 * C762 - (C117 * C771 + C51110 * C777) * C768 -
            (C117 * C778 + C51110 * C783) * C763) *
               C51271 +
           (C515 * C765 + C516 * C760 - C1668 * C766 - C1669 * C761 +
            C11580 * C767 + C11581 * C762 -
            (C117 * C4244 + C51110 * C4245) * C768 -
            (C117 * C4246 + C51110 * C4247) * C763) *
               C51190) *
              C8256) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C51271 +
             (C5683 + C5684) * C51190) *
                C51298 +
            ((C178 + C179) * C51271 + C5660 * C51190) * C51299 +
            C11122 * C8256) *
               C295 -
           (C11123 * C8256 + (C530 * C51190 + (C181 + C180) * C51271) * C51299 +
            (C5664 * C51190 + (C179 + C178) * C51271) * C51298) *
               C296 +
           (C11122 * C51298 + (C189 * C51271 + C11422 * C51190) * C51299 +
            ((C185 + C184) * C51271 + (C527 + C528) * C51190) * C8256) *
               C297) *
              C51256 +
          (((C5660 * C51271 + C5661 * C51190) * C51298 +
            (C5665 * C51271 + C5666 * C51190) * C51299 +
            (C11422 * C51271 + (C1059 + C1060) * C51190) * C8256) *
               C296 -
           (C11425 * C8256 + (C5663 * C51190 + C5664 * C51271) * C51299 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C51271) * C51298) *
               C295 -
           ((((C117 * C1029 + C51110 * C1035) * C51026 +
              (C117 * C1020 + C51110 * C1030) * C118) *
                 C51190 +
             (C528 + C527) * C51271) *
                C8256 +
            ((C1060 + C1059) * C51190 + C529 * C51271) * C51299 +
            C11425 * C51298) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C51271 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51190) *
               C51298 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C51271 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51190) *
               C51299 +
           ((C667 + C668 - C669 - C670 + C691 + C692) * C51271 +
            (C11572 + C11573 - C11574 - C11575 + C11582 + C11583) * C51190) *
               C8256) *
              C50992 * C51256 +
          (((C6133 - (C6106 + C6105) + C6134 - C6135 - C6136) * C51271 +
            (C6137 - (C6116 + C6115) + C6138 - C6139 - C6140) * C51190) *
               C51298 +
           ((C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C51271 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C51190) *
               C51299 +
           ((C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) * C51271 +
            (C5500 * C636 - (C1052 * C630 + C1051 * C635) + C5501 * C631 -
             (C117 * C3462 + C51110 * C3468) * C637 -
             (C117 * C3467 + C51110 * C3471) * C632) *
                C51190) *
               C8256) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C1363 +
            (C117 * C127 + C51110 * C140) * C1358 -
            (C117 * C300 + C51110 * C306) * C1364 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C51126 * C108 +
           (C1366 + C1367 - C1368 - C1369) * C51126 * C109 + C1388 * C110 +
           C1389 * C111) *
              C51300 +
          ((C1368 - (C1367 + C1366) + C1369) * C51126 * C108 +
           (C1372 - (C1371 + C1370) + C1373) * C51126 * C109 +
           (C1376 - (C1375 + C1374) + C1377) * C51126 * C110 +
           (C1378 - (C1379 + C1380) + C1381) * C51126 * C111) *
              C51285 +
          (C1388 * C108 + C1389 * C109 +
           (C1380 + C1379 - C1378 - C1381) * C51126 * C110 +
           (C176 * C1363 + C177 * C1358 -
            (C117 * C305 + C51110 * C316) * C1364 -
            (C117 * C317 + C51110 * C323) * C51042) *
               C51126 * C111) *
              C1362) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1363 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C1358 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1364 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C1363 + (C2492 + C2493 + C2494) * C1358 -
            (C2677 + C2678 + C2679) * C1364 -
            (C2680 + C2681 + C2682) * C51042) *
               C51126 * C50978) *
              C51300 +
          (((C2679 + C2678 + C2677) * C1364 -
            ((C2494 + C2493 + C2492) * C1358 +
             (C2491 + C2490 + C2489) * C1363) +
            (C2682 + C2681 + C2680) * C51042) *
               C51126 * C2447 +
           ((C2683 + C2684 + C2685) * C1364 -
            ((C2495 + C2496 + C2497) * C1358 +
             (C2498 + C2499 + C2500) * C1363) +
            (C2686 + C2687 + C2688) * C51042) *
               C51126 * C50978) *
              C51285 +
          (((C2500 + C2499 + C2498) * C1363 + (C2497 + C2496 + C2495) * C1358 -
            (C2685 + C2684 + C2683) * C1364 -
            (C2688 + C2687 + C2686) * C51042) *
               C51126 * C2447 +
           ((C2501 + C2502 + C2503) * C1363 + (C2504 + C2505 + C2506) * C1358 -
            (C2451 * C772 + C2446 * C779 + C2450 * C641 + C2445 * C649 +
             C2449 * C303 + C2444 * C312) *
                C1364 -
            (C2451 * C780 + C2446 * C784 + C2450 * C650 + C2445 * C656 +
             C2449 * C313 + C2444 * C321) *
                C51042) *
               C51126 * C50978) *
              C1362) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C1492 +
            (C117 * C127 + C51110 * C140) * C51301 -
            (C117 * C300 + C51110 * C306) * C1493 -
            (C117 * C307 + C51110 * C318) * C51288 +
            (C117 * C638 + C51110 * C643) * C1494 +
            (C117 * C644 + C51110 * C653) * C1489) *
               C51126 * C108 +
           (C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C51126 * C109 +
           (C1502 + C1503 - C1504 - C1505 + C1506 + C1507) * C51126 * C110 +
           (C1508 + C1509 - C1510 - C1511 + C1512 + C1513) * C51126 * C111) *
              C1490 +
          ((C1498 - (C1497 + C1496) + C1499 - C1500 - C1501) * C51126 * C108 +
           (C1504 - (C1503 + C1502) + C1505 - C1506 - C1507) * C51126 * C109 +
           (C1510 - (C1509 + C1508) + C1511 - C1512 - C1513) * C51126 * C110 +
           (C357 * C1493 - (C174 * C51301 + C175 * C1492) + C358 * C51288 -
            (C117 * C642 + C51110 * C651) * C1494 -
            (C117 * C652 + C51110 * C657) * C1489) *
               C51126 * C111) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1492 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51301 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1493 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51288 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C1494 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C1489) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C1492 + (C2492 + C2493 + C2494) * C51301 -
            (C2677 + C2678 + C2679) * C1493 - (C2680 + C2681 + C2682) * C51288 +
            (C3041 + C3042 + C3043) * C1494 + (C3044 + C3045 + C3046) * C1489) *
               C51126 * C50978) *
              C1490 +
          (((C2679 + C2678 + C2677) * C1493 -
            ((C2494 + C2493 + C2492) * C51301 +
             (C2491 + C2490 + C2489) * C1492) +
            (C2682 + C2681 + C2680) * C51288 - (C3043 + C3042 + C3041) * C1494 -
            (C3046 + C3045 + C3044) * C1489) *
               C51126 * C2447 +
           ((C2683 + C2684 + C2685) * C1493 -
            ((C2495 + C2496 + C2497) * C51301 +
             (C2498 + C2499 + C2500) * C1492) +
            (C2686 + C2687 + C2688) * C51288 -
            (C2451 * C3018 + C2446 * C3023 + C2450 * C771 + C2445 * C777 +
             C2449 * C640 + C2444 * C647) *
                C1494 -
            (C2451 * C3024 + C2446 * C3027 + C2450 * C778 + C2445 * C783 +
             C2449 * C648 + C2444 * C655) *
                C1489) *
               C51126 * C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51126 * C108 +
            (C1366 + C1367 - C1368 - C1369) * C51126 * C109 + C1388 * C110 +
            C1389 * C111) *
               C1490 +
           ((C1368 - (C1367 + C1366) + C1369) * C51126 * C108 +
            (C1372 - (C1371 + C1370) + C1373) * C51126 * C109 +
            (C1376 - (C1375 + C1374) + C1377) * C51126 * C110 +
            (C1378 - (C1379 + C1380) + C1381) * C51126 * C111) *
               C50997) *
              C51256 +
          ((((C117 * C883 + C51110 * C891) * C1364 -
             ((C117 * C486 + C51110 * C494) * C1358 +
              (C117 * C476 + C51110 * C487) * C1363) +
             (C117 * C892 + C51110 * C907) * C51042) *
                C51126 * C108 +
            (C1672 - (C1650 + C1651) + C1673) * C51126 * C109 +
            (C1674 - (C1656 + C1657) + C1675) * C51126 * C110 +
            (C1676 - (C1662 + C1663) + C1677) * C51126 * C111) *
               C1490 +
           ((C1651 + C1650 - C1672 - C1673) * C51126 * C108 +
            (C1657 + C1656 - C1674 - C1675) * C51126 * C109 +
            (C1663 + C1662 - C1676 - C1677) * C51126 * C110 +
            (C519 * C1363 + C520 * C1358 -
             (C117 * C1643 + C51110 * C1644) * C1364 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51126 * C111) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C1363 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C1358 -
             (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
              C2449 * C300 + C2444 * C306) *
                 C1364 -
             (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
              C2449 * C307 + C2444 * C318) *
                 C51042) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C1363 + (C2492 + C2493 + C2494) * C1358 -
             (C2677 + C2678 + C2679) * C1364 -
             (C2680 + C2681 + C2682) * C51042) *
                C51126 * C50978) *
               C1490 +
           (((C2679 + C2678 + C2677) * C1364 -
             ((C2494 + C2493 + C2492) * C1358 +
              (C2491 + C2490 + C2489) * C1363) +
             (C2682 + C2681 + C2680) * C51042) *
                C51126 * C2447 +
            ((C2683 + C2684 + C2685) * C1364 -
             ((C2495 + C2496 + C2497) * C1358 +
              (C2498 + C2499 + C2500) * C1363) +
             (C2686 + C2687 + C2688) * C51042) *
                C51126 * C50978) *
               C50997) *
              C51256 +
          ((((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
              C2451 * C3298 + C2446 * C3302) *
                 C1364 -
             ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
               C2449 * C486 + C2444 * C494) *
                  C1358 +
              (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
               C2449 * C476 + C2444 * C487) *
                  C1363) +
             (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
              C2451 * C3303 + C2446 * C3310) *
                 C51042) *
                C51126 * C2447 +
            ((C4261 + C4262 + C4263) * C1364 -
             ((C2864 + C2863 + C2862) * C1358 +
              (C2861 + C2860 + C2859) * C1363) +
             (C4264 + C4265 + C4266) * C51042) *
                C51126 * C50978) *
               C1490 +
           (((C2859 + C2860 + C2861) * C1363 + (C2862 + C2863 + C2864) * C1358 -
             (C4263 + C4262 + C4261) * C1364 -
             (C4266 + C4265 + C4264) * C51042) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C1363 + (C2868 + C2869 + C2870) * C1358 -
             (C2451 * C4244 + C2446 * C4245 + C2450 * C888 + C2445 * C901 +
              C2449 * C887 + C2444 * C899) *
                 C1364 -
             (C2451 * C4246 + C2446 * C4247 + C2450 * C902 + C2445 * C912 +
              C2449 * C900 + C2444 * C911) *
                 C51042) *
                C51126 * C50978) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51126 * C108 +
            (C1366 + C1367 - C1368 - C1369) * C51126 * C109 + C1388 * C110 +
            C1389 * C111) *
               C51247 +
           ((C1368 - (C1367 + C1366) + C1369) * C51126 * C108 +
            (C1372 - (C1371 + C1370) + C1373) * C51126 * C109 +
            (C1376 - (C1375 + C1374) + C1377) * C51126 * C110 +
            (C1378 - (C1379 + C1380) + C1381) * C51126 * C111) *
               C50997) *
              C1775 +
          ((((C117 * C883 + C51110 * C891) * C1364 -
             ((C117 * C486 + C51110 * C494) * C1358 +
              (C117 * C476 + C51110 * C487) * C1363) +
             (C117 * C892 + C51110 * C907) * C51042) *
                C51126 * C108 +
            (C1672 - (C1650 + C1651) + C1673) * C51126 * C109 +
            (C1674 - (C1656 + C1657) + C1675) * C51126 * C110 +
            (C1676 - (C1662 + C1663) + C1677) * C51126 * C111) *
               C51247 +
           ((C1651 + C1650 - C1672 - C1673) * C51126 * C108 +
            (C1657 + C1656 - C1674 - C1675) * C51126 * C109 +
            (C1663 + C1662 - C1676 - C1677) * C51126 * C110 +
            (C519 * C1363 + C520 * C1358 -
             (C117 * C1643 + C51110 * C1644) * C1364 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51126 * C111) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C1363 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C1358 -
             (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
              C2449 * C300 + C2444 * C306) *
                 C1364 -
             (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
              C2449 * C307 + C2444 * C318) *
                 C51042) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C1363 + (C2492 + C2493 + C2494) * C1358 -
             (C2677 + C2678 + C2679) * C1364 -
             (C2680 + C2681 + C2682) * C51042) *
                C51126 * C50978) *
               C51247 +
           (((C2679 + C2678 + C2677) * C1364 -
             ((C2494 + C2493 + C2492) * C1358 +
              (C2491 + C2490 + C2489) * C1363) +
             (C2682 + C2681 + C2680) * C51042) *
                C51126 * C2447 +
            ((C2683 + C2684 + C2685) * C1364 -
             ((C2495 + C2496 + C2497) * C1358 +
              (C2498 + C2499 + C2500) * C1363) +
             (C2686 + C2687 + C2688) * C51042) *
                C51126 * C50978) *
               C50997) *
              C1775 +
          ((((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
              C2451 * C3298 + C2446 * C3302) *
                 C1364 -
             ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
               C2449 * C486 + C2444 * C494) *
                  C1358 +
              (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
               C2449 * C476 + C2444 * C487) *
                  C1363) +
             (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
              C2451 * C3303 + C2446 * C3310) *
                 C51042) *
                C51126 * C2447 +
            ((C4261 + C4262 + C4263) * C1364 -
             ((C2864 + C2863 + C2862) * C1358 +
              (C2861 + C2860 + C2859) * C1363) +
             (C4264 + C4265 + C4266) * C51042) *
                C51126 * C50978) *
               C51247 +
           (((C2859 + C2860 + C2861) * C1363 + (C2862 + C2863 + C2864) * C1358 -
             (C4263 + C4262 + C4261) * C1364 -
             (C4266 + C4265 + C4264) * C51042) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C1363 + (C2868 + C2869 + C2870) * C1358 -
             (C2451 * C4244 + C2446 * C4245 + C2450 * C888 + C2445 * C901 +
              C2449 * C887 + C2444 * C899) *
                 C1364 -
             (C2451 * C4246 + C2446 * C4247 + C2450 * C902 + C2445 * C912 +
              C2449 * C900 + C2444 * C911) *
                 C51042) *
                C51126 * C50978) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C1492 +
            (C117 * C127 + C51110 * C140) * C51301 -
            (C117 * C300 + C51110 * C306) * C1493 -
            (C117 * C307 + C51110 * C318) * C51288 +
            (C117 * C638 + C51110 * C643) * C1494 +
            (C117 * C644 + C51110 * C653) * C1489) *
               C51126 * C108 +
           (C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C51126 * C109 +
           (C1502 + C1503 - C1504 - C1505 + C1506 + C1507) * C51126 * C110 +
           (C1508 + C1509 - C1510 - C1511 + C1512 + C1513) * C51126 * C111) *
              C50992 * C1775 +
          (((C117 * C883 + C51110 * C891) * C1493 -
            ((C117 * C486 + C51110 * C494) * C51301 +
             (C117 * C476 + C51110 * C487) * C1492) +
            (C117 * C892 + C51110 * C907) * C51288 -
            (C117 * C884 + C51110 * C893) * C1494 -
            (C117 * C894 + C51110 * C908) * C1489) *
               C51126 * C108 +
           (C1666 * C1493 - (C514 * C51301 + C513 * C1492) + C1667 * C51288 -
            (C117 * C886 + C51110 * C897) * C1494 -
            (C117 * C898 + C51110 * C910) * C1489) *
               C51126 * C109 +
           (C1668 * C1493 - (C516 * C51301 + C515 * C1492) + C1669 * C51288 -
            (C117 * C888 + C51110 * C901) * C1494 -
            (C117 * C902 + C51110 * C912) * C1489) *
               C51126 * C110 +
           (C1670 * C1493 - (C518 * C51301 + C517 * C1492) + C1671 * C51288 -
            (C117 * C890 + C51110 * C905) * C1494 -
            (C117 * C906 + C51110 * C914) * C1489) *
               C51126 * C111) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1492 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51301 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1493 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51288 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C1494 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C1489) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C1492 + (C2492 + C2493 + C2494) * C51301 -
            (C2677 + C2678 + C2679) * C1493 - (C2680 + C2681 + C2682) * C51288 +
            (C3041 + C3042 + C3043) * C1494 + (C3044 + C3045 + C3046) * C1489) *
               C51126 * C50978) *
              C50992 * C1775 +
          (((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
             C2451 * C3298 + C2446 * C3302) *
                C1493 -
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51301 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C1492) +
            (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
             C2451 * C3303 + C2446 * C3310) *
                C51288 -
            (C2451 * C3299 + C2446 * C3304 + C2450 * C3298 + C2445 * C3302 +
             C2449 * C884 + C2444 * C893) *
                C1494 -
            (C2451 * C3305 + C2446 * C3311 + C2450 * C3303 + C2445 * C3310 +
             C2449 * C894 + C2444 * C908) *
                C1489) *
               C51126 * C2447 +
           ((C4261 + C4262 + C4263) * C1493 -
            ((C2864 + C2863 + C2862) * C51301 +
             (C2861 + C2860 + C2859) * C1492) +
            (C4264 + C4265 + C4266) * C51288 -
            (C2451 * C3301 + C2446 * C3308 + C2450 * C3300 + C2445 * C3306 +
             C2449 * C886 + C2444 * C897) *
                C1494 -
            (C2451 * C3309 + C2446 * C3313 + C2450 * C3307 + C2445 * C3312 +
             C2449 * C898 + C2444 * C910) *
                C1489) *
               C51126 * C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C1363 +
            (C117 * C127 + C51110 * C140) * C1358 -
            (C117 * C300 + C51110 * C306) * C1364 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C51126 * C108 +
           (C1366 + C1367 - C1368 - C1369) * C51126 * C109 + C1388 * C110 +
           C1389 * C111) *
              C50992 * C51302 +
          (((C117 * C883 + C51110 * C891) * C1364 -
            ((C117 * C486 + C51110 * C494) * C1358 +
             (C117 * C476 + C51110 * C487) * C1363) +
            (C117 * C892 + C51110 * C907) * C51042) *
               C51126 * C108 +
           (C1672 - (C1650 + C1651) + C1673) * C51126 * C109 +
           (C1674 - (C1656 + C1657) + C1675) * C51126 * C110 +
           (C1676 - (C1662 + C1663) + C1677) * C51126 * C111) *
              C50992 * C51291 +
          (((C117 * C1016 + C51110 * C1021) * C1363 +
            (C117 * C1022 + C51110 * C1031) * C1358 -
            (C117 * C1158 + C51110 * C1162) * C1364 -
            (C117 * C1163 + C51110 * C1170) * C51042) *
               C51126 * C108 +
           (C1049 * C1363 + C1050 * C1358 -
            (C117 * C1159 + C51110 * C1164) * C1364 -
            (C117 * C1165 + C51110 * C1171) * C51042) *
               C51126 * C109 +
           (C1051 * C1363 + C1052 * C1358 -
            (C117 * C1160 + C51110 * C1166) * C1364 -
            (C117 * C1167 + C51110 * C1172) * C51042) *
               C51126 * C110 +
           (C1053 * C1363 + C1054 * C1358 -
            (C117 * C1161 + C51110 * C1168) * C1364 -
            (C117 * C1169 + C51110 * C1173) * C51042) *
               C51126 * C111) *
              C50992 * C2019)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1363 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C1358 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1364 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C1363 + (C2492 + C2493 + C2494) * C1358 -
            (C2677 + C2678 + C2679) * C1364 -
            (C2680 + C2681 + C2682) * C51042) *
               C51126 * C50978) *
              C50992 * C51302 +
          (((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
             C2451 * C3298 + C2446 * C3302) *
                C1364 -
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C1358 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C1363) +
            (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
             C2451 * C3303 + C2446 * C3310) *
                C51042) *
               C51126 * C2447 +
           ((C4261 + C4262 + C4263) * C1364 -
            ((C2864 + C2863 + C2862) * C1358 +
             (C2861 + C2860 + C2859) * C1363) +
            (C4264 + C4265 + C4266) * C51042) *
               C51126 * C50978) *
              C50992 * C51291 +
          (((C2449 * C1016 + C2444 * C1021 + C2450 * C1158 + C2445 * C1162 +
             C2451 * C3460 + C2446 * C3463) *
                C1363 +
            (C2449 * C1022 + C2444 * C1031 + C2450 * C1163 + C2445 * C1170 +
             C2451 * C3464 + C2446 * C3469) *
                C1358 -
            (C2451 * C3636 + C2446 * C3638 + C2450 * C3460 + C2445 * C3463 +
             C2449 * C1158 + C2444 * C1162) *
                C1364 -
            (C2451 * C3639 + C2446 * C3642 + C2450 * C3464 + C2445 * C3469 +
             C2449 * C1163 + C2444 * C1170) *
                C51042) *
               C51126 * C2447 +
           ((C3485 + C3486 + C3487) * C1363 + (C3488 + C3489 + C3490) * C1358 -
            (C2451 * C3637 + C2446 * C3640 + C2450 * C3461 + C2445 * C3465 +
             C2449 * C1159 + C2444 * C1164) *
                C1364 -
            (C2451 * C3641 + C2446 * C3643 + C2450 * C3466 + C2445 * C3470 +
             C2449 * C1165 + C2444 * C1171) *
                C51042) *
               C51126 * C50978) *
              C50992 * C2019)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C635 +
            (C117 * C127 + C51110 * C140) * C630 -
            (C117 * C300 + C51110 * C306) * C636 -
            (C117 * C307 + C51110 * C318) * C631 +
            (C117 * C638 + C51110 * C643) * C637 +
            (C117 * C644 + C51110 * C653) * C632) *
               C51126 * C108 +
           (C659 + C660 - C661 - C662 + C689 + C690) * C51126 * C109 +
           (C667 + C668 - C669 - C670 + C691 + C692) * C51126 * C110 +
           (C675 + C676 - C677 - C678 + C693 + C694) * C51126 * C111) *
              C51247 +
          ((C661 - (C660 + C659) + C662 - C689 - C690) * C51126 * C108 +
           (C669 - (C668 + C667) + C670 - C691 - C692) * C51126 * C109 +
           (C677 - (C676 + C675) + C678 - C693 - C694) * C51126 * C110 +
           (C357 * C636 - (C174 * C630 + C175 * C635) + C358 * C631 -
            (C117 * C642 + C51110 * C651) * C637 -
            (C117 * C652 + C51110 * C657) * C632) *
               C51126 * C111) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C118 +
            (C117 * C127 + C51110 * C140) * C51026) *
               C51126 * C108 +
           (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
              C112 -
          (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
           (C179 + C178) * C51126 * C108) *
              C113 +
          (C192 * C108 + C193 * C109 + (C185 + C184) * C51126 * C110 +
           (C186 + C187) * C51126 * C111) *
              C114 -
          (((C117 * C138 + C51110 * C146) * C51026 +
            (C117 * C125 + C51110 * C139) * C118) *
               C51126 * C111 +
           (C187 + C186) * C51126 * C110 + C194 * C109 + C195 * C108) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51126 * C108 +
            (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
               C51247 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
            (C179 + C178) * C51126 * C108) *
               C50997) *
              C1013 +
          (((C521 + C522) * C51126 * C108 + (C523 + C524) * C51126 * C109 +
            (C525 + C526) * C51126 * C110 + (C527 + C528) * C51126 * C111) *
               C50997 -
           (C531 * C111 + C532 * C110 + (C522 + C521) * C51126 * C109 +
            ((C117 * C486 + C51110 * C494) * C51026 +
             (C117 * C476 + C51110 * C487) * C118) *
                C51126 * C108) *
               C51247) *
              C1014 +
          ((((C117 * C1016 + C51110 * C1021) * C118 +
             (C117 * C1022 + C51110 * C1031) * C51026) *
                C51126 * C108 +
            (C1055 + C1056) * C51126 * C109 + (C1057 + C1058) * C51126 * C110 +
            (C1059 + C1060) * C51126 * C111) *
               C51247 -
           (((C117 * C1029 + C51110 * C1035) * C51026 +
             (C117 * C1020 + C51110 * C1030) * C118) *
                C51126 * C111 +
            (C1060 + C1059) * C51126 * C110 + (C1058 + C1057) * C51126 * C109 +
            (C1056 + C1055) * C51126 * C108) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51026) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C118 + (C2492 + C2493 + C2494) * C51026) *
               C51126 * C50978) *
              C112 -
          (((C2495 + C2496 + C2497) * C51026 + (C2498 + C2499 + C2500) * C118) *
               C51126 * C50978 +
           ((C2494 + C2493 + C2492) * C51026 + (C2491 + C2490 + C2489) * C118) *
               C51126 * C2447) *
              C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51026) *
               C51126 * C2447 +
           ((C2501 + C2502 + C2503) * C118 + (C2504 + C2505 + C2506) * C51026) *
               C51126 * C50978) *
              C114 -
          (((C2451 * C652 + C2446 * C657 + C2450 * C315 + C2445 * C322 +
             C2449 * C134 + C2444 * C144) *
                C51026 +
            (C2451 * C642 + C2446 * C651 + C2450 * C304 + C2445 * C314 +
             C2449 * C123 + C2444 * C135) *
                C118) *
               C51126 * C50978 +
           ((C2506 + C2505 + C2504) * C51026 + (C2503 + C2502 + C2501) * C118) *
               C51126 * C2447) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C635 + (C2492 + C2493 + C2494) * C630 -
            (C2677 + C2678 + C2679) * C636 - (C2680 + C2681 + C2682) * C631 +
            (C3041 + C3042 + C3043) * C637 + (C3044 + C3045 + C3046) * C632) *
               C51126 * C50978) *
              C51247 +
          (((C2679 + C2678 + C2677) * C636 -
            ((C2494 + C2493 + C2492) * C630 + (C2491 + C2490 + C2489) * C635) +
            (C2682 + C2681 + C2680) * C631 - (C3043 + C3042 + C3041) * C637 -
            (C3046 + C3045 + C3044) * C632) *
               C51126 * C2447 +
           ((C2683 + C2684 + C2685) * C636 -
            ((C2495 + C2496 + C2497) * C630 + (C2498 + C2499 + C2500) * C635) +
            (C2686 + C2687 + C2688) * C631 -
            (C2451 * C3018 + C2446 * C3023 + C2450 * C771 + C2445 * C777 +
             C2449 * C640 + C2444 * C647) *
                C637 -
            (C2451 * C3024 + C2446 * C3027 + C2450 * C778 + C2445 * C783 +
             C2449 * C648 + C2444 * C655) *
                C632) *
               C51126 * C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51026) *
                C51126 * C50978) *
               C51247 -
           (((C2495 + C2496 + C2497) * C51026 +
             (C2498 + C2499 + C2500) * C118) *
                C51126 * C50978 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C51126 * C2447) *
               C50997) *
              C1013 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51126 * C50978) *
               C50997 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51126 * C50978 +
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51026 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C118) *
                C51126 * C2447) *
               C51247) *
              C1014 +
          ((((C2449 * C1016 + C2444 * C1021 + C2450 * C1158 + C2445 * C1162 +
              C2451 * C3460 + C2446 * C3463) *
                 C118 +
             (C2449 * C1022 + C2444 * C1031 + C2450 * C1163 + C2445 * C1170 +
              C2451 * C3464 + C2446 * C3469) *
                 C51026) *
                C51126 * C2447 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51126 * C50978) *
               C51247 -
           (((C2451 * C3467 + C2446 * C3471 + C2450 * C1167 + C2445 * C1172 +
              C2449 * C1026 + C2444 * C1033) *
                 C51026 +
             (C2451 * C3462 + C2446 * C3468 + C2450 * C1160 + C2445 * C1166 +
              C2449 * C1018 + C2444 * C1025) *
                 C118) *
                C51126 * C50978 +
            ((C3490 + C3489 + C3488) * C51026 +
             (C3487 + C3486 + C3485) * C118) *
                C51126 * C2447) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C51110 * C126) * C765 +
           (C117 * C127 + C51110 * C140) * C760 -
           (C117 * C300 + C51110 * C306) * C766 -
           (C117 * C307 + C51110 * C318) * C761 +
           (C117 * C638 + C51110 * C643) * C767 +
           (C117 * C644 + C51110 * C653) * C762 -
           (C117 * C769 + C51110 * C773) * C768 -
           (C117 * C774 + C51110 * C781) * C763) *
              C51126 * C108 +
          (C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 + C683 * C767 +
           C684 * C762 - (C117 * C770 + C51110 * C775) * C768 -
           (C117 * C776 + C51110 * C782) * C763) *
              C51126 * C109 +
          (C170 * C765 + C171 * C760 - C352 * C766 - C353 * C761 + C685 * C767 +
           C686 * C762 - (C117 * C771 + C51110 * C777) * C768 -
           (C117 * C778 + C51110 * C783) * C763) *
              C51126 * C110 +
          (C172 * C765 + C173 * C760 - C355 * C766 - C356 * C761 + C687 * C767 +
           C688 * C762 - (C117 * C772 + C51110 * C779) * C768 -
           (C117 * C780 + C51110 * C784) * C763) *
              C51126 * C111) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C298 +
            (C117 * C127 + C51110 * C140) * C51254 -
            (C117 * C300 + C51110 * C306) * C299 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C51126 * C108 +
           (C325 + C326 - C359 - C360) * C51126 * C109 + C371 * C110 +
           C372 * C111) *
              C295 +
          ((C359 - (C326 + C325) + C360) * C51126 * C108 +
           (C361 - (C332 + C331) + C362) * C51126 * C109 +
           (C363 - (C338 + C337) + C364) * C51126 * C110 +
           (C365 - (C345 + C346) + C366) * C51126 * C111) *
              C296 +
          (C371 * C108 + C372 * C109 +
           (C346 + C345 - C365 - C366) * C51126 * C110 +
           (C176 * C298 + C177 * C51254 - (C117 * C305 + C51110 * C316) * C299 -
            (C117 * C317 + C51110 * C323) * C51042) *
               C51126 * C111) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C298 +
            (C117 * C127 + C51110 * C140) * C51254 -
            (C117 * C300 + C51110 * C306) * C299 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C51126 * C108 +
           (C325 + C326 - C359 - C360) * C51126 * C109 + C371 * C110 +
           C372 * C111) *
              C50992 * C1013 +
          (((C117 * C883 + C51110 * C891) * C299 -
            ((C117 * C486 + C51110 * C494) * C51254 +
             (C117 * C476 + C51110 * C487) * C298) +
            (C117 * C892 + C51110 * C907) * C51042) *
               C51126 * C108 +
           ((C117 * C885 + C51110 * C895) * C299 -
            (C514 * C51254 + C513 * C298) +
            (C117 * C896 + C51110 * C909) * C51042) *
               C51126 * C109 +
           ((C117 * C887 + C51110 * C899) * C299 -
            (C516 * C51254 + C515 * C298) +
            (C117 * C900 + C51110 * C911) * C51042) *
               C51126 * C110 +
           ((C117 * C889 + C51110 * C903) * C299 -
            (C518 * C51254 + C517 * C298) +
            (C117 * C904 + C51110 * C913) * C51042) *
               C51126 * C111) *
              C50992 * C1014 +
          (((C117 * C1016 + C51110 * C1021) * C298 +
            (C117 * C1022 + C51110 * C1031) * C51254 -
            (C117 * C1158 + C51110 * C1162) * C299 -
            (C117 * C1163 + C51110 * C1170) * C51042) *
               C51126 * C108 +
           (C1049 * C298 + C1050 * C51254 -
            (C117 * C1159 + C51110 * C1164) * C299 -
            (C117 * C1165 + C51110 * C1171) * C51042) *
               C51126 * C109 +
           (C1051 * C298 + C1052 * C51254 -
            (C117 * C1160 + C51110 * C1166) * C299 -
            (C117 * C1167 + C51110 * C1172) * C51042) *
               C51126 * C110 +
           (C1053 * C298 + C1054 * C51254 -
            (C117 * C1161 + C51110 * C1168) * C299 -
            (C117 * C1169 + C51110 * C1173) * C51042) *
               C51126 * C111) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51254 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C299 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C51254 -
            (C2677 + C2678 + C2679) * C299 - (C2680 + C2681 + C2682) * C51042) *
               C51126 * C50978) *
              C295 +
          (((C2679 + C2678 + C2677) * C299 -
            ((C2494 + C2493 + C2492) * C51254 +
             (C2491 + C2490 + C2489) * C298) +
            (C2682 + C2681 + C2680) * C51042) *
               C51126 * C2447 +
           ((C2683 + C2684 + C2685) * C299 -
            ((C2495 + C2496 + C2497) * C51254 +
             (C2498 + C2499 + C2500) * C298) +
            (C2686 + C2687 + C2688) * C51042) *
               C51126 * C50978) *
              C296 +
          (((C2500 + C2499 + C2498) * C298 + (C2497 + C2496 + C2495) * C51254 -
            (C2685 + C2684 + C2683) * C299 - (C2688 + C2687 + C2686) * C51042) *
               C51126 * C2447 +
           ((C2501 + C2502 + C2503) * C298 + (C2504 + C2505 + C2506) * C51254 -
            (C2451 * C772 + C2446 * C779 + C2450 * C641 + C2445 * C649 +
             C2449 * C303 + C2444 * C312) *
                C299 -
            (C2451 * C780 + C2446 * C784 + C2450 * C650 + C2445 * C656 +
             C2449 * C313 + C2444 * C321) *
                C51042) *
               C51126 * C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
            C2451 * C638 + C2446 * C643) *
               C765 +
           (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
            C2451 * C644 + C2446 * C653) *
               C760 -
           (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
            C2449 * C300 + C2444 * C306) *
               C766 -
           (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
            C2449 * C307 + C2444 * C318) *
               C761 +
           (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
            C2451 * C3016 + C2446 * C3019) *
               C767 +
           (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
            C2451 * C3020 + C2446 * C3025) *
               C762 -
           (C2451 * C3144 + C2446 * C3146 + C2450 * C3016 + C2445 * C3019 +
            C2449 * C769 + C2444 * C773) *
               C768 -
           (C2451 * C3147 + C2446 * C3150 + C2450 * C3020 + C2445 * C3025 +
            C2449 * C774 + C2444 * C781) *
               C763) *
              C51126 * C2447 +
          ((C2489 + C2490 + C2491) * C765 + (C2492 + C2493 + C2494) * C760 -
           (C2677 + C2678 + C2679) * C766 - (C2680 + C2681 + C2682) * C761 +
           (C3041 + C3042 + C3043) * C767 + (C3044 + C3045 + C3046) * C762 -
           (C2451 * C3145 + C2446 * C3148 + C2450 * C3017 + C2445 * C3021 +
            C2449 * C770 + C2444 * C775) *
               C768 -
           (C2451 * C3149 + C2446 * C3151 + C2450 * C3022 + C2445 * C3026 +
            C2449 * C776 + C2444 * C782) *
               C763) *
              C51126 * C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51254 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C299 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C51254 -
            (C2677 + C2678 + C2679) * C299 - (C2680 + C2681 + C2682) * C51042) *
               C51126 * C50978) *
              C50992 * C1013 +
          (((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
             C2451 * C3298 + C2446 * C3302) *
                C299 -
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51254 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C298) +
            (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
             C2451 * C3303 + C2446 * C3310) *
                C51042) *
               C51126 * C2447 +
           ((C2449 * C885 + C2444 * C895 + C2450 * C886 + C2445 * C897 +
             C2451 * C3300 + C2446 * C3306) *
                C299 -
            ((C2864 + C2863 + C2862) * C51254 +
             (C2861 + C2860 + C2859) * C298) +
            (C2449 * C896 + C2444 * C909 + C2450 * C898 + C2445 * C910 +
             C2451 * C3307 + C2446 * C3312) *
                C51042) *
               C51126 * C50978) *
              C50992 * C1014 +
          (((C2449 * C1016 + C2444 * C1021 + C2450 * C1158 + C2445 * C1162 +
             C2451 * C3460 + C2446 * C3463) *
                C298 +
            (C2449 * C1022 + C2444 * C1031 + C2450 * C1163 + C2445 * C1170 +
             C2451 * C3464 + C2446 * C3469) *
                C51254 -
            (C2451 * C3636 + C2446 * C3638 + C2450 * C3460 + C2445 * C3463 +
             C2449 * C1158 + C2444 * C1162) *
                C299 -
            (C2451 * C3639 + C2446 * C3642 + C2450 * C3464 + C2445 * C3469 +
             C2449 * C1163 + C2444 * C1170) *
                C51042) *
               C51126 * C2447 +
           ((C3485 + C3486 + C3487) * C298 + (C3488 + C3489 + C3490) * C51254 -
            (C2451 * C3637 + C2446 * C3640 + C2450 * C3461 + C2445 * C3465 +
             C2449 * C1159 + C2444 * C1164) *
                C299 -
            (C2451 * C3641 + C2446 * C3643 + C2450 * C3466 + C2445 * C3470 +
             C2449 * C1165 + C2444 * C1171) *
                C51042) *
               C51126 * C50978) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C635 +
            (C117 * C127 + C51110 * C140) * C630 -
            (C117 * C300 + C51110 * C306) * C636 -
            (C117 * C307 + C51110 * C318) * C631 +
            (C117 * C638 + C51110 * C643) * C637 +
            (C117 * C644 + C51110 * C653) * C632) *
               C51126 * C108 +
           (C659 + C660 - C661 - C662 + C689 + C690) * C51126 * C109 +
           (C667 + C668 - C669 - C670 + C691 + C692) * C51126 * C110 +
           (C675 + C676 - C677 - C678 + C693 + C694) * C51126 * C111) *
              C50992 * C51256 +
          (((C117 * C883 + C51110 * C891) * C636 -
            ((C117 * C486 + C51110 * C494) * C630 +
             (C117 * C476 + C51110 * C487) * C635) +
            (C117 * C892 + C51110 * C907) * C631 -
            (C117 * C884 + C51110 * C893) * C637 -
            (C117 * C894 + C51110 * C908) * C632) *
               C51126 * C108 +
           ((C117 * C885 + C51110 * C895) * C636 - (C514 * C630 + C513 * C635) +
            (C117 * C896 + C51110 * C909) * C631 -
            (C117 * C886 + C51110 * C897) * C637 -
            (C117 * C898 + C51110 * C910) * C632) *
               C51126 * C109 +
           ((C117 * C887 + C51110 * C899) * C636 - (C516 * C630 + C515 * C635) +
            (C117 * C900 + C51110 * C911) * C631 -
            (C117 * C888 + C51110 * C901) * C637 -
            (C117 * C902 + C51110 * C912) * C632) *
               C51126 * C110 +
           ((C117 * C889 + C51110 * C903) * C636 - (C518 * C630 + C517 * C635) +
            (C117 * C904 + C51110 * C913) * C631 -
            (C117 * C890 + C51110 * C905) * C637 -
            (C117 * C906 + C51110 * C914) * C632) *
               C51126 * C111) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51126 * C108 +
            (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
               C295 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
            (C179 + C178) * C51126 * C108) *
               C296 +
           (C192 * C108 + C193 * C109 + (C185 + C184) * C51126 * C110 +
            (C186 + C187) * C51126 * C111) *
               C297) *
              C51256 +
          (((C521 + C522) * C51126 * C108 + (C523 + C524) * C51126 * C109 +
            (C525 + C526) * C51126 * C110 + (C527 + C528) * C51126 * C111) *
               C296 -
           (C531 * C111 + C532 * C110 + (C522 + C521) * C51126 * C109 +
            ((C117 * C486 + C51110 * C494) * C51026 +
             (C117 * C476 + C51110 * C487) * C118) *
                C51126 * C108) *
               C295 -
           (((C117 * C488 + C51110 * C495) * C51026 +
             (C117 * C477 + C51110 * C489) * C118) *
                C51126 * C111 +
            (C528 + C527) * C51126 * C110 + C531 * C109 + C532 * C108) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C118 +
            (C117 * C127 + C51110 * C140) * C51026) *
               C51126 * C108 +
           (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
              C50992 * C1240 -
          (C531 * C111 + C532 * C110 + (C522 + C521) * C51126 * C109 +
           ((C117 * C486 + C51110 * C494) * C51026 +
            (C117 * C476 + C51110 * C487) * C118) *
               C51126 * C108) *
              C50992 * C1241 +
          (((C117 * C1016 + C51110 * C1021) * C118 +
            (C117 * C1022 + C51110 * C1031) * C51026) *
               C51126 * C108 +
           (C1055 + C1056) * C51126 * C109 + (C1057 + C1058) * C51126 * C110 +
           (C1059 + C1060) * C51126 * C111) *
              C50992 * C1242 -
          (((C117 * C1248 + C51110 * C1256) * C51026 +
            (C117 * C1244 + C51110 * C1249) * C118) *
               C51126 * C111 +
           ((C117 * C1250 + C51110 * C1257) * C51026 +
            (C117 * C1245 + C51110 * C1251) * C118) *
               C51126 * C110 +
           ((C117 * C1252 + C51110 * C1258) * C51026 +
            (C117 * C1246 + C51110 * C1253) * C118) *
               C51126 * C109 +
           ((C117 * C1254 + C51110 * C1259) * C51026 +
            (C117 * C1247 + C51110 * C1255) * C118) *
               C51126 * C108) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51026) *
                C51126 * C50978) *
               C295 -
           (((C2495 + C2496 + C2497) * C51026 +
             (C2498 + C2499 + C2500) * C118) *
                C51126 * C50978 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C51126 * C2447) *
               C296 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51026) *
                C51126 * C2447 +
            ((C2501 + C2502 + C2503) * C118 +
             (C2504 + C2505 + C2506) * C51026) *
                C51126 * C50978) *
               C297) *
              C51256 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51126 * C50978) *
               C296 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51126 * C50978 +
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51026 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C118) *
                C51126 * C2447) *
               C295 -
           (((C2451 * C906 + C2446 * C914 + C2450 * C904 + C2445 * C913 +
              C2449 * C483 + C2444 * C492) *
                 C51026 +
             (C2451 * C890 + C2446 * C905 + C2450 * C889 + C2445 * C903 +
              C2449 * C474 + C2444 * C482) *
                 C118) *
                C51126 * C50978 +
            ((C2870 + C2869 + C2868) * C51026 +
             (C2867 + C2866 + C2865) * C118) *
                C51126 * C2447) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C635 + (C2492 + C2493 + C2494) * C630 -
            (C2677 + C2678 + C2679) * C636 - (C2680 + C2681 + C2682) * C631 +
            (C3041 + C3042 + C3043) * C637 + (C3044 + C3045 + C3046) * C632) *
               C51126 * C50978) *
              C50992 * C51256 +
          (((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
             C2451 * C3298 + C2446 * C3302) *
                C636 -
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C630 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C635) +
            (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
             C2451 * C3303 + C2446 * C3310) *
                C631 -
            (C2451 * C3299 + C2446 * C3304 + C2450 * C3298 + C2445 * C3302 +
             C2449 * C884 + C2444 * C893) *
                C637 -
            (C2451 * C3305 + C2446 * C3311 + C2450 * C3303 + C2445 * C3310 +
             C2449 * C894 + C2444 * C908) *
                C632) *
               C51126 * C2447 +
           ((C2449 * C885 + C2444 * C895 + C2450 * C886 + C2445 * C897 +
             C2451 * C3300 + C2446 * C3306) *
                C636 -
            ((C2864 + C2863 + C2862) * C630 + (C2861 + C2860 + C2859) * C635) +
            (C2449 * C896 + C2444 * C909 + C2450 * C898 + C2445 * C910 +
             C2451 * C3307 + C2446 * C3312) *
                C631 -
            (C2451 * C3301 + C2446 * C3308 + C2450 * C3300 + C2445 * C3306 +
             C2449 * C886 + C2444 * C897) *
                C637 -
            (C2451 * C3309 + C2446 * C3313 + C2450 * C3307 + C2445 * C3312 +
             C2449 * C898 + C2444 * C910) *
                C632) *
               C51126 * C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51026) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C118 + (C2492 + C2493 + C2494) * C51026) *
               C51126 * C50978) *
              C50992 * C1240 -
          (((C2864 + C2863 + C2862) * C51026 + (C2861 + C2860 + C2859) * C118) *
               C51126 * C50978 +
           ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
             C2449 * C486 + C2444 * C494) *
                C51026 +
            (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
             C2449 * C476 + C2444 * C487) *
                C118) *
               C51126 * C2447) *
              C50992 * C1241 +
          (((C2449 * C1016 + C2444 * C1021 + C2450 * C1158 + C2445 * C1162 +
             C2451 * C3460 + C2446 * C3463) *
                C118 +
            (C2449 * C1022 + C2444 * C1031 + C2450 * C1163 + C2445 * C1170 +
             C2451 * C3464 + C2446 * C3469) *
                C51026) *
               C51126 * C2447 +
           ((C3485 + C3486 + C3487) * C118 + (C3488 + C3489 + C3490) * C51026) *
               C51126 * C50978) *
              C50992 * C1242 -
          (((C2451 * C3746 + C2446 * C3754 + C2450 * C3747 + C2445 * C3755 +
             C2449 * C1252 + C2444 * C1258) *
                C51026 +
            (C2451 * C3742 + C2446 * C3748 + C2450 * C3743 + C2445 * C3749 +
             C2449 * C1246 + C2444 * C1253) *
                C118) *
               C51126 * C50978 +
           ((C2451 * C3750 + C2446 * C3756 + C2450 * C3751 + C2445 * C3757 +
             C2449 * C1254 + C2444 * C1259) *
                C51026 +
            (C2451 * C3744 + C2446 * C3752 + C2450 * C3745 + C2445 * C3753 +
             C2449 * C1247 + C2444 * C1255) *
                C118) *
               C51126 * C2447) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51126 * C108 +
            (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
               C51300 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
            (C179 + C178) * C51126 * C108) *
               C51285 +
           (C192 * C108 + C193 * C109 + (C185 + C184) * C51126 * C110 +
            (C186 + C187) * C51126 * C111) *
               C1362) *
              C1775 +
          (((C521 + C522) * C51126 * C108 + (C523 + C524) * C51126 * C109 +
            (C525 + C526) * C51126 * C110 + (C527 + C528) * C51126 * C111) *
               C51285 -
           (C531 * C111 + C532 * C110 + (C522 + C521) * C51126 * C109 +
            ((C117 * C486 + C51110 * C494) * C51026 +
             (C117 * C476 + C51110 * C487) * C118) *
                C51126 * C108) *
               C51300 -
           (((C117 * C488 + C51110 * C495) * C51026 +
             (C117 * C477 + C51110 * C489) * C118) *
                C51126 * C111 +
            (C528 + C527) * C51126 * C110 + C531 * C109 + C532 * C108) *
               C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51026) *
                C51126 * C50978) *
               C51300 -
           (((C2495 + C2496 + C2497) * C51026 +
             (C2498 + C2499 + C2500) * C118) *
                C51126 * C50978 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C51126 * C2447) *
               C51285 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51026) *
                C51126 * C2447 +
            ((C2501 + C2502 + C2503) * C118 +
             (C2504 + C2505 + C2506) * C51026) *
                C51126 * C50978) *
               C1362) *
              C1775 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51126 * C50978) *
               C51285 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51126 * C50978 +
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51026 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C118) *
                C51126 * C2447) *
               C51300 -
           (((C2451 * C906 + C2446 * C914 + C2450 * C904 + C2445 * C913 +
              C2449 * C483 + C2444 * C492) *
                 C51026 +
             (C2451 * C890 + C2446 * C905 + C2450 * C889 + C2445 * C903 +
              C2449 * C474 + C2444 * C482) *
                 C118) *
                C51126 * C50978 +
            ((C2870 + C2869 + C2868) * C51026 +
             (C2867 + C2866 + C2865) * C118) *
                C51126 * C2447) *
               C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51126 * C108 +
            (C325 + C326 - C359 - C360) * C51126 * C109 + C371 * C110 +
            C372 * C111) *
               C1490 +
           ((C359 - (C326 + C325) + C360) * C51126 * C108 +
            (C361 - (C332 + C331) + C362) * C51126 * C109 +
            (C363 - (C338 + C337) + C364) * C51126 * C110 +
            (C365 - (C345 + C346) + C366) * C51126 * C111) *
               C50997) *
              C1775 +
          ((((C117 * C883 + C51110 * C891) * C299 -
             ((C117 * C486 + C51110 * C494) * C51254 +
              (C117 * C476 + C51110 * C487) * C298) +
             (C117 * C892 + C51110 * C907) * C51042) *
                C51126 * C108 +
            (C1908 - (C1909 + C1910) + C1911) * C51126 * C109 +
            (C1912 - (C1913 + C1914) + C1915) * C51126 * C110 +
            (C1916 - (C1917 + C1918) + C1919) * C51126 * C111) *
               C1490 +
           ((C1910 + C1909 - C1908 - C1911) * C51126 * C108 +
            (C1914 + C1913 - C1912 - C1915) * C51126 * C109 +
            (C1918 + C1917 - C1916 - C1919) * C51126 * C110 +
            (C519 * C298 + C520 * C51254 -
             (C117 * C1643 + C51110 * C1644) * C299 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51126 * C111) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C298 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51254 -
             (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
              C2449 * C300 + C2444 * C306) *
                 C299 -
             (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
              C2449 * C307 + C2444 * C318) *
                 C51042) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C51254 -
             (C2677 + C2678 + C2679) * C299 -
             (C2680 + C2681 + C2682) * C51042) *
                C51126 * C50978) *
               C1490 +
           (((C2679 + C2678 + C2677) * C299 -
             ((C2494 + C2493 + C2492) * C51254 +
              (C2491 + C2490 + C2489) * C298) +
             (C2682 + C2681 + C2680) * C51042) *
                C51126 * C2447 +
            ((C2683 + C2684 + C2685) * C299 -
             ((C2495 + C2496 + C2497) * C51254 +
              (C2498 + C2499 + C2500) * C298) +
             (C2686 + C2687 + C2688) * C51042) *
                C51126 * C50978) *
               C50997) *
              C1775 +
          ((((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
              C2451 * C3298 + C2446 * C3302) *
                 C299 -
             ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
               C2449 * C486 + C2444 * C494) *
                  C51254 +
              (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
               C2449 * C476 + C2444 * C487) *
                  C298) +
             (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
              C2451 * C3303 + C2446 * C3310) *
                 C51042) *
                C51126 * C2447 +
            ((C4261 + C4262 + C4263) * C299 -
             ((C2864 + C2863 + C2862) * C51254 +
              (C2861 + C2860 + C2859) * C298) +
             (C4264 + C4265 + C4266) * C51042) *
                C51126 * C50978) *
               C1490 +
           (((C2859 + C2860 + C2861) * C298 + (C2862 + C2863 + C2864) * C51254 -
             (C4263 + C4262 + C4261) * C299 -
             (C4266 + C4265 + C4264) * C51042) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C298 + (C2868 + C2869 + C2870) * C51254 -
             (C2451 * C4244 + C2446 * C4245 + C2450 * C888 + C2445 * C901 +
              C2449 * C887 + C2444 * C899) *
                 C299 -
             (C2451 * C4246 + C2446 * C4247 + C2450 * C902 + C2445 * C912 +
              C2449 * C900 + C2444 * C911) *
                 C51042) *
                C51126 * C50978) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51126 * C108 +
            (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
               C1490 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
            (C179 + C178) * C51126 * C108) *
               C50997) *
              C51302 +
          (((C521 + C522) * C51126 * C108 + (C523 + C524) * C51126 * C109 +
            (C525 + C526) * C51126 * C110 + (C527 + C528) * C51126 * C111) *
               C50997 -
           (C531 * C111 + C532 * C110 + (C522 + C521) * C51126 * C109 +
            ((C117 * C486 + C51110 * C494) * C51026 +
             (C117 * C476 + C51110 * C487) * C118) *
                C51126 * C108) *
               C1490) *
              C51291 +
          ((((C117 * C1016 + C51110 * C1021) * C118 +
             (C117 * C1022 + C51110 * C1031) * C51026) *
                C51126 * C108 +
            (C1055 + C1056) * C51126 * C109 + (C1057 + C1058) * C51126 * C110 +
            (C1059 + C1060) * C51126 * C111) *
               C1490 -
           (((C117 * C1029 + C51110 * C1035) * C51026 +
             (C117 * C1020 + C51110 * C1030) * C118) *
                C51126 * C111 +
            (C1060 + C1059) * C51126 * C110 + (C1058 + C1057) * C51126 * C109 +
            (C1056 + C1055) * C51126 * C108) *
               C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51026) *
                C51126 * C50978) *
               C1490 -
           (((C2495 + C2496 + C2497) * C51026 +
             (C2498 + C2499 + C2500) * C118) *
                C51126 * C50978 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C51126 * C2447) *
               C50997) *
              C51302 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51126 * C50978) *
               C50997 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51126 * C50978 +
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51026 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C118) *
                C51126 * C2447) *
               C1490) *
              C51291 +
          ((((C2449 * C1016 + C2444 * C1021 + C2450 * C1158 + C2445 * C1162 +
              C2451 * C3460 + C2446 * C3463) *
                 C118 +
             (C2449 * C1022 + C2444 * C1031 + C2450 * C1163 + C2445 * C1170 +
              C2451 * C3464 + C2446 * C3469) *
                 C51026) *
                C51126 * C2447 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51126 * C50978) *
               C1490 -
           (((C2451 * C3467 + C2446 * C3471 + C2450 * C1167 + C2445 * C1172 +
              C2449 * C1026 + C2444 * C1033) *
                 C51026 +
             (C2451 * C3462 + C2446 * C3468 + C2450 * C1160 + C2445 * C1166 +
              C2449 * C1018 + C2444 * C1025) *
                 C118) *
                C51126 * C50978 +
            ((C3490 + C3489 + C3488) * C51026 +
             (C3487 + C3486 + C3485) * C118) *
                C51126 * C2447) *
               C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C118 +
            (C117 * C127 + C51110 * C140) * C51026) *
               C51126 * C108 +
           (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
              C112 -
          (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
           (C179 + C178) * C51126 * C108) *
              C113 +
          (C192 * C108 + C193 * C109 + (C185 + C184) * C51126 * C110 +
           (C186 + C187) * C51126 * C111) *
              C114 -
          (((C117 * C138 + C51110 * C146) * C51026 +
            (C117 * C125 + C51110 * C139) * C118) *
               C51126 * C111 +
           (C187 + C186) * C51126 * C110 + C194 * C109 + C195 * C108) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C635 +
            (C117 * C127 + C51110 * C140) * C630 -
            (C117 * C300 + C51110 * C306) * C636 -
            (C117 * C307 + C51110 * C318) * C631 +
            (C117 * C638 + C51110 * C643) * C637 +
            (C117 * C644 + C51110 * C653) * C632) *
               C51126 * C108 +
           (C659 + C660 - C661 - C662 + C689 + C690) * C51126 * C109 +
           (C667 + C668 - C669 - C670 + C691 + C692) * C51126 * C110 +
           (C675 + C676 - C677 - C678 + C693 + C694) * C51126 * C111) *
              C51247 +
          ((C661 - (C660 + C659) + C662 - C689 - C690) * C51126 * C108 +
           (C669 - (C668 + C667) + C670 - C691 - C692) * C51126 * C109 +
           (C677 - (C676 + C675) + C678 - C693 - C694) * C51126 * C110 +
           (C357 * C636 - (C174 * C630 + C175 * C635) + C358 * C631 -
            (C117 * C642 + C51110 * C651) * C637 -
            (C117 * C652 + C51110 * C657) * C632) *
               C51126 * C111) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51026) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C118 + (C2492 + C2493 + C2494) * C51026) *
               C51126 * C50978) *
              C112 -
          (((C2495 + C2496 + C2497) * C51026 + (C2498 + C2499 + C2500) * C118) *
               C51126 * C50978 +
           ((C2494 + C2493 + C2492) * C51026 + (C2491 + C2490 + C2489) * C118) *
               C51126 * C2447) *
              C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51026) *
               C51126 * C2447 +
           ((C2501 + C2502 + C2503) * C118 + (C2504 + C2505 + C2506) * C51026) *
               C51126 * C50978) *
              C114 -
          (((C2451 * C652 + C2446 * C657 + C2450 * C315 + C2445 * C322 +
             C2449 * C134 + C2444 * C144) *
                C51026 +
            (C2451 * C642 + C2446 * C651 + C2450 * C304 + C2445 * C314 +
             C2449 * C123 + C2444 * C135) *
                C118) *
               C51126 * C50978 +
           ((C2506 + C2505 + C2504) * C51026 + (C2503 + C2502 + C2501) * C118) *
               C51126 * C2447) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C635 + (C2492 + C2493 + C2494) * C630 -
            (C2677 + C2678 + C2679) * C636 - (C2680 + C2681 + C2682) * C631 +
            (C3041 + C3042 + C3043) * C637 + (C3044 + C3045 + C3046) * C632) *
               C51126 * C50978) *
              C51247 +
          (((C2679 + C2678 + C2677) * C636 -
            ((C2494 + C2493 + C2492) * C630 + (C2491 + C2490 + C2489) * C635) +
            (C2682 + C2681 + C2680) * C631 - (C3043 + C3042 + C3041) * C637 -
            (C3046 + C3045 + C3044) * C632) *
               C51126 * C2447 +
           ((C2683 + C2684 + C2685) * C636 -
            ((C2495 + C2496 + C2497) * C630 + (C2498 + C2499 + C2500) * C635) +
            (C2686 + C2687 + C2688) * C631 -
            (C2451 * C3018 + C2446 * C3023 + C2450 * C771 + C2445 * C777 +
             C2449 * C640 + C2444 * C647) *
                C637 -
            (C2451 * C3024 + C2446 * C3027 + C2450 * C778 + C2445 * C783 +
             C2449 * C648 + C2444 * C655) *
                C632) *
               C51126 * C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C298 +
            (C117 * C127 + C51110 * C140) * C51254 -
            (C117 * C300 + C51110 * C306) * C299 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C51126 * C108 +
           (C325 + C326 - C359 - C360) * C51126 * C109 + C371 * C110 +
           C372 * C111) *
              C295 +
          ((C359 - (C326 + C325) + C360) * C51126 * C108 +
           (C361 - (C332 + C331) + C362) * C51126 * C109 +
           (C363 - (C338 + C337) + C364) * C51126 * C110 +
           (C365 - (C345 + C346) + C366) * C51126 * C111) *
              C296 +
          (C371 * C108 + C372 * C109 +
           (C346 + C345 - C365 - C366) * C51126 * C110 +
           (C176 * C298 + C177 * C51254 - (C117 * C305 + C51110 * C316) * C299 -
            (C117 * C317 + C51110 * C323) * C51042) *
               C51126 * C111) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C51110 * C126) * C765 +
           (C117 * C127 + C51110 * C140) * C760 -
           (C117 * C300 + C51110 * C306) * C766 -
           (C117 * C307 + C51110 * C318) * C761 +
           (C117 * C638 + C51110 * C643) * C767 +
           (C117 * C644 + C51110 * C653) * C762 -
           (C117 * C769 + C51110 * C773) * C768 -
           (C117 * C774 + C51110 * C781) * C763) *
              C51126 * C108 +
          (C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 + C683 * C767 +
           C684 * C762 - (C117 * C770 + C51110 * C775) * C768 -
           (C117 * C776 + C51110 * C782) * C763) *
              C51126 * C109 +
          (C170 * C765 + C171 * C760 - C352 * C766 - C353 * C761 + C685 * C767 +
           C686 * C762 - (C117 * C771 + C51110 * C777) * C768 -
           (C117 * C778 + C51110 * C783) * C763) *
              C51126 * C110 +
          (C172 * C765 + C173 * C760 - C355 * C766 - C356 * C761 + C687 * C767 +
           C688 * C762 - (C117 * C772 + C51110 * C779) * C768 -
           (C117 * C780 + C51110 * C784) * C763) *
              C51126 * C111) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51254 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C299 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C51254 -
            (C2677 + C2678 + C2679) * C299 - (C2680 + C2681 + C2682) * C51042) *
               C51126 * C50978) *
              C295 +
          (((C2679 + C2678 + C2677) * C299 -
            ((C2494 + C2493 + C2492) * C51254 +
             (C2491 + C2490 + C2489) * C298) +
            (C2682 + C2681 + C2680) * C51042) *
               C51126 * C2447 +
           ((C2683 + C2684 + C2685) * C299 -
            ((C2495 + C2496 + C2497) * C51254 +
             (C2498 + C2499 + C2500) * C298) +
            (C2686 + C2687 + C2688) * C51042) *
               C51126 * C50978) *
              C296 +
          (((C2500 + C2499 + C2498) * C298 + (C2497 + C2496 + C2495) * C51254 -
            (C2685 + C2684 + C2683) * C299 - (C2688 + C2687 + C2686) * C51042) *
               C51126 * C2447 +
           ((C2501 + C2502 + C2503) * C298 + (C2504 + C2505 + C2506) * C51254 -
            (C2451 * C772 + C2446 * C779 + C2450 * C641 + C2445 * C649 +
             C2449 * C303 + C2444 * C312) *
                C299 -
            (C2451 * C780 + C2446 * C784 + C2450 * C650 + C2445 * C656 +
             C2449 * C313 + C2444 * C321) *
                C51042) *
               C51126 * C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
            C2451 * C638 + C2446 * C643) *
               C765 +
           (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
            C2451 * C644 + C2446 * C653) *
               C760 -
           (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
            C2449 * C300 + C2444 * C306) *
               C766 -
           (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
            C2449 * C307 + C2444 * C318) *
               C761 +
           (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
            C2451 * C3016 + C2446 * C3019) *
               C767 +
           (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
            C2451 * C3020 + C2446 * C3025) *
               C762 -
           (C2451 * C3144 + C2446 * C3146 + C2450 * C3016 + C2445 * C3019 +
            C2449 * C769 + C2444 * C773) *
               C768 -
           (C2451 * C3147 + C2446 * C3150 + C2450 * C3020 + C2445 * C3025 +
            C2449 * C774 + C2444 * C781) *
               C763) *
              C51126 * C2447 +
          ((C2489 + C2490 + C2491) * C765 + (C2492 + C2493 + C2494) * C760 -
           (C2677 + C2678 + C2679) * C766 - (C2680 + C2681 + C2682) * C761 +
           (C3041 + C3042 + C3043) * C767 + (C3044 + C3045 + C3046) * C762 -
           (C2451 * C3145 + C2446 * C3148 + C2450 * C3017 + C2445 * C3021 +
            C2449 * C770 + C2444 * C775) *
               C768 -
           (C2451 * C3149 + C2446 * C3151 + C2450 * C3022 + C2445 * C3026 +
            C2449 * C776 + C2444 * C782) *
               C763) *
              C51126 * C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51126 * C108 +
            (C178 + C179) * C51126 * C109 + C192 * C110 + C193 * C111) *
               C295 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51126 * C109 +
            (C179 + C178) * C51126 * C108) *
               C296 +
           (C192 * C108 + C193 * C109 + (C185 + C184) * C51126 * C110 +
            (C186 + C187) * C51126 * C111) *
               C297) *
              C51256 +
          (((C521 + C522) * C51126 * C108 + (C523 + C524) * C51126 * C109 +
            (C525 + C526) * C51126 * C110 + (C527 + C528) * C51126 * C111) *
               C296 -
           (C531 * C111 + C532 * C110 + (C522 + C521) * C51126 * C109 +
            ((C117 * C486 + C51110 * C494) * C51026 +
             (C117 * C476 + C51110 * C487) * C118) *
                C51126 * C108) *
               C295 -
           (((C117 * C488 + C51110 * C495) * C51026 +
             (C117 * C477 + C51110 * C489) * C118) *
                C51126 * C111 +
            (C528 + C527) * C51126 * C110 + C531 * C109 + C532 * C108) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C635 +
            (C117 * C127 + C51110 * C140) * C630 -
            (C117 * C300 + C51110 * C306) * C636 -
            (C117 * C307 + C51110 * C318) * C631 +
            (C117 * C638 + C51110 * C643) * C637 +
            (C117 * C644 + C51110 * C653) * C632) *
               C51126 * C108 +
           (C659 + C660 - C661 - C662 + C689 + C690) * C51126 * C109 +
           (C667 + C668 - C669 - C670 + C691 + C692) * C51126 * C110 +
           (C675 + C676 - C677 - C678 + C693 + C694) * C51126 * C111) *
              C50992 * C51256 +
          (((C117 * C883 + C51110 * C891) * C636 -
            ((C117 * C486 + C51110 * C494) * C630 +
             (C117 * C476 + C51110 * C487) * C635) +
            (C117 * C892 + C51110 * C907) * C631 -
            (C117 * C884 + C51110 * C893) * C637 -
            (C117 * C894 + C51110 * C908) * C632) *
               C51126 * C108 +
           ((C117 * C885 + C51110 * C895) * C636 - (C514 * C630 + C513 * C635) +
            (C117 * C896 + C51110 * C909) * C631 -
            (C117 * C886 + C51110 * C897) * C637 -
            (C117 * C898 + C51110 * C910) * C632) *
               C51126 * C109 +
           ((C117 * C887 + C51110 * C899) * C636 - (C516 * C630 + C515 * C635) +
            (C117 * C900 + C51110 * C911) * C631 -
            (C117 * C888 + C51110 * C901) * C637 -
            (C117 * C902 + C51110 * C912) * C632) *
               C51126 * C110 +
           ((C117 * C889 + C51110 * C903) * C636 - (C518 * C630 + C517 * C635) +
            (C117 * C904 + C51110 * C913) * C631 -
            (C117 * C890 + C51110 * C905) * C637 -
            (C117 * C906 + C51110 * C914) * C632) *
               C51126 * C111) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C51126 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51026) *
                C51126 * C50978) *
               C295 -
           (((C2495 + C2496 + C2497) * C51026 +
             (C2498 + C2499 + C2500) * C118) *
                C51126 * C50978 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C51126 * C2447) *
               C296 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51026) *
                C51126 * C2447 +
            ((C2501 + C2502 + C2503) * C118 +
             (C2504 + C2505 + C2506) * C51026) *
                C51126 * C50978) *
               C297) *
              C51256 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C51126 * C2447 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51126 * C50978) *
               C296 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51126 * C50978 +
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C51026 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C118) *
                C51126 * C2447) *
               C295 -
           (((C2451 * C906 + C2446 * C914 + C2450 * C904 + C2445 * C913 +
              C2449 * C483 + C2444 * C492) *
                 C51026 +
             (C2451 * C890 + C2446 * C905 + C2450 * C889 + C2445 * C903 +
              C2449 * C474 + C2444 * C482) *
                 C118) *
                C51126 * C50978 +
            ((C2870 + C2869 + C2868) * C51026 +
             (C2867 + C2866 + C2865) * C118) *
                C51126 * C2447) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C51126 * C2447 +
           ((C2489 + C2490 + C2491) * C635 + (C2492 + C2493 + C2494) * C630 -
            (C2677 + C2678 + C2679) * C636 - (C2680 + C2681 + C2682) * C631 +
            (C3041 + C3042 + C3043) * C637 + (C3044 + C3045 + C3046) * C632) *
               C51126 * C50978) *
              C50992 * C51256 +
          (((C2449 * C883 + C2444 * C891 + C2450 * C884 + C2445 * C893 +
             C2451 * C3298 + C2446 * C3302) *
                C636 -
            ((C2451 * C894 + C2446 * C908 + C2450 * C892 + C2445 * C907 +
              C2449 * C486 + C2444 * C494) *
                 C630 +
             (C2451 * C884 + C2446 * C893 + C2450 * C883 + C2445 * C891 +
              C2449 * C476 + C2444 * C487) *
                 C635) +
            (C2449 * C892 + C2444 * C907 + C2450 * C894 + C2445 * C908 +
             C2451 * C3303 + C2446 * C3310) *
                C631 -
            (C2451 * C3299 + C2446 * C3304 + C2450 * C3298 + C2445 * C3302 +
             C2449 * C884 + C2444 * C893) *
                C637 -
            (C2451 * C3305 + C2446 * C3311 + C2450 * C3303 + C2445 * C3310 +
             C2449 * C894 + C2444 * C908) *
                C632) *
               C51126 * C2447 +
           ((C2449 * C885 + C2444 * C895 + C2450 * C886 + C2445 * C897 +
             C2451 * C3300 + C2446 * C3306) *
                C636 -
            ((C2864 + C2863 + C2862) * C630 + (C2861 + C2860 + C2859) * C635) +
            (C2449 * C896 + C2444 * C909 + C2450 * C898 + C2445 * C910 +
             C2451 * C3307 + C2446 * C3312) *
                C631 -
            (C2451 * C3301 + C2446 * C3308 + C2450 * C3300 + C2445 * C3306 +
             C2449 * C886 + C2444 * C897) *
                C637 -
            (C2451 * C3309 + C2446 * C3313 + C2450 * C3307 + C2445 * C3312 +
             C2449 * C898 + C2444 * C910) *
                C632) *
               C51126 * C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C1363 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C1358 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C1364 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51042) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C1363 +
                    (C24947 + C24948 + C24949) * C1358 -
                    (C25132 + C25133 + C25134) * C1364 -
                    (C25135 + C25136 + C25137) * C51042) *
                       C51126 * C50978) *
                      C51300 +
                  (((C25134 + C25133 + C25132) * C1364 -
                    ((C24949 + C24948 + C24947) * C1358 +
                     (C24946 + C24945 + C24944) * C1363) +
                    (C25137 + C25136 + C25135) * C51042) *
                       C51126 * C51242 +
                   ((C25138 + C25139 + C25140) * C1364 -
                    ((C24950 + C24951 + C24952) * C1358 +
                     (C24953 + C24954 + C24955) * C1363) +
                    (C25141 + C25142 + C25143) * C51042) *
                       C51126 * C50978) *
                      C51285 +
                  (((C24955 + C24954 + C24953) * C1363 +
                    (C24952 + C24951 + C24950) * C1358 -
                    (C25140 + C25139 + C25138) * C1364 -
                    (C25143 + C25142 + C25141) * C51042) *
                       C51126 * C51242 +
                   ((C24956 + C24957 + C24958) * C1363 +
                    (C24959 + C24960 + C24961) * C1358 -
                    (C24906 * C772 + C24901 * C779 + C24905 * C641 +
                     C51304 * C649 + C24904 * C303 + C51303 * C312) *
                        C1364 -
                    (C24906 * C780 + C24901 * C784 + C24905 * C650 +
                     C51304 * C656 + C24904 * C313 + C51303 * C321) *
                        C51042) *
                       C51126 * C50978) *
                      C1362) *
                 C51056) /
                (p * q * std::sqrt(p + q));
    d2ee[76] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C1492 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51301 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C1493 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51288 +
                    (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                     C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                        C1494 +
                    (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                     C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                        C1489) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C1492 +
                    (C24947 + C24948 + C24949) * C51301 -
                    (C25132 + C25133 + C25134) * C1493 -
                    (C25135 + C25136 + C25137) * C51288 +
                    (C25484 + C25485 + C25486) * C1494 +
                    (C25487 + C25488 + C25489) * C1489) *
                       C51126 * C50978) *
                      C1490 +
                  (((C25134 + C25133 + C25132) * C1493 -
                    ((C24949 + C24948 + C24947) * C51301 +
                     (C24946 + C24945 + C24944) * C1492) +
                    (C25137 + C25136 + C25135) * C51288 -
                    (C25486 + C25485 + C25484) * C1494 -
                    (C25489 + C25488 + C25487) * C1489) *
                       C51126 * C51242 +
                   ((C25138 + C25139 + C25140) * C1493 -
                    ((C24950 + C24951 + C24952) * C51301 +
                     (C24953 + C24954 + C24955) * C1492) +
                    (C25141 + C25142 + C25143) * C51288 -
                    (C24906 * C3018 + C24901 * C3023 + C24905 * C771 +
                     C51304 * C777 + C24904 * C640 + C51303 * C647) *
                        C1494 -
                    (C24906 * C3024 + C24901 * C3027 + C24905 * C778 +
                     C51304 * C783 + C24904 * C648 + C51303 * C655) *
                        C1489) *
                       C51126 * C50978) *
                      C50997) *
                 C51056) /
                (p * q * std::sqrt(p + q));
    d2ee[77] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C1363 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C1358 -
                     (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                      C51304 * C643 + C24904 * C300 + C51303 * C306) *
                         C1364 -
                     (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                      C51304 * C653 + C24904 * C307 + C51303 * C318) *
                         C51042) *
                        C51126 * C51242 +
                    ((C24944 + C24945 + C24946) * C1363 +
                     (C24947 + C24948 + C24949) * C1358 -
                     (C25132 + C25133 + C25134) * C1364 -
                     (C25135 + C25136 + C25137) * C51042) *
                        C51126 * C50978) *
                       C1490 +
                   (((C25134 + C25133 + C25132) * C1364 -
                     ((C24949 + C24948 + C24947) * C1358 +
                      (C24946 + C24945 + C24944) * C1363) +
                     (C25137 + C25136 + C25135) * C51042) *
                        C51126 * C51242 +
                    ((C25138 + C25139 + C25140) * C1364 -
                     ((C24950 + C24951 + C24952) * C1358 +
                      (C24953 + C24954 + C24955) * C1363) +
                     (C25141 + C25142 + C25143) * C51042) *
                        C51126 * C50978) *
                       C50997) *
                      C51256 +
                  ((((C24904 * C883 + C51303 * C891 + C24905 * C884 +
                      C51304 * C893 + C24906 * C3298 + C24901 * C3302) *
                         C1364 -
                     ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                       C51304 * C907 + C24904 * C486 + C51303 * C494) *
                          C1358 +
                      (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                       C51304 * C891 + C24904 * C476 + C51303 * C487) *
                          C1363) +
                     (C24904 * C892 + C51303 * C907 + C24905 * C894 +
                      C51304 * C908 + C24906 * C3303 + C24901 * C3310) *
                         C51042) *
                        C51126 * C51242 +
                    ((C26640 + C26641 + C26642) * C1364 -
                     ((C25319 + C25318 + C25317) * C1358 +
                      (C25316 + C25315 + C25314) * C1363) +
                     (C26643 + C26644 + C26645) * C51042) *
                        C51126 * C50978) *
                       C1490 +
                   (((C25314 + C25315 + C25316) * C1363 +
                     (C25317 + C25318 + C25319) * C1358 -
                     (C26642 + C26641 + C26640) * C1364 -
                     (C26645 + C26644 + C26643) * C51042) *
                        C51126 * C51242 +
                    ((C25320 + C25321 + C25322) * C1363 +
                     (C25323 + C25324 + C25325) * C1358 -
                     (C24906 * C4244 + C24901 * C4245 + C24905 * C888 +
                      C51304 * C901 + C24904 * C887 + C51303 * C899) *
                         C1364 -
                     (C24906 * C4246 + C24901 * C4247 + C24905 * C902 +
                      C51304 * C912 + C24904 * C900 + C51303 * C911) *
                         C51042) *
                        C51126 * C50978) *
                       C50997) *
                      C51068)) /
                (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C1363 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C1358 -
                     (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                      C51304 * C643 + C24904 * C300 + C51303 * C306) *
                         C1364 -
                     (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                      C51304 * C653 + C24904 * C307 + C51303 * C318) *
                         C51042) *
                        C51126 * C51242 +
                    ((C24944 + C24945 + C24946) * C1363 +
                     (C24947 + C24948 + C24949) * C1358 -
                     (C25132 + C25133 + C25134) * C1364 -
                     (C25135 + C25136 + C25137) * C51042) *
                        C51126 * C50978) *
                       C51247 +
                   (((C25134 + C25133 + C25132) * C1364 -
                     ((C24949 + C24948 + C24947) * C1358 +
                      (C24946 + C24945 + C24944) * C1363) +
                     (C25137 + C25136 + C25135) * C51042) *
                        C51126 * C51242 +
                    ((C25138 + C25139 + C25140) * C1364 -
                     ((C24950 + C24951 + C24952) * C1358 +
                      (C24953 + C24954 + C24955) * C1363) +
                     (C25141 + C25142 + C25143) * C51042) *
                        C51126 * C50978) *
                       C50997) *
                      C1775 +
                  ((((C24904 * C883 + C51303 * C891 + C24905 * C884 +
                      C51304 * C893 + C24906 * C3298 + C24901 * C3302) *
                         C1364 -
                     ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                       C51304 * C907 + C24904 * C486 + C51303 * C494) *
                          C1358 +
                      (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                       C51304 * C891 + C24904 * C476 + C51303 * C487) *
                          C1363) +
                     (C24904 * C892 + C51303 * C907 + C24905 * C894 +
                      C51304 * C908 + C24906 * C3303 + C24901 * C3310) *
                         C51042) *
                        C51126 * C51242 +
                    ((C26640 + C26641 + C26642) * C1364 -
                     ((C25319 + C25318 + C25317) * C1358 +
                      (C25316 + C25315 + C25314) * C1363) +
                     (C26643 + C26644 + C26645) * C51042) *
                        C51126 * C50978) *
                       C51247 +
                   (((C25314 + C25315 + C25316) * C1363 +
                     (C25317 + C25318 + C25319) * C1358 -
                     (C26642 + C26641 + C26640) * C1364 -
                     (C26645 + C26644 + C26643) * C51042) *
                        C51126 * C51242 +
                    ((C25320 + C25321 + C25322) * C1363 +
                     (C25323 + C25324 + C25325) * C1358 -
                     (C24906 * C4244 + C24901 * C4245 + C24905 * C888 +
                      C51304 * C901 + C24904 * C887 + C51303 * C899) *
                         C1364 -
                     (C24906 * C4246 + C24901 * C4247 + C24905 * C902 +
                      C51304 * C912 + C24904 * C900 + C51303 * C911) *
                         C51042) *
                        C51126 * C50978) *
                       C50997) *
                      C51068)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C1492 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51301 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C1493 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51288 +
                    (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                     C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                        C1494 +
                    (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                     C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                        C1489) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C1492 +
                    (C24947 + C24948 + C24949) * C51301 -
                    (C25132 + C25133 + C25134) * C1493 -
                    (C25135 + C25136 + C25137) * C51288 +
                    (C25484 + C25485 + C25486) * C1494 +
                    (C25487 + C25488 + C25489) * C1489) *
                       C51126 * C50978) *
                      C50992 * C1775 +
                  (((C24904 * C883 + C51303 * C891 + C24905 * C884 +
                     C51304 * C893 + C24906 * C3298 + C24901 * C3302) *
                        C1493 -
                    ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                      C51304 * C907 + C24904 * C486 + C51303 * C494) *
                         C51301 +
                     (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                      C51304 * C891 + C24904 * C476 + C51303 * C487) *
                         C1492) +
                    (C24904 * C892 + C51303 * C907 + C24905 * C894 +
                     C51304 * C908 + C24906 * C3303 + C24901 * C3310) *
                        C51288 -
                    (C24906 * C3299 + C24901 * C3304 + C24905 * C3298 +
                     C51304 * C3302 + C24904 * C884 + C51303 * C893) *
                        C1494 -
                    (C24906 * C3305 + C24901 * C3311 + C24905 * C3303 +
                     C51304 * C3310 + C24904 * C894 + C51303 * C908) *
                        C1489) *
                       C51126 * C51242 +
                   ((C26640 + C26641 + C26642) * C1493 -
                    ((C25319 + C25318 + C25317) * C51301 +
                     (C25316 + C25315 + C25314) * C1492) +
                    (C26643 + C26644 + C26645) * C51288 -
                    (C24906 * C3301 + C24901 * C3308 + C24905 * C3300 +
                     C51304 * C3306 + C24904 * C886 + C51303 * C897) *
                        C1494 -
                    (C24906 * C3309 + C24901 * C3313 + C24905 * C3307 +
                     C51304 * C3312 + C24904 * C898 + C51303 * C910) *
                        C1489) *
                       C51126 * C50978) *
                      C50992 * C51068)) /
                (p * q * std::sqrt(p + q));
    d2ee[80] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C1363 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C1358 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C1364 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51042) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C1363 +
                    (C24947 + C24948 + C24949) * C1358 -
                    (C25132 + C25133 + C25134) * C1364 -
                    (C25135 + C25136 + C25137) * C51042) *
                       C51126 * C50978) *
                      C50992 * C51302 +
                  (((C24904 * C883 + C51303 * C891 + C24905 * C884 +
                     C51304 * C893 + C24906 * C3298 + C24901 * C3302) *
                        C1364 -
                    ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                      C51304 * C907 + C24904 * C486 + C51303 * C494) *
                         C1358 +
                     (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                      C51304 * C891 + C24904 * C476 + C51303 * C487) *
                         C1363) +
                    (C24904 * C892 + C51303 * C907 + C24905 * C894 +
                     C51304 * C908 + C24906 * C3303 + C24901 * C3310) *
                        C51042) *
                       C51126 * C51242 +
                   ((C26640 + C26641 + C26642) * C1364 -
                    ((C25319 + C25318 + C25317) * C1358 +
                     (C25316 + C25315 + C25314) * C1363) +
                    (C26643 + C26644 + C26645) * C51042) *
                       C51126 * C50978) *
                      C50992 * C51291 +
                  (((C24904 * C1016 + C51303 * C1021 + C24905 * C1158 +
                     C51304 * C1162 + C24906 * C3460 + C24901 * C3463) *
                        C1363 +
                    (C24904 * C1022 + C51303 * C1031 + C24905 * C1163 +
                     C51304 * C1170 + C24906 * C3464 + C24901 * C3469) *
                        C1358 -
                    (C24906 * C3636 + C24901 * C3638 + C24905 * C3460 +
                     C51304 * C3463 + C24904 * C1158 + C51303 * C1162) *
                        C1364 -
                    (C24906 * C3639 + C24901 * C3642 + C24905 * C3464 +
                     C51304 * C3469 + C24904 * C1163 + C51303 * C1170) *
                        C51042) *
                       C51126 * C51242 +
                   ((C25892 + C25893 + C25894) * C1363 +
                    (C25895 + C25896 + C25897) * C1358 -
                    (C24906 * C3637 + C24901 * C3640 + C24905 * C3461 +
                     C51304 * C3465 + C24904 * C1159 + C51303 * C1164) *
                        C1364 -
                    (C24906 * C3641 + C24901 * C3643 + C24905 * C3466 +
                     C51304 * C3470 + C24904 * C1165 + C51303 * C1171) *
                        C51042) *
                       C51126 * C50978) *
                      C50992 * C2019)) /
                (p * q * std::sqrt(p + q));
    d2ee[81] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C635 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C630 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C636 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C631 +
                    (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                     C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                        C637 +
                    (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                     C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                        C632) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C635 +
                    (C24947 + C24948 + C24949) * C630 -
                    (C25132 + C25133 + C25134) * C636 -
                    (C25135 + C25136 + C25137) * C631 +
                    (C25484 + C25485 + C25486) * C637 +
                    (C25487 + C25488 + C25489) * C632) *
                       C51126 * C50978) *
                      C51247 +
                  (((C25134 + C25133 + C25132) * C636 -
                    ((C24949 + C24948 + C24947) * C630 +
                     (C24946 + C24945 + C24944) * C635) +
                    (C25137 + C25136 + C25135) * C631 -
                    (C25486 + C25485 + C25484) * C637 -
                    (C25489 + C25488 + C25487) * C632) *
                       C51126 * C51242 +
                   ((C25138 + C25139 + C25140) * C636 -
                    ((C24950 + C24951 + C24952) * C630 +
                     (C24953 + C24954 + C24955) * C635) +
                    (C25141 + C25142 + C25143) * C631 -
                    (C24906 * C3018 + C24901 * C3023 + C24905 * C771 +
                     C51304 * C777 + C24904 * C640 + C51303 * C647) *
                        C637 -
                    (C24906 * C3024 + C24901 * C3027 + C24905 * C778 +
                     C51304 * C783 + C24904 * C648 + C51303 * C655) *
                        C632) *
                       C51126 * C50978) *
                      C50997) *
                 C51056) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C118 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51026) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C118 +
                    (C24947 + C24948 + C24949) * C51026) *
                       C51126 * C50978) *
                      C112 -
                  (((C24950 + C24951 + C24952) * C51026 +
                    (C24953 + C24954 + C24955) * C118) *
                       C51126 * C50978 +
                   ((C24949 + C24948 + C24947) * C51026 +
                    (C24946 + C24945 + C24944) * C118) *
                       C51126 * C51242) *
                      C113 +
                  (((C24955 + C24954 + C24953) * C118 +
                    (C24952 + C24951 + C24950) * C51026) *
                       C51126 * C51242 +
                   ((C24956 + C24957 + C24958) * C118 +
                    (C24959 + C24960 + C24961) * C51026) *
                       C51126 * C50978) *
                      C114 -
                  (((C24906 * C652 + C24901 * C657 + C24905 * C315 +
                     C51304 * C322 + C24904 * C134 + C51303 * C144) *
                        C51026 +
                    (C24906 * C642 + C24901 * C651 + C24905 * C304 +
                     C51304 * C314 + C24904 * C123 + C51303 * C135) *
                        C118) *
                       C51126 * C50978 +
                   ((C24961 + C24960 + C24959) * C51026 +
                    (C24958 + C24957 + C24956) * C118) *
                       C51126 * C51242) *
                      C115) *
                 C51056) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C118 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C51026) *
                        C51126 * C51242 +
                    ((C24944 + C24945 + C24946) * C118 +
                     (C24947 + C24948 + C24949) * C51026) *
                        C51126 * C50978) *
                       C51247 -
                   (((C24950 + C24951 + C24952) * C51026 +
                     (C24953 + C24954 + C24955) * C118) *
                        C51126 * C50978 +
                    ((C24949 + C24948 + C24947) * C51026 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51126 * C51242) *
                       C50997) *
                      C1013 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51026) *
                        C51126 * C51242 +
                    ((C25320 + C25321 + C25322) * C118 +
                     (C25323 + C25324 + C25325) * C51026) *
                        C51126 * C50978) *
                       C50997 -
                   (((C25319 + C25318 + C25317) * C51026 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51126 * C50978 +
                    ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                      C51304 * C907 + C24904 * C486 + C51303 * C494) *
                         C51026 +
                     (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                      C51304 * C891 + C24904 * C476 + C51303 * C487) *
                         C118) *
                        C51126 * C51242) *
                       C51247) *
                      C1014 +
                  ((((C24904 * C1016 + C51303 * C1021 + C24905 * C1158 +
                      C51304 * C1162 + C24906 * C3460 + C24901 * C3463) *
                         C118 +
                     (C24904 * C1022 + C51303 * C1031 + C24905 * C1163 +
                      C51304 * C1170 + C24906 * C3464 + C24901 * C3469) *
                         C51026) *
                        C51126 * C51242 +
                    ((C25892 + C25893 + C25894) * C118 +
                     (C25895 + C25896 + C25897) * C51026) *
                        C51126 * C50978) *
                       C51247 -
                   (((C24906 * C3467 + C24901 * C3471 + C24905 * C1167 +
                      C51304 * C1172 + C24904 * C1026 + C51303 * C1033) *
                         C51026 +
                     (C24906 * C3462 + C24901 * C3468 + C24905 * C1160 +
                      C51304 * C1166 + C24904 * C1018 + C51303 * C1025) *
                         C118) *
                        C51126 * C50978 +
                    ((C25897 + C25896 + C25895) * C51026 +
                     (C25894 + C25893 + C25892) * C118) *
                        C51126 * C51242) *
                       C50997) *
                      C1015)) /
                    (p * q * std::sqrt(p + q));
    d2ee[82] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                    C51304 * C306 + C24906 * C638 + C24901 * C643) *
                       C765 +
                   (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                    C51304 * C318 + C24906 * C644 + C24901 * C653) *
                       C760 -
                   (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                    C51304 * C643 + C24904 * C300 + C51303 * C306) *
                       C766 -
                   (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                    C51304 * C653 + C24904 * C307 + C51303 * C318) *
                       C761 +
                   (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                    C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                       C767 +
                   (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                    C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                       C762 -
                   (C24906 * C3144 + C24901 * C3146 + C24905 * C3016 +
                    C51304 * C3019 + C24904 * C769 + C51303 * C773) *
                       C768 -
                   (C24906 * C3147 + C24901 * C3150 + C24905 * C3020 +
                    C51304 * C3025 + C24904 * C774 + C51303 * C781) *
                       C763) *
                      C51126 * C51242 +
                  ((C24944 + C24945 + C24946) * C765 +
                   (C24947 + C24948 + C24949) * C760 -
                   (C25132 + C25133 + C25134) * C766 -
                   (C25135 + C25136 + C25137) * C761 +
                   (C25484 + C25485 + C25486) * C767 +
                   (C25487 + C25488 + C25489) * C762 -
                   (C24906 * C3145 + C24901 * C3148 + C24905 * C3017 +
                    C51304 * C3021 + C24904 * C770 + C51303 * C775) *
                       C768 -
                   (C24906 * C3149 + C24901 * C3151 + C24905 * C3022 +
                    C51304 * C3026 + C24904 * C776 + C51303 * C782) *
                       C763) *
                      C51126 * C50978) *
                 C50992 * C51056) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C298 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51254 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C299 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51042) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C298 +
                    (C24947 + C24948 + C24949) * C51254 -
                    (C25132 + C25133 + C25134) * C299 -
                    (C25135 + C25136 + C25137) * C51042) *
                       C51126 * C50978) *
                      C295 +
                  (((C25134 + C25133 + C25132) * C299 -
                    ((C24949 + C24948 + C24947) * C51254 +
                     (C24946 + C24945 + C24944) * C298) +
                    (C25137 + C25136 + C25135) * C51042) *
                       C51126 * C51242 +
                   ((C25138 + C25139 + C25140) * C299 -
                    ((C24950 + C24951 + C24952) * C51254 +
                     (C24953 + C24954 + C24955) * C298) +
                    (C25141 + C25142 + C25143) * C51042) *
                       C51126 * C50978) *
                      C296 +
                  (((C24955 + C24954 + C24953) * C298 +
                    (C24952 + C24951 + C24950) * C51254 -
                    (C25140 + C25139 + C25138) * C299 -
                    (C25143 + C25142 + C25141) * C51042) *
                       C51126 * C51242 +
                   ((C24956 + C24957 + C24958) * C298 +
                    (C24959 + C24960 + C24961) * C51254 -
                    (C24906 * C772 + C24901 * C779 + C24905 * C641 +
                     C51304 * C649 + C24904 * C303 + C51303 * C312) *
                        C299 -
                    (C24906 * C780 + C24901 * C784 + C24905 * C650 +
                     C51304 * C656 + C24904 * C313 + C51303 * C321) *
                        C51042) *
                       C51126 * C50978) *
                      C297) *
                 C51056) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C298 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51254 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C299 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51042) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C298 +
                    (C24947 + C24948 + C24949) * C51254 -
                    (C25132 + C25133 + C25134) * C299 -
                    (C25135 + C25136 + C25137) * C51042) *
                       C51126 * C50978) *
                      C50992 * C1013 +
                  (((C24904 * C883 + C51303 * C891 + C24905 * C884 +
                     C51304 * C893 + C24906 * C3298 + C24901 * C3302) *
                        C299 -
                    ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                      C51304 * C907 + C24904 * C486 + C51303 * C494) *
                         C51254 +
                     (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                      C51304 * C891 + C24904 * C476 + C51303 * C487) *
                         C298) +
                    (C24904 * C892 + C51303 * C907 + C24905 * C894 +
                     C51304 * C908 + C24906 * C3303 + C24901 * C3310) *
                        C51042) *
                       C51126 * C51242 +
                   ((C24904 * C885 + C51303 * C895 + C24905 * C886 +
                     C51304 * C897 + C24906 * C3300 + C24901 * C3306) *
                        C299 -
                    ((C25319 + C25318 + C25317) * C51254 +
                     (C25316 + C25315 + C25314) * C298) +
                    (C24904 * C896 + C51303 * C909 + C24905 * C898 +
                     C51304 * C910 + C24906 * C3307 + C24901 * C3312) *
                        C51042) *
                       C51126 * C50978) *
                      C50992 * C1014 +
                  (((C24904 * C1016 + C51303 * C1021 + C24905 * C1158 +
                     C51304 * C1162 + C24906 * C3460 + C24901 * C3463) *
                        C298 +
                    (C24904 * C1022 + C51303 * C1031 + C24905 * C1163 +
                     C51304 * C1170 + C24906 * C3464 + C24901 * C3469) *
                        C51254 -
                    (C24906 * C3636 + C24901 * C3638 + C24905 * C3460 +
                     C51304 * C3463 + C24904 * C1158 + C51303 * C1162) *
                        C299 -
                    (C24906 * C3639 + C24901 * C3642 + C24905 * C3464 +
                     C51304 * C3469 + C24904 * C1163 + C51303 * C1170) *
                        C51042) *
                       C51126 * C51242 +
                   ((C25892 + C25893 + C25894) * C298 +
                    (C25895 + C25896 + C25897) * C51254 -
                    (C24906 * C3637 + C24901 * C3640 + C24905 * C3461 +
                     C51304 * C3465 + C24904 * C1159 + C51303 * C1164) *
                        C299 -
                    (C24906 * C3641 + C24901 * C3643 + C24905 * C3466 +
                     C51304 * C3470 + C24904 * C1165 + C51303 * C1171) *
                        C51042) *
                       C51126 * C50978) *
                      C50992 * C1015)) /
                    (p * q * std::sqrt(p + q));
    d2ee[83] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C635 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C630 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C636 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C631 +
                    (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                     C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                        C637 +
                    (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                     C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                        C632) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C635 +
                    (C24947 + C24948 + C24949) * C630 -
                    (C25132 + C25133 + C25134) * C636 -
                    (C25135 + C25136 + C25137) * C631 +
                    (C25484 + C25485 + C25486) * C637 +
                    (C25487 + C25488 + C25489) * C632) *
                       C51126 * C50978) *
                      C50992 * C51256 +
                  (((C24904 * C883 + C51303 * C891 + C24905 * C884 +
                     C51304 * C893 + C24906 * C3298 + C24901 * C3302) *
                        C636 -
                    ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                      C51304 * C907 + C24904 * C486 + C51303 * C494) *
                         C630 +
                     (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                      C51304 * C891 + C24904 * C476 + C51303 * C487) *
                         C635) +
                    (C24904 * C892 + C51303 * C907 + C24905 * C894 +
                     C51304 * C908 + C24906 * C3303 + C24901 * C3310) *
                        C631 -
                    (C24906 * C3299 + C24901 * C3304 + C24905 * C3298 +
                     C51304 * C3302 + C24904 * C884 + C51303 * C893) *
                        C637 -
                    (C24906 * C3305 + C24901 * C3311 + C24905 * C3303 +
                     C51304 * C3310 + C24904 * C894 + C51303 * C908) *
                        C632) *
                       C51126 * C51242 +
                   ((C24904 * C885 + C51303 * C895 + C24905 * C886 +
                     C51304 * C897 + C24906 * C3300 + C24901 * C3306) *
                        C636 -
                    ((C25319 + C25318 + C25317) * C630 +
                     (C25316 + C25315 + C25314) * C635) +
                    (C24904 * C896 + C51303 * C909 + C24905 * C898 +
                     C51304 * C910 + C24906 * C3307 + C24901 * C3312) *
                        C631 -
                    (C24906 * C3301 + C24901 * C3308 + C24905 * C3300 +
                     C51304 * C3306 + C24904 * C886 + C51303 * C897) *
                        C637 -
                    (C24906 * C3309 + C24901 * C3313 + C24905 * C3307 +
                     C51304 * C3312 + C24904 * C898 + C51303 * C910) *
                        C632) *
                       C51126 * C50978) *
                      C50992 * C51068)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C118 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C51026) *
                        C51126 * C51242 +
                    ((C24944 + C24945 + C24946) * C118 +
                     (C24947 + C24948 + C24949) * C51026) *
                        C51126 * C50978) *
                       C295 -
                   (((C24950 + C24951 + C24952) * C51026 +
                     (C24953 + C24954 + C24955) * C118) *
                        C51126 * C50978 +
                    ((C24949 + C24948 + C24947) * C51026 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51126 * C51242) *
                       C296 +
                   (((C24955 + C24954 + C24953) * C118 +
                     (C24952 + C24951 + C24950) * C51026) *
                        C51126 * C51242 +
                    ((C24956 + C24957 + C24958) * C118 +
                     (C24959 + C24960 + C24961) * C51026) *
                        C51126 * C50978) *
                       C297) *
                      C51256 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51026) *
                        C51126 * C51242 +
                    ((C25320 + C25321 + C25322) * C118 +
                     (C25323 + C25324 + C25325) * C51026) *
                        C51126 * C50978) *
                       C296 -
                   (((C25319 + C25318 + C25317) * C51026 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51126 * C50978 +
                    ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                      C51304 * C907 + C24904 * C486 + C51303 * C494) *
                         C51026 +
                     (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                      C51304 * C891 + C24904 * C476 + C51303 * C487) *
                         C118) *
                        C51126 * C51242) *
                       C295 -
                   (((C24906 * C906 + C24901 * C914 + C24905 * C904 +
                      C51304 * C913 + C24904 * C483 + C51303 * C492) *
                         C51026 +
                     (C24906 * C890 + C24901 * C905 + C24905 * C889 +
                      C51304 * C903 + C24904 * C474 + C51303 * C482) *
                         C118) *
                        C51126 * C50978 +
                    ((C25325 + C25324 + C25323) * C51026 +
                     (C25322 + C25321 + C25320) * C118) *
                        C51126 * C51242) *
                       C297) *
                      C51068)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C118 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51026) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C118 +
                    (C24947 + C24948 + C24949) * C51026) *
                       C51126 * C50978) *
                      C50992 * C1240 -
                  (((C25319 + C25318 + C25317) * C51026 +
                    (C25316 + C25315 + C25314) * C118) *
                       C51126 * C50978 +
                   ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                     C51304 * C907 + C24904 * C486 + C51303 * C494) *
                        C51026 +
                    (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                     C51304 * C891 + C24904 * C476 + C51303 * C487) *
                        C118) *
                       C51126 * C51242) *
                      C50992 * C1241 +
                  (((C24904 * C1016 + C51303 * C1021 + C24905 * C1158 +
                     C51304 * C1162 + C24906 * C3460 + C24901 * C3463) *
                        C118 +
                    (C24904 * C1022 + C51303 * C1031 + C24905 * C1163 +
                     C51304 * C1170 + C24906 * C3464 + C24901 * C3469) *
                        C51026) *
                       C51126 * C51242 +
                   ((C25892 + C25893 + C25894) * C118 +
                    (C25895 + C25896 + C25897) * C51026) *
                       C51126 * C50978) *
                      C50992 * C1242 -
                  (((C24906 * C3746 + C24901 * C3754 + C24905 * C3747 +
                     C51304 * C3755 + C24904 * C1252 + C51303 * C1258) *
                        C51026 +
                    (C24906 * C3742 + C24901 * C3748 + C24905 * C3743 +
                     C51304 * C3749 + C24904 * C1246 + C51303 * C1253) *
                        C118) *
                       C51126 * C50978 +
                   ((C24906 * C3750 + C24901 * C3756 + C24905 * C3751 +
                     C51304 * C3757 + C24904 * C1254 + C51303 * C1259) *
                        C51026 +
                    (C24906 * C3744 + C24901 * C3752 + C24905 * C3745 +
                     C51304 * C3753 + C24904 * C1247 + C51303 * C1255) *
                        C118) *
                       C51126 * C51242) *
                      C50992 * C1243)) /
                    (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C118 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C51026) *
                        C51126 * C51242 +
                    ((C24944 + C24945 + C24946) * C118 +
                     (C24947 + C24948 + C24949) * C51026) *
                        C51126 * C50978) *
                       C51300 -
                   (((C24950 + C24951 + C24952) * C51026 +
                     (C24953 + C24954 + C24955) * C118) *
                        C51126 * C50978 +
                    ((C24949 + C24948 + C24947) * C51026 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51126 * C51242) *
                       C51285 +
                   (((C24955 + C24954 + C24953) * C118 +
                     (C24952 + C24951 + C24950) * C51026) *
                        C51126 * C51242 +
                    ((C24956 + C24957 + C24958) * C118 +
                     (C24959 + C24960 + C24961) * C51026) *
                        C51126 * C50978) *
                       C1362) *
                      C1775 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51026) *
                        C51126 * C51242 +
                    ((C25320 + C25321 + C25322) * C118 +
                     (C25323 + C25324 + C25325) * C51026) *
                        C51126 * C50978) *
                       C51285 -
                   (((C25319 + C25318 + C25317) * C51026 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51126 * C50978 +
                    ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                      C51304 * C907 + C24904 * C486 + C51303 * C494) *
                         C51026 +
                     (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                      C51304 * C891 + C24904 * C476 + C51303 * C487) *
                         C118) *
                        C51126 * C51242) *
                       C51300 -
                   (((C24906 * C906 + C24901 * C914 + C24905 * C904 +
                      C51304 * C913 + C24904 * C483 + C51303 * C492) *
                         C51026 +
                     (C24906 * C890 + C24901 * C905 + C24905 * C889 +
                      C51304 * C903 + C24904 * C474 + C51303 * C482) *
                         C118) *
                        C51126 * C50978 +
                    ((C25325 + C25324 + C25323) * C51026 +
                     (C25322 + C25321 + C25320) * C118) *
                        C51126 * C51242) *
                       C1362) *
                      C51068)) /
                (p * q * std::sqrt(p + q));
    d2ee[85] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C298 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C51254 -
                     (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                      C51304 * C643 + C24904 * C300 + C51303 * C306) *
                         C299 -
                     (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                      C51304 * C653 + C24904 * C307 + C51303 * C318) *
                         C51042) *
                        C51126 * C51242 +
                    ((C24944 + C24945 + C24946) * C298 +
                     (C24947 + C24948 + C24949) * C51254 -
                     (C25132 + C25133 + C25134) * C299 -
                     (C25135 + C25136 + C25137) * C51042) *
                        C51126 * C50978) *
                       C1490 +
                   (((C25134 + C25133 + C25132) * C299 -
                     ((C24949 + C24948 + C24947) * C51254 +
                      (C24946 + C24945 + C24944) * C298) +
                     (C25137 + C25136 + C25135) * C51042) *
                        C51126 * C51242 +
                    ((C25138 + C25139 + C25140) * C299 -
                     ((C24950 + C24951 + C24952) * C51254 +
                      (C24953 + C24954 + C24955) * C298) +
                     (C25141 + C25142 + C25143) * C51042) *
                        C51126 * C50978) *
                       C50997) *
                      C1775 +
                  ((((C24904 * C883 + C51303 * C891 + C24905 * C884 +
                      C51304 * C893 + C24906 * C3298 + C24901 * C3302) *
                         C299 -
                     ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                       C51304 * C907 + C24904 * C486 + C51303 * C494) *
                          C51254 +
                      (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                       C51304 * C891 + C24904 * C476 + C51303 * C487) *
                          C298) +
                     (C24904 * C892 + C51303 * C907 + C24905 * C894 +
                      C51304 * C908 + C24906 * C3303 + C24901 * C3310) *
                         C51042) *
                        C51126 * C51242 +
                    ((C26640 + C26641 + C26642) * C299 -
                     ((C25319 + C25318 + C25317) * C51254 +
                      (C25316 + C25315 + C25314) * C298) +
                     (C26643 + C26644 + C26645) * C51042) *
                        C51126 * C50978) *
                       C1490 +
                   (((C25314 + C25315 + C25316) * C298 +
                     (C25317 + C25318 + C25319) * C51254 -
                     (C26642 + C26641 + C26640) * C299 -
                     (C26645 + C26644 + C26643) * C51042) *
                        C51126 * C51242 +
                    ((C25320 + C25321 + C25322) * C298 +
                     (C25323 + C25324 + C25325) * C51254 -
                     (C24906 * C4244 + C24901 * C4245 + C24905 * C888 +
                      C51304 * C901 + C24904 * C887 + C51303 * C899) *
                         C299 -
                     (C24906 * C4246 + C24901 * C4247 + C24905 * C902 +
                      C51304 * C912 + C24904 * C900 + C51303 * C911) *
                         C51042) *
                        C51126 * C50978) *
                       C50997) *
                      C51068)) /
                (p * q * std::sqrt(p + q));
    d2ee[86] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C118 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C51026) *
                        C51126 * C51242 +
                    ((C24944 + C24945 + C24946) * C118 +
                     (C24947 + C24948 + C24949) * C51026) *
                        C51126 * C50978) *
                       C1490 -
                   (((C24950 + C24951 + C24952) * C51026 +
                     (C24953 + C24954 + C24955) * C118) *
                        C51126 * C50978 +
                    ((C24949 + C24948 + C24947) * C51026 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51126 * C51242) *
                       C50997) *
                      C51302 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51026) *
                        C51126 * C51242 +
                    ((C25320 + C25321 + C25322) * C118 +
                     (C25323 + C25324 + C25325) * C51026) *
                        C51126 * C50978) *
                       C50997 -
                   (((C25319 + C25318 + C25317) * C51026 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51126 * C50978 +
                    ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                      C51304 * C907 + C24904 * C486 + C51303 * C494) *
                         C51026 +
                     (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                      C51304 * C891 + C24904 * C476 + C51303 * C487) *
                         C118) *
                        C51126 * C51242) *
                       C1490) *
                      C51291 +
                  ((((C24904 * C1016 + C51303 * C1021 + C24905 * C1158 +
                      C51304 * C1162 + C24906 * C3460 + C24901 * C3463) *
                         C118 +
                     (C24904 * C1022 + C51303 * C1031 + C24905 * C1163 +
                      C51304 * C1170 + C24906 * C3464 + C24901 * C3469) *
                         C51026) *
                        C51126 * C51242 +
                    ((C25892 + C25893 + C25894) * C118 +
                     (C25895 + C25896 + C25897) * C51026) *
                        C51126 * C50978) *
                       C1490 -
                   (((C24906 * C3467 + C24901 * C3471 + C24905 * C1167 +
                      C51304 * C1172 + C24904 * C1026 + C51303 * C1033) *
                         C51026 +
                     (C24906 * C3462 + C24901 * C3468 + C24905 * C1160 +
                      C51304 * C1166 + C24904 * C1018 + C51303 * C1025) *
                         C118) *
                        C51126 * C50978 +
                    ((C25897 + C25896 + C25895) * C51026 +
                     (C25894 + C25893 + C25892) * C118) *
                        C51126 * C51242) *
                       C50997) *
                      C2019)) /
                (p * q * std::sqrt(p + q));
    d2ee[87] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C118 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51026) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C118 +
                    (C24947 + C24948 + C24949) * C51026) *
                       C51126 * C50978) *
                      C112 -
                  (((C24950 + C24951 + C24952) * C51026 +
                    (C24953 + C24954 + C24955) * C118) *
                       C51126 * C50978 +
                   ((C24949 + C24948 + C24947) * C51026 +
                    (C24946 + C24945 + C24944) * C118) *
                       C51126 * C51242) *
                      C113 +
                  (((C24955 + C24954 + C24953) * C118 +
                    (C24952 + C24951 + C24950) * C51026) *
                       C51126 * C51242 +
                   ((C24956 + C24957 + C24958) * C118 +
                    (C24959 + C24960 + C24961) * C51026) *
                       C51126 * C50978) *
                      C114 -
                  (((C24906 * C652 + C24901 * C657 + C24905 * C315 +
                     C51304 * C322 + C24904 * C134 + C51303 * C144) *
                        C51026 +
                    (C24906 * C642 + C24901 * C651 + C24905 * C304 +
                     C51304 * C314 + C24904 * C123 + C51303 * C135) *
                        C118) *
                       C51126 * C50978 +
                   ((C24961 + C24960 + C24959) * C51026 +
                    (C24958 + C24957 + C24956) * C118) *
                       C51126 * C51242) *
                      C115) *
                 C51056) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C635 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C630 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C636 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C631 +
                    (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                     C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                        C637 +
                    (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                     C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                        C632) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C635 +
                    (C24947 + C24948 + C24949) * C630 -
                    (C25132 + C25133 + C25134) * C636 -
                    (C25135 + C25136 + C25137) * C631 +
                    (C25484 + C25485 + C25486) * C637 +
                    (C25487 + C25488 + C25489) * C632) *
                       C51126 * C50978) *
                      C51247 +
                  (((C25134 + C25133 + C25132) * C636 -
                    ((C24949 + C24948 + C24947) * C630 +
                     (C24946 + C24945 + C24944) * C635) +
                    (C25137 + C25136 + C25135) * C631 -
                    (C25486 + C25485 + C25484) * C637 -
                    (C25489 + C25488 + C25487) * C632) *
                       C51126 * C51242 +
                   ((C25138 + C25139 + C25140) * C636 -
                    ((C24950 + C24951 + C24952) * C630 +
                     (C24953 + C24954 + C24955) * C635) +
                    (C25141 + C25142 + C25143) * C631 -
                    (C24906 * C3018 + C24901 * C3023 + C24905 * C771 +
                     C51304 * C777 + C24904 * C640 + C51303 * C647) *
                        C637 -
                    (C24906 * C3024 + C24901 * C3027 + C24905 * C778 +
                     C51304 * C783 + C24904 * C648 + C51303 * C655) *
                        C632) *
                       C51126 * C50978) *
                      C50997) *
                 C51056) /
                    (p * q * std::sqrt(p + q));
    d2ee[88] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C298 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51254 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C299 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51042) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C298 +
                    (C24947 + C24948 + C24949) * C51254 -
                    (C25132 + C25133 + C25134) * C299 -
                    (C25135 + C25136 + C25137) * C51042) *
                       C51126 * C50978) *
                      C295 +
                  (((C25134 + C25133 + C25132) * C299 -
                    ((C24949 + C24948 + C24947) * C51254 +
                     (C24946 + C24945 + C24944) * C298) +
                    (C25137 + C25136 + C25135) * C51042) *
                       C51126 * C51242 +
                   ((C25138 + C25139 + C25140) * C299 -
                    ((C24950 + C24951 + C24952) * C51254 +
                     (C24953 + C24954 + C24955) * C298) +
                    (C25141 + C25142 + C25143) * C51042) *
                       C51126 * C50978) *
                      C296 +
                  (((C24955 + C24954 + C24953) * C298 +
                    (C24952 + C24951 + C24950) * C51254 -
                    (C25140 + C25139 + C25138) * C299 -
                    (C25143 + C25142 + C25141) * C51042) *
                       C51126 * C51242 +
                   ((C24956 + C24957 + C24958) * C298 +
                    (C24959 + C24960 + C24961) * C51254 -
                    (C24906 * C772 + C24901 * C779 + C24905 * C641 +
                     C51304 * C649 + C24904 * C303 + C51303 * C312) *
                        C299 -
                    (C24906 * C780 + C24901 * C784 + C24905 * C650 +
                     C51304 * C656 + C24904 * C313 + C51303 * C321) *
                        C51042) *
                       C51126 * C50978) *
                      C297) *
                 C51056) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                    C51304 * C306 + C24906 * C638 + C24901 * C643) *
                       C765 +
                   (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                    C51304 * C318 + C24906 * C644 + C24901 * C653) *
                       C760 -
                   (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                    C51304 * C643 + C24904 * C300 + C51303 * C306) *
                       C766 -
                   (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                    C51304 * C653 + C24904 * C307 + C51303 * C318) *
                       C761 +
                   (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                    C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                       C767 +
                   (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                    C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                       C762 -
                   (C24906 * C3144 + C24901 * C3146 + C24905 * C3016 +
                    C51304 * C3019 + C24904 * C769 + C51303 * C773) *
                       C768 -
                   (C24906 * C3147 + C24901 * C3150 + C24905 * C3020 +
                    C51304 * C3025 + C24904 * C774 + C51303 * C781) *
                       C763) *
                      C51126 * C51242 +
                  ((C24944 + C24945 + C24946) * C765 +
                   (C24947 + C24948 + C24949) * C760 -
                   (C25132 + C25133 + C25134) * C766 -
                   (C25135 + C25136 + C25137) * C761 +
                   (C25484 + C25485 + C25486) * C767 +
                   (C25487 + C25488 + C25489) * C762 -
                   (C24906 * C3145 + C24901 * C3148 + C24905 * C3017 +
                    C51304 * C3021 + C24904 * C770 + C51303 * C775) *
                       C768 -
                   (C24906 * C3149 + C24901 * C3151 + C24905 * C3022 +
                    C51304 * C3026 + C24904 * C776 + C51303 * C782) *
                       C763) *
                      C51126 * C50978) *
                 C50992 * C51056) /
                    (p * q * std::sqrt(p + q));
    d2ee[89] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C118 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C51026) *
                        C51126 * C51242 +
                    ((C24944 + C24945 + C24946) * C118 +
                     (C24947 + C24948 + C24949) * C51026) *
                        C51126 * C50978) *
                       C295 -
                   (((C24950 + C24951 + C24952) * C51026 +
                     (C24953 + C24954 + C24955) * C118) *
                        C51126 * C50978 +
                    ((C24949 + C24948 + C24947) * C51026 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51126 * C51242) *
                       C296 +
                   (((C24955 + C24954 + C24953) * C118 +
                     (C24952 + C24951 + C24950) * C51026) *
                        C51126 * C51242 +
                    ((C24956 + C24957 + C24958) * C118 +
                     (C24959 + C24960 + C24961) * C51026) *
                        C51126 * C50978) *
                       C297) *
                      C51256 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51026) *
                        C51126 * C51242 +
                    ((C25320 + C25321 + C25322) * C118 +
                     (C25323 + C25324 + C25325) * C51026) *
                        C51126 * C50978) *
                       C296 -
                   (((C25319 + C25318 + C25317) * C51026 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51126 * C50978 +
                    ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                      C51304 * C907 + C24904 * C486 + C51303 * C494) *
                         C51026 +
                     (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                      C51304 * C891 + C24904 * C476 + C51303 * C487) *
                         C118) *
                        C51126 * C51242) *
                       C295 -
                   (((C24906 * C906 + C24901 * C914 + C24905 * C904 +
                      C51304 * C913 + C24904 * C483 + C51303 * C492) *
                         C51026 +
                     (C24906 * C890 + C24901 * C905 + C24905 * C889 +
                      C51304 * C903 + C24904 * C474 + C51303 * C482) *
                         C118) *
                        C51126 * C50978 +
                    ((C25325 + C25324 + C25323) * C51026 +
                     (C25322 + C25321 + C25320) * C118) *
                        C51126 * C51242) *
                       C297) *
                      C51068)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C635 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C630 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C636 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C631 +
                    (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                     C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                        C637 +
                    (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                     C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                        C632) *
                       C51126 * C51242 +
                   ((C24944 + C24945 + C24946) * C635 +
                    (C24947 + C24948 + C24949) * C630 -
                    (C25132 + C25133 + C25134) * C636 -
                    (C25135 + C25136 + C25137) * C631 +
                    (C25484 + C25485 + C25486) * C637 +
                    (C25487 + C25488 + C25489) * C632) *
                       C51126 * C50978) *
                      C50992 * C51256 +
                  (((C24904 * C883 + C51303 * C891 + C24905 * C884 +
                     C51304 * C893 + C24906 * C3298 + C24901 * C3302) *
                        C636 -
                    ((C24906 * C894 + C24901 * C908 + C24905 * C892 +
                      C51304 * C907 + C24904 * C486 + C51303 * C494) *
                         C630 +
                     (C24906 * C884 + C24901 * C893 + C24905 * C883 +
                      C51304 * C891 + C24904 * C476 + C51303 * C487) *
                         C635) +
                    (C24904 * C892 + C51303 * C907 + C24905 * C894 +
                     C51304 * C908 + C24906 * C3303 + C24901 * C3310) *
                        C631 -
                    (C24906 * C3299 + C24901 * C3304 + C24905 * C3298 +
                     C51304 * C3302 + C24904 * C884 + C51303 * C893) *
                        C637 -
                    (C24906 * C3305 + C24901 * C3311 + C24905 * C3303 +
                     C51304 * C3310 + C24904 * C894 + C51303 * C908) *
                        C632) *
                       C51126 * C51242 +
                   ((C24904 * C885 + C51303 * C895 + C24905 * C886 +
                     C51304 * C897 + C24906 * C3300 + C24901 * C3306) *
                        C636 -
                    ((C25319 + C25318 + C25317) * C630 +
                     (C25316 + C25315 + C25314) * C635) +
                    (C24904 * C896 + C51303 * C909 + C24905 * C898 +
                     C51304 * C910 + C24906 * C3307 + C24901 * C3312) *
                        C631 -
                    (C24906 * C3301 + C24901 * C3308 + C24905 * C3300 +
                     C51304 * C3306 + C24904 * C886 + C51303 * C897) *
                        C637 -
                    (C24906 * C3309 + C24901 * C3313 + C24905 * C3307 +
                     C51304 * C3312 + C24904 * C898 + C51303 * C910) *
                        C632) *
                       C51126 * C50978) *
                      C50992 * C51068)) /
                    (p * q * std::sqrt(p + q));
    d2ee[90] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C1363 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C1358 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C1364 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51042) *
                       C51271 +
                   ((C31576 + C31577 + C31578) * C1363 +
                    (C31579 + C31580 + C31581) * C1358 -
                    (C31996 + C31997 + C31998) * C1364 -
                    (C31999 + C32000 + C32001) * C51042) *
                       C51190) *
                      C50973 * C51300 +
                  (((C25134 + C25133 + C25132) * C1364 -
                    ((C24949 + C24948 + C24947) * C1358 +
                     (C24946 + C24945 + C24944) * C1363) +
                    (C25137 + C25136 + C25135) * C51042) *
                       C51271 +
                   ((C26640 + C26641 + C26642) * C1364 -
                    ((C25319 + C25318 + C25317) * C1358 +
                     (C25316 + C25315 + C25314) * C1363) +
                    (C26643 + C26644 + C26645) * C51042) *
                       C51190) *
                      C50973 * C51285 +
                  (((C24955 + C24954 + C24953) * C1363 +
                    (C24952 + C24951 + C24950) * C1358 -
                    (C25140 + C25139 + C25138) * C1364 -
                    (C25143 + C25142 + C25141) * C51042) *
                       C51271 +
                   ((C25320 + C25321 + C25322) * C1363 +
                    (C25323 + C25324 + C25325) * C1358 -
                    (C24906 * C4244 + C24901 * C4245 + C24905 * C888 +
                     C51304 * C901 + C24904 * C887 + C51303 * C899) *
                        C1364 -
                    (C24906 * C4246 + C24901 * C4247 + C24905 * C902 +
                     C51304 * C912 + C24904 * C900 + C51303 * C911) *
                        C51042) *
                       C51190) *
                      C50973 * C1362) *
                 C51056) /
                (p * q * std::sqrt(p + q));
    d2ee[91] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C1492 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51301 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C1493 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51288 +
                    (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                     C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                        C1494 +
                    (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                     C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                        C1489) *
                       C51271 +
                   ((C31576 + C31577 + C31578) * C1492 +
                    (C31579 + C31580 + C31581) * C51301 -
                    (C31996 + C31997 + C31998) * C1493 -
                    (C31999 + C32000 + C32001) * C51288 +
                    (C32002 + C32003 + C32004) * C1494 +
                    (C32005 + C32006 + C32007) * C1489) *
                       C51190) *
                      C50973 * C1490 +
                  (((C25134 + C25133 + C25132) * C1493 -
                    ((C24949 + C24948 + C24947) * C51301 +
                     (C24946 + C24945 + C24944) * C1492) +
                    (C25137 + C25136 + C25135) * C51288 -
                    (C25486 + C25485 + C25484) * C1494 -
                    (C25489 + C25488 + C25487) * C1489) *
                       C51271 +
                   ((C26640 + C26641 + C26642) * C1493 -
                    ((C25319 + C25318 + C25317) * C51301 +
                     (C25316 + C25315 + C25314) * C1492) +
                    (C26643 + C26644 + C26645) * C51288 -
                    (C24906 * C3301 + C24901 * C3308 + C24905 * C3300 +
                     C51304 * C3306 + C24904 * C886 + C51303 * C897) *
                        C1494 -
                    (C24906 * C3309 + C24901 * C3313 + C24905 * C3307 +
                     C51304 * C3312 + C24904 * C898 + C51303 * C910) *
                        C1489) *
                       C51190) *
                      C50973 * C50997) *
                 C51056) /
                (p * q * std::sqrt(p + q));
    d2ee[92] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C1363 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C1358 -
                     (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                      C51304 * C643 + C24904 * C300 + C51303 * C306) *
                         C1364 -
                     (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                      C51304 * C653 + C24904 * C307 + C51303 * C318) *
                         C51042) *
                        C51271 +
                    ((C31576 + C31577 + C31578) * C1363 +
                     (C31579 + C31580 + C31581) * C1358 -
                     (C31996 + C31997 + C31998) * C1364 -
                     (C31999 + C32000 + C32001) * C51042) *
                        C51190) *
                       C50973 * C1490 +
                   (((C25134 + C25133 + C25132) * C1364 -
                     ((C24949 + C24948 + C24947) * C1358 +
                      (C24946 + C24945 + C24944) * C1363) +
                     (C25137 + C25136 + C25135) * C51042) *
                        C51271 +
                    ((C26640 + C26641 + C26642) * C1364 -
                     ((C25319 + C25318 + C25317) * C1358 +
                      (C25316 + C25315 + C25314) * C1363) +
                     (C26643 + C26644 + C26645) * C51042) *
                        C51190) *
                       C50973 * C50997) *
                      C51256 +
                  ((((C31998 + C31997 + C31996) * C1364 -
                     ((C31581 + C31580 + C31579) * C1358 +
                      (C31578 + C31577 + C31576) * C1363) +
                     (C32001 + C32000 + C31999) * C51042) *
                        C51271 +
                    ((C32330 + C32331 + C32332) * C1364 -
                     ((C32166 + C32167 + C32168) * C1358 +
                      (C32169 + C32170 + C32171) * C1363) +
                     (C32333 + C32334 + C32335) * C51042) *
                        C51190) *
                       C50973 * C1490 +
                   (((C25314 + C25315 + C25316) * C1363 +
                     (C25317 + C25318 + C25319) * C1358 -
                     (C26642 + C26641 + C26640) * C1364 -
                     (C26645 + C26644 + C26643) * C51042) *
                        C51271 +
                    ((C25892 + C25893 + C25894) * C1363 +
                     (C25895 + C25896 + C25897) * C1358 -
                     (C24906 * C3637 + C24901 * C3640 + C24905 * C3461 +
                      C51304 * C3465 + C24904 * C1159 + C51303 * C1164) *
                         C1364 -
                     (C24906 * C3641 + C24901 * C3643 + C24905 * C3466 +
                      C51304 * C3470 + C24904 * C1165 + C51303 * C1171) *
                         C51042) *
                        C51190) *
                       C50973 * C50997) *
                      C51068)) /
                (p * q * std::sqrt(p + q));
    d2ee[93] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C1363 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C1358 -
                     (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                      C51304 * C643 + C24904 * C300 + C51303 * C306) *
                         C1364 -
                     (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                      C51304 * C653 + C24904 * C307 + C51303 * C318) *
                         C51042) *
                        C51271 +
                    ((C31576 + C31577 + C31578) * C1363 +
                     (C31579 + C31580 + C31581) * C1358 -
                     (C31996 + C31997 + C31998) * C1364 -
                     (C31999 + C32000 + C32001) * C51042) *
                        C51190) *
                       C50973 * C51247 +
                   (((C25134 + C25133 + C25132) * C1364 -
                     ((C24949 + C24948 + C24947) * C1358 +
                      (C24946 + C24945 + C24944) * C1363) +
                     (C25137 + C25136 + C25135) * C51042) *
                        C51271 +
                    ((C26640 + C26641 + C26642) * C1364 -
                     ((C25319 + C25318 + C25317) * C1358 +
                      (C25316 + C25315 + C25314) * C1363) +
                     (C26643 + C26644 + C26645) * C51042) *
                        C51190) *
                       C50973 * C50997) *
                      C1775 +
                  ((((C31998 + C31997 + C31996) * C1364 -
                     ((C31581 + C31580 + C31579) * C1358 +
                      (C31578 + C31577 + C31576) * C1363) +
                     (C32001 + C32000 + C31999) * C51042) *
                        C51271 +
                    ((C32330 + C32331 + C32332) * C1364 -
                     ((C32166 + C32167 + C32168) * C1358 +
                      (C32169 + C32170 + C32171) * C1363) +
                     (C32333 + C32334 + C32335) * C51042) *
                        C51190) *
                       C50973 * C51247 +
                   (((C25314 + C25315 + C25316) * C1363 +
                     (C25317 + C25318 + C25319) * C1358 -
                     (C26642 + C26641 + C26640) * C1364 -
                     (C26645 + C26644 + C26643) * C51042) *
                        C51271 +
                    ((C25892 + C25893 + C25894) * C1363 +
                     (C25895 + C25896 + C25897) * C1358 -
                     (C24906 * C3637 + C24901 * C3640 + C24905 * C3461 +
                      C51304 * C3465 + C24904 * C1159 + C51303 * C1164) *
                         C1364 -
                     (C24906 * C3641 + C24901 * C3643 + C24905 * C3466 +
                      C51304 * C3470 + C24904 * C1165 + C51303 * C1171) *
                         C51042) *
                        C51190) *
                       C50973 * C50997) *
                      C51068)) /
                (p * q * std::sqrt(p + q));
    d2ee[94] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C1492 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51301 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C1493 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51288 +
                    (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                     C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                        C1494 +
                    (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                     C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                        C1489) *
                       C51271 +
                   ((C31576 + C31577 + C31578) * C1492 +
                    (C31579 + C31580 + C31581) * C51301 -
                    (C31996 + C31997 + C31998) * C1493 -
                    (C31999 + C32000 + C32001) * C51288 +
                    (C32002 + C32003 + C32004) * C1494 +
                    (C32005 + C32006 + C32007) * C1489) *
                       C51190) *
                      C50973 * C50992 * C1775 +
                  (((C31998 + C31997 + C31996) * C1493 -
                    ((C31581 + C31580 + C31579) * C51301 +
                     (C31578 + C31577 + C31576) * C1492) +
                    (C32001 + C32000 + C31999) * C51288 -
                    (C32004 + C32003 + C32002) * C1494 -
                    (C32007 + C32006 + C32005) * C1489) *
                       C51271 +
                   ((C32330 + C32331 + C32332) * C1493 -
                    ((C32166 + C32167 + C32168) * C51301 +
                     (C32169 + C32170 + C32171) * C1492) +
                    (C32333 + C32334 + C32335) * C51288 -
                    (C24906 * C20950 + C24901 * C20951 + C24905 * C3636 +
                     C51304 * C3638 + C24904 * C3460 + C51303 * C3463) *
                        C1494 -
                    (C24906 * C20952 + C24901 * C20953 + C24905 * C3639 +
                     C51304 * C3642 + C24904 * C3464 + C51303 * C3469) *
                        C1489) *
                       C51190) *
                      C50973 * C50992 * C51068)) /
                (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C1363 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C1358 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C1364 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51042) *
                       C51271 +
                   ((C31576 + C31577 + C31578) * C1363 +
                    (C31579 + C31580 + C31581) * C1358 -
                    (C31996 + C31997 + C31998) * C1364 -
                    (C31999 + C32000 + C32001) * C51042) *
                       C51190) *
                      C50973 * C50992 * C51302 +
                  (((C31998 + C31997 + C31996) * C1364 -
                    ((C31581 + C31580 + C31579) * C1358 +
                     (C31578 + C31577 + C31576) * C1363) +
                    (C32001 + C32000 + C31999) * C51042) *
                       C51271 +
                   ((C32330 + C32331 + C32332) * C1364 -
                    ((C32166 + C32167 + C32168) * C1358 +
                     (C32169 + C32170 + C32171) * C1363) +
                    (C32333 + C32334 + C32335) * C51042) *
                       C51190) *
                      C50973 * C50992 * C51291 +
                  (((C32171 + C32170 + C32169) * C1363 +
                    (C32168 + C32167 + C32166) * C1358 -
                    (C32332 + C32331 + C32330) * C1364 -
                    (C32335 + C32334 + C32333) * C51042) *
                       C51271 +
                   ((C32446 + C32447 + C32448) * C1363 +
                    (C32449 + C32450 + C32451) * C1358 -
                    (C24906 * C21020 + C24901 * C21022 + C24905 * C3744 +
                     C51304 * C3752 + C24904 * C3745 + C51303 * C3753) *
                        C1364 -
                    (C24906 * C21021 + C24901 * C21023 + C24905 * C3750 +
                     C51304 * C3756 + C24904 * C3751 + C51303 * C3757) *
                        C51042) *
                       C51190) *
                      C50973 * C50992 * C2019)) /
                (p * q * std::sqrt(p + q));
    d2ee[96] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C635 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C630 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C636 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C631 +
                    (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                     C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                        C637 +
                    (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                     C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                        C632) *
                       C51271 +
                   ((C31576 + C31577 + C31578) * C635 +
                    (C31579 + C31580 + C31581) * C630 -
                    (C24906 * C3298 + C24901 * C3302 + C24905 * C884 +
                     C51304 * C893 + C24904 * C883 + C51303 * C891) *
                        C636 -
                    (C24906 * C3303 + C24901 * C3310 + C24905 * C894 +
                     C51304 * C908 + C24904 * C892 + C51303 * C907) *
                        C631 +
                    (C24904 * C884 + C51303 * C893 + C24905 * C3298 +
                     C51304 * C3302 + C24906 * C3299 + C24901 * C3304) *
                        C637 +
                    (C24904 * C894 + C51303 * C908 + C24905 * C3303 +
                     C51304 * C3310 + C24906 * C3305 + C24901 * C3311) *
                        C632) *
                       C51190) *
                      C50973 * C51247 +
                  (((C25134 + C25133 + C25132) * C636 -
                    ((C24949 + C24948 + C24947) * C630 +
                     (C24946 + C24945 + C24944) * C635) +
                    (C25137 + C25136 + C25135) * C631 -
                    (C25486 + C25485 + C25484) * C637 -
                    (C25489 + C25488 + C25487) * C632) *
                       C51271 +
                   ((C26640 + C26641 + C26642) * C636 -
                    ((C25319 + C25318 + C25317) * C630 +
                     (C25316 + C25315 + C25314) * C635) +
                    (C26643 + C26644 + C26645) * C631 -
                    (C24906 * C3301 + C24901 * C3308 + C24905 * C3300 +
                     C51304 * C3306 + C24904 * C886 + C51303 * C897) *
                        C637 -
                    (C24906 * C3309 + C24901 * C3313 + C24905 * C3307 +
                     C51304 * C3312 + C24904 * C898 + C51303 * C910) *
                        C632) *
                       C51190) *
                      C50973 * C50997) *
                 C51056) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C118 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51026) *
                       C51271 +
                   ((C24904 * C476 + C51303 * C487 + C24905 * C883 +
                     C51304 * C891 + C24906 * C884 + C24901 * C893) *
                        C118 +
                    (C24904 * C486 + C51303 * C494 + C24905 * C892 +
                     C51304 * C907 + C24906 * C894 + C24901 * C908) *
                        C51026) *
                       C51190) *
                      C50973 * C112 -
                  (((C25319 + C25318 + C25317) * C51026 +
                    (C25316 + C25315 + C25314) * C118) *
                       C51190 +
                   ((C24949 + C24948 + C24947) * C51026 +
                    (C24946 + C24945 + C24944) * C118) *
                       C51271) *
                      C50973 * C113 +
                  (((C24955 + C24954 + C24953) * C118 +
                    (C24952 + C24951 + C24950) * C51026) *
                       C51271 +
                   ((C25320 + C25321 + C25322) * C118 +
                    (C25323 + C25324 + C25325) * C51026) *
                       C51190) *
                      C50973 * C114 -
                  (((C24906 * C906 + C24901 * C914 + C24905 * C904 +
                     C51304 * C913 + C24904 * C483 + C51303 * C492) *
                        C51026 +
                    (C24906 * C890 + C24901 * C905 + C24905 * C889 +
                     C51304 * C903 + C24904 * C474 + C51303 * C482) *
                        C118) *
                       C51190 +
                   ((C24961 + C24960 + C24959) * C51026 +
                    (C24958 + C24957 + C24956) * C118) *
                       C51271) *
                      C50973 * C115) *
                 C51056) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C118 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C51026) *
                        C51271 +
                    ((C31576 + C31577 + C31578) * C118 +
                     (C31579 + C31580 + C31581) * C51026) *
                        C51190) *
                       C50973 * C51247 -
                   (((C25319 + C25318 + C25317) * C51026 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51190 +
                    ((C24949 + C24948 + C24947) * C51026 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51271) *
                       C50973 * C50997) *
                      C1013 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51026) *
                        C51271 +
                    ((C25892 + C25893 + C25894) * C118 +
                     (C25895 + C25896 + C25897) * C51026) *
                        C51190) *
                       C50973 * C50997 -
                   (((C32166 + C32167 + C32168) * C51026 +
                     (C32169 + C32170 + C32171) * C118) *
                        C51190 +
                    ((C31581 + C31580 + C31579) * C51026 +
                     (C31578 + C31577 + C31576) * C118) *
                        C51271) *
                       C50973 * C51247) *
                      C1014 +
                  ((((C32171 + C32170 + C32169) * C118 +
                     (C32168 + C32167 + C32166) * C51026) *
                        C51271 +
                    ((C24904 * C1247 + C51303 * C1255 + C24905 * C3745 +
                      C51304 * C3753 + C24906 * C3744 + C24901 * C3752) *
                         C118 +
                     (C24904 * C1254 + C51303 * C1259 + C24905 * C3751 +
                      C51304 * C3757 + C24906 * C3750 + C24901 * C3756) *
                         C51026) *
                        C51190) *
                       C50973 * C51247 -
                   (((C24906 * C3746 + C24901 * C3754 + C24905 * C3747 +
                      C51304 * C3755 + C24904 * C1252 + C51303 * C1258) *
                         C51026 +
                     (C24906 * C3742 + C24901 * C3748 + C24905 * C3743 +
                      C51304 * C3749 + C24904 * C1246 + C51303 * C1253) *
                         C118) *
                        C51190 +
                    ((C25897 + C25896 + C25895) * C51026 +
                     (C25894 + C25893 + C25892) * C118) *
                        C51271) *
                       C50973 * C50997) *
                      C1015)) /
                    (p * q * std::sqrt(p + q));
    d2ee[97] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                    C51304 * C306 + C24906 * C638 + C24901 * C643) *
                       C765 +
                   (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                    C51304 * C318 + C24906 * C644 + C24901 * C653) *
                       C760 -
                   (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                    C51304 * C643 + C24904 * C300 + C51303 * C306) *
                       C766 -
                   (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                    C51304 * C653 + C24904 * C307 + C51303 * C318) *
                       C761 +
                   (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                    C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                       C767 +
                   (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                    C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                       C762 -
                   (C24906 * C3144 + C24901 * C3146 + C24905 * C3016 +
                    C51304 * C3019 + C24904 * C769 + C51303 * C773) *
                       C768 -
                   (C24906 * C3147 + C24901 * C3150 + C24905 * C3020 +
                    C51304 * C3025 + C24904 * C774 + C51303 * C781) *
                       C763) *
                      C51271 +
                  ((C31576 + C31577 + C31578) * C765 +
                   (C31579 + C31580 + C31581) * C760 -
                   (C24906 * C3298 + C24901 * C3302 + C24905 * C884 +
                    C51304 * C893 + C24904 * C883 + C51303 * C891) *
                       C766 -
                   (C24906 * C3303 + C24901 * C3310 + C24905 * C894 +
                    C51304 * C908 + C24904 * C892 + C51303 * C907) *
                       C761 +
                   (C24904 * C884 + C51303 * C893 + C24905 * C3298 +
                    C51304 * C3302 + C24906 * C3299 + C24901 * C3304) *
                       C767 +
                   (C24904 * C894 + C51303 * C908 + C24905 * C3303 +
                    C51304 * C3310 + C24906 * C3305 + C24901 * C3311) *
                       C762 -
                   (C24906 * C20750 + C24901 * C20751 + C24905 * C3299 +
                    C51304 * C3304 + C24904 * C3298 + C51303 * C3302) *
                       C768 -
                   (C24906 * C20752 + C24901 * C20753 + C24905 * C3305 +
                    C51304 * C3311 + C24904 * C3303 + C51303 * C3310) *
                       C763) *
                      C51190) *
                 C50973 * C50992 * C51056) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C298 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51254 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C299 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51042) *
                       C51271 +
                   ((C24904 * C476 + C51303 * C487 + C24905 * C883 +
                     C51304 * C891 + C24906 * C884 + C24901 * C893) *
                        C298 +
                    (C24904 * C486 + C51303 * C494 + C24905 * C892 +
                     C51304 * C907 + C24906 * C894 + C24901 * C908) *
                        C51254 -
                    (C24906 * C3298 + C24901 * C3302 + C24905 * C884 +
                     C51304 * C893 + C24904 * C883 + C51303 * C891) *
                        C299 -
                    (C24906 * C3303 + C24901 * C3310 + C24905 * C894 +
                     C51304 * C908 + C24904 * C892 + C51303 * C907) *
                        C51042) *
                       C51190) *
                      C50973 * C295 +
                  (((C25134 + C25133 + C25132) * C299 -
                    ((C24949 + C24948 + C24947) * C51254 +
                     (C24946 + C24945 + C24944) * C298) +
                    (C25137 + C25136 + C25135) * C51042) *
                       C51271 +
                   ((C26640 + C26641 + C26642) * C299 -
                    ((C25319 + C25318 + C25317) * C51254 +
                     (C25316 + C25315 + C25314) * C298) +
                    (C26643 + C26644 + C26645) * C51042) *
                       C51190) *
                      C50973 * C296 +
                  (((C24955 + C24954 + C24953) * C298 +
                    (C24952 + C24951 + C24950) * C51254 -
                    (C25140 + C25139 + C25138) * C299 -
                    (C25143 + C25142 + C25141) * C51042) *
                       C51271 +
                   ((C25320 + C25321 + C25322) * C298 +
                    (C25323 + C25324 + C25325) * C51254 -
                    (C24906 * C4244 + C24901 * C4245 + C24905 * C888 +
                     C51304 * C901 + C24904 * C887 + C51303 * C899) *
                        C299 -
                    (C24906 * C4246 + C24901 * C4247 + C24905 * C902 +
                     C51304 * C912 + C24904 * C900 + C51303 * C911) *
                        C51042) *
                       C51190) *
                      C50973 * C297) *
                 C51056) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C298 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51254 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C299 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C51042) *
                       C51271 +
                   ((C31576 + C31577 + C31578) * C298 +
                    (C31579 + C31580 + C31581) * C51254 -
                    (C31996 + C31997 + C31998) * C299 -
                    (C31999 + C32000 + C32001) * C51042) *
                       C51190) *
                      C50973 * C50992 * C1013 +
                  (((C31998 + C31997 + C31996) * C299 -
                    ((C31581 + C31580 + C31579) * C51254 +
                     (C31578 + C31577 + C31576) * C298) +
                    (C32001 + C32000 + C31999) * C51042) *
                       C51271 +
                   ((C32330 + C32331 + C32332) * C299 -
                    ((C32166 + C32167 + C32168) * C51254 +
                     (C32169 + C32170 + C32171) * C298) +
                    (C32333 + C32334 + C32335) * C51042) *
                       C51190) *
                      C50973 * C50992 * C1014 +
                  (((C32171 + C32170 + C32169) * C298 +
                    (C32168 + C32167 + C32166) * C51254 -
                    (C32332 + C32331 + C32330) * C299 -
                    (C32335 + C32334 + C32333) * C51042) *
                       C51271 +
                   ((C24904 * C1247 + C51303 * C1255 + C24905 * C3745 +
                     C51304 * C3753 + C24906 * C3744 + C24901 * C3752) *
                        C298 +
                    (C24904 * C1254 + C51303 * C1259 + C24905 * C3751 +
                     C51304 * C3757 + C24906 * C3750 + C24901 * C3756) *
                        C51254 -
                    (C24906 * C21020 + C24901 * C21022 + C24905 * C3744 +
                     C51304 * C3752 + C24904 * C3745 + C51303 * C3753) *
                        C299 -
                    (C24906 * C21021 + C24901 * C21023 + C24905 * C3750 +
                     C51304 * C3756 + C24904 * C3751 + C51303 * C3757) *
                        C51042) *
                       C51190) *
                      C50973 * C50992 * C1015)) /
                    (p * q * std::sqrt(p + q));
    d2ee[98] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C635 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C630 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C636 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C631 +
                    (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                     C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                        C637 +
                    (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                     C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                        C632) *
                       C51271 +
                   ((C31576 + C31577 + C31578) * C635 +
                    (C31579 + C31580 + C31581) * C630 -
                    (C31996 + C31997 + C31998) * C636 -
                    (C31999 + C32000 + C32001) * C631 +
                    (C32002 + C32003 + C32004) * C637 +
                    (C32005 + C32006 + C32007) * C632) *
                       C51190) *
                      C50973 * C50992 * C51256 +
                  (((C31998 + C31997 + C31996) * C636 -
                    ((C31581 + C31580 + C31579) * C630 +
                     (C31578 + C31577 + C31576) * C635) +
                    (C32001 + C32000 + C31999) * C631 -
                    (C32004 + C32003 + C32002) * C637 -
                    (C32007 + C32006 + C32005) * C632) *
                       C51271 +
                   ((C24904 * C1158 + C51303 * C1162 + C24905 * C3460 +
                     C51304 * C3463 + C24906 * C3636 + C24901 * C3638) *
                        C636 -
                    ((C24906 * C3464 + C24901 * C3469 + C24905 * C1163 +
                      C51304 * C1170 + C24904 * C1022 + C51303 * C1031) *
                         C630 +
                     (C24906 * C3460 + C24901 * C3463 + C24905 * C1158 +
                      C51304 * C1162 + C24904 * C1016 + C51303 * C1021) *
                         C635) +
                    (C24904 * C1163 + C51303 * C1170 + C24905 * C3464 +
                     C51304 * C3469 + C24906 * C3639 + C24901 * C3642) *
                        C631 -
                    (C24906 * C20950 + C24901 * C20951 + C24905 * C3636 +
                     C51304 * C3638 + C24904 * C3460 + C51303 * C3463) *
                        C637 -
                    (C24906 * C20952 + C24901 * C20953 + C24905 * C3639 +
                     C51304 * C3642 + C24904 * C3464 + C51303 * C3469) *
                        C632) *
                       C51190) *
                      C50973 * C50992 * C51068)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C118 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C51026) *
                        C51271 +
                    ((C31576 + C31577 + C31578) * C118 +
                     (C31579 + C31580 + C31581) * C51026) *
                        C51190) *
                       C50973 * C295 -
                   (((C25319 + C25318 + C25317) * C51026 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51190 +
                    ((C24949 + C24948 + C24947) * C51026 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51271) *
                       C50973 * C296 +
                   (((C24955 + C24954 + C24953) * C118 +
                     (C24952 + C24951 + C24950) * C51026) *
                        C51271 +
                    ((C25320 + C25321 + C25322) * C118 +
                     (C25323 + C25324 + C25325) * C51026) *
                        C51190) *
                       C50973 * C297) *
                      C51256 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51026) *
                        C51271 +
                    ((C25892 + C25893 + C25894) * C118 +
                     (C25895 + C25896 + C25897) * C51026) *
                        C51190) *
                       C50973 * C296 -
                   (((C24906 * C3464 + C24901 * C3469 + C24905 * C1163 +
                      C51304 * C1170 + C24904 * C1022 + C51303 * C1031) *
                         C51026 +
                     (C24906 * C3460 + C24901 * C3463 + C24905 * C1158 +
                      C51304 * C1162 + C24904 * C1016 + C51303 * C1021) *
                         C118) *
                        C51190 +
                    ((C31581 + C31580 + C31579) * C51026 +
                     (C31578 + C31577 + C31576) * C118) *
                        C51271) *
                       C50973 * C295 -
                   (((C24906 * C3467 + C24901 * C3471 + C24905 * C1167 +
                      C51304 * C1172 + C24904 * C1026 + C51303 * C1033) *
                         C51026 +
                     (C24906 * C3462 + C24901 * C3468 + C24905 * C1160 +
                      C51304 * C1166 + C24904 * C1018 + C51303 * C1025) *
                         C118) *
                        C51190 +
                    ((C25325 + C25324 + C25323) * C51026 +
                     (C25322 + C25321 + C25320) * C118) *
                        C51271) *
                       C50973 * C297) *
                      C51068)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C118 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C51026) *
                       C51271 +
                   ((C31576 + C31577 + C31578) * C118 +
                    (C31579 + C31580 + C31581) * C51026) *
                       C51190) *
                      C50973 * C50992 * C1240 -
                  (((C32166 + C32167 + C32168) * C51026 +
                    (C32169 + C32170 + C32171) * C118) *
                       C51190 +
                   ((C31581 + C31580 + C31579) * C51026 +
                    (C31578 + C31577 + C31576) * C118) *
                       C51271) *
                      C50973 * C50992 * C1241 +
                  (((C32171 + C32170 + C32169) * C118 +
                    (C32168 + C32167 + C32166) * C51026) *
                       C51271 +
                   ((C32446 + C32447 + C32448) * C118 +
                    (C32449 + C32450 + C32451) * C51026) *
                       C51190) *
                      C50973 * C50992 * C1242 -
                  (((C24906 * C23182 + C24901 * C23183 + C24905 * C6466 +
                     C51304 * C6469 + C24904 * C6290 + C51303 * C6295) *
                        C51026 +
                    (C24906 * C23180 + C24901 * C23181 + C24905 * C6463 +
                     C51304 * C6465 + C24904 * C6286 + C51303 * C6289) *
                        C118) *
                       C51190 +
                   ((C32451 + C32450 + C32449) * C51026 +
                    (C32448 + C32447 + C32446) * C118) *
                       C51271) *
                      C50973 * C50992 * C1243)) /
                    (p * q * std::sqrt(p + q));
    d2ee[99] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C118 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C51026) *
                        C51271 +
                    ((C31576 + C31577 + C31578) * C118 +
                     (C31579 + C31580 + C31581) * C51026) *
                        C51190) *
                       C50973 * C51300 -
                   (((C25319 + C25318 + C25317) * C51026 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51190 +
                    ((C24949 + C24948 + C24947) * C51026 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51271) *
                       C50973 * C51285 +
                   (((C24955 + C24954 + C24953) * C118 +
                     (C24952 + C24951 + C24950) * C51026) *
                        C51271 +
                    ((C25320 + C25321 + C25322) * C118 +
                     (C25323 + C25324 + C25325) * C51026) *
                        C51190) *
                       C50973 * C1362) *
                      C1775 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51026) *
                        C51271 +
                    ((C25892 + C25893 + C25894) * C118 +
                     (C25895 + C25896 + C25897) * C51026) *
                        C51190) *
                       C50973 * C51285 -
                   (((C32166 + C32167 + C32168) * C51026 +
                     (C32169 + C32170 + C32171) * C118) *
                        C51190 +
                    ((C31581 + C31580 + C31579) * C51026 +
                     (C31578 + C31577 + C31576) * C118) *
                        C51271) *
                       C50973 * C51300 -
                   (((C24906 * C3467 + C24901 * C3471 + C24905 * C1167 +
                      C51304 * C1172 + C24904 * C1026 + C51303 * C1033) *
                         C51026 +
                     (C24906 * C3462 + C24901 * C3468 + C24905 * C1160 +
                      C51304 * C1166 + C24904 * C1018 + C51303 * C1025) *
                         C118) *
                        C51190 +
                    ((C25325 + C25324 + C25323) * C51026 +
                     (C25322 + C25321 + C25320) * C118) *
                        C51271) *
                       C50973 * C1362) *
                      C51068)) /
                (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                       C51304 * C306 + C24906 * C638 + C24901 * C643) *
                          C298 +
                      (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                       C51304 * C318 + C24906 * C644 + C24901 * C653) *
                          C51254 -
                      (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                       C51304 * C643 + C24904 * C300 + C51303 * C306) *
                          C299 -
                      (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                       C51304 * C653 + C24904 * C307 + C51303 * C318) *
                          C51042) *
                         C51271 +
                     ((C31576 + C31577 + C31578) * C298 +
                      (C31579 + C31580 + C31581) * C51254 -
                      (C31996 + C31997 + C31998) * C299 -
                      (C31999 + C32000 + C32001) * C51042) *
                         C51190) *
                        C50973 * C1490 +
                    (((C25134 + C25133 + C25132) * C299 -
                      ((C24949 + C24948 + C24947) * C51254 +
                       (C24946 + C24945 + C24944) * C298) +
                      (C25137 + C25136 + C25135) * C51042) *
                         C51271 +
                     ((C26640 + C26641 + C26642) * C299 -
                      ((C25319 + C25318 + C25317) * C51254 +
                       (C25316 + C25315 + C25314) * C298) +
                      (C26643 + C26644 + C26645) * C51042) *
                         C51190) *
                        C50973 * C50997) *
                       C1775 +
                   ((((C31998 + C31997 + C31996) * C299 -
                      ((C31581 + C31580 + C31579) * C51254 +
                       (C31578 + C31577 + C31576) * C298) +
                      (C32001 + C32000 + C31999) * C51042) *
                         C51271 +
                     ((C32330 + C32331 + C32332) * C299 -
                      ((C32166 + C32167 + C32168) * C51254 +
                       (C32169 + C32170 + C32171) * C298) +
                      (C32333 + C32334 + C32335) * C51042) *
                         C51190) *
                        C50973 * C1490 +
                    (((C25314 + C25315 + C25316) * C298 +
                      (C25317 + C25318 + C25319) * C51254 -
                      (C26642 + C26641 + C26640) * C299 -
                      (C26645 + C26644 + C26643) * C51042) *
                         C51271 +
                     ((C25892 + C25893 + C25894) * C298 +
                      (C25895 + C25896 + C25897) * C51254 -
                      (C24906 * C3637 + C24901 * C3640 + C24905 * C3461 +
                       C51304 * C3465 + C24904 * C1159 + C51303 * C1164) *
                          C299 -
                      (C24906 * C3641 + C24901 * C3643 + C24905 * C3466 +
                       C51304 * C3470 + C24904 * C1165 + C51303 * C1171) *
                          C51042) *
                         C51190) *
                        C50973 * C50997) *
                       C51068)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                       C51304 * C306 + C24906 * C638 + C24901 * C643) *
                          C118 +
                      (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                       C51304 * C318 + C24906 * C644 + C24901 * C653) *
                          C51026) *
                         C51271 +
                     ((C31576 + C31577 + C31578) * C118 +
                      (C31579 + C31580 + C31581) * C51026) *
                         C51190) *
                        C50973 * C1490 -
                    (((C25319 + C25318 + C25317) * C51026 +
                      (C25316 + C25315 + C25314) * C118) *
                         C51190 +
                     ((C24949 + C24948 + C24947) * C51026 +
                      (C24946 + C24945 + C24944) * C118) *
                         C51271) *
                        C50973 * C50997) *
                       C51302 +
                   ((((C25314 + C25315 + C25316) * C118 +
                      (C25317 + C25318 + C25319) * C51026) *
                         C51271 +
                     ((C25892 + C25893 + C25894) * C118 +
                      (C25895 + C25896 + C25897) * C51026) *
                         C51190) *
                        C50973 * C50997 -
                    (((C32166 + C32167 + C32168) * C51026 +
                      (C32169 + C32170 + C32171) * C118) *
                         C51190 +
                     ((C31581 + C31580 + C31579) * C51026 +
                      (C31578 + C31577 + C31576) * C118) *
                         C51271) *
                        C50973 * C1490) *
                       C51291 +
                   ((((C32171 + C32170 + C32169) * C118 +
                      (C32168 + C32167 + C32166) * C51026) *
                         C51271 +
                     ((C32446 + C32447 + C32448) * C118 +
                      (C32449 + C32450 + C32451) * C51026) *
                         C51190) *
                        C50973 * C1490 -
                    (((C24906 * C3746 + C24901 * C3754 + C24905 * C3747 +
                       C51304 * C3755 + C24904 * C1252 + C51303 * C1258) *
                          C51026 +
                      (C24906 * C3742 + C24901 * C3748 + C24905 * C3743 +
                       C51304 * C3749 + C24904 * C1246 + C51303 * C1253) *
                          C118) *
                         C51190 +
                     ((C25897 + C25896 + C25895) * C51026 +
                      (C25894 + C25893 + C25892) * C118) *
                         C51271) *
                        C50973 * C50997) *
                       C2019)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C118 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C51026) *
                        C51271 +
                    ((C24904 * C476 + C51303 * C487 + C24905 * C883 +
                      C51304 * C891 + C24906 * C884 + C24901 * C893) *
                         C118 +
                     (C24904 * C486 + C51303 * C494 + C24905 * C892 +
                      C51304 * C907 + C24906 * C894 + C24901 * C908) *
                         C51026) *
                        C51190) *
                       C50973 * C112 -
                   (((C25319 + C25318 + C25317) * C51026 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51190 +
                    ((C24949 + C24948 + C24947) * C51026 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51271) *
                       C50973 * C113 +
                   (((C24955 + C24954 + C24953) * C118 +
                     (C24952 + C24951 + C24950) * C51026) *
                        C51271 +
                    ((C25320 + C25321 + C25322) * C118 +
                     (C25323 + C25324 + C25325) * C51026) *
                        C51190) *
                       C50973 * C114 -
                   (((C24906 * C906 + C24901 * C914 + C24905 * C904 +
                      C51304 * C913 + C24904 * C483 + C51303 * C492) *
                         C51026 +
                     (C24906 * C890 + C24901 * C905 + C24905 * C889 +
                      C51304 * C903 + C24904 * C474 + C51303 * C482) *
                         C118) *
                        C51190 +
                    ((C24961 + C24960 + C24959) * C51026 +
                     (C24958 + C24957 + C24956) * C118) *
                        C51271) *
                       C50973 * C115) *
                  C51056) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C635 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C630 -
                     (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                      C51304 * C643 + C24904 * C300 + C51303 * C306) *
                         C636 -
                     (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                      C51304 * C653 + C24904 * C307 + C51303 * C318) *
                         C631 +
                     (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                      C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                         C637 +
                     (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                      C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                         C632) *
                        C51271 +
                    ((C31576 + C31577 + C31578) * C635 +
                     (C31579 + C31580 + C31581) * C630 -
                     (C24906 * C3298 + C24901 * C3302 + C24905 * C884 +
                      C51304 * C893 + C24904 * C883 + C51303 * C891) *
                         C636 -
                     (C24906 * C3303 + C24901 * C3310 + C24905 * C894 +
                      C51304 * C908 + C24904 * C892 + C51303 * C907) *
                         C631 +
                     (C24904 * C884 + C51303 * C893 + C24905 * C3298 +
                      C51304 * C3302 + C24906 * C3299 + C24901 * C3304) *
                         C637 +
                     (C24904 * C894 + C51303 * C908 + C24905 * C3303 +
                      C51304 * C3310 + C24906 * C3305 + C24901 * C3311) *
                         C632) *
                        C51190) *
                       C50973 * C51247 +
                   (((C25134 + C25133 + C25132) * C636 -
                     ((C24949 + C24948 + C24947) * C630 +
                      (C24946 + C24945 + C24944) * C635) +
                     (C25137 + C25136 + C25135) * C631 -
                     (C25486 + C25485 + C25484) * C637 -
                     (C25489 + C25488 + C25487) * C632) *
                        C51271 +
                    ((C26640 + C26641 + C26642) * C636 -
                     ((C25319 + C25318 + C25317) * C630 +
                      (C25316 + C25315 + C25314) * C635) +
                     (C26643 + C26644 + C26645) * C631 -
                     (C24906 * C3301 + C24901 * C3308 + C24905 * C3300 +
                      C51304 * C3306 + C24904 * C886 + C51303 * C897) *
                         C637 -
                     (C24906 * C3309 + C24901 * C3313 + C24905 * C3307 +
                      C51304 * C3312 + C24904 * C898 + C51303 * C910) *
                         C632) *
                        C51190) *
                       C50973 * C50997) *
                  C51056) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C298 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C51254 -
                     (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                      C51304 * C643 + C24904 * C300 + C51303 * C306) *
                         C299 -
                     (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                      C51304 * C653 + C24904 * C307 + C51303 * C318) *
                         C51042) *
                        C51271 +
                    ((C24904 * C476 + C51303 * C487 + C24905 * C883 +
                      C51304 * C891 + C24906 * C884 + C24901 * C893) *
                         C298 +
                     (C24904 * C486 + C51303 * C494 + C24905 * C892 +
                      C51304 * C907 + C24906 * C894 + C24901 * C908) *
                         C51254 -
                     (C24906 * C3298 + C24901 * C3302 + C24905 * C884 +
                      C51304 * C893 + C24904 * C883 + C51303 * C891) *
                         C299 -
                     (C24906 * C3303 + C24901 * C3310 + C24905 * C894 +
                      C51304 * C908 + C24904 * C892 + C51303 * C907) *
                         C51042) *
                        C51190) *
                       C50973 * C295 +
                   (((C25134 + C25133 + C25132) * C299 -
                     ((C24949 + C24948 + C24947) * C51254 +
                      (C24946 + C24945 + C24944) * C298) +
                     (C25137 + C25136 + C25135) * C51042) *
                        C51271 +
                    ((C26640 + C26641 + C26642) * C299 -
                     ((C25319 + C25318 + C25317) * C51254 +
                      (C25316 + C25315 + C25314) * C298) +
                     (C26643 + C26644 + C26645) * C51042) *
                        C51190) *
                       C50973 * C296 +
                   (((C24955 + C24954 + C24953) * C298 +
                     (C24952 + C24951 + C24950) * C51254 -
                     (C25140 + C25139 + C25138) * C299 -
                     (C25143 + C25142 + C25141) * C51042) *
                        C51271 +
                    ((C25320 + C25321 + C25322) * C298 +
                     (C25323 + C25324 + C25325) * C51254 -
                     (C24906 * C4244 + C24901 * C4245 + C24905 * C888 +
                      C51304 * C901 + C24904 * C887 + C51303 * C899) *
                         C299 -
                     (C24906 * C4246 + C24901 * C4247 + C24905 * C902 +
                      C51304 * C912 + C24904 * C900 + C51303 * C911) *
                         C51042) *
                        C51190) *
                       C50973 * C297) *
                  C51056) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                     C51304 * C306 + C24906 * C638 + C24901 * C643) *
                        C765 +
                    (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                     C51304 * C318 + C24906 * C644 + C24901 * C653) *
                        C760 -
                    (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                     C51304 * C643 + C24904 * C300 + C51303 * C306) *
                        C766 -
                    (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                     C51304 * C653 + C24904 * C307 + C51303 * C318) *
                        C761 +
                    (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                     C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                        C767 +
                    (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                     C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                        C762 -
                    (C24906 * C3144 + C24901 * C3146 + C24905 * C3016 +
                     C51304 * C3019 + C24904 * C769 + C51303 * C773) *
                        C768 -
                    (C24906 * C3147 + C24901 * C3150 + C24905 * C3020 +
                     C51304 * C3025 + C24904 * C774 + C51303 * C781) *
                        C763) *
                       C51271 +
                   ((C31576 + C31577 + C31578) * C765 +
                    (C31579 + C31580 + C31581) * C760 -
                    (C24906 * C3298 + C24901 * C3302 + C24905 * C884 +
                     C51304 * C893 + C24904 * C883 + C51303 * C891) *
                        C766 -
                    (C24906 * C3303 + C24901 * C3310 + C24905 * C894 +
                     C51304 * C908 + C24904 * C892 + C51303 * C907) *
                        C761 +
                    (C24904 * C884 + C51303 * C893 + C24905 * C3298 +
                     C51304 * C3302 + C24906 * C3299 + C24901 * C3304) *
                        C767 +
                    (C24904 * C894 + C51303 * C908 + C24905 * C3303 +
                     C51304 * C3310 + C24906 * C3305 + C24901 * C3311) *
                        C762 -
                    (C24906 * C20750 + C24901 * C20751 + C24905 * C3299 +
                     C51304 * C3304 + C24904 * C3298 + C51303 * C3302) *
                        C768 -
                    (C24906 * C20752 + C24901 * C20753 + C24905 * C3305 +
                     C51304 * C3311 + C24904 * C3303 + C51303 * C3310) *
                        C763) *
                       C51190) *
                  C50973 * C50992 * C51056) /
                     (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                       C51304 * C306 + C24906 * C638 + C24901 * C643) *
                          C118 +
                      (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                       C51304 * C318 + C24906 * C644 + C24901 * C653) *
                          C51026) *
                         C51271 +
                     ((C31576 + C31577 + C31578) * C118 +
                      (C31579 + C31580 + C31581) * C51026) *
                         C51190) *
                        C50973 * C295 -
                    (((C25319 + C25318 + C25317) * C51026 +
                      (C25316 + C25315 + C25314) * C118) *
                         C51190 +
                     ((C24949 + C24948 + C24947) * C51026 +
                      (C24946 + C24945 + C24944) * C118) *
                         C51271) *
                        C50973 * C296 +
                    (((C24955 + C24954 + C24953) * C118 +
                      (C24952 + C24951 + C24950) * C51026) *
                         C51271 +
                     ((C25320 + C25321 + C25322) * C118 +
                      (C25323 + C25324 + C25325) * C51026) *
                         C51190) *
                        C50973 * C297) *
                       C51256 +
                   ((((C25314 + C25315 + C25316) * C118 +
                      (C25317 + C25318 + C25319) * C51026) *
                         C51271 +
                     ((C25892 + C25893 + C25894) * C118 +
                      (C25895 + C25896 + C25897) * C51026) *
                         C51190) *
                        C50973 * C296 -
                    (((C24906 * C3464 + C24901 * C3469 + C24905 * C1163 +
                       C51304 * C1170 + C24904 * C1022 + C51303 * C1031) *
                          C51026 +
                      (C24906 * C3460 + C24901 * C3463 + C24905 * C1158 +
                       C51304 * C1162 + C24904 * C1016 + C51303 * C1021) *
                          C118) *
                         C51190 +
                     ((C31581 + C31580 + C31579) * C51026 +
                      (C31578 + C31577 + C31576) * C118) *
                         C51271) *
                        C50973 * C295 -
                    (((C24906 * C3467 + C24901 * C3471 + C24905 * C1167 +
                       C51304 * C1172 + C24904 * C1026 + C51303 * C1033) *
                          C51026 +
                      (C24906 * C3462 + C24901 * C3468 + C24905 * C1160 +
                       C51304 * C1166 + C24904 * C1018 + C51303 * C1025) *
                          C118) *
                         C51190 +
                     ((C25325 + C25324 + C25323) * C51026 +
                      (C25322 + C25321 + C25320) * C118) *
                         C51271) *
                        C50973 * C297) *
                       C51068)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C24904 * C119 + C51303 * C126 + C24905 * C300 +
                      C51304 * C306 + C24906 * C638 + C24901 * C643) *
                         C635 +
                     (C24904 * C127 + C51303 * C140 + C24905 * C307 +
                      C51304 * C318 + C24906 * C644 + C24901 * C653) *
                         C630 -
                     (C24906 * C769 + C24901 * C773 + C24905 * C638 +
                      C51304 * C643 + C24904 * C300 + C51303 * C306) *
                         C636 -
                     (C24906 * C774 + C24901 * C781 + C24905 * C644 +
                      C51304 * C653 + C24904 * C307 + C51303 * C318) *
                         C631 +
                     (C24904 * C638 + C51303 * C643 + C24905 * C769 +
                      C51304 * C773 + C24906 * C3016 + C24901 * C3019) *
                         C637 +
                     (C24904 * C644 + C51303 * C653 + C24905 * C774 +
                      C51304 * C781 + C24906 * C3020 + C24901 * C3025) *
                         C632) *
                        C51271 +
                    ((C31576 + C31577 + C31578) * C635 +
                     (C31579 + C31580 + C31581) * C630 -
                     (C31996 + C31997 + C31998) * C636 -
                     (C31999 + C32000 + C32001) * C631 +
                     (C32002 + C32003 + C32004) * C637 +
                     (C32005 + C32006 + C32007) * C632) *
                        C51190) *
                       C50973 * C50992 * C51256 +
                   (((C31998 + C31997 + C31996) * C636 -
                     ((C31581 + C31580 + C31579) * C630 +
                      (C31578 + C31577 + C31576) * C635) +
                     (C32001 + C32000 + C31999) * C631 -
                     (C32004 + C32003 + C32002) * C637 -
                     (C32007 + C32006 + C32005) * C632) *
                        C51271 +
                    ((C24904 * C1158 + C51303 * C1162 + C24905 * C3460 +
                      C51304 * C3463 + C24906 * C3636 + C24901 * C3638) *
                         C636 -
                     ((C24906 * C3464 + C24901 * C3469 + C24905 * C1163 +
                       C51304 * C1170 + C24904 * C1022 + C51303 * C1031) *
                          C630 +
                      (C24906 * C3460 + C24901 * C3463 + C24905 * C1158 +
                       C51304 * C1162 + C24904 * C1016 + C51303 * C1021) *
                          C635) +
                     (C24904 * C1163 + C51303 * C1170 + C24905 * C3464 +
                      C51304 * C3469 + C24906 * C3639 + C24901 * C3642) *
                         C631 -
                     (C24906 * C20950 + C24901 * C20951 + C24905 * C3636 +
                      C51304 * C3638 + C24904 * C3460 + C51303 * C3463) *
                         C637 -
                     (C24906 * C20952 + C24901 * C20953 + C24905 * C3639 +
                      C51304 * C3642 + C24904 * C3464 + C51303 * C3469) *
                         C632) *
                        C51190) *
                       C50973 * C50992 * C51068)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C1363 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C1358 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C1364 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51042) *
              C51126 * C50973 * C51300 +
          ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
            C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
               C1364 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C1358 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C1363) +
           (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
            C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
               C51042) *
              C51126 * C50973 * C51285 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
            C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
               C1363 +
           (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
            C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
               C1358 -
           (C20287 * C3018 + C20282 * C3023 + C20286 * C771 + C20281 * C777 +
            C20285 * C640 + C20280 * C647 + C20284 * C302 + C20279 * C310) *
               C1364 -
           (C20287 * C3024 + C20282 * C3027 + C20286 * C778 + C20281 * C783 +
            C20285 * C648 + C20280 * C655 + C20284 * C311 + C20279 * C320) *
               C51042) *
              C51126 * C50973 * C1362) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C1363 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C1358 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C1364 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C51126 * C17450 +
           ((C17488 + C17489) * C1363 + (C17490 + C17491) * C1358 -
            (C17688 + C17689) * C1364 - (C17690 + C17691) * C51042) *
               C51126 * C17451 +
           C18877 * C17452) *
              C51300 +
          (((C17689 + C17688) * C1364 -
            ((C17491 + C17490) * C1358 + (C17489 + C17488) * C1363) +
            (C17691 + C17690) * C51042) *
               C51126 * C17450 +
           ((C17694 + C17693) * C1364 -
            ((C17495 + C17494) * C1358 + (C17493 + C17492) * C1363) +
            (C17696 + C17695) * C51042) *
               C51126 * C17451 +
           ((C17697 + C17698) * C1364 - (C17506 * C1358 + C17507 * C1363) +
            (C17699 + C17700) * C51042) *
               C51126 * C17452) *
              C51285 +
          (C18877 * C17450 +
           ((C17499 + C17498) * C1363 + (C17497 + C17496) * C1358 -
            (C17698 + C17697) * C1364 - (C17700 + C17699) * C51042) *
               C51126 * C17451 +
           ((C17500 + C17501) * C1363 + (C17502 + C17503) * C1358 -
            (C17454 * C642 + C51162 * C651 + C17453 * C304 + C17448 * C314) *
                C1364 -
            (C17454 * C652 + C51162 * C657 + C17453 * C315 + C17448 * C322) *
                C51042) *
               C51126 * C17452) *
              C1362) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C1363 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C1358 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C1364 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C5336 +
           ((C22409 + C22410) * C1363 + (C22411 + C22412) * C1358 -
            (C22839 + C22840) * C1364 - (C22841 + C22842) * C51042) *
               C5337 +
           (C23001 * C1363 + C23002 * C1358 - C23187 * C1364 -
            C23188 * C51042) *
               C5338) *
              C50973 * C51300 +
          (((C17689 + C17688) * C1364 -
            ((C17491 + C17490) * C1358 + (C17489 + C17488) * C1363) +
            (C17691 + C17690) * C51042) *
               C5336 +
           ((C19234 + C19235) * C1364 -
            ((C17881 + C17880) * C1358 + (C17879 + C17878) * C1363) +
            (C19236 + C19237) * C51042) *
               C5337 +
           ((C17453 * C1159 + C17448 * C1164 + C17454 * C3461 +
             C51162 * C3465) *
                C1364 -
            (C23003 * C1358 + C23004 * C1363) +
            (C17453 * C1165 + C17448 * C1171 + C17454 * C3466 +
             C51162 * C3470) *
                C51042) *
               C5338) *
              C50973 * C51285 +
          (C18876 * C5336 +
           ((C17882 + C17883) * C1363 + (C17884 + C17885) * C1358 -
            (C19239 + C19238) * C1364 - (C19241 + C19240) * C51042) *
               C5337 +
           ((C18476 + C18477) * C1363 + (C18478 + C18479) * C1358 -
            (C17454 * C3462 + C51162 * C3468 + C17453 * C1160 +
             C17448 * C1166) *
                C1364 -
            (C17454 * C3467 + C51162 * C3471 + C17453 * C1167 +
             C17448 * C1172) *
                C51042) *
               C5338) *
              C50973 * C1362) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C1492 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51301 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C1493 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51288 +
           (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
            C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
               C1494 +
           (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
            C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
               C1489) *
              C51126 * C50973 * C1490 +
          ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
            C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
               C1493 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51301 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C1492) +
           (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
            C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
               C51288 -
           (C20287 * C3145 + C20282 * C3148 + C20286 * C3017 + C20281 * C3021 +
            C20285 * C770 + C20280 * C775 + C20284 * C639 + C20279 * C645) *
               C1494 -
           (C20287 * C3149 + C20282 * C3151 + C20286 * C3022 + C20281 * C3026 +
            C20285 * C776 + C20280 * C782 + C20284 * C646 + C20279 * C654) *
               C1489) *
              C51126 * C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C1492 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51301 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C1493 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51288 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C1494 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C1489) *
               C51126 * C17450 +
           ((C17488 + C17489) * C1492 + (C17490 + C17491) * C51301 -
            (C17688 + C17689) * C1493 - (C17690 + C17691) * C51288 +
            (C18058 + C18059) * C1494 + (C18060 + C18061) * C1489) *
               C51126 * C17451 +
           (C17504 * C1492 + C17505 * C51301 - C17701 * C1493 -
            C17702 * C51288 + (C18062 + C18063) * C1494 +
            (C18064 + C18065) * C1489) *
               C51126 * C17452) *
              C1490 +
          (((C17689 + C17688) * C1493 -
            ((C17491 + C17490) * C51301 + (C17489 + C17488) * C1492) +
            (C17691 + C17690) * C51288 - (C18059 + C18058) * C1494 -
            (C18061 + C18060) * C1489) *
               C51126 * C17450 +
           ((C17694 + C17693) * C1493 -
            ((C17495 + C17494) * C51301 + (C17493 + C17492) * C1492) +
            (C17696 + C17695) * C51288 - (C18063 + C18062) * C1494 -
            (C18065 + C18064) * C1489) *
               C51126 * C17451 +
           ((C17697 + C17698) * C1493 - (C17506 * C51301 + C17507 * C1492) +
            (C17699 + C17700) * C51288 -
            (C17454 * C772 + C51162 * C779 + C17453 * C641 + C17448 * C649) *
                C1494 -
            (C17454 * C780 + C51162 * C784 + C17453 * C650 + C17448 * C656) *
                C1489) *
               C51126 * C17452) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C1492 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51301 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C1493 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51288 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C1494 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C1489) *
               C5336 +
           ((C22409 + C22410) * C1492 + (C22411 + C22412) * C51301 -
            (C22839 + C22840) * C1493 - (C22841 + C22842) * C51288 +
            (C22843 + C22844) * C1494 + (C22845 + C22846) * C1489) *
               C5337 +
           (C23001 * C1492 + C23002 * C51301 - C23187 * C1493 -
            C23188 * C51288 + (C22851 + C22852) * C1494 +
            (C22853 + C22854) * C1489) *
               C5338) *
              C50973 * C1490 +
          (((C17689 + C17688) * C1493 -
            ((C17491 + C17490) * C51301 + (C17489 + C17488) * C1492) +
            (C17691 + C17690) * C51288 - (C18059 + C18058) * C1494 -
            (C18061 + C18060) * C1489) *
               C5336 +
           ((C19234 + C19235) * C1493 -
            ((C17881 + C17880) * C51301 + (C17879 + C17878) * C1492) +
            (C19236 + C19237) * C51288 -
            (C17454 * C3300 + C51162 * C3306 + C17453 * C886 + C17448 * C897) *
                C1494 -
            (C17454 * C3307 + C51162 * C3312 + C17453 * C898 + C17448 * C910) *
                C1489) *
               C5337 +
           ((C17453 * C1159 + C17448 * C1164 + C17454 * C3461 +
             C51162 * C3465) *
                C1493 -
            (C23003 * C51301 + C23004 * C1492) +
            (C17453 * C1165 + C17448 * C1171 + C17454 * C3466 +
             C51162 * C3470) *
                C51288 -
            (C17454 * C3637 + C51162 * C3640 + C17453 * C3461 +
             C17448 * C3465) *
                C1494 -
            (C17454 * C3641 + C51162 * C3643 + C17453 * C3466 +
             C17448 * C3470) *
                C1489) *
               C5338) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C1363 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C1358 -
            (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
             C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
                C1364 -
            (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
             C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
                C51042) *
               C51126 * C50973 * C1490 +
           ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
             C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
                C1364 -
            ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
              C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                 C1358 +
             (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
              C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                 C1363) +
            (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
             C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
                C51042) *
               C51126 * C50973 * C50997) *
              C51256 +
          (((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
             C20286 * C3298 + C20281 * C3302 + C20287 * C3299 +
             C20282 * C3304) *
                C1364 -
            ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
              C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                 C1358 +
             (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
              C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                 C1363) +
            (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
             C20286 * C3303 + C20281 * C3310 + C20287 * C3305 +
             C20282 * C3311) *
                C51042) *
               C51126 * C50973 * C1490 +
           ((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C1363 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C1358 -
            (C20287 * C3301 + C20282 * C3308 + C20286 * C3300 + C20281 * C3306 +
             C20285 * C886 + C20280 * C897 + C20284 * C885 + C20279 * C895) *
                C1364 -
            (C20287 * C3309 + C20282 * C3313 + C20286 * C3307 + C20281 * C3312 +
             C20285 * C898 + C20280 * C910 + C20284 * C896 + C20279 * C909) *
                C51042) *
               C51126 * C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C1363 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C1358 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C1364 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C51126 * C17450 +
            ((C17488 + C17489) * C1363 + (C17490 + C17491) * C1358 -
             (C17688 + C17689) * C1364 - (C17690 + C17691) * C51042) *
                C51126 * C17451 +
            C18877 * C17452) *
               C1490 +
           (((C17689 + C17688) * C1364 -
             ((C17491 + C17490) * C1358 + (C17489 + C17488) * C1363) +
             (C17691 + C17690) * C51042) *
                C51126 * C17450 +
            ((C17694 + C17693) * C1364 -
             ((C17495 + C17494) * C1358 + (C17493 + C17492) * C1363) +
             (C17696 + C17695) * C51042) *
                C51126 * C17451 +
            ((C17697 + C17698) * C1364 - (C17506 * C1358 + C17507 * C1363) +
             (C17699 + C17700) * C51042) *
                C51126 * C17452) *
               C50997) *
              C51256 +
          ((((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                 C1364 -
             ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                  C1358 +
              (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                  C1363) +
             (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                 C51042) *
                C51126 * C17450 +
            ((C19234 + C19235) * C1364 -
             ((C17881 + C17880) * C1358 + (C17879 + C17878) * C1363) +
             (C19236 + C19237) * C51042) *
                C51126 * C17451 +
            ((C19238 + C19239) * C1364 - (C17890 * C1358 + C17891 * C1363) +
             (C19240 + C19241) * C51042) *
                C51126 * C17452) *
               C1490 +
           (((C17878 + C17879) * C1363 + (C17880 + C17881) * C1358 -
             (C19235 + C19234) * C1364 - (C19237 + C19236) * C51042) *
                C51126 * C17450 +
            ((C17882 + C17883) * C1363 + (C17884 + C17885) * C1358 -
             (C19239 + C19238) * C1364 - (C19241 + C19240) * C51042) *
                C51126 * C17451 +
            ((C17886 + C17887) * C1363 + (C17888 + C17889) * C1358 -
             (C17454 * C890 + C51162 * C905 + C17453 * C889 + C17448 * C903) *
                 C1364 -
             (C17454 * C906 + C51162 * C914 + C17453 * C904 + C17448 * C913) *
                 C51042) *
                C51126 * C17452) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C1363 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C1358 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C1364 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C5336 +
            ((C22409 + C22410) * C1363 + (C22411 + C22412) * C1358 -
             (C22839 + C22840) * C1364 - (C22841 + C22842) * C51042) *
                C5337 +
            (C23001 * C1363 + C23002 * C1358 - C23187 * C1364 -
             C23188 * C51042) *
                C5338) *
               C50973 * C1490 +
           (((C17689 + C17688) * C1364 -
             ((C17491 + C17490) * C1358 + (C17489 + C17488) * C1363) +
             (C17691 + C17690) * C51042) *
                C5336 +
            ((C19234 + C19235) * C1364 -
             ((C17881 + C17880) * C1358 + (C17879 + C17878) * C1363) +
             (C19236 + C19237) * C51042) *
                C5337 +
            ((C23819 + C23820) * C1364 - (C23003 * C1358 + C23004 * C1363) +
             (C23821 + C23822) * C51042) *
                C5338) *
               C50973 * C50997) *
              C51256 +
          ((((C22840 + C22839) * C1364 -
             ((C22412 + C22411) * C1358 + (C22410 + C22409) * C1363) +
             (C22842 + C22841) * C51042) *
                C5336 +
            ((C22848 + C22847) * C1364 -
             ((C22416 + C22415) * C1358 + (C22414 + C22413) * C1363) +
             (C22850 + C22849) * C51042) *
                C5337 +
            ((C23200 + C23201) * C1364 - (C23308 * C1358 + C23309 * C1363) +
             (C23202 + C23203) * C51042) *
                C5338) *
               C50973 * C1490 +
           (((C17878 + C17879) * C1363 + (C17880 + C17881) * C1358 -
             (C19235 + C19234) * C1364 - (C19237 + C19236) * C51042) *
                C5336 +
            ((C18472 + C18473) * C1363 + (C18474 + C18475) * C1358 -
             (C23820 + C23819) * C1364 - (C23822 + C23821) * C51042) *
                C5337 +
            ((C23025 + C23026) * C1363 + (C23027 + C23028) * C1358 -
             (C17454 * C3742 + C51162 * C3748 + C17453 * C3743 +
              C17448 * C3749) *
                 C1364 -
             (C17454 * C3746 + C51162 * C3754 + C17453 * C3747 +
              C17448 * C3755) *
                 C51042) *
                C5338) *
               C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C1363 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C1358 -
            (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
             C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
                C1364 -
            (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
             C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
                C51042) *
               C51126 * C50973 * C51247 +
           ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
             C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
                C1364 -
            ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
              C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                 C1358 +
             (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
              C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                 C1363) +
            (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
             C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
                C51042) *
               C51126 * C50973 * C50997) *
              C1775 +
          (((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
             C20286 * C3298 + C20281 * C3302 + C20287 * C3299 +
             C20282 * C3304) *
                C1364 -
            ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
              C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                 C1358 +
             (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
              C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                 C1363) +
            (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
             C20286 * C3303 + C20281 * C3310 + C20287 * C3305 +
             C20282 * C3311) *
                C51042) *
               C51126 * C50973 * C51247 +
           ((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C1363 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C1358 -
            (C20287 * C3301 + C20282 * C3308 + C20286 * C3300 + C20281 * C3306 +
             C20285 * C886 + C20280 * C897 + C20284 * C885 + C20279 * C895) *
                C1364 -
            (C20287 * C3309 + C20282 * C3313 + C20286 * C3307 + C20281 * C3312 +
             C20285 * C898 + C20280 * C910 + C20284 * C896 + C20279 * C909) *
                C51042) *
               C51126 * C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C1363 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C1358 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C1364 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C51126 * C17450 +
            ((C17488 + C17489) * C1363 + (C17490 + C17491) * C1358 -
             (C17688 + C17689) * C1364 - (C17690 + C17691) * C51042) *
                C51126 * C17451 +
            C18877 * C17452) *
               C51247 +
           (((C17689 + C17688) * C1364 -
             ((C17491 + C17490) * C1358 + (C17489 + C17488) * C1363) +
             (C17691 + C17690) * C51042) *
                C51126 * C17450 +
            ((C17694 + C17693) * C1364 -
             ((C17495 + C17494) * C1358 + (C17493 + C17492) * C1363) +
             (C17696 + C17695) * C51042) *
                C51126 * C17451 +
            ((C17697 + C17698) * C1364 - (C17506 * C1358 + C17507 * C1363) +
             (C17699 + C17700) * C51042) *
                C51126 * C17452) *
               C50997) *
              C1775 +
          ((((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                 C1364 -
             ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                  C1358 +
              (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                  C1363) +
             (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                 C51042) *
                C51126 * C17450 +
            ((C19234 + C19235) * C1364 -
             ((C17881 + C17880) * C1358 + (C17879 + C17878) * C1363) +
             (C19236 + C19237) * C51042) *
                C51126 * C17451 +
            ((C19238 + C19239) * C1364 - (C17890 * C1358 + C17891 * C1363) +
             (C19240 + C19241) * C51042) *
                C51126 * C17452) *
               C51247 +
           (((C17878 + C17879) * C1363 + (C17880 + C17881) * C1358 -
             (C19235 + C19234) * C1364 - (C19237 + C19236) * C51042) *
                C51126 * C17450 +
            ((C17882 + C17883) * C1363 + (C17884 + C17885) * C1358 -
             (C19239 + C19238) * C1364 - (C19241 + C19240) * C51042) *
                C51126 * C17451 +
            ((C17886 + C17887) * C1363 + (C17888 + C17889) * C1358 -
             (C17454 * C890 + C51162 * C905 + C17453 * C889 + C17448 * C903) *
                 C1364 -
             (C17454 * C906 + C51162 * C914 + C17453 * C904 + C17448 * C913) *
                 C51042) *
                C51126 * C17452) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C1363 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C1358 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C1364 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C5336 +
            ((C22409 + C22410) * C1363 + (C22411 + C22412) * C1358 -
             (C22839 + C22840) * C1364 - (C22841 + C22842) * C51042) *
                C5337 +
            (C23001 * C1363 + C23002 * C1358 - C23187 * C1364 -
             C23188 * C51042) *
                C5338) *
               C50973 * C51247 +
           (((C17689 + C17688) * C1364 -
             ((C17491 + C17490) * C1358 + (C17489 + C17488) * C1363) +
             (C17691 + C17690) * C51042) *
                C5336 +
            ((C19234 + C19235) * C1364 -
             ((C17881 + C17880) * C1358 + (C17879 + C17878) * C1363) +
             (C19236 + C19237) * C51042) *
                C5337 +
            ((C23819 + C23820) * C1364 - (C23003 * C1358 + C23004 * C1363) +
             (C23821 + C23822) * C51042) *
                C5338) *
               C50973 * C50997) *
              C1775 +
          ((((C22840 + C22839) * C1364 -
             ((C22412 + C22411) * C1358 + (C22410 + C22409) * C1363) +
             (C22842 + C22841) * C51042) *
                C5336 +
            ((C22848 + C22847) * C1364 -
             ((C22416 + C22415) * C1358 + (C22414 + C22413) * C1363) +
             (C22850 + C22849) * C51042) *
                C5337 +
            ((C23200 + C23201) * C1364 - (C23308 * C1358 + C23309 * C1363) +
             (C23202 + C23203) * C51042) *
                C5338) *
               C50973 * C51247 +
           (((C17878 + C17879) * C1363 + (C17880 + C17881) * C1358 -
             (C19235 + C19234) * C1364 - (C19237 + C19236) * C51042) *
                C5336 +
            ((C18472 + C18473) * C1363 + (C18474 + C18475) * C1358 -
             (C23820 + C23819) * C1364 - (C23822 + C23821) * C51042) *
                C5337 +
            ((C23025 + C23026) * C1363 + (C23027 + C23028) * C1358 -
             (C17454 * C3742 + C51162 * C3748 + C17453 * C3743 +
              C17448 * C3749) *
                 C1364 -
             (C17454 * C3746 + C51162 * C3754 + C17453 * C3747 +
              C17448 * C3755) *
                 C51042) *
                C5338) *
               C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C1492 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51301 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C1493 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51288 +
           (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
            C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
               C1494 +
           (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
            C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
               C1489) *
              C51126 * C50973 * C50992 * C1775 +
          ((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
            C20286 * C3298 + C20281 * C3302 + C20287 * C3299 + C20282 * C3304) *
               C1493 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51301 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C1492) +
           (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
            C20286 * C3303 + C20281 * C3310 + C20287 * C3305 + C20282 * C3311) *
               C51288 -
           (C20287 * C20750 + C20282 * C20751 + C20286 * C3299 +
            C20281 * C3304 + C20285 * C3298 + C20280 * C3302 + C20284 * C884 +
            C20279 * C893) *
               C1494 -
           (C20287 * C20752 + C20282 * C20753 + C20286 * C3305 +
            C20281 * C3311 + C20285 * C3303 + C20280 * C3310 + C20284 * C894 +
            C20279 * C908) *
               C1489) *
              C51126 * C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C1492 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51301 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C1493 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51288 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C1494 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C1489) *
               C51126 * C17450 +
           ((C17488 + C17489) * C1492 + (C17490 + C17491) * C51301 -
            (C17688 + C17689) * C1493 - (C17690 + C17691) * C51288 +
            (C18058 + C18059) * C1494 + (C18060 + C18061) * C1489) *
               C51126 * C17451 +
           (C17504 * C1492 + C17505 * C51301 - C17701 * C1493 -
            C17702 * C51288 + (C18062 + C18063) * C1494 +
            (C18064 + C18065) * C1489) *
               C51126 * C17452) *
              C50992 * C1775 +
          (((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                C1493 -
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51301 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C1492) +
            (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                C51288 -
            (C17454 * C3298 + C51162 * C3302 + C17453 * C884 + C17448 * C893) *
                C1494 -
            (C17454 * C3303 + C51162 * C3310 + C17453 * C894 + C17448 * C908) *
                C1489) *
               C51126 * C17450 +
           ((C19234 + C19235) * C1493 -
            ((C17881 + C17880) * C51301 + (C17879 + C17878) * C1492) +
            (C19236 + C19237) * C51288 -
            (C17454 * C3300 + C51162 * C3306 + C17453 * C886 + C17448 * C897) *
                C1494 -
            (C17454 * C3307 + C51162 * C3312 + C17453 * C898 + C17448 * C910) *
                C1489) *
               C51126 * C17451 +
           ((C19238 + C19239) * C1493 - (C17890 * C51301 + C17891 * C1492) +
            (C19240 + C19241) * C51288 -
            (C17454 * C4244 + C51162 * C4245 + C17453 * C888 + C17448 * C901) *
                C1494 -
            (C17454 * C4246 + C51162 * C4247 + C17453 * C902 + C17448 * C912) *
                C1489) *
               C51126 * C17452) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C1492 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51301 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C1493 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51288 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C1494 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C1489) *
               C5336 +
           ((C22409 + C22410) * C1492 + (C22411 + C22412) * C51301 -
            (C22839 + C22840) * C1493 - (C22841 + C22842) * C51288 +
            (C22843 + C22844) * C1494 + (C22845 + C22846) * C1489) *
               C5337 +
           (C23001 * C1492 + C23002 * C51301 - C23187 * C1493 -
            C23188 * C51288 + (C22851 + C22852) * C1494 +
            (C22853 + C22854) * C1489) *
               C5338) *
              C50973 * C50992 * C1775 +
          (((C22840 + C22839) * C1493 -
            ((C22412 + C22411) * C51301 + (C22410 + C22409) * C1492) +
            (C22842 + C22841) * C51288 - (C22844 + C22843) * C1494 -
            (C22846 + C22845) * C1489) *
               C5336 +
           ((C22848 + C22847) * C1493 -
            ((C22416 + C22415) * C51301 + (C22414 + C22413) * C1492) +
            (C22850 + C22849) * C51288 - (C22852 + C22851) * C1494 -
            (C22854 + C22853) * C1489) *
               C5337 +
           ((C23200 + C23201) * C1493 - (C23308 * C51301 + C23309 * C1492) +
            (C23202 + C23203) * C51288 -
            (C17454 * C21020 + C51162 * C21022 + C17453 * C3744 +
             C17448 * C3752) *
                C1494 -
            (C17454 * C21021 + C51162 * C21023 + C17453 * C3750 +
             C17448 * C3756) *
                C1489) *
               C5338) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C1363 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C1358 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C1364 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51042) *
              C51126 * C50973 * C50992 * C51302 +
          ((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
            C20286 * C3298 + C20281 * C3302 + C20287 * C3299 + C20282 * C3304) *
               C1364 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C1358 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C1363) +
           (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
            C20286 * C3303 + C20281 * C3310 + C20287 * C3305 + C20282 * C3311) *
               C51042) *
              C51126 * C50973 * C50992 * C51291 +
          ((C20284 * C1016 + C20279 * C1021 + C20285 * C1158 + C20280 * C1162 +
            C20286 * C3460 + C20281 * C3463 + C20287 * C3636 + C20282 * C3638) *
               C1363 +
           (C20284 * C1022 + C20279 * C1031 + C20285 * C1163 + C20280 * C1170 +
            C20286 * C3464 + C20281 * C3469 + C20287 * C3639 + C20282 * C3642) *
               C1358 -
           (C20287 * C20950 + C20282 * C20951 + C20286 * C3636 +
            C20281 * C3638 + C20285 * C3460 + C20280 * C3463 + C20284 * C1158 +
            C20279 * C1162) *
               C1364 -
           (C20287 * C20952 + C20282 * C20953 + C20286 * C3639 +
            C20281 * C3642 + C20285 * C3464 + C20280 * C3469 + C20284 * C1163 +
            C20279 * C1170) *
               C51042) *
              C51126 * C50973 * C50992 * C2019)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C1363 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C1358 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C1364 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C51126 * C17450 +
           ((C17488 + C17489) * C1363 + (C17490 + C17491) * C1358 -
            (C17688 + C17689) * C1364 - (C17690 + C17691) * C51042) *
               C51126 * C17451 +
           C18877 * C17452) *
              C50992 * C51302 +
          (((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                C1364 -
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C1358 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C1363) +
            (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                C51042) *
               C51126 * C17450 +
           ((C19234 + C19235) * C1364 -
            ((C17881 + C17880) * C1358 + (C17879 + C17878) * C1363) +
            (C19236 + C19237) * C51042) *
               C51126 * C17451 +
           ((C19238 + C19239) * C1364 - (C17890 * C1358 + C17891 * C1363) +
            (C19240 + C19241) * C51042) *
               C51126 * C17452) *
              C50992 * C51291 +
          (((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
             C51162 * C1162) *
                C1363 +
            (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
             C51162 * C1170) *
                C1358 -
            (C17454 * C3460 + C51162 * C3463 + C17453 * C1158 +
             C17448 * C1162) *
                C1364 -
            (C17454 * C3464 + C51162 * C3469 + C17453 * C1163 +
             C17448 * C1170) *
                C51042) *
               C51126 * C17450 +
           ((C18472 + C18473) * C1363 + (C18474 + C18475) * C1358 -
            (C17454 * C3461 + C51162 * C3465 + C17453 * C1159 +
             C17448 * C1164) *
                C1364 -
            (C17454 * C3466 + C51162 * C3470 + C17453 * C1165 +
             C17448 * C1171) *
                C51042) *
               C51126 * C17451 +
           ((C18476 + C18477) * C1363 + (C18478 + C18479) * C1358 -
            (C17454 * C3462 + C51162 * C3468 + C17453 * C1160 +
             C17448 * C1166) *
                C1364 -
            (C17454 * C3467 + C51162 * C3471 + C17453 * C1167 +
             C17448 * C1172) *
                C51042) *
               C51126 * C17452) *
              C50992 * C2019)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C1363 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C1358 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C1364 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C5336 +
           ((C22409 + C22410) * C1363 + (C22411 + C22412) * C1358 -
            (C22839 + C22840) * C1364 - (C22841 + C22842) * C51042) *
               C5337 +
           C24801 * C5338) *
              C50973 * C50992 * C51302 +
          (((C22840 + C22839) * C1364 -
            ((C22412 + C22411) * C1358 + (C22410 + C22409) * C1363) +
            (C22842 + C22841) * C51042) *
               C5336 +
           ((C22848 + C22847) * C1364 -
            ((C22416 + C22415) * C1358 + (C22414 + C22413) * C1363) +
            (C22850 + C22849) * C51042) *
               C5337 +
           ((C23200 + C23201) * C1364 - (C23308 * C1358 + C23309 * C1363) +
            (C23202 + C23203) * C51042) *
               C5338) *
              C50973 * C50992 * C51291 +
          (C24801 * C5336 +
           ((C23032 + C23031) * C1363 + (C23030 + C23029) * C1358 -
            (C23201 + C23200) * C1364 - (C23203 + C23202) * C51042) *
               C5337 +
           ((C23320 + C23321) * C1363 + (C23322 + C23323) * C1358 -
            (C17454 * C23180 + C51162 * C23181 + C17453 * C6463 +
             C17448 * C6465) *
                C1364 -
            (C17454 * C23182 + C51162 * C23183 + C17453 * C6466 +
             C17448 * C6469) *
                C51042) *
               C5338) *
              C50973 * C50992 * C2019)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17453 * C119 + C17448 * C126 + C17454 * C300 +
                 C51162 * C306) *
                    C118 +
                (C17453 * C127 + C17448 * C140 + C17454 * C307 +
                 C51162 * C318) *
                    C51026) *
                   C51126 * C17450 +
               ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) *
                   C51126 * C17451 +
               C17514 * C17452) *
                  C112 -
              (C17515 * C17452 +
               ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) *
                   C51126 * C17451 +
               ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) *
                   C51126 * C17450) *
                  C113 +
              (C17514 * C17450 +
               ((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) *
                   C51126 * C17451 +
               ((C17500 + C17501) * C118 + (C17502 + C17503) * C51026) *
                   C51126 * C17452) *
                  C114 -
              (((C17454 * C317 + C51162 * C323 + C17453 * C137 +
                 C17448 * C145) *
                    C51026 +
                (C17454 * C305 + C51162 * C316 + C17453 * C124 +
                 C17448 * C136) *
                    C118) *
                   C51126 * C17452 +
               ((C17503 + C17502) * C51026 + (C17501 + C17500) * C118) *
                   C51126 * C17451 +
               C17515 * C17450) *
                  C115) *
             C51056 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17453 * C119 + C17448 * C126 + C17454 * C300 +
                 C51162 * C306) *
                    C635 +
                (C17453 * C127 + C17448 * C140 + C17454 * C307 +
                 C51162 * C318) *
                    C630 -
                (C17454 * C638 + C51162 * C643 + C17453 * C300 +
                 C17448 * C306) *
                    C636 -
                (C17454 * C644 + C51162 * C653 + C17453 * C307 +
                 C17448 * C318) *
                    C631 +
                (C17453 * C638 + C17448 * C643 + C17454 * C769 +
                 C51162 * C773) *
                    C637 +
                (C17453 * C644 + C17448 * C653 + C17454 * C774 +
                 C51162 * C781) *
                    C632) *
                   C51126 * C17450 +
               ((C17488 + C17489) * C635 + (C17490 + C17491) * C630 -
                (C17688 + C17689) * C636 - (C17690 + C17691) * C631 +
                (C18058 + C18059) * C637 + (C18060 + C18061) * C632) *
                   C51126 * C17451 +
               (C17504 * C635 + C17505 * C630 - C17701 * C636 - C17702 * C631 +
                (C18062 + C18063) * C637 + (C18064 + C18065) * C632) *
                   C51126 * C17452) *
                  C51247 +
              (((C17689 + C17688) * C636 -
                ((C17491 + C17490) * C630 + (C17489 + C17488) * C635) +
                (C17691 + C17690) * C631 - (C18059 + C18058) * C637 -
                (C18061 + C18060) * C632) *
                   C51126 * C17450 +
               ((C17694 + C17693) * C636 -
                ((C17495 + C17494) * C630 + (C17493 + C17492) * C635) +
                (C17696 + C17695) * C631 - (C18063 + C18062) * C637 -
                (C18065 + C18064) * C632) *
                   C51126 * C17451 +
               ((C17697 + C17698) * C636 - (C17506 * C630 + C17507 * C635) +
                (C17699 + C17700) * C631 -
                (C17454 * C772 + C51162 * C779 + C17453 * C641 +
                 C17448 * C649) *
                    C637 -
                (C17454 * C780 + C51162 * C784 + C17453 * C650 +
                 C17448 * C656) *
                    C632) *
                   C51126 * C17452) *
                  C50997) *
             C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
                C17451 +
            C17514 * C17452) *
               C51247 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51126 *
                C17451 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51126 *
                C17450) *
               C50997) *
              C1013 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C51126 *
                C17450 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C51126 *
                C17451 +
            ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51126 *
                C17452) *
               C50997 -
           (C17895 * C17452 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51126 *
                C17451 +
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51026 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C118) *
                C51126 * C17450) *
               C51247) *
              C1014 +
          ((((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
              C51162 * C1162) *
                 C118 +
             (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
              C51162 * C1170) *
                 C51026) *
                C51126 * C17450 +
            ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C51126 *
                C17451 +
            ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C51126 *
                C17452) *
               C51247 -
           (((C17454 * C1169 + C51162 * C1173 + C17453 * C1028 +
              C17448 * C1034) *
                 C51026 +
             (C17454 * C1161 + C51162 * C1168 + C17453 * C1019 +
              C17448 * C1027) *
                 C118) *
                C51126 * C17452 +
            ((C18479 + C18478) * C51026 + (C18477 + C18476) * C118) * C51126 *
                C17451 +
            ((C18475 + C18474) * C51026 + (C18473 + C18472) * C118) * C51126 *
                C17450) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C118 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51026) *
              C51126 * C50973 * C112 -
          ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
            C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
               C51026 +
           (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
            C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
               C118) *
              C51126 * C50973 * C113 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
            C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
               C118 +
           (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
            C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
               C51026) *
              C51126 * C50973 * C114 -
          ((C20287 * C780 + C20282 * C784 + C20286 * C650 + C20281 * C656 +
            C20285 * C313 + C20280 * C321 + C20284 * C133 + C20279 * C143) *
               C51026 +
           (C20287 * C772 + C20282 * C779 + C20286 * C641 + C20281 * C649 +
            C20285 * C303 + C20280 * C312 + C20284 * C122 + C20279 * C132) *
               C118) *
              C51126 * C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C635 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C630 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C636 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C631 +
           (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
            C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
               C637 +
           (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
            C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
               C632) *
              C51126 * C50973 * C51247 +
          ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
            C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
               C636 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C630 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C635) +
           (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
            C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
               C631 -
           (C20287 * C3145 + C20282 * C3148 + C20286 * C3017 + C20281 * C3021 +
            C20285 * C770 + C20280 * C775 + C20284 * C639 + C20279 * C645) *
               C637 -
           (C20287 * C3149 + C20282 * C3151 + C20286 * C3022 + C20281 * C3026 +
            C20285 * C776 + C20280 * C782 + C20284 * C646 + C20279 * C654) *
               C632) *
              C51126 * C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C51026) *
               C51126 * C50973 * C51247 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51026 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51126 * C50973 * C50997) *
              C1013 +
          (((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C118 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C51026) *
               C51126 * C50973 * C50997 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51026 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C118) *
               C51126 * C50973 * C51247) *
              C1014 +
          (((C20284 * C1016 + C20279 * C1021 + C20285 * C1158 + C20280 * C1162 +
             C20286 * C3460 + C20281 * C3463 + C20287 * C3636 +
             C20282 * C3638) *
                C118 +
            (C20284 * C1022 + C20279 * C1031 + C20285 * C1163 + C20280 * C1170 +
             C20286 * C3464 + C20281 * C3469 + C20287 * C3639 +
             C20282 * C3642) *
                C51026) *
               C51126 * C50973 * C51247 -
           ((C20287 * C3641 + C20282 * C3643 + C20286 * C3466 + C20281 * C3470 +
             C20285 * C1165 + C20280 * C1171 + C20284 * C1024 +
             C20279 * C1032) *
                C51026 +
            (C20287 * C3637 + C20282 * C3640 + C20286 * C3461 + C20281 * C3465 +
             C20285 * C1159 + C20280 * C1164 + C20284 * C1017 +
             C20279 * C1023) *
                C118) *
               C51126 * C50973 * C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51026) *
               C5336 +
           ((C17453 * C476 + C17448 * C487 + C17454 * C883 + C51162 * C891) *
                C118 +
            (C17453 * C486 + C17448 * C494 + C17454 * C892 + C51162 * C907) *
                C51026) *
               C5337 +
           ((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
             C51162 * C1162) *
                C118 +
            (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
             C51162 * C1170) *
                C51026) *
               C5338) *
              C50973 * C112 -
          (((C18475 + C18474) * C51026 + (C18473 + C18472) * C118) * C5338 +
           ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C5337 +
           ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C5336) *
              C50973 * C113 +
          (C17512 * C5336 +
           ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C5337 +
           ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C5338) *
              C50973 * C114 -
          (((C17454 * C1169 + C51162 * C1173 + C17453 * C1028 +
             C17448 * C1034) *
                C51026 +
            (C17454 * C1161 + C51162 * C1168 + C17453 * C1019 +
             C17448 * C1027) *
                C118) *
               C5338 +
           ((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) * C5337 +
           C17513 * C5336) *
              C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C635 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C630 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C636 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C631 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C637 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C632) *
               C5336 +
           ((C22409 + C22410) * C635 + (C22411 + C22412) * C630 -
            (C17454 * C884 + C51162 * C893 + C17453 * C883 + C17448 * C891) *
                C636 -
            (C17454 * C894 + C51162 * C908 + C17453 * C892 + C17448 * C907) *
                C631 +
            (C17453 * C884 + C17448 * C893 + C17454 * C3298 + C51162 * C3302) *
                C637 +
            (C17453 * C894 + C17448 * C908 + C17454 * C3303 + C51162 * C3310) *
                C632) *
               C5337 +
           ((C22413 + C22414) * C635 + (C22415 + C22416) * C630 -
            (C17454 * C3460 + C51162 * C3463 + C17453 * C1158 +
             C17448 * C1162) *
                C636 -
            (C17454 * C3464 + C51162 * C3469 + C17453 * C1163 +
             C17448 * C1170) *
                C631 +
            (C17453 * C3460 + C17448 * C3463 + C17454 * C3636 +
             C51162 * C3638) *
                C637 +
            (C17453 * C3464 + C17448 * C3469 + C17454 * C3639 +
             C51162 * C3642) *
                C632) *
               C5338) *
              C50973 * C51247 +
          (((C17689 + C17688) * C636 -
            ((C17491 + C17490) * C630 + (C17489 + C17488) * C635) +
            (C17691 + C17690) * C631 - (C18059 + C18058) * C637 -
            (C18061 + C18060) * C632) *
               C5336 +
           ((C19234 + C19235) * C636 -
            ((C17881 + C17880) * C630 + (C17879 + C17878) * C635) +
            (C19236 + C19237) * C631 -
            (C17454 * C3300 + C51162 * C3306 + C17453 * C886 + C17448 * C897) *
                C637 -
            (C17454 * C3307 + C51162 * C3312 + C17453 * C898 + C17448 * C910) *
                C632) *
               C5337 +
           ((C17453 * C1159 + C17448 * C1164 + C17454 * C3461 +
             C51162 * C3465) *
                C636 -
            ((C18475 + C18474) * C630 + (C18473 + C18472) * C635) +
            (C17453 * C1165 + C17448 * C1171 + C17454 * C3466 +
             C51162 * C3470) *
                C631 -
            (C17454 * C3637 + C51162 * C3640 + C17453 * C3461 +
             C17448 * C3465) *
                C637 -
            (C17454 * C3641 + C51162 * C3643 + C17453 * C3466 +
             C17448 * C3470) *
                C632) *
               C5338) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C5336 +
            ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C5337 +
            C23033 * C5338) *
               C50973 * C51247 -
           (C23034 * C5338 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C5337 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C5336) *
               C50973 * C50997) *
              C1013 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C5336 +
            ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C5337 +
            ((C23025 + C23026) * C118 + (C23027 + C23028) * C51026) * C5338) *
               C50973 * C50997 -
           (((C23029 + C23030) * C51026 + (C23031 + C23032) * C118) * C5338 +
            ((C22416 + C22415) * C51026 + (C22414 + C22413) * C118) * C5337 +
            ((C22412 + C22411) * C51026 + (C22410 + C22409) * C118) * C5336) *
               C50973 * C51247) *
              C1014 +
          ((C23033 * C5336 +
            ((C23032 + C23031) * C118 + (C23030 + C23029) * C51026) * C5337 +
            ((C17453 * C6286 + C17448 * C6289 + C17454 * C6463 +
              C51162 * C6465) *
                 C118 +
             (C17453 * C6290 + C17448 * C6295 + C17454 * C6466 +
              C51162 * C6469) *
                 C51026) *
                C5338) *
               C50973 * C51247 -
           (((C17454 * C6468 + C51162 * C6470 + C17453 * C6292 +
              C17448 * C6296) *
                 C51026 +
             (C17454 * C6464 + C51162 * C6467 + C17453 * C6287 +
              C17448 * C6291) *
                 C118) *
                C5338 +
            ((C23028 + C23027) * C51026 + (C23026 + C23025) * C118) * C5337 +
            C23034 * C5336) *
               C50973 * C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17453 * C119 + C17448 * C126 + C17454 * C300 +
                 C51162 * C306) *
                    C298 +
                (C17453 * C127 + C17448 * C140 + C17454 * C307 +
                 C51162 * C318) *
                    C51254 -
                (C17454 * C638 + C51162 * C643 + C17453 * C300 +
                 C17448 * C306) *
                    C299 -
                (C17454 * C644 + C51162 * C653 + C17453 * C307 +
                 C17448 * C318) *
                    C51042) *
                   C51126 * C17450 +
               ((C17488 + C17489) * C298 + (C17490 + C17491) * C51254 -
                (C17688 + C17689) * C299 - (C17690 + C17691) * C51042) *
                   C51126 * C17451 +
               C17707 * C17452) *
                  C295 +
              (((C17689 + C17688) * C299 -
                ((C17491 + C17490) * C51254 + (C17489 + C17488) * C298) +
                (C17691 + C17690) * C51042) *
                   C51126 * C17450 +
               ((C17694 + C17693) * C299 -
                ((C17495 + C17494) * C51254 + (C17493 + C17492) * C298) +
                (C17696 + C17695) * C51042) *
                   C51126 * C17451 +
               ((C17697 + C17698) * C299 - (C17506 * C51254 + C17507 * C298) +
                (C17699 + C17700) * C51042) *
                   C51126 * C17452) *
                  C296 +
              (C17707 * C17450 +
               ((C17499 + C17498) * C298 + (C17497 + C17496) * C51254 -
                (C17698 + C17697) * C299 - (C17700 + C17699) * C51042) *
                   C51126 * C17451 +
               ((C17500 + C17501) * C298 + (C17502 + C17503) * C51254 -
                (C17454 * C642 + C51162 * C651 + C17453 * C304 +
                 C17448 * C314) *
                    C299 -
                (C17454 * C652 + C51162 * C657 + C17453 * C315 +
                 C17448 * C322) *
                    C51042) *
                   C51126 * C17452) *
                  C297) *
             C51056 +
         0.5 * std::pow(Pi, 2.5) *
             (((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                   C765 +
               (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                   C760 -
               (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                   C766 -
               (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                   C761 +
               (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                   C767 +
               (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                   C762 -
               (C17454 * C3016 + C51162 * C3019 + C17453 * C769 +
                C17448 * C773) *
                   C768 -
               (C17454 * C3020 + C51162 * C3025 + C17453 * C774 +
                C17448 * C781) *
                   C763) *
                  C51126 * C17450 +
              ((C17488 + C17489) * C765 + (C17490 + C17491) * C760 -
               (C17688 + C17689) * C766 - (C17690 + C17691) * C761 +
               (C18058 + C18059) * C767 + (C18060 + C18061) * C762 -
               (C17454 * C3017 + C51162 * C3021 + C17453 * C770 +
                C17448 * C775) *
                   C768 -
               (C17454 * C3022 + C51162 * C3026 + C17453 * C776 +
                C17448 * C782) *
                   C763) *
                  C51126 * C17451 +
              (C17504 * C765 + C17505 * C760 - C17701 * C766 - C17702 * C761 +
               (C18062 + C18063) * C767 + (C18064 + C18065) * C762 -
               (C17454 * C3018 + C51162 * C3023 + C17453 * C771 +
                C17448 * C777) *
                   C768 -
               (C17454 * C3024 + C51162 * C3027 + C17453 * C778 +
                C17448 * C783) *
                   C763) *
                  C51126 * C17452) *
             C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51254 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C299 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C51126 * C17450 +
           ((C17488 + C17489) * C298 + (C17490 + C17491) * C51254 -
            (C17688 + C17689) * C299 - (C17690 + C17691) * C51042) *
               C51126 * C17451 +
           C17707 * C17452) *
              C50992 * C1013 +
          (((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                C299 -
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51254 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C298) +
            (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                C51042) *
               C51126 * C17450 +
           ((C17453 * C885 + C17448 * C895 + C17454 * C886 + C51162 * C897) *
                C299 -
            ((C17881 + C17880) * C51254 + (C17879 + C17878) * C298) +
            (C17453 * C896 + C17448 * C909 + C17454 * C898 + C51162 * C910) *
                C51042) *
               C51126 * C17451 +
           ((C17453 * C887 + C17448 * C899 + C17454 * C888 + C51162 * C901) *
                C299 -
            (C17890 * C51254 + C17891 * C298) +
            (C17453 * C900 + C17448 * C911 + C17454 * C902 + C51162 * C912) *
                C51042) *
               C51126 * C17452) *
              C50992 * C1014 +
          (((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
             C51162 * C1162) *
                C298 +
            (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
             C51162 * C1170) *
                C51254 -
            (C17454 * C3460 + C51162 * C3463 + C17453 * C1158 +
             C17448 * C1162) *
                C299 -
            (C17454 * C3464 + C51162 * C3469 + C17453 * C1163 +
             C17448 * C1170) *
                C51042) *
               C51126 * C17450 +
           ((C18472 + C18473) * C298 + (C18474 + C18475) * C51254 -
            (C17454 * C3461 + C51162 * C3465 + C17453 * C1159 +
             C17448 * C1164) *
                C299 -
            (C17454 * C3466 + C51162 * C3470 + C17453 * C1165 +
             C17448 * C1171) *
                C51042) *
               C51126 * C17451 +
           ((C18476 + C18477) * C298 + (C18478 + C18479) * C51254 -
            (C17454 * C3462 + C51162 * C3468 + C17453 * C1160 +
             C17448 * C1166) *
                C299 -
            (C17454 * C3467 + C51162 * C3471 + C17453 * C1167 +
             C17448 * C1172) *
                C51042) *
               C51126 * C17452) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51254 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C299 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51042) *
              C51126 * C50973 * C295 +
          ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
            C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
               C299 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51254 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C298) +
           (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
            C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
               C51042) *
              C51126 * C50973 * C296 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
            C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
               C298 +
           (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
            C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
               C51254 -
           (C20287 * C3018 + C20282 * C3023 + C20286 * C771 + C20281 * C777 +
            C20285 * C640 + C20280 * C647 + C20284 * C302 + C20279 * C310) *
               C299 -
           (C20287 * C3024 + C20282 * C3027 + C20286 * C778 + C20281 * C783 +
            C20285 * C648 + C20280 * C655 + C20284 * C311 + C20279 * C320) *
               C51042) *
              C51126 * C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
           C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
              C765 +
          (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
           C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
              C760 -
          (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
           C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
              C766 -
          (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
           C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
              C761 +
          (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
           C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
              C767 +
          (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
           C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
              C762 -
          (C20287 * C20648 + C20282 * C20649 + C20286 * C3144 + C20281 * C3146 +
           C20285 * C3016 + C20280 * C3019 + C20284 * C769 + C20279 * C773) *
              C768 -
          (C20287 * C20650 + C20282 * C20651 + C20286 * C3147 + C20281 * C3150 +
           C20285 * C3020 + C20280 * C3025 + C20284 * C774 + C20279 * C781) *
              C763) *
         C51126 * C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51254 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C299 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51042) *
              C51126 * C50973 * C50992 * C1013 +
          ((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
            C20286 * C3298 + C20281 * C3302 + C20287 * C3299 + C20282 * C3304) *
               C299 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51254 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C298) +
           (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
            C20286 * C3303 + C20281 * C3310 + C20287 * C3305 + C20282 * C3311) *
               C51042) *
              C51126 * C50973 * C50992 * C1014 +
          ((C20284 * C1016 + C20279 * C1021 + C20285 * C1158 + C20280 * C1162 +
            C20286 * C3460 + C20281 * C3463 + C20287 * C3636 + C20282 * C3638) *
               C298 +
           (C20284 * C1022 + C20279 * C1031 + C20285 * C1163 + C20280 * C1170 +
            C20286 * C3464 + C20281 * C3469 + C20287 * C3639 + C20282 * C3642) *
               C51254 -
           (C20287 * C20950 + C20282 * C20951 + C20286 * C3636 +
            C20281 * C3638 + C20285 * C3460 + C20280 * C3463 + C20284 * C1158 +
            C20279 * C1162) *
               C299 -
           (C20287 * C20952 + C20282 * C20953 + C20286 * C3639 +
            C20281 * C3642 + C20285 * C3464 + C20280 * C3469 + C20284 * C1163 +
            C20279 * C1170) *
               C51042) *
              C51126 * C50973 * C50992 * C1015)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51254 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C299 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C5336 +
           ((C17453 * C476 + C17448 * C487 + C17454 * C883 + C51162 * C891) *
                C298 +
            (C17453 * C486 + C17448 * C494 + C17454 * C892 + C51162 * C907) *
                C51254 -
            (C17454 * C884 + C51162 * C893 + C17453 * C883 + C17448 * C891) *
                C299 -
            (C17454 * C894 + C51162 * C908 + C17453 * C892 + C17448 * C907) *
                C51042) *
               C5337 +
           ((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
             C51162 * C1162) *
                C298 +
            (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
             C51162 * C1170) *
                C51254 -
            (C17454 * C3460 + C51162 * C3463 + C17453 * C1158 +
             C17448 * C1162) *
                C299 -
            (C17454 * C3464 + C51162 * C3469 + C17453 * C1163 +
             C17448 * C1170) *
                C51042) *
               C5338) *
              C50973 * C295 +
          (((C17689 + C17688) * C299 -
            ((C17491 + C17490) * C51254 + (C17489 + C17488) * C298) +
            (C17691 + C17690) * C51042) *
               C5336 +
           ((C19234 + C19235) * C299 -
            ((C17881 + C17880) * C51254 + (C17879 + C17878) * C298) +
            (C19236 + C19237) * C51042) *
               C5337 +
           ((C17453 * C1159 + C17448 * C1164 + C17454 * C3461 +
             C51162 * C3465) *
                C299 -
            ((C18475 + C18474) * C51254 + (C18473 + C18472) * C298) +
            (C17453 * C1165 + C17448 * C1171 + C17454 * C3466 +
             C51162 * C3470) *
                C51042) *
               C5338) *
              C50973 * C296 +
          (C17706 * C5336 +
           ((C17882 + C17883) * C298 + (C17884 + C17885) * C51254 -
            (C19239 + C19238) * C299 - (C19241 + C19240) * C51042) *
               C5337 +
           ((C18476 + C18477) * C298 + (C18478 + C18479) * C51254 -
            (C17454 * C3462 + C51162 * C3468 + C17453 * C1160 +
             C17448 * C1166) *
                C299 -
            (C17454 * C3467 + C51162 * C3471 + C17453 * C1167 +
             C17448 * C1172) *
                C51042) *
               C5338) *
              C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
               C765 +
           (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
               C760 -
           (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
               C766 -
           (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
               C761 +
           (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
               C767 +
           (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
               C762 -
           (C17454 * C3016 + C51162 * C3019 + C17453 * C769 + C17448 * C773) *
               C768 -
           (C17454 * C3020 + C51162 * C3025 + C17453 * C774 + C17448 * C781) *
               C763) *
              C5336 +
          ((C22409 + C22410) * C765 + (C22411 + C22412) * C760 -
           (C17454 * C884 + C51162 * C893 + C17453 * C883 + C17448 * C891) *
               C766 -
           (C17454 * C894 + C51162 * C908 + C17453 * C892 + C17448 * C907) *
               C761 +
           (C17453 * C884 + C17448 * C893 + C17454 * C3298 + C51162 * C3302) *
               C767 +
           (C17453 * C894 + C17448 * C908 + C17454 * C3303 + C51162 * C3310) *
               C762 -
           (C17454 * C3299 + C51162 * C3304 + C17453 * C3298 + C17448 * C3302) *
               C768 -
           (C17454 * C3305 + C51162 * C3311 + C17453 * C3303 + C17448 * C3310) *
               C763) *
              C5337 +
          ((C22413 + C22414) * C765 + (C22415 + C22416) * C760 -
           (C17454 * C3460 + C51162 * C3463 + C17453 * C1158 + C17448 * C1162) *
               C766 -
           (C17454 * C3464 + C51162 * C3469 + C17453 * C1163 + C17448 * C1170) *
               C761 +
           (C17453 * C3460 + C17448 * C3463 + C17454 * C3636 + C51162 * C3638) *
               C767 +
           (C17453 * C3464 + C17448 * C3469 + C17454 * C3639 + C51162 * C3642) *
               C762 -
           (C17454 * C20950 + C51162 * C20951 + C17453 * C3636 +
            C17448 * C3638) *
               C768 -
           (C17454 * C20952 + C51162 * C20953 + C17453 * C3639 +
            C17448 * C3642) *
               C763) *
              C5338) *
         C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51254 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C299 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C5336 +
           ((C22409 + C22410) * C298 + (C22411 + C22412) * C51254 -
            (C22839 + C22840) * C299 - (C22841 + C22842) * C51042) *
               C5337 +
           C23205 * C5338) *
              C50973 * C50992 * C1013 +
          (((C22840 + C22839) * C299 -
            ((C22412 + C22411) * C51254 + (C22410 + C22409) * C298) +
            (C22842 + C22841) * C51042) *
               C5336 +
           ((C22848 + C22847) * C299 -
            ((C22416 + C22415) * C51254 + (C22414 + C22413) * C298) +
            (C22850 + C22849) * C51042) *
               C5337 +
           ((C23200 + C23201) * C299 -
            ((C23029 + C23030) * C51254 + (C23031 + C23032) * C298) +
            (C23202 + C23203) * C51042) *
               C5338) *
              C50973 * C50992 * C1014 +
          (C23205 * C5336 +
           ((C23032 + C23031) * C298 + (C23030 + C23029) * C51254 -
            (C23201 + C23200) * C299 - (C23203 + C23202) * C51042) *
               C5337 +
           ((C17453 * C6286 + C17448 * C6289 + C17454 * C6463 +
             C51162 * C6465) *
                C298 +
            (C17453 * C6290 + C17448 * C6295 + C17454 * C6466 +
             C51162 * C6469) *
                C51254 -
            (C17454 * C23180 + C51162 * C23181 + C17453 * C6463 +
             C17448 * C6465) *
                C299 -
            (C17454 * C23182 + C51162 * C23183 + C17453 * C6466 +
             C17448 * C6469) *
                C51042) *
               C5338) *
              C50973 * C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C17453 * C119 + C17448 * C126 + C17454 * C300 +
                  C51162 * C306) *
                     C118 +
                 (C17453 * C127 + C17448 * C140 + C17454 * C307 +
                  C51162 * C318) *
                     C51026) *
                    C51126 * C17450 +
                ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) *
                    C51126 * C17451 +
                C17514 * C17452) *
                   C295 -
               (C17515 * C17452 +
                ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) *
                    C51126 * C17451 +
                ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) *
                    C51126 * C17450) *
                   C296 +
               (C17514 * C17450 +
                ((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) *
                    C51126 * C17451 +
                ((C17500 + C17501) * C118 + (C17502 + C17503) * C51026) *
                    C51126 * C17452) *
                   C297) *
                  C51256 +
              ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) *
                    C51126 * C17450 +
                ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) *
                    C51126 * C17451 +
                ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) *
                    C51126 * C17452) *
                   C296 -
               (C17895 * C17452 +
                ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) *
                    C51126 * C17451 +
                ((C17454 * C892 + C51162 * C907 + C17453 * C486 +
                  C17448 * C494) *
                     C51026 +
                 (C17454 * C883 + C51162 * C891 + C17453 * C476 +
                  C17448 * C487) *
                     C118) *
                    C51126 * C17450) *
                   C295 -
               (((C17454 * C1645 + C51162 * C1646 + C17453 * C485 +
                  C17448 * C493) *
                     C51026 +
                 (C17454 * C1643 + C51162 * C1644 + C17453 * C475 +
                  C17448 * C484) *
                     C118) *
                    C51126 * C17452 +
                ((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) *
                    C51126 * C17451 +
                C17895 * C17450) *
                   C297) *
                  C51068) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17453 * C119 + C17448 * C126 + C17454 * C300 +
                 C51162 * C306) *
                    C635 +
                (C17453 * C127 + C17448 * C140 + C17454 * C307 +
                 C51162 * C318) *
                    C630 -
                (C17454 * C638 + C51162 * C643 + C17453 * C300 +
                 C17448 * C306) *
                    C636 -
                (C17454 * C644 + C51162 * C653 + C17453 * C307 +
                 C17448 * C318) *
                    C631 +
                (C17453 * C638 + C17448 * C643 + C17454 * C769 +
                 C51162 * C773) *
                    C637 +
                (C17453 * C644 + C17448 * C653 + C17454 * C774 +
                 C51162 * C781) *
                    C632) *
                   C51126 * C17450 +
               ((C17488 + C17489) * C635 + (C17490 + C17491) * C630 -
                (C17688 + C17689) * C636 - (C17690 + C17691) * C631 +
                (C18058 + C18059) * C637 + (C18060 + C18061) * C632) *
                   C51126 * C17451 +
               (C17504 * C635 + C17505 * C630 - C17701 * C636 - C17702 * C631 +
                (C18062 + C18063) * C637 + (C18064 + C18065) * C632) *
                   C51126 * C17452) *
                  C50992 * C51256 +
              (((C17453 * C883 + C17448 * C891 + C17454 * C884 +
                 C51162 * C893) *
                    C636 -
                ((C17454 * C892 + C51162 * C907 + C17453 * C486 +
                  C17448 * C494) *
                     C630 +
                 (C17454 * C883 + C51162 * C891 + C17453 * C476 +
                  C17448 * C487) *
                     C635) +
                (C17453 * C892 + C17448 * C907 + C17454 * C894 +
                 C51162 * C908) *
                    C631 -
                (C17454 * C3298 + C51162 * C3302 + C17453 * C884 +
                 C17448 * C893) *
                    C637 -
                (C17454 * C3303 + C51162 * C3310 + C17453 * C894 +
                 C17448 * C908) *
                    C632) *
                   C51126 * C17450 +
               ((C17453 * C885 + C17448 * C895 + C17454 * C886 +
                 C51162 * C897) *
                    C636 -
                ((C17881 + C17880) * C630 + (C17879 + C17878) * C635) +
                (C17453 * C896 + C17448 * C909 + C17454 * C898 +
                 C51162 * C910) *
                    C631 -
                (C17454 * C3300 + C51162 * C3306 + C17453 * C886 +
                 C17448 * C897) *
                    C637 -
                (C17454 * C3307 + C51162 * C3312 + C17453 * C898 +
                 C17448 * C910) *
                    C632) *
                   C51126 * C17451 +
               ((C17453 * C887 + C17448 * C899 + C17454 * C888 +
                 C51162 * C901) *
                    C636 -
                (C17890 * C630 + C17891 * C635) +
                (C17453 * C900 + C17448 * C911 + C17454 * C902 +
                 C51162 * C912) *
                    C631 -
                (C17454 * C4244 + C51162 * C4245 + C17453 * C888 +
                 C17448 * C901) *
                    C637 -
                (C17454 * C4246 + C51162 * C4247 + C17453 * C902 +
                 C17448 * C912) *
                    C632) *
                   C51126 * C17452) *
                  C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51026) *
               C51126 * C17450 +
           ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
               C17451 +
           C17514 * C17452) *
              C50992 * C1240 -
          (C17895 * C17452 +
           ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51126 *
               C17451 +
           ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                C51026 +
            (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                C118) *
               C51126 * C17450) *
              C50992 * C1241 +
          (((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
             C51162 * C1162) *
                C118 +
            (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
             C51162 * C1170) *
                C51026) *
               C51126 * C17450 +
           ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C51126 *
               C17451 +
           ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C51126 *
               C17452) *
              C50992 * C1242 -
          (((C17454 * C7128 + C51162 * C7129 + C17453 * C1250 +
             C17448 * C1257) *
                C51026 +
            (C17454 * C7126 + C51162 * C7127 + C17453 * C1245 +
             C17448 * C1251) *
                C118) *
               C51126 * C17452 +
           ((C17454 * C3747 + C51162 * C3755 + C17453 * C1252 +
             C17448 * C1258) *
                C51026 +
            (C17454 * C3743 + C51162 * C3749 + C17453 * C1246 +
             C17448 * C1253) *
                C118) *
               C51126 * C17451 +
           ((C17454 * C3751 + C51162 * C3757 + C17453 * C1254 +
             C17448 * C1259) *
                C51026 +
            (C17454 * C3745 + C51162 * C3753 + C17453 * C1247 +
             C17448 * C1255) *
                C118) *
               C51126 * C17450) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C51026) *
               C51126 * C50973 * C295 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51026 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51126 * C50973 * C296 +
           ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
             C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
                C118 +
            (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
             C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
                C51026) *
               C51126 * C50973 * C297) *
              C51256 +
          (((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C118 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C51026) *
               C51126 * C50973 * C296 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51026 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C118) *
               C51126 * C50973 * C295 -
           ((C20287 * C4246 + C20282 * C4247 + C20286 * C902 + C20281 * C912 +
             C20285 * C900 + C20280 * C911 + C20284 * C481 + C20279 * C491) *
                C51026 +
            (C20287 * C4244 + C20282 * C4245 + C20286 * C888 + C20281 * C901 +
             C20285 * C887 + C20280 * C899 + C20284 * C473 + C20279 * C480) *
                C118) *
               C51126 * C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C635 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C630 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C636 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C631 +
           (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
            C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
               C637 +
           (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
            C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
               C632) *
              C51126 * C50973 * C50992 * C51256 +
          ((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
            C20286 * C3298 + C20281 * C3302 + C20287 * C3299 + C20282 * C3304) *
               C636 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C630 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C635) +
           (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
            C20286 * C3303 + C20281 * C3310 + C20287 * C3305 + C20282 * C3311) *
               C631 -
           (C20287 * C20750 + C20282 * C20751 + C20286 * C3299 +
            C20281 * C3304 + C20285 * C3298 + C20280 * C3302 + C20284 * C884 +
            C20279 * C893) *
               C637 -
           (C20287 * C20752 + C20282 * C20753 + C20286 * C3305 +
            C20281 * C3311 + C20285 * C3303 + C20280 * C3310 + C20284 * C894 +
            C20279 * C908) *
               C632) *
              C51126 * C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C118 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51026) *
              C51126 * C50973 * C50992 * C1240 -
          ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
            C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
               C51026 +
           (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
            C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
               C118) *
              C51126 * C50973 * C50992 * C1241 +
          ((C20284 * C1016 + C20279 * C1021 + C20285 * C1158 + C20280 * C1162 +
            C20286 * C3460 + C20281 * C3463 + C20287 * C3636 + C20282 * C3638) *
               C118 +
           (C20284 * C1022 + C20279 * C1031 + C20285 * C1163 + C20280 * C1170 +
            C20286 * C3464 + C20281 * C3469 + C20287 * C3639 + C20282 * C3642) *
               C51026) *
              C51126 * C50973 * C50992 * C1242 -
          ((C20287 * C21021 + C20282 * C21023 + C20286 * C3750 +
            C20281 * C3756 + C20285 * C3751 + C20280 * C3757 + C20284 * C1254 +
            C20279 * C1259) *
               C51026 +
           (C20287 * C21020 + C20282 * C21022 + C20286 * C3744 +
            C20281 * C3752 + C20285 * C3745 + C20280 * C3753 + C20284 * C1247 +
            C20279 * C1255) *
               C118) *
              C51126 * C50973 * C50992 * C1243)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C5336 +
            ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C5337 +
            ((C22413 + C22414) * C118 + (C22415 + C22416) * C51026) * C5338) *
               C50973 * C295 -
           (((C18475 + C18474) * C51026 + (C18473 + C18472) * C118) * C5338 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C5337 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C5336) *
               C50973 * C296 +
           (C17512 * C5336 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C5337 +
            ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C5338) *
               C50973 * C297) *
              C51256 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C5336 +
            ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C5337 +
            ((C17453 * C1246 + C17448 * C1253 + C17454 * C3743 +
              C51162 * C3749) *
                 C118 +
             (C17453 * C1252 + C17448 * C1258 + C17454 * C3747 +
              C51162 * C3755) *
                 C51026) *
                C5338) *
               C50973 * C296 -
           (((C17454 * C3751 + C51162 * C3757 + C17453 * C1254 +
              C17448 * C1259) *
                 C51026 +
             (C17454 * C3745 + C51162 * C3753 + C17453 * C1247 +
              C17448 * C1255) *
                 C118) *
                C5338 +
            ((C22416 + C22415) * C51026 + (C22414 + C22413) * C118) * C5337 +
            ((C22412 + C22411) * C51026 + (C22410 + C22409) * C118) * C5336) *
               C50973 * C295 -
           (((C17454 * C7128 + C51162 * C7129 + C17453 * C1250 +
              C17448 * C1257) *
                 C51026 +
             (C17454 * C7126 + C51162 * C7127 + C17453 * C1245 +
              C17448 * C1251) *
                 C118) *
                C5338 +
            ((C18479 + C18478) * C51026 + (C18477 + C18476) * C118) * C5337 +
            C17894 * C5336) *
               C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C635 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C630 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C636 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C631 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C637 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C632) *
               C5336 +
           ((C22409 + C22410) * C635 + (C22411 + C22412) * C630 -
            (C22839 + C22840) * C636 - (C22841 + C22842) * C631 +
            (C22843 + C22844) * C637 + (C22845 + C22846) * C632) *
               C5337 +
           ((C22413 + C22414) * C635 + (C22415 + C22416) * C630 -
            (C22847 + C22848) * C636 - (C22849 + C22850) * C631 +
            (C22851 + C22852) * C637 + (C22853 + C22854) * C632) *
               C5338) *
              C50973 * C50992 * C51256 +
          (((C22840 + C22839) * C636 -
            ((C22412 + C22411) * C630 + (C22410 + C22409) * C635) +
            (C22842 + C22841) * C631 - (C22844 + C22843) * C637 -
            (C22846 + C22845) * C632) *
               C5336 +
           ((C22848 + C22847) * C636 -
            ((C22416 + C22415) * C630 + (C22414 + C22413) * C635) +
            (C22850 + C22849) * C631 - (C22852 + C22851) * C637 -
            (C22854 + C22853) * C632) *
               C5337 +
           ((C17453 * C3745 + C17448 * C3753 + C17454 * C3744 +
             C51162 * C3752) *
                C636 -
            ((C17454 * C3751 + C51162 * C3757 + C17453 * C1254 +
              C17448 * C1259) *
                 C630 +
             (C17454 * C3745 + C51162 * C3753 + C17453 * C1247 +
              C17448 * C1255) *
                 C635) +
            (C17453 * C3751 + C17448 * C3757 + C17454 * C3750 +
             C51162 * C3756) *
                C631 -
            (C17454 * C21020 + C51162 * C21022 + C17453 * C3744 +
             C17448 * C3752) *
                C637 -
            (C17454 * C21021 + C51162 * C21023 + C17453 * C3750 +
             C17448 * C3756) *
                C632) *
               C5338) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51026) *
               C5336 +
           ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C5337 +
           C23033 * C5338) *
              C50973 * C50992 * C1240 -
          (C23324 * C5338 +
           ((C22416 + C22415) * C51026 + (C22414 + C22413) * C118) * C5337 +
           ((C22412 + C22411) * C51026 + (C22410 + C22409) * C118) * C5336) *
              C50973 * C50992 * C1241 +
          (C23033 * C5336 +
           ((C23032 + C23031) * C118 + (C23030 + C23029) * C51026) * C5337 +
           ((C23320 + C23321) * C118 + (C23322 + C23323) * C51026) * C5338) *
              C50973 * C50992 * C1242 -
          (((C17454 * C23304 + C51162 * C23306 + C17453 * C6607 +
             C17448 * C6610) *
                C51026 +
            (C17454 * C23303 + C51162 * C23305 + C17453 * C6604 +
             C17448 * C6608) *
                C118) *
               C5338 +
           ((C23323 + C23322) * C51026 + (C23321 + C23320) * C118) * C5337 +
           C23324 * C5336) *
              C50973 * C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C51026) *
               C51126 * C50973 * C51300 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51026 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51126 * C50973 * C51285 +
           ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
             C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
                C118 +
            (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
             C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
                C51026) *
               C51126 * C50973 * C1362) *
              C1775 +
          (((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C118 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C51026) *
               C51126 * C50973 * C51285 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51026 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C118) *
               C51126 * C50973 * C51300 -
           ((C20287 * C4246 + C20282 * C4247 + C20286 * C902 + C20281 * C912 +
             C20285 * C900 + C20280 * C911 + C20284 * C481 + C20279 * C491) *
                C51026 +
            (C20287 * C4244 + C20282 * C4245 + C20286 * C888 + C20281 * C901 +
             C20285 * C887 + C20280 * C899 + C20284 * C473 + C20279 * C480) *
                C118) *
               C51126 * C50973 * C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
                C17451 +
            C17514 * C17452) *
               C51300 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51126 *
                C17451 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51126 *
                C17450) *
               C51285 +
           (C17514 * C17450 +
            ((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51126 *
                C17451 +
            ((C17500 + C17501) * C118 + (C17502 + C17503) * C51026) * C51126 *
                C17452) *
               C1362) *
              C1775 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C51126 *
                C17450 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C51126 *
                C17451 +
            ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51126 *
                C17452) *
               C51285 -
           (C17895 * C17452 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51126 *
                C17451 +
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51026 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C118) *
                C51126 * C17450) *
               C51300 -
           (((C17454 * C1645 + C51162 * C1646 + C17453 * C485 + C17448 * C493) *
                 C51026 +
             (C17454 * C1643 + C51162 * C1644 + C17453 * C475 + C17448 * C484) *
                 C118) *
                C51126 * C17452 +
            ((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) * C51126 *
                C17451 +
            C17895 * C17450) *
               C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C5336 +
            ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C5337 +
            C23033 * C5338) *
               C50973 * C51300 -
           (C23034 * C5338 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C5337 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C5336) *
               C50973 * C51285 +
           (C17512 * C5336 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C5337 +
            ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C5338) *
               C50973 * C1362) *
              C1775 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C5336 +
            ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C5337 +
            ((C23025 + C23026) * C118 + (C23027 + C23028) * C51026) * C5338) *
               C50973 * C51285 -
           (C23324 * C5338 +
            ((C22416 + C22415) * C51026 + (C22414 + C22413) * C118) * C5337 +
            ((C22412 + C22411) * C51026 + (C22410 + C22409) * C118) * C5336) *
               C50973 * C51300 -
           (((C17454 * C7128 + C51162 * C7129 + C17453 * C1250 +
              C17448 * C1257) *
                 C51026 +
             (C17454 * C7126 + C51162 * C7127 + C17453 * C1245 +
              C17448 * C1251) *
                 C118) *
                C5338 +
            ((C18479 + C18478) * C51026 + (C18477 + C18476) * C118) * C5337 +
            C17894 * C5336) *
               C50973 * C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C298 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C51254 -
            (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
             C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
                C299 -
            (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
             C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
                C51042) *
               C51126 * C50973 * C1490 +
           ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
             C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
                C299 -
            ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
              C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                 C51254 +
             (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
              C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                 C298) +
            (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
             C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
                C51042) *
               C51126 * C50973 * C50997) *
              C1775 +
          (((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
             C20286 * C3298 + C20281 * C3302 + C20287 * C3299 +
             C20282 * C3304) *
                C299 -
            ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
              C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                 C51254 +
             (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
              C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                 C298) +
            (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
             C20286 * C3303 + C20281 * C3310 + C20287 * C3305 +
             C20282 * C3311) *
                C51042) *
               C51126 * C50973 * C1490 +
           ((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C298 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C51254 -
            (C20287 * C3301 + C20282 * C3308 + C20286 * C3300 + C20281 * C3306 +
             C20285 * C886 + C20280 * C897 + C20284 * C885 + C20279 * C895) *
                C299 -
            (C20287 * C3309 + C20282 * C3313 + C20286 * C3307 + C20281 * C3312 +
             C20285 * C898 + C20280 * C910 + C20284 * C896 + C20279 * C909) *
                C51042) *
               C51126 * C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C298 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51254 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C299 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C51126 * C17450 +
            ((C17488 + C17489) * C298 + (C17490 + C17491) * C51254 -
             (C17688 + C17689) * C299 - (C17690 + C17691) * C51042) *
                C51126 * C17451 +
            C17707 * C17452) *
               C1490 +
           (((C17689 + C17688) * C299 -
             ((C17491 + C17490) * C51254 + (C17489 + C17488) * C298) +
             (C17691 + C17690) * C51042) *
                C51126 * C17450 +
            ((C17694 + C17693) * C299 -
             ((C17495 + C17494) * C51254 + (C17493 + C17492) * C298) +
             (C17696 + C17695) * C51042) *
                C51126 * C17451 +
            ((C17697 + C17698) * C299 - (C17506 * C51254 + C17507 * C298) +
             (C17699 + C17700) * C51042) *
                C51126 * C17452) *
               C50997) *
              C1775 +
          ((((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                 C299 -
             ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                  C51254 +
              (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                  C298) +
             (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                 C51042) *
                C51126 * C17450 +
            ((C19234 + C19235) * C299 -
             ((C17881 + C17880) * C51254 + (C17879 + C17878) * C298) +
             (C19236 + C19237) * C51042) *
                C51126 * C17451 +
            ((C19238 + C19239) * C299 - (C17890 * C51254 + C17891 * C298) +
             (C19240 + C19241) * C51042) *
                C51126 * C17452) *
               C1490 +
           (((C17878 + C17879) * C298 + (C17880 + C17881) * C51254 -
             (C19235 + C19234) * C299 - (C19237 + C19236) * C51042) *
                C51126 * C17450 +
            ((C17882 + C17883) * C298 + (C17884 + C17885) * C51254 -
             (C19239 + C19238) * C299 - (C19241 + C19240) * C51042) *
                C51126 * C17451 +
            ((C17886 + C17887) * C298 + (C17888 + C17889) * C51254 -
             (C17454 * C890 + C51162 * C905 + C17453 * C889 + C17448 * C903) *
                 C299 -
             (C17454 * C906 + C51162 * C914 + C17453 * C904 + C17448 * C913) *
                 C51042) *
                C51126 * C17452) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C298 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51254 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C299 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C5336 +
            ((C22409 + C22410) * C298 + (C22411 + C22412) * C51254 -
             (C22839 + C22840) * C299 - (C22841 + C22842) * C51042) *
                C5337 +
            C23205 * C5338) *
               C50973 * C1490 +
           (((C17689 + C17688) * C299 -
             ((C17491 + C17490) * C51254 + (C17489 + C17488) * C298) +
             (C17691 + C17690) * C51042) *
                C5336 +
            ((C19234 + C19235) * C299 -
             ((C17881 + C17880) * C51254 + (C17879 + C17878) * C298) +
             (C19236 + C19237) * C51042) *
                C5337 +
            ((C23819 + C23820) * C299 - (C23003 * C51254 + C23004 * C298) +
             (C23821 + C23822) * C51042) *
                C5338) *
               C50973 * C50997) *
              C1775 +
          ((((C22840 + C22839) * C299 -
             ((C22412 + C22411) * C51254 + (C22410 + C22409) * C298) +
             (C22842 + C22841) * C51042) *
                C5336 +
            ((C22848 + C22847) * C299 -
             ((C22416 + C22415) * C51254 + (C22414 + C22413) * C298) +
             (C22850 + C22849) * C51042) *
                C5337 +
            ((C23200 + C23201) * C299 - (C23308 * C51254 + C23309 * C298) +
             (C23202 + C23203) * C51042) *
                C5338) *
               C50973 * C1490 +
           (((C17878 + C17879) * C298 + (C17880 + C17881) * C51254 -
             (C19235 + C19234) * C299 - (C19237 + C19236) * C51042) *
                C5336 +
            ((C18472 + C18473) * C298 + (C18474 + C18475) * C51254 -
             (C23820 + C23819) * C299 - (C23822 + C23821) * C51042) *
                C5337 +
            ((C23025 + C23026) * C298 + (C23027 + C23028) * C51254 -
             (C17454 * C3742 + C51162 * C3748 + C17453 * C3743 +
              C17448 * C3749) *
                 C299 -
             (C17454 * C3746 + C51162 * C3754 + C17453 * C3747 +
              C17448 * C3755) *
                 C51042) *
                C5338) *
               C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C51026) *
               C51126 * C50973 * C1490 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51026 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51126 * C50973 * C50997) *
              C51302 +
          (((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C118 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C51026) *
               C51126 * C50973 * C50997 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51026 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C118) *
               C51126 * C50973 * C1490) *
              C51291 +
          (((C20284 * C1016 + C20279 * C1021 + C20285 * C1158 + C20280 * C1162 +
             C20286 * C3460 + C20281 * C3463 + C20287 * C3636 +
             C20282 * C3638) *
                C118 +
            (C20284 * C1022 + C20279 * C1031 + C20285 * C1163 + C20280 * C1170 +
             C20286 * C3464 + C20281 * C3469 + C20287 * C3639 +
             C20282 * C3642) *
                C51026) *
               C51126 * C50973 * C1490 -
           ((C20287 * C3641 + C20282 * C3643 + C20286 * C3466 + C20281 * C3470 +
             C20285 * C1165 + C20280 * C1171 + C20284 * C1024 +
             C20279 * C1032) *
                C51026 +
            (C20287 * C3637 + C20282 * C3640 + C20286 * C3461 + C20281 * C3465 +
             C20285 * C1159 + C20280 * C1164 + C20284 * C1017 +
             C20279 * C1023) *
                C118) *
               C51126 * C50973 * C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
                C17451 +
            C17514 * C17452) *
               C1490 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51126 *
                C17451 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51126 *
                C17450) *
               C50997) *
              C51302 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C51126 *
                C17450 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C51126 *
                C17451 +
            ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51126 *
                C17452) *
               C50997 -
           (C17895 * C17452 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51126 *
                C17451 +
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51026 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C118) *
                C51126 * C17450) *
               C1490) *
              C51291 +
          ((((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
              C51162 * C1162) *
                 C118 +
             (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
              C51162 * C1170) *
                 C51026) *
                C51126 * C17450 +
            ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C51126 *
                C17451 +
            ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C51126 *
                C17452) *
               C1490 -
           (((C17454 * C1169 + C51162 * C1173 + C17453 * C1028 +
              C17448 * C1034) *
                 C51026 +
             (C17454 * C1161 + C51162 * C1168 + C17453 * C1019 +
              C17448 * C1027) *
                 C118) *
                C51126 * C17452 +
            ((C18479 + C18478) * C51026 + (C18477 + C18476) * C118) * C51126 *
                C17451 +
            ((C18475 + C18474) * C51026 + (C18473 + C18472) * C118) * C51126 *
                C17450) *
               C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C5336 +
            ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C5337 +
            C23033 * C5338) *
               C50973 * C1490 -
           (C23034 * C5338 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C5337 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C5336) *
               C50973 * C50997) *
              C51302 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C5336 +
            ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C5337 +
            ((C23025 + C23026) * C118 + (C23027 + C23028) * C51026) * C5338) *
               C50973 * C50997 -
           (C23324 * C5338 +
            ((C22416 + C22415) * C51026 + (C22414 + C22413) * C118) * C5337 +
            ((C22412 + C22411) * C51026 + (C22410 + C22409) * C118) * C5336) *
               C50973 * C1490) *
              C51291 +
          ((C23033 * C5336 +
            ((C23032 + C23031) * C118 + (C23030 + C23029) * C51026) * C5337 +
            ((C23320 + C23321) * C118 + (C23322 + C23323) * C51026) * C5338) *
               C50973 * C1490 -
           (((C17454 * C6468 + C51162 * C6470 + C17453 * C6292 +
              C17448 * C6296) *
                 C51026 +
             (C17454 * C6464 + C51162 * C6467 + C17453 * C6287 +
              C17448 * C6291) *
                 C118) *
                C5338 +
            ((C23028 + C23027) * C51026 + (C23026 + C23025) * C118) * C5337 +
            C23034 * C5336) *
               C50973 * C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C635 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C630 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C636 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C631 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C637 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C632) *
               C51126 * C17450 +
           ((C17488 + C17489) * C635 + (C17490 + C17491) * C630 -
            (C17688 + C17689) * C636 - (C17690 + C17691) * C631 +
            (C18058 + C18059) * C637 + (C18060 + C18061) * C632) *
               C51126 * C17451 +
           (C17504 * C635 + C17505 * C630 - C17701 * C636 - C17702 * C631 +
            (C18062 + C18063) * C637 + (C18064 + C18065) * C632) *
               C51126 * C17452) *
              C51247 +
          (((C17689 + C17688) * C636 -
            ((C17491 + C17490) * C630 + (C17489 + C17488) * C635) +
            (C17691 + C17690) * C631 - (C18059 + C18058) * C637 -
            (C18061 + C18060) * C632) *
               C51126 * C17450 +
           ((C17694 + C17693) * C636 -
            ((C17495 + C17494) * C630 + (C17493 + C17492) * C635) +
            (C17696 + C17695) * C631 - (C18063 + C18062) * C637 -
            (C18065 + C18064) * C632) *
               C51126 * C17451 +
           ((C17697 + C17698) * C636 - (C17506 * C630 + C17507 * C635) +
            (C17699 + C17700) * C631 -
            (C17454 * C772 + C51162 * C779 + C17453 * C641 + C17448 * C649) *
                C637 -
            (C17454 * C780 + C51162 * C784 + C17453 * C650 + C17448 * C656) *
                C632) *
               C51126 * C17452) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51026) *
               C51126 * C17450 +
           ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
               C17451 +
           C17514 * C17452) *
              C112 -
          (C17515 * C17452 +
           ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51126 *
               C17451 +
           ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51126 *
               C17450) *
              C113 +
          (C17514 * C17450 +
           ((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51126 *
               C17451 +
           ((C17500 + C17501) * C118 + (C17502 + C17503) * C51026) * C51126 *
               C17452) *
              C114 -
          (((C17454 * C317 + C51162 * C323 + C17453 * C137 + C17448 * C145) *
                C51026 +
            (C17454 * C305 + C51162 * C316 + C17453 * C124 + C17448 * C136) *
                C118) *
               C51126 * C17452 +
           ((C17503 + C17502) * C51026 + (C17501 + C17500) * C118) * C51126 *
               C17451 +
           C17515 * C17450) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C118 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51026) *
              C51126 * C50973 * C112 -
          ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
            C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
               C51026 +
           (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
            C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
               C118) *
              C51126 * C50973 * C113 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
            C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
               C118 +
           (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
            C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
               C51026) *
              C51126 * C50973 * C114 -
          ((C20287 * C780 + C20282 * C784 + C20286 * C650 + C20281 * C656 +
            C20285 * C313 + C20280 * C321 + C20284 * C133 + C20279 * C143) *
               C51026 +
           (C20287 * C772 + C20282 * C779 + C20286 * C641 + C20281 * C649 +
            C20285 * C303 + C20280 * C312 + C20284 * C122 + C20279 * C132) *
               C118) *
              C51126 * C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C635 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C630 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C636 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C631 +
           (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
            C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
               C637 +
           (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
            C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
               C632) *
              C51126 * C50973 * C51247 +
          ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
            C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
               C636 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C630 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C635) +
           (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
            C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
               C631 -
           (C20287 * C3145 + C20282 * C3148 + C20286 * C3017 + C20281 * C3021 +
            C20285 * C770 + C20280 * C775 + C20284 * C639 + C20279 * C645) *
               C637 -
           (C20287 * C3149 + C20282 * C3151 + C20286 * C3022 + C20281 * C3026 +
            C20285 * C776 + C20280 * C782 + C20284 * C646 + C20279 * C654) *
               C632) *
              C51126 * C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51026) *
               C5336 +
           ((C17453 * C476 + C17448 * C487 + C17454 * C883 + C51162 * C891) *
                C118 +
            (C17453 * C486 + C17448 * C494 + C17454 * C892 + C51162 * C907) *
                C51026) *
               C5337 +
           ((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
             C51162 * C1162) *
                C118 +
            (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
             C51162 * C1170) *
                C51026) *
               C5338) *
              C50973 * C112 -
          (((C18475 + C18474) * C51026 + (C18473 + C18472) * C118) * C5338 +
           ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C5337 +
           ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C5336) *
              C50973 * C113 +
          (C17512 * C5336 +
           ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C5337 +
           ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C5338) *
              C50973 * C114 -
          (((C17454 * C1169 + C51162 * C1173 + C17453 * C1028 +
             C17448 * C1034) *
                C51026 +
            (C17454 * C1161 + C51162 * C1168 + C17453 * C1019 +
             C17448 * C1027) *
                C118) *
               C5338 +
           ((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) * C5337 +
           C17513 * C5336) *
              C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C635 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C630 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C636 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C631 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C637 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C632) *
               C5336 +
           ((C22409 + C22410) * C635 + (C22411 + C22412) * C630 -
            (C17454 * C884 + C51162 * C893 + C17453 * C883 + C17448 * C891) *
                C636 -
            (C17454 * C894 + C51162 * C908 + C17453 * C892 + C17448 * C907) *
                C631 +
            (C17453 * C884 + C17448 * C893 + C17454 * C3298 + C51162 * C3302) *
                C637 +
            (C17453 * C894 + C17448 * C908 + C17454 * C3303 + C51162 * C3310) *
                C632) *
               C5337 +
           ((C22413 + C22414) * C635 + (C22415 + C22416) * C630 -
            (C17454 * C3460 + C51162 * C3463 + C17453 * C1158 +
             C17448 * C1162) *
                C636 -
            (C17454 * C3464 + C51162 * C3469 + C17453 * C1163 +
             C17448 * C1170) *
                C631 +
            (C17453 * C3460 + C17448 * C3463 + C17454 * C3636 +
             C51162 * C3638) *
                C637 +
            (C17453 * C3464 + C17448 * C3469 + C17454 * C3639 +
             C51162 * C3642) *
                C632) *
               C5338) *
              C50973 * C51247 +
          (((C17689 + C17688) * C636 -
            ((C17491 + C17490) * C630 + (C17489 + C17488) * C635) +
            (C17691 + C17690) * C631 - (C18059 + C18058) * C637 -
            (C18061 + C18060) * C632) *
               C5336 +
           ((C19234 + C19235) * C636 -
            ((C17881 + C17880) * C630 + (C17879 + C17878) * C635) +
            (C19236 + C19237) * C631 -
            (C17454 * C3300 + C51162 * C3306 + C17453 * C886 + C17448 * C897) *
                C637 -
            (C17454 * C3307 + C51162 * C3312 + C17453 * C898 + C17448 * C910) *
                C632) *
               C5337 +
           ((C17453 * C1159 + C17448 * C1164 + C17454 * C3461 +
             C51162 * C3465) *
                C636 -
            ((C18475 + C18474) * C630 + (C18473 + C18472) * C635) +
            (C17453 * C1165 + C17448 * C1171 + C17454 * C3466 +
             C51162 * C3470) *
                C631 -
            (C17454 * C3637 + C51162 * C3640 + C17453 * C3461 +
             C17448 * C3465) *
                C637 -
            (C17454 * C3641 + C51162 * C3643 + C17453 * C3466 +
             C17448 * C3470) *
                C632) *
               C5338) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
               C765 +
           (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
               C760 -
           (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
               C766 -
           (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
               C761 +
           (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
               C767 +
           (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
               C762 -
           (C17454 * C3016 + C51162 * C3019 + C17453 * C769 + C17448 * C773) *
               C768 -
           (C17454 * C3020 + C51162 * C3025 + C17453 * C774 + C17448 * C781) *
               C763) *
              C51126 * C17450 +
          ((C17488 + C17489) * C765 + (C17490 + C17491) * C760 -
           (C17688 + C17689) * C766 - (C17690 + C17691) * C761 +
           (C18058 + C18059) * C767 + (C18060 + C18061) * C762 -
           (C17454 * C3017 + C51162 * C3021 + C17453 * C770 + C17448 * C775) *
               C768 -
           (C17454 * C3022 + C51162 * C3026 + C17453 * C776 + C17448 * C782) *
               C763) *
              C51126 * C17451 +
          (C17504 * C765 + C17505 * C760 - C17701 * C766 - C17702 * C761 +
           (C18062 + C18063) * C767 + (C18064 + C18065) * C762 -
           (C17454 * C3018 + C51162 * C3023 + C17453 * C771 + C17448 * C777) *
               C768 -
           (C17454 * C3024 + C51162 * C3027 + C17453 * C778 + C17448 * C783) *
               C763) *
              C51126 * C17452) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51254 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C299 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C51126 * C17450 +
           ((C17488 + C17489) * C298 + (C17490 + C17491) * C51254 -
            (C17688 + C17689) * C299 - (C17690 + C17691) * C51042) *
               C51126 * C17451 +
           C17707 * C17452) *
              C295 +
          (((C17689 + C17688) * C299 -
            ((C17491 + C17490) * C51254 + (C17489 + C17488) * C298) +
            (C17691 + C17690) * C51042) *
               C51126 * C17450 +
           ((C17694 + C17693) * C299 -
            ((C17495 + C17494) * C51254 + (C17493 + C17492) * C298) +
            (C17696 + C17695) * C51042) *
               C51126 * C17451 +
           ((C17697 + C17698) * C299 - (C17506 * C51254 + C17507 * C298) +
            (C17699 + C17700) * C51042) *
               C51126 * C17452) *
              C296 +
          (C17707 * C17450 +
           ((C17499 + C17498) * C298 + (C17497 + C17496) * C51254 -
            (C17698 + C17697) * C299 - (C17700 + C17699) * C51042) *
               C51126 * C17451 +
           ((C17500 + C17501) * C298 + (C17502 + C17503) * C51254 -
            (C17454 * C642 + C51162 * C651 + C17453 * C304 + C17448 * C314) *
                C299 -
            (C17454 * C652 + C51162 * C657 + C17453 * C315 + C17448 * C322) *
                C51042) *
               C51126 * C17452) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51254 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C299 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51042) *
              C51126 * C50973 * C295 +
          ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
            C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
               C299 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51254 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C298) +
           (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
            C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
               C51042) *
              C51126 * C50973 * C296 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
            C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
               C298 +
           (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
            C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
               C51254 -
           (C20287 * C3018 + C20282 * C3023 + C20286 * C771 + C20281 * C777 +
            C20285 * C640 + C20280 * C647 + C20284 * C302 + C20279 * C310) *
               C299 -
           (C20287 * C3024 + C20282 * C3027 + C20286 * C778 + C20281 * C783 +
            C20285 * C648 + C20280 * C655 + C20284 * C311 + C20279 * C320) *
               C51042) *
              C51126 * C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
           C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
              C765 +
          (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
           C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
              C760 -
          (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
           C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
              C766 -
          (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
           C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
              C761 +
          (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
           C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
              C767 +
          (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
           C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
              C762 -
          (C20287 * C20648 + C20282 * C20649 + C20286 * C3144 + C20281 * C3146 +
           C20285 * C3016 + C20280 * C3019 + C20284 * C769 + C20279 * C773) *
              C768 -
          (C20287 * C20650 + C20282 * C20651 + C20286 * C3147 + C20281 * C3150 +
           C20285 * C3020 + C20280 * C3025 + C20284 * C774 + C20279 * C781) *
              C763) *
         C51126 * C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51254 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C299 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C5336 +
           ((C17453 * C476 + C17448 * C487 + C17454 * C883 + C51162 * C891) *
                C298 +
            (C17453 * C486 + C17448 * C494 + C17454 * C892 + C51162 * C907) *
                C51254 -
            (C17454 * C884 + C51162 * C893 + C17453 * C883 + C17448 * C891) *
                C299 -
            (C17454 * C894 + C51162 * C908 + C17453 * C892 + C17448 * C907) *
                C51042) *
               C5337 +
           ((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
             C51162 * C1162) *
                C298 +
            (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
             C51162 * C1170) *
                C51254 -
            (C17454 * C3460 + C51162 * C3463 + C17453 * C1158 +
             C17448 * C1162) *
                C299 -
            (C17454 * C3464 + C51162 * C3469 + C17453 * C1163 +
             C17448 * C1170) *
                C51042) *
               C5338) *
              C50973 * C295 +
          (((C17689 + C17688) * C299 -
            ((C17491 + C17490) * C51254 + (C17489 + C17488) * C298) +
            (C17691 + C17690) * C51042) *
               C5336 +
           ((C19234 + C19235) * C299 -
            ((C17881 + C17880) * C51254 + (C17879 + C17878) * C298) +
            (C19236 + C19237) * C51042) *
               C5337 +
           ((C17453 * C1159 + C17448 * C1164 + C17454 * C3461 +
             C51162 * C3465) *
                C299 -
            ((C18475 + C18474) * C51254 + (C18473 + C18472) * C298) +
            (C17453 * C1165 + C17448 * C1171 + C17454 * C3466 +
             C51162 * C3470) *
                C51042) *
               C5338) *
              C50973 * C296 +
          (C17706 * C5336 +
           ((C17882 + C17883) * C298 + (C17884 + C17885) * C51254 -
            (C19239 + C19238) * C299 - (C19241 + C19240) * C51042) *
               C5337 +
           ((C18476 + C18477) * C298 + (C18478 + C18479) * C51254 -
            (C17454 * C3462 + C51162 * C3468 + C17453 * C1160 +
             C17448 * C1166) *
                C299 -
            (C17454 * C3467 + C51162 * C3471 + C17453 * C1167 +
             C17448 * C1172) *
                C51042) *
               C5338) *
              C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
               C765 +
           (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
               C760 -
           (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
               C766 -
           (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
               C761 +
           (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
               C767 +
           (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
               C762 -
           (C17454 * C3016 + C51162 * C3019 + C17453 * C769 + C17448 * C773) *
               C768 -
           (C17454 * C3020 + C51162 * C3025 + C17453 * C774 + C17448 * C781) *
               C763) *
              C5336 +
          ((C22409 + C22410) * C765 + (C22411 + C22412) * C760 -
           (C17454 * C884 + C51162 * C893 + C17453 * C883 + C17448 * C891) *
               C766 -
           (C17454 * C894 + C51162 * C908 + C17453 * C892 + C17448 * C907) *
               C761 +
           (C17453 * C884 + C17448 * C893 + C17454 * C3298 + C51162 * C3302) *
               C767 +
           (C17453 * C894 + C17448 * C908 + C17454 * C3303 + C51162 * C3310) *
               C762 -
           (C17454 * C3299 + C51162 * C3304 + C17453 * C3298 + C17448 * C3302) *
               C768 -
           (C17454 * C3305 + C51162 * C3311 + C17453 * C3303 + C17448 * C3310) *
               C763) *
              C5337 +
          ((C22413 + C22414) * C765 + (C22415 + C22416) * C760 -
           (C17454 * C3460 + C51162 * C3463 + C17453 * C1158 + C17448 * C1162) *
               C766 -
           (C17454 * C3464 + C51162 * C3469 + C17453 * C1163 + C17448 * C1170) *
               C761 +
           (C17453 * C3460 + C17448 * C3463 + C17454 * C3636 + C51162 * C3638) *
               C767 +
           (C17453 * C3464 + C17448 * C3469 + C17454 * C3639 + C51162 * C3642) *
               C762 -
           (C17454 * C20950 + C51162 * C20951 + C17453 * C3636 +
            C17448 * C3638) *
               C768 -
           (C17454 * C20952 + C51162 * C20953 + C17453 * C3639 +
            C17448 * C3642) *
               C763) *
              C5338) *
         C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C635 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C630 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C636 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C631 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C637 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C632) *
               C51126 * C17450 +
           ((C17488 + C17489) * C635 + (C17490 + C17491) * C630 -
            (C17688 + C17689) * C636 - (C17690 + C17691) * C631 +
            (C18058 + C18059) * C637 + (C18060 + C18061) * C632) *
               C51126 * C17451 +
           (C17504 * C635 + C17505 * C630 - C17701 * C636 - C17702 * C631 +
            (C18062 + C18063) * C637 + (C18064 + C18065) * C632) *
               C51126 * C17452) *
              C50992 * C51256 +
          (((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                C636 -
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C630 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C635) +
            (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                C631 -
            (C17454 * C3298 + C51162 * C3302 + C17453 * C884 + C17448 * C893) *
                C637 -
            (C17454 * C3303 + C51162 * C3310 + C17453 * C894 + C17448 * C908) *
                C632) *
               C51126 * C17450 +
           ((C17453 * C885 + C17448 * C895 + C17454 * C886 + C51162 * C897) *
                C636 -
            ((C17881 + C17880) * C630 + (C17879 + C17878) * C635) +
            (C17453 * C896 + C17448 * C909 + C17454 * C898 + C51162 * C910) *
                C631 -
            (C17454 * C3300 + C51162 * C3306 + C17453 * C886 + C17448 * C897) *
                C637 -
            (C17454 * C3307 + C51162 * C3312 + C17453 * C898 + C17448 * C910) *
                C632) *
               C51126 * C17451 +
           ((C17453 * C887 + C17448 * C899 + C17454 * C888 + C51162 * C901) *
                C636 -
            (C17890 * C630 + C17891 * C635) +
            (C17453 * C900 + C17448 * C911 + C17454 * C902 + C51162 * C912) *
                C631 -
            (C17454 * C4244 + C51162 * C4245 + C17453 * C888 + C17448 * C901) *
                C637 -
            (C17454 * C4246 + C51162 * C4247 + C17453 * C902 + C17448 * C912) *
                C632) *
               C51126 * C17452) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
                C17451 +
            C17514 * C17452) *
               C295 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51126 *
                C17451 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51126 *
                C17450) *
               C296 +
           (C17514 * C17450 +
            ((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51126 *
                C17451 +
            ((C17500 + C17501) * C118 + (C17502 + C17503) * C51026) * C51126 *
                C17452) *
               C297) *
              C51256 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C51126 *
                C17450 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C51126 *
                C17451 +
            ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51126 *
                C17452) *
               C296 -
           (C17895 * C17452 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51126 *
                C17451 +
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51026 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C118) *
                C51126 * C17450) *
               C295 -
           (((C17454 * C1645 + C51162 * C1646 + C17453 * C485 + C17448 * C493) *
                 C51026 +
             (C17454 * C1643 + C51162 * C1644 + C17453 * C475 + C17448 * C484) *
                 C118) *
                C51126 * C17452 +
            ((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) * C51126 *
                C17451 +
            C17895 * C17450) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C51026) *
               C51126 * C50973 * C295 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51026 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51126 * C50973 * C296 +
           ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
             C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
                C118 +
            (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
             C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
                C51026) *
               C51126 * C50973 * C297) *
              C51256 +
          (((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C118 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C51026) *
               C51126 * C50973 * C296 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51026 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C118) *
               C51126 * C50973 * C295 -
           ((C20287 * C4246 + C20282 * C4247 + C20286 * C902 + C20281 * C912 +
             C20285 * C900 + C20280 * C911 + C20284 * C481 + C20279 * C491) *
                C51026 +
            (C20287 * C4244 + C20282 * C4245 + C20286 * C888 + C20281 * C901 +
             C20285 * C887 + C20280 * C899 + C20284 * C473 + C20279 * C480) *
                C118) *
               C51126 * C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C635 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C630 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C636 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C631 +
           (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
            C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
               C637 +
           (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
            C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
               C632) *
              C51126 * C50973 * C50992 * C51256 +
          ((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
            C20286 * C3298 + C20281 * C3302 + C20287 * C3299 + C20282 * C3304) *
               C636 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C630 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C635) +
           (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
            C20286 * C3303 + C20281 * C3310 + C20287 * C3305 + C20282 * C3311) *
               C631 -
           (C20287 * C20750 + C20282 * C20751 + C20286 * C3299 +
            C20281 * C3304 + C20285 * C3298 + C20280 * C3302 + C20284 * C884 +
            C20279 * C893) *
               C637 -
           (C20287 * C20752 + C20282 * C20753 + C20286 * C3305 +
            C20281 * C3311 + C20285 * C3303 + C20280 * C3310 + C20284 * C894 +
            C20279 * C908) *
               C632) *
              C51126 * C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C5336 +
            ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C5337 +
            ((C22413 + C22414) * C118 + (C22415 + C22416) * C51026) * C5338) *
               C50973 * C295 -
           (((C18475 + C18474) * C51026 + (C18473 + C18472) * C118) * C5338 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C5337 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C5336) *
               C50973 * C296 +
           (C17512 * C5336 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C5337 +
            ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C5338) *
               C50973 * C297) *
              C51256 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C5336 +
            ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C5337 +
            ((C17453 * C1246 + C17448 * C1253 + C17454 * C3743 +
              C51162 * C3749) *
                 C118 +
             (C17453 * C1252 + C17448 * C1258 + C17454 * C3747 +
              C51162 * C3755) *
                 C51026) *
                C5338) *
               C50973 * C296 -
           (((C17454 * C3751 + C51162 * C3757 + C17453 * C1254 +
              C17448 * C1259) *
                 C51026 +
             (C17454 * C3745 + C51162 * C3753 + C17453 * C1247 +
              C17448 * C1255) *
                 C118) *
                C5338 +
            ((C22416 + C22415) * C51026 + (C22414 + C22413) * C118) * C5337 +
            ((C22412 + C22411) * C51026 + (C22410 + C22409) * C118) * C5336) *
               C50973 * C295 -
           (((C17454 * C7128 + C51162 * C7129 + C17453 * C1250 +
              C17448 * C1257) *
                 C51026 +
             (C17454 * C7126 + C51162 * C7127 + C17453 * C1245 +
              C17448 * C1251) *
                 C118) *
                C5338 +
            ((C18479 + C18478) * C51026 + (C18477 + C18476) * C118) * C5337 +
            C17894 * C5336) *
               C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C635 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C630 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C636 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C631 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C637 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C632) *
               C5336 +
           ((C22409 + C22410) * C635 + (C22411 + C22412) * C630 -
            (C22839 + C22840) * C636 - (C22841 + C22842) * C631 +
            (C22843 + C22844) * C637 + (C22845 + C22846) * C632) *
               C5337 +
           ((C22413 + C22414) * C635 + (C22415 + C22416) * C630 -
            (C22847 + C22848) * C636 - (C22849 + C22850) * C631 +
            (C22851 + C22852) * C637 + (C22853 + C22854) * C632) *
               C5338) *
              C50973 * C50992 * C51256 +
          (((C22840 + C22839) * C636 -
            ((C22412 + C22411) * C630 + (C22410 + C22409) * C635) +
            (C22842 + C22841) * C631 - (C22844 + C22843) * C637 -
            (C22846 + C22845) * C632) *
               C5336 +
           ((C22848 + C22847) * C636 -
            ((C22416 + C22415) * C630 + (C22414 + C22413) * C635) +
            (C22850 + C22849) * C631 - (C22852 + C22851) * C637 -
            (C22854 + C22853) * C632) *
               C5337 +
           ((C17453 * C3745 + C17448 * C3753 + C17454 * C3744 +
             C51162 * C3752) *
                C636 -
            ((C17454 * C3751 + C51162 * C3757 + C17453 * C1254 +
              C17448 * C1259) *
                 C630 +
             (C17454 * C3745 + C51162 * C3753 + C17453 * C1247 +
              C17448 * C1255) *
                 C635) +
            (C17453 * C3751 + C17448 * C3757 + C17454 * C3750 +
             C51162 * C3756) *
                C631 -
            (C17454 * C21020 + C51162 * C21022 + C17453 * C3744 +
             C17448 * C3752) *
                C637 -
            (C17454 * C21021 + C51162 * C21023 + C17453 * C3750 +
             C17448 * C3756) *
                C632) *
               C5338) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C1363 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C1358 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C1364 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C51271 +
            ((C22409 + C22410) * C1363 + (C22411 + C22412) * C1358 -
             (C22839 + C22840) * C1364 - (C22841 + C22842) * C51042) *
                C51190) *
               C51242 +
           (((C17488 + C17489) * C1363 + (C17490 + C17491) * C1358 -
             (C17688 + C17689) * C1364 - (C17690 + C17691) * C51042) *
                C51271 +
            (C28136 * C1363 + C28137 * C1358 - (C19235 + C19234) * C1364 -
             (C19237 + C19236) * C51042) *
                C51190) *
               C50978) *
              C51300 +
          ((((C17689 + C17688) * C1364 -
             ((C17491 + C17490) * C1358 + (C17489 + C17488) * C1363) +
             (C17691 + C17690) * C51042) *
                C51271 +
            ((C19234 + C19235) * C1364 - (C28138 * C1358 + C28139 * C1363) +
             (C19236 + C19237) * C51042) *
                C51190) *
               C51242 +
           (((C17694 + C17693) * C1364 -
             ((C17495 + C17494) * C1358 + (C17493 + C17492) * C1363) +
             (C17696 + C17695) * C51042) *
                C51271 +
            ((C19238 + C19239) * C1364 - (C17890 * C1358 + C17891 * C1363) +
             (C19240 + C19241) * C51042) *
                C51190) *
               C50978) *
              C51285 +
          ((C18876 * C51271 +
            (C28140 * C1363 + C28141 * C1358 - (C19239 + C19238) * C1364 -
             (C19241 + C19240) * C51042) *
                C51190) *
               C51242 +
           (((C17499 + C17498) * C1363 + (C17497 + C17496) * C1358 -
             (C17698 + C17697) * C1364 - (C17700 + C17699) * C51042) *
                C51271 +
            ((C17886 + C17887) * C1363 + (C17888 + C17889) * C1358 -
             (C17454 * C890 + C51162 * C905 + C17453 * C889 + C17448 * C903) *
                 C1364 -
             (C17454 * C906 + C51162 * C914 + C17453 * C904 + C17448 * C913) *
                 C51042) *
                C51190) *
               C50978) *
              C1362) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C1492 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51301 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C1493 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51288 +
             (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                 C1494 +
             (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                 C1489) *
                C51271 +
            ((C22409 + C22410) * C1492 + (C22411 + C22412) * C51301 -
             (C22839 + C22840) * C1493 - (C22841 + C22842) * C51288 +
             (C22843 + C22844) * C1494 + (C22845 + C22846) * C1489) *
                C51190) *
               C51242 +
           (((C17488 + C17489) * C1492 + (C17490 + C17491) * C51301 -
             (C17688 + C17689) * C1493 - (C17690 + C17691) * C51288 +
             (C18058 + C18059) * C1494 + (C18060 + C18061) * C1489) *
                C51271 +
            (C28136 * C1492 + C28137 * C51301 - (C19235 + C19234) * C1493 -
             (C19237 + C19236) * C51288 + (C28353 + C28354) * C1494 +
             (C28355 + C28356) * C1489) *
                C51190) *
               C50978) *
              C1490 +
          ((((C17689 + C17688) * C1493 -
             ((C17491 + C17490) * C51301 + (C17489 + C17488) * C1492) +
             (C17691 + C17690) * C51288 - (C18059 + C18058) * C1494 -
             (C18061 + C18060) * C1489) *
                C51271 +
            ((C19234 + C19235) * C1493 - (C28138 * C51301 + C28139 * C1492) +
             (C19236 + C19237) * C51288 - (C28354 + C28353) * C1494 -
             (C28356 + C28355) * C1489) *
                C51190) *
               C51242 +
           (((C17694 + C17693) * C1493 -
             ((C17495 + C17494) * C51301 + (C17493 + C17492) * C1492) +
             (C17696 + C17695) * C51288 - (C18063 + C18062) * C1494 -
             (C18065 + C18064) * C1489) *
                C51271 +
            ((C19238 + C19239) * C1493 - (C17890 * C51301 + C17891 * C1492) +
             (C19240 + C19241) * C51288 -
             (C17454 * C4244 + C51162 * C4245 + C17453 * C888 + C17448 * C901) *
                 C1494 -
             (C17454 * C4246 + C51162 * C4247 + C17453 * C902 + C17448 * C912) *
                 C1489) *
                C51190) *
               C50978) *
              C50997) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                  C1363 +
              (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                  C1358 -
              (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                  C1364 -
              (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                  C51042) *
                 C51271 +
             ((C22409 + C22410) * C1363 + (C22411 + C22412) * C1358 -
              (C22839 + C22840) * C1364 - (C22841 + C22842) * C51042) *
                 C51190) *
                C51242 +
            (((C17488 + C17489) * C1363 + (C17490 + C17491) * C1358 -
              (C17688 + C17689) * C1364 - (C17690 + C17691) * C51042) *
                 C51271 +
             C29866 * C51190) *
                C50978) *
               C1490 +
           ((((C17689 + C17688) * C1364 -
              ((C17491 + C17490) * C1358 + (C17489 + C17488) * C1363) +
              (C17691 + C17690) * C51042) *
                 C51271 +
             C29867 * C51190) *
                C51242 +
            (((C17694 + C17693) * C1364 -
              ((C17495 + C17494) * C1358 + (C17493 + C17492) * C1363) +
              (C17696 + C17695) * C51042) *
                 C51271 +
             ((C19238 + C19239) * C1364 - (C17890 * C1358 + C17891 * C1363) +
              (C19240 + C19241) * C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C51256 +
          (((((C22840 + C22839) * C1364 -
              ((C22412 + C22411) * C1358 + (C22410 + C22409) * C1363) +
              (C22842 + C22841) * C51042) *
                 C51271 +
             ((C22848 + C22847) * C1364 -
              ((C22416 + C22415) * C1358 + (C22414 + C22413) * C1363) +
              (C22850 + C22849) * C51042) *
                 C51190) *
                C51242 +
            (C29867 * C51271 +
             ((C23819 + C23820) * C1364 - (C23003 * C1358 + C23004 * C1363) +
              (C23821 + C23822) * C51042) *
                 C51190) *
                C50978) *
               C1490 +
           ((C29866 * C51271 +
             (C28875 * C1363 + C28876 * C1358 - (C23820 + C23819) * C1364 -
              (C23822 + C23821) * C51042) *
                 C51190) *
                C51242 +
            ((C28140 * C1363 + C28141 * C1358 - (C19239 + C19238) * C1364 -
              (C19241 + C19240) * C51042) *
                 C51271 +
             ((C18476 + C18477) * C1363 + (C18478 + C18479) * C1358 -
              (C17454 * C3462 + C51162 * C3468 + C17453 * C1160 +
               C17448 * C1166) *
                  C1364 -
              (C17454 * C3467 + C51162 * C3471 + C17453 * C1167 +
               C17448 * C1172) *
                  C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                  C1363 +
              (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                  C1358 -
              (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                  C1364 -
              (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                  C51042) *
                 C51271 +
             ((C22409 + C22410) * C1363 + (C22411 + C22412) * C1358 -
              (C22839 + C22840) * C1364 - (C22841 + C22842) * C51042) *
                 C51190) *
                C51242 +
            (((C17488 + C17489) * C1363 + (C17490 + C17491) * C1358 -
              (C17688 + C17689) * C1364 - (C17690 + C17691) * C51042) *
                 C51271 +
             C29866 * C51190) *
                C50978) *
               C51247 +
           ((((C17689 + C17688) * C1364 -
              ((C17491 + C17490) * C1358 + (C17489 + C17488) * C1363) +
              (C17691 + C17690) * C51042) *
                 C51271 +
             C29867 * C51190) *
                C51242 +
            (((C17694 + C17693) * C1364 -
              ((C17495 + C17494) * C1358 + (C17493 + C17492) * C1363) +
              (C17696 + C17695) * C51042) *
                 C51271 +
             ((C19238 + C19239) * C1364 - (C17890 * C1358 + C17891 * C1363) +
              (C19240 + C19241) * C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C1775 +
          (((((C22840 + C22839) * C1364 -
              ((C22412 + C22411) * C1358 + (C22410 + C22409) * C1363) +
              (C22842 + C22841) * C51042) *
                 C51271 +
             ((C22848 + C22847) * C1364 -
              ((C22416 + C22415) * C1358 + (C22414 + C22413) * C1363) +
              (C22850 + C22849) * C51042) *
                 C51190) *
                C51242 +
            (C29867 * C51271 +
             ((C23819 + C23820) * C1364 - (C23003 * C1358 + C23004 * C1363) +
              (C23821 + C23822) * C51042) *
                 C51190) *
                C50978) *
               C51247 +
           ((C29866 * C51271 +
             (C28875 * C1363 + C28876 * C1358 - (C23820 + C23819) * C1364 -
              (C23822 + C23821) * C51042) *
                 C51190) *
                C51242 +
            ((C28140 * C1363 + C28141 * C1358 - (C19239 + C19238) * C1364 -
              (C19241 + C19240) * C51042) *
                 C51271 +
             ((C18476 + C18477) * C1363 + (C18478 + C18479) * C1358 -
              (C17454 * C3462 + C51162 * C3468 + C17453 * C1160 +
               C17448 * C1166) *
                  C1364 -
              (C17454 * C3467 + C51162 * C3471 + C17453 * C1167 +
               C17448 * C1172) *
                  C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C1492 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51301 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C1493 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51288 +
             (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                 C1494 +
             (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                 C1489) *
                C51271 +
            ((C22409 + C22410) * C1492 + (C22411 + C22412) * C51301 -
             (C22839 + C22840) * C1493 - (C22841 + C22842) * C51288 +
             (C22843 + C22844) * C1494 + (C22845 + C22846) * C1489) *
                C51190) *
               C51242 +
           (((C17488 + C17489) * C1492 + (C17490 + C17491) * C51301 -
             (C17688 + C17689) * C1493 - (C17690 + C17691) * C51288 +
             (C18058 + C18059) * C1494 + (C18060 + C18061) * C1489) *
                C51271 +
            (C28136 * C1492 + C28137 * C51301 - C29852 * C1493 -
             C29853 * C51288 + (C28353 + C28354) * C1494 +
             (C28355 + C28356) * C1489) *
                C51190) *
               C50978) *
              C50992 * C1775 +
          ((((C22840 + C22839) * C1493 -
             ((C22412 + C22411) * C51301 + (C22410 + C22409) * C1492) +
             (C22842 + C22841) * C51288 - (C22844 + C22843) * C1494 -
             (C22846 + C22845) * C1489) *
                C51271 +
            ((C22848 + C22847) * C1493 -
             ((C22416 + C22415) * C51301 + (C22414 + C22413) * C1492) +
             (C22850 + C22849) * C51288 - (C22852 + C22851) * C1494 -
             (C22854 + C22853) * C1489) *
                C51190) *
               C51242 +
           ((C29854 * C1493 - (C28138 * C51301 + C28139 * C1492) +
             C29857 * C51288 - (C28354 + C28353) * C1494 -
             (C28356 + C28355) * C1489) *
                C51271 +
            ((C23819 + C23820) * C1493 - (C23003 * C51301 + C23004 * C1492) +
             (C23821 + C23822) * C51288 -
             (C17454 * C3637 + C51162 * C3640 + C17453 * C3461 +
              C17448 * C3465) *
                 C1494 -
             (C17454 * C3641 + C51162 * C3643 + C17453 * C3466 +
              C17448 * C3470) *
                 C1489) *
                C51190) *
               C50978) *
              C50992 * C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C1363 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C1358 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C1364 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C51271 +
            ((C22409 + C22410) * C1363 + (C22411 + C22412) * C1358 -
             (C22839 + C22840) * C1364 - (C22841 + C22842) * C51042) *
                C51190) *
               C51242 +
           (((C17488 + C17489) * C1363 + (C17490 + C17491) * C1358 -
             (C17688 + C17689) * C1364 - (C17690 + C17691) * C51042) *
                C51271 +
            C29866 * C51190) *
               C50978) *
              C50992 * C51302 +
          ((((C22840 + C22839) * C1364 -
             ((C22412 + C22411) * C1358 + (C22410 + C22409) * C1363) +
             (C22842 + C22841) * C51042) *
                C51271 +
            ((C22848 + C22847) * C1364 -
             ((C22416 + C22415) * C1358 + (C22414 + C22413) * C1363) +
             (C22850 + C22849) * C51042) *
                C51190) *
               C51242 +
           (C29867 * C51271 +
            ((C23819 + C23820) * C1364 - (C23003 * C1358 + C23004 * C1363) +
             (C23821 + C23822) * C51042) *
                C51190) *
               C50978) *
              C50992 * C51291 +
          ((C24801 * C51271 +
            ((C23032 + C23031) * C1363 + (C23030 + C23029) * C1358 -
             (C23201 + C23200) * C1364 - (C23203 + C23202) * C51042) *
                C51190) *
               C51242 +
           ((C28875 * C1363 + C28876 * C1358 - (C23820 + C23819) * C1364 -
             (C23822 + C23821) * C51042) *
                C51271 +
            ((C23025 + C23026) * C1363 + (C23027 + C23028) * C1358 -
             (C17454 * C3742 + C51162 * C3748 + C17453 * C3743 +
              C17448 * C3749) *
                 C1364 -
             (C17454 * C3746 + C51162 * C3754 + C17453 * C3747 +
              C17448 * C3755) *
                 C51042) *
                C51190) *
               C50978) *
              C50992 * C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C635 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C630 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C636 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C631 +
             (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                 C637 +
             (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                 C632) *
                C51271 +
            ((C22409 + C22410) * C635 + (C22411 + C22412) * C630 -
             (C22839 + C22840) * C636 - (C22841 + C22842) * C631 +
             (C22843 + C22844) * C637 + (C22845 + C22846) * C632) *
                C51190) *
               C51242 +
           (((C17488 + C17489) * C635 + (C17490 + C17491) * C630 -
             (C17688 + C17689) * C636 - (C17690 + C17691) * C631 +
             (C18058 + C18059) * C637 + (C18060 + C18061) * C632) *
                C51271 +
            (C28136 * C635 + C28137 * C630 - (C19235 + C19234) * C636 -
             (C19237 + C19236) * C631 + (C28353 + C28354) * C637 +
             (C28355 + C28356) * C632) *
                C51190) *
               C50978) *
              C51247 +
          ((((C17689 + C17688) * C636 -
             ((C17491 + C17490) * C630 + (C17489 + C17488) * C635) +
             (C17691 + C17690) * C631 - (C18059 + C18058) * C637 -
             (C18061 + C18060) * C632) *
                C51271 +
            ((C19234 + C19235) * C636 - (C28138 * C630 + C28139 * C635) +
             (C19236 + C19237) * C631 - (C28354 + C28353) * C637 -
             (C28356 + C28355) * C632) *
                C51190) *
               C51242 +
           (((C17694 + C17693) * C636 -
             ((C17495 + C17494) * C630 + (C17493 + C17492) * C635) +
             (C17696 + C17695) * C631 - (C18063 + C18062) * C637 -
             (C18065 + C18064) * C632) *
                C51271 +
            ((C19238 + C19239) * C636 - (C17890 * C630 + C17891 * C635) +
             (C19240 + C19241) * C631 -
             (C17454 * C4244 + C51162 * C4245 + C17453 * C888 + C17448 * C901) *
                 C637 -
             (C17454 * C4246 + C51162 * C4247 + C17453 * C902 + C17448 * C912) *
                 C632) *
                C51190) *
               C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C51271 +
            ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C51190) *
               C51242 +
           (((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51271 +
            ((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C51190) *
               C50978) *
              C112 -
          ((C17894 * C51190 +
            ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51271) *
               C50978 +
           (((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51190 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51271) *
               C51242) *
              C113 +
          ((C17512 * C51271 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C51190) *
               C51242 +
           (((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51271 +
            ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51190) *
               C50978) *
              C114 -
          ((((C17454 * C1645 + C51162 * C1646 + C17453 * C485 + C17448 * C493) *
                 C51026 +
             (C17454 * C1643 + C51162 * C1644 + C17453 * C475 + C17448 * C484) *
                 C118) *
                C51190 +
            ((C17503 + C17502) * C51026 + (C17501 + C17500) * C118) * C51271) *
               C50978 +
           (((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) * C51190 +
            C17513 * C51271) *
               C51242) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                  C118 +
              (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                  C51026) *
                 C51271 +
             ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C51190) *
                C51242 +
            (((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51271 +
             C28148 * C51190) *
                C50978) *
               C51247 -
           ((C17894 * C51190 +
             ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51271) *
                C50978 +
            (C28149 * C51190 +
             ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51271) *
                C51242) *
               C50997) *
              C1013 +
          (((C28148 * C51271 + C28879 * C51190) * C51242 +
            (C28150 * C51271 +
             ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C51190) *
                C50978) *
               C50997 -
           ((C23034 * C51190 + C28149 * C51271) * C50978 +
            (((C22416 + C22415) * C51026 + (C22414 + C22413) * C118) * C51190 +
             ((C22412 + C22411) * C51026 + (C22410 + C22409) * C118) * C51271) *
                C51242) *
               C51247) *
              C1014 +
          (((C23033 * C51271 +
             ((C23032 + C23031) * C118 + (C23030 + C23029) * C51026) * C51190) *
                C51242 +
            (C28879 * C51271 +
             ((C23025 + C23026) * C118 + (C23027 + C23028) * C51026) * C51190) *
                C50978) *
               C51247 -
           ((((C17454 * C7128 + C51162 * C7129 + C17453 * C1250 +
               C17448 * C1257) *
                  C51026 +
              (C17454 * C7126 + C51162 * C7127 + C17453 * C1245 +
               C17448 * C1251) *
                  C118) *
                 C51190 +
             ((C18479 + C18478) * C51026 + (C18477 + C18476) * C118) * C51271) *
                C50978 +
            (((C23028 + C23027) * C51026 + (C23026 + C23025) * C118) * C51190 +
             C23034 * C51271) *
                C51242) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C765 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C760 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C766 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C761 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C767 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C762 -
            (C17454 * C3016 + C51162 * C3019 + C17453 * C769 + C17448 * C773) *
                C768 -
            (C17454 * C3020 + C51162 * C3025 + C17453 * C774 + C17448 * C781) *
                C763) *
               C51271 +
           ((C22409 + C22410) * C765 + (C22411 + C22412) * C760 -
            (C22839 + C22840) * C766 - (C22841 + C22842) * C761 +
            (C22843 + C22844) * C767 + (C22845 + C22846) * C762 -
            (C17454 * C3299 + C51162 * C3304 + C17453 * C3298 +
             C17448 * C3302) *
                C768 -
            (C17454 * C3305 + C51162 * C3311 + C17453 * C3303 +
             C17448 * C3310) *
                C763) *
               C51190) *
              C51242 +
          (((C17488 + C17489) * C765 + (C17490 + C17491) * C760 -
            (C17688 + C17689) * C766 - (C17690 + C17691) * C761 +
            (C18058 + C18059) * C767 + (C18060 + C18061) * C762 -
            (C17454 * C3017 + C51162 * C3021 + C17453 * C770 + C17448 * C775) *
                C768 -
            (C17454 * C3022 + C51162 * C3026 + C17453 * C776 + C17448 * C782) *
                C763) *
               C51271 +
           (C28136 * C765 + C28137 * C760 - (C19235 + C19234) * C766 -
            (C19237 + C19236) * C761 + (C28353 + C28354) * C767 +
            (C28355 + C28356) * C762 -
            (C17454 * C3301 + C51162 * C3308 + C17453 * C3300 +
             C17448 * C3306) *
                C768 -
            (C17454 * C3309 + C51162 * C3313 + C17453 * C3307 +
             C17448 * C3312) *
                C763) *
               C51190) *
              C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C298 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51254 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C299 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C51271 +
            ((C22409 + C22410) * C298 + (C22411 + C22412) * C51254 -
             (C22839 + C22840) * C299 - (C22841 + C22842) * C51042) *
                C51190) *
               C51242 +
           (((C17488 + C17489) * C298 + (C17490 + C17491) * C51254 -
             (C17688 + C17689) * C299 - (C17690 + C17691) * C51042) *
                C51271 +
            ((C17878 + C17879) * C298 + (C17880 + C17881) * C51254 -
             (C19235 + C19234) * C299 - (C19237 + C19236) * C51042) *
                C51190) *
               C50978) *
              C295 +
          ((((C17689 + C17688) * C299 -
             ((C17491 + C17490) * C51254 + (C17489 + C17488) * C298) +
             (C17691 + C17690) * C51042) *
                C51271 +
            ((C19234 + C19235) * C299 -
             ((C17881 + C17880) * C51254 + (C17879 + C17878) * C298) +
             (C19236 + C19237) * C51042) *
                C51190) *
               C51242 +
           (((C17694 + C17693) * C299 -
             ((C17495 + C17494) * C51254 + (C17493 + C17492) * C298) +
             (C17696 + C17695) * C51042) *
                C51271 +
            ((C19238 + C19239) * C299 - (C17890 * C51254 + C17891 * C298) +
             (C19240 + C19241) * C51042) *
                C51190) *
               C50978) *
              C296 +
          ((C17706 * C51271 +
            ((C17882 + C17883) * C298 + (C17884 + C17885) * C51254 -
             (C19239 + C19238) * C299 - (C19241 + C19240) * C51042) *
                C51190) *
               C51242 +
           (((C17499 + C17498) * C298 + (C17497 + C17496) * C51254 -
             (C17698 + C17697) * C299 - (C17700 + C17699) * C51042) *
                C51271 +
            ((C17886 + C17887) * C298 + (C17888 + C17889) * C51254 -
             (C17454 * C890 + C51162 * C905 + C17453 * C889 + C17448 * C903) *
                 C299 -
             (C17454 * C906 + C51162 * C914 + C17453 * C904 + C17448 * C913) *
                 C51042) *
                C51190) *
               C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C298 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51254 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C299 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C51271 +
            ((C22409 + C22410) * C298 + (C22411 + C22412) * C51254 -
             (C22839 + C22840) * C299 - (C22841 + C22842) * C51042) *
                C51190) *
               C51242 +
           (((C17488 + C17489) * C298 + (C17490 + C17491) * C51254 -
             (C17688 + C17689) * C299 - (C17690 + C17691) * C51042) *
                C51271 +
            (C28136 * C298 + C28137 * C51254 - (C19235 + C19234) * C299 -
             (C19237 + C19236) * C51042) *
                C51190) *
               C50978) *
              C50992 * C1013 +
          ((((C22840 + C22839) * C299 -
             ((C22412 + C22411) * C51254 + (C22410 + C22409) * C298) +
             (C22842 + C22841) * C51042) *
                C51271 +
            ((C22848 + C22847) * C299 -
             ((C22416 + C22415) * C51254 + (C22414 + C22413) * C298) +
             (C22850 + C22849) * C51042) *
                C51190) *
               C51242 +
           (((C19234 + C19235) * C299 - (C28138 * C51254 + C28139 * C298) +
             (C19236 + C19237) * C51042) *
                C51271 +
            ((C23819 + C23820) * C299 - (C23003 * C51254 + C23004 * C298) +
             (C23821 + C23822) * C51042) *
                C51190) *
               C50978) *
              C50992 * C1014 +
          ((C23205 * C51271 +
            ((C23032 + C23031) * C298 + (C23030 + C23029) * C51254 -
             (C23201 + C23200) * C299 - (C23203 + C23202) * C51042) *
                C51190) *
               C51242 +
           ((C28875 * C298 + C28876 * C51254 - (C23820 + C23819) * C299 -
             (C23822 + C23821) * C51042) *
                C51271 +
            ((C23025 + C23026) * C298 + (C23027 + C23028) * C51254 -
             (C17454 * C3742 + C51162 * C3748 + C17453 * C3743 +
              C17448 * C3749) *
                 C299 -
             (C17454 * C3746 + C51162 * C3754 + C17453 * C3747 +
              C17448 * C3755) *
                 C51042) *
                C51190) *
               C50978) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C635 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C630 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C636 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C631 +
             (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                 C637 +
             (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                 C632) *
                C51271 +
            ((C22409 + C22410) * C635 + (C22411 + C22412) * C630 -
             (C22839 + C22840) * C636 - (C22841 + C22842) * C631 +
             (C22843 + C22844) * C637 + (C22845 + C22846) * C632) *
                C51190) *
               C51242 +
           (((C17488 + C17489) * C635 + (C17490 + C17491) * C630 -
             (C17688 + C17689) * C636 - (C17690 + C17691) * C631 +
             (C18058 + C18059) * C637 + (C18060 + C18061) * C632) *
                C51271 +
            (C28136 * C635 + C28137 * C630 - (C19235 + C19234) * C636 -
             (C19237 + C19236) * C631 + (C28353 + C28354) * C637 +
             (C28355 + C28356) * C632) *
                C51190) *
               C50978) *
              C50992 * C51256 +
          ((((C22840 + C22839) * C636 -
             ((C22412 + C22411) * C630 + (C22410 + C22409) * C635) +
             (C22842 + C22841) * C631 - (C22844 + C22843) * C637 -
             (C22846 + C22845) * C632) *
                C51271 +
            ((C22848 + C22847) * C636 -
             ((C22416 + C22415) * C630 + (C22414 + C22413) * C635) +
             (C22850 + C22849) * C631 - (C22852 + C22851) * C637 -
             (C22854 + C22853) * C632) *
                C51190) *
               C51242 +
           (((C19234 + C19235) * C636 - (C28138 * C630 + C28139 * C635) +
             (C19236 + C19237) * C631 - (C28354 + C28353) * C637 -
             (C28356 + C28355) * C632) *
                C51271 +
            ((C23819 + C23820) * C636 - (C23003 * C630 + C23004 * C635) +
             (C23821 + C23822) * C631 -
             (C17454 * C3637 + C51162 * C3640 + C17453 * C3461 +
              C17448 * C3465) *
                 C637 -
             (C17454 * C3641 + C51162 * C3643 + C17453 * C3466 +
              C17448 * C3470) *
                 C632) *
                C51190) *
               C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                  C118 +
              (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                  C51026) *
                 C51271 +
             ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C51190) *
                C51242 +
            (((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51271 +
             C28148 * C51190) *
                C50978) *
               C295 -
           ((C17894 * C51190 +
             ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51271) *
                C50978 +
            (C28149 * C51190 +
             ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51271) *
                C51242) *
               C296 +
           ((C17512 * C51271 + C28150 * C51190) * C51242 +
            (((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51271 +
             ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51190) *
                C50978) *
               C297) *
              C51256 +
          (((C28148 * C51271 +
             ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C51190) *
                C51242 +
            (C28150 * C51271 +
             ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C51190) *
                C50978) *
               C296 -
           ((C23034 * C51190 + C28149 * C51271) * C50978 +
            (((C22416 + C22415) * C51026 + (C22414 + C22413) * C118) * C51190 +
             ((C22412 + C22411) * C51026 + (C22410 + C22409) * C118) * C51271) *
                C51242) *
               C295 -
           ((((C17454 * C1169 + C51162 * C1173 + C17453 * C1028 +
               C17448 * C1034) *
                  C51026 +
              (C17454 * C1161 + C51162 * C1168 + C17453 * C1019 +
               C17448 * C1027) *
                  C118) *
                 C51190 +
             ((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) * C51271) *
                C50978 +
            (((C18479 + C18478) * C51026 + (C18477 + C18476) * C118) * C51190 +
             C17894 * C51271) *
                C51242) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C51271 +
            ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C51190) *
               C51242 +
           (((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51271 +
            C28148 * C51190) *
               C50978) *
              C50992 * C1240 -
          ((C23034 * C51190 + C28149 * C51271) * C50978 +
           (((C22416 + C22415) * C51026 + (C22414 + C22413) * C118) * C51190 +
            ((C22412 + C22411) * C51026 + (C22410 + C22409) * C118) * C51271) *
               C51242) *
              C50992 * C1241 +
          ((C23033 * C51271 +
            ((C23032 + C23031) * C118 + (C23030 + C23029) * C51026) * C51190) *
               C51242 +
           (C28879 * C51271 +
            ((C23025 + C23026) * C118 + (C23027 + C23028) * C51026) * C51190) *
               C50978) *
              C50992 * C1242 -
          ((((C17454 * C6468 + C51162 * C6470 + C17453 * C6292 +
              C17448 * C6296) *
                 C51026 +
             (C17454 * C6464 + C51162 * C6467 + C17453 * C6287 +
              C17448 * C6291) *
                 C118) *
                C51190 +
            ((C23028 + C23027) * C51026 + (C23026 + C23025) * C118) * C51271) *
               C50978 +
           (((C23323 + C23322) * C51026 + (C23321 + C23320) * C118) * C51190 +
            C23324 * C51271) *
               C51242) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                  C118 +
              (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                  C51026) *
                 C51271 +
             ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C51190) *
                C51242 +
            (((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51271 +
             C28148 * C51190) *
                C50978) *
               C51300 -
           ((C17894 * C51190 +
             ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51271) *
                C50978 +
            (C28149 * C51190 +
             ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51271) *
                C51242) *
               C51285 +
           ((C17512 * C51271 + C28150 * C51190) * C51242 +
            (((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51271 +
             ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51190) *
                C50978) *
               C1362) *
              C1775 +
          (((C28148 * C51271 + C28879 * C51190) * C51242 +
            (C28150 * C51271 +
             ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C51190) *
                C50978) *
               C51285 -
           ((C23034 * C51190 + C28149 * C51271) * C50978 +
            (((C22416 + C22415) * C51026 + (C22414 + C22413) * C118) * C51190 +
             ((C22412 + C22411) * C51026 + (C22410 + C22409) * C118) * C51271) *
                C51242) *
               C51300 -
           ((((C17454 * C1169 + C51162 * C1173 + C17453 * C1028 +
               C17448 * C1034) *
                  C51026 +
              (C17454 * C1161 + C51162 * C1168 + C17453 * C1019 +
               C17448 * C1027) *
                  C118) *
                 C51190 +
             ((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) * C51271) *
                C50978 +
            (((C18479 + C18478) * C51026 + (C18477 + C18476) * C118) * C51190 +
             C17894 * C51271) *
                C51242) *
               C1362) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                  C298 +
              (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                  C51254 -
              (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                  C299 -
              (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                  C51042) *
                 C51271 +
             ((C22409 + C22410) * C298 + (C22411 + C22412) * C51254 -
              (C22839 + C22840) * C299 - (C22841 + C22842) * C51042) *
                 C51190) *
                C51242 +
            (((C17488 + C17489) * C298 + (C17490 + C17491) * C51254 -
              (C17688 + C17689) * C299 - (C17690 + C17691) * C51042) *
                 C51271 +
             C30332 * C51190) *
                C50978) *
               C1490 +
           ((((C17689 + C17688) * C299 -
              ((C17491 + C17490) * C51254 + (C17489 + C17488) * C298) +
              (C17691 + C17690) * C51042) *
                 C51271 +
             C30333 * C51190) *
                C51242 +
            (((C17694 + C17693) * C299 -
              ((C17495 + C17494) * C51254 + (C17493 + C17492) * C298) +
              (C17696 + C17695) * C51042) *
                 C51271 +
             ((C19238 + C19239) * C299 - (C17890 * C51254 + C17891 * C298) +
              (C19240 + C19241) * C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C1775 +
          (((((C22840 + C22839) * C299 -
              ((C22412 + C22411) * C51254 + (C22410 + C22409) * C298) +
              (C22842 + C22841) * C51042) *
                 C51271 +
             ((C22848 + C22847) * C299 -
              ((C22416 + C22415) * C51254 + (C22414 + C22413) * C298) +
              (C22850 + C22849) * C51042) *
                 C51190) *
                C51242 +
            (C30333 * C51271 +
             ((C23819 + C23820) * C299 - (C23003 * C51254 + C23004 * C298) +
              (C23821 + C23822) * C51042) *
                 C51190) *
                C50978) *
               C1490 +
           ((C30332 * C51271 +
             (C28875 * C298 + C28876 * C51254 - (C23820 + C23819) * C299 -
              (C23822 + C23821) * C51042) *
                 C51190) *
                C51242 +
            ((C28140 * C298 + C28141 * C51254 - (C19239 + C19238) * C299 -
              (C19241 + C19240) * C51042) *
                 C51271 +
             ((C18476 + C18477) * C298 + (C18478 + C18479) * C51254 -
              (C17454 * C3462 + C51162 * C3468 + C17453 * C1160 +
               C17448 * C1166) *
                  C299 -
              (C17454 * C3467 + C51162 * C3471 + C17453 * C1167 +
               C17448 * C1172) *
                  C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                  C118 +
              (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                  C51026) *
                 C51271 +
             ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C51190) *
                C51242 +
            (((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51271 +
             C28148 * C51190) *
                C50978) *
               C1490 -
           ((C17894 * C51190 +
             ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51271) *
                C50978 +
            (C28149 * C51190 +
             ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51271) *
                C51242) *
               C50997) *
              C51302 +
          (((C28148 * C51271 + C28879 * C51190) * C51242 +
            (C28150 * C51271 +
             ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C51190) *
                C50978) *
               C50997 -
           ((C23034 * C51190 + C28149 * C51271) * C50978 +
            (((C22416 + C22415) * C51026 + (C22414 + C22413) * C118) * C51190 +
             ((C22412 + C22411) * C51026 + (C22410 + C22409) * C118) * C51271) *
                C51242) *
               C1490) *
              C51291 +
          (((C23033 * C51271 +
             ((C23032 + C23031) * C118 + (C23030 + C23029) * C51026) * C51190) *
                C51242 +
            (C28879 * C51271 +
             ((C23025 + C23026) * C118 + (C23027 + C23028) * C51026) * C51190) *
                C50978) *
               C1490 -
           ((((C17454 * C7128 + C51162 * C7129 + C17453 * C1250 +
               C17448 * C1257) *
                  C51026 +
              (C17454 * C7126 + C51162 * C7127 + C17453 * C1245 +
               C17448 * C1251) *
                  C118) *
                 C51190 +
             ((C18479 + C18478) * C51026 + (C18477 + C18476) * C118) * C51271) *
                C50978 +
            (((C23028 + C23027) * C51026 + (C23026 + C23025) * C118) * C51190 +
             C23034 * C51271) *
                C51242) *
               C50997) *
              C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C51271 +
            ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C51190) *
               C51242 +
           (((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51271 +
            ((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C51190) *
               C50978) *
              C112 -
          ((C17894 * C51190 +
            ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51271) *
               C50978 +
           (((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51190 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51271) *
               C51242) *
              C113 +
          ((C17512 * C51271 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C51190) *
               C51242 +
           (((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51271 +
            ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51190) *
               C50978) *
              C114 -
          ((((C17454 * C1645 + C51162 * C1646 + C17453 * C485 + C17448 * C493) *
                 C51026 +
             (C17454 * C1643 + C51162 * C1644 + C17453 * C475 + C17448 * C484) *
                 C118) *
                C51190 +
            ((C17503 + C17502) * C51026 + (C17501 + C17500) * C118) * C51271) *
               C50978 +
           (((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) * C51190 +
            C17513 * C51271) *
               C51242) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C635 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C630 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C636 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C631 +
             (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                 C637 +
             (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                 C632) *
                C51271 +
            ((C22409 + C22410) * C635 + (C22411 + C22412) * C630 -
             (C22839 + C22840) * C636 - (C22841 + C22842) * C631 +
             (C22843 + C22844) * C637 + (C22845 + C22846) * C632) *
                C51190) *
               C51242 +
           (((C17488 + C17489) * C635 + (C17490 + C17491) * C630 -
             (C17688 + C17689) * C636 - (C17690 + C17691) * C631 +
             (C18058 + C18059) * C637 + (C18060 + C18061) * C632) *
                C51271 +
            (C28136 * C635 + C28137 * C630 - (C19235 + C19234) * C636 -
             (C19237 + C19236) * C631 + (C28353 + C28354) * C637 +
             (C28355 + C28356) * C632) *
                C51190) *
               C50978) *
              C51247 +
          ((((C17689 + C17688) * C636 -
             ((C17491 + C17490) * C630 + (C17489 + C17488) * C635) +
             (C17691 + C17690) * C631 - (C18059 + C18058) * C637 -
             (C18061 + C18060) * C632) *
                C51271 +
            ((C19234 + C19235) * C636 - (C28138 * C630 + C28139 * C635) +
             (C19236 + C19237) * C631 - (C28354 + C28353) * C637 -
             (C28356 + C28355) * C632) *
                C51190) *
               C51242 +
           (((C17694 + C17693) * C636 -
             ((C17495 + C17494) * C630 + (C17493 + C17492) * C635) +
             (C17696 + C17695) * C631 - (C18063 + C18062) * C637 -
             (C18065 + C18064) * C632) *
                C51271 +
            ((C19238 + C19239) * C636 - (C17890 * C630 + C17891 * C635) +
             (C19240 + C19241) * C631 -
             (C17454 * C4244 + C51162 * C4245 + C17453 * C888 + C17448 * C901) *
                 C637 -
             (C17454 * C4246 + C51162 * C4247 + C17453 * C902 + C17448 * C912) *
                 C632) *
                C51190) *
               C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C298 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51254 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C299 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C51271 +
            ((C22409 + C22410) * C298 + (C22411 + C22412) * C51254 -
             (C22839 + C22840) * C299 - (C22841 + C22842) * C51042) *
                C51190) *
               C51242 +
           (((C17488 + C17489) * C298 + (C17490 + C17491) * C51254 -
             (C17688 + C17689) * C299 - (C17690 + C17691) * C51042) *
                C51271 +
            ((C17878 + C17879) * C298 + (C17880 + C17881) * C51254 -
             (C19235 + C19234) * C299 - (C19237 + C19236) * C51042) *
                C51190) *
               C50978) *
              C295 +
          ((((C17689 + C17688) * C299 -
             ((C17491 + C17490) * C51254 + (C17489 + C17488) * C298) +
             (C17691 + C17690) * C51042) *
                C51271 +
            ((C19234 + C19235) * C299 -
             ((C17881 + C17880) * C51254 + (C17879 + C17878) * C298) +
             (C19236 + C19237) * C51042) *
                C51190) *
               C51242 +
           (((C17694 + C17693) * C299 -
             ((C17495 + C17494) * C51254 + (C17493 + C17492) * C298) +
             (C17696 + C17695) * C51042) *
                C51271 +
            ((C19238 + C19239) * C299 - (C17890 * C51254 + C17891 * C298) +
             (C19240 + C19241) * C51042) *
                C51190) *
               C50978) *
              C296 +
          ((C17706 * C51271 +
            ((C17882 + C17883) * C298 + (C17884 + C17885) * C51254 -
             (C19239 + C19238) * C299 - (C19241 + C19240) * C51042) *
                C51190) *
               C51242 +
           (((C17499 + C17498) * C298 + (C17497 + C17496) * C51254 -
             (C17698 + C17697) * C299 - (C17700 + C17699) * C51042) *
                C51271 +
            ((C17886 + C17887) * C298 + (C17888 + C17889) * C51254 -
             (C17454 * C890 + C51162 * C905 + C17453 * C889 + C17448 * C903) *
                 C299 -
             (C17454 * C906 + C51162 * C914 + C17453 * C904 + C17448 * C913) *
                 C51042) *
                C51190) *
               C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C765 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C760 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C766 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C761 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C767 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C762 -
            (C17454 * C3016 + C51162 * C3019 + C17453 * C769 + C17448 * C773) *
                C768 -
            (C17454 * C3020 + C51162 * C3025 + C17453 * C774 + C17448 * C781) *
                C763) *
               C51271 +
           ((C22409 + C22410) * C765 + (C22411 + C22412) * C760 -
            (C22839 + C22840) * C766 - (C22841 + C22842) * C761 +
            (C22843 + C22844) * C767 + (C22845 + C22846) * C762 -
            (C17454 * C3299 + C51162 * C3304 + C17453 * C3298 +
             C17448 * C3302) *
                C768 -
            (C17454 * C3305 + C51162 * C3311 + C17453 * C3303 +
             C17448 * C3310) *
                C763) *
               C51190) *
              C51242 +
          (((C17488 + C17489) * C765 + (C17490 + C17491) * C760 -
            (C17688 + C17689) * C766 - (C17690 + C17691) * C761 +
            (C18058 + C18059) * C767 + (C18060 + C18061) * C762 -
            (C17454 * C3017 + C51162 * C3021 + C17453 * C770 + C17448 * C775) *
                C768 -
            (C17454 * C3022 + C51162 * C3026 + C17453 * C776 + C17448 * C782) *
                C763) *
               C51271 +
           (C28136 * C765 + C28137 * C760 - (C19235 + C19234) * C766 -
            (C19237 + C19236) * C761 + (C28353 + C28354) * C767 +
            (C28355 + C28356) * C762 -
            (C17454 * C3301 + C51162 * C3308 + C17453 * C3300 +
             C17448 * C3306) *
                C768 -
            (C17454 * C3309 + C51162 * C3313 + C17453 * C3307 +
             C17448 * C3312) *
                C763) *
               C51190) *
              C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                  C118 +
              (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                  C51026) *
                 C51271 +
             ((C22409 + C22410) * C118 + (C22411 + C22412) * C51026) * C51190) *
                C51242 +
            (((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51271 +
             C28148 * C51190) *
                C50978) *
               C295 -
           ((C17894 * C51190 +
             ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51271) *
                C50978 +
            (C28149 * C51190 +
             ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51271) *
                C51242) *
               C296 +
           ((C17512 * C51271 + C28150 * C51190) * C51242 +
            (((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51271 +
             ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51190) *
                C50978) *
               C297) *
              C51256 +
          (((C28148 * C51271 +
             ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C51190) *
                C51242 +
            (C28150 * C51271 +
             ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C51190) *
                C50978) *
               C296 -
           ((C23034 * C51190 + C28149 * C51271) * C50978 +
            (((C22416 + C22415) * C51026 + (C22414 + C22413) * C118) * C51190 +
             ((C22412 + C22411) * C51026 + (C22410 + C22409) * C118) * C51271) *
                C51242) *
               C295 -
           ((((C17454 * C1169 + C51162 * C1173 + C17453 * C1028 +
               C17448 * C1034) *
                  C51026 +
              (C17454 * C1161 + C51162 * C1168 + C17453 * C1019 +
               C17448 * C1027) *
                  C118) *
                 C51190 +
             ((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) * C51271) *
                C50978 +
            (((C18479 + C18478) * C51026 + (C18477 + C18476) * C118) * C51190 +
             C17894 * C51271) *
                C51242) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C635 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C630 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C636 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C631 +
             (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                 C637 +
             (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                 C632) *
                C51271 +
            ((C22409 + C22410) * C635 + (C22411 + C22412) * C630 -
             (C22839 + C22840) * C636 - (C22841 + C22842) * C631 +
             (C22843 + C22844) * C637 + (C22845 + C22846) * C632) *
                C51190) *
               C51242 +
           (((C17488 + C17489) * C635 + (C17490 + C17491) * C630 -
             (C17688 + C17689) * C636 - (C17690 + C17691) * C631 +
             (C18058 + C18059) * C637 + (C18060 + C18061) * C632) *
                C51271 +
            (C28136 * C635 + C28137 * C630 - (C19235 + C19234) * C636 -
             (C19237 + C19236) * C631 + (C28353 + C28354) * C637 +
             (C28355 + C28356) * C632) *
                C51190) *
               C50978) *
              C50992 * C51256 +
          ((((C22840 + C22839) * C636 -
             ((C22412 + C22411) * C630 + (C22410 + C22409) * C635) +
             (C22842 + C22841) * C631 - (C22844 + C22843) * C637 -
             (C22846 + C22845) * C632) *
                C51271 +
            ((C22848 + C22847) * C636 -
             ((C22416 + C22415) * C630 + (C22414 + C22413) * C635) +
             (C22850 + C22849) * C631 - (C22852 + C22851) * C637 -
             (C22854 + C22853) * C632) *
                C51190) *
               C51242 +
           (((C19234 + C19235) * C636 - (C28138 * C630 + C28139 * C635) +
             (C19236 + C19237) * C631 - (C28354 + C28353) * C637 -
             (C28356 + C28355) * C632) *
                C51271 +
            ((C23819 + C23820) * C636 - (C23003 * C630 + C23004 * C635) +
             (C23821 + C23822) * C631 -
             (C17454 * C3637 + C51162 * C3640 + C17453 * C3461 +
              C17448 * C3465) *
                 C637 -
             (C17454 * C3641 + C51162 * C3643 + C17453 * C3466 +
              C17448 * C3470) *
                 C632) *
                C51190) *
               C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C1363 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C1358 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C1364 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C51126 * C17450 +
           ((C17488 + C17489) * C1363 + (C17490 + C17491) * C1358 -
            (C17688 + C17689) * C1364 - (C17690 + C17691) * C51042) *
               C51126 * C17451 +
           C18877 * C17452) *
              C51300 +
          (((C17689 + C17688) * C1364 -
            ((C17491 + C17490) * C1358 + (C17489 + C17488) * C1363) +
            (C17691 + C17690) * C51042) *
               C51126 * C17450 +
           ((C17694 + C17693) * C1364 -
            ((C17495 + C17494) * C1358 + (C17493 + C17492) * C1363) +
            (C17696 + C17695) * C51042) *
               C51126 * C17451 +
           ((C17697 + C17698) * C1364 - (C17506 * C1358 + C17507 * C1363) +
            (C17699 + C17700) * C51042) *
               C51126 * C17452) *
              C51285 +
          (C18877 * C17450 +
           ((C17499 + C17498) * C1363 + (C17497 + C17496) * C1358 -
            (C17698 + C17697) * C1364 - (C17700 + C17699) * C51042) *
               C51126 * C17451 +
           ((C17500 + C17501) * C1363 + (C17502 + C17503) * C1358 -
            (C17454 * C642 + C51162 * C651 + C17453 * C304 + C17448 * C314) *
                C1364 -
            (C17454 * C652 + C51162 * C657 + C17453 * C315 + C17448 * C322) *
                C51042) *
               C51126 * C17452) *
              C1362) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C1363 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C1358 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C1364 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51042) *
              C51126 * C50973 * C51300 +
          ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
            C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
               C1364 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C1358 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C1363) +
           (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
            C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
               C51042) *
              C51126 * C50973 * C51285 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
            C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
               C1363 +
           (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
            C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
               C1358 -
           (C20287 * C3018 + C20282 * C3023 + C20286 * C771 + C20281 * C777 +
            C20285 * C640 + C20280 * C647 + C20284 * C302 + C20279 * C310) *
               C1364 -
           (C20287 * C3024 + C20282 * C3027 + C20286 * C778 + C20281 * C783 +
            C20285 * C648 + C20280 * C655 + C20284 * C311 + C20279 * C320) *
               C51042) *
              C51126 * C50973 * C1362) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C1492 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51301 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C1493 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51288 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C1494 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C1489) *
               C51126 * C17450 +
           ((C17488 + C17489) * C1492 + (C17490 + C17491) * C51301 -
            (C17688 + C17689) * C1493 - (C17690 + C17691) * C51288 +
            (C18058 + C18059) * C1494 + (C18060 + C18061) * C1489) *
               C51126 * C17451 +
           (C17504 * C1492 + C17505 * C51301 - C17701 * C1493 -
            C17702 * C51288 + (C18062 + C18063) * C1494 +
            (C18064 + C18065) * C1489) *
               C51126 * C17452) *
              C1490 +
          (((C17689 + C17688) * C1493 -
            ((C17491 + C17490) * C51301 + (C17489 + C17488) * C1492) +
            (C17691 + C17690) * C51288 - (C18059 + C18058) * C1494 -
            (C18061 + C18060) * C1489) *
               C51126 * C17450 +
           ((C17694 + C17693) * C1493 -
            ((C17495 + C17494) * C51301 + (C17493 + C17492) * C1492) +
            (C17696 + C17695) * C51288 - (C18063 + C18062) * C1494 -
            (C18065 + C18064) * C1489) *
               C51126 * C17451 +
           ((C17697 + C17698) * C1493 - (C17506 * C51301 + C17507 * C1492) +
            (C17699 + C17700) * C51288 -
            (C17454 * C772 + C51162 * C779 + C17453 * C641 + C17448 * C649) *
                C1494 -
            (C17454 * C780 + C51162 * C784 + C17453 * C650 + C17448 * C656) *
                C1489) *
               C51126 * C17452) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C1492 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51301 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C1493 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51288 +
           (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
            C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
               C1494 +
           (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
            C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
               C1489) *
              C51126 * C50973 * C1490 +
          ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
            C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
               C1493 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51301 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C1492) +
           (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
            C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
               C51288 -
           (C20287 * C3145 + C20282 * C3148 + C20286 * C3017 + C20281 * C3021 +
            C20285 * C770 + C20280 * C775 + C20284 * C639 + C20279 * C645) *
               C1494 -
           (C20287 * C3149 + C20282 * C3151 + C20286 * C3022 + C20281 * C3026 +
            C20285 * C776 + C20280 * C782 + C20284 * C646 + C20279 * C654) *
               C1489) *
              C51126 * C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C1363 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C1358 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C1364 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C51126 * C17450 +
            ((C17488 + C17489) * C1363 + (C17490 + C17491) * C1358 -
             (C17688 + C17689) * C1364 - (C17690 + C17691) * C51042) *
                C51126 * C17451 +
            C18877 * C17452) *
               C1490 +
           (((C17689 + C17688) * C1364 -
             ((C17491 + C17490) * C1358 + (C17489 + C17488) * C1363) +
             (C17691 + C17690) * C51042) *
                C51126 * C17450 +
            ((C17694 + C17693) * C1364 -
             ((C17495 + C17494) * C1358 + (C17493 + C17492) * C1363) +
             (C17696 + C17695) * C51042) *
                C51126 * C17451 +
            ((C17697 + C17698) * C1364 - (C17506 * C1358 + C17507 * C1363) +
             (C17699 + C17700) * C51042) *
                C51126 * C17452) *
               C50997) *
              C51256 +
          ((((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                 C1364 -
             ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                  C1358 +
              (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                  C1363) +
             (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                 C51042) *
                C51126 * C17450 +
            ((C19234 + C19235) * C1364 -
             ((C17881 + C17880) * C1358 + (C17879 + C17878) * C1363) +
             (C19236 + C19237) * C51042) *
                C51126 * C17451 +
            ((C19238 + C19239) * C1364 - (C17890 * C1358 + C17891 * C1363) +
             (C19240 + C19241) * C51042) *
                C51126 * C17452) *
               C1490 +
           (((C17878 + C17879) * C1363 + (C17880 + C17881) * C1358 -
             (C19235 + C19234) * C1364 - (C19237 + C19236) * C51042) *
                C51126 * C17450 +
            ((C17882 + C17883) * C1363 + (C17884 + C17885) * C1358 -
             (C19239 + C19238) * C1364 - (C19241 + C19240) * C51042) *
                C51126 * C17451 +
            ((C17886 + C17887) * C1363 + (C17888 + C17889) * C1358 -
             (C17454 * C890 + C51162 * C905 + C17453 * C889 + C17448 * C903) *
                 C1364 -
             (C17454 * C906 + C51162 * C914 + C17453 * C904 + C17448 * C913) *
                 C51042) *
                C51126 * C17452) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C1363 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C1358 -
            (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
             C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
                C1364 -
            (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
             C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
                C51042) *
               C51126 * C50973 * C1490 +
           ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
             C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
                C1364 -
            ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
              C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                 C1358 +
             (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
              C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                 C1363) +
            (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
             C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
                C51042) *
               C51126 * C50973 * C50997) *
              C51256 +
          (((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
             C20286 * C3298 + C20281 * C3302 + C20287 * C3299 +
             C20282 * C3304) *
                C1364 -
            ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
              C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                 C1358 +
             (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
              C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                 C1363) +
            (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
             C20286 * C3303 + C20281 * C3310 + C20287 * C3305 +
             C20282 * C3311) *
                C51042) *
               C51126 * C50973 * C1490 +
           ((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C1363 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C1358 -
            (C20287 * C3301 + C20282 * C3308 + C20286 * C3300 + C20281 * C3306 +
             C20285 * C886 + C20280 * C897 + C20284 * C885 + C20279 * C895) *
                C1364 -
            (C20287 * C3309 + C20282 * C3313 + C20286 * C3307 + C20281 * C3312 +
             C20285 * C898 + C20280 * C910 + C20284 * C896 + C20279 * C909) *
                C51042) *
               C51126 * C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C1363 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C1358 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C1364 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C51126 * C17450 +
            ((C17488 + C17489) * C1363 + (C17490 + C17491) * C1358 -
             (C17688 + C17689) * C1364 - (C17690 + C17691) * C51042) *
                C51126 * C17451 +
            C18877 * C17452) *
               C51247 +
           (((C17689 + C17688) * C1364 -
             ((C17491 + C17490) * C1358 + (C17489 + C17488) * C1363) +
             (C17691 + C17690) * C51042) *
                C51126 * C17450 +
            ((C17694 + C17693) * C1364 -
             ((C17495 + C17494) * C1358 + (C17493 + C17492) * C1363) +
             (C17696 + C17695) * C51042) *
                C51126 * C17451 +
            ((C17697 + C17698) * C1364 - (C17506 * C1358 + C17507 * C1363) +
             (C17699 + C17700) * C51042) *
                C51126 * C17452) *
               C50997) *
              C1775 +
          ((((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                 C1364 -
             ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                  C1358 +
              (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                  C1363) +
             (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                 C51042) *
                C51126 * C17450 +
            ((C19234 + C19235) * C1364 -
             ((C17881 + C17880) * C1358 + (C17879 + C17878) * C1363) +
             (C19236 + C19237) * C51042) *
                C51126 * C17451 +
            ((C19238 + C19239) * C1364 - (C17890 * C1358 + C17891 * C1363) +
             (C19240 + C19241) * C51042) *
                C51126 * C17452) *
               C51247 +
           (((C17878 + C17879) * C1363 + (C17880 + C17881) * C1358 -
             (C19235 + C19234) * C1364 - (C19237 + C19236) * C51042) *
                C51126 * C17450 +
            ((C17882 + C17883) * C1363 + (C17884 + C17885) * C1358 -
             (C19239 + C19238) * C1364 - (C19241 + C19240) * C51042) *
                C51126 * C17451 +
            ((C17886 + C17887) * C1363 + (C17888 + C17889) * C1358 -
             (C17454 * C890 + C51162 * C905 + C17453 * C889 + C17448 * C903) *
                 C1364 -
             (C17454 * C906 + C51162 * C914 + C17453 * C904 + C17448 * C913) *
                 C51042) *
                C51126 * C17452) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C1363 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C1358 -
            (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
             C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
                C1364 -
            (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
             C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
                C51042) *
               C51126 * C50973 * C51247 +
           ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
             C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
                C1364 -
            ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
              C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                 C1358 +
             (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
              C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                 C1363) +
            (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
             C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
                C51042) *
               C51126 * C50973 * C50997) *
              C1775 +
          (((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
             C20286 * C3298 + C20281 * C3302 + C20287 * C3299 +
             C20282 * C3304) *
                C1364 -
            ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
              C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                 C1358 +
             (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
              C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                 C1363) +
            (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
             C20286 * C3303 + C20281 * C3310 + C20287 * C3305 +
             C20282 * C3311) *
                C51042) *
               C51126 * C50973 * C51247 +
           ((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C1363 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C1358 -
            (C20287 * C3301 + C20282 * C3308 + C20286 * C3300 + C20281 * C3306 +
             C20285 * C886 + C20280 * C897 + C20284 * C885 + C20279 * C895) *
                C1364 -
            (C20287 * C3309 + C20282 * C3313 + C20286 * C3307 + C20281 * C3312 +
             C20285 * C898 + C20280 * C910 + C20284 * C896 + C20279 * C909) *
                C51042) *
               C51126 * C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C1492 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51301 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C1493 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51288 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C1494 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C1489) *
               C51126 * C17450 +
           ((C17488 + C17489) * C1492 + (C17490 + C17491) * C51301 -
            (C17688 + C17689) * C1493 - (C17690 + C17691) * C51288 +
            (C18058 + C18059) * C1494 + (C18060 + C18061) * C1489) *
               C51126 * C17451 +
           (C17504 * C1492 + C17505 * C51301 - C17701 * C1493 -
            C17702 * C51288 + (C18062 + C18063) * C1494 +
            (C18064 + C18065) * C1489) *
               C51126 * C17452) *
              C50992 * C1775 +
          (((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                C1493 -
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51301 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C1492) +
            (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                C51288 -
            (C17454 * C3298 + C51162 * C3302 + C17453 * C884 + C17448 * C893) *
                C1494 -
            (C17454 * C3303 + C51162 * C3310 + C17453 * C894 + C17448 * C908) *
                C1489) *
               C51126 * C17450 +
           ((C19234 + C19235) * C1493 -
            ((C17881 + C17880) * C51301 + (C17879 + C17878) * C1492) +
            (C19236 + C19237) * C51288 -
            (C17454 * C3300 + C51162 * C3306 + C17453 * C886 + C17448 * C897) *
                C1494 -
            (C17454 * C3307 + C51162 * C3312 + C17453 * C898 + C17448 * C910) *
                C1489) *
               C51126 * C17451 +
           ((C19238 + C19239) * C1493 - (C17890 * C51301 + C17891 * C1492) +
            (C19240 + C19241) * C51288 -
            (C17454 * C4244 + C51162 * C4245 + C17453 * C888 + C17448 * C901) *
                C1494 -
            (C17454 * C4246 + C51162 * C4247 + C17453 * C902 + C17448 * C912) *
                C1489) *
               C51126 * C17452) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C1492 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51301 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C1493 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51288 +
           (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
            C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
               C1494 +
           (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
            C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
               C1489) *
              C51126 * C50973 * C50992 * C1775 +
          ((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
            C20286 * C3298 + C20281 * C3302 + C20287 * C3299 + C20282 * C3304) *
               C1493 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51301 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C1492) +
           (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
            C20286 * C3303 + C20281 * C3310 + C20287 * C3305 + C20282 * C3311) *
               C51288 -
           (C20287 * C20750 + C20282 * C20751 + C20286 * C3299 +
            C20281 * C3304 + C20285 * C3298 + C20280 * C3302 + C20284 * C884 +
            C20279 * C893) *
               C1494 -
           (C20287 * C20752 + C20282 * C20753 + C20286 * C3305 +
            C20281 * C3311 + C20285 * C3303 + C20280 * C3310 + C20284 * C894 +
            C20279 * C908) *
               C1489) *
              C51126 * C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C1363 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C1358 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C1364 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C51126 * C17450 +
           ((C17488 + C17489) * C1363 + (C17490 + C17491) * C1358 -
            (C17688 + C17689) * C1364 - (C17690 + C17691) * C51042) *
               C51126 * C17451 +
           C18877 * C17452) *
              C50992 * C51302 +
          (((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                C1364 -
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C1358 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C1363) +
            (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                C51042) *
               C51126 * C17450 +
           ((C19234 + C19235) * C1364 -
            ((C17881 + C17880) * C1358 + (C17879 + C17878) * C1363) +
            (C19236 + C19237) * C51042) *
               C51126 * C17451 +
           ((C19238 + C19239) * C1364 - (C17890 * C1358 + C17891 * C1363) +
            (C19240 + C19241) * C51042) *
               C51126 * C17452) *
              C50992 * C51291 +
          (((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
             C51162 * C1162) *
                C1363 +
            (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
             C51162 * C1170) *
                C1358 -
            (C17454 * C3460 + C51162 * C3463 + C17453 * C1158 +
             C17448 * C1162) *
                C1364 -
            (C17454 * C3464 + C51162 * C3469 + C17453 * C1163 +
             C17448 * C1170) *
                C51042) *
               C51126 * C17450 +
           ((C18472 + C18473) * C1363 + (C18474 + C18475) * C1358 -
            (C17454 * C3461 + C51162 * C3465 + C17453 * C1159 +
             C17448 * C1164) *
                C1364 -
            (C17454 * C3466 + C51162 * C3470 + C17453 * C1165 +
             C17448 * C1171) *
                C51042) *
               C51126 * C17451 +
           ((C18476 + C18477) * C1363 + (C18478 + C18479) * C1358 -
            (C17454 * C3462 + C51162 * C3468 + C17453 * C1160 +
             C17448 * C1166) *
                C1364 -
            (C17454 * C3467 + C51162 * C3471 + C17453 * C1167 +
             C17448 * C1172) *
                C51042) *
               C51126 * C17452) *
              C50992 * C2019)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C1363 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C1358 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C1364 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51042) *
              C51126 * C50973 * C50992 * C51302 +
          ((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
            C20286 * C3298 + C20281 * C3302 + C20287 * C3299 + C20282 * C3304) *
               C1364 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C1358 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C1363) +
           (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
            C20286 * C3303 + C20281 * C3310 + C20287 * C3305 + C20282 * C3311) *
               C51042) *
              C51126 * C50973 * C50992 * C51291 +
          ((C20284 * C1016 + C20279 * C1021 + C20285 * C1158 + C20280 * C1162 +
            C20286 * C3460 + C20281 * C3463 + C20287 * C3636 + C20282 * C3638) *
               C1363 +
           (C20284 * C1022 + C20279 * C1031 + C20285 * C1163 + C20280 * C1170 +
            C20286 * C3464 + C20281 * C3469 + C20287 * C3639 + C20282 * C3642) *
               C1358 -
           (C20287 * C20950 + C20282 * C20951 + C20286 * C3636 +
            C20281 * C3638 + C20285 * C3460 + C20280 * C3463 + C20284 * C1158 +
            C20279 * C1162) *
               C1364 -
           (C20287 * C20952 + C20282 * C20953 + C20286 * C3639 +
            C20281 * C3642 + C20285 * C3464 + C20280 * C3469 + C20284 * C1163 +
            C20279 * C1170) *
               C51042) *
              C51126 * C50973 * C50992 * C2019)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C635 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C630 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C636 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C631 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C637 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C632) *
               C51126 * C17450 +
           ((C17488 + C17489) * C635 + (C17490 + C17491) * C630 -
            (C17688 + C17689) * C636 - (C17690 + C17691) * C631 +
            (C18058 + C18059) * C637 + (C18060 + C18061) * C632) *
               C51126 * C17451 +
           (C17504 * C635 + C17505 * C630 - C17701 * C636 - C17702 * C631 +
            (C18062 + C18063) * C637 + (C18064 + C18065) * C632) *
               C51126 * C17452) *
              C51247 +
          (((C17689 + C17688) * C636 -
            ((C17491 + C17490) * C630 + (C17489 + C17488) * C635) +
            (C17691 + C17690) * C631 - (C18059 + C18058) * C637 -
            (C18061 + C18060) * C632) *
               C51126 * C17450 +
           ((C17694 + C17693) * C636 -
            ((C17495 + C17494) * C630 + (C17493 + C17492) * C635) +
            (C17696 + C17695) * C631 - (C18063 + C18062) * C637 -
            (C18065 + C18064) * C632) *
               C51126 * C17451 +
           ((C17697 + C17698) * C636 - (C17506 * C630 + C17507 * C635) +
            (C17699 + C17700) * C631 -
            (C17454 * C772 + C51162 * C779 + C17453 * C641 + C17448 * C649) *
                C637 -
            (C17454 * C780 + C51162 * C784 + C17453 * C650 + C17448 * C656) *
                C632) *
               C51126 * C17452) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51026) *
               C51126 * C17450 +
           ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
               C17451 +
           C17514 * C17452) *
              C112 -
          (C17515 * C17452 +
           ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51126 *
               C17451 +
           ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51126 *
               C17450) *
              C113 +
          (C17514 * C17450 +
           ((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51126 *
               C17451 +
           ((C17500 + C17501) * C118 + (C17502 + C17503) * C51026) * C51126 *
               C17452) *
              C114 -
          (((C17454 * C317 + C51162 * C323 + C17453 * C137 + C17448 * C145) *
                C51026 +
            (C17454 * C305 + C51162 * C316 + C17453 * C124 + C17448 * C136) *
                C118) *
               C51126 * C17452 +
           ((C17503 + C17502) * C51026 + (C17501 + C17500) * C118) * C51126 *
               C17451 +
           C17515 * C17450) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
                C17451 +
            C17514 * C17452) *
               C51247 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51126 *
                C17451 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51126 *
                C17450) *
               C50997) *
              C1013 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C51126 *
                C17450 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C51126 *
                C17451 +
            ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51126 *
                C17452) *
               C50997 -
           (C17895 * C17452 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51126 *
                C17451 +
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51026 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C118) *
                C51126 * C17450) *
               C51247) *
              C1014 +
          ((((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
              C51162 * C1162) *
                 C118 +
             (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
              C51162 * C1170) *
                 C51026) *
                C51126 * C17450 +
            ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C51126 *
                C17451 +
            ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C51126 *
                C17452) *
               C51247 -
           (((C17454 * C1169 + C51162 * C1173 + C17453 * C1028 +
              C17448 * C1034) *
                 C51026 +
             (C17454 * C1161 + C51162 * C1168 + C17453 * C1019 +
              C17448 * C1027) *
                 C118) *
                C51126 * C17452 +
            ((C18479 + C18478) * C51026 + (C18477 + C18476) * C118) * C51126 *
                C17451 +
            ((C18475 + C18474) * C51026 + (C18473 + C18472) * C118) * C51126 *
                C17450) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C118 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51026) *
              C51126 * C50973 * C112 -
          ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
            C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
               C51026 +
           (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
            C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
               C118) *
              C51126 * C50973 * C113 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
            C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
               C118 +
           (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
            C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
               C51026) *
              C51126 * C50973 * C114 -
          ((C20287 * C780 + C20282 * C784 + C20286 * C650 + C20281 * C656 +
            C20285 * C313 + C20280 * C321 + C20284 * C133 + C20279 * C143) *
               C51026 +
           (C20287 * C772 + C20282 * C779 + C20286 * C641 + C20281 * C649 +
            C20285 * C303 + C20280 * C312 + C20284 * C122 + C20279 * C132) *
               C118) *
              C51126 * C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C635 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C630 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C636 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C631 +
           (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
            C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
               C637 +
           (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
            C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
               C632) *
              C51126 * C50973 * C51247 +
          ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
            C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
               C636 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C630 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C635) +
           (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
            C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
               C631 -
           (C20287 * C3145 + C20282 * C3148 + C20286 * C3017 + C20281 * C3021 +
            C20285 * C770 + C20280 * C775 + C20284 * C639 + C20279 * C645) *
               C637 -
           (C20287 * C3149 + C20282 * C3151 + C20286 * C3022 + C20281 * C3026 +
            C20285 * C776 + C20280 * C782 + C20284 * C646 + C20279 * C654) *
               C632) *
              C51126 * C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C51026) *
               C51126 * C50973 * C51247 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51026 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51126 * C50973 * C50997) *
              C1013 +
          (((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C118 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C51026) *
               C51126 * C50973 * C50997 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51026 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C118) *
               C51126 * C50973 * C51247) *
              C1014 +
          (((C20284 * C1016 + C20279 * C1021 + C20285 * C1158 + C20280 * C1162 +
             C20286 * C3460 + C20281 * C3463 + C20287 * C3636 +
             C20282 * C3638) *
                C118 +
            (C20284 * C1022 + C20279 * C1031 + C20285 * C1163 + C20280 * C1170 +
             C20286 * C3464 + C20281 * C3469 + C20287 * C3639 +
             C20282 * C3642) *
                C51026) *
               C51126 * C50973 * C51247 -
           ((C20287 * C3641 + C20282 * C3643 + C20286 * C3466 + C20281 * C3470 +
             C20285 * C1165 + C20280 * C1171 + C20284 * C1024 +
             C20279 * C1032) *
                C51026 +
            (C20287 * C3637 + C20282 * C3640 + C20286 * C3461 + C20281 * C3465 +
             C20285 * C1159 + C20280 * C1164 + C20284 * C1017 +
             C20279 * C1023) *
                C118) *
               C51126 * C50973 * C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
               C765 +
           (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
               C760 -
           (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
               C766 -
           (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
               C761 +
           (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
               C767 +
           (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
               C762 -
           (C17454 * C3016 + C51162 * C3019 + C17453 * C769 + C17448 * C773) *
               C768 -
           (C17454 * C3020 + C51162 * C3025 + C17453 * C774 + C17448 * C781) *
               C763) *
              C51126 * C17450 +
          ((C17488 + C17489) * C765 + (C17490 + C17491) * C760 -
           (C17688 + C17689) * C766 - (C17690 + C17691) * C761 +
           (C18058 + C18059) * C767 + (C18060 + C18061) * C762 -
           (C17454 * C3017 + C51162 * C3021 + C17453 * C770 + C17448 * C775) *
               C768 -
           (C17454 * C3022 + C51162 * C3026 + C17453 * C776 + C17448 * C782) *
               C763) *
              C51126 * C17451 +
          (C17504 * C765 + C17505 * C760 - C17701 * C766 - C17702 * C761 +
           (C18062 + C18063) * C767 + (C18064 + C18065) * C762 -
           (C17454 * C3018 + C51162 * C3023 + C17453 * C771 + C17448 * C777) *
               C768 -
           (C17454 * C3024 + C51162 * C3027 + C17453 * C778 + C17448 * C783) *
               C763) *
              C51126 * C17452) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51254 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C299 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C51126 * C17450 +
           ((C17488 + C17489) * C298 + (C17490 + C17491) * C51254 -
            (C17688 + C17689) * C299 - (C17690 + C17691) * C51042) *
               C51126 * C17451 +
           C17707 * C17452) *
              C295 +
          (((C17689 + C17688) * C299 -
            ((C17491 + C17490) * C51254 + (C17489 + C17488) * C298) +
            (C17691 + C17690) * C51042) *
               C51126 * C17450 +
           ((C17694 + C17693) * C299 -
            ((C17495 + C17494) * C51254 + (C17493 + C17492) * C298) +
            (C17696 + C17695) * C51042) *
               C51126 * C17451 +
           ((C17697 + C17698) * C299 - (C17506 * C51254 + C17507 * C298) +
            (C17699 + C17700) * C51042) *
               C51126 * C17452) *
              C296 +
          (C17707 * C17450 +
           ((C17499 + C17498) * C298 + (C17497 + C17496) * C51254 -
            (C17698 + C17697) * C299 - (C17700 + C17699) * C51042) *
               C51126 * C17451 +
           ((C17500 + C17501) * C298 + (C17502 + C17503) * C51254 -
            (C17454 * C642 + C51162 * C651 + C17453 * C304 + C17448 * C314) *
                C299 -
            (C17454 * C652 + C51162 * C657 + C17453 * C315 + C17448 * C322) *
                C51042) *
               C51126 * C17452) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51254 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C299 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C51126 * C17450 +
           ((C17488 + C17489) * C298 + (C17490 + C17491) * C51254 -
            (C17688 + C17689) * C299 - (C17690 + C17691) * C51042) *
               C51126 * C17451 +
           C17707 * C17452) *
              C50992 * C1013 +
          (((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                C299 -
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51254 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C298) +
            (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                C51042) *
               C51126 * C17450 +
           ((C17453 * C885 + C17448 * C895 + C17454 * C886 + C51162 * C897) *
                C299 -
            ((C17881 + C17880) * C51254 + (C17879 + C17878) * C298) +
            (C17453 * C896 + C17448 * C909 + C17454 * C898 + C51162 * C910) *
                C51042) *
               C51126 * C17451 +
           ((C17453 * C887 + C17448 * C899 + C17454 * C888 + C51162 * C901) *
                C299 -
            (C17890 * C51254 + C17891 * C298) +
            (C17453 * C900 + C17448 * C911 + C17454 * C902 + C51162 * C912) *
                C51042) *
               C51126 * C17452) *
              C50992 * C1014 +
          (((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
             C51162 * C1162) *
                C298 +
            (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
             C51162 * C1170) *
                C51254 -
            (C17454 * C3460 + C51162 * C3463 + C17453 * C1158 +
             C17448 * C1162) *
                C299 -
            (C17454 * C3464 + C51162 * C3469 + C17453 * C1163 +
             C17448 * C1170) *
                C51042) *
               C51126 * C17450 +
           ((C18472 + C18473) * C298 + (C18474 + C18475) * C51254 -
            (C17454 * C3461 + C51162 * C3465 + C17453 * C1159 +
             C17448 * C1164) *
                C299 -
            (C17454 * C3466 + C51162 * C3470 + C17453 * C1165 +
             C17448 * C1171) *
                C51042) *
               C51126 * C17451 +
           ((C18476 + C18477) * C298 + (C18478 + C18479) * C51254 -
            (C17454 * C3462 + C51162 * C3468 + C17453 * C1160 +
             C17448 * C1166) *
                C299 -
            (C17454 * C3467 + C51162 * C3471 + C17453 * C1167 +
             C17448 * C1172) *
                C51042) *
               C51126 * C17452) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51254 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C299 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51042) *
              C51126 * C50973 * C295 +
          ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
            C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
               C299 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51254 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C298) +
           (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
            C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
               C51042) *
              C51126 * C50973 * C296 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
            C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
               C298 +
           (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
            C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
               C51254 -
           (C20287 * C3018 + C20282 * C3023 + C20286 * C771 + C20281 * C777 +
            C20285 * C640 + C20280 * C647 + C20284 * C302 + C20279 * C310) *
               C299 -
           (C20287 * C3024 + C20282 * C3027 + C20286 * C778 + C20281 * C783 +
            C20285 * C648 + C20280 * C655 + C20284 * C311 + C20279 * C320) *
               C51042) *
              C51126 * C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
           C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
              C765 +
          (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
           C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
              C760 -
          (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
           C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
              C766 -
          (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
           C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
              C761 +
          (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
           C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
              C767 +
          (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
           C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
              C762 -
          (C20287 * C20648 + C20282 * C20649 + C20286 * C3144 + C20281 * C3146 +
           C20285 * C3016 + C20280 * C3019 + C20284 * C769 + C20279 * C773) *
              C768 -
          (C20287 * C20650 + C20282 * C20651 + C20286 * C3147 + C20281 * C3150 +
           C20285 * C3020 + C20280 * C3025 + C20284 * C774 + C20279 * C781) *
              C763) *
         C51126 * C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51254 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C299 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51042) *
              C51126 * C50973 * C50992 * C1013 +
          ((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
            C20286 * C3298 + C20281 * C3302 + C20287 * C3299 + C20282 * C3304) *
               C299 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51254 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C298) +
           (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
            C20286 * C3303 + C20281 * C3310 + C20287 * C3305 + C20282 * C3311) *
               C51042) *
              C51126 * C50973 * C50992 * C1014 +
          ((C20284 * C1016 + C20279 * C1021 + C20285 * C1158 + C20280 * C1162 +
            C20286 * C3460 + C20281 * C3463 + C20287 * C3636 + C20282 * C3638) *
               C298 +
           (C20284 * C1022 + C20279 * C1031 + C20285 * C1163 + C20280 * C1170 +
            C20286 * C3464 + C20281 * C3469 + C20287 * C3639 + C20282 * C3642) *
               C51254 -
           (C20287 * C20950 + C20282 * C20951 + C20286 * C3636 +
            C20281 * C3638 + C20285 * C3460 + C20280 * C3463 + C20284 * C1158 +
            C20279 * C1162) *
               C299 -
           (C20287 * C20952 + C20282 * C20953 + C20286 * C3639 +
            C20281 * C3642 + C20285 * C3464 + C20280 * C3469 + C20284 * C1163 +
            C20279 * C1170) *
               C51042) *
              C51126 * C50973 * C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C635 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C630 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C636 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C631 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C637 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C632) *
               C51126 * C17450 +
           ((C17488 + C17489) * C635 + (C17490 + C17491) * C630 -
            (C17688 + C17689) * C636 - (C17690 + C17691) * C631 +
            (C18058 + C18059) * C637 + (C18060 + C18061) * C632) *
               C51126 * C17451 +
           (C17504 * C635 + C17505 * C630 - C17701 * C636 - C17702 * C631 +
            (C18062 + C18063) * C637 + (C18064 + C18065) * C632) *
               C51126 * C17452) *
              C50992 * C51256 +
          (((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                C636 -
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C630 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C635) +
            (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                C631 -
            (C17454 * C3298 + C51162 * C3302 + C17453 * C884 + C17448 * C893) *
                C637 -
            (C17454 * C3303 + C51162 * C3310 + C17453 * C894 + C17448 * C908) *
                C632) *
               C51126 * C17450 +
           ((C17453 * C885 + C17448 * C895 + C17454 * C886 + C51162 * C897) *
                C636 -
            ((C17881 + C17880) * C630 + (C17879 + C17878) * C635) +
            (C17453 * C896 + C17448 * C909 + C17454 * C898 + C51162 * C910) *
                C631 -
            (C17454 * C3300 + C51162 * C3306 + C17453 * C886 + C17448 * C897) *
                C637 -
            (C17454 * C3307 + C51162 * C3312 + C17453 * C898 + C17448 * C910) *
                C632) *
               C51126 * C17451 +
           ((C17453 * C887 + C17448 * C899 + C17454 * C888 + C51162 * C901) *
                C636 -
            (C17890 * C630 + C17891 * C635) +
            (C17453 * C900 + C17448 * C911 + C17454 * C902 + C51162 * C912) *
                C631 -
            (C17454 * C4244 + C51162 * C4245 + C17453 * C888 + C17448 * C901) *
                C637 -
            (C17454 * C4246 + C51162 * C4247 + C17453 * C902 + C17448 * C912) *
                C632) *
               C51126 * C17452) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
                C17451 +
            C17514 * C17452) *
               C295 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51126 *
                C17451 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51126 *
                C17450) *
               C296 +
           (C17514 * C17450 +
            ((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51126 *
                C17451 +
            ((C17500 + C17501) * C118 + (C17502 + C17503) * C51026) * C51126 *
                C17452) *
               C297) *
              C51256 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C51126 *
                C17450 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C51126 *
                C17451 +
            ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51126 *
                C17452) *
               C296 -
           (C17895 * C17452 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51126 *
                C17451 +
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51026 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C118) *
                C51126 * C17450) *
               C295 -
           (((C17454 * C1645 + C51162 * C1646 + C17453 * C485 + C17448 * C493) *
                 C51026 +
             (C17454 * C1643 + C51162 * C1644 + C17453 * C475 + C17448 * C484) *
                 C118) *
                C51126 * C17452 +
            ((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) * C51126 *
                C17451 +
            C17895 * C17450) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51026) *
               C51126 * C17450 +
           ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
               C17451 +
           C17514 * C17452) *
              C50992 * C1240 -
          (C17895 * C17452 +
           ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51126 *
               C17451 +
           ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                C51026 +
            (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                C118) *
               C51126 * C17450) *
              C50992 * C1241 +
          (((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
             C51162 * C1162) *
                C118 +
            (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
             C51162 * C1170) *
                C51026) *
               C51126 * C17450 +
           ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C51126 *
               C17451 +
           ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C51126 *
               C17452) *
              C50992 * C1242 -
          (((C17454 * C7128 + C51162 * C7129 + C17453 * C1250 +
             C17448 * C1257) *
                C51026 +
            (C17454 * C7126 + C51162 * C7127 + C17453 * C1245 +
             C17448 * C1251) *
                C118) *
               C51126 * C17452 +
           ((C17454 * C3747 + C51162 * C3755 + C17453 * C1252 +
             C17448 * C1258) *
                C51026 +
            (C17454 * C3743 + C51162 * C3749 + C17453 * C1246 +
             C17448 * C1253) *
                C118) *
               C51126 * C17451 +
           ((C17454 * C3751 + C51162 * C3757 + C17453 * C1254 +
             C17448 * C1259) *
                C51026 +
            (C17454 * C3745 + C51162 * C3753 + C17453 * C1247 +
             C17448 * C1255) *
                C118) *
               C51126 * C17450) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C51026) *
               C51126 * C50973 * C295 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51026 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51126 * C50973 * C296 +
           ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
             C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
                C118 +
            (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
             C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
                C51026) *
               C51126 * C50973 * C297) *
              C51256 +
          (((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C118 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C51026) *
               C51126 * C50973 * C296 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51026 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C118) *
               C51126 * C50973 * C295 -
           ((C20287 * C4246 + C20282 * C4247 + C20286 * C902 + C20281 * C912 +
             C20285 * C900 + C20280 * C911 + C20284 * C481 + C20279 * C491) *
                C51026 +
            (C20287 * C4244 + C20282 * C4245 + C20286 * C888 + C20281 * C901 +
             C20285 * C887 + C20280 * C899 + C20284 * C473 + C20279 * C480) *
                C118) *
               C51126 * C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C635 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C630 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C636 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C631 +
           (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
            C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
               C637 +
           (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
            C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
               C632) *
              C51126 * C50973 * C50992 * C51256 +
          ((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
            C20286 * C3298 + C20281 * C3302 + C20287 * C3299 + C20282 * C3304) *
               C636 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C630 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C635) +
           (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
            C20286 * C3303 + C20281 * C3310 + C20287 * C3305 + C20282 * C3311) *
               C631 -
           (C20287 * C20750 + C20282 * C20751 + C20286 * C3299 +
            C20281 * C3304 + C20285 * C3298 + C20280 * C3302 + C20284 * C884 +
            C20279 * C893) *
               C637 -
           (C20287 * C20752 + C20282 * C20753 + C20286 * C3305 +
            C20281 * C3311 + C20285 * C3303 + C20280 * C3310 + C20284 * C894 +
            C20279 * C908) *
               C632) *
              C51126 * C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C118 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51026) *
              C51126 * C50973 * C50992 * C1240 -
          ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
            C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
               C51026 +
           (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
            C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
               C118) *
              C51126 * C50973 * C50992 * C1241 +
          ((C20284 * C1016 + C20279 * C1021 + C20285 * C1158 + C20280 * C1162 +
            C20286 * C3460 + C20281 * C3463 + C20287 * C3636 + C20282 * C3638) *
               C118 +
           (C20284 * C1022 + C20279 * C1031 + C20285 * C1163 + C20280 * C1170 +
            C20286 * C3464 + C20281 * C3469 + C20287 * C3639 + C20282 * C3642) *
               C51026) *
              C51126 * C50973 * C50992 * C1242 -
          ((C20287 * C21021 + C20282 * C21023 + C20286 * C3750 +
            C20281 * C3756 + C20285 * C3751 + C20280 * C3757 + C20284 * C1254 +
            C20279 * C1259) *
               C51026 +
           (C20287 * C21020 + C20282 * C21022 + C20286 * C3744 +
            C20281 * C3752 + C20285 * C3745 + C20280 * C3753 + C20284 * C1247 +
            C20279 * C1255) *
               C118) *
              C51126 * C50973 * C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
                C17451 +
            C17514 * C17452) *
               C51300 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51126 *
                C17451 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51126 *
                C17450) *
               C51285 +
           (C17514 * C17450 +
            ((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51126 *
                C17451 +
            ((C17500 + C17501) * C118 + (C17502 + C17503) * C51026) * C51126 *
                C17452) *
               C1362) *
              C1775 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C51126 *
                C17450 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C51126 *
                C17451 +
            ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51126 *
                C17452) *
               C51285 -
           (C17895 * C17452 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51126 *
                C17451 +
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51026 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C118) *
                C51126 * C17450) *
               C51300 -
           (((C17454 * C1645 + C51162 * C1646 + C17453 * C485 + C17448 * C493) *
                 C51026 +
             (C17454 * C1643 + C51162 * C1644 + C17453 * C475 + C17448 * C484) *
                 C118) *
                C51126 * C17452 +
            ((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) * C51126 *
                C17451 +
            C17895 * C17450) *
               C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C51026) *
               C51126 * C50973 * C51300 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51026 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51126 * C50973 * C51285 +
           ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
             C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
                C118 +
            (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
             C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
                C51026) *
               C51126 * C50973 * C1362) *
              C1775 +
          (((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C118 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C51026) *
               C51126 * C50973 * C51285 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51026 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C118) *
               C51126 * C50973 * C51300 -
           ((C20287 * C4246 + C20282 * C4247 + C20286 * C902 + C20281 * C912 +
             C20285 * C900 + C20280 * C911 + C20284 * C481 + C20279 * C491) *
                C51026 +
            (C20287 * C4244 + C20282 * C4245 + C20286 * C888 + C20281 * C901 +
             C20285 * C887 + C20280 * C899 + C20284 * C473 + C20279 * C480) *
                C118) *
               C51126 * C50973 * C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C298 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51254 -
             (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                 C299 -
             (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                 C51042) *
                C51126 * C17450 +
            ((C17488 + C17489) * C298 + (C17490 + C17491) * C51254 -
             (C17688 + C17689) * C299 - (C17690 + C17691) * C51042) *
                C51126 * C17451 +
            C17707 * C17452) *
               C1490 +
           (((C17689 + C17688) * C299 -
             ((C17491 + C17490) * C51254 + (C17489 + C17488) * C298) +
             (C17691 + C17690) * C51042) *
                C51126 * C17450 +
            ((C17694 + C17693) * C299 -
             ((C17495 + C17494) * C51254 + (C17493 + C17492) * C298) +
             (C17696 + C17695) * C51042) *
                C51126 * C17451 +
            ((C17697 + C17698) * C299 - (C17506 * C51254 + C17507 * C298) +
             (C17699 + C17700) * C51042) *
                C51126 * C17452) *
               C50997) *
              C1775 +
          ((((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                 C299 -
             ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                  C51254 +
              (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                  C298) +
             (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                 C51042) *
                C51126 * C17450 +
            ((C19234 + C19235) * C299 -
             ((C17881 + C17880) * C51254 + (C17879 + C17878) * C298) +
             (C19236 + C19237) * C51042) *
                C51126 * C17451 +
            ((C19238 + C19239) * C299 - (C17890 * C51254 + C17891 * C298) +
             (C19240 + C19241) * C51042) *
                C51126 * C17452) *
               C1490 +
           (((C17878 + C17879) * C298 + (C17880 + C17881) * C51254 -
             (C19235 + C19234) * C299 - (C19237 + C19236) * C51042) *
                C51126 * C17450 +
            ((C17882 + C17883) * C298 + (C17884 + C17885) * C51254 -
             (C19239 + C19238) * C299 - (C19241 + C19240) * C51042) *
                C51126 * C17451 +
            ((C17886 + C17887) * C298 + (C17888 + C17889) * C51254 -
             (C17454 * C890 + C51162 * C905 + C17453 * C889 + C17448 * C903) *
                 C299 -
             (C17454 * C906 + C51162 * C914 + C17453 * C904 + C17448 * C913) *
                 C51042) *
                C51126 * C17452) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C298 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C51254 -
            (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
             C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
                C299 -
            (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
             C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
                C51042) *
               C51126 * C50973 * C1490 +
           ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
             C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
                C299 -
            ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
              C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                 C51254 +
             (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
              C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                 C298) +
            (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
             C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
                C51042) *
               C51126 * C50973 * C50997) *
              C1775 +
          (((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
             C20286 * C3298 + C20281 * C3302 + C20287 * C3299 +
             C20282 * C3304) *
                C299 -
            ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
              C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                 C51254 +
             (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
              C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                 C298) +
            (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
             C20286 * C3303 + C20281 * C3310 + C20287 * C3305 +
             C20282 * C3311) *
                C51042) *
               C51126 * C50973 * C1490 +
           ((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C298 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C51254 -
            (C20287 * C3301 + C20282 * C3308 + C20286 * C3300 + C20281 * C3306 +
             C20285 * C886 + C20280 * C897 + C20284 * C885 + C20279 * C895) *
                C299 -
            (C20287 * C3309 + C20282 * C3313 + C20286 * C3307 + C20281 * C3312 +
             C20285 * C898 + C20280 * C910 + C20284 * C896 + C20279 * C909) *
                C51042) *
               C51126 * C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
                C17451 +
            C17514 * C17452) *
               C1490 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51126 *
                C17451 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51126 *
                C17450) *
               C50997) *
              C51302 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C51126 *
                C17450 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C51126 *
                C17451 +
            ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51126 *
                C17452) *
               C50997 -
           (C17895 * C17452 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51126 *
                C17451 +
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51026 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C118) *
                C51126 * C17450) *
               C1490) *
              C51291 +
          ((((C17453 * C1016 + C17448 * C1021 + C17454 * C1158 +
              C51162 * C1162) *
                 C118 +
             (C17453 * C1022 + C17448 * C1031 + C17454 * C1163 +
              C51162 * C1170) *
                 C51026) *
                C51126 * C17450 +
            ((C18472 + C18473) * C118 + (C18474 + C18475) * C51026) * C51126 *
                C17451 +
            ((C18476 + C18477) * C118 + (C18478 + C18479) * C51026) * C51126 *
                C17452) *
               C1490 -
           (((C17454 * C1169 + C51162 * C1173 + C17453 * C1028 +
              C17448 * C1034) *
                 C51026 +
             (C17454 * C1161 + C51162 * C1168 + C17453 * C1019 +
              C17448 * C1027) *
                 C118) *
                C51126 * C17452 +
            ((C18479 + C18478) * C51026 + (C18477 + C18476) * C118) * C51126 *
                C17451 +
            ((C18475 + C18474) * C51026 + (C18473 + C18472) * C118) * C51126 *
                C17450) *
               C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C51026) *
               C51126 * C50973 * C1490 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51026 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51126 * C50973 * C50997) *
              C51302 +
          (((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C118 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C51026) *
               C51126 * C50973 * C50997 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51026 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C118) *
               C51126 * C50973 * C1490) *
              C51291 +
          (((C20284 * C1016 + C20279 * C1021 + C20285 * C1158 + C20280 * C1162 +
             C20286 * C3460 + C20281 * C3463 + C20287 * C3636 +
             C20282 * C3638) *
                C118 +
            (C20284 * C1022 + C20279 * C1031 + C20285 * C1163 + C20280 * C1170 +
             C20286 * C3464 + C20281 * C3469 + C20287 * C3639 +
             C20282 * C3642) *
                C51026) *
               C51126 * C50973 * C1490 -
           ((C20287 * C3641 + C20282 * C3643 + C20286 * C3466 + C20281 * C3470 +
             C20285 * C1165 + C20280 * C1171 + C20284 * C1024 +
             C20279 * C1032) *
                C51026 +
            (C20287 * C3637 + C20282 * C3640 + C20286 * C3461 + C20281 * C3465 +
             C20285 * C1159 + C20280 * C1164 + C20284 * C1017 +
             C20279 * C1023) *
                C118) *
               C51126 * C50973 * C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51026) *
               C51126 * C17450 +
           ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
               C17451 +
           C17514 * C17452) *
              C112 -
          (C17515 * C17452 +
           ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51126 *
               C17451 +
           ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51126 *
               C17450) *
              C113 +
          (C17514 * C17450 +
           ((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51126 *
               C17451 +
           ((C17500 + C17501) * C118 + (C17502 + C17503) * C51026) * C51126 *
               C17452) *
              C114 -
          (((C17454 * C317 + C51162 * C323 + C17453 * C137 + C17448 * C145) *
                C51026 +
            (C17454 * C305 + C51162 * C316 + C17453 * C124 + C17448 * C136) *
                C118) *
               C51126 * C17452 +
           ((C17503 + C17502) * C51026 + (C17501 + C17500) * C118) * C51126 *
               C17451 +
           C17515 * C17450) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C635 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C630 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C636 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C631 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C637 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C632) *
               C51126 * C17450 +
           ((C17488 + C17489) * C635 + (C17490 + C17491) * C630 -
            (C17688 + C17689) * C636 - (C17690 + C17691) * C631 +
            (C18058 + C18059) * C637 + (C18060 + C18061) * C632) *
               C51126 * C17451 +
           (C17504 * C635 + C17505 * C630 - C17701 * C636 - C17702 * C631 +
            (C18062 + C18063) * C637 + (C18064 + C18065) * C632) *
               C51126 * C17452) *
              C51247 +
          (((C17689 + C17688) * C636 -
            ((C17491 + C17490) * C630 + (C17489 + C17488) * C635) +
            (C17691 + C17690) * C631 - (C18059 + C18058) * C637 -
            (C18061 + C18060) * C632) *
               C51126 * C17450 +
           ((C17694 + C17693) * C636 -
            ((C17495 + C17494) * C630 + (C17493 + C17492) * C635) +
            (C17696 + C17695) * C631 - (C18063 + C18062) * C637 -
            (C18065 + C18064) * C632) *
               C51126 * C17451 +
           ((C17697 + C17698) * C636 - (C17506 * C630 + C17507 * C635) +
            (C17699 + C17700) * C631 -
            (C17454 * C772 + C51162 * C779 + C17453 * C641 + C17448 * C649) *
                C637 -
            (C17454 * C780 + C51162 * C784 + C17453 * C650 + C17448 * C656) *
                C632) *
               C51126 * C17452) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C118 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51026) *
              C51126 * C50973 * C112 -
          ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
            C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
               C51026 +
           (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
            C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
               C118) *
              C51126 * C50973 * C113 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
            C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
               C118 +
           (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
            C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
               C51026) *
              C51126 * C50973 * C114 -
          ((C20287 * C780 + C20282 * C784 + C20286 * C650 + C20281 * C656 +
            C20285 * C313 + C20280 * C321 + C20284 * C133 + C20279 * C143) *
               C51026 +
           (C20287 * C772 + C20282 * C779 + C20286 * C641 + C20281 * C649 +
            C20285 * C303 + C20280 * C312 + C20284 * C122 + C20279 * C132) *
               C118) *
              C51126 * C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C635 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C630 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C636 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C631 +
           (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
            C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
               C637 +
           (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
            C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
               C632) *
              C51126 * C50973 * C51247 +
          ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
            C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
               C636 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C630 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C635) +
           (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
            C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
               C631 -
           (C20287 * C3145 + C20282 * C3148 + C20286 * C3017 + C20281 * C3021 +
            C20285 * C770 + C20280 * C775 + C20284 * C639 + C20279 * C645) *
               C637 -
           (C20287 * C3149 + C20282 * C3151 + C20286 * C3022 + C20281 * C3026 +
            C20285 * C776 + C20280 * C782 + C20284 * C646 + C20279 * C654) *
               C632) *
              C51126 * C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C51254 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C299 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C51042) *
               C51126 * C17450 +
           ((C17488 + C17489) * C298 + (C17490 + C17491) * C51254 -
            (C17688 + C17689) * C299 - (C17690 + C17691) * C51042) *
               C51126 * C17451 +
           C17707 * C17452) *
              C295 +
          (((C17689 + C17688) * C299 -
            ((C17491 + C17490) * C51254 + (C17489 + C17488) * C298) +
            (C17691 + C17690) * C51042) *
               C51126 * C17450 +
           ((C17694 + C17693) * C299 -
            ((C17495 + C17494) * C51254 + (C17493 + C17492) * C298) +
            (C17696 + C17695) * C51042) *
               C51126 * C17451 +
           ((C17697 + C17698) * C299 - (C17506 * C51254 + C17507 * C298) +
            (C17699 + C17700) * C51042) *
               C51126 * C17452) *
              C296 +
          (C17707 * C17450 +
           ((C17499 + C17498) * C298 + (C17497 + C17496) * C51254 -
            (C17698 + C17697) * C299 - (C17700 + C17699) * C51042) *
               C51126 * C17451 +
           ((C17500 + C17501) * C298 + (C17502 + C17503) * C51254 -
            (C17454 * C642 + C51162 * C651 + C17453 * C304 + C17448 * C314) *
                C299 -
            (C17454 * C652 + C51162 * C657 + C17453 * C315 + C17448 * C322) *
                C51042) *
               C51126 * C17452) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
               C765 +
           (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
               C760 -
           (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
               C766 -
           (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
               C761 +
           (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
               C767 +
           (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
               C762 -
           (C17454 * C3016 + C51162 * C3019 + C17453 * C769 + C17448 * C773) *
               C768 -
           (C17454 * C3020 + C51162 * C3025 + C17453 * C774 + C17448 * C781) *
               C763) *
              C51126 * C17450 +
          ((C17488 + C17489) * C765 + (C17490 + C17491) * C760 -
           (C17688 + C17689) * C766 - (C17690 + C17691) * C761 +
           (C18058 + C18059) * C767 + (C18060 + C18061) * C762 -
           (C17454 * C3017 + C51162 * C3021 + C17453 * C770 + C17448 * C775) *
               C768 -
           (C17454 * C3022 + C51162 * C3026 + C17453 * C776 + C17448 * C782) *
               C763) *
              C51126 * C17451 +
          (C17504 * C765 + C17505 * C760 - C17701 * C766 - C17702 * C761 +
           (C18062 + C18063) * C767 + (C18064 + C18065) * C762 -
           (C17454 * C3018 + C51162 * C3023 + C17453 * C771 + C17448 * C777) *
               C768 -
           (C17454 * C3024 + C51162 * C3027 + C17453 * C778 + C17448 * C783) *
               C763) *
              C51126 * C17452) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C51254 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C299 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C51042) *
              C51126 * C50973 * C295 +
          ((C20284 * C301 + C20279 * C308 + C20285 * C639 + C20280 * C645 +
            C20286 * C770 + C20281 * C775 + C20287 * C3017 + C20282 * C3021) *
               C299 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51254 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C298) +
           (C20284 * C309 + C20279 * C319 + C20285 * C646 + C20280 * C654 +
            C20286 * C776 + C20281 * C782 + C20287 * C3022 + C20282 * C3026) *
               C51042) *
              C51126 * C50973 * C296 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
            C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
               C298 +
           (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
            C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
               C51254 -
           (C20287 * C3018 + C20282 * C3023 + C20286 * C771 + C20281 * C777 +
            C20285 * C640 + C20280 * C647 + C20284 * C302 + C20279 * C310) *
               C299 -
           (C20287 * C3024 + C20282 * C3027 + C20286 * C778 + C20281 * C783 +
            C20285 * C648 + C20280 * C655 + C20284 * C311 + C20279 * C320) *
               C51042) *
              C51126 * C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
           C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
              C765 +
          (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
           C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
              C760 -
          (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
           C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
              C766 -
          (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
           C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
              C761 +
          (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
           C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
              C767 +
          (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
           C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
              C762 -
          (C20287 * C20648 + C20282 * C20649 + C20286 * C3144 + C20281 * C3146 +
           C20285 * C3016 + C20280 * C3019 + C20284 * C769 + C20279 * C773) *
              C768 -
          (C20287 * C20650 + C20282 * C20651 + C20286 * C3147 + C20281 * C3150 +
           C20285 * C3020 + C20280 * C3025 + C20284 * C774 + C20279 * C781) *
              C763) *
         C51126 * C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                 C51026) *
                C51126 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51026) * C51126 *
                C17451 +
            C17514 * C17452) *
               C295 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51026 + (C17493 + C17492) * C118) * C51126 *
                C17451 +
            ((C17491 + C17490) * C51026 + (C17489 + C17488) * C118) * C51126 *
                C17450) *
               C296 +
           (C17514 * C17450 +
            ((C17499 + C17498) * C118 + (C17497 + C17496) * C51026) * C51126 *
                C17451 +
            ((C17500 + C17501) * C118 + (C17502 + C17503) * C51026) * C51126 *
                C17452) *
               C297) *
              C51256 +
          ((((C17878 + C17879) * C118 + (C17880 + C17881) * C51026) * C51126 *
                C17450 +
            ((C17882 + C17883) * C118 + (C17884 + C17885) * C51026) * C51126 *
                C17451 +
            ((C17886 + C17887) * C118 + (C17888 + C17889) * C51026) * C51126 *
                C17452) *
               C296 -
           (C17895 * C17452 +
            ((C17881 + C17880) * C51026 + (C17879 + C17878) * C118) * C51126 *
                C17451 +
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C51026 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C118) *
                C51126 * C17450) *
               C295 -
           (((C17454 * C1645 + C51162 * C1646 + C17453 * C485 + C17448 * C493) *
                 C51026 +
             (C17454 * C1643 + C51162 * C1644 + C17453 * C475 + C17448 * C484) *
                 C118) *
                C51126 * C17452 +
            ((C17889 + C17888) * C51026 + (C17887 + C17886) * C118) * C51126 *
                C17451 +
            C17895 * C17450) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C300 + C51162 * C306) *
                C635 +
            (C17453 * C127 + C17448 * C140 + C17454 * C307 + C51162 * C318) *
                C630 -
            (C17454 * C638 + C51162 * C643 + C17453 * C300 + C17448 * C306) *
                C636 -
            (C17454 * C644 + C51162 * C653 + C17453 * C307 + C17448 * C318) *
                C631 +
            (C17453 * C638 + C17448 * C643 + C17454 * C769 + C51162 * C773) *
                C637 +
            (C17453 * C644 + C17448 * C653 + C17454 * C774 + C51162 * C781) *
                C632) *
               C51126 * C17450 +
           ((C17488 + C17489) * C635 + (C17490 + C17491) * C630 -
            (C17688 + C17689) * C636 - (C17690 + C17691) * C631 +
            (C18058 + C18059) * C637 + (C18060 + C18061) * C632) *
               C51126 * C17451 +
           (C17504 * C635 + C17505 * C630 - C17701 * C636 - C17702 * C631 +
            (C18062 + C18063) * C637 + (C18064 + C18065) * C632) *
               C51126 * C17452) *
              C50992 * C51256 +
          (((C17453 * C883 + C17448 * C891 + C17454 * C884 + C51162 * C893) *
                C636 -
            ((C17454 * C892 + C51162 * C907 + C17453 * C486 + C17448 * C494) *
                 C630 +
             (C17454 * C883 + C51162 * C891 + C17453 * C476 + C17448 * C487) *
                 C635) +
            (C17453 * C892 + C17448 * C907 + C17454 * C894 + C51162 * C908) *
                C631 -
            (C17454 * C3298 + C51162 * C3302 + C17453 * C884 + C17448 * C893) *
                C637 -
            (C17454 * C3303 + C51162 * C3310 + C17453 * C894 + C17448 * C908) *
                C632) *
               C51126 * C17450 +
           ((C17453 * C885 + C17448 * C895 + C17454 * C886 + C51162 * C897) *
                C636 -
            ((C17881 + C17880) * C630 + (C17879 + C17878) * C635) +
            (C17453 * C896 + C17448 * C909 + C17454 * C898 + C51162 * C910) *
                C631 -
            (C17454 * C3300 + C51162 * C3306 + C17453 * C886 + C17448 * C897) *
                C637 -
            (C17454 * C3307 + C51162 * C3312 + C17453 * C898 + C17448 * C910) *
                C632) *
               C51126 * C17451 +
           ((C17453 * C887 + C17448 * C899 + C17454 * C888 + C51162 * C901) *
                C636 -
            (C17890 * C630 + C17891 * C635) +
            (C17453 * C900 + C17448 * C911 + C17454 * C902 + C51162 * C912) *
                C631 -
            (C17454 * C4244 + C51162 * C4245 + C17453 * C888 + C17448 * C901) *
                C637 -
            (C17454 * C4246 + C51162 * C4247 + C17453 * C902 + C17448 * C912) *
                C632) *
               C51126 * C17452) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
             C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
             C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
                C51026) *
               C51126 * C50973 * C295 -
           ((C20287 * C776 + C20282 * C782 + C20286 * C646 + C20281 * C654 +
             C20285 * C309 + C20280 * C319 + C20284 * C129 + C20279 * C141) *
                C51026 +
            (C20287 * C770 + C20282 * C775 + C20286 * C639 + C20281 * C645 +
             C20285 * C301 + C20280 * C308 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51126 * C50973 * C296 +
           ((C20284 * C121 + C20279 * C130 + C20285 * C302 + C20280 * C310 +
             C20286 * C640 + C20281 * C647 + C20287 * C771 + C20282 * C777) *
                C118 +
            (C20284 * C131 + C20279 * C142 + C20285 * C311 + C20280 * C320 +
             C20286 * C648 + C20281 * C655 + C20287 * C778 + C20282 * C783) *
                C51026) *
               C51126 * C50973 * C297) *
              C51256 +
          (((C20284 * C472 + C20279 * C478 + C20285 * C885 + C20280 * C895 +
             C20286 * C886 + C20281 * C897 + C20287 * C3300 + C20282 * C3306) *
                C118 +
            (C20284 * C479 + C20279 * C490 + C20285 * C896 + C20280 * C909 +
             C20286 * C898 + C20281 * C910 + C20287 * C3307 + C20282 * C3312) *
                C51026) *
               C51126 * C50973 * C296 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C51026 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C118) *
               C51126 * C50973 * C295 -
           ((C20287 * C4246 + C20282 * C4247 + C20286 * C902 + C20281 * C912 +
             C20285 * C900 + C20280 * C911 + C20284 * C481 + C20279 * C491) *
                C51026 +
            (C20287 * C4244 + C20282 * C4245 + C20286 * C888 + C20281 * C901 +
             C20285 * C887 + C20280 * C899 + C20284 * C473 + C20279 * C480) *
                C118) *
               C51126 * C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C300 + C20280 * C306 +
            C20286 * C638 + C20281 * C643 + C20287 * C769 + C20282 * C773) *
               C635 +
           (C20284 * C127 + C20279 * C140 + C20285 * C307 + C20280 * C318 +
            C20286 * C644 + C20281 * C653 + C20287 * C774 + C20282 * C781) *
               C630 -
           (C20287 * C3016 + C20282 * C3019 + C20286 * C769 + C20281 * C773 +
            C20285 * C638 + C20280 * C643 + C20284 * C300 + C20279 * C306) *
               C636 -
           (C20287 * C3020 + C20282 * C3025 + C20286 * C774 + C20281 * C781 +
            C20285 * C644 + C20280 * C653 + C20284 * C307 + C20279 * C318) *
               C631 +
           (C20284 * C638 + C20279 * C643 + C20285 * C769 + C20280 * C773 +
            C20286 * C3016 + C20281 * C3019 + C20287 * C3144 + C20282 * C3146) *
               C637 +
           (C20284 * C644 + C20279 * C653 + C20285 * C774 + C20280 * C781 +
            C20286 * C3020 + C20281 * C3025 + C20287 * C3147 + C20282 * C3150) *
               C632) *
              C51126 * C50973 * C50992 * C51256 +
          ((C20284 * C883 + C20279 * C891 + C20285 * C884 + C20280 * C893 +
            C20286 * C3298 + C20281 * C3302 + C20287 * C3299 + C20282 * C3304) *
               C636 -
           ((C20287 * C3303 + C20282 * C3310 + C20286 * C894 + C20281 * C908 +
             C20285 * C892 + C20280 * C907 + C20284 * C486 + C20279 * C494) *
                C630 +
            (C20287 * C3298 + C20282 * C3302 + C20286 * C884 + C20281 * C893 +
             C20285 * C883 + C20280 * C891 + C20284 * C476 + C20279 * C487) *
                C635) +
           (C20284 * C892 + C20279 * C907 + C20285 * C894 + C20280 * C908 +
            C20286 * C3303 + C20281 * C3310 + C20287 * C3305 + C20282 * C3311) *
               C631 -
           (C20287 * C20750 + C20282 * C20751 + C20286 * C3299 +
            C20281 * C3304 + C20285 * C3298 + C20280 * C3302 + C20284 * C884 +
            C20279 * C893) *
               C637 -
           (C20287 * C20752 + C20282 * C20753 + C20286 * C3305 +
            C20281 * C3311 + C20285 * C3303 + C20280 * C3310 + C20284 * C894 +
            C20279 * C908) *
               C632) *
              C51126 * C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C1363 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C1358 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C1364 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C34007 +
            ((C14226 + C14227) * C1363 + (C14228 + C14229) * C1358 -
             (C14785 + C14786) * C1364 - (C14787 + C14788) * C51042) *
                C51190) *
               C51242 +
           (((C8292 + C8293) * C1363 + (C8294 + C8295) * C1358 -
             (C8492 + C8493) * C1364 - (C8494 + C8495) * C51042) *
                C34007 +
            C16043 * C51190) *
               C50978) *
              C51300 +
          ((((C8493 + C8492) * C1364 -
             ((C8295 + C8294) * C1358 + (C8293 + C8292) * C1363) +
             (C8495 + C8494) * C51042) *
                C34007 +
            C16044 * C51190) *
               C51242 +
           (((C8498 + C8497) * C1364 -
             ((C8299 + C8298) * C1358 + (C8297 + C8296) * C1363) +
             (C8500 + C8499) * C51042) *
                C34007 +
            ((C10042 + C10043) * C1364 - (C8694 * C1358 + C8695 * C1363) +
             (C10044 + C10045) * C51042) *
                C51190) *
               C50978) *
              C51285 +
          ((C9680 * C34007 +
            (C14224 * C1363 + C14225 * C1358 - (C10043 + C10042) * C1364 -
             (C10045 + C10044) * C51042) *
                C51190) *
               C51242 +
           (((C8303 + C8302) * C1363 + (C8301 + C8300) * C1358 -
             (C8502 + C8501) * C1364 - (C8504 + C8503) * C51042) *
                C34007 +
            ((C8690 + C8691) * C1363 + (C8692 + C8693) * C1358 -
             (C8258 * C890 + C51162 * C905 + C8257 * C889 + C51270 * C903) *
                 C1364 -
             (C8258 * C906 + C51162 * C914 + C8257 * C904 + C51270 * C913) *
                 C51042) *
                C51190) *
               C50978) *
              C1362) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C1492 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51301 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C1493 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51288 +
             (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                 C1494 +
             (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                 C1489) *
                C34007 +
            ((C14226 + C14227) * C1492 + (C14228 + C14229) * C51301 -
             (C14785 + C14786) * C1493 - (C14787 + C14788) * C51288 +
             (C14789 + C14790) * C1494 + (C14791 + C14792) * C1489) *
                C51190) *
               C51242 +
           (((C8292 + C8293) * C1492 + (C8294 + C8295) * C51301 -
             (C8492 + C8493) * C1493 - (C8494 + C8495) * C51288 +
             (C8862 + C8863) * C1494 + (C8864 + C8865) * C1489) *
                C34007 +
            (C14220 * C1492 + C14221 * C51301 - C16029 * C1493 -
             C16030 * C51288 + (C14441 + C14442) * C1494 +
             (C14443 + C14444) * C1489) *
                C51190) *
               C50978) *
              C1490 +
          ((((C8493 + C8492) * C1493 -
             ((C8295 + C8294) * C51301 + (C8293 + C8292) * C1492) +
             (C8495 + C8494) * C51288 - (C8863 + C8862) * C1494 -
             (C8865 + C8864) * C1489) *
                C34007 +
            (C16031 * C1493 - (C14222 * C51301 + C14223 * C1492) +
             C16034 * C51288 - (C14442 + C14441) * C1494 -
             (C14444 + C14443) * C1489) *
                C51190) *
               C51242 +
           (((C8498 + C8497) * C1493 -
             ((C8299 + C8298) * C51301 + (C8297 + C8296) * C1492) +
             (C8500 + C8499) * C51288 - (C8867 + C8866) * C1494 -
             (C8869 + C8868) * C1489) *
                C34007 +
            ((C10042 + C10043) * C1493 - (C8694 * C51301 + C8695 * C1492) +
             (C10044 + C10045) * C51288 -
             (C8258 * C4244 + C51162 * C4245 + C8257 * C888 + C51270 * C901) *
                 C1494 -
             (C8258 * C4246 + C51162 * C4247 + C8257 * C902 + C51270 * C912) *
                 C1489) *
                C51190) *
               C50978) *
              C50997) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C1363 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C1358 -
              (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                  C1364 -
              (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                  C51042) *
                 C34007 +
             ((C14226 + C14227) * C1363 + (C14228 + C14229) * C1358 -
              (C14785 + C14786) * C1364 - (C14787 + C14788) * C51042) *
                 C51190) *
                C51242 +
            (((C8292 + C8293) * C1363 + (C8294 + C8295) * C1358 -
              (C8492 + C8493) * C1364 - (C8494 + C8495) * C51042) *
                 C34007 +
             C16043 * C51190) *
                C50978) *
               C1490 +
           ((((C8493 + C8492) * C1364 -
              ((C8295 + C8294) * C1358 + (C8293 + C8292) * C1363) +
              (C8495 + C8494) * C51042) *
                 C34007 +
             C16044 * C51190) *
                C51242 +
            (((C8498 + C8497) * C1364 -
              ((C8299 + C8298) * C1358 + (C8297 + C8296) * C1363) +
              (C8500 + C8499) * C51042) *
                 C34007 +
             ((C10042 + C10043) * C1364 - (C8694 * C1358 + C8695 * C1363) +
              (C10044 + C10045) * C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C51256 +
          (((((C14786 + C14785) * C1364 -
              ((C14229 + C14228) * C1358 + (C14227 + C14226) * C1363) +
              (C14788 + C14787) * C51042) *
                 C34007 +
             ((C15231 + C15232) * C1364 -
              ((C15011 + C15012) * C1358 + (C15013 + C15014) * C1363) +
              (C15233 + C15234) * C51042) *
                 C51190) *
                C51242 +
            (C16044 * C34007 +
             ((C15235 + C15236) * C1364 - (C14989 * C1358 + C14990 * C1363) +
              (C15237 + C15238) * C51042) *
                 C51190) *
                C50978) *
               C1490 +
           ((C16043 * C34007 +
             (C14987 * C1363 + C14988 * C1358 - (C15236 + C15235) * C1364 -
              (C15238 + C15237) * C51042) *
                 C51190) *
                C51242 +
            ((C14224 * C1363 + C14225 * C1358 - (C10043 + C10042) * C1364 -
              (C10045 + C10044) * C51042) *
                 C34007 +
             ((C9280 + C9281) * C1363 + (C9282 + C9283) * C1358 -
              (C8258 * C3462 + C51162 * C3468 + C8257 * C1160 +
               C51270 * C1166) *
                  C1364 -
              (C8258 * C3467 + C51162 * C3471 + C8257 * C1167 +
               C51270 * C1172) *
                  C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C1363 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C1358 -
              (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                  C1364 -
              (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                  C51042) *
                 C34007 +
             ((C14226 + C14227) * C1363 + (C14228 + C14229) * C1358 -
              (C14785 + C14786) * C1364 - (C14787 + C14788) * C51042) *
                 C51190) *
                C51242 +
            (((C8292 + C8293) * C1363 + (C8294 + C8295) * C1358 -
              (C8492 + C8493) * C1364 - (C8494 + C8495) * C51042) *
                 C34007 +
             C16043 * C51190) *
                C50978) *
               C51247 +
           ((((C8493 + C8492) * C1364 -
              ((C8295 + C8294) * C1358 + (C8293 + C8292) * C1363) +
              (C8495 + C8494) * C51042) *
                 C34007 +
             C16044 * C51190) *
                C51242 +
            (((C8498 + C8497) * C1364 -
              ((C8299 + C8298) * C1358 + (C8297 + C8296) * C1363) +
              (C8500 + C8499) * C51042) *
                 C34007 +
             ((C10042 + C10043) * C1364 - (C8694 * C1358 + C8695 * C1363) +
              (C10044 + C10045) * C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C1775 +
          (((((C14786 + C14785) * C1364 -
              ((C14229 + C14228) * C1358 + (C14227 + C14226) * C1363) +
              (C14788 + C14787) * C51042) *
                 C34007 +
             ((C15231 + C15232) * C1364 -
              ((C15011 + C15012) * C1358 + (C15013 + C15014) * C1363) +
              (C15233 + C15234) * C51042) *
                 C51190) *
                C51242 +
            (C16044 * C34007 +
             ((C15235 + C15236) * C1364 - (C14989 * C1358 + C14990 * C1363) +
              (C15237 + C15238) * C51042) *
                 C51190) *
                C50978) *
               C51247 +
           ((C16043 * C34007 +
             (C14987 * C1363 + C14988 * C1358 - (C15236 + C15235) * C1364 -
              (C15238 + C15237) * C51042) *
                 C51190) *
                C51242 +
            ((C14224 * C1363 + C14225 * C1358 - (C10043 + C10042) * C1364 -
              (C10045 + C10044) * C51042) *
                 C34007 +
             ((C9280 + C9281) * C1363 + (C9282 + C9283) * C1358 -
              (C8258 * C3462 + C51162 * C3468 + C8257 * C1160 +
               C51270 * C1166) *
                  C1364 -
              (C8258 * C3467 + C51162 * C3471 + C8257 * C1167 +
               C51270 * C1172) *
                  C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C1492 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51301 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C1493 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51288 +
             (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                 C1494 +
             (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                 C1489) *
                C34007 +
            ((C14226 + C14227) * C1492 + (C14228 + C14229) * C51301 -
             (C14785 + C14786) * C1493 - (C14787 + C14788) * C51288 +
             (C14789 + C14790) * C1494 + (C14791 + C14792) * C1489) *
                C51190) *
               C51242 +
           (((C8292 + C8293) * C1492 + (C8294 + C8295) * C51301 -
             (C8492 + C8493) * C1493 - (C8494 + C8495) * C51288 +
             (C8862 + C8863) * C1494 + (C8864 + C8865) * C1489) *
                C34007 +
            (C14220 * C1492 + C14221 * C51301 - C16029 * C1493 -
             C16030 * C51288 + (C14441 + C14442) * C1494 +
             (C14443 + C14444) * C1489) *
                C51190) *
               C50978) *
              C50992 * C1775 +
          ((((C14786 + C14785) * C1493 -
             ((C14229 + C14228) * C51301 + (C14227 + C14226) * C1492) +
             (C14788 + C14787) * C51288 - (C14790 + C14789) * C1494 -
             (C14792 + C14791) * C1489) *
                C34007 +
            ((C15231 + C15232) * C1493 -
             ((C15011 + C15012) * C51301 + (C15013 + C15014) * C1492) +
             (C15233 + C15234) * C51288 -
             (C8258 * C3636 + C51162 * C3638 + C8257 * C3460 + C51270 * C3463) *
                 C1494 -
             (C8258 * C3639 + C51162 * C3642 + C8257 * C3464 + C51270 * C3469) *
                 C1489) *
                C51190) *
               C51242 +
           ((C16031 * C1493 - (C14222 * C51301 + C14223 * C1492) +
             C16034 * C51288 - (C14442 + C14441) * C1494 -
             (C14444 + C14443) * C1489) *
                C34007 +
            ((C15235 + C15236) * C1493 - (C14989 * C51301 + C14990 * C1492) +
             (C15237 + C15238) * C51288 -
             (C8258 * C3637 + C51162 * C3640 + C8257 * C3461 + C51270 * C3465) *
                 C1494 -
             (C8258 * C3641 + C51162 * C3643 + C8257 * C3466 + C51270 * C3470) *
                 C1489) *
                C51190) *
               C50978) *
              C50992 * C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C1363 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C1358 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C1364 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C34007 +
            ((C14226 + C14227) * C1363 + (C14228 + C14229) * C1358 -
             (C14785 + C14786) * C1364 - (C14787 + C14788) * C51042) *
                C51190) *
               C51242 +
           (((C8292 + C8293) * C1363 + (C8294 + C8295) * C1358 -
             (C8492 + C8493) * C1364 - (C8494 + C8495) * C51042) *
                C34007 +
            C16043 * C51190) *
               C50978) *
              C50992 * C51302 +
          ((((C14786 + C14785) * C1364 -
             ((C14229 + C14228) * C1358 + (C14227 + C14226) * C1363) +
             (C14788 + C14787) * C51042) *
                C34007 +
            ((C15231 + C15232) * C1364 -
             ((C15011 + C15012) * C1358 + (C15013 + C15014) * C1363) +
             (C15233 + C15234) * C51042) *
                C51190) *
               C51242 +
           (C16044 * C34007 +
            ((C15235 + C15236) * C1364 - (C14989 * C1358 + C14990 * C1363) +
             (C15237 + C15238) * C51042) *
                C51190) *
               C50978) *
              C50992 * C51291 +
          ((((C15014 + C15013) * C1363 + (C15012 + C15011) * C1358 -
             (C15232 + C15231) * C1364 - (C15234 + C15233) * C51042) *
                C34007 +
            ((C15377 + C15378) * C1363 + (C15379 + C15380) * C1358 -
             (C8258 * C3744 + C51162 * C3752 + C8257 * C3745 + C51270 * C3753) *
                 C1364 -
             (C8258 * C3750 + C51162 * C3756 + C8257 * C3751 + C51270 * C3757) *
                 C51042) *
                C51190) *
               C51242 +
           ((C14987 * C1363 + C14988 * C1358 - (C15236 + C15235) * C1364 -
             (C15238 + C15237) * C51042) *
                C34007 +
            ((C15015 + C15016) * C1363 + (C15017 + C15018) * C1358 -
             (C8258 * C3742 + C51162 * C3748 + C8257 * C3743 + C51270 * C3749) *
                 C1364 -
             (C8258 * C3746 + C51162 * C3754 + C8257 * C3747 + C51270 * C3755) *
                 C51042) *
                C51190) *
               C50978) *
              C50992 * C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C635 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C630 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C636 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C631 +
             (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                 C637 +
             (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                 C632) *
                C34007 +
            ((C14226 + C14227) * C635 + (C14228 + C14229) * C630 -
             (C14785 + C14786) * C636 - (C14787 + C14788) * C631 +
             (C14789 + C14790) * C637 + (C14791 + C14792) * C632) *
                C51190) *
               C51242 +
           (((C8292 + C8293) * C635 + (C8294 + C8295) * C630 -
             (C8492 + C8493) * C636 - (C8494 + C8495) * C631 +
             (C8862 + C8863) * C637 + (C8864 + C8865) * C632) *
                C34007 +
            (C14220 * C635 + C14221 * C630 - C16029 * C636 - C16030 * C631 +
             (C14441 + C14442) * C637 + (C14443 + C14444) * C632) *
                C51190) *
               C50978) *
              C51247 +
          ((((C8493 + C8492) * C636 -
             ((C8295 + C8294) * C630 + (C8293 + C8292) * C635) +
             (C8495 + C8494) * C631 - (C8863 + C8862) * C637 -
             (C8865 + C8864) * C632) *
                C34007 +
            (C16031 * C636 - (C14222 * C630 + C14223 * C635) + C16034 * C631 -
             (C14442 + C14441) * C637 - (C14444 + C14443) * C632) *
                C51190) *
               C51242 +
           (((C8498 + C8497) * C636 -
             ((C8299 + C8298) * C630 + (C8297 + C8296) * C635) +
             (C8500 + C8499) * C631 - (C8867 + C8866) * C637 -
             (C8869 + C8868) * C632) *
                C34007 +
            ((C10042 + C10043) * C636 - (C8694 * C630 + C8695 * C635) +
             (C10044 + C10045) * C631 -
             (C8258 * C4244 + C51162 * C4245 + C8257 * C888 + C51270 * C901) *
                 C637 -
             (C8258 * C4246 + C51162 * C4247 + C8257 * C902 + C51270 * C912) *
                 C632) *
                C51190) *
               C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C34007 +
            ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
               C51242 +
           (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C34007 +
            C14236 * C51190) *
               C50978) *
              C112 -
          ((C8698 * C51190 +
            ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C34007) *
               C50978 +
           (C14237 * C51190 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C34007) *
               C51242) *
              C113 +
          ((C8316 * C34007 + C14238 * C51190) * C51242 +
           (((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C34007 +
            ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51190) *
               C50978) *
              C114 -
          ((((C8258 * C1645 + C51162 * C1646 + C8257 * C485 + C51270 * C493) *
                 C51026 +
             (C8258 * C1643 + C51162 * C1644 + C8257 * C475 + C51270 * C484) *
                 C118) *
                C51190 +
            ((C8307 + C8306) * C51026 + (C8305 + C8304) * C118) * C34007) *
               C50978 +
           (((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C51190 +
            C8317 * C34007) *
               C51242) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C118 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C51026) *
                 C34007 +
             ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
                C51242 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C34007 +
             C14236 * C51190) *
                C50978) *
               C51247 -
           ((C8698 * C51190 +
             ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C34007) *
                C50978 +
            (C14237 * C51190 +
             ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C34007) *
                C51242) *
               C50997) *
              C1013 +
          (((C14236 * C34007 + C15019 * C51190) * C51242 +
            (C14238 * C34007 +
             ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51190) *
                C50978) *
               C50997 -
           ((C15020 * C51190 + C14237 * C34007) * C50978 +
            (((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51190 +
             ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C34007) *
                C51242) *
               C51247) *
              C1014 +
          (((((C15014 + C15013) * C118 + (C15012 + C15011) * C51026) * C34007 +
             ((C15377 + C15378) * C118 + (C15379 + C15380) * C51026) * C51190) *
                C51242 +
            (C15019 * C34007 +
             ((C15015 + C15016) * C118 + (C15017 + C15018) * C51026) * C51190) *
                C50978) *
               C51247 -
           ((((C8258 * C7128 + C51162 * C7129 + C8257 * C1250 +
               C51270 * C1257) *
                  C51026 +
              (C8258 * C7126 + C51162 * C7127 + C8257 * C1245 +
               C51270 * C1251) *
                  C118) *
                 C51190 +
             ((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C34007) *
                C50978 +
            (((C15018 + C15017) * C51026 + (C15016 + C15015) * C118) * C51190 +
             C15020 * C34007) *
                C51242) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C765 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C760 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C766 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C761 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C767 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C762 -
            (C8258 * C3016 + C51162 * C3019 + C8257 * C769 + C51270 * C773) *
                C768 -
            (C8258 * C3020 + C51162 * C3025 + C8257 * C774 + C51270 * C781) *
                C763) *
               C34007 +
           ((C14226 + C14227) * C765 + (C14228 + C14229) * C760 -
            (C14785 + C14786) * C766 - (C14787 + C14788) * C761 +
            (C14789 + C14790) * C767 + (C14791 + C14792) * C762 -
            (C8258 * C3299 + C51162 * C3304 + C8257 * C3298 + C51270 * C3302) *
                C768 -
            (C8258 * C3305 + C51162 * C3311 + C8257 * C3303 + C51270 * C3310) *
                C763) *
               C51190) *
              C51242 +
          (((C8292 + C8293) * C765 + (C8294 + C8295) * C760 -
            (C8492 + C8493) * C766 - (C8494 + C8495) * C761 +
            (C8862 + C8863) * C767 + (C8864 + C8865) * C762 -
            (C8258 * C3017 + C51162 * C3021 + C8257 * C770 + C51270 * C775) *
                C768 -
            (C8258 * C3022 + C51162 * C3026 + C8257 * C776 + C51270 * C782) *
                C763) *
               C34007 +
           (C14220 * C765 + C14221 * C760 - C16029 * C766 - C16030 * C761 +
            (C14441 + C14442) * C767 + (C14443 + C14444) * C762 -
            (C8258 * C3301 + C51162 * C3308 + C8257 * C3300 + C51270 * C3306) *
                C768 -
            (C8258 * C3309 + C51162 * C3313 + C8257 * C3307 + C51270 * C3312) *
                C763) *
               C51190) *
              C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C298 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51254 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C299 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C34007 +
            ((C14226 + C14227) * C298 + (C14228 + C14229) * C51254 -
             (C14785 + C14786) * C299 - (C14787 + C14788) * C51042) *
                C51190) *
               C51242 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C51254 -
             (C8492 + C8493) * C299 - (C8494 + C8495) * C51042) *
                C34007 +
            C16509 * C51190) *
               C50978) *
              C295 +
          ((((C8493 + C8492) * C299 -
             ((C8295 + C8294) * C51254 + (C8293 + C8292) * C298) +
             (C8495 + C8494) * C51042) *
                C34007 +
            C16510 * C51190) *
               C51242 +
           (((C8498 + C8497) * C299 -
             ((C8299 + C8298) * C51254 + (C8297 + C8296) * C298) +
             (C8500 + C8499) * C51042) *
                C34007 +
            ((C10042 + C10043) * C299 - (C8694 * C51254 + C8695 * C298) +
             (C10044 + C10045) * C51042) *
                C51190) *
               C50978) *
              C296 +
          ((C8510 * C34007 +
            (C14224 * C298 + C14225 * C51254 - (C10043 + C10042) * C299 -
             (C10045 + C10044) * C51042) *
                C51190) *
               C51242 +
           (((C8303 + C8302) * C298 + (C8301 + C8300) * C51254 -
             (C8502 + C8501) * C299 - (C8504 + C8503) * C51042) *
                C34007 +
            ((C8690 + C8691) * C298 + (C8692 + C8693) * C51254 -
             (C8258 * C890 + C51162 * C905 + C8257 * C889 + C51270 * C903) *
                 C299 -
             (C8258 * C906 + C51162 * C914 + C8257 * C904 + C51270 * C913) *
                 C51042) *
                C51190) *
               C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C298 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51254 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C299 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C34007 +
            ((C14226 + C14227) * C298 + (C14228 + C14229) * C51254 -
             (C14785 + C14786) * C299 - (C14787 + C14788) * C51042) *
                C51190) *
               C51242 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C51254 -
             (C8492 + C8493) * C299 - (C8494 + C8495) * C51042) *
                C34007 +
            C16509 * C51190) *
               C50978) *
              C50992 * C1013 +
          ((((C14786 + C14785) * C299 -
             ((C14229 + C14228) * C51254 + (C14227 + C14226) * C298) +
             (C14788 + C14787) * C51042) *
                C34007 +
            ((C15231 + C15232) * C299 -
             ((C15011 + C15012) * C51254 + (C15013 + C15014) * C298) +
             (C15233 + C15234) * C51042) *
                C51190) *
               C51242 +
           (C16510 * C34007 +
            ((C15235 + C15236) * C299 - (C14989 * C51254 + C14990 * C298) +
             (C15237 + C15238) * C51042) *
                C51190) *
               C50978) *
              C50992 * C1014 +
          ((((C15014 + C15013) * C298 + (C15012 + C15011) * C51254 -
             (C15232 + C15231) * C299 - (C15234 + C15233) * C51042) *
                C34007 +
            ((C15377 + C15378) * C298 + (C15379 + C15380) * C51254 -
             (C8258 * C3744 + C51162 * C3752 + C8257 * C3745 + C51270 * C3753) *
                 C299 -
             (C8258 * C3750 + C51162 * C3756 + C8257 * C3751 + C51270 * C3757) *
                 C51042) *
                C51190) *
               C51242 +
           ((C14987 * C298 + C14988 * C51254 - (C15236 + C15235) * C299 -
             (C15238 + C15237) * C51042) *
                C34007 +
            ((C15015 + C15016) * C298 + (C15017 + C15018) * C51254 -
             (C8258 * C3742 + C51162 * C3748 + C8257 * C3743 + C51270 * C3749) *
                 C299 -
             (C8258 * C3746 + C51162 * C3754 + C8257 * C3747 + C51270 * C3755) *
                 C51042) *
                C51190) *
               C50978) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C635 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C630 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C636 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C631 +
             (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                 C637 +
             (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                 C632) *
                C34007 +
            ((C14226 + C14227) * C635 + (C14228 + C14229) * C630 -
             (C14785 + C14786) * C636 - (C14787 + C14788) * C631 +
             (C14789 + C14790) * C637 + (C14791 + C14792) * C632) *
                C51190) *
               C51242 +
           (((C8292 + C8293) * C635 + (C8294 + C8295) * C630 -
             (C8492 + C8493) * C636 - (C8494 + C8495) * C631 +
             (C8862 + C8863) * C637 + (C8864 + C8865) * C632) *
                C34007 +
            (C14220 * C635 + C14221 * C630 - C16029 * C636 - C16030 * C631 +
             (C14441 + C14442) * C637 + (C14443 + C14444) * C632) *
                C51190) *
               C50978) *
              C50992 * C51256 +
          ((((C14786 + C14785) * C636 -
             ((C14229 + C14228) * C630 + (C14227 + C14226) * C635) +
             (C14788 + C14787) * C631 - (C14790 + C14789) * C637 -
             (C14792 + C14791) * C632) *
                C34007 +
            ((C15231 + C15232) * C636 -
             ((C15011 + C15012) * C630 + (C15013 + C15014) * C635) +
             (C15233 + C15234) * C631 -
             (C8258 * C3636 + C51162 * C3638 + C8257 * C3460 + C51270 * C3463) *
                 C637 -
             (C8258 * C3639 + C51162 * C3642 + C8257 * C3464 + C51270 * C3469) *
                 C632) *
                C51190) *
               C51242 +
           ((C16031 * C636 - (C14222 * C630 + C14223 * C635) + C16034 * C631 -
             (C14442 + C14441) * C637 - (C14444 + C14443) * C632) *
                C34007 +
            ((C15235 + C15236) * C636 - (C14989 * C630 + C14990 * C635) +
             (C15237 + C15238) * C631 -
             (C8258 * C3637 + C51162 * C3640 + C8257 * C3461 + C51270 * C3465) *
                 C637 -
             (C8258 * C3641 + C51162 * C3643 + C8257 * C3466 + C51270 * C3470) *
                 C632) *
                C51190) *
               C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C118 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C51026) *
                 C34007 +
             ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
                C51242 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C34007 +
             C14236 * C51190) *
                C50978) *
               C295 -
           ((C8698 * C51190 +
             ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C34007) *
                C50978 +
            (C14237 * C51190 +
             ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C34007) *
                C51242) *
               C296 +
           ((C8316 * C34007 + C14238 * C51190) * C51242 +
            (((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C34007 +
             ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51190) *
                C50978) *
               C297) *
              C51256 +
          (((C14236 * C34007 + C15019 * C51190) * C51242 +
            (C14238 * C34007 +
             ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51190) *
                C50978) *
               C296 -
           ((C15020 * C51190 + C14237 * C34007) * C50978 +
            (((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51190 +
             ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C34007) *
                C51242) *
               C295 -
           ((((C8258 * C1169 + C51162 * C1173 + C8257 * C1028 +
               C51270 * C1034) *
                  C51026 +
              (C8258 * C1161 + C51162 * C1168 + C8257 * C1019 +
               C51270 * C1027) *
                  C118) *
                 C51190 +
             ((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C34007) *
                C50978 +
            (((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51190 +
             C8698 * C34007) *
                C51242) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C34007 +
            ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
               C51242 +
           (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C34007 +
            C14236 * C51190) *
               C50978) *
              C50992 * C1240 -
          ((C15020 * C51190 + C14237 * C34007) * C50978 +
           (((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51190 +
            ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C34007) *
               C51242) *
              C50992 * C1241 +
          ((((C15014 + C15013) * C118 + (C15012 + C15011) * C51026) * C34007 +
            ((C15377 + C15378) * C118 + (C15379 + C15380) * C51026) * C51190) *
               C51242 +
           (C15019 * C34007 +
            ((C15015 + C15016) * C118 + (C15017 + C15018) * C51026) * C51190) *
               C50978) *
              C50992 * C1242 -
          ((((C8258 * C6468 + C51162 * C6470 + C8257 * C6292 + C51270 * C6296) *
                 C51026 +
             (C8258 * C6464 + C51162 * C6467 + C8257 * C6287 + C51270 * C6291) *
                 C118) *
                C51190 +
            ((C15018 + C15017) * C51026 + (C15016 + C15015) * C118) * C34007) *
               C50978 +
           (((C8258 * C6466 + C51162 * C6469 + C8257 * C6290 + C51270 * C6295) *
                 C51026 +
             (C8258 * C6463 + C51162 * C6465 + C8257 * C6286 + C51270 * C6289) *
                 C118) *
                C51190 +
            ((C15380 + C15379) * C51026 + (C15378 + C15377) * C118) * C34007) *
               C51242) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C118 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C51026) *
                 C34007 +
             ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
                C51242 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C34007 +
             C14236 * C51190) *
                C50978) *
               C51300 -
           ((C8698 * C51190 +
             ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C34007) *
                C50978 +
            (C14237 * C51190 +
             ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C34007) *
                C51242) *
               C51285 +
           ((C8316 * C34007 + C14238 * C51190) * C51242 +
            (((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C34007 +
             ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51190) *
                C50978) *
               C1362) *
              C1775 +
          (((C14236 * C34007 + C15019 * C51190) * C51242 +
            (C14238 * C34007 +
             ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51190) *
                C50978) *
               C51285 -
           ((C15020 * C51190 + C14237 * C34007) * C50978 +
            (((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51190 +
             ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C34007) *
                C51242) *
               C51300 -
           ((((C8258 * C1169 + C51162 * C1173 + C8257 * C1028 +
               C51270 * C1034) *
                  C51026 +
              (C8258 * C1161 + C51162 * C1168 + C8257 * C1019 +
               C51270 * C1027) *
                  C118) *
                 C51190 +
             ((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C34007) *
                C50978 +
            (((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51190 +
             C8698 * C34007) *
                C51242) *
               C1362) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C298 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C51254 -
              (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                  C299 -
              (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                  C51042) *
                 C34007 +
             ((C14226 + C14227) * C298 + (C14228 + C14229) * C51254 -
              (C14785 + C14786) * C299 - (C14787 + C14788) * C51042) *
                 C51190) *
                C51242 +
            (((C8292 + C8293) * C298 + (C8294 + C8295) * C51254 -
              (C8492 + C8493) * C299 - (C8494 + C8495) * C51042) *
                 C34007 +
             C16509 * C51190) *
                C50978) *
               C1490 +
           ((((C8493 + C8492) * C299 -
              ((C8295 + C8294) * C51254 + (C8293 + C8292) * C298) +
              (C8495 + C8494) * C51042) *
                 C34007 +
             C16510 * C51190) *
                C51242 +
            (((C8498 + C8497) * C299 -
              ((C8299 + C8298) * C51254 + (C8297 + C8296) * C298) +
              (C8500 + C8499) * C51042) *
                 C34007 +
             ((C10042 + C10043) * C299 - (C8694 * C51254 + C8695 * C298) +
              (C10044 + C10045) * C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C1775 +
          (((((C14786 + C14785) * C299 -
              ((C14229 + C14228) * C51254 + (C14227 + C14226) * C298) +
              (C14788 + C14787) * C51042) *
                 C34007 +
             ((C15231 + C15232) * C299 -
              ((C15011 + C15012) * C51254 + (C15013 + C15014) * C298) +
              (C15233 + C15234) * C51042) *
                 C51190) *
                C51242 +
            (C16510 * C34007 +
             ((C15235 + C15236) * C299 - (C14989 * C51254 + C14990 * C298) +
              (C15237 + C15238) * C51042) *
                 C51190) *
                C50978) *
               C1490 +
           ((C16509 * C34007 +
             (C14987 * C298 + C14988 * C51254 - (C15236 + C15235) * C299 -
              (C15238 + C15237) * C51042) *
                 C51190) *
                C51242 +
            ((C14224 * C298 + C14225 * C51254 - (C10043 + C10042) * C299 -
              (C10045 + C10044) * C51042) *
                 C34007 +
             ((C9280 + C9281) * C298 + (C9282 + C9283) * C51254 -
              (C8258 * C3462 + C51162 * C3468 + C8257 * C1160 +
               C51270 * C1166) *
                  C299 -
              (C8258 * C3467 + C51162 * C3471 + C8257 * C1167 +
               C51270 * C1172) *
                  C51042) *
                 C51190) *
                C50978) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C118 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C51026) *
                 C34007 +
             ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
                C51242 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C34007 +
             C14236 * C51190) *
                C50978) *
               C1490 -
           ((C8698 * C51190 +
             ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C34007) *
                C50978 +
            (C14237 * C51190 +
             ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C34007) *
                C51242) *
               C50997) *
              C51302 +
          (((C14236 * C34007 + C15019 * C51190) * C51242 +
            (C14238 * C34007 +
             ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51190) *
                C50978) *
               C50997 -
           ((C15020 * C51190 + C14237 * C34007) * C50978 +
            (((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51190 +
             ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C34007) *
                C51242) *
               C1490) *
              C51291 +
          (((((C15014 + C15013) * C118 + (C15012 + C15011) * C51026) * C34007 +
             ((C15377 + C15378) * C118 + (C15379 + C15380) * C51026) * C51190) *
                C51242 +
            (C15019 * C34007 +
             ((C15015 + C15016) * C118 + (C15017 + C15018) * C51026) * C51190) *
                C50978) *
               C1490 -
           ((((C8258 * C7128 + C51162 * C7129 + C8257 * C1250 +
               C51270 * C1257) *
                  C51026 +
              (C8258 * C7126 + C51162 * C7127 + C8257 * C1245 +
               C51270 * C1251) *
                  C118) *
                 C51190 +
             ((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C34007) *
                C50978 +
            (((C15018 + C15017) * C51026 + (C15016 + C15015) * C118) * C51190 +
             C15020 * C34007) *
                C51242) *
               C50997) *
              C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C34007 +
            ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
               C51242 +
           (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C34007 +
            C14236 * C51190) *
               C50978) *
              C112 -
          ((C8698 * C51190 +
            ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C34007) *
               C50978 +
           (C14237 * C51190 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C34007) *
               C51242) *
              C113 +
          ((C8316 * C34007 + C14238 * C51190) * C51242 +
           (((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C34007 +
            ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51190) *
               C50978) *
              C114 -
          ((((C8258 * C1645 + C51162 * C1646 + C8257 * C485 + C51270 * C493) *
                 C51026 +
             (C8258 * C1643 + C51162 * C1644 + C8257 * C475 + C51270 * C484) *
                 C118) *
                C51190 +
            ((C8307 + C8306) * C51026 + (C8305 + C8304) * C118) * C34007) *
               C50978 +
           (((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C51190 +
            C8317 * C34007) *
               C51242) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C635 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C630 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C636 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C631 +
             (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                 C637 +
             (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                 C632) *
                C34007 +
            ((C14226 + C14227) * C635 + (C14228 + C14229) * C630 -
             (C14785 + C14786) * C636 - (C14787 + C14788) * C631 +
             (C14789 + C14790) * C637 + (C14791 + C14792) * C632) *
                C51190) *
               C51242 +
           (((C8292 + C8293) * C635 + (C8294 + C8295) * C630 -
             (C8492 + C8493) * C636 - (C8494 + C8495) * C631 +
             (C8862 + C8863) * C637 + (C8864 + C8865) * C632) *
                C34007 +
            (C14220 * C635 + C14221 * C630 - C16029 * C636 - C16030 * C631 +
             (C14441 + C14442) * C637 + (C14443 + C14444) * C632) *
                C51190) *
               C50978) *
              C51247 +
          ((((C8493 + C8492) * C636 -
             ((C8295 + C8294) * C630 + (C8293 + C8292) * C635) +
             (C8495 + C8494) * C631 - (C8863 + C8862) * C637 -
             (C8865 + C8864) * C632) *
                C34007 +
            (C16031 * C636 - (C14222 * C630 + C14223 * C635) + C16034 * C631 -
             (C14442 + C14441) * C637 - (C14444 + C14443) * C632) *
                C51190) *
               C51242 +
           (((C8498 + C8497) * C636 -
             ((C8299 + C8298) * C630 + (C8297 + C8296) * C635) +
             (C8500 + C8499) * C631 - (C8867 + C8866) * C637 -
             (C8869 + C8868) * C632) *
                C34007 +
            ((C10042 + C10043) * C636 - (C8694 * C630 + C8695 * C635) +
             (C10044 + C10045) * C631 -
             (C8258 * C4244 + C51162 * C4245 + C8257 * C888 + C51270 * C901) *
                 C637 -
             (C8258 * C4246 + C51162 * C4247 + C8257 * C902 + C51270 * C912) *
                 C632) *
                C51190) *
               C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C298 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51254 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C299 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C34007 +
            ((C14226 + C14227) * C298 + (C14228 + C14229) * C51254 -
             (C14785 + C14786) * C299 - (C14787 + C14788) * C51042) *
                C51190) *
               C51242 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C51254 -
             (C8492 + C8493) * C299 - (C8494 + C8495) * C51042) *
                C34007 +
            C16509 * C51190) *
               C50978) *
              C295 +
          ((((C8493 + C8492) * C299 -
             ((C8295 + C8294) * C51254 + (C8293 + C8292) * C298) +
             (C8495 + C8494) * C51042) *
                C34007 +
            C16510 * C51190) *
               C51242 +
           (((C8498 + C8497) * C299 -
             ((C8299 + C8298) * C51254 + (C8297 + C8296) * C298) +
             (C8500 + C8499) * C51042) *
                C34007 +
            ((C10042 + C10043) * C299 - (C8694 * C51254 + C8695 * C298) +
             (C10044 + C10045) * C51042) *
                C51190) *
               C50978) *
              C296 +
          ((C8510 * C34007 +
            (C14224 * C298 + C14225 * C51254 - (C10043 + C10042) * C299 -
             (C10045 + C10044) * C51042) *
                C51190) *
               C51242 +
           (((C8303 + C8302) * C298 + (C8301 + C8300) * C51254 -
             (C8502 + C8501) * C299 - (C8504 + C8503) * C51042) *
                C34007 +
            ((C8690 + C8691) * C298 + (C8692 + C8693) * C51254 -
             (C8258 * C890 + C51162 * C905 + C8257 * C889 + C51270 * C903) *
                 C299 -
             (C8258 * C906 + C51162 * C914 + C8257 * C904 + C51270 * C913) *
                 C51042) *
                C51190) *
               C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C765 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C760 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C766 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C761 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C767 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C762 -
            (C8258 * C3016 + C51162 * C3019 + C8257 * C769 + C51270 * C773) *
                C768 -
            (C8258 * C3020 + C51162 * C3025 + C8257 * C774 + C51270 * C781) *
                C763) *
               C34007 +
           ((C14226 + C14227) * C765 + (C14228 + C14229) * C760 -
            (C14785 + C14786) * C766 - (C14787 + C14788) * C761 +
            (C14789 + C14790) * C767 + (C14791 + C14792) * C762 -
            (C8258 * C3299 + C51162 * C3304 + C8257 * C3298 + C51270 * C3302) *
                C768 -
            (C8258 * C3305 + C51162 * C3311 + C8257 * C3303 + C51270 * C3310) *
                C763) *
               C51190) *
              C51242 +
          (((C8292 + C8293) * C765 + (C8294 + C8295) * C760 -
            (C8492 + C8493) * C766 - (C8494 + C8495) * C761 +
            (C8862 + C8863) * C767 + (C8864 + C8865) * C762 -
            (C8258 * C3017 + C51162 * C3021 + C8257 * C770 + C51270 * C775) *
                C768 -
            (C8258 * C3022 + C51162 * C3026 + C8257 * C776 + C51270 * C782) *
                C763) *
               C34007 +
           (C14220 * C765 + C14221 * C760 - C16029 * C766 - C16030 * C761 +
            (C14441 + C14442) * C767 + (C14443 + C14444) * C762 -
            (C8258 * C3301 + C51162 * C3308 + C8257 * C3300 + C51270 * C3306) *
                C768 -
            (C8258 * C3309 + C51162 * C3313 + C8257 * C3307 + C51270 * C3312) *
                C763) *
               C51190) *
              C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                  C118 +
              (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                  C51026) *
                 C34007 +
             ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51190) *
                C51242 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51026) * C34007 +
             C14236 * C51190) *
                C50978) *
               C295 -
           ((C8698 * C51190 +
             ((C8299 + C8298) * C51026 + (C8297 + C8296) * C118) * C34007) *
                C50978 +
            (C14237 * C51190 +
             ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C34007) *
                C51242) *
               C296 +
           ((C8316 * C34007 + C14238 * C51190) * C51242 +
            (((C8303 + C8302) * C118 + (C8301 + C8300) * C51026) * C34007 +
             ((C8690 + C8691) * C118 + (C8692 + C8693) * C51026) * C51190) *
                C50978) *
               C297) *
              C51256 +
          (((C14236 * C34007 + C15019 * C51190) * C51242 +
            (C14238 * C34007 +
             ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C51190) *
                C50978) *
               C296 -
           ((C15020 * C51190 + C14237 * C34007) * C50978 +
            (((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51190 +
             ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C34007) *
                C51242) *
               C295 -
           ((((C8258 * C1169 + C51162 * C1173 + C8257 * C1028 +
               C51270 * C1034) *
                  C51026 +
              (C8258 * C1161 + C51162 * C1168 + C8257 * C1019 +
               C51270 * C1027) *
                  C118) *
                 C51190 +
             ((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C34007) *
                C50978 +
            (((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51190 +
             C8698 * C34007) *
                C51242) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C635 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C630 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C636 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C631 +
             (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                 C637 +
             (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                 C632) *
                C34007 +
            ((C14226 + C14227) * C635 + (C14228 + C14229) * C630 -
             (C14785 + C14786) * C636 - (C14787 + C14788) * C631 +
             (C14789 + C14790) * C637 + (C14791 + C14792) * C632) *
                C51190) *
               C51242 +
           (((C8292 + C8293) * C635 + (C8294 + C8295) * C630 -
             (C8492 + C8493) * C636 - (C8494 + C8495) * C631 +
             (C8862 + C8863) * C637 + (C8864 + C8865) * C632) *
                C34007 +
            (C14220 * C635 + C14221 * C630 - C16029 * C636 - C16030 * C631 +
             (C14441 + C14442) * C637 + (C14443 + C14444) * C632) *
                C51190) *
               C50978) *
              C50992 * C51256 +
          ((((C14786 + C14785) * C636 -
             ((C14229 + C14228) * C630 + (C14227 + C14226) * C635) +
             (C14788 + C14787) * C631 - (C14790 + C14789) * C637 -
             (C14792 + C14791) * C632) *
                C34007 +
            ((C15231 + C15232) * C636 -
             ((C15011 + C15012) * C630 + (C15013 + C15014) * C635) +
             (C15233 + C15234) * C631 -
             (C8258 * C3636 + C51162 * C3638 + C8257 * C3460 + C51270 * C3463) *
                 C637 -
             (C8258 * C3639 + C51162 * C3642 + C8257 * C3464 + C51270 * C3469) *
                 C632) *
                C51190) *
               C51242 +
           ((C16031 * C636 - (C14222 * C630 + C14223 * C635) + C16034 * C631 -
             (C14442 + C14441) * C637 - (C14444 + C14443) * C632) *
                C34007 +
            ((C15235 + C15236) * C636 - (C14989 * C630 + C14990 * C635) +
             (C15237 + C15238) * C631 -
             (C8258 * C3637 + C51162 * C3640 + C8257 * C3461 + C51270 * C3465) *
                 C637 -
             (C8258 * C3641 + C51162 * C3643 + C8257 * C3466 + C51270 * C3470) *
                 C632) *
                C51190) *
               C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C1363 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C1358 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C1364 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51042) *
               C51305 +
           ((C14226 + C14227) * C1363 + (C14228 + C14229) * C1358 -
            (C14785 + C14786) * C1364 - (C14787 + C14788) * C51042) *
               C51306 +
           (C48172 * C1363 + C48173 * C1358 - C48325 * C1364 -
            C48326 * C51042) *
               C44702) *
              C50973 * C51300 +
          (((C8493 + C8492) * C1364 -
            ((C8295 + C8294) * C1358 + (C8293 + C8292) * C1363) +
            (C8495 + C8494) * C51042) *
               C51305 +
           C16044 * C51306 +
           ((C15235 + C15236) * C1364 - (C14989 * C1358 + C14990 * C1363) +
            (C15237 + C15238) * C51042) *
               C44702) *
              C50973 * C51285 +
          (C9680 * C51305 +
           (C14224 * C1363 + C14225 * C1358 - (C10043 + C10042) * C1364 -
            (C10045 + C10044) * C51042) *
               C51306 +
           ((C9280 + C9281) * C1363 + (C9282 + C9283) * C1358 -
            (C8258 * C3462 + C51162 * C3468 + C8257 * C1160 + C51270 * C1166) *
                C1364 -
            (C8258 * C3467 + C51162 * C3471 + C8257 * C1167 + C51270 * C1172) *
                C51042) *
               C44702) *
              C50973 * C1362) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C1492 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51301 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C1493 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51288 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C1494 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C1489) *
               C51305 +
           ((C14226 + C14227) * C1492 + (C14228 + C14229) * C51301 -
            (C14785 + C14786) * C1493 - (C14787 + C14788) * C51288 +
            (C14789 + C14790) * C1494 + (C14791 + C14792) * C1489) *
               C51306 +
           (C48172 * C1492 + C48173 * C51301 - C48325 * C1493 -
            C48326 * C51288 + (C48022 + C48023) * C1494 +
            (C48024 + C48025) * C1489) *
               C44702) *
              C50973 * C1490 +
          (((C8493 + C8492) * C1493 -
            ((C8295 + C8294) * C51301 + (C8293 + C8292) * C1492) +
            (C8495 + C8494) * C51288 - (C8863 + C8862) * C1494 -
            (C8865 + C8864) * C1489) *
               C51305 +
           (C16031 * C1493 - (C14222 * C51301 + C14223 * C1492) +
            C16034 * C51288 - (C14442 + C14441) * C1494 -
            (C14444 + C14443) * C1489) *
               C51306 +
           ((C15235 + C15236) * C1493 - (C14989 * C51301 + C14990 * C1492) +
            (C15237 + C15238) * C51288 -
            (C8258 * C3637 + C51162 * C3640 + C8257 * C3461 + C51270 * C3465) *
                C1494 -
            (C8258 * C3641 + C51162 * C3643 + C8257 * C3466 + C51270 * C3470) *
                C1489) *
               C44702) *
              C50973 * C50997) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C1363 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C1358 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C1364 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C51305 +
            ((C14226 + C14227) * C1363 + (C14228 + C14229) * C1358 -
             (C14785 + C14786) * C1364 - (C14787 + C14788) * C51042) *
                C51306 +
            (C48172 * C1363 + C48173 * C1358 - C48325 * C1364 -
             C48326 * C51042) *
                C44702) *
               C50973 * C1490 +
           (((C8493 + C8492) * C1364 -
             ((C8295 + C8294) * C1358 + (C8293 + C8292) * C1363) +
             (C8495 + C8494) * C51042) *
                C51305 +
            C16044 * C51306 +
            ((C15235 + C15236) * C1364 - (C14989 * C1358 + C14990 * C1363) +
             (C15237 + C15238) * C51042) *
                C44702) *
               C50973 * C50997) *
              C51256 +
          ((((C14786 + C14785) * C1364 -
             ((C14229 + C14228) * C1358 + (C14227 + C14226) * C1363) +
             (C14788 + C14787) * C51042) *
                C51305 +
            ((C15231 + C15232) * C1364 -
             ((C15011 + C15012) * C1358 + (C15013 + C15014) * C1363) +
             (C15233 + C15234) * C51042) *
                C51306 +
            ((C48338 + C48339) * C1364 - (C48442 * C1358 + C48443 * C1363) +
             (C48340 + C48341) * C51042) *
                C44702) *
               C50973 * C1490 +
           (C16043 * C51305 +
            (C14987 * C1363 + C14988 * C1358 - (C15236 + C15235) * C1364 -
             (C15238 + C15237) * C51042) *
                C51306 +
            ((C15015 + C15016) * C1363 + (C15017 + C15018) * C1358 -
             (C8258 * C3742 + C51162 * C3748 + C8257 * C3743 + C51270 * C3749) *
                 C1364 -
             (C8258 * C3746 + C51162 * C3754 + C8257 * C3747 + C51270 * C3755) *
                 C51042) *
                C44702) *
               C50973 * C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C1363 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C1358 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C1364 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C51305 +
            ((C14226 + C14227) * C1363 + (C14228 + C14229) * C1358 -
             (C14785 + C14786) * C1364 - (C14787 + C14788) * C51042) *
                C51306 +
            (C48172 * C1363 + C48173 * C1358 - C48325 * C1364 -
             C48326 * C51042) *
                C44702) *
               C50973 * C51247 +
           (((C8493 + C8492) * C1364 -
             ((C8295 + C8294) * C1358 + (C8293 + C8292) * C1363) +
             (C8495 + C8494) * C51042) *
                C51305 +
            C16044 * C51306 +
            ((C15235 + C15236) * C1364 - (C14989 * C1358 + C14990 * C1363) +
             (C15237 + C15238) * C51042) *
                C44702) *
               C50973 * C50997) *
              C1775 +
          ((((C14786 + C14785) * C1364 -
             ((C14229 + C14228) * C1358 + (C14227 + C14226) * C1363) +
             (C14788 + C14787) * C51042) *
                C51305 +
            ((C15231 + C15232) * C1364 -
             ((C15011 + C15012) * C1358 + (C15013 + C15014) * C1363) +
             (C15233 + C15234) * C51042) *
                C51306 +
            ((C48338 + C48339) * C1364 - (C48442 * C1358 + C48443 * C1363) +
             (C48340 + C48341) * C51042) *
                C44702) *
               C50973 * C51247 +
           (C16043 * C51305 +
            (C14987 * C1363 + C14988 * C1358 - (C15236 + C15235) * C1364 -
             (C15238 + C15237) * C51042) *
                C51306 +
            ((C15015 + C15016) * C1363 + (C15017 + C15018) * C1358 -
             (C8258 * C3742 + C51162 * C3748 + C8257 * C3743 + C51270 * C3749) *
                 C1364 -
             (C8258 * C3746 + C51162 * C3754 + C8257 * C3747 + C51270 * C3755) *
                 C51042) *
                C44702) *
               C50973 * C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C1492 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51301 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C1493 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51288 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C1494 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C1489) *
               C51305 +
           ((C14226 + C14227) * C1492 + (C14228 + C14229) * C51301 -
            (C14785 + C14786) * C1493 - (C14787 + C14788) * C51288 +
            (C14789 + C14790) * C1494 + (C14791 + C14792) * C1489) *
               C51306 +
           (C48172 * C1492 + C48173 * C51301 - C48325 * C1493 -
            C48326 * C51288 + (C48022 + C48023) * C1494 +
            (C48024 + C48025) * C1489) *
               C44702) *
              C50973 * C50992 * C1775 +
          (((C14786 + C14785) * C1493 -
            ((C14229 + C14228) * C51301 + (C14227 + C14226) * C1492) +
            (C14788 + C14787) * C51288 - (C14790 + C14789) * C1494 -
            (C14792 + C14791) * C1489) *
               C51305 +
           ((C15231 + C15232) * C1493 -
            ((C15011 + C15012) * C51301 + (C15013 + C15014) * C1492) +
            (C15233 + C15234) * C51288 - (C48023 + C48022) * C1494 -
            (C48025 + C48024) * C1489) *
               C51306 +
           ((C48338 + C48339) * C1493 - (C48442 * C51301 + C48443 * C1492) +
            (C48340 + C48341) * C51288 -
            (C8258 * C21020 + C51162 * C21022 + C8257 * C3744 +
             C51270 * C3752) *
                C1494 -
            (C8258 * C21021 + C51162 * C21023 + C8257 * C3750 +
             C51270 * C3756) *
                C1489) *
               C44702) *
              C50973 * C50992 * C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C1363 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C1358 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C1364 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51042) *
               C51305 +
           ((C14226 + C14227) * C1363 + (C14228 + C14229) * C1358 -
            (C14785 + C14786) * C1364 - (C14787 + C14788) * C51042) *
               C51306 +
           C49923 * C44702) *
              C50973 * C50992 * C51302 +
          (((C14786 + C14785) * C1364 -
            ((C14229 + C14228) * C1358 + (C14227 + C14226) * C1363) +
            (C14788 + C14787) * C51042) *
               C51305 +
           ((C15231 + C15232) * C1364 -
            ((C15011 + C15012) * C1358 + (C15013 + C15014) * C1363) +
            (C15233 + C15234) * C51042) *
               C51306 +
           ((C48338 + C48339) * C1364 - (C48442 * C1358 + C48443 * C1363) +
            (C48340 + C48341) * C51042) *
               C44702) *
              C50973 * C50992 * C51291 +
          (C49923 * C51305 +
           ((C15377 + C15378) * C1363 + (C15379 + C15380) * C1358 -
            (C48339 + C48338) * C1364 - (C48341 + C48340) * C51042) *
               C51306 +
           ((C48454 + C48455) * C1363 + (C48456 + C48457) * C1358 -
            (C8258 * C23180 + C51162 * C23181 + C8257 * C6463 +
             C51270 * C6465) *
                C1364 -
            (C8258 * C23182 + C51162 * C23183 + C8257 * C6466 +
             C51270 * C6469) *
                C51042) *
               C44702) *
              C50973 * C50992 * C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C635 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C630 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C636 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C631 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C637 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C632) *
               C51305 +
           ((C14226 + C14227) * C635 + (C14228 + C14229) * C630 -
            (C14785 + C14786) * C636 - (C14787 + C14788) * C631 +
            (C14789 + C14790) * C637 + (C14791 + C14792) * C632) *
               C51306 +
           ((C15014 + C15013) * C635 + (C15012 + C15011) * C630 -
            (C15232 + C15231) * C636 - (C15234 + C15233) * C631 +
            (C8257 * C3460 + C51270 * C3463 + C8258 * C3636 + C51162 * C3638) *
                C637 +
            (C8257 * C3464 + C51270 * C3469 + C8258 * C3639 + C51162 * C3642) *
                C632) *
               C44702) *
              C50973 * C51247 +
          (((C8493 + C8492) * C636 -
            ((C8295 + C8294) * C630 + (C8293 + C8292) * C635) +
            (C8495 + C8494) * C631 - (C8863 + C8862) * C637 -
            (C8865 + C8864) * C632) *
               C51305 +
           (C16031 * C636 - (C14222 * C630 + C14223 * C635) + C16034 * C631 -
            (C14442 + C14441) * C637 - (C14444 + C14443) * C632) *
               C51306 +
           ((C15235 + C15236) * C636 - (C14989 * C630 + C14990 * C635) +
            (C15237 + C15238) * C631 -
            (C8258 * C3637 + C51162 * C3640 + C8257 * C3461 + C51270 * C3465) *
                C637 -
            (C8258 * C3641 + C51162 * C3643 + C8257 * C3466 + C51270 * C3470) *
                C632) *
               C44702) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C118 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51026) *
               C51305 +
           ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51306 +
           ((C15014 + C15013) * C118 + (C15012 + C15011) * C51026) * C44702) *
              C50973 * C112 -
          (C15020 * C44702 + C14237 * C51306 +
           ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51305) *
              C50973 * C113 +
          (C8316 * C51305 + C14238 * C51306 +
           ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C44702) *
              C50973 * C114 -
          (((C8258 * C1169 + C51162 * C1173 + C8257 * C1028 + C51270 * C1034) *
                C51026 +
            (C8258 * C1161 + C51162 * C1168 + C8257 * C1019 + C51270 * C1027) *
                C118) *
               C44702 +
           ((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C51306 +
           C8317 * C51305) *
              C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51305 +
            ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51306 +
            C48176 * C44702) *
               C50973 * C51247 -
           (C15020 * C44702 + C14237 * C51306 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51305) *
               C50973 * C50997) *
              C1013 +
          ((C14236 * C51305 + C15019 * C51306 +
            ((C15015 + C15016) * C118 + (C15017 + C15018) * C51026) * C44702) *
               C50973 * C50997 -
           (((C15380 + C15379) * C51026 + (C15378 + C15377) * C118) * C44702 +
            ((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51306 +
            ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C51305) *
               C50973 * C51247) *
              C1014 +
          ((C48176 * C51305 +
            ((C15377 + C15378) * C118 + (C15379 + C15380) * C51026) * C51306 +
            ((C8257 * C6286 + C51270 * C6289 + C8258 * C6463 + C51162 * C6465) *
                 C118 +
             (C8257 * C6290 + C51270 * C6295 + C8258 * C6466 + C51162 * C6469) *
                 C51026) *
                C44702) *
               C50973 * C51247 -
           (((C8258 * C6468 + C51162 * C6470 + C8257 * C6292 + C51270 * C6296) *
                 C51026 +
             (C8258 * C6464 + C51162 * C6467 + C8257 * C6287 + C51270 * C6291) *
                 C118) *
                C44702 +
            ((C15018 + C15017) * C51026 + (C15016 + C15015) * C118) * C51306 +
            C15020 * C51305) *
               C50973 * C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
               C765 +
           (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
               C760 -
           (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
               C766 -
           (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
               C761 +
           (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
               C767 +
           (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
               C762 -
           (C8258 * C3016 + C51162 * C3019 + C8257 * C769 + C51270 * C773) *
               C768 -
           (C8258 * C3020 + C51162 * C3025 + C8257 * C774 + C51270 * C781) *
               C763) *
              C51305 +
          ((C14226 + C14227) * C765 + (C14228 + C14229) * C760 -
           (C14785 + C14786) * C766 - (C14787 + C14788) * C761 +
           (C14789 + C14790) * C767 + (C14791 + C14792) * C762 -
           (C8258 * C3299 + C51162 * C3304 + C8257 * C3298 + C51270 * C3302) *
               C768 -
           (C8258 * C3305 + C51162 * C3311 + C8257 * C3303 + C51270 * C3310) *
               C763) *
              C51306 +
          ((C15014 + C15013) * C765 + (C15012 + C15011) * C760 -
           (C15232 + C15231) * C766 - (C15234 + C15233) * C761 +
           (C8257 * C3460 + C51270 * C3463 + C8258 * C3636 + C51162 * C3638) *
               C767 +
           (C8257 * C3464 + C51270 * C3469 + C8258 * C3639 + C51162 * C3642) *
               C762 -
           (C8258 * C20950 + C51162 * C20951 + C8257 * C3636 + C51270 * C3638) *
               C768 -
           (C8258 * C20952 + C51162 * C20953 + C8257 * C3639 + C51270 * C3642) *
               C763) *
              C44702) *
         C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C298 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51254 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C299 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51042) *
               C51305 +
           ((C14226 + C14227) * C298 + (C14228 + C14229) * C51254 -
            (C14785 + C14786) * C299 - (C14787 + C14788) * C51042) *
               C51306 +
           ((C15014 + C15013) * C298 + (C15012 + C15011) * C51254 -
            (C15232 + C15231) * C299 - (C15234 + C15233) * C51042) *
               C44702) *
              C50973 * C295 +
          (((C8493 + C8492) * C299 -
            ((C8295 + C8294) * C51254 + (C8293 + C8292) * C298) +
            (C8495 + C8494) * C51042) *
               C51305 +
           C16510 * C51306 +
           ((C15235 + C15236) * C299 - (C14989 * C51254 + C14990 * C298) +
            (C15237 + C15238) * C51042) *
               C44702) *
              C50973 * C296 +
          (C8510 * C51305 +
           (C14224 * C298 + C14225 * C51254 - (C10043 + C10042) * C299 -
            (C10045 + C10044) * C51042) *
               C51306 +
           ((C9280 + C9281) * C298 + (C9282 + C9283) * C51254 -
            (C8258 * C3462 + C51162 * C3468 + C8257 * C1160 + C51270 * C1166) *
                C299 -
            (C8258 * C3467 + C51162 * C3471 + C8257 * C1167 + C51270 * C1172) *
                C51042) *
               C44702) *
              C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C298 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51254 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C299 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51042) *
               C51305 +
           ((C14226 + C14227) * C298 + (C14228 + C14229) * C51254 -
            (C14785 + C14786) * C299 - (C14787 + C14788) * C51042) *
               C51306 +
           C48343 * C44702) *
              C50973 * C50992 * C1013 +
          (((C14786 + C14785) * C299 -
            ((C14229 + C14228) * C51254 + (C14227 + C14226) * C298) +
            (C14788 + C14787) * C51042) *
               C51305 +
           ((C15231 + C15232) * C299 -
            ((C15011 + C15012) * C51254 + (C15013 + C15014) * C298) +
            (C15233 + C15234) * C51042) *
               C51306 +
           ((C48338 + C48339) * C299 -
            ((C15380 + C15379) * C51254 + (C15378 + C15377) * C298) +
            (C48340 + C48341) * C51042) *
               C44702) *
              C50973 * C50992 * C1014 +
          (C48343 * C51305 +
           ((C15377 + C15378) * C298 + (C15379 + C15380) * C51254 -
            (C48339 + C48338) * C299 - (C48341 + C48340) * C51042) *
               C51306 +
           ((C8257 * C6286 + C51270 * C6289 + C8258 * C6463 + C51162 * C6465) *
                C298 +
            (C8257 * C6290 + C51270 * C6295 + C8258 * C6466 + C51162 * C6469) *
                C51254 -
            (C8258 * C23180 + C51162 * C23181 + C8257 * C6463 +
             C51270 * C6465) *
                C299 -
            (C8258 * C23182 + C51162 * C23183 + C8257 * C6466 +
             C51270 * C6469) *
                C51042) *
               C44702) *
              C50973 * C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C635 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C630 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C636 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C631 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C637 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C632) *
               C51305 +
           ((C14226 + C14227) * C635 + (C14228 + C14229) * C630 -
            (C14785 + C14786) * C636 - (C14787 + C14788) * C631 +
            (C14789 + C14790) * C637 + (C14791 + C14792) * C632) *
               C51306 +
           ((C15014 + C15013) * C635 + (C15012 + C15011) * C630 -
            (C15232 + C15231) * C636 - (C15234 + C15233) * C631 +
            (C48022 + C48023) * C637 + (C48024 + C48025) * C632) *
               C44702) *
              C50973 * C50992 * C51256 +
          (((C14786 + C14785) * C636 -
            ((C14229 + C14228) * C630 + (C14227 + C14226) * C635) +
            (C14788 + C14787) * C631 - (C14790 + C14789) * C637 -
            (C14792 + C14791) * C632) *
               C51305 +
           ((C15231 + C15232) * C636 -
            ((C15011 + C15012) * C630 + (C15013 + C15014) * C635) +
            (C15233 + C15234) * C631 - (C48023 + C48022) * C637 -
            (C48025 + C48024) * C632) *
               C51306 +
           ((C8257 * C3745 + C51270 * C3753 + C8258 * C3744 + C51162 * C3752) *
                C636 -
            ((C15380 + C15379) * C630 + (C15378 + C15377) * C635) +
            (C8257 * C3751 + C51270 * C3757 + C8258 * C3750 + C51162 * C3756) *
                C631 -
            (C8258 * C21020 + C51162 * C21022 + C8257 * C3744 +
             C51270 * C3752) *
                C637 -
            (C8258 * C21021 + C51162 * C21023 + C8257 * C3750 +
             C51270 * C3756) *
                C632) *
               C44702) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51305 +
            ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51306 +
            ((C15014 + C15013) * C118 + (C15012 + C15011) * C51026) * C44702) *
               C50973 * C295 -
           (C15020 * C44702 + C14237 * C51306 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51305) *
               C50973 * C296 +
           (C8316 * C51305 + C14238 * C51306 +
            ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C44702) *
               C50973 * C297) *
              C51256 +
          ((C14236 * C51305 + C15019 * C51306 +
            ((C15015 + C15016) * C118 + (C15017 + C15018) * C51026) * C44702) *
               C50973 * C296 -
           (((C15380 + C15379) * C51026 + (C15378 + C15377) * C118) * C44702 +
            ((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51306 +
            ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C51305) *
               C50973 * C295 -
           (((C8258 * C7128 + C51162 * C7129 + C8257 * C1250 + C51270 * C1257) *
                 C51026 +
             (C8258 * C7126 + C51162 * C7127 + C8257 * C1245 + C51270 * C1251) *
                 C118) *
                C44702 +
            ((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51306 +
            C8698 * C51305) *
               C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C118 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51026) *
               C51305 +
           ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51306 +
           C48176 * C44702) *
              C50973 * C50992 * C1240 -
          (C48458 * C44702 +
           ((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51306 +
           ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C51305) *
              C50973 * C50992 * C1241 +
          (C48176 * C51305 +
           ((C15377 + C15378) * C118 + (C15379 + C15380) * C51026) * C51306 +
           ((C48454 + C48455) * C118 + (C48456 + C48457) * C51026) * C44702) *
              C50973 * C50992 * C1242 -
          (((C8258 * C23304 + C51162 * C23306 + C8257 * C6607 +
             C51270 * C6610) *
                C51026 +
            (C8258 * C23303 + C51162 * C23305 + C8257 * C6604 +
             C51270 * C6608) *
                C118) *
               C44702 +
           ((C48457 + C48456) * C51026 + (C48455 + C48454) * C118) * C51306 +
           C48458 * C51305) *
              C50973 * C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51305 +
            ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51306 +
            C48176 * C44702) *
               C50973 * C51300 -
           (C15020 * C44702 + C14237 * C51306 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51305) *
               C50973 * C51285 +
           (C8316 * C51305 + C14238 * C51306 +
            ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C44702) *
               C50973 * C1362) *
              C1775 +
          ((C14236 * C51305 + C15019 * C51306 +
            ((C15015 + C15016) * C118 + (C15017 + C15018) * C51026) * C44702) *
               C50973 * C51285 -
           (C48458 * C44702 +
            ((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51306 +
            ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C51305) *
               C50973 * C51300 -
           (((C8258 * C7128 + C51162 * C7129 + C8257 * C1250 + C51270 * C1257) *
                 C51026 +
             (C8258 * C7126 + C51162 * C7127 + C8257 * C1245 + C51270 * C1251) *
                 C118) *
                C44702 +
            ((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51306 +
            C8698 * C51305) *
               C50973 * C1362) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C298 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51254 -
             (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                 C299 -
             (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                 C51042) *
                C51305 +
            ((C14226 + C14227) * C298 + (C14228 + C14229) * C51254 -
             (C14785 + C14786) * C299 - (C14787 + C14788) * C51042) *
                C51306 +
            C48343 * C44702) *
               C50973 * C1490 +
           (((C8493 + C8492) * C299 -
             ((C8295 + C8294) * C51254 + (C8293 + C8292) * C298) +
             (C8495 + C8494) * C51042) *
                C51305 +
            C16510 * C51306 +
            ((C15235 + C15236) * C299 - (C14989 * C51254 + C14990 * C298) +
             (C15237 + C15238) * C51042) *
                C44702) *
               C50973 * C50997) *
              C1775 +
          ((((C14786 + C14785) * C299 -
             ((C14229 + C14228) * C51254 + (C14227 + C14226) * C298) +
             (C14788 + C14787) * C51042) *
                C51305 +
            ((C15231 + C15232) * C299 -
             ((C15011 + C15012) * C51254 + (C15013 + C15014) * C298) +
             (C15233 + C15234) * C51042) *
                C51306 +
            ((C48338 + C48339) * C299 - (C48442 * C51254 + C48443 * C298) +
             (C48340 + C48341) * C51042) *
                C44702) *
               C50973 * C1490 +
           (C16509 * C51305 +
            (C14987 * C298 + C14988 * C51254 - (C15236 + C15235) * C299 -
             (C15238 + C15237) * C51042) *
                C51306 +
            ((C15015 + C15016) * C298 + (C15017 + C15018) * C51254 -
             (C8258 * C3742 + C51162 * C3748 + C8257 * C3743 + C51270 * C3749) *
                 C299 -
             (C8258 * C3746 + C51162 * C3754 + C8257 * C3747 + C51270 * C3755) *
                 C51042) *
                C44702) *
               C50973 * C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51305 +
            ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51306 +
            C48176 * C44702) *
               C50973 * C1490 -
           (C15020 * C44702 + C14237 * C51306 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51305) *
               C50973 * C50997) *
              C51302 +
          ((C14236 * C51305 + C15019 * C51306 +
            ((C15015 + C15016) * C118 + (C15017 + C15018) * C51026) * C44702) *
               C50973 * C50997 -
           (C48458 * C44702 +
            ((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51306 +
            ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C51305) *
               C50973 * C1490) *
              C51291 +
          ((C48176 * C51305 +
            ((C15377 + C15378) * C118 + (C15379 + C15380) * C51026) * C51306 +
            ((C48454 + C48455) * C118 + (C48456 + C48457) * C51026) * C44702) *
               C50973 * C1490 -
           (((C8258 * C6468 + C51162 * C6470 + C8257 * C6292 + C51270 * C6296) *
                 C51026 +
             (C8258 * C6464 + C51162 * C6467 + C8257 * C6287 + C51270 * C6291) *
                 C118) *
                C44702 +
            ((C15018 + C15017) * C51026 + (C15016 + C15015) * C118) * C51306 +
            C15020 * C51305) *
               C50973 * C50997) *
              C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C118 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51026) *
               C51305 +
           ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51306 +
           ((C15014 + C15013) * C118 + (C15012 + C15011) * C51026) * C44702) *
              C50973 * C112 -
          (C15020 * C44702 + C14237 * C51306 +
           ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51305) *
              C50973 * C113 +
          (C8316 * C51305 + C14238 * C51306 +
           ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C44702) *
              C50973 * C114 -
          (((C8258 * C1169 + C51162 * C1173 + C8257 * C1028 + C51270 * C1034) *
                C51026 +
            (C8258 * C1161 + C51162 * C1168 + C8257 * C1019 + C51270 * C1027) *
                C118) *
               C44702 +
           ((C8693 + C8692) * C51026 + (C8691 + C8690) * C118) * C51306 +
           C8317 * C51305) *
              C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C635 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C630 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C636 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C631 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C637 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C632) *
               C51305 +
           ((C14226 + C14227) * C635 + (C14228 + C14229) * C630 -
            (C14785 + C14786) * C636 - (C14787 + C14788) * C631 +
            (C14789 + C14790) * C637 + (C14791 + C14792) * C632) *
               C51306 +
           ((C15014 + C15013) * C635 + (C15012 + C15011) * C630 -
            (C15232 + C15231) * C636 - (C15234 + C15233) * C631 +
            (C8257 * C3460 + C51270 * C3463 + C8258 * C3636 + C51162 * C3638) *
                C637 +
            (C8257 * C3464 + C51270 * C3469 + C8258 * C3639 + C51162 * C3642) *
                C632) *
               C44702) *
              C50973 * C51247 +
          (((C8493 + C8492) * C636 -
            ((C8295 + C8294) * C630 + (C8293 + C8292) * C635) +
            (C8495 + C8494) * C631 - (C8863 + C8862) * C637 -
            (C8865 + C8864) * C632) *
               C51305 +
           (C16031 * C636 - (C14222 * C630 + C14223 * C635) + C16034 * C631 -
            (C14442 + C14441) * C637 - (C14444 + C14443) * C632) *
               C51306 +
           ((C15235 + C15236) * C636 - (C14989 * C630 + C14990 * C635) +
            (C15237 + C15238) * C631 -
            (C8258 * C3637 + C51162 * C3640 + C8257 * C3461 + C51270 * C3465) *
                C637 -
            (C8258 * C3641 + C51162 * C3643 + C8257 * C3466 + C51270 * C3470) *
                C632) *
               C44702) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C298 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C51254 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C299 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C51042) *
               C51305 +
           ((C14226 + C14227) * C298 + (C14228 + C14229) * C51254 -
            (C14785 + C14786) * C299 - (C14787 + C14788) * C51042) *
               C51306 +
           ((C15014 + C15013) * C298 + (C15012 + C15011) * C51254 -
            (C15232 + C15231) * C299 - (C15234 + C15233) * C51042) *
               C44702) *
              C50973 * C295 +
          (((C8493 + C8492) * C299 -
            ((C8295 + C8294) * C51254 + (C8293 + C8292) * C298) +
            (C8495 + C8494) * C51042) *
               C51305 +
           C16510 * C51306 +
           ((C15235 + C15236) * C299 - (C14989 * C51254 + C14990 * C298) +
            (C15237 + C15238) * C51042) *
               C44702) *
              C50973 * C296 +
          (C8510 * C51305 +
           (C14224 * C298 + C14225 * C51254 - (C10043 + C10042) * C299 -
            (C10045 + C10044) * C51042) *
               C51306 +
           ((C9280 + C9281) * C298 + (C9282 + C9283) * C51254 -
            (C8258 * C3462 + C51162 * C3468 + C8257 * C1160 + C51270 * C1166) *
                C299 -
            (C8258 * C3467 + C51162 * C3471 + C8257 * C1167 + C51270 * C1172) *
                C51042) *
               C44702) *
              C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
               C765 +
           (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
               C760 -
           (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
               C766 -
           (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
               C761 +
           (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
               C767 +
           (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
               C762 -
           (C8258 * C3016 + C51162 * C3019 + C8257 * C769 + C51270 * C773) *
               C768 -
           (C8258 * C3020 + C51162 * C3025 + C8257 * C774 + C51270 * C781) *
               C763) *
              C51305 +
          ((C14226 + C14227) * C765 + (C14228 + C14229) * C760 -
           (C14785 + C14786) * C766 - (C14787 + C14788) * C761 +
           (C14789 + C14790) * C767 + (C14791 + C14792) * C762 -
           (C8258 * C3299 + C51162 * C3304 + C8257 * C3298 + C51270 * C3302) *
               C768 -
           (C8258 * C3305 + C51162 * C3311 + C8257 * C3303 + C51270 * C3310) *
               C763) *
              C51306 +
          ((C15014 + C15013) * C765 + (C15012 + C15011) * C760 -
           (C15232 + C15231) * C766 - (C15234 + C15233) * C761 +
           (C8257 * C3460 + C51270 * C3463 + C8258 * C3636 + C51162 * C3638) *
               C767 +
           (C8257 * C3464 + C51270 * C3469 + C8258 * C3639 + C51162 * C3642) *
               C762 -
           (C8258 * C20950 + C51162 * C20951 + C8257 * C3636 + C51270 * C3638) *
               C768 -
           (C8258 * C20952 + C51162 * C20953 + C8257 * C3639 + C51270 * C3642) *
               C763) *
              C44702) *
         C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                 C118 +
             (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                 C51026) *
                C51305 +
            ((C14226 + C14227) * C118 + (C14228 + C14229) * C51026) * C51306 +
            ((C15014 + C15013) * C118 + (C15012 + C15011) * C51026) * C44702) *
               C50973 * C295 -
           (C15020 * C44702 + C14237 * C51306 +
            ((C8295 + C8294) * C51026 + (C8293 + C8292) * C118) * C51305) *
               C50973 * C296 +
           (C8316 * C51305 + C14238 * C51306 +
            ((C9280 + C9281) * C118 + (C9282 + C9283) * C51026) * C44702) *
               C50973 * C297) *
              C51256 +
          ((C14236 * C51305 + C15019 * C51306 +
            ((C15015 + C15016) * C118 + (C15017 + C15018) * C51026) * C44702) *
               C50973 * C296 -
           (((C15380 + C15379) * C51026 + (C15378 + C15377) * C118) * C44702 +
            ((C15011 + C15012) * C51026 + (C15013 + C15014) * C118) * C51306 +
            ((C14229 + C14228) * C51026 + (C14227 + C14226) * C118) * C51305) *
               C50973 * C295 -
           (((C8258 * C7128 + C51162 * C7129 + C8257 * C1250 + C51270 * C1257) *
                 C51026 +
             (C8258 * C7126 + C51162 * C7127 + C8257 * C1245 + C51270 * C1251) *
                 C118) *
                C44702 +
            ((C9283 + C9282) * C51026 + (C9281 + C9280) * C118) * C51306 +
            C8698 * C51305) *
               C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51270 * C126 + C8258 * C300 + C51162 * C306) *
                C635 +
            (C8257 * C127 + C51270 * C140 + C8258 * C307 + C51162 * C318) *
                C630 -
            (C8258 * C638 + C51162 * C643 + C8257 * C300 + C51270 * C306) *
                C636 -
            (C8258 * C644 + C51162 * C653 + C8257 * C307 + C51270 * C318) *
                C631 +
            (C8257 * C638 + C51270 * C643 + C8258 * C769 + C51162 * C773) *
                C637 +
            (C8257 * C644 + C51270 * C653 + C8258 * C774 + C51162 * C781) *
                C632) *
               C51305 +
           ((C14226 + C14227) * C635 + (C14228 + C14229) * C630 -
            (C14785 + C14786) * C636 - (C14787 + C14788) * C631 +
            (C14789 + C14790) * C637 + (C14791 + C14792) * C632) *
               C51306 +
           ((C15014 + C15013) * C635 + (C15012 + C15011) * C630 -
            (C15232 + C15231) * C636 - (C15234 + C15233) * C631 +
            (C48022 + C48023) * C637 + (C48024 + C48025) * C632) *
               C44702) *
              C50973 * C50992 * C51256 +
          (((C14786 + C14785) * C636 -
            ((C14229 + C14228) * C630 + (C14227 + C14226) * C635) +
            (C14788 + C14787) * C631 - (C14790 + C14789) * C637 -
            (C14792 + C14791) * C632) *
               C51305 +
           ((C15231 + C15232) * C636 -
            ((C15011 + C15012) * C630 + (C15013 + C15014) * C635) +
            (C15233 + C15234) * C631 - (C48023 + C48022) * C637 -
            (C48025 + C48024) * C632) *
               C51306 +
           ((C8257 * C3745 + C51270 * C3753 + C8258 * C3744 + C51162 * C3752) *
                C636 -
            ((C15380 + C15379) * C630 + (C15378 + C15377) * C635) +
            (C8257 * C3751 + C51270 * C3757 + C8258 * C3750 + C51162 * C3756) *
                C631 -
            (C8258 * C21020 + C51162 * C21022 + C8257 * C3744 +
             C51270 * C3752) *
                C637 -
            (C8258 * C21021 + C51162 * C21023 + C8257 * C3750 +
             C51270 * C3756) *
                C632) *
               C44702) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1363 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C1358 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1364 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C34007 +
           ((C36957 + C36958 + C36959) * C1363 +
            (C36960 + C36961 + C36962) * C1358 -
            (C37377 + C37378 + C37379) * C1364 -
            (C37380 + C37381 + C37382) * C51042) *
               C51190) *
              C50973 * C51300 +
          (((C2679 + C2678 + C2677) * C1364 -
            ((C2494 + C2493 + C2492) * C1358 +
             (C2491 + C2490 + C2489) * C1363) +
            (C2682 + C2681 + C2680) * C51042) *
               C34007 +
           ((C4261 + C4262 + C4263) * C1364 -
            ((C2864 + C2863 + C2862) * C1358 +
             (C2861 + C2860 + C2859) * C1363) +
            (C4264 + C4265 + C4266) * C51042) *
               C51190) *
              C50973 * C51285 +
          (((C2500 + C2499 + C2498) * C1363 + (C2497 + C2496 + C2495) * C1358 -
            (C2685 + C2684 + C2683) * C1364 -
            (C2688 + C2687 + C2686) * C51042) *
               C34007 +
           ((C2865 + C2866 + C2867) * C1363 + (C2868 + C2869 + C2870) * C1358 -
            (C2451 * C4244 + C2446 * C4245 + C2450 * C888 + C2445 * C901 +
             C2449 * C887 + C2444 * C899) *
                C1364 -
            (C2451 * C4246 + C2446 * C4247 + C2450 * C902 + C2445 * C912 +
             C2449 * C900 + C2444 * C911) *
                C51042) *
               C51190) *
              C50973 * C1362) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C34007 +
            (C7131 + C7132 - C7133 - C7134) * C51190) *
               C17450 +
           ((C1366 + C1367 - C1368 - C1369) * C34007 + C7151 * C51190) *
               C17451 +
           C35242 * C17452) *
              C51300 +
          (((C1368 - (C1367 + C1366) + C1369) * C34007 + C7153 * C51190) *
               C17450 +
           ((C1372 - (C1371 + C1370) + C1373) * C34007 + C12718 * C51190) *
               C17451 +
           ((C1376 - (C1375 + C1374) + C1377) * C34007 +
            (C1676 - (C1662 + C1663) + C1677) * C51190) *
               C17452) *
              C51285 +
          (C35242 * C17450 +
           (C1387 * C34007 + (C1663 + C1662 - C1676 - C1677) * C51190) *
               C17451 +
           ((C1380 + C1379 - C1378 - C1381) * C34007 +
            (C519 * C1363 + C520 * C1358 -
             (C117 * C1643 + C51110 * C1644) * C1364 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51190) *
               C17452) *
              C1362) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C1363 +
            (C117 * C127 + C51110 * C140) * C1358 -
            (C117 * C300 + C51110 * C306) * C1364 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C39356 +
           (C7131 + C7132 - C7133 - C7134) * C39357 + C8154 * C39358 +
           (C8151 + C8150 - C8149 - C8152) * C39359) *
              C50973 * C51300 +
          ((C1368 - (C1367 + C1366) + C1369) * C39356 + C7153 * C39357 +
           C7154 * C39358 + (C7143 - (C7144 + C7145) + C7146) * C39359) *
              C50973 * C51285 +
          (C1386 * C39356 + C12367 * C39357 +
           (C6773 + C6772 - C6771 - C6774) * C39358 +
           (C5681 * C1363 + C5682 * C1358 -
            (C117 * C7126 + C51110 * C7127) * C1364 -
            (C117 * C7128 + C51110 * C7129) * C51042) *
               C39359) *
              C50973 * C1362) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1492 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51301 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1493 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51288 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C1494 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C1489) *
               C34007 +
           ((C36957 + C36958 + C36959) * C1492 +
            (C36960 + C36961 + C36962) * C51301 -
            (C37377 + C37378 + C37379) * C1493 -
            (C37380 + C37381 + C37382) * C51288 +
            (C37383 + C37384 + C37385) * C1494 +
            (C37386 + C37387 + C37388) * C1489) *
               C51190) *
              C50973 * C1490 +
          (((C2679 + C2678 + C2677) * C1493 -
            ((C2494 + C2493 + C2492) * C51301 +
             (C2491 + C2490 + C2489) * C1492) +
            (C2682 + C2681 + C2680) * C51288 - (C3043 + C3042 + C3041) * C1494 -
            (C3046 + C3045 + C3044) * C1489) *
               C34007 +
           ((C4261 + C4262 + C4263) * C1493 -
            ((C2864 + C2863 + C2862) * C51301 +
             (C2861 + C2860 + C2859) * C1492) +
            (C4264 + C4265 + C4266) * C51288 -
            (C2451 * C3301 + C2446 * C3308 + C2450 * C3300 + C2445 * C3306 +
             C2449 * C886 + C2444 * C897) *
                C1494 -
            (C2451 * C3309 + C2446 * C3313 + C2450 * C3307 + C2445 * C3312 +
             C2449 * C898 + C2444 * C910) *
                C1489) *
               C51190) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1492 +
             (C117 * C127 + C51110 * C140) * C51301 -
             (C117 * C300 + C51110 * C306) * C1493 -
             (C117 * C307 + C51110 * C318) * C51288 +
             (C117 * C638 + C51110 * C643) * C1494 +
             (C117 * C644 + C51110 * C653) * C1489) *
                C34007 +
            (C7990 + C7991 - C7992 - C7993 + C7994 + C7995) * C51190) *
               C17450 +
           ((C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C34007 +
            (C6921 + C6922 - C6923 - C6924 + C6925 + C6926) * C51190) *
               C17451 +
           ((C1502 + C1503 - C1504 - C1505 + C1506 + C1507) * C34007 +
            (C12516 + C12517 - C12518 - C12519 + C12520 + C12521) * C51190) *
               C17452) *
              C1490 +
          (((C1498 - (C1497 + C1496) + C1499 - C1500 - C1501) * C34007 +
            (C6923 - (C6922 + C6921) + C6924 - C6925 - C6926) * C51190) *
               C17450 +
           ((C1504 - (C1503 + C1502) + C1505 - C1506 - C1507) * C34007 +
            (C12518 - (C12517 + C12516) + C12519 - C12520 - C12521) * C51190) *
               C17451 +
           ((C1510 - (C1509 + C1508) + C1511 - C1512 - C1513) * C34007 +
            (C1670 * C1493 - (C518 * C51301 + C517 * C1492) + C1671 * C51288 -
             (C117 * C890 + C51110 * C905) * C1494 -
             (C117 * C906 + C51110 * C914) * C1489) *
                C51190) *
               C17452) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C1492 +
            (C117 * C127 + C51110 * C140) * C51301 -
            (C117 * C300 + C51110 * C306) * C1493 -
            (C117 * C307 + C51110 * C318) * C51288 +
            (C117 * C638 + C51110 * C643) * C1494 +
            (C117 * C644 + C51110 * C653) * C1489) *
               C39356 +
           (C7990 + C7991 - C7992 - C7993 + C7994 + C7995) * C39357 +
           (C7996 + C7997 - C7998 - C7999 + C8000 + C8001) * C39358 +
           (C6311 * C1492 + C6310 * C51301 - C6495 * C1493 - C6496 * C51288 +
            C39827 * C1494 + C39828 * C1489) *
               C39359) *
              C50973 * C1490 +
          ((C1498 - (C1497 + C1496) + C1499 - C1500 - C1501) * C39356 +
           (C6923 - (C6922 + C6921) + C6924 - C6925 - C6926) * C39357 +
           (C6929 - (C6928 + C6927) + C6930 - C6931 - C6932) * C39358 +
           (C6497 * C1493 - (C5680 * C51301 + C5679 * C1492) + C6498 * C51288 -
            (C117 * C3742 + C51110 * C3748) * C1494 -
            (C117 * C3746 + C51110 * C3754) * C1489) *
               C39359) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C1363 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C1358 -
             (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
              C2449 * C300 + C2444 * C306) *
                 C1364 -
             (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
              C2449 * C307 + C2444 * C318) *
                 C51042) *
                C34007 +
            ((C36957 + C36958 + C36959) * C1363 +
             (C36960 + C36961 + C36962) * C1358 -
             (C37377 + C37378 + C37379) * C1364 -
             (C37380 + C37381 + C37382) * C51042) *
                C51190) *
               C50973 * C1490 +
           (((C2679 + C2678 + C2677) * C1364 -
             ((C2494 + C2493 + C2492) * C1358 +
              (C2491 + C2490 + C2489) * C1363) +
             (C2682 + C2681 + C2680) * C51042) *
                C34007 +
            ((C4261 + C4262 + C4263) * C1364 -
             ((C2864 + C2863 + C2862) * C1358 +
              (C2861 + C2860 + C2859) * C1363) +
             (C4264 + C4265 + C4266) * C51042) *
                C51190) *
               C50973 * C50997) *
              C51256 +
          ((((C37379 + C37378 + C37377) * C1364 -
             ((C36962 + C36961 + C36960) * C1358 +
              (C36959 + C36958 + C36957) * C1363) +
             (C37382 + C37381 + C37380) * C51042) *
                C34007 +
            ((C37711 + C37712 + C37713) * C1364 -
             ((C37547 + C37548 + C37549) * C1358 +
              (C37550 + C37551 + C37552) * C1363) +
             (C37714 + C37715 + C37716) * C51042) *
                C51190) *
               C50973 * C1490 +
           (((C2859 + C2860 + C2861) * C1363 + (C2862 + C2863 + C2864) * C1358 -
             (C4263 + C4262 + C4261) * C1364 -
             (C4266 + C4265 + C4264) * C51042) *
                C34007 +
            ((C3485 + C3486 + C3487) * C1363 + (C3488 + C3489 + C3490) * C1358 -
             (C2451 * C3637 + C2446 * C3640 + C2450 * C3461 + C2445 * C3465 +
              C2449 * C1159 + C2444 * C1164) *
                 C1364 -
             (C2451 * C3641 + C2446 * C3643 + C2450 * C3466 + C2445 * C3470 +
              C2449 * C1165 + C2444 * C1171) *
                 C51042) *
                C51190) *
               C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C1363 +
              (C117 * C127 + C51110 * C140) * C1358 -
              (C117 * C300 + C51110 * C306) * C1364 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C34007 +
             (C7131 + C7132 - C7133 - C7134) * C51190) *
                C17450 +
            ((C1366 + C1367 - C1368 - C1369) * C34007 + C7151 * C51190) *
                C17451 +
            C35242 * C17452) *
               C1490 +
           (((C1368 - (C1367 + C1366) + C1369) * C34007 + C7153 * C51190) *
                C17450 +
            ((C1372 - (C1371 + C1370) + C1373) * C34007 + C12718 * C51190) *
                C17451 +
            ((C1376 - (C1375 + C1374) + C1377) * C34007 +
             (C1676 - (C1662 + C1663) + C1677) * C51190) *
                C17452) *
               C50997) *
              C51256 +
          ((((C7133 - (C7132 + C7131) + C7134) * C34007 +
             (C7137 - (C7136 + C7135) + C7138) * C51190) *
                C17450 +
            (C7153 * C34007 + C7154 * C51190) * C17451 +
            (C12718 * C34007 + (C6771 - (C6772 + C6773) + C6774) * C51190) *
                C17452) *
               C1490 +
           ((C7151 * C34007 + C7152 * C51190) * C17450 +
            (C12367 * C34007 + (C6773 + C6772 - C6771 - C6774) * C51190) *
                C17451 +
            ((C1663 + C1662 - C1676 - C1677) * C34007 +
             (C1053 * C1363 + C1054 * C1358 -
              (C117 * C1161 + C51110 * C1168) * C1364 -
              (C117 * C1169 + C51110 * C1173) * C51042) *
                 C51190) *
                C17452) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C39356 +
            (C7131 + C7132 - C7133 - C7134) * C39357 + C8154 * C39358 +
            (C8151 + C8150 - C8149 - C8152) * C39359) *
               C50973 * C1490 +
           ((C1368 - (C1367 + C1366) + C1369) * C39356 + C7153 * C39357 +
            C7154 * C39358 + (C7143 - (C7144 + C7145) + C7146) * C39359) *
               C50973 * C50997) *
              C51256 +
          (((C7133 - (C7132 + C7131) + C7134) * C39356 +
            (C7137 - (C7136 + C7135) + C7138) * C39357 +
            (C8149 - (C8150 + C8151) + C8152) * C39358 +
            (C40036 * C1364 - (C6618 * C1358 + C6617 * C1363) +
             C40037 * C51042) *
                C39359) *
               C50973 * C1490 +
           (C7151 * C39356 + C7152 * C39357 +
            (C7145 + C7144 - C7143 - C7146) * C39358 +
            (C6312 * C1363 + C6313 * C1358 -
             (C117 * C6464 + C51110 * C6467) * C1364 -
             (C117 * C6468 + C51110 * C6470) * C51042) *
                C39359) *
               C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C1363 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C1358 -
             (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
              C2449 * C300 + C2444 * C306) *
                 C1364 -
             (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
              C2449 * C307 + C2444 * C318) *
                 C51042) *
                C34007 +
            ((C36957 + C36958 + C36959) * C1363 +
             (C36960 + C36961 + C36962) * C1358 -
             (C37377 + C37378 + C37379) * C1364 -
             (C37380 + C37381 + C37382) * C51042) *
                C51190) *
               C50973 * C51247 +
           (((C2679 + C2678 + C2677) * C1364 -
             ((C2494 + C2493 + C2492) * C1358 +
              (C2491 + C2490 + C2489) * C1363) +
             (C2682 + C2681 + C2680) * C51042) *
                C34007 +
            ((C4261 + C4262 + C4263) * C1364 -
             ((C2864 + C2863 + C2862) * C1358 +
              (C2861 + C2860 + C2859) * C1363) +
             (C4264 + C4265 + C4266) * C51042) *
                C51190) *
               C50973 * C50997) *
              C1775 +
          ((((C37379 + C37378 + C37377) * C1364 -
             ((C36962 + C36961 + C36960) * C1358 +
              (C36959 + C36958 + C36957) * C1363) +
             (C37382 + C37381 + C37380) * C51042) *
                C34007 +
            ((C37711 + C37712 + C37713) * C1364 -
             ((C37547 + C37548 + C37549) * C1358 +
              (C37550 + C37551 + C37552) * C1363) +
             (C37714 + C37715 + C37716) * C51042) *
                C51190) *
               C50973 * C51247 +
           (((C2859 + C2860 + C2861) * C1363 + (C2862 + C2863 + C2864) * C1358 -
             (C4263 + C4262 + C4261) * C1364 -
             (C4266 + C4265 + C4264) * C51042) *
                C34007 +
            ((C3485 + C3486 + C3487) * C1363 + (C3488 + C3489 + C3490) * C1358 -
             (C2451 * C3637 + C2446 * C3640 + C2450 * C3461 + C2445 * C3465 +
              C2449 * C1159 + C2444 * C1164) *
                 C1364 -
             (C2451 * C3641 + C2446 * C3643 + C2450 * C3466 + C2445 * C3470 +
              C2449 * C1165 + C2444 * C1171) *
                 C51042) *
                C51190) *
               C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C1363 +
              (C117 * C127 + C51110 * C140) * C1358 -
              (C117 * C300 + C51110 * C306) * C1364 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C34007 +
             (C7131 + C7132 - C7133 - C7134) * C51190) *
                C17450 +
            ((C1366 + C1367 - C1368 - C1369) * C34007 + C7151 * C51190) *
                C17451 +
            C35242 * C17452) *
               C51247 +
           (((C1368 - (C1367 + C1366) + C1369) * C34007 + C7153 * C51190) *
                C17450 +
            ((C1372 - (C1371 + C1370) + C1373) * C34007 + C12718 * C51190) *
                C17451 +
            ((C1376 - (C1375 + C1374) + C1377) * C34007 +
             (C1676 - (C1662 + C1663) + C1677) * C51190) *
                C17452) *
               C50997) *
              C1775 +
          ((((C7133 - (C7132 + C7131) + C7134) * C34007 +
             (C7137 - (C7136 + C7135) + C7138) * C51190) *
                C17450 +
            (C7153 * C34007 + C7154 * C51190) * C17451 +
            (C12718 * C34007 + (C6771 - (C6772 + C6773) + C6774) * C51190) *
                C17452) *
               C51247 +
           ((C7151 * C34007 + C7152 * C51190) * C17450 +
            (C12367 * C34007 + (C6773 + C6772 - C6771 - C6774) * C51190) *
                C17451 +
            ((C1663 + C1662 - C1676 - C1677) * C34007 +
             (C1053 * C1363 + C1054 * C1358 -
              (C117 * C1161 + C51110 * C1168) * C1364 -
              (C117 * C1169 + C51110 * C1173) * C51042) *
                 C51190) *
                C17452) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C39356 +
            (C7131 + C7132 - C7133 - C7134) * C39357 + C8154 * C39358 +
            (C8151 + C8150 - C8149 - C8152) * C39359) *
               C50973 * C51247 +
           ((C1368 - (C1367 + C1366) + C1369) * C39356 + C7153 * C39357 +
            C7154 * C39358 + (C7143 - (C7144 + C7145) + C7146) * C39359) *
               C50973 * C50997) *
              C1775 +
          (((C7133 - (C7132 + C7131) + C7134) * C39356 +
            (C7137 - (C7136 + C7135) + C7138) * C39357 +
            (C8149 - (C8150 + C8151) + C8152) * C39358 +
            (C40036 * C1364 - (C6618 * C1358 + C6617 * C1363) +
             C40037 * C51042) *
                C39359) *
               C50973 * C51247 +
           (C7151 * C39356 + C7152 * C39357 +
            (C7145 + C7144 - C7143 - C7146) * C39358 +
            (C6312 * C1363 + C6313 * C1358 -
             (C117 * C6464 + C51110 * C6467) * C1364 -
             (C117 * C6468 + C51110 * C6470) * C51042) *
                C39359) *
               C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1492 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51301 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1493 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51288 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C1494 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C1489) *
               C34007 +
           ((C36957 + C36958 + C36959) * C1492 +
            (C36960 + C36961 + C36962) * C51301 -
            (C37377 + C37378 + C37379) * C1493 -
            (C37380 + C37381 + C37382) * C51288 +
            (C37383 + C37384 + C37385) * C1494 +
            (C37386 + C37387 + C37388) * C1489) *
               C51190) *
              C50973 * C50992 * C1775 +
          (((C37379 + C37378 + C37377) * C1493 -
            ((C36962 + C36961 + C36960) * C51301 +
             (C36959 + C36958 + C36957) * C1492) +
            (C37382 + C37381 + C37380) * C51288 -
            (C37385 + C37384 + C37383) * C1494 -
            (C37388 + C37387 + C37386) * C1489) *
               C34007 +
           ((C37711 + C37712 + C37713) * C1493 -
            ((C37547 + C37548 + C37549) * C51301 +
             (C37550 + C37551 + C37552) * C1492) +
            (C37714 + C37715 + C37716) * C51288 -
            (C2451 * C20950 + C2446 * C20951 + C2450 * C3636 + C2445 * C3638 +
             C2449 * C3460 + C2444 * C3463) *
                C1494 -
            (C2451 * C20952 + C2446 * C20953 + C2450 * C3639 + C2445 * C3642 +
             C2449 * C3464 + C2444 * C3469) *
                C1489) *
               C51190) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1492 +
             (C117 * C127 + C51110 * C140) * C51301 -
             (C117 * C300 + C51110 * C306) * C1493 -
             (C117 * C307 + C51110 * C318) * C51288 +
             (C117 * C638 + C51110 * C643) * C1494 +
             (C117 * C644 + C51110 * C653) * C1489) *
                C34007 +
            (C7990 + C7991 - C7992 - C7993 + C7994 + C7995) * C51190) *
               C17450 +
           ((C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C34007 +
            (C6921 + C6922 - C6923 - C6924 + C6925 + C6926) * C51190) *
               C17451 +
           ((C1502 + C1503 - C1504 - C1505 + C1506 + C1507) * C34007 +
            (C12516 + C12517 - C12518 - C12519 + C12520 + C12521) * C51190) *
               C17452) *
              C50992 * C1775 +
          (((C7992 - (C7991 + C7990) + C7993 - C7994 - C7995) * C34007 +
            (C7998 - (C7997 + C7996) + C7999 - C8000 - C8001) * C51190) *
               C17450 +
           ((C6923 - (C6922 + C6921) + C6924 - C6925 - C6926) * C34007 +
            (C6929 - (C6928 + C6927) + C6930 - C6931 - C6932) * C51190) *
               C17451 +
           ((C12518 - (C12517 + C12516) + C12519 - C12520 - C12521) * C34007 +
            (C5500 * C1493 - (C1052 * C51301 + C1051 * C1492) + C5501 * C51288 -
             (C117 * C3462 + C51110 * C3468) * C1494 -
             (C117 * C3467 + C51110 * C3471) * C1489) *
                C51190) *
               C17452) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C1492 +
            (C117 * C127 + C51110 * C140) * C51301 -
            (C117 * C300 + C51110 * C306) * C1493 -
            (C117 * C307 + C51110 * C318) * C51288 +
            (C117 * C638 + C51110 * C643) * C1494 +
            (C117 * C644 + C51110 * C653) * C1489) *
               C39356 +
           (C7990 + C7991 - C7992 - C7993 + C7994 + C7995) * C39357 +
           (C7996 + C7997 - C7998 - C7999 + C8000 + C8001) * C39358 +
           (C41000 + C41001 - C41002 - C41003 + C41004 + C41005) * C39359) *
              C50973 * C50992 * C1775 +
          ((C7992 - (C7991 + C7990) + C7993 - C7994 - C7995) * C39356 +
           (C7998 - (C7997 + C7996) + C7999 - C8000 - C8001) * C39357 +
           (C41002 - (C41001 + C41000) + C41003 - C41004 - C41005) * C39358 +
           (C40036 * C1493 - (C6618 * C51301 + C6617 * C1492) +
            C40037 * C51288 - (C117 * C23180 + C51110 * C23181) * C1494 -
            (C117 * C23182 + C51110 * C23183) * C1489) *
               C39359) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1363 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C1358 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1364 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C34007 +
           ((C36957 + C36958 + C36959) * C1363 +
            (C36960 + C36961 + C36962) * C1358 -
            (C37377 + C37378 + C37379) * C1364 -
            (C37380 + C37381 + C37382) * C51042) *
               C51190) *
              C50973 * C50992 * C51302 +
          (((C37379 + C37378 + C37377) * C1364 -
            ((C36962 + C36961 + C36960) * C1358 +
             (C36959 + C36958 + C36957) * C1363) +
            (C37382 + C37381 + C37380) * C51042) *
               C34007 +
           ((C37711 + C37712 + C37713) * C1364 -
            ((C37547 + C37548 + C37549) * C1358 +
             (C37550 + C37551 + C37552) * C1363) +
            (C37714 + C37715 + C37716) * C51042) *
               C51190) *
              C50973 * C50992 * C51291 +
          (((C37552 + C37551 + C37550) * C1363 +
            (C37549 + C37548 + C37547) * C1358 -
            (C37713 + C37712 + C37711) * C1364 -
            (C37716 + C37715 + C37714) * C51042) *
               C34007 +
           ((C37827 + C37828 + C37829) * C1363 +
            (C37830 + C37831 + C37832) * C1358 -
            (C2451 * C21020 + C2446 * C21022 + C2450 * C3744 + C2445 * C3752 +
             C2449 * C3745 + C2444 * C3753) *
                C1364 -
            (C2451 * C21021 + C2446 * C21023 + C2450 * C3750 + C2445 * C3756 +
             C2449 * C3751 + C2444 * C3757) *
                C51042) *
               C51190) *
              C50973 * C50992 * C2019)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C34007 +
            (C7131 + C7132 - C7133 - C7134) * C51190) *
               C17450 +
           ((C1366 + C1367 - C1368 - C1369) * C34007 + C7151 * C51190) *
               C17451 +
           C35242 * C17452) *
              C50992 * C51302 +
          (((C7133 - (C7132 + C7131) + C7134) * C34007 +
            (C7137 - (C7136 + C7135) + C7138) * C51190) *
               C17450 +
           (C7153 * C34007 + C7154 * C51190) * C17451 +
           (C12718 * C34007 + (C6771 - (C6772 + C6773) + C6774) * C51190) *
               C17452) *
              C50992 * C51291 +
          ((C8154 * C34007 + (C8151 + C8150 - C8149 - C8152) * C51190) *
               C17450 +
           (C7152 * C34007 + (C7145 + C7144 - C7143 - C7146) * C51190) *
               C17451 +
           ((C6773 + C6772 - C6771 - C6774) * C34007 +
            (C5681 * C1363 + C5682 * C1358 -
             (C117 * C7126 + C51110 * C7127) * C1364 -
             (C117 * C7128 + C51110 * C7129) * C51042) *
                C51190) *
               C17452) *
              C50992 * C2019)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C1363 +
            (C117 * C127 + C51110 * C140) * C1358 -
            (C117 * C300 + C51110 * C306) * C1364 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C39356 +
           (C7131 + C7132 - C7133 - C7134) * C39357 + C8154 * C39358 +
           C41110 * C39359) *
              C50973 * C50992 * C51302 +
          ((C7133 - (C7132 + C7131) + C7134) * C39356 +
           (C7137 - (C7136 + C7135) + C7138) * C39357 +
           (C8149 - (C8150 + C8151) + C8152) * C39358 +
           (C41105 - (C41106 + C41107) + C41108) * C39359) *
              C50973 * C50992 * C51291 +
          (C8154 * C39356 + C41110 * C39357 +
           (C41107 + C41106 - C41105 - C41108) * C39358 +
           (C40116 * C1363 + C40117 * C1358 -
            (C117 * C23303 + C51110 * C23305) * C1364 -
            (C117 * C23304 + C51110 * C23306) * C51042) *
               C39359) *
              C50973 * C50992 * C2019)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C51110 * C126) * C118 +
                 (C117 * C127 + C51110 * C140) * C51026) *
                    C34007 +
                (C5683 + C5684) * C51190) *
                   C17450 +
               ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
               C34014 * C17452) *
                  C112 -
              (C34015 * C17452 +
               (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
               (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
                  C113 +
              (C34014 * C17450 + (C189 * C34007 + C11422 * C51190) * C17451 +
               ((C185 + C184) * C34007 + (C527 + C528) * C51190) * C17452) *
                  C114 -
              ((((C117 * C488 + C51110 * C495) * C51026 +
                 (C117 * C477 + C51110 * C489) * C118) *
                    C51190 +
                (C187 + C186) * C34007) *
                   C17452 +
               ((C528 + C527) * C51190 + C190 * C34007) * C17451 +
               C34015 * C17450) *
                  C115) *
             C51056 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C51110 * C126) * C635 +
                 (C117 * C127 + C51110 * C140) * C630 -
                 (C117 * C300 + C51110 * C306) * C636 -
                 (C117 * C307 + C51110 * C318) * C631 +
                 (C117 * C638 + C51110 * C643) * C637 +
                 (C117 * C644 + C51110 * C653) * C632) *
                    C34007 +
                (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51190) *
                   C17450 +
               ((C659 + C660 - C661 - C662 + C689 + C690) * C34007 +
                (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51190) *
                   C17451 +
               ((C667 + C668 - C669 - C670 + C691 + C692) * C34007 +
                (C11572 + C11573 - C11574 - C11575 + C11582 + C11583) *
                    C51190) *
                   C17452) *
                  C51247 +
              (((C661 - (C660 + C659) + C662 - C689 - C690) * C34007 +
                (C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C51190) *
                   C17450 +
               ((C669 - (C668 + C667) + C670 - C691 - C692) * C34007 +
                (C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) *
                    C51190) *
                   C17451 +
               ((C677 - (C676 + C675) + C678 - C693 - C694) * C34007 +
                (C1670 * C636 - (C518 * C630 + C517 * C635) + C1671 * C631 -
                 (C117 * C890 + C51110 * C905) * C637 -
                 (C117 * C906 + C51110 * C914) * C632) *
                    C51190) *
                   C17452) *
                  C50997) *
             C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C34007 +
             (C5683 + C5684) * C51190) *
                C17450 +
            ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
            C34014 * C17452) *
               C51247 -
           (C34015 * C17452 +
            (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
            (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
               C50997) *
              C1013 +
          (((C5660 * C34007 + C5661 * C51190) * C17450 +
            (C5665 * C34007 + C5666 * C51190) * C17451 +
            (C11422 * C34007 + (C1059 + C1060) * C51190) * C17452) *
               C50997 -
           (C34313 * C17452 + (C5663 * C51190 + C5664 * C34007) * C17451 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C34007) * C17450) *
               C51247) *
              C1014 +
          (((C6299 * C34007 + (C6315 + C6314) * C51190) * C17450 +
            (C5661 * C34007 + C6300 * C51190) * C17451 +
            (C5666 * C34007 + (C5689 + C5690) * C51190) * C17452) *
               C51247 -
           ((((C117 * C1248 + C51110 * C1256) * C51026 +
              (C117 * C1244 + C51110 * C1249) * C118) *
                 C51190 +
             (C1060 + C1059) * C34007) *
                C17452 +
            ((C5690 + C5689) * C51190 + C5662 * C34007) * C17451 +
            (C6301 * C51190 + C5663 * C34007) * C17450) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51026) *
               C34007 +
           ((C2449 * C476 + C2444 * C487 + C2450 * C883 + C2445 * C891 +
             C2451 * C884 + C2446 * C893) *
                C118 +
            (C2449 * C486 + C2444 * C494 + C2450 * C892 + C2445 * C907 +
             C2451 * C894 + C2446 * C908) *
                C51026) *
               C51190) *
              C50973 * C112 -
          (((C2864 + C2863 + C2862) * C51026 + (C2861 + C2860 + C2859) * C118) *
               C51190 +
           ((C2494 + C2493 + C2492) * C51026 + (C2491 + C2490 + C2489) * C118) *
               C34007) *
              C50973 * C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51026) *
               C34007 +
           ((C2865 + C2866 + C2867) * C118 + (C2868 + C2869 + C2870) * C51026) *
               C51190) *
              C50973 * C114 -
          (((C2451 * C906 + C2446 * C914 + C2450 * C904 + C2445 * C913 +
             C2449 * C483 + C2444 * C492) *
                C51026 +
            (C2451 * C890 + C2446 * C905 + C2450 * C889 + C2445 * C903 +
             C2449 * C474 + C2444 * C482) *
                C118) *
               C51190 +
           ((C2506 + C2505 + C2504) * C51026 + (C2503 + C2502 + C2501) * C118) *
               C34007) *
              C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C34007 +
           ((C36957 + C36958 + C36959) * C635 +
            (C36960 + C36961 + C36962) * C630 -
            (C2451 * C3298 + C2446 * C3302 + C2450 * C884 + C2445 * C893 +
             C2449 * C883 + C2444 * C891) *
                C636 -
            (C2451 * C3303 + C2446 * C3310 + C2450 * C894 + C2445 * C908 +
             C2449 * C892 + C2444 * C907) *
                C631 +
            (C2449 * C884 + C2444 * C893 + C2450 * C3298 + C2445 * C3302 +
             C2451 * C3299 + C2446 * C3304) *
                C637 +
            (C2449 * C894 + C2444 * C908 + C2450 * C3303 + C2445 * C3310 +
             C2451 * C3305 + C2446 * C3311) *
                C632) *
               C51190) *
              C50973 * C51247 +
          (((C2679 + C2678 + C2677) * C636 -
            ((C2494 + C2493 + C2492) * C630 + (C2491 + C2490 + C2489) * C635) +
            (C2682 + C2681 + C2680) * C631 - (C3043 + C3042 + C3041) * C637 -
            (C3046 + C3045 + C3044) * C632) *
               C34007 +
           ((C4261 + C4262 + C4263) * C636 -
            ((C2864 + C2863 + C2862) * C630 + (C2861 + C2860 + C2859) * C635) +
            (C4264 + C4265 + C4266) * C631 -
            (C2451 * C3301 + C2446 * C3308 + C2450 * C3300 + C2445 * C3306 +
             C2449 * C886 + C2444 * C897) *
                C637 -
            (C2451 * C3309 + C2446 * C3313 + C2450 * C3307 + C2445 * C3312 +
             C2449 * C898 + C2444 * C910) *
                C632) *
               C51190) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C34007 +
            ((C36957 + C36958 + C36959) * C118 +
             (C36960 + C36961 + C36962) * C51026) *
                C51190) *
               C50973 * C51247 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51190 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50973 * C50997) *
              C1013 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C34007 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51190) *
               C50973 * C50997 -
           (((C37547 + C37548 + C37549) * C51026 +
             (C37550 + C37551 + C37552) * C118) *
                C51190 +
            ((C36962 + C36961 + C36960) * C51026 +
             (C36959 + C36958 + C36957) * C118) *
                C34007) *
               C50973 * C51247) *
              C1014 +
          ((((C37552 + C37551 + C37550) * C118 +
             (C37549 + C37548 + C37547) * C51026) *
                C34007 +
            ((C2449 * C1247 + C2444 * C1255 + C2450 * C3745 + C2445 * C3753 +
              C2451 * C3744 + C2446 * C3752) *
                 C118 +
             (C2449 * C1254 + C2444 * C1259 + C2450 * C3751 + C2445 * C3757 +
              C2451 * C3750 + C2446 * C3756) *
                 C51026) *
                C51190) *
               C50973 * C51247 -
           (((C2451 * C3746 + C2446 * C3754 + C2450 * C3747 + C2445 * C3755 +
              C2449 * C1252 + C2444 * C1258) *
                 C51026 +
             (C2451 * C3742 + C2446 * C3748 + C2450 * C3743 + C2445 * C3749 +
              C2449 * C1246 + C2444 * C1253) *
                 C118) *
                C51190 +
            ((C3490 + C3489 + C3488) * C51026 +
             (C3487 + C3486 + C3485) * C118) *
                C34007) *
               C50973 * C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C118 +
            (C117 * C127 + C51110 * C140) * C51026) *
               C39356 +
           (C5683 + C5684) * C39357 + C6299 * C39358 +
           (C6315 + C6314) * C39359) *
              C50973 * C112 -
          (C6301 * C39359 + C5663 * C39358 + C5664 * C39357 +
           (C179 + C178) * C39356) *
              C50973 * C113 +
          (C188 * C39356 + C5665 * C39357 + C5666 * C39358 +
           (C5689 + C5690) * C39359) *
              C50973 * C114 -
          (((C117 * C1248 + C51110 * C1256) * C51026 +
            (C117 * C1244 + C51110 * C1249) * C118) *
               C39359 +
           (C1060 + C1059) * C39358 + C529 * C39357 + C191 * C39356) *
              C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C635 +
            (C117 * C127 + C51110 * C140) * C630 -
            (C117 * C300 + C51110 * C306) * C636 -
            (C117 * C307 + C51110 * C318) * C631 +
            (C117 * C638 + C51110 * C643) * C637 +
            (C117 * C644 + C51110 * C653) * C632) *
               C39356 +
           (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C39357 +
           (C6115 + C6116 - C6137 - C6138 + C6139 + C6140) * C39358 +
           (C6311 * C635 + C6310 * C630 - C6495 * C636 - C6496 * C631 +
            (C117 * C3744 + C51110 * C3752) * C637 +
            (C117 * C3750 + C51110 * C3756) * C632) *
               C39359) *
              C50973 * C51247 +
          ((C661 - (C660 + C659) + C662 - C689 - C690) * C39356 +
           (C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C39357 +
           (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C39358 +
           (C6497 * C636 - (C5680 * C630 + C5679 * C635) + C6498 * C631 -
            (C117 * C3742 + C51110 * C3748) * C637 -
            (C117 * C3746 + C51110 * C3754) * C632) *
               C39359) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C39356 +
            (C5683 + C5684) * C39357 + C6299 * C39358 + C39929 * C39359) *
               C50973 * C51247 -
           (C6301 * C39359 + C5663 * C39358 + C5664 * C39357 +
            (C179 + C178) * C39356) *
               C50973 * C50997) *
              C1013 +
          ((C5660 * C39356 + C5661 * C39357 + C6300 * C39358 +
            (C6316 + C6317) * C39359) *
               C50973 * C50997 -
           ((C6620 + C6619) * C39359 + C6612 * C39358 +
            (C5686 + C5685) * C39357 + (C5684 + C5683) * C39356) *
               C50973 * C51247) *
              C1014 +
          ((C6299 * C39356 + C39929 * C39357 + (C6619 + C6620) * C39358 +
            ((C117 * C6604 + C51110 * C6608) * C118 +
             (C117 * C6607 + C51110 * C6610) * C51026) *
                C39359) *
               C50973 * C51247 -
           (((C117 * C6605 + C51110 * C6609) * C51026 +
             (C117 * C6603 + C51110 * C6606) * C118) *
                C39359 +
            (C6317 + C6316) * C39358 + C6301 * C39357 + C5663 * C39356) *
               C50973 * C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C51110 * C126) * C298 +
                 (C117 * C127 + C51110 * C140) * C51254 -
                 (C117 * C300 + C51110 * C306) * C299 -
                 (C117 * C307 + C51110 * C318) * C51042) *
                    C34007 +
                (C6472 + C6473 - C6474 - C6475) * C51190) *
                   C17450 +
               ((C325 + C326 - C359 - C360) * C34007 + C7501 * C51190) *
                   C17451 +
               C34164 * C17452) *
                  C295 +
              (((C359 - (C326 + C325) + C360) * C34007 + C7502 * C51190) *
                   C17450 +
               ((C361 - (C332 + C331) + C362) * C34007 + C13061 * C51190) *
                   C17451 +
               ((C363 - (C338 + C337) + C364) * C34007 +
                (C1916 - (C1917 + C1918) + C1919) * C51190) *
                   C17452) *
                  C296 +
              (C34164 * C17450 +
               (C370 * C34007 + (C1918 + C1917 - C1916 - C1919) * C51190) *
                   C17451 +
               ((C346 + C345 - C365 - C366) * C34007 +
                (C519 * C298 + C520 * C51254 -
                 (C117 * C1643 + C51110 * C1644) * C299 -
                 (C117 * C1645 + C51110 * C1646) * C51042) *
                    C51190) *
                   C17452) *
                  C297) *
             C51056 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C51110 * C126) * C765 +
                (C117 * C127 + C51110 * C140) * C760 -
                (C117 * C300 + C51110 * C306) * C766 -
                (C117 * C307 + C51110 * C318) * C761 +
                (C117 * C638 + C51110 * C643) * C767 +
                (C117 * C644 + C51110 * C653) * C762 -
                (C117 * C769 + C51110 * C773) * C768 -
                (C117 * C774 + C51110 * C781) * C763) *
                   C34007 +
               (C5675 * C765 + C5676 * C760 - C6125 * C766 - C6126 * C761 +
                C6127 * C767 + C6128 * C762 -
                (C117 * C3298 + C51110 * C3302) * C768 -
                (C117 * C3303 + C51110 * C3310) * C763) *
                   C51190) *
                  C17450 +
              ((C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 +
                C683 * C767 + C684 * C762 -
                (C117 * C770 + C51110 * C775) * C768 -
                (C117 * C776 + C51110 * C782) * C763) *
                   C34007 +
               (C513 * C765 + C514 * C760 - C1666 * C766 - C1667 * C761 +
                C5853 * C767 + C5854 * C762 -
                (C117 * C3300 + C51110 * C3306) * C768 -
                (C117 * C3307 + C51110 * C3312) * C763) *
                   C51190) *
                  C17451 +
              ((C170 * C765 + C171 * C760 - C352 * C766 - C353 * C761 +
                C685 * C767 + C686 * C762 -
                (C117 * C771 + C51110 * C777) * C768 -
                (C117 * C778 + C51110 * C783) * C763) *
                   C34007 +
               (C515 * C765 + C516 * C760 - C1668 * C766 - C1669 * C761 +
                C11580 * C767 + C11581 * C762 -
                (C117 * C4244 + C51110 * C4245) * C768 -
                (C117 * C4246 + C51110 * C4247) * C763) *
                   C51190) *
                  C17452) *
             C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C34007 +
            (C6472 + C6473 - C6474 - C6475) * C51190) *
               C17450 +
           ((C325 + C326 - C359 - C360) * C34007 + C7501 * C51190) * C17451 +
           C34164 * C17452) *
              C50992 * C1013 +
          (((C6474 - (C6473 + C6472) + C6475) * C34007 +
            (C6478 - (C6477 + C6476) + C6479) * C51190) *
               C17450 +
           (C7502 * C34007 + C7503 * C51190) * C17451 +
           (C13061 * C34007 + (C5504 - (C5494 + C5495) + C5505) * C51190) *
               C17452) *
              C50992 * C1014 +
          ((C6505 * C34007 + (C6484 + C6483 - C6501 - C6502) * C51190) *
               C17450 +
           (C6500 * C34007 + (C6490 + C6489 - C6503 - C6504) * C51190) *
               C17451 +
           ((C5495 + C5494 - C5504 - C5505) * C34007 +
            (C5681 * C298 + C5682 * C51254 -
             (C117 * C7126 + C51110 * C7127) * C299 -
             (C117 * C7128 + C51110 * C7129) * C51042) *
                C51190) *
               C17452) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51254 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C299 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C34007 +
           ((C2449 * C476 + C2444 * C487 + C2450 * C883 + C2445 * C891 +
             C2451 * C884 + C2446 * C893) *
                C298 +
            (C2449 * C486 + C2444 * C494 + C2450 * C892 + C2445 * C907 +
             C2451 * C894 + C2446 * C908) *
                C51254 -
            (C2451 * C3298 + C2446 * C3302 + C2450 * C884 + C2445 * C893 +
             C2449 * C883 + C2444 * C891) *
                C299 -
            (C2451 * C3303 + C2446 * C3310 + C2450 * C894 + C2445 * C908 +
             C2449 * C892 + C2444 * C907) *
                C51042) *
               C51190) *
              C50973 * C295 +
          (((C2679 + C2678 + C2677) * C299 -
            ((C2494 + C2493 + C2492) * C51254 +
             (C2491 + C2490 + C2489) * C298) +
            (C2682 + C2681 + C2680) * C51042) *
               C34007 +
           ((C4261 + C4262 + C4263) * C299 -
            ((C2864 + C2863 + C2862) * C51254 +
             (C2861 + C2860 + C2859) * C298) +
            (C4264 + C4265 + C4266) * C51042) *
               C51190) *
              C50973 * C296 +
          (((C2500 + C2499 + C2498) * C298 + (C2497 + C2496 + C2495) * C51254 -
            (C2685 + C2684 + C2683) * C299 - (C2688 + C2687 + C2686) * C51042) *
               C34007 +
           ((C2865 + C2866 + C2867) * C298 + (C2868 + C2869 + C2870) * C51254 -
            (C2451 * C4244 + C2446 * C4245 + C2450 * C888 + C2445 * C901 +
             C2449 * C887 + C2444 * C899) *
                C299 -
            (C2451 * C4246 + C2446 * C4247 + C2450 * C902 + C2445 * C912 +
             C2449 * C900 + C2444 * C911) *
                C51042) *
               C51190) *
              C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
            C2451 * C638 + C2446 * C643) *
               C765 +
           (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
            C2451 * C644 + C2446 * C653) *
               C760 -
           (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
            C2449 * C300 + C2444 * C306) *
               C766 -
           (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
            C2449 * C307 + C2444 * C318) *
               C761 +
           (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
            C2451 * C3016 + C2446 * C3019) *
               C767 +
           (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
            C2451 * C3020 + C2446 * C3025) *
               C762 -
           (C2451 * C3144 + C2446 * C3146 + C2450 * C3016 + C2445 * C3019 +
            C2449 * C769 + C2444 * C773) *
               C768 -
           (C2451 * C3147 + C2446 * C3150 + C2450 * C3020 + C2445 * C3025 +
            C2449 * C774 + C2444 * C781) *
               C763) *
              C34007 +
          ((C36957 + C36958 + C36959) * C765 +
           (C36960 + C36961 + C36962) * C760 -
           (C2451 * C3298 + C2446 * C3302 + C2450 * C884 + C2445 * C893 +
            C2449 * C883 + C2444 * C891) *
               C766 -
           (C2451 * C3303 + C2446 * C3310 + C2450 * C894 + C2445 * C908 +
            C2449 * C892 + C2444 * C907) *
               C761 +
           (C2449 * C884 + C2444 * C893 + C2450 * C3298 + C2445 * C3302 +
            C2451 * C3299 + C2446 * C3304) *
               C767 +
           (C2449 * C894 + C2444 * C908 + C2450 * C3303 + C2445 * C3310 +
            C2451 * C3305 + C2446 * C3311) *
               C762 -
           (C2451 * C20750 + C2446 * C20751 + C2450 * C3299 + C2445 * C3304 +
            C2449 * C3298 + C2444 * C3302) *
               C768 -
           (C2451 * C20752 + C2446 * C20753 + C2450 * C3305 + C2445 * C3311 +
            C2449 * C3303 + C2444 * C3310) *
               C763) *
              C51190) *
         C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51254 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C299 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C34007 +
           ((C36957 + C36958 + C36959) * C298 +
            (C36960 + C36961 + C36962) * C51254 -
            (C37377 + C37378 + C37379) * C299 -
            (C37380 + C37381 + C37382) * C51042) *
               C51190) *
              C50973 * C50992 * C1013 +
          (((C37379 + C37378 + C37377) * C299 -
            ((C36962 + C36961 + C36960) * C51254 +
             (C36959 + C36958 + C36957) * C298) +
            (C37382 + C37381 + C37380) * C51042) *
               C34007 +
           ((C37711 + C37712 + C37713) * C299 -
            ((C37547 + C37548 + C37549) * C51254 +
             (C37550 + C37551 + C37552) * C298) +
            (C37714 + C37715 + C37716) * C51042) *
               C51190) *
              C50973 * C50992 * C1014 +
          (((C37552 + C37551 + C37550) * C298 +
            (C37549 + C37548 + C37547) * C51254 -
            (C37713 + C37712 + C37711) * C299 -
            (C37716 + C37715 + C37714) * C51042) *
               C34007 +
           ((C2449 * C1247 + C2444 * C1255 + C2450 * C3745 + C2445 * C3753 +
             C2451 * C3744 + C2446 * C3752) *
                C298 +
            (C2449 * C1254 + C2444 * C1259 + C2450 * C3751 + C2445 * C3757 +
             C2451 * C3750 + C2446 * C3756) *
                C51254 -
            (C2451 * C21020 + C2446 * C21022 + C2450 * C3744 + C2445 * C3752 +
             C2449 * C3745 + C2444 * C3753) *
                C299 -
            (C2451 * C21021 + C2446 * C21023 + C2450 * C3750 + C2445 * C3756 +
             C2449 * C3751 + C2444 * C3757) *
                C51042) *
               C51190) *
              C50973 * C50992 * C1015)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C298 +
            (C117 * C127 + C51110 * C140) * C51254 -
            (C117 * C300 + C51110 * C306) * C299 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C39356 +
           (C6472 + C6473 - C6474 - C6475) * C39357 + C6505 * C39358 +
           (C6484 + C6483 - C6501 - C6502) * C39359) *
              C50973 * C295 +
          ((C359 - (C326 + C325) + C360) * C39356 + C7502 * C39357 +
           C7503 * C39358 + (C6503 - (C6489 + C6490) + C6504) * C39359) *
              C50973 * C296 +
          (C369 * C39356 + C11273 * C39357 +
           (C5495 + C5494 - C5504 - C5505) * C39358 +
           (C5681 * C298 + C5682 * C51254 -
            (C117 * C7126 + C51110 * C7127) * C299 -
            (C117 * C7128 + C51110 * C7129) * C51042) *
               C39359) *
              C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C119 + C51110 * C126) * C765 +
           (C117 * C127 + C51110 * C140) * C760 -
           (C117 * C300 + C51110 * C306) * C766 -
           (C117 * C307 + C51110 * C318) * C761 +
           (C117 * C638 + C51110 * C643) * C767 +
           (C117 * C644 + C51110 * C653) * C762 -
           (C117 * C769 + C51110 * C773) * C768 -
           (C117 * C774 + C51110 * C781) * C763) *
              C39356 +
          (C5675 * C765 + C5676 * C760 - C6125 * C766 - C6126 * C761 +
           C6127 * C767 + C6128 * C762 -
           (C117 * C3298 + C51110 * C3302) * C768 -
           (C117 * C3303 + C51110 * C3310) * C763) *
              C39357 +
          (C5677 * C765 + C5678 * C760 - C6129 * C766 - C6130 * C761 +
           C6131 * C767 + C6132 * C762 -
           (C117 * C3636 + C51110 * C3638) * C768 -
           (C117 * C3639 + C51110 * C3642) * C763) *
              C39358 +
          (C6311 * C765 + C6310 * C760 - C6495 * C766 - C6496 * C761 +
           (C117 * C3744 + C51110 * C3752) * C767 +
           (C117 * C3750 + C51110 * C3756) * C762 -
           (C117 * C21020 + C51110 * C21022) * C768 -
           (C117 * C21021 + C51110 * C21023) * C763) *
              C39359) *
         C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C298 +
            (C117 * C127 + C51110 * C140) * C51254 -
            (C117 * C300 + C51110 * C306) * C299 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C39356 +
           (C6472 + C6473 - C6474 - C6475) * C39357 + C6505 * C39358 +
           C40038 * C39359) *
              C50973 * C50992 * C1013 +
          ((C6474 - (C6473 + C6472) + C6475) * C39356 +
           (C6478 - (C6477 + C6476) + C6479) * C39357 +
           (C6501 - (C6483 + C6484) + C6502) * C39358 +
           (C40039 - (C40031 + C40032) + C40040) * C39359) *
              C50973 * C50992 * C1014 +
          (C6505 * C39356 + C40038 * C39357 +
           (C40032 + C40031 - C40039 - C40040) * C39358 +
           ((C117 * C6604 + C51110 * C6608) * C298 +
            (C117 * C6607 + C51110 * C6610) * C51254 -
            (C117 * C23303 + C51110 * C23305) * C299 -
            (C117 * C23304 + C51110 * C23306) * C51042) *
               C39359) *
              C50973 * C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((((C117 * C119 + C51110 * C126) * C118 +
                  (C117 * C127 + C51110 * C140) * C51026) *
                     C34007 +
                 (C5683 + C5684) * C51190) *
                    C17450 +
                ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
                C34014 * C17452) *
                   C295 -
               (C34015 * C17452 +
                (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
                (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
                   C296 +
               (C34014 * C17450 + (C189 * C34007 + C11422 * C51190) * C17451 +
                ((C185 + C184) * C34007 + (C527 + C528) * C51190) * C17452) *
                   C297) *
                  C51256 +
              (((C5660 * C34007 + C5661 * C51190) * C17450 +
                (C5665 * C34007 + C5666 * C51190) * C17451 +
                (C11422 * C34007 + (C1059 + C1060) * C51190) * C17452) *
                   C296 -
               (C34313 * C17452 + (C5663 * C51190 + C5664 * C34007) * C17451 +
                ((C5686 + C5685) * C51190 + (C5684 + C5683) * C34007) *
                    C17450) *
                   C295 -
               ((((C117 * C1029 + C51110 * C1035) * C51026 +
                  (C117 * C1020 + C51110 * C1030) * C118) *
                     C51190 +
                 (C528 + C527) * C34007) *
                    C17452 +
                ((C1060 + C1059) * C51190 + C529 * C34007) * C17451 +
                C34313 * C17450) *
                   C297) *
                  C51068) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C51110 * C126) * C635 +
                 (C117 * C127 + C51110 * C140) * C630 -
                 (C117 * C300 + C51110 * C306) * C636 -
                 (C117 * C307 + C51110 * C318) * C631 +
                 (C117 * C638 + C51110 * C643) * C637 +
                 (C117 * C644 + C51110 * C653) * C632) *
                    C34007 +
                (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51190) *
                   C17450 +
               ((C659 + C660 - C661 - C662 + C689 + C690) * C34007 +
                (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51190) *
                   C17451 +
               ((C667 + C668 - C669 - C670 + C691 + C692) * C34007 +
                (C11572 + C11573 - C11574 - C11575 + C11582 + C11583) *
                    C51190) *
                   C17452) *
                  C50992 * C51256 +
              (((C6133 - (C6106 + C6105) + C6134 - C6135 - C6136) * C34007 +
                (C6137 - (C6116 + C6115) + C6138 - C6139 - C6140) * C51190) *
                   C17450 +
               ((C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C34007 +
                (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C51190) *
                   C17451 +
               ((C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) *
                    C34007 +
                (C5500 * C636 - (C1052 * C630 + C1051 * C635) + C5501 * C631 -
                 (C117 * C3462 + C51110 * C3468) * C637 -
                 (C117 * C3467 + C51110 * C3471) * C632) *
                    C51190) *
                   C17452) *
                  C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C34007 +
            (C5683 + C5684) * C51190) *
               C17450 +
           ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
           C34014 * C17452) *
              C50992 * C1240 -
          (C34313 * C17452 + (C5663 * C51190 + C5664 * C34007) * C17451 +
           ((C5686 + C5685) * C51190 + (C5684 + C5683) * C34007) * C17450) *
              C50992 * C1241 +
          ((C6299 * C34007 + (C6315 + C6314) * C51190) * C17450 +
           (C5661 * C34007 + C6300 * C51190) * C17451 +
           (C5666 * C34007 + (C5689 + C5690) * C51190) * C17452) *
              C50992 * C1242 -
          ((((C117 * C6293 + C51110 * C6297) * C51026 +
             (C117 * C6288 + C51110 * C6294) * C118) *
                C51190 +
            (C5690 + C5689) * C34007) *
               C17452 +
           ((C6317 + C6316) * C51190 + C6301 * C34007) * C17451 +
           ((C6620 + C6619) * C51190 + C6612 * C34007) * C17450) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C34007 +
            ((C36957 + C36958 + C36959) * C118 +
             (C36960 + C36961 + C36962) * C51026) *
                C51190) *
               C50973 * C295 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51190 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50973 * C296 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51026) *
                C34007 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51190) *
               C50973 * C297) *
              C51256 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C34007 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51190) *
               C50973 * C296 -
           (((C2451 * C3464 + C2446 * C3469 + C2450 * C1163 + C2445 * C1170 +
              C2449 * C1022 + C2444 * C1031) *
                 C51026 +
             (C2451 * C3460 + C2446 * C3463 + C2450 * C1158 + C2445 * C1162 +
              C2449 * C1016 + C2444 * C1021) *
                 C118) *
                C51190 +
            ((C36962 + C36961 + C36960) * C51026 +
             (C36959 + C36958 + C36957) * C118) *
                C34007) *
               C50973 * C295 -
           (((C2451 * C3467 + C2446 * C3471 + C2450 * C1167 + C2445 * C1172 +
              C2449 * C1026 + C2444 * C1033) *
                 C51026 +
             (C2451 * C3462 + C2446 * C3468 + C2450 * C1160 + C2445 * C1166 +
              C2449 * C1018 + C2444 * C1025) *
                 C118) *
                C51190 +
            ((C2870 + C2869 + C2868) * C51026 +
             (C2867 + C2866 + C2865) * C118) *
                C34007) *
               C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C34007 +
           ((C36957 + C36958 + C36959) * C635 +
            (C36960 + C36961 + C36962) * C630 -
            (C37377 + C37378 + C37379) * C636 -
            (C37380 + C37381 + C37382) * C631 +
            (C37383 + C37384 + C37385) * C637 +
            (C37386 + C37387 + C37388) * C632) *
               C51190) *
              C50973 * C50992 * C51256 +
          (((C37379 + C37378 + C37377) * C636 -
            ((C36962 + C36961 + C36960) * C630 +
             (C36959 + C36958 + C36957) * C635) +
            (C37382 + C37381 + C37380) * C631 -
            (C37385 + C37384 + C37383) * C637 -
            (C37388 + C37387 + C37386) * C632) *
               C34007 +
           ((C2449 * C1158 + C2444 * C1162 + C2450 * C3460 + C2445 * C3463 +
             C2451 * C3636 + C2446 * C3638) *
                C636 -
            ((C2451 * C3464 + C2446 * C3469 + C2450 * C1163 + C2445 * C1170 +
              C2449 * C1022 + C2444 * C1031) *
                 C630 +
             (C2451 * C3460 + C2446 * C3463 + C2450 * C1158 + C2445 * C1162 +
              C2449 * C1016 + C2444 * C1021) *
                 C635) +
            (C2449 * C1163 + C2444 * C1170 + C2450 * C3464 + C2445 * C3469 +
             C2451 * C3639 + C2446 * C3642) *
                C631 -
            (C2451 * C20950 + C2446 * C20951 + C2450 * C3636 + C2445 * C3638 +
             C2449 * C3460 + C2444 * C3463) *
                C637 -
            (C2451 * C20952 + C2446 * C20953 + C2450 * C3639 + C2445 * C3642 +
             C2449 * C3464 + C2444 * C3469) *
                C632) *
               C51190) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51026) *
               C34007 +
           ((C36957 + C36958 + C36959) * C118 +
            (C36960 + C36961 + C36962) * C51026) *
               C51190) *
              C50973 * C50992 * C1240 -
          (((C37547 + C37548 + C37549) * C51026 +
            (C37550 + C37551 + C37552) * C118) *
               C51190 +
           ((C36962 + C36961 + C36960) * C51026 +
            (C36959 + C36958 + C36957) * C118) *
               C34007) *
              C50973 * C50992 * C1241 +
          (((C37552 + C37551 + C37550) * C118 +
            (C37549 + C37548 + C37547) * C51026) *
               C34007 +
           ((C37827 + C37828 + C37829) * C118 +
            (C37830 + C37831 + C37832) * C51026) *
               C51190) *
              C50973 * C50992 * C1242 -
          (((C2451 * C23182 + C2446 * C23183 + C2450 * C6466 + C2445 * C6469 +
             C2449 * C6290 + C2444 * C6295) *
                C51026 +
            (C2451 * C23180 + C2446 * C23181 + C2450 * C6463 + C2445 * C6465 +
             C2449 * C6286 + C2444 * C6289) *
                C118) *
               C51190 +
           ((C37832 + C37831 + C37830) * C51026 +
            (C37829 + C37828 + C37827) * C118) *
               C34007) *
              C50973 * C50992 * C1243)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C39356 +
            (C5683 + C5684) * C39357 + C6299 * C39358 +
            (C6315 + C6314) * C39359) *
               C50973 * C295 -
           (C6301 * C39359 + C5663 * C39358 + C5664 * C39357 +
            (C179 + C178) * C39356) *
               C50973 * C296 +
           (C188 * C39356 + C5665 * C39357 + C5666 * C39358 +
            (C5689 + C5690) * C39359) *
               C50973 * C297) *
              C51256 +
          ((C5660 * C39356 + C5661 * C39357 + C6300 * C39358 +
            (C6316 + C6317) * C39359) *
               C50973 * C296 -
           ((C6620 + C6619) * C39359 + C6612 * C39358 +
            (C5686 + C5685) * C39357 + (C5684 + C5683) * C39356) *
               C50973 * C295 -
           (((C117 * C6293 + C51110 * C6297) * C51026 +
             (C117 * C6288 + C51110 * C6294) * C118) *
                C39359 +
            (C5690 + C5689) * C39358 + C5662 * C39357 + C530 * C39356) *
               C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C635 +
            (C117 * C127 + C51110 * C140) * C630 -
            (C117 * C300 + C51110 * C306) * C636 -
            (C117 * C307 + C51110 * C318) * C631 +
            (C117 * C638 + C51110 * C643) * C637 +
            (C117 * C644 + C51110 * C653) * C632) *
               C39356 +
           (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C39357 +
           (C6115 + C6116 - C6137 - C6138 + C6139 + C6140) * C39358 +
           (C39819 + C39820 - C39821 - C39822 + C39829 + C39830) * C39359) *
              C50973 * C50992 * C51256 +
          ((C6133 - (C6106 + C6105) + C6134 - C6135 - C6136) * C39356 +
           (C6137 - (C6116 + C6115) + C6138 - C6139 - C6140) * C39357 +
           (C39821 - (C39820 + C39819) + C39822 - C39829 - C39830) * C39358 +
           ((C117 * C6463 + C51110 * C6465) * C636 -
            (C6618 * C630 + C6617 * C635) +
            (C117 * C6466 + C51110 * C6469) * C631 -
            (C117 * C23180 + C51110 * C23181) * C637 -
            (C117 * C23182 + C51110 * C23183) * C632) *
               C39359) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C118 +
            (C117 * C127 + C51110 * C140) * C51026) *
               C39356 +
           (C5683 + C5684) * C39357 + C6299 * C39358 + C39929 * C39359) *
              C50973 * C50992 * C1240 -
          (C40111 * C39359 + C6612 * C39358 + (C5686 + C5685) * C39357 +
           (C5684 + C5683) * C39356) *
              C50973 * C50992 * C1241 +
          (C6299 * C39356 + C39929 * C39357 + (C6619 + C6620) * C39358 +
           (C40118 + C40119) * C39359) *
              C50973 * C50992 * C1242 -
          (((C117 * C40107 + C51110 * C40109) * C51026 +
            (C117 * C40106 + C51110 * C40108) * C118) *
               C39359 +
           (C40119 + C40118) * C39358 + C40111 * C39357 + C6612 * C39356) *
              C50973 * C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C34007 +
            ((C36957 + C36958 + C36959) * C118 +
             (C36960 + C36961 + C36962) * C51026) *
                C51190) *
               C50973 * C51300 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51190 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50973 * C51285 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51026) *
                C34007 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51190) *
               C50973 * C1362) *
              C1775 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C34007 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51190) *
               C50973 * C51285 -
           (((C37547 + C37548 + C37549) * C51026 +
             (C37550 + C37551 + C37552) * C118) *
                C51190 +
            ((C36962 + C36961 + C36960) * C51026 +
             (C36959 + C36958 + C36957) * C118) *
                C34007) *
               C50973 * C51300 -
           (((C2451 * C3467 + C2446 * C3471 + C2450 * C1167 + C2445 * C1172 +
              C2449 * C1026 + C2444 * C1033) *
                 C51026 +
             (C2451 * C3462 + C2446 * C3468 + C2450 * C1160 + C2445 * C1166 +
              C2449 * C1018 + C2444 * C1025) *
                 C118) *
                C51190 +
            ((C2870 + C2869 + C2868) * C51026 +
             (C2867 + C2866 + C2865) * C118) *
                C34007) *
               C50973 * C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C34007 +
             (C5683 + C5684) * C51190) *
                C17450 +
            ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
            C34014 * C17452) *
               C51300 -
           (C34015 * C17452 +
            (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
            (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
               C51285 +
           (C34014 * C17450 + (C189 * C34007 + C11422 * C51190) * C17451 +
            ((C185 + C184) * C34007 + (C527 + C528) * C51190) * C17452) *
               C1362) *
              C1775 +
          (((C5660 * C34007 + C5661 * C51190) * C17450 +
            (C5665 * C34007 + C5666 * C51190) * C17451 +
            (C11422 * C34007 + (C1059 + C1060) * C51190) * C17452) *
               C51285 -
           (C34313 * C17452 + (C5663 * C51190 + C5664 * C34007) * C17451 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C34007) * C17450) *
               C51300 -
           ((((C117 * C1029 + C51110 * C1035) * C51026 +
              (C117 * C1020 + C51110 * C1030) * C118) *
                 C51190 +
             (C528 + C527) * C34007) *
                C17452 +
            ((C1060 + C1059) * C51190 + C529 * C34007) * C17451 +
            C34313 * C17450) *
               C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C39356 +
            (C5683 + C5684) * C39357 + C6299 * C39358 + C39929 * C39359) *
               C50973 * C51300 -
           (C6301 * C39359 + C5663 * C39358 + C5664 * C39357 +
            (C179 + C178) * C39356) *
               C50973 * C51285 +
           (C188 * C39356 + C5665 * C39357 + C5666 * C39358 +
            (C5689 + C5690) * C39359) *
               C50973 * C1362) *
              C1775 +
          ((C5660 * C39356 + C5661 * C39357 + C6300 * C39358 +
            (C6316 + C6317) * C39359) *
               C50973 * C51285 -
           (C40111 * C39359 + C6612 * C39358 + (C5686 + C5685) * C39357 +
            (C5684 + C5683) * C39356) *
               C50973 * C51300 -
           (((C117 * C6293 + C51110 * C6297) * C51026 +
             (C117 * C6288 + C51110 * C6294) * C118) *
                C39359 +
            (C5690 + C5689) * C39358 + C5662 * C39357 + C530 * C39356) *
               C50973 * C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C298 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51254 -
             (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
              C2449 * C300 + C2444 * C306) *
                 C299 -
             (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
              C2449 * C307 + C2444 * C318) *
                 C51042) *
                C34007 +
            ((C36957 + C36958 + C36959) * C298 +
             (C36960 + C36961 + C36962) * C51254 -
             (C37377 + C37378 + C37379) * C299 -
             (C37380 + C37381 + C37382) * C51042) *
                C51190) *
               C50973 * C1490 +
           (((C2679 + C2678 + C2677) * C299 -
             ((C2494 + C2493 + C2492) * C51254 +
              (C2491 + C2490 + C2489) * C298) +
             (C2682 + C2681 + C2680) * C51042) *
                C34007 +
            ((C4261 + C4262 + C4263) * C299 -
             ((C2864 + C2863 + C2862) * C51254 +
              (C2861 + C2860 + C2859) * C298) +
             (C4264 + C4265 + C4266) * C51042) *
                C51190) *
               C50973 * C50997) *
              C1775 +
          ((((C37379 + C37378 + C37377) * C299 -
             ((C36962 + C36961 + C36960) * C51254 +
              (C36959 + C36958 + C36957) * C298) +
             (C37382 + C37381 + C37380) * C51042) *
                C34007 +
            ((C37711 + C37712 + C37713) * C299 -
             ((C37547 + C37548 + C37549) * C51254 +
              (C37550 + C37551 + C37552) * C298) +
             (C37714 + C37715 + C37716) * C51042) *
                C51190) *
               C50973 * C1490 +
           (((C2859 + C2860 + C2861) * C298 + (C2862 + C2863 + C2864) * C51254 -
             (C4263 + C4262 + C4261) * C299 -
             (C4266 + C4265 + C4264) * C51042) *
                C34007 +
            ((C3485 + C3486 + C3487) * C298 + (C3488 + C3489 + C3490) * C51254 -
             (C2451 * C3637 + C2446 * C3640 + C2450 * C3461 + C2445 * C3465 +
              C2449 * C1159 + C2444 * C1164) *
                 C299 -
             (C2451 * C3641 + C2446 * C3643 + C2450 * C3466 + C2445 * C3470 +
              C2449 * C1165 + C2444 * C1171) *
                 C51042) *
                C51190) *
               C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C298 +
              (C117 * C127 + C51110 * C140) * C51254 -
              (C117 * C300 + C51110 * C306) * C299 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C34007 +
             (C6472 + C6473 - C6474 - C6475) * C51190) *
                C17450 +
            ((C325 + C326 - C359 - C360) * C34007 + C7501 * C51190) * C17451 +
            C34164 * C17452) *
               C1490 +
           (((C359 - (C326 + C325) + C360) * C34007 + C7502 * C51190) * C17450 +
            ((C361 - (C332 + C331) + C362) * C34007 + C13061 * C51190) *
                C17451 +
            ((C363 - (C338 + C337) + C364) * C34007 +
             (C1916 - (C1917 + C1918) + C1919) * C51190) *
                C17452) *
               C50997) *
              C1775 +
          ((((C6474 - (C6473 + C6472) + C6475) * C34007 +
             (C6478 - (C6477 + C6476) + C6479) * C51190) *
                C17450 +
            (C7502 * C34007 + C7503 * C51190) * C17451 +
            (C13061 * C34007 + (C5504 - (C5494 + C5495) + C5505) * C51190) *
                C17452) *
               C1490 +
           ((C7501 * C34007 + C6500 * C51190) * C17450 +
            (C11273 * C34007 + (C5495 + C5494 - C5504 - C5505) * C51190) *
                C17451 +
            ((C1918 + C1917 - C1916 - C1919) * C34007 +
             (C1053 * C298 + C1054 * C51254 -
              (C117 * C1161 + C51110 * C1168) * C299 -
              (C117 * C1169 + C51110 * C1173) * C51042) *
                 C51190) *
                C17452) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C39356 +
            (C6472 + C6473 - C6474 - C6475) * C39357 + C6505 * C39358 +
            C40038 * C39359) *
               C50973 * C1490 +
           ((C359 - (C326 + C325) + C360) * C39356 + C7502 * C39357 +
            C7503 * C39358 + (C6503 - (C6489 + C6490) + C6504) * C39359) *
               C50973 * C50997) *
              C1775 +
          (((C6474 - (C6473 + C6472) + C6475) * C39356 +
            (C6478 - (C6477 + C6476) + C6479) * C39357 +
            (C6501 - (C6483 + C6484) + C6502) * C39358 +
            (C40039 - (C40031 + C40032) + C40040) * C39359) *
               C50973 * C1490 +
           (C7501 * C39356 + C6500 * C39357 +
            (C6490 + C6489 - C6503 - C6504) * C39358 +
            (C6312 * C298 + C6313 * C51254 -
             (C117 * C6464 + C51110 * C6467) * C299 -
             (C117 * C6468 + C51110 * C6470) * C51042) *
                C39359) *
               C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C34007 +
            ((C36957 + C36958 + C36959) * C118 +
             (C36960 + C36961 + C36962) * C51026) *
                C51190) *
               C50973 * C1490 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51190 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50973 * C50997) *
              C51302 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C34007 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51190) *
               C50973 * C50997 -
           (((C37547 + C37548 + C37549) * C51026 +
             (C37550 + C37551 + C37552) * C118) *
                C51190 +
            ((C36962 + C36961 + C36960) * C51026 +
             (C36959 + C36958 + C36957) * C118) *
                C34007) *
               C50973 * C1490) *
              C51291 +
          ((((C37552 + C37551 + C37550) * C118 +
             (C37549 + C37548 + C37547) * C51026) *
                C34007 +
            ((C37827 + C37828 + C37829) * C118 +
             (C37830 + C37831 + C37832) * C51026) *
                C51190) *
               C50973 * C1490 -
           (((C2451 * C3746 + C2446 * C3754 + C2450 * C3747 + C2445 * C3755 +
              C2449 * C1252 + C2444 * C1258) *
                 C51026 +
             (C2451 * C3742 + C2446 * C3748 + C2450 * C3743 + C2445 * C3749 +
              C2449 * C1246 + C2444 * C1253) *
                 C118) *
                C51190 +
            ((C3490 + C3489 + C3488) * C51026 +
             (C3487 + C3486 + C3485) * C118) *
                C34007) *
               C50973 * C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C34007 +
             (C5683 + C5684) * C51190) *
                C17450 +
            ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
            C34014 * C17452) *
               C1490 -
           (C34015 * C17452 +
            (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
            (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
               C50997) *
              C51302 +
          (((C5660 * C34007 + C5661 * C51190) * C17450 +
            (C5665 * C34007 + C5666 * C51190) * C17451 +
            (C11422 * C34007 + (C1059 + C1060) * C51190) * C17452) *
               C50997 -
           (C34313 * C17452 + (C5663 * C51190 + C5664 * C34007) * C17451 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C34007) * C17450) *
               C1490) *
              C51291 +
          (((C6299 * C34007 + (C6315 + C6314) * C51190) * C17450 +
            (C5661 * C34007 + C6300 * C51190) * C17451 +
            (C5666 * C34007 + (C5689 + C5690) * C51190) * C17452) *
               C1490 -
           ((((C117 * C1248 + C51110 * C1256) * C51026 +
              (C117 * C1244 + C51110 * C1249) * C118) *
                 C51190 +
             (C1060 + C1059) * C34007) *
                C17452 +
            ((C5690 + C5689) * C51190 + C5662 * C34007) * C17451 +
            (C6301 * C51190 + C5663 * C34007) * C17450) *
               C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C39356 +
            (C5683 + C5684) * C39357 + C6299 * C39358 + C39929 * C39359) *
               C50973 * C1490 -
           (C6301 * C39359 + C5663 * C39358 + C5664 * C39357 +
            (C179 + C178) * C39356) *
               C50973 * C50997) *
              C51302 +
          ((C5660 * C39356 + C5661 * C39357 + C6300 * C39358 +
            (C6316 + C6317) * C39359) *
               C50973 * C50997 -
           (C40111 * C39359 + C6612 * C39358 + (C5686 + C5685) * C39357 +
            (C5684 + C5683) * C39356) *
               C50973 * C1490) *
              C51291 +
          ((C6299 * C39356 + C39929 * C39357 + (C6619 + C6620) * C39358 +
            (C40118 + C40119) * C39359) *
               C50973 * C1490 -
           (((C117 * C6605 + C51110 * C6609) * C51026 +
             (C117 * C6603 + C51110 * C6606) * C118) *
                C39359 +
            (C6317 + C6316) * C39358 + C6301 * C39357 + C5663 * C39356) *
               C50973 * C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C34007 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51190) *
               C17450 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C34007 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51190) *
               C17451 +
           ((C667 + C668 - C669 - C670 + C691 + C692) * C34007 +
            (C11572 + C11573 - C11574 - C11575 + C11582 + C11583) * C51190) *
               C17452) *
              C51247 +
          (((C661 - (C660 + C659) + C662 - C689 - C690) * C34007 +
            (C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C51190) *
               C17450 +
           ((C669 - (C668 + C667) + C670 - C691 - C692) * C34007 +
            (C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) * C51190) *
               C17451 +
           ((C677 - (C676 + C675) + C678 - C693 - C694) * C34007 +
            (C1670 * C636 - (C518 * C630 + C517 * C635) + C1671 * C631 -
             (C117 * C890 + C51110 * C905) * C637 -
             (C117 * C906 + C51110 * C914) * C632) *
                C51190) *
               C17452) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C34007 +
            (C5683 + C5684) * C51190) *
               C17450 +
           ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
           C34014 * C17452) *
              C112 -
          (C34015 * C17452 + (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
           (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
              C113 +
          (C34014 * C17450 + (C189 * C34007 + C11422 * C51190) * C17451 +
           ((C185 + C184) * C34007 + (C527 + C528) * C51190) * C17452) *
              C114 -
          ((((C117 * C488 + C51110 * C495) * C51026 +
             (C117 * C477 + C51110 * C489) * C118) *
                C51190 +
            (C187 + C186) * C34007) *
               C17452 +
           ((C528 + C527) * C51190 + C190 * C34007) * C17451 +
           C34015 * C17450) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51026) *
               C34007 +
           ((C2449 * C476 + C2444 * C487 + C2450 * C883 + C2445 * C891 +
             C2451 * C884 + C2446 * C893) *
                C118 +
            (C2449 * C486 + C2444 * C494 + C2450 * C892 + C2445 * C907 +
             C2451 * C894 + C2446 * C908) *
                C51026) *
               C51190) *
              C50973 * C112 -
          (((C2864 + C2863 + C2862) * C51026 + (C2861 + C2860 + C2859) * C118) *
               C51190 +
           ((C2494 + C2493 + C2492) * C51026 + (C2491 + C2490 + C2489) * C118) *
               C34007) *
              C50973 * C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51026) *
               C34007 +
           ((C2865 + C2866 + C2867) * C118 + (C2868 + C2869 + C2870) * C51026) *
               C51190) *
              C50973 * C114 -
          (((C2451 * C906 + C2446 * C914 + C2450 * C904 + C2445 * C913 +
             C2449 * C483 + C2444 * C492) *
                C51026 +
            (C2451 * C890 + C2446 * C905 + C2450 * C889 + C2445 * C903 +
             C2449 * C474 + C2444 * C482) *
                C118) *
               C51190 +
           ((C2506 + C2505 + C2504) * C51026 + (C2503 + C2502 + C2501) * C118) *
               C34007) *
              C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C34007 +
           ((C36957 + C36958 + C36959) * C635 +
            (C36960 + C36961 + C36962) * C630 -
            (C2451 * C3298 + C2446 * C3302 + C2450 * C884 + C2445 * C893 +
             C2449 * C883 + C2444 * C891) *
                C636 -
            (C2451 * C3303 + C2446 * C3310 + C2450 * C894 + C2445 * C908 +
             C2449 * C892 + C2444 * C907) *
                C631 +
            (C2449 * C884 + C2444 * C893 + C2450 * C3298 + C2445 * C3302 +
             C2451 * C3299 + C2446 * C3304) *
                C637 +
            (C2449 * C894 + C2444 * C908 + C2450 * C3303 + C2445 * C3310 +
             C2451 * C3305 + C2446 * C3311) *
                C632) *
               C51190) *
              C50973 * C51247 +
          (((C2679 + C2678 + C2677) * C636 -
            ((C2494 + C2493 + C2492) * C630 + (C2491 + C2490 + C2489) * C635) +
            (C2682 + C2681 + C2680) * C631 - (C3043 + C3042 + C3041) * C637 -
            (C3046 + C3045 + C3044) * C632) *
               C34007 +
           ((C4261 + C4262 + C4263) * C636 -
            ((C2864 + C2863 + C2862) * C630 + (C2861 + C2860 + C2859) * C635) +
            (C4264 + C4265 + C4266) * C631 -
            (C2451 * C3301 + C2446 * C3308 + C2450 * C3300 + C2445 * C3306 +
             C2449 * C886 + C2444 * C897) *
                C637 -
            (C2451 * C3309 + C2446 * C3313 + C2450 * C3307 + C2445 * C3312 +
             C2449 * C898 + C2444 * C910) *
                C632) *
               C51190) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C118 +
            (C117 * C127 + C51110 * C140) * C51026) *
               C39356 +
           (C5683 + C5684) * C39357 + C6299 * C39358 +
           (C6315 + C6314) * C39359) *
              C50973 * C112 -
          (C6301 * C39359 + C5663 * C39358 + C5664 * C39357 +
           (C179 + C178) * C39356) *
              C50973 * C113 +
          (C188 * C39356 + C5665 * C39357 + C5666 * C39358 +
           (C5689 + C5690) * C39359) *
              C50973 * C114 -
          (((C117 * C1248 + C51110 * C1256) * C51026 +
            (C117 * C1244 + C51110 * C1249) * C118) *
               C39359 +
           (C1060 + C1059) * C39358 + C529 * C39357 + C191 * C39356) *
              C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C635 +
            (C117 * C127 + C51110 * C140) * C630 -
            (C117 * C300 + C51110 * C306) * C636 -
            (C117 * C307 + C51110 * C318) * C631 +
            (C117 * C638 + C51110 * C643) * C637 +
            (C117 * C644 + C51110 * C653) * C632) *
               C39356 +
           (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C39357 +
           (C6115 + C6116 - C6137 - C6138 + C6139 + C6140) * C39358 +
           (C6311 * C635 + C6310 * C630 - C6495 * C636 - C6496 * C631 +
            (C117 * C3744 + C51110 * C3752) * C637 +
            (C117 * C3750 + C51110 * C3756) * C632) *
               C39359) *
              C50973 * C51247 +
          ((C661 - (C660 + C659) + C662 - C689 - C690) * C39356 +
           (C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C39357 +
           (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C39358 +
           (C6497 * C636 - (C5680 * C630 + C5679 * C635) + C6498 * C631 -
            (C117 * C3742 + C51110 * C3748) * C637 -
            (C117 * C3746 + C51110 * C3754) * C632) *
               C39359) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C765 +
            (C117 * C127 + C51110 * C140) * C760 -
            (C117 * C300 + C51110 * C306) * C766 -
            (C117 * C307 + C51110 * C318) * C761 +
            (C117 * C638 + C51110 * C643) * C767 +
            (C117 * C644 + C51110 * C653) * C762 -
            (C117 * C769 + C51110 * C773) * C768 -
            (C117 * C774 + C51110 * C781) * C763) *
               C34007 +
           (C5675 * C765 + C5676 * C760 - C6125 * C766 - C6126 * C761 +
            C6127 * C767 + C6128 * C762 -
            (C117 * C3298 + C51110 * C3302) * C768 -
            (C117 * C3303 + C51110 * C3310) * C763) *
               C51190) *
              C17450 +
          ((C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 +
            C683 * C767 + C684 * C762 - (C117 * C770 + C51110 * C775) * C768 -
            (C117 * C776 + C51110 * C782) * C763) *
               C34007 +
           (C513 * C765 + C514 * C760 - C1666 * C766 - C1667 * C761 +
            C5853 * C767 + C5854 * C762 -
            (C117 * C3300 + C51110 * C3306) * C768 -
            (C117 * C3307 + C51110 * C3312) * C763) *
               C51190) *
              C17451 +
          ((C170 * C765 + C171 * C760 - C352 * C766 - C353 * C761 +
            C685 * C767 + C686 * C762 - (C117 * C771 + C51110 * C777) * C768 -
            (C117 * C778 + C51110 * C783) * C763) *
               C34007 +
           (C515 * C765 + C516 * C760 - C1668 * C766 - C1669 * C761 +
            C11580 * C767 + C11581 * C762 -
            (C117 * C4244 + C51110 * C4245) * C768 -
            (C117 * C4246 + C51110 * C4247) * C763) *
               C51190) *
              C17452) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C34007 +
            (C6472 + C6473 - C6474 - C6475) * C51190) *
               C17450 +
           ((C325 + C326 - C359 - C360) * C34007 + C7501 * C51190) * C17451 +
           C34164 * C17452) *
              C295 +
          (((C359 - (C326 + C325) + C360) * C34007 + C7502 * C51190) * C17450 +
           ((C361 - (C332 + C331) + C362) * C34007 + C13061 * C51190) * C17451 +
           ((C363 - (C338 + C337) + C364) * C34007 +
            (C1916 - (C1917 + C1918) + C1919) * C51190) *
               C17452) *
              C296 +
          (C34164 * C17450 +
           (C370 * C34007 + (C1918 + C1917 - C1916 - C1919) * C51190) * C17451 +
           ((C346 + C345 - C365 - C366) * C34007 +
            (C519 * C298 + C520 * C51254 -
             (C117 * C1643 + C51110 * C1644) * C299 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51190) *
               C17452) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51254 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C299 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C34007 +
           ((C2449 * C476 + C2444 * C487 + C2450 * C883 + C2445 * C891 +
             C2451 * C884 + C2446 * C893) *
                C298 +
            (C2449 * C486 + C2444 * C494 + C2450 * C892 + C2445 * C907 +
             C2451 * C894 + C2446 * C908) *
                C51254 -
            (C2451 * C3298 + C2446 * C3302 + C2450 * C884 + C2445 * C893 +
             C2449 * C883 + C2444 * C891) *
                C299 -
            (C2451 * C3303 + C2446 * C3310 + C2450 * C894 + C2445 * C908 +
             C2449 * C892 + C2444 * C907) *
                C51042) *
               C51190) *
              C50973 * C295 +
          (((C2679 + C2678 + C2677) * C299 -
            ((C2494 + C2493 + C2492) * C51254 +
             (C2491 + C2490 + C2489) * C298) +
            (C2682 + C2681 + C2680) * C51042) *
               C34007 +
           ((C4261 + C4262 + C4263) * C299 -
            ((C2864 + C2863 + C2862) * C51254 +
             (C2861 + C2860 + C2859) * C298) +
            (C4264 + C4265 + C4266) * C51042) *
               C51190) *
              C50973 * C296 +
          (((C2500 + C2499 + C2498) * C298 + (C2497 + C2496 + C2495) * C51254 -
            (C2685 + C2684 + C2683) * C299 - (C2688 + C2687 + C2686) * C51042) *
               C34007 +
           ((C2865 + C2866 + C2867) * C298 + (C2868 + C2869 + C2870) * C51254 -
            (C2451 * C4244 + C2446 * C4245 + C2450 * C888 + C2445 * C901 +
             C2449 * C887 + C2444 * C899) *
                C299 -
            (C2451 * C4246 + C2446 * C4247 + C2450 * C902 + C2445 * C912 +
             C2449 * C900 + C2444 * C911) *
                C51042) *
               C51190) *
              C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
            C2451 * C638 + C2446 * C643) *
               C765 +
           (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
            C2451 * C644 + C2446 * C653) *
               C760 -
           (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
            C2449 * C300 + C2444 * C306) *
               C766 -
           (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
            C2449 * C307 + C2444 * C318) *
               C761 +
           (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
            C2451 * C3016 + C2446 * C3019) *
               C767 +
           (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
            C2451 * C3020 + C2446 * C3025) *
               C762 -
           (C2451 * C3144 + C2446 * C3146 + C2450 * C3016 + C2445 * C3019 +
            C2449 * C769 + C2444 * C773) *
               C768 -
           (C2451 * C3147 + C2446 * C3150 + C2450 * C3020 + C2445 * C3025 +
            C2449 * C774 + C2444 * C781) *
               C763) *
              C34007 +
          ((C36957 + C36958 + C36959) * C765 +
           (C36960 + C36961 + C36962) * C760 -
           (C2451 * C3298 + C2446 * C3302 + C2450 * C884 + C2445 * C893 +
            C2449 * C883 + C2444 * C891) *
               C766 -
           (C2451 * C3303 + C2446 * C3310 + C2450 * C894 + C2445 * C908 +
            C2449 * C892 + C2444 * C907) *
               C761 +
           (C2449 * C884 + C2444 * C893 + C2450 * C3298 + C2445 * C3302 +
            C2451 * C3299 + C2446 * C3304) *
               C767 +
           (C2449 * C894 + C2444 * C908 + C2450 * C3303 + C2445 * C3310 +
            C2451 * C3305 + C2446 * C3311) *
               C762 -
           (C2451 * C20750 + C2446 * C20751 + C2450 * C3299 + C2445 * C3304 +
            C2449 * C3298 + C2444 * C3302) *
               C768 -
           (C2451 * C20752 + C2446 * C20753 + C2450 * C3305 + C2445 * C3311 +
            C2449 * C3303 + C2444 * C3310) *
               C763) *
              C51190) *
         C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C298 +
            (C117 * C127 + C51110 * C140) * C51254 -
            (C117 * C300 + C51110 * C306) * C299 -
            (C117 * C307 + C51110 * C318) * C51042) *
               C39356 +
           (C6472 + C6473 - C6474 - C6475) * C39357 + C6505 * C39358 +
           (C6484 + C6483 - C6501 - C6502) * C39359) *
              C50973 * C295 +
          ((C359 - (C326 + C325) + C360) * C39356 + C7502 * C39357 +
           C7503 * C39358 + (C6503 - (C6489 + C6490) + C6504) * C39359) *
              C50973 * C296 +
          (C369 * C39356 + C11273 * C39357 +
           (C5495 + C5494 - C5504 - C5505) * C39358 +
           (C5681 * C298 + C5682 * C51254 -
            (C117 * C7126 + C51110 * C7127) * C299 -
            (C117 * C7128 + C51110 * C7129) * C51042) *
               C39359) *
              C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C51110 * C126) * C765 +
           (C117 * C127 + C51110 * C140) * C760 -
           (C117 * C300 + C51110 * C306) * C766 -
           (C117 * C307 + C51110 * C318) * C761 +
           (C117 * C638 + C51110 * C643) * C767 +
           (C117 * C644 + C51110 * C653) * C762 -
           (C117 * C769 + C51110 * C773) * C768 -
           (C117 * C774 + C51110 * C781) * C763) *
              C39356 +
          (C5675 * C765 + C5676 * C760 - C6125 * C766 - C6126 * C761 +
           C6127 * C767 + C6128 * C762 -
           (C117 * C3298 + C51110 * C3302) * C768 -
           (C117 * C3303 + C51110 * C3310) * C763) *
              C39357 +
          (C5677 * C765 + C5678 * C760 - C6129 * C766 - C6130 * C761 +
           C6131 * C767 + C6132 * C762 -
           (C117 * C3636 + C51110 * C3638) * C768 -
           (C117 * C3639 + C51110 * C3642) * C763) *
              C39358 +
          (C6311 * C765 + C6310 * C760 - C6495 * C766 - C6496 * C761 +
           (C117 * C3744 + C51110 * C3752) * C767 +
           (C117 * C3750 + C51110 * C3756) * C762 -
           (C117 * C21020 + C51110 * C21022) * C768 -
           (C117 * C21021 + C51110 * C21023) * C763) *
              C39359) *
         C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C34007 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51190) *
               C17450 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C34007 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51190) *
               C17451 +
           ((C667 + C668 - C669 - C670 + C691 + C692) * C34007 +
            (C11572 + C11573 - C11574 - C11575 + C11582 + C11583) * C51190) *
               C17452) *
              C50992 * C51256 +
          (((C6133 - (C6106 + C6105) + C6134 - C6135 - C6136) * C34007 +
            (C6137 - (C6116 + C6115) + C6138 - C6139 - C6140) * C51190) *
               C17450 +
           ((C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C34007 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C51190) *
               C17451 +
           ((C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) * C34007 +
            (C5500 * C636 - (C1052 * C630 + C1051 * C635) + C5501 * C631 -
             (C117 * C3462 + C51110 * C3468) * C637 -
             (C117 * C3467 + C51110 * C3471) * C632) *
                C51190) *
               C17452) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C34007 +
             (C5683 + C5684) * C51190) *
                C17450 +
            ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
            C34014 * C17452) *
               C295 -
           (C34015 * C17452 +
            (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
            (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
               C296 +
           (C34014 * C17450 + (C189 * C34007 + C11422 * C51190) * C17451 +
            ((C185 + C184) * C34007 + (C527 + C528) * C51190) * C17452) *
               C297) *
              C51256 +
          (((C5660 * C34007 + C5661 * C51190) * C17450 +
            (C5665 * C34007 + C5666 * C51190) * C17451 +
            (C11422 * C34007 + (C1059 + C1060) * C51190) * C17452) *
               C296 -
           (C34313 * C17452 + (C5663 * C51190 + C5664 * C34007) * C17451 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C34007) * C17450) *
               C295 -
           ((((C117 * C1029 + C51110 * C1035) * C51026 +
              (C117 * C1020 + C51110 * C1030) * C118) *
                 C51190 +
             (C528 + C527) * C34007) *
                C17452 +
            ((C1060 + C1059) * C51190 + C529 * C34007) * C17451 +
            C34313 * C17450) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C34007 +
            ((C36957 + C36958 + C36959) * C118 +
             (C36960 + C36961 + C36962) * C51026) *
                C51190) *
               C50973 * C295 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51190 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50973 * C296 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51026) *
                C34007 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51190) *
               C50973 * C297) *
              C51256 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C34007 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51190) *
               C50973 * C296 -
           (((C2451 * C3464 + C2446 * C3469 + C2450 * C1163 + C2445 * C1170 +
              C2449 * C1022 + C2444 * C1031) *
                 C51026 +
             (C2451 * C3460 + C2446 * C3463 + C2450 * C1158 + C2445 * C1162 +
              C2449 * C1016 + C2444 * C1021) *
                 C118) *
                C51190 +
            ((C36962 + C36961 + C36960) * C51026 +
             (C36959 + C36958 + C36957) * C118) *
                C34007) *
               C50973 * C295 -
           (((C2451 * C3467 + C2446 * C3471 + C2450 * C1167 + C2445 * C1172 +
              C2449 * C1026 + C2444 * C1033) *
                 C51026 +
             (C2451 * C3462 + C2446 * C3468 + C2450 * C1160 + C2445 * C1166 +
              C2449 * C1018 + C2444 * C1025) *
                 C118) *
                C51190 +
            ((C2870 + C2869 + C2868) * C51026 +
             (C2867 + C2866 + C2865) * C118) *
                C34007) *
               C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C34007 +
           ((C36957 + C36958 + C36959) * C635 +
            (C36960 + C36961 + C36962) * C630 -
            (C37377 + C37378 + C37379) * C636 -
            (C37380 + C37381 + C37382) * C631 +
            (C37383 + C37384 + C37385) * C637 +
            (C37386 + C37387 + C37388) * C632) *
               C51190) *
              C50973 * C50992 * C51256 +
          (((C37379 + C37378 + C37377) * C636 -
            ((C36962 + C36961 + C36960) * C630 +
             (C36959 + C36958 + C36957) * C635) +
            (C37382 + C37381 + C37380) * C631 -
            (C37385 + C37384 + C37383) * C637 -
            (C37388 + C37387 + C37386) * C632) *
               C34007 +
           ((C2449 * C1158 + C2444 * C1162 + C2450 * C3460 + C2445 * C3463 +
             C2451 * C3636 + C2446 * C3638) *
                C636 -
            ((C2451 * C3464 + C2446 * C3469 + C2450 * C1163 + C2445 * C1170 +
              C2449 * C1022 + C2444 * C1031) *
                 C630 +
             (C2451 * C3460 + C2446 * C3463 + C2450 * C1158 + C2445 * C1162 +
              C2449 * C1016 + C2444 * C1021) *
                 C635) +
            (C2449 * C1163 + C2444 * C1170 + C2450 * C3464 + C2445 * C3469 +
             C2451 * C3639 + C2446 * C3642) *
                C631 -
            (C2451 * C20950 + C2446 * C20951 + C2450 * C3636 + C2445 * C3638 +
             C2449 * C3460 + C2444 * C3463) *
                C637 -
            (C2451 * C20952 + C2446 * C20953 + C2450 * C3639 + C2445 * C3642 +
             C2449 * C3464 + C2444 * C3469) *
                C632) *
               C51190) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C39356 +
            (C5683 + C5684) * C39357 + C6299 * C39358 +
            (C6315 + C6314) * C39359) *
               C50973 * C295 -
           (C6301 * C39359 + C5663 * C39358 + C5664 * C39357 +
            (C179 + C178) * C39356) *
               C50973 * C296 +
           (C188 * C39356 + C5665 * C39357 + C5666 * C39358 +
            (C5689 + C5690) * C39359) *
               C50973 * C297) *
              C51256 +
          ((C5660 * C39356 + C5661 * C39357 + C6300 * C39358 +
            (C6316 + C6317) * C39359) *
               C50973 * C296 -
           ((C6620 + C6619) * C39359 + C6612 * C39358 +
            (C5686 + C5685) * C39357 + (C5684 + C5683) * C39356) *
               C50973 * C295 -
           (((C117 * C6293 + C51110 * C6297) * C51026 +
             (C117 * C6288 + C51110 * C6294) * C118) *
                C39359 +
            (C5690 + C5689) * C39358 + C5662 * C39357 + C530 * C39356) *
               C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C635 +
            (C117 * C127 + C51110 * C140) * C630 -
            (C117 * C300 + C51110 * C306) * C636 -
            (C117 * C307 + C51110 * C318) * C631 +
            (C117 * C638 + C51110 * C643) * C637 +
            (C117 * C644 + C51110 * C653) * C632) *
               C39356 +
           (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C39357 +
           (C6115 + C6116 - C6137 - C6138 + C6139 + C6140) * C39358 +
           (C39819 + C39820 - C39821 - C39822 + C39829 + C39830) * C39359) *
              C50973 * C50992 * C51256 +
          ((C6133 - (C6106 + C6105) + C6134 - C6135 - C6136) * C39356 +
           (C6137 - (C6116 + C6115) + C6138 - C6139 - C6140) * C39357 +
           (C39821 - (C39820 + C39819) + C39822 - C39829 - C39830) * C39358 +
           ((C117 * C6463 + C51110 * C6465) * C636 -
            (C6618 * C630 + C6617 * C635) +
            (C117 * C6466 + C51110 * C6469) * C631 -
            (C117 * C23180 + C51110 * C23181) * C637 -
            (C117 * C23182 + C51110 * C23183) * C632) *
               C39359) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51305 +
            (C7131 + C7132 - C7133 - C7134) * C51306 + C8154 * C44702) *
               C51242 +
           ((C1366 + C1367 - C1368 - C1369) * C51305 + C7151 * C51306 +
            C7152 * C44702) *
               C50978) *
              C51300 +
          (((C1368 - (C1367 + C1366) + C1369) * C51305 + C7153 * C51306 +
            C7154 * C44702) *
               C51242 +
           ((C1372 - (C1371 + C1370) + C1373) * C51305 + C12718 * C51306 +
            (C6771 - (C6772 + C6773) + C6774) * C44702) *
               C50978) *
              C51285 +
          ((C1386 * C51305 + C12367 * C51306 +
            (C6773 + C6772 - C6771 - C6774) * C44702) *
               C51242 +
           (C1387 * C51305 + (C1663 + C1662 - C1676 - C1677) * C51306 +
            (C1053 * C1363 + C1054 * C1358 -
             (C117 * C1161 + C51110 * C1168) * C1364 -
             (C117 * C1169 + C51110 * C1173) * C51042) *
                C44702) *
               C50978) *
              C1362) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1492 +
             (C117 * C127 + C51110 * C140) * C51301 -
             (C117 * C300 + C51110 * C306) * C1493 -
             (C117 * C307 + C51110 * C318) * C51288 +
             (C117 * C638 + C51110 * C643) * C1494 +
             (C117 * C644 + C51110 * C653) * C1489) *
                C51305 +
            (C7990 + C7991 - C7992 - C7993 + C7994 + C7995) * C51306 +
            (C7996 + C7997 - C7998 - C7999 + C8000 + C8001) * C44702) *
               C51242 +
           ((C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C51305 +
            (C6921 + C6922 - C6923 - C6924 + C6925 + C6926) * C51306 +
            (C6927 + C6928 - C6929 - C6930 + C6931 + C6932) * C44702) *
               C50978) *
              C1490 +
          (((C1498 - (C1497 + C1496) + C1499 - C1500 - C1501) * C51305 +
            (C6923 - (C6922 + C6921) + C6924 - C6925 - C6926) * C51306 +
            (C6929 - (C6928 + C6927) + C6930 - C6931 - C6932) * C44702) *
               C51242 +
           ((C1504 - (C1503 + C1502) + C1505 - C1506 - C1507) * C51305 +
            (C12518 - (C12517 + C12516) + C12519 - C12520 - C12521) * C51306 +
            (C5500 * C1493 - (C1052 * C51301 + C1051 * C1492) + C5501 * C51288 -
             (C117 * C3462 + C51110 * C3468) * C1494 -
             (C117 * C3467 + C51110 * C3471) * C1489) *
                C44702) *
               C50978) *
              C50997) *
         C51056) /
        (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C1363 +
              (C117 * C127 + C51110 * C140) * C1358 -
              (C117 * C300 + C51110 * C306) * C1364 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C51305 +
             (C7131 + C7132 - C7133 - C7134) * C51306 + C8154 * C44702) *
                C51242 +
            ((C1366 + C1367 - C1368 - C1369) * C51305 + C7151 * C51306 +
             C7152 * C44702) *
                C50978) *
               C1490 +
           (((C1368 - (C1367 + C1366) + C1369) * C51305 + C7153 * C51306 +
             C7154 * C44702) *
                C51242 +
            ((C1372 - (C1371 + C1370) + C1373) * C51305 + C12718 * C51306 +
             (C6771 - (C6772 + C6773) + C6774) * C44702) *
                C50978) *
               C50997) *
              C51256 +
          ((((C7133 - (C7132 + C7131) + C7134) * C51305 +
             (C7137 - (C7136 + C7135) + C7138) * C51306 +
             (C8149 - (C8150 + C8151) + C8152) * C44702) *
                C51242 +
            (C7153 * C51305 + C7154 * C51306 +
             (C7143 - (C7144 + C7145) + C7146) * C44702) *
                C50978) *
               C1490 +
           ((C7151 * C51305 + C7152 * C51306 +
             (C7145 + C7144 - C7143 - C7146) * C44702) *
                C51242 +
            (C12367 * C51305 + (C6773 + C6772 - C6771 - C6774) * C51306 +
             (C5681 * C1363 + C5682 * C1358 -
              (C117 * C7126 + C51110 * C7127) * C1364 -
              (C117 * C7128 + C51110 * C7129) * C51042) *
                 C44702) *
                C50978) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C1363 +
              (C117 * C127 + C51110 * C140) * C1358 -
              (C117 * C300 + C51110 * C306) * C1364 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C51305 +
             (C7131 + C7132 - C7133 - C7134) * C51306 + C8154 * C44702) *
                C51242 +
            ((C1366 + C1367 - C1368 - C1369) * C51305 + C7151 * C51306 +
             C7152 * C44702) *
                C50978) *
               C51247 +
           (((C1368 - (C1367 + C1366) + C1369) * C51305 + C7153 * C51306 +
             C7154 * C44702) *
                C51242 +
            ((C1372 - (C1371 + C1370) + C1373) * C51305 + C12718 * C51306 +
             (C6771 - (C6772 + C6773) + C6774) * C44702) *
                C50978) *
               C50997) *
              C1775 +
          ((((C7133 - (C7132 + C7131) + C7134) * C51305 +
             (C7137 - (C7136 + C7135) + C7138) * C51306 +
             (C8149 - (C8150 + C8151) + C8152) * C44702) *
                C51242 +
            (C7153 * C51305 + C7154 * C51306 +
             (C7143 - (C7144 + C7145) + C7146) * C44702) *
                C50978) *
               C51247 +
           ((C7151 * C51305 + C7152 * C51306 +
             (C7145 + C7144 - C7143 - C7146) * C44702) *
                C51242 +
            (C12367 * C51305 + (C6773 + C6772 - C6771 - C6774) * C51306 +
             (C5681 * C1363 + C5682 * C1358 -
              (C117 * C7126 + C51110 * C7127) * C1364 -
              (C117 * C7128 + C51110 * C7129) * C51042) *
                 C44702) *
                C50978) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1492 +
             (C117 * C127 + C51110 * C140) * C51301 -
             (C117 * C300 + C51110 * C306) * C1493 -
             (C117 * C307 + C51110 * C318) * C51288 +
             (C117 * C638 + C51110 * C643) * C1494 +
             (C117 * C644 + C51110 * C653) * C1489) *
                C51305 +
            (C7990 + C7991 - C7992 - C7993 + C7994 + C7995) * C51306 +
            (C7996 + C7997 - C7998 - C7999 + C8000 + C8001) * C44702) *
               C51242 +
           ((C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C51305 +
            (C6921 + C6922 - C6923 - C6924 + C6925 + C6926) * C51306 +
            (C6927 + C6928 - C6929 - C6930 + C6931 + C6932) * C44702) *
               C50978) *
              C50992 * C1775 +
          (((C7992 - (C7991 + C7990) + C7993 - C7994 - C7995) * C51305 +
            (C7998 - (C7997 + C7996) + C7999 - C8000 - C8001) * C51306 +
            (C41002 - (C41001 + C41000) + C41003 - C41004 - C41005) * C44702) *
               C51242 +
           ((C6923 - (C6922 + C6921) + C6924 - C6925 - C6926) * C51305 +
            (C6929 - (C6928 + C6927) + C6930 - C6931 - C6932) * C51306 +
            (C6497 * C1493 - (C5680 * C51301 + C5679 * C1492) + C6498 * C51288 -
             (C117 * C3742 + C51110 * C3748) * C1494 -
             (C117 * C3746 + C51110 * C3754) * C1489) *
                C44702) *
               C50978) *
              C50992 * C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51305 +
            (C7131 + C7132 - C7133 - C7134) * C51306 + C8154 * C44702) *
               C51242 +
           ((C1366 + C1367 - C1368 - C1369) * C51305 + C7151 * C51306 +
            C7152 * C44702) *
               C50978) *
              C50992 * C51302 +
          (((C7133 - (C7132 + C7131) + C7134) * C51305 +
            (C7137 - (C7136 + C7135) + C7138) * C51306 +
            (C8149 - (C8150 + C8151) + C8152) * C44702) *
               C51242 +
           (C7153 * C51305 + C7154 * C51306 +
            (C7143 - (C7144 + C7145) + C7146) * C44702) *
               C50978) *
              C50992 * C51291 +
          ((C8154 * C51305 + C41110 * C51306 +
            (C41107 + C41106 - C41105 - C41108) * C44702) *
               C51242 +
           (C7152 * C51305 + (C7145 + C7144 - C7143 - C7146) * C51306 +
            (C6312 * C1363 + C6313 * C1358 -
             (C117 * C6464 + C51110 * C6467) * C1364 -
             (C117 * C6468 + C51110 * C6470) * C51042) *
                C44702) *
               C50978) *
              C50992 * C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C51305 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51306 +
            (C6115 + C6116 - C6137 - C6138 + C6139 + C6140) * C44702) *
               C51242 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C51305 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51306 +
            (C5845 + C5846 - C5847 - C5848 + C5859 + C5860) * C44702) *
               C50978) *
              C51247 +
          (((C661 - (C660 + C659) + C662 - C689 - C690) * C51305 +
            (C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C51306 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C44702) *
               C51242 +
           ((C669 - (C668 + C667) + C670 - C691 - C692) * C51305 +
            (C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) * C51306 +
            (C5500 * C636 - (C1052 * C630 + C1051 * C635) + C5501 * C631 -
             (C117 * C3462 + C51110 * C3468) * C637 -
             (C117 * C3467 + C51110 * C3471) * C632) *
                C44702) *
               C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51305 +
            (C5683 + C5684) * C51306 + C6299 * C44702) *
               C51242 +
           ((C178 + C179) * C51305 + C5660 * C51306 + C5661 * C44702) *
               C50978) *
              C112 -
          ((C5662 * C44702 + C530 * C51306 + (C181 + C180) * C51305) * C50978 +
           (C5663 * C44702 + C5664 * C51306 + (C179 + C178) * C51305) *
               C51242) *
              C113 +
          ((C188 * C51305 + C5665 * C51306 + C5666 * C44702) * C51242 +
           (C189 * C51305 + C11422 * C51306 + (C1059 + C1060) * C44702) *
               C50978) *
              C114 -
          ((((C117 * C1029 + C51110 * C1035) * C51026 +
             (C117 * C1020 + C51110 * C1030) * C118) *
                C44702 +
            (C528 + C527) * C51306 + C190 * C51305) *
               C50978 +
           ((C1060 + C1059) * C44702 + C529 * C51306 + C191 * C51305) *
               C51242) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C51305 +
             (C5683 + C5684) * C51306 + C6299 * C44702) *
                C51242 +
            ((C178 + C179) * C51305 + C5660 * C51306 + C5661 * C44702) *
                C50978) *
               C51247 -
           ((C5662 * C44702 + C530 * C51306 + (C181 + C180) * C51305) * C50978 +
            (C5663 * C44702 + C5664 * C51306 + (C179 + C178) * C51305) *
                C51242) *
               C50997) *
              C1013 +
          (((C5660 * C51305 + C5661 * C51306 + C6300 * C44702) * C51242 +
            (C5665 * C51305 + C5666 * C51306 + (C5689 + C5690) * C44702) *
                C50978) *
               C50997 -
           ((C6301 * C44702 + C5663 * C51306 + C5664 * C51305) * C50978 +
            (C6612 * C44702 + (C5686 + C5685) * C51306 +
             (C5684 + C5683) * C51305) *
                C51242) *
               C51247) *
              C1014 +
          (((C6299 * C51305 + C39929 * C51306 + (C6619 + C6620) * C44702) *
                C51242 +
            (C5661 * C51305 + C6300 * C51306 + (C6316 + C6317) * C44702) *
                C50978) *
               C51247 -
           ((((C117 * C6293 + C51110 * C6297) * C51026 +
              (C117 * C6288 + C51110 * C6294) * C118) *
                 C44702 +
             (C5690 + C5689) * C51306 + C5662 * C51305) *
                C50978 +
            ((C6317 + C6316) * C44702 + C6301 * C51306 + C5663 * C51305) *
                C51242) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C765 +
            (C117 * C127 + C51110 * C140) * C760 -
            (C117 * C300 + C51110 * C306) * C766 -
            (C117 * C307 + C51110 * C318) * C761 +
            (C117 * C638 + C51110 * C643) * C767 +
            (C117 * C644 + C51110 * C653) * C762 -
            (C117 * C769 + C51110 * C773) * C768 -
            (C117 * C774 + C51110 * C781) * C763) *
               C51305 +
           (C5675 * C765 + C5676 * C760 - C6125 * C766 - C6126 * C761 +
            C6127 * C767 + C6128 * C762 -
            (C117 * C3298 + C51110 * C3302) * C768 -
            (C117 * C3303 + C51110 * C3310) * C763) *
               C51306 +
           (C5677 * C765 + C5678 * C760 - C6129 * C766 - C6130 * C761 +
            C6131 * C767 + C6132 * C762 -
            (C117 * C3636 + C51110 * C3638) * C768 -
            (C117 * C3639 + C51110 * C3642) * C763) *
               C44702) *
              C51242 +
          ((C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 +
            C683 * C767 + C684 * C762 - (C117 * C770 + C51110 * C775) * C768 -
            (C117 * C776 + C51110 * C782) * C763) *
               C51305 +
           (C513 * C765 + C514 * C760 - C1666 * C766 - C1667 * C761 +
            C5853 * C767 + C5854 * C762 -
            (C117 * C3300 + C51110 * C3306) * C768 -
            (C117 * C3307 + C51110 * C3312) * C763) *
               C51306 +
           (C1049 * C765 + C1050 * C760 - C5498 * C766 - C5499 * C761 +
            C5855 * C767 + C5856 * C762 -
            (C117 * C3637 + C51110 * C3640) * C768 -
            (C117 * C3641 + C51110 * C3643) * C763) *
               C44702) *
              C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51305 +
            (C6472 + C6473 - C6474 - C6475) * C51306 + C6505 * C44702) *
               C51242 +
           ((C325 + C326 - C359 - C360) * C51305 + C7501 * C51306 +
            C6500 * C44702) *
               C50978) *
              C295 +
          (((C359 - (C326 + C325) + C360) * C51305 + C7502 * C51306 +
            C7503 * C44702) *
               C51242 +
           ((C361 - (C332 + C331) + C362) * C51305 + C13061 * C51306 +
            (C5504 - (C5494 + C5495) + C5505) * C44702) *
               C50978) *
              C296 +
          ((C369 * C51305 + C11273 * C51306 +
            (C5495 + C5494 - C5504 - C5505) * C44702) *
               C51242 +
           (C370 * C51305 + (C1918 + C1917 - C1916 - C1919) * C51306 +
            (C1053 * C298 + C1054 * C51254 -
             (C117 * C1161 + C51110 * C1168) * C299 -
             (C117 * C1169 + C51110 * C1173) * C51042) *
                C44702) *
               C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51305 +
            (C6472 + C6473 - C6474 - C6475) * C51306 + C6505 * C44702) *
               C51242 +
           ((C325 + C326 - C359 - C360) * C51305 + C7501 * C51306 +
            C6500 * C44702) *
               C50978) *
              C50992 * C1013 +
          (((C6474 - (C6473 + C6472) + C6475) * C51305 +
            (C6478 - (C6477 + C6476) + C6479) * C51306 +
            (C6501 - (C6483 + C6484) + C6502) * C44702) *
               C51242 +
           (C7502 * C51305 + C7503 * C51306 +
            (C6503 - (C6489 + C6490) + C6504) * C44702) *
               C50978) *
              C50992 * C1014 +
          ((C6505 * C51305 + C40038 * C51306 +
            (C40032 + C40031 - C40039 - C40040) * C44702) *
               C51242 +
           (C6500 * C51305 + (C6490 + C6489 - C6503 - C6504) * C51306 +
            (C6312 * C298 + C6313 * C51254 -
             (C117 * C6464 + C51110 * C6467) * C299 -
             (C117 * C6468 + C51110 * C6470) * C51042) *
                C44702) *
               C50978) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C51305 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51306 +
            (C6115 + C6116 - C6137 - C6138 + C6139 + C6140) * C44702) *
               C51242 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C51305 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51306 +
            (C5845 + C5846 - C5847 - C5848 + C5859 + C5860) * C44702) *
               C50978) *
              C50992 * C51256 +
          (((C6133 - (C6106 + C6105) + C6134 - C6135 - C6136) * C51305 +
            (C6137 - (C6116 + C6115) + C6138 - C6139 - C6140) * C51306 +
            (C39821 - (C39820 + C39819) + C39822 - C39829 - C39830) * C44702) *
               C51242 +
           ((C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C51305 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C51306 +
            (C6497 * C636 - (C5680 * C630 + C5679 * C635) + C6498 * C631 -
             (C117 * C3742 + C51110 * C3748) * C637 -
             (C117 * C3746 + C51110 * C3754) * C632) *
                C44702) *
               C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C51305 +
             (C5683 + C5684) * C51306 + C6299 * C44702) *
                C51242 +
            ((C178 + C179) * C51305 + C5660 * C51306 + C5661 * C44702) *
                C50978) *
               C295 -
           ((C5662 * C44702 + C530 * C51306 + (C181 + C180) * C51305) * C50978 +
            (C5663 * C44702 + C5664 * C51306 + (C179 + C178) * C51305) *
                C51242) *
               C296 +
           ((C188 * C51305 + C5665 * C51306 + C5666 * C44702) * C51242 +
            (C189 * C51305 + C11422 * C51306 + (C1059 + C1060) * C44702) *
                C50978) *
               C297) *
              C51256 +
          (((C5660 * C51305 + C5661 * C51306 + C6300 * C44702) * C51242 +
            (C5665 * C51305 + C5666 * C51306 + (C5689 + C5690) * C44702) *
                C50978) *
               C296 -
           ((C6301 * C44702 + C5663 * C51306 + C5664 * C51305) * C50978 +
            (C6612 * C44702 + (C5686 + C5685) * C51306 +
             (C5684 + C5683) * C51305) *
                C51242) *
               C295 -
           ((((C117 * C1248 + C51110 * C1256) * C51026 +
              (C117 * C1244 + C51110 * C1249) * C118) *
                 C44702 +
             (C1060 + C1059) * C51306 + C529 * C51305) *
                C50978 +
            ((C5690 + C5689) * C44702 + C5662 * C51306 + C530 * C51305) *
                C51242) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51305 +
            (C5683 + C5684) * C51306 + C6299 * C44702) *
               C51242 +
           ((C178 + C179) * C51305 + C5660 * C51306 + C5661 * C44702) *
               C50978) *
              C50992 * C1240 -
          ((C6301 * C44702 + C5663 * C51306 + C5664 * C51305) * C50978 +
           (C6612 * C44702 + (C5686 + C5685) * C51306 +
            (C5684 + C5683) * C51305) *
               C51242) *
              C50992 * C1241 +
          ((C6299 * C51305 + C39929 * C51306 + (C6619 + C6620) * C44702) *
               C51242 +
           (C5661 * C51305 + C6300 * C51306 + (C6316 + C6317) * C44702) *
               C50978) *
              C50992 * C1242 -
          ((((C117 * C6605 + C51110 * C6609) * C51026 +
             (C117 * C6603 + C51110 * C6606) * C118) *
                C44702 +
            (C6317 + C6316) * C51306 + C6301 * C51305) *
               C50978 +
           ((C40119 + C40118) * C44702 + C40111 * C51306 + C6612 * C51305) *
               C51242) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C51305 +
             (C5683 + C5684) * C51306 + C6299 * C44702) *
                C51242 +
            ((C178 + C179) * C51305 + C5660 * C51306 + C5661 * C44702) *
                C50978) *
               C51300 -
           ((C5662 * C44702 + C530 * C51306 + (C181 + C180) * C51305) * C50978 +
            (C5663 * C44702 + C5664 * C51306 + (C179 + C178) * C51305) *
                C51242) *
               C51285 +
           ((C188 * C51305 + C5665 * C51306 + C5666 * C44702) * C51242 +
            (C189 * C51305 + C11422 * C51306 + (C1059 + C1060) * C44702) *
                C50978) *
               C1362) *
              C1775 +
          (((C5660 * C51305 + C5661 * C51306 + C6300 * C44702) * C51242 +
            (C5665 * C51305 + C5666 * C51306 + (C5689 + C5690) * C44702) *
                C50978) *
               C51285 -
           ((C6301 * C44702 + C5663 * C51306 + C5664 * C51305) * C50978 +
            (C6612 * C44702 + (C5686 + C5685) * C51306 +
             (C5684 + C5683) * C51305) *
                C51242) *
               C51300 -
           ((((C117 * C1248 + C51110 * C1256) * C51026 +
              (C117 * C1244 + C51110 * C1249) * C118) *
                 C44702 +
             (C1060 + C1059) * C51306 + C529 * C51305) *
                C50978 +
            ((C5690 + C5689) * C44702 + C5662 * C51306 + C530 * C51305) *
                C51242) *
               C1362) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C298 +
              (C117 * C127 + C51110 * C140) * C51254 -
              (C117 * C300 + C51110 * C306) * C299 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C51305 +
             (C6472 + C6473 - C6474 - C6475) * C51306 + C6505 * C44702) *
                C51242 +
            ((C325 + C326 - C359 - C360) * C51305 + C7501 * C51306 +
             C6500 * C44702) *
                C50978) *
               C1490 +
           (((C359 - (C326 + C325) + C360) * C51305 + C7502 * C51306 +
             C7503 * C44702) *
                C51242 +
            ((C361 - (C332 + C331) + C362) * C51305 + C13061 * C51306 +
             (C5504 - (C5494 + C5495) + C5505) * C44702) *
                C50978) *
               C50997) *
              C1775 +
          ((((C6474 - (C6473 + C6472) + C6475) * C51305 +
             (C6478 - (C6477 + C6476) + C6479) * C51306 +
             (C6501 - (C6483 + C6484) + C6502) * C44702) *
                C51242 +
            (C7502 * C51305 + C7503 * C51306 +
             (C6503 - (C6489 + C6490) + C6504) * C44702) *
                C50978) *
               C1490 +
           ((C7501 * C51305 + C6500 * C51306 +
             (C6490 + C6489 - C6503 - C6504) * C44702) *
                C51242 +
            (C11273 * C51305 + (C5495 + C5494 - C5504 - C5505) * C51306 +
             (C5681 * C298 + C5682 * C51254 -
              (C117 * C7126 + C51110 * C7127) * C299 -
              (C117 * C7128 + C51110 * C7129) * C51042) *
                 C44702) *
                C50978) *
               C50997) *
              C51068)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C51305 +
             (C5683 + C5684) * C51306 + C6299 * C44702) *
                C51242 +
            ((C178 + C179) * C51305 + C5660 * C51306 + C5661 * C44702) *
                C50978) *
               C1490 -
           ((C5662 * C44702 + C530 * C51306 + (C181 + C180) * C51305) * C50978 +
            (C5663 * C44702 + C5664 * C51306 + (C179 + C178) * C51305) *
                C51242) *
               C50997) *
              C51302 +
          (((C5660 * C51305 + C5661 * C51306 + C6300 * C44702) * C51242 +
            (C5665 * C51305 + C5666 * C51306 + (C5689 + C5690) * C44702) *
                C50978) *
               C50997 -
           ((C6301 * C44702 + C5663 * C51306 + C5664 * C51305) * C50978 +
            (C6612 * C44702 + (C5686 + C5685) * C51306 +
             (C5684 + C5683) * C51305) *
                C51242) *
               C1490) *
              C51291 +
          (((C6299 * C51305 + C39929 * C51306 + (C6619 + C6620) * C44702) *
                C51242 +
            (C5661 * C51305 + C6300 * C51306 + (C6316 + C6317) * C44702) *
                C50978) *
               C1490 -
           ((((C117 * C6293 + C51110 * C6297) * C51026 +
              (C117 * C6288 + C51110 * C6294) * C118) *
                 C44702 +
             (C5690 + C5689) * C51306 + C5662 * C51305) *
                C50978 +
            ((C6317 + C6316) * C44702 + C6301 * C51306 + C5663 * C51305) *
                C51242) *
               C50997) *
              C2019)) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C51305 +
            (C5683 + C5684) * C51306 + C6299 * C44702) *
               C51242 +
           ((C178 + C179) * C51305 + C5660 * C51306 + C5661 * C44702) *
               C50978) *
              C112 -
          ((C5662 * C44702 + C530 * C51306 + (C181 + C180) * C51305) * C50978 +
           (C5663 * C44702 + C5664 * C51306 + (C179 + C178) * C51305) *
               C51242) *
              C113 +
          ((C188 * C51305 + C5665 * C51306 + C5666 * C44702) * C51242 +
           (C189 * C51305 + C11422 * C51306 + (C1059 + C1060) * C44702) *
               C50978) *
              C114 -
          ((((C117 * C1029 + C51110 * C1035) * C51026 +
             (C117 * C1020 + C51110 * C1030) * C118) *
                C44702 +
            (C528 + C527) * C51306 + C190 * C51305) *
               C50978 +
           ((C1060 + C1059) * C44702 + C529 * C51306 + C191 * C51305) *
               C51242) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C51305 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51306 +
            (C6115 + C6116 - C6137 - C6138 + C6139 + C6140) * C44702) *
               C51242 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C51305 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51306 +
            (C5845 + C5846 - C5847 - C5848 + C5859 + C5860) * C44702) *
               C50978) *
              C51247 +
          (((C661 - (C660 + C659) + C662 - C689 - C690) * C51305 +
            (C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C51306 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C44702) *
               C51242 +
           ((C669 - (C668 + C667) + C670 - C691 - C692) * C51305 +
            (C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) * C51306 +
            (C5500 * C636 - (C1052 * C630 + C1051 * C635) + C5501 * C631 -
             (C117 * C3462 + C51110 * C3468) * C637 -
             (C117 * C3467 + C51110 * C3471) * C632) *
                C44702) *
               C50978) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C51305 +
            (C6472 + C6473 - C6474 - C6475) * C51306 + C6505 * C44702) *
               C51242 +
           ((C325 + C326 - C359 - C360) * C51305 + C7501 * C51306 +
            C6500 * C44702) *
               C50978) *
              C295 +
          (((C359 - (C326 + C325) + C360) * C51305 + C7502 * C51306 +
            C7503 * C44702) *
               C51242 +
           ((C361 - (C332 + C331) + C362) * C51305 + C13061 * C51306 +
            (C5504 - (C5494 + C5495) + C5505) * C44702) *
               C50978) *
              C296 +
          ((C369 * C51305 + C11273 * C51306 +
            (C5495 + C5494 - C5504 - C5505) * C44702) *
               C51242 +
           (C370 * C51305 + (C1918 + C1917 - C1916 - C1919) * C51306 +
            (C1053 * C298 + C1054 * C51254 -
             (C117 * C1161 + C51110 * C1168) * C299 -
             (C117 * C1169 + C51110 * C1173) * C51042) *
                C44702) *
               C50978) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C765 +
            (C117 * C127 + C51110 * C140) * C760 -
            (C117 * C300 + C51110 * C306) * C766 -
            (C117 * C307 + C51110 * C318) * C761 +
            (C117 * C638 + C51110 * C643) * C767 +
            (C117 * C644 + C51110 * C653) * C762 -
            (C117 * C769 + C51110 * C773) * C768 -
            (C117 * C774 + C51110 * C781) * C763) *
               C51305 +
           (C5675 * C765 + C5676 * C760 - C6125 * C766 - C6126 * C761 +
            C6127 * C767 + C6128 * C762 -
            (C117 * C3298 + C51110 * C3302) * C768 -
            (C117 * C3303 + C51110 * C3310) * C763) *
               C51306 +
           (C5677 * C765 + C5678 * C760 - C6129 * C766 - C6130 * C761 +
            C6131 * C767 + C6132 * C762 -
            (C117 * C3636 + C51110 * C3638) * C768 -
            (C117 * C3639 + C51110 * C3642) * C763) *
               C44702) *
              C51242 +
          ((C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 +
            C683 * C767 + C684 * C762 - (C117 * C770 + C51110 * C775) * C768 -
            (C117 * C776 + C51110 * C782) * C763) *
               C51305 +
           (C513 * C765 + C514 * C760 - C1666 * C766 - C1667 * C761 +
            C5853 * C767 + C5854 * C762 -
            (C117 * C3300 + C51110 * C3306) * C768 -
            (C117 * C3307 + C51110 * C3312) * C763) *
               C51306 +
           (C1049 * C765 + C1050 * C760 - C5498 * C766 - C5499 * C761 +
            C5855 * C767 + C5856 * C762 -
            (C117 * C3637 + C51110 * C3640) * C768 -
            (C117 * C3641 + C51110 * C3643) * C763) *
               C44702) *
              C50978) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C51305 +
             (C5683 + C5684) * C51306 + C6299 * C44702) *
                C51242 +
            ((C178 + C179) * C51305 + C5660 * C51306 + C5661 * C44702) *
                C50978) *
               C295 -
           ((C5662 * C44702 + C530 * C51306 + (C181 + C180) * C51305) * C50978 +
            (C5663 * C44702 + C5664 * C51306 + (C179 + C178) * C51305) *
                C51242) *
               C296 +
           ((C188 * C51305 + C5665 * C51306 + C5666 * C44702) * C51242 +
            (C189 * C51305 + C11422 * C51306 + (C1059 + C1060) * C44702) *
                C50978) *
               C297) *
              C51256 +
          (((C5660 * C51305 + C5661 * C51306 + C6300 * C44702) * C51242 +
            (C5665 * C51305 + C5666 * C51306 + (C5689 + C5690) * C44702) *
                C50978) *
               C296 -
           ((C6301 * C44702 + C5663 * C51306 + C5664 * C51305) * C50978 +
            (C6612 * C44702 + (C5686 + C5685) * C51306 +
             (C5684 + C5683) * C51305) *
                C51242) *
               C295 -
           ((((C117 * C1248 + C51110 * C1256) * C51026 +
              (C117 * C1244 + C51110 * C1249) * C118) *
                 C44702 +
             (C1060 + C1059) * C51306 + C529 * C51305) *
                C50978 +
            ((C5690 + C5689) * C44702 + C5662 * C51306 + C530 * C51305) *
                C51242) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C51305 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51306 +
            (C6115 + C6116 - C6137 - C6138 + C6139 + C6140) * C44702) *
               C51242 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C51305 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51306 +
            (C5845 + C5846 - C5847 - C5848 + C5859 + C5860) * C44702) *
               C50978) *
              C50992 * C51256 +
          (((C6133 - (C6106 + C6105) + C6134 - C6135 - C6136) * C51305 +
            (C6137 - (C6116 + C6115) + C6138 - C6139 - C6140) * C51306 +
            (C39821 - (C39820 + C39819) + C39822 - C39829 - C39830) * C44702) *
               C51242 +
           ((C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C51305 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C51306 +
            (C6497 * C636 - (C5680 * C630 + C5679 * C635) + C6498 * C631 -
             (C117 * C3742 + C51110 * C3748) * C637 -
             (C117 * C3746 + C51110 * C3754) * C632) *
                C44702) *
               C50978) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C34007 +
            (C7131 + C7132 - C7133 - C7134) * C51190) *
               C17450 +
           ((C1366 + C1367 - C1368 - C1369) * C34007 + C7151 * C51190) *
               C17451 +
           C35242 * C17452) *
              C51300 +
          (((C1368 - (C1367 + C1366) + C1369) * C34007 + C7153 * C51190) *
               C17450 +
           ((C1372 - (C1371 + C1370) + C1373) * C34007 + C12718 * C51190) *
               C17451 +
           ((C1376 - (C1375 + C1374) + C1377) * C34007 +
            (C1676 - (C1662 + C1663) + C1677) * C51190) *
               C17452) *
              C51285 +
          (C35242 * C17450 +
           (C1387 * C34007 + (C1663 + C1662 - C1676 - C1677) * C51190) *
               C17451 +
           ((C1380 + C1379 - C1378 - C1381) * C34007 +
            (C519 * C1363 + C520 * C1358 -
             (C117 * C1643 + C51110 * C1644) * C1364 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51190) *
               C17452) *
              C1362) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1363 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C1358 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1364 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C34007 +
           ((C36957 + C36958 + C36959) * C1363 +
            (C36960 + C36961 + C36962) * C1358 -
            (C37377 + C37378 + C37379) * C1364 -
            (C37380 + C37381 + C37382) * C51042) *
               C51190) *
              C50973 * C51300 +
          (((C2679 + C2678 + C2677) * C1364 -
            ((C2494 + C2493 + C2492) * C1358 +
             (C2491 + C2490 + C2489) * C1363) +
            (C2682 + C2681 + C2680) * C51042) *
               C34007 +
           ((C4261 + C4262 + C4263) * C1364 -
            ((C2864 + C2863 + C2862) * C1358 +
             (C2861 + C2860 + C2859) * C1363) +
            (C4264 + C4265 + C4266) * C51042) *
               C51190) *
              C50973 * C51285 +
          (((C2500 + C2499 + C2498) * C1363 + (C2497 + C2496 + C2495) * C1358 -
            (C2685 + C2684 + C2683) * C1364 -
            (C2688 + C2687 + C2686) * C51042) *
               C34007 +
           ((C2865 + C2866 + C2867) * C1363 + (C2868 + C2869 + C2870) * C1358 -
            (C2451 * C4244 + C2446 * C4245 + C2450 * C888 + C2445 * C901 +
             C2449 * C887 + C2444 * C899) *
                C1364 -
            (C2451 * C4246 + C2446 * C4247 + C2450 * C902 + C2445 * C912 +
             C2449 * C900 + C2444 * C911) *
                C51042) *
               C51190) *
              C50973 * C1362) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1492 +
             (C117 * C127 + C51110 * C140) * C51301 -
             (C117 * C300 + C51110 * C306) * C1493 -
             (C117 * C307 + C51110 * C318) * C51288 +
             (C117 * C638 + C51110 * C643) * C1494 +
             (C117 * C644 + C51110 * C653) * C1489) *
                C34007 +
            (C7990 + C7991 - C7992 - C7993 + C7994 + C7995) * C51190) *
               C17450 +
           ((C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C34007 +
            (C6921 + C6922 - C6923 - C6924 + C6925 + C6926) * C51190) *
               C17451 +
           ((C1502 + C1503 - C1504 - C1505 + C1506 + C1507) * C34007 +
            (C12516 + C12517 - C12518 - C12519 + C12520 + C12521) * C51190) *
               C17452) *
              C1490 +
          (((C1498 - (C1497 + C1496) + C1499 - C1500 - C1501) * C34007 +
            (C6923 - (C6922 + C6921) + C6924 - C6925 - C6926) * C51190) *
               C17450 +
           ((C1504 - (C1503 + C1502) + C1505 - C1506 - C1507) * C34007 +
            (C12518 - (C12517 + C12516) + C12519 - C12520 - C12521) * C51190) *
               C17451 +
           ((C1510 - (C1509 + C1508) + C1511 - C1512 - C1513) * C34007 +
            (C1670 * C1493 - (C518 * C51301 + C517 * C1492) + C1671 * C51288 -
             (C117 * C890 + C51110 * C905) * C1494 -
             (C117 * C906 + C51110 * C914) * C1489) *
                C51190) *
               C17452) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1492 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51301 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1493 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51288 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C1494 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C1489) *
               C34007 +
           ((C36957 + C36958 + C36959) * C1492 +
            (C36960 + C36961 + C36962) * C51301 -
            (C37377 + C37378 + C37379) * C1493 -
            (C37380 + C37381 + C37382) * C51288 +
            (C37383 + C37384 + C37385) * C1494 +
            (C37386 + C37387 + C37388) * C1489) *
               C51190) *
              C50973 * C1490 +
          (((C2679 + C2678 + C2677) * C1493 -
            ((C2494 + C2493 + C2492) * C51301 +
             (C2491 + C2490 + C2489) * C1492) +
            (C2682 + C2681 + C2680) * C51288 - (C3043 + C3042 + C3041) * C1494 -
            (C3046 + C3045 + C3044) * C1489) *
               C34007 +
           ((C4261 + C4262 + C4263) * C1493 -
            ((C2864 + C2863 + C2862) * C51301 +
             (C2861 + C2860 + C2859) * C1492) +
            (C4264 + C4265 + C4266) * C51288 -
            (C2451 * C3301 + C2446 * C3308 + C2450 * C3300 + C2445 * C3306 +
             C2449 * C886 + C2444 * C897) *
                C1494 -
            (C2451 * C3309 + C2446 * C3313 + C2450 * C3307 + C2445 * C3312 +
             C2449 * C898 + C2444 * C910) *
                C1489) *
               C51190) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C1363 +
              (C117 * C127 + C51110 * C140) * C1358 -
              (C117 * C300 + C51110 * C306) * C1364 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C34007 +
             (C7131 + C7132 - C7133 - C7134) * C51190) *
                C17450 +
            ((C1366 + C1367 - C1368 - C1369) * C34007 + C7151 * C51190) *
                C17451 +
            C35242 * C17452) *
               C1490 +
           (((C1368 - (C1367 + C1366) + C1369) * C34007 + C7153 * C51190) *
                C17450 +
            ((C1372 - (C1371 + C1370) + C1373) * C34007 + C12718 * C51190) *
                C17451 +
            ((C1376 - (C1375 + C1374) + C1377) * C34007 +
             (C1676 - (C1662 + C1663) + C1677) * C51190) *
                C17452) *
               C50997) *
              C51256 +
          ((((C7133 - (C7132 + C7131) + C7134) * C34007 +
             (C7137 - (C7136 + C7135) + C7138) * C51190) *
                C17450 +
            (C7153 * C34007 + C7154 * C51190) * C17451 +
            (C12718 * C34007 + (C6771 - (C6772 + C6773) + C6774) * C51190) *
                C17452) *
               C1490 +
           ((C7151 * C34007 + C7152 * C51190) * C17450 +
            (C12367 * C34007 + (C6773 + C6772 - C6771 - C6774) * C51190) *
                C17451 +
            ((C1663 + C1662 - C1676 - C1677) * C34007 +
             (C1053 * C1363 + C1054 * C1358 -
              (C117 * C1161 + C51110 * C1168) * C1364 -
              (C117 * C1169 + C51110 * C1173) * C51042) *
                 C51190) *
                C17452) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C1363 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C1358 -
             (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
              C2449 * C300 + C2444 * C306) *
                 C1364 -
             (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
              C2449 * C307 + C2444 * C318) *
                 C51042) *
                C34007 +
            ((C36957 + C36958 + C36959) * C1363 +
             (C36960 + C36961 + C36962) * C1358 -
             (C37377 + C37378 + C37379) * C1364 -
             (C37380 + C37381 + C37382) * C51042) *
                C51190) *
               C50973 * C1490 +
           (((C2679 + C2678 + C2677) * C1364 -
             ((C2494 + C2493 + C2492) * C1358 +
              (C2491 + C2490 + C2489) * C1363) +
             (C2682 + C2681 + C2680) * C51042) *
                C34007 +
            ((C4261 + C4262 + C4263) * C1364 -
             ((C2864 + C2863 + C2862) * C1358 +
              (C2861 + C2860 + C2859) * C1363) +
             (C4264 + C4265 + C4266) * C51042) *
                C51190) *
               C50973 * C50997) *
              C51256 +
          ((((C37379 + C37378 + C37377) * C1364 -
             ((C36962 + C36961 + C36960) * C1358 +
              (C36959 + C36958 + C36957) * C1363) +
             (C37382 + C37381 + C37380) * C51042) *
                C34007 +
            ((C37711 + C37712 + C37713) * C1364 -
             ((C37547 + C37548 + C37549) * C1358 +
              (C37550 + C37551 + C37552) * C1363) +
             (C37714 + C37715 + C37716) * C51042) *
                C51190) *
               C50973 * C1490 +
           (((C2859 + C2860 + C2861) * C1363 + (C2862 + C2863 + C2864) * C1358 -
             (C4263 + C4262 + C4261) * C1364 -
             (C4266 + C4265 + C4264) * C51042) *
                C34007 +
            ((C3485 + C3486 + C3487) * C1363 + (C3488 + C3489 + C3490) * C1358 -
             (C2451 * C3637 + C2446 * C3640 + C2450 * C3461 + C2445 * C3465 +
              C2449 * C1159 + C2444 * C1164) *
                 C1364 -
             (C2451 * C3641 + C2446 * C3643 + C2450 * C3466 + C2445 * C3470 +
              C2449 * C1165 + C2444 * C1171) *
                 C51042) *
                C51190) *
               C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C1363 +
              (C117 * C127 + C51110 * C140) * C1358 -
              (C117 * C300 + C51110 * C306) * C1364 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C34007 +
             (C7131 + C7132 - C7133 - C7134) * C51190) *
                C17450 +
            ((C1366 + C1367 - C1368 - C1369) * C34007 + C7151 * C51190) *
                C17451 +
            C35242 * C17452) *
               C51247 +
           (((C1368 - (C1367 + C1366) + C1369) * C34007 + C7153 * C51190) *
                C17450 +
            ((C1372 - (C1371 + C1370) + C1373) * C34007 + C12718 * C51190) *
                C17451 +
            ((C1376 - (C1375 + C1374) + C1377) * C34007 +
             (C1676 - (C1662 + C1663) + C1677) * C51190) *
                C17452) *
               C50997) *
              C1775 +
          ((((C7133 - (C7132 + C7131) + C7134) * C34007 +
             (C7137 - (C7136 + C7135) + C7138) * C51190) *
                C17450 +
            (C7153 * C34007 + C7154 * C51190) * C17451 +
            (C12718 * C34007 + (C6771 - (C6772 + C6773) + C6774) * C51190) *
                C17452) *
               C51247 +
           ((C7151 * C34007 + C7152 * C51190) * C17450 +
            (C12367 * C34007 + (C6773 + C6772 - C6771 - C6774) * C51190) *
                C17451 +
            ((C1663 + C1662 - C1676 - C1677) * C34007 +
             (C1053 * C1363 + C1054 * C1358 -
              (C117 * C1161 + C51110 * C1168) * C1364 -
              (C117 * C1169 + C51110 * C1173) * C51042) *
                 C51190) *
                C17452) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C1363 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C1358 -
             (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
              C2449 * C300 + C2444 * C306) *
                 C1364 -
             (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
              C2449 * C307 + C2444 * C318) *
                 C51042) *
                C34007 +
            ((C36957 + C36958 + C36959) * C1363 +
             (C36960 + C36961 + C36962) * C1358 -
             (C37377 + C37378 + C37379) * C1364 -
             (C37380 + C37381 + C37382) * C51042) *
                C51190) *
               C50973 * C51247 +
           (((C2679 + C2678 + C2677) * C1364 -
             ((C2494 + C2493 + C2492) * C1358 +
              (C2491 + C2490 + C2489) * C1363) +
             (C2682 + C2681 + C2680) * C51042) *
                C34007 +
            ((C4261 + C4262 + C4263) * C1364 -
             ((C2864 + C2863 + C2862) * C1358 +
              (C2861 + C2860 + C2859) * C1363) +
             (C4264 + C4265 + C4266) * C51042) *
                C51190) *
               C50973 * C50997) *
              C1775 +
          ((((C37379 + C37378 + C37377) * C1364 -
             ((C36962 + C36961 + C36960) * C1358 +
              (C36959 + C36958 + C36957) * C1363) +
             (C37382 + C37381 + C37380) * C51042) *
                C34007 +
            ((C37711 + C37712 + C37713) * C1364 -
             ((C37547 + C37548 + C37549) * C1358 +
              (C37550 + C37551 + C37552) * C1363) +
             (C37714 + C37715 + C37716) * C51042) *
                C51190) *
               C50973 * C51247 +
           (((C2859 + C2860 + C2861) * C1363 + (C2862 + C2863 + C2864) * C1358 -
             (C4263 + C4262 + C4261) * C1364 -
             (C4266 + C4265 + C4264) * C51042) *
                C34007 +
            ((C3485 + C3486 + C3487) * C1363 + (C3488 + C3489 + C3490) * C1358 -
             (C2451 * C3637 + C2446 * C3640 + C2450 * C3461 + C2445 * C3465 +
              C2449 * C1159 + C2444 * C1164) *
                 C1364 -
             (C2451 * C3641 + C2446 * C3643 + C2450 * C3466 + C2445 * C3470 +
              C2449 * C1165 + C2444 * C1171) *
                 C51042) *
                C51190) *
               C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1492 +
             (C117 * C127 + C51110 * C140) * C51301 -
             (C117 * C300 + C51110 * C306) * C1493 -
             (C117 * C307 + C51110 * C318) * C51288 +
             (C117 * C638 + C51110 * C643) * C1494 +
             (C117 * C644 + C51110 * C653) * C1489) *
                C34007 +
            (C7990 + C7991 - C7992 - C7993 + C7994 + C7995) * C51190) *
               C17450 +
           ((C1496 + C1497 - C1498 - C1499 + C1500 + C1501) * C34007 +
            (C6921 + C6922 - C6923 - C6924 + C6925 + C6926) * C51190) *
               C17451 +
           ((C1502 + C1503 - C1504 - C1505 + C1506 + C1507) * C34007 +
            (C12516 + C12517 - C12518 - C12519 + C12520 + C12521) * C51190) *
               C17452) *
              C50992 * C1775 +
          (((C7992 - (C7991 + C7990) + C7993 - C7994 - C7995) * C34007 +
            (C7998 - (C7997 + C7996) + C7999 - C8000 - C8001) * C51190) *
               C17450 +
           ((C6923 - (C6922 + C6921) + C6924 - C6925 - C6926) * C34007 +
            (C6929 - (C6928 + C6927) + C6930 - C6931 - C6932) * C51190) *
               C17451 +
           ((C12518 - (C12517 + C12516) + C12519 - C12520 - C12521) * C34007 +
            (C5500 * C1493 - (C1052 * C51301 + C1051 * C1492) + C5501 * C51288 -
             (C117 * C3462 + C51110 * C3468) * C1494 -
             (C117 * C3467 + C51110 * C3471) * C1489) *
                C51190) *
               C17452) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1492 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51301 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1493 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51288 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C1494 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C1489) *
               C34007 +
           ((C36957 + C36958 + C36959) * C1492 +
            (C36960 + C36961 + C36962) * C51301 -
            (C37377 + C37378 + C37379) * C1493 -
            (C37380 + C37381 + C37382) * C51288 +
            (C37383 + C37384 + C37385) * C1494 +
            (C37386 + C37387 + C37388) * C1489) *
               C51190) *
              C50973 * C50992 * C1775 +
          (((C37379 + C37378 + C37377) * C1493 -
            ((C36962 + C36961 + C36960) * C51301 +
             (C36959 + C36958 + C36957) * C1492) +
            (C37382 + C37381 + C37380) * C51288 -
            (C37385 + C37384 + C37383) * C1494 -
            (C37388 + C37387 + C37386) * C1489) *
               C34007 +
           ((C37711 + C37712 + C37713) * C1493 -
            ((C37547 + C37548 + C37549) * C51301 +
             (C37550 + C37551 + C37552) * C1492) +
            (C37714 + C37715 + C37716) * C51288 -
            (C2451 * C20950 + C2446 * C20951 + C2450 * C3636 + C2445 * C3638 +
             C2449 * C3460 + C2444 * C3463) *
                C1494 -
            (C2451 * C20952 + C2446 * C20953 + C2450 * C3639 + C2445 * C3642 +
             C2449 * C3464 + C2444 * C3469) *
                C1489) *
               C51190) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C1363 +
             (C117 * C127 + C51110 * C140) * C1358 -
             (C117 * C300 + C51110 * C306) * C1364 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C34007 +
            (C7131 + C7132 - C7133 - C7134) * C51190) *
               C17450 +
           ((C1366 + C1367 - C1368 - C1369) * C34007 + C7151 * C51190) *
               C17451 +
           C35242 * C17452) *
              C50992 * C51302 +
          (((C7133 - (C7132 + C7131) + C7134) * C34007 +
            (C7137 - (C7136 + C7135) + C7138) * C51190) *
               C17450 +
           (C7153 * C34007 + C7154 * C51190) * C17451 +
           (C12718 * C34007 + (C6771 - (C6772 + C6773) + C6774) * C51190) *
               C17452) *
              C50992 * C51291 +
          ((C8154 * C34007 + (C8151 + C8150 - C8149 - C8152) * C51190) *
               C17450 +
           (C7152 * C34007 + (C7145 + C7144 - C7143 - C7146) * C51190) *
               C17451 +
           ((C6773 + C6772 - C6771 - C6774) * C34007 +
            (C5681 * C1363 + C5682 * C1358 -
             (C117 * C7126 + C51110 * C7127) * C1364 -
             (C117 * C7128 + C51110 * C7129) * C51042) *
                C51190) *
               C17452) *
              C50992 * C2019)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C1363 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C1358 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C1364 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C34007 +
           ((C36957 + C36958 + C36959) * C1363 +
            (C36960 + C36961 + C36962) * C1358 -
            (C37377 + C37378 + C37379) * C1364 -
            (C37380 + C37381 + C37382) * C51042) *
               C51190) *
              C50973 * C50992 * C51302 +
          (((C37379 + C37378 + C37377) * C1364 -
            ((C36962 + C36961 + C36960) * C1358 +
             (C36959 + C36958 + C36957) * C1363) +
            (C37382 + C37381 + C37380) * C51042) *
               C34007 +
           ((C37711 + C37712 + C37713) * C1364 -
            ((C37547 + C37548 + C37549) * C1358 +
             (C37550 + C37551 + C37552) * C1363) +
            (C37714 + C37715 + C37716) * C51042) *
               C51190) *
              C50973 * C50992 * C51291 +
          (((C37552 + C37551 + C37550) * C1363 +
            (C37549 + C37548 + C37547) * C1358 -
            (C37713 + C37712 + C37711) * C1364 -
            (C37716 + C37715 + C37714) * C51042) *
               C34007 +
           ((C37827 + C37828 + C37829) * C1363 +
            (C37830 + C37831 + C37832) * C1358 -
            (C2451 * C21020 + C2446 * C21022 + C2450 * C3744 + C2445 * C3752 +
             C2449 * C3745 + C2444 * C3753) *
                C1364 -
            (C2451 * C21021 + C2446 * C21023 + C2450 * C3750 + C2445 * C3756 +
             C2449 * C3751 + C2444 * C3757) *
                C51042) *
               C51190) *
              C50973 * C50992 * C2019)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C34007 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51190) *
               C17450 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C34007 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51190) *
               C17451 +
           ((C667 + C668 - C669 - C670 + C691 + C692) * C34007 +
            (C11572 + C11573 - C11574 - C11575 + C11582 + C11583) * C51190) *
               C17452) *
              C51247 +
          (((C661 - (C660 + C659) + C662 - C689 - C690) * C34007 +
            (C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C51190) *
               C17450 +
           ((C669 - (C668 + C667) + C670 - C691 - C692) * C34007 +
            (C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) * C51190) *
               C17451 +
           ((C677 - (C676 + C675) + C678 - C693 - C694) * C34007 +
            (C1670 * C636 - (C518 * C630 + C517 * C635) + C1671 * C631 -
             (C117 * C890 + C51110 * C905) * C637 -
             (C117 * C906 + C51110 * C914) * C632) *
                C51190) *
               C17452) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C34007 +
            (C5683 + C5684) * C51190) *
               C17450 +
           ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
           C34014 * C17452) *
              C112 -
          (C34015 * C17452 + (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
           (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
              C113 +
          (C34014 * C17450 + (C189 * C34007 + C11422 * C51190) * C17451 +
           ((C185 + C184) * C34007 + (C527 + C528) * C51190) * C17452) *
              C114 -
          ((((C117 * C488 + C51110 * C495) * C51026 +
             (C117 * C477 + C51110 * C489) * C118) *
                C51190 +
            (C187 + C186) * C34007) *
               C17452 +
           ((C528 + C527) * C51190 + C190 * C34007) * C17451 +
           C34015 * C17450) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C34007 +
             (C5683 + C5684) * C51190) *
                C17450 +
            ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
            C34014 * C17452) *
               C51247 -
           (C34015 * C17452 +
            (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
            (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
               C50997) *
              C1013 +
          (((C5660 * C34007 + C5661 * C51190) * C17450 +
            (C5665 * C34007 + C5666 * C51190) * C17451 +
            (C11422 * C34007 + (C1059 + C1060) * C51190) * C17452) *
               C50997 -
           (C34313 * C17452 + (C5663 * C51190 + C5664 * C34007) * C17451 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C34007) * C17450) *
               C51247) *
              C1014 +
          (((C6299 * C34007 + (C6315 + C6314) * C51190) * C17450 +
            (C5661 * C34007 + C6300 * C51190) * C17451 +
            (C5666 * C34007 + (C5689 + C5690) * C51190) * C17452) *
               C51247 -
           ((((C117 * C1248 + C51110 * C1256) * C51026 +
              (C117 * C1244 + C51110 * C1249) * C118) *
                 C51190 +
             (C1060 + C1059) * C34007) *
                C17452 +
            ((C5690 + C5689) * C51190 + C5662 * C34007) * C17451 +
            (C6301 * C51190 + C5663 * C34007) * C17450) *
               C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51026) *
               C34007 +
           ((C2449 * C476 + C2444 * C487 + C2450 * C883 + C2445 * C891 +
             C2451 * C884 + C2446 * C893) *
                C118 +
            (C2449 * C486 + C2444 * C494 + C2450 * C892 + C2445 * C907 +
             C2451 * C894 + C2446 * C908) *
                C51026) *
               C51190) *
              C50973 * C112 -
          (((C2864 + C2863 + C2862) * C51026 + (C2861 + C2860 + C2859) * C118) *
               C51190 +
           ((C2494 + C2493 + C2492) * C51026 + (C2491 + C2490 + C2489) * C118) *
               C34007) *
              C50973 * C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51026) *
               C34007 +
           ((C2865 + C2866 + C2867) * C118 + (C2868 + C2869 + C2870) * C51026) *
               C51190) *
              C50973 * C114 -
          (((C2451 * C906 + C2446 * C914 + C2450 * C904 + C2445 * C913 +
             C2449 * C483 + C2444 * C492) *
                C51026 +
            (C2451 * C890 + C2446 * C905 + C2450 * C889 + C2445 * C903 +
             C2449 * C474 + C2444 * C482) *
                C118) *
               C51190 +
           ((C2506 + C2505 + C2504) * C51026 + (C2503 + C2502 + C2501) * C118) *
               C34007) *
              C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C34007 +
           ((C36957 + C36958 + C36959) * C635 +
            (C36960 + C36961 + C36962) * C630 -
            (C2451 * C3298 + C2446 * C3302 + C2450 * C884 + C2445 * C893 +
             C2449 * C883 + C2444 * C891) *
                C636 -
            (C2451 * C3303 + C2446 * C3310 + C2450 * C894 + C2445 * C908 +
             C2449 * C892 + C2444 * C907) *
                C631 +
            (C2449 * C884 + C2444 * C893 + C2450 * C3298 + C2445 * C3302 +
             C2451 * C3299 + C2446 * C3304) *
                C637 +
            (C2449 * C894 + C2444 * C908 + C2450 * C3303 + C2445 * C3310 +
             C2451 * C3305 + C2446 * C3311) *
                C632) *
               C51190) *
              C50973 * C51247 +
          (((C2679 + C2678 + C2677) * C636 -
            ((C2494 + C2493 + C2492) * C630 + (C2491 + C2490 + C2489) * C635) +
            (C2682 + C2681 + C2680) * C631 - (C3043 + C3042 + C3041) * C637 -
            (C3046 + C3045 + C3044) * C632) *
               C34007 +
           ((C4261 + C4262 + C4263) * C636 -
            ((C2864 + C2863 + C2862) * C630 + (C2861 + C2860 + C2859) * C635) +
            (C4264 + C4265 + C4266) * C631 -
            (C2451 * C3301 + C2446 * C3308 + C2450 * C3300 + C2445 * C3306 +
             C2449 * C886 + C2444 * C897) *
                C637 -
            (C2451 * C3309 + C2446 * C3313 + C2450 * C3307 + C2445 * C3312 +
             C2449 * C898 + C2444 * C910) *
                C632) *
               C51190) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C34007 +
            ((C36957 + C36958 + C36959) * C118 +
             (C36960 + C36961 + C36962) * C51026) *
                C51190) *
               C50973 * C51247 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51190 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50973 * C50997) *
              C1013 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C34007 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51190) *
               C50973 * C50997 -
           (((C37547 + C37548 + C37549) * C51026 +
             (C37550 + C37551 + C37552) * C118) *
                C51190 +
            ((C36962 + C36961 + C36960) * C51026 +
             (C36959 + C36958 + C36957) * C118) *
                C34007) *
               C50973 * C51247) *
              C1014 +
          ((((C37552 + C37551 + C37550) * C118 +
             (C37549 + C37548 + C37547) * C51026) *
                C34007 +
            ((C2449 * C1247 + C2444 * C1255 + C2450 * C3745 + C2445 * C3753 +
              C2451 * C3744 + C2446 * C3752) *
                 C118 +
             (C2449 * C1254 + C2444 * C1259 + C2450 * C3751 + C2445 * C3757 +
              C2451 * C3750 + C2446 * C3756) *
                 C51026) *
                C51190) *
               C50973 * C51247 -
           (((C2451 * C3746 + C2446 * C3754 + C2450 * C3747 + C2445 * C3755 +
              C2449 * C1252 + C2444 * C1258) *
                 C51026 +
             (C2451 * C3742 + C2446 * C3748 + C2450 * C3743 + C2445 * C3749 +
              C2449 * C1246 + C2444 * C1253) *
                 C118) *
                C51190 +
            ((C3490 + C3489 + C3488) * C51026 +
             (C3487 + C3486 + C3485) * C118) *
                C34007) *
               C50973 * C50997) *
              C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C765 +
            (C117 * C127 + C51110 * C140) * C760 -
            (C117 * C300 + C51110 * C306) * C766 -
            (C117 * C307 + C51110 * C318) * C761 +
            (C117 * C638 + C51110 * C643) * C767 +
            (C117 * C644 + C51110 * C653) * C762 -
            (C117 * C769 + C51110 * C773) * C768 -
            (C117 * C774 + C51110 * C781) * C763) *
               C34007 +
           (C5675 * C765 + C5676 * C760 - C6125 * C766 - C6126 * C761 +
            C6127 * C767 + C6128 * C762 -
            (C117 * C3298 + C51110 * C3302) * C768 -
            (C117 * C3303 + C51110 * C3310) * C763) *
               C51190) *
              C17450 +
          ((C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 +
            C683 * C767 + C684 * C762 - (C117 * C770 + C51110 * C775) * C768 -
            (C117 * C776 + C51110 * C782) * C763) *
               C34007 +
           (C513 * C765 + C514 * C760 - C1666 * C766 - C1667 * C761 +
            C5853 * C767 + C5854 * C762 -
            (C117 * C3300 + C51110 * C3306) * C768 -
            (C117 * C3307 + C51110 * C3312) * C763) *
               C51190) *
              C17451 +
          ((C170 * C765 + C171 * C760 - C352 * C766 - C353 * C761 +
            C685 * C767 + C686 * C762 - (C117 * C771 + C51110 * C777) * C768 -
            (C117 * C778 + C51110 * C783) * C763) *
               C34007 +
           (C515 * C765 + C516 * C760 - C1668 * C766 - C1669 * C761 +
            C11580 * C767 + C11581 * C762 -
            (C117 * C4244 + C51110 * C4245) * C768 -
            (C117 * C4246 + C51110 * C4247) * C763) *
               C51190) *
              C17452) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C34007 +
            (C6472 + C6473 - C6474 - C6475) * C51190) *
               C17450 +
           ((C325 + C326 - C359 - C360) * C34007 + C7501 * C51190) * C17451 +
           C34164 * C17452) *
              C295 +
          (((C359 - (C326 + C325) + C360) * C34007 + C7502 * C51190) * C17450 +
           ((C361 - (C332 + C331) + C362) * C34007 + C13061 * C51190) * C17451 +
           ((C363 - (C338 + C337) + C364) * C34007 +
            (C1916 - (C1917 + C1918) + C1919) * C51190) *
               C17452) *
              C296 +
          (C34164 * C17450 +
           (C370 * C34007 + (C1918 + C1917 - C1916 - C1919) * C51190) * C17451 +
           ((C346 + C345 - C365 - C366) * C34007 +
            (C519 * C298 + C520 * C51254 -
             (C117 * C1643 + C51110 * C1644) * C299 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51190) *
               C17452) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C34007 +
            (C6472 + C6473 - C6474 - C6475) * C51190) *
               C17450 +
           ((C325 + C326 - C359 - C360) * C34007 + C7501 * C51190) * C17451 +
           C34164 * C17452) *
              C50992 * C1013 +
          (((C6474 - (C6473 + C6472) + C6475) * C34007 +
            (C6478 - (C6477 + C6476) + C6479) * C51190) *
               C17450 +
           (C7502 * C34007 + C7503 * C51190) * C17451 +
           (C13061 * C34007 + (C5504 - (C5494 + C5495) + C5505) * C51190) *
               C17452) *
              C50992 * C1014 +
          ((C6505 * C34007 + (C6484 + C6483 - C6501 - C6502) * C51190) *
               C17450 +
           (C6500 * C34007 + (C6490 + C6489 - C6503 - C6504) * C51190) *
               C17451 +
           ((C5495 + C5494 - C5504 - C5505) * C34007 +
            (C5681 * C298 + C5682 * C51254 -
             (C117 * C7126 + C51110 * C7127) * C299 -
             (C117 * C7128 + C51110 * C7129) * C51042) *
                C51190) *
               C17452) *
              C50992 * C1015)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51254 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C299 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C34007 +
           ((C2449 * C476 + C2444 * C487 + C2450 * C883 + C2445 * C891 +
             C2451 * C884 + C2446 * C893) *
                C298 +
            (C2449 * C486 + C2444 * C494 + C2450 * C892 + C2445 * C907 +
             C2451 * C894 + C2446 * C908) *
                C51254 -
            (C2451 * C3298 + C2446 * C3302 + C2450 * C884 + C2445 * C893 +
             C2449 * C883 + C2444 * C891) *
                C299 -
            (C2451 * C3303 + C2446 * C3310 + C2450 * C894 + C2445 * C908 +
             C2449 * C892 + C2444 * C907) *
                C51042) *
               C51190) *
              C50973 * C295 +
          (((C2679 + C2678 + C2677) * C299 -
            ((C2494 + C2493 + C2492) * C51254 +
             (C2491 + C2490 + C2489) * C298) +
            (C2682 + C2681 + C2680) * C51042) *
               C34007 +
           ((C4261 + C4262 + C4263) * C299 -
            ((C2864 + C2863 + C2862) * C51254 +
             (C2861 + C2860 + C2859) * C298) +
            (C4264 + C4265 + C4266) * C51042) *
               C51190) *
              C50973 * C296 +
          (((C2500 + C2499 + C2498) * C298 + (C2497 + C2496 + C2495) * C51254 -
            (C2685 + C2684 + C2683) * C299 - (C2688 + C2687 + C2686) * C51042) *
               C34007 +
           ((C2865 + C2866 + C2867) * C298 + (C2868 + C2869 + C2870) * C51254 -
            (C2451 * C4244 + C2446 * C4245 + C2450 * C888 + C2445 * C901 +
             C2449 * C887 + C2444 * C899) *
                C299 -
            (C2451 * C4246 + C2446 * C4247 + C2450 * C902 + C2445 * C912 +
             C2449 * C900 + C2444 * C911) *
                C51042) *
               C51190) *
              C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
            C2451 * C638 + C2446 * C643) *
               C765 +
           (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
            C2451 * C644 + C2446 * C653) *
               C760 -
           (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
            C2449 * C300 + C2444 * C306) *
               C766 -
           (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
            C2449 * C307 + C2444 * C318) *
               C761 +
           (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
            C2451 * C3016 + C2446 * C3019) *
               C767 +
           (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
            C2451 * C3020 + C2446 * C3025) *
               C762 -
           (C2451 * C3144 + C2446 * C3146 + C2450 * C3016 + C2445 * C3019 +
            C2449 * C769 + C2444 * C773) *
               C768 -
           (C2451 * C3147 + C2446 * C3150 + C2450 * C3020 + C2445 * C3025 +
            C2449 * C774 + C2444 * C781) *
               C763) *
              C34007 +
          ((C36957 + C36958 + C36959) * C765 +
           (C36960 + C36961 + C36962) * C760 -
           (C2451 * C3298 + C2446 * C3302 + C2450 * C884 + C2445 * C893 +
            C2449 * C883 + C2444 * C891) *
               C766 -
           (C2451 * C3303 + C2446 * C3310 + C2450 * C894 + C2445 * C908 +
            C2449 * C892 + C2444 * C907) *
               C761 +
           (C2449 * C884 + C2444 * C893 + C2450 * C3298 + C2445 * C3302 +
            C2451 * C3299 + C2446 * C3304) *
               C767 +
           (C2449 * C894 + C2444 * C908 + C2450 * C3303 + C2445 * C3310 +
            C2451 * C3305 + C2446 * C3311) *
               C762 -
           (C2451 * C20750 + C2446 * C20751 + C2450 * C3299 + C2445 * C3304 +
            C2449 * C3298 + C2444 * C3302) *
               C768 -
           (C2451 * C20752 + C2446 * C20753 + C2450 * C3305 + C2445 * C3311 +
            C2449 * C3303 + C2444 * C3310) *
               C763) *
              C51190) *
         C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51254 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C299 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C34007 +
           ((C36957 + C36958 + C36959) * C298 +
            (C36960 + C36961 + C36962) * C51254 -
            (C37377 + C37378 + C37379) * C299 -
            (C37380 + C37381 + C37382) * C51042) *
               C51190) *
              C50973 * C50992 * C1013 +
          (((C37379 + C37378 + C37377) * C299 -
            ((C36962 + C36961 + C36960) * C51254 +
             (C36959 + C36958 + C36957) * C298) +
            (C37382 + C37381 + C37380) * C51042) *
               C34007 +
           ((C37711 + C37712 + C37713) * C299 -
            ((C37547 + C37548 + C37549) * C51254 +
             (C37550 + C37551 + C37552) * C298) +
            (C37714 + C37715 + C37716) * C51042) *
               C51190) *
              C50973 * C50992 * C1014 +
          (((C37552 + C37551 + C37550) * C298 +
            (C37549 + C37548 + C37547) * C51254 -
            (C37713 + C37712 + C37711) * C299 -
            (C37716 + C37715 + C37714) * C51042) *
               C34007 +
           ((C2449 * C1247 + C2444 * C1255 + C2450 * C3745 + C2445 * C3753 +
             C2451 * C3744 + C2446 * C3752) *
                C298 +
            (C2449 * C1254 + C2444 * C1259 + C2450 * C3751 + C2445 * C3757 +
             C2451 * C3750 + C2446 * C3756) *
                C51254 -
            (C2451 * C21020 + C2446 * C21022 + C2450 * C3744 + C2445 * C3752 +
             C2449 * C3745 + C2444 * C3753) *
                C299 -
            (C2451 * C21021 + C2446 * C21023 + C2450 * C3750 + C2445 * C3756 +
             C2449 * C3751 + C2444 * C3757) *
                C51042) *
               C51190) *
              C50973 * C50992 * C1015)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C34007 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51190) *
               C17450 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C34007 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51190) *
               C17451 +
           ((C667 + C668 - C669 - C670 + C691 + C692) * C34007 +
            (C11572 + C11573 - C11574 - C11575 + C11582 + C11583) * C51190) *
               C17452) *
              C50992 * C51256 +
          (((C6133 - (C6106 + C6105) + C6134 - C6135 - C6136) * C34007 +
            (C6137 - (C6116 + C6115) + C6138 - C6139 - C6140) * C51190) *
               C17450 +
           ((C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C34007 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C51190) *
               C17451 +
           ((C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) * C34007 +
            (C5500 * C636 - (C1052 * C630 + C1051 * C635) + C5501 * C631 -
             (C117 * C3462 + C51110 * C3468) * C637 -
             (C117 * C3467 + C51110 * C3471) * C632) *
                C51190) *
               C17452) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C34007 +
             (C5683 + C5684) * C51190) *
                C17450 +
            ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
            C34014 * C17452) *
               C295 -
           (C34015 * C17452 +
            (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
            (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
               C296 +
           (C34014 * C17450 + (C189 * C34007 + C11422 * C51190) * C17451 +
            ((C185 + C184) * C34007 + (C527 + C528) * C51190) * C17452) *
               C297) *
              C51256 +
          (((C5660 * C34007 + C5661 * C51190) * C17450 +
            (C5665 * C34007 + C5666 * C51190) * C17451 +
            (C11422 * C34007 + (C1059 + C1060) * C51190) * C17452) *
               C296 -
           (C34313 * C17452 + (C5663 * C51190 + C5664 * C34007) * C17451 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C34007) * C17450) *
               C295 -
           ((((C117 * C1029 + C51110 * C1035) * C51026 +
              (C117 * C1020 + C51110 * C1030) * C118) *
                 C51190 +
             (C528 + C527) * C34007) *
                C17452 +
            ((C1060 + C1059) * C51190 + C529 * C34007) * C17451 +
            C34313 * C17450) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C34007 +
            (C5683 + C5684) * C51190) *
               C17450 +
           ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
           C34014 * C17452) *
              C50992 * C1240 -
          (C34313 * C17452 + (C5663 * C51190 + C5664 * C34007) * C17451 +
           ((C5686 + C5685) * C51190 + (C5684 + C5683) * C34007) * C17450) *
              C50992 * C1241 +
          ((C6299 * C34007 + (C6315 + C6314) * C51190) * C17450 +
           (C5661 * C34007 + C6300 * C51190) * C17451 +
           (C5666 * C34007 + (C5689 + C5690) * C51190) * C17452) *
              C50992 * C1242 -
          ((((C117 * C6293 + C51110 * C6297) * C51026 +
             (C117 * C6288 + C51110 * C6294) * C118) *
                C51190 +
            (C5690 + C5689) * C34007) *
               C17452 +
           ((C6317 + C6316) * C51190 + C6301 * C34007) * C17451 +
           ((C6620 + C6619) * C51190 + C6612 * C34007) * C17450) *
              C50992 * C1243)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C34007 +
            ((C36957 + C36958 + C36959) * C118 +
             (C36960 + C36961 + C36962) * C51026) *
                C51190) *
               C50973 * C295 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51190 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50973 * C296 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51026) *
                C34007 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51190) *
               C50973 * C297) *
              C51256 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C34007 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51190) *
               C50973 * C296 -
           (((C2451 * C3464 + C2446 * C3469 + C2450 * C1163 + C2445 * C1170 +
              C2449 * C1022 + C2444 * C1031) *
                 C51026 +
             (C2451 * C3460 + C2446 * C3463 + C2450 * C1158 + C2445 * C1162 +
              C2449 * C1016 + C2444 * C1021) *
                 C118) *
                C51190 +
            ((C36962 + C36961 + C36960) * C51026 +
             (C36959 + C36958 + C36957) * C118) *
                C34007) *
               C50973 * C295 -
           (((C2451 * C3467 + C2446 * C3471 + C2450 * C1167 + C2445 * C1172 +
              C2449 * C1026 + C2444 * C1033) *
                 C51026 +
             (C2451 * C3462 + C2446 * C3468 + C2450 * C1160 + C2445 * C1166 +
              C2449 * C1018 + C2444 * C1025) *
                 C118) *
                C51190 +
            ((C2870 + C2869 + C2868) * C51026 +
             (C2867 + C2866 + C2865) * C118) *
                C34007) *
               C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C34007 +
           ((C36957 + C36958 + C36959) * C635 +
            (C36960 + C36961 + C36962) * C630 -
            (C37377 + C37378 + C37379) * C636 -
            (C37380 + C37381 + C37382) * C631 +
            (C37383 + C37384 + C37385) * C637 +
            (C37386 + C37387 + C37388) * C632) *
               C51190) *
              C50973 * C50992 * C51256 +
          (((C37379 + C37378 + C37377) * C636 -
            ((C36962 + C36961 + C36960) * C630 +
             (C36959 + C36958 + C36957) * C635) +
            (C37382 + C37381 + C37380) * C631 -
            (C37385 + C37384 + C37383) * C637 -
            (C37388 + C37387 + C37386) * C632) *
               C34007 +
           ((C2449 * C1158 + C2444 * C1162 + C2450 * C3460 + C2445 * C3463 +
             C2451 * C3636 + C2446 * C3638) *
                C636 -
            ((C2451 * C3464 + C2446 * C3469 + C2450 * C1163 + C2445 * C1170 +
              C2449 * C1022 + C2444 * C1031) *
                 C630 +
             (C2451 * C3460 + C2446 * C3463 + C2450 * C1158 + C2445 * C1162 +
              C2449 * C1016 + C2444 * C1021) *
                 C635) +
            (C2449 * C1163 + C2444 * C1170 + C2450 * C3464 + C2445 * C3469 +
             C2451 * C3639 + C2446 * C3642) *
                C631 -
            (C2451 * C20950 + C2446 * C20951 + C2450 * C3636 + C2445 * C3638 +
             C2449 * C3460 + C2444 * C3463) *
                C637 -
            (C2451 * C20952 + C2446 * C20953 + C2450 * C3639 + C2445 * C3642 +
             C2449 * C3464 + C2444 * C3469) *
                C632) *
               C51190) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51026) *
               C34007 +
           ((C36957 + C36958 + C36959) * C118 +
            (C36960 + C36961 + C36962) * C51026) *
               C51190) *
              C50973 * C50992 * C1240 -
          (((C37547 + C37548 + C37549) * C51026 +
            (C37550 + C37551 + C37552) * C118) *
               C51190 +
           ((C36962 + C36961 + C36960) * C51026 +
            (C36959 + C36958 + C36957) * C118) *
               C34007) *
              C50973 * C50992 * C1241 +
          (((C37552 + C37551 + C37550) * C118 +
            (C37549 + C37548 + C37547) * C51026) *
               C34007 +
           ((C37827 + C37828 + C37829) * C118 +
            (C37830 + C37831 + C37832) * C51026) *
               C51190) *
              C50973 * C50992 * C1242 -
          (((C2451 * C23182 + C2446 * C23183 + C2450 * C6466 + C2445 * C6469 +
             C2449 * C6290 + C2444 * C6295) *
                C51026 +
            (C2451 * C23180 + C2446 * C23181 + C2450 * C6463 + C2445 * C6465 +
             C2449 * C6286 + C2444 * C6289) *
                C118) *
               C51190 +
           ((C37832 + C37831 + C37830) * C51026 +
            (C37829 + C37828 + C37827) * C118) *
               C34007) *
              C50973 * C50992 * C1243)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C34007 +
             (C5683 + C5684) * C51190) *
                C17450 +
            ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
            C34014 * C17452) *
               C51300 -
           (C34015 * C17452 +
            (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
            (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
               C51285 +
           (C34014 * C17450 + (C189 * C34007 + C11422 * C51190) * C17451 +
            ((C185 + C184) * C34007 + (C527 + C528) * C51190) * C17452) *
               C1362) *
              C1775 +
          (((C5660 * C34007 + C5661 * C51190) * C17450 +
            (C5665 * C34007 + C5666 * C51190) * C17451 +
            (C11422 * C34007 + (C1059 + C1060) * C51190) * C17452) *
               C51285 -
           (C34313 * C17452 + (C5663 * C51190 + C5664 * C34007) * C17451 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C34007) * C17450) *
               C51300 -
           ((((C117 * C1029 + C51110 * C1035) * C51026 +
              (C117 * C1020 + C51110 * C1030) * C118) *
                 C51190 +
             (C528 + C527) * C34007) *
                C17452 +
            ((C1060 + C1059) * C51190 + C529 * C34007) * C17451 +
            C34313 * C17450) *
               C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C34007 +
            ((C36957 + C36958 + C36959) * C118 +
             (C36960 + C36961 + C36962) * C51026) *
                C51190) *
               C50973 * C51300 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51190 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50973 * C51285 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51026) *
                C34007 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51190) *
               C50973 * C1362) *
              C1775 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C34007 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51190) *
               C50973 * C51285 -
           (((C37547 + C37548 + C37549) * C51026 +
             (C37550 + C37551 + C37552) * C118) *
                C51190 +
            ((C36962 + C36961 + C36960) * C51026 +
             (C36959 + C36958 + C36957) * C118) *
                C34007) *
               C50973 * C51300 -
           (((C2451 * C3467 + C2446 * C3471 + C2450 * C1167 + C2445 * C1172 +
              C2449 * C1026 + C2444 * C1033) *
                 C51026 +
             (C2451 * C3462 + C2446 * C3468 + C2450 * C1160 + C2445 * C1166 +
              C2449 * C1018 + C2444 * C1025) *
                 C118) *
                C51190 +
            ((C2870 + C2869 + C2868) * C51026 +
             (C2867 + C2866 + C2865) * C118) *
                C34007) *
               C50973 * C1362) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C298 +
              (C117 * C127 + C51110 * C140) * C51254 -
              (C117 * C300 + C51110 * C306) * C299 -
              (C117 * C307 + C51110 * C318) * C51042) *
                 C34007 +
             (C6472 + C6473 - C6474 - C6475) * C51190) *
                C17450 +
            ((C325 + C326 - C359 - C360) * C34007 + C7501 * C51190) * C17451 +
            C34164 * C17452) *
               C1490 +
           (((C359 - (C326 + C325) + C360) * C34007 + C7502 * C51190) * C17450 +
            ((C361 - (C332 + C331) + C362) * C34007 + C13061 * C51190) *
                C17451 +
            ((C363 - (C338 + C337) + C364) * C34007 +
             (C1916 - (C1917 + C1918) + C1919) * C51190) *
                C17452) *
               C50997) *
              C1775 +
          ((((C6474 - (C6473 + C6472) + C6475) * C34007 +
             (C6478 - (C6477 + C6476) + C6479) * C51190) *
                C17450 +
            (C7502 * C34007 + C7503 * C51190) * C17451 +
            (C13061 * C34007 + (C5504 - (C5494 + C5495) + C5505) * C51190) *
                C17452) *
               C1490 +
           ((C7501 * C34007 + C6500 * C51190) * C17450 +
            (C11273 * C34007 + (C5495 + C5494 - C5504 - C5505) * C51190) *
                C17451 +
            ((C1918 + C1917 - C1916 - C1919) * C34007 +
             (C1053 * C298 + C1054 * C51254 -
              (C117 * C1161 + C51110 * C1168) * C299 -
              (C117 * C1169 + C51110 * C1173) * C51042) *
                 C51190) *
                C17452) *
               C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C298 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51254 -
             (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
              C2449 * C300 + C2444 * C306) *
                 C299 -
             (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
              C2449 * C307 + C2444 * C318) *
                 C51042) *
                C34007 +
            ((C36957 + C36958 + C36959) * C298 +
             (C36960 + C36961 + C36962) * C51254 -
             (C37377 + C37378 + C37379) * C299 -
             (C37380 + C37381 + C37382) * C51042) *
                C51190) *
               C50973 * C1490 +
           (((C2679 + C2678 + C2677) * C299 -
             ((C2494 + C2493 + C2492) * C51254 +
              (C2491 + C2490 + C2489) * C298) +
             (C2682 + C2681 + C2680) * C51042) *
                C34007 +
            ((C4261 + C4262 + C4263) * C299 -
             ((C2864 + C2863 + C2862) * C51254 +
              (C2861 + C2860 + C2859) * C298) +
             (C4264 + C4265 + C4266) * C51042) *
                C51190) *
               C50973 * C50997) *
              C1775 +
          ((((C37379 + C37378 + C37377) * C299 -
             ((C36962 + C36961 + C36960) * C51254 +
              (C36959 + C36958 + C36957) * C298) +
             (C37382 + C37381 + C37380) * C51042) *
                C34007 +
            ((C37711 + C37712 + C37713) * C299 -
             ((C37547 + C37548 + C37549) * C51254 +
              (C37550 + C37551 + C37552) * C298) +
             (C37714 + C37715 + C37716) * C51042) *
                C51190) *
               C50973 * C1490 +
           (((C2859 + C2860 + C2861) * C298 + (C2862 + C2863 + C2864) * C51254 -
             (C4263 + C4262 + C4261) * C299 -
             (C4266 + C4265 + C4264) * C51042) *
                C34007 +
            ((C3485 + C3486 + C3487) * C298 + (C3488 + C3489 + C3490) * C51254 -
             (C2451 * C3637 + C2446 * C3640 + C2450 * C3461 + C2445 * C3465 +
              C2449 * C1159 + C2444 * C1164) *
                 C299 -
             (C2451 * C3641 + C2446 * C3643 + C2450 * C3466 + C2445 * C3470 +
              C2449 * C1165 + C2444 * C1171) *
                 C51042) *
                C51190) *
               C50973 * C50997) *
              C51068)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C34007 +
             (C5683 + C5684) * C51190) *
                C17450 +
            ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
            C34014 * C17452) *
               C1490 -
           (C34015 * C17452 +
            (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
            (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
               C50997) *
              C51302 +
          (((C5660 * C34007 + C5661 * C51190) * C17450 +
            (C5665 * C34007 + C5666 * C51190) * C17451 +
            (C11422 * C34007 + (C1059 + C1060) * C51190) * C17452) *
               C50997 -
           (C34313 * C17452 + (C5663 * C51190 + C5664 * C34007) * C17451 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C34007) * C17450) *
               C1490) *
              C51291 +
          (((C6299 * C34007 + (C6315 + C6314) * C51190) * C17450 +
            (C5661 * C34007 + C6300 * C51190) * C17451 +
            (C5666 * C34007 + (C5689 + C5690) * C51190) * C17452) *
               C1490 -
           ((((C117 * C1248 + C51110 * C1256) * C51026 +
              (C117 * C1244 + C51110 * C1249) * C118) *
                 C51190 +
             (C1060 + C1059) * C34007) *
                C17452 +
            ((C5690 + C5689) * C51190 + C5662 * C34007) * C17451 +
            (C6301 * C51190 + C5663 * C34007) * C17450) *
               C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C34007 +
            ((C36957 + C36958 + C36959) * C118 +
             (C36960 + C36961 + C36962) * C51026) *
                C51190) *
               C50973 * C1490 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51190 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50973 * C50997) *
              C51302 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C34007 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51190) *
               C50973 * C50997 -
           (((C37547 + C37548 + C37549) * C51026 +
             (C37550 + C37551 + C37552) * C118) *
                C51190 +
            ((C36962 + C36961 + C36960) * C51026 +
             (C36959 + C36958 + C36957) * C118) *
                C34007) *
               C50973 * C1490) *
              C51291 +
          ((((C37552 + C37551 + C37550) * C118 +
             (C37549 + C37548 + C37547) * C51026) *
                C34007 +
            ((C37827 + C37828 + C37829) * C118 +
             (C37830 + C37831 + C37832) * C51026) *
                C51190) *
               C50973 * C1490 -
           (((C2451 * C3746 + C2446 * C3754 + C2450 * C3747 + C2445 * C3755 +
              C2449 * C1252 + C2444 * C1258) *
                 C51026 +
             (C2451 * C3742 + C2446 * C3748 + C2450 * C3743 + C2445 * C3749 +
              C2449 * C1246 + C2444 * C1253) *
                 C118) *
                C51190 +
            ((C3490 + C3489 + C3488) * C51026 +
             (C3487 + C3486 + C3485) * C118) *
                C34007) *
               C50973 * C50997) *
              C2019)) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C118 +
             (C117 * C127 + C51110 * C140) * C51026) *
                C34007 +
            (C5683 + C5684) * C51190) *
               C17450 +
           ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
           C34014 * C17452) *
              C112 -
          (C34015 * C17452 + (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
           (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
              C113 +
          (C34014 * C17450 + (C189 * C34007 + C11422 * C51190) * C17451 +
           ((C185 + C184) * C34007 + (C527 + C528) * C51190) * C17452) *
              C114 -
          ((((C117 * C488 + C51110 * C495) * C51026 +
             (C117 * C477 + C51110 * C489) * C118) *
                C51190 +
            (C187 + C186) * C34007) *
               C17452 +
           ((C528 + C527) * C51190 + C190 * C34007) * C17451 +
           C34015 * C17450) *
              C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C34007 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51190) *
               C17450 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C34007 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51190) *
               C17451 +
           ((C667 + C668 - C669 - C670 + C691 + C692) * C34007 +
            (C11572 + C11573 - C11574 - C11575 + C11582 + C11583) * C51190) *
               C17452) *
              C51247 +
          (((C661 - (C660 + C659) + C662 - C689 - C690) * C34007 +
            (C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C51190) *
               C17450 +
           ((C669 - (C668 + C667) + C670 - C691 - C692) * C34007 +
            (C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) * C51190) *
               C17451 +
           ((C677 - (C676 + C675) + C678 - C693 - C694) * C34007 +
            (C1670 * C636 - (C518 * C630 + C517 * C635) + C1671 * C631 -
             (C117 * C890 + C51110 * C905) * C637 -
             (C117 * C906 + C51110 * C914) * C632) *
                C51190) *
               C17452) *
              C50997) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51026) *
               C34007 +
           ((C2449 * C476 + C2444 * C487 + C2450 * C883 + C2445 * C891 +
             C2451 * C884 + C2446 * C893) *
                C118 +
            (C2449 * C486 + C2444 * C494 + C2450 * C892 + C2445 * C907 +
             C2451 * C894 + C2446 * C908) *
                C51026) *
               C51190) *
              C50973 * C112 -
          (((C2864 + C2863 + C2862) * C51026 + (C2861 + C2860 + C2859) * C118) *
               C51190 +
           ((C2494 + C2493 + C2492) * C51026 + (C2491 + C2490 + C2489) * C118) *
               C34007) *
              C50973 * C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51026) *
               C34007 +
           ((C2865 + C2866 + C2867) * C118 + (C2868 + C2869 + C2870) * C51026) *
               C51190) *
              C50973 * C114 -
          (((C2451 * C906 + C2446 * C914 + C2450 * C904 + C2445 * C913 +
             C2449 * C483 + C2444 * C492) *
                C51026 +
            (C2451 * C890 + C2446 * C905 + C2450 * C889 + C2445 * C903 +
             C2449 * C474 + C2444 * C482) *
                C118) *
               C51190 +
           ((C2506 + C2505 + C2504) * C51026 + (C2503 + C2502 + C2501) * C118) *
               C34007) *
              C50973 * C115) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C34007 +
           ((C36957 + C36958 + C36959) * C635 +
            (C36960 + C36961 + C36962) * C630 -
            (C2451 * C3298 + C2446 * C3302 + C2450 * C884 + C2445 * C893 +
             C2449 * C883 + C2444 * C891) *
                C636 -
            (C2451 * C3303 + C2446 * C3310 + C2450 * C894 + C2445 * C908 +
             C2449 * C892 + C2444 * C907) *
                C631 +
            (C2449 * C884 + C2444 * C893 + C2450 * C3298 + C2445 * C3302 +
             C2451 * C3299 + C2446 * C3304) *
                C637 +
            (C2449 * C894 + C2444 * C908 + C2450 * C3303 + C2445 * C3310 +
             C2451 * C3305 + C2446 * C3311) *
                C632) *
               C51190) *
              C50973 * C51247 +
          (((C2679 + C2678 + C2677) * C636 -
            ((C2494 + C2493 + C2492) * C630 + (C2491 + C2490 + C2489) * C635) +
            (C2682 + C2681 + C2680) * C631 - (C3043 + C3042 + C3041) * C637 -
            (C3046 + C3045 + C3044) * C632) *
               C34007 +
           ((C4261 + C4262 + C4263) * C636 -
            ((C2864 + C2863 + C2862) * C630 + (C2861 + C2860 + C2859) * C635) +
            (C4264 + C4265 + C4266) * C631 -
            (C2451 * C3301 + C2446 * C3308 + C2450 * C3300 + C2445 * C3306 +
             C2449 * C886 + C2444 * C897) *
                C637 -
            (C2451 * C3309 + C2446 * C3313 + C2450 * C3307 + C2445 * C3312 +
             C2449 * C898 + C2444 * C910) *
                C632) *
               C51190) *
              C50973 * C50997) *
         C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C298 +
             (C117 * C127 + C51110 * C140) * C51254 -
             (C117 * C300 + C51110 * C306) * C299 -
             (C117 * C307 + C51110 * C318) * C51042) *
                C34007 +
            (C6472 + C6473 - C6474 - C6475) * C51190) *
               C17450 +
           ((C325 + C326 - C359 - C360) * C34007 + C7501 * C51190) * C17451 +
           C34164 * C17452) *
              C295 +
          (((C359 - (C326 + C325) + C360) * C34007 + C7502 * C51190) * C17450 +
           ((C361 - (C332 + C331) + C362) * C34007 + C13061 * C51190) * C17451 +
           ((C363 - (C338 + C337) + C364) * C34007 +
            (C1916 - (C1917 + C1918) + C1919) * C51190) *
               C17452) *
              C296 +
          (C34164 * C17450 +
           (C370 * C34007 + (C1918 + C1917 - C1916 - C1919) * C51190) * C17451 +
           ((C346 + C345 - C365 - C366) * C34007 +
            (C519 * C298 + C520 * C51254 -
             (C117 * C1643 + C51110 * C1644) * C299 -
             (C117 * C1645 + C51110 * C1646) * C51042) *
                C51190) *
               C17452) *
              C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51110 * C126) * C765 +
            (C117 * C127 + C51110 * C140) * C760 -
            (C117 * C300 + C51110 * C306) * C766 -
            (C117 * C307 + C51110 * C318) * C761 +
            (C117 * C638 + C51110 * C643) * C767 +
            (C117 * C644 + C51110 * C653) * C762 -
            (C117 * C769 + C51110 * C773) * C768 -
            (C117 * C774 + C51110 * C781) * C763) *
               C34007 +
           (C5675 * C765 + C5676 * C760 - C6125 * C766 - C6126 * C761 +
            C6127 * C767 + C6128 * C762 -
            (C117 * C3298 + C51110 * C3302) * C768 -
            (C117 * C3303 + C51110 * C3310) * C763) *
               C51190) *
              C17450 +
          ((C168 * C765 + C169 * C760 - C349 * C766 - C350 * C761 +
            C683 * C767 + C684 * C762 - (C117 * C770 + C51110 * C775) * C768 -
            (C117 * C776 + C51110 * C782) * C763) *
               C34007 +
           (C513 * C765 + C514 * C760 - C1666 * C766 - C1667 * C761 +
            C5853 * C767 + C5854 * C762 -
            (C117 * C3300 + C51110 * C3306) * C768 -
            (C117 * C3307 + C51110 * C3312) * C763) *
               C51190) *
              C17451 +
          ((C170 * C765 + C171 * C760 - C352 * C766 - C353 * C761 +
            C685 * C767 + C686 * C762 - (C117 * C771 + C51110 * C777) * C768 -
            (C117 * C778 + C51110 * C783) * C763) *
               C34007 +
           (C515 * C765 + C516 * C760 - C1668 * C766 - C1669 * C761 +
            C11580 * C767 + C11581 * C762 -
            (C117 * C4244 + C51110 * C4245) * C768 -
            (C117 * C4246 + C51110 * C4247) * C763) *
               C51190) *
              C17452) *
         C50992 * C51056) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C51254 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C299 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C51042) *
               C34007 +
           ((C2449 * C476 + C2444 * C487 + C2450 * C883 + C2445 * C891 +
             C2451 * C884 + C2446 * C893) *
                C298 +
            (C2449 * C486 + C2444 * C494 + C2450 * C892 + C2445 * C907 +
             C2451 * C894 + C2446 * C908) *
                C51254 -
            (C2451 * C3298 + C2446 * C3302 + C2450 * C884 + C2445 * C893 +
             C2449 * C883 + C2444 * C891) *
                C299 -
            (C2451 * C3303 + C2446 * C3310 + C2450 * C894 + C2445 * C908 +
             C2449 * C892 + C2444 * C907) *
                C51042) *
               C51190) *
              C50973 * C295 +
          (((C2679 + C2678 + C2677) * C299 -
            ((C2494 + C2493 + C2492) * C51254 +
             (C2491 + C2490 + C2489) * C298) +
            (C2682 + C2681 + C2680) * C51042) *
               C34007 +
           ((C4261 + C4262 + C4263) * C299 -
            ((C2864 + C2863 + C2862) * C51254 +
             (C2861 + C2860 + C2859) * C298) +
            (C4264 + C4265 + C4266) * C51042) *
               C51190) *
              C50973 * C296 +
          (((C2500 + C2499 + C2498) * C298 + (C2497 + C2496 + C2495) * C51254 -
            (C2685 + C2684 + C2683) * C299 - (C2688 + C2687 + C2686) * C51042) *
               C34007 +
           ((C2865 + C2866 + C2867) * C298 + (C2868 + C2869 + C2870) * C51254 -
            (C2451 * C4244 + C2446 * C4245 + C2450 * C888 + C2445 * C901 +
             C2449 * C887 + C2444 * C899) *
                C299 -
            (C2451 * C4246 + C2446 * C4247 + C2450 * C902 + C2445 * C912 +
             C2449 * C900 + C2444 * C911) *
                C51042) *
               C51190) *
              C50973 * C297) *
         C51056) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
            C2451 * C638 + C2446 * C643) *
               C765 +
           (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
            C2451 * C644 + C2446 * C653) *
               C760 -
           (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
            C2449 * C300 + C2444 * C306) *
               C766 -
           (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
            C2449 * C307 + C2444 * C318) *
               C761 +
           (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
            C2451 * C3016 + C2446 * C3019) *
               C767 +
           (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
            C2451 * C3020 + C2446 * C3025) *
               C762 -
           (C2451 * C3144 + C2446 * C3146 + C2450 * C3016 + C2445 * C3019 +
            C2449 * C769 + C2444 * C773) *
               C768 -
           (C2451 * C3147 + C2446 * C3150 + C2450 * C3020 + C2445 * C3025 +
            C2449 * C774 + C2444 * C781) *
               C763) *
              C34007 +
          ((C36957 + C36958 + C36959) * C765 +
           (C36960 + C36961 + C36962) * C760 -
           (C2451 * C3298 + C2446 * C3302 + C2450 * C884 + C2445 * C893 +
            C2449 * C883 + C2444 * C891) *
               C766 -
           (C2451 * C3303 + C2446 * C3310 + C2450 * C894 + C2445 * C908 +
            C2449 * C892 + C2444 * C907) *
               C761 +
           (C2449 * C884 + C2444 * C893 + C2450 * C3298 + C2445 * C3302 +
            C2451 * C3299 + C2446 * C3304) *
               C767 +
           (C2449 * C894 + C2444 * C908 + C2450 * C3303 + C2445 * C3310 +
            C2451 * C3305 + C2446 * C3311) *
               C762 -
           (C2451 * C20750 + C2446 * C20751 + C2450 * C3299 + C2445 * C3304 +
            C2449 * C3298 + C2444 * C3302) *
               C768 -
           (C2451 * C20752 + C2446 * C20753 + C2450 * C3305 + C2445 * C3311 +
            C2449 * C3303 + C2444 * C3310) *
               C763) *
              C51190) *
         C50973 * C50992 * C51056) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51110 * C126) * C118 +
              (C117 * C127 + C51110 * C140) * C51026) *
                 C34007 +
             (C5683 + C5684) * C51190) *
                C17450 +
            ((C178 + C179) * C34007 + C5660 * C51190) * C17451 +
            C34014 * C17452) *
               C295 -
           (C34015 * C17452 +
            (C530 * C51190 + (C181 + C180) * C34007) * C17451 +
            (C5664 * C51190 + (C179 + C178) * C34007) * C17450) *
               C296 +
           (C34014 * C17450 + (C189 * C34007 + C11422 * C51190) * C17451 +
            ((C185 + C184) * C34007 + (C527 + C528) * C51190) * C17452) *
               C297) *
              C51256 +
          (((C5660 * C34007 + C5661 * C51190) * C17450 +
            (C5665 * C34007 + C5666 * C51190) * C17451 +
            (C11422 * C34007 + (C1059 + C1060) * C51190) * C17452) *
               C296 -
           (C34313 * C17452 + (C5663 * C51190 + C5664 * C34007) * C17451 +
            ((C5686 + C5685) * C51190 + (C5684 + C5683) * C34007) * C17450) *
               C295 -
           ((((C117 * C1029 + C51110 * C1035) * C51026 +
              (C117 * C1020 + C51110 * C1030) * C118) *
                 C51190 +
             (C528 + C527) * C34007) *
                C17452 +
            ((C1060 + C1059) * C51190 + C529 * C34007) * C17451 +
            C34313 * C17450) *
               C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51110 * C126) * C635 +
             (C117 * C127 + C51110 * C140) * C630 -
             (C117 * C300 + C51110 * C306) * C636 -
             (C117 * C307 + C51110 * C318) * C631 +
             (C117 * C638 + C51110 * C643) * C637 +
             (C117 * C644 + C51110 * C653) * C632) *
                C34007 +
            (C6105 + C6106 - C6133 - C6134 + C6135 + C6136) * C51190) *
               C17450 +
           ((C659 + C660 - C661 - C662 + C689 + C690) * C34007 +
            (C5837 + C5838 - C5839 - C5840 + C5857 + C5858) * C51190) *
               C17451 +
           ((C667 + C668 - C669 - C670 + C691 + C692) * C34007 +
            (C11572 + C11573 - C11574 - C11575 + C11582 + C11583) * C51190) *
               C17452) *
              C50992 * C51256 +
          (((C6133 - (C6106 + C6105) + C6134 - C6135 - C6136) * C34007 +
            (C6137 - (C6116 + C6115) + C6138 - C6139 - C6140) * C51190) *
               C17450 +
           ((C5839 - (C5838 + C5837) + C5840 - C5857 - C5858) * C34007 +
            (C5847 - (C5846 + C5845) + C5848 - C5859 - C5860) * C51190) *
               C17451 +
           ((C11574 - (C11573 + C11572) + C11575 - C11582 - C11583) * C34007 +
            (C5500 * C636 - (C1052 * C630 + C1051 * C635) + C5501 * C631 -
             (C117 * C3462 + C51110 * C3468) * C637 -
             (C117 * C3467 + C51110 * C3471) * C632) *
                C51190) *
               C17452) *
              C50992 * C51068)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
              C2451 * C638 + C2446 * C643) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
              C2451 * C644 + C2446 * C653) *
                 C51026) *
                C34007 +
            ((C36957 + C36958 + C36959) * C118 +
             (C36960 + C36961 + C36962) * C51026) *
                C51190) *
               C50973 * C295 -
           (((C2864 + C2863 + C2862) * C51026 +
             (C2861 + C2860 + C2859) * C118) *
                C51190 +
            ((C2494 + C2493 + C2492) * C51026 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50973 * C296 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51026) *
                C34007 +
            ((C2865 + C2866 + C2867) * C118 +
             (C2868 + C2869 + C2870) * C51026) *
                C51190) *
               C50973 * C297) *
              C51256 +
          ((((C2859 + C2860 + C2861) * C118 +
             (C2862 + C2863 + C2864) * C51026) *
                C34007 +
            ((C3485 + C3486 + C3487) * C118 +
             (C3488 + C3489 + C3490) * C51026) *
                C51190) *
               C50973 * C296 -
           (((C2451 * C3464 + C2446 * C3469 + C2450 * C1163 + C2445 * C1170 +
              C2449 * C1022 + C2444 * C1031) *
                 C51026 +
             (C2451 * C3460 + C2446 * C3463 + C2450 * C1158 + C2445 * C1162 +
              C2449 * C1016 + C2444 * C1021) *
                 C118) *
                C51190 +
            ((C36962 + C36961 + C36960) * C51026 +
             (C36959 + C36958 + C36957) * C118) *
                C34007) *
               C50973 * C295 -
           (((C2451 * C3467 + C2446 * C3471 + C2450 * C1167 + C2445 * C1172 +
              C2449 * C1026 + C2444 * C1033) *
                 C51026 +
             (C2451 * C3462 + C2446 * C3468 + C2450 * C1160 + C2445 * C1166 +
              C2449 * C1018 + C2444 * C1025) *
                 C118) *
                C51190 +
            ((C2870 + C2869 + C2868) * C51026 +
             (C2867 + C2866 + C2865) * C118) *
                C34007) *
               C50973 * C297) *
              C51068)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C300 + C2445 * C306 +
             C2451 * C638 + C2446 * C643) *
                C635 +
            (C2449 * C127 + C2444 * C140 + C2450 * C307 + C2445 * C318 +
             C2451 * C644 + C2446 * C653) *
                C630 -
            (C2451 * C769 + C2446 * C773 + C2450 * C638 + C2445 * C643 +
             C2449 * C300 + C2444 * C306) *
                C636 -
            (C2451 * C774 + C2446 * C781 + C2450 * C644 + C2445 * C653 +
             C2449 * C307 + C2444 * C318) *
                C631 +
            (C2449 * C638 + C2444 * C643 + C2450 * C769 + C2445 * C773 +
             C2451 * C3016 + C2446 * C3019) *
                C637 +
            (C2449 * C644 + C2444 * C653 + C2450 * C774 + C2445 * C781 +
             C2451 * C3020 + C2446 * C3025) *
                C632) *
               C34007 +
           ((C36957 + C36958 + C36959) * C635 +
            (C36960 + C36961 + C36962) * C630 -
            (C37377 + C37378 + C37379) * C636 -
            (C37380 + C37381 + C37382) * C631 +
            (C37383 + C37384 + C37385) * C637 +
            (C37386 + C37387 + C37388) * C632) *
               C51190) *
              C50973 * C50992 * C51256 +
          (((C37379 + C37378 + C37377) * C636 -
            ((C36962 + C36961 + C36960) * C630 +
             (C36959 + C36958 + C36957) * C635) +
            (C37382 + C37381 + C37380) * C631 -
            (C37385 + C37384 + C37383) * C637 -
            (C37388 + C37387 + C37386) * C632) *
               C34007 +
           ((C2449 * C1158 + C2444 * C1162 + C2450 * C3460 + C2445 * C3463 +
             C2451 * C3636 + C2446 * C3638) *
                C636 -
            ((C2451 * C3464 + C2446 * C3469 + C2450 * C1163 + C2445 * C1170 +
              C2449 * C1022 + C2444 * C1031) *
                 C630 +
             (C2451 * C3460 + C2446 * C3463 + C2450 * C1158 + C2445 * C1162 +
              C2449 * C1016 + C2444 * C1021) *
                 C635) +
            (C2449 * C1163 + C2444 * C1170 + C2450 * C3464 + C2445 * C3469 +
             C2451 * C3639 + C2446 * C3642) *
                C631 -
            (C2451 * C20950 + C2446 * C20951 + C2450 * C3636 + C2445 * C3638 +
             C2449 * C3460 + C2444 * C3463) *
                C637 -
            (C2451 * C20952 + C2446 * C20953 + C2450 * C3639 + C2445 * C3642 +
             C2449 * C3464 + C2444 * C3469) *
                C632) *
               C51190) *
              C50973 * C50992 * C51068)) /
            (p * q * std::sqrt(p + q));
}
