/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pddp_AC_zx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1221_13_31(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49747 = 0 * ce;
    const double C49746 = ce * de;
    const double C49745 = 0 * de;
    const double C49744 = ce + de;
    const double C49743 = 0 * de;
    const double C49742 = xC - xD;
    const double C49811 = ae * be;
    const double C49810 = ae + be;
    const double C49809 = 0 * be;
    const double C49808 = zA - zB;
    const double C49839 = 0 * ae;
    const double C49834 = 0 * be;
    const double C49873 = zP - zQ;
    const double C49872 = p + q;
    const double C49871 = p * q;
    const double C49870 = xP - xQ;
    const double C49878 = bs[3];
    const double C49889 = bs[4];
    const double C49897 = bs[5];
    const double C49916 = bs[6];
    const double C49946 = bs[7];
    const double C50025 = yP - yQ;
    const double C50340 = bs[2];
    const double C122 = bs[0];
    const double C50766 = xA - xB;
    const double C50797 = yC - yD;
    const double C50802 = zC - zD;
    const double C50895 = yA - yB;
    const double C49752 = C49747 / C49744;
    const double C49749 = 2 * C49744;
    const double C49748 = std::pow(C49744, 2);
    const double C49751 = C49746 * C49742;
    const double C49750 = C49742 * C49745;
    const double C50749 = C49742 * de;
    const double C50748 = C49742 * ce;
    const double C50747 = std::pow(C49742, 2);
    const double C49812 = std::pow(C49810, 2);
    const double C49835 = 2 * C49810;
    const double C49881 = C49744 * C49810;
    const double C143 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (zP - zQ) * (xP - xQ) * ae * ce) /
                         C49744) /
                        C49810;
    const double C49813 = C49811 * C49808;
    const double C49836 = C49808 * C49809;
    const double C50907 = std::pow(C49808, 2);
    const double C50971 = C49808 * be;
    const double C50970 = C49808 * ae;
    const double C49844 = C49839 / C49810;
    const double C49879 = C49873 * ae;
    const double C50152 = std::pow(C49873, 2);
    const double C49874 = 2 * C49871;
    const double C49880 = C49873 * C49870;
    const double C49899 = std::pow(C49870, 2);
    const double C49986 = C49870 * ce;
    const double C50034 = std::pow(C50025, 2);
    const double C50769 = C50766 * be;
    const double C50768 = C50766 * ae;
    const double C50767 = std::pow(C50766, 2);
    const double C50811 = std::pow(C50797, 2);
    const double C50825 = C50797 * de;
    const double C50824 = C50797 * ce;
    const double C50837 = std::pow(C50802, 2);
    const double C50849 = C50802 * de;
    const double C50848 = C50802 * ce;
    const double C50896 = std::pow(C50895, 2);
    const double C50945 = C50895 * be;
    const double C50944 = C50895 * ae;
    const double C50757 = std::pow(C49749, -1);
    const double C51039 = std::pow(C49749, -2);
    const double C49753 = 2 * C49748;
    const double C51031 = 4 * C49748;
    const double C49754 = C49750 / C49744;
    const double C50750 = C50747 * C49746;
    const double C49814 = 2 * C49812;
    const double C51038 = 4 * C49812;
    const double C50777 = std::pow(C49835, -1);
    const double C51053 = std::pow(C49835, -2);
    const double C49841 = C49836 / C49810;
    const double C50908 = C50907 * C49811;
    const double C49883 = C49878 * C49879;
    const double C49891 = C49889 * C49879;
    const double C49902 = C49897 * C49879;
    const double C49922 = C49916 * C49879;
    const double C49954 = C49946 * C49879;
    const double C49875 = C49874 / C49872;
    const double C129 = (-(bs[1] * C49879 * C49874) / C49872) / C49810;
    const double C123 = -(C49870 * bs[1] * C49874) / C49872;
    const double C287 = -(C50025 * bs[1] * C49874) / C49872;
    const double C435 = -(C49873 * bs[1] * C49874) / C49872;
    const double C49884 = C49880 * ae;
    const double C49989 = C49889 * C49986;
    const double C49993 = C49897 * C49986;
    const double C50003 = C49916 * C49986;
    const double C50039 = C49878 * C49986;
    const double C50062 = C49946 * C49986;
    const double C130 = (bs[1] * C49986 * C49874) / (C49872 * C49744);
    const double C50770 = C50767 * C49811;
    const double C50812 = C50811 * C49746;
    const double C50838 = C50837 * C49746;
    const double C50897 = C50896 * C49811;
    const double C49759 = C49745 / C49753;
    const double C49757 = C49743 / C49753;
    const double C49756 = 0 - C49754;
    const double C50751 = C50750 / C49744;
    const double C49838 = C49809 / C49814;
    const double C49842 = C49834 / C49814;
    const double C49845 = 0 - C49841;
    const double C50909 = C50908 / C49810;
    const double C49877 = -C49875;
    const double C49888 = std::pow(C49875, 4);
    const double C49915 = std::pow(C49875, 6);
    const double C144 =
        (-(C49870 * std::pow(-C49875, 3) * bs[3] * C49873 * C49870 * ae * ce) /
         C49744) /
            C49810 -
        (std::pow(C49875, 2) * bs[2] * C49873 * ae * ce) / (C49744 * C49810);
    const double C50341 = std::pow(C49875, 2);
    const double C131 =
        (C49870 * std::pow(C49875, 2) * bs[2] * C49879) / C49810;
    const double C132 =
        (ce * bs[1] * C49874) / (C49872 * C49744) -
        (C49870 * std::pow(C49875, 2) * bs[2] * C49986) / C49744;
    const double C49886 = C49884 * ce;
    const double C50771 = C50770 / C49810;
    const double C50813 = C50812 / C49744;
    const double C50839 = C50838 / C49744;
    const double C50898 = C50897 / C49810;
    const double C49761 = C49756 * ce;
    const double C50752 = -C50751;
    const double C49848 = C49845 * ae;
    const double C50910 = -C50909;
    const double C49882 = std::pow(C49877, 3);
    const double C49896 = std::pow(C49877, 5);
    const double C49945 = std::pow(C49877, 7);
    const double C49893 = C49888 * C49891;
    const double C49990 = C49889 * C49888;
    const double C49991 = C49888 * C49989;
    const double C49925 = C49915 * C49922;
    const double C50006 = C49916 * C49915;
    const double C50007 = C49915 * C50003;
    const double C50342 = C50340 * C50341;
    const double C293 = -(C50025 * C50341 * C50340 * C49986) / C49744;
    const double C294 = (C50025 * C50341 * C50340 * C49879) / C49810;
    const double C441 = -(C49873 * C50341 * C50340 * C49986) / C49744;
    const double C442 = (C49873 * C50341 * C50340 * C49879) / C49810 -
                        (ae * bs[1] * C49874) / (C49872 * C49810);
    const double C49890 = C49889 * C49886;
    const double C49900 = C49897 * C49886;
    const double C49919 = C49916 * C49886;
    const double C49951 = C49946 * C49886;
    const double C50772 = -C50771;
    const double C50814 = -C50813;
    const double C50840 = -C50839;
    const double C50899 = -C50898;
    const double C49764 = C49761 / C49744;
    const double C50753 = std::exp(C50752);
    const double C49850 = C49848 / C49810;
    const double C50911 = std::exp(C50910);
    const double C49885 = C49882 * C49883;
    const double C49987 = C49878 * C49882;
    const double C50040 = C49882 * C50039;
    const double C304 =
        (-((yP - yQ) * C49882 * C49878 * C49886) / C49744) / C49810;
    const double C452 =
        (-(C49873 * C49882 * C49878 * C49886) / C49744) / C49810 -
        (ae * std::pow(C49875, 2) * bs[2] * C49870 * ce) / C49881;
    const double C49904 = C49896 * C49902;
    const double C49996 = C49897 * C49896;
    const double C49997 = C49896 * C49993;
    const double C49958 = C49945 * C49954;
    const double C50069 = C49945 * C50062;
    const double C49898 = C49893 * ce;
    const double C49895 = C49870 * C49893;
    const double C50509 = C50025 * C49893;
    const double C50513 = C49873 * C49893;
    const double C49995 = C49870 * C49990;
    const double C49994 = C49990 * ce;
    const double C50348 = C49990 * C49899;
    const double C50473 = C49990 * C50034;
    const double C50494 = C50025 * C49990;
    const double C50516 = C49990 * C50152;
    const double C50575 = C49873 * C49990;
    const double C50574 = C49990 * ae;
    const double C50042 = C49870 * C49991;
    const double C50092 = C50025 * C49991;
    const double C50151 = ae * C49991;
    const double C50149 = C49873 * C49991;
    const double C49928 = C49925 * C49899;
    const double C49947 = C49925 * ce;
    const double C49943 = C49870 * C49925;
    const double C50593 = C49925 * C50034;
    const double C50621 = C50025 * C49925;
    const double C50639 = C49873 * C49925;
    const double C50009 = C50006 * C49899;
    const double C50064 = C49870 * C50006;
    const double C50063 = C50006 * ce;
    const double C50603 = C50006 * C50034;
    const double C50624 = C50025 * C50006;
    const double C50643 = C50006 * C50152;
    const double C50011 = C49870 * C50007;
    const double C50134 = C50007 * C50034;
    const double C50190 = C50025 * C50007;
    const double C50221 = C50007 * C50152;
    const double C50306 = ae * C50007;
    const double C50304 = C49873 * C50007;
    const double C124 = C50342 * C49899 - (bs[1] * C49874) / C49872;
    const double C286 = C50025 * C49870 * C50342;
    const double C434 = C49873 * C49870 * C50342;
    const double C587 = C50342 * C50034 - (bs[1] * C49874) / C49872;
    const double C811 = C49873 * C50025 * C50342;
    const double C944 = C50342 * C50152 - (bs[1] * C49874) / C49872;
    const double C49892 = C49888 * C49890;
    const double C49903 = C49896 * C49900;
    const double C49924 = C49915 * C49919;
    const double C49957 = C49945 * C49951;
    const double C50773 = std::exp(C50772);
    const double C50815 = std::exp(C50814);
    const double C50841 = std::exp(C50840);
    const double C50900 = std::exp(C50899);
    const double C49766 = C49764 - C49757;
    const double C49755 = C49751 * C50753;
    const double C50754 = C50753 * C50748;
    const double C50758 = C50757 * C50753;
    const double C51027 = C50753 / C49749;
    const double C51026 = C50753 * C50749;
    const double C280 = C51039 * C50753;
    const double C49852 = C49850 - C49842;
    const double C154 = C50911 * C144;
    const double C152 = C50911 * C131;
    const double C2453 = C50911 * C294;
    const double C49815 = C49813 * C50911;
    const double C117 = -(2 * ae * be * (zA - zB) * C50911) / (ae + be);
    const double C50972 = C50911 * C50970;
    const double C50975 = C50777 * C50911;
    const double C51061 = C50911 * C50971;
    const double C51054 = C50911 / C49835;
    const double C5310 = C51053 * C50911;
    const double C145 =
        (-(C49870 * C49885 * ce) / C49744) / C49810 -
        (C49882 * C49878 * C49886) / C49881 +
        C49870 * ((-(C49870 * std::pow(C49875, 4) * bs[4] * C49886) / C49744) /
                      C49810 -
                  (C49885 * ce) / C49881);
    const double C133 =
        (std::pow(C49875, 2) * bs[2] * C49879 + C49885 * C49899) / C49810;
    const double C135 =
        (2 * C49870 * C49885 + C49870 * (C49885 + C49893 * C49899)) / C49810;
    const double C292 = (C50025 * C49870 * C49885) / C49810;
    const double C296 = (C50025 * (C49885 + C49893 * C49899)) / C49810;
    const double C440 =
        (C49873 * C49870 * C49885 + C49870 * C50342 * ae) / C49810;
    const double C592 = (C50341 * C50340 * C49879 + C49885 * C50034) / C49810;
    const double C708 =
        (2 * C50025 * C49885 + C50025 * (C49885 + C49893 * C50034)) / C49810;
    const double C819 =
        (C49873 * C50025 * C49885 + C50025 * C50342 * ae) / C49810;
    const double C949 =
        (C50341 * C50340 * C49879 + C49873 * (C49873 * C49885 + C50342 * ae) +
         C49873 * C50342 * ae) /
        C49810;
    const double C50043 = C49987 * ce;
    const double C50347 = C49870 * C49987;
    const double C50439 = C50025 * C49987;
    const double C50515 = C49873 * C49987;
    const double C50514 = C49987 * ae;
    const double C444 = (C49873 * (C49885 + C49893 * C49899) +
                         (C50342 + C49987 * C49899) * ae) /
                        C49810;
    const double C834 = (C49873 * (C49885 + C49893 * C50034) +
                         (C50342 + C49987 * C50034) * ae) /
                        C49810;
    const double C1177 =
        (2 * (C49873 * C49885 + C50342 * ae) +
         C49873 * (C49885 + C49873 * (C49873 * C49893 + C49987 * ae) +
                   C49873 * C49987 * ae) +
         (C50342 + C49987 * C50152) * ae) /
        C49810;
    const double C125 =
        2 * C49870 * C50342 + C49870 * (C50342 + C49987 * C49899);
    const double C288 = C50025 * (C50342 + C49987 * C49899);
    const double C436 = C49873 * (C50342 + C49987 * C49899);
    const double C700 =
        2 * C50025 * C50342 + C50025 * (C50342 + C49987 * C50034);
    const double C818 = C49873 * (C50342 + C49987 * C50034);
    const double C1169 =
        2 * C49873 * C50342 + C49873 * (C50342 + C49987 * C50152);
    const double C134 = -(C49870 * (C49870 * C50040 + C50342 * ce) +
                          C50341 * C50340 * C49986 + C49870 * C50342 * ce) /
                        C49744;
    const double C295 = -(C50025 * (C49870 * C50040 + C50342 * ce)) / C49744;
    const double C443 = -(C49873 * (C49870 * C50040 + C50342 * ce)) / C49744;
    const double C593 = -(C50040 * C50034 + C50341 * C50340 * C49986) / C49744;
    const double C707 = (-2 * C50025 * C50040) / C49744 -
                        (C50025 * (C49991 * C50034 + C50040)) / C49744;
    const double C820 = -(C49873 * C50025 * C50040) / C49744;
    const double C833 = -(C49873 * (C49991 * C50034 + C50040)) / C49744;
    const double C950 = -(C50040 * C50152 + C50341 * C50340 * C49986) / C49744;
    const double C1176 = (-2 * C49873 * C50040) / C49744 -
                         (C49873 * (C49991 * C50152 + C50040)) / C49744;
    const double C2455 = C50911 * C304;
    const double C49906 = C49904 * C49899;
    const double C49917 = C49904 * ce;
    const double C49913 = C49870 * C49904;
    const double C50462 = C49904 * C50034;
    const double C50548 = C50025 * C49904;
    const double C50573 = C49873 * C49904;
    const double C2806 =
        (3 * (C49885 + C49893 * C50034) +
         C50025 * (2 * C50025 * C49893 + C50025 * (C49893 + C49904 * C50034))) /
        C49810;
    const double C49998 = C49996 * C49899;
    const double C50005 = C49870 * C49996;
    const double C50004 = C49996 * ce;
    const double C50495 = C49996 * C50034;
    const double C50551 = C50025 * C49996;
    const double C50576 = C49996 * C50152;
    const double C50641 = C49873 * C49996;
    const double C50640 = C49996 * ae;
    const double C49999 = C49870 * C49997;
    const double C50115 = C49997 * C50034;
    const double C50133 = C50025 * C49997;
    const double C50155 = C49997 * C50152;
    const double C50220 = ae * C49997;
    const double C50218 = C49873 * C49997;
    const double C49961 = C49958 * C49899;
    const double C50073 = C49870 * C50069;
    const double C50257 = C50069 * C50034;
    const double C50280 = C50025 * C50069;
    const double C50308 = C50069 * C50152;
    const double C49901 = C49898 / C49881;
    const double C594 = (C49870 * C49885 + C49895 * C50034) / C49810;
    const double C50047 = C49995 * ce;
    const double C50352 = 2 * C49995;
    const double C50436 = C50025 * C49995;
    const double C50523 = C49873 * C49995;
    const double C50522 = C49995 * ae;
    const double C50349 = C49987 + C50348;
    const double C50474 = C49987 + C50473;
    const double C50496 = 2 * C50494;
    const double C50550 = C49873 * C50494;
    const double C50549 = C50494 * ae;
    const double C50518 = C49987 + C50516;
    const double C50580 = 2 * C50575;
    const double C50578 = C50575 * ae;
    const double C1090 = -(C50092 * C50152 + C50025 * C50040) / C49744;
    const double C50154 = C50151 / C49881;
    const double C49931 = C49904 + C49928;
    const double C49952 = C49947 / C49881;
    const double C49953 = 2 * C49943;
    const double C49950 = C49943 * ce;
    const double C50458 = C49943 * C50034;
    const double C50538 = C50025 * C49943;
    const double C50558 = C49873 * C49943;
    const double C50594 = C49904 + C50593;
    const double C50625 = C49873 * C50621;
    const double C50012 = C49996 + C50009;
    const double C50070 = C50064 * ce;
    const double C50487 = C50064 * C50034;
    const double C50541 = C50025 * C50064;
    const double C50561 = C50064 * C50152;
    const double C50604 = C49996 + C50603;
    const double C50627 = C50624 * C50152;
    const double C50647 = C49996 + C50643;
    const double C50136 = C50134 + C49997;
    const double C50193 = C50190 * C50152;
    const double C50256 = -2 * C50190;
    const double C50279 = ae * C50190;
    const double C50276 = C49873 * C50190;
    const double C50226 = C50221 + C49997;
    const double C50312 = C50306 / C49881;
    const double C50314 = -2 * C50304;
    const double C50310 = ae * C50304;
    const double C146 =
        2 * ((-(C49870 * C49892) / C49744) / C49810 - (C49885 * ce) / C49881) -
        ((C49885 + C49893 * std::pow(C49870, 2)) * ce) / C49881 +
        C49870 *
            ((-(C49870 * C49893 * ce) / C49744) / C49810 - C49892 / C49881 +
             C49870 *
                 ((-(C49870 * std::pow(C49877, 5) * bs[5] * C49886) / C49744) /
                      C49810 -
                  (C49893 * ce) / C49881));
    const double C305 = (yP - yQ) * ((-(C49870 * C49892) / C49744) / C49810 -
                                     (C49885 * ce) / C49881);
    const double C453 = C49873 * ((-(C49870 * C49892) / C49744) / C49810 -
                                  (C49885 * ce) / C49881) -
                        (ae * (C49870 * C49882 * C49878 * C49870 * ce +
                               bs[2] * std::pow(C49875, 2) * ce)) /
                            C49881;
    const double C602 = (-(C49892 * std::pow(yP - yQ, 2)) / C49744) / C49810 -
                        (C49882 * C49878 * C49886) / C49881;
    const double C835 = (-(C49873 * C50025 * C49892) / C49744) / C49810 -
                        (ae * C50025 * C49882 * C49878 * C49986) / C49881;
    const double C959 = (-(ae * C49873 * C50040) / C49744) / C49810 -
                        (C49882 * C49878 * C49886) / C49881 +
                        C49873 * ((-(C49873 * C49892) / C49744) / C49810 -
                                  (ae * C50040) / C49881);
    const double C49905 = C49870 * C49903;
    const double C49914 = C49903 / C49881;
    const double C50146 = C50025 * C49903;
    const double C50150 = C49873 * C49903;
    const double C712 =
        (-2 * C50025 * C49892) / C49881 +
        C50025 * ((-(C49903 * std::pow(C50025, 2)) / C49744) / C49810 -
                  C49892 / C49881);
    const double C842 =
        C49873 * ((-(C49903 * C50034) / C49744) / C49810 - C49892 / C49881) -
        (ae * (C49991 * C50034 + C49882 * C49878 * C49986)) / C49881;
    const double C1095 =
        (-(ae * C49873 * C50092) / C49744) / C49810 -
        (C50025 * C49892) / C49881 +
        C49873 * ((-(C49873 * C50025 * C49903) / C49744) / C49810 -
                  (ae * C50092) / C49881);
    const double C1181 =
        2 * ((-(C49873 * C49892) / C49744) / C49810 - (ae * C50040) / C49881) -
        (ae * (C49991 * std::pow(C49873, 2) + C50040)) / C49881 +
        C49873 *
            ((-(ae * C49873 * C49991) / C49744) / C49810 - C49892 / C49881 +
             C49873 * ((-(C49873 * C49903) / C49744) / C49810 -
                       (ae * C49991) / C49881));
    const double C49927 = C49870 * C49924;
    const double C49944 = C49924 / C49881;
    const double C50105 = C49924 * C50034;
    const double C50188 = C50025 * C49924;
    const double C50219 = C49873 * C49924;
    const double C49960 = C49870 * C49957;
    const double C50245 = C49957 * C50034;
    const double C50278 = C50025 * C49957;
    const double C50305 = C49873 * C49957;
    const double C50774 = C50773 * C50768;
    const double C50778 = C50777 * C50773;
    const double C51035 = C50773 * C50769;
    const double C51032 = C50773 / C49835;
    const double C17289 = C51053 * C50773;
    const double C50826 = C50815 * C50824;
    const double C50829 = C50757 * C50815;
    const double C51043 = C50815 * C50825;
    const double C51042 = C50815 / C49749;
    const double C584 = C51039 * C50815;
    const double C50850 = C50841 * C50848;
    const double C50853 = C50757 * C50841;
    const double C51048 = C50841 * C50849;
    const double C51047 = C50841 / C49749;
    const double C943 = C51039 * C50841;
    const double C50946 = C50900 * C50944;
    const double C50949 = C50777 * C50900;
    const double C51057 = C50900 * C50945;
    const double C51052 = C50900 / C49835;
    const double C2304 = C51053 * C50900;
    const double C49760 = C49755 / C49748;
    const double C49758 = 2 * C49755;
    const double C51029 = C50754 / C49753;
    const double C51028 = C50754 * C50749;
    const double C51025 = C50754 / C49744;
    const double C50761 = C50758 * C50749;
    const double C109 = C50758 / C51031;
    const double C1282 = C50758 / C49749;
    const double C278 = (C50753 * std::pow(C50749, 2)) / C49748 + C51027;
    const double C51065 = C51026 / C49744;
    const double C279 = (-2 * C50757 * C51026) / C49744;
    const double C49840 = C49815 / C49812;
    const double C49837 = 2 * C49815;
    const double C5313 = ((0 * ae) / C49810 - C49815 / C49812) / (2 * C49810) +
                         (0 * ae) / C49810;
    const double C10843 =
        ((C50911 - (C49808 * 2 * C49815) / C49810) * ae) / C49810 -
        C49809 / C49814;
    const double C10844 = (0 * ae) / C49810 - C49815 / C49812;
    const double C33360 =
        (-C49809 / C49810) / (2 * C49810) -
        ((C50911 - (C49808 * 2 * C49815) / C49810) * be) / C49810;
    const double C33361 =
        (-(2 * C49815) / C49810) / (2 * C49810) - (0 * be) / C49810;
    const double C155 = C117 * C124;
    const double C153 = C117 * C132;
    const double C151 = C117 * C123;
    const double C311 = C117 * C286;
    const double C459 = C117 * C434;
    const double C2466 = C117 * C587;
    const double C2454 = C117 * C293;
    const double C2452 = C117 * C287;
    const double C3171 = C117 * C811;
    const double C51063 = C50972 / C49814;
    const double C51062 = C50972 * C50971;
    const double C51056 = C50972 / C49810;
    const double C5309 = (2 * C50777 * C50972) / C49810;
    const double C5312 =
        (((C50911 - (C49808 * 2 * C49815) / C49810) * ae) / C49810 -
         C49809 / C49814) /
            (2 * C49810) +
        ((C49808 * ((0 * ae) / C49810 - C49815 / C49812) + C50975) * ae) /
            C49810;
    const double C51064 = C50975 * C50971;
    const double C38957 = C50975 / C51038;
    const double C44280 = C50975 / C49835;
    const double C51080 = C51061 / C49810;
    const double C5308 = (C50911 * std::pow(C50970, 2)) / C49812 + C51054;
    const double C158 = C50911 * C145;
    const double C156 = C50911 * C133;
    const double C160 = C50911 * C135;
    const double C312 = C50911 * C292;
    const double C316 = C50911 * C296;
    const double C460 = C50911 * C440;
    const double C10847 = C50975 * C440;
    const double C33364 = C50975 * C440;
    const double C2467 = C50911 * C592;
    const double C2836 = C50911 * C708;
    const double C3172 = C50911 * C819;
    const double C13903 = C50975 * C819;
    const double C36340 = C50975 * C819;
    const double C50044 = C50042 + C50043;
    const double C821 =
        (C49873 * C50025 * C49895 + C50025 * C50347 * ae) / C49810;
    const double C951 =
        (C49870 * C49885 + C49873 * (C49873 * C49895 + C50347 * ae) +
         C49873 * C50347 * ae) /
        C49810;
    const double C588 = C49870 * C50342 + C50347 * C50034;
    const double C699 =
        2 * C50025 * C50347 + C50025 * (C50347 + C49995 * C50034);
    const double C812 = C49873 * C50025 * C50347;
    const double C817 = C49873 * (C50347 + C49995 * C50034);
    const double C945 = C49870 * C50342 + C50347 * C50152;
    const double C1168 =
        2 * C49873 * C50347 + C49873 * (C50347 + C49995 * C50152);
    const double C1091 =
        (C50025 * C49885 + C49873 * (C49873 * C50025 * C49893 + C50439 * ae) +
         C49873 * C50439 * ae) /
        C49810;
    const double C3654 =
        (2 * (C49873 * C50509 + C50439 * ae) +
         C49873 * (C50509 + C49873 * (C49873 * C50025 * C49904 + C50494 * ae) +
                   C49873 * C50494 * ae) +
         (C50439 + C50494 * C50152) * ae) /
        C49810;
    const double C1083 = C50025 * C50342 + C50439 * C50152;
    const double C3646 =
        2 * C49873 * C50439 + C49873 * (C50439 + C50494 * C50152);
    const double C50517 = C50513 + C50514;
    const double C464 = C50911 * C444;
    const double C10857 = C50975 * C444;
    const double C33374 = C50975 * C444;
    const double C3166 = C50911 * C834;
    const double C14312 = C50975 * C834;
    const double C36348 = C50975 * C834;
    const double C159 = C117 * C125;
    const double C315 = C117 * C288;
    const double C463 = C117 * C436;
    const double C2835 = C117 * C700;
    const double C3165 = C117 * C818;
    const double C157 = C117 * C134;
    const double C313 = C117 * C295;
    const double C461 = C117 * C443;
    const double C2468 = C117 * C593;
    const double C2833 = C117 * C707;
    const double C3169 = C117 * C820;
    const double C3163 = C117 * C833;
    const double C49908 = C49893 + C49906;
    const double C49920 = C49917 / C49881;
    const double C49921 = 2 * C49913;
    const double C49918 = C49913 * ce;
    const double C50506 = C50025 * C49913;
    const double C50521 = C49873 * C49913;
    const double C706 =
        (2 * C50025 * C49895 + C50025 * (C49895 + C49913 * C50034)) / C49810;
    const double C832 = (C49873 * (C49895 + C49913 * C50034) +
                         (C50347 + C49995 * C50034) * ae) /
                        C49810;
    const double C1175 =
        (2 * (C49873 * C49895 + C50347 * ae) +
         C49873 * (C49895 + C49873 * (C49873 * C49913 + C49995 * ae) +
                   C49873 * C49995 * ae) +
         (C50347 + C49995 * C50152) * ae) /
        C49810;
    const double C2808 =
        (3 * (C49895 + C49913 * C50034) +
         C50025 * (2 * C50025 * C49913 + C50025 * (C49913 + C49943 * C50034))) /
        C49810;
    const double C50463 = C49893 + C50462;
    const double C50552 = C49873 * C50548;
    const double C50592 = 2 * C50548;
    const double C50577 = C50573 + C50574;
    const double C2980 = C50911 * C2806;
    const double C50000 = C49990 + C49998;
    const double C50010 = 2 * C50005;
    const double C50008 = C50005 * ce;
    const double C50477 = C50005 * C50034;
    const double C50486 = C50025 * C50005;
    const double C50524 = C50005 * C50152;
    const double C50560 = C49873 * C50005;
    const double C50559 = C50005 * ae;
    const double C50013 = C50011 + C50004;
    const double C50497 = C49990 + C50495;
    const double C50553 = C50551 * C50152;
    const double C50602 = 2 * C50551;
    const double C50623 = C49873 * C50551;
    const double C50622 = C50551 * ae;
    const double C50579 = C49990 + C50576;
    const double C50648 = 2 * C50641;
    const double C50646 = C50641 * ae;
    const double C50645 = C50639 + C50640;
    const double C50001 = C49999 + C49994;
    const double C50116 = C50115 + C49991;
    const double C50135 = -2 * C50133;
    const double C50189 = ae * C50133;
    const double C50187 = C49873 * C50133;
    const double C3653 = (-2 * C49873 * C50092) / C49744 -
                         (C49873 * (C50133 * C50152 + C50092)) / C49744;
    const double C50157 = C50155 + C49991;
    const double C50224 = C50220 / C49881;
    const double C50225 = -2 * C50218;
    const double C50222 = ae * C50218;
    const double C49964 = C49925 + C49961;
    const double C50074 = C50073 + C50063;
    const double C50260 = C50257 + C50007;
    const double C50285 = C50280 * C50152;
    const double C50315 = C50308 + C50007;
    const double C609 = C50911 * C594;
    const double C1089 =
        (C50025 * C49895 + C49873 * (C49873 * C50025 * C49913 + C50436 * ae) +
         C49873 * C50436 * ae) /
        C49810;
    const double C1082 = C50025 * C50347 + C50436 * C50152;
    const double C126 = 3 * (C50342 + C49987 * C49899) +
                        C49870 * (2 * C50347 + C49870 * C50349);
    const double C289 = C50025 * (2 * C50347 + C49870 * C50349);
    const double C437 = C49873 * (2 * C50347 + C49870 * C50349);
    const double C589 = C50342 + C49987 * C49899 + C50349 * C50034;
    const double C813 = C49873 * C50025 * C50349;
    const double C946 = C50342 + C49987 * C49899 + C50349 * C50152;
    const double C2803 = 3 * (C50342 + C49987 * C50034) +
                         C50025 * (2 * C50439 + C50025 * C50474);
    const double C3144 = C49873 * (2 * C50439 + C50025 * C50474);
    const double C3347 = C50342 + C49987 * C50034 + C50474 * C50152;
    const double C6286 = 3 * (C50342 + C49987 * C50152) +
                         C49873 * (2 * C50515 + C49873 * C50518);
    const double C3528 = C117 * C1090;
    const double C49934 = C49870 * C49931;
    const double C49948 = 3 * C49931;
    const double C49942 = C49931 * ce;
    const double C50529 = C49873 * C49931;
    const double C50587 = C50025 * C49931;
    const double C49956 = C49950 / C49744;
    const double C50459 = C49913 + C50458;
    const double C50542 = C49873 * C50538;
    const double C50595 = C50025 * C50594;
    const double C50613 = C49873 * C50594;
    const double C50014 = C49870 * C50012;
    const double C50065 = C50012 * ce;
    const double C50481 = C50012 * C50034;
    const double C50532 = C50012 * C50152;
    const double C50588 = C50025 * C50012;
    const double C50489 = C50005 + C50487;
    const double C50543 = C50541 * C50152;
    const double C50564 = C50005 + C50561;
    const double C50605 = C50025 * C50604;
    const double C50616 = C50604 * C50152;
    const double C50630 = C50551 + C50627;
    const double C50650 = C49873 * C50647;
    const double C50138 = C50025 * C50136;
    const double C50255 = -3 * C50136;
    const double C50270 = ae * C50136;
    const double C50268 = C49873 * C50136;
    const double C50195 = C50193 + C50133;
    const double C50259 = C50256 / C49744;
    const double C50283 = C50279 / C49881;
    const double C50284 = -2 * C50276;
    const double C50281 = ae * C50276;
    const double C50230 = C49873 * C50226;
    const double C50307 = -3 * C50226;
    const double C50303 = ae * C50226;
    const double C50319 = C50314 / C49744;
    const double C50317 = C50310 / C49744;
    const double C162 = C50911 * C146;
    const double C314 = C50911 * C305;
    const double C462 = C50911 * C453;
    const double C10851 = C50975 * C453;
    const double C33368 = C50975 * C453;
    const double C2469 = C50911 * C602;
    const double C3170 = C50911 * C835;
    const double C13907 = C50975 * C835;
    const double C36344 = C50975 * C835;
    const double C49907 = C49905 / C49744;
    const double C2812 =
        3 * ((-(C49903 * C50034) / C49744) / C49810 - C49892 / C49881) +
        C50025 * ((-2 * C50025 * C49903) / C49881 +
                  C50025 * ((-(C49924 * C50034) / C49744) / C49810 - C49914));
    const double C3658 =
        2 * ((-(C49873 * C50146) / C49744) / C49810 - (ae * C50092) / C49881) -
        (ae * (C50133 * std::pow(C49873, 2) + C50092)) / C49881 +
        C49873 *
            ((-(ae * C49873 * C50133) / C49744) / C49810 - C50146 / C49881 +
             C49873 * ((-(C49873 * C50025 * C49924) / C49744) / C49810 -
                       (ae * C50133) / C49881));
    const double C50153 = C50150 / C49744;
    const double C2834 = C50911 * C712;
    const double C3164 = C50911 * C842;
    const double C14308 = C50975 * C842;
    const double C36352 = C50975 * C842;
    const double C3529 = C50911 * C1095;
    const double C14671 = C50975 * C1095;
    const double C21934 = C5310 * C1095;
    const double C36964 = C50975 * C1095;
    const double C49930 = C49927 / C49744;
    const double C50106 = C50105 / C49744;
    const double C50191 = C49873 * C50188;
    const double C50244 = -2 * C50188;
    const double C50277 = C50188 / C49881;
    const double C50223 = C50219 / C49744;
    const double C49963 = C49960 / C49744;
    const double C50247 = C50245 / C49744;
    const double C50282 = C49873 * C50278;
    const double C50311 = C50305 / C49744;
    const double C51036 = C50774 / C49814;
    const double C51034 = C50774 / C49810;
    const double C51033 = C50774 * C50769;
    const double C17288 = (2 * C50777 * C50774) / C49810;
    const double C51037 = C50778 * C50769;
    const double C113 = C50778 / C51038;
    const double C8156 = C50778 / C49835;
    const double C51069 = C51035 / C49810;
    const double C17287 = (C50773 * std::pow(C50768, 2)) / C49812 + C51032;
    const double C51045 = C50826 / C49753;
    const double C51044 = C50826 * C50825;
    const double C51040 = C50826 / C49744;
    const double C50832 = C50829 * C50825;
    const double C695 = C50829 / C51031;
    const double C1390 = C50829 / C49749;
    const double C51071 = C51043 / C49744;
    const double C583 = (-2 * C50757 * C51043) / C49744;
    const double C582 = (C50815 * std::pow(C50825, 2)) / C49748 + C51042;
    const double C51050 = C50850 / C49753;
    const double C51049 = C50850 * C50849;
    const double C51041 = C50850 / C49744;
    const double C50856 = C50853 * C50849;
    const double C1165 = C50853 / C51031;
    const double C1875 = C50853 / C49749;
    const double C51074 = C51048 / C49744;
    const double C942 = (-2 * C50757 * C51048) / C49744;
    const double C941 = (C50841 * std::pow(C50849, 2)) / C49748 + C51047;
    const double C51059 = C50946 / C49814;
    const double C51058 = C50946 * C50945;
    const double C51055 = C50946 / C49810;
    const double C2303 = (2 * C50777 * C50946) / C49810;
    const double C51060 = C50949 * C50945;
    const double C19892 = C50949 / C51038;
    const double C24524 = C50949 / C49835;
    const double C51077 = C51057 / C49810;
    const double C2302 = (C50900 * std::pow(C50944, 2)) / C49812 + C51052;
    const double C49763 = C49752 - C49760;
    const double C49762 = C49742 * C49758;
    const double C285 =
        ((-C49758 / C49744) / C49749 - (0 * de) / C49744) / C49749 -
        (0 * de) / C49744;
    const double C696 = -C49758 / C49744;
    const double C1392 = (-C49758 / C49744) / C49749 - (0 * de) / C49744;
    const double C51066 = C51028 / C49748;
    const double C51030 = C50761 / C49744;
    const double C1386 = -C51065;
    const double C49847 = C49844 - C49840;
    const double C49843 = C49808 * C49837;
    const double C21933 = C5313 * C1090;
    const double C10864 = C10843 * C125;
    const double C10858 = C10843 * C134;
    const double C10854 = C10843 * C124;
    const double C10852 = C10843 * C132;
    const double C10848 = C10843 * C123;
    const double C11054 = C10843 * C288;
    const double C11048 = C10843 * C295;
    const double C11044 = C10843 * C286;
    const double C11238 = C10843 * C436;
    const double C11232 = C10843 * C443;
    const double C11228 = C10843 * C434;
    const double C13904 = C10843 * C293;
    const double C13900 = C10843 * C287;
    const double C14313 = C10843 * C587;
    const double C14309 = C10843 * C593;
    const double C14468 = C10843 * C707;
    const double C14464 = C10843 * C700;
    const double C14682 = C10843 * C833;
    const double C14678 = C10843 * C818;
    const double C14676 = C10843 * C811;
    const double C14672 = C10843 * C820;
    const double C15110 = C10843 * C1090;
    const double C10856 = C10844 * C436;
    const double C10850 = C10844 * C443;
    const double C10846 = C10844 * C434;
    const double C13906 = C10844 * C820;
    const double C13902 = C10844 * C811;
    const double C14311 = C10844 * C818;
    const double C14307 = C10844 * C833;
    const double C14670 = C10844 * C1090;
    const double C33381 = C33360 * C125;
    const double C33375 = C33360 * C134;
    const double C33371 = C33360 * C124;
    const double C33369 = C33360 * C132;
    const double C33365 = C33360 * C123;
    const double C33571 = C33360 * C288;
    const double C33565 = C33360 * C295;
    const double C33561 = C33360 * C286;
    const double C33755 = C33360 * C436;
    const double C33749 = C33360 * C443;
    const double C33745 = C33360 * C434;
    const double C36349 = C33360 * C593;
    const double C36345 = C33360 * C587;
    const double C36341 = C33360 * C293;
    const double C36337 = C33360 * C287;
    const double C36667 = C33360 * C700;
    const double C36663 = C33360 * C707;
    const double C36969 = C33360 * C811;
    const double C36965 = C33360 * C820;
    const double C36961 = C33360 * C818;
    const double C36957 = C33360 * C833;
    const double C37293 = C33360 * C1090;
    const double C33373 = C33361 * C436;
    const double C33367 = C33361 * C443;
    const double C33363 = C33361 * C434;
    const double C36351 = C33361 * C833;
    const double C36347 = C33361 * C818;
    const double C36343 = C33361 * C820;
    const double C36339 = C33361 * C811;
    const double C36963 = C33361 * C1090;
    const double C172 = C153 + C154;
    const double C171 = C151 + C152;
    const double C2489 = C2454 + C2455;
    const double C2488 = C2452 + C2453;
    const double C51081 = C51062 / C49812;
    const double C10869 = C51056 * C146;
    const double C10865 = C51056 * C135;
    const double C10859 = C51056 * C145;
    const double C10855 = C51056 * C133;
    const double C10853 = C51056 * C144;
    const double C10849 = C51056 * C131;
    const double C11055 = C51056 * C296;
    const double C11049 = C51056 * C305;
    const double C11045 = C51056 * C292;
    const double C11239 = C51056 * C444;
    const double C11233 = C51056 * C453;
    const double C11229 = C51056 * C440;
    const double C11415 = C51056 * C594;
    const double C13905 = C51056 * C304;
    const double C13901 = C51056 * C294;
    const double C14314 = C51056 * C592;
    const double C14310 = C51056 * C602;
    const double C14469 = C51056 * C712;
    const double C14465 = C51056 * C708;
    const double C14683 = C51056 * C842;
    const double C14679 = C51056 * C834;
    const double C14677 = C51056 * C819;
    const double C14673 = C51056 * C835;
    const double C15111 = C51056 * C1095;
    const double C31212 = C51056 * C2806;
    const double C5311 =
        (((0 - (C49808 * C49809) / C49810) * ae) / C49810 - (0 * be) / C49814) /
            (2 * C49810) +
        ((C49808 * (((C50911 - (C49808 * 2 * C49815) / C49810) * ae) / C49810 -
                    C49809 / C49814) +
          C51056) *
         ae) /
            C49810 +
        (0 * ae) / C49810 - C49815 / C49812;
    const double C5330 = C5309 * C444;
    const double C5324 = C5309 * C453;
    const double C5318 = C5309 * C440;
    const double C21932 = C5309 * C835;
    const double C21926 = C5309 * C819;
    const double C22242 = C5309 * C834;
    const double C22236 = C5309 * C842;
    const double C22516 = C5309 * C1095;
    const double C5329 = C5312 * C436;
    const double C5323 = C5312 * C443;
    const double C5317 = C5312 * C434;
    const double C21931 = C5312 * C820;
    const double C21925 = C5312 * C811;
    const double C22241 = C5312 * C818;
    const double C22235 = C5312 * C833;
    const double C22515 = C5312 * C1090;
    const double C51082 = C51064 / C49810;
    const double C47250 = C44280 * C1095;
    const double C33358 = -C51080;
    const double C5350 = C5308 * C146;
    const double C5344 = C5308 * C135;
    const double C5334 = C5308 * C145;
    const double C5328 = C5308 * C133;
    const double C5326 = C5308 * C144;
    const double C5320 = C5308 * C131;
    const double C5532 = C5308 * C296;
    const double C5522 = C5308 * C305;
    const double C5516 = C5308 * C292;
    const double C5714 = C5308 * C444;
    const double C5704 = C5308 * C453;
    const double C5698 = C5308 * C440;
    const double C5884 = C5308 * C594;
    const double C21930 = C5308 * C304;
    const double C21924 = C5308 * C294;
    const double C22244 = C5308 * C592;
    const double C22238 = C5308 * C602;
    const double C22356 = C5308 * C712;
    const double C22350 = C5308 * C708;
    const double C22532 = C5308 * C842;
    const double C22526 = C5308 * C834;
    const double C22524 = C5308 * C819;
    const double C22518 = C5308 * C835;
    const double C22852 = C5308 * C1095;
    const double C173 = C155 + C156;
    const double C327 = C311 + C312;
    const double C475 = C459 + C460;
    const double C2490 = C2466 + C2467;
    const double C3185 = C3171 + C3172;
    const double C136 =
        (-2 * (C49870 * C50040 + C50342 * ce)) / C49744 -
        (C49870 * (C49870 * C50044 + C50040 + C49870 * C49987 * ce)) / C49744 -
        ((C50342 + C49987 * C49899) * ce) / C49744;
    const double C297 =
        -(C50025 * (C49870 * C50044 + C50040 + C50347 * ce)) / C49744;
    const double C445 =
        -(C49873 * (C49870 * C50044 + C50040 + C50347 * ce)) / C49744;
    const double C595 =
        -(C50044 * C50034 + C49870 * C50040 + C50342 * ce) / C49744;
    const double C822 = -(C49873 * C50025 * C50044) / C49744;
    const double C952 =
        -(C50044 * C50152 + C49870 * C50040 + C50342 * ce) / C49744;
    const double C1529 = C50911 * C821;
    const double C5518 = C5309 * C821;
    const double C7072 = C5308 * C821;
    const double C11047 = C50975 * C821;
    const double C12583 = C51056 * C821;
    const double C33564 = C50975 * C821;
    const double C966 = C50911 * C951;
    const double C5316 = C5310 * C951;
    const double C5700 = C5309 * C951;
    const double C6304 = C5308 * C951;
    const double C11231 = C50975 * C951;
    const double C11829 = C51056 * C951;
    const double C33748 = C50975 * C951;
    const double C44286 = C44280 * C951;
    const double C608 = C117 * C588;
    const double C11414 = C10843 * C588;
    const double C33931 = C33360 * C588;
    const double C2480 = C117 * C699;
    const double C14320 = C10843 * C699;
    const double C36657 = C33360 * C699;
    const double C1528 = C117 * C812;
    const double C5517 = C5312 * C812;
    const double C11046 = C10844 * C812;
    const double C12582 = C10843 * C812;
    const double C33563 = C33361 * C812;
    const double C35099 = C33360 * C812;
    const double C2646 = C117 * C817;
    const double C5881 = C5312 * C817;
    const double C11412 = C10844 * C817;
    const double C14686 = C10843 * C817;
    const double C33929 = C33361 * C817;
    const double C37905 = C33360 * C817;
    const double C965 = C117 * C945;
    const double C5315 = C5313 * C945;
    const double C5699 = C5312 * C945;
    const double C11230 = C10844 * C945;
    const double C11828 = C10843 * C945;
    const double C33747 = C33361 * C945;
    const double C34345 = C33360 * C945;
    const double C5701 = C5313 * C1168;
    const double C6301 = C5312 * C1168;
    const double C11826 = C10844 * C1168;
    const double C34343 = C33361 * C1168;
    const double C3527 = C50911 * C1091;
    const double C14675 = C50975 * C1091;
    const double C15107 = C51056 * C1091;
    const double C21928 = C5310 * C1091;
    const double C22522 = C5309 * C1091;
    const double C22846 = C5308 * C1091;
    const double C36968 = C50975 * C1091;
    const double C47244 = C44280 * C1091;
    const double C15109 = C50975 * C3654;
    const double C22520 = C5310 * C3654;
    const double C22848 = C5309 * C3654;
    const double C37292 = C50975 * C3654;
    const double C47836 = C44280 * C3654;
    const double C3526 = C117 * C1083;
    const double C14674 = C10844 * C1083;
    const double C15106 = C10843 * C1083;
    const double C21927 = C5313 * C1083;
    const double C22521 = C5312 * C1083;
    const double C36967 = C33361 * C1083;
    const double C37289 = C33360 * C1083;
    const double C15108 = C10844 * C3646;
    const double C22519 = C5313 * C3646;
    const double C22847 = C5312 * C3646;
    const double C37291 = C33361 * C3646;
    const double C6289 =
        (3 * (C49885 + C49873 * C50517 + C50515 * ae) +
         C49873 * (2 * C50517 +
                   C49873 * (C49893 + C49873 * (C49873 * C49904 + C49990 * ae) +
                             C49873 * C49990 * ae) +
                   C50518 * ae) +
         (2 * C50515 + C49873 * C50518) * ae) /
        C49810;
    const double C175 = C159 + C160;
    const double C329 = C315 + C316;
    const double C477 = C463 + C464;
    const double C2849 = C2835 + C2836;
    const double C3183 = C3165 + C3166;
    const double C174 = C157 + C158;
    const double C137 = (3 * (C49885 + C49893 * C49899) +
                         C49870 * (2 * C49895 + C49870 * C49908)) /
                        C49810;
    const double C298 = (C50025 * (2 * C49895 + C49870 * C49908)) / C49810;
    const double C446 = (C49873 * (2 * C49895 + C49870 * C49908) +
                         (2 * C50347 + C49870 * C50349) * ae) /
                        C49810;
    const double C596 = (C49885 + C49893 * C49899 + C49908 * C50034) / C49810;
    const double C704 =
        (2 * C50025 * C49908 + C50025 * (C49908 + C49931 * C50034)) / C49810;
    const double C823 =
        (C49873 * C50025 * C49908 + C50025 * C50349 * ae) / C49810;
    const double C953 =
        (C49885 + C49893 * C49899 + C49873 * (C49873 * C49908 + C50349 * ae) +
         C49873 * C50349 * ae) /
        C49810;
    const double C49923 = C49918 / C49744;
    const double C50525 = C50521 + C50522;
    const double C2481 = C50911 * C706;
    const double C14321 = C51056 * C706;
    const double C2647 = C50911 * C832;
    const double C5882 = C5309 * C832;
    const double C11413 = C50975 * C832;
    const double C14687 = C51056 * C832;
    const double C33930 = C50975 * C832;
    const double C5702 = C5310 * C1175;
    const double C6302 = C5309 * C1175;
    const double C11827 = C50975 * C1175;
    const double C34344 = C50975 * C1175;
    const double C44672 = C44280 * C1175;
    const double C2843 = C50911 * C2808;
    const double C2963 =
        (4 * (2 * C50025 * C49893 + C50025 * C50463) +
         C50025 *
             (3 * C50463 + C50025 * (2 * C50025 * C49904 +
                                     C50025 * (C49904 + C49925 * C50034)))) /
        C49810;
    const double C3148 =
        (C49873 * (2 * C50025 * C49893 + C50025 * C50463) +
         (2 * C50439 + C50025 * (C49987 + C49990 * C50034)) * ae) /
        C49810;
    const double C3155 =
        (C49873 *
             (3 * C50463 + C50025 * (2 * C50025 * C49904 +
                                     C50025 * (C49904 + C49925 * C50034))) +
         (3 * (C49987 + C49990 * C50034) +
          C50025 *
              (2 * C50025 * C49990 + C50025 * (C49990 + C49996 * C50034))) *
             ae) /
        C49810;
    const double C3350 =
        (C49885 + C49893 * C50034 + C49873 * (C49873 * C50463 + C50474 * ae) +
         C49873 * C50474 * ae) /
        C49810;
    const double C50554 = C50552 + C50549;
    const double C50581 = C49873 * C50577;
    const double C50638 = 2 * C50577;
    const double C50053 = C50000 * ce;
    const double C50353 = C49870 * C50000;
    const double C50357 = 3 * C50000;
    const double C50433 = C50025 * C50000;
    const double C50531 = C49873 * C50000;
    const double C50530 = C50000 * ae;
    const double C830 = (C49873 * (C49908 + C49931 * C50034) +
                         (C50349 + C50000 * C50034) * ae) /
                        C49810;
    const double C1173 =
        (2 * (C49873 * C49908 + C50349 * ae) +
         C49873 * (C49908 + C49873 * (C49873 * C49931 + C50000 * ae) +
                   C49873 * C50000 * ae) +
         (C50349 + C50000 * C50152) * ae) /
        C49810;
    const double C698 =
        2 * C50025 * C50349 + C50025 * (C50349 + C50000 * C50034);
    const double C816 = C49873 * (C50349 + C50000 * C50034);
    const double C1167 =
        2 * C49873 * C50349 + C49873 * (C50349 + C50000 * C50152);
    const double C50478 = C49995 + C50477;
    const double C50488 = 2 * C50486;
    const double C50540 = C49873 * C50486;
    const double C50539 = C50486 * ae;
    const double C3652 =
        (2 * (C49873 * C50506 + C50436 * ae) +
         C49873 * (C50506 + C49873 * (C49873 * C50025 * C49943 + C50486 * ae) +
                   C49873 * C50486 * ae) +
         (C50436 + C50486 * C50152) * ae) /
        C49810;
    const double C3645 =
        2 * C49873 * C50436 + C49873 * (C50436 + C50486 * C50152);
    const double C50526 = C49995 + C50524;
    const double C50565 = 2 * C50560;
    const double C50563 = C50560 * ae;
    const double C50562 = C50558 + C50559;
    const double C50015 = C49870 * C50013;
    const double C50061 = -2 * C50013;
    const double C50118 = C50013 * C50034;
    const double C50124 = C50025 * C50013;
    const double C50164 = C50013 * C50152;
    const double C50202 = ae * C50013;
    const double C50200 = C49873 * C50013;
    const double C50498 = C50025 * C50497;
    const double C50601 = 3 * C50497;
    const double C50615 = C49873 * C50497;
    const double C50614 = C50497 * ae;
    const double C3650 =
        (2 * (C49873 * C50463 + C50474 * ae) +
         C49873 *
             (C50463 +
              C49873 * (C49873 * (C49904 + C49925 * C50034) + C50497 * ae) +
              C49873 * C50497 * ae) +
         (C50474 + C50497 * C50152) * ae) /
        C49810;
    const double C3644 =
        2 * C49873 * C50474 + C49873 * (C50474 + C50497 * C50152);
    const double C50555 = C50494 + C50553;
    const double C50628 = 2 * C50623;
    const double C50626 = C50623 * ae;
    const double C50629 = C50625 + C50622;
    const double C50582 = C49873 * C50579;
    const double C50644 = 3 * C50579;
    const double C50642 = C50579 * ae;
    const double C50649 = C49873 * C50645;
    const double C50046 = C49870 * C50001;
    const double C50051 = -2 * C50001;
    const double C50090 = C50025 * C50001;
    const double C50163 = ae * C50001;
    const double C50161 = C49873 * C50001;
    const double C705 = (-2 * C50025 * C50044) / C49744 -
                        (C50025 * (C50001 * C50034 + C50044)) / C49744;
    const double C831 = -(C49873 * (C50001 * C50034 + C50044)) / C49744;
    const double C1174 = (-2 * C49873 * C50044) / C49744 -
                         (C49873 * (C50001 * C50152 + C50044)) / C49744;
    const double C2807 =
        (-3 * (C49991 * C50034 + C50040)) / C49744 +
        C50025 * ((-2 * C50092) / C49744 - (C50025 * C50116) / C49744);
    const double C3149 =
        C49873 * ((-2 * C50092) / C49744 - (C50025 * C50116) / C49744);
    const double C3351 = -(C50116 * C50152 + C49991 * C50034 + C50040) / C49744;
    const double C3649 = (-2 * C49873 * C50116) / C49744 -
                         (C49873 * (C50136 * C50152 + C50116)) / C49744;
    const double C50137 = C50135 / C49744;
    const double C50192 = C50189 / C49881;
    const double C15112 = C10844 * C3653;
    const double C22513 = C5313 * C3653;
    const double C22853 = C5312 * C3653;
    const double C37295 = C33361 * C3653;
    const double C6290 =
        (-3 * (C49991 * C50152 + C50040)) / C49744 +
        C49873 * ((-2 * C50149) / C49744 - (C49873 * C50157) / C49744);
    const double C50229 = C50225 / C49744;
    const double C50227 = C50222 / C49744;
    const double C49967 = C49870 * C49964;
    const double C2810 =
        (3 * (C49908 + C49931 * C50034) +
         C50025 * (2 * C50025 * C49931 + C50025 * (C49931 + C49964 * C50034))) /
        C49810;
    const double C50075 = C49870 * C50074;
    const double C50125 = C50074 * C50034;
    const double C50180 = C50025 * C50074;
    const double C50203 = C50074 * C50152;
    const double C50261 = C50025 * C50260;
    const double C50271 = C50260 * C50152;
    const double C50289 = C50285 + C50190;
    const double C50320 = C49873 * C50315;
    const double C3361 = C50911 * C1089;
    const double C5520 = C5310 * C1089;
    const double C7070 = C5309 * C1089;
    const double C12581 = C50975 * C1089;
    const double C14903 = C51056 * C1089;
    const double C35098 = C50975 * C1089;
    const double C44490 = C44280 * C1089;
    const double C3360 = C117 * C1082;
    const double C5519 = C5313 * C1082;
    const double C7069 = C5312 * C1082;
    const double C12580 = C10844 * C1082;
    const double C14902 = C10843 * C1082;
    const double C35097 = C33361 * C1082;
    const double C41905 = C33360 * C1082;
    const double C163 = C117 * C126;
    const double C10872 = C10843 * C126;
    const double C33389 = C33360 * C126;
    const double C319 = C117 * C289;
    const double C11062 = C10843 * C289;
    const double C33579 = C33360 * C289;
    const double C467 = C117 * C437;
    const double C5341 = C5312 * C437;
    const double C10862 = C10844 * C437;
    const double C11246 = C10843 * C437;
    const double C33379 = C33361 * C437;
    const double C33763 = C33360 * C437;
    const double C612 = C117 * C589;
    const double C11422 = C10843 * C589;
    const double C33939 = C33360 * C589;
    const double C1532 = C117 * C813;
    const double C5529 = C5312 * C813;
    const double C11052 = C10844 * C813;
    const double C12590 = C10843 * C813;
    const double C33569 = C33361 * C813;
    const double C35107 = C33360 * C813;
    const double C969 = C117 * C946;
    const double C5331 = C5313 * C946;
    const double C5711 = C5312 * C946;
    const double C11236 = C10844 * C946;
    const double C11836 = C10843 * C946;
    const double C33753 = C33361 * C946;
    const double C34353 = C33360 * C946;
    const double C2979 = C117 * C2803;
    const double C31211 = C10843 * C2803;
    const double C36791 = C33360 * C2803;
    const double C3173 = C117 * C3144;
    const double C14466 = C10844 * C3144;
    const double C22351 = C5312 * C3144;
    const double C31377 = C10843 * C3144;
    const double C36665 = C33361 * C3144;
    const double C36971 = C33360 * C3144;
    const double C3532 = C117 * C3347;
    const double C14680 = C10844 * C3347;
    const double C22239 = C5313 * C3347;
    const double C22527 = C5312 * C3347;
    const double C31685 = C10843 * C3347;
    const double C36959 = C33361 * C3347;
    const double C37297 = C33360 * C3347;
    const double C49936 = C49921 + C49934;
    const double C49949 = C49942 / C49881;
    const double C49959 = -C49956;
    const double C2961 =
        (4 * (2 * C50025 * C49913 + C50025 * C50459) +
         C50025 * (3 * C50459 +
                   C50025 * (2 * C50025 * C49943 +
                             C50025 * (C49943 + C49870 * C49958 * C50034)))) /
        C49810;
    const double C3150 =
        (C49873 * (2 * C50025 * C49913 + C50025 * C50459) +
         (2 * C50436 + C50025 * (C49995 + C50005 * C50034)) * ae) /
        C49810;
    const double C3153 =
        (C49873 * (3 * C50459 +
                   C50025 * (2 * C50025 * C49943 +
                             C50025 * (C49943 + C49870 * C49958 * C50034))) +
         (3 * (C49995 + C50005 * C50034) +
          C50025 *
              (2 * C50025 * C50005 + C50025 * (C50005 + C50064 * C50034))) *
             ae) /
        C49810;
    const double C50596 = C50592 + C50595;
    const double C50016 = C50010 + C50014;
    const double C50071 = C50065 / C49744;
    const double C50482 = C50000 + C50481;
    const double C50534 = C50000 + C50532;
    const double C50490 = C50025 * C50489;
    const double C50545 = C50486 + C50543;
    const double C50567 = C49873 * C50564;
    const double C50606 = C50602 + C50605;
    const double C50618 = C50497 + C50616;
    const double C50632 = C49873 * C50630;
    const double C50652 = C50648 + C50650;
    const double C50139 = C50138 / C49744;
    const double C50258 = C50255 / C49744;
    const double C50272 = C50270 / C49881;
    const double C6466 =
        (-3 * (C50133 * C50152 + C50092)) / C49744 +
        C49873 * ((-2 * C50187) / C49744 - (C49873 * C50195) / C49744);
    const double C50288 = C50284 / C49744;
    const double C50286 = C50281 / C49744;
    const double C50233 = C50230 / C49744;
    const double C50313 = C50307 / C49744;
    const double C50309 = C50303 / C49881;
    const double C50321 = -C50317;
    const double C328 = C313 + C314;
    const double C476 = C461 + C462;
    const double C2491 = C2468 + C2469;
    const double C3184 = C3169 + C3170;
    const double C49909 = -C49907;
    const double C2982 = C50911 * C2812;
    const double C31216 = C51056 * C2812;
    const double C15113 = C50975 * C3658;
    const double C22514 = C5310 * C3658;
    const double C22854 = C5309 * C3658;
    const double C37296 = C50975 * C3658;
    const double C47830 = C44280 * C3658;
    const double C50156 = -C50153;
    const double C2848 = C2833 + C2834;
    const double C3182 = C3163 + C3164;
    const double C3539 = C3528 + C3529;
    const double C49933 = -C49930;
    const double C50107 = -C50106;
    const double C50194 = C50191 / C49744;
    const double C50246 = C50244 / C49881;
    const double C50228 = -C50223;
    const double C49966 = -C49963;
    const double C50248 = -C50247;
    const double C50287 = C50282 / C49744;
    const double C50318 = -C50311;
    const double C51068 = C51033 / C49812;
    const double C51070 = C51037 / C49810;
    const double C2300 = -C51069;
    const double C51072 = C51044 / C49748;
    const double C51046 = C50832 / C49744;
    const double C1283 = -C51071;
    const double C51075 = C51049 / C49748;
    const double C51051 = C50856 / C49744;
    const double C1643 = -C51074;
    const double C51078 = C51058 / C49812;
    const double C51079 = C51060 / C49810;
    const double C17290 = -C51077;
    const double C121 =
        (C49763 / C49749 - (0 * de) / C49744) / C49749 - (0 * de) / C49744;
    const double C1287 = C49763 / C49749 - (0 * de) / C49744;
    const double C49765 = C49762 / C49744;
    const double C51083 = C51027 - C51066;
    const double C51067 = C51029 - C51030;
    const double C38961 =
        (C49847 / C49835 - (0 * be) / C49810) / C49835 + (0 * ae) / C49810;
    const double C44283 = C49847 / C49835 - (0 * be) / C49810;
    const double C49846 = C49843 / C49810;
    const double C21940 = C21933 + C21934;
    const double C10883 = C10856 + C10857;
    const double C10880 = C10850 + C10851;
    const double C10878 = C10846 + C10847;
    const double C13917 = C13906 + C13907;
    const double C13915 = C13902 + C13903;
    const double C14328 = C14311 + C14312;
    const double C14326 = C14307 + C14308;
    const double C14694 = C14670 + C14671;
    const double C33400 = C33373 + C33374;
    const double C33397 = C33367 + C33368;
    const double C33395 = C33363 + C33364;
    const double C36360 = C36351 + C36352;
    const double C36358 = C36347 + C36348;
    const double C36356 = C36343 + C36344;
    const double C36354 = C36339 + C36340;
    const double C36983 = C36963 + C36964;
    const double C2497 = C2489 * C278;
    const double C2817 = C2489 * C51025;
    const double C2968 = C2489 * C50753;
    const double C3977 = C2489 * C1386;
    const double C2967 = C2488 * C696;
    const double C51090 = C51054 - C51081;
    const double C10887 = C10864 + C10865;
    const double C10884 = C10858 + C10859;
    const double C10882 = C10854 + C10855;
    const double C10881 = C10852 + C10853;
    const double C10879 = C10848 + C10849;
    const double C11073 = C11054 + C11055;
    const double C11070 = C11048 + C11049;
    const double C11068 = C11044 + C11045;
    const double C11257 = C11238 + C11239;
    const double C11254 = C11232 + C11233;
    const double C11252 = C11228 + C11229;
    const double C13916 = C13904 + C13905;
    const double C13914 = C13900 + C13901;
    const double C14329 = C14313 + C14314;
    const double C14327 = C14309 + C14310;
    const double C14474 = C14468 + C14469;
    const double C14472 = C14464 + C14465;
    const double C14700 = C14682 + C14683;
    const double C14698 = C14678 + C14679;
    const double C14697 = C14676 + C14677;
    const double C14695 = C14672 + C14673;
    const double C15116 = C15110 + C15111;
    const double C5343 = C5311 * C125;
    const double C5333 = C5311 * C134;
    const double C5327 = C5311 * C124;
    const double C5325 = C5311 * C132;
    const double C5319 = C5311 * C123;
    const double C5531 = C5311 * C288;
    const double C5521 = C5311 * C295;
    const double C5515 = C5311 * C286;
    const double C5713 = C5311 * C436;
    const double C5703 = C5311 * C443;
    const double C5697 = C5311 * C434;
    const double C5883 = C5311 * C588;
    const double C6303 = C5311 * C945;
    const double C7071 = C5311 * C812;
    const double C21929 = C5311 * C293;
    const double C21923 = C5311 * C287;
    const double C22243 = C5311 * C587;
    const double C22237 = C5311 * C593;
    const double C22355 = C5311 * C707;
    const double C22349 = C5311 * C700;
    const double C22531 = C5311 * C833;
    const double C22525 = C5311 * C818;
    const double C22523 = C5311 * C811;
    const double C22517 = C5311 * C820;
    const double C22851 = C5311 * C1090;
    const double C22845 = C5311 * C1083;
    const double C5358 = C5329 + C5330;
    const double C5355 = C5323 + C5324;
    const double C5352 = C5317 + C5318;
    const double C21939 = C21931 + C21932;
    const double C21936 = C21925 + C21926;
    const double C22249 = C22241 + C22242;
    const double C22246 = C22235 + C22236;
    const double C22538 = C22515 + C22516;
    const double C51091 = C51063 - C51082;
    const double C33386 = C33358 * C146;
    const double C33382 = C33358 * C135;
    const double C33376 = C33358 * C145;
    const double C33372 = C33358 * C133;
    const double C33370 = C33358 * C144;
    const double C33366 = C33358 * C131;
    const double C33572 = C33358 * C296;
    const double C33566 = C33358 * C305;
    const double C33562 = C33358 * C292;
    const double C33756 = C33358 * C444;
    const double C33750 = C33358 * C453;
    const double C33746 = C33358 * C440;
    const double C33932 = C33358 * C594;
    const double C34346 = C33358 * C951;
    const double C35100 = C33358 * C821;
    const double C36350 = C33358 * C602;
    const double C36346 = C33358 * C592;
    const double C36342 = C33358 * C304;
    const double C36338 = C33358 * C294;
    const double C36668 = C33358 * C708;
    const double C36664 = C33358 * C712;
    const double C36658 = C33358 * C706;
    const double C36796 = C33358 * C2812;
    const double C36792 = C33358 * C2806;
    const double C36970 = C33358 * C819;
    const double C36966 = C33358 * C835;
    const double C36962 = C33358 * C834;
    const double C36958 = C33358 * C842;
    const double C37294 = C33358 * C1095;
    const double C37290 = C33358 * C1091;
    const double C37906 = C33358 * C832;
    const double C41906 = C33358 * C1089;
    const double C2818 = C327 * C49763;
    const double C2969 = C327 * C696;
    const double C3978 = C327 * C1392;
    const double C2971 = C2490 * C696;
    const double C3194 = C3185 * C696;
    const double C161 = C117 * C136;
    const double C5349 = C5311 * C136;
    const double C10868 = C10843 * C136;
    const double C33385 = C33360 * C136;
    const double C317 = C117 * C297;
    const double C5537 = C5311 * C297;
    const double C11058 = C10843 * C297;
    const double C33575 = C33360 * C297;
    const double C465 = C117 * C445;
    const double C5335 = C5312 * C445;
    const double C5719 = C5311 * C445;
    const double C10860 = C10844 * C445;
    const double C11242 = C10843 * C445;
    const double C33377 = C33361 * C445;
    const double C33759 = C33360 * C445;
    const double C610 = C117 * C595;
    const double C5889 = C5311 * C595;
    const double C11418 = C10843 * C595;
    const double C33935 = C33360 * C595;
    const double C1530 = C117 * C822;
    const double C5523 = C5312 * C822;
    const double C7077 = C5311 * C822;
    const double C11050 = C10844 * C822;
    const double C12586 = C10843 * C822;
    const double C33567 = C33361 * C822;
    const double C35103 = C33360 * C822;
    const double C967 = C117 * C952;
    const double C5321 = C5313 * C952;
    const double C5705 = C5312 * C952;
    const double C6309 = C5311 * C952;
    const double C11234 = C10844 * C952;
    const double C11832 = C10843 * C952;
    const double C33751 = C33361 * C952;
    const double C34349 = C33360 * C952;
    const double C620 = C608 + C609;
    const double C11429 = C11414 + C11415;
    const double C1540 = C1528 + C1529;
    const double C5540 = C5517 + C5518;
    const double C11069 = C11046 + C11047;
    const double C12597 = C12582 + C12583;
    const double C33586 = C33563 + C33564;
    const double C977 = C965 + C966;
    const double C5351 = C5315 + C5316;
    const double C5722 = C5699 + C5700;
    const double C11253 = C11230 + C11231;
    const double C11843 = C11828 + C11829;
    const double C33770 = C33747 + C33748;
    const double C3538 = C3526 + C3527;
    const double C14696 = C14674 + C14675;
    const double C15114 = C15106 + C15107;
    const double C21937 = C21927 + C21928;
    const double C22541 = C22521 + C22522;
    const double C36985 = C36967 + C36968;
    const double C15115 = C15108 + C15109;
    const double C22540 = C22519 + C22520;
    const double C22858 = C22847 + C22848;
    const double C37306 = C37291 + C37292;
    const double C2458 = C329 * C285;
    const double C2822 = C329 * C49763;
    const double C3982 = C329 * C1392;
    const double C8710 = C329 * C696;
    const double C2978 = C2849 * C696;
    const double C3192 = C3183 * C696;
    const double C164 = C50911 * C137;
    const double C10873 = C51056 * C137;
    const double C33390 = C33358 * C137;
    const double C320 = C50911 * C298;
    const double C11063 = C51056 * C298;
    const double C33580 = C33358 * C298;
    const double C468 = C50911 * C446;
    const double C5342 = C5309 * C446;
    const double C10863 = C50975 * C446;
    const double C11247 = C51056 * C446;
    const double C33380 = C50975 * C446;
    const double C33764 = C33358 * C446;
    const double C613 = C50911 * C596;
    const double C11423 = C51056 * C596;
    const double C33940 = C33358 * C596;
    const double C2485 = C50911 * C704;
    const double C1533 = C50911 * C823;
    const double C5530 = C5309 * C823;
    const double C11053 = C50975 * C823;
    const double C12591 = C51056 * C823;
    const double C33570 = C50975 * C823;
    const double C35108 = C33358 * C823;
    const double C970 = C50911 * C953;
    const double C5332 = C5310 * C953;
    const double C5712 = C5309 * C953;
    const double C11237 = C50975 * C953;
    const double C11837 = C51056 * C953;
    const double C33754 = C50975 * C953;
    const double C34354 = C33358 * C953;
    const double C44302 = C44280 * C953;
    const double C49926 = -C49923;
    const double C2492 = C2480 + C2481;
    const double C14331 = C14320 + C14321;
    const double C2654 = C2646 + C2647;
    const double C5892 = C5881 + C5882;
    const double C11428 = C11412 + C11413;
    const double C14702 = C14686 + C14687;
    const double C33945 = C33929 + C33930;
    const double C5723 = C5701 + C5702;
    const double C6312 = C6301 + C6302;
    const double C11842 = C11826 + C11827;
    const double C34359 = C34343 + C34344;
    const double C20278 = C50911 * C2963;
    const double C3174 = C50911 * C3148;
    const double C14467 = C50975 * C3148;
    const double C22352 = C5309 * C3148;
    const double C31378 = C51056 * C3148;
    const double C36666 = C50975 * C3148;
    const double C36972 = C33358 * C3148;
    const double C20392 = C50911 * C3155;
    const double C31214 = C50975 * C3155;
    const double C36794 = C50975 * C3155;
    const double C3533 = C50911 * C3350;
    const double C14681 = C50975 * C3350;
    const double C22240 = C5310 * C3350;
    const double C22528 = C5309 * C3350;
    const double C31686 = C51056 * C3350;
    const double C36960 = C50975 * C3350;
    const double C37298 = C33358 * C3350;
    const double C47556 = C44280 * C3350;
    const double C50583 = C49893 + C50581;
    const double C50056 = C50053 / C49744;
    const double C50354 = C50352 + C50353;
    const double C1087 =
        (C50025 * C49908 + C49873 * (C49873 * C50025 * C49931 + C50433 * ae) +
         C49873 * C50433 * ae) /
        C49810;
    const double C7063 =
        (2 * (C49873 * C50587 + C50433 * ae) +
         C49873 * (C50587 + C49873 * (C49873 * C50025 * C49964 + C50588 * ae) +
                   C49873 * C50588 * ae) +
         (C50433 + C50588 * C50152) * ae) /
        C49810;
    const double C1081 = C50025 * C50349 + C50433 * C50152;
    const double C7062 =
        2 * C49873 * C50433 + C49873 * (C50433 + C50588 * C50152);
    const double C50533 = C50529 + C50530;
    const double C2651 = C50911 * C830;
    const double C11421 = C50975 * C830;
    const double C33938 = C50975 * C830;
    const double C5710 = C5310 * C1173;
    const double C11835 = C50975 * C1173;
    const double C34352 = C50975 * C1173;
    const double C44680 = C44280 * C1173;
    const double C2484 = C117 * C698;
    const double C2650 = C117 * C816;
    const double C11420 = C10844 * C816;
    const double C33937 = C33361 * C816;
    const double C5709 = C5313 * C1167;
    const double C11834 = C10844 * C1167;
    const double C34351 = C33361 * C1167;
    const double C3352 =
        (C49895 + C49913 * C50034 + C49873 * (C49873 * C50459 + C50478 * ae) +
         C49873 * C50478 * ae) /
        C49810;
    const double C3648 =
        (2 * (C49873 * C50459 + C50478 * ae) +
         C49873 * (C50459 +
                   C49873 * (C49873 * (C49943 + C49870 * C49958 * C50034) +
                             C50489 * ae) +
                   C49873 * C50489 * ae) +
         (C50478 + C50489 * C50152) * ae) /
        C49810;
    const double C2804 = 3 * (C50347 + C49995 * C50034) +
                         C50025 * (2 * C50436 + C50025 * C50478);
    const double C3145 = C49873 * (2 * C50436 + C50025 * C50478);
    const double C3348 = C50347 + C49995 * C50034 + C50478 * C50152;
    const double C3643 =
        2 * C49873 * C50478 + C49873 * (C50478 + C50489 * C50152);
    const double C50544 = C50542 + C50539;
    const double C7068 = C5310 * C3652;
    const double C14901 = C50975 * C3652;
    const double C41904 = C50975 * C3652;
    const double C46006 = C44280 * C3652;
    const double C7067 = C5313 * C3645;
    const double C14900 = C10844 * C3645;
    const double C41903 = C33361 * C3645;
    const double C6291 =
        (3 * (C49895 + C49873 * C50525 + C50523 * ae) +
         C49873 * (2 * C50525 +
                   C49873 * (C49913 + C49873 * (C49873 * C49943 + C50005 * ae) +
                             C49873 * C50005 * ae) +
                   C50526 * ae) +
         (2 * C50523 + C49873 * C50526) * ae) /
        C49810;
    const double C6287 = 3 * (C50347 + C49995 * C50152) +
                         C49873 * (2 * C50523 + C49873 * C50526);
    const double C50566 = C49873 * C50562;
    const double C50017 = C50015 + C49997;
    const double C50068 = C50061 / C49744;
    const double C50119 = C50118 + C50001;
    const double C50126 = -2 * C50124;
    const double C50179 = ae * C50124;
    const double C50177 = C49873 * C50124;
    const double C50166 = C50164 + C50001;
    const double C50205 = C50202 / C49881;
    const double C50206 = -2 * C50200;
    const double C50204 = ae * C50200;
    const double C50499 = C50496 + C50498;
    const double C50617 = C50613 + C50614;
    const double C22530 = C5310 * C3650;
    const double C31688 = C50975 * C3650;
    const double C37300 = C50975 * C3650;
    const double C47846 = C44280 * C3650;
    const double C22529 = C5313 * C3644;
    const double C31687 = C10844 * C3644;
    const double C37299 = C33361 * C3644;
    const double C6467 =
        (3 * (C50509 + C49873 * C50554 + C50550 * ae) +
         C49873 * (2 * C50554 +
                   C49873 * (C50548 +
                             C49873 * (C49873 * C50025 * C49925 + C50551 * ae) +
                             C49873 * C50551 * ae) +
                   C50555 * ae) +
         (2 * C50550 + C49873 * C50555) * ae) /
        C49810;
    const double C6463 = 3 * (C50439 + C50494 * C50152) +
                         C49873 * (2 * C50550 + C49873 * C50555);
    const double C50631 = C49873 * C50629;
    const double C50584 = C50580 + C50582;
    const double C50651 = C49904 + C50649;
    const double C50048 = C50046 + C49991;
    const double C50054 = C50051 / C49744;
    const double C1088 = -(C50090 * C50152 + C50025 * C50044) / C49744;
    const double C3651 = (-2 * C49873 * C50090) / C49744 -
                         (C49873 * (C50124 * C50152 + C50090)) / C49744;
    const double C50165 = C50163 / C49881;
    const double C2482 = C117 * C705;
    const double C14324 = C10843 * C705;
    const double C36669 = C33360 * C705;
    const double C2648 = C117 * C831;
    const double C5887 = C5312 * C831;
    const double C11416 = C10844 * C831;
    const double C14690 = C10843 * C831;
    const double C33933 = C33361 * C831;
    const double C37909 = C33360 * C831;
    const double C5707 = C5313 * C1174;
    const double C6307 = C5312 * C1174;
    const double C11830 = C10844 * C1174;
    const double C34347 = C33361 * C1174;
    const double C2981 = C117 * C2807;
    const double C31215 = C10843 * C2807;
    const double C36795 = C33360 * C2807;
    const double C3175 = C117 * C3149;
    const double C14470 = C10844 * C3149;
    const double C22357 = C5312 * C3149;
    const double C31381 = C10843 * C3149;
    const double C36661 = C33361 * C3149;
    const double C36975 = C33360 * C3149;
    const double C3534 = C117 * C3351;
    const double C14684 = C10844 * C3351;
    const double C22233 = C5313 * C3351;
    const double C22533 = C5312 * C3351;
    const double C31689 = C10843 * C3351;
    const double C36955 = C33361 * C3351;
    const double C37301 = C33360 * C3351;
    const double C22535 = C5313 * C3649;
    const double C31691 = C10844 * C3649;
    const double C37303 = C33361 * C3649;
    const double C50231 = -C50227;
    const double C49969 = C49953 + C49967;
    const double C50076 = C50075 + C50007;
    const double C50127 = C50125 + C50013;
    const double C50183 = C50180 * C50152;
    const double C50207 = C50203 + C50013;
    const double C50262 = C50261 / C49744;
    const double C50273 = C50271 + C50136;
    const double C50292 = C49873 * C50289;
    const double C50323 = C50320 / C49744;
    const double C3368 = C3360 + C3361;
    const double C5541 = C5519 + C5520;
    const double C7080 = C7069 + C7070;
    const double C12596 = C12580 + C12581;
    const double C14909 = C14902 + C14903;
    const double C35113 = C35097 + C35098;
    const double C2989 = C2979 + C2980;
    const double C31222 = C31211 + C31212;
    const double C139 = (4 * (2 * C49895 + C49870 * C49908) +
                         C49870 * (3 * C49908 + C49870 * C49936)) /
                        C49810;
    const double C300 = (C50025 * (3 * C49908 + C49870 * C49936)) / C49810;
    const double C598 =
        (2 * C49895 + C49870 * C49908 + C49936 * C50034) / C49810;
    const double C49962 = C49959 / C49810;
    const double C3178 = C50911 * C3150;
    const double C14319 = C50975 * C3150;
    const double C36660 = C50975 * C3150;
    const double C20270 =
        (5 * (3 * C50463 + C50025 * C50596) +
         C50025 * (4 * C50596 +
                   C50025 * (3 * C50594 +
                             C50025 * (2 * C50025 * C49925 +
                                       C50025 * (C49925 + C49958 * C50034))))) /
        C49810;
    const double C50066 = C50016 * ce;
    const double C50358 = C49870 * C50016;
    const double C50430 = C50025 * C50016;
    const double C3354 =
        (C49908 + C49931 * C50034 +
         C49873 * (C49873 * (C49931 + C49964 * C50034) + C50482 * ae) +
         C49873 * C50482 * ae) /
        C49810;
    const double C4203 =
        (C49873 * (2 * C50025 * C49931 + C50025 * (C49931 + C49964 * C50034)) +
         (2 * C50433 + C50025 * C50482) * ae) /
        C49810;
    const double C2805 = 3 * (C50349 + C50000 * C50034) +
                         C50025 * (2 * C50433 + C50025 * C50482);
    const double C3349 = C50349 + C50000 * C50034 + C50482 * C50152;
    const double C4202 = C49873 * (2 * C50433 + C50025 * C50482);
    const double C6288 = 3 * (C50349 + C50000 * C50152) +
                         C49873 * (2 * C50531 + C49873 * C50534);
    const double C50491 = C50488 + C50490;
    const double C6462 = 3 * (C50436 + C50486 * C50152) +
                         C49873 * (2 * C50540 + C49873 * C50545);
    const double C50569 = C50565 + C50567;
    const double C50607 = C50025 * C50606;
    const double C22840 = 3 * (C50474 + C50497 * C50152) +
                          C49873 * (2 * C50615 + C49873 * C50618);
    const double C50634 = C50628 + C50632;
    const double C50654 = C49873 * C50652;
    const double C50140 = C50137 - C50139;
    const double C22855 = C5313 * C6466;
    const double C50290 = -C50286;
    const double C50236 = C50229 - C50233;
    const double C50324 = C50321 / C49810;
    const double C2461 = C328 * C278;
    const double C2457 = C328 * C279;
    const double C2821 = C328 * C51025;
    const double C2819 = C328 * C50758;
    const double C2970 = C328 * C50753;
    const double C3981 = C328 * C1386;
    const double C3979 = C328 * C50758;
    const double C2499 = C2491 * C278;
    const double C2825 = C2491 * C51025;
    const double C2972 = C2491 * C50753;
    const double C3985 = C2491 * C1386;
    const double C3193 = C3184 * C50753;
    const double C4208 = C3184 * C1386;
    const double C4904 = C3184 * C51025;
    const double C49910 = C49909 / C49810;
    const double C15117 = C15112 + C15113;
    const double C22537 = C22513 + C22514;
    const double C22861 = C22853 + C22854;
    const double C37308 = C37295 + C37296;
    const double C50158 = C50156 / C49810;
    const double C2854 = C2848 * C51025;
    const double C2977 = C2848 * C50753;
    const double C3993 = C2848 * C1386;
    const double C19993 = C2848 * C278;
    const double C3191 = C3182 * C50753;
    const double C4216 = C3182 * C1386;
    const double C4912 = C3182 * C51025;
    const double C3543 = C3539 * C50753;
    const double C49935 = C49933 / C49810;
    const double C50108 = C50107 / C49810;
    const double C50196 = -C50194;
    const double C50232 = C50228 / C49810;
    const double C49968 = C49966 / C49810;
    const double C50249 = C50248 / C49810;
    const double C50291 = -C50287;
    const double C50322 = C50318 / C49810;
    const double C51084 = C51032 - C51068;
    const double C51085 = C51036 - C51070;
    const double C51086 = C51042 - C51072;
    const double C51073 = C51045 - C51046;
    const double C51087 = C51047 - C51075;
    const double C51076 = C51050 - C51051;
    const double C51088 = C51052 - C51078;
    const double C51089 = C51059 - C51079;
    const double C3810 = C329 * C1287;
    const double C49767 = C50753 - C49765;
    const double C3819 = C2491 * C51083;
    const double C3813 = C328 * C51083;
    const double C3807 = C2489 * C51083;
    const double C20777 = C2848 * C51083;
    const double C106 = (C51025 - C51065) / C49749 - (C51083 * C50749) / C49744;
    const double C3809 = C328 * C51067;
    const double C107 =
        (2 * C50758 + C51083) / C49749 - (C51067 * C50749) / C49744;
    const double C108 = C51067 / C49749 - C50761 / C49753;
    const double C44301 = C44283 * C946;
    const double C44291 = C44283 * C952;
    const double C44285 = C44283 * C945;
    const double C44489 = C44283 * C1082;
    const double C44679 = C44283 * C1167;
    const double C44677 = C44283 * C1174;
    const double C44671 = C44283 * C1168;
    const double C46005 = C44283 * C3645;
    const double C47249 = C44283 * C1090;
    const double C47243 = C44283 * C1083;
    const double C47555 = C44283 * C3347;
    const double C47549 = C44283 * C3351;
    const double C47851 = C44283 * C3649;
    const double C47845 = C44283 * C3644;
    const double C47835 = C44283 * C3646;
    const double C47829 = C44283 * C3653;
    const double C48167 = C44283 * C6466;
    const double C49849 = C50911 - C49846;
    const double C44320 = C51090 * C146;
    const double C44314 = C51090 * C135;
    const double C44304 = C51090 * C145;
    const double C44298 = C51090 * C133;
    const double C44296 = C51090 * C144;
    const double C44290 = C51090 * C131;
    const double C44502 = C51090 * C296;
    const double C44492 = C51090 * C305;
    const double C44486 = C51090 * C292;
    const double C44684 = C51090 * C444;
    const double C44674 = C51090 * C453;
    const double C44668 = C51090 * C440;
    const double C44854 = C51090 * C594;
    const double C45262 = C51090 * C951;
    const double C46010 = C51090 * C821;
    const double C47246 = C51090 * C304;
    const double C47240 = C51090 * C294;
    const double C47560 = C51090 * C592;
    const double C47554 = C51090 * C602;
    const double C47672 = C51090 * C712;
    const double C47666 = C51090 * C708;
    const double C47848 = C51090 * C842;
    const double C47842 = C51090 * C834;
    const double C47840 = C51090 * C819;
    const double C47834 = C51090 * C835;
    const double C48164 = C51090 * C1095;
    const double C48158 = C51090 * C1091;
    const double C38954 =
        (C51090 * C50970) / C49810 + (C51056 - C51080) / C49835;
    const double C10894 = C10882 + C10883;
    const double C31099 = C14329 + C14328;
    const double C31100 = C14327 + C14326;
    const double C5365 = C5343 + C5344;
    const double C5360 = C5333 + C5334;
    const double C5357 = C5327 + C5328;
    const double C5356 = C5325 + C5326;
    const double C5353 = C5319 + C5320;
    const double C5547 = C5531 + C5532;
    const double C5542 = C5521 + C5522;
    const double C5539 = C5515 + C5516;
    const double C5729 = C5713 + C5714;
    const double C5724 = C5703 + C5704;
    const double C5721 = C5697 + C5698;
    const double C5893 = C5883 + C5884;
    const double C6313 = C6303 + C6304;
    const double C7081 = C7071 + C7072;
    const double C21938 = C21929 + C21930;
    const double C21935 = C21923 + C21924;
    const double C22250 = C22243 + C22244;
    const double C22247 = C22237 + C22238;
    const double C22364 = C22355 + C22356;
    const double C22361 = C22349 + C22350;
    const double C22546 = C22531 + C22532;
    const double C22543 = C22525 + C22526;
    const double C22542 = C22523 + C22524;
    const double C22539 = C22517 + C22518;
    const double C22860 = C22851 + C22852;
    const double C22857 = C22845 + C22846;
    const double C44312 = C51091 * C446;
    const double C44300 = C51091 * C444;
    const double C44294 = C51091 * C453;
    const double C44288 = C51091 * C440;
    const double C44500 = C51091 * C823;
    const double C44488 = C51091 * C821;
    const double C44682 = C51091 * C953;
    const double C44670 = C51091 * C951;
    const double C44852 = C51091 * C832;
    const double C45260 = C51091 * C1175;
    const double C46008 = C51091 * C1089;
    const double C47248 = C51091 * C835;
    const double C47242 = C51091 * C819;
    const double C47558 = C51091 * C834;
    const double C47552 = C51091 * C842;
    const double C47668 = C51091 * C3148;
    const double C47844 = C51091 * C3350;
    const double C47838 = C51091 * C1091;
    const double C47832 = C51091 * C1095;
    const double C48166 = C51091 * C3658;
    const double C48160 = C51091 * C3654;
    const double C38955 =
        (C51091 * C50970) / C49810 + (2 * C50975 + C51090) / C49835;
    const double C38956 = (C50970 * C50975) / C49814 + C51091 / C49835;
    const double C33404 = C33381 + C33382;
    const double C33401 = C33375 + C33376;
    const double C33399 = C33371 + C33372;
    const double C33398 = C33369 + C33370;
    const double C33396 = C33365 + C33366;
    const double C33590 = C33571 + C33572;
    const double C33587 = C33565 + C33566;
    const double C33585 = C33561 + C33562;
    const double C33774 = C33755 + C33756;
    const double C33771 = C33749 + C33750;
    const double C33769 = C33745 + C33746;
    const double C33946 = C33931 + C33932;
    const double C34360 = C34345 + C34346;
    const double C35114 = C35099 + C35100;
    const double C36359 = C36349 + C36350;
    const double C36357 = C36345 + C36346;
    const double C36355 = C36341 + C36342;
    const double C36353 = C36337 + C36338;
    const double C36682 = C36667 + C36668;
    const double C36680 = C36663 + C36664;
    const double C36677 = C36657 + C36658;
    const double C36802 = C36791 + C36792;
    const double C36986 = C36969 + C36970;
    const double C36984 = C36965 + C36966;
    const double C36982 = C36961 + C36962;
    const double C36980 = C36957 + C36958;
    const double C37307 = C37293 + C37294;
    const double C37305 = C37289 + C37290;
    const double C37913 = C37905 + C37906;
    const double C41912 = C41905 + C41906;
    const double C176 = C161 + C162;
    const double C5368 = C5349 + C5350;
    const double C10889 = C10868 + C10869;
    const double C33406 = C33385 + C33386;
    const double C2826 = C620 * C49763;
    const double C2973 = C620 * C696;
    const double C3986 = C620 * C1392;
    const double C3168 = C1540 * C696;
    const double C4207 = C1540 * C1392;
    const double C4903 = C1540 * C49763;
    const double C13912 = C11068 + C11069;
    const double C13908 = C11069 + C11068;
    const double C3542 = C3538 * C696;
    const double C177 = C163 + C164;
    const double C10891 = C10872 + C10873;
    const double C33408 = C33389 + C33390;
    const double C331 = C319 + C320;
    const double C11077 = C11062 + C11063;
    const double C33594 = C33579 + C33580;
    const double C479 = C467 + C468;
    const double C5364 = C5341 + C5342;
    const double C10886 = C10862 + C10863;
    const double C11261 = C11246 + C11247;
    const double C33403 = C33379 + C33380;
    const double C33778 = C33763 + C33764;
    const double C622 = C612 + C613;
    const double C11433 = C11422 + C11423;
    const double C33950 = C33939 + C33940;
    const double C1542 = C1532 + C1533;
    const double C5546 = C5529 + C5530;
    const double C11072 = C11052 + C11053;
    const double C12601 = C12590 + C12591;
    const double C33589 = C33569 + C33570;
    const double C35118 = C35107 + C35108;
    const double C979 = C969 + C970;
    const double C5359 = C5331 + C5332;
    const double C5728 = C5711 + C5712;
    const double C11256 = C11236 + C11237;
    const double C11847 = C11836 + C11837;
    const double C33773 = C33753 + C33754;
    const double C34364 = C34353 + C34354;
    const double C49929 = C49926 / C49810;
    const double C2832 = C2492 * C49763;
    const double C2976 = C2492 * C696;
    const double C3992 = C2492 * C1392;
    const double C3162 = C2654 * C696;
    const double C4215 = C2654 * C1392;
    const double C4911 = C2654 * C49763;
    const double C14317 = C11428 + C11429;
    const double C14306 = C11429 + C11428;
    const double C3186 = C3173 + C3174;
    const double C14473 = C14466 + C14467;
    const double C22362 = C22351 + C22352;
    const double C31387 = C31377 + C31378;
    const double C36681 = C36665 + C36666;
    const double C36987 = C36971 + C36972;
    const double C3540 = C3532 + C3533;
    const double C14699 = C14680 + C14681;
    const double C22248 = C22239 + C22240;
    const double C22544 = C22527 + C22528;
    const double C31693 = C31685 + C31686;
    const double C36981 = C36959 + C36960;
    const double C37309 = C37297 + C37298;
    const double C50585 = C50583 + C50578;
    const double C448 = (C49873 * (3 * C49908 + C49870 * C49936) +
                         (3 * C50349 + C49870 * C50354) * ae) /
                        C49810;
    const double C825 =
        (C49873 * C50025 * C49936 + C50025 * C50354 * ae) / C49810;
    const double C955 =
        (2 * C49895 + C49870 * C49908 +
         C49873 * (C49873 * C49936 + C50354 * ae) + C49873 * C50354 * ae) /
        C49810;
    const double C127 = 4 * (2 * C50347 + C49870 * C50349) +
                        C49870 * (3 * C50349 + C49870 * C50354);
    const double C290 = C50025 * (3 * C50349 + C49870 * C50354);
    const double C438 = C49873 * (3 * C50349 + C49870 * C50354);
    const double C590 = 2 * C50347 + C49870 * C50349 + C50354 * C50034;
    const double C697 =
        2 * C50025 * C50354 + C50025 * (C50354 + C50016 * C50034);
    const double C814 = C49873 * C50025 * C50354;
    const double C815 = C49873 * (C50354 + C50016 * C50034);
    const double C947 = 2 * C50347 + C49870 * C50349 + C50354 * C50152;
    const double C1166 =
        2 * C49873 * C50354 + C49873 * (C50354 + C50016 * C50152);
    const double C5528 = C5310 * C1087;
    const double C9013 = C50911 * C1087;
    const double C12589 = C50975 * C1087;
    const double C35106 = C50975 * C1087;
    const double C44498 = C44280 * C1087;
    const double C5527 = C5313 * C1081;
    const double C9012 = C117 * C1081;
    const double C12588 = C10844 * C1081;
    const double C35105 = C33361 * C1081;
    const double C44497 = C44283 * C1081;
    const double C6293 =
        (3 * (C49908 + C49873 * C50533 + C50531 * ae) +
         C49873 * (2 * C50533 +
                   C49873 * (C49931 + C49873 * (C49873 * C49964 + C50012 * ae) +
                             C49873 * C50012 * ae) +
                   C50534 * ae) +
         (2 * C50531 + C49873 * C50534) * ae) /
        C49810;
    const double C2494 = C2484 + C2485;
    const double C2656 = C2650 + C2651;
    const double C11432 = C11420 + C11421;
    const double C33949 = C33937 + C33938;
    const double C5727 = C5709 + C5710;
    const double C11846 = C11834 + C11835;
    const double C34363 = C34351 + C34352;
    const double C3365 = C50911 * C3352;
    const double C5880 = C5310 * C3352;
    const double C14689 = C50975 * C3352;
    const double C37908 = C50975 * C3352;
    const double C44850 = C44280 * C3352;
    const double C2842 = C117 * C2804;
    const double C3177 = C117 * C3145;
    const double C14318 = C10844 * C3145;
    const double C36659 = C33361 * C3145;
    const double C3364 = C117 * C3348;
    const double C5879 = C5313 * C3348;
    const double C14688 = C10844 * C3348;
    const double C37907 = C33361 * C3348;
    const double C44849 = C44283 * C3348;
    const double C6465 =
        (3 * (C50506 + C49873 * C50544 + C50540 * ae) +
         C49873 * (2 * C50544 +
                   C49873 * (C50538 +
                             C49873 * (C49873 * C50025 * C49870 * C49958 +
                                       C50541 * ae) +
                             C49873 * C50541 * ae) +
                   C50545 * ae) +
         (2 * C50540 + C49873 * C50545) * ae) /
        C49810;
    const double C7079 = C7067 + C7068;
    const double C14908 = C14900 + C14901;
    const double C41911 = C41903 + C41904;
    const double C6300 = C5310 * C6291;
    const double C45258 = C44280 * C6291;
    const double C6299 = C5313 * C6287;
    const double C45257 = C44283 * C6287;
    const double C50568 = C49913 + C50566;
    const double C50018 = C50017 + C50008;
    const double C2809 =
        (-3 * (C50001 * C50034 + C50044)) / C49744 +
        C50025 * ((-2 * C50090) / C49744 - (C50025 * C50119) / C49744);
    const double C3151 =
        C49873 * ((-2 * C50090) / C49744 - (C50025 * C50119) / C49744);
    const double C3353 = -(C50119 * C50152 + C50001 * C50034 + C50044) / C49744;
    const double C50128 = C50126 / C49744;
    const double C50182 = C50179 / C49881;
    const double C6292 =
        (-3 * (C50001 * C50152 + C50044)) / C49744 +
        C49873 * ((-2 * C50161) / C49744 - (C49873 * C50166) / C49744);
    const double C50210 = C50206 / C49744;
    const double C50208 = C50204 / C49881;
    const double C3522 =
        (2 * C50025 * C49893 + C50025 * C50463 +
         C49873 * (C49873 * (2 * C50025 * C49904 +
                             C50025 * (C49904 + C49925 * C50034)) +
                   C50499 * ae) +
         C49873 * C50499 * ae) /
        C49810;
    const double C20386 =
        (C49873 * (4 * C50596 +
                   C50025 * (3 * C50594 +
                             C50025 * (2 * C50025 * C49925 +
                                       C50025 * (C49925 + C49958 * C50034)))) +
         (4 * C50499 +
          C50025 *
              (3 * C50497 +
               C50025 * (2 * C50551 + C50025 * (C49996 + C50006 * C50034)))) *
             ae) /
        C49810;
    const double C20675 =
        (2 * (C49873 * C50596 + C50499 * ae) +
         C49873 * (C50596 +
                   C49873 * (C49873 * (2 * C50025 * C49925 +
                                       C50025 * (C49925 + C49958 * C50034)) +
                             C50606 * ae) +
                   C49873 * C50606 * ae) +
         (C50499 + C50606 * C50152) * ae) /
        C49810;
    const double C2959 = 4 * (2 * C50439 + C50025 * C50474) +
                         C50025 * (3 * C50474 + C50025 * C50499);
    const double C3147 = C49873 * (3 * C50474 + C50025 * C50499);
    const double C3518 = 2 * C50439 + C50025 * C50474 + C50499 * C50152;
    const double C20673 =
        2 * C49873 * C50499 + C49873 * (C50499 + C50606 * C50152);
    const double C22842 =
        (3 * (C50463 + C49873 * C50617 + C50615 * ae) +
         C49873 * (2 * C50617 +
                   C49873 * (C50594 +
                             C49873 * (C49873 * (C49925 + C49958 * C50034) +
                                       C50604 * ae) +
                             C49873 * C50604 * ae) +
                   C50618 * ae) +
         (2 * C50615 + C49873 * C50618) * ae) /
        C49810;
    const double C22545 = C22529 + C22530;
    const double C31694 = C31687 + C31688;
    const double C37310 = C37299 + C37300;
    const double C22850 = C5310 * C6467;
    const double C48162 = C44280 * C6467;
    const double C22849 = C5313 * C6463;
    const double C48161 = C44283 * C6463;
    const double C50633 = C50548 + C50631;
    const double C6569 = 4 * (2 * C50515 + C49873 * C50518) +
                         C49873 * (3 * C50518 + C49873 * C50584);
    const double C50653 = C50651 + C50646;
    const double C50049 = C50048 + C50047;
    const double C3362 = C117 * C1088;
    const double C5525 = C5313 * C1088;
    const double C7075 = C5312 * C1088;
    const double C12584 = C10844 * C1088;
    const double C14906 = C10843 * C1088;
    const double C35101 = C33361 * C1088;
    const double C41909 = C33360 * C1088;
    const double C44495 = C44283 * C1088;
    const double C7073 = C5313 * C3651;
    const double C14904 = C10844 * C3651;
    const double C41907 = C33361 * C3651;
    const double C46011 = C44283 * C3651;
    const double C2990 = C2981 + C2982;
    const double C31224 = C31215 + C31216;
    const double C36804 = C36795 + C36796;
    const double C50234 = C50231 / C49810;
    const double C49971 = C49870 * C49969;
    const double C702 =
        (2 * C50025 * C49936 + C50025 * (C49936 + C49969 * C50034)) / C49810;
    const double C828 = (C49873 * (C49936 + C49969 * C50034) +
                         (C50354 + C50016 * C50034) * ae) /
                        C49810;
    const double C1171 =
        (2 * (C49873 * C49936 + C50354 * ae) +
         C49873 * (C49936 + C49873 * (C49873 * C49969 + C50016 * ae) +
                   C49873 * C50016 * ae) +
         (C50354 + C50016 * C50152) * ae) /
        C49810;
    const double C50077 = C50076 + C50070;
    const double C50129 = C50025 * C50127;
    const double C3647 = (-2 * C49873 * C50119) / C49744 -
                         (C49873 * (C50127 * C50152 + C50119)) / C49744;
    const double C50185 = C50183 + C50124;
    const double C50211 = C49873 * C50207;
    const double C50263 = C50259 - C50262;
    const double C22841 =
        (-3 * (C50136 * C50152 + C50116)) / C49744 +
        C49873 * ((-2 * C50268) / C49744 - (C49873 * C50273) / C49744);
    const double C50295 = C50292 / C49744;
    const double C50326 = C50319 - C50323;
    const double C3530 = C3368 * C696;
    const double C15897 = C12596 + C12597;
    const double C15894 = C12597 + C12596;
    const double C2995 = C2989 * C696;
    const double C168 = C50911 * C139;
    const double C324 = C50911 * C300;
    const double C617 = C50911 * C598;
    const double C49965 = C49962 - C49944;
    const double C50072 = C50066 / C49744;
    const double C50359 = C50357 + C50358;
    const double C1085 =
        (C50025 * C49936 + C49873 * (C49873 * C50025 * C49969 + C50430 * ae) +
         C49873 * C50430 * ae) /
        C49810;
    const double C1080 = C50025 * C50354 + C50430 * C50152;
    const double C3520 =
        (2 * C50025 * C49913 + C50025 * C50459 +
         C49873 * (C49873 * (2 * C50025 * C49943 +
                             C50025 * (C49943 + C49870 * C49958 * C50034)) +
                   C50491 * ae) +
         C49873 * C50491 * ae) /
        C49810;
    const double C2958 = 4 * (2 * C50436 + C50025 * C50478) +
                         C50025 * (3 * C50478 + C50025 * C50491);
    const double C3146 = C49873 * (3 * C50478 + C50025 * C50491);
    const double C3517 = 2 * C50436 + C50025 * C50478 + C50491 * C50152;
    const double C6568 = 4 * (2 * C50523 + C49873 * C50526) +
                         C49873 * (3 * C50526 + C49873 * C50569);
    const double C50608 = C50601 + C50607;
    const double C22960 = 4 * (2 * C50550 + C49873 * C50555) +
                          C49873 * (3 * C50555 + C49873 * C50634);
    const double C50656 = C50644 + C50654;
    const double C2962 =
        4 * ((-2 * C50092) / C49744 - (C50025 * C50116) / C49744) +
        C50025 * ((-3 * C50116) / C49744 + C50025 * C50140);
    const double C3154 = C49873 * ((-3 * C50116) / C49744 + C50025 * C50140);
    const double C3521 =
        (-2 * C50092) / C49744 - (C50025 * C50116) / C49744 + C50140 * C50152;
    const double C50293 = C50290 / C49810;
    const double C6572 =
        4 * ((-2 * C50149) / C49744 - (C49873 * C50157) / C49744) +
        C49873 * ((-3 * C50157) / C49744 + C49873 * C50236);
    const double C50327 = C50324 - C49944;
    const double C2985 = C2971 + C2972;
    const double C49911 = C49910 - C49901;
    const double C50159 = C50158 - C50154;
    const double C2988 = C2977 + C2978;
    const double C20274 = C2978 + C2977;
    const double C3199 = C3191 + C3192;
    const double C49937 = C49935 - C49920;
    const double C50109 = C50108 - C49914;
    const double C50197 = C50196 / C49810;
    const double C50235 = C50232 - C50224;
    const double C49970 = C49968 - C49952;
    const double C50250 = C50249 - C49944;
    const double C50294 = C50291 / C49810;
    const double C50325 = C50322 - C50312;
    const double C110 = (C51084 * C50768) / C49810 + (C51034 - C51069) / C49835;
    const double C111 =
        (C51085 * C50768) / C49810 + (2 * C50778 + C51084) / C49835;
    const double C112 = (C50768 * C50778) / C49814 + C51085 / C49835;
    const double C692 = (C51040 - C51071) / C49749 - (C51086 * C50825) / C49744;
    const double C693 =
        (2 * C50829 + C51086) / C49749 - (C51073 * C50825) / C49744;
    const double C694 = C51073 / C49749 - C50832 / C49753;
    const double C1162 =
        (C51041 - C51074) / C49749 - (C51087 * C50849) / C49744;
    const double C1163 =
        (2 * C50853 + C51087) / C49749 - (C51076 * C50849) / C49744;
    const double C1164 = C51076 / C49749 - C50856 / C49753;
    const double C19889 =
        (C51088 * C50944) / C49810 + (C51055 - C51077) / C49835;
    const double C19890 =
        (C51089 * C50944) / C49810 + (2 * C50949 + C51088) / C49835;
    const double C19891 = (C50944 * C50949) / C49814 + C51089 / C49835;
    const double C49768 = C49767 * ce;
    const double C283 =
        ((-C49743 / C49744) / C49749 - (C49756 * de) / C49744) / C49749 -
        ((C49742 * ((-C49745 / C49744) / C49749 - (C49767 * de) / C49744) +
          C1386) *
         de) /
            C49744 +
        (-C49758 / C49744) / C49749 - (0 * de) / C49744;
    const double C284 =
        ((-C49745 / C49744) / C49749 - (C49767 * de) / C49744) / C49749 -
        ((C49742 * ((-C49758 / C49744) / C49749 - (0 * de) / C49744) + C50758) *
         de) /
            C49744;
    const double C1391 = (-C49745 / C49744) / C49749 - (C49767 * de) / C49744;
    const double C44329 = C44301 + C44302;
    const double C44321 = C44285 + C44286;
    const double C44511 = C44489 + C44490;
    const double C44697 = C44679 + C44680;
    const double C44693 = C44671 + C44672;
    const double C46017 = C46005 + C46006;
    const double C47256 = C47249 + C47250;
    const double C47253 = C47243 + C47244;
    const double C47564 = C47555 + C47556;
    const double C47861 = C47845 + C47846;
    const double C47856 = C47835 + C47836;
    const double C47853 = C47829 + C47830;
    const double C49851 = C49849 * ae;
    const double C31207 = C31099 * C696;
    const double C31104 = C31100 * C51025;
    const double C31208 = C31100 * C50753;
    const double C32088 = C31100 * C1386;
    const double C33411 = C33399 + C33400;
    const double C40993 = C33585 + C33586;
    const double C40989 = C33586 + C33585;
    const double C36655 = C33945 + C33946;
    const double C41383 = C33946 + C33945;
    const double C42888 = C35113 + C35114;
    const double C42885 = C35114 + C35113;
    const double C36654 = C36359 + C36360;
    const double C36653 = C36357 + C36358;
    const double C2464 = C331 * C285;
    const double C3816 = C331 * C1287;
    const double C8606 = C331 * C49763;
    const double C9564 = C331 * C1392;
    const double C10896 = C10886 + C10887;
    const double C33413 = C33403 + C33404;
    const double C2472 = C622 * C285;
    const double C2830 = C622 * C49763;
    const double C3822 = C622 * C1287;
    const double C3990 = C622 * C1392;
    const double C8713 = C622 * C696;
    const double C4211 = C1542 * C1392;
    const double C4907 = C1542 * C49763;
    const double C8863 = C1542 * C696;
    const double C11080 = C11072 + C11073;
    const double C13910 = C11073 + C11072;
    const double C33597 = C33589 + C33590;
    const double C40991 = C33590 + C33589;
    const double C11264 = C11256 + C11257;
    const double C33781 = C33773 + C33774;
    const double C49932 = C49929 - C49914;
    const double C31101 = C14317 * C49763;
    const double C32089 = C14317 * C1392;
    const double C3195 = C3186 * C696;
    const double C31210 = C14473 + C14472;
    const double C36790 = C36681 + C36682;
    const double C3544 = C3540 * C696;
    const double C31376 = C14699 + C14698;
    const double C36992 = C36981 + C36982;
    const double C6573 =
        (4 * (2 * C50517 + C49873 * C50585 + C50518 * ae) +
         C49873 *
             (3 * C50585 +
              C49873 *
                  (2 * C50577 +
                   C49873 * (C49904 + C49873 * (C49873 * C49925 + C49996 * ae) +
                             C49873 * C49996 * ae) +
                   C50579 * ae) +
              C50584 * ae) +
         (3 * C50518 + C49873 * C50584) * ae) /
        C49810;
    const double C472 = C50911 * C448;
    const double C10871 = C50975 * C448;
    const double C33388 = C50975 * C448;
    const double C1537 = C50911 * C825;
    const double C11061 = C50975 * C825;
    const double C33578 = C50975 * C825;
    const double C974 = C50911 * C955;
    const double C5340 = C5310 * C955;
    const double C11245 = C50975 * C955;
    const double C33762 = C50975 * C955;
    const double C44310 = C44280 * C955;
    const double C167 = C117 * C127;
    const double C323 = C117 * C290;
    const double C471 = C117 * C438;
    const double C10870 = C10844 * C438;
    const double C33387 = C33361 * C438;
    const double C616 = C117 * C590;
    const double C1536 = C117 * C814;
    const double C11060 = C10844 * C814;
    const double C33577 = C33361 * C814;
    const double C973 = C117 * C947;
    const double C5339 = C5313 * C947;
    const double C11244 = C10844 * C947;
    const double C33761 = C33361 * C947;
    const double C44309 = C44283 * C947;
    const double C5545 = C5527 + C5528;
    const double C9016 = C9012 + C9013;
    const double C12600 = C12588 + C12589;
    const double C35117 = C35105 + C35106;
    const double C44515 = C44497 + C44498;
    const double C2838 = C2494 * C49763;
    const double C3996 = C2494 * C1392;
    const double C8714 = C2494 * C696;
    const double C19996 = C2494 * C285;
    const double C20780 = C2494 * C1287;
    const double C4219 = C2656 * C1392;
    const double C4915 = C2656 * C49763;
    const double C8864 = C2656 * C696;
    const double C2850 = C2842 + C2843;
    const double C3188 = C3177 + C3178;
    const double C14330 = C14318 + C14319;
    const double C36678 = C36659 + C36660;
    const double C3370 = C3364 + C3365;
    const double C5891 = C5879 + C5880;
    const double C14703 = C14688 + C14689;
    const double C37914 = C37907 + C37908;
    const double C44861 = C44849 + C44850;
    const double C6311 = C6299 + C6300;
    const double C45269 = C45257 + C45258;
    const double C50570 = C50568 + C50563;
    const double C50052 = C49870 * C50018;
    const double C50060 = -3 * C50018;
    const double C50088 = C50025 * C50018;
    const double C50171 = ae * C50018;
    const double C50169 = C49873 * C50018;
    const double C2844 = C117 * C2809;
    const double C3179 = C117 * C3151;
    const double C14322 = C10844 * C3151;
    const double C36671 = C33361 * C3151;
    const double C3366 = C117 * C3353;
    const double C5885 = C5313 * C3353;
    const double C14692 = C10844 * C3353;
    const double C37911 = C33361 * C3353;
    const double C44855 = C44283 * C3353;
    const double C6305 = C5313 * C6292;
    const double C45263 = C44283 * C6292;
    const double C20601 = C50911 * C3522;
    const double C22354 = C5310 * C3522;
    const double C31380 = C50975 * C3522;
    const double C36974 = C50975 * C3522;
    const double C47670 = C44280 * C3522;
    const double C20277 = C117 * C2959;
    const double C20391 = C117 * C3147;
    const double C31213 = C10844 * C3147;
    const double C36793 = C33361 * C3147;
    const double C20600 = C117 * C3518;
    const double C22353 = C5313 * C3518;
    const double C31379 = C10844 * C3518;
    const double C36973 = C33361 * C3518;
    const double C47669 = C44283 * C3518;
    const double C22859 = C22849 + C22850;
    const double C48171 = C48161 + C48162;
    const double C50635 = C50633 + C50626;
    const double C50655 = C49873 * C50653;
    const double C138 =
        (-3 * (C49870 * C50044 + C50040 + C50347 * ce)) / C49744 +
        C49870 * ((-2 * C50044) / C49744 - (C49870 * C50049) / C49744 -
                  (C50349 * ce) / C49744) -
        ((2 * C50347 + C49870 * C50349) * ce) / C49744;
    const double C299 =
        C50025 * ((-2 * C50044) / C49744 - (C49870 * C50049) / C49744 -
                  (C50349 * ce) / C49744);
    const double C447 =
        C49873 * ((-2 * C50044) / C49744 - (C49870 * C50049) / C49744 -
                  (C50349 * ce) / C49744);
    const double C597 =
        -(C50049 * C50034 + C49870 * C50044 + C50040 + C50347 * ce) / C49744;
    const double C703 = (-2 * C50025 * C50049) / C49744 -
                        (C50025 * (C50018 * C50034 + C50049)) / C49744;
    const double C824 = -(C49873 * C50025 * C50049) / C49744;
    const double C829 = -(C49873 * (C50018 * C50034 + C50049)) / C49744;
    const double C954 =
        -(C50049 * C50152 + C49870 * C50044 + C50040 + C50347 * ce) / C49744;
    const double C1172 = (-2 * C49873 * C50049) / C49744 -
                         (C49873 * (C50018 * C50152 + C50049)) / C49744;
    const double C2996 = C2990 * C50753;
    const double C20197 = C2990 * C51025;
    const double C20883 = C2990 * C1386;
    const double C50237 = C50234 - C49914;
    const double C49973 = C49948 + C49971;
    const double C50078 = C49870 * C50077;
    const double C50121 = C50077 * C50034;
    const double C50172 = C50077 * C50152;
    const double C50242 = C50025 * C50077;
    const double C50130 = C50129 / C49744;
    const double C6464 =
        (-3 * (C50124 * C50152 + C50090)) / C49744 +
        C49873 * ((-2 * C50177) / C49744 - (C49873 * C50185) / C49744);
    const double C50214 = C50211 / C49744;
    const double C50264 = C50025 * C50263;
    const double C20674 =
        2 * C49873 * C50140 + C49873 * (C50140 + C50263 * C50152);
    const double C50298 = C50288 - C50295;
    const double C50329 = C49873 * C50326;
    const double C128 = 5 * (3 * C50349 + C49870 * C50354) +
                        C49870 * (4 * C50354 + C49870 * C50359);
    const double C291 = C50025 * (4 * C50354 + C49870 * C50359);
    const double C439 = C49873 * (4 * C50354 + C49870 * C50359);
    const double C591 = 3 * C50349 + C49870 * C50354 + C50359 * C50034;
    const double C948 = 3 * C50349 + C49870 * C50354 + C50359 * C50152;
    const double C1523 = C49873 * C50025 * C50359;
    const double C20597 =
        (3 * C50463 + C50025 * C50596 +
         C49873 * (C49873 * (3 * C50594 +
                             C50025 * (2 * C50025 * C49925 +
                                       C50025 * (C49925 + C49958 * C50034))) +
                   C50608 * ae) +
         C49873 * C50608 * ae) /
        C49810;
    const double C20268 = 5 * (3 * C50474 + C50025 * C50499) +
                          C50025 * (4 * C50499 + C50025 * C50608);
    const double C20384 = C49873 * (4 * C50499 + C50025 * C50608);
    const double C20595 = 3 * C50474 + C50025 * C50499 + C50608 * C50152;
    const double C39682 = 5 * (3 * C50518 + C49873 * C50584) +
                          C49873 * (4 * C50584 + C49873 * C50656);
    const double C20279 = C117 * C2962;
    const double C20393 = C117 * C3154;
    const double C31217 = C10844 * C3154;
    const double C36797 = C33361 * C3154;
    const double C20602 = C117 * C3521;
    const double C22359 = C5313 * C3521;
    const double C31383 = C10844 * C3521;
    const double C36977 = C33361 * C3521;
    const double C47675 = C44283 * C3521;
    const double C50296 = C50293 - C50277;
    const double C2991 = C2985 * C2300;
    const double C20273 = C2985 * C50773;
    const double C25065 = C2985 * C51034;
    const double C147 =
        3 * ((-(C49895 * ce) / C49744) / C49810 - C49892 / C49881 +
             C49870 * C49911) -
        ((2 * C49895 + C49870 * C49908) * ce) / C49881 +
        C49870 *
            (2 * C49911 - (C49908 * ce) / C49881 +
             C49870 *
                 ((-(C49870 * C49904 * ce) / C49744) / C49810 -
                  C49903 / C49881 +
                  C49870 * ((-(C49870 * std::pow(C49875, 6) * bs[6] * C49886) /
                             C49744) /
                                C49810 -
                            (C49904 * ce) / C49881)));
    const double C306 = (yP - yQ) * ((-(C49895 * ce) / C49744) / C49810 -
                                     C49892 / C49881 + C49870 * C49911);
    const double C454 =
        C49873 * ((-(C49895 * ce) / C49744) / C49810 - C49892 / C49881 +
                  C49870 * C49911) -
        (ae * (C49870 * (C49870 * C49888 * C49889 * C49986 + C49987 * ce) +
               C49882 * C49878 * C49986 + C49870 * C49987 * ce)) /
            C49881;
    const double C603 = (-(C49870 * C49892) / C49744) / C49810 -
                        (C49885 * ce) / C49881 + C49911 * std::pow(yP - yQ, 2);
    const double C836 =
        C49873 * C50025 * C49911 -
        (ae * C50025 * (C49870 * C49991 + C49987 * ce)) / C49881;
    const double C960 = (-(C49870 * C49892) / C49744) / C49810 -
                        (C49885 * ce) / C49881 -
                        (ae * C49873 * C50044) / C49881 +
                        C49873 * (C49873 * C49911 - (ae * C50044) / C49881);
    const double C6295 =
        3 * ((-(ae * C50149) / C49744) / C49810 - C49892 / C49881 +
             C49873 * C50159) +
        (((-2 * C50149) / C49744 - (C49873 * C50157) / C49744) * ae) / C49810 +
        C49873 *
            (2 * C50159 - (ae * C50157) / C49881 +
             C49873 * ((-(ae * C49873 * C49997) / C49744) / C49810 - C49914 +
                       C49873 * ((-(C49873 * C49924) / C49744) / C49810 -
                                 (ae * C49997) / C49881)));
    const double C2994 = C2988 * C2300;
    const double C20276 = C2988 * C50773;
    const double C25068 = C2988 * C51034;
    const double C20281 = C20274 * C50773;
    const double C3200 = C3199 * C2300;
    const double C20390 = C3199 * C50773;
    const double C25218 = C3199 * C51034;
    const double C49938 = C49870 * C49937;
    const double C49941 = 2 * C49937;
    const double C50144 = C50025 * C49937;
    const double C50162 = C49873 * C49937;
    const double C50212 = C49937 - C50208;
    const double C711 =
        2 * C50025 * C49911 + C50025 * (C49911 + C49937 * std::pow(C50025, 2));
    const double C841 =
        C49873 * (C49911 + C49937 * C50034) -
        (ae * (C50001 * C50034 + C49870 * C49991 + C49987 * ce)) / C49881;
    const double C1094 =
        C50025 * C49911 - (ae * C49873 * C50090) / C49881 +
        C49873 * (C49873 * C50025 * C49937 - (ae * C50090) / C49881);
    const double C1180 =
        2 * (C49873 * C49911 - (ae * C50044) / C49881) -
        (ae * (C50001 * std::pow(C49873, 2) + C50044)) / C49881 +
        C49873 * (C49911 - (ae * C49873 * C50001) / C49881 +
                  C49873 * (C49873 * C49937 - (ae * C50001) / C49881));
    const double C2965 =
        4 * ((-2 * C50025 * C49903) / C49881 + C50025 * C50109) +
        C50025 * (3 * C50109 +
                  C50025 * ((-2 * C50025 * C49924) / C49881 +
                            C50025 * ((-(C49957 * C50034) / C49744) / C49810 -
                                      C49944)));
    const double C3156 =
        (((-2 * C50092) / C49744 -
          (C50025 * (C49997 * C50034 + C49991)) / C49744) *
         ae) /
            C49810 +
        C49873 * ((-2 * C50025 * C49903) / C49881 + C50025 * C50109);
    const double C3159 =
        (((-3 * (C49997 * C50034 + C49991)) / C49744 +
          C50025 * ((-2 * C50025 * C49997) / C49744 -
                    (C50025 * (C50007 * C50034 + C49997)) / C49744)) *
         ae) /
            C49810 +
        C49873 * (3 * C50109 +
                  C50025 * ((-2 * C50025 * C49924) / C49881 +
                            C50025 * ((-(C49957 * C50034) / C49744) / C49810 -
                                      C49944)));
    const double C3356 = (-(C49903 * C50034) / C49744) / C49810 -
                         C49892 / C49881 - (ae * C49873 * C50116) / C49881 +
                         C49873 * (C49873 * C50109 - (ae * C50116) / C49881);
    const double C3524 =
        (-2 * C50025 * C49903) / C49881 + C50025 * C50109 +
        (C49873 * C50140 * ae) / C49810 +
        C49873 * ((C50140 * ae) / C49810 +
                  C49873 * ((-2 * C50025 * C49924) / C49881 +
                            C50025 * ((-(C49957 * C50034) / C49744) / C49810 -
                                      C49944)));
    const double C3656 =
        2 * (C49873 * C50109 - (ae * C50116) / C49881) -
        (ae * (C50136 * std::pow(C49873, 2) + C50116)) / C49881 +
        C49873 * (C50109 - (ae * C49873 * C50136) / C49881 +
                  C49873 * (C49873 * ((-(C49957 * C50034) / C49744) / C49810 -
                                      C49944) -
                            (ae * C50136) / C49881));
    const double C50198 = C50197 - C50192;
    const double C50238 = C49873 * C50235;
    const double C50302 = 2 * C50235;
    const double C49972 = C49870 * C49970;
    const double C50102 = C49970 * C50034;
    const double C50178 = C50025 * C49970;
    const double C50201 = C49873 * C49970;
    const double C2813 =
        3 * (C49911 + C49937 * C50034) +
        C50025 * (2 * C50025 * C49937 + C50025 * (C49937 + C49970 * C50034));
    const double C50251 = C50025 * C50250;
    const double C50269 = C49873 * C50250;
    const double C50297 = C50294 - C50283;
    const double C50328 = C49873 * C50325;
    const double C49769 = C49768 / C49744;
    const double C2474 = C620 * C283;
    const double C2460 = C327 * C283;
    const double C2498 = C2490 * C283;
    const double C2496 = C2488 * C283;
    const double C8306 = C329 * C283;
    const double C19992 = C2849 * C283;
    const double C2476 = C622 * C284;
    const double C2470 = C620 * C284;
    const double C2462 = C329 * C284;
    const double C2456 = C327 * C284;
    const double C8308 = C331 * C284;
    const double C19994 = C2492 * C284;
    const double C3998 = C2492 * C1391;
    const double C3994 = C2849 * C1391;
    const double C3988 = C620 * C1391;
    const double C3984 = C2490 * C1391;
    const double C3980 = C327 * C1391;
    const double C3976 = C2488 * C1391;
    const double C4221 = C2654 * C1391;
    const double C4217 = C3183 * C1391;
    const double C4213 = C1540 * C1391;
    const double C4209 = C3185 * C1391;
    const double C9568 = C622 * C1391;
    const double C9562 = C329 * C1391;
    const double C9766 = C1542 * C1391;
    const double C20884 = C2989 * C1391;
    const double C21021 = C3186 * C1391;
    const double C32087 = C31099 * C1391;
    const double C49853 = C49851 / C49810;
    const double C31219 = C31207 + C31208;
    const double C36675 = C36655 * C49763;
    const double C37705 = C36655 * C1392;
    const double C36674 = C36654 * C51025;
    const double C36788 = C36654 * C50753;
    const double C37704 = C36654 * C1386;
    const double C36787 = C36653 * C696;
    const double C37703 = C36653 * C1391;
    const double C31221 = C31210 * C696;
    const double C36801 = C36790 * C696;
    const double C31386 = C31376 * C696;
    const double C36994 = C36992 * C696;
    const double C179 = C167 + C168;
    const double C333 = C323 + C324;
    const double C481 = C471 + C472;
    const double C10890 = C10870 + C10871;
    const double C33407 = C33387 + C33388;
    const double C624 = C616 + C617;
    const double C1544 = C1536 + C1537;
    const double C11076 = C11060 + C11061;
    const double C33593 = C33577 + C33578;
    const double C981 = C973 + C974;
    const double C5363 = C5339 + C5340;
    const double C11260 = C11244 + C11245;
    const double C33777 = C33761 + C33762;
    const double C44333 = C44309 + C44310;
    const double C9164 = C9016 * C696;
    const double C2983 = C2850 * C696;
    const double C20196 = C2850 * C49763;
    const double C20882 = C2850 * C1392;
    const double C3197 = C3188 * C696;
    const double C21019 = C3188 * C1392;
    const double C21479 = C3188 * C49763;
    const double C3536 = C3370 * C696;
    const double C6571 =
        (4 * (2 * C50525 + C49873 * C50570 + C50526 * ae) +
         C49873 * (3 * C50570 +
                   C49873 * (2 * C50562 +
                             C49873 * (C49943 +
                                       C49873 * (C49873 * C49870 * C49958 +
                                                 C50064 * ae) +
                                       C49873 * C50064 * ae) +
                             C50564 * ae) +
                   C50569 * ae) +
         (3 * C50526 + C49873 * C50569) * ae) /
        C49810;
    const double C50055 = C50052 / C49744;
    const double C50067 = C50060 / C49744;
    const double C1086 = -(C50088 * C50152 + C50025 * C50049) / C49744;
    const double C50173 = C50171 / C49881;
    const double C20283 = C20277 + C20278;
    const double C20396 = C20391 + C20392;
    const double C31223 = C31213 + C31214;
    const double C36803 = C36793 + C36794;
    const double C20604 = C20600 + C20601;
    const double C22363 = C22353 + C22354;
    const double C31388 = C31379 + C31380;
    const double C36988 = C36973 + C36974;
    const double C47679 = C47669 + C47670;
    const double C22962 =
        (4 * (2 * C50554 + C49873 * C50635 + C50555 * ae) +
         C49873 * (3 * C50635 +
                   C49873 * (2 * C50629 +
                             C49873 * (C50621 +
                                       C49873 * (C49873 * C50025 * C49958 +
                                                 C50624 * ae) +
                                       C49873 * C50624 * ae) +
                             C50630 * ae) +
                   C50634 * ae) +
         (3 * C50555 + C49873 * C50634) * ae) /
        C49810;
    const double C50657 = C50638 + C50655;
    const double C165 = C117 * C138;
    const double C10876 = C10843 * C138;
    const double C33393 = C33360 * C138;
    const double C321 = C117 * C299;
    const double C11066 = C10843 * C299;
    const double C33583 = C33360 * C299;
    const double C469 = C117 * C447;
    const double C5347 = C5312 * C447;
    const double C10866 = C10844 * C447;
    const double C11250 = C10843 * C447;
    const double C33383 = C33361 * C447;
    const double C33767 = C33360 * C447;
    const double C614 = C117 * C597;
    const double C11426 = C10843 * C597;
    const double C33943 = C33360 * C597;
    const double C2486 = C117 * C703;
    const double C1534 = C117 * C824;
    const double C5535 = C5312 * C824;
    const double C11056 = C10844 * C824;
    const double C12594 = C10843 * C824;
    const double C33573 = C33361 * C824;
    const double C35111 = C33360 * C824;
    const double C2652 = C117 * C829;
    const double C11424 = C10844 * C829;
    const double C33941 = C33361 * C829;
    const double C971 = C117 * C954;
    const double C5337 = C5313 * C954;
    const double C5717 = C5312 * C954;
    const double C11240 = C10844 * C954;
    const double C11840 = C10843 * C954;
    const double C33757 = C33361 * C954;
    const double C34357 = C33360 * C954;
    const double C44307 = C44283 * C954;
    const double C5715 = C5313 * C1172;
    const double C11838 = C10844 * C1172;
    const double C34355 = C33361 * C1172;
    const double C44685 = C44283 * C1172;
    const double C20275 = C2996 + C2995;
    const double C141 = (5 * (3 * C49908 + C49870 * C49936) +
                         C49870 * (4 * C49936 + C49870 * C49973)) /
                        C49810;
    const double C302 = (C50025 * (4 * C49936 + C49870 * C49973)) / C49810;
    const double C450 = (C49873 * (4 * C49936 + C49870 * C49973) +
                         (4 * C50354 + C49870 * C50359) * ae) /
                        C49810;
    const double C600 =
        (3 * C49908 + C49870 * C49936 + C49973 * C50034) / C49810;
    const double C957 =
        (3 * C49908 + C49870 * C49936 +
         C49873 * (C49873 * C49973 + C50359 * ae) + C49873 * C50359 * ae) /
        C49810;
    const double C1524 =
        (C49873 * C50025 * C49973 + C50025 * C50359 * ae) / C49810;
    const double C50079 = C50078 / C49744;
    const double C50122 = C50121 + C50018;
    const double C50174 = C50172 + C50018;
    const double C7064 = (-2 * C49873 * C50088) / C49744 -
                         (C49873 * (C50242 * C50152 + C50088)) / C49744;
    const double C50131 = C50128 - C50130;
    const double C50216 = C50210 - C50214;
    const double C50265 = C50258 + C50264;
    const double C22961 =
        4 * ((-2 * C50187) / C49744 - (C49873 * C50195) / C49744) +
        C49873 * ((-3 * C50195) / C49744 + C49873 * C50298);
    const double C50331 = C50313 + C50329;
    const double C166 = C50911 * C147;
    const double C10877 = C51056 * C147;
    const double C33394 = C33358 * C147;
    const double C318 = C50911 * C306;
    const double C5538 = C5308 * C306;
    const double C11059 = C51056 * C306;
    const double C33576 = C33358 * C306;
    const double C44508 = C51090 * C306;
    const double C466 = C50911 * C454;
    const double C5336 = C5309 * C454;
    const double C5720 = C5308 * C454;
    const double C10861 = C50975 * C454;
    const double C11243 = C51056 * C454;
    const double C33378 = C50975 * C454;
    const double C33760 = C33358 * C454;
    const double C44306 = C51091 * C454;
    const double C44690 = C51090 * C454;
    const double C611 = C50911 * C603;
    const double C5890 = C5308 * C603;
    const double C11419 = C51056 * C603;
    const double C33936 = C33358 * C603;
    const double C44860 = C51090 * C603;
    const double C1531 = C50911 * C836;
    const double C5524 = C5309 * C836;
    const double C7078 = C5308 * C836;
    const double C11051 = C50975 * C836;
    const double C12587 = C51056 * C836;
    const double C33568 = C50975 * C836;
    const double C35104 = C33358 * C836;
    const double C44494 = C51091 * C836;
    const double C46016 = C51090 * C836;
    const double C968 = C50911 * C960;
    const double C5322 = C5310 * C960;
    const double C5706 = C5309 * C960;
    const double C6310 = C5308 * C960;
    const double C11235 = C50975 * C960;
    const double C11833 = C51056 * C960;
    const double C33752 = C50975 * C960;
    const double C34350 = C33358 * C960;
    const double C44292 = C44280 * C960;
    const double C44676 = C51091 * C960;
    const double C45268 = C51090 * C960;
    const double C49939 = C49932 + C49938;
    const double C49955 = C49941 - C49949;
    const double C3657 =
        2 * (C49873 * C50144 - (ae * C50090) / C49881) -
        (ae * (C50124 * std::pow(C49873, 2) + C50090)) / C49881 +
        C49873 * (C50144 - (ae * C49873 * C50124) / C49881 +
                  C49873 * (C49873 * C50025 * C49970 - (ae * C50124) / C49881));
    const double C50167 = C50162 - C50165;
    const double C2483 = C50911 * C711;
    const double C14325 = C51056 * C711;
    const double C36670 = C33358 * C711;
    const double C2649 = C50911 * C841;
    const double C5888 = C5309 * C841;
    const double C11417 = C50975 * C841;
    const double C14691 = C51056 * C841;
    const double C33934 = C50975 * C841;
    const double C37910 = C33358 * C841;
    const double C44858 = C51091 * C841;
    const double C3363 = C50911 * C1094;
    const double C5526 = C5310 * C1094;
    const double C7076 = C5309 * C1094;
    const double C12585 = C50975 * C1094;
    const double C14907 = C51056 * C1094;
    const double C35102 = C50975 * C1094;
    const double C41910 = C33358 * C1094;
    const double C44496 = C44280 * C1094;
    const double C46014 = C51091 * C1094;
    const double C5708 = C5310 * C1180;
    const double C6308 = C5309 * C1180;
    const double C11831 = C50975 * C1180;
    const double C34348 = C50975 * C1180;
    const double C44678 = C44280 * C1180;
    const double C45266 = C51091 * C1180;
    const double C20280 = C50911 * C2965;
    const double C3176 = C50911 * C3156;
    const double C14471 = C50975 * C3156;
    const double C22358 = C5309 * C3156;
    const double C31382 = C51056 * C3156;
    const double C36662 = C50975 * C3156;
    const double C36976 = C33358 * C3156;
    const double C47674 = C51091 * C3156;
    const double C20394 = C50911 * C3159;
    const double C31218 = C50975 * C3159;
    const double C36798 = C50975 * C3159;
    const double C3535 = C50911 * C3356;
    const double C14685 = C50975 * C3356;
    const double C22234 = C5310 * C3356;
    const double C22534 = C5309 * C3356;
    const double C31690 = C51056 * C3356;
    const double C36956 = C50975 * C3356;
    const double C37302 = C33358 * C3356;
    const double C47550 = C44280 * C3356;
    const double C47850 = C51091 * C3356;
    const double C20603 = C50911 * C3524;
    const double C22360 = C5310 * C3524;
    const double C31384 = C50975 * C3524;
    const double C36978 = C50975 * C3524;
    const double C47676 = C44280 * C3524;
    const double C22536 = C5310 * C3656;
    const double C31692 = C50975 * C3656;
    const double C37304 = C50975 * C3656;
    const double C47852 = C44280 * C3656;
    const double C6469 =
        3 * ((-(ae * C50187) / C49744) / C49810 - C50146 / C49881 +
             C49873 * C50198) +
        (((-2 * C50187) / C49744 - (C49873 * C50195) / C49744) * ae) / C49810 +
        C49873 * (2 * C50198 - (ae * C50195) / C49881 +
                  C49873 * ((-(ae * C49873 * C50190) / C49744) / C49810 -
                            C50188 / C49881 +
                            C49873 * ((-(C49873 * C50025 * C49957) / C49744) /
                                          C49810 -
                                      (ae * C50190) / C49881)));
    const double C50239 = C50237 + C50238;
    const double C50316 = C50302 - C50309;
    const double C49974 = C49965 + C49972;
    const double C50103 = C49937 + C50102;
    const double C50181 = C49873 * C50178;
    const double C50209 = C50201 - C50205;
    const double C2845 = C50911 * C2813;
    const double C50252 = C50246 + C50251;
    const double C50274 = C50269 - C50272;
    const double C50299 = C49873 * C50297;
    const double C50330 = C50327 + C50328;
    const double C49770 = C49769 - C49759;
    const double C20881 = C3994 + C3993;
    const double C4000 = C3984 + C3985;
    const double C32091 = C32087 + C32088;
    const double C49854 = C49853 - C49838;
    const double C31226 = C31219 * C50773;
    const double C36799 = C36787 + C36788;
    const double C37707 = C37703 + C37704;
    const double C8310 = C333 * C285;
    const double C9414 = C333 * C1287;
    const double C2478 = C624 * C285;
    const double C3828 = C624 * C1287;
    const double C8608 = C624 * C49763;
    const double C9566 = C624 * C1392;
    const double C9764 = C1544 * C1392;
    const double C10448 = C1544 * C49763;
    const double C50057 = C50054 - C50055;
    const double C5533 = C5313 * C1086;
    const double C9014 = C117 * C1086;
    const double C12592 = C10844 * C1086;
    const double C35109 = C33361 * C1086;
    const double C44503 = C44283 * C1086;
    const double C20285 = C20283 * C696;
    const double C20398 = C20396 * C696;
    const double C20606 = C20604 * C696;
    const double C50658 = C50657 + C50642;
    const double C20282 = C20275 * C50773;
    const double C50080 = C50068 - C50079;
    const double C2811 =
        (-3 * (C50018 * C50034 + C50049)) / C49744 +
        C50025 * ((-2 * C50088) / C49744 - (C50025 * C50122) / C49744);
    const double C3355 = -(C50122 * C50152 + C50018 * C50034 + C50049) / C49744;
    const double C4204 =
        C49873 * ((-2 * C50088) / C49744 - (C50025 * C50122) / C49744);
    const double C6294 =
        (-3 * (C50018 * C50152 + C50049)) / C49744 +
        C49873 * ((-2 * C50169) / C49744 - (C49873 * C50174) / C49744);
    const double C2960 =
        4 * ((-2 * C50090) / C49744 - (C50025 * C50119) / C49744) +
        C50025 * ((-3 * C50119) / C49744 + C50025 * C50131);
    const double C3152 = C49873 * ((-3 * C50119) / C49744 + C50025 * C50131);
    const double C3519 =
        (-2 * C50090) / C49744 - (C50025 * C50119) / C49744 + C50131 * C50152;
    const double C6570 =
        4 * ((-2 * C50161) / C49744 - (C49873 * C50166) / C49744) +
        C49873 * ((-3 * C50166) / C49744 + C49873 * C50216);
    const double C20269 = 5 * ((-3 * C50116) / C49744 + C50025 * C50140) +
                          C50025 * (4 * C50140 + C50025 * C50265);
    const double C20385 = C49873 * (4 * C50140 + C50025 * C50265);
    const double C20596 =
        (-3 * C50116) / C49744 + C50025 * C50140 + C50265 * C50152;
    const double C39683 = 5 * ((-3 * C50157) / C49744 + C49873 * C50236) +
                          C49873 * (4 * C50236 + C49873 * C50331);
    const double C178 = C165 + C166;
    const double C10893 = C10876 + C10877;
    const double C33410 = C33393 + C33394;
    const double C330 = C317 + C318;
    const double C5550 = C5537 + C5538;
    const double C11075 = C11058 + C11059;
    const double C33592 = C33575 + C33576;
    const double C478 = C465 + C466;
    const double C5361 = C5335 + C5336;
    const double C5732 = C5719 + C5720;
    const double C10885 = C10860 + C10861;
    const double C11259 = C11242 + C11243;
    const double C33402 = C33377 + C33378;
    const double C33776 = C33759 + C33760;
    const double C621 = C610 + C611;
    const double C5896 = C5889 + C5890;
    const double C11431 = C11418 + C11419;
    const double C33948 = C33935 + C33936;
    const double C1541 = C1530 + C1531;
    const double C5543 = C5523 + C5524;
    const double C7084 = C7077 + C7078;
    const double C11071 = C11050 + C11051;
    const double C12599 = C12586 + C12587;
    const double C33588 = C33567 + C33568;
    const double C35116 = C35103 + C35104;
    const double C978 = C967 + C968;
    const double C5354 = C5321 + C5322;
    const double C5725 = C5705 + C5706;
    const double C6316 = C6309 + C6310;
    const double C11255 = C11234 + C11235;
    const double C11845 = C11832 + C11833;
    const double C33772 = C33751 + C33752;
    const double C34362 = C34349 + C34350;
    const double C44324 = C44291 + C44292;
    const double C148 =
        4 * (2 * C49911 - (C49908 * ce) / C49881 + C49870 * C49939) -
        ((3 * C49908 + C49870 * C49936) * ce) / C49881 +
        C49870 *
            (3 * C49939 - (C49936 * ce) / C49881 +
             C49870 * (2 * C49937 - (C49931 * ce) / C49881 +
                       C49870 * ((-(C49870 * C49925 * ce) / C49744) / C49810 -
                                 C49924 / C49881 +
                                 C49870 * ((-(C49870 * std::pow(C49877, 7) *
                                              bs[7] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49925 * ce) / C49881))));
    const double C307 =
        (yP - yQ) * (2 * C49911 - (C49908 * ce) / C49881 + C49870 * C49939);
    const double C455 =
        (((-2 * (C49870 * C49991 + C49987 * ce)) / C49744 -
          (C49870 *
           (C49870 * (C49870 * C49896 * C49897 * C49986 + C49990 * ce) +
            C49991 + C49870 * C49990 * ce)) /
              C49744 -
          ((C49987 + C49990 * C49899) * ce) / C49744) *
         ae) /
            C49810 +
        C49873 * (2 * C49911 - (C49908 * ce) / C49881 + C49870 * C49939);
    const double C604 = (-(C49895 * ce) / C49744) / C49810 - C49892 / C49881 +
                        C49870 * C49911 + C49939 * std::pow(yP - yQ, 2);
    const double C837 =
        C49873 * C50025 * C49939 -
        (ae * C50025 * (C49870 * C50001 + C49991 + C49995 * ce)) / C49881;
    const double C961 = (-(C49895 * ce) / C49744) / C49810 - C49892 / C49881 +
                        C49870 * C49911 - (ae * C49873 * C50049) / C49881 +
                        C49873 * (C49873 * C49939 - (ae * C50049) / C49881);
    const double C7074 = C5310 * C3657;
    const double C14905 = C50975 * C3657;
    const double C41908 = C50975 * C3657;
    const double C46012 = C44280 * C3657;
    const double C6296 =
        3 * (C49911 - (ae * C50161) / C49881 + C49873 * C50167) +
        (((-2 * C50161) / C49744 - (C49873 * C50166) / C49744) * ae) / C49810 +
        C49873 *
            (2 * C50167 - (ae * C50166) / C49881 +
             C49873 * (C49937 - (ae * C49873 * C50013) / C49881 +
                       C49873 * (C49873 * C49970 - (ae * C50013) / C49881)));
    const double C2493 = C2482 + C2483;
    const double C14333 = C14324 + C14325;
    const double C36683 = C36669 + C36670;
    const double C2655 = C2648 + C2649;
    const double C5895 = C5887 + C5888;
    const double C11430 = C11416 + C11417;
    const double C14704 = C14690 + C14691;
    const double C33947 = C33933 + C33934;
    const double C37915 = C37909 + C37910;
    const double C3369 = C3362 + C3363;
    const double C5544 = C5525 + C5526;
    const double C7083 = C7075 + C7076;
    const double C12598 = C12584 + C12585;
    const double C14911 = C14906 + C14907;
    const double C35115 = C35101 + C35102;
    const double C41914 = C41909 + C41910;
    const double C44514 = C44495 + C44496;
    const double C5726 = C5707 + C5708;
    const double C6315 = C6307 + C6308;
    const double C11844 = C11830 + C11831;
    const double C34361 = C34347 + C34348;
    const double C44696 = C44677 + C44678;
    const double C20284 = C20279 + C20280;
    const double C3187 = C3175 + C3176;
    const double C14475 = C14470 + C14471;
    const double C22365 = C22357 + C22358;
    const double C31389 = C31381 + C31382;
    const double C36679 = C36661 + C36662;
    const double C36989 = C36975 + C36976;
    const double C20397 = C20393 + C20394;
    const double C31225 = C31217 + C31218;
    const double C36805 = C36797 + C36798;
    const double C3541 = C3534 + C3535;
    const double C14701 = C14684 + C14685;
    const double C22245 = C22233 + C22234;
    const double C22547 = C22533 + C22534;
    const double C31695 = C31689 + C31690;
    const double C36979 = C36955 + C36956;
    const double C37311 = C37301 + C37302;
    const double C47561 = C47549 + C47550;
    const double C20605 = C20602 + C20603;
    const double C22366 = C22359 + C22360;
    const double C31390 = C31383 + C31384;
    const double C36990 = C36977 + C36978;
    const double C47682 = C47675 + C47676;
    const double C22548 = C22535 + C22536;
    const double C31696 = C31691 + C31692;
    const double C37312 = C37303 + C37304;
    const double C47864 = C47851 + C47852;
    const double C22856 = C5310 * C6469;
    const double C48168 = C44280 * C6469;
    const double C6575 =
        4 * (2 * C50159 - (ae * C50157) / C49881 + C49873 * C50239) +
        (((-3 * C50157) / C49744 + C49873 * C50236) * ae) / C49810 +
        C49873 *
            (3 * C50239 + (C50236 * ae) / C49810 +
             C49873 *
                 (2 * C50235 - (ae * C50226) / C49881 +
                  C49873 *
                      ((-(ae * C49873 * C50007) / C49744) / C49810 - C49944 +
                       C49873 * ((-(C49873 * C49957) / C49744) / C49810 -
                                 (ae * C50007) / C49881))));
    const double C49975 = C49870 * C49974;
    const double C50170 = C49873 * C49974;
    const double C50241 = C50025 * C49974;
    const double C710 =
        2 * C50025 * C49939 + C50025 * (C49939 + C49974 * std::pow(C50025, 2));
    const double C840 =
        C49873 * (C49939 + C49974 * C50034) -
        (ae * (C50018 * C50034 + C49870 * C50001 + C49991 + C49995 * ce)) /
            C49881;
    const double C1093 =
        C50025 * C49939 - (ae * C49873 * C50088) / C49881 +
        C49873 * (C49873 * C50025 * C49974 - (ae * C50088) / C49881);
    const double C1179 =
        2 * (C49873 * C49939 - (ae * C50049) / C49881) -
        (ae * (C50018 * std::pow(C49873, 2) + C50049)) / C49881 +
        C49873 * (C49939 - (ae * C49873 * C50018) / C49881 +
                  C49873 * (C49873 * C49974 - (ae * C50018) / C49881));
    const double C2814 =
        3 * (C49939 + C49974 * C50034) +
        C50025 *
            (2 * C50025 * C49974 +
             C50025 *
                 (C49974 +
                  ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                   C49957 / C49881 +
                   C49870 * ((-(C49870 * std::pow(C49875, 8) * bs[8] * C49886) /
                              C49744) /
                                 C49810 -
                             (C49958 * ce) / C49881)) *
                      C50034));
    const double C3358 =
        C49939 + C49974 * C50034 - (ae * C49873 * C50122) / C49881 +
        C49873 *
            (C49873 *
                 (C49974 +
                  ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                   C49957 / C49881 +
                   C49870 * ((-(C49870 * std::pow(C49875, 8) * bs[8] * C49886) /
                              C49744) /
                                 C49810 -
                             (C49958 * ce) / C49881)) *
                      C50034) -
             (ae * C50122) / C49881);
    const double C4205 =
        (((-2 * C50088) / C49744 - (C50025 * C50122) / C49744) * ae) / C49810 +
        C49873 *
            (2 * C50025 * C49974 +
             C50025 *
                 (C49974 +
                  ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                   C49957 / C49881 +
                   C49870 * ((-(C49870 * std::pow(C49875, 8) * bs[8] * C49886) /
                              C49744) /
                                 C49810 -
                             (C49958 * ce) / C49881)) *
                      C50034));
    const double C2964 =
        4 * (2 * C50025 * C49937 + C50025 * C50103) +
        C50025 *
            (3 * C50103 +
             C50025 * (2 * C50025 * C49970 +
                       C50025 * (C49970 + ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881) *
                                              C50034)));
    const double C3157 = (((-2 * C50090) / C49744 -
                           (C50025 * (C50013 * C50034 + C50001)) / C49744) *
                          ae) /
                             C49810 +
                         C49873 * (2 * C50025 * C49937 + C50025 * C50103);
    const double C3158 =
        (((-3 * (C50013 * C50034 + C50001)) / C49744 +
          C50025 * ((-2 * C50025 * C50013) / C49744 -
                    (C50025 * (C50074 * C50034 + C50013)) / C49744)) *
         ae) /
            C49810 +
        C49873 *
            (3 * C50103 +
             C50025 * (2 * C50025 * C49970 +
                       C50025 * (C49970 + ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881) *
                                              C50034)));
    const double C3357 = C49911 + C49937 * C50034 -
                         (ae * C49873 * C50119) / C49881 +
                         C49873 * (C49873 * C50103 - (ae * C50119) / C49881);
    const double C3523 =
        2 * C50025 * C49937 + C50025 * C50103 +
        (C49873 * C50131 * ae) / C49810 +
        C49873 *
            ((C50131 * ae) / C49810 +
             C49873 * (2 * C50025 * C49970 +
                       C50025 * (C49970 + ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881) *
                                              C50034)));
    const double C3655 =
        2 * (C49873 * C50103 - (ae * C50119) / C49881) -
        (ae * (C50127 * std::pow(C49873, 2) + C50119)) / C49881 +
        C49873 *
            (C50103 - (ae * C49873 * C50127) / C49881 +
             C49873 * (C49873 * (C49970 + ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881) *
                                              C50034) -
                       (ae * C50127) / C49881));
    const double C50184 = C50181 - C50182;
    const double C50213 = C49873 * C50209;
    const double C2851 = C2844 + C2845;
    const double C20271 =
        5 * (3 * C50109 + C50025 * C50252) +
        C50025 * (4 * C50252 +
                  C50025 * (3 * C50250 +
                            C50025 * ((-2 * C50025 * C49957) / C49881 +
                                      C50025 * ((-(std::pow(C49875, 8) * bs[8] *
                                                   C49886 * C50034) /
                                                 C49744) /
                                                    C49810 -
                                                C49957 / C49881))));
    const double C20387 =
        ((4 * C50140 +
          C50025 *
              ((-3 * C50136) / C49744 +
               C50025 * ((-2 * C50190) / C49744 -
                         (C50025 * (C50069 * C50034 + C50007)) / C49744))) *
         ae) /
            C49810 +
        C49873 * (4 * C50252 +
                  C50025 * (3 * C50250 +
                            C50025 * ((-2 * C50025 * C49957) / C49881 +
                                      C50025 * ((-(std::pow(C49875, 8) * bs[8] *
                                                   C49886 * C50034) /
                                                 C49744) /
                                                    C49810 -
                                                C49957 / C49881))));
    const double C20598 =
        3 * C50109 + C50025 * C50252 + (C49873 * C50265 * ae) / C49810 +
        C49873 * ((C50265 * ae) / C49810 +
                  C49873 * (3 * C50250 +
                            C50025 * ((-2 * C50025 * C49957) / C49881 +
                                      C50025 * ((-(std::pow(C49875, 8) * bs[8] *
                                                   C49886 * C50034) /
                                                 C49744) /
                                                    C49810 -
                                                C49957 / C49881))));
    const double C20676 =
        2 * ((C50140 * ae) / C49810 + C49873 * C50252) +
        ((C50140 + C50263 * C50152) * ae) / C49810 +
        C49873 * (C50252 + (C49873 * C50263 * ae) / C49810 +
                  C49873 * ((C50263 * ae) / C49810 +
                            C49873 * ((-2 * C50025 * C49957) / C49881 +
                                      C50025 * ((-(std::pow(C49875, 8) * bs[8] *
                                                   C49886 * C50034) /
                                                 C49744) /
                                                    C49810 -
                                                C49957 / C49881))));
    const double C22843 =
        3 * (C50109 - (ae * C50268) / C49881 + C49873 * C50274) +
        (((-2 * C50268) / C49744 - (C49873 * C50273) / C49744) * ae) / C49810 +
        C49873 * (2 * C50274 - (ae * C50273) / C49881 +
                  C49873 * (C50250 - (ae * C49873 * C50260) / C49881 +
                            C49873 * (C49873 * ((-(std::pow(C49875, 8) * bs[8] *
                                                   C49886 * C50034) /
                                                 C49744) /
                                                    C49810 -
                                                C49957 / C49881) -
                                      (ae * C50260) / C49881)));
    const double C50300 = C50296 + C50299;
    const double C50332 = C49873 * C50330;
    const double C2840 = C2492 * C49770;
    const double C2828 = C620 * C49770;
    const double C2824 = C2490 * C49770;
    const double C2820 = C327 * C49770;
    const double C2816 = C2488 * C49770;
    const double C2855 = C2849 * C49770;
    const double C4917 = C2654 * C49770;
    const double C4913 = C3183 * C49770;
    const double C4909 = C1540 * C49770;
    const double C4905 = C3185 * C49770;
    const double C8610 = C622 * C49770;
    const double C8604 = C329 * C49770;
    const double C10450 = C1542 * C49770;
    const double C20198 = C2989 * C49770;
    const double C21481 = C3186 * C49770;
    const double C31103 = C31099 * C49770;
    const double C36673 = C36653 * C49770;
    const double C118 =
        ((((0 - (C49742 * C49743) / C49744) * ce) / C49744 - (0 * de) / C49753 +
          C49745 / C49744) /
             C49749 -
         ((C49742 * C49766 + 0) * de) / C49744) /
            C49749 -
        ((C49742 * (C49766 / C49749 -
                    ((C49742 * C49770 + C51025) * de) / C49744 + C49763) +
          C51083) *
         de) /
            C49744 +
        C49770 / C49749 - ((C49742 * C49763 + C50758) * de) / C49744;
    const double C119 =
        (C49766 / C49749 - ((C49742 * C49770 + C51025) * de) / C49744 +
         C49763) /
            C49749 -
        ((C49742 *
              (C49770 / C49749 - ((C49742 * C49763 + C50758) * de) / C49744) +
          C51067) *
         de) /
            C49744 +
        2 * (C49763 / C49749 - (0 * de) / C49744);
    const double C120 =
        (C49770 / C49749 - ((C49742 * C49763 + C50758) * de) / C49744) /
            C49749 -
        ((C49742 * (C49763 / C49749 - (0 * de) / C49744) + C1282) * de) /
            C49744;
    const double C1285 =
        C49766 / C49749 - ((C49742 * C49770 + C51025) * de) / C49744 + C49763;
    const double C1286 =
        C49770 / C49749 - ((C49742 * C49763 + C50758) * de) / C49744;
    const double C20886 = C20881 - C3992;
    const double C4002 = C4000 - C3986;
    const double C32092 = C32091 - C32089;
    const double C38958 =
        ((((0 - (C49808 * C49834) / C49810) * ae) / C49810 - (0 * be) / C49814 +
          C49809 / C49810) /
             C49835 -
         ((C49808 * C49852 + 0) * be) / C49810) /
            C49835 +
        ((C49808 * (C49852 / C49835 -
                    ((C49808 * C49854 + C51056) * be) / C49810 + C49847) +
          C51090) *
         ae) /
            C49810 +
        C49854 / C49835 - ((C49808 * C49847 + C50975) * be) / C49810;
    const double C38959 =
        (C49852 / C49835 - ((C49808 * C49854 + C51056) * be) / C49810 +
         C49847) /
            C49835 +
        ((C49808 *
              (C49854 / C49835 - ((C49808 * C49847 + C50975) * be) / C49810) +
          C51091) *
         ae) /
            C49810 +
        2 * (C49847 / C49835 - (0 * be) / C49810);
    const double C38960 =
        (C49854 / C49835 - ((C49808 * C49847 + C50975) * be) / C49810) /
            C49835 +
        ((C49808 * (C49847 / C49835 - (0 * be) / C49810) + C44280) * ae) /
            C49810;
    const double C44281 =
        C49852 / C49835 - ((C49808 * C49854 + C51056) * be) / C49810 + C49847;
    const double C44282 =
        C49854 / C49835 - ((C49808 * C49847 + C50975) * be) / C49810;
    const double C36806 = C36799 * C50773;
    const double C37708 = C37707 - C37705;
    const double C50058 = C50057 - C50056;
    const double C39684 =
        (5 * (3 * C50585 + C49873 * C50658 + C50584 * ae) +
         C49873 * (4 * C50658 +
                   C49873 * (3 * C50653 +
                             C49873 * (2 * C50645 +
                                       C49873 * (C49925 +
                                                 C49873 * (C49873 * C49958 +
                                                           C50006 * ae) +
                                                 C49873 * C50006 * ae) +
                                       C50647 * ae) +
                             C50652 * ae) +
                   C50656 * ae) +
         (4 * C50584 + C49873 * C50656) * ae) /
        C49810;
    const double C50081 = C50080 - C50071;
    const double C2463 = C330 * C279;
    const double C2459 = C330 * C280;
    const double C2823 = C330 * C50758;
    const double C3815 = C330 * C51067;
    const double C3811 = C330 * C1282;
    const double C3983 = C330 * C50758;
    const double C8307 = C330 * C278;
    const double C8605 = C330 * C51025;
    const double C8711 = C330 * C50753;
    const double C9411 = C330 * C51083;
    const double C9563 = C330 * C1386;
    const double C10895 = C10884 + C10885;
    const double C33412 = C33401 + C33402;
    const double C2475 = C621 * C278;
    const double C2471 = C621 * C279;
    const double C2829 = C621 * C51025;
    const double C2827 = C621 * C50758;
    const double C2974 = C621 * C50753;
    const double C3825 = C621 * C51083;
    const double C3821 = C621 * C51067;
    const double C3989 = C621 * C1386;
    const double C3987 = C621 * C50758;
    const double C3167 = C1541 * C50753;
    const double C4212 = C1541 * C1386;
    const double C4210 = C1541 * C50758;
    const double C4908 = C1541 * C51025;
    const double C4906 = C1541 * C50758;
    const double C13913 = C11070 + C11071;
    const double C13909 = C11071 + C11070;
    const double C40994 = C33587 + C33588;
    const double C40990 = C33588 + C33587;
    const double C170 = C50911 * C148;
    const double C322 = C50911 * C307;
    const double C11067 = C51056 * C307;
    const double C33584 = C33358 * C307;
    const double C470 = C50911 * C455;
    const double C5348 = C5309 * C455;
    const double C10867 = C50975 * C455;
    const double C11251 = C51056 * C455;
    const double C33384 = C50975 * C455;
    const double C33768 = C33358 * C455;
    const double C44318 = C51091 * C455;
    const double C615 = C50911 * C604;
    const double C11427 = C51056 * C604;
    const double C33944 = C33358 * C604;
    const double C1535 = C50911 * C837;
    const double C5536 = C5309 * C837;
    const double C11057 = C50975 * C837;
    const double C12595 = C51056 * C837;
    const double C33574 = C50975 * C837;
    const double C35112 = C33358 * C837;
    const double C44506 = C51091 * C837;
    const double C972 = C50911 * C961;
    const double C5338 = C5310 * C961;
    const double C5718 = C5309 * C961;
    const double C11241 = C50975 * C961;
    const double C11841 = C51056 * C961;
    const double C33758 = C50975 * C961;
    const double C34358 = C33358 * C961;
    const double C44308 = C44280 * C961;
    const double C44688 = C51091 * C961;
    const double C7082 = C7073 + C7074;
    const double C14910 = C14904 + C14905;
    const double C41913 = C41907 + C41908;
    const double C46020 = C46011 + C46012;
    const double C6306 = C5310 * C6296;
    const double C45264 = C44280 * C6296;
    const double C2839 = C2493 * C51025;
    const double C2837 = C2493 * C50758;
    const double C2975 = C2493 * C50753;
    const double C3997 = C2493 * C1386;
    const double C3995 = C2493 * C50758;
    const double C19995 = C2493 * C279;
    const double C20779 = C2493 * C51067;
    const double C3161 = C2655 * C50753;
    const double C4220 = C2655 * C1386;
    const double C4218 = C2655 * C50758;
    const double C4916 = C2655 * C51025;
    const double C4914 = C2655 * C50758;
    const double C14316 = C11430 + C11431;
    const double C14315 = C11431 + C11430;
    const double C36656 = C33947 + C33948;
    const double C41384 = C33948 + C33947;
    const double C3531 = C3369 * C50753;
    const double C15896 = C12598 + C12599;
    const double C15895 = C12599 + C12598;
    const double C42887 = C35115 + C35116;
    const double C42886 = C35116 + C35115;
    const double C20286 = C20284 * C50753;
    const double C3196 = C3187 * C50753;
    const double C21020 = C3187 * C1386;
    const double C21480 = C3187 * C51025;
    const double C31209 = C14475 + C14474;
    const double C36789 = C36679 + C36680;
    const double C20399 = C20397 * C50753;
    const double C3545 = C3541 * C50753;
    const double C31375 = C14701 + C14700;
    const double C36991 = C36979 + C36980;
    const double C20607 = C20605 * C50753;
    const double C22862 = C22855 + C22856;
    const double C48174 = C48167 + C48168;
    const double C49976 = C49955 + C49975;
    const double C50175 = C50170 - C50173;
    const double C7065 =
        2 * (C49873 * C50241 - (ae * C50088) / C49881) -
        (ae * (C50242 * C50152 + C50088)) / C49881 +
        C49873 * (C50241 - (ae * C49873 * C50242) / C49881 +
                  C49873 * (C49873 * C50025 *
                                ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                                 C49957 / C49881 +
                                 C49870 * ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881)) -
                            (ae * C50242) / C49881));
    const double C2487 = C50911 * C710;
    const double C2653 = C50911 * C840;
    const double C11425 = C50975 * C840;
    const double C33942 = C50975 * C840;
    const double C5534 = C5310 * C1093;
    const double C9015 = C50911 * C1093;
    const double C12593 = C50975 * C1093;
    const double C35110 = C50975 * C1093;
    const double C44504 = C44280 * C1093;
    const double C5716 = C5310 * C1179;
    const double C11839 = C50975 * C1179;
    const double C34356 = C50975 * C1179;
    const double C44686 = C44280 * C1179;
    const double C3180 = C50911 * C3157;
    const double C14323 = C50975 * C3157;
    const double C36672 = C50975 * C3157;
    const double C3367 = C50911 * C3357;
    const double C5886 = C5310 * C3357;
    const double C14693 = C50975 * C3357;
    const double C37912 = C50975 * C3357;
    const double C44856 = C44280 * C3357;
    const double C6468 =
        3 * (C50144 - (ae * C50177) / C49881 + C49873 * C50184) +
        (((-2 * C50177) / C49744 - (C49873 * C50185) / C49744) * ae) / C49810 +
        C49873 * (2 * C50184 - (ae * C50185) / C49881 +
                  C49873 * (C50178 - (ae * C49873 * C50180) / C49881 +
                            C49873 * (C49873 * C50025 *
                                          ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881) -
                                      (ae * C50180) / C49881)));
    const double C50215 = C50212 + C50213;
    const double C2984 = C2851 * C50753;
    const double C20199 = C2851 * C50758;
    const double C20885 = C2851 * C50758;
    const double C22963 =
        4 * (2 * C50198 - (ae * C50195) / C49881 + C49873 * C50300) +
        (((-3 * C50195) / C49744 + C49873 * C50298) * ae) / C49810 +
        C49873 *
            (3 * C50300 + (C50298 * ae) / C49810 +
             C49873 *
                 (2 * C50297 - (ae * C50289) / C49881 +
                  C49873 * ((-(ae * C49873 * C50280) / C49744) / C49810 -
                            C50278 / C49881 +
                            C49873 * ((-(C49873 * C50025 * std::pow(C49875, 8) *
                                         bs[8] * C49886) /
                                       C49744) /
                                          C49810 -
                                      (ae * C50280) / C49881))));
    const double C50333 = C50316 + C50332;
    const double C2846 = C2824 + C2825;
    const double C20195 = C2855 + C2854;
    const double C31105 = C31103 + C31104;
    const double C36685 = C36673 + C36674;
    const double C3824 = C620 * C1285;
    const double C3818 = C2490 * C1285;
    const double C3812 = C327 * C1285;
    const double C3806 = C2488 * C1285;
    const double C9410 = C329 * C1285;
    const double C20776 = C2849 * C1285;
    const double C3826 = C622 * C1286;
    const double C3820 = C620 * C1286;
    const double C3814 = C329 * C1286;
    const double C3808 = C327 * C1286;
    const double C9412 = C331 * C1286;
    const double C20778 = C2492 * C1286;
    const double C44319 = C44281 * C136;
    const double C44313 = C44281 * C125;
    const double C44303 = C44281 * C134;
    const double C44297 = C44281 * C124;
    const double C44295 = C44281 * C132;
    const double C44289 = C44281 * C123;
    const double C44507 = C44281 * C297;
    const double C44501 = C44281 * C288;
    const double C44491 = C44281 * C295;
    const double C44485 = C44281 * C286;
    const double C44689 = C44281 * C445;
    const double C44683 = C44281 * C436;
    const double C44673 = C44281 * C443;
    const double C44667 = C44281 * C434;
    const double C44859 = C44281 * C595;
    const double C44853 = C44281 * C588;
    const double C45267 = C44281 * C952;
    const double C45261 = C44281 * C945;
    const double C46015 = C44281 * C822;
    const double C46009 = C44281 * C812;
    const double C47245 = C44281 * C293;
    const double C47239 = C44281 * C287;
    const double C47559 = C44281 * C587;
    const double C47553 = C44281 * C593;
    const double C47671 = C44281 * C707;
    const double C47665 = C44281 * C700;
    const double C47847 = C44281 * C833;
    const double C47841 = C44281 * C818;
    const double C47839 = C44281 * C811;
    const double C47833 = C44281 * C820;
    const double C48163 = C44281 * C1090;
    const double C48157 = C44281 * C1083;
    const double C44317 = C44282 * C447;
    const double C44311 = C44282 * C437;
    const double C44305 = C44282 * C445;
    const double C44299 = C44282 * C436;
    const double C44293 = C44282 * C443;
    const double C44287 = C44282 * C434;
    const double C44505 = C44282 * C824;
    const double C44499 = C44282 * C813;
    const double C44493 = C44282 * C822;
    const double C44487 = C44282 * C812;
    const double C44687 = C44282 * C954;
    const double C44681 = C44282 * C946;
    const double C44675 = C44282 * C952;
    const double C44669 = C44282 * C945;
    const double C44857 = C44282 * C831;
    const double C44851 = C44282 * C817;
    const double C45265 = C44282 * C1174;
    const double C45259 = C44282 * C1168;
    const double C46013 = C44282 * C1088;
    const double C46007 = C44282 * C1082;
    const double C47247 = C44282 * C820;
    const double C47241 = C44282 * C811;
    const double C47557 = C44282 * C818;
    const double C47551 = C44282 * C833;
    const double C47673 = C44282 * C3149;
    const double C47667 = C44282 * C3144;
    const double C47849 = C44282 * C3351;
    const double C47843 = C44282 * C3347;
    const double C47837 = C44282 * C1083;
    const double C47831 = C44282 * C1090;
    const double C48165 = C44282 * C3653;
    const double C48159 = C44282 * C3646;
    const double C140 =
        4 * ((-2 * C50044) / C49744 - (C49870 * C50049) / C49744 -
             (C50349 * ce) / C49744) +
        C49870 * ((-3 * C50049) / C49744 + C49870 * C50058 -
                  (C50354 * ce) / C49744) -
        ((3 * C50349 + C49870 * C50354) * ce) / C49744;
    const double C301 = C50025 * ((-3 * C50049) / C49744 + C49870 * C50058 -
                                  (C50354 * ce) / C49744);
    const double C449 = C49873 * ((-3 * C50049) / C49744 + C49870 * C50058 -
                                  (C50354 * ce) / C49744);
    const double C599 = (-2 * C50044) / C49744 - (C49870 * C50049) / C49744 -
                        (C50349 * ce) / C49744 + C50058 * C50034;
    const double C826 = C49873 * C50025 * C50058;
    const double C956 = (-2 * C50044) / C49744 - (C49870 * C50049) / C49744 -
                        (C50349 * ce) / C49744 + C50058 * C50152;
    const double C50082 = C49870 * C50081;
    const double C50086 = C50025 * C50081;
    const double C701 =
        2 * C50025 * C50058 + C50025 * (C50058 + C50081 * C50034);
    const double C827 = C49873 * (C50058 + C50081 * C50034);
    const double C1170 =
        2 * C49873 * C50058 + C49873 * (C50058 + C50081 * C50152);
    const double C2847 = C2828 + C2829;
    const double C2986 = C2973 + C2974;
    const double C4001 = C3988 + C3989;
    const double C4004 = C4002 - C3987;
    const double C332 = C321 + C322;
    const double C11079 = C11066 + C11067;
    const double C33596 = C33583 + C33584;
    const double C480 = C469 + C470;
    const double C5367 = C5347 + C5348;
    const double C10888 = C10866 + C10867;
    const double C11263 = C11250 + C11251;
    const double C33405 = C33383 + C33384;
    const double C33780 = C33767 + C33768;
    const double C623 = C614 + C615;
    const double C11435 = C11426 + C11427;
    const double C33952 = C33943 + C33944;
    const double C1543 = C1534 + C1535;
    const double C5549 = C5535 + C5536;
    const double C11074 = C11056 + C11057;
    const double C12603 = C12594 + C12595;
    const double C33591 = C33573 + C33574;
    const double C35120 = C35111 + C35112;
    const double C980 = C971 + C972;
    const double C5362 = C5337 + C5338;
    const double C5731 = C5717 + C5718;
    const double C11258 = C11240 + C11241;
    const double C11849 = C11840 + C11841;
    const double C33775 = C33757 + C33758;
    const double C34366 = C34357 + C34358;
    const double C44332 = C44307 + C44308;
    const double C6314 = C6305 + C6306;
    const double C45272 = C45263 + C45264;
    const double C2987 = C2975 + C2976;
    const double C20887 = C20886 - C3995;
    const double C3181 = C3161 + C3162;
    const double C31102 = C14316 * C50758;
    const double C32090 = C14316 * C50758;
    const double C36676 = C36656 * C50758;
    const double C37706 = C36656 * C50758;
    const double C20389 = C3196 + C3195;
    const double C31220 = C31209 * C50753;
    const double C36800 = C36789 * C50753;
    const double C31385 = C31375 * C50753;
    const double C36993 = C36991 * C50753;
    const double C149 =
        5 * (3 * C49939 - (C49936 * ce) / C49881 + C49870 * C49976) -
        ((4 * C49936 + C49870 * C49973) * ce) / C49881 +
        C49870 *
            (4 * C49976 - (C49973 * ce) / C49881 +
             C49870 *
                 (3 * C49974 - (C49969 * ce) / C49881 +
                  C49870 *
                      (2 * C49970 - (C49964 * ce) / C49881 +
                       C49870 * ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                                 C49957 / C49881 +
                                 C49870 * ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881)))));
    const double C308 =
        (yP - yQ) * (3 * C49939 - (C49936 * ce) / C49881 + C49870 * C49976);
    const double C309 =
        (yP - yQ) *
        (4 * C49976 - (C49973 * ce) / C49881 +
         C49870 *
             (3 * C49974 - (C49969 * ce) / C49881 +
              C49870 * (2 * C49970 - (C49964 * ce) / C49881 +
                        C49870 * ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                                  C49957 / C49881 +
                                  C49870 * ((-(C49870 * std::pow(C49875, 8) *
                                               bs[8] * C49886) /
                                             C49744) /
                                                C49810 -
                                            (C49958 * ce) / C49881)))));
    const double C456 =
        (((-3 * (C49870 * C50001 + C49991 + C49995 * ce)) / C49744 +
          C49870 * ((-2 * C50001) / C49744 -
                    (C49870 * (C49870 * (C49870 * C49915 * C49916 * C49986 +
                                         C49996 * ce) +
                               C49997 + C49870 * C49996 * ce)) /
                        C49744 -
                    (C50000 * ce) / C49744) -
          ((2 * C49995 + C49870 * C50000) * ce) / C49744) *
         ae) /
            C49810 +
        C49873 * (3 * C49939 - (C49936 * ce) / C49881 + C49870 * C49976);
    const double C457 =
        ((4 * ((-2 * C50001) / C49744 - (C49870 * C50018) / C49744 -
               (C50000 * ce) / C49744) +
          C49870 * ((-3 * C50018) / C49744 +
                    C49870 * ((-2 * C50013) / C49744 -
                              (C49870 *
                               (C49870 * (C49870 * C49945 * C49946 * C49986 +
                                          C50006 * ce) +
                                C50007 + C49870 * C50006 * ce)) /
                                  C49744 -
                              (C50012 * ce) / C49744) -
                    (C50016 * ce) / C49744) -
          ((3 * C50000 + C49870 * C50016) * ce) / C49744) *
         ae) /
            C49810 +
        C49873 *
            (4 * C49976 - (C49973 * ce) / C49881 +
             C49870 *
                 (3 * C49974 - (C49969 * ce) / C49881 +
                  C49870 *
                      (2 * C49970 - (C49964 * ce) / C49881 +
                       C49870 * ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                                 C49957 / C49881 +
                                 C49870 * ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881)))));
    const double C605 = 2 * C49911 - (C49908 * ce) / C49881 + C49870 * C49939 +
                        C49976 * std::pow(yP - yQ, 2);
    const double C606 =
        3 * C49939 - (C49936 * ce) / C49881 + C49870 * C49976 +
        (3 * C49974 - (C49969 * ce) / C49881 +
         C49870 *
             (2 * C49970 - (C49964 * ce) / C49881 +
              C49870 *
                  ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                   C49957 / C49881 +
                   C49870 * ((-(C49870 * std::pow(C49875, 8) * bs[8] * C49886) /
                              C49744) /
                                 C49810 -
                             (C49958 * ce) / C49881)))) *
            std::pow(yP - yQ, 2);
    const double C709 =
        2 * C50025 * C49976 +
        C50025 *
            (C49976 +
             (2 * C49970 - (C49964 * ce) / C49881 +
              C49870 *
                  ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                   C49957 / C49881 +
                   C49870 * ((-(C49870 * std::pow(C49875, 8) * bs[8] * C49886) /
                              C49744) /
                                 C49810 -
                             (C49958 * ce) / C49881))) *
                 std::pow(C50025, 2));
    const double C838 = (C50025 *
                         ((-2 * C50001) / C49744 - (C49870 * C50018) / C49744 -
                          (C50000 * ce) / C49744) *
                         ae) /
                            C49810 +
                        C49873 * C50025 * C49976;
    const double C839 =
        (((-2 * C50001) / C49744 - (C49870 * C50018) / C49744 -
          (C50000 * ce) / C49744 +
          ((-2 * C50013) / C49744 -
           (C49870 *
            (C49870 * (C49870 * C49945 * C49946 * C49986 + C50006 * ce) +
             C50007 + C49870 * C50006 * ce)) /
               C49744 -
           (C50012 * ce) / C49744) *
              C50034) *
         ae) /
            C49810 +
        C49873 *
            (C49976 +
             (2 * C49970 - (C49964 * ce) / C49881 +
              C49870 *
                  ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                   C49957 / C49881 +
                   C49870 * ((-(C49870 * std::pow(C49875, 8) * bs[8] * C49886) /
                              C49744) /
                                 C49810 -
                             (C49958 * ce) / C49881))) *
                 C50034);
    const double C962 = 2 * C49911 - (C49908 * ce) / C49881 + C49870 * C49939 +
                        (C49873 * C50058 * ae) / C49810 +
                        C49873 * ((C50058 * ae) / C49810 + C49873 * C49976);
    const double C1178 =
        2 * ((C50058 * ae) / C49810 + C49873 * C49976) +
        ((C50058 + C50081 * std::pow(C49873, 2)) * ae) / C49810 +
        C49873 *
            (C49976 + (C49873 * C50081 * ae) / C49810 +
             C49873 *
                 ((C50081 * ae) / C49810 +
                  C49873 *
                      (2 * C49970 - (C49964 * ce) / C49881 +
                       C49870 * ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                                 C49957 / C49881 +
                                 C49870 * ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881)))));
    const double C6297 =
        3 * (C49939 - (ae * C50169) / C49881 + C49873 * C50175) +
        (((-2 * C50169) / C49744 - (C49873 * C50174) / C49744) * ae) / C49810 +
        C49873 *
            (2 * C50175 - (ae * C50174) / C49881 +
             C49873 *
                 (C49974 - (ae * C49873 * C50077) / C49881 +
                  C49873 *
                      (C49873 * ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                                 C49957 / C49881 +
                                 C49870 * ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881)) -
                       (ae * C50077) / C49881)));
    const double C2495 = C2486 + C2487;
    const double C2657 = C2652 + C2653;
    const double C11434 = C11424 + C11425;
    const double C33951 = C33941 + C33942;
    const double C5548 = C5533 + C5534;
    const double C9017 = C9014 + C9015;
    const double C12602 = C12592 + C12593;
    const double C35119 = C35109 + C35110;
    const double C44518 = C44503 + C44504;
    const double C5730 = C5715 + C5716;
    const double C11848 = C11838 + C11839;
    const double C34365 = C34355 + C34356;
    const double C44700 = C44685 + C44686;
    const double C3189 = C3179 + C3180;
    const double C14332 = C14322 + C14323;
    const double C36684 = C36671 + C36672;
    const double C3371 = C3366 + C3367;
    const double C5894 = C5885 + C5886;
    const double C14705 = C14692 + C14693;
    const double C37916 = C37911 + C37912;
    const double C44864 = C44855 + C44856;
    const double C6574 =
        4 * (2 * C50167 - (ae * C50166) / C49881 + C49873 * C50215) +
        (((-3 * C50166) / C49744 + C49873 * C50216) * ae) / C49810 +
        C49873 *
            (3 * C50215 + (C50216 * ae) / C49810 +
             C49873 *
                 (2 * C50209 - (ae * C50207) / C49881 +
                  C49873 *
                      (C49970 - (ae * C49873 * C50074) / C49881 +
                       C49873 * (C49873 * ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881) -
                                 (ae * C50074) / C49881))));
    const double C39685 =
        5 * (3 * C50239 + (C50236 * ae) / C49810 + C49873 * C50333) +
        ((4 * C50236 + C49873 * C50331) * ae) / C49810 +
        C49873 *
            (4 * C50333 + (C50331 * ae) / C49810 +
             C49873 *
                 (3 * C50330 + (C50326 * ae) / C49810 +
                  C49873 *
                      (2 * C50325 - (ae * C50315) / C49881 +
                       C49873 * ((-(ae * C49873 * C50069) / C49744) / C49810 -
                                 C49957 / C49881 +
                                 C49873 * ((-(C49873 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (ae * C50069) / C49881)))));
    const double C2852 = C2846 - C2826;
    const double C20200 = C20195 - C2832;
    const double C31106 = C31105 - C31101;
    const double C36686 = C36685 - C36675;
    const double C44338 = C44319 + C44320;
    const double C44335 = C44313 + C44314;
    const double C44330 = C44303 + C44304;
    const double C44327 = C44297 + C44298;
    const double C44326 = C44295 + C44296;
    const double C44323 = C44289 + C44290;
    const double C44520 = C44507 + C44508;
    const double C44517 = C44501 + C44502;
    const double C44512 = C44491 + C44492;
    const double C44509 = C44485 + C44486;
    const double C44702 = C44689 + C44690;
    const double C44699 = C44683 + C44684;
    const double C44694 = C44673 + C44674;
    const double C44691 = C44667 + C44668;
    const double C44866 = C44859 + C44860;
    const double C44863 = C44853 + C44854;
    const double C45274 = C45267 + C45268;
    const double C45271 = C45261 + C45262;
    const double C46022 = C46015 + C46016;
    const double C46019 = C46009 + C46010;
    const double C47254 = C47245 + C47246;
    const double C47251 = C47239 + C47240;
    const double C47566 = C47559 + C47560;
    const double C47563 = C47553 + C47554;
    const double C47680 = C47671 + C47672;
    const double C47677 = C47665 + C47666;
    const double C47862 = C47847 + C47848;
    const double C47859 = C47841 + C47842;
    const double C47858 = C47839 + C47840;
    const double C47855 = C47833 + C47834;
    const double C48172 = C48163 + C48164;
    const double C48169 = C48157 + C48158;
    const double C44337 = C44317 + C44318;
    const double C44334 = C44311 + C44312;
    const double C44331 = C44305 + C44306;
    const double C44328 = C44299 + C44300;
    const double C44325 = C44293 + C44294;
    const double C44322 = C44287 + C44288;
    const double C44519 = C44505 + C44506;
    const double C44516 = C44499 + C44500;
    const double C44513 = C44493 + C44494;
    const double C44510 = C44487 + C44488;
    const double C44701 = C44687 + C44688;
    const double C44698 = C44681 + C44682;
    const double C44695 = C44675 + C44676;
    const double C44692 = C44669 + C44670;
    const double C44865 = C44857 + C44858;
    const double C44862 = C44851 + C44852;
    const double C45273 = C45265 + C45266;
    const double C45270 = C45259 + C45260;
    const double C46021 = C46013 + C46014;
    const double C46018 = C46007 + C46008;
    const double C47255 = C47247 + C47248;
    const double C47252 = C47241 + C47242;
    const double C47565 = C47557 + C47558;
    const double C47562 = C47551 + C47552;
    const double C47681 = C47673 + C47674;
    const double C47678 = C47667 + C47668;
    const double C47863 = C47849 + C47850;
    const double C47860 = C47843 + C47844;
    const double C47857 = C47837 + C47838;
    const double C47854 = C47831 + C47832;
    const double C48173 = C48165 + C48166;
    const double C48170 = C48159 + C48160;
    const double C169 = C117 * C140;
    const double C325 = C117 * C301;
    const double C473 = C117 * C449;
    const double C10874 = C10844 * C449;
    const double C33391 = C33361 * C449;
    const double C618 = C117 * C599;
    const double C1538 = C117 * C826;
    const double C11064 = C10844 * C826;
    const double C33581 = C33361 * C826;
    const double C975 = C117 * C956;
    const double C5345 = C5313 * C956;
    const double C11248 = C10844 * C956;
    const double C33765 = C33361 * C956;
    const double C44315 = C44283 * C956;
    const double C50083 = C50067 + C50082;
    const double C1092 =
        C50025 * C49976 + (C49873 * C50086 * ae) / C49810 +
        C49873 * ((C50086 * ae) / C49810 +
                  C49873 * C50025 *
                      (2 * C49970 - (C49964 * ce) / C49881 +
                       C49870 * ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                                 C49957 / C49881 +
                                 C49870 * ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881))));
    const double C1084 = C50025 * C50058 + C50086 * C50152;
    const double C2853 = C2847 - C2830;
    const double C2992 = C2986 * C50778;
    const double C25066 = C2986 * C50778;
    const double C4003 = C4001 - C3990;
    const double C4006 = C4004 * C2300;
    const double C20880 = C4004 * C50773;
    const double C25902 = C4004 * C51034;
    const double C2465 = C332 * C280;
    const double C3817 = C332 * C1282;
    const double C8309 = C332 * C279;
    const double C8607 = C332 * C50758;
    const double C9413 = C332 * C51067;
    const double C9565 = C332 * C50758;
    const double C10897 = C10888 + C10889;
    const double C33414 = C33405 + C33406;
    const double C2477 = C623 * C279;
    const double C2473 = C623 * C280;
    const double C2831 = C623 * C50758;
    const double C3827 = C623 * C51067;
    const double C3823 = C623 * C1282;
    const double C3991 = C623 * C50758;
    const double C8609 = C623 * C51025;
    const double C8712 = C623 * C50753;
    const double C9567 = C623 * C1386;
    const double C4214 = C1543 * C50758;
    const double C4910 = C1543 * C50758;
    const double C8862 = C1543 * C50753;
    const double C9765 = C1543 * C1386;
    const double C10449 = C1543 * C51025;
    const double C11081 = C11074 + C11075;
    const double C13911 = C11075 + C11074;
    const double C33598 = C33591 + C33592;
    const double C40992 = C33592 + C33591;
    const double C11265 = C11258 + C11259;
    const double C33782 = C33775 + C33776;
    const double C2993 = C2987 * C50778;
    const double C25067 = C2987 * C50778;
    const double C20888 = C20887 * C50773;
    const double C3190 = C3181 * C50778;
    const double C25217 = C3181 * C50778;
    const double C32093 = C32092 - C32090;
    const double C37709 = C37708 - C37706;
    const double C20395 = C20389 * C50773;
    const double C31227 = C31220 + C31221;
    const double C36807 = C36800 + C36801;
    const double C31391 = C31385 + C31386;
    const double C36995 = C36993 + C36994;
    const double C326 = C50911 * C308;
    const double C474 = C50911 * C456;
    const double C10875 = C50975 * C456;
    const double C33392 = C50975 * C456;
    const double C619 = C50911 * C605;
    const double C1539 = C50911 * C838;
    const double C11065 = C50975 * C838;
    const double C33582 = C50975 * C838;
    const double C976 = C50911 * C962;
    const double C5346 = C5310 * C962;
    const double C11249 = C50975 * C962;
    const double C33766 = C50975 * C962;
    const double C44316 = C44280 * C962;
    const double C2841 = C2495 * C50758;
    const double C3999 = C2495 * C50758;
    const double C8715 = C2495 * C50753;
    const double C19997 = C2495 * C280;
    const double C20781 = C2495 * C1282;
    const double C4222 = C2657 * C50758;
    const double C4918 = C2657 * C50758;
    const double C8865 = C2657 * C50753;
    const double C9165 = C9017 * C50753;
    const double C3198 = C3189 * C50753;
    const double C21022 = C3189 * C50758;
    const double C21482 = C3189 * C50758;
    const double C3537 = C3371 * C50753;
    const double C2856 = C2852 - C2827;
    const double C20201 = C20200 - C2837;
    const double C31107 = C31106 - C31102;
    const double C36687 = C36686 - C36676;
    const double C180 = C169 + C170;
    const double C50084 = C50083 - C50072;
    const double C2997 = C2991 + C2992;
    const double C25069 = C25065 + C25066;
    const double C2857 = C2853 - C2831;
    const double C4005 = C4003 - C3991;
    const double C2998 = C2993 + C2994;
    const double C25070 = C25067 + C25068;
    const double C3201 = C3190 + C3200;
    const double C25219 = C25217 + C25218;
    const double C32094 = C32093 * C50773;
    const double C37710 = C37709 * C50773;
    const double C31228 = C31227 * C50773;
    const double C36808 = C36807 * C50773;
    const double C31392 = C31391 * C50773;
    const double C36996 = C36995 * C50773;
    const double C334 = C325 + C326;
    const double C482 = C473 + C474;
    const double C10892 = C10874 + C10875;
    const double C33409 = C33391 + C33392;
    const double C625 = C618 + C619;
    const double C1545 = C1538 + C1539;
    const double C11078 = C11064 + C11065;
    const double C33595 = C33581 + C33582;
    const double C982 = C975 + C976;
    const double C5366 = C5345 + C5346;
    const double C11262 = C11248 + C11249;
    const double C33779 = C33765 + C33766;
    const double C44336 = C44315 + C44316;
    const double C2858 = C2856 * C2300;
    const double C20194 = C2856 * C50773;
    const double C24964 = C2856 * C51034;
    const double C20202 = C20201 * C50773;
    const double C31108 = C31107 * C50773;
    const double C36688 = C36687 * C50773;
    const double C963 =
        3 * C49939 - (C49936 * ce) / C49881 + C49870 * C49976 +
        (C49873 * C50084 * ae) / C49810 +
        C49873 *
            ((C50084 * ae) / C49810 +
             C49873 *
                 (3 * C49974 - (C49969 * ce) / C49881 +
                  C49870 *
                      (2 * C49970 - (C49964 * ce) / C49881 +
                       C49870 * ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                                 C49957 / C49881 +
                                 C49870 * ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881)))));
    const double C1526 =
        (C50025 * C50084 * ae) / C49810 +
        C49873 * C50025 *
            (3 * C49974 - (C49969 * ce) / C49881 +
             C49870 * (2 * C49970 - (C49964 * ce) / C49881 +
                       C49870 * ((-(C49870 * C49958 * ce) / C49744) / C49810 -
                                 C49957 / C49881 +
                                 C49870 * ((-(C49870 * std::pow(C49875, 8) *
                                              bs[8] * C49886) /
                                            C49744) /
                                               C49810 -
                                           (C49958 * ce) / C49881))));
    const double C142 =
        5 * ((-3 * C50049) / C49744 + C49870 * C50058 -
             (C50354 * ce) / C49744) +
        C49870 * (4 * C50058 + C49870 * C50084 - (C50359 * ce) / C49744) -
        ((4 * C50354 + C49870 * C50359) * ce) / C49744;
    const double C303 =
        C50025 * (4 * C50058 + C49870 * C50084 - (C50359 * ce) / C49744);
    const double C451 =
        C49873 * (4 * C50058 + C49870 * C50084 - (C50359 * ce) / C49744);
    const double C601 = (-3 * C50049) / C49744 + C49870 * C50058 -
                        (C50354 * ce) / C49744 + C50084 * C50034;
    const double C958 = (-3 * C50049) / C49744 + C49870 * C50058 -
                        (C50354 * ce) / C49744 + C50084 * C50152;
    const double C1525 = C49873 * C50025 * C50084;
    const double C2859 = C2857 * C50778;
    const double C24965 = C2857 * C50778;
    const double C4007 = C4005 * C50778;
    const double C25903 = C4005 * C50778;
    const double C8311 = C334 * C280;
    const double C9415 = C334 * C1282;
    const double C2479 = C625 * C280;
    const double C3829 = C625 * C1282;
    const double C8611 = C625 * C50758;
    const double C9569 = C625 * C50758;
    const double C9767 = C1545 * C50758;
    const double C10451 = C1545 * C50758;
    const double C2860 = C2858 + C2859;
    const double C24966 = C24964 + C24965;
    const double C4008 = C4006 + C4007;
    const double C25904 = C25902 + C25903;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C122 + C50911 * C129) * C1285 +
                    (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
                    C172 * C51067 + C173 * C1287 + C174 * C1282) *
                       C51084 +
                   (C171 * C1285 + C172 * C51083 - C173 * C1286 -
                    C174 * C51067 + C175 * C1287 + C176 * C1282) *
                       C51085 +
                   (C173 * C1285 + C174 * C51083 - C175 * C1286 -
                    C176 * C51067 + C177 * C1287 + C178 * C1282) *
                       C8156) *
                      C51055 +
                  ((C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C51084 +
                   (C3812 + C3813 - C3814 - C3815 + C3816 + C3817) * C51085 +
                   (C9410 + C9411 - C9412 - C9413 + C9414 + C9415) * C8156) *
                      C50949) *
                     C50841 * C1283 +
                 (((C3808 - (C3807 + C3806) + C3809 - C3810 - C3811) * C51084 +
                   (C3814 - (C3813 + C3812) + C3815 - C3816 - C3817) * C51085 +
                   (C9412 - (C9411 + C9410) + C9413 - C9414 - C9415) * C8156) *
                      C51055 +
                  ((C3820 - (C3819 + C3818) + C3821 - C3822 - C3823) * C51084 +
                   (C3826 - (C3825 + C3824) + C3827 - C3828 - C3829) * C51085 +
                   (C624 * C1286 - (C623 * C51083 + C622 * C1285) +
                    C625 * C51067 - (C117 * C591 + C50911 * C600) * C1287 -
                    (C117 * C601 + C50911 * C606) * C1282) *
                       C8156) *
                      C50949) *
                     C50841 * C50829)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C51084 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C51085 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                C8156) *
               C51055 +
           ((C3976 + C3977 - C3978 - C3979) * C51084 +
            (C3980 + C3981 - C3982 - C3983) * C51085 +
            (C9562 + C9563 - C9564 - C9565) * C8156) *
               C50949) *
              C50841 * C51086 +
          (((C3978 - (C3977 + C3976) + C3979) * C51084 +
            (C3982 - (C3981 + C3980) + C3983) * C51085 +
            (C9564 - (C9563 + C9562) + C9565) * C8156) *
               C51055 +
           ((C3986 - (C3985 + C3984) + C3987) * C51084 +
            (C3990 - (C3989 + C3988) + C3991) * C51085 +
            (C9566 - (C9567 + C9568) + C9569) * C8156) *
               C50949) *
              C50841 * C51073 +
          ((C4004 * C51084 + C4005 * C51085 +
            (C9568 + C9567 - C9566 - C9569) * C8156) *
               C51055 +
           ((C3994 + C3993 - C3992 - C3995) * C51084 +
            (C3998 + C3997 - C3996 - C3999) * C51085 +
            (C2494 * C1391 + C2495 * C1386 -
             (C117 * C697 + C50911 * C702) * C1392 -
             (C117 * C701 + C50911 * C709) * C50758) *
                C8156) *
               C50949) *
              C50841 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C1391 +
              (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
              C172 * C50758) *
                 C51084 +
             (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                 C51085 +
             (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                 C8156) *
                C51055 +
            ((C3976 + C3977 - C3978 - C3979) * C51084 +
             (C3980 + C3981 - C3982 - C3983) * C51085 +
             (C9562 + C9563 - C9564 - C9565) * C8156) *
                C50949) *
               C51041 +
           (((C475 * C1392 -
              ((C117 * C441 + C50911 * C452) * C1386 +
               (C117 * C435 + C50911 * C442) * C1391) +
              C476 * C50758) *
                 C51084 +
             (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                 C51085 +
             (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                 C8156) *
                C51055 +
            ((C4207 - (C4208 + C4209) + C4210) * C51084 +
             (C4211 - (C4212 + C4213) + C4214) * C51085 +
             (C9764 - (C9765 + C9766) + C9767) * C8156) *
                C50949) *
               C50853) *
              C1283 +
          ((((C3978 - (C3977 + C3976) + C3979) * C51084 +
             (C3982 - (C3981 + C3980) + C3983) * C51085 +
             (C9564 - (C9563 + C9562) + C9565) * C8156) *
                C51055 +
            ((C3986 - (C3985 + C3984) + C3987) * C51084 +
             (C3990 - (C3989 + C3988) + C3991) * C51085 +
             (C9566 - (C9567 + C9568) + C9569) * C8156) *
                C50949) *
               C51041 +
           (((C4209 + C4208 - C4207 - C4210) * C51084 +
             (C4213 + C4212 - C4211 - C4214) * C51085 +
             (C9766 + C9765 - C9764 - C9767) * C8156) *
                C51055 +
            ((C4217 + C4216 - C4215 - C4218) * C51084 +
             (C4221 + C4220 - C4219 - C4222) * C51085 +
             (C2656 * C1391 + C2657 * C1386 -
              (C117 * C815 + C50911 * C828) * C1392 -
              (C117 * C827 + C50911 * C839) * C50758) *
                 C8156) *
                C50949) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C49770 +
              (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
              C172 * C50758) *
                 C51084 +
             (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                 C51085 +
             (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                 C8156) *
                C51055 +
            ((C2816 + C2817 - C2818 - C2819) * C51084 +
             (C2820 + C2821 - C2822 - C2823) * C51085 +
             (C8604 + C8605 - C8606 - C8607) * C8156) *
                C50949) *
               C1643 +
           (((C475 * C49763 -
              ((C117 * C441 + C50911 * C452) * C51025 +
               (C117 * C435 + C50911 * C442) * C49770) +
              C476 * C50758) *
                 C51084 +
             (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                 C51085 +
             (C479 * C49763 - (C478 * C51025 + C477 * C49770) + C480 * C50758) *
                 C8156) *
                C51055 +
            ((C4903 - (C4904 + C4905) + C4906) * C51084 +
             (C4907 - (C4908 + C4909) + C4910) * C51085 +
             (C10448 - (C10449 + C10450) + C10451) * C8156) *
                C50949) *
               C50853) *
              C1283 +
          ((((C2818 - (C2817 + C2816) + C2819) * C51084 +
             (C2822 - (C2821 + C2820) + C2823) * C51085 +
             (C8606 - (C8605 + C8604) + C8607) * C8156) *
                C51055 +
            ((C2826 - (C2825 + C2824) + C2827) * C51084 +
             (C2830 - (C2829 + C2828) + C2831) * C51085 +
             (C8608 - (C8609 + C8610) + C8611) * C8156) *
                C50949) *
               C1643 +
           (((C4905 + C4904 - C4903 - C4906) * C51084 +
             (C4909 + C4908 - C4907 - C4910) * C51085 +
             (C10450 + C10449 - C10448 - C10451) * C8156) *
                C51055 +
            ((C4913 + C4912 - C4911 - C4914) * C51084 +
             (C4917 + C4916 - C4915 - C4918) * C51085 +
             (C2656 * C49770 + C2657 * C51025 -
              (C117 * C815 + C50911 * C828) * C49763 -
              (C117 * C827 + C50911 * C839) * C50758) *
                 C8156) *
                C50949) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C117 * C122 + C50911 * C129) * C696 +
                     (C117 * C130 + C50911 * C143) * C50753) *
                        C51084 +
                    (C171 * C696 + C172 * C50753) * C51085 +
                    (C173 * C696 + C174 * C50753) * C8156) *
                       C51055 +
                   ((C2967 + C2968) * C51084 + (C2969 + C2970) * C51085 +
                    (C8710 + C8711) * C8156) *
                       C50949) *
                      C1643 -
                  (((C8862 + C8863) * C8156 + (C3167 + C3168) * C51085 +
                    (C3193 + C3194) * C51084) *
                       C50949 +
                   ((C478 * C50753 + C477 * C696) * C8156 +
                    (C476 * C50753 + C475 * C696) * C51085 +
                    ((C117 * C441 + C50911 * C452) * C50753 +
                     (C117 * C435 + C50911 * C442) * C696) *
                        C51084) *
                       C51055) *
                      C50853) *
                     C51086 +
                 ((((C3194 + C3193) * C51084 + (C3168 + C3167) * C51085 +
                    (C8863 + C8862) * C8156) *
                       C51055 +
                   ((C3192 + C3191) * C51084 + (C3162 + C3161) * C51085 +
                    (C8864 + C8865) * C8156) *
                       C50949) *
                      C50853 -
                  (((C8712 + C8713) * C8156 + (C2974 + C2973) * C51085 +
                    (C2972 + C2971) * C51084) *
                       C50949 +
                   ((C8711 + C8710) * C8156 + (C2970 + C2969) * C51085 +
                    (C2968 + C2967) * C51084) *
                       C51055) *
                      C1643) *
                     C51073 +
                 (((C2985 * C51084 + C2986 * C51085 + (C8713 + C8712) * C8156) *
                       C51055 +
                   ((C2978 + C2977) * C51084 + (C2976 + C2975) * C51085 +
                    (C8714 + C8715) * C8156) *
                       C50949) *
                      C1643 -
                  ((((C117 * C4204 + C50911 * C4205) * C50753 +
                     (C117 * C4202 + C50911 * C4203) * C696) *
                        C8156 +
                    (C3198 + C3197) * C51085 + (C3196 + C3195) * C51084) *
                       C50949 +
                   ((C8865 + C8864) * C8156 + C3181 * C51085 + C3199 * C51084) *
                       C51055) *
                      C50853) *
                     C1390)) /
               (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C117 * C122 + C50911 * C129) * C696 +
                     (C117 * C130 + C50911 * C143) * C50753) *
                        C51084 +
                    (C171 * C696 + C172 * C50753) * C51085 +
                    (C173 * C696 + C174 * C50753) * C8156) *
                       C51055 +
                   ((C2967 + C2968) * C51084 + (C2969 + C2970) * C51085 +
                    (C8710 + C8711) * C8156) *
                       C50949) *
                      C51087 -
                  (((C8862 + C8863) * C8156 + (C3167 + C3168) * C51085 +
                    (C3193 + C3194) * C51084) *
                       C50949 +
                   ((C478 * C50753 + C477 * C696) * C8156 +
                    (C476 * C50753 + C475 * C696) * C51085 +
                    ((C117 * C441 + C50911 * C452) * C50753 +
                     (C117 * C435 + C50911 * C442) * C696) *
                        C51084) *
                       C51055) *
                      C51076 +
                  ((((C117 * C944 + C50911 * C949) * C696 +
                     (C117 * C950 + C50911 * C959) * C50753) *
                        C51084 +
                    (C977 * C696 + C978 * C50753) * C51085 +
                    (C979 * C696 + C980 * C50753) * C8156) *
                       C51055 +
                   ((C3542 + C3543) * C51084 + (C3530 + C3531) * C51085 +
                    (C9164 + C9165) * C8156) *
                       C50949) *
                      C1875) *
                     C1283 +
                 ((((C3194 + C3193) * C51084 + (C3168 + C3167) * C51085 +
                    (C8863 + C8862) * C8156) *
                       C51055 +
                   ((C3192 + C3191) * C51084 + (C3162 + C3161) * C51085 +
                    (C8864 + C8865) * C8156) *
                       C50949) *
                      C51076 -
                  (((C8712 + C8713) * C8156 + (C2974 + C2973) * C51085 +
                    (C2972 + C2971) * C51084) *
                       C50949 +
                   ((C8711 + C8710) * C8156 + (C2970 + C2969) * C51085 +
                    (C2968 + C2967) * C51084) *
                       C51055) *
                      C51087 -
                  ((((C117 * C3355 + C50911 * C3358) * C50753 +
                     (C117 * C3349 + C50911 * C3354) * C696) *
                        C8156 +
                    (C3537 + C3536) * C51085 + (C3545 + C3544) * C51084) *
                       C50949 +
                   ((C9165 + C9164) * C8156 + (C3531 + C3530) * C51085 +
                    (C3543 + C3542) * C51084) *
                       C51055) *
                      C1875) *
                     C50829)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C51084 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C51085 +
            (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                C8156) *
               C51055 +
           ((C2816 + C2817 - C2818 - C2819) * C51084 +
            (C2820 + C2821 - C2822 - C2823) * C51085 +
            (C8604 + C8605 - C8606 - C8607) * C8156) *
               C50949) *
              C50841 * C582 +
          (((C2818 - (C2817 + C2816) + C2819) * C51084 +
            (C2822 - (C2821 + C2820) + C2823) * C51085 +
            (C8606 - (C8605 + C8604) + C8607) * C8156) *
               C51055 +
           ((C2826 - (C2825 + C2824) + C2827) * C51084 +
            (C2830 - (C2829 + C2828) + C2831) * C51085 +
            (C8608 - (C8609 + C8610) + C8611) * C8156) *
               C50949) *
              C50841 * C583 +
          ((C2856 * C51084 + C2857 * C51085 +
            (C8610 + C8609 - C8608 - C8611) * C8156) *
               C51055 +
           ((C2855 + C2854 - C2832 - C2837) * C51084 +
            (C2840 + C2839 - C2838 - C2841) * C51085 +
            (C2494 * C49770 + C2495 * C51025 -
             (C117 * C697 + C50911 * C702) * C49763 -
             (C117 * C701 + C50911 * C709) * C50758) *
                C8156) *
               C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C118 +
            (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C51084 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C51085 +
           (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C8156) *
              C51055 +
          ((C2488 * C118 + C2489 * C106 - C327 * C119 - C328 * C107 +
            C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
               C51084 +
           (C327 * C118 + C328 * C106 - C329 * C119 - C330 * C107 +
            C331 * C120 + C332 * C108 - C333 * C121 - C334 * C109) *
               C51085 +
           (C329 * C118 + C330 * C106 - C331 * C119 - C332 * C107 +
            C333 * C120 + C334 * C108 - (C117 * C291 + C50911 * C302) * C121 -
            (C117 * C303 + C50911 * C309) * C109) *
               C8156) *
              C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C51084 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C51085 +
            (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                C8156) *
               C51055 +
           ((C2816 + C2817 - C2818 - C2819) * C51084 +
            (C2820 + C2821 - C2822 - C2823) * C51085 +
            (C8604 + C8605 - C8606 - C8607) * C8156) *
               C50949) *
              C941 +
          (((C475 * C49763 -
             ((C117 * C441 + C50911 * C452) * C51025 +
              (C117 * C435 + C50911 * C442) * C49770) +
             C476 * C50758) *
                C51084 +
            (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                C51085 +
            (C479 * C49763 - (C478 * C51025 + C477 * C49770) + C480 * C50758) *
                C8156) *
               C51055 +
           ((C4903 - (C4904 + C4905) + C4906) * C51084 +
            (C4907 - (C4908 + C4909) + C4910) * C51085 +
            (C1544 * C49763 - (C1543 * C51025 + C1542 * C49770) +
             C1545 * C50758) *
                C8156) *
               C50949) *
              C942 +
          ((((C117 * C944 + C50911 * C949) * C49770 +
             (C117 * C950 + C50911 * C959) * C51025 - C977 * C49763 -
             C978 * C50758) *
                C51084 +
            (C977 * C49770 + C978 * C51025 - C979 * C49763 - C980 * C50758) *
                C51085 +
            (C979 * C49770 + C980 * C51025 - C981 * C49763 - C982 * C50758) *
                C8156) *
               C51055 +
           ((C3538 * C49770 + C3539 * C51025 - C3368 * C49763 -
             C3369 * C50758) *
                C51084 +
            (C3368 * C49770 + C3369 * C51025 - C9016 * C49763 -
             C9017 * C50758) *
                C51085 +
            (C9016 * C49770 + C9017 * C51025 -
             (C117 * C1080 + C50911 * C1085) * C49763 -
             (C117 * C1084 + C50911 * C1092) * C50758) *
                C8156) *
               C50949) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C122 + C50911 * C129) * C696 +
                    (C117 * C130 + C50911 * C143) * C50753) *
                       C51084 +
                   (C171 * C696 + C172 * C50753) * C51085 +
                   (C173 * C696 + C174 * C50753) * C8156) *
                      C51055 +
                  ((C2967 + C2968) * C51084 + (C2969 + C2970) * C51085 +
                   (C8710 + C8711) * C8156) *
                      C50949) *
                     C50841 * C692 -
                 (((C8712 + C8713) * C8156 + (C2974 + C2973) * C51085 +
                   (C2972 + C2971) * C51084) *
                      C50949 +
                  ((C8711 + C8710) * C8156 + (C2970 + C2969) * C51085 +
                   (C2968 + C2967) * C51084) *
                      C51055) *
                     C50841 * C693 +
                 ((C2985 * C51084 + C2986 * C51085 + (C8713 + C8712) * C8156) *
                      C51055 +
                  ((C2978 + C2977) * C51084 + (C2976 + C2975) * C51085 +
                   (C8714 + C8715) * C8156) *
                      C50949) *
                     C50841 * C694 -
                 ((((C117 * C2811 + C50911 * C2814) * C50753 +
                    (C117 * C2805 + C50911 * C2810) * C696) *
                       C8156 +
                   (C2984 + C2983) * C51085 + (C2996 + C2995) * C51084) *
                      C50949 +
                  ((C8715 + C8714) * C8156 + C2987 * C51085 + C2988 * C51084) *
                      C51055) *
                     C50841 * C695)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C122 + C50911 * C129) * C283 +
                    (C117 * C130 + C50911 * C143) * C278 - C171 * C284 -
                    C172 * C279 + C173 * C285 + C174 * C280) *
                       C51084 +
                   (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                    C175 * C285 + C176 * C280) *
                       C51085 +
                   (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                    C177 * C285 + C178 * C280) *
                       C8156) *
                      C51055 +
                  ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C51084 +
                   (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C51085 +
                   (C8306 + C8307 - C8308 - C8309 + C8310 + C8311) * C8156) *
                      C50949) *
                     C50841 * C51040 +
                 (((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C51084 +
                   (C2462 - (C2461 + C2460) + C2463 - C2464 - C2465) * C51085 +
                   (C8308 - (C8307 + C8306) + C8309 - C8310 - C8311) * C8156) *
                      C51055 +
                  ((C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C51084 +
                   (C2476 - (C2475 + C2474) + C2477 - C2478 - C2479) * C51085 +
                   (C624 * C284 - (C623 * C278 + C622 * C283) + C625 * C279 -
                    (C117 * C591 + C50911 * C600) * C285 -
                    (C117 * C601 + C50911 * C606) * C280) *
                       C8156) *
                      C50949) *
                     C50841 * C50829)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((((C117 * C122 + C50911 * C129) * C696 +
                     (C117 * C130 + C50911 * C143) * C50753) *
                        C51084 +
                    (C171 * C696 + C172 * C50753) * C51085 +
                    (C173 * C696 + C174 * C50753) * C8156) *
                       C51055 +
                   ((C2967 + C2968) * C51084 + (C2969 + C2970) * C51085 +
                    (C8710 + C8711) * C8156) *
                       C50949) *
                      C941 -
                  (((C8862 + C8863) * C8156 + (C3167 + C3168) * C51085 +
                    (C3193 + C3194) * C51084) *
                       C50949 +
                   ((C478 * C50753 + C477 * C696) * C8156 +
                    (C476 * C50753 + C475 * C696) * C51085 +
                    ((C117 * C441 + C50911 * C452) * C50753 +
                     (C117 * C435 + C50911 * C442) * C696) *
                        C51084) *
                       C51055) *
                      C942 +
                  ((((C117 * C944 + C50911 * C949) * C696 +
                     (C117 * C950 + C50911 * C959) * C50753) *
                        C51084 +
                    (C977 * C696 + C978 * C50753) * C51085 +
                    (C979 * C696 + C980 * C50753) * C8156) *
                       C51055 +
                   ((C3542 + C3543) * C51084 + (C3530 + C3531) * C51085 +
                    (C9164 + C9165) * C8156) *
                       C50949) *
                      C943) *
                     C51040 +
                 ((((C3194 + C3193) * C51084 + (C3168 + C3167) * C51085 +
                    (C8863 + C8862) * C8156) *
                       C51055 +
                   ((C3192 + C3191) * C51084 + (C3162 + C3161) * C51085 +
                    (C8864 + C8865) * C8156) *
                       C50949) *
                      C942 -
                  (((C8712 + C8713) * C8156 + (C2974 + C2973) * C51085 +
                    (C2972 + C2971) * C51084) *
                       C50949 +
                   ((C8711 + C8710) * C8156 + (C2970 + C2969) * C51085 +
                    (C2968 + C2967) * C51084) *
                       C51055) *
                      C941 -
                  ((((C117 * C3355 + C50911 * C3358) * C50753 +
                     (C117 * C3349 + C50911 * C3354) * C696) *
                        C8156 +
                    (C3537 + C3536) * C51085 + (C3545 + C3544) * C51084) *
                       C50949 +
                   ((C9165 + C9164) * C8156 + (C3531 + C3530) * C51085 +
                    (C3543 + C3542) * C51084) *
                       C51055) *
                      C943) *
                     C50829)) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((((C117 * C122 + C50911 * C129) * C696 +
                     (C117 * C130 + C50911 * C143) * C50753) *
                        C51084 +
                    (C171 * C696 + C172 * C50753) * C51085 +
                    (C173 * C696 + C174 * C50753) * C8156) *
                       C51055 +
                   ((C2967 + C2968) * C51084 + (C2969 + C2970) * C51085 +
                    (C8710 + C8711) * C8156) *
                       C50949) *
                      C51041 -
                  (((C8862 + C8863) * C8156 + (C3167 + C3168) * C51085 +
                    (C3193 + C3194) * C51084) *
                       C50949 +
                   ((C478 * C50753 + C477 * C696) * C8156 +
                    (C476 * C50753 + C475 * C696) * C51085 +
                    ((C117 * C441 + C50911 * C452) * C50753 +
                     (C117 * C435 + C50911 * C442) * C696) *
                        C51084) *
                       C51055) *
                      C50853) *
                     C582 +
                 ((((C3194 + C3193) * C51084 + (C3168 + C3167) * C51085 +
                    (C8863 + C8862) * C8156) *
                       C51055 +
                   ((C3192 + C3191) * C51084 + (C3162 + C3161) * C51085 +
                    (C8864 + C8865) * C8156) *
                       C50949) *
                      C50853 -
                  (((C8712 + C8713) * C8156 + (C2974 + C2973) * C51085 +
                    (C2972 + C2971) * C51084) *
                       C50949 +
                   ((C8711 + C8710) * C8156 + (C2970 + C2969) * C51085 +
                    (C2968 + C2967) * C51084) *
                       C51055) *
                      C51041) *
                     C583 +
                 (((C2985 * C51084 + C2986 * C51085 + (C8713 + C8712) * C8156) *
                       C51055 +
                   ((C2978 + C2977) * C51084 + (C2976 + C2975) * C51085 +
                    (C8714 + C8715) * C8156) *
                       C50949) *
                      C51041 -
                  ((((C117 * C4204 + C50911 * C4205) * C50753 +
                     (C117 * C4202 + C50911 * C4203) * C696) *
                        C8156 +
                    (C3198 + C3197) * C51085 + (C3196 + C3195) * C51084) *
                       C50949 +
                   ((C8865 + C8864) * C8156 + C3181 * C51085 + C3199 * C51084) *
                       C51055) *
                      C50853) *
                     C584)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C122 + C50911 * C129) * C283 +
                    (C117 * C130 + C50911 * C143) * C278 - C171 * C284 -
                    C172 * C279 + C173 * C285 + C174 * C280) *
                       C51084 +
                   (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                    C175 * C285 + C176 * C280) *
                       C51085 +
                   (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                    C177 * C285 + C178 * C280) *
                       C8156) *
                      C51055 +
                  ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C51084 +
                   (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C51085 +
                   (C8306 + C8307 - C8308 - C8309 + C8310 + C8311) * C8156) *
                      C50949) *
                     C51041 +
                 (((C475 * C284 -
                    ((C117 * C441 + C50911 * C452) * C278 +
                     (C117 * C435 + C50911 * C442) * C283) +
                    C476 * C279 - C477 * C285 - C478 * C280) *
                       C51084 +
                   (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
                    C479 * C285 - C480 * C280) *
                       C51085 +
                   (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
                    C481 * C285 - C482 * C280) *
                       C8156) *
                      C51055 +
                  ((C1540 * C284 - (C3184 * C278 + C3185 * C283) +
                    C1541 * C279 - C1542 * C285 - C1543 * C280) *
                       C51084 +
                   (C1542 * C284 - (C1541 * C278 + C1540 * C283) +
                    C1543 * C279 - C1544 * C285 - C1545 * C280) *
                       C51085 +
                   (C1544 * C284 - (C1543 * C278 + C1542 * C283) +
                    C1545 * C279 - (C117 * C1523 + C50911 * C1524) * C285 -
                    (C117 * C1525 + C50911 * C1526) * C280) *
                       C8156) *
                      C50949) *
                     C50853) *
                C50815) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C122 + C50911 * C129) * C696 +
                    (C117 * C130 + C50911 * C143) * C50753) *
                       C51084 +
                   (C171 * C696 + C172 * C50753) * C51085 +
                   (C173 * C696 + C174 * C50753) * C8156) *
                      C51055 +
                  ((C2967 + C2968) * C51084 + (C2969 + C2970) * C51085 +
                   (C8710 + C8711) * C8156) *
                      C50949) *
                     C1162 -
                 (((C8862 + C8863) * C8156 + (C3167 + C3168) * C51085 +
                   (C3193 + C3194) * C51084) *
                      C50949 +
                  ((C478 * C50753 + C477 * C696) * C8156 +
                   (C476 * C50753 + C475 * C696) * C51085 +
                   ((C117 * C441 + C50911 * C452) * C50753 +
                    (C117 * C435 + C50911 * C442) * C696) *
                       C51084) *
                      C51055) *
                     C1163 +
                 ((((C117 * C944 + C50911 * C949) * C696 +
                    (C117 * C950 + C50911 * C959) * C50753) *
                       C51084 +
                   (C977 * C696 + C978 * C50753) * C51085 +
                   (C979 * C696 + C980 * C50753) * C8156) *
                      C51055 +
                  ((C3542 + C3543) * C51084 + (C3530 + C3531) * C51085 +
                   (C9164 + C9165) * C8156) *
                      C50949) *
                     C1164 -
                 ((((C117 * C7064 + C50911 * C7065) * C50753 +
                    (C117 * C7062 + C50911 * C7063) * C696) *
                       C8156 +
                   ((C117 * C3651 + C50911 * C3657) * C50753 +
                    (C117 * C3645 + C50911 * C3652) * C696) *
                       C51085 +
                   ((C117 * C3653 + C50911 * C3658) * C50753 +
                    (C117 * C3646 + C50911 * C3654) * C696) *
                       C51084) *
                      C50949 +
                  (((C117 * C1172 + C50911 * C1179) * C50753 +
                    (C117 * C1167 + C50911 * C1173) * C696) *
                       C8156 +
                   ((C117 * C1174 + C50911 * C1180) * C50753 +
                    (C117 * C1168 + C50911 * C1175) * C696) *
                       C51085 +
                   ((C117 * C1176 + C50911 * C1181) * C50753 +
                    (C117 * C1169 + C50911 * C1177) * C696) *
                       C51084) *
                      C51055) *
                     C1165) *
                C50815) /
                   (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C122 + C50911 * C129) * C1285 +
                    (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
                    C172 * C51067 + C173 * C1287 + C174 * C1282) *
                       C51084 +
                   (C171 * C1285 + C172 * C51083 - C173 * C1286 -
                    C174 * C51067 + C175 * C1287 + C176 * C1282) *
                       C51085 +
                   (C173 * C1285 + C174 * C51083 - C175 * C1286 -
                    C176 * C51067 + C177 * C1287 + C178 * C1282) *
                       C8156) *
                      C51055 +
                  ((C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C51084 +
                   (C3812 + C3813 - C3814 - C3815 + C3816 + C3817) * C51085 +
                   (C9410 + C9411 - C9412 - C9413 + C9414 + C9415) * C8156) *
                      C50949) *
                     C1643 +
                 (((C475 * C1286 -
                    ((C117 * C441 + C50911 * C452) * C51083 +
                     (C117 * C435 + C50911 * C442) * C1285) +
                    C476 * C51067 - C477 * C1287 - C478 * C1282) *
                       C51084 +
                   (C477 * C1286 - (C476 * C51083 + C475 * C1285) +
                    C478 * C51067 - C479 * C1287 - C480 * C1282) *
                       C51085 +
                   (C479 * C1286 - (C478 * C51083 + C477 * C1285) +
                    C480 * C51067 - C481 * C1287 - C482 * C1282) *
                       C8156) *
                      C51055 +
                  ((C1540 * C1286 - (C3184 * C51083 + C3185 * C1285) +
                    C1541 * C51067 - C1542 * C1287 - C1543 * C1282) *
                       C51084 +
                   (C1542 * C1286 - (C1541 * C51083 + C1540 * C1285) +
                    C1543 * C51067 - C1544 * C1287 - C1545 * C1282) *
                       C51085 +
                   (C1544 * C1286 - (C1543 * C51083 + C1542 * C1285) +
                    C1545 * C51067 - (C117 * C1523 + C50911 * C1524) * C1287 -
                    (C117 * C1525 + C50911 * C1526) * C1282) *
                       C8156) *
                      C50949) *
                     C50853) *
                C50815) /
               (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C1391 +
              (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
              C172 * C50758) *
                 C51084 +
             (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                 C51085 +
             (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                 C8156) *
                C51055 +
            ((C3976 + C3977 - C3978 - C3979) * C51084 +
             (C3980 + C3981 - C3982 - C3983) * C51085 +
             (C9562 + C9563 - C9564 - C9565) * C8156) *
                C50949) *
               C1643 +
           (((C475 * C1392 -
              ((C117 * C441 + C50911 * C452) * C1386 +
               (C117 * C435 + C50911 * C442) * C1391) +
              C476 * C50758) *
                 C51084 +
             (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                 C51085 +
             (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                 C8156) *
                C51055 +
            ((C4207 - (C4208 + C4209) + C4210) * C51084 +
             (C4211 - (C4212 + C4213) + C4214) * C51085 +
             (C9764 - (C9765 + C9766) + C9767) * C8156) *
                C50949) *
               C50853) *
              C51040 +
          ((((C3978 - (C3977 + C3976) + C3979) * C51084 +
             (C3982 - (C3981 + C3980) + C3983) * C51085 +
             (C9564 - (C9563 + C9562) + C9565) * C8156) *
                C51055 +
            ((C3986 - (C3985 + C3984) + C3987) * C51084 +
             (C3990 - (C3989 + C3988) + C3991) * C51085 +
             (C9566 - (C9567 + C9568) + C9569) * C8156) *
                C50949) *
               C1643 +
           (((C4209 + C4208 - C4207 - C4210) * C51084 +
             (C4213 + C4212 - C4211 - C4214) * C51085 +
             (C9766 + C9765 - C9764 - C9767) * C8156) *
                C51055 +
            ((C4217 + C4216 - C4215 - C4218) * C51084 +
             (C4221 + C4220 - C4219 - C4222) * C51085 +
             (C2656 * C1391 + C2657 * C1386 -
              (C117 * C815 + C50911 * C828) * C1392 -
              (C117 * C827 + C50911 * C839) * C50758) *
                 C8156) *
                C50949) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C51084 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C51085 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                C8156) *
               C51055 +
           ((C3976 + C3977 - C3978 - C3979) * C51084 +
            (C3980 + C3981 - C3982 - C3983) * C51085 +
            (C9562 + C9563 - C9564 - C9565) * C8156) *
               C50949) *
              C51087 +
          (((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C51084 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                C51085 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                C8156) *
               C51055 +
           ((C4207 - (C4208 + C4209) + C4210) * C51084 +
            (C4211 - (C4212 + C4213) + C4214) * C51085 +
            (C9764 - (C9765 + C9766) + C9767) * C8156) *
               C50949) *
              C51076 +
          ((((C117 * C944 + C50911 * C949) * C1391 +
             (C117 * C950 + C50911 * C959) * C1386 - C977 * C1392 -
             C978 * C50758) *
                C51084 +
            (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50758) *
                C51085 +
            (C979 * C1391 + C980 * C1386 - C981 * C1392 - C982 * C50758) *
                C8156) *
               C51055 +
           ((C3538 * C1391 + C3539 * C1386 - C3368 * C1392 - C3369 * C50758) *
                C51084 +
            (C3368 * C1391 + C3369 * C1386 - C9016 * C1392 - C9017 * C50758) *
                C51085 +
            (C9016 * C1391 + C9017 * C1386 -
             (C117 * C1080 + C50911 * C1085) * C1392 -
             (C117 * C1084 + C50911 * C1092) * C50758) *
                C8156) *
               C50949) *
              C1875) *
         C50815) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C118 +
            (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C51084 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C51085 +
           (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C8156) *
              C51055 +
          ((C2488 * C118 + C2489 * C106 - C327 * C119 - C328 * C107 +
            C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
               C51084 +
           (C327 * C118 + C328 * C106 - C329 * C119 - C330 * C107 +
            C331 * C120 + C332 * C108 - C333 * C121 - C334 * C109) *
               C51085 +
           (C329 * C118 + C330 * C106 - C331 * C119 - C332 * C107 +
            C333 * C120 + C334 * C108 - (C117 * C291 + C50911 * C302) * C121 -
            (C117 * C303 + C50911 * C309) * C109) *
               C8156) *
              C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C51084 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C51085 +
            (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                C8156) *
               C51055 +
           ((C2816 + C2817 - C2818 - C2819) * C51084 +
            (C2820 + C2821 - C2822 - C2823) * C51085 +
            (C8604 + C8605 - C8606 - C8607) * C8156) *
               C50949) *
              C50841 * C582 +
          (((C2818 - (C2817 + C2816) + C2819) * C51084 +
            (C2822 - (C2821 + C2820) + C2823) * C51085 +
            (C8606 - (C8605 + C8604) + C8607) * C8156) *
               C51055 +
           ((C2826 - (C2825 + C2824) + C2827) * C51084 +
            (C2830 - (C2829 + C2828) + C2831) * C51085 +
            (C8608 - (C8609 + C8610) + C8611) * C8156) *
               C50949) *
              C50841 * C583 +
          ((C2856 * C51084 + C2857 * C51085 +
            (C8610 + C8609 - C8608 - C8611) * C8156) *
               C51055 +
           ((C2855 + C2854 - C2832 - C2837) * C51084 +
            (C2840 + C2839 - C2838 - C2841) * C51085 +
            (C2494 * C49770 + C2495 * C51025 -
             (C117 * C697 + C50911 * C702) * C49763 -
             (C117 * C701 + C50911 * C709) * C50758) *
                C8156) *
               C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[13] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50911 * C129) * C283 +
                     (C117 * C130 + C50911 * C143) * C278 - C171 * C284 -
                     C172 * C279 + C173 * C285 + C174 * C280) *
                        C51084 +
                    (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                     C175 * C285 + C176 * C280) *
                        C51085 +
                    (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                     C177 * C285 + C178 * C280) *
                        C8156) *
                       C51055 +
                   ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C51084 +
                    (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C51085 +
                    (C8306 + C8307 - C8308 - C8309 + C8310 + C8311) * C8156) *
                       C50949) *
                      C50841 * C51040 +
                  (((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C51084 +
                    (C2462 - (C2461 + C2460) + C2463 - C2464 - C2465) * C51085 +
                    (C8308 - (C8307 + C8306) + C8309 - C8310 - C8311) * C8156) *
                       C51055 +
                   ((C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C51084 +
                    (C2476 - (C2475 + C2474) + C2477 - C2478 - C2479) * C51085 +
                    (C624 * C284 - (C623 * C278 + C622 * C283) + C625 * C279 -
                     (C117 * C591 + C50911 * C600) * C285 -
                     (C117 * C601 + C50911 * C606) * C280) *
                        C8156) *
                       C50949) *
                      C50841 * C50829)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50911 * C129) * C696 +
                     (C117 * C130 + C50911 * C143) * C50753) *
                        C51084 +
                    (C171 * C696 + C172 * C50753) * C51085 +
                    (C173 * C696 + C174 * C50753) * C8156) *
                       C51055 +
                   ((C2967 + C2968) * C51084 + (C2969 + C2970) * C51085 +
                    (C8710 + C8711) * C8156) *
                       C50949) *
                      C50841 * C692 -
                  (((C8712 + C8713) * C8156 + (C2974 + C2973) * C51085 +
                    (C2972 + C2971) * C51084) *
                       C50949 +
                   ((C8711 + C8710) * C8156 + (C2970 + C2969) * C51085 +
                    (C2968 + C2967) * C51084) *
                       C51055) *
                      C50841 * C693 +
                  ((C2985 * C51084 + C2986 * C51085 + (C8713 + C8712) * C8156) *
                       C51055 +
                   ((C2978 + C2977) * C51084 + (C2976 + C2975) * C51085 +
                    (C8714 + C8715) * C8156) *
                       C50949) *
                      C50841 * C694 -
                  ((((C117 * C2811 + C50911 * C2814) * C50753 +
                     (C117 * C2805 + C50911 * C2810) * C696) *
                        C8156 +
                    (C2984 + C2983) * C51085 + (C2996 + C2995) * C51084) *
                       C50949 +
                   ((C8715 + C8714) * C8156 + C2987 * C51085 + C2988 * C51084) *
                       C51055) *
                      C50841 * C695)) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C51084 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C51085 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C8156) *
               C51055 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C51084 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C51085 +
            (C8306 + C8307 - C8308 - C8309 + C8310 + C8311) * C8156) *
               C50949) *
              C51041 +
          (((C475 * C284 -
             ((C117 * C441 + C50911 * C452) * C278 +
              (C117 * C435 + C50911 * C442) * C283) +
             C476 * C279 - C477 * C285 - C478 * C280) *
                C51084 +
            (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
             C479 * C285 - C480 * C280) *
                C51085 +
            (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
             C481 * C285 - C482 * C280) *
                C8156) *
               C51055 +
           ((C1540 * C284 - (C3184 * C278 + C3185 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C51084 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C51085 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50911 * C1524) * C285 -
             (C117 * C1525 + C50911 * C1526) * C280) *
                C8156) *
               C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C51084 +
             (C171 * C696 + C172 * C50753) * C51085 +
             (C173 * C696 + C174 * C50753) * C8156) *
                C51055 +
            ((C2967 + C2968) * C51084 + (C2969 + C2970) * C51085 +
             (C8710 + C8711) * C8156) *
                C50949) *
               C51041 -
           (((C8862 + C8863) * C8156 + (C3167 + C3168) * C51085 +
             (C3193 + C3194) * C51084) *
                C50949 +
            ((C478 * C50753 + C477 * C696) * C8156 +
             (C476 * C50753 + C475 * C696) * C51085 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C51084) *
                C51055) *
               C50853) *
              C582 +
          ((((C3194 + C3193) * C51084 + (C3168 + C3167) * C51085 +
             (C8863 + C8862) * C8156) *
                C51055 +
            ((C3192 + C3191) * C51084 + (C3162 + C3161) * C51085 +
             (C8864 + C8865) * C8156) *
                C50949) *
               C50853 -
           (((C8712 + C8713) * C8156 + (C2974 + C2973) * C51085 +
             (C2972 + C2971) * C51084) *
                C50949 +
            ((C8711 + C8710) * C8156 + (C2970 + C2969) * C51085 +
             (C2968 + C2967) * C51084) *
                C51055) *
               C51041) *
              C583 +
          (((C2985 * C51084 + C2986 * C51085 + (C8713 + C8712) * C8156) *
                C51055 +
            ((C2978 + C2977) * C51084 + (C2976 + C2975) * C51085 +
             (C8714 + C8715) * C8156) *
                C50949) *
               C51041 -
           ((((C117 * C4204 + C50911 * C4205) * C50753 +
              (C117 * C4202 + C50911 * C4203) * C696) *
                 C8156 +
             (C3198 + C3197) * C51085 + (C3196 + C3195) * C51084) *
                C50949 +
            ((C8865 + C8864) * C8156 + C3181 * C51085 + C3199 * C51084) *
                C51055) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C1285 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C51083 -
             (C10878 + C10879) * C1286 - (C10880 + C10881) * C51067 +
             C10894 * C1287 + C10895 * C1282) *
                C2300 +
            ((C10879 + C10878) * C1285 + (C10881 + C10880) * C51083 -
             (C10883 + C10882) * C1286 - (C10885 + C10884) * C51067 +
             (C10887 + C10886) * C1287 + (C10889 + C10888) * C1282) *
                C50778) *
               C51055 +
           (((C13914 + C13915) * C1285 + (C13916 + C13917) * C51083 -
             C13908 * C1286 - C13909 * C51067 + C13910 * C1287 +
             C13911 * C1282) *
                C2300 +
            (C13912 * C1285 + C13913 * C51083 - C11080 * C1286 -
             C11081 * C51067 + (C11077 + C11076) * C1287 +
             (C11079 + C11078) * C1282) *
                C50778) *
               C50949) *
              C50841 * C1283 +
          (((C13912 * C1286 -
             ((C13917 + C13916) * C51083 + (C13915 + C13914) * C1285) +
             C13913 * C51067 - C11080 * C1287 - C11081 * C1282) *
                C2300 +
            (C13910 * C1286 - (C13909 * C51083 + C13908 * C1285) +
             C13911 * C51067 - (C11076 + C11077) * C1287 -
             (C11078 + C11079) * C1282) *
                C50778) *
               C51055 +
           ((C14306 * C1286 -
             ((C14326 + C14327) * C51083 + (C14328 + C14329) * C1285) +
             C14315 * C51067 - (C11432 + C11433) * C1287 -
             (C11434 + C11435) * C1282) *
                C2300 +
            ((C11433 + C11432) * C1286 - (C14316 * C51083 + C14317 * C1285) +
             (C11435 + C11434) * C51067 -
             (C10844 * C815 + C50975 * C828 + C10843 * C590 + C51056 * C598) *
                 C1287 -
             (C10844 * C827 + C50975 * C839 + C10843 * C599 + C51056 * C605) *
                 C1282) *
                C50778) *
               C50949) *
              C50841 * C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C1391 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C1386 -
             (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
                C2300 +
            ((C10879 + C10878) * C1391 + (C10881 + C10880) * C1386 -
             (C10883 + C10882) * C1392 - (C10885 + C10884) * C50758) *
                C50778) *
               C51055 +
           (((C13914 + C13915) * C1391 + (C13916 + C13917) * C1386 -
             C13908 * C1392 - C13909 * C50758) *
                C2300 +
            (C13912 * C1391 + C13913 * C1386 - C11080 * C1392 -
             C11081 * C50758) *
                C50778) *
               C50949) *
              C50841 * C51086 +
          (((C13912 * C1392 -
             ((C13917 + C13916) * C1386 + (C13915 + C13914) * C1391) +
             C13913 * C50758) *
                C2300 +
            (C13910 * C1392 - (C13909 * C1386 + C13908 * C1391) +
             C13911 * C50758) *
                C50778) *
               C51055 +
           ((C14306 * C1392 -
             ((C14326 + C14327) * C1386 + (C14328 + C14329) * C1391) +
             C14315 * C50758) *
                C2300 +
            ((C11433 + C11432) * C1392 - (C14316 * C1386 + C14317 * C1391) +
             (C11435 + C11434) * C50758) *
                C50778) *
               C50949) *
              C50841 * C51073 +
          ((((C14329 + C14328) * C1391 + (C14327 + C14326) * C1386 -
             C14317 * C1392 - C14316 * C50758) *
                C2300 +
            (C14306 * C1391 + C14315 * C1386 - (C11432 + C11433) * C1392 -
             (C11434 + C11435) * C50758) *
                C50778) *
               C51055 +
           (((C14472 + C14473) * C1391 + (C14474 + C14475) * C1386 -
             (C14330 + C14331) * C1392 - (C14332 + C14333) * C50758) *
                C2300 +
            ((C14331 + C14330) * C1391 + (C14333 + C14332) * C1386 -
             (C10844 * C4202 + C50975 * C4203 + C10843 * C698 + C51056 * C704) *
                 C1392 -
             (C10844 * C4204 + C50975 * C4205 + C10843 * C703 + C51056 * C710) *
                 C50758) *
                C50778) *
               C50949) *
              C50841 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C1391 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C1386 -
              (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
                 C2300 +
             ((C10879 + C10878) * C1391 + (C10881 + C10880) * C1386 -
              (C10883 + C10882) * C1392 - (C10885 + C10884) * C50758) *
                 C50778) *
                C51055 +
            (((C13914 + C13915) * C1391 + (C13916 + C13917) * C1386 -
              C13908 * C1392 - C13909 * C50758) *
                 C2300 +
             (C13912 * C1391 + C13913 * C1386 - C11080 * C1392 -
              C11081 * C50758) *
                 C50778) *
                C50949) *
               C51041 +
           ((((C11252 + C11253) * C1392 -
              ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                   C1386 +
               (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                   C1391) +
              (C11254 + C11255) * C50758) *
                 C2300 +
             ((C11257 + C11256) * C1392 -
              ((C11255 + C11254) * C1386 + (C11253 + C11252) * C1391) +
              (C11259 + C11258) * C50758) *
                 C50778) *
                C51055 +
            ((C15894 * C1392 -
              ((C14694 + C14695) * C1386 + (C14696 + C14697) * C1391) +
              C15895 * C50758) *
                 C2300 +
             ((C12601 + C12600) * C1392 - (C15896 * C1386 + C15897 * C1391) +
              (C12603 + C12602) * C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C1283 +
          ((((C13912 * C1392 -
              ((C13917 + C13916) * C1386 + (C13915 + C13914) * C1391) +
              C13913 * C50758) *
                 C2300 +
             (C13910 * C1392 - (C13909 * C1386 + C13908 * C1391) +
              C13911 * C50758) *
                 C50778) *
                C51055 +
            ((C14306 * C1392 -
              ((C14326 + C14327) * C1386 + (C14328 + C14329) * C1391) +
              C14315 * C50758) *
                 C2300 +
             ((C11433 + C11432) * C1392 - (C14316 * C1386 + C14317 * C1391) +
              (C11435 + C11434) * C50758) *
                 C50778) *
                C50949) *
               C51041 +
           ((((C14697 + C14696) * C1391 + (C14695 + C14694) * C1386 -
              C15897 * C1392 - C15896 * C50758) *
                 C2300 +
             (C15894 * C1391 + C15895 * C1386 - (C12600 + C12601) * C1392 -
              (C12602 + C12603) * C50758) *
                 C50778) *
                C51055 +
            (((C14698 + C14699) * C1391 + (C14700 + C14701) * C1386 -
              (C14703 + C14702) * C1392 - (C14705 + C14704) * C50758) *
                 C2300 +
             ((C14702 + C14703) * C1391 + (C14704 + C14705) * C1386 -
              (C10844 * C3349 + C50975 * C3354 + C10843 * C816 +
               C51056 * C830) *
                  C1392 -
              (C10844 * C3355 + C50975 * C3358 + C10843 * C829 +
               C51056 * C840) *
                  C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C49770 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C51025 -
              (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
                 C2300 +
             ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51025 -
              (C10883 + C10882) * C49763 - (C10885 + C10884) * C50758) *
                 C50778) *
                C51055 +
            (((C13914 + C13915) * C49770 + (C13916 + C13917) * C51025 -
              C13908 * C49763 - C13909 * C50758) *
                 C2300 +
             (C13912 * C49770 + C13913 * C51025 - C11080 * C49763 -
              C11081 * C50758) *
                 C50778) *
                C50949) *
               C1643 +
           ((((C11252 + C11253) * C49763 -
              ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                   C51025 +
               (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                   C49770) +
              (C11254 + C11255) * C50758) *
                 C2300 +
             ((C11257 + C11256) * C49763 -
              ((C11255 + C11254) * C51025 + (C11253 + C11252) * C49770) +
              (C11259 + C11258) * C50758) *
                 C50778) *
                C51055 +
            ((C15894 * C49763 -
              ((C14694 + C14695) * C51025 + (C14696 + C14697) * C49770) +
              C15895 * C50758) *
                 C2300 +
             ((C12601 + C12600) * C49763 - (C15896 * C51025 + C15897 * C49770) +
              (C12603 + C12602) * C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C1283 +
          ((((C13912 * C49763 -
              ((C13917 + C13916) * C51025 + (C13915 + C13914) * C49770) +
              C13913 * C50758) *
                 C2300 +
             (C13910 * C49763 - (C13909 * C51025 + C13908 * C49770) +
              C13911 * C50758) *
                 C50778) *
                C51055 +
            ((C14306 * C49763 -
              ((C14326 + C14327) * C51025 + (C14328 + C14329) * C49770) +
              C14315 * C50758) *
                 C2300 +
             ((C11433 + C11432) * C49763 - (C14316 * C51025 + C14317 * C49770) +
              (C11435 + C11434) * C50758) *
                 C50778) *
                C50949) *
               C1643 +
           ((((C14697 + C14696) * C49770 + (C14695 + C14694) * C51025 -
              C15897 * C49763 - C15896 * C50758) *
                 C2300 +
             (C15894 * C49770 + C15895 * C51025 - (C12600 + C12601) * C49763 -
              (C12602 + C12603) * C50758) *
                 C50778) *
                C51055 +
            (((C14698 + C14699) * C49770 + (C14700 + C14701) * C51025 -
              (C14703 + C14702) * C49763 - (C14705 + C14704) * C50758) *
                 C2300 +
             ((C14702 + C14703) * C49770 + (C14704 + C14705) * C51025 -
              (C10844 * C3349 + C50975 * C3354 + C10843 * C816 +
               C51056 * C830) *
                  C49763 -
              (C10844 * C3355 + C50975 * C3358 + C10843 * C829 +
               C51056 * C840) *
                  C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C696 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C50753) *
                 C2300 +
             ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
                C51055 +
            (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C2300 +
             (C13912 * C696 + C13913 * C50753) * C50778) *
                C50949) *
               C1643 -
           (((C15896 * C50753 + C15897 * C696) * C50778 +
             ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C2300) *
                C50949 +
            (((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C50778 +
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C50753 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C696) *
                 C2300) *
                C51055) *
               C50853) *
              C51086 +
          (((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C2300 +
             (C15894 * C696 + C15895 * C50753) * C50778) *
                C51055 +
            (((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C2300 +
             ((C14702 + C14703) * C696 + (C14704 + C14705) * C50753) * C50778) *
                C50949) *
               C50853 -
           (((C14316 * C50753 + C14317 * C696) * C50778 +
             ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C2300) *
                C50949 +
            ((C13909 * C50753 + C13908 * C696) * C50778 +
             ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C2300) *
                C51055) *
               C1643) *
              C51073 +
          (((((C14329 + C14328) * C696 + (C14327 + C14326) * C50753) * C2300 +
             (C14306 * C696 + C14315 * C50753) * C50778) *
                C51055 +
            (((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C2300 +
             ((C14331 + C14330) * C696 + (C14333 + C14332) * C50753) * C50778) *
                C50949) *
               C1643 -
           ((((C10844 * C3519 + C50975 * C3523 + C10843 * C3151 +
               C51056 * C3157) *
                  C50753 +
              (C10844 * C3517 + C50975 * C3520 + C10843 * C3145 +
               C51056 * C3150) *
                  C696) *
                 C50778 +
             ((C10844 * C3521 + C50975 * C3524 + C10843 * C3149 +
               C51056 * C3156) *
                  C50753 +
              (C10844 * C3518 + C50975 * C3522 + C10843 * C3144 +
               C51056 * C3148) *
                  C696) *
                 C2300) *
                C50949 +
            (((C14705 + C14704) * C50753 + (C14703 + C14702) * C696) * C50778 +
             ((C14701 + C14700) * C50753 + (C14699 + C14698) * C696) * C2300) *
                C51055) *
               C50853) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C696 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C50753) *
                 C2300 +
             ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
                C51055 +
            (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C2300 +
             (C13912 * C696 + C13913 * C50753) * C50778) *
                C50949) *
               C51087 -
           (((C15896 * C50753 + C15897 * C696) * C50778 +
             ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C2300) *
                C50949 +
            (((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C50778 +
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C50753 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C696) *
                 C2300) *
                C51055) *
               C51076 +
           ((((C10843 * C944 + C51056 * C949 + C10844 * C1169 +
               C50975 * C1177) *
                  C696 +
              (C10843 * C950 + C51056 * C959 + C10844 * C1176 +
               C50975 * C1181) *
                  C50753) *
                 C2300 +
             ((C11843 + C11842) * C696 + (C11845 + C11844) * C50753) * C50778) *
                C51055 +
            (((C15114 + C15115) * C696 + (C15116 + C15117) * C50753) * C2300 +
             ((C14909 + C14908) * C696 + (C14911 + C14910) * C50753) * C50778) *
                C50949) *
               C1875) *
              C1283 +
          (((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C2300 +
             (C15894 * C696 + C15895 * C50753) * C50778) *
                C51055 +
            (((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C2300 +
             ((C14702 + C14703) * C696 + (C14704 + C14705) * C50753) * C50778) *
                C50949) *
               C51076 -
           (((C14316 * C50753 + C14317 * C696) * C50778 +
             ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C2300) *
                C50949 +
            ((C13909 * C50753 + C13908 * C696) * C50778 +
             ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C2300) *
                C51055) *
               C51087 -
           ((((C10844 * C3647 + C50975 * C3655 + C10843 * C3353 +
               C51056 * C3357) *
                  C50753 +
              (C10844 * C3643 + C50975 * C3648 + C10843 * C3348 +
               C51056 * C3352) *
                  C696) *
                 C50778 +
             ((C10844 * C3649 + C50975 * C3656 + C10843 * C3351 +
               C51056 * C3356) *
                  C50753 +
              (C10844 * C3644 + C50975 * C3650 + C10843 * C3347 +
               C51056 * C3350) *
                  C696) *
                 C2300) *
                C50949 +
            (((C14910 + C14911) * C50753 + (C14908 + C14909) * C696) * C50778 +
             ((C15117 + C15116) * C50753 + (C15115 + C15114) * C696) * C2300) *
                C51055) *
               C1875) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C49770 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C51025 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
                C2300 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51025 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50758) *
                C50778) *
               C51055 +
           (((C13914 + C13915) * C49770 + (C13916 + C13917) * C51025 -
             C13908 * C49763 - C13909 * C50758) *
                C2300 +
            (C13912 * C49770 + C13913 * C51025 - C11080 * C49763 -
             C11081 * C50758) *
                C50778) *
               C50949) *
              C50841 * C582 +
          (((C13912 * C49763 -
             ((C13917 + C13916) * C51025 + (C13915 + C13914) * C49770) +
             C13913 * C50758) *
                C2300 +
            (C13910 * C49763 - (C13909 * C51025 + C13908 * C49770) +
             C13911 * C50758) *
                C50778) *
               C51055 +
           ((C14306 * C49763 -
             ((C14326 + C14327) * C51025 + (C14328 + C14329) * C49770) +
             C14315 * C50758) *
                C2300 +
            ((C11433 + C11432) * C49763 - (C14316 * C51025 + C14317 * C49770) +
             (C11435 + C11434) * C50758) *
                C50778) *
               C50949) *
              C50841 * C583 +
          ((((C14329 + C14328) * C49770 + (C14327 + C14326) * C51025 -
             C14317 * C49763 - C14316 * C50758) *
                C2300 +
            (C14306 * C49770 + C14315 * C51025 - (C11432 + C11433) * C49763 -
             (C11434 + C11435) * C50758) *
                C50778) *
               C51055 +
           (((C10843 * C700 + C51056 * C708 + C10844 * C3144 + C50975 * C3148) *
                 C49770 +
             (C10843 * C707 + C51056 * C712 + C10844 * C3149 + C50975 * C3156) *
                 C51025 -
             (C14330 + C14331) * C49763 - (C14332 + C14333) * C50758) *
                C2300 +
            ((C14331 + C14330) * C49770 + (C14333 + C14332) * C51025 -
             (C10844 * C4202 + C50975 * C4203 + C10843 * C698 + C51056 * C704) *
                 C49763 -
             (C10844 * C4204 + C50975 * C4205 + C10843 * C703 + C51056 * C710) *
                 C50758) *
                C50778) *
               C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C118 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C106 -
            (C10878 + C10879) * C119 - (C10880 + C10881) * C107 +
            C10894 * C120 + C10895 * C108 - C10896 * C121 - C10897 * C109) *
               C2300 +
           ((C10879 + C10878) * C118 + (C10881 + C10880) * C106 -
            (C10883 + C10882) * C119 - (C10885 + C10884) * C107 +
            (C10887 + C10886) * C120 + (C10889 + C10888) * C108 -
            (C10890 + C10891) * C121 - (C10892 + C10893) * C109) *
               C50778) *
              C51055 +
          (((C10843 * C287 + C51056 * C294 + C10844 * C811 + C50975 * C819) *
                C118 +
            (C10843 * C293 + C51056 * C304 + C10844 * C820 + C50975 * C835) *
                C106 -
            (C11069 + C11068) * C119 - (C11071 + C11070) * C107 +
            (C11073 + C11072) * C120 + (C11075 + C11074) * C108 -
            (C11076 + C11077) * C121 - (C11078 + C11079) * C109) *
               C2300 +
           ((C11068 + C11069) * C118 + (C11070 + C11071) * C106 -
            C11080 * C119 - C11081 * C107 + (C11077 + C11076) * C120 +
            (C11079 + C11078) * C108 -
            (C10844 * C1523 + C50975 * C1524 + C10843 * C290 + C51056 * C300) *
                C121 -
            (C10844 * C1525 + C50975 * C1526 + C10843 * C301 + C51056 * C308) *
                C109) *
               C50778) *
              C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C49770 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C51025 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
                C2300 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51025 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50758) *
                C50778) *
               C51055 +
           (((C13914 + C13915) * C49770 + (C13916 + C13917) * C51025 -
             C13908 * C49763 - C13909 * C50758) *
                C2300 +
            (C13912 * C49770 + C13913 * C51025 - C11080 * C49763 -
             C11081 * C50758) *
                C50778) *
               C50949) *
              C941 +
          ((((C11252 + C11253) * C49763 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C51025 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C49770) +
             (C11254 + C11255) * C50758) *
                C2300 +
            ((C11257 + C11256) * C49763 -
             ((C11255 + C11254) * C51025 + (C11253 + C11252) * C49770) +
             (C11259 + C11258) * C50758) *
                C50778) *
               C51055 +
           (((C12597 + C12596) * C49763 -
             ((C14694 + C14695) * C51025 + (C14696 + C14697) * C49770) +
             (C12599 + C12598) * C50758) *
                C2300 +
            ((C12601 + C12600) * C49763 -
             ((C12598 + C12599) * C51025 + (C12596 + C12597) * C49770) +
             (C12603 + C12602) * C50758) *
                C50778) *
               C50949) *
              C942 +
          ((((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                 C49770 +
             (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                 C51025 -
             (C11842 + C11843) * C49763 - (C11844 + C11845) * C50758) *
                C2300 +
            ((C11843 + C11842) * C49770 + (C11845 + C11844) * C51025 -
             (C11846 + C11847) * C49763 - (C11848 + C11849) * C50758) *
                C50778) *
               C51055 +
           (((C10843 * C1083 + C51056 * C1091 + C10844 * C3646 +
              C50975 * C3654) *
                 C49770 +
             (C10843 * C1090 + C51056 * C1095 + C10844 * C3653 +
              C50975 * C3658) *
                 C51025 -
             (C14908 + C14909) * C49763 - (C14910 + C14911) * C50758) *
                C2300 +
            ((C14909 + C14908) * C49770 + (C14911 + C14910) * C51025 -
             (C10844 * C7062 + C50975 * C7063 + C10843 * C1081 +
              C51056 * C1087) *
                 C49763 -
             (C10844 * C7064 + C50975 * C7065 + C10843 * C1086 +
              C51056 * C1093) *
                 C50758) *
                C50778) *
               C50949) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C2300 +
            ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
               C51055 +
           (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C2300 +
            (C13912 * C696 + C13913 * C50753) * C50778) *
               C50949) *
              C50841 * C692 -
          (((C14316 * C50753 + C14317 * C696) * C50778 +
            ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C2300) *
               C50949 +
           ((C13909 * C50753 + C13908 * C696) * C50778 +
            ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C2300) *
               C51055) *
              C50841 * C693 +
          ((((C14329 + C14328) * C696 + (C14327 + C14326) * C50753) * C2300 +
            (C14306 * C696 + C14315 * C50753) * C50778) *
               C51055 +
           (((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C2300 +
            ((C14331 + C14330) * C696 + (C14333 + C14332) * C50753) * C50778) *
               C50949) *
              C50841 * C694 -
          ((((C10844 * C3152 + C50975 * C3158 + C10843 * C2809 +
              C51056 * C2813) *
                 C50753 +
             (C10844 * C3146 + C50975 * C3153 + C10843 * C2804 +
              C51056 * C2808) *
                 C696) *
                C50778 +
            ((C10844 * C3154 + C50975 * C3159 + C10843 * C2807 +
              C51056 * C2812) *
                 C50753 +
             (C10844 * C3147 + C50975 * C3155 + C10843 * C2803 +
              C51056 * C2806) *
                 C696) *
                C2300) *
               C50949 +
           (((C14332 + C14333) * C50753 + (C14330 + C14331) * C696) * C50778 +
            ((C14475 + C14474) * C50753 + (C14473 + C14472) * C696) * C2300) *
               C51055) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C283 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
             C10894 * C285 + C10895 * C280) *
                C2300 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C279 +
             (C10887 + C10886) * C285 + (C10889 + C10888) * C280) *
                C50778) *
               C51055 +
           (((C13914 + C13915) * C283 + (C13916 + C13917) * C278 -
             C13908 * C284 - C13909 * C279 + C13910 * C285 + C13911 * C280) *
                C2300 +
            (C13912 * C283 + C13913 * C278 - C11080 * C284 - C11081 * C279 +
             (C11077 + C11076) * C285 + (C11079 + C11078) * C280) *
                C50778) *
               C50949) *
              C50841 * C51040 +
          (((C13912 * C284 -
             ((C13917 + C13916) * C278 + (C13915 + C13914) * C283) +
             C13913 * C279 - C11080 * C285 - C11081 * C280) *
                C2300 +
            (C13910 * C284 - (C13909 * C278 + C13908 * C283) + C13911 * C279 -
             (C11076 + C11077) * C285 - (C11078 + C11079) * C280) *
                C50778) *
               C51055 +
           (((C11429 + C11428) * C284 -
             ((C10844 * C833 + C50975 * C842 + C10843 * C593 + C51056 * C602) *
                  C278 +
              (C10844 * C818 + C50975 * C834 + C10843 * C587 + C51056 * C592) *
                  C283) +
             (C11431 + C11430) * C279 - (C11432 + C11433) * C285 -
             (C11434 + C11435) * C280) *
                C2300 +
            ((C11433 + C11432) * C284 -
             ((C11430 + C11431) * C278 + (C11428 + C11429) * C283) +
             (C11435 + C11434) * C279 -
             (C10844 * C815 + C50975 * C828 + C10843 * C590 + C51056 * C598) *
                 C285 -
             (C10844 * C827 + C50975 * C839 + C10843 * C599 + C51056 * C605) *
                 C280) *
                C50778) *
               C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C696 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C50753) *
                 C2300 +
             ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
                C51055 +
            (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C2300 +
             (C13912 * C696 + C13913 * C50753) * C50778) *
                C50949) *
               C941 -
           ((((C12598 + C12599) * C50753 + (C12596 + C12597) * C696) * C50778 +
             ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C2300) *
                C50949 +
            (((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C50778 +
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C50753 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C696) *
                 C2300) *
                C51055) *
               C942 +
           ((((C10843 * C944 + C51056 * C949 + C10844 * C1169 +
               C50975 * C1177) *
                  C696 +
              (C10843 * C950 + C51056 * C959 + C10844 * C1176 +
               C50975 * C1181) *
                  C50753) *
                 C2300 +
             ((C11843 + C11842) * C696 + (C11845 + C11844) * C50753) * C50778) *
                C51055 +
            (((C15114 + C15115) * C696 + (C15116 + C15117) * C50753) * C2300 +
             ((C14909 + C14908) * C696 + (C14911 + C14910) * C50753) * C50778) *
                C50949) *
               C943) *
              C51040 +
          (((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C2300 +
             ((C12597 + C12596) * C696 + (C12599 + C12598) * C50753) * C50778) *
                C51055 +
            (((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C2300 +
             ((C14702 + C14703) * C696 + (C14704 + C14705) * C50753) * C50778) *
                C50949) *
               C942 -
           (((C14316 * C50753 + C14317 * C696) * C50778 +
             ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C2300) *
                C50949 +
            ((C13909 * C50753 + C13908 * C696) * C50778 +
             ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C2300) *
                C51055) *
               C941 -
           ((((C10844 * C3647 + C50975 * C3655 + C10843 * C3353 +
               C51056 * C3357) *
                  C50753 +
              (C10844 * C3643 + C50975 * C3648 + C10843 * C3348 +
               C51056 * C3352) *
                  C696) *
                 C50778 +
             ((C10844 * C3649 + C50975 * C3656 + C10843 * C3351 +
               C51056 * C3356) *
                  C50753 +
              (C10844 * C3644 + C50975 * C3650 + C10843 * C3347 +
               C51056 * C3350) *
                  C696) *
                 C2300) *
                C50949 +
            (((C14910 + C14911) * C50753 + (C14908 + C14909) * C696) * C50778 +
             ((C15117 + C15116) * C50753 + (C15115 + C15114) * C696) * C2300) *
                C51055) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C696 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C50753) *
                 C2300 +
             ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
                C51055 +
            (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C2300 +
             (C13912 * C696 + C13913 * C50753) * C50778) *
                C50949) *
               C51041 -
           ((((C12598 + C12599) * C50753 + (C12596 + C12597) * C696) * C50778 +
             ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C2300) *
                C50949 +
            (((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C50778 +
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C50753 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C696) *
                 C2300) *
                C51055) *
               C50853) *
              C582 +
          (((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C2300 +
             ((C12597 + C12596) * C696 + (C12599 + C12598) * C50753) * C50778) *
                C51055 +
            (((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C2300 +
             ((C14702 + C14703) * C696 + (C14704 + C14705) * C50753) * C50778) *
                C50949) *
               C50853 -
           (((C14316 * C50753 + C14317 * C696) * C50778 +
             ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C2300) *
                C50949 +
            ((C13909 * C50753 + C13908 * C696) * C50778 +
             ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C2300) *
                C51055) *
               C51041) *
              C583 +
          (((((C14329 + C14328) * C696 + (C14327 + C14326) * C50753) * C2300 +
             (C14306 * C696 + C14315 * C50753) * C50778) *
                C51055 +
            (((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C2300 +
             ((C14331 + C14330) * C696 + (C14333 + C14332) * C50753) * C50778) *
                C50949) *
               C51041 -
           ((((C10844 * C3519 + C50975 * C3523 + C10843 * C3151 +
               C51056 * C3157) *
                  C50753 +
              (C10844 * C3517 + C50975 * C3520 + C10843 * C3145 +
               C51056 * C3150) *
                  C696) *
                 C50778 +
             ((C10844 * C3521 + C50975 * C3524 + C10843 * C3149 +
               C51056 * C3156) *
                  C50753 +
              (C10844 * C3518 + C50975 * C3522 + C10843 * C3144 +
               C51056 * C3148) *
                  C696) *
                 C2300) *
                C50949 +
            (((C14705 + C14704) * C50753 + (C14703 + C14702) * C696) * C50778 +
             ((C14701 + C14700) * C50753 + (C14699 + C14698) * C696) * C2300) *
                C51055) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C283 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
             C10894 * C285 + C10895 * C280) *
                C2300 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C279 +
             (C10887 + C10886) * C285 + (C10889 + C10888) * C280) *
                C50778) *
               C51055 +
           (((C13914 + C13915) * C283 + (C13916 + C13917) * C278 -
             C13908 * C284 - C13909 * C279 + C13910 * C285 + C13911 * C280) *
                C2300 +
            (C13912 * C283 + C13913 * C278 - C11080 * C284 - C11081 * C279 +
             (C11077 + C11076) * C285 + (C11079 + C11078) * C280) *
                C50778) *
               C50949) *
              C51041 +
          ((((C11252 + C11253) * C284 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C278 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C283) +
             (C11254 + C11255) * C279 - C11264 * C285 - C11265 * C280) *
                C2300 +
            ((C11257 + C11256) * C284 -
             ((C11255 + C11254) * C278 + (C11253 + C11252) * C283) +
             (C11259 + C11258) * C279 - (C11260 + C11261) * C285 -
             (C11262 + C11263) * C280) *
                C50778) *
               C51055 +
           (((C12597 + C12596) * C284 -
             ((C10844 * C1090 + C50975 * C1095 + C10843 * C820 +
               C51056 * C835) *
                  C278 +
              (C10844 * C1083 + C50975 * C1091 + C10843 * C811 +
               C51056 * C819) *
                  C283) +
             (C12599 + C12598) * C279 - (C12600 + C12601) * C285 -
             (C12602 + C12603) * C280) *
                C2300 +
            ((C12601 + C12600) * C284 -
             ((C12598 + C12599) * C278 + (C12596 + C12597) * C283) +
             (C12603 + C12602) * C279 -
             (C10844 * C1080 + C50975 * C1085 + C10843 * C814 + C51056 * C825) *
                 C285 -
             (C10844 * C1084 + C50975 * C1092 + C10843 * C826 + C51056 * C838) *
                 C280) *
                C50778) *
               C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C2300 +
            ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
               C51055 +
           (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C2300 +
            (C13912 * C696 + C13913 * C50753) * C50778) *
               C50949) *
              C1162 -
          ((((C12598 + C12599) * C50753 + (C12596 + C12597) * C696) * C50778 +
            ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C2300) *
               C50949 +
           (((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C50778 +
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C50753 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C696) *
                C2300) *
               C51055) *
              C1163 +
          ((((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                 C696 +
             (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                 C50753) *
                C2300 +
            ((C11843 + C11842) * C696 + (C11845 + C11844) * C50753) * C50778) *
               C51055 +
           (((C15114 + C15115) * C696 + (C15116 + C15117) * C50753) * C2300 +
            ((C14909 + C14908) * C696 + (C14911 + C14910) * C50753) * C50778) *
               C50949) *
              C1164 -
          ((((C10844 * C6464 + C50975 * C6468 + C10843 * C3651 +
              C51056 * C3657) *
                 C50753 +
             (C10844 * C6462 + C50975 * C6465 + C10843 * C3645 +
              C51056 * C3652) *
                 C696) *
                C50778 +
            ((C10844 * C6466 + C50975 * C6469 + C10843 * C3653 +
              C51056 * C3658) *
                 C50753 +
             (C10844 * C6463 + C50975 * C6467 + C10843 * C3646 +
              C51056 * C3654) *
                 C696) *
                C2300) *
               C50949 +
           (((C10844 * C6292 + C50975 * C6296 + C10843 * C1174 +
              C51056 * C1180) *
                 C50753 +
             (C10844 * C6287 + C50975 * C6291 + C10843 * C1168 +
              C51056 * C1175) *
                 C696) *
                C50778 +
            ((C10844 * C6290 + C50975 * C6295 + C10843 * C1176 +
              C51056 * C1181) *
                 C50753 +
             (C10844 * C6286 + C50975 * C6289 + C10843 * C1169 +
              C51056 * C1177) *
                 C696) *
                C2300) *
               C51055) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C1285 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C51083 -
             (C10878 + C10879) * C1286 - (C10880 + C10881) * C51067 +
             C10894 * C1287 + C10895 * C1282) *
                C2300 +
            ((C10879 + C10878) * C1285 + (C10881 + C10880) * C51083 -
             (C10883 + C10882) * C1286 - (C10885 + C10884) * C51067 +
             (C10887 + C10886) * C1287 + (C10889 + C10888) * C1282) *
                C50778) *
               C51055 +
           (((C13914 + C13915) * C1285 + (C13916 + C13917) * C51083 -
             C13908 * C1286 - C13909 * C51067 + C13910 * C1287 +
             C13911 * C1282) *
                C2300 +
            (C13912 * C1285 + C13913 * C51083 - C11080 * C1286 -
             C11081 * C51067 + (C11077 + C11076) * C1287 +
             (C11079 + C11078) * C1282) *
                C50778) *
               C50949) *
              C1643 +
          ((((C11252 + C11253) * C1286 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C51083 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C1285) +
             (C11254 + C11255) * C51067 - C11264 * C1287 - C11265 * C1282) *
                C2300 +
            ((C11257 + C11256) * C1286 -
             ((C11255 + C11254) * C51083 + (C11253 + C11252) * C1285) +
             (C11259 + C11258) * C51067 - (C11260 + C11261) * C1287 -
             (C11262 + C11263) * C1282) *
                C50778) *
               C51055 +
           ((C15894 * C1286 -
             ((C14694 + C14695) * C51083 + (C14696 + C14697) * C1285) +
             C15895 * C51067 - (C12600 + C12601) * C1287 -
             (C12602 + C12603) * C1282) *
                C2300 +
            ((C12601 + C12600) * C1286 - (C15896 * C51083 + C15897 * C1285) +
             (C12603 + C12602) * C51067 -
             (C10844 * C1080 + C50975 * C1085 + C10843 * C814 + C51056 * C825) *
                 C1287 -
             (C10844 * C1084 + C50975 * C1092 + C10843 * C826 + C51056 * C838) *
                 C1282) *
                C50778) *
               C50949) *
              C50853) *
         C50815) /
        (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C1391 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C1386 -
              (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
                 C2300 +
             ((C10879 + C10878) * C1391 + (C10881 + C10880) * C1386 -
              (C10883 + C10882) * C1392 - (C10885 + C10884) * C50758) *
                 C50778) *
                C51055 +
            (((C13914 + C13915) * C1391 + (C13916 + C13917) * C1386 -
              C13908 * C1392 - C13909 * C50758) *
                 C2300 +
             (C13912 * C1391 + C13913 * C1386 - C11080 * C1392 -
              C11081 * C50758) *
                 C50778) *
                C50949) *
               C1643 +
           ((((C11252 + C11253) * C1392 -
              ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                   C1386 +
               (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                   C1391) +
              (C11254 + C11255) * C50758) *
                 C2300 +
             ((C11257 + C11256) * C1392 -
              ((C11255 + C11254) * C1386 + (C11253 + C11252) * C1391) +
              (C11259 + C11258) * C50758) *
                 C50778) *
                C51055 +
            ((C15894 * C1392 -
              ((C14694 + C14695) * C1386 + (C14696 + C14697) * C1391) +
              C15895 * C50758) *
                 C2300 +
             ((C12601 + C12600) * C1392 - (C15896 * C1386 + C15897 * C1391) +
              (C12603 + C12602) * C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C51040 +
          ((((C13912 * C1392 -
              ((C13917 + C13916) * C1386 + (C13915 + C13914) * C1391) +
              C13913 * C50758) *
                 C2300 +
             (C13910 * C1392 - (C13909 * C1386 + C13908 * C1391) +
              C13911 * C50758) *
                 C50778) *
                C51055 +
            ((C14306 * C1392 -
              ((C14326 + C14327) * C1386 + (C14328 + C14329) * C1391) +
              C14315 * C50758) *
                 C2300 +
             ((C11433 + C11432) * C1392 - (C14316 * C1386 + C14317 * C1391) +
              (C11435 + C11434) * C50758) *
                 C50778) *
                C50949) *
               C1643 +
           ((((C14697 + C14696) * C1391 + (C14695 + C14694) * C1386 -
              C15897 * C1392 - C15896 * C50758) *
                 C2300 +
             (C15894 * C1391 + C15895 * C1386 - (C12600 + C12601) * C1392 -
              (C12602 + C12603) * C50758) *
                 C50778) *
                C51055 +
            (((C14698 + C14699) * C1391 + (C14700 + C14701) * C1386 -
              (C14703 + C14702) * C1392 - (C14705 + C14704) * C50758) *
                 C2300 +
             ((C14702 + C14703) * C1391 + (C14704 + C14705) * C1386 -
              (C10844 * C3349 + C50975 * C3354 + C10843 * C816 +
               C51056 * C830) *
                  C1392 -
              (C10844 * C3355 + C50975 * C3358 + C10843 * C829 +
               C51056 * C840) *
                  C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C1391 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C1386 -
             (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
                C2300 +
            ((C10879 + C10878) * C1391 + (C10881 + C10880) * C1386 -
             (C10883 + C10882) * C1392 - (C10885 + C10884) * C50758) *
                C50778) *
               C51055 +
           (((C13914 + C13915) * C1391 + (C13916 + C13917) * C1386 -
             C13908 * C1392 - C13909 * C50758) *
                C2300 +
            (C13912 * C1391 + C13913 * C1386 - C11080 * C1392 -
             C11081 * C50758) *
                C50778) *
               C50949) *
              C51087 +
          ((((C11252 + C11253) * C1392 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C1386 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C1391) +
             (C11254 + C11255) * C50758) *
                C2300 +
            ((C11257 + C11256) * C1392 -
             ((C11255 + C11254) * C1386 + (C11253 + C11252) * C1391) +
             (C11259 + C11258) * C50758) *
                C50778) *
               C51055 +
           ((C15894 * C1392 -
             ((C14694 + C14695) * C1386 + (C14696 + C14697) * C1391) +
             C15895 * C50758) *
                C2300 +
            ((C12601 + C12600) * C1392 - (C15896 * C1386 + C15897 * C1391) +
             (C12603 + C12602) * C50758) *
                C50778) *
               C50949) *
              C51076 +
          ((((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                 C1391 +
             (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                 C1386 -
             (C11842 + C11843) * C1392 - (C11844 + C11845) * C50758) *
                C2300 +
            ((C11843 + C11842) * C1391 + (C11845 + C11844) * C1386 -
             (C11846 + C11847) * C1392 - (C11848 + C11849) * C50758) *
                C50778) *
               C51055 +
           (((C15114 + C15115) * C1391 + (C15116 + C15117) * C1386 -
             (C14908 + C14909) * C1392 - (C14910 + C14911) * C50758) *
                C2300 +
            ((C14909 + C14908) * C1391 + (C14911 + C14910) * C1386 -
             (C10844 * C7062 + C50975 * C7063 + C10843 * C1081 +
              C51056 * C1087) *
                 C1392 -
             (C10844 * C7064 + C50975 * C7065 + C10843 * C1086 +
              C51056 * C1093) *
                 C50758) *
                C50778) *
               C50949) *
              C1875) *
         C50815) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C118 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C106 -
            (C10878 + C10879) * C119 - (C10880 + C10881) * C107 +
            C10894 * C120 + C10895 * C108 - C10896 * C121 - C10897 * C109) *
               C2300 +
           ((C10879 + C10878) * C118 + (C10881 + C10880) * C106 -
            (C10883 + C10882) * C119 - (C10885 + C10884) * C107 +
            (C10887 + C10886) * C120 + (C10889 + C10888) * C108 -
            (C10890 + C10891) * C121 - (C10892 + C10893) * C109) *
               C50778) *
              C51055 +
          (((C10843 * C287 + C51056 * C294 + C10844 * C811 + C50975 * C819) *
                C118 +
            (C10843 * C293 + C51056 * C304 + C10844 * C820 + C50975 * C835) *
                C106 -
            (C11069 + C11068) * C119 - (C11071 + C11070) * C107 +
            (C11073 + C11072) * C120 + (C11075 + C11074) * C108 -
            (C11076 + C11077) * C121 - (C11078 + C11079) * C109) *
               C2300 +
           ((C11068 + C11069) * C118 + (C11070 + C11071) * C106 -
            C11080 * C119 - C11081 * C107 + (C11077 + C11076) * C120 +
            (C11079 + C11078) * C108 -
            (C10844 * C1523 + C50975 * C1524 + C10843 * C290 + C51056 * C300) *
                C121 -
            (C10844 * C1525 + C50975 * C1526 + C10843 * C301 + C51056 * C308) *
                C109) *
               C50778) *
              C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C49770 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C51025 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
                C2300 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51025 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50758) *
                C50778) *
               C51055 +
           (((C13914 + C13915) * C49770 + (C13916 + C13917) * C51025 -
             C13908 * C49763 - C13909 * C50758) *
                C2300 +
            (C13912 * C49770 + C13913 * C51025 - C11080 * C49763 -
             C11081 * C50758) *
                C50778) *
               C50949) *
              C50841 * C582 +
          (((C13912 * C49763 -
             ((C13917 + C13916) * C51025 + (C13915 + C13914) * C49770) +
             C13913 * C50758) *
                C2300 +
            (C13910 * C49763 - (C13909 * C51025 + C13908 * C49770) +
             C13911 * C50758) *
                C50778) *
               C51055 +
           ((C14306 * C49763 -
             ((C14326 + C14327) * C51025 + (C14328 + C14329) * C49770) +
             C14315 * C50758) *
                C2300 +
            ((C11433 + C11432) * C49763 - (C14316 * C51025 + C14317 * C49770) +
             (C11435 + C11434) * C50758) *
                C50778) *
               C50949) *
              C50841 * C583 +
          ((((C14329 + C14328) * C49770 + (C14327 + C14326) * C51025 -
             C14317 * C49763 - C14316 * C50758) *
                C2300 +
            (C14306 * C49770 + C14315 * C51025 - (C11432 + C11433) * C49763 -
             (C11434 + C11435) * C50758) *
                C50778) *
               C51055 +
           (((C10843 * C700 + C51056 * C708 + C10844 * C3144 + C50975 * C3148) *
                 C49770 +
             (C10843 * C707 + C51056 * C712 + C10844 * C3149 + C50975 * C3156) *
                 C51025 -
             (C14330 + C14331) * C49763 - (C14332 + C14333) * C50758) *
                C2300 +
            ((C14331 + C14330) * C49770 + (C14333 + C14332) * C51025 -
             (C10844 * C4202 + C50975 * C4203 + C10843 * C698 + C51056 * C704) *
                 C49763 -
             (C10844 * C4204 + C50975 * C4205 + C10843 * C703 + C51056 * C710) *
                 C50758) *
                C50778) *
               C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C283 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
             C10894 * C285 + C10895 * C280) *
                C2300 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C279 +
             (C10887 + C10886) * C285 + (C10889 + C10888) * C280) *
                C50778) *
               C51055 +
           (((C13914 + C13915) * C283 + (C13916 + C13917) * C278 -
             C13908 * C284 - C13909 * C279 + C13910 * C285 + C13911 * C280) *
                C2300 +
            (C13912 * C283 + C13913 * C278 - C11080 * C284 - C11081 * C279 +
             (C11077 + C11076) * C285 + (C11079 + C11078) * C280) *
                C50778) *
               C50949) *
              C50841 * C51040 +
          (((C13912 * C284 -
             ((C13917 + C13916) * C278 + (C13915 + C13914) * C283) +
             C13913 * C279 - C11080 * C285 - C11081 * C280) *
                C2300 +
            (C13910 * C284 - (C13909 * C278 + C13908 * C283) + C13911 * C279 -
             (C11076 + C11077) * C285 - (C11078 + C11079) * C280) *
                C50778) *
               C51055 +
           (((C11429 + C11428) * C284 -
             ((C10844 * C833 + C50975 * C842 + C10843 * C593 + C51056 * C602) *
                  C278 +
              (C10844 * C818 + C50975 * C834 + C10843 * C587 + C51056 * C592) *
                  C283) +
             (C11431 + C11430) * C279 - (C11432 + C11433) * C285 -
             (C11434 + C11435) * C280) *
                C2300 +
            ((C11433 + C11432) * C284 -
             ((C11430 + C11431) * C278 + (C11428 + C11429) * C283) +
             (C11435 + C11434) * C279 -
             (C10844 * C815 + C50975 * C828 + C10843 * C590 + C51056 * C598) *
                 C285 -
             (C10844 * C827 + C50975 * C839 + C10843 * C599 + C51056 * C605) *
                 C280) *
                C50778) *
               C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C2300 +
            ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
               C51055 +
           (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C2300 +
            (C13912 * C696 + C13913 * C50753) * C50778) *
               C50949) *
              C50841 * C692 -
          (((C14316 * C50753 + C14317 * C696) * C50778 +
            ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C2300) *
               C50949 +
           ((C13909 * C50753 + C13908 * C696) * C50778 +
            ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C2300) *
               C51055) *
              C50841 * C693 +
          ((((C14329 + C14328) * C696 + (C14327 + C14326) * C50753) * C2300 +
            (C14306 * C696 + C14315 * C50753) * C50778) *
               C51055 +
           (((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C2300 +
            ((C14331 + C14330) * C696 + (C14333 + C14332) * C50753) * C50778) *
               C50949) *
              C50841 * C694 -
          ((((C10844 * C3152 + C50975 * C3158 + C10843 * C2809 +
              C51056 * C2813) *
                 C50753 +
             (C10844 * C3146 + C50975 * C3153 + C10843 * C2804 +
              C51056 * C2808) *
                 C696) *
                C50778 +
            ((C10844 * C3154 + C50975 * C3159 + C10843 * C2807 +
              C51056 * C2812) *
                 C50753 +
             (C10844 * C3147 + C50975 * C3155 + C10843 * C2803 +
              C51056 * C2806) *
                 C696) *
                C2300) *
               C50949 +
           (((C14332 + C14333) * C50753 + (C14330 + C14331) * C696) * C50778 +
            ((C14475 + C14474) * C50753 + (C14473 + C14472) * C696) * C2300) *
               C51055) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C283 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
             C10894 * C285 + C10895 * C280) *
                C2300 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C279 +
             (C10887 + C10886) * C285 + (C10889 + C10888) * C280) *
                C50778) *
               C51055 +
           (((C13914 + C13915) * C283 + (C13916 + C13917) * C278 -
             C13908 * C284 - C13909 * C279 + C13910 * C285 + C13911 * C280) *
                C2300 +
            (C13912 * C283 + C13913 * C278 - C11080 * C284 - C11081 * C279 +
             (C11077 + C11076) * C285 + (C11079 + C11078) * C280) *
                C50778) *
               C50949) *
              C51041 +
          ((((C11252 + C11253) * C284 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C278 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C283) +
             (C11254 + C11255) * C279 - C11264 * C285 - C11265 * C280) *
                C2300 +
            ((C11257 + C11256) * C284 -
             ((C11255 + C11254) * C278 + (C11253 + C11252) * C283) +
             (C11259 + C11258) * C279 - (C11260 + C11261) * C285 -
             (C11262 + C11263) * C280) *
                C50778) *
               C51055 +
           (((C12597 + C12596) * C284 -
             ((C10844 * C1090 + C50975 * C1095 + C10843 * C820 +
               C51056 * C835) *
                  C278 +
              (C10844 * C1083 + C50975 * C1091 + C10843 * C811 +
               C51056 * C819) *
                  C283) +
             (C12599 + C12598) * C279 - (C12600 + C12601) * C285 -
             (C12602 + C12603) * C280) *
                C2300 +
            ((C12601 + C12600) * C284 -
             ((C12598 + C12599) * C278 + (C12596 + C12597) * C283) +
             (C12603 + C12602) * C279 -
             (C10844 * C1080 + C50975 * C1085 + C10843 * C814 + C51056 * C825) *
                 C285 -
             (C10844 * C1084 + C50975 * C1092 + C10843 * C826 + C51056 * C838) *
                 C280) *
                C50778) *
               C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C696 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C50753) *
                 C2300 +
             ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
                C51055 +
            (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C2300 +
             (C13912 * C696 + C13913 * C50753) * C50778) *
                C50949) *
               C51041 -
           ((((C12598 + C12599) * C50753 + (C12596 + C12597) * C696) * C50778 +
             ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C2300) *
                C50949 +
            (((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C50778 +
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C50753 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C696) *
                 C2300) *
                C51055) *
               C50853) *
              C582 +
          (((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C2300 +
             ((C12597 + C12596) * C696 + (C12599 + C12598) * C50753) * C50778) *
                C51055 +
            (((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C2300 +
             ((C14702 + C14703) * C696 + (C14704 + C14705) * C50753) * C50778) *
                C50949) *
               C50853 -
           (((C14316 * C50753 + C14317 * C696) * C50778 +
             ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C2300) *
                C50949 +
            ((C13909 * C50753 + C13908 * C696) * C50778 +
             ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C2300) *
                C51055) *
               C51041) *
              C583 +
          (((((C14329 + C14328) * C696 + (C14327 + C14326) * C50753) * C2300 +
             (C14306 * C696 + C14315 * C50753) * C50778) *
                C51055 +
            (((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C2300 +
             ((C14331 + C14330) * C696 + (C14333 + C14332) * C50753) * C50778) *
                C50949) *
               C51041 -
           ((((C10844 * C3519 + C50975 * C3523 + C10843 * C3151 +
               C51056 * C3157) *
                  C50753 +
              (C10844 * C3517 + C50975 * C3520 + C10843 * C3145 +
               C51056 * C3150) *
                  C696) *
                 C50778 +
             ((C10844 * C3521 + C50975 * C3524 + C10843 * C3149 +
               C51056 * C3156) *
                  C50753 +
              (C10844 * C3518 + C50975 * C3522 + C10843 * C3144 +
               C51056 * C3148) *
                  C696) *
                 C2300) *
                C50949 +
            (((C14705 + C14704) * C50753 + (C14703 + C14702) * C696) * C50778 +
             ((C14701 + C14700) * C50753 + (C14699 + C14698) * C696) * C2300) *
                C51055) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1285 +
             (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
             C172 * C51067 + C173 * C1287 + C174 * C1282) *
                C2300 +
            (C171 * C1285 + C172 * C51083 - C173 * C1286 - C174 * C51067 +
             C175 * C1287 + C176 * C1282) *
                C50778) *
               C2302 +
           ((C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C2300 +
            (C3812 + C3813 - C3814 - C3815 + C3816 + C3817) * C50778) *
               C2303 +
           ((C3818 + C3819 - C3820 - C3821 + C3822 + C3823) * C2300 +
            (C3824 + C3825 - C3826 - C3827 + C3828 + C3829) * C50778) *
               C2304) *
              C50841 * C1283 +
          (((C3808 - (C3807 + C3806) + C3809 - C3810 - C3811) * C2300 +
            (C3814 - (C3813 + C3812) + C3815 - C3816 - C3817) * C50778) *
               C2302 +
           ((C3820 - (C3819 + C3818) + C3821 - C3822 - C3823) * C2300 +
            (C3826 - (C3825 + C3824) + C3827 - C3828 - C3829) * C50778) *
               C2303 +
           ((C2492 * C1286 - (C2848 * C51083 + C2849 * C1285) + C2493 * C51067 -
             C2494 * C1287 - C2495 * C1282) *
                C2300 +
            (C2494 * C1286 - (C2493 * C51083 + C2492 * C1285) + C2495 * C51067 -
             (C117 * C697 + C50911 * C702) * C1287 -
             (C117 * C701 + C50911 * C709) * C1282) *
                C50778) *
               C2304) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1285 +
            (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
            C172 * C51067 + C173 * C1287 + C174 * C1282) *
               C110 +
           (C171 * C1285 + C172 * C51083 - C173 * C1286 - C174 * C51067 +
            C175 * C1287 + C176 * C1282) *
               C111 +
           (C173 * C1285 + C174 * C51083 - C175 * C1286 - C176 * C51067 +
            C177 * C1287 + C178 * C1282) *
               C112 +
           (C175 * C1285 + C176 * C51083 - C177 * C1286 - C178 * C51067 +
            C179 * C1287 + C180 * C1282) *
               C113) *
              C50900 * C50841 * C1283 +
          ((C327 * C1286 -
            ((C117 * C293 + C50911 * C304) * C51083 +
             (C117 * C287 + C50911 * C294) * C1285) +
            C328 * C51067 - C329 * C1287 - C330 * C1282) *
               C110 +
           (C329 * C1286 - (C328 * C51083 + C327 * C1285) + C330 * C51067 -
            C331 * C1287 - C332 * C1282) *
               C111 +
           (C331 * C1286 - (C330 * C51083 + C329 * C1285) + C332 * C51067 -
            C333 * C1287 - C334 * C1282) *
               C112 +
           (C333 * C1286 - (C332 * C51083 + C331 * C1285) + C334 * C51067 -
            (C117 * C291 + C50911 * C302) * C1287 -
            (C117 * C303 + C50911 * C309) * C1282) *
               C113) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C1285 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C51083 -
            (C5351 + C5352 + C5353) * C1286 - (C5354 + C5355 + C5356) * C51067 +
            (C5357 + C5358 + C5359) * C1287 + (C5360 + C5361 + C5362) * C1282) *
               C2300 +
           ((C5353 + C5352 + C5351) * C1285 + (C5356 + C5355 + C5354) * C51083 -
            (C5359 + C5358 + C5357) * C1286 - (C5362 + C5361 + C5360) * C51067 +
            (C5365 + C5364 + C5363) * C1287 + (C5368 + C5367 + C5366) * C1282) *
               C50778) *
              C50900 * C50841 * C1283 +
          (((C5539 + C5540 + C5541) * C1286 -
            ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
              C5311 * C293 + C5308 * C304) *
                 C51083 +
             (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
              C5311 * C287 + C5308 * C294) *
                 C1285) +
            (C5542 + C5543 + C5544) * C51067 - (C5545 + C5546 + C5547) * C1287 -
            (C5548 + C5549 + C5550) * C1282) *
               C2300 +
           ((C5547 + C5546 + C5545) * C1286 -
            ((C5544 + C5543 + C5542) * C51083 +
             (C5541 + C5540 + C5539) * C1285) +
            (C5550 + C5549 + C5548) * C51067 -
            (C5313 * C1080 + C5310 * C1085 + C5312 * C814 + C5309 * C825 +
             C5311 * C289 + C5308 * C298) *
                C1287 -
            (C5313 * C1084 + C5310 * C1092 + C5312 * C826 + C5309 * C838 +
             C5311 * C299 + C5308 * C307) *
                C1282) *
               C50778) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C2300 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C50778) *
               C2302 +
           ((C3976 + C3977 - C3978 - C3979) * C2300 +
            (C3980 + C3981 - C3982 - C3983) * C50778) *
               C2303 +
           C4008 * C2304) *
              C50841 * C51086 +
          (((C3978 - (C3977 + C3976) + C3979) * C2300 +
            (C3982 - (C3981 + C3980) + C3983) * C50778) *
               C2302 +
           ((C3986 - (C3985 + C3984) + C3987) * C2300 +
            (C3990 - (C3989 + C3988) + C3991) * C50778) *
               C2303 +
           ((C3992 - (C3993 + C3994) + C3995) * C2300 +
            (C3996 - (C3997 + C3998) + C3999) * C50778) *
               C2304) *
              C50841 * C51073 +
          (C4008 * C2302 +
           ((C3994 + C3993 - C3992 - C3995) * C2300 +
            (C3998 + C3997 - C3996 - C3999) * C50778) *
               C2303 +
           ((C2989 * C1391 + C2990 * C1386 - C2850 * C1392 - C2851 * C50758) *
                C2300 +
            (C2850 * C1391 + C2851 * C1386 -
             (C117 * C2805 + C50911 * C2810) * C1392 -
             (C117 * C2811 + C50911 * C2814) * C50758) *
                C50778) *
               C2304) *
              C50841 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1391 +
            (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
            C172 * C50758) *
               C110 +
           (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) * C111 +
           (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) * C112 +
           (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50758) *
               C113) *
              C50900 * C50841 * C51086 +
          ((C327 * C1392 -
            ((C117 * C293 + C50911 * C304) * C1386 +
             (C117 * C287 + C50911 * C294) * C1391) +
            C328 * C50758) *
               C110 +
           (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50758) *
               C111 +
           (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50758) *
               C112 +
           (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50758) *
               C113) *
              C50900 * C50841 * C51073 +
          (((C117 * C587 + C50911 * C592) * C1391 +
            (C117 * C593 + C50911 * C602) * C1386 - C620 * C1392 -
            C621 * C50758) *
               C110 +
           (C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50758) * C111 +
           (C622 * C1391 + C623 * C1386 - C624 * C1392 - C625 * C50758) * C112 +
           (C624 * C1391 + C625 * C1386 -
            (C117 * C591 + C50911 * C600) * C1392 -
            (C117 * C601 + C50911 * C606) * C50758) *
               C113) *
              C50900 * C50841 * C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C1391 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C1386 -
            (C5351 + C5352 + C5353) * C1392 -
            (C5354 + C5355 + C5356) * C50758) *
               C2300 +
           ((C5353 + C5352 + C5351) * C1391 + (C5356 + C5355 + C5354) * C1386 -
            (C5359 + C5358 + C5357) * C1392 -
            (C5362 + C5361 + C5360) * C50758) *
               C50778) *
              C50900 * C50841 * C51086 +
          (((C5539 + C5540 + C5541) * C1392 -
            ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
              C5311 * C293 + C5308 * C304) *
                 C1386 +
             (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
              C5311 * C287 + C5308 * C294) *
                 C1391) +
            (C5542 + C5543 + C5544) * C50758) *
               C2300 +
           ((C5547 + C5546 + C5545) * C1392 -
            ((C5544 + C5543 + C5542) * C1386 +
             (C5541 + C5540 + C5539) * C1391) +
            (C5550 + C5549 + C5548) * C50758) *
               C50778) *
              C50900 * C50841 * C51073 +
          (((C5311 * C587 + C5308 * C592 + C5312 * C818 + C5309 * C834 +
             C5313 * C3347 + C5310 * C3350) *
                C1391 +
            (C5311 * C593 + C5308 * C602 + C5312 * C833 + C5309 * C842 +
             C5313 * C3351 + C5310 * C3356) *
                C1386 -
            (C5891 + C5892 + C5893) * C1392 -
            (C5894 + C5895 + C5896) * C50758) *
               C2300 +
           ((C5893 + C5892 + C5891) * C1391 + (C5896 + C5895 + C5894) * C1386 -
            (C5313 * C3349 + C5310 * C3354 + C5312 * C816 + C5309 * C830 +
             C5311 * C589 + C5308 * C596) *
                C1392 -
            (C5313 * C3355 + C5310 * C3358 + C5312 * C829 + C5309 * C840 +
             C5311 * C597 + C5308 * C604) *
                C50758) *
               C50778) *
              C50900 * C50841 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C1391 +
              (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
              C172 * C50758) *
                 C2300 +
             (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                 C50778) *
                C2302 +
            ((C3976 + C3977 - C3978 - C3979) * C2300 +
             (C3980 + C3981 - C3982 - C3983) * C50778) *
                C2303 +
            C4008 * C2304) *
               C51041 +
           (((C475 * C1392 -
              ((C117 * C441 + C50911 * C452) * C1386 +
               (C117 * C435 + C50911 * C442) * C1391) +
              C476 * C50758) *
                 C2300 +
             (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                 C50778) *
                C2302 +
            ((C4207 - (C4208 + C4209) + C4210) * C2300 +
             (C4211 - (C4212 + C4213) + C4214) * C50778) *
                C2303 +
            ((C4215 - (C4216 + C4217) + C4218) * C2300 +
             (C4219 - (C4220 + C4221) + C4222) * C50778) *
                C2304) *
               C50853) *
              C1283 +
          ((((C3978 - (C3977 + C3976) + C3979) * C2300 +
             (C3982 - (C3981 + C3980) + C3983) * C50778) *
                C2302 +
            ((C3986 - (C3985 + C3984) + C3987) * C2300 +
             (C3990 - (C3989 + C3988) + C3991) * C50778) *
                C2303 +
            ((C3992 - (C3993 + C3994) + C3995) * C2300 +
             (C3996 - (C3997 + C3998) + C3999) * C50778) *
                C2304) *
               C51041 +
           (((C4209 + C4208 - C4207 - C4210) * C2300 +
             (C4213 + C4212 - C4211 - C4214) * C50778) *
                C2302 +
            ((C4217 + C4216 - C4215 - C4218) * C2300 +
             (C4221 + C4220 - C4219 - C4222) * C50778) *
                C2303 +
            ((C3186 * C1391 + C3187 * C1386 - C3188 * C1392 - C3189 * C50758) *
                 C2300 +
             (C3188 * C1391 + C3189 * C1386 -
              (C117 * C4202 + C50911 * C4203) * C1392 -
              (C117 * C4204 + C50911 * C4205) * C50758) *
                 C50778) *
                C2304) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C110 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C111 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                C112 +
            (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50758) *
                C113) *
               C50900 * C51041 +
           ((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C110 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                C111 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                C112 +
            (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50758) *
                C113) *
               C50900 * C50853) *
              C1283 +
          (((C327 * C1392 -
             ((C117 * C293 + C50911 * C304) * C1386 +
              (C117 * C287 + C50911 * C294) * C1391) +
             C328 * C50758) *
                C110 +
            (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50758) *
                C111 +
            (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50758) *
                C112 +
            (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50758) *
                C113) *
               C50900 * C51041 +
           (((C117 * C811 + C50911 * C819) * C1391 +
             (C117 * C820 + C50911 * C835) * C1386 - C1540 * C1392 -
             C1541 * C50758) *
                C110 +
            (C1540 * C1391 + C1541 * C1386 - C1542 * C1392 - C1543 * C50758) *
                C111 +
            (C1542 * C1391 + C1543 * C1386 - C1544 * C1392 - C1545 * C50758) *
                C112 +
            (C1544 * C1391 + C1545 * C1386 -
             (C117 * C1523 + C50911 * C1524) * C1392 -
             (C117 * C1525 + C50911 * C1526) * C50758) *
                C113) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C1391 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C1386 -
             (C5351 + C5352 + C5353) * C1392 -
             (C5354 + C5355 + C5356) * C50758) *
                C2300 +
            ((C5353 + C5352 + C5351) * C1391 + (C5356 + C5355 + C5354) * C1386 -
             (C5359 + C5358 + C5357) * C1392 -
             (C5362 + C5361 + C5360) * C50758) *
                C50778) *
               C50900 * C51041 +
           (((C5721 + C5722 + C5723) * C1392 -
             ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
               C5311 * C441 + C5308 * C452) *
                  C1386 +
              (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
               C5311 * C435 + C5308 * C442) *
                  C1391) +
             (C5724 + C5725 + C5726) * C50758) *
                C2300 +
            ((C5729 + C5728 + C5727) * C1392 -
             ((C5726 + C5725 + C5724) * C1386 +
              (C5723 + C5722 + C5721) * C1391) +
             (C5732 + C5731 + C5730) * C50758) *
                C50778) *
               C50900 * C50853) *
              C1283 +
          ((((C5539 + C5540 + C5541) * C1392 -
             ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
               C5311 * C293 + C5308 * C304) *
                  C1386 +
              (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
               C5311 * C287 + C5308 * C294) *
                  C1391) +
             (C5542 + C5543 + C5544) * C50758) *
                C2300 +
            ((C5547 + C5546 + C5545) * C1392 -
             ((C5544 + C5543 + C5542) * C1386 +
              (C5541 + C5540 + C5539) * C1391) +
             (C5550 + C5549 + C5548) * C50758) *
                C50778) *
               C50900 * C51041 +
           (((C5311 * C811 + C5308 * C819 + C5312 * C1083 + C5309 * C1091 +
              C5313 * C3646 + C5310 * C3654) *
                 C1391 +
             (C5311 * C820 + C5308 * C835 + C5312 * C1090 + C5309 * C1095 +
              C5313 * C3653 + C5310 * C3658) *
                 C1386 -
             (C7079 + C7080 + C7081) * C1392 -
             (C7082 + C7083 + C7084) * C50758) *
                C2300 +
            ((C7081 + C7080 + C7079) * C1391 + (C7084 + C7083 + C7082) * C1386 -
             (C5313 * C7062 + C5310 * C7063 + C5312 * C1081 + C5309 * C1087 +
              C5311 * C813 + C5308 * C823) *
                 C1392 -
             (C5313 * C7064 + C5310 * C7065 + C5312 * C1086 + C5309 * C1093 +
              C5311 * C824 + C5308 * C837) *
                 C50758) *
                C50778) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C49770 +
              (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
              C172 * C50758) *
                 C2300 +
             (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                 C50778) *
                C2302 +
            ((C2816 + C2817 - C2818 - C2819) * C2300 +
             (C2820 + C2821 - C2822 - C2823) * C50778) *
                C2303 +
            C2860 * C2304) *
               C1643 +
           (((C475 * C49763 -
              ((C117 * C441 + C50911 * C452) * C51025 +
               (C117 * C435 + C50911 * C442) * C49770) +
              C476 * C50758) *
                 C2300 +
             (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                 C50778) *
                C2302 +
            ((C4903 - (C4904 + C4905) + C4906) * C2300 +
             (C4907 - (C4908 + C4909) + C4910) * C50778) *
                C2303 +
            ((C4911 - (C4912 + C4913) + C4914) * C2300 +
             (C4915 - (C4916 + C4917) + C4918) * C50778) *
                C2304) *
               C50853) *
              C1283 +
          ((((C2818 - (C2817 + C2816) + C2819) * C2300 +
             (C2822 - (C2821 + C2820) + C2823) * C50778) *
                C2302 +
            ((C2826 - (C2825 + C2824) + C2827) * C2300 +
             (C2830 - (C2829 + C2828) + C2831) * C50778) *
                C2303 +
            ((C2832 - (C2854 + C2855) + C2837) * C2300 +
             (C2838 - (C2839 + C2840) + C2841) * C50778) *
                C2304) *
               C1643 +
           (((C4905 + C4904 - C4903 - C4906) * C2300 +
             (C4909 + C4908 - C4907 - C4910) * C50778) *
                C2302 +
            ((C4913 + C4912 - C4911 - C4914) * C2300 +
             (C4917 + C4916 - C4915 - C4918) * C50778) *
                C2303 +
            ((C3186 * C49770 + C3187 * C51025 - C3188 * C49763 -
              C3189 * C50758) *
                 C2300 +
             (C3188 * C49770 + C3189 * C51025 -
              (C117 * C4202 + C50911 * C4203) * C49763 -
              (C117 * C4204 + C50911 * C4205) * C50758) *
                 C50778) *
                C2304) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C110 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C111 +
            (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                C112 +
            (C175 * C49770 + C176 * C51025 - C177 * C49763 - C178 * C50758) *
                C113) *
               C50900 * C1643 +
           ((C475 * C49763 -
             ((C117 * C441 + C50911 * C452) * C51025 +
              (C117 * C435 + C50911 * C442) * C49770) +
             C476 * C50758) *
                C110 +
            (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                C111 +
            (C479 * C49763 - (C478 * C51025 + C477 * C49770) + C480 * C50758) *
                C112 +
            (C481 * C49763 - (C480 * C51025 + C479 * C49770) + C482 * C50758) *
                C113) *
               C50900 * C50853) *
              C1283 +
          (((C327 * C49763 -
             ((C117 * C293 + C50911 * C304) * C51025 +
              (C117 * C287 + C50911 * C294) * C49770) +
             C328 * C50758) *
                C110 +
            (C329 * C49763 - (C328 * C51025 + C327 * C49770) + C330 * C50758) *
                C111 +
            (C331 * C49763 - (C330 * C51025 + C329 * C49770) + C332 * C50758) *
                C112 +
            (C333 * C49763 - (C332 * C51025 + C331 * C49770) + C334 * C50758) *
                C113) *
               C50900 * C1643 +
           (((C117 * C811 + C50911 * C819) * C49770 +
             (C117 * C820 + C50911 * C835) * C51025 - C1540 * C49763 -
             C1541 * C50758) *
                C110 +
            (C1540 * C49770 + C1541 * C51025 - C1542 * C49763 -
             C1543 * C50758) *
                C111 +
            (C1542 * C49770 + C1543 * C51025 - C1544 * C49763 -
             C1545 * C50758) *
                C112 +
            (C1544 * C49770 + C1545 * C51025 -
             (C117 * C1523 + C50911 * C1524) * C49763 -
             (C117 * C1525 + C50911 * C1526) * C50758) *
                C113) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C49770 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C51025 -
             (C5351 + C5352 + C5353) * C49763 -
             (C5354 + C5355 + C5356) * C50758) *
                C2300 +
            ((C5353 + C5352 + C5351) * C49770 +
             (C5356 + C5355 + C5354) * C51025 -
             (C5359 + C5358 + C5357) * C49763 -
             (C5362 + C5361 + C5360) * C50758) *
                C50778) *
               C50900 * C1643 +
           (((C5721 + C5722 + C5723) * C49763 -
             ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
               C5311 * C441 + C5308 * C452) *
                  C51025 +
              (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
               C5311 * C435 + C5308 * C442) *
                  C49770) +
             (C5724 + C5725 + C5726) * C50758) *
                C2300 +
            ((C5729 + C5728 + C5727) * C49763 -
             ((C5726 + C5725 + C5724) * C51025 +
              (C5723 + C5722 + C5721) * C49770) +
             (C5732 + C5731 + C5730) * C50758) *
                C50778) *
               C50900 * C50853) *
              C1283 +
          ((((C5539 + C5540 + C5541) * C49763 -
             ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
               C5311 * C293 + C5308 * C304) *
                  C51025 +
              (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
               C5311 * C287 + C5308 * C294) *
                  C49770) +
             (C5542 + C5543 + C5544) * C50758) *
                C2300 +
            ((C5547 + C5546 + C5545) * C49763 -
             ((C5544 + C5543 + C5542) * C51025 +
              (C5541 + C5540 + C5539) * C49770) +
             (C5550 + C5549 + C5548) * C50758) *
                C50778) *
               C50900 * C1643 +
           (((C5311 * C811 + C5308 * C819 + C5312 * C1083 + C5309 * C1091 +
              C5313 * C3646 + C5310 * C3654) *
                 C49770 +
             (C5311 * C820 + C5308 * C835 + C5312 * C1090 + C5309 * C1095 +
              C5313 * C3653 + C5310 * C3658) *
                 C51025 -
             (C7079 + C7080 + C7081) * C49763 -
             (C7082 + C7083 + C7084) * C50758) *
                C2300 +
            ((C7081 + C7080 + C7079) * C49770 +
             (C7084 + C7083 + C7082) * C51025 -
             (C5313 * C7062 + C5310 * C7063 + C5312 * C1081 + C5309 * C1087 +
              C5311 * C813 + C5308 * C823) *
                 C49763 -
             (C5313 * C7064 + C5310 * C7065 + C5312 * C1086 + C5309 * C1093 +
              C5311 * C824 + C5308 * C837) *
                 C50758) *
                C50778) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C2300 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C2302 +
            ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
            C2997 * C2304) *
               C1643 -
           (C3201 * C2304 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C2300) * C2303 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C2300) *
                C2302) *
               C50853) *
              C51086 +
          ((((C3194 + C3193) * C2300 + (C3168 + C3167) * C50778) * C2302 +
            ((C3192 + C3191) * C2300 + (C3162 + C3161) * C50778) * C2303 +
            ((C3195 + C3196) * C2300 + (C3197 + C3198) * C50778) * C2304) *
               C50853 -
           (C2998 * C2304 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
               C1643) *
              C51073 +
          ((C2997 * C2302 +
            ((C2978 + C2977) * C2300 + (C2976 + C2975) * C50778) * C2303 +
            ((C2995 + C2996) * C2300 + (C2983 + C2984) * C50778) * C2304) *
               C1643 -
           ((((C117 * C3152 + C50911 * C3158) * C50753 +
              (C117 * C3146 + C50911 * C3153) * C696) *
                 C50778 +
             ((C117 * C3154 + C50911 * C3159) * C50753 +
              (C117 * C3147 + C50911 * C3155) * C696) *
                 C2300) *
                C2304 +
            ((C3198 + C3197) * C50778 + (C3196 + C3195) * C2300) * C2303 +
            C3201 * C2302) *
               C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C110 +
            (C171 * C696 + C172 * C50753) * C111 +
            (C173 * C696 + C174 * C50753) * C112 +
            (C175 * C696 + C176 * C50753) * C113) *
               C50900 * C1643 -
           ((C480 * C50753 + C479 * C696) * C113 +
            (C478 * C50753 + C477 * C696) * C112 +
            (C476 * C50753 + C475 * C696) * C111 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C110) *
               C50900 * C50853) *
              C51086 +
          ((((C117 * C811 + C50911 * C819) * C696 +
             (C117 * C820 + C50911 * C835) * C50753) *
                C110 +
            (C1540 * C696 + C1541 * C50753) * C111 +
            (C1542 * C696 + C1543 * C50753) * C112 +
            (C1544 * C696 + C1545 * C50753) * C113) *
               C50900 * C50853 -
           ((C332 * C50753 + C331 * C696) * C113 +
            (C330 * C50753 + C329 * C696) * C112 +
            (C328 * C50753 + C327 * C696) * C111 +
            ((C117 * C293 + C50911 * C304) * C50753 +
             (C117 * C287 + C50911 * C294) * C696) *
                C110) *
               C50900 * C1643) *
              C51073 +
          ((((C117 * C587 + C50911 * C592) * C696 +
             (C117 * C593 + C50911 * C602) * C50753) *
                C110 +
            (C620 * C696 + C621 * C50753) * C111 +
            (C622 * C696 + C623 * C50753) * C112 +
            (C624 * C696 + C625 * C50753) * C113) *
               C50900 * C1643 -
           (((C117 * C827 + C50911 * C839) * C50753 +
             (C117 * C815 + C50911 * C828) * C696) *
                C113 +
            ((C117 * C829 + C50911 * C840) * C50753 +
             (C117 * C816 + C50911 * C830) * C696) *
                C112 +
            ((C117 * C831 + C50911 * C841) * C50753 +
             (C117 * C817 + C50911 * C832) * C696) *
                C111 +
            ((C117 * C833 + C50911 * C842) * C50753 +
             (C117 * C818 + C50911 * C834) * C696) *
                C110) *
               C50900 * C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C696 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C50753) *
                C2300 +
            ((C5353 + C5352 + C5351) * C696 +
             (C5356 + C5355 + C5354) * C50753) *
                C50778) *
               C50900 * C1643 -
           (((C5726 + C5725 + C5724) * C50753 +
             (C5723 + C5722 + C5721) * C696) *
                C50778 +
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C50753 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C696) *
                C2300) *
               C50900 * C50853) *
              C51086 +
          ((((C5311 * C811 + C5308 * C819 + C5312 * C1083 + C5309 * C1091 +
              C5313 * C3646 + C5310 * C3654) *
                 C696 +
             (C5311 * C820 + C5308 * C835 + C5312 * C1090 + C5309 * C1095 +
              C5313 * C3653 + C5310 * C3658) *
                 C50753) *
                C2300 +
            ((C7081 + C7080 + C7079) * C696 +
             (C7084 + C7083 + C7082) * C50753) *
                C50778) *
               C50900 * C50853 -
           (((C5544 + C5543 + C5542) * C50753 +
             (C5541 + C5540 + C5539) * C696) *
                C50778 +
            ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
              C5311 * C293 + C5308 * C304) *
                 C50753 +
             (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
              C5311 * C287 + C5308 * C294) *
                 C696) *
                C2300) *
               C50900 * C1643) *
              C51073 +
          ((((C5311 * C587 + C5308 * C592 + C5312 * C818 + C5309 * C834 +
              C5313 * C3347 + C5310 * C3350) *
                 C696 +
             (C5311 * C593 + C5308 * C602 + C5312 * C833 + C5309 * C842 +
              C5313 * C3351 + C5310 * C3356) *
                 C50753) *
                C2300 +
            ((C5893 + C5892 + C5891) * C696 +
             (C5896 + C5895 + C5894) * C50753) *
                C50778) *
               C50900 * C1643 -
           (((C5313 * C3647 + C5310 * C3655 + C5312 * C3353 + C5309 * C3357 +
              C5311 * C831 + C5308 * C841) *
                 C50753 +
             (C5313 * C3643 + C5310 * C3648 + C5312 * C3348 + C5309 * C3352 +
              C5311 * C817 + C5308 * C832) *
                 C696) *
                C50778 +
            ((C5313 * C3649 + C5310 * C3656 + C5312 * C3351 + C5309 * C3356 +
              C5311 * C833 + C5308 * C842) *
                 C50753 +
             (C5313 * C3644 + C5310 * C3650 + C5312 * C3347 + C5309 * C3350 +
              C5311 * C818 + C5308 * C834) *
                 C696) *
                C2300) *
               C50900 * C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C2300 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C2302 +
            ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
            C2997 * C2304) *
               C51087 -
           (C3201 * C2304 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C2300) * C2303 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C2300) *
                C2302) *
               C51076 +
           ((((C117 * C944 + C50911 * C949) * C696 +
              (C117 * C950 + C50911 * C959) * C50753) *
                 C2300 +
             (C977 * C696 + C978 * C50753) * C50778) *
                C2302 +
            ((C3542 + C3543) * C2300 + (C3530 + C3531) * C50778) * C2303 +
            ((C3544 + C3545) * C2300 + (C3536 + C3537) * C50778) * C2304) *
               C1875) *
              C1283 +
          ((((C3194 + C3193) * C2300 + (C3168 + C3167) * C50778) * C2302 +
            ((C3192 + C3191) * C2300 + (C3162 + C3161) * C50778) * C2303 +
            ((C3195 + C3196) * C2300 + (C3197 + C3198) * C50778) * C2304) *
               C51076 -
           (C2998 * C2304 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
               C51087 -
           ((((C117 * C3519 + C50911 * C3523) * C50753 +
              (C117 * C3517 + C50911 * C3520) * C696) *
                 C50778 +
             ((C117 * C3521 + C50911 * C3524) * C50753 +
              (C117 * C3518 + C50911 * C3522) * C696) *
                 C2300) *
                C2304 +
            ((C3537 + C3536) * C50778 + (C3545 + C3544) * C2300) * C2303 +
            ((C3531 + C3530) * C50778 + (C3543 + C3542) * C2300) * C2302) *
               C1875) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C110 +
            (C171 * C696 + C172 * C50753) * C111 +
            (C173 * C696 + C174 * C50753) * C112 +
            (C175 * C696 + C176 * C50753) * C113) *
               C50900 * C51087 -
           ((C480 * C50753 + C479 * C696) * C113 +
            (C478 * C50753 + C477 * C696) * C112 +
            (C476 * C50753 + C475 * C696) * C111 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C110) *
               C50900 * C51076 +
           (((C117 * C944 + C50911 * C949) * C696 +
             (C117 * C950 + C50911 * C959) * C50753) *
                C110 +
            (C977 * C696 + C978 * C50753) * C111 +
            (C979 * C696 + C980 * C50753) * C112 +
            (C981 * C696 + C982 * C50753) * C113) *
               C50900 * C1875) *
              C1283 +
          ((((C117 * C811 + C50911 * C819) * C696 +
             (C117 * C820 + C50911 * C835) * C50753) *
                C110 +
            (C1540 * C696 + C1541 * C50753) * C111 +
            (C1542 * C696 + C1543 * C50753) * C112 +
            (C1544 * C696 + C1545 * C50753) * C113) *
               C50900 * C51076 -
           ((C332 * C50753 + C331 * C696) * C113 +
            (C330 * C50753 + C329 * C696) * C112 +
            (C328 * C50753 + C327 * C696) * C111 +
            ((C117 * C293 + C50911 * C304) * C50753 +
             (C117 * C287 + C50911 * C294) * C696) *
                C110) *
               C50900 * C51087 -
           (((C117 * C1084 + C50911 * C1092) * C50753 +
             (C117 * C1080 + C50911 * C1085) * C696) *
                C113 +
            ((C117 * C1086 + C50911 * C1093) * C50753 +
             (C117 * C1081 + C50911 * C1087) * C696) *
                C112 +
            ((C117 * C1088 + C50911 * C1094) * C50753 +
             (C117 * C1082 + C50911 * C1089) * C696) *
                C111 +
            ((C117 * C1090 + C50911 * C1095) * C50753 +
             (C117 * C1083 + C50911 * C1091) * C696) *
                C110) *
               C50900 * C1875) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C696 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C50753) *
                C2300 +
            ((C5353 + C5352 + C5351) * C696 +
             (C5356 + C5355 + C5354) * C50753) *
                C50778) *
               C50900 * C51087 -
           (((C5726 + C5725 + C5724) * C50753 +
             (C5723 + C5722 + C5721) * C696) *
                C50778 +
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C50753 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C696) *
                C2300) *
               C50900 * C51076 +
           (((C5311 * C944 + C5308 * C949 + C5312 * C1169 + C5309 * C1177 +
              C5313 * C6286 + C5310 * C6289) *
                 C696 +
             (C5311 * C950 + C5308 * C959 + C5312 * C1176 + C5309 * C1181 +
              C5313 * C6290 + C5310 * C6295) *
                 C50753) *
                C2300 +
            ((C6313 + C6312 + C6311) * C696 +
             (C6316 + C6315 + C6314) * C50753) *
                C50778) *
               C50900 * C1875) *
              C1283 +
          ((((C5311 * C811 + C5308 * C819 + C5312 * C1083 + C5309 * C1091 +
              C5313 * C3646 + C5310 * C3654) *
                 C696 +
             (C5311 * C820 + C5308 * C835 + C5312 * C1090 + C5309 * C1095 +
              C5313 * C3653 + C5310 * C3658) *
                 C50753) *
                C2300 +
            ((C7081 + C7080 + C7079) * C696 +
             (C7084 + C7083 + C7082) * C50753) *
                C50778) *
               C50900 * C51076 -
           (((C5544 + C5543 + C5542) * C50753 +
             (C5541 + C5540 + C5539) * C696) *
                C50778 +
            ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
              C5311 * C293 + C5308 * C304) *
                 C50753 +
             (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
              C5311 * C287 + C5308 * C294) *
                 C696) *
                C2300) *
               C50900 * C51087 -
           (((C5313 * C6464 + C5310 * C6468 + C5312 * C3651 + C5309 * C3657 +
              C5311 * C1088 + C5308 * C1094) *
                 C50753 +
             (C5313 * C6462 + C5310 * C6465 + C5312 * C3645 + C5309 * C3652 +
              C5311 * C1082 + C5308 * C1089) *
                 C696) *
                C50778 +
            ((C5313 * C6466 + C5310 * C6469 + C5312 * C3653 + C5309 * C3658 +
              C5311 * C1090 + C5308 * C1095) *
                 C50753 +
             (C5313 * C6463 + C5310 * C6467 + C5312 * C3646 + C5309 * C3654 +
              C5311 * C1083 + C5308 * C1091) *
                 C696) *
                C2300) *
               C50900 * C1875) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C50911 * C129) * C118 +
               (C117 * C130 + C50911 * C143) * C106 - C171 * C119 -
               C172 * C107 + C173 * C120 + C174 * C108 - C175 * C121 -
               C176 * C109) *
                  C110 +
              (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
               C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
                  C111 +
              (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
               C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
                  C112 +
              (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 +
               C179 * C120 + C180 * C108 -
               (C117 * C128 + C50911 * C141) * C121 -
               (C117 * C142 + C50911 * C149) * C109) *
                  C113) *
             C50900 * C50841 * C50815 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50911 * C129) * C49770 +
                (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
                C172 * C50758) *
                   C110 +
               (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                   C111 +
               (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                   C112 +
               (C175 * C49770 + C176 * C51025 - C177 * C49763 - C178 * C50758) *
                   C113) *
                  C50900 * C50841 * C582 +
              ((C327 * C49763 -
                ((C117 * C293 + C50911 * C304) * C51025 +
                 (C117 * C287 + C50911 * C294) * C49770) +
                C328 * C50758) *
                   C110 +
               (C329 * C49763 - (C328 * C51025 + C327 * C49770) +
                C330 * C50758) *
                   C111 +
               (C331 * C49763 - (C330 * C51025 + C329 * C49770) +
                C332 * C50758) *
                   C112 +
               (C333 * C49763 - (C332 * C51025 + C331 * C49770) +
                C334 * C50758) *
                   C113) *
                  C50900 * C50841 * C583 +
              (((C117 * C587 + C50911 * C592) * C49770 +
                (C117 * C593 + C50911 * C602) * C51025 - C620 * C49763 -
                C621 * C50758) *
                   C110 +
               (C620 * C49770 + C621 * C51025 - C622 * C49763 - C623 * C50758) *
                   C111 +
               (C622 * C49770 + C623 * C51025 - C624 * C49763 - C625 * C50758) *
                   C112 +
               (C624 * C49770 + C625 * C51025 -
                (C117 * C591 + C50911 * C600) * C49763 -
                (C117 * C601 + C50911 * C606) * C50758) *
                   C113) *
                  C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C49770 +
            (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
            C172 * C50758) *
               C110 +
           (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
               C111 +
           (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
               C112 +
           (C175 * C49770 + C176 * C51025 - C177 * C49763 - C178 * C50758) *
               C113) *
              C50900 * C941 +
          ((C475 * C49763 -
            ((C117 * C441 + C50911 * C452) * C51025 +
             (C117 * C435 + C50911 * C442) * C49770) +
            C476 * C50758) *
               C110 +
           (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
               C111 +
           (C479 * C49763 - (C478 * C51025 + C477 * C49770) + C480 * C50758) *
               C112 +
           (C481 * C49763 - (C480 * C51025 + C479 * C49770) + C482 * C50758) *
               C113) *
              C50900 * C942 +
          (((C117 * C944 + C50911 * C949) * C49770 +
            (C117 * C950 + C50911 * C959) * C51025 - C977 * C49763 -
            C978 * C50758) *
               C110 +
           (C977 * C49770 + C978 * C51025 - C979 * C49763 - C980 * C50758) *
               C111 +
           (C979 * C49770 + C980 * C51025 - C981 * C49763 - C982 * C50758) *
               C112 +
           (C981 * C49770 + C982 * C51025 -
            (C117 * C948 + C50911 * C957) * C49763 -
            (C117 * C958 + C50911 * C963) * C50758) *
               C113) *
              C50900 * C943) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C118 +
            (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C2300 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50778) *
              C2302 +
          (((C117 * C287 + C50911 * C294) * C118 +
            (C117 * C293 + C50911 * C304) * C106 - C327 * C119 - C328 * C107 +
            C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
               C2300 +
           (C327 * C118 + C328 * C106 - C329 * C119 - C330 * C107 +
            C331 * C120 + C332 * C108 - C333 * C121 - C334 * C109) *
               C50778) *
              C2303 +
          (((C117 * C587 + C50911 * C592) * C118 +
            (C117 * C593 + C50911 * C602) * C106 - C620 * C119 - C621 * C107 +
            C622 * C120 + C623 * C108 - C624 * C121 - C625 * C109) *
               C2300 +
           (C620 * C118 + C621 * C106 - C622 * C119 - C623 * C107 +
            C624 * C120 + C625 * C108 - (C117 * C591 + C50911 * C600) * C121 -
            (C117 * C601 + C50911 * C606) * C109) *
               C50778) *
              C2304) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C2300 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C50778) *
               C2302 +
           ((C2816 + C2817 - C2818 - C2819) * C2300 +
            (C2820 + C2821 - C2822 - C2823) * C50778) *
               C2303 +
           C2860 * C2304) *
              C50841 * C582 +
          (((C2818 - (C2817 + C2816) + C2819) * C2300 +
            (C2822 - (C2821 + C2820) + C2823) * C50778) *
               C2302 +
           ((C2826 - (C2825 + C2824) + C2827) * C2300 +
            (C2830 - (C2829 + C2828) + C2831) * C50778) *
               C2303 +
           ((C2832 - (C2854 + C2855) + C2837) * C2300 +
            (C2838 - (C2839 + C2840) + C2841) * C50778) *
               C2304) *
              C50841 * C583 +
          (C2860 * C2302 +
           ((C2855 + C2854 - C2832 - C2837) * C2300 +
            (C2840 + C2839 - C2838 - C2841) * C50778) *
               C2303 +
           (((C117 * C2803 + C50911 * C2806) * C49770 +
             (C117 * C2807 + C50911 * C2812) * C51025 - C2850 * C49763 -
             C2851 * C50758) *
                C2300 +
            (C2850 * C49770 + C2851 * C51025 -
             (C117 * C2805 + C50911 * C2810) * C49763 -
             (C117 * C2811 + C50911 * C2814) * C50758) *
                C50778) *
               C2304) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C2300 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C50778) *
               C2302 +
           ((C2816 + C2817 - C2818 - C2819) * C2300 +
            (C2820 + C2821 - C2822 - C2823) * C50778) *
               C2303 +
           C2860 * C2304) *
              C941 +
          (((C475 * C49763 -
             ((C117 * C441 + C50911 * C452) * C51025 +
              (C117 * C435 + C50911 * C442) * C49770) +
             C476 * C50758) *
                C2300 +
            (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                C50778) *
               C2302 +
           ((C1540 * C49763 - (C3184 * C51025 + C3185 * C49770) +
             C1541 * C50758) *
                C2300 +
            (C1542 * C49763 - (C1541 * C51025 + C1540 * C49770) +
             C1543 * C50758) *
                C50778) *
               C2303 +
           ((C2654 * C49763 - (C3182 * C51025 + C3183 * C49770) +
             C2655 * C50758) *
                C2300 +
            (C2656 * C49763 - (C2655 * C51025 + C2654 * C49770) +
             C2657 * C50758) *
                C50778) *
               C2304) *
              C942 +
          ((((C117 * C944 + C50911 * C949) * C49770 +
             (C117 * C950 + C50911 * C959) * C51025 - C977 * C49763 -
             C978 * C50758) *
                C2300 +
            (C977 * C49770 + C978 * C51025 - C979 * C49763 - C980 * C50758) *
                C50778) *
               C2302 +
           (((C117 * C1083 + C50911 * C1091) * C49770 +
             (C117 * C1090 + C50911 * C1095) * C51025 - C3368 * C49763 -
             C3369 * C50758) *
                C2300 +
            (C3368 * C49770 + C3369 * C51025 -
             (C117 * C1081 + C50911 * C1087) * C49763 -
             (C117 * C1086 + C50911 * C1093) * C50758) *
                C50778) *
               C2303 +
           (((C117 * C3347 + C50911 * C3350) * C49770 +
             (C117 * C3351 + C50911 * C3356) * C51025 - C3370 * C49763 -
             C3371 * C50758) *
                C2300 +
            (C3370 * C49770 + C3371 * C51025 -
             (C117 * C3349 + C50911 * C3354) * C49763 -
             (C117 * C3355 + C50911 * C3358) * C50758) *
                C50778) *
               C2304) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
            C5313 * C944 + C5310 * C949) *
               C118 +
           (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
            C5313 * C950 + C5310 * C959) *
               C106 -
           (C5351 + C5352 + C5353) * C119 - (C5354 + C5355 + C5356) * C107 +
           (C5357 + C5358 + C5359) * C120 + (C5360 + C5361 + C5362) * C108 -
           (C5363 + C5364 + C5365) * C121 - (C5366 + C5367 + C5368) * C109) *
              C2300 +
          ((C5353 + C5352 + C5351) * C118 + (C5356 + C5355 + C5354) * C106 -
           (C5359 + C5358 + C5357) * C119 - (C5362 + C5361 + C5360) * C107 +
           (C5365 + C5364 + C5363) * C120 + (C5368 + C5367 + C5366) * C108 -
           (C5313 * C948 + C5310 * C957 + C5312 * C438 + C5309 * C448 +
            C5311 * C126 + C5308 * C137) *
               C121 -
           (C5313 * C958 + C5310 * C963 + C5312 * C449 + C5309 * C456 +
            C5311 * C138 + C5308 * C147) *
               C109) *
              C50778) *
         C50900 * C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C5311 * C122 + C5308 * C129 + C5312 * C435 +
                                 C5309 * C442 + C5313 * C944 + C5310 * C949) *
                                    C49770 +
                                (C5311 * C130 + C5308 * C143 + C5312 * C441 +
                                 C5309 * C452 + C5313 * C950 + C5310 * C959) *
                                    C51025 -
                                (C5351 + C5352 + C5353) * C49763 -
                                (C5354 + C5355 + C5356) * C50758) *
                                   C2300 +
                               ((C5353 + C5352 + C5351) * C49770 +
                                (C5356 + C5355 + C5354) * C51025 -
                                (C5359 + C5358 + C5357) * C49763 -
                                (C5362 + C5361 + C5360) * C50758) *
                                   C50778) *
                                  C50900 * C50841 * C582 +
                              (((C5539 + C5540 + C5541) * C49763 -
                                ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 +
                                  C5309 * C835 + C5311 * C293 + C5308 * C304) *
                                     C51025 +
                                 (C5313 * C1083 + C5310 * C1091 + C5312 * C811 +
                                  C5309 * C819 + C5311 * C287 + C5308 * C294) *
                                     C49770) +
                                (C5542 + C5543 + C5544) * C50758) *
                                   C2300 +
                               ((C5547 + C5546 + C5545) * C49763 -
                                ((C5544 + C5543 + C5542) * C51025 +
                                 (C5541 + C5540 + C5539) * C49770) +
                                (C5550 + C5549 + C5548) * C50758) *
                                   C50778) *
                                  C50900 * C50841 * C583 +
                              (((C5311 * C587 + C5308 * C592 + C5312 * C818 +
                                 C5309 * C834 + C5313 * C3347 + C5310 * C3350) *
                                    C49770 +
                                (C5311 * C593 + C5308 * C602 + C5312 * C833 +
                                 C5309 * C842 + C5313 * C3351 + C5310 * C3356) *
                                    C51025 -
                                (C5891 + C5892 + C5893) * C49763 -
                                (C5894 + C5895 + C5896) * C50758) *
                                   C2300 +
                               ((C5893 + C5892 + C5891) * C49770 +
                                (C5896 + C5895 + C5894) * C51025 -
                                (C5313 * C3349 + C5310 * C3354 + C5312 * C816 +
                                 C5309 * C830 + C5311 * C589 + C5308 * C596) *
                                    C49763 -
                                (C5313 * C3355 + C5310 * C3358 + C5312 * C829 +
                                 C5309 * C840 + C5311 * C597 + C5308 * C604) *
                                    C50758) *
                                   C50778) *
                                  C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C49770 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C51025 -
            (C5351 + C5352 + C5353) * C49763 -
            (C5354 + C5355 + C5356) * C50758) *
               C2300 +
           ((C5353 + C5352 + C5351) * C49770 +
            (C5356 + C5355 + C5354) * C51025 -
            (C5359 + C5358 + C5357) * C49763 -
            (C5362 + C5361 + C5360) * C50758) *
               C50778) *
              C50900 * C941 +
          (((C5721 + C5722 + C5723) * C49763 -
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C51025 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C49770) +
            (C5724 + C5725 + C5726) * C50758) *
               C2300 +
           ((C5729 + C5728 + C5727) * C49763 -
            ((C5726 + C5725 + C5724) * C51025 +
             (C5723 + C5722 + C5721) * C49770) +
            (C5732 + C5731 + C5730) * C50758) *
               C50778) *
              C50900 * C942 +
          (((C5311 * C944 + C5308 * C949 + C5312 * C1169 + C5309 * C1177 +
             C5313 * C6286 + C5310 * C6289) *
                C49770 +
            (C5311 * C950 + C5308 * C959 + C5312 * C1176 + C5309 * C1181 +
             C5313 * C6290 + C5310 * C6295) *
                C51025 -
            (C6311 + C6312 + C6313) * C49763 -
            (C6314 + C6315 + C6316) * C50758) *
               C2300 +
           ((C6313 + C6312 + C6311) * C49770 +
            (C6316 + C6315 + C6314) * C51025 -
            (C5313 * C6288 + C5310 * C6293 + C5312 * C1167 + C5309 * C1173 +
             C5311 * C946 + C5308 * C953) *
                C49763 -
            (C5313 * C6294 + C5310 * C6297 + C5312 * C1172 + C5309 * C1179 +
             C5311 * C954 + C5308 * C961) *
                C50758) *
               C50778) *
              C50900 * C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50911 * C129) * C283 +
                (C117 * C130 + C50911 * C143) * C278 - C171 * C284 -
                C172 * C279 + C173 * C285 + C174 * C280) *
                   C110 +
               (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                C175 * C285 + C176 * C280) *
                   C111 +
               (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                C177 * C285 + C178 * C280) *
                   C112 +
               (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
                C179 * C285 + C180 * C280) *
                   C113) *
                  C50900 * C50841 * C51040 +
              ((C327 * C284 -
                ((C117 * C293 + C50911 * C304) * C278 +
                 (C117 * C287 + C50911 * C294) * C283) +
                C328 * C279 - C329 * C285 - C330 * C280) *
                   C110 +
               (C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
                C331 * C285 - C332 * C280) *
                   C111 +
               (C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
                C333 * C285 - C334 * C280) *
                   C112 +
               (C333 * C284 - (C332 * C278 + C331 * C283) + C334 * C279 -
                (C117 * C291 + C50911 * C302) * C285 -
                (C117 * C303 + C50911 * C309) * C280) *
                   C113) *
                  C50900 * C50841 * C50829) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50911 * C129) * C696 +
                (C117 * C130 + C50911 * C143) * C50753) *
                   C110 +
               (C171 * C696 + C172 * C50753) * C111 +
               (C173 * C696 + C174 * C50753) * C112 +
               (C175 * C696 + C176 * C50753) * C113) *
                  C50900 * C50841 * C692 -
              ((C332 * C50753 + C331 * C696) * C113 +
               (C330 * C50753 + C329 * C696) * C112 +
               (C328 * C50753 + C327 * C696) * C111 +
               ((C117 * C293 + C50911 * C304) * C50753 +
                (C117 * C287 + C50911 * C294) * C696) *
                   C110) *
                  C50900 * C50841 * C693 +
              (((C117 * C587 + C50911 * C592) * C696 +
                (C117 * C593 + C50911 * C602) * C50753) *
                   C110 +
               (C620 * C696 + C621 * C50753) * C111 +
               (C622 * C696 + C623 * C50753) * C112 +
               (C624 * C696 + C625 * C50753) * C113) *
                  C50900 * C50841 * C694 -
              (((C117 * C701 + C50911 * C709) * C50753 +
                (C117 * C697 + C50911 * C702) * C696) *
                   C113 +
               ((C117 * C703 + C50911 * C710) * C50753 +
                (C117 * C698 + C50911 * C704) * C696) *
                   C112 +
               ((C117 * C705 + C50911 * C711) * C50753 +
                (C117 * C699 + C50911 * C706) * C696) *
                   C111 +
               ((C117 * C707 + C50911 * C712) * C50753 +
                (C117 * C700 + C50911 * C708) * C696) *
                   C110) *
                  C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C117 * C122 + C50911 * C129) * C696 +
                                 (C117 * C130 + C50911 * C143) * C50753) *
                                    C110 +
                                (C171 * C696 + C172 * C50753) * C111 +
                                (C173 * C696 + C174 * C50753) * C112 +
                                (C175 * C696 + C176 * C50753) * C113) *
                                   C50900 * C941 -
                               ((C480 * C50753 + C479 * C696) * C113 +
                                (C478 * C50753 + C477 * C696) * C112 +
                                (C476 * C50753 + C475 * C696) * C111 +
                                ((C117 * C441 + C50911 * C452) * C50753 +
                                 (C117 * C435 + C50911 * C442) * C696) *
                                    C110) *
                                   C50900 * C942 +
                               (((C117 * C944 + C50911 * C949) * C696 +
                                 (C117 * C950 + C50911 * C959) * C50753) *
                                    C110 +
                                (C977 * C696 + C978 * C50753) * C111 +
                                (C979 * C696 + C980 * C50753) * C112 +
                                (C981 * C696 + C982 * C50753) * C113) *
                                   C50900 * C943) *
                                  C51040 +
                              ((((C117 * C811 + C50911 * C819) * C696 +
                                 (C117 * C820 + C50911 * C835) * C50753) *
                                    C110 +
                                ((C117 * C812 + C50911 * C821) * C696 +
                                 (C117 * C822 + C50911 * C836) * C50753) *
                                    C111 +
                                ((C117 * C813 + C50911 * C823) * C696 +
                                 (C117 * C824 + C50911 * C837) * C50753) *
                                    C112 +
                                ((C117 * C814 + C50911 * C825) * C696 +
                                 (C117 * C826 + C50911 * C838) * C50753) *
                                    C113) *
                                   C50900 * C942 -
                               ((C332 * C50753 + C331 * C696) * C113 +
                                (C330 * C50753 + C329 * C696) * C112 +
                                (C328 * C50753 + C327 * C696) * C111 +
                                ((C117 * C293 + C50911 * C304) * C50753 +
                                 (C117 * C287 + C50911 * C294) * C696) *
                                    C110) *
                                   C50900 * C941 -
                               (((C117 * C1084 + C50911 * C1092) * C50753 +
                                 (C117 * C1080 + C50911 * C1085) * C696) *
                                    C113 +
                                ((C117 * C1086 + C50911 * C1093) * C50753 +
                                 (C117 * C1081 + C50911 * C1087) * C696) *
                                    C112 +
                                ((C117 * C1088 + C50911 * C1094) * C50753 +
                                 (C117 * C1082 + C50911 * C1089) * C696) *
                                    C111 +
                                ((C117 * C1090 + C50911 * C1095) * C50753 +
                                 (C117 * C1083 + C50911 * C1091) * C696) *
                                    C110) *
                                   C50900 * C943) *
                                  C50829)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50778) *
               C2302 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C2300 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C50778) *
               C2303 +
           ((C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C2300 +
            (C2474 + C2475 - C2476 - C2477 + C2478 + C2479) * C50778) *
               C2304) *
              C50841 * C51040 +
          (((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C2300 +
            (C2462 - (C2461 + C2460) + C2463 - C2464 - C2465) * C50778) *
               C2302 +
           ((C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C2300 +
            (C2476 - (C2475 + C2474) + C2477 - C2478 - C2479) * C50778) *
               C2303 +
           ((C2492 * C284 -
             ((C117 * C707 + C50911 * C712) * C278 +
              (C117 * C700 + C50911 * C708) * C283) +
             C2493 * C279 - C2494 * C285 - C2495 * C280) *
                C2300 +
            (C2494 * C284 - (C2493 * C278 + C2492 * C283) + C2495 * C279 -
             (C117 * C697 + C50911 * C702) * C285 -
             (C117 * C701 + C50911 * C709) * C280) *
                C50778) *
               C2304) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C2300 +
            (C171 * C696 + C172 * C50753) * C50778) *
               C2302 +
           ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
           C2997 * C2304) *
              C50841 * C692 -
          (C2998 * C2304 +
           ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
           ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
              C50841 * C693 +
          (C2997 * C2302 +
           ((C2978 + C2977) * C2300 + (C2976 + C2975) * C50778) * C2303 +
           ((C2995 + C2996) * C2300 + (C2983 + C2984) * C50778) * C2304) *
              C50841 * C694 -
          ((((C117 * C2960 + C50911 * C2964) * C50753 +
             (C117 * C2958 + C50911 * C2961) * C696) *
                C50778 +
            ((C117 * C2962 + C50911 * C2965) * C50753 +
             (C117 * C2959 + C50911 * C2963) * C696) *
                C2300) *
               C2304 +
           ((C2984 + C2983) * C50778 + (C2996 + C2995) * C2300) * C2303 +
           C2998 * C2302) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C2300 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C2302 +
            ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
            C2997 * C2304) *
               C941 -
           (C3201 * C2304 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C2300) * C2303 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C2300) *
                C2302) *
               C942 +
           ((((C117 * C944 + C50911 * C949) * C696 +
              (C117 * C950 + C50911 * C959) * C50753) *
                 C2300 +
             (C977 * C696 + C978 * C50753) * C50778) *
                C2302 +
            ((C3542 + C3543) * C2300 + (C3530 + C3531) * C50778) * C2303 +
            ((C3544 + C3545) * C2300 + (C3536 + C3537) * C50778) * C2304) *
               C943) *
              C51040 +
          ((((C3194 + C3193) * C2300 + (C3168 + C3167) * C50778) * C2302 +
            ((C3192 + C3191) * C2300 + (C3162 + C3161) * C50778) * C2303 +
            ((C3195 + C3196) * C2300 + (C3197 + C3198) * C50778) * C2304) *
               C942 -
           (C2998 * C2304 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
               C941 -
           ((((C117 * C3519 + C50911 * C3523) * C50753 +
              (C117 * C3517 + C50911 * C3520) * C696) *
                 C50778 +
             ((C117 * C3521 + C50911 * C3524) * C50753 +
              (C117 * C3518 + C50911 * C3522) * C696) *
                 C2300) *
                C2304 +
            ((C3537 + C3536) * C50778 + (C3545 + C3544) * C2300) * C2303 +
            ((C3531 + C3530) * C50778 + (C3543 + C3542) * C2300) * C2302) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C279 +
            (C5357 + C5358 + C5359) * C285 + (C5360 + C5361 + C5362) * C280) *
               C2300 +
           ((C5353 + C5352 + C5351) * C283 + (C5356 + C5355 + C5354) * C278 -
            (C5359 + C5358 + C5357) * C284 - (C5362 + C5361 + C5360) * C279 +
            (C5365 + C5364 + C5363) * C285 + (C5368 + C5367 + C5366) * C280) *
               C50778) *
              C50900 * C50841 * C51040 +
          (((C5539 + C5540 + C5541) * C284 -
            ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
              C5311 * C293 + C5308 * C304) *
                 C278 +
             (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
              C5311 * C287 + C5308 * C294) *
                 C283) +
            (C5542 + C5543 + C5544) * C279 - (C5545 + C5546 + C5547) * C285 -
            (C5548 + C5549 + C5550) * C280) *
               C2300 +
           ((C5547 + C5546 + C5545) * C284 -
            ((C5544 + C5543 + C5542) * C278 + (C5541 + C5540 + C5539) * C283) +
            (C5550 + C5549 + C5548) * C279 -
            (C5313 * C1080 + C5310 * C1085 + C5312 * C814 + C5309 * C825 +
             C5311 * C289 + C5308 * C298) *
                C285 -
            (C5313 * C1084 + C5310 * C1092 + C5312 * C826 + C5309 * C838 +
             C5311 * C299 + C5308 * C307) *
                C280) *
               C50778) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C696 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C50753) *
               C2300 +
           ((C5353 + C5352 + C5351) * C696 + (C5356 + C5355 + C5354) * C50753) *
               C50778) *
              C50900 * C50841 * C692 -
          (((C5544 + C5543 + C5542) * C50753 + (C5541 + C5540 + C5539) * C696) *
               C50778 +
           ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
             C5311 * C293 + C5308 * C304) *
                C50753 +
            (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
             C5311 * C287 + C5308 * C294) *
                C696) *
               C2300) *
              C50900 * C50841 * C693 +
          (((C5311 * C587 + C5308 * C592 + C5312 * C818 + C5309 * C834 +
             C5313 * C3347 + C5310 * C3350) *
                C696 +
            (C5311 * C593 + C5308 * C602 + C5312 * C833 + C5309 * C842 +
             C5313 * C3351 + C5310 * C3356) *
                C50753) *
               C2300 +
           ((C5893 + C5892 + C5891) * C696 + (C5896 + C5895 + C5894) * C50753) *
               C50778) *
              C50900 * C50841 * C694 -
          (((C5313 * C3519 + C5310 * C3523 + C5312 * C3151 + C5309 * C3157 +
             C5311 * C705 + C5308 * C711) *
                C50753 +
            (C5313 * C3517 + C5310 * C3520 + C5312 * C3145 + C5309 * C3150 +
             C5311 * C699 + C5308 * C706) *
                C696) *
               C50778 +
           ((C5313 * C3521 + C5310 * C3524 + C5312 * C3149 + C5309 * C3156 +
             C5311 * C707 + C5308 * C712) *
                C50753 +
            (C5313 * C3518 + C5310 * C3522 + C5312 * C3144 + C5309 * C3148 +
             C5311 * C700 + C5308 * C708) *
                C696) *
               C2300) *
              C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C696 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C50753) *
                C2300 +
            ((C5353 + C5352 + C5351) * C696 +
             (C5356 + C5355 + C5354) * C50753) *
                C50778) *
               C50900 * C941 -
           (((C5726 + C5725 + C5724) * C50753 +
             (C5723 + C5722 + C5721) * C696) *
                C50778 +
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C50753 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C696) *
                C2300) *
               C50900 * C942 +
           (((C5311 * C944 + C5308 * C949 + C5312 * C1169 + C5309 * C1177 +
              C5313 * C6286 + C5310 * C6289) *
                 C696 +
             (C5311 * C950 + C5308 * C959 + C5312 * C1176 + C5309 * C1181 +
              C5313 * C6290 + C5310 * C6295) *
                 C50753) *
                C2300 +
            ((C6313 + C6312 + C6311) * C696 +
             (C6316 + C6315 + C6314) * C50753) *
                C50778) *
               C50900 * C943) *
              C51040 +
          ((((C5311 * C811 + C5308 * C819 + C5312 * C1083 + C5309 * C1091 +
              C5313 * C3646 + C5310 * C3654) *
                 C696 +
             (C5311 * C820 + C5308 * C835 + C5312 * C1090 + C5309 * C1095 +
              C5313 * C3653 + C5310 * C3658) *
                 C50753) *
                C2300 +
            ((C5311 * C812 + C5308 * C821 + C5312 * C1082 + C5309 * C1089 +
              C5313 * C3645 + C5310 * C3652) *
                 C696 +
             (C5311 * C822 + C5308 * C836 + C5312 * C1088 + C5309 * C1094 +
              C5313 * C3651 + C5310 * C3657) *
                 C50753) *
                C50778) *
               C50900 * C942 -
           (((C5544 + C5543 + C5542) * C50753 +
             (C5541 + C5540 + C5539) * C696) *
                C50778 +
            ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
              C5311 * C293 + C5308 * C304) *
                 C50753 +
             (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
              C5311 * C287 + C5308 * C294) *
                 C696) *
                C2300) *
               C50900 * C941 -
           (((C5313 * C6464 + C5310 * C6468 + C5312 * C3651 + C5309 * C3657 +
              C5311 * C1088 + C5308 * C1094) *
                 C50753 +
             (C5313 * C6462 + C5310 * C6465 + C5312 * C3645 + C5309 * C3652 +
              C5311 * C1082 + C5308 * C1089) *
                 C696) *
                C50778 +
            ((C5313 * C6466 + C5310 * C6469 + C5312 * C3653 + C5309 * C3658 +
              C5311 * C1090 + C5308 * C1095) *
                 C50753 +
             (C5313 * C6463 + C5310 * C6467 + C5312 * C3646 + C5309 * C3654 +
              C5311 * C1083 + C5308 * C1091) *
                 C696) *
                C2300) *
               C50900 * C943) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50911 * C129) * C283 +
                (C117 * C130 + C50911 * C143) * C278 - C171 * C284 -
                C172 * C279 + C173 * C285 + C174 * C280) *
                   C110 +
               (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                C175 * C285 + C176 * C280) *
                   C111 +
               (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                C177 * C285 + C178 * C280) *
                   C112 +
               (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
                C179 * C285 + C180 * C280) *
                   C113) *
                  C50900 * C51041 +
              ((C475 * C284 -
                ((C117 * C441 + C50911 * C452) * C278 +
                 (C117 * C435 + C50911 * C442) * C283) +
                C476 * C279 - C477 * C285 - C478 * C280) *
                   C110 +
               (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
                C479 * C285 - C480 * C280) *
                   C111 +
               (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
                C481 * C285 - C482 * C280) *
                   C112 +
               (C481 * C284 - (C480 * C278 + C479 * C283) + C482 * C279 -
                (C117 * C439 + C50911 * C450) * C285 -
                (C117 * C451 + C50911 * C457) * C280) *
                   C113) *
                  C50900 * C50853) *
             C50815 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50911 * C129) * C696 +
                 (C117 * C130 + C50911 * C143) * C50753) *
                    C110 +
                (C171 * C696 + C172 * C50753) * C111 +
                (C173 * C696 + C174 * C50753) * C112 +
                (C175 * C696 + C176 * C50753) * C113) *
                   C50900 * C51041 -
               ((C480 * C50753 + C479 * C696) * C113 +
                (C478 * C50753 + C477 * C696) * C112 +
                (C476 * C50753 + C475 * C696) * C111 +
                ((C117 * C441 + C50911 * C452) * C50753 +
                 (C117 * C435 + C50911 * C442) * C696) *
                    C110) *
                   C50900 * C50853) *
                  C582 +
              ((((C117 * C811 + C50911 * C819) * C696 +
                 (C117 * C820 + C50911 * C835) * C50753) *
                    C110 +
                ((C117 * C812 + C50911 * C821) * C696 +
                 (C117 * C822 + C50911 * C836) * C50753) *
                    C111 +
                ((C117 * C813 + C50911 * C823) * C696 +
                 (C117 * C824 + C50911 * C837) * C50753) *
                    C112 +
                ((C117 * C814 + C50911 * C825) * C696 +
                 (C117 * C826 + C50911 * C838) * C50753) *
                    C113) *
                   C50900 * C50853 -
               ((C332 * C50753 + C331 * C696) * C113 +
                (C330 * C50753 + C329 * C696) * C112 +
                (C328 * C50753 + C327 * C696) * C111 +
                ((C117 * C293 + C50911 * C304) * C50753 +
                 (C117 * C287 + C50911 * C294) * C696) *
                    C110) *
                   C50900 * C51041) *
                  C583 +
              ((((C117 * C587 + C50911 * C592) * C696 +
                 (C117 * C593 + C50911 * C602) * C50753) *
                    C110 +
                (C620 * C696 + C621 * C50753) * C111 +
                (C622 * C696 + C623 * C50753) * C112 +
                (C624 * C696 + C625 * C50753) * C113) *
                   C50900 * C51041 -
               (((C117 * C827 + C50911 * C839) * C50753 +
                 (C117 * C815 + C50911 * C828) * C696) *
                    C113 +
                ((C117 * C829 + C50911 * C840) * C50753 +
                 (C117 * C816 + C50911 * C830) * C696) *
                    C112 +
                ((C117 * C831 + C50911 * C841) * C50753 +
                 (C117 * C817 + C50911 * C832) * C696) *
                    C111 +
                ((C117 * C833 + C50911 * C842) * C50753 +
                 (C117 * C818 + C50911 * C834) * C696) *
                    C110) *
                   C50900 * C50853) *
                  C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C696 +
            (C117 * C130 + C50911 * C143) * C50753) *
               C110 +
           (C171 * C696 + C172 * C50753) * C111 +
           (C173 * C696 + C174 * C50753) * C112 +
           (C175 * C696 + C176 * C50753) * C113) *
              C50900 * C1162 -
          ((C480 * C50753 + C479 * C696) * C113 +
           (C478 * C50753 + C477 * C696) * C112 +
           (C476 * C50753 + C475 * C696) * C111 +
           ((C117 * C441 + C50911 * C452) * C50753 +
            (C117 * C435 + C50911 * C442) * C696) *
               C110) *
              C50900 * C1163 +
          (((C117 * C944 + C50911 * C949) * C696 +
            (C117 * C950 + C50911 * C959) * C50753) *
               C110 +
           (C977 * C696 + C978 * C50753) * C111 +
           (C979 * C696 + C980 * C50753) * C112 +
           (C981 * C696 + C982 * C50753) * C113) *
              C50900 * C1164 -
          (((C117 * C1170 + C50911 * C1178) * C50753 +
            (C117 * C1166 + C50911 * C1171) * C696) *
               C113 +
           ((C117 * C1172 + C50911 * C1179) * C50753 +
            (C117 * C1167 + C50911 * C1173) * C696) *
               C112 +
           ((C117 * C1174 + C50911 * C1180) * C50753 +
            (C117 * C1168 + C50911 * C1175) * C696) *
               C111 +
           ((C117 * C1176 + C50911 * C1181) * C50753 +
            (C117 * C1169 + C50911 * C1177) * C696) *
               C110) *
              C50900 * C1165) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50778) *
               C2302 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C2300 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C50778) *
               C2303 +
           ((C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C2300 +
            (C2474 + C2475 - C2476 - C2477 + C2478 + C2479) * C50778) *
               C2304) *
              C51041 +
          (((C475 * C284 -
             ((C117 * C441 + C50911 * C452) * C278 +
              (C117 * C435 + C50911 * C442) * C283) +
             C476 * C279 - C477 * C285 - C478 * C280) *
                C2300 +
            (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
             C479 * C285 - C480 * C280) *
                C50778) *
               C2302 +
           ((C1540 * C284 -
             ((C117 * C820 + C50911 * C835) * C278 +
              (C117 * C811 + C50911 * C819) * C283) +
             C1541 * C279 - C1542 * C285 - C1543 * C280) *
                C2300 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50778) *
               C2303 +
           ((C2654 * C284 -
             ((C117 * C833 + C50911 * C842) * C278 +
              (C117 * C818 + C50911 * C834) * C283) +
             C2655 * C279 - C2656 * C285 - C2657 * C280) *
                C2300 +
            (C2656 * C284 - (C2655 * C278 + C2654 * C283) + C2657 * C279 -
             (C117 * C815 + C50911 * C828) * C285 -
             (C117 * C827 + C50911 * C839) * C280) *
                C50778) *
               C2304) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C2300 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C2302 +
            ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
            C2997 * C2304) *
               C51041 -
           (C3201 * C2304 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C2300) * C2303 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C2300) *
                C2302) *
               C50853) *
              C582 +
          ((((C3194 + C3193) * C2300 + (C3168 + C3167) * C50778) * C2302 +
            ((C3192 + C3191) * C2300 + (C3162 + C3161) * C50778) * C2303 +
            ((C3195 + C3196) * C2300 + (C3197 + C3198) * C50778) * C2304) *
               C50853 -
           (C2998 * C2304 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
               C51041) *
              C583 +
          ((C2997 * C2302 +
            ((C2978 + C2977) * C2300 + (C2976 + C2975) * C50778) * C2303 +
            ((C2995 + C2996) * C2300 + (C2983 + C2984) * C50778) * C2304) *
               C51041 -
           ((((C117 * C3152 + C50911 * C3158) * C50753 +
              (C117 * C3146 + C50911 * C3153) * C696) *
                 C50778 +
             ((C117 * C3154 + C50911 * C3159) * C50753 +
              (C117 * C3147 + C50911 * C3155) * C696) *
                 C2300) *
                C2304 +
            ((C3198 + C3197) * C50778 + (C3196 + C3195) * C2300) * C2303 +
            C3201 * C2302) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C2300 +
            (C171 * C696 + C172 * C50753) * C50778) *
               C2302 +
           ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
           C2997 * C2304) *
              C1162 -
          (C3201 * C2304 +
           ((C3167 + C3168) * C50778 + (C3193 + C3194) * C2300) * C2303 +
           ((C476 * C50753 + C475 * C696) * C50778 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C2300) *
               C2302) *
              C1163 +
          ((((C117 * C944 + C50911 * C949) * C696 +
             (C117 * C950 + C50911 * C959) * C50753) *
                C2300 +
            (C977 * C696 + C978 * C50753) * C50778) *
               C2302 +
           ((C3542 + C3543) * C2300 + (C3530 + C3531) * C50778) * C2303 +
           ((C3544 + C3545) * C2300 + (C3536 + C3537) * C50778) * C2304) *
              C1164 -
          ((((C117 * C3647 + C50911 * C3655) * C50753 +
             (C117 * C3643 + C50911 * C3648) * C696) *
                C50778 +
            ((C117 * C3649 + C50911 * C3656) * C50753 +
             (C117 * C3644 + C50911 * C3650) * C696) *
                C2300) *
               C2304 +
           (((C117 * C3651 + C50911 * C3657) * C50753 +
             (C117 * C3645 + C50911 * C3652) * C696) *
                C50778 +
            ((C117 * C3653 + C50911 * C3658) * C50753 +
             (C117 * C3646 + C50911 * C3654) * C696) *
                C2300) *
               C2303 +
           (((C117 * C1174 + C50911 * C1180) * C50753 +
             (C117 * C1168 + C50911 * C1175) * C696) *
                C50778 +
            ((C117 * C1176 + C50911 * C1181) * C50753 +
             (C117 * C1169 + C50911 * C1177) * C696) *
                C2300) *
               C2302) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C279 +
            (C5357 + C5358 + C5359) * C285 + (C5360 + C5361 + C5362) * C280) *
               C2300 +
           ((C5353 + C5352 + C5351) * C283 + (C5356 + C5355 + C5354) * C278 -
            (C5359 + C5358 + C5357) * C284 - (C5362 + C5361 + C5360) * C279 +
            (C5365 + C5364 + C5363) * C285 + (C5368 + C5367 + C5366) * C280) *
               C50778) *
              C50900 * C51041 +
          (((C5721 + C5722 + C5723) * C284 -
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C278 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C283) +
            (C5724 + C5725 + C5726) * C279 - (C5727 + C5728 + C5729) * C285 -
            (C5730 + C5731 + C5732) * C280) *
               C2300 +
           ((C5729 + C5728 + C5727) * C284 -
            ((C5726 + C5725 + C5724) * C278 + (C5723 + C5722 + C5721) * C283) +
            (C5732 + C5731 + C5730) * C279 -
            (C5313 * C1166 + C5310 * C1171 + C5312 * C947 + C5309 * C955 +
             C5311 * C437 + C5308 * C446) *
                C285 -
            (C5313 * C1170 + C5310 * C1178 + C5312 * C956 + C5309 * C962 +
             C5311 * C447 + C5308 * C455) *
                C280) *
               C50778) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C696 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C50753) *
                C2300 +
            ((C5353 + C5352 + C5351) * C696 +
             (C5356 + C5355 + C5354) * C50753) *
                C50778) *
               C50900 * C51041 -
           (((C5726 + C5725 + C5724) * C50753 +
             (C5723 + C5722 + C5721) * C696) *
                C50778 +
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C50753 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C696) *
                C2300) *
               C50900 * C50853) *
              C582 +
          ((((C5311 * C811 + C5308 * C819 + C5312 * C1083 + C5309 * C1091 +
              C5313 * C3646 + C5310 * C3654) *
                 C696 +
             (C5311 * C820 + C5308 * C835 + C5312 * C1090 + C5309 * C1095 +
              C5313 * C3653 + C5310 * C3658) *
                 C50753) *
                C2300 +
            ((C5311 * C812 + C5308 * C821 + C5312 * C1082 + C5309 * C1089 +
              C5313 * C3645 + C5310 * C3652) *
                 C696 +
             (C5311 * C822 + C5308 * C836 + C5312 * C1088 + C5309 * C1094 +
              C5313 * C3651 + C5310 * C3657) *
                 C50753) *
                C50778) *
               C50900 * C50853 -
           (((C5544 + C5543 + C5542) * C50753 +
             (C5541 + C5540 + C5539) * C696) *
                C50778 +
            ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
              C5311 * C293 + C5308 * C304) *
                 C50753 +
             (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
              C5311 * C287 + C5308 * C294) *
                 C696) *
                C2300) *
               C50900 * C51041) *
              C583 +
          ((((C5311 * C587 + C5308 * C592 + C5312 * C818 + C5309 * C834 +
              C5313 * C3347 + C5310 * C3350) *
                 C696 +
             (C5311 * C593 + C5308 * C602 + C5312 * C833 + C5309 * C842 +
              C5313 * C3351 + C5310 * C3356) *
                 C50753) *
                C2300 +
            ((C5893 + C5892 + C5891) * C696 +
             (C5896 + C5895 + C5894) * C50753) *
                C50778) *
               C50900 * C51041 -
           (((C5313 * C3647 + C5310 * C3655 + C5312 * C3353 + C5309 * C3357 +
              C5311 * C831 + C5308 * C841) *
                 C50753 +
             (C5313 * C3643 + C5310 * C3648 + C5312 * C3348 + C5309 * C3352 +
              C5311 * C817 + C5308 * C832) *
                 C696) *
                C50778 +
            ((C5313 * C3649 + C5310 * C3656 + C5312 * C3351 + C5309 * C3356 +
              C5311 * C833 + C5308 * C842) *
                 C50753 +
             (C5313 * C3644 + C5310 * C3650 + C5312 * C3347 + C5309 * C3350 +
              C5311 * C818 + C5308 * C834) *
                 C696) *
                C2300) *
               C50900 * C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C696 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C50753) *
               C2300 +
           ((C5353 + C5352 + C5351) * C696 + (C5356 + C5355 + C5354) * C50753) *
               C50778) *
              C50900 * C1162 -
          (((C5726 + C5725 + C5724) * C50753 + (C5723 + C5722 + C5721) * C696) *
               C50778 +
           ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
             C5311 * C441 + C5308 * C452) *
                C50753 +
            (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
             C5311 * C435 + C5308 * C442) *
                C696) *
               C2300) *
              C50900 * C1163 +
          (((C5311 * C944 + C5308 * C949 + C5312 * C1169 + C5309 * C1177 +
             C5313 * C6286 + C5310 * C6289) *
                C696 +
            (C5311 * C950 + C5308 * C959 + C5312 * C1176 + C5309 * C1181 +
             C5313 * C6290 + C5310 * C6295) *
                C50753) *
               C2300 +
           ((C6313 + C6312 + C6311) * C696 + (C6316 + C6315 + C6314) * C50753) *
               C50778) *
              C50900 * C1164 -
          (((C5313 * C6570 + C5310 * C6574 + C5312 * C6292 + C5309 * C6296 +
             C5311 * C1174 + C5308 * C1180) *
                C50753 +
            (C5313 * C6568 + C5310 * C6571 + C5312 * C6287 + C5309 * C6291 +
             C5311 * C1168 + C5308 * C1175) *
                C696) *
               C50778 +
           ((C5313 * C6572 + C5310 * C6575 + C5312 * C6290 + C5309 * C6295 +
             C5311 * C1176 + C5308 * C1181) *
                C50753 +
            (C5313 * C6569 + C5310 * C6573 + C5312 * C6286 + C5309 * C6289 +
             C5311 * C1169 + C5308 * C1177) *
                C696) *
               C2300) *
              C50900 * C1165) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1285 +
             (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
             C172 * C51067 + C173 * C1287 + C174 * C1282) *
                C2300 +
            (C171 * C1285 + C172 * C51083 - C173 * C1286 - C174 * C51067 +
             C175 * C1287 + C176 * C1282) *
                C50778) *
               C2302 +
           ((C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C2300 +
            (C3812 + C3813 - C3814 - C3815 + C3816 + C3817) * C50778) *
               C2303 +
           ((C3818 + C3819 - C3820 - C3821 + C3822 + C3823) * C2300 +
            (C3824 + C3825 - C3826 - C3827 + C3828 + C3829) * C50778) *
               C2304) *
              C1643 +
          (((C475 * C1286 -
             ((C117 * C441 + C50911 * C452) * C51083 +
              (C117 * C435 + C50911 * C442) * C1285) +
             C476 * C51067 - C477 * C1287 - C478 * C1282) *
                C2300 +
            (C477 * C1286 - (C476 * C51083 + C475 * C1285) + C478 * C51067 -
             C479 * C1287 - C480 * C1282) *
                C50778) *
               C2302 +
           ((C1540 * C1286 - (C3184 * C51083 + C3185 * C1285) + C1541 * C51067 -
             C1542 * C1287 - C1543 * C1282) *
                C2300 +
            (C1542 * C1286 - (C1541 * C51083 + C1540 * C1285) + C1543 * C51067 -
             C1544 * C1287 - C1545 * C1282) *
                C50778) *
               C2303 +
           ((C2654 * C1286 - (C3182 * C51083 + C3183 * C1285) + C2655 * C51067 -
             C2656 * C1287 - C2657 * C1282) *
                C2300 +
            (C2656 * C1286 - (C2655 * C51083 + C2654 * C1285) + C2657 * C51067 -
             (C117 * C815 + C50911 * C828) * C1287 -
             (C117 * C827 + C50911 * C839) * C1282) *
                C50778) *
               C2304) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1285 +
            (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
            C172 * C51067 + C173 * C1287 + C174 * C1282) *
               C110 +
           (C171 * C1285 + C172 * C51083 - C173 * C1286 - C174 * C51067 +
            C175 * C1287 + C176 * C1282) *
               C111 +
           (C173 * C1285 + C174 * C51083 - C175 * C1286 - C176 * C51067 +
            C177 * C1287 + C178 * C1282) *
               C112 +
           (C175 * C1285 + C176 * C51083 - C177 * C1286 - C178 * C51067 +
            C179 * C1287 + C180 * C1282) *
               C113) *
              C50900 * C1643 +
          ((C475 * C1286 -
            ((C117 * C441 + C50911 * C452) * C51083 +
             (C117 * C435 + C50911 * C442) * C1285) +
            C476 * C51067 - C477 * C1287 - C478 * C1282) *
               C110 +
           (C477 * C1286 - (C476 * C51083 + C475 * C1285) + C478 * C51067 -
            C479 * C1287 - C480 * C1282) *
               C111 +
           (C479 * C1286 - (C478 * C51083 + C477 * C1285) + C480 * C51067 -
            C481 * C1287 - C482 * C1282) *
               C112 +
           (C481 * C1286 - (C480 * C51083 + C479 * C1285) + C482 * C51067 -
            (C117 * C439 + C50911 * C450) * C1287 -
            (C117 * C451 + C50911 * C457) * C1282) *
               C113) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C1285 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C51083 -
            (C5351 + C5352 + C5353) * C1286 - (C5354 + C5355 + C5356) * C51067 +
            (C5357 + C5358 + C5359) * C1287 + (C5360 + C5361 + C5362) * C1282) *
               C2300 +
           ((C5353 + C5352 + C5351) * C1285 + (C5356 + C5355 + C5354) * C51083 -
            (C5359 + C5358 + C5357) * C1286 - (C5362 + C5361 + C5360) * C51067 +
            (C5365 + C5364 + C5363) * C1287 + (C5368 + C5367 + C5366) * C1282) *
               C50778) *
              C50900 * C1643 +
          (((C5721 + C5722 + C5723) * C1286 -
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C51083 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C1285) +
            (C5724 + C5725 + C5726) * C51067 - (C5727 + C5728 + C5729) * C1287 -
            (C5730 + C5731 + C5732) * C1282) *
               C2300 +
           ((C5729 + C5728 + C5727) * C1286 -
            ((C5726 + C5725 + C5724) * C51083 +
             (C5723 + C5722 + C5721) * C1285) +
            (C5732 + C5731 + C5730) * C51067 -
            (C5313 * C1166 + C5310 * C1171 + C5312 * C947 + C5309 * C955 +
             C5311 * C437 + C5308 * C446) *
                C1287 -
            (C5313 * C1170 + C5310 * C1178 + C5312 * C956 + C5309 * C962 +
             C5311 * C447 + C5308 * C455) *
                C1282) *
               C50778) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C1391 +
              (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
              C172 * C50758) *
                 C2300 +
             (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                 C50778) *
                C2302 +
            ((C3976 + C3977 - C3978 - C3979) * C2300 +
             (C3980 + C3981 - C3982 - C3983) * C50778) *
                C2303 +
            C4008 * C2304) *
               C1643 +
           (((C475 * C1392 -
              ((C117 * C441 + C50911 * C452) * C1386 +
               (C117 * C435 + C50911 * C442) * C1391) +
              C476 * C50758) *
                 C2300 +
             (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                 C50778) *
                C2302 +
            ((C4207 - (C4208 + C4209) + C4210) * C2300 +
             (C4211 - (C4212 + C4213) + C4214) * C50778) *
                C2303 +
            ((C4215 - (C4216 + C4217) + C4218) * C2300 +
             (C4219 - (C4220 + C4221) + C4222) * C50778) *
                C2304) *
               C50853) *
              C51040 +
          ((((C3978 - (C3977 + C3976) + C3979) * C2300 +
             (C3982 - (C3981 + C3980) + C3983) * C50778) *
                C2302 +
            ((C3986 - (C3985 + C3984) + C3987) * C2300 +
             (C3990 - (C3989 + C3988) + C3991) * C50778) *
                C2303 +
            ((C3992 - (C3993 + C3994) + C3995) * C2300 +
             (C3996 - (C3997 + C3998) + C3999) * C50778) *
                C2304) *
               C1643 +
           (((C4209 + C4208 - C4207 - C4210) * C2300 +
             (C4213 + C4212 - C4211 - C4214) * C50778) *
                C2302 +
            ((C4217 + C4216 - C4215 - C4218) * C2300 +
             (C4221 + C4220 - C4219 - C4222) * C50778) *
                C2303 +
            ((C3186 * C1391 + C3187 * C1386 - C3188 * C1392 - C3189 * C50758) *
                 C2300 +
             (C3188 * C1391 + C3189 * C1386 -
              (C117 * C4202 + C50911 * C4203) * C1392 -
              (C117 * C4204 + C50911 * C4205) * C50758) *
                 C50778) *
                C2304) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C110 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C111 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                C112 +
            (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50758) *
                C113) *
               C50900 * C1643 +
           ((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C110 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                C111 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                C112 +
            (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50758) *
                C113) *
               C50900 * C50853) *
              C51040 +
          (((C327 * C1392 -
             ((C117 * C293 + C50911 * C304) * C1386 +
              (C117 * C287 + C50911 * C294) * C1391) +
             C328 * C50758) *
                C110 +
            (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50758) *
                C111 +
            (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50758) *
                C112 +
            (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50758) *
                C113) *
               C50900 * C1643 +
           (((C117 * C811 + C50911 * C819) * C1391 +
             (C117 * C820 + C50911 * C835) * C1386 - C1540 * C1392 -
             C1541 * C50758) *
                C110 +
            (C1540 * C1391 + C1541 * C1386 - C1542 * C1392 - C1543 * C50758) *
                C111 +
            (C1542 * C1391 + C1543 * C1386 - C1544 * C1392 - C1545 * C50758) *
                C112 +
            (C1544 * C1391 + C1545 * C1386 -
             (C117 * C1523 + C50911 * C1524) * C1392 -
             (C117 * C1525 + C50911 * C1526) * C50758) *
                C113) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C1391 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C1386 -
             (C5351 + C5352 + C5353) * C1392 -
             (C5354 + C5355 + C5356) * C50758) *
                C2300 +
            ((C5353 + C5352 + C5351) * C1391 + (C5356 + C5355 + C5354) * C1386 -
             (C5359 + C5358 + C5357) * C1392 -
             (C5362 + C5361 + C5360) * C50758) *
                C50778) *
               C50900 * C1643 +
           (((C5721 + C5722 + C5723) * C1392 -
             ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
               C5311 * C441 + C5308 * C452) *
                  C1386 +
              (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
               C5311 * C435 + C5308 * C442) *
                  C1391) +
             (C5724 + C5725 + C5726) * C50758) *
                C2300 +
            ((C5729 + C5728 + C5727) * C1392 -
             ((C5726 + C5725 + C5724) * C1386 +
              (C5723 + C5722 + C5721) * C1391) +
             (C5732 + C5731 + C5730) * C50758) *
                C50778) *
               C50900 * C50853) *
              C51040 +
          ((((C5539 + C5540 + C5541) * C1392 -
             ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
               C5311 * C293 + C5308 * C304) *
                  C1386 +
              (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
               C5311 * C287 + C5308 * C294) *
                  C1391) +
             (C5542 + C5543 + C5544) * C50758) *
                C2300 +
            ((C5547 + C5546 + C5545) * C1392 -
             ((C5544 + C5543 + C5542) * C1386 +
              (C5541 + C5540 + C5539) * C1391) +
             (C5550 + C5549 + C5548) * C50758) *
                C50778) *
               C50900 * C1643 +
           (((C5311 * C811 + C5308 * C819 + C5312 * C1083 + C5309 * C1091 +
              C5313 * C3646 + C5310 * C3654) *
                 C1391 +
             (C5311 * C820 + C5308 * C835 + C5312 * C1090 + C5309 * C1095 +
              C5313 * C3653 + C5310 * C3658) *
                 C1386 -
             (C7079 + C7080 + C7081) * C1392 -
             (C7082 + C7083 + C7084) * C50758) *
                C2300 +
            ((C7081 + C7080 + C7079) * C1391 + (C7084 + C7083 + C7082) * C1386 -
             (C5313 * C7062 + C5310 * C7063 + C5312 * C1081 + C5309 * C1087 +
              C5311 * C813 + C5308 * C823) *
                 C1392 -
             (C5313 * C7064 + C5310 * C7065 + C5312 * C1086 + C5309 * C1093 +
              C5311 * C824 + C5308 * C837) *
                 C50758) *
                C50778) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C2300 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C50778) *
               C2302 +
           ((C3976 + C3977 - C3978 - C3979) * C2300 +
            (C3980 + C3981 - C3982 - C3983) * C50778) *
               C2303 +
           C4008 * C2304) *
              C51087 +
          (((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C2300 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                C50778) *
               C2302 +
           ((C4207 - (C4208 + C4209) + C4210) * C2300 +
            (C4211 - (C4212 + C4213) + C4214) * C50778) *
               C2303 +
           ((C4215 - (C4216 + C4217) + C4218) * C2300 +
            (C4219 - (C4220 + C4221) + C4222) * C50778) *
               C2304) *
              C51076 +
          ((((C117 * C944 + C50911 * C949) * C1391 +
             (C117 * C950 + C50911 * C959) * C1386 - C977 * C1392 -
             C978 * C50758) *
                C2300 +
            (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50758) *
                C50778) *
               C2302 +
           ((C3538 * C1391 + C3539 * C1386 - C3368 * C1392 - C3369 * C50758) *
                C2300 +
            (C3368 * C1391 + C3369 * C1386 -
             (C117 * C1081 + C50911 * C1087) * C1392 -
             (C117 * C1086 + C50911 * C1093) * C50758) *
                C50778) *
               C2303 +
           ((C3540 * C1391 + C3541 * C1386 - C3370 * C1392 - C3371 * C50758) *
                C2300 +
            (C3370 * C1391 + C3371 * C1386 -
             (C117 * C3349 + C50911 * C3354) * C1392 -
             (C117 * C3355 + C50911 * C3358) * C50758) *
                C50778) *
               C2304) *
              C1875) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1391 +
            (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
            C172 * C50758) *
               C110 +
           (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) * C111 +
           (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) * C112 +
           (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50758) *
               C113) *
              C50900 * C51087 +
          ((C475 * C1392 -
            ((C117 * C441 + C50911 * C452) * C1386 +
             (C117 * C435 + C50911 * C442) * C1391) +
            C476 * C50758) *
               C110 +
           (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
               C111 +
           (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
               C112 +
           (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50758) *
               C113) *
              C50900 * C51076 +
          (((C117 * C944 + C50911 * C949) * C1391 +
            (C117 * C950 + C50911 * C959) * C1386 - C977 * C1392 -
            C978 * C50758) *
               C110 +
           (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50758) * C111 +
           (C979 * C1391 + C980 * C1386 - C981 * C1392 - C982 * C50758) * C112 +
           (C981 * C1391 + C982 * C1386 -
            (C117 * C948 + C50911 * C957) * C1392 -
            (C117 * C958 + C50911 * C963) * C50758) *
               C113) *
              C50900 * C1875) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C1391 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C1386 -
            (C5351 + C5352 + C5353) * C1392 -
            (C5354 + C5355 + C5356) * C50758) *
               C2300 +
           ((C5353 + C5352 + C5351) * C1391 + (C5356 + C5355 + C5354) * C1386 -
            (C5359 + C5358 + C5357) * C1392 -
            (C5362 + C5361 + C5360) * C50758) *
               C50778) *
              C50900 * C51087 +
          (((C5721 + C5722 + C5723) * C1392 -
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C1386 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C1391) +
            (C5724 + C5725 + C5726) * C50758) *
               C2300 +
           ((C5729 + C5728 + C5727) * C1392 -
            ((C5726 + C5725 + C5724) * C1386 +
             (C5723 + C5722 + C5721) * C1391) +
            (C5732 + C5731 + C5730) * C50758) *
               C50778) *
              C50900 * C51076 +
          (((C5311 * C944 + C5308 * C949 + C5312 * C1169 + C5309 * C1177 +
             C5313 * C6286 + C5310 * C6289) *
                C1391 +
            (C5311 * C950 + C5308 * C959 + C5312 * C1176 + C5309 * C1181 +
             C5313 * C6290 + C5310 * C6295) *
                C1386 -
            (C6311 + C6312 + C6313) * C1392 -
            (C6314 + C6315 + C6316) * C50758) *
               C2300 +
           ((C6313 + C6312 + C6311) * C1391 + (C6316 + C6315 + C6314) * C1386 -
            (C5313 * C6288 + C5310 * C6293 + C5312 * C1167 + C5309 * C1173 +
             C5311 * C946 + C5308 * C953) *
                C1392 -
            (C5313 * C6294 + C5310 * C6297 + C5312 * C1172 + C5309 * C1179 +
             C5311 * C954 + C5308 * C961) *
                C50758) *
               C50778) *
              C50900 * C1875) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C49770 +
            (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
            C172 * C50758) *
               C110 +
           (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
               C111 +
           (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
               C112 +
           (C175 * C49770 + C176 * C51025 - C177 * C49763 - C178 * C50758) *
               C113) *
              C50900 * C50841 * C582 +
          ((C327 * C49763 -
            ((C117 * C293 + C50911 * C304) * C51025 +
             (C117 * C287 + C50911 * C294) * C49770) +
            C328 * C50758) *
               C110 +
           (C329 * C49763 - (C328 * C51025 + C327 * C49770) + C330 * C50758) *
               C111 +
           (C331 * C49763 - (C330 * C51025 + C329 * C49770) + C332 * C50758) *
               C112 +
           (C333 * C49763 - (C332 * C51025 + C331 * C49770) + C334 * C50758) *
               C113) *
              C50900 * C50841 * C583 +
          (((C117 * C587 + C50911 * C592) * C49770 +
            (C117 * C593 + C50911 * C602) * C51025 - C620 * C49763 -
            C621 * C50758) *
               C110 +
           (C620 * C49770 + C621 * C51025 - C622 * C49763 - C623 * C50758) *
               C111 +
           (C622 * C49770 + C623 * C51025 - C624 * C49763 - C625 * C50758) *
               C112 +
           (C624 * C49770 + C625 * C51025 -
            (C117 * C591 + C50911 * C600) * C49763 -
            (C117 * C601 + C50911 * C606) * C50758) *
               C113) *
              C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50911 * C129) * C118 +
           (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C110 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C111 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C112 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50911 * C141) * C121 -
           (C117 * C142 + C50911 * C149) * C109) *
              C113) *
         C50900 * C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C118 +
            (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C2300 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50778) *
              C2302 +
          (((C117 * C287 + C50911 * C294) * C118 +
            (C117 * C293 + C50911 * C304) * C106 - C327 * C119 - C328 * C107 +
            C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
               C2300 +
           (C327 * C118 + C328 * C106 - C329 * C119 - C330 * C107 +
            C331 * C120 + C332 * C108 - C333 * C121 - C334 * C109) *
               C50778) *
              C2303 +
          (((C117 * C587 + C50911 * C592) * C118 +
            (C117 * C593 + C50911 * C602) * C106 - C620 * C119 - C621 * C107 +
            C622 * C120 + C623 * C108 - C624 * C121 - C625 * C109) *
               C2300 +
           (C620 * C118 + C621 * C106 - C622 * C119 - C623 * C107 +
            C624 * C120 + C625 * C108 - (C117 * C591 + C50911 * C600) * C121 -
            (C117 * C601 + C50911 * C606) * C109) *
               C50778) *
              C2304) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C2300 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C50778) *
               C2302 +
           ((C2816 + C2817 - C2818 - C2819) * C2300 +
            (C2820 + C2821 - C2822 - C2823) * C50778) *
               C2303 +
           C2860 * C2304) *
              C50841 * C582 +
          (((C2818 - (C2817 + C2816) + C2819) * C2300 +
            (C2822 - (C2821 + C2820) + C2823) * C50778) *
               C2302 +
           ((C2826 - (C2825 + C2824) + C2827) * C2300 +
            (C2830 - (C2829 + C2828) + C2831) * C50778) *
               C2303 +
           ((C2832 - (C2854 + C2855) + C2837) * C2300 +
            (C2838 - (C2839 + C2840) + C2841) * C50778) *
               C2304) *
              C50841 * C583 +
          (C2860 * C2302 +
           ((C2855 + C2854 - C2832 - C2837) * C2300 +
            (C2840 + C2839 - C2838 - C2841) * C50778) *
               C2303 +
           (((C117 * C2803 + C50911 * C2806) * C49770 +
             (C117 * C2807 + C50911 * C2812) * C51025 - C2850 * C49763 -
             C2851 * C50758) *
                C2300 +
            (C2850 * C49770 + C2851 * C51025 -
             (C117 * C2805 + C50911 * C2810) * C49763 -
             (C117 * C2811 + C50911 * C2814) * C50758) *
                C50778) *
               C2304) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
            C5313 * C944 + C5310 * C949) *
               C118 +
           (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
            C5313 * C950 + C5310 * C959) *
               C106 -
           (C5351 + C5352 + C5353) * C119 - (C5354 + C5355 + C5356) * C107 +
           (C5357 + C5358 + C5359) * C120 + (C5360 + C5361 + C5362) * C108 -
           (C5363 + C5364 + C5365) * C121 - (C5366 + C5367 + C5368) * C109) *
              C2300 +
          ((C5353 + C5352 + C5351) * C118 + (C5356 + C5355 + C5354) * C106 -
           (C5359 + C5358 + C5357) * C119 - (C5362 + C5361 + C5360) * C107 +
           (C5365 + C5364 + C5363) * C120 + (C5368 + C5367 + C5366) * C108 -
           (C5313 * C948 + C5310 * C957 + C5312 * C438 + C5309 * C448 +
            C5311 * C126 + C5308 * C137) *
               C121 -
           (C5313 * C958 + C5310 * C963 + C5312 * C449 + C5309 * C456 +
            C5311 * C138 + C5308 * C147) *
               C109) *
              C50778) *
         C50900 * C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C49770 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C51025 -
            (C5351 + C5352 + C5353) * C49763 -
            (C5354 + C5355 + C5356) * C50758) *
               C2300 +
           ((C5353 + C5352 + C5351) * C49770 +
            (C5356 + C5355 + C5354) * C51025 -
            (C5359 + C5358 + C5357) * C49763 -
            (C5362 + C5361 + C5360) * C50758) *
               C50778) *
              C50900 * C50841 * C582 +
          (((C5539 + C5540 + C5541) * C49763 -
            ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
              C5311 * C293 + C5308 * C304) *
                 C51025 +
             (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
              C5311 * C287 + C5308 * C294) *
                 C49770) +
            (C5542 + C5543 + C5544) * C50758) *
               C2300 +
           ((C5547 + C5546 + C5545) * C49763 -
            ((C5544 + C5543 + C5542) * C51025 +
             (C5541 + C5540 + C5539) * C49770) +
            (C5550 + C5549 + C5548) * C50758) *
               C50778) *
              C50900 * C50841 * C583 +
          (((C5311 * C587 + C5308 * C592 + C5312 * C818 + C5309 * C834 +
             C5313 * C3347 + C5310 * C3350) *
                C49770 +
            (C5311 * C593 + C5308 * C602 + C5312 * C833 + C5309 * C842 +
             C5313 * C3351 + C5310 * C3356) *
                C51025 -
            (C5891 + C5892 + C5893) * C49763 -
            (C5894 + C5895 + C5896) * C50758) *
               C2300 +
           ((C5893 + C5892 + C5891) * C49770 +
            (C5896 + C5895 + C5894) * C51025 -
            (C5313 * C3349 + C5310 * C3354 + C5312 * C816 + C5309 * C830 +
             C5311 * C589 + C5308 * C596) *
                C49763 -
            (C5313 * C3355 + C5310 * C3358 + C5312 * C829 + C5309 * C840 +
             C5311 * C597 + C5308 * C604) *
                C50758) *
               C50778) *
              C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C696 +
            (C117 * C130 + C50911 * C143) * C50753) *
               C110 +
           (C171 * C696 + C172 * C50753) * C111 +
           (C173 * C696 + C174 * C50753) * C112 +
           (C175 * C696 + C176 * C50753) * C113) *
              C50900 * C50841 * C692 -
          ((C332 * C50753 + C331 * C696) * C113 +
           (C330 * C50753 + C329 * C696) * C112 +
           (C328 * C50753 + C327 * C696) * C111 +
           ((C117 * C293 + C50911 * C304) * C50753 +
            (C117 * C287 + C50911 * C294) * C696) *
               C110) *
              C50900 * C50841 * C693 +
          (((C117 * C587 + C50911 * C592) * C696 +
            (C117 * C593 + C50911 * C602) * C50753) *
               C110 +
           (C620 * C696 + C621 * C50753) * C111 +
           (C622 * C696 + C623 * C50753) * C112 +
           (C624 * C696 + C625 * C50753) * C113) *
              C50900 * C50841 * C694 -
          (((C117 * C701 + C50911 * C709) * C50753 +
            (C117 * C697 + C50911 * C702) * C696) *
               C113 +
           ((C117 * C703 + C50911 * C710) * C50753 +
            (C117 * C698 + C50911 * C704) * C696) *
               C112 +
           ((C117 * C705 + C50911 * C711) * C50753 +
            (C117 * C699 + C50911 * C706) * C696) *
               C111 +
           ((C117 * C707 + C50911 * C712) * C50753 +
            (C117 * C700 + C50911 * C708) * C696) *
               C110) *
              C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C110 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C111 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C112 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C113) *
              C50900 * C50841 * C51040 +
          ((C327 * C284 -
            ((C117 * C293 + C50911 * C304) * C278 +
             (C117 * C287 + C50911 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C110 +
           (C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
            C331 * C285 - C332 * C280) *
               C111 +
           (C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
            C333 * C285 - C334 * C280) *
               C112 +
           (C333 * C284 - (C332 * C278 + C331 * C283) + C334 * C279 -
            (C117 * C291 + C50911 * C302) * C285 -
            (C117 * C303 + C50911 * C309) * C280) *
               C113) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50778) *
               C2302 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C2300 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C50778) *
               C2303 +
           ((C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C2300 +
            (C2474 + C2475 - C2476 - C2477 + C2478 + C2479) * C50778) *
               C2304) *
              C50841 * C51040 +
          (((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C2300 +
            (C2462 - (C2461 + C2460) + C2463 - C2464 - C2465) * C50778) *
               C2302 +
           ((C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C2300 +
            (C2476 - (C2475 + C2474) + C2477 - C2478 - C2479) * C50778) *
               C2303 +
           ((C2492 * C284 -
             ((C117 * C707 + C50911 * C712) * C278 +
              (C117 * C700 + C50911 * C708) * C283) +
             C2493 * C279 - C2494 * C285 - C2495 * C280) *
                C2300 +
            (C2494 * C284 - (C2493 * C278 + C2492 * C283) + C2495 * C279 -
             (C117 * C697 + C50911 * C702) * C285 -
             (C117 * C701 + C50911 * C709) * C280) *
                C50778) *
               C2304) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C2300 +
            (C171 * C696 + C172 * C50753) * C50778) *
               C2302 +
           ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
           C2997 * C2304) *
              C50841 * C692 -
          (C2998 * C2304 +
           ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
           ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
              C50841 * C693 +
          (C2997 * C2302 +
           ((C2978 + C2977) * C2300 + (C2976 + C2975) * C50778) * C2303 +
           ((C2995 + C2996) * C2300 + (C2983 + C2984) * C50778) * C2304) *
              C50841 * C694 -
          ((((C117 * C2960 + C50911 * C2964) * C50753 +
             (C117 * C2958 + C50911 * C2961) * C696) *
                C50778 +
            ((C117 * C2962 + C50911 * C2965) * C50753 +
             (C117 * C2959 + C50911 * C2963) * C696) *
                C2300) *
               C2304 +
           ((C2984 + C2983) * C50778 + (C2996 + C2995) * C2300) * C2303 +
           C2998 * C2302) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C279 +
            (C5357 + C5358 + C5359) * C285 + (C5360 + C5361 + C5362) * C280) *
               C2300 +
           ((C5353 + C5352 + C5351) * C283 + (C5356 + C5355 + C5354) * C278 -
            (C5359 + C5358 + C5357) * C284 - (C5362 + C5361 + C5360) * C279 +
            (C5365 + C5364 + C5363) * C285 + (C5368 + C5367 + C5366) * C280) *
               C50778) *
              C50900 * C50841 * C51040 +
          (((C5539 + C5540 + C5541) * C284 -
            ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
              C5311 * C293 + C5308 * C304) *
                 C278 +
             (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
              C5311 * C287 + C5308 * C294) *
                 C283) +
            (C5542 + C5543 + C5544) * C279 - (C5545 + C5546 + C5547) * C285 -
            (C5548 + C5549 + C5550) * C280) *
               C2300 +
           ((C5547 + C5546 + C5545) * C284 -
            ((C5544 + C5543 + C5542) * C278 + (C5541 + C5540 + C5539) * C283) +
            (C5550 + C5549 + C5548) * C279 -
            (C5313 * C1080 + C5310 * C1085 + C5312 * C814 + C5309 * C825 +
             C5311 * C289 + C5308 * C298) *
                C285 -
            (C5313 * C1084 + C5310 * C1092 + C5312 * C826 + C5309 * C838 +
             C5311 * C299 + C5308 * C307) *
                C280) *
               C50778) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C696 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C50753) *
               C2300 +
           ((C5353 + C5352 + C5351) * C696 + (C5356 + C5355 + C5354) * C50753) *
               C50778) *
              C50900 * C50841 * C692 -
          (((C5544 + C5543 + C5542) * C50753 + (C5541 + C5540 + C5539) * C696) *
               C50778 +
           ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
             C5311 * C293 + C5308 * C304) *
                C50753 +
            (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
             C5311 * C287 + C5308 * C294) *
                C696) *
               C2300) *
              C50900 * C50841 * C693 +
          (((C5311 * C587 + C5308 * C592 + C5312 * C818 + C5309 * C834 +
             C5313 * C3347 + C5310 * C3350) *
                C696 +
            (C5311 * C593 + C5308 * C602 + C5312 * C833 + C5309 * C842 +
             C5313 * C3351 + C5310 * C3356) *
                C50753) *
               C2300 +
           ((C5893 + C5892 + C5891) * C696 + (C5896 + C5895 + C5894) * C50753) *
               C50778) *
              C50900 * C50841 * C694 -
          (((C5313 * C3519 + C5310 * C3523 + C5312 * C3151 + C5309 * C3157 +
             C5311 * C705 + C5308 * C711) *
                C50753 +
            (C5313 * C3517 + C5310 * C3520 + C5312 * C3145 + C5309 * C3150 +
             C5311 * C699 + C5308 * C706) *
                C696) *
               C50778 +
           ((C5313 * C3521 + C5310 * C3524 + C5312 * C3149 + C5309 * C3156 +
             C5311 * C707 + C5308 * C712) *
                C50753 +
            (C5313 * C3518 + C5310 * C3522 + C5312 * C3144 + C5309 * C3148 +
             C5311 * C700 + C5308 * C708) *
                C696) *
               C2300) *
              C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C110 +
            (C171 * C696 + C172 * C50753) * C111 +
            (C173 * C696 + C174 * C50753) * C112 +
            (C175 * C696 + C176 * C50753) * C113) *
               C50900 * C51041 -
           ((C480 * C50753 + C479 * C696) * C113 +
            (C478 * C50753 + C477 * C696) * C112 +
            (C476 * C50753 + C475 * C696) * C111 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C110) *
               C50900 * C50853) *
              C582 +
          ((((C117 * C811 + C50911 * C819) * C696 +
             (C117 * C820 + C50911 * C835) * C50753) *
                C110 +
            ((C117 * C812 + C50911 * C821) * C696 +
             (C117 * C822 + C50911 * C836) * C50753) *
                C111 +
            ((C117 * C813 + C50911 * C823) * C696 +
             (C117 * C824 + C50911 * C837) * C50753) *
                C112 +
            ((C117 * C814 + C50911 * C825) * C696 +
             (C117 * C826 + C50911 * C838) * C50753) *
                C113) *
               C50900 * C50853 -
           ((C332 * C50753 + C331 * C696) * C113 +
            (C330 * C50753 + C329 * C696) * C112 +
            (C328 * C50753 + C327 * C696) * C111 +
            ((C117 * C293 + C50911 * C304) * C50753 +
             (C117 * C287 + C50911 * C294) * C696) *
                C110) *
               C50900 * C51041) *
              C583 +
          ((((C117 * C587 + C50911 * C592) * C696 +
             (C117 * C593 + C50911 * C602) * C50753) *
                C110 +
            (C620 * C696 + C621 * C50753) * C111 +
            (C622 * C696 + C623 * C50753) * C112 +
            (C624 * C696 + C625 * C50753) * C113) *
               C50900 * C51041 -
           (((C117 * C827 + C50911 * C839) * C50753 +
             (C117 * C815 + C50911 * C828) * C696) *
                C113 +
            ((C117 * C829 + C50911 * C840) * C50753 +
             (C117 * C816 + C50911 * C830) * C696) *
                C112 +
            ((C117 * C831 + C50911 * C841) * C50753 +
             (C117 * C817 + C50911 * C832) * C696) *
                C111 +
            ((C117 * C833 + C50911 * C842) * C50753 +
             (C117 * C818 + C50911 * C834) * C696) *
                C110) *
               C50900 * C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C110 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C111 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C112 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C113) *
              C50900 * C51041 +
          ((C475 * C284 -
            ((C117 * C441 + C50911 * C452) * C278 +
             (C117 * C435 + C50911 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C110 +
           (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
            C479 * C285 - C480 * C280) *
               C111 +
           (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
            C481 * C285 - C482 * C280) *
               C112 +
           (C481 * C284 - (C480 * C278 + C479 * C283) + C482 * C279 -
            (C117 * C439 + C50911 * C450) * C285 -
            (C117 * C451 + C50911 * C457) * C280) *
               C113) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50778) *
               C2302 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C2300 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C50778) *
               C2303 +
           ((C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C2300 +
            (C2474 + C2475 - C2476 - C2477 + C2478 + C2479) * C50778) *
               C2304) *
              C51041 +
          (((C475 * C284 -
             ((C117 * C441 + C50911 * C452) * C278 +
              (C117 * C435 + C50911 * C442) * C283) +
             C476 * C279 - C477 * C285 - C478 * C280) *
                C2300 +
            (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
             C479 * C285 - C480 * C280) *
                C50778) *
               C2302 +
           ((C1540 * C284 -
             ((C117 * C820 + C50911 * C835) * C278 +
              (C117 * C811 + C50911 * C819) * C283) +
             C1541 * C279 - C1542 * C285 - C1543 * C280) *
                C2300 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50778) *
               C2303 +
           ((C2654 * C284 -
             ((C117 * C833 + C50911 * C842) * C278 +
              (C117 * C818 + C50911 * C834) * C283) +
             C2655 * C279 - C2656 * C285 - C2657 * C280) *
                C2300 +
            (C2656 * C284 - (C2655 * C278 + C2654 * C283) + C2657 * C279 -
             (C117 * C815 + C50911 * C828) * C285 -
             (C117 * C827 + C50911 * C839) * C280) *
                C50778) *
               C2304) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C2300 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C2302 +
            ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
            C2997 * C2304) *
               C51041 -
           (C3201 * C2304 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C2300) * C2303 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C2300) *
                C2302) *
               C50853) *
              C582 +
          ((((C3194 + C3193) * C2300 + (C3168 + C3167) * C50778) * C2302 +
            ((C3192 + C3191) * C2300 + (C3162 + C3161) * C50778) * C2303 +
            ((C3195 + C3196) * C2300 + (C3197 + C3198) * C50778) * C2304) *
               C50853 -
           (C2998 * C2304 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
               C51041) *
              C583 +
          ((C2997 * C2302 +
            ((C2978 + C2977) * C2300 + (C2976 + C2975) * C50778) * C2303 +
            ((C2995 + C2996) * C2300 + (C2983 + C2984) * C50778) * C2304) *
               C51041 -
           ((((C117 * C3152 + C50911 * C3158) * C50753 +
              (C117 * C3146 + C50911 * C3153) * C696) *
                 C50778 +
             ((C117 * C3154 + C50911 * C3159) * C50753 +
              (C117 * C3147 + C50911 * C3155) * C696) *
                 C2300) *
                C2304 +
            ((C3198 + C3197) * C50778 + (C3196 + C3195) * C2300) * C2303 +
            C3201 * C2302) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C279 +
            (C5357 + C5358 + C5359) * C285 + (C5360 + C5361 + C5362) * C280) *
               C2300 +
           ((C5353 + C5352 + C5351) * C283 + (C5356 + C5355 + C5354) * C278 -
            (C5359 + C5358 + C5357) * C284 - (C5362 + C5361 + C5360) * C279 +
            (C5365 + C5364 + C5363) * C285 + (C5368 + C5367 + C5366) * C280) *
               C50778) *
              C50900 * C51041 +
          (((C5721 + C5722 + C5723) * C284 -
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C278 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C283) +
            (C5724 + C5725 + C5726) * C279 - (C5727 + C5728 + C5729) * C285 -
            (C5730 + C5731 + C5732) * C280) *
               C2300 +
           ((C5729 + C5728 + C5727) * C284 -
            ((C5726 + C5725 + C5724) * C278 + (C5723 + C5722 + C5721) * C283) +
            (C5732 + C5731 + C5730) * C279 -
            (C5313 * C1166 + C5310 * C1171 + C5312 * C947 + C5309 * C955 +
             C5311 * C437 + C5308 * C446) *
                C285 -
            (C5313 * C1170 + C5310 * C1178 + C5312 * C956 + C5309 * C962 +
             C5311 * C447 + C5308 * C455) *
                C280) *
               C50778) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C696 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C50753) *
                C2300 +
            ((C5353 + C5352 + C5351) * C696 +
             (C5356 + C5355 + C5354) * C50753) *
                C50778) *
               C50900 * C51041 -
           (((C5726 + C5725 + C5724) * C50753 +
             (C5723 + C5722 + C5721) * C696) *
                C50778 +
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C50753 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C696) *
                C2300) *
               C50900 * C50853) *
              C582 +
          ((((C5311 * C811 + C5308 * C819 + C5312 * C1083 + C5309 * C1091 +
              C5313 * C3646 + C5310 * C3654) *
                 C696 +
             (C5311 * C820 + C5308 * C835 + C5312 * C1090 + C5309 * C1095 +
              C5313 * C3653 + C5310 * C3658) *
                 C50753) *
                C2300 +
            ((C5311 * C812 + C5308 * C821 + C5312 * C1082 + C5309 * C1089 +
              C5313 * C3645 + C5310 * C3652) *
                 C696 +
             (C5311 * C822 + C5308 * C836 + C5312 * C1088 + C5309 * C1094 +
              C5313 * C3651 + C5310 * C3657) *
                 C50753) *
                C50778) *
               C50900 * C50853 -
           (((C5544 + C5543 + C5542) * C50753 +
             (C5541 + C5540 + C5539) * C696) *
                C50778 +
            ((C5313 * C1090 + C5310 * C1095 + C5312 * C820 + C5309 * C835 +
              C5311 * C293 + C5308 * C304) *
                 C50753 +
             (C5313 * C1083 + C5310 * C1091 + C5312 * C811 + C5309 * C819 +
              C5311 * C287 + C5308 * C294) *
                 C696) *
                C2300) *
               C50900 * C51041) *
              C583 +
          ((((C5311 * C587 + C5308 * C592 + C5312 * C818 + C5309 * C834 +
              C5313 * C3347 + C5310 * C3350) *
                 C696 +
             (C5311 * C593 + C5308 * C602 + C5312 * C833 + C5309 * C842 +
              C5313 * C3351 + C5310 * C3356) *
                 C50753) *
                C2300 +
            ((C5893 + C5892 + C5891) * C696 +
             (C5896 + C5895 + C5894) * C50753) *
                C50778) *
               C50900 * C51041 -
           (((C5313 * C3647 + C5310 * C3655 + C5312 * C3353 + C5309 * C3357 +
              C5311 * C831 + C5308 * C841) *
                 C50753 +
             (C5313 * C3643 + C5310 * C3648 + C5312 * C3348 + C5309 * C3352 +
              C5311 * C817 + C5308 * C832) *
                 C696) *
                C50778 +
            ((C5313 * C3649 + C5310 * C3656 + C5312 * C3351 + C5309 * C3356 +
              C5311 * C833 + C5308 * C842) *
                 C50753 +
             (C5313 * C3644 + C5310 * C3650 + C5312 * C3347 + C5309 * C3350 +
              C5311 * C818 + C5308 * C834) *
                 C696) *
                C2300) *
               C50900 * C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C1285 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C51083 -
            (C10878 + C10879) * C1286 - (C10880 + C10881) * C51067 +
            C10894 * C1287 + C10895 * C1282) *
               C51084 +
           ((C10879 + C10878) * C1285 + (C10881 + C10880) * C51083 -
            (C10883 + C10882) * C1286 - (C10885 + C10884) * C51067 +
            (C10887 + C10886) * C1287 + (C10889 + C10888) * C1282) *
               C51085 +
           (C10894 * C1285 + C10895 * C51083 - C10896 * C1286 -
            C10897 * C51067 + (C10891 + C10890) * C1287 +
            (C10893 + C10892) * C1282) *
               C8156) *
              C50900 * C50841 * C1283 +
          (((C11068 + C11069) * C1286 -
            ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                 C51083 +
             (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                 C1285) +
            (C11070 + C11071) * C51067 - C11080 * C1287 - C11081 * C1282) *
               C51084 +
           ((C11073 + C11072) * C1286 -
            ((C11071 + C11070) * C51083 + (C11069 + C11068) * C1285) +
            (C11075 + C11074) * C51067 - (C11076 + C11077) * C1287 -
            (C11078 + C11079) * C1282) *
               C51085 +
           ((C11077 + C11076) * C1286 - (C11081 * C51083 + C11080 * C1285) +
            (C11079 + C11078) * C51067 -
            (C10844 * C1523 + C50975 * C1524 + C10843 * C290 + C51056 * C300) *
                C1287 -
            (C10844 * C1525 + C50975 * C1526 + C10843 * C301 + C51056 * C308) *
                C1282) *
               C8156) *
              C50900 * C50841 * C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C1391 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C1386 -
            (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
               C51084 +
           ((C10879 + C10878) * C1391 + (C10881 + C10880) * C1386 -
            (C10883 + C10882) * C1392 - (C10885 + C10884) * C50758) *
               C51085 +
           (C10894 * C1391 + C10895 * C1386 - C10896 * C1392 -
            C10897 * C50758) *
               C8156) *
              C50900 * C50841 * C51086 +
          (((C11068 + C11069) * C1392 -
            ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                 C1386 +
             (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                 C1391) +
            (C11070 + C11071) * C50758) *
               C51084 +
           ((C11073 + C11072) * C1392 -
            ((C11071 + C11070) * C1386 + (C11069 + C11068) * C1391) +
            (C11075 + C11074) * C50758) *
               C51085 +
           ((C11077 + C11076) * C1392 - (C11081 * C1386 + C11080 * C1391) +
            (C11079 + C11078) * C50758) *
               C8156) *
              C50900 * C50841 * C51073 +
          (((C10843 * C587 + C51056 * C592 + C10844 * C818 + C50975 * C834) *
                C1391 +
            (C10843 * C593 + C51056 * C602 + C10844 * C833 + C50975 * C842) *
                C1386 -
            (C11428 + C11429) * C1392 - (C11430 + C11431) * C50758) *
               C51084 +
           ((C11429 + C11428) * C1391 + (C11431 + C11430) * C1386 -
            (C11432 + C11433) * C1392 - (C11434 + C11435) * C50758) *
               C51085 +
           ((C11433 + C11432) * C1391 + (C11435 + C11434) * C1386 -
            (C10844 * C815 + C50975 * C828 + C10843 * C590 + C51056 * C598) *
                C1392 -
            (C10844 * C827 + C50975 * C839 + C10843 * C599 + C51056 * C605) *
                C50758) *
               C8156) *
              C50900 * C50841 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C1391 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C1386 -
             (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
                C51084 +
            ((C10879 + C10878) * C1391 + (C10881 + C10880) * C1386 -
             (C10883 + C10882) * C1392 - (C10885 + C10884) * C50758) *
                C51085 +
            (C10894 * C1391 + C10895 * C1386 - C10896 * C1392 -
             C10897 * C50758) *
                C8156) *
               C50900 * C51041 +
           (((C11252 + C11253) * C1392 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C1386 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C1391) +
             (C11254 + C11255) * C50758) *
                C51084 +
            ((C11257 + C11256) * C1392 -
             ((C11255 + C11254) * C1386 + (C11253 + C11252) * C1391) +
             (C11259 + C11258) * C50758) *
                C51085 +
            ((C11261 + C11260) * C1392 - (C11265 * C1386 + C11264 * C1391) +
             (C11263 + C11262) * C50758) *
                C8156) *
               C50900 * C50853) *
              C1283 +
          ((((C11068 + C11069) * C1392 -
             ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                  C1386 +
              (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                  C1391) +
             (C11070 + C11071) * C50758) *
                C51084 +
            ((C11073 + C11072) * C1392 -
             ((C11071 + C11070) * C1386 + (C11069 + C11068) * C1391) +
             (C11075 + C11074) * C50758) *
                C51085 +
            ((C11077 + C11076) * C1392 - (C11081 * C1386 + C11080 * C1391) +
             (C11079 + C11078) * C50758) *
                C8156) *
               C50900 * C51041 +
           (((C10843 * C811 + C51056 * C819 + C10844 * C1083 + C50975 * C1091) *
                 C1391 +
             (C10843 * C820 + C51056 * C835 + C10844 * C1090 + C50975 * C1095) *
                 C1386 -
             (C12596 + C12597) * C1392 - (C12598 + C12599) * C50758) *
                C51084 +
            ((C12597 + C12596) * C1391 + (C12599 + C12598) * C1386 -
             (C12600 + C12601) * C1392 - (C12602 + C12603) * C50758) *
                C51085 +
            ((C12601 + C12600) * C1391 + (C12603 + C12602) * C1386 -
             (C10844 * C1080 + C50975 * C1085 + C10843 * C814 + C51056 * C825) *
                 C1392 -
             (C10844 * C1084 + C50975 * C1092 + C10843 * C826 + C51056 * C838) *
                 C50758) *
                C8156) *
               C50900 * C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C49770 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C51025 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
                C51084 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51025 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50758) *
                C51085 +
            (C10894 * C49770 + C10895 * C51025 - C10896 * C49763 -
             C10897 * C50758) *
                C8156) *
               C50900 * C1643 +
           (((C11252 + C11253) * C49763 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C51025 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C49770) +
             (C11254 + C11255) * C50758) *
                C51084 +
            ((C11257 + C11256) * C49763 -
             ((C11255 + C11254) * C51025 + (C11253 + C11252) * C49770) +
             (C11259 + C11258) * C50758) *
                C51085 +
            ((C11261 + C11260) * C49763 - (C11265 * C51025 + C11264 * C49770) +
             (C11263 + C11262) * C50758) *
                C8156) *
               C50900 * C50853) *
              C1283 +
          ((((C11068 + C11069) * C49763 -
             ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                  C51025 +
              (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                  C49770) +
             (C11070 + C11071) * C50758) *
                C51084 +
            ((C11073 + C11072) * C49763 -
             ((C11071 + C11070) * C51025 + (C11069 + C11068) * C49770) +
             (C11075 + C11074) * C50758) *
                C51085 +
            ((C11077 + C11076) * C49763 - (C11081 * C51025 + C11080 * C49770) +
             (C11079 + C11078) * C50758) *
                C8156) *
               C50900 * C1643 +
           (((C10843 * C811 + C51056 * C819 + C10844 * C1083 + C50975 * C1091) *
                 C49770 +
             (C10843 * C820 + C51056 * C835 + C10844 * C1090 + C50975 * C1095) *
                 C51025 -
             (C12596 + C12597) * C49763 - (C12598 + C12599) * C50758) *
                C51084 +
            ((C12597 + C12596) * C49770 + (C12599 + C12598) * C51025 -
             (C12600 + C12601) * C49763 - (C12602 + C12603) * C50758) *
                C51085 +
            ((C12601 + C12600) * C49770 + (C12603 + C12602) * C51025 -
             (C10844 * C1080 + C50975 * C1085 + C10843 * C814 + C51056 * C825) *
                 C49763 -
             (C10844 * C1084 + C50975 * C1092 + C10843 * C826 + C51056 * C838) *
                 C50758) *
                C8156) *
               C50900 * C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C51084 +
            ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C51085 +
            (C10894 * C696 + C10895 * C50753) * C8156) *
               C50900 * C1643 -
           ((C11265 * C50753 + C11264 * C696) * C8156 +
            ((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C51085 +
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C50753 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C696) *
                C51084) *
               C50900 * C50853) *
              C51086 +
          ((((C10843 * C811 + C51056 * C819 + C10844 * C1083 + C50975 * C1091) *
                 C696 +
             (C10843 * C820 + C51056 * C835 + C10844 * C1090 + C50975 * C1095) *
                 C50753) *
                C51084 +
            ((C12597 + C12596) * C696 + (C12599 + C12598) * C50753) * C51085 +
            ((C12601 + C12600) * C696 + (C12603 + C12602) * C50753) * C8156) *
               C50900 * C50853 -
           ((C11081 * C50753 + C11080 * C696) * C8156 +
            ((C11071 + C11070) * C50753 + (C11069 + C11068) * C696) * C51085 +
            ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                 C50753 +
             (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                 C696) *
                C51084) *
               C50900 * C1643) *
              C51073 +
          ((((C10843 * C587 + C51056 * C592 + C10844 * C818 + C50975 * C834) *
                 C696 +
             (C10843 * C593 + C51056 * C602 + C10844 * C833 + C50975 * C842) *
                 C50753) *
                C51084 +
            ((C11429 + C11428) * C696 + (C11431 + C11430) * C50753) * C51085 +
            ((C11433 + C11432) * C696 + (C11435 + C11434) * C50753) * C8156) *
               C50900 * C1643 -
           (((C10844 * C3355 + C50975 * C3358 + C10843 * C829 + C51056 * C840) *
                 C50753 +
             (C10844 * C3349 + C50975 * C3354 + C10843 * C816 + C51056 * C830) *
                 C696) *
                C8156 +
            ((C10844 * C3353 + C50975 * C3357 + C10843 * C831 + C51056 * C841) *
                 C50753 +
             (C10844 * C3348 + C50975 * C3352 + C10843 * C817 + C51056 * C832) *
                 C696) *
                C51085 +
            ((C10844 * C3351 + C50975 * C3356 + C10843 * C833 + C51056 * C842) *
                 C50753 +
             (C10844 * C3347 + C50975 * C3350 + C10843 * C818 + C51056 * C834) *
                 C696) *
                C51084) *
               C50900 * C50853) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C51084 +
            ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C51085 +
            (C10894 * C696 + C10895 * C50753) * C8156) *
               C50900 * C51087 -
           ((C11265 * C50753 + C11264 * C696) * C8156 +
            ((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C51085 +
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C50753 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C696) *
                C51084) *
               C50900 * C51076 +
           (((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                 C696 +
             (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                 C50753) *
                C51084 +
            ((C11843 + C11842) * C696 + (C11845 + C11844) * C50753) * C51085 +
            ((C11847 + C11846) * C696 + (C11849 + C11848) * C50753) * C8156) *
               C50900 * C1875) *
              C1283 +
          ((((C10843 * C811 + C51056 * C819 + C10844 * C1083 + C50975 * C1091) *
                 C696 +
             (C10843 * C820 + C51056 * C835 + C10844 * C1090 + C50975 * C1095) *
                 C50753) *
                C51084 +
            ((C12597 + C12596) * C696 + (C12599 + C12598) * C50753) * C51085 +
            ((C12601 + C12600) * C696 + (C12603 + C12602) * C50753) * C8156) *
               C50900 * C51076 -
           ((C11081 * C50753 + C11080 * C696) * C8156 +
            ((C11071 + C11070) * C50753 + (C11069 + C11068) * C696) * C51085 +
            ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                 C50753 +
             (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                 C696) *
                C51084) *
               C50900 * C51087 -
           (((C10844 * C7064 + C50975 * C7065 + C10843 * C1086 +
              C51056 * C1093) *
                 C50753 +
             (C10844 * C7062 + C50975 * C7063 + C10843 * C1081 +
              C51056 * C1087) *
                 C696) *
                C8156 +
            ((C10844 * C3651 + C50975 * C3657 + C10843 * C1088 +
              C51056 * C1094) *
                 C50753 +
             (C10844 * C3645 + C50975 * C3652 + C10843 * C1082 +
              C51056 * C1089) *
                 C696) *
                C51085 +
            ((C10844 * C3653 + C50975 * C3658 + C10843 * C1090 +
              C51056 * C1095) *
                 C50753 +
             (C10844 * C3646 + C50975 * C3654 + C10843 * C1083 +
              C51056 * C1091) *
                 C696) *
                C51084) *
               C50900 * C1875) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C49770 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C51025 -
            (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
               C51084 +
           ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51025 -
            (C10883 + C10882) * C49763 - (C10885 + C10884) * C50758) *
               C51085 +
           (C10894 * C49770 + C10895 * C51025 - C10896 * C49763 -
            C10897 * C50758) *
               C8156) *
              C50900 * C50841 * C582 +
          (((C11068 + C11069) * C49763 -
            ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                 C51025 +
             (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                 C49770) +
            (C11070 + C11071) * C50758) *
               C51084 +
           ((C11073 + C11072) * C49763 -
            ((C11071 + C11070) * C51025 + (C11069 + C11068) * C49770) +
            (C11075 + C11074) * C50758) *
               C51085 +
           ((C11077 + C11076) * C49763 - (C11081 * C51025 + C11080 * C49770) +
            (C11079 + C11078) * C50758) *
               C8156) *
              C50900 * C50841 * C583 +
          (((C10843 * C587 + C51056 * C592 + C10844 * C818 + C50975 * C834) *
                C49770 +
            (C10843 * C593 + C51056 * C602 + C10844 * C833 + C50975 * C842) *
                C51025 -
            (C11428 + C11429) * C49763 - (C11430 + C11431) * C50758) *
               C51084 +
           ((C11429 + C11428) * C49770 + (C11431 + C11430) * C51025 -
            (C11432 + C11433) * C49763 - (C11434 + C11435) * C50758) *
               C51085 +
           ((C11433 + C11432) * C49770 + (C11435 + C11434) * C51025 -
            (C10844 * C815 + C50975 * C828 + C10843 * C590 + C51056 * C598) *
                C49763 -
            (C10844 * C827 + C50975 * C839 + C10843 * C599 + C51056 * C605) *
                C50758) *
               C8156) *
              C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
               C118 +
           (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
               C106 -
           (C10878 + C10879) * C119 - (C10880 + C10881) * C107 + C10894 * C120 +
           C10895 * C108 - C10896 * C121 - C10897 * C109) *
              C51084 +
          ((C10879 + C10878) * C118 + (C10881 + C10880) * C106 -
           (C10883 + C10882) * C119 - (C10885 + C10884) * C107 +
           (C10887 + C10886) * C120 + (C10889 + C10888) * C108 -
           (C10890 + C10891) * C121 - (C10892 + C10893) * C109) *
              C51085 +
          (C10894 * C118 + C10895 * C106 - C10896 * C119 - C10897 * C107 +
           (C10891 + C10890) * C120 + (C10893 + C10892) * C108 -
           (C10844 * C439 + C50975 * C450 + C10843 * C127 + C51056 * C139) *
               C121 -
           (C10844 * C451 + C50975 * C457 + C10843 * C140 + C51056 * C148) *
               C109) *
              C8156) *
         C50900 * C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C49770 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C51025 -
            (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
               C51084 +
           ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51025 -
            (C10883 + C10882) * C49763 - (C10885 + C10884) * C50758) *
               C51085 +
           (C10894 * C49770 + C10895 * C51025 - C10896 * C49763 -
            C10897 * C50758) *
               C8156) *
              C50900 * C941 +
          (((C11252 + C11253) * C49763 -
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C51025 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C49770) +
            (C11254 + C11255) * C50758) *
               C51084 +
           ((C11257 + C11256) * C49763 -
            ((C11255 + C11254) * C51025 + (C11253 + C11252) * C49770) +
            (C11259 + C11258) * C50758) *
               C51085 +
           ((C11261 + C11260) * C49763 - (C11265 * C51025 + C11264 * C49770) +
            (C11263 + C11262) * C50758) *
               C8156) *
              C50900 * C942 +
          (((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                C49770 +
            (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                C51025 -
            (C11842 + C11843) * C49763 - (C11844 + C11845) * C50758) *
               C51084 +
           ((C11843 + C11842) * C49770 + (C11845 + C11844) * C51025 -
            (C11846 + C11847) * C49763 - (C11848 + C11849) * C50758) *
               C51085 +
           ((C11847 + C11846) * C49770 + (C11849 + C11848) * C51025 -
            (C10844 * C1166 + C50975 * C1171 + C10843 * C947 + C51056 * C955) *
                C49763 -
            (C10844 * C1170 + C50975 * C1178 + C10843 * C956 + C51056 * C962) *
                C50758) *
               C8156) *
              C50900 * C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C696 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C50753) *
               C51084 +
           ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C51085 +
           (C10894 * C696 + C10895 * C50753) * C8156) *
              C50900 * C50841 * C692 -
          ((C11081 * C50753 + C11080 * C696) * C8156 +
           ((C11071 + C11070) * C50753 + (C11069 + C11068) * C696) * C51085 +
           ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                C50753 +
            (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                C696) *
               C51084) *
              C50900 * C50841 * C693 +
          (((C10843 * C587 + C51056 * C592 + C10844 * C818 + C50975 * C834) *
                C696 +
            (C10843 * C593 + C51056 * C602 + C10844 * C833 + C50975 * C842) *
                C50753) *
               C51084 +
           ((C11429 + C11428) * C696 + (C11431 + C11430) * C50753) * C51085 +
           ((C11433 + C11432) * C696 + (C11435 + C11434) * C50753) * C8156) *
              C50900 * C50841 * C694 -
          (((C10844 * C4204 + C50975 * C4205 + C10843 * C703 + C51056 * C710) *
                C50753 +
            (C10844 * C4202 + C50975 * C4203 + C10843 * C698 + C51056 * C704) *
                C696) *
               C8156 +
           ((C10844 * C3151 + C50975 * C3157 + C10843 * C705 + C51056 * C711) *
                C50753 +
            (C10844 * C3145 + C50975 * C3150 + C10843 * C699 + C51056 * C706) *
                C696) *
               C51085 +
           ((C10844 * C3149 + C50975 * C3156 + C10843 * C707 + C51056 * C712) *
                C50753 +
            (C10844 * C3144 + C50975 * C3148 + C10843 * C700 + C51056 * C708) *
                C696) *
               C51084) *
              C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C283 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
            C10894 * C285 + C10895 * C280) *
               C51084 +
           ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
            (C10883 + C10882) * C284 - (C10885 + C10884) * C279 +
            (C10887 + C10886) * C285 + (C10889 + C10888) * C280) *
               C51085 +
           (C10894 * C283 + C10895 * C278 - C10896 * C284 - C10897 * C279 +
            (C10891 + C10890) * C285 + (C10893 + C10892) * C280) *
               C8156) *
              C50900 * C50841 * C51040 +
          (((C11068 + C11069) * C284 -
            ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                 C278 +
             (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                 C283) +
            (C11070 + C11071) * C279 - C11080 * C285 - C11081 * C280) *
               C51084 +
           ((C11073 + C11072) * C284 -
            ((C11071 + C11070) * C278 + (C11069 + C11068) * C283) +
            (C11075 + C11074) * C279 - (C11076 + C11077) * C285 -
            (C11078 + C11079) * C280) *
               C51085 +
           ((C11077 + C11076) * C284 - (C11081 * C278 + C11080 * C283) +
            (C11079 + C11078) * C279 -
            (C10844 * C1523 + C50975 * C1524 + C10843 * C290 + C51056 * C300) *
                C285 -
            (C10844 * C1525 + C50975 * C1526 + C10843 * C301 + C51056 * C308) *
                C280) *
               C8156) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C51084 +
            ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C51085 +
            (C10894 * C696 + C10895 * C50753) * C8156) *
               C50900 * C941 -
           ((C11265 * C50753 + C11264 * C696) * C8156 +
            ((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C51085 +
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C50753 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C696) *
                C51084) *
               C50900 * C942 +
           (((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                 C696 +
             (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                 C50753) *
                C51084 +
            ((C11843 + C11842) * C696 + (C11845 + C11844) * C50753) * C51085 +
            ((C11847 + C11846) * C696 + (C11849 + C11848) * C50753) * C8156) *
               C50900 * C943) *
              C51040 +
          ((((C10843 * C811 + C51056 * C819 + C10844 * C1083 + C50975 * C1091) *
                 C696 +
             (C10843 * C820 + C51056 * C835 + C10844 * C1090 + C50975 * C1095) *
                 C50753) *
                C51084 +
            ((C10843 * C812 + C51056 * C821 + C10844 * C1082 + C50975 * C1089) *
                 C696 +
             (C10843 * C822 + C51056 * C836 + C10844 * C1088 + C50975 * C1094) *
                 C50753) *
                C51085 +
            ((C10843 * C813 + C51056 * C823 + C10844 * C1081 + C50975 * C1087) *
                 C696 +
             (C10843 * C824 + C51056 * C837 + C10844 * C1086 + C50975 * C1093) *
                 C50753) *
                C8156) *
               C50900 * C942 -
           ((C11081 * C50753 + C11080 * C696) * C8156 +
            ((C11071 + C11070) * C50753 + (C11069 + C11068) * C696) * C51085 +
            ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                 C50753 +
             (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                 C696) *
                C51084) *
               C50900 * C941 -
           (((C10844 * C7064 + C50975 * C7065 + C10843 * C1086 +
              C51056 * C1093) *
                 C50753 +
             (C10844 * C7062 + C50975 * C7063 + C10843 * C1081 +
              C51056 * C1087) *
                 C696) *
                C8156 +
            ((C10844 * C3651 + C50975 * C3657 + C10843 * C1088 +
              C51056 * C1094) *
                 C50753 +
             (C10844 * C3645 + C50975 * C3652 + C10843 * C1082 +
              C51056 * C1089) *
                 C696) *
                C51085 +
            ((C10844 * C3653 + C50975 * C3658 + C10843 * C1090 +
              C51056 * C1095) *
                 C50753 +
             (C10844 * C3646 + C50975 * C3654 + C10843 * C1083 +
              C51056 * C1091) *
                 C696) *
                C51084) *
               C50900 * C943) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C51084 +
            ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C51085 +
            (C10894 * C696 + C10895 * C50753) * C8156) *
               C50900 * C51041 -
           ((C11265 * C50753 + C11264 * C696) * C8156 +
            ((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C51085 +
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C50753 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C696) *
                C51084) *
               C50900 * C50853) *
              C582 +
          ((((C10843 * C811 + C51056 * C819 + C10844 * C1083 + C50975 * C1091) *
                 C696 +
             (C10843 * C820 + C51056 * C835 + C10844 * C1090 + C50975 * C1095) *
                 C50753) *
                C51084 +
            ((C10843 * C812 + C51056 * C821 + C10844 * C1082 + C50975 * C1089) *
                 C696 +
             (C10843 * C822 + C51056 * C836 + C10844 * C1088 + C50975 * C1094) *
                 C50753) *
                C51085 +
            ((C10843 * C813 + C51056 * C823 + C10844 * C1081 + C50975 * C1087) *
                 C696 +
             (C10843 * C824 + C51056 * C837 + C10844 * C1086 + C50975 * C1093) *
                 C50753) *
                C8156) *
               C50900 * C50853 -
           ((C11081 * C50753 + C11080 * C696) * C8156 +
            ((C11071 + C11070) * C50753 + (C11069 + C11068) * C696) * C51085 +
            ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                 C50753 +
             (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                 C696) *
                C51084) *
               C50900 * C51041) *
              C583 +
          ((((C10843 * C587 + C51056 * C592 + C10844 * C818 + C50975 * C834) *
                 C696 +
             (C10843 * C593 + C51056 * C602 + C10844 * C833 + C50975 * C842) *
                 C50753) *
                C51084 +
            ((C11429 + C11428) * C696 + (C11431 + C11430) * C50753) * C51085 +
            ((C11433 + C11432) * C696 + (C11435 + C11434) * C50753) * C8156) *
               C50900 * C51041 -
           (((C10844 * C3355 + C50975 * C3358 + C10843 * C829 + C51056 * C840) *
                 C50753 +
             (C10844 * C3349 + C50975 * C3354 + C10843 * C816 + C51056 * C830) *
                 C696) *
                C8156 +
            ((C10844 * C3353 + C50975 * C3357 + C10843 * C831 + C51056 * C841) *
                 C50753 +
             (C10844 * C3348 + C50975 * C3352 + C10843 * C817 + C51056 * C832) *
                 C696) *
                C51085 +
            ((C10844 * C3351 + C50975 * C3356 + C10843 * C833 + C51056 * C842) *
                 C50753 +
             (C10844 * C3347 + C50975 * C3350 + C10843 * C818 + C51056 * C834) *
                 C696) *
                C51084) *
               C50900 * C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C283 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
            C10894 * C285 + C10895 * C280) *
               C51084 +
           ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
            (C10883 + C10882) * C284 - (C10885 + C10884) * C279 +
            (C10887 + C10886) * C285 + (C10889 + C10888) * C280) *
               C51085 +
           (C10894 * C283 + C10895 * C278 - C10896 * C284 - C10897 * C279 +
            (C10891 + C10890) * C285 + (C10893 + C10892) * C280) *
               C8156) *
              C50900 * C51041 +
          (((C11252 + C11253) * C284 -
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C278 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C283) +
            (C11254 + C11255) * C279 - C11264 * C285 - C11265 * C280) *
               C51084 +
           ((C11257 + C11256) * C284 -
            ((C11255 + C11254) * C278 + (C11253 + C11252) * C283) +
            (C11259 + C11258) * C279 - (C11260 + C11261) * C285 -
            (C11262 + C11263) * C280) *
               C51085 +
           ((C11261 + C11260) * C284 - (C11265 * C278 + C11264 * C283) +
            (C11263 + C11262) * C279 -
            (C10844 * C948 + C50975 * C957 + C10843 * C438 + C51056 * C448) *
                C285 -
            (C10844 * C958 + C50975 * C963 + C10843 * C449 + C51056 * C456) *
                C280) *
               C8156) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C696 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C50753) *
               C51084 +
           ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C51085 +
           (C10894 * C696 + C10895 * C50753) * C8156) *
              C50900 * C1162 -
          ((C11265 * C50753 + C11264 * C696) * C8156 +
           ((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C51085 +
           ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                C50753 +
            (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                C696) *
               C51084) *
              C50900 * C1163 +
          (((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                C696 +
            (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                C50753) *
               C51084 +
           ((C11843 + C11842) * C696 + (C11845 + C11844) * C50753) * C51085 +
           ((C11847 + C11846) * C696 + (C11849 + C11848) * C50753) * C8156) *
              C50900 * C1164 -
          (((C10844 * C6294 + C50975 * C6297 + C10843 * C1172 +
             C51056 * C1179) *
                C50753 +
            (C10844 * C6288 + C50975 * C6293 + C10843 * C1167 +
             C51056 * C1173) *
                C696) *
               C8156 +
           ((C10844 * C6292 + C50975 * C6296 + C10843 * C1174 +
             C51056 * C1180) *
                C50753 +
            (C10844 * C6287 + C50975 * C6291 + C10843 * C1168 +
             C51056 * C1175) *
                C696) *
               C51085 +
           ((C10844 * C6290 + C50975 * C6295 + C10843 * C1176 +
             C51056 * C1181) *
                C50753 +
            (C10844 * C6286 + C50975 * C6289 + C10843 * C1169 +
             C51056 * C1177) *
                C696) *
               C51084) *
              C50900 * C1165) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C1285 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C51083 -
            (C10878 + C10879) * C1286 - (C10880 + C10881) * C51067 +
            C10894 * C1287 + C10895 * C1282) *
               C51084 +
           ((C10879 + C10878) * C1285 + (C10881 + C10880) * C51083 -
            (C10883 + C10882) * C1286 - (C10885 + C10884) * C51067 +
            (C10887 + C10886) * C1287 + (C10889 + C10888) * C1282) *
               C51085 +
           (C10894 * C1285 + C10895 * C51083 - C10896 * C1286 -
            C10897 * C51067 + (C10891 + C10890) * C1287 +
            (C10893 + C10892) * C1282) *
               C8156) *
              C50900 * C1643 +
          (((C11252 + C11253) * C1286 -
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C51083 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C1285) +
            (C11254 + C11255) * C51067 - C11264 * C1287 - C11265 * C1282) *
               C51084 +
           ((C11257 + C11256) * C1286 -
            ((C11255 + C11254) * C51083 + (C11253 + C11252) * C1285) +
            (C11259 + C11258) * C51067 - (C11260 + C11261) * C1287 -
            (C11262 + C11263) * C1282) *
               C51085 +
           ((C11261 + C11260) * C1286 - (C11265 * C51083 + C11264 * C1285) +
            (C11263 + C11262) * C51067 -
            (C10844 * C948 + C50975 * C957 + C10843 * C438 + C51056 * C448) *
                C1287 -
            (C10844 * C958 + C50975 * C963 + C10843 * C449 + C51056 * C456) *
                C1282) *
               C8156) *
              C50900 * C50853) *
         C50815) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C1391 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C1386 -
             (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
                C51084 +
            ((C10879 + C10878) * C1391 + (C10881 + C10880) * C1386 -
             (C10883 + C10882) * C1392 - (C10885 + C10884) * C50758) *
                C51085 +
            (C10894 * C1391 + C10895 * C1386 - C10896 * C1392 -
             C10897 * C50758) *
                C8156) *
               C50900 * C1643 +
           (((C11252 + C11253) * C1392 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C1386 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C1391) +
             (C11254 + C11255) * C50758) *
                C51084 +
            ((C11257 + C11256) * C1392 -
             ((C11255 + C11254) * C1386 + (C11253 + C11252) * C1391) +
             (C11259 + C11258) * C50758) *
                C51085 +
            ((C11261 + C11260) * C1392 - (C11265 * C1386 + C11264 * C1391) +
             (C11263 + C11262) * C50758) *
                C8156) *
               C50900 * C50853) *
              C51040 +
          ((((C11068 + C11069) * C1392 -
             ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                  C1386 +
              (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                  C1391) +
             (C11070 + C11071) * C50758) *
                C51084 +
            ((C11073 + C11072) * C1392 -
             ((C11071 + C11070) * C1386 + (C11069 + C11068) * C1391) +
             (C11075 + C11074) * C50758) *
                C51085 +
            ((C11077 + C11076) * C1392 - (C11081 * C1386 + C11080 * C1391) +
             (C11079 + C11078) * C50758) *
                C8156) *
               C50900 * C1643 +
           (((C10843 * C811 + C51056 * C819 + C10844 * C1083 + C50975 * C1091) *
                 C1391 +
             (C10843 * C820 + C51056 * C835 + C10844 * C1090 + C50975 * C1095) *
                 C1386 -
             (C12596 + C12597) * C1392 - (C12598 + C12599) * C50758) *
                C51084 +
            ((C12597 + C12596) * C1391 + (C12599 + C12598) * C1386 -
             (C12600 + C12601) * C1392 - (C12602 + C12603) * C50758) *
                C51085 +
            ((C12601 + C12600) * C1391 + (C12603 + C12602) * C1386 -
             (C10844 * C1080 + C50975 * C1085 + C10843 * C814 + C51056 * C825) *
                 C1392 -
             (C10844 * C1084 + C50975 * C1092 + C10843 * C826 + C51056 * C838) *
                 C50758) *
                C8156) *
               C50900 * C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C1391 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C1386 -
            (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
               C51084 +
           ((C10879 + C10878) * C1391 + (C10881 + C10880) * C1386 -
            (C10883 + C10882) * C1392 - (C10885 + C10884) * C50758) *
               C51085 +
           (C10894 * C1391 + C10895 * C1386 - C10896 * C1392 -
            C10897 * C50758) *
               C8156) *
              C50900 * C51087 +
          (((C11252 + C11253) * C1392 -
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C1386 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C1391) +
            (C11254 + C11255) * C50758) *
               C51084 +
           ((C11257 + C11256) * C1392 -
            ((C11255 + C11254) * C1386 + (C11253 + C11252) * C1391) +
            (C11259 + C11258) * C50758) *
               C51085 +
           ((C11261 + C11260) * C1392 - (C11265 * C1386 + C11264 * C1391) +
            (C11263 + C11262) * C50758) *
               C8156) *
              C50900 * C51076 +
          (((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                C1391 +
            (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                C1386 -
            (C11842 + C11843) * C1392 - (C11844 + C11845) * C50758) *
               C51084 +
           ((C11843 + C11842) * C1391 + (C11845 + C11844) * C1386 -
            (C11846 + C11847) * C1392 - (C11848 + C11849) * C50758) *
               C51085 +
           ((C11847 + C11846) * C1391 + (C11849 + C11848) * C1386 -
            (C10844 * C1166 + C50975 * C1171 + C10843 * C947 + C51056 * C955) *
                C1392 -
            (C10844 * C1170 + C50975 * C1178 + C10843 * C956 + C51056 * C962) *
                C50758) *
               C8156) *
              C50900 * C1875) *
         C50815) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
               C118 +
           (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
               C106 -
           (C10878 + C10879) * C119 - (C10880 + C10881) * C107 + C10894 * C120 +
           C10895 * C108 - C10896 * C121 - C10897 * C109) *
              C51084 +
          ((C10879 + C10878) * C118 + (C10881 + C10880) * C106 -
           (C10883 + C10882) * C119 - (C10885 + C10884) * C107 +
           (C10887 + C10886) * C120 + (C10889 + C10888) * C108 -
           (C10890 + C10891) * C121 - (C10892 + C10893) * C109) *
              C51085 +
          (C10894 * C118 + C10895 * C106 - C10896 * C119 - C10897 * C107 +
           (C10891 + C10890) * C120 + (C10893 + C10892) * C108 -
           (C10844 * C439 + C50975 * C450 + C10843 * C127 + C51056 * C139) *
               C121 -
           (C10844 * C451 + C50975 * C457 + C10843 * C140 + C51056 * C148) *
               C109) *
              C8156) *
         C50900 * C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C49770 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C51025 -
            (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
               C51084 +
           ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51025 -
            (C10883 + C10882) * C49763 - (C10885 + C10884) * C50758) *
               C51085 +
           (C10894 * C49770 + C10895 * C51025 - C10896 * C49763 -
            C10897 * C50758) *
               C8156) *
              C50900 * C50841 * C582 +
          (((C11068 + C11069) * C49763 -
            ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                 C51025 +
             (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                 C49770) +
            (C11070 + C11071) * C50758) *
               C51084 +
           ((C11073 + C11072) * C49763 -
            ((C11071 + C11070) * C51025 + (C11069 + C11068) * C49770) +
            (C11075 + C11074) * C50758) *
               C51085 +
           ((C11077 + C11076) * C49763 - (C11081 * C51025 + C11080 * C49770) +
            (C11079 + C11078) * C50758) *
               C8156) *
              C50900 * C50841 * C583 +
          (((C10843 * C587 + C51056 * C592 + C10844 * C818 + C50975 * C834) *
                C49770 +
            (C10843 * C593 + C51056 * C602 + C10844 * C833 + C50975 * C842) *
                C51025 -
            (C11428 + C11429) * C49763 - (C11430 + C11431) * C50758) *
               C51084 +
           ((C11429 + C11428) * C49770 + (C11431 + C11430) * C51025 -
            (C11432 + C11433) * C49763 - (C11434 + C11435) * C50758) *
               C51085 +
           ((C11433 + C11432) * C49770 + (C11435 + C11434) * C51025 -
            (C10844 * C815 + C50975 * C828 + C10843 * C590 + C51056 * C598) *
                C49763 -
            (C10844 * C827 + C50975 * C839 + C10843 * C599 + C51056 * C605) *
                C50758) *
               C8156) *
              C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C283 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
            C10894 * C285 + C10895 * C280) *
               C51084 +
           ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
            (C10883 + C10882) * C284 - (C10885 + C10884) * C279 +
            (C10887 + C10886) * C285 + (C10889 + C10888) * C280) *
               C51085 +
           (C10894 * C283 + C10895 * C278 - C10896 * C284 - C10897 * C279 +
            (C10891 + C10890) * C285 + (C10893 + C10892) * C280) *
               C8156) *
              C50900 * C50841 * C51040 +
          (((C11068 + C11069) * C284 -
            ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                 C278 +
             (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                 C283) +
            (C11070 + C11071) * C279 - C11080 * C285 - C11081 * C280) *
               C51084 +
           ((C11073 + C11072) * C284 -
            ((C11071 + C11070) * C278 + (C11069 + C11068) * C283) +
            (C11075 + C11074) * C279 - (C11076 + C11077) * C285 -
            (C11078 + C11079) * C280) *
               C51085 +
           ((C11077 + C11076) * C284 - (C11081 * C278 + C11080 * C283) +
            (C11079 + C11078) * C279 -
            (C10844 * C1523 + C50975 * C1524 + C10843 * C290 + C51056 * C300) *
                C285 -
            (C10844 * C1525 + C50975 * C1526 + C10843 * C301 + C51056 * C308) *
                C280) *
               C8156) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C696 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C50753) *
               C51084 +
           ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C51085 +
           (C10894 * C696 + C10895 * C50753) * C8156) *
              C50900 * C50841 * C692 -
          ((C11081 * C50753 + C11080 * C696) * C8156 +
           ((C11071 + C11070) * C50753 + (C11069 + C11068) * C696) * C51085 +
           ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                C50753 +
            (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                C696) *
               C51084) *
              C50900 * C50841 * C693 +
          (((C10843 * C587 + C51056 * C592 + C10844 * C818 + C50975 * C834) *
                C696 +
            (C10843 * C593 + C51056 * C602 + C10844 * C833 + C50975 * C842) *
                C50753) *
               C51084 +
           ((C11429 + C11428) * C696 + (C11431 + C11430) * C50753) * C51085 +
           ((C11433 + C11432) * C696 + (C11435 + C11434) * C50753) * C8156) *
              C50900 * C50841 * C694 -
          (((C10844 * C4204 + C50975 * C4205 + C10843 * C703 + C51056 * C710) *
                C50753 +
            (C10844 * C4202 + C50975 * C4203 + C10843 * C698 + C51056 * C704) *
                C696) *
               C8156 +
           ((C10844 * C3151 + C50975 * C3157 + C10843 * C705 + C51056 * C711) *
                C50753 +
            (C10844 * C3145 + C50975 * C3150 + C10843 * C699 + C51056 * C706) *
                C696) *
               C51085 +
           ((C10844 * C3149 + C50975 * C3156 + C10843 * C707 + C51056 * C712) *
                C50753 +
            (C10844 * C3144 + C50975 * C3148 + C10843 * C700 + C51056 * C708) *
                C696) *
               C51084) *
              C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C283 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
            C10894 * C285 + C10895 * C280) *
               C51084 +
           ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
            (C10883 + C10882) * C284 - (C10885 + C10884) * C279 +
            (C10887 + C10886) * C285 + (C10889 + C10888) * C280) *
               C51085 +
           (C10894 * C283 + C10895 * C278 - C10896 * C284 - C10897 * C279 +
            (C10891 + C10890) * C285 + (C10893 + C10892) * C280) *
               C8156) *
              C50900 * C51041 +
          (((C11252 + C11253) * C284 -
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C278 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C283) +
            (C11254 + C11255) * C279 - C11264 * C285 - C11265 * C280) *
               C51084 +
           ((C11257 + C11256) * C284 -
            ((C11255 + C11254) * C278 + (C11253 + C11252) * C283) +
            (C11259 + C11258) * C279 - (C11260 + C11261) * C285 -
            (C11262 + C11263) * C280) *
               C51085 +
           ((C11261 + C11260) * C284 - (C11265 * C278 + C11264 * C283) +
            (C11263 + C11262) * C279 -
            (C10844 * C948 + C50975 * C957 + C10843 * C438 + C51056 * C448) *
                C285 -
            (C10844 * C958 + C50975 * C963 + C10843 * C449 + C51056 * C456) *
                C280) *
               C8156) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C51084 +
            ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C51085 +
            (C10894 * C696 + C10895 * C50753) * C8156) *
               C50900 * C51041 -
           ((C11265 * C50753 + C11264 * C696) * C8156 +
            ((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C51085 +
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C50753 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C696) *
                C51084) *
               C50900 * C50853) *
              C582 +
          ((((C10843 * C811 + C51056 * C819 + C10844 * C1083 + C50975 * C1091) *
                 C696 +
             (C10843 * C820 + C51056 * C835 + C10844 * C1090 + C50975 * C1095) *
                 C50753) *
                C51084 +
            ((C10843 * C812 + C51056 * C821 + C10844 * C1082 + C50975 * C1089) *
                 C696 +
             (C10843 * C822 + C51056 * C836 + C10844 * C1088 + C50975 * C1094) *
                 C50753) *
                C51085 +
            ((C10843 * C813 + C51056 * C823 + C10844 * C1081 + C50975 * C1087) *
                 C696 +
             (C10843 * C824 + C51056 * C837 + C10844 * C1086 + C50975 * C1093) *
                 C50753) *
                C8156) *
               C50900 * C50853 -
           ((C11081 * C50753 + C11080 * C696) * C8156 +
            ((C11071 + C11070) * C50753 + (C11069 + C11068) * C696) * C51085 +
            ((C10844 * C820 + C50975 * C835 + C10843 * C293 + C51056 * C304) *
                 C50753 +
             (C10844 * C811 + C50975 * C819 + C10843 * C287 + C51056 * C294) *
                 C696) *
                C51084) *
               C50900 * C51041) *
              C583 +
          ((((C10843 * C587 + C51056 * C592 + C10844 * C818 + C50975 * C834) *
                 C696 +
             (C10843 * C593 + C51056 * C602 + C10844 * C833 + C50975 * C842) *
                 C50753) *
                C51084 +
            ((C11429 + C11428) * C696 + (C11431 + C11430) * C50753) * C51085 +
            ((C11433 + C11432) * C696 + (C11435 + C11434) * C50753) * C8156) *
               C50900 * C51041 -
           (((C10844 * C3355 + C50975 * C3358 + C10843 * C829 + C51056 * C840) *
                 C50753 +
             (C10844 * C3349 + C50975 * C3354 + C10843 * C816 + C51056 * C830) *
                 C696) *
                C8156 +
            ((C10844 * C3353 + C50975 * C3357 + C10843 * C831 + C51056 * C841) *
                 C50753 +
             (C10844 * C3348 + C50975 * C3352 + C10843 * C817 + C51056 * C832) *
                 C696) *
                C51085 +
            ((C10844 * C3351 + C50975 * C3356 + C10843 * C833 + C51056 * C842) *
                 C50753 +
             (C10844 * C3347 + C50975 * C3350 + C10843 * C818 + C51056 * C834) *
                 C696) *
                C51084) *
               C50900 * C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1285 +
            (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
            C172 * C51067 + C173 * C1287 + C174 * C1282) *
               C110 +
           (C171 * C1285 + C172 * C51083 - C173 * C1286 - C174 * C51067 +
            C175 * C1287 + C176 * C1282) *
               C111 +
           (C173 * C1285 + C174 * C51083 - C175 * C1286 - C176 * C51067 +
            C177 * C1287 + C178 * C1282) *
               C112 +
           (C175 * C1285 + C176 * C51083 - C177 * C1286 - C178 * C51067 +
            C179 * C1287 + C180 * C1282) *
               C113) *
              C50900 * C50841 * C1283 +
          ((C327 * C1286 -
            ((C117 * C293 + C50911 * C304) * C51083 +
             (C117 * C287 + C50911 * C294) * C1285) +
            C328 * C51067 - C329 * C1287 - C330 * C1282) *
               C110 +
           (C329 * C1286 - (C328 * C51083 + C327 * C1285) + C330 * C51067 -
            C331 * C1287 - C332 * C1282) *
               C111 +
           (C331 * C1286 - (C330 * C51083 + C329 * C1285) + C332 * C51067 -
            C333 * C1287 - C334 * C1282) *
               C112 +
           (C333 * C1286 - (C332 * C51083 + C331 * C1285) + C334 * C51067 -
            (C117 * C291 + C50911 * C302) * C1287 -
            (C117 * C303 + C50911 * C309) * C1282) *
               C113) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1285 +
             (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
             C172 * C51067 + C173 * C1287 + C174 * C1282) *
                C2300 +
            (C171 * C1285 + C172 * C51083 - C173 * C1286 - C174 * C51067 +
             C175 * C1287 + C176 * C1282) *
                C50778) *
               C2302 +
           ((C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C2300 +
            (C3812 + C3813 - C3814 - C3815 + C3816 + C3817) * C50778) *
               C2303 +
           ((C3818 + C3819 - C3820 - C3821 + C3822 + C3823) * C2300 +
            (C3824 + C3825 - C3826 - C3827 + C3828 + C3829) * C50778) *
               C2304) *
              C50841 * C1283 +
          (((C3808 - (C3807 + C3806) + C3809 - C3810 - C3811) * C2300 +
            (C3814 - (C3813 + C3812) + C3815 - C3816 - C3817) * C50778) *
               C2302 +
           ((C3820 - (C3819 + C3818) + C3821 - C3822 - C3823) * C2300 +
            (C3826 - (C3825 + C3824) + C3827 - C3828 - C3829) * C50778) *
               C2303 +
           ((C2492 * C1286 - (C2848 * C51083 + C2849 * C1285) + C2493 * C51067 -
             C2494 * C1287 - C2495 * C1282) *
                C2300 +
            (C2494 * C1286 - (C2493 * C51083 + C2492 * C1285) + C2495 * C51067 -
             (C117 * C697 + C50911 * C702) * C1287 -
             (C117 * C701 + C50911 * C709) * C1282) *
                C50778) *
               C2304) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1391 +
            (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
            C172 * C50758) *
               C110 +
           (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) * C111 +
           (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) * C112 +
           (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50758) *
               C113) *
              C50900 * C50841 * C51086 +
          ((C327 * C1392 -
            ((C117 * C293 + C50911 * C304) * C1386 +
             (C117 * C287 + C50911 * C294) * C1391) +
            C328 * C50758) *
               C110 +
           (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50758) *
               C111 +
           (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50758) *
               C112 +
           (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50758) *
               C113) *
              C50900 * C50841 * C51073 +
          (((C117 * C587 + C50911 * C592) * C1391 +
            (C117 * C593 + C50911 * C602) * C1386 - C620 * C1392 -
            C621 * C50758) *
               C110 +
           (C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50758) * C111 +
           (C622 * C1391 + C623 * C1386 - C624 * C1392 - C625 * C50758) * C112 +
           (C624 * C1391 + C625 * C1386 -
            (C117 * C591 + C50911 * C600) * C1392 -
            (C117 * C601 + C50911 * C606) * C50758) *
               C113) *
              C50900 * C50841 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C2300 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C50778) *
               C2302 +
           ((C3976 + C3977 - C3978 - C3979) * C2300 +
            (C3980 + C3981 - C3982 - C3983) * C50778) *
               C2303 +
           C4008 * C2304) *
              C50841 * C51086 +
          (((C3978 - (C3977 + C3976) + C3979) * C2300 +
            (C3982 - (C3981 + C3980) + C3983) * C50778) *
               C2302 +
           ((C3986 - (C3985 + C3984) + C3987) * C2300 +
            (C3990 - (C3989 + C3988) + C3991) * C50778) *
               C2303 +
           ((C3992 - (C3993 + C3994) + C3995) * C2300 +
            (C3996 - (C3997 + C3998) + C3999) * C50778) *
               C2304) *
              C50841 * C51073 +
          (C4008 * C2302 +
           ((C3994 + C3993 - C3992 - C3995) * C2300 +
            (C3998 + C3997 - C3996 - C3999) * C50778) *
               C2303 +
           ((C2989 * C1391 + C2990 * C1386 - C2850 * C1392 - C2851 * C50758) *
                C2300 +
            (C2850 * C1391 + C2851 * C1386 -
             (C117 * C2805 + C50911 * C2810) * C1392 -
             (C117 * C2811 + C50911 * C2814) * C50758) *
                C50778) *
               C2304) *
              C50841 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C110 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C111 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                C112 +
            (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50758) *
                C113) *
               C50900 * C51041 +
           ((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C110 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                C111 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                C112 +
            (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50758) *
                C113) *
               C50900 * C50853) *
              C1283 +
          (((C327 * C1392 -
             ((C117 * C293 + C50911 * C304) * C1386 +
              (C117 * C287 + C50911 * C294) * C1391) +
             C328 * C50758) *
                C110 +
            (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50758) *
                C111 +
            (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50758) *
                C112 +
            (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50758) *
                C113) *
               C50900 * C51041 +
           (((C117 * C811 + C50911 * C819) * C1391 +
             (C117 * C820 + C50911 * C835) * C1386 - C1540 * C1392 -
             C1541 * C50758) *
                C110 +
            (C1540 * C1391 + C1541 * C1386 - C1542 * C1392 - C1543 * C50758) *
                C111 +
            (C1542 * C1391 + C1543 * C1386 - C1544 * C1392 - C1545 * C50758) *
                C112 +
            (C1544 * C1391 + C1545 * C1386 -
             (C117 * C1523 + C50911 * C1524) * C1392 -
             (C117 * C1525 + C50911 * C1526) * C50758) *
                C113) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C1391 +
              (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
              C172 * C50758) *
                 C2300 +
             (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                 C50778) *
                C2302 +
            ((C3976 + C3977 - C3978 - C3979) * C2300 +
             (C3980 + C3981 - C3982 - C3983) * C50778) *
                C2303 +
            C4008 * C2304) *
               C51041 +
           (((C475 * C1392 -
              ((C117 * C441 + C50911 * C452) * C1386 +
               (C117 * C435 + C50911 * C442) * C1391) +
              C476 * C50758) *
                 C2300 +
             (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                 C50778) *
                C2302 +
            ((C4207 - (C4208 + C4209) + C4210) * C2300 +
             (C4211 - (C4212 + C4213) + C4214) * C50778) *
                C2303 +
            ((C4215 - (C4216 + C4217) + C4218) * C2300 +
             (C4219 - (C4220 + C4221) + C4222) * C50778) *
                C2304) *
               C50853) *
              C1283 +
          ((((C3978 - (C3977 + C3976) + C3979) * C2300 +
             (C3982 - (C3981 + C3980) + C3983) * C50778) *
                C2302 +
            ((C3986 - (C3985 + C3984) + C3987) * C2300 +
             (C3990 - (C3989 + C3988) + C3991) * C50778) *
                C2303 +
            ((C3992 - (C3993 + C3994) + C3995) * C2300 +
             (C3996 - (C3997 + C3998) + C3999) * C50778) *
                C2304) *
               C51041 +
           (((C4209 + C4208 - C4207 - C4210) * C2300 +
             (C4213 + C4212 - C4211 - C4214) * C50778) *
                C2302 +
            ((C4217 + C4216 - C4215 - C4218) * C2300 +
             (C4221 + C4220 - C4219 - C4222) * C50778) *
                C2303 +
            ((C3186 * C1391 + C3187 * C1386 - C3188 * C1392 - C3189 * C50758) *
                 C2300 +
             (C3188 * C1391 + C3189 * C1386 -
              (C117 * C4202 + C50911 * C4203) * C1392 -
              (C117 * C4204 + C50911 * C4205) * C50758) *
                 C50778) *
                C2304) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C110 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C111 +
            (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                C112 +
            (C175 * C49770 + C176 * C51025 - C177 * C49763 - C178 * C50758) *
                C113) *
               C50900 * C1643 +
           ((C475 * C49763 -
             ((C117 * C441 + C50911 * C452) * C51025 +
              (C117 * C435 + C50911 * C442) * C49770) +
             C476 * C50758) *
                C110 +
            (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                C111 +
            (C479 * C49763 - (C478 * C51025 + C477 * C49770) + C480 * C50758) *
                C112 +
            (C481 * C49763 - (C480 * C51025 + C479 * C49770) + C482 * C50758) *
                C113) *
               C50900 * C50853) *
              C1283 +
          (((C327 * C49763 -
             ((C117 * C293 + C50911 * C304) * C51025 +
              (C117 * C287 + C50911 * C294) * C49770) +
             C328 * C50758) *
                C110 +
            (C329 * C49763 - (C328 * C51025 + C327 * C49770) + C330 * C50758) *
                C111 +
            (C331 * C49763 - (C330 * C51025 + C329 * C49770) + C332 * C50758) *
                C112 +
            (C333 * C49763 - (C332 * C51025 + C331 * C49770) + C334 * C50758) *
                C113) *
               C50900 * C1643 +
           (((C117 * C811 + C50911 * C819) * C49770 +
             (C117 * C820 + C50911 * C835) * C51025 - C1540 * C49763 -
             C1541 * C50758) *
                C110 +
            (C1540 * C49770 + C1541 * C51025 - C1542 * C49763 -
             C1543 * C50758) *
                C111 +
            (C1542 * C49770 + C1543 * C51025 - C1544 * C49763 -
             C1545 * C50758) *
                C112 +
            (C1544 * C49770 + C1545 * C51025 -
             (C117 * C1523 + C50911 * C1524) * C49763 -
             (C117 * C1525 + C50911 * C1526) * C50758) *
                C113) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C49770 +
              (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
              C172 * C50758) *
                 C2300 +
             (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                 C50778) *
                C2302 +
            ((C2816 + C2817 - C2818 - C2819) * C2300 +
             (C2820 + C2821 - C2822 - C2823) * C50778) *
                C2303 +
            C2860 * C2304) *
               C1643 +
           (((C475 * C49763 -
              ((C117 * C441 + C50911 * C452) * C51025 +
               (C117 * C435 + C50911 * C442) * C49770) +
              C476 * C50758) *
                 C2300 +
             (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                 C50778) *
                C2302 +
            ((C4903 - (C4904 + C4905) + C4906) * C2300 +
             (C4907 - (C4908 + C4909) + C4910) * C50778) *
                C2303 +
            ((C4911 - (C4912 + C4913) + C4914) * C2300 +
             (C4915 - (C4916 + C4917) + C4918) * C50778) *
                C2304) *
               C50853) *
              C1283 +
          ((((C2818 - (C2817 + C2816) + C2819) * C2300 +
             (C2822 - (C2821 + C2820) + C2823) * C50778) *
                C2302 +
            ((C2826 - (C2825 + C2824) + C2827) * C2300 +
             (C2830 - (C2829 + C2828) + C2831) * C50778) *
                C2303 +
            ((C2832 - (C2854 + C2855) + C2837) * C2300 +
             (C2838 - (C2839 + C2840) + C2841) * C50778) *
                C2304) *
               C1643 +
           (((C4905 + C4904 - C4903 - C4906) * C2300 +
             (C4909 + C4908 - C4907 - C4910) * C50778) *
                C2302 +
            ((C4913 + C4912 - C4911 - C4914) * C2300 +
             (C4917 + C4916 - C4915 - C4918) * C50778) *
                C2303 +
            ((C3186 * C49770 + C3187 * C51025 - C3188 * C49763 -
              C3189 * C50758) *
                 C2300 +
             (C3188 * C49770 + C3189 * C51025 -
              (C117 * C4202 + C50911 * C4203) * C49763 -
              (C117 * C4204 + C50911 * C4205) * C50758) *
                 C50778) *
                C2304) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C110 +
            (C171 * C696 + C172 * C50753) * C111 +
            (C173 * C696 + C174 * C50753) * C112 +
            (C175 * C696 + C176 * C50753) * C113) *
               C50900 * C1643 -
           ((C480 * C50753 + C479 * C696) * C113 +
            (C478 * C50753 + C477 * C696) * C112 +
            (C476 * C50753 + C475 * C696) * C111 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C110) *
               C50900 * C50853) *
              C51086 +
          ((((C117 * C811 + C50911 * C819) * C696 +
             (C117 * C820 + C50911 * C835) * C50753) *
                C110 +
            (C1540 * C696 + C1541 * C50753) * C111 +
            (C1542 * C696 + C1543 * C50753) * C112 +
            (C1544 * C696 + C1545 * C50753) * C113) *
               C50900 * C50853 -
           ((C332 * C50753 + C331 * C696) * C113 +
            (C330 * C50753 + C329 * C696) * C112 +
            (C328 * C50753 + C327 * C696) * C111 +
            ((C117 * C293 + C50911 * C304) * C50753 +
             (C117 * C287 + C50911 * C294) * C696) *
                C110) *
               C50900 * C1643) *
              C51073 +
          ((((C117 * C587 + C50911 * C592) * C696 +
             (C117 * C593 + C50911 * C602) * C50753) *
                C110 +
            (C620 * C696 + C621 * C50753) * C111 +
            (C622 * C696 + C623 * C50753) * C112 +
            (C624 * C696 + C625 * C50753) * C113) *
               C50900 * C1643 -
           (((C117 * C827 + C50911 * C839) * C50753 +
             (C117 * C815 + C50911 * C828) * C696) *
                C113 +
            ((C117 * C829 + C50911 * C840) * C50753 +
             (C117 * C816 + C50911 * C830) * C696) *
                C112 +
            ((C117 * C831 + C50911 * C841) * C50753 +
             (C117 * C817 + C50911 * C832) * C696) *
                C111 +
            ((C117 * C833 + C50911 * C842) * C50753 +
             (C117 * C818 + C50911 * C834) * C696) *
                C110) *
               C50900 * C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C2300 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C2302 +
            ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
            C2997 * C2304) *
               C1643 -
           (C3201 * C2304 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C2300) * C2303 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C2300) *
                C2302) *
               C50853) *
              C51086 +
          ((((C3194 + C3193) * C2300 + (C3168 + C3167) * C50778) * C2302 +
            ((C3192 + C3191) * C2300 + (C3162 + C3161) * C50778) * C2303 +
            ((C3195 + C3196) * C2300 + (C3197 + C3198) * C50778) * C2304) *
               C50853 -
           (C2998 * C2304 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
               C1643) *
              C51073 +
          ((C2997 * C2302 +
            ((C2978 + C2977) * C2300 + (C2976 + C2975) * C50778) * C2303 +
            ((C2995 + C2996) * C2300 + (C2983 + C2984) * C50778) * C2304) *
               C1643 -
           ((((C117 * C3152 + C50911 * C3158) * C50753 +
              (C117 * C3146 + C50911 * C3153) * C696) *
                 C50778 +
             ((C117 * C3154 + C50911 * C3159) * C50753 +
              (C117 * C3147 + C50911 * C3155) * C696) *
                 C2300) *
                C2304 +
            ((C3198 + C3197) * C50778 + (C3196 + C3195) * C2300) * C2303 +
            C3201 * C2302) *
               C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C110 +
            (C171 * C696 + C172 * C50753) * C111 +
            (C173 * C696 + C174 * C50753) * C112 +
            (C175 * C696 + C176 * C50753) * C113) *
               C50900 * C51087 -
           ((C480 * C50753 + C479 * C696) * C113 +
            (C478 * C50753 + C477 * C696) * C112 +
            (C476 * C50753 + C475 * C696) * C111 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C110) *
               C50900 * C51076 +
           (((C117 * C944 + C50911 * C949) * C696 +
             (C117 * C950 + C50911 * C959) * C50753) *
                C110 +
            (C977 * C696 + C978 * C50753) * C111 +
            (C979 * C696 + C980 * C50753) * C112 +
            (C981 * C696 + C982 * C50753) * C113) *
               C50900 * C1875) *
              C1283 +
          ((((C117 * C811 + C50911 * C819) * C696 +
             (C117 * C820 + C50911 * C835) * C50753) *
                C110 +
            (C1540 * C696 + C1541 * C50753) * C111 +
            (C1542 * C696 + C1543 * C50753) * C112 +
            (C1544 * C696 + C1545 * C50753) * C113) *
               C50900 * C51076 -
           ((C332 * C50753 + C331 * C696) * C113 +
            (C330 * C50753 + C329 * C696) * C112 +
            (C328 * C50753 + C327 * C696) * C111 +
            ((C117 * C293 + C50911 * C304) * C50753 +
             (C117 * C287 + C50911 * C294) * C696) *
                C110) *
               C50900 * C51087 -
           (((C117 * C1084 + C50911 * C1092) * C50753 +
             (C117 * C1080 + C50911 * C1085) * C696) *
                C113 +
            ((C117 * C1086 + C50911 * C1093) * C50753 +
             (C117 * C1081 + C50911 * C1087) * C696) *
                C112 +
            ((C117 * C1088 + C50911 * C1094) * C50753 +
             (C117 * C1082 + C50911 * C1089) * C696) *
                C111 +
            ((C117 * C1090 + C50911 * C1095) * C50753 +
             (C117 * C1083 + C50911 * C1091) * C696) *
                C110) *
               C50900 * C1875) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C2300 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C2302 +
            ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
            C2997 * C2304) *
               C51087 -
           (C3201 * C2304 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C2300) * C2303 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C2300) *
                C2302) *
               C51076 +
           ((((C117 * C944 + C50911 * C949) * C696 +
              (C117 * C950 + C50911 * C959) * C50753) *
                 C2300 +
             (C977 * C696 + C978 * C50753) * C50778) *
                C2302 +
            ((C3542 + C3543) * C2300 + (C3530 + C3531) * C50778) * C2303 +
            ((C3544 + C3545) * C2300 + (C3536 + C3537) * C50778) * C2304) *
               C1875) *
              C1283 +
          ((((C3194 + C3193) * C2300 + (C3168 + C3167) * C50778) * C2302 +
            ((C3192 + C3191) * C2300 + (C3162 + C3161) * C50778) * C2303 +
            ((C3195 + C3196) * C2300 + (C3197 + C3198) * C50778) * C2304) *
               C51076 -
           (C2998 * C2304 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
               C51087 -
           ((((C117 * C3519 + C50911 * C3523) * C50753 +
              (C117 * C3517 + C50911 * C3520) * C696) *
                 C50778 +
             ((C117 * C3521 + C50911 * C3524) * C50753 +
              (C117 * C3518 + C50911 * C3522) * C696) *
                 C2300) *
                C2304 +
            ((C3537 + C3536) * C50778 + (C3545 + C3544) * C2300) * C2303 +
            ((C3531 + C3530) * C50778 + (C3543 + C3542) * C2300) * C2302) *
               C1875) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C49770 +
            (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
            C172 * C50758) *
               C110 +
           (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
               C111 +
           (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
               C112 +
           (C175 * C49770 + C176 * C51025 - C177 * C49763 - C178 * C50758) *
               C113) *
              C50900 * C50841 * C582 +
          ((C327 * C49763 -
            ((C117 * C293 + C50911 * C304) * C51025 +
             (C117 * C287 + C50911 * C294) * C49770) +
            C328 * C50758) *
               C110 +
           (C329 * C49763 - (C328 * C51025 + C327 * C49770) + C330 * C50758) *
               C111 +
           (C331 * C49763 - (C330 * C51025 + C329 * C49770) + C332 * C50758) *
               C112 +
           (C333 * C49763 - (C332 * C51025 + C331 * C49770) + C334 * C50758) *
               C113) *
              C50900 * C50841 * C583 +
          (((C117 * C587 + C50911 * C592) * C49770 +
            (C117 * C593 + C50911 * C602) * C51025 - C620 * C49763 -
            C621 * C50758) *
               C110 +
           (C620 * C49770 + C621 * C51025 - C622 * C49763 - C623 * C50758) *
               C111 +
           (C622 * C49770 + C623 * C51025 - C624 * C49763 - C625 * C50758) *
               C112 +
           (C624 * C49770 + C625 * C51025 -
            (C117 * C591 + C50911 * C600) * C49763 -
            (C117 * C601 + C50911 * C606) * C50758) *
               C113) *
              C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50911 * C129) * C118 +
           (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C110 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C111 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C112 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50911 * C141) * C121 -
           (C117 * C142 + C50911 * C149) * C109) *
              C113) *
         C50900 * C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C49770 +
            (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
            C172 * C50758) *
               C110 +
           (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
               C111 +
           (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
               C112 +
           (C175 * C49770 + C176 * C51025 - C177 * C49763 - C178 * C50758) *
               C113) *
              C50900 * C941 +
          ((C475 * C49763 -
            ((C117 * C441 + C50911 * C452) * C51025 +
             (C117 * C435 + C50911 * C442) * C49770) +
            C476 * C50758) *
               C110 +
           (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
               C111 +
           (C479 * C49763 - (C478 * C51025 + C477 * C49770) + C480 * C50758) *
               C112 +
           (C481 * C49763 - (C480 * C51025 + C479 * C49770) + C482 * C50758) *
               C113) *
              C50900 * C942 +
          (((C117 * C944 + C50911 * C949) * C49770 +
            (C117 * C950 + C50911 * C959) * C51025 - C977 * C49763 -
            C978 * C50758) *
               C110 +
           (C977 * C49770 + C978 * C51025 - C979 * C49763 - C980 * C50758) *
               C111 +
           (C979 * C49770 + C980 * C51025 - C981 * C49763 - C982 * C50758) *
               C112 +
           (C981 * C49770 + C982 * C51025 -
            (C117 * C948 + C50911 * C957) * C49763 -
            (C117 * C958 + C50911 * C963) * C50758) *
               C113) *
              C50900 * C943) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C118 +
            (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C2300 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50778) *
              C2302 +
          (((C117 * C287 + C50911 * C294) * C118 +
            (C117 * C293 + C50911 * C304) * C106 - C327 * C119 - C328 * C107 +
            C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
               C2300 +
           (C327 * C118 + C328 * C106 - C329 * C119 - C330 * C107 +
            C331 * C120 + C332 * C108 - C333 * C121 - C334 * C109) *
               C50778) *
              C2303 +
          (((C117 * C587 + C50911 * C592) * C118 +
            (C117 * C593 + C50911 * C602) * C106 - C620 * C119 - C621 * C107 +
            C622 * C120 + C623 * C108 - C624 * C121 - C625 * C109) *
               C2300 +
           (C620 * C118 + C621 * C106 - C622 * C119 - C623 * C107 +
            C624 * C120 + C625 * C108 - (C117 * C591 + C50911 * C600) * C121 -
            (C117 * C601 + C50911 * C606) * C109) *
               C50778) *
              C2304) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C2300 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C50778) *
               C2302 +
           ((C2816 + C2817 - C2818 - C2819) * C2300 +
            (C2820 + C2821 - C2822 - C2823) * C50778) *
               C2303 +
           C2860 * C2304) *
              C50841 * C582 +
          (((C2818 - (C2817 + C2816) + C2819) * C2300 +
            (C2822 - (C2821 + C2820) + C2823) * C50778) *
               C2302 +
           ((C2826 - (C2825 + C2824) + C2827) * C2300 +
            (C2830 - (C2829 + C2828) + C2831) * C50778) *
               C2303 +
           ((C2832 - (C2854 + C2855) + C2837) * C2300 +
            (C2838 - (C2839 + C2840) + C2841) * C50778) *
               C2304) *
              C50841 * C583 +
          (C2860 * C2302 +
           ((C2855 + C2854 - C2832 - C2837) * C2300 +
            (C2840 + C2839 - C2838 - C2841) * C50778) *
               C2303 +
           (((C117 * C2803 + C50911 * C2806) * C49770 +
             (C117 * C2807 + C50911 * C2812) * C51025 - C2850 * C49763 -
             C2851 * C50758) *
                C2300 +
            (C2850 * C49770 + C2851 * C51025 -
             (C117 * C2805 + C50911 * C2810) * C49763 -
             (C117 * C2811 + C50911 * C2814) * C50758) *
                C50778) *
               C2304) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C2300 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C50778) *
               C2302 +
           ((C2816 + C2817 - C2818 - C2819) * C2300 +
            (C2820 + C2821 - C2822 - C2823) * C50778) *
               C2303 +
           C2860 * C2304) *
              C941 +
          (((C475 * C49763 -
             ((C117 * C441 + C50911 * C452) * C51025 +
              (C117 * C435 + C50911 * C442) * C49770) +
             C476 * C50758) *
                C2300 +
            (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                C50778) *
               C2302 +
           ((C1540 * C49763 - (C3184 * C51025 + C3185 * C49770) +
             C1541 * C50758) *
                C2300 +
            (C1542 * C49763 - (C1541 * C51025 + C1540 * C49770) +
             C1543 * C50758) *
                C50778) *
               C2303 +
           ((C2654 * C49763 - (C3182 * C51025 + C3183 * C49770) +
             C2655 * C50758) *
                C2300 +
            (C2656 * C49763 - (C2655 * C51025 + C2654 * C49770) +
             C2657 * C50758) *
                C50778) *
               C2304) *
              C942 +
          ((((C117 * C944 + C50911 * C949) * C49770 +
             (C117 * C950 + C50911 * C959) * C51025 - C977 * C49763 -
             C978 * C50758) *
                C2300 +
            (C977 * C49770 + C978 * C51025 - C979 * C49763 - C980 * C50758) *
                C50778) *
               C2302 +
           (((C117 * C1083 + C50911 * C1091) * C49770 +
             (C117 * C1090 + C50911 * C1095) * C51025 - C3368 * C49763 -
             C3369 * C50758) *
                C2300 +
            (C3368 * C49770 + C3369 * C51025 -
             (C117 * C1081 + C50911 * C1087) * C49763 -
             (C117 * C1086 + C50911 * C1093) * C50758) *
                C50778) *
               C2303 +
           (((C117 * C3347 + C50911 * C3350) * C49770 +
             (C117 * C3351 + C50911 * C3356) * C51025 - C3370 * C49763 -
             C3371 * C50758) *
                C2300 +
            (C3370 * C49770 + C3371 * C51025 -
             (C117 * C3349 + C50911 * C3354) * C49763 -
             (C117 * C3355 + C50911 * C3358) * C50758) *
                C50778) *
               C2304) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C696 +
            (C117 * C130 + C50911 * C143) * C50753) *
               C110 +
           (C171 * C696 + C172 * C50753) * C111 +
           (C173 * C696 + C174 * C50753) * C112 +
           (C175 * C696 + C176 * C50753) * C113) *
              C50900 * C50841 * C692 -
          ((C332 * C50753 + C331 * C696) * C113 +
           (C330 * C50753 + C329 * C696) * C112 +
           (C328 * C50753 + C327 * C696) * C111 +
           ((C117 * C293 + C50911 * C304) * C50753 +
            (C117 * C287 + C50911 * C294) * C696) *
               C110) *
              C50900 * C50841 * C693 +
          (((C117 * C587 + C50911 * C592) * C696 +
            (C117 * C593 + C50911 * C602) * C50753) *
               C110 +
           (C620 * C696 + C621 * C50753) * C111 +
           (C622 * C696 + C623 * C50753) * C112 +
           (C624 * C696 + C625 * C50753) * C113) *
              C50900 * C50841 * C694 -
          (((C117 * C701 + C50911 * C709) * C50753 +
            (C117 * C697 + C50911 * C702) * C696) *
               C113 +
           ((C117 * C703 + C50911 * C710) * C50753 +
            (C117 * C698 + C50911 * C704) * C696) *
               C112 +
           ((C117 * C705 + C50911 * C711) * C50753 +
            (C117 * C699 + C50911 * C706) * C696) *
               C111 +
           ((C117 * C707 + C50911 * C712) * C50753 +
            (C117 * C700 + C50911 * C708) * C696) *
               C110) *
              C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C110 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C111 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C112 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C113) *
              C50900 * C50841 * C51040 +
          ((C327 * C284 -
            ((C117 * C293 + C50911 * C304) * C278 +
             (C117 * C287 + C50911 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C110 +
           (C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
            C331 * C285 - C332 * C280) *
               C111 +
           (C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
            C333 * C285 - C334 * C280) *
               C112 +
           (C333 * C284 - (C332 * C278 + C331 * C283) + C334 * C279 -
            (C117 * C291 + C50911 * C302) * C285 -
            (C117 * C303 + C50911 * C309) * C280) *
               C113) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C110 +
            (C171 * C696 + C172 * C50753) * C111 +
            (C173 * C696 + C174 * C50753) * C112 +
            (C175 * C696 + C176 * C50753) * C113) *
               C50900 * C941 -
           ((C480 * C50753 + C479 * C696) * C113 +
            (C478 * C50753 + C477 * C696) * C112 +
            (C476 * C50753 + C475 * C696) * C111 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C110) *
               C50900 * C942 +
           (((C117 * C944 + C50911 * C949) * C696 +
             (C117 * C950 + C50911 * C959) * C50753) *
                C110 +
            (C977 * C696 + C978 * C50753) * C111 +
            (C979 * C696 + C980 * C50753) * C112 +
            (C981 * C696 + C982 * C50753) * C113) *
               C50900 * C943) *
              C51040 +
          ((((C117 * C811 + C50911 * C819) * C696 +
             (C117 * C820 + C50911 * C835) * C50753) *
                C110 +
            ((C117 * C812 + C50911 * C821) * C696 +
             (C117 * C822 + C50911 * C836) * C50753) *
                C111 +
            ((C117 * C813 + C50911 * C823) * C696 +
             (C117 * C824 + C50911 * C837) * C50753) *
                C112 +
            ((C117 * C814 + C50911 * C825) * C696 +
             (C117 * C826 + C50911 * C838) * C50753) *
                C113) *
               C50900 * C942 -
           ((C332 * C50753 + C331 * C696) * C113 +
            (C330 * C50753 + C329 * C696) * C112 +
            (C328 * C50753 + C327 * C696) * C111 +
            ((C117 * C293 + C50911 * C304) * C50753 +
             (C117 * C287 + C50911 * C294) * C696) *
                C110) *
               C50900 * C941 -
           (((C117 * C1084 + C50911 * C1092) * C50753 +
             (C117 * C1080 + C50911 * C1085) * C696) *
                C113 +
            ((C117 * C1086 + C50911 * C1093) * C50753 +
             (C117 * C1081 + C50911 * C1087) * C696) *
                C112 +
            ((C117 * C1088 + C50911 * C1094) * C50753 +
             (C117 * C1082 + C50911 * C1089) * C696) *
                C111 +
            ((C117 * C1090 + C50911 * C1095) * C50753 +
             (C117 * C1083 + C50911 * C1091) * C696) *
                C110) *
               C50900 * C943) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50778) *
               C2302 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C2300 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C50778) *
               C2303 +
           ((C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C2300 +
            (C2474 + C2475 - C2476 - C2477 + C2478 + C2479) * C50778) *
               C2304) *
              C50841 * C51040 +
          (((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C2300 +
            (C2462 - (C2461 + C2460) + C2463 - C2464 - C2465) * C50778) *
               C2302 +
           ((C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C2300 +
            (C2476 - (C2475 + C2474) + C2477 - C2478 - C2479) * C50778) *
               C2303 +
           ((C2492 * C284 -
             ((C117 * C707 + C50911 * C712) * C278 +
              (C117 * C700 + C50911 * C708) * C283) +
             C2493 * C279 - C2494 * C285 - C2495 * C280) *
                C2300 +
            (C2494 * C284 - (C2493 * C278 + C2492 * C283) + C2495 * C279 -
             (C117 * C697 + C50911 * C702) * C285 -
             (C117 * C701 + C50911 * C709) * C280) *
                C50778) *
               C2304) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C2300 +
            (C171 * C696 + C172 * C50753) * C50778) *
               C2302 +
           ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
           C2997 * C2304) *
              C50841 * C692 -
          (C2998 * C2304 +
           ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
           ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
              C50841 * C693 +
          (C2997 * C2302 +
           ((C2978 + C2977) * C2300 + (C2976 + C2975) * C50778) * C2303 +
           ((C2995 + C2996) * C2300 + (C2983 + C2984) * C50778) * C2304) *
              C50841 * C694 -
          ((((C117 * C2960 + C50911 * C2964) * C50753 +
             (C117 * C2958 + C50911 * C2961) * C696) *
                C50778 +
            ((C117 * C2962 + C50911 * C2965) * C50753 +
             (C117 * C2959 + C50911 * C2963) * C696) *
                C2300) *
               C2304 +
           ((C2984 + C2983) * C50778 + (C2996 + C2995) * C2300) * C2303 +
           C2998 * C2302) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C2300 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C2302 +
            ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
            C2997 * C2304) *
               C941 -
           (C3201 * C2304 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C2300) * C2303 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C2300) *
                C2302) *
               C942 +
           ((((C117 * C944 + C50911 * C949) * C696 +
              (C117 * C950 + C50911 * C959) * C50753) *
                 C2300 +
             (C977 * C696 + C978 * C50753) * C50778) *
                C2302 +
            ((C3542 + C3543) * C2300 + (C3530 + C3531) * C50778) * C2303 +
            ((C3544 + C3545) * C2300 + (C3536 + C3537) * C50778) * C2304) *
               C943) *
              C51040 +
          ((((C3194 + C3193) * C2300 + (C3168 + C3167) * C50778) * C2302 +
            ((C3192 + C3191) * C2300 + (C3162 + C3161) * C50778) * C2303 +
            ((C3195 + C3196) * C2300 + (C3197 + C3198) * C50778) * C2304) *
               C942 -
           (C2998 * C2304 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
               C941 -
           ((((C117 * C3519 + C50911 * C3523) * C50753 +
              (C117 * C3517 + C50911 * C3520) * C696) *
                 C50778 +
             ((C117 * C3521 + C50911 * C3524) * C50753 +
              (C117 * C3518 + C50911 * C3522) * C696) *
                 C2300) *
                C2304 +
            ((C3537 + C3536) * C50778 + (C3545 + C3544) * C2300) * C2303 +
            ((C3531 + C3530) * C50778 + (C3543 + C3542) * C2300) * C2302) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C110 +
            (C171 * C696 + C172 * C50753) * C111 +
            (C173 * C696 + C174 * C50753) * C112 +
            (C175 * C696 + C176 * C50753) * C113) *
               C50900 * C51041 -
           ((C480 * C50753 + C479 * C696) * C113 +
            (C478 * C50753 + C477 * C696) * C112 +
            (C476 * C50753 + C475 * C696) * C111 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C110) *
               C50900 * C50853) *
              C582 +
          ((((C117 * C811 + C50911 * C819) * C696 +
             (C117 * C820 + C50911 * C835) * C50753) *
                C110 +
            ((C117 * C812 + C50911 * C821) * C696 +
             (C117 * C822 + C50911 * C836) * C50753) *
                C111 +
            ((C117 * C813 + C50911 * C823) * C696 +
             (C117 * C824 + C50911 * C837) * C50753) *
                C112 +
            ((C117 * C814 + C50911 * C825) * C696 +
             (C117 * C826 + C50911 * C838) * C50753) *
                C113) *
               C50900 * C50853 -
           ((C332 * C50753 + C331 * C696) * C113 +
            (C330 * C50753 + C329 * C696) * C112 +
            (C328 * C50753 + C327 * C696) * C111 +
            ((C117 * C293 + C50911 * C304) * C50753 +
             (C117 * C287 + C50911 * C294) * C696) *
                C110) *
               C50900 * C51041) *
              C583 +
          ((((C117 * C587 + C50911 * C592) * C696 +
             (C117 * C593 + C50911 * C602) * C50753) *
                C110 +
            (C620 * C696 + C621 * C50753) * C111 +
            (C622 * C696 + C623 * C50753) * C112 +
            (C624 * C696 + C625 * C50753) * C113) *
               C50900 * C51041 -
           (((C117 * C827 + C50911 * C839) * C50753 +
             (C117 * C815 + C50911 * C828) * C696) *
                C113 +
            ((C117 * C829 + C50911 * C840) * C50753 +
             (C117 * C816 + C50911 * C830) * C696) *
                C112 +
            ((C117 * C831 + C50911 * C841) * C50753 +
             (C117 * C817 + C50911 * C832) * C696) *
                C111 +
            ((C117 * C833 + C50911 * C842) * C50753 +
             (C117 * C818 + C50911 * C834) * C696) *
                C110) *
               C50900 * C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C110 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C111 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C112 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C113) *
              C50900 * C51041 +
          ((C475 * C284 -
            ((C117 * C441 + C50911 * C452) * C278 +
             (C117 * C435 + C50911 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C110 +
           (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
            C479 * C285 - C480 * C280) *
               C111 +
           (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
            C481 * C285 - C482 * C280) *
               C112 +
           (C481 * C284 - (C480 * C278 + C479 * C283) + C482 * C279 -
            (C117 * C439 + C50911 * C450) * C285 -
            (C117 * C451 + C50911 * C457) * C280) *
               C113) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C696 +
            (C117 * C130 + C50911 * C143) * C50753) *
               C110 +
           (C171 * C696 + C172 * C50753) * C111 +
           (C173 * C696 + C174 * C50753) * C112 +
           (C175 * C696 + C176 * C50753) * C113) *
              C50900 * C1162 -
          ((C480 * C50753 + C479 * C696) * C113 +
           (C478 * C50753 + C477 * C696) * C112 +
           (C476 * C50753 + C475 * C696) * C111 +
           ((C117 * C441 + C50911 * C452) * C50753 +
            (C117 * C435 + C50911 * C442) * C696) *
               C110) *
              C50900 * C1163 +
          (((C117 * C944 + C50911 * C949) * C696 +
            (C117 * C950 + C50911 * C959) * C50753) *
               C110 +
           (C977 * C696 + C978 * C50753) * C111 +
           (C979 * C696 + C980 * C50753) * C112 +
           (C981 * C696 + C982 * C50753) * C113) *
              C50900 * C1164 -
          (((C117 * C1170 + C50911 * C1178) * C50753 +
            (C117 * C1166 + C50911 * C1171) * C696) *
               C113 +
           ((C117 * C1172 + C50911 * C1179) * C50753 +
            (C117 * C1167 + C50911 * C1173) * C696) *
               C112 +
           ((C117 * C1174 + C50911 * C1180) * C50753 +
            (C117 * C1168 + C50911 * C1175) * C696) *
               C111 +
           ((C117 * C1176 + C50911 * C1181) * C50753 +
            (C117 * C1169 + C50911 * C1177) * C696) *
               C110) *
              C50900 * C1165) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50778) *
               C2302 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C2300 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C50778) *
               C2303 +
           ((C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C2300 +
            (C2474 + C2475 - C2476 - C2477 + C2478 + C2479) * C50778) *
               C2304) *
              C51041 +
          (((C475 * C284 -
             ((C117 * C441 + C50911 * C452) * C278 +
              (C117 * C435 + C50911 * C442) * C283) +
             C476 * C279 - C477 * C285 - C478 * C280) *
                C2300 +
            (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
             C479 * C285 - C480 * C280) *
                C50778) *
               C2302 +
           ((C1540 * C284 -
             ((C117 * C820 + C50911 * C835) * C278 +
              (C117 * C811 + C50911 * C819) * C283) +
             C1541 * C279 - C1542 * C285 - C1543 * C280) *
                C2300 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50778) *
               C2303 +
           ((C2654 * C284 -
             ((C117 * C833 + C50911 * C842) * C278 +
              (C117 * C818 + C50911 * C834) * C283) +
             C2655 * C279 - C2656 * C285 - C2657 * C280) *
                C2300 +
            (C2656 * C284 - (C2655 * C278 + C2654 * C283) + C2657 * C279 -
             (C117 * C815 + C50911 * C828) * C285 -
             (C117 * C827 + C50911 * C839) * C280) *
                C50778) *
               C2304) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C2300 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C2302 +
            ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
            C2997 * C2304) *
               C51041 -
           (C3201 * C2304 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C2300) * C2303 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C2300) *
                C2302) *
               C50853) *
              C582 +
          ((((C3194 + C3193) * C2300 + (C3168 + C3167) * C50778) * C2302 +
            ((C3192 + C3191) * C2300 + (C3162 + C3161) * C50778) * C2303 +
            ((C3195 + C3196) * C2300 + (C3197 + C3198) * C50778) * C2304) *
               C50853 -
           (C2998 * C2304 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
               C51041) *
              C583 +
          ((C2997 * C2302 +
            ((C2978 + C2977) * C2300 + (C2976 + C2975) * C50778) * C2303 +
            ((C2995 + C2996) * C2300 + (C2983 + C2984) * C50778) * C2304) *
               C51041 -
           ((((C117 * C3152 + C50911 * C3158) * C50753 +
              (C117 * C3146 + C50911 * C3153) * C696) *
                 C50778 +
             ((C117 * C3154 + C50911 * C3159) * C50753 +
              (C117 * C3147 + C50911 * C3155) * C696) *
                 C2300) *
                C2304 +
            ((C3198 + C3197) * C50778 + (C3196 + C3195) * C2300) * C2303 +
            C3201 * C2302) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C2300 +
            (C171 * C696 + C172 * C50753) * C50778) *
               C2302 +
           ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
           C2997 * C2304) *
              C1162 -
          (C3201 * C2304 +
           ((C3167 + C3168) * C50778 + (C3193 + C3194) * C2300) * C2303 +
           ((C476 * C50753 + C475 * C696) * C50778 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C2300) *
               C2302) *
              C1163 +
          ((((C117 * C944 + C50911 * C949) * C696 +
             (C117 * C950 + C50911 * C959) * C50753) *
                C2300 +
            (C977 * C696 + C978 * C50753) * C50778) *
               C2302 +
           ((C3542 + C3543) * C2300 + (C3530 + C3531) * C50778) * C2303 +
           ((C3544 + C3545) * C2300 + (C3536 + C3537) * C50778) * C2304) *
              C1164 -
          ((((C117 * C3647 + C50911 * C3655) * C50753 +
             (C117 * C3643 + C50911 * C3648) * C696) *
                C50778 +
            ((C117 * C3649 + C50911 * C3656) * C50753 +
             (C117 * C3644 + C50911 * C3650) * C696) *
                C2300) *
               C2304 +
           (((C117 * C3651 + C50911 * C3657) * C50753 +
             (C117 * C3645 + C50911 * C3652) * C696) *
                C50778 +
            ((C117 * C3653 + C50911 * C3658) * C50753 +
             (C117 * C3646 + C50911 * C3654) * C696) *
                C2300) *
               C2303 +
           (((C117 * C1174 + C50911 * C1180) * C50753 +
             (C117 * C1168 + C50911 * C1175) * C696) *
                C50778 +
            ((C117 * C1176 + C50911 * C1181) * C50753 +
             (C117 * C1169 + C50911 * C1177) * C696) *
                C2300) *
               C2302) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C117 * C122 + C50911 * C129) * C1285 +
                    (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
                    C172 * C51067 + C173 * C1287 + C174 * C1282) *
                       C110 +
                   (C171 * C1285 + C172 * C51083 - C173 * C1286 -
                    C174 * C51067 + C175 * C1287 + C176 * C1282) *
                       C111 +
                   (C173 * C1285 + C174 * C51083 - C175 * C1286 -
                    C176 * C51067 + C177 * C1287 + C178 * C1282) *
                       C112 +
                   (C175 * C1285 + C176 * C51083 - C177 * C1286 -
                    C178 * C51067 + C179 * C1287 + C180 * C1282) *
                       C113) *
                      C50900 * C1643 +
                  ((C475 * C1286 -
                    ((C117 * C441 + C50911 * C452) * C51083 +
                     (C117 * C435 + C50911 * C442) * C1285) +
                    C476 * C51067 - C477 * C1287 - C478 * C1282) *
                       C110 +
                   (C477 * C1286 - (C476 * C51083 + C475 * C1285) +
                    C478 * C51067 - C479 * C1287 - C480 * C1282) *
                       C111 +
                   (C479 * C1286 - (C478 * C51083 + C477 * C1285) +
                    C480 * C51067 - C481 * C1287 - C482 * C1282) *
                       C112 +
                   (C481 * C1286 - (C480 * C51083 + C479 * C1285) +
                    C482 * C51067 - (C117 * C439 + C50911 * C450) * C1287 -
                    (C117 * C451 + C50911 * C457) * C1282) *
                       C113) *
                      C50900 * C50853) *
                 C50815) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50911 * C129) * C1285 +
                     (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
                     C172 * C51067 + C173 * C1287 + C174 * C1282) *
                        C2300 +
                    (C171 * C1285 + C172 * C51083 - C173 * C1286 -
                     C174 * C51067 + C175 * C1287 + C176 * C1282) *
                        C50778) *
                       C2302 +
                   ((C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C2300 +
                    (C3812 + C3813 - C3814 - C3815 + C3816 + C3817) * C50778) *
                       C2303 +
                   ((C3818 + C3819 - C3820 - C3821 + C3822 + C3823) * C2300 +
                    (C3824 + C3825 - C3826 - C3827 + C3828 + C3829) * C50778) *
                       C2304) *
                      C1643 +
                  (((C475 * C1286 -
                     ((C117 * C441 + C50911 * C452) * C51083 +
                      (C117 * C435 + C50911 * C442) * C1285) +
                     C476 * C51067 - C477 * C1287 - C478 * C1282) *
                        C2300 +
                    (C477 * C1286 - (C476 * C51083 + C475 * C1285) +
                     C478 * C51067 - C479 * C1287 - C480 * C1282) *
                        C50778) *
                       C2302 +
                   ((C1540 * C1286 - (C3184 * C51083 + C3185 * C1285) +
                     C1541 * C51067 - C1542 * C1287 - C1543 * C1282) *
                        C2300 +
                    (C1542 * C1286 - (C1541 * C51083 + C1540 * C1285) +
                     C1543 * C51067 - C1544 * C1287 - C1545 * C1282) *
                        C50778) *
                       C2303 +
                   ((C2654 * C1286 - (C3182 * C51083 + C3183 * C1285) +
                     C2655 * C51067 - C2656 * C1287 - C2657 * C1282) *
                        C2300 +
                    (C2656 * C1286 - (C2655 * C51083 + C2654 * C1285) +
                     C2657 * C51067 - (C117 * C815 + C50911 * C828) * C1287 -
                     (C117 * C827 + C50911 * C839) * C1282) *
                        C50778) *
                       C2304) *
                      C50853) *
                 C50815) /
                    (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C110 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C111 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                C112 +
            (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50758) *
                C113) *
               C50900 * C1643 +
           ((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C110 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                C111 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                C112 +
            (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50758) *
                C113) *
               C50900 * C50853) *
              C51040 +
          (((C327 * C1392 -
             ((C117 * C293 + C50911 * C304) * C1386 +
              (C117 * C287 + C50911 * C294) * C1391) +
             C328 * C50758) *
                C110 +
            (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50758) *
                C111 +
            (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50758) *
                C112 +
            (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50758) *
                C113) *
               C50900 * C1643 +
           (((C117 * C811 + C50911 * C819) * C1391 +
             (C117 * C820 + C50911 * C835) * C1386 - C1540 * C1392 -
             C1541 * C50758) *
                C110 +
            (C1540 * C1391 + C1541 * C1386 - C1542 * C1392 - C1543 * C50758) *
                C111 +
            (C1542 * C1391 + C1543 * C1386 - C1544 * C1392 - C1545 * C50758) *
                C112 +
            (C1544 * C1391 + C1545 * C1386 -
             (C117 * C1523 + C50911 * C1524) * C1392 -
             (C117 * C1525 + C50911 * C1526) * C50758) *
                C113) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C1391 +
              (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
              C172 * C50758) *
                 C2300 +
             (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                 C50778) *
                C2302 +
            ((C3976 + C3977 - C3978 - C3979) * C2300 +
             (C3980 + C3981 - C3982 - C3983) * C50778) *
                C2303 +
            C4008 * C2304) *
               C1643 +
           (((C475 * C1392 -
              ((C117 * C441 + C50911 * C452) * C1386 +
               (C117 * C435 + C50911 * C442) * C1391) +
              C476 * C50758) *
                 C2300 +
             (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                 C50778) *
                C2302 +
            ((C4207 - (C4208 + C4209) + C4210) * C2300 +
             (C4211 - (C4212 + C4213) + C4214) * C50778) *
                C2303 +
            ((C4215 - (C4216 + C4217) + C4218) * C2300 +
             (C4219 - (C4220 + C4221) + C4222) * C50778) *
                C2304) *
               C50853) *
              C51040 +
          ((((C3978 - (C3977 + C3976) + C3979) * C2300 +
             (C3982 - (C3981 + C3980) + C3983) * C50778) *
                C2302 +
            ((C3986 - (C3985 + C3984) + C3987) * C2300 +
             (C3990 - (C3989 + C3988) + C3991) * C50778) *
                C2303 +
            ((C3992 - (C3993 + C3994) + C3995) * C2300 +
             (C3996 - (C3997 + C3998) + C3999) * C50778) *
                C2304) *
               C1643 +
           (((C4209 + C4208 - C4207 - C4210) * C2300 +
             (C4213 + C4212 - C4211 - C4214) * C50778) *
                C2302 +
            ((C4217 + C4216 - C4215 - C4218) * C2300 +
             (C4221 + C4220 - C4219 - C4222) * C50778) *
                C2303 +
            ((C3186 * C1391 + C3187 * C1386 - C3188 * C1392 - C3189 * C50758) *
                 C2300 +
             (C3188 * C1391 + C3189 * C1386 -
              (C117 * C4202 + C50911 * C4203) * C1392 -
              (C117 * C4204 + C50911 * C4205) * C50758) *
                 C50778) *
                C2304) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1391 +
            (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
            C172 * C50758) *
               C110 +
           (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) * C111 +
           (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) * C112 +
           (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50758) *
               C113) *
              C50900 * C51087 +
          ((C475 * C1392 -
            ((C117 * C441 + C50911 * C452) * C1386 +
             (C117 * C435 + C50911 * C442) * C1391) +
            C476 * C50758) *
               C110 +
           (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
               C111 +
           (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
               C112 +
           (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50758) *
               C113) *
              C50900 * C51076 +
          (((C117 * C944 + C50911 * C949) * C1391 +
            (C117 * C950 + C50911 * C959) * C1386 - C977 * C1392 -
            C978 * C50758) *
               C110 +
           (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50758) * C111 +
           (C979 * C1391 + C980 * C1386 - C981 * C1392 - C982 * C50758) * C112 +
           (C981 * C1391 + C982 * C1386 -
            (C117 * C948 + C50911 * C957) * C1392 -
            (C117 * C958 + C50911 * C963) * C50758) *
               C113) *
              C50900 * C1875) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C2300 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C50778) *
               C2302 +
           ((C3976 + C3977 - C3978 - C3979) * C2300 +
            (C3980 + C3981 - C3982 - C3983) * C50778) *
               C2303 +
           C4008 * C2304) *
              C51087 +
          (((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C2300 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                C50778) *
               C2302 +
           ((C4207 - (C4208 + C4209) + C4210) * C2300 +
            (C4211 - (C4212 + C4213) + C4214) * C50778) *
               C2303 +
           ((C4215 - (C4216 + C4217) + C4218) * C2300 +
            (C4219 - (C4220 + C4221) + C4222) * C50778) *
               C2304) *
              C51076 +
          ((((C117 * C944 + C50911 * C949) * C1391 +
             (C117 * C950 + C50911 * C959) * C1386 - C977 * C1392 -
             C978 * C50758) *
                C2300 +
            (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50758) *
                C50778) *
               C2302 +
           ((C3538 * C1391 + C3539 * C1386 - C3368 * C1392 - C3369 * C50758) *
                C2300 +
            (C3368 * C1391 + C3369 * C1386 -
             (C117 * C1081 + C50911 * C1087) * C1392 -
             (C117 * C1086 + C50911 * C1093) * C50758) *
                C50778) *
               C2303 +
           ((C3540 * C1391 + C3541 * C1386 - C3370 * C1392 - C3371 * C50758) *
                C2300 +
            (C3370 * C1391 + C3371 * C1386 -
             (C117 * C3349 + C50911 * C3354) * C1392 -
             (C117 * C3355 + C50911 * C3358) * C50758) *
                C50778) *
               C2304) *
              C1875) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50911 * C129) * C118 +
           (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C110 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C111 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C112 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50911 * C141) * C121 -
           (C117 * C142 + C50911 * C149) * C109) *
              C113) *
         C50900 * C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C49770 +
            (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
            C172 * C50758) *
               C110 +
           (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
               C111 +
           (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
               C112 +
           (C175 * C49770 + C176 * C51025 - C177 * C49763 - C178 * C50758) *
               C113) *
              C50900 * C50841 * C582 +
          ((C327 * C49763 -
            ((C117 * C293 + C50911 * C304) * C51025 +
             (C117 * C287 + C50911 * C294) * C49770) +
            C328 * C50758) *
               C110 +
           (C329 * C49763 - (C328 * C51025 + C327 * C49770) + C330 * C50758) *
               C111 +
           (C331 * C49763 - (C330 * C51025 + C329 * C49770) + C332 * C50758) *
               C112 +
           (C333 * C49763 - (C332 * C51025 + C331 * C49770) + C334 * C50758) *
               C113) *
              C50900 * C50841 * C583 +
          (((C117 * C587 + C50911 * C592) * C49770 +
            (C117 * C593 + C50911 * C602) * C51025 - C620 * C49763 -
            C621 * C50758) *
               C110 +
           (C620 * C49770 + C621 * C51025 - C622 * C49763 - C623 * C50758) *
               C111 +
           (C622 * C49770 + C623 * C51025 - C624 * C49763 - C625 * C50758) *
               C112 +
           (C624 * C49770 + C625 * C51025 -
            (C117 * C591 + C50911 * C600) * C49763 -
            (C117 * C601 + C50911 * C606) * C50758) *
               C113) *
              C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C118 +
            (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C2300 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50778) *
              C2302 +
          (((C117 * C287 + C50911 * C294) * C118 +
            (C117 * C293 + C50911 * C304) * C106 - C327 * C119 - C328 * C107 +
            C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
               C2300 +
           (C327 * C118 + C328 * C106 - C329 * C119 - C330 * C107 +
            C331 * C120 + C332 * C108 - C333 * C121 - C334 * C109) *
               C50778) *
              C2303 +
          (((C117 * C587 + C50911 * C592) * C118 +
            (C117 * C593 + C50911 * C602) * C106 - C620 * C119 - C621 * C107 +
            C622 * C120 + C623 * C108 - C624 * C121 - C625 * C109) *
               C2300 +
           (C620 * C118 + C621 * C106 - C622 * C119 - C623 * C107 +
            C624 * C120 + C625 * C108 - (C117 * C591 + C50911 * C600) * C121 -
            (C117 * C601 + C50911 * C606) * C109) *
               C50778) *
              C2304) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C2300 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C50778) *
               C2302 +
           ((C2816 + C2817 - C2818 - C2819) * C2300 +
            (C2820 + C2821 - C2822 - C2823) * C50778) *
               C2303 +
           C2860 * C2304) *
              C50841 * C582 +
          (((C2818 - (C2817 + C2816) + C2819) * C2300 +
            (C2822 - (C2821 + C2820) + C2823) * C50778) *
               C2302 +
           ((C2826 - (C2825 + C2824) + C2827) * C2300 +
            (C2830 - (C2829 + C2828) + C2831) * C50778) *
               C2303 +
           ((C2832 - (C2854 + C2855) + C2837) * C2300 +
            (C2838 - (C2839 + C2840) + C2841) * C50778) *
               C2304) *
              C50841 * C583 +
          (C2860 * C2302 +
           ((C2855 + C2854 - C2832 - C2837) * C2300 +
            (C2840 + C2839 - C2838 - C2841) * C50778) *
               C2303 +
           (((C117 * C2803 + C50911 * C2806) * C49770 +
             (C117 * C2807 + C50911 * C2812) * C51025 - C2850 * C49763 -
             C2851 * C50758) *
                C2300 +
            (C2850 * C49770 + C2851 * C51025 -
             (C117 * C2805 + C50911 * C2810) * C49763 -
             (C117 * C2811 + C50911 * C2814) * C50758) *
                C50778) *
               C2304) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C110 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C111 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C112 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C113) *
              C50900 * C50841 * C51040 +
          ((C327 * C284 -
            ((C117 * C293 + C50911 * C304) * C278 +
             (C117 * C287 + C50911 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C110 +
           (C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
            C331 * C285 - C332 * C280) *
               C111 +
           (C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
            C333 * C285 - C334 * C280) *
               C112 +
           (C333 * C284 - (C332 * C278 + C331 * C283) + C334 * C279 -
            (C117 * C291 + C50911 * C302) * C285 -
            (C117 * C303 + C50911 * C309) * C280) *
               C113) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C696 +
            (C117 * C130 + C50911 * C143) * C50753) *
               C110 +
           (C171 * C696 + C172 * C50753) * C111 +
           (C173 * C696 + C174 * C50753) * C112 +
           (C175 * C696 + C176 * C50753) * C113) *
              C50900 * C50841 * C692 -
          ((C332 * C50753 + C331 * C696) * C113 +
           (C330 * C50753 + C329 * C696) * C112 +
           (C328 * C50753 + C327 * C696) * C111 +
           ((C117 * C293 + C50911 * C304) * C50753 +
            (C117 * C287 + C50911 * C294) * C696) *
               C110) *
              C50900 * C50841 * C693 +
          (((C117 * C587 + C50911 * C592) * C696 +
            (C117 * C593 + C50911 * C602) * C50753) *
               C110 +
           (C620 * C696 + C621 * C50753) * C111 +
           (C622 * C696 + C623 * C50753) * C112 +
           (C624 * C696 + C625 * C50753) * C113) *
              C50900 * C50841 * C694 -
          (((C117 * C701 + C50911 * C709) * C50753 +
            (C117 * C697 + C50911 * C702) * C696) *
               C113 +
           ((C117 * C703 + C50911 * C710) * C50753 +
            (C117 * C698 + C50911 * C704) * C696) *
               C112 +
           ((C117 * C705 + C50911 * C711) * C50753 +
            (C117 * C699 + C50911 * C706) * C696) *
               C111 +
           ((C117 * C707 + C50911 * C712) * C50753 +
            (C117 * C700 + C50911 * C708) * C696) *
               C110) *
              C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50778) *
               C2302 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C2300 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C50778) *
               C2303 +
           ((C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C2300 +
            (C2474 + C2475 - C2476 - C2477 + C2478 + C2479) * C50778) *
               C2304) *
              C50841 * C51040 +
          (((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C2300 +
            (C2462 - (C2461 + C2460) + C2463 - C2464 - C2465) * C50778) *
               C2302 +
           ((C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C2300 +
            (C2476 - (C2475 + C2474) + C2477 - C2478 - C2479) * C50778) *
               C2303 +
           ((C2492 * C284 -
             ((C117 * C707 + C50911 * C712) * C278 +
              (C117 * C700 + C50911 * C708) * C283) +
             C2493 * C279 - C2494 * C285 - C2495 * C280) *
                C2300 +
            (C2494 * C284 - (C2493 * C278 + C2492 * C283) + C2495 * C279 -
             (C117 * C697 + C50911 * C702) * C285 -
             (C117 * C701 + C50911 * C709) * C280) *
                C50778) *
               C2304) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C2300 +
            (C171 * C696 + C172 * C50753) * C50778) *
               C2302 +
           ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
           C2997 * C2304) *
              C50841 * C692 -
          (C2998 * C2304 +
           ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
           ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
              C50841 * C693 +
          (C2997 * C2302 +
           ((C2978 + C2977) * C2300 + (C2976 + C2975) * C50778) * C2303 +
           ((C2995 + C2996) * C2300 + (C2983 + C2984) * C50778) * C2304) *
              C50841 * C694 -
          ((((C117 * C2960 + C50911 * C2964) * C50753 +
             (C117 * C2958 + C50911 * C2961) * C696) *
                C50778 +
            ((C117 * C2962 + C50911 * C2965) * C50753 +
             (C117 * C2959 + C50911 * C2963) * C696) *
                C2300) *
               C2304 +
           ((C2984 + C2983) * C50778 + (C2996 + C2995) * C2300) * C2303 +
           C2998 * C2302) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C110 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C111 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C112 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C113) *
              C50900 * C51041 +
          ((C475 * C284 -
            ((C117 * C441 + C50911 * C452) * C278 +
             (C117 * C435 + C50911 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C110 +
           (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
            C479 * C285 - C480 * C280) *
               C111 +
           (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
            C481 * C285 - C482 * C280) *
               C112 +
           (C481 * C284 - (C480 * C278 + C479 * C283) + C482 * C279 -
            (C117 * C439 + C50911 * C450) * C285 -
            (C117 * C451 + C50911 * C457) * C280) *
               C113) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C110 +
            (C171 * C696 + C172 * C50753) * C111 +
            (C173 * C696 + C174 * C50753) * C112 +
            (C175 * C696 + C176 * C50753) * C113) *
               C50900 * C51041 -
           ((C480 * C50753 + C479 * C696) * C113 +
            (C478 * C50753 + C477 * C696) * C112 +
            (C476 * C50753 + C475 * C696) * C111 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C110) *
               C50900 * C50853) *
              C582 +
          ((((C117 * C811 + C50911 * C819) * C696 +
             (C117 * C820 + C50911 * C835) * C50753) *
                C110 +
            ((C117 * C812 + C50911 * C821) * C696 +
             (C117 * C822 + C50911 * C836) * C50753) *
                C111 +
            ((C117 * C813 + C50911 * C823) * C696 +
             (C117 * C824 + C50911 * C837) * C50753) *
                C112 +
            ((C117 * C814 + C50911 * C825) * C696 +
             (C117 * C826 + C50911 * C838) * C50753) *
                C113) *
               C50900 * C50853 -
           ((C332 * C50753 + C331 * C696) * C113 +
            (C330 * C50753 + C329 * C696) * C112 +
            (C328 * C50753 + C327 * C696) * C111 +
            ((C117 * C293 + C50911 * C304) * C50753 +
             (C117 * C287 + C50911 * C294) * C696) *
                C110) *
               C50900 * C51041) *
              C583 +
          ((((C117 * C587 + C50911 * C592) * C696 +
             (C117 * C593 + C50911 * C602) * C50753) *
                C110 +
            (C620 * C696 + C621 * C50753) * C111 +
            (C622 * C696 + C623 * C50753) * C112 +
            (C624 * C696 + C625 * C50753) * C113) *
               C50900 * C51041 -
           (((C117 * C827 + C50911 * C839) * C50753 +
             (C117 * C815 + C50911 * C828) * C696) *
                C113 +
            ((C117 * C829 + C50911 * C840) * C50753 +
             (C117 * C816 + C50911 * C830) * C696) *
                C112 +
            ((C117 * C831 + C50911 * C841) * C50753 +
             (C117 * C817 + C50911 * C832) * C696) *
                C111 +
            ((C117 * C833 + C50911 * C842) * C50753 +
             (C117 * C818 + C50911 * C834) * C696) *
                C110) *
               C50900 * C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50778) *
               C2302 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C2300 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C50778) *
               C2303 +
           ((C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C2300 +
            (C2474 + C2475 - C2476 - C2477 + C2478 + C2479) * C50778) *
               C2304) *
              C51041 +
          (((C475 * C284 -
             ((C117 * C441 + C50911 * C452) * C278 +
              (C117 * C435 + C50911 * C442) * C283) +
             C476 * C279 - C477 * C285 - C478 * C280) *
                C2300 +
            (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
             C479 * C285 - C480 * C280) *
                C50778) *
               C2302 +
           ((C1540 * C284 -
             ((C117 * C820 + C50911 * C835) * C278 +
              (C117 * C811 + C50911 * C819) * C283) +
             C1541 * C279 - C1542 * C285 - C1543 * C280) *
                C2300 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50778) *
               C2303 +
           ((C2654 * C284 -
             ((C117 * C833 + C50911 * C842) * C278 +
              (C117 * C818 + C50911 * C834) * C283) +
             C2655 * C279 - C2656 * C285 - C2657 * C280) *
                C2300 +
            (C2656 * C284 - (C2655 * C278 + C2654 * C283) + C2657 * C279 -
             (C117 * C815 + C50911 * C828) * C285 -
             (C117 * C827 + C50911 * C839) * C280) *
                C50778) *
               C2304) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C2300 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C2302 +
            ((C2967 + C2968) * C2300 + (C2969 + C2970) * C50778) * C2303 +
            C2997 * C2304) *
               C51041 -
           (C3201 * C2304 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C2300) * C2303 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C2300) *
                C2302) *
               C50853) *
              C582 +
          ((((C3194 + C3193) * C2300 + (C3168 + C3167) * C50778) * C2302 +
            ((C3192 + C3191) * C2300 + (C3162 + C3161) * C50778) * C2303 +
            ((C3195 + C3196) * C2300 + (C3197 + C3198) * C50778) * C2304) *
               C50853 -
           (C2998 * C2304 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C2300) * C2303 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C2300) * C2302) *
               C51041) *
              C583 +
          ((C2997 * C2302 +
            ((C2978 + C2977) * C2300 + (C2976 + C2975) * C50778) * C2303 +
            ((C2995 + C2996) * C2300 + (C2983 + C2984) * C50778) * C2304) *
               C51041 -
           ((((C117 * C3152 + C50911 * C3158) * C50753 +
              (C117 * C3146 + C50911 * C3153) * C696) *
                 C50778 +
             ((C117 * C3154 + C50911 * C3159) * C50753 +
              (C117 * C3147 + C50911 * C3155) * C696) *
                 C2300) *
                C2304 +
            ((C3198 + C3197) * C50778 + (C3196 + C3195) * C2300) * C2303 +
            C3201 * C2302) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1285 +
             (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
             C172 * C51067 + C173 * C1287 + C174 * C1282) *
                C51034 +
            (C171 * C1285 + C172 * C51083 - C173 * C1286 - C174 * C51067 +
             C175 * C1287 + C176 * C1282) *
                C50778) *
               C51088 +
           ((C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C51034 +
            (C3812 + C3813 - C3814 - C3815 + C3816 + C3817) * C50778) *
               C51089 +
           ((C3818 + C3819 - C3820 - C3821 + C3822 + C3823) * C51034 +
            (C3824 + C3825 - C3826 - C3827 + C3828 + C3829) * C50778) *
               C24524) *
              C50841 * C1283 +
          (((C3808 - (C3807 + C3806) + C3809 - C3810 - C3811) * C51034 +
            (C3814 - (C3813 + C3812) + C3815 - C3816 - C3817) * C50778) *
               C51088 +
           ((C3820 - (C3819 + C3818) + C3821 - C3822 - C3823) * C51034 +
            (C3826 - (C3825 + C3824) + C3827 - C3828 - C3829) * C50778) *
               C51089 +
           ((C20778 - (C20777 + C20776) + C20779 - C20780 - C20781) * C51034 +
            (C2494 * C1286 - (C2493 * C51083 + C2492 * C1285) + C2495 * C51067 -
             (C117 * C697 + C50911 * C702) * C1287 -
             (C117 * C701 + C50911 * C709) * C1282) *
                C50778) *
               C24524) *
              C50841 * C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C51034 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C50778) *
               C51088 +
           ((C3976 + C3977 - C3978 - C3979) * C51034 +
            (C3980 + C3981 - C3982 - C3983) * C50778) *
               C51089 +
           C25904 * C24524) *
              C50841 * C51086 +
          (((C3978 - (C3977 + C3976) + C3979) * C51034 +
            (C3982 - (C3981 + C3980) + C3983) * C50778) *
               C51088 +
           ((C3986 - (C3985 + C3984) + C3987) * C51034 +
            (C3990 - (C3989 + C3988) + C3991) * C50778) *
               C51089 +
           ((C3992 - (C3993 + C3994) + C3995) * C51034 +
            (C3996 - (C3997 + C3998) + C3999) * C50778) *
               C24524) *
              C50841 * C51073 +
          (C25904 * C51088 +
           (C20887 * C51034 + (C3998 + C3997 - C3996 - C3999) * C50778) *
               C51089 +
           ((C20884 + C20883 - C20882 - C20885) * C51034 +
            (C2850 * C1391 + C2851 * C1386 -
             (C117 * C2805 + C50911 * C2810) * C1392 -
             (C117 * C2811 + C50911 * C2814) * C50758) *
                C50778) *
               C24524) *
              C50841 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C1391 +
              (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
              C172 * C50758) *
                 C51034 +
             (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                 C50778) *
                C51088 +
            ((C3976 + C3977 - C3978 - C3979) * C51034 +
             (C3980 + C3981 - C3982 - C3983) * C50778) *
                C51089 +
            C25904 * C24524) *
               C51041 +
           (((C475 * C1392 -
              ((C117 * C441 + C50911 * C452) * C1386 +
               (C117 * C435 + C50911 * C442) * C1391) +
              C476 * C50758) *
                 C51034 +
             (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                 C50778) *
                C51088 +
            ((C4207 - (C4208 + C4209) + C4210) * C51034 +
             (C4211 - (C4212 + C4213) + C4214) * C50778) *
                C51089 +
            ((C4215 - (C4216 + C4217) + C4218) * C51034 +
             (C4219 - (C4220 + C4221) + C4222) * C50778) *
                C24524) *
               C50853) *
              C1283 +
          ((((C3978 - (C3977 + C3976) + C3979) * C51034 +
             (C3982 - (C3981 + C3980) + C3983) * C50778) *
                C51088 +
            ((C3986 - (C3985 + C3984) + C3987) * C51034 +
             (C3990 - (C3989 + C3988) + C3991) * C50778) *
                C51089 +
            ((C3992 - (C3993 + C3994) + C3995) * C51034 +
             (C3996 - (C3997 + C3998) + C3999) * C50778) *
                C24524) *
               C51041 +
           (((C4209 + C4208 - C4207 - C4210) * C51034 +
             (C4213 + C4212 - C4211 - C4214) * C50778) *
                C51088 +
            ((C4217 + C4216 - C4215 - C4218) * C51034 +
             (C4221 + C4220 - C4219 - C4222) * C50778) *
                C51089 +
            ((C21021 + C21020 - C21019 - C21022) * C51034 +
             (C3188 * C1391 + C3189 * C1386 -
              (C117 * C4202 + C50911 * C4203) * C1392 -
              (C117 * C4204 + C50911 * C4205) * C50758) *
                 C50778) *
                C24524) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C49770 +
              (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
              C172 * C50758) *
                 C51034 +
             (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                 C50778) *
                C51088 +
            ((C2816 + C2817 - C2818 - C2819) * C51034 +
             (C2820 + C2821 - C2822 - C2823) * C50778) *
                C51089 +
            C24966 * C24524) *
               C1643 +
           (((C475 * C49763 -
              ((C117 * C441 + C50911 * C452) * C51025 +
               (C117 * C435 + C50911 * C442) * C49770) +
              C476 * C50758) *
                 C51034 +
             (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                 C50778) *
                C51088 +
            ((C4903 - (C4904 + C4905) + C4906) * C51034 +
             (C4907 - (C4908 + C4909) + C4910) * C50778) *
                C51089 +
            ((C4911 - (C4912 + C4913) + C4914) * C51034 +
             (C4915 - (C4916 + C4917) + C4918) * C50778) *
                C24524) *
               C50853) *
              C1283 +
          ((((C2818 - (C2817 + C2816) + C2819) * C51034 +
             (C2822 - (C2821 + C2820) + C2823) * C50778) *
                C51088 +
            ((C2826 - (C2825 + C2824) + C2827) * C51034 +
             (C2830 - (C2829 + C2828) + C2831) * C50778) *
                C51089 +
            ((C2832 - (C2854 + C2855) + C2837) * C51034 +
             (C2838 - (C2839 + C2840) + C2841) * C50778) *
                C24524) *
               C1643 +
           (((C4905 + C4904 - C4903 - C4906) * C51034 +
             (C4909 + C4908 - C4907 - C4910) * C50778) *
                C51088 +
            ((C4913 + C4912 - C4911 - C4914) * C51034 +
             (C4917 + C4916 - C4915 - C4918) * C50778) *
                C51089 +
            ((C21481 + C21480 - C21479 - C21482) * C51034 +
             (C3188 * C49770 + C3189 * C51025 -
              (C117 * C4202 + C50911 * C4203) * C49763 -
              (C117 * C4204 + C50911 * C4205) * C50758) *
                 C50778) *
                C24524) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C51034 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C51088 +
            ((C2967 + C2968) * C51034 + (C2969 + C2970) * C50778) * C51089 +
            C25069 * C24524) *
               C1643 -
           (C25219 * C24524 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C51034) * C51089 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C51034) *
                C51088) *
               C50853) *
              C51086 +
          ((((C3194 + C3193) * C51034 + (C3168 + C3167) * C50778) * C51088 +
            ((C3192 + C3191) * C51034 + (C3162 + C3161) * C50778) * C51089 +
            ((C3195 + C3196) * C51034 + (C3197 + C3198) * C50778) * C24524) *
               C50853 -
           (C25070 * C24524 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C51034) * C51089 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C51034) * C51088) *
               C1643) *
              C51073 +
          ((C25069 * C51088 +
            (C20274 * C51034 + (C2976 + C2975) * C50778) * C51089 +
            ((C2995 + C2996) * C51034 + (C2983 + C2984) * C50778) * C24524) *
               C1643 -
           ((((C117 * C3152 + C50911 * C3158) * C50753 +
              (C117 * C3146 + C50911 * C3153) * C696) *
                 C50778 +
             (C20399 + C20398) * C51034) *
                C24524 +
            ((C3198 + C3197) * C50778 + C20389 * C51034) * C51089 +
            C25219 * C51088) *
               C50853) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C51034 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C51088 +
            ((C2967 + C2968) * C51034 + (C2969 + C2970) * C50778) * C51089 +
            C25069 * C24524) *
               C51087 -
           (C25219 * C24524 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C51034) * C51089 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C51034) *
                C51088) *
               C51076 +
           ((((C117 * C944 + C50911 * C949) * C696 +
              (C117 * C950 + C50911 * C959) * C50753) *
                 C51034 +
             (C977 * C696 + C978 * C50753) * C50778) *
                C51088 +
            ((C3542 + C3543) * C51034 + (C3530 + C3531) * C50778) * C51089 +
            ((C3544 + C3545) * C51034 + (C3536 + C3537) * C50778) * C24524) *
               C1875) *
              C1283 +
          ((((C3194 + C3193) * C51034 + (C3168 + C3167) * C50778) * C51088 +
            ((C3192 + C3191) * C51034 + (C3162 + C3161) * C50778) * C51089 +
            ((C3195 + C3196) * C51034 + (C3197 + C3198) * C50778) * C24524) *
               C51076 -
           (C25070 * C24524 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C51034) * C51089 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C51034) * C51088) *
               C51087 -
           ((((C117 * C3519 + C50911 * C3523) * C50753 +
              (C117 * C3517 + C50911 * C3520) * C696) *
                 C50778 +
             (C20607 + C20606) * C51034) *
                C24524 +
            ((C3537 + C3536) * C50778 + (C3545 + C3544) * C51034) * C51089 +
            ((C3531 + C3530) * C50778 + (C3543 + C3542) * C51034) * C51088) *
               C1875) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C51034 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C50778) *
               C51088 +
           ((C2816 + C2817 - C2818 - C2819) * C51034 +
            (C2820 + C2821 - C2822 - C2823) * C50778) *
               C51089 +
           C24966 * C24524) *
              C50841 * C582 +
          (((C2818 - (C2817 + C2816) + C2819) * C51034 +
            (C2822 - (C2821 + C2820) + C2823) * C50778) *
               C51088 +
           ((C2826 - (C2825 + C2824) + C2827) * C51034 +
            (C2830 - (C2829 + C2828) + C2831) * C50778) *
               C51089 +
           ((C2832 - (C2854 + C2855) + C2837) * C51034 +
            (C2838 - (C2839 + C2840) + C2841) * C50778) *
               C24524) *
              C50841 * C583 +
          (C24966 * C51088 +
           (C20201 * C51034 + (C2840 + C2839 - C2838 - C2841) * C50778) *
               C51089 +
           ((C20198 + C20197 - C20196 - C20199) * C51034 +
            (C2850 * C49770 + C2851 * C51025 -
             (C117 * C2805 + C50911 * C2810) * C49763 -
             (C117 * C2811 + C50911 * C2814) * C50758) *
                C50778) *
               C24524) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C118 +
            (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C51034 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50778) *
              C51088 +
          ((C2488 * C118 + C2489 * C106 - C327 * C119 - C328 * C107 +
            C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
               C51034 +
           (C327 * C118 + C328 * C106 - C329 * C119 - C330 * C107 +
            C331 * C120 + C332 * C108 - C333 * C121 - C334 * C109) *
               C50778) *
              C51089 +
          ((C2490 * C118 + C2491 * C106 - C620 * C119 - C621 * C107 +
            C622 * C120 + C623 * C108 - C624 * C121 - C625 * C109) *
               C51034 +
           (C620 * C118 + C621 * C106 - C622 * C119 - C623 * C107 +
            C624 * C120 + C625 * C108 - (C117 * C591 + C50911 * C600) * C121 -
            (C117 * C601 + C50911 * C606) * C109) *
               C50778) *
              C24524) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C51034 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C50778) *
               C51088 +
           ((C2816 + C2817 - C2818 - C2819) * C51034 +
            (C2820 + C2821 - C2822 - C2823) * C50778) *
               C51089 +
           C24966 * C24524) *
              C941 +
          (((C475 * C49763 -
             ((C117 * C441 + C50911 * C452) * C51025 +
              (C117 * C435 + C50911 * C442) * C49770) +
             C476 * C50758) *
                C51034 +
            (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                C50778) *
               C51088 +
           ((C4903 - (C4904 + C4905) + C4906) * C51034 +
            (C4907 - (C4908 + C4909) + C4910) * C50778) *
               C51089 +
           ((C4911 - (C4912 + C4913) + C4914) * C51034 +
            (C4915 - (C4916 + C4917) + C4918) * C50778) *
               C24524) *
              C942 +
          ((((C117 * C944 + C50911 * C949) * C49770 +
             (C117 * C950 + C50911 * C959) * C51025 - C977 * C49763 -
             C978 * C50758) *
                C51034 +
            (C977 * C49770 + C978 * C51025 - C979 * C49763 - C980 * C50758) *
                C50778) *
               C51088 +
           ((C3538 * C49770 + C3539 * C51025 - C3368 * C49763 -
             C3369 * C50758) *
                C51034 +
            (C3368 * C49770 + C3369 * C51025 - C9016 * C49763 -
             C9017 * C50758) *
                C50778) *
               C51089 +
           ((C3540 * C49770 + C3541 * C51025 - C3370 * C49763 -
             C3371 * C50758) *
                C51034 +
            (C3370 * C49770 + C3371 * C51025 -
             (C117 * C3349 + C50911 * C3354) * C49763 -
             (C117 * C3355 + C50911 * C3358) * C50758) *
                C50778) *
               C24524) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C51034 +
            (C171 * C696 + C172 * C50753) * C50778) *
               C51088 +
           ((C2967 + C2968) * C51034 + (C2969 + C2970) * C50778) * C51089 +
           C25069 * C24524) *
              C50841 * C692 -
          (C25070 * C24524 +
           ((C2974 + C2973) * C50778 + (C2972 + C2971) * C51034) * C51089 +
           ((C2970 + C2969) * C50778 + (C2968 + C2967) * C51034) * C51088) *
              C50841 * C693 +
          (C25069 * C51088 +
           (C20274 * C51034 + (C2976 + C2975) * C50778) * C51089 +
           ((C2995 + C2996) * C51034 + (C2983 + C2984) * C50778) * C24524) *
              C50841 * C694 -
          ((((C117 * C2960 + C50911 * C2964) * C50753 +
             (C117 * C2958 + C50911 * C2961) * C696) *
                C50778 +
            (C20286 + C20285) * C51034) *
               C24524 +
           ((C2984 + C2983) * C50778 + C20275 * C51034) * C51089 +
           C25070 * C51088) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C51034 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50778) *
               C51088 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C51034 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C50778) *
               C51089 +
           ((C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C51034 +
            (C2474 + C2475 - C2476 - C2477 + C2478 + C2479) * C50778) *
               C24524) *
              C50841 * C51040 +
          (((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C51034 +
            (C2462 - (C2461 + C2460) + C2463 - C2464 - C2465) * C50778) *
               C51088 +
           ((C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C51034 +
            (C2476 - (C2475 + C2474) + C2477 - C2478 - C2479) * C50778) *
               C51089 +
           ((C19994 - (C19993 + C19992) + C19995 - C19996 - C19997) * C51034 +
            (C2494 * C284 - (C2493 * C278 + C2492 * C283) + C2495 * C279 -
             (C117 * C697 + C50911 * C702) * C285 -
             (C117 * C701 + C50911 * C709) * C280) *
                C50778) *
               C24524) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C51034 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C51088 +
            ((C2967 + C2968) * C51034 + (C2969 + C2970) * C50778) * C51089 +
            C25069 * C24524) *
               C941 -
           (C25219 * C24524 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C51034) * C51089 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C51034) *
                C51088) *
               C942 +
           ((((C117 * C944 + C50911 * C949) * C696 +
              (C117 * C950 + C50911 * C959) * C50753) *
                 C51034 +
             (C977 * C696 + C978 * C50753) * C50778) *
                C51088 +
            ((C3542 + C3543) * C51034 + (C3530 + C3531) * C50778) * C51089 +
            ((C3544 + C3545) * C51034 + (C3536 + C3537) * C50778) * C24524) *
               C943) *
              C51040 +
          ((((C3194 + C3193) * C51034 + (C3168 + C3167) * C50778) * C51088 +
            ((C3192 + C3191) * C51034 + (C3162 + C3161) * C50778) * C51089 +
            ((C3195 + C3196) * C51034 + (C3197 + C3198) * C50778) * C24524) *
               C942 -
           (C25070 * C24524 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C51034) * C51089 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C51034) * C51088) *
               C941 -
           ((((C117 * C3519 + C50911 * C3523) * C50753 +
              (C117 * C3517 + C50911 * C3520) * C696) *
                 C50778 +
             (C20607 + C20606) * C51034) *
                C24524 +
            ((C3537 + C3536) * C50778 + (C3545 + C3544) * C51034) * C51089 +
            ((C3531 + C3530) * C50778 + (C3543 + C3542) * C51034) * C51088) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C51034 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C51088 +
            ((C2967 + C2968) * C51034 + (C2969 + C2970) * C50778) * C51089 +
            C25069 * C24524) *
               C51041 -
           (C25219 * C24524 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C51034) * C51089 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C51034) *
                C51088) *
               C50853) *
              C582 +
          ((((C3194 + C3193) * C51034 + (C3168 + C3167) * C50778) * C51088 +
            ((C3192 + C3191) * C51034 + (C3162 + C3161) * C50778) * C51089 +
            ((C3195 + C3196) * C51034 + (C3197 + C3198) * C50778) * C24524) *
               C50853 -
           (C25070 * C24524 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C51034) * C51089 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C51034) * C51088) *
               C51041) *
              C583 +
          ((C25069 * C51088 +
            (C20274 * C51034 + (C2976 + C2975) * C50778) * C51089 +
            ((C2995 + C2996) * C51034 + (C2983 + C2984) * C50778) * C24524) *
               C51041 -
           ((((C117 * C3152 + C50911 * C3158) * C50753 +
              (C117 * C3146 + C50911 * C3153) * C696) *
                 C50778 +
             (C20399 + C20398) * C51034) *
                C24524 +
            ((C3198 + C3197) * C50778 + C20389 * C51034) * C51089 +
            C25219 * C51088) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C51034 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50778) *
               C51088 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C51034 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C50778) *
               C51089 +
           ((C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C51034 +
            (C2474 + C2475 - C2476 - C2477 + C2478 + C2479) * C50778) *
               C24524) *
              C51041 +
          (((C475 * C284 -
             ((C117 * C441 + C50911 * C452) * C278 +
              (C117 * C435 + C50911 * C442) * C283) +
             C476 * C279 - C477 * C285 - C478 * C280) *
                C51034 +
            (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
             C479 * C285 - C480 * C280) *
                C50778) *
               C51088 +
           ((C1540 * C284 - (C3184 * C278 + C3185 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C51034 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50778) *
               C51089 +
           ((C2654 * C284 - (C3182 * C278 + C3183 * C283) + C2655 * C279 -
             C2656 * C285 - C2657 * C280) *
                C51034 +
            (C2656 * C284 - (C2655 * C278 + C2654 * C283) + C2657 * C279 -
             (C117 * C815 + C50911 * C828) * C285 -
             (C117 * C827 + C50911 * C839) * C280) *
                C50778) *
               C24524) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C51034 +
            (C171 * C696 + C172 * C50753) * C50778) *
               C51088 +
           ((C2967 + C2968) * C51034 + (C2969 + C2970) * C50778) * C51089 +
           C25069 * C24524) *
              C1162 -
          (C25219 * C24524 +
           ((C3167 + C3168) * C50778 + (C3193 + C3194) * C51034) * C51089 +
           ((C476 * C50753 + C475 * C696) * C50778 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C51034) *
               C51088) *
              C1163 +
          ((((C117 * C944 + C50911 * C949) * C696 +
             (C117 * C950 + C50911 * C959) * C50753) *
                C51034 +
            (C977 * C696 + C978 * C50753) * C50778) *
               C51088 +
           ((C3542 + C3543) * C51034 + (C3530 + C3531) * C50778) * C51089 +
           ((C3544 + C3545) * C51034 + (C3536 + C3537) * C50778) * C24524) *
              C1164 -
          ((((C117 * C3647 + C50911 * C3655) * C50753 +
             (C117 * C3643 + C50911 * C3648) * C696) *
                C50778 +
            ((C117 * C3649 + C50911 * C3656) * C50753 +
             (C117 * C3644 + C50911 * C3650) * C696) *
                C51034) *
               C24524 +
           (((C117 * C3651 + C50911 * C3657) * C50753 +
             (C117 * C3645 + C50911 * C3652) * C696) *
                C50778 +
            ((C117 * C3653 + C50911 * C3658) * C50753 +
             (C117 * C3646 + C50911 * C3654) * C696) *
                C51034) *
               C51089 +
           (((C117 * C1174 + C50911 * C1180) * C50753 +
             (C117 * C1168 + C50911 * C1175) * C696) *
                C50778 +
            ((C117 * C1176 + C50911 * C1181) * C50753 +
             (C117 * C1169 + C50911 * C1177) * C696) *
                C51034) *
               C51088) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50911 * C129) * C1285 +
                     (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
                     C172 * C51067 + C173 * C1287 + C174 * C1282) *
                        C51034 +
                    (C171 * C1285 + C172 * C51083 - C173 * C1286 -
                     C174 * C51067 + C175 * C1287 + C176 * C1282) *
                        C50778) *
                       C51088 +
                   ((C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C51034 +
                    (C3812 + C3813 - C3814 - C3815 + C3816 + C3817) * C50778) *
                       C51089 +
                   ((C3818 + C3819 - C3820 - C3821 + C3822 + C3823) * C51034 +
                    (C3824 + C3825 - C3826 - C3827 + C3828 + C3829) * C50778) *
                       C24524) *
                      C1643 +
                  (((C475 * C1286 -
                     ((C117 * C441 + C50911 * C452) * C51083 +
                      (C117 * C435 + C50911 * C442) * C1285) +
                     C476 * C51067 - C477 * C1287 - C478 * C1282) *
                        C51034 +
                    (C477 * C1286 - (C476 * C51083 + C475 * C1285) +
                     C478 * C51067 - C479 * C1287 - C480 * C1282) *
                        C50778) *
                       C51088 +
                   ((C1540 * C1286 - (C3184 * C51083 + C3185 * C1285) +
                     C1541 * C51067 - C1542 * C1287 - C1543 * C1282) *
                        C51034 +
                    (C1542 * C1286 - (C1541 * C51083 + C1540 * C1285) +
                     C1543 * C51067 - C1544 * C1287 - C1545 * C1282) *
                        C50778) *
                       C51089 +
                   ((C2654 * C1286 - (C3182 * C51083 + C3183 * C1285) +
                     C2655 * C51067 - C2656 * C1287 - C2657 * C1282) *
                        C51034 +
                    (C2656 * C1286 - (C2655 * C51083 + C2654 * C1285) +
                     C2657 * C51067 - (C117 * C815 + C50911 * C828) * C1287 -
                     (C117 * C827 + C50911 * C839) * C1282) *
                        C50778) *
                       C24524) *
                      C50853) *
                 C50815) /
                (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C1391 +
              (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
              C172 * C50758) *
                 C51034 +
             (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                 C50778) *
                C51088 +
            ((C3976 + C3977 - C3978 - C3979) * C51034 +
             (C3980 + C3981 - C3982 - C3983) * C50778) *
                C51089 +
            C25904 * C24524) *
               C1643 +
           (((C475 * C1392 -
              ((C117 * C441 + C50911 * C452) * C1386 +
               (C117 * C435 + C50911 * C442) * C1391) +
              C476 * C50758) *
                 C51034 +
             (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                 C50778) *
                C51088 +
            ((C4207 - (C4208 + C4209) + C4210) * C51034 +
             (C4211 - (C4212 + C4213) + C4214) * C50778) *
                C51089 +
            ((C4215 - (C4216 + C4217) + C4218) * C51034 +
             (C4219 - (C4220 + C4221) + C4222) * C50778) *
                C24524) *
               C50853) *
              C51040 +
          ((((C3978 - (C3977 + C3976) + C3979) * C51034 +
             (C3982 - (C3981 + C3980) + C3983) * C50778) *
                C51088 +
            ((C3986 - (C3985 + C3984) + C3987) * C51034 +
             (C3990 - (C3989 + C3988) + C3991) * C50778) *
                C51089 +
            ((C3992 - (C3993 + C3994) + C3995) * C51034 +
             (C3996 - (C3997 + C3998) + C3999) * C50778) *
                C24524) *
               C1643 +
           (((C4209 + C4208 - C4207 - C4210) * C51034 +
             (C4213 + C4212 - C4211 - C4214) * C50778) *
                C51088 +
            ((C4217 + C4216 - C4215 - C4218) * C51034 +
             (C4221 + C4220 - C4219 - C4222) * C50778) *
                C51089 +
            ((C21021 + C21020 - C21019 - C21022) * C51034 +
             (C3188 * C1391 + C3189 * C1386 -
              (C117 * C4202 + C50911 * C4203) * C1392 -
              (C117 * C4204 + C50911 * C4205) * C50758) *
                 C50778) *
                C24524) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C51034 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C50778) *
               C51088 +
           ((C3976 + C3977 - C3978 - C3979) * C51034 +
            (C3980 + C3981 - C3982 - C3983) * C50778) *
               C51089 +
           C25904 * C24524) *
              C51087 +
          (((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C51034 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                C50778) *
               C51088 +
           ((C4207 - (C4208 + C4209) + C4210) * C51034 +
            (C4211 - (C4212 + C4213) + C4214) * C50778) *
               C51089 +
           ((C4215 - (C4216 + C4217) + C4218) * C51034 +
            (C4219 - (C4220 + C4221) + C4222) * C50778) *
               C24524) *
              C51076 +
          ((((C117 * C944 + C50911 * C949) * C1391 +
             (C117 * C950 + C50911 * C959) * C1386 - C977 * C1392 -
             C978 * C50758) *
                C51034 +
            (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50758) *
                C50778) *
               C51088 +
           ((C3538 * C1391 + C3539 * C1386 - C3368 * C1392 - C3369 * C50758) *
                C51034 +
            (C3368 * C1391 + C3369 * C1386 - C9016 * C1392 - C9017 * C50758) *
                C50778) *
               C51089 +
           ((C3540 * C1391 + C3541 * C1386 - C3370 * C1392 - C3371 * C50758) *
                C51034 +
            (C3370 * C1391 + C3371 * C1386 -
             (C117 * C3349 + C50911 * C3354) * C1392 -
             (C117 * C3355 + C50911 * C3358) * C50758) *
                C50778) *
               C24524) *
              C1875) *
         C50815) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C118 +
            (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C51034 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50778) *
              C51088 +
          ((C2488 * C118 + C2489 * C106 - C327 * C119 - C328 * C107 +
            C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
               C51034 +
           (C327 * C118 + C328 * C106 - C329 * C119 - C330 * C107 +
            C331 * C120 + C332 * C108 - C333 * C121 - C334 * C109) *
               C50778) *
              C51089 +
          ((C2490 * C118 + C2491 * C106 - C620 * C119 - C621 * C107 +
            C622 * C120 + C623 * C108 - C624 * C121 - C625 * C109) *
               C51034 +
           (C620 * C118 + C621 * C106 - C622 * C119 - C623 * C107 +
            C624 * C120 + C625 * C108 - (C117 * C591 + C50911 * C600) * C121 -
            (C117 * C601 + C50911 * C606) * C109) *
               C50778) *
              C24524) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C51034 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C50778) *
               C51088 +
           ((C2816 + C2817 - C2818 - C2819) * C51034 +
            (C2820 + C2821 - C2822 - C2823) * C50778) *
               C51089 +
           C24966 * C24524) *
              C50841 * C582 +
          (((C2818 - (C2817 + C2816) + C2819) * C51034 +
            (C2822 - (C2821 + C2820) + C2823) * C50778) *
               C51088 +
           ((C2826 - (C2825 + C2824) + C2827) * C51034 +
            (C2830 - (C2829 + C2828) + C2831) * C50778) *
               C51089 +
           ((C2832 - (C2854 + C2855) + C2837) * C51034 +
            (C2838 - (C2839 + C2840) + C2841) * C50778) *
               C24524) *
              C50841 * C583 +
          (C24966 * C51088 +
           (C20201 * C51034 + (C2840 + C2839 - C2838 - C2841) * C50778) *
               C51089 +
           ((C20198 + C20197 - C20196 - C20199) * C51034 +
            (C2850 * C49770 + C2851 * C51025 -
             (C117 * C2805 + C50911 * C2810) * C49763 -
             (C117 * C2811 + C50911 * C2814) * C50758) *
                C50778) *
               C24524) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C51034 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50778) *
               C51088 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C51034 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C50778) *
               C51089 +
           ((C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C51034 +
            (C2474 + C2475 - C2476 - C2477 + C2478 + C2479) * C50778) *
               C24524) *
              C50841 * C51040 +
          (((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C51034 +
            (C2462 - (C2461 + C2460) + C2463 - C2464 - C2465) * C50778) *
               C51088 +
           ((C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C51034 +
            (C2476 - (C2475 + C2474) + C2477 - C2478 - C2479) * C50778) *
               C51089 +
           ((C19994 - (C19993 + C19992) + C19995 - C19996 - C19997) * C51034 +
            (C2494 * C284 - (C2493 * C278 + C2492 * C283) + C2495 * C279 -
             (C117 * C697 + C50911 * C702) * C285 -
             (C117 * C701 + C50911 * C709) * C280) *
                C50778) *
               C24524) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C51034 +
            (C171 * C696 + C172 * C50753) * C50778) *
               C51088 +
           ((C2967 + C2968) * C51034 + (C2969 + C2970) * C50778) * C51089 +
           C25069 * C24524) *
              C50841 * C692 -
          (C25070 * C24524 +
           ((C2974 + C2973) * C50778 + (C2972 + C2971) * C51034) * C51089 +
           ((C2970 + C2969) * C50778 + (C2968 + C2967) * C51034) * C51088) *
              C50841 * C693 +
          (C25069 * C51088 +
           (C20274 * C51034 + (C2976 + C2975) * C50778) * C51089 +
           ((C2995 + C2996) * C51034 + (C2983 + C2984) * C50778) * C24524) *
              C50841 * C694 -
          ((((C117 * C2960 + C50911 * C2964) * C50753 +
             (C117 * C2958 + C50911 * C2961) * C696) *
                C50778 +
            (C20286 + C20285) * C51034) *
               C24524 +
           ((C2984 + C2983) * C50778 + C20275 * C51034) * C51089 +
           C25070 * C51088) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C51034 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50778) *
               C51088 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C51034 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C50778) *
               C51089 +
           ((C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C51034 +
            (C2474 + C2475 - C2476 - C2477 + C2478 + C2479) * C50778) *
               C24524) *
              C51041 +
          (((C475 * C284 -
             ((C117 * C441 + C50911 * C452) * C278 +
              (C117 * C435 + C50911 * C442) * C283) +
             C476 * C279 - C477 * C285 - C478 * C280) *
                C51034 +
            (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
             C479 * C285 - C480 * C280) *
                C50778) *
               C51088 +
           ((C1540 * C284 - (C3184 * C278 + C3185 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C51034 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50778) *
               C51089 +
           ((C2654 * C284 - (C3182 * C278 + C3183 * C283) + C2655 * C279 -
             C2656 * C285 - C2657 * C280) *
                C51034 +
            (C2656 * C284 - (C2655 * C278 + C2654 * C283) + C2657 * C279 -
             (C117 * C815 + C50911 * C828) * C285 -
             (C117 * C827 + C50911 * C839) * C280) *
                C50778) *
               C24524) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C51034 +
             (C171 * C696 + C172 * C50753) * C50778) *
                C51088 +
            ((C2967 + C2968) * C51034 + (C2969 + C2970) * C50778) * C51089 +
            C25069 * C24524) *
               C51041 -
           (C25219 * C24524 +
            ((C3167 + C3168) * C50778 + (C3193 + C3194) * C51034) * C51089 +
            ((C476 * C50753 + C475 * C696) * C50778 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C51034) *
                C51088) *
               C50853) *
              C582 +
          ((((C3194 + C3193) * C51034 + (C3168 + C3167) * C50778) * C51088 +
            ((C3192 + C3191) * C51034 + (C3162 + C3161) * C50778) * C51089 +
            ((C3195 + C3196) * C51034 + (C3197 + C3198) * C50778) * C24524) *
               C50853 -
           (C25070 * C24524 +
            ((C2974 + C2973) * C50778 + (C2972 + C2971) * C51034) * C51089 +
            ((C2970 + C2969) * C50778 + (C2968 + C2967) * C51034) * C51088) *
               C51041) *
              C583 +
          ((C25069 * C51088 +
            (C20274 * C51034 + (C2976 + C2975) * C50778) * C51089 +
            ((C2995 + C2996) * C51034 + (C2983 + C2984) * C50778) * C24524) *
               C51041 -
           ((((C117 * C3152 + C50911 * C3158) * C50753 +
              (C117 * C3146 + C50911 * C3153) * C696) *
                 C50778 +
             (C20399 + C20398) * C51034) *
                C24524 +
            ((C3198 + C3197) * C50778 + C20389 * C51034) * C51089 +
            C25219 * C51088) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C1285 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C51083 -
            (C10878 + C10879) * C1286 - (C10880 + C10881) * C51067 +
            C10894 * C1287 + C10895 * C1282) *
               C50773 * C51088 +
           ((C13914 + C13915) * C1285 + (C13916 + C13917) * C51083 -
            C13908 * C1286 - C13909 * C51067 + C13910 * C1287 +
            C13911 * C1282) *
               C50773 * C51089 +
           (C31099 * C1285 + C31100 * C51083 - C14317 * C1286 -
            C14316 * C51067 + (C11433 + C11432) * C1287 +
            (C11435 + C11434) * C1282) *
               C50773 * C24524) *
              C50841 * C1283 +
          ((C13912 * C1286 -
            ((C13917 + C13916) * C51083 + (C13915 + C13914) * C1285) +
            C13913 * C51067 - C11080 * C1287 - C11081 * C1282) *
               C50773 * C51088 +
           (C14306 * C1286 -
            ((C14326 + C14327) * C51083 + (C14328 + C14329) * C1285) +
            C14315 * C51067 - (C11432 + C11433) * C1287 -
            (C11434 + C11435) * C1282) *
               C50773 * C51089 +
           ((C14331 + C14330) * C1286 - (C31209 * C51083 + C31210 * C1285) +
            (C14333 + C14332) * C51067 -
            (C10844 * C4202 + C50975 * C4203 + C10843 * C698 + C51056 * C704) *
                C1287 -
            (C10844 * C4204 + C50975 * C4205 + C10843 * C703 + C51056 * C710) *
                C1282) *
               C50773 * C24524) *
              C50841 * C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C1391 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C1386 -
            (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
               C50773 * C51088 +
           ((C13914 + C13915) * C1391 + (C13916 + C13917) * C1386 -
            C13908 * C1392 - C13909 * C50758) *
               C50773 * C51089 +
           C32094 * C24524) *
              C50841 * C51086 +
          ((C13912 * C1392 -
            ((C13917 + C13916) * C1386 + (C13915 + C13914) * C1391) +
            C13913 * C50758) *
               C50773 * C51088 +
           (C14306 * C1392 -
            ((C14326 + C14327) * C1386 + (C14328 + C14329) * C1391) +
            C14315 * C50758) *
               C50773 * C51089 +
           ((C14331 + C14330) * C1392 - (C31209 * C1386 + C31210 * C1391) +
            (C14333 + C14332) * C50758) *
               C50773 * C24524) *
              C50841 * C51073 +
          (C32094 * C51088 +
           ((C14472 + C14473) * C1391 + (C14474 + C14475) * C1386 -
            (C14330 + C14331) * C1392 - (C14332 + C14333) * C50758) *
               C50773 * C51089 +
           ((C31222 + C31223) * C1391 + (C31224 + C31225) * C1386 -
            (C10844 * C3146 + C50975 * C3153 + C10843 * C2804 +
             C51056 * C2808) *
                C1392 -
            (C10844 * C3152 + C50975 * C3158 + C10843 * C2809 +
             C51056 * C2813) *
                C50758) *
               C50773 * C24524) *
              C50841 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C1391 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C1386 -
             (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
                C50773 * C51088 +
            ((C13914 + C13915) * C1391 + (C13916 + C13917) * C1386 -
             C13908 * C1392 - C13909 * C50758) *
                C50773 * C51089 +
            C32094 * C24524) *
               C51041 +
           (((C11252 + C11253) * C1392 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C1386 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C1391) +
             (C11254 + C11255) * C50758) *
                C50773 * C51088 +
            (C15894 * C1392 -
             ((C14694 + C14695) * C1386 + (C14696 + C14697) * C1391) +
             C15895 * C50758) *
                C50773 * C51089 +
            ((C14702 + C14703) * C1392 - (C31375 * C1386 + C31376 * C1391) +
             (C14704 + C14705) * C50758) *
                C50773 * C24524) *
               C50853) *
              C1283 +
          (((C13912 * C1392 -
             ((C13917 + C13916) * C1386 + (C13915 + C13914) * C1391) +
             C13913 * C50758) *
                C50773 * C51088 +
            (C14306 * C1392 -
             ((C14326 + C14327) * C1386 + (C14328 + C14329) * C1391) +
             C14315 * C50758) *
                C50773 * C51089 +
            ((C14331 + C14330) * C1392 - (C31209 * C1386 + C31210 * C1391) +
             (C14333 + C14332) * C50758) *
                C50773 * C24524) *
               C51041 +
           (((C14697 + C14696) * C1391 + (C14695 + C14694) * C1386 -
             C15897 * C1392 - C15896 * C50758) *
                C50773 * C51088 +
            ((C14698 + C14699) * C1391 + (C14700 + C14701) * C1386 -
             (C14703 + C14702) * C1392 - (C14705 + C14704) * C50758) *
                C50773 * C51089 +
            ((C31387 + C31388) * C1391 + (C31389 + C31390) * C1386 -
             (C10844 * C3517 + C50975 * C3520 + C10843 * C3145 +
              C51056 * C3150) *
                 C1392 -
             (C10844 * C3519 + C50975 * C3523 + C10843 * C3151 +
              C51056 * C3157) *
                 C50758) *
                C50773 * C24524) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C49770 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C51025 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
                C50773 * C51088 +
            ((C13914 + C13915) * C49770 + (C13916 + C13917) * C51025 -
             C13908 * C49763 - C13909 * C50758) *
                C50773 * C51089 +
            C31108 * C24524) *
               C1643 +
           (((C11252 + C11253) * C49763 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C51025 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C49770) +
             (C11254 + C11255) * C50758) *
                C50773 * C51088 +
            (C15894 * C49763 -
             ((C14694 + C14695) * C51025 + (C14696 + C14697) * C49770) +
             C15895 * C50758) *
                C50773 * C51089 +
            ((C14702 + C14703) * C49763 - (C31375 * C51025 + C31376 * C49770) +
             (C14704 + C14705) * C50758) *
                C50773 * C24524) *
               C50853) *
              C1283 +
          (((C13912 * C49763 -
             ((C13917 + C13916) * C51025 + (C13915 + C13914) * C49770) +
             C13913 * C50758) *
                C50773 * C51088 +
            (C14306 * C49763 -
             ((C14326 + C14327) * C51025 + (C14328 + C14329) * C49770) +
             C14315 * C50758) *
                C50773 * C51089 +
            ((C14331 + C14330) * C49763 - (C31209 * C51025 + C31210 * C49770) +
             (C14333 + C14332) * C50758) *
                C50773 * C24524) *
               C1643 +
           (((C14697 + C14696) * C49770 + (C14695 + C14694) * C51025 -
             C15897 * C49763 - C15896 * C50758) *
                C50773 * C51088 +
            ((C14698 + C14699) * C49770 + (C14700 + C14701) * C51025 -
             (C14703 + C14702) * C49763 - (C14705 + C14704) * C50758) *
                C50773 * C51089 +
            ((C31387 + C31388) * C49770 + (C31389 + C31390) * C51025 -
             (C10844 * C3517 + C50975 * C3520 + C10843 * C3145 +
              C51056 * C3150) *
                 C49763 -
             (C10844 * C3519 + C50975 * C3523 + C10843 * C3151 +
              C51056 * C3157) *
                 C50758) *
                C50773 * C24524) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C51088 +
            ((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C50773 *
                C51089 +
            C31226 * C24524) *
               C1643 -
           (C31392 * C24524 +
            ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C50773 *
                C51089 +
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C50753 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C696) *
                C50773 * C51088) *
               C50853) *
              C51086 +
          ((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C50773 *
                C51088 +
            ((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C50773 *
                C51089 +
            ((C31387 + C31388) * C696 + (C31389 + C31390) * C50753) * C50773 *
                C24524) *
               C50853 -
           (C31228 * C24524 +
            ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C50773 *
                C51089 +
            ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C50773 *
                C51088) *
               C1643) *
              C51073 +
          ((C31226 * C51088 +
            ((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C50773 *
                C51089 +
            ((C31222 + C31223) * C696 + (C31224 + C31225) * C50753) * C50773 *
                C24524) *
               C1643 -
           (((C10844 * C20596 + C50975 * C20598 + C10843 * C3154 +
              C51056 * C3159) *
                 C50753 +
             (C10844 * C20595 + C50975 * C20597 + C10843 * C3147 +
              C51056 * C3155) *
                 C696) *
                C50773 * C24524 +
            ((C31390 + C31389) * C50753 + (C31388 + C31387) * C696) * C50773 *
                C51089 +
            C31392 * C51088) *
               C50853) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C51088 +
            ((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C50773 *
                C51089 +
            C31226 * C24524) *
               C51087 -
           (C31392 * C24524 +
            ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C50773 *
                C51089 +
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C50753 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C696) *
                C50773 * C51088) *
               C51076 +
           (((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                 C696 +
             (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                 C50753) *
                C50773 * C51088 +
            ((C15114 + C15115) * C696 + (C15116 + C15117) * C50753) * C50773 *
                C51089 +
            ((C31693 + C31694) * C696 + (C31695 + C31696) * C50753) * C50773 *
                C24524) *
               C1875) *
              C1283 +
          ((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C50773 *
                C51088 +
            ((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C50773 *
                C51089 +
            ((C31387 + C31388) * C696 + (C31389 + C31390) * C50753) * C50773 *
                C24524) *
               C51076 -
           (C31228 * C24524 +
            ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C50773 *
                C51089 +
            ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C50773 *
                C51088) *
               C51087 -
           (((C10844 * C20674 + C50975 * C20676 + C10843 * C3521 +
              C51056 * C3524) *
                 C50753 +
             (C10844 * C20673 + C50975 * C20675 + C10843 * C3518 +
              C51056 * C3522) *
                 C696) *
                C50773 * C24524 +
            ((C31696 + C31695) * C50753 + (C31694 + C31693) * C696) * C50773 *
                C51089 +
            ((C15117 + C15116) * C50753 + (C15115 + C15114) * C696) * C50773 *
                C51088) *
               C1875) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C49770 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C51025 -
            (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
               C50773 * C51088 +
           ((C13914 + C13915) * C49770 + (C13916 + C13917) * C51025 -
            C13908 * C49763 - C13909 * C50758) *
               C50773 * C51089 +
           C31108 * C24524) *
              C50841 * C582 +
          ((C13912 * C49763 -
            ((C13917 + C13916) * C51025 + (C13915 + C13914) * C49770) +
            C13913 * C50758) *
               C50773 * C51088 +
           (C14306 * C49763 -
            ((C14326 + C14327) * C51025 + (C14328 + C14329) * C49770) +
            C14315 * C50758) *
               C50773 * C51089 +
           ((C14331 + C14330) * C49763 -
            ((C14475 + C14474) * C51025 + (C14473 + C14472) * C49770) +
            (C14333 + C14332) * C50758) *
               C50773 * C24524) *
              C50841 * C583 +
          (C31108 * C51088 +
           ((C14472 + C14473) * C49770 + (C14474 + C14475) * C51025 -
            (C14330 + C14331) * C49763 - (C14332 + C14333) * C50758) *
               C50773 * C51089 +
           ((C10843 * C2803 + C51056 * C2806 + C10844 * C3147 +
             C50975 * C3155) *
                C49770 +
            (C10843 * C2807 + C51056 * C2812 + C10844 * C3154 +
             C50975 * C3159) *
                C51025 -
            (C10844 * C3146 + C50975 * C3153 + C10843 * C2804 +
             C51056 * C2808) *
                C49763 -
            (C10844 * C3152 + C50975 * C3158 + C10843 * C2809 +
             C51056 * C2813) *
                C50758) *
               C50773 * C24524) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
               C118 +
           (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
               C106 -
           (C10878 + C10879) * C119 - (C10880 + C10881) * C107 + C10894 * C120 +
           C10895 * C108 - C10896 * C121 - C10897 * C109) *
              C50773 * C51088 +
          ((C13914 + C13915) * C118 + (C13916 + C13917) * C106 - C13908 * C119 -
           C13909 * C107 + C13910 * C120 + C13911 * C108 -
           (C11076 + C11077) * C121 - (C11078 + C11079) * C109) *
              C50773 * C51089 +
          ((C14329 + C14328) * C118 + (C14327 + C14326) * C106 - C14317 * C119 -
           C14316 * C107 + (C11433 + C11432) * C120 + (C11435 + C11434) * C108 -
           (C10844 * C815 + C50975 * C828 + C10843 * C590 + C51056 * C598) *
               C121 -
           (C10844 * C827 + C50975 * C839 + C10843 * C599 + C51056 * C605) *
               C109) *
              C50773 * C24524) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C49770 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C51025 -
            (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
               C50773 * C51088 +
           ((C13914 + C13915) * C49770 + (C13916 + C13917) * C51025 -
            C13908 * C49763 - C13909 * C50758) *
               C50773 * C51089 +
           C31108 * C24524) *
              C941 +
          (((C11252 + C11253) * C49763 -
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C51025 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C49770) +
            (C11254 + C11255) * C50758) *
               C50773 * C51088 +
           (C15894 * C49763 -
            ((C14694 + C14695) * C51025 + (C14696 + C14697) * C49770) +
            C15895 * C50758) *
               C50773 * C51089 +
           ((C14702 + C14703) * C49763 - (C31375 * C51025 + C31376 * C49770) +
            (C14704 + C14705) * C50758) *
               C50773 * C24524) *
              C942 +
          (((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                C49770 +
            (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                C51025 -
            (C11842 + C11843) * C49763 - (C11844 + C11845) * C50758) *
               C50773 * C51088 +
           ((C15114 + C15115) * C49770 + (C15116 + C15117) * C51025 -
            (C14908 + C14909) * C49763 - (C14910 + C14911) * C50758) *
               C50773 * C51089 +
           ((C10843 * C3347 + C51056 * C3350 + C10844 * C3644 +
             C50975 * C3650) *
                C49770 +
            (C10843 * C3351 + C51056 * C3356 + C10844 * C3649 +
             C50975 * C3656) *
                C51025 -
            (C10844 * C3643 + C50975 * C3648 + C10843 * C3348 +
             C51056 * C3352) *
                C49763 -
            (C10844 * C3647 + C50975 * C3655 + C10843 * C3353 +
             C51056 * C3357) *
                C50758) *
               C50773 * C24524) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C696 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C50753) *
               C50773 * C51088 +
           ((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C50773 *
               C51089 +
           C31226 * C24524) *
              C50841 * C692 -
          (C31228 * C24524 +
           ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C50773 *
               C51089 +
           ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C50773 *
               C51088) *
              C50841 * C693 +
          (C31226 * C51088 +
           ((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C50773 *
               C51089 +
           ((C31222 + C31223) * C696 + (C31224 + C31225) * C50753) * C50773 *
               C24524) *
              C50841 * C694 -
          (((C10844 * C20385 + C50975 * C20387 + C10843 * C2962 +
             C51056 * C2965) *
                C50753 +
            (C10844 * C20384 + C50975 * C20386 + C10843 * C2959 +
             C51056 * C2963) *
                C696) *
               C50773 * C24524 +
           ((C31225 + C31224) * C50753 + (C31223 + C31222) * C696) * C50773 *
               C51089 +
           C31228 * C51088) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C283 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
            C10894 * C285 + C10895 * C280) *
               C50773 * C51088 +
           ((C13914 + C13915) * C283 + (C13916 + C13917) * C278 -
            C13908 * C284 - C13909 * C279 + C13910 * C285 + C13911 * C280) *
               C50773 * C51089 +
           ((C14329 + C14328) * C283 + (C14327 + C14326) * C278 -
            C14317 * C284 - C14316 * C279 + (C11433 + C11432) * C285 +
            (C11435 + C11434) * C280) *
               C50773 * C24524) *
              C50841 * C51040 +
          ((C13912 * C284 -
            ((C13917 + C13916) * C278 + (C13915 + C13914) * C283) +
            C13913 * C279 - C11080 * C285 - C11081 * C280) *
               C50773 * C51088 +
           (C14306 * C284 -
            ((C14326 + C14327) * C278 + (C14328 + C14329) * C283) +
            C14315 * C279 - (C11432 + C11433) * C285 -
            (C11434 + C11435) * C280) *
               C50773 * C51089 +
           ((C14331 + C14330) * C284 -
            ((C14475 + C14474) * C278 + (C14473 + C14472) * C283) +
            (C14333 + C14332) * C279 -
            (C10844 * C4202 + C50975 * C4203 + C10843 * C698 + C51056 * C704) *
                C285 -
            (C10844 * C4204 + C50975 * C4205 + C10843 * C703 + C51056 * C710) *
                C280) *
               C50773 * C24524) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C51088 +
            ((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C50773 *
                C51089 +
            C31226 * C24524) *
               C941 -
           (C31392 * C24524 +
            ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C50773 *
                C51089 +
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C50753 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C696) *
                C50773 * C51088) *
               C942 +
           (((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                 C696 +
             (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                 C50753) *
                C50773 * C51088 +
            ((C15114 + C15115) * C696 + (C15116 + C15117) * C50753) * C50773 *
                C51089 +
            ((C31693 + C31694) * C696 + (C31695 + C31696) * C50753) * C50773 *
                C24524) *
               C943) *
              C51040 +
          ((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C50773 *
                C51088 +
            ((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C50773 *
                C51089 +
            ((C31387 + C31388) * C696 + (C31389 + C31390) * C50753) * C50773 *
                C24524) *
               C942 -
           (C31228 * C24524 +
            ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C50773 *
                C51089 +
            ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C50773 *
                C51088) *
               C941 -
           (((C10844 * C20674 + C50975 * C20676 + C10843 * C3521 +
              C51056 * C3524) *
                 C50753 +
             (C10844 * C20673 + C50975 * C20675 + C10843 * C3518 +
              C51056 * C3522) *
                 C696) *
                C50773 * C24524 +
            ((C31696 + C31695) * C50753 + (C31694 + C31693) * C696) * C50773 *
                C51089 +
            ((C15117 + C15116) * C50753 + (C15115 + C15114) * C696) * C50773 *
                C51088) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C51088 +
            ((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C50773 *
                C51089 +
            C31226 * C24524) *
               C51041 -
           (C31392 * C24524 +
            ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C50773 *
                C51089 +
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C50753 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C696) *
                C50773 * C51088) *
               C50853) *
              C582 +
          ((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C50773 *
                C51088 +
            ((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C50773 *
                C51089 +
            ((C31387 + C31388) * C696 + (C31389 + C31390) * C50753) * C50773 *
                C24524) *
               C50853 -
           (C31228 * C24524 +
            ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C50773 *
                C51089 +
            ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C50773 *
                C51088) *
               C51041) *
              C583 +
          ((C31226 * C51088 +
            ((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C50773 *
                C51089 +
            ((C31222 + C31223) * C696 + (C31224 + C31225) * C50753) * C50773 *
                C24524) *
               C51041 -
           (((C10844 * C20596 + C50975 * C20598 + C10843 * C3154 +
              C51056 * C3159) *
                 C50753 +
             (C10844 * C20595 + C50975 * C20597 + C10843 * C3147 +
              C51056 * C3155) *
                 C696) *
                C50773 * C24524 +
            ((C31390 + C31389) * C50753 + (C31388 + C31387) * C696) * C50773 *
                C51089 +
            C31392 * C51088) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C283 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
            C10894 * C285 + C10895 * C280) *
               C50773 * C51088 +
           ((C13914 + C13915) * C283 + (C13916 + C13917) * C278 -
            C13908 * C284 - C13909 * C279 + C13910 * C285 + C13911 * C280) *
               C50773 * C51089 +
           ((C14329 + C14328) * C283 + (C14327 + C14326) * C278 -
            C14317 * C284 - C14316 * C279 + (C11433 + C11432) * C285 +
            (C11435 + C11434) * C280) *
               C50773 * C24524) *
              C51041 +
          (((C11252 + C11253) * C284 -
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C278 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C283) +
            (C11254 + C11255) * C279 - C11264 * C285 - C11265 * C280) *
               C50773 * C51088 +
           (C15894 * C284 -
            ((C14694 + C14695) * C278 + (C14696 + C14697) * C283) +
            C15895 * C279 - (C12600 + C12601) * C285 -
            (C12602 + C12603) * C280) *
               C50773 * C51089 +
           ((C14702 + C14703) * C284 -
            ((C14701 + C14700) * C278 + (C14699 + C14698) * C283) +
            (C14704 + C14705) * C279 -
            (C10844 * C3349 + C50975 * C3354 + C10843 * C816 + C51056 * C830) *
                C285 -
            (C10844 * C3355 + C50975 * C3358 + C10843 * C829 + C51056 * C840) *
                C280) *
               C50773 * C24524) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C696 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C50753) *
               C50773 * C51088 +
           ((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C50773 *
               C51089 +
           C31226 * C24524) *
              C1162 -
          (C31392 * C24524 +
           ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C50773 *
               C51089 +
           ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                C50753 +
            (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                C696) *
               C50773 * C51088) *
              C1163 +
          (((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                C696 +
            (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                C50753) *
               C50773 * C51088 +
           ((C15114 + C15115) * C696 + (C15116 + C15117) * C50753) * C50773 *
               C51089 +
           ((C31693 + C31694) * C696 + (C31695 + C31696) * C50753) * C50773 *
               C24524) *
              C1164 -
          (((C10844 * C22841 + C50975 * C22843 + C10843 * C3649 +
             C51056 * C3656) *
                C50753 +
            (C10844 * C22840 + C50975 * C22842 + C10843 * C3644 +
             C51056 * C3650) *
                C696) *
               C50773 * C24524 +
           ((C10844 * C6466 + C50975 * C6469 + C10843 * C3653 +
             C51056 * C3658) *
                C50753 +
            (C10844 * C6463 + C50975 * C6467 + C10843 * C3646 +
             C51056 * C3654) *
                C696) *
               C50773 * C51089 +
           ((C10844 * C6290 + C50975 * C6295 + C10843 * C1176 +
             C51056 * C1181) *
                C50753 +
            (C10844 * C6286 + C50975 * C6289 + C10843 * C1169 +
             C51056 * C1177) *
                C696) *
               C50773 * C51088) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C1285 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C51083 -
            (C10878 + C10879) * C1286 - (C10880 + C10881) * C51067 +
            C10894 * C1287 + C10895 * C1282) *
               C50773 * C51088 +
           ((C13914 + C13915) * C1285 + (C13916 + C13917) * C51083 -
            C13908 * C1286 - C13909 * C51067 + C13910 * C1287 +
            C13911 * C1282) *
               C50773 * C51089 +
           (C31099 * C1285 + C31100 * C51083 - C14317 * C1286 -
            C14316 * C51067 + (C11433 + C11432) * C1287 +
            (C11435 + C11434) * C1282) *
               C50773 * C24524) *
              C1643 +
          (((C11252 + C11253) * C1286 -
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C51083 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C1285) +
            (C11254 + C11255) * C51067 - C11264 * C1287 - C11265 * C1282) *
               C50773 * C51088 +
           (C15894 * C1286 -
            ((C14694 + C14695) * C51083 + (C14696 + C14697) * C1285) +
            C15895 * C51067 - (C12600 + C12601) * C1287 -
            (C12602 + C12603) * C1282) *
               C50773 * C51089 +
           ((C14702 + C14703) * C1286 - (C31375 * C51083 + C31376 * C1285) +
            (C14704 + C14705) * C51067 -
            (C10844 * C3349 + C50975 * C3354 + C10843 * C816 + C51056 * C830) *
                C1287 -
            (C10844 * C3355 + C50975 * C3358 + C10843 * C829 + C51056 * C840) *
                C1282) *
               C50773 * C24524) *
              C50853) *
         C50815) /
        (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C1391 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C1386 -
             (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
                C50773 * C51088 +
            ((C13914 + C13915) * C1391 + (C13916 + C13917) * C1386 -
             C13908 * C1392 - C13909 * C50758) *
                C50773 * C51089 +
            C32094 * C24524) *
               C1643 +
           (((C11252 + C11253) * C1392 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C1386 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C1391) +
             (C11254 + C11255) * C50758) *
                C50773 * C51088 +
            (C15894 * C1392 -
             ((C14694 + C14695) * C1386 + (C14696 + C14697) * C1391) +
             C15895 * C50758) *
                C50773 * C51089 +
            ((C14702 + C14703) * C1392 - (C31375 * C1386 + C31376 * C1391) +
             (C14704 + C14705) * C50758) *
                C50773 * C24524) *
               C50853) *
              C51040 +
          (((C13912 * C1392 -
             ((C13917 + C13916) * C1386 + (C13915 + C13914) * C1391) +
             C13913 * C50758) *
                C50773 * C51088 +
            (C14306 * C1392 -
             ((C14326 + C14327) * C1386 + (C14328 + C14329) * C1391) +
             C14315 * C50758) *
                C50773 * C51089 +
            ((C14331 + C14330) * C1392 - (C31209 * C1386 + C31210 * C1391) +
             (C14333 + C14332) * C50758) *
                C50773 * C24524) *
               C1643 +
           (((C14697 + C14696) * C1391 + (C14695 + C14694) * C1386 -
             C15897 * C1392 - C15896 * C50758) *
                C50773 * C51088 +
            ((C14698 + C14699) * C1391 + (C14700 + C14701) * C1386 -
             (C14703 + C14702) * C1392 - (C14705 + C14704) * C50758) *
                C50773 * C51089 +
            ((C31387 + C31388) * C1391 + (C31389 + C31390) * C1386 -
             (C10844 * C3517 + C50975 * C3520 + C10843 * C3145 +
              C51056 * C3150) *
                 C1392 -
             (C10844 * C3519 + C50975 * C3523 + C10843 * C3151 +
              C51056 * C3157) *
                 C50758) *
                C50773 * C24524) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C1391 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C1386 -
            (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
               C50773 * C51088 +
           ((C13914 + C13915) * C1391 + (C13916 + C13917) * C1386 -
            C13908 * C1392 - C13909 * C50758) *
               C50773 * C51089 +
           C32094 * C24524) *
              C51087 +
          (((C11252 + C11253) * C1392 -
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C1386 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C1391) +
            (C11254 + C11255) * C50758) *
               C50773 * C51088 +
           (C15894 * C1392 -
            ((C14694 + C14695) * C1386 + (C14696 + C14697) * C1391) +
            C15895 * C50758) *
               C50773 * C51089 +
           ((C14702 + C14703) * C1392 - (C31375 * C1386 + C31376 * C1391) +
            (C14704 + C14705) * C50758) *
               C50773 * C24524) *
              C51076 +
          (((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                C1391 +
            (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                C1386 -
            (C11842 + C11843) * C1392 - (C11844 + C11845) * C50758) *
               C50773 * C51088 +
           ((C15114 + C15115) * C1391 + (C15116 + C15117) * C1386 -
            (C14908 + C14909) * C1392 - (C14910 + C14911) * C50758) *
               C50773 * C51089 +
           ((C31693 + C31694) * C1391 + (C31695 + C31696) * C1386 -
            (C10844 * C3643 + C50975 * C3648 + C10843 * C3348 +
             C51056 * C3352) *
                C1392 -
            (C10844 * C3647 + C50975 * C3655 + C10843 * C3353 +
             C51056 * C3357) *
                C50758) *
               C50773 * C24524) *
              C1875) *
         C50815) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
               C118 +
           (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
               C106 -
           (C10878 + C10879) * C119 - (C10880 + C10881) * C107 + C10894 * C120 +
           C10895 * C108 - C10896 * C121 - C10897 * C109) *
              C50773 * C51088 +
          ((C13914 + C13915) * C118 + (C13916 + C13917) * C106 - C13908 * C119 -
           C13909 * C107 + C13910 * C120 + C13911 * C108 -
           (C11076 + C11077) * C121 - (C11078 + C11079) * C109) *
              C50773 * C51089 +
          ((C14329 + C14328) * C118 + (C14327 + C14326) * C106 - C14317 * C119 -
           C14316 * C107 + (C11433 + C11432) * C120 + (C11435 + C11434) * C108 -
           (C10844 * C815 + C50975 * C828 + C10843 * C590 + C51056 * C598) *
               C121 -
           (C10844 * C827 + C50975 * C839 + C10843 * C599 + C51056 * C605) *
               C109) *
              C50773 * C24524) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C49770 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C51025 -
            (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
               C50773 * C51088 +
           ((C13914 + C13915) * C49770 + (C13916 + C13917) * C51025 -
            C13908 * C49763 - C13909 * C50758) *
               C50773 * C51089 +
           C31108 * C24524) *
              C50841 * C582 +
          ((C13912 * C49763 -
            ((C13917 + C13916) * C51025 + (C13915 + C13914) * C49770) +
            C13913 * C50758) *
               C50773 * C51088 +
           (C14306 * C49763 -
            ((C14326 + C14327) * C51025 + (C14328 + C14329) * C49770) +
            C14315 * C50758) *
               C50773 * C51089 +
           ((C14331 + C14330) * C49763 -
            ((C14475 + C14474) * C51025 + (C14473 + C14472) * C49770) +
            (C14333 + C14332) * C50758) *
               C50773 * C24524) *
              C50841 * C583 +
          (C31108 * C51088 +
           ((C14472 + C14473) * C49770 + (C14474 + C14475) * C51025 -
            (C14330 + C14331) * C49763 - (C14332 + C14333) * C50758) *
               C50773 * C51089 +
           ((C10843 * C2803 + C51056 * C2806 + C10844 * C3147 +
             C50975 * C3155) *
                C49770 +
            (C10843 * C2807 + C51056 * C2812 + C10844 * C3154 +
             C50975 * C3159) *
                C51025 -
            (C10844 * C3146 + C50975 * C3153 + C10843 * C2804 +
             C51056 * C2808) *
                C49763 -
            (C10844 * C3152 + C50975 * C3158 + C10843 * C2809 +
             C51056 * C2813) *
                C50758) *
               C50773 * C24524) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C283 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
            C10894 * C285 + C10895 * C280) *
               C50773 * C51088 +
           ((C13914 + C13915) * C283 + (C13916 + C13917) * C278 -
            C13908 * C284 - C13909 * C279 + C13910 * C285 + C13911 * C280) *
               C50773 * C51089 +
           ((C14329 + C14328) * C283 + (C14327 + C14326) * C278 -
            C14317 * C284 - C14316 * C279 + (C11433 + C11432) * C285 +
            (C11435 + C11434) * C280) *
               C50773 * C24524) *
              C50841 * C51040 +
          ((C13912 * C284 -
            ((C13917 + C13916) * C278 + (C13915 + C13914) * C283) +
            C13913 * C279 - C11080 * C285 - C11081 * C280) *
               C50773 * C51088 +
           (C14306 * C284 -
            ((C14326 + C14327) * C278 + (C14328 + C14329) * C283) +
            C14315 * C279 - (C11432 + C11433) * C285 -
            (C11434 + C11435) * C280) *
               C50773 * C51089 +
           ((C14331 + C14330) * C284 -
            ((C14475 + C14474) * C278 + (C14473 + C14472) * C283) +
            (C14333 + C14332) * C279 -
            (C10844 * C4202 + C50975 * C4203 + C10843 * C698 + C51056 * C704) *
                C285 -
            (C10844 * C4204 + C50975 * C4205 + C10843 * C703 + C51056 * C710) *
                C280) *
               C50773 * C24524) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C696 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C50753) *
               C50773 * C51088 +
           ((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C50773 *
               C51089 +
           C31226 * C24524) *
              C50841 * C692 -
          (C31228 * C24524 +
           ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C50773 *
               C51089 +
           ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C50773 *
               C51088) *
              C50841 * C693 +
          (C31226 * C51088 +
           ((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C50773 *
               C51089 +
           ((C31222 + C31223) * C696 + (C31224 + C31225) * C50753) * C50773 *
               C24524) *
              C50841 * C694 -
          (((C10844 * C20385 + C50975 * C20387 + C10843 * C2962 +
             C51056 * C2965) *
                C50753 +
            (C10844 * C20384 + C50975 * C20386 + C10843 * C2959 +
             C51056 * C2963) *
                C696) *
               C50773 * C24524 +
           ((C31225 + C31224) * C50753 + (C31223 + C31222) * C696) * C50773 *
               C51089 +
           C31228 * C51088) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C283 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
            C10894 * C285 + C10895 * C280) *
               C50773 * C51088 +
           ((C13914 + C13915) * C283 + (C13916 + C13917) * C278 -
            C13908 * C284 - C13909 * C279 + C13910 * C285 + C13911 * C280) *
               C50773 * C51089 +
           ((C14329 + C14328) * C283 + (C14327 + C14326) * C278 -
            C14317 * C284 - C14316 * C279 + (C11433 + C11432) * C285 +
            (C11435 + C11434) * C280) *
               C50773 * C24524) *
              C51041 +
          (((C11252 + C11253) * C284 -
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C278 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C283) +
            (C11254 + C11255) * C279 - C11264 * C285 - C11265 * C280) *
               C50773 * C51088 +
           (C15894 * C284 -
            ((C14694 + C14695) * C278 + (C14696 + C14697) * C283) +
            C15895 * C279 - (C12600 + C12601) * C285 -
            (C12602 + C12603) * C280) *
               C50773 * C51089 +
           ((C14702 + C14703) * C284 -
            ((C14701 + C14700) * C278 + (C14699 + C14698) * C283) +
            (C14704 + C14705) * C279 -
            (C10844 * C3349 + C50975 * C3354 + C10843 * C816 + C51056 * C830) *
                C285 -
            (C10844 * C3355 + C50975 * C3358 + C10843 * C829 + C51056 * C840) *
                C280) *
               C50773 * C24524) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C51088 +
            ((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C50773 *
                C51089 +
            C31226 * C24524) *
               C51041 -
           (C31392 * C24524 +
            ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C50773 *
                C51089 +
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C50753 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C696) *
                C50773 * C51088) *
               C50853) *
              C582 +
          ((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C50773 *
                C51088 +
            ((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C50773 *
                C51089 +
            ((C31387 + C31388) * C696 + (C31389 + C31390) * C50753) * C50773 *
                C24524) *
               C50853 -
           (C31228 * C24524 +
            ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C50773 *
                C51089 +
            ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C50773 *
                C51088) *
               C51041) *
              C583 +
          ((C31226 * C51088 +
            ((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C50773 *
                C51089 +
            ((C31222 + C31223) * C696 + (C31224 + C31225) * C50753) * C50773 *
                C24524) *
               C51041 -
           (((C10844 * C20596 + C50975 * C20598 + C10843 * C3154 +
              C51056 * C3159) *
                 C50753 +
             (C10844 * C20595 + C50975 * C20597 + C10843 * C3147 +
              C51056 * C3155) *
                 C696) *
                C50773 * C24524 +
            ((C31390 + C31389) * C50753 + (C31388 + C31387) * C696) * C50773 *
                C51089 +
            C31392 * C51088) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1285 +
            (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
            C172 * C51067 + C173 * C1287 + C174 * C1282) *
               C50773 * C19889 +
           (C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C50773 * C19890 +
           (C3818 + C3819 - C3820 - C3821 + C3822 + C3823) * C50773 * C19891 +
           (C20776 + C20777 - C20778 - C20779 + C20780 + C20781) * C50773 *
               C19892) *
              C50841 * C1283 +
          ((C3808 - (C3807 + C3806) + C3809 - C3810 - C3811) * C50773 * C19889 +
           (C3820 - (C3819 + C3818) + C3821 - C3822 - C3823) * C50773 * C19890 +
           (C20778 - (C20777 + C20776) + C20779 - C20780 - C20781) * C50773 *
               C19891 +
           (C2850 * C1286 - (C2990 * C51083 + C2989 * C1285) + C2851 * C51067 -
            (C117 * C2805 + C50911 * C2810) * C1287 -
            (C117 * C2811 + C50911 * C2814) * C1282) *
               C50773 * C19892) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1285 +
             (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
             C172 * C51067 + C173 * C1287 + C174 * C1282) *
                C17287 +
            (C171 * C1285 + C172 * C51083 - C173 * C1286 - C174 * C51067 +
             C175 * C1287 + C176 * C1282) *
                C17288 +
            (C173 * C1285 + C174 * C51083 - C175 * C1286 - C176 * C51067 +
             C177 * C1287 + C178 * C1282) *
                C17289) *
               C17290 +
           ((C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C17287 +
            (C3812 + C3813 - C3814 - C3815 + C3816 + C3817) * C17288 +
            (C9410 + C9411 - C9412 - C9413 + C9414 + C9415) * C17289) *
               C50949) *
              C50841 * C1283 +
          (((C3808 - (C3807 + C3806) + C3809 - C3810 - C3811) * C17287 +
            (C3814 - (C3813 + C3812) + C3815 - C3816 - C3817) * C17288 +
            (C9412 - (C9411 + C9410) + C9413 - C9414 - C9415) * C17289) *
               C17290 +
           ((C3820 - (C3819 + C3818) + C3821 - C3822 - C3823) * C17287 +
            (C3826 - (C3825 + C3824) + C3827 - C3828 - C3829) * C17288 +
            (C624 * C1286 - (C623 * C51083 + C622 * C1285) + C625 * C51067 -
             (C117 * C591 + C50911 * C600) * C1287 -
             (C117 * C601 + C50911 * C606) * C1282) *
                C17289) *
               C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C1285 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C51083 -
            (C5351 + C5352 + C5353) * C1286 - (C5354 + C5355 + C5356) * C51067 +
            (C5357 + C5358 + C5359) * C1287 + (C5360 + C5361 + C5362) * C1282) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C1285 +
            (C21938 + C21939 + C21940) * C51083 -
            (C5541 + C5540 + C5539) * C1286 - (C5544 + C5543 + C5542) * C51067 +
            (C5547 + C5546 + C5545) * C1287 + (C5550 + C5549 + C5548) * C1282) *
               C50773 * C50949) *
              C50841 * C1283 +
          (((C5539 + C5540 + C5541) * C1286 -
            ((C21940 + C21939 + C21938) * C51083 +
             (C21937 + C21936 + C21935) * C1285) +
            (C5542 + C5543 + C5544) * C51067 - (C5545 + C5546 + C5547) * C1287 -
            (C5548 + C5549 + C5550) * C1282) *
               C50773 * C17290 +
           ((C5893 + C5892 + C5891) * C1286 -
            ((C22245 + C22246 + C22247) * C51083 +
             (C22248 + C22249 + C22250) * C1285) +
            (C5896 + C5895 + C5894) * C51067 -
            (C5313 * C3349 + C5310 * C3354 + C5312 * C816 + C5309 * C830 +
             C5311 * C589 + C5308 * C596) *
                C1287 -
            (C5313 * C3355 + C5310 * C3358 + C5312 * C829 + C5309 * C840 +
             C5311 * C597 + C5308 * C604) *
                C1282) *
               C50773 * C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1391 +
            (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
            C172 * C50758) *
               C50773 * C19889 +
           (C3976 + C3977 - C3978 - C3979) * C50773 * C19890 + C20880 * C19891 +
           C20888 * C19892) *
              C50841 * C51086 +
          ((C3978 - (C3977 + C3976) + C3979) * C50773 * C19889 +
           (C3986 - (C3985 + C3984) + C3987) * C50773 * C19890 +
           (C3992 - (C3993 + C3994) + C3995) * C50773 * C19891 +
           (C20882 - (C20883 + C20884) + C20885) * C50773 * C19892) *
              C50841 * C51073 +
          (C20880 * C19889 + C20888 * C19890 +
           (C20884 + C20883 - C20882 - C20885) * C50773 * C19891 +
           (C20283 * C1391 + C20284 * C1386 -
            (C117 * C2958 + C50911 * C2961) * C1392 -
            (C117 * C2960 + C50911 * C2964) * C50758) *
               C50773 * C19892) *
              C50841 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C17287 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C17288 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                C17289) *
               C17290 +
           ((C3976 + C3977 - C3978 - C3979) * C17287 +
            (C3980 + C3981 - C3982 - C3983) * C17288 +
            (C9562 + C9563 - C9564 - C9565) * C17289) *
               C50949) *
              C50841 * C51086 +
          (((C3978 - (C3977 + C3976) + C3979) * C17287 +
            (C3982 - (C3981 + C3980) + C3983) * C17288 +
            (C9564 - (C9563 + C9562) + C9565) * C17289) *
               C17290 +
           ((C3986 - (C3985 + C3984) + C3987) * C17287 +
            (C3990 - (C3989 + C3988) + C3991) * C17288 +
            (C9566 - (C9567 + C9568) + C9569) * C17289) *
               C50949) *
              C50841 * C51073 +
          ((C4004 * C17287 + C4005 * C17288 +
            (C9568 + C9567 - C9566 - C9569) * C17289) *
               C17290 +
           ((C3994 + C3993 - C3992 - C3995) * C17287 +
            (C3998 + C3997 - C3996 - C3999) * C17288 +
            (C2494 * C1391 + C2495 * C1386 -
             (C117 * C697 + C50911 * C702) * C1392 -
             (C117 * C701 + C50911 * C709) * C50758) *
                C17289) *
               C50949) *
              C50841 * C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C1391 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C1386 -
            (C5351 + C5352 + C5353) * C1392 -
            (C5354 + C5355 + C5356) * C50758) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C1391 +
            (C21938 + C21939 + C21940) * C1386 -
            (C5541 + C5540 + C5539) * C1392 -
            (C5544 + C5543 + C5542) * C50758) *
               C50773 * C50949) *
              C50841 * C51086 +
          (((C5539 + C5540 + C5541) * C1392 -
            ((C21940 + C21939 + C21938) * C1386 +
             (C21937 + C21936 + C21935) * C1391) +
            (C5542 + C5543 + C5544) * C50758) *
               C50773 * C17290 +
           ((C5893 + C5892 + C5891) * C1392 -
            ((C22245 + C22246 + C22247) * C1386 +
             (C22248 + C22249 + C22250) * C1391) +
            (C5896 + C5895 + C5894) * C50758) *
               C50773 * C50949) *
              C50841 * C51073 +
          (((C22250 + C22249 + C22248) * C1391 +
            (C22247 + C22246 + C22245) * C1386 -
            (C5891 + C5892 + C5893) * C1392 -
            (C5894 + C5895 + C5896) * C50758) *
               C50773 * C17290 +
           ((C22361 + C22362 + C22363) * C1391 +
            (C22364 + C22365 + C22366) * C1386 -
            (C5313 * C3517 + C5310 * C3520 + C5312 * C3145 + C5309 * C3150 +
             C5311 * C699 + C5308 * C706) *
                C1392 -
            (C5313 * C3519 + C5310 * C3523 + C5312 * C3151 + C5309 * C3157 +
             C5311 * C705 + C5308 * C711) *
                C50758) *
               C50773 * C50949) *
              C50841 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C50773 * C19889 +
            (C3976 + C3977 - C3978 - C3979) * C50773 * C19890 +
            C20880 * C19891 + C20888 * C19892) *
               C51041 +
           ((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C50773 * C19889 +
            (C4207 - (C4208 + C4209) + C4210) * C50773 * C19890 +
            (C4215 - (C4216 + C4217) + C4218) * C50773 * C19891 +
            (C21019 - (C21020 + C21021) + C21022) * C50773 * C19892) *
               C50853) *
              C1283 +
          (((C3978 - (C3977 + C3976) + C3979) * C50773 * C19889 +
            (C3986 - (C3985 + C3984) + C3987) * C50773 * C19890 +
            (C3992 - (C3993 + C3994) + C3995) * C50773 * C19891 +
            (C20882 - (C20883 + C20884) + C20885) * C50773 * C19892) *
               C51041 +
           ((C4209 + C4208 - C4207 - C4210) * C50773 * C19889 +
            (C4217 + C4216 - C4215 - C4218) * C50773 * C19890 +
            (C21021 + C21020 - C21019 - C21022) * C50773 * C19891 +
            (C20396 * C1391 + C20397 * C1386 -
             (C117 * C3146 + C50911 * C3153) * C1392 -
             (C117 * C3152 + C50911 * C3158) * C50758) *
                C50773 * C19892) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C1391 +
              (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
              C172 * C50758) *
                 C17287 +
             (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                 C17288 +
             (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                 C17289) *
                C17290 +
            ((C3976 + C3977 - C3978 - C3979) * C17287 +
             (C3980 + C3981 - C3982 - C3983) * C17288 +
             (C9562 + C9563 - C9564 - C9565) * C17289) *
                C50949) *
               C51041 +
           (((C475 * C1392 -
              ((C117 * C441 + C50911 * C452) * C1386 +
               (C117 * C435 + C50911 * C442) * C1391) +
              C476 * C50758) *
                 C17287 +
             (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                 C17288 +
             (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                 C17289) *
                C17290 +
            ((C4207 - (C4208 + C4209) + C4210) * C17287 +
             (C4211 - (C4212 + C4213) + C4214) * C17288 +
             (C9764 - (C9765 + C9766) + C9767) * C17289) *
                C50949) *
               C50853) *
              C1283 +
          ((((C3978 - (C3977 + C3976) + C3979) * C17287 +
             (C3982 - (C3981 + C3980) + C3983) * C17288 +
             (C9564 - (C9563 + C9562) + C9565) * C17289) *
                C17290 +
            ((C3986 - (C3985 + C3984) + C3987) * C17287 +
             (C3990 - (C3989 + C3988) + C3991) * C17288 +
             (C9566 - (C9567 + C9568) + C9569) * C17289) *
                C50949) *
               C51041 +
           (((C4209 + C4208 - C4207 - C4210) * C17287 +
             (C4213 + C4212 - C4211 - C4214) * C17288 +
             (C9766 + C9765 - C9764 - C9767) * C17289) *
                C17290 +
            ((C4217 + C4216 - C4215 - C4218) * C17287 +
             (C4221 + C4220 - C4219 - C4222) * C17288 +
             (C2656 * C1391 + C2657 * C1386 -
              (C117 * C815 + C50911 * C828) * C1392 -
              (C117 * C827 + C50911 * C839) * C50758) *
                 C17289) *
                C50949) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C1391 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C1386 -
             (C5351 + C5352 + C5353) * C1392 -
             (C5354 + C5355 + C5356) * C50758) *
                C50773 * C17290 +
            ((C21935 + C21936 + C21937) * C1391 +
             (C21938 + C21939 + C21940) * C1386 -
             (C5541 + C5540 + C5539) * C1392 -
             (C5544 + C5543 + C5542) * C50758) *
                C50773 * C50949) *
               C51041 +
           (((C5721 + C5722 + C5723) * C1392 -
             ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
               C5311 * C441 + C5308 * C452) *
                  C1386 +
              (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
               C5311 * C435 + C5308 * C442) *
                  C1391) +
             (C5724 + C5725 + C5726) * C50758) *
                C50773 * C17290 +
            ((C7081 + C7080 + C7079) * C1392 -
             ((C22537 + C22538 + C22539) * C1386 +
              (C22540 + C22541 + C22542) * C1391) +
             (C7084 + C7083 + C7082) * C50758) *
                C50773 * C50949) *
               C50853) *
              C1283 +
          ((((C5539 + C5540 + C5541) * C1392 -
             ((C21940 + C21939 + C21938) * C1386 +
              (C21937 + C21936 + C21935) * C1391) +
             (C5542 + C5543 + C5544) * C50758) *
                C50773 * C17290 +
            ((C5893 + C5892 + C5891) * C1392 -
             ((C22245 + C22246 + C22247) * C1386 +
              (C22248 + C22249 + C22250) * C1391) +
             (C5896 + C5895 + C5894) * C50758) *
                C50773 * C50949) *
               C51041 +
           (((C22542 + C22541 + C22540) * C1391 +
             (C22539 + C22538 + C22537) * C1386 -
             (C7079 + C7080 + C7081) * C1392 -
             (C7082 + C7083 + C7084) * C50758) *
                C50773 * C17290 +
            ((C22543 + C22544 + C22545) * C1391 +
             (C22546 + C22547 + C22548) * C1386 -
             (C5313 * C3643 + C5310 * C3648 + C5312 * C3348 + C5309 * C3352 +
              C5311 * C817 + C5308 * C832) *
                 C1392 -
             (C5313 * C3647 + C5310 * C3655 + C5312 * C3353 + C5309 * C3357 +
              C5311 * C831 + C5308 * C841) *
                 C50758) *
                C50773 * C50949) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C50773 * C19889 +
            (C2816 + C2817 - C2818 - C2819) * C50773 * C19890 +
            C20194 * C19891 + C20202 * C19892) *
               C1643 +
           ((C475 * C49763 -
             ((C117 * C441 + C50911 * C452) * C51025 +
              (C117 * C435 + C50911 * C442) * C49770) +
             C476 * C50758) *
                C50773 * C19889 +
            (C4903 - (C4904 + C4905) + C4906) * C50773 * C19890 +
            (C4911 - (C4912 + C4913) + C4914) * C50773 * C19891 +
            (C21479 - (C21480 + C21481) + C21482) * C50773 * C19892) *
               C50853) *
              C1283 +
          (((C2818 - (C2817 + C2816) + C2819) * C50773 * C19889 +
            (C2826 - (C2825 + C2824) + C2827) * C50773 * C19890 +
            (C2832 - (C2854 + C2855) + C2837) * C50773 * C19891 +
            (C20196 - (C20197 + C20198) + C20199) * C50773 * C19892) *
               C1643 +
           ((C4905 + C4904 - C4903 - C4906) * C50773 * C19889 +
            (C4913 + C4912 - C4911 - C4914) * C50773 * C19890 +
            (C21481 + C21480 - C21479 - C21482) * C50773 * C19891 +
            (C20396 * C49770 + C20397 * C51025 -
             (C117 * C3146 + C50911 * C3153) * C49763 -
             (C117 * C3152 + C50911 * C3158) * C50758) *
                C50773 * C19892) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C49770 +
              (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
              C172 * C50758) *
                 C17287 +
             (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                 C17288 +
             (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                 C17289) *
                C17290 +
            ((C2816 + C2817 - C2818 - C2819) * C17287 +
             (C2820 + C2821 - C2822 - C2823) * C17288 +
             (C8604 + C8605 - C8606 - C8607) * C17289) *
                C50949) *
               C1643 +
           (((C475 * C49763 -
              ((C117 * C441 + C50911 * C452) * C51025 +
               (C117 * C435 + C50911 * C442) * C49770) +
              C476 * C50758) *
                 C17287 +
             (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                 C17288 +
             (C479 * C49763 - (C478 * C51025 + C477 * C49770) + C480 * C50758) *
                 C17289) *
                C17290 +
            ((C4903 - (C4904 + C4905) + C4906) * C17287 +
             (C4907 - (C4908 + C4909) + C4910) * C17288 +
             (C10448 - (C10449 + C10450) + C10451) * C17289) *
                C50949) *
               C50853) *
              C1283 +
          ((((C2818 - (C2817 + C2816) + C2819) * C17287 +
             (C2822 - (C2821 + C2820) + C2823) * C17288 +
             (C8606 - (C8605 + C8604) + C8607) * C17289) *
                C17290 +
            ((C2826 - (C2825 + C2824) + C2827) * C17287 +
             (C2830 - (C2829 + C2828) + C2831) * C17288 +
             (C8608 - (C8609 + C8610) + C8611) * C17289) *
                C50949) *
               C1643 +
           (((C4905 + C4904 - C4903 - C4906) * C17287 +
             (C4909 + C4908 - C4907 - C4910) * C17288 +
             (C10450 + C10449 - C10448 - C10451) * C17289) *
                C17290 +
            ((C4913 + C4912 - C4911 - C4914) * C17287 +
             (C4917 + C4916 - C4915 - C4918) * C17288 +
             (C2656 * C49770 + C2657 * C51025 -
              (C117 * C815 + C50911 * C828) * C49763 -
              (C117 * C827 + C50911 * C839) * C50758) *
                 C17289) *
                C50949) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C49770 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C51025 -
             (C5351 + C5352 + C5353) * C49763 -
             (C5354 + C5355 + C5356) * C50758) *
                C50773 * C17290 +
            ((C21935 + C21936 + C21937) * C49770 +
             (C21938 + C21939 + C21940) * C51025 -
             (C5541 + C5540 + C5539) * C49763 -
             (C5544 + C5543 + C5542) * C50758) *
                C50773 * C50949) *
               C1643 +
           (((C5721 + C5722 + C5723) * C49763 -
             ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
               C5311 * C441 + C5308 * C452) *
                  C51025 +
              (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
               C5311 * C435 + C5308 * C442) *
                  C49770) +
             (C5724 + C5725 + C5726) * C50758) *
                C50773 * C17290 +
            ((C7081 + C7080 + C7079) * C49763 -
             ((C22537 + C22538 + C22539) * C51025 +
              (C22540 + C22541 + C22542) * C49770) +
             (C7084 + C7083 + C7082) * C50758) *
                C50773 * C50949) *
               C50853) *
              C1283 +
          ((((C5539 + C5540 + C5541) * C49763 -
             ((C21940 + C21939 + C21938) * C51025 +
              (C21937 + C21936 + C21935) * C49770) +
             (C5542 + C5543 + C5544) * C50758) *
                C50773 * C17290 +
            ((C5893 + C5892 + C5891) * C49763 -
             ((C22245 + C22246 + C22247) * C51025 +
              (C22248 + C22249 + C22250) * C49770) +
             (C5896 + C5895 + C5894) * C50758) *
                C50773 * C50949) *
               C1643 +
           (((C22542 + C22541 + C22540) * C49770 +
             (C22539 + C22538 + C22537) * C51025 -
             (C7079 + C7080 + C7081) * C49763 -
             (C7082 + C7083 + C7084) * C50758) *
                C50773 * C17290 +
            ((C22543 + C22544 + C22545) * C49770 +
             (C22546 + C22547 + C22548) * C51025 -
             (C5313 * C3643 + C5310 * C3648 + C5312 * C3348 + C5309 * C3352 +
              C5311 * C817 + C5308 * C832) *
                 C49763 -
             (C5313 * C3647 + C5310 * C3655 + C5312 * C3353 + C5309 * C3357 +
              C5311 * C831 + C5308 * C841) *
                 C50758) *
                C50773 * C50949) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C50773 * C19889 +
            (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
            C20281 * C19892) *
               C1643 -
           (C20395 * C19892 + C20390 * C19891 +
            (C3193 + C3194) * C50773 * C19890 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C50773 * C19889) *
               C50853) *
              C51086 +
          (((C3194 + C3193) * C50773 * C19889 +
            (C3192 + C3191) * C50773 * C19890 +
            (C3195 + C3196) * C50773 * C19891 +
            (C20398 + C20399) * C50773 * C19892) *
               C50853 -
           (C20282 * C19892 + C20276 * C19891 +
            (C2972 + C2971) * C50773 * C19890 +
            (C2968 + C2967) * C50773 * C19889) *
               C1643) *
              C51073 +
          ((C20273 * C19889 + C20281 * C19890 +
            (C2995 + C2996) * C50773 * C19891 +
            (C20285 + C20286) * C50773 * C19892) *
               C1643 -
           (((C117 * C20385 + C50911 * C20387) * C50753 +
             (C117 * C20384 + C50911 * C20386) * C696) *
                C50773 * C19892 +
            (C20399 + C20398) * C50773 * C19891 + C20395 * C19890 +
            C20390 * C19889) *
               C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C17287 +
             (C171 * C696 + C172 * C50753) * C17288 +
             (C173 * C696 + C174 * C50753) * C17289) *
                C17290 +
            ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
             (C8710 + C8711) * C17289) *
                C50949) *
               C1643 -
           (((C8862 + C8863) * C17289 + (C3167 + C3168) * C17288 +
             (C3193 + C3194) * C17287) *
                C50949 +
            ((C478 * C50753 + C477 * C696) * C17289 +
             (C476 * C50753 + C475 * C696) * C17288 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C17287) *
                C17290) *
               C50853) *
              C51086 +
          ((((C3194 + C3193) * C17287 + (C3168 + C3167) * C17288 +
             (C8863 + C8862) * C17289) *
                C17290 +
            ((C3192 + C3191) * C17287 + (C3162 + C3161) * C17288 +
             (C8864 + C8865) * C17289) *
                C50949) *
               C50853 -
           (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
             (C2972 + C2971) * C17287) *
                C50949 +
            ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
             (C2968 + C2967) * C17287) *
                C17290) *
               C1643) *
              C51073 +
          (((C2985 * C17287 + C2986 * C17288 + (C8713 + C8712) * C17289) *
                C17290 +
            ((C2978 + C2977) * C17287 + (C2976 + C2975) * C17288 +
             (C8714 + C8715) * C17289) *
                C50949) *
               C1643 -
           ((((C117 * C4204 + C50911 * C4205) * C50753 +
              (C117 * C4202 + C50911 * C4203) * C696) *
                 C17289 +
             (C3198 + C3197) * C17288 + (C3196 + C3195) * C17287) *
                C50949 +
            ((C8865 + C8864) * C17289 + C3181 * C17288 + C3199 * C17287) *
                C17290) *
               C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C696 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C50753) *
                C50773 * C17290 +
            ((C21935 + C21936 + C21937) * C696 +
             (C21938 + C21939 + C21940) * C50753) *
                C50773 * C50949) *
               C1643 -
           (((C22537 + C22538 + C22539) * C50753 +
             (C22540 + C22541 + C22542) * C696) *
                C50773 * C50949 +
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C50753 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C696) *
                C50773 * C17290) *
               C50853) *
              C51086 +
          ((((C22542 + C22541 + C22540) * C696 +
             (C22539 + C22538 + C22537) * C50753) *
                C50773 * C17290 +
            ((C22543 + C22544 + C22545) * C696 +
             (C22546 + C22547 + C22548) * C50753) *
                C50773 * C50949) *
               C50853 -
           (((C22245 + C22246 + C22247) * C50753 +
             (C22248 + C22249 + C22250) * C696) *
                C50773 * C50949 +
            ((C21940 + C21939 + C21938) * C50753 +
             (C21937 + C21936 + C21935) * C696) *
                C50773 * C17290) *
               C1643) *
              C51073 +
          ((((C22250 + C22249 + C22248) * C696 +
             (C22247 + C22246 + C22245) * C50753) *
                C50773 * C17290 +
            ((C22361 + C22362 + C22363) * C696 +
             (C22364 + C22365 + C22366) * C50753) *
                C50773 * C50949) *
               C1643 -
           (((C5313 * C20674 + C5310 * C20676 + C5312 * C3521 + C5309 * C3524 +
              C5311 * C3149 + C5308 * C3156) *
                 C50753 +
             (C5313 * C20673 + C5310 * C20675 + C5312 * C3518 + C5309 * C3522 +
              C5311 * C3144 + C5308 * C3148) *
                 C696) *
                C50773 * C50949 +
            ((C22548 + C22547 + C22546) * C50753 +
             (C22545 + C22544 + C22543) * C696) *
                C50773 * C17290) *
               C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50911 * C129) * C696 +
                      (C117 * C130 + C50911 * C143) * C50753) *
                         C50773 * C19889 +
                     (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
                     C20281 * C19892) *
                        C51087 -
                    (C20395 * C19892 + C20390 * C19891 +
                     (C3193 + C3194) * C50773 * C19890 +
                     ((C117 * C441 + C50911 * C452) * C50753 +
                      (C117 * C435 + C50911 * C442) * C696) *
                         C50773 * C19889) *
                        C51076 +
                    (((C117 * C944 + C50911 * C949) * C696 +
                      (C117 * C950 + C50911 * C959) * C50753) *
                         C50773 * C19889 +
                     (C3542 + C3543) * C50773 * C19890 +
                     (C3544 + C3545) * C50773 * C19891 +
                     (C20606 + C20607) * C50773 * C19892) *
                        C1875) *
                       C1283 +
                   (((C3194 + C3193) * C50773 * C19889 +
                     (C3192 + C3191) * C50773 * C19890 +
                     (C3195 + C3196) * C50773 * C19891 +
                     (C20398 + C20399) * C50773 * C19892) *
                        C51076 -
                    (C20282 * C19892 + C20276 * C19891 +
                     (C2972 + C2971) * C50773 * C19890 +
                     (C2968 + C2967) * C50773 * C19889) *
                        C51087 -
                    (((C117 * C20596 + C50911 * C20598) * C50753 +
                      (C117 * C20595 + C50911 * C20597) * C696) *
                         C50773 * C19892 +
                     (C20607 + C20606) * C50773 * C19891 +
                     (C3545 + C3544) * C50773 * C19890 +
                     (C3543 + C3542) * C50773 * C19889) *
                        C1875) *
                       C50829)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C117 * C122 + C50911 * C129) * C696 +
                       (C117 * C130 + C50911 * C143) * C50753) *
                          C17287 +
                      (C171 * C696 + C172 * C50753) * C17288 +
                      (C173 * C696 + C174 * C50753) * C17289) *
                         C17290 +
                     ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
                      (C8710 + C8711) * C17289) *
                         C50949) *
                        C51087 -
                    (((C8862 + C8863) * C17289 + (C3167 + C3168) * C17288 +
                      (C3193 + C3194) * C17287) *
                         C50949 +
                     ((C478 * C50753 + C477 * C696) * C17289 +
                      (C476 * C50753 + C475 * C696) * C17288 +
                      ((C117 * C441 + C50911 * C452) * C50753 +
                       (C117 * C435 + C50911 * C442) * C696) *
                          C17287) *
                         C17290) *
                        C51076 +
                    ((((C117 * C944 + C50911 * C949) * C696 +
                       (C117 * C950 + C50911 * C959) * C50753) *
                          C17287 +
                      (C977 * C696 + C978 * C50753) * C17288 +
                      (C979 * C696 + C980 * C50753) * C17289) *
                         C17290 +
                     ((C3542 + C3543) * C17287 + (C3530 + C3531) * C17288 +
                      (C9164 + C9165) * C17289) *
                         C50949) *
                        C1875) *
                       C1283 +
                   ((((C3194 + C3193) * C17287 + (C3168 + C3167) * C17288 +
                      (C8863 + C8862) * C17289) *
                         C17290 +
                     ((C3192 + C3191) * C17287 + (C3162 + C3161) * C17288 +
                      (C8864 + C8865) * C17289) *
                         C50949) *
                        C51076 -
                    (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
                      (C2972 + C2971) * C17287) *
                         C50949 +
                     ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
                      (C2968 + C2967) * C17287) *
                         C17290) *
                        C51087 -
                    ((((C117 * C3355 + C50911 * C3358) * C50753 +
                       (C117 * C3349 + C50911 * C3354) * C696) *
                          C17289 +
                      (C3537 + C3536) * C17288 + (C3545 + C3544) * C17287) *
                         C50949 +
                     ((C9165 + C9164) * C17289 + (C3531 + C3530) * C17288 +
                      (C3543 + C3542) * C17287) *
                         C17290) *
                        C1875) *
                       C50829)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C5311 * C122 + C5308 * C129 + C5312 * C435 +
                       C5309 * C442 + C5313 * C944 + C5310 * C949) *
                          C696 +
                      (C5311 * C130 + C5308 * C143 + C5312 * C441 +
                       C5309 * C452 + C5313 * C950 + C5310 * C959) *
                          C50753) *
                         C50773 * C17290 +
                     ((C21935 + C21936 + C21937) * C696 +
                      (C21938 + C21939 + C21940) * C50753) *
                         C50773 * C50949) *
                        C51087 -
                    (((C22537 + C22538 + C22539) * C50753 +
                      (C22540 + C22541 + C22542) * C696) *
                         C50773 * C50949 +
                     ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 +
                       C5309 * C959 + C5311 * C441 + C5308 * C452) *
                          C50753 +
                      (C5313 * C1169 + C5310 * C1177 + C5312 * C944 +
                       C5309 * C949 + C5311 * C435 + C5308 * C442) *
                          C696) *
                         C50773 * C17290) *
                        C51076 +
                    (((C5311 * C944 + C5308 * C949 + C5312 * C1169 +
                       C5309 * C1177 + C5313 * C6286 + C5310 * C6289) *
                          C696 +
                      (C5311 * C950 + C5308 * C959 + C5312 * C1176 +
                       C5309 * C1181 + C5313 * C6290 + C5310 * C6295) *
                          C50753) *
                         C50773 * C17290 +
                     ((C22857 + C22858 + C22859) * C696 +
                      (C22860 + C22861 + C22862) * C50753) *
                         C50773 * C50949) *
                        C1875) *
                       C1283 +
                   ((((C22542 + C22541 + C22540) * C696 +
                      (C22539 + C22538 + C22537) * C50753) *
                         C50773 * C17290 +
                     ((C22543 + C22544 + C22545) * C696 +
                      (C22546 + C22547 + C22548) * C50753) *
                         C50773 * C50949) *
                        C51076 -
                    (((C22245 + C22246 + C22247) * C50753 +
                      (C22248 + C22249 + C22250) * C696) *
                         C50773 * C50949 +
                     ((C21940 + C21939 + C21938) * C50753 +
                      (C21937 + C21936 + C21935) * C696) *
                         C50773 * C17290) *
                        C51087 -
                    (((C5313 * C22841 + C5310 * C22843 + C5312 * C3649 +
                       C5309 * C3656 + C5311 * C3351 + C5308 * C3356) *
                          C50753 +
                      (C5313 * C22840 + C5310 * C22842 + C5312 * C3644 +
                       C5309 * C3650 + C5311 * C3347 + C5308 * C3350) *
                          C696) *
                         C50773 * C50949 +
                     ((C22862 + C22861 + C22860) * C50753 +
                      (C22859 + C22858 + C22857) * C696) *
                         C50773 * C17290) *
                        C1875) *
                       C50829)) /
                     (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50911 * C129) * C118 +
                (C117 * C130 + C50911 * C143) * C106 - C171 * C119 -
                C172 * C107 + C173 * C120 + C174 * C108 - C175 * C121 -
                C176 * C109) *
                   C17287 +
               (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
                C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
                   C17288 +
               (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
                C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
                   C17289) *
                  C17290 +
              ((C2488 * C118 + C2489 * C106 - C327 * C119 - C328 * C107 +
                C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
                   C17287 +
               (C327 * C118 + C328 * C106 - C329 * C119 - C330 * C107 +
                C331 * C120 + C332 * C108 - C333 * C121 - C334 * C109) *
                   C17288 +
               (C329 * C118 + C330 * C106 - C331 * C119 - C332 * C107 +
                C333 * C120 + C334 * C108 -
                (C117 * C291 + C50911 * C302) * C121 -
                (C117 * C303 + C50911 * C309) * C109) *
                   C17289) *
                  C50949) *
             C50841 * C50815 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50911 * C129) * C49770 +
                 (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
                 C172 * C50758) *
                    C17287 +
                (C171 * C49770 + C172 * C51025 - C173 * C49763 -
                 C174 * C50758) *
                    C17288 +
                (C173 * C49770 + C174 * C51025 - C175 * C49763 -
                 C176 * C50758) *
                    C17289) *
                   C17290 +
               ((C2816 + C2817 - C2818 - C2819) * C17287 +
                (C2820 + C2821 - C2822 - C2823) * C17288 +
                (C8604 + C8605 - C8606 - C8607) * C17289) *
                   C50949) *
                  C50841 * C582 +
              (((C2818 - (C2817 + C2816) + C2819) * C17287 +
                (C2822 - (C2821 + C2820) + C2823) * C17288 +
                (C8606 - (C8605 + C8604) + C8607) * C17289) *
                   C17290 +
               ((C2826 - (C2825 + C2824) + C2827) * C17287 +
                (C2830 - (C2829 + C2828) + C2831) * C17288 +
                (C8608 - (C8609 + C8610) + C8611) * C17289) *
                   C50949) *
                  C50841 * C583 +
              ((C2856 * C17287 + C2857 * C17288 +
                (C8610 + C8609 - C8608 - C8611) * C17289) *
                   C17290 +
               ((C2855 + C2854 - C2832 - C2837) * C17287 +
                (C2840 + C2839 - C2838 - C2841) * C17288 +
                (C2494 * C49770 + C2495 * C51025 -
                 (C117 * C697 + C50911 * C702) * C49763 -
                 (C117 * C701 + C50911 * C709) * C50758) *
                    C17289) *
                   C50949) *
                  C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C17287 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C17288 +
            (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                C17289) *
               C17290 +
           ((C2816 + C2817 - C2818 - C2819) * C17287 +
            (C2820 + C2821 - C2822 - C2823) * C17288 +
            (C8604 + C8605 - C8606 - C8607) * C17289) *
               C50949) *
              C941 +
          (((C475 * C49763 -
             ((C117 * C441 + C50911 * C452) * C51025 +
              (C117 * C435 + C50911 * C442) * C49770) +
             C476 * C50758) *
                C17287 +
            (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                C17288 +
            (C479 * C49763 - (C478 * C51025 + C477 * C49770) + C480 * C50758) *
                C17289) *
               C17290 +
           ((C4903 - (C4904 + C4905) + C4906) * C17287 +
            (C4907 - (C4908 + C4909) + C4910) * C17288 +
            (C10448 - (C10449 + C10450) + C10451) * C17289) *
               C50949) *
              C942 +
          ((((C117 * C944 + C50911 * C949) * C49770 +
             (C117 * C950 + C50911 * C959) * C51025 - C977 * C49763 -
             C978 * C50758) *
                C17287 +
            (C977 * C49770 + C978 * C51025 - C979 * C49763 - C980 * C50758) *
                C17288 +
            (C979 * C49770 + C980 * C51025 - C981 * C49763 - C982 * C50758) *
                C17289) *
               C17290 +
           ((C3538 * C49770 + C3539 * C51025 - C3368 * C49763 -
             C3369 * C50758) *
                C17287 +
            (C3368 * C49770 + C3369 * C51025 - C9016 * C49763 -
             C9017 * C50758) *
                C17288 +
            (C9016 * C49770 + C9017 * C51025 -
             (C117 * C1080 + C50911 * C1085) * C49763 -
             (C117 * C1084 + C50911 * C1092) * C50758) *
                C17289) *
               C50949) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50911 * C129) * C118 +
           (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50773 * C19889 +
          (C2488 * C118 + C2489 * C106 - C327 * C119 - C328 * C107 +
           C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
              C50773 * C19890 +
          (C2490 * C118 + C2491 * C106 - C620 * C119 - C621 * C107 +
           C622 * C120 + C623 * C108 - C624 * C121 - C625 * C109) *
              C50773 * C19891 +
          (C2849 * C118 + C2848 * C106 - C2492 * C119 - C2493 * C107 +
           C2494 * C120 + C2495 * C108 - (C117 * C697 + C50911 * C702) * C121 -
           (C117 * C701 + C50911 * C709) * C109) *
              C50773 * C19892) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C49770 +
            (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
            C172 * C50758) *
               C50773 * C19889 +
           (C2816 + C2817 - C2818 - C2819) * C50773 * C19890 + C20194 * C19891 +
           C20202 * C19892) *
              C50841 * C582 +
          ((C2818 - (C2817 + C2816) + C2819) * C50773 * C19889 +
           (C2826 - (C2825 + C2824) + C2827) * C50773 * C19890 +
           (C2832 - (C2854 + C2855) + C2837) * C50773 * C19891 +
           (C20196 - (C20197 + C20198) + C20199) * C50773 * C19892) *
              C50841 * C583 +
          (C20194 * C19889 + C20202 * C19890 +
           (C20198 + C20197 - C20196 - C20199) * C50773 * C19891 +
           ((C117 * C2959 + C50911 * C2963) * C49770 +
            (C117 * C2962 + C50911 * C2965) * C51025 -
            (C117 * C2958 + C50911 * C2961) * C49763 -
            (C117 * C2960 + C50911 * C2964) * C50758) *
               C50773 * C19892) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C49770 +
            (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
            C172 * C50758) *
               C50773 * C19889 +
           (C2816 + C2817 - C2818 - C2819) * C50773 * C19890 + C20194 * C19891 +
           C20202 * C19892) *
              C941 +
          ((C475 * C49763 -
            ((C117 * C441 + C50911 * C452) * C51025 +
             (C117 * C435 + C50911 * C442) * C49770) +
            C476 * C50758) *
               C50773 * C19889 +
           (C4903 - (C4904 + C4905) + C4906) * C50773 * C19890 +
           (C4911 - (C4912 + C4913) + C4914) * C50773 * C19891 +
           (C3188 * C49763 - (C3187 * C51025 + C3186 * C49770) +
            C3189 * C50758) *
               C50773 * C19892) *
              C942 +
          (((C117 * C944 + C50911 * C949) * C49770 +
            (C117 * C950 + C50911 * C959) * C51025 - C977 * C49763 -
            C978 * C50758) *
               C50773 * C19889 +
           (C3538 * C49770 + C3539 * C51025 - C3368 * C49763 - C3369 * C50758) *
               C50773 * C19890 +
           (C3540 * C49770 + C3541 * C51025 - C3370 * C49763 - C3371 * C50758) *
               C50773 * C19891 +
           ((C117 * C3518 + C50911 * C3522) * C49770 +
            (C117 * C3521 + C50911 * C3524) * C51025 -
            (C117 * C3517 + C50911 * C3520) * C49763 -
            (C117 * C3519 + C50911 * C3523) * C50758) *
               C50773 * C19892) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
            C5313 * C944 + C5310 * C949) *
               C118 +
           (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
            C5313 * C950 + C5310 * C959) *
               C106 -
           (C5351 + C5352 + C5353) * C119 - (C5354 + C5355 + C5356) * C107 +
           (C5357 + C5358 + C5359) * C120 + (C5360 + C5361 + C5362) * C108 -
           (C5363 + C5364 + C5365) * C121 - (C5366 + C5367 + C5368) * C109) *
              C50773 * C17290 +
          ((C5311 * C287 + C5308 * C294 + C5312 * C811 + C5309 * C819 +
            C5313 * C1083 + C5310 * C1091) *
               C118 +
           (C5311 * C293 + C5308 * C304 + C5312 * C820 + C5309 * C835 +
            C5313 * C1090 + C5310 * C1095) *
               C106 -
           (C5541 + C5540 + C5539) * C119 - (C5544 + C5543 + C5542) * C107 +
           (C5547 + C5546 + C5545) * C120 + (C5550 + C5549 + C5548) * C108 -
           (C5313 * C1080 + C5310 * C1085 + C5312 * C814 + C5309 * C825 +
            C5311 * C289 + C5308 * C298) *
               C121 -
           (C5313 * C1084 + C5310 * C1092 + C5312 * C826 + C5309 * C838 +
            C5311 * C299 + C5308 * C307) *
               C109) *
              C50773 * C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C49770 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C51025 -
            (C5351 + C5352 + C5353) * C49763 -
            (C5354 + C5355 + C5356) * C50758) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C49770 +
            (C21938 + C21939 + C21940) * C51025 -
            (C5541 + C5540 + C5539) * C49763 -
            (C5544 + C5543 + C5542) * C50758) *
               C50773 * C50949) *
              C50841 * C582 +
          (((C5539 + C5540 + C5541) * C49763 -
            ((C21940 + C21939 + C21938) * C51025 +
             (C21937 + C21936 + C21935) * C49770) +
            (C5542 + C5543 + C5544) * C50758) *
               C50773 * C17290 +
           ((C5893 + C5892 + C5891) * C49763 -
            ((C22245 + C22246 + C22247) * C51025 +
             (C22248 + C22249 + C22250) * C49770) +
            (C5896 + C5895 + C5894) * C50758) *
               C50773 * C50949) *
              C50841 * C583 +
          (((C22250 + C22249 + C22248) * C49770 +
            (C22247 + C22246 + C22245) * C51025 -
            (C5891 + C5892 + C5893) * C49763 -
            (C5894 + C5895 + C5896) * C50758) *
               C50773 * C17290 +
           ((C5311 * C700 + C5308 * C708 + C5312 * C3144 + C5309 * C3148 +
             C5313 * C3518 + C5310 * C3522) *
                C49770 +
            (C5311 * C707 + C5308 * C712 + C5312 * C3149 + C5309 * C3156 +
             C5313 * C3521 + C5310 * C3524) *
                C51025 -
            (C5313 * C3517 + C5310 * C3520 + C5312 * C3145 + C5309 * C3150 +
             C5311 * C699 + C5308 * C706) *
                C49763 -
            (C5313 * C3519 + C5310 * C3523 + C5312 * C3151 + C5309 * C3157 +
             C5311 * C705 + C5308 * C711) *
                C50758) *
               C50773 * C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C49770 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C51025 -
            (C5351 + C5352 + C5353) * C49763 -
            (C5354 + C5355 + C5356) * C50758) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C49770 +
            (C21938 + C21939 + C21940) * C51025 -
            (C5541 + C5540 + C5539) * C49763 -
            (C5544 + C5543 + C5542) * C50758) *
               C50773 * C50949) *
              C941 +
          (((C5721 + C5722 + C5723) * C49763 -
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C51025 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C49770) +
            (C5724 + C5725 + C5726) * C50758) *
               C50773 * C17290 +
           ((C7081 + C7080 + C7079) * C49763 -
            ((C22537 + C22538 + C22539) * C51025 +
             (C22540 + C22541 + C22542) * C49770) +
            (C7084 + C7083 + C7082) * C50758) *
               C50773 * C50949) *
              C942 +
          (((C5311 * C944 + C5308 * C949 + C5312 * C1169 + C5309 * C1177 +
             C5313 * C6286 + C5310 * C6289) *
                C49770 +
            (C5311 * C950 + C5308 * C959 + C5312 * C1176 + C5309 * C1181 +
             C5313 * C6290 + C5310 * C6295) *
                C51025 -
            (C6311 + C6312 + C6313) * C49763 -
            (C6314 + C6315 + C6316) * C50758) *
               C50773 * C17290 +
           ((C5311 * C1083 + C5308 * C1091 + C5312 * C3646 + C5309 * C3654 +
             C5313 * C6463 + C5310 * C6467) *
                C49770 +
            (C5311 * C1090 + C5308 * C1095 + C5312 * C3653 + C5309 * C3658 +
             C5313 * C6466 + C5310 * C6469) *
                C51025 -
            (C5313 * C6462 + C5310 * C6465 + C5312 * C3645 + C5309 * C3652 +
             C5311 * C1082 + C5308 * C1089) *
                C49763 -
            (C5313 * C6464 + C5310 * C6468 + C5312 * C3651 + C5309 * C3657 +
             C5311 * C1088 + C5308 * C1094) *
                C50758) *
               C50773 * C50949) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50911 * C129) * C283 +
                 (C117 * C130 + C50911 * C143) * C278 - C171 * C284 -
                 C172 * C279 + C173 * C285 + C174 * C280) *
                    C17287 +
                (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                 C175 * C285 + C176 * C280) *
                    C17288 +
                (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                 C177 * C285 + C178 * C280) *
                    C17289) *
                   C17290 +
               ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C17287 +
                (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C17288 +
                (C8306 + C8307 - C8308 - C8309 + C8310 + C8311) * C17289) *
                   C50949) *
                  C50841 * C51040 +
              (((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C17287 +
                (C2462 - (C2461 + C2460) + C2463 - C2464 - C2465) * C17288 +
                (C8308 - (C8307 + C8306) + C8309 - C8310 - C8311) * C17289) *
                   C17290 +
               ((C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C17287 +
                (C2476 - (C2475 + C2474) + C2477 - C2478 - C2479) * C17288 +
                (C624 * C284 - (C623 * C278 + C622 * C283) + C625 * C279 -
                 (C117 * C591 + C50911 * C600) * C285 -
                 (C117 * C601 + C50911 * C606) * C280) *
                    C17289) *
                   C50949) *
                  C50841 * C50829) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50911 * C129) * C696 +
                 (C117 * C130 + C50911 * C143) * C50753) *
                    C17287 +
                (C171 * C696 + C172 * C50753) * C17288 +
                (C173 * C696 + C174 * C50753) * C17289) *
                   C17290 +
               ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
                (C8710 + C8711) * C17289) *
                   C50949) *
                  C50841 * C692 -
              (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
                (C2972 + C2971) * C17287) *
                   C50949 +
               ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
                (C2968 + C2967) * C17287) *
                   C17290) *
                  C50841 * C693 +
              ((C2985 * C17287 + C2986 * C17288 + (C8713 + C8712) * C17289) *
                   C17290 +
               ((C2978 + C2977) * C17287 + (C2976 + C2975) * C17288 +
                (C8714 + C8715) * C17289) *
                   C50949) *
                  C50841 * C694 -
              ((((C117 * C2811 + C50911 * C2814) * C50753 +
                 (C117 * C2805 + C50911 * C2810) * C696) *
                    C17289 +
                (C2984 + C2983) * C17288 + (C2996 + C2995) * C17287) *
                   C50949 +
               ((C8715 + C8714) * C17289 + C2987 * C17288 + C2988 * C17287) *
                   C17290) *
                  C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C17287 +
             (C171 * C696 + C172 * C50753) * C17288 +
             (C173 * C696 + C174 * C50753) * C17289) *
                C17290 +
            ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
             (C8710 + C8711) * C17289) *
                C50949) *
               C941 -
           (((C8862 + C8863) * C17289 + (C3167 + C3168) * C17288 +
             (C3193 + C3194) * C17287) *
                C50949 +
            ((C478 * C50753 + C477 * C696) * C17289 +
             (C476 * C50753 + C475 * C696) * C17288 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C17287) *
                C17290) *
               C942 +
           ((((C117 * C944 + C50911 * C949) * C696 +
              (C117 * C950 + C50911 * C959) * C50753) *
                 C17287 +
             (C977 * C696 + C978 * C50753) * C17288 +
             (C979 * C696 + C980 * C50753) * C17289) *
                C17290 +
            ((C3542 + C3543) * C17287 + (C3530 + C3531) * C17288 +
             (C9164 + C9165) * C17289) *
                C50949) *
               C943) *
              C51040 +
          ((((C3194 + C3193) * C17287 + (C3168 + C3167) * C17288 +
             (C8863 + C8862) * C17289) *
                C17290 +
            ((C3192 + C3191) * C17287 + (C3162 + C3161) * C17288 +
             (C8864 + C8865) * C17289) *
                C50949) *
               C942 -
           (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
             (C2972 + C2971) * C17287) *
                C50949 +
            ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
             (C2968 + C2967) * C17287) *
                C17290) *
               C941 -
           ((((C117 * C3355 + C50911 * C3358) * C50753 +
              (C117 * C3349 + C50911 * C3354) * C696) *
                 C17289 +
             (C3537 + C3536) * C17288 + (C3545 + C3544) * C17287) *
                C50949 +
            ((C9165 + C9164) * C17289 + (C3531 + C3530) * C17288 +
             (C3543 + C3542) * C17287) *
                C17290) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50773 * C19889 +
           (C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C50773 * C19890 +
           (C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C50773 * C19891 +
           (C19992 + C19993 - C19994 - C19995 + C19996 + C19997) * C50773 *
               C19892) *
              C50841 * C51040 +
          ((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C50773 * C19889 +
           (C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C50773 * C19890 +
           (C19994 - (C19993 + C19992) + C19995 - C19996 - C19997) * C50773 *
               C19891 +
           (C2850 * C284 - (C2990 * C278 + C2989 * C283) + C2851 * C279 -
            (C117 * C2805 + C50911 * C2810) * C285 -
            (C117 * C2811 + C50911 * C2814) * C280) *
               C50773 * C19892) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C696 +
            (C117 * C130 + C50911 * C143) * C50753) *
               C50773 * C19889 +
           (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
           C20281 * C19892) *
              C50841 * C692 -
          (C20282 * C19892 + C20276 * C19891 +
           (C2972 + C2971) * C50773 * C19890 +
           (C2968 + C2967) * C50773 * C19889) *
              C50841 * C693 +
          (C20273 * C19889 + C20281 * C19890 +
           (C2995 + C2996) * C50773 * C19891 +
           (C20285 + C20286) * C50773 * C19892) *
              C50841 * C694 -
          (((C117 * C20269 + C50911 * C20271) * C50753 +
            (C117 * C20268 + C50911 * C20270) * C696) *
               C50773 * C19892 +
           (C20286 + C20285) * C50773 * C19891 + C20282 * C19890 +
           C20276 * C19889) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C117 * C122 + C50911 * C129) * C696 +
                                 (C117 * C130 + C50911 * C143) * C50753) *
                                    C50773 * C19889 +
                                (C2967 + C2968) * C50773 * C19890 +
                                C20273 * C19891 + C20281 * C19892) *
                                   C941 -
                               (C20395 * C19892 + C20390 * C19891 +
                                (C3193 + C3194) * C50773 * C19890 +
                                ((C117 * C441 + C50911 * C452) * C50753 +
                                 (C117 * C435 + C50911 * C442) * C696) *
                                    C50773 * C19889) *
                                   C942 +
                               (((C117 * C944 + C50911 * C949) * C696 +
                                 (C117 * C950 + C50911 * C959) * C50753) *
                                    C50773 * C19889 +
                                (C3542 + C3543) * C50773 * C19890 +
                                (C3544 + C3545) * C50773 * C19891 +
                                (C20606 + C20607) * C50773 * C19892) *
                                   C943) *
                                  C51040 +
                              (((C3194 + C3193) * C50773 * C19889 +
                                (C3192 + C3191) * C50773 * C19890 +
                                (C3195 + C3196) * C50773 * C19891 +
                                (C20398 + C20399) * C50773 * C19892) *
                                   C942 -
                               (C20282 * C19892 + C20276 * C19891 +
                                (C2972 + C2971) * C50773 * C19890 +
                                (C2968 + C2967) * C50773 * C19889) *
                                   C941 -
                               (((C117 * C20596 + C50911 * C20598) * C50753 +
                                 (C117 * C20595 + C50911 * C20597) * C696) *
                                    C50773 * C19892 +
                                (C20607 + C20606) * C50773 * C19891 +
                                (C3545 + C3544) * C50773 * C19890 +
                                (C3543 + C3542) * C50773 * C19889) *
                                   C943) *
                                  C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C279 +
            (C5357 + C5358 + C5359) * C285 + (C5360 + C5361 + C5362) * C280) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C283 +
            (C21938 + C21939 + C21940) * C278 - (C5541 + C5540 + C5539) * C284 -
            (C5544 + C5543 + C5542) * C279 + (C5547 + C5546 + C5545) * C285 +
            (C5550 + C5549 + C5548) * C280) *
               C50773 * C50949) *
              C50841 * C51040 +
          (((C5539 + C5540 + C5541) * C284 -
            ((C21940 + C21939 + C21938) * C278 +
             (C21937 + C21936 + C21935) * C283) +
            (C5542 + C5543 + C5544) * C279 - (C5545 + C5546 + C5547) * C285 -
            (C5548 + C5549 + C5550) * C280) *
               C50773 * C17290 +
           ((C5893 + C5892 + C5891) * C284 -
            ((C5313 * C3351 + C5310 * C3356 + C5312 * C833 + C5309 * C842 +
              C5311 * C593 + C5308 * C602) *
                 C278 +
             (C5313 * C3347 + C5310 * C3350 + C5312 * C818 + C5309 * C834 +
              C5311 * C587 + C5308 * C592) *
                 C283) +
            (C5896 + C5895 + C5894) * C279 -
            (C5313 * C3349 + C5310 * C3354 + C5312 * C816 + C5309 * C830 +
             C5311 * C589 + C5308 * C596) *
                C285 -
            (C5313 * C3355 + C5310 * C3358 + C5312 * C829 + C5309 * C840 +
             C5311 * C597 + C5308 * C604) *
                C280) *
               C50773 * C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C696 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C50753) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C696 +
            (C21938 + C21939 + C21940) * C50753) *
               C50773 * C50949) *
              C50841 * C692 -
          (((C22245 + C22246 + C22247) * C50753 +
            (C22248 + C22249 + C22250) * C696) *
               C50773 * C50949 +
           ((C21940 + C21939 + C21938) * C50753 +
            (C21937 + C21936 + C21935) * C696) *
               C50773 * C17290) *
              C50841 * C693 +
          (((C22250 + C22249 + C22248) * C696 +
            (C22247 + C22246 + C22245) * C50753) *
               C50773 * C17290 +
           ((C22361 + C22362 + C22363) * C696 +
            (C22364 + C22365 + C22366) * C50753) *
               C50773 * C50949) *
              C50841 * C694 -
          (((C5313 * C20596 + C5310 * C20598 + C5312 * C3154 + C5309 * C3159 +
             C5311 * C2807 + C5308 * C2812) *
                C50753 +
            (C5313 * C20595 + C5310 * C20597 + C5312 * C3147 + C5309 * C3155 +
             C5311 * C2803 + C5308 * C2806) *
                C696) *
               C50773 * C50949 +
           ((C22366 + C22365 + C22364) * C50753 +
            (C22363 + C22362 + C22361) * C696) *
               C50773 * C17290) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C696 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C50753) *
                C50773 * C17290 +
            ((C21935 + C21936 + C21937) * C696 +
             (C21938 + C21939 + C21940) * C50753) *
                C50773 * C50949) *
               C941 -
           (((C22537 + C22538 + C22539) * C50753 +
             (C22540 + C22541 + C22542) * C696) *
                C50773 * C50949 +
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C50753 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C696) *
                C50773 * C17290) *
               C942 +
           (((C5311 * C944 + C5308 * C949 + C5312 * C1169 + C5309 * C1177 +
              C5313 * C6286 + C5310 * C6289) *
                 C696 +
             (C5311 * C950 + C5308 * C959 + C5312 * C1176 + C5309 * C1181 +
              C5313 * C6290 + C5310 * C6295) *
                 C50753) *
                C50773 * C17290 +
            ((C22857 + C22858 + C22859) * C696 +
             (C22860 + C22861 + C22862) * C50753) *
                C50773 * C50949) *
               C943) *
              C51040 +
          ((((C22542 + C22541 + C22540) * C696 +
             (C22539 + C22538 + C22537) * C50753) *
                C50773 * C17290 +
            ((C22543 + C22544 + C22545) * C696 +
             (C22546 + C22547 + C22548) * C50753) *
                C50773 * C50949) *
               C942 -
           (((C22245 + C22246 + C22247) * C50753 +
             (C22248 + C22249 + C22250) * C696) *
                C50773 * C50949 +
            ((C21940 + C21939 + C21938) * C50753 +
             (C21937 + C21936 + C21935) * C696) *
                C50773 * C17290) *
               C941 -
           (((C5313 * C22841 + C5310 * C22843 + C5312 * C3649 + C5309 * C3656 +
              C5311 * C3351 + C5308 * C3356) *
                 C50753 +
             (C5313 * C22840 + C5310 * C22842 + C5312 * C3644 + C5309 * C3650 +
              C5311 * C3347 + C5308 * C3350) *
                 C696) *
                C50773 * C50949 +
            ((C22862 + C22861 + C22860) * C50753 +
             (C22859 + C22858 + C22857) * C696) *
                C50773 * C17290) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50911 * C129) * C283 +
                 (C117 * C130 + C50911 * C143) * C278 - C171 * C284 -
                 C172 * C279 + C173 * C285 + C174 * C280) *
                    C17287 +
                (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                 C175 * C285 + C176 * C280) *
                    C17288 +
                (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                 C177 * C285 + C178 * C280) *
                    C17289) *
                   C17290 +
               ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C17287 +
                (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C17288 +
                (C8306 + C8307 - C8308 - C8309 + C8310 + C8311) * C17289) *
                   C50949) *
                  C51041 +
              (((C475 * C284 -
                 ((C117 * C441 + C50911 * C452) * C278 +
                  (C117 * C435 + C50911 * C442) * C283) +
                 C476 * C279 - C477 * C285 - C478 * C280) *
                    C17287 +
                (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
                 C479 * C285 - C480 * C280) *
                    C17288 +
                (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
                 C481 * C285 - C482 * C280) *
                    C17289) *
                   C17290 +
               ((C1540 * C284 - (C3184 * C278 + C3185 * C283) + C1541 * C279 -
                 C1542 * C285 - C1543 * C280) *
                    C17287 +
                (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
                 C1544 * C285 - C1545 * C280) *
                    C17288 +
                (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
                 (C117 * C1523 + C50911 * C1524) * C285 -
                 (C117 * C1525 + C50911 * C1526) * C280) *
                    C17289) *
                   C50949) *
                  C50853) *
             C50815 +
         0.5 * std::pow(Pi, 2.5) *
             ((((((C117 * C122 + C50911 * C129) * C696 +
                  (C117 * C130 + C50911 * C143) * C50753) *
                     C17287 +
                 (C171 * C696 + C172 * C50753) * C17288 +
                 (C173 * C696 + C174 * C50753) * C17289) *
                    C17290 +
                ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
                 (C8710 + C8711) * C17289) *
                    C50949) *
                   C51041 -
               (((C8862 + C8863) * C17289 + (C3167 + C3168) * C17288 +
                 (C3193 + C3194) * C17287) *
                    C50949 +
                ((C478 * C50753 + C477 * C696) * C17289 +
                 (C476 * C50753 + C475 * C696) * C17288 +
                 ((C117 * C441 + C50911 * C452) * C50753 +
                  (C117 * C435 + C50911 * C442) * C696) *
                     C17287) *
                    C17290) *
                   C50853) *
                  C582 +
              ((((C3194 + C3193) * C17287 + (C3168 + C3167) * C17288 +
                 (C8863 + C8862) * C17289) *
                    C17290 +
                ((C3192 + C3191) * C17287 + (C3162 + C3161) * C17288 +
                 (C8864 + C8865) * C17289) *
                    C50949) *
                   C50853 -
               (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
                 (C2972 + C2971) * C17287) *
                    C50949 +
                ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
                 (C2968 + C2967) * C17287) *
                    C17290) *
                   C51041) *
                  C583 +
              (((C2985 * C17287 + C2986 * C17288 + (C8713 + C8712) * C17289) *
                    C17290 +
                ((C2978 + C2977) * C17287 + (C2976 + C2975) * C17288 +
                 (C8714 + C8715) * C17289) *
                    C50949) *
                   C51041 -
               ((((C117 * C4204 + C50911 * C4205) * C50753 +
                  (C117 * C4202 + C50911 * C4203) * C696) *
                     C17289 +
                 (C3198 + C3197) * C17288 + (C3196 + C3195) * C17287) *
                    C50949 +
                ((C8865 + C8864) * C17289 + C3181 * C17288 + C3199 * C17287) *
                    C17290) *
                   C50853) *
                  C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C17287 +
            (C171 * C696 + C172 * C50753) * C17288 +
            (C173 * C696 + C174 * C50753) * C17289) *
               C17290 +
           ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
            (C8710 + C8711) * C17289) *
               C50949) *
              C1162 -
          (((C8862 + C8863) * C17289 + (C3167 + C3168) * C17288 +
            (C3193 + C3194) * C17287) *
               C50949 +
           ((C478 * C50753 + C477 * C696) * C17289 +
            (C476 * C50753 + C475 * C696) * C17288 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C17287) *
               C17290) *
              C1163 +
          ((((C117 * C944 + C50911 * C949) * C696 +
             (C117 * C950 + C50911 * C959) * C50753) *
                C17287 +
            (C977 * C696 + C978 * C50753) * C17288 +
            (C979 * C696 + C980 * C50753) * C17289) *
               C17290 +
           ((C3542 + C3543) * C17287 + (C3530 + C3531) * C17288 +
            (C9164 + C9165) * C17289) *
               C50949) *
              C1164 -
          ((((C117 * C7064 + C50911 * C7065) * C50753 +
             (C117 * C7062 + C50911 * C7063) * C696) *
                C17289 +
            ((C117 * C3651 + C50911 * C3657) * C50753 +
             (C117 * C3645 + C50911 * C3652) * C696) *
                C17288 +
            ((C117 * C3653 + C50911 * C3658) * C50753 +
             (C117 * C3646 + C50911 * C3654) * C696) *
                C17287) *
               C50949 +
           (((C117 * C1172 + C50911 * C1179) * C50753 +
             (C117 * C1167 + C50911 * C1173) * C696) *
                C17289 +
            ((C117 * C1174 + C50911 * C1180) * C50753 +
             (C117 * C1168 + C50911 * C1175) * C696) *
                C17288 +
            ((C117 * C1176 + C50911 * C1181) * C50753 +
             (C117 * C1169 + C50911 * C1177) * C696) *
                C17287) *
               C17290) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50773 * C19889 +
           (C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C50773 * C19890 +
           (C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C50773 * C19891 +
           (C19992 + C19993 - C19994 - C19995 + C19996 + C19997) * C50773 *
               C19892) *
              C51041 +
          ((C475 * C284 -
            ((C117 * C441 + C50911 * C452) * C278 +
             (C117 * C435 + C50911 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C50773 * C19889 +
           (C1540 * C284 - (C3184 * C278 + C3185 * C283) + C1541 * C279 -
            C1542 * C285 - C1543 * C280) *
               C50773 * C19890 +
           (C2654 * C284 - (C3182 * C278 + C3183 * C283) + C2655 * C279 -
            C2656 * C285 - C2657 * C280) *
               C50773 * C19891 +
           (C3188 * C284 - (C3187 * C278 + C3186 * C283) + C3189 * C279 -
            (C117 * C4202 + C50911 * C4203) * C285 -
            (C117 * C4204 + C50911 * C4205) * C280) *
               C50773 * C19892) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C50773 * C19889 +
            (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
            C20281 * C19892) *
               C51041 -
           (C20395 * C19892 + C20390 * C19891 +
            (C3193 + C3194) * C50773 * C19890 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C50773 * C19889) *
               C50853) *
              C582 +
          (((C3194 + C3193) * C50773 * C19889 +
            (C3192 + C3191) * C50773 * C19890 +
            (C3195 + C3196) * C50773 * C19891 +
            (C20398 + C20399) * C50773 * C19892) *
               C50853 -
           (C20282 * C19892 + C20276 * C19891 +
            (C2972 + C2971) * C50773 * C19890 +
            (C2968 + C2967) * C50773 * C19889) *
               C51041) *
              C583 +
          ((C20273 * C19889 + C20281 * C19890 +
            (C2995 + C2996) * C50773 * C19891 +
            (C20285 + C20286) * C50773 * C19892) *
               C51041 -
           (((C117 * C20385 + C50911 * C20387) * C50753 +
             (C117 * C20384 + C50911 * C20386) * C696) *
                C50773 * C19892 +
            (C20399 + C20398) * C50773 * C19891 + C20395 * C19890 +
            C20390 * C19889) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C696 +
            (C117 * C130 + C50911 * C143) * C50753) *
               C50773 * C19889 +
           (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
           C20281 * C19892) *
              C1162 -
          (C20395 * C19892 + C20390 * C19891 +
           (C3193 + C3194) * C50773 * C19890 +
           ((C117 * C441 + C50911 * C452) * C50753 +
            (C117 * C435 + C50911 * C442) * C696) *
               C50773 * C19889) *
              C1163 +
          (((C117 * C944 + C50911 * C949) * C696 +
            (C117 * C950 + C50911 * C959) * C50753) *
               C50773 * C19889 +
           (C3542 + C3543) * C50773 * C19890 +
           (C3544 + C3545) * C50773 * C19891 +
           (C20606 + C20607) * C50773 * C19892) *
              C1164 -
          (((C117 * C20674 + C50911 * C20676) * C50753 +
            (C117 * C20673 + C50911 * C20675) * C696) *
               C50773 * C19892 +
           ((C117 * C3649 + C50911 * C3656) * C50753 +
            (C117 * C3644 + C50911 * C3650) * C696) *
               C50773 * C19891 +
           ((C117 * C3653 + C50911 * C3658) * C50753 +
            (C117 * C3646 + C50911 * C3654) * C696) *
               C50773 * C19890 +
           ((C117 * C1176 + C50911 * C1181) * C50753 +
            (C117 * C1169 + C50911 * C1177) * C696) *
               C50773 * C19889) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C279 +
            (C5357 + C5358 + C5359) * C285 + (C5360 + C5361 + C5362) * C280) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C283 +
            (C21938 + C21939 + C21940) * C278 - (C5541 + C5540 + C5539) * C284 -
            (C5544 + C5543 + C5542) * C279 + (C5547 + C5546 + C5545) * C285 +
            (C5550 + C5549 + C5548) * C280) *
               C50773 * C50949) *
              C51041 +
          (((C5721 + C5722 + C5723) * C284 -
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C278 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C283) +
            (C5724 + C5725 + C5726) * C279 - (C5727 + C5728 + C5729) * C285 -
            (C5730 + C5731 + C5732) * C280) *
               C50773 * C17290 +
           ((C7081 + C7080 + C7079) * C284 -
            ((C5313 * C3653 + C5310 * C3658 + C5312 * C1090 + C5309 * C1095 +
              C5311 * C820 + C5308 * C835) *
                 C278 +
             (C5313 * C3646 + C5310 * C3654 + C5312 * C1083 + C5309 * C1091 +
              C5311 * C811 + C5308 * C819) *
                 C283) +
            (C7084 + C7083 + C7082) * C279 -
            (C5313 * C7062 + C5310 * C7063 + C5312 * C1081 + C5309 * C1087 +
             C5311 * C813 + C5308 * C823) *
                C285 -
            (C5313 * C7064 + C5310 * C7065 + C5312 * C1086 + C5309 * C1093 +
             C5311 * C824 + C5308 * C837) *
                C280) *
               C50773 * C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C696 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C50753) *
                C50773 * C17290 +
            ((C21935 + C21936 + C21937) * C696 +
             (C21938 + C21939 + C21940) * C50753) *
                C50773 * C50949) *
               C51041 -
           (((C22537 + C22538 + C22539) * C50753 +
             (C22540 + C22541 + C22542) * C696) *
                C50773 * C50949 +
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C50753 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C696) *
                C50773 * C17290) *
               C50853) *
              C582 +
          ((((C22542 + C22541 + C22540) * C696 +
             (C22539 + C22538 + C22537) * C50753) *
                C50773 * C17290 +
            ((C22543 + C22544 + C22545) * C696 +
             (C22546 + C22547 + C22548) * C50753) *
                C50773 * C50949) *
               C50853 -
           (((C22245 + C22246 + C22247) * C50753 +
             (C22248 + C22249 + C22250) * C696) *
                C50773 * C50949 +
            ((C21940 + C21939 + C21938) * C50753 +
             (C21937 + C21936 + C21935) * C696) *
                C50773 * C17290) *
               C51041) *
              C583 +
          ((((C22250 + C22249 + C22248) * C696 +
             (C22247 + C22246 + C22245) * C50753) *
                C50773 * C17290 +
            ((C22361 + C22362 + C22363) * C696 +
             (C22364 + C22365 + C22366) * C50753) *
                C50773 * C50949) *
               C51041 -
           (((C5313 * C20674 + C5310 * C20676 + C5312 * C3521 + C5309 * C3524 +
              C5311 * C3149 + C5308 * C3156) *
                 C50753 +
             (C5313 * C20673 + C5310 * C20675 + C5312 * C3518 + C5309 * C3522 +
              C5311 * C3144 + C5308 * C3148) *
                 C696) *
                C50773 * C50949 +
            ((C22548 + C22547 + C22546) * C50753 +
             (C22545 + C22544 + C22543) * C696) *
                C50773 * C17290) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C696 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C50753) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C696 +
            (C21938 + C21939 + C21940) * C50753) *
               C50773 * C50949) *
              C1162 -
          (((C22537 + C22538 + C22539) * C50753 +
            (C22540 + C22541 + C22542) * C696) *
               C50773 * C50949 +
           ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
             C5311 * C441 + C5308 * C452) *
                C50753 +
            (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
             C5311 * C435 + C5308 * C442) *
                C696) *
               C50773 * C17290) *
              C1163 +
          (((C5311 * C944 + C5308 * C949 + C5312 * C1169 + C5309 * C1177 +
             C5313 * C6286 + C5310 * C6289) *
                C696 +
            (C5311 * C950 + C5308 * C959 + C5312 * C1176 + C5309 * C1181 +
             C5313 * C6290 + C5310 * C6295) *
                C50753) *
               C50773 * C17290 +
           ((C22857 + C22858 + C22859) * C696 +
            (C22860 + C22861 + C22862) * C50753) *
               C50773 * C50949) *
              C1164 -
          (((C5313 * C22961 + C5310 * C22963 + C5312 * C6466 + C5309 * C6469 +
             C5311 * C3653 + C5308 * C3658) *
                C50753 +
            (C5313 * C22960 + C5310 * C22962 + C5312 * C6463 + C5309 * C6467 +
             C5311 * C3646 + C5308 * C3654) *
                C696) *
               C50773 * C50949 +
           ((C5313 * C6572 + C5310 * C6575 + C5312 * C6290 + C5309 * C6295 +
             C5311 * C1176 + C5308 * C1181) *
                C50753 +
            (C5313 * C6569 + C5310 * C6573 + C5312 * C6286 + C5309 * C6289 +
             C5311 * C1169 + C5308 * C1177) *
                C696) *
               C50773 * C17290) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1285 +
            (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
            C172 * C51067 + C173 * C1287 + C174 * C1282) *
               C50773 * C19889 +
           (C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C50773 * C19890 +
           (C3818 + C3819 - C3820 - C3821 + C3822 + C3823) * C50773 * C19891 +
           (C20776 + C20777 - C20778 - C20779 + C20780 + C20781) * C50773 *
               C19892) *
              C1643 +
          ((C475 * C1286 -
            ((C117 * C441 + C50911 * C452) * C51083 +
             (C117 * C435 + C50911 * C442) * C1285) +
            C476 * C51067 - C477 * C1287 - C478 * C1282) *
               C50773 * C19889 +
           (C1540 * C1286 - (C3184 * C51083 + C3185 * C1285) + C1541 * C51067 -
            C1542 * C1287 - C1543 * C1282) *
               C50773 * C19890 +
           (C2654 * C1286 - (C3182 * C51083 + C3183 * C1285) + C2655 * C51067 -
            C2656 * C1287 - C2657 * C1282) *
               C50773 * C19891 +
           (C3188 * C1286 - (C3187 * C51083 + C3186 * C1285) + C3189 * C51067 -
            (C117 * C4202 + C50911 * C4203) * C1287 -
            (C117 * C4204 + C50911 * C4205) * C1282) *
               C50773 * C19892) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1285 +
             (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
             C172 * C51067 + C173 * C1287 + C174 * C1282) *
                C17287 +
            (C171 * C1285 + C172 * C51083 - C173 * C1286 - C174 * C51067 +
             C175 * C1287 + C176 * C1282) *
                C17288 +
            (C173 * C1285 + C174 * C51083 - C175 * C1286 - C176 * C51067 +
             C177 * C1287 + C178 * C1282) *
                C17289) *
               C17290 +
           ((C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C17287 +
            (C3812 + C3813 - C3814 - C3815 + C3816 + C3817) * C17288 +
            (C9410 + C9411 - C9412 - C9413 + C9414 + C9415) * C17289) *
               C50949) *
              C1643 +
          (((C475 * C1286 -
             ((C117 * C441 + C50911 * C452) * C51083 +
              (C117 * C435 + C50911 * C442) * C1285) +
             C476 * C51067 - C477 * C1287 - C478 * C1282) *
                C17287 +
            (C477 * C1286 - (C476 * C51083 + C475 * C1285) + C478 * C51067 -
             C479 * C1287 - C480 * C1282) *
                C17288 +
            (C479 * C1286 - (C478 * C51083 + C477 * C1285) + C480 * C51067 -
             C481 * C1287 - C482 * C1282) *
                C17289) *
               C17290 +
           ((C1540 * C1286 - (C3184 * C51083 + C3185 * C1285) + C1541 * C51067 -
             C1542 * C1287 - C1543 * C1282) *
                C17287 +
            (C1542 * C1286 - (C1541 * C51083 + C1540 * C1285) + C1543 * C51067 -
             C1544 * C1287 - C1545 * C1282) *
                C17288 +
            (C1544 * C1286 - (C1543 * C51083 + C1542 * C1285) + C1545 * C51067 -
             (C117 * C1523 + C50911 * C1524) * C1287 -
             (C117 * C1525 + C50911 * C1526) * C1282) *
                C17289) *
               C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C1285 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C51083 -
            (C5351 + C5352 + C5353) * C1286 - (C5354 + C5355 + C5356) * C51067 +
            (C5357 + C5358 + C5359) * C1287 + (C5360 + C5361 + C5362) * C1282) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C1285 +
            (C21938 + C21939 + C21940) * C51083 -
            (C5541 + C5540 + C5539) * C1286 - (C5544 + C5543 + C5542) * C51067 +
            (C5547 + C5546 + C5545) * C1287 + (C5550 + C5549 + C5548) * C1282) *
               C50773 * C50949) *
              C1643 +
          (((C5721 + C5722 + C5723) * C1286 -
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C51083 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C1285) +
            (C5724 + C5725 + C5726) * C51067 - (C5727 + C5728 + C5729) * C1287 -
            (C5730 + C5731 + C5732) * C1282) *
               C50773 * C17290 +
           ((C7081 + C7080 + C7079) * C1286 -
            ((C22537 + C22538 + C22539) * C51083 +
             (C22540 + C22541 + C22542) * C1285) +
            (C7084 + C7083 + C7082) * C51067 -
            (C5313 * C7062 + C5310 * C7063 + C5312 * C1081 + C5309 * C1087 +
             C5311 * C813 + C5308 * C823) *
                C1287 -
            (C5313 * C7064 + C5310 * C7065 + C5312 * C1086 + C5309 * C1093 +
             C5311 * C824 + C5308 * C837) *
                C1282) *
               C50773 * C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C50773 * C19889 +
            (C3976 + C3977 - C3978 - C3979) * C50773 * C19890 +
            C20880 * C19891 + C20888 * C19892) *
               C1643 +
           ((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C50773 * C19889 +
            (C4207 - (C4208 + C4209) + C4210) * C50773 * C19890 +
            (C4215 - (C4216 + C4217) + C4218) * C50773 * C19891 +
            (C21019 - (C21020 + C21021) + C21022) * C50773 * C19892) *
               C50853) *
              C51040 +
          (((C3978 - (C3977 + C3976) + C3979) * C50773 * C19889 +
            (C3986 - (C3985 + C3984) + C3987) * C50773 * C19890 +
            (C3992 - (C3993 + C3994) + C3995) * C50773 * C19891 +
            (C20882 - (C20883 + C20884) + C20885) * C50773 * C19892) *
               C1643 +
           ((C4209 + C4208 - C4207 - C4210) * C50773 * C19889 +
            (C4217 + C4216 - C4215 - C4218) * C50773 * C19890 +
            (C21021 + C21020 - C21019 - C21022) * C50773 * C19891 +
            (C20396 * C1391 + C20397 * C1386 -
             (C117 * C3146 + C50911 * C3153) * C1392 -
             (C117 * C3152 + C50911 * C3158) * C50758) *
                C50773 * C19892) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C1391 +
              (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
              C172 * C50758) *
                 C17287 +
             (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                 C17288 +
             (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                 C17289) *
                C17290 +
            ((C3976 + C3977 - C3978 - C3979) * C17287 +
             (C3980 + C3981 - C3982 - C3983) * C17288 +
             (C9562 + C9563 - C9564 - C9565) * C17289) *
                C50949) *
               C1643 +
           (((C475 * C1392 -
              ((C117 * C441 + C50911 * C452) * C1386 +
               (C117 * C435 + C50911 * C442) * C1391) +
              C476 * C50758) *
                 C17287 +
             (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                 C17288 +
             (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                 C17289) *
                C17290 +
            ((C4207 - (C4208 + C4209) + C4210) * C17287 +
             (C4211 - (C4212 + C4213) + C4214) * C17288 +
             (C9764 - (C9765 + C9766) + C9767) * C17289) *
                C50949) *
               C50853) *
              C51040 +
          ((((C3978 - (C3977 + C3976) + C3979) * C17287 +
             (C3982 - (C3981 + C3980) + C3983) * C17288 +
             (C9564 - (C9563 + C9562) + C9565) * C17289) *
                C17290 +
            ((C3986 - (C3985 + C3984) + C3987) * C17287 +
             (C3990 - (C3989 + C3988) + C3991) * C17288 +
             (C9566 - (C9567 + C9568) + C9569) * C17289) *
                C50949) *
               C1643 +
           (((C4209 + C4208 - C4207 - C4210) * C17287 +
             (C4213 + C4212 - C4211 - C4214) * C17288 +
             (C9766 + C9765 - C9764 - C9767) * C17289) *
                C17290 +
            ((C4217 + C4216 - C4215 - C4218) * C17287 +
             (C4221 + C4220 - C4219 - C4222) * C17288 +
             (C2656 * C1391 + C2657 * C1386 -
              (C117 * C815 + C50911 * C828) * C1392 -
              (C117 * C827 + C50911 * C839) * C50758) *
                 C17289) *
                C50949) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C1391 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C1386 -
             (C5351 + C5352 + C5353) * C1392 -
             (C5354 + C5355 + C5356) * C50758) *
                C50773 * C17290 +
            ((C21935 + C21936 + C21937) * C1391 +
             (C21938 + C21939 + C21940) * C1386 -
             (C5541 + C5540 + C5539) * C1392 -
             (C5544 + C5543 + C5542) * C50758) *
                C50773 * C50949) *
               C1643 +
           (((C5721 + C5722 + C5723) * C1392 -
             ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
               C5311 * C441 + C5308 * C452) *
                  C1386 +
              (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
               C5311 * C435 + C5308 * C442) *
                  C1391) +
             (C5724 + C5725 + C5726) * C50758) *
                C50773 * C17290 +
            ((C7081 + C7080 + C7079) * C1392 -
             ((C22537 + C22538 + C22539) * C1386 +
              (C22540 + C22541 + C22542) * C1391) +
             (C7084 + C7083 + C7082) * C50758) *
                C50773 * C50949) *
               C50853) *
              C51040 +
          ((((C5539 + C5540 + C5541) * C1392 -
             ((C21940 + C21939 + C21938) * C1386 +
              (C21937 + C21936 + C21935) * C1391) +
             (C5542 + C5543 + C5544) * C50758) *
                C50773 * C17290 +
            ((C5893 + C5892 + C5891) * C1392 -
             ((C22245 + C22246 + C22247) * C1386 +
              (C22248 + C22249 + C22250) * C1391) +
             (C5896 + C5895 + C5894) * C50758) *
                C50773 * C50949) *
               C1643 +
           (((C22542 + C22541 + C22540) * C1391 +
             (C22539 + C22538 + C22537) * C1386 -
             (C7079 + C7080 + C7081) * C1392 -
             (C7082 + C7083 + C7084) * C50758) *
                C50773 * C17290 +
            ((C22543 + C22544 + C22545) * C1391 +
             (C22546 + C22547 + C22548) * C1386 -
             (C5313 * C3643 + C5310 * C3648 + C5312 * C3348 + C5309 * C3352 +
              C5311 * C817 + C5308 * C832) *
                 C1392 -
             (C5313 * C3647 + C5310 * C3655 + C5312 * C3353 + C5309 * C3357 +
              C5311 * C831 + C5308 * C841) *
                 C50758) *
                C50773 * C50949) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1391 +
            (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
            C172 * C50758) *
               C50773 * C19889 +
           (C3976 + C3977 - C3978 - C3979) * C50773 * C19890 + C20880 * C19891 +
           C20888 * C19892) *
              C51087 +
          ((C475 * C1392 -
            ((C117 * C441 + C50911 * C452) * C1386 +
             (C117 * C435 + C50911 * C442) * C1391) +
            C476 * C50758) *
               C50773 * C19889 +
           (C4207 - (C4208 + C4209) + C4210) * C50773 * C19890 +
           (C4215 - (C4216 + C4217) + C4218) * C50773 * C19891 +
           (C21019 - (C21020 + C21021) + C21022) * C50773 * C19892) *
              C51076 +
          (((C117 * C944 + C50911 * C949) * C1391 +
            (C117 * C950 + C50911 * C959) * C1386 - C977 * C1392 -
            C978 * C50758) *
               C50773 * C19889 +
           (C3538 * C1391 + C3539 * C1386 - C3368 * C1392 - C3369 * C50758) *
               C50773 * C19890 +
           (C3540 * C1391 + C3541 * C1386 - C3370 * C1392 - C3371 * C50758) *
               C50773 * C19891 +
           (C20604 * C1391 + C20605 * C1386 -
            (C117 * C3517 + C50911 * C3520) * C1392 -
            (C117 * C3519 + C50911 * C3523) * C50758) *
               C50773 * C19892) *
              C1875) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C17287 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C17288 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                C17289) *
               C17290 +
           ((C3976 + C3977 - C3978 - C3979) * C17287 +
            (C3980 + C3981 - C3982 - C3983) * C17288 +
            (C9562 + C9563 - C9564 - C9565) * C17289) *
               C50949) *
              C51087 +
          (((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C17287 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                C17288 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                C17289) *
               C17290 +
           ((C4207 - (C4208 + C4209) + C4210) * C17287 +
            (C4211 - (C4212 + C4213) + C4214) * C17288 +
            (C9764 - (C9765 + C9766) + C9767) * C17289) *
               C50949) *
              C51076 +
          ((((C117 * C944 + C50911 * C949) * C1391 +
             (C117 * C950 + C50911 * C959) * C1386 - C977 * C1392 -
             C978 * C50758) *
                C17287 +
            (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50758) *
                C17288 +
            (C979 * C1391 + C980 * C1386 - C981 * C1392 - C982 * C50758) *
                C17289) *
               C17290 +
           ((C3538 * C1391 + C3539 * C1386 - C3368 * C1392 - C3369 * C50758) *
                C17287 +
            (C3368 * C1391 + C3369 * C1386 - C9016 * C1392 - C9017 * C50758) *
                C17288 +
            (C9016 * C1391 + C9017 * C1386 -
             (C117 * C1080 + C50911 * C1085) * C1392 -
             (C117 * C1084 + C50911 * C1092) * C50758) *
                C17289) *
               C50949) *
              C1875) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C1391 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C1386 -
            (C5351 + C5352 + C5353) * C1392 -
            (C5354 + C5355 + C5356) * C50758) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C1391 +
            (C21938 + C21939 + C21940) * C1386 -
            (C5541 + C5540 + C5539) * C1392 -
            (C5544 + C5543 + C5542) * C50758) *
               C50773 * C50949) *
              C51087 +
          (((C5721 + C5722 + C5723) * C1392 -
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C1386 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C1391) +
            (C5724 + C5725 + C5726) * C50758) *
               C50773 * C17290 +
           ((C7081 + C7080 + C7079) * C1392 -
            ((C22537 + C22538 + C22539) * C1386 +
             (C22540 + C22541 + C22542) * C1391) +
            (C7084 + C7083 + C7082) * C50758) *
               C50773 * C50949) *
              C51076 +
          (((C5311 * C944 + C5308 * C949 + C5312 * C1169 + C5309 * C1177 +
             C5313 * C6286 + C5310 * C6289) *
                C1391 +
            (C5311 * C950 + C5308 * C959 + C5312 * C1176 + C5309 * C1181 +
             C5313 * C6290 + C5310 * C6295) *
                C1386 -
            (C6311 + C6312 + C6313) * C1392 -
            (C6314 + C6315 + C6316) * C50758) *
               C50773 * C17290 +
           ((C22857 + C22858 + C22859) * C1391 +
            (C22860 + C22861 + C22862) * C1386 -
            (C5313 * C6462 + C5310 * C6465 + C5312 * C3645 + C5309 * C3652 +
             C5311 * C1082 + C5308 * C1089) *
                C1392 -
            (C5313 * C6464 + C5310 * C6468 + C5312 * C3651 + C5309 * C3657 +
             C5311 * C1088 + C5308 * C1094) *
                C50758) *
               C50773 * C50949) *
              C1875) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C17287 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C17288 +
            (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                C17289) *
               C17290 +
           ((C2816 + C2817 - C2818 - C2819) * C17287 +
            (C2820 + C2821 - C2822 - C2823) * C17288 +
            (C8604 + C8605 - C8606 - C8607) * C17289) *
               C50949) *
              C50841 * C582 +
          (((C2818 - (C2817 + C2816) + C2819) * C17287 +
            (C2822 - (C2821 + C2820) + C2823) * C17288 +
            (C8606 - (C8605 + C8604) + C8607) * C17289) *
               C17290 +
           ((C2826 - (C2825 + C2824) + C2827) * C17287 +
            (C2830 - (C2829 + C2828) + C2831) * C17288 +
            (C8608 - (C8609 + C8610) + C8611) * C17289) *
               C50949) *
              C50841 * C583 +
          ((C2856 * C17287 + C2857 * C17288 +
            (C8610 + C8609 - C8608 - C8611) * C17289) *
               C17290 +
           ((C2855 + C2854 - C2832 - C2837) * C17287 +
            (C2840 + C2839 - C2838 - C2841) * C17288 +
            (C2494 * C49770 + C2495 * C51025 -
             (C117 * C697 + C50911 * C702) * C49763 -
             (C117 * C701 + C50911 * C709) * C50758) *
                C17289) *
               C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C118 +
            (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C17287 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C17288 +
           (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C17289) *
              C17290 +
          ((C2488 * C118 + C2489 * C106 - C327 * C119 - C328 * C107 +
            C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
               C17287 +
           (C327 * C118 + C328 * C106 - C329 * C119 - C330 * C107 +
            C331 * C120 + C332 * C108 - C333 * C121 - C334 * C109) *
               C17288 +
           (C329 * C118 + C330 * C106 - C331 * C119 - C332 * C107 +
            C333 * C120 + C334 * C108 - (C117 * C291 + C50911 * C302) * C121 -
            (C117 * C303 + C50911 * C309) * C109) *
               C17289) *
              C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50911 * C129) * C118 +
           (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50773 * C19889 +
          (C2488 * C118 + C2489 * C106 - C327 * C119 - C328 * C107 +
           C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
              C50773 * C19890 +
          (C2490 * C118 + C2491 * C106 - C620 * C119 - C621 * C107 +
           C622 * C120 + C623 * C108 - C624 * C121 - C625 * C109) *
              C50773 * C19891 +
          (C2849 * C118 + C2848 * C106 - C2492 * C119 - C2493 * C107 +
           C2494 * C120 + C2495 * C108 - (C117 * C697 + C50911 * C702) * C121 -
           (C117 * C701 + C50911 * C709) * C109) *
              C50773 * C19892) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C49770 +
            (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
            C172 * C50758) *
               C50773 * C19889 +
           (C2816 + C2817 - C2818 - C2819) * C50773 * C19890 + C20194 * C19891 +
           C20202 * C19892) *
              C50841 * C582 +
          ((C2818 - (C2817 + C2816) + C2819) * C50773 * C19889 +
           (C2826 - (C2825 + C2824) + C2827) * C50773 * C19890 +
           (C2832 - (C2854 + C2855) + C2837) * C50773 * C19891 +
           (C20196 - (C20197 + C20198) + C20199) * C50773 * C19892) *
              C50841 * C583 +
          (C20194 * C19889 + C20202 * C19890 +
           (C20198 + C20197 - C20196 - C20199) * C50773 * C19891 +
           ((C117 * C2959 + C50911 * C2963) * C49770 +
            (C117 * C2962 + C50911 * C2965) * C51025 -
            (C117 * C2958 + C50911 * C2961) * C49763 -
            (C117 * C2960 + C50911 * C2964) * C50758) *
               C50773 * C19892) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
            C5313 * C944 + C5310 * C949) *
               C118 +
           (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
            C5313 * C950 + C5310 * C959) *
               C106 -
           (C5351 + C5352 + C5353) * C119 - (C5354 + C5355 + C5356) * C107 +
           (C5357 + C5358 + C5359) * C120 + (C5360 + C5361 + C5362) * C108 -
           (C5363 + C5364 + C5365) * C121 - (C5366 + C5367 + C5368) * C109) *
              C50773 * C17290 +
          ((C5311 * C287 + C5308 * C294 + C5312 * C811 + C5309 * C819 +
            C5313 * C1083 + C5310 * C1091) *
               C118 +
           (C5311 * C293 + C5308 * C304 + C5312 * C820 + C5309 * C835 +
            C5313 * C1090 + C5310 * C1095) *
               C106 -
           (C5541 + C5540 + C5539) * C119 - (C5544 + C5543 + C5542) * C107 +
           (C5547 + C5546 + C5545) * C120 + (C5550 + C5549 + C5548) * C108 -
           (C5313 * C1080 + C5310 * C1085 + C5312 * C814 + C5309 * C825 +
            C5311 * C289 + C5308 * C298) *
               C121 -
           (C5313 * C1084 + C5310 * C1092 + C5312 * C826 + C5309 * C838 +
            C5311 * C299 + C5308 * C307) *
               C109) *
              C50773 * C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C49770 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C51025 -
            (C5351 + C5352 + C5353) * C49763 -
            (C5354 + C5355 + C5356) * C50758) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C49770 +
            (C21938 + C21939 + C21940) * C51025 -
            (C5541 + C5540 + C5539) * C49763 -
            (C5544 + C5543 + C5542) * C50758) *
               C50773 * C50949) *
              C50841 * C582 +
          (((C5539 + C5540 + C5541) * C49763 -
            ((C21940 + C21939 + C21938) * C51025 +
             (C21937 + C21936 + C21935) * C49770) +
            (C5542 + C5543 + C5544) * C50758) *
               C50773 * C17290 +
           ((C5893 + C5892 + C5891) * C49763 -
            ((C22245 + C22246 + C22247) * C51025 +
             (C22248 + C22249 + C22250) * C49770) +
            (C5896 + C5895 + C5894) * C50758) *
               C50773 * C50949) *
              C50841 * C583 +
          (((C22250 + C22249 + C22248) * C49770 +
            (C22247 + C22246 + C22245) * C51025 -
            (C5891 + C5892 + C5893) * C49763 -
            (C5894 + C5895 + C5896) * C50758) *
               C50773 * C17290 +
           ((C5311 * C700 + C5308 * C708 + C5312 * C3144 + C5309 * C3148 +
             C5313 * C3518 + C5310 * C3522) *
                C49770 +
            (C5311 * C707 + C5308 * C712 + C5312 * C3149 + C5309 * C3156 +
             C5313 * C3521 + C5310 * C3524) *
                C51025 -
            (C5313 * C3517 + C5310 * C3520 + C5312 * C3145 + C5309 * C3150 +
             C5311 * C699 + C5308 * C706) *
                C49763 -
            (C5313 * C3519 + C5310 * C3523 + C5312 * C3151 + C5309 * C3157 +
             C5311 * C705 + C5308 * C711) *
                C50758) *
               C50773 * C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C17287 +
            (C171 * C696 + C172 * C50753) * C17288 +
            (C173 * C696 + C174 * C50753) * C17289) *
               C17290 +
           ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
            (C8710 + C8711) * C17289) *
               C50949) *
              C50841 * C692 -
          (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
            (C2972 + C2971) * C17287) *
               C50949 +
           ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
            (C2968 + C2967) * C17287) *
               C17290) *
              C50841 * C693 +
          ((C2985 * C17287 + C2986 * C17288 + (C8713 + C8712) * C17289) *
               C17290 +
           ((C2978 + C2977) * C17287 + (C2976 + C2975) * C17288 +
            (C8714 + C8715) * C17289) *
               C50949) *
              C50841 * C694 -
          ((((C117 * C2811 + C50911 * C2814) * C50753 +
             (C117 * C2805 + C50911 * C2810) * C696) *
                C17289 +
            (C2984 + C2983) * C17288 + (C2996 + C2995) * C17287) *
               C50949 +
           ((C8715 + C8714) * C17289 + C2987 * C17288 + C2988 * C17287) *
               C17290) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C17287 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C17288 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C17289) *
               C17290 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C17287 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C17288 +
            (C8306 + C8307 - C8308 - C8309 + C8310 + C8311) * C17289) *
               C50949) *
              C50841 * C51040 +
          (((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C17287 +
            (C2462 - (C2461 + C2460) + C2463 - C2464 - C2465) * C17288 +
            (C8308 - (C8307 + C8306) + C8309 - C8310 - C8311) * C17289) *
               C17290 +
           ((C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C17287 +
            (C2476 - (C2475 + C2474) + C2477 - C2478 - C2479) * C17288 +
            (C624 * C284 - (C623 * C278 + C622 * C283) + C625 * C279 -
             (C117 * C591 + C50911 * C600) * C285 -
             (C117 * C601 + C50911 * C606) * C280) *
                C17289) *
               C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50773 * C19889 +
           (C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C50773 * C19890 +
           (C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C50773 * C19891 +
           (C19992 + C19993 - C19994 - C19995 + C19996 + C19997) * C50773 *
               C19892) *
              C50841 * C51040 +
          ((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C50773 * C19889 +
           (C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C50773 * C19890 +
           (C19994 - (C19993 + C19992) + C19995 - C19996 - C19997) * C50773 *
               C19891 +
           (C2850 * C284 - (C2990 * C278 + C2989 * C283) + C2851 * C279 -
            (C117 * C2805 + C50911 * C2810) * C285 -
            (C117 * C2811 + C50911 * C2814) * C280) *
               C50773 * C19892) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C696 +
            (C117 * C130 + C50911 * C143) * C50753) *
               C50773 * C19889 +
           (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
           C20281 * C19892) *
              C50841 * C692 -
          (C20282 * C19892 + C20276 * C19891 +
           (C2972 + C2971) * C50773 * C19890 +
           (C2968 + C2967) * C50773 * C19889) *
              C50841 * C693 +
          (C20273 * C19889 + C20281 * C19890 +
           (C2995 + C2996) * C50773 * C19891 +
           (C20285 + C20286) * C50773 * C19892) *
              C50841 * C694 -
          (((C117 * C20269 + C50911 * C20271) * C50753 +
            (C117 * C20268 + C50911 * C20270) * C696) *
               C50773 * C19892 +
           (C20286 + C20285) * C50773 * C19891 + C20282 * C19890 +
           C20276 * C19889) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C279 +
            (C5357 + C5358 + C5359) * C285 + (C5360 + C5361 + C5362) * C280) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C283 +
            (C21938 + C21939 + C21940) * C278 - (C5541 + C5540 + C5539) * C284 -
            (C5544 + C5543 + C5542) * C279 + (C5547 + C5546 + C5545) * C285 +
            (C5550 + C5549 + C5548) * C280) *
               C50773 * C50949) *
              C50841 * C51040 +
          (((C5539 + C5540 + C5541) * C284 -
            ((C21940 + C21939 + C21938) * C278 +
             (C21937 + C21936 + C21935) * C283) +
            (C5542 + C5543 + C5544) * C279 - (C5545 + C5546 + C5547) * C285 -
            (C5548 + C5549 + C5550) * C280) *
               C50773 * C17290 +
           ((C5893 + C5892 + C5891) * C284 -
            ((C5313 * C3351 + C5310 * C3356 + C5312 * C833 + C5309 * C842 +
              C5311 * C593 + C5308 * C602) *
                 C278 +
             (C5313 * C3347 + C5310 * C3350 + C5312 * C818 + C5309 * C834 +
              C5311 * C587 + C5308 * C592) *
                 C283) +
            (C5896 + C5895 + C5894) * C279 -
            (C5313 * C3349 + C5310 * C3354 + C5312 * C816 + C5309 * C830 +
             C5311 * C589 + C5308 * C596) *
                C285 -
            (C5313 * C3355 + C5310 * C3358 + C5312 * C829 + C5309 * C840 +
             C5311 * C597 + C5308 * C604) *
                C280) *
               C50773 * C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C696 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C50753) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C696 +
            (C21938 + C21939 + C21940) * C50753) *
               C50773 * C50949) *
              C50841 * C692 -
          (((C22245 + C22246 + C22247) * C50753 +
            (C22248 + C22249 + C22250) * C696) *
               C50773 * C50949 +
           ((C21940 + C21939 + C21938) * C50753 +
            (C21937 + C21936 + C21935) * C696) *
               C50773 * C17290) *
              C50841 * C693 +
          (((C22250 + C22249 + C22248) * C696 +
            (C22247 + C22246 + C22245) * C50753) *
               C50773 * C17290 +
           ((C22361 + C22362 + C22363) * C696 +
            (C22364 + C22365 + C22366) * C50753) *
               C50773 * C50949) *
              C50841 * C694 -
          (((C5313 * C20596 + C5310 * C20598 + C5312 * C3154 + C5309 * C3159 +
             C5311 * C2807 + C5308 * C2812) *
                C50753 +
            (C5313 * C20595 + C5310 * C20597 + C5312 * C3147 + C5309 * C3155 +
             C5311 * C2803 + C5308 * C2806) *
                C696) *
               C50773 * C50949 +
           ((C22366 + C22365 + C22364) * C50753 +
            (C22363 + C22362 + C22361) * C696) *
               C50773 * C17290) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C17287 +
             (C171 * C696 + C172 * C50753) * C17288 +
             (C173 * C696 + C174 * C50753) * C17289) *
                C17290 +
            ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
             (C8710 + C8711) * C17289) *
                C50949) *
               C51041 -
           (((C8862 + C8863) * C17289 + (C3167 + C3168) * C17288 +
             (C3193 + C3194) * C17287) *
                C50949 +
            ((C478 * C50753 + C477 * C696) * C17289 +
             (C476 * C50753 + C475 * C696) * C17288 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C17287) *
                C17290) *
               C50853) *
              C582 +
          ((((C3194 + C3193) * C17287 + (C3168 + C3167) * C17288 +
             (C8863 + C8862) * C17289) *
                C17290 +
            ((C3192 + C3191) * C17287 + (C3162 + C3161) * C17288 +
             (C8864 + C8865) * C17289) *
                C50949) *
               C50853 -
           (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
             (C2972 + C2971) * C17287) *
                C50949 +
            ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
             (C2968 + C2967) * C17287) *
                C17290) *
               C51041) *
              C583 +
          (((C2985 * C17287 + C2986 * C17288 + (C8713 + C8712) * C17289) *
                C17290 +
            ((C2978 + C2977) * C17287 + (C2976 + C2975) * C17288 +
             (C8714 + C8715) * C17289) *
                C50949) *
               C51041 -
           ((((C117 * C4204 + C50911 * C4205) * C50753 +
              (C117 * C4202 + C50911 * C4203) * C696) *
                 C17289 +
             (C3198 + C3197) * C17288 + (C3196 + C3195) * C17287) *
                C50949 +
            ((C8865 + C8864) * C17289 + C3181 * C17288 + C3199 * C17287) *
                C17290) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C17287 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C17288 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C17289) *
               C17290 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C17287 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C17288 +
            (C8306 + C8307 - C8308 - C8309 + C8310 + C8311) * C17289) *
               C50949) *
              C51041 +
          (((C475 * C284 -
             ((C117 * C441 + C50911 * C452) * C278 +
              (C117 * C435 + C50911 * C442) * C283) +
             C476 * C279 - C477 * C285 - C478 * C280) *
                C17287 +
            (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
             C479 * C285 - C480 * C280) *
                C17288 +
            (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
             C481 * C285 - C482 * C280) *
                C17289) *
               C17290 +
           ((C1540 * C284 - (C3184 * C278 + C3185 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C17287 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C17288 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50911 * C1524) * C285 -
             (C117 * C1525 + C50911 * C1526) * C280) *
                C17289) *
               C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50773 * C19889 +
           (C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C50773 * C19890 +
           (C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C50773 * C19891 +
           (C19992 + C19993 - C19994 - C19995 + C19996 + C19997) * C50773 *
               C19892) *
              C51041 +
          ((C475 * C284 -
            ((C117 * C441 + C50911 * C452) * C278 +
             (C117 * C435 + C50911 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C50773 * C19889 +
           (C1540 * C284 - (C3184 * C278 + C3185 * C283) + C1541 * C279 -
            C1542 * C285 - C1543 * C280) *
               C50773 * C19890 +
           (C2654 * C284 - (C3182 * C278 + C3183 * C283) + C2655 * C279 -
            C2656 * C285 - C2657 * C280) *
               C50773 * C19891 +
           (C3188 * C284 - (C3187 * C278 + C3186 * C283) + C3189 * C279 -
            (C117 * C4202 + C50911 * C4203) * C285 -
            (C117 * C4204 + C50911 * C4205) * C280) *
               C50773 * C19892) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C50773 * C19889 +
            (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
            C20281 * C19892) *
               C51041 -
           (C20395 * C19892 + C20390 * C19891 +
            (C3193 + C3194) * C50773 * C19890 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C50773 * C19889) *
               C50853) *
              C582 +
          (((C3194 + C3193) * C50773 * C19889 +
            (C3192 + C3191) * C50773 * C19890 +
            (C3195 + C3196) * C50773 * C19891 +
            (C20398 + C20399) * C50773 * C19892) *
               C50853 -
           (C20282 * C19892 + C20276 * C19891 +
            (C2972 + C2971) * C50773 * C19890 +
            (C2968 + C2967) * C50773 * C19889) *
               C51041) *
              C583 +
          ((C20273 * C19889 + C20281 * C19890 +
            (C2995 + C2996) * C50773 * C19891 +
            (C20285 + C20286) * C50773 * C19892) *
               C51041 -
           (((C117 * C20385 + C50911 * C20387) * C50753 +
             (C117 * C20384 + C50911 * C20386) * C696) *
                C50773 * C19892 +
            (C20399 + C20398) * C50773 * C19891 + C20395 * C19890 +
            C20390 * C19889) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
             C5313 * C944 + C5310 * C949) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
             C5313 * C950 + C5310 * C959) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C279 +
            (C5357 + C5358 + C5359) * C285 + (C5360 + C5361 + C5362) * C280) *
               C50773 * C17290 +
           ((C21935 + C21936 + C21937) * C283 +
            (C21938 + C21939 + C21940) * C278 - (C5541 + C5540 + C5539) * C284 -
            (C5544 + C5543 + C5542) * C279 + (C5547 + C5546 + C5545) * C285 +
            (C5550 + C5549 + C5548) * C280) *
               C50773 * C50949) *
              C51041 +
          (((C5721 + C5722 + C5723) * C284 -
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C278 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C283) +
            (C5724 + C5725 + C5726) * C279 - (C5727 + C5728 + C5729) * C285 -
            (C5730 + C5731 + C5732) * C280) *
               C50773 * C17290 +
           ((C7081 + C7080 + C7079) * C284 -
            ((C5313 * C3653 + C5310 * C3658 + C5312 * C1090 + C5309 * C1095 +
              C5311 * C820 + C5308 * C835) *
                 C278 +
             (C5313 * C3646 + C5310 * C3654 + C5312 * C1083 + C5309 * C1091 +
              C5311 * C811 + C5308 * C819) *
                 C283) +
            (C7084 + C7083 + C7082) * C279 -
            (C5313 * C7062 + C5310 * C7063 + C5312 * C1081 + C5309 * C1087 +
             C5311 * C813 + C5308 * C823) *
                C285 -
            (C5313 * C7064 + C5310 * C7065 + C5312 * C1086 + C5309 * C1093 +
             C5311 * C824 + C5308 * C837) *
                C280) *
               C50773 * C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C435 + C5309 * C442 +
              C5313 * C944 + C5310 * C949) *
                 C696 +
             (C5311 * C130 + C5308 * C143 + C5312 * C441 + C5309 * C452 +
              C5313 * C950 + C5310 * C959) *
                 C50753) *
                C50773 * C17290 +
            ((C21935 + C21936 + C21937) * C696 +
             (C21938 + C21939 + C21940) * C50753) *
                C50773 * C50949) *
               C51041 -
           (((C22537 + C22538 + C22539) * C50753 +
             (C22540 + C22541 + C22542) * C696) *
                C50773 * C50949 +
            ((C5313 * C1176 + C5310 * C1181 + C5312 * C950 + C5309 * C959 +
              C5311 * C441 + C5308 * C452) *
                 C50753 +
             (C5313 * C1169 + C5310 * C1177 + C5312 * C944 + C5309 * C949 +
              C5311 * C435 + C5308 * C442) *
                 C696) *
                C50773 * C17290) *
               C50853) *
              C582 +
          ((((C22542 + C22541 + C22540) * C696 +
             (C22539 + C22538 + C22537) * C50753) *
                C50773 * C17290 +
            ((C22543 + C22544 + C22545) * C696 +
             (C22546 + C22547 + C22548) * C50753) *
                C50773 * C50949) *
               C50853 -
           (((C22245 + C22246 + C22247) * C50753 +
             (C22248 + C22249 + C22250) * C696) *
                C50773 * C50949 +
            ((C21940 + C21939 + C21938) * C50753 +
             (C21937 + C21936 + C21935) * C696) *
                C50773 * C17290) *
               C51041) *
              C583 +
          ((((C22250 + C22249 + C22248) * C696 +
             (C22247 + C22246 + C22245) * C50753) *
                C50773 * C17290 +
            ((C22361 + C22362 + C22363) * C696 +
             (C22364 + C22365 + C22366) * C50753) *
                C50773 * C50949) *
               C51041 -
           (((C5313 * C20674 + C5310 * C20676 + C5312 * C3521 + C5309 * C3524 +
              C5311 * C3149 + C5308 * C3156) *
                 C50753 +
             (C5313 * C20673 + C5310 * C20675 + C5312 * C3518 + C5309 * C3522 +
              C5311 * C3144 + C5308 * C3148) *
                 C696) *
                C50773 * C50949 +
            ((C22548 + C22547 + C22546) * C50753 +
             (C22545 + C22544 + C22543) * C696) *
                C50773 * C17290) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C1285 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C51083 -
             (C10878 + C10879) * C1286 - (C10880 + C10881) * C51067 +
             C10894 * C1287 + C10895 * C1282) *
                C51034 +
            ((C10879 + C10878) * C1285 + (C10881 + C10880) * C51083 -
             (C10883 + C10882) * C1286 - (C10885 + C10884) * C51067 +
             (C10887 + C10886) * C1287 + (C10889 + C10888) * C1282) *
                C50778) *
               C17290 +
           (((C13914 + C13915) * C1285 + (C13916 + C13917) * C51083 -
             C13908 * C1286 - C13909 * C51067 + C13910 * C1287 +
             C13911 * C1282) *
                C51034 +
            (C13912 * C1285 + C13913 * C51083 - C11080 * C1286 -
             C11081 * C51067 + (C11077 + C11076) * C1287 +
             (C11079 + C11078) * C1282) *
                C50778) *
               C50949) *
              C50841 * C1283 +
          (((C13912 * C1286 -
             ((C13917 + C13916) * C51083 + (C13915 + C13914) * C1285) +
             C13913 * C51067 - C11080 * C1287 - C11081 * C1282) *
                C51034 +
            (C13910 * C1286 - (C13909 * C51083 + C13908 * C1285) +
             C13911 * C51067 - (C11076 + C11077) * C1287 -
             (C11078 + C11079) * C1282) *
                C50778) *
               C17290 +
           ((C14306 * C1286 -
             ((C14326 + C14327) * C51083 + (C14328 + C14329) * C1285) +
             C14315 * C51067 - (C11432 + C11433) * C1287 -
             (C11434 + C11435) * C1282) *
                C51034 +
            ((C11433 + C11432) * C1286 - (C14316 * C51083 + C14317 * C1285) +
             (C11435 + C11434) * C51067 -
             (C10844 * C815 + C50975 * C828 + C10843 * C590 + C51056 * C598) *
                 C1287 -
             (C10844 * C827 + C50975 * C839 + C10843 * C599 + C51056 * C605) *
                 C1282) *
                C50778) *
               C50949) *
              C50841 * C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C1391 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C1386 -
             (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
                C51034 +
            ((C10879 + C10878) * C1391 + (C10881 + C10880) * C1386 -
             (C10883 + C10882) * C1392 - (C10885 + C10884) * C50758) *
                C50778) *
               C17290 +
           (((C13914 + C13915) * C1391 + (C13916 + C13917) * C1386 -
             C13908 * C1392 - C13909 * C50758) *
                C51034 +
            (C13912 * C1391 + C13913 * C1386 - C11080 * C1392 -
             C11081 * C50758) *
                C50778) *
               C50949) *
              C50841 * C51086 +
          (((C13912 * C1392 -
             ((C13917 + C13916) * C1386 + (C13915 + C13914) * C1391) +
             C13913 * C50758) *
                C51034 +
            (C13910 * C1392 - (C13909 * C1386 + C13908 * C1391) +
             C13911 * C50758) *
                C50778) *
               C17290 +
           ((C14306 * C1392 -
             ((C14326 + C14327) * C1386 + (C14328 + C14329) * C1391) +
             C14315 * C50758) *
                C51034 +
            ((C11433 + C11432) * C1392 - (C14316 * C1386 + C14317 * C1391) +
             (C11435 + C11434) * C50758) *
                C50778) *
               C50949) *
              C50841 * C51073 +
          ((((C14329 + C14328) * C1391 + (C14327 + C14326) * C1386 -
             C14317 * C1392 - C14316 * C50758) *
                C51034 +
            (C14306 * C1391 + C14315 * C1386 - (C11432 + C11433) * C1392 -
             (C11434 + C11435) * C50758) *
                C50778) *
               C17290 +
           (((C14472 + C14473) * C1391 + (C14474 + C14475) * C1386 -
             (C14330 + C14331) * C1392 - (C14332 + C14333) * C50758) *
                C51034 +
            ((C14331 + C14330) * C1391 + (C14333 + C14332) * C1386 -
             (C10844 * C4202 + C50975 * C4203 + C10843 * C698 + C51056 * C704) *
                 C1392 -
             (C10844 * C4204 + C50975 * C4205 + C10843 * C703 + C51056 * C710) *
                 C50758) *
                C50778) *
               C50949) *
              C50841 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C1391 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C1386 -
              (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
                 C51034 +
             ((C10879 + C10878) * C1391 + (C10881 + C10880) * C1386 -
              (C10883 + C10882) * C1392 - (C10885 + C10884) * C50758) *
                 C50778) *
                C17290 +
            (((C13914 + C13915) * C1391 + (C13916 + C13917) * C1386 -
              C13908 * C1392 - C13909 * C50758) *
                 C51034 +
             (C13912 * C1391 + C13913 * C1386 - C11080 * C1392 -
              C11081 * C50758) *
                 C50778) *
                C50949) *
               C51041 +
           ((((C11252 + C11253) * C1392 -
              ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                   C1386 +
               (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                   C1391) +
              (C11254 + C11255) * C50758) *
                 C51034 +
             ((C11257 + C11256) * C1392 -
              ((C11255 + C11254) * C1386 + (C11253 + C11252) * C1391) +
              (C11259 + C11258) * C50758) *
                 C50778) *
                C17290 +
            ((C15894 * C1392 -
              ((C14694 + C14695) * C1386 + (C14696 + C14697) * C1391) +
              C15895 * C50758) *
                 C51034 +
             ((C12601 + C12600) * C1392 - (C15896 * C1386 + C15897 * C1391) +
              (C12603 + C12602) * C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C1283 +
          ((((C13912 * C1392 -
              ((C13917 + C13916) * C1386 + (C13915 + C13914) * C1391) +
              C13913 * C50758) *
                 C51034 +
             (C13910 * C1392 - (C13909 * C1386 + C13908 * C1391) +
              C13911 * C50758) *
                 C50778) *
                C17290 +
            ((C14306 * C1392 -
              ((C14326 + C14327) * C1386 + (C14328 + C14329) * C1391) +
              C14315 * C50758) *
                 C51034 +
             ((C11433 + C11432) * C1392 - (C14316 * C1386 + C14317 * C1391) +
              (C11435 + C11434) * C50758) *
                 C50778) *
                C50949) *
               C51041 +
           ((((C14697 + C14696) * C1391 + (C14695 + C14694) * C1386 -
              C15897 * C1392 - C15896 * C50758) *
                 C51034 +
             (C15894 * C1391 + C15895 * C1386 - (C12600 + C12601) * C1392 -
              (C12602 + C12603) * C50758) *
                 C50778) *
                C17290 +
            (((C14698 + C14699) * C1391 + (C14700 + C14701) * C1386 -
              (C14703 + C14702) * C1392 - (C14705 + C14704) * C50758) *
                 C51034 +
             ((C14702 + C14703) * C1391 + (C14704 + C14705) * C1386 -
              (C10844 * C3349 + C50975 * C3354 + C10843 * C816 +
               C51056 * C830) *
                  C1392 -
              (C10844 * C3355 + C50975 * C3358 + C10843 * C829 +
               C51056 * C840) *
                  C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C49770 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C51025 -
              (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
                 C51034 +
             ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51025 -
              (C10883 + C10882) * C49763 - (C10885 + C10884) * C50758) *
                 C50778) *
                C17290 +
            (((C13914 + C13915) * C49770 + (C13916 + C13917) * C51025 -
              C13908 * C49763 - C13909 * C50758) *
                 C51034 +
             (C13912 * C49770 + C13913 * C51025 - C11080 * C49763 -
              C11081 * C50758) *
                 C50778) *
                C50949) *
               C1643 +
           ((((C11252 + C11253) * C49763 -
              ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                   C51025 +
               (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                   C49770) +
              (C11254 + C11255) * C50758) *
                 C51034 +
             ((C11257 + C11256) * C49763 -
              ((C11255 + C11254) * C51025 + (C11253 + C11252) * C49770) +
              (C11259 + C11258) * C50758) *
                 C50778) *
                C17290 +
            ((C15894 * C49763 -
              ((C14694 + C14695) * C51025 + (C14696 + C14697) * C49770) +
              C15895 * C50758) *
                 C51034 +
             ((C12601 + C12600) * C49763 - (C15896 * C51025 + C15897 * C49770) +
              (C12603 + C12602) * C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C1283 +
          ((((C13912 * C49763 -
              ((C13917 + C13916) * C51025 + (C13915 + C13914) * C49770) +
              C13913 * C50758) *
                 C51034 +
             (C13910 * C49763 - (C13909 * C51025 + C13908 * C49770) +
              C13911 * C50758) *
                 C50778) *
                C17290 +
            ((C14306 * C49763 -
              ((C14326 + C14327) * C51025 + (C14328 + C14329) * C49770) +
              C14315 * C50758) *
                 C51034 +
             ((C11433 + C11432) * C49763 - (C14316 * C51025 + C14317 * C49770) +
              (C11435 + C11434) * C50758) *
                 C50778) *
                C50949) *
               C1643 +
           ((((C14697 + C14696) * C49770 + (C14695 + C14694) * C51025 -
              C15897 * C49763 - C15896 * C50758) *
                 C51034 +
             (C15894 * C49770 + C15895 * C51025 - (C12600 + C12601) * C49763 -
              (C12602 + C12603) * C50758) *
                 C50778) *
                C17290 +
            (((C14698 + C14699) * C49770 + (C14700 + C14701) * C51025 -
              (C14703 + C14702) * C49763 - (C14705 + C14704) * C50758) *
                 C51034 +
             ((C14702 + C14703) * C49770 + (C14704 + C14705) * C51025 -
              (C10844 * C3349 + C50975 * C3354 + C10843 * C816 +
               C51056 * C830) *
                  C49763 -
              (C10844 * C3355 + C50975 * C3358 + C10843 * C829 +
               C51056 * C840) *
                  C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C696 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C50753) *
                 C51034 +
             ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
                C17290 +
            (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C51034 +
             (C13912 * C696 + C13913 * C50753) * C50778) *
                C50949) *
               C1643 -
           (((C15896 * C50753 + C15897 * C696) * C50778 +
             ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C51034) *
                C50949 +
            (((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C50778 +
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C50753 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C696) *
                 C51034) *
                C17290) *
               C50853) *
              C51086 +
          (((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C51034 +
             (C15894 * C696 + C15895 * C50753) * C50778) *
                C17290 +
            (((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C51034 +
             ((C14702 + C14703) * C696 + (C14704 + C14705) * C50753) * C50778) *
                C50949) *
               C50853 -
           (((C14316 * C50753 + C14317 * C696) * C50778 +
             ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C51034) *
                C50949 +
            ((C13909 * C50753 + C13908 * C696) * C50778 +
             ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C51034) *
                C17290) *
               C1643) *
              C51073 +
          (((((C14329 + C14328) * C696 + (C14327 + C14326) * C50753) * C51034 +
             (C14306 * C696 + C14315 * C50753) * C50778) *
                C17290 +
            (((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C51034 +
             ((C14331 + C14330) * C696 + (C14333 + C14332) * C50753) * C50778) *
                C50949) *
               C1643 -
           ((((C10844 * C3519 + C50975 * C3523 + C10843 * C3151 +
               C51056 * C3157) *
                  C50753 +
              (C10844 * C3517 + C50975 * C3520 + C10843 * C3145 +
               C51056 * C3150) *
                  C696) *
                 C50778 +
             ((C10844 * C3521 + C50975 * C3524 + C10843 * C3149 +
               C51056 * C3156) *
                  C50753 +
              (C10844 * C3518 + C50975 * C3522 + C10843 * C3144 +
               C51056 * C3148) *
                  C696) *
                 C51034) *
                C50949 +
            (((C14705 + C14704) * C50753 + (C14703 + C14702) * C696) * C50778 +
             ((C14701 + C14700) * C50753 + (C14699 + C14698) * C696) * C51034) *
                C17290) *
               C50853) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C696 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C50753) *
                 C51034 +
             ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
                C17290 +
            (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C51034 +
             (C13912 * C696 + C13913 * C50753) * C50778) *
                C50949) *
               C51087 -
           (((C15896 * C50753 + C15897 * C696) * C50778 +
             ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C51034) *
                C50949 +
            (((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C50778 +
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C50753 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C696) *
                 C51034) *
                C17290) *
               C51076 +
           ((((C10843 * C944 + C51056 * C949 + C10844 * C1169 +
               C50975 * C1177) *
                  C696 +
              (C10843 * C950 + C51056 * C959 + C10844 * C1176 +
               C50975 * C1181) *
                  C50753) *
                 C51034 +
             ((C11843 + C11842) * C696 + (C11845 + C11844) * C50753) * C50778) *
                C17290 +
            (((C15114 + C15115) * C696 + (C15116 + C15117) * C50753) * C51034 +
             ((C14909 + C14908) * C696 + (C14911 + C14910) * C50753) * C50778) *
                C50949) *
               C1875) *
              C1283 +
          (((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C51034 +
             (C15894 * C696 + C15895 * C50753) * C50778) *
                C17290 +
            (((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C51034 +
             ((C14702 + C14703) * C696 + (C14704 + C14705) * C50753) * C50778) *
                C50949) *
               C51076 -
           (((C14316 * C50753 + C14317 * C696) * C50778 +
             ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C51034) *
                C50949 +
            ((C13909 * C50753 + C13908 * C696) * C50778 +
             ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C51034) *
                C17290) *
               C51087 -
           ((((C10844 * C3647 + C50975 * C3655 + C10843 * C3353 +
               C51056 * C3357) *
                  C50753 +
              (C10844 * C3643 + C50975 * C3648 + C10843 * C3348 +
               C51056 * C3352) *
                  C696) *
                 C50778 +
             ((C10844 * C3649 + C50975 * C3656 + C10843 * C3351 +
               C51056 * C3356) *
                  C50753 +
              (C10844 * C3644 + C50975 * C3650 + C10843 * C3347 +
               C51056 * C3350) *
                  C696) *
                 C51034) *
                C50949 +
            (((C14910 + C14911) * C50753 + (C14908 + C14909) * C696) * C50778 +
             ((C15117 + C15116) * C50753 + (C15115 + C15114) * C696) * C51034) *
                C17290) *
               C1875) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C49770 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C51025 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
                C51034 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51025 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50758) *
                C50778) *
               C17290 +
           (((C13914 + C13915) * C49770 + (C13916 + C13917) * C51025 -
             C13908 * C49763 - C13909 * C50758) *
                C51034 +
            (C13912 * C49770 + C13913 * C51025 - C11080 * C49763 -
             C11081 * C50758) *
                C50778) *
               C50949) *
              C50841 * C582 +
          (((C13912 * C49763 -
             ((C13917 + C13916) * C51025 + (C13915 + C13914) * C49770) +
             C13913 * C50758) *
                C51034 +
            (C13910 * C49763 - (C13909 * C51025 + C13908 * C49770) +
             C13911 * C50758) *
                C50778) *
               C17290 +
           ((C14306 * C49763 -
             ((C14326 + C14327) * C51025 + (C14328 + C14329) * C49770) +
             C14315 * C50758) *
                C51034 +
            ((C11433 + C11432) * C49763 - (C14316 * C51025 + C14317 * C49770) +
             (C11435 + C11434) * C50758) *
                C50778) *
               C50949) *
              C50841 * C583 +
          ((((C14329 + C14328) * C49770 + (C14327 + C14326) * C51025 -
             C14317 * C49763 - C14316 * C50758) *
                C51034 +
            (C14306 * C49770 + C14315 * C51025 - (C11432 + C11433) * C49763 -
             (C11434 + C11435) * C50758) *
                C50778) *
               C17290 +
           (((C14472 + C14473) * C49770 + (C14474 + C14475) * C51025 -
             (C14330 + C14331) * C49763 - (C14332 + C14333) * C50758) *
                C51034 +
            ((C14331 + C14330) * C49770 + (C14333 + C14332) * C51025 -
             (C10844 * C4202 + C50975 * C4203 + C10843 * C698 + C51056 * C704) *
                 C49763 -
             (C10844 * C4204 + C50975 * C4205 + C10843 * C703 + C51056 * C710) *
                 C50758) *
                C50778) *
               C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C118 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C106 -
            (C10878 + C10879) * C119 - (C10880 + C10881) * C107 +
            C10894 * C120 + C10895 * C108 - C10896 * C121 - C10897 * C109) *
               C51034 +
           ((C10879 + C10878) * C118 + (C10881 + C10880) * C106 -
            (C10883 + C10882) * C119 - (C10885 + C10884) * C107 +
            (C10887 + C10886) * C120 + (C10889 + C10888) * C108 -
            (C10890 + C10891) * C121 - (C10892 + C10893) * C109) *
               C50778) *
              C17290 +
          (((C13914 + C13915) * C118 + (C13916 + C13917) * C106 -
            C13908 * C119 - C13909 * C107 + C13910 * C120 + C13911 * C108 -
            (C11076 + C11077) * C121 - (C11078 + C11079) * C109) *
               C51034 +
           (C13912 * C118 + C13913 * C106 - C11080 * C119 - C11081 * C107 +
            (C11077 + C11076) * C120 + (C11079 + C11078) * C108 -
            (C10844 * C1523 + C50975 * C1524 + C10843 * C290 + C51056 * C300) *
                C121 -
            (C10844 * C1525 + C50975 * C1526 + C10843 * C301 + C51056 * C308) *
                C109) *
               C50778) *
              C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C49770 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C51025 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
                C51034 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51025 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50758) *
                C50778) *
               C17290 +
           (((C13914 + C13915) * C49770 + (C13916 + C13917) * C51025 -
             C13908 * C49763 - C13909 * C50758) *
                C51034 +
            (C13912 * C49770 + C13913 * C51025 - C11080 * C49763 -
             C11081 * C50758) *
                C50778) *
               C50949) *
              C941 +
          ((((C11252 + C11253) * C49763 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C51025 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C49770) +
             (C11254 + C11255) * C50758) *
                C51034 +
            ((C11257 + C11256) * C49763 -
             ((C11255 + C11254) * C51025 + (C11253 + C11252) * C49770) +
             (C11259 + C11258) * C50758) *
                C50778) *
               C17290 +
           ((C15894 * C49763 -
             ((C14694 + C14695) * C51025 + (C14696 + C14697) * C49770) +
             C15895 * C50758) *
                C51034 +
            ((C12601 + C12600) * C49763 - (C15896 * C51025 + C15897 * C49770) +
             (C12603 + C12602) * C50758) *
                C50778) *
               C50949) *
              C942 +
          ((((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                 C49770 +
             (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                 C51025 -
             (C11842 + C11843) * C49763 - (C11844 + C11845) * C50758) *
                C51034 +
            ((C11843 + C11842) * C49770 + (C11845 + C11844) * C51025 -
             (C11846 + C11847) * C49763 - (C11848 + C11849) * C50758) *
                C50778) *
               C17290 +
           (((C15114 + C15115) * C49770 + (C15116 + C15117) * C51025 -
             (C14908 + C14909) * C49763 - (C14910 + C14911) * C50758) *
                C51034 +
            ((C14909 + C14908) * C49770 + (C14911 + C14910) * C51025 -
             (C10844 * C7062 + C50975 * C7063 + C10843 * C1081 +
              C51056 * C1087) *
                 C49763 -
             (C10844 * C7064 + C50975 * C7065 + C10843 * C1086 +
              C51056 * C1093) *
                 C50758) *
                C50778) *
               C50949) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C51034 +
            ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
               C17290 +
           (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C51034 +
            (C13912 * C696 + C13913 * C50753) * C50778) *
               C50949) *
              C50841 * C692 -
          (((C14316 * C50753 + C14317 * C696) * C50778 +
            ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C51034) *
               C50949 +
           ((C13909 * C50753 + C13908 * C696) * C50778 +
            ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C51034) *
               C17290) *
              C50841 * C693 +
          ((((C14329 + C14328) * C696 + (C14327 + C14326) * C50753) * C51034 +
            (C14306 * C696 + C14315 * C50753) * C50778) *
               C17290 +
           (((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C51034 +
            ((C14331 + C14330) * C696 + (C14333 + C14332) * C50753) * C50778) *
               C50949) *
              C50841 * C694 -
          ((((C10844 * C3152 + C50975 * C3158 + C10843 * C2809 +
              C51056 * C2813) *
                 C50753 +
             (C10844 * C3146 + C50975 * C3153 + C10843 * C2804 +
              C51056 * C2808) *
                 C696) *
                C50778 +
            ((C10844 * C3154 + C50975 * C3159 + C10843 * C2807 +
              C51056 * C2812) *
                 C50753 +
             (C10844 * C3147 + C50975 * C3155 + C10843 * C2803 +
              C51056 * C2806) *
                 C696) *
                C51034) *
               C50949 +
           (((C14332 + C14333) * C50753 + (C14330 + C14331) * C696) * C50778 +
            ((C14475 + C14474) * C50753 + (C14473 + C14472) * C696) * C51034) *
               C17290) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C283 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
             C10894 * C285 + C10895 * C280) *
                C51034 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C279 +
             (C10887 + C10886) * C285 + (C10889 + C10888) * C280) *
                C50778) *
               C17290 +
           (((C13914 + C13915) * C283 + (C13916 + C13917) * C278 -
             C13908 * C284 - C13909 * C279 + C13910 * C285 + C13911 * C280) *
                C51034 +
            (C13912 * C283 + C13913 * C278 - C11080 * C284 - C11081 * C279 +
             (C11077 + C11076) * C285 + (C11079 + C11078) * C280) *
                C50778) *
               C50949) *
              C50841 * C51040 +
          (((C13912 * C284 -
             ((C13917 + C13916) * C278 + (C13915 + C13914) * C283) +
             C13913 * C279 - C11080 * C285 - C11081 * C280) *
                C51034 +
            (C13910 * C284 - (C13909 * C278 + C13908 * C283) + C13911 * C279 -
             (C11076 + C11077) * C285 - (C11078 + C11079) * C280) *
                C50778) *
               C17290 +
           ((C14306 * C284 -
             ((C14326 + C14327) * C278 + (C14328 + C14329) * C283) +
             C14315 * C279 - (C11432 + C11433) * C285 -
             (C11434 + C11435) * C280) *
                C51034 +
            ((C11433 + C11432) * C284 - (C14316 * C278 + C14317 * C283) +
             (C11435 + C11434) * C279 -
             (C10844 * C815 + C50975 * C828 + C10843 * C590 + C51056 * C598) *
                 C285 -
             (C10844 * C827 + C50975 * C839 + C10843 * C599 + C51056 * C605) *
                 C280) *
                C50778) *
               C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C696 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C50753) *
                 C51034 +
             ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
                C17290 +
            (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C51034 +
             (C13912 * C696 + C13913 * C50753) * C50778) *
                C50949) *
               C941 -
           (((C15896 * C50753 + C15897 * C696) * C50778 +
             ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C51034) *
                C50949 +
            (((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C50778 +
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C50753 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C696) *
                 C51034) *
                C17290) *
               C942 +
           ((((C10843 * C944 + C51056 * C949 + C10844 * C1169 +
               C50975 * C1177) *
                  C696 +
              (C10843 * C950 + C51056 * C959 + C10844 * C1176 +
               C50975 * C1181) *
                  C50753) *
                 C51034 +
             ((C11843 + C11842) * C696 + (C11845 + C11844) * C50753) * C50778) *
                C17290 +
            (((C15114 + C15115) * C696 + (C15116 + C15117) * C50753) * C51034 +
             ((C14909 + C14908) * C696 + (C14911 + C14910) * C50753) * C50778) *
                C50949) *
               C943) *
              C51040 +
          (((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C51034 +
             (C15894 * C696 + C15895 * C50753) * C50778) *
                C17290 +
            (((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C51034 +
             ((C14702 + C14703) * C696 + (C14704 + C14705) * C50753) * C50778) *
                C50949) *
               C942 -
           (((C14316 * C50753 + C14317 * C696) * C50778 +
             ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C51034) *
                C50949 +
            ((C13909 * C50753 + C13908 * C696) * C50778 +
             ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C51034) *
                C17290) *
               C941 -
           ((((C10844 * C3647 + C50975 * C3655 + C10843 * C3353 +
               C51056 * C3357) *
                  C50753 +
              (C10844 * C3643 + C50975 * C3648 + C10843 * C3348 +
               C51056 * C3352) *
                  C696) *
                 C50778 +
             ((C10844 * C3649 + C50975 * C3656 + C10843 * C3351 +
               C51056 * C3356) *
                  C50753 +
              (C10844 * C3644 + C50975 * C3650 + C10843 * C3347 +
               C51056 * C3350) *
                  C696) *
                 C51034) *
                C50949 +
            (((C14910 + C14911) * C50753 + (C14908 + C14909) * C696) * C50778 +
             ((C15117 + C15116) * C50753 + (C15115 + C15114) * C696) * C51034) *
                C17290) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C696 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C50753) *
                 C51034 +
             ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
                C17290 +
            (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C51034 +
             (C13912 * C696 + C13913 * C50753) * C50778) *
                C50949) *
               C51041 -
           (((C15896 * C50753 + C15897 * C696) * C50778 +
             ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C51034) *
                C50949 +
            (((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C50778 +
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C50753 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C696) *
                 C51034) *
                C17290) *
               C50853) *
              C582 +
          (((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C51034 +
             (C15894 * C696 + C15895 * C50753) * C50778) *
                C17290 +
            (((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C51034 +
             ((C14702 + C14703) * C696 + (C14704 + C14705) * C50753) * C50778) *
                C50949) *
               C50853 -
           (((C14316 * C50753 + C14317 * C696) * C50778 +
             ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C51034) *
                C50949 +
            ((C13909 * C50753 + C13908 * C696) * C50778 +
             ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C51034) *
                C17290) *
               C51041) *
              C583 +
          (((((C14329 + C14328) * C696 + (C14327 + C14326) * C50753) * C51034 +
             (C14306 * C696 + C14315 * C50753) * C50778) *
                C17290 +
            (((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C51034 +
             ((C14331 + C14330) * C696 + (C14333 + C14332) * C50753) * C50778) *
                C50949) *
               C51041 -
           ((((C10844 * C3519 + C50975 * C3523 + C10843 * C3151 +
               C51056 * C3157) *
                  C50753 +
              (C10844 * C3517 + C50975 * C3520 + C10843 * C3145 +
               C51056 * C3150) *
                  C696) *
                 C50778 +
             ((C10844 * C3521 + C50975 * C3524 + C10843 * C3149 +
               C51056 * C3156) *
                  C50753 +
              (C10844 * C3518 + C50975 * C3522 + C10843 * C3144 +
               C51056 * C3148) *
                  C696) *
                 C51034) *
                C50949 +
            (((C14705 + C14704) * C50753 + (C14703 + C14702) * C696) * C50778 +
             ((C14701 + C14700) * C50753 + (C14699 + C14698) * C696) * C51034) *
                C17290) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C283 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
             C10894 * C285 + C10895 * C280) *
                C51034 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C279 +
             (C10887 + C10886) * C285 + (C10889 + C10888) * C280) *
                C50778) *
               C17290 +
           (((C13914 + C13915) * C283 + (C13916 + C13917) * C278 -
             C13908 * C284 - C13909 * C279 + C13910 * C285 + C13911 * C280) *
                C51034 +
            (C13912 * C283 + C13913 * C278 - C11080 * C284 - C11081 * C279 +
             (C11077 + C11076) * C285 + (C11079 + C11078) * C280) *
                C50778) *
               C50949) *
              C51041 +
          ((((C11252 + C11253) * C284 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C278 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C283) +
             (C11254 + C11255) * C279 - C11264 * C285 - C11265 * C280) *
                C51034 +
            ((C11257 + C11256) * C284 -
             ((C11255 + C11254) * C278 + (C11253 + C11252) * C283) +
             (C11259 + C11258) * C279 - (C11260 + C11261) * C285 -
             (C11262 + C11263) * C280) *
                C50778) *
               C17290 +
           ((C15894 * C284 -
             ((C14694 + C14695) * C278 + (C14696 + C14697) * C283) +
             C15895 * C279 - (C12600 + C12601) * C285 -
             (C12602 + C12603) * C280) *
                C51034 +
            ((C12601 + C12600) * C284 - (C15896 * C278 + C15897 * C283) +
             (C12603 + C12602) * C279 -
             (C10844 * C1080 + C50975 * C1085 + C10843 * C814 + C51056 * C825) *
                 C285 -
             (C10844 * C1084 + C50975 * C1092 + C10843 * C826 + C51056 * C838) *
                 C280) *
                C50778) *
               C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C51034 +
            ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
               C17290 +
           (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C51034 +
            (C13912 * C696 + C13913 * C50753) * C50778) *
               C50949) *
              C1162 -
          (((C15896 * C50753 + C15897 * C696) * C50778 +
            ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C51034) *
               C50949 +
           (((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C50778 +
            ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                 C50753 +
             (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                 C696) *
                C51034) *
               C17290) *
              C1163 +
          ((((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                 C696 +
             (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                 C50753) *
                C51034 +
            ((C11843 + C11842) * C696 + (C11845 + C11844) * C50753) * C50778) *
               C17290 +
           (((C15114 + C15115) * C696 + (C15116 + C15117) * C50753) * C51034 +
            ((C14909 + C14908) * C696 + (C14911 + C14910) * C50753) * C50778) *
               C50949) *
              C1164 -
          ((((C10844 * C6464 + C50975 * C6468 + C10843 * C3651 +
              C51056 * C3657) *
                 C50753 +
             (C10844 * C6462 + C50975 * C6465 + C10843 * C3645 +
              C51056 * C3652) *
                 C696) *
                C50778 +
            ((C10844 * C6466 + C50975 * C6469 + C10843 * C3653 +
              C51056 * C3658) *
                 C50753 +
             (C10844 * C6463 + C50975 * C6467 + C10843 * C3646 +
              C51056 * C3654) *
                 C696) *
                C51034) *
               C50949 +
           (((C10844 * C6292 + C50975 * C6296 + C10843 * C1174 +
              C51056 * C1180) *
                 C50753 +
             (C10844 * C6287 + C50975 * C6291 + C10843 * C1168 +
              C51056 * C1175) *
                 C696) *
                C50778 +
            ((C10844 * C6290 + C50975 * C6295 + C10843 * C1176 +
              C51056 * C1181) *
                 C50753 +
             (C10844 * C6286 + C50975 * C6289 + C10843 * C1169 +
              C51056 * C1177) *
                 C696) *
                C51034) *
               C17290) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C1285 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C51083 -
             (C10878 + C10879) * C1286 - (C10880 + C10881) * C51067 +
             C10894 * C1287 + C10895 * C1282) *
                C51034 +
            ((C10879 + C10878) * C1285 + (C10881 + C10880) * C51083 -
             (C10883 + C10882) * C1286 - (C10885 + C10884) * C51067 +
             (C10887 + C10886) * C1287 + (C10889 + C10888) * C1282) *
                C50778) *
               C17290 +
           (((C13914 + C13915) * C1285 + (C13916 + C13917) * C51083 -
             C13908 * C1286 - C13909 * C51067 + C13910 * C1287 +
             C13911 * C1282) *
                C51034 +
            (C13912 * C1285 + C13913 * C51083 - C11080 * C1286 -
             C11081 * C51067 + (C11077 + C11076) * C1287 +
             (C11079 + C11078) * C1282) *
                C50778) *
               C50949) *
              C1643 +
          ((((C11252 + C11253) * C1286 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C51083 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C1285) +
             (C11254 + C11255) * C51067 - C11264 * C1287 - C11265 * C1282) *
                C51034 +
            ((C11257 + C11256) * C1286 -
             ((C11255 + C11254) * C51083 + (C11253 + C11252) * C1285) +
             (C11259 + C11258) * C51067 - (C11260 + C11261) * C1287 -
             (C11262 + C11263) * C1282) *
                C50778) *
               C17290 +
           ((C15894 * C1286 -
             ((C14694 + C14695) * C51083 + (C14696 + C14697) * C1285) +
             C15895 * C51067 - (C12600 + C12601) * C1287 -
             (C12602 + C12603) * C1282) *
                C51034 +
            ((C12601 + C12600) * C1286 - (C15896 * C51083 + C15897 * C1285) +
             (C12603 + C12602) * C51067 -
             (C10844 * C1080 + C50975 * C1085 + C10843 * C814 + C51056 * C825) *
                 C1287 -
             (C10844 * C1084 + C50975 * C1092 + C10843 * C826 + C51056 * C838) *
                 C1282) *
                C50778) *
               C50949) *
              C50853) *
         C50815) /
        (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C1391 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C1386 -
              (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
                 C51034 +
             ((C10879 + C10878) * C1391 + (C10881 + C10880) * C1386 -
              (C10883 + C10882) * C1392 - (C10885 + C10884) * C50758) *
                 C50778) *
                C17290 +
            (((C13914 + C13915) * C1391 + (C13916 + C13917) * C1386 -
              C13908 * C1392 - C13909 * C50758) *
                 C51034 +
             (C13912 * C1391 + C13913 * C1386 - C11080 * C1392 -
              C11081 * C50758) *
                 C50778) *
                C50949) *
               C1643 +
           ((((C11252 + C11253) * C1392 -
              ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                   C1386 +
               (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                   C1391) +
              (C11254 + C11255) * C50758) *
                 C51034 +
             ((C11257 + C11256) * C1392 -
              ((C11255 + C11254) * C1386 + (C11253 + C11252) * C1391) +
              (C11259 + C11258) * C50758) *
                 C50778) *
                C17290 +
            ((C15894 * C1392 -
              ((C14694 + C14695) * C1386 + (C14696 + C14697) * C1391) +
              C15895 * C50758) *
                 C51034 +
             ((C12601 + C12600) * C1392 - (C15896 * C1386 + C15897 * C1391) +
              (C12603 + C12602) * C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C51040 +
          ((((C13912 * C1392 -
              ((C13917 + C13916) * C1386 + (C13915 + C13914) * C1391) +
              C13913 * C50758) *
                 C51034 +
             (C13910 * C1392 - (C13909 * C1386 + C13908 * C1391) +
              C13911 * C50758) *
                 C50778) *
                C17290 +
            ((C14306 * C1392 -
              ((C14326 + C14327) * C1386 + (C14328 + C14329) * C1391) +
              C14315 * C50758) *
                 C51034 +
             ((C11433 + C11432) * C1392 - (C14316 * C1386 + C14317 * C1391) +
              (C11435 + C11434) * C50758) *
                 C50778) *
                C50949) *
               C1643 +
           ((((C14697 + C14696) * C1391 + (C14695 + C14694) * C1386 -
              C15897 * C1392 - C15896 * C50758) *
                 C51034 +
             (C15894 * C1391 + C15895 * C1386 - (C12600 + C12601) * C1392 -
              (C12602 + C12603) * C50758) *
                 C50778) *
                C17290 +
            (((C14698 + C14699) * C1391 + (C14700 + C14701) * C1386 -
              (C14703 + C14702) * C1392 - (C14705 + C14704) * C50758) *
                 C51034 +
             ((C14702 + C14703) * C1391 + (C14704 + C14705) * C1386 -
              (C10844 * C3349 + C50975 * C3354 + C10843 * C816 +
               C51056 * C830) *
                  C1392 -
              (C10844 * C3355 + C50975 * C3358 + C10843 * C829 +
               C51056 * C840) *
                  C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C1391 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C1386 -
             (C10878 + C10879) * C1392 - (C10880 + C10881) * C50758) *
                C51034 +
            ((C10879 + C10878) * C1391 + (C10881 + C10880) * C1386 -
             (C10883 + C10882) * C1392 - (C10885 + C10884) * C50758) *
                C50778) *
               C17290 +
           (((C13914 + C13915) * C1391 + (C13916 + C13917) * C1386 -
             C13908 * C1392 - C13909 * C50758) *
                C51034 +
            (C13912 * C1391 + C13913 * C1386 - C11080 * C1392 -
             C11081 * C50758) *
                C50778) *
               C50949) *
              C51087 +
          ((((C11252 + C11253) * C1392 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C1386 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C1391) +
             (C11254 + C11255) * C50758) *
                C51034 +
            ((C11257 + C11256) * C1392 -
             ((C11255 + C11254) * C1386 + (C11253 + C11252) * C1391) +
             (C11259 + C11258) * C50758) *
                C50778) *
               C17290 +
           ((C15894 * C1392 -
             ((C14694 + C14695) * C1386 + (C14696 + C14697) * C1391) +
             C15895 * C50758) *
                C51034 +
            ((C12601 + C12600) * C1392 - (C15896 * C1386 + C15897 * C1391) +
             (C12603 + C12602) * C50758) *
                C50778) *
               C50949) *
              C51076 +
          ((((C10843 * C944 + C51056 * C949 + C10844 * C1169 + C50975 * C1177) *
                 C1391 +
             (C10843 * C950 + C51056 * C959 + C10844 * C1176 + C50975 * C1181) *
                 C1386 -
             (C11842 + C11843) * C1392 - (C11844 + C11845) * C50758) *
                C51034 +
            ((C11843 + C11842) * C1391 + (C11845 + C11844) * C1386 -
             (C11846 + C11847) * C1392 - (C11848 + C11849) * C50758) *
                C50778) *
               C17290 +
           (((C15114 + C15115) * C1391 + (C15116 + C15117) * C1386 -
             (C14908 + C14909) * C1392 - (C14910 + C14911) * C50758) *
                C51034 +
            ((C14909 + C14908) * C1391 + (C14911 + C14910) * C1386 -
             (C10844 * C7062 + C50975 * C7063 + C10843 * C1081 +
              C51056 * C1087) *
                 C1392 -
             (C10844 * C7064 + C50975 * C7065 + C10843 * C1086 +
              C51056 * C1093) *
                 C50758) *
                C50778) *
               C50949) *
              C1875) *
         C50815) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                C118 +
            (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                C106 -
            (C10878 + C10879) * C119 - (C10880 + C10881) * C107 +
            C10894 * C120 + C10895 * C108 - C10896 * C121 - C10897 * C109) *
               C51034 +
           ((C10879 + C10878) * C118 + (C10881 + C10880) * C106 -
            (C10883 + C10882) * C119 - (C10885 + C10884) * C107 +
            (C10887 + C10886) * C120 + (C10889 + C10888) * C108 -
            (C10890 + C10891) * C121 - (C10892 + C10893) * C109) *
               C50778) *
              C17290 +
          (((C13914 + C13915) * C118 + (C13916 + C13917) * C106 -
            C13908 * C119 - C13909 * C107 + C13910 * C120 + C13911 * C108 -
            (C11076 + C11077) * C121 - (C11078 + C11079) * C109) *
               C51034 +
           (C13912 * C118 + C13913 * C106 - C11080 * C119 - C11081 * C107 +
            (C11077 + C11076) * C120 + (C11079 + C11078) * C108 -
            (C10844 * C1523 + C50975 * C1524 + C10843 * C290 + C51056 * C300) *
                C121 -
            (C10844 * C1525 + C50975 * C1526 + C10843 * C301 + C51056 * C308) *
                C109) *
               C50778) *
              C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C49770 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C51025 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50758) *
                C51034 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51025 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50758) *
                C50778) *
               C17290 +
           (((C13914 + C13915) * C49770 + (C13916 + C13917) * C51025 -
             C13908 * C49763 - C13909 * C50758) *
                C51034 +
            (C13912 * C49770 + C13913 * C51025 - C11080 * C49763 -
             C11081 * C50758) *
                C50778) *
               C50949) *
              C50841 * C582 +
          (((C13912 * C49763 -
             ((C13917 + C13916) * C51025 + (C13915 + C13914) * C49770) +
             C13913 * C50758) *
                C51034 +
            (C13910 * C49763 - (C13909 * C51025 + C13908 * C49770) +
             C13911 * C50758) *
                C50778) *
               C17290 +
           ((C14306 * C49763 -
             ((C14326 + C14327) * C51025 + (C14328 + C14329) * C49770) +
             C14315 * C50758) *
                C51034 +
            ((C11433 + C11432) * C49763 - (C14316 * C51025 + C14317 * C49770) +
             (C11435 + C11434) * C50758) *
                C50778) *
               C50949) *
              C50841 * C583 +
          ((((C14329 + C14328) * C49770 + (C14327 + C14326) * C51025 -
             C14317 * C49763 - C14316 * C50758) *
                C51034 +
            (C14306 * C49770 + C14315 * C51025 - (C11432 + C11433) * C49763 -
             (C11434 + C11435) * C50758) *
                C50778) *
               C17290 +
           (((C14472 + C14473) * C49770 + (C14474 + C14475) * C51025 -
             (C14330 + C14331) * C49763 - (C14332 + C14333) * C50758) *
                C51034 +
            ((C14331 + C14330) * C49770 + (C14333 + C14332) * C51025 -
             (C10844 * C4202 + C50975 * C4203 + C10843 * C698 + C51056 * C704) *
                 C49763 -
             (C10844 * C4204 + C50975 * C4205 + C10843 * C703 + C51056 * C710) *
                 C50758) *
                C50778) *
               C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C283 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
             C10894 * C285 + C10895 * C280) *
                C51034 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C279 +
             (C10887 + C10886) * C285 + (C10889 + C10888) * C280) *
                C50778) *
               C17290 +
           (((C13914 + C13915) * C283 + (C13916 + C13917) * C278 -
             C13908 * C284 - C13909 * C279 + C13910 * C285 + C13911 * C280) *
                C51034 +
            (C13912 * C283 + C13913 * C278 - C11080 * C284 - C11081 * C279 +
             (C11077 + C11076) * C285 + (C11079 + C11078) * C280) *
                C50778) *
               C50949) *
              C50841 * C51040 +
          (((C13912 * C284 -
             ((C13917 + C13916) * C278 + (C13915 + C13914) * C283) +
             C13913 * C279 - C11080 * C285 - C11081 * C280) *
                C51034 +
            (C13910 * C284 - (C13909 * C278 + C13908 * C283) + C13911 * C279 -
             (C11076 + C11077) * C285 - (C11078 + C11079) * C280) *
                C50778) *
               C17290 +
           ((C14306 * C284 -
             ((C14326 + C14327) * C278 + (C14328 + C14329) * C283) +
             C14315 * C279 - (C11432 + C11433) * C285 -
             (C11434 + C11435) * C280) *
                C51034 +
            ((C11433 + C11432) * C284 - (C14316 * C278 + C14317 * C283) +
             (C11435 + C11434) * C279 -
             (C10844 * C815 + C50975 * C828 + C10843 * C590 + C51056 * C598) *
                 C285 -
             (C10844 * C827 + C50975 * C839 + C10843 * C599 + C51056 * C605) *
                 C280) *
                C50778) *
               C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C696 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C50753) *
                C51034 +
            ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
               C17290 +
           (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C51034 +
            (C13912 * C696 + C13913 * C50753) * C50778) *
               C50949) *
              C50841 * C692 -
          (((C14316 * C50753 + C14317 * C696) * C50778 +
            ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C51034) *
               C50949 +
           ((C13909 * C50753 + C13908 * C696) * C50778 +
            ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C51034) *
               C17290) *
              C50841 * C693 +
          ((((C14329 + C14328) * C696 + (C14327 + C14326) * C50753) * C51034 +
            (C14306 * C696 + C14315 * C50753) * C50778) *
               C17290 +
           (((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C51034 +
            ((C14331 + C14330) * C696 + (C14333 + C14332) * C50753) * C50778) *
               C50949) *
              C50841 * C694 -
          ((((C10844 * C3152 + C50975 * C3158 + C10843 * C2809 +
              C51056 * C2813) *
                 C50753 +
             (C10844 * C3146 + C50975 * C3153 + C10843 * C2804 +
              C51056 * C2808) *
                 C696) *
                C50778 +
            ((C10844 * C3154 + C50975 * C3159 + C10843 * C2807 +
              C51056 * C2812) *
                 C50753 +
             (C10844 * C3147 + C50975 * C3155 + C10843 * C2803 +
              C51056 * C2806) *
                 C696) *
                C51034) *
               C50949 +
           (((C14332 + C14333) * C50753 + (C14330 + C14331) * C696) * C50778 +
            ((C14475 + C14474) * C50753 + (C14473 + C14472) * C696) * C51034) *
               C17290) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                 C283 +
             (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C279 +
             C10894 * C285 + C10895 * C280) *
                C51034 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C279 +
             (C10887 + C10886) * C285 + (C10889 + C10888) * C280) *
                C50778) *
               C17290 +
           (((C13914 + C13915) * C283 + (C13916 + C13917) * C278 -
             C13908 * C284 - C13909 * C279 + C13910 * C285 + C13911 * C280) *
                C51034 +
            (C13912 * C283 + C13913 * C278 - C11080 * C284 - C11081 * C279 +
             (C11077 + C11076) * C285 + (C11079 + C11078) * C280) *
                C50778) *
               C50949) *
              C51041 +
          ((((C11252 + C11253) * C284 -
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C278 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C283) +
             (C11254 + C11255) * C279 - C11264 * C285 - C11265 * C280) *
                C51034 +
            ((C11257 + C11256) * C284 -
             ((C11255 + C11254) * C278 + (C11253 + C11252) * C283) +
             (C11259 + C11258) * C279 - (C11260 + C11261) * C285 -
             (C11262 + C11263) * C280) *
                C50778) *
               C17290 +
           ((C15894 * C284 -
             ((C14694 + C14695) * C278 + (C14696 + C14697) * C283) +
             C15895 * C279 - (C12600 + C12601) * C285 -
             (C12602 + C12603) * C280) *
                C51034 +
            ((C12601 + C12600) * C284 - (C15896 * C278 + C15897 * C283) +
             (C12603 + C12602) * C279 -
             (C10844 * C1080 + C50975 * C1085 + C10843 * C814 + C51056 * C825) *
                 C285 -
             (C10844 * C1084 + C50975 * C1092 + C10843 * C826 + C51056 * C838) *
                 C280) *
                C50778) *
               C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51056 * C129 + C10844 * C435 + C50975 * C442) *
                  C696 +
              (C10843 * C130 + C51056 * C143 + C10844 * C441 + C50975 * C452) *
                  C50753) *
                 C51034 +
             ((C10879 + C10878) * C696 + (C10881 + C10880) * C50753) * C50778) *
                C17290 +
            (((C13914 + C13915) * C696 + (C13916 + C13917) * C50753) * C51034 +
             (C13912 * C696 + C13913 * C50753) * C50778) *
                C50949) *
               C51041 -
           (((C15896 * C50753 + C15897 * C696) * C50778 +
             ((C14694 + C14695) * C50753 + (C14696 + C14697) * C696) * C51034) *
                C50949 +
            (((C11255 + C11254) * C50753 + (C11253 + C11252) * C696) * C50778 +
             ((C10844 * C950 + C50975 * C959 + C10843 * C441 + C51056 * C452) *
                  C50753 +
              (C10844 * C944 + C50975 * C949 + C10843 * C435 + C51056 * C442) *
                  C696) *
                 C51034) *
                C17290) *
               C50853) *
              C582 +
          (((((C14697 + C14696) * C696 + (C14695 + C14694) * C50753) * C51034 +
             (C15894 * C696 + C15895 * C50753) * C50778) *
                C17290 +
            (((C14698 + C14699) * C696 + (C14700 + C14701) * C50753) * C51034 +
             ((C14702 + C14703) * C696 + (C14704 + C14705) * C50753) * C50778) *
                C50949) *
               C50853 -
           (((C14316 * C50753 + C14317 * C696) * C50778 +
             ((C14326 + C14327) * C50753 + (C14328 + C14329) * C696) * C51034) *
                C50949 +
            ((C13909 * C50753 + C13908 * C696) * C50778 +
             ((C13917 + C13916) * C50753 + (C13915 + C13914) * C696) * C51034) *
                C17290) *
               C51041) *
              C583 +
          (((((C14329 + C14328) * C696 + (C14327 + C14326) * C50753) * C51034 +
             (C14306 * C696 + C14315 * C50753) * C50778) *
                C17290 +
            (((C14472 + C14473) * C696 + (C14474 + C14475) * C50753) * C51034 +
             ((C14331 + C14330) * C696 + (C14333 + C14332) * C50753) * C50778) *
                C50949) *
               C51041 -
           ((((C10844 * C3519 + C50975 * C3523 + C10843 * C3151 +
               C51056 * C3157) *
                  C50753 +
              (C10844 * C3517 + C50975 * C3520 + C10843 * C3145 +
               C51056 * C3150) *
                  C696) *
                 C50778 +
             ((C10844 * C3521 + C50975 * C3524 + C10843 * C3149 +
               C51056 * C3156) *
                  C50753 +
              (C10844 * C3518 + C50975 * C3522 + C10843 * C3144 +
               C51056 * C3148) *
                  C696) *
                 C51034) *
                C50949 +
            (((C14705 + C14704) * C50753 + (C14703 + C14702) * C696) * C50778 +
             ((C14701 + C14700) * C50753 + (C14699 + C14698) * C696) * C51034) *
                C17290) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1285 +
             (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
             C172 * C51067 + C173 * C1287 + C174 * C1282) *
                C17287 +
            (C171 * C1285 + C172 * C51083 - C173 * C1286 - C174 * C51067 +
             C175 * C1287 + C176 * C1282) *
                C17288 +
            (C173 * C1285 + C174 * C51083 - C175 * C1286 - C176 * C51067 +
             C177 * C1287 + C178 * C1282) *
                C17289) *
               C17290 +
           ((C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C17287 +
            (C3812 + C3813 - C3814 - C3815 + C3816 + C3817) * C17288 +
            (C9410 + C9411 - C9412 - C9413 + C9414 + C9415) * C17289) *
               C50949) *
              C50841 * C1283 +
          (((C3808 - (C3807 + C3806) + C3809 - C3810 - C3811) * C17287 +
            (C3814 - (C3813 + C3812) + C3815 - C3816 - C3817) * C17288 +
            (C9412 - (C9411 + C9410) + C9413 - C9414 - C9415) * C17289) *
               C17290 +
           ((C3820 - (C3819 + C3818) + C3821 - C3822 - C3823) * C17287 +
            (C3826 - (C3825 + C3824) + C3827 - C3828 - C3829) * C17288 +
            (C624 * C1286 - (C623 * C51083 + C622 * C1285) + C625 * C51067 -
             (C117 * C591 + C50911 * C600) * C1287 -
             (C117 * C601 + C50911 * C606) * C1282) *
                C17289) *
               C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1285 +
            (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
            C172 * C51067 + C173 * C1287 + C174 * C1282) *
               C50773 * C19889 +
           (C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C50773 * C19890 +
           (C3818 + C3819 - C3820 - C3821 + C3822 + C3823) * C50773 * C19891 +
           (C20776 + C20777 - C20778 - C20779 + C20780 + C20781) * C50773 *
               C19892) *
              C50841 * C1283 +
          ((C3808 - (C3807 + C3806) + C3809 - C3810 - C3811) * C50773 * C19889 +
           (C3820 - (C3819 + C3818) + C3821 - C3822 - C3823) * C50773 * C19890 +
           (C20778 - (C20777 + C20776) + C20779 - C20780 - C20781) * C50773 *
               C19891 +
           (C2850 * C1286 - (C2990 * C51083 + C2989 * C1285) + C2851 * C51067 -
            (C117 * C2805 + C50911 * C2810) * C1287 -
            (C117 * C2811 + C50911 * C2814) * C1282) *
               C50773 * C19892) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C17287 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C17288 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                C17289) *
               C17290 +
           ((C3976 + C3977 - C3978 - C3979) * C17287 +
            (C3980 + C3981 - C3982 - C3983) * C17288 +
            (C9562 + C9563 - C9564 - C9565) * C17289) *
               C50949) *
              C50841 * C51086 +
          (((C3978 - (C3977 + C3976) + C3979) * C17287 +
            (C3982 - (C3981 + C3980) + C3983) * C17288 +
            (C9564 - (C9563 + C9562) + C9565) * C17289) *
               C17290 +
           ((C3986 - (C3985 + C3984) + C3987) * C17287 +
            (C3990 - (C3989 + C3988) + C3991) * C17288 +
            (C9566 - (C9567 + C9568) + C9569) * C17289) *
               C50949) *
              C50841 * C51073 +
          ((C4004 * C17287 + C4005 * C17288 +
            (C9568 + C9567 - C9566 - C9569) * C17289) *
               C17290 +
           ((C3994 + C3993 - C3992 - C3995) * C17287 +
            (C3998 + C3997 - C3996 - C3999) * C17288 +
            (C2494 * C1391 + C2495 * C1386 -
             (C117 * C697 + C50911 * C702) * C1392 -
             (C117 * C701 + C50911 * C709) * C50758) *
                C17289) *
               C50949) *
              C50841 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1391 +
            (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
            C172 * C50758) *
               C50773 * C19889 +
           (C3976 + C3977 - C3978 - C3979) * C50773 * C19890 + C20880 * C19891 +
           C20888 * C19892) *
              C50841 * C51086 +
          ((C3978 - (C3977 + C3976) + C3979) * C50773 * C19889 +
           (C3986 - (C3985 + C3984) + C3987) * C50773 * C19890 +
           (C3992 - (C3993 + C3994) + C3995) * C50773 * C19891 +
           (C20882 - (C20883 + C20884) + C20885) * C50773 * C19892) *
              C50841 * C51073 +
          (C20880 * C19889 + C20888 * C19890 +
           (C20884 + C20883 - C20882 - C20885) * C50773 * C19891 +
           (C20283 * C1391 + C20284 * C1386 -
            (C117 * C2958 + C50911 * C2961) * C1392 -
            (C117 * C2960 + C50911 * C2964) * C50758) *
               C50773 * C19892) *
              C50841 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C1391 +
              (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
              C172 * C50758) *
                 C17287 +
             (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                 C17288 +
             (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                 C17289) *
                C17290 +
            ((C3976 + C3977 - C3978 - C3979) * C17287 +
             (C3980 + C3981 - C3982 - C3983) * C17288 +
             (C9562 + C9563 - C9564 - C9565) * C17289) *
                C50949) *
               C51041 +
           (((C475 * C1392 -
              ((C117 * C441 + C50911 * C452) * C1386 +
               (C117 * C435 + C50911 * C442) * C1391) +
              C476 * C50758) *
                 C17287 +
             (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                 C17288 +
             (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                 C17289) *
                C17290 +
            ((C4207 - (C4208 + C4209) + C4210) * C17287 +
             (C4211 - (C4212 + C4213) + C4214) * C17288 +
             (C9764 - (C9765 + C9766) + C9767) * C17289) *
                C50949) *
               C50853) *
              C1283 +
          ((((C3978 - (C3977 + C3976) + C3979) * C17287 +
             (C3982 - (C3981 + C3980) + C3983) * C17288 +
             (C9564 - (C9563 + C9562) + C9565) * C17289) *
                C17290 +
            ((C3986 - (C3985 + C3984) + C3987) * C17287 +
             (C3990 - (C3989 + C3988) + C3991) * C17288 +
             (C9566 - (C9567 + C9568) + C9569) * C17289) *
                C50949) *
               C51041 +
           (((C4209 + C4208 - C4207 - C4210) * C17287 +
             (C4213 + C4212 - C4211 - C4214) * C17288 +
             (C9766 + C9765 - C9764 - C9767) * C17289) *
                C17290 +
            ((C4217 + C4216 - C4215 - C4218) * C17287 +
             (C4221 + C4220 - C4219 - C4222) * C17288 +
             (C2656 * C1391 + C2657 * C1386 -
              (C117 * C815 + C50911 * C828) * C1392 -
              (C117 * C827 + C50911 * C839) * C50758) *
                 C17289) *
                C50949) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C50773 * C19889 +
            (C3976 + C3977 - C3978 - C3979) * C50773 * C19890 +
            C20880 * C19891 + C20888 * C19892) *
               C51041 +
           ((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C50773 * C19889 +
            (C4207 - (C4208 + C4209) + C4210) * C50773 * C19890 +
            (C4215 - (C4216 + C4217) + C4218) * C50773 * C19891 +
            (C21019 - (C21020 + C21021) + C21022) * C50773 * C19892) *
               C50853) *
              C1283 +
          (((C3978 - (C3977 + C3976) + C3979) * C50773 * C19889 +
            (C3986 - (C3985 + C3984) + C3987) * C50773 * C19890 +
            (C3992 - (C3993 + C3994) + C3995) * C50773 * C19891 +
            (C20882 - (C20883 + C20884) + C20885) * C50773 * C19892) *
               C51041 +
           ((C4209 + C4208 - C4207 - C4210) * C50773 * C19889 +
            (C4217 + C4216 - C4215 - C4218) * C50773 * C19890 +
            (C21021 + C21020 - C21019 - C21022) * C50773 * C19891 +
            (C20396 * C1391 + C20397 * C1386 -
             (C117 * C3146 + C50911 * C3153) * C1392 -
             (C117 * C3152 + C50911 * C3158) * C50758) *
                C50773 * C19892) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C49770 +
              (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
              C172 * C50758) *
                 C17287 +
             (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                 C17288 +
             (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                 C17289) *
                C17290 +
            ((C2816 + C2817 - C2818 - C2819) * C17287 +
             (C2820 + C2821 - C2822 - C2823) * C17288 +
             (C8604 + C8605 - C8606 - C8607) * C17289) *
                C50949) *
               C1643 +
           (((C475 * C49763 -
              ((C117 * C441 + C50911 * C452) * C51025 +
               (C117 * C435 + C50911 * C442) * C49770) +
              C476 * C50758) *
                 C17287 +
             (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                 C17288 +
             (C479 * C49763 - (C478 * C51025 + C477 * C49770) + C480 * C50758) *
                 C17289) *
                C17290 +
            ((C4903 - (C4904 + C4905) + C4906) * C17287 +
             (C4907 - (C4908 + C4909) + C4910) * C17288 +
             (C10448 - (C10449 + C10450) + C10451) * C17289) *
                C50949) *
               C50853) *
              C1283 +
          ((((C2818 - (C2817 + C2816) + C2819) * C17287 +
             (C2822 - (C2821 + C2820) + C2823) * C17288 +
             (C8606 - (C8605 + C8604) + C8607) * C17289) *
                C17290 +
            ((C2826 - (C2825 + C2824) + C2827) * C17287 +
             (C2830 - (C2829 + C2828) + C2831) * C17288 +
             (C8608 - (C8609 + C8610) + C8611) * C17289) *
                C50949) *
               C1643 +
           (((C4905 + C4904 - C4903 - C4906) * C17287 +
             (C4909 + C4908 - C4907 - C4910) * C17288 +
             (C10450 + C10449 - C10448 - C10451) * C17289) *
                C17290 +
            ((C4913 + C4912 - C4911 - C4914) * C17287 +
             (C4917 + C4916 - C4915 - C4918) * C17288 +
             (C2656 * C49770 + C2657 * C51025 -
              (C117 * C815 + C50911 * C828) * C49763 -
              (C117 * C827 + C50911 * C839) * C50758) *
                 C17289) *
                C50949) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C50773 * C19889 +
            (C2816 + C2817 - C2818 - C2819) * C50773 * C19890 +
            C20194 * C19891 + C20202 * C19892) *
               C1643 +
           ((C475 * C49763 -
             ((C117 * C441 + C50911 * C452) * C51025 +
              (C117 * C435 + C50911 * C442) * C49770) +
             C476 * C50758) *
                C50773 * C19889 +
            (C4903 - (C4904 + C4905) + C4906) * C50773 * C19890 +
            (C4911 - (C4912 + C4913) + C4914) * C50773 * C19891 +
            (C21479 - (C21480 + C21481) + C21482) * C50773 * C19892) *
               C50853) *
              C1283 +
          (((C2818 - (C2817 + C2816) + C2819) * C50773 * C19889 +
            (C2826 - (C2825 + C2824) + C2827) * C50773 * C19890 +
            (C2832 - (C2854 + C2855) + C2837) * C50773 * C19891 +
            (C20196 - (C20197 + C20198) + C20199) * C50773 * C19892) *
               C1643 +
           ((C4905 + C4904 - C4903 - C4906) * C50773 * C19889 +
            (C4913 + C4912 - C4911 - C4914) * C50773 * C19890 +
            (C21481 + C21480 - C21479 - C21482) * C50773 * C19891 +
            (C20396 * C49770 + C20397 * C51025 -
             (C117 * C3146 + C50911 * C3153) * C49763 -
             (C117 * C3152 + C50911 * C3158) * C50758) *
                C50773 * C19892) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C17287 +
             (C171 * C696 + C172 * C50753) * C17288 +
             (C173 * C696 + C174 * C50753) * C17289) *
                C17290 +
            ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
             (C8710 + C8711) * C17289) *
                C50949) *
               C1643 -
           (((C8862 + C8863) * C17289 + (C3167 + C3168) * C17288 +
             (C3193 + C3194) * C17287) *
                C50949 +
            ((C478 * C50753 + C477 * C696) * C17289 +
             (C476 * C50753 + C475 * C696) * C17288 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C17287) *
                C17290) *
               C50853) *
              C51086 +
          ((((C3194 + C3193) * C17287 + (C3168 + C3167) * C17288 +
             (C8863 + C8862) * C17289) *
                C17290 +
            ((C3192 + C3191) * C17287 + (C3162 + C3161) * C17288 +
             (C8864 + C8865) * C17289) *
                C50949) *
               C50853 -
           (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
             (C2972 + C2971) * C17287) *
                C50949 +
            ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
             (C2968 + C2967) * C17287) *
                C17290) *
               C1643) *
              C51073 +
          (((C2985 * C17287 + C2986 * C17288 + (C8713 + C8712) * C17289) *
                C17290 +
            ((C2978 + C2977) * C17287 + (C2976 + C2975) * C17288 +
             (C8714 + C8715) * C17289) *
                C50949) *
               C1643 -
           ((((C117 * C4204 + C50911 * C4205) * C50753 +
              (C117 * C4202 + C50911 * C4203) * C696) *
                 C17289 +
             (C3198 + C3197) * C17288 + (C3196 + C3195) * C17287) *
                C50949 +
            ((C8865 + C8864) * C17289 + C3181 * C17288 + C3199 * C17287) *
                C17290) *
               C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C50773 * C19889 +
            (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
            C20281 * C19892) *
               C1643 -
           (C20395 * C19892 + C20390 * C19891 +
            (C3193 + C3194) * C50773 * C19890 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C50773 * C19889) *
               C50853) *
              C51086 +
          (((C3194 + C3193) * C50773 * C19889 +
            (C3192 + C3191) * C50773 * C19890 +
            (C3195 + C3196) * C50773 * C19891 +
            (C20398 + C20399) * C50773 * C19892) *
               C50853 -
           (C20282 * C19892 + C20276 * C19891 +
            (C2972 + C2971) * C50773 * C19890 +
            (C2968 + C2967) * C50773 * C19889) *
               C1643) *
              C51073 +
          ((C20273 * C19889 + C20281 * C19890 +
            (C2995 + C2996) * C50773 * C19891 +
            (C20285 + C20286) * C50773 * C19892) *
               C1643 -
           (((C117 * C20385 + C50911 * C20387) * C50753 +
             (C117 * C20384 + C50911 * C20386) * C696) *
                C50773 * C19892 +
            (C20399 + C20398) * C50773 * C19891 + C20395 * C19890 +
            C20390 * C19889) *
               C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C117 * C122 + C50911 * C129) * C696 +
                       (C117 * C130 + C50911 * C143) * C50753) *
                          C17287 +
                      (C171 * C696 + C172 * C50753) * C17288 +
                      (C173 * C696 + C174 * C50753) * C17289) *
                         C17290 +
                     ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
                      (C8710 + C8711) * C17289) *
                         C50949) *
                        C51087 -
                    (((C8862 + C8863) * C17289 + (C3167 + C3168) * C17288 +
                      (C3193 + C3194) * C17287) *
                         C50949 +
                     ((C478 * C50753 + C477 * C696) * C17289 +
                      (C476 * C50753 + C475 * C696) * C17288 +
                      ((C117 * C441 + C50911 * C452) * C50753 +
                       (C117 * C435 + C50911 * C442) * C696) *
                          C17287) *
                         C17290) *
                        C51076 +
                    ((((C117 * C944 + C50911 * C949) * C696 +
                       (C117 * C950 + C50911 * C959) * C50753) *
                          C17287 +
                      (C977 * C696 + C978 * C50753) * C17288 +
                      (C979 * C696 + C980 * C50753) * C17289) *
                         C17290 +
                     ((C3542 + C3543) * C17287 + (C3530 + C3531) * C17288 +
                      (C9164 + C9165) * C17289) *
                         C50949) *
                        C1875) *
                       C1283 +
                   ((((C3194 + C3193) * C17287 + (C3168 + C3167) * C17288 +
                      (C8863 + C8862) * C17289) *
                         C17290 +
                     ((C3192 + C3191) * C17287 + (C3162 + C3161) * C17288 +
                      (C8864 + C8865) * C17289) *
                         C50949) *
                        C51076 -
                    (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
                      (C2972 + C2971) * C17287) *
                         C50949 +
                     ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
                      (C2968 + C2967) * C17287) *
                         C17290) *
                        C51087 -
                    ((((C117 * C3355 + C50911 * C3358) * C50753 +
                       (C117 * C3349 + C50911 * C3354) * C696) *
                          C17289 +
                      (C3537 + C3536) * C17288 + (C3545 + C3544) * C17287) *
                         C50949 +
                     ((C9165 + C9164) * C17289 + (C3531 + C3530) * C17288 +
                      (C3543 + C3542) * C17287) *
                         C17290) *
                        C1875) *
                       C50829)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50911 * C129) * C696 +
                      (C117 * C130 + C50911 * C143) * C50753) *
                         C50773 * C19889 +
                     (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
                     C20281 * C19892) *
                        C51087 -
                    (C20395 * C19892 + C20390 * C19891 +
                     (C3193 + C3194) * C50773 * C19890 +
                     ((C117 * C441 + C50911 * C452) * C50753 +
                      (C117 * C435 + C50911 * C442) * C696) *
                         C50773 * C19889) *
                        C51076 +
                    (((C117 * C944 + C50911 * C949) * C696 +
                      (C117 * C950 + C50911 * C959) * C50753) *
                         C50773 * C19889 +
                     (C3542 + C3543) * C50773 * C19890 +
                     (C3544 + C3545) * C50773 * C19891 +
                     (C20606 + C20607) * C50773 * C19892) *
                        C1875) *
                       C1283 +
                   (((C3194 + C3193) * C50773 * C19889 +
                     (C3192 + C3191) * C50773 * C19890 +
                     (C3195 + C3196) * C50773 * C19891 +
                     (C20398 + C20399) * C50773 * C19892) *
                        C51076 -
                    (C20282 * C19892 + C20276 * C19891 +
                     (C2972 + C2971) * C50773 * C19890 +
                     (C2968 + C2967) * C50773 * C19889) *
                        C51087 -
                    (((C117 * C20596 + C50911 * C20598) * C50753 +
                      (C117 * C20595 + C50911 * C20597) * C696) *
                         C50773 * C19892 +
                     (C20607 + C20606) * C50773 * C19891 +
                     (C3545 + C3544) * C50773 * C19890 +
                     (C3543 + C3542) * C50773 * C19889) *
                        C1875) *
                       C50829)) /
                     (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C17287 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C17288 +
            (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                C17289) *
               C17290 +
           ((C2816 + C2817 - C2818 - C2819) * C17287 +
            (C2820 + C2821 - C2822 - C2823) * C17288 +
            (C8604 + C8605 - C8606 - C8607) * C17289) *
               C50949) *
              C50841 * C582 +
          (((C2818 - (C2817 + C2816) + C2819) * C17287 +
            (C2822 - (C2821 + C2820) + C2823) * C17288 +
            (C8606 - (C8605 + C8604) + C8607) * C17289) *
               C17290 +
           ((C2826 - (C2825 + C2824) + C2827) * C17287 +
            (C2830 - (C2829 + C2828) + C2831) * C17288 +
            (C8608 - (C8609 + C8610) + C8611) * C17289) *
               C50949) *
              C50841 * C583 +
          ((C2856 * C17287 + C2857 * C17288 +
            (C8610 + C8609 - C8608 - C8611) * C17289) *
               C17290 +
           ((C2855 + C2854 - C2832 - C2837) * C17287 +
            (C2840 + C2839 - C2838 - C2841) * C17288 +
            (C2494 * C49770 + C2495 * C51025 -
             (C117 * C697 + C50911 * C702) * C49763 -
             (C117 * C701 + C50911 * C709) * C50758) *
                C17289) *
               C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C118 +
            (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C17287 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C17288 +
           (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C17289) *
              C17290 +
          ((C2488 * C118 + C2489 * C106 - C327 * C119 - C328 * C107 +
            C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
               C17287 +
           (C327 * C118 + C328 * C106 - C329 * C119 - C330 * C107 +
            C331 * C120 + C332 * C108 - C333 * C121 - C334 * C109) *
               C17288 +
           (C329 * C118 + C330 * C106 - C331 * C119 - C332 * C107 +
            C333 * C120 + C334 * C108 - (C117 * C291 + C50911 * C302) * C121 -
            (C117 * C303 + C50911 * C309) * C109) *
               C17289) *
              C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C17287 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C17288 +
            (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                C17289) *
               C17290 +
           ((C2816 + C2817 - C2818 - C2819) * C17287 +
            (C2820 + C2821 - C2822 - C2823) * C17288 +
            (C8604 + C8605 - C8606 - C8607) * C17289) *
               C50949) *
              C941 +
          (((C475 * C49763 -
             ((C117 * C441 + C50911 * C452) * C51025 +
              (C117 * C435 + C50911 * C442) * C49770) +
             C476 * C50758) *
                C17287 +
            (C477 * C49763 - (C476 * C51025 + C475 * C49770) + C478 * C50758) *
                C17288 +
            (C479 * C49763 - (C478 * C51025 + C477 * C49770) + C480 * C50758) *
                C17289) *
               C17290 +
           ((C4903 - (C4904 + C4905) + C4906) * C17287 +
            (C4907 - (C4908 + C4909) + C4910) * C17288 +
            (C10448 - (C10449 + C10450) + C10451) * C17289) *
               C50949) *
              C942 +
          ((((C117 * C944 + C50911 * C949) * C49770 +
             (C117 * C950 + C50911 * C959) * C51025 - C977 * C49763 -
             C978 * C50758) *
                C17287 +
            (C977 * C49770 + C978 * C51025 - C979 * C49763 - C980 * C50758) *
                C17288 +
            (C979 * C49770 + C980 * C51025 - C981 * C49763 - C982 * C50758) *
                C17289) *
               C17290 +
           ((C3538 * C49770 + C3539 * C51025 - C3368 * C49763 -
             C3369 * C50758) *
                C17287 +
            (C3368 * C49770 + C3369 * C51025 - C9016 * C49763 -
             C9017 * C50758) *
                C17288 +
            (C9016 * C49770 + C9017 * C51025 -
             (C117 * C1080 + C50911 * C1085) * C49763 -
             (C117 * C1084 + C50911 * C1092) * C50758) *
                C17289) *
               C50949) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50911 * C129) * C118 +
           (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50773 * C19889 +
          (C2488 * C118 + C2489 * C106 - C327 * C119 - C328 * C107 +
           C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
              C50773 * C19890 +
          (C2490 * C118 + C2491 * C106 - C620 * C119 - C621 * C107 +
           C622 * C120 + C623 * C108 - C624 * C121 - C625 * C109) *
              C50773 * C19891 +
          (C2849 * C118 + C2848 * C106 - C2492 * C119 - C2493 * C107 +
           C2494 * C120 + C2495 * C108 - (C117 * C697 + C50911 * C702) * C121 -
           (C117 * C701 + C50911 * C709) * C109) *
              C50773 * C19892) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C49770 +
            (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
            C172 * C50758) *
               C50773 * C19889 +
           (C2816 + C2817 - C2818 - C2819) * C50773 * C19890 + C20194 * C19891 +
           C20202 * C19892) *
              C50841 * C582 +
          ((C2818 - (C2817 + C2816) + C2819) * C50773 * C19889 +
           (C2826 - (C2825 + C2824) + C2827) * C50773 * C19890 +
           (C2832 - (C2854 + C2855) + C2837) * C50773 * C19891 +
           (C20196 - (C20197 + C20198) + C20199) * C50773 * C19892) *
              C50841 * C583 +
          (C20194 * C19889 + C20202 * C19890 +
           (C20198 + C20197 - C20196 - C20199) * C50773 * C19891 +
           ((C117 * C2959 + C50911 * C2963) * C49770 +
            (C117 * C2962 + C50911 * C2965) * C51025 -
            (C117 * C2958 + C50911 * C2961) * C49763 -
            (C117 * C2960 + C50911 * C2964) * C50758) *
               C50773 * C19892) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C49770 +
            (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
            C172 * C50758) *
               C50773 * C19889 +
           (C2816 + C2817 - C2818 - C2819) * C50773 * C19890 + C20194 * C19891 +
           C20202 * C19892) *
              C941 +
          ((C475 * C49763 -
            ((C117 * C441 + C50911 * C452) * C51025 +
             (C117 * C435 + C50911 * C442) * C49770) +
            C476 * C50758) *
               C50773 * C19889 +
           (C4903 - (C4904 + C4905) + C4906) * C50773 * C19890 +
           (C4911 - (C4912 + C4913) + C4914) * C50773 * C19891 +
           (C3188 * C49763 - (C3187 * C51025 + C3186 * C49770) +
            C3189 * C50758) *
               C50773 * C19892) *
              C942 +
          (((C117 * C944 + C50911 * C949) * C49770 +
            (C117 * C950 + C50911 * C959) * C51025 - C977 * C49763 -
            C978 * C50758) *
               C50773 * C19889 +
           (C3538 * C49770 + C3539 * C51025 - C3368 * C49763 - C3369 * C50758) *
               C50773 * C19890 +
           (C3540 * C49770 + C3541 * C51025 - C3370 * C49763 - C3371 * C50758) *
               C50773 * C19891 +
           ((C117 * C3518 + C50911 * C3522) * C49770 +
            (C117 * C3521 + C50911 * C3524) * C51025 -
            (C117 * C3517 + C50911 * C3520) * C49763 -
            (C117 * C3519 + C50911 * C3523) * C50758) *
               C50773 * C19892) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C17287 +
            (C171 * C696 + C172 * C50753) * C17288 +
            (C173 * C696 + C174 * C50753) * C17289) *
               C17290 +
           ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
            (C8710 + C8711) * C17289) *
               C50949) *
              C50841 * C692 -
          (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
            (C2972 + C2971) * C17287) *
               C50949 +
           ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
            (C2968 + C2967) * C17287) *
               C17290) *
              C50841 * C693 +
          ((C2985 * C17287 + C2986 * C17288 + (C8713 + C8712) * C17289) *
               C17290 +
           ((C2978 + C2977) * C17287 + (C2976 + C2975) * C17288 +
            (C8714 + C8715) * C17289) *
               C50949) *
              C50841 * C694 -
          ((((C117 * C2811 + C50911 * C2814) * C50753 +
             (C117 * C2805 + C50911 * C2810) * C696) *
                C17289 +
            (C2984 + C2983) * C17288 + (C2996 + C2995) * C17287) *
               C50949 +
           ((C8715 + C8714) * C17289 + C2987 * C17288 + C2988 * C17287) *
               C17290) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C17287 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C17288 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C17289) *
               C17290 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C17287 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C17288 +
            (C8306 + C8307 - C8308 - C8309 + C8310 + C8311) * C17289) *
               C50949) *
              C50841 * C51040 +
          (((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C17287 +
            (C2462 - (C2461 + C2460) + C2463 - C2464 - C2465) * C17288 +
            (C8308 - (C8307 + C8306) + C8309 - C8310 - C8311) * C17289) *
               C17290 +
           ((C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C17287 +
            (C2476 - (C2475 + C2474) + C2477 - C2478 - C2479) * C17288 +
            (C624 * C284 - (C623 * C278 + C622 * C283) + C625 * C279 -
             (C117 * C591 + C50911 * C600) * C285 -
             (C117 * C601 + C50911 * C606) * C280) *
                C17289) *
               C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C17287 +
             (C171 * C696 + C172 * C50753) * C17288 +
             (C173 * C696 + C174 * C50753) * C17289) *
                C17290 +
            ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
             (C8710 + C8711) * C17289) *
                C50949) *
               C941 -
           (((C8862 + C8863) * C17289 + (C3167 + C3168) * C17288 +
             (C3193 + C3194) * C17287) *
                C50949 +
            ((C478 * C50753 + C477 * C696) * C17289 +
             (C476 * C50753 + C475 * C696) * C17288 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C17287) *
                C17290) *
               C942 +
           ((((C117 * C944 + C50911 * C949) * C696 +
              (C117 * C950 + C50911 * C959) * C50753) *
                 C17287 +
             (C977 * C696 + C978 * C50753) * C17288 +
             (C979 * C696 + C980 * C50753) * C17289) *
                C17290 +
            ((C3542 + C3543) * C17287 + (C3530 + C3531) * C17288 +
             (C9164 + C9165) * C17289) *
                C50949) *
               C943) *
              C51040 +
          ((((C3194 + C3193) * C17287 + (C3168 + C3167) * C17288 +
             (C8863 + C8862) * C17289) *
                C17290 +
            ((C3192 + C3191) * C17287 + (C3162 + C3161) * C17288 +
             (C8864 + C8865) * C17289) *
                C50949) *
               C942 -
           (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
             (C2972 + C2971) * C17287) *
                C50949 +
            ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
             (C2968 + C2967) * C17287) *
                C17290) *
               C941 -
           ((((C117 * C3355 + C50911 * C3358) * C50753 +
              (C117 * C3349 + C50911 * C3354) * C696) *
                 C17289 +
             (C3537 + C3536) * C17288 + (C3545 + C3544) * C17287) *
                C50949 +
            ((C9165 + C9164) * C17289 + (C3531 + C3530) * C17288 +
             (C3543 + C3542) * C17287) *
                C17290) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50773 * C19889 +
           (C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C50773 * C19890 +
           (C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C50773 * C19891 +
           (C19992 + C19993 - C19994 - C19995 + C19996 + C19997) * C50773 *
               C19892) *
              C50841 * C51040 +
          ((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C50773 * C19889 +
           (C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C50773 * C19890 +
           (C19994 - (C19993 + C19992) + C19995 - C19996 - C19997) * C50773 *
               C19891 +
           (C2850 * C284 - (C2990 * C278 + C2989 * C283) + C2851 * C279 -
            (C117 * C2805 + C50911 * C2810) * C285 -
            (C117 * C2811 + C50911 * C2814) * C280) *
               C50773 * C19892) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C696 +
            (C117 * C130 + C50911 * C143) * C50753) *
               C50773 * C19889 +
           (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
           C20281 * C19892) *
              C50841 * C692 -
          (C20282 * C19892 + C20276 * C19891 +
           (C2972 + C2971) * C50773 * C19890 +
           (C2968 + C2967) * C50773 * C19889) *
              C50841 * C693 +
          (C20273 * C19889 + C20281 * C19890 +
           (C2995 + C2996) * C50773 * C19891 +
           (C20285 + C20286) * C50773 * C19892) *
              C50841 * C694 -
          (((C117 * C20269 + C50911 * C20271) * C50753 +
            (C117 * C20268 + C50911 * C20270) * C696) *
               C50773 * C19892 +
           (C20286 + C20285) * C50773 * C19891 + C20282 * C19890 +
           C20276 * C19889) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C50773 * C19889 +
            (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
            C20281 * C19892) *
               C941 -
           (C20395 * C19892 + C20390 * C19891 +
            (C3193 + C3194) * C50773 * C19890 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C50773 * C19889) *
               C942 +
           (((C117 * C944 + C50911 * C949) * C696 +
             (C117 * C950 + C50911 * C959) * C50753) *
                C50773 * C19889 +
            (C3542 + C3543) * C50773 * C19890 +
            (C3544 + C3545) * C50773 * C19891 +
            (C20606 + C20607) * C50773 * C19892) *
               C943) *
              C51040 +
          (((C3194 + C3193) * C50773 * C19889 +
            (C3192 + C3191) * C50773 * C19890 +
            (C3195 + C3196) * C50773 * C19891 +
            (C20398 + C20399) * C50773 * C19892) *
               C942 -
           (C20282 * C19892 + C20276 * C19891 +
            (C2972 + C2971) * C50773 * C19890 +
            (C2968 + C2967) * C50773 * C19889) *
               C941 -
           (((C117 * C20596 + C50911 * C20598) * C50753 +
             (C117 * C20595 + C50911 * C20597) * C696) *
                C50773 * C19892 +
            (C20607 + C20606) * C50773 * C19891 +
            (C3545 + C3544) * C50773 * C19890 +
            (C3543 + C3542) * C50773 * C19889) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C17287 +
             (C171 * C696 + C172 * C50753) * C17288 +
             (C173 * C696 + C174 * C50753) * C17289) *
                C17290 +
            ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
             (C8710 + C8711) * C17289) *
                C50949) *
               C51041 -
           (((C8862 + C8863) * C17289 + (C3167 + C3168) * C17288 +
             (C3193 + C3194) * C17287) *
                C50949 +
            ((C478 * C50753 + C477 * C696) * C17289 +
             (C476 * C50753 + C475 * C696) * C17288 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C17287) *
                C17290) *
               C50853) *
              C582 +
          ((((C3194 + C3193) * C17287 + (C3168 + C3167) * C17288 +
             (C8863 + C8862) * C17289) *
                C17290 +
            ((C3192 + C3191) * C17287 + (C3162 + C3161) * C17288 +
             (C8864 + C8865) * C17289) *
                C50949) *
               C50853 -
           (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
             (C2972 + C2971) * C17287) *
                C50949 +
            ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
             (C2968 + C2967) * C17287) *
                C17290) *
               C51041) *
              C583 +
          (((C2985 * C17287 + C2986 * C17288 + (C8713 + C8712) * C17289) *
                C17290 +
            ((C2978 + C2977) * C17287 + (C2976 + C2975) * C17288 +
             (C8714 + C8715) * C17289) *
                C50949) *
               C51041 -
           ((((C117 * C4204 + C50911 * C4205) * C50753 +
              (C117 * C4202 + C50911 * C4203) * C696) *
                 C17289 +
             (C3198 + C3197) * C17288 + (C3196 + C3195) * C17287) *
                C50949 +
            ((C8865 + C8864) * C17289 + C3181 * C17288 + C3199 * C17287) *
                C17290) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C17287 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C17288 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C17289) *
               C17290 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C17287 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C17288 +
            (C8306 + C8307 - C8308 - C8309 + C8310 + C8311) * C17289) *
               C50949) *
              C51041 +
          (((C475 * C284 -
             ((C117 * C441 + C50911 * C452) * C278 +
              (C117 * C435 + C50911 * C442) * C283) +
             C476 * C279 - C477 * C285 - C478 * C280) *
                C17287 +
            (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
             C479 * C285 - C480 * C280) *
                C17288 +
            (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
             C481 * C285 - C482 * C280) *
                C17289) *
               C17290 +
           ((C1540 * C284 - (C3184 * C278 + C3185 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C17287 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C17288 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50911 * C1524) * C285 -
             (C117 * C1525 + C50911 * C1526) * C280) *
                C17289) *
               C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C17287 +
            (C171 * C696 + C172 * C50753) * C17288 +
            (C173 * C696 + C174 * C50753) * C17289) *
               C17290 +
           ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
            (C8710 + C8711) * C17289) *
               C50949) *
              C1162 -
          (((C8862 + C8863) * C17289 + (C3167 + C3168) * C17288 +
            (C3193 + C3194) * C17287) *
               C50949 +
           ((C478 * C50753 + C477 * C696) * C17289 +
            (C476 * C50753 + C475 * C696) * C17288 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C17287) *
               C17290) *
              C1163 +
          ((((C117 * C944 + C50911 * C949) * C696 +
             (C117 * C950 + C50911 * C959) * C50753) *
                C17287 +
            (C977 * C696 + C978 * C50753) * C17288 +
            (C979 * C696 + C980 * C50753) * C17289) *
               C17290 +
           ((C3542 + C3543) * C17287 + (C3530 + C3531) * C17288 +
            (C9164 + C9165) * C17289) *
               C50949) *
              C1164 -
          ((((C117 * C7064 + C50911 * C7065) * C50753 +
             (C117 * C7062 + C50911 * C7063) * C696) *
                C17289 +
            ((C117 * C3651 + C50911 * C3657) * C50753 +
             (C117 * C3645 + C50911 * C3652) * C696) *
                C17288 +
            ((C117 * C3653 + C50911 * C3658) * C50753 +
             (C117 * C3646 + C50911 * C3654) * C696) *
                C17287) *
               C50949 +
           (((C117 * C1172 + C50911 * C1179) * C50753 +
             (C117 * C1167 + C50911 * C1173) * C696) *
                C17289 +
            ((C117 * C1174 + C50911 * C1180) * C50753 +
             (C117 * C1168 + C50911 * C1175) * C696) *
                C17288 +
            ((C117 * C1176 + C50911 * C1181) * C50753 +
             (C117 * C1169 + C50911 * C1177) * C696) *
                C17287) *
               C17290) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50773 * C19889 +
           (C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C50773 * C19890 +
           (C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C50773 * C19891 +
           (C19992 + C19993 - C19994 - C19995 + C19996 + C19997) * C50773 *
               C19892) *
              C51041 +
          ((C475 * C284 -
            ((C117 * C441 + C50911 * C452) * C278 +
             (C117 * C435 + C50911 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C50773 * C19889 +
           (C1540 * C284 - (C3184 * C278 + C3185 * C283) + C1541 * C279 -
            C1542 * C285 - C1543 * C280) *
               C50773 * C19890 +
           (C2654 * C284 - (C3182 * C278 + C3183 * C283) + C2655 * C279 -
            C2656 * C285 - C2657 * C280) *
               C50773 * C19891 +
           (C3188 * C284 - (C3187 * C278 + C3186 * C283) + C3189 * C279 -
            (C117 * C4202 + C50911 * C4203) * C285 -
            (C117 * C4204 + C50911 * C4205) * C280) *
               C50773 * C19892) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C50773 * C19889 +
            (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
            C20281 * C19892) *
               C51041 -
           (C20395 * C19892 + C20390 * C19891 +
            (C3193 + C3194) * C50773 * C19890 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C50773 * C19889) *
               C50853) *
              C582 +
          (((C3194 + C3193) * C50773 * C19889 +
            (C3192 + C3191) * C50773 * C19890 +
            (C3195 + C3196) * C50773 * C19891 +
            (C20398 + C20399) * C50773 * C19892) *
               C50853 -
           (C20282 * C19892 + C20276 * C19891 +
            (C2972 + C2971) * C50773 * C19890 +
            (C2968 + C2967) * C50773 * C19889) *
               C51041) *
              C583 +
          ((C20273 * C19889 + C20281 * C19890 +
            (C2995 + C2996) * C50773 * C19891 +
            (C20285 + C20286) * C50773 * C19892) *
               C51041 -
           (((C117 * C20385 + C50911 * C20387) * C50753 +
             (C117 * C20384 + C50911 * C20386) * C696) *
                C50773 * C19892 +
            (C20399 + C20398) * C50773 * C19891 + C20395 * C19890 +
            C20390 * C19889) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C696 +
            (C117 * C130 + C50911 * C143) * C50753) *
               C50773 * C19889 +
           (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
           C20281 * C19892) *
              C1162 -
          (C20395 * C19892 + C20390 * C19891 +
           (C3193 + C3194) * C50773 * C19890 +
           ((C117 * C441 + C50911 * C452) * C50753 +
            (C117 * C435 + C50911 * C442) * C696) *
               C50773 * C19889) *
              C1163 +
          (((C117 * C944 + C50911 * C949) * C696 +
            (C117 * C950 + C50911 * C959) * C50753) *
               C50773 * C19889 +
           (C3542 + C3543) * C50773 * C19890 +
           (C3544 + C3545) * C50773 * C19891 +
           (C20606 + C20607) * C50773 * C19892) *
              C1164 -
          (((C117 * C20674 + C50911 * C20676) * C50753 +
            (C117 * C20673 + C50911 * C20675) * C696) *
               C50773 * C19892 +
           ((C117 * C3649 + C50911 * C3656) * C50753 +
            (C117 * C3644 + C50911 * C3650) * C696) *
               C50773 * C19891 +
           ((C117 * C3653 + C50911 * C3658) * C50753 +
            (C117 * C3646 + C50911 * C3654) * C696) *
               C50773 * C19890 +
           ((C117 * C1176 + C50911 * C1181) * C50753 +
            (C117 * C1169 + C50911 * C1177) * C696) *
               C50773 * C19889) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1285 +
             (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
             C172 * C51067 + C173 * C1287 + C174 * C1282) *
                C17287 +
            (C171 * C1285 + C172 * C51083 - C173 * C1286 - C174 * C51067 +
             C175 * C1287 + C176 * C1282) *
                C17288 +
            (C173 * C1285 + C174 * C51083 - C175 * C1286 - C176 * C51067 +
             C177 * C1287 + C178 * C1282) *
                C17289) *
               C17290 +
           ((C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C17287 +
            (C3812 + C3813 - C3814 - C3815 + C3816 + C3817) * C17288 +
            (C9410 + C9411 - C9412 - C9413 + C9414 + C9415) * C17289) *
               C50949) *
              C1643 +
          (((C475 * C1286 -
             ((C117 * C441 + C50911 * C452) * C51083 +
              (C117 * C435 + C50911 * C442) * C1285) +
             C476 * C51067 - C477 * C1287 - C478 * C1282) *
                C17287 +
            (C477 * C1286 - (C476 * C51083 + C475 * C1285) + C478 * C51067 -
             C479 * C1287 - C480 * C1282) *
                C17288 +
            (C479 * C1286 - (C478 * C51083 + C477 * C1285) + C480 * C51067 -
             C481 * C1287 - C482 * C1282) *
                C17289) *
               C17290 +
           ((C1540 * C1286 - (C3184 * C51083 + C3185 * C1285) + C1541 * C51067 -
             C1542 * C1287 - C1543 * C1282) *
                C17287 +
            (C1542 * C1286 - (C1541 * C51083 + C1540 * C1285) + C1543 * C51067 -
             C1544 * C1287 - C1545 * C1282) *
                C17288 +
            (C1544 * C1286 - (C1543 * C51083 + C1542 * C1285) + C1545 * C51067 -
             (C117 * C1523 + C50911 * C1524) * C1287 -
             (C117 * C1525 + C50911 * C1526) * C1282) *
                C17289) *
               C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1285 +
            (C117 * C130 + C50911 * C143) * C51083 - C171 * C1286 -
            C172 * C51067 + C173 * C1287 + C174 * C1282) *
               C50773 * C19889 +
           (C3806 + C3807 - C3808 - C3809 + C3810 + C3811) * C50773 * C19890 +
           (C3818 + C3819 - C3820 - C3821 + C3822 + C3823) * C50773 * C19891 +
           (C20776 + C20777 - C20778 - C20779 + C20780 + C20781) * C50773 *
               C19892) *
              C1643 +
          ((C475 * C1286 -
            ((C117 * C441 + C50911 * C452) * C51083 +
             (C117 * C435 + C50911 * C442) * C1285) +
            C476 * C51067 - C477 * C1287 - C478 * C1282) *
               C50773 * C19889 +
           (C1540 * C1286 - (C3184 * C51083 + C3185 * C1285) + C1541 * C51067 -
            C1542 * C1287 - C1543 * C1282) *
               C50773 * C19890 +
           (C2654 * C1286 - (C3182 * C51083 + C3183 * C1285) + C2655 * C51067 -
            C2656 * C1287 - C2657 * C1282) *
               C50773 * C19891 +
           (C3188 * C1286 - (C3187 * C51083 + C3186 * C1285) + C3189 * C51067 -
            (C117 * C4202 + C50911 * C4203) * C1287 -
            (C117 * C4204 + C50911 * C4205) * C1282) *
               C50773 * C19892) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C1391 +
              (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
              C172 * C50758) *
                 C17287 +
             (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                 C17288 +
             (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                 C17289) *
                C17290 +
            ((C3976 + C3977 - C3978 - C3979) * C17287 +
             (C3980 + C3981 - C3982 - C3983) * C17288 +
             (C9562 + C9563 - C9564 - C9565) * C17289) *
                C50949) *
               C1643 +
           (((C475 * C1392 -
              ((C117 * C441 + C50911 * C452) * C1386 +
               (C117 * C435 + C50911 * C442) * C1391) +
              C476 * C50758) *
                 C17287 +
             (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                 C17288 +
             (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                 C17289) *
                C17290 +
            ((C4207 - (C4208 + C4209) + C4210) * C17287 +
             (C4211 - (C4212 + C4213) + C4214) * C17288 +
             (C9764 - (C9765 + C9766) + C9767) * C17289) *
                C50949) *
               C50853) *
              C51040 +
          ((((C3978 - (C3977 + C3976) + C3979) * C17287 +
             (C3982 - (C3981 + C3980) + C3983) * C17288 +
             (C9564 - (C9563 + C9562) + C9565) * C17289) *
                C17290 +
            ((C3986 - (C3985 + C3984) + C3987) * C17287 +
             (C3990 - (C3989 + C3988) + C3991) * C17288 +
             (C9566 - (C9567 + C9568) + C9569) * C17289) *
                C50949) *
               C1643 +
           (((C4209 + C4208 - C4207 - C4210) * C17287 +
             (C4213 + C4212 - C4211 - C4214) * C17288 +
             (C9766 + C9765 - C9764 - C9767) * C17289) *
                C17290 +
            ((C4217 + C4216 - C4215 - C4218) * C17287 +
             (C4221 + C4220 - C4219 - C4222) * C17288 +
             (C2656 * C1391 + C2657 * C1386 -
              (C117 * C815 + C50911 * C828) * C1392 -
              (C117 * C827 + C50911 * C839) * C50758) *
                 C17289) *
                C50949) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C50773 * C19889 +
            (C3976 + C3977 - C3978 - C3979) * C50773 * C19890 +
            C20880 * C19891 + C20888 * C19892) *
               C1643 +
           ((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C50773 * C19889 +
            (C4207 - (C4208 + C4209) + C4210) * C50773 * C19890 +
            (C4215 - (C4216 + C4217) + C4218) * C50773 * C19891 +
            (C21019 - (C21020 + C21021) + C21022) * C50773 * C19892) *
               C50853) *
              C51040 +
          (((C3978 - (C3977 + C3976) + C3979) * C50773 * C19889 +
            (C3986 - (C3985 + C3984) + C3987) * C50773 * C19890 +
            (C3992 - (C3993 + C3994) + C3995) * C50773 * C19891 +
            (C20882 - (C20883 + C20884) + C20885) * C50773 * C19892) *
               C1643 +
           ((C4209 + C4208 - C4207 - C4210) * C50773 * C19889 +
            (C4217 + C4216 - C4215 - C4218) * C50773 * C19890 +
            (C21021 + C21020 - C21019 - C21022) * C50773 * C19891 +
            (C20396 * C1391 + C20397 * C1386 -
             (C117 * C3146 + C50911 * C3153) * C1392 -
             (C117 * C3152 + C50911 * C3158) * C50758) *
                C50773 * C19892) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C1391 +
             (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
             C172 * C50758) *
                C17287 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50758) *
                C17288 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50758) *
                C17289) *
               C17290 +
           ((C3976 + C3977 - C3978 - C3979) * C17287 +
            (C3980 + C3981 - C3982 - C3983) * C17288 +
            (C9562 + C9563 - C9564 - C9565) * C17289) *
               C50949) *
              C51087 +
          (((C475 * C1392 -
             ((C117 * C441 + C50911 * C452) * C1386 +
              (C117 * C435 + C50911 * C442) * C1391) +
             C476 * C50758) *
                C17287 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50758) *
                C17288 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50758) *
                C17289) *
               C17290 +
           ((C4207 - (C4208 + C4209) + C4210) * C17287 +
            (C4211 - (C4212 + C4213) + C4214) * C17288 +
            (C9764 - (C9765 + C9766) + C9767) * C17289) *
               C50949) *
              C51076 +
          ((((C117 * C944 + C50911 * C949) * C1391 +
             (C117 * C950 + C50911 * C959) * C1386 - C977 * C1392 -
             C978 * C50758) *
                C17287 +
            (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50758) *
                C17288 +
            (C979 * C1391 + C980 * C1386 - C981 * C1392 - C982 * C50758) *
                C17289) *
               C17290 +
           ((C3538 * C1391 + C3539 * C1386 - C3368 * C1392 - C3369 * C50758) *
                C17287 +
            (C3368 * C1391 + C3369 * C1386 - C9016 * C1392 - C9017 * C50758) *
                C17288 +
            (C9016 * C1391 + C9017 * C1386 -
             (C117 * C1080 + C50911 * C1085) * C1392 -
             (C117 * C1084 + C50911 * C1092) * C50758) *
                C17289) *
               C50949) *
              C1875) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C1391 +
            (C117 * C130 + C50911 * C143) * C1386 - C171 * C1392 -
            C172 * C50758) *
               C50773 * C19889 +
           (C3976 + C3977 - C3978 - C3979) * C50773 * C19890 + C20880 * C19891 +
           C20888 * C19892) *
              C51087 +
          ((C475 * C1392 -
            ((C117 * C441 + C50911 * C452) * C1386 +
             (C117 * C435 + C50911 * C442) * C1391) +
            C476 * C50758) *
               C50773 * C19889 +
           (C4207 - (C4208 + C4209) + C4210) * C50773 * C19890 +
           (C4215 - (C4216 + C4217) + C4218) * C50773 * C19891 +
           (C21019 - (C21020 + C21021) + C21022) * C50773 * C19892) *
              C51076 +
          (((C117 * C944 + C50911 * C949) * C1391 +
            (C117 * C950 + C50911 * C959) * C1386 - C977 * C1392 -
            C978 * C50758) *
               C50773 * C19889 +
           (C3538 * C1391 + C3539 * C1386 - C3368 * C1392 - C3369 * C50758) *
               C50773 * C19890 +
           (C3540 * C1391 + C3541 * C1386 - C3370 * C1392 - C3371 * C50758) *
               C50773 * C19891 +
           (C20604 * C1391 + C20605 * C1386 -
            (C117 * C3517 + C50911 * C3520) * C1392 -
            (C117 * C3519 + C50911 * C3523) * C50758) *
               C50773 * C19892) *
              C1875) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C118 +
            (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C17287 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C17288 +
           (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C17289) *
              C17290 +
          ((C2488 * C118 + C2489 * C106 - C327 * C119 - C328 * C107 +
            C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
               C17287 +
           (C327 * C118 + C328 * C106 - C329 * C119 - C330 * C107 +
            C331 * C120 + C332 * C108 - C333 * C121 - C334 * C109) *
               C17288 +
           (C329 * C118 + C330 * C106 - C331 * C119 - C332 * C107 +
            C333 * C120 + C334 * C108 - (C117 * C291 + C50911 * C302) * C121 -
            (C117 * C303 + C50911 * C309) * C109) *
               C17289) *
              C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C49770 +
             (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
             C172 * C50758) *
                C17287 +
            (C171 * C49770 + C172 * C51025 - C173 * C49763 - C174 * C50758) *
                C17288 +
            (C173 * C49770 + C174 * C51025 - C175 * C49763 - C176 * C50758) *
                C17289) *
               C17290 +
           ((C2816 + C2817 - C2818 - C2819) * C17287 +
            (C2820 + C2821 - C2822 - C2823) * C17288 +
            (C8604 + C8605 - C8606 - C8607) * C17289) *
               C50949) *
              C50841 * C582 +
          (((C2818 - (C2817 + C2816) + C2819) * C17287 +
            (C2822 - (C2821 + C2820) + C2823) * C17288 +
            (C8606 - (C8605 + C8604) + C8607) * C17289) *
               C17290 +
           ((C2826 - (C2825 + C2824) + C2827) * C17287 +
            (C2830 - (C2829 + C2828) + C2831) * C17288 +
            (C8608 - (C8609 + C8610) + C8611) * C17289) *
               C50949) *
              C50841 * C583 +
          ((C2856 * C17287 + C2857 * C17288 +
            (C8610 + C8609 - C8608 - C8611) * C17289) *
               C17290 +
           ((C2855 + C2854 - C2832 - C2837) * C17287 +
            (C2840 + C2839 - C2838 - C2841) * C17288 +
            (C2494 * C49770 + C2495 * C51025 -
             (C117 * C697 + C50911 * C702) * C49763 -
             (C117 * C701 + C50911 * C709) * C50758) *
                C17289) *
               C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50911 * C129) * C118 +
           (C117 * C130 + C50911 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50773 * C19889 +
          (C2488 * C118 + C2489 * C106 - C327 * C119 - C328 * C107 +
           C329 * C120 + C330 * C108 - C331 * C121 - C332 * C109) *
              C50773 * C19890 +
          (C2490 * C118 + C2491 * C106 - C620 * C119 - C621 * C107 +
           C622 * C120 + C623 * C108 - C624 * C121 - C625 * C109) *
              C50773 * C19891 +
          (C2849 * C118 + C2848 * C106 - C2492 * C119 - C2493 * C107 +
           C2494 * C120 + C2495 * C108 - (C117 * C697 + C50911 * C702) * C121 -
           (C117 * C701 + C50911 * C709) * C109) *
              C50773 * C19892) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C49770 +
            (C117 * C130 + C50911 * C143) * C51025 - C171 * C49763 -
            C172 * C50758) *
               C50773 * C19889 +
           (C2816 + C2817 - C2818 - C2819) * C50773 * C19890 + C20194 * C19891 +
           C20202 * C19892) *
              C50841 * C582 +
          ((C2818 - (C2817 + C2816) + C2819) * C50773 * C19889 +
           (C2826 - (C2825 + C2824) + C2827) * C50773 * C19890 +
           (C2832 - (C2854 + C2855) + C2837) * C50773 * C19891 +
           (C20196 - (C20197 + C20198) + C20199) * C50773 * C19892) *
              C50841 * C583 +
          (C20194 * C19889 + C20202 * C19890 +
           (C20198 + C20197 - C20196 - C20199) * C50773 * C19891 +
           ((C117 * C2959 + C50911 * C2963) * C49770 +
            (C117 * C2962 + C50911 * C2965) * C51025 -
            (C117 * C2958 + C50911 * C2961) * C49763 -
            (C117 * C2960 + C50911 * C2964) * C50758) *
               C50773 * C19892) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C17287 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C17288 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C17289) *
               C17290 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C17287 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C17288 +
            (C8306 + C8307 - C8308 - C8309 + C8310 + C8311) * C17289) *
               C50949) *
              C50841 * C51040 +
          (((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C17287 +
            (C2462 - (C2461 + C2460) + C2463 - C2464 - C2465) * C17288 +
            (C8308 - (C8307 + C8306) + C8309 - C8310 - C8311) * C17289) *
               C17290 +
           ((C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C17287 +
            (C2476 - (C2475 + C2474) + C2477 - C2478 - C2479) * C17288 +
            (C624 * C284 - (C623 * C278 + C622 * C283) + C625 * C279 -
             (C117 * C591 + C50911 * C600) * C285 -
             (C117 * C601 + C50911 * C606) * C280) *
                C17289) *
               C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C17287 +
            (C171 * C696 + C172 * C50753) * C17288 +
            (C173 * C696 + C174 * C50753) * C17289) *
               C17290 +
           ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
            (C8710 + C8711) * C17289) *
               C50949) *
              C50841 * C692 -
          (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
            (C2972 + C2971) * C17287) *
               C50949 +
           ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
            (C2968 + C2967) * C17287) *
               C17290) *
              C50841 * C693 +
          ((C2985 * C17287 + C2986 * C17288 + (C8713 + C8712) * C17289) *
               C17290 +
           ((C2978 + C2977) * C17287 + (C2976 + C2975) * C17288 +
            (C8714 + C8715) * C17289) *
               C50949) *
              C50841 * C694 -
          ((((C117 * C2811 + C50911 * C2814) * C50753 +
             (C117 * C2805 + C50911 * C2810) * C696) *
                C17289 +
            (C2984 + C2983) * C17288 + (C2996 + C2995) * C17287) *
               C50949 +
           ((C8715 + C8714) * C17289 + C2987 * C17288 + C2988 * C17287) *
               C17290) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50773 * C19889 +
           (C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C50773 * C19890 +
           (C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C50773 * C19891 +
           (C19992 + C19993 - C19994 - C19995 + C19996 + C19997) * C50773 *
               C19892) *
              C50841 * C51040 +
          ((C2456 - (C2497 + C2496) + C2457 - C2458 - C2459) * C50773 * C19889 +
           (C2470 - (C2499 + C2498) + C2471 - C2472 - C2473) * C50773 * C19890 +
           (C19994 - (C19993 + C19992) + C19995 - C19996 - C19997) * C50773 *
               C19891 +
           (C2850 * C284 - (C2990 * C278 + C2989 * C283) + C2851 * C279 -
            (C117 * C2805 + C50911 * C2810) * C285 -
            (C117 * C2811 + C50911 * C2814) * C280) *
               C50773 * C19892) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C696 +
            (C117 * C130 + C50911 * C143) * C50753) *
               C50773 * C19889 +
           (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
           C20281 * C19892) *
              C50841 * C692 -
          (C20282 * C19892 + C20276 * C19891 +
           (C2972 + C2971) * C50773 * C19890 +
           (C2968 + C2967) * C50773 * C19889) *
              C50841 * C693 +
          (C20273 * C19889 + C20281 * C19890 +
           (C2995 + C2996) * C50773 * C19891 +
           (C20285 + C20286) * C50773 * C19892) *
              C50841 * C694 -
          (((C117 * C20269 + C50911 * C20271) * C50753 +
            (C117 * C20268 + C50911 * C20270) * C696) *
               C50773 * C19892 +
           (C20286 + C20285) * C50773 * C19891 + C20282 * C19890 +
           C20276 * C19889) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C283 +
             (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C17287 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C17288 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C17289) *
               C17290 +
           ((C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C17287 +
            (C2460 + C2461 - C2462 - C2463 + C2464 + C2465) * C17288 +
            (C8306 + C8307 - C8308 - C8309 + C8310 + C8311) * C17289) *
               C50949) *
              C51041 +
          (((C475 * C284 -
             ((C117 * C441 + C50911 * C452) * C278 +
              (C117 * C435 + C50911 * C442) * C283) +
             C476 * C279 - C477 * C285 - C478 * C280) *
                C17287 +
            (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
             C479 * C285 - C480 * C280) *
                C17288 +
            (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
             C481 * C285 - C482 * C280) *
                C17289) *
               C17290 +
           ((C1540 * C284 - (C3184 * C278 + C3185 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C17287 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C17288 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50911 * C1524) * C285 -
             (C117 * C1525 + C50911 * C1526) * C280) *
                C17289) *
               C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50911 * C129) * C696 +
              (C117 * C130 + C50911 * C143) * C50753) *
                 C17287 +
             (C171 * C696 + C172 * C50753) * C17288 +
             (C173 * C696 + C174 * C50753) * C17289) *
                C17290 +
            ((C2967 + C2968) * C17287 + (C2969 + C2970) * C17288 +
             (C8710 + C8711) * C17289) *
                C50949) *
               C51041 -
           (((C8862 + C8863) * C17289 + (C3167 + C3168) * C17288 +
             (C3193 + C3194) * C17287) *
                C50949 +
            ((C478 * C50753 + C477 * C696) * C17289 +
             (C476 * C50753 + C475 * C696) * C17288 +
             ((C117 * C441 + C50911 * C452) * C50753 +
              (C117 * C435 + C50911 * C442) * C696) *
                 C17287) *
                C17290) *
               C50853) *
              C582 +
          ((((C3194 + C3193) * C17287 + (C3168 + C3167) * C17288 +
             (C8863 + C8862) * C17289) *
                C17290 +
            ((C3192 + C3191) * C17287 + (C3162 + C3161) * C17288 +
             (C8864 + C8865) * C17289) *
                C50949) *
               C50853 -
           (((C8712 + C8713) * C17289 + (C2974 + C2973) * C17288 +
             (C2972 + C2971) * C17287) *
                C50949 +
            ((C8711 + C8710) * C17289 + (C2970 + C2969) * C17288 +
             (C2968 + C2967) * C17287) *
                C17290) *
               C51041) *
              C583 +
          (((C2985 * C17287 + C2986 * C17288 + (C8713 + C8712) * C17289) *
                C17290 +
            ((C2978 + C2977) * C17287 + (C2976 + C2975) * C17288 +
             (C8714 + C8715) * C17289) *
                C50949) *
               C51041 -
           ((((C117 * C4204 + C50911 * C4205) * C50753 +
              (C117 * C4202 + C50911 * C4203) * C696) *
                 C17289 +
             (C3198 + C3197) * C17288 + (C3196 + C3195) * C17287) *
                C50949 +
            ((C8865 + C8864) * C17289 + C3181 * C17288 + C3199 * C17287) *
                C17290) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50911 * C129) * C283 +
            (C117 * C130 + C50911 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50773 * C19889 +
           (C2496 + C2497 - C2456 - C2457 + C2458 + C2459) * C50773 * C19890 +
           (C2498 + C2499 - C2470 - C2471 + C2472 + C2473) * C50773 * C19891 +
           (C19992 + C19993 - C19994 - C19995 + C19996 + C19997) * C50773 *
               C19892) *
              C51041 +
          ((C475 * C284 -
            ((C117 * C441 + C50911 * C452) * C278 +
             (C117 * C435 + C50911 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C50773 * C19889 +
           (C1540 * C284 - (C3184 * C278 + C3185 * C283) + C1541 * C279 -
            C1542 * C285 - C1543 * C280) *
               C50773 * C19890 +
           (C2654 * C284 - (C3182 * C278 + C3183 * C283) + C2655 * C279 -
            C2656 * C285 - C2657 * C280) *
               C50773 * C19891 +
           (C3188 * C284 - (C3187 * C278 + C3186 * C283) + C3189 * C279 -
            (C117 * C4202 + C50911 * C4203) * C285 -
            (C117 * C4204 + C50911 * C4205) * C280) *
               C50773 * C19892) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50911 * C129) * C696 +
             (C117 * C130 + C50911 * C143) * C50753) *
                C50773 * C19889 +
            (C2967 + C2968) * C50773 * C19890 + C20273 * C19891 +
            C20281 * C19892) *
               C51041 -
           (C20395 * C19892 + C20390 * C19891 +
            (C3193 + C3194) * C50773 * C19890 +
            ((C117 * C441 + C50911 * C452) * C50753 +
             (C117 * C435 + C50911 * C442) * C696) *
                C50773 * C19889) *
               C50853) *
              C582 +
          (((C3194 + C3193) * C50773 * C19889 +
            (C3192 + C3191) * C50773 * C19890 +
            (C3195 + C3196) * C50773 * C19891 +
            (C20398 + C20399) * C50773 * C19892) *
               C50853 -
           (C20282 * C19892 + C20276 * C19891 +
            (C2972 + C2971) * C50773 * C19890 +
            (C2968 + C2967) * C50773 * C19889) *
               C51041) *
              C583 +
          ((C20273 * C19889 + C20281 * C19890 +
            (C2995 + C2996) * C50773 * C19891 +
            (C20285 + C20286) * C50773 * C19892) *
               C51041 -
           (((C117 * C20385 + C50911 * C20387) * C50753 +
             (C117 * C20384 + C50911 * C20386) * C696) *
                C50773 * C19892 +
            (C20399 + C20398) * C50773 * C19891 + C20395 * C19890 +
            C20390 * C19889) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C1285 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C51083 -
             (C33395 + C33396) * C1286 - (C33397 + C33398) * C51067 +
             C33411 * C1287 + C33412 * C1282) *
                C51034 +
            ((C33396 + C33395) * C1285 + (C33398 + C33397) * C51083 -
             (C33400 + C33399) * C1286 - (C33402 + C33401) * C51067 +
             (C33404 + C33403) * C1287 + (C33406 + C33405) * C1282) *
                C50778) *
               C51055 +
           (((C36353 + C36354) * C1285 + (C36355 + C36356) * C51083 -
             C40989 * C1286 - C40990 * C51067 + C40991 * C1287 +
             C40992 * C1282) *
                C51034 +
            (C40993 * C1285 + C40994 * C51083 - C33597 * C1286 -
             C33598 * C51067 + (C33594 + C33593) * C1287 +
             (C33596 + C33595) * C1282) *
                C50778) *
               C50949) *
              C50841 * C1283 +
          (((C40993 * C1286 -
             ((C36356 + C36355) * C51083 + (C36354 + C36353) * C1285) +
             C40994 * C51067 - C33597 * C1287 - C33598 * C1282) *
                C51034 +
            (C40991 * C1286 - (C40990 * C51083 + C40989 * C1285) +
             C40992 * C51067 - (C33593 + C33594) * C1287 -
             (C33595 + C33596) * C1282) *
                C50778) *
               C51055 +
           ((C41383 * C1286 -
             ((C36360 + C36359) * C51083 + (C36358 + C36357) * C1285) +
             C41384 * C51067 - (C33949 + C33950) * C1287 -
             (C33951 + C33952) * C1282) *
                C51034 +
            ((C33950 + C33949) * C1286 - (C36656 * C51083 + C36655 * C1285) +
             (C33952 + C33951) * C51067 -
             (C33361 * C815 + C50975 * C828 + C33360 * C590 + C33358 * C598) *
                 C1287 -
             (C33361 * C827 + C50975 * C839 + C33360 * C599 + C33358 * C605) *
                 C1282) *
                C50778) *
               C50949) *
              C50841 * C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C1391 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C1386 -
             (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
                C51034 +
            ((C33396 + C33395) * C1391 + (C33398 + C33397) * C1386 -
             (C33400 + C33399) * C1392 - (C33402 + C33401) * C50758) *
                C50778) *
               C51055 +
           (((C36353 + C36354) * C1391 + (C36355 + C36356) * C1386 -
             C40989 * C1392 - C40990 * C50758) *
                C51034 +
            (C40993 * C1391 + C40994 * C1386 - C33597 * C1392 -
             C33598 * C50758) *
                C50778) *
               C50949) *
              C50841 * C51086 +
          (((C40993 * C1392 -
             ((C36356 + C36355) * C1386 + (C36354 + C36353) * C1391) +
             C40994 * C50758) *
                C51034 +
            (C40991 * C1392 - (C40990 * C1386 + C40989 * C1391) +
             C40992 * C50758) *
                C50778) *
               C51055 +
           ((C41383 * C1392 -
             ((C36360 + C36359) * C1386 + (C36358 + C36357) * C1391) +
             C41384 * C50758) *
                C51034 +
            ((C33950 + C33949) * C1392 - (C36656 * C1386 + C36655 * C1391) +
             (C33952 + C33951) * C50758) *
                C50778) *
               C50949) *
              C50841 * C51073 +
          ((C37709 * C51034 +
            (C41383 * C1391 + C41384 * C1386 - (C33949 + C33950) * C1392 -
             (C33951 + C33952) * C50758) *
                C50778) *
               C51055 +
           (((C36682 + C36681) * C1391 + (C36680 + C36679) * C1386 -
             (C36678 + C36677) * C1392 - (C36684 + C36683) * C50758) *
                C51034 +
            ((C36677 + C36678) * C1391 + (C36683 + C36684) * C1386 -
             (C33361 * C4202 + C50975 * C4203 + C33360 * C698 + C33358 * C704) *
                 C1392 -
             (C33361 * C4204 + C50975 * C4205 + C33360 * C703 + C33358 * C710) *
                 C50758) *
                C50778) *
               C50949) *
              C50841 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                  C1391 +
              (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                  C1386 -
              (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
                 C51034 +
             ((C33396 + C33395) * C1391 + (C33398 + C33397) * C1386 -
              (C33400 + C33399) * C1392 - (C33402 + C33401) * C50758) *
                 C50778) *
                C51055 +
            (((C36353 + C36354) * C1391 + (C36355 + C36356) * C1386 -
              C40989 * C1392 - C40990 * C50758) *
                 C51034 +
             (C40993 * C1391 + C40994 * C1386 - C33597 * C1392 -
              C33598 * C50758) *
                 C50778) *
                C50949) *
               C51041 +
           ((((C33769 + C33770) * C1392 -
              ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                   C1386 +
               (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                   C1391) +
              (C33771 + C33772) * C50758) *
                 C51034 +
             ((C33774 + C33773) * C1392 -
              ((C33772 + C33771) * C1386 + (C33770 + C33769) * C1391) +
              (C33776 + C33775) * C50758) *
                 C50778) *
                C51055 +
            ((C42885 * C1392 -
              ((C36983 + C36984) * C1386 + (C36985 + C36986) * C1391) +
              C42886 * C50758) *
                 C51034 +
             ((C35118 + C35117) * C1392 - (C42887 * C1386 + C42888 * C1391) +
              (C35120 + C35119) * C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C1283 +
          ((((C40993 * C1392 -
              ((C36356 + C36355) * C1386 + (C36354 + C36353) * C1391) +
              C40994 * C50758) *
                 C51034 +
             (C40991 * C1392 - (C40990 * C1386 + C40989 * C1391) +
              C40992 * C50758) *
                 C50778) *
                C51055 +
            ((C41383 * C1392 -
              ((C36360 + C36359) * C1386 + (C36358 + C36357) * C1391) +
              C41384 * C50758) *
                 C51034 +
             ((C33950 + C33949) * C1392 - (C36656 * C1386 + C36655 * C1391) +
              (C33952 + C33951) * C50758) *
                 C50778) *
                C50949) *
               C51041 +
           ((((C36986 + C36985) * C1391 + (C36984 + C36983) * C1386 -
              C42888 * C1392 - C42887 * C50758) *
                 C51034 +
             (C42885 * C1391 + C42886 * C1386 - (C35117 + C35118) * C1392 -
              (C35119 + C35120) * C50758) *
                 C50778) *
                C51055 +
            (((C36982 + C36981) * C1391 + (C36980 + C36979) * C1386 -
              (C37914 + C37913) * C1392 - (C37916 + C37915) * C50758) *
                 C51034 +
             ((C37913 + C37914) * C1391 + (C37915 + C37916) * C1386 -
              (C33361 * C3349 + C50975 * C3354 + C33360 * C816 +
               C33358 * C830) *
                  C1392 -
              (C33361 * C3355 + C50975 * C3358 + C33360 * C829 +
               C33358 * C840) *
                  C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                  C49770 +
              (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                  C51025 -
              (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
                 C51034 +
             ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51025 -
              (C33400 + C33399) * C49763 - (C33402 + C33401) * C50758) *
                 C50778) *
                C51055 +
            (((C36353 + C36354) * C49770 + (C36355 + C36356) * C51025 -
              C40989 * C49763 - C40990 * C50758) *
                 C51034 +
             (C40993 * C49770 + C40994 * C51025 - C33597 * C49763 -
              C33598 * C50758) *
                 C50778) *
                C50949) *
               C1643 +
           ((((C33769 + C33770) * C49763 -
              ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                   C51025 +
               (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                   C49770) +
              (C33771 + C33772) * C50758) *
                 C51034 +
             ((C33774 + C33773) * C49763 -
              ((C33772 + C33771) * C51025 + (C33770 + C33769) * C49770) +
              (C33776 + C33775) * C50758) *
                 C50778) *
                C51055 +
            ((C42885 * C49763 -
              ((C36983 + C36984) * C51025 + (C36985 + C36986) * C49770) +
              C42886 * C50758) *
                 C51034 +
             ((C35118 + C35117) * C49763 - (C42887 * C51025 + C42888 * C49770) +
              (C35120 + C35119) * C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C1283 +
          ((((C40993 * C49763 -
              ((C36356 + C36355) * C51025 + (C36354 + C36353) * C49770) +
              C40994 * C50758) *
                 C51034 +
             (C40991 * C49763 - (C40990 * C51025 + C40989 * C49770) +
              C40992 * C50758) *
                 C50778) *
                C51055 +
            ((C41383 * C49763 -
              ((C36360 + C36359) * C51025 + (C36358 + C36357) * C49770) +
              C41384 * C50758) *
                 C51034 +
             ((C33950 + C33949) * C49763 - (C36656 * C51025 + C36655 * C49770) +
              (C33952 + C33951) * C50758) *
                 C50778) *
                C50949) *
               C1643 +
           ((((C36986 + C36985) * C49770 + (C36984 + C36983) * C51025 -
              C42888 * C49763 - C42887 * C50758) *
                 C51034 +
             (C42885 * C49770 + C42886 * C51025 - (C35117 + C35118) * C49763 -
              (C35119 + C35120) * C50758) *
                 C50778) *
                C51055 +
            (((C36982 + C36981) * C49770 + (C36980 + C36979) * C51025 -
              (C37914 + C37913) * C49763 - (C37916 + C37915) * C50758) *
                 C51034 +
             ((C37913 + C37914) * C49770 + (C37915 + C37916) * C51025 -
              (C33361 * C3349 + C50975 * C3354 + C33360 * C816 +
               C33358 * C830) *
                  C49763 -
              (C33361 * C3355 + C50975 * C3358 + C33360 * C829 +
               C33358 * C840) *
                  C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                  C696 +
              (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                  C50753) *
                 C51034 +
             ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C50778) *
                C51055 +
            (((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C51034 +
             (C40993 * C696 + C40994 * C50753) * C50778) *
                C50949) *
               C1643 -
           (((C42887 * C50753 + C42888 * C696) * C50778 +
             ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C51034) *
                C50949 +
            (((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C50778 +
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C50753 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C696) *
                 C51034) *
                C51055) *
               C50853) *
              C51086 +
          (((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C51034 +
             (C42885 * C696 + C42886 * C50753) * C50778) *
                C51055 +
            (((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C51034 +
             ((C37913 + C37914) * C696 + (C37915 + C37916) * C50753) * C50778) *
                C50949) *
               C50853 -
           (((C36656 * C50753 + C36655 * C696) * C50778 +
             ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C51034) *
                C50949 +
            ((C40990 * C50753 + C40989 * C696) * C50778 +
             ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C51034) *
                C51055) *
               C1643) *
              C51073 +
          (((C36799 * C51034 + (C41383 * C696 + C41384 * C50753) * C50778) *
                C51055 +
            (((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C51034 +
             ((C36677 + C36678) * C696 + (C36683 + C36684) * C50753) * C50778) *
                C50949) *
               C1643 -
           ((((C33361 * C3519 + C50975 * C3523 + C33360 * C3151 +
               C33358 * C3157) *
                  C50753 +
              (C33361 * C3517 + C50975 * C3520 + C33360 * C3145 +
               C33358 * C3150) *
                  C696) *
                 C50778 +
             ((C36990 + C36989) * C50753 + (C36988 + C36987) * C696) * C51034) *
                C50949 +
            (((C37916 + C37915) * C50753 + (C37914 + C37913) * C696) * C50778 +
             C36995 * C51034) *
                C51055) *
               C50853) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                  C696 +
              (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                  C50753) *
                 C51034 +
             ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C50778) *
                C51055 +
            (((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C51034 +
             (C40993 * C696 + C40994 * C50753) * C50778) *
                C50949) *
               C51087 -
           (((C42887 * C50753 + C42888 * C696) * C50778 +
             ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C51034) *
                C50949 +
            (((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C50778 +
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C50753 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C696) *
                 C51034) *
                C51055) *
               C51076 +
           ((((C33360 * C944 + C33358 * C949 + C33361 * C1169 +
               C50975 * C1177) *
                  C696 +
              (C33360 * C950 + C33358 * C959 + C33361 * C1176 +
               C50975 * C1181) *
                  C50753) *
                 C51034 +
             ((C34360 + C34359) * C696 + (C34362 + C34361) * C50753) * C50778) *
                C51055 +
            (((C37305 + C37306) * C696 + (C37307 + C37308) * C50753) * C51034 +
             ((C41912 + C41911) * C696 + (C41914 + C41913) * C50753) * C50778) *
                C50949) *
               C1875) *
              C1283 +
          (((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C51034 +
             (C42885 * C696 + C42886 * C50753) * C50778) *
                C51055 +
            (((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C51034 +
             ((C37913 + C37914) * C696 + (C37915 + C37916) * C50753) * C50778) *
                C50949) *
               C51076 -
           (((C36656 * C50753 + C36655 * C696) * C50778 +
             ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C51034) *
                C50949 +
            ((C40990 * C50753 + C40989 * C696) * C50778 +
             ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C51034) *
                C51055) *
               C51087 -
           ((((C33361 * C3647 + C50975 * C3655 + C33360 * C3353 +
               C33358 * C3357) *
                  C50753 +
              (C33361 * C3643 + C50975 * C3648 + C33360 * C3348 +
               C33358 * C3352) *
                  C696) *
                 C50778 +
             ((C37312 + C37311) * C50753 + (C37310 + C37309) * C696) * C51034) *
                C50949 +
            (((C41913 + C41914) * C50753 + (C41911 + C41912) * C696) * C50778 +
             ((C37308 + C37307) * C50753 + (C37306 + C37305) * C696) * C51034) *
                C51055) *
               C1875) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C51025 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
                C51034 +
            ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51025 -
             (C33400 + C33399) * C49763 - (C33402 + C33401) * C50758) *
                C50778) *
               C51055 +
           (((C36353 + C36354) * C49770 + (C36355 + C36356) * C51025 -
             C40989 * C49763 - C40990 * C50758) *
                C51034 +
            (C40993 * C49770 + C40994 * C51025 - C33597 * C49763 -
             C33598 * C50758) *
                C50778) *
               C50949) *
              C50841 * C582 +
          (((C40993 * C49763 -
             ((C36356 + C36355) * C51025 + (C36354 + C36353) * C49770) +
             C40994 * C50758) *
                C51034 +
            (C40991 * C49763 - (C40990 * C51025 + C40989 * C49770) +
             C40992 * C50758) *
                C50778) *
               C51055 +
           ((C41383 * C49763 -
             ((C36360 + C36359) * C51025 + (C36358 + C36357) * C49770) +
             C41384 * C50758) *
                C51034 +
            ((C33950 + C33949) * C49763 - (C36656 * C51025 + C36655 * C49770) +
             (C33952 + C33951) * C50758) *
                C50778) *
               C50949) *
              C50841 * C583 +
          ((C36687 * C51034 +
            (C41383 * C49770 + C41384 * C51025 - (C33949 + C33950) * C49763 -
             (C33951 + C33952) * C50758) *
                C50778) *
               C51055 +
           (((C36682 + C36681) * C49770 + (C36680 + C36679) * C51025 -
             (C36678 + C36677) * C49763 - (C36684 + C36683) * C50758) *
                C51034 +
            ((C36677 + C36678) * C49770 + (C36683 + C36684) * C51025 -
             (C33361 * C4202 + C50975 * C4203 + C33360 * C698 + C33358 * C704) *
                 C49763 -
             (C33361 * C4204 + C50975 * C4205 + C33360 * C703 + C33358 * C710) *
                 C50758) *
                C50778) *
               C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C118 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C106 -
            (C33395 + C33396) * C119 - (C33397 + C33398) * C107 +
            C33411 * C120 + C33412 * C108 - C33413 * C121 - C33414 * C109) *
               C51034 +
           ((C33396 + C33395) * C118 + (C33398 + C33397) * C106 -
            (C33400 + C33399) * C119 - (C33402 + C33401) * C107 +
            (C33404 + C33403) * C120 + (C33406 + C33405) * C108 -
            (C33407 + C33408) * C121 - (C33409 + C33410) * C109) *
               C50778) *
              C51055 +
          (((C36353 + C36354) * C118 + (C36355 + C36356) * C106 -
            (C33586 + C33585) * C119 - (C33588 + C33587) * C107 +
            (C33590 + C33589) * C120 + (C33592 + C33591) * C108 -
            (C33593 + C33594) * C121 - (C33595 + C33596) * C109) *
               C51034 +
           ((C33585 + C33586) * C118 + (C33587 + C33588) * C106 -
            C33597 * C119 - C33598 * C107 + (C33594 + C33593) * C120 +
            (C33596 + C33595) * C108 -
            (C33361 * C1523 + C50975 * C1524 + C33360 * C290 + C33358 * C300) *
                C121 -
            (C33361 * C1525 + C50975 * C1526 + C33360 * C301 + C33358 * C308) *
                C109) *
               C50778) *
              C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C51025 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
                C51034 +
            ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51025 -
             (C33400 + C33399) * C49763 - (C33402 + C33401) * C50758) *
                C50778) *
               C51055 +
           (((C36353 + C36354) * C49770 + (C36355 + C36356) * C51025 -
             C40989 * C49763 - C40990 * C50758) *
                C51034 +
            (C40993 * C49770 + C40994 * C51025 - C33597 * C49763 -
             C33598 * C50758) *
                C50778) *
               C50949) *
              C941 +
          ((((C33769 + C33770) * C49763 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C51025 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C49770) +
             (C33771 + C33772) * C50758) *
                C51034 +
            ((C33774 + C33773) * C49763 -
             ((C33772 + C33771) * C51025 + (C33770 + C33769) * C49770) +
             (C33776 + C33775) * C50758) *
                C50778) *
               C51055 +
           (((C35114 + C35113) * C49763 -
             ((C36983 + C36984) * C51025 + (C36985 + C36986) * C49770) +
             (C35116 + C35115) * C50758) *
                C51034 +
            ((C35118 + C35117) * C49763 -
             ((C35115 + C35116) * C51025 + (C35113 + C35114) * C49770) +
             (C35120 + C35119) * C50758) *
                C50778) *
               C50949) *
              C942 +
          ((((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                 C49770 +
             (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                 C51025 -
             (C34359 + C34360) * C49763 - (C34361 + C34362) * C50758) *
                C51034 +
            ((C34360 + C34359) * C49770 + (C34362 + C34361) * C51025 -
             (C34363 + C34364) * C49763 - (C34365 + C34366) * C50758) *
                C50778) *
               C51055 +
           (((C37305 + C37306) * C49770 + (C37307 + C37308) * C51025 -
             (C41911 + C41912) * C49763 - (C41913 + C41914) * C50758) *
                C51034 +
            ((C41912 + C41911) * C49770 + (C41914 + C41913) * C51025 -
             (C33361 * C7062 + C50975 * C7063 + C33360 * C1081 +
              C33358 * C1087) *
                 C49763 -
             (C33361 * C7064 + C50975 * C7065 + C33360 * C1086 +
              C33358 * C1093) *
                 C50758) *
                C50778) *
               C50949) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C51034 +
            ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C50778) *
               C51055 +
           (((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C51034 +
            (C40993 * C696 + C40994 * C50753) * C50778) *
               C50949) *
              C50841 * C692 -
          (((C36656 * C50753 + C36655 * C696) * C50778 +
            ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C51034) *
               C50949 +
           ((C40990 * C50753 + C40989 * C696) * C50778 +
            ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C51034) *
               C51055) *
              C50841 * C693 +
          ((C36799 * C51034 + (C41383 * C696 + C41384 * C50753) * C50778) *
               C51055 +
           (((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C51034 +
            ((C36677 + C36678) * C696 + (C36683 + C36684) * C50753) * C50778) *
               C50949) *
              C50841 * C694 -
          ((((C33361 * C3152 + C50975 * C3158 + C33360 * C2809 +
              C33358 * C2813) *
                 C50753 +
             (C33361 * C3146 + C50975 * C3153 + C33360 * C2804 +
              C33358 * C2808) *
                 C696) *
                C50778 +
            ((C36805 + C36804) * C50753 + (C36803 + C36802) * C696) * C51034) *
               C50949 +
           (((C36684 + C36683) * C50753 + (C36678 + C36677) * C696) * C50778 +
            C36807 * C51034) *
               C51055) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C283 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C278 -
             (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
             C33411 * C285 + C33412 * C280) *
                C51034 +
            ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
             (C33400 + C33399) * C284 - (C33402 + C33401) * C279 +
             (C33404 + C33403) * C285 + (C33406 + C33405) * C280) *
                C50778) *
               C51055 +
           (((C36353 + C36354) * C283 + (C36355 + C36356) * C278 -
             C40989 * C284 - C40990 * C279 + C40991 * C285 + C40992 * C280) *
                C51034 +
            (C40993 * C283 + C40994 * C278 - C33597 * C284 - C33598 * C279 +
             (C33594 + C33593) * C285 + (C33596 + C33595) * C280) *
                C50778) *
               C50949) *
              C50841 * C51040 +
          (((C40993 * C284 -
             ((C36356 + C36355) * C278 + (C36354 + C36353) * C283) +
             C40994 * C279 - C33597 * C285 - C33598 * C280) *
                C51034 +
            (C40991 * C284 - (C40990 * C278 + C40989 * C283) + C40992 * C279 -
             (C33593 + C33594) * C285 - (C33595 + C33596) * C280) *
                C50778) *
               C51055 +
           (((C33946 + C33945) * C284 -
             ((C36360 + C36359) * C278 + (C36358 + C36357) * C283) +
             (C33948 + C33947) * C279 - (C33949 + C33950) * C285 -
             (C33951 + C33952) * C280) *
                C51034 +
            ((C33950 + C33949) * C284 - (C36656 * C278 + C36655 * C283) +
             (C33952 + C33951) * C279 -
             (C33361 * C815 + C50975 * C828 + C33360 * C590 + C33358 * C598) *
                 C285 -
             (C33361 * C827 + C50975 * C839 + C33360 * C599 + C33358 * C605) *
                 C280) *
                C50778) *
               C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                  C696 +
              (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                  C50753) *
                 C51034 +
             ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C50778) *
                C51055 +
            (((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C51034 +
             (C40993 * C696 + C40994 * C50753) * C50778) *
                C50949) *
               C941 -
           ((((C35115 + C35116) * C50753 + (C35113 + C35114) * C696) * C50778 +
             ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C51034) *
                C50949 +
            (((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C50778 +
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C50753 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C696) *
                 C51034) *
                C51055) *
               C942 +
           ((((C33360 * C944 + C33358 * C949 + C33361 * C1169 +
               C50975 * C1177) *
                  C696 +
              (C33360 * C950 + C33358 * C959 + C33361 * C1176 +
               C50975 * C1181) *
                  C50753) *
                 C51034 +
             ((C34360 + C34359) * C696 + (C34362 + C34361) * C50753) * C50778) *
                C51055 +
            (((C37305 + C37306) * C696 + (C37307 + C37308) * C50753) * C51034 +
             ((C41912 + C41911) * C696 + (C41914 + C41913) * C50753) * C50778) *
                C50949) *
               C943) *
              C51040 +
          (((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C51034 +
             ((C35114 + C35113) * C696 + (C35116 + C35115) * C50753) * C50778) *
                C51055 +
            (((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C51034 +
             ((C37913 + C37914) * C696 + (C37915 + C37916) * C50753) * C50778) *
                C50949) *
               C942 -
           (((C36656 * C50753 + C36655 * C696) * C50778 +
             ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C51034) *
                C50949 +
            ((C40990 * C50753 + C40989 * C696) * C50778 +
             ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C51034) *
                C51055) *
               C941 -
           ((((C33361 * C3647 + C50975 * C3655 + C33360 * C3353 +
               C33358 * C3357) *
                  C50753 +
              (C33361 * C3643 + C50975 * C3648 + C33360 * C3348 +
               C33358 * C3352) *
                  C696) *
                 C50778 +
             ((C37312 + C37311) * C50753 + (C37310 + C37309) * C696) * C51034) *
                C50949 +
            (((C41913 + C41914) * C50753 + (C41911 + C41912) * C696) * C50778 +
             ((C37308 + C37307) * C50753 + (C37306 + C37305) * C696) * C51034) *
                C51055) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                  C696 +
              (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                  C50753) *
                 C51034 +
             ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C50778) *
                C51055 +
            (((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C51034 +
             (C40993 * C696 + C40994 * C50753) * C50778) *
                C50949) *
               C51041 -
           ((((C35115 + C35116) * C50753 + (C35113 + C35114) * C696) * C50778 +
             ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C51034) *
                C50949 +
            (((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C50778 +
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C50753 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C696) *
                 C51034) *
                C51055) *
               C50853) *
              C582 +
          (((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C51034 +
             ((C35114 + C35113) * C696 + (C35116 + C35115) * C50753) * C50778) *
                C51055 +
            (((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C51034 +
             ((C37913 + C37914) * C696 + (C37915 + C37916) * C50753) * C50778) *
                C50949) *
               C50853 -
           (((C36656 * C50753 + C36655 * C696) * C50778 +
             ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C51034) *
                C50949 +
            ((C40990 * C50753 + C40989 * C696) * C50778 +
             ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C51034) *
                C51055) *
               C51041) *
              C583 +
          (((C36799 * C51034 + (C41383 * C696 + C41384 * C50753) * C50778) *
                C51055 +
            (((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C51034 +
             ((C36677 + C36678) * C696 + (C36683 + C36684) * C50753) * C50778) *
                C50949) *
               C51041 -
           ((((C33361 * C3519 + C50975 * C3523 + C33360 * C3151 +
               C33358 * C3157) *
                  C50753 +
              (C33361 * C3517 + C50975 * C3520 + C33360 * C3145 +
               C33358 * C3150) *
                  C696) *
                 C50778 +
             ((C36990 + C36989) * C50753 + (C36988 + C36987) * C696) * C51034) *
                C50949 +
            (((C37916 + C37915) * C50753 + (C37914 + C37913) * C696) * C50778 +
             C36995 * C51034) *
                C51055) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C283 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C278 -
             (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
             C33411 * C285 + C33412 * C280) *
                C51034 +
            ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
             (C33400 + C33399) * C284 - (C33402 + C33401) * C279 +
             (C33404 + C33403) * C285 + (C33406 + C33405) * C280) *
                C50778) *
               C51055 +
           (((C36353 + C36354) * C283 + (C36355 + C36356) * C278 -
             C40989 * C284 - C40990 * C279 + C40991 * C285 + C40992 * C280) *
                C51034 +
            (C40993 * C283 + C40994 * C278 - C33597 * C284 - C33598 * C279 +
             (C33594 + C33593) * C285 + (C33596 + C33595) * C280) *
                C50778) *
               C50949) *
              C51041 +
          ((((C33769 + C33770) * C284 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C278 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C283) +
             (C33771 + C33772) * C279 - C33781 * C285 - C33782 * C280) *
                C51034 +
            ((C33774 + C33773) * C284 -
             ((C33772 + C33771) * C278 + (C33770 + C33769) * C283) +
             (C33776 + C33775) * C279 - (C33777 + C33778) * C285 -
             (C33779 + C33780) * C280) *
                C50778) *
               C51055 +
           (((C35114 + C35113) * C284 -
             ((C36983 + C36984) * C278 + (C36985 + C36986) * C283) +
             (C35116 + C35115) * C279 - (C35117 + C35118) * C285 -
             (C35119 + C35120) * C280) *
                C51034 +
            ((C35118 + C35117) * C284 -
             ((C35115 + C35116) * C278 + (C35113 + C35114) * C283) +
             (C35120 + C35119) * C279 -
             (C33361 * C1080 + C50975 * C1085 + C33360 * C814 + C33358 * C825) *
                 C285 -
             (C33361 * C1084 + C50975 * C1092 + C33360 * C826 + C33358 * C838) *
                 C280) *
                C50778) *
               C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C51034 +
            ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C50778) *
               C51055 +
           (((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C51034 +
            (C40993 * C696 + C40994 * C50753) * C50778) *
               C50949) *
              C1162 -
          ((((C35115 + C35116) * C50753 + (C35113 + C35114) * C696) * C50778 +
            ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C51034) *
               C50949 +
           (((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C50778 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C51034) *
               C51055) *
              C1163 +
          ((((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                 C696 +
             (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                 C50753) *
                C51034 +
            ((C34360 + C34359) * C696 + (C34362 + C34361) * C50753) * C50778) *
               C51055 +
           (((C37305 + C37306) * C696 + (C37307 + C37308) * C50753) * C51034 +
            ((C41912 + C41911) * C696 + (C41914 + C41913) * C50753) * C50778) *
               C50949) *
              C1164 -
          ((((C33361 * C6464 + C50975 * C6468 + C33360 * C3651 +
              C33358 * C3657) *
                 C50753 +
             (C33361 * C6462 + C50975 * C6465 + C33360 * C3645 +
              C33358 * C3652) *
                 C696) *
                C50778 +
            ((C33361 * C6466 + C50975 * C6469 + C33360 * C3653 +
              C33358 * C3658) *
                 C50753 +
             (C33361 * C6463 + C50975 * C6467 + C33360 * C3646 +
              C33358 * C3654) *
                 C696) *
                C51034) *
               C50949 +
           (((C33361 * C6292 + C50975 * C6296 + C33360 * C1174 +
              C33358 * C1180) *
                 C50753 +
             (C33361 * C6287 + C50975 * C6291 + C33360 * C1168 +
              C33358 * C1175) *
                 C696) *
                C50778 +
            ((C33361 * C6290 + C50975 * C6295 + C33360 * C1176 +
              C33358 * C1181) *
                 C50753 +
             (C33361 * C6286 + C50975 * C6289 + C33360 * C1169 +
              C33358 * C1177) *
                 C696) *
                C51034) *
               C51055) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C1285 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C51083 -
             (C33395 + C33396) * C1286 - (C33397 + C33398) * C51067 +
             C33411 * C1287 + C33412 * C1282) *
                C51034 +
            ((C33396 + C33395) * C1285 + (C33398 + C33397) * C51083 -
             (C33400 + C33399) * C1286 - (C33402 + C33401) * C51067 +
             (C33404 + C33403) * C1287 + (C33406 + C33405) * C1282) *
                C50778) *
               C51055 +
           (((C36353 + C36354) * C1285 + (C36355 + C36356) * C51083 -
             C40989 * C1286 - C40990 * C51067 + C40991 * C1287 +
             C40992 * C1282) *
                C51034 +
            (C40993 * C1285 + C40994 * C51083 - C33597 * C1286 -
             C33598 * C51067 + (C33594 + C33593) * C1287 +
             (C33596 + C33595) * C1282) *
                C50778) *
               C50949) *
              C1643 +
          ((((C33769 + C33770) * C1286 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C51083 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C1285) +
             (C33771 + C33772) * C51067 - C33781 * C1287 - C33782 * C1282) *
                C51034 +
            ((C33774 + C33773) * C1286 -
             ((C33772 + C33771) * C51083 + (C33770 + C33769) * C1285) +
             (C33776 + C33775) * C51067 - (C33777 + C33778) * C1287 -
             (C33779 + C33780) * C1282) *
                C50778) *
               C51055 +
           ((C42885 * C1286 -
             ((C36983 + C36984) * C51083 + (C36985 + C36986) * C1285) +
             C42886 * C51067 - (C35117 + C35118) * C1287 -
             (C35119 + C35120) * C1282) *
                C51034 +
            ((C35118 + C35117) * C1286 - (C42887 * C51083 + C42888 * C1285) +
             (C35120 + C35119) * C51067 -
             (C33361 * C1080 + C50975 * C1085 + C33360 * C814 + C33358 * C825) *
                 C1287 -
             (C33361 * C1084 + C50975 * C1092 + C33360 * C826 + C33358 * C838) *
                 C1282) *
                C50778) *
               C50949) *
              C50853) *
         C50815) /
        (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                  C1391 +
              (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                  C1386 -
              (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
                 C51034 +
             ((C33396 + C33395) * C1391 + (C33398 + C33397) * C1386 -
              (C33400 + C33399) * C1392 - (C33402 + C33401) * C50758) *
                 C50778) *
                C51055 +
            (((C36353 + C36354) * C1391 + (C36355 + C36356) * C1386 -
              C40989 * C1392 - C40990 * C50758) *
                 C51034 +
             (C40993 * C1391 + C40994 * C1386 - C33597 * C1392 -
              C33598 * C50758) *
                 C50778) *
                C50949) *
               C1643 +
           ((((C33769 + C33770) * C1392 -
              ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                   C1386 +
               (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                   C1391) +
              (C33771 + C33772) * C50758) *
                 C51034 +
             ((C33774 + C33773) * C1392 -
              ((C33772 + C33771) * C1386 + (C33770 + C33769) * C1391) +
              (C33776 + C33775) * C50758) *
                 C50778) *
                C51055 +
            ((C42885 * C1392 -
              ((C36983 + C36984) * C1386 + (C36985 + C36986) * C1391) +
              C42886 * C50758) *
                 C51034 +
             ((C35118 + C35117) * C1392 - (C42887 * C1386 + C42888 * C1391) +
              (C35120 + C35119) * C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C51040 +
          ((((C40993 * C1392 -
              ((C36356 + C36355) * C1386 + (C36354 + C36353) * C1391) +
              C40994 * C50758) *
                 C51034 +
             (C40991 * C1392 - (C40990 * C1386 + C40989 * C1391) +
              C40992 * C50758) *
                 C50778) *
                C51055 +
            ((C41383 * C1392 -
              ((C36360 + C36359) * C1386 + (C36358 + C36357) * C1391) +
              C41384 * C50758) *
                 C51034 +
             ((C33950 + C33949) * C1392 - (C36656 * C1386 + C36655 * C1391) +
              (C33952 + C33951) * C50758) *
                 C50778) *
                C50949) *
               C1643 +
           ((((C36986 + C36985) * C1391 + (C36984 + C36983) * C1386 -
              C42888 * C1392 - C42887 * C50758) *
                 C51034 +
             (C42885 * C1391 + C42886 * C1386 - (C35117 + C35118) * C1392 -
              (C35119 + C35120) * C50758) *
                 C50778) *
                C51055 +
            (((C36982 + C36981) * C1391 + (C36980 + C36979) * C1386 -
              (C37914 + C37913) * C1392 - (C37916 + C37915) * C50758) *
                 C51034 +
             ((C37913 + C37914) * C1391 + (C37915 + C37916) * C1386 -
              (C33361 * C3349 + C50975 * C3354 + C33360 * C816 +
               C33358 * C830) *
                  C1392 -
              (C33361 * C3355 + C50975 * C3358 + C33360 * C829 +
               C33358 * C840) *
                  C50758) *
                 C50778) *
                C50949) *
               C50853) *
              C50829)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C1391 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C1386 -
             (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
                C51034 +
            ((C33396 + C33395) * C1391 + (C33398 + C33397) * C1386 -
             (C33400 + C33399) * C1392 - (C33402 + C33401) * C50758) *
                C50778) *
               C51055 +
           (((C36353 + C36354) * C1391 + (C36355 + C36356) * C1386 -
             C40989 * C1392 - C40990 * C50758) *
                C51034 +
            (C40993 * C1391 + C40994 * C1386 - C33597 * C1392 -
             C33598 * C50758) *
                C50778) *
               C50949) *
              C51087 +
          ((((C33769 + C33770) * C1392 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C1386 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C1391) +
             (C33771 + C33772) * C50758) *
                C51034 +
            ((C33774 + C33773) * C1392 -
             ((C33772 + C33771) * C1386 + (C33770 + C33769) * C1391) +
             (C33776 + C33775) * C50758) *
                C50778) *
               C51055 +
           ((C42885 * C1392 -
             ((C36983 + C36984) * C1386 + (C36985 + C36986) * C1391) +
             C42886 * C50758) *
                C51034 +
            ((C35118 + C35117) * C1392 - (C42887 * C1386 + C42888 * C1391) +
             (C35120 + C35119) * C50758) *
                C50778) *
               C50949) *
              C51076 +
          ((((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                 C1391 +
             (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                 C1386 -
             (C34359 + C34360) * C1392 - (C34361 + C34362) * C50758) *
                C51034 +
            ((C34360 + C34359) * C1391 + (C34362 + C34361) * C1386 -
             (C34363 + C34364) * C1392 - (C34365 + C34366) * C50758) *
                C50778) *
               C51055 +
           (((C37305 + C37306) * C1391 + (C37307 + C37308) * C1386 -
             (C41911 + C41912) * C1392 - (C41913 + C41914) * C50758) *
                C51034 +
            ((C41912 + C41911) * C1391 + (C41914 + C41913) * C1386 -
             (C33361 * C7062 + C50975 * C7063 + C33360 * C1081 +
              C33358 * C1087) *
                 C1392 -
             (C33361 * C7064 + C50975 * C7065 + C33360 * C1086 +
              C33358 * C1093) *
                 C50758) *
                C50778) *
               C50949) *
              C1875) *
         C50815) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C118 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C106 -
            (C33395 + C33396) * C119 - (C33397 + C33398) * C107 +
            C33411 * C120 + C33412 * C108 - C33413 * C121 - C33414 * C109) *
               C51034 +
           ((C33396 + C33395) * C118 + (C33398 + C33397) * C106 -
            (C33400 + C33399) * C119 - (C33402 + C33401) * C107 +
            (C33404 + C33403) * C120 + (C33406 + C33405) * C108 -
            (C33407 + C33408) * C121 - (C33409 + C33410) * C109) *
               C50778) *
              C51055 +
          (((C36353 + C36354) * C118 + (C36355 + C36356) * C106 -
            (C33586 + C33585) * C119 - (C33588 + C33587) * C107 +
            (C33590 + C33589) * C120 + (C33592 + C33591) * C108 -
            (C33593 + C33594) * C121 - (C33595 + C33596) * C109) *
               C51034 +
           ((C33585 + C33586) * C118 + (C33587 + C33588) * C106 -
            C33597 * C119 - C33598 * C107 + (C33594 + C33593) * C120 +
            (C33596 + C33595) * C108 -
            (C33361 * C1523 + C50975 * C1524 + C33360 * C290 + C33358 * C300) *
                C121 -
            (C33361 * C1525 + C50975 * C1526 + C33360 * C301 + C33358 * C308) *
                C109) *
               C50778) *
              C50949) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C51025 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
                C51034 +
            ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51025 -
             (C33400 + C33399) * C49763 - (C33402 + C33401) * C50758) *
                C50778) *
               C51055 +
           (((C36353 + C36354) * C49770 + (C36355 + C36356) * C51025 -
             C40989 * C49763 - C40990 * C50758) *
                C51034 +
            (C40993 * C49770 + C40994 * C51025 - C33597 * C49763 -
             C33598 * C50758) *
                C50778) *
               C50949) *
              C50841 * C582 +
          (((C40993 * C49763 -
             ((C36356 + C36355) * C51025 + (C36354 + C36353) * C49770) +
             C40994 * C50758) *
                C51034 +
            (C40991 * C49763 - (C40990 * C51025 + C40989 * C49770) +
             C40992 * C50758) *
                C50778) *
               C51055 +
           ((C41383 * C49763 -
             ((C36360 + C36359) * C51025 + (C36358 + C36357) * C49770) +
             C41384 * C50758) *
                C51034 +
            ((C33950 + C33949) * C49763 - (C36656 * C51025 + C36655 * C49770) +
             (C33952 + C33951) * C50758) *
                C50778) *
               C50949) *
              C50841 * C583 +
          ((C36687 * C51034 +
            (C41383 * C49770 + C41384 * C51025 - (C33949 + C33950) * C49763 -
             (C33951 + C33952) * C50758) *
                C50778) *
               C51055 +
           (((C36682 + C36681) * C49770 + (C36680 + C36679) * C51025 -
             (C36678 + C36677) * C49763 - (C36684 + C36683) * C50758) *
                C51034 +
            ((C36677 + C36678) * C49770 + (C36683 + C36684) * C51025 -
             (C33361 * C4202 + C50975 * C4203 + C33360 * C698 + C33358 * C704) *
                 C49763 -
             (C33361 * C4204 + C50975 * C4205 + C33360 * C703 + C33358 * C710) *
                 C50758) *
                C50778) *
               C50949) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C283 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C278 -
             (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
             C33411 * C285 + C33412 * C280) *
                C51034 +
            ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
             (C33400 + C33399) * C284 - (C33402 + C33401) * C279 +
             (C33404 + C33403) * C285 + (C33406 + C33405) * C280) *
                C50778) *
               C51055 +
           (((C36353 + C36354) * C283 + (C36355 + C36356) * C278 -
             C40989 * C284 - C40990 * C279 + C40991 * C285 + C40992 * C280) *
                C51034 +
            (C40993 * C283 + C40994 * C278 - C33597 * C284 - C33598 * C279 +
             (C33594 + C33593) * C285 + (C33596 + C33595) * C280) *
                C50778) *
               C50949) *
              C50841 * C51040 +
          (((C40993 * C284 -
             ((C36356 + C36355) * C278 + (C36354 + C36353) * C283) +
             C40994 * C279 - C33597 * C285 - C33598 * C280) *
                C51034 +
            (C40991 * C284 - (C40990 * C278 + C40989 * C283) + C40992 * C279 -
             (C33593 + C33594) * C285 - (C33595 + C33596) * C280) *
                C50778) *
               C51055 +
           (((C33946 + C33945) * C284 -
             ((C36360 + C36359) * C278 + (C36358 + C36357) * C283) +
             (C33948 + C33947) * C279 - (C33949 + C33950) * C285 -
             (C33951 + C33952) * C280) *
                C51034 +
            ((C33950 + C33949) * C284 - (C36656 * C278 + C36655 * C283) +
             (C33952 + C33951) * C279 -
             (C33361 * C815 + C50975 * C828 + C33360 * C590 + C33358 * C598) *
                 C285 -
             (C33361 * C827 + C50975 * C839 + C33360 * C599 + C33358 * C605) *
                 C280) *
                C50778) *
               C50949) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C51034 +
            ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C50778) *
               C51055 +
           (((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C51034 +
            (C40993 * C696 + C40994 * C50753) * C50778) *
               C50949) *
              C50841 * C692 -
          (((C36656 * C50753 + C36655 * C696) * C50778 +
            ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C51034) *
               C50949 +
           ((C40990 * C50753 + C40989 * C696) * C50778 +
            ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C51034) *
               C51055) *
              C50841 * C693 +
          ((C36799 * C51034 + (C41383 * C696 + C41384 * C50753) * C50778) *
               C51055 +
           (((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C51034 +
            ((C36677 + C36678) * C696 + (C36683 + C36684) * C50753) * C50778) *
               C50949) *
              C50841 * C694 -
          ((((C33361 * C3152 + C50975 * C3158 + C33360 * C2809 +
              C33358 * C2813) *
                 C50753 +
             (C33361 * C3146 + C50975 * C3153 + C33360 * C2804 +
              C33358 * C2808) *
                 C696) *
                C50778 +
            ((C36805 + C36804) * C50753 + (C36803 + C36802) * C696) * C51034) *
               C50949 +
           (((C36684 + C36683) * C50753 + (C36678 + C36677) * C696) * C50778 +
            C36807 * C51034) *
               C51055) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C283 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C278 -
             (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
             C33411 * C285 + C33412 * C280) *
                C51034 +
            ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
             (C33400 + C33399) * C284 - (C33402 + C33401) * C279 +
             (C33404 + C33403) * C285 + (C33406 + C33405) * C280) *
                C50778) *
               C51055 +
           (((C36353 + C36354) * C283 + (C36355 + C36356) * C278 -
             C40989 * C284 - C40990 * C279 + C40991 * C285 + C40992 * C280) *
                C51034 +
            (C40993 * C283 + C40994 * C278 - C33597 * C284 - C33598 * C279 +
             (C33594 + C33593) * C285 + (C33596 + C33595) * C280) *
                C50778) *
               C50949) *
              C51041 +
          ((((C33769 + C33770) * C284 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C278 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C283) +
             (C33771 + C33772) * C279 - C33781 * C285 - C33782 * C280) *
                C51034 +
            ((C33774 + C33773) * C284 -
             ((C33772 + C33771) * C278 + (C33770 + C33769) * C283) +
             (C33776 + C33775) * C279 - (C33777 + C33778) * C285 -
             (C33779 + C33780) * C280) *
                C50778) *
               C51055 +
           (((C35114 + C35113) * C284 -
             ((C36983 + C36984) * C278 + (C36985 + C36986) * C283) +
             (C35116 + C35115) * C279 - (C35117 + C35118) * C285 -
             (C35119 + C35120) * C280) *
                C51034 +
            ((C35118 + C35117) * C284 -
             ((C35115 + C35116) * C278 + (C35113 + C35114) * C283) +
             (C35120 + C35119) * C279 -
             (C33361 * C1080 + C50975 * C1085 + C33360 * C814 + C33358 * C825) *
                 C285 -
             (C33361 * C1084 + C50975 * C1092 + C33360 * C826 + C33358 * C838) *
                 C280) *
                C50778) *
               C50949) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                  C696 +
              (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                  C50753) *
                 C51034 +
             ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C50778) *
                C51055 +
            (((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C51034 +
             (C40993 * C696 + C40994 * C50753) * C50778) *
                C50949) *
               C51041 -
           ((((C35115 + C35116) * C50753 + (C35113 + C35114) * C696) * C50778 +
             ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C51034) *
                C50949 +
            (((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C50778 +
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C50753 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C696) *
                 C51034) *
                C51055) *
               C50853) *
              C582 +
          (((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C51034 +
             ((C35114 + C35113) * C696 + (C35116 + C35115) * C50753) * C50778) *
                C51055 +
            (((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C51034 +
             ((C37913 + C37914) * C696 + (C37915 + C37916) * C50753) * C50778) *
                C50949) *
               C50853 -
           (((C36656 * C50753 + C36655 * C696) * C50778 +
             ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C51034) *
                C50949 +
            ((C40990 * C50753 + C40989 * C696) * C50778 +
             ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C51034) *
                C51055) *
               C51041) *
              C583 +
          (((C36799 * C51034 + (C41383 * C696 + C41384 * C50753) * C50778) *
                C51055 +
            (((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C51034 +
             ((C36677 + C36678) * C696 + (C36683 + C36684) * C50753) * C50778) *
                C50949) *
               C51041 -
           ((((C33361 * C3519 + C50975 * C3523 + C33360 * C3151 +
               C33358 * C3157) *
                  C50753 +
              (C33361 * C3517 + C50975 * C3520 + C33360 * C3145 +
               C33358 * C3150) *
                  C696) *
                 C50778 +
             ((C36990 + C36989) * C50753 + (C36988 + C36987) * C696) * C51034) *
                C50949 +
            (((C37916 + C37915) * C50753 + (C37914 + C37913) * C696) * C50778 +
             C36995 * C51034) *
                C51055) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C1285 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C51083 -
                     (C44321 + C44322 + C44323) * C1286 -
                     (C44324 + C44325 + C44326) * C51067 +
                     (C44327 + C44328 + C44329) * C1287 +
                     (C44330 + C44331 + C44332) * C1282) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C1285 +
                     (C47254 + C47255 + C47256) * C51083 -
                     (C44511 + C44510 + C44509) * C1286 -
                     (C44514 + C44513 + C44512) * C51067 +
                     (C44517 + C44516 + C44515) * C1287 +
                     (C44520 + C44519 + C44518) * C1282) *
                        C50773 * C50949) *
                       C50841 * C1283 +
                   (((C44509 + C44510 + C44511) * C1286 -
                     ((C47256 + C47255 + C47254) * C51083 +
                      (C47253 + C47252 + C47251) * C1285) +
                     (C44512 + C44513 + C44514) * C51067 -
                     (C44515 + C44516 + C44517) * C1287 -
                     (C44518 + C44519 + C44520) * C1282) *
                        C50773 * C51055 +
                    ((C44863 + C44862 + C44861) * C1286 -
                     ((C47561 + C47562 + C47563) * C51083 +
                      (C47564 + C47565 + C47566) * C1285) +
                     (C44866 + C44865 + C44864) * C51067 -
                     (C44283 * C3349 + C44280 * C3354 + C44282 * C816 +
                      C51091 * C830 + C44281 * C589 + C51090 * C596) *
                         C1287 -
                     (C44283 * C3355 + C44280 * C3358 + C44282 * C829 +
                      C51091 * C840 + C44281 * C597 + C51090 * C604) *
                         C1282) *
                        C50773 * C50949) *
                       C50841 * C50829)) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C1391 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C1386 -
                     (C44321 + C44322 + C44323) * C1392 -
                     (C44324 + C44325 + C44326) * C50758) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C1391 +
                     (C47254 + C47255 + C47256) * C1386 -
                     (C44511 + C44510 + C44509) * C1392 -
                     (C44514 + C44513 + C44512) * C50758) *
                        C50773 * C50949) *
                       C50841 * C51086 +
                   (((C44509 + C44510 + C44511) * C1392 -
                     ((C47256 + C47255 + C47254) * C1386 +
                      (C47253 + C47252 + C47251) * C1391) +
                     (C44512 + C44513 + C44514) * C50758) *
                        C50773 * C51055 +
                    ((C44863 + C44862 + C44861) * C1392 -
                     ((C47561 + C47562 + C47563) * C1386 +
                      (C47564 + C47565 + C47566) * C1391) +
                     (C44866 + C44865 + C44864) * C50758) *
                        C50773 * C50949) *
                       C50841 * C51073 +
                   (((C47566 + C47565 + C47564) * C1391 +
                     (C47563 + C47562 + C47561) * C1386 -
                     (C44861 + C44862 + C44863) * C1392 -
                     (C44864 + C44865 + C44866) * C50758) *
                        C50773 * C51055 +
                    ((C47677 + C47678 + C47679) * C1391 +
                     (C47680 + C47681 + C47682) * C1386 -
                     (C44283 * C3517 + C44280 * C3520 + C44282 * C3145 +
                      C51091 * C3150 + C44281 * C699 + C51090 * C706) *
                         C1392 -
                     (C44283 * C3519 + C44280 * C3523 + C44282 * C3151 +
                      C51091 * C3157 + C44281 * C705 + C51090 * C711) *
                         C50758) *
                        C50773 * C50949) *
                       C50841 * C1390)) /
                 (p * q * std::sqrt(p + q));
    d2ee[167] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C1391 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C1386 -
                      (C44321 + C44322 + C44323) * C1392 -
                      (C44324 + C44325 + C44326) * C50758) *
                         C50773 * C51055 +
                     ((C47251 + C47252 + C47253) * C1391 +
                      (C47254 + C47255 + C47256) * C1386 -
                      (C44511 + C44510 + C44509) * C1392 -
                      (C44514 + C44513 + C44512) * C50758) *
                         C50773 * C50949) *
                        C51041 +
                    (((C44691 + C44692 + C44693) * C1392 -
                      ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                        C51091 * C959 + C44281 * C441 + C51090 * C452) *
                           C1386 +
                       (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                        C51091 * C949 + C44281 * C435 + C51090 * C442) *
                           C1391) +
                      (C44694 + C44695 + C44696) * C50758) *
                         C50773 * C51055 +
                     ((C46019 + C46018 + C46017) * C1392 -
                      ((C47853 + C47854 + C47855) * C1386 +
                       (C47856 + C47857 + C47858) * C1391) +
                      (C46022 + C46021 + C46020) * C50758) *
                         C50773 * C50949) *
                        C50853) *
                       C1283 +
                   ((((C44509 + C44510 + C44511) * C1392 -
                      ((C47256 + C47255 + C47254) * C1386 +
                       (C47253 + C47252 + C47251) * C1391) +
                      (C44512 + C44513 + C44514) * C50758) *
                         C50773 * C51055 +
                     ((C44863 + C44862 + C44861) * C1392 -
                      ((C47561 + C47562 + C47563) * C1386 +
                       (C47564 + C47565 + C47566) * C1391) +
                      (C44866 + C44865 + C44864) * C50758) *
                         C50773 * C50949) *
                        C51041 +
                    (((C47858 + C47857 + C47856) * C1391 +
                      (C47855 + C47854 + C47853) * C1386 -
                      (C46017 + C46018 + C46019) * C1392 -
                      (C46020 + C46021 + C46022) * C50758) *
                         C50773 * C51055 +
                     ((C47859 + C47860 + C47861) * C1391 +
                      (C47862 + C47863 + C47864) * C1386 -
                      (C44283 * C3643 + C44280 * C3648 + C44282 * C3348 +
                       C51091 * C3352 + C44281 * C817 + C51090 * C832) *
                          C1392 -
                      (C44283 * C3647 + C44280 * C3655 + C44282 * C3353 +
                       C51091 * C3357 + C44281 * C831 + C51090 * C841) *
                          C50758) *
                         C50773 * C50949) *
                        C50853) *
                       C50829)) /
                 (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C49770 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C51025 -
                      (C44321 + C44322 + C44323) * C49763 -
                      (C44324 + C44325 + C44326) * C50758) *
                         C50773 * C51055 +
                     ((C47251 + C47252 + C47253) * C49770 +
                      (C47254 + C47255 + C47256) * C51025 -
                      (C44511 + C44510 + C44509) * C49763 -
                      (C44514 + C44513 + C44512) * C50758) *
                         C50773 * C50949) *
                        C1643 +
                    (((C44691 + C44692 + C44693) * C49763 -
                      ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                        C51091 * C959 + C44281 * C441 + C51090 * C452) *
                           C51025 +
                       (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                        C51091 * C949 + C44281 * C435 + C51090 * C442) *
                           C49770) +
                      (C44694 + C44695 + C44696) * C50758) *
                         C50773 * C51055 +
                     ((C46019 + C46018 + C46017) * C49763 -
                      ((C47853 + C47854 + C47855) * C51025 +
                       (C47856 + C47857 + C47858) * C49770) +
                      (C46022 + C46021 + C46020) * C50758) *
                         C50773 * C50949) *
                        C50853) *
                       C1283 +
                   ((((C44509 + C44510 + C44511) * C49763 -
                      ((C47256 + C47255 + C47254) * C51025 +
                       (C47253 + C47252 + C47251) * C49770) +
                      (C44512 + C44513 + C44514) * C50758) *
                         C50773 * C51055 +
                     ((C44863 + C44862 + C44861) * C49763 -
                      ((C47561 + C47562 + C47563) * C51025 +
                       (C47564 + C47565 + C47566) * C49770) +
                      (C44866 + C44865 + C44864) * C50758) *
                         C50773 * C50949) *
                        C1643 +
                    (((C47858 + C47857 + C47856) * C49770 +
                      (C47855 + C47854 + C47853) * C51025 -
                      (C46017 + C46018 + C46019) * C49763 -
                      (C46020 + C46021 + C46022) * C50758) *
                         C50773 * C51055 +
                     ((C47859 + C47860 + C47861) * C49770 +
                      (C47862 + C47863 + C47864) * C51025 -
                      (C44283 * C3643 + C44280 * C3648 + C44282 * C3348 +
                       C51091 * C3352 + C44281 * C817 + C51090 * C832) *
                          C49763 -
                      (C44283 * C3647 + C44280 * C3655 + C44282 * C3353 +
                       C51091 * C3357 + C44281 * C831 + C51090 * C841) *
                          C50758) *
                         C50773 * C50949) *
                        C50853) *
                       C50829)) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C696 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C50753) *
                         C50773 * C51055 +
                     ((C47251 + C47252 + C47253) * C696 +
                      (C47254 + C47255 + C47256) * C50753) *
                         C50773 * C50949) *
                        C1643 -
                    (((C47853 + C47854 + C47855) * C50753 +
                      (C47856 + C47857 + C47858) * C696) *
                         C50773 * C50949 +
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C50753 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C696) *
                         C50773 * C51055) *
                        C50853) *
                       C51086 +
                   ((((C47858 + C47857 + C47856) * C696 +
                      (C47855 + C47854 + C47853) * C50753) *
                         C50773 * C51055 +
                     ((C47859 + C47860 + C47861) * C696 +
                      (C47862 + C47863 + C47864) * C50753) *
                         C50773 * C50949) *
                        C50853 -
                    (((C47561 + C47562 + C47563) * C50753 +
                      (C47564 + C47565 + C47566) * C696) *
                         C50773 * C50949 +
                     ((C47256 + C47255 + C47254) * C50753 +
                      (C47253 + C47252 + C47251) * C696) *
                         C50773 * C51055) *
                        C1643) *
                       C51073 +
                   ((((C47566 + C47565 + C47564) * C696 +
                      (C47563 + C47562 + C47561) * C50753) *
                         C50773 * C51055 +
                     ((C47677 + C47678 + C47679) * C696 +
                      (C47680 + C47681 + C47682) * C50753) *
                         C50773 * C50949) *
                        C1643 -
                    (((C44283 * C20674 + C44280 * C20676 + C44282 * C3521 +
                       C51091 * C3524 + C44281 * C3149 + C51090 * C3156) *
                          C50753 +
                      (C44283 * C20673 + C44280 * C20675 + C44282 * C3518 +
                       C51091 * C3522 + C44281 * C3144 + C51090 * C3148) *
                          C696) *
                         C50773 * C50949 +
                     ((C47864 + C47863 + C47862) * C50753 +
                      (C47861 + C47860 + C47859) * C696) *
                         C50773 * C51055) *
                        C50853) *
                       C1390)) /
                 (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C696 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C50753) *
                         C50773 * C51055 +
                     ((C47251 + C47252 + C47253) * C696 +
                      (C47254 + C47255 + C47256) * C50753) *
                         C50773 * C50949) *
                        C51087 -
                    (((C47853 + C47854 + C47855) * C50753 +
                      (C47856 + C47857 + C47858) * C696) *
                         C50773 * C50949 +
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C50753 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C696) *
                         C50773 * C51055) *
                        C51076 +
                    (((C44281 * C944 + C51090 * C949 + C44282 * C1169 +
                       C51091 * C1177 + C44283 * C6286 + C44280 * C6289) *
                          C696 +
                      (C44281 * C950 + C51090 * C959 + C44282 * C1176 +
                       C51091 * C1181 + C44283 * C6290 + C44280 * C6295) *
                          C50753) *
                         C50773 * C51055 +
                     ((C48169 + C48170 + C48171) * C696 +
                      (C48172 + C48173 + C48174) * C50753) *
                         C50773 * C50949) *
                        C1875) *
                       C1283 +
                   ((((C47858 + C47857 + C47856) * C696 +
                      (C47855 + C47854 + C47853) * C50753) *
                         C50773 * C51055 +
                     ((C47859 + C47860 + C47861) * C696 +
                      (C47862 + C47863 + C47864) * C50753) *
                         C50773 * C50949) *
                        C51076 -
                    (((C47561 + C47562 + C47563) * C50753 +
                      (C47564 + C47565 + C47566) * C696) *
                         C50773 * C50949 +
                     ((C47256 + C47255 + C47254) * C50753 +
                      (C47253 + C47252 + C47251) * C696) *
                         C50773 * C51055) *
                        C51087 -
                    (((C44283 * C22841 + C44280 * C22843 + C44282 * C3649 +
                       C51091 * C3656 + C44281 * C3351 + C51090 * C3356) *
                          C50753 +
                      (C44283 * C22840 + C44280 * C22842 + C44282 * C3644 +
                       C51091 * C3650 + C44281 * C3347 + C51090 * C3350) *
                          C696) *
                         C50773 * C50949 +
                     ((C48174 + C48173 + C48172) * C50753 +
                      (C48171 + C48170 + C48169) * C696) *
                         C50773 * C51055) *
                        C1875) *
                       C50829)) /
                 (p * q * std::sqrt(p + q));
    d2ee[171] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C49770 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C51025 -
                     (C44321 + C44322 + C44323) * C49763 -
                     (C44324 + C44325 + C44326) * C50758) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C49770 +
                     (C47254 + C47255 + C47256) * C51025 -
                     (C44511 + C44510 + C44509) * C49763 -
                     (C44514 + C44513 + C44512) * C50758) *
                        C50773 * C50949) *
                       C50841 * C582 +
                   (((C44509 + C44510 + C44511) * C49763 -
                     ((C47256 + C47255 + C47254) * C51025 +
                      (C47253 + C47252 + C47251) * C49770) +
                     (C44512 + C44513 + C44514) * C50758) *
                        C50773 * C51055 +
                    ((C44863 + C44862 + C44861) * C49763 -
                     ((C47561 + C47562 + C47563) * C51025 +
                      (C47564 + C47565 + C47566) * C49770) +
                     (C44866 + C44865 + C44864) * C50758) *
                        C50773 * C50949) *
                       C50841 * C583 +
                   (((C47566 + C47565 + C47564) * C49770 +
                     (C47563 + C47562 + C47561) * C51025 -
                     (C44861 + C44862 + C44863) * C49763 -
                     (C44864 + C44865 + C44866) * C50758) *
                        C50773 * C51055 +
                    ((C44281 * C700 + C51090 * C708 + C44282 * C3144 +
                      C51091 * C3148 + C44283 * C3518 + C44280 * C3522) *
                         C49770 +
                     (C44281 * C707 + C51090 * C712 + C44282 * C3149 +
                      C51091 * C3156 + C44283 * C3521 + C44280 * C3524) *
                         C51025 -
                     (C44283 * C3517 + C44280 * C3520 + C44282 * C3145 +
                      C51091 * C3150 + C44281 * C699 + C51090 * C706) *
                         C49763 -
                     (C44283 * C3519 + C44280 * C3523 + C44282 * C3151 +
                      C51091 * C3157 + C44281 * C705 + C51090 * C711) *
                         C50758) *
                        C50773 * C50949) *
                       C50841 * C584)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                     C51091 * C442 + C44283 * C944 + C44280 * C949) *
                        C118 +
                    (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                     C51091 * C452 + C44283 * C950 + C44280 * C959) *
                        C106 -
                    (C44321 + C44322 + C44323) * C119 -
                    (C44324 + C44325 + C44326) * C107 +
                    (C44327 + C44328 + C44329) * C120 +
                    (C44330 + C44331 + C44332) * C108 -
                    (C44333 + C44334 + C44335) * C121 -
                    (C44336 + C44337 + C44338) * C109) *
                       C50773 * C51055 +
                   ((C44281 * C287 + C51090 * C294 + C44282 * C811 +
                     C51091 * C819 + C44283 * C1083 + C44280 * C1091) *
                        C118 +
                    (C44281 * C293 + C51090 * C304 + C44282 * C820 +
                     C51091 * C835 + C44283 * C1090 + C44280 * C1095) *
                        C106 -
                    (C44511 + C44510 + C44509) * C119 -
                    (C44514 + C44513 + C44512) * C107 +
                    (C44517 + C44516 + C44515) * C120 +
                    (C44520 + C44519 + C44518) * C108 -
                    (C44283 * C1080 + C44280 * C1085 + C44282 * C814 +
                     C51091 * C825 + C44281 * C289 + C51090 * C298) *
                        C121 -
                    (C44283 * C1084 + C44280 * C1092 + C44282 * C826 +
                     C51091 * C838 + C44281 * C299 + C51090 * C307) *
                        C109) *
                       C50773 * C50949) *
                  C50841 * C50815) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C49770 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C51025 -
                     (C44321 + C44322 + C44323) * C49763 -
                     (C44324 + C44325 + C44326) * C50758) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C49770 +
                     (C47254 + C47255 + C47256) * C51025 -
                     (C44511 + C44510 + C44509) * C49763 -
                     (C44514 + C44513 + C44512) * C50758) *
                        C50773 * C50949) *
                       C941 +
                   (((C44691 + C44692 + C44693) * C49763 -
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C51025 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C49770) +
                     (C44694 + C44695 + C44696) * C50758) *
                        C50773 * C51055 +
                    ((C46019 + C46018 + C46017) * C49763 -
                     ((C47853 + C47854 + C47855) * C51025 +
                      (C47856 + C47857 + C47858) * C49770) +
                     (C46022 + C46021 + C46020) * C50758) *
                        C50773 * C50949) *
                       C942 +
                   (((C44281 * C944 + C51090 * C949 + C44282 * C1169 +
                      C51091 * C1177 + C44283 * C6286 + C44280 * C6289) *
                         C49770 +
                     (C44281 * C950 + C51090 * C959 + C44282 * C1176 +
                      C51091 * C1181 + C44283 * C6290 + C44280 * C6295) *
                         C51025 -
                     (C45269 + C45270 + C45271) * C49763 -
                     (C45272 + C45273 + C45274) * C50758) *
                        C50773 * C51055 +
                    ((C44281 * C1083 + C51090 * C1091 + C44282 * C3646 +
                      C51091 * C3654 + C44283 * C6463 + C44280 * C6467) *
                         C49770 +
                     (C44281 * C1090 + C51090 * C1095 + C44282 * C3653 +
                      C51091 * C3658 + C44283 * C6466 + C44280 * C6469) *
                         C51025 -
                     (C44283 * C6462 + C44280 * C6465 + C44282 * C3645 +
                      C51091 * C3652 + C44281 * C1082 + C51090 * C1089) *
                         C49763 -
                     (C44283 * C6464 + C44280 * C6468 + C44282 * C3651 +
                      C51091 * C3657 + C44281 * C1088 + C51090 * C1094) *
                         C50758) *
                        C50773 * C50949) *
                       C943) *
                  C50815) /
                     (p * q * std::sqrt(p + q));
    d2ee[172] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C696 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C50753) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C696 +
                     (C47254 + C47255 + C47256) * C50753) *
                        C50773 * C50949) *
                       C50841 * C692 -
                   (((C47561 + C47562 + C47563) * C50753 +
                     (C47564 + C47565 + C47566) * C696) *
                        C50773 * C50949 +
                    ((C47256 + C47255 + C47254) * C50753 +
                     (C47253 + C47252 + C47251) * C696) *
                        C50773 * C51055) *
                       C50841 * C693 +
                   (((C47566 + C47565 + C47564) * C696 +
                     (C47563 + C47562 + C47561) * C50753) *
                        C50773 * C51055 +
                    ((C47677 + C47678 + C47679) * C696 +
                     (C47680 + C47681 + C47682) * C50753) *
                        C50773 * C50949) *
                       C50841 * C694 -
                   (((C44283 * C20596 + C44280 * C20598 + C44282 * C3154 +
                      C51091 * C3159 + C44281 * C2807 + C51090 * C2812) *
                         C50753 +
                     (C44283 * C20595 + C44280 * C20597 + C44282 * C3147 +
                      C51091 * C3155 + C44281 * C2803 + C51090 * C2806) *
                         C696) *
                        C50773 * C50949 +
                    ((C47682 + C47681 + C47680) * C50753 +
                     (C47679 + C47678 + C47677) * C696) *
                        C50773 * C51055) *
                       C50841 * C695)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C283 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C279 +
                     (C44327 + C44328 + C44329) * C285 +
                     (C44330 + C44331 + C44332) * C280) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C283 +
                     (C47254 + C47255 + C47256) * C278 -
                     (C44511 + C44510 + C44509) * C284 -
                     (C44514 + C44513 + C44512) * C279 +
                     (C44517 + C44516 + C44515) * C285 +
                     (C44520 + C44519 + C44518) * C280) *
                        C50773 * C50949) *
                       C50841 * C51040 +
                   (((C44509 + C44510 + C44511) * C284 -
                     ((C47256 + C47255 + C47254) * C278 +
                      (C47253 + C47252 + C47251) * C283) +
                     (C44512 + C44513 + C44514) * C279 -
                     (C44515 + C44516 + C44517) * C285 -
                     (C44518 + C44519 + C44520) * C280) *
                        C50773 * C51055 +
                    ((C44863 + C44862 + C44861) * C284 -
                     ((C44283 * C3351 + C44280 * C3356 + C44282 * C833 +
                       C51091 * C842 + C44281 * C593 + C51090 * C602) *
                          C278 +
                      (C44283 * C3347 + C44280 * C3350 + C44282 * C818 +
                       C51091 * C834 + C44281 * C587 + C51090 * C592) *
                          C283) +
                     (C44866 + C44865 + C44864) * C279 -
                     (C44283 * C3349 + C44280 * C3354 + C44282 * C816 +
                      C51091 * C830 + C44281 * C589 + C51090 * C596) *
                         C285 -
                     (C44283 * C3355 + C44280 * C3358 + C44282 * C829 +
                      C51091 * C840 + C44281 * C597 + C51090 * C604) *
                         C280) *
                        C50773 * C50949) *
                       C50841 * C50829)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C696 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C50753) *
                         C50773 * C51055 +
                     ((C47251 + C47252 + C47253) * C696 +
                      (C47254 + C47255 + C47256) * C50753) *
                         C50773 * C50949) *
                        C941 -
                    (((C47853 + C47854 + C47855) * C50753 +
                      (C47856 + C47857 + C47858) * C696) *
                         C50773 * C50949 +
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C50753 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C696) *
                         C50773 * C51055) *
                        C942 +
                    (((C44281 * C944 + C51090 * C949 + C44282 * C1169 +
                       C51091 * C1177 + C44283 * C6286 + C44280 * C6289) *
                          C696 +
                      (C44281 * C950 + C51090 * C959 + C44282 * C1176 +
                       C51091 * C1181 + C44283 * C6290 + C44280 * C6295) *
                          C50753) *
                         C50773 * C51055 +
                     ((C48169 + C48170 + C48171) * C696 +
                      (C48172 + C48173 + C48174) * C50753) *
                         C50773 * C50949) *
                        C943) *
                       C51040 +
                   ((((C47858 + C47857 + C47856) * C696 +
                      (C47855 + C47854 + C47853) * C50753) *
                         C50773 * C51055 +
                     ((C47859 + C47860 + C47861) * C696 +
                      (C47862 + C47863 + C47864) * C50753) *
                         C50773 * C50949) *
                        C942 -
                    (((C47561 + C47562 + C47563) * C50753 +
                      (C47564 + C47565 + C47566) * C696) *
                         C50773 * C50949 +
                     ((C47256 + C47255 + C47254) * C50753 +
                      (C47253 + C47252 + C47251) * C696) *
                         C50773 * C51055) *
                        C941 -
                    (((C44283 * C22841 + C44280 * C22843 + C44282 * C3649 +
                       C51091 * C3656 + C44281 * C3351 + C51090 * C3356) *
                          C50753 +
                      (C44283 * C22840 + C44280 * C22842 + C44282 * C3644 +
                       C51091 * C3650 + C44281 * C3347 + C51090 * C3350) *
                          C696) *
                         C50773 * C50949 +
                     ((C48174 + C48173 + C48172) * C50753 +
                      (C48171 + C48170 + C48169) * C696) *
                         C50773 * C51055) *
                        C943) *
                       C50829)) /
                     (p * q * std::sqrt(p + q));
    d2ee[173] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C696 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C50753) *
                         C50773 * C51055 +
                     ((C47251 + C47252 + C47253) * C696 +
                      (C47254 + C47255 + C47256) * C50753) *
                         C50773 * C50949) *
                        C51041 -
                    (((C47853 + C47854 + C47855) * C50753 +
                      (C47856 + C47857 + C47858) * C696) *
                         C50773 * C50949 +
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C50753 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C696) *
                         C50773 * C51055) *
                        C50853) *
                       C582 +
                   ((((C47858 + C47857 + C47856) * C696 +
                      (C47855 + C47854 + C47853) * C50753) *
                         C50773 * C51055 +
                     ((C47859 + C47860 + C47861) * C696 +
                      (C47862 + C47863 + C47864) * C50753) *
                         C50773 * C50949) *
                        C50853 -
                    (((C47561 + C47562 + C47563) * C50753 +
                      (C47564 + C47565 + C47566) * C696) *
                         C50773 * C50949 +
                     ((C47256 + C47255 + C47254) * C50753 +
                      (C47253 + C47252 + C47251) * C696) *
                         C50773 * C51055) *
                        C51041) *
                       C583 +
                   ((((C47566 + C47565 + C47564) * C696 +
                      (C47563 + C47562 + C47561) * C50753) *
                         C50773 * C51055 +
                     ((C47677 + C47678 + C47679) * C696 +
                      (C47680 + C47681 + C47682) * C50753) *
                         C50773 * C50949) *
                        C51041 -
                    (((C44283 * C20674 + C44280 * C20676 + C44282 * C3521 +
                       C51091 * C3524 + C44281 * C3149 + C51090 * C3156) *
                          C50753 +
                      (C44283 * C20673 + C44280 * C20675 + C44282 * C3518 +
                       C51091 * C3522 + C44281 * C3144 + C51090 * C3148) *
                          C696) *
                         C50773 * C50949 +
                     ((C47864 + C47863 + C47862) * C50753 +
                      (C47861 + C47860 + C47859) * C696) *
                         C50773 * C51055) *
                        C50853) *
                       C584)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C283 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C279 +
                     (C44327 + C44328 + C44329) * C285 +
                     (C44330 + C44331 + C44332) * C280) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C283 +
                     (C47254 + C47255 + C47256) * C278 -
                     (C44511 + C44510 + C44509) * C284 -
                     (C44514 + C44513 + C44512) * C279 +
                     (C44517 + C44516 + C44515) * C285 +
                     (C44520 + C44519 + C44518) * C280) *
                        C50773 * C50949) *
                       C51041 +
                   (((C44691 + C44692 + C44693) * C284 -
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C278 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C283) +
                     (C44694 + C44695 + C44696) * C279 -
                     (C44697 + C44698 + C44699) * C285 -
                     (C44700 + C44701 + C44702) * C280) *
                        C50773 * C51055 +
                    ((C46019 + C46018 + C46017) * C284 -
                     ((C44283 * C3653 + C44280 * C3658 + C44282 * C1090 +
                       C51091 * C1095 + C44281 * C820 + C51090 * C835) *
                          C278 +
                      (C44283 * C3646 + C44280 * C3654 + C44282 * C1083 +
                       C51091 * C1091 + C44281 * C811 + C51090 * C819) *
                          C283) +
                     (C46022 + C46021 + C46020) * C279 -
                     (C44283 * C7062 + C44280 * C7063 + C44282 * C1081 +
                      C51091 * C1087 + C44281 * C813 + C51090 * C823) *
                         C285 -
                     (C44283 * C7064 + C44280 * C7065 + C44282 * C1086 +
                      C51091 * C1093 + C44281 * C824 + C51090 * C837) *
                         C280) *
                        C50773 * C50949) *
                       C50853) *
                  C50815) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C696 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C50753) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C696 +
                     (C47254 + C47255 + C47256) * C50753) *
                        C50773 * C50949) *
                       C1162 -
                   (((C47853 + C47854 + C47855) * C50753 +
                     (C47856 + C47857 + C47858) * C696) *
                        C50773 * C50949 +
                    ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                      C51091 * C959 + C44281 * C441 + C51090 * C452) *
                         C50753 +
                     (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                      C51091 * C949 + C44281 * C435 + C51090 * C442) *
                         C696) *
                        C50773 * C51055) *
                       C1163 +
                   (((C44281 * C944 + C51090 * C949 + C44282 * C1169 +
                      C51091 * C1177 + C44283 * C6286 + C44280 * C6289) *
                         C696 +
                     (C44281 * C950 + C51090 * C959 + C44282 * C1176 +
                      C51091 * C1181 + C44283 * C6290 + C44280 * C6295) *
                         C50753) *
                        C50773 * C51055 +
                    ((C48169 + C48170 + C48171) * C696 +
                     (C48172 + C48173 + C48174) * C50753) *
                        C50773 * C50949) *
                       C1164 -
                   (((C44283 * C22961 + C44280 * C22963 + C44282 * C6466 +
                      C51091 * C6469 + C44281 * C3653 + C51090 * C3658) *
                         C50753 +
                     (C44283 * C22960 + C44280 * C22962 + C44282 * C6463 +
                      C51091 * C6467 + C44281 * C3646 + C51090 * C3654) *
                         C696) *
                        C50773 * C50949 +
                    ((C44283 * C6572 + C44280 * C6575 + C44282 * C6290 +
                      C51091 * C6295 + C44281 * C1176 + C51090 * C1181) *
                         C50753 +
                     (C44283 * C6569 + C44280 * C6573 + C44282 * C6286 +
                      C51091 * C6289 + C44281 * C1169 + C51090 * C1177) *
                         C696) *
                        C50773 * C51055) *
                       C1165) *
                  C50815) /
                     (p * q * std::sqrt(p + q));
    d2ee[174] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C1285 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C51083 -
                     (C44321 + C44322 + C44323) * C1286 -
                     (C44324 + C44325 + C44326) * C51067 +
                     (C44327 + C44328 + C44329) * C1287 +
                     (C44330 + C44331 + C44332) * C1282) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C1285 +
                     (C47254 + C47255 + C47256) * C51083 -
                     (C44511 + C44510 + C44509) * C1286 -
                     (C44514 + C44513 + C44512) * C51067 +
                     (C44517 + C44516 + C44515) * C1287 +
                     (C44520 + C44519 + C44518) * C1282) *
                        C50773 * C50949) *
                       C1643 +
                   (((C44691 + C44692 + C44693) * C1286 -
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C51083 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C1285) +
                     (C44694 + C44695 + C44696) * C51067 -
                     (C44697 + C44698 + C44699) * C1287 -
                     (C44700 + C44701 + C44702) * C1282) *
                        C50773 * C51055 +
                    ((C46019 + C46018 + C46017) * C1286 -
                     ((C47853 + C47854 + C47855) * C51083 +
                      (C47856 + C47857 + C47858) * C1285) +
                     (C46022 + C46021 + C46020) * C51067 -
                     (C44283 * C7062 + C44280 * C7063 + C44282 * C1081 +
                      C51091 * C1087 + C44281 * C813 + C51090 * C823) *
                         C1287 -
                     (C44283 * C7064 + C44280 * C7065 + C44282 * C1086 +
                      C51091 * C1093 + C44281 * C824 + C51090 * C837) *
                         C1282) *
                        C50773 * C50949) *
                       C50853) *
                  C50815) /
                 (p * q * std::sqrt(p + q));
    d2ee[175] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C1391 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C1386 -
                      (C44321 + C44322 + C44323) * C1392 -
                      (C44324 + C44325 + C44326) * C50758) *
                         C50773 * C51055 +
                     ((C47251 + C47252 + C47253) * C1391 +
                      (C47254 + C47255 + C47256) * C1386 -
                      (C44511 + C44510 + C44509) * C1392 -
                      (C44514 + C44513 + C44512) * C50758) *
                         C50773 * C50949) *
                        C1643 +
                    (((C44691 + C44692 + C44693) * C1392 -
                      ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                        C51091 * C959 + C44281 * C441 + C51090 * C452) *
                           C1386 +
                       (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                        C51091 * C949 + C44281 * C435 + C51090 * C442) *
                           C1391) +
                      (C44694 + C44695 + C44696) * C50758) *
                         C50773 * C51055 +
                     ((C46019 + C46018 + C46017) * C1392 -
                      ((C47853 + C47854 + C47855) * C1386 +
                       (C47856 + C47857 + C47858) * C1391) +
                      (C46022 + C46021 + C46020) * C50758) *
                         C50773 * C50949) *
                        C50853) *
                       C51040 +
                   ((((C44509 + C44510 + C44511) * C1392 -
                      ((C47256 + C47255 + C47254) * C1386 +
                       (C47253 + C47252 + C47251) * C1391) +
                      (C44512 + C44513 + C44514) * C50758) *
                         C50773 * C51055 +
                     ((C44863 + C44862 + C44861) * C1392 -
                      ((C47561 + C47562 + C47563) * C1386 +
                       (C47564 + C47565 + C47566) * C1391) +
                      (C44866 + C44865 + C44864) * C50758) *
                         C50773 * C50949) *
                        C1643 +
                    (((C47858 + C47857 + C47856) * C1391 +
                      (C47855 + C47854 + C47853) * C1386 -
                      (C46017 + C46018 + C46019) * C1392 -
                      (C46020 + C46021 + C46022) * C50758) *
                         C50773 * C51055 +
                     ((C47859 + C47860 + C47861) * C1391 +
                      (C47862 + C47863 + C47864) * C1386 -
                      (C44283 * C3643 + C44280 * C3648 + C44282 * C3348 +
                       C51091 * C3352 + C44281 * C817 + C51090 * C832) *
                          C1392 -
                      (C44283 * C3647 + C44280 * C3655 + C44282 * C3353 +
                       C51091 * C3357 + C44281 * C831 + C51090 * C841) *
                          C50758) *
                         C50773 * C50949) *
                        C50853) *
                       C50829)) /
                 (p * q * std::sqrt(p + q));
    d2ee[176] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C1391 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C1386 -
                     (C44321 + C44322 + C44323) * C1392 -
                     (C44324 + C44325 + C44326) * C50758) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C1391 +
                     (C47254 + C47255 + C47256) * C1386 -
                     (C44511 + C44510 + C44509) * C1392 -
                     (C44514 + C44513 + C44512) * C50758) *
                        C50773 * C50949) *
                       C51087 +
                   (((C44691 + C44692 + C44693) * C1392 -
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C1386 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C1391) +
                     (C44694 + C44695 + C44696) * C50758) *
                        C50773 * C51055 +
                    ((C46019 + C46018 + C46017) * C1392 -
                     ((C47853 + C47854 + C47855) * C1386 +
                      (C47856 + C47857 + C47858) * C1391) +
                     (C46022 + C46021 + C46020) * C50758) *
                        C50773 * C50949) *
                       C51076 +
                   (((C44281 * C944 + C51090 * C949 + C44282 * C1169 +
                      C51091 * C1177 + C44283 * C6286 + C44280 * C6289) *
                         C1391 +
                     (C44281 * C950 + C51090 * C959 + C44282 * C1176 +
                      C51091 * C1181 + C44283 * C6290 + C44280 * C6295) *
                         C1386 -
                     (C45269 + C45270 + C45271) * C1392 -
                     (C45272 + C45273 + C45274) * C50758) *
                        C50773 * C51055 +
                    ((C48169 + C48170 + C48171) * C1391 +
                     (C48172 + C48173 + C48174) * C1386 -
                     (C44283 * C6462 + C44280 * C6465 + C44282 * C3645 +
                      C51091 * C3652 + C44281 * C1082 + C51090 * C1089) *
                         C1392 -
                     (C44283 * C6464 + C44280 * C6468 + C44282 * C3651 +
                      C51091 * C3657 + C44281 * C1088 + C51090 * C1094) *
                         C50758) *
                        C50773 * C50949) *
                       C1875) *
                  C50815) /
                 (p * q * std::sqrt(p + q));
    d2ee[177] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                     C51091 * C442 + C44283 * C944 + C44280 * C949) *
                        C118 +
                    (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                     C51091 * C452 + C44283 * C950 + C44280 * C959) *
                        C106 -
                    (C44321 + C44322 + C44323) * C119 -
                    (C44324 + C44325 + C44326) * C107 +
                    (C44327 + C44328 + C44329) * C120 +
                    (C44330 + C44331 + C44332) * C108 -
                    (C44333 + C44334 + C44335) * C121 -
                    (C44336 + C44337 + C44338) * C109) *
                       C50773 * C51055 +
                   ((C44281 * C287 + C51090 * C294 + C44282 * C811 +
                     C51091 * C819 + C44283 * C1083 + C44280 * C1091) *
                        C118 +
                    (C44281 * C293 + C51090 * C304 + C44282 * C820 +
                     C51091 * C835 + C44283 * C1090 + C44280 * C1095) *
                        C106 -
                    (C44511 + C44510 + C44509) * C119 -
                    (C44514 + C44513 + C44512) * C107 +
                    (C44517 + C44516 + C44515) * C120 +
                    (C44520 + C44519 + C44518) * C108 -
                    (C44283 * C1080 + C44280 * C1085 + C44282 * C814 +
                     C51091 * C825 + C44281 * C289 + C51090 * C298) *
                        C121 -
                    (C44283 * C1084 + C44280 * C1092 + C44282 * C826 +
                     C51091 * C838 + C44281 * C299 + C51090 * C307) *
                        C109) *
                       C50773 * C50949) *
                  C50841 * C50815) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C49770 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C51025 -
                     (C44321 + C44322 + C44323) * C49763 -
                     (C44324 + C44325 + C44326) * C50758) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C49770 +
                     (C47254 + C47255 + C47256) * C51025 -
                     (C44511 + C44510 + C44509) * C49763 -
                     (C44514 + C44513 + C44512) * C50758) *
                        C50773 * C50949) *
                       C50841 * C582 +
                   (((C44509 + C44510 + C44511) * C49763 -
                     ((C47256 + C47255 + C47254) * C51025 +
                      (C47253 + C47252 + C47251) * C49770) +
                     (C44512 + C44513 + C44514) * C50758) *
                        C50773 * C51055 +
                    ((C44863 + C44862 + C44861) * C49763 -
                     ((C47561 + C47562 + C47563) * C51025 +
                      (C47564 + C47565 + C47566) * C49770) +
                     (C44866 + C44865 + C44864) * C50758) *
                        C50773 * C50949) *
                       C50841 * C583 +
                   (((C47566 + C47565 + C47564) * C49770 +
                     (C47563 + C47562 + C47561) * C51025 -
                     (C44861 + C44862 + C44863) * C49763 -
                     (C44864 + C44865 + C44866) * C50758) *
                        C50773 * C51055 +
                    ((C44281 * C700 + C51090 * C708 + C44282 * C3144 +
                      C51091 * C3148 + C44283 * C3518 + C44280 * C3522) *
                         C49770 +
                     (C44281 * C707 + C51090 * C712 + C44282 * C3149 +
                      C51091 * C3156 + C44283 * C3521 + C44280 * C3524) *
                         C51025 -
                     (C44283 * C3517 + C44280 * C3520 + C44282 * C3145 +
                      C51091 * C3150 + C44281 * C699 + C51090 * C706) *
                         C49763 -
                     (C44283 * C3519 + C44280 * C3523 + C44282 * C3151 +
                      C51091 * C3157 + C44281 * C705 + C51090 * C711) *
                         C50758) *
                        C50773 * C50949) *
                       C50841 * C584)) /
                     (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C283 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C279 +
                     (C44327 + C44328 + C44329) * C285 +
                     (C44330 + C44331 + C44332) * C280) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C283 +
                     (C47254 + C47255 + C47256) * C278 -
                     (C44511 + C44510 + C44509) * C284 -
                     (C44514 + C44513 + C44512) * C279 +
                     (C44517 + C44516 + C44515) * C285 +
                     (C44520 + C44519 + C44518) * C280) *
                        C50773 * C50949) *
                       C50841 * C51040 +
                   (((C44509 + C44510 + C44511) * C284 -
                     ((C47256 + C47255 + C47254) * C278 +
                      (C47253 + C47252 + C47251) * C283) +
                     (C44512 + C44513 + C44514) * C279 -
                     (C44515 + C44516 + C44517) * C285 -
                     (C44518 + C44519 + C44520) * C280) *
                        C50773 * C51055 +
                    ((C44863 + C44862 + C44861) * C284 -
                     ((C44283 * C3351 + C44280 * C3356 + C44282 * C833 +
                       C51091 * C842 + C44281 * C593 + C51090 * C602) *
                          C278 +
                      (C44283 * C3347 + C44280 * C3350 + C44282 * C818 +
                       C51091 * C834 + C44281 * C587 + C51090 * C592) *
                          C283) +
                     (C44866 + C44865 + C44864) * C279 -
                     (C44283 * C3349 + C44280 * C3354 + C44282 * C816 +
                      C51091 * C830 + C44281 * C589 + C51090 * C596) *
                         C285 -
                     (C44283 * C3355 + C44280 * C3358 + C44282 * C829 +
                      C51091 * C840 + C44281 * C597 + C51090 * C604) *
                         C280) *
                        C50773 * C50949) *
                       C50841 * C50829)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C696 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C50753) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C696 +
                     (C47254 + C47255 + C47256) * C50753) *
                        C50773 * C50949) *
                       C50841 * C692 -
                   (((C47561 + C47562 + C47563) * C50753 +
                     (C47564 + C47565 + C47566) * C696) *
                        C50773 * C50949 +
                    ((C47256 + C47255 + C47254) * C50753 +
                     (C47253 + C47252 + C47251) * C696) *
                        C50773 * C51055) *
                       C50841 * C693 +
                   (((C47566 + C47565 + C47564) * C696 +
                     (C47563 + C47562 + C47561) * C50753) *
                        C50773 * C51055 +
                    ((C47677 + C47678 + C47679) * C696 +
                     (C47680 + C47681 + C47682) * C50753) *
                        C50773 * C50949) *
                       C50841 * C694 -
                   (((C44283 * C20596 + C44280 * C20598 + C44282 * C3154 +
                      C51091 * C3159 + C44281 * C2807 + C51090 * C2812) *
                         C50753 +
                     (C44283 * C20595 + C44280 * C20597 + C44282 * C3147 +
                      C51091 * C3155 + C44281 * C2803 + C51090 * C2806) *
                         C696) *
                        C50773 * C50949 +
                    ((C47682 + C47681 + C47680) * C50753 +
                     (C47679 + C47678 + C47677) * C696) *
                        C50773 * C51055) *
                       C50841 * C695)) /
                     (p * q * std::sqrt(p + q));
    d2ee[179] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C283 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C279 +
                     (C44327 + C44328 + C44329) * C285 +
                     (C44330 + C44331 + C44332) * C280) *
                        C50773 * C51055 +
                    ((C47251 + C47252 + C47253) * C283 +
                     (C47254 + C47255 + C47256) * C278 -
                     (C44511 + C44510 + C44509) * C284 -
                     (C44514 + C44513 + C44512) * C279 +
                     (C44517 + C44516 + C44515) * C285 +
                     (C44520 + C44519 + C44518) * C280) *
                        C50773 * C50949) *
                       C51041 +
                   (((C44691 + C44692 + C44693) * C284 -
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C278 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C283) +
                     (C44694 + C44695 + C44696) * C279 -
                     (C44697 + C44698 + C44699) * C285 -
                     (C44700 + C44701 + C44702) * C280) *
                        C50773 * C51055 +
                    ((C46019 + C46018 + C46017) * C284 -
                     ((C44283 * C3653 + C44280 * C3658 + C44282 * C1090 +
                       C51091 * C1095 + C44281 * C820 + C51090 * C835) *
                          C278 +
                      (C44283 * C3646 + C44280 * C3654 + C44282 * C1083 +
                       C51091 * C1091 + C44281 * C811 + C51090 * C819) *
                          C283) +
                     (C46022 + C46021 + C46020) * C279 -
                     (C44283 * C7062 + C44280 * C7063 + C44282 * C1081 +
                      C51091 * C1087 + C44281 * C813 + C51090 * C823) *
                         C285 -
                     (C44283 * C7064 + C44280 * C7065 + C44282 * C1086 +
                      C51091 * C1093 + C44281 * C824 + C51090 * C837) *
                         C280) *
                        C50773 * C50949) *
                       C50853) *
                  C50815) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C696 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C50753) *
                         C50773 * C51055 +
                     ((C47251 + C47252 + C47253) * C696 +
                      (C47254 + C47255 + C47256) * C50753) *
                         C50773 * C50949) *
                        C51041 -
                    (((C47853 + C47854 + C47855) * C50753 +
                      (C47856 + C47857 + C47858) * C696) *
                         C50773 * C50949 +
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C50753 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C696) *
                         C50773 * C51055) *
                        C50853) *
                       C582 +
                   ((((C47858 + C47857 + C47856) * C696 +
                      (C47855 + C47854 + C47853) * C50753) *
                         C50773 * C51055 +
                     ((C47859 + C47860 + C47861) * C696 +
                      (C47862 + C47863 + C47864) * C50753) *
                         C50773 * C50949) *
                        C50853 -
                    (((C47561 + C47562 + C47563) * C50753 +
                      (C47564 + C47565 + C47566) * C696) *
                         C50773 * C50949 +
                     ((C47256 + C47255 + C47254) * C50753 +
                      (C47253 + C47252 + C47251) * C696) *
                         C50773 * C51055) *
                        C51041) *
                       C583 +
                   ((((C47566 + C47565 + C47564) * C696 +
                      (C47563 + C47562 + C47561) * C50753) *
                         C50773 * C51055 +
                     ((C47677 + C47678 + C47679) * C696 +
                      (C47680 + C47681 + C47682) * C50753) *
                         C50773 * C50949) *
                        C51041 -
                    (((C44283 * C20674 + C44280 * C20676 + C44282 * C3521 +
                       C51091 * C3524 + C44281 * C3149 + C51090 * C3156) *
                          C50753 +
                      (C44283 * C20673 + C44280 * C20675 + C44282 * C3518 +
                       C51091 * C3522 + C44281 * C3144 + C51090 * C3148) *
                          C696) *
                         C50773 * C50949 +
                     ((C47864 + C47863 + C47862) * C50753 +
                      (C47861 + C47860 + C47859) * C696) *
                         C50773 * C51055) *
                        C50853) *
                       C584)) /
                     (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1285 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51083 -
            (C33395 + C33396) * C1286 - (C33397 + C33398) * C51067 +
            C33411 * C1287 + C33412 * C1282) *
               C50773 * C2302 +
           ((C36353 + C36354) * C1285 + (C36355 + C36356) * C51083 -
            (C33586 + C33585) * C1286 - (C33588 + C33587) * C51067 +
            (C33590 + C33589) * C1287 + (C33592 + C33591) * C1282) *
               C50773 * C2303 +
           (C36653 * C1285 + C36654 * C51083 - C36655 * C1286 -
            C36656 * C51067 + (C33950 + C33949) * C1287 +
            (C33952 + C33951) * C1282) *
               C50773 * C2304) *
              C50841 * C1283 +
          (((C33585 + C33586) * C1286 -
            ((C36356 + C36355) * C51083 + (C36354 + C36353) * C1285) +
            (C33587 + C33588) * C51067 - C33597 * C1287 - C33598 * C1282) *
               C50773 * C2302 +
           ((C33946 + C33945) * C1286 -
            ((C36360 + C36359) * C51083 + (C36358 + C36357) * C1285) +
            (C33948 + C33947) * C51067 - (C33949 + C33950) * C1287 -
            (C33951 + C33952) * C1282) *
               C50773 * C2303 +
           ((C36677 + C36678) * C1286 - (C36789 * C51083 + C36790 * C1285) +
            (C36683 + C36684) * C51067 -
            (C33361 * C4202 + C50975 * C4203 + C33360 * C698 + C33358 * C704) *
                C1287 -
            (C33361 * C4204 + C50975 * C4205 + C33360 * C703 + C33358 * C710) *
                C1282) *
               C50773 * C2304) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1285 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51083 -
            (C33395 + C33396) * C1286 - (C33397 + C33398) * C51067 +
            C33411 * C1287 + C33412 * C1282) *
               C17287 +
           ((C33396 + C33395) * C1285 + (C33398 + C33397) * C51083 -
            (C33400 + C33399) * C1286 - (C33402 + C33401) * C51067 +
            (C33404 + C33403) * C1287 + (C33406 + C33405) * C1282) *
               C17288 +
           (C33411 * C1285 + C33412 * C51083 - C33413 * C1286 -
            C33414 * C51067 + (C33408 + C33407) * C1287 +
            (C33410 + C33409) * C1282) *
               C17289) *
              C50900 * C50841 * C1283 +
          (((C33585 + C33586) * C1286 -
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C51083 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C1285) +
            (C33587 + C33588) * C51067 - C33597 * C1287 - C33598 * C1282) *
               C17287 +
           ((C33590 + C33589) * C1286 -
            ((C33588 + C33587) * C51083 + (C33586 + C33585) * C1285) +
            (C33592 + C33591) * C51067 - (C33593 + C33594) * C1287 -
            (C33595 + C33596) * C1282) *
               C17288 +
           ((C33594 + C33593) * C1286 - (C33598 * C51083 + C33597 * C1285) +
            (C33596 + C33595) * C51067 -
            (C33361 * C1523 + C50975 * C1524 + C33360 * C290 + C33358 * C300) *
                C1287 -
            (C33361 * C1525 + C50975 * C1526 + C33360 * C301 + C33358 * C308) *
                C1282) *
               C17289) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C1285 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C51083 -
           (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
            C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
               C1286 -
           (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
            C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
               C51067 +
           (C38958 * C124 + C38954 * C133 + C38959 * C436 + C38955 * C444 +
            C38960 * C946 + C38956 * C953 + C38961 * C1167 + C38957 * C1173) *
               C1287 +
           (C38958 * C134 + C38954 * C145 + C38959 * C445 + C38955 * C454 +
            C38960 * C954 + C38956 * C961 + C38961 * C1172 + C38957 * C1179) *
               C1282) *
              C50773 * C50900 * C50841 * C1283 +
          ((C38958 * C286 + C38954 * C292 + C38959 * C812 + C38955 * C821 +
            C38960 * C1082 + C38956 * C1089 + C38961 * C3645 + C38957 * C3652) *
               C1286 -
           ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
             C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
                C51083 +
            (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
             C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
                C1285) +
           (C38958 * C295 + C38954 * C305 + C38959 * C822 + C38955 * C836 +
            C38960 * C1088 + C38956 * C1094 + C38961 * C3651 + C38957 * C3657) *
               C51067 -
           (C38961 * C7062 + C38957 * C7063 + C38960 * C1081 + C38956 * C1087 +
            C38959 * C813 + C38955 * C823 + C38958 * C288 + C38954 * C296) *
               C1287 -
           (C38961 * C7064 + C38957 * C7065 + C38960 * C1086 + C38956 * C1093 +
            C38959 * C824 + C38955 * C837 + C38958 * C297 + C38954 * C306) *
               C1282) *
              C50773 * C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1391 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C1386 -
            (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
               C50773 * C2302 +
           ((C36353 + C36354) * C1391 + (C36355 + C36356) * C1386 -
            (C33586 + C33585) * C1392 - (C33588 + C33587) * C50758) *
               C50773 * C2303 +
           C37710 * C2304) *
              C50841 * C51086 +
          (((C33585 + C33586) * C1392 -
            ((C36356 + C36355) * C1386 + (C36354 + C36353) * C1391) +
            (C33587 + C33588) * C50758) *
               C50773 * C2302 +
           ((C33946 + C33945) * C1392 -
            ((C36360 + C36359) * C1386 + (C36358 + C36357) * C1391) +
            (C33948 + C33947) * C50758) *
               C50773 * C2303 +
           ((C36677 + C36678) * C1392 - (C36789 * C1386 + C36790 * C1391) +
            (C36683 + C36684) * C50758) *
               C50773 * C2304) *
              C50841 * C51073 +
          (C37710 * C2302 +
           ((C36682 + C36681) * C1391 + (C36680 + C36679) * C1386 -
            (C36678 + C36677) * C1392 - (C36684 + C36683) * C50758) *
               C50773 * C2303 +
           ((C36802 + C36803) * C1391 + (C36804 + C36805) * C1386 -
            (C33361 * C3146 + C50975 * C3153 + C33360 * C2804 +
             C33358 * C2808) *
                C1392 -
            (C33361 * C3152 + C50975 * C3158 + C33360 * C2809 +
             C33358 * C2813) *
                C50758) *
               C50773 * C2304) *
              C50841 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1391 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C1386 -
            (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
               C17287 +
           ((C33396 + C33395) * C1391 + (C33398 + C33397) * C1386 -
            (C33400 + C33399) * C1392 - (C33402 + C33401) * C50758) *
               C17288 +
           (C33411 * C1391 + C33412 * C1386 - C33413 * C1392 -
            C33414 * C50758) *
               C17289) *
              C50900 * C50841 * C51086 +
          (((C33585 + C33586) * C1392 -
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C1386 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C1391) +
            (C33587 + C33588) * C50758) *
               C17287 +
           ((C33590 + C33589) * C1392 -
            ((C33588 + C33587) * C1386 + (C33586 + C33585) * C1391) +
            (C33592 + C33591) * C50758) *
               C17288 +
           ((C33594 + C33593) * C1392 - (C33598 * C1386 + C33597 * C1391) +
            (C33596 + C33595) * C50758) *
               C17289) *
              C50900 * C50841 * C51073 +
          (((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                C1391 +
            (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                C1386 -
            (C33945 + C33946) * C1392 - (C33947 + C33948) * C50758) *
               C17287 +
           ((C33946 + C33945) * C1391 + (C33948 + C33947) * C1386 -
            (C33949 + C33950) * C1392 - (C33951 + C33952) * C50758) *
               C17288 +
           ((C33950 + C33949) * C1391 + (C33952 + C33951) * C1386 -
            (C33361 * C815 + C50975 * C828 + C33360 * C590 + C33358 * C598) *
                C1392 -
            (C33361 * C827 + C50975 * C839 + C33360 * C599 + C33358 * C605) *
                C50758) *
               C17289) *
              C50900 * C50841 * C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C1391 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C1386 -
           (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
            C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
               C1392 -
           (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
            C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
               C50758) *
              C50773 * C50900 * C50841 * C51086 +
          ((C38958 * C286 + C38954 * C292 + C38959 * C812 + C38955 * C821 +
            C38960 * C1082 + C38956 * C1089 + C38961 * C3645 + C38957 * C3652) *
               C1392 -
           ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
             C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
                C1386 +
            (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
             C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
                C1391) +
           (C38958 * C295 + C38954 * C305 + C38959 * C822 + C38955 * C836 +
            C38960 * C1088 + C38956 * C1094 + C38961 * C3651 + C38957 * C3657) *
               C50758) *
              C50773 * C50900 * C50841 * C51073 +
          ((C38958 * C587 + C38954 * C592 + C38959 * C818 + C38955 * C834 +
            C38960 * C3347 + C38956 * C3350 + C38961 * C3644 + C38957 * C3650) *
               C1391 +
           (C38958 * C593 + C38954 * C602 + C38959 * C833 + C38955 * C842 +
            C38960 * C3351 + C38956 * C3356 + C38961 * C3649 + C38957 * C3656) *
               C1386 -
           (C38961 * C3643 + C38957 * C3648 + C38960 * C3348 + C38956 * C3352 +
            C38959 * C817 + C38955 * C832 + C38958 * C588 + C38954 * C594) *
               C1392 -
           (C38961 * C3647 + C38957 * C3655 + C38960 * C3353 + C38956 * C3357 +
            C38959 * C831 + C38955 * C841 + C38958 * C595 + C38954 * C603) *
               C50758) *
              C50773 * C50900 * C50841 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C1391 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C1386 -
             (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
                C50773 * C2302 +
            ((C36353 + C36354) * C1391 + (C36355 + C36356) * C1386 -
             (C33586 + C33585) * C1392 - (C33588 + C33587) * C50758) *
                C50773 * C2303 +
            C37710 * C2304) *
               C51041 +
           (((C33769 + C33770) * C1392 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C1386 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C1391) +
             (C33771 + C33772) * C50758) *
                C50773 * C2302 +
            ((C35114 + C35113) * C1392 -
             ((C36983 + C36984) * C1386 + (C36985 + C36986) * C1391) +
             (C35116 + C35115) * C50758) *
                C50773 * C2303 +
            ((C37913 + C37914) * C1392 - (C36991 * C1386 + C36992 * C1391) +
             (C37915 + C37916) * C50758) *
                C50773 * C2304) *
               C50853) *
              C1283 +
          ((((C33585 + C33586) * C1392 -
             ((C36356 + C36355) * C1386 + (C36354 + C36353) * C1391) +
             (C33587 + C33588) * C50758) *
                C50773 * C2302 +
            ((C33946 + C33945) * C1392 -
             ((C36360 + C36359) * C1386 + (C36358 + C36357) * C1391) +
             (C33948 + C33947) * C50758) *
                C50773 * C2303 +
            ((C36677 + C36678) * C1392 - (C36789 * C1386 + C36790 * C1391) +
             (C36683 + C36684) * C50758) *
                C50773 * C2304) *
               C51041 +
           (((C36986 + C36985) * C1391 + (C36984 + C36983) * C1386 -
             (C35113 + C35114) * C1392 - (C35115 + C35116) * C50758) *
                C50773 * C2302 +
            ((C36982 + C36981) * C1391 + (C36980 + C36979) * C1386 -
             (C37914 + C37913) * C1392 - (C37916 + C37915) * C50758) *
                C50773 * C2303 +
            ((C36987 + C36988) * C1391 + (C36989 + C36990) * C1386 -
             (C33361 * C3517 + C50975 * C3520 + C33360 * C3145 +
              C33358 * C3150) *
                 C1392 -
             (C33361 * C3519 + C50975 * C3523 + C33360 * C3151 +
              C33358 * C3157) *
                 C50758) *
                C50773 * C2304) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C1391 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C1386 -
             (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
                C17287 +
            ((C33396 + C33395) * C1391 + (C33398 + C33397) * C1386 -
             (C33400 + C33399) * C1392 - (C33402 + C33401) * C50758) *
                C17288 +
            (C33411 * C1391 + C33412 * C1386 - C33413 * C1392 -
             C33414 * C50758) *
                C17289) *
               C50900 * C51041 +
           (((C33769 + C33770) * C1392 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C1386 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C1391) +
             (C33771 + C33772) * C50758) *
                C17287 +
            ((C33774 + C33773) * C1392 -
             ((C33772 + C33771) * C1386 + (C33770 + C33769) * C1391) +
             (C33776 + C33775) * C50758) *
                C17288 +
            ((C33778 + C33777) * C1392 - (C33782 * C1386 + C33781 * C1391) +
             (C33780 + C33779) * C50758) *
                C17289) *
               C50900 * C50853) *
              C1283 +
          ((((C33585 + C33586) * C1392 -
             ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                  C1386 +
              (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                  C1391) +
             (C33587 + C33588) * C50758) *
                C17287 +
            ((C33590 + C33589) * C1392 -
             ((C33588 + C33587) * C1386 + (C33586 + C33585) * C1391) +
             (C33592 + C33591) * C50758) *
                C17288 +
            ((C33594 + C33593) * C1392 - (C33598 * C1386 + C33597 * C1391) +
             (C33596 + C33595) * C50758) *
                C17289) *
               C50900 * C51041 +
           (((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C1391 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C1386 -
             (C35113 + C35114) * C1392 - (C35115 + C35116) * C50758) *
                C17287 +
            ((C35114 + C35113) * C1391 + (C35116 + C35115) * C1386 -
             (C35117 + C35118) * C1392 - (C35119 + C35120) * C50758) *
                C17288 +
            ((C35118 + C35117) * C1391 + (C35120 + C35119) * C1386 -
             (C33361 * C1080 + C50975 * C1085 + C33360 * C814 + C33358 * C825) *
                 C1392 -
             (C33361 * C1084 + C50975 * C1092 + C33360 * C826 + C33358 * C838) *
                 C50758) *
                C17289) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
             C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
                C1391 +
            (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
             C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
                C1386 -
            (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
             C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
                C1392 -
            (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
             C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
                C50758) *
               C50773 * C50900 * C51041 +
           ((C38958 * C434 + C38954 * C440 + C38959 * C945 + C38955 * C951 +
             C38960 * C1168 + C38956 * C1175 + C38961 * C6287 +
             C38957 * C6291) *
                C1392 -
            ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 +
              C38956 * C1181 + C38959 * C950 + C38955 * C959 + C38958 * C441 +
              C38954 * C452) *
                 C1386 +
             (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 +
              C38956 * C1177 + C38959 * C944 + C38955 * C949 + C38958 * C435 +
              C38954 * C442) *
                 C1391) +
            (C38958 * C443 + C38954 * C453 + C38959 * C952 + C38955 * C960 +
             C38960 * C1174 + C38956 * C1180 + C38961 * C6292 +
             C38957 * C6296) *
                C50758) *
               C50773 * C50900 * C50853) *
              C1283 +
          (((C38958 * C286 + C38954 * C292 + C38959 * C812 + C38955 * C821 +
             C38960 * C1082 + C38956 * C1089 + C38961 * C3645 +
             C38957 * C3652) *
                C1392 -
            ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 +
              C38956 * C1095 + C38959 * C820 + C38955 * C835 + C38958 * C293 +
              C38954 * C304) *
                 C1386 +
             (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 +
              C38956 * C1091 + C38959 * C811 + C38955 * C819 + C38958 * C287 +
              C38954 * C294) *
                 C1391) +
            (C38958 * C295 + C38954 * C305 + C38959 * C822 + C38955 * C836 +
             C38960 * C1088 + C38956 * C1094 + C38961 * C3651 +
             C38957 * C3657) *
                C50758) *
               C50773 * C50900 * C51041 +
           ((C38958 * C811 + C38954 * C819 + C38959 * C1083 + C38955 * C1091 +
             C38960 * C3646 + C38956 * C3654 + C38961 * C6463 +
             C38957 * C6467) *
                C1391 +
            (C38958 * C820 + C38954 * C835 + C38959 * C1090 + C38955 * C1095 +
             C38960 * C3653 + C38956 * C3658 + C38961 * C6466 +
             C38957 * C6469) *
                C1386 -
            (C38961 * C6462 + C38957 * C6465 + C38960 * C3645 + C38956 * C3652 +
             C38959 * C1082 + C38955 * C1089 + C38958 * C812 + C38954 * C821) *
                C1392 -
            (C38961 * C6464 + C38957 * C6468 + C38960 * C3651 + C38956 * C3657 +
             C38959 * C1088 + C38955 * C1094 + C38958 * C822 + C38954 * C836) *
                C50758) *
               C50773 * C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C51025 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
                C50773 * C2302 +
            ((C36353 + C36354) * C49770 + (C36355 + C36356) * C51025 -
             (C33586 + C33585) * C49763 - (C33588 + C33587) * C50758) *
                C50773 * C2303 +
            C36688 * C2304) *
               C1643 +
           (((C33769 + C33770) * C49763 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C51025 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C49770) +
             (C33771 + C33772) * C50758) *
                C50773 * C2302 +
            ((C35114 + C35113) * C49763 -
             ((C36983 + C36984) * C51025 + (C36985 + C36986) * C49770) +
             (C35116 + C35115) * C50758) *
                C50773 * C2303 +
            ((C37913 + C37914) * C49763 - (C36991 * C51025 + C36992 * C49770) +
             (C37915 + C37916) * C50758) *
                C50773 * C2304) *
               C50853) *
              C1283 +
          ((((C33585 + C33586) * C49763 -
             ((C36356 + C36355) * C51025 + (C36354 + C36353) * C49770) +
             (C33587 + C33588) * C50758) *
                C50773 * C2302 +
            ((C33946 + C33945) * C49763 -
             ((C36360 + C36359) * C51025 + (C36358 + C36357) * C49770) +
             (C33948 + C33947) * C50758) *
                C50773 * C2303 +
            ((C36677 + C36678) * C49763 - (C36789 * C51025 + C36790 * C49770) +
             (C36683 + C36684) * C50758) *
                C50773 * C2304) *
               C1643 +
           (((C36986 + C36985) * C49770 + (C36984 + C36983) * C51025 -
             (C35113 + C35114) * C49763 - (C35115 + C35116) * C50758) *
                C50773 * C2302 +
            ((C36982 + C36981) * C49770 + (C36980 + C36979) * C51025 -
             (C37914 + C37913) * C49763 - (C37916 + C37915) * C50758) *
                C50773 * C2303 +
            ((C36987 + C36988) * C49770 + (C36989 + C36990) * C51025 -
             (C33361 * C3517 + C50975 * C3520 + C33360 * C3145 +
              C33358 * C3150) *
                 C49763 -
             (C33361 * C3519 + C50975 * C3523 + C33360 * C3151 +
              C33358 * C3157) *
                 C50758) *
                C50773 * C2304) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C51025 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
                C17287 +
            ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51025 -
             (C33400 + C33399) * C49763 - (C33402 + C33401) * C50758) *
                C17288 +
            (C33411 * C49770 + C33412 * C51025 - C33413 * C49763 -
             C33414 * C50758) *
                C17289) *
               C50900 * C1643 +
           (((C33769 + C33770) * C49763 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C51025 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C49770) +
             (C33771 + C33772) * C50758) *
                C17287 +
            ((C33774 + C33773) * C49763 -
             ((C33772 + C33771) * C51025 + (C33770 + C33769) * C49770) +
             (C33776 + C33775) * C50758) *
                C17288 +
            ((C33778 + C33777) * C49763 - (C33782 * C51025 + C33781 * C49770) +
             (C33780 + C33779) * C50758) *
                C17289) *
               C50900 * C50853) *
              C1283 +
          ((((C33585 + C33586) * C49763 -
             ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                  C51025 +
              (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                  C49770) +
             (C33587 + C33588) * C50758) *
                C17287 +
            ((C33590 + C33589) * C49763 -
             ((C33588 + C33587) * C51025 + (C33586 + C33585) * C49770) +
             (C33592 + C33591) * C50758) *
                C17288 +
            ((C33594 + C33593) * C49763 - (C33598 * C51025 + C33597 * C49770) +
             (C33596 + C33595) * C50758) *
                C17289) *
               C50900 * C1643 +
           (((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C49770 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C51025 -
             (C35113 + C35114) * C49763 - (C35115 + C35116) * C50758) *
                C17287 +
            ((C35114 + C35113) * C49770 + (C35116 + C35115) * C51025 -
             (C35117 + C35118) * C49763 - (C35119 + C35120) * C50758) *
                C17288 +
            ((C35118 + C35117) * C49770 + (C35120 + C35119) * C51025 -
             (C33361 * C1080 + C50975 * C1085 + C33360 * C814 + C33358 * C825) *
                 C49763 -
             (C33361 * C1084 + C50975 * C1092 + C33360 * C826 + C33358 * C838) *
                 C50758) *
                C17289) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
             C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
                C49770 +
            (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
             C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
                C51025 -
            (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
             C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
                C49763 -
            (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
             C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
                C50758) *
               C50773 * C50900 * C1643 +
           ((C38958 * C434 + C38954 * C440 + C38959 * C945 + C38955 * C951 +
             C38960 * C1168 + C38956 * C1175 + C38961 * C6287 +
             C38957 * C6291) *
                C49763 -
            ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 +
              C38956 * C1181 + C38959 * C950 + C38955 * C959 + C38958 * C441 +
              C38954 * C452) *
                 C51025 +
             (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 +
              C38956 * C1177 + C38959 * C944 + C38955 * C949 + C38958 * C435 +
              C38954 * C442) *
                 C49770) +
            (C38958 * C443 + C38954 * C453 + C38959 * C952 + C38955 * C960 +
             C38960 * C1174 + C38956 * C1180 + C38961 * C6292 +
             C38957 * C6296) *
                C50758) *
               C50773 * C50900 * C50853) *
              C1283 +
          (((C38958 * C286 + C38954 * C292 + C38959 * C812 + C38955 * C821 +
             C38960 * C1082 + C38956 * C1089 + C38961 * C3645 +
             C38957 * C3652) *
                C49763 -
            ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 +
              C38956 * C1095 + C38959 * C820 + C38955 * C835 + C38958 * C293 +
              C38954 * C304) *
                 C51025 +
             (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 +
              C38956 * C1091 + C38959 * C811 + C38955 * C819 + C38958 * C287 +
              C38954 * C294) *
                 C49770) +
            (C38958 * C295 + C38954 * C305 + C38959 * C822 + C38955 * C836 +
             C38960 * C1088 + C38956 * C1094 + C38961 * C3651 +
             C38957 * C3657) *
                C50758) *
               C50773 * C50900 * C1643 +
           ((C38958 * C811 + C38954 * C819 + C38959 * C1083 + C38955 * C1091 +
             C38960 * C3646 + C38956 * C3654 + C38961 * C6463 +
             C38957 * C6467) *
                C49770 +
            (C38958 * C820 + C38954 * C835 + C38959 * C1090 + C38955 * C1095 +
             C38960 * C3653 + C38956 * C3658 + C38961 * C6466 +
             C38957 * C6469) *
                C51025 -
            (C38961 * C6462 + C38957 * C6465 + C38960 * C3645 + C38956 * C3652 +
             C38959 * C1082 + C38955 * C1089 + C38958 * C812 + C38954 * C821) *
                C49763 -
            (C38961 * C6464 + C38957 * C6468 + C38960 * C3651 + C38956 * C3657 +
             C38959 * C1088 + C38955 * C1094 + C38958 * C822 + C38954 * C836) *
                C50758) *
               C50773 * C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C2302 +
            ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
                C2303 +
            C36806 * C2304) *
               C1643 -
           (C36996 * C2304 +
            ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C50773 *
                C2303 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C50773 * C2302) *
               C50853) *
              C51086 +
          ((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C50773 *
                C2302 +
            ((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C50773 *
                C2303 +
            ((C36987 + C36988) * C696 + (C36989 + C36990) * C50753) * C50773 *
                C2304) *
               C50853 -
           (C36808 * C2304 +
            ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
                C2303 +
            ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
                C2302) *
               C1643) *
              C51073 +
          ((C36806 * C2302 +
            ((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C50773 *
                C2303 +
            ((C36802 + C36803) * C696 + (C36804 + C36805) * C50753) * C50773 *
                C2304) *
               C1643 -
           (((C33361 * C20596 + C50975 * C20598 + C33360 * C3154 +
              C33358 * C3159) *
                 C50753 +
             (C33361 * C20595 + C50975 * C20597 + C33360 * C3147 +
              C33358 * C3155) *
                 C696) *
                C50773 * C2304 +
            ((C36990 + C36989) * C50753 + (C36988 + C36987) * C696) * C50773 *
                C2303 +
            C36996 * C2302) *
               C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C17287 +
            ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
            (C33411 * C696 + C33412 * C50753) * C17289) *
               C50900 * C1643 -
           ((C33782 * C50753 + C33781 * C696) * C17289 +
            ((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C17288 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C17287) *
               C50900 * C50853) *
              C51086 +
          ((((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C696 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C50753) *
                C17287 +
            ((C35114 + C35113) * C696 + (C35116 + C35115) * C50753) * C17288 +
            ((C35118 + C35117) * C696 + (C35120 + C35119) * C50753) * C17289) *
               C50900 * C50853 -
           ((C33598 * C50753 + C33597 * C696) * C17289 +
            ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) * C17288 +
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C50753 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C696) *
                C17287) *
               C50900 * C1643) *
              C51073 +
          ((((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                 C696 +
             (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                 C50753) *
                C17287 +
            ((C33946 + C33945) * C696 + (C33948 + C33947) * C50753) * C17288 +
            ((C33950 + C33949) * C696 + (C33952 + C33951) * C50753) * C17289) *
               C50900 * C1643 -
           (((C33361 * C3355 + C50975 * C3358 + C33360 * C829 + C33358 * C840) *
                 C50753 +
             (C33361 * C3349 + C50975 * C3354 + C33360 * C816 + C33358 * C830) *
                 C696) *
                C17289 +
            ((C33361 * C3353 + C50975 * C3357 + C33360 * C831 + C33358 * C841) *
                 C50753 +
             (C33361 * C3348 + C50975 * C3352 + C33360 * C817 + C33358 * C832) *
                 C696) *
                C17288 +
            ((C33361 * C3351 + C50975 * C3356 + C33360 * C833 + C33358 * C842) *
                 C50753 +
             (C33361 * C3347 + C50975 * C3350 + C33360 * C818 + C33358 * C834) *
                 C696) *
                C17287) *
               C50900 * C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
             C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
                C696 +
            (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
             C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
                C50753) *
               C50773 * C50900 * C1643 -
           ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 + C38956 * C1181 +
             C38959 * C950 + C38955 * C959 + C38958 * C441 + C38954 * C452) *
                C50753 +
            (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 + C38956 * C1177 +
             C38959 * C944 + C38955 * C949 + C38958 * C435 + C38954 * C442) *
                C696) *
               C50773 * C50900 * C50853) *
              C51086 +
          (((C38958 * C811 + C38954 * C819 + C38959 * C1083 + C38955 * C1091 +
             C38960 * C3646 + C38956 * C3654 + C38961 * C6463 +
             C38957 * C6467) *
                C696 +
            (C38958 * C820 + C38954 * C835 + C38959 * C1090 + C38955 * C1095 +
             C38960 * C3653 + C38956 * C3658 + C38961 * C6466 +
             C38957 * C6469) *
                C50753) *
               C50773 * C50900 * C50853 -
           ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
             C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
                C50753 +
            (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
             C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
                C696) *
               C50773 * C50900 * C1643) *
              C51073 +
          (((C38958 * C587 + C38954 * C592 + C38959 * C818 + C38955 * C834 +
             C38960 * C3347 + C38956 * C3350 + C38961 * C3644 +
             C38957 * C3650) *
                C696 +
            (C38958 * C593 + C38954 * C602 + C38959 * C833 + C38955 * C842 +
             C38960 * C3351 + C38956 * C3356 + C38961 * C3649 +
             C38957 * C3656) *
                C50753) *
               C50773 * C50900 * C1643 -
           ((C38961 * C22841 + C38957 * C22843 + C38960 * C3649 +
             C38956 * C3656 + C38959 * C3351 + C38955 * C3356 + C38958 * C833 +
             C38954 * C842) *
                C50753 +
            (C38961 * C22840 + C38957 * C22842 + C38960 * C3644 +
             C38956 * C3650 + C38959 * C3347 + C38955 * C3350 + C38958 * C818 +
             C38954 * C834) *
                C696) *
               C50773 * C50900 * C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C2302 +
            ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
                C2303 +
            C36806 * C2304) *
               C51087 -
           (C36996 * C2304 +
            ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C50773 *
                C2303 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C50773 * C2302) *
               C51076 +
           (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                 C696 +
             (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                 C50753) *
                C50773 * C2302 +
            ((C37305 + C37306) * C696 + (C37307 + C37308) * C50753) * C50773 *
                C2303 +
            ((C37309 + C37310) * C696 + (C37311 + C37312) * C50753) * C50773 *
                C2304) *
               C1875) *
              C1283 +
          ((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C50773 *
                C2302 +
            ((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C50773 *
                C2303 +
            ((C36987 + C36988) * C696 + (C36989 + C36990) * C50753) * C50773 *
                C2304) *
               C51076 -
           (C36808 * C2304 +
            ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
                C2303 +
            ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
                C2302) *
               C51087 -
           (((C33361 * C20674 + C50975 * C20676 + C33360 * C3521 +
              C33358 * C3524) *
                 C50753 +
             (C33361 * C20673 + C50975 * C20675 + C33360 * C3518 +
              C33358 * C3522) *
                 C696) *
                C50773 * C2304 +
            ((C37312 + C37311) * C50753 + (C37310 + C37309) * C696) * C50773 *
                C2303 +
            ((C37308 + C37307) * C50753 + (C37306 + C37305) * C696) * C50773 *
                C2302) *
               C1875) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C17287 +
            ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
            (C33411 * C696 + C33412 * C50753) * C17289) *
               C50900 * C51087 -
           ((C33782 * C50753 + C33781 * C696) * C17289 +
            ((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C17288 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C17287) *
               C50900 * C51076 +
           (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                 C696 +
             (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                 C50753) *
                C17287 +
            ((C34360 + C34359) * C696 + (C34362 + C34361) * C50753) * C17288 +
            ((C34364 + C34363) * C696 + (C34366 + C34365) * C50753) * C17289) *
               C50900 * C1875) *
              C1283 +
          ((((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C696 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C50753) *
                C17287 +
            ((C35114 + C35113) * C696 + (C35116 + C35115) * C50753) * C17288 +
            ((C35118 + C35117) * C696 + (C35120 + C35119) * C50753) * C17289) *
               C50900 * C51076 -
           ((C33598 * C50753 + C33597 * C696) * C17289 +
            ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) * C17288 +
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C50753 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C696) *
                C17287) *
               C50900 * C51087 -
           (((C33361 * C7064 + C50975 * C7065 + C33360 * C1086 +
              C33358 * C1093) *
                 C50753 +
             (C33361 * C7062 + C50975 * C7063 + C33360 * C1081 +
              C33358 * C1087) *
                 C696) *
                C17289 +
            ((C33361 * C3651 + C50975 * C3657 + C33360 * C1088 +
              C33358 * C1094) *
                 C50753 +
             (C33361 * C3645 + C50975 * C3652 + C33360 * C1082 +
              C33358 * C1089) *
                 C696) *
                C17288 +
            ((C33361 * C3653 + C50975 * C3658 + C33360 * C1090 +
              C33358 * C1095) *
                 C50753 +
             (C33361 * C3646 + C50975 * C3654 + C33360 * C1083 +
              C33358 * C1091) *
                 C696) *
                C17287) *
               C50900 * C1875) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
             C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
                C696 +
            (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
             C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
                C50753) *
               C50773 * C50900 * C51087 -
           ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 + C38956 * C1181 +
             C38959 * C950 + C38955 * C959 + C38958 * C441 + C38954 * C452) *
                C50753 +
            (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 + C38956 * C1177 +
             C38959 * C944 + C38955 * C949 + C38958 * C435 + C38954 * C442) *
                C696) *
               C50773 * C50900 * C51076 +
           ((C38958 * C944 + C38954 * C949 + C38959 * C1169 + C38955 * C1177 +
             C38960 * C6286 + C38956 * C6289 + C38961 * C6569 +
             C38957 * C6573) *
                C696 +
            (C38958 * C950 + C38954 * C959 + C38959 * C1176 + C38955 * C1181 +
             C38960 * C6290 + C38956 * C6295 + C38961 * C6572 +
             C38957 * C6575) *
                C50753) *
               C50773 * C50900 * C1875) *
              C1283 +
          (((C38958 * C811 + C38954 * C819 + C38959 * C1083 + C38955 * C1091 +
             C38960 * C3646 + C38956 * C3654 + C38961 * C6463 +
             C38957 * C6467) *
                C696 +
            (C38958 * C820 + C38954 * C835 + C38959 * C1090 + C38955 * C1095 +
             C38960 * C3653 + C38956 * C3658 + C38961 * C6466 +
             C38957 * C6469) *
                C50753) *
               C50773 * C50900 * C51076 -
           ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
             C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
                C50753 +
            (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
             C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
                C696) *
               C50773 * C50900 * C51087 -
           ((C38961 * C22961 + C38957 * C22963 + C38960 * C6466 +
             C38956 * C6469 + C38959 * C3653 + C38955 * C3658 + C38958 * C1090 +
             C38954 * C1095) *
                C50753 +
            (C38961 * C22960 + C38957 * C22962 + C38960 * C6463 +
             C38956 * C6467 + C38959 * C3646 + C38955 * C3654 + C38958 * C1083 +
             C38954 * C1091) *
                C696) *
               C50773 * C50900 * C1875) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                   C118 +
               (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                   C106 -
               (C33395 + C33396) * C119 - (C33397 + C33398) * C107 +
               C33411 * C120 + C33412 * C108 - C33413 * C121 - C33414 * C109) *
                  C17287 +
              ((C33396 + C33395) * C118 + (C33398 + C33397) * C106 -
               (C33400 + C33399) * C119 - (C33402 + C33401) * C107 +
               (C33404 + C33403) * C120 + (C33406 + C33405) * C108 -
               (C33407 + C33408) * C121 - (C33409 + C33410) * C109) *
                  C17288 +
              (C33411 * C118 + C33412 * C106 - C33413 * C119 - C33414 * C107 +
               (C33408 + C33407) * C120 + (C33410 + C33409) * C108 -
               (C33361 * C439 + C50975 * C450 + C33360 * C127 + C33358 * C139) *
                   C121 -
               (C33361 * C451 + C50975 * C457 + C33360 * C140 + C33358 * C148) *
                   C109) *
                  C17289) *
             C50900 * C50841 * C50815 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C33360 * C122 + C33358 * C129 + C33361 * C435 +
                 C50975 * C442) *
                    C49770 +
                (C33360 * C130 + C33358 * C143 + C33361 * C441 +
                 C50975 * C452) *
                    C51025 -
                (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
                   C17287 +
               ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51025 -
                (C33400 + C33399) * C49763 - (C33402 + C33401) * C50758) *
                   C17288 +
               (C33411 * C49770 + C33412 * C51025 - C33413 * C49763 -
                C33414 * C50758) *
                   C17289) *
                  C50900 * C50841 * C582 +
              (((C33585 + C33586) * C49763 -
                ((C33361 * C820 + C50975 * C835 + C33360 * C293 +
                  C33358 * C304) *
                     C51025 +
                 (C33361 * C811 + C50975 * C819 + C33360 * C287 +
                  C33358 * C294) *
                     C49770) +
                (C33587 + C33588) * C50758) *
                   C17287 +
               ((C33590 + C33589) * C49763 -
                ((C33588 + C33587) * C51025 + (C33586 + C33585) * C49770) +
                (C33592 + C33591) * C50758) *
                   C17288 +
               ((C33594 + C33593) * C49763 -
                (C33598 * C51025 + C33597 * C49770) +
                (C33596 + C33595) * C50758) *
                   C17289) *
                  C50900 * C50841 * C583 +
              (((C33360 * C587 + C33358 * C592 + C33361 * C818 +
                 C50975 * C834) *
                    C49770 +
                (C33360 * C593 + C33358 * C602 + C33361 * C833 +
                 C50975 * C842) *
                    C51025 -
                (C33945 + C33946) * C49763 - (C33947 + C33948) * C50758) *
                   C17287 +
               ((C33946 + C33945) * C49770 + (C33948 + C33947) * C51025 -
                (C33949 + C33950) * C49763 - (C33951 + C33952) * C50758) *
                   C17288 +
               ((C33950 + C33949) * C49770 + (C33952 + C33951) * C51025 -
                (C33361 * C815 + C50975 * C828 + C33360 * C590 +
                 C33358 * C598) *
                    C49763 -
                (C33361 * C827 + C50975 * C839 + C33360 * C599 +
                 C33358 * C605) *
                    C50758) *
                   C17289) *
                  C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51025 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
               C17287 +
           ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51025 -
            (C33400 + C33399) * C49763 - (C33402 + C33401) * C50758) *
               C17288 +
           (C33411 * C49770 + C33412 * C51025 - C33413 * C49763 -
            C33414 * C50758) *
               C17289) *
              C50900 * C941 +
          (((C33769 + C33770) * C49763 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C51025 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C49770) +
            (C33771 + C33772) * C50758) *
               C17287 +
           ((C33774 + C33773) * C49763 -
            ((C33772 + C33771) * C51025 + (C33770 + C33769) * C49770) +
            (C33776 + C33775) * C50758) *
               C17288 +
           ((C33778 + C33777) * C49763 - (C33782 * C51025 + C33781 * C49770) +
            (C33780 + C33779) * C50758) *
               C17289) *
              C50900 * C942 +
          (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                C49770 +
            (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                C51025 -
            (C34359 + C34360) * C49763 - (C34361 + C34362) * C50758) *
               C17287 +
           ((C34360 + C34359) * C49770 + (C34362 + C34361) * C51025 -
            (C34363 + C34364) * C49763 - (C34365 + C34366) * C50758) *
               C17288 +
           ((C34364 + C34363) * C49770 + (C34366 + C34365) * C51025 -
            (C33361 * C1166 + C50975 * C1171 + C33360 * C947 + C33358 * C955) *
                C49763 -
            (C33361 * C1170 + C50975 * C1178 + C33360 * C956 + C33358 * C962) *
                C50758) *
               C17289) *
              C50900 * C943) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C50773 * C2302 +
          ((C33360 * C287 + C33358 * C294 + C33361 * C811 + C50975 * C819) *
               C118 +
           (C33360 * C293 + C33358 * C304 + C33361 * C820 + C50975 * C835) *
               C106 -
           (C33586 + C33585) * C119 - (C33588 + C33587) * C107 +
           (C33590 + C33589) * C120 + (C33592 + C33591) * C108 -
           (C33593 + C33594) * C121 - (C33595 + C33596) * C109) *
              C50773 * C2303 +
          ((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
               C118 +
           (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
               C106 -
           (C33945 + C33946) * C119 - (C33947 + C33948) * C107 +
           (C33950 + C33949) * C120 + (C33952 + C33951) * C108 -
           (C33361 * C815 + C50975 * C828 + C33360 * C590 + C33358 * C598) *
               C121 -
           (C33361 * C827 + C50975 * C839 + C33360 * C599 + C33358 * C605) *
               C109) *
              C50773 * C2304) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51025 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
               C50773 * C2302 +
           ((C36353 + C36354) * C49770 + (C36355 + C36356) * C51025 -
            (C33586 + C33585) * C49763 - (C33588 + C33587) * C50758) *
               C50773 * C2303 +
           C36688 * C2304) *
              C50841 * C582 +
          (((C33585 + C33586) * C49763 -
            ((C36356 + C36355) * C51025 + (C36354 + C36353) * C49770) +
            (C33587 + C33588) * C50758) *
               C50773 * C2302 +
           ((C33946 + C33945) * C49763 -
            ((C36360 + C36359) * C51025 + (C36358 + C36357) * C49770) +
            (C33948 + C33947) * C50758) *
               C50773 * C2303 +
           ((C36677 + C36678) * C49763 -
            ((C36679 + C36680) * C51025 + (C36681 + C36682) * C49770) +
            (C36683 + C36684) * C50758) *
               C50773 * C2304) *
              C50841 * C583 +
          (C36688 * C2302 +
           ((C36682 + C36681) * C49770 + (C36680 + C36679) * C51025 -
            (C36678 + C36677) * C49763 - (C36684 + C36683) * C50758) *
               C50773 * C2303 +
           ((C33360 * C2803 + C33358 * C2806 + C33361 * C3147 +
             C50975 * C3155) *
                C49770 +
            (C33360 * C2807 + C33358 * C2812 + C33361 * C3154 +
             C50975 * C3159) *
                C51025 -
            (C33361 * C3146 + C50975 * C3153 + C33360 * C2804 +
             C33358 * C2808) *
                C49763 -
            (C33361 * C3152 + C50975 * C3158 + C33360 * C2809 +
             C33358 * C2813) *
                C50758) *
               C50773 * C2304) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51025 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
               C50773 * C2302 +
           ((C36353 + C36354) * C49770 + (C36355 + C36356) * C51025 -
            (C33586 + C33585) * C49763 - (C33588 + C33587) * C50758) *
               C50773 * C2303 +
           C36688 * C2304) *
              C941 +
          (((C33769 + C33770) * C49763 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C51025 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C49770) +
            (C33771 + C33772) * C50758) *
               C50773 * C2302 +
           ((C35114 + C35113) * C49763 -
            ((C36983 + C36984) * C51025 + (C36985 + C36986) * C49770) +
            (C35116 + C35115) * C50758) *
               C50773 * C2303 +
           ((C33360 * C817 + C33358 * C832 + C33361 * C3348 + C50975 * C3352) *
                C49763 -
            (C36991 * C51025 + C36992 * C49770) +
            (C33360 * C831 + C33358 * C841 + C33361 * C3353 + C50975 * C3357) *
                C50758) *
               C50773 * C2304) *
              C942 +
          (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                C49770 +
            (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                C51025 -
            (C34359 + C34360) * C49763 - (C34361 + C34362) * C50758) *
               C50773 * C2302 +
           ((C33360 * C1083 + C33358 * C1091 + C33361 * C3646 +
             C50975 * C3654) *
                C49770 +
            (C33360 * C1090 + C33358 * C1095 + C33361 * C3653 +
             C50975 * C3658) *
                C51025 -
            (C33361 * C3645 + C50975 * C3652 + C33360 * C1082 +
             C33358 * C1089) *
                C49763 -
            (C33361 * C3651 + C50975 * C3657 + C33360 * C1088 +
             C33358 * C1094) *
                C50758) *
               C50773 * C2303 +
           ((C33360 * C3347 + C33358 * C3350 + C33361 * C3644 +
             C50975 * C3650) *
                C49770 +
            (C33360 * C3351 + C33358 * C3356 + C33361 * C3649 +
             C50975 * C3656) *
                C51025 -
            (C33361 * C3643 + C50975 * C3648 + C33360 * C3348 +
             C33358 * C3352) *
                C49763 -
            (C33361 * C3647 + C50975 * C3655 + C33360 * C3353 +
             C33358 * C3357) *
                C50758) *
               C50773 * C2304) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
           C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
              C118 +
          (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
           C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
              C106 -
          (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
           C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
              C119 -
          (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
           C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
              C107 +
          (C38958 * C124 + C38954 * C133 + C38959 * C436 + C38955 * C444 +
           C38960 * C946 + C38956 * C953 + C38961 * C1167 + C38957 * C1173) *
              C120 +
          (C38958 * C134 + C38954 * C145 + C38959 * C445 + C38955 * C454 +
           C38960 * C954 + C38956 * C961 + C38961 * C1172 + C38957 * C1179) *
              C108 -
          (C38961 * C1166 + C38957 * C1171 + C38960 * C947 + C38956 * C955 +
           C38959 * C437 + C38955 * C446 + C38958 * C125 + C38954 * C135) *
              C121 -
          (C38961 * C1170 + C38957 * C1178 + C38960 * C956 + C38956 * C962 +
           C38959 * C447 + C38955 * C455 + C38958 * C136 + C38954 * C146) *
              C109) *
         C50773 * C50900 * C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C49770 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C51025 -
           (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
            C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
               C49763 -
           (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
            C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
               C50758) *
              C50773 * C50900 * C50841 * C582 +
          ((C38958 * C286 + C38954 * C292 + C38959 * C812 + C38955 * C821 +
            C38960 * C1082 + C38956 * C1089 + C38961 * C3645 + C38957 * C3652) *
               C49763 -
           ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
             C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
                C51025 +
            (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
             C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
                C49770) +
           (C38958 * C295 + C38954 * C305 + C38959 * C822 + C38955 * C836 +
            C38960 * C1088 + C38956 * C1094 + C38961 * C3651 + C38957 * C3657) *
               C50758) *
              C50773 * C50900 * C50841 * C583 +
          ((C38958 * C587 + C38954 * C592 + C38959 * C818 + C38955 * C834 +
            C38960 * C3347 + C38956 * C3350 + C38961 * C3644 + C38957 * C3650) *
               C49770 +
           (C38958 * C593 + C38954 * C602 + C38959 * C833 + C38955 * C842 +
            C38960 * C3351 + C38956 * C3356 + C38961 * C3649 + C38957 * C3656) *
               C51025 -
           (C38961 * C3643 + C38957 * C3648 + C38960 * C3348 + C38956 * C3352 +
            C38959 * C817 + C38955 * C832 + C38958 * C588 + C38954 * C594) *
               C49763 -
           (C38961 * C3647 + C38957 * C3655 + C38960 * C3353 + C38956 * C3357 +
            C38959 * C831 + C38955 * C841 + C38958 * C595 + C38954 * C603) *
               C50758) *
              C50773 * C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C49770 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C51025 -
           (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
            C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
               C49763 -
           (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
            C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
               C50758) *
              C50773 * C50900 * C941 +
          ((C38958 * C434 + C38954 * C440 + C38959 * C945 + C38955 * C951 +
            C38960 * C1168 + C38956 * C1175 + C38961 * C6287 + C38957 * C6291) *
               C49763 -
           ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 + C38956 * C1181 +
             C38959 * C950 + C38955 * C959 + C38958 * C441 + C38954 * C452) *
                C51025 +
            (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 + C38956 * C1177 +
             C38959 * C944 + C38955 * C949 + C38958 * C435 + C38954 * C442) *
                C49770) +
           (C38958 * C443 + C38954 * C453 + C38959 * C952 + C38955 * C960 +
            C38960 * C1174 + C38956 * C1180 + C38961 * C6292 + C38957 * C6296) *
               C50758) *
              C50773 * C50900 * C942 +
          ((C38958 * C944 + C38954 * C949 + C38959 * C1169 + C38955 * C1177 +
            C38960 * C6286 + C38956 * C6289 + C38961 * C6569 + C38957 * C6573) *
               C49770 +
           (C38958 * C950 + C38954 * C959 + C38959 * C1176 + C38955 * C1181 +
            C38960 * C6290 + C38956 * C6295 + C38961 * C6572 + C38957 * C6575) *
               C51025 -
           (C38961 * C6568 + C38957 * C6571 + C38960 * C6287 + C38956 * C6291 +
            C38959 * C1168 + C38955 * C1175 + C38958 * C945 + C38954 * C951) *
               C49763 -
           (C38961 * C6570 + C38957 * C6574 + C38960 * C6292 + C38956 * C6296 +
            C38959 * C1174 + C38955 * C1180 + C38958 * C952 + C38954 * C960) *
               C50758) *
              C50773 * C50900 * C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C33360 * C122 + C33358 * C129 + C33361 * C435 +
                 C50975 * C442) *
                    C283 +
                (C33360 * C130 + C33358 * C143 + C33361 * C441 +
                 C50975 * C452) *
                    C278 -
                (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
                C33411 * C285 + C33412 * C280) *
                   C17287 +
               ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
                (C33400 + C33399) * C284 - (C33402 + C33401) * C279 +
                (C33404 + C33403) * C285 + (C33406 + C33405) * C280) *
                   C17288 +
               (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C279 +
                (C33408 + C33407) * C285 + (C33410 + C33409) * C280) *
                   C17289) *
                  C50900 * C50841 * C51040 +
              (((C33585 + C33586) * C284 -
                ((C33361 * C820 + C50975 * C835 + C33360 * C293 +
                  C33358 * C304) *
                     C278 +
                 (C33361 * C811 + C50975 * C819 + C33360 * C287 +
                  C33358 * C294) *
                     C283) +
                (C33587 + C33588) * C279 - C33597 * C285 - C33598 * C280) *
                   C17287 +
               ((C33590 + C33589) * C284 -
                ((C33588 + C33587) * C278 + (C33586 + C33585) * C283) +
                (C33592 + C33591) * C279 - (C33593 + C33594) * C285 -
                (C33595 + C33596) * C280) *
                   C17288 +
               ((C33594 + C33593) * C284 - (C33598 * C278 + C33597 * C283) +
                (C33596 + C33595) * C279 -
                (C33361 * C1523 + C50975 * C1524 + C33360 * C290 +
                 C33358 * C300) *
                    C285 -
                (C33361 * C1525 + C50975 * C1526 + C33360 * C301 +
                 C33358 * C308) *
                    C280) *
                   C17289) *
                  C50900 * C50841 * C50829) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C33360 * C122 + C33358 * C129 + C33361 * C435 +
                 C50975 * C442) *
                    C696 +
                (C33360 * C130 + C33358 * C143 + C33361 * C441 +
                 C50975 * C452) *
                    C50753) *
                   C17287 +
               ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) *
                   C17288 +
               (C33411 * C696 + C33412 * C50753) * C17289) *
                  C50900 * C50841 * C692 -
              ((C33598 * C50753 + C33597 * C696) * C17289 +
               ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) *
                   C17288 +
               ((C33361 * C820 + C50975 * C835 + C33360 * C293 +
                 C33358 * C304) *
                    C50753 +
                (C33361 * C811 + C50975 * C819 + C33360 * C287 +
                 C33358 * C294) *
                    C696) *
                   C17287) *
                  C50900 * C50841 * C693 +
              (((C33360 * C587 + C33358 * C592 + C33361 * C818 +
                 C50975 * C834) *
                    C696 +
                (C33360 * C593 + C33358 * C602 + C33361 * C833 +
                 C50975 * C842) *
                    C50753) *
                   C17287 +
               ((C33946 + C33945) * C696 + (C33948 + C33947) * C50753) *
                   C17288 +
               ((C33950 + C33949) * C696 + (C33952 + C33951) * C50753) *
                   C17289) *
                  C50900 * C50841 * C694 -
              (((C33361 * C4204 + C50975 * C4205 + C33360 * C703 +
                 C33358 * C710) *
                    C50753 +
                (C33361 * C4202 + C50975 * C4203 + C33360 * C698 +
                 C33358 * C704) *
                    C696) *
                   C17289 +
               ((C33361 * C3151 + C50975 * C3157 + C33360 * C705 +
                 C33358 * C711) *
                    C50753 +
                (C33361 * C3145 + C50975 * C3150 + C33360 * C699 +
                 C33358 * C706) *
                    C696) *
                   C17288 +
               ((C33361 * C3149 + C50975 * C3156 + C33360 * C707 +
                 C33358 * C712) *
                    C50753 +
                (C33361 * C3144 + C50975 * C3148 + C33360 * C700 +
                 C33358 * C708) *
                    C696) *
                   C17287) *
                  C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C17287 +
            ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
            (C33411 * C696 + C33412 * C50753) * C17289) *
               C50900 * C941 -
           ((C33782 * C50753 + C33781 * C696) * C17289 +
            ((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C17288 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C17287) *
               C50900 * C942 +
           (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                 C696 +
             (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                 C50753) *
                C17287 +
            ((C34360 + C34359) * C696 + (C34362 + C34361) * C50753) * C17288 +
            ((C34364 + C34363) * C696 + (C34366 + C34365) * C50753) * C17289) *
               C50900 * C943) *
              C51040 +
          ((((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C696 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C50753) *
                C17287 +
            ((C33360 * C812 + C33358 * C821 + C33361 * C1082 + C50975 * C1089) *
                 C696 +
             (C33360 * C822 + C33358 * C836 + C33361 * C1088 + C50975 * C1094) *
                 C50753) *
                C17288 +
            ((C33360 * C813 + C33358 * C823 + C33361 * C1081 + C50975 * C1087) *
                 C696 +
             (C33360 * C824 + C33358 * C837 + C33361 * C1086 + C50975 * C1093) *
                 C50753) *
                C17289) *
               C50900 * C942 -
           ((C33598 * C50753 + C33597 * C696) * C17289 +
            ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) * C17288 +
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C50753 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C696) *
                C17287) *
               C50900 * C941 -
           (((C33361 * C7064 + C50975 * C7065 + C33360 * C1086 +
              C33358 * C1093) *
                 C50753 +
             (C33361 * C7062 + C50975 * C7063 + C33360 * C1081 +
              C33358 * C1087) *
                 C696) *
                C17289 +
            ((C33361 * C3651 + C50975 * C3657 + C33360 * C1088 +
              C33358 * C1094) *
                 C50753 +
             (C33361 * C3645 + C50975 * C3652 + C33360 * C1082 +
              C33358 * C1089) *
                 C696) *
                C17288 +
            ((C33361 * C3653 + C50975 * C3658 + C33360 * C1090 +
              C33358 * C1095) *
                 C50753 +
             (C33361 * C3646 + C50975 * C3654 + C33360 * C1083 +
              C33358 * C1091) *
                 C696) *
                C17287) *
               C50900 * C943) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C50773 * C2302 +
           ((C36353 + C36354) * C283 + (C36355 + C36356) * C278 -
            (C33586 + C33585) * C284 - (C33588 + C33587) * C279 +
            (C33590 + C33589) * C285 + (C33592 + C33591) * C280) *
               C50773 * C2303 +
           ((C36357 + C36358) * C283 + (C36359 + C36360) * C278 -
            (C33945 + C33946) * C284 - (C33947 + C33948) * C279 +
            (C33950 + C33949) * C285 + (C33952 + C33951) * C280) *
               C50773 * C2304) *
              C50841 * C51040 +
          (((C33585 + C33586) * C284 -
            ((C36356 + C36355) * C278 + (C36354 + C36353) * C283) +
            (C33587 + C33588) * C279 - C33597 * C285 - C33598 * C280) *
               C50773 * C2302 +
           ((C33946 + C33945) * C284 -
            ((C36360 + C36359) * C278 + (C36358 + C36357) * C283) +
            (C33948 + C33947) * C279 - (C33949 + C33950) * C285 -
            (C33951 + C33952) * C280) *
               C50773 * C2303 +
           ((C33360 * C699 + C33358 * C706 + C33361 * C3145 + C50975 * C3150) *
                C284 -
            ((C33361 * C3149 + C50975 * C3156 + C33360 * C707 + C33358 * C712) *
                 C278 +
             (C33361 * C3144 + C50975 * C3148 + C33360 * C700 + C33358 * C708) *
                 C283) +
            (C33360 * C705 + C33358 * C711 + C33361 * C3151 + C50975 * C3157) *
                C279 -
            (C33361 * C4202 + C50975 * C4203 + C33360 * C698 + C33358 * C704) *
                C285 -
            (C33361 * C4204 + C50975 * C4205 + C33360 * C703 + C33358 * C710) *
                C280) *
               C50773 * C2304) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C696 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C50753) *
               C50773 * C2302 +
           ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
               C2303 +
           C36806 * C2304) *
              C50841 * C692 -
          (C36808 * C2304 +
           ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
               C2303 +
           ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
               C2302) *
              C50841 * C693 +
          (C36806 * C2302 +
           ((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C50773 *
               C2303 +
           ((C36802 + C36803) * C696 + (C36804 + C36805) * C50753) * C50773 *
               C2304) *
              C50841 * C694 -
          (((C33361 * C20385 + C50975 * C20387 + C33360 * C2962 +
             C33358 * C2965) *
                C50753 +
            (C33361 * C20384 + C50975 * C20386 + C33360 * C2959 +
             C33358 * C2963) *
                C696) *
               C50773 * C2304 +
           ((C36805 + C36804) * C50753 + (C36803 + C36802) * C696) * C50773 *
               C2303 +
           C36808 * C2302) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C2302 +
            ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
                C2303 +
            C36806 * C2304) *
               C941 -
           (C36996 * C2304 +
            ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C50773 *
                C2303 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C50773 * C2302) *
               C942 +
           (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                 C696 +
             (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                 C50753) *
                C50773 * C2302 +
            ((C37305 + C37306) * C696 + (C37307 + C37308) * C50753) * C50773 *
                C2303 +
            ((C37309 + C37310) * C696 + (C37311 + C37312) * C50753) * C50773 *
                C2304) *
               C943) *
              C51040 +
          ((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C50773 *
                C2302 +
            ((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C50773 *
                C2303 +
            ((C36987 + C36988) * C696 + (C36989 + C36990) * C50753) * C50773 *
                C2304) *
               C942 -
           (C36808 * C2304 +
            ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
                C2303 +
            ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
                C2302) *
               C941 -
           (((C33361 * C20674 + C50975 * C20676 + C33360 * C3521 +
              C33358 * C3524) *
                 C50753 +
             (C33361 * C20673 + C50975 * C20675 + C33360 * C3518 +
              C33358 * C3522) *
                 C696) *
                C50773 * C2304 +
            ((C37312 + C37311) * C50753 + (C37310 + C37309) * C696) * C50773 *
                C2303 +
            ((C37308 + C37307) * C50753 + (C37306 + C37305) * C696) * C50773 *
                C2302) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C283 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C278 -
           (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
            C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
               C284 -
           (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
            C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
               C279 +
           (C38958 * C124 + C38954 * C133 + C38959 * C436 + C38955 * C444 +
            C38960 * C946 + C38956 * C953 + C38961 * C1167 + C38957 * C1173) *
               C285 +
           (C38958 * C134 + C38954 * C145 + C38959 * C445 + C38955 * C454 +
            C38960 * C954 + C38956 * C961 + C38961 * C1172 + C38957 * C1179) *
               C280) *
              C50773 * C50900 * C50841 * C51040 +
          ((C38958 * C286 + C38954 * C292 + C38959 * C812 + C38955 * C821 +
            C38960 * C1082 + C38956 * C1089 + C38961 * C3645 + C38957 * C3652) *
               C284 -
           ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
             C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
                C278 +
            (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
             C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
                C283) +
           (C38958 * C295 + C38954 * C305 + C38959 * C822 + C38955 * C836 +
            C38960 * C1088 + C38956 * C1094 + C38961 * C3651 + C38957 * C3657) *
               C279 -
           (C38961 * C7062 + C38957 * C7063 + C38960 * C1081 + C38956 * C1087 +
            C38959 * C813 + C38955 * C823 + C38958 * C288 + C38954 * C296) *
               C285 -
           (C38961 * C7064 + C38957 * C7065 + C38960 * C1086 + C38956 * C1093 +
            C38959 * C824 + C38955 * C837 + C38958 * C297 + C38954 * C306) *
               C280) *
              C50773 * C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C696 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C50753) *
              C50773 * C50900 * C50841 * C692 -
          ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
            C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
               C50753 +
           (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
            C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
               C696) *
              C50773 * C50900 * C50841 * C693 +
          ((C38958 * C587 + C38954 * C592 + C38959 * C818 + C38955 * C834 +
            C38960 * C3347 + C38956 * C3350 + C38961 * C3644 + C38957 * C3650) *
               C696 +
           (C38958 * C593 + C38954 * C602 + C38959 * C833 + C38955 * C842 +
            C38960 * C3351 + C38956 * C3356 + C38961 * C3649 + C38957 * C3656) *
               C50753) *
              C50773 * C50900 * C50841 * C694 -
          ((C38961 * C20674 + C38957 * C20676 + C38960 * C3521 +
            C38956 * C3524 + C38959 * C3149 + C38955 * C3156 + C38958 * C707 +
            C38954 * C712) *
               C50753 +
           (C38961 * C20673 + C38957 * C20675 + C38960 * C3518 +
            C38956 * C3522 + C38959 * C3144 + C38955 * C3148 + C38958 * C700 +
            C38954 * C708) *
               C696) *
              C50773 * C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
             C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
                C696 +
            (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
             C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
                C50753) *
               C50773 * C50900 * C941 -
           ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 + C38956 * C1181 +
             C38959 * C950 + C38955 * C959 + C38958 * C441 + C38954 * C452) *
                C50753 +
            (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 + C38956 * C1177 +
             C38959 * C944 + C38955 * C949 + C38958 * C435 + C38954 * C442) *
                C696) *
               C50773 * C50900 * C942 +
           ((C38958 * C944 + C38954 * C949 + C38959 * C1169 + C38955 * C1177 +
             C38960 * C6286 + C38956 * C6289 + C38961 * C6569 +
             C38957 * C6573) *
                C696 +
            (C38958 * C950 + C38954 * C959 + C38959 * C1176 + C38955 * C1181 +
             C38960 * C6290 + C38956 * C6295 + C38961 * C6572 +
             C38957 * C6575) *
                C50753) *
               C50773 * C50900 * C943) *
              C51040 +
          (((C38958 * C811 + C38954 * C819 + C38959 * C1083 + C38955 * C1091 +
             C38960 * C3646 + C38956 * C3654 + C38961 * C6463 +
             C38957 * C6467) *
                C696 +
            (C38958 * C820 + C38954 * C835 + C38959 * C1090 + C38955 * C1095 +
             C38960 * C3653 + C38956 * C3658 + C38961 * C6466 +
             C38957 * C6469) *
                C50753) *
               C50773 * C50900 * C942 -
           ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
             C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
                C50753 +
            (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
             C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
                C696) *
               C50773 * C50900 * C941 -
           ((C38961 * C22961 + C38957 * C22963 + C38960 * C6466 +
             C38956 * C6469 + C38959 * C3653 + C38955 * C3658 + C38958 * C1090 +
             C38954 * C1095) *
                C50753 +
            (C38961 * C22960 + C38957 * C22962 + C38960 * C6463 +
             C38956 * C6467 + C38959 * C3646 + C38955 * C3654 + C38958 * C1083 +
             C38954 * C1091) *
                C696) *
               C50773 * C50900 * C943) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C33360 * C122 + C33358 * C129 + C33361 * C435 +
                 C50975 * C442) *
                    C283 +
                (C33360 * C130 + C33358 * C143 + C33361 * C441 +
                 C50975 * C452) *
                    C278 -
                (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
                C33411 * C285 + C33412 * C280) *
                   C17287 +
               ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
                (C33400 + C33399) * C284 - (C33402 + C33401) * C279 +
                (C33404 + C33403) * C285 + (C33406 + C33405) * C280) *
                   C17288 +
               (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C279 +
                (C33408 + C33407) * C285 + (C33410 + C33409) * C280) *
                   C17289) *
                  C50900 * C51041 +
              (((C33769 + C33770) * C284 -
                ((C33361 * C950 + C50975 * C959 + C33360 * C441 +
                  C33358 * C452) *
                     C278 +
                 (C33361 * C944 + C50975 * C949 + C33360 * C435 +
                  C33358 * C442) *
                     C283) +
                (C33771 + C33772) * C279 - C33781 * C285 - C33782 * C280) *
                   C17287 +
               ((C33774 + C33773) * C284 -
                ((C33772 + C33771) * C278 + (C33770 + C33769) * C283) +
                (C33776 + C33775) * C279 - (C33777 + C33778) * C285 -
                (C33779 + C33780) * C280) *
                   C17288 +
               ((C33778 + C33777) * C284 - (C33782 * C278 + C33781 * C283) +
                (C33780 + C33779) * C279 -
                (C33361 * C948 + C50975 * C957 + C33360 * C438 +
                 C33358 * C448) *
                    C285 -
                (C33361 * C958 + C50975 * C963 + C33360 * C449 +
                 C33358 * C456) *
                    C280) *
                   C17289) *
                  C50900 * C50853) *
             C50815 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C33360 * C122 + C33358 * C129 + C33361 * C435 +
                  C50975 * C442) *
                     C696 +
                 (C33360 * C130 + C33358 * C143 + C33361 * C441 +
                  C50975 * C452) *
                     C50753) *
                    C17287 +
                ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) *
                    C17288 +
                (C33411 * C696 + C33412 * C50753) * C17289) *
                   C50900 * C51041 -
               ((C33782 * C50753 + C33781 * C696) * C17289 +
                ((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) *
                    C17288 +
                ((C33361 * C950 + C50975 * C959 + C33360 * C441 +
                  C33358 * C452) *
                     C50753 +
                 (C33361 * C944 + C50975 * C949 + C33360 * C435 +
                  C33358 * C442) *
                     C696) *
                    C17287) *
                   C50900 * C50853) *
                  C582 +
              ((((C33360 * C811 + C33358 * C819 + C33361 * C1083 +
                  C50975 * C1091) *
                     C696 +
                 (C33360 * C820 + C33358 * C835 + C33361 * C1090 +
                  C50975 * C1095) *
                     C50753) *
                    C17287 +
                ((C33360 * C812 + C33358 * C821 + C33361 * C1082 +
                  C50975 * C1089) *
                     C696 +
                 (C33360 * C822 + C33358 * C836 + C33361 * C1088 +
                  C50975 * C1094) *
                     C50753) *
                    C17288 +
                ((C33360 * C813 + C33358 * C823 + C33361 * C1081 +
                  C50975 * C1087) *
                     C696 +
                 (C33360 * C824 + C33358 * C837 + C33361 * C1086 +
                  C50975 * C1093) *
                     C50753) *
                    C17289) *
                   C50900 * C50853 -
               ((C33598 * C50753 + C33597 * C696) * C17289 +
                ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) *
                    C17288 +
                ((C33361 * C820 + C50975 * C835 + C33360 * C293 +
                  C33358 * C304) *
                     C50753 +
                 (C33361 * C811 + C50975 * C819 + C33360 * C287 +
                  C33358 * C294) *
                     C696) *
                    C17287) *
                   C50900 * C51041) *
                  C583 +
              ((((C33360 * C587 + C33358 * C592 + C33361 * C818 +
                  C50975 * C834) *
                     C696 +
                 (C33360 * C593 + C33358 * C602 + C33361 * C833 +
                  C50975 * C842) *
                     C50753) *
                    C17287 +
                ((C33946 + C33945) * C696 + (C33948 + C33947) * C50753) *
                    C17288 +
                ((C33950 + C33949) * C696 + (C33952 + C33951) * C50753) *
                    C17289) *
                   C50900 * C51041 -
               (((C33361 * C3355 + C50975 * C3358 + C33360 * C829 +
                  C33358 * C840) *
                     C50753 +
                 (C33361 * C3349 + C50975 * C3354 + C33360 * C816 +
                  C33358 * C830) *
                     C696) *
                    C17289 +
                ((C33361 * C3353 + C50975 * C3357 + C33360 * C831 +
                  C33358 * C841) *
                     C50753 +
                 (C33361 * C3348 + C50975 * C3352 + C33360 * C817 +
                  C33358 * C832) *
                     C696) *
                    C17288 +
                ((C33361 * C3351 + C50975 * C3356 + C33360 * C833 +
                  C33358 * C842) *
                     C50753 +
                 (C33361 * C3347 + C50975 * C3350 + C33360 * C818 +
                  C33358 * C834) *
                     C696) *
                    C17287) *
                   C50900 * C50853) *
                  C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C696 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C50753) *
               C17287 +
           ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
           (C33411 * C696 + C33412 * C50753) * C17289) *
              C50900 * C1162 -
          ((C33782 * C50753 + C33781 * C696) * C17289 +
           ((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C17288 +
           ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                C50753 +
            (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                C696) *
               C17287) *
              C50900 * C1163 +
          (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                C696 +
            (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                C50753) *
               C17287 +
           ((C34360 + C34359) * C696 + (C34362 + C34361) * C50753) * C17288 +
           ((C34364 + C34363) * C696 + (C34366 + C34365) * C50753) * C17289) *
              C50900 * C1164 -
          (((C33361 * C6294 + C50975 * C6297 + C33360 * C1172 +
             C33358 * C1179) *
                C50753 +
            (C33361 * C6288 + C50975 * C6293 + C33360 * C1167 +
             C33358 * C1173) *
                C696) *
               C17289 +
           ((C33361 * C6292 + C50975 * C6296 + C33360 * C1174 +
             C33358 * C1180) *
                C50753 +
            (C33361 * C6287 + C50975 * C6291 + C33360 * C1168 +
             C33358 * C1175) *
                C696) *
               C17288 +
           ((C33361 * C6290 + C50975 * C6295 + C33360 * C1176 +
             C33358 * C1181) *
                C50753 +
            (C33361 * C6286 + C50975 * C6289 + C33360 * C1169 +
             C33358 * C1177) *
                C696) *
               C17287) *
              C50900 * C1165) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C50773 * C2302 +
           ((C36353 + C36354) * C283 + (C36355 + C36356) * C278 -
            (C33586 + C33585) * C284 - (C33588 + C33587) * C279 +
            (C33590 + C33589) * C285 + (C33592 + C33591) * C280) *
               C50773 * C2303 +
           ((C36357 + C36358) * C283 + (C36359 + C36360) * C278 -
            (C33945 + C33946) * C284 - (C33947 + C33948) * C279 +
            (C33950 + C33949) * C285 + (C33952 + C33951) * C280) *
               C50773 * C2304) *
              C51041 +
          (((C33769 + C33770) * C284 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C278 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C283) +
            (C33771 + C33772) * C279 - C33781 * C285 - C33782 * C280) *
               C50773 * C2302 +
           ((C35114 + C35113) * C284 -
            ((C33361 * C1090 + C50975 * C1095 + C33360 * C820 + C33358 * C835) *
                 C278 +
             (C33361 * C1083 + C50975 * C1091 + C33360 * C811 + C33358 * C819) *
                 C283) +
            (C35116 + C35115) * C279 - (C35117 + C35118) * C285 -
            (C35119 + C35120) * C280) *
               C50773 * C2303 +
           ((C33360 * C817 + C33358 * C832 + C33361 * C3348 + C50975 * C3352) *
                C284 -
            ((C33361 * C3351 + C50975 * C3356 + C33360 * C833 + C33358 * C842) *
                 C278 +
             (C33361 * C3347 + C50975 * C3350 + C33360 * C818 + C33358 * C834) *
                 C283) +
            (C33360 * C831 + C33358 * C841 + C33361 * C3353 + C50975 * C3357) *
                C279 -
            (C33361 * C3349 + C50975 * C3354 + C33360 * C816 + C33358 * C830) *
                C285 -
            (C33361 * C3355 + C50975 * C3358 + C33360 * C829 + C33358 * C840) *
                C280) *
               C50773 * C2304) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C2302 +
            ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
                C2303 +
            C36806 * C2304) *
               C51041 -
           (C36996 * C2304 +
            ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C50773 *
                C2303 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C50773 * C2302) *
               C50853) *
              C582 +
          ((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C50773 *
                C2302 +
            ((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C50773 *
                C2303 +
            ((C36987 + C36988) * C696 + (C36989 + C36990) * C50753) * C50773 *
                C2304) *
               C50853 -
           (C36808 * C2304 +
            ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
                C2303 +
            ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
                C2302) *
               C51041) *
              C583 +
          ((C36806 * C2302 +
            ((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C50773 *
                C2303 +
            ((C36802 + C36803) * C696 + (C36804 + C36805) * C50753) * C50773 *
                C2304) *
               C51041 -
           (((C33361 * C20596 + C50975 * C20598 + C33360 * C3154 +
              C33358 * C3159) *
                 C50753 +
             (C33361 * C20595 + C50975 * C20597 + C33360 * C3147 +
              C33358 * C3155) *
                 C696) *
                C50773 * C2304 +
            ((C36990 + C36989) * C50753 + (C36988 + C36987) * C696) * C50773 *
                C2303 +
            C36996 * C2302) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C696 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C50753) *
               C50773 * C2302 +
           ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
               C2303 +
           C36806 * C2304) *
              C1162 -
          (C36996 * C2304 +
           ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C50773 *
               C2303 +
           ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                C50753 +
            (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                C696) *
               C50773 * C2302) *
              C1163 +
          (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                C696 +
            (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                C50753) *
               C50773 * C2302 +
           ((C37305 + C37306) * C696 + (C37307 + C37308) * C50753) * C50773 *
               C2303 +
           ((C37309 + C37310) * C696 + (C37311 + C37312) * C50753) * C50773 *
               C2304) *
              C1164 -
          (((C33361 * C22841 + C50975 * C22843 + C33360 * C3649 +
             C33358 * C3656) *
                C50753 +
            (C33361 * C22840 + C50975 * C22842 + C33360 * C3644 +
             C33358 * C3650) *
                C696) *
               C50773 * C2304 +
           ((C33361 * C6466 + C50975 * C6469 + C33360 * C3653 +
             C33358 * C3658) *
                C50753 +
            (C33361 * C6463 + C50975 * C6467 + C33360 * C3646 +
             C33358 * C3654) *
                C696) *
               C50773 * C2303 +
           ((C33361 * C6290 + C50975 * C6295 + C33360 * C1176 +
             C33358 * C1181) *
                C50753 +
            (C33361 * C6286 + C50975 * C6289 + C33360 * C1169 +
             C33358 * C1177) *
                C696) *
               C50773 * C2302) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C283 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C278 -
           (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
            C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
               C284 -
           (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
            C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
               C279 +
           (C38958 * C124 + C38954 * C133 + C38959 * C436 + C38955 * C444 +
            C38960 * C946 + C38956 * C953 + C38961 * C1167 + C38957 * C1173) *
               C285 +
           (C38958 * C134 + C38954 * C145 + C38959 * C445 + C38955 * C454 +
            C38960 * C954 + C38956 * C961 + C38961 * C1172 + C38957 * C1179) *
               C280) *
              C50773 * C50900 * C51041 +
          ((C38958 * C434 + C38954 * C440 + C38959 * C945 + C38955 * C951 +
            C38960 * C1168 + C38956 * C1175 + C38961 * C6287 + C38957 * C6291) *
               C284 -
           ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 + C38956 * C1181 +
             C38959 * C950 + C38955 * C959 + C38958 * C441 + C38954 * C452) *
                C278 +
            (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 + C38956 * C1177 +
             C38959 * C944 + C38955 * C949 + C38958 * C435 + C38954 * C442) *
                C283) +
           (C38958 * C443 + C38954 * C453 + C38959 * C952 + C38955 * C960 +
            C38960 * C1174 + C38956 * C1180 + C38961 * C6292 + C38957 * C6296) *
               C279 -
           (C38961 * C6288 + C38957 * C6293 + C38960 * C1167 + C38956 * C1173 +
            C38959 * C946 + C38955 * C953 + C38958 * C436 + C38954 * C444) *
               C285 -
           (C38961 * C6294 + C38957 * C6297 + C38960 * C1172 + C38956 * C1179 +
            C38959 * C954 + C38955 * C961 + C38958 * C445 + C38954 * C454) *
               C280) *
              C50773 * C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
             C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
                C696 +
            (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
             C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
                C50753) *
               C50773 * C50900 * C51041 -
           ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 + C38956 * C1181 +
             C38959 * C950 + C38955 * C959 + C38958 * C441 + C38954 * C452) *
                C50753 +
            (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 + C38956 * C1177 +
             C38959 * C944 + C38955 * C949 + C38958 * C435 + C38954 * C442) *
                C696) *
               C50773 * C50900 * C50853) *
              C582 +
          (((C38958 * C811 + C38954 * C819 + C38959 * C1083 + C38955 * C1091 +
             C38960 * C3646 + C38956 * C3654 + C38961 * C6463 +
             C38957 * C6467) *
                C696 +
            (C38958 * C820 + C38954 * C835 + C38959 * C1090 + C38955 * C1095 +
             C38960 * C3653 + C38956 * C3658 + C38961 * C6466 +
             C38957 * C6469) *
                C50753) *
               C50773 * C50900 * C50853 -
           ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
             C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
                C50753 +
            (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
             C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
                C696) *
               C50773 * C50900 * C51041) *
              C583 +
          (((C38958 * C587 + C38954 * C592 + C38959 * C818 + C38955 * C834 +
             C38960 * C3347 + C38956 * C3350 + C38961 * C3644 +
             C38957 * C3650) *
                C696 +
            (C38958 * C593 + C38954 * C602 + C38959 * C833 + C38955 * C842 +
             C38960 * C3351 + C38956 * C3356 + C38961 * C3649 +
             C38957 * C3656) *
                C50753) *
               C50773 * C50900 * C51041 -
           ((C38961 * C22841 + C38957 * C22843 + C38960 * C3649 +
             C38956 * C3656 + C38959 * C3351 + C38955 * C3356 + C38958 * C833 +
             C38954 * C842) *
                C50753 +
            (C38961 * C22840 + C38957 * C22842 + C38960 * C3644 +
             C38956 * C3650 + C38959 * C3347 + C38955 * C3350 + C38958 * C818 +
             C38954 * C834) *
                C696) *
               C50773 * C50900 * C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C696 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C50753) *
              C50773 * C50900 * C1162 -
          ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 + C38956 * C1181 +
            C38959 * C950 + C38955 * C959 + C38958 * C441 + C38954 * C452) *
               C50753 +
           (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 + C38956 * C1177 +
            C38959 * C944 + C38955 * C949 + C38958 * C435 + C38954 * C442) *
               C696) *
              C50773 * C50900 * C1163 +
          ((C38958 * C944 + C38954 * C949 + C38959 * C1169 + C38955 * C1177 +
            C38960 * C6286 + C38956 * C6289 + C38961 * C6569 + C38957 * C6573) *
               C696 +
           (C38958 * C950 + C38954 * C959 + C38959 * C1176 + C38955 * C1181 +
            C38960 * C6290 + C38956 * C6295 + C38961 * C6572 + C38957 * C6575) *
               C50753) *
              C50773 * C50900 * C1164 -
          ((C38961 * C39683 + C38957 * C39685 + C38960 * C6572 +
            C38956 * C6575 + C38959 * C6290 + C38955 * C6295 + C38958 * C1176 +
            C38954 * C1181) *
               C50753 +
           (C38961 * C39682 + C38957 * C39684 + C38960 * C6569 +
            C38956 * C6573 + C38959 * C6286 + C38955 * C6289 + C38958 * C1169 +
            C38954 * C1177) *
               C696) *
              C50773 * C50900 * C1165) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1285 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51083 -
            (C33395 + C33396) * C1286 - (C33397 + C33398) * C51067 +
            C33411 * C1287 + C33412 * C1282) *
               C50773 * C2302 +
           ((C36353 + C36354) * C1285 + (C36355 + C36356) * C51083 -
            (C33586 + C33585) * C1286 - (C33588 + C33587) * C51067 +
            (C33590 + C33589) * C1287 + (C33592 + C33591) * C1282) *
               C50773 * C2303 +
           (C36653 * C1285 + C36654 * C51083 - C36655 * C1286 -
            C36656 * C51067 + (C33950 + C33949) * C1287 +
            (C33952 + C33951) * C1282) *
               C50773 * C2304) *
              C1643 +
          (((C33769 + C33770) * C1286 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C51083 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C1285) +
            (C33771 + C33772) * C51067 - C33781 * C1287 - C33782 * C1282) *
               C50773 * C2302 +
           ((C35114 + C35113) * C1286 -
            ((C36983 + C36984) * C51083 + (C36985 + C36986) * C1285) +
            (C35116 + C35115) * C51067 - (C35117 + C35118) * C1287 -
            (C35119 + C35120) * C1282) *
               C50773 * C2303 +
           ((C37913 + C37914) * C1286 - (C36991 * C51083 + C36992 * C1285) +
            (C37915 + C37916) * C51067 -
            (C33361 * C3349 + C50975 * C3354 + C33360 * C816 + C33358 * C830) *
                C1287 -
            (C33361 * C3355 + C50975 * C3358 + C33360 * C829 + C33358 * C840) *
                C1282) *
               C50773 * C2304) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1285 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51083 -
            (C33395 + C33396) * C1286 - (C33397 + C33398) * C51067 +
            C33411 * C1287 + C33412 * C1282) *
               C17287 +
           ((C33396 + C33395) * C1285 + (C33398 + C33397) * C51083 -
            (C33400 + C33399) * C1286 - (C33402 + C33401) * C51067 +
            (C33404 + C33403) * C1287 + (C33406 + C33405) * C1282) *
               C17288 +
           (C33411 * C1285 + C33412 * C51083 - C33413 * C1286 -
            C33414 * C51067 + (C33408 + C33407) * C1287 +
            (C33410 + C33409) * C1282) *
               C17289) *
              C50900 * C1643 +
          (((C33769 + C33770) * C1286 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C51083 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C1285) +
            (C33771 + C33772) * C51067 - C33781 * C1287 - C33782 * C1282) *
               C17287 +
           ((C33774 + C33773) * C1286 -
            ((C33772 + C33771) * C51083 + (C33770 + C33769) * C1285) +
            (C33776 + C33775) * C51067 - (C33777 + C33778) * C1287 -
            (C33779 + C33780) * C1282) *
               C17288 +
           ((C33778 + C33777) * C1286 - (C33782 * C51083 + C33781 * C1285) +
            (C33780 + C33779) * C51067 -
            (C33361 * C948 + C50975 * C957 + C33360 * C438 + C33358 * C448) *
                C1287 -
            (C33361 * C958 + C50975 * C963 + C33360 * C449 + C33358 * C456) *
                C1282) *
               C17289) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C1285 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C51083 -
           (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
            C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
               C1286 -
           (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
            C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
               C51067 +
           (C38958 * C124 + C38954 * C133 + C38959 * C436 + C38955 * C444 +
            C38960 * C946 + C38956 * C953 + C38961 * C1167 + C38957 * C1173) *
               C1287 +
           (C38958 * C134 + C38954 * C145 + C38959 * C445 + C38955 * C454 +
            C38960 * C954 + C38956 * C961 + C38961 * C1172 + C38957 * C1179) *
               C1282) *
              C50773 * C50900 * C1643 +
          ((C38958 * C434 + C38954 * C440 + C38959 * C945 + C38955 * C951 +
            C38960 * C1168 + C38956 * C1175 + C38961 * C6287 + C38957 * C6291) *
               C1286 -
           ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 + C38956 * C1181 +
             C38959 * C950 + C38955 * C959 + C38958 * C441 + C38954 * C452) *
                C51083 +
            (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 + C38956 * C1177 +
             C38959 * C944 + C38955 * C949 + C38958 * C435 + C38954 * C442) *
                C1285) +
           (C38958 * C443 + C38954 * C453 + C38959 * C952 + C38955 * C960 +
            C38960 * C1174 + C38956 * C1180 + C38961 * C6292 + C38957 * C6296) *
               C51067 -
           (C38961 * C6288 + C38957 * C6293 + C38960 * C1167 + C38956 * C1173 +
            C38959 * C946 + C38955 * C953 + C38958 * C436 + C38954 * C444) *
               C1287 -
           (C38961 * C6294 + C38957 * C6297 + C38960 * C1172 + C38956 * C1179 +
            C38959 * C954 + C38955 * C961 + C38958 * C445 + C38954 * C454) *
               C1282) *
              C50773 * C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C1391 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C1386 -
             (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
                C50773 * C2302 +
            ((C36353 + C36354) * C1391 + (C36355 + C36356) * C1386 -
             (C33586 + C33585) * C1392 - (C33588 + C33587) * C50758) *
                C50773 * C2303 +
            C37710 * C2304) *
               C1643 +
           (((C33769 + C33770) * C1392 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C1386 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C1391) +
             (C33771 + C33772) * C50758) *
                C50773 * C2302 +
            ((C35114 + C35113) * C1392 -
             ((C36983 + C36984) * C1386 + (C36985 + C36986) * C1391) +
             (C35116 + C35115) * C50758) *
                C50773 * C2303 +
            ((C37913 + C37914) * C1392 - (C36991 * C1386 + C36992 * C1391) +
             (C37915 + C37916) * C50758) *
                C50773 * C2304) *
               C50853) *
              C51040 +
          ((((C33585 + C33586) * C1392 -
             ((C36356 + C36355) * C1386 + (C36354 + C36353) * C1391) +
             (C33587 + C33588) * C50758) *
                C50773 * C2302 +
            ((C33946 + C33945) * C1392 -
             ((C36360 + C36359) * C1386 + (C36358 + C36357) * C1391) +
             (C33948 + C33947) * C50758) *
                C50773 * C2303 +
            ((C36677 + C36678) * C1392 - (C36789 * C1386 + C36790 * C1391) +
             (C36683 + C36684) * C50758) *
                C50773 * C2304) *
               C1643 +
           (((C36986 + C36985) * C1391 + (C36984 + C36983) * C1386 -
             (C35113 + C35114) * C1392 - (C35115 + C35116) * C50758) *
                C50773 * C2302 +
            ((C36982 + C36981) * C1391 + (C36980 + C36979) * C1386 -
             (C37914 + C37913) * C1392 - (C37916 + C37915) * C50758) *
                C50773 * C2303 +
            ((C36987 + C36988) * C1391 + (C36989 + C36990) * C1386 -
             (C33361 * C3517 + C50975 * C3520 + C33360 * C3145 +
              C33358 * C3150) *
                 C1392 -
             (C33361 * C3519 + C50975 * C3523 + C33360 * C3151 +
              C33358 * C3157) *
                 C50758) *
                C50773 * C2304) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C1391 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C1386 -
             (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
                C17287 +
            ((C33396 + C33395) * C1391 + (C33398 + C33397) * C1386 -
             (C33400 + C33399) * C1392 - (C33402 + C33401) * C50758) *
                C17288 +
            (C33411 * C1391 + C33412 * C1386 - C33413 * C1392 -
             C33414 * C50758) *
                C17289) *
               C50900 * C1643 +
           (((C33769 + C33770) * C1392 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C1386 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C1391) +
             (C33771 + C33772) * C50758) *
                C17287 +
            ((C33774 + C33773) * C1392 -
             ((C33772 + C33771) * C1386 + (C33770 + C33769) * C1391) +
             (C33776 + C33775) * C50758) *
                C17288 +
            ((C33778 + C33777) * C1392 - (C33782 * C1386 + C33781 * C1391) +
             (C33780 + C33779) * C50758) *
                C17289) *
               C50900 * C50853) *
              C51040 +
          ((((C33585 + C33586) * C1392 -
             ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                  C1386 +
              (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                  C1391) +
             (C33587 + C33588) * C50758) *
                C17287 +
            ((C33590 + C33589) * C1392 -
             ((C33588 + C33587) * C1386 + (C33586 + C33585) * C1391) +
             (C33592 + C33591) * C50758) *
                C17288 +
            ((C33594 + C33593) * C1392 - (C33598 * C1386 + C33597 * C1391) +
             (C33596 + C33595) * C50758) *
                C17289) *
               C50900 * C1643 +
           (((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C1391 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C1386 -
             (C35113 + C35114) * C1392 - (C35115 + C35116) * C50758) *
                C17287 +
            ((C35114 + C35113) * C1391 + (C35116 + C35115) * C1386 -
             (C35117 + C35118) * C1392 - (C35119 + C35120) * C50758) *
                C17288 +
            ((C35118 + C35117) * C1391 + (C35120 + C35119) * C1386 -
             (C33361 * C1080 + C50975 * C1085 + C33360 * C814 + C33358 * C825) *
                 C1392 -
             (C33361 * C1084 + C50975 * C1092 + C33360 * C826 + C33358 * C838) *
                 C50758) *
                C17289) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
             C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
                C1391 +
            (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
             C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
                C1386 -
            (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
             C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
                C1392 -
            (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
             C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
                C50758) *
               C50773 * C50900 * C1643 +
           ((C38958 * C434 + C38954 * C440 + C38959 * C945 + C38955 * C951 +
             C38960 * C1168 + C38956 * C1175 + C38961 * C6287 +
             C38957 * C6291) *
                C1392 -
            ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 +
              C38956 * C1181 + C38959 * C950 + C38955 * C959 + C38958 * C441 +
              C38954 * C452) *
                 C1386 +
             (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 +
              C38956 * C1177 + C38959 * C944 + C38955 * C949 + C38958 * C435 +
              C38954 * C442) *
                 C1391) +
            (C38958 * C443 + C38954 * C453 + C38959 * C952 + C38955 * C960 +
             C38960 * C1174 + C38956 * C1180 + C38961 * C6292 +
             C38957 * C6296) *
                C50758) *
               C50773 * C50900 * C50853) *
              C51040 +
          (((C38958 * C286 + C38954 * C292 + C38959 * C812 + C38955 * C821 +
             C38960 * C1082 + C38956 * C1089 + C38961 * C3645 +
             C38957 * C3652) *
                C1392 -
            ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 +
              C38956 * C1095 + C38959 * C820 + C38955 * C835 + C38958 * C293 +
              C38954 * C304) *
                 C1386 +
             (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 +
              C38956 * C1091 + C38959 * C811 + C38955 * C819 + C38958 * C287 +
              C38954 * C294) *
                 C1391) +
            (C38958 * C295 + C38954 * C305 + C38959 * C822 + C38955 * C836 +
             C38960 * C1088 + C38956 * C1094 + C38961 * C3651 +
             C38957 * C3657) *
                C50758) *
               C50773 * C50900 * C1643 +
           ((C38958 * C811 + C38954 * C819 + C38959 * C1083 + C38955 * C1091 +
             C38960 * C3646 + C38956 * C3654 + C38961 * C6463 +
             C38957 * C6467) *
                C1391 +
            (C38958 * C820 + C38954 * C835 + C38959 * C1090 + C38955 * C1095 +
             C38960 * C3653 + C38956 * C3658 + C38961 * C6466 +
             C38957 * C6469) *
                C1386 -
            (C38961 * C6462 + C38957 * C6465 + C38960 * C3645 + C38956 * C3652 +
             C38959 * C1082 + C38955 * C1089 + C38958 * C812 + C38954 * C821) *
                C1392 -
            (C38961 * C6464 + C38957 * C6468 + C38960 * C3651 + C38956 * C3657 +
             C38959 * C1088 + C38955 * C1094 + C38958 * C822 + C38954 * C836) *
                C50758) *
               C50773 * C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1391 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C1386 -
            (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
               C50773 * C2302 +
           ((C36353 + C36354) * C1391 + (C36355 + C36356) * C1386 -
            (C33586 + C33585) * C1392 - (C33588 + C33587) * C50758) *
               C50773 * C2303 +
           C37710 * C2304) *
              C51087 +
          (((C33769 + C33770) * C1392 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C1386 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C1391) +
            (C33771 + C33772) * C50758) *
               C50773 * C2302 +
           ((C35114 + C35113) * C1392 -
            ((C36983 + C36984) * C1386 + (C36985 + C36986) * C1391) +
            (C35116 + C35115) * C50758) *
               C50773 * C2303 +
           ((C37913 + C37914) * C1392 - (C36991 * C1386 + C36992 * C1391) +
            (C37915 + C37916) * C50758) *
               C50773 * C2304) *
              C51076 +
          (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                C1391 +
            (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                C1386 -
            (C34359 + C34360) * C1392 - (C34361 + C34362) * C50758) *
               C50773 * C2302 +
           ((C37305 + C37306) * C1391 + (C37307 + C37308) * C1386 -
            (C33361 * C3645 + C50975 * C3652 + C33360 * C1082 +
             C33358 * C1089) *
                C1392 -
            (C33361 * C3651 + C50975 * C3657 + C33360 * C1088 +
             C33358 * C1094) *
                C50758) *
               C50773 * C2303 +
           ((C37309 + C37310) * C1391 + (C37311 + C37312) * C1386 -
            (C33361 * C3643 + C50975 * C3648 + C33360 * C3348 +
             C33358 * C3352) *
                C1392 -
            (C33361 * C3647 + C50975 * C3655 + C33360 * C3353 +
             C33358 * C3357) *
                C50758) *
               C50773 * C2304) *
              C1875) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1391 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C1386 -
            (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
               C17287 +
           ((C33396 + C33395) * C1391 + (C33398 + C33397) * C1386 -
            (C33400 + C33399) * C1392 - (C33402 + C33401) * C50758) *
               C17288 +
           (C33411 * C1391 + C33412 * C1386 - C33413 * C1392 -
            C33414 * C50758) *
               C17289) *
              C50900 * C51087 +
          (((C33769 + C33770) * C1392 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C1386 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C1391) +
            (C33771 + C33772) * C50758) *
               C17287 +
           ((C33774 + C33773) * C1392 -
            ((C33772 + C33771) * C1386 + (C33770 + C33769) * C1391) +
            (C33776 + C33775) * C50758) *
               C17288 +
           ((C33778 + C33777) * C1392 - (C33782 * C1386 + C33781 * C1391) +
            (C33780 + C33779) * C50758) *
               C17289) *
              C50900 * C51076 +
          (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                C1391 +
            (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                C1386 -
            (C34359 + C34360) * C1392 - (C34361 + C34362) * C50758) *
               C17287 +
           ((C34360 + C34359) * C1391 + (C34362 + C34361) * C1386 -
            (C34363 + C34364) * C1392 - (C34365 + C34366) * C50758) *
               C17288 +
           ((C34364 + C34363) * C1391 + (C34366 + C34365) * C1386 -
            (C33361 * C1166 + C50975 * C1171 + C33360 * C947 + C33358 * C955) *
                C1392 -
            (C33361 * C1170 + C50975 * C1178 + C33360 * C956 + C33358 * C962) *
                C50758) *
               C17289) *
              C50900 * C1875) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C1391 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C1386 -
           (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
            C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
               C1392 -
           (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
            C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
               C50758) *
              C50773 * C50900 * C51087 +
          ((C38958 * C434 + C38954 * C440 + C38959 * C945 + C38955 * C951 +
            C38960 * C1168 + C38956 * C1175 + C38961 * C6287 + C38957 * C6291) *
               C1392 -
           ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 + C38956 * C1181 +
             C38959 * C950 + C38955 * C959 + C38958 * C441 + C38954 * C452) *
                C1386 +
            (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 + C38956 * C1177 +
             C38959 * C944 + C38955 * C949 + C38958 * C435 + C38954 * C442) *
                C1391) +
           (C38958 * C443 + C38954 * C453 + C38959 * C952 + C38955 * C960 +
            C38960 * C1174 + C38956 * C1180 + C38961 * C6292 + C38957 * C6296) *
               C50758) *
              C50773 * C50900 * C51076 +
          ((C38958 * C944 + C38954 * C949 + C38959 * C1169 + C38955 * C1177 +
            C38960 * C6286 + C38956 * C6289 + C38961 * C6569 + C38957 * C6573) *
               C1391 +
           (C38958 * C950 + C38954 * C959 + C38959 * C1176 + C38955 * C1181 +
            C38960 * C6290 + C38956 * C6295 + C38961 * C6572 + C38957 * C6575) *
               C1386 -
           (C38961 * C6568 + C38957 * C6571 + C38960 * C6287 + C38956 * C6291 +
            C38959 * C1168 + C38955 * C1175 + C38958 * C945 + C38954 * C951) *
               C1392 -
           (C38961 * C6570 + C38957 * C6574 + C38960 * C6292 + C38956 * C6296 +
            C38959 * C1174 + C38955 * C1180 + C38958 * C952 + C38954 * C960) *
               C50758) *
              C50773 * C50900 * C1875) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51025 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
               C17287 +
           ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51025 -
            (C33400 + C33399) * C49763 - (C33402 + C33401) * C50758) *
               C17288 +
           (C33411 * C49770 + C33412 * C51025 - C33413 * C49763 -
            C33414 * C50758) *
               C17289) *
              C50900 * C50841 * C582 +
          (((C33585 + C33586) * C49763 -
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C51025 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C49770) +
            (C33587 + C33588) * C50758) *
               C17287 +
           ((C33590 + C33589) * C49763 -
            ((C33588 + C33587) * C51025 + (C33586 + C33585) * C49770) +
            (C33592 + C33591) * C50758) *
               C17288 +
           ((C33594 + C33593) * C49763 - (C33598 * C51025 + C33597 * C49770) +
            (C33596 + C33595) * C50758) *
               C17289) *
              C50900 * C50841 * C583 +
          (((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                C49770 +
            (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                C51025 -
            (C33945 + C33946) * C49763 - (C33947 + C33948) * C50758) *
               C17287 +
           ((C33946 + C33945) * C49770 + (C33948 + C33947) * C51025 -
            (C33949 + C33950) * C49763 - (C33951 + C33952) * C50758) *
               C17288 +
           ((C33950 + C33949) * C49770 + (C33952 + C33951) * C51025 -
            (C33361 * C815 + C50975 * C828 + C33360 * C590 + C33358 * C598) *
                C49763 -
            (C33361 * C827 + C50975 * C839 + C33360 * C599 + C33358 * C605) *
                C50758) *
               C17289) *
              C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C17287 +
          ((C33396 + C33395) * C118 + (C33398 + C33397) * C106 -
           (C33400 + C33399) * C119 - (C33402 + C33401) * C107 +
           (C33404 + C33403) * C120 + (C33406 + C33405) * C108 -
           (C33407 + C33408) * C121 - (C33409 + C33410) * C109) *
              C17288 +
          (C33411 * C118 + C33412 * C106 - C33413 * C119 - C33414 * C107 +
           (C33408 + C33407) * C120 + (C33410 + C33409) * C108 -
           (C33361 * C439 + C50975 * C450 + C33360 * C127 + C33358 * C139) *
               C121 -
           (C33361 * C451 + C50975 * C457 + C33360 * C140 + C33358 * C148) *
               C109) *
              C17289) *
         C50900 * C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C50773 * C2302 +
          ((C33360 * C287 + C33358 * C294 + C33361 * C811 + C50975 * C819) *
               C118 +
           (C33360 * C293 + C33358 * C304 + C33361 * C820 + C50975 * C835) *
               C106 -
           (C33586 + C33585) * C119 - (C33588 + C33587) * C107 +
           (C33590 + C33589) * C120 + (C33592 + C33591) * C108 -
           (C33593 + C33594) * C121 - (C33595 + C33596) * C109) *
              C50773 * C2303 +
          ((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
               C118 +
           (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
               C106 -
           (C33945 + C33946) * C119 - (C33947 + C33948) * C107 +
           (C33950 + C33949) * C120 + (C33952 + C33951) * C108 -
           (C33361 * C815 + C50975 * C828 + C33360 * C590 + C33358 * C598) *
               C121 -
           (C33361 * C827 + C50975 * C839 + C33360 * C599 + C33358 * C605) *
               C109) *
              C50773 * C2304) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51025 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
               C50773 * C2302 +
           ((C36353 + C36354) * C49770 + (C36355 + C36356) * C51025 -
            (C33586 + C33585) * C49763 - (C33588 + C33587) * C50758) *
               C50773 * C2303 +
           C36688 * C2304) *
              C50841 * C582 +
          (((C33585 + C33586) * C49763 -
            ((C36356 + C36355) * C51025 + (C36354 + C36353) * C49770) +
            (C33587 + C33588) * C50758) *
               C50773 * C2302 +
           ((C33946 + C33945) * C49763 -
            ((C36360 + C36359) * C51025 + (C36358 + C36357) * C49770) +
            (C33948 + C33947) * C50758) *
               C50773 * C2303 +
           ((C36677 + C36678) * C49763 -
            ((C36679 + C36680) * C51025 + (C36681 + C36682) * C49770) +
            (C36683 + C36684) * C50758) *
               C50773 * C2304) *
              C50841 * C583 +
          (C36688 * C2302 +
           ((C36682 + C36681) * C49770 + (C36680 + C36679) * C51025 -
            (C36678 + C36677) * C49763 - (C36684 + C36683) * C50758) *
               C50773 * C2303 +
           ((C33360 * C2803 + C33358 * C2806 + C33361 * C3147 +
             C50975 * C3155) *
                C49770 +
            (C33360 * C2807 + C33358 * C2812 + C33361 * C3154 +
             C50975 * C3159) *
                C51025 -
            (C33361 * C3146 + C50975 * C3153 + C33360 * C2804 +
             C33358 * C2808) *
                C49763 -
            (C33361 * C3152 + C50975 * C3158 + C33360 * C2809 +
             C33358 * C2813) *
                C50758) *
               C50773 * C2304) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
           C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
              C118 +
          (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
           C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
              C106 -
          (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
           C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
              C119 -
          (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
           C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
              C107 +
          (C38958 * C124 + C38954 * C133 + C38959 * C436 + C38955 * C444 +
           C38960 * C946 + C38956 * C953 + C38961 * C1167 + C38957 * C1173) *
              C120 +
          (C38958 * C134 + C38954 * C145 + C38959 * C445 + C38955 * C454 +
           C38960 * C954 + C38956 * C961 + C38961 * C1172 + C38957 * C1179) *
              C108 -
          (C38961 * C1166 + C38957 * C1171 + C38960 * C947 + C38956 * C955 +
           C38959 * C437 + C38955 * C446 + C38958 * C125 + C38954 * C135) *
              C121 -
          (C38961 * C1170 + C38957 * C1178 + C38960 * C956 + C38956 * C962 +
           C38959 * C447 + C38955 * C455 + C38958 * C136 + C38954 * C146) *
              C109) *
         C50773 * C50900 * C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C49770 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C51025 -
           (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
            C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
               C49763 -
           (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
            C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
               C50758) *
              C50773 * C50900 * C50841 * C582 +
          ((C38958 * C286 + C38954 * C292 + C38959 * C812 + C38955 * C821 +
            C38960 * C1082 + C38956 * C1089 + C38961 * C3645 + C38957 * C3652) *
               C49763 -
           ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
             C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
                C51025 +
            (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
             C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
                C49770) +
           (C38958 * C295 + C38954 * C305 + C38959 * C822 + C38955 * C836 +
            C38960 * C1088 + C38956 * C1094 + C38961 * C3651 + C38957 * C3657) *
               C50758) *
              C50773 * C50900 * C50841 * C583 +
          ((C38958 * C587 + C38954 * C592 + C38959 * C818 + C38955 * C834 +
            C38960 * C3347 + C38956 * C3350 + C38961 * C3644 + C38957 * C3650) *
               C49770 +
           (C38958 * C593 + C38954 * C602 + C38959 * C833 + C38955 * C842 +
            C38960 * C3351 + C38956 * C3356 + C38961 * C3649 + C38957 * C3656) *
               C51025 -
           (C38961 * C3643 + C38957 * C3648 + C38960 * C3348 + C38956 * C3352 +
            C38959 * C817 + C38955 * C832 + C38958 * C588 + C38954 * C594) *
               C49763 -
           (C38961 * C3647 + C38957 * C3655 + C38960 * C3353 + C38956 * C3357 +
            C38959 * C831 + C38955 * C841 + C38958 * C595 + C38954 * C603) *
               C50758) *
              C50773 * C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C696 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C50753) *
               C17287 +
           ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
           (C33411 * C696 + C33412 * C50753) * C17289) *
              C50900 * C50841 * C692 -
          ((C33598 * C50753 + C33597 * C696) * C17289 +
           ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) * C17288 +
           ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                C50753 +
            (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                C696) *
               C17287) *
              C50900 * C50841 * C693 +
          (((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                C696 +
            (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                C50753) *
               C17287 +
           ((C33946 + C33945) * C696 + (C33948 + C33947) * C50753) * C17288 +
           ((C33950 + C33949) * C696 + (C33952 + C33951) * C50753) * C17289) *
              C50900 * C50841 * C694 -
          (((C33361 * C4204 + C50975 * C4205 + C33360 * C703 + C33358 * C710) *
                C50753 +
            (C33361 * C4202 + C50975 * C4203 + C33360 * C698 + C33358 * C704) *
                C696) *
               C17289 +
           ((C33361 * C3151 + C50975 * C3157 + C33360 * C705 + C33358 * C711) *
                C50753 +
            (C33361 * C3145 + C50975 * C3150 + C33360 * C699 + C33358 * C706) *
                C696) *
               C17288 +
           ((C33361 * C3149 + C50975 * C3156 + C33360 * C707 + C33358 * C712) *
                C50753 +
            (C33361 * C3144 + C50975 * C3148 + C33360 * C700 + C33358 * C708) *
                C696) *
               C17287) *
              C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C17287 +
           ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
            (C33400 + C33399) * C284 - (C33402 + C33401) * C279 +
            (C33404 + C33403) * C285 + (C33406 + C33405) * C280) *
               C17288 +
           (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C279 +
            (C33408 + C33407) * C285 + (C33410 + C33409) * C280) *
               C17289) *
              C50900 * C50841 * C51040 +
          (((C33585 + C33586) * C284 -
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C278 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C283) +
            (C33587 + C33588) * C279 - C33597 * C285 - C33598 * C280) *
               C17287 +
           ((C33590 + C33589) * C284 -
            ((C33588 + C33587) * C278 + (C33586 + C33585) * C283) +
            (C33592 + C33591) * C279 - (C33593 + C33594) * C285 -
            (C33595 + C33596) * C280) *
               C17288 +
           ((C33594 + C33593) * C284 - (C33598 * C278 + C33597 * C283) +
            (C33596 + C33595) * C279 -
            (C33361 * C1523 + C50975 * C1524 + C33360 * C290 + C33358 * C300) *
                C285 -
            (C33361 * C1525 + C50975 * C1526 + C33360 * C301 + C33358 * C308) *
                C280) *
               C17289) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C50773 * C2302 +
           ((C36353 + C36354) * C283 + (C36355 + C36356) * C278 -
            (C33586 + C33585) * C284 - (C33588 + C33587) * C279 +
            (C33590 + C33589) * C285 + (C33592 + C33591) * C280) *
               C50773 * C2303 +
           ((C36357 + C36358) * C283 + (C36359 + C36360) * C278 -
            (C33945 + C33946) * C284 - (C33947 + C33948) * C279 +
            (C33950 + C33949) * C285 + (C33952 + C33951) * C280) *
               C50773 * C2304) *
              C50841 * C51040 +
          (((C33585 + C33586) * C284 -
            ((C36356 + C36355) * C278 + (C36354 + C36353) * C283) +
            (C33587 + C33588) * C279 - C33597 * C285 - C33598 * C280) *
               C50773 * C2302 +
           ((C33946 + C33945) * C284 -
            ((C36360 + C36359) * C278 + (C36358 + C36357) * C283) +
            (C33948 + C33947) * C279 - (C33949 + C33950) * C285 -
            (C33951 + C33952) * C280) *
               C50773 * C2303 +
           ((C33360 * C699 + C33358 * C706 + C33361 * C3145 + C50975 * C3150) *
                C284 -
            ((C33361 * C3149 + C50975 * C3156 + C33360 * C707 + C33358 * C712) *
                 C278 +
             (C33361 * C3144 + C50975 * C3148 + C33360 * C700 + C33358 * C708) *
                 C283) +
            (C33360 * C705 + C33358 * C711 + C33361 * C3151 + C50975 * C3157) *
                C279 -
            (C33361 * C4202 + C50975 * C4203 + C33360 * C698 + C33358 * C704) *
                C285 -
            (C33361 * C4204 + C50975 * C4205 + C33360 * C703 + C33358 * C710) *
                C280) *
               C50773 * C2304) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C696 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C50753) *
               C50773 * C2302 +
           ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
               C2303 +
           C36806 * C2304) *
              C50841 * C692 -
          (C36808 * C2304 +
           ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
               C2303 +
           ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
               C2302) *
              C50841 * C693 +
          (C36806 * C2302 +
           ((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C50773 *
               C2303 +
           ((C36802 + C36803) * C696 + (C36804 + C36805) * C50753) * C50773 *
               C2304) *
              C50841 * C694 -
          (((C33361 * C20385 + C50975 * C20387 + C33360 * C2962 +
             C33358 * C2965) *
                C50753 +
            (C33361 * C20384 + C50975 * C20386 + C33360 * C2959 +
             C33358 * C2963) *
                C696) *
               C50773 * C2304 +
           ((C36805 + C36804) * C50753 + (C36803 + C36802) * C696) * C50773 *
               C2303 +
           C36808 * C2302) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C283 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C278 -
           (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
            C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
               C284 -
           (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
            C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
               C279 +
           (C38958 * C124 + C38954 * C133 + C38959 * C436 + C38955 * C444 +
            C38960 * C946 + C38956 * C953 + C38961 * C1167 + C38957 * C1173) *
               C285 +
           (C38958 * C134 + C38954 * C145 + C38959 * C445 + C38955 * C454 +
            C38960 * C954 + C38956 * C961 + C38961 * C1172 + C38957 * C1179) *
               C280) *
              C50773 * C50900 * C50841 * C51040 +
          ((C38958 * C286 + C38954 * C292 + C38959 * C812 + C38955 * C821 +
            C38960 * C1082 + C38956 * C1089 + C38961 * C3645 + C38957 * C3652) *
               C284 -
           ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
             C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
                C278 +
            (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
             C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
                C283) +
           (C38958 * C295 + C38954 * C305 + C38959 * C822 + C38955 * C836 +
            C38960 * C1088 + C38956 * C1094 + C38961 * C3651 + C38957 * C3657) *
               C279 -
           (C38961 * C7062 + C38957 * C7063 + C38960 * C1081 + C38956 * C1087 +
            C38959 * C813 + C38955 * C823 + C38958 * C288 + C38954 * C296) *
               C285 -
           (C38961 * C7064 + C38957 * C7065 + C38960 * C1086 + C38956 * C1093 +
            C38959 * C824 + C38955 * C837 + C38958 * C297 + C38954 * C306) *
               C280) *
              C50773 * C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C696 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C50753) *
              C50773 * C50900 * C50841 * C692 -
          ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
            C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
               C50753 +
           (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
            C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
               C696) *
              C50773 * C50900 * C50841 * C693 +
          ((C38958 * C587 + C38954 * C592 + C38959 * C818 + C38955 * C834 +
            C38960 * C3347 + C38956 * C3350 + C38961 * C3644 + C38957 * C3650) *
               C696 +
           (C38958 * C593 + C38954 * C602 + C38959 * C833 + C38955 * C842 +
            C38960 * C3351 + C38956 * C3356 + C38961 * C3649 + C38957 * C3656) *
               C50753) *
              C50773 * C50900 * C50841 * C694 -
          ((C38961 * C20674 + C38957 * C20676 + C38960 * C3521 +
            C38956 * C3524 + C38959 * C3149 + C38955 * C3156 + C38958 * C707 +
            C38954 * C712) *
               C50753 +
           (C38961 * C20673 + C38957 * C20675 + C38960 * C3518 +
            C38956 * C3522 + C38959 * C3144 + C38955 * C3148 + C38958 * C700 +
            C38954 * C708) *
               C696) *
              C50773 * C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C17287 +
            ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
            (C33411 * C696 + C33412 * C50753) * C17289) *
               C50900 * C51041 -
           ((C33782 * C50753 + C33781 * C696) * C17289 +
            ((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C17288 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C17287) *
               C50900 * C50853) *
              C582 +
          ((((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C696 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C50753) *
                C17287 +
            ((C33360 * C812 + C33358 * C821 + C33361 * C1082 + C50975 * C1089) *
                 C696 +
             (C33360 * C822 + C33358 * C836 + C33361 * C1088 + C50975 * C1094) *
                 C50753) *
                C17288 +
            ((C33360 * C813 + C33358 * C823 + C33361 * C1081 + C50975 * C1087) *
                 C696 +
             (C33360 * C824 + C33358 * C837 + C33361 * C1086 + C50975 * C1093) *
                 C50753) *
                C17289) *
               C50900 * C50853 -
           ((C33598 * C50753 + C33597 * C696) * C17289 +
            ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) * C17288 +
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C50753 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C696) *
                C17287) *
               C50900 * C51041) *
              C583 +
          ((((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                 C696 +
             (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                 C50753) *
                C17287 +
            ((C33946 + C33945) * C696 + (C33948 + C33947) * C50753) * C17288 +
            ((C33950 + C33949) * C696 + (C33952 + C33951) * C50753) * C17289) *
               C50900 * C51041 -
           (((C33361 * C3355 + C50975 * C3358 + C33360 * C829 + C33358 * C840) *
                 C50753 +
             (C33361 * C3349 + C50975 * C3354 + C33360 * C816 + C33358 * C830) *
                 C696) *
                C17289 +
            ((C33361 * C3353 + C50975 * C3357 + C33360 * C831 + C33358 * C841) *
                 C50753 +
             (C33361 * C3348 + C50975 * C3352 + C33360 * C817 + C33358 * C832) *
                 C696) *
                C17288 +
            ((C33361 * C3351 + C50975 * C3356 + C33360 * C833 + C33358 * C842) *
                 C50753 +
             (C33361 * C3347 + C50975 * C3350 + C33360 * C818 + C33358 * C834) *
                 C696) *
                C17287) *
               C50900 * C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C17287 +
           ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
            (C33400 + C33399) * C284 - (C33402 + C33401) * C279 +
            (C33404 + C33403) * C285 + (C33406 + C33405) * C280) *
               C17288 +
           (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C279 +
            (C33408 + C33407) * C285 + (C33410 + C33409) * C280) *
               C17289) *
              C50900 * C51041 +
          (((C33769 + C33770) * C284 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C278 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C283) +
            (C33771 + C33772) * C279 - C33781 * C285 - C33782 * C280) *
               C17287 +
           ((C33774 + C33773) * C284 -
            ((C33772 + C33771) * C278 + (C33770 + C33769) * C283) +
            (C33776 + C33775) * C279 - (C33777 + C33778) * C285 -
            (C33779 + C33780) * C280) *
               C17288 +
           ((C33778 + C33777) * C284 - (C33782 * C278 + C33781 * C283) +
            (C33780 + C33779) * C279 -
            (C33361 * C948 + C50975 * C957 + C33360 * C438 + C33358 * C448) *
                C285 -
            (C33361 * C958 + C50975 * C963 + C33360 * C449 + C33358 * C456) *
                C280) *
               C17289) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C50773 * C2302 +
           ((C36353 + C36354) * C283 + (C36355 + C36356) * C278 -
            (C33586 + C33585) * C284 - (C33588 + C33587) * C279 +
            (C33590 + C33589) * C285 + (C33592 + C33591) * C280) *
               C50773 * C2303 +
           ((C36357 + C36358) * C283 + (C36359 + C36360) * C278 -
            (C33945 + C33946) * C284 - (C33947 + C33948) * C279 +
            (C33950 + C33949) * C285 + (C33952 + C33951) * C280) *
               C50773 * C2304) *
              C51041 +
          (((C33769 + C33770) * C284 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C278 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C283) +
            (C33771 + C33772) * C279 - C33781 * C285 - C33782 * C280) *
               C50773 * C2302 +
           ((C35114 + C35113) * C284 -
            ((C33361 * C1090 + C50975 * C1095 + C33360 * C820 + C33358 * C835) *
                 C278 +
             (C33361 * C1083 + C50975 * C1091 + C33360 * C811 + C33358 * C819) *
                 C283) +
            (C35116 + C35115) * C279 - (C35117 + C35118) * C285 -
            (C35119 + C35120) * C280) *
               C50773 * C2303 +
           ((C33360 * C817 + C33358 * C832 + C33361 * C3348 + C50975 * C3352) *
                C284 -
            ((C33361 * C3351 + C50975 * C3356 + C33360 * C833 + C33358 * C842) *
                 C278 +
             (C33361 * C3347 + C50975 * C3350 + C33360 * C818 + C33358 * C834) *
                 C283) +
            (C33360 * C831 + C33358 * C841 + C33361 * C3353 + C50975 * C3357) *
                C279 -
            (C33361 * C3349 + C50975 * C3354 + C33360 * C816 + C33358 * C830) *
                C285 -
            (C33361 * C3355 + C50975 * C3358 + C33360 * C829 + C33358 * C840) *
                C280) *
               C50773 * C2304) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C2302 +
            ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
                C2303 +
            C36806 * C2304) *
               C51041 -
           (C36996 * C2304 +
            ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C50773 *
                C2303 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C50773 * C2302) *
               C50853) *
              C582 +
          ((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C50773 *
                C2302 +
            ((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C50773 *
                C2303 +
            ((C36987 + C36988) * C696 + (C36989 + C36990) * C50753) * C50773 *
                C2304) *
               C50853 -
           (C36808 * C2304 +
            ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
                C2303 +
            ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
                C2302) *
               C51041) *
              C583 +
          ((C36806 * C2302 +
            ((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C50773 *
                C2303 +
            ((C36802 + C36803) * C696 + (C36804 + C36805) * C50753) * C50773 *
                C2304) *
               C51041 -
           (((C33361 * C20596 + C50975 * C20598 + C33360 * C3154 +
              C33358 * C3159) *
                 C50753 +
             (C33361 * C20595 + C50975 * C20597 + C33360 * C3147 +
              C33358 * C3155) *
                 C696) *
                C50773 * C2304 +
            ((C36990 + C36989) * C50753 + (C36988 + C36987) * C696) * C50773 *
                C2303 +
            C36996 * C2302) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
            C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
               C283 +
           (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
            C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
               C278 -
           (C38961 * C1168 + C38957 * C1175 + C38960 * C945 + C38956 * C951 +
            C38959 * C434 + C38955 * C440 + C38958 * C123 + C38954 * C131) *
               C284 -
           (C38961 * C1174 + C38957 * C1180 + C38960 * C952 + C38956 * C960 +
            C38959 * C443 + C38955 * C453 + C38958 * C132 + C38954 * C144) *
               C279 +
           (C38958 * C124 + C38954 * C133 + C38959 * C436 + C38955 * C444 +
            C38960 * C946 + C38956 * C953 + C38961 * C1167 + C38957 * C1173) *
               C285 +
           (C38958 * C134 + C38954 * C145 + C38959 * C445 + C38955 * C454 +
            C38960 * C954 + C38956 * C961 + C38961 * C1172 + C38957 * C1179) *
               C280) *
              C50773 * C50900 * C51041 +
          ((C38958 * C434 + C38954 * C440 + C38959 * C945 + C38955 * C951 +
            C38960 * C1168 + C38956 * C1175 + C38961 * C6287 + C38957 * C6291) *
               C284 -
           ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 + C38956 * C1181 +
             C38959 * C950 + C38955 * C959 + C38958 * C441 + C38954 * C452) *
                C278 +
            (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 + C38956 * C1177 +
             C38959 * C944 + C38955 * C949 + C38958 * C435 + C38954 * C442) *
                C283) +
           (C38958 * C443 + C38954 * C453 + C38959 * C952 + C38955 * C960 +
            C38960 * C1174 + C38956 * C1180 + C38961 * C6292 + C38957 * C6296) *
               C279 -
           (C38961 * C6288 + C38957 * C6293 + C38960 * C1167 + C38956 * C1173 +
            C38959 * C946 + C38955 * C953 + C38958 * C436 + C38954 * C444) *
               C285 -
           (C38961 * C6294 + C38957 * C6297 + C38960 * C1172 + C38956 * C1179 +
            C38959 * C954 + C38955 * C961 + C38958 * C445 + C38954 * C454) *
               C280) *
              C50773 * C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C435 + C38955 * C442 +
             C38960 * C944 + C38956 * C949 + C38961 * C1169 + C38957 * C1177) *
                C696 +
            (C38958 * C130 + C38954 * C143 + C38959 * C441 + C38955 * C452 +
             C38960 * C950 + C38956 * C959 + C38961 * C1176 + C38957 * C1181) *
                C50753) *
               C50773 * C50900 * C51041 -
           ((C38961 * C6290 + C38957 * C6295 + C38960 * C1176 + C38956 * C1181 +
             C38959 * C950 + C38955 * C959 + C38958 * C441 + C38954 * C452) *
                C50753 +
            (C38961 * C6286 + C38957 * C6289 + C38960 * C1169 + C38956 * C1177 +
             C38959 * C944 + C38955 * C949 + C38958 * C435 + C38954 * C442) *
                C696) *
               C50773 * C50900 * C50853) *
              C582 +
          (((C38958 * C811 + C38954 * C819 + C38959 * C1083 + C38955 * C1091 +
             C38960 * C3646 + C38956 * C3654 + C38961 * C6463 +
             C38957 * C6467) *
                C696 +
            (C38958 * C820 + C38954 * C835 + C38959 * C1090 + C38955 * C1095 +
             C38960 * C3653 + C38956 * C3658 + C38961 * C6466 +
             C38957 * C6469) *
                C50753) *
               C50773 * C50900 * C50853 -
           ((C38961 * C3653 + C38957 * C3658 + C38960 * C1090 + C38956 * C1095 +
             C38959 * C820 + C38955 * C835 + C38958 * C293 + C38954 * C304) *
                C50753 +
            (C38961 * C3646 + C38957 * C3654 + C38960 * C1083 + C38956 * C1091 +
             C38959 * C811 + C38955 * C819 + C38958 * C287 + C38954 * C294) *
                C696) *
               C50773 * C50900 * C51041) *
              C583 +
          (((C38958 * C587 + C38954 * C592 + C38959 * C818 + C38955 * C834 +
             C38960 * C3347 + C38956 * C3350 + C38961 * C3644 +
             C38957 * C3650) *
                C696 +
            (C38958 * C593 + C38954 * C602 + C38959 * C833 + C38955 * C842 +
             C38960 * C3351 + C38956 * C3356 + C38961 * C3649 +
             C38957 * C3656) *
                C50753) *
               C50773 * C50900 * C51041 -
           ((C38961 * C22841 + C38957 * C22843 + C38960 * C3649 +
             C38956 * C3656 + C38959 * C3351 + C38955 * C3356 + C38958 * C833 +
             C38954 * C842) *
                C50753 +
            (C38961 * C22840 + C38957 * C22842 + C38960 * C3644 +
             C38956 * C3650 + C38959 * C3347 + C38955 * C3350 + C38958 * C818 +
             C38954 * C834) *
                C696) *
               C50773 * C50900 * C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C1285 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C51083 -
                     (C44321 + C44322 + C44323) * C1286 -
                     (C44324 + C44325 + C44326) * C51067 +
                     (C44327 + C44328 + C44329) * C1287 +
                     (C44330 + C44331 + C44332) * C1282) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C1285 +
                     (C44326 + C44325 + C44324) * C51083 -
                     (C44329 + C44328 + C44327) * C1286 -
                     (C44332 + C44331 + C44330) * C51067 +
                     (C44335 + C44334 + C44333) * C1287 +
                     (C44338 + C44337 + C44336) * C1282) *
                        C50778) *
                       C50900 * C50841 * C1283 +
                   (((C44509 + C44510 + C44511) * C1286 -
                     ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                       C51091 * C835 + C44281 * C293 + C51090 * C304) *
                          C51083 +
                      (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                       C51091 * C819 + C44281 * C287 + C51090 * C294) *
                          C1285) +
                     (C44512 + C44513 + C44514) * C51067 -
                     (C44515 + C44516 + C44517) * C1287 -
                     (C44518 + C44519 + C44520) * C1282) *
                        C51034 +
                    ((C44517 + C44516 + C44515) * C1286 -
                     ((C44514 + C44513 + C44512) * C51083 +
                      (C44511 + C44510 + C44509) * C1285) +
                     (C44520 + C44519 + C44518) * C51067 -
                     (C44283 * C1080 + C44280 * C1085 + C44282 * C814 +
                      C51091 * C825 + C44281 * C289 + C51090 * C298) *
                         C1287 -
                     (C44283 * C1084 + C44280 * C1092 + C44282 * C826 +
                      C51091 * C838 + C44281 * C299 + C51090 * C307) *
                         C1282) *
                        C50778) *
                       C50900 * C50841 * C50829)) /
                 (p * q * std::sqrt(p + q));
    d2ee[196] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C1391 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C1386 -
                     (C44321 + C44322 + C44323) * C1392 -
                     (C44324 + C44325 + C44326) * C50758) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C1391 +
                     (C44326 + C44325 + C44324) * C1386 -
                     (C44329 + C44328 + C44327) * C1392 -
                     (C44332 + C44331 + C44330) * C50758) *
                        C50778) *
                       C50900 * C50841 * C51086 +
                   (((C44509 + C44510 + C44511) * C1392 -
                     ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                       C51091 * C835 + C44281 * C293 + C51090 * C304) *
                          C1386 +
                      (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                       C51091 * C819 + C44281 * C287 + C51090 * C294) *
                          C1391) +
                     (C44512 + C44513 + C44514) * C50758) *
                        C51034 +
                    ((C44517 + C44516 + C44515) * C1392 -
                     ((C44514 + C44513 + C44512) * C1386 +
                      (C44511 + C44510 + C44509) * C1391) +
                     (C44520 + C44519 + C44518) * C50758) *
                        C50778) *
                       C50900 * C50841 * C51073 +
                   (((C44281 * C587 + C51090 * C592 + C44282 * C818 +
                      C51091 * C834 + C44283 * C3347 + C44280 * C3350) *
                         C1391 +
                     (C44281 * C593 + C51090 * C602 + C44282 * C833 +
                      C51091 * C842 + C44283 * C3351 + C44280 * C3356) *
                         C1386 -
                     (C44861 + C44862 + C44863) * C1392 -
                     (C44864 + C44865 + C44866) * C50758) *
                        C51034 +
                    ((C44863 + C44862 + C44861) * C1391 +
                     (C44866 + C44865 + C44864) * C1386 -
                     (C44283 * C3349 + C44280 * C3354 + C44282 * C816 +
                      C51091 * C830 + C44281 * C589 + C51090 * C596) *
                         C1392 -
                     (C44283 * C3355 + C44280 * C3358 + C44282 * C829 +
                      C51091 * C840 + C44281 * C597 + C51090 * C604) *
                         C50758) *
                        C50778) *
                       C50900 * C50841 * C1390)) /
                 (p * q * std::sqrt(p + q));
    d2ee[197] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C1391 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C1386 -
                      (C44321 + C44322 + C44323) * C1392 -
                      (C44324 + C44325 + C44326) * C50758) *
                         C51034 +
                     ((C44323 + C44322 + C44321) * C1391 +
                      (C44326 + C44325 + C44324) * C1386 -
                      (C44329 + C44328 + C44327) * C1392 -
                      (C44332 + C44331 + C44330) * C50758) *
                         C50778) *
                        C50900 * C51041 +
                    (((C44691 + C44692 + C44693) * C1392 -
                      ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                        C51091 * C959 + C44281 * C441 + C51090 * C452) *
                           C1386 +
                       (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                        C51091 * C949 + C44281 * C435 + C51090 * C442) *
                           C1391) +
                      (C44694 + C44695 + C44696) * C50758) *
                         C51034 +
                     ((C44699 + C44698 + C44697) * C1392 -
                      ((C44696 + C44695 + C44694) * C1386 +
                       (C44693 + C44692 + C44691) * C1391) +
                      (C44702 + C44701 + C44700) * C50758) *
                         C50778) *
                        C50900 * C50853) *
                       C1283 +
                   ((((C44509 + C44510 + C44511) * C1392 -
                      ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                        C51091 * C835 + C44281 * C293 + C51090 * C304) *
                           C1386 +
                       (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                        C51091 * C819 + C44281 * C287 + C51090 * C294) *
                           C1391) +
                      (C44512 + C44513 + C44514) * C50758) *
                         C51034 +
                     ((C44517 + C44516 + C44515) * C1392 -
                      ((C44514 + C44513 + C44512) * C1386 +
                       (C44511 + C44510 + C44509) * C1391) +
                      (C44520 + C44519 + C44518) * C50758) *
                         C50778) *
                        C50900 * C51041 +
                    (((C44281 * C811 + C51090 * C819 + C44282 * C1083 +
                       C51091 * C1091 + C44283 * C3646 + C44280 * C3654) *
                          C1391 +
                      (C44281 * C820 + C51090 * C835 + C44282 * C1090 +
                       C51091 * C1095 + C44283 * C3653 + C44280 * C3658) *
                          C1386 -
                      (C46017 + C46018 + C46019) * C1392 -
                      (C46020 + C46021 + C46022) * C50758) *
                         C51034 +
                     ((C46019 + C46018 + C46017) * C1391 +
                      (C46022 + C46021 + C46020) * C1386 -
                      (C44283 * C7062 + C44280 * C7063 + C44282 * C1081 +
                       C51091 * C1087 + C44281 * C813 + C51090 * C823) *
                          C1392 -
                      (C44283 * C7064 + C44280 * C7065 + C44282 * C1086 +
                       C51091 * C1093 + C44281 * C824 + C51090 * C837) *
                          C50758) *
                         C50778) *
                        C50900 * C50853) *
                       C50829)) /
                 (p * q * std::sqrt(p + q));
    d2ee[198] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C49770 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C51025 -
                      (C44321 + C44322 + C44323) * C49763 -
                      (C44324 + C44325 + C44326) * C50758) *
                         C51034 +
                     ((C44323 + C44322 + C44321) * C49770 +
                      (C44326 + C44325 + C44324) * C51025 -
                      (C44329 + C44328 + C44327) * C49763 -
                      (C44332 + C44331 + C44330) * C50758) *
                         C50778) *
                        C50900 * C1643 +
                    (((C44691 + C44692 + C44693) * C49763 -
                      ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                        C51091 * C959 + C44281 * C441 + C51090 * C452) *
                           C51025 +
                       (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                        C51091 * C949 + C44281 * C435 + C51090 * C442) *
                           C49770) +
                      (C44694 + C44695 + C44696) * C50758) *
                         C51034 +
                     ((C44699 + C44698 + C44697) * C49763 -
                      ((C44696 + C44695 + C44694) * C51025 +
                       (C44693 + C44692 + C44691) * C49770) +
                      (C44702 + C44701 + C44700) * C50758) *
                         C50778) *
                        C50900 * C50853) *
                       C1283 +
                   ((((C44509 + C44510 + C44511) * C49763 -
                      ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                        C51091 * C835 + C44281 * C293 + C51090 * C304) *
                           C51025 +
                       (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                        C51091 * C819 + C44281 * C287 + C51090 * C294) *
                           C49770) +
                      (C44512 + C44513 + C44514) * C50758) *
                         C51034 +
                     ((C44517 + C44516 + C44515) * C49763 -
                      ((C44514 + C44513 + C44512) * C51025 +
                       (C44511 + C44510 + C44509) * C49770) +
                      (C44520 + C44519 + C44518) * C50758) *
                         C50778) *
                        C50900 * C1643 +
                    (((C44281 * C811 + C51090 * C819 + C44282 * C1083 +
                       C51091 * C1091 + C44283 * C3646 + C44280 * C3654) *
                          C49770 +
                      (C44281 * C820 + C51090 * C835 + C44282 * C1090 +
                       C51091 * C1095 + C44283 * C3653 + C44280 * C3658) *
                          C51025 -
                      (C46017 + C46018 + C46019) * C49763 -
                      (C46020 + C46021 + C46022) * C50758) *
                         C51034 +
                     ((C46019 + C46018 + C46017) * C49770 +
                      (C46022 + C46021 + C46020) * C51025 -
                      (C44283 * C7062 + C44280 * C7063 + C44282 * C1081 +
                       C51091 * C1087 + C44281 * C813 + C51090 * C823) *
                          C49763 -
                      (C44283 * C7064 + C44280 * C7065 + C44282 * C1086 +
                       C51091 * C1093 + C44281 * C824 + C51090 * C837) *
                          C50758) *
                         C50778) *
                        C50900 * C50853) *
                       C50829)) /
                 (p * q * std::sqrt(p + q));
    d2ee[199] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C696 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C50753) *
                         C51034 +
                     ((C44323 + C44322 + C44321) * C696 +
                      (C44326 + C44325 + C44324) * C50753) *
                         C50778) *
                        C50900 * C1643 -
                    (((C44696 + C44695 + C44694) * C50753 +
                      (C44693 + C44692 + C44691) * C696) *
                         C50778 +
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C50753 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C696) *
                         C51034) *
                        C50900 * C50853) *
                       C51086 +
                   ((((C44281 * C811 + C51090 * C819 + C44282 * C1083 +
                       C51091 * C1091 + C44283 * C3646 + C44280 * C3654) *
                          C696 +
                      (C44281 * C820 + C51090 * C835 + C44282 * C1090 +
                       C51091 * C1095 + C44283 * C3653 + C44280 * C3658) *
                          C50753) *
                         C51034 +
                     ((C46019 + C46018 + C46017) * C696 +
                      (C46022 + C46021 + C46020) * C50753) *
                         C50778) *
                        C50900 * C50853 -
                    (((C44514 + C44513 + C44512) * C50753 +
                      (C44511 + C44510 + C44509) * C696) *
                         C50778 +
                     ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                       C51091 * C835 + C44281 * C293 + C51090 * C304) *
                          C50753 +
                      (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                       C51091 * C819 + C44281 * C287 + C51090 * C294) *
                          C696) *
                         C51034) *
                        C50900 * C1643) *
                       C51073 +
                   ((((C44281 * C587 + C51090 * C592 + C44282 * C818 +
                       C51091 * C834 + C44283 * C3347 + C44280 * C3350) *
                          C696 +
                      (C44281 * C593 + C51090 * C602 + C44282 * C833 +
                       C51091 * C842 + C44283 * C3351 + C44280 * C3356) *
                          C50753) *
                         C51034 +
                     ((C44863 + C44862 + C44861) * C696 +
                      (C44866 + C44865 + C44864) * C50753) *
                         C50778) *
                        C50900 * C1643 -
                    (((C44283 * C3647 + C44280 * C3655 + C44282 * C3353 +
                       C51091 * C3357 + C44281 * C831 + C51090 * C841) *
                          C50753 +
                      (C44283 * C3643 + C44280 * C3648 + C44282 * C3348 +
                       C51091 * C3352 + C44281 * C817 + C51090 * C832) *
                          C696) *
                         C50778 +
                     ((C44283 * C3649 + C44280 * C3656 + C44282 * C3351 +
                       C51091 * C3356 + C44281 * C833 + C51090 * C842) *
                          C50753 +
                      (C44283 * C3644 + C44280 * C3650 + C44282 * C3347 +
                       C51091 * C3350 + C44281 * C818 + C51090 * C834) *
                          C696) *
                         C51034) *
                        C50900 * C50853) *
                       C1390)) /
                 (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C696 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C50753) *
                         C51034 +
                     ((C44323 + C44322 + C44321) * C696 +
                      (C44326 + C44325 + C44324) * C50753) *
                         C50778) *
                        C50900 * C51087 -
                    (((C44696 + C44695 + C44694) * C50753 +
                      (C44693 + C44692 + C44691) * C696) *
                         C50778 +
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C50753 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C696) *
                         C51034) *
                        C50900 * C51076 +
                    (((C44281 * C944 + C51090 * C949 + C44282 * C1169 +
                       C51091 * C1177 + C44283 * C6286 + C44280 * C6289) *
                          C696 +
                      (C44281 * C950 + C51090 * C959 + C44282 * C1176 +
                       C51091 * C1181 + C44283 * C6290 + C44280 * C6295) *
                          C50753) *
                         C51034 +
                     ((C45271 + C45270 + C45269) * C696 +
                      (C45274 + C45273 + C45272) * C50753) *
                         C50778) *
                        C50900 * C1875) *
                       C1283 +
                   ((((C44281 * C811 + C51090 * C819 + C44282 * C1083 +
                       C51091 * C1091 + C44283 * C3646 + C44280 * C3654) *
                          C696 +
                      (C44281 * C820 + C51090 * C835 + C44282 * C1090 +
                       C51091 * C1095 + C44283 * C3653 + C44280 * C3658) *
                          C50753) *
                         C51034 +
                     ((C46019 + C46018 + C46017) * C696 +
                      (C46022 + C46021 + C46020) * C50753) *
                         C50778) *
                        C50900 * C51076 -
                    (((C44514 + C44513 + C44512) * C50753 +
                      (C44511 + C44510 + C44509) * C696) *
                         C50778 +
                     ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                       C51091 * C835 + C44281 * C293 + C51090 * C304) *
                          C50753 +
                      (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                       C51091 * C819 + C44281 * C287 + C51090 * C294) *
                          C696) *
                         C51034) *
                        C50900 * C51087 -
                    (((C44283 * C6464 + C44280 * C6468 + C44282 * C3651 +
                       C51091 * C3657 + C44281 * C1088 + C51090 * C1094) *
                          C50753 +
                      (C44283 * C6462 + C44280 * C6465 + C44282 * C3645 +
                       C51091 * C3652 + C44281 * C1082 + C51090 * C1089) *
                          C696) *
                         C50778 +
                     ((C44283 * C6466 + C44280 * C6469 + C44282 * C3653 +
                       C51091 * C3658 + C44281 * C1090 + C51090 * C1095) *
                          C50753 +
                      (C44283 * C6463 + C44280 * C6467 + C44282 * C3646 +
                       C51091 * C3654 + C44281 * C1083 + C51090 * C1091) *
                          C696) *
                         C51034) *
                        C50900 * C1875) *
                       C50829)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C49770 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C51025 -
                     (C44321 + C44322 + C44323) * C49763 -
                     (C44324 + C44325 + C44326) * C50758) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C49770 +
                     (C44326 + C44325 + C44324) * C51025 -
                     (C44329 + C44328 + C44327) * C49763 -
                     (C44332 + C44331 + C44330) * C50758) *
                        C50778) *
                       C50900 * C50841 * C582 +
                   (((C44509 + C44510 + C44511) * C49763 -
                     ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                       C51091 * C835 + C44281 * C293 + C51090 * C304) *
                          C51025 +
                      (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                       C51091 * C819 + C44281 * C287 + C51090 * C294) *
                          C49770) +
                     (C44512 + C44513 + C44514) * C50758) *
                        C51034 +
                    ((C44517 + C44516 + C44515) * C49763 -
                     ((C44514 + C44513 + C44512) * C51025 +
                      (C44511 + C44510 + C44509) * C49770) +
                     (C44520 + C44519 + C44518) * C50758) *
                        C50778) *
                       C50900 * C50841 * C583 +
                   (((C44281 * C587 + C51090 * C592 + C44282 * C818 +
                      C51091 * C834 + C44283 * C3347 + C44280 * C3350) *
                         C49770 +
                     (C44281 * C593 + C51090 * C602 + C44282 * C833 +
                      C51091 * C842 + C44283 * C3351 + C44280 * C3356) *
                         C51025 -
                     (C44861 + C44862 + C44863) * C49763 -
                     (C44864 + C44865 + C44866) * C50758) *
                        C51034 +
                    ((C44863 + C44862 + C44861) * C49770 +
                     (C44866 + C44865 + C44864) * C51025 -
                     (C44283 * C3349 + C44280 * C3354 + C44282 * C816 +
                      C51091 * C830 + C44281 * C589 + C51090 * C596) *
                         C49763 -
                     (C44283 * C3355 + C44280 * C3358 + C44282 * C829 +
                      C51091 * C840 + C44281 * C597 + C51090 * C604) *
                         C50758) *
                        C50778) *
                       C50900 * C50841 * C584)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                     C51091 * C442 + C44283 * C944 + C44280 * C949) *
                        C118 +
                    (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                     C51091 * C452 + C44283 * C950 + C44280 * C959) *
                        C106 -
                    (C44321 + C44322 + C44323) * C119 -
                    (C44324 + C44325 + C44326) * C107 +
                    (C44327 + C44328 + C44329) * C120 +
                    (C44330 + C44331 + C44332) * C108 -
                    (C44333 + C44334 + C44335) * C121 -
                    (C44336 + C44337 + C44338) * C109) *
                       C51034 +
                   ((C44323 + C44322 + C44321) * C118 +
                    (C44326 + C44325 + C44324) * C106 -
                    (C44329 + C44328 + C44327) * C119 -
                    (C44332 + C44331 + C44330) * C107 +
                    (C44335 + C44334 + C44333) * C120 +
                    (C44338 + C44337 + C44336) * C108 -
                    (C44283 * C948 + C44280 * C957 + C44282 * C438 +
                     C51091 * C448 + C44281 * C126 + C51090 * C137) *
                        C121 -
                    (C44283 * C958 + C44280 * C963 + C44282 * C449 +
                     C51091 * C456 + C44281 * C138 + C51090 * C147) *
                        C109) *
                       C50778) *
                  C50900 * C50841 * C50815) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C49770 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C51025 -
                     (C44321 + C44322 + C44323) * C49763 -
                     (C44324 + C44325 + C44326) * C50758) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C49770 +
                     (C44326 + C44325 + C44324) * C51025 -
                     (C44329 + C44328 + C44327) * C49763 -
                     (C44332 + C44331 + C44330) * C50758) *
                        C50778) *
                       C50900 * C941 +
                   (((C44691 + C44692 + C44693) * C49763 -
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C51025 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C49770) +
                     (C44694 + C44695 + C44696) * C50758) *
                        C51034 +
                    ((C44699 + C44698 + C44697) * C49763 -
                     ((C44696 + C44695 + C44694) * C51025 +
                      (C44693 + C44692 + C44691) * C49770) +
                     (C44702 + C44701 + C44700) * C50758) *
                        C50778) *
                       C50900 * C942 +
                   (((C44281 * C944 + C51090 * C949 + C44282 * C1169 +
                      C51091 * C1177 + C44283 * C6286 + C44280 * C6289) *
                         C49770 +
                     (C44281 * C950 + C51090 * C959 + C44282 * C1176 +
                      C51091 * C1181 + C44283 * C6290 + C44280 * C6295) *
                         C51025 -
                     (C45269 + C45270 + C45271) * C49763 -
                     (C45272 + C45273 + C45274) * C50758) *
                        C51034 +
                    ((C45271 + C45270 + C45269) * C49770 +
                     (C45274 + C45273 + C45272) * C51025 -
                     (C44283 * C6288 + C44280 * C6293 + C44282 * C1167 +
                      C51091 * C1173 + C44281 * C946 + C51090 * C953) *
                         C49763 -
                     (C44283 * C6294 + C44280 * C6297 + C44282 * C1172 +
                      C51091 * C1179 + C44281 * C954 + C51090 * C961) *
                         C50758) *
                        C50778) *
                       C50900 * C943) *
                  C50815) /
                     (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C696 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C50753) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C696 +
                     (C44326 + C44325 + C44324) * C50753) *
                        C50778) *
                       C50900 * C50841 * C692 -
                   (((C44514 + C44513 + C44512) * C50753 +
                     (C44511 + C44510 + C44509) * C696) *
                        C50778 +
                    ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                      C51091 * C835 + C44281 * C293 + C51090 * C304) *
                         C50753 +
                     (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                      C51091 * C819 + C44281 * C287 + C51090 * C294) *
                         C696) *
                        C51034) *
                       C50900 * C50841 * C693 +
                   (((C44281 * C587 + C51090 * C592 + C44282 * C818 +
                      C51091 * C834 + C44283 * C3347 + C44280 * C3350) *
                         C696 +
                     (C44281 * C593 + C51090 * C602 + C44282 * C833 +
                      C51091 * C842 + C44283 * C3351 + C44280 * C3356) *
                         C50753) *
                        C51034 +
                    ((C44863 + C44862 + C44861) * C696 +
                     (C44866 + C44865 + C44864) * C50753) *
                        C50778) *
                       C50900 * C50841 * C694 -
                   (((C44283 * C3519 + C44280 * C3523 + C44282 * C3151 +
                      C51091 * C3157 + C44281 * C705 + C51090 * C711) *
                         C50753 +
                     (C44283 * C3517 + C44280 * C3520 + C44282 * C3145 +
                      C51091 * C3150 + C44281 * C699 + C51090 * C706) *
                         C696) *
                        C50778 +
                    ((C44283 * C3521 + C44280 * C3524 + C44282 * C3149 +
                      C51091 * C3156 + C44281 * C707 + C51090 * C712) *
                         C50753 +
                     (C44283 * C3518 + C44280 * C3522 + C44282 * C3144 +
                      C51091 * C3148 + C44281 * C700 + C51090 * C708) *
                         C696) *
                        C51034) *
                       C50900 * C50841 * C695)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C283 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C279 +
                     (C44327 + C44328 + C44329) * C285 +
                     (C44330 + C44331 + C44332) * C280) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C283 +
                     (C44326 + C44325 + C44324) * C278 -
                     (C44329 + C44328 + C44327) * C284 -
                     (C44332 + C44331 + C44330) * C279 +
                     (C44335 + C44334 + C44333) * C285 +
                     (C44338 + C44337 + C44336) * C280) *
                        C50778) *
                       C50900 * C50841 * C51040 +
                   (((C44509 + C44510 + C44511) * C284 -
                     ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                       C51091 * C835 + C44281 * C293 + C51090 * C304) *
                          C278 +
                      (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                       C51091 * C819 + C44281 * C287 + C51090 * C294) *
                          C283) +
                     (C44512 + C44513 + C44514) * C279 -
                     (C44515 + C44516 + C44517) * C285 -
                     (C44518 + C44519 + C44520) * C280) *
                        C51034 +
                    ((C44517 + C44516 + C44515) * C284 -
                     ((C44514 + C44513 + C44512) * C278 +
                      (C44511 + C44510 + C44509) * C283) +
                     (C44520 + C44519 + C44518) * C279 -
                     (C44283 * C1080 + C44280 * C1085 + C44282 * C814 +
                      C51091 * C825 + C44281 * C289 + C51090 * C298) *
                         C285 -
                     (C44283 * C1084 + C44280 * C1092 + C44282 * C826 +
                      C51091 * C838 + C44281 * C299 + C51090 * C307) *
                         C280) *
                        C50778) *
                       C50900 * C50841 * C50829)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C696 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C50753) *
                         C51034 +
                     ((C44323 + C44322 + C44321) * C696 +
                      (C44326 + C44325 + C44324) * C50753) *
                         C50778) *
                        C50900 * C941 -
                    (((C44696 + C44695 + C44694) * C50753 +
                      (C44693 + C44692 + C44691) * C696) *
                         C50778 +
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C50753 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C696) *
                         C51034) *
                        C50900 * C942 +
                    (((C44281 * C944 + C51090 * C949 + C44282 * C1169 +
                       C51091 * C1177 + C44283 * C6286 + C44280 * C6289) *
                          C696 +
                      (C44281 * C950 + C51090 * C959 + C44282 * C1176 +
                       C51091 * C1181 + C44283 * C6290 + C44280 * C6295) *
                          C50753) *
                         C51034 +
                     ((C45271 + C45270 + C45269) * C696 +
                      (C45274 + C45273 + C45272) * C50753) *
                         C50778) *
                        C50900 * C943) *
                       C51040 +
                   ((((C44281 * C811 + C51090 * C819 + C44282 * C1083 +
                       C51091 * C1091 + C44283 * C3646 + C44280 * C3654) *
                          C696 +
                      (C44281 * C820 + C51090 * C835 + C44282 * C1090 +
                       C51091 * C1095 + C44283 * C3653 + C44280 * C3658) *
                          C50753) *
                         C51034 +
                     ((C44281 * C812 + C51090 * C821 + C44282 * C1082 +
                       C51091 * C1089 + C44283 * C3645 + C44280 * C3652) *
                          C696 +
                      (C44281 * C822 + C51090 * C836 + C44282 * C1088 +
                       C51091 * C1094 + C44283 * C3651 + C44280 * C3657) *
                          C50753) *
                         C50778) *
                        C50900 * C942 -
                    (((C44514 + C44513 + C44512) * C50753 +
                      (C44511 + C44510 + C44509) * C696) *
                         C50778 +
                     ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                       C51091 * C835 + C44281 * C293 + C51090 * C304) *
                          C50753 +
                      (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                       C51091 * C819 + C44281 * C287 + C51090 * C294) *
                          C696) *
                         C51034) *
                        C50900 * C941 -
                    (((C44283 * C6464 + C44280 * C6468 + C44282 * C3651 +
                       C51091 * C3657 + C44281 * C1088 + C51090 * C1094) *
                          C50753 +
                      (C44283 * C6462 + C44280 * C6465 + C44282 * C3645 +
                       C51091 * C3652 + C44281 * C1082 + C51090 * C1089) *
                          C696) *
                         C50778 +
                     ((C44283 * C6466 + C44280 * C6469 + C44282 * C3653 +
                       C51091 * C3658 + C44281 * C1090 + C51090 * C1095) *
                          C50753 +
                      (C44283 * C6463 + C44280 * C6467 + C44282 * C3646 +
                       C51091 * C3654 + C44281 * C1083 + C51090 * C1091) *
                          C696) *
                         C51034) *
                        C50900 * C943) *
                       C50829)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C696 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C50753) *
                         C51034 +
                     ((C44323 + C44322 + C44321) * C696 +
                      (C44326 + C44325 + C44324) * C50753) *
                         C50778) *
                        C50900 * C51041 -
                    (((C44696 + C44695 + C44694) * C50753 +
                      (C44693 + C44692 + C44691) * C696) *
                         C50778 +
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C50753 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C696) *
                         C51034) *
                        C50900 * C50853) *
                       C582 +
                   ((((C44281 * C811 + C51090 * C819 + C44282 * C1083 +
                       C51091 * C1091 + C44283 * C3646 + C44280 * C3654) *
                          C696 +
                      (C44281 * C820 + C51090 * C835 + C44282 * C1090 +
                       C51091 * C1095 + C44283 * C3653 + C44280 * C3658) *
                          C50753) *
                         C51034 +
                     ((C44281 * C812 + C51090 * C821 + C44282 * C1082 +
                       C51091 * C1089 + C44283 * C3645 + C44280 * C3652) *
                          C696 +
                      (C44281 * C822 + C51090 * C836 + C44282 * C1088 +
                       C51091 * C1094 + C44283 * C3651 + C44280 * C3657) *
                          C50753) *
                         C50778) *
                        C50900 * C50853 -
                    (((C44514 + C44513 + C44512) * C50753 +
                      (C44511 + C44510 + C44509) * C696) *
                         C50778 +
                     ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                       C51091 * C835 + C44281 * C293 + C51090 * C304) *
                          C50753 +
                      (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                       C51091 * C819 + C44281 * C287 + C51090 * C294) *
                          C696) *
                         C51034) *
                        C50900 * C51041) *
                       C583 +
                   ((((C44281 * C587 + C51090 * C592 + C44282 * C818 +
                       C51091 * C834 + C44283 * C3347 + C44280 * C3350) *
                          C696 +
                      (C44281 * C593 + C51090 * C602 + C44282 * C833 +
                       C51091 * C842 + C44283 * C3351 + C44280 * C3356) *
                          C50753) *
                         C51034 +
                     ((C44863 + C44862 + C44861) * C696 +
                      (C44866 + C44865 + C44864) * C50753) *
                         C50778) *
                        C50900 * C51041 -
                    (((C44283 * C3647 + C44280 * C3655 + C44282 * C3353 +
                       C51091 * C3357 + C44281 * C831 + C51090 * C841) *
                          C50753 +
                      (C44283 * C3643 + C44280 * C3648 + C44282 * C3348 +
                       C51091 * C3352 + C44281 * C817 + C51090 * C832) *
                          C696) *
                         C50778 +
                     ((C44283 * C3649 + C44280 * C3656 + C44282 * C3351 +
                       C51091 * C3356 + C44281 * C833 + C51090 * C842) *
                          C50753 +
                      (C44283 * C3644 + C44280 * C3650 + C44282 * C3347 +
                       C51091 * C3350 + C44281 * C818 + C51090 * C834) *
                          C696) *
                         C51034) *
                        C50900 * C50853) *
                       C584)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C283 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C279 +
                     (C44327 + C44328 + C44329) * C285 +
                     (C44330 + C44331 + C44332) * C280) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C283 +
                     (C44326 + C44325 + C44324) * C278 -
                     (C44329 + C44328 + C44327) * C284 -
                     (C44332 + C44331 + C44330) * C279 +
                     (C44335 + C44334 + C44333) * C285 +
                     (C44338 + C44337 + C44336) * C280) *
                        C50778) *
                       C50900 * C51041 +
                   (((C44691 + C44692 + C44693) * C284 -
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C278 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C283) +
                     (C44694 + C44695 + C44696) * C279 -
                     (C44697 + C44698 + C44699) * C285 -
                     (C44700 + C44701 + C44702) * C280) *
                        C51034 +
                    ((C44699 + C44698 + C44697) * C284 -
                     ((C44696 + C44695 + C44694) * C278 +
                      (C44693 + C44692 + C44691) * C283) +
                     (C44702 + C44701 + C44700) * C279 -
                     (C44283 * C1166 + C44280 * C1171 + C44282 * C947 +
                      C51091 * C955 + C44281 * C437 + C51090 * C446) *
                         C285 -
                     (C44283 * C1170 + C44280 * C1178 + C44282 * C956 +
                      C51091 * C962 + C44281 * C447 + C51090 * C455) *
                         C280) *
                        C50778) *
                       C50900 * C50853) *
                  C50815) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C696 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C50753) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C696 +
                     (C44326 + C44325 + C44324) * C50753) *
                        C50778) *
                       C50900 * C1162 -
                   (((C44696 + C44695 + C44694) * C50753 +
                     (C44693 + C44692 + C44691) * C696) *
                        C50778 +
                    ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                      C51091 * C959 + C44281 * C441 + C51090 * C452) *
                         C50753 +
                     (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                      C51091 * C949 + C44281 * C435 + C51090 * C442) *
                         C696) *
                        C51034) *
                       C50900 * C1163 +
                   (((C44281 * C944 + C51090 * C949 + C44282 * C1169 +
                      C51091 * C1177 + C44283 * C6286 + C44280 * C6289) *
                         C696 +
                     (C44281 * C950 + C51090 * C959 + C44282 * C1176 +
                      C51091 * C1181 + C44283 * C6290 + C44280 * C6295) *
                         C50753) *
                        C51034 +
                    ((C45271 + C45270 + C45269) * C696 +
                     (C45274 + C45273 + C45272) * C50753) *
                        C50778) *
                       C50900 * C1164 -
                   (((C44283 * C6570 + C44280 * C6574 + C44282 * C6292 +
                      C51091 * C6296 + C44281 * C1174 + C51090 * C1180) *
                         C50753 +
                     (C44283 * C6568 + C44280 * C6571 + C44282 * C6287 +
                      C51091 * C6291 + C44281 * C1168 + C51090 * C1175) *
                         C696) *
                        C50778 +
                    ((C44283 * C6572 + C44280 * C6575 + C44282 * C6290 +
                      C51091 * C6295 + C44281 * C1176 + C51090 * C1181) *
                         C50753 +
                     (C44283 * C6569 + C44280 * C6573 + C44282 * C6286 +
                      C51091 * C6289 + C44281 * C1169 + C51090 * C1177) *
                         C696) *
                        C51034) *
                       C50900 * C1165) *
                  C50815) /
                     (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C1285 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C51083 -
                     (C44321 + C44322 + C44323) * C1286 -
                     (C44324 + C44325 + C44326) * C51067 +
                     (C44327 + C44328 + C44329) * C1287 +
                     (C44330 + C44331 + C44332) * C1282) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C1285 +
                     (C44326 + C44325 + C44324) * C51083 -
                     (C44329 + C44328 + C44327) * C1286 -
                     (C44332 + C44331 + C44330) * C51067 +
                     (C44335 + C44334 + C44333) * C1287 +
                     (C44338 + C44337 + C44336) * C1282) *
                        C50778) *
                       C50900 * C1643 +
                   (((C44691 + C44692 + C44693) * C1286 -
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C51083 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C1285) +
                     (C44694 + C44695 + C44696) * C51067 -
                     (C44697 + C44698 + C44699) * C1287 -
                     (C44700 + C44701 + C44702) * C1282) *
                        C51034 +
                    ((C44699 + C44698 + C44697) * C1286 -
                     ((C44696 + C44695 + C44694) * C51083 +
                      (C44693 + C44692 + C44691) * C1285) +
                     (C44702 + C44701 + C44700) * C51067 -
                     (C44283 * C1166 + C44280 * C1171 + C44282 * C947 +
                      C51091 * C955 + C44281 * C437 + C51090 * C446) *
                         C1287 -
                     (C44283 * C1170 + C44280 * C1178 + C44282 * C956 +
                      C51091 * C962 + C44281 * C447 + C51090 * C455) *
                         C1282) *
                        C50778) *
                       C50900 * C50853) *
                  C50815) /
                 (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C1391 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C1386 -
                      (C44321 + C44322 + C44323) * C1392 -
                      (C44324 + C44325 + C44326) * C50758) *
                         C51034 +
                     ((C44323 + C44322 + C44321) * C1391 +
                      (C44326 + C44325 + C44324) * C1386 -
                      (C44329 + C44328 + C44327) * C1392 -
                      (C44332 + C44331 + C44330) * C50758) *
                         C50778) *
                        C50900 * C1643 +
                    (((C44691 + C44692 + C44693) * C1392 -
                      ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                        C51091 * C959 + C44281 * C441 + C51090 * C452) *
                           C1386 +
                       (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                        C51091 * C949 + C44281 * C435 + C51090 * C442) *
                           C1391) +
                      (C44694 + C44695 + C44696) * C50758) *
                         C51034 +
                     ((C44699 + C44698 + C44697) * C1392 -
                      ((C44696 + C44695 + C44694) * C1386 +
                       (C44693 + C44692 + C44691) * C1391) +
                      (C44702 + C44701 + C44700) * C50758) *
                         C50778) *
                        C50900 * C50853) *
                       C51040 +
                   ((((C44509 + C44510 + C44511) * C1392 -
                      ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                        C51091 * C835 + C44281 * C293 + C51090 * C304) *
                           C1386 +
                       (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                        C51091 * C819 + C44281 * C287 + C51090 * C294) *
                           C1391) +
                      (C44512 + C44513 + C44514) * C50758) *
                         C51034 +
                     ((C44517 + C44516 + C44515) * C1392 -
                      ((C44514 + C44513 + C44512) * C1386 +
                       (C44511 + C44510 + C44509) * C1391) +
                      (C44520 + C44519 + C44518) * C50758) *
                         C50778) *
                        C50900 * C1643 +
                    (((C44281 * C811 + C51090 * C819 + C44282 * C1083 +
                       C51091 * C1091 + C44283 * C3646 + C44280 * C3654) *
                          C1391 +
                      (C44281 * C820 + C51090 * C835 + C44282 * C1090 +
                       C51091 * C1095 + C44283 * C3653 + C44280 * C3658) *
                          C1386 -
                      (C46017 + C46018 + C46019) * C1392 -
                      (C46020 + C46021 + C46022) * C50758) *
                         C51034 +
                     ((C46019 + C46018 + C46017) * C1391 +
                      (C46022 + C46021 + C46020) * C1386 -
                      (C44283 * C7062 + C44280 * C7063 + C44282 * C1081 +
                       C51091 * C1087 + C44281 * C813 + C51090 * C823) *
                          C1392 -
                      (C44283 * C7064 + C44280 * C7065 + C44282 * C1086 +
                       C51091 * C1093 + C44281 * C824 + C51090 * C837) *
                          C50758) *
                         C50778) *
                        C50900 * C50853) *
                       C50829)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C1391 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C1386 -
                     (C44321 + C44322 + C44323) * C1392 -
                     (C44324 + C44325 + C44326) * C50758) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C1391 +
                     (C44326 + C44325 + C44324) * C1386 -
                     (C44329 + C44328 + C44327) * C1392 -
                     (C44332 + C44331 + C44330) * C50758) *
                        C50778) *
                       C50900 * C51087 +
                   (((C44691 + C44692 + C44693) * C1392 -
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C1386 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C1391) +
                     (C44694 + C44695 + C44696) * C50758) *
                        C51034 +
                    ((C44699 + C44698 + C44697) * C1392 -
                     ((C44696 + C44695 + C44694) * C1386 +
                      (C44693 + C44692 + C44691) * C1391) +
                     (C44702 + C44701 + C44700) * C50758) *
                        C50778) *
                       C50900 * C51076 +
                   (((C44281 * C944 + C51090 * C949 + C44282 * C1169 +
                      C51091 * C1177 + C44283 * C6286 + C44280 * C6289) *
                         C1391 +
                     (C44281 * C950 + C51090 * C959 + C44282 * C1176 +
                      C51091 * C1181 + C44283 * C6290 + C44280 * C6295) *
                         C1386 -
                     (C45269 + C45270 + C45271) * C1392 -
                     (C45272 + C45273 + C45274) * C50758) *
                        C51034 +
                    ((C45271 + C45270 + C45269) * C1391 +
                     (C45274 + C45273 + C45272) * C1386 -
                     (C44283 * C6288 + C44280 * C6293 + C44282 * C1167 +
                      C51091 * C1173 + C44281 * C946 + C51090 * C953) *
                         C1392 -
                     (C44283 * C6294 + C44280 * C6297 + C44282 * C1172 +
                      C51091 * C1179 + C44281 * C954 + C51090 * C961) *
                         C50758) *
                        C50778) *
                       C50900 * C1875) *
                  C50815) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                     C51091 * C442 + C44283 * C944 + C44280 * C949) *
                        C118 +
                    (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                     C51091 * C452 + C44283 * C950 + C44280 * C959) *
                        C106 -
                    (C44321 + C44322 + C44323) * C119 -
                    (C44324 + C44325 + C44326) * C107 +
                    (C44327 + C44328 + C44329) * C120 +
                    (C44330 + C44331 + C44332) * C108 -
                    (C44333 + C44334 + C44335) * C121 -
                    (C44336 + C44337 + C44338) * C109) *
                       C51034 +
                   ((C44323 + C44322 + C44321) * C118 +
                    (C44326 + C44325 + C44324) * C106 -
                    (C44329 + C44328 + C44327) * C119 -
                    (C44332 + C44331 + C44330) * C107 +
                    (C44335 + C44334 + C44333) * C120 +
                    (C44338 + C44337 + C44336) * C108 -
                    (C44283 * C948 + C44280 * C957 + C44282 * C438 +
                     C51091 * C448 + C44281 * C126 + C51090 * C137) *
                        C121 -
                    (C44283 * C958 + C44280 * C963 + C44282 * C449 +
                     C51091 * C456 + C44281 * C138 + C51090 * C147) *
                        C109) *
                       C50778) *
                  C50900 * C50841 * C50815) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C49770 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C51025 -
                     (C44321 + C44322 + C44323) * C49763 -
                     (C44324 + C44325 + C44326) * C50758) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C49770 +
                     (C44326 + C44325 + C44324) * C51025 -
                     (C44329 + C44328 + C44327) * C49763 -
                     (C44332 + C44331 + C44330) * C50758) *
                        C50778) *
                       C50900 * C50841 * C582 +
                   (((C44509 + C44510 + C44511) * C49763 -
                     ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                       C51091 * C835 + C44281 * C293 + C51090 * C304) *
                          C51025 +
                      (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                       C51091 * C819 + C44281 * C287 + C51090 * C294) *
                          C49770) +
                     (C44512 + C44513 + C44514) * C50758) *
                        C51034 +
                    ((C44517 + C44516 + C44515) * C49763 -
                     ((C44514 + C44513 + C44512) * C51025 +
                      (C44511 + C44510 + C44509) * C49770) +
                     (C44520 + C44519 + C44518) * C50758) *
                        C50778) *
                       C50900 * C50841 * C583 +
                   (((C44281 * C587 + C51090 * C592 + C44282 * C818 +
                      C51091 * C834 + C44283 * C3347 + C44280 * C3350) *
                         C49770 +
                     (C44281 * C593 + C51090 * C602 + C44282 * C833 +
                      C51091 * C842 + C44283 * C3351 + C44280 * C3356) *
                         C51025 -
                     (C44861 + C44862 + C44863) * C49763 -
                     (C44864 + C44865 + C44866) * C50758) *
                        C51034 +
                    ((C44863 + C44862 + C44861) * C49770 +
                     (C44866 + C44865 + C44864) * C51025 -
                     (C44283 * C3349 + C44280 * C3354 + C44282 * C816 +
                      C51091 * C830 + C44281 * C589 + C51090 * C596) *
                         C49763 -
                     (C44283 * C3355 + C44280 * C3358 + C44282 * C829 +
                      C51091 * C840 + C44281 * C597 + C51090 * C604) *
                         C50758) *
                        C50778) *
                       C50900 * C50841 * C584)) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C283 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C279 +
                     (C44327 + C44328 + C44329) * C285 +
                     (C44330 + C44331 + C44332) * C280) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C283 +
                     (C44326 + C44325 + C44324) * C278 -
                     (C44329 + C44328 + C44327) * C284 -
                     (C44332 + C44331 + C44330) * C279 +
                     (C44335 + C44334 + C44333) * C285 +
                     (C44338 + C44337 + C44336) * C280) *
                        C50778) *
                       C50900 * C50841 * C51040 +
                   (((C44509 + C44510 + C44511) * C284 -
                     ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                       C51091 * C835 + C44281 * C293 + C51090 * C304) *
                          C278 +
                      (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                       C51091 * C819 + C44281 * C287 + C51090 * C294) *
                          C283) +
                     (C44512 + C44513 + C44514) * C279 -
                     (C44515 + C44516 + C44517) * C285 -
                     (C44518 + C44519 + C44520) * C280) *
                        C51034 +
                    ((C44517 + C44516 + C44515) * C284 -
                     ((C44514 + C44513 + C44512) * C278 +
                      (C44511 + C44510 + C44509) * C283) +
                     (C44520 + C44519 + C44518) * C279 -
                     (C44283 * C1080 + C44280 * C1085 + C44282 * C814 +
                      C51091 * C825 + C44281 * C289 + C51090 * C298) *
                         C285 -
                     (C44283 * C1084 + C44280 * C1092 + C44282 * C826 +
                      C51091 * C838 + C44281 * C299 + C51090 * C307) *
                         C280) *
                        C50778) *
                       C50900 * C50841 * C50829)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C696 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C50753) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C696 +
                     (C44326 + C44325 + C44324) * C50753) *
                        C50778) *
                       C50900 * C50841 * C692 -
                   (((C44514 + C44513 + C44512) * C50753 +
                     (C44511 + C44510 + C44509) * C696) *
                        C50778 +
                    ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                      C51091 * C835 + C44281 * C293 + C51090 * C304) *
                         C50753 +
                     (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                      C51091 * C819 + C44281 * C287 + C51090 * C294) *
                         C696) *
                        C51034) *
                       C50900 * C50841 * C693 +
                   (((C44281 * C587 + C51090 * C592 + C44282 * C818 +
                      C51091 * C834 + C44283 * C3347 + C44280 * C3350) *
                         C696 +
                     (C44281 * C593 + C51090 * C602 + C44282 * C833 +
                      C51091 * C842 + C44283 * C3351 + C44280 * C3356) *
                         C50753) *
                        C51034 +
                    ((C44863 + C44862 + C44861) * C696 +
                     (C44866 + C44865 + C44864) * C50753) *
                        C50778) *
                       C50900 * C50841 * C694 -
                   (((C44283 * C3519 + C44280 * C3523 + C44282 * C3151 +
                      C51091 * C3157 + C44281 * C705 + C51090 * C711) *
                         C50753 +
                     (C44283 * C3517 + C44280 * C3520 + C44282 * C3145 +
                      C51091 * C3150 + C44281 * C699 + C51090 * C706) *
                         C696) *
                        C50778 +
                    ((C44283 * C3521 + C44280 * C3524 + C44282 * C3149 +
                      C51091 * C3156 + C44281 * C707 + C51090 * C712) *
                         C50753 +
                     (C44283 * C3518 + C44280 * C3522 + C44282 * C3144 +
                      C51091 * C3148 + C44281 * C700 + C51090 * C708) *
                         C696) *
                        C51034) *
                       C50900 * C50841 * C695)) /
                     (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                      C51091 * C442 + C44283 * C944 + C44280 * C949) *
                         C283 +
                     (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                      C51091 * C452 + C44283 * C950 + C44280 * C959) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C279 +
                     (C44327 + C44328 + C44329) * C285 +
                     (C44330 + C44331 + C44332) * C280) *
                        C51034 +
                    ((C44323 + C44322 + C44321) * C283 +
                     (C44326 + C44325 + C44324) * C278 -
                     (C44329 + C44328 + C44327) * C284 -
                     (C44332 + C44331 + C44330) * C279 +
                     (C44335 + C44334 + C44333) * C285 +
                     (C44338 + C44337 + C44336) * C280) *
                        C50778) *
                       C50900 * C51041 +
                   (((C44691 + C44692 + C44693) * C284 -
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C278 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C283) +
                     (C44694 + C44695 + C44696) * C279 -
                     (C44697 + C44698 + C44699) * C285 -
                     (C44700 + C44701 + C44702) * C280) *
                        C51034 +
                    ((C44699 + C44698 + C44697) * C284 -
                     ((C44696 + C44695 + C44694) * C278 +
                      (C44693 + C44692 + C44691) * C283) +
                     (C44702 + C44701 + C44700) * C279 -
                     (C44283 * C1166 + C44280 * C1171 + C44282 * C947 +
                      C51091 * C955 + C44281 * C437 + C51090 * C446) *
                         C285 -
                     (C44283 * C1170 + C44280 * C1178 + C44282 * C956 +
                      C51091 * C962 + C44281 * C447 + C51090 * C455) *
                         C280) *
                        C50778) *
                       C50900 * C50853) *
                  C50815) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51090 * C129 + C44282 * C435 +
                       C51091 * C442 + C44283 * C944 + C44280 * C949) *
                          C696 +
                      (C44281 * C130 + C51090 * C143 + C44282 * C441 +
                       C51091 * C452 + C44283 * C950 + C44280 * C959) *
                          C50753) *
                         C51034 +
                     ((C44323 + C44322 + C44321) * C696 +
                      (C44326 + C44325 + C44324) * C50753) *
                         C50778) *
                        C50900 * C51041 -
                    (((C44696 + C44695 + C44694) * C50753 +
                      (C44693 + C44692 + C44691) * C696) *
                         C50778 +
                     ((C44283 * C1176 + C44280 * C1181 + C44282 * C950 +
                       C51091 * C959 + C44281 * C441 + C51090 * C452) *
                          C50753 +
                      (C44283 * C1169 + C44280 * C1177 + C44282 * C944 +
                       C51091 * C949 + C44281 * C435 + C51090 * C442) *
                          C696) *
                         C51034) *
                        C50900 * C50853) *
                       C582 +
                   ((((C44281 * C811 + C51090 * C819 + C44282 * C1083 +
                       C51091 * C1091 + C44283 * C3646 + C44280 * C3654) *
                          C696 +
                      (C44281 * C820 + C51090 * C835 + C44282 * C1090 +
                       C51091 * C1095 + C44283 * C3653 + C44280 * C3658) *
                          C50753) *
                         C51034 +
                     ((C44281 * C812 + C51090 * C821 + C44282 * C1082 +
                       C51091 * C1089 + C44283 * C3645 + C44280 * C3652) *
                          C696 +
                      (C44281 * C822 + C51090 * C836 + C44282 * C1088 +
                       C51091 * C1094 + C44283 * C3651 + C44280 * C3657) *
                          C50753) *
                         C50778) *
                        C50900 * C50853 -
                    (((C44514 + C44513 + C44512) * C50753 +
                      (C44511 + C44510 + C44509) * C696) *
                         C50778 +
                     ((C44283 * C1090 + C44280 * C1095 + C44282 * C820 +
                       C51091 * C835 + C44281 * C293 + C51090 * C304) *
                          C50753 +
                      (C44283 * C1083 + C44280 * C1091 + C44282 * C811 +
                       C51091 * C819 + C44281 * C287 + C51090 * C294) *
                          C696) *
                         C51034) *
                        C50900 * C51041) *
                       C583 +
                   ((((C44281 * C587 + C51090 * C592 + C44282 * C818 +
                       C51091 * C834 + C44283 * C3347 + C44280 * C3350) *
                          C696 +
                      (C44281 * C593 + C51090 * C602 + C44282 * C833 +
                       C51091 * C842 + C44283 * C3351 + C44280 * C3356) *
                          C50753) *
                         C51034 +
                     ((C44863 + C44862 + C44861) * C696 +
                      (C44866 + C44865 + C44864) * C50753) *
                         C50778) *
                        C50900 * C51041 -
                    (((C44283 * C3647 + C44280 * C3655 + C44282 * C3353 +
                       C51091 * C3357 + C44281 * C831 + C51090 * C841) *
                          C50753 +
                      (C44283 * C3643 + C44280 * C3648 + C44282 * C3348 +
                       C51091 * C3352 + C44281 * C817 + C51090 * C832) *
                          C696) *
                         C50778 +
                     ((C44283 * C3649 + C44280 * C3656 + C44282 * C3351 +
                       C51091 * C3356 + C44281 * C833 + C51090 * C842) *
                          C50753 +
                      (C44283 * C3644 + C44280 * C3650 + C44282 * C3347 +
                       C51091 * C3350 + C44281 * C818 + C51090 * C834) *
                          C696) *
                         C51034) *
                        C50900 * C50853) *
                       C584)) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1285 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51083 -
            (C33395 + C33396) * C1286 - (C33397 + C33398) * C51067 +
            C33411 * C1287 + C33412 * C1282) *
               C17287 +
           ((C33396 + C33395) * C1285 + (C33398 + C33397) * C51083 -
            (C33400 + C33399) * C1286 - (C33402 + C33401) * C51067 +
            (C33404 + C33403) * C1287 + (C33406 + C33405) * C1282) *
               C17288 +
           (C33411 * C1285 + C33412 * C51083 - C33413 * C1286 -
            C33414 * C51067 + (C33408 + C33407) * C1287 +
            (C33410 + C33409) * C1282) *
               C17289) *
              C50900 * C50841 * C1283 +
          (((C33585 + C33586) * C1286 -
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C51083 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C1285) +
            (C33587 + C33588) * C51067 - C33597 * C1287 - C33598 * C1282) *
               C17287 +
           ((C33590 + C33589) * C1286 -
            ((C33588 + C33587) * C51083 + (C33586 + C33585) * C1285) +
            (C33592 + C33591) * C51067 - (C33593 + C33594) * C1287 -
            (C33595 + C33596) * C1282) *
               C17288 +
           ((C33594 + C33593) * C1286 - (C33598 * C51083 + C33597 * C1285) +
            (C33596 + C33595) * C51067 -
            (C33361 * C1523 + C50975 * C1524 + C33360 * C290 + C33358 * C300) *
                C1287 -
            (C33361 * C1525 + C50975 * C1526 + C33360 * C301 + C33358 * C308) *
                C1282) *
               C17289) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1285 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51083 -
            (C33395 + C33396) * C1286 - (C33397 + C33398) * C51067 +
            C33411 * C1287 + C33412 * C1282) *
               C50773 * C2302 +
           ((C36353 + C36354) * C1285 + (C36355 + C36356) * C51083 -
            (C33586 + C33585) * C1286 - (C33588 + C33587) * C51067 +
            (C33590 + C33589) * C1287 + (C33592 + C33591) * C1282) *
               C50773 * C2303 +
           (C36653 * C1285 + C36654 * C51083 - C36655 * C1286 -
            C36656 * C51067 + (C33950 + C33949) * C1287 +
            (C33952 + C33951) * C1282) *
               C50773 * C2304) *
              C50841 * C1283 +
          (((C33585 + C33586) * C1286 -
            ((C36356 + C36355) * C51083 + (C36354 + C36353) * C1285) +
            (C33587 + C33588) * C51067 - C33597 * C1287 - C33598 * C1282) *
               C50773 * C2302 +
           ((C33946 + C33945) * C1286 -
            ((C36360 + C36359) * C51083 + (C36358 + C36357) * C1285) +
            (C33948 + C33947) * C51067 - (C33949 + C33950) * C1287 -
            (C33951 + C33952) * C1282) *
               C50773 * C2303 +
           ((C36677 + C36678) * C1286 - (C36789 * C51083 + C36790 * C1285) +
            (C36683 + C36684) * C51067 -
            (C33361 * C4202 + C50975 * C4203 + C33360 * C698 + C33358 * C704) *
                C1287 -
            (C33361 * C4204 + C50975 * C4205 + C33360 * C703 + C33358 * C710) *
                C1282) *
               C50773 * C2304) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1391 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C1386 -
            (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
               C17287 +
           ((C33396 + C33395) * C1391 + (C33398 + C33397) * C1386 -
            (C33400 + C33399) * C1392 - (C33402 + C33401) * C50758) *
               C17288 +
           (C33411 * C1391 + C33412 * C1386 - C33413 * C1392 -
            C33414 * C50758) *
               C17289) *
              C50900 * C50841 * C51086 +
          (((C33585 + C33586) * C1392 -
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C1386 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C1391) +
            (C33587 + C33588) * C50758) *
               C17287 +
           ((C33590 + C33589) * C1392 -
            ((C33588 + C33587) * C1386 + (C33586 + C33585) * C1391) +
            (C33592 + C33591) * C50758) *
               C17288 +
           ((C33594 + C33593) * C1392 - (C33598 * C1386 + C33597 * C1391) +
            (C33596 + C33595) * C50758) *
               C17289) *
              C50900 * C50841 * C51073 +
          (((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                C1391 +
            (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                C1386 -
            (C33945 + C33946) * C1392 - (C33947 + C33948) * C50758) *
               C17287 +
           ((C33946 + C33945) * C1391 + (C33948 + C33947) * C1386 -
            (C33949 + C33950) * C1392 - (C33951 + C33952) * C50758) *
               C17288 +
           ((C33950 + C33949) * C1391 + (C33952 + C33951) * C1386 -
            (C33361 * C815 + C50975 * C828 + C33360 * C590 + C33358 * C598) *
                C1392 -
            (C33361 * C827 + C50975 * C839 + C33360 * C599 + C33358 * C605) *
                C50758) *
               C17289) *
              C50900 * C50841 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1391 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C1386 -
            (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
               C50773 * C2302 +
           ((C36353 + C36354) * C1391 + (C36355 + C36356) * C1386 -
            (C33586 + C33585) * C1392 - (C33588 + C33587) * C50758) *
               C50773 * C2303 +
           C37710 * C2304) *
              C50841 * C51086 +
          (((C33585 + C33586) * C1392 -
            ((C36356 + C36355) * C1386 + (C36354 + C36353) * C1391) +
            (C33587 + C33588) * C50758) *
               C50773 * C2302 +
           ((C33946 + C33945) * C1392 -
            ((C36360 + C36359) * C1386 + (C36358 + C36357) * C1391) +
            (C33948 + C33947) * C50758) *
               C50773 * C2303 +
           ((C36677 + C36678) * C1392 - (C36789 * C1386 + C36790 * C1391) +
            (C36683 + C36684) * C50758) *
               C50773 * C2304) *
              C50841 * C51073 +
          (C37710 * C2302 +
           ((C36682 + C36681) * C1391 + (C36680 + C36679) * C1386 -
            (C36678 + C36677) * C1392 - (C36684 + C36683) * C50758) *
               C50773 * C2303 +
           ((C36802 + C36803) * C1391 + (C36804 + C36805) * C1386 -
            (C33361 * C3146 + C50975 * C3153 + C33360 * C2804 +
             C33358 * C2808) *
                C1392 -
            (C33361 * C3152 + C50975 * C3158 + C33360 * C2809 +
             C33358 * C2813) *
                C50758) *
               C50773 * C2304) *
              C50841 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C1391 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C1386 -
             (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
                C17287 +
            ((C33396 + C33395) * C1391 + (C33398 + C33397) * C1386 -
             (C33400 + C33399) * C1392 - (C33402 + C33401) * C50758) *
                C17288 +
            (C33411 * C1391 + C33412 * C1386 - C33413 * C1392 -
             C33414 * C50758) *
                C17289) *
               C50900 * C51041 +
           (((C33769 + C33770) * C1392 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C1386 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C1391) +
             (C33771 + C33772) * C50758) *
                C17287 +
            ((C33774 + C33773) * C1392 -
             ((C33772 + C33771) * C1386 + (C33770 + C33769) * C1391) +
             (C33776 + C33775) * C50758) *
                C17288 +
            ((C33778 + C33777) * C1392 - (C33782 * C1386 + C33781 * C1391) +
             (C33780 + C33779) * C50758) *
                C17289) *
               C50900 * C50853) *
              C1283 +
          ((((C33585 + C33586) * C1392 -
             ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                  C1386 +
              (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                  C1391) +
             (C33587 + C33588) * C50758) *
                C17287 +
            ((C33590 + C33589) * C1392 -
             ((C33588 + C33587) * C1386 + (C33586 + C33585) * C1391) +
             (C33592 + C33591) * C50758) *
                C17288 +
            ((C33594 + C33593) * C1392 - (C33598 * C1386 + C33597 * C1391) +
             (C33596 + C33595) * C50758) *
                C17289) *
               C50900 * C51041 +
           (((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C1391 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C1386 -
             (C35113 + C35114) * C1392 - (C35115 + C35116) * C50758) *
                C17287 +
            ((C35114 + C35113) * C1391 + (C35116 + C35115) * C1386 -
             (C35117 + C35118) * C1392 - (C35119 + C35120) * C50758) *
                C17288 +
            ((C35118 + C35117) * C1391 + (C35120 + C35119) * C1386 -
             (C33361 * C1080 + C50975 * C1085 + C33360 * C814 + C33358 * C825) *
                 C1392 -
             (C33361 * C1084 + C50975 * C1092 + C33360 * C826 + C33358 * C838) *
                 C50758) *
                C17289) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C1391 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C1386 -
             (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
                C50773 * C2302 +
            ((C36353 + C36354) * C1391 + (C36355 + C36356) * C1386 -
             (C33586 + C33585) * C1392 - (C33588 + C33587) * C50758) *
                C50773 * C2303 +
            C37710 * C2304) *
               C51041 +
           (((C33769 + C33770) * C1392 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C1386 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C1391) +
             (C33771 + C33772) * C50758) *
                C50773 * C2302 +
            ((C35114 + C35113) * C1392 -
             ((C36983 + C36984) * C1386 + (C36985 + C36986) * C1391) +
             (C35116 + C35115) * C50758) *
                C50773 * C2303 +
            ((C37913 + C37914) * C1392 - (C36991 * C1386 + C36992 * C1391) +
             (C37915 + C37916) * C50758) *
                C50773 * C2304) *
               C50853) *
              C1283 +
          ((((C33585 + C33586) * C1392 -
             ((C36356 + C36355) * C1386 + (C36354 + C36353) * C1391) +
             (C33587 + C33588) * C50758) *
                C50773 * C2302 +
            ((C33946 + C33945) * C1392 -
             ((C36360 + C36359) * C1386 + (C36358 + C36357) * C1391) +
             (C33948 + C33947) * C50758) *
                C50773 * C2303 +
            ((C36677 + C36678) * C1392 - (C36789 * C1386 + C36790 * C1391) +
             (C36683 + C36684) * C50758) *
                C50773 * C2304) *
               C51041 +
           (((C36986 + C36985) * C1391 + (C36984 + C36983) * C1386 -
             (C35113 + C35114) * C1392 - (C35115 + C35116) * C50758) *
                C50773 * C2302 +
            ((C36982 + C36981) * C1391 + (C36980 + C36979) * C1386 -
             (C37914 + C37913) * C1392 - (C37916 + C37915) * C50758) *
                C50773 * C2303 +
            ((C36987 + C36988) * C1391 + (C36989 + C36990) * C1386 -
             (C33361 * C3517 + C50975 * C3520 + C33360 * C3145 +
              C33358 * C3150) *
                 C1392 -
             (C33361 * C3519 + C50975 * C3523 + C33360 * C3151 +
              C33358 * C3157) *
                 C50758) *
                C50773 * C2304) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C51025 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
                C17287 +
            ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51025 -
             (C33400 + C33399) * C49763 - (C33402 + C33401) * C50758) *
                C17288 +
            (C33411 * C49770 + C33412 * C51025 - C33413 * C49763 -
             C33414 * C50758) *
                C17289) *
               C50900 * C1643 +
           (((C33769 + C33770) * C49763 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C51025 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C49770) +
             (C33771 + C33772) * C50758) *
                C17287 +
            ((C33774 + C33773) * C49763 -
             ((C33772 + C33771) * C51025 + (C33770 + C33769) * C49770) +
             (C33776 + C33775) * C50758) *
                C17288 +
            ((C33778 + C33777) * C49763 - (C33782 * C51025 + C33781 * C49770) +
             (C33780 + C33779) * C50758) *
                C17289) *
               C50900 * C50853) *
              C1283 +
          ((((C33585 + C33586) * C49763 -
             ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                  C51025 +
              (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                  C49770) +
             (C33587 + C33588) * C50758) *
                C17287 +
            ((C33590 + C33589) * C49763 -
             ((C33588 + C33587) * C51025 + (C33586 + C33585) * C49770) +
             (C33592 + C33591) * C50758) *
                C17288 +
            ((C33594 + C33593) * C49763 - (C33598 * C51025 + C33597 * C49770) +
             (C33596 + C33595) * C50758) *
                C17289) *
               C50900 * C1643 +
           (((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C49770 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C51025 -
             (C35113 + C35114) * C49763 - (C35115 + C35116) * C50758) *
                C17287 +
            ((C35114 + C35113) * C49770 + (C35116 + C35115) * C51025 -
             (C35117 + C35118) * C49763 - (C35119 + C35120) * C50758) *
                C17288 +
            ((C35118 + C35117) * C49770 + (C35120 + C35119) * C51025 -
             (C33361 * C1080 + C50975 * C1085 + C33360 * C814 + C33358 * C825) *
                 C49763 -
             (C33361 * C1084 + C50975 * C1092 + C33360 * C826 + C33358 * C838) *
                 C50758) *
                C17289) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C51025 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
                C50773 * C2302 +
            ((C36353 + C36354) * C49770 + (C36355 + C36356) * C51025 -
             (C33586 + C33585) * C49763 - (C33588 + C33587) * C50758) *
                C50773 * C2303 +
            C36688 * C2304) *
               C1643 +
           (((C33769 + C33770) * C49763 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C51025 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C49770) +
             (C33771 + C33772) * C50758) *
                C50773 * C2302 +
            ((C35114 + C35113) * C49763 -
             ((C36983 + C36984) * C51025 + (C36985 + C36986) * C49770) +
             (C35116 + C35115) * C50758) *
                C50773 * C2303 +
            ((C37913 + C37914) * C49763 - (C36991 * C51025 + C36992 * C49770) +
             (C37915 + C37916) * C50758) *
                C50773 * C2304) *
               C50853) *
              C1283 +
          ((((C33585 + C33586) * C49763 -
             ((C36356 + C36355) * C51025 + (C36354 + C36353) * C49770) +
             (C33587 + C33588) * C50758) *
                C50773 * C2302 +
            ((C33946 + C33945) * C49763 -
             ((C36360 + C36359) * C51025 + (C36358 + C36357) * C49770) +
             (C33948 + C33947) * C50758) *
                C50773 * C2303 +
            ((C36677 + C36678) * C49763 - (C36789 * C51025 + C36790 * C49770) +
             (C36683 + C36684) * C50758) *
                C50773 * C2304) *
               C1643 +
           (((C36986 + C36985) * C49770 + (C36984 + C36983) * C51025 -
             (C35113 + C35114) * C49763 - (C35115 + C35116) * C50758) *
                C50773 * C2302 +
            ((C36982 + C36981) * C49770 + (C36980 + C36979) * C51025 -
             (C37914 + C37913) * C49763 - (C37916 + C37915) * C50758) *
                C50773 * C2303 +
            ((C36987 + C36988) * C49770 + (C36989 + C36990) * C51025 -
             (C33361 * C3517 + C50975 * C3520 + C33360 * C3145 +
              C33358 * C3150) *
                 C49763 -
             (C33361 * C3519 + C50975 * C3523 + C33360 * C3151 +
              C33358 * C3157) *
                 C50758) *
                C50773 * C2304) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C17287 +
            ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
            (C33411 * C696 + C33412 * C50753) * C17289) *
               C50900 * C1643 -
           ((C33782 * C50753 + C33781 * C696) * C17289 +
            ((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C17288 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C17287) *
               C50900 * C50853) *
              C51086 +
          ((((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C696 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C50753) *
                C17287 +
            ((C35114 + C35113) * C696 + (C35116 + C35115) * C50753) * C17288 +
            ((C35118 + C35117) * C696 + (C35120 + C35119) * C50753) * C17289) *
               C50900 * C50853 -
           ((C33598 * C50753 + C33597 * C696) * C17289 +
            ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) * C17288 +
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C50753 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C696) *
                C17287) *
               C50900 * C1643) *
              C51073 +
          ((((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                 C696 +
             (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                 C50753) *
                C17287 +
            ((C33946 + C33945) * C696 + (C33948 + C33947) * C50753) * C17288 +
            ((C33950 + C33949) * C696 + (C33952 + C33951) * C50753) * C17289) *
               C50900 * C1643 -
           (((C33361 * C3355 + C50975 * C3358 + C33360 * C829 + C33358 * C840) *
                 C50753 +
             (C33361 * C3349 + C50975 * C3354 + C33360 * C816 + C33358 * C830) *
                 C696) *
                C17289 +
            ((C33361 * C3353 + C50975 * C3357 + C33360 * C831 + C33358 * C841) *
                 C50753 +
             (C33361 * C3348 + C50975 * C3352 + C33360 * C817 + C33358 * C832) *
                 C696) *
                C17288 +
            ((C33361 * C3351 + C50975 * C3356 + C33360 * C833 + C33358 * C842) *
                 C50753 +
             (C33361 * C3347 + C50975 * C3350 + C33360 * C818 + C33358 * C834) *
                 C696) *
                C17287) *
               C50900 * C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C2302 +
            ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
                C2303 +
            C36806 * C2304) *
               C1643 -
           (C36996 * C2304 +
            ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C50773 *
                C2303 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C50773 * C2302) *
               C50853) *
              C51086 +
          ((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C50773 *
                C2302 +
            ((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C50773 *
                C2303 +
            ((C36987 + C36988) * C696 + (C36989 + C36990) * C50753) * C50773 *
                C2304) *
               C50853 -
           (C36808 * C2304 +
            ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
                C2303 +
            ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
                C2302) *
               C1643) *
              C51073 +
          ((C36806 * C2302 +
            ((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C50773 *
                C2303 +
            ((C36802 + C36803) * C696 + (C36804 + C36805) * C50753) * C50773 *
                C2304) *
               C1643 -
           (((C33361 * C20596 + C50975 * C20598 + C33360 * C3154 +
              C33358 * C3159) *
                 C50753 +
             (C33361 * C20595 + C50975 * C20597 + C33360 * C3147 +
              C33358 * C3155) *
                 C696) *
                C50773 * C2304 +
            ((C36990 + C36989) * C50753 + (C36988 + C36987) * C696) * C50773 *
                C2303 +
            C36996 * C2302) *
               C50853) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C17287 +
            ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
            (C33411 * C696 + C33412 * C50753) * C17289) *
               C50900 * C51087 -
           ((C33782 * C50753 + C33781 * C696) * C17289 +
            ((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C17288 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C17287) *
               C50900 * C51076 +
           (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                 C696 +
             (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                 C50753) *
                C17287 +
            ((C34360 + C34359) * C696 + (C34362 + C34361) * C50753) * C17288 +
            ((C34364 + C34363) * C696 + (C34366 + C34365) * C50753) * C17289) *
               C50900 * C1875) *
              C1283 +
          ((((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C696 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C50753) *
                C17287 +
            ((C35114 + C35113) * C696 + (C35116 + C35115) * C50753) * C17288 +
            ((C35118 + C35117) * C696 + (C35120 + C35119) * C50753) * C17289) *
               C50900 * C51076 -
           ((C33598 * C50753 + C33597 * C696) * C17289 +
            ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) * C17288 +
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C50753 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C696) *
                C17287) *
               C50900 * C51087 -
           (((C33361 * C7064 + C50975 * C7065 + C33360 * C1086 +
              C33358 * C1093) *
                 C50753 +
             (C33361 * C7062 + C50975 * C7063 + C33360 * C1081 +
              C33358 * C1087) *
                 C696) *
                C17289 +
            ((C33361 * C3651 + C50975 * C3657 + C33360 * C1088 +
              C33358 * C1094) *
                 C50753 +
             (C33361 * C3645 + C50975 * C3652 + C33360 * C1082 +
              C33358 * C1089) *
                 C696) *
                C17288 +
            ((C33361 * C3653 + C50975 * C3658 + C33360 * C1090 +
              C33358 * C1095) *
                 C50753 +
             (C33361 * C3646 + C50975 * C3654 + C33360 * C1083 +
              C33358 * C1091) *
                 C696) *
                C17287) *
               C50900 * C1875) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C2302 +
            ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
                C2303 +
            C36806 * C2304) *
               C51087 -
           (C36996 * C2304 +
            ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C50773 *
                C2303 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C50773 * C2302) *
               C51076 +
           (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                 C696 +
             (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                 C50753) *
                C50773 * C2302 +
            ((C37305 + C37306) * C696 + (C37307 + C37308) * C50753) * C50773 *
                C2303 +
            ((C37309 + C37310) * C696 + (C37311 + C37312) * C50753) * C50773 *
                C2304) *
               C1875) *
              C1283 +
          ((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C50773 *
                C2302 +
            ((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C50773 *
                C2303 +
            ((C36987 + C36988) * C696 + (C36989 + C36990) * C50753) * C50773 *
                C2304) *
               C51076 -
           (C36808 * C2304 +
            ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
                C2303 +
            ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
                C2302) *
               C51087 -
           (((C33361 * C20674 + C50975 * C20676 + C33360 * C3521 +
              C33358 * C3524) *
                 C50753 +
             (C33361 * C20673 + C50975 * C20675 + C33360 * C3518 +
              C33358 * C3522) *
                 C696) *
                C50773 * C2304 +
            ((C37312 + C37311) * C50753 + (C37310 + C37309) * C696) * C50773 *
                C2303 +
            ((C37308 + C37307) * C50753 + (C37306 + C37305) * C696) * C50773 *
                C2302) *
               C1875) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51025 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
               C17287 +
           ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51025 -
            (C33400 + C33399) * C49763 - (C33402 + C33401) * C50758) *
               C17288 +
           (C33411 * C49770 + C33412 * C51025 - C33413 * C49763 -
            C33414 * C50758) *
               C17289) *
              C50900 * C50841 * C582 +
          (((C33585 + C33586) * C49763 -
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C51025 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C49770) +
            (C33587 + C33588) * C50758) *
               C17287 +
           ((C33590 + C33589) * C49763 -
            ((C33588 + C33587) * C51025 + (C33586 + C33585) * C49770) +
            (C33592 + C33591) * C50758) *
               C17288 +
           ((C33594 + C33593) * C49763 - (C33598 * C51025 + C33597 * C49770) +
            (C33596 + C33595) * C50758) *
               C17289) *
              C50900 * C50841 * C583 +
          (((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                C49770 +
            (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                C51025 -
            (C33945 + C33946) * C49763 - (C33947 + C33948) * C50758) *
               C17287 +
           ((C33946 + C33945) * C49770 + (C33948 + C33947) * C51025 -
            (C33949 + C33950) * C49763 - (C33951 + C33952) * C50758) *
               C17288 +
           ((C33950 + C33949) * C49770 + (C33952 + C33951) * C51025 -
            (C33361 * C815 + C50975 * C828 + C33360 * C590 + C33358 * C598) *
                C49763 -
            (C33361 * C827 + C50975 * C839 + C33360 * C599 + C33358 * C605) *
                C50758) *
               C17289) *
              C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C17287 +
          ((C33396 + C33395) * C118 + (C33398 + C33397) * C106 -
           (C33400 + C33399) * C119 - (C33402 + C33401) * C107 +
           (C33404 + C33403) * C120 + (C33406 + C33405) * C108 -
           (C33407 + C33408) * C121 - (C33409 + C33410) * C109) *
              C17288 +
          (C33411 * C118 + C33412 * C106 - C33413 * C119 - C33414 * C107 +
           (C33408 + C33407) * C120 + (C33410 + C33409) * C108 -
           (C33361 * C439 + C50975 * C450 + C33360 * C127 + C33358 * C139) *
               C121 -
           (C33361 * C451 + C50975 * C457 + C33360 * C140 + C33358 * C148) *
               C109) *
              C17289) *
         C50900 * C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51025 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
               C17287 +
           ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51025 -
            (C33400 + C33399) * C49763 - (C33402 + C33401) * C50758) *
               C17288 +
           (C33411 * C49770 + C33412 * C51025 - C33413 * C49763 -
            C33414 * C50758) *
               C17289) *
              C50900 * C941 +
          (((C33769 + C33770) * C49763 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C51025 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C49770) +
            (C33771 + C33772) * C50758) *
               C17287 +
           ((C33774 + C33773) * C49763 -
            ((C33772 + C33771) * C51025 + (C33770 + C33769) * C49770) +
            (C33776 + C33775) * C50758) *
               C17288 +
           ((C33778 + C33777) * C49763 - (C33782 * C51025 + C33781 * C49770) +
            (C33780 + C33779) * C50758) *
               C17289) *
              C50900 * C942 +
          (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                C49770 +
            (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                C51025 -
            (C34359 + C34360) * C49763 - (C34361 + C34362) * C50758) *
               C17287 +
           ((C34360 + C34359) * C49770 + (C34362 + C34361) * C51025 -
            (C34363 + C34364) * C49763 - (C34365 + C34366) * C50758) *
               C17288 +
           ((C34364 + C34363) * C49770 + (C34366 + C34365) * C51025 -
            (C33361 * C1166 + C50975 * C1171 + C33360 * C947 + C33358 * C955) *
                C49763 -
            (C33361 * C1170 + C50975 * C1178 + C33360 * C956 + C33358 * C962) *
                C50758) *
               C17289) *
              C50900 * C943) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C50773 * C2302 +
          ((C33360 * C287 + C33358 * C294 + C33361 * C811 + C50975 * C819) *
               C118 +
           (C33360 * C293 + C33358 * C304 + C33361 * C820 + C50975 * C835) *
               C106 -
           (C33586 + C33585) * C119 - (C33588 + C33587) * C107 +
           (C33590 + C33589) * C120 + (C33592 + C33591) * C108 -
           (C33593 + C33594) * C121 - (C33595 + C33596) * C109) *
              C50773 * C2303 +
          ((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
               C118 +
           (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
               C106 -
           (C33945 + C33946) * C119 - (C33947 + C33948) * C107 +
           (C33950 + C33949) * C120 + (C33952 + C33951) * C108 -
           (C33361 * C815 + C50975 * C828 + C33360 * C590 + C33358 * C598) *
               C121 -
           (C33361 * C827 + C50975 * C839 + C33360 * C599 + C33358 * C605) *
               C109) *
              C50773 * C2304) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51025 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
               C50773 * C2302 +
           ((C36353 + C36354) * C49770 + (C36355 + C36356) * C51025 -
            (C33586 + C33585) * C49763 - (C33588 + C33587) * C50758) *
               C50773 * C2303 +
           C36688 * C2304) *
              C50841 * C582 +
          (((C33585 + C33586) * C49763 -
            ((C36356 + C36355) * C51025 + (C36354 + C36353) * C49770) +
            (C33587 + C33588) * C50758) *
               C50773 * C2302 +
           ((C33946 + C33945) * C49763 -
            ((C36360 + C36359) * C51025 + (C36358 + C36357) * C49770) +
            (C33948 + C33947) * C50758) *
               C50773 * C2303 +
           ((C36677 + C36678) * C49763 -
            ((C36679 + C36680) * C51025 + (C36681 + C36682) * C49770) +
            (C36683 + C36684) * C50758) *
               C50773 * C2304) *
              C50841 * C583 +
          (C36688 * C2302 +
           ((C36682 + C36681) * C49770 + (C36680 + C36679) * C51025 -
            (C36678 + C36677) * C49763 - (C36684 + C36683) * C50758) *
               C50773 * C2303 +
           ((C33360 * C2803 + C33358 * C2806 + C33361 * C3147 +
             C50975 * C3155) *
                C49770 +
            (C33360 * C2807 + C33358 * C2812 + C33361 * C3154 +
             C50975 * C3159) *
                C51025 -
            (C33361 * C3146 + C50975 * C3153 + C33360 * C2804 +
             C33358 * C2808) *
                C49763 -
            (C33361 * C3152 + C50975 * C3158 + C33360 * C2809 +
             C33358 * C2813) *
                C50758) *
               C50773 * C2304) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51025 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
               C50773 * C2302 +
           ((C36353 + C36354) * C49770 + (C36355 + C36356) * C51025 -
            (C33586 + C33585) * C49763 - (C33588 + C33587) * C50758) *
               C50773 * C2303 +
           C36688 * C2304) *
              C941 +
          (((C33769 + C33770) * C49763 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C51025 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C49770) +
            (C33771 + C33772) * C50758) *
               C50773 * C2302 +
           ((C35114 + C35113) * C49763 -
            ((C36983 + C36984) * C51025 + (C36985 + C36986) * C49770) +
            (C35116 + C35115) * C50758) *
               C50773 * C2303 +
           ((C33360 * C817 + C33358 * C832 + C33361 * C3348 + C50975 * C3352) *
                C49763 -
            (C36991 * C51025 + C36992 * C49770) +
            (C33360 * C831 + C33358 * C841 + C33361 * C3353 + C50975 * C3357) *
                C50758) *
               C50773 * C2304) *
              C942 +
          (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                C49770 +
            (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                C51025 -
            (C34359 + C34360) * C49763 - (C34361 + C34362) * C50758) *
               C50773 * C2302 +
           ((C33360 * C1083 + C33358 * C1091 + C33361 * C3646 +
             C50975 * C3654) *
                C49770 +
            (C33360 * C1090 + C33358 * C1095 + C33361 * C3653 +
             C50975 * C3658) *
                C51025 -
            (C33361 * C3645 + C50975 * C3652 + C33360 * C1082 +
             C33358 * C1089) *
                C49763 -
            (C33361 * C3651 + C50975 * C3657 + C33360 * C1088 +
             C33358 * C1094) *
                C50758) *
               C50773 * C2303 +
           ((C33360 * C3347 + C33358 * C3350 + C33361 * C3644 +
             C50975 * C3650) *
                C49770 +
            (C33360 * C3351 + C33358 * C3356 + C33361 * C3649 +
             C50975 * C3656) *
                C51025 -
            (C33361 * C3643 + C50975 * C3648 + C33360 * C3348 +
             C33358 * C3352) *
                C49763 -
            (C33361 * C3647 + C50975 * C3655 + C33360 * C3353 +
             C33358 * C3357) *
                C50758) *
               C50773 * C2304) *
              C943) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C696 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C50753) *
               C17287 +
           ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
           (C33411 * C696 + C33412 * C50753) * C17289) *
              C50900 * C50841 * C692 -
          ((C33598 * C50753 + C33597 * C696) * C17289 +
           ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) * C17288 +
           ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                C50753 +
            (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                C696) *
               C17287) *
              C50900 * C50841 * C693 +
          (((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                C696 +
            (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                C50753) *
               C17287 +
           ((C33946 + C33945) * C696 + (C33948 + C33947) * C50753) * C17288 +
           ((C33950 + C33949) * C696 + (C33952 + C33951) * C50753) * C17289) *
              C50900 * C50841 * C694 -
          (((C33361 * C4204 + C50975 * C4205 + C33360 * C703 + C33358 * C710) *
                C50753 +
            (C33361 * C4202 + C50975 * C4203 + C33360 * C698 + C33358 * C704) *
                C696) *
               C17289 +
           ((C33361 * C3151 + C50975 * C3157 + C33360 * C705 + C33358 * C711) *
                C50753 +
            (C33361 * C3145 + C50975 * C3150 + C33360 * C699 + C33358 * C706) *
                C696) *
               C17288 +
           ((C33361 * C3149 + C50975 * C3156 + C33360 * C707 + C33358 * C712) *
                C50753 +
            (C33361 * C3144 + C50975 * C3148 + C33360 * C700 + C33358 * C708) *
                C696) *
               C17287) *
              C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C17287 +
           ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
            (C33400 + C33399) * C284 - (C33402 + C33401) * C279 +
            (C33404 + C33403) * C285 + (C33406 + C33405) * C280) *
               C17288 +
           (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C279 +
            (C33408 + C33407) * C285 + (C33410 + C33409) * C280) *
               C17289) *
              C50900 * C50841 * C51040 +
          (((C33585 + C33586) * C284 -
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C278 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C283) +
            (C33587 + C33588) * C279 - C33597 * C285 - C33598 * C280) *
               C17287 +
           ((C33590 + C33589) * C284 -
            ((C33588 + C33587) * C278 + (C33586 + C33585) * C283) +
            (C33592 + C33591) * C279 - (C33593 + C33594) * C285 -
            (C33595 + C33596) * C280) *
               C17288 +
           ((C33594 + C33593) * C284 - (C33598 * C278 + C33597 * C283) +
            (C33596 + C33595) * C279 -
            (C33361 * C1523 + C50975 * C1524 + C33360 * C290 + C33358 * C300) *
                C285 -
            (C33361 * C1525 + C50975 * C1526 + C33360 * C301 + C33358 * C308) *
                C280) *
               C17289) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C17287 +
            ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
            (C33411 * C696 + C33412 * C50753) * C17289) *
               C50900 * C941 -
           ((C33782 * C50753 + C33781 * C696) * C17289 +
            ((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C17288 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C17287) *
               C50900 * C942 +
           (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                 C696 +
             (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                 C50753) *
                C17287 +
            ((C34360 + C34359) * C696 + (C34362 + C34361) * C50753) * C17288 +
            ((C34364 + C34363) * C696 + (C34366 + C34365) * C50753) * C17289) *
               C50900 * C943) *
              C51040 +
          ((((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C696 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C50753) *
                C17287 +
            ((C33360 * C812 + C33358 * C821 + C33361 * C1082 + C50975 * C1089) *
                 C696 +
             (C33360 * C822 + C33358 * C836 + C33361 * C1088 + C50975 * C1094) *
                 C50753) *
                C17288 +
            ((C33360 * C813 + C33358 * C823 + C33361 * C1081 + C50975 * C1087) *
                 C696 +
             (C33360 * C824 + C33358 * C837 + C33361 * C1086 + C50975 * C1093) *
                 C50753) *
                C17289) *
               C50900 * C942 -
           ((C33598 * C50753 + C33597 * C696) * C17289 +
            ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) * C17288 +
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C50753 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C696) *
                C17287) *
               C50900 * C941 -
           (((C33361 * C7064 + C50975 * C7065 + C33360 * C1086 +
              C33358 * C1093) *
                 C50753 +
             (C33361 * C7062 + C50975 * C7063 + C33360 * C1081 +
              C33358 * C1087) *
                 C696) *
                C17289 +
            ((C33361 * C3651 + C50975 * C3657 + C33360 * C1088 +
              C33358 * C1094) *
                 C50753 +
             (C33361 * C3645 + C50975 * C3652 + C33360 * C1082 +
              C33358 * C1089) *
                 C696) *
                C17288 +
            ((C33361 * C3653 + C50975 * C3658 + C33360 * C1090 +
              C33358 * C1095) *
                 C50753 +
             (C33361 * C3646 + C50975 * C3654 + C33360 * C1083 +
              C33358 * C1091) *
                 C696) *
                C17287) *
               C50900 * C943) *
              C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C50773 * C2302 +
           ((C36353 + C36354) * C283 + (C36355 + C36356) * C278 -
            (C33586 + C33585) * C284 - (C33588 + C33587) * C279 +
            (C33590 + C33589) * C285 + (C33592 + C33591) * C280) *
               C50773 * C2303 +
           ((C36357 + C36358) * C283 + (C36359 + C36360) * C278 -
            (C33945 + C33946) * C284 - (C33947 + C33948) * C279 +
            (C33950 + C33949) * C285 + (C33952 + C33951) * C280) *
               C50773 * C2304) *
              C50841 * C51040 +
          (((C33585 + C33586) * C284 -
            ((C36356 + C36355) * C278 + (C36354 + C36353) * C283) +
            (C33587 + C33588) * C279 - C33597 * C285 - C33598 * C280) *
               C50773 * C2302 +
           ((C33946 + C33945) * C284 -
            ((C36360 + C36359) * C278 + (C36358 + C36357) * C283) +
            (C33948 + C33947) * C279 - (C33949 + C33950) * C285 -
            (C33951 + C33952) * C280) *
               C50773 * C2303 +
           ((C33360 * C699 + C33358 * C706 + C33361 * C3145 + C50975 * C3150) *
                C284 -
            ((C33361 * C3149 + C50975 * C3156 + C33360 * C707 + C33358 * C712) *
                 C278 +
             (C33361 * C3144 + C50975 * C3148 + C33360 * C700 + C33358 * C708) *
                 C283) +
            (C33360 * C705 + C33358 * C711 + C33361 * C3151 + C50975 * C3157) *
                C279 -
            (C33361 * C4202 + C50975 * C4203 + C33360 * C698 + C33358 * C704) *
                C285 -
            (C33361 * C4204 + C50975 * C4205 + C33360 * C703 + C33358 * C710) *
                C280) *
               C50773 * C2304) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C696 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C50753) *
               C50773 * C2302 +
           ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
               C2303 +
           C36806 * C2304) *
              C50841 * C692 -
          (C36808 * C2304 +
           ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
               C2303 +
           ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
               C2302) *
              C50841 * C693 +
          (C36806 * C2302 +
           ((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C50773 *
               C2303 +
           ((C36802 + C36803) * C696 + (C36804 + C36805) * C50753) * C50773 *
               C2304) *
              C50841 * C694 -
          (((C33361 * C20385 + C50975 * C20387 + C33360 * C2962 +
             C33358 * C2965) *
                C50753 +
            (C33361 * C20384 + C50975 * C20386 + C33360 * C2959 +
             C33358 * C2963) *
                C696) *
               C50773 * C2304 +
           ((C36805 + C36804) * C50753 + (C36803 + C36802) * C696) * C50773 *
               C2303 +
           C36808 * C2302) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C2302 +
            ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
                C2303 +
            C36806 * C2304) *
               C941 -
           (C36996 * C2304 +
            ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C50773 *
                C2303 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C50773 * C2302) *
               C942 +
           (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                 C696 +
             (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                 C50753) *
                C50773 * C2302 +
            ((C37305 + C37306) * C696 + (C37307 + C37308) * C50753) * C50773 *
                C2303 +
            ((C37309 + C37310) * C696 + (C37311 + C37312) * C50753) * C50773 *
                C2304) *
               C943) *
              C51040 +
          ((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C50773 *
                C2302 +
            ((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C50773 *
                C2303 +
            ((C36987 + C36988) * C696 + (C36989 + C36990) * C50753) * C50773 *
                C2304) *
               C942 -
           (C36808 * C2304 +
            ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
                C2303 +
            ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
                C2302) *
               C941 -
           (((C33361 * C20674 + C50975 * C20676 + C33360 * C3521 +
              C33358 * C3524) *
                 C50753 +
             (C33361 * C20673 + C50975 * C20675 + C33360 * C3518 +
              C33358 * C3522) *
                 C696) *
                C50773 * C2304 +
            ((C37312 + C37311) * C50753 + (C37310 + C37309) * C696) * C50773 *
                C2303 +
            ((C37308 + C37307) * C50753 + (C37306 + C37305) * C696) * C50773 *
                C2302) *
               C943) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C17287 +
            ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
            (C33411 * C696 + C33412 * C50753) * C17289) *
               C50900 * C51041 -
           ((C33782 * C50753 + C33781 * C696) * C17289 +
            ((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C17288 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C17287) *
               C50900 * C50853) *
              C582 +
          ((((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C696 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C50753) *
                C17287 +
            ((C33360 * C812 + C33358 * C821 + C33361 * C1082 + C50975 * C1089) *
                 C696 +
             (C33360 * C822 + C33358 * C836 + C33361 * C1088 + C50975 * C1094) *
                 C50753) *
                C17288 +
            ((C33360 * C813 + C33358 * C823 + C33361 * C1081 + C50975 * C1087) *
                 C696 +
             (C33360 * C824 + C33358 * C837 + C33361 * C1086 + C50975 * C1093) *
                 C50753) *
                C17289) *
               C50900 * C50853 -
           ((C33598 * C50753 + C33597 * C696) * C17289 +
            ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) * C17288 +
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C50753 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C696) *
                C17287) *
               C50900 * C51041) *
              C583 +
          ((((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                 C696 +
             (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                 C50753) *
                C17287 +
            ((C33946 + C33945) * C696 + (C33948 + C33947) * C50753) * C17288 +
            ((C33950 + C33949) * C696 + (C33952 + C33951) * C50753) * C17289) *
               C50900 * C51041 -
           (((C33361 * C3355 + C50975 * C3358 + C33360 * C829 + C33358 * C840) *
                 C50753 +
             (C33361 * C3349 + C50975 * C3354 + C33360 * C816 + C33358 * C830) *
                 C696) *
                C17289 +
            ((C33361 * C3353 + C50975 * C3357 + C33360 * C831 + C33358 * C841) *
                 C50753 +
             (C33361 * C3348 + C50975 * C3352 + C33360 * C817 + C33358 * C832) *
                 C696) *
                C17288 +
            ((C33361 * C3351 + C50975 * C3356 + C33360 * C833 + C33358 * C842) *
                 C50753 +
             (C33361 * C3347 + C50975 * C3350 + C33360 * C818 + C33358 * C834) *
                 C696) *
                C17287) *
               C50900 * C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C17287 +
           ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
            (C33400 + C33399) * C284 - (C33402 + C33401) * C279 +
            (C33404 + C33403) * C285 + (C33406 + C33405) * C280) *
               C17288 +
           (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C279 +
            (C33408 + C33407) * C285 + (C33410 + C33409) * C280) *
               C17289) *
              C50900 * C51041 +
          (((C33769 + C33770) * C284 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C278 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C283) +
            (C33771 + C33772) * C279 - C33781 * C285 - C33782 * C280) *
               C17287 +
           ((C33774 + C33773) * C284 -
            ((C33772 + C33771) * C278 + (C33770 + C33769) * C283) +
            (C33776 + C33775) * C279 - (C33777 + C33778) * C285 -
            (C33779 + C33780) * C280) *
               C17288 +
           ((C33778 + C33777) * C284 - (C33782 * C278 + C33781 * C283) +
            (C33780 + C33779) * C279 -
            (C33361 * C948 + C50975 * C957 + C33360 * C438 + C33358 * C448) *
                C285 -
            (C33361 * C958 + C50975 * C963 + C33360 * C449 + C33358 * C456) *
                C280) *
               C17289) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C696 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C50753) *
               C17287 +
           ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
           (C33411 * C696 + C33412 * C50753) * C17289) *
              C50900 * C1162 -
          ((C33782 * C50753 + C33781 * C696) * C17289 +
           ((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C17288 +
           ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                C50753 +
            (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                C696) *
               C17287) *
              C50900 * C1163 +
          (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                C696 +
            (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                C50753) *
               C17287 +
           ((C34360 + C34359) * C696 + (C34362 + C34361) * C50753) * C17288 +
           ((C34364 + C34363) * C696 + (C34366 + C34365) * C50753) * C17289) *
              C50900 * C1164 -
          (((C33361 * C6294 + C50975 * C6297 + C33360 * C1172 +
             C33358 * C1179) *
                C50753 +
            (C33361 * C6288 + C50975 * C6293 + C33360 * C1167 +
             C33358 * C1173) *
                C696) *
               C17289 +
           ((C33361 * C6292 + C50975 * C6296 + C33360 * C1174 +
             C33358 * C1180) *
                C50753 +
            (C33361 * C6287 + C50975 * C6291 + C33360 * C1168 +
             C33358 * C1175) *
                C696) *
               C17288 +
           ((C33361 * C6290 + C50975 * C6295 + C33360 * C1176 +
             C33358 * C1181) *
                C50753 +
            (C33361 * C6286 + C50975 * C6289 + C33360 * C1169 +
             C33358 * C1177) *
                C696) *
               C17287) *
              C50900 * C1165) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C50773 * C2302 +
           ((C36353 + C36354) * C283 + (C36355 + C36356) * C278 -
            (C33586 + C33585) * C284 - (C33588 + C33587) * C279 +
            (C33590 + C33589) * C285 + (C33592 + C33591) * C280) *
               C50773 * C2303 +
           ((C36357 + C36358) * C283 + (C36359 + C36360) * C278 -
            (C33945 + C33946) * C284 - (C33947 + C33948) * C279 +
            (C33950 + C33949) * C285 + (C33952 + C33951) * C280) *
               C50773 * C2304) *
              C51041 +
          (((C33769 + C33770) * C284 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C278 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C283) +
            (C33771 + C33772) * C279 - C33781 * C285 - C33782 * C280) *
               C50773 * C2302 +
           ((C35114 + C35113) * C284 -
            ((C33361 * C1090 + C50975 * C1095 + C33360 * C820 + C33358 * C835) *
                 C278 +
             (C33361 * C1083 + C50975 * C1091 + C33360 * C811 + C33358 * C819) *
                 C283) +
            (C35116 + C35115) * C279 - (C35117 + C35118) * C285 -
            (C35119 + C35120) * C280) *
               C50773 * C2303 +
           ((C33360 * C817 + C33358 * C832 + C33361 * C3348 + C50975 * C3352) *
                C284 -
            ((C33361 * C3351 + C50975 * C3356 + C33360 * C833 + C33358 * C842) *
                 C278 +
             (C33361 * C3347 + C50975 * C3350 + C33360 * C818 + C33358 * C834) *
                 C283) +
            (C33360 * C831 + C33358 * C841 + C33361 * C3353 + C50975 * C3357) *
                C279 -
            (C33361 * C3349 + C50975 * C3354 + C33360 * C816 + C33358 * C830) *
                C285 -
            (C33361 * C3355 + C50975 * C3358 + C33360 * C829 + C33358 * C840) *
                C280) *
               C50773 * C2304) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C2302 +
            ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
                C2303 +
            C36806 * C2304) *
               C51041 -
           (C36996 * C2304 +
            ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C50773 *
                C2303 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C50773 * C2302) *
               C50853) *
              C582 +
          ((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C50773 *
                C2302 +
            ((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C50773 *
                C2303 +
            ((C36987 + C36988) * C696 + (C36989 + C36990) * C50753) * C50773 *
                C2304) *
               C50853 -
           (C36808 * C2304 +
            ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
                C2303 +
            ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
                C2302) *
               C51041) *
              C583 +
          ((C36806 * C2302 +
            ((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C50773 *
                C2303 +
            ((C36802 + C36803) * C696 + (C36804 + C36805) * C50753) * C50773 *
                C2304) *
               C51041 -
           (((C33361 * C20596 + C50975 * C20598 + C33360 * C3154 +
              C33358 * C3159) *
                 C50753 +
             (C33361 * C20595 + C50975 * C20597 + C33360 * C3147 +
              C33358 * C3155) *
                 C696) *
                C50773 * C2304 +
            ((C36990 + C36989) * C50753 + (C36988 + C36987) * C696) * C50773 *
                C2303 +
            C36996 * C2302) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C696 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C50753) *
               C50773 * C2302 +
           ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
               C2303 +
           C36806 * C2304) *
              C1162 -
          (C36996 * C2304 +
           ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C50773 *
               C2303 +
           ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                C50753 +
            (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                C696) *
               C50773 * C2302) *
              C1163 +
          (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                C696 +
            (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                C50753) *
               C50773 * C2302 +
           ((C37305 + C37306) * C696 + (C37307 + C37308) * C50753) * C50773 *
               C2303 +
           ((C37309 + C37310) * C696 + (C37311 + C37312) * C50753) * C50773 *
               C2304) *
              C1164 -
          (((C33361 * C22841 + C50975 * C22843 + C33360 * C3649 +
             C33358 * C3656) *
                C50753 +
            (C33361 * C22840 + C50975 * C22842 + C33360 * C3644 +
             C33358 * C3650) *
                C696) *
               C50773 * C2304 +
           ((C33361 * C6466 + C50975 * C6469 + C33360 * C3653 +
             C33358 * C3658) *
                C50753 +
            (C33361 * C6463 + C50975 * C6467 + C33360 * C3646 +
             C33358 * C3654) *
                C696) *
               C50773 * C2303 +
           ((C33361 * C6290 + C50975 * C6295 + C33360 * C1176 +
             C33358 * C1181) *
                C50753 +
            (C33361 * C6286 + C50975 * C6289 + C33360 * C1169 +
             C33358 * C1177) *
                C696) *
               C50773 * C2302) *
              C1165) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1285 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51083 -
            (C33395 + C33396) * C1286 - (C33397 + C33398) * C51067 +
            C33411 * C1287 + C33412 * C1282) *
               C17287 +
           ((C33396 + C33395) * C1285 + (C33398 + C33397) * C51083 -
            (C33400 + C33399) * C1286 - (C33402 + C33401) * C51067 +
            (C33404 + C33403) * C1287 + (C33406 + C33405) * C1282) *
               C17288 +
           (C33411 * C1285 + C33412 * C51083 - C33413 * C1286 -
            C33414 * C51067 + (C33408 + C33407) * C1287 +
            (C33410 + C33409) * C1282) *
               C17289) *
              C50900 * C1643 +
          (((C33769 + C33770) * C1286 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C51083 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C1285) +
            (C33771 + C33772) * C51067 - C33781 * C1287 - C33782 * C1282) *
               C17287 +
           ((C33774 + C33773) * C1286 -
            ((C33772 + C33771) * C51083 + (C33770 + C33769) * C1285) +
            (C33776 + C33775) * C51067 - (C33777 + C33778) * C1287 -
            (C33779 + C33780) * C1282) *
               C17288 +
           ((C33778 + C33777) * C1286 - (C33782 * C51083 + C33781 * C1285) +
            (C33780 + C33779) * C51067 -
            (C33361 * C948 + C50975 * C957 + C33360 * C438 + C33358 * C448) *
                C1287 -
            (C33361 * C958 + C50975 * C963 + C33360 * C449 + C33358 * C456) *
                C1282) *
               C17289) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1285 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51083 -
            (C33395 + C33396) * C1286 - (C33397 + C33398) * C51067 +
            C33411 * C1287 + C33412 * C1282) *
               C50773 * C2302 +
           ((C36353 + C36354) * C1285 + (C36355 + C36356) * C51083 -
            (C33586 + C33585) * C1286 - (C33588 + C33587) * C51067 +
            (C33590 + C33589) * C1287 + (C33592 + C33591) * C1282) *
               C50773 * C2303 +
           (C36653 * C1285 + C36654 * C51083 - C36655 * C1286 -
            C36656 * C51067 + (C33950 + C33949) * C1287 +
            (C33952 + C33951) * C1282) *
               C50773 * C2304) *
              C1643 +
          (((C33769 + C33770) * C1286 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C51083 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C1285) +
            (C33771 + C33772) * C51067 - C33781 * C1287 - C33782 * C1282) *
               C50773 * C2302 +
           ((C35114 + C35113) * C1286 -
            ((C36983 + C36984) * C51083 + (C36985 + C36986) * C1285) +
            (C35116 + C35115) * C51067 - (C35117 + C35118) * C1287 -
            (C35119 + C35120) * C1282) *
               C50773 * C2303 +
           ((C37913 + C37914) * C1286 - (C36991 * C51083 + C36992 * C1285) +
            (C37915 + C37916) * C51067 -
            (C33361 * C3349 + C50975 * C3354 + C33360 * C816 + C33358 * C830) *
                C1287 -
            (C33361 * C3355 + C50975 * C3358 + C33360 * C829 + C33358 * C840) *
                C1282) *
               C50773 * C2304) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C1391 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C1386 -
             (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
                C17287 +
            ((C33396 + C33395) * C1391 + (C33398 + C33397) * C1386 -
             (C33400 + C33399) * C1392 - (C33402 + C33401) * C50758) *
                C17288 +
            (C33411 * C1391 + C33412 * C1386 - C33413 * C1392 -
             C33414 * C50758) *
                C17289) *
               C50900 * C1643 +
           (((C33769 + C33770) * C1392 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C1386 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C1391) +
             (C33771 + C33772) * C50758) *
                C17287 +
            ((C33774 + C33773) * C1392 -
             ((C33772 + C33771) * C1386 + (C33770 + C33769) * C1391) +
             (C33776 + C33775) * C50758) *
                C17288 +
            ((C33778 + C33777) * C1392 - (C33782 * C1386 + C33781 * C1391) +
             (C33780 + C33779) * C50758) *
                C17289) *
               C50900 * C50853) *
              C51040 +
          ((((C33585 + C33586) * C1392 -
             ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                  C1386 +
              (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                  C1391) +
             (C33587 + C33588) * C50758) *
                C17287 +
            ((C33590 + C33589) * C1392 -
             ((C33588 + C33587) * C1386 + (C33586 + C33585) * C1391) +
             (C33592 + C33591) * C50758) *
                C17288 +
            ((C33594 + C33593) * C1392 - (C33598 * C1386 + C33597 * C1391) +
             (C33596 + C33595) * C50758) *
                C17289) *
               C50900 * C1643 +
           (((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C1391 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C1386 -
             (C35113 + C35114) * C1392 - (C35115 + C35116) * C50758) *
                C17287 +
            ((C35114 + C35113) * C1391 + (C35116 + C35115) * C1386 -
             (C35117 + C35118) * C1392 - (C35119 + C35120) * C50758) *
                C17288 +
            ((C35118 + C35117) * C1391 + (C35120 + C35119) * C1386 -
             (C33361 * C1080 + C50975 * C1085 + C33360 * C814 + C33358 * C825) *
                 C1392 -
             (C33361 * C1084 + C50975 * C1092 + C33360 * C826 + C33358 * C838) *
                 C50758) *
                C17289) *
               C50900 * C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C1391 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C1386 -
             (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
                C50773 * C2302 +
            ((C36353 + C36354) * C1391 + (C36355 + C36356) * C1386 -
             (C33586 + C33585) * C1392 - (C33588 + C33587) * C50758) *
                C50773 * C2303 +
            C37710 * C2304) *
               C1643 +
           (((C33769 + C33770) * C1392 -
             ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                  C1386 +
              (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                  C1391) +
             (C33771 + C33772) * C50758) *
                C50773 * C2302 +
            ((C35114 + C35113) * C1392 -
             ((C36983 + C36984) * C1386 + (C36985 + C36986) * C1391) +
             (C35116 + C35115) * C50758) *
                C50773 * C2303 +
            ((C37913 + C37914) * C1392 - (C36991 * C1386 + C36992 * C1391) +
             (C37915 + C37916) * C50758) *
                C50773 * C2304) *
               C50853) *
              C51040 +
          ((((C33585 + C33586) * C1392 -
             ((C36356 + C36355) * C1386 + (C36354 + C36353) * C1391) +
             (C33587 + C33588) * C50758) *
                C50773 * C2302 +
            ((C33946 + C33945) * C1392 -
             ((C36360 + C36359) * C1386 + (C36358 + C36357) * C1391) +
             (C33948 + C33947) * C50758) *
                C50773 * C2303 +
            ((C36677 + C36678) * C1392 - (C36789 * C1386 + C36790 * C1391) +
             (C36683 + C36684) * C50758) *
                C50773 * C2304) *
               C1643 +
           (((C36986 + C36985) * C1391 + (C36984 + C36983) * C1386 -
             (C35113 + C35114) * C1392 - (C35115 + C35116) * C50758) *
                C50773 * C2302 +
            ((C36982 + C36981) * C1391 + (C36980 + C36979) * C1386 -
             (C37914 + C37913) * C1392 - (C37916 + C37915) * C50758) *
                C50773 * C2303 +
            ((C36987 + C36988) * C1391 + (C36989 + C36990) * C1386 -
             (C33361 * C3517 + C50975 * C3520 + C33360 * C3145 +
              C33358 * C3150) *
                 C1392 -
             (C33361 * C3519 + C50975 * C3523 + C33360 * C3151 +
              C33358 * C3157) *
                 C50758) *
                C50773 * C2304) *
               C50853) *
              C50829)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1391 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C1386 -
            (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
               C17287 +
           ((C33396 + C33395) * C1391 + (C33398 + C33397) * C1386 -
            (C33400 + C33399) * C1392 - (C33402 + C33401) * C50758) *
               C17288 +
           (C33411 * C1391 + C33412 * C1386 - C33413 * C1392 -
            C33414 * C50758) *
               C17289) *
              C50900 * C51087 +
          (((C33769 + C33770) * C1392 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C1386 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C1391) +
            (C33771 + C33772) * C50758) *
               C17287 +
           ((C33774 + C33773) * C1392 -
            ((C33772 + C33771) * C1386 + (C33770 + C33769) * C1391) +
            (C33776 + C33775) * C50758) *
               C17288 +
           ((C33778 + C33777) * C1392 - (C33782 * C1386 + C33781 * C1391) +
            (C33780 + C33779) * C50758) *
               C17289) *
              C50900 * C51076 +
          (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                C1391 +
            (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                C1386 -
            (C34359 + C34360) * C1392 - (C34361 + C34362) * C50758) *
               C17287 +
           ((C34360 + C34359) * C1391 + (C34362 + C34361) * C1386 -
            (C34363 + C34364) * C1392 - (C34365 + C34366) * C50758) *
               C17288 +
           ((C34364 + C34363) * C1391 + (C34366 + C34365) * C1386 -
            (C33361 * C1166 + C50975 * C1171 + C33360 * C947 + C33358 * C955) *
                C1392 -
            (C33361 * C1170 + C50975 * C1178 + C33360 * C956 + C33358 * C962) *
                C50758) *
               C17289) *
              C50900 * C1875) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C1391 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C1386 -
            (C33395 + C33396) * C1392 - (C33397 + C33398) * C50758) *
               C50773 * C2302 +
           ((C36353 + C36354) * C1391 + (C36355 + C36356) * C1386 -
            (C33586 + C33585) * C1392 - (C33588 + C33587) * C50758) *
               C50773 * C2303 +
           C37710 * C2304) *
              C51087 +
          (((C33769 + C33770) * C1392 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C1386 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C1391) +
            (C33771 + C33772) * C50758) *
               C50773 * C2302 +
           ((C35114 + C35113) * C1392 -
            ((C36983 + C36984) * C1386 + (C36985 + C36986) * C1391) +
            (C35116 + C35115) * C50758) *
               C50773 * C2303 +
           ((C37913 + C37914) * C1392 - (C36991 * C1386 + C36992 * C1391) +
            (C37915 + C37916) * C50758) *
               C50773 * C2304) *
              C51076 +
          (((C33360 * C944 + C33358 * C949 + C33361 * C1169 + C50975 * C1177) *
                C1391 +
            (C33360 * C950 + C33358 * C959 + C33361 * C1176 + C50975 * C1181) *
                C1386 -
            (C34359 + C34360) * C1392 - (C34361 + C34362) * C50758) *
               C50773 * C2302 +
           ((C37305 + C37306) * C1391 + (C37307 + C37308) * C1386 -
            (C33361 * C3645 + C50975 * C3652 + C33360 * C1082 +
             C33358 * C1089) *
                C1392 -
            (C33361 * C3651 + C50975 * C3657 + C33360 * C1088 +
             C33358 * C1094) *
                C50758) *
               C50773 * C2303 +
           ((C37309 + C37310) * C1391 + (C37311 + C37312) * C1386 -
            (C33361 * C3643 + C50975 * C3648 + C33360 * C3348 +
             C33358 * C3352) *
                C1392 -
            (C33361 * C3647 + C50975 * C3655 + C33360 * C3353 +
             C33358 * C3357) *
                C50758) *
               C50773 * C2304) *
              C1875) *
         C50815) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C17287 +
          ((C33396 + C33395) * C118 + (C33398 + C33397) * C106 -
           (C33400 + C33399) * C119 - (C33402 + C33401) * C107 +
           (C33404 + C33403) * C120 + (C33406 + C33405) * C108 -
           (C33407 + C33408) * C121 - (C33409 + C33410) * C109) *
              C17288 +
          (C33411 * C118 + C33412 * C106 - C33413 * C119 - C33414 * C107 +
           (C33408 + C33407) * C120 + (C33410 + C33409) * C108 -
           (C33361 * C439 + C50975 * C450 + C33360 * C127 + C33358 * C139) *
               C121 -
           (C33361 * C451 + C50975 * C457 + C33360 * C140 + C33358 * C148) *
               C109) *
              C17289) *
         C50900 * C50841 * C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51025 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
               C17287 +
           ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51025 -
            (C33400 + C33399) * C49763 - (C33402 + C33401) * C50758) *
               C17288 +
           (C33411 * C49770 + C33412 * C51025 - C33413 * C49763 -
            C33414 * C50758) *
               C17289) *
              C50900 * C50841 * C582 +
          (((C33585 + C33586) * C49763 -
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C51025 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C49770) +
            (C33587 + C33588) * C50758) *
               C17287 +
           ((C33590 + C33589) * C49763 -
            ((C33588 + C33587) * C51025 + (C33586 + C33585) * C49770) +
            (C33592 + C33591) * C50758) *
               C17288 +
           ((C33594 + C33593) * C49763 - (C33598 * C51025 + C33597 * C49770) +
            (C33596 + C33595) * C50758) *
               C17289) *
              C50900 * C50841 * C583 +
          (((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                C49770 +
            (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                C51025 -
            (C33945 + C33946) * C49763 - (C33947 + C33948) * C50758) *
               C17287 +
           ((C33946 + C33945) * C49770 + (C33948 + C33947) * C51025 -
            (C33949 + C33950) * C49763 - (C33951 + C33952) * C50758) *
               C17288 +
           ((C33950 + C33949) * C49770 + (C33952 + C33951) * C51025 -
            (C33361 * C815 + C50975 * C828 + C33360 * C590 + C33358 * C598) *
                C49763 -
            (C33361 * C827 + C50975 * C839 + C33360 * C599 + C33358 * C605) *
                C50758) *
               C17289) *
              C50900 * C50841 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C50773 * C2302 +
          ((C33360 * C287 + C33358 * C294 + C33361 * C811 + C50975 * C819) *
               C118 +
           (C33360 * C293 + C33358 * C304 + C33361 * C820 + C50975 * C835) *
               C106 -
           (C33586 + C33585) * C119 - (C33588 + C33587) * C107 +
           (C33590 + C33589) * C120 + (C33592 + C33591) * C108 -
           (C33593 + C33594) * C121 - (C33595 + C33596) * C109) *
              C50773 * C2303 +
          ((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
               C118 +
           (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
               C106 -
           (C33945 + C33946) * C119 - (C33947 + C33948) * C107 +
           (C33950 + C33949) * C120 + (C33952 + C33951) * C108 -
           (C33361 * C815 + C50975 * C828 + C33360 * C590 + C33358 * C598) *
               C121 -
           (C33361 * C827 + C50975 * C839 + C33360 * C599 + C33358 * C605) *
               C109) *
              C50773 * C2304) *
         C50841 * C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C51025 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50758) *
               C50773 * C2302 +
           ((C36353 + C36354) * C49770 + (C36355 + C36356) * C51025 -
            (C33586 + C33585) * C49763 - (C33588 + C33587) * C50758) *
               C50773 * C2303 +
           C36688 * C2304) *
              C50841 * C582 +
          (((C33585 + C33586) * C49763 -
            ((C36356 + C36355) * C51025 + (C36354 + C36353) * C49770) +
            (C33587 + C33588) * C50758) *
               C50773 * C2302 +
           ((C33946 + C33945) * C49763 -
            ((C36360 + C36359) * C51025 + (C36358 + C36357) * C49770) +
            (C33948 + C33947) * C50758) *
               C50773 * C2303 +
           ((C36677 + C36678) * C49763 -
            ((C36679 + C36680) * C51025 + (C36681 + C36682) * C49770) +
            (C36683 + C36684) * C50758) *
               C50773 * C2304) *
              C50841 * C583 +
          (C36688 * C2302 +
           ((C36682 + C36681) * C49770 + (C36680 + C36679) * C51025 -
            (C36678 + C36677) * C49763 - (C36684 + C36683) * C50758) *
               C50773 * C2303 +
           ((C33360 * C2803 + C33358 * C2806 + C33361 * C3147 +
             C50975 * C3155) *
                C49770 +
            (C33360 * C2807 + C33358 * C2812 + C33361 * C3154 +
             C50975 * C3159) *
                C51025 -
            (C33361 * C3146 + C50975 * C3153 + C33360 * C2804 +
             C33358 * C2808) *
                C49763 -
            (C33361 * C3152 + C50975 * C3158 + C33360 * C2809 +
             C33358 * C2813) *
                C50758) *
               C50773 * C2304) *
              C50841 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C17287 +
           ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
            (C33400 + C33399) * C284 - (C33402 + C33401) * C279 +
            (C33404 + C33403) * C285 + (C33406 + C33405) * C280) *
               C17288 +
           (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C279 +
            (C33408 + C33407) * C285 + (C33410 + C33409) * C280) *
               C17289) *
              C50900 * C50841 * C51040 +
          (((C33585 + C33586) * C284 -
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C278 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C283) +
            (C33587 + C33588) * C279 - C33597 * C285 - C33598 * C280) *
               C17287 +
           ((C33590 + C33589) * C284 -
            ((C33588 + C33587) * C278 + (C33586 + C33585) * C283) +
            (C33592 + C33591) * C279 - (C33593 + C33594) * C285 -
            (C33595 + C33596) * C280) *
               C17288 +
           ((C33594 + C33593) * C284 - (C33598 * C278 + C33597 * C283) +
            (C33596 + C33595) * C279 -
            (C33361 * C1523 + C50975 * C1524 + C33360 * C290 + C33358 * C300) *
                C285 -
            (C33361 * C1525 + C50975 * C1526 + C33360 * C301 + C33358 * C308) *
                C280) *
               C17289) *
              C50900 * C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C696 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C50753) *
               C17287 +
           ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
           (C33411 * C696 + C33412 * C50753) * C17289) *
              C50900 * C50841 * C692 -
          ((C33598 * C50753 + C33597 * C696) * C17289 +
           ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) * C17288 +
           ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                C50753 +
            (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                C696) *
               C17287) *
              C50900 * C50841 * C693 +
          (((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                C696 +
            (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                C50753) *
               C17287 +
           ((C33946 + C33945) * C696 + (C33948 + C33947) * C50753) * C17288 +
           ((C33950 + C33949) * C696 + (C33952 + C33951) * C50753) * C17289) *
              C50900 * C50841 * C694 -
          (((C33361 * C4204 + C50975 * C4205 + C33360 * C703 + C33358 * C710) *
                C50753 +
            (C33361 * C4202 + C50975 * C4203 + C33360 * C698 + C33358 * C704) *
                C696) *
               C17289 +
           ((C33361 * C3151 + C50975 * C3157 + C33360 * C705 + C33358 * C711) *
                C50753 +
            (C33361 * C3145 + C50975 * C3150 + C33360 * C699 + C33358 * C706) *
                C696) *
               C17288 +
           ((C33361 * C3149 + C50975 * C3156 + C33360 * C707 + C33358 * C712) *
                C50753 +
            (C33361 * C3144 + C50975 * C3148 + C33360 * C700 + C33358 * C708) *
                C696) *
               C17287) *
              C50900 * C50841 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C50773 * C2302 +
           ((C36353 + C36354) * C283 + (C36355 + C36356) * C278 -
            (C33586 + C33585) * C284 - (C33588 + C33587) * C279 +
            (C33590 + C33589) * C285 + (C33592 + C33591) * C280) *
               C50773 * C2303 +
           ((C36357 + C36358) * C283 + (C36359 + C36360) * C278 -
            (C33945 + C33946) * C284 - (C33947 + C33948) * C279 +
            (C33950 + C33949) * C285 + (C33952 + C33951) * C280) *
               C50773 * C2304) *
              C50841 * C51040 +
          (((C33585 + C33586) * C284 -
            ((C36356 + C36355) * C278 + (C36354 + C36353) * C283) +
            (C33587 + C33588) * C279 - C33597 * C285 - C33598 * C280) *
               C50773 * C2302 +
           ((C33946 + C33945) * C284 -
            ((C36360 + C36359) * C278 + (C36358 + C36357) * C283) +
            (C33948 + C33947) * C279 - (C33949 + C33950) * C285 -
            (C33951 + C33952) * C280) *
               C50773 * C2303 +
           ((C33360 * C699 + C33358 * C706 + C33361 * C3145 + C50975 * C3150) *
                C284 -
            ((C33361 * C3149 + C50975 * C3156 + C33360 * C707 + C33358 * C712) *
                 C278 +
             (C33361 * C3144 + C50975 * C3148 + C33360 * C700 + C33358 * C708) *
                 C283) +
            (C33360 * C705 + C33358 * C711 + C33361 * C3151 + C50975 * C3157) *
                C279 -
            (C33361 * C4202 + C50975 * C4203 + C33360 * C698 + C33358 * C704) *
                C285 -
            (C33361 * C4204 + C50975 * C4205 + C33360 * C703 + C33358 * C710) *
                C280) *
               C50773 * C2304) *
              C50841 * C50829)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C696 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C50753) *
               C50773 * C2302 +
           ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
               C2303 +
           C36806 * C2304) *
              C50841 * C692 -
          (C36808 * C2304 +
           ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
               C2303 +
           ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
               C2302) *
              C50841 * C693 +
          (C36806 * C2302 +
           ((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C50773 *
               C2303 +
           ((C36802 + C36803) * C696 + (C36804 + C36805) * C50753) * C50773 *
               C2304) *
              C50841 * C694 -
          (((C33361 * C20385 + C50975 * C20387 + C33360 * C2962 +
             C33358 * C2965) *
                C50753 +
            (C33361 * C20384 + C50975 * C20386 + C33360 * C2959 +
             C33358 * C2963) *
                C696) *
               C50773 * C2304 +
           ((C36805 + C36804) * C50753 + (C36803 + C36802) * C696) * C50773 *
               C2303 +
           C36808 * C2302) *
              C50841 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C17287 +
           ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
            (C33400 + C33399) * C284 - (C33402 + C33401) * C279 +
            (C33404 + C33403) * C285 + (C33406 + C33405) * C280) *
               C17288 +
           (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C279 +
            (C33408 + C33407) * C285 + (C33410 + C33409) * C280) *
               C17289) *
              C50900 * C51041 +
          (((C33769 + C33770) * C284 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C278 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C283) +
            (C33771 + C33772) * C279 - C33781 * C285 - C33782 * C280) *
               C17287 +
           ((C33774 + C33773) * C284 -
            ((C33772 + C33771) * C278 + (C33770 + C33769) * C283) +
            (C33776 + C33775) * C279 - (C33777 + C33778) * C285 -
            (C33779 + C33780) * C280) *
               C17288 +
           ((C33778 + C33777) * C284 - (C33782 * C278 + C33781 * C283) +
            (C33780 + C33779) * C279 -
            (C33361 * C948 + C50975 * C957 + C33360 * C438 + C33358 * C448) *
                C285 -
            (C33361 * C958 + C50975 * C963 + C33360 * C449 + C33358 * C456) *
                C280) *
               C17289) *
              C50900 * C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C17287 +
            ((C33396 + C33395) * C696 + (C33398 + C33397) * C50753) * C17288 +
            (C33411 * C696 + C33412 * C50753) * C17289) *
               C50900 * C51041 -
           ((C33782 * C50753 + C33781 * C696) * C17289 +
            ((C33772 + C33771) * C50753 + (C33770 + C33769) * C696) * C17288 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C17287) *
               C50900 * C50853) *
              C582 +
          ((((C33360 * C811 + C33358 * C819 + C33361 * C1083 + C50975 * C1091) *
                 C696 +
             (C33360 * C820 + C33358 * C835 + C33361 * C1090 + C50975 * C1095) *
                 C50753) *
                C17287 +
            ((C33360 * C812 + C33358 * C821 + C33361 * C1082 + C50975 * C1089) *
                 C696 +
             (C33360 * C822 + C33358 * C836 + C33361 * C1088 + C50975 * C1094) *
                 C50753) *
                C17288 +
            ((C33360 * C813 + C33358 * C823 + C33361 * C1081 + C50975 * C1087) *
                 C696 +
             (C33360 * C824 + C33358 * C837 + C33361 * C1086 + C50975 * C1093) *
                 C50753) *
                C17289) *
               C50900 * C50853 -
           ((C33598 * C50753 + C33597 * C696) * C17289 +
            ((C33588 + C33587) * C50753 + (C33586 + C33585) * C696) * C17288 +
            ((C33361 * C820 + C50975 * C835 + C33360 * C293 + C33358 * C304) *
                 C50753 +
             (C33361 * C811 + C50975 * C819 + C33360 * C287 + C33358 * C294) *
                 C696) *
                C17287) *
               C50900 * C51041) *
              C583 +
          ((((C33360 * C587 + C33358 * C592 + C33361 * C818 + C50975 * C834) *
                 C696 +
             (C33360 * C593 + C33358 * C602 + C33361 * C833 + C50975 * C842) *
                 C50753) *
                C17287 +
            ((C33946 + C33945) * C696 + (C33948 + C33947) * C50753) * C17288 +
            ((C33950 + C33949) * C696 + (C33952 + C33951) * C50753) * C17289) *
               C50900 * C51041 -
           (((C33361 * C3355 + C50975 * C3358 + C33360 * C829 + C33358 * C840) *
                 C50753 +
             (C33361 * C3349 + C50975 * C3354 + C33360 * C816 + C33358 * C830) *
                 C696) *
                C17289 +
            ((C33361 * C3353 + C50975 * C3357 + C33360 * C831 + C33358 * C841) *
                 C50753 +
             (C33361 * C3348 + C50975 * C3352 + C33360 * C817 + C33358 * C832) *
                 C696) *
                C17288 +
            ((C33361 * C3351 + C50975 * C3356 + C33360 * C833 + C33358 * C842) *
                 C50753 +
             (C33361 * C3347 + C50975 * C3350 + C33360 * C818 + C33358 * C834) *
                 C696) *
                C17287) *
               C50900 * C50853) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C279 +
            C33411 * C285 + C33412 * C280) *
               C50773 * C2302 +
           ((C36353 + C36354) * C283 + (C36355 + C36356) * C278 -
            (C33586 + C33585) * C284 - (C33588 + C33587) * C279 +
            (C33590 + C33589) * C285 + (C33592 + C33591) * C280) *
               C50773 * C2303 +
           ((C36357 + C36358) * C283 + (C36359 + C36360) * C278 -
            (C33945 + C33946) * C284 - (C33947 + C33948) * C279 +
            (C33950 + C33949) * C285 + (C33952 + C33951) * C280) *
               C50773 * C2304) *
              C51041 +
          (((C33769 + C33770) * C284 -
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C278 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C283) +
            (C33771 + C33772) * C279 - C33781 * C285 - C33782 * C280) *
               C50773 * C2302 +
           ((C35114 + C35113) * C284 -
            ((C33361 * C1090 + C50975 * C1095 + C33360 * C820 + C33358 * C835) *
                 C278 +
             (C33361 * C1083 + C50975 * C1091 + C33360 * C811 + C33358 * C819) *
                 C283) +
            (C35116 + C35115) * C279 - (C35117 + C35118) * C285 -
            (C35119 + C35120) * C280) *
               C50773 * C2303 +
           ((C33360 * C817 + C33358 * C832 + C33361 * C3348 + C50975 * C3352) *
                C284 -
            ((C33361 * C3351 + C50975 * C3356 + C33360 * C833 + C33358 * C842) *
                 C278 +
             (C33361 * C3347 + C50975 * C3350 + C33360 * C818 + C33358 * C834) *
                 C283) +
            (C33360 * C831 + C33358 * C841 + C33361 * C3353 + C50975 * C3357) *
                C279 -
            (C33361 * C3349 + C50975 * C3354 + C33360 * C816 + C33358 * C830) *
                C285 -
            (C33361 * C3355 + C50975 * C3358 + C33360 * C829 + C33358 * C840) *
                C280) *
               C50773 * C2304) *
              C50853) *
         C50815) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C435 + C50975 * C442) *
                 C696 +
             (C33360 * C130 + C33358 * C143 + C33361 * C441 + C50975 * C452) *
                 C50753) *
                C50773 * C2302 +
            ((C36353 + C36354) * C696 + (C36355 + C36356) * C50753) * C50773 *
                C2303 +
            C36806 * C2304) *
               C51041 -
           (C36996 * C2304 +
            ((C36983 + C36984) * C50753 + (C36985 + C36986) * C696) * C50773 *
                C2303 +
            ((C33361 * C950 + C50975 * C959 + C33360 * C441 + C33358 * C452) *
                 C50753 +
             (C33361 * C944 + C50975 * C949 + C33360 * C435 + C33358 * C442) *
                 C696) *
                C50773 * C2302) *
               C50853) *
              C582 +
          ((((C36986 + C36985) * C696 + (C36984 + C36983) * C50753) * C50773 *
                C2302 +
            ((C36982 + C36981) * C696 + (C36980 + C36979) * C50753) * C50773 *
                C2303 +
            ((C36987 + C36988) * C696 + (C36989 + C36990) * C50753) * C50773 *
                C2304) *
               C50853 -
           (C36808 * C2304 +
            ((C36360 + C36359) * C50753 + (C36358 + C36357) * C696) * C50773 *
                C2303 +
            ((C36356 + C36355) * C50753 + (C36354 + C36353) * C696) * C50773 *
                C2302) *
               C51041) *
              C583 +
          ((C36806 * C2302 +
            ((C36682 + C36681) * C696 + (C36680 + C36679) * C50753) * C50773 *
                C2303 +
            ((C36802 + C36803) * C696 + (C36804 + C36805) * C50753) * C50773 *
                C2304) *
               C51041 -
           (((C33361 * C20596 + C50975 * C20598 + C33360 * C3154 +
              C33358 * C3159) *
                 C50753 +
             (C33361 * C20595 + C50975 * C20597 + C33360 * C3147 +
              C33358 * C3155) *
                 C696) *
                C50773 * C2304 +
            ((C36990 + C36989) * C50753 + (C36988 + C36987) * C696) * C50773 *
                C2303 +
            C36996 * C2302) *
               C50853) *
              C584)) /
            (p * q * std::sqrt(p + q));
}
